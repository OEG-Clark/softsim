{"home.repos.pwc.inspect_result.esw0116_DynaVSR.codes.make_downscaled_images.set_kernel_params": [[19, 29], ["numpy.random.random_sample", "numpy.random.random_sample", "numpy.random.random_sample"], "function", ["None"], ["def", "set_kernel_params", "(", "sigma_x", "=", "None", ",", "sigma_y", "=", "None", ",", "theta", "=", "None", ")", ":", "\n", "    ", "if", "sigma_x", "is", "None", ":", "\n", "        ", "sigma_x", "=", "0.2", "+", "np", ".", "random", ".", "random_sample", "(", ")", "*", "1.8", "\n", "", "if", "sigma_y", "is", "None", ":", "\n", "        ", "sigma_y", "=", "0.2", "+", "np", ".", "random", ".", "random_sample", "(", ")", "*", "1.8", "\n", "", "if", "theta", "is", "None", ":", "\n", "        ", "theta", "=", "np", ".", "random", ".", "random_sample", "(", ")", "*", "math", ".", "pi", "*", "2", "-", "math", ".", "pi", "\n", "\n", "# 0~0.2 -> 0, 0.2~0.4 -> 1, 0.4~0.6 -> 2, 0.6~0.8 -> 3, 0.8~1 -> 4", "\n", "", "return", "{", "'theta'", ":", "theta", ",", "'sigma'", ":", "[", "sigma_x", ",", "sigma_y", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.codes.make_downscaled_images.main": [[31, 224], ["torch.device", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "data_modes.split", "range", "len", "os.join", "os.join", "os.exists", "os.makedirs", "os.makedirs", "os.exists", "os.makedirs", "os.makedirs", "os.join", "os.join", "os.join", "os.join", "sorted", "float", "float", "float", "print", "make_downscaled_images.set_kernel_params", "os.join", "os.join", "sorted", "len", "data.read_img_seq", "str", "os.exists", "os.makedirs", "os.makedirs", "open", "sorted", "os.join", "glob.glob", "data.random_kernel_generator.Degradation", "data.old_kernel_generator.Degradation", "os.basename", "os.basename", "os.join", "os.basename", "os.exists", "os.makedirs", "os.makedirs", "os.exists", "os.makedirs", "os.makedirs", "os.join", "glob.glob", "range", "data_util.read_img_seq.split", "NotImplementedError", "f.read().splitlines", "os.join", "numpy.load", "os.dirname", "os.exists", "os.makedirs", "os.makedirs", "os.join", "os.join", "os.join", "oldkg.Degradation.set_kernel_directly", "oldkg.Degradation.apply", "imgs_LR.mul().clamp().round().div.mul().clamp().round().div", "imgs_LR.mul().clamp().round().div.permute().cpu().numpy", "enumerate", "oldkg.Degradation.apply", "imgs_SuperLR.mul().clamp().round().div.mul().clamp().round().div", "imgs_SuperLR.mul().clamp().round().div.permute().cpu().numpy", "enumerate", "oldkg.Degradation.apply", "torch.from_numpy().permute.permute().cpu().numpy", "torch.from_numpy().permute.astype", "torch.from_numpy().permute", "oldkg.Degradation.apply", "img_superlr_batch.astype.permute().cpu().numpy", "img_superlr_batch.astype.astype", "NotImplementedError", "str", "os.exists", "os.mkdir", "os.mkdir", "os.exists", "os.mkdir", "os.mkdir", "os.mkdir", "os.mkdir", "imageio.imwrite", "imageio.imwrite", "oldkg.Degradation.apply", "imgs_SuperLR.mul().clamp().round().div.mul().clamp().round().div", "oldkg.Degradation.apply", "imgs_SuperLR.mul().clamp().round().div.mul().clamp().round().div", "imgs_SuperLR.mul().clamp().round().div.permute().cpu().numpy", "enumerate", "os.basename", "imageio.imwrite", "torch.from_numpy().permute.astype", "os.basename", "imageio.imwrite", "torch.from_numpy().permute", "oldkg.Degradation.apply", "img_superlr_batch.astype.permute().cpu().numpy", "torch.from_numpy().permute", "oldkg.Degradation.apply", "img_superlr_batch.astype.permute().cpu().numpy", "img_superlr_batch.astype.astype", "f.read", "os.splitext", "os.splitext", "os.exists", "data.index_generation", "imgs_LR.mul().clamp().round().div.mul().clamp().round", "imgs_LR.mul().clamp().round().div.permute().cpu", "os.join", "imgs_SuperLR.mul().clamp().round().div.mul().clamp().round", "imgs_SuperLR.mul().clamp().round().div.permute().cpu", "os.join", "imageio.imwrite", "torch.from_numpy().permute.permute().cpu", "os.join", "torch.from_numpy", "img_superlr_batch.astype.permute().cpu", "os.join", "img_superlr_batch.astype.astype", "img_superlr_batch.astype.astype", "os.basename", "imageio.imwrite", "str", "k.find", "k.find", "k.find", "k.find", "os.basename", "os.basename", "imgs_SuperLR.mul().clamp().round().div.mul().clamp().round", "imgs_SuperLR.mul().clamp().round().div.mul().clamp().round", "imgs_SuperLR.mul().clamp().round().div.permute().cpu", "os.join", "torch.from_numpy().permute.clip", "img_superlr_batch.astype.clip", "torch.from_numpy", "img_superlr_batch.astype.permute().cpu", "torch.from_numpy", "img_superlr_batch.astype.permute().cpu", "os.join", "imgs_LR.mul().clamp().round().div.mul().clamp", "imgs_LR.mul().clamp().round().div.permute", "imgs_SuperLR.mul().clamp().round().div.mul().clamp", "imgs_SuperLR.mul().clamp().round().div.permute", "torch.from_numpy().permute.permute", "img_superlr_batch.astype.permute", "img_superlr_batch.astype.clip", "img_superlr_batch.astype.clip", "imgs_SuperLR.mul().clamp().round().div.mul().clamp", "imgs_SuperLR.mul().clamp().round().div.mul().clamp", "imgs_SuperLR.mul().clamp().round().div.permute", "img_superlr_batch.astype.permute", "img_superlr_batch.astype.permute", "imgs_LR.mul().clamp().round().div.mul", "imgs_SuperLR.mul().clamp().round().div.mul", "imgs_SuperLR.mul().clamp().round().div.mul", "imgs_SuperLR.mul().clamp().round().div.mul"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.set_kernel_params", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.read_img_seq", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.load", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.old_kernel_generator.Degradation.set_kernel_directly", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.old_kernel_generator.Degradation.apply", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.old_kernel_generator.Degradation.apply", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.old_kernel_generator.Degradation.apply", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.old_kernel_generator.Degradation.apply", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.mkdir", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.mkdir", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.mkdir", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.mkdir", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.mkdir", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.mkdir", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.old_kernel_generator.Degradation.apply", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.old_kernel_generator.Degradation.apply", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.old_kernel_generator.Degradation.apply", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.old_kernel_generator.Degradation.apply", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.index_generation"], ["", "def", "main", "(", ")", ":", "\n", "#################", "\n", "# configurations", "\n", "#################", "\n", "    ", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "# os.environ['CUDA_VISIBLE_DEVICES'] = '0'", "\n", "\n", "prog", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "prog", ".", "add_argument", "(", "'--dataset_mode'", ",", "'-m'", ",", "type", "=", "str", ",", "default", "=", "'Vid4+REDS'", ",", "help", "=", "'data_mode'", ")", "\n", "prog", ".", "add_argument", "(", "'--degradation_mode'", ",", "'-d'", ",", "type", "=", "str", ",", "default", "=", "'impulse'", ",", "choices", "=", "(", "'impulse'", ",", "'bicubic'", ",", "'preset'", ")", ",", "help", "=", "'path to image output directory.'", ")", "\n", "prog", ".", "add_argument", "(", "'--sigma_x'", ",", "'-sx'", ",", "type", "=", "float", ",", "default", "=", "1", ",", "help", "=", "'sigma_x'", ")", "\n", "prog", ".", "add_argument", "(", "'--sigma_y'", ",", "'-sy'", ",", "type", "=", "float", ",", "default", "=", "0", ",", "help", "=", "'sigma_y'", ")", "\n", "prog", ".", "add_argument", "(", "'--theta'", ",", "'-t'", ",", "type", "=", "float", ",", "default", "=", "0", ",", "help", "=", "'theta'", ")", "\n", "prog", ".", "add_argument", "(", "'--scale'", ",", "'-sc'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "choices", "=", "(", "2", ",", "4", ")", ",", "help", "=", "'scale factor'", ")", "\n", "\n", "args", "=", "prog", ".", "parse_args", "(", ")", "\n", "\n", "data_modes", "=", "args", ".", "dataset_mode", "\n", "degradation_mode", "=", "args", ".", "degradation_mode", "# impulse | bicubic", "\n", "sig_x", ",", "sig_y", ",", "the", "=", "args", ".", "sigma_x", ",", "args", ".", "sigma_y", ",", "args", ".", "theta", "*", "math", ".", "pi", "/", "180", "\n", "if", "sig_y", "==", "0", ":", "\n", "        ", "sig_y", "=", "sig_x", "\n", "\n", "", "scale", "=", "args", ".", "scale", "\n", "kernel_size", "=", "21", "\n", "\n", "N_frames", "=", "7", "\n", "padding", "=", "'new_info'", "\n", "\n", "data_mode_l", "=", "data_modes", ".", "split", "(", "'+'", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "data_mode_l", ")", ")", ":", "\n", "        ", "data_mode", "=", "data_mode_l", "[", "i", "]", "\n", "#### dataset", "\n", "if", "data_mode", "==", "'Vid4'", ":", "\n", "            ", "kernel_folder", "=", "'../pretrained_models/Mixed/Vid4.npy'", "\n", "dataset_folder", "=", "'../dataset/Vid4'", "\n", "", "elif", "data_mode", "==", "'REDS'", ":", "\n", "            ", "kernel_folder", "=", "'../pretrained_models/Mixed/REDS.npy'", "\n", "dataset_folder", "=", "'../dataset/REDS/train'", "\n", "", "elif", "data_mode", "==", "'Vimeo'", ":", "\n", "            ", "if", "degradation_mode", "==", "'preset'", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'We do not support preset mode in Vimeo dataset'", ")", "\n", "", "dataset_folder", "=", "'../dataset/vimeo_septuplet'", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "save_folder_name", "=", "'preset'", "if", "degradation_mode", "==", "'preset'", "else", "degradation_mode", "+", "'_'", "+", "str", "(", "'{:.1f}'", ".", "format", "(", "sig_x", ")", ")", "+", "'_'", "+", "str", "(", "'{:.1f}'", ".", "format", "(", "sig_y", ")", ")", "+", "'_'", "+", "str", "(", "'{:.1f}'", ".", "format", "(", "args", ".", "theta", ")", ")", "\n", "save_folder", "=", "osp", ".", "join", "(", "dataset_folder", ",", "'LR_'", "+", "save_folder_name", ",", "'X2'", ")", "\n", "if", "not", "osp", ".", "exists", "(", "save_folder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_folder", ")", "\n", "\n", "", "save_folder2", "=", "osp", ".", "join", "(", "dataset_folder", ",", "'LR_'", "+", "save_folder_name", ",", "'X4'", ")", "\n", "if", "not", "osp", ".", "exists", "(", "save_folder2", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_folder2", ")", "\n", "\n", "", "if", "scale", "==", "4", ":", "\n", "            ", "save_folder3", "=", "osp", ".", "join", "(", "dataset_folder", ",", "'LR_'", "+", "save_folder_name", ",", "'X16'", ")", "\n", "if", "not", "osp", ".", "exists", "(", "save_folder3", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "save_folder3", ")", "\n", "\n", "", "", "if", "data_mode", "==", "'Vimeo'", ":", "\n", "            ", "GT_dataset_folder", "=", "osp", ".", "join", "(", "dataset_folder", ",", "'sequences'", ")", "\n", "meta", "=", "osp", ".", "join", "(", "dataset_folder", ",", "'sep_testlist.txt'", ")", "\n", "with", "open", "(", "meta", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "seq_list", "=", "sorted", "(", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", ")", "\n", "", "subfolder_GT_l", "=", "[", "osp", ".", "join", "(", "GT_dataset_folder", ",", "seq_ind", ")", "for", "seq_ind", "in", "seq_list", "]", "\n", "\n", "", "else", ":", "\n", "            ", "GT_dataset_folder", "=", "osp", ".", "join", "(", "dataset_folder", ",", "'HR'", ")", "\n", "subfolder_GT_l", "=", "sorted", "(", "glob", ".", "glob", "(", "osp", ".", "join", "(", "GT_dataset_folder", ",", "'*'", ")", ")", ")", "\n", "if", "data_mode", "==", "'REDS'", ":", "\n", "                ", "subfolder_GT_l", "=", "[", "k", "for", "k", "in", "subfolder_GT_l", "if", "\n", "k", ".", "find", "(", "'000'", ")", ">=", "0", "or", "k", ".", "find", "(", "'011'", ")", ">=", "0", "or", "k", ".", "find", "(", "'015'", ")", ">=", "0", "or", "k", ".", "find", "(", "'020'", ")", ">=", "0", "]", "\n", "\n", "", "", "sig_x", ",", "sig_y", ",", "the", "=", "float", "(", "sig_x", ")", ",", "float", "(", "sig_y", ")", ",", "float", "(", "the", ")", "\n", "\n", "for", "subfolder_GT", "in", "subfolder_GT_l", ":", "\n", "            ", "print", "(", "subfolder_GT", ")", "\n", "gen_kwargs", "=", "set_kernel_params", "(", "sigma_x", "=", "sig_x", ",", "sigma_y", "=", "sig_y", ",", "theta", "=", "the", ")", "\n", "if", "degradation_mode", "==", "'impulse'", "or", "degradation_mode", "==", "'preset'", ":", "\n", "                ", "kernel_gen", "=", "rkg", ".", "Degradation", "(", "kernel_size", ",", "2", ",", "**", "gen_kwargs", ")", "\n", "if", "degradation_mode", "==", "'preset'", ":", "\n", "                    ", "kernel_preset", "=", "np", ".", "load", "(", "kernel_folder", ")", "\n", "", "", "else", ":", "\n", "                ", "kernel_gen", "=", "oldkg", ".", "Degradation", "(", "kernel_size", ",", "2", ",", "type", "=", "0.7", ",", "**", "gen_kwargs", ")", "\n", "\n", "", "if", "data_mode", "==", "'Vimeo'", ":", "\n", "                ", "sub1", "=", "osp", ".", "basename", "(", "osp", ".", "dirname", "(", "subfolder_GT", ")", ")", "\n", "sub2", "=", "osp", ".", "basename", "(", "subfolder_GT", ")", "\n", "subfolder_name", "=", "osp", ".", "join", "(", "sub1", ",", "sub2", ")", "\n", "", "else", ":", "\n", "                ", "subfolder_name", "=", "osp", ".", "basename", "(", "subfolder_GT", ")", "\n", "\n", "", "save_subfolder", "=", "osp", ".", "join", "(", "save_folder", ",", "subfolder_name", ")", "\n", "if", "not", "osp", ".", "exists", "(", "save_subfolder", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "save_subfolder", ")", "\n", "\n", "", "save_subfolder2", "=", "osp", ".", "join", "(", "save_folder2", ",", "subfolder_name", ")", "\n", "if", "not", "osp", ".", "exists", "(", "save_subfolder2", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "save_subfolder2", ")", "\n", "\n", "", "if", "scale", "==", "4", ":", "\n", "                ", "save_subfolder3", "=", "osp", ".", "join", "(", "save_folder3", ",", "subfolder_name", ")", "\n", "if", "not", "osp", ".", "exists", "(", "save_subfolder3", ")", ":", "\n", "                    ", "os", ".", "makedirs", "(", "save_subfolder3", ")", "\n", "\n", "", "", "img_GT_path_l", "=", "sorted", "(", "glob", ".", "glob", "(", "osp", ".", "join", "(", "subfolder_GT", ",", "'*'", ")", ")", ")", "\n", "seq_length", "=", "len", "(", "img_GT_path_l", ")", "\n", "\n", "imgs_GT", "=", "data_util", ".", "read_img_seq", "(", "subfolder_GT", ")", "# T C H W", "\n", "\n", "if", "degradation_mode", "==", "'preset'", ":", "\n", "                ", "for", "index", "in", "range", "(", "seq_length", ")", ":", "\n", "                    ", "save_subsubfolder", "=", "osp", ".", "join", "(", "save_subfolder", ",", "osp", ".", "splitext", "(", "osp", ".", "basename", "(", "img_GT_path_l", "[", "index", "]", ")", ")", "[", "0", "]", ")", "\n", "save_subsubfolder2", "=", "osp", ".", "join", "(", "save_subfolder2", ",", "osp", ".", "splitext", "(", "osp", ".", "basename", "(", "img_GT_path_l", "[", "index", "]", ")", ")", "[", "0", "]", ")", "\n", "if", "not", "osp", ".", "exists", "(", "save_subsubfolder", ")", ":", "\n", "                        ", "os", ".", "mkdir", "(", "save_subsubfolder", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "save_subsubfolder2", ")", ":", "\n", "                        ", "os", ".", "mkdir", "(", "save_subsubfolder2", ")", "\n", "", "if", "scale", "==", "4", "and", "not", "osp", ".", "exists", "(", "save_subsubfolder3", ")", ":", "\n", "                        ", "os", ".", "mkdir", "(", "save_subsubfolder3", ")", "\n", "\n", "", "kernel_gen", ".", "set_kernel_directly", "(", "kernel_preset", "[", "index", "]", ")", "\n", "imgs_HR", "=", "imgs_GT", "[", "data_util", ".", "index_generation", "(", "index", ",", "seq_length", ",", "N_frames", ",", "padding", ")", "]", "\n", "imgs_LR", "=", "kernel_gen", ".", "apply", "(", "imgs_HR", ")", "\n", "imgs_LR", "=", "imgs_LR", ".", "mul", "(", "255", ")", ".", "clamp", "(", "0", ",", "255", ")", ".", "round", "(", ")", ".", "div", "(", "255", ")", "\n", "imgs_LR_np", "=", "imgs_LR", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "imgs_LR_np", "=", "(", "imgs_LR_np", "*", "255", ")", ".", "astype", "(", "'uint8'", ")", "\n", "for", "i", ",", "img_LR", "in", "enumerate", "(", "imgs_LR_np", ")", ":", "\n", "                        ", "imageio", ".", "imwrite", "(", "osp", ".", "join", "(", "save_subsubfolder", ",", "'img{}.png'", ".", "format", "(", "i", ")", ")", ",", "img_LR", ")", "\n", "\n", "", "imgs_SuperLR", "=", "kernel_gen", ".", "apply", "(", "imgs_LR", ")", "\n", "imgs_SuperLR", "=", "imgs_SuperLR", ".", "mul", "(", "255", ")", ".", "clamp", "(", "0", ",", "255", ")", ".", "round", "(", ")", ".", "div", "(", "255", ")", "\n", "imgs_SuperLR_np", "=", "imgs_SuperLR", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "imgs_SuperLR_np", "=", "(", "imgs_SuperLR_np", "*", "255", ")", ".", "astype", "(", "'uint8'", ")", "\n", "for", "i", ",", "img_SuperLR", "in", "enumerate", "(", "imgs_SuperLR_np", ")", ":", "\n", "                        ", "imageio", ".", "imwrite", "(", "osp", ".", "join", "(", "save_subsubfolder2", ",", "'img{}.png'", ".", "format", "(", "i", ")", ")", ",", "img_SuperLR", ")", "\n", "\n", "", "if", "scale", "==", "4", ":", "\n", "                        ", "imgs_SuperLR", "=", "kernel_gen", ".", "apply", "(", "imgs_LR", ")", "\n", "imgs_SuperLR", "=", "imgs_SuperLR", ".", "mul", "(", "255", ")", ".", "clamp", "(", "0", ",", "255", ")", ".", "round", "(", ")", ".", "div", "(", "255", ")", "\n", "imgs_SuperLR", "=", "kernel_gen", ".", "apply", "(", "imgs_LR", ")", "\n", "imgs_SuperLR", "=", "imgs_SuperLR", ".", "mul", "(", "255", ")", ".", "clamp", "(", "0", ",", "255", ")", ".", "round", "(", ")", ".", "div", "(", "255", ")", "\n", "imgs_SuperLR_np", "=", "imgs_SuperLR", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "imgs_SuperLR_np", "=", "(", "imgs_SuperLR_np", "*", "255", ")", ".", "astype", "(", "'uint8'", ")", "\n", "for", "i", ",", "img_SuperLR", "in", "enumerate", "(", "imgs_SuperLR_np", ")", ":", "\n", "                            ", "imageio", ".", "imwrite", "(", "osp", ".", "join", "(", "save_subsubfolder3", ",", "'img{}.png'", ".", "format", "(", "i", ")", ")", ",", "img_SuperLR", ")", "\n", "\n", "", "", "", "", "else", ":", "\n", "                ", "count", "=", "0", "\n", "imgs_GT_l", "=", "imgs_GT", ".", "split", "(", "32", ")", "\n", "for", "img_batch", "in", "imgs_GT_l", ":", "\n", "                    ", "img_lr_batch", "=", "kernel_gen", ".", "apply", "(", "img_batch", ")", "\n", "img_lr_batch", "=", "img_lr_batch", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "img_lr_batch", "=", "(", "img_lr_batch", ".", "clip", "(", "0", ",", "1", ")", "*", "255", ")", ".", "round", "(", ")", "\n", "img_lr_batch", "=", "img_lr_batch", ".", "astype", "(", "'uint8'", ")", "\n", "count_temp", "=", "count", "\n", "for", "img_lr", "in", "img_lr_batch", ":", "\n", "                        ", "filename", "=", "osp", ".", "basename", "(", "img_GT_path_l", "[", "count", "]", ")", "\n", "imageio", ".", "imwrite", "(", "osp", ".", "join", "(", "save_subfolder", ",", "filename", ")", ",", "img_lr", ")", "\n", "count", "+=", "1", "\n", "\n", "", "img_lr_batch", "=", "img_lr_batch", ".", "astype", "(", "'float32'", ")", "/", "255", "\n", "img_lr_batch", "=", "torch", ".", "from_numpy", "(", "img_lr_batch", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n", "img_superlr_batch", "=", "kernel_gen", ".", "apply", "(", "img_lr_batch", ")", "\n", "img_superlr_batch", "=", "img_superlr_batch", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "img_superlr_batch", "=", "(", "img_superlr_batch", ".", "clip", "(", "0", ",", "1", ")", "*", "255", ")", ".", "round", "(", ")", "\n", "img_superlr_batch", "=", "img_superlr_batch", ".", "astype", "(", "'uint8'", ")", "\n", "count", "=", "count_temp", "\n", "for", "img_superlr", "in", "img_superlr_batch", ":", "\n", "                        ", "filename", "=", "osp", ".", "basename", "(", "img_GT_path_l", "[", "count", "]", ")", "\n", "imageio", ".", "imwrite", "(", "osp", ".", "join", "(", "save_subfolder2", ",", "filename", ")", ",", "img_superlr", ")", "\n", "count", "+=", "1", "\n", "", "if", "scale", "==", "4", ":", "\n", "                        ", "img_superlr_batch", "=", "img_superlr_batch", ".", "astype", "(", "'float32'", ")", "/", "255", "\n", "img_superlr_batch", "=", "torch", ".", "from_numpy", "(", "img_superlr_batch", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "img_superlr_batch", "=", "kernel_gen", ".", "apply", "(", "img_superlr_batch", ")", "\n", "img_superlr_batch", "=", "img_superlr_batch", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "img_superlr_batch", "=", "(", "img_superlr_batch", ".", "clip", "(", "0", ",", "1", ")", "*", "255", ")", ".", "round", "(", ")", "\n", "img_superlr_batch", "=", "img_superlr_batch", ".", "astype", "(", "'float32'", ")", "/", "255", "\n", "img_superlr_batch", "=", "torch", ".", "from_numpy", "(", "img_superlr_batch", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "img_superlr_batch", "=", "kernel_gen", ".", "apply", "(", "img_superlr_batch", ")", "\n", "img_superlr_batch", "=", "img_superlr_batch", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "img_superlr_batch", "=", "(", "img_superlr_batch", ".", "clip", "(", "0", ",", "1", ")", "*", "255", ")", ".", "round", "(", ")", "\n", "\n", "img_superlr_batch", "=", "img_superlr_batch", ".", "astype", "(", "'uint8'", ")", "\n", "count", "=", "count_temp", "\n", "for", "img_superlr", "in", "img_superlr_batch", ":", "\n", "                            ", "filename", "=", "osp", ".", "basename", "(", "img_GT_path_l", "[", "count", "]", ")", "\n", "imageio", ".", "imwrite", "(", "osp", ".", "join", "(", "save_subfolder2", ",", "filename", ")", ",", "img_superlr", ")", "\n", "count", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.codes.utility.dump_config": [[5, 14], ["datetime.datetime.now().strftime", "open", "f.write", "f.write", "vars().items", "f.write", "datetime.datetime.now", "os.path.join", "f.write", "vars"], "function", ["None"], ["def", "dump_config", "(", "cfg", ",", "name", ")", ":", "\n", "    ", "now", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y-%m-%d-%H:%M:%S\\n'", ")", "\n", "with", "open", "(", "path", ".", "join", "(", "name", ",", "'config.txt'", ")", ",", "'a'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "now", ")", "\n", "f", ".", "write", "(", "'python '", "+", "' '", ".", "join", "(", "sys", ".", "argv", ")", "+", "'\\n\\n'", ")", "\n", "for", "k", ",", "v", "in", "vars", "(", "cfg", ")", ".", "items", "(", ")", ":", "\n", "            ", "f", ".", "write", "(", "'{}: {}\\n'", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "\n", "", "f", ".", "write", "(", "'-'", "*", "80", "+", "'\\n\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.codes.utility.quantize": [[15, 28], ["x.byte.round", "x.byte.clamp", "x.byte.byte"], "function", ["None"], ["", "", "def", "quantize", "(", "x", ",", "uint8", "=", "True", ")", ":", "\n", "    ", "'''\n\n    '''", "\n", "x", "=", "(", "x", "+", "1", ")", "*", "127.5", "\n", "x", "=", "x", ".", "round", "(", ")", "\n", "x", "=", "x", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "255", ")", "\n", "if", "uint8", ":", "\n", "        ", "x", "=", "x", ".", "byte", "(", ")", "\n", "", "else", ":", "\n", "        ", "x", "=", "x", "/", "255", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.codes.utility.tensor2np": [[29, 43], ["utility.quantize", "x.cpu().numpy.permute", "x.cpu().numpy.cpu().numpy", "x.cpu().numpy.cpu"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.codes.utility.quantize"], ["", "def", "tensor2np", "(", "x", ",", "uint8", "=", "True", ")", ":", "\n", "    ", "'''\n    Convert the given Tensor to a numpy array.\n\n    Args:\n        x (torch.Tensor): In [-1, 1]\n\n    Return:\n        x (np.array, dtype=np.uint8): In [0, 255]\n    '''", "\n", "x", "=", "quantize", "(", "x", ",", "uint8", "=", "uint8", ")", "\n", "x", "=", "x", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "x", "=", "x", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.codes.utility.calc_psnr": [[44, 115], ["diff.view.pow().mean", "diff.view.mul().sum", "diff.view.view", "diff.view.view", "diff.pow().mean.log10", "diff.view.dim", "diff.view.new_ones", "idx.long.long", "diff.view.new_tensor", "diff.view.dim", "rgb2ycbcr.view.view", "diff.view.size", "diff.view.pow", "psnr.mean().item", "psnr.tolist", "psnr.item", "diff.view.dim", "diff.view.size", "diff.view.size", "diff.view.dim", "rgb2ycbcr.view.view", "diff.view.mul", "diff.view.dim", "rgb2ycbcr.view.view", "psnr.mean"], "function", ["None"], ["", "def", "calc_psnr", "(", "x", ",", "y", ",", "rgb", "=", "False", ",", "margin", "=", "0", ",", "force", "=", "1", ",", "temporal_ignore", "=", "None", ")", ":", "\n", "    ", "'''\n    Calculate the PSNR between x and y.\n\n    Note:\n        **This function requires x, y in [0, 1]**\n    '''", "\n", "# To set the dynamic range of x and y to 1.", "\n", "diff", "=", "(", "x", "-", "y", ")", "\n", "\n", "# Ignore some frames when evaulating a video.", "\n", "is_video", "=", "False", "\n", "if", "diff", ".", "dim", "(", ")", "==", "5", "or", "(", "diff", ".", "dim", "(", ")", "==", "4", "and", "diff", ".", "size", "(", "0", ")", ">", "1", ")", ":", "\n", "        ", "is_video", "=", "True", "\n", "if", "temporal_ignore", "is", "not", "None", ":", "\n", "            ", "idx", "=", "diff", ".", "new_ones", "(", "diff", ".", "size", "(", "1", ")", ")", "\n", "idx", "[", "temporal_ignore", "]", "=", "0", "\n", "idx", "=", "idx", ".", "long", "(", ")", "\n", "diff", "=", "diff", "[", "idx", "==", "1", "]", "\n", "\n", "# Boundary crop (always from center)", "\n", "", "", "if", "force", ">", "1", ":", "\n", "# Force cropped images to be n * [force]", "\n", "# Ex) force=8: 44 x 44 -> 40 x 40", "\n", "        ", "rem_h", "=", "diff", ".", "shape", "[", "-", "2", "]", "%", "force", "\n", "rem_w", "=", "diff", ".", "shape", "[", "-", "1", "]", "%", "force", "\n", "margin_top", "=", "rem_h", "//", "2", "\n", "margin_bottom", "=", "rem_h", "-", "margin_top", "\n", "margin_left", "=", "rem_w", "//", "2", "\n", "margin_right", "=", "rem_w", "-", "margin_left", "\n", "if", "margin_bottom", ">", "0", ":", "\n", "            ", "diff", "=", "diff", "[", "...", ",", "margin_top", ":", "-", "margin_bottom", ",", ":", "]", "\n", "", "if", "margin_right", ">", "0", ":", "\n", "            ", "diff", "=", "diff", "[", "...", ",", "margin_left", ":", "-", "margin_right", "]", "\n", "", "", "elif", "margin", ">", "0", ":", "\n", "# Cropping fixed amount", "\n", "        ", "diff", "=", "diff", "[", "...", ",", "margin", ":", "-", "margin", ",", "margin", ":", "-", "margin", "]", "\n", "\n", "", "if", "not", "rgb", ":", "\n", "        ", "rgb2ycbcr", "=", "diff", ".", "new_tensor", "(", "[", "65.738", ",", "129.057", ",", "25.064", "]", ")", "/", "256", "\n", "if", "diff", ".", "dim", "(", ")", "==", "3", ":", "\n", "# An image (C x H x W)", "\n", "            ", "rgb2ycbcr", "=", "rgb2ycbcr", ".", "view", "(", "3", ",", "1", ",", "1", ")", "\n", "idx_c", "=", "0", "\n", "", "elif", "diff", ".", "dim", "(", ")", "==", "4", ":", "\n", "# An image with a batch dimension (B x C x H x W)", "\n", "# or a video (T x C x H x W)", "\n", "            ", "rgb2ycbcr", "=", "rgb2ycbcr", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "idx_c", "=", "1", "\n", "", "elif", "diff", ".", "dim", "(", ")", "==", "5", ":", "\n", "# A video with a batch dimension (T x B x C x H x W)", "\n", "            ", "rgb2ycbcr", "=", "rgb2ycbcr", ".", "view", "(", "1", ",", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "idx_c", "=", "2", "\n", "\n", "", "diff", "=", "diff", ".", "mul", "(", "rgb2ycbcr", ")", ".", "sum", "(", "dim", "=", "idx_c", ")", "\n", "\n", "", "if", "is_video", ":", "\n", "# PSNR of each image is averaged", "\n", "        ", "diff", "=", "diff", ".", "view", "(", "diff", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "diff", "=", "diff", ".", "view", "(", "-", "1", ")", "\n", "\n", "# diff = diff.view(-1)", "\n", "\n", "", "mse", "=", "diff", ".", "pow", "(", "2", ")", ".", "mean", "(", "dim", "=", "-", "1", ")", "\n", "psnr", "=", "-", "10", "*", "mse", ".", "log10", "(", ")", "\n", "\n", "if", "is_video", ":", "\n", "        ", "return", "psnr", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "psnr", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "psnr", ".", "item", "(", ")", ",", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.codes.test_Vid4_REDS4_with_GT_TOF.main": [[20, 321], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "models.TOFlow", "torch.device", "utils.mkdirs", "utils.setup_logger", "logging.getLogger", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "sorted", "sorted", "model.to.load_state_dict", "print", "model.to.eval", "model.to.to", "zip", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "cv2.imread", "sorted", "numpy.stack", "torch.from_numpy().float", "range", "glob.glob", "glob.glob", "torch.load", "sub_folder_name_l.append", "os.join", "sorted", "len", "test_Vid4_REDS4_with_GT_TOF.main.read_seq_imgs"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.mkdirs", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.setup_logger", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.load"], ["def", "main", "(", ")", ":", "\n", "#################", "\n", "# configurations", "\n", "#################", "\n", "    ", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "'0'", "\n", "data_mode", "=", "'Vid4'", "# Vid4 | sharp_bicubic (REDS)", "\n", "\n", "prog", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "prog", ".", "add_argument", "(", "'--train_mode'", ",", "'-t'", ",", "type", "=", "str", ",", "default", "=", "'Vimeo'", ",", "help", "=", "'train mode'", ")", "\n", "prog", ".", "add_argument", "(", "'--data_mode'", ",", "'-m'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'data_mode'", ")", "\n", "prog", ".", "add_argument", "(", "'--degradation_mode'", ",", "'-d'", ",", "type", "=", "str", ",", "default", "=", "'impulse'", ",", "choices", "=", "(", "'impulse'", ",", "'bicubic'", ",", "'preset'", ")", ",", "help", "=", "'path to image output directory.'", ")", "\n", "prog", ".", "add_argument", "(", "'--sigma_x'", ",", "'-sx'", ",", "type", "=", "float", ",", "default", "=", "1", ",", "help", "=", "'sigma_x'", ")", "\n", "prog", ".", "add_argument", "(", "'--sigma_y'", ",", "'-sy'", ",", "type", "=", "float", ",", "default", "=", "0", ",", "help", "=", "'sigma_y'", ")", "\n", "prog", ".", "add_argument", "(", "'--theta'", ",", "'-th'", ",", "type", "=", "float", ",", "default", "=", "0", ",", "help", "=", "'theta'", ")", "\n", "\n", "args", "=", "prog", ".", "parse_args", "(", ")", "\n", "\n", "train_mode", "=", "args", ".", "train_mode", "\n", "data_mode", "=", "args", ".", "data_mode", "\n", "if", "data_mode", "is", "None", ":", "\n", "        ", "if", "train_mode", "==", "'Vimeo'", ":", "\n", "            ", "data_mode", "=", "'Vid4'", "\n", "", "elif", "train_mode", "==", "'REDS'", ":", "\n", "            ", "data_mode", "=", "'REDS'", "\n", "", "", "degradation_mode", "=", "args", ".", "degradation_mode", "# impulse | bicubic | preset", "\n", "sig_x", ",", "sig_y", ",", "the", "=", "args", ".", "sigma_x", ",", "args", ".", "sigma_y", ",", "args", ".", "theta", "\n", "if", "sig_y", "==", "0", ":", "\n", "        ", "sig_y", "=", "sig_x", "\n", "\n", "# model", "\n", "", "scale", "=", "2", "\n", "N_in", "=", "7", "\n", "# model_path = '../experiments/pretrained_models/TOF_official.pth'", "\n", "# model_path = '../experiments/Pretrain_FT_TOF_V_S2/models/latest_G.pth'", "\n", "model_path", "=", "'../experiments/pretrained_models/TOF_{}_S2.pth'", ".", "format", "(", "train_mode", ")", "\n", "adapt_official", "=", "True", "# if 'official' in model_path else False", "\n", "model", "=", "TOF_arch", ".", "TOFlow", "(", "adapt_official", "=", "adapt_official", ")", "\n", "\n", "#### dataset", "\n", "folder_subname", "=", "'preset'", "if", "degradation_mode", "==", "'preset'", "else", "degradation_mode", "+", "'_'", "+", "str", "(", "\n", "'{:.1f}'", ".", "format", "(", "sig_x", ")", ")", "+", "'_'", "+", "str", "(", "'{:.1f}'", ".", "format", "(", "sig_y", ")", ")", "+", "'_'", "+", "str", "(", "'{:.1f}'", ".", "format", "(", "the", ")", ")", "\n", "\n", "# folder_subname = degradation_mode + '_' + str('{:.1f}'.format(sig_x)) + '_' + str('{:.1f}'.format(sig_y)) + '_' + str('{:.1f}'.format(the))", "\n", "if", "data_mode", "==", "'Vid4'", ":", "\n", "# test_dataset_folder = '../dataset/Vid4/LR_bicubic/X{}'.format(scale)", "\n", "        ", "test_dataset_folder", "=", "'../dataset/Vid4/LR_{}/X{}'", ".", "format", "(", "folder_subname", ",", "scale", ")", "\n", "GT_dataset_folder", "=", "'../dataset/Vid4/HR'", "\n", "", "elif", "data_mode", "==", "'MM522'", ":", "\n", "        ", "test_dataset_folder", "=", "'../dataset/MM522val/LR_bicubic/X{}'", ".", "format", "(", "scale", ")", "\n", "GT_dataset_folder", "=", "'../dataset/MM522val/HR'", "\n", "", "else", ":", "\n", "# test_dataset_folder = '../dataset/REDS4/LR_bicubic/X{}'.format(scale)", "\n", "        ", "test_dataset_folder", "=", "'../dataset/REDS/train/LR_{}/X{}'", ".", "format", "(", "folder_subname", ",", "scale", ")", "\n", "GT_dataset_folder", "=", "'../dataset/REDS/train/HR'", "\n", "\n", "", "'''\n    #### dataset\n    if data_mode == 'Vid4':\n        test_dataset_folder = '../dataset/Vid4/LR_bicubic/X{}'.format(scale)\n        GT_dataset_folder = '../dataset/Vid4/HR'\n    elif data_mode == 'MM522':\n        test_dataset_folder = '../dataset/MM522val/LR_bicubic/X{}'.format(scale)\n        GT_dataset_folder = '../dataset/MM522val/HR'\n    else:\n        test_dataset_folder = '../dataset/REDS4/LR_bicubic/X{}'.format(scale)\n        GT_dataset_folder = '../dataset/REDS4/HR'\n    '''", "\n", "#### evaluation", "\n", "crop_border", "=", "0", "\n", "border_frame", "=", "N_in", "//", "2", "# border frames when evaluate", "\n", "# temporal padding mode", "\n", "padding", "=", "'new_info'", "# different from the official setting", "\n", "save_imgs", "=", "False", "#True", "\n", "############################################################################", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "save_folder", "=", "'../results/{}'", ".", "format", "(", "data_mode", ")", "\n", "util", ".", "mkdirs", "(", "save_folder", ")", "\n", "util", ".", "setup_logger", "(", "'base'", ",", "save_folder", ",", "'test'", ",", "level", "=", "logging", ".", "INFO", ",", "screen", "=", "True", ",", "tofile", "=", "True", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'base'", ")", "\n", "\n", "#### log info", "\n", "logger", ".", "info", "(", "'Data: {} - {}'", ".", "format", "(", "data_mode", ",", "test_dataset_folder", ")", ")", "\n", "logger", ".", "info", "(", "'Padding mode: {}'", ".", "format", "(", "padding", ")", ")", "\n", "logger", ".", "info", "(", "'Model path: {}'", ".", "format", "(", "model_path", ")", ")", "\n", "logger", ".", "info", "(", "'Save images: {}'", ".", "format", "(", "save_imgs", ")", ")", "\n", "\n", "def", "read_image", "(", "img_path", ")", ":", "\n", "        ", "'''read one image from img_path\n        Return img: HWC, BGR, [0,1], numpy\n        '''", "\n", "img_GT", "=", "cv2", ".", "imread", "(", "img_path", ")", "\n", "img", "=", "img_GT", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.", "\n", "return", "img", "\n", "\n", "", "def", "read_seq_imgs", "(", "img_seq_path", ")", ":", "\n", "        ", "'''read a sequence of images'''", "\n", "img_path_l", "=", "sorted", "(", "glob", ".", "glob", "(", "img_seq_path", "+", "'/*'", ")", ")", "\n", "img_l", "=", "[", "read_image", "(", "v", ")", "for", "v", "in", "img_path_l", "]", "\n", "# stack to TCHW, RGB, [0,1], torch", "\n", "imgs", "=", "np", ".", "stack", "(", "img_l", ",", "axis", "=", "0", ")", "\n", "imgs", "=", "imgs", "[", ":", ",", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "imgs", "=", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "np", ".", "transpose", "(", "imgs", ",", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", ")", ")", ".", "float", "(", ")", "\n", "return", "imgs", "\n", "\n", "", "def", "index_generation", "(", "crt_i", ",", "max_n", ",", "N", ",", "padding", "=", "'reflection'", ")", ":", "\n", "        ", "'''\n        padding: replicate | reflection | new_info | circle\n        '''", "\n", "max_n", "=", "max_n", "-", "1", "\n", "n_pad", "=", "N", "//", "2", "\n", "return_l", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "crt_i", "-", "n_pad", ",", "crt_i", "+", "n_pad", "+", "1", ")", ":", "\n", "            ", "if", "i", "<", "0", ":", "\n", "                ", "if", "padding", "==", "'replicate'", ":", "\n", "                    ", "add_idx", "=", "0", "\n", "", "elif", "padding", "==", "'reflection'", ":", "\n", "                    ", "add_idx", "=", "-", "i", "\n", "", "elif", "padding", "==", "'new_info'", ":", "\n", "                    ", "add_idx", "=", "(", "crt_i", "+", "n_pad", ")", "+", "(", "-", "i", ")", "\n", "", "elif", "padding", "==", "'circle'", ":", "\n", "                    ", "add_idx", "=", "N", "+", "i", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "'Wrong padding mode'", ")", "\n", "", "", "elif", "i", ">", "max_n", ":", "\n", "                ", "if", "padding", "==", "'replicate'", ":", "\n", "                    ", "add_idx", "=", "max_n", "\n", "", "elif", "padding", "==", "'reflection'", ":", "\n", "                    ", "add_idx", "=", "max_n", "*", "2", "-", "i", "\n", "", "elif", "padding", "==", "'new_info'", ":", "\n", "                    ", "add_idx", "=", "(", "crt_i", "-", "n_pad", ")", "-", "(", "i", "-", "max_n", ")", "\n", "", "elif", "padding", "==", "'circle'", ":", "\n", "                    ", "add_idx", "=", "i", "-", "N", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "'Wrong padding mode'", ")", "\n", "", "", "else", ":", "\n", "                ", "add_idx", "=", "i", "\n", "", "return_l", ".", "append", "(", "add_idx", ")", "\n", "", "return", "return_l", "\n", "\n", "", "def", "single_forward", "(", "model", ",", "imgs_in", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "model_output", "=", "model", "(", "imgs_in", ")", "\n", "if", "isinstance", "(", "model_output", ",", "list", ")", "or", "isinstance", "(", "model_output", ",", "tuple", ")", ":", "\n", "                ", "output", "=", "model_output", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "output", "=", "model_output", "\n", "", "", "return", "output", "\n", "\n", "", "sub_folder_l", "=", "sorted", "(", "glob", ".", "glob", "(", "test_dataset_folder", "+", "'/*'", ")", ")", "\n", "sub_folder_GT_l", "=", "sorted", "(", "glob", ".", "glob", "(", "GT_dataset_folder", "+", "'/*'", ")", ")", "\n", "if", "data_mode", "==", "'REDS'", ":", "\n", "        ", "sub_folder_GT_l", "=", "[", "k", "for", "k", "in", "sub_folder_GT_l", "if", "\n", "k", ".", "find", "(", "'000'", ")", ">=", "0", "or", "k", ".", "find", "(", "'011'", ")", ">=", "0", "or", "k", ".", "find", "(", "'015'", ")", ">=", "0", "or", "k", ".", "find", "(", "'020'", ")", ">=", "0", "]", "\n", "#### set up the models", "\n", "", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ",", "strict", "=", "True", ")", "\n", "print", "(", "'Eval'", ")", "\n", "model", ".", "eval", "(", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "avg_psnr_l", ",", "avg_psnr_center_l", ",", "avg_psnr_border_l", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "avg_ssim_l", ",", "avg_ssim_center_l", ",", "avg_ssim_border_l", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "sub_folder_name_l", "=", "[", "]", "\n", "\n", "# for each sub-folder", "\n", "for", "sub_folder", ",", "sub_folder_GT", "in", "zip", "(", "sub_folder_l", ",", "sub_folder_GT_l", ")", ":", "\n", "        ", "sub_folder_name", "=", "sub_folder", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "sub_folder_name_l", ".", "append", "(", "sub_folder_name", ")", "\n", "save_sub_folder", "=", "osp", ".", "join", "(", "save_folder", ",", "sub_folder_name", ")", "\n", "\n", "img_path_l", "=", "sorted", "(", "glob", ".", "glob", "(", "sub_folder", "+", "'/*'", ")", ")", "\n", "max_idx", "=", "len", "(", "img_path_l", ")", "\n", "if", "save_imgs", ":", "\n", "            ", "util", ".", "mkdirs", "(", "save_sub_folder", ")", "\n", "\n", "#### read LR images", "\n", "", "imgs", "=", "read_seq_imgs", "(", "sub_folder", ")", "\n", "\n", "#### read GT images", "\n", "img_GT_l", "=", "[", "]", "\n", "'''\n        if data_mode == 'Vid4':\n            sub_folder_GT = osp.join(sub_folder.replace('/BIx4up_direct/', '/GT/'), '*')\n        else:\n            sub_folder_GT = osp.join(sub_folder.replace('/{}/'.format(data_mode), '/GT/'), '*')\n        '''", "\n", "for", "img_GT_path", "in", "sorted", "(", "glob", ".", "glob", "(", "sub_folder_GT", "+", "'/*'", ")", ")", ":", "\n", "            ", "img_GT_l", ".", "append", "(", "read_image", "(", "img_GT_path", ")", ")", "\n", "\n", "", "avg_psnr", ",", "avg_psnr_border", ",", "avg_psnr_center", "=", "0", ",", "0", ",", "0", "\n", "avg_ssim", ",", "avg_ssim_border", ",", "avg_ssim_center", "=", "0", ",", "0", ",", "0", "\n", "cal_n_border", ",", "cal_n_center", "=", "0", ",", "0", "\n", "\n", "# process each image", "\n", "for", "img_idx", ",", "img_path", "in", "enumerate", "(", "img_path_l", ")", ":", "\n", "            ", "c_idx", "=", "int", "(", "osp", ".", "splitext", "(", "osp", ".", "basename", "(", "img_path", ")", ")", "[", "0", "]", ")", "\n", "select_idx", "=", "index_generation", "(", "c_idx", ",", "max_idx", ",", "N_in", ",", "padding", "=", "padding", ")", "\n", "# get input images", "\n", "imgs_in", "=", "imgs", ".", "index_select", "(", "0", ",", "torch", ".", "LongTensor", "(", "select_idx", ")", ")", ".", "to", "(", "device", ")", "\n", "# In TOFLOW we have to upscale the image to HR scale", "\n", "imgs_in", "=", "F", ".", "interpolate", "(", "imgs_in", ",", "scale_factor", "=", "scale", ",", "mode", "=", "'bicubic'", ",", "align_corners", "=", "False", ")", "\n", "#imgs_in = F.interpolate(imgs_in, scale_factor=scale, mode='nearest')", "\n", "imgs_in", ".", "unsqueeze_", "(", "0", ")", "\n", "output", "=", "single_forward", "(", "model", ",", "imgs_in", ")", "\n", "output_f", "=", "output", ".", "data", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "squeeze", "(", "0", ")", "\n", "\n", "output", "=", "util", ".", "tensor2img", "(", "output_f", ")", "\n", "\n", "# save imgs", "\n", "if", "save_imgs", ":", "\n", "                ", "cv2", ".", "imwrite", "(", "osp", ".", "join", "(", "save_sub_folder", ",", "'{:08d}.png'", ".", "format", "(", "c_idx", ")", ")", ",", "output", ")", "\n", "\n", "#### calculate PSNR", "\n", "", "output", "=", "output", "/", "255.", "\n", "GT", "=", "np", ".", "copy", "(", "img_GT_l", "[", "img_idx", "]", ")", "\n", "\n", "# For REDS, evaluate on RGB channels; for Vid4, evaluate on Y channels", "\n", "'''\n            if data_mode == 'Vid4':  # bgr2y, [0, 1]\n                GT = data_util.bgr2ycbcr(GT)\n                output = data_util.bgr2ycbcr(output)\n            if crop_border == 0:\n                cropped_output = output\n                cropped_GT = GT\n            else:\n                cropped_output = output[crop_border:-crop_border, crop_border:-crop_border]\n                cropped_GT = GT[crop_border:-crop_border, crop_border:-crop_border]\n            '''", "\n", "output", "=", "(", "output", "*", "255", ")", ".", "round", "(", ")", ".", "astype", "(", "'uint8'", ")", "\n", "GT", "=", "(", "GT", "*", "255", ")", ".", "round", "(", ")", ".", "astype", "(", "'uint8'", ")", "\n", "crt_psnr", "=", "util", ".", "calculate_psnr", "(", "output", ",", "GT", ")", "\n", "crt_ssim", "=", "0.001", "#util.calculate_ssim(output, GT)", "\n", "#crt_ssim = 0.05", "\n", "\n", "# logger.info('{:3d} - {:25}.png \\tPSNR: {:.6f} dB'.format(img_idx + 1, c_idx, crt_psnr))", "\n", "\n", "if", "img_idx", ">=", "border_frame", "and", "img_idx", "<", "max_idx", "-", "border_frame", ":", "# center frames", "\n", "                ", "avg_psnr_center", "+=", "crt_psnr", "\n", "avg_ssim_center", "+=", "crt_ssim", "\n", "cal_n_center", "+=", "1", "\n", "", "else", ":", "# border frames", "\n", "                ", "avg_psnr_border", "+=", "crt_psnr", "\n", "avg_ssim_border", "+=", "crt_ssim", "\n", "cal_n_border", "+=", "1", "\n", "\n", "", "", "avg_psnr", "=", "(", "avg_psnr_center", "+", "avg_psnr_border", ")", "/", "(", "cal_n_center", "+", "cal_n_border", ")", "\n", "avg_psnr_center", "=", "avg_psnr_center", "/", "cal_n_center", "\n", "if", "cal_n_border", "==", "0", ":", "\n", "            ", "avg_psnr_border", "=", "0", "\n", "", "else", ":", "\n", "            ", "avg_psnr_border", "=", "avg_psnr_border", "/", "cal_n_border", "\n", "\n", "", "logger", ".", "info", "(", "'Folder {} - Average PSNR: {:.6f} dB for {} frames; '", "\n", "'Center PSNR: {:.6f} dB for {} frames; '", "\n", "'Border PSNR: {:.6f} dB for {} frames.'", ".", "format", "(", "sub_folder_name", ",", "avg_psnr", ",", "\n", "(", "cal_n_center", "+", "cal_n_border", ")", ",", "\n", "avg_psnr_center", ",", "cal_n_center", ",", "\n", "avg_psnr_border", ",", "cal_n_border", ")", ")", "\n", "\n", "avg_psnr_l", ".", "append", "(", "avg_psnr", ")", "\n", "avg_psnr_center_l", ".", "append", "(", "avg_psnr_center", ")", "\n", "avg_psnr_border_l", ".", "append", "(", "avg_psnr_border", ")", "\n", "\n", "avg_ssim", "=", "(", "avg_ssim_center", "+", "avg_ssim_border", ")", "/", "(", "cal_n_center", "+", "cal_n_border", ")", "\n", "avg_ssim_center", "=", "avg_ssim_center", "/", "cal_n_center", "\n", "avg_ssim_border", "=", "0", "if", "cal_n_border", "==", "0", "else", "avg_ssim_border", "/", "cal_n_border", "\n", "avg_ssim_l", ".", "append", "(", "avg_ssim", ")", "\n", "avg_ssim_center_l", ".", "append", "(", "avg_ssim_center", ")", "\n", "avg_ssim_border_l", ".", "append", "(", "avg_ssim_border", ")", "\n", "\n", "logger", ".", "info", "(", "'Folder {} - Average SSIM: {:.6f} for {} frames; '", "\n", "'Center SSIM: {:.6f} for {} frames; '", "\n", "'Border SSIM: {:.6f} for {} frames.'", ".", "format", "(", "sub_folder_name", ",", "avg_ssim", ",", "\n", "(", "cal_n_center", "+", "cal_n_border", ")", ",", "\n", "avg_ssim_center", ",", "cal_n_center", ",", "\n", "avg_ssim_border", ",", "cal_n_border", ")", ")", "\n", "", "'''\n    logger.info('################ Tidy Outputs ################')\n    for name, psnr, psnr_center, psnr_border in zip(sub_folder_name_l, avg_psnr_l,\n                                                    avg_psnr_center_l, avg_psnr_border_l):\n        logger.info('Folder {} - Average PSNR: {:.6f} dB. '\n                    'Center PSNR: {:.6f} dB. '\n                    'Border PSNR: {:.6f} dB.'.format(name, psnr, psnr_center, psnr_border))\n    '''", "\n", "\n", "logger", ".", "info", "(", "'################ Final Results ################'", ")", "\n", "logger", ".", "info", "(", "'Data: {} - {}'", ".", "format", "(", "data_mode", ",", "test_dataset_folder", ")", ")", "\n", "logger", ".", "info", "(", "'Padding mode: {}'", ".", "format", "(", "padding", ")", ")", "\n", "logger", ".", "info", "(", "'Model path: {}'", ".", "format", "(", "model_path", ")", ")", "\n", "logger", ".", "info", "(", "'Save images: {}'", ".", "format", "(", "save_imgs", ")", ")", "\n", "logger", ".", "info", "(", "'Total Average PSNR: {:.6f} dB for {} clips. '", "\n", "'Center PSNR: {:.6f} dB. Border PSNR: {:.6f} dB.'", ".", "format", "(", "\n", "sum", "(", "avg_psnr_l", ")", "/", "len", "(", "avg_psnr_l", ")", ",", "len", "(", "sub_folder_l", ")", ",", "\n", "sum", "(", "avg_psnr_center_l", ")", "/", "len", "(", "avg_psnr_center_l", ")", ",", "\n", "sum", "(", "avg_psnr_border_l", ")", "/", "len", "(", "avg_psnr_border_l", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Total Average SSIM: {:.6f} for {} clips. '", "\n", "'Center SSIM: {:.6f}. Border PSNR: {:.6f}.'", ".", "format", "(", "\n", "sum", "(", "avg_ssim_l", ")", "/", "len", "(", "avg_ssim_l", ")", ",", "len", "(", "sub_folder_l", ")", ",", "\n", "sum", "(", "avg_ssim_center_l", ")", "/", "len", "(", "avg_ssim_center_l", ")", ",", "\n", "sum", "(", "avg_ssim_border_l", ")", "/", "len", "(", "avg_ssim_border_l", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.codes.train_mfdn.init_dist": [[20, 28], ["int", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.init_process_group", "torch.get_start_method", "torch.set_start_method"], "function", ["None"], ["def", "init_dist", "(", "backend", "=", "'nccl'", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"initialization for distributed training\"\"\"", "\n", "if", "mp", ".", "get_start_method", "(", "allow_none", "=", "True", ")", "!=", "'spawn'", ":", "\n", "        ", "mp", ".", "set_start_method", "(", "'spawn'", ")", "\n", "", "rank", "=", "int", "(", "os", ".", "environ", "[", "'RANK'", "]", ")", "\n", "num_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "rank", "%", "num_gpus", ")", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "backend", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.codes.train_mfdn.main": [[30, 463], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "opt[].get", "options.dict_to_nonedict", "utils.util.set_random_seed", "opt[].items", "models.create_model", "logging.getLogger.info", "range", "options.parse", "options.parse", "print", "train_mfdn.init_dist", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.load", "torch.load", "torch.load", "options.check_resume", "utils.util.setup_logger", "logging.getLogger", "logging.getLogger.info", "utils.util.setup_logger", "logging.getLogger", "random.randint", "logging.getLogger.info", "logging.getLogger.info", "models.create_model.resume_training", "enumerate", "logging.getLogger.info", "models.create_model.save", "logging.getLogger.info", "SummaryWriter.close", "utils.util.mkdir_and_rename", "utils.util.mkdirs", "options.dict2str", "float", "SummaryWriter", "data.meta_learner.loader.get_dataset", "int", "int", "int", "data.meta_learner.create_dataloader", "data.data_sampler.DistIterSampler.set_epoch", "models.create_model.feed_data", "models.create_model.optimize_parameters", "models.create_model.update_learning_rate", "logging.getLogger.info", "math.ceil", "math.ceil", "data.data_sampler.DistIterSampler", "int", "logging.getLogger.info", "logging.getLogger.info", "NotImplementedError", "models.create_model.get_current_log", "models.create_model.get_current_learning_rate", "model.get_current_log.items", "opt[].get", "storage.cuda", "math.ceil", "[].split", "range", "data.meta_learner.create_dataset", "data.meta_learner.create_dataloader", "logging.getLogger.info", "logging.getLogger.info", "utils.util.ProgressBar", "logging.getLogger.info", "logging.getLogger.info", "models.create_model.save", "models.create_model.save_training_state", "opt[].items", "len", "len", "len", "data.meta_learner.create_dataset.append", "data.meta_learner.create_dataloader.append", "len", "os.path.join", "utils.util.mkdir", "models.create_model.feed_data", "models.create_model.test", "models.create_model.get_current_visuals", "utils.util.tensor2img", "utils.util.tensor2img", "os.path.join", "utils.util.save_img", "utils.util.crop_border", "utils.util.calculate_psnr", "util.ProgressBar.update", "SummaryWriter.add_scalar", "isinstance", "utils.util.ProgressBar", "psnr_rlt.items", "len", "psnr_rlt_avg.items", "logging.getLogger.info", "data.meta_learner.create_dataset", "data.meta_learner.create_dataloader", "len", "SummaryWriter.add_scalar", "os.path.splitext", "zip", "range", "psnr_rlt.items", "torch.barrier", "len", "val_data[].size", "range", "util.ProgressBar.update", "SummaryWriter.add_scalar", "psnr_rlt_avg.items", "os.path.basename", "range", "psnr_rlt.items", "torch.barrier", "utils.util.ProgressBar", "len", "val_data[].unsqueeze_", "val_data[].unsqueeze_", "val_data[].split", "models.create_model.feed_data", "models.create_model.test", "models.create_model.get_current_visuals", "utils.util.tensor2img", "utils.util.tensor2img", "imageio.imwrite", "imageio.imwrite", "utils.util.calculate_psnr", "torch.reduce", "psnr_rlt.items", "len", "psnr_rlt_avg.items", "logging.getLogger.info", "psnr_rlt.get", "data.util.index_generation", "models.create_model.feed_data", "models.create_model.test", "models.create_model.get_current_visuals", "utils.util.tensor2img", "utils.util.tensor2img", "utility.calc_psnr", "sum", "len", "SummaryWriter.add_scalar", "os.path.exists", "os.makedirs", "utils.util.ProgressBar", "len", "val_data[].unsqueeze_", "val_data[].unsqueeze_", "val_data[].split", "models.create_model.feed_data", "models.create_model.test", "models.create_model.get_current_visuals", "utils.util.tensor2img", "utils.util.tensor2img", "utils.util.tensor2img", "os.path.join", "imageio.imwrite", "imageio.imwrite", "imageio.imwrite", "utils.util.calculate_psnr", "torch.reduce", "psnr_rlt.items", "len", "psnr_rlt_avg.items", "logging.getLogger.info", "len", "int", "int", "psnr_rlt.get", "torch.zeros", "torch.zeros", "torch.zeros", "os.path.exists", "os.makedirs", "os.path.join", "os.path.join", "range", "torch.mean().cpu().item", "torch.mean().cpu().item", "torch.mean().cpu().item", "SummaryWriter.add_scalar", "psnr_rlt_avg.items", "os.path.join", "os.path.join", "len", "int", "int", "psnr_rlt.get", "torch.zeros", "torch.zeros", "torch.zeros", "os.path.exists", "os.makedirs", "os.path.join", "os.path.join", "os.path.join", "range", "torch.mean().cpu().item", "torch.mean().cpu().item", "torch.mean().cpu().item", "SummaryWriter.add_scalar", "psnr_rlt_avg.items", "os.path.join", "os.path.join", "util.ProgressBar.update", "SummaryWriter.add_scalar", "util.ProgressBar.update", "SummaryWriter.add_scalar", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "[].item", "[].item", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.options.options.dict_to_nonedict", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.set_random_seed", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.__init__.create_model", "home.repos.pwc.inspect_result.esw0116_DynaVSR.options.options.parse", "home.repos.pwc.inspect_result.esw0116_DynaVSR.options.options.parse", "home.repos.pwc.inspect_result.esw0116_DynaVSR.codes.test_dynavsr.init_dist", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.load", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.load", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.load", "home.repos.pwc.inspect_result.esw0116_DynaVSR.options.options.check_resume", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.setup_logger", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.setup_logger", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.resume_training", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.mkdir_and_rename", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.mkdirs", "home.repos.pwc.inspect_result.esw0116_DynaVSR.options.options.dict2str", "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.loader.get_dataset", "home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.__init__.create_dataloader", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.data_sampler.DistIterSampler.set_epoch", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.feed_data", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.optimize_parameters", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.update_learning_rate", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.SRGAN_model.SRGANModel.get_current_log", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.get_current_learning_rate", "home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.__init__.create_dataset", "home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.__init__.create_dataloader", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.save_training_state", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.mkdir", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.feed_data", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.SRGAN_model.SRGANModel.test", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.get_current_visuals", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.tensor2img", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.tensor2img", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.save_img", "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.crop_border", "home.repos.pwc.inspect_result.esw0116_DynaVSR.metrics.calculate_PSNR_SSIM.calculate_psnr", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.ProgressBar.update", "home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.__init__.create_dataset", "home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.__init__.create_dataloader", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.ProgressBar.update", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.feed_data", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.SRGAN_model.SRGANModel.test", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.get_current_visuals", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.tensor2img", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.tensor2img", "home.repos.pwc.inspect_result.esw0116_DynaVSR.metrics.calculate_PSNR_SSIM.calculate_psnr", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.index_generation", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.feed_data", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.SRGAN_model.SRGANModel.test", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.get_current_visuals", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.tensor2img", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.tensor2img", "home.repos.pwc.inspect_result.esw0116_DynaVSR.codes.utility.calc_psnr", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.feed_data", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.SRGAN_model.SRGANModel.test", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.get_current_visuals", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.tensor2img", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.tensor2img", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.tensor2img", "home.repos.pwc.inspect_result.esw0116_DynaVSR.metrics.calculate_PSNR_SSIM.calculate_psnr", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.ProgressBar.update", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.ProgressBar.update"], ["", "def", "main", "(", ")", ":", "\n", "#### options", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-opt'", ",", "type", "=", "str", ",", "help", "=", "'Path to option YAML file.'", ")", "\n", "parser", ".", "add_argument", "(", "'--launcher'", ",", "choices", "=", "[", "'none'", ",", "'pytorch'", "]", ",", "default", "=", "'none'", ",", "\n", "help", "=", "'job launcher'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--exp_name'", ",", "type", "=", "str", ",", "default", "=", "'temp'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "args", ".", "exp_name", "==", "'temp'", ":", "\n", "        ", "opt", "=", "option", ".", "parse", "(", "args", ".", "opt", ",", "is_train", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "opt", "=", "option", ".", "parse", "(", "args", ".", "opt", ",", "is_train", "=", "True", ",", "exp_name", "=", "args", ".", "exp_name", ")", "\n", "\n", "#### distributed training settings", "\n", "", "if", "args", ".", "launcher", "==", "'none'", ":", "# disabled distributed training", "\n", "        ", "opt", "[", "'dist'", "]", "=", "False", "\n", "rank", "=", "-", "1", "\n", "print", "(", "'Disabled distributed training.'", ")", "\n", "", "else", ":", "\n", "        ", "opt", "[", "'dist'", "]", "=", "True", "\n", "init_dist", "(", ")", "\n", "world_size", "=", "torch", ".", "distributed", ".", "get_world_size", "(", ")", "\n", "rank", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "\n", "#### loading resume state if exists", "\n", "", "if", "opt", "[", "'path'", "]", ".", "get", "(", "'resume_state'", ",", "None", ")", ":", "\n", "# distributed resuming: all load into default GPU", "\n", "        ", "device_id", "=", "torch", ".", "cuda", ".", "current_device", "(", ")", "\n", "resume_state", "=", "torch", ".", "load", "(", "opt", "[", "'path'", "]", "[", "'resume_state'", "]", ",", "\n", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ".", "cuda", "(", "device_id", ")", ")", "\n", "option", ".", "check_resume", "(", "opt", ",", "resume_state", "[", "'iter'", "]", ")", "# check resume options", "\n", "", "else", ":", "\n", "        ", "resume_state", "=", "None", "\n", "\n", "#### mkdir and loggers", "\n", "", "if", "rank", "<=", "0", ":", "# normal training (rank -1) OR distributed training (rank 0)", "\n", "        ", "if", "resume_state", "is", "None", ":", "\n", "            ", "util", ".", "mkdir_and_rename", "(", "\n", "opt", "[", "'path'", "]", "[", "'experiments_root'", "]", ")", "# rename experiment folder if exists", "\n", "util", ".", "mkdirs", "(", "(", "path", "for", "key", ",", "path", "in", "opt", "[", "'path'", "]", ".", "items", "(", ")", "if", "not", "key", "==", "'experiments_root'", "\n", "and", "'pretrain_model'", "not", "in", "key", "and", "'resume'", "not", "in", "key", ")", ")", "\n", "\n", "# config loggers. Before it, the log will not work", "\n", "", "util", ".", "setup_logger", "(", "'base'", ",", "opt", "[", "'path'", "]", "[", "'log'", "]", ",", "'train_'", "+", "opt", "[", "'name'", "]", ",", "level", "=", "logging", ".", "INFO", ",", "\n", "screen", "=", "True", ",", "tofile", "=", "True", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'base'", ")", "\n", "logger", ".", "info", "(", "option", ".", "dict2str", "(", "opt", ")", ")", "\n", "# tensorboard logger", "\n", "if", "opt", "[", "'use_tb_logger'", "]", "and", "'debug'", "not", "in", "opt", "[", "'name'", "]", ":", "\n", "            ", "version", "=", "float", "(", "torch", ".", "__version__", "[", "0", ":", "3", "]", ")", "\n", "if", "version", ">=", "1.1", ":", "# PyTorch 1.1", "\n", "                ", "from", "torch", ".", "utils", ".", "tensorboard", "import", "SummaryWriter", "\n", "", "else", ":", "\n", "                ", "logger", ".", "info", "(", "\n", "'You are using PyTorch {}. Tensorboard will use [tensorboardX]'", ".", "format", "(", "version", ")", ")", "\n", "from", "tensorboardX", "import", "SummaryWriter", "\n", "", "tb_logger", "=", "SummaryWriter", "(", "log_dir", "=", "'../tb_logger/'", "+", "opt", "[", "'name'", "]", ")", "\n", "", "", "else", ":", "\n", "        ", "util", ".", "setup_logger", "(", "'base'", ",", "opt", "[", "'path'", "]", "[", "'log'", "]", ",", "'train'", ",", "level", "=", "logging", ".", "INFO", ",", "screen", "=", "True", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'base'", ")", "\n", "\n", "# convert to NoneDict, which returns None for missing keys", "\n", "", "opt", "=", "option", ".", "dict_to_nonedict", "(", "opt", ")", "\n", "\n", "#### random seed", "\n", "seed", "=", "opt", "[", "'train'", "]", "[", "'manual_seed'", "]", "\n", "if", "seed", "is", "None", ":", "\n", "        ", "seed", "=", "random", ".", "randint", "(", "1", ",", "10000", ")", "\n", "", "if", "rank", "<=", "0", ":", "\n", "        ", "logger", ".", "info", "(", "'Random seed: {}'", ".", "format", "(", "seed", ")", ")", "\n", "", "util", ".", "set_random_seed", "(", "seed", ")", "\n", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "# torch.backends.cudnn.deterministic = True", "\n", "'''\n    train_loader = loader.get_loader(opt, train=True)\n    val_loader = loader.get_loader(opt, train=False)\n    # train_size = int(math.ceil(len(train_set) / dataset_opt['batch_size']))\n    total_iters = int(opt['train']['niter'])\n    total_epochs = int(opt['train']['epochs'])\n    '''", "\n", "#### create train and val dataloader", "\n", "dataset_ratio", "=", "200", "# enlarge the size of each epoch", "\n", "for", "phase", ",", "dataset_opt", "in", "opt", "[", "'datasets'", "]", ".", "items", "(", ")", ":", "\n", "        ", "if", "phase", "==", "'train'", ":", "\n", "# train_set = create_dataset(dataset_opt)", "\n", "            ", "train_set", "=", "loader", ".", "get_dataset", "(", "opt", ",", "train", "=", "True", ")", "\n", "train_size", "=", "int", "(", "math", ".", "ceil", "(", "len", "(", "train_set", ")", "/", "dataset_opt", "[", "'batch_size'", "]", ")", ")", "\n", "total_iters", "=", "int", "(", "opt", "[", "'train'", "]", "[", "'niter'", "]", ")", "\n", "total_epochs", "=", "int", "(", "math", ".", "ceil", "(", "total_iters", "/", "train_size", ")", ")", "\n", "if", "opt", "[", "'dist'", "]", ":", "\n", "                ", "train_sampler", "=", "DistIterSampler", "(", "train_set", ",", "world_size", ",", "rank", ",", "dataset_ratio", ")", "\n", "total_epochs", "=", "int", "(", "math", ".", "ceil", "(", "total_iters", "/", "(", "train_size", "*", "dataset_ratio", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "train_sampler", "=", "None", "\n", "", "train_loader", "=", "create_dataloader", "(", "train_set", ",", "dataset_opt", ",", "opt", ",", "train_sampler", ")", "\n", "if", "rank", "<=", "0", ":", "\n", "                ", "logger", ".", "info", "(", "'Number of train images: {:,d}, iters: {:,d}'", ".", "format", "(", "\n", "len", "(", "train_set", ")", ",", "train_size", ")", ")", "\n", "logger", ".", "info", "(", "'Total epochs needed: {:d} for iters {:,d}'", ".", "format", "(", "\n", "total_epochs", ",", "total_iters", ")", ")", "\n", "", "", "elif", "phase", "==", "'val'", ":", "\n", "            ", "if", "'+'", "in", "opt", "[", "'datasets'", "]", "[", "'val'", "]", "[", "'name'", "]", ":", "\n", "                ", "val_set", ",", "val_loader", "=", "[", "]", ",", "[", "]", "\n", "valname_list", "=", "opt", "[", "'datasets'", "]", "[", "'val'", "]", "[", "'name'", "]", ".", "split", "(", "'+'", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "valname_list", ")", ")", ":", "\n", "                    ", "val_set", ".", "append", "(", "create_dataset", "(", "dataset_opt", ",", "scale", "=", "opt", "[", "'scale'", "]", ",", "\n", "kernel_size", "=", "opt", "[", "'datasets'", "]", "[", "'train'", "]", "[", "'kernel_size'", "]", ",", "\n", "model_name", "=", "opt", "[", "'network_E'", "]", "[", "'which_model_E'", "]", ",", "\n", "idx", "=", "i", ")", ")", "\n", "val_loader", ".", "append", "(", "create_dataloader", "(", "val_set", "[", "-", "1", "]", ",", "dataset_opt", ",", "opt", ",", "None", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "valname_list", "=", "opt", "[", "'datasets'", "]", "[", "'val'", "]", "[", "'name'", "]", "\n", "val_set", "=", "create_dataset", "(", "dataset_opt", ",", "scale", "=", "opt", "[", "'scale'", "]", ",", "\n", "kernel_size", "=", "opt", "[", "'datasets'", "]", "[", "'train'", "]", "[", "'kernel_size'", "]", ",", "\n", "model_name", "=", "opt", "[", "'network_E'", "]", "[", "'which_model_E'", "]", ")", "\n", "# val_set = loader.get_dataset(opt, train=False)", "\n", "val_loader", "=", "create_dataloader", "(", "val_set", ",", "dataset_opt", ",", "opt", ",", "None", ")", "\n", "'''\n                valname_list = [opt['datasets']['val']['name']]\n                val_set = [create_dataset(dataset_opt, scale=opt['scale'],\n                                         kernel_size=opt['datasets']['train']['kernel_size'],\n                                         model_name=opt['network_E']['which_model_E'])]\n                # val_set = loader.get_dataset(opt, train=False)\n                val_loader = [create_dataloader(val_set[0], dataset_opt, opt, None)]\n                '''", "\n", "", "if", "rank", "<=", "0", ":", "\n", "                ", "logger", ".", "info", "(", "'Number of val images in [{:s}]: {:d}'", ".", "format", "(", "\n", "dataset_opt", "[", "'name'", "]", ",", "len", "(", "val_set", ")", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Phase [{:s}] is not recognized.'", ".", "format", "(", "phase", ")", ")", "\n", "", "", "assert", "train_loader", "is", "not", "None", "\n", "\n", "#### create model", "\n", "model", "=", "create_model", "(", "opt", ")", "\n", "\n", "#### resume training", "\n", "if", "resume_state", ":", "\n", "        ", "logger", ".", "info", "(", "'Resuming training from epoch: {}, iter: {}.'", ".", "format", "(", "\n", "resume_state", "[", "'epoch'", "]", ",", "resume_state", "[", "'iter'", "]", ")", ")", "\n", "\n", "start_epoch", "=", "resume_state", "[", "'epoch'", "]", "\n", "current_step", "=", "resume_state", "[", "'iter'", "]", "\n", "model", ".", "resume_training", "(", "resume_state", ")", "# handle optimizers and schedulers", "\n", "", "else", ":", "\n", "        ", "current_step", "=", "0", "\n", "start_epoch", "=", "0", "\n", "\n", "#### training", "\n", "", "logger", ".", "info", "(", "'Start training from epoch: {:d}, iter: {:d}'", ".", "format", "(", "start_epoch", ",", "current_step", ")", ")", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "total_epochs", "+", "1", ")", ":", "\n", "        ", "if", "opt", "[", "'dist'", "]", ":", "\n", "            ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "", "for", "_", ",", "train_data", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "current_step", "+=", "1", "\n", "if", "current_step", ">", "total_iters", ":", "\n", "                ", "break", "\n", "\n", "#### training", "\n", "", "model", ".", "feed_data", "(", "train_data", ")", "\n", "model", ".", "optimize_parameters", "(", "current_step", ")", "\n", "\n", "#### update learning rate", "\n", "model", ".", "update_learning_rate", "(", "current_step", ",", "warmup_iter", "=", "opt", "[", "'train'", "]", "[", "'warmup_iter'", "]", ")", "\n", "\n", "#### log", "\n", "if", "current_step", "%", "opt", "[", "'logger'", "]", "[", "'print_freq'", "]", "==", "0", ":", "\n", "                ", "logs", "=", "model", ".", "get_current_log", "(", ")", "\n", "message", "=", "'[epoch:{:3d}, iter:{:8,d}, lr:('", ".", "format", "(", "epoch", ",", "current_step", ")", "\n", "for", "v", "in", "model", ".", "get_current_learning_rate", "(", ")", ":", "\n", "                    ", "message", "+=", "'{:.3e},'", ".", "format", "(", "v", ")", "\n", "", "message", "+=", "')] '", "\n", "for", "k", ",", "v", "in", "logs", ".", "items", "(", ")", ":", "\n", "                    ", "message", "+=", "'{:s}: {:.4e} '", ".", "format", "(", "k", ",", "v", ")", "\n", "# tensorboard logger", "\n", "if", "opt", "[", "'use_tb_logger'", "]", "and", "'debug'", "not", "in", "opt", "[", "'name'", "]", ":", "\n", "                        ", "if", "rank", "<=", "0", ":", "\n", "                            ", "tb_logger", ".", "add_scalar", "(", "k", ",", "v", ",", "current_step", ")", "\n", "\n", "", "", "", "if", "rank", "<=", "0", ":", "\n", "                    ", "logger", ".", "info", "(", "message", ")", "\n", "\n", "#### validation", "\n", "", "", "if", "opt", "[", "'datasets'", "]", ".", "get", "(", "'val'", ",", "None", ")", "and", "current_step", "%", "opt", "[", "'train'", "]", "[", "'val_freq'", "]", "==", "0", ":", "\n", "                ", "if", "opt", "[", "'model'", "]", "in", "[", "'sr'", ",", "'srgan'", "]", "and", "rank", "<=", "0", ":", "# image restoration validation", "\n", "# does not support multi-GPU validation", "\n", "                    ", "pbar", "=", "util", ".", "ProgressBar", "(", "len", "(", "val_loader", ")", ")", "\n", "avg_psnr", "=", "0.", "\n", "idx", "=", "0", "\n", "for", "val_data", "in", "val_loader", ":", "\n", "                        ", "idx", "+=", "1", "\n", "img_name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "val_data", "[", "'LQ_path'", "]", "[", "0", "]", ")", ")", "[", "0", "]", "\n", "img_dir", "=", "os", ".", "path", ".", "join", "(", "opt", "[", "'path'", "]", "[", "'val_images'", "]", ",", "img_name", ")", "\n", "util", ".", "mkdir", "(", "img_dir", ")", "\n", "\n", "model", ".", "feed_data", "(", "val_data", ")", "\n", "model", ".", "test", "(", ")", "\n", "\n", "visuals", "=", "model", ".", "get_current_visuals", "(", ")", "\n", "sr_img", "=", "util", ".", "tensor2img", "(", "visuals", "[", "'rlt'", "]", ")", "# uint8", "\n", "gt_img", "=", "util", ".", "tensor2img", "(", "visuals", "[", "'GT'", "]", ")", "# uint8", "\n", "\n", "# Save SR images for reference", "\n", "save_img_path", "=", "os", ".", "path", ".", "join", "(", "img_dir", ",", "\n", "'{:s}_{:d}.png'", ".", "format", "(", "img_name", ",", "current_step", ")", ")", "\n", "util", ".", "save_img", "(", "sr_img", ",", "save_img_path", ")", "\n", "\n", "# calculate PSNR", "\n", "sr_img", ",", "gt_img", "=", "util", ".", "crop_border", "(", "[", "sr_img", ",", "gt_img", "]", ",", "opt", "[", "'scale'", "]", ")", "\n", "avg_psnr", "+=", "util", ".", "calculate_psnr", "(", "sr_img", ",", "gt_img", ")", "\n", "pbar", ".", "update", "(", "'Test {}'", ".", "format", "(", "img_name", ")", ")", "\n", "\n", "", "avg_psnr", "=", "avg_psnr", "/", "idx", "\n", "\n", "# log", "\n", "logger", ".", "info", "(", "'# Validation # PSNR: {:.4e}'", ".", "format", "(", "avg_psnr", ")", ")", "\n", "# tensorboard logger", "\n", "if", "opt", "[", "'use_tb_logger'", "]", "and", "'debug'", "not", "in", "opt", "[", "'name'", "]", ":", "\n", "                        ", "tb_logger", ".", "add_scalar", "(", "'psnr'", ",", "avg_psnr", ",", "current_step", ")", "\n", "", "", "else", ":", "# video restoration validation", "\n", "                    ", "if", "opt", "[", "'dist'", "]", ":", "\n", "# multi-GPU testing", "\n", "                        ", "if", "isinstance", "(", "val_loader", ",", "list", ")", ":", "\n", "                            ", "for", "valname", ",", "val_set_frag", "in", "zip", "(", "valname_list", ",", "val_set", ")", ":", "\n", "                                ", "psnr_rlt", "=", "{", "}", "# with border and center frames", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "'../results'", ",", "opt", "[", "'name'", "]", ",", "valname", ")", ")", ":", "\n", "                                    ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "'../results'", ",", "opt", "[", "'name'", "]", ",", "valname", ")", ")", "\n", "", "if", "rank", "==", "0", ":", "\n", "                                    ", "pbar", "=", "util", ".", "ProgressBar", "(", "len", "(", "val_set_frag", ")", ")", "\n", "", "for", "idx", "in", "range", "(", "rank", ",", "len", "(", "val_set_frag", ")", ",", "world_size", ")", ":", "\n", "\n", "                                    ", "val_data", "=", "val_set_frag", "[", "idx", "]", "\n", "val_data", "[", "'LQs'", "]", ".", "unsqueeze_", "(", "0", ")", "\n", "val_data", "[", "'SuperLQs'", "]", ".", "unsqueeze_", "(", "0", ")", "\n", "folder", "=", "val_data", "[", "'folder'", "]", "\n", "idx_d", ",", "max_idx", "=", "val_data", "[", "'idx'", "]", ".", "split", "(", "'/'", ")", "\n", "idx_d", ",", "max_idx", "=", "int", "(", "idx_d", ")", ",", "int", "(", "max_idx", ")", "\n", "if", "psnr_rlt", ".", "get", "(", "folder", ",", "None", ")", "is", "None", ":", "\n", "                                        ", "psnr_rlt", "[", "folder", "]", "=", "torch", ".", "zeros", "(", "max_idx", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "'cuda'", ")", "\n", "\n", "", "model", ".", "feed_data", "(", "val_data", ")", "\n", "model", ".", "test", "(", ")", "\n", "\n", "visuals", "=", "model", ".", "get_current_visuals", "(", ")", "\n", "rlt_img", "=", "util", ".", "tensor2img", "(", "visuals", "[", "'rlt'", "]", ",", "mode", "=", "'rgb'", ")", "# uint8 RGB--> RGB", "\n", "gt_img", "=", "util", ".", "tensor2img", "(", "visuals", "[", "'LQ'", "]", ",", "mode", "=", "'rgb'", ")", "# uint8 --> RGB", "\n", "hr_img", "=", "util", ".", "tensor2img", "(", "visuals", "[", "'GT'", "]", ",", "mode", "=", "'rgb'", ")", "# uint8 --> BGR", "\n", "\n", "save_img_path", "=", "os", ".", "path", ".", "join", "(", "'../results'", ",", "opt", "[", "'name'", "]", ",", "valname", ",", "folder", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_img_path", ")", ":", "\n", "                                        ", "os", ".", "makedirs", "(", "save_img_path", ")", "\n", "", "imageio", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "save_img_path", ",", "'{:04d}_est.png'", ".", "format", "(", "idx_d", ")", ")", ",", "rlt_img", ")", "\n", "imageio", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "save_img_path", ",", "'{:04d}_gt.png'", ".", "format", "(", "idx_d", ")", ")", ",", "gt_img", ")", "\n", "imageio", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "save_img_path", ",", "'{:04d}_hr.png'", ".", "format", "(", "idx_d", ")", ")", ",", "hr_img", ")", "\n", "\n", "# Convert to Ycbcr", "\n", "# rlt_img = rlt_img.astype('float32') / 255", "\n", "# gt_img = gt_img.astype('float32') / 255", "\n", "\n", "# rlt_img = data_util.bgr2ycbcr(rlt_img, only_y=True)", "\n", "# gt_img = data_util.bgr2ycbcr(gt_img, only_y=True)", "\n", "\n", "# calculate PSNR", "\n", "psnr_rlt", "[", "folder", "]", "[", "idx_d", "]", "=", "util", ".", "calculate_psnr", "(", "rlt_img", ",", "gt_img", ")", "\n", "if", "rank", "==", "0", ":", "\n", "                                        ", "for", "_", "in", "range", "(", "world_size", ")", ":", "\n", "                                            ", "pbar", ".", "update", "(", "'Test {} - {}/{} - PSNR: {:.3f}'", "\n", ".", "format", "(", "folder", ",", "idx_d", ",", "max_idx", ",", "psnr_rlt", "[", "folder", "]", "[", "idx_d", "]", ".", "item", "(", ")", ")", ")", "\n", "\n", "## collect data", "\n", "", "", "", "for", "_", ",", "v", "in", "psnr_rlt", ".", "items", "(", ")", ":", "\n", "                                    ", "dist", ".", "reduce", "(", "v", ",", "0", ")", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "                                    ", "psnr_rlt_avg", "=", "{", "}", "\n", "psnr_total_avg", "=", "0.", "\n", "for", "k", ",", "v", "in", "psnr_rlt", ".", "items", "(", ")", ":", "\n", "                                        ", "psnr_rlt_avg", "[", "k", "]", "=", "torch", ".", "mean", "(", "v", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "psnr_total_avg", "+=", "psnr_rlt_avg", "[", "k", "]", "\n", "", "psnr_total_avg", "/=", "len", "(", "psnr_rlt", ")", "\n", "log_s", "=", "'# Validation # PSNR: {:.4e}'", ".", "format", "(", "psnr_total_avg", ")", "\n", "for", "k", ",", "v", "in", "psnr_rlt_avg", ".", "items", "(", ")", ":", "\n", "                                        ", "log_s", "+=", "' {}: {:.4e}'", ".", "format", "(", "k", ",", "v", ")", "\n", "", "logger", ".", "info", "(", "log_s", ")", "\n", "\n", "if", "opt", "[", "'use_tb_logger'", "]", "and", "'debug'", "not", "in", "opt", "[", "'name'", "]", ":", "\n", "                                        ", "tb_logger", ".", "add_scalar", "(", "'psnr_avg'", ",", "psnr_total_avg", ",", "current_step", ")", "\n", "for", "k", ",", "v", "in", "psnr_rlt_avg", ".", "items", "(", ")", ":", "\n", "                                            ", "tb_logger", ".", "add_scalar", "(", "k", ",", "v", ",", "current_step", ")", "\n", "\n", "\n", "", "", "", "", "", "else", ":", "\n", "                            ", "psnr_rlt", "=", "{", "}", "# with border and center frames", "\n", "selected_srmodel_idx", "=", "[", "]", "\n", "if", "rank", "==", "0", ":", "\n", "                                ", "pbar", "=", "util", ".", "ProgressBar", "(", "len", "(", "val_set", ")", ")", "\n", "", "for", "idx", "in", "range", "(", "rank", ",", "len", "(", "val_set", ")", ",", "world_size", ")", ":", "\n", "                                ", "val_data", "=", "val_set", "[", "idx", "]", "\n", "valname", "=", "opt", "[", "'datasets'", "]", "[", "'val'", "]", "[", "'name'", "]", "\n", "val_data", "[", "'LQs'", "]", ".", "unsqueeze_", "(", "0", ")", "\n", "val_data", "[", "'SuperLQs'", "]", ".", "unsqueeze_", "(", "0", ")", "\n", "folder", "=", "val_data", "[", "'folder'", "]", "\n", "idx_d", ",", "max_idx", "=", "val_data", "[", "'idx'", "]", ".", "split", "(", "'/'", ")", "\n", "idx_d", ",", "max_idx", "=", "int", "(", "idx_d", ")", ",", "int", "(", "max_idx", ")", "\n", "if", "psnr_rlt", ".", "get", "(", "folder", ",", "None", ")", "is", "None", ":", "\n", "                                    ", "psnr_rlt", "[", "folder", "]", "=", "torch", ".", "zeros", "(", "max_idx", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "'cuda'", ")", "\n", "\n", "", "model", ".", "feed_data", "(", "val_data", ")", "\n", "model", ".", "test", "(", ")", "\n", "\n", "visuals", "=", "model", ".", "get_current_visuals", "(", ")", "\n", "rlt_img", "=", "util", ".", "tensor2img", "(", "visuals", "[", "'rlt'", "]", ")", "# uint8 RGB--> BGR", "\n", "gt_img", "=", "util", ".", "tensor2img", "(", "visuals", "[", "'LQ'", "]", ")", "# uint8 --> BGR", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "'../results'", ",", "opt", "[", "'name'", "]", ",", "valname", ",", "folder", ")", ")", ":", "\n", "                                    ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "'../results'", ",", "opt", "[", "'name'", "]", ",", "valname", ",", "folder", ")", ")", "\n", "", "imageio", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "'../results'", ",", "opt", "[", "'name'", "]", ",", "valname", ",", "folder", ",", "\n", "'{:04d}_est.png'", ".", "format", "(", "idx_d", ")", ")", ",", "\n", "rlt_img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "\n", "imageio", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "'../results'", ",", "opt", "[", "'name'", "]", ",", "valname", ",", "folder", ",", "\n", "'{:04d}_gt.png'", ".", "format", "(", "idx_d", ")", ")", ",", "\n", "gt_img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "\n", "\n", "# Convert to Ycbcr", "\n", "# rlt_img = rlt_img.astype('float32') / 255", "\n", "# gt_img = gt_img.astype('float32') / 255", "\n", "\n", "# rlt_img = data_util.bgr2ycbcr(rlt_img, only_y=True)", "\n", "# gt_img = data_util.bgr2ycbcr(gt_img, only_y=True)", "\n", "\n", "# calculate PSNR", "\n", "psnr_rlt", "[", "folder", "]", "[", "idx_d", "]", "=", "util", ".", "calculate_psnr", "(", "rlt_img", ",", "gt_img", ")", "\n", "'''\n                                #Write dataframe\n                                name = val_data['folder'] + ' ' + val_data['idx']\n                                if name in df.index:\n                                    df.at[name, 'GT_Type'] = val_data['Kernel_type'].item()\n                                    df.at[name, 'GT_sigma_x'] = val_data['Kernel_args'][0].item()\n                                    df.at[name, 'GT_sigma_y'] = val_data['Kernel_args'][1].item()\n                                    df.at[name, 'GT_theta'] = val_data['Kernel_args'][2].item()\n                                    df.at[name, 'EST_Type'] = model.class_pred.item()\n                                    df.at[name, 'EST_sigma_x'] = model.fake_kernel_args[0].item()\n                                    df.at[name, 'EST_sigma_y'] = model.fake_kernel_args[1].item()\n                                    df.at[name, 'EST_theta'] = model.fake_kernel_args[2].item()\n                                else:\n                                    df.loc[name] = [val_data['Kernel_type'].item(), val_data['Kernel_args'][0].item(),\n                                                    val_data['Kernel_args'][1].item(), val_data['Kernel_args'][2].item(),\n                                                    model.class_pred.item(), model.fake_kernel_args[0].item(),\n                                                    model.fake_kernel_args[1].item(), model.fake_kernel_args[2].item()]\n                                '''", "\n", "if", "rank", "==", "0", ":", "\n", "                                    ", "for", "_", "in", "range", "(", "world_size", ")", ":", "\n", "                                        ", "pbar", ".", "update", "(", "'Test {} - {}/{} - PSNR: {:.3f}'", "\n", ".", "format", "(", "folder", ",", "idx_d", ",", "max_idx", ",", "psnr_rlt", "[", "folder", "]", "[", "idx_d", "]", ".", "item", "(", ")", ")", ")", "\n", "\n", "## collect data", "\n", "", "", "", "for", "_", ",", "v", "in", "psnr_rlt", ".", "items", "(", ")", ":", "\n", "                                ", "dist", ".", "reduce", "(", "v", ",", "0", ")", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "                                ", "psnr_rlt_avg", "=", "{", "}", "\n", "psnr_total_avg", "=", "0.", "\n", "for", "k", ",", "v", "in", "psnr_rlt", ".", "items", "(", ")", ":", "\n", "                                    ", "psnr_rlt_avg", "[", "k", "]", "=", "torch", ".", "mean", "(", "v", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "psnr_total_avg", "+=", "psnr_rlt_avg", "[", "k", "]", "\n", "", "psnr_total_avg", "/=", "len", "(", "psnr_rlt", ")", "\n", "log_s", "=", "'# Validation # PSNR: {:.4e}'", ".", "format", "(", "psnr_total_avg", ")", "\n", "for", "k", ",", "v", "in", "psnr_rlt_avg", ".", "items", "(", ")", ":", "\n", "                                    ", "log_s", "+=", "' {}: {:.4e}'", ".", "format", "(", "k", ",", "v", ")", "\n", "", "logger", ".", "info", "(", "log_s", ")", "\n", "\n", "if", "opt", "[", "'use_tb_logger'", "]", "and", "'debug'", "not", "in", "opt", "[", "'name'", "]", ":", "\n", "                                    ", "tb_logger", ".", "add_scalar", "(", "'psnr_avg'", ",", "psnr_total_avg", ",", "current_step", ")", "\n", "for", "k", ",", "v", "in", "psnr_rlt_avg", ".", "items", "(", ")", ":", "\n", "                                        ", "tb_logger", ".", "add_scalar", "(", "k", ",", "v", ",", "current_step", ")", "\n", "\n", "", "", "", "", "", "else", ":", "\n", "                        ", "pbar", "=", "util", ".", "ProgressBar", "(", "len", "(", "val_loader", ")", ")", "\n", "psnr_rlt", "=", "{", "}", "# with border and center frames", "\n", "psnr_rlt_avg", "=", "{", "}", "\n", "psnr_total_avg", "=", "0.", "\n", "for", "val_data", "in", "val_loader", ":", "\n", "                            ", "folder", "=", "val_data", "[", "'folder'", "]", "[", "0", "]", "\n", "idx_d", "=", "val_data", "[", "'idx'", "]", "[", "0", "]", "\n", "# border = val_data['border'].item()", "\n", "if", "psnr_rlt", ".", "get", "(", "folder", ",", "None", ")", "is", "None", ":", "\n", "                                ", "psnr_rlt", "[", "folder", "]", "=", "[", "]", "\n", "\n", "# print(val_data['name'][0][0].split('/')[0])", "\n", "", "total_psnr", "=", "0", "\n", "video_length", "=", "val_data", "[", "'LQs'", "]", ".", "size", "(", "1", ")", "\n", "for", "i", "in", "range", "(", "video_length", ")", ":", "\n", "                                ", "val_seg", "=", "{", "}", "\n", "select_idx", "=", "data_util", ".", "index_generation", "(", "i", ",", "video_length", ",", "opt", "[", "'datasets'", "]", "[", "'train'", "]", "[", "'N_frames'", "]", ")", "\n", "val_seg", "[", "'LQs'", "]", "=", "val_data", "[", "'LQs'", "]", "[", ":", ",", "select_idx", "]", "\n", "val_seg", "[", "'GT'", "]", "=", "val_data", "[", "'GT'", "]", "# [:, i]", "\n", "model", ".", "feed_data", "(", "val_seg", ")", "\n", "model", ".", "test", "(", ")", "\n", "visuals", "=", "model", ".", "get_current_visuals", "(", ")", "\n", "rlt_img", "=", "util", ".", "tensor2img", "(", "visuals", "[", "'rlt'", "]", ")", "# uint8", "\n", "gt_img", "=", "util", ".", "tensor2img", "(", "visuals", "[", "'GT'", "]", ")", "# uint8", "\n", "# calculate PSNR", "\n", "psnr", ",", "_", "=", "utility", ".", "calc_psnr", "(", "visuals", "[", "'rlt'", "]", ",", "visuals", "[", "'GT'", "]", ")", "\n", "", "pbar", ".", "update", "(", "'Test {} - {}'", ".", "format", "(", "folder", ",", "idx_d", ")", ")", "\n", "\n", "", "for", "k", ",", "v", "in", "psnr_rlt", ".", "items", "(", ")", ":", "\n", "                            ", "psnr_rlt_avg", "[", "k", "]", "=", "sum", "(", "v", ")", "/", "len", "(", "v", ")", "\n", "psnr_total_avg", "+=", "psnr_rlt_avg", "[", "k", "]", "\n", "", "psnr_total_avg", "/=", "len", "(", "psnr_rlt", ")", "\n", "log_s", "=", "'# Validation # PSNR: {:.4e}:'", ".", "format", "(", "psnr_total_avg", ")", "\n", "for", "k", ",", "v", "in", "psnr_rlt_avg", ".", "items", "(", ")", ":", "\n", "                            ", "log_s", "+=", "' {}: {:.4e}'", ".", "format", "(", "k", ",", "v", ")", "\n", "\n", "", "logger", ".", "info", "(", "log_s", ")", "\n", "if", "opt", "[", "'use_tb_logger'", "]", "and", "'debug'", "not", "in", "opt", "[", "'name'", "]", ":", "\n", "                            ", "tb_logger", ".", "add_scalar", "(", "'psnr_avg'", ",", "psnr_total_avg", ",", "current_step", ")", "\n", "for", "k", ",", "v", "in", "psnr_rlt_avg", ".", "items", "(", ")", ":", "\n", "                                ", "tb_logger", ".", "add_scalar", "(", "k", ",", "v", ",", "current_step", ")", "\n", "\n", "#### save models and training states", "\n", "", "", "", "", "", "if", "current_step", "%", "opt", "[", "'logger'", "]", "[", "'save_checkpoint_freq'", "]", "==", "0", ":", "\n", "                ", "if", "rank", "<=", "0", ":", "\n", "                    ", "logger", ".", "info", "(", "'Saving models and training states.'", ")", "\n", "model", ".", "save", "(", "current_step", ")", "\n", "model", ".", "save_training_state", "(", "epoch", ",", "current_step", ")", "\n", "\n", "", "", "", "", "if", "rank", "<=", "0", ":", "\n", "        ", "logger", ".", "info", "(", "'Saving the final model.'", ")", "\n", "model", ".", "save", "(", "'latest'", ")", "\n", "logger", ".", "info", "(", "'End of training.'", ")", "\n", "tb_logger", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.codes.train_dynavsr.init_dist": [[23, 31], ["int", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.init_process_group", "torch.get_start_method", "torch.set_start_method"], "function", ["None"], ["def", "init_dist", "(", "backend", "=", "'nccl'", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"initialization for distributed training\"\"\"", "\n", "if", "mp", ".", "get_start_method", "(", "allow_none", "=", "True", ")", "!=", "'spawn'", ":", "\n", "        ", "mp", ".", "set_start_method", "(", "'spawn'", ")", "\n", "", "rank", "=", "int", "(", "os", ".", "environ", "[", "'RANK'", "]", ")", "\n", "num_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "rank", "%", "num_gpus", ")", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "backend", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.codes.train_dynavsr.main": [[33, 1114], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "options.dict_to_nonedict", "opt[].get", "utils.util.set_random_seed", "opt[].items", "models.create_model", "models.create_model", "models.create_model", "model.netG.named_parameters", "est_model.netE.named_parameters", "logging.getLogger.info", "pandas.DataFrame", "print", "range", "logging.getLogger.info", "model.save", "logging.getLogger.info", "SummaryWriter.close", "options.parse", "options.parse", "print", "train_dynavsr.init_dist", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.load", "torch.load", "torch.load", "options.check_resume", "utils.util.setup_logger", "logging.getLogger", "logging.getLogger.info", "utils.util.setup_logger", "logging.getLogger", "random.randint", "logging.getLogger.info", "len", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "NotImplementedError", "logging.getLogger.info", "model.resume_training", "est_model.resume_training", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "len", "len", "enumerate", "logging.getLogger.info", "model.save", "logging.getLogger.info", "SummaryWriter.close", "print", "print", "print", "utils.util.mkdir_and_rename", "utils.util.mkdirs", "options.dict2str", "float", "SummaryWriter", "data.meta_learner.loader.get_dataset", "int", "int", "int", "data.meta_learner.create_dataloader", "optim_params.append", "optim_params.append", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "NotImplementedError", "HR.size", "data.meta_learner.preprocessing.common_crop", "torch.stack.append", "torch.stack.append", "data.data_sampler.DistIterSampler.set_epoch", "torch.optim.lr_scheduler.MultiStepLR.step", "torch.optim.SGD.zero_grad", "train_data[].size", "range", "SummaryWriter.add_scalar", "torch.optim.SGD.step", "logging.getLogger.info", "math.ceil", "math.ceil", "data.data_sampler.DistIterSampler", "int", "logging.getLogger.info", "logging.getLogger.info", "NotImplementedError", "print", "modelcp.netG.named_parameters", "est_modelcp.netE.named_parameters", "range", "model.feed_data", "model.calculate_loss", "zip", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "enumerate", "est_model.feed_data", "est_model.forward_without_optim", "est_model.MyLoss", "zip", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "enumerate", "model.get_current_log", "model.get_current_log.items", "opt[].get", "storage.cuda", "math.ceil", "[].split", "range", "logging.getLogger.info", "LQs.reshape.reshape", "torch.nn.functional.interpolate", "F.interpolate.reshape", "copy.deepcopy", "copy.deepcopy", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.SGD.zero_grad", "model.calculate_loss", "modelcp.calculate_loss.backward", "torch.optim.SGD.step", "model.netG.parameters", "modelcp.netG.parameters", "model.netG.parameters", "model.netG.parameters", "est_model.netE.parameters", "est_modelcp.netE.parameters", "est_model.netE.parameters", "est_model.netE.parameters", "model.calculate_loss.item", "logging.getLogger.info", "utils.util.ProgressBar", "logging.getLogger.info", "logging.getLogger.info", "model.save", "model.save_training_state", "est_model.save", "est_model.save_training_state", "opt[].items", "len", "len", "len", "val_set.append", "val_loader.append", "data.meta_learner.create_dataset", "data.meta_learner.create_dataloader", "sr_params.append", "est_params.append", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "NotImplementedError", "est_model.feed_data", "est_model.forward_without_optim", "LQs.reshape.reshape", "torch.nn.functional.interpolate", "F.interpolate.reshape", "train_dynavsr.main.crop"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.options.options.dict_to_nonedict", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.set_random_seed", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.__init__.create_model", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.__init__.create_model", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.__init__.create_model", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.esw0116_DynaVSR.options.options.parse", "home.repos.pwc.inspect_result.esw0116_DynaVSR.options.options.parse", "home.repos.pwc.inspect_result.esw0116_DynaVSR.codes.test_dynavsr.init_dist", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.load", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.load", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.load", "home.repos.pwc.inspect_result.esw0116_DynaVSR.options.options.check_resume", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.setup_logger", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.setup_logger", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.resume_training", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.resume_training", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.mkdir_and_rename", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.mkdirs", "home.repos.pwc.inspect_result.esw0116_DynaVSR.options.options.dict2str", "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.loader.get_dataset", "home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.__init__.create_dataloader", "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.common_crop", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.data_sampler.DistIterSampler.set_epoch", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.feed_data", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.Video_base_model.VideoBaseModel.calculate_loss", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.feed_data", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.LRestimator_model.LRimgestimator_Model.forward_without_optim", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.SRGAN_model.SRGANModel.get_current_log", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.Video_base_model.VideoBaseModel.calculate_loss", "home.repos.pwc.inspect_result.esw0116_DynaVSR.dcn.deform_conv.ModulatedDeformConvFunction.backward", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.save_training_state", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.save_training_state", "home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.__init__.create_dataset", "home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.__init__.create_dataloader", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.feed_data", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.LRestimator_model.LRimgestimator_Model.forward_without_optim", "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.crop"], ["", "def", "main", "(", ")", ":", "\n", "#### options", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-opt'", ",", "type", "=", "str", ",", "help", "=", "'Path to option YAML file.'", ")", "\n", "parser", ".", "add_argument", "(", "'--launcher'", ",", "choices", "=", "[", "'none'", ",", "'pytorch'", "]", ",", "default", "=", "'none'", ",", "\n", "help", "=", "'job launcher'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--downsampling'", ",", "'-D'", ",", "type", "=", "str", ",", "default", "=", "'BI'", ")", "\n", "parser", ".", "add_argument", "(", "'--exp_name'", ",", "type", "=", "str", ",", "default", "=", "'temp'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "args", ".", "exp_name", "==", "'temp'", ":", "\n", "        ", "opt", "=", "option", ".", "parse", "(", "args", ".", "opt", ",", "is_train", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "opt", "=", "option", ".", "parse", "(", "args", ".", "opt", ",", "is_train", "=", "True", ",", "exp_name", "=", "args", ".", "exp_name", ")", "\n", "\n", "# convert to NoneDict, which returns None for missing keys", "\n", "", "opt", "=", "option", ".", "dict_to_nonedict", "(", "opt", ")", "\n", "folder_name", "=", "opt", "[", "'name'", "]", "\n", "\n", "if", "args", ".", "exp_name", "!=", "'temp'", ":", "\n", "        ", "folder_name", "=", "args", ".", "exp_name", "\n", "\n", "#### distributed training settings", "\n", "", "if", "args", ".", "launcher", "==", "'none'", ":", "# disabled distributed training", "\n", "        ", "opt", "[", "'dist'", "]", "=", "False", "\n", "rank", "=", "-", "1", "\n", "print", "(", "'Disabled distributed training.'", ")", "\n", "", "else", ":", "\n", "        ", "opt", "[", "'dist'", "]", "=", "True", "\n", "init_dist", "(", ")", "\n", "world_size", "=", "torch", ".", "distributed", ".", "get_world_size", "(", ")", "\n", "rank", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "\n", "#### loading resume state if exists", "\n", "", "if", "opt", "[", "'path'", "]", ".", "get", "(", "'resume_state'", ",", "None", ")", ":", "\n", "# distributed resuming: all load into default GPU", "\n", "        ", "device_id", "=", "torch", ".", "cuda", ".", "current_device", "(", ")", "\n", "resume_state", "=", "torch", ".", "load", "(", "opt", "[", "'path'", "]", "[", "'resume_state'", "]", ",", "\n", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ".", "cuda", "(", "device_id", ")", ")", "\n", "option", ".", "check_resume", "(", "opt", ",", "resume_state", "[", "'iter'", "]", ")", "# check resume options", "\n", "", "else", ":", "\n", "        ", "resume_state", "=", "None", "\n", "\n", "#### mkdir and loggers", "\n", "", "if", "rank", "<=", "0", ":", "# normal training (rank -1) OR distributed training (rank 0)", "\n", "        ", "if", "resume_state", "is", "None", ":", "\n", "            ", "print", "(", "'\\n\\n'", ")", "\n", "print", "(", "opt", "[", "'path'", "]", ")", "\n", "print", "(", "'\\n\\n'", ")", "\n", "util", ".", "mkdir_and_rename", "(", "\n", "opt", "[", "'path'", "]", "[", "'experiments_root'", "]", ")", "# rename experiment folder if exists", "\n", "util", ".", "mkdirs", "(", "(", "path", "for", "key", ",", "path", "in", "opt", "[", "'path'", "]", ".", "items", "(", ")", "if", "not", "key", "==", "'experiments_root'", "\n", "and", "'pretrain_model'", "not", "in", "key", "and", "'resume'", "not", "in", "key", ")", ")", "\n", "\n", "# config loggers. Before it, the log will not work", "\n", "", "util", ".", "setup_logger", "(", "'base'", ",", "opt", "[", "'path'", "]", "[", "'log'", "]", ",", "'train_'", "+", "opt", "[", "'name'", "]", ",", "level", "=", "logging", ".", "INFO", ",", "\n", "screen", "=", "True", ",", "tofile", "=", "True", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'base'", ")", "\n", "logger", ".", "info", "(", "option", ".", "dict2str", "(", "opt", ")", ")", "\n", "# tensorboard logger", "\n", "if", "opt", "[", "'use_tb_logger'", "]", "and", "'debug'", "not", "in", "opt", "[", "'name'", "]", ":", "\n", "            ", "version", "=", "float", "(", "torch", ".", "__version__", "[", "0", ":", "3", "]", ")", "\n", "if", "version", ">=", "1.1", ":", "# PyTorch 1.1", "\n", "                ", "from", "torch", ".", "utils", ".", "tensorboard", "import", "SummaryWriter", "\n", "", "else", ":", "\n", "                ", "logger", ".", "info", "(", "\n", "'You are using PyTorch {}. Tensorboard will use [tensorboardX]'", ".", "format", "(", "version", ")", ")", "\n", "from", "tensorboardX", "import", "SummaryWriter", "\n", "", "tb_logger", "=", "SummaryWriter", "(", "log_dir", "=", "'../tb_logger/'", "+", "folder_name", ")", "\n", "", "", "else", ":", "\n", "        ", "util", ".", "setup_logger", "(", "'base'", ",", "opt", "[", "'path'", "]", "[", "'log'", "]", ",", "'train'", ",", "level", "=", "logging", ".", "INFO", ",", "screen", "=", "True", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'base'", ")", "\n", "\n", "#### random seed", "\n", "", "seed", "=", "opt", "[", "'train'", "]", "[", "'manual_seed'", "]", "\n", "if", "seed", "is", "None", ":", "\n", "        ", "seed", "=", "random", ".", "randint", "(", "1", ",", "10000", ")", "\n", "", "if", "rank", "<=", "0", ":", "\n", "        ", "logger", ".", "info", "(", "'Random seed: {}'", ".", "format", "(", "seed", ")", ")", "\n", "", "util", ".", "set_random_seed", "(", "seed", ")", "\n", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "# torch.backends.cudnn.deterministic = True", "\n", "\n", "#### create train and val dataloader", "\n", "dataset_ratio", "=", "200", "# enlarge the size of each epoch", "\n", "for", "phase", ",", "dataset_opt", "in", "opt", "[", "'datasets'", "]", ".", "items", "(", ")", ":", "\n", "        ", "if", "phase", "==", "'train'", ":", "\n", "# train_set = create_dataset(dataset_opt, scale=opt['scale'],", "\n", "#                           kernel_size=opt['datasets']['train']['kernel_size'],", "\n", "#                           model_name=opt['network_E']['which_model_E'])", "\n", "            ", "train_set", "=", "loader", ".", "get_dataset", "(", "opt", ",", "train", "=", "True", ")", "\n", "train_size", "=", "int", "(", "math", ".", "ceil", "(", "len", "(", "train_set", ")", "/", "dataset_opt", "[", "'batch_size'", "]", ")", ")", "\n", "total_iters", "=", "int", "(", "opt", "[", "'train'", "]", "[", "'niter'", "]", ")", "\n", "total_epochs", "=", "int", "(", "math", ".", "ceil", "(", "total_iters", "/", "train_size", ")", ")", "\n", "if", "opt", "[", "'dist'", "]", ":", "\n", "                ", "train_sampler", "=", "DistIterSampler", "(", "train_set", ",", "world_size", ",", "rank", ",", "dataset_ratio", ")", "\n", "total_epochs", "=", "int", "(", "math", ".", "ceil", "(", "total_iters", "/", "(", "train_size", "*", "dataset_ratio", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "train_sampler", "=", "None", "\n", "", "train_loader", "=", "create_dataloader", "(", "train_set", ",", "dataset_opt", ",", "opt", ",", "train_sampler", ")", "\n", "if", "rank", "<=", "0", ":", "\n", "                ", "logger", ".", "info", "(", "'Number of train images: {:,d}, iters: {:,d}'", ".", "format", "(", "\n", "len", "(", "train_set", ")", ",", "train_size", ")", ")", "\n", "logger", ".", "info", "(", "'Total epochs needed: {:d} for iters {:,d}'", ".", "format", "(", "\n", "total_epochs", ",", "total_iters", ")", ")", "\n", "", "", "elif", "phase", "==", "'val'", ":", "\n", "            ", "if", "'+'", "in", "opt", "[", "'datasets'", "]", "[", "'val'", "]", "[", "'name'", "]", ":", "\n", "                ", "val_set", ",", "val_loader", "=", "[", "]", ",", "[", "]", "\n", "valname_list", "=", "opt", "[", "'datasets'", "]", "[", "'val'", "]", "[", "'name'", "]", ".", "split", "(", "'+'", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "valname_list", ")", ")", ":", "\n", "                    ", "val_set", ".", "append", "(", "create_dataset", "(", "dataset_opt", ",", "scale", "=", "opt", "[", "'scale'", "]", ",", "\n", "kernel_size", "=", "opt", "[", "'datasets'", "]", "[", "'train'", "]", "[", "'kernel_size'", "]", ",", "\n", "model_name", "=", "opt", "[", "'network_E'", "]", "[", "'which_model_E'", "]", ",", "idx", "=", "i", ")", ")", "\n", "val_loader", ".", "append", "(", "create_dataloader", "(", "val_set", "[", "-", "1", "]", ",", "dataset_opt", ",", "opt", ",", "None", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "val_set", "=", "[", "create_dataset", "(", "dataset_opt", ",", "scale", "=", "opt", "[", "'scale'", "]", ",", "\n", "kernel_size", "=", "opt", "[", "'datasets'", "]", "[", "'train'", "]", "[", "'kernel_size'", "]", ",", "\n", "model_name", "=", "opt", "[", "'network_E'", "]", "[", "'which_model_E'", "]", ")", "]", "\n", "val_loader", "=", "[", "create_dataloader", "(", "val_set", ",", "dataset_opt", ",", "opt", ",", "None", ")", "]", "\n", "", "if", "rank", "<=", "0", ":", "\n", "                ", "logger", ".", "info", "(", "'Number of val images in [{:s}]: {:d}'", ".", "format", "(", "\n", "dataset_opt", "[", "'name'", "]", ",", "len", "(", "val_set", ")", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Phase [{:s}] is not recognized.'", ".", "format", "(", "phase", ")", ")", "\n", "", "", "assert", "train_loader", "is", "not", "None", "\n", "\n", "#### create model", "\n", "models", "=", "create_model", "(", "opt", ")", "\n", "assert", "len", "(", "models", ")", "==", "2", "\n", "model", ",", "est_model", "=", "models", "[", "0", "]", ",", "models", "[", "1", "]", "\n", "modelcp", ",", "est_modelcp", "=", "create_model", "(", "opt", ")", "\n", "model_fixed", ",", "est_model_fixed", "=", "create_model", "(", "opt", ")", "\n", "\n", "#### Define combined optimizer + scheduler", "\n", "optim_params", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "model", ".", "netG", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "v", ".", "requires_grad", ":", "\n", "            ", "optim_params", ".", "append", "(", "v", ")", "\n", "", "", "for", "k", ",", "v", "in", "est_model", ".", "netE", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "v", ".", "requires_grad", ":", "\n", "            ", "optim_params", ".", "append", "(", "v", ")", "\n", "", "", "if", "opt", "[", "'train'", "]", "[", "'optim'", "]", "==", "'Adam'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "optim_params", ",", "lr", "=", "opt", "[", "'train'", "]", "[", "'lr_G'", "]", ",", "betas", "=", "(", "opt", "[", "'train'", "]", "[", "'beta1'", "]", ",", "opt", "[", "'train'", "]", "[", "'beta2'", "]", ")", ")", "\n", "", "elif", "opt", "[", "'train'", "]", "[", "'optim'", "]", "==", "'SGD'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "optim_params", ",", "lr", "=", "opt", "[", "'train'", "]", "[", "'lr_G'", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "if", "opt", "[", "'train'", "]", "[", "'lr_scheme'", "]", "==", "'MultiStepLR'", ":", "\n", "        ", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "opt", "[", "'train'", "]", "[", "'lr_steps'", "]", ",", "opt", "[", "'train'", "]", "[", "'lr_gamma'", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "#### resume training", "\n", "", "if", "resume_state", ":", "\n", "        ", "logger", ".", "info", "(", "'Resuming training from epoch: {}, iter: {}.'", ".", "format", "(", "\n", "resume_state", "[", "'epoch'", "]", ",", "resume_state", "[", "'iter'", "]", ")", ")", "\n", "\n", "start_epoch", "=", "resume_state", "[", "'epoch'", "]", "\n", "current_step", "=", "resume_state", "[", "'iter'", "]", "\n", "model", ".", "resume_training", "(", "resume_state", ")", "# handle optimizers and schedulers", "\n", "est_model", ".", "resume_training", "(", "resume_state", ")", "\n", "\n", "", "else", ":", "\n", "        ", "current_step", "=", "0", "\n", "start_epoch", "=", "0", "\n", "\n", "#### training", "\n", "", "logger", ".", "info", "(", "'Start training from epoch: {:d}, iter: {:d}'", ".", "format", "(", "start_epoch", ",", "current_step", ")", ")", "\n", "center_idx", "=", "(", "opt", "[", "'datasets'", "]", "[", "'train'", "]", "[", "'N_frames'", "]", ")", "//", "2", "\n", "lr_alpha", "=", "opt", "[", "'train'", "]", "[", "'maml'", "]", "[", "'lr_alpha'", "]", "\n", "lr_alpha_est", "=", "opt", "[", "'train'", "]", "[", "'maml'", "]", "[", "'lr_alpha_est'", "]", "if", "opt", "[", "'train'", "]", "[", "'maml'", "]", "[", "'lr_alpha_est'", "]", "is", "not", "None", "else", "opt", "[", "'train'", "]", "[", "'maml'", "]", "[", "'lr_alpha'", "]", "\n", "update_step", "=", "opt", "[", "'train'", "]", "[", "'maml'", "]", "[", "'adapt_iter'", "]", "\n", "\n", "pd_log", "=", "pd", ".", "DataFrame", "(", "columns", "=", "[", "'PSNR_Init'", ",", "'PSNR_Start'", ",", "'PSNR_Final({})'", ".", "format", "(", "update_step", ")", ",", "\n", "'SSIM_Init'", ",", "'SSIM_Final'", "]", ")", "\n", "\n", "def", "crop", "(", "LR_seq", ",", "HR", ",", "num_patches_for_batch", "=", "4", ",", "patch_size", "=", "44", ")", ":", "\n", "        ", "\"\"\"\n        Crop given patches.\n\n        Args:\n            LR_seq: (B=1) x T x C x H x W\n            HR: (B=1) x C x H x W\n\n            patch_size (int, optional):\n\n        Return:\n            B(=batch_size) x T x C x H x W\n        \"\"\"", "\n", "# Find the lowest resolution", "\n", "cropped_lr", "=", "[", "]", "\n", "cropped_hr", "=", "[", "]", "\n", "assert", "HR", ".", "size", "(", "0", ")", "==", "1", "\n", "LR_seq_", "=", "LR_seq", "[", "0", "]", "\n", "#print(LR_seq[0].size())", "\n", "#print(HR.size())", "\n", "\n", "HR_", "=", "HR", "[", "0", "]", "\n", "for", "_", "in", "range", "(", "num_patches_for_batch", ")", ":", "\n", "            ", "patch_lr", ",", "patch_hr", "=", "preprocessing", ".", "common_crop", "(", "LR_seq_", ",", "HR_", ",", "patch_size", "=", "patch_size", "//", "2", ")", "\n", "cropped_lr", ".", "append", "(", "patch_lr", ")", "\n", "cropped_hr", ".", "append", "(", "patch_hr", ")", "\n", "\n", "", "cropped_lr", "=", "torch", ".", "stack", "(", "cropped_lr", ",", "dim", "=", "0", ")", "\n", "cropped_hr", "=", "torch", ".", "stack", "(", "cropped_hr", ",", "dim", "=", "0", ")", "\n", "\n", "#print(cropped_lr.size(), cropped_hr.size())", "\n", "\n", "return", "cropped_lr", ",", "cropped_hr", "\n", "\n", "", "print", "(", "folder_name", ")", "\n", "\n", "# initialize bicubic performance", "\n", "bicubic_performance", "=", "[", "None", "]", "*", "len", "(", "val_set", ")", "\n", "BICUBIC_EVALUATE", "=", "[", "True", "]", "*", "len", "(", "val_set", ")", "\n", "\n", "termination", "=", "False", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "total_epochs", "+", "1", ")", ":", "\n", "        ", "if", "opt", "[", "'dist'", "]", ":", "\n", "            ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "\n", "\n", "\n", "# Main training loop", "\n", "", "for", "_", ",", "train_data", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "if", "termination", "is", "True", ":", "\n", "                ", "break", "\n", "", "current_step", "+=", "1", "\n", "if", "current_step", ">", "total_iters", "and", "termination", "is", "False", ":", "\n", "                ", "termination", "=", "True", "\n", "print", "(", "'Training terminated'", ")", "\n", "\n", "#### update learning rate", "\n", "#model.update_learning_rate(current_step, warmup_iter=opt['train']['warmup_iter'])", "\n", "", "scheduler", ".", "step", "(", ")", "# no warmup for now", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "\n", "cropped_meta_train_data", "=", "{", "}", "\n", "meta_train_data", "=", "{", "}", "\n", "meta_test_data", "=", "{", "}", "\n", "\n", "'''\n            # Make SuperLR seq using estimation model\n            if not opt['train']['use_real']:\n                est_model.feed_data(train_data)\n                #est_model.test()\n                est_model.forward_without_optim()\n                superlr_seq = est_model.fake_L\n                meta_train_data['LQs'] = superlr_seq\n            else:\n                meta_train_data['LQs'] = train_data['SuperLQs']\n            '''", "\n", "meta_train_data", "[", "'GT'", "]", "=", "train_data", "[", "'LQs'", "]", "[", ":", ",", "center_idx", "]", "\n", "meta_test_data", "[", "'LQs'", "]", "=", "train_data", "[", "'LQs'", "]", "\n", "meta_test_data", "[", "'GT'", "]", "=", "train_data", "[", "'GT'", "]", "[", ":", ",", "center_idx", "]", "\n", "\n", "# batch size = number of tasks", "\n", "total_loss_q", "=", "0", "\n", "#batch_size = meta_train_data['LQs'].size(0)", "\n", "batch_size", "=", "train_data", "[", "'LQs'", "]", ".", "size", "(", "0", ")", "\n", "#model.optimizer_G.zero_grad()", "\n", "\n", "\n", "# Looping over batch dimension (due to high memory consumption)", "\n", "for", "batch", "in", "range", "(", "batch_size", ")", ":", "\n", "#print(batch+1)", "\n", "                ", "train_data_i", "=", "{", "\n", "'LQs'", ":", "train_data", "[", "'LQs'", "]", "[", "batch", ":", "batch", "+", "1", "]", ",", "\n", "'GT'", ":", "train_data", "[", "'GT'", "]", "[", "batch", ":", "batch", "+", "1", "]", ",", "\n", "'SuperLQs'", ":", "train_data", "[", "'SuperLQs'", "]", "[", "batch", ":", "batch", "+", "1", "]", "\n", "}", "\n", "meta_train_data_i", "=", "{", "}", "\n", "#meta_train_data_i['LQs'] = meta_train_data['LQs'][batch:batch+1]", "\n", "meta_train_data_i", "[", "'GT'", "]", "=", "meta_train_data", "[", "'GT'", "]", "[", "batch", ":", "batch", "+", "1", "]", "\n", "meta_test_data_i", "=", "{", "}", "\n", "meta_test_data_i", "[", "'LQs'", "]", "=", "meta_test_data", "[", "'LQs'", "]", "[", "batch", ":", "batch", "+", "1", "]", "\n", "meta_test_data_i", "[", "'GT'", "]", "=", "meta_test_data", "[", "'GT'", "]", "[", "batch", ":", "batch", "+", "1", "]", "\n", "\n", "if", "opt", "[", "'network_G'", "]", "[", "'which_model_G'", "]", "==", "'TOF'", ":", "\n", "# Bicubic upsample to match the size", "\n", "                    ", "LQs", "=", "meta_test_data_i", "[", "'LQs'", "]", "\n", "B", ",", "T", ",", "C", ",", "H", ",", "W", "=", "LQs", ".", "shape", "\n", "LQs", "=", "LQs", ".", "reshape", "(", "B", "*", "T", ",", "C", ",", "H", ",", "W", ")", "\n", "Bic_LQs", "=", "F", ".", "interpolate", "(", "LQs", ",", "scale_factor", "=", "opt", "[", "'scale'", "]", ",", "mode", "=", "'bicubic'", ",", "align_corners", "=", "True", ")", "\n", "meta_test_data_i", "[", "'LQs'", "]", "=", "Bic_LQs", ".", "reshape", "(", "B", ",", "T", ",", "C", ",", "H", "*", "opt", "[", "'scale'", "]", ",", "W", "*", "opt", "[", "'scale'", "]", ")", "\n", "\n", "", "modelcp", ".", "netG", ",", "est_modelcp", ".", "netE", "=", "deepcopy", "(", "model", ".", "netG", ")", ",", "deepcopy", "(", "est_model", ".", "netE", ")", "\n", "optim_params", "=", "[", "]", "\n", "\n", "sr_params", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "modelcp", ".", "netG", ".", "named_parameters", "(", ")", ":", "\n", "                    ", "if", "v", ".", "requires_grad", ":", "\n", "                        ", "sr_params", ".", "append", "(", "v", ")", "\n", "\n", "", "", "est_params", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "est_modelcp", ".", "netE", ".", "named_parameters", "(", ")", ":", "\n", "                    ", "if", "v", ".", "requires_grad", ":", "\n", "                        ", "est_params", ".", "append", "(", "v", ")", "\n", "\n", "", "", "optim_params", "=", "[", "\n", "{", "# add normal params first", "\n", "'params'", ":", "sr_params", ",", "\n", "'lr'", ":", "lr_alpha", "\n", "}", ",", "\n", "{", "\n", "'params'", ":", "est_params", ",", "\n", "'lr'", ":", "lr_alpha_est", "\n", "}", ",", "\n", "]", "\n", "\n", "if", "opt", "[", "'train'", "]", "[", "'maml'", "]", "[", "'optimizer'", "]", "==", "'Adam'", ":", "\n", "                    ", "inner_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "optim_params", ",", "lr", "=", "lr_alpha", ",", "\n", "betas", "=", "(", "\n", "opt", "[", "'train'", "]", "[", "'maml'", "]", "[", "'beta1'", "]", ",", "opt", "[", "'train'", "]", "[", "'maml'", "]", "[", "'beta2'", "]", ")", ")", "\n", "", "elif", "opt", "[", "'train'", "]", "[", "'maml'", "]", "[", "'optimizer'", "]", "==", "'SGD'", ":", "\n", "                    ", "inner_optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "optim_params", ",", "lr", "=", "lr_alpha", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "for", "k", "in", "range", "(", "update_step", ")", ":", "\n", "                    ", "inner_optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# Make SuperLR seq using estimation model", "\n", "if", "not", "opt", "[", "'train'", "]", "[", "'use_real'", "]", ":", "\n", "                        ", "est_model", ".", "feed_data", "(", "train_data_i", ")", "\n", "est_model", ".", "forward_without_optim", "(", ")", "\n", "superlr_seq", "=", "est_model", ".", "fake_L", "\n", "meta_train_data_i", "[", "'LQs'", "]", "=", "superlr_seq", "\n", "", "else", ":", "\n", "                        ", "meta_train_data_i", "[", "'LQs'", "]", "=", "train_data_i", "[", "'SuperLQs'", "]", "\n", "\n", "\n", "", "if", "opt", "[", "'network_G'", "]", "[", "'which_model_G'", "]", "==", "'TOF'", ":", "\n", "# Bicubic upsample to match the size", "\n", "                        ", "LQs", "=", "meta_train_data_i", "[", "'LQs'", "]", "\n", "B", ",", "T", ",", "C", ",", "H", ",", "W", "=", "LQs", ".", "shape", "\n", "LQs", "=", "LQs", ".", "reshape", "(", "B", "*", "T", ",", "C", ",", "H", ",", "W", ")", "\n", "Bic_LQs", "=", "F", ".", "interpolate", "(", "LQs", ",", "scale_factor", "=", "opt", "[", "'scale'", "]", ",", "mode", "=", "'bicubic'", ",", "align_corners", "=", "True", ")", "\n", "meta_train_data_i", "[", "'LQs'", "]", "=", "Bic_LQs", ".", "reshape", "(", "B", ",", "T", ",", "C", ",", "H", "*", "opt", "[", "'scale'", "]", ",", "W", "*", "opt", "[", "'scale'", "]", ")", "\n", "\n", "# Meta training", "\n", "", "if", "opt", "[", "'train'", "]", "[", "'maml'", "]", "[", "'use_patch'", "]", ":", "\n", "                        ", "cropped_meta_train_data", "[", "'LQs'", "]", ",", "cropped_meta_train_data", "[", "'GT'", "]", "=", "crop", "(", "meta_train_data_i", "[", "'LQs'", "]", ",", "meta_train_data_i", "[", "'GT'", "]", ",", "\n", "opt", "[", "'train'", "]", "[", "'maml'", "]", "[", "'num_patch'", "]", ",", "\n", "opt", "[", "'train'", "]", "[", "'maml'", "]", "[", "'patch_size'", "]", ")", "\n", "model", ".", "feed_data", "(", "cropped_meta_train_data", ")", "\n", "", "else", ":", "\n", "                        ", "model", ".", "feed_data", "(", "meta_train_data_i", ")", "\n", "", "loss_train", "=", "model", ".", "calculate_loss", "(", ")", "\n", "\n", "## Add SLR pixelwise loss while training", "\n", "#est_model_fixed.feed_data(train_data_i)", "\n", "#est_model_fixed.test()", "\n", "#slr_initialized = est_model_fixed.fake_L", "\n", "#slr_initialized = slr_initialized.to('cuda') ", "\n", "if", "opt", "[", "'network_G'", "]", "[", "'which_model_G'", "]", "==", "'TOF'", ":", "\n", "                        ", "loss_train", "+=", "F", ".", "l1_loss", "(", "LQs", ".", "to", "(", "'cuda'", ")", ",", "train_data_i", "[", "'SuperLQs'", "]", ".", "to", "(", "'cuda'", ")", ")", "\n", "", "else", ":", "\n", "                        ", "loss_train", "+=", "F", ".", "l1_loss", "(", "meta_train_data_i", "[", "'LQs'", "]", ".", "to", "(", "'cuda'", ")", ",", "train_data_i", "[", "'SuperLQs'", "]", ".", "to", "(", "'cuda'", ")", ")", "\n", "\n", "", "loss_train", ".", "backward", "(", ")", "\n", "# print('Inner Update, {}'.format(k+1))", "\n", "inner_optimizer", ".", "step", "(", ")", "\n", "\n", "\n", "# Meta testing - final forward to update the base model parameters", "\n", "\n", "", "model", ".", "feed_data", "(", "meta_test_data_i", ")", "\n", "loss_q", "=", "model", ".", "calculate_loss", "(", ")", "\n", "# Copy base parameters to current model", "\n", "for", "param", ",", "base_param", "in", "zip", "(", "model", ".", "netG", ".", "parameters", "(", ")", ",", "modelcp", ".", "netG", ".", "parameters", "(", ")", ")", ":", "\n", "                    ", "param", ".", "data", "=", "base_param", ".", "data", "\n", "\n", "# Calculate gradient & update meta-learner", "\n", "#print(type(model.netG.parameters()))", "\n", "#print(type(model.netG.parameters() + est_model.netE.parameters()))", "\n", "", "grads", "=", "torch", ".", "autograd", ".", "grad", "(", "loss_q", "/", "batch_size", ",", "model", ".", "netG", ".", "parameters", "(", ")", ")", "\n", "for", "j", ",", "param", "in", "enumerate", "(", "model", ".", "netG", ".", "parameters", "(", ")", ")", ":", "\n", "                    ", "param", ".", "grad", "+=", "grads", "[", "j", "]", "\n", "\n", "", "est_model", ".", "feed_data", "(", "train_data_i", ")", "\n", "est_model", ".", "forward_without_optim", "(", ")", "\n", "loss_e", "=", "est_model", ".", "MyLoss", "(", "est_model", ".", "fake_L", ",", "est_model", ".", "real_L", ")", "# / 100  # compare with GT SLR image to current output", "\n", "for", "param", ",", "base_param", "in", "zip", "(", "est_model", ".", "netE", ".", "parameters", "(", ")", ",", "est_modelcp", ".", "netE", ".", "parameters", "(", ")", ")", ":", "\n", "                    ", "param", ".", "data", "=", "base_param", ".", "data", "\n", "# TODO: set different loss scales for loss_e and loss_q?", "\n", "", "gradsE", "=", "torch", ".", "autograd", ".", "grad", "(", "loss_e", "/", "(", "batch_size", "*", "10", ")", ",", "est_model", ".", "netE", ".", "parameters", "(", ")", ")", "\n", "# print(gradsE)", "\n", "for", "j", ",", "param", "in", "enumerate", "(", "est_model", ".", "netE", ".", "parameters", "(", ")", ")", ":", "\n", "                    ", "param", ".", "grad", "+=", "gradsE", "[", "j", "]", "\n", "\n", "\n", "#(loss_q/batch_size).backward()", "\n", "", "total_loss_q", "+=", "loss_q", ".", "item", "(", ")", "/", "batch_size", "\n", "# print(batch, k, loss_train.item(), loss_q.item())", "\n", "\n", "del", "modelcp", ".", "netG", ",", "est_modelcp", ".", "netE", "\n", "\n", "", "tb_logger", ".", "add_scalar", "(", "'Train loss'", ",", "total_loss_q", ",", "global_step", "=", "current_step", ")", "\n", "# print('Meta Update')", "\n", "#model.optimizer_G.step()", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "#### log", "\n", "if", "current_step", "%", "opt", "[", "'logger'", "]", "[", "'print_freq'", "]", "==", "0", ":", "\n", "                ", "logs", "=", "model", ".", "get_current_log", "(", ")", "\n", "message", "=", "'[epoch:{:3d}, iter:{:8,d}, lr:('", ".", "format", "(", "epoch", ",", "current_step", ")", "\n", "#for v in model.get_current_learning_rate():", "\n", "#    message += '{:.3e},'.format(v)", "\n", "#message += '{:.3e},'.format([param_group['lr'] for param_group in optimizer.param_groups][0])", "\n", "message", "+=", "'{:.3e},'", ".", "format", "(", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ")", "\n", "message", "+=", "')] '", "\n", "for", "k", ",", "v", "in", "logs", ".", "items", "(", ")", ":", "\n", "                    ", "message", "+=", "'{:s}: {:.4e} '", ".", "format", "(", "k", ",", "v", ")", "\n", "# tensorboard logger", "\n", "if", "opt", "[", "'use_tb_logger'", "]", "and", "'debug'", "not", "in", "opt", "[", "'name'", "]", ":", "\n", "                        ", "if", "rank", "<=", "0", ":", "\n", "                            ", "tb_logger", ".", "add_scalar", "(", "k", ",", "v", ",", "current_step", ")", "\n", "", "", "", "if", "rank", "<=", "0", ":", "\n", "                    ", "logger", ".", "info", "(", "message", ")", "\n", "\n", "\n", "\n", "#### validation", "\n", "#print(opt['datasets'].get('val', None))", "\n", "", "", "if", "opt", "[", "'datasets'", "]", ".", "get", "(", "'val'", ",", "None", ")", "and", "(", "current_step", "%", "opt", "[", "'train'", "]", "[", "'val_freq'", "]", "==", "0", "or", "termination", "is", "True", ")", ":", "\n", "                ", "if", "opt", "[", "'model'", "]", "in", "[", "'sr'", ",", "'srgan'", "]", "and", "rank", "<=", "0", ":", "# image restoration validation", "\n", "# does not support multi-GPU validation", "\n", "                    ", "pbar", "=", "util", ".", "ProgressBar", "(", "len", "(", "val_loader", ")", ")", "\n", "avg_psnr", "=", "0.", "\n", "idx", "=", "0", "\n", "for", "val_data", "in", "val_loader", ":", "\n", "                        ", "idx", "+=", "1", "\n", "img_name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "val_data", "[", "'LQ_path'", "]", "[", "0", "]", ")", ")", "[", "0", "]", "\n", "img_dir", "=", "os", ".", "path", ".", "join", "(", "opt", "[", "'path'", "]", "[", "'val_images'", "]", ",", "img_name", ")", "\n", "util", ".", "mkdir", "(", "img_dir", ")", "\n", "\n", "model", ".", "feed_data", "(", "val_data", ")", "\n", "model", ".", "test", "(", ")", "\n", "\n", "visuals", "=", "model", ".", "get_current_visuals", "(", ")", "\n", "sr_img", "=", "util", ".", "tensor2img", "(", "visuals", "[", "'rlt'", "]", ")", "# uint8", "\n", "gt_img", "=", "util", ".", "tensor2img", "(", "visuals", "[", "'GT'", "]", ")", "# uint8", "\n", "\n", "# Save SR images for reference", "\n", "save_img_path", "=", "os", ".", "path", ".", "join", "(", "img_dir", ",", "\n", "'{:s}_{:d}.png'", ".", "format", "(", "img_name", ",", "current_step", ")", ")", "\n", "util", ".", "save_img", "(", "sr_img", ",", "save_img_path", ")", "\n", "\n", "# calculate PSNR", "\n", "sr_img", ",", "gt_img", "=", "util", ".", "crop_border", "(", "[", "sr_img", ",", "gt_img", "]", ",", "opt", "[", "'scale'", "]", ")", "\n", "avg_psnr", "+=", "util", ".", "calculate_psnr", "(", "sr_img", ",", "gt_img", ")", "\n", "pbar", ".", "update", "(", "'Test {}'", ".", "format", "(", "img_name", ")", ")", "\n", "\n", "", "avg_psnr", "=", "avg_psnr", "/", "idx", "\n", "\n", "# log", "\n", "logger", ".", "info", "(", "'# Validation # PSNR: {:.4e}'", ".", "format", "(", "avg_psnr", ")", ")", "\n", "# tensorboard logger", "\n", "if", "opt", "[", "'use_tb_logger'", "]", "and", "'debug'", "not", "in", "opt", "[", "'name'", "]", ":", "\n", "                        ", "tb_logger", ".", "add_scalar", "(", "'psnr'", ",", "avg_psnr", ",", "current_step", ")", "\n", "\n", "", "", "else", ":", "# video restoration validation <<<----Use this", "\n", "                    ", "if", "opt", "[", "'dist'", "]", ":", "\n", "# multi-GPU testing", "\n", "                        ", "for", "val_idx", ",", "val_set_frag", "in", "enumerate", "(", "val_set", ")", ":", "\n", "# PSNR_rlt: psnr_init, psnr_before, psnr_after", "\n", "                            ", "psnr_rlt", "=", "[", "{", "}", ",", "{", "}", ",", "{", "}", "]", "\n", "# SSIM_rlt: ssim_init, ssim_after", "\n", "ssim_rlt", "=", "[", "{", "}", ",", "{", "}", "]", "\n", "if", "rank", "==", "0", ":", "\n", "                                ", "pbar", "=", "util", ".", "ProgressBar", "(", "len", "(", "val_set_frag", ")", ")", "\n", "", "for", "idx", "in", "range", "(", "rank", ",", "len", "(", "val_set_frag", ")", ",", "world_size", ")", ":", "\n", "                                ", "val_data", "=", "val_set_frag", "[", "idx", "]", "\n", "if", "'name'", "in", "val_data", ".", "keys", "(", ")", ":", "\n", "                                    ", "name", "=", "val_data", "[", "'name'", "]", "[", "center_idx", "]", "[", "0", "]", "\n", "", "else", ":", "\n", "                                    ", "name", "=", "'{}/{:08d}'", ".", "format", "(", "val_data", "[", "'folder'", "]", ",", "int", "(", "val_data", "[", "'idx'", "]", ".", "split", "(", "'/'", ")", "[", "0", "]", ")", ")", "\n", "\n", "", "train_folder", "=", "os", ".", "path", ".", "join", "(", "'../results'", ",", "folder_name", ",", "name", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "train_folder", ")", ":", "\n", "                                    ", "os", ".", "makedirs", "(", "train_folder", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "val_data", "[", "'SuperLQs'", "]", ".", "unsqueeze_", "(", "0", ")", "\n", "val_data", "[", "'LQs'", "]", ".", "unsqueeze_", "(", "0", ")", "\n", "val_data", "[", "'GT'", "]", ".", "unsqueeze_", "(", "0", ")", "\n", "folder", "=", "val_data", "[", "'folder'", "]", "\n", "idx_d", ",", "max_idx", "=", "val_data", "[", "'idx'", "]", ".", "split", "(", "'/'", ")", "\n", "idx_d", ",", "max_idx", "=", "int", "(", "idx_d", ")", ",", "int", "(", "max_idx", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "psnr_rlt", ")", ")", ":", "\n", "                                    ", "if", "psnr_rlt", "[", "i", "]", ".", "get", "(", "folder", ",", "None", ")", "is", "None", ":", "\n", "                                        ", "psnr_rlt", "[", "i", "]", "[", "folder", "]", "=", "torch", ".", "zeros", "(", "max_idx", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "'cuda'", ")", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "ssim_rlt", ")", ")", ":", "\n", "                                    ", "if", "ssim_rlt", "[", "i", "]", ".", "get", "(", "folder", ",", "None", ")", "is", "None", ":", "\n", "                                        ", "ssim_rlt", "[", "i", "]", "[", "folder", "]", "=", "torch", ".", "zeros", "(", "max_idx", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "'cuda'", ")", "\n", "\n", "", "", "cropped_meta_train_data", "=", "{", "}", "\n", "meta_train_data", "=", "{", "}", "\n", "meta_test_data", "=", "{", "}", "\n", "\n", "# Make SuperLR seq using estimation model Later", "\n", "meta_train_data", "[", "'GT'", "]", "=", "val_data", "[", "'LQs'", "]", "[", ":", ",", "center_idx", "]", "\n", "meta_test_data", "[", "'LQs'", "]", "=", "val_data", "[", "'LQs'", "]", "[", "0", ":", "1", "]", "\n", "meta_test_data", "[", "'GT'", "]", "=", "val_data", "[", "'GT'", "]", "[", "0", ":", "1", ",", "center_idx", "]", "\n", "# Check whether the batch size of each validation data is 1", "\n", "assert", "val_data", "[", "'SuperLQs'", "]", ".", "size", "(", "0", ")", "==", "1", "\n", "\n", "if", "opt", "[", "'network_G'", "]", "[", "'which_model_G'", "]", "==", "'TOF'", ":", "\n", "                                    ", "LQs", "=", "meta_test_data", "[", "'LQs'", "]", "\n", "B", ",", "T", ",", "C", ",", "H", ",", "W", "=", "LQs", ".", "shape", "\n", "LQs", "=", "LQs", ".", "reshape", "(", "B", "*", "T", ",", "C", ",", "H", ",", "W", ")", "\n", "Bic_LQs", "=", "F", ".", "interpolate", "(", "LQs", ",", "scale_factor", "=", "opt", "[", "'scale'", "]", ",", "mode", "=", "'bicubic'", ",", "align_corners", "=", "True", ")", "\n", "meta_test_data", "[", "'LQs'", "]", "=", "Bic_LQs", ".", "reshape", "(", "B", ",", "T", ",", "C", ",", "H", "*", "opt", "[", "'scale'", "]", ",", "W", "*", "opt", "[", "'scale'", "]", ")", "\n", "\n", "#modelcp.netG = deepcopy(model.netG)", "\n", "", "modelcp", ".", "netG", ",", "est_modelcp", ".", "netE", "=", "deepcopy", "(", "model", ".", "netG", ")", ",", "deepcopy", "(", "est_model", ".", "netE", ")", "\n", "\n", "optim_params", "=", "[", "]", "\n", "\n", "sr_params", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "modelcp", ".", "netG", ".", "named_parameters", "(", ")", ":", "\n", "                                    ", "if", "v", ".", "requires_grad", ":", "\n", "                                        ", "sr_params", ".", "append", "(", "v", ")", "\n", "\n", "", "", "est_params", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "est_modelcp", ".", "netE", ".", "named_parameters", "(", ")", ":", "\n", "                                    ", "if", "v", ".", "requires_grad", ":", "\n", "                                        ", "est_params", ".", "append", "(", "v", ")", "\n", "\n", "", "", "optim_params", "=", "[", "\n", "{", "# add normal params first", "\n", "'params'", ":", "sr_params", ",", "\n", "'lr'", ":", "lr_alpha", "\n", "}", ",", "\n", "{", "\n", "'params'", ":", "est_params", ",", "\n", "'lr'", ":", "lr_alpha_est", "\n", "}", ",", "\n", "]", "\n", "\n", "if", "opt", "[", "'train'", "]", "[", "'maml'", "]", "[", "'optimizer'", "]", "==", "'Adam'", ":", "\n", "                                    ", "inner_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "optim_params", ",", "lr", "=", "lr_alpha", ",", "\n", "betas", "=", "(", "\n", "opt", "[", "'train'", "]", "[", "'maml'", "]", "[", "'beta1'", "]", ",", "opt", "[", "'train'", "]", "[", "'maml'", "]", "[", "'beta2'", "]", ")", ")", "\n", "", "elif", "opt", "[", "'train'", "]", "[", "'maml'", "]", "[", "'optimizer'", "]", "==", "'SGD'", ":", "\n", "                                    ", "inner_optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "optim_params", ",", "lr", "=", "lr_alpha", ")", "\n", "", "else", ":", "\n", "                                    ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "#if opt['train']['maml']['optimizer'] == 'Adam':", "\n", "#    inner_optimizer = torch.optim.Adam(modelcp.netG.parameters(), lr=lr_alpha,", "\n", "#                                      betas=(opt['train']['maml']['beta1'],", "\n", "#                                             opt['train']['maml']['beta2']))", "\n", "#elif opt['train']['maml']['optimizer'] == 'SGD':", "\n", "#    inner_optimizer = torch.optim.SGD(modelcp.netG.parameters(), lr=lr_alpha)", "\n", "#else:", "\n", "#    raise NotImplementedError()", "\n", "\n", "", "if", "max_idx", "<", "80", "or", "(", "idx_d", "<", "max_idx", "/", "2", "and", "max_idx", ">=", "80", ")", ":", "\n", "\n", "# Before start inner-update evaluate the PSNR init, PSNR start", "\n", "# Init (Before Meta update)", "\n", "                                    ", "if", "BICUBIC_EVALUATE", "[", "val_idx", "]", ":", "\n", "                                        ", "model_fixed", ".", "feed_data", "(", "meta_test_data", ")", "\n", "model_fixed", ".", "test", "(", ")", "\n", "model_fixed_visuals", "=", "model_fixed", ".", "get_current_visuals", "(", ")", "\n", "hr_image", "=", "util", ".", "tensor2img", "(", "model_fixed_visuals", "[", "'GT'", "]", ",", "mode", "=", "'rgb'", ")", "\n", "init_image", "=", "util", ".", "tensor2img", "(", "model_fixed_visuals", "[", "'rlt'", "]", ",", "mode", "=", "'rgb'", ")", "\n", "# Note : hr_image, init_image are RGB, [0,255], np.uint8", "\n", "# imageio.imwrite(os.path.join(train_folder, 'hr.png'), hr_image)", "\n", "# imageio.imwrite(os.path.join(train_folder, 'sr_init.png'), init_image)", "\n", "# Update PSNR init rlt", "\n", "psnr_bicubic", "=", "util", ".", "calculate_psnr", "(", "init_image", ",", "hr_image", ")", "\n", "psnr_rlt", "[", "0", "]", "[", "folder", "]", "[", "idx_d", "]", "=", "psnr_bicubic", "\n", "# Update SSIM init rlt", "\n", "# ssim_bicubic = util.calculate_ssim(init_image, hr_image)", "\n", "ssim_rlt", "[", "0", "]", "[", "folder", "]", "[", "idx_d", "]", "=", "0", "#ssim_bicubic", "\n", "\n", "", "else", ":", "\n", "                                        ", "psnr_rlt", "[", "0", "]", "[", "folder", "]", "[", "idx_d", "]", "=", "bicubic_performance", "[", "val_idx", "]", "[", "'psnr'", "]", "[", "folder", "]", "[", "idx_d", "]", "\n", "ssim_rlt", "[", "0", "]", "[", "folder", "]", "[", "idx_d", "]", "=", "bicubic_performance", "[", "val_idx", "]", "[", "'ssim'", "]", "[", "folder", "]", "[", "idx_d", "]", "\n", "\n", "\n", "#### Forward", "\n", "", "update_time", "=", "0", "\n", "# Before (After Meta update, Before Inner update)", "\n", "modelcp", ".", "feed_data", "(", "meta_test_data", ")", "\n", "modelcp", ".", "test", "(", ")", "\n", "model_start_visuals", "=", "modelcp", ".", "get_current_visuals", "(", "need_GT", "=", "True", ")", "\n", "hr_image", "=", "util", ".", "tensor2img", "(", "model_start_visuals", "[", "'GT'", "]", ",", "mode", "=", "'rgb'", ")", "\n", "start_image", "=", "util", ".", "tensor2img", "(", "model_start_visuals", "[", "'rlt'", "]", ",", "mode", "=", "'rgb'", ")", "\n", "# imageio.imwrite(os.path.join(train_folder, 'sr_start.png'), start_image)", "\n", "psnr_rlt", "[", "1", "]", "[", "folder", "]", "[", "idx_d", "]", "=", "util", ".", "calculate_psnr", "(", "start_image", ",", "hr_image", ")", "\n", "\n", "# Inner Loop Update", "\n", "st", "=", "time", ".", "time", "(", ")", "\n", "for", "i", "in", "range", "(", "update_step", ")", ":", "\n", "\n", "# Make SuperLR seq using UPDATED estimation model", "\n", "                                        ", "if", "not", "opt", "[", "'train'", "]", "[", "'use_real'", "]", ":", "\n", "                                            ", "est_modelcp", ".", "feed_data", "(", "val_data", ")", "\n", "#est_model.test()", "\n", "est_modelcp", ".", "forward_without_optim", "(", ")", "\n", "superlr_seq", "=", "est_modelcp", ".", "fake_L", "\n", "meta_train_data", "[", "'LQs'", "]", "=", "superlr_seq", "\n", "", "else", ":", "\n", "                                            ", "meta_train_data", "[", "'LQs'", "]", "=", "val_data", "[", "'SuperLQs'", "]", "\n", "\n", "", "if", "opt", "[", "'network_G'", "]", "[", "'which_model_G'", "]", "==", "'TOF'", ":", "\n", "# Bicubic upsample to match the size", "\n", "                                            ", "LQs", "=", "meta_train_data", "[", "'LQs'", "]", "\n", "B", ",", "T", ",", "C", ",", "H", ",", "W", "=", "LQs", ".", "shape", "\n", "LQs", "=", "LQs", ".", "reshape", "(", "B", "*", "T", ",", "C", ",", "H", ",", "W", ")", "\n", "Bic_LQs", "=", "F", ".", "interpolate", "(", "LQs", ",", "scale_factor", "=", "opt", "[", "'scale'", "]", ",", "mode", "=", "'bicubic'", ",", "align_corners", "=", "True", ")", "\n", "meta_train_data", "[", "'LQs'", "]", "=", "Bic_LQs", ".", "reshape", "(", "B", ",", "T", ",", "C", ",", "H", "*", "opt", "[", "'scale'", "]", ",", "W", "*", "opt", "[", "'scale'", "]", ")", "\n", "\n", "# Update both modelcp + estmodelcp jointly", "\n", "", "inner_optimizer", ".", "zero_grad", "(", ")", "\n", "if", "opt", "[", "'train'", "]", "[", "'maml'", "]", "[", "'use_patch'", "]", ":", "\n", "                                            ", "cropped_meta_train_data", "[", "'LQs'", "]", ",", "cropped_meta_train_data", "[", "'GT'", "]", "=", "crop", "(", "meta_train_data", "[", "'LQs'", "]", ",", "meta_train_data", "[", "'GT'", "]", ",", "\n", "opt", "[", "'train'", "]", "[", "'maml'", "]", "[", "'num_patch'", "]", ",", "\n", "opt", "[", "'train'", "]", "[", "'maml'", "]", "[", "'patch_size'", "]", ")", "\n", "modelcp", ".", "feed_data", "(", "cropped_meta_train_data", ")", "\n", "", "else", ":", "\n", "                                            ", "modelcp", ".", "feed_data", "(", "meta_train_data", ")", "\n", "\n", "", "loss_train", "=", "modelcp", ".", "calculate_loss", "(", ")", "\n", "## Add SLR pixelwise loss while training", "\n", "est_model_fixed", ".", "feed_data", "(", "val_data", ")", "\n", "est_model_fixed", ".", "test", "(", ")", "\n", "slr_initialized", "=", "est_model_fixed", ".", "fake_L", "\n", "slr_initialized", "=", "slr_initialized", ".", "to", "(", "'cuda'", ")", "\n", "\n", "if", "opt", "[", "'network_G'", "]", "[", "'which_model_G'", "]", "==", "'TOF'", ":", "\n", "                                            ", "loss_train", "+=", "F", ".", "l1_loss", "(", "LQs", ".", "to", "(", "'cuda'", ")", ",", "slr_initialized", ")", "\n", "", "else", ":", "\n", "                                            ", "loss_train", "+=", "F", ".", "l1_loss", "(", "meta_train_data", "[", "'LQs'", "]", ".", "to", "(", "'cuda'", ")", ",", "slr_initialized", ")", "\n", "\n", "", "loss_train", ".", "backward", "(", ")", "\n", "inner_optimizer", ".", "step", "(", ")", "\n", "\n", "", "et", "=", "time", ".", "time", "(", ")", "\n", "update_time", "=", "et", "-", "st", "\n", "\n", "modelcp", ".", "feed_data", "(", "meta_test_data", ")", "\n", "modelcp", ".", "test", "(", ")", "\n", "model_update_visuals", "=", "modelcp", ".", "get_current_visuals", "(", "need_GT", "=", "False", ")", "\n", "update_image", "=", "util", ".", "tensor2img", "(", "model_update_visuals", "[", "'rlt'", "]", ",", "mode", "=", "'rgb'", ")", "\n", "# Save and calculate final image", "\n", "# imageio.imwrite(os.path.join(train_folder, 'sr_finish.png'), update_image)", "\n", "psnr_rlt", "[", "2", "]", "[", "folder", "]", "[", "idx_d", "]", "=", "util", ".", "calculate_psnr", "(", "update_image", ",", "hr_image", ")", "\n", "ssim_rlt", "[", "1", "]", "[", "folder", "]", "[", "idx_d", "]", "=", "0", "#util.calculate_ssim(update_image, hr_image)", "\n", "\n", "if", "name", "in", "pd_log", ".", "index", ":", "\n", "                                        ", "pd_log", ".", "at", "[", "name", ",", "'PSNR_Init'", "]", "=", "psnr_rlt", "[", "0", "]", "[", "folder", "]", "[", "idx_d", "]", ".", "item", "(", ")", "\n", "pd_log", ".", "at", "[", "name", ",", "'PSNR_Start'", "]", "=", "(", "psnr_rlt", "[", "1", "]", "[", "folder", "]", "[", "idx_d", "]", "-", "psnr_rlt", "[", "0", "]", "[", "folder", "]", "[", "idx_d", "]", ")", ".", "item", "(", ")", "\n", "pd_log", ".", "at", "[", "name", ",", "'PSNR_Final({})'", ".", "format", "(", "update_step", ")", "]", "=", "(", "psnr_rlt", "[", "2", "]", "[", "folder", "]", "[", "idx_d", "]", "-", "psnr_rlt", "[", "0", "]", "[", "folder", "]", "[", "idx_d", "]", ")", ".", "item", "(", ")", "\n", "pd_log", ".", "at", "[", "name", ",", "'SSIM_Init'", "]", "=", "ssim_rlt", "[", "0", "]", "[", "folder", "]", "[", "idx_d", "]", ".", "item", "(", ")", "\n", "pd_log", ".", "at", "[", "name", ",", "'SSIM_Final'", "]", "=", "ssim_rlt", "[", "1", "]", "[", "folder", "]", "[", "idx_d", "]", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "                                        ", "pd_log", ".", "loc", "[", "name", "]", "=", "[", "psnr_rlt", "[", "0", "]", "[", "folder", "]", "[", "idx_d", "]", ".", "item", "(", ")", ",", "\n", "psnr_rlt", "[", "1", "]", "[", "folder", "]", "[", "idx_d", "]", ".", "item", "(", ")", "-", "psnr_rlt", "[", "0", "]", "[", "folder", "]", "[", "idx_d", "]", ".", "item", "(", ")", ",", "\n", "psnr_rlt", "[", "2", "]", "[", "folder", "]", "[", "idx_d", "]", ".", "item", "(", ")", "-", "psnr_rlt", "[", "0", "]", "[", "folder", "]", "[", "idx_d", "]", ".", "item", "(", ")", ",", "\n", "ssim_rlt", "[", "0", "]", "[", "folder", "]", "[", "idx_d", "]", ".", "item", "(", ")", ",", "ssim_rlt", "[", "1", "]", "[", "folder", "]", "[", "idx_d", "]", ".", "item", "(", ")", "]", "\n", "\n", "", "pd_log", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "'../results'", ",", "folder_name", ",", "'psnr_update_{}.csv'", ".", "format", "(", "val_idx", ")", ")", ")", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "                                        ", "for", "_", "in", "range", "(", "world_size", ")", ":", "\n", "                                            ", "pbar", ".", "update", "(", "'Test {} - {}/{}: I: {:.3f}/{:.4f} \\tF+: {:.3f}/{:.4f} \\tTime: {:.3f}s'", "\n", ".", "format", "(", "folder", ",", "idx_d", ",", "max_idx", ",", "\n", "psnr_rlt", "[", "0", "]", "[", "folder", "]", "[", "idx_d", "]", ".", "item", "(", ")", ",", "ssim_rlt", "[", "0", "]", "[", "folder", "]", "[", "idx_d", "]", ".", "item", "(", ")", ",", "\n", "psnr_rlt", "[", "2", "]", "[", "folder", "]", "[", "idx_d", "]", ".", "item", "(", ")", ",", "ssim_rlt", "[", "1", "]", "[", "folder", "]", "[", "idx_d", "]", ".", "item", "(", ")", ",", "\n", "update_time", "\n", ")", ")", "\n", "\n", "\n", "", "", "", "", "if", "BICUBIC_EVALUATE", "[", "val_idx", "]", ":", "\n", "                                ", "bicubic_performance", "[", "val_idx", "]", "=", "{", "}", "\n", "bicubic_performance", "[", "val_idx", "]", "[", "'psnr'", "]", "=", "deepcopy", "(", "psnr_rlt", "[", "0", "]", ")", "\n", "bicubic_performance", "[", "val_idx", "]", "[", "'ssim'", "]", "=", "deepcopy", "(", "ssim_rlt", "[", "0", "]", ")", "\n", "BICUBIC_EVALUATE", "[", "val_idx", "]", "=", "False", "\n", "\n", "## collect data", "\n", "", "for", "i", "in", "range", "(", "len", "(", "psnr_rlt", ")", ")", ":", "\n", "                                ", "for", "_", ",", "v", "in", "psnr_rlt", "[", "i", "]", ".", "items", "(", ")", ":", "\n", "                                    ", "dist", ".", "reduce", "(", "v", ",", "0", ")", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "ssim_rlt", ")", ")", ":", "\n", "                                ", "for", "_", ",", "v", "in", "ssim_rlt", "[", "i", "]", ".", "items", "(", ")", ":", "\n", "                                    ", "dist", ".", "reduce", "(", "v", ",", "0", ")", "\n", "", "", "dist", ".", "barrier", "(", ")", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "                                ", "psnr_rlt_avg", "=", "{", "}", "\n", "psnr_total_avg", "=", "[", "0.", ",", "0.", ",", "0.", "]", "\n", "# 0: Init, 1: Start, 2: Final", "\n", "#Just calculate the final value of psnr_rlt(i.e. psnr_rlt[2])", "\n", "for", "k", ",", "v_init", "in", "psnr_rlt", "[", "0", "]", ".", "items", "(", ")", ":", "\n", "                                    ", "v_start", "=", "psnr_rlt", "[", "1", "]", "[", "k", "]", "\n", "v_final", "=", "psnr_rlt", "[", "2", "]", "[", "k", "]", "\n", "psnr_rlt_avg", "[", "k", "]", "=", "[", "torch", ".", "sum", "(", "v_init", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", "/", "(", "v_init", "!=", "0", ")", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "\n", "torch", ".", "sum", "(", "v_start", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", "/", "(", "v_start", "!=", "0", ")", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "\n", "torch", ".", "sum", "(", "v_final", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", "/", "(", "v_final", "!=", "0", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "psnr_rlt", ")", ")", ":", "\n", "                                        ", "psnr_total_avg", "[", "i", "]", "+=", "psnr_rlt_avg", "[", "k", "]", "[", "i", "]", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "psnr_rlt", ")", ")", ":", "\n", "                                    ", "psnr_total_avg", "[", "i", "]", "/=", "len", "(", "psnr_rlt", "[", "0", "]", ")", "\n", "", "log_s", "=", "'# Validation # Final PSNR: {:.4e}:'", ".", "format", "(", "psnr_total_avg", "[", "2", "]", ")", "\n", "for", "k", ",", "v", "in", "psnr_rlt_avg", ".", "items", "(", ")", ":", "\n", "                                    ", "log_s", "+=", "' {}: {:.4e}'", ".", "format", "(", "k", ",", "v", "[", "2", "]", ")", "\n", "", "logger", ".", "info", "(", "log_s", ")", "\n", "if", "opt", "[", "'use_tb_logger'", "]", "and", "'debug'", "not", "in", "opt", "[", "'name'", "]", ":", "\n", "                                    ", "tb_logger", ".", "add_scalar", "(", "'psnr_avg_{}_0:init'", ".", "format", "(", "val_idx", ")", ",", "psnr_total_avg", "[", "0", "]", ",", "current_step", ")", "\n", "tb_logger", ".", "add_scalar", "(", "'psnr_avg_{}_1:start'", ".", "format", "(", "val_idx", ")", ",", "psnr_total_avg", "[", "1", "]", ",", "current_step", ")", "\n", "tb_logger", ".", "add_scalar", "(", "'psnr_avg_{}_2:final'", ".", "format", "(", "val_idx", ")", ",", "psnr_total_avg", "[", "2", "]", ",", "current_step", ")", "\n", "\n", "for", "k", ",", "v", "in", "psnr_rlt_avg", ".", "items", "(", ")", ":", "\n", "                                        ", "tb_logger", ".", "add_scalar", "(", "k", "+", "'_psnr_avg_{}_0:init'", ".", "format", "(", "val_idx", ")", ",", "v", "[", "0", "]", ",", "current_step", ")", "\n", "tb_logger", ".", "add_scalar", "(", "k", "+", "'_psnr_avg_{}_1:start'", ".", "format", "(", "val_idx", ")", ",", "v", "[", "1", "]", ",", "current_step", ")", "\n", "tb_logger", ".", "add_scalar", "(", "k", "+", "'_psnr_avg_{}_2:final'", ".", "format", "(", "val_idx", ")", ",", "v", "[", "2", "]", ",", "current_step", ")", "\n", "", "", "'''\n                                ssim_rlt_avg = {}\n                                ssim_total_avg = 0.\n                                #Just calculate the final value of ssim_rlt(i.e. ssim_rlt[1])\n                                for k, v in ssim_rlt[1].items():\n                                    ssim_rlt_avg[k] = torch.sum(v).cpu().item() / (v!=0).sum().item()\n                                    ssim_total_avg += ssim_rlt_avg[k]\n                                ssim_total_avg /= len(ssim_rlt[1])\n                                log_s = '# Validation # SSIM: {:.4e}:'.format(ssim_total_avg)\n                                for k, v in ssim_rlt_avg.items():\n                                    log_s += ' {}: {:.4e}'.format(k, v)\n                                logger.info(log_s)\n                                if opt['use_tb_logger'] and 'debug' not in opt['name']:\n                                    tb_logger.add_scalar('ssim_avg', ssim_total_avg, current_step)\n                                    for k, v in ssim_rlt_avg.items():\n                                        tb_logger.add_scalar(k+'ssim_avg', v, current_step)\n                                '''", "\n", "\n", "", "", "", "else", ":", "\n", "# Single GPU", "\n", "                        ", "for", "val_idx", ",", "val_set_frag", "in", "enumerate", "(", "val_set", ")", ":", "\n", "# PSNR_rlt: psnr_init, psnr_before, psnr_after", "\n", "                            ", "psnr_rlt", "=", "[", "{", "}", ",", "{", "}", ",", "{", "}", "]", "\n", "# SSIM_rlt: ssim_init, ssim_after", "\n", "ssim_rlt", "=", "[", "{", "}", ",", "{", "}", "]", "\n", "pbar", "=", "util", ".", "ProgressBar", "(", "len", "(", "val_set_frag", ")", ")", "\n", "for", "val_data", "in", "val_loader", "[", "val_idx", "]", ":", "\n", "                                ", "folder", "=", "val_data", "[", "'folder'", "]", "[", "0", "]", "\n", "idx_d", ",", "max_idx", "=", "int", "(", "val_data", "[", "'idx'", "]", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "0", "]", ")", ",", "int", "(", "val_data", "[", "'idx'", "]", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "1", "]", ")", "\n", "if", "'name'", "in", "val_data", ".", "keys", "(", ")", ":", "\n", "                                    ", "name", "=", "val_data", "[", "'name'", "]", "[", "0", "]", "[", "center_idx", "]", "[", "0", "]", "\n", "", "else", ":", "\n", "                                    ", "name", "=", "'{}/{:08d}'", ".", "format", "(", "folder", ",", "idx_d", ")", "\n", "\n", "", "train_folder", "=", "os", ".", "path", ".", "join", "(", "'../results'", ",", "opt", "[", "'name'", "]", ",", "name", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "train_folder", ")", ":", "\n", "                                    ", "os", ".", "makedirs", "(", "train_folder", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "psnr_rlt", ")", ")", ":", "\n", "                                    ", "if", "psnr_rlt", "[", "i", "]", ".", "get", "(", "folder", ",", "None", ")", "is", "None", ":", "\n", "                                        ", "psnr_rlt", "[", "i", "]", "[", "folder", "]", "=", "torch", ".", "zeros", "(", "max_idx", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "'cuda'", ")", "\n", "#psnr_rlt[i][folder] = []", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "ssim_rlt", ")", ")", ":", "\n", "                                    ", "if", "ssim_rlt", "[", "i", "]", ".", "get", "(", "folder", ",", "None", ")", "is", "None", ":", "\n", "                                        ", "ssim_rlt", "[", "i", "]", "[", "folder", "]", "=", "torch", ".", "zeros", "(", "max_idx", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "'cuda'", ")", "\n", "#ssim_rlt[i][folder] = []", "\n", "\n", "", "", "cropped_meta_train_data", "=", "{", "}", "\n", "meta_train_data", "=", "{", "}", "\n", "meta_test_data", "=", "{", "}", "\n", "\n", "# Make SuperLR seq using estimation model", "\n", "'''if not opt['train']['use_real']:\n                                    est_model.feed_data(val_data)\n                                    #est_model.test()\n                                    est_model.forward_without_optim()\n                                    superlr_seq = est_model.fake_L\n                                    meta_train_data['LQs'] = superlr_seq\n                                else:\n                                    meta_train_data['LQs'] = val_data['SuperLQs']\n                                '''", "\n", "meta_train_data", "[", "'GT'", "]", "=", "val_data", "[", "'LQs'", "]", "[", ":", ",", "center_idx", "]", "\n", "meta_test_data", "[", "'LQs'", "]", "=", "val_data", "[", "'LQs'", "]", "[", "0", ":", "1", "]", "\n", "meta_test_data", "[", "'GT'", "]", "=", "val_data", "[", "'GT'", "]", "[", "0", ":", "1", ",", "center_idx", "]", "\n", "# Check whether the batch size of each validation data is 1", "\n", "assert", "val_data", "[", "'SuperLQs'", "]", ".", "size", "(", "0", ")", "==", "1", "\n", "\n", "if", "opt", "[", "'network_G'", "]", "[", "'which_model_G'", "]", "==", "'TOF'", ":", "\n", "                                    ", "LQs", "=", "meta_test_data", "[", "'LQs'", "]", "\n", "B", ",", "T", ",", "C", ",", "H", ",", "W", "=", "LQs", ".", "shape", "\n", "LQs", "=", "LQs", ".", "reshape", "(", "B", "*", "T", ",", "C", ",", "H", ",", "W", ")", "\n", "Bic_LQs", "=", "F", ".", "interpolate", "(", "LQs", ",", "scale_factor", "=", "opt", "[", "'scale'", "]", ",", "mode", "=", "'bicubic'", ",", "align_corners", "=", "True", ")", "\n", "meta_test_data", "[", "'LQs'", "]", "=", "Bic_LQs", ".", "reshape", "(", "B", ",", "T", ",", "C", ",", "H", "*", "opt", "[", "'scale'", "]", ",", "W", "*", "opt", "[", "'scale'", "]", ")", "\n", "\n", "#modelcp.netG = deepcopy(model.netG)", "\n", "", "modelcp", ".", "netG", ",", "est_modelcp", ".", "netE", "=", "deepcopy", "(", "model", ".", "netG", ")", ",", "deepcopy", "(", "est_model", ".", "netE", ")", "\n", "optim_params", "=", "[", "]", "\n", "\n", "sr_params", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "modelcp", ".", "netG", ".", "named_parameters", "(", ")", ":", "\n", "                                    ", "if", "v", ".", "requires_grad", ":", "\n", "                                        ", "sr_params", ".", "append", "(", "v", ")", "\n", "\n", "", "", "est_params", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "est_modelcp", ".", "netE", ".", "named_parameters", "(", ")", ":", "\n", "                                    ", "if", "v", ".", "requires_grad", ":", "\n", "                                        ", "est_params", ".", "append", "(", "v", ")", "\n", "\n", "", "", "optim_params", "=", "[", "\n", "{", "# add normal params first", "\n", "'params'", ":", "sr_params", ",", "\n", "'lr'", ":", "lr_alpha", "\n", "}", ",", "\n", "{", "\n", "'params'", ":", "est_params", ",", "\n", "'lr'", ":", "lr_alpha_est", "\n", "}", ",", "\n", "]", "\n", "\n", "if", "opt", "[", "'train'", "]", "[", "'maml'", "]", "[", "'optimizer'", "]", "==", "'Adam'", ":", "\n", "                                    ", "inner_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "optim_params", ",", "lr", "=", "lr_alpha", ",", "\n", "betas", "=", "(", "\n", "opt", "[", "'train'", "]", "[", "'maml'", "]", "[", "'beta1'", "]", ",", "opt", "[", "'train'", "]", "[", "'maml'", "]", "[", "'beta2'", "]", ")", ")", "\n", "", "elif", "opt", "[", "'train'", "]", "[", "'maml'", "]", "[", "'optimizer'", "]", "==", "'SGD'", ":", "\n", "                                    ", "inner_optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "optim_params", ",", "lr", "=", "lr_alpha", ")", "\n", "", "else", ":", "\n", "                                    ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "#if opt['train']['maml']['optimizer'] == 'Adam':", "\n", "#    inner_optimizer = torch.optim.Adam(modelcp.netG.parameters(), lr=lr_alpha,", "\n", "#                                      betas=(opt['train']['maml']['beta1'],", "\n", "#                                             opt['train']['maml']['beta2']))", "\n", "#elif opt['train']['maml']['optimizer'] == 'SGD':", "\n", "#    inner_optimizer = torch.optim.SGD(modelcp.netG.parameters(), lr=lr_alpha)", "\n", "#else:", "\n", "#    raise NotImplementedError()", "\n", "\n", "", "if", "max_idx", "<", "80", "or", "(", "idx_d", "<", "max_idx", "/", "2", "and", "max_idx", ">=", "80", ")", ":", "\n", "\n", "# Before start inner-update evaluate the PSNR init, PSNR start", "\n", "# Init (Before Meta update)", "\n", "                                    ", "if", "BICUBIC_EVALUATE", "[", "val_idx", "]", ":", "\n", "                                        ", "model_fixed", ".", "feed_data", "(", "meta_test_data", ")", "\n", "model_fixed", ".", "test", "(", ")", "\n", "model_fixed_visuals", "=", "model_fixed", ".", "get_current_visuals", "(", ")", "\n", "hr_image", "=", "util", ".", "tensor2img", "(", "model_fixed_visuals", "[", "'GT'", "]", ",", "mode", "=", "'rgb'", ")", "\n", "init_image", "=", "util", ".", "tensor2img", "(", "model_fixed_visuals", "[", "'rlt'", "]", ",", "mode", "=", "'rgb'", ")", "\n", "# Note : hr_image, init_image are RGB, [0,255], np.uint8", "\n", "# imageio.imwrite(os.path.join(train_folder, 'hr.png'), hr_image)", "\n", "# imageio.imwrite(os.path.join(train_folder, 'sr_init.png'), init_image)", "\n", "# Update PSNR init rlt", "\n", "psnr_bicubic", "=", "util", ".", "calculate_psnr", "(", "init_image", ",", "hr_image", ")", "\n", "psnr_rlt", "[", "0", "]", "[", "folder", "]", "[", "idx_d", "]", "=", "psnr_bicubic", "\n", "# Update SSIM init rlt", "\n", "# ssim_bicubic = util.calculate_ssim(init_image, hr_image)", "\n", "ssim_rlt", "[", "0", "]", "[", "folder", "]", "[", "idx_d", "]", "=", "0.1", "#ssim_bicubic", "\n", "\n", "", "else", ":", "\n", "                                        ", "psnr_rlt", "[", "0", "]", "[", "folder", "]", "[", "idx_d", "]", "=", "bicubic_performance", "[", "val_idx", "]", "[", "'psnr'", "]", "[", "folder", "]", "[", "idx_d", "]", "\n", "ssim_rlt", "[", "0", "]", "[", "folder", "]", "[", "idx_d", "]", "=", "bicubic_performance", "[", "val_idx", "]", "[", "'ssim'", "]", "[", "folder", "]", "[", "idx_d", "]", "\n", "\n", "\n", "#### Forward", "\n", "", "update_time", "=", "0", "\n", "# Before (After Meta update, Before Inner update)", "\n", "modelcp", ".", "feed_data", "(", "meta_test_data", ")", "\n", "modelcp", ".", "test", "(", ")", "\n", "model_start_visuals", "=", "modelcp", ".", "get_current_visuals", "(", "need_GT", "=", "True", ")", "\n", "hr_image", "=", "util", ".", "tensor2img", "(", "model_start_visuals", "[", "'GT'", "]", ",", "mode", "=", "'rgb'", ")", "\n", "start_image", "=", "util", ".", "tensor2img", "(", "model_start_visuals", "[", "'rlt'", "]", ",", "mode", "=", "'rgb'", ")", "\n", "# imageio.imwrite(os.path.join(train_folder, 'sr_start.png'), start_image)", "\n", "psnr_rlt", "[", "1", "]", "[", "folder", "]", "[", "idx_d", "]", "=", "util", ".", "calculate_psnr", "(", "start_image", ",", "hr_image", ")", "\n", "\n", "# Inner Loop Update", "\n", "st", "=", "time", ".", "time", "(", ")", "\n", "for", "i", "in", "range", "(", "update_step", ")", ":", "\n", "\n", "# Make SuperLR seq using UPDATED estimation model", "\n", "                                        ", "if", "not", "opt", "[", "'train'", "]", "[", "'use_real'", "]", ":", "\n", "                                            ", "est_modelcp", ".", "feed_data", "(", "val_data", ")", "\n", "#est_model.test()", "\n", "est_modelcp", ".", "forward_without_optim", "(", ")", "\n", "superlr_seq", "=", "est_modelcp", ".", "fake_L", "\n", "meta_train_data", "[", "'LQs'", "]", "=", "superlr_seq", "\n", "", "else", ":", "\n", "                                            ", "meta_train_data", "[", "'LQs'", "]", "=", "val_data", "[", "'SuperLQs'", "]", "\n", "\n", "", "if", "opt", "[", "'network_G'", "]", "[", "'which_model_G'", "]", "==", "'TOF'", ":", "\n", "# Bicubic upsample to match the size", "\n", "                                            ", "LQs", "=", "meta_train_data", "[", "'LQs'", "]", "\n", "B", ",", "T", ",", "C", ",", "H", ",", "W", "=", "LQs", ".", "shape", "\n", "LQs", "=", "LQs", ".", "reshape", "(", "B", "*", "T", ",", "C", ",", "H", ",", "W", ")", "\n", "Bic_LQs", "=", "F", ".", "interpolate", "(", "LQs", ",", "scale_factor", "=", "opt", "[", "'scale'", "]", ",", "mode", "=", "'bicubic'", ",", "align_corners", "=", "True", ")", "\n", "meta_train_data", "[", "'LQs'", "]", "=", "Bic_LQs", ".", "reshape", "(", "B", ",", "T", ",", "C", ",", "H", "*", "opt", "[", "'scale'", "]", ",", "W", "*", "opt", "[", "'scale'", "]", ")", "\n", "\n", "# Update both modelcp + estmodelcp jointly", "\n", "", "inner_optimizer", ".", "zero_grad", "(", ")", "\n", "if", "opt", "[", "'train'", "]", "[", "'maml'", "]", "[", "'use_patch'", "]", ":", "\n", "                                            ", "cropped_meta_train_data", "[", "'LQs'", "]", ",", "cropped_meta_train_data", "[", "'GT'", "]", "=", "crop", "(", "meta_train_data", "[", "'LQs'", "]", ",", "meta_train_data", "[", "'GT'", "]", ",", "\n", "opt", "[", "'train'", "]", "[", "'maml'", "]", "[", "'num_patch'", "]", ",", "\n", "opt", "[", "'train'", "]", "[", "'maml'", "]", "[", "'patch_size'", "]", ")", "\n", "modelcp", ".", "feed_data", "(", "cropped_meta_train_data", ")", "\n", "", "else", ":", "\n", "                                            ", "modelcp", ".", "feed_data", "(", "meta_train_data", ")", "\n", "\n", "", "loss_train", "=", "modelcp", ".", "calculate_loss", "(", ")", "\n", "\n", "## Add SLR pixelwise loss while training", "\n", "est_model_fixed", ".", "feed_data", "(", "val_data", ")", "\n", "est_model_fixed", ".", "test", "(", ")", "\n", "slr_initialized", "=", "est_model_fixed", ".", "fake_L", "\n", "slr_initialized", "=", "slr_initialized", ".", "to", "(", "'cuda'", ")", "\n", "\n", "if", "opt", "[", "'network_G'", "]", "[", "'which_model_G'", "]", "==", "'TOF'", ":", "\n", "                                            ", "loss_train", "+=", "F", ".", "l1_loss", "(", "LQs", ".", "to", "(", "'cuda'", ")", ",", "slr_initialized", ")", "\n", "", "else", ":", "\n", "                                            ", "loss_train", "+=", "F", ".", "l1_loss", "(", "meta_train_data", "[", "'LQs'", "]", ".", "to", "(", "'cuda'", ")", ",", "slr_initialized", ")", "\n", "", "loss_train", ".", "backward", "(", ")", "\n", "inner_optimizer", ".", "step", "(", ")", "\n", "\n", "", "et", "=", "time", ".", "time", "(", ")", "\n", "update_time", "=", "et", "-", "st", "\n", "\n", "modelcp", ".", "feed_data", "(", "meta_test_data", ")", "\n", "modelcp", ".", "test", "(", ")", "\n", "model_update_visuals", "=", "modelcp", ".", "get_current_visuals", "(", "need_GT", "=", "False", ")", "\n", "update_image", "=", "util", ".", "tensor2img", "(", "model_update_visuals", "[", "'rlt'", "]", ",", "mode", "=", "'rgb'", ")", "\n", "# Save and calculate final image", "\n", "# imageio.imwrite(os.path.join(train_folder, 'sr_finish.png'), update_image)", "\n", "psnr_rlt", "[", "2", "]", "[", "folder", "]", "[", "idx_d", "]", "=", "util", ".", "calculate_psnr", "(", "update_image", ",", "hr_image", ")", "\n", "ssim_rlt", "[", "1", "]", "[", "folder", "]", "[", "idx_d", "]", "=", "0.11", "#util.calculate_ssim(update_image, hr_image)", "\n", "\n", "if", "name", "in", "pd_log", ".", "index", ":", "\n", "                                        ", "pd_log", ".", "at", "[", "name", ",", "'PSNR_Init'", "]", "=", "psnr_rlt", "[", "0", "]", "[", "folder", "]", "[", "idx_d", "]", ".", "item", "(", ")", "\n", "pd_log", ".", "at", "[", "name", ",", "'PSNR_Start'", "]", "=", "(", "psnr_rlt", "[", "1", "]", "[", "folder", "]", "[", "idx_d", "]", "-", "psnr_rlt", "[", "0", "]", "[", "folder", "]", "[", "idx_d", "]", ")", ".", "item", "(", ")", "\n", "pd_log", ".", "at", "[", "name", ",", "'PSNR_Final({})'", ".", "format", "(", "update_step", ")", "]", "=", "(", "psnr_rlt", "[", "2", "]", "[", "folder", "]", "[", "idx_d", "]", "-", "psnr_rlt", "[", "0", "]", "[", "folder", "]", "[", "idx_d", "]", ")", ".", "item", "(", ")", "\n", "pd_log", ".", "at", "[", "name", ",", "'SSIM_Init'", "]", "=", "ssim_rlt", "[", "0", "]", "[", "folder", "]", "[", "idx_d", "]", ".", "item", "(", ")", "\n", "pd_log", ".", "at", "[", "name", ",", "'SSIM_Final'", "]", "=", "ssim_rlt", "[", "1", "]", "[", "folder", "]", "[", "idx_d", "]", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "                                        ", "pd_log", ".", "loc", "[", "name", "]", "=", "[", "psnr_rlt", "[", "0", "]", "[", "folder", "]", "[", "idx_d", "]", ".", "item", "(", ")", ",", "\n", "psnr_rlt", "[", "1", "]", "[", "folder", "]", "[", "idx_d", "]", ".", "item", "(", ")", "-", "psnr_rlt", "[", "0", "]", "[", "folder", "]", "[", "idx_d", "]", ".", "item", "(", ")", ",", "\n", "psnr_rlt", "[", "2", "]", "[", "folder", "]", "[", "idx_d", "]", ".", "item", "(", ")", "-", "psnr_rlt", "[", "0", "]", "[", "folder", "]", "[", "idx_d", "]", ".", "item", "(", ")", ",", "\n", "ssim_rlt", "[", "0", "]", "[", "folder", "]", "[", "idx_d", "]", ".", "item", "(", ")", ",", "ssim_rlt", "[", "1", "]", "[", "folder", "]", "[", "idx_d", "]", ".", "item", "(", ")", "]", "\n", "\n", "", "pd_log", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "'../results'", ",", "folder_name", ",", "'psnr_update_{}.csv'", ".", "format", "(", "val_idx", ")", ")", ")", "\n", "\n", "pbar", ".", "update", "(", "'Test {} - {}/{}: I: {:.3f}/{:.4f} \\tF+: {:.3f}/{:.4f} \\tTime: {:.3f}s'", "\n", ".", "format", "(", "folder", ",", "idx_d", ",", "max_idx", ",", "\n", "psnr_rlt", "[", "0", "]", "[", "folder", "]", "[", "idx_d", "]", ".", "item", "(", ")", ",", "ssim_rlt", "[", "0", "]", "[", "folder", "]", "[", "idx_d", "]", ".", "item", "(", ")", ",", "\n", "psnr_rlt", "[", "2", "]", "[", "folder", "]", "[", "idx_d", "]", ".", "item", "(", ")", ",", "ssim_rlt", "[", "1", "]", "[", "folder", "]", "[", "idx_d", "]", ".", "item", "(", ")", ",", "\n", "update_time", "\n", ")", ")", "\n", "\n", "\n", "", "", "if", "BICUBIC_EVALUATE", "[", "val_idx", "]", ":", "\n", "                                ", "bicubic_performance", "[", "val_idx", "]", "=", "{", "}", "\n", "bicubic_performance", "[", "val_idx", "]", "[", "'psnr'", "]", "=", "deepcopy", "(", "psnr_rlt", "[", "0", "]", ")", "\n", "bicubic_performance", "[", "val_idx", "]", "[", "'ssim'", "]", "=", "deepcopy", "(", "ssim_rlt", "[", "0", "]", ")", "\n", "BICUBIC_EVALUATE", "[", "val_idx", "]", "=", "False", "\n", "\n", "", "psnr_rlt_avg", "=", "{", "}", "\n", "psnr_total_avg", "=", "[", "0.", ",", "0.", ",", "0.", "]", "\n", "# 0: Init, 1: Start, 2: Final", "\n", "#Just calculate the final value of psnr_rlt(i.e. psnr_rlt[2])", "\n", "for", "k", ",", "v_init", "in", "psnr_rlt", "[", "0", "]", ".", "items", "(", ")", ":", "\n", "                                ", "v_start", "=", "psnr_rlt", "[", "1", "]", "[", "k", "]", "\n", "v_final", "=", "psnr_rlt", "[", "2", "]", "[", "k", "]", "\n", "psnr_rlt_avg", "[", "k", "]", "=", "[", "torch", ".", "sum", "(", "v_init", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", "/", "(", "v_init", "!=", "0", ")", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "\n", "torch", ".", "sum", "(", "v_start", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", "/", "(", "v_start", "!=", "0", ")", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "\n", "torch", ".", "sum", "(", "v_final", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", "/", "(", "v_final", "!=", "0", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "psnr_rlt", ")", ")", ":", "\n", "                                    ", "psnr_total_avg", "[", "i", "]", "+=", "psnr_rlt_avg", "[", "k", "]", "[", "i", "]", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "psnr_rlt", ")", ")", ":", "\n", "                                ", "psnr_total_avg", "[", "i", "]", "/=", "len", "(", "psnr_rlt", "[", "0", "]", ")", "\n", "", "log_s", "=", "'# Validation # Final PSNR: {:.4e}:'", ".", "format", "(", "psnr_total_avg", "[", "2", "]", ")", "\n", "for", "k", ",", "v", "in", "psnr_rlt_avg", ".", "items", "(", ")", ":", "\n", "                                ", "log_s", "+=", "' {}: {:.4e}'", ".", "format", "(", "k", ",", "v", "[", "2", "]", ")", "\n", "", "logger", ".", "info", "(", "log_s", ")", "\n", "if", "opt", "[", "'use_tb_logger'", "]", "and", "'debug'", "not", "in", "opt", "[", "'name'", "]", ":", "\n", "                                ", "tb_logger", ".", "add_scalar", "(", "'psnr_avg_{}_0:init'", ".", "format", "(", "val_idx", ")", ",", "psnr_total_avg", "[", "0", "]", ",", "current_step", ")", "\n", "tb_logger", ".", "add_scalar", "(", "'psnr_avg_{}_1:start'", ".", "format", "(", "val_idx", ")", ",", "psnr_total_avg", "[", "1", "]", ",", "current_step", ")", "\n", "tb_logger", ".", "add_scalar", "(", "'psnr_avg_{}_2:final'", ".", "format", "(", "val_idx", ")", ",", "psnr_total_avg", "[", "2", "]", ",", "current_step", ")", "\n", "\n", "for", "k", ",", "v", "in", "psnr_rlt_avg", ".", "items", "(", ")", ":", "\n", "                                    ", "tb_logger", ".", "add_scalar", "(", "k", "+", "'_psnr_avg_{}_0:init'", ".", "format", "(", "val_idx", ")", ",", "v", "[", "0", "]", ",", "current_step", ")", "\n", "tb_logger", ".", "add_scalar", "(", "k", "+", "'_psnr_avg_{}_1:start'", ".", "format", "(", "val_idx", ")", ",", "v", "[", "1", "]", ",", "current_step", ")", "\n", "tb_logger", ".", "add_scalar", "(", "k", "+", "'_psnr_avg_{}_2:final'", ".", "format", "(", "val_idx", ")", ",", "v", "[", "2", "]", ",", "current_step", ")", "\n", "", "", "'''\n                            psnr_rlt_avg = {}\n                            psnr_total_avg = 0.\n                            # Just calculate the final value of psnr_rlt(i.e. psnr_rlt[2])\n                            for k, v in psnr_rlt[2].items():\n                                psnr_rlt_avg[k] = torch.sum(v).cpu().item() / (v != 0).sum().item()\n                                psnr_total_avg += psnr_rlt_avg[k]\n                            psnr_total_avg /= len(psnr_rlt)\n                            log_s = '# Validation # PSNR: {:.4e}:'.format(psnr_total_avg)\n                            for k, v in psnr_rlt_avg.items():\n                                log_s += ' {}: {:.4e}'.format(k, v)\n                            logger.info(log_s)\n                            if opt['use_tb_logger'] and 'debug' not in opt['name']:\n                                tb_logger.add_scalar('psnr_avg', psnr_total_avg, current_step)\n                                for k, v in psnr_rlt_avg.items():\n                                    tb_logger.add_scalar(k, v, current_step)\n\n                            ssim_rlt_avg = {}\n                            ssim_total_avg = 0.\n                            # Just calculate the final value of ssim_rlt(i.e. ssim_rlt[1])\n                            for k, v in ssim_rlt[1].items():\n                                ssim_rlt_avg[k] = torch.sum(v).cpu().item() / (v != 0).sum().item()\n                                ssim_total_avg += ssim_rlt_avg[k]\n                            ssim_total_avg /= len(ssim_rlt)\n                            log_s = '# Validation # SSIM: {:.4e}:'.format(ssim_total_avg)\n                            for k, v in ssim_rlt_avg.items():\n                                log_s += ' {}: {:.4e}'.format(k, v)\n                            logger.info(log_s)\n                            if opt['use_tb_logger'] and 'debug' not in opt['name']:\n                                tb_logger.add_scalar('ssim_avg', ssim_total_avg, current_step)\n                                for k, v in ssim_rlt_avg.items():\n                                    tb_logger.add_scalar(k, v, current_step)\n                            '''", "\n", "'''\n                            pbar = util.ProgressBar(len(val_loader))\n                            psnr_rlt = {}  # with border and center frames\n                            psnr_rlt_avg = {}\n                            psnr_total_avg = 0.\n                            for val_data in val_loader:\n                                folder = val_data['folder'][0]\n                                idx_d = val_data['idx'].item()\n                                # border = val_data['border'].item()\n                                if psnr_rlt.get(folder, None) is None:\n                                    psnr_rlt[folder] = []\n\n                                model.feed_data(val_data)\n                                model.test()\n                                visuals = model.get_current_visuals()\n                                rlt_img = util.tensor2img(visuals['rlt'])  # uint8\n                                gt_img = util.tensor2img(visuals['GT'])  # uint8\n\n                                # calculate PSNR\n                                psnr = util.calculate_psnr(rlt_img, gt_img)\n                                psnr_rlt[folder].append(psnr)\n                                pbar.update('Test {} - {}'.format(folder, idx_d))\n                            for k, v in psnr_rlt.items():\n                                psnr_rlt_avg[k] = sum(v) / len(v)\n                                psnr_total_avg += psnr_rlt_avg[k]\n                            psnr_total_avg /= len(psnr_rlt)\n                            log_s = '# Validation # PSNR: {:.4e}:'.format(psnr_total_avg)\n                            for k, v in psnr_rlt_avg.items():\n                                log_s += ' {}: {:.4e}'.format(k, v)\n                            logger.info(log_s)\n                            if opt['use_tb_logger'] and 'debug' not in opt['name']:\n                                tb_logger.add_scalar('psnr_avg', psnr_total_avg, current_step)\n                                for k, v in psnr_rlt_avg.items():\n                                    tb_logger.add_scalar(k, v, current_step)\n                            '''", "\n", "\n", "#### save models and training states", "\n", "", "", "", "", "if", "current_step", "%", "opt", "[", "'logger'", "]", "[", "'save_checkpoint_freq'", "]", "==", "0", ":", "\n", "                ", "if", "rank", "<=", "0", ":", "\n", "                    ", "logger", ".", "info", "(", "'Saving models and training states.'", ")", "\n", "model", ".", "save", "(", "current_step", ")", "\n", "model", ".", "save_training_state", "(", "epoch", ",", "current_step", ",", "model_type", "=", "'G'", ")", "\n", "est_model", ".", "save", "(", "current_step", ")", "\n", "est_model", ".", "save_training_state", "(", "epoch", ",", "current_step", ",", "model_type", "=", "'E'", ")", "\n", "\n", "", "", "", "", "if", "rank", "<=", "0", ":", "\n", "        ", "logger", ".", "info", "(", "'Saving the final model.'", ")", "\n", "model", ".", "save", "(", "'latest'", ")", "\n", "logger", ".", "info", "(", "'End of training.'", ")", "\n", "tb_logger", ".", "close", "(", ")", "\n", "\n", "", "logger", ".", "info", "(", "'Saving the final model.'", ")", "\n", "model", ".", "save", "(", "'latest'", ")", "\n", "logger", ".", "info", "(", "'End of training.'", ")", "\n", "tb_logger", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.codes.make_slr_images.main": [[20, 140], ["torch.device", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "data_modes.split", "range", "len", "os.join", "os.join", "os.join", "print", "print", "sorted", "LRest.DirectKernelEstimator_CMS.eval", "LRest.DirectKernelEstimator_CMS.to", "os.exists", "os.makedirs", "os.makedirs", "glob.glob", "float", "float", "float", "models.archs.LRimg_estimator.DirectKernelEstimatorVideo", "os.basename", "subfolder_name_l.append", "os.join", "sorted", "len", "data.read_img_seq", "NotImplementedError", "str", "str", "os.join", "models.archs.LRimg_estimator.DirectKernelEstimator_CMS", "LRest.DirectKernelEstimator_CMS.load_state_dict", "NotImplementedError", "LRest.DirectKernelEstimator_CMS.load_state_dict", "LRest.DirectKernelEstimator_CMS.load_state_dict", "os.exists", "os.mkdir", "os.mkdir", "glob.glob", "data_util.read_img_seq.split", "enumerate", "torch.load", "torch.load", "torch.load", "os.join", "img_batch.to.to", "data.index_generation", "data_util.read_img_seq.index_select().unsqueeze().to", "imgs_in.transpose.transpose", "str", "str", "torch.no_grad", "LRest.DirectKernelEstimator_CMS.", "img_lr_batch.astype.permute().cpu().numpy", "img_lr_batch.astype.astype", "os.splitext", "torch.no_grad", "LRest.DirectKernelEstimator_CMS.", "output.permute().cpu().numpy.squeeze", "output.permute().cpu().numpy.permute().cpu().numpy", "imageio.imwrite", "k.find", "k.find", "k.find", "k.find", "os.basename", "imageio.imwrite", "os.basename", "data_util.read_img_seq.index_select().unsqueeze", "os.join", "str", "img_lr_batch.astype.permute().cpu", "os.join", "output.permute().cpu().numpy.permute().cpu", "img_lr_batch.astype.clip", "data_util.read_img_seq.index_select", "img_lr_batch.astype.permute", "torch.LongTensor", "output.permute().cpu().numpy.permute", "output.permute().cpu().numpy.clip"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.read_img_seq", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.mkdir", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.mkdir", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.load", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.load", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.load", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.index_generation"], ["def", "main", "(", ")", ":", "\n", "#################", "\n", "# configurations", "\n", "#################", "\n", "    ", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "\n", "prog", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "prog", ".", "add_argument", "(", "'--dataset_mode'", ",", "'-m'", ",", "type", "=", "str", ",", "default", "=", "'Vid4+REDS'", ",", "help", "=", "'data_mode'", ")", "\n", "prog", ".", "add_argument", "(", "'--degradation_mode'", ",", "'-d'", ",", "type", "=", "str", ",", "default", "=", "'bicubic'", ",", "choices", "=", "(", "'impulse'", ",", "'bicubic'", ",", "'preset'", ")", ",", "help", "=", "'path to image output directory.'", ")", "\n", "prog", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'SFDN'", ",", "choices", "=", "(", "'SFDN'", ",", "'MFDN'", ")", ")", "\n", "prog", ".", "add_argument", "(", "'--sigma_x'", ",", "'-sx'", ",", "type", "=", "float", ",", "default", "=", "1", ",", "help", "=", "'sigma_x'", ")", "\n", "prog", ".", "add_argument", "(", "'--sigma_y'", ",", "'-sy'", ",", "type", "=", "float", ",", "default", "=", "0", ",", "help", "=", "'sigma_y'", ")", "\n", "prog", ".", "add_argument", "(", "'--theta'", ",", "'-t'", ",", "type", "=", "float", ",", "default", "=", "0", ",", "help", "=", "'theta'", ")", "\n", "prog", ".", "add_argument", "(", "'--scale'", ",", "'-sc'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "choices", "=", "(", "2", ",", "4", ")", ",", "help", "=", "'scale factor'", ")", "\n", "\n", "args", "=", "prog", ".", "parse_args", "(", ")", "\n", "\n", "data_modes", "=", "args", ".", "dataset_mode", "\n", "degradation_mode", "=", "args", ".", "degradation_mode", "# impulse | bicubic", "\n", "sig_x", ",", "sig_y", ",", "the", "=", "args", ".", "sigma_x", ",", "args", ".", "sigma_y", ",", "args", ".", "theta", "*", "math", ".", "pi", "/", "180", "\n", "if", "sig_y", "==", "0", ":", "\n", "        ", "sig_y", "=", "sig_x", "\n", "\n", "", "scale", "=", "args", ".", "scale", "\n", "kernel_size", "=", "21", "\n", "N_in", "=", "5", "\n", "\n", "data_mode_l", "=", "data_modes", ".", "split", "(", "'+'", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "data_mode_l", ")", ")", ":", "\n", "        ", "data_mode", "=", "data_mode_l", "[", "i", "]", "\n", "\n", "#### dataset", "\n", "if", "data_mode", "==", "'Vid4'", ":", "\n", "            ", "load_model", "=", "'Vimeo'", "\n", "kernel_folder", "=", "'../experiments/pretrained_models/Vid4Gauss.npy'", "\n", "dataset_folder", "=", "'../dataset/Vid4'", "\n", "", "elif", "data_mode", "==", "'REDS'", ":", "\n", "            ", "load_model", "=", "'REDS'", "\n", "kernel_folder", "=", "'../experiments/pretrained_models/REDSGauss.npy'", "\n", "dataset_folder", "=", "'../dataset/REDS/train'", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Only Vid4 and REDS are supporteds'", ")", "\n", "\n", "", "root_folder", "=", "osp", ".", "join", "(", "dataset_folder", ",", "'LR_'", "+", "degradation_mode", "+", "'_'", "+", "str", "(", "'{:.1f}'", ".", "format", "(", "sig_x", ")", ")", "+", "'_'", "+", "str", "(", "'{:.1f}'", ".", "format", "(", "sig_y", ")", ")", "+", "'_'", "+", "str", "(", "'{:.1f}'", ".", "format", "(", "args", ".", "theta", ")", ")", ")", "\n", "LR_dataset_folder", "=", "osp", ".", "join", "(", "root_folder", ",", "'X'", "+", "str", "(", "scale", ")", ")", "\n", "save_folder", "=", "osp", ".", "join", "(", "root_folder", ",", "'X'", "+", "str", "(", "scale", "*", "scale", ")", "+", "'_'", "+", "args", ".", "model", ")", "\n", "print", "(", "root_folder", ")", "\n", "print", "(", "save_folder", ")", "\n", "\n", "if", "not", "osp", ".", "exists", "(", "save_folder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_folder", ")", "\n", "\n", "", "subfolder_name_l", "=", "[", "]", "\n", "subfolder_LR_l", "=", "sorted", "(", "glob", ".", "glob", "(", "osp", ".", "join", "(", "LR_dataset_folder", ",", "'*'", ")", ")", ")", "\n", "if", "data_mode", "==", "'REDS'", ":", "\n", "            ", "subfolder_LR_l", "=", "[", "k", "for", "k", "in", "subfolder_LR_l", "if", "\n", "k", ".", "find", "(", "'000'", ")", ">=", "0", "or", "k", ".", "find", "(", "'011'", ")", ">=", "0", "or", "k", ".", "find", "(", "'015'", ")", ">=", "0", "or", "k", ".", "find", "(", "'020'", ")", ">=", "0", "]", "\n", "# for each subfolder", "\n", "# for subfolder, subfolder_GT in zip(subfolder_l, subfolder_GT_l):", "\n", "", "sig_x", ",", "sig_y", ",", "the", "=", "float", "(", "sig_x", ")", ",", "float", "(", "sig_y", ")", ",", "float", "(", "the", ")", "\n", "\n", "if", "args", ".", "model", "==", "'SFDN'", ":", "\n", "            ", "if", "scale", "==", "2", ":", "\n", "                ", "model", "=", "LRest", ".", "DirectKernelEstimator_CMS", "(", "nf", "=", "64", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'../pretrained_models/MFDN/SFDN_{}.pth'", ".", "format", "(", "load_model", ")", ")", ",", "strict", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'We do not support SFDN for scale factor 4 now.'", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "model", "=", "LRest", ".", "DirectKernelEstimatorVideo", "(", "in_nc", "=", "3", ",", "nf", "=", "64", ",", "scale", "=", "scale", ")", "\n", "if", "scale", "==", "2", ":", "\n", "                ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'../pretrained_models/MFDN/MFDN_{}.pth'", ".", "format", "(", "load_model", ")", ")", ",", "strict", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'../pretrained_models/MFDN/MFDN_{}_S4.pth'", ".", "format", "(", "load_model", ")", ")", ",", "strict", "=", "True", ")", "\n", "\n", "", "", "model", ".", "eval", "(", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "for", "subfolder_LR", "in", "subfolder_LR_l", ":", "\n", "\n", "            ", "subfolder_name", "=", "osp", ".", "basename", "(", "subfolder_LR", ")", "\n", "subfolder_name_l", ".", "append", "(", "subfolder_name", ")", "\n", "save_subfolder", "=", "osp", ".", "join", "(", "save_folder", ",", "subfolder_name", ")", "\n", "if", "not", "osp", ".", "exists", "(", "save_subfolder", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "save_subfolder", ")", "\n", "\n", "", "img_LR_path_l", "=", "sorted", "(", "glob", ".", "glob", "(", "osp", ".", "join", "(", "subfolder_LR", ",", "'*'", ")", ")", ")", "\n", "max_idx", "=", "len", "(", "img_LR_path_l", ")", "\n", "\n", "#### read LQ and GT images", "\n", "imgs_LR", "=", "data_util", ".", "read_img_seq", "(", "subfolder_LR", ")", "# T C H W", "\n", "if", "args", ".", "model", "==", "'SFDN'", ":", "\n", "                ", "count", "=", "0", "\n", "imgs_LR_l", "=", "imgs_LR", ".", "split", "(", "32", ")", "\n", "for", "img_batch", "in", "imgs_LR_l", ":", "\n", "                    ", "img_batch", "=", "img_batch", ".", "to", "(", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "img_lr_batch", "=", "model", "(", "img_batch", ")", "\n", "img_lr_batch", "=", "img_lr_batch", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "img_lr_batch", "=", "(", "img_lr_batch", ".", "clip", "(", "0", ",", "1", ")", "*", "255", ")", ".", "round", "(", ")", "\n", "img_lr_batch", "=", "img_lr_batch", ".", "astype", "(", "'uint8'", ")", "\n", "for", "img_lr", "in", "img_lr_batch", ":", "\n", "                            ", "filename", "=", "osp", ".", "basename", "(", "img_LR_path_l", "[", "count", "]", ")", "\n", "imageio", ".", "imwrite", "(", "osp", ".", "join", "(", "save_subfolder", ",", "filename", ")", ",", "img_lr", ")", "\n", "count", "+=", "1", "\n", "\n", "", "", "", "", "else", ":", "\n", "                 ", "for", "img_idx", ",", "img_path", "in", "enumerate", "(", "img_LR_path_l", ")", ":", "\n", "                    ", "img_name", "=", "osp", ".", "splitext", "(", "osp", ".", "basename", "(", "img_path", ")", ")", "[", "0", "]", "\n", "select_idx", "=", "data_util", ".", "index_generation", "(", "img_idx", ",", "max_idx", ",", "N_in", ",", "padding", "=", "'new_info'", ")", "\n", "imgs_in", "=", "imgs_LR", ".", "index_select", "(", "0", ",", "torch", ".", "LongTensor", "(", "select_idx", ")", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "imgs_in", "=", "imgs_in", ".", "transpose", "(", "1", ",", "2", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "output", "=", "model", "(", "imgs_in", ")", "# B C T H W", "\n", "output", "=", "output", ".", "squeeze", "(", "0", ")", "\n", "output", "=", "output", "[", ":", ",", "N_in", "//", "2", "]", "\n", "output", "=", "output", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "output", "=", "(", "output", ".", "clip", "(", "0", ",", "1", ")", "*", "255", ")", ".", "round", "(", ")", ".", "astype", "(", "'uint8'", ")", "\n", "imageio", ".", "imwrite", "(", "osp", ".", "join", "(", "save_subfolder", ",", "'{}.png'", ".", "format", "(", "img_name", ")", ")", ",", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.codes.test_Vid4_REDS4_with_GT.main": [[19, 262], ["torch.device", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "models.EDVR", "utils.mkdirs", "utils.setup_logger", "logging.getLogger", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "model.to.load_state_dict", "model.to.eval", "model.to.to", "sorted", "sorted", "zip", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "print", "torch.load", "glob.glob", "glob.glob", "os.basename", "subfolder_name_l.append", "os.join", "sorted", "len", "data.read_img_seq", "sorted", "enumerate", "avg_psnr_l.append", "avg_psnr_center_l.append", "avg_psnr_border_l.append", "avg_ssim_l.append", "avg_ssim_center_l.append", "avg_ssim_border_l.append", "logging.getLogger.info", "logging.getLogger.info", "str", "os.join", "os.join", "glob.glob", "utils.mkdirs", "glob.glob", "img_GT_l.append", "data.index_generation", "data_util.read_img_seq.index_select().unsqueeze().to", "utils.tensor2img", "numpy.copy", "utils.crop_border", "utils.calculate_psnr", "len", "len", "os.join", "os.join", "data.read_img", "os.splitext", "utils.flipx4_forward", "utils.single_forward", "util.single_forward.squeeze", "cv2.imwrite", "sum", "len", "sum", "len", "sum", "len", "sum", "len", "sum", "len", "sum", "len", "str", "os.basename", "data_util.read_img_seq.index_select().unsqueeze", "os.join", "k.find", "k.find", "k.find", "k.find", "str", "data_util.read_img_seq.index_select", "torch.LongTensor"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.mkdirs", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.setup_logger", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.load", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.read_img_seq", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.mkdirs", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.index_generation", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.tensor2img", "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.crop_border", "home.repos.pwc.inspect_result.esw0116_DynaVSR.metrics.calculate_PSNR_SSIM.calculate_psnr", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.read_img", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.flipx4_forward", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.single_forward"], ["def", "main", "(", ")", ":", "\n", "#################", "\n", "# configurations", "\n", "#################", "\n", "    ", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "'1'", "\n", "flip_test", "=", "False", "\n", "scale", "=", "4", "\n", "N_in", "=", "5", "\n", "predeblur", ",", "HR_in", "=", "False", ",", "False", "\n", "n_feats", "=", "128", "\n", "back_RBs", "=", "40", "\n", "\n", "save_imgs", "=", "False", "\n", "prog", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "prog", ".", "add_argument", "(", "'--train_mode'", ",", "'-t'", ",", "type", "=", "str", ",", "default", "=", "'REDS'", ",", "help", "=", "'train mode'", ")", "\n", "prog", ".", "add_argument", "(", "'--data_mode'", ",", "'-m'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'data_mode'", ")", "\n", "prog", ".", "add_argument", "(", "'--degradation_mode'", ",", "'-d'", ",", "type", "=", "str", ",", "default", "=", "'impulse'", ",", "choices", "=", "(", "'impulse'", ",", "'bicubic'", ",", "'preset'", ")", ",", "help", "=", "'path to image output directory.'", ")", "\n", "prog", ".", "add_argument", "(", "'--sigma_x'", ",", "'-sx'", ",", "type", "=", "float", ",", "default", "=", "1", ",", "help", "=", "'sigma_x'", ")", "\n", "prog", ".", "add_argument", "(", "'--sigma_y'", ",", "'-sy'", ",", "type", "=", "float", ",", "default", "=", "0", ",", "help", "=", "'sigma_y'", ")", "\n", "prog", ".", "add_argument", "(", "'--theta'", ",", "'-th'", ",", "type", "=", "float", ",", "default", "=", "0", ",", "help", "=", "'theta'", ")", "\n", "\n", "args", "=", "prog", ".", "parse_args", "(", ")", "\n", "\n", "train_data_mode", "=", "args", ".", "train_mode", "\n", "data_mode", "=", "args", ".", "data_mode", "\n", "if", "data_mode", "is", "None", ":", "\n", "        ", "if", "train_data_mode", "==", "'Vimeo'", ":", "\n", "            ", "data_mode", "=", "'Vid4'", "\n", "", "elif", "train_data_mode", "==", "'REDS'", ":", "\n", "            ", "data_mode", "=", "'REDS'", "\n", "", "", "degradation_mode", "=", "args", ".", "degradation_mode", "# impulse | bicubic | preset", "\n", "sig_x", ",", "sig_y", ",", "the", "=", "args", ".", "sigma_x", ",", "args", ".", "sigma_y", ",", "args", ".", "theta", "\n", "if", "sig_y", "==", "0", ":", "\n", "        ", "sig_y", "=", "sig_x", "\n", "\n", "############################################################################", "\n", "#### model", "\n", "", "if", "scale", "==", "2", ":", "\n", "        ", "if", "train_data_mode", "==", "'Vimeo'", ":", "\n", "            ", "model_path", "=", "'../experiments/pretrained_models/EDVR_Vimeo90K_SR_M_Scale2_FT.pth'", "\n", "#model_path = '../experiments/pretrained_models/EDVR_M_BLIND_V_FT_report.pth'", "\n", "# model_path = '../experiments/pretrained_models/2500_G.pth'", "\n", "", "elif", "train_data_mode", "==", "'REDS'", ":", "\n", "            ", "model_path", "=", "'../experiments/pretrained_models/EDVR_REDS_SR_M_Scale2.pth'", "\n", "# model_path = '../experiments/pretrained_models/EDVR_M_BLIND_R_FT_report.pth'", "\n", "", "elif", "train_data_mode", "==", "'Both'", ":", "\n", "            ", "model_path", "=", "'../experiments/pretrained_models/EDVR_REDS+Vimeo90K_SR_M_Scale2_FT.pth'", "\n", "", "elif", "train_data_mode", "==", "'MM522'", ":", "\n", "            ", "model_path", "=", "'../experiments/pretrained_models/EDVR_MM522_SR_M_Scale2_FT.pth'", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "", "else", ":", "\n", "        ", "if", "data_mode", "==", "'Vid4'", ":", "\n", "            ", "model_path", "=", "'../experiments/pretrained_models/EDVR_BLIND_Vimeo_SR_L.pth'", "\n", "# model_path = '../experiments/pretrained_models/EDVR_Vimeo90K_SR_L.pth'", "\n", "\n", "", "elif", "data_mode", "==", "'REDS'", ":", "\n", "            ", "model_path", "=", "'../experiments/pretrained_models/EDVR_REDS_SR_L.pth'", "\n", "# model_path = '../experiments/pretrained_models/EDVR_BLIND_REDS_SR_L.pth'", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "\n", "", "", "model", "=", "EDVR_arch", ".", "EDVR", "(", "n_feats", ",", "N_in", ",", "8", ",", "5", ",", "back_RBs", ",", "predeblur", "=", "predeblur", ",", "HR_in", "=", "HR_in", ",", "scale", "=", "scale", ")", "\n", "\n", "folder_subname", "=", "'preset'", "if", "degradation_mode", "==", "'preset'", "else", "degradation_mode", "+", "'_'", "+", "str", "(", "\n", "'{:.1f}'", ".", "format", "(", "sig_x", ")", ")", "+", "'_'", "+", "str", "(", "'{:.1f}'", ".", "format", "(", "sig_y", ")", ")", "+", "'_'", "+", "str", "(", "'{:.1f}'", ".", "format", "(", "the", ")", ")", "\n", "\n", "#### dataset", "\n", "if", "data_mode", "==", "'Vid4'", ":", "\n", "# test_dataset_folder = '../dataset/Vid4/LR_bicubic/X{}'.format(scale)", "\n", "        ", "test_dataset_folder", "=", "'../dataset/Vid4/LR_{}/X{}'", ".", "format", "(", "folder_subname", ",", "scale", ")", "\n", "GT_dataset_folder", "=", "'../dataset/Vid4/HR'", "\n", "", "elif", "data_mode", "==", "'MM522'", ":", "\n", "        ", "test_dataset_folder", "=", "'../dataset/MM522val/LR_bicubic/X{}'", ".", "format", "(", "scale", ")", "\n", "GT_dataset_folder", "=", "'../dataset/MM522val/HR'", "\n", "", "else", ":", "\n", "# test_dataset_folder = '../dataset/REDS4/LR_bicubic/X{}'.format(scale)", "\n", "        ", "test_dataset_folder", "=", "'../dataset/REDS/train/LR_{}/X{}'", ".", "format", "(", "folder_subname", ",", "scale", ")", "\n", "GT_dataset_folder", "=", "'../dataset/REDS/train/HR'", "\n", "\n", "#### evaluation", "\n", "", "crop_border", "=", "0", "\n", "border_frame", "=", "N_in", "//", "2", "# border frames when evaluate", "\n", "# temporal padding mode", "\n", "padding", "=", "'new_info'", "\n", "\n", "save_folder", "=", "'../results/{}'", ".", "format", "(", "data_mode", ")", "\n", "util", ".", "mkdirs", "(", "save_folder", ")", "\n", "util", ".", "setup_logger", "(", "'base'", ",", "save_folder", ",", "'test'", ",", "level", "=", "logging", ".", "INFO", ",", "screen", "=", "True", ",", "tofile", "=", "True", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'base'", ")", "\n", "\n", "#### log info", "\n", "logger", ".", "info", "(", "'Data: {} - {}'", ".", "format", "(", "data_mode", ",", "test_dataset_folder", ")", ")", "\n", "logger", ".", "info", "(", "'Padding mode: {}'", ".", "format", "(", "padding", ")", ")", "\n", "logger", ".", "info", "(", "'Model path: {}'", ".", "format", "(", "model_path", ")", ")", "\n", "logger", ".", "info", "(", "'Save images: {}'", ".", "format", "(", "save_imgs", ")", ")", "\n", "logger", ".", "info", "(", "'Flip test: {}'", ".", "format", "(", "flip_test", ")", ")", "\n", "\n", "#### set up the models", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ",", "strict", "=", "True", ")", "\n", "model", ".", "eval", "(", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "avg_psnr_l", ",", "avg_psnr_center_l", ",", "avg_psnr_border_l", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "avg_ssim_l", ",", "avg_ssim_center_l", ",", "avg_ssim_border_l", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "subfolder_name_l", "=", "[", "]", "\n", "\n", "subfolder_l", "=", "sorted", "(", "glob", ".", "glob", "(", "osp", ".", "join", "(", "test_dataset_folder", ",", "'*'", ")", ")", ")", "\n", "subfolder_GT_l", "=", "sorted", "(", "glob", ".", "glob", "(", "osp", ".", "join", "(", "GT_dataset_folder", ",", "'*'", ")", ")", ")", "\n", "if", "data_mode", "==", "'REDS'", ":", "\n", "        ", "subfolder_GT_l", "=", "[", "k", "for", "k", "in", "subfolder_GT_l", "if", "\n", "k", ".", "find", "(", "'000'", ")", ">=", "0", "or", "k", ".", "find", "(", "'011'", ")", ">=", "0", "or", "k", ".", "find", "(", "'015'", ")", ">=", "0", "or", "k", ".", "find", "(", "'020'", ")", ">=", "0", "]", "\n", "# for each subfolder", "\n", "", "for", "subfolder", ",", "subfolder_GT", "in", "zip", "(", "subfolder_l", ",", "subfolder_GT_l", ")", ":", "\n", "        ", "subfolder_name", "=", "osp", ".", "basename", "(", "subfolder", ")", "\n", "subfolder_name_l", ".", "append", "(", "subfolder_name", ")", "\n", "save_subfolder", "=", "osp", ".", "join", "(", "save_folder", ",", "subfolder_name", ")", "\n", "\n", "img_path_l", "=", "sorted", "(", "glob", ".", "glob", "(", "osp", ".", "join", "(", "subfolder", ",", "'*'", ")", ")", ")", "\n", "max_idx", "=", "len", "(", "img_path_l", ")", "\n", "if", "save_imgs", ":", "\n", "            ", "util", ".", "mkdirs", "(", "save_subfolder", ")", "\n", "\n", "#### read LQ and GT images", "\n", "", "imgs_LQ", "=", "data_util", ".", "read_img_seq", "(", "subfolder", ")", "\n", "img_GT_l", "=", "[", "]", "\n", "for", "img_GT_path", "in", "sorted", "(", "glob", ".", "glob", "(", "osp", ".", "join", "(", "subfolder_GT", ",", "'*'", ")", ")", ")", ":", "\n", "            ", "img_GT_l", ".", "append", "(", "data_util", ".", "read_img", "(", "None", ",", "img_GT_path", ")", ")", "\n", "\n", "", "avg_psnr", ",", "avg_psnr_border", ",", "avg_psnr_center", ",", "N_border", ",", "N_center", "=", "0", ",", "0", ",", "0", ",", "0", ",", "0", "\n", "avg_ssim", ",", "avg_ssim_border", ",", "avg_ssim_center", "=", "0", ",", "0", ",", "0", "\n", "\n", "# process each image", "\n", "for", "img_idx", ",", "img_path", "in", "enumerate", "(", "img_path_l", ")", ":", "\n", "            ", "img_name", "=", "osp", ".", "splitext", "(", "osp", ".", "basename", "(", "img_path", ")", ")", "[", "0", "]", "\n", "select_idx", "=", "data_util", ".", "index_generation", "(", "img_idx", ",", "max_idx", ",", "N_in", ",", "padding", "=", "padding", ")", "\n", "imgs_in", "=", "imgs_LQ", ".", "index_select", "(", "0", ",", "torch", ".", "LongTensor", "(", "select_idx", ")", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "if", "flip_test", ":", "\n", "                ", "output", "=", "util", ".", "flipx4_forward", "(", "model", ",", "imgs_in", ")", "\n", "", "else", ":", "\n", "                ", "output", "=", "util", ".", "single_forward", "(", "model", ",", "imgs_in", ")", "\n", "", "output", "=", "util", ".", "tensor2img", "(", "output", ".", "squeeze", "(", "0", ")", ")", "\n", "\n", "if", "save_imgs", ":", "\n", "                ", "cv2", ".", "imwrite", "(", "osp", ".", "join", "(", "save_subfolder", ",", "'{}.png'", ".", "format", "(", "img_name", ")", ")", ",", "output", ")", "\n", "\n", "# calculate PSNR", "\n", "", "output", "=", "output", "/", "255.", "\n", "GT", "=", "np", ".", "copy", "(", "img_GT_l", "[", "img_idx", "]", ")", "\n", "'''\n            output_tensor = torch.from_numpy(np.copy(output[:,:,::-1])).permute(2,0,1)\n            GT_tensor = torch.from_numpy(np.copy(GT[:,:,::-1])).permute(2,0,1).type_as(output_tensor)\n            torch.save(output_tensor.cpu(), '../results/sr_test.pt')\n            torch.save(GT_tensor.cpu(), '../results/hr_test.pt')\n            my_psnr = utility.calc_psnr(output_tensor, GT_tensor)\n            GT_tensor = GT_tensor.cpu().numpy().transpose(1,2,0)\n            imageio.imwrite('../results/hr_test.png', GT_tensor)\n            print('saved', my_psnr)\n            '''", "\n", "'''\n            # For REDS, evaluate on RGB channels; for Vid4, evaluate on the Y channel\n            if data_mode == 'Vid4' or 'sharp_bicubic' or 'MM522':  # bgr2y, [0, 1]\n                GT = data_util.bgr2ycbcr(GT, only_y=True)\n                output = data_util.bgr2ycbcr(output, only_y=True)\n            '''", "\n", "output", "=", "(", "output", "*", "255", ")", ".", "round", "(", ")", ".", "astype", "(", "'uint8'", ")", "\n", "GT", "=", "(", "GT", "*", "255", ")", ".", "round", "(", ")", ".", "astype", "(", "'uint8'", ")", "\n", "output", ",", "GT", "=", "util", ".", "crop_border", "(", "[", "output", ",", "GT", "]", ",", "crop_border", ")", "\n", "crt_psnr", "=", "util", ".", "calculate_psnr", "(", "output", ",", "GT", ")", "\n", "crt_ssim", "=", "0.001", "#util.calculate_ssim(output, GT)", "\n", "\n", "# logger.info('{:3d} - {:16} \\tPSNR: {:.6f} dB \\tSSIM: {:.6f}'.format(img_idx + 1, img_name, crt_psnr, crt_ssim))", "\n", "\n", "if", "img_idx", ">=", "border_frame", "and", "img_idx", "<", "max_idx", "-", "border_frame", ":", "# center frames", "\n", "                ", "avg_psnr_center", "+=", "crt_psnr", "\n", "avg_ssim_center", "+=", "crt_ssim", "\n", "N_center", "+=", "1", "\n", "", "else", ":", "# border frames", "\n", "                ", "avg_psnr_border", "+=", "crt_psnr", "\n", "avg_ssim_border", "+=", "crt_ssim", "\n", "N_border", "+=", "1", "\n", "", "", "avg_psnr", "=", "(", "avg_psnr_center", "+", "avg_psnr_border", ")", "/", "(", "N_center", "+", "N_border", ")", "\n", "avg_psnr_center", "=", "avg_psnr_center", "/", "N_center", "\n", "avg_psnr_border", "=", "0", "if", "N_border", "==", "0", "else", "avg_psnr_border", "/", "N_border", "\n", "avg_psnr_l", ".", "append", "(", "avg_psnr", ")", "\n", "avg_psnr_center_l", ".", "append", "(", "avg_psnr_center", ")", "\n", "avg_psnr_border_l", ".", "append", "(", "avg_psnr_border", ")", "\n", "\n", "avg_ssim", "=", "(", "avg_ssim_center", "+", "avg_ssim_border", ")", "/", "(", "N_center", "+", "N_border", ")", "\n", "avg_ssim_center", "=", "avg_ssim_center", "/", "N_center", "\n", "avg_ssim_border", "=", "0", "if", "N_border", "==", "0", "else", "avg_ssim_border", "/", "N_border", "\n", "avg_ssim_l", ".", "append", "(", "avg_ssim", ")", "\n", "avg_ssim_center_l", ".", "append", "(", "avg_ssim_center", ")", "\n", "avg_ssim_border_l", ".", "append", "(", "avg_ssim_border", ")", "\n", "\n", "logger", ".", "info", "(", "'Folder {} - Average PSNR: {:.6f} dB for {} frames; '", "\n", "'Center PSNR: {:.6f} dB for {} frames; '", "\n", "'Border PSNR: {:.6f} dB for {} frames.'", ".", "format", "(", "subfolder_name", ",", "avg_psnr", ",", "\n", "(", "N_center", "+", "N_border", ")", ",", "\n", "avg_psnr_center", ",", "N_center", ",", "\n", "avg_psnr_border", ",", "N_border", ")", ")", "\n", "\n", "logger", ".", "info", "(", "'Folder {} - Average SSIM: {:.6f} for {} frames; '", "\n", "'Center SSIM: {:.6f} for {} frames; '", "\n", "'Border SSIM: {:.6f} for {} frames.'", ".", "format", "(", "subfolder_name", ",", "avg_ssim", ",", "\n", "(", "N_center", "+", "N_border", ")", ",", "\n", "avg_ssim_center", ",", "N_center", ",", "\n", "avg_ssim_border", ",", "N_border", ")", ")", "\n", "\n", "", "'''\n    logger.info('################ Tidy Outputs ################')\n    for subfolder_name, psnr, psnr_center, psnr_border in zip(subfolder_name_l, avg_psnr_l,\n                                                              avg_psnr_center_l, avg_psnr_border_l):\n        logger.info('Folder {} - Average PSNR: {:.6f} dB. '\n                    'Center PSNR: {:.6f} dB. '\n                    'Border PSNR: {:.6f} dB.'.format(subfolder_name, psnr, psnr_center, psnr_border))\n    for subfolder_name, ssim, ssim_center, ssim_border in zip(subfolder_name_l, avg_ssim_l,\n                                                              avg_ssim_center_l, avg_ssim_border_l):\n        logger.info('Folder {} - Average SSIM: {:.6f}. '\n                    'Center SSIM: {:.6f}. '\n                    'Border SSIM: {:.6f}.'.format(subfolder_name, ssim, ssim_center, ssim_border))\n    '''", "\n", "logger", ".", "info", "(", "'################ Final Results ################'", ")", "\n", "logger", ".", "info", "(", "'Data: {} - {}'", ".", "format", "(", "data_mode", ",", "test_dataset_folder", ")", ")", "\n", "logger", ".", "info", "(", "'Padding mode: {}'", ".", "format", "(", "padding", ")", ")", "\n", "logger", ".", "info", "(", "'Model path: {}'", ".", "format", "(", "model_path", ")", ")", "\n", "logger", ".", "info", "(", "'Save images: {}'", ".", "format", "(", "save_imgs", ")", ")", "\n", "logger", ".", "info", "(", "'Flip test: {}'", ".", "format", "(", "flip_test", ")", ")", "\n", "logger", ".", "info", "(", "'Total Average PSNR: {:.6f} dB for {} clips. '", "\n", "'Center PSNR: {:.6f} dB. Border PSNR: {:.6f} dB.'", ".", "format", "(", "\n", "sum", "(", "avg_psnr_l", ")", "/", "len", "(", "avg_psnr_l", ")", ",", "len", "(", "subfolder_l", ")", ",", "\n", "sum", "(", "avg_psnr_center_l", ")", "/", "len", "(", "avg_psnr_center_l", ")", ",", "\n", "sum", "(", "avg_psnr_border_l", ")", "/", "len", "(", "avg_psnr_border_l", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Total Average SSIM: {:.6f} for {} clips. '", "\n", "'Center SSIM: {:.6f}. Border PSNR: {:.6f}.'", ".", "format", "(", "\n", "sum", "(", "avg_ssim_l", ")", "/", "len", "(", "avg_ssim_l", ")", ",", "len", "(", "subfolder_l", ")", ",", "\n", "sum", "(", "avg_ssim_center_l", ")", "/", "len", "(", "avg_ssim_center_l", ")", ",", "\n", "sum", "(", "avg_ssim_border_l", ")", "/", "len", "(", "avg_ssim_border_l", ")", ")", ")", "\n", "\n", "print", "(", "'\\n\\n\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.codes.train.init_dist": [[21, 29], ["int", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.init_process_group", "torch.get_start_method", "torch.set_start_method"], "function", ["None"], ["def", "init_dist", "(", "backend", "=", "'nccl'", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"initialization for distributed training\"\"\"", "\n", "if", "mp", ".", "get_start_method", "(", "allow_none", "=", "True", ")", "!=", "'spawn'", ":", "\n", "        ", "mp", ".", "set_start_method", "(", "'spawn'", ")", "\n", "", "rank", "=", "int", "(", "os", ".", "environ", "[", "'RANK'", "]", ")", "\n", "num_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "rank", "%", "num_gpus", ")", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "backend", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.codes.train.main": [[31, 364], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "options.parse", "opt[].get", "options.dict_to_nonedict", "utils.util.set_random_seed", "opt[].items", "models.create_model", "logging.getLogger.info", "range", "print", "train.init_dist", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.load", "torch.load", "torch.load", "options.check_resume", "utils.util.setup_logger", "logging.getLogger", "logging.getLogger.info", "utils.util.setup_logger", "logging.getLogger", "random.randint", "logging.getLogger.info", "logging.getLogger.info", "models.create_model.resume_training", "enumerate", "logging.getLogger.info", "models.create_model.save", "logging.getLogger.info", "SummaryWriter.close", "utils.util.mkdir_and_rename", "utils.util.mkdirs", "options.dict2str", "float", "SummaryWriter", "data.loader.get_dataset", "int", "int", "int", "data.create_dataloader", "data.data_sampler.DistIterSampler.set_epoch", "models.create_model.update_learning_rate", "models.create_model.feed_data", "models.create_model.optimize_parameters", "logging.getLogger.info", "math.ceil", "math.ceil", "data.data_sampler.DistIterSampler", "int", "logging.getLogger.info", "logging.getLogger.info", "data.create_dataset", "data.create_dataloader", "NotImplementedError", "LQs.reshape.reshape", "torch.nn.functional.interpolate", "F.interpolate.reshape", "models.create_model.get_current_log", "models.create_model.get_current_learning_rate", "model.get_current_log.items", "opt[].get", "storage.cuda", "math.ceil", "logging.getLogger.info", "logging.getLogger.info", "utils.util.ProgressBar", "logging.getLogger.info", "logging.getLogger.info", "models.create_model.save", "models.create_model.save_training_state", "opt[].items", "len", "len", "len", "os.path.join", "utils.util.mkdir", "models.create_model.feed_data", "models.create_model.test", "models.create_model.get_current_visuals", "utils.util.tensor2img", "utils.util.tensor2img", "os.path.join", "utils.util.save_img", "utils.util.crop_border", "utils.util.calculate_psnr", "util.ProgressBar.update", "SummaryWriter.add_scalar", "range", "psnr_rlt.items", "torch.barrier", "utils.util.ProgressBar", "psnr_rlt.items", "len", "psnr_rlt_avg.items", "logging.getLogger.info", "len", "SummaryWriter.add_scalar", "os.path.splitext", "utils.util.ProgressBar", "len", "val_data[].unsqueeze_", "val_data[].unsqueeze_", "val_data[].split", "os.path.join", "torch.reduce", "psnr_rlt.items", "len", "psnr_rlt_avg.items", "logging.getLogger.info", "len", "os.path.join", "val_data[].size", "print", "print", "range", "util.ProgressBar.update", "SummaryWriter.add_scalar", "psnr_rlt_avg.items", "os.path.basename", "len", "int", "int", "os.path.isdir", "os.makedirs", "psnr_rlt.get", "torch.zeros", "torch.zeros", "torch.zeros", "models.create_model.feed_data", "models.create_model.test", "models.create_model.get_current_visuals", "utils.util.tensor2img", "utils.util.tensor2img", "imageio.imwrite", "imageio.imwrite", "utils.util.calculate_psnr", "torch.mean().cpu().item", "torch.mean().cpu().item", "torch.mean().cpu().item", "SummaryWriter.add_scalar", "psnr_rlt_avg.items", "os.path.isdir", "os.makedirs", "psnr_rlt.get", "data.util.index_generation", "models.create_model.feed_data", "models.create_model.test", "models.create_model.get_current_visuals", "utils.util.tensor2img", "utils.util.tensor2img", "imageio.imwrite", "imageio.imwrite", "utility.calc_psnr", "sum", "len", "SummaryWriter.add_scalar", "LQs.reshape.reshape", "torch.nn.functional.interpolate", "F.interpolate.reshape", "os.path.join", "os.path.join", "range", "SummaryWriter.add_scalar", "os.path.join", "os.path.join", "util.ProgressBar.update", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean", "torch.mean", "torch.mean"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.options.options.parse", "home.repos.pwc.inspect_result.esw0116_DynaVSR.options.options.dict_to_nonedict", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.set_random_seed", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.__init__.create_model", "home.repos.pwc.inspect_result.esw0116_DynaVSR.codes.test_dynavsr.init_dist", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.load", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.load", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.load", "home.repos.pwc.inspect_result.esw0116_DynaVSR.options.options.check_resume", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.setup_logger", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.setup_logger", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.resume_training", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.mkdir_and_rename", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.mkdirs", "home.repos.pwc.inspect_result.esw0116_DynaVSR.options.options.dict2str", "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.loader.get_dataset", "home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.__init__.create_dataloader", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.data_sampler.DistIterSampler.set_epoch", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.update_learning_rate", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.feed_data", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.optimize_parameters", "home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.__init__.create_dataset", "home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.__init__.create_dataloader", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.SRGAN_model.SRGANModel.get_current_log", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.get_current_learning_rate", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.save_training_state", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.mkdir", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.feed_data", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.SRGAN_model.SRGANModel.test", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.get_current_visuals", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.tensor2img", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.tensor2img", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.save_img", "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.crop_border", "home.repos.pwc.inspect_result.esw0116_DynaVSR.metrics.calculate_PSNR_SSIM.calculate_psnr", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.ProgressBar.update", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.ProgressBar.update", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.feed_data", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.SRGAN_model.SRGANModel.test", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.get_current_visuals", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.tensor2img", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.tensor2img", "home.repos.pwc.inspect_result.esw0116_DynaVSR.metrics.calculate_PSNR_SSIM.calculate_psnr", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.index_generation", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.feed_data", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.SRGAN_model.SRGANModel.test", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.get_current_visuals", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.tensor2img", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.tensor2img", "home.repos.pwc.inspect_result.esw0116_DynaVSR.codes.utility.calc_psnr", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.ProgressBar.update"], ["", "def", "main", "(", ")", ":", "\n", "#### options", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-opt'", ",", "type", "=", "str", ",", "help", "=", "'Path to option YAML file.'", ")", "\n", "parser", ".", "add_argument", "(", "'--launcher'", ",", "choices", "=", "[", "'none'", ",", "'pytorch'", "]", ",", "default", "=", "'none'", ",", "\n", "help", "=", "'job launcher'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "opt", "=", "option", ".", "parse", "(", "args", ".", "opt", ",", "is_train", "=", "True", ")", "\n", "\n", "#### distributed training settings", "\n", "if", "args", ".", "launcher", "==", "'none'", ":", "# disabled distributed training", "\n", "        ", "opt", "[", "'dist'", "]", "=", "False", "\n", "rank", "=", "-", "1", "\n", "print", "(", "'Disabled distributed training.'", ")", "\n", "", "else", ":", "\n", "        ", "opt", "[", "'dist'", "]", "=", "True", "\n", "init_dist", "(", ")", "\n", "world_size", "=", "torch", ".", "distributed", ".", "get_world_size", "(", ")", "\n", "rank", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "\n", "#### loading resume state if exists", "\n", "", "if", "opt", "[", "'path'", "]", ".", "get", "(", "'resume_state'", ",", "None", ")", ":", "\n", "# distributed resuming: all load into default GPU", "\n", "        ", "device_id", "=", "torch", ".", "cuda", ".", "current_device", "(", ")", "\n", "resume_state", "=", "torch", ".", "load", "(", "opt", "[", "'path'", "]", "[", "'resume_state'", "]", ",", "\n", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ".", "cuda", "(", "device_id", ")", ")", "\n", "option", ".", "check_resume", "(", "opt", ",", "resume_state", "[", "'iter'", "]", ")", "# check resume options", "\n", "", "else", ":", "\n", "        ", "resume_state", "=", "None", "\n", "\n", "#### mkdir and loggers", "\n", "", "if", "rank", "<=", "0", ":", "# normal training (rank -1) OR distributed training (rank 0)", "\n", "        ", "if", "resume_state", "is", "None", ":", "\n", "            ", "util", ".", "mkdir_and_rename", "(", "\n", "opt", "[", "'path'", "]", "[", "'experiments_root'", "]", ")", "# rename experiment folder if exists", "\n", "util", ".", "mkdirs", "(", "(", "path", "for", "key", ",", "path", "in", "opt", "[", "'path'", "]", ".", "items", "(", ")", "if", "not", "key", "==", "'experiments_root'", "\n", "and", "'pretrain_model'", "not", "in", "key", "and", "'resume'", "not", "in", "key", ")", ")", "\n", "\n", "# config loggers. Before it, the log will not work", "\n", "", "util", ".", "setup_logger", "(", "'base'", ",", "opt", "[", "'path'", "]", "[", "'log'", "]", ",", "'train_'", "+", "opt", "[", "'name'", "]", ",", "level", "=", "logging", ".", "INFO", ",", "\n", "screen", "=", "True", ",", "tofile", "=", "True", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'base'", ")", "\n", "logger", ".", "info", "(", "option", ".", "dict2str", "(", "opt", ")", ")", "\n", "# tensorboard logger", "\n", "if", "opt", "[", "'use_tb_logger'", "]", "and", "'debug'", "not", "in", "opt", "[", "'name'", "]", ":", "\n", "            ", "version", "=", "float", "(", "torch", ".", "__version__", "[", "0", ":", "3", "]", ")", "\n", "if", "version", ">=", "1.1", ":", "# PyTorch 1.1", "\n", "                ", "from", "torch", ".", "utils", ".", "tensorboard", "import", "SummaryWriter", "\n", "", "else", ":", "\n", "                ", "logger", ".", "info", "(", "\n", "'You are using PyTorch {}. Tensorboard will use [tensorboardX]'", ".", "format", "(", "version", ")", ")", "\n", "from", "tensorboardX", "import", "SummaryWriter", "\n", "", "tb_logger", "=", "SummaryWriter", "(", "log_dir", "=", "'../tb_logger/'", "+", "opt", "[", "'name'", "]", ")", "\n", "", "", "else", ":", "\n", "        ", "util", ".", "setup_logger", "(", "'base'", ",", "opt", "[", "'path'", "]", "[", "'log'", "]", ",", "'train'", ",", "level", "=", "logging", ".", "INFO", ",", "screen", "=", "True", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'base'", ")", "\n", "\n", "# convert to NoneDict, which returns None for missing keys", "\n", "", "opt", "=", "option", ".", "dict_to_nonedict", "(", "opt", ")", "\n", "\n", "#### random seed", "\n", "seed", "=", "opt", "[", "'train'", "]", "[", "'manual_seed'", "]", "\n", "if", "seed", "is", "None", ":", "\n", "        ", "seed", "=", "random", ".", "randint", "(", "1", ",", "10000", ")", "\n", "", "if", "rank", "<=", "0", ":", "\n", "        ", "logger", ".", "info", "(", "'Random seed: {}'", ".", "format", "(", "seed", ")", ")", "\n", "", "util", ".", "set_random_seed", "(", "seed", ")", "\n", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "# torch.backends.cudnn.deterministic = True", "\n", "'''\n    train_loader = loader.get_loader(opt, train=True)\n    val_loader = loader.get_loader(opt, train=False)\n    # train_size = int(math.ceil(len(train_set) / dataset_opt['batch_size']))\n    total_iters = int(opt['train']['niter'])\n    total_epochs = int(opt['train']['epochs'])\n    '''", "\n", "#### create train and val dataloader", "\n", "dataset_ratio", "=", "200", "# enlarge the size of each epoch", "\n", "for", "phase", ",", "dataset_opt", "in", "opt", "[", "'datasets'", "]", ".", "items", "(", ")", ":", "\n", "        ", "if", "phase", "==", "'train'", ":", "\n", "# train_set = create_dataset(dataset_opt)", "\n", "            ", "train_set", "=", "loader", ".", "get_dataset", "(", "opt", ",", "train", "=", "True", ")", "\n", "train_size", "=", "int", "(", "math", ".", "ceil", "(", "len", "(", "train_set", ")", "/", "dataset_opt", "[", "'batch_size'", "]", ")", ")", "\n", "total_iters", "=", "int", "(", "opt", "[", "'train'", "]", "[", "'niter'", "]", ")", "\n", "total_epochs", "=", "int", "(", "math", ".", "ceil", "(", "total_iters", "/", "train_size", ")", ")", "\n", "if", "opt", "[", "'dist'", "]", ":", "\n", "                ", "train_sampler", "=", "DistIterSampler", "(", "train_set", ",", "world_size", ",", "rank", ",", "dataset_ratio", ")", "\n", "total_epochs", "=", "int", "(", "math", ".", "ceil", "(", "total_iters", "/", "(", "train_size", "*", "dataset_ratio", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "train_sampler", "=", "None", "\n", "", "train_loader", "=", "create_dataloader", "(", "train_set", ",", "dataset_opt", ",", "opt", ",", "train_sampler", ")", "\n", "if", "rank", "<=", "0", ":", "\n", "                ", "logger", ".", "info", "(", "'Number of train images: {:,d}, iters: {:,d}'", ".", "format", "(", "\n", "len", "(", "train_set", ")", ",", "train_size", ")", ")", "\n", "logger", ".", "info", "(", "'Total epochs needed: {:d} for iters {:,d}'", ".", "format", "(", "\n", "total_epochs", ",", "total_iters", ")", ")", "\n", "", "", "elif", "phase", "==", "'val'", ":", "\n", "            ", "val_set", "=", "create_dataset", "(", "dataset_opt", ",", "scale", "=", "opt", "[", "'scale'", "]", ")", "\n", "# val_set = loader.get_dataset(opt, train=False)", "\n", "val_loader", "=", "create_dataloader", "(", "val_set", ",", "dataset_opt", ",", "opt", ",", "None", ")", "\n", "if", "rank", "<=", "0", ":", "\n", "                ", "logger", ".", "info", "(", "'Number of val images in [{:s}]: {:d}'", ".", "format", "(", "\n", "dataset_opt", "[", "'name'", "]", ",", "len", "(", "val_set", ")", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Phase [{:s}] is not recognized.'", ".", "format", "(", "phase", ")", ")", "\n", "", "", "assert", "train_loader", "is", "not", "None", "\n", "\n", "#### create model", "\n", "model", "=", "create_model", "(", "opt", ")", "\n", "center_idx", "=", "opt", "[", "'datasets'", "]", "[", "'train'", "]", "[", "'N_frames'", "]", "//", "2", "\n", "\n", "#### resume training", "\n", "if", "resume_state", ":", "\n", "        ", "logger", ".", "info", "(", "'Resuming training from epoch: {}, iter: {}.'", ".", "format", "(", "\n", "resume_state", "[", "'epoch'", "]", ",", "resume_state", "[", "'iter'", "]", ")", ")", "\n", "\n", "start_epoch", "=", "resume_state", "[", "'epoch'", "]", "\n", "current_step", "=", "resume_state", "[", "'iter'", "]", "\n", "model", ".", "resume_training", "(", "resume_state", ")", "# handle optimizers and schedulers", "\n", "", "else", ":", "\n", "        ", "current_step", "=", "0", "\n", "start_epoch", "=", "0", "\n", "\n", "#### training", "\n", "", "logger", ".", "info", "(", "'Start training from epoch: {:d}, iter: {:d}'", ".", "format", "(", "start_epoch", ",", "current_step", ")", ")", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "total_epochs", "+", "1", ")", ":", "\n", "        ", "if", "opt", "[", "'dist'", "]", ":", "\n", "            ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "", "for", "_", ",", "train_data", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "train_data", "[", "'GT'", "]", "=", "train_data", "[", "'GT'", "]", "[", ":", ",", "center_idx", "]", "\n", "current_step", "+=", "1", "\n", "if", "current_step", ">", "total_iters", ":", "\n", "                ", "break", "\n", "#### update learning rate", "\n", "", "model", ".", "update_learning_rate", "(", "current_step", ",", "warmup_iter", "=", "opt", "[", "'train'", "]", "[", "'warmup_iter'", "]", ")", "\n", "\n", "#### training", "\n", "if", "opt", "[", "'network_G'", "]", "[", "'which_model_G'", "]", "==", "'TOF'", ":", "\n", "# Bicubic upsample to match the size", "\n", "                ", "LQs", "=", "train_data", "[", "'LQs'", "]", "\n", "B", ",", "T", ",", "C", ",", "H", ",", "W", "=", "LQs", ".", "shape", "\n", "LQs", "=", "LQs", ".", "reshape", "(", "B", "*", "T", ",", "C", ",", "H", ",", "W", ")", "\n", "Bic_LQs", "=", "F", ".", "interpolate", "(", "LQs", ",", "scale_factor", "=", "opt", "[", "'scale'", "]", ",", "mode", "=", "'bicubic'", ",", "align_corners", "=", "True", ")", "\n", "train_data", "[", "'LQs'", "]", "=", "Bic_LQs", ".", "reshape", "(", "B", ",", "T", ",", "C", ",", "H", "*", "opt", "[", "'scale'", "]", ",", "W", "*", "opt", "[", "'scale'", "]", ")", "\n", "", "model", ".", "feed_data", "(", "train_data", ")", "\n", "model", ".", "optimize_parameters", "(", "current_step", ")", "\n", "\n", "#### log", "\n", "if", "current_step", "%", "opt", "[", "'logger'", "]", "[", "'print_freq'", "]", "==", "0", ":", "\n", "                ", "logs", "=", "model", ".", "get_current_log", "(", ")", "\n", "message", "=", "'[epoch:{:3d}, iter:{:8,d}, lr:('", ".", "format", "(", "epoch", ",", "current_step", ")", "\n", "for", "v", "in", "model", ".", "get_current_learning_rate", "(", ")", ":", "\n", "                    ", "message", "+=", "'{:.3e},'", ".", "format", "(", "v", ")", "\n", "", "message", "+=", "')] '", "\n", "for", "k", ",", "v", "in", "logs", ".", "items", "(", ")", ":", "\n", "                    ", "message", "+=", "'{:s}: {:.4e} '", ".", "format", "(", "k", ",", "v", ")", "\n", "# tensorboard logger", "\n", "if", "opt", "[", "'use_tb_logger'", "]", "and", "'debug'", "not", "in", "opt", "[", "'name'", "]", ":", "\n", "                        ", "if", "rank", "<=", "0", ":", "\n", "                            ", "tb_logger", ".", "add_scalar", "(", "k", ",", "v", ",", "current_step", ")", "\n", "", "", "", "if", "rank", "<=", "0", ":", "\n", "                    ", "logger", ".", "info", "(", "message", ")", "\n", "#### validation", "\n", "", "", "if", "opt", "[", "'datasets'", "]", ".", "get", "(", "'val'", ",", "None", ")", "and", "current_step", "%", "opt", "[", "'train'", "]", "[", "'val_freq'", "]", "==", "0", ":", "\n", "                ", "if", "opt", "[", "'model'", "]", "in", "[", "'sr'", ",", "'srgan'", "]", "and", "rank", "<=", "0", ":", "# image restoration validation", "\n", "# does not support multi-GPU validation", "\n", "                    ", "pbar", "=", "util", ".", "ProgressBar", "(", "len", "(", "val_loader", ")", ")", "\n", "avg_psnr", "=", "0.", "\n", "idx", "=", "0", "\n", "for", "val_data", "in", "val_loader", ":", "\n", "                        ", "idx", "+=", "1", "\n", "img_name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "val_data", "[", "'LQ_path'", "]", "[", "0", "]", ")", ")", "[", "0", "]", "\n", "img_dir", "=", "os", ".", "path", ".", "join", "(", "opt", "[", "'path'", "]", "[", "'val_images'", "]", ",", "img_name", ")", "\n", "util", ".", "mkdir", "(", "img_dir", ")", "\n", "\n", "model", ".", "feed_data", "(", "val_data", ")", "\n", "model", ".", "test", "(", ")", "\n", "\n", "visuals", "=", "model", ".", "get_current_visuals", "(", ")", "\n", "sr_img", "=", "util", ".", "tensor2img", "(", "visuals", "[", "'rlt'", "]", ")", "# uint8", "\n", "gt_img", "=", "util", ".", "tensor2img", "(", "visuals", "[", "'GT'", "]", ")", "# uint8", "\n", "\n", "# Save SR images for reference", "\n", "save_img_path", "=", "os", ".", "path", ".", "join", "(", "img_dir", ",", "\n", "'{:s}_{:d}.png'", ".", "format", "(", "img_name", ",", "current_step", ")", ")", "\n", "util", ".", "save_img", "(", "sr_img", ",", "save_img_path", ")", "\n", "\n", "# calculate PSNR", "\n", "sr_img", ",", "gt_img", "=", "util", ".", "crop_border", "(", "[", "sr_img", ",", "gt_img", "]", ",", "opt", "[", "'scale'", "]", ")", "\n", "avg_psnr", "+=", "util", ".", "calculate_psnr", "(", "sr_img", ",", "gt_img", ")", "\n", "pbar", ".", "update", "(", "'Test {}'", ".", "format", "(", "img_name", ")", ")", "\n", "\n", "", "avg_psnr", "=", "avg_psnr", "/", "idx", "\n", "\n", "# log", "\n", "logger", ".", "info", "(", "'# Validation # PSNR: {:.4e}'", ".", "format", "(", "avg_psnr", ")", ")", "\n", "# tensorboard logger", "\n", "if", "opt", "[", "'use_tb_logger'", "]", "and", "'debug'", "not", "in", "opt", "[", "'name'", "]", ":", "\n", "                        ", "tb_logger", ".", "add_scalar", "(", "'psnr'", ",", "avg_psnr", ",", "current_step", ")", "\n", "", "", "else", ":", "# video restoration validation", "\n", "                    ", "if", "opt", "[", "'dist'", "]", ":", "\n", "# multi-GPU testing", "\n", "                        ", "psnr_rlt", "=", "{", "}", "# with border and center frames", "\n", "if", "rank", "==", "0", ":", "\n", "                            ", "pbar", "=", "util", ".", "ProgressBar", "(", "len", "(", "val_set", ")", ")", "\n", "", "for", "idx", "in", "range", "(", "rank", ",", "len", "(", "val_set", ")", ",", "world_size", ")", ":", "\n", "                            ", "val_data", "=", "val_set", "[", "idx", "]", "\n", "val_data", "[", "'LQs'", "]", ".", "unsqueeze_", "(", "0", ")", "\n", "val_data", "[", "'GT'", "]", ".", "unsqueeze_", "(", "0", ")", "\n", "folder", "=", "val_data", "[", "'folder'", "]", "\n", "idx_d", ",", "max_idx", "=", "val_data", "[", "'idx'", "]", ".", "split", "(", "'/'", ")", "\n", "idx_d", ",", "max_idx", "=", "int", "(", "idx_d", ")", ",", "int", "(", "max_idx", ")", "\n", "\n", "name", "=", "'{}/{:08d}'", ".", "format", "(", "folder", ",", "idx_d", ")", "\n", "train_folder", "=", "os", ".", "path", ".", "join", "(", "'../results'", ",", "opt", "[", "'name'", "]", ",", "name", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "train_folder", ")", ":", "\n", "                                ", "os", ".", "makedirs", "(", "train_folder", ",", "exist_ok", "=", "True", ")", "\n", "", "if", "psnr_rlt", ".", "get", "(", "folder", ",", "None", ")", "is", "None", ":", "\n", "                                ", "psnr_rlt", "[", "folder", "]", "=", "torch", ".", "zeros", "(", "max_idx", ",", "dtype", "=", "torch", ".", "float32", ",", "\n", "device", "=", "'cuda'", ")", "\n", "", "'''\n                            folder = val_data['folder']\n                            idx_d, max_idx = val_data['idx'].split('/')\n                            idx_d, max_idx = int(idx_d), int(max_idx)\n                            if psnr_rlt.get(folder, None) is None:\n                                psnr_rlt[folder] = torch.zeros(max_idx, dtype=torch.float32,\n                                                               device='cuda')\n                            # tmp = torch.zeros(max_idx, dtype=torch.float32, device='cuda')\n                            '''", "\n", "if", "max_idx", "<", "80", "or", "(", "idx_d", "<", "max_idx", "/", "2", "and", "max_idx", ">=", "80", ")", ":", "\n", "                                ", "if", "opt", "[", "'network_G'", "]", "[", "'which_model_G'", "]", "==", "'TOF'", ":", "\n", "# Bicubic upsample to match the size", "\n", "                                    ", "LQs", "=", "val_data", "[", "'LQs'", "]", "\n", "B", ",", "T", ",", "C", ",", "H", ",", "W", "=", "LQs", ".", "shape", "\n", "LQs", "=", "LQs", ".", "reshape", "(", "B", "*", "T", ",", "C", ",", "H", ",", "W", ")", "\n", "Bic_LQs", "=", "F", ".", "interpolate", "(", "LQs", ",", "scale_factor", "=", "opt", "[", "'scale'", "]", ",", "mode", "=", "'bicubic'", ",", "align_corners", "=", "True", ")", "\n", "val_data", "[", "'LQs'", "]", "=", "Bic_LQs", ".", "reshape", "(", "B", ",", "T", ",", "C", ",", "H", "*", "opt", "[", "'scale'", "]", ",", "W", "*", "opt", "[", "'scale'", "]", ")", "\n", "", "model", ".", "feed_data", "(", "val_data", ")", "\n", "model", ".", "test", "(", ")", "\n", "visuals", "=", "model", ".", "get_current_visuals", "(", ")", "\n", "rlt_img", "=", "util", ".", "tensor2img", "(", "visuals", "[", "'rlt'", "]", ",", "mode", "=", "'rgb'", ")", "# uint8, RGB", "\n", "gt_img", "=", "util", ".", "tensor2img", "(", "visuals", "[", "'GT'", "]", ",", "mode", "=", "'rgb'", ")", "# uint8, RGB", "\n", "imageio", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "train_folder", ",", "'hr.png'", ")", ",", "gt_img", ")", "\n", "imageio", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "train_folder", ",", "'sr.png'", ")", ",", "rlt_img", ")", "\n", "# calculate PSNR", "\n", "psnr_rlt", "[", "folder", "]", "[", "idx_d", "]", "=", "util", ".", "calculate_psnr", "(", "rlt_img", ",", "gt_img", ")", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "                                    ", "for", "_", "in", "range", "(", "world_size", ")", ":", "\n", "                                        ", "pbar", ".", "update", "(", "'Test {} - {}/{}'", ".", "format", "(", "folder", ",", "idx_d", ",", "max_idx", ")", ")", "\n", "# # collect data", "\n", "", "", "", "", "for", "_", ",", "v", "in", "psnr_rlt", ".", "items", "(", ")", ":", "\n", "                            ", "dist", ".", "reduce", "(", "v", ",", "0", ")", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "                            ", "psnr_rlt_avg", "=", "{", "}", "\n", "psnr_total_avg", "=", "0.", "\n", "for", "k", ",", "v", "in", "psnr_rlt", ".", "items", "(", ")", ":", "\n", "                                ", "psnr_rlt_avg", "[", "k", "]", "=", "torch", ".", "mean", "(", "v", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "psnr_total_avg", "+=", "psnr_rlt_avg", "[", "k", "]", "\n", "", "psnr_total_avg", "/=", "len", "(", "psnr_rlt", ")", "\n", "log_s", "=", "'# Validation # PSNR: {:.4e}'", ".", "format", "(", "psnr_total_avg", ")", "\n", "for", "k", ",", "v", "in", "psnr_rlt_avg", ".", "items", "(", ")", ":", "\n", "                                ", "log_s", "+=", "' {}: {:.4e}'", ".", "format", "(", "k", ",", "v", ")", "\n", "", "logger", ".", "info", "(", "log_s", ")", "\n", "if", "opt", "[", "'use_tb_logger'", "]", "and", "'debug'", "not", "in", "opt", "[", "'name'", "]", ":", "\n", "                                ", "tb_logger", ".", "add_scalar", "(", "'psnr_avg'", ",", "psnr_total_avg", ",", "current_step", ")", "\n", "for", "k", ",", "v", "in", "psnr_rlt_avg", ".", "items", "(", ")", ":", "\n", "                                    ", "tb_logger", ".", "add_scalar", "(", "k", ",", "v", ",", "current_step", ")", "\n", "", "", "", "", "else", ":", "\n", "                        ", "pbar", "=", "util", ".", "ProgressBar", "(", "len", "(", "val_loader", ")", ")", "\n", "psnr_rlt", "=", "{", "}", "# with border and center frames", "\n", "psnr_rlt_avg", "=", "{", "}", "\n", "psnr_total_avg", "=", "0.", "\n", "for", "val_data", "in", "val_loader", ":", "\n", "                            ", "folder", "=", "val_data", "[", "'folder'", "]", "[", "0", "]", "\n", "idx_d", "=", "val_data", "[", "'idx'", "]", "[", "0", "]", "\n", "# border = val_data['border'].item()", "\n", "name", "=", "'{}/{:08d}'", ".", "format", "(", "folder", ",", "idx_d", ")", "\n", "train_folder", "=", "os", ".", "path", ".", "join", "(", "'../results'", ",", "opt", "[", "'name'", "]", ",", "name", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "train_folder", ")", ":", "\n", "                                ", "os", ".", "makedirs", "(", "train_folder", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "if", "psnr_rlt", ".", "get", "(", "folder", ",", "None", ")", "is", "None", ":", "\n", "                                ", "psnr_rlt", "[", "folder", "]", "=", "[", "]", "\n", "\n", "", "video_length", "=", "val_data", "[", "'LQs'", "]", ".", "size", "(", "1", ")", "\n", "print", "(", "video_length", ")", "\n", "print", "(", "val_data", "[", "'LQs'", "]", ".", "shape", ",", "val_data", "[", "'GT'", "]", ".", "shape", ")", "\n", "for", "i", "in", "range", "(", "video_length", ")", ":", "\n", "                                ", "val_seg", "=", "{", "}", "\n", "select_idx", "=", "data_util", ".", "index_generation", "(", "i", ",", "video_length", ",", "opt", "[", "'datasets'", "]", "[", "'train'", "]", "[", "'N_frames'", "]", ")", "\n", "val_seg", "[", "'LQs'", "]", "=", "val_data", "[", "'LQs'", "]", "[", ":", ",", "select_idx", "]", "\n", "val_seg", "[", "'GT'", "]", "=", "val_data", "[", "'GT'", "]", "[", ":", ",", "i", "]", "\n", "model", ".", "feed_data", "(", "val_seg", ")", "\n", "model", ".", "test", "(", ")", "\n", "visuals", "=", "model", ".", "get_current_visuals", "(", ")", "\n", "rlt_img", "=", "util", ".", "tensor2img", "(", "visuals", "[", "'rlt'", "]", ",", "mode", "=", "'rgb'", ")", "# uint8, RGB", "\n", "gt_img", "=", "util", ".", "tensor2img", "(", "visuals", "[", "'GT'", "]", ",", "mode", "=", "'rgb'", ")", "# uint8, RGB", "\n", "imageio", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "train_folder", ",", "'hr.png'", ")", ",", "gt_img", ")", "\n", "imageio", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "train_folder", ",", "'sr.png'", ")", ",", "rlt_img", ")", "\n", "# calculate PSNR", "\n", "psnr", ",", "_", "=", "utility", ".", "calc_psnr", "(", "rlt_img", ",", "gt_img", ")", "\n", "", "pbar", ".", "update", "(", "'Test {} - {}'", ".", "format", "(", "folder", ",", "idx_d", ")", ")", "\n", "\n", "", "for", "k", ",", "v", "in", "psnr_rlt", ".", "items", "(", ")", ":", "\n", "                            ", "psnr_rlt_avg", "[", "k", "]", "=", "sum", "(", "v", ")", "/", "len", "(", "v", ")", "\n", "psnr_total_avg", "+=", "psnr_rlt_avg", "[", "k", "]", "\n", "", "psnr_total_avg", "/=", "len", "(", "psnr_rlt", ")", "\n", "log_s", "=", "'# Validation # PSNR: {:.4e}:'", ".", "format", "(", "psnr_total_avg", ")", "\n", "for", "k", ",", "v", "in", "psnr_rlt_avg", ".", "items", "(", ")", ":", "\n", "                            ", "log_s", "+=", "' {}: {:.4e}'", ".", "format", "(", "k", ",", "v", ")", "\n", "", "logger", ".", "info", "(", "log_s", ")", "\n", "if", "opt", "[", "'use_tb_logger'", "]", "and", "'debug'", "not", "in", "opt", "[", "'name'", "]", ":", "\n", "                            ", "tb_logger", ".", "add_scalar", "(", "'psnr_avg'", ",", "psnr_total_avg", ",", "current_step", ")", "\n", "for", "k", ",", "v", "in", "psnr_rlt_avg", ".", "items", "(", ")", ":", "\n", "                                ", "tb_logger", ".", "add_scalar", "(", "k", ",", "v", ",", "current_step", ")", "\n", "\n", "#### save models and training states", "\n", "", "", "", "", "", "if", "current_step", "%", "opt", "[", "'logger'", "]", "[", "'save_checkpoint_freq'", "]", "==", "0", ":", "\n", "                ", "if", "rank", "<=", "0", ":", "\n", "                    ", "logger", ".", "info", "(", "'Saving models and training states.'", ")", "\n", "model", ".", "save", "(", "current_step", ")", "\n", "model", ".", "save_training_state", "(", "epoch", ",", "current_step", ")", "\n", "\n", "", "", "", "", "if", "rank", "<=", "0", ":", "\n", "        ", "logger", ".", "info", "(", "'Saving the final model.'", ")", "\n", "model", ".", "save", "(", "'latest'", ")", "\n", "logger", ".", "info", "(", "'End of training.'", ")", "\n", "tb_logger", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.codes.calc_psnr_ssim.main": [[19, 220], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "utils.mkdirs", "utils.setup_logger", "logging.getLogger", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "sorted", "sorted", "zip", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "print", "glob.glob", "glob.glob", "os.basename", "subfolder_name_l.append", "os.join", "sorted", "len", "sorted", "sorted", "enumerate", "avg_psnr_l.append", "avg_psnr_center_l.append", "avg_psnr_border_l.append", "avg_ssim_l.append", "avg_ssim_center_l.append", "avg_ssim_border_l.append", "logging.getLogger.info", "logging.getLogger.info", "str", "os.join", "os.join", "glob.glob", "utils.mkdirs", "glob.glob", "img_LQ_l.append", "glob.glob", "img_GT_l.append", "numpy.copy", "numpy.copy", "utils.crop_border", "utils.calculate_psnr", "utils.calculate_ssim", "len", "len", "os.join", "os.join", "data.read_img", "os.join", "data.read_img", "os.splitext", "cv2.imwrite", "sum", "len", "sum", "len", "sum", "len", "sum", "len", "sum", "len", "sum", "len", "str", "os.basename", "os.join", "k.find", "k.find", "k.find", "k.find", "str"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.mkdirs", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.setup_logger", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.mkdirs", "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.crop_border", "home.repos.pwc.inspect_result.esw0116_DynaVSR.metrics.calculate_PSNR_SSIM.calculate_psnr", "home.repos.pwc.inspect_result.esw0116_DynaVSR.metrics.calculate_PSNR_SSIM.calculate_ssim", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.read_img", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.read_img"], ["def", "main", "(", ")", ":", "\n", "#################", "\n", "# configurations", "\n", "#################", "\n", "    ", "flip_test", "=", "False", "\n", "scale", "=", "4", "\n", "N_in", "=", "7", "\n", "predeblur", ",", "HR_in", "=", "False", ",", "False", "\n", "n_feats", "=", "128", "\n", "back_RBs", "=", "40", "\n", "\n", "save_imgs", "=", "False", "\n", "prog", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "prog", ".", "add_argument", "(", "'--train_mode'", ",", "'-t'", ",", "type", "=", "str", ",", "default", "=", "'REDS'", ",", "help", "=", "'train mode'", ")", "\n", "prog", ".", "add_argument", "(", "'--data_mode'", ",", "'-m'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'data_mode'", ")", "\n", "prog", ".", "add_argument", "(", "'--degradation_mode'", ",", "'-d'", ",", "type", "=", "str", ",", "default", "=", "'impulse'", ",", "choices", "=", "(", "'impulse'", ",", "'bicubic'", ",", "'preset'", ")", ",", "help", "=", "'path to image output directory.'", ")", "\n", "prog", ".", "add_argument", "(", "'--sigma_x'", ",", "'-sx'", ",", "type", "=", "float", ",", "default", "=", "1", ",", "help", "=", "'sigma_x'", ")", "\n", "prog", ".", "add_argument", "(", "'--sigma_y'", ",", "'-sy'", ",", "type", "=", "float", ",", "default", "=", "0", ",", "help", "=", "'sigma_y'", ")", "\n", "prog", ".", "add_argument", "(", "'--theta'", ",", "'-th'", ",", "type", "=", "float", ",", "default", "=", "0", ",", "help", "=", "'theta'", ")", "\n", "prog", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'name for subdirectory'", ")", "\n", "\n", "args", "=", "prog", ".", "parse_args", "(", ")", "\n", "\n", "train_data_mode", "=", "args", ".", "train_mode", "\n", "data_mode", "=", "args", ".", "data_mode", "\n", "if", "data_mode", "is", "None", ":", "\n", "        ", "if", "train_data_mode", "==", "'Vimeo'", ":", "\n", "            ", "data_mode", "=", "'Vid4'", "\n", "", "elif", "train_data_mode", "==", "'REDS'", ":", "\n", "            ", "data_mode", "=", "'REDS'", "\n", "", "", "degradation_mode", "=", "args", ".", "degradation_mode", "# impulse | bicubic | preset", "\n", "sig_x", ",", "sig_y", ",", "the", "=", "args", ".", "sigma_x", ",", "args", ".", "sigma_y", ",", "args", ".", "theta", "\n", "if", "sig_y", "==", "0", ":", "\n", "        ", "sig_y", "=", "sig_x", "\n", "\n", "", "folder_subname", "=", "'preset'", "if", "degradation_mode", "==", "'preset'", "else", "degradation_mode", "+", "'_'", "+", "str", "(", "\n", "'{:.1f}'", ".", "format", "(", "sig_x", ")", ")", "+", "'_'", "+", "str", "(", "'{:.1f}'", ".", "format", "(", "sig_y", ")", ")", "+", "'_'", "+", "str", "(", "'{:.1f}'", ".", "format", "(", "the", ")", ")", "\n", "\n", "#### dataset", "\n", "if", "data_mode", "==", "'Vid4'", ":", "\n", "        ", "test_dataset_folder", "=", "'../dataset/Vid4/LR_{}/X1_KG_ZSSR'", ".", "format", "(", "folder_subname", ")", "\n", "#test_dataset_folder = '../dataset/Vid4/LR_{}/X1_CF_DBPN'.format(folder_subname)", "\n", "GT_dataset_folder", "=", "'../dataset/Vid4/HR'", "\n", "", "elif", "data_mode", "==", "'MM522'", ":", "\n", "        ", "test_dataset_folder", "=", "'../dataset/MM522val/LR_bicubic/X1_KG_ZSSR'", "\n", "GT_dataset_folder", "=", "'../dataset/MM522val/HR'", "\n", "", "else", ":", "\n", "# test_dataset_folder = '../dataset/REDS4/LR_bicubic/X{}'.format(scale)", "\n", "        ", "test_dataset_folder", "=", "'../dataset/REDS/train/LR_{}/X1_KG_ZSSR'", ".", "format", "(", "folder_subname", ")", "\n", "#test_dataset_folder = '../dataset/REDS/train/LR_{}/X1_CF_DBPN'.format(folder_subname)", "\n", "GT_dataset_folder", "=", "'../dataset/REDS/train/HR'", "\n", "\n", "#### evaluation", "\n", "", "crop_border", "=", "0", "\n", "border_frame", "=", "0", "# N_in // 2  # border frames when evaluate", "\n", "# temporal padding mode", "\n", "padding", "=", "'new_info'", "\n", "\n", "save_folder", "=", "'../results/{}'", ".", "format", "(", "data_mode", ")", "\n", "util", ".", "mkdirs", "(", "save_folder", ")", "\n", "util", ".", "setup_logger", "(", "'base'", ",", "save_folder", ",", "'test'", ",", "level", "=", "logging", ".", "INFO", ",", "screen", "=", "True", ",", "tofile", "=", "True", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'base'", ")", "\n", "\n", "#### log info", "\n", "logger", ".", "info", "(", "'Data: {} - {}'", ".", "format", "(", "data_mode", ",", "test_dataset_folder", ")", ")", "\n", "logger", ".", "info", "(", "'Padding mode: {}'", ".", "format", "(", "padding", ")", ")", "\n", "logger", ".", "info", "(", "'Save images: {}'", ".", "format", "(", "save_imgs", ")", ")", "\n", "logger", ".", "info", "(", "'Flip test: {}'", ".", "format", "(", "flip_test", ")", ")", "\n", "\n", "avg_psnr_l", ",", "avg_psnr_center_l", ",", "avg_psnr_border_l", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "avg_ssim_l", ",", "avg_ssim_center_l", ",", "avg_ssim_border_l", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "subfolder_name_l", "=", "[", "]", "\n", "\n", "subfolder_l", "=", "sorted", "(", "glob", ".", "glob", "(", "osp", ".", "join", "(", "test_dataset_folder", ",", "'*'", ")", ")", ")", "\n", "subfolder_GT_l", "=", "sorted", "(", "glob", ".", "glob", "(", "osp", ".", "join", "(", "GT_dataset_folder", ",", "'*'", ")", ")", ")", "\n", "if", "data_mode", "==", "'REDS'", ":", "\n", "        ", "subfolder_GT_l", "=", "[", "k", "for", "k", "in", "subfolder_GT_l", "if", "\n", "k", ".", "find", "(", "'000'", ")", ">=", "0", "or", "k", ".", "find", "(", "'011'", ")", ">=", "0", "or", "k", ".", "find", "(", "'015'", ")", ">=", "0", "or", "k", ".", "find", "(", "'020'", ")", ">=", "0", "]", "\n", "# for each subfolder", "\n", "", "for", "subfolder", ",", "subfolder_GT", "in", "zip", "(", "subfolder_l", ",", "subfolder_GT_l", ")", ":", "\n", "        ", "subfolder_name", "=", "osp", ".", "basename", "(", "subfolder", ")", "\n", "subfolder_name_l", ".", "append", "(", "subfolder_name", ")", "\n", "save_subfolder", "=", "osp", ".", "join", "(", "save_folder", ",", "subfolder_name", ")", "\n", "\n", "img_path_l", "=", "sorted", "(", "glob", ".", "glob", "(", "osp", ".", "join", "(", "subfolder_GT", ",", "'*5.png'", ")", ")", ")", "## *5.png", "\n", "max_idx", "=", "len", "(", "img_path_l", ")", "\n", "if", "save_imgs", ":", "\n", "            ", "util", ".", "mkdirs", "(", "save_subfolder", ")", "\n", "\n", "#### read LQ and GT images", "\n", "", "img_LQ_l", "=", "[", "]", "\n", "img_GT_l", "=", "[", "]", "\n", "for", "img_LQ_path", "in", "sorted", "(", "glob", ".", "glob", "(", "osp", ".", "join", "(", "subfolder", ",", "'*5.png.png'", ")", ")", ")", ":", "\n", "            ", "img_LQ_l", ".", "append", "(", "data_util", ".", "read_img", "(", "None", ",", "img_LQ_path", ")", ")", "\n", "\n", "", "for", "img_GT_path", "in", "sorted", "(", "glob", ".", "glob", "(", "osp", ".", "join", "(", "subfolder_GT", ",", "'*5.png'", ")", ")", ")", ":", "### *5.png", "\n", "            ", "img_GT_l", ".", "append", "(", "data_util", ".", "read_img", "(", "None", ",", "img_GT_path", ")", ")", "\n", "\n", "", "avg_psnr", ",", "avg_psnr_border", ",", "avg_psnr_center", ",", "N_border", ",", "N_center", "=", "0", ",", "0", ",", "0", ",", "0", ",", "0", "\n", "avg_ssim", ",", "avg_ssim_border", ",", "avg_ssim_center", "=", "0", ",", "0", ",", "0", "\n", "\n", "# process each image", "\n", "for", "img_idx", ",", "img_path", "in", "enumerate", "(", "img_path_l", ")", ":", "\n", "            ", "img_name", "=", "osp", ".", "splitext", "(", "osp", ".", "basename", "(", "img_path", ")", ")", "[", "0", "]", "\n", "\n", "if", "save_imgs", ":", "\n", "                ", "cv2", ".", "imwrite", "(", "osp", ".", "join", "(", "save_subfolder", ",", "'{}.png'", ".", "format", "(", "img_name", ")", ")", ",", "output", ")", "\n", "\n", "# calculate PSNR", "\n", "", "output", "=", "np", ".", "copy", "(", "img_LQ_l", "[", "img_idx", "]", ")", "\n", "GT", "=", "np", ".", "copy", "(", "img_GT_l", "[", "img_idx", "]", ")", "\n", "'''\n            output_tensor = torch.from_numpy(np.copy(output[:,:,::-1])).permute(2,0,1)\n            GT_tensor = torch.from_numpy(np.copy(GT[:,:,::-1])).permute(2,0,1).type_as(output_tensor)\n            torch.save(output_tensor.cpu(), '../results/sr_test.pt')\n            torch.save(GT_tensor.cpu(), '../results/hr_test.pt')\n            my_psnr = utility.calc_psnr(output_tensor, GT_tensor)\n            GT_tensor = GT_tensor.cpu().numpy().transpose(1,2,0)\n            imageio.imwrite('../results/hr_test.png', GT_tensor)\n            print('saved', my_psnr)\n            '''", "\n", "'''\n            # For REDS, evaluate on RGB channels; for Vid4, evaluate on the Y channel\n            if data_mode == 'Vid4' or 'sharp_bicubic' or 'MM522':  # bgr2y, [0, 1]\n                GT = data_util.bgr2ycbcr(GT, only_y=True)\n                output = data_util.bgr2ycbcr(output, only_y=True)\n            '''", "\n", "output", "=", "(", "output", "*", "255", ")", ".", "round", "(", ")", ".", "astype", "(", "'uint8'", ")", "\n", "GT", "=", "(", "GT", "*", "255", ")", ".", "round", "(", ")", ".", "astype", "(", "'uint8'", ")", "\n", "output", ",", "GT", "=", "util", ".", "crop_border", "(", "[", "output", ",", "GT", "]", ",", "crop_border", ")", "\n", "crt_psnr", "=", "util", ".", "calculate_psnr", "(", "output", ",", "GT", ")", "\n", "crt_ssim", "=", "util", ".", "calculate_ssim", "(", "output", ",", "GT", ")", "\n", "\n", "# logger.info('{:3d} - {:16} \\tPSNR: {:.6f} dB \\tSSIM: {:.6f}'.format(img_idx + 1, img_name, crt_psnr, crt_ssim))", "\n", "\n", "if", "img_idx", ">=", "border_frame", "and", "img_idx", "<", "max_idx", "-", "border_frame", ":", "# center frames", "\n", "                ", "avg_psnr_center", "+=", "crt_psnr", "\n", "avg_ssim_center", "+=", "crt_ssim", "\n", "N_center", "+=", "1", "\n", "", "else", ":", "# border frames", "\n", "                ", "avg_psnr_border", "+=", "crt_psnr", "\n", "avg_ssim_border", "+=", "crt_ssim", "\n", "N_border", "+=", "1", "\n", "", "", "avg_psnr", "=", "(", "avg_psnr_center", "+", "avg_psnr_border", ")", "/", "(", "N_center", "+", "N_border", ")", "\n", "avg_psnr_center", "=", "avg_psnr_center", "/", "N_center", "\n", "avg_psnr_border", "=", "0", "if", "N_border", "==", "0", "else", "avg_psnr_border", "/", "N_border", "\n", "avg_psnr_l", ".", "append", "(", "avg_psnr", ")", "\n", "avg_psnr_center_l", ".", "append", "(", "avg_psnr_center", ")", "\n", "avg_psnr_border_l", ".", "append", "(", "avg_psnr_border", ")", "\n", "\n", "avg_ssim", "=", "(", "avg_ssim_center", "+", "avg_ssim_border", ")", "/", "(", "N_center", "+", "N_border", ")", "\n", "avg_ssim_center", "=", "avg_ssim_center", "/", "N_center", "\n", "avg_ssim_border", "=", "0", "if", "N_border", "==", "0", "else", "avg_ssim_border", "/", "N_border", "\n", "avg_ssim_l", ".", "append", "(", "avg_ssim", ")", "\n", "avg_ssim_center_l", ".", "append", "(", "avg_ssim_center", ")", "\n", "avg_ssim_border_l", ".", "append", "(", "avg_ssim_border", ")", "\n", "\n", "logger", ".", "info", "(", "'Folder {} - Average PSNR: {:.6f} dB for {} frames; '", "\n", "'Center PSNR: {:.6f} dB for {} frames; '", "\n", "'Border PSNR: {:.6f} dB for {} frames.'", ".", "format", "(", "subfolder_name", ",", "avg_psnr", ",", "\n", "(", "N_center", "+", "N_border", ")", ",", "\n", "avg_psnr_center", ",", "N_center", ",", "\n", "avg_psnr_border", ",", "N_border", ")", ")", "\n", "\n", "logger", ".", "info", "(", "'Folder {} - Average SSIM: {:.6f} for {} frames; '", "\n", "'Center SSIM: {:.6f} for {} frames; '", "\n", "'Border SSIM: {:.6f} for {} frames.'", ".", "format", "(", "subfolder_name", ",", "avg_ssim", ",", "\n", "(", "N_center", "+", "N_border", ")", ",", "\n", "avg_ssim_center", ",", "N_center", ",", "\n", "avg_ssim_border", ",", "N_border", ")", ")", "\n", "\n", "", "'''\n    logger.info('################ Tidy Outputs ################')\n    for subfolder_name, psnr, psnr_center, psnr_border in zip(subfolder_name_l, avg_psnr_l,\n                                                              avg_psnr_center_l, avg_psnr_border_l):\n        logger.info('Folder {} - Average PSNR: {:.6f} dB. '\n                    'Center PSNR: {:.6f} dB. '\n                    'Border PSNR: {:.6f} dB.'.format(subfolder_name, psnr, psnr_center, psnr_border))\n    for subfolder_name, ssim, ssim_center, ssim_border in zip(subfolder_name_l, avg_ssim_l,\n                                                              avg_ssim_center_l, avg_ssim_border_l):\n        logger.info('Folder {} - Average SSIM: {:.6f}. '\n                    'Center SSIM: {:.6f}. '\n                    'Border SSIM: {:.6f}.'.format(subfolder_name, ssim, ssim_center, ssim_border))\n    '''", "\n", "logger", ".", "info", "(", "'################ Final Results ################'", ")", "\n", "logger", ".", "info", "(", "'Data: {} - {}'", ".", "format", "(", "data_mode", ",", "test_dataset_folder", ")", ")", "\n", "logger", ".", "info", "(", "'Padding mode: {}'", ".", "format", "(", "padding", ")", ")", "\n", "logger", ".", "info", "(", "'Save images: {}'", ".", "format", "(", "save_imgs", ")", ")", "\n", "logger", ".", "info", "(", "'Flip test: {}'", ".", "format", "(", "flip_test", ")", ")", "\n", "logger", ".", "info", "(", "'Total Average PSNR: {:.6f} dB for {} clips. '", "\n", "'Center PSNR: {:.6f} dB. Border PSNR: {:.6f} dB.'", ".", "format", "(", "\n", "sum", "(", "avg_psnr_l", ")", "/", "len", "(", "avg_psnr_l", ")", ",", "len", "(", "subfolder_l", ")", ",", "\n", "sum", "(", "avg_psnr_center_l", ")", "/", "len", "(", "avg_psnr_center_l", ")", ",", "\n", "sum", "(", "avg_psnr_border_l", ")", "/", "len", "(", "avg_psnr_border_l", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Total Average SSIM: {:.6f} for {} clips. '", "\n", "'Center SSIM: {:.6f}. Border PSNR: {:.6f}.'", ".", "format", "(", "\n", "sum", "(", "avg_ssim_l", ")", "/", "len", "(", "avg_ssim_l", ")", ",", "len", "(", "subfolder_l", ")", ",", "\n", "sum", "(", "avg_ssim_center_l", ")", "/", "len", "(", "avg_ssim_center_l", ")", ",", "\n", "sum", "(", "avg_ssim_border_l", ")", "/", "len", "(", "avg_ssim_border_l", ")", ")", ")", "\n", "\n", "print", "(", "'\\n\\n\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.codes.test_Vid4_REDS4_with_GT_DUF.main": [[19, 321], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.device", "utils.mkdirs", "utils.setup_logger", "logging.getLogger", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "sorted", "sorted", "DUF_arch.DUF_52L.load_state_dict", "DUF_arch.DUF_52L.eval", "DUF_arch.DUF_52L.to", "zip", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "print", "models.DUF_16L", "cv2.imread", "sorted", "numpy.stack", "torch.from_numpy().float", "range", "glob.glob", "glob.glob", "torch.load", "subfolder_name_l.append", "os.join", "sorted", "len", "test_Vid4_REDS4_with_GT_DUF.main.read_seq_imgs"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.mkdirs", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.setup_logger", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.load"], ["def", "main", "(", ")", ":", "\n", "#################", "\n", "# configurations", "\n", "#################", "\n", "    ", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "'0'", "\n", "save_imgs", "=", "False", "\n", "\n", "prog", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "prog", ".", "add_argument", "(", "'--train_mode'", ",", "'-t'", ",", "type", "=", "str", ",", "default", "=", "'Vimeo'", ",", "help", "=", "'train mode'", ")", "\n", "prog", ".", "add_argument", "(", "'--data_mode'", ",", "'-m'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'data_mode'", ")", "\n", "prog", ".", "add_argument", "(", "'--degradation_mode'", ",", "'-d'", ",", "type", "=", "str", ",", "default", "=", "'impulse'", ",", "choices", "=", "(", "'impulse'", ",", "'bicubic'", ",", "'preset'", ")", ",", "help", "=", "'path to image output directory.'", ")", "\n", "prog", ".", "add_argument", "(", "'--sigma_x'", ",", "'-sx'", ",", "type", "=", "float", ",", "default", "=", "1", ",", "help", "=", "'sigma_x'", ")", "\n", "prog", ".", "add_argument", "(", "'--sigma_y'", ",", "'-sy'", ",", "type", "=", "float", ",", "default", "=", "0", ",", "help", "=", "'sigma_y'", ")", "\n", "prog", ".", "add_argument", "(", "'--theta'", ",", "'-th'", ",", "type", "=", "float", ",", "default", "=", "0", ",", "help", "=", "'theta'", ")", "\n", "\n", "args", "=", "prog", ".", "parse_args", "(", ")", "\n", "\n", "train_mode", "=", "args", ".", "train_mode", "\n", "data_mode", "=", "args", ".", "data_mode", "\n", "if", "data_mode", "is", "None", ":", "\n", "        ", "if", "train_mode", "==", "'Vimeo'", ":", "\n", "            ", "data_mode", "=", "'Vid4'", "\n", "", "elif", "train_mode", "==", "'REDS'", ":", "\n", "            ", "data_mode", "=", "'REDS'", "\n", "", "", "degradation_mode", "=", "args", ".", "degradation_mode", "# impulse | bicubic | preset", "\n", "sig_x", ",", "sig_y", ",", "the", "=", "args", ".", "sigma_x", ",", "args", ".", "sigma_y", ",", "args", ".", "theta", "\n", "if", "sig_y", "==", "0", ":", "\n", "        ", "sig_y", "=", "sig_x", "\n", "\n", "\n", "# Possible combinations: (2, 16), (3, 16), (4, 16), (4, 28), (4, 52)", "\n", "", "scale", "=", "2", "\n", "layer", "=", "16", "\n", "assert", "(", "scale", ",", "layer", ")", "in", "[", "(", "2", ",", "16", ")", ",", "(", "3", ",", "16", ")", ",", "(", "4", ",", "16", ")", ",", "(", "4", ",", "28", ")", ",", "\n", "(", "4", ",", "52", ")", "]", ",", "'Unrecognized (scale, layer) combination'", "\n", "\n", "# model", "\n", "N_in", "=", "7", "\n", "# model_path = '../experiments/pretrained_models/DUF_{}L_BLIND_{}_FT_report.pth'.format(layer, train_mode[0])", "\n", "model_path", "=", "'../experiments/pretrained_models/DUF_{}L_{}_S{}.pth'", ".", "format", "(", "layer", ",", "train_mode", ",", "scale", ")", "\n", "# model_path = '../experiments/pretrained_models/DUF_x2_16L_official.pth'", "\n", "adapt_official", "=", "True", "# if 'official' in model_path else False", "\n", "DUF_downsampling", "=", "False", "# True | False", "\n", "if", "layer", "==", "16", ":", "\n", "        ", "model", "=", "DUF_arch", ".", "DUF_16L", "(", "scale", "=", "scale", ",", "adapt_official", "=", "adapt_official", ")", "\n", "", "elif", "layer", "==", "28", ":", "\n", "        ", "model", "=", "DUF_arch", ".", "DUF_28L", "(", "scale", "=", "scale", ",", "adapt_official", "=", "adapt_official", ")", "\n", "", "elif", "layer", "==", "52", ":", "\n", "        ", "model", "=", "DUF_arch", ".", "DUF_52L", "(", "scale", "=", "scale", ",", "adapt_official", "=", "adapt_official", ")", "\n", "\n", "#### dataset", "\n", "", "folder_subname", "=", "'preset'", "if", "degradation_mode", "==", "'preset'", "else", "degradation_mode", "+", "'_'", "+", "str", "(", "\n", "'{:.1f}'", ".", "format", "(", "sig_x", ")", ")", "+", "'_'", "+", "str", "(", "'{:.1f}'", ".", "format", "(", "sig_y", ")", ")", "+", "'_'", "+", "str", "(", "'{:.1f}'", ".", "format", "(", "the", ")", ")", "\n", "\n", "# folder_subname = degradation_mode + '_' + str('{:.1f}'.format(sig_x)) + '_' + str('{:.1f}'.format(sig_y)) + '_' + str('{:.1f}'.format(the))", "\n", "if", "data_mode", "==", "'Vid4'", ":", "\n", "# test_dataset_folder = '../dataset/Vid4/LR_bicubic/X{}'.format(scale)", "\n", "        ", "test_dataset_folder", "=", "'../dataset/Vid4/LR_{}/X{}'", ".", "format", "(", "folder_subname", ",", "scale", ")", "\n", "GT_dataset_folder", "=", "'../dataset/Vid4/HR'", "\n", "", "elif", "data_mode", "==", "'MM522'", ":", "\n", "        ", "test_dataset_folder", "=", "'../dataset/MM522val/LR_bicubic/X{}'", ".", "format", "(", "scale", ")", "\n", "GT_dataset_folder", "=", "'../dataset/MM522val/HR'", "\n", "", "else", ":", "\n", "# test_dataset_folder = '../dataset/REDS4/LR_bicubic/X{}'.format(scale)", "\n", "        ", "test_dataset_folder", "=", "'../dataset/REDS/train/LR_{}/X{}'", ".", "format", "(", "folder_subname", ",", "scale", ")", "\n", "GT_dataset_folder", "=", "'../dataset/REDS/train/HR'", "\n", "\n", "#### evaluation", "\n", "", "crop_border", "=", "0", "\n", "border_frame", "=", "N_in", "//", "2", "# border frames when evaluate", "\n", "# temporal padding mode", "\n", "padding", "=", "'new_info'", "# different from the official testing codes, which pads zeros.", "\n", "############################################################################", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "save_folder", "=", "'../results/{}'", ".", "format", "(", "data_mode", ")", "\n", "util", ".", "mkdirs", "(", "save_folder", ")", "\n", "util", ".", "setup_logger", "(", "'base'", ",", "save_folder", ",", "'test'", ",", "level", "=", "logging", ".", "INFO", ",", "screen", "=", "True", ",", "tofile", "=", "True", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'base'", ")", "\n", "\n", "#### log info", "\n", "logger", ".", "info", "(", "'Data: {} - {}'", ".", "format", "(", "data_mode", ",", "test_dataset_folder", ")", ")", "\n", "logger", ".", "info", "(", "'Padding mode: {}'", ".", "format", "(", "padding", ")", ")", "\n", "logger", ".", "info", "(", "'Model path: {}'", ".", "format", "(", "model_path", ")", ")", "\n", "logger", ".", "info", "(", "'Save images: {}'", ".", "format", "(", "save_imgs", ")", ")", "\n", "\n", "def", "read_image", "(", "img_path", ")", ":", "\n", "        ", "'''read one image from img_path\n        Return img: HWC, BGR, [0,1], numpy\n        '''", "\n", "img_GT", "=", "cv2", ".", "imread", "(", "img_path", ")", "\n", "img", "=", "img_GT", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.", "\n", "return", "img", "\n", "\n", "", "def", "read_seq_imgs", "(", "img_seq_path", ")", ":", "\n", "        ", "'''read a sequence of images'''", "\n", "img_path_l", "=", "sorted", "(", "glob", ".", "glob", "(", "img_seq_path", "+", "'/*'", ")", ")", "\n", "img_l", "=", "[", "read_image", "(", "v", ")", "for", "v", "in", "img_path_l", "]", "\n", "# stack to TCHW, RGB, [0,1], torch", "\n", "imgs", "=", "np", ".", "stack", "(", "img_l", ",", "axis", "=", "0", ")", "\n", "imgs", "=", "imgs", "[", ":", ",", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "imgs", "=", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "np", ".", "transpose", "(", "imgs", ",", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", ")", ")", ".", "float", "(", ")", "\n", "return", "imgs", "\n", "\n", "", "def", "index_generation", "(", "crt_i", ",", "max_n", ",", "N", ",", "padding", "=", "'reflection'", ")", ":", "\n", "        ", "'''\n        padding: replicate | reflection | new_info | circle\n        '''", "\n", "max_n", "=", "max_n", "-", "1", "\n", "n_pad", "=", "N", "//", "2", "\n", "return_l", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "crt_i", "-", "n_pad", ",", "crt_i", "+", "n_pad", "+", "1", ")", ":", "\n", "            ", "if", "i", "<", "0", ":", "\n", "                ", "if", "padding", "==", "'replicate'", ":", "\n", "                    ", "add_idx", "=", "0", "\n", "", "elif", "padding", "==", "'reflection'", ":", "\n", "                    ", "add_idx", "=", "-", "i", "\n", "", "elif", "padding", "==", "'new_info'", ":", "\n", "                    ", "add_idx", "=", "(", "crt_i", "+", "n_pad", ")", "+", "(", "-", "i", ")", "\n", "", "elif", "padding", "==", "'circle'", ":", "\n", "                    ", "add_idx", "=", "N", "+", "i", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "'Wrong padding mode'", ")", "\n", "", "", "elif", "i", ">", "max_n", ":", "\n", "                ", "if", "padding", "==", "'replicate'", ":", "\n", "                    ", "add_idx", "=", "max_n", "\n", "", "elif", "padding", "==", "'reflection'", ":", "\n", "                    ", "add_idx", "=", "max_n", "*", "2", "-", "i", "\n", "", "elif", "padding", "==", "'new_info'", ":", "\n", "                    ", "add_idx", "=", "(", "crt_i", "-", "n_pad", ")", "-", "(", "i", "-", "max_n", ")", "\n", "", "elif", "padding", "==", "'circle'", ":", "\n", "                    ", "add_idx", "=", "i", "-", "N", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "'Wrong padding mode'", ")", "\n", "", "", "else", ":", "\n", "                ", "add_idx", "=", "i", "\n", "", "return_l", ".", "append", "(", "add_idx", ")", "\n", "", "return", "return_l", "\n", "\n", "", "def", "single_forward", "(", "model", ",", "imgs_in", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "model_output", "=", "model", "(", "imgs_in", ")", "\n", "if", "isinstance", "(", "model_output", ",", "list", ")", "or", "isinstance", "(", "model_output", ",", "tuple", ")", ":", "\n", "                ", "output", "=", "model_output", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "output", "=", "model_output", "\n", "", "", "return", "output", "\n", "\n", "", "sub_folder_l", "=", "sorted", "(", "glob", ".", "glob", "(", "osp", ".", "join", "(", "test_dataset_folder", ",", "'*'", ")", ")", ")", "\n", "sub_folder_GT_l", "=", "sorted", "(", "glob", ".", "glob", "(", "osp", ".", "join", "(", "GT_dataset_folder", ",", "'*'", ")", ")", ")", "\n", "if", "data_mode", "==", "'REDS'", ":", "\n", "        ", "sub_folder_GT_l", "=", "[", "k", "for", "k", "in", "sub_folder_GT_l", "if", "\n", "k", ".", "find", "(", "'000'", ")", ">=", "0", "or", "k", ".", "find", "(", "'011'", ")", ">=", "0", "or", "k", ".", "find", "(", "'015'", ")", ">=", "0", "or", "k", ".", "find", "(", "'020'", ")", ">=", "0", "]", "\n", "#### set up the models", "\n", "", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ",", "strict", "=", "True", ")", "\n", "model", ".", "eval", "(", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "avg_psnr_l", ",", "avg_psnr_center_l", ",", "avg_psnr_border_l", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "avg_ssim_l", ",", "avg_ssim_center_l", ",", "avg_ssim_border_l", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "subfolder_name_l", "=", "[", "]", "\n", "\n", "# for each sub-folder", "\n", "for", "sub_folder", ",", "sub_folder_GT", "in", "zip", "(", "sub_folder_l", ",", "sub_folder_GT_l", ")", ":", "\n", "        ", "sub_folder_name", "=", "sub_folder", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "subfolder_name_l", ".", "append", "(", "sub_folder_name", ")", "\n", "save_sub_folder", "=", "osp", ".", "join", "(", "save_folder", ",", "sub_folder_name", ")", "\n", "\n", "img_path_l", "=", "sorted", "(", "glob", ".", "glob", "(", "sub_folder", "+", "'/*'", ")", ")", "\n", "max_idx", "=", "len", "(", "img_path_l", ")", "\n", "\n", "if", "save_imgs", ":", "\n", "            ", "util", ".", "mkdirs", "(", "save_sub_folder", ")", "\n", "\n", "#### read LR images", "\n", "", "imgs", "=", "read_seq_imgs", "(", "sub_folder", ")", "\n", "#### read GT images", "\n", "img_GT_l", "=", "[", "]", "\n", "\n", "for", "img_GT_path", "in", "sorted", "(", "glob", ".", "glob", "(", "osp", ".", "join", "(", "sub_folder_GT", ",", "'*'", ")", ")", ")", ":", "\n", "            ", "img_GT_l", ".", "append", "(", "read_image", "(", "img_GT_path", ")", ")", "\n", "\n", "# When using the downsampling in DUF official code, we downsample the HR images", "\n", "", "if", "DUF_downsampling", ":", "\n", "            ", "sub_folder", "=", "sub_folder_GT", "\n", "img_path_l", "=", "sorted", "(", "glob", ".", "glob", "(", "sub_folder", "+", "'/*'", ")", ")", "\n", "max_idx", "=", "len", "(", "img_path_l", ")", "\n", "imgs", "=", "read_seq_imgs", "(", "sub_folder", ")", "\n", "\n", "", "avg_psnr", ",", "avg_psnr_border", ",", "avg_psnr_center", ",", "N_border", ",", "N_center", "=", "0", ",", "0", ",", "0", ",", "0", ",", "0", "\n", "avg_ssim", ",", "avg_ssim_border", ",", "avg_ssim_center", "=", "0", ",", "0", ",", "0", "\n", "\n", "# process each image", "\n", "num_images", "=", "len", "(", "img_path_l", ")", "\n", "for", "img_idx", ",", "img_path", "in", "enumerate", "(", "img_path_l", ")", ":", "\n", "            ", "img_name", "=", "osp", ".", "splitext", "(", "osp", ".", "basename", "(", "img_path", ")", ")", "[", "0", "]", "\n", "c_idx", "=", "int", "(", "osp", ".", "splitext", "(", "osp", ".", "basename", "(", "img_path", ")", ")", "[", "0", "]", ")", "\n", "select_idx", "=", "index_generation", "(", "c_idx", ",", "max_idx", ",", "N_in", ",", "padding", "=", "padding", ")", "\n", "# get input images", "\n", "imgs_in", "=", "imgs", ".", "index_select", "(", "0", ",", "torch", ".", "LongTensor", "(", "select_idx", ")", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "\n", "# Downsample the HR images", "\n", "H", ",", "W", "=", "imgs_in", ".", "size", "(", "3", ")", ",", "imgs_in", ".", "size", "(", "4", ")", "\n", "if", "DUF_downsampling", ":", "\n", "                ", "imgs_in", "=", "util", ".", "DUF_downsample", "(", "imgs_in", ",", "sigma", "=", "1.3", ",", "scale", "=", "scale", ")", "\n", "\n", "", "output", "=", "single_forward", "(", "model", ",", "imgs_in", ")", "\n", "\n", "# Crop to the original shape", "\n", "if", "scale", "==", "3", ":", "\n", "                ", "pad_h", "=", "scale", "-", "(", "H", "%", "scale", ")", "\n", "pad_w", "=", "scale", "-", "(", "W", "%", "scale", ")", "\n", "if", "pad_h", ">", "0", ":", "\n", "                    ", "output", "=", "output", "[", ":", ",", ":", ",", ":", "-", "pad_h", ",", ":", "]", "\n", "", "if", "pad_w", ">", "0", ":", "\n", "                    ", "output", "=", "output", "[", ":", ",", ":", ",", ":", ",", ":", "-", "pad_w", "]", "\n", "", "", "output_f", "=", "output", ".", "data", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "squeeze", "(", "0", ")", "\n", "output", "=", "util", ".", "tensor2img", "(", "output_f", ")", "\n", "\n", "# save imgs", "\n", "if", "save_imgs", ":", "\n", "                ", "cv2", ".", "imwrite", "(", "osp", ".", "join", "(", "save_sub_folder", ",", "'{:08d}.png'", ".", "format", "(", "c_idx", ")", ")", ",", "output", ")", "\n", "\n", "#### calculate PSNR", "\n", "", "output", "=", "output", "/", "255.", "\n", "GT", "=", "np", ".", "copy", "(", "img_GT_l", "[", "img_idx", "]", ")", "\n", "output", "=", "(", "output", "*", "255", ")", ".", "round", "(", ")", ".", "astype", "(", "'uint8'", ")", "\n", "GT", "=", "(", "GT", "*", "255", ")", ".", "round", "(", ")", ".", "astype", "(", "'uint8'", ")", "\n", "output", ",", "GT", "=", "util", ".", "crop_border", "(", "[", "output", ",", "GT", "]", ",", "crop_border", ")", "\n", "crt_psnr", "=", "util", ".", "calculate_psnr", "(", "output", ",", "GT", ")", "\n", "crt_ssim", "=", "util", ".", "calculate_ssim", "(", "output", ",", "GT", ")", "\n", "\n", "\n", "logger", ".", "info", "(", "'{:3d} - {:16} \\tPSNR: {:.6f} dB \\tSSIM: {:.6f}'", ".", "format", "(", "img_idx", "+", "1", ",", "img_name", ",", "crt_psnr", ",", "crt_ssim", ")", ")", "\n", "\n", "if", "img_idx", ">=", "border_frame", "and", "img_idx", "<", "max_idx", "-", "border_frame", ":", "# center frames", "\n", "                ", "avg_psnr_center", "+=", "crt_psnr", "\n", "avg_ssim_center", "+=", "crt_ssim", "\n", "N_center", "+=", "1", "\n", "", "else", ":", "# border frames", "\n", "                ", "avg_psnr_border", "+=", "crt_psnr", "\n", "avg_ssim_border", "+=", "crt_ssim", "\n", "N_border", "+=", "1", "\n", "\n", "", "", "avg_psnr", "=", "(", "avg_psnr_center", "+", "avg_psnr_border", ")", "/", "(", "N_center", "+", "N_border", ")", "\n", "avg_psnr_center", "=", "avg_psnr_center", "/", "N_center", "\n", "avg_psnr_border", "=", "0", "if", "N_border", "==", "0", "else", "avg_psnr_border", "/", "N_border", "\n", "avg_psnr_l", ".", "append", "(", "avg_psnr", ")", "\n", "avg_psnr_center_l", ".", "append", "(", "avg_psnr_center", ")", "\n", "avg_psnr_border_l", ".", "append", "(", "avg_psnr_border", ")", "\n", "\n", "avg_ssim", "=", "(", "avg_ssim_center", "+", "avg_ssim_border", ")", "/", "(", "N_center", "+", "N_border", ")", "\n", "avg_ssim_center", "=", "avg_ssim_center", "/", "N_center", "\n", "avg_ssim_border", "=", "0", "if", "N_border", "==", "0", "else", "avg_ssim_border", "/", "N_border", "\n", "avg_ssim_l", ".", "append", "(", "avg_ssim", ")", "\n", "avg_ssim_center_l", ".", "append", "(", "avg_ssim_center", ")", "\n", "avg_ssim_border_l", ".", "append", "(", "avg_ssim_border", ")", "\n", "\n", "logger", ".", "info", "(", "'Folder {} - Average PSNR: {:.6f} dB for {} frames; '", "\n", "'Center PSNR: {:.6f} dB for {} frames; '", "\n", "'Border PSNR: {:.6f} dB for {} frames.'", ".", "format", "(", "sub_folder_name", ",", "avg_psnr", ",", "\n", "(", "N_center", "+", "N_border", ")", ",", "\n", "avg_psnr_center", ",", "N_center", ",", "\n", "avg_psnr_border", ",", "N_border", ")", ")", "\n", "'''\n        logger.info('Folder {} - Average SSIM: {:.6f} for {} frames; '\n                    'Center SSIM: {:.6f} for {} frames; '\n                    'Border SSIM: {:.6f} for {} frames.'.format(sub_folder_name, avg_ssim,\n                                                                (N_center + N_border),\n                                                                avg_ssim_center, N_center,\n                                                                avg_ssim_border, N_border))\n        '''", "\n", "", "'''\n    logger.info('################ Tidy Outputs ################')\n    for subfolder_name, psnr, psnr_center, psnr_border in zip(subfolder_name_l, avg_psnr_l,\n                                                              avg_psnr_center_l, avg_psnr_border_l):\n        logger.info('Folder {} - Average PSNR: {:.6f} dB. '\n                    'Center PSNR: {:.6f} dB. '\n                    'Border PSNR: {:.6f} dB.'.format(subfolder_name, psnr, psnr_center, psnr_border))\n    for subfolder_name, ssim, ssim_center, ssim_border in zip(subfolder_name_l, avg_ssim_l,\n                                                              avg_ssim_center_l, avg_ssim_border_l):\n        logger.info('Folder {} - Average SSIM: {:.6f}. '\n                    'Center SSIM: {:.6f}. '\n                    'Border SSIM: {:.6f}.'.format(subfolder_name, ssim, ssim_center, ssim_border))\n    '''", "\n", "logger", ".", "info", "(", "'################ Final Results ################'", ")", "\n", "logger", ".", "info", "(", "'Data: {} - {}'", ".", "format", "(", "data_mode", ",", "test_dataset_folder", ")", ")", "\n", "logger", ".", "info", "(", "'Padding mode: {}'", ".", "format", "(", "padding", ")", ")", "\n", "logger", ".", "info", "(", "'Model path: {}'", ".", "format", "(", "model_path", ")", ")", "\n", "logger", ".", "info", "(", "'Save images: {}'", ".", "format", "(", "save_imgs", ")", ")", "\n", "logger", ".", "info", "(", "'Total Average PSNR: {:.6f} dB for {} clips. '", "\n", "'Center PSNR: {:.6f} dB. Border PSNR: {:.6f} dB.'", ".", "format", "(", "\n", "sum", "(", "avg_psnr_l", ")", "/", "len", "(", "avg_psnr_l", ")", ",", "len", "(", "sub_folder_l", ")", ",", "\n", "sum", "(", "avg_psnr_center_l", ")", "/", "len", "(", "avg_psnr_center_l", ")", ",", "\n", "sum", "(", "avg_psnr_border_l", ")", "/", "len", "(", "avg_psnr_border_l", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Total Average SSIM: {:.6f} for {} clips. '", "\n", "'Center SSIM: {:.6f}. Border PSNR: {:.6f}.'", ".", "format", "(", "\n", "sum", "(", "avg_ssim_l", ")", "/", "len", "(", "avg_ssim_l", ")", ",", "len", "(", "sub_folder_l", ")", ",", "\n", "sum", "(", "avg_ssim_center_l", ")", "/", "len", "(", "avg_ssim_center_l", ")", ",", "\n", "sum", "(", "avg_ssim_border_l", ")", "/", "len", "(", "avg_ssim_border_l", ")", ")", ")", "\n", "\n", "print", "(", "'\\n\\n\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.codes.test_dynavsr.init_dist": [[23, 31], ["int", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.init_process_group", "torch.get_start_method", "torch.set_start_method"], "function", ["None"], ["def", "init_dist", "(", "backend", "=", "'nccl'", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"initialization for distributed training\"\"\"", "\n", "if", "mp", ".", "get_start_method", "(", "allow_none", "=", "True", ")", "!=", "'spawn'", ":", "\n", "        ", "mp", ".", "set_start_method", "(", "'spawn'", ")", "\n", "", "rank", "=", "int", "(", "os", ".", "environ", "[", "'RANK'", "]", ")", "\n", "num_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "rank", "%", "num_gpus", ")", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "backend", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.codes.test_dynavsr.main": [[33, 366], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "options.dict_to_nonedict", "opt[].items", "models.create_model", "models.create_model", "models.create_model", "pandas.DataFrame", "utils.util.ProgressBar", "print", "options.parse", "options.parse", "str", "str", "[].keys", "len", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "len", "int", "os.path.join", "os.path.join", "range", "range", "modelcp.load_network", "modelcp.feed_data", "modelcp.test", "est_model_fixed.load_network", "modelcp.netG.named_parameters", "time.time", "range", "time.time", "modelcp.feed_data", "modelcp.test", "modelcp.get_current_visuals", "utils.util.tensor2img", "imageio.imwrite", "psnr_rlt[].items", "len", "psnr_rlt_avg.items", "print", "psnr_rlt[].items", "len", "psnr_rlt_avg.items", "print", "ssim_rlt[].items", "len", "ssim_rlt_avg.items", "print", "ssim_rlt[].items", "len", "ssim_rlt_avg.items", "print", "str", "math.floor", "math.floor", "HR.size", "data.meta_learner.preprocessing.common_crop", "torch.stack.append", "torch.stack.append", "val_data.keys", "os.path.exists", "os.makedirs", "os.path.exists", "os.mkdir", "len", "len", "val_data[].size", "LQs.reshape.reshape", "torch.nn.functional.interpolate", "F.interpolate.reshape", "modelcp.get_current_visuals", "utils.util.tensor2img", "utils.util.tensor2img", "[].append", "[].append", "copy.deepcopy", "copy.deepcopy", "est_modelcp.netE.named_parameters", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.SGD.zero_grad", "modelcp.calculate_loss", "est_model_fixed.feed_data", "est_model_fixed.test", "slr_initialized.to.to", "modelcp.calculate_loss.backward", "torch.optim.SGD.step", "os.path.join", "[].append", "[].append", "pd.DataFrame.to_csv", "util.ProgressBar.update", "util.ProgressBar.update", "math.log10", "math.log10", "str", "print", "NotImplementedError", "[].split", "psnr_rlt[].get", "ssim_rlt[].get", "utils.util.calculate_psnr", "utils.util.calculate_ssim", "optim_params.append", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "NotImplementedError", "est_modelcp.feed_data", "est_modelcp.forward_without_optim", "LQs.reshape.reshape", "torch.nn.functional.interpolate", "F.interpolate.reshape", "test_dynavsr.main.crop"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.options.options.dict_to_nonedict", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.__init__.create_model", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.__init__.create_model", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.__init__.create_model", "home.repos.pwc.inspect_result.esw0116_DynaVSR.options.options.parse", "home.repos.pwc.inspect_result.esw0116_DynaVSR.options.options.parse", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.feed_data", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.SRGAN_model.SRGANModel.test", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.feed_data", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.SRGAN_model.SRGANModel.test", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.get_current_visuals", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.tensor2img", "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.common_crop", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.mkdir", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.get_current_visuals", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.tensor2img", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.tensor2img", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.Video_base_model.VideoBaseModel.calculate_loss", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.feed_data", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.SRGAN_model.SRGANModel.test", "home.repos.pwc.inspect_result.esw0116_DynaVSR.dcn.deform_conv.ModulatedDeformConvFunction.backward", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.ProgressBar.update", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.ProgressBar.update", "home.repos.pwc.inspect_result.esw0116_DynaVSR.metrics.calculate_PSNR_SSIM.calculate_psnr", "home.repos.pwc.inspect_result.esw0116_DynaVSR.metrics.calculate_PSNR_SSIM.calculate_ssim", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.feed_data", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.LRestimator_model.LRimgestimator_Model.forward_without_optim", "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.crop"], ["", "def", "main", "(", ")", ":", "\n", "#### options", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-opt'", ",", "type", "=", "str", ",", "help", "=", "'Path to option YAML file.'", ")", "\n", "parser", ".", "add_argument", "(", "'--launcher'", ",", "choices", "=", "[", "'none'", ",", "'pytorch'", "]", ",", "default", "=", "'none'", ",", "\n", "help", "=", "'job launcher'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--exp_name'", ",", "type", "=", "str", ",", "default", "=", "'temp'", ")", "\n", "parser", ".", "add_argument", "(", "'--degradation_type'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--sigma_x'", ",", "type", "=", "float", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--sigma_y'", ",", "type", "=", "float", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--theta'", ",", "type", "=", "float", ",", "default", "=", "None", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "args", ".", "exp_name", "==", "'temp'", ":", "\n", "        ", "opt", "=", "option", ".", "parse", "(", "args", ".", "opt", ",", "is_train", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "opt", "=", "option", ".", "parse", "(", "args", ".", "opt", ",", "is_train", "=", "False", ",", "exp_name", "=", "args", ".", "exp_name", ")", "\n", "\n", "# convert to NoneDict, which returns None for missing keys", "\n", "", "opt", "=", "option", ".", "dict_to_nonedict", "(", "opt", ")", "\n", "inner_loop_name", "=", "opt", "[", "'train'", "]", "[", "'maml'", "]", "[", "'optimizer'", "]", "[", "0", "]", "+", "str", "(", "opt", "[", "'train'", "]", "[", "'maml'", "]", "[", "'adapt_iter'", "]", ")", "+", "str", "(", "math", ".", "floor", "(", "math", ".", "log10", "(", "opt", "[", "'train'", "]", "[", "'maml'", "]", "[", "'lr_alpha'", "]", ")", ")", ")", "\n", "meta_loop_name", "=", "opt", "[", "'train'", "]", "[", "'optim'", "]", "[", "0", "]", "+", "str", "(", "math", ".", "floor", "(", "math", ".", "log10", "(", "opt", "[", "'train'", "]", "[", "'lr_G'", "]", ")", ")", ")", "\n", "\n", "if", "args", ".", "degradation_type", "is", "not", "None", ":", "\n", "        ", "if", "args", ".", "degradation_type", "==", "'preset'", ":", "\n", "            ", "opt", "[", "'datasets'", "]", "[", "'val'", "]", "[", "'degradation_mode'", "]", "=", "args", ".", "degradation_type", "\n", "", "else", ":", "\n", "            ", "opt", "[", "'datasets'", "]", "[", "'val'", "]", "[", "'degradation_type'", "]", "=", "args", ".", "degradation_type", "\n", "", "", "if", "args", ".", "sigma_x", "is", "not", "None", ":", "\n", "        ", "opt", "[", "'datasets'", "]", "[", "'val'", "]", "[", "'sigma_x'", "]", "=", "args", ".", "sigma_x", "\n", "", "if", "args", ".", "sigma_y", "is", "not", "None", ":", "\n", "        ", "opt", "[", "'datasets'", "]", "[", "'val'", "]", "[", "'sigma_y'", "]", "=", "args", ".", "sigma_y", "\n", "", "if", "args", ".", "theta", "is", "not", "None", ":", "\n", "        ", "opt", "[", "'datasets'", "]", "[", "'val'", "]", "[", "'theta'", "]", "=", "args", ".", "theta", "\n", "\n", "", "if", "'degradation_mode'", "not", "in", "opt", "[", "'datasets'", "]", "[", "'val'", "]", ".", "keys", "(", ")", ":", "\n", "        ", "degradation_name", "=", "''", "\n", "", "elif", "opt", "[", "'datasets'", "]", "[", "'val'", "]", "[", "'degradation_mode'", "]", "==", "'set'", ":", "\n", "        ", "degradation_name", "=", "'_'", "+", "str", "(", "opt", "[", "'datasets'", "]", "[", "'val'", "]", "[", "'degradation_type'", "]", ")", "+", "'_'", "+", "str", "(", "opt", "[", "'datasets'", "]", "[", "'val'", "]", "[", "'sigma_x'", "]", ")", "+", "'_'", "+", "str", "(", "opt", "[", "'datasets'", "]", "[", "'val'", "]", "[", "'sigma_y'", "]", ")", "+", "'_'", "+", "str", "(", "opt", "[", "'datasets'", "]", "[", "'val'", "]", "[", "'theta'", "]", ")", "\n", "", "else", ":", "\n", "        ", "degradation_name", "=", "'_'", "+", "opt", "[", "'datasets'", "]", "[", "'val'", "]", "[", "'degradation_mode'", "]", "\n", "", "folder_name", "=", "opt", "[", "'name'", "]", "+", "'_'", "+", "degradation_name", "\n", "\n", "if", "args", ".", "exp_name", "!=", "'temp'", ":", "\n", "        ", "folder_name", "=", "args", ".", "exp_name", "\n", "\n", "", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n", "#### create train and val dataloader", "\n", "dataset_ratio", "=", "200", "# enlarge the size of each epoch", "\n", "for", "phase", ",", "dataset_opt", "in", "opt", "[", "'datasets'", "]", ".", "items", "(", ")", ":", "\n", "        ", "if", "phase", "==", "'train'", ":", "\n", "            ", "pass", "\n", "", "elif", "phase", "==", "'val'", ":", "\n", "            ", "if", "'+'", "in", "opt", "[", "'datasets'", "]", "[", "'val'", "]", "[", "'name'", "]", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'Do not use + signs in test mode'", ")", "\n", "", "else", ":", "\n", "                ", "val_set", "=", "create_dataset", "(", "dataset_opt", ",", "scale", "=", "opt", "[", "'scale'", "]", ",", "\n", "kernel_size", "=", "opt", "[", "'datasets'", "]", "[", "'train'", "]", "[", "'kernel_size'", "]", ",", "\n", "model_name", "=", "opt", "[", "'network_E'", "]", "[", "'which_model_E'", "]", ")", "\n", "# val_set = loader.get_dataset(opt, train=False)", "\n", "val_loader", "=", "create_dataloader", "(", "val_set", ",", "dataset_opt", ",", "opt", ",", "None", ")", "\n", "\n", "", "print", "(", "'Number of val images in [{:s}]: {:d}'", ".", "format", "(", "dataset_opt", "[", "'name'", "]", ",", "len", "(", "val_set", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Phase [{:s}] is not recognized.'", ".", "format", "(", "phase", ")", ")", "\n", "\n", "#### create model", "\n", "", "", "models", "=", "create_model", "(", "opt", ")", "\n", "assert", "len", "(", "models", ")", "==", "2", "\n", "model", ",", "est_model", "=", "models", "[", "0", "]", ",", "models", "[", "1", "]", "\n", "modelcp", ",", "est_modelcp", "=", "create_model", "(", "opt", ")", "\n", "_", ",", "est_model_fixed", "=", "create_model", "(", "opt", ")", "\n", "\n", "center_idx", "=", "(", "opt", "[", "'datasets'", "]", "[", "'val'", "]", "[", "'N_frames'", "]", ")", "//", "2", "\n", "lr_alpha", "=", "opt", "[", "'train'", "]", "[", "'maml'", "]", "[", "'lr_alpha'", "]", "\n", "update_step", "=", "opt", "[", "'train'", "]", "[", "'maml'", "]", "[", "'adapt_iter'", "]", "\n", "with_GT", "=", "False", "if", "opt", "[", "'datasets'", "]", "[", "'val'", "]", "[", "'mode'", "]", "==", "'demo'", "else", "True", "\n", "\n", "pd_log", "=", "pd", ".", "DataFrame", "(", "columns", "=", "[", "'PSNR_Bicubic'", ",", "'PSNR_Ours'", ",", "'SSIM_Bicubic'", ",", "'SSIM_Ours'", "]", ")", "\n", "\n", "def", "crop", "(", "LR_seq", ",", "HR", ",", "num_patches_for_batch", "=", "4", ",", "patch_size", "=", "44", ")", ":", "\n", "        ", "\"\"\"\n        Crop given patches.\n\n        Args:\n            LR_seq: (B=1) x T x C x H x W\n            HR: (B=1) x C x H x W\n\n            patch_size (int, optional):\n\n        Return:\n            B(=batch_size) x T x C x H x W\n        \"\"\"", "\n", "# Find the lowest resolution", "\n", "cropped_lr", "=", "[", "]", "\n", "cropped_hr", "=", "[", "]", "\n", "assert", "HR", ".", "size", "(", "0", ")", "==", "1", "\n", "LR_seq_", "=", "LR_seq", "[", "0", "]", "\n", "HR_", "=", "HR", "[", "0", "]", "\n", "for", "_", "in", "range", "(", "num_patches_for_batch", ")", ":", "\n", "            ", "patch_lr", ",", "patch_hr", "=", "preprocessing", ".", "common_crop", "(", "LR_seq_", ",", "HR_", ",", "patch_size", "=", "patch_size", "//", "2", ")", "\n", "cropped_lr", ".", "append", "(", "patch_lr", ")", "\n", "cropped_hr", ".", "append", "(", "patch_hr", ")", "\n", "\n", "", "cropped_lr", "=", "torch", ".", "stack", "(", "cropped_lr", ",", "dim", "=", "0", ")", "\n", "cropped_hr", "=", "torch", ".", "stack", "(", "cropped_hr", ",", "dim", "=", "0", ")", "\n", "\n", "return", "cropped_lr", ",", "cropped_hr", "\n", "\n", "# Single GPU", "\n", "# PSNR_rlt: psnr_init, psnr_before, psnr_after", "\n", "", "psnr_rlt", "=", "[", "{", "}", ",", "{", "}", "]", "\n", "# SSIM_rlt: ssim_init, ssim_after", "\n", "ssim_rlt", "=", "[", "{", "}", ",", "{", "}", "]", "\n", "\n", "pbar", "=", "util", ".", "ProgressBar", "(", "len", "(", "val_set", ")", ")", "\n", "for", "val_data", "in", "val_loader", ":", "\n", "        ", "folder", "=", "val_data", "[", "'folder'", "]", "[", "0", "]", "\n", "idx_d", "=", "int", "(", "val_data", "[", "'idx'", "]", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "0", "]", ")", "\n", "if", "'name'", "in", "val_data", ".", "keys", "(", ")", ":", "\n", "            ", "name", "=", "val_data", "[", "'name'", "]", "[", "0", "]", "[", "center_idx", "]", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "name", "=", "folder", "\n", "\n", "", "train_folder", "=", "os", ".", "path", ".", "join", "(", "'../test_results'", ",", "folder_name", ",", "name", ")", "\n", "maml_train_folder", "=", "os", ".", "path", ".", "join", "(", "train_folder", ",", "'DynaVSR'", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "train_folder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "train_folder", ",", "exist_ok", "=", "False", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "maml_train_folder", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "maml_train_folder", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "psnr_rlt", ")", ")", ":", "\n", "            ", "if", "psnr_rlt", "[", "i", "]", ".", "get", "(", "folder", ",", "None", ")", "is", "None", ":", "\n", "                ", "psnr_rlt", "[", "i", "]", "[", "folder", "]", "=", "[", "]", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "ssim_rlt", ")", ")", ":", "\n", "            ", "if", "ssim_rlt", "[", "i", "]", ".", "get", "(", "folder", ",", "None", ")", "is", "None", ":", "\n", "                ", "ssim_rlt", "[", "i", "]", "[", "folder", "]", "=", "[", "]", "\n", "\n", "", "", "cropped_meta_train_data", "=", "{", "}", "\n", "meta_train_data", "=", "{", "}", "\n", "meta_test_data", "=", "{", "}", "\n", "\n", "# Make SuperLR seq using estimation model", "\n", "meta_train_data", "[", "'GT'", "]", "=", "val_data", "[", "'LQs'", "]", "[", ":", ",", "center_idx", "]", "\n", "meta_test_data", "[", "'LQs'", "]", "=", "val_data", "[", "'LQs'", "]", "[", "0", ":", "1", "]", "\n", "meta_test_data", "[", "'GT'", "]", "=", "val_data", "[", "'GT'", "]", "[", "0", ":", "1", ",", "center_idx", "]", "if", "with_GT", "else", "None", "\n", "# Check whether the batch size of each validation data is 1", "\n", "assert", "val_data", "[", "'LQs'", "]", ".", "size", "(", "0", ")", "==", "1", "\n", "\n", "if", "opt", "[", "'network_G'", "]", "[", "'which_model_G'", "]", "==", "'TOF'", ":", "\n", "            ", "LQs", "=", "meta_test_data", "[", "'LQs'", "]", "\n", "B", ",", "T", ",", "C", ",", "H", ",", "W", "=", "LQs", ".", "shape", "\n", "LQs", "=", "LQs", ".", "reshape", "(", "B", "*", "T", ",", "C", ",", "H", ",", "W", ")", "\n", "Bic_LQs", "=", "F", ".", "interpolate", "(", "LQs", ",", "scale_factor", "=", "opt", "[", "'scale'", "]", ",", "mode", "=", "'bicubic'", ",", "align_corners", "=", "True", ")", "\n", "meta_test_data", "[", "'LQs'", "]", "=", "Bic_LQs", ".", "reshape", "(", "B", ",", "T", ",", "C", ",", "H", "*", "opt", "[", "'scale'", "]", ",", "W", "*", "opt", "[", "'scale'", "]", ")", "\n", "\n", "## Before start testing", "\n", "# Bicubic Model Results", "\n", "", "modelcp", ".", "load_network", "(", "opt", "[", "'path'", "]", "[", "'bicubic_G'", "]", ",", "modelcp", ".", "netG", ")", "\n", "modelcp", ".", "feed_data", "(", "meta_test_data", ",", "need_GT", "=", "with_GT", ")", "\n", "modelcp", ".", "test", "(", ")", "\n", "\n", "if", "with_GT", ":", "\n", "            ", "model_start_visuals", "=", "modelcp", ".", "get_current_visuals", "(", "need_GT", "=", "True", ")", "\n", "hr_image", "=", "util", ".", "tensor2img", "(", "model_start_visuals", "[", "'GT'", "]", ",", "mode", "=", "'rgb'", ")", "\n", "start_image", "=", "util", ".", "tensor2img", "(", "model_start_visuals", "[", "'rlt'", "]", ",", "mode", "=", "'rgb'", ")", "\n", "psnr_rlt", "[", "0", "]", "[", "folder", "]", ".", "append", "(", "util", ".", "calculate_psnr", "(", "start_image", ",", "hr_image", ")", ")", "\n", "ssim_rlt", "[", "0", "]", "[", "folder", "]", ".", "append", "(", "util", ".", "calculate_ssim", "(", "start_image", ",", "hr_image", ")", ")", "\n", "\n", "", "modelcp", ".", "netG", ",", "est_modelcp", ".", "netE", "=", "deepcopy", "(", "model", ".", "netG", ")", ",", "deepcopy", "(", "est_model", ".", "netE", ")", "\n", "\n", "########## SLR LOSS Preparation ############", "\n", "est_model_fixed", ".", "load_network", "(", "opt", "[", "'path'", "]", "[", "'fixed_E'", "]", ",", "est_model_fixed", ".", "netE", ")", "\n", "\n", "optim_params", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "modelcp", ".", "netG", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "v", ".", "requires_grad", ":", "\n", "                ", "optim_params", ".", "append", "(", "v", ")", "\n", "\n", "", "", "if", "not", "opt", "[", "'train'", "]", "[", "'use_real'", "]", ":", "\n", "            ", "for", "k", ",", "v", "in", "est_modelcp", ".", "netE", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "v", ".", "requires_grad", ":", "\n", "                    ", "optim_params", ".", "append", "(", "v", ")", "\n", "\n", "", "", "", "if", "opt", "[", "'train'", "]", "[", "'maml'", "]", "[", "'optimizer'", "]", "==", "'Adam'", ":", "\n", "            ", "inner_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "optim_params", ",", "lr", "=", "lr_alpha", ",", "\n", "betas", "=", "(", "\n", "opt", "[", "'train'", "]", "[", "'maml'", "]", "[", "'beta1'", "]", ",", "\n", "opt", "[", "'train'", "]", "[", "'maml'", "]", "[", "'beta2'", "]", ")", ")", "\n", "", "elif", "opt", "[", "'train'", "]", "[", "'maml'", "]", "[", "'optimizer'", "]", "==", "'SGD'", ":", "\n", "            ", "inner_optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "optim_params", ",", "lr", "=", "lr_alpha", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "# Inner Loop Update", "\n", "", "st", "=", "time", ".", "time", "(", ")", "\n", "for", "i", "in", "range", "(", "update_step", ")", ":", "\n", "# Make SuperLR seq using UPDATED estimation model", "\n", "            ", "if", "not", "opt", "[", "'train'", "]", "[", "'use_real'", "]", ":", "\n", "                ", "est_modelcp", ".", "feed_data", "(", "val_data", ")", "\n", "est_modelcp", ".", "forward_without_optim", "(", ")", "\n", "superlr_seq", "=", "est_modelcp", ".", "fake_L", "\n", "meta_train_data", "[", "'LQs'", "]", "=", "superlr_seq", "\n", "", "else", ":", "\n", "                ", "meta_train_data", "[", "'LQs'", "]", "=", "val_data", "[", "'SuperLQs'", "]", "\n", "\n", "", "if", "opt", "[", "'network_G'", "]", "[", "'which_model_G'", "]", "==", "'TOF'", ":", "\n", "# Bicubic upsample to match the size", "\n", "                ", "LQs", "=", "meta_train_data", "[", "'LQs'", "]", "\n", "B", ",", "T", ",", "C", ",", "H", ",", "W", "=", "LQs", ".", "shape", "\n", "LQs", "=", "LQs", ".", "reshape", "(", "B", "*", "T", ",", "C", ",", "H", ",", "W", ")", "\n", "Bic_LQs", "=", "F", ".", "interpolate", "(", "LQs", ",", "scale_factor", "=", "opt", "[", "'scale'", "]", ",", "mode", "=", "'bicubic'", ",", "align_corners", "=", "True", ")", "\n", "meta_train_data", "[", "'LQs'", "]", "=", "Bic_LQs", ".", "reshape", "(", "B", ",", "T", ",", "C", ",", "H", "*", "opt", "[", "'scale'", "]", ",", "W", "*", "opt", "[", "'scale'", "]", ")", "\n", "\n", "# Update both modelcp + estmodelcp jointly", "\n", "", "inner_optimizer", ".", "zero_grad", "(", ")", "\n", "if", "opt", "[", "'train'", "]", "[", "'maml'", "]", "[", "'use_patch'", "]", ":", "\n", "                ", "cropped_meta_train_data", "[", "'LQs'", "]", ",", "cropped_meta_train_data", "[", "'GT'", "]", "=", "crop", "(", "meta_train_data", "[", "'LQs'", "]", ",", "meta_train_data", "[", "'GT'", "]", ",", "\n", "opt", "[", "'train'", "]", "[", "'maml'", "]", "[", "'num_patch'", "]", ",", "\n", "opt", "[", "'train'", "]", "[", "'maml'", "]", "[", "'patch_size'", "]", ")", "\n", "modelcp", ".", "feed_data", "(", "cropped_meta_train_data", ")", "\n", "", "else", ":", "\n", "                ", "modelcp", ".", "feed_data", "(", "meta_train_data", ")", "\n", "\n", "", "loss_train", "=", "modelcp", ".", "calculate_loss", "(", ")", "\n", "\n", "##################### SLR LOSS ###################", "\n", "est_model_fixed", ".", "feed_data", "(", "val_data", ")", "\n", "est_model_fixed", ".", "test", "(", ")", "\n", "slr_initialized", "=", "est_model_fixed", ".", "fake_L", "\n", "slr_initialized", "=", "slr_initialized", ".", "to", "(", "'cuda'", ")", "\n", "if", "opt", "[", "'network_G'", "]", "[", "'which_model_G'", "]", "==", "'TOF'", ":", "\n", "                ", "loss_train", "+=", "10", "*", "F", ".", "l1_loss", "(", "LQs", ".", "to", "(", "'cuda'", ")", ".", "squeeze", "(", "0", ")", ",", "slr_initialized", ")", "\n", "", "else", ":", "\n", "                ", "loss_train", "+=", "10", "*", "F", ".", "l1_loss", "(", "meta_train_data", "[", "'LQs'", "]", ".", "to", "(", "'cuda'", ")", ",", "slr_initialized", ")", "\n", "\n", "", "loss_train", ".", "backward", "(", ")", "\n", "inner_optimizer", ".", "step", "(", ")", "\n", "\n", "", "et", "=", "time", ".", "time", "(", ")", "\n", "update_time", "=", "et", "-", "st", "\n", "\n", "modelcp", ".", "feed_data", "(", "meta_test_data", ",", "need_GT", "=", "with_GT", ")", "\n", "modelcp", ".", "test", "(", ")", "\n", "\n", "model_update_visuals", "=", "modelcp", ".", "get_current_visuals", "(", "need_GT", "=", "False", ")", "\n", "update_image", "=", "util", ".", "tensor2img", "(", "model_update_visuals", "[", "'rlt'", "]", ",", "mode", "=", "'rgb'", ")", "\n", "# Save and calculate final image", "\n", "imageio", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "maml_train_folder", ",", "'{:08d}.png'", ".", "format", "(", "idx_d", ")", ")", ",", "update_image", ")", "\n", "\n", "if", "with_GT", ":", "\n", "            ", "psnr_rlt", "[", "1", "]", "[", "folder", "]", ".", "append", "(", "util", ".", "calculate_psnr", "(", "update_image", ",", "hr_image", ")", ")", "\n", "ssim_rlt", "[", "1", "]", "[", "folder", "]", ".", "append", "(", "util", ".", "calculate_ssim", "(", "update_image", ",", "hr_image", ")", ")", "\n", "\n", "name_df", "=", "'{}/{:08d}'", ".", "format", "(", "folder", ",", "idx_d", ")", "\n", "if", "name_df", "in", "pd_log", ".", "index", ":", "\n", "                ", "pd_log", ".", "at", "[", "name_df", ",", "'PSNR_Bicubic'", "]", "=", "psnr_rlt", "[", "0", "]", "[", "folder", "]", "[", "-", "1", "]", "\n", "pd_log", ".", "at", "[", "name_df", ",", "'PSNR_Ours'", "]", "=", "psnr_rlt", "[", "1", "]", "[", "folder", "]", "[", "-", "1", "]", "\n", "pd_log", ".", "at", "[", "name_df", ",", "'SSIM_Bicubic'", "]", "=", "ssim_rlt", "[", "0", "]", "[", "folder", "]", "[", "-", "1", "]", "\n", "pd_log", ".", "at", "[", "name_df", ",", "'SSIM_Ours'", "]", "=", "ssim_rlt", "[", "1", "]", "[", "folder", "]", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "                ", "pd_log", ".", "loc", "[", "name_df", "]", "=", "[", "psnr_rlt", "[", "0", "]", "[", "folder", "]", "[", "-", "1", "]", ",", "\n", "psnr_rlt", "[", "1", "]", "[", "folder", "]", "[", "-", "1", "]", ",", "\n", "ssim_rlt", "[", "0", "]", "[", "folder", "]", "[", "-", "1", "]", ",", "ssim_rlt", "[", "1", "]", "[", "folder", "]", "[", "-", "1", "]", "]", "\n", "\n", "", "pd_log", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "'../test_results'", ",", "folder_name", ",", "'psnr_update.csv'", ")", ")", "\n", "\n", "pbar", ".", "update", "(", "'Test {} - {}: I: {:.3f}/{:.4f} \\tF+: {:.3f}/{:.4f} \\tTime: {:.3f}s'", "\n", ".", "format", "(", "folder", ",", "idx_d", ",", "\n", "psnr_rlt", "[", "0", "]", "[", "folder", "]", "[", "-", "1", "]", ",", "ssim_rlt", "[", "0", "]", "[", "folder", "]", "[", "-", "1", "]", ",", "\n", "psnr_rlt", "[", "1", "]", "[", "folder", "]", "[", "-", "1", "]", ",", "ssim_rlt", "[", "1", "]", "[", "folder", "]", "[", "-", "1", "]", ",", "\n", "update_time", "\n", ")", ")", "\n", "", "else", ":", "\n", "            ", "pbar", ".", "update", "(", ")", "\n", "\n", "", "", "if", "with_GT", ":", "\n", "        ", "psnr_rlt_avg", "=", "{", "}", "\n", "psnr_total_avg", "=", "0.", "\n", "# Just calculate the final value of psnr_rlt(i.e. psnr_rlt[2])", "\n", "for", "k", ",", "v", "in", "psnr_rlt", "[", "0", "]", ".", "items", "(", ")", ":", "\n", "            ", "psnr_rlt_avg", "[", "k", "]", "=", "sum", "(", "v", ")", "/", "len", "(", "v", ")", "\n", "psnr_total_avg", "+=", "psnr_rlt_avg", "[", "k", "]", "\n", "", "psnr_total_avg", "/=", "len", "(", "psnr_rlt", "[", "0", "]", ")", "\n", "log_s", "=", "'# Validation # Bic PSNR: {:.4e}:'", ".", "format", "(", "psnr_total_avg", ")", "\n", "for", "k", ",", "v", "in", "psnr_rlt_avg", ".", "items", "(", ")", ":", "\n", "            ", "log_s", "+=", "' {}: {:.4e}'", ".", "format", "(", "k", ",", "v", ")", "\n", "", "print", "(", "log_s", ")", "\n", "\n", "psnr_rlt_avg", "=", "{", "}", "\n", "psnr_total_avg", "=", "0.", "\n", "# Just calculate the final value of psnr_rlt(i.e. psnr_rlt[2])", "\n", "for", "k", ",", "v", "in", "psnr_rlt", "[", "1", "]", ".", "items", "(", ")", ":", "\n", "            ", "psnr_rlt_avg", "[", "k", "]", "=", "sum", "(", "v", ")", "/", "len", "(", "v", ")", "\n", "psnr_total_avg", "+=", "psnr_rlt_avg", "[", "k", "]", "\n", "", "psnr_total_avg", "/=", "len", "(", "psnr_rlt", "[", "1", "]", ")", "\n", "log_s", "=", "'# Validation # PSNR: {:.4e}:'", ".", "format", "(", "psnr_total_avg", ")", "\n", "for", "k", ",", "v", "in", "psnr_rlt_avg", ".", "items", "(", ")", ":", "\n", "            ", "log_s", "+=", "' {}: {:.4e}'", ".", "format", "(", "k", ",", "v", ")", "\n", "", "print", "(", "log_s", ")", "\n", "\n", "ssim_rlt_avg", "=", "{", "}", "\n", "ssim_total_avg", "=", "0.", "\n", "# Just calculate the final value of ssim_rlt(i.e. ssim_rlt[1])", "\n", "for", "k", ",", "v", "in", "ssim_rlt", "[", "0", "]", ".", "items", "(", ")", ":", "\n", "            ", "ssim_rlt_avg", "[", "k", "]", "=", "sum", "(", "v", ")", "/", "len", "(", "v", ")", "\n", "ssim_total_avg", "+=", "ssim_rlt_avg", "[", "k", "]", "\n", "", "ssim_total_avg", "/=", "len", "(", "ssim_rlt", "[", "0", "]", ")", "\n", "log_s", "=", "'# Validation # Bicubic SSIM: {:.4e}:'", ".", "format", "(", "ssim_total_avg", ")", "\n", "for", "k", ",", "v", "in", "ssim_rlt_avg", ".", "items", "(", ")", ":", "\n", "            ", "log_s", "+=", "' {}: {:.4e}'", ".", "format", "(", "k", ",", "v", ")", "\n", "", "print", "(", "log_s", ")", "\n", "\n", "ssim_rlt_avg", "=", "{", "}", "\n", "ssim_total_avg", "=", "0.", "\n", "# Just calculate the final value of ssim_rlt(i.e. ssim_rlt[1])", "\n", "for", "k", ",", "v", "in", "ssim_rlt", "[", "1", "]", ".", "items", "(", ")", ":", "\n", "            ", "ssim_rlt_avg", "[", "k", "]", "=", "sum", "(", "v", ")", "/", "len", "(", "v", ")", "\n", "ssim_total_avg", "+=", "ssim_rlt_avg", "[", "k", "]", "\n", "", "ssim_total_avg", "/=", "len", "(", "ssim_rlt", "[", "1", "]", ")", "\n", "log_s", "=", "'# Validation # SSIM: {:.4e}:'", ".", "format", "(", "ssim_total_avg", ")", "\n", "for", "k", ",", "v", "in", "ssim_rlt_avg", ".", "items", "(", ")", ":", "\n", "            ", "log_s", "+=", "' {}: {:.4e}'", ".", "format", "(", "k", ",", "v", ")", "\n", "", "print", "(", "log_s", ")", "\n", "\n", "", "print", "(", "'End of evaluation.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.codes.degradation_gen.main": [[7, 26], ["numpy.zeros", "range", "torch.from_numpy", "os.path.join", "torch.save", "numpy.random.random_sample", "numpy.random.random_sample", "numpy.random.random_sample", "numpy.random.random_sample"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.save"], ["def", "main", "(", ")", ":", "\n", "# Set config", "\n", "    ", "mode", "=", "'REDS'", "# 'REDS'", "\n", "save_dir", "=", "'../experiments/pretrained_models'", "\n", "\n", "num_gen", "=", "400", "if", "mode", "==", "'REDS'", "else", "171", "\n", "\n", "generation", "=", "np", ".", "zeros", "(", "(", "num_gen", ",", "4", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_gen", ")", ":", "\n", "        ", "degrade_type", "=", "np", ".", "random", ".", "random_sample", "(", ")", "\n", "sigma_x", "=", "0.001", "+", "np", ".", "random", ".", "random_sample", "(", ")", "*", "4", "\n", "sigma_y", "=", "0.001", "+", "np", ".", "random", ".", "random_sample", "(", ")", "*", "4", "\n", "theta", "=", "np", ".", "random", ".", "random_sample", "(", ")", "*", "math", ".", "pi", "/", "2", "\n", "generation", "[", "i", "]", "=", "[", "degrade_type", ",", "sigma_x", ",", "sigma_y", ",", "theta", "]", "\n", "\n", "", "gen_tensor", "=", "torch", ".", "from_numpy", "(", "generation", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "mode", "+", "'.pth'", ")", "\n", "torch", ".", "save", "(", "gen_tensor", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.ProgressBar.__init__": [[321, 328], ["util.ProgressBar._get_max_bar_width", "util.ProgressBar.start"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.ProgressBar._get_max_bar_width", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.ProgressBar.start"], ["def", "__init__", "(", "self", ",", "task_num", "=", "0", ",", "bar_width", "=", "50", ",", "start", "=", "True", ")", ":", "\n", "        ", "self", ".", "task_num", "=", "task_num", "\n", "max_bar_width", "=", "self", ".", "_get_max_bar_width", "(", ")", "\n", "self", ".", "bar_width", "=", "(", "bar_width", "if", "bar_width", "<=", "max_bar_width", "else", "max_bar_width", ")", "\n", "self", ".", "completed", "=", "0", "\n", "if", "start", ":", "\n", "            ", "self", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.ProgressBar._get_max_bar_width": [[329, 337], ["shutil.get_terminal_size", "min", "int", "print"], "methods", ["None"], ["", "", "def", "_get_max_bar_width", "(", "self", ")", ":", "\n", "        ", "terminal_width", ",", "_", "=", "get_terminal_size", "(", ")", "\n", "max_bar_width", "=", "min", "(", "int", "(", "terminal_width", "*", "0.6", ")", ",", "terminal_width", "-", "50", ")", "\n", "if", "max_bar_width", "<", "10", ":", "\n", "            ", "print", "(", "'terminal width is too small ({}), please consider widen the terminal for better '", "\n", "'progressbar visualization'", ".", "format", "(", "terminal_width", ")", ")", "\n", "max_bar_width", "=", "10", "\n", "", "return", "max_bar_width", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.ProgressBar.start": [[338, 346], ["sys.stdout.flush", "time.time", "sys.stdout.write", "sys.stdout.write"], "methods", ["None"], ["", "def", "start", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "task_num", ">", "0", ":", "\n", "            ", "sys", ".", "stdout", ".", "write", "(", "'[{}] 0/{}, elapsed: 0s, ETA:\\n{}\\n'", ".", "format", "(", "\n", "' '", "*", "self", ".", "bar_width", ",", "self", ".", "task_num", ",", "'Start...'", ")", ")", "\n", "", "else", ":", "\n", "            ", "sys", ".", "stdout", ".", "write", "(", "'completed: 0, elapsed: 0s'", ")", "\n", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.ProgressBar.update": [[347, 364], ["sys.stdout.flush", "time.time", "int", "int", "sys.stdout.write", "sys.stdout.write", "sys.stdout.write", "sys.stdout.write", "float", "int", "int"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "msg", "=", "'In progress...'", ")", ":", "\n", "        ", "self", ".", "completed", "+=", "1", "\n", "elapsed", "=", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", "\n", "fps", "=", "self", ".", "completed", "/", "elapsed", "\n", "if", "self", ".", "task_num", ">", "0", ":", "\n", "            ", "percentage", "=", "self", ".", "completed", "/", "float", "(", "self", ".", "task_num", ")", "\n", "eta", "=", "int", "(", "elapsed", "*", "(", "1", "-", "percentage", ")", "/", "percentage", "+", "0.5", ")", "\n", "mark_width", "=", "int", "(", "self", ".", "bar_width", "*", "percentage", ")", "\n", "bar_chars", "=", "'>'", "*", "mark_width", "+", "'-'", "*", "(", "self", ".", "bar_width", "-", "mark_width", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "'\\033[2F'", ")", "# cursor up 2 lines", "\n", "sys", ".", "stdout", ".", "write", "(", "'\\033[J'", ")", "# clean the output (remove extra chars since last display)", "\n", "sys", ".", "stdout", ".", "write", "(", "'[{}] {}/{}, {:.1f} task/s, elapsed: {}s, ETA: {:5}s\\n{}\\n'", ".", "format", "(", "\n", "bar_chars", ",", "self", ".", "completed", ",", "self", ".", "task_num", ",", "fps", ",", "int", "(", "elapsed", "+", "0.5", ")", ",", "eta", ",", "msg", ")", ")", "\n", "", "else", ":", "\n", "            ", "sys", ".", "stdout", ".", "write", "(", "'completed: {}, elapsed: {}s, {:.1f} tasks/s'", ".", "format", "(", "\n", "self", ".", "completed", ",", "int", "(", "elapsed", "+", "0.5", ")", ",", "fps", ")", ")", "\n", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.OrderedYaml": [[23, 36], ["Dumper.add_representer", "Loader.add_constructor", "dumper.represent_dict", "collections.OrderedDict", "data.items", "loader.construct_pairs"], "function", ["None"], ["", "def", "OrderedYaml", "(", ")", ":", "\n", "    ", "'''yaml orderedDict support'''", "\n", "_mapping_tag", "=", "yaml", ".", "resolver", ".", "BaseResolver", ".", "DEFAULT_MAPPING_TAG", "\n", "\n", "def", "dict_representer", "(", "dumper", ",", "data", ")", ":", "\n", "        ", "return", "dumper", ".", "represent_dict", "(", "data", ".", "items", "(", ")", ")", "\n", "\n", "", "def", "dict_constructor", "(", "loader", ",", "node", ")", ":", "\n", "        ", "return", "OrderedDict", "(", "loader", ".", "construct_pairs", "(", "node", ")", ")", "\n", "\n", "", "Dumper", ".", "add_representer", "(", "OrderedDict", ",", "dict_representer", ")", "\n", "Loader", ".", "add_constructor", "(", "_mapping_tag", ",", "dict_constructor", ")", "\n", "return", "Loader", ",", "Dumper", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.get_timestamp": [[43, 45], ["datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["None"], ["", "def", "get_timestamp", "(", ")", ":", "\n", "    ", "return", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%y%m%d-%H%M%S'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.mkdir": [[47, 50], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "def", "mkdir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.mkdirs": [[52, 58], ["isinstance", "util.mkdir", "util.mkdir"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.mkdir", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.mkdir"], ["", "", "def", "mkdirs", "(", "paths", ")", ":", "\n", "    ", "if", "isinstance", "(", "paths", ",", "str", ")", ":", "\n", "        ", "mkdir", "(", "paths", ")", "\n", "", "else", ":", "\n", "        ", "for", "path", "in", "paths", ":", "\n", "            ", "mkdir", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.mkdir_and_rename": [[60, 68], ["os.path.exists", "os.makedirs", "print", "logging.getLogger", "logging.getLogger.info", "os.rename", "util.get_timestamp"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.get_timestamp"], ["", "", "", "def", "mkdir_and_rename", "(", "path", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "new_name", "=", "path", "+", "'_archived_'", "+", "get_timestamp", "(", ")", "\n", "print", "(", "'Path already exists. Rename it to [{:s}]'", ".", "format", "(", "new_name", ")", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'base'", ")", "\n", "logger", ".", "info", "(", "'Path already exists. Rename it to [{:s}]'", ".", "format", "(", "new_name", ")", ")", "\n", "os", ".", "rename", "(", "path", ",", "new_name", ")", "\n", "", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.set_random_seed": [[70, 75], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all"], "function", ["None"], ["", "def", "set_random_seed", "(", "seed", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.setup_logger": [[77, 92], ["logging.getLogger", "logging.Formatter", "logging.getLogger.setLevel", "os.path.join", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "util.get_timestamp"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.get_timestamp"], ["", "def", "setup_logger", "(", "logger_name", ",", "root", ",", "phase", ",", "level", "=", "logging", ".", "INFO", ",", "screen", "=", "False", ",", "tofile", "=", "False", ")", ":", "\n", "    ", "'''set up logger'''", "\n", "lg", "=", "logging", ".", "getLogger", "(", "logger_name", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s.%(msecs)03d - %(levelname)s: %(message)s'", ",", "\n", "datefmt", "=", "'%y-%m-%d %H:%M:%S'", ")", "\n", "lg", ".", "setLevel", "(", "level", ")", "\n", "if", "tofile", ":", "\n", "        ", "log_file", "=", "os", ".", "path", ".", "join", "(", "root", ",", "phase", "+", "'_{}.log'", ".", "format", "(", "get_timestamp", "(", ")", ")", ")", "\n", "fh", "=", "logging", ".", "FileHandler", "(", "log_file", ",", "mode", "=", "'w'", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "lg", ".", "addHandler", "(", "fh", ")", "\n", "", "if", "screen", ":", "\n", "        ", "sh", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "sh", ".", "setFormatter", "(", "formatter", ")", "\n", "lg", ".", "addHandler", "(", "sh", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.crop_border": [[97, 110], ["None"], "function", ["None"], ["", "", "def", "crop_border", "(", "img_list", ",", "crop_border", ")", ":", "\n", "    ", "\"\"\"Crop borders of images\n    Args:\n        img_list (list [Numpy]): HWC\n        crop_border (int): crop border for each end of height and weight\n\n    Returns:\n        (list [Numpy]): cropped image list\n    \"\"\"", "\n", "if", "crop_border", "==", "0", ":", "\n", "        ", "return", "img_list", "\n", "", "else", ":", "\n", "        ", "return", "[", "v", "[", "crop_border", ":", "-", "crop_border", ",", "crop_border", ":", "-", "crop_border", "]", "for", "v", "in", "img_list", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.tensor2img": [[112, 143], ["tensor.squeeze().float().cpu().clamp_.squeeze().float().cpu().clamp_", "tensor.squeeze().float().cpu().clamp_.dim", "tensor.numpy.astype", "len", "torchvision.utils.make_grid().numpy", "tensor.squeeze().float().cpu().clamp_.squeeze().float().cpu", "numpy.transpose", "numpy.transpose", "tensor.squeeze().float().cpu().clamp_.numpy", "torchvision.utils.make_grid", "numpy.transpose", "numpy.transpose", "tensor.squeeze().float().cpu().clamp_.numpy", "TypeError", "tensor.squeeze().float().cpu().clamp_.squeeze().float", "int", "tensor.squeeze().float().cpu().clamp_.squeeze", "math.sqrt"], "function", ["None"], ["", "", "def", "tensor2img", "(", "tensor", ",", "out_type", "=", "np", ".", "uint8", ",", "min_max", "=", "(", "0", ",", "1", ")", ",", "mode", "=", "'bgr'", ")", ":", "\n", "    ", "'''\n    Converts a torch Tensor into an image Numpy array\n    Input: 4D(B,(3/1),H,W), 3D(C,H,W), or 2D(H,W), any range, RGB channel order\n    Output: 3D(H,W,C) or 2D(H,W), [0,255], np.uint8 (default)\n    '''", "\n", "tensor", "=", "tensor", ".", "squeeze", "(", ")", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "clamp_", "(", "*", "min_max", ")", "# clamp", "\n", "tensor", "=", "(", "tensor", "-", "min_max", "[", "0", "]", ")", "/", "(", "min_max", "[", "1", "]", "-", "min_max", "[", "0", "]", ")", "# to range [0,1]", "\n", "n_dim", "=", "tensor", ".", "dim", "(", ")", "\n", "if", "n_dim", "==", "4", ":", "\n", "        ", "n_img", "=", "len", "(", "tensor", ")", "\n", "img_np", "=", "make_grid", "(", "tensor", ",", "nrow", "=", "int", "(", "math", ".", "sqrt", "(", "n_img", ")", ")", ",", "normalize", "=", "False", ")", ".", "numpy", "(", ")", "\n", "if", "mode", "==", "'rgb'", ":", "\n", "            ", "img_np", "=", "np", ".", "transpose", "(", "img_np", ",", "(", "1", ",", "2", ",", "0", ")", ")", "# HWC, RGB", "\n", "", "else", ":", "\n", "            ", "img_np", "=", "np", ".", "transpose", "(", "img_np", "[", "[", "2", ",", "1", ",", "0", "]", ",", ":", ",", ":", "]", ",", "(", "1", ",", "2", ",", "0", ")", ")", "# HWC, BGR", "\n", "", "", "elif", "n_dim", "==", "3", ":", "\n", "        ", "img_np", "=", "tensor", ".", "numpy", "(", ")", "\n", "if", "mode", "==", "'rgb'", ":", "\n", "            ", "img_np", "=", "np", ".", "transpose", "(", "img_np", ",", "(", "1", ",", "2", ",", "0", ")", ")", "# HWC, RGB", "\n", "", "else", ":", "\n", "            ", "img_np", "=", "np", ".", "transpose", "(", "img_np", "[", "[", "2", ",", "1", ",", "0", "]", ",", ":", ",", ":", "]", ",", "(", "1", ",", "2", ",", "0", ")", ")", "# HWC, BGR", "\n", "", "", "elif", "n_dim", "==", "2", ":", "\n", "        ", "img_np", "=", "tensor", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\n", "'Only support 4D, 3D and 2D tensor. But received with dimension: {:d}'", ".", "format", "(", "n_dim", ")", ")", "\n", "", "if", "out_type", "==", "np", ".", "uint8", ":", "\n", "        ", "img_np", "=", "(", "img_np", "*", "255.0", ")", ".", "round", "(", ")", "\n", "# Important. Unlike matlab, numpy.unit8() WILL NOT round by default.", "\n", "", "return", "img_np", ".", "astype", "(", "out_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.tensor2rgbimg": [[145, 170], ["tensor.squeeze().float().cpu().clamp_.squeeze().float().cpu().clamp_", "tensor.squeeze().float().cpu().clamp_.dim", "tensor.numpy.astype", "len", "torchvision.utils.make_grid().numpy", "numpy.transpose", "tensor.squeeze().float().cpu().clamp_.squeeze().float().cpu", "tensor.squeeze().float().cpu().clamp_.numpy", "numpy.transpose", "torchvision.utils.make_grid", "tensor.squeeze().float().cpu().clamp_.numpy", "TypeError", "tensor.squeeze().float().cpu().clamp_.squeeze().float", "int", "tensor.squeeze().float().cpu().clamp_.squeeze", "math.sqrt"], "function", ["None"], ["", "def", "tensor2rgbimg", "(", "tensor", ",", "out_type", "=", "np", ".", "uint8", ",", "min_max", "=", "(", "0", ",", "1", ")", ",", "mode", "=", "'bgr'", ")", ":", "\n", "    ", "'''\n    Converts a torch Tensor into an image Numpy array\n    Input: 4D(B,(3/1),H,W), 3D(C,H,W), or 2D(H,W), any range, RGB channel order\n    Output: 3D(H,W,C) or 2D(H,W), [0,255], np.uint8 (default)\n    '''", "\n", "tensor", "=", "tensor", ".", "squeeze", "(", ")", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "clamp_", "(", "*", "min_max", ")", "# clamp", "\n", "tensor", "=", "(", "tensor", "-", "min_max", "[", "0", "]", ")", "/", "(", "min_max", "[", "1", "]", "-", "min_max", "[", "0", "]", ")", "# to range [0,1]", "\n", "n_dim", "=", "tensor", ".", "dim", "(", ")", "\n", "if", "n_dim", "==", "4", ":", "\n", "        ", "n_img", "=", "len", "(", "tensor", ")", "\n", "img_np", "=", "make_grid", "(", "tensor", ",", "nrow", "=", "int", "(", "math", ".", "sqrt", "(", "n_img", ")", ")", ",", "normalize", "=", "False", ")", ".", "numpy", "(", ")", "\n", "img_np", "=", "np", ".", "transpose", "(", "img_np", ",", "(", "1", ",", "2", ",", "0", ")", ")", "# HWC, RGB", "\n", "", "elif", "n_dim", "==", "3", ":", "\n", "        ", "img_np", "=", "tensor", ".", "numpy", "(", ")", "\n", "img_np", "=", "np", ".", "transpose", "(", "img_np", ",", "(", "1", ",", "2", ",", "0", ")", ")", "# HWC, RGB", "\n", "", "elif", "n_dim", "==", "2", ":", "\n", "        ", "img_np", "=", "tensor", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\n", "'Only support 4D, 3D and 2D tensor. But received with dimension: {:d}'", ".", "format", "(", "n_dim", ")", ")", "\n", "", "if", "out_type", "==", "np", ".", "uint8", ":", "\n", "        ", "img_np", "=", "(", "img_np", "*", "255.0", ")", ".", "round", "(", ")", "\n", "# Important. Unlike matlab, numpy.unit8() WILL NOT round by default.", "\n", "", "return", "img_np", ".", "astype", "(", "out_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.save_img": [[172, 174], ["cv2.imwrite"], "function", ["None"], ["", "def", "save_img", "(", "img", ",", "img_path", ",", "mode", "=", "'RGB'", ")", ":", "\n", "    ", "cv2", ".", "imwrite", "(", "img_path", ",", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.DUF_downsample": [[176, 211], ["x.view.size", "x.view.reshape", "x.view.reshape", "torch.pad", "torch.from_numpy().type_as().unsqueeze().unsqueeze", "torch.from_numpy().type_as().unsqueeze().unsqueeze", "torch.conv2d", "x.view.view", "numpy.zeros", "fi.gaussian_filter", "x.view.size", "x.view.size", "torch.from_numpy().type_as().unsqueeze", "torch.from_numpy().type_as().unsqueeze", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.from_numpy", "torch.from_numpy", "util.DUF_downsample.gkern"], "function", ["None"], ["", "def", "DUF_downsample", "(", "x", ",", "scale", "=", "4", ",", "sigma", "=", "None", ")", ":", "\n", "    ", "\"\"\"Downsamping with Gaussian kernel used in the DUF official code\n\n    Args:\n        x (Tensor, [B, T, C, H, W]): frames to be downsampled.\n        scale (int): downsampling factor: 2 | 3 | 4.\n    \"\"\"", "\n", "\n", "assert", "scale", "in", "[", "2", ",", "3", ",", "4", "]", ",", "'Scale [{}] is not supported'", ".", "format", "(", "scale", ")", "\n", "\n", "def", "gkern", "(", "kernlen", "=", "13", ",", "nsig", "=", "1.6", ")", ":", "\n", "        ", "import", "scipy", ".", "ndimage", ".", "filters", "as", "fi", "\n", "inp", "=", "np", ".", "zeros", "(", "(", "kernlen", ",", "kernlen", ")", ")", "\n", "# set element at the middle to one, a dirac delta", "\n", "inp", "[", "kernlen", "//", "2", ",", "kernlen", "//", "2", "]", "=", "1", "\n", "# gaussian-smooth the dirac, resulting in a gaussian filter mask", "\n", "return", "fi", ".", "gaussian_filter", "(", "inp", ",", "nsig", ")", "\n", "\n", "", "B", ",", "T", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "reshape", "(", "-", "1", ",", "H", ",", "W", ")", "\n", "x", "=", "x", ".", "reshape", "(", "-", "1", ",", "1", ",", "H", ",", "W", ")", "\n", "pad_w", ",", "pad_h", "=", "6", "+", "scale", "*", "2", ",", "6", "+", "scale", "*", "2", "# 6 is the pad of the gaussian filter", "\n", "r_h", ",", "r_w", "=", "0", ",", "0", "\n", "if", "scale", "==", "3", ":", "\n", "        ", "r_h", "=", "3", "-", "(", "H", "%", "3", ")", "\n", "r_w", "=", "3", "-", "(", "W", "%", "3", ")", "\n", "", "x", "=", "F", ".", "pad", "(", "x", ",", "[", "pad_w", ",", "pad_w", "+", "r_w", ",", "pad_h", ",", "pad_h", "+", "r_h", "]", ",", "'reflect'", ")", "\n", "\n", "if", "sigma", "is", "None", ":", "\n", "        ", "sigma", "=", "0.4", "*", "scale", "\n", "", "gaussian_filter", "=", "torch", ".", "from_numpy", "(", "gkern", "(", "13", ",", "sigma", ")", ")", ".", "type_as", "(", "x", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "x", "=", "F", ".", "conv2d", "(", "x", ",", "gaussian_filter", ",", "stride", "=", "scale", ")", "\n", "x", "=", "x", "[", ":", ",", ":", ",", "2", ":", "-", "2", ",", "2", ":", "-", "2", "]", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "T", ",", "C", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.single_forward": [[213, 230], ["output.data.float().cpu.data.float().cpu", "torch.no_grad", "torch.no_grad", "model", "isinstance", "isinstance", "output.data.float().cpu.data.float"], "function", ["None"], ["", "def", "single_forward", "(", "model", ",", "inp", ")", ":", "\n", "    ", "\"\"\"PyTorch model forward (single test), it is just a simple warpper\n    Args:\n        model (PyTorch model)\n        inp (Tensor): inputs defined by the model\n\n    Returns:\n        output (Tensor): outputs of the model. float, in CPU\n    \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "model_output", "=", "model", "(", "inp", ")", "\n", "if", "isinstance", "(", "model_output", ",", "list", ")", "or", "isinstance", "(", "model_output", ",", "tuple", ")", ":", "\n", "            ", "output", "=", "model_output", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "output", "=", "model_output", "\n", "", "", "output", "=", "output", ".", "data", ".", "float", "(", ")", ".", "cpu", "(", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.flipx4_forward": [[232, 255], ["util.single_forward", "util.single_forward", "util.single_forward", "util.single_forward", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.single_forward", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.single_forward", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.single_forward", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.single_forward"], ["", "def", "flipx4_forward", "(", "model", ",", "inp", ")", ":", "\n", "    ", "\"\"\"Flip testing with X4 self ensemble, i.e., normal, flip H, flip W, flip H and W\n    Args:\n        model (PyTorch model)\n        inp (Tensor): inputs defined by the model\n\n    Returns:\n        output (Tensor): outputs of the model. float, in CPU\n    \"\"\"", "\n", "# normal", "\n", "output_f", "=", "single_forward", "(", "model", ",", "inp", ")", "\n", "\n", "# flip W", "\n", "output", "=", "single_forward", "(", "model", ",", "torch", ".", "flip", "(", "inp", ",", "(", "-", "1", ",", ")", ")", ")", "\n", "output_f", "=", "output_f", "+", "torch", ".", "flip", "(", "output", ",", "(", "-", "1", ",", ")", ")", "\n", "# flip H", "\n", "output", "=", "single_forward", "(", "model", ",", "torch", ".", "flip", "(", "inp", ",", "(", "-", "2", ",", ")", ")", ")", "\n", "output_f", "=", "output_f", "+", "torch", ".", "flip", "(", "output", ",", "(", "-", "2", ",", ")", ")", "\n", "# flip both H and W", "\n", "output", "=", "single_forward", "(", "model", ",", "torch", ".", "flip", "(", "inp", ",", "(", "-", "2", ",", "-", "1", ")", ")", ")", "\n", "output_f", "=", "output_f", "+", "torch", ".", "flip", "(", "output", ",", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "\n", "return", "output_f", "/", "4", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.calculate_psnr": [[262, 270], ["img1.astype.astype", "img2.astype.astype", "numpy.mean", "float", "math.log10", "math.sqrt"], "function", ["None"], ["", "def", "calculate_psnr", "(", "img1", ",", "img2", ")", ":", "\n", "# img1 and img2 have range [0, 255]", "\n", "    ", "img1", "=", "img1", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img2", "=", "img2", ".", "astype", "(", "np", ".", "float64", ")", "\n", "mse", "=", "np", ".", "mean", "(", "(", "img1", "-", "img2", ")", "**", "2", ")", "\n", "if", "mse", "==", "0", ":", "\n", "        ", "return", "float", "(", "'inf'", ")", "\n", "", "return", "20", "*", "math", ".", "log10", "(", "255.0", "/", "math", ".", "sqrt", "(", "mse", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.ssim": [[272, 293], ["img1.astype.astype", "img2.astype.astype", "cv2.getGaussianKernel", "numpy.outer", "ssim_map.mean", "cv2.getGaussianKernel.transpose", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D"], "function", ["None"], ["", "def", "ssim", "(", "img1", ",", "img2", ")", ":", "\n", "    ", "C1", "=", "(", "0.01", "*", "255", ")", "**", "2", "\n", "C2", "=", "(", "0.03", "*", "255", ")", "**", "2", "\n", "\n", "img1", "=", "img1", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img2", "=", "img2", ".", "astype", "(", "np", ".", "float64", ")", "\n", "kernel", "=", "cv2", ".", "getGaussianKernel", "(", "11", ",", "1.5", ")", "\n", "window", "=", "np", ".", "outer", "(", "kernel", ",", "kernel", ".", "transpose", "(", ")", ")", "\n", "\n", "mu1", "=", "cv2", ".", "filter2D", "(", "img1", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "# valid", "\n", "mu2", "=", "cv2", ".", "filter2D", "(", "img2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "\n", "mu1_sq", "=", "mu1", "**", "2", "\n", "mu2_sq", "=", "mu2", "**", "2", "\n", "mu1_mu2", "=", "mu1", "*", "mu2", "\n", "sigma1_sq", "=", "cv2", ".", "filter2D", "(", "img1", "**", "2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu1_sq", "\n", "sigma2_sq", "=", "cv2", ".", "filter2D", "(", "img2", "**", "2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu2_sq", "\n", "sigma12", "=", "cv2", ".", "filter2D", "(", "img1", "*", "img2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu1_mu2", "\n", "\n", "ssim_map", "=", "(", "(", "2", "*", "mu1_mu2", "+", "C1", ")", "*", "(", "2", "*", "sigma12", "+", "C2", ")", ")", "/", "(", "(", "mu1_sq", "+", "mu2_sq", "+", "C1", ")", "*", "\n", "(", "sigma1_sq", "+", "sigma2_sq", "+", "C2", ")", ")", "\n", "return", "ssim_map", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.calculate_ssim": [[295, 314], ["ValueError", "util.ssim", "ValueError", "range", "numpy.array().mean", "ssims.append", "util.ssim", "util.ssim", "numpy.array", "numpy.squeeze", "numpy.squeeze"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.metrics.calculate_PSNR_SSIM.ssim", "home.repos.pwc.inspect_result.esw0116_DynaVSR.metrics.calculate_PSNR_SSIM.ssim", "home.repos.pwc.inspect_result.esw0116_DynaVSR.metrics.calculate_PSNR_SSIM.ssim"], ["", "def", "calculate_ssim", "(", "img1", ",", "img2", ")", ":", "\n", "    ", "'''calculate SSIM\n    the same outputs as MATLAB's\n    img1, img2: [0, 255]\n    '''", "\n", "if", "not", "img1", ".", "shape", "==", "img2", ".", "shape", ":", "\n", "        ", "raise", "ValueError", "(", "'Input images must have the same dimensions.'", ")", "\n", "", "if", "img1", ".", "ndim", "==", "2", ":", "\n", "        ", "return", "ssim", "(", "img1", ",", "img2", ")", "\n", "", "elif", "img1", ".", "ndim", "==", "3", ":", "\n", "        ", "if", "img1", ".", "shape", "[", "2", "]", "==", "3", ":", "\n", "            ", "ssims", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "                ", "ssims", ".", "append", "(", "ssim", "(", "img1", ",", "img2", ")", ")", "\n", "", "return", "np", ".", "array", "(", "ssims", ")", ".", "mean", "(", ")", "\n", "", "elif", "img1", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "            ", "return", "ssim", "(", "np", ".", "squeeze", "(", "img1", ")", ",", "np", ".", "squeeze", "(", "img2", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Wrong input image dimensions.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data_scripts.extract_subimages.main": [[14, 76], ["extract_subimages.extract_signle", "data._get_paths_from_images", "data._get_paths_from_images", "zip", "print", "extract_subimages.extract_signle", "print", "extract_subimages.extract_signle", "ValueError", "len", "len", "PIL.Image.open", "PIL.Image.open", "len", "len", "data._get_paths_from_images", "data._get_paths_from_images"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.data_scripts.extract_subimages.extract_signle", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util._get_paths_from_images", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util._get_paths_from_images", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data_scripts.extract_subimages.extract_signle", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data_scripts.extract_subimages.extract_signle", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util._get_paths_from_images", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util._get_paths_from_images"], ["def", "main", "(", ")", ":", "\n", "    ", "mode", "=", "'pair'", "# single (one input folder) | pair (extract corresponding GT and LR pairs)", "\n", "opt", "=", "{", "}", "\n", "opt", "[", "'n_thread'", "]", "=", "20", "\n", "opt", "[", "'compression_level'", "]", "=", "3", "# 3 is the default value in cv2", "\n", "# CV_IMWRITE_PNG_COMPRESSION from 0 to 9. A higher value means a smaller size and longer", "\n", "# compression time. If read raw images during training, use 0 for faster IO speed.", "\n", "if", "mode", "==", "'single'", ":", "\n", "        ", "opt", "[", "'input_folder'", "]", "=", "'../../datasets/DIV2K/DIV2K_train_HR'", "\n", "opt", "[", "'save_folder'", "]", "=", "'../../datasets/DIV2K/DIV2K800_sub'", "\n", "opt", "[", "'crop_sz'", "]", "=", "480", "# the size of each sub-image", "\n", "opt", "[", "'step'", "]", "=", "240", "# step of the sliding crop window", "\n", "opt", "[", "'thres_sz'", "]", "=", "48", "# size threshold", "\n", "extract_signle", "(", "opt", ")", "\n", "", "elif", "mode", "==", "'pair'", ":", "\n", "        ", "GT_folder", "=", "'../../datasets/DIV2K/DIV2K_train_HR'", "\n", "LR_folder", "=", "'../../datasets/DIV2K/DIV2K_train_LR_bicubic/X4'", "\n", "save_GT_folder", "=", "'../../datasets/DIV2K/DIV2K800_sub'", "\n", "save_LR_folder", "=", "'../../datasets/DIV2K/DIV2K800_sub_bicLRx4'", "\n", "scale_ratio", "=", "4", "\n", "crop_sz", "=", "480", "# the size of each sub-image (GT)", "\n", "step", "=", "240", "# step of the sliding crop window (GT)", "\n", "thres_sz", "=", "48", "# size threshold", "\n", "########################################################################", "\n", "# check that all the GT and LR images have correct scale ratio", "\n", "img_GT_list", "=", "data_util", ".", "_get_paths_from_images", "(", "GT_folder", ")", "\n", "img_LR_list", "=", "data_util", ".", "_get_paths_from_images", "(", "LR_folder", ")", "\n", "assert", "len", "(", "img_GT_list", ")", "==", "len", "(", "img_LR_list", ")", ",", "'different length of GT_folder and LR_folder.'", "\n", "for", "path_GT", ",", "path_LR", "in", "zip", "(", "img_GT_list", ",", "img_LR_list", ")", ":", "\n", "            ", "img_GT", "=", "Image", ".", "open", "(", "path_GT", ")", "\n", "img_LR", "=", "Image", ".", "open", "(", "path_LR", ")", "\n", "w_GT", ",", "h_GT", "=", "img_GT", ".", "size", "\n", "w_LR", ",", "h_LR", "=", "img_LR", ".", "size", "\n", "assert", "w_GT", "/", "w_LR", "==", "scale_ratio", ",", "'GT width [{:d}] is not {:d}X as LR weight [{:d}] for {:s}.'", ".", "format", "(", "# noqa: E501", "\n", "w_GT", ",", "scale_ratio", ",", "w_LR", ",", "path_GT", ")", "\n", "assert", "w_GT", "/", "w_LR", "==", "scale_ratio", ",", "'GT width [{:d}] is not {:d}X as LR weight [{:d}] for {:s}.'", ".", "format", "(", "# noqa: E501", "\n", "w_GT", ",", "scale_ratio", ",", "w_LR", ",", "path_GT", ")", "\n", "# check crop size, step and threshold size", "\n", "", "assert", "crop_sz", "%", "scale_ratio", "==", "0", ",", "'crop size is not {:d}X multiplication.'", ".", "format", "(", "\n", "scale_ratio", ")", "\n", "assert", "step", "%", "scale_ratio", "==", "0", ",", "'step is not {:d}X multiplication.'", ".", "format", "(", "scale_ratio", ")", "\n", "assert", "thres_sz", "%", "scale_ratio", "==", "0", ",", "'thres_sz is not {:d}X multiplication.'", ".", "format", "(", "\n", "scale_ratio", ")", "\n", "print", "(", "'process GT...'", ")", "\n", "opt", "[", "'input_folder'", "]", "=", "GT_folder", "\n", "opt", "[", "'save_folder'", "]", "=", "save_GT_folder", "\n", "opt", "[", "'crop_sz'", "]", "=", "crop_sz", "\n", "opt", "[", "'step'", "]", "=", "step", "\n", "opt", "[", "'thres_sz'", "]", "=", "thres_sz", "\n", "extract_signle", "(", "opt", ")", "\n", "print", "(", "'process LR...'", ")", "\n", "opt", "[", "'input_folder'", "]", "=", "LR_folder", "\n", "opt", "[", "'save_folder'", "]", "=", "save_LR_folder", "\n", "opt", "[", "'crop_sz'", "]", "=", "crop_sz", "//", "scale_ratio", "\n", "opt", "[", "'step'", "]", "=", "step", "//", "scale_ratio", "\n", "opt", "[", "'thres_sz'", "]", "=", "thres_sz", "//", "scale_ratio", "\n", "extract_signle", "(", "opt", ")", "\n", "assert", "len", "(", "data_util", ".", "_get_paths_from_images", "(", "save_GT_folder", ")", ")", "==", "len", "(", "\n", "data_util", ".", "_get_paths_from_images", "(", "\n", "save_LR_folder", ")", ")", ",", "'different length of save_GT_folder and save_LR_folder.'", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Wrong mode.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data_scripts.extract_subimages.extract_signle": [[78, 100], ["data._get_paths_from_images", "utils.util.ProgressBar", "multiprocessing.Pool", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "print", "os.exists", "os.makedirs", "os.makedirs", "print", "print", "sys.exit", "utils.util.ProgressBar.update", "len", "multiprocessing.Pool.apply_async"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util._get_paths_from_images", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.ProgressBar.update"], ["", "", "def", "extract_signle", "(", "opt", ")", ":", "\n", "    ", "input_folder", "=", "opt", "[", "'input_folder'", "]", "\n", "save_folder", "=", "opt", "[", "'save_folder'", "]", "\n", "if", "not", "osp", ".", "exists", "(", "save_folder", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_folder", ")", "\n", "print", "(", "'mkdir [{:s}] ...'", ".", "format", "(", "save_folder", ")", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Folder [{:s}] already exists. Exit...'", ".", "format", "(", "save_folder", ")", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "img_list", "=", "data_util", ".", "_get_paths_from_images", "(", "input_folder", ")", "\n", "\n", "def", "update", "(", "arg", ")", ":", "\n", "        ", "pbar", ".", "update", "(", "arg", ")", "\n", "\n", "", "pbar", "=", "ProgressBar", "(", "len", "(", "img_list", ")", ")", "\n", "\n", "pool", "=", "Pool", "(", "opt", "[", "'n_thread'", "]", ")", "\n", "for", "path", "in", "img_list", ":", "\n", "        ", "pool", ".", "apply_async", "(", "worker", ",", "args", "=", "(", "path", ",", "opt", ")", ",", "callback", "=", "update", ")", "\n", "", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "print", "(", "'All subprocesses done.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data_scripts.extract_subimages.worker": [[102, 138], ["os.basename", "cv2.imread", "len", "numpy.arange", "numpy.arange", "numpy.append", "numpy.append", "ValueError", "numpy.ascontiguousarray", "cv2.imwrite", "os.join", "osp.basename.replace"], "function", ["None"], ["", "def", "worker", "(", "path", ",", "opt", ")", ":", "\n", "    ", "crop_sz", "=", "opt", "[", "'crop_sz'", "]", "\n", "step", "=", "opt", "[", "'step'", "]", "\n", "thres_sz", "=", "opt", "[", "'thres_sz'", "]", "\n", "img_name", "=", "osp", ".", "basename", "(", "path", ")", "\n", "img", "=", "cv2", ".", "imread", "(", "path", ",", "cv2", ".", "IMREAD_UNCHANGED", ")", "\n", "\n", "n_channels", "=", "len", "(", "img", ".", "shape", ")", "\n", "if", "n_channels", "==", "2", ":", "\n", "        ", "h", ",", "w", "=", "img", ".", "shape", "\n", "", "elif", "n_channels", "==", "3", ":", "\n", "        ", "h", ",", "w", ",", "c", "=", "img", ".", "shape", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Wrong image shape - {}'", ".", "format", "(", "n_channels", ")", ")", "\n", "\n", "", "h_space", "=", "np", ".", "arange", "(", "0", ",", "h", "-", "crop_sz", "+", "1", ",", "step", ")", "\n", "if", "h", "-", "(", "h_space", "[", "-", "1", "]", "+", "crop_sz", ")", ">", "thres_sz", ":", "\n", "        ", "h_space", "=", "np", ".", "append", "(", "h_space", ",", "h", "-", "crop_sz", ")", "\n", "", "w_space", "=", "np", ".", "arange", "(", "0", ",", "w", "-", "crop_sz", "+", "1", ",", "step", ")", "\n", "if", "w", "-", "(", "w_space", "[", "-", "1", "]", "+", "crop_sz", ")", ">", "thres_sz", ":", "\n", "        ", "w_space", "=", "np", ".", "append", "(", "w_space", ",", "w", "-", "crop_sz", ")", "\n", "\n", "", "index", "=", "0", "\n", "for", "x", "in", "h_space", ":", "\n", "        ", "for", "y", "in", "w_space", ":", "\n", "            ", "index", "+=", "1", "\n", "if", "n_channels", "==", "2", ":", "\n", "                ", "crop_img", "=", "img", "[", "x", ":", "x", "+", "crop_sz", ",", "y", ":", "y", "+", "crop_sz", "]", "\n", "", "else", ":", "\n", "                ", "crop_img", "=", "img", "[", "x", ":", "x", "+", "crop_sz", ",", "y", ":", "y", "+", "crop_sz", ",", ":", "]", "\n", "", "crop_img", "=", "np", ".", "ascontiguousarray", "(", "crop_img", ")", "\n", "cv2", ".", "imwrite", "(", "\n", "osp", ".", "join", "(", "opt", "[", "'save_folder'", "]", ",", "\n", "img_name", ".", "replace", "(", "'.png'", ",", "'_s{:03d}.png'", ".", "format", "(", "index", ")", ")", ")", ",", "crop_img", ",", "\n", "[", "cv2", ".", "IMWRITE_PNG_COMPRESSION", ",", "opt", "[", "'compression_level'", "]", "]", ")", "\n", "", "", "return", "'Processing {:s} ...'", ".", "format", "(", "img_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data_scripts.rename.main": [[5, 9], ["rename.DIV2K", "print"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.data_scripts.rename.DIV2K"], ["def", "main", "(", ")", ":", "\n", "    ", "folder", "=", "'../../datasets/DIV2K/DIV2K_train_LR_bicubic/X4'", "\n", "DIV2K", "(", "folder", ")", "\n", "print", "(", "'Finished.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data_scripts.rename.DIV2K": [[11, 16], ["glob.glob", "os.path.join", "img_path.replace().replace().replace().replace", "os.rename", "img_path.replace().replace().replace", "img_path.replace().replace", "img_path.replace"], "function", ["None"], ["", "def", "DIV2K", "(", "path", ")", ":", "\n", "    ", "img_path_l", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'*'", ")", ")", "\n", "for", "img_path", "in", "img_path_l", ":", "\n", "        ", "new_path", "=", "img_path", ".", "replace", "(", "'x2'", ",", "''", ")", ".", "replace", "(", "'x3'", ",", "''", ")", ".", "replace", "(", "'x4'", ",", "''", ")", ".", "replace", "(", "'x8'", ",", "''", ")", "\n", "os", ".", "rename", "(", "img_path", ",", "new_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data_scripts.test_dataloader.main": [[11, 101], ["utils.util.mkdir", "data.create_dataset", "data.create_dataloader", "int", "print", "enumerate", "math.sqrt", "print", "torchvision.utils.save_image", "range", "torchvision.utils.save_image", "ValueError", "LQs.size", "torchvision.utils.save_image"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.mkdir", "home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.__init__.create_dataset", "home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.__init__.create_dataloader"], ["def", "main", "(", ")", ":", "\n", "    ", "dataset", "=", "'DIV2K800_sub'", "# REDS | Vimeo90K | DIV2K800_sub", "\n", "opt", "=", "{", "}", "\n", "opt", "[", "'dist'", "]", "=", "False", "\n", "opt", "[", "'gpu_ids'", "]", "=", "[", "0", "]", "\n", "if", "dataset", "==", "'REDS'", ":", "\n", "        ", "opt", "[", "'name'", "]", "=", "'test_REDS'", "\n", "opt", "[", "'dataroot_GT'", "]", "=", "'../../datasets/REDS/train_sharp_wval.lmdb'", "\n", "opt", "[", "'dataroot_LQ'", "]", "=", "'../../datasets/REDS/train_sharp_bicubic_wval.lmdb'", "\n", "opt", "[", "'mode'", "]", "=", "'REDS'", "\n", "opt", "[", "'N_frames'", "]", "=", "5", "\n", "opt", "[", "'phase'", "]", "=", "'train'", "\n", "opt", "[", "'use_shuffle'", "]", "=", "True", "\n", "opt", "[", "'n_workers'", "]", "=", "8", "\n", "opt", "[", "'batch_size'", "]", "=", "16", "\n", "opt", "[", "'GT_size'", "]", "=", "256", "\n", "opt", "[", "'LQ_size'", "]", "=", "64", "\n", "opt", "[", "'scale'", "]", "=", "4", "\n", "opt", "[", "'use_flip'", "]", "=", "True", "\n", "opt", "[", "'use_rot'", "]", "=", "True", "\n", "opt", "[", "'interval_list'", "]", "=", "[", "1", "]", "\n", "opt", "[", "'random_reverse'", "]", "=", "False", "\n", "opt", "[", "'border_mode'", "]", "=", "False", "\n", "opt", "[", "'cache_keys'", "]", "=", "None", "\n", "opt", "[", "'data_type'", "]", "=", "'lmdb'", "# img | lmdb | mc", "\n", "", "elif", "dataset", "==", "'Vimeo90K'", ":", "\n", "        ", "opt", "[", "'name'", "]", "=", "'test_Vimeo90K'", "\n", "opt", "[", "'dataroot_GT'", "]", "=", "'../../datasets/vimeo90k/vimeo90k_train_GT.lmdb'", "\n", "opt", "[", "'dataroot_LQ'", "]", "=", "'../../datasets/vimeo90k/vimeo90k_train_LR7frames.lmdb'", "\n", "opt", "[", "'mode'", "]", "=", "'Vimeo90K'", "\n", "opt", "[", "'N_frames'", "]", "=", "7", "\n", "opt", "[", "'phase'", "]", "=", "'train'", "\n", "opt", "[", "'use_shuffle'", "]", "=", "True", "\n", "opt", "[", "'n_workers'", "]", "=", "8", "\n", "opt", "[", "'batch_size'", "]", "=", "16", "\n", "opt", "[", "'GT_size'", "]", "=", "256", "\n", "opt", "[", "'LQ_size'", "]", "=", "64", "\n", "opt", "[", "'scale'", "]", "=", "4", "\n", "opt", "[", "'use_flip'", "]", "=", "True", "\n", "opt", "[", "'use_rot'", "]", "=", "True", "\n", "opt", "[", "'interval_list'", "]", "=", "[", "1", "]", "\n", "opt", "[", "'random_reverse'", "]", "=", "False", "\n", "opt", "[", "'border_mode'", "]", "=", "False", "\n", "opt", "[", "'cache_keys'", "]", "=", "None", "\n", "opt", "[", "'data_type'", "]", "=", "'lmdb'", "# img | lmdb | mc", "\n", "", "elif", "dataset", "==", "'DIV2K800_sub'", ":", "\n", "        ", "opt", "[", "'name'", "]", "=", "'DIV2K800'", "\n", "opt", "[", "'dataroot_GT'", "]", "=", "'../../datasets/DIV2K/DIV2K800_sub.lmdb'", "\n", "opt", "[", "'dataroot_LQ'", "]", "=", "'../../datasets/DIV2K/DIV2K800_sub_bicLRx4.lmdb'", "\n", "opt", "[", "'mode'", "]", "=", "'LQGT'", "\n", "opt", "[", "'phase'", "]", "=", "'train'", "\n", "opt", "[", "'use_shuffle'", "]", "=", "True", "\n", "opt", "[", "'n_workers'", "]", "=", "8", "\n", "opt", "[", "'batch_size'", "]", "=", "16", "\n", "opt", "[", "'GT_size'", "]", "=", "128", "\n", "opt", "[", "'scale'", "]", "=", "4", "\n", "opt", "[", "'use_flip'", "]", "=", "True", "\n", "opt", "[", "'use_rot'", "]", "=", "True", "\n", "opt", "[", "'color'", "]", "=", "'RGB'", "\n", "opt", "[", "'data_type'", "]", "=", "'lmdb'", "# img | lmdb", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Please implement by yourself.'", ")", "\n", "\n", "", "util", ".", "mkdir", "(", "'tmp'", ")", "\n", "train_set", "=", "create_dataset", "(", "opt", ")", "\n", "train_loader", "=", "create_dataloader", "(", "train_set", ",", "opt", ",", "opt", ",", "None", ")", "\n", "nrow", "=", "int", "(", "math", ".", "sqrt", "(", "opt", "[", "'batch_size'", "]", ")", ")", "\n", "padding", "=", "2", "if", "opt", "[", "'phase'", "]", "==", "'train'", "else", "0", "\n", "\n", "print", "(", "'start...'", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "if", "i", ">", "5", ":", "\n", "            ", "break", "\n", "", "print", "(", "i", ")", "\n", "if", "dataset", "==", "'REDS'", "or", "dataset", "==", "'Vimeo90K'", ":", "\n", "            ", "LQs", "=", "data", "[", "'LQs'", "]", "\n", "", "else", ":", "\n", "            ", "LQ", "=", "data", "[", "'LQ'", "]", "\n", "", "GT", "=", "data", "[", "'GT'", "]", "\n", "\n", "if", "dataset", "==", "'REDS'", "or", "dataset", "==", "'Vimeo90K'", ":", "\n", "            ", "for", "j", "in", "range", "(", "LQs", ".", "size", "(", "1", ")", ")", ":", "\n", "                ", "torchvision", ".", "utils", ".", "save_image", "(", "LQs", "[", ":", ",", "j", ",", ":", ",", ":", ",", ":", "]", ",", "\n", "'tmp/LQ_{:03d}_{}.png'", ".", "format", "(", "i", ",", "j", ")", ",", "nrow", "=", "nrow", ",", "\n", "padding", "=", "padding", ",", "normalize", "=", "False", ")", "\n", "", "", "else", ":", "\n", "            ", "torchvision", ".", "utils", ".", "save_image", "(", "LQ", ",", "'tmp/LQ_{:03d}.png'", ".", "format", "(", "i", ")", ",", "nrow", "=", "nrow", ",", "\n", "padding", "=", "padding", ",", "normalize", "=", "False", ")", "\n", "", "torchvision", ".", "utils", ".", "save_image", "(", "GT", ",", "'tmp/GT_{:03d}.png'", ".", "format", "(", "i", ")", ",", "nrow", "=", "nrow", ",", "padding", "=", "padding", ",", "\n", "normalize", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data_scripts.generate_mod_LR_bic.generate_mod_LR_bic": [[13, 78], ["os.path.join", "os.path.join", "os.path.join", "len", "range", "os.path.isdir", "print", "exit", "os.path.isdir", "os.mkdir", "os.path.isdir", "os.mkdir", "os.path.isdir", "os.mkdir", "os.path.isdir", "os.mkdir", "os.path.isdir", "os.mkdir", "print", "os.path.isdir", "os.mkdir", "print", "os.path.isdir", "os.mkdir", "print", "print", "cv2.imread", "int", "int", "imresize_np", "imresize_np", "cv2.imwrite", "cv2.imwrite", "cv2.imwrite", "str", "str", "str", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.listdir", "f.endswith", "os.path.join", "numpy.floor", "numpy.floor", "len", "os.path.join", "os.path.join", "os.path.join", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.mkdir", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.mkdir", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.mkdir", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.mkdir", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.mkdir", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.mkdir", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.mkdir", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.imresize_np", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.imresize_np"], ["", "def", "generate_mod_LR_bic", "(", ")", ":", "\n", "# set parameters", "\n", "    ", "up_scale", "=", "4", "\n", "mod_scale", "=", "4", "\n", "# set data dir", "\n", "sourcedir", "=", "'/data/datasets/img'", "\n", "savedir", "=", "'/data/datasets/mod'", "\n", "\n", "saveHRpath", "=", "os", ".", "path", ".", "join", "(", "savedir", ",", "'HR'", ",", "'x'", "+", "str", "(", "mod_scale", ")", ")", "\n", "saveLRpath", "=", "os", ".", "path", ".", "join", "(", "savedir", ",", "'LR'", ",", "'x'", "+", "str", "(", "up_scale", ")", ")", "\n", "saveBicpath", "=", "os", ".", "path", ".", "join", "(", "savedir", ",", "'Bic'", ",", "'x'", "+", "str", "(", "up_scale", ")", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "sourcedir", ")", ":", "\n", "        ", "print", "(", "'Error: No source data found'", ")", "\n", "exit", "(", "0", ")", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "savedir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "savedir", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "savedir", ",", "'HR'", ")", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "savedir", ",", "'HR'", ")", ")", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "savedir", ",", "'LR'", ")", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "savedir", ",", "'LR'", ")", ")", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "savedir", ",", "'Bic'", ")", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "savedir", ",", "'Bic'", ")", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "saveHRpath", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "saveHRpath", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'It will cover '", "+", "str", "(", "saveHRpath", ")", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "saveLRpath", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "saveLRpath", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'It will cover '", "+", "str", "(", "saveLRpath", ")", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "saveBicpath", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "saveBicpath", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'It will cover '", "+", "str", "(", "saveBicpath", ")", ")", "\n", "\n", "", "filepaths", "=", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "sourcedir", ")", "if", "f", ".", "endswith", "(", "'.png'", ")", "]", "\n", "num_files", "=", "len", "(", "filepaths", ")", "\n", "\n", "# prepare data with augementation", "\n", "for", "i", "in", "range", "(", "num_files", ")", ":", "\n", "        ", "filename", "=", "filepaths", "[", "i", "]", "\n", "print", "(", "'No.{} -- Processing {}'", ".", "format", "(", "i", ",", "filename", ")", ")", "\n", "# read image", "\n", "image", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "sourcedir", ",", "filename", ")", ")", "\n", "\n", "width", "=", "int", "(", "np", ".", "floor", "(", "image", ".", "shape", "[", "1", "]", "/", "mod_scale", ")", ")", "\n", "height", "=", "int", "(", "np", ".", "floor", "(", "image", ".", "shape", "[", "0", "]", "/", "mod_scale", ")", ")", "\n", "# modcrop", "\n", "if", "len", "(", "image", ".", "shape", ")", "==", "3", ":", "\n", "            ", "image_HR", "=", "image", "[", "0", ":", "mod_scale", "*", "height", ",", "0", ":", "mod_scale", "*", "width", ",", ":", "]", "\n", "", "else", ":", "\n", "            ", "image_HR", "=", "image", "[", "0", ":", "mod_scale", "*", "height", ",", "0", ":", "mod_scale", "*", "width", "]", "\n", "# LR", "\n", "", "image_LR", "=", "imresize_np", "(", "image_HR", ",", "1", "/", "up_scale", ",", "True", ")", "\n", "# bic", "\n", "image_Bic", "=", "imresize_np", "(", "image_LR", ",", "up_scale", ",", "True", ")", "\n", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "saveHRpath", ",", "filename", ")", ",", "image_HR", ")", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "saveLRpath", ",", "filename", ")", ",", "image_LR", ")", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "saveBicpath", ",", "filename", ")", ",", "image_Bic", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data_scripts.create_lmdb.main": [[17, 47], ["create_lmdb.vimeo90k", "create_lmdb.REDS", "create_lmdb.general_image_folder", "create_lmdb.general_image_folder", "create_lmdb.general_image_folder", "create_lmdb.test_lmdb"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.data_scripts.create_lmdb.vimeo90k", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data_scripts.create_lmdb.REDS", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data_scripts.create_lmdb.general_image_folder", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data_scripts.create_lmdb.general_image_folder", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data_scripts.create_lmdb.general_image_folder", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data_scripts.create_lmdb.test_lmdb"], ["def", "main", "(", ")", ":", "\n", "    ", "dataset", "=", "'DIV2K_demo'", "# vimeo90K | REDS | general (e.g., DIV2K, 291) | DIV2K_demo |test", "\n", "mode", "=", "'GT'", "# used for vimeo90k and REDS datasets", "\n", "# vimeo90k: GT | LR | flow", "\n", "# REDS: train_sharp, train_sharp_bicubic, train_blur_bicubic, train_blur, train_blur_comp", "\n", "#       train_sharp_flowx4", "\n", "if", "dataset", "==", "'vimeo90k'", ":", "\n", "        ", "vimeo90k", "(", "mode", ")", "\n", "", "elif", "dataset", "==", "'REDS'", ":", "\n", "        ", "REDS", "(", "mode", ")", "\n", "", "elif", "dataset", "==", "'general'", ":", "\n", "        ", "opt", "=", "{", "}", "\n", "opt", "[", "'img_folder'", "]", "=", "'../../datasets/DIV2K/DIV2K800_sub'", "\n", "opt", "[", "'lmdb_save_path'", "]", "=", "'../../datasets/DIV2K/DIV2K800_sub.lmdb'", "\n", "opt", "[", "'name'", "]", "=", "'DIV2K800_sub_GT'", "\n", "general_image_folder", "(", "opt", ")", "\n", "", "elif", "dataset", "==", "'DIV2K_demo'", ":", "\n", "        ", "opt", "=", "{", "}", "\n", "## GT", "\n", "opt", "[", "'img_folder'", "]", "=", "'../../datasets/DIV2K/DIV2K800_sub'", "\n", "opt", "[", "'lmdb_save_path'", "]", "=", "'../../datasets/DIV2K/DIV2K800_sub.lmdb'", "\n", "opt", "[", "'name'", "]", "=", "'DIV2K800_sub_GT'", "\n", "general_image_folder", "(", "opt", ")", "\n", "## LR", "\n", "opt", "[", "'img_folder'", "]", "=", "'../../datasets/DIV2K/DIV2K800_sub_bicLRx4'", "\n", "opt", "[", "'lmdb_save_path'", "]", "=", "'../../datasets/DIV2K/DIV2K800_sub_bicLRx4.lmdb'", "\n", "opt", "[", "'name'", "]", "=", "'DIV2K800_sub_bicLRx4'", "\n", "general_image_folder", "(", "opt", ")", "\n", "", "elif", "dataset", "==", "'test'", ":", "\n", "        ", "test_lmdb", "(", "'../../datasets/REDS/train_sharp_wval.lmdb'", ",", "'REDS'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data_scripts.create_lmdb.read_image_worker": [[49, 52], ["cv2.imread"], "function", ["None"], ["", "", "def", "read_image_worker", "(", "path", ",", "key", ")", ":", "\n", "    ", "img", "=", "cv2", ".", "imread", "(", "path", ",", "cv2", ".", "IMREAD_UNCHANGED", ")", "\n", "return", "(", "key", ",", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data_scripts.create_lmdb.general_image_folder": [[54, 143], ["os.exists", "print", "sorted", "print", "lmdb.open", "utils.ProgressBar", "lmdb.open.begin", "enumerate", "env.begin.commit", "lmdb.open.close", "print", "pickle.dump", "print", "lmdb_save_path.endswith", "ValueError", "print", "sys.exit", "glob.glob", "keys.append", "print", "utils.ProgressBar", "multiprocessing.Pool", "zip", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "print", "cv2.imread", "len", "len", "zip", "util.ProgressBar.update", "key.encode", "env.begin.put", "resolutions.append", "len", "len", "len", "print", "print", "open", "os.join", "len", "util.ProgressBar.update", "multiprocessing.Pool.apply_async", "cv2.imread", "env.begin.commit", "lmdb.open.begin", "set", "os.join", "os.splitext", "len", "os.basename"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.ProgressBar.update", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.ProgressBar.update"], ["", "def", "general_image_folder", "(", "opt", ")", ":", "\n", "    ", "\"\"\"Create lmdb for general image folders\n    Users should define the keys, such as: '0321_s035' for DIV2K sub-images\n    If all the images have the same resolution, it will only store one copy of resolution info.\n        Otherwise, it will store every resolution info.\n    \"\"\"", "\n", "#### configurations", "\n", "read_all_imgs", "=", "False", "# whether real all images to memory with multiprocessing", "\n", "# Set False for use limited memory", "\n", "BATCH", "=", "5000", "# After BATCH images, lmdb commits, if read_all_imgs = False", "\n", "n_thread", "=", "40", "\n", "########################################################", "\n", "img_folder", "=", "opt", "[", "'img_folder'", "]", "\n", "lmdb_save_path", "=", "opt", "[", "'lmdb_save_path'", "]", "\n", "meta_info", "=", "{", "'name'", ":", "opt", "[", "'name'", "]", "}", "\n", "if", "not", "lmdb_save_path", ".", "endswith", "(", "'.lmdb'", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"lmdb_save_path must end with \\'lmdb\\'.\"", ")", "\n", "", "if", "osp", ".", "exists", "(", "lmdb_save_path", ")", ":", "\n", "        ", "print", "(", "'Folder [{:s}] already exists. Exit...'", ".", "format", "(", "lmdb_save_path", ")", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "#### read all the image paths to a list", "\n", "", "print", "(", "'Reading image path list ...'", ")", "\n", "all_img_list", "=", "sorted", "(", "glob", ".", "glob", "(", "osp", ".", "join", "(", "img_folder", ",", "'*'", ")", ")", ")", "\n", "keys", "=", "[", "]", "\n", "for", "img_path", "in", "all_img_list", ":", "\n", "        ", "keys", ".", "append", "(", "osp", ".", "splitext", "(", "osp", ".", "basename", "(", "img_path", ")", ")", "[", "0", "]", ")", "\n", "\n", "", "if", "read_all_imgs", ":", "\n", "#### read all images to memory (multiprocessing)", "\n", "        ", "dataset", "=", "{", "}", "# store all image data. list cannot keep the order, use dict", "\n", "print", "(", "'Read images with multiprocessing, #thread: {} ...'", ".", "format", "(", "n_thread", ")", ")", "\n", "pbar", "=", "util", ".", "ProgressBar", "(", "len", "(", "all_img_list", ")", ")", "\n", "\n", "def", "mycallback", "(", "arg", ")", ":", "\n", "            ", "'''get the image data and update pbar'''", "\n", "key", "=", "arg", "[", "0", "]", "\n", "dataset", "[", "key", "]", "=", "arg", "[", "1", "]", "\n", "pbar", ".", "update", "(", "'Reading {}'", ".", "format", "(", "key", ")", ")", "\n", "\n", "", "pool", "=", "Pool", "(", "n_thread", ")", "\n", "for", "path", ",", "key", "in", "zip", "(", "all_img_list", ",", "keys", ")", ":", "\n", "            ", "pool", ".", "apply_async", "(", "read_image_worker", ",", "args", "=", "(", "path", ",", "key", ")", ",", "callback", "=", "mycallback", ")", "\n", "", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "print", "(", "'Finish reading {} images.\\nWrite lmdb...'", ".", "format", "(", "len", "(", "all_img_list", ")", ")", ")", "\n", "\n", "#### create lmdb environment", "\n", "", "data_size_per_img", "=", "cv2", ".", "imread", "(", "all_img_list", "[", "0", "]", ",", "cv2", ".", "IMREAD_UNCHANGED", ")", ".", "nbytes", "\n", "print", "(", "'data size per image is: '", ",", "data_size_per_img", ")", "\n", "data_size", "=", "data_size_per_img", "*", "len", "(", "all_img_list", ")", "\n", "env", "=", "lmdb", ".", "open", "(", "lmdb_save_path", ",", "map_size", "=", "data_size", "*", "10", ")", "\n", "\n", "#### write data to lmdb", "\n", "pbar", "=", "util", ".", "ProgressBar", "(", "len", "(", "all_img_list", ")", ")", "\n", "txn", "=", "env", ".", "begin", "(", "write", "=", "True", ")", "\n", "resolutions", "=", "[", "]", "\n", "for", "idx", ",", "(", "path", ",", "key", ")", "in", "enumerate", "(", "zip", "(", "all_img_list", ",", "keys", ")", ")", ":", "\n", "        ", "pbar", ".", "update", "(", "'Write {}'", ".", "format", "(", "key", ")", ")", "\n", "key_byte", "=", "key", ".", "encode", "(", "'ascii'", ")", "\n", "data", "=", "dataset", "[", "key", "]", "if", "read_all_imgs", "else", "cv2", ".", "imread", "(", "path", ",", "cv2", ".", "IMREAD_UNCHANGED", ")", "\n", "if", "data", ".", "ndim", "==", "2", ":", "\n", "            ", "H", ",", "W", "=", "data", ".", "shape", "\n", "C", "=", "1", "\n", "", "else", ":", "\n", "            ", "H", ",", "W", ",", "C", "=", "data", ".", "shape", "\n", "", "txn", ".", "put", "(", "key_byte", ",", "data", ")", "\n", "resolutions", ".", "append", "(", "'{:d}_{:d}_{:d}'", ".", "format", "(", "C", ",", "H", ",", "W", ")", ")", "\n", "if", "not", "read_all_imgs", "and", "idx", "%", "BATCH", "==", "0", ":", "\n", "            ", "txn", ".", "commit", "(", ")", "\n", "txn", "=", "env", ".", "begin", "(", "write", "=", "True", ")", "\n", "", "", "txn", ".", "commit", "(", ")", "\n", "env", ".", "close", "(", ")", "\n", "print", "(", "'Finish writing lmdb.'", ")", "\n", "\n", "#### create meta information", "\n", "# check whether all the images are the same size", "\n", "assert", "len", "(", "keys", ")", "==", "len", "(", "resolutions", ")", "\n", "if", "len", "(", "set", "(", "resolutions", ")", ")", "<=", "1", ":", "\n", "        ", "meta_info", "[", "'resolution'", "]", "=", "[", "resolutions", "[", "0", "]", "]", "\n", "meta_info", "[", "'keys'", "]", "=", "keys", "\n", "print", "(", "'All images have the same resolution. Simplify the meta info.'", ")", "\n", "", "else", ":", "\n", "        ", "meta_info", "[", "'resolution'", "]", "=", "resolutions", "\n", "meta_info", "[", "'keys'", "]", "=", "keys", "\n", "print", "(", "'Not all images have the same resolution. Save meta info for each image.'", ")", "\n", "\n", "", "pickle", ".", "dump", "(", "meta_info", ",", "open", "(", "osp", ".", "join", "(", "lmdb_save_path", ",", "'meta_info.pkl'", ")", ",", "\"wb\"", ")", ")", "\n", "print", "(", "'Finish creating lmdb meta info.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data_scripts.create_lmdb.vimeo90k": [[145, 276], ["os.exists", "print", "sorted", "sorted", "print", "lmdb.open", "lmdb.open.begin", "utils.ProgressBar", "enumerate", "env.begin.commit", "lmdb.open.close", "print", "set", "list", "pickle.dump", "print", "lmdb_save_path.endswith", "ValueError", "print", "sys.exit", "open", "f.readlines", "sorted.extend", "print", "print", "utils.ProgressBar", "multiprocessing.Pool", "zip", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "print", "cv2.imread", "len", "len", "zip", "util.ProgressBar.update", "key.encode", "env.begin.put", "set.add", "open", "v.strip", "line.split", "line.split", "glob.glob", "range", "range", "len", "util.ProgressBar.update", "multiprocessing.Pool.apply_async", "cv2.imread", "env.begin.commit", "lmdb.open.begin", "key.split", "key.split", "os.join", "ValueError", "os.join", "sorted.append", "sorted.append", "sorted.append", "v.endswith", "v.endswith", "len"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.ProgressBar.update", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.ProgressBar.update"], ["", "def", "vimeo90k", "(", "mode", ")", ":", "\n", "    ", "\"\"\"Create lmdb for the Vimeo90K dataset, each image with a fixed size\n    GT: [3, 256, 448]\n        Now only need the 4th frame, e.g., 00001_0001_4\n    LR: [3, 64, 112]\n        1st - 7th frames, e.g., 00001_0001_1, ..., 00001_0001_7\n    key:\n        Use the folder and subfolder names, w/o the frame index, e.g., 00001_0001\n\n    flow: downsampled flow: [3, 360, 320], keys: 00001_0001_4_[p3, p2, p1, n1, n2, n3]\n        Each flow is calculated with GT images by PWCNet and then downsampled by 1/4\n        Flow map is quantized by mmcv and saved in png format\n    \"\"\"", "\n", "#### configurations", "\n", "read_all_imgs", "=", "False", "# whether real all images to memory with multiprocessing", "\n", "# Set False for use limited memory", "\n", "BATCH", "=", "5000", "# After BATCH images, lmdb commits, if read_all_imgs = False", "\n", "if", "mode", "==", "'GT'", ":", "\n", "        ", "img_folder", "=", "'../../datasets/vimeo90k/vimeo_septuplet/sequences'", "\n", "lmdb_save_path", "=", "'../../datasets/vimeo90k/vimeo90k_train_GT.lmdb'", "\n", "txt_file", "=", "'../../datasets/vimeo90k/vimeo_septuplet/sep_trainlist.txt'", "\n", "H_dst", ",", "W_dst", "=", "256", ",", "448", "\n", "", "elif", "mode", "==", "'LR'", ":", "\n", "        ", "img_folder", "=", "'../../datasets/vimeo90k/vimeo_septuplet_matlabLRx4/sequences'", "\n", "lmdb_save_path", "=", "'../../datasets/vimeo90k/vimeo90k_train_LR7frames.lmdb'", "\n", "txt_file", "=", "'../../datasets/vimeo90k/vimeo_septuplet/sep_trainlist.txt'", "\n", "H_dst", ",", "W_dst", "=", "64", ",", "112", "\n", "", "elif", "mode", "==", "'flow'", ":", "\n", "        ", "img_folder", "=", "'../../datasets/vimeo90k/vimeo_septuplet/sequences_flowx4'", "\n", "lmdb_save_path", "=", "'../../datasets/vimeo90k/vimeo90k_train_flowx4.lmdb'", "\n", "txt_file", "=", "'../../datasets/vimeo90k/vimeo_septuplet/sep_trainlist.txt'", "\n", "H_dst", ",", "W_dst", "=", "128", ",", "112", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Wrong dataset mode: {}'", ".", "format", "(", "mode", ")", ")", "\n", "", "n_thread", "=", "40", "\n", "########################################################", "\n", "if", "not", "lmdb_save_path", ".", "endswith", "(", "'.lmdb'", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"lmdb_save_path must end with \\'lmdb\\'.\"", ")", "\n", "", "if", "osp", ".", "exists", "(", "lmdb_save_path", ")", ":", "\n", "        ", "print", "(", "'Folder [{:s}] already exists. Exit...'", ".", "format", "(", "lmdb_save_path", ")", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "#### read all the image paths to a list", "\n", "", "print", "(", "'Reading image path list ...'", ")", "\n", "with", "open", "(", "txt_file", ")", "as", "f", ":", "\n", "        ", "train_l", "=", "f", ".", "readlines", "(", ")", "\n", "train_l", "=", "[", "v", ".", "strip", "(", ")", "for", "v", "in", "train_l", "]", "\n", "", "all_img_list", "=", "[", "]", "\n", "keys", "=", "[", "]", "\n", "for", "line", "in", "train_l", ":", "\n", "        ", "folder", "=", "line", ".", "split", "(", "'/'", ")", "[", "0", "]", "\n", "sub_folder", "=", "line", ".", "split", "(", "'/'", ")", "[", "1", "]", "\n", "all_img_list", ".", "extend", "(", "glob", ".", "glob", "(", "osp", ".", "join", "(", "img_folder", ",", "folder", ",", "sub_folder", ",", "'*'", ")", ")", ")", "\n", "if", "mode", "==", "'flow'", ":", "\n", "            ", "for", "j", "in", "range", "(", "1", ",", "4", ")", ":", "\n", "                ", "keys", ".", "append", "(", "'{}_{}_4_n{}'", ".", "format", "(", "folder", ",", "sub_folder", ",", "j", ")", ")", "\n", "keys", ".", "append", "(", "'{}_{}_4_p{}'", ".", "format", "(", "folder", ",", "sub_folder", ",", "j", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "j", "in", "range", "(", "7", ")", ":", "\n", "                ", "keys", ".", "append", "(", "'{}_{}_{}'", ".", "format", "(", "folder", ",", "sub_folder", ",", "j", "+", "1", ")", ")", "\n", "", "", "", "all_img_list", "=", "sorted", "(", "all_img_list", ")", "\n", "keys", "=", "sorted", "(", "keys", ")", "\n", "if", "mode", "==", "'GT'", ":", "# only read the 4th frame for the GT mode", "\n", "        ", "print", "(", "'Only keep the 4th frame.'", ")", "\n", "all_img_list", "=", "[", "v", "for", "v", "in", "all_img_list", "if", "v", ".", "endswith", "(", "'im4.png'", ")", "]", "\n", "keys", "=", "[", "v", "for", "v", "in", "keys", "if", "v", ".", "endswith", "(", "'_4'", ")", "]", "\n", "\n", "", "if", "read_all_imgs", ":", "\n", "#### read all images to memory (multiprocessing)", "\n", "        ", "dataset", "=", "{", "}", "# store all image data. list cannot keep the order, use dict", "\n", "print", "(", "'Read images with multiprocessing, #thread: {} ...'", ".", "format", "(", "n_thread", ")", ")", "\n", "pbar", "=", "util", ".", "ProgressBar", "(", "len", "(", "all_img_list", ")", ")", "\n", "\n", "def", "mycallback", "(", "arg", ")", ":", "\n", "            ", "\"\"\"get the image data and update pbar\"\"\"", "\n", "key", "=", "arg", "[", "0", "]", "\n", "dataset", "[", "key", "]", "=", "arg", "[", "1", "]", "\n", "pbar", ".", "update", "(", "'Reading {}'", ".", "format", "(", "key", ")", ")", "\n", "\n", "", "pool", "=", "Pool", "(", "n_thread", ")", "\n", "for", "path", ",", "key", "in", "zip", "(", "all_img_list", ",", "keys", ")", ":", "\n", "            ", "pool", ".", "apply_async", "(", "read_image_worker", ",", "args", "=", "(", "path", ",", "key", ")", ",", "callback", "=", "mycallback", ")", "\n", "", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "print", "(", "'Finish reading {} images.\\nWrite lmdb...'", ".", "format", "(", "len", "(", "all_img_list", ")", ")", ")", "\n", "\n", "#### write data to lmdb", "\n", "", "data_size_per_img", "=", "cv2", ".", "imread", "(", "all_img_list", "[", "0", "]", ",", "cv2", ".", "IMREAD_UNCHANGED", ")", ".", "nbytes", "\n", "print", "(", "'data size per image is: '", ",", "data_size_per_img", ")", "\n", "data_size", "=", "data_size_per_img", "*", "len", "(", "all_img_list", ")", "\n", "env", "=", "lmdb", ".", "open", "(", "lmdb_save_path", ",", "map_size", "=", "data_size", "*", "10", ")", "\n", "txn", "=", "env", ".", "begin", "(", "write", "=", "True", ")", "\n", "pbar", "=", "util", ".", "ProgressBar", "(", "len", "(", "all_img_list", ")", ")", "\n", "for", "idx", ",", "(", "path", ",", "key", ")", "in", "enumerate", "(", "zip", "(", "all_img_list", ",", "keys", ")", ")", ":", "\n", "        ", "pbar", ".", "update", "(", "'Write {}'", ".", "format", "(", "key", ")", ")", "\n", "key_byte", "=", "key", ".", "encode", "(", "'ascii'", ")", "\n", "data", "=", "dataset", "[", "key", "]", "if", "read_all_imgs", "else", "cv2", ".", "imread", "(", "path", ",", "cv2", ".", "IMREAD_UNCHANGED", ")", "\n", "if", "'flow'", "in", "mode", ":", "\n", "            ", "H", ",", "W", "=", "data", ".", "shape", "\n", "assert", "H", "==", "H_dst", "and", "W", "==", "W_dst", ",", "'different shape.'", "\n", "", "else", ":", "\n", "            ", "H", ",", "W", ",", "C", "=", "data", ".", "shape", "\n", "assert", "H", "==", "H_dst", "and", "W", "==", "W_dst", "and", "C", "==", "3", ",", "'different shape.'", "\n", "", "txn", ".", "put", "(", "key_byte", ",", "data", ")", "\n", "if", "not", "read_all_imgs", "and", "idx", "%", "BATCH", "==", "0", ":", "\n", "            ", "txn", ".", "commit", "(", ")", "\n", "txn", "=", "env", ".", "begin", "(", "write", "=", "True", ")", "\n", "", "", "txn", ".", "commit", "(", ")", "\n", "env", ".", "close", "(", ")", "\n", "print", "(", "'Finish writing lmdb.'", ")", "\n", "\n", "#### create meta information", "\n", "meta_info", "=", "{", "}", "\n", "if", "mode", "==", "'GT'", ":", "\n", "        ", "meta_info", "[", "'name'", "]", "=", "'Vimeo90K_train_GT'", "\n", "", "elif", "mode", "==", "'LR'", ":", "\n", "        ", "meta_info", "[", "'name'", "]", "=", "'Vimeo90K_train_LR'", "\n", "", "elif", "mode", "==", "'flow'", ":", "\n", "        ", "meta_info", "[", "'name'", "]", "=", "'Vimeo90K_train_flowx4'", "\n", "", "channel", "=", "1", "if", "'flow'", "in", "mode", "else", "3", "\n", "meta_info", "[", "'resolution'", "]", "=", "'{}_{}_{}'", ".", "format", "(", "channel", ",", "H_dst", ",", "W_dst", ")", "\n", "key_set", "=", "set", "(", ")", "\n", "for", "key", "in", "keys", ":", "\n", "        ", "if", "mode", "==", "'flow'", ":", "\n", "            ", "a", ",", "b", ",", "_", ",", "_", "=", "key", ".", "split", "(", "'_'", ")", "\n", "", "else", ":", "\n", "            ", "a", ",", "b", ",", "_", "=", "key", ".", "split", "(", "'_'", ")", "\n", "", "key_set", ".", "add", "(", "'{}_{}'", ".", "format", "(", "a", ",", "b", ")", ")", "\n", "", "meta_info", "[", "'keys'", "]", "=", "list", "(", "key_set", ")", "\n", "pickle", ".", "dump", "(", "meta_info", ",", "open", "(", "osp", ".", "join", "(", "lmdb_save_path", ",", "'meta_info.pkl'", ")", ",", "\"wb\"", ")", ")", "\n", "print", "(", "'Finish creating lmdb meta info.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data_scripts.create_lmdb.REDS": [[278, 388], ["os.exists", "print", "data._get_paths_from_images", "print", "lmdb.open", "utils.ProgressBar", "lmdb.open.begin", "enumerate", "env.begin.commit", "lmdb.open.close", "print", "pickle.dump", "print", "lmdb_save_path.endswith", "ValueError", "print", "sys.exit", "img_path.split", "keys.append", "print", "utils.ProgressBar", "multiprocessing.Pool", "zip", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "print", "cv2.imread", "len", "len", "zip", "util.ProgressBar.update", "key.encode", "env.begin.put", "open", "split_rlt[].split", "len", "util.ProgressBar.update", "multiprocessing.Pool.apply_async", "cv2.imread", "env.begin.commit", "lmdb.open.begin", "os.join", "len"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util._get_paths_from_images", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.ProgressBar.update", "home.repos.pwc.inspect_result.esw0116_DynaVSR.utils.util.ProgressBar.update"], ["", "def", "REDS", "(", "mode", ")", ":", "\n", "    ", "\"\"\"Create lmdb for the REDS dataset, each image with a fixed size\n    GT: [3, 720, 1280], key: 000_00000000\n    LR: [3, 180, 320], key: 000_00000000\n    key: 000_00000000\n\n    flow: downsampled flow: [3, 360, 320], keys: 000_00000005_[p2, p1, n1, n2]\n        Each flow is calculated with the GT images by PWCNet and then downsampled by 1/4\n        Flow map is quantized by mmcv and saved in png format\n    \"\"\"", "\n", "#### configurations", "\n", "read_all_imgs", "=", "False", "# whether real all images to memory with multiprocessing", "\n", "# Set False for use limited memory", "\n", "BATCH", "=", "5000", "# After BATCH images, lmdb commits, if read_all_imgs = False", "\n", "if", "mode", "==", "'train_sharp'", ":", "\n", "        ", "img_folder", "=", "'../../datasets/REDS/train_sharp'", "\n", "lmdb_save_path", "=", "'../../datasets/REDS/train_sharp_wval.lmdb'", "\n", "H_dst", ",", "W_dst", "=", "720", ",", "1280", "\n", "", "elif", "mode", "==", "'train_sharp_bicubic'", ":", "\n", "        ", "img_folder", "=", "'../../datasets/REDS/train_sharp_bicubic'", "\n", "lmdb_save_path", "=", "'../../datasets/REDS/train_sharp_bicubic_wval.lmdb'", "\n", "H_dst", ",", "W_dst", "=", "180", ",", "320", "\n", "", "elif", "mode", "==", "'train_blur_bicubic'", ":", "\n", "        ", "img_folder", "=", "'../../datasets/REDS/train_blur_bicubic'", "\n", "lmdb_save_path", "=", "'../../datasets/REDS/train_blur_bicubic_wval.lmdb'", "\n", "H_dst", ",", "W_dst", "=", "180", ",", "320", "\n", "", "elif", "mode", "==", "'train_blur'", ":", "\n", "        ", "img_folder", "=", "'../../datasets/REDS/train_blur'", "\n", "lmdb_save_path", "=", "'../../datasets/REDS/train_blur_wval.lmdb'", "\n", "H_dst", ",", "W_dst", "=", "720", ",", "1280", "\n", "", "elif", "mode", "==", "'train_blur_comp'", ":", "\n", "        ", "img_folder", "=", "'../../datasets/REDS/train_blur_comp'", "\n", "lmdb_save_path", "=", "'../../datasets/REDS/train_blur_comp_wval.lmdb'", "\n", "H_dst", ",", "W_dst", "=", "720", ",", "1280", "\n", "", "elif", "mode", "==", "'train_sharp_flowx4'", ":", "\n", "        ", "img_folder", "=", "'../../datasets/REDS/train_sharp_flowx4'", "\n", "lmdb_save_path", "=", "'../../datasets/REDS/train_sharp_flowx4.lmdb'", "\n", "H_dst", ",", "W_dst", "=", "360", ",", "320", "\n", "", "n_thread", "=", "40", "\n", "########################################################", "\n", "if", "not", "lmdb_save_path", ".", "endswith", "(", "'.lmdb'", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"lmdb_save_path must end with \\'lmdb\\'.\"", ")", "\n", "", "if", "osp", ".", "exists", "(", "lmdb_save_path", ")", ":", "\n", "        ", "print", "(", "'Folder [{:s}] already exists. Exit...'", ".", "format", "(", "lmdb_save_path", ")", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "#### read all the image paths to a list", "\n", "", "print", "(", "'Reading image path list ...'", ")", "\n", "all_img_list", "=", "data_util", ".", "_get_paths_from_images", "(", "img_folder", ")", "\n", "keys", "=", "[", "]", "\n", "for", "img_path", "in", "all_img_list", ":", "\n", "        ", "split_rlt", "=", "img_path", ".", "split", "(", "'/'", ")", "\n", "folder", "=", "split_rlt", "[", "-", "2", "]", "\n", "img_name", "=", "split_rlt", "[", "-", "1", "]", ".", "split", "(", "'.png'", ")", "[", "0", "]", "\n", "keys", ".", "append", "(", "folder", "+", "'_'", "+", "img_name", ")", "\n", "\n", "", "if", "read_all_imgs", ":", "\n", "#### read all images to memory (multiprocessing)", "\n", "        ", "dataset", "=", "{", "}", "# store all image data. list cannot keep the order, use dict", "\n", "print", "(", "'Read images with multiprocessing, #thread: {} ...'", ".", "format", "(", "n_thread", ")", ")", "\n", "pbar", "=", "util", ".", "ProgressBar", "(", "len", "(", "all_img_list", ")", ")", "\n", "\n", "def", "mycallback", "(", "arg", ")", ":", "\n", "            ", "'''get the image data and update pbar'''", "\n", "key", "=", "arg", "[", "0", "]", "\n", "dataset", "[", "key", "]", "=", "arg", "[", "1", "]", "\n", "pbar", ".", "update", "(", "'Reading {}'", ".", "format", "(", "key", ")", ")", "\n", "\n", "", "pool", "=", "Pool", "(", "n_thread", ")", "\n", "for", "path", ",", "key", "in", "zip", "(", "all_img_list", ",", "keys", ")", ":", "\n", "            ", "pool", ".", "apply_async", "(", "read_image_worker", ",", "args", "=", "(", "path", ",", "key", ")", ",", "callback", "=", "mycallback", ")", "\n", "", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "print", "(", "'Finish reading {} images.\\nWrite lmdb...'", ".", "format", "(", "len", "(", "all_img_list", ")", ")", ")", "\n", "\n", "#### create lmdb environment", "\n", "", "data_size_per_img", "=", "cv2", ".", "imread", "(", "all_img_list", "[", "0", "]", ",", "cv2", ".", "IMREAD_UNCHANGED", ")", ".", "nbytes", "\n", "print", "(", "'data size per image is: '", ",", "data_size_per_img", ")", "\n", "data_size", "=", "data_size_per_img", "*", "len", "(", "all_img_list", ")", "\n", "env", "=", "lmdb", ".", "open", "(", "lmdb_save_path", ",", "map_size", "=", "data_size", "*", "10", ")", "\n", "\n", "#### write data to lmdb", "\n", "pbar", "=", "util", ".", "ProgressBar", "(", "len", "(", "all_img_list", ")", ")", "\n", "txn", "=", "env", ".", "begin", "(", "write", "=", "True", ")", "\n", "for", "idx", ",", "(", "path", ",", "key", ")", "in", "enumerate", "(", "zip", "(", "all_img_list", ",", "keys", ")", ")", ":", "\n", "        ", "pbar", ".", "update", "(", "'Write {}'", ".", "format", "(", "key", ")", ")", "\n", "key_byte", "=", "key", ".", "encode", "(", "'ascii'", ")", "\n", "data", "=", "dataset", "[", "key", "]", "if", "read_all_imgs", "else", "cv2", ".", "imread", "(", "path", ",", "cv2", ".", "IMREAD_UNCHANGED", ")", "\n", "if", "'flow'", "in", "mode", ":", "\n", "            ", "H", ",", "W", "=", "data", ".", "shape", "\n", "assert", "H", "==", "H_dst", "and", "W", "==", "W_dst", ",", "'different shape.'", "\n", "", "else", ":", "\n", "            ", "H", ",", "W", ",", "C", "=", "data", ".", "shape", "\n", "assert", "H", "==", "H_dst", "and", "W", "==", "W_dst", "and", "C", "==", "3", ",", "'different shape.'", "\n", "", "txn", ".", "put", "(", "key_byte", ",", "data", ")", "\n", "if", "not", "read_all_imgs", "and", "idx", "%", "BATCH", "==", "0", ":", "\n", "            ", "txn", ".", "commit", "(", ")", "\n", "txn", "=", "env", ".", "begin", "(", "write", "=", "True", ")", "\n", "", "", "txn", ".", "commit", "(", ")", "\n", "env", ".", "close", "(", ")", "\n", "print", "(", "'Finish writing lmdb.'", ")", "\n", "\n", "#### create meta information", "\n", "meta_info", "=", "{", "}", "\n", "meta_info", "[", "'name'", "]", "=", "'REDS_{}_wval'", ".", "format", "(", "mode", ")", "\n", "channel", "=", "1", "if", "'flow'", "in", "mode", "else", "3", "\n", "meta_info", "[", "'resolution'", "]", "=", "'{}_{}_{}'", ".", "format", "(", "channel", ",", "H_dst", ",", "W_dst", ")", "\n", "meta_info", "[", "'keys'", "]", "=", "keys", "\n", "pickle", ".", "dump", "(", "meta_info", ",", "open", "(", "osp", ".", "join", "(", "lmdb_save_path", ",", "'meta_info.pkl'", ")", ",", "\"wb\"", ")", ")", "\n", "print", "(", "'Finish creating lmdb meta info.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data_scripts.create_lmdb.test_lmdb": [[390, 408], ["lmdb.open", "pickle.load", "print", "print", "print", "print", "numpy.frombuffer", "np.frombuffer.reshape", "cv2.imwrite", "open", "len", "lmdb.open.begin", "txn.get", "int", "os.join", "key.encode", "meta_info[].split"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.load"], ["", "def", "test_lmdb", "(", "dataroot", ",", "dataset", "=", "'REDS'", ")", ":", "\n", "    ", "env", "=", "lmdb", ".", "open", "(", "dataroot", ",", "readonly", "=", "True", ",", "lock", "=", "False", ",", "readahead", "=", "False", ",", "meminit", "=", "False", ")", "\n", "meta_info", "=", "pickle", ".", "load", "(", "open", "(", "osp", ".", "join", "(", "dataroot", ",", "'meta_info.pkl'", ")", ",", "\"rb\"", ")", ")", "\n", "print", "(", "'Name: '", ",", "meta_info", "[", "'name'", "]", ")", "\n", "print", "(", "'Resolution: '", ",", "meta_info", "[", "'resolution'", "]", ")", "\n", "print", "(", "'# keys: '", ",", "len", "(", "meta_info", "[", "'keys'", "]", ")", ")", "\n", "# read one image", "\n", "if", "dataset", "==", "'vimeo90k'", ":", "\n", "        ", "key", "=", "'00001_0001_4'", "\n", "", "else", ":", "\n", "        ", "key", "=", "'000_00000000'", "\n", "", "print", "(", "'Reading {} for test.'", ".", "format", "(", "key", ")", ")", "\n", "with", "env", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "        ", "buf", "=", "txn", ".", "get", "(", "key", ".", "encode", "(", "'ascii'", ")", ")", "\n", "", "img_flat", "=", "np", ".", "frombuffer", "(", "buf", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "C", ",", "H", ",", "W", "=", "[", "int", "(", "s", ")", "for", "s", "in", "meta_info", "[", "'resolution'", "]", ".", "split", "(", "'_'", ")", "]", "\n", "img", "=", "img_flat", ".", "reshape", "(", "H", ",", "W", ",", "C", ")", "\n", "cv2", ".", "imwrite", "(", "'test.png'", ",", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.Video_base_model.VideoBaseModel.__init__": [[17, 155], ["base_model.BaseModel.__init__", "models.define_G().to", "models.define_G().to", "Video_base_model.VideoBaseModel.load", "collections.OrderedDict", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DataParallel", "torch.nn.parallel.DataParallel", "torch.L1Loss().to", "torch.L1Loss().to", "Video_base_model.VideoBaseModel.netG.train", "Video_base_model.VideoBaseModel.optimizers.append", "models.define_G", "models.define_G", "torch.MSELoss().to", "torch.MSELoss().to", "Video_base_model.VideoBaseModel.netG.named_parameters", "Video_base_model.VideoBaseModel.netG.named_parameters", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.L1Loss", "torch.L1Loss", "models.loss.CharbonnierLoss().to", "models.loss.CharbonnierLoss().to", "Video_base_model.VideoBaseModel.netG.named_parameters", "Video_base_model.VideoBaseModel.netG.named_parameters", "Video_base_model.VideoBaseModel.schedulers.append", "NotImplementedError", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.MSELoss", "torch.MSELoss", "models.loss.HuberLoss().to", "models.loss.HuberLoss().to", "NotImplementedError", "models.MultiStepLR_Restart", "models.MultiStepLR_Restart", "Video_base_model.VideoBaseModel.schedulers.append", "models.loss.CharbonnierLoss", "models.loss.CharbonnierLoss", "tsa_fusion_params.append", "normal_params.append", "logger.warning", "freeze_params.append", "normal_params.append", "optim_params.append", "models.CosineAnnealingLR_Restart", "models.CosineAnnealingLR_Restart", "models.loss.HuberLoss", "models.loss.HuberLoss", "conv_offset_params.append", "normal_params.append", "logger.warning", "logger.warning"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.load", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.networks.define_G", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.networks.define_G"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "VideoBaseModel", ",", "self", ")", ".", "__init__", "(", "opt", ")", "\n", "\n", "if", "opt", "[", "'dist'", "]", ":", "\n", "            ", "self", ".", "rank", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "rank", "=", "-", "1", "# non dist training", "\n", "", "train_opt", "=", "opt", "[", "'train'", "]", "\n", "\n", "# define network and load pretrained models", "\n", "self", ".", "netG", "=", "networks", ".", "define_G", "(", "opt", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "opt", "[", "'dist'", "]", ":", "\n", "            ", "self", ".", "netG", "=", "DistributedDataParallel", "(", "self", ".", "netG", ",", "device_ids", "=", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "netG", "=", "DataParallel", "(", "self", ".", "netG", ")", "\n", "# print network", "\n", "# self.print_network()", "\n", "", "self", ".", "load", "(", ")", "\n", "\n", "self", ".", "log_dict", "=", "OrderedDict", "(", ")", "\n", "\n", "#### loss", "\n", "loss_type", "=", "train_opt", "[", "'pixel_criterion'", "]", "\n", "if", "loss_type", "==", "'l1'", ":", "\n", "            ", "self", ".", "cri_pix", "=", "nn", ".", "L1Loss", "(", "reduction", "=", "'mean'", ")", ".", "to", "(", "self", ".", "device", ")", "# Change from sum to mean", "\n", "", "elif", "loss_type", "==", "'l2'", ":", "\n", "            ", "self", ".", "cri_pix", "=", "nn", ".", "MSELoss", "(", "reduction", "=", "'mean'", ")", ".", "to", "(", "self", ".", "device", ")", "# Change from sum to mean", "\n", "", "elif", "loss_type", "==", "'cb'", ":", "\n", "            ", "self", ".", "cri_pix", "=", "CharbonnierLoss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "elif", "loss_type", "==", "'huber'", ":", "\n", "            ", "self", ".", "cri_pix", "=", "HuberLoss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Loss type [{:s}] is not recognized.'", ".", "format", "(", "loss_type", ")", ")", "\n", "", "self", ".", "l_pix_w", "=", "train_opt", "[", "'pixel_weight'", "]", "\n", "\n", "if", "self", ".", "is_train", ":", "\n", "            ", "self", ".", "netG", ".", "train", "(", ")", "\n", "\n", "#### optimizers", "\n", "wd_G", "=", "train_opt", "[", "'weight_decay_G'", "]", "if", "train_opt", "[", "'weight_decay_G'", "]", "else", "0", "\n", "if", "train_opt", "[", "'ft_tsa_only'", "]", ":", "\n", "                ", "normal_params", "=", "[", "]", "\n", "tsa_fusion_params", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "self", ".", "netG", ".", "named_parameters", "(", ")", ":", "\n", "                    ", "if", "v", ".", "requires_grad", ":", "\n", "                        ", "if", "'tsa_fusion'", "in", "k", ":", "\n", "                            ", "tsa_fusion_params", ".", "append", "(", "v", ")", "\n", "", "else", ":", "\n", "                            ", "normal_params", ".", "append", "(", "v", ")", "\n", "", "", "else", ":", "\n", "                        ", "if", "self", ".", "rank", "<=", "0", ":", "\n", "                            ", "logger", ".", "warning", "(", "'Params [{:s}] will not optimize.'", ".", "format", "(", "k", ")", ")", "\n", "", "", "", "optim_params", "=", "[", "\n", "{", "# add normal params first", "\n", "'params'", ":", "normal_params", ",", "\n", "'lr'", ":", "train_opt", "[", "'lr_G'", "]", "\n", "}", ",", "\n", "{", "\n", "'params'", ":", "tsa_fusion_params", ",", "\n", "'lr'", ":", "train_opt", "[", "'lr_G'", "]", "\n", "}", ",", "\n", "]", "\n", "", "if", "opt", "[", "'train'", "]", "[", "'freeze_front'", "]", ":", "\n", "                ", "normal_params", "=", "[", "]", "\n", "freeze_params", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "self", ".", "netG", ".", "named_parameters", "(", ")", ":", "\n", "                    ", "if", "v", ".", "requires_grad", ":", "\n", "                        ", "if", "'module.conv3d_1'", "in", "k", "or", "'module.dense_block_1'", "in", "k", "or", "'module.dense_block_2'", "in", "k", "or", "'module.dense_block_3'", "in", "k", ":", "\n", "                            ", "freeze_params", ".", "append", "(", "v", ")", "\n", "", "else", ":", "\n", "                            ", "normal_params", ".", "append", "(", "v", ")", "\n", "", "", "", "optim_params", "=", "[", "\n", "{", "# add normal params first", "\n", "'params'", ":", "normal_params", ",", "\n", "'lr'", ":", "train_opt", "[", "'lr_G'", "]", "\n", "}", ",", "\n", "{", "\n", "'params'", ":", "freeze_params", ",", "\n", "'lr'", ":", "0", "\n", "}", ",", "\n", "]", "\n", "", "elif", "train_opt", "[", "'small_offset_lr'", "]", ":", "\n", "                ", "normal_params", "=", "[", "]", "\n", "conv_offset_params", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "self", ".", "netG", ".", "named_parameters", "(", ")", ":", "\n", "                    ", "if", "v", ".", "requires_grad", ":", "\n", "                        ", "if", "'pcd_align'", "in", "k", "or", "'fea_L'", "in", "k", "or", "'feature_extraction'", "in", "k", "or", "'conv_first'", "in", "k", ":", "\n", "                            ", "conv_offset_params", ".", "append", "(", "v", ")", "\n", "", "else", ":", "\n", "                            ", "normal_params", ".", "append", "(", "v", ")", "\n", "", "", "else", ":", "\n", "                        ", "if", "self", ".", "rank", "<=", "0", ":", "\n", "                            ", "logger", ".", "warning", "(", "'Params [{:s}] will not optimize.'", ".", "format", "(", "k", ")", ")", "\n", "", "", "", "optim_params", "=", "[", "\n", "{", "# add normal params first", "\n", "'params'", ":", "normal_params", ",", "\n", "'lr'", ":", "train_opt", "[", "'lr_G'", "]", "\n", "}", ",", "\n", "{", "\n", "'params'", ":", "conv_offset_params", ",", "\n", "'lr'", ":", "train_opt", "[", "'lr_G'", "]", "*", "0.1", "\n", "}", ",", "\n", "]", "\n", "", "else", ":", "\n", "                ", "optim_params", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "self", ".", "netG", ".", "named_parameters", "(", ")", ":", "\n", "                    ", "if", "v", ".", "requires_grad", ":", "\n", "                        ", "optim_params", ".", "append", "(", "v", ")", "\n", "", "else", ":", "\n", "                        ", "if", "self", ".", "rank", "<=", "0", ":", "\n", "                            ", "logger", ".", "warning", "(", "'Params [{:s}] will not optimize.'", ".", "format", "(", "k", ")", ")", "\n", "\n", "", "", "", "", "if", "train_opt", "[", "'optim'", "]", "==", "'SGD'", ":", "\n", "                ", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "SGD", "(", "optim_params", ",", "lr", "=", "train_opt", "[", "'lr_G'", "]", ",", "weight_decay", "=", "wd_G", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "optim_params", ",", "lr", "=", "train_opt", "[", "'lr_G'", "]", ",", "\n", "weight_decay", "=", "wd_G", ",", "\n", "betas", "=", "(", "train_opt", "[", "'beta1'", "]", ",", "train_opt", "[", "'beta2'", "]", ")", ")", "\n", "\n", "", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_G", ")", "\n", "\n", "#### schedulers", "\n", "if", "train_opt", "[", "'lr_scheme'", "]", "==", "'MultiStepLR'", ":", "\n", "                ", "for", "optimizer", "in", "self", ".", "optimizers", ":", "\n", "                    ", "self", ".", "schedulers", ".", "append", "(", "\n", "lr_scheduler", ".", "MultiStepLR_Restart", "(", "optimizer", ",", "train_opt", "[", "'lr_steps'", "]", ",", "\n", "restarts", "=", "train_opt", "[", "'restarts'", "]", ",", "\n", "weights", "=", "train_opt", "[", "'restart_weights'", "]", ",", "\n", "gamma", "=", "train_opt", "[", "'lr_gamma'", "]", ",", "\n", "clear_state", "=", "train_opt", "[", "'clear_state'", "]", ")", ")", "\n", "", "", "elif", "train_opt", "[", "'lr_scheme'", "]", "==", "'CosineAnnealingLR_Restart'", ":", "\n", "                ", "for", "optimizer", "in", "self", ".", "optimizers", ":", "\n", "                    ", "self", ".", "schedulers", ".", "append", "(", "\n", "lr_scheduler", ".", "CosineAnnealingLR_Restart", "(", "\n", "optimizer", ",", "train_opt", "[", "'T_period'", "]", ",", "eta_min", "=", "train_opt", "[", "'eta_min'", "]", ",", "\n", "restarts", "=", "train_opt", "[", "'restarts'", "]", ",", "weights", "=", "train_opt", "[", "'restart_weights'", "]", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.Video_base_model.VideoBaseModel.feed_data": [[157, 161], ["data[].to", "data[].to"], "methods", ["None"], ["", "", "", "def", "feed_data", "(", "self", ",", "data", ",", "need_GT", "=", "True", ")", ":", "\n", "        ", "self", ".", "var_L", "=", "data", "[", "'LQs'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "need_GT", ":", "\n", "            ", "self", ".", "real_H", "=", "data", "[", "'GT'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.Video_base_model.VideoBaseModel.set_params_lr_zero": [[162, 165], ["None"], "methods", ["None"], ["", "", "def", "set_params_lr_zero", "(", "self", ")", ":", "\n", "# fix normal module", "\n", "        ", "self", ".", "optimizers", "[", "0", "]", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.Video_base_model.VideoBaseModel.optimize_parameters": [[166, 179], ["Video_base_model.VideoBaseModel.optimizer_G.zero_grad", "Video_base_model.VideoBaseModel.netG", "l_pix.backward", "Video_base_model.VideoBaseModel.optimizer_G.step", "l_pix.item", "Video_base_model.VideoBaseModel.set_params_lr_zero", "Video_base_model.VideoBaseModel.cri_pix"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.dcn.deform_conv.ModulatedDeformConvFunction.backward", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.Video_base_model.VideoBaseModel.set_params_lr_zero"], ["", "def", "optimize_parameters", "(", "self", ",", "step", ")", ":", "\n", "        ", "if", "self", ".", "opt", "[", "'train'", "]", "[", "'ft_tsa_only'", "]", "and", "step", "<", "self", ".", "opt", "[", "'train'", "]", "[", "'ft_tsa_only'", "]", ":", "\n", "            ", "self", ".", "set_params_lr_zero", "(", ")", "\n", "\n", "", "self", ".", "optimizer_G", ".", "zero_grad", "(", ")", "\n", "self", ".", "fake_H", "=", "self", ".", "netG", "(", "self", ".", "var_L", ")", "\n", "\n", "l_pix", "=", "self", ".", "l_pix_w", "*", "self", ".", "cri_pix", "(", "self", ".", "fake_H", ",", "self", ".", "real_H", ")", "\n", "l_pix", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_G", ".", "step", "(", ")", "\n", "\n", "# set log", "\n", "self", ".", "log_dict", "[", "'l_pix'", "]", "=", "l_pix", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.Video_base_model.VideoBaseModel.optimize_by_loss": [[180, 190], ["Video_base_model.VideoBaseModel.optimizer_G.zero_grad", "loss.backward", "Video_base_model.VideoBaseModel.optimizer_G.step", "loss.item", "Video_base_model.VideoBaseModel.set_params_lr_zero"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.dcn.deform_conv.ModulatedDeformConvFunction.backward", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.Video_base_model.VideoBaseModel.set_params_lr_zero"], ["", "def", "optimize_by_loss", "(", "self", ",", "loss", ")", ":", "\n", "        ", "if", "self", ".", "opt", "[", "'train'", "]", "[", "'ft_tsa_only'", "]", ":", "\n", "            ", "self", ".", "set_params_lr_zero", "(", ")", "\n", "\n", "", "self", ".", "optimizer_G", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_G", ".", "step", "(", ")", "\n", "\n", "# set log", "\n", "self", ".", "log_dict", "[", "'l_pix'", "]", "=", "loss", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.Video_base_model.VideoBaseModel.calculate_loss": [[191, 196], ["Video_base_model.VideoBaseModel.netG", "l_pix.item", "Video_base_model.VideoBaseModel.cri_pix"], "methods", ["None"], ["", "def", "calculate_loss", "(", "self", ")", ":", "\n", "        ", "self", ".", "fake_H", "=", "self", ".", "netG", "(", "self", ".", "var_L", ")", "\n", "l_pix", "=", "self", ".", "l_pix_w", "*", "self", ".", "cri_pix", "(", "self", ".", "fake_H", ",", "self", ".", "real_H", ")", "\n", "self", ".", "log_dict", "[", "'l_pix'", "]", "=", "l_pix", ".", "item", "(", ")", "\n", "return", "l_pix", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.Video_base_model.VideoBaseModel.test": [[197, 202], ["Video_base_model.VideoBaseModel.netG.eval", "Video_base_model.VideoBaseModel.netG.train", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "Video_base_model.VideoBaseModel.netG"], "methods", ["None"], ["", "def", "test", "(", "self", ")", ":", "\n", "        ", "self", ".", "netG", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "fake_H", "=", "self", ".", "netG", "(", "self", ".", "var_L", ")", "\n", "", "self", ".", "netG", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.Video_base_model.VideoBaseModel.get_current_log": [[203, 205], ["None"], "methods", ["None"], ["", "def", "get_current_log", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "log_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.Video_base_model.VideoBaseModel.get_current_visuals": [[206, 213], ["collections.OrderedDict", "[].float().cpu", "[].float().cpu", "[].float().cpu", "[].float", "[].float", "[].float", "Video_base_model.VideoBaseModel.var_L.detach", "Video_base_model.VideoBaseModel.fake_H.detach", "Video_base_model.VideoBaseModel.real_H.detach"], "methods", ["None"], ["", "def", "get_current_visuals", "(", "self", ",", "need_GT", "=", "True", ")", ":", "\n", "        ", "out_dict", "=", "OrderedDict", "(", ")", "\n", "out_dict", "[", "'LQ'", "]", "=", "self", ".", "var_L", ".", "detach", "(", ")", "[", "0", "]", ".", "float", "(", ")", ".", "cpu", "(", ")", "\n", "out_dict", "[", "'rlt'", "]", "=", "self", ".", "fake_H", ".", "detach", "(", ")", "[", "0", "]", ".", "float", "(", ")", ".", "cpu", "(", ")", "\n", "if", "need_GT", ":", "\n", "            ", "out_dict", "[", "'GT'", "]", "=", "self", ".", "real_H", ".", "detach", "(", ")", "[", "0", "]", ".", "float", "(", ")", ".", "cpu", "(", ")", "\n", "", "return", "out_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.Video_base_model.VideoBaseModel.print_network": [[214, 224], ["Video_base_model.VideoBaseModel.get_network_description", "isinstance", "logger.info", "logger.info"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.get_network_description"], ["", "def", "print_network", "(", "self", ")", ":", "\n", "        ", "s", ",", "n", "=", "self", ".", "get_network_description", "(", "self", ".", "netG", ")", "\n", "if", "isinstance", "(", "self", ".", "netG", ",", "nn", ".", "DataParallel", ")", ":", "\n", "            ", "net_struc_str", "=", "'{} - {}'", ".", "format", "(", "self", ".", "netG", ".", "__class__", ".", "__name__", ",", "\n", "self", ".", "netG", ".", "module", ".", "__class__", ".", "__name__", ")", "\n", "", "else", ":", "\n", "            ", "net_struc_str", "=", "'{}'", ".", "format", "(", "self", ".", "netG", ".", "__class__", ".", "__name__", ")", "\n", "", "if", "self", ".", "rank", "<=", "0", ":", "\n", "            ", "logger", ".", "info", "(", "'Network G structure: {}, with parameters: {:,d}'", ".", "format", "(", "net_struc_str", ",", "n", ")", ")", "\n", "logger", ".", "info", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.Video_base_model.VideoBaseModel.load": [[225, 231], ["Video_base_model.VideoBaseModel.load_network", "logger.info"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.load_network"], ["", "", "def", "load", "(", "self", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "load_path_G", "=", "self", ".", "opt", "[", "'path'", "]", "[", "'pretrain_model_G'", "]", "\n", "if", "load_path_G", "is", "not", "None", ":", "\n", "            ", "if", "verbose", ":", "\n", "                ", "logger", ".", "info", "(", "'Loading model for G [{:s}] ...'", ".", "format", "(", "load_path_G", ")", ")", "\n", "", "self", ".", "load_network", "(", "load_path_G", ",", "self", ".", "netG", ",", "self", ".", "opt", "[", "'path'", "]", "[", "'strict_load'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.Video_base_model.VideoBaseModel.load_for_test": [[232, 238], ["os.path.join", "Video_base_model.VideoBaseModel.load_network", "print"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.load_network"], ["", "", "def", "load_for_test", "(", "self", ")", ":", "\n", "        ", "load_path_G", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", "[", "'path'", "]", "[", "'models'", "]", ",", "'latest_G.pth'", ")", "\n", "if", "load_path_G", "is", "not", "None", ":", "\n", "            ", "self", ".", "load_network", "(", "load_path_G", ",", "self", ".", "netG", ",", "self", ".", "opt", "[", "'path'", "]", "[", "'strict_load'", "]", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'No models are saved!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.Video_base_model.VideoBaseModel.save": [[239, 241], ["Video_base_model.VideoBaseModel.save_network"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.save_network"], ["", "", "def", "save", "(", "self", ",", "iter_label", ")", ":", "\n", "        ", "self", ".", "save_network", "(", "self", ".", "netG", ",", "'G'", ",", "iter_label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.Video_base_model.VideoBaseModel.save_for_test": [[242, 252], ["os.path.join", "Video_base_model.VideoBaseModel.items", "torch.save", "torch.save", "torch.save", "torch.save", "isinstance", "isinstance", "network.state_dict", "Video_base_model.VideoBaseModel.netG.state_dict", "param.cpu"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.save"], ["", "def", "save_for_test", "(", "self", ")", ":", "\n", "        ", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", "[", "'path'", "]", "[", "'models'", "]", ",", "'latest_G.pth'", ")", "\n", "if", "isinstance", "(", "self", ".", "netG", ",", "nn", ".", "DataParallel", ")", "or", "isinstance", "(", "self", ".", "netG", ",", "DistributedDataParallel", ")", ":", "\n", "            ", "network", "=", "self", ".", "netG", ".", "module", "\n", "state_dict", "=", "network", ".", "state_dict", "(", ")", "\n", "", "else", ":", "\n", "            ", "state_dict", "=", "self", ".", "netG", ".", "state_dict", "(", ")", "\n", "", "for", "key", ",", "param", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "state_dict", "[", "key", "]", "=", "param", ".", "cpu", "(", ")", "\n", "", "torch", ".", "save", "(", "state_dict", ",", "save_path", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.networks.define_G": [[8, 46], ["SRResNet_arch.MSRResNet", "RRDBNet_arch.RRDBNet", "EDVR_arch.EDVR", "DUF_arch.DUF_16L", "TOF_arch.TOFlow", "NotImplementedError", "DUF_arch.DUF_28L", "DUF_arch.DUF_52L"], "function", ["None"], ["def", "define_G", "(", "opt", ")", ":", "\n", "    ", "opt_net", "=", "opt", "[", "'network_G'", "]", "\n", "which_model", "=", "opt_net", "[", "'which_model_G'", "]", "\n", "\n", "# image restoration", "\n", "if", "which_model", "==", "'MSRResNet'", ":", "\n", "        ", "import", "models", ".", "archs", ".", "SRResNet_arch", "as", "SRResNet_arch", "\n", "netG", "=", "SRResNet_arch", ".", "MSRResNet", "(", "in_nc", "=", "opt_net", "[", "'in_nc'", "]", ",", "out_nc", "=", "opt_net", "[", "'out_nc'", "]", ",", "\n", "nf", "=", "opt_net", "[", "'nf'", "]", ",", "nb", "=", "opt_net", "[", "'nb'", "]", ",", "upscale", "=", "opt_net", "[", "'scale'", "]", ")", "\n", "", "elif", "which_model", "==", "'RRDBNet'", ":", "\n", "        ", "import", "models", ".", "archs", ".", "RRDBNet_arch", "as", "RRDBNet_arch", "\n", "netG", "=", "RRDBNet_arch", ".", "RRDBNet", "(", "in_nc", "=", "opt_net", "[", "'in_nc'", "]", ",", "out_nc", "=", "opt_net", "[", "'out_nc'", "]", ",", "\n", "nf", "=", "opt_net", "[", "'nf'", "]", ",", "nb", "=", "opt_net", "[", "'nb'", "]", ")", "\n", "# video restoration", "\n", "", "elif", "which_model", "==", "'EDVR'", ":", "\n", "        ", "import", "models", ".", "archs", ".", "EDVR_arch", "as", "EDVR_arch", "\n", "netG", "=", "EDVR_arch", ".", "EDVR", "(", "nf", "=", "opt_net", "[", "'nf'", "]", ",", "nframes", "=", "opt_net", "[", "'nframes'", "]", ",", "\n", "groups", "=", "opt_net", "[", "'groups'", "]", ",", "front_RBs", "=", "opt_net", "[", "'front_RBs'", "]", ",", "\n", "back_RBs", "=", "opt_net", "[", "'back_RBs'", "]", ",", "center", "=", "opt_net", "[", "'center'", "]", ",", "\n", "predeblur", "=", "opt_net", "[", "'predeblur'", "]", ",", "HR_in", "=", "opt_net", "[", "'HR_in'", "]", ",", "\n", "w_TSA", "=", "opt_net", "[", "'w_TSA'", "]", ",", "scale", "=", "opt", "[", "'scale'", "]", ")", "\n", "", "elif", "which_model", "==", "'DUF'", ":", "\n", "        ", "import", "models", ".", "archs", ".", "DUF_arch", "as", "DUF_arch", "\n", "if", "opt_net", "[", "'layers'", "]", "==", "16", ":", "\n", "            ", "netG", "=", "DUF_arch", ".", "DUF_16L", "(", "scale", "=", "opt", "[", "'scale'", "]", ",", "adapt_official", "=", "True", ")", "\n", "", "elif", "opt_net", "[", "'layers'", "]", "==", "28", ":", "\n", "            ", "netG", "=", "DUF_arch", ".", "DUF_28L", "(", "scale", "=", "opt", "[", "'scale'", "]", ",", "adapt_official", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "netG", "=", "DUF_arch", ".", "DUF_52L", "(", "scale", "=", "opt", "[", "'scale'", "]", ",", "adapt_official", "=", "True", ")", "\n", "\n", "", "", "elif", "which_model", "==", "'TOF'", ":", "\n", "        ", "import", "models", ".", "archs", ".", "TOF_arch", "as", "TOF_arch", "\n", "netG", "=", "TOF_arch", ".", "TOFlow", "(", "adapt_official", "=", "True", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Generator model [{:s}] not recognized'", ".", "format", "(", "which_model", ")", ")", "\n", "\n", "", "return", "netG", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.networks.define_D": [[49, 58], ["models.BasicClassifier", "NotImplementedError"], "function", ["None"], ["", "def", "define_D", "(", "opt", ")", ":", "\n", "    ", "opt_net", "=", "opt", "[", "'network_D'", "]", "\n", "which_model", "=", "opt_net", "[", "'which_model_D'", "]", "\n", "\n", "if", "which_model", "==", "'discriminator_vgg_128'", ":", "\n", "        ", "netD", "=", "Classifier", ".", "BasicClassifier", "(", "in_nc", "=", "opt_net", "[", "'in_nc'", "]", ",", "nf", "=", "opt_net", "[", "'nf'", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Discriminator model [{:s}] not recognized'", ".", "format", "(", "which_model", ")", ")", "\n", "", "return", "netD", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.networks.define_E": [[60, 73], ["models.DirectKernelEstimator_CMS", "models.DirectKernelEstimatorVideo", "NotImplementedError"], "function", ["None"], ["", "def", "define_E", "(", "opt", ")", ":", "\n", "    ", "opt_net", "=", "opt", "[", "'network_E'", "]", "\n", "which_model", "=", "opt_net", "[", "'which_model_E'", "]", "\n", "use_bn", "=", "opt_net", "[", "'use_BN'", "]", "\n", "scale", "=", "opt", "[", "'scale'", "]", "\n", "\n", "if", "which_model", "==", "'SFDN'", ":", "\n", "        ", "netE", "=", "lrimg_estimator", ".", "DirectKernelEstimator_CMS", "(", "nf", "=", "opt_net", "[", "'nf'", "]", ")", "\n", "", "elif", "which_model", "==", "'MFDN'", ":", "\n", "        ", "netE", "=", "lrimg_estimator", ".", "DirectKernelEstimatorVideo", "(", "in_nc", "=", "opt_net", "[", "'in_nc'", "]", ",", "nf", "=", "opt_net", "[", "'nf'", "]", ",", "scale", "=", "scale", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Estimator model [{:s}] not recognized'", ".", "format", "(", "which_model", ")", ")", "\n", "", "return", "netE", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.networks.define_F": [[75, 87], ["torch.device", "SRGAN_arch.VGGFeatureExtractor", "SRGAN_arch.VGGFeatureExtractor.eval"], "function", ["None"], ["", "def", "define_F", "(", "opt", ",", "use_bn", "=", "False", ")", ":", "\n", "    ", "gpu_ids", "=", "opt", "[", "'gpu_ids'", "]", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "gpu_ids", "else", "'cpu'", ")", "\n", "# PyTorch pretrained VGG19-54, before ReLU.", "\n", "if", "use_bn", ":", "\n", "        ", "feature_layer", "=", "49", "\n", "", "else", ":", "\n", "        ", "feature_layer", "=", "34", "\n", "", "netF", "=", "SRGAN_arch", ".", "VGGFeatureExtractor", "(", "feature_layer", "=", "feature_layer", ",", "use_bn", "=", "use_bn", ",", "\n", "use_input_norm", "=", "True", ",", "device", "=", "device", ")", "\n", "netF", ".", "eval", "(", ")", "# No need to train", "\n", "return", "netF", "\n", "", ""]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.LRestimator_model.LRimgestimator_Model.name": [[29, 31], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'Estimator_Model'", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.LRestimator_model.LRimgestimator_Model.__init__": [[32, 91], ["base_model.BaseModel.__init__", "models.define_E().to", "LRestimator_model.LRimgestimator_Model.load", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DataParallel", "torch.nn.parallel.DataParallel", "torch.L1Loss().to", "torch.L1Loss().to", "LRestimator_model.LRimgestimator_Model.netE.train", "LRestimator_model.LRimgestimator_Model.netE.named_parameters", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "print", "LRestimator_model.LRimgestimator_Model.optimizers.append", "collections.OrderedDict", "models.define_E", "torch.MSELoss().to", "torch.MSELoss().to", "NotImplementedError", "torch.L1Loss", "torch.L1Loss", "optim_params.append", "print", "LRestimator_model.LRimgestimator_Model.schedulers.append", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.MSELoss", "torch.MSELoss", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.load", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.networks.define_E"], ["", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "LRimgestimator_Model", ",", "self", ")", ".", "__init__", "(", "opt", ")", "\n", "\n", "if", "opt", "[", "'dist'", "]", ":", "\n", "            ", "self", ".", "rank", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "rank", "=", "-", "1", "# non dist training", "\n", "", "train_opt", "=", "opt", "[", "'train'", "]", "\n", "self", ".", "train_opt", "=", "train_opt", "\n", "self", ".", "kernel_size", "=", "opt", "[", "'datasets'", "]", "[", "'train'", "]", "[", "'kernel_size'", "]", "\n", "self", ".", "patch_size", "=", "opt", "[", "'datasets'", "]", "[", "'train'", "]", "[", "'patch_size'", "]", "\n", "self", ".", "batch_size", "=", "opt", "[", "'datasets'", "]", "[", "'train'", "]", "[", "'batch_size'", "]", "\n", "\n", "# define networks and load pretrained models", "\n", "self", ".", "scale", "=", "opt", "[", "'scale'", "]", "\n", "self", ".", "model_name", "=", "opt", "[", "'network_E'", "]", "[", "'which_model_E'", "]", "\n", "self", ".", "mode", "=", "opt", "[", "'network_E'", "]", "[", "'mode'", "]", "\n", "\n", "self", ".", "netE", "=", "networks", ".", "define_E", "(", "opt", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "opt", "[", "'dist'", "]", ":", "\n", "            ", "self", ".", "netE", "=", "DistributedDataParallel", "(", "self", ".", "netE", ",", "device_ids", "=", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "netE", "=", "DataParallel", "(", "self", ".", "netE", ")", "\n", "", "self", ".", "load", "(", ")", "\n", "\n", "# loss", "\n", "if", "train_opt", "[", "'loss_ftn'", "]", "==", "'l1'", ":", "\n", "            ", "self", ".", "MyLoss", "=", "nn", ".", "L1Loss", "(", "reduction", "=", "'mean'", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "elif", "train_opt", "[", "'loss_ftn'", "]", "==", "'l2'", ":", "\n", "            ", "self", ".", "MyLoss", "=", "nn", ".", "MSELoss", "(", "reduction", "=", "'mean'", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "MyLoss", "=", "None", "\n", "\n", "", "if", "self", ".", "is_train", ":", "\n", "            ", "self", ".", "netE", ".", "train", "(", ")", "\n", "\n", "# optimizers", "\n", "self", ".", "optimizers", "=", "[", "]", "\n", "wd_R", "=", "train_opt", "[", "'weight_decay_R'", "]", "if", "train_opt", "[", "'weight_decay_R'", "]", "else", "0", "\n", "optim_params", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "self", ".", "netE", ".", "named_parameters", "(", ")", ":", "# can optimize for a part of the model", "\n", "                ", "if", "v", ".", "requires_grad", ":", "\n", "                    ", "optim_params", ".", "append", "(", "v", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "'WARNING: params [%s] will not optimize.'", "%", "k", ")", "\n", "", "", "self", ".", "optimizer_E", "=", "torch", ".", "optim", ".", "Adam", "(", "optim_params", ",", "lr", "=", "train_opt", "[", "'lr_C'", "]", ",", "weight_decay", "=", "wd_R", ")", "\n", "print", "(", "'Weight_decay:%f'", "%", "wd_R", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_E", ")", "\n", "\n", "# schedulers", "\n", "self", ".", "schedulers", "=", "[", "]", "\n", "if", "train_opt", "[", "'lr_scheme'", "]", "==", "'MultiStepLR'", ":", "\n", "                ", "for", "optimizer", "in", "self", ".", "optimizers", ":", "\n", "                    ", "self", ".", "schedulers", ".", "append", "(", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "train_opt", "[", "'lr_steps'", "]", ",", "train_opt", "[", "'lr_gamma'", "]", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'MultiStepLR learning rate scheme is enough.'", ")", "\n", "\n", "", "self", ".", "log_dict", "=", "OrderedDict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.LRestimator_model.LRimgestimator_Model.feed_data": [[96, 104], ["data[].to", "data[].to", "LRestimator_model.LRimgestimator_Model.real_H.reshape", "LRestimator_model.LRimgestimator_Model.real_H.transpose", "data.keys"], "methods", ["None"], ["", "", "def", "feed_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "self", ".", "real_H", "=", "data", "[", "'LQs'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "real_L", "=", "None", "if", "'SuperLQs'", "not", "in", "data", ".", "keys", "(", ")", "else", "data", "[", "'SuperLQs'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "B", ",", "T", ",", "C", ",", "H", ",", "W", "=", "self", ".", "real_H", ".", "shape", "\n", "if", "self", ".", "mode", "==", "'image'", ":", "\n", "            ", "self", ".", "var_H", "=", "self", ".", "real_H", ".", "reshape", "(", "B", "*", "T", ",", "C", ",", "H", ",", "W", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "var_H", "=", "self", ".", "real_H", ".", "transpose", "(", "1", ",", "2", ")", "# B C T H W", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.LRestimator_model.LRimgestimator_Model.optimize_parameters": [[105, 120], ["LRestimator_model.LRimgestimator_Model.optimizer_E.zero_grad", "LRestimator_model.LRimgestimator_Model.netE", "LRestimator_model.LRimgestimator_Model.MyLoss", "LRestimator_model.LRimgestimator_Model.item", "LRestimator_model.LRimgestimator_Model.backward", "LRestimator_model.LRimgestimator_Model.optimizer_E.step", "LRestimator_model.LRimgestimator_Model.reshape", "LRestimator_model.LRimgestimator_Model.transpose"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.dcn.deform_conv.ModulatedDeformConvFunction.backward"], ["", "", "def", "optimize_parameters", "(", "self", ",", "step", "=", "None", ")", ":", "\n", "        ", "self", ".", "optimizer_E", ".", "zero_grad", "(", ")", "\n", "fake_L", "=", "self", ".", "netE", "(", "self", ".", "var_H", ")", "\n", "if", "self", ".", "mode", "==", "'image'", ":", "\n", "            ", "H", ",", "W", "=", "fake_L", ".", "shape", "[", "-", "2", ":", "]", "\n", "B", ",", "T", ",", "C", "=", "self", ".", "real_H", ".", "shape", "[", ":", "3", "]", "\n", "self", ".", "fake_L", "=", "fake_L", ".", "reshape", "(", "B", ",", "T", ",", "C", ",", "H", ",", "W", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fake_L", "=", "fake_L", ".", "transpose", "(", "1", ",", "2", ")", "\n", "", "LR_loss", "=", "self", ".", "MyLoss", "(", "self", ".", "fake_L", ",", "self", ".", "real_L", ")", "\n", "# set log", "\n", "self", ".", "log_dict", "[", "'l_pix'", "]", "=", "LR_loss", ".", "item", "(", ")", "\n", "# Show the std of real, fake kernel", "\n", "LR_loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_E", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.LRestimator_model.LRimgestimator_Model.forward_without_optim": [[121, 129], ["LRestimator_model.LRimgestimator_Model.netE", "LRestimator_model.LRimgestimator_Model.reshape", "LRestimator_model.LRimgestimator_Model.transpose"], "methods", ["None"], ["", "def", "forward_without_optim", "(", "self", ",", "step", "=", "None", ")", ":", "\n", "        ", "fake_L", "=", "self", ".", "netE", "(", "self", ".", "var_H", ")", "\n", "if", "self", ".", "mode", "==", "'image'", ":", "\n", "            ", "H", ",", "W", "=", "fake_L", ".", "shape", "[", "-", "2", ":", "]", "\n", "B", ",", "T", ",", "C", "=", "self", ".", "real_H", ".", "shape", "[", ":", "3", "]", "\n", "self", ".", "fake_L", "=", "fake_L", ".", "reshape", "(", "B", ",", "T", ",", "C", ",", "H", ",", "W", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fake_L", "=", "fake_L", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.LRestimator_model.LRimgestimator_Model.test": [[130, 141], ["LRestimator_model.LRimgestimator_Model.netE.eval", "LRestimator_model.LRimgestimator_Model.netE.train", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "LRestimator_model.LRimgestimator_Model.netE", "LRestimator_model.LRimgestimator_Model.reshape", "LRestimator_model.LRimgestimator_Model.transpose"], "methods", ["None"], ["", "", "def", "test", "(", "self", ")", ":", "\n", "        ", "self", ".", "netE", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "fake_L", "=", "self", ".", "netE", "(", "self", ".", "var_H", ")", "\n", "if", "self", ".", "mode", "==", "'image'", ":", "\n", "                ", "H", ",", "W", "=", "fake_L", ".", "shape", "[", "-", "2", ":", "]", "\n", "B", ",", "T", ",", "C", "=", "self", ".", "real_H", ".", "shape", "[", ":", "3", "]", "\n", "self", ".", "fake_L", "=", "fake_L", ".", "reshape", "(", "B", ",", "T", ",", "C", ",", "H", ",", "W", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "fake_L", "=", "fake_L", ".", "transpose", "(", "1", ",", "2", ")", "\n", "", "", "self", ".", "netE", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.LRestimator_model.LRimgestimator_Model.get_current_log": [[142, 144], ["None"], "methods", ["None"], ["", "def", "get_current_log", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "log_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.LRestimator_model.LRimgestimator_Model.get_current_visuals": [[145, 153], ["collections.OrderedDict", "LRestimator_model.LRimgestimator_Model.fake_L.size", "[].float().cpu", "[].float().cpu", "[].float().cpu", "[].float", "[].float", "[].float", "LRestimator_model.LRimgestimator_Model.real_L.detach", "LRestimator_model.LRimgestimator_Model.fake_L.detach", "LRestimator_model.LRimgestimator_Model.real_H.detach"], "methods", ["None"], ["", "def", "get_current_visuals", "(", "self", ",", "need_GT", "=", "True", ")", ":", "\n", "        ", "out_dict", "=", "OrderedDict", "(", ")", "\n", "T", "=", "self", ".", "fake_L", ".", "size", "(", "1", ")", "\n", "out_dict", "[", "'LQ'", "]", "=", "self", ".", "real_L", ".", "detach", "(", ")", "[", "0", ",", "T", "//", "2", "]", ".", "float", "(", ")", ".", "cpu", "(", ")", "\n", "out_dict", "[", "'rlt'", "]", "=", "self", ".", "fake_L", ".", "detach", "(", ")", "[", "0", ",", "T", "//", "2", "]", ".", "float", "(", ")", ".", "cpu", "(", ")", "\n", "if", "need_GT", ":", "\n", "            ", "out_dict", "[", "'GT'", "]", "=", "self", ".", "real_H", ".", "detach", "(", ")", "[", "0", ",", "T", "//", "2", "]", ".", "float", "(", ")", ".", "cpu", "(", ")", "\n", "", "return", "out_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.LRestimator_model.LRimgestimator_Model.print_network": [[154, 163], ["LRestimator_model.LRimgestimator_Model.get_network_description", "isinstance", "logger.info", "logger.info"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.get_network_description"], ["", "def", "print_network", "(", "self", ")", ":", "\n", "        ", "s", ",", "n", "=", "self", ".", "get_network_description", "(", "self", ".", "netE", ")", "\n", "if", "isinstance", "(", "self", ".", "netE", ",", "nn", ".", "DataParallel", ")", ":", "\n", "            ", "net_struc_str", "=", "'{} - {}'", ".", "format", "(", "self", ".", "netE", ".", "__class__", ".", "__name__", ",", "\n", "self", ".", "netE", ".", "module", ".", "__class__", ".", "__name__", ")", "\n", "", "else", ":", "\n", "            ", "net_struc_str", "=", "'{}'", ".", "format", "(", "self", ".", "netE", ".", "__class__", ".", "__name__", ")", "\n", "", "logger", ".", "info", "(", "'Network R structure: {}, with parameters: {:,d}'", ".", "format", "(", "net_struc_str", ",", "n", ")", ")", "\n", "logger", ".", "info", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.LRestimator_model.LRimgestimator_Model.load": [[164, 169], ["logger.info", "LRestimator_model.LRimgestimator_Model.load_network"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.load_network"], ["", "def", "load", "(", "self", ")", ":", "\n", "        ", "load_path_E", "=", "self", ".", "opt", "[", "'path'", "]", "[", "'pretrain_model_E'", "]", "\n", "if", "load_path_E", "is", "not", "None", ":", "\n", "            ", "logger", ".", "info", "(", "'Loading pretrained model for E [{:s}] ...'", ".", "format", "(", "load_path_E", ")", ")", "\n", "self", ".", "load_network", "(", "load_path_E", ",", "self", ".", "netE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.LRestimator_model.LRimgestimator_Model.save": [[170, 172], ["LRestimator_model.LRimgestimator_Model.save_network"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.save_network"], ["", "", "def", "save", "(", "self", ",", "iter_step", ")", ":", "\n", "        ", "self", ".", "save_network", "(", "self", ".", "netE", ",", "'E'", ",", "iter_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.LRestimator_model.make_lr": [[17, 26], ["kernel.repeat().cuda", "torch.nn.ReflectionPad2d", "torch.nn.ReflectionPad2d", "torch.nn.ReflectionPad2d.", "torch.nn.functional.conv2d", "kernel.repeat", "kernel.size"], "function", ["None"], ["def", "make_lr", "(", "img", ",", "kernel", ",", "scale", ")", ":", "\n", "# img : BXT C H W", "\n", "    ", "weights", "=", "kernel", ".", "repeat", "(", "(", "3", ",", "1", ",", "1", ",", "1", ")", ")", ".", "cuda", "(", ")", "\n", "pad_func", "=", "torch", ".", "nn", ".", "ReflectionPad2d", "(", "kernel", ".", "size", "(", "-", "1", ")", "//", "2", ")", "\n", "\n", "img", "=", "pad_func", "(", "img", ")", "\n", "lr_img", "=", "F", ".", "conv2d", "(", "img", ",", "weights", ",", "groups", "=", "3", ",", "stride", "=", "scale", ")", "\n", "\n", "return", "lr_img", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.SR_model.SRModel.__init__": [[16, 83], ["base_model.BaseModel.__init__", "models.define_G().to", "models.define_G().to", "SR_model.SRModel.print_network", "SR_model.SRModel.load", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DataParallel", "torch.nn.parallel.DataParallel", "SR_model.SRModel.netG.train", "SR_model.SRModel.netG.named_parameters", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "SR_model.SRModel.optimizers.append", "collections.OrderedDict", "models.define_G", "models.define_G", "torch.L1Loss().to", "torch.L1Loss().to", "torch.MSELoss().to", "torch.MSELoss().to", "optim_params.append", "SR_model.SRModel.schedulers.append", "NotImplementedError", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.L1Loss", "torch.L1Loss", "models.loss.CharbonnierLoss().to", "models.loss.CharbonnierLoss().to", "NotImplementedError", "logger.warning", "models.MultiStepLR_Restart", "models.MultiStepLR_Restart", "SR_model.SRModel.schedulers.append", "torch.MSELoss", "torch.MSELoss", "models.CosineAnnealingLR_Restart", "models.CosineAnnealingLR_Restart", "models.loss.CharbonnierLoss", "models.loss.CharbonnierLoss"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.print_network", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.load", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.networks.define_G", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.networks.define_G"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "SRModel", ",", "self", ")", ".", "__init__", "(", "opt", ")", "\n", "\n", "if", "opt", "[", "'dist'", "]", ":", "\n", "            ", "self", ".", "rank", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "rank", "=", "-", "1", "# non dist training", "\n", "", "train_opt", "=", "opt", "[", "'train'", "]", "\n", "\n", "# define network and load pretrained models", "\n", "self", ".", "netG", "=", "networks", ".", "define_G", "(", "opt", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "opt", "[", "'dist'", "]", ":", "\n", "            ", "self", ".", "netG", "=", "DistributedDataParallel", "(", "self", ".", "netG", ",", "device_ids", "=", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "netG", "=", "DataParallel", "(", "self", ".", "netG", ")", "\n", "# print network", "\n", "", "self", ".", "print_network", "(", ")", "\n", "self", ".", "load", "(", ")", "\n", "\n", "if", "self", ".", "is_train", ":", "\n", "            ", "self", ".", "netG", ".", "train", "(", ")", "\n", "\n", "# loss", "\n", "loss_type", "=", "train_opt", "[", "'pixel_criterion'", "]", "\n", "if", "loss_type", "==", "'l1'", ":", "\n", "                ", "self", ".", "cri_pix", "=", "nn", ".", "L1Loss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "elif", "loss_type", "==", "'l2'", ":", "\n", "                ", "self", ".", "cri_pix", "=", "nn", ".", "MSELoss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "elif", "loss_type", "==", "'cb'", ":", "\n", "                ", "self", ".", "cri_pix", "=", "CharbonnierLoss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'Loss type [{:s}] is not recognized.'", ".", "format", "(", "loss_type", ")", ")", "\n", "", "self", ".", "l_pix_w", "=", "train_opt", "[", "'pixel_weight'", "]", "\n", "\n", "# optimizers", "\n", "wd_G", "=", "train_opt", "[", "'weight_decay_G'", "]", "if", "train_opt", "[", "'weight_decay_G'", "]", "else", "0", "\n", "optim_params", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "self", ".", "netG", ".", "named_parameters", "(", ")", ":", "# can optimize for a part of the model", "\n", "                ", "if", "v", ".", "requires_grad", ":", "\n", "                    ", "optim_params", ".", "append", "(", "v", ")", "\n", "", "else", ":", "\n", "                    ", "if", "self", ".", "rank", "<=", "0", ":", "\n", "                        ", "logger", ".", "warning", "(", "'Params [{:s}] will not optimize.'", ".", "format", "(", "k", ")", ")", "\n", "", "", "", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "optim_params", ",", "lr", "=", "train_opt", "[", "'lr_G'", "]", ",", "\n", "weight_decay", "=", "wd_G", ",", "\n", "betas", "=", "(", "train_opt", "[", "'beta1'", "]", ",", "train_opt", "[", "'beta2'", "]", ")", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_G", ")", "\n", "\n", "# schedulers", "\n", "if", "train_opt", "[", "'lr_scheme'", "]", "==", "'MultiStepLR'", ":", "\n", "                ", "for", "optimizer", "in", "self", ".", "optimizers", ":", "\n", "                    ", "self", ".", "schedulers", ".", "append", "(", "\n", "lr_scheduler", ".", "MultiStepLR_Restart", "(", "optimizer", ",", "train_opt", "[", "'lr_steps'", "]", ",", "\n", "restarts", "=", "train_opt", "[", "'restarts'", "]", ",", "\n", "weights", "=", "train_opt", "[", "'restart_weights'", "]", ",", "\n", "gamma", "=", "train_opt", "[", "'lr_gamma'", "]", ",", "\n", "clear_state", "=", "train_opt", "[", "'clear_state'", "]", ")", ")", "\n", "", "", "elif", "train_opt", "[", "'lr_scheme'", "]", "==", "'CosineAnnealingLR_Restart'", ":", "\n", "                ", "for", "optimizer", "in", "self", ".", "optimizers", ":", "\n", "                    ", "self", ".", "schedulers", ".", "append", "(", "\n", "lr_scheduler", ".", "CosineAnnealingLR_Restart", "(", "\n", "optimizer", ",", "train_opt", "[", "'T_period'", "]", ",", "eta_min", "=", "train_opt", "[", "'eta_min'", "]", ",", "\n", "restarts", "=", "train_opt", "[", "'restarts'", "]", ",", "weights", "=", "train_opt", "[", "'restart_weights'", "]", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'MultiStepLR learning rate scheme is enough.'", ")", "\n", "\n", "", "self", ".", "log_dict", "=", "OrderedDict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.SR_model.SRModel.feed_data": [[84, 88], ["data[].to", "data[].to"], "methods", ["None"], ["", "", "def", "feed_data", "(", "self", ",", "data", ",", "need_GT", "=", "True", ")", ":", "\n", "        ", "self", ".", "var_L", "=", "data", "[", "'LQ'", "]", ".", "to", "(", "self", ".", "device", ")", "# LQ", "\n", "if", "need_GT", ":", "\n", "            ", "self", ".", "real_H", "=", "data", "[", "'GT'", "]", ".", "to", "(", "self", ".", "device", ")", "# GT", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.SR_model.SRModel.optimize_parameters": [[89, 98], ["SR_model.SRModel.optimizer_G.zero_grad", "SR_model.SRModel.netG", "l_pix.backward", "SR_model.SRModel.optimizer_G.step", "l_pix.item", "SR_model.SRModel.cri_pix"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.dcn.deform_conv.ModulatedDeformConvFunction.backward"], ["", "", "def", "optimize_parameters", "(", "self", ",", "step", ")", ":", "\n", "        ", "self", ".", "optimizer_G", ".", "zero_grad", "(", ")", "\n", "self", ".", "fake_H", "=", "self", ".", "netG", "(", "self", ".", "var_L", ")", "\n", "l_pix", "=", "self", ".", "l_pix_w", "*", "self", ".", "cri_pix", "(", "self", ".", "fake_H", ",", "self", ".", "real_H", ")", "\n", "l_pix", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_G", ".", "step", "(", ")", "\n", "\n", "# set log", "\n", "self", ".", "log_dict", "[", "'l_pix'", "]", "=", "l_pix", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.SR_model.SRModel.test": [[99, 104], ["SR_model.SRModel.netG.eval", "SR_model.SRModel.netG.train", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "SR_model.SRModel.netG"], "methods", ["None"], ["", "def", "test", "(", "self", ")", ":", "\n", "        ", "self", ".", "netG", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "fake_H", "=", "self", ".", "netG", "(", "self", ".", "var_L", ")", "\n", "", "self", ".", "netG", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.SR_model.SRModel.test_x8": [[105, 140], ["SR_model.SRModel.netG.eval", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.mean", "torch.cat.mean", "SR_model.SRModel.netG.train", "v.data.cpu().numpy", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "lr_list.extend", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "len", "v2np[].copy", "SR_model.SRModel.netG", "SR_model.SRModel.test_x8._transform"], "methods", ["None"], ["", "def", "test_x8", "(", "self", ")", ":", "\n", "# from https://github.com/thstkdgus35/EDSR-PyTorch", "\n", "        ", "self", ".", "netG", ".", "eval", "(", ")", "\n", "\n", "def", "_transform", "(", "v", ",", "op", ")", ":", "\n", "# if self.precision != 'single': v = v.float()", "\n", "            ", "v2np", "=", "v", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "op", "==", "'v'", ":", "\n", "                ", "tfnp", "=", "v2np", "[", ":", ",", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "copy", "(", ")", "\n", "", "elif", "op", "==", "'h'", ":", "\n", "                ", "tfnp", "=", "v2np", "[", ":", ",", ":", ",", ":", ":", "-", "1", ",", ":", "]", ".", "copy", "(", ")", "\n", "", "elif", "op", "==", "'t'", ":", "\n", "                ", "tfnp", "=", "v2np", ".", "transpose", "(", "(", "0", ",", "1", ",", "3", ",", "2", ")", ")", ".", "copy", "(", ")", "\n", "\n", "", "ret", "=", "torch", ".", "Tensor", "(", "tfnp", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "# if self.precision == 'half': ret = ret.half()", "\n", "\n", "return", "ret", "\n", "\n", "", "lr_list", "=", "[", "self", ".", "var_L", "]", "\n", "for", "tf", "in", "'v'", ",", "'h'", ",", "'t'", ":", "\n", "            ", "lr_list", ".", "extend", "(", "[", "_transform", "(", "t", ",", "tf", ")", "for", "t", "in", "lr_list", "]", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "sr_list", "=", "[", "self", ".", "netG", "(", "aug", ")", "for", "aug", "in", "lr_list", "]", "\n", "", "for", "i", "in", "range", "(", "len", "(", "sr_list", ")", ")", ":", "\n", "            ", "if", "i", ">", "3", ":", "\n", "                ", "sr_list", "[", "i", "]", "=", "_transform", "(", "sr_list", "[", "i", "]", ",", "'t'", ")", "\n", "", "if", "i", "%", "4", ">", "1", ":", "\n", "                ", "sr_list", "[", "i", "]", "=", "_transform", "(", "sr_list", "[", "i", "]", ",", "'h'", ")", "\n", "", "if", "(", "i", "%", "4", ")", "%", "2", "==", "1", ":", "\n", "                ", "sr_list", "[", "i", "]", "=", "_transform", "(", "sr_list", "[", "i", "]", ",", "'v'", ")", "\n", "\n", "", "", "output_cat", "=", "torch", ".", "cat", "(", "sr_list", ",", "dim", "=", "0", ")", "\n", "self", ".", "fake_H", "=", "output_cat", ".", "mean", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "self", ".", "netG", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.SR_model.SRModel.get_current_log": [[141, 143], ["None"], "methods", ["None"], ["", "def", "get_current_log", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "log_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.SR_model.SRModel.get_current_visuals": [[144, 151], ["collections.OrderedDict", "[].float().cpu", "[].float().cpu", "[].float().cpu", "[].float", "[].float", "[].float", "SR_model.SRModel.var_L.detach", "SR_model.SRModel.fake_H.detach", "SR_model.SRModel.real_H.detach"], "methods", ["None"], ["", "def", "get_current_visuals", "(", "self", ",", "need_GT", "=", "True", ")", ":", "\n", "        ", "out_dict", "=", "OrderedDict", "(", ")", "\n", "out_dict", "[", "'LQ'", "]", "=", "self", ".", "var_L", ".", "detach", "(", ")", "[", "0", "]", ".", "float", "(", ")", ".", "cpu", "(", ")", "\n", "out_dict", "[", "'rlt'", "]", "=", "self", ".", "fake_H", ".", "detach", "(", ")", "[", "0", "]", ".", "float", "(", ")", ".", "cpu", "(", ")", "\n", "if", "need_GT", ":", "\n", "            ", "out_dict", "[", "'GT'", "]", "=", "self", ".", "real_H", ".", "detach", "(", ")", "[", "0", "]", ".", "float", "(", ")", ".", "cpu", "(", ")", "\n", "", "return", "out_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.SR_model.SRModel.print_network": [[152, 162], ["SR_model.SRModel.get_network_description", "isinstance", "isinstance", "logger.info", "logger.info"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.get_network_description"], ["", "def", "print_network", "(", "self", ")", ":", "\n", "        ", "s", ",", "n", "=", "self", ".", "get_network_description", "(", "self", ".", "netG", ")", "\n", "if", "isinstance", "(", "self", ".", "netG", ",", "nn", ".", "DataParallel", ")", "or", "isinstance", "(", "self", ".", "netG", ",", "DistributedDataParallel", ")", ":", "\n", "            ", "net_struc_str", "=", "'{} - {}'", ".", "format", "(", "self", ".", "netG", ".", "__class__", ".", "__name__", ",", "\n", "self", ".", "netG", ".", "module", ".", "__class__", ".", "__name__", ")", "\n", "", "else", ":", "\n", "            ", "net_struc_str", "=", "'{}'", ".", "format", "(", "self", ".", "netG", ".", "__class__", ".", "__name__", ")", "\n", "", "if", "self", ".", "rank", "<=", "0", ":", "\n", "            ", "logger", ".", "info", "(", "'Network G structure: {}, with parameters: {:,d}'", ".", "format", "(", "net_struc_str", ",", "n", ")", ")", "\n", "logger", ".", "info", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.SR_model.SRModel.load": [[163, 168], ["logger.info", "SR_model.SRModel.load_network"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.load_network"], ["", "", "def", "load", "(", "self", ")", ":", "\n", "        ", "load_path_G", "=", "self", ".", "opt", "[", "'path'", "]", "[", "'pretrain_model_G'", "]", "\n", "if", "load_path_G", "is", "not", "None", ":", "\n", "            ", "logger", ".", "info", "(", "'Loading model for G [{:s}] ...'", ".", "format", "(", "load_path_G", ")", ")", "\n", "self", ".", "load_network", "(", "load_path_G", ",", "self", ".", "netG", ",", "self", ".", "opt", "[", "'path'", "]", "[", "'strict_load'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.SR_model.SRModel.save": [[169, 171], ["SR_model.SRModel.save_network"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.save_network"], ["", "", "def", "save", "(", "self", ",", "iter_label", ")", ":", "\n", "        ", "self", ".", "save_network", "(", "self", ".", "netG", ",", "'G'", ",", "iter_label", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.loss.HuberLoss.__init__": [[8, 11], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__"], ["def", "__init__", "(", "self", ",", "delta", "=", "1e-2", ")", ":", "\n", "        ", "super", "(", "HuberLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "delta", "=", "delta", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.loss.HuberLoss.forward": [[12, 18], ["torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "diff", "=", "torch", ".", "abs", "(", "x", "-", "y", ")", "\n", "squareloss", "=", "0.5", "*", "diff", "*", "diff", "\n", "linearloss", "=", "self", ".", "delta", "*", "diff", "-", "0.5", "*", "self", ".", "delta", "*", "self", ".", "delta", "\n", "loss", "=", "torch", ".", "mean", "(", "(", "diff", ">", "self", ".", "delta", ")", "*", "linearloss", "+", "(", "diff", "<=", "self", ".", "delta", ")", "*", "squareloss", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.loss.CharbonnierLoss.__init__": [[22, 25], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__"], ["def", "__init__", "(", "self", ",", "eps", "=", "1e-6", ")", ":", "\n", "        ", "super", "(", "CharbonnierLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.loss.CharbonnierLoss.forward": [[26, 31], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "diff", "=", "x", "-", "y", "\n", "loss", "=", "torch", ".", "mean", "(", "torch", ".", "sqrt", "(", "diff", "*", "diff", "+", "self", ".", "eps", ")", ")", "\n", "#loss = torch.sum(torch.sqrt(diff * diff + self.eps))", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.loss.GANLoss.__init__": [[35, 54], ["torch.Module.__init__", "gan_type.lower", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.MSELoss", "torch.MSELoss", "NotImplementedError", "input.mean", "input.mean"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gan_type", ",", "real_label_val", "=", "1.0", ",", "fake_label_val", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "GANLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gan_type", "=", "gan_type", ".", "lower", "(", ")", "\n", "self", ".", "real_label_val", "=", "real_label_val", "\n", "self", ".", "fake_label_val", "=", "fake_label_val", "\n", "\n", "if", "self", ".", "gan_type", "==", "'gan'", "or", "self", ".", "gan_type", "==", "'ragan'", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "", "elif", "self", ".", "gan_type", "==", "'lsgan'", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "", "elif", "self", ".", "gan_type", "==", "'wgan-gp'", ":", "\n", "\n", "            ", "def", "wgan_loss", "(", "input", ",", "target", ")", ":", "\n", "# target is boolean", "\n", "                ", "return", "-", "1", "*", "input", ".", "mean", "(", ")", "if", "target", "else", "input", ".", "mean", "(", ")", "\n", "\n", "", "self", ".", "loss", "=", "wgan_loss", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'GAN type [{:s}] is not found'", ".", "format", "(", "self", ".", "gan_type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.loss.GANLoss.get_target_label": [[55, 62], ["torch.empty_like().fill_", "torch.empty_like().fill_", "torch.empty_like().fill_", "torch.empty_like().fill_", "torch.empty_like().fill_", "torch.empty_like().fill_", "torch.empty_like().fill_", "torch.empty_like().fill_", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like"], "methods", ["None"], ["", "", "def", "get_target_label", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "if", "self", ".", "gan_type", "==", "'wgan-gp'", ":", "\n", "            ", "return", "target_is_real", "\n", "", "if", "target_is_real", ":", "\n", "            ", "return", "torch", ".", "empty_like", "(", "input", ")", ".", "fill_", "(", "self", ".", "real_label_val", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "empty_like", "(", "input", ")", ".", "fill_", "(", "self", ".", "fake_label_val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.loss.GANLoss.forward": [[63, 67], ["loss.GANLoss.GANLoss.get_target_label", "loss.GANLoss.GANLoss.loss"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.models.loss.GANLoss.get_target_label"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "target_label", "=", "self", ".", "get_target_label", "(", "input", ",", "target_is_real", ")", "\n", "loss", "=", "self", ".", "loss", "(", "input", ",", "target_label", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.loss.GradientPenaltyLoss.__init__": [[70, 74], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.Module.__init__", "loss.GradientPenaltyLoss.register_buffer", "loss.GradientPenaltyLoss.grad_outputs.to", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", ":", "\n", "        ", "super", "(", "GradientPenaltyLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "'grad_outputs'", ",", "torch", ".", "Tensor", "(", ")", ")", "\n", "self", ".", "grad_outputs", "=", "self", ".", "grad_outputs", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.loss.GradientPenaltyLoss.get_grad_outputs": [[75, 79], ["loss.GradientPenaltyLoss.grad_outputs.size", "input.size", "loss.GradientPenaltyLoss.grad_outputs.resize_().fill_", "loss.GradientPenaltyLoss.grad_outputs.resize_", "input.size"], "methods", ["None"], ["", "def", "get_grad_outputs", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "grad_outputs", ".", "size", "(", ")", "!=", "input", ".", "size", "(", ")", ":", "\n", "            ", "self", ".", "grad_outputs", ".", "resize_", "(", "input", ".", "size", "(", ")", ")", ".", "fill_", "(", "1.0", ")", "\n", "", "return", "self", ".", "grad_outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.loss.GradientPenaltyLoss.forward": [[80, 90], ["loss.GradientPenaltyLoss.get_grad_outputs", "grad_interp.view.view.view", "grad_interp.view.view.norm", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "grad_interp.view.view.size"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.models.loss.GradientPenaltyLoss.get_grad_outputs"], ["", "def", "forward", "(", "self", ",", "interp", ",", "interp_crit", ")", ":", "\n", "        ", "grad_outputs", "=", "self", ".", "get_grad_outputs", "(", "interp_crit", ")", "\n", "grad_interp", "=", "torch", ".", "autograd", ".", "grad", "(", "outputs", "=", "interp_crit", ",", "inputs", "=", "interp", ",", "\n", "grad_outputs", "=", "grad_outputs", ",", "create_graph", "=", "True", ",", "\n", "retain_graph", "=", "True", ",", "only_inputs", "=", "True", ")", "[", "0", "]", "\n", "grad_interp", "=", "grad_interp", ".", "view", "(", "grad_interp", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "grad_interp_norm", "=", "grad_interp", ".", "norm", "(", "2", ",", "dim", "=", "1", ")", "\n", "\n", "loss", "=", "(", "(", "grad_interp_norm", "-", "1", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.Ranker_model.Classifier_Model.name": [[17, 19], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'Ranker_Model'", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.Ranker_model.Classifier_Model.__init__": [[20, 72], ["base_model.BaseModel.__init__", "models.define_C().to", "Ranker_model.Classifier_Model.load", "print", "Ranker_model.Classifier_Model.print_network", "print", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DataParallel", "torch.nn.parallel.DataParallel", "Ranker_model.Classifier_Model.netC.train", "torch.MarginRankingLoss", "torch.MarginRankingLoss", "Ranker_model.Classifier_Model.RankLoss.to", "torch.L1Loss", "torch.L1Loss", "Ranker_model.Classifier_Model.L2Loss.to", "Ranker_model.Classifier_Model.netC.named_parameters", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "print", "Ranker_model.Classifier_Model.optimizers.append", "collections.OrderedDict", "models.define_C", "NotImplementedError", "optim_params.append", "print", "Ranker_model.Classifier_Model.schedulers.append", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.load", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.print_network"], ["", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "Classifier_Model", ",", "self", ")", ".", "__init__", "(", "opt", ")", "\n", "\n", "if", "opt", "[", "'dist'", "]", ":", "\n", "            ", "self", ".", "rank", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "rank", "=", "-", "1", "# non dist training", "\n", "", "train_opt", "=", "opt", "[", "'train'", "]", "\n", "\n", "# define networks and load pretrained models", "\n", "self", ".", "netC", "=", "networks", ".", "define_C", "(", "opt", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "opt", "[", "'dist'", "]", ":", "\n", "            ", "self", ".", "netC", "=", "DistributedDataParallel", "(", "self", ".", "netC", ",", "device_ids", "=", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "netC", "=", "DataParallel", "(", "self", ".", "netC", ")", "\n", "", "self", ".", "load", "(", ")", "\n", "\n", "if", "self", ".", "is_train", ":", "\n", "            ", "self", ".", "netC", ".", "train", "(", ")", "\n", "\n", "# loss", "\n", "self", ".", "RankLoss", "=", "nn", ".", "MarginRankingLoss", "(", "margin", "=", "0.5", ")", "\n", "self", ".", "RankLoss", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "L2Loss", "=", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "L2Loss", ".", "to", "(", "self", ".", "device", ")", "\n", "# optimizers", "\n", "self", ".", "optimizers", "=", "[", "]", "\n", "wd_R", "=", "train_opt", "[", "'weight_decay_R'", "]", "if", "train_opt", "[", "'weight_decay_R'", "]", "else", "0", "\n", "optim_params", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "self", ".", "netC", ".", "named_parameters", "(", ")", ":", "# can optimize for a part of the model", "\n", "                ", "if", "v", ".", "requires_grad", ":", "\n", "                    ", "optim_params", ".", "append", "(", "v", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "'WARNING: params [%s] will not optimize.'", "%", "k", ")", "\n", "", "", "self", ".", "optimizer_R", "=", "torch", ".", "optim", ".", "Adam", "(", "optim_params", ",", "lr", "=", "train_opt", "[", "'lr_R'", "]", ",", "weight_decay", "=", "wd_R", ")", "\n", "print", "(", "'Weight_decay:%f'", "%", "wd_R", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_R", ")", "\n", "\n", "# schedulers", "\n", "self", ".", "schedulers", "=", "[", "]", "\n", "if", "train_opt", "[", "'lr_scheme'", "]", "==", "'MultiStepLR'", ":", "\n", "                ", "for", "optimizer", "in", "self", ".", "optimizers", ":", "\n", "                    ", "self", ".", "schedulers", ".", "append", "(", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "train_opt", "[", "'lr_steps'", "]", ",", "train_opt", "[", "'lr_gamma'", "]", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'MultiStepLR learning rate scheme is enough.'", ")", "\n", "\n", "", "self", ".", "log_dict", "=", "OrderedDict", "(", ")", "\n", "\n", "", "print", "(", "'---------- Model initialized ------------------'", ")", "\n", "self", ".", "print_network", "(", ")", "\n", "print", "(", "'-----------------------------------------------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.Ranker_model.Classifier_Model.feed_data": [[73, 92], ["data[].to", "data[].to", "data[].to", "data[].to", "Ranker_model.Classifier_Model.label.float"], "methods", ["None"], ["", "def", "feed_data", "(", "self", ",", "data", ",", "need_img2", "=", "True", ")", ":", "\n", "# input img1", "\n", "        ", "self", ".", "input_img1", "=", "data", "[", "'img1'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# label score1", "\n", "self", ".", "label_score1", "=", "data", "[", "'score1'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "if", "need_img2", ":", "\n", "# input img2", "\n", "            ", "self", ".", "input_img2", "=", "data", "[", "'img2'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# label score2", "\n", "self", ".", "label_score2", "=", "data", "[", "'score2'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# rank label", "\n", "self", ".", "label", "=", "self", ".", "label_score1", ">=", "self", ".", "label_score2", "# get a ByteTensor", "\n", "# transfer into FloatTensor", "\n", "self", ".", "label", "=", "self", ".", "label", ".", "float", "(", ")", "\n", "self", ".", "label", "=", "(", "self", ".", "label", "-", "0.5", ")", "*", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.Ranker_model.Classifier_Model.optimize_parameters": [[94, 110], ["Ranker_model.Classifier_Model.optimizer_R.zero_grad", "Ranker_model.Classifier_Model.netC", "Ranker_model.Classifier_Model.netC", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "Ranker_model.Classifier_Model.RankLoss", "Ranker_model.Classifier_Model.backward", "Ranker_model.Classifier_Model.optimizer_R.step", "Ranker_model.Classifier_Model.item"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.dcn.deform_conv.ModulatedDeformConvFunction.backward"], ["", "", "def", "optimize_parameters", "(", "self", ",", "step", ")", ":", "\n", "        ", "self", ".", "optimizer_R", ".", "zero_grad", "(", ")", "\n", "self", ".", "predict_score1", "=", "self", ".", "netC", "(", "self", ".", "input_img1", ")", "\n", "self", ".", "predict_score2", "=", "self", ".", "netC", "(", "self", ".", "input_img2", ")", "\n", "\n", "\n", "self", ".", "predict_score1", "=", "torch", ".", "clamp", "(", "self", ".", "predict_score1", ",", "min", "=", "-", "5", ",", "max", "=", "5", ")", "\n", "self", ".", "predict_score2", "=", "torch", ".", "clamp", "(", "self", ".", "predict_score2", ",", "min", "=", "-", "5", ",", "max", "=", "5", ")", "\n", "\n", "l_rank", "=", "self", ".", "RankLoss", "(", "self", ".", "predict_score1", ",", "self", ".", "predict_score2", ",", "self", ".", "label", ")", "\n", "\n", "l_rank", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_R", ".", "step", "(", ")", "\n", "\n", "# set log", "\n", "self", ".", "log_dict", "[", "'l_rank'", "]", "=", "l_rank", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.Ranker_model.Classifier_Model.test": [[111, 115], ["Ranker_model.Classifier_Model.netC.eval", "Ranker_model.Classifier_Model.netC", "Ranker_model.Classifier_Model.netC.train"], "methods", ["None"], ["", "def", "test", "(", "self", ")", ":", "\n", "        ", "self", ".", "netC", ".", "eval", "(", ")", "\n", "self", ".", "predict_score1", "=", "self", ".", "netC", "(", "self", ".", "input_img1", ")", "\n", "self", ".", "netC", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.Ranker_model.Classifier_Model.get_current_log": [[116, 118], ["None"], "methods", ["None"], ["", "def", "get_current_log", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "log_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.Ranker_model.Classifier_Model.get_current_visuals": [[119, 124], ["collections.OrderedDict", "Ranker_model.Classifier_Model.predict_score1.data[].float().cpu", "Ranker_model.Classifier_Model.predict_score1.data[].float"], "methods", ["None"], ["", "def", "get_current_visuals", "(", "self", ",", "need_HR", "=", "True", ")", ":", "\n", "        ", "out_dict", "=", "OrderedDict", "(", ")", "# ............................", "\n", "out_dict", "[", "'predict_score1'", "]", "=", "self", ".", "predict_score1", ".", "data", "[", "0", "]", ".", "float", "(", ")", ".", "cpu", "(", ")", "\n", "\n", "return", "out_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.Ranker_model.Classifier_Model.print_network": [[125, 134], ["Ranker_model.Classifier_Model.get_network_description", "isinstance", "logger.info", "logger.info"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.get_network_description"], ["", "def", "print_network", "(", "self", ")", ":", "\n", "        ", "s", ",", "n", "=", "self", ".", "get_network_description", "(", "self", ".", "netC", ")", "\n", "if", "isinstance", "(", "self", ".", "netC", ",", "nn", ".", "DataParallel", ")", ":", "\n", "            ", "net_struc_str", "=", "'{} - {}'", ".", "format", "(", "self", ".", "netC", ".", "__class__", ".", "__name__", ",", "\n", "self", ".", "netC", ".", "module", ".", "__class__", ".", "__name__", ")", "\n", "", "else", ":", "\n", "            ", "net_struc_str", "=", "'{}'", ".", "format", "(", "self", ".", "netC", ".", "__class__", ".", "__name__", ")", "\n", "", "logger", ".", "info", "(", "'Network R structure: {}, with parameters: {:,d}'", ".", "format", "(", "net_struc_str", ",", "n", ")", ")", "\n", "logger", ".", "info", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.Ranker_model.Classifier_Model.load": [[135, 141], ["logger.info", "Ranker_model.Classifier_Model.load_network"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.load_network"], ["", "def", "load", "(", "self", ")", ":", "\n", "\n", "        ", "load_path_R", "=", "self", ".", "opt", "[", "'path'", "]", "[", "'pretrain_model_R'", "]", "\n", "if", "load_path_R", "is", "not", "None", ":", "\n", "            ", "logger", ".", "info", "(", "'Loading pretrained model for R [{:s}] ...'", ".", "format", "(", "load_path_R", ")", ")", "\n", "self", ".", "load_network", "(", "load_path_R", ",", "self", ".", "netC", ")", "\n", "", "", "def", "save", "(", "self", ",", "iter_step", ")", ":", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.Ranker_model.Classifier_Model.save": [[141, 143], ["Ranker_model.Classifier_Model.save_network"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.save_network"], ["", "", "def", "save", "(", "self", ",", "iter_step", ")", ":", "\n", "        ", "self", ".", "save_network", "(", "self", ".", "netC", ",", "'R'", ",", "iter_step", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.lr_scheduler.MultiStepLR_Restart.__init__": [[9, 20], ["collections.Counter", "torch.optim.lr_scheduler._LRScheduler.__init__", "len", "len"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "milestones", ",", "restarts", "=", "None", ",", "weights", "=", "None", ",", "gamma", "=", "0.1", ",", "\n", "clear_state", "=", "False", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "milestones", "=", "Counter", "(", "milestones", ")", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "clear_state", "=", "clear_state", "\n", "self", ".", "restarts", "=", "restarts", "if", "restarts", "else", "[", "0", "]", "\n", "self", ".", "restarts", "=", "[", "v", "+", "1", "for", "v", "in", "self", ".", "restarts", "]", "\n", "self", ".", "restart_weights", "=", "weights", "if", "weights", "else", "[", "1", "]", "\n", "assert", "len", "(", "self", ".", "restarts", ")", "==", "len", "(", "\n", "self", ".", "restart_weights", ")", ",", "'restarts and their weights do not match.'", "\n", "super", "(", "MultiStepLR_Restart", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.lr_scheduler.MultiStepLR_Restart.get_lr": [[21, 32], ["collections.defaultdict", "lr_scheduler.MultiStepLR_Restart.restarts.index"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "last_epoch", "in", "self", ".", "restarts", ":", "\n", "            ", "if", "self", ".", "clear_state", ":", "\n", "                ", "self", ".", "optimizer", ".", "state", "=", "defaultdict", "(", "dict", ")", "\n", "", "weight", "=", "self", ".", "restart_weights", "[", "self", ".", "restarts", ".", "index", "(", "self", ".", "last_epoch", ")", "]", "\n", "return", "[", "group", "[", "'initial_lr'", "]", "*", "weight", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", "]", "\n", "", "if", "self", ".", "last_epoch", "not", "in", "self", ".", "milestones", ":", "\n", "            ", "return", "[", "group", "[", "'lr'", "]", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", "]", "\n", "", "return", "[", "\n", "group", "[", "'lr'", "]", "*", "self", ".", "gamma", "**", "self", ".", "milestones", "[", "self", ".", "last_epoch", "]", "\n", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.lr_scheduler.CosineAnnealingLR_Restart.__init__": [[36, 47], ["torch.optim.lr_scheduler._LRScheduler.__init__", "len", "len"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "T_period", ",", "restarts", "=", "None", ",", "weights", "=", "None", ",", "eta_min", "=", "0", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "T_period", "=", "T_period", "\n", "self", ".", "T_max", "=", "self", ".", "T_period", "[", "0", "]", "# current T period", "\n", "self", ".", "eta_min", "=", "eta_min", "\n", "self", ".", "restarts", "=", "restarts", "if", "restarts", "else", "[", "0", "]", "\n", "self", ".", "restarts", "=", "[", "v", "+", "1", "for", "v", "in", "self", ".", "restarts", "]", "\n", "self", ".", "restart_weights", "=", "weights", "if", "weights", "else", "[", "1", "]", "\n", "self", ".", "last_restart", "=", "0", "\n", "assert", "len", "(", "self", ".", "restarts", ")", "==", "len", "(", "\n", "self", ".", "restart_weights", ")", ",", "'restarts and their weights do not match.'", "\n", "super", "(", "CosineAnnealingLR_Restart", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.lr_scheduler.CosineAnnealingLR_Restart.get_lr": [[48, 65], ["lr_scheduler.CosineAnnealingLR_Restart.restarts.index", "lr_scheduler.CosineAnnealingLR_Restart.restarts.index", "zip", "math.cos", "math.cos", "math.cos"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "last_epoch", "==", "0", ":", "\n", "            ", "return", "self", ".", "base_lrs", "\n", "", "elif", "self", ".", "last_epoch", "in", "self", ".", "restarts", ":", "\n", "            ", "self", ".", "last_restart", "=", "self", ".", "last_epoch", "\n", "self", ".", "T_max", "=", "self", ".", "T_period", "[", "self", ".", "restarts", ".", "index", "(", "self", ".", "last_epoch", ")", "+", "1", "]", "\n", "weight", "=", "self", ".", "restart_weights", "[", "self", ".", "restarts", ".", "index", "(", "self", ".", "last_epoch", ")", "]", "\n", "return", "[", "group", "[", "'initial_lr'", "]", "*", "weight", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", "]", "\n", "", "elif", "(", "self", ".", "last_epoch", "-", "self", ".", "last_restart", "-", "1", "-", "self", ".", "T_max", ")", "%", "(", "2", "*", "self", ".", "T_max", ")", "==", "0", ":", "\n", "            ", "return", "[", "\n", "group", "[", "'lr'", "]", "+", "(", "base_lr", "-", "self", ".", "eta_min", ")", "*", "(", "1", "-", "math", ".", "cos", "(", "math", ".", "pi", "/", "self", ".", "T_max", ")", ")", "/", "2", "\n", "for", "base_lr", ",", "group", "in", "zip", "(", "self", ".", "base_lrs", ",", "self", ".", "optimizer", ".", "param_groups", ")", "\n", "]", "\n", "", "return", "[", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "(", "self", ".", "last_epoch", "-", "self", ".", "last_restart", ")", "/", "self", ".", "T_max", ")", ")", "/", "\n", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "(", "(", "self", ".", "last_epoch", "-", "self", ".", "last_restart", ")", "-", "1", ")", "/", "self", ".", "T_max", ")", ")", "*", "\n", "(", "group", "[", "'lr'", "]", "-", "self", ".", "eta_min", ")", "+", "self", ".", "eta_min", "\n", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.__init__.create_model": [[5, 38], ["M", "logger.info", "models.split", "__init__.create_model._create"], "function", ["None"], []], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.SRGAN_model.SRGANModel.__init__": [[15, 126], ["base_model.BaseModel.__init__", "models.define_G().to", "models.define_G().to", "SRGAN_model.SRGANModel.print_network", "SRGAN_model.SRGANModel.load", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DataParallel", "torch.nn.parallel.DataParallel", "models.define_D().to", "models.define_D().to", "SRGAN_model.SRGANModel.netG.train", "SRGAN_model.SRGANModel.netD.train", "models.loss.GANLoss().to", "models.loss.GANLoss().to", "SRGAN_model.SRGANModel.netG.named_parameters", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "SRGAN_model.SRGANModel.optimizers.append", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "SRGAN_model.SRGANModel.optimizers.append", "collections.OrderedDict", "models.define_G", "models.define_G", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DataParallel", "torch.nn.parallel.DataParallel", "logger.info", "logger.info", "models.define_F().to", "models.define_F().to", "SRGAN_model.SRGANModel.netD.parameters", "models.define_D", "models.define_D", "torch.L1Loss().to", "torch.L1Loss().to", "torch.L1Loss().to", "torch.L1Loss().to", "torch.nn.parallel.DataParallel", "torch.nn.parallel.DataParallel", "models.loss.GANLoss", "models.loss.GANLoss", "optim_params.append", "SRGAN_model.SRGANModel.schedulers.append", "NotImplementedError", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.MSELoss().to", "torch.MSELoss().to", "NotImplementedError", "torch.MSELoss().to", "torch.MSELoss().to", "NotImplementedError", "models.define_F", "models.define_F", "logger.warning", "models.MultiStepLR_Restart", "models.MultiStepLR_Restart", "SRGAN_model.SRGANModel.schedulers.append", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "models.CosineAnnealingLR_Restart", "models.CosineAnnealingLR_Restart", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.print_network", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.load", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.networks.define_G", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.networks.define_G", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.networks.define_D", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.networks.define_D", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.networks.define_F", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.networks.define_F"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "SRGANModel", ",", "self", ")", ".", "__init__", "(", "opt", ")", "\n", "if", "opt", "[", "'dist'", "]", ":", "\n", "            ", "self", ".", "rank", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "rank", "=", "-", "1", "# non dist training", "\n", "", "train_opt", "=", "opt", "[", "'train'", "]", "\n", "\n", "# define networks and load pretrained models", "\n", "self", ".", "netG", "=", "networks", ".", "define_G", "(", "opt", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "opt", "[", "'dist'", "]", ":", "\n", "            ", "self", ".", "netG", "=", "DistributedDataParallel", "(", "self", ".", "netG", ",", "device_ids", "=", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "netG", "=", "DataParallel", "(", "self", ".", "netG", ")", "\n", "", "if", "self", ".", "is_train", ":", "\n", "            ", "self", ".", "netD", "=", "networks", ".", "define_D", "(", "opt", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "opt", "[", "'dist'", "]", ":", "\n", "                ", "self", ".", "netD", "=", "DistributedDataParallel", "(", "self", ".", "netD", ",", "\n", "device_ids", "=", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "netD", "=", "DataParallel", "(", "self", ".", "netD", ")", "\n", "\n", "", "self", ".", "netG", ".", "train", "(", ")", "\n", "self", ".", "netD", ".", "train", "(", ")", "\n", "\n", "# define losses, optimizer and scheduler", "\n", "", "if", "self", ".", "is_train", ":", "\n", "# G pixel loss", "\n", "            ", "if", "train_opt", "[", "'pixel_weight'", "]", ">", "0", ":", "\n", "                ", "l_pix_type", "=", "train_opt", "[", "'pixel_criterion'", "]", "\n", "if", "l_pix_type", "==", "'l1'", ":", "\n", "                    ", "self", ".", "cri_pix", "=", "nn", ".", "L1Loss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "elif", "l_pix_type", "==", "'l2'", ":", "\n", "                    ", "self", ".", "cri_pix", "=", "nn", ".", "MSELoss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "(", "'Loss type [{:s}] not recognized.'", ".", "format", "(", "l_pix_type", ")", ")", "\n", "", "self", ".", "l_pix_w", "=", "train_opt", "[", "'pixel_weight'", "]", "\n", "", "else", ":", "\n", "                ", "logger", ".", "info", "(", "'Remove pixel loss.'", ")", "\n", "self", ".", "cri_pix", "=", "None", "\n", "\n", "# G feature loss", "\n", "", "if", "train_opt", "[", "'feature_weight'", "]", ">", "0", ":", "\n", "                ", "l_fea_type", "=", "train_opt", "[", "'feature_criterion'", "]", "\n", "if", "l_fea_type", "==", "'l1'", ":", "\n", "                    ", "self", ".", "cri_fea", "=", "nn", ".", "L1Loss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "elif", "l_fea_type", "==", "'l2'", ":", "\n", "                    ", "self", ".", "cri_fea", "=", "nn", ".", "MSELoss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "(", "'Loss type [{:s}] not recognized.'", ".", "format", "(", "l_fea_type", ")", ")", "\n", "", "self", ".", "l_fea_w", "=", "train_opt", "[", "'feature_weight'", "]", "\n", "", "else", ":", "\n", "                ", "logger", ".", "info", "(", "'Remove feature loss.'", ")", "\n", "self", ".", "cri_fea", "=", "None", "\n", "", "if", "self", ".", "cri_fea", ":", "# load VGG perceptual loss", "\n", "                ", "self", ".", "netF", "=", "networks", ".", "define_F", "(", "opt", ",", "use_bn", "=", "False", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "opt", "[", "'dist'", "]", ":", "\n", "                    ", "pass", "# do not need to use DistributedDataParallel for netF", "\n", "", "else", ":", "\n", "                    ", "self", ".", "netF", "=", "DataParallel", "(", "self", ".", "netF", ")", "\n", "\n", "# GD gan loss", "\n", "", "", "self", ".", "cri_gan", "=", "GANLoss", "(", "train_opt", "[", "'gan_type'", "]", ",", "1.0", ",", "0.0", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "l_gan_w", "=", "train_opt", "[", "'gan_weight'", "]", "\n", "# D_update_ratio and D_init_iters", "\n", "self", ".", "D_update_ratio", "=", "train_opt", "[", "'D_update_ratio'", "]", "if", "train_opt", "[", "'D_update_ratio'", "]", "else", "1", "\n", "self", ".", "D_init_iters", "=", "train_opt", "[", "'D_init_iters'", "]", "if", "train_opt", "[", "'D_init_iters'", "]", "else", "0", "\n", "\n", "# optimizers", "\n", "# G", "\n", "wd_G", "=", "train_opt", "[", "'weight_decay_G'", "]", "if", "train_opt", "[", "'weight_decay_G'", "]", "else", "0", "\n", "optim_params", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "self", ".", "netG", ".", "named_parameters", "(", ")", ":", "# can optimize for a part of the model", "\n", "                ", "if", "v", ".", "requires_grad", ":", "\n", "                    ", "optim_params", ".", "append", "(", "v", ")", "\n", "", "else", ":", "\n", "                    ", "if", "self", ".", "rank", "<=", "0", ":", "\n", "                        ", "logger", ".", "warning", "(", "'Params [{:s}] will not optimize.'", ".", "format", "(", "k", ")", ")", "\n", "", "", "", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "optim_params", ",", "lr", "=", "train_opt", "[", "'lr_G'", "]", ",", "\n", "weight_decay", "=", "wd_G", ",", "\n", "betas", "=", "(", "train_opt", "[", "'beta1_G'", "]", ",", "train_opt", "[", "'beta2_G'", "]", ")", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_G", ")", "\n", "# D", "\n", "wd_D", "=", "train_opt", "[", "'weight_decay_D'", "]", "if", "train_opt", "[", "'weight_decay_D'", "]", "else", "0", "\n", "self", ".", "optimizer_D", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "netD", ".", "parameters", "(", ")", ",", "lr", "=", "train_opt", "[", "'lr_D'", "]", ",", "\n", "weight_decay", "=", "wd_D", ",", "\n", "betas", "=", "(", "train_opt", "[", "'beta1_D'", "]", ",", "train_opt", "[", "'beta2_D'", "]", ")", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_D", ")", "\n", "\n", "# schedulers", "\n", "if", "train_opt", "[", "'lr_scheme'", "]", "==", "'MultiStepLR'", ":", "\n", "                ", "for", "optimizer", "in", "self", ".", "optimizers", ":", "\n", "                    ", "self", ".", "schedulers", ".", "append", "(", "\n", "lr_scheduler", ".", "MultiStepLR_Restart", "(", "optimizer", ",", "train_opt", "[", "'lr_steps'", "]", ",", "\n", "restarts", "=", "train_opt", "[", "'restarts'", "]", ",", "\n", "weights", "=", "train_opt", "[", "'restart_weights'", "]", ",", "\n", "gamma", "=", "train_opt", "[", "'lr_gamma'", "]", ",", "\n", "clear_state", "=", "train_opt", "[", "'clear_state'", "]", ")", ")", "\n", "", "", "elif", "train_opt", "[", "'lr_scheme'", "]", "==", "'CosineAnnealingLR_Restart'", ":", "\n", "                ", "for", "optimizer", "in", "self", ".", "optimizers", ":", "\n", "                    ", "self", ".", "schedulers", ".", "append", "(", "\n", "lr_scheduler", ".", "CosineAnnealingLR_Restart", "(", "\n", "optimizer", ",", "train_opt", "[", "'T_period'", "]", ",", "eta_min", "=", "train_opt", "[", "'eta_min'", "]", ",", "\n", "restarts", "=", "train_opt", "[", "'restarts'", "]", ",", "weights", "=", "train_opt", "[", "'restart_weights'", "]", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'MultiStepLR learning rate scheme is enough.'", ")", "\n", "\n", "", "self", ".", "log_dict", "=", "OrderedDict", "(", ")", "\n", "\n", "", "self", ".", "print_network", "(", ")", "# print network", "\n", "self", ".", "load", "(", ")", "# load G and D if needed", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.SRGAN_model.SRGANModel.feed_data": [[127, 133], ["data[].to", "data[].to", "input_ref.to"], "methods", ["None"], ["", "def", "feed_data", "(", "self", ",", "data", ",", "need_GT", "=", "True", ")", ":", "\n", "        ", "self", ".", "var_L", "=", "data", "[", "'LQ'", "]", ".", "to", "(", "self", ".", "device", ")", "# LQ", "\n", "if", "need_GT", ":", "\n", "            ", "self", ".", "var_H", "=", "data", "[", "'GT'", "]", ".", "to", "(", "self", ".", "device", ")", "# GT", "\n", "input_ref", "=", "data", "[", "'ref'", "]", "if", "'ref'", "in", "data", "else", "data", "[", "'GT'", "]", "\n", "self", ".", "var_ref", "=", "input_ref", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.SRGAN_model.SRGANModel.optimize_parameters": [[134, 198], ["SRGAN_model.SRGANModel.netD.parameters", "SRGAN_model.SRGANModel.optimizer_G.zero_grad", "SRGAN_model.SRGANModel.netG", "SRGAN_model.SRGANModel.netD.parameters", "SRGAN_model.SRGANModel.optimizer_D.zero_grad", "SRGAN_model.SRGANModel.netD", "SRGAN_model.SRGANModel.netD", "l_d_total.backward", "SRGAN_model.SRGANModel.optimizer_D.step", "SRGAN_model.SRGANModel.item", "SRGAN_model.SRGANModel.item", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "SRGAN_model.SRGANModel.netD", "l_g_total.backward", "SRGAN_model.SRGANModel.optimizer_G.step", "SRGAN_model.SRGANModel.fake_H.detach", "SRGAN_model.SRGANModel.cri_gan", "SRGAN_model.SRGANModel.cri_gan", "l_g_gan.item", "SRGAN_model.SRGANModel.detach", "SRGAN_model.SRGANModel.detach", "SRGAN_model.SRGANModel.netF().detach", "SRGAN_model.SRGANModel.netF", "SRGAN_model.SRGANModel.cri_gan", "SRGAN_model.SRGANModel.cri_gan", "l_g_pix.item", "l_g_fea.item", "SRGAN_model.SRGANModel.cri_pix", "SRGAN_model.SRGANModel.cri_fea", "SRGAN_model.SRGANModel.cri_gan", "SRGAN_model.SRGANModel.netD().detach", "SRGAN_model.SRGANModel.netF", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "SRGAN_model.SRGANModel.netD", "SRGAN_model.SRGANModel.cri_gan", "SRGAN_model.SRGANModel.cri_gan", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.dcn.deform_conv.ModulatedDeformConvFunction.backward", "home.repos.pwc.inspect_result.esw0116_DynaVSR.dcn.deform_conv.ModulatedDeformConvFunction.backward"], ["", "", "def", "optimize_parameters", "(", "self", ",", "step", ")", ":", "\n", "# G", "\n", "        ", "for", "p", "in", "self", ".", "netD", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "False", "\n", "\n", "", "self", ".", "optimizer_G", ".", "zero_grad", "(", ")", "\n", "self", ".", "fake_H", "=", "self", ".", "netG", "(", "self", ".", "var_L", ")", "\n", "\n", "l_g_total", "=", "0", "\n", "if", "step", "%", "self", ".", "D_update_ratio", "==", "0", "and", "step", ">", "self", ".", "D_init_iters", ":", "\n", "            ", "if", "self", ".", "cri_pix", ":", "# pixel loss", "\n", "                ", "l_g_pix", "=", "self", ".", "l_pix_w", "*", "self", ".", "cri_pix", "(", "self", ".", "fake_H", ",", "self", ".", "var_H", ")", "\n", "l_g_total", "+=", "l_g_pix", "\n", "", "if", "self", ".", "cri_fea", ":", "# feature loss", "\n", "                ", "real_fea", "=", "self", ".", "netF", "(", "self", ".", "var_H", ")", ".", "detach", "(", ")", "\n", "fake_fea", "=", "self", ".", "netF", "(", "self", ".", "fake_H", ")", "\n", "l_g_fea", "=", "self", ".", "l_fea_w", "*", "self", ".", "cri_fea", "(", "fake_fea", ",", "real_fea", ")", "\n", "l_g_total", "+=", "l_g_fea", "\n", "\n", "", "pred_g_fake", "=", "self", ".", "netD", "(", "self", ".", "fake_H", ")", "\n", "if", "self", ".", "opt", "[", "'train'", "]", "[", "'gan_type'", "]", "==", "'gan'", ":", "\n", "                ", "l_g_gan", "=", "self", ".", "l_gan_w", "*", "self", ".", "cri_gan", "(", "pred_g_fake", ",", "True", ")", "\n", "", "elif", "self", ".", "opt", "[", "'train'", "]", "[", "'gan_type'", "]", "==", "'ragan'", ":", "\n", "                ", "pred_d_real", "=", "self", ".", "netD", "(", "self", ".", "var_ref", ")", ".", "detach", "(", ")", "\n", "l_g_gan", "=", "self", ".", "l_gan_w", "*", "(", "\n", "self", ".", "cri_gan", "(", "pred_d_real", "-", "torch", ".", "mean", "(", "pred_g_fake", ")", ",", "False", ")", "+", "\n", "self", ".", "cri_gan", "(", "pred_g_fake", "-", "torch", ".", "mean", "(", "pred_d_real", ")", ",", "True", ")", ")", "/", "2", "\n", "", "l_g_total", "+=", "l_g_gan", "\n", "\n", "l_g_total", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_G", ".", "step", "(", ")", "\n", "\n", "# D", "\n", "", "for", "p", "in", "self", ".", "netD", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "True", "\n", "\n", "", "self", ".", "optimizer_D", ".", "zero_grad", "(", ")", "\n", "l_d_total", "=", "0", "\n", "pred_d_real", "=", "self", ".", "netD", "(", "self", ".", "var_ref", ")", "\n", "pred_d_fake", "=", "self", ".", "netD", "(", "self", ".", "fake_H", ".", "detach", "(", ")", ")", "# detach to avoid BP to G", "\n", "if", "self", ".", "opt", "[", "'train'", "]", "[", "'gan_type'", "]", "==", "'gan'", ":", "\n", "            ", "l_d_real", "=", "self", ".", "cri_gan", "(", "pred_d_real", ",", "True", ")", "\n", "l_d_fake", "=", "self", ".", "cri_gan", "(", "pred_d_fake", ",", "False", ")", "\n", "l_d_total", "=", "l_d_real", "+", "l_d_fake", "\n", "", "elif", "self", ".", "opt", "[", "'train'", "]", "[", "'gan_type'", "]", "==", "'ragan'", ":", "\n", "            ", "l_d_real", "=", "self", ".", "cri_gan", "(", "pred_d_real", "-", "torch", ".", "mean", "(", "pred_d_fake", ")", ",", "True", ")", "\n", "l_d_fake", "=", "self", ".", "cri_gan", "(", "pred_d_fake", "-", "torch", ".", "mean", "(", "pred_d_real", ")", ",", "False", ")", "\n", "l_d_total", "=", "(", "l_d_real", "+", "l_d_fake", ")", "/", "2", "\n", "\n", "", "l_d_total", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_D", ".", "step", "(", ")", "\n", "\n", "# set log", "\n", "if", "step", "%", "self", ".", "D_update_ratio", "==", "0", "and", "step", ">", "self", ".", "D_init_iters", ":", "\n", "            ", "if", "self", ".", "cri_pix", ":", "\n", "                ", "self", ".", "log_dict", "[", "'l_g_pix'", "]", "=", "l_g_pix", ".", "item", "(", ")", "\n", "", "if", "self", ".", "cri_fea", ":", "\n", "                ", "self", ".", "log_dict", "[", "'l_g_fea'", "]", "=", "l_g_fea", ".", "item", "(", ")", "\n", "", "self", ".", "log_dict", "[", "'l_g_gan'", "]", "=", "l_g_gan", ".", "item", "(", ")", "\n", "\n", "", "self", ".", "log_dict", "[", "'l_d_real'", "]", "=", "l_d_real", ".", "item", "(", ")", "\n", "self", ".", "log_dict", "[", "'l_d_fake'", "]", "=", "l_d_fake", ".", "item", "(", ")", "\n", "self", ".", "log_dict", "[", "'D_real'", "]", "=", "torch", ".", "mean", "(", "pred_d_real", ".", "detach", "(", ")", ")", "\n", "self", ".", "log_dict", "[", "'D_fake'", "]", "=", "torch", ".", "mean", "(", "pred_d_fake", ".", "detach", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.SRGAN_model.SRGANModel.test": [[199, 204], ["SRGAN_model.SRGANModel.netG.eval", "SRGAN_model.SRGANModel.netG.train", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "SRGAN_model.SRGANModel.netG"], "methods", ["None"], ["", "def", "test", "(", "self", ")", ":", "\n", "        ", "self", ".", "netG", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "fake_H", "=", "self", ".", "netG", "(", "self", ".", "var_L", ")", "\n", "", "self", ".", "netG", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.SRGAN_model.SRGANModel.get_current_log": [[205, 207], ["None"], "methods", ["None"], ["", "def", "get_current_log", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "log_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.SRGAN_model.SRGANModel.get_current_visuals": [[208, 215], ["collections.OrderedDict", "[].float().cpu", "[].float().cpu", "[].float().cpu", "[].float", "[].float", "[].float", "SRGAN_model.SRGANModel.var_L.detach", "SRGAN_model.SRGANModel.fake_H.detach", "SRGAN_model.SRGANModel.var_H.detach"], "methods", ["None"], ["", "def", "get_current_visuals", "(", "self", ",", "need_GT", "=", "True", ")", ":", "\n", "        ", "out_dict", "=", "OrderedDict", "(", ")", "\n", "out_dict", "[", "'LQ'", "]", "=", "self", ".", "var_L", ".", "detach", "(", ")", "[", "0", "]", ".", "float", "(", ")", ".", "cpu", "(", ")", "\n", "out_dict", "[", "'rlt'", "]", "=", "self", ".", "fake_H", ".", "detach", "(", ")", "[", "0", "]", ".", "float", "(", ")", ".", "cpu", "(", ")", "\n", "if", "need_GT", ":", "\n", "            ", "out_dict", "[", "'GT'", "]", "=", "self", ".", "var_H", ".", "detach", "(", ")", "[", "0", "]", ".", "float", "(", ")", ".", "cpu", "(", ")", "\n", "", "return", "out_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.SRGAN_model.SRGANModel.print_network": [[216, 253], ["SRGAN_model.SRGANModel.get_network_description", "isinstance", "isinstance", "logger.info", "logger.info", "SRGAN_model.SRGANModel.get_network_description", "isinstance", "isinstance", "logger.info", "logger.info", "SRGAN_model.SRGANModel.get_network_description", "isinstance", "isinstance", "logger.info", "logger.info"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.get_network_description", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.get_network_description", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.get_network_description"], ["", "def", "print_network", "(", "self", ")", ":", "\n", "# Generator", "\n", "        ", "s", ",", "n", "=", "self", ".", "get_network_description", "(", "self", ".", "netG", ")", "\n", "if", "isinstance", "(", "self", ".", "netG", ",", "nn", ".", "DataParallel", ")", "or", "isinstance", "(", "self", ".", "netG", ",", "DistributedDataParallel", ")", ":", "\n", "            ", "net_struc_str", "=", "'{} - {}'", ".", "format", "(", "self", ".", "netG", ".", "__class__", ".", "__name__", ",", "\n", "self", ".", "netG", ".", "module", ".", "__class__", ".", "__name__", ")", "\n", "", "else", ":", "\n", "            ", "net_struc_str", "=", "'{}'", ".", "format", "(", "self", ".", "netG", ".", "__class__", ".", "__name__", ")", "\n", "", "if", "self", ".", "rank", "<=", "0", ":", "\n", "            ", "logger", ".", "info", "(", "'Network G structure: {}, with parameters: {:,d}'", ".", "format", "(", "net_struc_str", ",", "n", ")", ")", "\n", "logger", ".", "info", "(", "s", ")", "\n", "", "if", "self", ".", "is_train", ":", "\n", "# Discriminator", "\n", "            ", "s", ",", "n", "=", "self", ".", "get_network_description", "(", "self", ".", "netD", ")", "\n", "if", "isinstance", "(", "self", ".", "netD", ",", "nn", ".", "DataParallel", ")", "or", "isinstance", "(", "self", ".", "netD", ",", "\n", "DistributedDataParallel", ")", ":", "\n", "                ", "net_struc_str", "=", "'{} - {}'", ".", "format", "(", "self", ".", "netD", ".", "__class__", ".", "__name__", ",", "\n", "self", ".", "netD", ".", "module", ".", "__class__", ".", "__name__", ")", "\n", "", "else", ":", "\n", "                ", "net_struc_str", "=", "'{}'", ".", "format", "(", "self", ".", "netD", ".", "__class__", ".", "__name__", ")", "\n", "", "if", "self", ".", "rank", "<=", "0", ":", "\n", "                ", "logger", ".", "info", "(", "'Network D structure: {}, with parameters: {:,d}'", ".", "format", "(", "\n", "net_struc_str", ",", "n", ")", ")", "\n", "logger", ".", "info", "(", "s", ")", "\n", "\n", "", "if", "self", ".", "cri_fea", ":", "# F, Perceptual Network", "\n", "                ", "s", ",", "n", "=", "self", ".", "get_network_description", "(", "self", ".", "netF", ")", "\n", "if", "isinstance", "(", "self", ".", "netF", ",", "nn", ".", "DataParallel", ")", "or", "isinstance", "(", "\n", "self", ".", "netF", ",", "DistributedDataParallel", ")", ":", "\n", "                    ", "net_struc_str", "=", "'{} - {}'", ".", "format", "(", "self", ".", "netF", ".", "__class__", ".", "__name__", ",", "\n", "self", ".", "netF", ".", "module", ".", "__class__", ".", "__name__", ")", "\n", "", "else", ":", "\n", "                    ", "net_struc_str", "=", "'{}'", ".", "format", "(", "self", ".", "netF", ".", "__class__", ".", "__name__", ")", "\n", "", "if", "self", ".", "rank", "<=", "0", ":", "\n", "                    ", "logger", ".", "info", "(", "'Network F structure: {}, with parameters: {:,d}'", ".", "format", "(", "\n", "net_struc_str", ",", "n", ")", ")", "\n", "logger", ".", "info", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.SRGAN_model.SRGANModel.load": [[254, 263], ["logger.info", "SRGAN_model.SRGANModel.load_network", "logger.info", "SRGAN_model.SRGANModel.load_network"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.load_network"], ["", "", "", "", "def", "load", "(", "self", ")", ":", "\n", "        ", "load_path_G", "=", "self", ".", "opt", "[", "'path'", "]", "[", "'pretrain_model_G'", "]", "\n", "if", "load_path_G", "is", "not", "None", ":", "\n", "            ", "logger", ".", "info", "(", "'Loading model for G [{:s}] ...'", ".", "format", "(", "load_path_G", ")", ")", "\n", "self", ".", "load_network", "(", "load_path_G", ",", "self", ".", "netG", ",", "self", ".", "opt", "[", "'path'", "]", "[", "'strict_load'", "]", ")", "\n", "", "load_path_D", "=", "self", ".", "opt", "[", "'path'", "]", "[", "'pretrain_model_D'", "]", "\n", "if", "self", ".", "opt", "[", "'is_train'", "]", "and", "load_path_D", "is", "not", "None", ":", "\n", "            ", "logger", ".", "info", "(", "'Loading model for D [{:s}] ...'", ".", "format", "(", "load_path_D", ")", ")", "\n", "self", ".", "load_network", "(", "load_path_D", ",", "self", ".", "netD", ",", "self", ".", "opt", "[", "'path'", "]", "[", "'strict_load'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.SRGAN_model.SRGANModel.save": [[264, 267], ["SRGAN_model.SRGANModel.save_network", "SRGAN_model.SRGANModel.save_network"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.save_network"], ["", "", "def", "save", "(", "self", ",", "iter_step", ")", ":", "\n", "        ", "self", ".", "save_network", "(", "self", ".", "netG", ",", "'G'", ",", "iter_step", ")", "\n", "self", ".", "save_network", "(", "self", ".", "netD", ",", "'D'", ",", "iter_step", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.__init__": [[9, 15], ["torch.device", "torch.device", "torch.device", "torch.device"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "opt", "[", "'gpu_ids'", "]", "is", "not", "None", "else", "'cpu'", ")", "\n", "self", ".", "is_train", "=", "opt", "[", "'is_train'", "]", "\n", "self", ".", "schedulers", "=", "[", "]", "\n", "self", ".", "optimizers", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.feed_data": [[16, 18], ["None"], "methods", ["None"], ["", "def", "feed_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.optimize_parameters": [[19, 21], ["None"], "methods", ["None"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.get_current_visuals": [[22, 24], ["None"], "methods", ["None"], ["", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.get_current_losses": [[25, 27], ["None"], "methods", ["None"], ["", "def", "get_current_losses", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.print_network": [[28, 30], ["None"], "methods", ["None"], ["", "def", "print_network", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.save": [[31, 33], ["None"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "label", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.load": [[34, 36], ["None"], "methods", ["None"], ["", "def", "load", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel._set_lr": [[37, 43], ["zip", "zip"], "methods", ["None"], ["", "def", "_set_lr", "(", "self", ",", "lr_groups_l", ")", ":", "\n", "        ", "\"\"\"Set learning rate for warmup\n        lr_groups_l: list for lr_groups. each for a optimizer\"\"\"", "\n", "for", "optimizer", ",", "lr_groups", "in", "zip", "(", "self", ".", "optimizers", ",", "lr_groups_l", ")", ":", "\n", "            ", "for", "param_group", ",", "lr", "in", "zip", "(", "optimizer", ".", "param_groups", ",", "lr_groups", ")", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel._get_init_lr": [[44, 50], ["init_lr_groups_l.append"], "methods", ["None"], ["", "", "", "def", "_get_init_lr", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get the initial lr, which is set by the scheduler\"\"\"", "\n", "init_lr_groups_l", "=", "[", "]", "\n", "for", "optimizer", "in", "self", ".", "optimizers", ":", "\n", "            ", "init_lr_groups_l", ".", "append", "(", "[", "v", "[", "'initial_lr'", "]", "for", "v", "in", "optimizer", ".", "param_groups", "]", ")", "\n", "", "return", "init_lr_groups_l", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.update_learning_rate": [[51, 64], ["scheduler.step", "base_model.BaseModel._get_init_lr", "base_model.BaseModel._set_lr", "warm_up_lr_l.append"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel._get_init_lr", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel._set_lr"], ["", "def", "update_learning_rate", "(", "self", ",", "cur_iter", ",", "warmup_iter", "=", "-", "1", ")", ":", "\n", "        ", "for", "scheduler", "in", "self", ".", "schedulers", ":", "\n", "            ", "scheduler", ".", "step", "(", ")", "\n", "# set up warm-up learning rate", "\n", "", "if", "cur_iter", "<", "warmup_iter", ":", "\n", "# get initial lr for each group", "\n", "            ", "init_lr_g_l", "=", "self", ".", "_get_init_lr", "(", ")", "\n", "# modify warming-up learning rates", "\n", "warm_up_lr_l", "=", "[", "]", "\n", "for", "init_lr_g", "in", "init_lr_g_l", ":", "\n", "                ", "warm_up_lr_l", ".", "append", "(", "[", "v", "/", "warmup_iter", "*", "cur_iter", "for", "v", "in", "init_lr_g", "]", ")", "\n", "# set learning rate", "\n", "", "self", ".", "_set_lr", "(", "warm_up_lr_l", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.get_current_learning_rate": [[65, 67], ["None"], "methods", ["None"], ["", "", "def", "get_current_learning_rate", "(", "self", ")", ":", "\n", "        ", "return", "[", "param_group", "[", "'lr'", "]", "for", "param_group", "in", "self", ".", "optimizers", "[", "0", "]", ".", "param_groups", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.get_network_description": [[68, 73], ["isinstance", "isinstance", "str", "sum", "map", "network.parameters", "x.numel"], "methods", ["None"], ["", "def", "get_network_description", "(", "self", ",", "network", ")", ":", "\n", "        ", "\"\"\"Get the string and total parameters of the network\"\"\"", "\n", "if", "isinstance", "(", "network", ",", "nn", ".", "DataParallel", ")", "or", "isinstance", "(", "network", ",", "DistributedDataParallel", ")", ":", "\n", "            ", "network", "=", "network", ".", "module", "\n", "", "return", "str", "(", "network", ")", ",", "sum", "(", "map", "(", "lambda", "x", ":", "x", ".", "numel", "(", ")", ",", "network", ".", "parameters", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.save_network": [[74, 83], ["os.path.join", "network.state_dict", "network.state_dict.items", "torch.save", "torch.save", "torch.save", "torch.save", "isinstance", "isinstance", "param.cpu"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.save"], ["", "def", "save_network", "(", "self", ",", "network", ",", "network_label", ",", "iter_label", ")", ":", "\n", "        ", "save_filename", "=", "'{}_{}.pth'", ".", "format", "(", "iter_label", ",", "network_label", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", "[", "'path'", "]", "[", "'models'", "]", ",", "save_filename", ")", "\n", "if", "isinstance", "(", "network", ",", "nn", ".", "DataParallel", ")", "or", "isinstance", "(", "network", ",", "DistributedDataParallel", ")", ":", "\n", "            ", "network", "=", "network", ".", "module", "\n", "", "state_dict", "=", "network", ".", "state_dict", "(", ")", "\n", "for", "key", ",", "param", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "state_dict", "[", "key", "]", "=", "param", ".", "cpu", "(", ")", "\n", "", "torch", ".", "save", "(", "state_dict", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.load_network": [[84, 95], ["torch.load", "torch.load", "torch.load", "torch.load", "collections.OrderedDict", "torch.load.items", "torch.load.items", "network.load_state_dict", "isinstance", "isinstance", "k.startswith"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.load", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.load", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.load", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.load"], ["", "def", "load_network", "(", "self", ",", "load_path", ",", "network", ",", "strict", "=", "True", ")", ":", "\n", "        ", "if", "isinstance", "(", "network", ",", "nn", ".", "DataParallel", ")", "or", "isinstance", "(", "network", ",", "DistributedDataParallel", ")", ":", "\n", "            ", "network", "=", "network", ".", "module", "\n", "", "load_net", "=", "torch", ".", "load", "(", "load_path", ")", "\n", "load_net_clean", "=", "OrderedDict", "(", ")", "# remove unnecessary 'module.'", "\n", "for", "k", ",", "v", "in", "load_net", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", ".", "startswith", "(", "'module.'", ")", ":", "\n", "                ", "load_net_clean", "[", "k", "[", "7", ":", "]", "]", "=", "v", "\n", "", "else", ":", "\n", "                ", "load_net_clean", "[", "k", "]", "=", "v", "\n", "", "", "network", ".", "load_state_dict", "(", "load_net_clean", ",", "strict", "=", "strict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.save_training_state": [[97, 111], ["os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "state[].append", "state[].append", "s.state_dict", "o.state_dict"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.save"], ["", "def", "save_training_state", "(", "self", ",", "epoch", ",", "iter_step", ",", "model_type", "=", "None", ")", ":", "\n", "        ", "\"\"\"Save training state during training, which will be used for resuming\"\"\"", "\n", "state", "=", "{", "'epoch'", ":", "epoch", ",", "'iter'", ":", "iter_step", ",", "'schedulers'", ":", "[", "]", ",", "'optimizers'", ":", "[", "]", "}", "\n", "for", "s", "in", "self", ".", "schedulers", ":", "\n", "            ", "state", "[", "'schedulers'", "]", ".", "append", "(", "s", ".", "state_dict", "(", ")", ")", "\n", "", "for", "o", "in", "self", ".", "optimizers", ":", "\n", "            ", "state", "[", "'optimizers'", "]", ".", "append", "(", "o", ".", "state_dict", "(", ")", ")", "\n", "\n", "", "if", "model_type", "is", "not", "None", ":", "\n", "            ", "save_filename", "=", "'{}_{}.state'", ".", "format", "(", "iter_step", ",", "model_type", ")", "\n", "", "else", ":", "\n", "            ", "save_filename", "=", "'{}.state'", ".", "format", "(", "iter_step", ")", "\n", "", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", "[", "'path'", "]", "[", "'training_state'", "]", ",", "save_filename", ")", "\n", "torch", ".", "save", "(", "state", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.resume_training": [[112, 122], ["enumerate", "enumerate", "len", "len", "len", "len", "base_model.BaseModel.optimizers[].load_state_dict", "base_model.BaseModel.schedulers[].load_state_dict"], "methods", ["None"], ["", "def", "resume_training", "(", "self", ",", "resume_state", ")", ":", "\n", "        ", "\"\"\"Resume the optimizers and schedulers for training\"\"\"", "\n", "resume_optimizers", "=", "resume_state", "[", "'optimizers'", "]", "\n", "resume_schedulers", "=", "resume_state", "[", "'schedulers'", "]", "\n", "assert", "len", "(", "resume_optimizers", ")", "==", "len", "(", "self", ".", "optimizers", ")", ",", "'Wrong lengths of optimizers'", "\n", "assert", "len", "(", "resume_schedulers", ")", "==", "len", "(", "self", ".", "schedulers", ")", ",", "'Wrong lengths of schedulers'", "\n", "for", "i", ",", "o", "in", "enumerate", "(", "resume_optimizers", ")", ":", "\n", "            ", "self", ".", "optimizers", "[", "i", "]", ".", "load_state_dict", "(", "o", ")", "\n", "", "for", "i", ",", "s", "in", "enumerate", "(", "resume_schedulers", ")", ":", "\n", "            ", "self", ".", "schedulers", "[", "i", "]", ".", "load_state_dict", "(", "s", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.RRDBNet_arch.ResidualDenseBlock_5C.__init__": [[9, 22], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "models.initialize_weights"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__", "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.arch_util.initialize_weights"], ["    ", "def", "__init__", "(", "self", ",", "nf", "=", "64", ",", "gc", "=", "32", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "ResidualDenseBlock_5C", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# gc: growth channel, i.e. intermediate channels", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "nf", ",", "gc", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "nf", "+", "gc", ",", "gc", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "nf", "+", "2", "*", "gc", ",", "gc", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "nf", "+", "3", "*", "gc", ",", "gc", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "nf", "+", "4", "*", "gc", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "lrelu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "\n", "# initialization", "\n", "arch_util", ".", "initialize_weights", "(", "[", "self", ".", "conv1", ",", "self", ".", "conv2", ",", "self", ".", "conv3", ",", "self", ".", "conv4", ",", "self", ".", "conv5", "]", ",", "\n", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.RRDBNet_arch.ResidualDenseBlock_5C.forward": [[23, 30], ["RRDBNet_arch.ResidualDenseBlock_5C.lrelu", "RRDBNet_arch.ResidualDenseBlock_5C.lrelu", "RRDBNet_arch.ResidualDenseBlock_5C.lrelu", "RRDBNet_arch.ResidualDenseBlock_5C.lrelu", "RRDBNet_arch.ResidualDenseBlock_5C.conv5", "RRDBNet_arch.ResidualDenseBlock_5C.conv1", "RRDBNet_arch.ResidualDenseBlock_5C.conv2", "RRDBNet_arch.ResidualDenseBlock_5C.conv3", "RRDBNet_arch.ResidualDenseBlock_5C.conv4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "self", ".", "lrelu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x2", "=", "self", ".", "lrelu", "(", "self", ".", "conv2", "(", "torch", ".", "cat", "(", "(", "x", ",", "x1", ")", ",", "1", ")", ")", ")", "\n", "x3", "=", "self", ".", "lrelu", "(", "self", ".", "conv3", "(", "torch", ".", "cat", "(", "(", "x", ",", "x1", ",", "x2", ")", ",", "1", ")", ")", ")", "\n", "x4", "=", "self", ".", "lrelu", "(", "self", ".", "conv4", "(", "torch", ".", "cat", "(", "(", "x", ",", "x1", ",", "x2", ",", "x3", ")", ",", "1", ")", ")", ")", "\n", "x5", "=", "self", ".", "conv5", "(", "torch", ".", "cat", "(", "(", "x", ",", "x1", ",", "x2", ",", "x3", ",", "x4", ")", ",", "1", ")", ")", "\n", "return", "x5", "*", "0.2", "+", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.RRDBNet_arch.RRDB.__init__": [[35, 40], ["torch.Module.__init__", "RRDBNet_arch.ResidualDenseBlock_5C", "RRDBNet_arch.ResidualDenseBlock_5C", "RRDBNet_arch.ResidualDenseBlock_5C"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__"], ["def", "__init__", "(", "self", ",", "nf", ",", "gc", "=", "32", ")", ":", "\n", "        ", "super", "(", "RRDB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "RDB1", "=", "ResidualDenseBlock_5C", "(", "nf", ",", "gc", ")", "\n", "self", ".", "RDB2", "=", "ResidualDenseBlock_5C", "(", "nf", ",", "gc", ")", "\n", "self", ".", "RDB3", "=", "ResidualDenseBlock_5C", "(", "nf", ",", "gc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.RRDBNet_arch.RRDB.forward": [[41, 46], ["RRDBNet_arch.RRDB.RDB1", "RRDBNet_arch.RRDB.RDB2", "RRDBNet_arch.RRDB.RDB3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "RDB1", "(", "x", ")", "\n", "out", "=", "self", ".", "RDB2", "(", "out", ")", "\n", "out", "=", "self", ".", "RDB3", "(", "out", ")", "\n", "return", "out", "*", "0.2", "+", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.RRDBNet_arch.RRDBNet.__init__": [[49, 63], ["torch.Module.__init__", "functools.partial", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "models.make_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__", "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.arch_util.make_layer"], ["    ", "def", "__init__", "(", "self", ",", "in_nc", ",", "out_nc", ",", "nf", ",", "nb", ",", "gc", "=", "32", ")", ":", "\n", "        ", "super", "(", "RRDBNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "RRDB_block_f", "=", "functools", ".", "partial", "(", "RRDB", ",", "nf", "=", "nf", ",", "gc", "=", "gc", ")", "\n", "\n", "self", ".", "conv_first", "=", "nn", ".", "Conv2d", "(", "in_nc", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "RRDB_trunk", "=", "arch_util", ".", "make_layer", "(", "RRDB_block_f", ",", "nb", ")", "\n", "self", ".", "trunk_conv", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "#### upsampling", "\n", "self", ".", "upconv1", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "upconv2", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "HRconv", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "conv_last", "=", "nn", ".", "Conv2d", "(", "nf", ",", "out_nc", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "lrelu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.RRDBNet_arch.RRDBNet.forward": [[64, 74], ["RRDBNet_arch.RRDBNet.conv_first", "RRDBNet_arch.RRDBNet.trunk_conv", "RRDBNet_arch.RRDBNet.lrelu", "RRDBNet_arch.RRDBNet.lrelu", "RRDBNet_arch.RRDBNet.conv_last", "RRDBNet_arch.RRDBNet.RRDB_trunk", "RRDBNet_arch.RRDBNet.upconv1", "RRDBNet_arch.RRDBNet.upconv2", "RRDBNet_arch.RRDBNet.lrelu", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "RRDBNet_arch.RRDBNet.HRconv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "fea", "=", "self", ".", "conv_first", "(", "x", ")", "\n", "trunk", "=", "self", ".", "trunk_conv", "(", "self", ".", "RRDB_trunk", "(", "fea", ")", ")", "\n", "fea", "=", "fea", "+", "trunk", "\n", "\n", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "upconv1", "(", "F", ".", "interpolate", "(", "fea", ",", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", ")", ")", "\n", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "upconv2", "(", "F", ".", "interpolate", "(", "fea", ",", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", ")", ")", "\n", "out", "=", "self", ".", "conv_last", "(", "self", ".", "lrelu", "(", "self", ".", "HRconv", "(", "fea", ")", ")", ")", "\n", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.discriminator_vgg_arch.Discriminator_VGG_128.__init__": [[7, 39], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_nc", ",", "nf", ")", ":", "\n", "        ", "super", "(", "Discriminator_VGG_128", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# [64, 128, 128]", "\n", "self", ".", "conv0_0", "=", "nn", ".", "Conv2d", "(", "in_nc", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "conv0_1", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn0_1", "=", "nn", ".", "BatchNorm2d", "(", "nf", ",", "affine", "=", "True", ")", "\n", "# [64, 64, 64]", "\n", "self", ".", "conv1_0", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", "*", "2", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1_0", "=", "nn", ".", "BatchNorm2d", "(", "nf", "*", "2", ",", "affine", "=", "True", ")", "\n", "self", ".", "conv1_1", "=", "nn", ".", "Conv2d", "(", "nf", "*", "2", ",", "nf", "*", "2", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1_1", "=", "nn", ".", "BatchNorm2d", "(", "nf", "*", "2", ",", "affine", "=", "True", ")", "\n", "# [128, 32, 32]", "\n", "self", ".", "conv2_0", "=", "nn", ".", "Conv2d", "(", "nf", "*", "2", ",", "nf", "*", "4", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2_0", "=", "nn", ".", "BatchNorm2d", "(", "nf", "*", "4", ",", "affine", "=", "True", ")", "\n", "self", ".", "conv2_1", "=", "nn", ".", "Conv2d", "(", "nf", "*", "4", ",", "nf", "*", "4", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2_1", "=", "nn", ".", "BatchNorm2d", "(", "nf", "*", "4", ",", "affine", "=", "True", ")", "\n", "# [256, 16, 16]", "\n", "self", ".", "conv3_0", "=", "nn", ".", "Conv2d", "(", "nf", "*", "4", ",", "nf", "*", "8", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3_0", "=", "nn", ".", "BatchNorm2d", "(", "nf", "*", "8", ",", "affine", "=", "True", ")", "\n", "self", ".", "conv3_1", "=", "nn", ".", "Conv2d", "(", "nf", "*", "8", ",", "nf", "*", "8", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3_1", "=", "nn", ".", "BatchNorm2d", "(", "nf", "*", "8", ",", "affine", "=", "True", ")", "\n", "# [512, 8, 8]", "\n", "self", ".", "conv4_0", "=", "nn", ".", "Conv2d", "(", "nf", "*", "8", ",", "nf", "*", "8", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn4_0", "=", "nn", ".", "BatchNorm2d", "(", "nf", "*", "8", ",", "affine", "=", "True", ")", "\n", "self", ".", "conv4_1", "=", "nn", ".", "Conv2d", "(", "nf", "*", "8", ",", "nf", "*", "8", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn4_1", "=", "nn", ".", "BatchNorm2d", "(", "nf", "*", "8", ",", "affine", "=", "True", ")", "\n", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "512", "*", "4", "*", "4", ",", "100", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "100", ",", "1", ")", "\n", "\n", "# activation function", "\n", "self", ".", "lrelu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.discriminator_vgg_arch.Discriminator_VGG_128.forward": [[40, 60], ["discriminator_vgg_arch.Discriminator_VGG_128.lrelu", "discriminator_vgg_arch.Discriminator_VGG_128.lrelu", "discriminator_vgg_arch.Discriminator_VGG_128.lrelu", "discriminator_vgg_arch.Discriminator_VGG_128.lrelu", "discriminator_vgg_arch.Discriminator_VGG_128.lrelu", "discriminator_vgg_arch.Discriminator_VGG_128.lrelu", "discriminator_vgg_arch.Discriminator_VGG_128.lrelu", "discriminator_vgg_arch.Discriminator_VGG_128.lrelu", "discriminator_vgg_arch.Discriminator_VGG_128.lrelu", "discriminator_vgg_arch.Discriminator_VGG_128.lrelu", "discriminator_vgg_arch.Discriminator_VGG_128.view", "discriminator_vgg_arch.Discriminator_VGG_128.lrelu", "discriminator_vgg_arch.Discriminator_VGG_128.linear2", "discriminator_vgg_arch.Discriminator_VGG_128.conv0_0", "discriminator_vgg_arch.Discriminator_VGG_128.bn0_1", "discriminator_vgg_arch.Discriminator_VGG_128.bn1_0", "discriminator_vgg_arch.Discriminator_VGG_128.bn1_1", "discriminator_vgg_arch.Discriminator_VGG_128.bn2_0", "discriminator_vgg_arch.Discriminator_VGG_128.bn2_1", "discriminator_vgg_arch.Discriminator_VGG_128.bn3_0", "discriminator_vgg_arch.Discriminator_VGG_128.bn3_1", "discriminator_vgg_arch.Discriminator_VGG_128.bn4_0", "discriminator_vgg_arch.Discriminator_VGG_128.bn4_1", "discriminator_vgg_arch.Discriminator_VGG_128.size", "discriminator_vgg_arch.Discriminator_VGG_128.linear1", "discriminator_vgg_arch.Discriminator_VGG_128.conv0_1", "discriminator_vgg_arch.Discriminator_VGG_128.conv1_0", "discriminator_vgg_arch.Discriminator_VGG_128.conv1_1", "discriminator_vgg_arch.Discriminator_VGG_128.conv2_0", "discriminator_vgg_arch.Discriminator_VGG_128.conv2_1", "discriminator_vgg_arch.Discriminator_VGG_128.conv3_0", "discriminator_vgg_arch.Discriminator_VGG_128.conv3_1", "discriminator_vgg_arch.Discriminator_VGG_128.conv4_0", "discriminator_vgg_arch.Discriminator_VGG_128.conv4_1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "conv0_0", "(", "x", ")", ")", "\n", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "bn0_1", "(", "self", ".", "conv0_1", "(", "fea", ")", ")", ")", "\n", "\n", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "bn1_0", "(", "self", ".", "conv1_0", "(", "fea", ")", ")", ")", "\n", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "bn1_1", "(", "self", ".", "conv1_1", "(", "fea", ")", ")", ")", "\n", "\n", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "bn2_0", "(", "self", ".", "conv2_0", "(", "fea", ")", ")", ")", "\n", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "bn2_1", "(", "self", ".", "conv2_1", "(", "fea", ")", ")", ")", "\n", "\n", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "bn3_0", "(", "self", ".", "conv3_0", "(", "fea", ")", ")", ")", "\n", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "bn3_1", "(", "self", ".", "conv3_1", "(", "fea", ")", ")", ")", "\n", "\n", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "bn4_0", "(", "self", ".", "conv4_0", "(", "fea", ")", ")", ")", "\n", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "bn4_1", "(", "self", ".", "conv4_1", "(", "fea", ")", ")", ")", "\n", "\n", "fea", "=", "fea", ".", "view", "(", "fea", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "linear1", "(", "fea", ")", ")", "\n", "out", "=", "self", ".", "linear2", "(", "fea", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.discriminator_vgg_arch.VGGFeatureExtractor.__init__": [[63, 82], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.Module.__init__", "torch.Sequential", "torch.Sequential", "discriminator_vgg_arch.VGGFeatureExtractor.features.named_parameters", "torchvision.models.vgg19_bn", "torchvision.models.vgg19", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "discriminator_vgg_arch.VGGFeatureExtractor.register_buffer", "discriminator_vgg_arch.VGGFeatureExtractor.register_buffer", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "list", "torchvision.models.vgg19.features.children", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "feature_layer", "=", "34", ",", "use_bn", "=", "False", ",", "use_input_norm", "=", "True", ",", "\n", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", ":", "\n", "        ", "super", "(", "VGGFeatureExtractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_input_norm", "=", "use_input_norm", "\n", "if", "use_bn", ":", "\n", "            ", "model", "=", "torchvision", ".", "models", ".", "vgg19_bn", "(", "pretrained", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "torchvision", ".", "models", ".", "vgg19", "(", "pretrained", "=", "True", ")", "\n", "", "if", "self", ".", "use_input_norm", ":", "\n", "            ", "mean", "=", "torch", ".", "Tensor", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", ".", "to", "(", "device", ")", "\n", "# [0.485 - 1, 0.456 - 1, 0.406 - 1] if input in range [-1, 1]", "\n", "std", "=", "torch", ".", "Tensor", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", ".", "to", "(", "device", ")", "\n", "# [0.229 * 2, 0.224 * 2, 0.225 * 2] if input in range [-1, 1]", "\n", "self", ".", "register_buffer", "(", "'mean'", ",", "mean", ")", "\n", "self", ".", "register_buffer", "(", "'std'", ",", "std", ")", "\n", "", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "model", ".", "features", ".", "children", "(", ")", ")", "[", ":", "(", "feature_layer", "+", "1", ")", "]", ")", "\n", "# No need to BP to variable", "\n", "for", "k", ",", "v", "in", "self", ".", "features", ".", "named_parameters", "(", ")", ":", "\n", "            ", "v", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.discriminator_vgg_arch.VGGFeatureExtractor.forward": [[83, 89], ["discriminator_vgg_arch.VGGFeatureExtractor.features"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# Assume input range is [0, 1]", "\n", "        ", "if", "self", ".", "use_input_norm", ":", "\n", "            ", "x", "=", "(", "x", "-", "self", ".", "mean", ")", "/", "self", ".", "std", "\n", "", "output", "=", "self", ".", "features", "(", "x", ")", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.TOF_arch.SpyNet_Block.__init__": [[28, 41], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SpyNet_Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "8", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "7", ",", "stride", "=", "1", ",", "padding", "=", "3", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "1", ",", "padding", "=", "3", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "7", ",", "stride", "=", "1", ",", "padding", "=", "3", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "16", ",", "kernel_size", "=", "7", ",", "stride", "=", "1", ",", "padding", "=", "3", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "16", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "16", ",", "out_channels", "=", "2", ",", "kernel_size", "=", "7", ",", "stride", "=", "1", ",", "padding", "=", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.TOF_arch.SpyNet_Block.forward": [[42, 48], ["TOF_arch.SpyNet_Block.block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''\n        input: x: [ref im, nbr im, initial flow] - (B, 8, H, W)\n        output: estimated flow - (B, 2, H, W)\n        '''", "\n", "return", "self", ".", "block", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.TOF_arch.SpyNet.__init__": [[54, 58], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "TOF_arch.SpyNet_Block", "range"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SpyNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "SpyNet_Block", "(", ")", "for", "_", "in", "range", "(", "4", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.TOF_arch.SpyNet.forward": [[59, 91], ["ref.size", "range", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "range", "ref.insert", "nbr.insert", "torch.functional.avg_pool2d", "torch.functional.avg_pool2d", "torch.functional.avg_pool2d", "torch.functional.avg_pool2d", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.functional.interpolate", "torch.functional.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "arch_util.flow_warp", "flow_up.permute"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.arch_util.flow_warp"], ["", "def", "forward", "(", "self", ",", "ref", ",", "nbr", ")", ":", "\n", "        ", "'''Estimating optical flow in coarse level, upsample, and estimate in fine level\n        input: ref: reference image - [B, 3, H, W]\n               nbr: the neighboring image to be warped - [B, 3, H, W]\n        output: estimated optical flow - [B, 2, H, W]\n        '''", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "ref", ".", "size", "(", ")", "\n", "ref", "=", "[", "ref", "]", "\n", "nbr", "=", "[", "nbr", "]", "\n", "\n", "for", "_", "in", "range", "(", "3", ")", ":", "\n", "            ", "ref", ".", "insert", "(", "\n", "0", ",", "\n", "nn", ".", "functional", ".", "avg_pool2d", "(", "input", "=", "ref", "[", "0", "]", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "\n", "count_include_pad", "=", "False", ")", ")", "\n", "nbr", ".", "insert", "(", "\n", "0", ",", "\n", "nn", ".", "functional", ".", "avg_pool2d", "(", "input", "=", "nbr", "[", "0", "]", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "\n", "count_include_pad", "=", "False", ")", ")", "\n", "\n", "", "flow", "=", "torch", ".", "zeros", "(", "B", ",", "2", ",", "H", "//", "16", ",", "W", "//", "16", ")", ".", "type_as", "(", "ref", "[", "0", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "'''\n            flow_up = nn.functional.interpolate(input=flow, scale_factor=2, mode='bilinear',\n                                                align_corners=True) * 2.0\n            '''", "\n", "flow_up", "=", "nn", ".", "functional", ".", "interpolate", "(", "input", "=", "flow", ",", "size", "=", "nbr", "[", "i", "]", ".", "shape", "[", "-", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "True", ")", "*", "2.0", "\n", "flow", "=", "flow_up", "+", "self", ".", "blocks", "[", "i", "]", "(", "torch", ".", "cat", "(", "\n", "[", "ref", "[", "i", "]", ",", "flow_warp", "(", "nbr", "[", "i", "]", ",", "flow_up", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", ",", "flow_up", "]", ",", "1", ")", ")", "\n", "", "return", "flow", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.TOF_arch.TOFlow.__init__": [[94, 107], ["torch.Module.__init__", "TOF_arch.SpyNet", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "adapt_official", "=", "False", ")", ":", "\n", "        ", "super", "(", "TOFlow", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "SpyNet", "=", "SpyNet", "(", ")", "\n", "\n", "self", ".", "conv_3x7_64_9x9", "=", "nn", ".", "Conv2d", "(", "3", "*", "7", ",", "64", ",", "9", ",", "1", ",", "4", ")", "\n", "self", ".", "conv_64_64_9x9", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "9", ",", "1", ",", "4", ")", "\n", "self", ".", "conv_64_64_1x1", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "1", ")", "\n", "self", ".", "conv_64_3_1x1", "=", "nn", ".", "Conv2d", "(", "64", ",", "3", ",", "1", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "adapt_official", "=", "adapt_official", "# True if using translated official weights else False", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.TOF_arch.TOFlow.forward": [[108, 141], ["TOF_arch.TOFlow.size", "normalize().view", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack.view", "torch.stack.view", "TOF_arch.TOFlow.relu", "TOF_arch.TOFlow.relu", "TOF_arch.TOFlow.relu", "TOF_arch.denormalize", "TOF_arch.TOFlow.conv_3x7_64_9x9", "TOF_arch.TOFlow.conv_64_64_9x9", "TOF_arch.TOFlow.conv_64_64_1x1", "TOF_arch.TOFlow.conv_64_3_1x1", "TOF_arch.normalize", "torch.stack.append", "torch.stack.append", "TOF_arch.TOFlow.SpyNet().permute", "torch.stack.append", "torch.stack.append", "TOF_arch.TOFlow.view", "arch_util.flow_warp", "TOF_arch.TOFlow.SpyNet"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.TOF_arch.denormalize", "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.TOF_arch.normalize", "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.arch_util.flow_warp"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        input: x: input frames - [B, 7, 3, H, W]\n        output: SR reference frame - [B, 3, H, W]\n        \"\"\"", "\n", "\n", "B", ",", "T", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "normalize", "(", "x", ".", "view", "(", "-", "1", ",", "C", ",", "H", ",", "W", ")", ")", ".", "view", "(", "B", ",", "T", ",", "C", ",", "H", ",", "W", ")", "\n", "\n", "ref_idx", "=", "3", "\n", "x_ref", "=", "x", "[", ":", ",", "ref_idx", ",", ":", ",", ":", ",", ":", "]", "\n", "# In the official torch code, the 0-th frame is the reference frame", "\n", "if", "self", ".", "adapt_official", ":", "\n", "            ", "x", "=", "x", "[", ":", ",", "[", "3", ",", "0", ",", "1", ",", "2", ",", "4", ",", "5", ",", "6", "]", ",", ":", ",", ":", ",", ":", "]", "\n", "ref_idx", "=", "0", "\n", "\n", "", "x_warped", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "7", ")", ":", "\n", "            ", "if", "i", "==", "ref_idx", ":", "\n", "                ", "x_warped", ".", "append", "(", "x_ref", ")", "\n", "", "else", ":", "\n", "                ", "x_nbr", "=", "x", "[", ":", ",", "i", ",", ":", ",", ":", ",", ":", "]", "\n", "flow", "=", "self", ".", "SpyNet", "(", "x_ref", ",", "x_nbr", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "x_warped", ".", "append", "(", "flow_warp", "(", "x_nbr", ",", "flow", ")", ")", "\n", "", "", "x_warped", "=", "torch", ".", "stack", "(", "x_warped", ",", "dim", "=", "1", ")", "\n", "\n", "x", "=", "x_warped", ".", "view", "(", "B", ",", "-", "1", ",", "H", ",", "W", ")", "\n", "x", "=", "self", ".", "relu", "(", "self", ".", "conv_3x7_64_9x9", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "relu", "(", "self", ".", "conv_64_64_9x9", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "relu", "(", "self", ".", "conv_64_64_1x1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "conv_64_3_1x1", "(", "x", ")", "+", "x_ref", "\n", "\n", "return", "denormalize", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.TOF_arch.normalize": [[13, 17], ["torch.Tensor().view().type_as", "torch.Tensor().view().type_as", "torch.Tensor().view().type_as", "torch.Tensor().view().type_as", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "function", ["None"], ["def", "normalize", "(", "x", ")", ":", "\n", "    ", "mean", "=", "torch", ".", "Tensor", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", ".", "type_as", "(", "x", ")", "\n", "std", "=", "torch", ".", "Tensor", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", ".", "type_as", "(", "x", ")", "\n", "return", "(", "x", "-", "mean", ")", "/", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.TOF_arch.denormalize": [[19, 23], ["torch.Tensor().view().type_as", "torch.Tensor().view().type_as", "torch.Tensor().view().type_as", "torch.Tensor().view().type_as", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "function", ["None"], ["", "def", "denormalize", "(", "x", ")", ":", "\n", "    ", "mean", "=", "torch", ".", "Tensor", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", ".", "type_as", "(", "x", ")", "\n", "std", "=", "torch", ".", "Tensor", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", ".", "type_as", "(", "x", ")", "\n", "return", "x", "*", "std", "+", "mean", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.DUF_arch.DenseBlock.__init__": [[36, 58], ["torch.Module.__init__", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__"], ["def", "__init__", "(", "self", ",", "nf", "=", "64", ",", "ng", "=", "32", ",", "t_reduce", "=", "False", ")", ":", "\n", "        ", "super", "(", "DenseBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "t_reduce", "=", "t_reduce", "\n", "if", "self", ".", "t_reduce", ":", "\n", "            ", "pad", "=", "(", "0", ",", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "pad", "=", "(", "1", ",", "1", ",", "1", ")", "\n", "", "self", ".", "bn3d_1", "=", "nn", ".", "BatchNorm3d", "(", "nf", ",", "eps", "=", "1e-3", ",", "momentum", "=", "1e-3", ")", "\n", "self", ".", "conv3d_1", "=", "nn", ".", "Conv3d", "(", "nf", ",", "nf", ",", "(", "1", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ",", "bias", "=", "True", ")", "\n", "self", ".", "bn3d_2", "=", "nn", ".", "BatchNorm3d", "(", "nf", ",", "eps", "=", "1e-3", ",", "momentum", "=", "1e-3", ")", "\n", "self", ".", "conv3d_2", "=", "nn", ".", "Conv3d", "(", "nf", ",", "ng", ",", "(", "3", ",", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "padding", "=", "pad", ",", "bias", "=", "True", ")", "\n", "self", ".", "bn3d_3", "=", "nn", ".", "BatchNorm3d", "(", "nf", "+", "ng", ",", "eps", "=", "1e-3", ",", "momentum", "=", "1e-3", ")", "\n", "self", ".", "conv3d_3", "=", "nn", ".", "Conv3d", "(", "nf", "+", "ng", ",", "nf", "+", "ng", ",", "(", "1", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ",", "\n", "bias", "=", "True", ")", "\n", "self", ".", "bn3d_4", "=", "nn", ".", "BatchNorm3d", "(", "nf", "+", "ng", ",", "eps", "=", "1e-3", ",", "momentum", "=", "1e-3", ")", "\n", "self", ".", "conv3d_4", "=", "nn", ".", "Conv3d", "(", "nf", "+", "ng", ",", "ng", ",", "(", "3", ",", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "padding", "=", "pad", ",", "bias", "=", "True", ")", "\n", "self", ".", "bn3d_5", "=", "nn", ".", "BatchNorm3d", "(", "nf", "+", "2", "*", "ng", ",", "eps", "=", "1e-3", ",", "momentum", "=", "1e-3", ")", "\n", "self", ".", "conv3d_5", "=", "nn", ".", "Conv3d", "(", "nf", "+", "2", "*", "ng", ",", "nf", "+", "2", "*", "ng", ",", "(", "1", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ",", "bias", "=", "True", ")", "\n", "self", ".", "bn3d_6", "=", "nn", ".", "BatchNorm3d", "(", "nf", "+", "2", "*", "ng", ",", "eps", "=", "1e-3", ",", "momentum", "=", "1e-3", ")", "\n", "self", ".", "conv3d_6", "=", "nn", ".", "Conv3d", "(", "nf", "+", "2", "*", "ng", ",", "ng", ",", "(", "3", ",", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "padding", "=", "pad", ",", "\n", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.DUF_arch.DenseBlock.forward": [[59, 85], ["DUF_arch.DenseBlock.conv3d_1", "DUF_arch.DenseBlock.conv3d_2", "DUF_arch.DenseBlock.conv3d_3", "DUF_arch.DenseBlock.conv3d_4", "DUF_arch.DenseBlock.conv3d_5", "DUF_arch.DenseBlock.conv3d_6", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "DUF_arch.DenseBlock.bn3d_1", "DUF_arch.DenseBlock.bn3d_2", "DUF_arch.DenseBlock.bn3d_3", "DUF_arch.DenseBlock.bn3d_4", "DUF_arch.DenseBlock.bn3d_5", "DUF_arch.DenseBlock.bn3d_6"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''x: [B, C, T, H, W]\n        C: nf -> nf + 3 * ng\n        T: 1) 7 -> 7 (t_reduce=False);\n           2) 7 -> 7 - 2 * 3 = 1 (t_reduce=True)'''", "\n", "x1", "=", "self", ".", "conv3d_1", "(", "F", ".", "relu", "(", "self", ".", "bn3d_1", "(", "x", ")", ",", "inplace", "=", "True", ")", ")", "\n", "x1", "=", "self", ".", "conv3d_2", "(", "F", ".", "relu", "(", "self", ".", "bn3d_2", "(", "x1", ")", ",", "inplace", "=", "True", ")", ")", "\n", "if", "self", ".", "t_reduce", ":", "\n", "            ", "x1", "=", "torch", ".", "cat", "(", "(", "x", "[", ":", ",", ":", ",", "1", ":", "-", "1", ",", ":", ",", ":", "]", ",", "x1", ")", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "x1", "=", "torch", ".", "cat", "(", "(", "x", ",", "x1", ")", ",", "1", ")", "\n", "\n", "", "x2", "=", "self", ".", "conv3d_3", "(", "F", ".", "relu", "(", "self", ".", "bn3d_3", "(", "x1", ")", ",", "inplace", "=", "True", ")", ")", "\n", "x2", "=", "self", ".", "conv3d_4", "(", "F", ".", "relu", "(", "self", ".", "bn3d_4", "(", "x2", ")", ",", "inplace", "=", "True", ")", ")", "\n", "if", "self", ".", "t_reduce", ":", "\n", "            ", "x2", "=", "torch", ".", "cat", "(", "(", "x1", "[", ":", ",", ":", ",", "1", ":", "-", "1", ",", ":", ",", ":", "]", ",", "x2", ")", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "x2", "=", "torch", ".", "cat", "(", "(", "x1", ",", "x2", ")", ",", "1", ")", "\n", "\n", "", "x3", "=", "self", ".", "conv3d_5", "(", "F", ".", "relu", "(", "self", ".", "bn3d_5", "(", "x2", ")", ",", "inplace", "=", "True", ")", ")", "\n", "x3", "=", "self", ".", "conv3d_6", "(", "F", ".", "relu", "(", "self", ".", "bn3d_6", "(", "x3", ")", ",", "inplace", "=", "True", ")", ")", "\n", "if", "self", ".", "t_reduce", ":", "\n", "            ", "x3", "=", "torch", ".", "cat", "(", "(", "x2", "[", ":", ",", ":", ",", "1", ":", "-", "1", ",", ":", ",", ":", "]", ",", "x3", ")", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "x3", "=", "torch", ".", "cat", "(", "(", "x2", ",", "x3", ")", ",", "1", ")", "\n", "", "return", "x3", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.DUF_arch.DynamicUpsamplingFilter_3C.__init__": [[91, 100], ["torch.Module.__init__", "numpy.prod", "numpy.reshape", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "numpy.eye", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__"], ["def", "__init__", "(", "self", ",", "filter_size", "=", "(", "1", ",", "5", ",", "5", ")", ")", ":", "\n", "        ", "super", "(", "DynamicUpsamplingFilter_3C", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# generate a local expansion filter, used similar to im2col", "\n", "nF", "=", "np", ".", "prod", "(", "filter_size", ")", "\n", "expand_filter_np", "=", "np", ".", "reshape", "(", "np", ".", "eye", "(", "nF", ",", "nF", ")", ",", "\n", "(", "nF", ",", "filter_size", "[", "0", "]", ",", "filter_size", "[", "1", "]", ",", "filter_size", "[", "2", "]", ")", ")", "\n", "expand_filter", "=", "torch", ".", "from_numpy", "(", "expand_filter_np", ")", ".", "float", "(", ")", "\n", "self", ".", "expand_filter", "=", "torch", ".", "cat", "(", "(", "expand_filter", ",", "expand_filter", ",", "expand_filter", ")", ",", "\n", "0", ")", "# [75, 1, 5, 5]", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.DUF_arch.DynamicUpsamplingFilter_3C.forward": [[101, 116], ["filters.permute.permute.size", "torch.conv2d", "torch.conv2d", "torch.conv2d", "input_expand.view().permute.view().permute.view().permute", "filters.permute.permute.permute", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul.permute().view", "torch.matmul.permute().view", "torch.matmul.permute().view", "DUF_arch.DynamicUpsamplingFilter_3C.expand_filter.type_as", "input_expand.view().permute.view().permute.view", "torch.matmul.permute", "torch.matmul.permute", "torch.matmul.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "filters", ")", ":", "\n", "        ", "'''x: input image, [B, 3, H, W]\n        filters: generate dynamic filters, [B, F, R, H, W], e.g., [B, 25, 16, H, W]\n            F: prod of filter kernel size, e.g., 5*5 = 25\n            R: used for upsampling, similar to pixel shuffle, e.g., 4*4 = 16 for x4\n        Return: filtered image, [B, 3*R, H, W]\n        '''", "\n", "B", ",", "nF", ",", "R", ",", "H", ",", "W", "=", "filters", ".", "size", "(", ")", "\n", "# using group convolution", "\n", "input_expand", "=", "F", ".", "conv2d", "(", "x", ",", "self", ".", "expand_filter", ".", "type_as", "(", "x", ")", ",", "padding", "=", "2", ",", "\n", "groups", "=", "3", ")", "# [B, 75, H, W] similar to im2col", "\n", "input_expand", "=", "input_expand", ".", "view", "(", "B", ",", "3", ",", "nF", ",", "H", ",", "W", ")", ".", "permute", "(", "0", ",", "3", ",", "4", ",", "1", ",", "2", ")", "# [B, H, W, 3, 25]", "\n", "filters", "=", "filters", ".", "permute", "(", "0", ",", "3", ",", "4", ",", "1", ",", "2", ")", "# [B, H, W, 25, 16]", "\n", "out", "=", "torch", ".", "matmul", "(", "input_expand", ",", "filters", ")", "# [B, H, W, 3, 16]", "\n", "return", "out", ".", "permute", "(", "0", ",", "3", ",", "4", ",", "1", ",", "2", ")", ".", "view", "(", "B", ",", "3", "*", "R", ",", "H", ",", "W", ")", "# [B, 3*16, H, W]", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.DUF_arch.DUF_16L.__init__": [[121, 144], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "DUF_arch.DenseBlock", "DUF_arch.DenseBlock", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "DUF_arch.DynamicUpsamplingFilter_3C"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__"], ["def", "__init__", "(", "self", ",", "scale", "=", "4", ",", "adapt_official", "=", "False", ")", ":", "\n", "        ", "super", "(", "DUF_16L", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv3d_1", "=", "nn", ".", "Conv3d", "(", "3", ",", "64", ",", "(", "1", ",", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "1", ",", "1", ")", ",", "bias", "=", "True", ")", "\n", "self", ".", "dense_block_1", "=", "DenseBlock", "(", "64", ",", "64", "//", "2", ",", "t_reduce", "=", "False", ")", "# 64 + 32 * 3 = 160, T = 7", "\n", "self", ".", "dense_block_2", "=", "DenseBlock", "(", "160", ",", "64", "//", "2", ",", "t_reduce", "=", "True", ")", "# 160 + 32 * 3 = 256, T = 1", "\n", "self", ".", "bn3d_2", "=", "nn", ".", "BatchNorm3d", "(", "256", ",", "eps", "=", "1e-3", ",", "momentum", "=", "1e-3", ")", "\n", "self", ".", "conv3d_2", "=", "nn", ".", "Conv3d", "(", "256", ",", "256", ",", "(", "1", ",", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "1", ",", "1", ")", ",", "\n", "bias", "=", "True", ")", "\n", "\n", "self", ".", "conv3d_r1", "=", "nn", ".", "Conv3d", "(", "256", ",", "256", ",", "(", "1", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ",", "\n", "bias", "=", "True", ")", "\n", "self", ".", "conv3d_r2", "=", "nn", ".", "Conv3d", "(", "256", ",", "3", "*", "(", "scale", "**", "2", ")", ",", "(", "1", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "conv3d_f1", "=", "nn", ".", "Conv3d", "(", "256", ",", "512", ",", "(", "1", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ",", "\n", "bias", "=", "True", ")", "\n", "self", ".", "conv3d_f2", "=", "nn", ".", "Conv3d", "(", "512", ",", "1", "*", "5", "*", "5", "*", "(", "scale", "**", "2", ")", ",", "(", "1", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "dynamic_filter", "=", "DynamicUpsamplingFilter_3C", "(", "(", "1", ",", "5", ",", "5", ")", ")", "\n", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "adapt_official", "=", "adapt_official", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.DUF_arch.DUF_16L.forward": [[145, 178], ["torch.relu.size", "torch.relu.permute", "DUF_arch.DUF_16L.conv3d_1", "DUF_arch.DUF_16L.dense_block_1", "DUF_arch.DUF_16L.dense_block_2", "torch.relu", "torch.relu", "torch.relu", "DUF_arch.DUF_16L.conv3d_r2", "DUF_arch.DUF_16L.conv3d_f2", "torch.softmax", "torch.softmax", "torch.softmax", "DUF_arch.DUF_16L.dynamic_filter", "DUF_arch.DUF_16L.squeeze_", "torch.pixel_shuffle", "torch.pixel_shuffle", "torch.pixel_shuffle", "DUF_arch.DUF_16L.conv3d_2", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.softmax.view", "DUF_arch.adapt_official", "torch.relu", "torch.relu", "torch.relu", "DUF_arch.DUF_16L.conv3d_r1", "DUF_arch.DUF_16L.conv3d_f1", "DUF_arch.DUF_16L.bn3d_2"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.DUF_arch.adapt_official"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''\n        x: [B, T, C, H, W], T = 7. reshape to [B, C, T, H, W] for Conv3D\n        Generate filters and image residual:\n        Fx: [B, 25, 16, H, W] for DynamicUpsamplingFilter_3C\n        Rx: [B, 3*16, 1, H, W]\n        '''", "\n", "B", ",", "T", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", "# [B, C, T, H, W] for Conv3D", "\n", "x_center", "=", "x", "[", ":", ",", ":", ",", "T", "//", "2", ",", ":", ",", ":", "]", "\n", "\n", "x", "=", "self", ".", "conv3d_1", "(", "x", ")", "\n", "x", "=", "self", ".", "dense_block_1", "(", "x", ")", "\n", "x", "=", "self", ".", "dense_block_2", "(", "x", ")", "# reduce T to 1", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv3d_2", "(", "F", ".", "relu", "(", "self", ".", "bn3d_2", "(", "x", ")", ",", "inplace", "=", "True", ")", ")", ",", "inplace", "=", "True", ")", "\n", "\n", "# image residual", "\n", "Rx", "=", "self", ".", "conv3d_r2", "(", "F", ".", "relu", "(", "self", ".", "conv3d_r1", "(", "x", ")", ",", "inplace", "=", "True", ")", ")", "# [B, 3*16, 1, H, W]", "\n", "\n", "# filter", "\n", "Fx", "=", "self", ".", "conv3d_f2", "(", "F", ".", "relu", "(", "self", ".", "conv3d_f1", "(", "x", ")", ",", "inplace", "=", "True", ")", ")", "# [B, 25*16, 1, H, W]", "\n", "Fx", "=", "F", ".", "softmax", "(", "Fx", ".", "view", "(", "B", ",", "25", ",", "self", ".", "scale", "**", "2", ",", "H", ",", "W", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# Adapt to official model weights", "\n", "if", "self", ".", "adapt_official", ":", "\n", "            ", "adapt_official", "(", "Rx", ",", "scale", "=", "self", ".", "scale", ")", "\n", "\n", "# dynamic filter", "\n", "", "out", "=", "self", ".", "dynamic_filter", "(", "x_center", ",", "Fx", ")", "# [B, 3*R, H, W]", "\n", "out", "+=", "Rx", ".", "squeeze_", "(", "2", ")", "\n", "out", "=", "F", ".", "pixel_shuffle", "(", "out", ",", "self", ".", "scale", ")", "# [B, 3, H, W]", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.DUF_arch.DenseBlock_28L.__init__": [[184, 202], ["torch.Module.__init__", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "dense_block_l.append", "dense_block_l.append", "dense_block_l.append", "dense_block_l.append", "dense_block_l.append", "dense_block_l.append", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__"], ["def", "__init__", "(", "self", ",", "nf", "=", "64", ",", "ng", "=", "16", ")", ":", "\n", "        ", "super", "(", "DenseBlock_28L", ",", "self", ")", ".", "__init__", "(", ")", "\n", "pad", "=", "(", "1", ",", "1", ",", "1", ")", "\n", "\n", "dense_block_l", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "9", ")", ":", "\n", "            ", "dense_block_l", ".", "append", "(", "nn", ".", "BatchNorm3d", "(", "nf", "+", "i", "*", "ng", ",", "eps", "=", "1e-3", ",", "momentum", "=", "1e-3", ")", ")", "\n", "dense_block_l", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "dense_block_l", ".", "append", "(", "\n", "nn", ".", "Conv3d", "(", "nf", "+", "i", "*", "ng", ",", "nf", "+", "i", "*", "ng", ",", "(", "1", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ",", "\n", "bias", "=", "True", ")", ")", "\n", "\n", "dense_block_l", ".", "append", "(", "nn", ".", "BatchNorm3d", "(", "nf", "+", "i", "*", "ng", ",", "eps", "=", "1e-3", ",", "momentum", "=", "1e-3", ")", ")", "\n", "dense_block_l", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "dense_block_l", ".", "append", "(", "\n", "nn", ".", "Conv3d", "(", "nf", "+", "i", "*", "ng", ",", "ng", ",", "(", "3", ",", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "padding", "=", "pad", ",", "bias", "=", "True", ")", ")", "\n", "\n", "", "self", ".", "dense_blocks", "=", "nn", ".", "ModuleList", "(", "dense_block_l", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.DUF_arch.DenseBlock_28L.forward": [[203, 213], ["range", "len", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''x: [B, C, T, H, W]\n        C: 1) 64 -> 208;\n        T: 1) 7 -> 7; (t_reduce=True)'''", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "self", ".", "dense_blocks", ")", ",", "6", ")", ":", "\n", "            ", "y", "=", "x", "\n", "for", "j", "in", "range", "(", "6", ")", ":", "\n", "                ", "y", "=", "self", ".", "dense_blocks", "[", "i", "+", "j", "]", "(", "y", ")", "\n", "", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "y", ")", ",", "1", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.DUF_arch.DUF_28L.__init__": [[218, 241], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "DUF_arch.DenseBlock_28L", "DUF_arch.DenseBlock", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "DUF_arch.DynamicUpsamplingFilter_3C"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__"], ["def", "__init__", "(", "self", ",", "scale", "=", "4", ",", "adapt_official", "=", "False", ")", ":", "\n", "        ", "super", "(", "DUF_28L", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv3d_1", "=", "nn", ".", "Conv3d", "(", "3", ",", "64", ",", "(", "1", ",", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "1", ",", "1", ")", ",", "bias", "=", "True", ")", "\n", "self", ".", "dense_block_1", "=", "DenseBlock_28L", "(", "64", ",", "16", ")", "# 64 + 16 * 9 = 208, T = 7", "\n", "self", ".", "dense_block_2", "=", "DenseBlock", "(", "208", ",", "16", ",", "t_reduce", "=", "True", ")", "# 208 + 16 * 3 = 256, T = 1", "\n", "self", ".", "bn3d_2", "=", "nn", ".", "BatchNorm3d", "(", "256", ",", "eps", "=", "1e-3", ",", "momentum", "=", "1e-3", ")", "\n", "self", ".", "conv3d_2", "=", "nn", ".", "Conv3d", "(", "256", ",", "256", ",", "(", "1", ",", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "1", ",", "1", ")", ",", "\n", "bias", "=", "True", ")", "\n", "\n", "self", ".", "conv3d_r1", "=", "nn", ".", "Conv3d", "(", "256", ",", "256", ",", "(", "1", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ",", "\n", "bias", "=", "True", ")", "\n", "self", ".", "conv3d_r2", "=", "nn", ".", "Conv3d", "(", "256", ",", "3", "*", "(", "scale", "**", "2", ")", ",", "(", "1", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "conv3d_f1", "=", "nn", ".", "Conv3d", "(", "256", ",", "512", ",", "(", "1", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ",", "\n", "bias", "=", "True", ")", "\n", "self", ".", "conv3d_f2", "=", "nn", ".", "Conv3d", "(", "512", ",", "1", "*", "5", "*", "5", "*", "(", "scale", "**", "2", ")", ",", "(", "1", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "dynamic_filter", "=", "DynamicUpsamplingFilter_3C", "(", "(", "1", ",", "5", ",", "5", ")", ")", "\n", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "adapt_official", "=", "adapt_official", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.DUF_arch.DUF_28L.forward": [[242, 273], ["torch.relu.size", "torch.relu.permute", "DUF_arch.DUF_28L.conv3d_1", "DUF_arch.DUF_28L.dense_block_1", "DUF_arch.DUF_28L.dense_block_2", "torch.relu", "torch.relu", "torch.relu", "DUF_arch.DUF_28L.conv3d_r2", "DUF_arch.DUF_28L.conv3d_f2", "torch.softmax", "torch.softmax", "torch.softmax", "DUF_arch.DUF_28L.dynamic_filter", "DUF_arch.DUF_28L.squeeze_", "torch.pixel_shuffle", "torch.pixel_shuffle", "torch.pixel_shuffle", "DUF_arch.DUF_28L.conv3d_2", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.softmax.view", "DUF_arch.adapt_official", "torch.relu", "torch.relu", "torch.relu", "DUF_arch.DUF_28L.conv3d_r1", "DUF_arch.DUF_28L.conv3d_f1", "DUF_arch.DUF_28L.bn3d_2"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.DUF_arch.adapt_official"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''\n        x: [B, T, C, H, W], T = 7. reshape to [B, C, T, H, W] for Conv3D\n        Generate filters and image residual:\n        Fx: [B, 25, 16, H, W] for DynamicUpsamplingFilter_3C\n        Rx: [B, 3*16, 1, H, W]\n        '''", "\n", "B", ",", "T", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", "# [B,C,T,H,W] for Conv3D", "\n", "x_center", "=", "x", "[", ":", ",", ":", ",", "T", "//", "2", ",", ":", ",", ":", "]", "\n", "x", "=", "self", ".", "conv3d_1", "(", "x", ")", "\n", "x", "=", "self", ".", "dense_block_1", "(", "x", ")", "\n", "x", "=", "self", ".", "dense_block_2", "(", "x", ")", "# reduce T to 1", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv3d_2", "(", "F", ".", "relu", "(", "self", ".", "bn3d_2", "(", "x", ")", ",", "inplace", "=", "True", ")", ")", ",", "inplace", "=", "True", ")", "\n", "\n", "# image residual", "\n", "Rx", "=", "self", ".", "conv3d_r2", "(", "F", ".", "relu", "(", "self", ".", "conv3d_r1", "(", "x", ")", ",", "inplace", "=", "True", ")", ")", "# [B, 3*16, 1, H, W]", "\n", "\n", "# filter", "\n", "Fx", "=", "self", ".", "conv3d_f2", "(", "F", ".", "relu", "(", "self", ".", "conv3d_f1", "(", "x", ")", ",", "inplace", "=", "True", ")", ")", "# [B, 25*16, 1, H, W]", "\n", "Fx", "=", "F", ".", "softmax", "(", "Fx", ".", "view", "(", "B", ",", "25", ",", "self", ".", "scale", "**", "2", ",", "H", ",", "W", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# Adapt to official model weights", "\n", "if", "self", ".", "adapt_official", ":", "\n", "            ", "adapt_official", "(", "Rx", ",", "scale", "=", "self", ".", "scale", ")", "\n", "\n", "# dynamic filter", "\n", "", "out", "=", "self", ".", "dynamic_filter", "(", "x_center", ",", "Fx", ")", "# [B, 3*R, H, W]", "\n", "out", "+=", "Rx", ".", "squeeze_", "(", "2", ")", "\n", "out", "=", "F", ".", "pixel_shuffle", "(", "out", ",", "self", ".", "scale", ")", "# [B, 3, H, W]", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.DUF_arch.DenseBlock_52L.__init__": [[279, 297], ["torch.Module.__init__", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "dense_block_l.append", "dense_block_l.append", "dense_block_l.append", "dense_block_l.append", "dense_block_l.append", "dense_block_l.append", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__"], ["def", "__init__", "(", "self", ",", "nf", "=", "64", ",", "ng", "=", "16", ")", ":", "\n", "        ", "super", "(", "DenseBlock_52L", ",", "self", ")", ".", "__init__", "(", ")", "\n", "pad", "=", "(", "1", ",", "1", ",", "1", ")", "\n", "\n", "dense_block_l", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "21", ")", ":", "\n", "            ", "dense_block_l", ".", "append", "(", "nn", ".", "BatchNorm3d", "(", "nf", "+", "i", "*", "ng", ",", "eps", "=", "1e-3", ",", "momentum", "=", "1e-3", ")", ")", "\n", "dense_block_l", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "dense_block_l", ".", "append", "(", "\n", "nn", ".", "Conv3d", "(", "nf", "+", "i", "*", "ng", ",", "nf", "+", "i", "*", "ng", ",", "(", "1", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ",", "\n", "bias", "=", "True", ")", ")", "\n", "\n", "dense_block_l", ".", "append", "(", "nn", ".", "BatchNorm3d", "(", "nf", "+", "i", "*", "ng", ",", "eps", "=", "1e-3", ",", "momentum", "=", "1e-3", ")", ")", "\n", "dense_block_l", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "dense_block_l", ".", "append", "(", "\n", "nn", ".", "Conv3d", "(", "nf", "+", "i", "*", "ng", ",", "ng", ",", "(", "3", ",", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "padding", "=", "pad", ",", "bias", "=", "True", ")", ")", "\n", "\n", "", "self", ".", "dense_blocks", "=", "nn", ".", "ModuleList", "(", "dense_block_l", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.DUF_arch.DenseBlock_52L.forward": [[298, 308], ["range", "len", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''x: [B, C, T, H, W]\n        C: 1) 64 -> 400;\n        T: 1) 7 -> 7; (t_reduce=True)'''", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "self", ".", "dense_blocks", ")", ",", "6", ")", ":", "\n", "            ", "y", "=", "x", "\n", "for", "j", "in", "range", "(", "6", ")", ":", "\n", "                ", "y", "=", "self", ".", "dense_blocks", "[", "i", "+", "j", "]", "(", "y", ")", "\n", "", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "y", ")", ",", "1", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.DUF_arch.DUF_52L.__init__": [[313, 337], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "DUF_arch.DenseBlock_52L", "DUF_arch.DenseBlock", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "DUF_arch.DynamicUpsamplingFilter_3C"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__"], ["def", "__init__", "(", "self", ",", "scale", "=", "4", ",", "adapt_official", "=", "False", ")", ":", "\n", "        ", "super", "(", "DUF_52L", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv3d_1", "=", "nn", ".", "Conv3d", "(", "3", ",", "64", ",", "(", "1", ",", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "1", ",", "1", ")", ",", "bias", "=", "True", ")", "\n", "self", ".", "dense_block_1", "=", "DenseBlock_52L", "(", "64", ",", "16", ")", "# 64 + 21 * 9 = 400, T = 7", "\n", "self", ".", "dense_block_2", "=", "DenseBlock", "(", "400", ",", "16", ",", "t_reduce", "=", "True", ")", "# 400 + 16 * 3 = 448, T = 1", "\n", "\n", "self", ".", "bn3d_2", "=", "nn", ".", "BatchNorm3d", "(", "448", ",", "eps", "=", "1e-3", ",", "momentum", "=", "1e-3", ")", "\n", "self", ".", "conv3d_2", "=", "nn", ".", "Conv3d", "(", "448", ",", "256", ",", "(", "1", ",", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "1", ",", "1", ")", ",", "\n", "bias", "=", "True", ")", "\n", "\n", "self", ".", "conv3d_r1", "=", "nn", ".", "Conv3d", "(", "256", ",", "256", ",", "(", "1", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ",", "\n", "bias", "=", "True", ")", "\n", "self", ".", "conv3d_r2", "=", "nn", ".", "Conv3d", "(", "256", ",", "3", "*", "(", "scale", "**", "2", ")", ",", "(", "1", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "conv3d_f1", "=", "nn", ".", "Conv3d", "(", "256", ",", "512", ",", "(", "1", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ",", "\n", "bias", "=", "True", ")", "\n", "self", ".", "conv3d_f2", "=", "nn", ".", "Conv3d", "(", "512", ",", "1", "*", "5", "*", "5", "*", "(", "scale", "**", "2", ")", ",", "(", "1", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "dynamic_filter", "=", "DynamicUpsamplingFilter_3C", "(", "(", "1", ",", "5", ",", "5", ")", ")", "\n", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "adapt_official", "=", "adapt_official", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.DUF_arch.DUF_52L.forward": [[338, 369], ["torch.relu.size", "torch.relu.permute", "DUF_arch.DUF_52L.conv3d_1", "DUF_arch.DUF_52L.dense_block_1", "DUF_arch.DUF_52L.dense_block_2", "torch.relu", "torch.relu", "torch.relu", "DUF_arch.DUF_52L.conv3d_r2", "DUF_arch.DUF_52L.conv3d_f2", "torch.softmax", "torch.softmax", "torch.softmax", "DUF_arch.DUF_52L.dynamic_filter", "DUF_arch.DUF_52L.squeeze_", "torch.pixel_shuffle", "torch.pixel_shuffle", "torch.pixel_shuffle", "DUF_arch.DUF_52L.conv3d_2", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.softmax.view", "DUF_arch.adapt_official", "torch.relu", "torch.relu", "torch.relu", "DUF_arch.DUF_52L.conv3d_r1", "DUF_arch.DUF_52L.conv3d_f1", "DUF_arch.DUF_52L.bn3d_2"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.DUF_arch.adapt_official"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''\n        x: [B, T, C, H, W], T = 7. reshape to [B, C, T, H, W] for Conv3D\n        Generate filters and image residual:\n        Fx: [B, 25, 16, H, W] for DynamicUpsamplingFilter_3C\n        Rx: [B, 3*16, 1, H, W]\n        '''", "\n", "B", ",", "T", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", "# [B,C,T,H,W] for Conv3D", "\n", "x_center", "=", "x", "[", ":", ",", ":", ",", "T", "//", "2", ",", ":", ",", ":", "]", "\n", "x", "=", "self", ".", "conv3d_1", "(", "x", ")", "\n", "x", "=", "self", ".", "dense_block_1", "(", "x", ")", "\n", "x", "=", "self", ".", "dense_block_2", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv3d_2", "(", "F", ".", "relu", "(", "self", ".", "bn3d_2", "(", "x", ")", ",", "inplace", "=", "True", ")", ")", ",", "inplace", "=", "True", ")", "\n", "\n", "# image residual", "\n", "Rx", "=", "self", ".", "conv3d_r2", "(", "F", ".", "relu", "(", "self", ".", "conv3d_r1", "(", "x", ")", ",", "inplace", "=", "True", ")", ")", "# [B, 3*16, 1, H, W]", "\n", "\n", "# filter", "\n", "Fx", "=", "self", ".", "conv3d_f2", "(", "F", ".", "relu", "(", "self", ".", "conv3d_f1", "(", "x", ")", ",", "inplace", "=", "True", ")", ")", "# [B, 25*16, 1, H, W]", "\n", "Fx", "=", "F", ".", "softmax", "(", "Fx", ".", "view", "(", "B", ",", "25", ",", "self", ".", "scale", "**", "2", ",", "H", ",", "W", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# Adapt to official model weights", "\n", "if", "self", ".", "adapt_official", ":", "\n", "            ", "adapt_official", "(", "Rx", ",", "scale", "=", "self", ".", "scale", ")", "\n", "\n", "# dynamic filter", "\n", "", "out", "=", "self", ".", "dynamic_filter", "(", "x_center", ",", "Fx", ")", "# [B, 3*R, H, W]", "\n", "out", "+=", "Rx", ".", "squeeze_", "(", "2", ")", "\n", "out", "=", "F", ".", "pixel_shuffle", "(", "out", ",", "self", ".", "scale", ")", "# [B, 3, H, W]", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.DUF_arch.adapt_official": [[17, 30], ["Rx.clone"], "function", ["None"], ["def", "adapt_official", "(", "Rx", ",", "scale", "=", "4", ")", ":", "\n", "    ", "'''Adapt the weights translated from the official tensorflow weights\n    Not necessary if you are training from scratch'''", "\n", "x", "=", "Rx", ".", "clone", "(", ")", "\n", "x1", "=", "x", "[", ":", ",", ":", ":", "3", ",", ":", ",", ":", "]", "\n", "x2", "=", "x", "[", ":", ",", "1", ":", ":", "3", ",", ":", ",", ":", "]", "\n", "x3", "=", "x", "[", ":", ",", "2", ":", ":", "3", ",", ":", ",", ":", "]", "\n", "\n", "Rx", "[", ":", ",", ":", "scale", "**", "2", ",", ":", ",", ":", "]", "=", "x1", "\n", "Rx", "[", ":", ",", "scale", "**", "2", ":", "2", "*", "(", "scale", "**", "2", ")", ",", ":", ",", ":", "]", "=", "x2", "\n", "Rx", "[", ":", ",", "2", "*", "(", "scale", "**", "2", ")", ":", ",", ":", ",", ":", "]", "=", "x3", "\n", "\n", "return", "Rx", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.LRimg_estimator.DirectKernelEstimator.__init__": [[7, 18], ["torch.Module.__init__", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nf", ")", ":", "\n", "        ", "super", "(", "DirectKernelEstimator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# [64, 128, 128]", "\n", "self", ".", "lrelu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "self", ".", "conv0", "=", "nn", ".", "Conv2d", "(", "3", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", "*", "2", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "nf", "*", "2", ",", "nf", "*", "2", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "nf", "*", "2", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "conv6", "=", "nn", ".", "Conv2d", "(", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.LRimg_estimator.DirectKernelEstimator.forward": [[19, 36], ["LRimg_estimator.DirectKernelEstimator.lrelu", "LRimg_estimator.DirectKernelEstimator.lrelu", "LRimg_estimator.DirectKernelEstimator.lrelu", "LRimg_estimator.DirectKernelEstimator.lrelu", "LRimg_estimator.DirectKernelEstimator.lrelu", "LRimg_estimator.DirectKernelEstimator.lrelu", "LRimg_estimator.DirectKernelEstimator.conv6", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "LRimg_estimator.DirectKernelEstimator.conv0", "LRimg_estimator.DirectKernelEstimator.conv1", "LRimg_estimator.DirectKernelEstimator.conv2", "LRimg_estimator.DirectKernelEstimator.conv3", "LRimg_estimator.DirectKernelEstimator.conv4", "LRimg_estimator.DirectKernelEstimator.conv5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Forward function of classifier\n        :param x: concatenated input\n        :return:\n        \"\"\"", "\n", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "conv0", "(", "x", ")", ")", "\n", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "conv1", "(", "fea", ")", ")", "\n", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "conv2", "(", "fea", ")", ")", "\n", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "conv3", "(", "fea", ")", ")", "\n", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "conv4", "(", "fea", ")", ")", "\n", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "conv5", "(", "fea", ")", ")", "\n", "fea", "=", "self", ".", "conv6", "(", "fea", ")", "\n", "\n", "small_x", "=", "F", ".", "avg_pool2d", "(", "x", ",", "2", ")", "\n", "out", "=", "fea", "+", "small_x", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.LRimg_estimator.DirectKernelEstimator_CMS.__init__": [[39, 51], ["torch.Module.__init__", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nf", ")", ":", "\n", "        ", "super", "(", "DirectKernelEstimator_CMS", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# [64, 128, 128]", "\n", "self", ".", "lrelu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "self", ".", "pad", "=", "nn", ".", "ReflectionPad2d", "(", "1", ")", "\n", "self", ".", "conv0", "=", "nn", ".", "Conv2d", "(", "3", ",", "nf", ",", "3", ",", "1", ",", "0", ",", "bias", "=", "True", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "0", ",", "bias", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", "*", "2", ",", "4", ",", "2", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "nf", "*", "2", ",", "nf", "*", "2", ",", "3", ",", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "nf", "*", "2", ",", "nf", ",", "3", ",", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "self", ".", "conv6", "=", "nn", ".", "Conv2d", "(", "nf", ",", "3", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.LRimg_estimator.DirectKernelEstimator_CMS.forward": [[51, 68], ["x.mean().mean", "LRimg_estimator.DirectKernelEstimator_CMS.lrelu", "LRimg_estimator.DirectKernelEstimator_CMS.lrelu", "LRimg_estimator.DirectKernelEstimator_CMS.lrelu", "LRimg_estimator.DirectKernelEstimator_CMS.lrelu", "LRimg_estimator.DirectKernelEstimator_CMS.lrelu", "LRimg_estimator.DirectKernelEstimator_CMS.lrelu", "LRimg_estimator.DirectKernelEstimator_CMS.conv6", "LRimg_estimator.DirectKernelEstimator_CMS.conv0", "LRimg_estimator.DirectKernelEstimator_CMS.conv1", "LRimg_estimator.DirectKernelEstimator_CMS.conv2", "LRimg_estimator.DirectKernelEstimator_CMS.conv3", "LRimg_estimator.DirectKernelEstimator_CMS.conv4", "LRimg_estimator.DirectKernelEstimator_CMS.conv5", "x.mean", "LRimg_estimator.DirectKernelEstimator_CMS.pad", "LRimg_estimator.DirectKernelEstimator_CMS.pad", "LRimg_estimator.DirectKernelEstimator_CMS.pad", "LRimg_estimator.DirectKernelEstimator_CMS.pad", "LRimg_estimator.DirectKernelEstimator_CMS.pad", "LRimg_estimator.DirectKernelEstimator_CMS.pad"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Forward function of classifier\n        :param x: concatenated input\n        :return:\n        \"\"\"", "\n", "m", "=", "x", ".", "mean", "(", "2", ",", "keepdim", "=", "True", ")", ".", "mean", "(", "3", ",", "keepdim", "=", "True", ")", "\n", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "conv0", "(", "self", ".", "pad", "(", "x", "-", "m", ")", ")", ")", "\n", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "conv1", "(", "self", ".", "pad", "(", "fea", ")", ")", ")", "\n", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "conv2", "(", "self", ".", "pad", "(", "fea", ")", ")", ")", "\n", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "conv3", "(", "self", ".", "pad", "(", "fea", ")", ")", ")", "\n", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "conv4", "(", "self", ".", "pad", "(", "fea", ")", ")", ")", "\n", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "conv5", "(", "self", ".", "pad", "(", "fea", ")", ")", ")", "\n", "fea", "=", "self", ".", "conv6", "(", "fea", ")", "\n", "#small_x = F.avg_pool2d(x, 2)", "\n", "out", "=", "fea", "+", "m", "#small_x", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.LRimg_estimator.DirectKernelEstimatorVideo.__init__": [[71, 91], ["torch.Module.__init__", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ReplicationPad3d", "torch.ReplicationPad3d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv3d", "torch.Conv3d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv3d", "torch.Conv3d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nf", ",", "in_nc", "=", "3", ",", "scale", "=", "2", ")", ":", "\n", "        ", "super", "(", "DirectKernelEstimatorVideo", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# [64, 128, 128]", "\n", "self", ".", "lrelu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "self", ".", "pad3d", "=", "nn", ".", "ReplicationPad3d", "(", "1", ")", "\n", "self", ".", "pad", "=", "nn", ".", "ReflectionPad2d", "(", "1", ")", "\n", "self", ".", "conv0", "=", "nn", ".", "Conv3d", "(", "in_nc", ",", "nf", ",", "3", ",", "1", ",", "0", ",", "bias", "=", "True", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "0", ",", "bias", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", "*", "2", ",", "4", ",", "2", ",", "0", ",", "bias", "=", "True", ")", "\n", "if", "scale", "==", "2", ":", "\n", "            ", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "nf", "*", "2", ",", "nf", ",", "3", ",", "1", ",", "0", ",", "bias", "=", "True", ")", "\n", "", "elif", "scale", "==", "4", ":", "\n", "            ", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "nf", "*", "2", ",", "nf", ",", "4", ",", "2", ",", "0", ",", "bias", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "0", ",", "bias", "=", "True", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv3d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "0", ",", "bias", "=", "True", ")", "\n", "self", ".", "conv6", "=", "nn", ".", "Conv2d", "(", "nf", ",", "in_nc", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "scale", "=", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.LRimg_estimator.DirectKernelEstimatorVideo.forward": [[92, 118], ["LRimg_estimator.DirectKernelEstimatorVideo.mean().mean", "LRimg_estimator.DirectKernelEstimatorVideo.lrelu", "LRimg_estimator.DirectKernelEstimatorVideo.transpose().reshape", "LRimg_estimator.DirectKernelEstimatorVideo.lrelu", "LRimg_estimator.DirectKernelEstimatorVideo.lrelu", "LRimg_estimator.DirectKernelEstimatorVideo.lrelu", "LRimg_estimator.DirectKernelEstimatorVideo.lrelu", "fea.reshape().transpose.reshape().transpose.reshape().transpose", "LRimg_estimator.DirectKernelEstimatorVideo.lrelu", "fea.reshape().transpose.reshape().transpose.transpose().reshape", "LRimg_estimator.DirectKernelEstimatorVideo.conv6", "fea.reshape().transpose.reshape().transpose.reshape().transpose", "LRimg_estimator.DirectKernelEstimatorVideo.conv0", "LRimg_estimator.DirectKernelEstimatorVideo.conv1", "LRimg_estimator.DirectKernelEstimatorVideo.conv2", "LRimg_estimator.DirectKernelEstimatorVideo.conv3", "LRimg_estimator.DirectKernelEstimatorVideo.conv4", "LRimg_estimator.DirectKernelEstimatorVideo.conv5", "LRimg_estimator.DirectKernelEstimatorVideo.mean", "LRimg_estimator.DirectKernelEstimatorVideo.pad3d", "LRimg_estimator.DirectKernelEstimatorVideo.transpose", "LRimg_estimator.DirectKernelEstimatorVideo.pad", "LRimg_estimator.DirectKernelEstimatorVideo.pad", "LRimg_estimator.DirectKernelEstimatorVideo.pad", "LRimg_estimator.DirectKernelEstimatorVideo.pad", "fea.reshape().transpose.reshape().transpose.reshape", "LRimg_estimator.DirectKernelEstimatorVideo.pad3d", "fea.reshape().transpose.reshape().transpose.transpose", "fea.reshape().transpose.reshape().transpose.reshape"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Forward function of classifier\n        :param x: B C T H W\n        :return:\n        \"\"\"", "\n", "B", ",", "C", ",", "T", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "m", "=", "x", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", ".", "mean", "(", "-", "2", ",", "keepdim", "=", "True", ")", "\n", "x", "=", "x", "-", "m", "\n", "# No nn.Reflectionpad3d", "\n", "x", "=", "self", ".", "lrelu", "(", "self", ".", "conv0", "(", "self", ".", "pad3d", "(", "x", ")", ")", ")", "\n", "# B C T H W  -> B*T C H W", "\n", "fea", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", "*", "T", ",", "-", "1", ",", "H", ",", "W", ")", "\n", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "conv1", "(", "self", ".", "pad", "(", "fea", ")", ")", ")", "\n", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "conv2", "(", "self", ".", "pad", "(", "fea", ")", ")", ")", "\n", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "conv3", "(", "self", ".", "pad", "(", "fea", ")", ")", ")", "\n", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "conv4", "(", "self", ".", "pad", "(", "fea", ")", ")", ")", "\n", "# B*T C H W -> B C T H W", "\n", "fea", "=", "fea", ".", "reshape", "(", "B", ",", "T", ",", "-", "1", ",", "H", "//", "self", ".", "scale", ",", "W", "//", "self", ".", "scale", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "conv5", "(", "self", ".", "pad3d", "(", "fea", ")", ")", ")", "\n", "# B C T H W  -> B*T C H W", "\n", "fea", "=", "fea", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", "*", "T", ",", "-", "1", ",", "H", "//", "self", ".", "scale", ",", "W", "//", "self", ".", "scale", ")", "\n", "fea", "=", "self", ".", "conv6", "(", "fea", ")", "\n", "fea", "=", "fea", ".", "reshape", "(", "B", ",", "T", ",", "-", "1", ",", "H", "//", "self", ".", "scale", ",", "W", "//", "self", ".", "scale", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "out", "=", "fea", "+", "m", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.arch_util.ResidualBlock_noBN.__init__": [[40, 47], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "arch_util.initialize_weights"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__", "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.arch_util.initialize_weights"], ["def", "__init__", "(", "self", ",", "nf", "=", "64", ")", ":", "\n", "        ", "super", "(", "ResidualBlock_noBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "\n", "# initialization", "\n", "initialize_weights", "(", "[", "self", ".", "conv1", ",", "self", ".", "conv2", "]", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.arch_util.ResidualBlock_noBN.forward": [[48, 53], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "arch_util.ResidualBlock_noBN.conv2", "arch_util.ResidualBlock_noBN.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ",", "inplace", "=", "True", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "return", "identity", "+", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.arch_util.initialize_weights": [[7, 25], ["isinstance", "net.modules", "isinstance", "torch.kaiming_normal_", "isinstance", "m.bias.data.zero_", "torch.kaiming_normal_", "isinstance", "m.bias.data.zero_", "torch.constant_", "torch.constant_"], "function", ["None"], ["def", "initialize_weights", "(", "net_l", ",", "scale", "=", "1", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "net_l", ",", "list", ")", ":", "\n", "        ", "net_l", "=", "[", "net_l", "]", "\n", "", "for", "net", "in", "net_l", ":", "\n", "        ", "for", "m", "in", "net", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "m", ".", "weight", ".", "data", "*=", "scale", "# for residual block", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "m", ".", "weight", ".", "data", "*=", "scale", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.arch_util.make_layer": [[27, 32], ["range", "torch.Sequential", "layers.append", "block"], "function", ["None"], ["", "", "", "", "def", "make_layer", "(", "block", ",", "n_layers", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "n_layers", ")", ":", "\n", "        ", "layers", ".", "append", "(", "block", "(", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.arch_util.flow_warp": [[55, 80], ["x.size", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "grid.type_as.type_as", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.grid_sample", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "x.size", "flow.size", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "max", "max"], "function", ["None"], ["", "", "def", "flow_warp", "(", "x", ",", "flow", ",", "interp_mode", "=", "'bilinear'", ",", "padding_mode", "=", "'zeros'", ")", ":", "\n", "    ", "\"\"\"Warp an image or feature map with optical flow\n    Args:\n        x (Tensor): size (N, C, H, W)\n        flow (Tensor): size (N, H, W, 2), normal value\n        interp_mode (str): 'nearest' or 'bilinear'\n        padding_mode (str): 'zeros' or 'border' or 'reflection'\n\n    Returns:\n        Tensor: warped image or feature map\n    \"\"\"", "\n", "assert", "x", ".", "size", "(", ")", "[", "-", "2", ":", "]", "==", "flow", ".", "size", "(", ")", "[", "1", ":", "3", "]", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "# mesh grid", "\n", "grid_y", ",", "grid_x", "=", "torch", ".", "meshgrid", "(", "torch", ".", "arange", "(", "0", ",", "H", ")", ",", "torch", ".", "arange", "(", "0", ",", "W", ")", ")", "\n", "grid", "=", "torch", ".", "stack", "(", "(", "grid_x", ",", "grid_y", ")", ",", "2", ")", ".", "float", "(", ")", "# W(x), H(y), 2", "\n", "grid", ".", "requires_grad", "=", "False", "\n", "grid", "=", "grid", ".", "type_as", "(", "x", ")", "\n", "vgrid", "=", "grid", "+", "flow", "\n", "# scale grid to [-1,1]", "\n", "vgrid_x", "=", "2.0", "*", "vgrid", "[", ":", ",", ":", ",", ":", ",", "0", "]", "/", "max", "(", "W", "-", "1", ",", "1", ")", "-", "1.0", "\n", "vgrid_y", "=", "2.0", "*", "vgrid", "[", ":", ",", ":", ",", ":", ",", "1", "]", "/", "max", "(", "H", "-", "1", ",", "1", ")", "-", "1.0", "\n", "vgrid_scaled", "=", "torch", ".", "stack", "(", "(", "vgrid_x", ",", "vgrid_y", ")", ",", "dim", "=", "3", ")", "\n", "output", "=", "F", ".", "grid_sample", "(", "x", ",", "vgrid_scaled", ",", "mode", "=", "interp_mode", ",", "padding_mode", "=", "padding_mode", ")", "\n", "return", "output", "\n", "", ""]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.kernel_estimator.DirectKernelEstimator.__init__": [[7, 52], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_nc", ",", "out_nc", ",", "nf", ",", "use_bn", "=", "True", ")", ":", "\n", "        ", "super", "(", "DirectKernelEstimator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_bn", "=", "use_bn", "\n", "# [64, 128, 128]", "\n", "self", ".", "conv0_0", "=", "nn", ".", "Conv2d", "(", "in_nc", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "conv0_1", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "True", ")", "\n", "if", "use_bn", ":", "\n", "            ", "self", ".", "bn0_1", "=", "nn", ".", "BatchNorm2d", "(", "nf", ",", "affine", "=", "True", ")", "\n", "# [64, 64, 64]", "\n", "", "self", ".", "conv1_0", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", "*", "2", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "if", "use_bn", ":", "\n", "            ", "self", ".", "bn1_0", "=", "nn", ".", "BatchNorm2d", "(", "nf", "*", "2", ",", "affine", "=", "True", ")", "\n", "", "self", ".", "conv1_1", "=", "nn", ".", "Conv2d", "(", "nf", "*", "2", ",", "nf", "*", "2", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "True", ")", "\n", "if", "use_bn", ":", "\n", "            ", "self", ".", "bn1_1", "=", "nn", ".", "BatchNorm2d", "(", "nf", "*", "2", ",", "affine", "=", "True", ")", "\n", "# [128, 32, 32]", "\n", "", "self", ".", "conv2_0", "=", "nn", ".", "Conv2d", "(", "nf", "*", "2", ",", "nf", "*", "4", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "if", "use_bn", ":", "\n", "            ", "self", ".", "bn2_0", "=", "nn", ".", "BatchNorm2d", "(", "nf", "*", "4", ",", "affine", "=", "True", ")", "\n", "", "self", ".", "conv2_1", "=", "nn", ".", "Conv2d", "(", "nf", "*", "4", ",", "nf", "*", "4", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "True", ")", "\n", "if", "use_bn", ":", "\n", "            ", "self", ".", "bn2_1", "=", "nn", ".", "BatchNorm2d", "(", "nf", "*", "4", ",", "affine", "=", "True", ")", "\n", "# [256, 16, 16]", "\n", "", "self", ".", "conv3_0", "=", "nn", ".", "Conv2d", "(", "nf", "*", "4", ",", "nf", "*", "8", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "if", "use_bn", ":", "\n", "            ", "self", ".", "bn3_0", "=", "nn", ".", "BatchNorm2d", "(", "nf", "*", "8", ",", "affine", "=", "True", ")", "\n", "", "self", ".", "conv3_1", "=", "nn", ".", "Conv2d", "(", "nf", "*", "8", ",", "nf", "*", "8", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "True", ")", "\n", "if", "use_bn", ":", "\n", "            ", "self", ".", "bn3_1", "=", "nn", ".", "BatchNorm2d", "(", "nf", "*", "8", ",", "affine", "=", "True", ")", "\n", "# [512, 8, 8]", "\n", "", "self", ".", "conv4_0", "=", "nn", ".", "Conv2d", "(", "nf", "*", "8", ",", "nf", "*", "8", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "if", "use_bn", ":", "\n", "            ", "self", ".", "bn4_0", "=", "nn", ".", "BatchNorm2d", "(", "nf", "*", "8", ",", "affine", "=", "True", ")", "\n", "", "self", ".", "conv4_1", "=", "nn", ".", "Conv2d", "(", "nf", "*", "8", ",", "nf", "*", "8", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "True", ")", "\n", "if", "use_bn", ":", "\n", "            ", "self", ".", "bn4_1", "=", "nn", ".", "BatchNorm2d", "(", "nf", "*", "8", ",", "affine", "=", "True", ")", "\n", "\n", "# regression", "\n", "", "self", ".", "regressor", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "nf", "*", "8", ",", "out_nc", "*", "out_nc", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "out_nc", "*", "out_nc", ",", "out_nc", "*", "out_nc", ")", "\n", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "out_nc", "=", "out_nc", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.kernel_estimator.DirectKernelEstimator.forward": [[53, 95], ["kernel_estimator.DirectKernelEstimator.view", "kernel_estimator.DirectKernelEstimator.regressor", "out.reshape.reshape.reshape", "kernel_estimator.DirectKernelEstimator.relu", "kernel_estimator.DirectKernelEstimator.relu", "kernel_estimator.DirectKernelEstimator.relu", "kernel_estimator.DirectKernelEstimator.relu", "kernel_estimator.DirectKernelEstimator.relu", "kernel_estimator.DirectKernelEstimator.relu", "kernel_estimator.DirectKernelEstimator.relu", "kernel_estimator.DirectKernelEstimator.relu", "kernel_estimator.DirectKernelEstimator.relu", "kernel_estimator.DirectKernelEstimator.relu", "kernel_estimator.DirectKernelEstimator.relu", "kernel_estimator.DirectKernelEstimator.relu", "kernel_estimator.DirectKernelEstimator.relu", "kernel_estimator.DirectKernelEstimator.relu", "kernel_estimator.DirectKernelEstimator.relu", "kernel_estimator.DirectKernelEstimator.relu", "kernel_estimator.DirectKernelEstimator.relu", "kernel_estimator.DirectKernelEstimator.relu", "kernel_estimator.DirectKernelEstimator.relu", "kernel_estimator.DirectKernelEstimator.relu", "torch.AdaptiveMaxPool2d", "torch.AdaptiveMaxPool2d", "kernel_estimator.DirectKernelEstimator.size", "kernel_estimator.DirectKernelEstimator.conv0_0", "kernel_estimator.DirectKernelEstimator.bn0_1", "kernel_estimator.DirectKernelEstimator.bn1_0", "kernel_estimator.DirectKernelEstimator.bn1_1", "kernel_estimator.DirectKernelEstimator.bn2_0", "kernel_estimator.DirectKernelEstimator.bn2_1", "kernel_estimator.DirectKernelEstimator.bn3_0", "kernel_estimator.DirectKernelEstimator.bn3_1", "kernel_estimator.DirectKernelEstimator.bn4_0", "kernel_estimator.DirectKernelEstimator.bn4_1", "kernel_estimator.DirectKernelEstimator.conv0_0", "kernel_estimator.DirectKernelEstimator.conv0_1", "kernel_estimator.DirectKernelEstimator.conv1_0", "kernel_estimator.DirectKernelEstimator.conv1_1", "kernel_estimator.DirectKernelEstimator.conv2_0", "kernel_estimator.DirectKernelEstimator.conv2_1", "kernel_estimator.DirectKernelEstimator.conv3_0", "kernel_estimator.DirectKernelEstimator.conv3_1", "kernel_estimator.DirectKernelEstimator.conv4_0", "kernel_estimator.DirectKernelEstimator.conv4_1", "kernel_estimator.DirectKernelEstimator.conv0_1", "kernel_estimator.DirectKernelEstimator.conv1_0", "kernel_estimator.DirectKernelEstimator.conv1_1", "kernel_estimator.DirectKernelEstimator.conv2_0", "kernel_estimator.DirectKernelEstimator.conv2_1", "kernel_estimator.DirectKernelEstimator.conv3_0", "kernel_estimator.DirectKernelEstimator.conv3_1", "kernel_estimator.DirectKernelEstimator.conv4_0", "kernel_estimator.DirectKernelEstimator.conv4_1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Forward function of classifier\n        :param x: concatenated input\n        :return:\n        \"\"\"", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "fea", "=", "self", ".", "relu", "(", "self", ".", "conv0_0", "(", "x", ")", ")", "\n", "fea", "=", "self", ".", "relu", "(", "self", ".", "bn0_1", "(", "self", ".", "conv0_1", "(", "fea", ")", ")", ")", "\n", "\n", "fea", "=", "self", ".", "relu", "(", "self", ".", "bn1_0", "(", "self", ".", "conv1_0", "(", "fea", ")", ")", ")", "\n", "fea", "=", "self", ".", "relu", "(", "self", ".", "bn1_1", "(", "self", ".", "conv1_1", "(", "fea", ")", ")", ")", "\n", "\n", "fea", "=", "self", ".", "relu", "(", "self", ".", "bn2_0", "(", "self", ".", "conv2_0", "(", "fea", ")", ")", ")", "\n", "fea", "=", "self", ".", "relu", "(", "self", ".", "bn2_1", "(", "self", ".", "conv2_1", "(", "fea", ")", ")", ")", "\n", "\n", "fea", "=", "self", ".", "relu", "(", "self", ".", "bn3_0", "(", "self", ".", "conv3_0", "(", "fea", ")", ")", ")", "\n", "fea", "=", "self", ".", "relu", "(", "self", ".", "bn3_1", "(", "self", ".", "conv3_1", "(", "fea", ")", ")", ")", "\n", "\n", "fea", "=", "self", ".", "relu", "(", "self", ".", "bn4_0", "(", "self", ".", "conv4_0", "(", "fea", ")", ")", ")", "\n", "fea", "=", "self", ".", "relu", "(", "self", ".", "bn4_1", "(", "self", ".", "conv4_1", "(", "fea", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "fea", "=", "self", ".", "relu", "(", "self", ".", "conv0_0", "(", "x", ")", ")", "\n", "fea", "=", "self", ".", "relu", "(", "self", ".", "conv0_1", "(", "fea", ")", ")", "\n", "\n", "fea", "=", "self", ".", "relu", "(", "self", ".", "conv1_0", "(", "fea", ")", ")", "\n", "fea", "=", "self", ".", "relu", "(", "self", ".", "conv1_1", "(", "fea", ")", ")", "\n", "\n", "fea", "=", "self", ".", "relu", "(", "self", ".", "conv2_0", "(", "fea", ")", ")", "\n", "fea", "=", "self", ".", "relu", "(", "self", ".", "conv2_1", "(", "fea", ")", ")", "\n", "\n", "fea", "=", "self", ".", "relu", "(", "self", ".", "conv3_0", "(", "fea", ")", ")", "\n", "fea", "=", "self", ".", "relu", "(", "self", ".", "conv3_1", "(", "fea", ")", ")", "\n", "\n", "fea", "=", "self", ".", "relu", "(", "self", ".", "conv4_0", "(", "fea", ")", ")", "\n", "fea", "=", "self", ".", "relu", "(", "self", ".", "conv4_1", "(", "fea", ")", ")", "\n", "\n", "", "fea", "=", "nn", ".", "AdaptiveMaxPool2d", "(", "1", ")", "(", "fea", ")", "\n", "fea", "=", "fea", ".", "view", "(", "fea", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "regressor", "(", "fea", ")", "\n", "out", "=", "out", ".", "reshape", "(", "-", "1", ",", "self", ".", "out_nc", ",", "self", ".", "out_nc", ")", "\n", "return", "fea", ",", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.kernel_estimator.GaussargsKernelEstimator.__init__": [[98, 133], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_nc", ",", "nf", ",", "use_bn", "=", "True", ")", ":", "\n", "        ", "super", "(", "GaussargsKernelEstimator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_bn", "=", "use_bn", "\n", "# Patch_size: 64x64", "\n", "# [nf, 64, 64]", "\n", "self", ".", "conv0_0", "=", "nn", ".", "Conv2d", "(", "in_nc", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "conv0_1", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "True", ")", "\n", "if", "use_bn", ":", "\n", "            ", "self", ".", "bn0_1", "=", "nn", ".", "BatchNorm2d", "(", "nf", ",", "affine", "=", "True", ")", "\n", "# [2 * nf, 32, 32]", "\n", "", "self", ".", "conv1_0", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", "*", "2", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "if", "use_bn", ":", "\n", "            ", "self", ".", "bn1_0", "=", "nn", ".", "BatchNorm2d", "(", "nf", "*", "2", ",", "affine", "=", "True", ")", "\n", "", "self", ".", "conv1_1", "=", "nn", ".", "Conv2d", "(", "nf", "*", "2", ",", "nf", "*", "2", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "True", ")", "\n", "if", "use_bn", ":", "\n", "            ", "self", ".", "bn1_1", "=", "nn", ".", "BatchNorm2d", "(", "nf", "*", "2", ",", "affine", "=", "True", ")", "\n", "# [4 * nf, 16, 16]", "\n", "", "self", ".", "conv2_0", "=", "nn", ".", "Conv2d", "(", "nf", "*", "2", ",", "nf", "*", "4", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "if", "use_bn", ":", "\n", "            ", "self", ".", "bn2_0", "=", "nn", ".", "BatchNorm2d", "(", "nf", "*", "4", ",", "affine", "=", "True", ")", "\n", "", "self", ".", "conv2_1", "=", "nn", ".", "Conv2d", "(", "nf", "*", "4", ",", "nf", "*", "4", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "True", ")", "\n", "if", "use_bn", ":", "\n", "            ", "self", ".", "bn2_1", "=", "nn", ".", "BatchNorm2d", "(", "nf", "*", "4", ",", "affine", "=", "True", ")", "\n", "# [8 * nf, 8, 8]", "\n", "", "self", ".", "conv3_0", "=", "nn", ".", "Conv2d", "(", "nf", "*", "4", ",", "nf", "*", "4", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "if", "use_bn", ":", "\n", "            ", "self", ".", "bn3_0", "=", "nn", ".", "BatchNorm2d", "(", "nf", "*", "4", ",", "affine", "=", "True", ")", "\n", "", "self", ".", "conv3_1", "=", "nn", ".", "Conv2d", "(", "nf", "*", "4", ",", "nf", "*", "4", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "True", ")", "\n", "if", "use_bn", ":", "\n", "            ", "self", ".", "bn3_1", "=", "nn", ".", "BatchNorm2d", "(", "nf", "*", "4", ",", "affine", "=", "True", ")", "\n", "\n", "# Regression", "\n", "", "self", ".", "regressor", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "nf", "*", "4", ",", "nf", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "nn", ".", "Linear", "(", "nf", ",", "3", ")", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.kernel_estimator.GaussargsKernelEstimator.forward": [[134, 170], ["kernel_estimator.GaussargsKernelEstimator.view", "kernel_estimator.GaussargsKernelEstimator.regressor", "kernel_estimator.GaussargsKernelEstimator.relu", "kernel_estimator.GaussargsKernelEstimator.relu", "kernel_estimator.GaussargsKernelEstimator.relu", "kernel_estimator.GaussargsKernelEstimator.relu", "kernel_estimator.GaussargsKernelEstimator.relu", "kernel_estimator.GaussargsKernelEstimator.relu", "kernel_estimator.GaussargsKernelEstimator.relu", "kernel_estimator.GaussargsKernelEstimator.relu", "kernel_estimator.GaussargsKernelEstimator.relu", "kernel_estimator.GaussargsKernelEstimator.relu", "kernel_estimator.GaussargsKernelEstimator.relu", "kernel_estimator.GaussargsKernelEstimator.relu", "kernel_estimator.GaussargsKernelEstimator.relu", "kernel_estimator.GaussargsKernelEstimator.relu", "kernel_estimator.GaussargsKernelEstimator.relu", "kernel_estimator.GaussargsKernelEstimator.relu", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "kernel_estimator.GaussargsKernelEstimator.size", "kernel_estimator.GaussargsKernelEstimator.conv0_0", "kernel_estimator.GaussargsKernelEstimator.bn0_1", "kernel_estimator.GaussargsKernelEstimator.bn1_0", "kernel_estimator.GaussargsKernelEstimator.bn1_1", "kernel_estimator.GaussargsKernelEstimator.bn2_0", "kernel_estimator.GaussargsKernelEstimator.bn2_1", "kernel_estimator.GaussargsKernelEstimator.bn3_0", "kernel_estimator.GaussargsKernelEstimator.bn3_1", "kernel_estimator.GaussargsKernelEstimator.conv0_0", "kernel_estimator.GaussargsKernelEstimator.conv0_1", "kernel_estimator.GaussargsKernelEstimator.conv1_0", "kernel_estimator.GaussargsKernelEstimator.conv1_1", "kernel_estimator.GaussargsKernelEstimator.conv2_0", "kernel_estimator.GaussargsKernelEstimator.conv2_1", "kernel_estimator.GaussargsKernelEstimator.conv3_0", "kernel_estimator.GaussargsKernelEstimator.conv3_1", "kernel_estimator.GaussargsKernelEstimator.conv0_1", "kernel_estimator.GaussargsKernelEstimator.conv1_0", "kernel_estimator.GaussargsKernelEstimator.conv1_1", "kernel_estimator.GaussargsKernelEstimator.conv2_0", "kernel_estimator.GaussargsKernelEstimator.conv2_1", "kernel_estimator.GaussargsKernelEstimator.conv3_0", "kernel_estimator.GaussargsKernelEstimator.conv3_1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Forward function of classifier\n        :param x: concatenated input\n        :return:\n        \"\"\"", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "fea", "=", "self", ".", "relu", "(", "self", ".", "conv0_0", "(", "x", ")", ")", "\n", "fea", "=", "self", ".", "relu", "(", "self", ".", "bn0_1", "(", "self", ".", "conv0_1", "(", "fea", ")", ")", ")", "\n", "\n", "fea", "=", "self", ".", "relu", "(", "self", ".", "bn1_0", "(", "self", ".", "conv1_0", "(", "fea", ")", ")", ")", "\n", "fea", "=", "self", ".", "relu", "(", "self", ".", "bn1_1", "(", "self", ".", "conv1_1", "(", "fea", ")", ")", ")", "\n", "\n", "fea", "=", "self", ".", "relu", "(", "self", ".", "bn2_0", "(", "self", ".", "conv2_0", "(", "fea", ")", ")", ")", "\n", "fea", "=", "self", ".", "relu", "(", "self", ".", "bn2_1", "(", "self", ".", "conv2_1", "(", "fea", ")", ")", ")", "\n", "\n", "fea", "=", "self", ".", "relu", "(", "self", ".", "bn3_0", "(", "self", ".", "conv3_0", "(", "fea", ")", ")", ")", "\n", "fea", "=", "self", ".", "relu", "(", "self", ".", "bn3_1", "(", "self", ".", "conv3_1", "(", "fea", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "fea", "=", "self", ".", "relu", "(", "self", ".", "conv0_0", "(", "x", ")", ")", "\n", "fea", "=", "self", ".", "relu", "(", "self", ".", "conv0_1", "(", "fea", ")", ")", "\n", "\n", "fea", "=", "self", ".", "relu", "(", "self", ".", "conv1_0", "(", "fea", ")", ")", "\n", "fea", "=", "self", ".", "relu", "(", "self", ".", "conv1_1", "(", "fea", ")", ")", "\n", "\n", "fea", "=", "self", ".", "relu", "(", "self", ".", "conv2_0", "(", "fea", ")", ")", "\n", "fea", "=", "self", ".", "relu", "(", "self", ".", "conv2_1", "(", "fea", ")", ")", "\n", "\n", "fea", "=", "self", ".", "relu", "(", "self", ".", "conv3_0", "(", "fea", ")", ")", "\n", "fea", "=", "self", ".", "relu", "(", "self", ".", "conv3_1", "(", "fea", ")", ")", "\n", "\n", "", "fea", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "(", "fea", ")", "\n", "fea", "=", "fea", ".", "view", "(", "fea", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "regressor", "(", "fea", ")", "\n", "\n", "return", "fea", ",", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.kernel_estimator.AllargsKernelEstimator.__init__": [[173, 212], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_nc", ",", "nf", ",", "use_bn", "=", "True", ")", ":", "\n", "        ", "super", "(", "AllargsKernelEstimator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_bn", "=", "use_bn", "\n", "# Patch_size: 64x64", "\n", "# [nf, 64, 64]", "\n", "self", ".", "conv0_0", "=", "nn", ".", "Conv2d", "(", "in_nc", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "conv0_1", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "True", ")", "\n", "if", "use_bn", ":", "\n", "            ", "self", ".", "bn0_1", "=", "nn", ".", "BatchNorm2d", "(", "nf", ",", "affine", "=", "True", ")", "\n", "# [2 * nf, 32, 32]", "\n", "", "self", ".", "conv1_0", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", "*", "2", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "if", "use_bn", ":", "\n", "            ", "self", ".", "bn1_0", "=", "nn", ".", "BatchNorm2d", "(", "nf", "*", "2", ",", "affine", "=", "True", ")", "\n", "", "self", ".", "conv1_1", "=", "nn", ".", "Conv2d", "(", "nf", "*", "2", ",", "nf", "*", "2", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "True", ")", "\n", "if", "use_bn", ":", "\n", "            ", "self", ".", "bn1_1", "=", "nn", ".", "BatchNorm2d", "(", "nf", "*", "2", ",", "affine", "=", "True", ")", "\n", "# [4 * nf, 16, 16]", "\n", "", "self", ".", "conv2_0", "=", "nn", ".", "Conv2d", "(", "nf", "*", "2", ",", "nf", "*", "4", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "if", "use_bn", ":", "\n", "            ", "self", ".", "bn2_0", "=", "nn", ".", "BatchNorm2d", "(", "nf", "*", "4", ",", "affine", "=", "True", ")", "\n", "", "self", ".", "conv2_1", "=", "nn", ".", "Conv2d", "(", "nf", "*", "4", ",", "nf", "*", "4", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "True", ")", "\n", "if", "use_bn", ":", "\n", "            ", "self", ".", "bn2_1", "=", "nn", ".", "BatchNorm2d", "(", "nf", "*", "4", ",", "affine", "=", "True", ")", "\n", "# [8 * nf, 8, 8]", "\n", "", "self", ".", "conv3_0", "=", "nn", ".", "Conv2d", "(", "nf", "*", "4", ",", "nf", "*", "4", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "if", "use_bn", ":", "\n", "            ", "self", ".", "bn3_0", "=", "nn", ".", "BatchNorm2d", "(", "nf", "*", "4", ",", "affine", "=", "True", ")", "\n", "", "self", ".", "conv3_1", "=", "nn", ".", "Conv2d", "(", "nf", "*", "4", ",", "nf", "*", "4", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "True", ")", "\n", "if", "use_bn", ":", "\n", "            ", "self", ".", "bn3_1", "=", "nn", ".", "BatchNorm2d", "(", "nf", "*", "4", ",", "affine", "=", "True", ")", "\n", "\n", "# Classification", "\n", "", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "nf", "*", "4", ",", "nf", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "nn", ".", "Linear", "(", "nf", ",", "4", ")", "\n", ")", "\n", "# Regression", "\n", "self", ".", "regressor", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "nf", "*", "4", ",", "nf", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "nn", ".", "Linear", "(", "nf", ",", "3", ")", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.kernel_estimator.AllargsKernelEstimator.forward": [[213, 251], ["kernel_estimator.AllargsKernelEstimator.view", "kernel_estimator.AllargsKernelEstimator.classifier", "kernel_estimator.AllargsKernelEstimator.regressor", "kernel_estimator.AllargsKernelEstimator.relu", "kernel_estimator.AllargsKernelEstimator.relu", "kernel_estimator.AllargsKernelEstimator.relu", "kernel_estimator.AllargsKernelEstimator.relu", "kernel_estimator.AllargsKernelEstimator.relu", "kernel_estimator.AllargsKernelEstimator.relu", "kernel_estimator.AllargsKernelEstimator.relu", "kernel_estimator.AllargsKernelEstimator.relu", "kernel_estimator.AllargsKernelEstimator.relu", "kernel_estimator.AllargsKernelEstimator.relu", "kernel_estimator.AllargsKernelEstimator.relu", "kernel_estimator.AllargsKernelEstimator.relu", "kernel_estimator.AllargsKernelEstimator.relu", "kernel_estimator.AllargsKernelEstimator.relu", "kernel_estimator.AllargsKernelEstimator.relu", "kernel_estimator.AllargsKernelEstimator.relu", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "kernel_estimator.AllargsKernelEstimator.size", "kernel_estimator.AllargsKernelEstimator.conv0_0", "kernel_estimator.AllargsKernelEstimator.bn0_1", "kernel_estimator.AllargsKernelEstimator.bn1_0", "kernel_estimator.AllargsKernelEstimator.bn1_1", "kernel_estimator.AllargsKernelEstimator.bn2_0", "kernel_estimator.AllargsKernelEstimator.bn2_1", "kernel_estimator.AllargsKernelEstimator.bn3_0", "kernel_estimator.AllargsKernelEstimator.bn3_1", "kernel_estimator.AllargsKernelEstimator.conv0_0", "kernel_estimator.AllargsKernelEstimator.conv0_1", "kernel_estimator.AllargsKernelEstimator.conv1_0", "kernel_estimator.AllargsKernelEstimator.conv1_1", "kernel_estimator.AllargsKernelEstimator.conv2_0", "kernel_estimator.AllargsKernelEstimator.conv2_1", "kernel_estimator.AllargsKernelEstimator.conv3_0", "kernel_estimator.AllargsKernelEstimator.conv3_1", "kernel_estimator.AllargsKernelEstimator.conv0_1", "kernel_estimator.AllargsKernelEstimator.conv1_0", "kernel_estimator.AllargsKernelEstimator.conv1_1", "kernel_estimator.AllargsKernelEstimator.conv2_0", "kernel_estimator.AllargsKernelEstimator.conv2_1", "kernel_estimator.AllargsKernelEstimator.conv3_0", "kernel_estimator.AllargsKernelEstimator.conv3_1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Forward function of classifier\n        :param x: concatenated input\n        :return:\n        \"\"\"", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "fea", "=", "self", ".", "relu", "(", "self", ".", "conv0_0", "(", "x", ")", ")", "\n", "fea", "=", "self", ".", "relu", "(", "self", ".", "bn0_1", "(", "self", ".", "conv0_1", "(", "fea", ")", ")", ")", "\n", "\n", "fea", "=", "self", ".", "relu", "(", "self", ".", "bn1_0", "(", "self", ".", "conv1_0", "(", "fea", ")", ")", ")", "\n", "fea", "=", "self", ".", "relu", "(", "self", ".", "bn1_1", "(", "self", ".", "conv1_1", "(", "fea", ")", ")", ")", "\n", "\n", "fea", "=", "self", ".", "relu", "(", "self", ".", "bn2_0", "(", "self", ".", "conv2_0", "(", "fea", ")", ")", ")", "\n", "fea", "=", "self", ".", "relu", "(", "self", ".", "bn2_1", "(", "self", ".", "conv2_1", "(", "fea", ")", ")", ")", "\n", "\n", "fea", "=", "self", ".", "relu", "(", "self", ".", "bn3_0", "(", "self", ".", "conv3_0", "(", "fea", ")", ")", ")", "\n", "fea", "=", "self", ".", "relu", "(", "self", ".", "bn3_1", "(", "self", ".", "conv3_1", "(", "fea", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "fea", "=", "self", ".", "relu", "(", "self", ".", "conv0_0", "(", "x", ")", ")", "\n", "fea", "=", "self", ".", "relu", "(", "self", ".", "conv0_1", "(", "fea", ")", ")", "\n", "\n", "fea", "=", "self", ".", "relu", "(", "self", ".", "conv1_0", "(", "fea", ")", ")", "\n", "fea", "=", "self", ".", "relu", "(", "self", ".", "conv1_1", "(", "fea", ")", ")", "\n", "\n", "fea", "=", "self", ".", "relu", "(", "self", ".", "conv2_0", "(", "fea", ")", ")", "\n", "fea", "=", "self", ".", "relu", "(", "self", ".", "conv2_1", "(", "fea", ")", ")", "\n", "\n", "fea", "=", "self", ".", "relu", "(", "self", ".", "conv3_0", "(", "fea", ")", ")", "\n", "fea", "=", "self", ".", "relu", "(", "self", ".", "conv3_1", "(", "fea", ")", ")", "\n", "\n", "", "fea", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "(", "fea", ")", "\n", "fea", "=", "fea", ".", "view", "(", "fea", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "out1", "=", "self", ".", "classifier", "(", "fea", ")", "\n", "out2", "=", "self", ".", "regressor", "(", "fea", ")", "\n", "\n", "return", "fea", ",", "out1", ",", "out2", "\n", "", "", ""]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.EDVR_arch.Predeblur_ResNet_Pyramid.__init__": [[14, 40], ["torch.Module.__init__", "functools.partial", "functools.partial.", "functools.partial.", "functools.partial.", "functools.partial.", "functools.partial.", "functools.partial.", "functools.partial.", "functools.partial.", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nf", "=", "128", ",", "HR_in", "=", "False", ")", ":", "\n", "        ", "'''\n        HR_in: True if the inputs are high spatial size\n        '''", "\n", "\n", "super", "(", "Predeblur_ResNet_Pyramid", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "HR_in", "=", "True", "if", "HR_in", "else", "False", "\n", "if", "self", ".", "HR_in", ":", "\n", "            ", "self", ".", "conv_first_1", "=", "nn", ".", "Conv2d", "(", "3", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "conv_first_2", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "conv_first_3", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv_first", "=", "nn", ".", "Conv2d", "(", "3", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "", "basic_block", "=", "functools", ".", "partial", "(", "arch_util", ".", "ResidualBlock_noBN", ",", "nf", "=", "nf", ")", "\n", "self", ".", "RB_L1_1", "=", "basic_block", "(", ")", "\n", "self", ".", "RB_L1_2", "=", "basic_block", "(", ")", "\n", "self", ".", "RB_L1_3", "=", "basic_block", "(", ")", "\n", "self", ".", "RB_L1_4", "=", "basic_block", "(", ")", "\n", "self", ".", "RB_L1_5", "=", "basic_block", "(", ")", "\n", "self", ".", "RB_L2_1", "=", "basic_block", "(", ")", "\n", "self", ".", "RB_L2_2", "=", "basic_block", "(", ")", "\n", "self", ".", "RB_L3_1", "=", "basic_block", "(", ")", "\n", "self", ".", "deblur_L2_conv", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "deblur_L3_conv", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "lrelu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.EDVR_arch.Predeblur_ResNet_Pyramid.forward": [[41, 58], ["EDVR_arch.Predeblur_ResNet_Pyramid.lrelu", "EDVR_arch.Predeblur_ResNet_Pyramid.lrelu", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "EDVR_arch.Predeblur_ResNet_Pyramid.RB_L1_5", "EDVR_arch.Predeblur_ResNet_Pyramid.lrelu", "EDVR_arch.Predeblur_ResNet_Pyramid.lrelu", "EDVR_arch.Predeblur_ResNet_Pyramid.lrelu", "EDVR_arch.Predeblur_ResNet_Pyramid.lrelu", "EDVR_arch.Predeblur_ResNet_Pyramid.deblur_L2_conv", "EDVR_arch.Predeblur_ResNet_Pyramid.deblur_L3_conv", "EDVR_arch.Predeblur_ResNet_Pyramid.RB_L3_1", "EDVR_arch.Predeblur_ResNet_Pyramid.RB_L2_1", "EDVR_arch.Predeblur_ResNet_Pyramid.RB_L2_2", "EDVR_arch.Predeblur_ResNet_Pyramid.RB_L1_2", "EDVR_arch.Predeblur_ResNet_Pyramid.RB_L1_4", "EDVR_arch.Predeblur_ResNet_Pyramid.conv_first_1", "EDVR_arch.Predeblur_ResNet_Pyramid.conv_first_2", "EDVR_arch.Predeblur_ResNet_Pyramid.conv_first_3", "EDVR_arch.Predeblur_ResNet_Pyramid.conv_first", "EDVR_arch.Predeblur_ResNet_Pyramid.RB_L1_1", "EDVR_arch.Predeblur_ResNet_Pyramid.RB_L1_3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "HR_in", ":", "\n", "            ", "L1_fea", "=", "self", ".", "lrelu", "(", "self", ".", "conv_first_1", "(", "x", ")", ")", "\n", "L1_fea", "=", "self", ".", "lrelu", "(", "self", ".", "conv_first_2", "(", "L1_fea", ")", ")", "\n", "L1_fea", "=", "self", ".", "lrelu", "(", "self", ".", "conv_first_3", "(", "L1_fea", ")", ")", "\n", "", "else", ":", "\n", "            ", "L1_fea", "=", "self", ".", "lrelu", "(", "self", ".", "conv_first", "(", "x", ")", ")", "\n", "", "L2_fea", "=", "self", ".", "lrelu", "(", "self", ".", "deblur_L2_conv", "(", "L1_fea", ")", ")", "\n", "L3_fea", "=", "self", ".", "lrelu", "(", "self", ".", "deblur_L3_conv", "(", "L2_fea", ")", ")", "\n", "L3_fea", "=", "F", ".", "interpolate", "(", "self", ".", "RB_L3_1", "(", "L3_fea", ")", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "False", ")", "\n", "L2_fea", "=", "self", ".", "RB_L2_1", "(", "L2_fea", ")", "+", "L3_fea", "\n", "L2_fea", "=", "F", ".", "interpolate", "(", "self", ".", "RB_L2_2", "(", "L2_fea", ")", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "False", ")", "\n", "L1_fea", "=", "self", ".", "RB_L1_2", "(", "self", ".", "RB_L1_1", "(", "L1_fea", ")", ")", "+", "L2_fea", "\n", "out", "=", "self", ".", "RB_L1_5", "(", "self", ".", "RB_L1_4", "(", "self", ".", "RB_L1_3", "(", "L1_fea", ")", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.EDVR_arch.PCD_Align.__init__": [[65, 94], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "DCN", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "DCN", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "DCN", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "DCN", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__"], ["def", "__init__", "(", "self", ",", "nf", "=", "64", ",", "groups", "=", "8", ")", ":", "\n", "        ", "super", "(", "PCD_Align", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# L3: level 3, 1/4 spatial size", "\n", "self", ".", "L3_offset_conv1", "=", "nn", ".", "Conv2d", "(", "nf", "*", "2", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "# concat for diff", "\n", "self", ".", "L3_offset_conv2", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "L3_dcnpack", "=", "DCN", "(", "nf", ",", "nf", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "deformable_groups", "=", "groups", ",", "\n", "extra_offset_mask", "=", "True", ")", "\n", "# L2: level 2, 1/2 spatial size", "\n", "self", ".", "L2_offset_conv1", "=", "nn", ".", "Conv2d", "(", "nf", "*", "2", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "# concat for diff", "\n", "self", ".", "L2_offset_conv2", "=", "nn", ".", "Conv2d", "(", "nf", "*", "2", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "# concat for offset", "\n", "self", ".", "L2_offset_conv3", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "L2_dcnpack", "=", "DCN", "(", "nf", ",", "nf", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "deformable_groups", "=", "groups", ",", "\n", "extra_offset_mask", "=", "True", ")", "\n", "self", ".", "L2_fea_conv", "=", "nn", ".", "Conv2d", "(", "nf", "*", "2", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "# concat for fea", "\n", "# L1: level 1, original spatial size", "\n", "self", ".", "L1_offset_conv1", "=", "nn", ".", "Conv2d", "(", "nf", "*", "2", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "# concat for diff", "\n", "self", ".", "L1_offset_conv2", "=", "nn", ".", "Conv2d", "(", "nf", "*", "2", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "# concat for offset", "\n", "self", ".", "L1_offset_conv3", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "L1_dcnpack", "=", "DCN", "(", "nf", ",", "nf", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "deformable_groups", "=", "groups", ",", "\n", "extra_offset_mask", "=", "True", ")", "\n", "self", ".", "L1_fea_conv", "=", "nn", ".", "Conv2d", "(", "nf", "*", "2", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "# concat for fea", "\n", "# Cascading DCN", "\n", "self", ".", "cas_offset_conv1", "=", "nn", ".", "Conv2d", "(", "nf", "*", "2", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "# concat for diff", "\n", "self", ".", "cas_offset_conv2", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "cas_dcnpack", "=", "DCN", "(", "nf", ",", "nf", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "deformable_groups", "=", "groups", ",", "\n", "extra_offset_mask", "=", "True", ")", "\n", "\n", "self", ".", "lrelu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.EDVR_arch.PCD_Align.forward": [[95, 129], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "EDVR_arch.PCD_Align.lrelu", "EDVR_arch.PCD_Align.lrelu", "EDVR_arch.PCD_Align.lrelu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "EDVR_arch.PCD_Align.lrelu", "torch.interpolate", "torch.interpolate", "torch.interpolate", "EDVR_arch.PCD_Align.lrelu", "EDVR_arch.PCD_Align.lrelu", "EDVR_arch.PCD_Align.L2_dcnpack", "torch.interpolate", "torch.interpolate", "torch.interpolate", "EDVR_arch.PCD_Align.lrelu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "EDVR_arch.PCD_Align.lrelu", "torch.interpolate", "torch.interpolate", "torch.interpolate", "EDVR_arch.PCD_Align.lrelu", "EDVR_arch.PCD_Align.lrelu", "EDVR_arch.PCD_Align.L1_dcnpack", "torch.interpolate", "torch.interpolate", "torch.interpolate", "EDVR_arch.PCD_Align.L1_fea_conv", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "EDVR_arch.PCD_Align.lrelu", "EDVR_arch.PCD_Align.lrelu", "EDVR_arch.PCD_Align.lrelu", "EDVR_arch.PCD_Align.L3_offset_conv1", "EDVR_arch.PCD_Align.L3_offset_conv2", "EDVR_arch.PCD_Align.L3_dcnpack", "EDVR_arch.PCD_Align.L2_offset_conv1", "EDVR_arch.PCD_Align.L2_offset_conv2", "EDVR_arch.PCD_Align.L2_offset_conv3", "EDVR_arch.PCD_Align.L2_fea_conv", "EDVR_arch.PCD_Align.L1_offset_conv1", "EDVR_arch.PCD_Align.L1_offset_conv2", "EDVR_arch.PCD_Align.L1_offset_conv3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "EDVR_arch.PCD_Align.cas_offset_conv1", "EDVR_arch.PCD_Align.cas_offset_conv2", "EDVR_arch.PCD_Align.cas_dcnpack", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "nbr_fea_l", ",", "ref_fea_l", ")", ":", "\n", "        ", "'''align other neighboring frames to the reference frame in the feature level\n        nbr_fea_l, ref_fea_l: [L1, L2, L3], each with [B,C,H,W] features\n        '''", "\n", "# L3", "\n", "L3_offset", "=", "torch", ".", "cat", "(", "[", "nbr_fea_l", "[", "2", "]", ",", "ref_fea_l", "[", "2", "]", "]", ",", "dim", "=", "1", ")", "\n", "L3_offset", "=", "self", ".", "lrelu", "(", "self", ".", "L3_offset_conv1", "(", "L3_offset", ")", ")", "\n", "L3_offset", "=", "self", ".", "lrelu", "(", "self", ".", "L3_offset_conv2", "(", "L3_offset", ")", ")", "\n", "L3_fea", "=", "self", ".", "lrelu", "(", "self", ".", "L3_dcnpack", "(", "[", "nbr_fea_l", "[", "2", "]", ",", "L3_offset", "]", ")", ")", "\n", "# L2", "\n", "L2_offset", "=", "torch", ".", "cat", "(", "[", "nbr_fea_l", "[", "1", "]", ",", "ref_fea_l", "[", "1", "]", "]", ",", "dim", "=", "1", ")", "\n", "L2_offset", "=", "self", ".", "lrelu", "(", "self", ".", "L2_offset_conv1", "(", "L2_offset", ")", ")", "\n", "L3_offset", "=", "F", ".", "interpolate", "(", "L3_offset", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "L2_offset", "=", "self", ".", "lrelu", "(", "self", ".", "L2_offset_conv2", "(", "torch", ".", "cat", "(", "[", "L2_offset", ",", "L3_offset", "*", "2", "]", ",", "dim", "=", "1", ")", ")", ")", "\n", "L2_offset", "=", "self", ".", "lrelu", "(", "self", ".", "L2_offset_conv3", "(", "L2_offset", ")", ")", "\n", "L2_fea", "=", "self", ".", "L2_dcnpack", "(", "[", "nbr_fea_l", "[", "1", "]", ",", "L2_offset", "]", ")", "\n", "L3_fea", "=", "F", ".", "interpolate", "(", "L3_fea", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "L2_fea", "=", "self", ".", "lrelu", "(", "self", ".", "L2_fea_conv", "(", "torch", ".", "cat", "(", "[", "L2_fea", ",", "L3_fea", "]", ",", "dim", "=", "1", ")", ")", ")", "\n", "# L1", "\n", "L1_offset", "=", "torch", ".", "cat", "(", "[", "nbr_fea_l", "[", "0", "]", ",", "ref_fea_l", "[", "0", "]", "]", ",", "dim", "=", "1", ")", "\n", "L1_offset", "=", "self", ".", "lrelu", "(", "self", ".", "L1_offset_conv1", "(", "L1_offset", ")", ")", "\n", "L2_offset", "=", "F", ".", "interpolate", "(", "L2_offset", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "L1_offset", "=", "self", ".", "lrelu", "(", "self", ".", "L1_offset_conv2", "(", "torch", ".", "cat", "(", "[", "L1_offset", ",", "L2_offset", "*", "2", "]", ",", "dim", "=", "1", ")", ")", ")", "\n", "L1_offset", "=", "self", ".", "lrelu", "(", "self", ".", "L1_offset_conv3", "(", "L1_offset", ")", ")", "\n", "L1_fea", "=", "self", ".", "L1_dcnpack", "(", "[", "nbr_fea_l", "[", "0", "]", ",", "L1_offset", "]", ")", "\n", "L2_fea", "=", "F", ".", "interpolate", "(", "L2_fea", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "L1_fea", "=", "self", ".", "L1_fea_conv", "(", "torch", ".", "cat", "(", "[", "L1_fea", ",", "L2_fea", "]", ",", "dim", "=", "1", ")", ")", "\n", "# Cascading", "\n", "offset", "=", "torch", ".", "cat", "(", "[", "L1_fea", ",", "ref_fea_l", "[", "0", "]", "]", ",", "dim", "=", "1", ")", "\n", "offset", "=", "self", ".", "lrelu", "(", "self", ".", "cas_offset_conv1", "(", "offset", ")", ")", "\n", "offset", "=", "self", ".", "lrelu", "(", "self", ".", "cas_offset_conv2", "(", "offset", ")", ")", "\n", "L1_fea", "=", "self", ".", "lrelu", "(", "self", ".", "cas_dcnpack", "(", "[", "L1_fea", ",", "offset", "]", ")", ")", "\n", "\n", "return", "L1_fea", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.EDVR_arch.TSA_Fusion.__init__": [[137, 162], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__"], ["def", "__init__", "(", "self", ",", "nf", "=", "64", ",", "nframes", "=", "5", ",", "center", "=", "2", ")", ":", "\n", "        ", "super", "(", "TSA_Fusion", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "center", "=", "center", "\n", "# temporal attention (before fusion conv)", "\n", "self", ".", "tAtt_1", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "tAtt_2", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "\n", "# fusion conv: using 1x1 to save parameters and computation", "\n", "self", ".", "fea_fusion", "=", "nn", ".", "Conv2d", "(", "nframes", "*", "nf", ",", "nf", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "\n", "# spatial attention (after fusion conv)", "\n", "self", ".", "sAtt_1", "=", "nn", ".", "Conv2d", "(", "nframes", "*", "nf", ",", "nf", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "sAtt_2", "=", "nn", ".", "Conv2d", "(", "nf", "*", "2", ",", "nf", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "sAtt_3", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "sAtt_4", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "sAtt_5", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "sAtt_L1", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "sAtt_L2", "=", "nn", ".", "Conv2d", "(", "nf", "*", "2", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "sAtt_L3", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "sAtt_add_1", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "sAtt_add_2", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "lrelu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.EDVR_arch.TSA_Fusion.forward": [[163, 204], ["aligned_fea.size", "EDVR_arch.TSA_Fusion.tAtt_2", "EDVR_arch.TSA_Fusion.tAtt_1().view", "range", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "cor_prob.unsqueeze().repeat().view.unsqueeze().repeat().view.unsqueeze().repeat().view", "EDVR_arch.TSA_Fusion.lrelu", "EDVR_arch.TSA_Fusion.lrelu", "EDVR_arch.TSA_Fusion.maxpool", "EDVR_arch.TSA_Fusion.avgpool", "EDVR_arch.TSA_Fusion.lrelu", "EDVR_arch.TSA_Fusion.lrelu", "EDVR_arch.TSA_Fusion.maxpool", "EDVR_arch.TSA_Fusion.avgpool", "EDVR_arch.TSA_Fusion.lrelu", "EDVR_arch.TSA_Fusion.lrelu", "torch.interpolate", "torch.interpolate", "torch.interpolate", "EDVR_arch.TSA_Fusion.lrelu", "EDVR_arch.TSA_Fusion.lrelu", "torch.interpolate", "torch.interpolate", "torch.interpolate", "EDVR_arch.TSA_Fusion.sAtt_5", "EDVR_arch.TSA_Fusion.sAtt_add_2", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "aligned_fea[].clone", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "cor_l.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "aligned_fea.view", "EDVR_arch.TSA_Fusion.fea_fusion", "EDVR_arch.TSA_Fusion.sAtt_1", "EDVR_arch.TSA_Fusion.sAtt_2", "EDVR_arch.TSA_Fusion.sAtt_L1", "EDVR_arch.TSA_Fusion.sAtt_L2", "EDVR_arch.TSA_Fusion.sAtt_L3", "EDVR_arch.TSA_Fusion.sAtt_3", "EDVR_arch.TSA_Fusion.sAtt_4", "EDVR_arch.TSA_Fusion.lrelu", "EDVR_arch.TSA_Fusion.tAtt_1", "cor_prob.unsqueeze().repeat().view.unsqueeze().repeat().view.unsqueeze().repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "EDVR_arch.TSA_Fusion.sAtt_add_1", "aligned_fea.view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "cor_prob.unsqueeze().repeat().view.unsqueeze().repeat().view.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "aligned_fea", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", ",", "H", ",", "W", "=", "aligned_fea", ".", "size", "(", ")", "# N video frames", "\n", "#### temporal attention", "\n", "emb_ref", "=", "self", ".", "tAtt_2", "(", "aligned_fea", "[", ":", ",", "self", ".", "center", ",", ":", ",", ":", ",", ":", "]", ".", "clone", "(", ")", ")", "\n", "emb", "=", "self", ".", "tAtt_1", "(", "aligned_fea", ".", "view", "(", "-", "1", ",", "C", ",", "H", ",", "W", ")", ")", ".", "view", "(", "B", ",", "N", ",", "-", "1", ",", "H", ",", "W", ")", "# [B, N, C(nf), H, W]", "\n", "\n", "cor_l", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "            ", "emb_nbr", "=", "emb", "[", ":", ",", "i", ",", ":", ",", ":", ",", ":", "]", "\n", "cor_tmp", "=", "torch", ".", "sum", "(", "emb_nbr", "*", "emb_ref", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", "# B, 1, H, W", "\n", "cor_l", ".", "append", "(", "cor_tmp", ")", "\n", "", "cor_prob", "=", "torch", ".", "sigmoid", "(", "torch", ".", "cat", "(", "cor_l", ",", "dim", "=", "1", ")", ")", "# B, N, H, W", "\n", "cor_prob", "=", "cor_prob", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "C", ",", "1", ",", "1", ")", ".", "view", "(", "B", ",", "-", "1", ",", "H", ",", "W", ")", "\n", "aligned_fea", "=", "aligned_fea", ".", "view", "(", "B", ",", "-", "1", ",", "H", ",", "W", ")", "*", "cor_prob", "\n", "\n", "#### fusion", "\n", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "fea_fusion", "(", "aligned_fea", ")", ")", "\n", "\n", "#### spatial attention", "\n", "att", "=", "self", ".", "lrelu", "(", "self", ".", "sAtt_1", "(", "aligned_fea", ")", ")", "\n", "att_max", "=", "self", ".", "maxpool", "(", "att", ")", "\n", "att_avg", "=", "self", ".", "avgpool", "(", "att", ")", "\n", "att", "=", "self", ".", "lrelu", "(", "self", ".", "sAtt_2", "(", "torch", ".", "cat", "(", "[", "att_max", ",", "att_avg", "]", ",", "dim", "=", "1", ")", ")", ")", "\n", "# pyramid levels", "\n", "att_L", "=", "self", ".", "lrelu", "(", "self", ".", "sAtt_L1", "(", "att", ")", ")", "\n", "att_max", "=", "self", ".", "maxpool", "(", "att_L", ")", "\n", "att_avg", "=", "self", ".", "avgpool", "(", "att_L", ")", "\n", "att_L", "=", "self", ".", "lrelu", "(", "self", ".", "sAtt_L2", "(", "torch", ".", "cat", "(", "[", "att_max", ",", "att_avg", "]", ",", "dim", "=", "1", ")", ")", ")", "\n", "att_L", "=", "self", ".", "lrelu", "(", "self", ".", "sAtt_L3", "(", "att_L", ")", ")", "\n", "att_L", "=", "F", ".", "interpolate", "(", "att_L", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n", "att", "=", "self", ".", "lrelu", "(", "self", ".", "sAtt_3", "(", "att", ")", ")", "\n", "att", "=", "att", "+", "att_L", "\n", "att", "=", "self", ".", "lrelu", "(", "self", ".", "sAtt_4", "(", "att", ")", ")", "\n", "att", "=", "F", ".", "interpolate", "(", "att", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "att", "=", "self", ".", "sAtt_5", "(", "att", ")", "\n", "att_add", "=", "self", ".", "sAtt_add_2", "(", "self", ".", "lrelu", "(", "self", ".", "sAtt_add_1", "(", "att", ")", ")", ")", "\n", "att", "=", "torch", ".", "sigmoid", "(", "att", ")", "\n", "\n", "fea", "=", "fea", "*", "att", "*", "2", "+", "att_add", "\n", "return", "fea", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.EDVR_arch.EDVR.__init__": [[207, 253], ["torch.Module.__init__", "functools.partial", "models.make_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "EDVR_arch.PCD_Align", "models.make_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.PixelShuffle", "torch.PixelShuffle", "torch.PixelShuffle", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "EDVR_arch.Predeblur_ResNet_Pyramid", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "EDVR_arch.TSA_Fusion", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__", "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.arch_util.make_layer", "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.arch_util.make_layer"], ["    ", "def", "__init__", "(", "self", ",", "nf", "=", "64", ",", "nframes", "=", "5", ",", "groups", "=", "8", ",", "front_RBs", "=", "5", ",", "back_RBs", "=", "10", ",", "center", "=", "None", ",", "\n", "predeblur", "=", "False", ",", "HR_in", "=", "False", ",", "w_TSA", "=", "True", ",", "scale", "=", "4", ")", ":", "\n", "        ", "super", "(", "EDVR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nf", "=", "nf", "\n", "self", ".", "center", "=", "nframes", "//", "2", "if", "center", "is", "None", "else", "center", "\n", "self", ".", "is_predeblur", "=", "True", "if", "predeblur", "else", "False", "\n", "self", ".", "HR_in", "=", "True", "if", "HR_in", "else", "False", "\n", "self", ".", "w_TSA", "=", "w_TSA", "\n", "self", ".", "scale", "=", "scale", "\n", "ResidualBlock_noBN_f", "=", "functools", ".", "partial", "(", "arch_util", ".", "ResidualBlock_noBN", ",", "nf", "=", "nf", ")", "\n", "\n", "#### extract features (for each frame)", "\n", "if", "self", ".", "is_predeblur", ":", "\n", "            ", "self", ".", "pre_deblur", "=", "Predeblur_ResNet_Pyramid", "(", "nf", "=", "nf", ",", "HR_in", "=", "self", ".", "HR_in", ")", "\n", "self", ".", "conv_1x1", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "HR_in", ":", "\n", "                ", "self", ".", "conv_first_1", "=", "nn", ".", "Conv2d", "(", "3", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "conv_first_2", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "conv_first_3", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "conv_first", "=", "nn", ".", "Conv2d", "(", "3", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "", "", "self", ".", "feature_extraction", "=", "arch_util", ".", "make_layer", "(", "ResidualBlock_noBN_f", ",", "front_RBs", ")", "\n", "self", ".", "fea_L2_conv1", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "fea_L2_conv2", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "fea_L3_conv1", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "fea_L3_conv2", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "pcd_align", "=", "PCD_Align", "(", "nf", "=", "nf", ",", "groups", "=", "groups", ")", "\n", "if", "self", ".", "w_TSA", ":", "\n", "            ", "self", ".", "tsa_fusion", "=", "TSA_Fusion", "(", "nf", "=", "nf", ",", "nframes", "=", "nframes", ",", "center", "=", "self", ".", "center", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "tsa_fusion", "=", "nn", ".", "Conv2d", "(", "nframes", "*", "nf", ",", "nf", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "\n", "#### reconstruction", "\n", "", "self", ".", "recon_trunk", "=", "arch_util", ".", "make_layer", "(", "ResidualBlock_noBN_f", ",", "back_RBs", ")", "\n", "#### upsampling", "\n", "if", "self", ".", "scale", "==", "4", ":", "\n", "            ", "self", ".", "upconv1", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", "*", "4", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "", "self", ".", "upconv2", "=", "nn", ".", "Conv2d", "(", "nf", ",", "64", "*", "4", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "pixel_shuffle", "=", "nn", ".", "PixelShuffle", "(", "2", ")", "\n", "self", ".", "HRconv", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "conv_last", "=", "nn", ".", "Conv2d", "(", "64", ",", "3", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "\n", "#### activation function", "\n", "self", ".", "lrelu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.EDVR_arch.EDVR.forward": [[254, 314], ["x.size", "x[].contiguous", "EDVR_arch.EDVR.feature_extraction", "EDVR_arch.EDVR.lrelu", "EDVR_arch.EDVR.lrelu", "EDVR_arch.EDVR.lrelu", "EDVR_arch.EDVR.lrelu", "EDVR_arch.EDVR.view", "L2_fea.view.view.view", "L3_fea.view.view.view", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "EDVR_arch.EDVR.tsa_fusion", "EDVR_arch.EDVR.recon_trunk", "EDVR_arch.EDVR.lrelu", "EDVR_arch.EDVR.lrelu", "EDVR_arch.EDVR.conv_last", "EDVR_arch.EDVR.pre_deblur", "EDVR_arch.EDVR.conv_1x1", "EDVR_arch.EDVR.fea_L2_conv1", "EDVR_arch.EDVR.fea_L2_conv2", "EDVR_arch.EDVR.fea_L3_conv1", "EDVR_arch.EDVR.fea_L3_conv2", "L1_fea[].clone", "L2_fea[].clone", "L3_fea[].clone", "aligned_fea.view.view.append", "aligned_fea.view.view.view", "EDVR_arch.EDVR.lrelu", "EDVR_arch.EDVR.pixel_shuffle", "EDVR_arch.EDVR.HRconv", "torch.interpolate", "torch.interpolate", "torch.interpolate", "x.view", "EDVR_arch.EDVR.lrelu", "EDVR_arch.EDVR.lrelu", "EDVR_arch.EDVR.lrelu", "EDVR_arch.EDVR.lrelu", "L1_fea[].clone", "L2_fea[].clone", "L3_fea[].clone", "EDVR_arch.EDVR.pcd_align", "EDVR_arch.EDVR.pixel_shuffle", "EDVR_arch.EDVR.upconv2", "EDVR_arch.EDVR.conv_first_1", "EDVR_arch.EDVR.conv_first_2", "EDVR_arch.EDVR.conv_first_3", "EDVR_arch.EDVR.conv_first", "EDVR_arch.EDVR.upconv1", "x.view", "x.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "# N video frames", "\n", "x_center", "=", "x", "[", ":", ",", "self", ".", "center", ",", ":", ",", ":", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "\n", "#### extract LR features", "\n", "# L1", "\n", "if", "self", ".", "is_predeblur", ":", "\n", "            ", "L1_fea", "=", "self", ".", "pre_deblur", "(", "x", ".", "view", "(", "-", "1", ",", "C", ",", "H", ",", "W", ")", ")", "\n", "L1_fea", "=", "self", ".", "conv_1x1", "(", "L1_fea", ")", "\n", "if", "self", ".", "HR_in", ":", "\n", "                ", "H", ",", "W", "=", "H", "//", "4", ",", "W", "//", "4", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "HR_in", ":", "\n", "                ", "L1_fea", "=", "self", ".", "lrelu", "(", "self", ".", "conv_first_1", "(", "x", ".", "view", "(", "-", "1", ",", "C", ",", "H", ",", "W", ")", ")", ")", "\n", "L1_fea", "=", "self", ".", "lrelu", "(", "self", ".", "conv_first_2", "(", "L1_fea", ")", ")", "\n", "L1_fea", "=", "self", ".", "lrelu", "(", "self", ".", "conv_first_3", "(", "L1_fea", ")", ")", "\n", "H", ",", "W", "=", "H", "//", "4", ",", "W", "//", "4", "\n", "", "else", ":", "\n", "                ", "L1_fea", "=", "self", ".", "lrelu", "(", "self", ".", "conv_first", "(", "x", ".", "view", "(", "-", "1", ",", "C", ",", "H", ",", "W", ")", ")", ")", "\n", "", "", "L1_fea", "=", "self", ".", "feature_extraction", "(", "L1_fea", ")", "\n", "# L2", "\n", "L2_fea", "=", "self", ".", "lrelu", "(", "self", ".", "fea_L2_conv1", "(", "L1_fea", ")", ")", "\n", "L2_fea", "=", "self", ".", "lrelu", "(", "self", ".", "fea_L2_conv2", "(", "L2_fea", ")", ")", "\n", "# L3", "\n", "L3_fea", "=", "self", ".", "lrelu", "(", "self", ".", "fea_L3_conv1", "(", "L2_fea", ")", ")", "\n", "L3_fea", "=", "self", ".", "lrelu", "(", "self", ".", "fea_L3_conv2", "(", "L3_fea", ")", ")", "\n", "\n", "L1_fea", "=", "L1_fea", ".", "view", "(", "B", ",", "N", ",", "-", "1", ",", "H", ",", "W", ")", "\n", "L2_fea", "=", "L2_fea", ".", "view", "(", "B", ",", "N", ",", "-", "1", ",", "H", "//", "2", ",", "W", "//", "2", ")", "\n", "L3_fea", "=", "L3_fea", ".", "view", "(", "B", ",", "N", ",", "-", "1", ",", "H", "//", "4", ",", "W", "//", "4", ")", "\n", "#### pcd align", "\n", "# ref feature list", "\n", "ref_fea_l", "=", "[", "\n", "L1_fea", "[", ":", ",", "self", ".", "center", ",", ":", ",", ":", ",", ":", "]", ".", "clone", "(", ")", ",", "L2_fea", "[", ":", ",", "self", ".", "center", ",", ":", ",", ":", ",", ":", "]", ".", "clone", "(", ")", ",", "\n", "L3_fea", "[", ":", ",", "self", ".", "center", ",", ":", ",", ":", ",", ":", "]", ".", "clone", "(", ")", "\n", "]", "\n", "aligned_fea", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "            ", "nbr_fea_l", "=", "[", "\n", "L1_fea", "[", ":", ",", "i", ",", ":", ",", ":", ",", ":", "]", ".", "clone", "(", ")", ",", "L2_fea", "[", ":", ",", "i", ",", ":", ",", ":", ",", ":", "]", ".", "clone", "(", ")", ",", "\n", "L3_fea", "[", ":", ",", "i", ",", ":", ",", ":", ",", ":", "]", ".", "clone", "(", ")", "\n", "]", "\n", "aligned_fea", ".", "append", "(", "self", ".", "pcd_align", "(", "nbr_fea_l", ",", "ref_fea_l", ")", ")", "\n", "", "aligned_fea", "=", "torch", ".", "stack", "(", "aligned_fea", ",", "dim", "=", "1", ")", "# [B, N, C, H, W]", "\n", "\n", "if", "not", "self", ".", "w_TSA", ":", "\n", "            ", "aligned_fea", "=", "aligned_fea", ".", "view", "(", "B", ",", "-", "1", ",", "H", ",", "W", ")", "\n", "", "fea", "=", "self", ".", "tsa_fusion", "(", "aligned_fea", ")", "\n", "out", "=", "self", ".", "recon_trunk", "(", "fea", ")", "\n", "if", "self", ".", "scale", "==", "4", ":", "\n", "            ", "out", "=", "self", ".", "lrelu", "(", "self", ".", "pixel_shuffle", "(", "self", ".", "upconv1", "(", "out", ")", ")", ")", "\n", "", "out", "=", "self", ".", "lrelu", "(", "self", ".", "pixel_shuffle", "(", "self", ".", "upconv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "lrelu", "(", "self", ".", "HRconv", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "conv_last", "(", "out", ")", "\n", "if", "self", ".", "HR_in", ":", "\n", "            ", "base", "=", "x_center", "\n", "", "else", ":", "\n", "            ", "base", "=", "F", ".", "interpolate", "(", "x_center", ",", "scale_factor", "=", "self", ".", "scale", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "", "out", "+=", "base", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.SRResNet_arch.MSRResNet.__init__": [[10, 41], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "functools.partial", "models.make_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "models.initialize_weights", "torch.Conv2d", "torch.Conv2d", "torch.PixelShuffle", "torch.PixelShuffle", "models.initialize_weights", "torch.Conv2d", "torch.Conv2d", "torch.PixelShuffle", "torch.PixelShuffle", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.PixelShuffle", "torch.PixelShuffle"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__", "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.arch_util.make_layer", "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.arch_util.initialize_weights", "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.arch_util.initialize_weights"], ["def", "__init__", "(", "self", ",", "in_nc", "=", "3", ",", "out_nc", "=", "3", ",", "nf", "=", "64", ",", "nb", "=", "16", ",", "upscale", "=", "4", ")", ":", "\n", "        ", "super", "(", "MSRResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "upscale", "=", "upscale", "\n", "\n", "self", ".", "conv_first", "=", "nn", ".", "Conv2d", "(", "in_nc", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "basic_block", "=", "functools", ".", "partial", "(", "arch_util", ".", "ResidualBlock_noBN", ",", "nf", "=", "nf", ")", "\n", "self", ".", "recon_trunk", "=", "arch_util", ".", "make_layer", "(", "basic_block", ",", "nb", ")", "\n", "\n", "# upsampling", "\n", "if", "self", ".", "upscale", "==", "2", ":", "\n", "            ", "self", ".", "upconv1", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", "*", "4", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "pixel_shuffle", "=", "nn", ".", "PixelShuffle", "(", "2", ")", "\n", "", "elif", "self", ".", "upscale", "==", "3", ":", "\n", "            ", "self", ".", "upconv1", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", "*", "9", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "pixel_shuffle", "=", "nn", ".", "PixelShuffle", "(", "3", ")", "\n", "", "elif", "self", ".", "upscale", "==", "4", ":", "\n", "            ", "self", ".", "upconv1", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", "*", "4", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "upconv2", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", "*", "4", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "pixel_shuffle", "=", "nn", ".", "PixelShuffle", "(", "2", ")", "\n", "\n", "", "self", ".", "HRconv", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "conv_last", "=", "nn", ".", "Conv2d", "(", "nf", ",", "out_nc", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "\n", "# activation function", "\n", "self", ".", "lrelu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "\n", "# initialization", "\n", "arch_util", ".", "initialize_weights", "(", "[", "self", ".", "conv_first", ",", "self", ".", "upconv1", ",", "self", ".", "HRconv", ",", "self", ".", "conv_last", "]", ",", "\n", "0.1", ")", "\n", "if", "self", ".", "upscale", "==", "4", ":", "\n", "            ", "arch_util", ".", "initialize_weights", "(", "self", ".", "upconv2", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.SRResNet_arch.MSRResNet.forward": [[42, 56], ["SRResNet_arch.MSRResNet.lrelu", "SRResNet_arch.MSRResNet.recon_trunk", "SRResNet_arch.MSRResNet.conv_last", "torch.interpolate", "torch.interpolate", "SRResNet_arch.MSRResNet.conv_first", "SRResNet_arch.MSRResNet.lrelu", "SRResNet_arch.MSRResNet.lrelu", "SRResNet_arch.MSRResNet.lrelu", "SRResNet_arch.MSRResNet.pixel_shuffle", "SRResNet_arch.MSRResNet.pixel_shuffle", "SRResNet_arch.MSRResNet.lrelu", "SRResNet_arch.MSRResNet.HRconv", "SRResNet_arch.MSRResNet.upconv1", "SRResNet_arch.MSRResNet.upconv2", "SRResNet_arch.MSRResNet.pixel_shuffle", "SRResNet_arch.MSRResNet.upconv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "conv_first", "(", "x", ")", ")", "\n", "out", "=", "self", ".", "recon_trunk", "(", "fea", ")", "\n", "\n", "if", "self", ".", "upscale", "==", "4", ":", "\n", "            ", "out", "=", "self", ".", "lrelu", "(", "self", ".", "pixel_shuffle", "(", "self", ".", "upconv1", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "lrelu", "(", "self", ".", "pixel_shuffle", "(", "self", ".", "upconv2", "(", "out", ")", ")", ")", "\n", "", "elif", "self", ".", "upscale", "==", "3", "or", "self", ".", "upscale", "==", "2", ":", "\n", "            ", "out", "=", "self", ".", "lrelu", "(", "self", ".", "pixel_shuffle", "(", "self", ".", "upconv1", "(", "out", ")", ")", ")", "\n", "\n", "", "out", "=", "self", ".", "conv_last", "(", "self", ".", "lrelu", "(", "self", ".", "HRconv", "(", "out", ")", ")", ")", "\n", "base", "=", "F", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "self", ".", "upscale", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "out", "+=", "base", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.classifier.BasicClassifier.__init__": [[7, 42], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_nc", ",", "nf", ")", ":", "\n", "        ", "super", "(", "BasicClassifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# [64, 128, 128]", "\n", "self", ".", "conv0_0", "=", "nn", ".", "Conv2d", "(", "in_nc", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "conv0_1", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "bn0_1", "=", "nn", ".", "BatchNorm2d", "(", "nf", ",", "affine", "=", "True", ")", "\n", "# [64, 64, 64]", "\n", "self", ".", "conv1_0", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", "*", "2", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "bn1_0", "=", "nn", ".", "BatchNorm2d", "(", "nf", "*", "2", ",", "affine", "=", "True", ")", "\n", "self", ".", "conv1_1", "=", "nn", ".", "Conv2d", "(", "nf", "*", "2", ",", "nf", "*", "2", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "bn1_1", "=", "nn", ".", "BatchNorm2d", "(", "nf", "*", "2", ",", "affine", "=", "True", ")", "\n", "# [128, 32, 32]", "\n", "self", ".", "conv2_0", "=", "nn", ".", "Conv2d", "(", "nf", "*", "2", ",", "nf", "*", "4", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "bn2_0", "=", "nn", ".", "BatchNorm2d", "(", "nf", "*", "4", ",", "affine", "=", "True", ")", "\n", "self", ".", "conv2_1", "=", "nn", ".", "Conv2d", "(", "nf", "*", "4", ",", "nf", "*", "4", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "bn2_1", "=", "nn", ".", "BatchNorm2d", "(", "nf", "*", "4", ",", "affine", "=", "True", ")", "\n", "# [256, 16, 16]", "\n", "self", ".", "conv3_0", "=", "nn", ".", "Conv2d", "(", "nf", "*", "4", ",", "nf", "*", "8", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "bn3_0", "=", "nn", ".", "BatchNorm2d", "(", "nf", "*", "8", ",", "affine", "=", "True", ")", "\n", "self", ".", "conv3_1", "=", "nn", ".", "Conv2d", "(", "nf", "*", "8", ",", "nf", "*", "8", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "bn3_1", "=", "nn", ".", "BatchNorm2d", "(", "nf", "*", "8", ",", "affine", "=", "True", ")", "\n", "# [512, 8, 8]", "\n", "self", ".", "conv4_0", "=", "nn", ".", "Conv2d", "(", "nf", "*", "8", ",", "nf", "*", "8", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "bn4_0", "=", "nn", ".", "BatchNorm2d", "(", "nf", "*", "8", ",", "affine", "=", "True", ")", "\n", "self", ".", "conv4_1", "=", "nn", ".", "Conv2d", "(", "nf", "*", "8", ",", "nf", "*", "8", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "bn4_1", "=", "nn", ".", "BatchNorm2d", "(", "nf", "*", "8", ",", "affine", "=", "True", ")", "\n", "\n", "# classifier", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "nf", "*", "8", ",", "100", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "100", ",", "3", ")", "\n", ")", "\n", "\n", "self", ".", "lrelu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.archs.classifier.BasicClassifier.forward": [[44, 70], ["classifier.BasicClassifier.lrelu", "classifier.BasicClassifier.lrelu", "classifier.BasicClassifier.lrelu", "classifier.BasicClassifier.lrelu", "classifier.BasicClassifier.lrelu", "classifier.BasicClassifier.lrelu", "classifier.BasicClassifier.lrelu", "classifier.BasicClassifier.lrelu", "classifier.BasicClassifier.lrelu", "classifier.BasicClassifier.lrelu", "fea.view.view.view", "classifier.BasicClassifier.classifier", "classifier.BasicClassifier.conv0_0", "classifier.BasicClassifier.bn0_1", "classifier.BasicClassifier.bn1_0", "classifier.BasicClassifier.bn1_1", "classifier.BasicClassifier.bn2_0", "classifier.BasicClassifier.bn2_1", "classifier.BasicClassifier.bn3_0", "classifier.BasicClassifier.bn3_1", "classifier.BasicClassifier.bn4_0", "classifier.BasicClassifier.bn4_1", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "fea.view.view.size", "classifier.BasicClassifier.conv0_1", "classifier.BasicClassifier.conv1_0", "classifier.BasicClassifier.conv1_1", "classifier.BasicClassifier.conv2_0", "classifier.BasicClassifier.conv2_1", "classifier.BasicClassifier.conv3_0", "classifier.BasicClassifier.conv3_1", "classifier.BasicClassifier.conv4_0", "classifier.BasicClassifier.conv4_1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Forward function of classifier\n        :param x: concatenated input\n        :return:\n        \"\"\"", "\n", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "conv0_0", "(", "x", ")", ")", "\n", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "bn0_1", "(", "self", ".", "conv0_1", "(", "fea", ")", ")", ")", "\n", "\n", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "bn1_0", "(", "self", ".", "conv1_0", "(", "fea", ")", ")", ")", "\n", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "bn1_1", "(", "self", ".", "conv1_1", "(", "fea", ")", ")", ")", "\n", "\n", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "bn2_0", "(", "self", ".", "conv2_0", "(", "fea", ")", ")", ")", "\n", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "bn2_1", "(", "self", ".", "conv2_1", "(", "fea", ")", ")", ")", "\n", "\n", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "bn3_0", "(", "self", ".", "conv3_0", "(", "fea", ")", ")", ")", "\n", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "bn3_1", "(", "self", ".", "conv3_1", "(", "fea", ")", ")", ")", "\n", "\n", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "bn4_0", "(", "self", ".", "conv4_0", "(", "fea", ")", ")", ")", "\n", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "bn4_1", "(", "self", ".", "conv4_1", "(", "fea", ")", ")", ")", "\n", "\n", "# fea = nn.AvgPool2d(fea.size()[2])(fea)", "\n", "fea", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "(", "fea", ")", "\n", "fea", "=", "fea", ".", "view", "(", "fea", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "classifier", "(", "fea", ")", "\n", "return", "out", "", "", "", ""]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.dcn.setup.make_cuda_ext": [[5, 14], ["torch.utils.cpp_extension.CUDAExtension"], "function", ["None"], ["def", "make_cuda_ext", "(", "name", ",", "sources", ")", ":", "\n", "\n", "    ", "return", "CUDAExtension", "(", "\n", "name", "=", "'{}'", ".", "format", "(", "name", ")", ",", "sources", "=", "[", "p", "for", "p", "in", "sources", "]", ",", "extra_compile_args", "=", "{", "\n", "'cxx'", ":", "[", "]", ",", "\n", "'nvcc'", ":", "[", "\n", "'-D__CUDA_NO_HALF_OPERATORS__'", ",", "\n", "'-D__CUDA_NO_HALF_CONVERSIONS__'", ",", "\n", "'-D__CUDA_NO_HALF2_OPERATORS__'", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.dcn.deform_conv.DeformConvFunction.forward": [[16, 48], ["torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "ctx.save_for_backward", "input.new_empty", "ValueError", "deform_conv.DeformConvFunction._output_size", "input.new_empty", "input.new_empty", "min", "deform_conv_cuda.deform_conv_forward_cuda", "input.dim", "weight.size", "weight.size", "input.dim"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.dcn.deform_conv.DeformConvFunction._output_size"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "offset", ",", "weight", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "\n", "deformable_groups", "=", "1", ",", "im2col_step", "=", "64", ")", ":", "\n", "        ", "if", "input", "is", "not", "None", "and", "input", ".", "dim", "(", ")", "!=", "4", ":", "\n", "            ", "raise", "ValueError", "(", "\"Expected 4D tensor as input, got {}D tensor instead.\"", ".", "format", "(", "\n", "input", ".", "dim", "(", ")", ")", ")", "\n", "", "ctx", ".", "stride", "=", "_pair", "(", "stride", ")", "\n", "ctx", ".", "padding", "=", "_pair", "(", "padding", ")", "\n", "ctx", ".", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "ctx", ".", "groups", "=", "groups", "\n", "ctx", ".", "deformable_groups", "=", "deformable_groups", "\n", "ctx", ".", "im2col_step", "=", "im2col_step", "\n", "\n", "ctx", ".", "save_for_backward", "(", "input", ",", "offset", ",", "weight", ")", "\n", "\n", "output", "=", "input", ".", "new_empty", "(", "\n", "DeformConvFunction", ".", "_output_size", "(", "input", ",", "weight", ",", "ctx", ".", "padding", ",", "ctx", ".", "dilation", ",", "ctx", ".", "stride", ")", ")", "\n", "\n", "ctx", ".", "bufs_", "=", "[", "input", ".", "new_empty", "(", "0", ")", ",", "input", ".", "new_empty", "(", "0", ")", "]", "# columns, ones", "\n", "\n", "if", "not", "input", ".", "is_cuda", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "            ", "cur_im2col_step", "=", "min", "(", "ctx", ".", "im2col_step", ",", "input", ".", "shape", "[", "0", "]", ")", "\n", "assert", "(", "input", ".", "shape", "[", "0", "]", "%", "cur_im2col_step", ")", "==", "0", ",", "'im2col step must divide batchsize'", "\n", "deform_conv_cuda", ".", "deform_conv_forward_cuda", "(", "input", ",", "weight", ",", "offset", ",", "output", ",", "\n", "ctx", ".", "bufs_", "[", "0", "]", ",", "ctx", ".", "bufs_", "[", "1", "]", ",", "weight", ".", "size", "(", "3", ")", ",", "\n", "weight", ".", "size", "(", "2", ")", ",", "ctx", ".", "stride", "[", "1", "]", ",", "ctx", ".", "stride", "[", "0", "]", ",", "\n", "ctx", ".", "padding", "[", "1", "]", ",", "ctx", ".", "padding", "[", "0", "]", ",", "\n", "ctx", ".", "dilation", "[", "1", "]", ",", "ctx", ".", "dilation", "[", "0", "]", ",", "ctx", ".", "groups", ",", "\n", "ctx", ".", "deformable_groups", ",", "cur_im2col_step", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.dcn.deform_conv.DeformConvFunction.backward": [[49, 80], ["min", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "deform_conv_cuda.deform_conv_backward_input_cuda", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "deform_conv_cuda.deform_conv_backward_parameters_cuda", "weight.size", "weight.size", "weight.size", "weight.size"], "methods", ["None"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "input", ",", "offset", ",", "weight", "=", "ctx", ".", "saved_tensors", "\n", "\n", "grad_input", "=", "grad_offset", "=", "grad_weight", "=", "None", "\n", "\n", "if", "not", "grad_output", ".", "is_cuda", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "            ", "cur_im2col_step", "=", "min", "(", "ctx", ".", "im2col_step", ",", "input", ".", "shape", "[", "0", "]", ")", "\n", "assert", "(", "input", ".", "shape", "[", "0", "]", "%", "cur_im2col_step", ")", "==", "0", ",", "'im2col step must divide batchsize'", "\n", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", "or", "ctx", ".", "needs_input_grad", "[", "1", "]", ":", "\n", "                ", "grad_input", "=", "torch", ".", "zeros_like", "(", "input", ")", "\n", "grad_offset", "=", "torch", ".", "zeros_like", "(", "offset", ")", "\n", "deform_conv_cuda", ".", "deform_conv_backward_input_cuda", "(", "\n", "input", ",", "offset", ",", "grad_output", ",", "grad_input", ",", "grad_offset", ",", "weight", ",", "ctx", ".", "bufs_", "[", "0", "]", ",", "\n", "weight", ".", "size", "(", "3", ")", ",", "weight", ".", "size", "(", "2", ")", ",", "ctx", ".", "stride", "[", "1", "]", ",", "ctx", ".", "stride", "[", "0", "]", ",", "ctx", ".", "padding", "[", "1", "]", ",", "\n", "ctx", ".", "padding", "[", "0", "]", ",", "ctx", ".", "dilation", "[", "1", "]", ",", "ctx", ".", "dilation", "[", "0", "]", ",", "ctx", ".", "groups", ",", "\n", "ctx", ".", "deformable_groups", ",", "cur_im2col_step", ")", "\n", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "2", "]", ":", "\n", "                ", "grad_weight", "=", "torch", ".", "zeros_like", "(", "weight", ")", "\n", "deform_conv_cuda", ".", "deform_conv_backward_parameters_cuda", "(", "\n", "input", ",", "offset", ",", "grad_output", ",", "grad_weight", ",", "ctx", ".", "bufs_", "[", "0", "]", ",", "ctx", ".", "bufs_", "[", "1", "]", ",", "\n", "weight", ".", "size", "(", "3", ")", ",", "weight", ".", "size", "(", "2", ")", ",", "ctx", ".", "stride", "[", "1", "]", ",", "ctx", ".", "stride", "[", "0", "]", ",", "ctx", ".", "padding", "[", "1", "]", ",", "\n", "ctx", ".", "padding", "[", "0", "]", ",", "ctx", ".", "dilation", "[", "1", "]", ",", "ctx", ".", "dilation", "[", "0", "]", ",", "ctx", ".", "groups", ",", "\n", "ctx", ".", "deformable_groups", ",", "1", ",", "cur_im2col_step", ")", "\n", "\n", "", "", "return", "(", "grad_input", ",", "grad_offset", ",", "grad_weight", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.dcn.deform_conv.DeformConvFunction._output_size": [[81, 95], ["weight.size", "range", "input.size", "input.size", "all", "ValueError", "input.dim", "map", "weight.size", "map"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_output_size", "(", "input", ",", "weight", ",", "padding", ",", "dilation", ",", "stride", ")", ":", "\n", "        ", "channels", "=", "weight", ".", "size", "(", "0", ")", "\n", "output_size", "=", "(", "input", ".", "size", "(", "0", ")", ",", "channels", ")", "\n", "for", "d", "in", "range", "(", "input", ".", "dim", "(", ")", "-", "2", ")", ":", "\n", "            ", "in_size", "=", "input", ".", "size", "(", "d", "+", "2", ")", "\n", "pad", "=", "padding", "[", "d", "]", "\n", "kernel", "=", "dilation", "[", "d", "]", "*", "(", "weight", ".", "size", "(", "d", "+", "2", ")", "-", "1", ")", "+", "1", "\n", "stride_", "=", "stride", "[", "d", "]", "\n", "output_size", "+=", "(", "(", "in_size", "+", "(", "2", "*", "pad", ")", "-", "kernel", ")", "//", "stride_", "+", "1", ",", ")", "\n", "", "if", "not", "all", "(", "map", "(", "lambda", "s", ":", "s", ">", "0", ",", "output_size", ")", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"convolution input is too small (output would be {})\"", ".", "format", "(", "'x'", ".", "join", "(", "\n", "map", "(", "str", ",", "output_size", ")", ")", ")", ")", "\n", "", "return", "output_size", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.dcn.deform_conv.ModulatedDeformConvFunction.forward": [[98, 121], ["input.new_empty", "deform_conv_cuda.modulated_deform_conv_cuda_forward", "input.new_empty", "ctx.save_for_backward", "deform_conv.ModulatedDeformConvFunction._infer_shape", "input.new_empty", "input.new_empty"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.dcn.deform_conv.ModulatedDeformConvFunction._infer_shape"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "offset", ",", "mask", ",", "weight", ",", "bias", "=", "None", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "deformable_groups", "=", "1", ")", ":", "\n", "        ", "ctx", ".", "stride", "=", "stride", "\n", "ctx", ".", "padding", "=", "padding", "\n", "ctx", ".", "dilation", "=", "dilation", "\n", "ctx", ".", "groups", "=", "groups", "\n", "ctx", ".", "deformable_groups", "=", "deformable_groups", "\n", "ctx", ".", "with_bias", "=", "bias", "is", "not", "None", "\n", "if", "not", "ctx", ".", "with_bias", ":", "\n", "            ", "bias", "=", "input", ".", "new_empty", "(", "1", ")", "# fake tensor", "\n", "", "if", "not", "input", ".", "is_cuda", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "if", "weight", ".", "requires_grad", "or", "mask", ".", "requires_grad", "or", "offset", ".", "requires_grad", "or", "input", ".", "requires_grad", ":", "\n", "            ", "ctx", ".", "save_for_backward", "(", "input", ",", "offset", ",", "mask", ",", "weight", ",", "bias", ")", "\n", "", "output", "=", "input", ".", "new_empty", "(", "ModulatedDeformConvFunction", ".", "_infer_shape", "(", "ctx", ",", "input", ",", "weight", ")", ")", "\n", "ctx", ".", "_bufs", "=", "[", "input", ".", "new_empty", "(", "0", ")", ",", "input", ".", "new_empty", "(", "0", ")", "]", "\n", "deform_conv_cuda", ".", "modulated_deform_conv_cuda_forward", "(", "\n", "input", ",", "weight", ",", "bias", ",", "ctx", ".", "_bufs", "[", "0", "]", ",", "offset", ",", "mask", ",", "output", ",", "ctx", ".", "_bufs", "[", "1", "]", ",", "weight", ".", "shape", "[", "2", "]", ",", "\n", "weight", ".", "shape", "[", "3", "]", ",", "ctx", ".", "stride", ",", "ctx", ".", "stride", ",", "ctx", ".", "padding", ",", "ctx", ".", "padding", ",", "ctx", ".", "dilation", ",", "\n", "ctx", ".", "dilation", ",", "ctx", ".", "groups", ",", "ctx", ".", "deformable_groups", ",", "ctx", ".", "with_bias", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.dcn.deform_conv.ModulatedDeformConvFunction.backward": [[122, 143], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "deform_conv_cuda.modulated_deform_conv_cuda_backward"], "methods", ["None"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "if", "not", "grad_output", ".", "is_cuda", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "input", ",", "offset", ",", "mask", ",", "weight", ",", "bias", "=", "ctx", ".", "saved_tensors", "\n", "grad_input", "=", "torch", ".", "zeros_like", "(", "input", ")", "\n", "grad_offset", "=", "torch", ".", "zeros_like", "(", "offset", ")", "\n", "grad_mask", "=", "torch", ".", "zeros_like", "(", "mask", ")", "\n", "grad_weight", "=", "torch", ".", "zeros_like", "(", "weight", ")", "\n", "grad_bias", "=", "torch", ".", "zeros_like", "(", "bias", ")", "\n", "deform_conv_cuda", ".", "modulated_deform_conv_cuda_backward", "(", "\n", "input", ",", "weight", ",", "bias", ",", "ctx", ".", "_bufs", "[", "0", "]", ",", "offset", ",", "mask", ",", "ctx", ".", "_bufs", "[", "1", "]", ",", "grad_input", ",", "grad_weight", ",", "\n", "grad_bias", ",", "grad_offset", ",", "grad_mask", ",", "grad_output", ",", "weight", ".", "shape", "[", "2", "]", ",", "weight", ".", "shape", "[", "3", "]", ",", "\n", "ctx", ".", "stride", ",", "ctx", ".", "stride", ",", "ctx", ".", "padding", ",", "ctx", ".", "padding", ",", "ctx", ".", "dilation", ",", "ctx", ".", "dilation", ",", "\n", "ctx", ".", "groups", ",", "ctx", ".", "deformable_groups", ",", "ctx", ".", "with_bias", ")", "\n", "if", "not", "ctx", ".", "with_bias", ":", "\n", "            ", "grad_bias", "=", "None", "\n", "\n", "", "return", "(", "grad_input", ",", "grad_offset", ",", "grad_mask", ",", "grad_weight", ",", "grad_bias", ",", "None", ",", "None", ",", "None", ",", "None", ",", "\n", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.dcn.deform_conv.ModulatedDeformConvFunction._infer_shape": [[144, 155], ["input.size", "weight.size"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_infer_shape", "(", "ctx", ",", "input", ",", "weight", ")", ":", "\n", "        ", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "channels_out", "=", "weight", ".", "size", "(", "0", ")", "\n", "height", ",", "width", "=", "input", ".", "shape", "[", "2", ":", "4", "]", "\n", "kernel_h", ",", "kernel_w", "=", "weight", ".", "shape", "[", "2", ":", "4", "]", "\n", "height_out", "=", "(", "height", "+", "2", "*", "ctx", ".", "padding", "-", "(", "ctx", ".", "dilation", "*", "\n", "(", "kernel_h", "-", "1", ")", "+", "1", ")", ")", "//", "ctx", ".", "stride", "+", "1", "\n", "width_out", "=", "(", "width", "+", "2", "*", "ctx", ".", "padding", "-", "(", "ctx", ".", "dilation", "*", "\n", "(", "kernel_w", "-", "1", ")", "+", "1", ")", ")", "//", "ctx", ".", "stride", "+", "1", "\n", "return", "n", ",", "channels_out", ",", "height_out", ",", "width_out", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.dcn.deform_conv.DeformConv.__init__": [[162, 187], ["torch.Module.__init__", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.Parameter", "torch.Parameter", "deform_conv.DeformConv.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__", "home.repos.pwc.inspect_result.esw0116_DynaVSR.dcn.deform_conv.ModulatedDeformConv.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "deformable_groups", "=", "1", ",", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "DeformConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "not", "bias", "\n", "assert", "in_channels", "%", "groups", "==", "0", ",", "'in_channels {} cannot be divisible by groups {}'", ".", "format", "(", "\n", "in_channels", ",", "groups", ")", "\n", "assert", "out_channels", "%", "groups", "==", "0", ",", "'out_channels {} cannot be divisible by groups {}'", ".", "format", "(", "\n", "out_channels", ",", "groups", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "kernel_size", "=", "_pair", "(", "kernel_size", ")", "\n", "self", ".", "stride", "=", "_pair", "(", "stride", ")", "\n", "self", ".", "padding", "=", "_pair", "(", "padding", ")", "\n", "self", ".", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "deformable_groups", "=", "deformable_groups", "\n", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "Tensor", "(", "out_channels", ",", "in_channels", "//", "self", ".", "groups", ",", "*", "self", ".", "kernel_size", ")", ")", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.dcn.deform_conv.DeformConv.reset_parameters": [[188, 194], ["deform_conv.DeformConv.weight.data.uniform_", "math.sqrt"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "n", "=", "self", ".", "in_channels", "\n", "for", "k", "in", "self", ".", "kernel_size", ":", "\n", "            ", "n", "*=", "k", "\n", "", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "n", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.dcn.deform_conv.DeformConv.forward": [[195, 198], ["deform_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "offset", ")", ":", "\n", "        ", "return", "deform_conv", "(", "x", ",", "offset", ",", "self", ".", "weight", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "\n", "self", ".", "groups", ",", "self", ".", "deformable_groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.dcn.deform_conv.DeformConvPack.__init__": [[201, 210], ["deform_conv.DeformConv.__init__", "torch.Conv2d", "torch.Conv2d", "deform_conv.DeformConvPack.init_offset", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__", "home.repos.pwc.inspect_result.esw0116_DynaVSR.dcn.deform_conv.ModulatedDeformConvPack.init_offset"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DeformConvPack", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "conv_offset", "=", "nn", ".", "Conv2d", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "deformable_groups", "*", "2", "*", "self", ".", "kernel_size", "[", "0", "]", "*", "self", ".", "kernel_size", "[", "1", "]", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "stride", "=", "_pair", "(", "self", ".", "stride", ")", ",", "padding", "=", "_pair", "(", "self", ".", "padding", ")", ",", "\n", "bias", "=", "True", ")", "\n", "self", ".", "init_offset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.dcn.deform_conv.DeformConvPack.init_offset": [[211, 214], ["deform_conv.DeformConvPack.conv_offset.weight.data.zero_", "deform_conv.DeformConvPack.conv_offset.bias.data.zero_"], "methods", ["None"], ["", "def", "init_offset", "(", "self", ")", ":", "\n", "        ", "self", ".", "conv_offset", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "conv_offset", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.dcn.deform_conv.DeformConvPack.forward": [[215, 219], ["deform_conv.DeformConvPack.conv_offset", "deform_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "offset", "=", "self", ".", "conv_offset", "(", "x", ")", "\n", "return", "deform_conv", "(", "x", ",", "offset", ",", "self", ".", "weight", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "\n", "self", ".", "groups", ",", "self", ".", "deformable_groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.dcn.deform_conv.ModulatedDeformConv.__init__": [[222, 242], ["torch.Module.__init__", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.Parameter", "torch.Parameter", "deform_conv.ModulatedDeformConv.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Parameter", "torch.Parameter", "deform_conv.ModulatedDeformConv.register_parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__", "home.repos.pwc.inspect_result.esw0116_DynaVSR.dcn.deform_conv.ModulatedDeformConv.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "deformable_groups", "=", "1", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "ModulatedDeformConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "kernel_size", "=", "_pair", "(", "kernel_size", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "deformable_groups", "=", "deformable_groups", "\n", "self", ".", "with_bias", "=", "bias", "\n", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "Tensor", "(", "out_channels", ",", "in_channels", "//", "groups", ",", "*", "self", ".", "kernel_size", ")", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.dcn.deform_conv.ModulatedDeformConv.reset_parameters": [[243, 251], ["deform_conv.ModulatedDeformConv.weight.data.uniform_", "math.sqrt", "deform_conv.ModulatedDeformConv.bias.data.zero_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "n", "=", "self", ".", "in_channels", "\n", "for", "k", "in", "self", ".", "kernel_size", ":", "\n", "            ", "n", "*=", "k", "\n", "", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "n", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.dcn.deform_conv.ModulatedDeformConv.forward": [[252, 256], ["modulated_deform_conv"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "offset", ",", "mask", ")", ":", "\n", "        ", "return", "modulated_deform_conv", "(", "x", ",", "offset", ",", "mask", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ",", "\n", "self", ".", "deformable_groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.dcn.deform_conv.ModulatedDeformConvPack.__init__": [[259, 269], ["deform_conv.ModulatedDeformConv.__init__", "torch.Conv2d", "torch.Conv2d", "deform_conv.ModulatedDeformConvPack.init_offset", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__", "home.repos.pwc.inspect_result.esw0116_DynaVSR.dcn.deform_conv.ModulatedDeformConvPack.init_offset"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "extra_offset_mask", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ModulatedDeformConvPack", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "extra_offset_mask", "=", "extra_offset_mask", "\n", "self", ".", "conv_offset_mask", "=", "nn", ".", "Conv2d", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "deformable_groups", "*", "3", "*", "self", ".", "kernel_size", "[", "0", "]", "*", "self", ".", "kernel_size", "[", "1", "]", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "stride", "=", "_pair", "(", "self", ".", "stride", ")", ",", "padding", "=", "_pair", "(", "self", ".", "padding", ")", ",", "\n", "bias", "=", "True", ")", "\n", "self", ".", "init_offset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.dcn.deform_conv.ModulatedDeformConvPack.init_offset": [[270, 273], ["deform_conv.ModulatedDeformConvPack.conv_offset_mask.weight.data.zero_", "deform_conv.ModulatedDeformConvPack.conv_offset_mask.bias.data.zero_"], "methods", ["None"], ["", "def", "init_offset", "(", "self", ")", ":", "\n", "        ", "self", ".", "conv_offset_mask", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "conv_offset_mask", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.dcn.deform_conv.ModulatedDeformConvPack.forward": [[274, 292], ["torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "modulated_deform_conv", "deform_conv.ModulatedDeformConvPack.conv_offset_mask", "deform_conv.ModulatedDeformConvPack.conv_offset_mask", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "logger.warning"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "extra_offset_mask", ":", "\n", "# x = [input, features]", "\n", "            ", "out", "=", "self", ".", "conv_offset_mask", "(", "x", "[", "1", "]", ")", "\n", "x", "=", "x", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "conv_offset_mask", "(", "x", ")", "\n", "", "o1", ",", "o2", ",", "mask", "=", "torch", ".", "chunk", "(", "out", ",", "3", ",", "dim", "=", "1", ")", "\n", "offset", "=", "torch", ".", "cat", "(", "(", "o1", ",", "o2", ")", ",", "dim", "=", "1", ")", "\n", "mask", "=", "torch", ".", "sigmoid", "(", "mask", ")", "\n", "\n", "offset_mean", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "offset", ")", ")", "\n", "if", "offset_mean", ">", "100", ":", "\n", "            ", "logger", ".", "warning", "(", "'Offset mean is {}, larger than 100.'", ".", "format", "(", "offset_mean", ")", ")", "\n", "\n", "", "return", "modulated_deform_conv", "(", "x", ",", "offset", ",", "mask", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ",", "\n", "self", ".", "deformable_groups", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.metrics.calculate_PSNR_SSIM.main": [[12, 66], ["sorted", "enumerate", "print", "glob.glob", "print", "print", "calculate_PSNR_SSIM.calculate_psnr", "calculate_PSNR_SSIM.calculate_ssim", "print", "PSNR_all.append", "SSIM_all.append", "os.path.splitext", "cv2.imread", "cv2.imread", "calculate_PSNR_SSIM.bgr2ycbcr", "calculate_PSNR_SSIM.bgr2ycbcr", "os.path.basename", "os.path.join", "ValueError", "sum", "len", "sum", "len"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.metrics.calculate_PSNR_SSIM.calculate_psnr", "home.repos.pwc.inspect_result.esw0116_DynaVSR.metrics.calculate_PSNR_SSIM.calculate_ssim", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.bgr2ycbcr", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.bgr2ycbcr"], ["def", "main", "(", ")", ":", "\n", "# Configurations", "\n", "\n", "# GT - Ground-truth;", "\n", "# Gen: Generated / Restored / Recovered images", "\n", "    ", "folder_GT", "=", "'/mnt/SSD/xtwang/BasicSR_datasets/val_set5/Set5'", "\n", "folder_Gen", "=", "'/home/xtwang/Projects/BasicSR/results/RRDB_PSNR_x4/set5'", "\n", "\n", "crop_border", "=", "4", "\n", "suffix", "=", "''", "# suffix for Gen images", "\n", "test_Y", "=", "False", "# True: test Y channel only; False: test RGB channels", "\n", "\n", "PSNR_all", "=", "[", "]", "\n", "SSIM_all", "=", "[", "]", "\n", "img_list", "=", "sorted", "(", "glob", ".", "glob", "(", "folder_GT", "+", "'/*'", ")", ")", "\n", "\n", "if", "test_Y", ":", "\n", "        ", "print", "(", "'Testing Y channel.'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Testing RGB channels.'", ")", "\n", "\n", "", "for", "i", ",", "img_path", "in", "enumerate", "(", "img_list", ")", ":", "\n", "        ", "base_name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "img_path", ")", ")", "[", "0", "]", "\n", "im_GT", "=", "cv2", ".", "imread", "(", "img_path", ")", "/", "255.", "\n", "im_Gen", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "folder_Gen", ",", "base_name", "+", "suffix", "+", "'.png'", ")", ")", "/", "255.", "\n", "\n", "if", "test_Y", "and", "im_GT", ".", "shape", "[", "2", "]", "==", "3", ":", "# evaluate on Y channel in YCbCr color space", "\n", "            ", "im_GT_in", "=", "bgr2ycbcr", "(", "im_GT", ")", "\n", "im_Gen_in", "=", "bgr2ycbcr", "(", "im_Gen", ")", "\n", "", "else", ":", "\n", "            ", "im_GT_in", "=", "im_GT", "\n", "im_Gen_in", "=", "im_Gen", "\n", "\n", "# crop borders", "\n", "", "if", "im_GT_in", ".", "ndim", "==", "3", ":", "\n", "            ", "cropped_GT", "=", "im_GT_in", "[", "crop_border", ":", "-", "crop_border", ",", "crop_border", ":", "-", "crop_border", ",", ":", "]", "\n", "cropped_Gen", "=", "im_Gen_in", "[", "crop_border", ":", "-", "crop_border", ",", "crop_border", ":", "-", "crop_border", ",", ":", "]", "\n", "", "elif", "im_GT_in", ".", "ndim", "==", "2", ":", "\n", "            ", "cropped_GT", "=", "im_GT_in", "[", "crop_border", ":", "-", "crop_border", ",", "crop_border", ":", "-", "crop_border", "]", "\n", "cropped_Gen", "=", "im_Gen_in", "[", "crop_border", ":", "-", "crop_border", ",", "crop_border", ":", "-", "crop_border", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Wrong image dimension: {}. Should be 2 or 3.'", ".", "format", "(", "im_GT_in", ".", "ndim", ")", ")", "\n", "\n", "# calculate PSNR and SSIM", "\n", "", "PSNR", "=", "calculate_psnr", "(", "cropped_GT", "*", "255", ",", "cropped_Gen", "*", "255", ")", "\n", "\n", "SSIM", "=", "calculate_ssim", "(", "cropped_GT", "*", "255", ",", "cropped_Gen", "*", "255", ")", "\n", "print", "(", "'{:3d} - {:25}. \\tPSNR: {:.6f} dB, \\tSSIM: {:.6f}'", ".", "format", "(", "\n", "i", "+", "1", ",", "base_name", ",", "PSNR", ",", "SSIM", ")", ")", "\n", "PSNR_all", ".", "append", "(", "PSNR", ")", "\n", "SSIM_all", ".", "append", "(", "SSIM", ")", "\n", "", "print", "(", "'Average: PSNR: {:.6f} dB, SSIM: {:.6f}'", ".", "format", "(", "\n", "sum", "(", "PSNR_all", ")", "/", "len", "(", "PSNR_all", ")", ",", "\n", "sum", "(", "SSIM_all", ")", "/", "len", "(", "SSIM_all", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.metrics.calculate_PSNR_SSIM.calculate_psnr": [[68, 76], ["img1.astype.astype", "img2.astype.astype", "numpy.mean", "float", "math.log10", "math.sqrt"], "function", ["None"], ["", "def", "calculate_psnr", "(", "img1", ",", "img2", ")", ":", "\n", "# img1 and img2 have range [0, 255]", "\n", "    ", "img1", "=", "img1", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img2", "=", "img2", ".", "astype", "(", "np", ".", "float64", ")", "\n", "mse", "=", "np", ".", "mean", "(", "(", "img1", "-", "img2", ")", "**", "2", ")", "\n", "if", "mse", "==", "0", ":", "\n", "        ", "return", "float", "(", "'inf'", ")", "\n", "", "return", "20", "*", "math", ".", "log10", "(", "255.0", "/", "math", ".", "sqrt", "(", "mse", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.metrics.calculate_PSNR_SSIM.ssim": [[78, 99], ["img1.astype.astype", "img2.astype.astype", "cv2.getGaussianKernel", "numpy.outer", "ssim_map.mean", "cv2.getGaussianKernel.transpose", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D"], "function", ["None"], ["", "def", "ssim", "(", "img1", ",", "img2", ")", ":", "\n", "    ", "C1", "=", "(", "0.01", "*", "255", ")", "**", "2", "\n", "C2", "=", "(", "0.03", "*", "255", ")", "**", "2", "\n", "\n", "img1", "=", "img1", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img2", "=", "img2", ".", "astype", "(", "np", ".", "float64", ")", "\n", "kernel", "=", "cv2", ".", "getGaussianKernel", "(", "11", ",", "1.5", ")", "\n", "window", "=", "np", ".", "outer", "(", "kernel", ",", "kernel", ".", "transpose", "(", ")", ")", "\n", "\n", "mu1", "=", "cv2", ".", "filter2D", "(", "img1", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "# valid", "\n", "mu2", "=", "cv2", ".", "filter2D", "(", "img2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "\n", "mu1_sq", "=", "mu1", "**", "2", "\n", "mu2_sq", "=", "mu2", "**", "2", "\n", "mu1_mu2", "=", "mu1", "*", "mu2", "\n", "sigma1_sq", "=", "cv2", ".", "filter2D", "(", "img1", "**", "2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu1_sq", "\n", "sigma2_sq", "=", "cv2", ".", "filter2D", "(", "img2", "**", "2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu2_sq", "\n", "sigma12", "=", "cv2", ".", "filter2D", "(", "img1", "*", "img2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu1_mu2", "\n", "\n", "ssim_map", "=", "(", "(", "2", "*", "mu1_mu2", "+", "C1", ")", "*", "(", "2", "*", "sigma12", "+", "C2", ")", ")", "/", "(", "(", "mu1_sq", "+", "mu2_sq", "+", "C1", ")", "*", "\n", "(", "sigma1_sq", "+", "sigma2_sq", "+", "C2", ")", ")", "\n", "return", "ssim_map", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.metrics.calculate_PSNR_SSIM.calculate_ssim": [[101, 120], ["ValueError", "calculate_PSNR_SSIM.ssim", "ValueError", "range", "numpy.array().mean", "ssims.append", "calculate_PSNR_SSIM.ssim", "calculate_PSNR_SSIM.ssim", "numpy.array", "numpy.squeeze", "numpy.squeeze"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.metrics.calculate_PSNR_SSIM.ssim", "home.repos.pwc.inspect_result.esw0116_DynaVSR.metrics.calculate_PSNR_SSIM.ssim", "home.repos.pwc.inspect_result.esw0116_DynaVSR.metrics.calculate_PSNR_SSIM.ssim"], ["", "def", "calculate_ssim", "(", "img1", ",", "img2", ")", ":", "\n", "    ", "'''calculate SSIM\n    the same outputs as MATLAB's\n    img1, img2: [0, 255]\n    '''", "\n", "if", "not", "img1", ".", "shape", "==", "img2", ".", "shape", ":", "\n", "        ", "raise", "ValueError", "(", "'Input images must have the same dimensions.'", ")", "\n", "", "if", "img1", ".", "ndim", "==", "2", ":", "\n", "        ", "return", "ssim", "(", "img1", ",", "img2", ")", "\n", "", "elif", "img1", ".", "ndim", "==", "3", ":", "\n", "        ", "if", "img1", ".", "shape", "[", "2", "]", "==", "3", ":", "\n", "            ", "ssims", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "                ", "ssims", ".", "append", "(", "ssim", "(", "img1", ",", "img2", ")", ")", "\n", "", "return", "np", ".", "array", "(", "ssims", ")", ".", "mean", "(", ")", "\n", "", "elif", "img1", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "            ", "return", "ssim", "(", "np", ".", "squeeze", "(", "img1", ")", ",", "np", ".", "squeeze", "(", "img2", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Wrong input image dimensions.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.metrics.calculate_PSNR_SSIM.bgr2ycbcr": [[122, 144], ["img.astype", "rlt.round.astype", "rlt.round.round", "numpy.dot", "numpy.matmul"], "function", ["None"], ["", "", "def", "bgr2ycbcr", "(", "img", ",", "only_y", "=", "True", ")", ":", "\n", "    ", "'''same as matlab rgb2ycbcr\n    only_y: only return Y channel\n    Input:\n        uint8, [0, 255]\n        float, [0, 1]\n    '''", "\n", "in_img_type", "=", "img", ".", "dtype", "\n", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "if", "in_img_type", "!=", "np", ".", "uint8", ":", "\n", "        ", "img", "*=", "255.", "\n", "# convert", "\n", "", "if", "only_y", ":", "\n", "        ", "rlt", "=", "np", ".", "dot", "(", "img", ",", "[", "24.966", ",", "128.553", ",", "65.481", "]", ")", "/", "255.0", "+", "16.0", "\n", "", "else", ":", "\n", "        ", "rlt", "=", "np", ".", "matmul", "(", "img", ",", "[", "[", "24.966", ",", "112.0", ",", "-", "18.214", "]", ",", "[", "128.553", ",", "-", "74.203", ",", "-", "93.786", "]", ",", "\n", "[", "65.481", ",", "-", "37.797", ",", "112.0", "]", "]", ")", "/", "255.0", "+", "[", "16", ",", "128", ",", "128", "]", "\n", "", "if", "in_img_type", "==", "np", ".", "uint8", ":", "\n", "        ", "rlt", "=", "rlt", ".", "round", "(", ")", "\n", "", "else", ":", "\n", "        ", "rlt", "/=", "255.", "\n", "", "return", "rlt", ".", "astype", "(", "in_img_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.common._apply": [[12, 17], ["isinstance", "list", "func", "map", "func"], "function", ["None"], ["def", "_apply", "(", "func", ",", "x", ")", ":", "\n", "    ", "if", "isinstance", "(", "x", ",", "list", ")", ":", "\n", "        ", "return", "list", "(", "map", "(", "lambda", "l", ":", "func", "(", "l", ")", ",", "x", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "func", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.common.crop": [[18, 39], ["isinstance", "random.randrange", "random.randrange", "common._apply", "common._apply"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.data.common._apply", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.common._apply"], ["", "", "def", "crop", "(", "*", "args", ",", "ps", "=", "64", ",", "scale", "=", "4", ")", ":", "\n", "# args[0] : hr, args[1] : lr", "\n", "    ", "if", "isinstance", "(", "args", "[", "1", "]", ",", "list", ")", ":", "\n", "        ", "h", ",", "w", ",", "_", "=", "args", "[", "1", "]", "[", "0", "]", ".", "shape", "\n", "", "else", ":", "\n", "        ", "h", ",", "w", ",", "_", "=", "args", "[", "1", "]", ".", "shape", "\n", "\n", "", "px", "=", "random", ".", "randrange", "(", "0", ",", "w", "-", "ps", "+", "1", ")", "\n", "py", "=", "random", ".", "randrange", "(", "0", ",", "h", "-", "ps", "+", "1", ")", "\n", "\n", "hr_ps", "=", "ps", "*", "scale", "\n", "hr_px", "=", "px", "*", "scale", "\n", "hr_py", "=", "py", "*", "scale", "\n", "\n", "def", "_crop_hr", "(", "x", ")", ":", "\n", "        ", "return", "x", "[", "hr_py", ":", "hr_py", "+", "hr_ps", ",", "hr_px", ":", "hr_px", "+", "hr_ps", ",", ":", "]", "\n", "\n", "", "def", "_crop_lr", "(", "x", ")", ":", "\n", "        ", "return", "x", "[", "py", ":", "py", "+", "ps", ",", "px", ":", "px", "+", "ps", ",", ":", "]", "\n", "\n", "", "return", "[", "_apply", "(", "_crop_hr", ",", "a", ")", "for", "a", "in", "args", "[", "0", ":", "1", "]", "]", "+", "[", "_apply", "(", "_crop_lr", ",", "a", ")", "for", "a", "in", "args", "[", "1", ":", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.common.np2tensor": [[40, 56], ["numpy.ascontiguousarray", "torch.from_numpy().float", "torch.from_numpy().float", "common._apply", "isinstance", "x.transpose", "ret.append", "ret.append", "torch.from_numpy", "torch.from_numpy", "torch.stack", "torch.stack"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.data.common._apply"], ["", "def", "np2tensor", "(", "*", "args", ",", "rgb", "=", "255", ")", ":", "\n", "    ", "m", "=", "rgb", "/", "255", "\n", "def", "_np2tensor", "(", "x", ")", ":", "\n", "        ", "np_transpose", "=", "np", ".", "ascontiguousarray", "(", "x", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ")", "\n", "tensor", "=", "torch", ".", "from_numpy", "(", "np_transpose", ")", ".", "float", "(", ")", "\n", "return", "m", "*", "tensor", "\n", "\n", "", "ret", "=", "[", "]", "\n", "for", "r", "in", "[", "_apply", "(", "_np2tensor", ",", "a", ")", "for", "a", "in", "args", "]", ":", "\n", "# Make 4D tensor if a sequence is given", "\n", "        ", "if", "isinstance", "(", "r", ",", "list", ")", ":", "\n", "            ", "ret", ".", "append", "(", "torch", ".", "stack", "(", "r", ",", "dim", "=", "0", ")", ")", "\n", "", "else", ":", "\n", "            ", "ret", ".", "append", "(", "r", ")", "\n", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.common.augment": [[57, 70], ["common._apply", "random.random", "random.random", "random.random", "x.transpose.transpose"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.data.common._apply"], ["", "def", "augment", "(", "*", "args", ",", "hflip", "=", "True", ",", "rot", "=", "True", ")", ":", "\n", "    ", "hflip", "=", "hflip", "and", "random", ".", "random", "(", ")", "<", "0.5", "\n", "vflip", "=", "rot", "and", "random", ".", "random", "(", ")", "<", "0.5", "\n", "rot90", "=", "rot", "and", "random", ".", "random", "(", ")", "<", "0.5", "\n", "\n", "def", "_augment", "(", "x", ")", ":", "\n", "        ", "if", "hflip", ":", "x", "=", "x", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "if", "vflip", ":", "x", "=", "x", "[", ":", ":", "-", "1", ",", ":", ",", ":", "]", "\n", "if", "rot90", ":", "x", "=", "x", ".", "transpose", "(", "1", ",", "0", ",", "2", ")", "\n", "\n", "return", "x", "\n", "\n", "", "return", "[", "_apply", "(", "_augment", ",", "a", ")", "for", "a", "in", "args", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.common.additive_noise": [[71, 81], ["numpy.random.randn", "common._apply", "numpy.random.randn"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.data.common._apply"], ["", "def", "additive_noise", "(", "*", "args", ",", "sigma", "=", "2", ",", "rgb", "=", "255", ")", ":", "\n", "    ", "s", "=", "sigma", "*", "np", ".", "random", ".", "randn", "(", "1", ")", "\n", "if", "rgb", "!=", "255", ":", "\n", "        ", "s", "*=", "rgb", "/", "255", "\n", "\n", "", "def", "_additive_noise", "(", "x", ")", ":", "\n", "        ", "n", "=", "s", "*", "np", ".", "random", ".", "randn", "(", "*", "x", ".", "shape", ")", "\n", "return", "x", "+", "n", "\n", "\n", "", "return", "[", "_apply", "(", "_additive_noise", ",", "a", ")", "for", "a", "in", "args", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.common.target_input": [[82, 92], ["random.random", "patch.copy"], "function", ["None"], ["", "def", "target_input", "(", "*", "args", ",", "sharp2sharp", "=", "True", ")", ":", "\n", "\n", "    ", "sharp2sharp", "=", "sharp2sharp", "and", "random", ".", "random", "(", ")", "<", "0.1", "# 10% probability", "\n", "if", "sharp2sharp", ":", "# preseve sharp sample as is to suppress artifacts", "\n", "        ", "target", "=", "args", "[", "-", "1", "]", "# seq_sharp", "\n", "input", "=", "[", "patch", ".", "copy", "(", ")", "for", "patch", "in", "target", "]", "\n", "\n", "return", "[", "input", ",", "target", "]", "\n", "", "else", ":", "\n", "        ", "return", "[", "*", "args", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.common.BD_downsample": [[94, 126], ["x.view.size", "x.view.view", "torch.pad", "torch.from_numpy().type_as().unsqueeze().unsqueeze", "torch.from_numpy().type_as().unsqueeze().unsqueeze", "torch.conv2d", "x.view.view", "numpy.zeros", "fi.gaussian_filter", "x.view.size", "x.view.size", "torch.from_numpy().type_as().unsqueeze", "torch.from_numpy().type_as().unsqueeze", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.from_numpy", "torch.from_numpy", "common.BD_downsample.gkern"], "function", ["None"], ["", "", "def", "BD_downsample", "(", "x", ",", "scale", "=", "4", ")", ":", "\n", "    ", "\"\"\"Downsamping with Gaussian kernel used in the DUF official code\n\n    Args:\n        x (Tensor, [T, B, C, H, W]): frames to be downsampled.\n        scale (int): downsampling factor: 2 | 3 | 4.\n    \"\"\"", "\n", "\n", "assert", "scale", "in", "[", "2", ",", "3", ",", "4", "]", ",", "'Scale [{}] is not supported'", ".", "format", "(", "scale", ")", "\n", "\n", "def", "gkern", "(", "kernlen", "=", "13", ",", "nsig", "=", "1.6", ")", ":", "\n", "        ", "import", "scipy", ".", "ndimage", ".", "filters", "as", "fi", "\n", "inp", "=", "np", ".", "zeros", "(", "(", "kernlen", ",", "kernlen", ")", ")", "\n", "# set element at the middle to one, a dirac delta", "\n", "inp", "[", "kernlen", "//", "2", ",", "kernlen", "//", "2", "]", "=", "1", "\n", "# gaussian-smooth the dirac, resulting in a gaussian filter mask", "\n", "return", "fi", ".", "gaussian_filter", "(", "inp", ",", "nsig", ")", "\n", "\n", "", "T", ",", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "1", ",", "H", ",", "W", ")", "\n", "pad_w", ",", "pad_h", "=", "6", "+", "scale", "*", "2", ",", "6", "+", "scale", "*", "2", "# 6 is the pad of the gaussian filter", "\n", "r_h", ",", "r_w", "=", "0", ",", "0", "\n", "if", "scale", "==", "3", ":", "\n", "        ", "r_h", "=", "3", "-", "(", "H", "%", "3", ")", "\n", "r_w", "=", "3", "-", "(", "W", "%", "3", ")", "\n", "", "x", "=", "F", ".", "pad", "(", "x", ",", "[", "pad_w", ",", "pad_w", "+", "r_w", ",", "pad_h", ",", "pad_h", "+", "r_h", "]", ",", "'reflect'", ")", "\n", "\n", "gaussian_filter", "=", "torch", ".", "from_numpy", "(", "gkern", "(", "13", ",", "0.4", "*", "scale", ")", ")", ".", "type_as", "(", "x", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "x", "=", "F", ".", "conv2d", "(", "x", ",", "gaussian_filter", ",", "stride", "=", "scale", ")", "\n", "x", "=", "x", "[", ":", ",", ":", ",", "2", ":", "-", "2", ",", "2", ":", "-", "2", "]", "\n", "x", "=", "x", ".", "view", "(", "T", ",", "B", ",", "C", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", "\n", "return", "x", "\n", "", ""]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.data_sampler.DistIterSampler.__init__": [[30, 45], ["int", "torch.get_world_size", "torch.get_world_size", "torch.get_rank", "torch.get_rank", "math.ceil", "torch.is_available", "torch.is_available", "RuntimeError", "torch.is_available", "torch.is_available", "RuntimeError", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataset", ",", "num_replicas", "=", "None", ",", "rank", "=", "None", ",", "ratio", "=", "100", ")", ":", "\n", "        ", "if", "num_replicas", "is", "None", ":", "\n", "            ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Requires distributed package to be available\"", ")", "\n", "", "num_replicas", "=", "dist", ".", "get_world_size", "(", ")", "\n", "", "if", "rank", "is", "None", ":", "\n", "            ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Requires distributed package to be available\"", ")", "\n", "", "rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "num_replicas", "=", "num_replicas", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "epoch", "=", "0", "\n", "self", ".", "num_samples", "=", "int", "(", "math", ".", "ceil", "(", "len", "(", "self", ".", "dataset", ")", "*", "ratio", "/", "self", ".", "num_replicas", ")", ")", "\n", "self", ".", "total_size", "=", "self", ".", "num_samples", "*", "self", ".", "num_replicas", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.data_sampler.DistIterSampler.__iter__": [[46, 60], ["torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator.manual_seed", "torch.Generator.manual_seed", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "len", "iter", "len", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "# deterministically shuffle based on epoch", "\n", "        ", "g", "=", "torch", ".", "Generator", "(", ")", "\n", "g", ".", "manual_seed", "(", "self", ".", "epoch", ")", "\n", "indices", "=", "torch", ".", "randperm", "(", "self", ".", "total_size", ",", "generator", "=", "g", ")", ".", "tolist", "(", ")", "\n", "\n", "dsize", "=", "len", "(", "self", ".", "dataset", ")", "\n", "indices", "=", "[", "v", "%", "dsize", "for", "v", "in", "indices", "]", "\n", "\n", "# subsample", "\n", "indices", "=", "indices", "[", "self", ".", "rank", ":", "self", ".", "total_size", ":", "self", ".", "num_replicas", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "num_samples", "\n", "\n", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.data_sampler.DistIterSampler.__len__": [[61, 63], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.data_sampler.DistIterSampler.set_epoch": [[64, 66], ["None"], "methods", ["None"], ["", "def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "epoch", "\n", "", "", ""]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.random_kernel_generator.Degradation.__init__": [[8, 15], ["random_kernel_generator.Degradation.build_kernel"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.data.random_kernel_generator.Degradation.build_kernel"], ["    ", "def", "__init__", "(", "self", ",", "kernel_size", ",", "scale_factor", ",", "theta", "=", "0.0", ",", "sigma", "=", "[", "1.0", ",", "1.0", "]", ")", ":", "\n", "        ", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "scale", "=", "scale_factor", "\n", "\n", "self", ".", "theta", "=", "theta", "\n", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "build_kernel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.random_kernel_generator.Degradation.set_parameters": [[16, 19], ["None"], "methods", ["None"], ["", "def", "set_parameters", "(", "self", ",", "sigma", ",", "theta", ")", ":", "\n", "        ", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "theta", "=", "theta", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.random_kernel_generator.Degradation.build_kernel": [[20, 49], ["numpy.zeros", "numpy.linspace", "numpy.meshgrid", "numpy.cos", "numpy.sin", "gaussian", "numpy.exp", "gaussian.sum"], "methods", ["None"], ["", "def", "build_kernel", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "sigma", "[", "0", "]", "==", "0", "and", "self", ".", "sigma", "[", "1", "]", "==", "0", ":", "\n", "            ", "kernel", "=", "np", ".", "zeros", "(", "(", "self", ".", "kernel_size", ",", "self", ".", "kernel_size", ")", ")", "\n", "kernel", "[", "self", ".", "kernel_size", "//", "2", ",", "self", ".", "kernel_size", "//", "2", "]", "=", "1", "\n", "", "else", ":", "\n", "            ", "kernel_radius", "=", "self", ".", "kernel_size", "//", "2", "\n", "kernel_range", "=", "np", ".", "linspace", "(", "-", "kernel_radius", ",", "kernel_radius", ",", "self", ".", "kernel_size", ")", "\n", "\n", "# horizontal_range = kernel_range[None].repeat((self.kernel_size, 1))", "\n", "# vertical_range = kernel_range[:, None].repeat((1, self.kernel_size))", "\n", "horizontal_range", ",", "vertical_range", "=", "np", ".", "meshgrid", "(", "kernel_range", ",", "kernel_range", ")", "\n", "\n", "cos_theta", "=", "np", ".", "cos", "(", "self", ".", "theta", ")", "\n", "sin_theta", "=", "np", ".", "sin", "(", "self", ".", "theta", ")", "\n", "\n", "cos_theta_2", "=", "cos_theta", "**", "2", "\n", "sin_theta_2", "=", "sin_theta", "**", "2", "\n", "\n", "sigma_x_2", "=", "2.0", "*", "(", "self", ".", "sigma", "[", "0", "]", "**", "2", ")", "\n", "sigma_y_2", "=", "2.0", "*", "(", "self", ".", "sigma", "[", "1", "]", "**", "2", ")", "\n", "\n", "a", "=", "cos_theta_2", "/", "sigma_x_2", "+", "sin_theta_2", "/", "sigma_y_2", "\n", "b", "=", "sin_theta", "*", "cos_theta", "*", "(", "1.0", "/", "sigma_y_2", "-", "1.0", "/", "sigma_x_2", ")", "\n", "c", "=", "sin_theta_2", "/", "sigma_x_2", "+", "cos_theta_2", "/", "sigma_y_2", "\n", "\n", "gaussian", "=", "lambda", "x", ",", "y", ":", "np", ".", "exp", "(", "(", "-", "(", "a", "*", "(", "x", "**", "2", ")", "+", "2.0", "*", "b", "*", "x", "*", "y", "+", "c", "*", "(", "y", "**", "2", ")", ")", ")", ")", "\n", "kernel", "=", "gaussian", "(", "horizontal_range", ",", "vertical_range", ")", "\n", "kernel", "=", "kernel", "/", "kernel", ".", "sum", "(", ")", "\n", "", "self", ".", "kernel", "=", "kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.random_kernel_generator.Degradation.kernel_shift": [[50, 76], ["scipy.ndimage.measurements.center_of_mass", "numpy.pad", "scipy.ndimage.interpolation.shift", "numpy.array", "numpy.int", "numpy.ceil", "numpy.max"], "methods", ["None"], ["", "def", "kernel_shift", "(", "self", ",", "kernel", ")", ":", "\n", "# There are two reasons for shifting the kernel:", "\n", "# 1. Center of mass is not in the center of the kernel which creates ambiguity. There is no possible way to know", "\n", "#    the degradation process included shifting so we always assume center of mass is center of the kernel.", "\n", "# 2. We further shift kernel center so that top left result pixel corresponds to the middle of the sfXsf first", "\n", "#    pixels. Default is for odd size to be in the middle of the first pixel and for even sized kernel to be at the", "\n", "#    top left corner of the first pixel. that is why different shift size needed between od and even size.", "\n", "# Given that these two conditions are fulfilled, we are happy and aligned, the way to test it is as follows:", "\n", "# The input image, when interpolated (regular bicubic) is exactly aligned with ground truth.", "\n", "\n", "# First calculate the current center of mass for the kernel", "\n", "        ", "current_center_of_mass", "=", "measurements", ".", "center_of_mass", "(", "kernel", ")", "\n", "\n", "# The second (\"+ 0.5 * ....\") is for applying condition 2 from the comments above", "\n", "wanted_center_of_mass", "=", "np", ".", "array", "(", "kernel", ".", "shape", ")", "//", "2", "+", "0.5", "*", "(", "self", ".", "scale", "-", "(", "kernel", ".", "shape", "[", "0", "]", "%", "2", ")", ")", "\n", "# wanted_center_of_mass = np.array(kernel.shape) / 2 + 0.5 * (np.array(sf)[0:2] - (kernel.shape[0] % 2))", "\n", "\n", "# Define the shift vector for the kernel shifting (x,y)", "\n", "shift_vec", "=", "wanted_center_of_mass", "-", "current_center_of_mass", "\n", "\n", "# Before applying the shift, we first pad the kernel so that nothing is lost due to the shift", "\n", "# (biggest shift among dims + 1 for safety)", "\n", "kernel", "=", "np", ".", "pad", "(", "kernel", ",", "np", ".", "int", "(", "np", ".", "ceil", "(", "np", ".", "max", "(", "shift_vec", ")", ")", ")", "+", "1", ",", "'constant'", ")", "\n", "\n", "# Finally shift the kernel and return", "\n", "return", "interpolation", ".", "shift", "(", "kernel", ",", "shift_vec", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.random_kernel_generator.Degradation.get_kernel": [[77, 79], ["None"], "methods", ["None"], ["", "def", "get_kernel", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.random_kernel_generator.Degradation.set_kernel_directly": [[80, 82], ["None"], "methods", ["None"], ["", "def", "set_kernel_directly", "(", "self", ",", "kernel", ")", ":", "\n", "        ", "self", ".", "kernel", "=", "kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.random_kernel_generator.Degradation.apply": [[83, 131], ["torch.cuda.empty_cache", "random_kernel_generator.Degradation.kernel_shift", "torch.from_numpy().float", "random_kernel_generator.Degradation.repeat", "torch.nn.ReflectionPad2d", "torch.nn.ReflectionPad2d.", "torch.nn.functional.conv2d", "range", "torch.cat", "lr_img.cpu.cpu.cpu", "torch.from_numpy().float", "random_kernel_generator.Degradation.repeat", "torch.nn.ReflectionPad2d", "torch.nn.ReflectionPad2d.", "torch.nn.functional.conv2d", "lr_img.cpu.cpu.append", "torch.from_numpy", "int", "random_kernel_generator.Degradation.kernel_shift", "random_kernel_generator.Degradation.kernel_shift", "torch.from_numpy", "int"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.data.random_kernel_generator.Degradation.kernel_shift", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.random_kernel_generator.Degradation.kernel_shift", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.random_kernel_generator.Degradation.kernel_shift"], ["", "def", "apply", "(", "self", ",", "img", ")", ":", "\n", "        ", "cu", "=", "False", "\n", "if", "img", ".", "is_cuda", ":", "\n", "            ", "cu", "=", "True", "\n", "\n", "", "if", "self", ".", "kernel", ".", "ndim", "==", "2", ":", "\n", "            ", "shifted_kernel", "=", "self", ".", "kernel_shift", "(", "self", ".", "kernel", ")", "\n", "shifted_kernel", "=", "torch", ".", "from_numpy", "(", "shifted_kernel", ")", ".", "float", "(", ")", "\n", "shifted_kernel_length", "=", "shifted_kernel", ".", "shape", "[", "0", "]", "\n", "weights", "=", "shifted_kernel", ".", "repeat", "(", "(", "3", ",", "1", ",", "1", ",", "1", ")", ")", "#.cuda()", "\n", "img", "=", "img", "#.cuda()", "\n", "pad_func", "=", "torch", ".", "nn", ".", "ReflectionPad2d", "(", "shifted_kernel_length", "//", "2", ")", "\n", "dimension", "=", "4", "\n", "if", "img", ".", "ndim", "==", "3", ":", "\n", "# Single Image C(=3) H W", "\n", "                ", "dimension", "=", "3", "\n", "img", "=", "img", "[", "None", "]", "\n", "", "img", "=", "pad_func", "(", "img", ")", "\n", "lr_img", "=", "conv2d", "(", "img", ",", "weights", ",", "groups", "=", "3", ",", "stride", "=", "int", "(", "self", ".", "scale", ")", ")", "\n", "", "else", ":", "\n", "# self.kernel.ndim = 3 (T X 11 X 11)", "\n", "            ", "assert", "img", ".", "ndim", "==", "4", "# T C H W", "\n", "assert", "img", ".", "shape", "[", "0", "]", "==", "self", ".", "kernel", ".", "shape", "[", "0", "]", "or", "img", ".", "shape", "[", "0", "]", "==", "self", ".", "kernel", ".", "shape", "[", "0", "]", "+", "2", "# EDVR, DUF", "\n", "dimension", "=", "4", "\n", "lr_img", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "img", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "if", "img", ".", "shape", "[", "0", "]", "==", "self", ".", "kernel", ".", "shape", "[", "0", "]", ":", "\n", "                    ", "shifted_kernel", "=", "self", ".", "kernel_shift", "(", "self", ".", "kernel", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                    ", "shifted_kernel", "=", "self", ".", "kernel_shift", "(", "self", ".", "kernel", "[", "(", "i", "-", "1", ")", "%", "self", ".", "kernel", ".", "shape", "[", "0", "]", "]", ")", "\n", "# shifted_kernel = np.stack(shifted_kernel, axis=0)", "\n", "", "shifted_kernel", "=", "torch", ".", "from_numpy", "(", "shifted_kernel", ")", ".", "float", "(", ")", "\n", "shifted_kernel_length", "=", "shifted_kernel", ".", "shape", "[", "0", "]", "\n", "weights", "=", "shifted_kernel", ".", "repeat", "(", "(", "3", ",", "1", ",", "1", ",", "1", ")", ")", "#.cuda()", "\n", "img_slice", "=", "img", "[", "i", ":", "i", "+", "1", "]", "#.cuda()  # 1 C H W", "\n", "pad_func", "=", "torch", ".", "nn", ".", "ReflectionPad2d", "(", "shifted_kernel_length", "//", "2", ")", "\n", "img_slice", "=", "pad_func", "(", "img_slice", ")", "\n", "lr_img_slice", "=", "conv2d", "(", "img_slice", ",", "weights", ",", "groups", "=", "3", ",", "stride", "=", "int", "(", "self", ".", "scale", ")", ")", "# 1 C H W", "\n", "lr_img", ".", "append", "(", "lr_img_slice", ")", "\n", "\n", "", "lr_img", "=", "torch", ".", "cat", "(", "lr_img", ",", "dim", "=", "0", ")", "\n", "\n", "", "if", "not", "cu", ":", "\n", "            ", "lr_img", "=", "lr_img", ".", "cpu", "(", ")", "\n", "", "if", "dimension", "==", "3", ":", "\n", "            ", "lr_img", "=", "lr_img", "[", "0", "]", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "return", "lr_img", "\n", "", "", ""]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.old_kernel_generator.Degradation.__init__": [[19, 36], ["old_kernel_generator.Degradation.build_base_kernel", "torch.tensor().cuda", "torch.tensor().cuda", "old_kernel_generator.Degradation.build_G_kernel", "old_kernel_generator.Degradation.convolve_kernel", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.data.old_kernel_generator.Degradation.build_base_kernel", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.old_kernel_generator.Degradation.build_G_kernel", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.old_kernel_generator.Degradation.convolve_kernel"], ["    ", "def", "__init__", "(", "self", ",", "kernel_size", ",", "scale_factor", ",", "type", "=", "0.0", ",", "theta", "=", "0.0", ",", "sigma", "=", "[", "1.0", ",", "1.0", "]", ")", ":", "\n", "        ", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "scale", "=", "scale_factor", "\n", "\n", "self", ".", "basis_kernel", "=", "None", "\n", "self", ".", "b_kernel_size", "=", "21", "\n", "# Type : Impulse, Box, Bilinear, Bicubic, Lanczos2", "\n", "self", ".", "type", "=", "type", "\n", "self", ".", "build_base_kernel", "(", ")", "\n", "\n", "self", ".", "Gaussian_kernel", "=", "None", "\n", "self", ".", "G_kernel_size", "=", "21", "\n", "self", ".", "theta", "=", "torch", ".", "tensor", "(", "[", "theta", "]", ")", ".", "cuda", "(", ")", "\n", "self", ".", "sigma", "=", "torch", ".", "tensor", "(", "sigma", ")", ".", "cuda", "(", ")", "\n", "self", ".", "build_G_kernel", "(", ")", "\n", "\n", "self", ".", "kernel", "=", "self", ".", "convolve_kernel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.old_kernel_generator.Degradation.set_parameters": [[37, 40], ["None"], "methods", ["None"], ["", "def", "set_parameters", "(", "self", ",", "sigma", ",", "theta", ")", ":", "\n", "        ", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "theta", "=", "theta", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.old_kernel_generator.Degradation.build_base_kernel": [[41, 70], ["torch.zeros().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda.size", "torch.zeros().cuda.sum", "torch.zeros", "torch.Tensor"], "methods", ["None"], ["", "def", "build_base_kernel", "(", "self", ")", ":", "\n", "        ", "kernel_center", "=", "self", ".", "b_kernel_size", "//", "2", "\n", "kernel", "=", "torch", ".", "zeros", "(", "(", "self", ".", "b_kernel_size", ",", "self", ".", "b_kernel_size", ")", ")", ".", "cuda", "(", ")", "\n", "'''\n        if self.type < 0.2:\n            type_name = 'impulse'\n        elif self.type < 0.4:\n            type_name = 'box'\n        elif self.type < 0.6:\n            type_name = 'bilinear'\n        elif self.type < 0.8:\n            type_name = 'bicubic'\n        else:\n            type_name = 'lanczos'\n        '''", "\n", "if", "self", ".", "type", "<", "0.5", ":", "\n", "            ", "type_name", "=", "'impulse'", "\n", "", "else", ":", "\n", "            ", "type_name", "=", "'bicubic'", "\n", "\n", "", "kernel_1d", "=", "torch", ".", "Tensor", "(", "base_kernel_dict", "[", "type_name", "]", "[", "self", ".", "scale", "]", ")", ".", "cuda", "(", ")", "\n", "k_length", "=", "kernel_1d", ".", "size", "(", "0", ")", "\n", "kernel_2d", "=", "kernel_1d", "[", ":", ",", "None", "]", "*", "kernel_1d", "[", "None", "]", "\n", "l_length", ",", "r_length", "=", "(", "k_length", "-", "1", ")", "//", "2", ",", "(", "k_length", "+", "2", ")", "//", "2", "\n", "\n", "kernel", "[", "kernel_center", "-", "l_length", ":", "kernel_center", "+", "r_length", ",", "\n", "kernel_center", "-", "l_length", ":", "kernel_center", "+", "r_length", "]", "=", "kernel_2d", "\n", "kernel", "=", "kernel", "/", "kernel", ".", "sum", "(", ")", "\n", "self", ".", "basis_kernel", "=", "kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.old_kernel_generator.Degradation.build_G_kernel": [[71, 102], ["old_kernel_generator.Degradation.sigma.new_zeros", "torch.linspace", "kernel_range[].repeat", "kernel_range[].repeat", "old_kernel_generator.Degradation.theta.cos", "old_kernel_generator.Degradation.theta.sin", "gaussian", "kernel_range.cuda.cuda.cuda", "gaussian.sum"], "methods", ["None"], ["", "def", "build_G_kernel", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "sigma", "[", "0", "]", "==", "0", "and", "self", ".", "sigma", "[", "1", "]", "==", "0", ":", "\n", "            ", "kernel", "=", "self", ".", "sigma", ".", "new_zeros", "(", "(", "self", ".", "G_kernel_size", ",", "self", ".", "G_kernel_size", ")", ")", "\n", "kernel", "[", "self", ".", "G_kernel_size", "//", "2", ",", "self", ".", "G_kernel_size", "//", "2", "]", "=", "1", "\n", "", "else", ":", "\n", "            ", "kernel_radius", "=", "self", ".", "G_kernel_size", "//", "2", "\n", "kernel_range", "=", "torch", ".", "linspace", "(", "-", "kernel_radius", ",", "kernel_radius", ",", "self", ".", "G_kernel_size", ")", "\n", "if", "self", ".", "sigma", ".", "is_cuda", ":", "\n", "                ", "kernel_range", "=", "kernel_range", ".", "cuda", "(", ")", "\n", "\n", "", "horizontal_range", "=", "kernel_range", "[", "None", "]", ".", "repeat", "(", "(", "self", ".", "G_kernel_size", ",", "1", ")", ")", "\n", "vertical_range", "=", "kernel_range", "[", ":", ",", "None", "]", ".", "repeat", "(", "(", "1", ",", "self", ".", "G_kernel_size", ")", ")", "\n", "\n", "cos_theta", "=", "self", ".", "theta", ".", "cos", "(", ")", "\n", "sin_theta", "=", "self", ".", "theta", ".", "sin", "(", ")", "\n", "\n", "cos_theta_2", "=", "cos_theta", "**", "2", "\n", "sin_theta_2", "=", "sin_theta", "**", "2", "\n", "\n", "sigma_x_2", "=", "2.0", "*", "(", "self", ".", "sigma", "[", "0", "]", "**", "2", ")", "\n", "sigma_y_2", "=", "2.0", "*", "(", "self", ".", "sigma", "[", "1", "]", "**", "2", ")", "\n", "\n", "a", "=", "cos_theta_2", "/", "sigma_x_2", "+", "sin_theta_2", "/", "sigma_y_2", "\n", "b", "=", "sin_theta", "*", "cos_theta", "*", "(", "1.0", "/", "sigma_y_2", "-", "1.0", "/", "sigma_x_2", ")", "\n", "c", "=", "sin_theta_2", "/", "sigma_x_2", "+", "cos_theta_2", "/", "sigma_y_2", "\n", "\n", "gaussian", "=", "lambda", "x", ",", "y", ":", "(", "-", "(", "a", "*", "(", "x", "**", "2", ")", "+", "2.0", "*", "b", "*", "x", "*", "y", "+", "c", "*", "(", "y", "**", "2", ")", ")", ")", ".", "exp", "(", ")", "\n", "\n", "kernel", "=", "gaussian", "(", "horizontal_range", ",", "vertical_range", ")", "\n", "kernel", "=", "kernel", "/", "kernel", ".", "sum", "(", ")", "\n", "", "self", ".", "Gaussian_kernel", "=", "kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.old_kernel_generator.Degradation.convolve_kernel": [[103, 117], ["old_kernel_generator.Degradation.basis_kernel.repeat", "old_kernel_generator.Degradation.Gaussian_kernel.repeat", "torch.nn.functional.conv2d", "final_kernel.squeeze.squeeze.squeeze", "final_kernel.squeeze.squeeze.size", "final_kernel.squeeze.squeeze.sum"], "methods", ["None"], ["", "def", "convolve_kernel", "(", "self", ")", ":", "\n", "# Combine basis kernel, Gaussian kernel", "\n", "# We should flip the second kernel when combine two kernels, but we can skip it because Gaussian kernel is 180 rotation invariant", "\n", "        ", "base_kernel", "=", "self", ".", "basis_kernel", ".", "repeat", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "Gaussian_kernel", "=", "self", ".", "Gaussian_kernel", ".", "repeat", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "pad_length", "=", "self", ".", "G_kernel_size", "//", "2", "\n", "final_kernel", "=", "conv2d", "(", "base_kernel", ",", "Gaussian_kernel", ",", "padding", "=", "pad_length", ")", "\n", "final_kernel", "=", "final_kernel", ".", "squeeze", "(", ")", "\n", "center", "=", "final_kernel", ".", "size", "(", "0", ")", "//", "2", "\n", "radius", "=", "self", ".", "kernel_size", "//", "2", "\n", "final_kernel", "=", "final_kernel", "[", "center", "-", "radius", ":", "center", "+", "radius", "+", "1", ",", "center", "-", "radius", ":", "center", "+", "radius", "+", "1", "]", "\n", "final_kernel", "=", "final_kernel", "/", "final_kernel", ".", "sum", "(", ")", "\n", "\n", "return", "final_kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.old_kernel_generator.Degradation.set_kernel_directly": [[118, 120], ["None"], "methods", ["None"], ["", "def", "set_kernel_directly", "(", "self", ",", "kernel", ")", ":", "\n", "        ", "self", ".", "kernel", "=", "kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.old_kernel_generator.Degradation.get_kernel": [[121, 123], ["None"], "methods", ["None"], ["", "def", "get_kernel", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.old_kernel_generator.Degradation.get_features": [[124, 126], ["torch.reshape"], "methods", ["None"], ["", "def", "get_features", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "reshape", "(", "self", ".", "kernel", ",", "(", "self", ".", "kernel_size", "**", "2", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.old_kernel_generator.Degradation.apply": [[127, 149], ["old_kernel_generator.Degradation.kernel.repeat().cuda", "torch.nn.ReflectionPad2d.cuda", "torch.nn.ReflectionPad2d", "torch.nn.ReflectionPad2d.", "torch.nn.functional.conv2d", "lr_img.cpu.cpu.cpu", "old_kernel_generator.Degradation.kernel.repeat", "int"], "methods", ["None"], ["", "def", "apply", "(", "self", ",", "img", ")", ":", "\n", "        ", "cu", "=", "False", "\n", "if", "img", ".", "is_cuda", ":", "\n", "            ", "cu", "=", "True", "\n", "\n", "", "weights", "=", "self", ".", "kernel", ".", "repeat", "(", "(", "3", ",", "1", ",", "1", ",", "1", ")", ")", ".", "cuda", "(", ")", "\n", "img", "=", "img", ".", "cuda", "(", ")", "\n", "pad_func", "=", "torch", ".", "nn", ".", "ReflectionPad2d", "(", "self", ".", "kernel_size", "//", "2", ")", "\n", "dimension", "=", "4", "\n", "if", "img", ".", "ndim", "==", "3", ":", "\n", "# Single Image C H W", "\n", "            ", "dimension", "=", "3", "\n", "img", "=", "img", "[", "None", "]", "\n", "", "img", "=", "pad_func", "(", "img", ")", "\n", "lr_img", "=", "conv2d", "(", "img", ",", "weights", ",", "groups", "=", "3", ",", "stride", "=", "int", "(", "self", ".", "scale", ")", ")", "\n", "\n", "if", "not", "cu", ":", "\n", "            ", "lr_img", "=", "lr_img", ".", "cpu", "(", ")", "\n", "", "if", "dimension", "==", "3", ":", "\n", "            ", "lr_img", "=", "lr_img", "[", "0", "]", "\n", "\n", "", "return", "lr_img", "", "", "", ""]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.is_image_file": [[18, 20], ["any", "filename.endswith"], "function", ["None"], ["    ", "from", "yaml", "import", "CLoader", "as", "Loader", ",", "CDumper", "as", "Dumper", "\n", "", "except", "ImportError", ":", "\n", "    ", "from", "yaml", "import", "Loader", ",", "Dumper", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util._get_paths_from_images": [[22, 33], ["os.path.isdir", "sorted", "os.walk", "sorted", "util.is_image_file", "os.path.join", "images.append"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.is_image_file"], ["\n", "", "def", "OrderedYaml", "(", ")", ":", "\n", "    ", "'''yaml orderedDict support'''", "\n", "_mapping_tag", "=", "yaml", ".", "resolver", ".", "BaseResolver", ".", "DEFAULT_MAPPING_TAG", "\n", "\n", "def", "dict_representer", "(", "dumper", ",", "data", ")", ":", "\n", "        ", "return", "dumper", ".", "represent_dict", "(", "data", ".", "items", "(", ")", ")", "\n", "\n", "", "def", "dict_constructor", "(", "loader", ",", "node", ")", ":", "\n", "        ", "return", "OrderedDict", "(", "loader", ".", "construct_pairs", "(", "node", ")", ")", "\n", "\n", "", "Dumper", ".", "add_representer", "(", "OrderedDict", ",", "dict_representer", ")", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util._get_paths_from_lmdb": [[35, 43], ["pickle.load", "open", "len", "os.path.join", "len"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.load"], ["return", "Loader", ",", "Dumper", "\n", "\n", "\n", "####################", "\n", "# miscellaneous", "\n", "####################", "\n", "\n", "\n", "", "def", "get_timestamp", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.get_image_paths": [[45, 57], ["util._get_paths_from_lmdb", "sorted", "NotImplementedError", "util._get_paths_from_images"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util._get_paths_from_lmdb", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util._get_paths_from_images"], ["\n", "\n", "", "def", "mkdir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n", "\n", "", "", "def", "mkdirs", "(", "paths", ")", ":", "\n", "    ", "if", "isinstance", "(", "paths", ",", "str", ")", ":", "\n", "        ", "mkdir", "(", "paths", ")", "\n", "", "else", ":", "\n", "        ", "for", "path", "in", "paths", ":", "\n", "            ", "mkdir", "(", "path", ")", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.glob_file_list": [[59, 61], ["sorted", "glob.glob", "os.path.join"], "function", ["None"], ["\n", "", "", "", "def", "mkdir_and_rename", "(", "path", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util._read_img_lmdb": [[64, 73], ["numpy.frombuffer", "np.frombuffer.reshape", "env.begin", "txn.get", "key.encode"], "function", ["None"], ["logger", "=", "logging", ".", "getLogger", "(", "'base'", ")", "\n", "logger", ".", "info", "(", "'Path already exists. Rename it to [{:s}]'", ".", "format", "(", "new_name", ")", ")", "\n", "os", ".", "rename", "(", "path", ",", "new_name", ")", "\n", "", "os", ".", "makedirs", "(", "path", ")", "\n", "\n", "\n", "", "def", "set_random_seed", "(", "seed", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.read_img": [[75, 89], ["cv2.imread", "util._read_img_lmdb", "np.expand_dims.astype", "numpy.expand_dims"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util._read_img_lmdb"], ["\n", "\n", "", "def", "setup_logger", "(", "logger_name", ",", "root", ",", "phase", ",", "level", "=", "logging", ".", "INFO", ",", "screen", "=", "False", ",", "tofile", "=", "False", ")", ":", "\n", "    ", "'''set up logger'''", "\n", "lg", "=", "logging", ".", "getLogger", "(", "logger_name", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s.%(msecs)03d - %(levelname)s: %(message)s'", ",", "\n", "datefmt", "=", "'%y-%m-%d %H:%M:%S'", ")", "\n", "lg", ".", "setLevel", "(", "level", ")", "\n", "if", "tofile", ":", "\n", "        ", "log_file", "=", "os", ".", "path", ".", "join", "(", "root", ",", "phase", "+", "'_{}.log'", ".", "format", "(", "get_timestamp", "(", ")", ")", ")", "\n", "fh", "=", "logging", ".", "FileHandler", "(", "log_file", ",", "mode", "=", "'w'", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "lg", ".", "addHandler", "(", "fh", ")", "\n", "", "if", "screen", ":", "\n", "        ", "sh", "=", "logging", ".", "StreamHandler", "(", ")", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.read_img_seq": [[91, 112], ["numpy.stack", "torch.from_numpy().float", "type", "sorted", "glob.glob", "util.read_img", "numpy.load", "torch.from_numpy", "os.path.join", "numpy.ascontiguousarray", "numpy.transpose"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.read_img", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.load"], ["lg", ".", "addHandler", "(", "sh", ")", "\n", "\n", "\n", "####################", "\n", "# image convert", "\n", "####################", "\n", "", "", "def", "crop_border", "(", "img_list", ",", "crop_border", ")", ":", "\n", "    ", "\"\"\"Crop borders of images\n    Args:\n        img_list (list [Numpy]): HWC\n        crop_border (int): crop border for each end of height and weight\n\n    Returns:\n        (list [Numpy]): cropped image list\n    \"\"\"", "\n", "if", "crop_border", "==", "0", ":", "\n", "        ", "return", "img_list", "\n", "", "else", ":", "\n", "        ", "return", "[", "v", "[", "crop_border", ":", "-", "crop_border", ",", "crop_border", ":", "-", "crop_border", "]", "for", "v", "in", "img_list", "]", "\n", "\n", "\n", "", "", "def", "tensor2img", "(", "tensor", ",", "out_type", "=", "np", ".", "uint8", ",", "min_max", "=", "(", "0", ",", "1", ")", ",", "mode", "=", "'bgr'", ")", ":", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.index_generation": [[114, 161], ["range", "return_l.append", "ValueError", "ValueError"], "function", ["None"], ["\n", "tensor", "=", "tensor", ".", "squeeze", "(", ")", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "clamp_", "(", "*", "min_max", ")", "# clamp", "\n", "tensor", "=", "(", "tensor", "-", "min_max", "[", "0", "]", ")", "/", "(", "min_max", "[", "1", "]", "-", "min_max", "[", "0", "]", ")", "# to range [0,1]", "\n", "n_dim", "=", "tensor", ".", "dim", "(", ")", "\n", "if", "n_dim", "==", "4", ":", "\n", "        ", "n_img", "=", "len", "(", "tensor", ")", "\n", "img_np", "=", "make_grid", "(", "tensor", ",", "nrow", "=", "int", "(", "math", ".", "sqrt", "(", "n_img", ")", ")", ",", "normalize", "=", "False", ")", ".", "numpy", "(", ")", "\n", "if", "mode", "==", "'rgb'", ":", "\n", "            ", "img_np", "=", "np", ".", "transpose", "(", "img_np", ",", "(", "1", ",", "2", ",", "0", ")", ")", "# HWC, RGB", "\n", "", "else", ":", "\n", "            ", "img_np", "=", "np", ".", "transpose", "(", "img_np", "[", "[", "2", ",", "1", ",", "0", "]", ",", ":", ",", ":", "]", ",", "(", "1", ",", "2", ",", "0", ")", ")", "# HWC, BGR", "\n", "", "", "elif", "n_dim", "==", "3", ":", "\n", "        ", "img_np", "=", "tensor", ".", "numpy", "(", ")", "\n", "if", "mode", "==", "'rgb'", ":", "\n", "            ", "img_np", "=", "np", ".", "transpose", "(", "img_np", ",", "(", "1", ",", "2", ",", "0", ")", ")", "# HWC, RGB", "\n", "", "else", ":", "\n", "            ", "img_np", "=", "np", ".", "transpose", "(", "img_np", "[", "[", "2", ",", "1", ",", "0", "]", ",", ":", ",", ":", "]", ",", "(", "1", ",", "2", ",", "0", ")", ")", "# HWC, BGR", "\n", "", "", "elif", "n_dim", "==", "2", ":", "\n", "        ", "img_np", "=", "tensor", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\n", "'Only support 4D, 3D and 2D tensor. But received with dimension: {:d}'", ".", "format", "(", "n_dim", ")", ")", "\n", "", "if", "out_type", "==", "np", ".", "uint8", ":", "\n", "        ", "img_np", "=", "(", "img_np", "*", "255.0", ")", ".", "round", "(", ")", "\n", "# Important. Unlike matlab, numpy.unit8() WILL NOT round by default.", "\n", "", "return", "img_np", ".", "astype", "(", "out_type", ")", "\n", "\n", "\n", "", "def", "tensor2rgbimg", "(", "tensor", ",", "out_type", "=", "np", ".", "uint8", ",", "min_max", "=", "(", "0", ",", "1", ")", ",", "mode", "=", "'bgr'", ")", ":", "\n", "    ", "'''\n    Converts a torch Tensor into an image Numpy array\n    Input: 4D(B,(3/1),H,W), 3D(C,H,W), or 2D(H,W), any range, RGB channel order\n    Output: 3D(H,W,C) or 2D(H,W), [0,255], np.uint8 (default)\n    '''", "\n", "tensor", "=", "tensor", ".", "squeeze", "(", ")", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "clamp_", "(", "*", "min_max", ")", "# clamp", "\n", "tensor", "=", "(", "tensor", "-", "min_max", "[", "0", "]", ")", "/", "(", "min_max", "[", "1", "]", "-", "min_max", "[", "0", "]", ")", "# to range [0,1]", "\n", "n_dim", "=", "tensor", ".", "dim", "(", ")", "\n", "if", "n_dim", "==", "4", ":", "\n", "        ", "n_img", "=", "len", "(", "tensor", ")", "\n", "img_np", "=", "make_grid", "(", "tensor", ",", "nrow", "=", "int", "(", "math", ".", "sqrt", "(", "n_img", ")", ")", ",", "normalize", "=", "False", ")", ".", "numpy", "(", ")", "\n", "img_np", "=", "np", ".", "transpose", "(", "img_np", ",", "(", "1", ",", "2", ",", "0", ")", ")", "# HWC, RGB", "\n", "", "elif", "n_dim", "==", "3", ":", "\n", "        ", "img_np", "=", "tensor", ".", "numpy", "(", ")", "\n", "img_np", "=", "np", ".", "transpose", "(", "img_np", ",", "(", "1", ",", "2", ",", "0", ")", ")", "# HWC, RGB", "\n", "", "elif", "n_dim", "==", "2", ":", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.augment": [[169, 185], ["util.augment._augment"], "function", ["None"], ["", "return", "img_np", ".", "astype", "(", "out_type", ")", "\n", "\n", "\n", "", "def", "save_img", "(", "img", ",", "img_path", ",", "mode", "=", "'RGB'", ")", ":", "\n", "    ", "cv2", ".", "imwrite", "(", "img_path", ",", "img", ")", "\n", "\n", "\n", "", "def", "DUF_downsample", "(", "x", ",", "scale", "=", "4", ",", "sigma", "=", "None", ")", ":", "\n", "    ", "\"\"\"Downsamping with Gaussian kernel used in the DUF official code\n\n    Args:\n        x (Tensor, [B, T, C, H, W]): frames to be downsampled.\n        scale (int): downsampling factor: 2 | 3 | 4.\n    \"\"\"", "\n", "\n", "assert", "scale", "in", "[", "2", ",", "3", ",", "4", "]", ",", "'Scale [{}] is not supported'", ".", "format", "(", "scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.augment_flow": [[187, 218], ["util.augment._augment"], "function", ["None"], ["        ", "import", "scipy", ".", "ndimage", ".", "filters", "as", "fi", "\n", "inp", "=", "np", ".", "zeros", "(", "(", "kernlen", ",", "kernlen", ")", ")", "\n", "# set element at the middle to one, a dirac delta", "\n", "inp", "[", "kernlen", "//", "2", ",", "kernlen", "//", "2", "]", "=", "1", "\n", "# gaussian-smooth the dirac, resulting in a gaussian filter mask", "\n", "return", "fi", ".", "gaussian_filter", "(", "inp", ",", "nsig", ")", "\n", "\n", "", "B", ",", "T", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "reshape", "(", "-", "1", ",", "H", ",", "W", ")", "\n", "x", "=", "x", ".", "reshape", "(", "-", "1", ",", "1", ",", "H", ",", "W", ")", "\n", "pad_w", ",", "pad_h", "=", "6", "+", "scale", "*", "2", ",", "6", "+", "scale", "*", "2", "# 6 is the pad of the gaussian filter", "\n", "r_h", ",", "r_w", "=", "0", ",", "0", "\n", "if", "scale", "==", "3", ":", "\n", "        ", "r_h", "=", "3", "-", "(", "H", "%", "3", ")", "\n", "r_w", "=", "3", "-", "(", "W", "%", "3", ")", "\n", "", "x", "=", "F", ".", "pad", "(", "x", ",", "[", "pad_w", ",", "pad_w", "+", "r_w", ",", "pad_h", ",", "pad_h", "+", "r_h", "]", ",", "'reflect'", ")", "\n", "\n", "if", "sigma", "is", "None", ":", "\n", "        ", "sigma", "=", "0.4", "*", "scale", "\n", "", "gaussian_filter", "=", "torch", ".", "from_numpy", "(", "gkern", "(", "13", ",", "sigma", ")", ")", ".", "type_as", "(", "x", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "x", "=", "F", ".", "conv2d", "(", "x", ",", "gaussian_filter", ",", "stride", "=", "scale", ")", "\n", "x", "=", "x", "[", ":", ",", ":", ",", "2", ":", "-", "2", ",", "2", ":", "-", "2", "]", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "T", ",", "C", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", "\n", "return", "x", "\n", "\n", "\n", "", "def", "single_forward", "(", "model", ",", "inp", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.channel_convert": [[220, 232], ["cv2.cvtColor", "numpy.expand_dims", "util.bgr2ycbcr", "numpy.expand_dims", "cv2.cvtColor"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.bgr2ycbcr"], ["\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "model_output", "=", "model", "(", "inp", ")", "\n", "if", "isinstance", "(", "model_output", ",", "list", ")", "or", "isinstance", "(", "model_output", ",", "tuple", ")", ":", "\n", "            ", "output", "=", "model_output", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "output", "=", "model_output", "\n", "", "", "output", "=", "output", ".", "data", ".", "float", "(", ")", ".", "cpu", "(", ")", "\n", "return", "output", "\n", "\n", "\n", "", "def", "flipx4_forward", "(", "model", ",", "inp", ")", ":", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.rgb2ycbcr": [[234, 256], ["img.astype", "rlt.round.astype", "rlt.round.round", "numpy.dot", "numpy.matmul"], "function", ["None"], ["\n", "# normal", "\n", "output_f", "=", "single_forward", "(", "model", ",", "inp", ")", "\n", "\n", "# flip W", "\n", "output", "=", "single_forward", "(", "model", ",", "torch", ".", "flip", "(", "inp", ",", "(", "-", "1", ",", ")", ")", ")", "\n", "output_f", "=", "output_f", "+", "torch", ".", "flip", "(", "output", ",", "(", "-", "1", ",", ")", ")", "\n", "# flip H", "\n", "output", "=", "single_forward", "(", "model", ",", "torch", ".", "flip", "(", "inp", ",", "(", "-", "2", ",", ")", ")", ")", "\n", "output_f", "=", "output_f", "+", "torch", ".", "flip", "(", "output", ",", "(", "-", "2", ",", ")", ")", "\n", "# flip both H and W", "\n", "output", "=", "single_forward", "(", "model", ",", "torch", ".", "flip", "(", "inp", ",", "(", "-", "2", ",", "-", "1", ")", ")", ")", "\n", "output_f", "=", "output_f", "+", "torch", ".", "flip", "(", "output", ",", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "\n", "return", "output_f", "/", "4", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.bgr2ycbcr": [[258, 280], ["img.astype", "rlt.round.astype", "rlt.round.round", "numpy.dot", "numpy.matmul"], "function", ["None"], ["# metric", "\n", "####################", "\n", "\n", "\n", "", "def", "calculate_psnr", "(", "img1", ",", "img2", ")", ":", "\n", "# img1 and img2 have range [0, 255]", "\n", "    ", "img1", "=", "img1", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img2", "=", "img2", ".", "astype", "(", "np", ".", "float64", ")", "\n", "mse", "=", "np", ".", "mean", "(", "(", "img1", "-", "img2", ")", "**", "2", ")", "\n", "if", "mse", "==", "0", ":", "\n", "        ", "return", "float", "(", "'inf'", ")", "\n", "", "return", "20", "*", "math", ".", "log10", "(", "255.0", "/", "math", ".", "sqrt", "(", "mse", ")", ")", "\n", "\n", "\n", "", "def", "ssim", "(", "img1", ",", "img2", ")", ":", "\n", "    ", "C1", "=", "(", "0.01", "*", "255", ")", "**", "2", "\n", "C2", "=", "(", "0.03", "*", "255", ")", "**", "2", "\n", "\n", "img1", "=", "img1", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img2", "=", "img2", ".", "astype", "(", "np", ".", "float64", ")", "\n", "kernel", "=", "cv2", ".", "getGaussianKernel", "(", "11", ",", "1.5", ")", "\n", "window", "=", "np", ".", "outer", "(", "kernel", ",", "kernel", ".", "transpose", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.ycbcr2rgb": [[282, 300], ["img.astype", "rlt.round.astype", "rlt.round.round", "numpy.matmul"], "function", ["None"], ["mu2", "=", "cv2", ".", "filter2D", "(", "img2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "\n", "mu1_sq", "=", "mu1", "**", "2", "\n", "mu2_sq", "=", "mu2", "**", "2", "\n", "mu1_mu2", "=", "mu1", "*", "mu2", "\n", "sigma1_sq", "=", "cv2", ".", "filter2D", "(", "img1", "**", "2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu1_sq", "\n", "sigma2_sq", "=", "cv2", ".", "filter2D", "(", "img2", "**", "2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu2_sq", "\n", "sigma12", "=", "cv2", ".", "filter2D", "(", "img1", "*", "img2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu1_mu2", "\n", "\n", "ssim_map", "=", "(", "(", "2", "*", "mu1_mu2", "+", "C1", ")", "*", "(", "2", "*", "sigma12", "+", "C2", ")", ")", "/", "(", "(", "mu1_sq", "+", "mu2_sq", "+", "C1", ")", "*", "\n", "(", "sigma1_sq", "+", "sigma2_sq", "+", "C2", ")", ")", "\n", "return", "ssim_map", ".", "mean", "(", ")", "\n", "\n", "\n", "", "def", "calculate_ssim", "(", "img1", ",", "img2", ")", ":", "\n", "    ", "'''calculate SSIM\n    the same outputs as MATLAB's\n    img1, img2: [0, 255]\n    '''", "\n", "if", "not", "img1", ".", "shape", "==", "img2", ".", "shape", ":", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.modcrop": [[302, 316], ["numpy.copy", "ValueError"], "function", ["None"], ["", "if", "img1", ".", "ndim", "==", "2", ":", "\n", "        ", "return", "ssim", "(", "img1", ",", "img2", ")", "\n", "", "elif", "img1", ".", "ndim", "==", "3", ":", "\n", "        ", "if", "img1", ".", "shape", "[", "2", "]", "==", "3", ":", "\n", "            ", "ssims", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "                ", "ssims", ".", "append", "(", "ssim", "(", "img1", ",", "img2", ")", ")", "\n", "", "return", "np", ".", "array", "(", "ssims", ")", ".", "mean", "(", ")", "\n", "", "elif", "img1", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "            ", "return", "ssim", "(", "np", ".", "squeeze", "(", "img1", ")", ",", "np", ".", "squeeze", "(", "img2", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Wrong input image dimensions.'", ")", "\n", "\n", "\n", "", "", "class", "ProgressBar", "(", "object", ")", ":", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.cubic": [[324, 331], ["torch.abs"], "function", ["None"], ["self", ".", "bar_width", "=", "(", "bar_width", "if", "bar_width", "<=", "max_bar_width", "else", "max_bar_width", ")", "\n", "self", ".", "completed", "=", "0", "\n", "if", "start", ":", "\n", "            ", "self", ".", "start", "(", ")", "\n", "\n", "", "", "def", "_get_max_bar_width", "(", "self", ")", ":", "\n", "        ", "terminal_width", ",", "_", "=", "get_terminal_size", "(", ")", "\n", "max_bar_width", "=", "min", "(", "int", "(", "terminal_width", "*", "0.6", ")", ",", "terminal_width", "-", "50", ")", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.calculate_weights_indices": [[333, 386], ["torch.linspace", "torch.floor", "torch.sum().view", "torch.sum", "weights.narrow.contiguous", "indices.narrow.contiguous", "math.ceil", "torch.floor.view().expand", "torch.linspace().view().expand", "u.view().expand", "util.cubic", "torch.sum().view.expand", "math.isclose", "indices.narrow.narrow", "weights.narrow.narrow", "math.isclose", "indices.narrow.narrow", "weights.narrow.narrow", "indices.narrow.max", "int", "int", "util.cubic", "torch.sum", "indices.narrow.min", "torch.floor.view", "torch.linspace().view", "u.view", "torch.linspace"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.cubic", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.cubic"], ["            ", "print", "(", "'terminal width is too small ({}), please consider widen the terminal for better '", "\n", "'progressbar visualization'", ".", "format", "(", "terminal_width", ")", ")", "\n", "max_bar_width", "=", "10", "\n", "", "return", "max_bar_width", "\n", "\n", "", "def", "start", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "task_num", ">", "0", ":", "\n", "            ", "sys", ".", "stdout", ".", "write", "(", "'[{}] 0/{}, elapsed: 0s, ETA:\\n{}\\n'", ".", "format", "(", "\n", "' '", "*", "self", ".", "bar_width", ",", "self", ".", "task_num", ",", "'Start...'", ")", ")", "\n", "", "else", ":", "\n", "            ", "sys", ".", "stdout", ".", "write", "(", "'completed: 0, elapsed: 0s'", ")", "\n", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "def", "update", "(", "self", ",", "msg", "=", "'In progress...'", ")", ":", "\n", "        ", "self", ".", "completed", "+=", "1", "\n", "elapsed", "=", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", "\n", "fps", "=", "self", ".", "completed", "/", "elapsed", "\n", "if", "self", ".", "task_num", ">", "0", ":", "\n", "            ", "percentage", "=", "self", ".", "completed", "/", "float", "(", "self", ".", "task_num", ")", "\n", "eta", "=", "int", "(", "elapsed", "*", "(", "1", "-", "percentage", ")", "/", "percentage", "+", "0.5", ")", "\n", "mark_width", "=", "int", "(", "self", ".", "bar_width", "*", "percentage", ")", "\n", "bar_chars", "=", "'>'", "*", "mark_width", "+", "'-'", "*", "(", "self", ".", "bar_width", "-", "mark_width", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "'\\033[2F'", ")", "# cursor up 2 lines", "\n", "sys", ".", "stdout", ".", "write", "(", "'\\033[J'", ")", "# clean the output (remove extra chars since last display)", "\n", "sys", ".", "stdout", ".", "write", "(", "'[{}] {}/{}, {:.1f} task/s, elapsed: {}s, ETA: {:5}s\\n{}\\n'", ".", "format", "(", "\n", "bar_chars", ",", "self", ".", "completed", ",", "self", ".", "task_num", ",", "fps", ",", "int", "(", "elapsed", "+", "0.5", ")", ",", "eta", ",", "msg", ")", ")", "\n", "", "else", ":", "\n", "            ", "sys", ".", "stdout", ".", "write", "(", "'completed: {}, elapsed: {}s, {:.1f} tasks/s'", ".", "format", "(", "\n", "self", ".", "completed", ",", "int", "(", "elapsed", "+", "0.5", ")", ",", "fps", ")", ")", "\n", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.imresize": [[388, 455], ["img.size", "util.calculate_weights_indices", "util.calculate_weights_indices", "torch.FloatTensor", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.FloatTensor", "weights_H.size", "range", "torch.FloatTensor", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.FloatTensor", "weights_W.size", "range", "math.ceil", "math.ceil", "int", "img_aug[].transpose().mv", "img_aug[].transpose().mv", "img_aug[].transpose().mv", "int", "out_1_aug[].mv", "out_1_aug[].mv", "out_1_aug[].mv", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "img_aug[].transpose", "img_aug[].transpose", "img_aug[].transpose", "sym_patch.size", "sym_patch.size", "sym_patch.size", "sym_patch.size"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.calculate_weights_indices", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.calculate_weights_indices"], []], "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.imresize_np": [[457, 525], ["torch.from_numpy", "torch.from_numpy.size", "util.calculate_weights_indices", "util.calculate_weights_indices", "torch.FloatTensor", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.FloatTensor", "weights_H.size", "range", "torch.FloatTensor", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.FloatTensor", "weights_W.size", "range", "torch.FloatTensor.numpy", "math.ceil", "math.ceil", "int", "img_aug[].transpose().mv", "img_aug[].transpose().mv", "img_aug[].transpose().mv", "int", "out_1_aug[].mv", "out_1_aug[].mv", "out_1_aug[].mv", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "img_aug[].transpose", "img_aug[].transpose", "img_aug[].transpose", "sym_patch.size", "sym_patch.size", "sym_patch.size", "sym_patch.size"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.calculate_weights_indices", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.calculate_weights_indices"], []], "home.repos.pwc.inspect_result.esw0116_DynaVSR.meta_learner.demo.Demo.__init__": [[22, 59], ["torch.Dataset.__init__", "os.basename", "torch.util.glob_file_list", "len", "range", "range", "demo.Demo.data_info[].extend", "torch.util.read_img_seq", "ValueError", "demo.Demo.data_info[].append", "opt[].split", "opt[].split"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.glob_file_list", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.read_img_seq"], ["def", "__init__", "(", "self", ",", "opt", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Demo", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale", "=", "kwargs", "[", "'scale'", "]", "\n", "self", ".", "kernel_size", "=", "kwargs", "[", "'kernel_size'", "]", "\n", "self", ".", "model_name", "=", "kwargs", "[", "'model_name'", "]", "\n", "idx", "=", "kwargs", "[", "'idx'", "]", "if", "'idx'", "in", "kwargs", "else", "None", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "cache_data", "=", "opt", "[", "'cache_data'", "]", "\n", "self", ".", "half_N_frames", "=", "opt", "[", "'N_frames'", "]", "//", "2", "\n", "if", "idx", "is", "None", ":", "\n", "            ", "self", ".", "name", "=", "opt", "[", "'name'", "]", "\n", "self", ".", "root", "=", "opt", "[", "'dataroot'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "name", "=", "opt", "[", "'name'", "]", ".", "split", "(", "'+'", ")", "[", "idx", "]", "\n", "self", ".", "root", "=", "opt", "[", "'dataroot'", "]", ".", "split", "(", "'+'", ")", "[", "idx", "]", "\n", "\n", "", "self", ".", "data_type", "=", "self", ".", "opt", "[", "'data_type'", "]", "\n", "self", ".", "data_info", "=", "{", "'path'", ":", "[", "]", ",", "'folder'", ":", "[", "]", ",", "'idx'", ":", "[", "]", ",", "'border'", ":", "[", "]", "}", "\n", "if", "self", ".", "data_type", "==", "'lmdb'", ":", "\n", "            ", "raise", "ValueError", "(", "'No need to use LMDB during validation/test.'", ")", "\n", "#### Generate data info and cache data", "\n", "", "self", ".", "imgs", "=", "{", "}", "\n", "\n", "subfolder_name", "=", "osp", ".", "basename", "(", "self", ".", "root", ")", "\n", "\n", "self", ".", "data_info", "[", "'path'", "]", "=", "util", ".", "glob_file_list", "(", "self", ".", "root", ")", "\n", "max_idx", "=", "len", "(", "self", ".", "data_info", "[", "'path'", "]", ")", "\n", "self", ".", "data_info", "[", "'folder'", "]", "=", "[", "subfolder_name", "]", "*", "max_idx", "\n", "\n", "for", "i", "in", "range", "(", "max_idx", ")", ":", "\n", "            ", "self", ".", "data_info", "[", "'idx'", "]", ".", "append", "(", "'{}/{}'", ".", "format", "(", "i", ",", "max_idx", ")", ")", "\n", "", "border_l", "=", "[", "0", "]", "*", "max_idx", "\n", "for", "i", "in", "range", "(", "self", ".", "half_N_frames", ")", ":", "\n", "            ", "border_l", "[", "i", "]", "=", "1", "\n", "border_l", "[", "max_idx", "-", "i", "-", "1", "]", "=", "1", "\n", "", "self", ".", "data_info", "[", "'border'", "]", ".", "extend", "(", "border_l", ")", "\n", "self", ".", "imgs", "[", "subfolder_name", "]", "=", "util", ".", "read_img_seq", "(", "self", ".", "data_info", "[", "'path'", "]", ",", "'img'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.meta_learner.demo.Demo.__getitem__": [[60, 74], ["[].split", "torch.util.index_generation", "demo.Demo.imgs[].index_select", "int", "int", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.index_generation"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "folder", "=", "self", ".", "data_info", "[", "'folder'", "]", "[", "index", "]", "\n", "idx", ",", "max_idx", "=", "self", ".", "data_info", "[", "'idx'", "]", "[", "index", "]", ".", "split", "(", "'/'", ")", "\n", "idx", ",", "max_idx", "=", "int", "(", "idx", ")", ",", "int", "(", "max_idx", ")", "\n", "border", "=", "self", ".", "data_info", "[", "'border'", "]", "[", "index", "]", "\n", "\n", "select_idx", "=", "util", ".", "index_generation", "(", "idx", ",", "max_idx", ",", "self", ".", "opt", "[", "'N_frames'", "]", ",", "padding", "=", "self", ".", "opt", "[", "'padding'", "]", ")", "\n", "imgs", "=", "self", ".", "imgs", "[", "folder", "]", ".", "index_select", "(", "0", ",", "torch", ".", "LongTensor", "(", "select_idx", ")", ")", "\n", "\n", "return", "{", "\n", "'LQs'", ":", "imgs", ",", "\n", "'folder'", ":", "folder", ",", "\n", "'idx'", ":", "self", ".", "data_info", "[", "'idx'", "]", "[", "index", "]", ",", "\n", "'border'", ":", "border", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.meta_learner.demo.Demo.__len__": [[76, 78], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data_info", "[", "'path'", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.meta_learner.reds.REDS.__init__": [[21, 23], ["data.meta_learner.vsrbase.VSRBase.__init__"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "REDS", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.meta_learner.reds.REDS._set_directory": [[24, 26], ["os.path.join"], "methods", ["None"], ["", "def", "_set_directory", "(", "self", ",", "data_root", ")", ":", "\n", "        ", "self", ".", "apath", "=", "path", ".", "join", "(", "data_root", ",", "'REDS'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.meta_learner.reds.REDS._scan": [[27, 72], ["os.path.join", "os.path.join", "glob.glob", "os.path.join", "os.path.join", "glob.glob.extend", "glob.glob.remove", "glob.glob", "os.path.dirname", "os.path.basename", "reds.REDS._scan._make_keys"], "methods", ["None"], ["", "def", "_scan", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Follow the train/valid split of REDS in EDVR paper.\n        Trainset : Train(except 000, 011, 015, 020) + Valid (Total 266 videos)\n        Validset : Train000, 011, 015, 020 (Total 4 videos)\n        :return:\n        \"\"\"", "\n", "\n", "def", "_make_keys", "(", "dir_path", ")", ":", "\n", "            ", "\"\"\"\n            :param dir_path: Path\n            :return: train_000 form\n            \"\"\"", "\n", "dir", ",", "base", "=", "path", ".", "dirname", "(", "dir_path", ")", ",", "path", ".", "basename", "(", "dir_path", ")", "\n", "tv", "=", "'train'", "if", "dir", ".", "find", "(", "'train'", ")", ">=", "0", "else", "'val'", "\n", "return", "tv", "+", "'_'", "+", "base", "\n", "\n", "\n", "", "dir_path_train", "=", "path", ".", "join", "(", "self", ".", "apath", ",", "'train'", ")", "\n", "dir_hr_train", "=", "path", ".", "join", "(", "dir_path_train", ",", "'HR'", ")", "\n", "list_hr_seq", "=", "glob", ".", "glob", "(", "dir_hr_train", "+", "'/*'", ")", "\n", "list_hr_seq_val", "=", "[", "k", "for", "k", "in", "list_hr_seq", "if", "k", ".", "find", "(", "'000'", ")", ">=", "0", "or", "k", ".", "find", "(", "'011'", ")", ">=", "0", "or", "k", ".", "find", "(", "'015'", ")", ">=", "0", "or", "k", ".", "find", "(", "'020'", ")", ">=", "0", "]", "\n", "\n", "for", "x", "in", "list_hr_seq_val", ":", "\n", "            ", "list_hr_seq", ".", "remove", "(", "x", ")", "\n", "\n", "", "dir_path_valid", "=", "path", ".", "join", "(", "self", ".", "apath", ",", "'val'", ")", "\n", "dir_hr_valid", "=", "path", ".", "join", "(", "dir_path_valid", ",", "'HR'", ")", "\n", "list_hr_seq", ".", "extend", "(", "glob", ".", "glob", "(", "dir_hr_valid", "+", "'/*'", ")", ")", "\n", "\n", "if", "self", ".", "split", "==", "'train'", ":", "\n", "            ", "dict_hr", "=", "{", "\n", "_make_keys", "(", "k", ")", ":", "sorted", "(", "\n", "glob", ".", "glob", "(", "path", ".", "join", "(", "k", ",", "'*'", "+", "self", ".", "ext", ")", ")", "\n", ")", "for", "k", "in", "list_hr_seq", "\n", "}", "\n", "return", "dict_hr", "\n", "\n", "", "else", ":", "\n", "            ", "dict_hr", "=", "{", "\n", "_make_keys", "(", "k", ")", ":", "sorted", "(", "\n", "glob", ".", "glob", "(", "path", ".", "join", "(", "k", ",", "'*'", "+", "self", ".", "ext", ")", ")", "\n", ")", "for", "k", "in", "list_hr_seq_val", "\n", "}", "\n", "return", "dict_hr", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.meta_learner.vsrbase.VSRBase.__init__": [[21, 88], ["torch.Dataset.__init__", "vsrbase.VSRBase._set_directory", "vsrbase.VSRBase._scan", "sorted", "list", "vsrbase.VSRBase.dict_hr.items", "vsrbase.VSRBase.dict_hr.items", "list", "sum", "vsrbase.VSRBase.dict_hr.keys", "tqdm.tqdm", "isinstance", "map", "list", "enumerate", "enumerate", "map", "vsrbase.VSRBase.dict_hr.keys", "os.path.join", "enumerate", "range", "vsrbase.VSRBase.len_dict[].append", "vsrbase.VSRBase.len_dict[].append", "vsrbase.VSRBase.len_dict.values", "v.replace", "save_as.replace.replace.replace", "abs", "sum", "os.path.isfile", "os.makedirs", "imageio.imread", "numpy.save", "os.path.dirname", "sum", "len", "len"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__", "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.mm522.MM522._set_directory", "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.mm522.MM522._scan", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.save"], ["    ", "def", "__init__", "(", "\n", "self", ",", "opt", ",", "data_root", "=", "'../dataset'", ",", "train", "=", "True", ",", "benchmark", "=", "False", ")", ":", "\n", "\n", "        ", "super", "(", "VSRBase", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "apath", "=", "''", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "opt_data", "=", "opt", "[", "'datasets'", "]", "\n", "self", ".", "split", "=", "'train'", "if", "train", "else", "'val'", "\n", "self", ".", "ext", "=", "'.png'", "\n", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "benchmark", "=", "benchmark", "\n", "self", ".", "_set_directory", "(", "data_root", ")", "\n", "self", ".", "scale", "=", "opt", "[", "'scale'", "]", "\n", "if", "benchmark", ":", "\n", "            ", "self", ".", "img_type", "=", "'img'", "\n", "", "else", ":", "\n", "            ", "self", ".", "img_type", "=", "opt", "[", "'datasets'", "]", "[", "'train'", "]", "[", "'img_type'", "]", "\n", "", "self", ".", "stride", "=", "opt", "[", "'datasets'", "]", "[", "'train'", "]", "[", "'interval_list'", "]", "\n", "\n", "timesteps", "=", "opt", "[", "'datasets'", "]", "[", "'train'", "]", "[", "'N_frames'", "]", "\n", "\n", "self", ".", "dict_hr", "=", "self", ".", "_scan", "(", ")", "\n", "self", ".", "keys", "=", "sorted", "(", "self", ".", "dict_hr", ".", "keys", "(", ")", ")", "\n", "\n", "# Pre-decode png files", "\n", "if", "self", ".", "img_type", "==", "'bin'", ":", "\n", "            ", "for", "k", "in", "tqdm", ".", "tqdm", "(", "self", ".", "dict_hr", ".", "keys", "(", ")", ",", "ncols", "=", "80", ")", ":", "\n", "                ", "bin_path", "=", "path", ".", "join", "(", "self", ".", "apath", ",", "'bin'", ")", "\n", "for", "idx", ",", "v", "in", "enumerate", "(", "self", ".", "dict_hr", "[", "k", "]", ")", ":", "\n", "                    ", "save_as", "=", "v", ".", "replace", "(", "self", ".", "apath", ",", "bin_path", ")", "\n", "save_as", "=", "save_as", ".", "replace", "(", "self", ".", "ext", ",", "''", ")", "\n", "# If we don't have the binary, make it.", "\n", "if", "not", "path", ".", "isfile", "(", "save_as", "+", "'.npy'", ")", ":", "\n", "                        ", "os", ".", "makedirs", "(", "path", ".", "dirname", "(", "save_as", ")", ",", "exist_ok", "=", "True", ")", "\n", "img", "=", "imageio", ".", "imread", "(", "v", ")", "\n", "# Bypassing the zip archive error", "\n", "# _, w, c = img.shape", "\n", "# dummy = np.zeros((1,w,c))", "\n", "# img_dummy = np.concatenate((img, dummy), axis=0)", "\n", "# torch.save(img_dummy, save_as)", "\n", "np", ".", "save", "(", "save_as", ",", "img", ")", "\n", "# Update the dictionary", "\n", "", "self", ".", "dict_hr", "[", "k", "]", "[", "idx", "]", "=", "save_as", "+", "'.npy'", "\n", "\n", "# Calculate all possible sequence combinations", "\n", "", "", "", "if", "not", "isinstance", "(", "self", ".", "stride", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "self", ".", "stride", "=", "[", "self", ".", "stride", "]", "\n", "", "abs_stride", "=", "list", "(", "map", "(", "lambda", "x", ":", "abs", "(", "x", ")", ",", "self", ".", "stride", ")", ")", "\n", "\n", "self", ".", "is_seq", "=", "True", "\n", "self", ".", "sample_length", "=", "[", "(", "timesteps", "-", "1", ")", "*", "abs_s", "+", "1", "for", "abs_s", "in", "abs_stride", "]", "\n", "self", ".", "offsets", "=", "[", "list", "(", "range", "(", "sample_length", ")", ")", "for", "sample_length", "in", "self", ".", "sample_length", "]", "\n", "self", ".", "len_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "self", ".", "dict_hr", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "len_dict", "[", "k", "]", "=", "[", "]", "\n", "for", "str_idx", ",", "offset", "in", "enumerate", "(", "self", ".", "offsets", ")", ":", "\n", "                ", "self", ".", "len_dict", "[", "k", "]", ".", "append", "(", "[", "(", "len", "(", "v", ")", "-", "o", ")", "//", "self", ".", "sample_length", "[", "str_idx", "]", "for", "o", "in", "offset", "]", ")", "\n", "\n", "# Count the number of samples", "\n", "", "", "self", ".", "len_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "self", ".", "dict_hr", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "len_dict", "[", "k", "]", "=", "[", "]", "\n", "for", "str_idx", ",", "offset", "in", "enumerate", "(", "self", ".", "offsets", ")", ":", "\n", "                ", "self", ".", "len_dict", "[", "k", "]", ".", "append", "(", "[", "(", "len", "(", "v", ")", "-", "o", ")", "//", "self", ".", "sample_length", "[", "str_idx", "]", "for", "o", "in", "offset", "]", ")", "\n", "", "", "self", ".", "weighted_sample", "=", "list", "(", "map", "(", "lambda", "x", ":", "sum", "(", "[", "sum", "(", "y", ")", "for", "y", "in", "x", "]", ")", ",", "self", ".", "len_dict", ".", "values", "(", ")", ")", ")", "\n", "self", ".", "n_samples", "=", "sum", "(", "self", ".", "weighted_sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.meta_learner.vsrbase.VSRBase.sampling_weights": [[89, 91], ["list", "map"], "methods", ["None"], ["", "def", "sampling_weights", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "map", "(", "lambda", "x", ":", "1", "/", "x", ",", "self", ".", "weighted_sample", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.meta_learner.vsrbase.VSRBase._set_directory": [[92, 94], ["None"], "methods", ["None"], ["", "def", "_set_directory", "(", "self", ",", "data_root", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.meta_learner.vsrbase.VSRBase._scan": [[95, 105], ["os.path.join", "os.listdir", "os.path.join", "sorted", "glob.glob", "os.path.join"], "methods", ["None"], ["", "def", "_scan", "(", "self", ")", ":", "\n", "        ", "dir_path", "=", "path", ".", "join", "(", "self", ".", "apath", ",", "self", ".", "split", ")", "if", "not", "self", ".", "benchmark", "else", "self", ".", "apath", "\n", "dir_hr", "=", "path", ".", "join", "(", "dir_path", ",", "'HR'", ")", "\n", "list_hr_seq", "=", "os", ".", "listdir", "(", "dir_hr", ")", "\n", "dict_hr", "=", "{", "\n", "k", ":", "sorted", "(", "\n", "glob", ".", "glob", "(", "path", ".", "join", "(", "dir_hr", ",", "k", ",", "'*'", "+", "self", ".", "ext", ")", ")", "\n", ")", "for", "k", "in", "list_hr_seq", "\n", "}", "\n", "return", "dict_hr", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.meta_learner.vsrbase.VSRBase.find_set": [[107, 134], ["sum", "sum", "enumerate", "enumerate"], "methods", ["None"], ["", "def", "find_set", "(", "self", ",", "idx", ")", ":", "\n", "        ", "for", "k", "in", "self", ".", "keys", ":", "\n", "# length of possible subsequences for each stride per each video", "\n", "            ", "len_list", "=", "[", "sum", "(", "b", ")", "for", "b", "in", "self", ".", "len_dict", "[", "k", "]", "]", "\n", "set_length", "=", "sum", "(", "len_list", ")", "\n", "if", "idx", "<", "set_length", ":", "\n", "                ", "set_key", "=", "k", "\n", "for", "str_idx", ",", "offset_list", "in", "enumerate", "(", "self", ".", "len_dict", "[", "k", "]", ")", ":", "\n", "                    ", "if", "idx", "<", "len_list", "[", "str_idx", "]", ":", "\n", "                        ", "sample_length", "=", "self", ".", "sample_length", "[", "str_idx", "]", "\n", "for", "len_idx", ",", "length", "in", "enumerate", "(", "offset_list", ")", ":", "\n", "                            ", "if", "idx", "<", "length", ":", "\n", "                                ", "if", "self", ".", "stride", "[", "str_idx", "]", ">", "0", ":", "\n", "                                    ", "seq_idx", "=", "len_idx", "+", "idx", "*", "sample_length", "\n", "", "else", ":", "\n", "                                    ", "seq_idx", "=", "len_idx", "+", "idx", "*", "sample_length", "+", "sample_length", "-", "1", "\n", "", "break", "\n", "", "else", ":", "\n", "                                ", "idx", "-=", "length", "\n", "", "", "break", "\n", "", "else", ":", "\n", "                        ", "idx", "-=", "len_list", "[", "str_idx", "]", "\n", "", "", "break", "\n", "", "else", ":", "\n", "                ", "idx", "-=", "set_length", "\n", "\n", "", "", "return", "set_key", ",", "str_idx", ",", "seq_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.meta_learner.vsrbase.VSRBase.__getitem__": [[135, 197], ["vsrbase.VSRBase.find_set", "numpy.stack", "torch.meta_learner.preprocessing.np_common_crop", "torch.meta_learner.preprocessing.np2tensor", "torch.meta_learner.preprocessing.set_kernel_params", "torch.random_kernel_generator.Degradation", "data.random_kernel_generator.Degradation.apply", "seq_lr.mul().clamp().round().div.mul().clamp().round().div.mul().clamp().round().div", "data.random_kernel_generator.Degradation.apply", "os.path.join", "fn_read", "torch.meta_learner.preprocessing.augment", "ValueError", "os.path.basename", "seq_lr.mul().clamp().round().div.mul().clamp().round().div.mul().clamp().round", "seq_lr.mul().clamp().round().div.mul().clamp().round().div.mul().clamp", "seq_lr.mul().clamp().round().div.mul().clamp().round().div.mul"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.vsrbase.VSRBase.find_set", "home.repos.pwc.inspect_result.esw0116_DynaVSR.meta_learner.preprocessing.np_common_crop", "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.np2tensor", "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.set_kernel_params", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.old_kernel_generator.Degradation.apply", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.old_kernel_generator.Degradation.apply", "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.augment"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "# Randomly choose a sequence in a video", "\n", "# key = self.keys[idx]", "\n", "# str_idx, seq_idx = self.find_set(key)", "\n", "\n", "        ", "key", ",", "str_idx", ",", "seq_idx", "=", "self", ".", "find_set", "(", "idx", ")", "\n", "set_hr", "=", "self", ".", "dict_hr", "[", "key", "]", "\n", "\n", "if", "self", ".", "stride", "[", "str_idx", "]", ">", "0", ":", "\n", "            ", "seq_end", "=", "seq_idx", "+", "self", ".", "sample_length", "[", "str_idx", "]", "\n", "", "else", ":", "\n", "            ", "seq_end", "=", "seq_idx", "-", "self", ".", "sample_length", "[", "str_idx", "]", "\n", "\n", "", "if", "seq_end", ">=", "0", ":", "\n", "            ", "name_hr", "=", "set_hr", "[", "seq_idx", ":", "seq_end", ":", "self", ".", "stride", "[", "str_idx", "]", "]", "\n", "", "else", ":", "\n", "            ", "name_hr", "=", "set_hr", "[", "seq_idx", ":", ":", "self", ".", "stride", "[", "str_idx", "]", "]", "\n", "\n", "", "if", "self", ".", "img_type", "==", "'img'", ":", "\n", "            ", "fn_read", "=", "imageio", ".", "imread", "\n", "", "elif", "self", ".", "img_type", "==", "'bin'", ":", "\n", "            ", "fn_read", "=", "np", ".", "load", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Wrong img type: {}'", ".", "format", "(", "self", ".", "img_type", ")", ")", "\n", "\n", "", "name", "=", "[", "path", ".", "join", "(", "key", ",", "path", ".", "basename", "(", "f", ")", ")", "for", "f", "in", "name_hr", "]", "\n", "seq_hr", "=", "[", "fn_read", "(", "f", ")", "for", "f", "in", "name_hr", "]", "\n", "seq_hr", "=", "np", ".", "stack", "(", "seq_hr", ",", "axis", "=", "-", "1", ")", "\n", "# if self.train:", "\n", "# sinc patch_size is decided in seq_LR scale, we have to make it twice larger", "\n", "seq_hr", "=", "preprocessing", ".", "np_common_crop", "(", "seq_hr", ",", "patch_size", "=", "self", ".", "opt", "[", "'datasets'", "]", "[", "'train'", "]", "[", "'patch_size'", "]", "*", "2", ")", "\n", "seq_hr", "=", "preprocessing", ".", "np2tensor", "(", "seq_hr", ")", "\n", "\n", "# include random noise for each frame", "\n", "'''\n        kernel_set = []\n        for i in range(5):\n            kwargs = preprocessing.set_kernel_params()\n            kernel_set.append(rkg.Degradation(self.opt['datasets']['train']['kernel_size'], self.scale, **kwargs).kernel)\n        kernel_set = np.stack(kernel_set, axis=0)\n        \n        kernel_temp = rkg.Degradation(self.opt['datasets']['train']['kernel_size'], self.scale)\n        kernel_temp.set_kernel_directly(kernel_set)\n\n        seq_lr = kernel_temp.apply(seq_hr)\n        seq_lr = seq_lr.mul(255).clamp(0, 255).round().div(255)\n        kernel_temp.set_kernel_directly(kernel_set[2])\n        seq_superlr = kernel_temp.apply(seq_lr)\n        '''", "\n", "kwargs", "=", "preprocessing", ".", "set_kernel_params", "(", ")", "\n", "kernel_gen", "=", "rkg", ".", "Degradation", "(", "self", ".", "opt_data", "[", "'train'", "]", "[", "'kernel_size'", "]", ",", "self", ".", "scale", ",", "**", "kwargs", ")", "\n", "\n", "seq_lr", "=", "kernel_gen", ".", "apply", "(", "seq_hr", ")", "\n", "seq_lr", "=", "seq_lr", ".", "mul", "(", "255", ")", ".", "clamp", "(", "0", ",", "255", ")", ".", "round", "(", ")", ".", "div", "(", "255", ")", "\n", "seq_superlr", "=", "kernel_gen", ".", "apply", "(", "seq_lr", ")", "\n", "if", "self", ".", "train", ":", "\n", "# seq_hr, seq_lr, seq_superlr = preprocessing.crop(seq_hr, seq_lr, seq_superlr, patch_size=self.opt['datasets']['train']['patch_size'])", "\n", "            ", "seq_hr", ",", "seq_lr", ",", "seq_superlr", "=", "preprocessing", ".", "augment", "(", "seq_hr", ",", "seq_lr", ",", "seq_superlr", ")", "\n", "\n", "", "return", "{", "'SuperLQs'", ":", "seq_superlr", ",", "\n", "'LQs'", ":", "seq_lr", ",", "\n", "'GT'", ":", "seq_hr", ",", "\n", "#'Kernel': kernel_gen.kernel,", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.meta_learner.vsrbase.VSRBase.__len__": [[200, 202], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_samples", "\n", "", "", ""]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.meta_learner.video_test_dataset_int.VideoTestDataset.__init__": [[21, 211], ["torch.Dataset.__init__", "print", "ValueError", "isinstance", "video_test_dataset_int.VideoTestDataset.name.lower", "print", "zip", "ValueError", "torch.random_kernel_generator.Degradation", "opt[].split", "enumerate", "video_test_dataset_int.VideoTestDataset.name.lower", "torch.util.glob_file_list", "isinstance", "os.basename", "torch.util.glob_file_list", "isinstance", "len", "video_test_dataset_int.VideoTestDataset.data_info[].extend", "video_test_dataset_int.VideoTestDataset.data_info[].extend", "video_test_dataset_int.VideoTestDataset.data_info[].extend", "video_test_dataset_int.VideoTestDataset.data_info[].extend", "range", "range", "video_test_dataset_int.VideoTestDataset.data_info[].extend", "torch.util.read_img_seq", "video_test_dataset_int.VideoTestDataset.name.lower", "numpy.load", "opt[].split", "opt[].split", "opt[].split", "str", "float", "float", "float", "len", "len", "len", "len", "zip", "LQ_root_list.append", "str", "len", "range", "torch.util.glob_file_list", "torch.util.glob_file_list", "video_test_dataset_int.VideoTestDataset.name.lower", "torch.util.glob_file_list", "isinstance", "torch.util.glob_file_list", "torch.util.glob_file_list", "torch.util.glob_file_list", "range", "torch.util.glob_file_list", "torch.util.glob_file_list", "video_test_dataset_int.VideoTestDataset.data_info[].append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.util.read_img_seq", "torch.util.read_img_seq", "video_test_dataset_int.VideoTestDataset.name.lower", "numpy.load", "NotImplementedError", "torch.util.glob_file_list", "torch.util.glob_file_list", "len", "data.util.glob_file_list.append", "data.util.glob_file_list.append", "os.join", "os.join", "len", "range", "range", "torch.util.glob_file_list", "torch.util.glob_file_list", "os.join", "os.join", "torch.util.glob_file_list", "torch.util.glob_file_list", "len", "data.util.glob_file_list.append", "data.util.glob_file_list.append", "opt[].split", "opt[].split", "opt[].split", "str", "str", "os.join", "os.join", "torch.util.glob_file_list", "torch.util.glob_file_list", "subfolders_LQ_list.append", "subfolders_SLQ_list.append", "len", "data.util.glob_file_list.append", "data.util.glob_file_list.append", "os.join", "os.join", "torch.util.read_img_seq", "torch.util.read_img_seq", "os.join", "os.join", "torch.util.glob_file_list", "torch.util.glob_file_list", "str", "str", "range", "range", "k.find", "k.find", "k.find", "k.find", "k.find", "k.find", "k.find", "k.find", "k.find", "k.find", "k.find", "k.find", "k.find", "k.find", "k.find", "k.find", "len", "len", "range", "range", "k.find", "k.find", "k.find", "k.find", "k.find", "k.find", "k.find", "k.find", "str", "k.find", "k.find", "k.find", "k.find", "k.find", "k.find", "k.find", "k.find", "len", "len"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.glob_file_list", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.glob_file_list", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.read_img_seq", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.load", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.glob_file_list", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.glob_file_list", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.glob_file_list", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.glob_file_list", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.glob_file_list", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.glob_file_list", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.glob_file_list", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.glob_file_list", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.read_img_seq", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.read_img_seq", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.load", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.glob_file_list", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.glob_file_list", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.glob_file_list", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.glob_file_list", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.glob_file_list", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.glob_file_list", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.glob_file_list", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.glob_file_list", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.read_img_seq", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.read_img_seq", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.glob_file_list", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.glob_file_list"], ["def", "__init__", "(", "self", ",", "opt", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "VideoTestDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale", "=", "kwargs", "[", "'scale'", "]", "\n", "self", ".", "kernel_size", "=", "kwargs", "[", "'kernel_size'", "]", "\n", "self", ".", "model_name", "=", "kwargs", "[", "'model_name'", "]", "\n", "idx", "=", "kwargs", "[", "'idx'", "]", "if", "'idx'", "in", "kwargs", "else", "None", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "cache_data", "=", "opt", "[", "'cache_data'", "]", "\n", "self", ".", "half_N_frames", "=", "opt", "[", "'N_frames'", "]", "//", "2", "\n", "if", "idx", "is", "None", ":", "\n", "            ", "self", ".", "name", "=", "opt", "[", "'name'", "]", "\n", "self", ".", "GT_root", ",", "self", ".", "LQ_root", "=", "opt", "[", "'dataroot_GT'", "]", ",", "opt", "[", "'dataroot_LQ'", "]", "\n", "degradation_type", "=", "opt", "[", "'degradation_type'", "]", "\n", "opt_sigma_x", "=", "opt", "[", "'sigma_x'", "]", "\n", "opt_sigma_y", "=", "opt", "[", "'sigma_y'", "]", "\n", "opt_theta", "=", "opt", "[", "'theta'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "name", "=", "opt", "[", "'name'", "]", ".", "split", "(", "'+'", ")", "[", "idx", "]", "\n", "self", ".", "GT_root", ",", "self", ".", "LQ_root", "=", "opt", "[", "'dataroot_GT'", "]", ".", "split", "(", "'+'", ")", "[", "idx", "]", ",", "opt", "[", "'dataroot_LQ'", "]", ".", "split", "(", "'+'", ")", "[", "idx", "]", "\n", "if", "'+'", "in", "opt", "[", "'degradation_type'", "]", ":", "\n", "                ", "degradation_type", "=", "opt", "[", "'degradation_type'", "]", ".", "split", "(", "'+'", ")", "[", "idx", "]", "\n", "if", "'+'", "in", "str", "(", "opt", "[", "'sigma_x'", "]", ")", ":", "\n", "                    ", "opt_sigma_x", "=", "float", "(", "opt", "[", "'sigma_x'", "]", ".", "split", "(", "'+'", ")", "[", "idx", "]", ")", "\n", "opt_sigma_y", "=", "float", "(", "opt", "[", "'sigma_y'", "]", ".", "split", "(", "'+'", ")", "[", "idx", "]", ")", "\n", "opt_theta", "=", "float", "(", "opt", "[", "'theta'", "]", ".", "split", "(", "'+'", ")", "[", "idx", "]", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "opt_sigma_x", "=", "opt", "[", "'sigma_x'", "]", "\n", "opt_sigma_y", "=", "opt", "[", "'sigma_y'", "]", "\n", "opt_theta", "=", "opt", "[", "'theta'", "]", "\n", "\n", "", "", "else", ":", "\n", "                ", "degradation_type", "=", "opt", "[", "'degradation_type'", "]", "\n", "opt_sigma_x", "=", "opt", "[", "'sigma_x'", "]", "\n", "opt_sigma_y", "=", "opt", "[", "'sigma_y'", "]", "\n", "opt_theta", "=", "opt", "[", "'theta'", "]", "\n", "\n", "", "", "self", ".", "data_type", "=", "self", ".", "opt", "[", "'data_type'", "]", "\n", "self", ".", "data_info", "=", "{", "'path_SLQ'", ":", "[", "]", ",", "'path_LQ'", ":", "[", "]", ",", "'path_GT'", ":", "[", "]", ",", "'folder'", ":", "[", "]", ",", "'idx'", ":", "[", "]", ",", "'border'", ":", "[", "]", "}", "\n", "if", "self", ".", "data_type", "==", "'lmdb'", ":", "\n", "            ", "raise", "ValueError", "(", "'No need to use LMDB during validation/test.'", ")", "\n", "#### Generate data info and cache data", "\n", "", "self", ".", "imgs_SLQ", ",", "self", ".", "imgs_LQ", ",", "self", ".", "imgs_GT", "=", "{", "}", ",", "{", "}", ",", "{", "}", "\n", "\n", "if", "opt", "[", "'degradation_mode'", "]", "==", "'preset'", ":", "\n", "            ", "self", ".", "LQ_root", "=", "self", ".", "LQ_root", "+", "'_preset'", "\n", "", "else", ":", "\n", "            ", "if", "isinstance", "(", "opt_sigma_x", ",", "list", ")", ":", "\n", "                ", "assert", "len", "(", "opt_sigma_x", ")", "==", "len", "(", "opt_sigma_y", ")", "\n", "assert", "len", "(", "opt_sigma_x", ")", "==", "len", "(", "opt_theta", ")", "\n", "\n", "LQ_root_list", "=", "[", "]", "\n", "for", "i", ",", "(", "sigma_x", ",", "sigma_y", ",", "theta", ")", "in", "enumerate", "(", "zip", "(", "opt_sigma_x", ",", "opt_sigma_y", ",", "opt_theta", ")", ")", ":", "\n", "                    ", "LQ_root_list", ".", "append", "(", "self", ".", "LQ_root", "+", "'_'", "+", "degradation_type", "+", "'_'", "+", "str", "(", "'{:.1f}'", ".", "format", "(", "opt_sigma_x", "[", "i", "]", ")", ")", "+", "'_'", "+", "str", "(", "'{:.1f}'", ".", "format", "(", "opt_sigma_y", "[", "i", "]", ")", ")", "+", "'_'", "+", "str", "(", "'{:.1f}'", ".", "format", "(", "opt_theta", "[", "i", "]", ")", ")", ")", "\n", "", "self", ".", "LQ_root", "=", "LQ_root_list", "\n", "\n", "", "else", ":", "\n", "                ", "self", ".", "LQ_root", "=", "self", ".", "LQ_root", "+", "'_'", "+", "degradation_type", "+", "'_'", "+", "str", "(", "'{:.1f}'", ".", "format", "(", "opt_sigma_x", ")", ")", "+", "'_'", "+", "str", "(", "'{:.1f}'", ".", "format", "(", "opt_sigma_y", ")", ")", "+", "'_'", "+", "str", "(", "'{:.1f}'", ".", "format", "(", "opt_theta", ")", ")", "\n", "\n", "", "", "slr_name", "=", "''", "if", "opt", "[", "'slr_mode'", "]", "is", "None", "else", "'_{}'", ".", "format", "(", "opt", "[", "'slr_mode'", "]", ")", "\n", "\n", "print", "(", "self", ".", "LQ_root", ")", "\n", "\n", "if", "self", ".", "name", ".", "lower", "(", ")", "in", "[", "'vid4'", ",", "'reds'", ",", "'mm522'", "]", ":", "\n", "            ", "if", "self", ".", "name", ".", "lower", "(", ")", "==", "'vid4'", ":", "\n", "                ", "img_type", "=", "'img'", "\n", "subfolders_GT", "=", "util", ".", "glob_file_list", "(", "self", ".", "GT_root", ")", "\n", "if", "isinstance", "(", "self", ".", "LQ_root", ",", "list", ")", ":", "\n", "                    ", "num_settings", "=", "len", "(", "self", ".", "LQ_root", ")", "\n", "subfolders_LQ_list", "=", "[", "util", ".", "glob_file_list", "(", "osp", ".", "join", "(", "LQ_root", ",", "'X{}'", ".", "format", "(", "self", ".", "scale", ")", ")", ")", "for", "LQ_root", "in", "self", ".", "LQ_root", "]", "\n", "subfolders_SLQ_list", "=", "[", "util", ".", "glob_file_list", "(", "osp", ".", "join", "(", "LQ_root", ",", "'X{}{}'", ".", "format", "(", "self", ".", "scale", "*", "self", ".", "scale", ",", "slr_name", ")", ")", ")", "for", "LQ_root", "in", "self", ".", "LQ_root", "]", "\n", "\n", "subfolders_LQ", "=", "[", "]", "\n", "subfolders_SLQ", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "subfolders_LQ_list", "[", "0", "]", ")", ")", ":", "\n", "                        ", "subfolders_LQ", ".", "append", "(", "[", "subfolders_LQ_list", "[", "j", "]", "[", "i", "]", "for", "j", "in", "range", "(", "len", "(", "subfolders_LQ_list", ")", ")", "]", ")", "\n", "subfolders_SLQ", ".", "append", "(", "[", "subfolders_SLQ_list", "[", "j", "]", "[", "i", "]", "for", "j", "in", "range", "(", "len", "(", "subfolders_SLQ_list", ")", ")", "]", ")", "\n", "\n", "", "", "else", ":", "\n", "                    ", "subfolders_LQ", "=", "util", ".", "glob_file_list", "(", "osp", ".", "join", "(", "self", ".", "LQ_root", ",", "'X{}'", ".", "format", "(", "self", ".", "scale", ")", ")", ")", "\n", "subfolders_SLQ", "=", "util", ".", "glob_file_list", "(", "osp", ".", "join", "(", "self", ".", "LQ_root", ",", "'X{}{}'", ".", "format", "(", "self", ".", "scale", "*", "self", ".", "scale", ",", "slr_name", ")", ")", ")", "\n", "\n", "", "", "elif", "self", ".", "name", ".", "lower", "(", ")", "==", "'reds'", ":", "\n", "                ", "img_type", "=", "'img'", "\n", "list_hr_seq", "=", "util", ".", "glob_file_list", "(", "self", ".", "GT_root", ")", "\n", "subfolders_GT", "=", "[", "k", "for", "k", "in", "list_hr_seq", "if", "k", ".", "find", "(", "'000'", ")", ">=", "0", "or", "k", ".", "find", "(", "'011'", ")", ">=", "0", "or", "k", ".", "find", "(", "'015'", ")", ">=", "0", "or", "k", ".", "find", "(", "'020'", ")", ">=", "0", "]", "\n", "if", "isinstance", "(", "self", ".", "LQ_root", ",", "list", ")", ":", "\n", "                    ", "num_settings", "=", "len", "(", "self", ".", "LQ_root", ")", "\n", "subfolders_LQ_list", "=", "[", "]", "\n", "subfolders_SLQ_list", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_settings", ")", ":", "\n", "                        ", "list_lr_seq", "=", "util", ".", "glob_file_list", "(", "osp", ".", "join", "(", "self", ".", "LQ_root", "[", "i", "]", ",", "'X{}'", ".", "format", "(", "self", ".", "scale", ")", ")", ")", "\n", "list_slr_seq", "=", "util", ".", "glob_file_list", "(", "osp", ".", "join", "(", "self", ".", "LQ_root", "[", "i", "]", ",", "'X{}{}'", ".", "format", "(", "self", ".", "scale", "*", "self", ".", "scale", ",", "slr_name", ")", ")", ")", "\n", "subfolder_LQ", "=", "[", "k", "for", "k", "in", "list_lr_seq", "if", "k", ".", "find", "(", "'000'", ")", ">=", "0", "or", "k", ".", "find", "(", "'011'", ")", ">=", "0", "or", "k", ".", "find", "(", "'015'", ")", ">=", "0", "or", "k", ".", "find", "(", "'020'", ")", ">=", "0", "]", "\n", "subfolder_SLQ", "=", "[", "k", "for", "k", "in", "list_slr_seq", "if", "k", ".", "find", "(", "'000'", ")", ">=", "0", "or", "k", ".", "find", "(", "'011'", ")", ">=", "0", "or", "k", ".", "find", "(", "'015'", ")", ">=", "0", "or", "k", ".", "find", "(", "'020'", ")", ">=", "0", "]", "\n", "subfolders_LQ_list", ".", "append", "(", "subfolder_LQ", ")", "\n", "subfolders_SLQ_list", ".", "append", "(", "subfolder_SLQ", ")", "\n", "", "subfolders_LQ", "=", "[", "]", "\n", "subfolders_SLQ", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "subfolders_LQ_list", "[", "0", "]", ")", ")", ":", "\n", "                        ", "subfolders_LQ", ".", "append", "(", "[", "subfolders_LQ_list", "[", "j", "]", "[", "i", "]", "for", "j", "in", "range", "(", "len", "(", "subfolders_LQ_list", ")", ")", "]", ")", "\n", "subfolders_SLQ", ".", "append", "(", "[", "subfolders_SLQ_list", "[", "j", "]", "[", "i", "]", "for", "j", "in", "range", "(", "len", "(", "subfolders_SLQ_list", ")", ")", "]", ")", "\n", "\n", "", "", "else", ":", "\n", "                    ", "list_lr_seq", "=", "util", ".", "glob_file_list", "(", "osp", ".", "join", "(", "self", ".", "LQ_root", ",", "'X{}'", ".", "format", "(", "self", ".", "scale", ")", ")", ")", "\n", "list_slr_seq", "=", "util", ".", "glob_file_list", "(", "osp", ".", "join", "(", "self", ".", "LQ_root", ",", "'X{}{}'", ".", "format", "(", "self", ".", "scale", "*", "self", ".", "scale", ",", "slr_name", ")", ")", ")", "\n", "#subfolders_GT = [k for k in list_hr_seq if", "\n", "#                   k.find('000') >= 0 or k.find('011') >= 0 or k.find('015') >= 0 or k.find('020') >= 0]", "\n", "subfolders_LQ", "=", "[", "k", "for", "k", "in", "list_lr_seq", "if", "\n", "k", ".", "find", "(", "'000'", ")", ">=", "0", "or", "k", ".", "find", "(", "'011'", ")", ">=", "0", "or", "k", ".", "find", "(", "'015'", ")", ">=", "0", "or", "k", ".", "find", "(", "'020'", ")", ">=", "0", "]", "\n", "subfolders_SLQ", "=", "[", "k", "for", "k", "in", "list_slr_seq", "if", "\n", "k", ".", "find", "(", "'000'", ")", ">=", "0", "or", "k", ".", "find", "(", "'011'", ")", ">=", "0", "or", "k", ".", "find", "(", "'015'", ")", ">=", "0", "or", "k", ".", "find", "(", "'020'", ")", ">=", "0", "]", "\n", "\n", "", "", "else", ":", "\n", "                ", "img_type", "=", "'img'", "\n", "list_hr_seq", "=", "util", ".", "glob_file_list", "(", "self", ".", "GT_root", ")", "\n", "list_lr_seq", "=", "util", ".", "glob_file_list", "(", "osp", ".", "join", "(", "self", ".", "LQ_root", ",", "'X{}'", ".", "format", "(", "self", ".", "scale", ")", ")", ")", "\n", "list_slr_seq", "=", "util", ".", "glob_file_list", "(", "osp", ".", "join", "(", "self", ".", "LQ_root", ",", "'X{}'", ".", "format", "(", "self", ".", "scale", "*", "self", ".", "scale", ")", ")", ")", "\n", "subfolders_GT", "=", "[", "k", "for", "k", "in", "list_hr_seq", "if", "\n", "k", ".", "find", "(", "'001'", ")", ">=", "0", "or", "k", ".", "find", "(", "'005'", ")", ">=", "0", "or", "k", ".", "find", "(", "'008'", ")", ">=", "0", "or", "k", ".", "find", "(", "'009'", ")", ">=", "0", "]", "\n", "subfolders_LQ", "=", "[", "k", "for", "k", "in", "list_lr_seq", "if", "\n", "k", ".", "find", "(", "'001'", ")", ">=", "0", "or", "k", ".", "find", "(", "'005'", ")", ">=", "0", "or", "k", ".", "find", "(", "'008'", ")", ">=", "0", "or", "k", ".", "find", "(", "'009'", ")", ">=", "0", "]", "\n", "subfolders_SLQ", "=", "[", "k", "for", "k", "in", "list_slr_seq", "if", "\n", "k", ".", "find", "(", "'001'", ")", ">=", "0", "or", "k", ".", "find", "(", "'005'", ")", ">=", "0", "or", "k", ".", "find", "(", "'008'", ")", ">=", "0", "or", "k", ".", "find", "(", "'009'", ")", ">=", "0", "]", "\n", "\n", "", "print", "(", "subfolders_GT", "[", "0", "]", ",", "'\\n'", ",", "subfolders_LQ", "[", "0", "]", ",", "'\\n'", ",", "subfolders_SLQ", "[", "0", "]", ")", "\n", "\n", "for", "subfolder_SLQ", ",", "subfolder_LQ", ",", "subfolder_GT", "in", "zip", "(", "subfolders_SLQ", ",", "subfolders_LQ", ",", "subfolders_GT", ")", ":", "\n", "                ", "subfolder_name", "=", "osp", ".", "basename", "(", "subfolder_GT", ")", "\n", "img_paths_GT", "=", "util", ".", "glob_file_list", "(", "subfolder_GT", ")", "\n", "if", "isinstance", "(", "subfolder_LQ", ",", "list", ")", ":", "\n", "                    ", "img_paths_LQ_list", "=", "[", "util", ".", "glob_file_list", "(", "subf_LQ", ")", "for", "subf_LQ", "in", "subfolder_LQ", "]", "\n", "img_paths_SLQ_list", "=", "[", "util", ".", "glob_file_list", "(", "subf_SLQ", ")", "for", "subf_SLQ", "in", "subfolder_SLQ", "]", "\n", "img_paths_LQ", "=", "[", "]", "\n", "img_paths_SLQ", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "img_paths_GT", ")", ")", ":", "\n", "                        ", "img_paths_LQ", ".", "append", "(", "img_paths_LQ_list", "[", "i", "%", "num_settings", "]", "[", "i", "]", ")", "\n", "img_paths_SLQ", ".", "append", "(", "img_paths_SLQ_list", "[", "i", "%", "num_settings", "]", "[", "i", "]", ")", "\n", "", "", "else", ":", "\n", "                    ", "img_paths_LQ", "=", "util", ".", "glob_file_list", "(", "subfolder_LQ", ")", "\n", "img_paths_SLQ", "=", "util", ".", "glob_file_list", "(", "subfolder_SLQ", ")", "\n", "\n", "", "max_idx", "=", "len", "(", "img_paths_GT", ")", "\n", "self", ".", "data_info", "[", "'path_SLQ'", "]", ".", "extend", "(", "img_paths_SLQ", ")", "\n", "self", ".", "data_info", "[", "'path_LQ'", "]", ".", "extend", "(", "img_paths_LQ", ")", "\n", "self", ".", "data_info", "[", "'path_GT'", "]", ".", "extend", "(", "img_paths_GT", ")", "\n", "self", ".", "data_info", "[", "'folder'", "]", ".", "extend", "(", "[", "subfolder_name", "]", "*", "max_idx", ")", "\n", "for", "i", "in", "range", "(", "max_idx", ")", ":", "\n", "                    ", "self", ".", "data_info", "[", "'idx'", "]", ".", "append", "(", "'{}/{}'", ".", "format", "(", "i", ",", "max_idx", ")", ")", "\n", "", "border_l", "=", "[", "0", "]", "*", "max_idx", "\n", "for", "i", "in", "range", "(", "self", ".", "half_N_frames", ")", ":", "\n", "                    ", "border_l", "[", "i", "]", "=", "1", "\n", "border_l", "[", "max_idx", "-", "i", "-", "1", "]", "=", "1", "\n", "", "self", ".", "data_info", "[", "'border'", "]", ".", "extend", "(", "border_l", ")", "\n", "self", ".", "imgs_GT", "[", "subfolder_name", "]", "=", "util", ".", "read_img_seq", "(", "img_paths_GT", ",", "img_type", ")", "\n", "if", "opt", "[", "'degradation_mode'", "]", "==", "'preset'", ":", "\n", "                    ", "self", ".", "imgs_LQ", "[", "subfolder_name", "]", "=", "torch", ".", "stack", "(", "[", "util", ".", "read_img_seq", "(", "util", ".", "glob_file_list", "(", "paths_LQ", ")", ",", "img_type", ")", "for", "paths_LQ", "in", "img_paths_LQ", "]", ",", "dim", "=", "0", ")", "\n", "self", ".", "imgs_SLQ", "[", "subfolder_name", "]", "=", "torch", ".", "stack", "(", "[", "util", ".", "read_img_seq", "(", "util", ".", "glob_file_list", "(", "paths_SLQ", ")", ",", "img_type", ")", "for", "paths_SLQ", "in", "img_paths_SLQ", "]", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "imgs_LQ", "[", "subfolder_name", "]", "=", "util", ".", "read_img_seq", "(", "img_paths_LQ", ",", "img_type", ")", "\n", "self", ".", "imgs_SLQ", "[", "subfolder_name", "]", "=", "util", ".", "read_img_seq", "(", "img_paths_SLQ", ",", "img_type", ")", "\n", "", "h", ",", "w", "=", "self", ".", "imgs_SLQ", "[", "subfolder_name", "]", ".", "shape", "[", "-", "2", ":", "]", "\n", "if", "h", "%", "4", "!=", "0", "or", "w", "%", "4", "!=", "0", ":", "\n", "                    ", "self", ".", "imgs_SLQ", "[", "subfolder_name", "]", "=", "self", ".", "imgs_SLQ", "[", "subfolder_name", "]", "[", "...", ",", ":", "h", "-", "(", "h", "%", "4", ")", ",", ":", "w", "-", "(", "w", "%", "4", ")", "]", "\n", "self", ".", "imgs_LQ", "[", "subfolder_name", "]", "=", "self", ".", "imgs_LQ", "[", "subfolder_name", "]", "[", "...", ",", ":", "self", ".", "scale", "*", "(", "h", "-", "(", "h", "%", "4", ")", ")", ",", ":", "self", ".", "scale", "*", "(", "w", "-", "(", "w", "%", "4", ")", ")", "]", "\n", "self", ".", "imgs_GT", "[", "subfolder_name", "]", "=", "self", ".", "imgs_GT", "[", "subfolder_name", "]", "[", "...", ",", ":", "self", ".", "scale", "*", "self", ".", "scale", "*", "(", "h", "-", "(", "h", "%", "4", ")", ")", ",", ":", "self", ".", "scale", "*", "self", ".", "scale", "*", "(", "w", "-", "(", "w", "%", "4", ")", ")", "]", "\n", "\n", "", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Not support video test dataset. Support Vid4, REDS4 and Vimeo90k-Test.'", ")", "\n", "", "'''\n        if opt['degradation_mode'] == 'set':\n            sigma_x = float(opt['sigma_x'])\n            sigma_y = float(opt['sigma_y'])\n            theta = float(opt['theta'])\n            gen_kwargs = preprocessing.set_kernel_params(sigma_x=sigma_x, sigma_y=sigma_y, theta=theta)\n            self.kernel_gen = rkg.Degradation(self.kernel_size, self.scale, **gen_kwargs)\n            self.gen_kwargs_l = [gen_kwargs['sigma'][0], gen_kwargs['sigma'][1], gen_kwargs['theta']]\n        '''", "\n", "if", "opt", "[", "'degradation_mode'", "]", "==", "'preset'", ":", "\n", "            ", "self", ".", "kernel_gen", "=", "rkg", ".", "Degradation", "(", "self", ".", "kernel_size", ",", "self", ".", "scale", ")", "\n", "if", "self", ".", "name", ".", "lower", "(", ")", "==", "'vid4'", ":", "\n", "                ", "self", ".", "kernel_dict", "=", "np", ".", "load", "(", "'../pretrained_models/Mixed/Vid4.npy'", ")", "\n", "", "elif", "self", ".", "name", ".", "lower", "(", ")", "==", "'reds'", ":", "\n", "                ", "self", ".", "kernel_dict", "=", "np", ".", "load", "(", "'../pretrained_models/Mixed/REDS.npy'", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.meta_learner.video_test_dataset_int.VideoTestDataset.__getitem__": [[212, 239], ["[].split", "torch.util.index_generation", "video_test_dataset_int.VideoTestDataset.imgs_GT[].index_select", "int", "int", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "video_test_dataset_int.VideoTestDataset.imgs_LQ[].index_select", "video_test_dataset_int.VideoTestDataset.imgs_SLQ[].index_select", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.index_generation"], ["", "", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "folder", "=", "self", ".", "data_info", "[", "'folder'", "]", "[", "index", "]", "\n", "idx", ",", "max_idx", "=", "self", ".", "data_info", "[", "'idx'", "]", "[", "index", "]", ".", "split", "(", "'/'", ")", "\n", "idx", ",", "max_idx", "=", "int", "(", "idx", ")", ",", "int", "(", "max_idx", ")", "\n", "border", "=", "self", ".", "data_info", "[", "'border'", "]", "[", "index", "]", "\n", "# print(self.data_info['path_LQ'][index], '\\n', self.data_info['path_SLQ'][index])", "\n", "\n", "select_idx", "=", "util", ".", "index_generation", "(", "idx", ",", "max_idx", ",", "self", ".", "opt", "[", "'N_frames'", "]", ",", "padding", "=", "self", ".", "opt", "[", "'padding'", "]", ")", "\n", "imgs_GT", "=", "self", ".", "imgs_GT", "[", "folder", "]", ".", "index_select", "(", "0", ",", "torch", ".", "LongTensor", "(", "select_idx", ")", ")", "\n", "if", "self", ".", "opt", "[", "'degradation_mode'", "]", "==", "'preset'", ":", "\n", "            ", "if", "self", ".", "opt", "[", "'N_frames'", "]", "==", "5", ":", "\n", "                ", "imgs_LR", "=", "self", ".", "imgs_LQ", "[", "folder", "]", "[", "idx", ",", "1", ":", "-", "1", "]", "\n", "imgs_SuperLR", "=", "self", ".", "imgs_SLQ", "[", "folder", "]", "[", "idx", ",", "1", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "                ", "imgs_LR", "=", "self", ".", "imgs_LQ", "[", "folder", "]", "[", "idx", "]", "\n", "imgs_SuperLR", "=", "self", ".", "imgs_SLQ", "[", "folder", "]", "[", "idx", "]", "\n", "", "", "else", ":", "\n", "            ", "imgs_LR", "=", "self", ".", "imgs_LQ", "[", "folder", "]", ".", "index_select", "(", "0", ",", "torch", ".", "LongTensor", "(", "select_idx", ")", ")", "\n", "imgs_SuperLR", "=", "self", ".", "imgs_SLQ", "[", "folder", "]", ".", "index_select", "(", "0", ",", "torch", ".", "LongTensor", "(", "select_idx", ")", ")", "\n", "\n", "", "return", "{", "\n", "'SuperLQs'", ":", "imgs_SuperLR", ",", "\n", "'LQs'", ":", "imgs_LR", ",", "\n", "'GT'", ":", "imgs_GT", ",", "\n", "'folder'", ":", "folder", ",", "\n", "'idx'", ":", "self", ".", "data_info", "[", "'idx'", "]", "[", "index", "]", ",", "\n", "'border'", ":", "border", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.meta_learner.video_test_dataset_int.VideoTestDataset.__len__": [[241, 243], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data_info", "[", "'path_GT'", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.meta_learner.video_test_dataset.VideoTestDataset.__init__": [[21, 97], ["torch.Dataset.__init__", "ValueError", "video_test_dataset.VideoTestDataset.name.lower", "float", "float", "float", "torch.meta_learner.preprocessing.set_kernel_params", "torch.random_kernel_generator.Degradation", "opt[].split", "video_test_dataset.VideoTestDataset.name.lower", "torch.util.glob_file_list", "os.basename", "torch.util.glob_file_list", "len", "video_test_dataset.VideoTestDataset.data_info[].extend", "video_test_dataset.VideoTestDataset.data_info[].extend", "range", "range", "video_test_dataset.VideoTestDataset.data_info[].extend", "opt[].lower", "ValueError", "torch.random_kernel_generator.Degradation", "opt[].split", "opt[].split", "video_test_dataset.VideoTestDataset.name.lower", "torch.util.glob_file_list", "torch.util.glob_file_list", "video_test_dataset.VideoTestDataset.data_info[].append", "torch.util.read_img_seq", "video_test_dataset.VideoTestDataset.name.lower", "numpy.load", "video_test_dataset.VideoTestDataset.name.lower", "numpy.load", "NotImplementedError", "k.find", "k.find", "k.find", "k.find"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__", "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.set_kernel_params", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.glob_file_list", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.glob_file_list", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.glob_file_list", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.glob_file_list", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.read_img_seq", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.load", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.load"], ["def", "__init__", "(", "self", ",", "opt", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "VideoTestDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale", "=", "kwargs", "[", "'scale'", "]", "\n", "self", ".", "kernel_size", "=", "kwargs", "[", "'kernel_size'", "]", "\n", "self", ".", "model_name", "=", "kwargs", "[", "'model_name'", "]", "\n", "idx", "=", "kwargs", "[", "'idx'", "]", "if", "'idx'", "in", "kwargs", "else", "None", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "cache_data", "=", "opt", "[", "'cache_data'", "]", "\n", "self", ".", "half_N_frames", "=", "opt", "[", "'N_frames'", "]", "//", "2", "\n", "if", "idx", "is", "None", ":", "\n", "            ", "self", ".", "name", "=", "opt", "[", "'name'", "]", "\n", "self", ".", "GT_root", ",", "self", ".", "LQ_root", "=", "opt", "[", "'dataroot_GT'", "]", ",", "opt", "[", "'dataroot_LQ'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "name", "=", "opt", "[", "'name'", "]", ".", "split", "(", "'+'", ")", "[", "idx", "]", "\n", "self", ".", "GT_root", ",", "self", ".", "LQ_root", "=", "opt", "[", "'dataroot_GT'", "]", ".", "split", "(", "'+'", ")", "[", "idx", "]", ",", "opt", "[", "'dataroot_LQ'", "]", ".", "split", "(", "'+'", ")", "[", "idx", "]", "\n", "\n", "", "self", ".", "data_type", "=", "self", ".", "opt", "[", "'data_type'", "]", "\n", "self", ".", "data_info", "=", "{", "'path_LQ'", ":", "[", "]", ",", "'path_GT'", ":", "[", "]", ",", "'folder'", ":", "[", "]", ",", "'idx'", ":", "[", "]", ",", "'border'", ":", "[", "]", "}", "\n", "if", "self", ".", "data_type", "==", "'lmdb'", ":", "\n", "            ", "raise", "ValueError", "(", "'No need to use LMDB during validation/test.'", ")", "\n", "#### Generate data info and cache data", "\n", "", "self", ".", "imgs_LQ", ",", "self", ".", "imgs_GT", "=", "{", "}", ",", "{", "}", "\n", "if", "self", ".", "name", ".", "lower", "(", ")", "in", "[", "'vid4'", ",", "'reds'", ",", "'mm522'", "]", ":", "\n", "            ", "if", "self", ".", "name", ".", "lower", "(", ")", "==", "'vid4'", ":", "\n", "                ", "img_type", "=", "'img'", "\n", "subfolders_GT", "=", "util", ".", "glob_file_list", "(", "self", ".", "GT_root", ")", "\n", "", "elif", "self", ".", "name", ".", "lower", "(", ")", "==", "'reds'", ":", "\n", "                ", "img_type", "=", "'img'", "\n", "list_hr_seq", "=", "util", ".", "glob_file_list", "(", "self", ".", "GT_root", ")", "\n", "subfolders_GT", "=", "[", "k", "for", "k", "in", "list_hr_seq", "if", "\n", "k", ".", "find", "(", "'000'", ")", ">=", "0", "or", "k", ".", "find", "(", "'011'", ")", ">=", "0", "or", "k", ".", "find", "(", "'015'", ")", ">=", "0", "or", "k", ".", "find", "(", "'020'", ")", ">=", "0", "]", "\n", "", "else", ":", "\n", "                ", "img_type", "=", "'img'", "\n", "subfolders_GT", "=", "util", ".", "glob_file_list", "(", "self", ".", "GT_root", ")", "\n", "\n", "", "for", "subfolder_GT", "in", "subfolders_GT", ":", "\n", "                ", "subfolder_name", "=", "osp", ".", "basename", "(", "subfolder_GT", ")", "\n", "img_paths_GT", "=", "util", ".", "glob_file_list", "(", "subfolder_GT", ")", "\n", "max_idx", "=", "len", "(", "img_paths_GT", ")", "\n", "\n", "self", ".", "data_info", "[", "'path_GT'", "]", ".", "extend", "(", "img_paths_GT", ")", "\n", "self", ".", "data_info", "[", "'folder'", "]", ".", "extend", "(", "[", "subfolder_name", "]", "*", "max_idx", ")", "\n", "for", "i", "in", "range", "(", "max_idx", ")", ":", "\n", "                    ", "self", ".", "data_info", "[", "'idx'", "]", ".", "append", "(", "'{}/{}'", ".", "format", "(", "i", ",", "max_idx", ")", ")", "\n", "", "border_l", "=", "[", "0", "]", "*", "max_idx", "\n", "for", "i", "in", "range", "(", "self", ".", "half_N_frames", ")", ":", "\n", "                    ", "border_l", "[", "i", "]", "=", "1", "\n", "border_l", "[", "max_idx", "-", "i", "-", "1", "]", "=", "1", "\n", "", "self", ".", "data_info", "[", "'border'", "]", ".", "extend", "(", "border_l", ")", "\n", "\n", "if", "self", ".", "cache_data", ":", "\n", "                    ", "self", ".", "imgs_GT", "[", "subfolder_name", "]", "=", "util", ".", "read_img_seq", "(", "img_paths_GT", ",", "img_type", ")", "\n", "", "", "", "elif", "opt", "[", "'name'", "]", ".", "lower", "(", ")", "in", "[", "'vimeo90k-test'", "]", ":", "\n", "            ", "pass", "# TODO", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Not support video test dataset. Support Vid4, REDS4 and Vimeo90k-Test.'", ")", "\n", "\n", "# Generate kernel", "\n", "\n", "", "if", "opt", "[", "'degradation_mode'", "]", "==", "'set'", ":", "\n", "            ", "sigma_x", "=", "float", "(", "opt", "[", "'sigma_x'", "]", ")", "\n", "sigma_y", "=", "float", "(", "opt", "[", "'sigma_y'", "]", ")", "\n", "theta", "=", "float", "(", "opt", "[", "'theta'", "]", ")", "\n", "gen_kwargs", "=", "preprocessing", ".", "set_kernel_params", "(", "sigma_x", "=", "sigma_x", ",", "sigma_y", "=", "sigma_y", ",", "theta", "=", "theta", ")", "\n", "self", ".", "kernel_gen", "=", "rkg", ".", "Degradation", "(", "self", ".", "kernel_size", ",", "self", ".", "scale", ",", "**", "gen_kwargs", ")", "\n", "self", ".", "gen_kwargs_l", "=", "[", "gen_kwargs", "[", "'sigma'", "]", "[", "0", "]", ",", "gen_kwargs", "[", "'sigma'", "]", "[", "1", "]", ",", "gen_kwargs", "[", "'theta'", "]", "]", "\n", "\n", "", "elif", "opt", "[", "'degradation_mode'", "]", "==", "'preset'", ":", "\n", "            ", "self", ".", "kernel_gen", "=", "rkg", ".", "Degradation", "(", "self", ".", "kernel_size", ",", "self", ".", "scale", ")", "\n", "if", "self", ".", "name", ".", "lower", "(", ")", "==", "'vid4'", ":", "\n", "                ", "self", ".", "kernel_dict", "=", "np", ".", "load", "(", "'../experiments/pretrained_models/Vid4Gauss.npy'", ")", "\n", "", "elif", "self", ".", "name", ".", "lower", "(", ")", "==", "'reds'", ":", "\n", "                ", "self", ".", "kernel_dict", "=", "np", ".", "load", "(", "'../experiments/pretrained_models/REDSGauss.npy'", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.meta_learner.video_test_dataset.VideoTestDataset.__getitem__": [[98, 151], ["[].split", "torch.util.index_generation", "video_test_dataset.VideoTestDataset.imgs_GT[].index_select", "int", "int", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "video_test_dataset.VideoTestDataset.kernel_gen.apply", "rkg.Degradation.apply.mul().clamp().round().div", "video_test_dataset.VideoTestDataset.kernel_gen.apply", "video_test_dataset.VideoTestDataset.kernel_gen.set_kernel_directly", "video_test_dataset.VideoTestDataset.kernel_gen.apply", "rkg.Degradation.apply.mul().clamp().round().div", "video_test_dataset.VideoTestDataset.kernel_gen.apply", "torch.meta_learner.preprocessing.set_kernel_params", "torch.random_kernel_generator.Degradation", "data.random_kernel_generator.Degradation.apply", "data.random_kernel_generator.Degradation.apply", "rkg.Degradation.apply.mul().clamp().round", "rkg.Degradation.apply.mul().clamp().round", "rkg.Degradation.apply.mul().clamp", "rkg.Degradation.apply.mul().clamp", "rkg.Degradation.apply.mul", "rkg.Degradation.apply.mul"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.index_generation", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.old_kernel_generator.Degradation.apply", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.old_kernel_generator.Degradation.apply", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.old_kernel_generator.Degradation.set_kernel_directly", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.old_kernel_generator.Degradation.apply", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.old_kernel_generator.Degradation.apply", "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.set_kernel_params", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.old_kernel_generator.Degradation.apply", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.old_kernel_generator.Degradation.apply"], ["", "", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "folder", "=", "self", ".", "data_info", "[", "'folder'", "]", "[", "index", "]", "\n", "idx", ",", "max_idx", "=", "self", ".", "data_info", "[", "'idx'", "]", "[", "index", "]", ".", "split", "(", "'/'", ")", "\n", "idx", ",", "max_idx", "=", "int", "(", "idx", ")", ",", "int", "(", "max_idx", ")", "\n", "border", "=", "self", ".", "data_info", "[", "'border'", "]", "[", "index", "]", "\n", "\n", "select_idx", "=", "util", ".", "index_generation", "(", "idx", ",", "max_idx", ",", "self", ".", "opt", "[", "'N_frames'", "]", ",", "\n", "padding", "=", "self", ".", "opt", "[", "'padding'", "]", ")", "\n", "imgs_GT", "=", "self", ".", "imgs_GT", "[", "folder", "]", ".", "index_select", "(", "0", ",", "torch", ".", "LongTensor", "(", "select_idx", ")", ")", "\n", "\n", "if", "self", ".", "opt", "[", "'degradation_mode'", "]", "==", "'set'", ":", "\n", "            ", "'''\n            for i in range(imgs_GT.shape[0]):\n                imgs_LR_slice = self.kernel_gen.apply(imgs_GT[i])\n                imgs_LR.append(imgs_LR_slice)\n                imgs_SuperLR.append(self.kernel_gen.apply(imgs_LR_slice))\n\n            imgs_LR = torch.stack(imgs_LR, dim=0)\n            imgs_SuperLR = torch.stack(imgs_SuperLR, dim=0)\n            '''", "\n", "imgs_LR", "=", "self", ".", "kernel_gen", ".", "apply", "(", "imgs_GT", ")", "\n", "imgs_LR", "=", "imgs_LR", ".", "mul", "(", "255", ")", ".", "clamp", "(", "0", ",", "255", ")", ".", "round", "(", ")", ".", "div", "(", "255", ")", "\n", "imgs_SuperLR", "=", "self", ".", "kernel_gen", ".", "apply", "(", "imgs_LR", ")", "\n", "\n", "", "elif", "self", ".", "opt", "[", "'degradation_mode'", "]", "==", "'preset'", ":", "\n", "            ", "my_kernel", "=", "self", ".", "kernel_dict", "[", "index", "]", "\n", "self", ".", "kernel_gen", ".", "set_kernel_directly", "(", "my_kernel", ")", "\n", "imgs_LR", "=", "self", ".", "kernel_gen", ".", "apply", "(", "imgs_GT", ")", "\n", "imgs_LR", "=", "imgs_LR", ".", "mul", "(", "255", ")", ".", "clamp", "(", "0", ",", "255", ")", ".", "round", "(", ")", ".", "div", "(", "255", ")", "\n", "imgs_SuperLR", "=", "self", ".", "kernel_gen", ".", "apply", "(", "imgs_LR", ")", "\n", "\n", "", "else", ":", "\n", "            ", "kwargs", "=", "preprocessing", ".", "set_kernel_params", "(", ")", "\n", "kernel_gen", "=", "rkg", ".", "Degradation", "(", "self", ".", "kernel_size", ",", "self", ".", "scale", ",", "**", "kwargs", ")", "\n", "'''\n            for i in range(imgs_GT.shape[0]):\n                kernel_gen.gen_new_noise()\n                imgs_LR_slice = kernel_gen.apply(imgs_GT[i])\n                imgs_LR.append(imgs_LR_slice)\n                imgs_SuperLR.append(kernel_gen.apply(imgs_LR_slice))\n            imgs_LR = torch.stack(imgs_LR, dim=0)\n            imgs_SuperLR = torch.stack(imgs_SuperLR, dim=0)\n            '''", "\n", "imgs_LR", "=", "kernel_gen", ".", "apply", "(", "imgs_GT", ")", "\n", "imgs_SuperLR", "=", "kernel_gen", ".", "apply", "(", "imgs_LR", ")", "\n", "\n", "", "return", "{", "\n", "'SuperLQs'", ":", "imgs_SuperLR", ",", "\n", "'LQs'", ":", "imgs_LR", ",", "\n", "'GT'", ":", "imgs_GT", ",", "\n", "'folder'", ":", "folder", ",", "\n", "'idx'", ":", "self", ".", "data_info", "[", "'idx'", "]", "[", "index", "]", ",", "\n", "'border'", ":", "border", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.meta_learner.video_test_dataset.VideoTestDataset.__len__": [[153, 155], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data_info", "[", "'path_GT'", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.meta_learner.vimeo.Vimeo.__init__": [[20, 35], ["torch.Dataset.__init__", "os.path.join", "os.path.join", "os.path.join", "open", "sorted", "f.read().splitlines", "f.read"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__"], ["def", "__init__", "(", "self", ",", "opt", ",", "train", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data_root", "=", "opt", "[", "'datasets'", "]", "[", "'train'", "]", "[", "'data_root'", "]", "\n", "self", ".", "data_root", "=", "path", ".", "join", "(", "self", ".", "data_root", ",", "'vimeo_septuplet'", ")", "\n", "if", "train", ":", "\n", "            ", "meta", "=", "path", ".", "join", "(", "self", ".", "data_root", ",", "'sep_trainlist.txt'", ")", "\n", "", "else", ":", "\n", "            ", "meta", "=", "path", ".", "join", "(", "self", ".", "data_root", ",", "'sep_testlist.txt'", ")", "\n", "\n", "", "with", "open", "(", "meta", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "self", ".", "img_list", "=", "sorted", "(", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", ")", "\n", "", "self", ".", "opt", "=", "opt", "\n", "self", ".", "scale", "=", "opt", "[", "'scale'", "]", "\n", "self", ".", "nframes", "=", "opt", "[", "'datasets'", "]", "[", "'train'", "]", "[", "'N_frames'", "]", "\n", "self", ".", "train", "=", "train", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.meta_learner.vimeo.Vimeo.__getitem__": [[36, 84], ["os.path.join", "sorted", "numpy.stack", "random.randint", "torch.meta_learner.preprocessing.np2tensor", "torch.meta_learner.preprocessing.set_kernel_params", "torch.random_kernel_generator.Degradation", "data.random_kernel_generator.Degradation.apply", "seq_lr.mul().clamp().round().div.mul().clamp().round().div.mul().clamp().round().div", "data.random_kernel_generator.Degradation.apply", "glob.glob", "os.path.join", "imageio.imread", "torch.meta_learner.preprocessing.augment", "os.path.join", "os.path.splitext", "seq_lr.mul().clamp().round().div.mul().clamp().round().div.mul().clamp().round", "os.path.basename", "seq_lr.mul().clamp().round().div.mul().clamp().round().div.mul().clamp", "seq_lr.mul().clamp().round().div.mul().clamp().round().div.mul"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.np2tensor", "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.set_kernel_params", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.old_kernel_generator.Degradation.apply", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.old_kernel_generator.Degradation.apply", "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.augment"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "name_hr", "=", "path", ".", "join", "(", "self", ".", "data_root", ",", "'sequences'", ",", "self", ".", "img_list", "[", "idx", "]", ")", "\n", "names_hr", "=", "sorted", "(", "glob", ".", "glob", "(", "path", ".", "join", "(", "name_hr", ",", "'*.png'", ")", ")", ")", "\n", "names", "=", "[", "path", ".", "splitext", "(", "path", ".", "basename", "(", "f", ")", ")", "[", "0", "]", "for", "f", "in", "names_hr", "]", "\n", "names", "=", "[", "path", ".", "join", "(", "self", ".", "img_list", "[", "idx", "]", ",", "name", ")", "for", "name", "in", "names", "]", "\n", "\n", "seq_hr", "=", "[", "imageio", ".", "imread", "(", "f", ")", "for", "f", "in", "names_hr", "]", "\n", "seq_hr", "=", "np", ".", "stack", "(", "seq_hr", ",", "axis", "=", "-", "1", ")", "\n", "start_frame", "=", "random", ".", "randint", "(", "0", ",", "7", "-", "self", ".", "nframes", ")", "\n", "seq_hr", "=", "seq_hr", "[", "...", ",", "start_frame", ":", "start_frame", "+", "self", ".", "nframes", "]", "\n", "seq_hr", "=", "preprocessing", ".", "np2tensor", "(", "seq_hr", ")", "\n", "\n", "# seq_hr = preprocessing.crop_border(seq_hr, border=[4, 4])", "\n", "# To make time efficient crop by seq_hr and make it downsample to seq_lr", "\n", "# if self.train:", "\n", "# sinc patch_size is decided in seq_LR scale, we have to make it twice larger", "\n", "# seq_hr = preprocessing.common_crop(img=seq_hr, patch_size=self.opt['datasets']['train']['patch_size']*2)", "\n", "\n", "# include random noise for each frame", "\n", "'''\n        kernel_set = []\n        for i in range(5):\n            kwargs = preprocessing.set_kernel_params()\n            kernel_set.append(rkg.Degradation(self.opt['datasets']['train']['kernel_size'], self.scale, **kwargs).kernel)\n        kernel_set = np.stack(kernel_set, axis=0)\n        \n        kernel_temp = rkg.Degradation(self.opt['datasets']['train']['kernel_size'], self.scale)\n        kernel_temp.set_kernel_directly(kernel_set)\n\n        seq_lr = kernel_temp.apply(seq_hr)\n        seq_lr = seq_lr.mul(255).clamp(0, 255).round().div(255)\n        kernel_temp.set_kernel_directly(kernel_set[2])\n        seq_superlr = kernel_temp.apply(seq_lr)\n        '''", "\n", "kwargs", "=", "preprocessing", ".", "set_kernel_params", "(", ")", "\n", "kernel_gen", "=", "rkg", ".", "Degradation", "(", "self", ".", "opt", "[", "'datasets'", "]", "[", "'train'", "]", "[", "'kernel_size'", "]", ",", "self", ".", "scale", ",", "**", "kwargs", ")", "\n", "\n", "seq_lr", "=", "kernel_gen", ".", "apply", "(", "seq_hr", ")", "\n", "seq_lr", "=", "seq_lr", ".", "mul", "(", "255", ")", ".", "clamp", "(", "0", ",", "255", ")", ".", "round", "(", ")", ".", "div", "(", "255", ")", "\n", "seq_superlr", "=", "kernel_gen", ".", "apply", "(", "seq_lr", ")", "\n", "\n", "if", "self", ".", "train", ":", "\n", "# seq_hr, seq_lr, seq_superlr = preprocessing.crop(seq_hr, seq_lr, seq_superlr, patch_size=self.opt['datasets']['train']['patch_size'])", "\n", "            ", "seq_hr", ",", "seq_lr", ",", "seq_superlr", "=", "preprocessing", ".", "augment", "(", "seq_hr", ",", "seq_lr", ",", "seq_superlr", ")", "\n", "\n", "", "return", "{", "'SuperLQs'", ":", "seq_superlr", ",", "\n", "'LQs'", ":", "seq_lr", ",", "\n", "'GT'", ":", "seq_hr", ",", "\n", "# 'Kernel': kernel_gen.kernel", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.meta_learner.vimeo.Vimeo.__len__": [[87, 89], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_list", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.meta_learner.preprocessing.Transformer.__init__": [[270, 272], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "patch_size", ",", "hflip", "=", "True", ",", "vflip", "=", "True", ",", "rot", "=", "True", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.meta_learner.preprocessing.Transformer.__call__": [[273, 281], ["transform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "transforms", ":", "\n", "            ", "return", "x", "\n", "", "else", ":", "\n", "            ", "for", "transform", "in", "self", ".", "transforms", ":", "\n", "                ", "x", "=", "transform", "(", "x", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.meta_learner.preprocessing.Transformer.register": [[282, 284], ["None"], "methods", ["None"], ["", "", "def", "register", "(", "self", ")", ":", "\n", "        ", "pass", "", "", "", ""]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.meta_learner.preprocessing._apply_all": [[9, 37], ["isinstance", "func", "len", "func", "preprocessing._apply_all"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing._apply_all"], ["def", "_apply_all", "(", "func", ",", "x", ")", ":", "\n", "    ", "'''\n    Recursively apply the function to the input.\n\n    Args:\n        func (function): A function to be applied to the input.\n        x (object or a list of objects): The input object(s).\n\n    Return:\n        func(x): See the below examples.\n\n    Example::\n        >>> _apply_all(f, x)\n        >>> f(x)\n\n        >>> _apply_all(f, [x1, x2])\n        >>> [f(x1), f(x2)]\n\n        >>> _apply_all(f, [x1, x2, [x3, x4]])\n        >>> [f(x1), f(x2), [f(x3), f(x4)]]\n    '''", "\n", "if", "isinstance", "(", "x", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "if", "len", "(", "x", ")", "==", "1", ":", "\n", "            ", "return", "func", "(", "x", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "[", "_apply_all", "(", "func", ",", "_x", ")", "for", "_x", "in", "x", "]", "\n", "", "", "else", ":", "\n", "        ", "return", "func", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.meta_learner.preprocessing.set_kernel_params": [[39, 50], ["numpy.random.random_sample", "numpy.random.random_sample", "numpy.random.random_sample"], "function", ["None"], ["", "", "def", "set_kernel_params", "(", "sigma_x", "=", "None", ",", "sigma_y", "=", "None", ",", "theta", "=", "None", ")", ":", "\n", "    ", "min_sigma", "=", "0.2", "\n", "var_sigma", "=", "4.8", "\n", "if", "sigma_x", "is", "None", ":", "\n", "        ", "sigma_x", "=", "min_sigma", "+", "np", ".", "random", ".", "random_sample", "(", ")", "*", "var_sigma", "\n", "", "if", "sigma_y", "is", "None", ":", "\n", "        ", "sigma_y", "=", "min_sigma", "+", "np", ".", "random", ".", "random_sample", "(", ")", "*", "var_sigma", "\n", "", "if", "theta", "is", "None", ":", "\n", "        ", "theta", "=", "-", "math", ".", "pi", "+", "np", ".", "random", ".", "random_sample", "(", ")", "*", "2", "*", "math", ".", "pi", "\n", "\n", "", "return", "{", "'theta'", ":", "theta", ",", "'sigma'", ":", "[", "sigma_x", ",", "sigma_y", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.meta_learner.preprocessing.eval_crop": [[51, 56], ["None"], "function", ["None"], ["", "def", "eval_crop", "(", "hr", ",", "lr", ",", "scale", ")", ":", "\n", "    ", "h", ",", "w", "=", "lr", ".", "shape", "[", "0", ":", "2", "]", "\n", "h", "*=", "scale", "\n", "w", "*=", "scale", "\n", "return", "hr", "[", ":", "h", ",", ":", "w", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.meta_learner.preprocessing.common_crop": [[57, 86], ["min", "min", "random.randrange", "random.randrange", "preprocessing._apply_all", "int"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing._apply_all"], ["", "def", "common_crop", "(", "*", "args", ",", "patch_size", "=", "96", ")", ":", "\n", "    ", "'''\n    Crop given patches.\n\n    Args:\n        args (list of 'torch.Tensor' or 'list of torch.Tensor'):\n            Images or lists of images to be cropped.\n            Cropping position is fixed for all images in the single *args.\n\n        patch_size (int, optional):\n        scale (int, optional):\n\n    Return:\n\n    '''", "\n", "# Find the lowest resolution", "\n", "min_h", "=", "min", "(", "x", ".", "shape", "[", "-", "2", "]", "for", "x", "in", "args", ")", "\n", "min_w", "=", "min", "(", "x", ".", "shape", "[", "-", "1", "]", "for", "x", "in", "args", ")", "\n", "\n", "py", "=", "random", ".", "randrange", "(", "0", ",", "min_h", "-", "patch_size", "+", "1", ")", "\n", "px", "=", "random", ".", "randrange", "(", "0", ",", "min_w", "-", "patch_size", "+", "1", ")", "\n", "\n", "def", "_crop", "(", "x", ")", ":", "\n", "        ", "h", "=", "x", ".", "shape", "[", "-", "2", "]", "\n", "s", "=", "int", "(", "h", "//", "min_h", ")", "\n", "x", "=", "x", "[", "...", ",", "s", "*", "py", ":", "s", "*", "(", "py", "+", "patch_size", ")", ",", "s", "*", "px", ":", "s", "*", "(", "px", "+", "patch_size", ")", "]", "\n", "return", "x", "\n", "\n", "", "return", "_apply_all", "(", "_crop", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.meta_learner.preprocessing.np_common_crop": [[87, 116], ["min", "min", "random.randrange", "random.randrange", "preprocessing._apply_all", "int"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing._apply_all"], ["", "def", "np_common_crop", "(", "*", "args", ",", "patch_size", "=", "96", ")", ":", "\n", "    ", "'''\n    Crop given patches.\n\n    Args:\n        args (list of 'np.array' or 'list of np.array'):\n            Images or lists of images to be cropped.\n            Cropping position is fixed for all images in the single *args.\n\n        patch_size (int, optional):\n        scale (int, optional):\n\n    Return:\n\n    '''", "\n", "# Find the lowest resolution", "\n", "min_h", "=", "min", "(", "x", ".", "shape", "[", "0", "]", "for", "x", "in", "args", ")", "\n", "min_w", "=", "min", "(", "x", ".", "shape", "[", "0", "]", "for", "x", "in", "args", ")", "\n", "\n", "py", "=", "random", ".", "randrange", "(", "0", ",", "min_h", "-", "patch_size", "+", "1", ")", "\n", "px", "=", "random", ".", "randrange", "(", "0", ",", "min_w", "-", "patch_size", "+", "1", ")", "\n", "\n", "def", "_crop", "(", "x", ")", ":", "\n", "        ", "h", "=", "x", ".", "shape", "[", "0", "]", "\n", "s", "=", "int", "(", "h", "//", "min_h", ")", "\n", "x", "=", "x", "[", "s", "*", "py", ":", "s", "*", "(", "py", "+", "patch_size", ")", ",", "s", "*", "px", ":", "s", "*", "(", "px", "+", "patch_size", ")", ",", "...", "]", "\n", "return", "x", "\n", "\n", "", "return", "_apply_all", "(", "_crop", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.meta_learner.preprocessing.get_min_in_axis": [[117, 128], ["numpy.zeros_like", "range", "numpy.amin", "range", "numpy.amin", "data.index_generation", "data.index_generation"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.index_generation", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.index_generation"], ["", "def", "get_min_in_axis", "(", "img", ",", "s_length", ",", "direction", "=", "'horizontal'", ")", ":", "\n", "# img: H W T", "\n", "    ", "smooth_img", "=", "np", ".", "zeros_like", "(", "img", ")", "\n", "h", ",", "w", "=", "img", ".", "shape", "[", "-", "2", "]", ",", "img", ".", "shape", "[", "-", "1", "]", "\n", "if", "direction", "==", "'horizontal'", ":", "\n", "        ", "for", "i", "in", "range", "(", "w", ")", ":", "\n", "            ", "smooth_img", "[", ":", ",", ":", ",", "i", "]", "=", "np", ".", "amin", "(", "img", "[", ":", ",", ":", ",", "data_util", ".", "index_generation", "(", "i", ",", "w", ",", "s_length", ",", "'replicate'", ")", "]", ",", "axis", "=", "2", ")", "\n", "", "", "elif", "direction", "==", "'vertical'", ":", "\n", "        ", "for", "i", "in", "range", "(", "h", ")", ":", "\n", "            ", "smooth_img", "[", ":", ",", "i", ",", ":", "]", "=", "np", ".", "amin", "(", "img", "[", ":", ",", "data_util", ".", "index_generation", "(", "i", ",", "h", ",", "s_length", ",", "'replicate'", ")", ",", ":", "]", ",", "axis", "=", "1", ")", "\n", "", "", "return", "smooth_img", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.meta_learner.preprocessing.crop": [[129, 178], ["img.mul().sum", "pywt.dwt2", "preprocessing.get_min_in_axis", "preprocessing.get_min_in_axis", "numpy.mean", "numpy.mean", "range", "numpy.abs", "numpy.abs", "random.randrange", "random.randrange", "img.mul", "numpy.mean", "numpy.mean", "img.new_tensor"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.get_min_in_axis", "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.get_min_in_axis"], ["", "def", "crop", "(", "img_gt", ",", "img", ",", "img_lr", ",", "scale", "=", "2", ",", "patch_size", "=", "96", ")", ":", "\n", "    ", "'''\n    Crop given patches.\n\n    Args:\n        args (list of 'np.array' or 'list of np.array'):\n            Images or lists of images to be cropped.\n            Cropping position is fixed for all images in the single *args.\n\n        patch_size (int, optional):\n        scale (int, optional):\n\n    Return:\n\n    '''", "\n", "import", "pywt", "\n", "\n", "# Find the lowest resolution", "\n", "h", ",", "w", "=", "img", ".", "shape", "[", "-", "2", "]", "//", "2", ",", "img", ".", "shape", "[", "-", "1", "]", "//", "2", "\n", "# T C H W  --> H W T", "\n", "convert", "=", "(", "img", ".", "new_tensor", "(", "[", "65.481", ",", "128.553", ",", "24.966", "]", ")", "/", "255.0", "+", "16.0", ")", ".", "reshape", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "img_y", "=", "img", ".", "mul", "(", "convert", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "_", ",", "(", "ch", ",", "cv", ",", "_", ")", "=", "pywt", ".", "dwt2", "(", "img_y", ",", "'haar'", ")", "\n", "# ch, cv become numpy array", "\n", "ch", ",", "cv", "=", "np", ".", "abs", "(", "ch", ")", ",", "np", ".", "abs", "(", "cv", ")", "\n", "\n", "ch_minned", "=", "get_min_in_axis", "(", "ch", ",", "9", ",", "'horizontal'", ")", "\n", "cv_minned", "=", "get_min_in_axis", "(", "cv", ",", "9", ",", "'vertical'", ")", "\n", "mean_ch", "=", "np", ".", "mean", "(", "ch_minned", ",", "axis", "=", "(", "1", ",", "2", ")", ")", "# T", "\n", "mean_cv", "=", "np", ".", "mean", "(", "cv_minned", ",", "axis", "=", "(", "1", ",", "2", ")", ")", "# T", "\n", "for", "i", "in", "range", "(", "50", ")", ":", "\n", "        ", "py", "=", "random", ".", "randrange", "(", "0", ",", "h", "-", "patch_size", "//", "2", "+", "1", ")", "\n", "px", "=", "random", ".", "randrange", "(", "0", ",", "w", "-", "patch_size", "//", "2", "+", "1", ")", "\n", "ch_patch", "=", "ch_minned", "[", "...", ",", "py", ":", "py", "+", "(", "patch_size", "//", "2", ")", ",", "px", ":", "px", "+", "(", "patch_size", "//", "2", ")", "]", "\n", "cv_patch", "=", "cv_minned", "[", "...", ",", "py", ":", "py", "+", "(", "patch_size", "//", "2", ")", ",", "px", ":", "px", "+", "(", "patch_size", "//", "2", ")", "]", "\n", "mean_ch_patch", ",", "mean_cv_patch", "=", "np", ".", "mean", "(", "ch_patch", ",", "axis", "=", "(", "1", ",", "2", ")", ")", ",", "np", ".", "mean", "(", "cv_patch", ",", "axis", "=", "(", "1", ",", "2", ")", ")", "\n", "if", "(", "mean_ch_patch", ">=", "mean_ch", ")", ".", "all", "(", ")", "and", "(", "mean_cv_patch", ">=", "mean_cv", ")", ".", "all", "(", ")", ":", "\n", "            ", "break", "\n", "\n", "", "", "patch", "=", "img", "[", "...", ",", "py", "*", "2", ":", "py", "*", "2", "+", "patch_size", ",", "px", "*", "2", ":", "px", "*", "2", "+", "patch_size", "]", "\n", "if", "img_gt", "is", "not", "None", ":", "\n", "        ", "patch_gt", "=", "img_gt", "[", "...", ",", "py", "*", "2", "*", "scale", ":", "(", "py", "*", "2", "+", "patch_size", ")", "*", "scale", ",", "px", "*", "2", "*", "scale", ":", "(", "px", "*", "2", "+", "patch_size", ")", "*", "scale", "]", "\n", "", "else", ":", "\n", "        ", "patch_gt", "=", "None", "\n", "", "if", "img_lr", "is", "not", "None", ":", "\n", "        ", "patch_superlr", "=", "img_lr", "[", "...", ",", "(", "py", "*", "2", ")", "//", "scale", ":", "(", "py", "*", "2", "+", "patch_size", ")", "//", "scale", ",", "(", "px", "*", "2", ")", "//", "scale", ":", "(", "px", "*", "2", "+", "patch_size", ")", "//", "scale", "]", "\n", "", "else", ":", "\n", "        ", "patch_superlr", "=", "None", "\n", "", "return", "patch_gt", ",", "patch", ",", "patch_superlr", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.meta_learner.preprocessing.crop_border": [[180, 208], ["min", "min", "isinstance", "preprocessing._apply_all", "int"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing._apply_all"], ["", "def", "crop_border", "(", "*", "args", ",", "border", "=", "[", "4", ",", "4", "]", ")", ":", "\n", "    ", "'''\n    Crop given patches.\n\n    Args:\n        args (list of 'np.array' or 'list of np.array'):\n            Images or lists of images to be cropped.\n            Cropping position is fixed for all images in the single *args.\n\n        border (int, optional): [h, w], crop length in height, width, respectively\n\n    Return:\n\n    '''", "\n", "# Find the lowest resolution", "\n", "min_h", "=", "min", "(", "x", ".", "shape", "[", "-", "2", "]", "for", "x", "in", "args", ")", "\n", "min_w", "=", "min", "(", "x", ".", "shape", "[", "-", "1", "]", "for", "x", "in", "args", ")", "\n", "\n", "if", "isinstance", "(", "border", ",", "(", "int", ",", "float", ")", ")", ":", "\n", "        ", "border", "=", "[", "border", ",", "border", "]", "\n", "\n", "", "def", "_crop_border", "(", "x", ")", ":", "\n", "        ", "h", "=", "x", ".", "shape", "[", "-", "2", "]", "\n", "s", "=", "int", "(", "h", "//", "min_h", ")", "\n", "x", "=", "x", "[", "...", ",", "s", "*", "border", "[", "0", "]", ":", "-", "s", "*", "border", "[", "0", "]", ",", "s", "*", "border", "[", "1", "]", ":", "-", "s", "*", "border", "[", "1", "]", "]", "\n", "return", "x", "\n", "\n", "", "return", "_apply_all", "(", "_crop_border", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.meta_learner.preprocessing.augment": [[209, 238], ["preprocessing._apply_all", "random.random", "random.random", "random.random", "torch.from_numpy", "torch.from_numpy", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "x.permute.permute", "x.permute.permute", "x.permute.permute", "x.permute.numpy", "x.permute.numpy"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing._apply_all"], ["", "def", "augment", "(", "*", "args", ",", "hflip", "=", "True", ",", "vflip", "=", "True", ",", "rot", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n        Apply random augmentations to given patches.\n        Args:\n        Return:\n    \"\"\"", "\n", "hflip", "=", "hflip", "and", "random", ".", "random", "(", ")", "<", "0.5", "\n", "vflip", "=", "vflip", "and", "random", ".", "random", "(", ")", "<", "0.5", "\n", "rot", "=", "rot", "and", "random", ".", "random", "(", ")", "<", "0.5", "\n", "\n", "def", "_augment", "(", "x", ")", ":", "\n", "        ", "if", "hflip", ":", "\n", "            ", "x", "=", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "x", ".", "numpy", "(", ")", "[", "...", ",", ":", ",", ":", ":", "-", "1", "]", ")", ")", "\n", "", "if", "vflip", ":", "\n", "            ", "x", "=", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "x", ".", "numpy", "(", ")", "[", "...", ",", ":", ":", "-", "1", ",", ":", "]", ")", ")", "\n", "", "if", "rot", ":", "\n", "# Rotating kernel,", "\n", "            ", "if", "x", ".", "ndim", "==", "2", ":", "\n", "                ", "x", "=", "x", ".", "permute", "(", "1", ",", "0", ")", "\n", "# Single image C H W", "\n", "", "if", "x", ".", "ndim", "==", "3", ":", "\n", "                ", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "# Video T C H W", "\n", "", "elif", "x", ".", "ndim", "==", "4", ":", "\n", "                ", "x", "=", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ")", "\n", "\n", "", "", "return", "x", "\n", "\n", "", "return", "_apply_all", "(", "_augment", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.meta_learner.preprocessing.np2tensor": [[239, 263], ["preprocessing._apply_all", "numpy.ascontiguousarray", "torch.from_numpy().float", "x.transpose.transpose", "x.transpose.transpose", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing._apply_all"], ["", "def", "np2tensor", "(", "*", "args", ")", ":", "\n", "    ", "'''\n    Convert np.array to torch.Tensor.\n    Output tensors will lie in between [-1, 1] (for adversarial training).\n\n    Args:\n\n    Return:\n\n    '''", "\n", "def", "_np2tensor", "(", "x", ")", ":", "\n", "        ", "if", "x", ".", "ndim", "==", "3", ":", "\n", "# H x W x C -> C x H x W", "\n", "            ", "x", "=", "x", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "", "elif", "x", ".", "ndim", "==", "4", ":", "\n", "# H x W x C x T -> T x C x H x W", "\n", "            ", "x", "=", "x", ".", "transpose", "(", "(", "3", ",", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "", "x", "=", "np", ".", "ascontiguousarray", "(", "x", ")", "\n", "x", "=", "torch", ".", "from_numpy", "(", "x", ")", ".", "float", "(", ")", "# [0, 255]", "\n", "x", "=", "(", "x", "/", "255.", ")", "# [0, 1]", "\n", "return", "x", "\n", "\n", "", "return", "_apply_all", "(", "_np2tensor", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.meta_learner.mm522.MM522.__init__": [[15, 18], ["data.meta_learner.vsrbase.VSRBase.__init__"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "set", "=", "'MM522'", "\n", "super", "(", "MM522", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.meta_learner.mm522.MM522._set_directory": [[19, 21], ["os.path.join"], "methods", ["None"], ["", "def", "_set_directory", "(", "self", ",", "data_root", ")", ":", "\n", "        ", "self", ".", "apath", "=", "path", ".", "join", "(", "data_root", ",", "'MM522'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.meta_learner.mm522.MM522._scan": [[22, 44], ["os.path.basename", "os.path.join", "sorted", "os.path.join", "sorted", "mm522.MM522._scan._make_keys"], "methods", ["None"], ["", "def", "_scan", "(", "self", ")", ":", "\n", "        ", "def", "_make_keys", "(", "dir_path", ")", ":", "\n", "            ", "\"\"\"\n            :param dir_path: 'frame_lr/X4/001/0001'\n            :return: 001_0001\n            \"\"\"", "\n", "return", "os", ".", "path", ".", "basename", "(", "os", ".", "path", ".", "dirname", "(", "dir_path", ")", ")", "\n", "\n", "", "if", "self", ".", "split", "==", "'train'", ":", "\n", "            ", "dir_train", "=", "path", ".", "join", "(", "self", ".", "apath", ",", "'train'", ")", "\n", "list_hr_seq", "=", "sorted", "(", "glob", ".", "glob", "(", "dir_train", "+", "'/**/*/truth'", ")", ")", "\n", "", "else", ":", "\n", "            ", "dir_train", "=", "path", ".", "join", "(", "self", ".", "apath", ",", "'val'", ")", "\n", "list_hr_seq", "=", "sorted", "(", "glob", ".", "glob", "(", "dir_train", "+", "'/**/truth'", ")", ")", "\n", "\n", "", "dict_hr", "=", "{", "\n", "_make_keys", "(", "k", ")", ":", "sorted", "(", "\n", "glob", ".", "glob", "(", "path", ".", "join", "(", "k", ",", "'*'", "+", "self", ".", "ext", ")", ")", "\n", ")", "for", "k", "in", "list_hr_seq", "\n", "}", "\n", "\n", "return", "dict_hr", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.meta_learner.mm522.MM522.__getitem__": [[45, 96], ["mm522.MM522.find_set", "numpy.stack", "data.meta_learner.preprocessing.np2tensor", "torch.Tensor.append", "torch.Tensor", "int", "data.random_kernel_generator.Degradation", "data.random_kernel_generator.Degradation.apply", "data.random_kernel_generator.Degradation.apply", "os.path.join", "fn_read", "data.meta_learner.preprocessing.set_kernel_params", "data.meta_learner.preprocessing.set_kernel_params", "data.meta_learner.preprocessing.crop", "ValueError", "os.path.basename", "os.path.splitext"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.vsrbase.VSRBase.find_set", "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.np2tensor", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.old_kernel_generator.Degradation.apply", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.old_kernel_generator.Degradation.apply", "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.set_kernel_params", "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.set_kernel_params", "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.crop"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "# Randomly choose a sequence in a video", "\n", "# key = self.keys[idx]", "\n", "# str_idx, seq_idx = self.find_set(key)", "\n", "\n", "        ", "key", ",", "str_idx", ",", "seq_idx", "=", "self", ".", "find_set", "(", "idx", ")", "\n", "set_hr", "=", "self", ".", "dict_hr", "[", "key", "]", "\n", "\n", "if", "self", ".", "stride", "[", "str_idx", "]", ">", "0", ":", "\n", "            ", "seq_end", "=", "seq_idx", "+", "self", ".", "sample_length", "[", "str_idx", "]", "\n", "", "else", ":", "\n", "            ", "seq_end", "=", "seq_idx", "-", "self", ".", "sample_length", "[", "str_idx", "]", "\n", "\n", "", "if", "seq_end", ">=", "0", ":", "\n", "            ", "name_hr", "=", "set_hr", "[", "seq_idx", ":", "seq_end", ":", "self", ".", "stride", "[", "str_idx", "]", "]", "\n", "", "else", ":", "\n", "            ", "name_hr", "=", "set_hr", "[", "seq_idx", ":", ":", "self", ".", "stride", "[", "str_idx", "]", "]", "\n", "\n", "", "if", "self", ".", "img_type", "==", "'img'", ":", "\n", "            ", "fn_read", "=", "imageio", ".", "imread", "\n", "", "elif", "self", ".", "img_type", "==", "'bin'", ":", "\n", "            ", "fn_read", "=", "np", ".", "load", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Wrong img type: {}'", ".", "format", "(", "self", ".", "img_type", ")", ")", "\n", "\n", "", "name", "=", "[", "path", ".", "join", "(", "key", ",", "path", ".", "basename", "(", "f", ")", ")", "for", "f", "in", "name_hr", "]", "\n", "name", "=", "[", "path", ".", "splitext", "(", "f", ")", "[", "0", "]", "for", "f", "in", "name", "]", "\n", "seq_hr", "=", "[", "fn_read", "(", "f", ")", "for", "f", "in", "name_hr", "]", "\n", "seq_hr", "=", "np", ".", "stack", "(", "seq_hr", ",", "axis", "=", "-", "1", ")", "\n", "seq_hr", "=", "preprocessing", ".", "np2tensor", "(", "seq_hr", ")", "\n", "\n", "if", "self", ".", "opt", "[", "'network_E'", "]", "[", "'which_model_E'", "]", "==", "'gaussargs'", ":", "\n", "            ", "kwargs", "=", "preprocessing", ".", "set_kernel_params", "(", "base", "=", "'bicubic'", ")", "\n", "", "else", ":", "\n", "            ", "kwargs", "=", "preprocessing", ".", "set_kernel_params", "(", ")", "\n", "\n", "", "kwargs_l", "=", "kwargs", "[", "'sigma'", "]", "\n", "kwargs_l", ".", "append", "(", "kwargs", "[", "'theta'", "]", ")", "\n", "kwargs_l", "=", "torch", ".", "Tensor", "(", "kwargs_l", ")", "\n", "basis_label", "=", "int", "(", "5", "*", "kwargs", "[", "'type'", "]", ")", "\n", "\n", "kernel_gen", "=", "rkg", ".", "Degradation", "(", "self", ".", "opt_data", "[", "'train'", "]", "[", "'kernel_size'", "]", ",", "self", ".", "scale", ",", "**", "kwargs", ")", "\n", "seq_lr", "=", "kernel_gen", ".", "apply", "(", "seq_hr", ")", "\n", "seq_superlr", "=", "kernel_gen", ".", "apply", "(", "seq_lr", ")", "\n", "\n", "if", "self", ".", "train", ":", "\n", "            ", "seq_lr", ",", "seq_hr", ",", "seq_superlr", "=", "preprocessing", ".", "crop", "(", "seq_lr", ",", "seq_hr", ",", "seq_superlr", ",", "patch_size", "=", "self", ".", "opt_data", "[", "'train'", "]", "[", "'patch_size'", "]", ")", "\n", "# seq_hr, seq_lr = preprocessing.augment(seq_hr, seq_lr)", "\n", "\n", "", "return", "{", "'SuperLQs'", ":", "seq_superlr", ",", "'LQs'", ":", "seq_lr", ",", "'GT'", ":", "seq_hr", ",", "'Kernel'", ":", "kernel_gen", ".", "kernel", ",", "\n", "'Kernel_type'", ":", "basis_label", ",", "'Kernel_args'", ":", "kwargs_l", ",", "'name'", ":", "name", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.meta_learner.__init__.create_dataloader": [[7, 26], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.esw0116_DynaVSR.meta_learner.__init__.create_dataset": [[28, 54], ["D", "logging.getLogger", "logging.getLogger.info", "NotImplementedError"], "function", ["None"], []], "home.repos.pwc.inspect_result.esw0116_DynaVSR.meta_learner.loader.get_loader": [[7, 51], ["name.lower", "importlib.import_module", "torch.utils.data.DataLoader", "name.split", "torch.utils.data.DataLoader", "getattr", "importlib.import_module", "importlib.import_module.append", "name.lower", "torch.utils.data.ConcatDataset", "name_frag.lower", "getattr"], "function", ["None"], ["def", "get_loader", "(", "opt", ",", "train", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "\n", "    ", "flag", "=", "'train'", "if", "train", "else", "'val'", "\n", "name", "=", "opt", "[", "'datasets'", "]", "[", "flag", "]", "[", "'name'", "]", "\n", "batch_size", "=", "opt", "[", "'datasets'", "]", "[", "'train'", "]", "[", "'batch_size'", "]", "\n", "n_threads", "=", "opt", "[", "'datasets'", "]", "[", "'train'", "]", "[", "'n_workers'", "]", "\n", "cpu", "=", "opt", "[", "'cpu'", "]", "\n", "\n", "if", "train", ":", "\n", "        ", "shuffle", "=", "True", "\n", "", "else", ":", "\n", "        ", "shuffle", "=", "True", "#False", "\n", "batch_size", "=", "1", "\n", "\n", "", "benchmark", "=", "False", "\n", "if", "name", ".", "lower", "(", ")", "in", "[", "'vid4'", "]", ":", "\n", "        ", "benchmark", "=", "True", "\n", "", "if", "'+'", "not", "in", "name", ":", "\n", "        ", "dataset", "=", "import_module", "(", "'data.meta_learner'", "+", "name", ".", "lower", "(", ")", ")", "\n", "dataset", "=", "getattr", "(", "dataset", ",", "name", ")", "(", "opt", "=", "opt", ",", "train", "=", "train", ",", "benchmark", "=", "benchmark", ",", "**", "kwargs", ")", "\n", "loader", "=", "DataLoader", "(", "\n", "dataset", "=", "dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "\n", "drop_last", "=", "True", ",", "\n", "num_workers", "=", "n_threads", ",", "\n", "pin_memory", "=", "not", "cpu", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "dataset", "=", "[", "]", "\n", "name_list", "=", "name", ".", "split", "(", "'+'", ")", "\n", "for", "name_frag", "in", "name_list", ":", "\n", "            ", "dataset_frag", "=", "import_module", "(", "'data.meta_learner'", "+", "name_frag", ".", "lower", "(", ")", ")", "\n", "dataset", ".", "append", "(", "getattr", "(", "dataset_frag", ",", "name_frag", ")", "(", "opt", "=", "opt", ",", "train", "=", "train", ",", "benchmark", "=", "benchmark", ",", "**", "kwargs", ")", ")", "\n", "", "loader", "=", "DataLoader", "(", "\n", "dataset", "=", "ConcatDataset", "(", "dataset", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "\n", "drop_last", "=", "True", ",", "\n", "num_workers", "=", "n_threads", ",", "\n", "pin_memory", "=", "not", "cpu", ",", "\n", ")", "\n", "\n", "", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.meta_learner.loader.get_dataset": [[53, 77], ["importlib.import_module", "name.split", "torch.utils.data.ConcatDataset", "name.lower", "getattr", "importlib.import_module", "torch.utils.data.ConcatDataset.append", "name.lower", "name_frag.lower", "name_frag.lower", "getattr"], "function", ["None"], ["", "def", "get_dataset", "(", "\n", "opt", ",", "train", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "\n", "    ", "flag", "=", "'train'", "if", "train", "else", "'val'", "\n", "name", "=", "opt", "[", "'datasets'", "]", "[", "flag", "]", "[", "'name'", "]", "\n", "\n", "if", "'+'", "not", "in", "name", ":", "\n", "        ", "benchmark", "=", "False", "\n", "if", "name", ".", "lower", "(", ")", "in", "[", "'vid4'", "]", ":", "\n", "            ", "benchmark", "=", "True", "\n", "", "dataset", "=", "import_module", "(", "'data.meta_learner.'", "+", "name", ".", "lower", "(", ")", ")", "\n", "dataset", "=", "getattr", "(", "dataset", ",", "name", ")", "(", "opt", "=", "opt", ",", "train", "=", "train", ",", "benchmark", "=", "benchmark", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "        ", "dataset", "=", "[", "]", "\n", "name_list", "=", "name", ".", "split", "(", "'+'", ")", "\n", "for", "name_frag", "in", "name_list", ":", "\n", "            ", "benchmark", "=", "False", "\n", "if", "name_frag", ".", "lower", "(", ")", "in", "[", "'vid4'", "]", ":", "\n", "                ", "benchmark", "=", "True", "\n", "", "dataset_frag", "=", "import_module", "(", "'data.meta_learner.'", "+", "name_frag", ".", "lower", "(", ")", ")", "\n", "dataset", ".", "append", "(", "getattr", "(", "dataset_frag", ",", "name_frag", ")", "(", "opt", "=", "opt", ",", "train", "=", "train", ",", "benchmark", "=", "benchmark", ",", "**", "kwargs", ")", ")", "\n", "", "dataset", "=", "ConcatDataset", "(", "dataset", ")", "\n", "\n", "", "return", "dataset", "\n", "", ""]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.reds.REDS.__init__": [[21, 23], ["data.estimator.vsrbase.VSRBase.__init__"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "REDS", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.reds.REDS._set_directory": [[24, 26], ["os.path.join"], "methods", ["None"], ["", "def", "_set_directory", "(", "self", ",", "data_root", ")", ":", "\n", "        ", "self", ".", "apath", "=", "path", ".", "join", "(", "data_root", ",", "'REDS'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.reds.REDS._scan": [[27, 72], ["os.path.join", "os.path.join", "glob.glob", "os.path.join", "os.path.join", "glob.glob.extend", "glob.glob.remove", "glob.glob", "os.path.dirname", "os.path.basename", "reds.REDS._scan._make_keys"], "methods", ["None"], ["", "def", "_scan", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Follow the train/valid split of REDS in EDVR paper.\n        Trainset : Train(except 000, 011, 015, 020) + Valid (Total 266 videos)\n        Validset : Train000, 011, 015, 020 (Total 4 videos)\n        :return:\n        \"\"\"", "\n", "\n", "def", "_make_keys", "(", "dir_path", ")", ":", "\n", "            ", "\"\"\"\n            :param dir_path: Path\n            :return: train_000 form\n            \"\"\"", "\n", "dir", ",", "base", "=", "path", ".", "dirname", "(", "dir_path", ")", ",", "path", ".", "basename", "(", "dir_path", ")", "\n", "tv", "=", "'train'", "if", "dir", ".", "find", "(", "'train'", ")", ">=", "0", "else", "'val'", "\n", "return", "tv", "+", "'_'", "+", "base", "\n", "\n", "\n", "", "dir_path_train", "=", "path", ".", "join", "(", "self", ".", "apath", ",", "'train'", ")", "\n", "dir_hr_train", "=", "path", ".", "join", "(", "dir_path_train", ",", "'HR'", ")", "\n", "list_hr_seq", "=", "glob", ".", "glob", "(", "dir_hr_train", "+", "'/*'", ")", "\n", "list_hr_seq_val", "=", "[", "k", "for", "k", "in", "list_hr_seq", "if", "k", ".", "find", "(", "'000'", ")", ">=", "0", "or", "k", ".", "find", "(", "'011'", ")", ">=", "0", "or", "k", ".", "find", "(", "'015'", ")", ">=", "0", "or", "k", ".", "find", "(", "'020'", ")", ">=", "0", "]", "\n", "\n", "for", "x", "in", "list_hr_seq_val", ":", "\n", "            ", "list_hr_seq", ".", "remove", "(", "x", ")", "\n", "\n", "", "dir_path_valid", "=", "path", ".", "join", "(", "self", ".", "apath", ",", "'val'", ")", "\n", "dir_hr_valid", "=", "path", ".", "join", "(", "dir_path_valid", ",", "'HR'", ")", "\n", "list_hr_seq", ".", "extend", "(", "glob", ".", "glob", "(", "dir_hr_valid", "+", "'/*'", ")", ")", "\n", "\n", "if", "self", ".", "split", "==", "'train'", ":", "\n", "            ", "dict_hr", "=", "{", "\n", "_make_keys", "(", "k", ")", ":", "sorted", "(", "\n", "glob", ".", "glob", "(", "path", ".", "join", "(", "k", ",", "'*'", "+", "self", ".", "ext", ")", ")", "\n", ")", "for", "k", "in", "list_hr_seq", "\n", "}", "\n", "return", "dict_hr", "\n", "\n", "", "else", ":", "\n", "            ", "dict_hr", "=", "{", "\n", "_make_keys", "(", "k", ")", ":", "sorted", "(", "\n", "glob", ".", "glob", "(", "path", ".", "join", "(", "k", ",", "'*'", "+", "self", ".", "ext", ")", ")", "\n", ")", "for", "k", "in", "list_hr_seq_val", "\n", "}", "\n", "return", "dict_hr", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.vsrbase.VSRBase.__init__": [[21, 88], ["torch.Dataset.__init__", "vsrbase.VSRBase._set_directory", "vsrbase.VSRBase._scan", "sorted", "list", "vsrbase.VSRBase.dict_hr.items", "vsrbase.VSRBase.dict_hr.items", "list", "sum", "vsrbase.VSRBase.dict_hr.keys", "tqdm.tqdm", "isinstance", "map", "list", "enumerate", "enumerate", "map", "vsrbase.VSRBase.dict_hr.keys", "os.path.join", "enumerate", "range", "vsrbase.VSRBase.len_dict[].append", "vsrbase.VSRBase.len_dict[].append", "vsrbase.VSRBase.len_dict.values", "v.replace", "save_as.replace.replace.replace", "abs", "sum", "os.path.isfile", "os.makedirs", "imageio.imread", "numpy.save", "os.path.dirname", "sum", "len", "len"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__", "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.mm522.MM522._set_directory", "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.mm522.MM522._scan", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.save"], ["    ", "def", "__init__", "(", "\n", "self", ",", "opt", ",", "data_root", "=", "'../dataset'", ",", "train", "=", "True", ",", "benchmark", "=", "False", ")", ":", "\n", "\n", "        ", "super", "(", "VSRBase", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "apath", "=", "''", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "opt_data", "=", "opt", "[", "'datasets'", "]", "\n", "self", ".", "split", "=", "'train'", "if", "train", "else", "'val'", "\n", "self", ".", "ext", "=", "'.png'", "\n", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "benchmark", "=", "benchmark", "\n", "self", ".", "_set_directory", "(", "data_root", ")", "\n", "self", ".", "scale", "=", "opt", "[", "'scale'", "]", "\n", "if", "benchmark", ":", "\n", "            ", "self", ".", "img_type", "=", "'img'", "\n", "", "else", ":", "\n", "            ", "self", ".", "img_type", "=", "opt", "[", "'datasets'", "]", "[", "'train'", "]", "[", "'img_type'", "]", "\n", "", "self", ".", "stride", "=", "opt", "[", "'datasets'", "]", "[", "'train'", "]", "[", "'interval_list'", "]", "\n", "\n", "timesteps", "=", "opt", "[", "'datasets'", "]", "[", "'train'", "]", "[", "'N_frames'", "]", "\n", "\n", "self", ".", "dict_hr", "=", "self", ".", "_scan", "(", ")", "\n", "self", ".", "keys", "=", "sorted", "(", "self", ".", "dict_hr", ".", "keys", "(", ")", ")", "\n", "\n", "# Pre-decode png files", "\n", "if", "self", ".", "img_type", "==", "'bin'", ":", "\n", "            ", "for", "k", "in", "tqdm", ".", "tqdm", "(", "self", ".", "dict_hr", ".", "keys", "(", ")", ",", "ncols", "=", "80", ")", ":", "\n", "                ", "bin_path", "=", "path", ".", "join", "(", "self", ".", "apath", ",", "'bin'", ")", "\n", "for", "idx", ",", "v", "in", "enumerate", "(", "self", ".", "dict_hr", "[", "k", "]", ")", ":", "\n", "                    ", "save_as", "=", "v", ".", "replace", "(", "self", ".", "apath", ",", "bin_path", ")", "\n", "save_as", "=", "save_as", ".", "replace", "(", "self", ".", "ext", ",", "''", ")", "\n", "# If we don't have the binary, make it.", "\n", "if", "not", "path", ".", "isfile", "(", "save_as", "+", "'.npy'", ")", ":", "\n", "                        ", "os", ".", "makedirs", "(", "path", ".", "dirname", "(", "save_as", ")", ",", "exist_ok", "=", "True", ")", "\n", "img", "=", "imageio", ".", "imread", "(", "v", ")", "\n", "# Bypassing the zip archive error", "\n", "# _, w, c = img.shape", "\n", "# dummy = np.zeros((1,w,c))", "\n", "# img_dummy = np.concatenate((img, dummy), axis=0)", "\n", "# torch.save(img_dummy, save_as)", "\n", "np", ".", "save", "(", "save_as", ",", "img", ")", "\n", "# Update the dictionary", "\n", "", "self", ".", "dict_hr", "[", "k", "]", "[", "idx", "]", "=", "save_as", "+", "'.npy'", "\n", "\n", "# Calculate all possible sequence combinations", "\n", "", "", "", "if", "not", "isinstance", "(", "self", ".", "stride", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "self", ".", "stride", "=", "[", "self", ".", "stride", "]", "\n", "", "abs_stride", "=", "list", "(", "map", "(", "lambda", "x", ":", "abs", "(", "x", ")", ",", "self", ".", "stride", ")", ")", "\n", "\n", "self", ".", "is_seq", "=", "True", "\n", "self", ".", "sample_length", "=", "[", "(", "timesteps", "-", "1", ")", "*", "abs_s", "+", "1", "for", "abs_s", "in", "abs_stride", "]", "\n", "self", ".", "offsets", "=", "[", "list", "(", "range", "(", "sample_length", ")", ")", "for", "sample_length", "in", "self", ".", "sample_length", "]", "\n", "self", ".", "len_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "self", ".", "dict_hr", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "len_dict", "[", "k", "]", "=", "[", "]", "\n", "for", "str_idx", ",", "offset", "in", "enumerate", "(", "self", ".", "offsets", ")", ":", "\n", "                ", "self", ".", "len_dict", "[", "k", "]", ".", "append", "(", "[", "(", "len", "(", "v", ")", "-", "o", ")", "//", "self", ".", "sample_length", "[", "str_idx", "]", "for", "o", "in", "offset", "]", ")", "\n", "\n", "# Count the number of samples", "\n", "", "", "self", ".", "len_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "self", ".", "dict_hr", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "len_dict", "[", "k", "]", "=", "[", "]", "\n", "for", "str_idx", ",", "offset", "in", "enumerate", "(", "self", ".", "offsets", ")", ":", "\n", "                ", "self", ".", "len_dict", "[", "k", "]", ".", "append", "(", "[", "(", "len", "(", "v", ")", "-", "o", ")", "//", "self", ".", "sample_length", "[", "str_idx", "]", "for", "o", "in", "offset", "]", ")", "\n", "", "", "self", ".", "weighted_sample", "=", "list", "(", "map", "(", "lambda", "x", ":", "sum", "(", "[", "sum", "(", "y", ")", "for", "y", "in", "x", "]", ")", ",", "self", ".", "len_dict", ".", "values", "(", ")", ")", ")", "\n", "self", ".", "n_samples", "=", "sum", "(", "self", ".", "weighted_sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.vsrbase.VSRBase.sampling_weights": [[89, 91], ["list", "map"], "methods", ["None"], ["", "def", "sampling_weights", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "map", "(", "lambda", "x", ":", "1", "/", "x", ",", "self", ".", "weighted_sample", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.vsrbase.VSRBase._set_directory": [[92, 94], ["None"], "methods", ["None"], ["", "def", "_set_directory", "(", "self", ",", "data_root", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.vsrbase.VSRBase._scan": [[95, 105], ["os.path.join", "os.listdir", "os.path.join", "sorted", "glob.glob", "os.path.join"], "methods", ["None"], ["", "def", "_scan", "(", "self", ")", ":", "\n", "        ", "dir_path", "=", "path", ".", "join", "(", "self", ".", "apath", ",", "self", ".", "split", ")", "if", "not", "self", ".", "benchmark", "else", "self", ".", "apath", "\n", "dir_hr", "=", "path", ".", "join", "(", "dir_path", ",", "'HR'", ")", "\n", "list_hr_seq", "=", "os", ".", "listdir", "(", "dir_hr", ")", "\n", "dict_hr", "=", "{", "\n", "k", ":", "sorted", "(", "\n", "glob", ".", "glob", "(", "path", ".", "join", "(", "dir_hr", ",", "k", ",", "'*'", "+", "self", ".", "ext", ")", ")", "\n", ")", "for", "k", "in", "list_hr_seq", "\n", "}", "\n", "return", "dict_hr", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.vsrbase.VSRBase.find_set": [[107, 134], ["sum", "sum", "enumerate", "enumerate"], "methods", ["None"], ["", "def", "find_set", "(", "self", ",", "idx", ")", ":", "\n", "        ", "for", "k", "in", "self", ".", "keys", ":", "\n", "# length of possible subsequences for each stride per each video", "\n", "            ", "len_list", "=", "[", "sum", "(", "b", ")", "for", "b", "in", "self", ".", "len_dict", "[", "k", "]", "]", "\n", "set_length", "=", "sum", "(", "len_list", ")", "\n", "if", "idx", "<", "set_length", ":", "\n", "                ", "set_key", "=", "k", "\n", "for", "str_idx", ",", "offset_list", "in", "enumerate", "(", "self", ".", "len_dict", "[", "k", "]", ")", ":", "\n", "                    ", "if", "idx", "<", "len_list", "[", "str_idx", "]", ":", "\n", "                        ", "sample_length", "=", "self", ".", "sample_length", "[", "str_idx", "]", "\n", "for", "len_idx", ",", "length", "in", "enumerate", "(", "offset_list", ")", ":", "\n", "                            ", "if", "idx", "<", "length", ":", "\n", "                                ", "if", "self", ".", "stride", "[", "str_idx", "]", ">", "0", ":", "\n", "                                    ", "seq_idx", "=", "len_idx", "+", "idx", "*", "sample_length", "\n", "", "else", ":", "\n", "                                    ", "seq_idx", "=", "len_idx", "+", "idx", "*", "sample_length", "+", "sample_length", "-", "1", "\n", "", "break", "\n", "", "else", ":", "\n", "                                ", "idx", "-=", "length", "\n", "", "", "break", "\n", "", "else", ":", "\n", "                        ", "idx", "-=", "len_list", "[", "str_idx", "]", "\n", "", "", "break", "\n", "", "else", ":", "\n", "                ", "idx", "-=", "set_length", "\n", "\n", "", "", "return", "set_key", ",", "str_idx", ",", "seq_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.vsrbase.VSRBase.__getitem__": [[135, 204], ["vsrbase.VSRBase.find_set", "numpy.stack", "torch.estimator.preprocessing.np2tensor", "torch.estimator.preprocessing.common_crop", "torch.estimator.preprocessing.set_kernel_params", "torch.Tensor.append", "torch.Tensor.append", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "random.random", "torch.random_kernel_generator.Degradation", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "os.path.join", "fn_read", "data.random_kernel_generator.Degradation.apply", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.estimator.preprocessing.crop", "torch.estimator.preprocessing.augment", "ValueError", "os.path.basename", "data.random_kernel_generator.Degradation.apply"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.vsrbase.VSRBase.find_set", "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.np2tensor", "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.common_crop", "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.set_kernel_params", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.old_kernel_generator.Degradation.apply", "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.crop", "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.augment", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.old_kernel_generator.Degradation.apply"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "# Randomly choose a sequence in a video", "\n", "# key = self.keys[idx]", "\n", "# str_idx, seq_idx = self.find_set(key)", "\n", "\n", "        ", "key", ",", "str_idx", ",", "seq_idx", "=", "self", ".", "find_set", "(", "idx", ")", "\n", "set_hr", "=", "self", ".", "dict_hr", "[", "key", "]", "\n", "\n", "if", "self", ".", "stride", "[", "str_idx", "]", ">", "0", ":", "\n", "            ", "seq_end", "=", "seq_idx", "+", "self", ".", "sample_length", "[", "str_idx", "]", "\n", "", "else", ":", "\n", "            ", "seq_end", "=", "seq_idx", "-", "self", ".", "sample_length", "[", "str_idx", "]", "\n", "\n", "", "if", "seq_end", ">=", "0", ":", "\n", "            ", "name_hr", "=", "set_hr", "[", "seq_idx", ":", "seq_end", ":", "self", ".", "stride", "[", "str_idx", "]", "]", "\n", "", "else", ":", "\n", "            ", "name_hr", "=", "set_hr", "[", "seq_idx", ":", ":", "self", ".", "stride", "[", "str_idx", "]", "]", "\n", "\n", "", "if", "self", ".", "img_type", "==", "'img'", ":", "\n", "            ", "fn_read", "=", "imageio", ".", "imread", "\n", "", "elif", "self", ".", "img_type", "==", "'bin'", ":", "\n", "            ", "fn_read", "=", "np", ".", "load", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Wrong img type: {}'", ".", "format", "(", "self", ".", "img_type", ")", ")", "\n", "\n", "", "name", "=", "[", "path", ".", "join", "(", "key", ",", "path", ".", "basename", "(", "f", ")", ")", "for", "f", "in", "name_hr", "]", "\n", "seq_hr", "=", "[", "fn_read", "(", "f", ")", "for", "f", "in", "name_hr", "]", "\n", "seq_hr", "=", "np", ".", "stack", "(", "seq_hr", ",", "axis", "=", "-", "1", ")", "\n", "# if self.train:", "\n", "# sinc patch_size is decided in seq_LR scale, we have to make it twice larger", "\n", "seq_hr", "=", "preprocessing", ".", "np_common_crop", "(", "seq_hr", ",", "patch_size", "=", "self", ".", "opt", "[", "'datasets'", "]", "[", "'train'", "]", "[", "'patch_size'", "]", "*", "2", ")", "\n", "seq_hr", "=", "preprocessing", ".", "np2tensor", "(", "seq_hr", ")", "\n", "\n", "# include random noise for each frame", "\n", "'''\n        kernel_set = []\n        for i in range(5):\n            kwargs = preprocessing.set_kernel_params()\n            kernel_set.append(rkg.Degradation(self.opt['datasets']['train']['kernel_size'], self.scale, **kwargs).kernel)\n        kernel_set = np.stack(kernel_set, axis=0)\n        \n        kernel_temp = rkg.Degradation(self.opt['datasets']['train']['kernel_size'], self.scale)\n        kernel_temp.set_kernel_directly(kernel_set)\n\n        seq_lr = kernel_temp.apply(seq_hr)\n        seq_lr = seq_lr.mul(255).clamp(0, 255).round().div(255)\n        kernel_temp.set_kernel_directly(kernel_set[2])\n        seq_superlr = kernel_temp.apply(seq_lr)\n        '''", "\n", "kwargs", "=", "preprocessing", ".", "set_kernel_params", "(", ")", "\n", "kernel_gen", "=", "rkg", ".", "Degradation", "(", "self", ".", "opt_data", "[", "'train'", "]", "[", "'kernel_size'", "]", ",", "self", ".", "scale", ",", "**", "kwargs", ")", "\n", "\n", "seq_lr", "=", "kernel_gen", ".", "apply", "(", "seq_hr", ")", "\n", "seq_lr", "=", "seq_lr", ".", "mul", "(", "255", ")", ".", "clamp", "(", "0", ",", "255", ")", ".", "round", "(", ")", ".", "div", "(", "255", ")", "\n", "seq_superlr", "=", "kernel_gen", ".", "apply", "(", "seq_lr", ")", "\n", "if", "self", ".", "train", ":", "\n", "# seq_hr, seq_lr, seq_superlr = preprocessing.crop(seq_hr, seq_lr, seq_superlr, patch_size=self.opt['datasets']['train']['patch_size'])", "\n", "            ", "seq_hr", ",", "seq_lr", ",", "seq_superlr", "=", "preprocessing", ".", "augment", "(", "seq_hr", ",", "seq_lr", ",", "seq_superlr", ")", "\n", "\n", "", "return", "{", "'SuperLQs'", ":", "seq_superlr", ",", "\n", "'LQs'", ":", "seq_lr", ",", "\n", "'GT'", ":", "seq_hr", ",", "\n", "#'Kernel': kernel_gen.kernel,", "\n", "}", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_samples", "\n", "", "", ""]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.vsrbase.VSRBase.__len__": [[205, 207], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.video_test_dataset.VideoTestDataset.__init__": [[21, 78], ["torch.Dataset.__init__", "ValueError", "video_test_dataset.VideoTestDataset.name.lower", "opt[].split", "video_test_dataset.VideoTestDataset.name.lower", "torch.Backup.util.glob_file_list", "os.basename", "torch.Backup.util.glob_file_list", "len", "video_test_dataset.VideoTestDataset.data_info[].extend", "video_test_dataset.VideoTestDataset.data_info[].extend", "range", "range", "video_test_dataset.VideoTestDataset.data_info[].extend", "opt[].lower", "ValueError", "opt[].split", "opt[].split", "video_test_dataset.VideoTestDataset.name.lower", "torch.Backup.util.glob_file_list", "torch.Backup.util.glob_file_list", "video_test_dataset.VideoTestDataset.data_info[].append", "torch.Backup.util.read_img_seq", "k.find", "k.find", "k.find", "k.find"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.glob_file_list", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.glob_file_list", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.glob_file_list", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.glob_file_list", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.read_img_seq"], ["def", "__init__", "(", "self", ",", "opt", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "VideoTestDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale", "=", "kwargs", "[", "'scale'", "]", "\n", "self", ".", "kernel_size", "=", "kwargs", "[", "'kernel_size'", "]", "\n", "self", ".", "model_name", "=", "kwargs", "[", "'model_name'", "]", "\n", "idx", "=", "kwargs", "[", "'idx'", "]", "if", "'idx'", "in", "kwargs", "else", "None", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "cache_data", "=", "opt", "[", "'cache_data'", "]", "\n", "self", ".", "half_N_frames", "=", "opt", "[", "'N_frames'", "]", "//", "2", "\n", "if", "idx", "is", "None", ":", "\n", "            ", "self", ".", "name", "=", "opt", "[", "'name'", "]", "\n", "self", ".", "GT_root", ",", "self", ".", "LQ_root", "=", "opt", "[", "'dataroot_GT'", "]", ",", "opt", "[", "'dataroot_LQ'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "name", "=", "opt", "[", "'name'", "]", ".", "split", "(", "'+'", ")", "[", "idx", "]", "\n", "self", ".", "GT_root", ",", "self", ".", "LQ_root", "=", "opt", "[", "'dataroot_GT'", "]", ".", "split", "(", "'+'", ")", "[", "idx", "]", ",", "opt", "[", "'dataroot_LQ'", "]", ".", "split", "(", "'+'", ")", "[", "idx", "]", "\n", "\n", "", "self", ".", "data_type", "=", "self", ".", "opt", "[", "'data_type'", "]", "\n", "self", ".", "data_info", "=", "{", "'path_LQ'", ":", "[", "]", ",", "'path_GT'", ":", "[", "]", ",", "'folder'", ":", "[", "]", ",", "'idx'", ":", "[", "]", ",", "'border'", ":", "[", "]", "}", "\n", "if", "self", ".", "data_type", "==", "'lmdb'", ":", "\n", "            ", "raise", "ValueError", "(", "'No need to use LMDB during validation/test.'", ")", "\n", "#### Generate data info and cache data", "\n", "", "self", ".", "imgs_LQ", ",", "self", ".", "imgs_GT", "=", "{", "}", ",", "{", "}", "\n", "if", "self", ".", "name", ".", "lower", "(", ")", "in", "[", "'vid4'", ",", "'reds'", ",", "'mm522'", "]", ":", "\n", "            ", "if", "self", ".", "name", ".", "lower", "(", ")", "==", "'vid4'", ":", "\n", "                ", "img_type", "=", "'img'", "\n", "subfolders_GT", "=", "util", ".", "glob_file_list", "(", "self", ".", "GT_root", ")", "\n", "", "elif", "self", ".", "name", ".", "lower", "(", ")", "==", "'reds'", ":", "\n", "                ", "img_type", "=", "'img'", "\n", "list_hr_seq", "=", "util", ".", "glob_file_list", "(", "self", ".", "GT_root", ")", "\n", "subfolders_GT", "=", "[", "k", "for", "k", "in", "list_hr_seq", "if", "\n", "k", ".", "find", "(", "'000'", ")", ">=", "0", "or", "k", ".", "find", "(", "'011'", ")", ">=", "0", "or", "k", ".", "find", "(", "'015'", ")", ">=", "0", "or", "k", ".", "find", "(", "'020'", ")", ">=", "0", "]", "\n", "", "else", ":", "\n", "                ", "img_type", "=", "'img'", "\n", "subfolders_GT", "=", "util", ".", "glob_file_list", "(", "self", ".", "GT_root", ")", "\n", "\n", "", "for", "subfolder_GT", "in", "subfolders_GT", ":", "\n", "                ", "subfolder_name", "=", "osp", ".", "basename", "(", "subfolder_GT", ")", "\n", "img_paths_GT", "=", "util", ".", "glob_file_list", "(", "subfolder_GT", ")", "\n", "max_idx", "=", "len", "(", "img_paths_GT", ")", "\n", "\n", "self", ".", "data_info", "[", "'path_GT'", "]", ".", "extend", "(", "img_paths_GT", ")", "\n", "self", ".", "data_info", "[", "'folder'", "]", ".", "extend", "(", "[", "subfolder_name", "]", "*", "max_idx", ")", "\n", "for", "i", "in", "range", "(", "max_idx", ")", ":", "\n", "                    ", "self", ".", "data_info", "[", "'idx'", "]", ".", "append", "(", "'{}/{}'", ".", "format", "(", "i", ",", "max_idx", ")", ")", "\n", "", "border_l", "=", "[", "0", "]", "*", "max_idx", "\n", "for", "i", "in", "range", "(", "self", ".", "half_N_frames", ")", ":", "\n", "                    ", "border_l", "[", "i", "]", "=", "1", "\n", "border_l", "[", "max_idx", "-", "i", "-", "1", "]", "=", "1", "\n", "", "self", ".", "data_info", "[", "'border'", "]", ".", "extend", "(", "border_l", ")", "\n", "\n", "if", "self", ".", "cache_data", ":", "\n", "                    ", "self", ".", "imgs_GT", "[", "subfolder_name", "]", "=", "util", ".", "read_img_seq", "(", "img_paths_GT", ",", "img_type", ")", "\n", "", "", "", "elif", "opt", "[", "'name'", "]", ".", "lower", "(", ")", "in", "[", "'vimeo90k-test'", "]", ":", "\n", "            ", "pass", "# TODO", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Not support video test dataset. Support Vid4, REDS4 and Vimeo90k-Test.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.video_test_dataset.VideoTestDataset.__getitem__": [[79, 119], ["[].split", "torch.Backup.util.index_generation", "video_test_dataset.VideoTestDataset.imgs_GT[].index_select", "torch.random_kernel_generator.Degradation", "data.random_kernel_generator.Degradation.apply", "data.random_kernel_generator.Degradation.apply", "int", "int", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.index_generation", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.old_kernel_generator.Degradation.apply", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.old_kernel_generator.Degradation.apply"], ["# Generate kernel", "\n", "\n", "", "if", "opt", "[", "'degradation_mode'", "]", "==", "'set'", ":", "\n", "            ", "sigma_x", "=", "float", "(", "opt", "[", "'sigma_x'", "]", ")", "\n", "sigma_y", "=", "float", "(", "opt", "[", "'sigma_y'", "]", ")", "\n", "theta", "=", "float", "(", "opt", "[", "'theta'", "]", ")", "\n", "gen_kwargs", "=", "preprocessing", ".", "set_kernel_params", "(", "sigma_x", "=", "sigma_x", ",", "sigma_y", "=", "sigma_y", ",", "theta", "=", "theta", ")", "\n", "self", ".", "kernel_gen", "=", "rkg", ".", "Degradation", "(", "self", ".", "kernel_size", ",", "self", ".", "scale", ",", "**", "gen_kwargs", ")", "\n", "self", ".", "gen_kwargs_l", "=", "[", "gen_kwargs", "[", "'sigma'", "]", "[", "0", "]", ",", "gen_kwargs", "[", "'sigma'", "]", "[", "1", "]", ",", "gen_kwargs", "[", "'theta'", "]", "]", "\n", "\n", "", "elif", "opt", "[", "'degradation_mode'", "]", "==", "'preset'", ":", "\n", "            ", "self", ".", "kernel_gen", "=", "rkg", ".", "Degradation", "(", "self", ".", "kernel_size", ",", "self", ".", "scale", ")", "\n", "if", "self", ".", "name", ".", "lower", "(", ")", "==", "'vid4'", ":", "\n", "                ", "self", ".", "kernel_dict", "=", "np", ".", "load", "(", "'../experiments/pretrained_models/Vid4Gauss.npy'", ")", "\n", "", "elif", "self", ".", "name", ".", "lower", "(", ")", "==", "'reds'", ":", "\n", "                ", "self", ".", "kernel_dict", "=", "np", ".", "load", "(", "'../experiments/pretrained_models/REDSGauss.npy'", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "folder", "=", "self", ".", "data_info", "[", "'folder'", "]", "[", "index", "]", "\n", "idx", ",", "max_idx", "=", "self", ".", "data_info", "[", "'idx'", "]", "[", "index", "]", ".", "split", "(", "'/'", ")", "\n", "idx", ",", "max_idx", "=", "int", "(", "idx", ")", ",", "int", "(", "max_idx", ")", "\n", "border", "=", "self", ".", "data_info", "[", "'border'", "]", "[", "index", "]", "\n", "\n", "select_idx", "=", "util", ".", "index_generation", "(", "idx", ",", "max_idx", ",", "self", ".", "opt", "[", "'N_frames'", "]", ",", "\n", "padding", "=", "self", ".", "opt", "[", "'padding'", "]", ")", "\n", "imgs_GT", "=", "self", ".", "imgs_GT", "[", "folder", "]", ".", "index_select", "(", "0", ",", "torch", ".", "LongTensor", "(", "select_idx", ")", ")", "\n", "\n", "if", "self", ".", "opt", "[", "'degradation_mode'", "]", "==", "'set'", ":", "\n", "            ", "'''\n            for i in range(imgs_GT.shape[0]):\n                imgs_LR_slice = self.kernel_gen.apply(imgs_GT[i])\n                imgs_LR.append(imgs_LR_slice)\n                imgs_SuperLR.append(self.kernel_gen.apply(imgs_LR_slice))\n\n            imgs_LR = torch.stack(imgs_LR, dim=0)\n            imgs_SuperLR = torch.stack(imgs_SuperLR, dim=0)\n            '''", "\n", "imgs_LR", "=", "self", ".", "kernel_gen", ".", "apply", "(", "imgs_GT", ")", "\n", "imgs_LR", "=", "imgs_LR", ".", "mul", "(", "255", ")", ".", "clamp", "(", "0", ",", "255", ")", ".", "round", "(", ")", ".", "div", "(", "255", ")", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.video_test_dataset.VideoTestDataset.__len__": [[121, 123], ["len"], "methods", ["None"], ["\n", "", "elif", "self", ".", "opt", "[", "'degradation_mode'", "]", "==", "'preset'", ":", "\n", "            ", "my_kernel", "=", "self", ".", "kernel_dict", "[", "index", "]", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.vimeo.Vimeo.__init__": [[20, 35], ["torch.Dataset.__init__", "os.path.join", "os.path.join", "os.path.join", "open", "sorted", "f.read().splitlines", "f.read"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__"], ["def", "__init__", "(", "self", ",", "opt", ",", "train", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data_root", "=", "opt", "[", "'datasets'", "]", "[", "'train'", "]", "[", "'data_root'", "]", "\n", "self", ".", "data_root", "=", "path", ".", "join", "(", "self", ".", "data_root", ",", "'vimeo_septuplet'", ")", "\n", "if", "train", ":", "\n", "            ", "meta", "=", "path", ".", "join", "(", "self", ".", "data_root", ",", "'sep_trainlist.txt'", ")", "\n", "", "else", ":", "\n", "            ", "meta", "=", "path", ".", "join", "(", "self", ".", "data_root", ",", "'sep_testlist.txt'", ")", "\n", "\n", "", "with", "open", "(", "meta", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "self", ".", "img_list", "=", "sorted", "(", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", ")", "\n", "", "self", ".", "opt", "=", "opt", "\n", "self", ".", "scale", "=", "opt", "[", "'scale'", "]", "\n", "self", ".", "nframes", "=", "opt", "[", "'datasets'", "]", "[", "'train'", "]", "[", "'N_frames'", "]", "\n", "self", ".", "train", "=", "train", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.vimeo.Vimeo.__getitem__": [[36, 80], ["os.path.join", "sorted", "numpy.stack", "random.randint", "torch.estimator.preprocessing.np2tensor", "torch.estimator.preprocessing.crop_border", "torch.estimator.preprocessing.set_kernel_params", "torch.Tensor.append", "torch.Tensor.append", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "random.random", "torch.random_kernel_generator.Degradation", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "glob.glob", "os.path.join", "imageio.imread", "data.random_kernel_generator.Degradation.apply", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.estimator.preprocessing.crop", "torch.estimator.preprocessing.augment", "os.path.join", "os.path.splitext", "data.random_kernel_generator.Degradation.apply", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.np2tensor", "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.crop_border", "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.set_kernel_params", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.old_kernel_generator.Degradation.apply", "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.crop", "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.augment", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.old_kernel_generator.Degradation.apply"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "name_hr", "=", "path", ".", "join", "(", "self", ".", "data_root", ",", "'sequences'", ",", "self", ".", "img_list", "[", "idx", "]", ")", "\n", "names_hr", "=", "sorted", "(", "glob", ".", "glob", "(", "path", ".", "join", "(", "name_hr", ",", "'*.png'", ")", ")", ")", "\n", "names", "=", "[", "path", ".", "splitext", "(", "path", ".", "basename", "(", "f", ")", ")", "[", "0", "]", "for", "f", "in", "names_hr", "]", "\n", "names", "=", "[", "path", ".", "join", "(", "self", ".", "img_list", "[", "idx", "]", ",", "name", ")", "for", "name", "in", "names", "]", "\n", "\n", "seq_hr", "=", "[", "imageio", ".", "imread", "(", "f", ")", "for", "f", "in", "names_hr", "]", "\n", "seq_hr", "=", "np", ".", "stack", "(", "seq_hr", ",", "axis", "=", "-", "1", ")", "\n", "start_frame", "=", "random", ".", "randint", "(", "0", ",", "7", "-", "self", ".", "nframes", ")", "\n", "seq_hr", "=", "seq_hr", "[", "...", ",", "start_frame", ":", "start_frame", "+", "self", ".", "nframes", "]", "\n", "seq_hr", "=", "preprocessing", ".", "np2tensor", "(", "seq_hr", ")", "\n", "\n", "# seq_hr = preprocessing.crop_border(seq_hr, border=[4, 4])", "\n", "# To make time efficient crop by seq_hr and make it downsample to seq_lr", "\n", "# if self.train:", "\n", "# sinc patch_size is decided in seq_LR scale, we have to make it twice larger", "\n", "# seq_hr = preprocessing.common_crop(img=seq_hr, patch_size=self.opt['datasets']['train']['patch_size']*2)", "\n", "\n", "# include random noise for each frame", "\n", "'''\n        kernel_set = []\n        for i in range(5):\n            kwargs = preprocessing.set_kernel_params()\n            kernel_set.append(rkg.Degradation(self.opt['datasets']['train']['kernel_size'], self.scale, **kwargs).kernel)\n        kernel_set = np.stack(kernel_set, axis=0)\n        \n        kernel_temp = rkg.Degradation(self.opt['datasets']['train']['kernel_size'], self.scale)\n        kernel_temp.set_kernel_directly(kernel_set)\n\n        seq_lr = kernel_temp.apply(seq_hr)\n        seq_lr = seq_lr.mul(255).clamp(0, 255).round().div(255)\n        kernel_temp.set_kernel_directly(kernel_set[2])\n        seq_superlr = kernel_temp.apply(seq_lr)\n        '''", "\n", "kwargs", "=", "preprocessing", ".", "set_kernel_params", "(", ")", "\n", "kernel_gen", "=", "rkg", ".", "Degradation", "(", "self", ".", "opt", "[", "'datasets'", "]", "[", "'train'", "]", "[", "'kernel_size'", "]", ",", "self", ".", "scale", ",", "**", "kwargs", ")", "\n", "\n", "seq_lr", "=", "kernel_gen", ".", "apply", "(", "seq_hr", ")", "\n", "seq_lr", "=", "seq_lr", ".", "mul", "(", "255", ")", ".", "clamp", "(", "0", ",", "255", ")", ".", "round", "(", ")", ".", "div", "(", "255", ")", "\n", "seq_superlr", "=", "kernel_gen", ".", "apply", "(", "seq_lr", ")", "\n", "\n", "if", "self", ".", "train", ":", "\n", "# seq_hr, seq_lr, seq_superlr = preprocessing.crop(seq_hr, seq_lr, seq_superlr, patch_size=self.opt['datasets']['train']['patch_size'])", "\n", "            ", "seq_hr", ",", "seq_lr", ",", "seq_superlr", "=", "preprocessing", ".", "augment", "(", "seq_hr", ",", "seq_lr", ",", "seq_superlr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.vimeo.Vimeo.__len__": [[81, 83], ["len"], "methods", ["None"], ["", "return", "{", "'SuperLQs'", ":", "seq_superlr", ",", "\n", "'LQs'", ":", "seq_lr", ",", "\n", "'GT'", ":", "seq_hr", ",", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.Transformer.__init__": [[235, 237], ["None"], "methods", ["None"], ["", "", "return", "x", "\n", "\n", "", "return", "_apply_all", "(", "_augment", ",", "args", ")", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.Transformer.__call__": [[238, 246], ["transform"], "methods", ["None"], ["\n", "", "def", "np2tensor", "(", "*", "args", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.Transformer.register": [[247, 249], ["None"], "methods", ["None"], ["\n", "def", "_np2tensor", "(", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing._apply_all": [[10, 38], ["isinstance", "func", "len", "func", "preprocessing._apply_all"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing._apply_all"], ["    ", "'''\n    Recursively apply the function to the input.\n\n    Args:\n        func (function): A function to be applied to the input.\n        x (object or a list of objects): The input object(s).\n\n    Return:\n        func(x): See the below examples.\n\n    Example::\n        >>> _apply_all(f, x)\n        >>> f(x)\n\n        >>> _apply_all(f, [x1, x2])\n        >>> [f(x1), f(x2)]\n\n        >>> _apply_all(f, [x1, x2, [x3, x4]])\n        >>> [f(x1), f(x2), [f(x3), f(x4)]]\n    '''", "\n", "if", "isinstance", "(", "x", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "if", "len", "(", "x", ")", "==", "1", ":", "\n", "            ", "return", "func", "(", "x", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "[", "_apply_all", "(", "func", ",", "_x", ")", "for", "_x", "in", "x", "]", "\n", "", "", "else", ":", "\n", "        ", "return", "func", "(", "x", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.set_kernel_params": [[40, 49], ["numpy.random.random_sample", "numpy.random.random_sample", "numpy.random.random_sample"], "function", ["None"], ["    ", "min_sigma", "=", "0.2", "\n", "var_sigma", "=", "4.8", "\n", "if", "sigma_x", "is", "None", ":", "\n", "        ", "sigma_x", "=", "min_sigma", "+", "np", ".", "random", ".", "random_sample", "(", ")", "*", "var_sigma", "\n", "", "if", "sigma_y", "is", "None", ":", "\n", "        ", "sigma_y", "=", "min_sigma", "+", "np", ".", "random", ".", "random_sample", "(", ")", "*", "var_sigma", "\n", "", "if", "theta", "is", "None", ":", "\n", "        ", "theta", "=", "-", "math", ".", "pi", "+", "np", ".", "random", ".", "random_sample", "(", ")", "*", "2", "*", "math", ".", "pi", "\n", "\n", "", "return", "{", "'theta'", ":", "theta", ",", "'sigma'", ":", "[", "sigma_x", ",", "sigma_y", "]", "}", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.eval_crop": [[50, 55], ["None"], "function", ["None"], ["\n", "", "def", "eval_crop", "(", "hr", ",", "lr", ",", "scale", ")", ":", "\n", "    ", "h", ",", "w", "=", "lr", ".", "shape", "[", "0", ":", "2", "]", "\n", "h", "*=", "scale", "\n", "w", "*=", "scale", "\n", "return", "hr", "[", ":", "h", ",", ":", "w", "]", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.common_crop": [[56, 85], ["min", "min", "random.randrange", "random.randrange", "preprocessing._apply_all", "int"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing._apply_all"], ["\n", "", "def", "common_crop", "(", "*", "args", ",", "patch_size", "=", "96", ")", ":", "\n", "    ", "'''\n    Crop given patches.\n\n    Args:\n        args (list of 'torch.Tensor' or 'list of torch.Tensor'):\n            Images or lists of images to be cropped.\n            Cropping position is fixed for all images in the single *args.\n\n        patch_size (int, optional):\n        scale (int, optional):\n\n    Return:\n\n    '''", "\n", "# Find the lowest resolution", "\n", "min_h", "=", "min", "(", "x", ".", "shape", "[", "-", "2", "]", "for", "x", "in", "args", ")", "\n", "min_w", "=", "min", "(", "x", ".", "shape", "[", "-", "1", "]", "for", "x", "in", "args", ")", "\n", "\n", "py", "=", "random", ".", "randrange", "(", "0", ",", "min_h", "-", "patch_size", "+", "1", ")", "\n", "px", "=", "random", ".", "randrange", "(", "0", ",", "min_w", "-", "patch_size", "+", "1", ")", "\n", "\n", "def", "_crop", "(", "x", ")", ":", "\n", "        ", "h", "=", "x", ".", "shape", "[", "-", "2", "]", "\n", "s", "=", "int", "(", "h", "//", "min_h", ")", "\n", "x", "=", "x", "[", "...", ",", "s", "*", "py", ":", "s", "*", "(", "py", "+", "patch_size", ")", ",", "s", "*", "px", ":", "s", "*", "(", "px", "+", "patch_size", ")", "]", "\n", "return", "x", "\n", "\n", "", "return", "_apply_all", "(", "_crop", ",", "args", ")", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.get_min_in_axis": [[86, 97], ["numpy.zeros_like", "range", "numpy.amin", "range", "numpy.amin", "data.index_generation", "data.index_generation"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.index_generation", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.index_generation"], ["\n", "", "def", "np_common_crop", "(", "*", "args", ",", "patch_size", "=", "96", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.crop": [[98, 145], ["img.mul().sum", "pywt.dwt2", "preprocessing.get_min_in_axis", "preprocessing.get_min_in_axis", "numpy.mean", "numpy.mean", "range", "numpy.abs", "numpy.abs", "random.randrange", "random.randrange", "img.mul", "numpy.mean", "numpy.mean", "img.new_tensor"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.get_min_in_axis", "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.get_min_in_axis"], ["\n", "# Find the lowest resolution", "\n", "min_h", "=", "min", "(", "x", ".", "shape", "[", "0", "]", "for", "x", "in", "args", ")", "\n", "min_w", "=", "min", "(", "x", ".", "shape", "[", "0", "]", "for", "x", "in", "args", ")", "\n", "\n", "py", "=", "random", ".", "randrange", "(", "0", ",", "min_h", "-", "patch_size", "+", "1", ")", "\n", "px", "=", "random", ".", "randrange", "(", "0", ",", "min_w", "-", "patch_size", "+", "1", ")", "\n", "\n", "def", "_crop", "(", "x", ")", ":", "\n", "        ", "h", "=", "x", ".", "shape", "[", "0", "]", "\n", "s", "=", "int", "(", "h", "//", "min_h", ")", "\n", "x", "=", "x", "[", "s", "*", "py", ":", "s", "*", "(", "py", "+", "patch_size", ")", ",", "s", "*", "px", ":", "s", "*", "(", "px", "+", "patch_size", ")", ",", "...", "]", "\n", "return", "x", "\n", "\n", "", "return", "_apply_all", "(", "_crop", ",", "args", ")", "\n", "\n", "", "def", "get_min_in_axis", "(", "img", ",", "s_length", ",", "direction", "=", "'horizontal'", ")", ":", "\n", "# img: H W T", "\n", "    ", "smooth_img", "=", "np", ".", "zeros_like", "(", "img", ")", "\n", "h", ",", "w", "=", "img", ".", "shape", "[", "-", "2", "]", ",", "img", ".", "shape", "[", "-", "1", "]", "\n", "if", "direction", "==", "'horizontal'", ":", "\n", "        ", "for", "i", "in", "range", "(", "w", ")", ":", "\n", "            ", "smooth_img", "[", ":", ",", ":", ",", "i", "]", "=", "np", ".", "amin", "(", "img", "[", ":", ",", ":", ",", "data_util", ".", "index_generation", "(", "i", ",", "w", ",", "s_length", ",", "'replicate'", ")", "]", ",", "axis", "=", "2", ")", "\n", "", "", "elif", "direction", "==", "'vertical'", ":", "\n", "        ", "for", "i", "in", "range", "(", "h", ")", ":", "\n", "            ", "smooth_img", "[", ":", ",", "i", ",", ":", "]", "=", "np", ".", "amin", "(", "img", "[", ":", ",", "data_util", ".", "index_generation", "(", "i", ",", "h", ",", "s_length", ",", "'replicate'", ")", ",", ":", "]", ",", "axis", "=", "1", ")", "\n", "", "", "return", "smooth_img", "\n", "\n", "", "def", "crop", "(", "img_gt", ",", "img", ",", "img_lr", ",", "scale", "=", "2", ",", "patch_size", "=", "96", ")", ":", "\n", "    ", "'''\n    Crop given patches.\n\n    Args:\n        args (list of 'np.array' or 'list of np.array'):\n            Images or lists of images to be cropped.\n            Cropping position is fixed for all images in the single *args.\n\n        patch_size (int, optional):\n        scale (int, optional):\n\n    Return:\n\n    '''", "\n", "import", "pywt", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.crop_border": [[145, 173], ["min", "min", "isinstance", "preprocessing._apply_all", "int"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing._apply_all"], ["\n", "# Find the lowest resolution", "\n", "h", ",", "w", "=", "img", ".", "shape", "[", "-", "2", "]", "//", "2", ",", "img", ".", "shape", "[", "-", "1", "]", "//", "2", "\n", "# T C H W  --> H W T", "\n", "convert", "=", "(", "img", ".", "new_tensor", "(", "[", "65.481", ",", "128.553", ",", "24.966", "]", ")", "/", "255.0", "+", "16.0", ")", ".", "reshape", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "img_y", "=", "img", ".", "mul", "(", "convert", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "_", ",", "(", "ch", ",", "cv", ",", "_", ")", "=", "pywt", ".", "dwt2", "(", "img_y", ",", "'haar'", ")", "\n", "# ch, cv become numpy array", "\n", "ch", ",", "cv", "=", "np", ".", "abs", "(", "ch", ")", ",", "np", ".", "abs", "(", "cv", ")", "\n", "\n", "ch_minned", "=", "get_min_in_axis", "(", "ch", ",", "9", ",", "'horizontal'", ")", "\n", "cv_minned", "=", "get_min_in_axis", "(", "cv", ",", "9", ",", "'vertical'", ")", "\n", "mean_ch", "=", "np", ".", "mean", "(", "ch_minned", ",", "axis", "=", "(", "1", ",", "2", ")", ")", "# T", "\n", "mean_cv", "=", "np", ".", "mean", "(", "cv_minned", ",", "axis", "=", "(", "1", ",", "2", ")", ")", "# T", "\n", "for", "i", "in", "range", "(", "50", ")", ":", "\n", "        ", "py", "=", "random", ".", "randrange", "(", "0", ",", "h", "-", "patch_size", "//", "2", "+", "1", ")", "\n", "px", "=", "random", ".", "randrange", "(", "0", ",", "w", "-", "patch_size", "//", "2", "+", "1", ")", "\n", "ch_patch", "=", "ch_minned", "[", "...", ",", "py", ":", "py", "+", "(", "patch_size", "//", "2", ")", ",", "px", ":", "px", "+", "(", "patch_size", "//", "2", ")", "]", "\n", "cv_patch", "=", "cv_minned", "[", "...", ",", "py", ":", "py", "+", "(", "patch_size", "//", "2", ")", ",", "px", ":", "px", "+", "(", "patch_size", "//", "2", ")", "]", "\n", "mean_ch_patch", ",", "mean_cv_patch", "=", "np", ".", "mean", "(", "ch_patch", ",", "axis", "=", "(", "1", ",", "2", ")", ")", ",", "np", ".", "mean", "(", "cv_patch", ",", "axis", "=", "(", "1", ",", "2", ")", ")", "\n", "if", "(", "mean_ch_patch", ">=", "mean_ch", ")", ".", "all", "(", ")", "and", "(", "mean_cv_patch", ">=", "mean_cv", ")", ".", "all", "(", ")", ":", "\n", "            ", "break", "\n", "\n", "", "", "patch", "=", "img", "[", "...", ",", "py", "*", "2", ":", "py", "*", "2", "+", "patch_size", ",", "px", "*", "2", ":", "px", "*", "2", "+", "patch_size", "]", "\n", "if", "img_gt", "is", "not", "None", ":", "\n", "        ", "patch_gt", "=", "img_gt", "[", "...", ",", "py", "*", "2", "*", "scale", ":", "(", "py", "*", "2", "+", "patch_size", ")", "*", "scale", ",", "px", "*", "2", "*", "scale", ":", "(", "px", "*", "2", "+", "patch_size", ")", "*", "scale", "]", "\n", "", "else", ":", "\n", "        ", "patch_gt", "=", "None", "\n", "", "if", "img_lr", "is", "not", "None", ":", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.augment": [[174, 203], ["preprocessing._apply_all", "random.random", "random.random", "random.random", "torch.from_numpy", "torch.from_numpy", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "x.permute.permute", "x.permute.permute", "x.permute.permute", "x.permute.numpy", "x.permute.numpy"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing._apply_all"], ["        ", "patch_superlr", "=", "img_lr", "[", "...", ",", "(", "py", "*", "2", ")", "//", "scale", ":", "(", "py", "*", "2", "+", "patch_size", ")", "//", "scale", ",", "(", "px", "*", "2", ")", "//", "scale", ":", "(", "px", "*", "2", "+", "patch_size", ")", "//", "scale", "]", "\n", "", "else", ":", "\n", "        ", "patch_superlr", "=", "None", "\n", "", "return", "patch_gt", ",", "patch", ",", "patch_superlr", "\n", "\n", "\n", "", "def", "crop_border", "(", "*", "args", ",", "border", "=", "[", "4", ",", "4", "]", ")", ":", "\n", "    ", "'''\n    Crop given patches.\n\n    Args:\n        args (list of 'np.array' or 'list of np.array'):\n            Images or lists of images to be cropped.\n            Cropping position is fixed for all images in the single *args.\n\n        border (int, optional): [h, w], crop length in height, width, respectively\n\n    Return:\n\n    '''", "\n", "# Find the lowest resolution", "\n", "min_h", "=", "min", "(", "x", ".", "shape", "[", "-", "2", "]", "for", "x", "in", "args", ")", "\n", "min_w", "=", "min", "(", "x", ".", "shape", "[", "-", "1", "]", "for", "x", "in", "args", ")", "\n", "\n", "if", "isinstance", "(", "border", ",", "(", "int", ",", "float", ")", ")", ":", "\n", "        ", "border", "=", "[", "border", ",", "border", "]", "\n", "\n", "", "def", "_crop_border", "(", "x", ")", ":", "\n", "        ", "h", "=", "x", ".", "shape", "[", "-", "2", "]", "\n", "s", "=", "int", "(", "h", "//", "min_h", ")", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.np2tensor": [[204, 228], ["preprocessing._apply_all", "numpy.ascontiguousarray", "torch.from_numpy().float", "x.transpose.transpose", "x.transpose.transpose", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing._apply_all"], ["x", "=", "x", "[", "...", ",", "s", "*", "border", "[", "0", "]", ":", "-", "s", "*", "border", "[", "0", "]", ",", "s", "*", "border", "[", "1", "]", ":", "-", "s", "*", "border", "[", "1", "]", "]", "\n", "return", "x", "\n", "\n", "", "return", "_apply_all", "(", "_crop_border", ",", "args", ")", "\n", "\n", "", "def", "augment", "(", "*", "args", ",", "hflip", "=", "True", ",", "vflip", "=", "True", ",", "rot", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n        Apply random augmentations to given patches.\n        Args:\n        Return:\n    \"\"\"", "\n", "hflip", "=", "hflip", "and", "random", ".", "random", "(", ")", "<", "0.5", "\n", "vflip", "=", "vflip", "and", "random", ".", "random", "(", ")", "<", "0.5", "\n", "rot", "=", "rot", "and", "random", ".", "random", "(", ")", "<", "0.5", "\n", "\n", "def", "_augment", "(", "x", ")", ":", "\n", "        ", "if", "hflip", ":", "\n", "            ", "x", "=", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "x", ".", "numpy", "(", ")", "[", "...", ",", ":", ",", ":", ":", "-", "1", "]", ")", ")", "\n", "", "if", "vflip", ":", "\n", "            ", "x", "=", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "x", ".", "numpy", "(", ")", "[", "...", ",", ":", ":", "-", "1", ",", ":", "]", ")", ")", "\n", "", "if", "rot", ":", "\n", "# Rotating kernel,", "\n", "            ", "if", "x", ".", "ndim", "==", "2", ":", "\n", "                ", "x", "=", "x", ".", "permute", "(", "1", ",", "0", ")", "\n", "# Single image C H W", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.mm522.MM522.__init__": [[16, 19], ["data.estimator.vsrbase.VSRBase.__init__"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__"], ["        ", "self", ".", "set", "=", "'MM522'", "\n", "super", "(", "MM522", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "def", "_set_directory", "(", "self", ",", "data_root", ")", ":", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.mm522.MM522._set_directory": [[20, 22], ["os.path.join"], "methods", ["None"], ["        ", "self", ".", "apath", "=", "path", ".", "join", "(", "data_root", ",", "'MM522'", ")", "\n", "\n", "", "def", "_scan", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.mm522.MM522._scan": [[23, 45], ["os.path.basename", "os.path.join", "sorted", "os.path.join", "sorted", "mm522.MM522._scan._make_keys"], "methods", ["None"], ["        ", "def", "_make_keys", "(", "dir_path", ")", ":", "\n", "            ", "\"\"\"\n            :param dir_path: 'frame_lr/X4/001/0001'\n            :return: 001_0001\n            \"\"\"", "\n", "return", "os", ".", "path", ".", "basename", "(", "os", ".", "path", ".", "dirname", "(", "dir_path", ")", ")", "\n", "\n", "", "if", "self", ".", "split", "==", "'train'", ":", "\n", "            ", "dir_train", "=", "path", ".", "join", "(", "self", ".", "apath", ",", "'train'", ")", "\n", "list_hr_seq", "=", "sorted", "(", "glob", ".", "glob", "(", "dir_train", "+", "'/**/*/truth'", ")", ")", "\n", "", "else", ":", "\n", "            ", "dir_train", "=", "path", ".", "join", "(", "self", ".", "apath", ",", "'val'", ")", "\n", "list_hr_seq", "=", "sorted", "(", "glob", ".", "glob", "(", "dir_train", "+", "'/**/truth'", ")", ")", "\n", "\n", "", "dict_hr", "=", "{", "\n", "_make_keys", "(", "k", ")", ":", "sorted", "(", "\n", "glob", ".", "glob", "(", "path", ".", "join", "(", "k", ",", "'*'", "+", "self", ".", "ext", ")", ")", "\n", ")", "for", "k", "in", "list_hr_seq", "\n", "}", "\n", "\n", "return", "dict_hr", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.mm522.MM522.__getitem__": [[46, 96], ["mm522.MM522.find_set", "numpy.stack", "data.estimator.preprocessing.np2tensor", "torch.Tensor.append", "torch.Tensor", "int", "data.random_kernel_generator.Degradation", "data.random_kernel_generator.Degradation.apply", "os.path.join", "fn_read", "data.estimator.preprocessing.set_kernel_params", "data.estimator.preprocessing.set_kernel_params", "data.estimator.preprocessing.crop", "ValueError", "os.path.basename", "os.path.splitext"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.vsrbase.VSRBase.find_set", "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.np2tensor", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.old_kernel_generator.Degradation.apply", "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.set_kernel_params", "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.set_kernel_params", "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.crop"], ["# Randomly choose a sequence in a video", "\n", "# key = self.keys[idx]", "\n", "# str_idx, seq_idx = self.find_set(key)", "\n", "\n", "        ", "key", ",", "str_idx", ",", "seq_idx", "=", "self", ".", "find_set", "(", "idx", ")", "\n", "set_hr", "=", "self", ".", "dict_hr", "[", "key", "]", "\n", "\n", "if", "self", ".", "stride", "[", "str_idx", "]", ">", "0", ":", "\n", "            ", "seq_end", "=", "seq_idx", "+", "self", ".", "sample_length", "[", "str_idx", "]", "\n", "", "else", ":", "\n", "            ", "seq_end", "=", "seq_idx", "-", "self", ".", "sample_length", "[", "str_idx", "]", "\n", "\n", "", "if", "seq_end", ">=", "0", ":", "\n", "            ", "name_hr", "=", "set_hr", "[", "seq_idx", ":", "seq_end", ":", "self", ".", "stride", "[", "str_idx", "]", "]", "\n", "", "else", ":", "\n", "            ", "name_hr", "=", "set_hr", "[", "seq_idx", ":", ":", "self", ".", "stride", "[", "str_idx", "]", "]", "\n", "\n", "", "if", "self", ".", "img_type", "==", "'img'", ":", "\n", "            ", "fn_read", "=", "imageio", ".", "imread", "\n", "", "elif", "self", ".", "img_type", "==", "'bin'", ":", "\n", "            ", "fn_read", "=", "np", ".", "load", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Wrong img type: {}'", ".", "format", "(", "self", ".", "img_type", ")", ")", "\n", "\n", "", "name", "=", "[", "path", ".", "join", "(", "key", ",", "path", ".", "basename", "(", "f", ")", ")", "for", "f", "in", "name_hr", "]", "\n", "name", "=", "[", "path", ".", "splitext", "(", "f", ")", "[", "0", "]", "for", "f", "in", "name", "]", "\n", "seq_hr", "=", "[", "fn_read", "(", "f", ")", "for", "f", "in", "name_hr", "]", "\n", "seq_hr", "=", "np", ".", "stack", "(", "seq_hr", ",", "axis", "=", "-", "1", ")", "\n", "seq_hr", "=", "preprocessing", ".", "np2tensor", "(", "seq_hr", ")", "\n", "\n", "if", "self", ".", "opt", "[", "'network_E'", "]", "[", "'which_model_E'", "]", "==", "'gaussargs'", ":", "\n", "            ", "kwargs", "=", "preprocessing", ".", "set_kernel_params", "(", "base", "=", "'bicubic'", ")", "\n", "", "else", ":", "\n", "            ", "kwargs", "=", "preprocessing", ".", "set_kernel_params", "(", ")", "\n", "\n", "", "kwargs_l", "=", "kwargs", "[", "'sigma'", "]", "\n", "kwargs_l", ".", "append", "(", "kwargs", "[", "'theta'", "]", ")", "\n", "kwargs_l", "=", "torch", ".", "Tensor", "(", "kwargs_l", ")", "\n", "basis_label", "=", "int", "(", "5", "*", "kwargs", "[", "'type'", "]", ")", "\n", "\n", "kernel_gen", "=", "rkg", ".", "Degradation", "(", "self", ".", "opt_data", "[", "'train'", "]", "[", "'kernel_size'", "]", ",", "self", ".", "scale", ",", "**", "kwargs", ")", "\n", "seq_lr", "=", "kernel_gen", ".", "apply", "(", "seq_hr", ")", "\n", "seq_superlr", "=", "kernel_gen", ".", "apply", "(", "seq_lr", ")", "\n", "\n", "if", "self", ".", "train", ":", "\n", "            ", "seq_lr", ",", "seq_hr", ",", "seq_superlr", "=", "preprocessing", ".", "crop", "(", "seq_lr", ",", "seq_hr", ",", "seq_superlr", ",", "patch_size", "=", "self", ".", "opt_data", "[", "'train'", "]", "[", "'patch_size'", "]", ")", "\n", "# seq_hr, seq_lr = preprocessing.augment(seq_hr, seq_lr)", "\n", "\n", "", "return", "{", "'SuperLQs'", ":", "seq_superlr", ",", "'LQs'", ":", "seq_lr", ",", "'GT'", ":", "seq_hr", ",", "'Kernel'", ":", "kernel_gen", ".", "kernel", ",", "\n", "'Kernel_type'", ":", "basis_label", ",", "'Kernel_args'", ":", "kwargs_l", ",", "'name'", ":", "name", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.__init__.create_dataloader": [[7, 26], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.__init__.create_dataset": [[28, 50], ["D", "logging.getLogger", "logging.getLogger.info", "NotImplementedError"], "function", ["None"], []], "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.vimeotest.VimeoTest.__init__": [[20, 32], ["torch.Dataset.__init__", "os.path.join", "os.path.join", "open", "sorted", "f.read().splitlines", "f.read"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__"], ["def", "__init__", "(", "self", ",", "opt", ",", "train", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data_root", "=", "opt", "[", "'datasets'", "]", "[", "'train'", "]", "[", "'data_root'", "]", "\n", "self", ".", "data_root", "=", "path", ".", "join", "(", "self", ".", "data_root", ",", "'vimeo_septuplet'", ")", "\n", "meta", "=", "path", ".", "join", "(", "self", ".", "data_root", ",", "'sep_testlist.txt'", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "\n", "with", "open", "(", "meta", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "self", ".", "img_list", "=", "sorted", "(", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", ")", "\n", "", "self", ".", "scale", "=", "opt", "[", "'scale'", "]", "\n", "self", ".", "nframes", "=", "opt", "[", "'datasets'", "]", "[", "'train'", "]", "[", "'N_frames'", "]", "\n", "self", ".", "train", "=", "train", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.vimeotest.VimeoTest.__getitem__": [[33, 60], ["os.path.join", "sorted", "numpy.stack", "torch.estimator.preprocessing.np2tensor", "torch.random_kernel_generator.Degradation", "data.random_kernel_generator.Degradation.apply", "glob.glob", "os.path.join", "imageio.imread", "torch.estimator.preprocessing.crop_border", "torch.estimator.preprocessing.crop", "torch.estimator.preprocessing.augment", "torch.estimator.preprocessing.set_kernel_params", "torch.estimator.preprocessing.set_kernel_params", "os.path.join", "os.path.splitext", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.np2tensor", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.old_kernel_generator.Degradation.apply", "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.crop_border", "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.crop", "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.augment", "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.set_kernel_params", "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.set_kernel_params"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "name_hr", "=", "path", ".", "join", "(", "self", ".", "data_root", ",", "'sequences'", ",", "self", ".", "img_list", "[", "idx", "]", ")", "\n", "names_hr", "=", "sorted", "(", "glob", ".", "glob", "(", "path", ".", "join", "(", "name_hr", ",", "'*.png'", ")", ")", ")", "\n", "names", "=", "[", "path", ".", "splitext", "(", "path", ".", "basename", "(", "f", ")", ")", "[", "0", "]", "for", "f", "in", "names_hr", "]", "\n", "names", "=", "[", "path", ".", "join", "(", "self", ".", "img_list", "[", "idx", "]", ",", "name", ")", "for", "name", "in", "names", "]", "\n", "\n", "seq_hr", "=", "[", "imageio", ".", "imread", "(", "f", ")", "for", "f", "in", "names_hr", "]", "\n", "seq_hr", "=", "np", ".", "stack", "(", "seq_hr", ",", "axis", "=", "-", "1", ")", "\n", "start_frame", "=", "(", "7", "-", "self", ".", "nframes", ")", "//", "2", "\n", "seq_hr", "=", "seq_hr", "[", "...", ",", "start_frame", ":", "start_frame", "+", "self", ".", "nframes", "]", "\n", "\n", "if", "self", ".", "train", ":", "\n", "            ", "seq_hr", "=", "preprocessing", ".", "crop_border", "(", "seq_hr", ",", "border", "=", "[", "4", ",", "4", "]", ")", "\n", "seq_hr", "=", "preprocessing", ".", "crop", "(", "seq_hr", ",", "patch_size", "=", "self", ".", "opt", "[", "'datasets'", "]", "[", "'train'", "]", "[", "'patch_size'", "]", ")", "\n", "seq_hr", "=", "preprocessing", ".", "augment", "(", "seq_hr", ",", "rot", "=", "False", ")", "\n", "\n", "", "seq_hr", "=", "preprocessing", ".", "np2tensor", "(", "seq_hr", ")", "\n", "\n", "if", "self", ".", "opt", "[", "'network_E'", "]", "[", "'which_model_E'", "]", "==", "'gaussargs'", ":", "\n", "            ", "kwargs", "=", "preprocessing", ".", "set_kernel_params", "(", "base", "=", "'bicubic'", ")", "\n", "", "else", ":", "\n", "            ", "kwargs", "=", "preprocessing", ".", "set_kernel_params", "(", ")", "\n", "\n", "", "kernel_gen", "=", "rkg", ".", "Degradation", "(", "self", ".", "opt", "[", "'datasets'", "]", "[", "'train'", "]", "[", "'kernel_size'", "]", ",", "self", ".", "scale", ",", "**", "kwargs", ")", "\n", "seq_lr", "=", "kernel_gen", ".", "apply", "(", "seq_hr", ")", "\n", "\n", "return", "{", "'LQs'", ":", "seq_lr", ",", "'GT'", ":", "seq_hr", ",", "'Kernel'", ":", "kernel_gen", ".", "kernel", ",", "'Kernel_args'", ":", "kwargs", ",", "'name'", ":", "names", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.vimeotest.VimeoTest.__len__": [[61, 63], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_list", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.loader.get_loader": [[7, 51], ["name.lower", "importlib.import_module", "torch.utils.data.DataLoader", "name.split", "torch.utils.data.DataLoader", "getattr", "importlib.import_module", "importlib.import_module.append", "name.lower", "torch.utils.data.ConcatDataset", "name_frag.lower", "getattr"], "function", ["None"], ["def", "get_loader", "(", "opt", ",", "train", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "\n", "    ", "flag", "=", "'train'", "if", "train", "else", "'val'", "\n", "name", "=", "opt", "[", "'datasets'", "]", "[", "flag", "]", "[", "'name'", "]", "\n", "batch_size", "=", "opt", "[", "'datasets'", "]", "[", "'train'", "]", "[", "'batch_size'", "]", "\n", "n_threads", "=", "opt", "[", "'datasets'", "]", "[", "'train'", "]", "[", "'n_workers'", "]", "\n", "cpu", "=", "opt", "[", "'cpu'", "]", "\n", "\n", "if", "train", ":", "\n", "        ", "shuffle", "=", "True", "\n", "", "else", ":", "\n", "        ", "shuffle", "=", "True", "#False", "\n", "batch_size", "=", "1", "\n", "\n", "", "benchmark", "=", "False", "\n", "if", "name", ".", "lower", "(", ")", "in", "[", "'vid4'", "]", ":", "\n", "        ", "benchmark", "=", "True", "\n", "", "if", "'+'", "not", "in", "name", ":", "\n", "        ", "dataset", "=", "import_module", "(", "'data.meta_learner'", "+", "name", ".", "lower", "(", ")", ")", "\n", "dataset", "=", "getattr", "(", "dataset", ",", "name", ")", "(", "opt", "=", "opt", ",", "train", "=", "train", ",", "benchmark", "=", "benchmark", ",", "**", "kwargs", ")", "\n", "loader", "=", "DataLoader", "(", "\n", "dataset", "=", "dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "\n", "drop_last", "=", "True", ",", "\n", "num_workers", "=", "n_threads", ",", "\n", "pin_memory", "=", "not", "cpu", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "dataset", "=", "[", "]", "\n", "name_list", "=", "name", ".", "split", "(", "'+'", ")", "\n", "for", "name_frag", "in", "name_list", ":", "\n", "            ", "dataset_frag", "=", "import_module", "(", "'data.meta_learner'", "+", "name_frag", ".", "lower", "(", ")", ")", "\n", "dataset", ".", "append", "(", "getattr", "(", "dataset_frag", ",", "name_frag", ")", "(", "opt", "=", "opt", ",", "train", "=", "train", ",", "benchmark", "=", "benchmark", ",", "**", "kwargs", ")", ")", "\n", "", "loader", "=", "DataLoader", "(", "\n", "dataset", "=", "ConcatDataset", "(", "dataset", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "\n", "drop_last", "=", "True", ",", "\n", "num_workers", "=", "n_threads", ",", "\n", "pin_memory", "=", "not", "cpu", ",", "\n", ")", "\n", "\n", "", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.loader.get_dataset": [[53, 77], ["importlib.import_module", "name.split", "torch.utils.data.ConcatDataset", "name.lower", "getattr", "importlib.import_module", "torch.utils.data.ConcatDataset.append", "name.lower", "name_frag.lower", "name_frag.lower", "getattr"], "function", ["None"], ["", "def", "get_dataset", "(", "\n", "opt", ",", "train", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "\n", "    ", "flag", "=", "'train'", "if", "train", "else", "'val'", "\n", "name", "=", "opt", "[", "'datasets'", "]", "[", "flag", "]", "[", "'name'", "]", "\n", "\n", "if", "'+'", "not", "in", "name", ":", "\n", "        ", "benchmark", "=", "False", "\n", "if", "name", ".", "lower", "(", ")", "in", "[", "'vid4'", "]", ":", "\n", "            ", "benchmark", "=", "True", "\n", "", "dataset", "=", "import_module", "(", "'data.meta_learner.'", "+", "name", ".", "lower", "(", ")", ")", "\n", "dataset", "=", "getattr", "(", "dataset", ",", "name", ")", "(", "opt", "=", "opt", ",", "train", "=", "train", ",", "benchmark", "=", "benchmark", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "        ", "dataset", "=", "[", "]", "\n", "name_list", "=", "name", ".", "split", "(", "'+'", ")", "\n", "for", "name_frag", "in", "name_list", ":", "\n", "            ", "benchmark", "=", "False", "\n", "if", "name_frag", ".", "lower", "(", ")", "in", "[", "'vid4'", "]", ":", "\n", "                ", "benchmark", "=", "True", "\n", "", "dataset_frag", "=", "import_module", "(", "'data.meta_learner.'", "+", "name_frag", ".", "lower", "(", ")", ")", "\n", "dataset", ".", "append", "(", "getattr", "(", "dataset_frag", ",", "name_frag", ")", "(", "opt", "=", "opt", ",", "train", "=", "train", ",", "benchmark", "=", "benchmark", ",", "**", "kwargs", ")", ")", "\n", "", "dataset", "=", "ConcatDataset", "(", "dataset", ")", "\n", "\n", "", "return", "dataset", "\n", "", ""]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.video_test_dataset.VideoTestDataset.__init__": [[17, 82], ["torch.Dataset.__init__", "ValueError", "video_test_dataset.VideoTestDataset.name.lower", "zip", "opt[].split", "video_test_dataset.VideoTestDataset.name.lower", "torch.util.glob_file_list", "torch.util.glob_file_list", "os.basename", "torch.util.glob_file_list", "torch.util.glob_file_list", "len", "video_test_dataset.VideoTestDataset.data_info[].extend", "video_test_dataset.VideoTestDataset.data_info[].extend", "video_test_dataset.VideoTestDataset.data_info[].extend", "range", "range", "video_test_dataset.VideoTestDataset.data_info[].extend", "opt[].lower", "ValueError", "opt[].split", "opt[].split", "os.join", "video_test_dataset.VideoTestDataset.name.lower", "torch.util.glob_file_list", "torch.util.glob_file_list", "torch.util.glob_file_list", "torch.util.glob_file_list", "len", "video_test_dataset.VideoTestDataset.data_info[].append", "torch.util.read_img_seq", "torch.util.read_img_seq", "os.join", "os.join", "k.find", "k.find", "k.find", "k.find", "k.find", "k.find", "k.find", "k.find"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.glob_file_list", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.glob_file_list", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.glob_file_list", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.glob_file_list", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.glob_file_list", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.glob_file_list", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.glob_file_list", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.glob_file_list", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.read_img_seq", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.read_img_seq"], ["\n", "\n", "def", "__init__", "(", "self", ",", "opt", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "VideoTestDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale", "=", "kwargs", "[", "'scale'", "]", "\n", "self", ".", "kernel_size", "=", "kwargs", "[", "'kernel_size'", "]", "\n", "self", ".", "model_name", "=", "kwargs", "[", "'model_name'", "]", "\n", "idx", "=", "kwargs", "[", "'idx'", "]", "if", "'idx'", "in", "kwargs", "else", "None", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "cache_data", "=", "opt", "[", "'cache_data'", "]", "\n", "self", ".", "half_N_frames", "=", "opt", "[", "'N_frames'", "]", "//", "2", "\n", "if", "idx", "is", "None", ":", "\n", "            ", "self", ".", "name", "=", "opt", "[", "'name'", "]", "\n", "self", ".", "GT_root", ",", "self", ".", "LQ_root", "=", "opt", "[", "'dataroot_GT'", "]", ",", "opt", "[", "'dataroot_LQ'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "name", "=", "opt", "[", "'name'", "]", ".", "split", "(", "'+'", ")", "[", "idx", "]", "\n", "self", ".", "GT_root", ",", "self", ".", "LQ_root", "=", "opt", "[", "'dataroot_GT'", "]", ".", "split", "(", "'+'", ")", "[", "idx", "]", ",", "opt", "[", "'dataroot_LQ'", "]", ".", "split", "(", "'+'", ")", "[", "idx", "]", "\n", "\n", "", "self", ".", "data_type", "=", "self", ".", "opt", "[", "'data_type'", "]", "\n", "self", ".", "data_info", "=", "{", "'path_LQ'", ":", "[", "]", ",", "'path_GT'", ":", "[", "]", ",", "'folder'", ":", "[", "]", ",", "'idx'", ":", "[", "]", ",", "'border'", ":", "[", "]", "}", "\n", "if", "self", ".", "data_type", "==", "'lmdb'", ":", "\n", "            ", "raise", "ValueError", "(", "'No need to use LMDB during validation/test.'", ")", "\n", "#### Generate data info and cache data", "\n", "", "self", ".", "imgs_LQ", ",", "self", ".", "imgs_GT", "=", "{", "}", ",", "{", "}", "\n", "if", "self", ".", "name", ".", "lower", "(", ")", "in", "[", "'vid4'", ",", "'reds'", ",", "'mm522'", "]", ":", "\n", "            ", "if", "self", ".", "name", ".", "lower", "(", ")", "==", "'vid4'", ":", "\n", "                ", "img_type", "=", "'img'", "\n", "subfolders_GT", "=", "util", ".", "glob_file_list", "(", "self", ".", "GT_root", ")", "\n", "", "elif", "self", ".", "name", ".", "lower", "(", ")", "==", "'reds'", ":", "\n", "                ", "img_type", "=", "'img'", "\n", "list_hr_seq", "=", "util", ".", "glob_file_list", "(", "self", ".", "GT_root", ")", "\n", "subfolders_GT", "=", "[", "k", "for", "k", "in", "list_hr_seq", "if", "\n", "k", ".", "find", "(", "'000'", ")", ">=", "0", "or", "k", ".", "find", "(", "'011'", ")", ">=", "0", "or", "k", ".", "find", "(", "'015'", ")", ">=", "0", "or", "k", ".", "find", "(", "'020'", ")", ">=", "0", "]", "\n", "", "else", ":", "\n", "                ", "img_type", "=", "'img'", "\n", "subfolders_GT", "=", "util", ".", "glob_file_list", "(", "self", ".", "GT_root", ")", "\n", "\n", "", "for", "subfolder_GT", "in", "subfolders_GT", ":", "\n", "                ", "subfolder_name", "=", "osp", ".", "basename", "(", "subfolder_GT", ")", "\n", "img_paths_GT", "=", "util", ".", "glob_file_list", "(", "subfolder_GT", ")", "\n", "max_idx", "=", "len", "(", "img_paths_GT", ")", "\n", "\n", "self", ".", "data_info", "[", "'path_GT'", "]", ".", "extend", "(", "img_paths_GT", ")", "\n", "self", ".", "data_info", "[", "'folder'", "]", ".", "extend", "(", "[", "subfolder_name", "]", "*", "max_idx", ")", "\n", "for", "i", "in", "range", "(", "max_idx", ")", ":", "\n", "                    ", "self", ".", "data_info", "[", "'idx'", "]", ".", "append", "(", "'{}/{}'", ".", "format", "(", "i", ",", "max_idx", ")", ")", "\n", "", "border_l", "=", "[", "0", "]", "*", "max_idx", "\n", "for", "i", "in", "range", "(", "self", ".", "half_N_frames", ")", ":", "\n", "                    ", "border_l", "[", "i", "]", "=", "1", "\n", "border_l", "[", "max_idx", "-", "i", "-", "1", "]", "=", "1", "\n", "", "self", ".", "data_info", "[", "'border'", "]", ".", "extend", "(", "border_l", ")", "\n", "\n", "if", "self", ".", "cache_data", ":", "\n", "                    ", "self", ".", "imgs_GT", "[", "subfolder_name", "]", "=", "util", ".", "read_img_seq", "(", "img_paths_GT", ",", "img_type", ")", "\n", "", "", "", "elif", "opt", "[", "'name'", "]", ".", "lower", "(", ")", "in", "[", "'vimeo90k-test'", "]", ":", "\n", "            ", "pass", "# TODO", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Not support video test dataset. Support Vid4, REDS4 and Vimeo90k-Test.'", ")", "\n", "\n", "# Generate kernel", "\n", "\n", "", "if", "opt", "[", "'degradation_mode'", "]", "==", "'set'", ":", "\n", "            ", "sigma_x", "=", "float", "(", "opt", "[", "'sigma_x'", "]", ")", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.video_test_dataset.VideoTestDataset.__getitem__": [[83, 105], ["[].split", "int", "int", "torch.util.index_generation", "video_test_dataset.VideoTestDataset.imgs_LQ[].index_select", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.index_generation"], ["sigma_y", "=", "float", "(", "opt", "[", "'sigma_y'", "]", ")", "\n", "theta", "=", "float", "(", "opt", "[", "'theta'", "]", ")", "\n", "gen_kwargs", "=", "preprocessing", ".", "set_kernel_params", "(", "sigma_x", "=", "sigma_x", ",", "sigma_y", "=", "sigma_y", ",", "theta", "=", "theta", ")", "\n", "self", ".", "kernel_gen", "=", "rkg", ".", "Degradation", "(", "self", ".", "kernel_size", ",", "self", ".", "scale", ",", "**", "gen_kwargs", ")", "\n", "self", ".", "gen_kwargs_l", "=", "[", "gen_kwargs", "[", "'sigma'", "]", "[", "0", "]", ",", "gen_kwargs", "[", "'sigma'", "]", "[", "1", "]", ",", "gen_kwargs", "[", "'theta'", "]", "]", "\n", "\n", "", "elif", "opt", "[", "'degradation_mode'", "]", "==", "'preset'", ":", "\n", "            ", "self", ".", "kernel_gen", "=", "rkg", ".", "Degradation", "(", "self", ".", "kernel_size", ",", "self", ".", "scale", ")", "\n", "if", "self", ".", "name", ".", "lower", "(", ")", "==", "'vid4'", ":", "\n", "                ", "self", ".", "kernel_dict", "=", "np", ".", "load", "(", "'../experiments/pretrained_models/Vid4Gauss.npy'", ")", "\n", "", "elif", "self", ".", "name", ".", "lower", "(", ")", "==", "'reds'", ":", "\n", "                ", "self", ".", "kernel_dict", "=", "np", ".", "load", "(", "'../experiments/pretrained_models/REDSGauss.npy'", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "folder", "=", "self", ".", "data_info", "[", "'folder'", "]", "[", "index", "]", "\n", "idx", ",", "max_idx", "=", "self", ".", "data_info", "[", "'idx'", "]", "[", "index", "]", ".", "split", "(", "'/'", ")", "\n", "idx", ",", "max_idx", "=", "int", "(", "idx", ")", ",", "int", "(", "max_idx", ")", "\n", "border", "=", "self", ".", "data_info", "[", "'border'", "]", "[", "index", "]", "\n", "\n", "select_idx", "=", "util", ".", "index_generation", "(", "idx", ",", "max_idx", ",", "self", ".", "opt", "[", "'N_frames'", "]", ",", "\n", "padding", "=", "self", ".", "opt", "[", "'padding'", "]", ")", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.video_test_dataset.VideoTestDataset.__len__": [[107, 109], ["len"], "methods", ["None"], ["\n", "if", "self", ".", "opt", "[", "'degradation_mode'", "]", "==", "'set'", ":", "\n", "            "]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.REDS_dataset.REDSDataset.__init__": [[32, 70], ["torch.Dataset.__init__", "logger.info", "torch.get_image_paths", "logger.info", "logger.info", "ValueError", "pickle.load", "ValueError", "str", "open", "v.split"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.get_image_paths", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.load"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "REDSDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "# temporal augmentation", "\n", "self", ".", "interval_list", "=", "opt", "[", "'interval_list'", "]", "\n", "self", ".", "random_reverse", "=", "opt", "[", "'random_reverse'", "]", "\n", "logger", ".", "info", "(", "'Temporal augmentation interval list: [{}], with random reverse is {}.'", ".", "format", "(", "\n", "','", ".", "join", "(", "str", "(", "x", ")", "for", "x", "in", "opt", "[", "'interval_list'", "]", ")", ",", "self", ".", "random_reverse", ")", ")", "\n", "\n", "self", ".", "half_N_frames", "=", "opt", "[", "'N_frames'", "]", "//", "2", "\n", "self", ".", "GT_root", ",", "self", ".", "LQ_root", "=", "opt", "[", "'dataroot_GT'", "]", ",", "opt", "[", "'dataroot_LQ'", "]", "\n", "self", ".", "data_type", "=", "self", ".", "opt", "[", "'data_type'", "]", "\n", "self", ".", "LR_input", "=", "False", "if", "opt", "[", "'GT_size'", "]", "==", "opt", "[", "'LQ_size'", "]", "else", "True", "# low resolution inputs", "\n", "#### directly load image keys", "\n", "if", "self", ".", "data_type", "==", "'lmdb'", ":", "\n", "            ", "self", ".", "paths_GT", ",", "_", "=", "util", ".", "get_image_paths", "(", "self", ".", "data_type", ",", "opt", "[", "'dataroot_GT'", "]", ")", "\n", "logger", ".", "info", "(", "'Using lmdb meta info for cache keys.'", ")", "\n", "", "elif", "opt", "[", "'cache_keys'", "]", ":", "\n", "            ", "logger", ".", "info", "(", "'Using cache keys: {}'", ".", "format", "(", "opt", "[", "'cache_keys'", "]", ")", ")", "\n", "self", ".", "paths_GT", "=", "pickle", ".", "load", "(", "open", "(", "opt", "[", "'cache_keys'", "]", ",", "'rb'", ")", ")", "[", "'keys'", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Need to create cache keys (meta_info.pkl) by running [create_lmdb.py]'", ")", "\n", "\n", "# remove the REDS4 for testing", "\n", "", "self", ".", "paths_GT", "=", "[", "\n", "v", "for", "v", "in", "self", ".", "paths_GT", "if", "v", ".", "split", "(", "'_'", ")", "[", "0", "]", "not", "in", "[", "'000'", ",", "'011'", ",", "'015'", ",", "'020'", "]", "\n", "]", "\n", "assert", "self", ".", "paths_GT", ",", "'Error: GT path is empty.'", "\n", "\n", "if", "self", ".", "data_type", "==", "'lmdb'", ":", "\n", "            ", "self", ".", "GT_env", ",", "self", ".", "LQ_env", "=", "None", ",", "None", "\n", "", "elif", "self", ".", "data_type", "==", "'mc'", ":", "# memcached", "\n", "            ", "self", ".", "mclient", "=", "None", "\n", "", "elif", "self", ".", "data_type", "==", "'img'", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Wrong data type: {}'", ".", "format", "(", "self", ".", "data_type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.REDS_dataset.REDSDataset._init_lmdb": [[71, 77], ["lmdb.open", "lmdb.open"], "methods", ["None"], ["", "", "def", "_init_lmdb", "(", "self", ")", ":", "\n", "# https://github.com/chainer/chainermn/issues/129", "\n", "        ", "self", ".", "GT_env", "=", "lmdb", ".", "open", "(", "self", ".", "opt", "[", "'dataroot_GT'", "]", ",", "readonly", "=", "True", ",", "lock", "=", "False", ",", "readahead", "=", "False", ",", "\n", "meminit", "=", "False", ")", "\n", "self", ".", "LQ_env", "=", "lmdb", ".", "open", "(", "self", ".", "opt", "[", "'dataroot_LQ'", "]", ",", "readonly", "=", "True", ",", "lock", "=", "False", ",", "readahead", "=", "False", ",", "\n", "meminit", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.REDS_dataset.REDSDataset._ensure_memcached": [[78, 85], ["mc.MemcachedClient.GetInstance"], "methods", ["None"], ["", "def", "_ensure_memcached", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "mclient", "is", "None", ":", "\n", "# specify the config files", "\n", "            ", "server_list_config_file", "=", "None", "\n", "client_config_file", "=", "None", "\n", "self", ".", "mclient", "=", "mc", ".", "MemcachedClient", ".", "GetInstance", "(", "server_list_config_file", ",", "\n", "client_config_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.REDS_dataset.REDSDataset._read_img_mc": [[86, 94], ["mc.pyvector", "REDS_dataset.REDSDataset.mclient.Get", "mc.ConvertBuffer", "numpy.frombuffer", "cv2.imdecode"], "methods", ["None"], ["", "", "def", "_read_img_mc", "(", "self", ",", "path", ")", ":", "\n", "        ", "''' Return BGR, HWC, [0, 255], uint8'''", "\n", "value", "=", "mc", ".", "pyvector", "(", ")", "\n", "self", ".", "mclient", ".", "Get", "(", "path", ",", "value", ")", "\n", "value_buf", "=", "mc", ".", "ConvertBuffer", "(", "value", ")", "\n", "img_array", "=", "np", ".", "frombuffer", "(", "value_buf", ",", "np", ".", "uint8", ")", "\n", "img", "=", "cv2", ".", "imdecode", "(", "img_array", ",", "cv2", ".", "IMREAD_UNCHANGED", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.REDS_dataset.REDSDataset._read_img_mc_BGR": [[95, 102], ["REDS_dataset.REDSDataset._read_img_mc", "REDS_dataset.REDSDataset._read_img_mc", "REDS_dataset.REDSDataset._read_img_mc", "cv2.merge", "os.join", "os.join", "os.join"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset._read_img_mc", "home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset._read_img_mc", "home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset._read_img_mc"], ["", "def", "_read_img_mc_BGR", "(", "self", ",", "path", ",", "name_a", ",", "name_b", ")", ":", "\n", "        ", "''' Read BGR channels separately and then combine for 1M limits in cluster'''", "\n", "img_B", "=", "self", ".", "_read_img_mc", "(", "osp", ".", "join", "(", "path", "+", "'_B'", ",", "name_a", ",", "name_b", "+", "'.png'", ")", ")", "\n", "img_G", "=", "self", ".", "_read_img_mc", "(", "osp", ".", "join", "(", "path", "+", "'_G'", ",", "name_a", ",", "name_b", "+", "'.png'", ")", ")", "\n", "img_R", "=", "self", ".", "_read_img_mc", "(", "osp", ".", "join", "(", "path", "+", "'_R'", ",", "name_a", ",", "name_b", "+", "'.png'", ")", ")", "\n", "img", "=", "cv2", ".", "merge", "(", "(", "img_B", ",", "img_G", ",", "img_R", ")", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.REDS_dataset.REDSDataset.__getitem__": [[103, 208], ["key.split", "int", "random.choice", "numpy.stack", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "REDS_dataset.REDSDataset._ensure_memcached", "list", "len", "len", "REDS_dataset.REDSDataset._read_img_mc_BGR", "os.join", "img_LQ_l.append", "img_LQ_l.append", "torch.augment", "REDS_dataset.REDSDataset._init_lmdb", "random.choice", "list", "list", "random.randint", "range", "list.reverse", "data.read_img.astype", "torch.read_img", "torch.read_img", "random.randint", "random.randint", "random.randint", "random.randint", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "random.random", "range", "range", "random.random", "os.join", "REDS_dataset.REDSDataset._read_img_mc", "REDS_dataset.REDSDataset._read_img_mc_BGR", "data.read_img.astype", "torch.read_img", "torch.read_img", "max", "max", "int", "int", "max", "max", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "numpy.transpose", "numpy.transpose"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset._ensure_memcached", "home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.REDS_dataset.REDSDataset._read_img_mc_BGR", "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.augment", "home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset._init_lmdb", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.read_img", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.read_img", "home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset._read_img_mc", "home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.REDS_dataset.REDSDataset._read_img_mc_BGR", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.read_img", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.read_img"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "data_type", "==", "'mc'", ":", "\n", "            ", "self", ".", "_ensure_memcached", "(", ")", "\n", "", "elif", "self", ".", "data_type", "==", "'lmdb'", "and", "(", "self", ".", "GT_env", "is", "None", "or", "self", ".", "LQ_env", "is", "None", ")", ":", "\n", "            ", "self", ".", "_init_lmdb", "(", ")", "\n", "\n", "", "scale", "=", "self", ".", "opt", "[", "'scale'", "]", "\n", "GT_size", "=", "self", ".", "opt", "[", "'GT_size'", "]", "\n", "key", "=", "self", ".", "paths_GT", "[", "index", "]", "\n", "name_a", ",", "name_b", "=", "key", ".", "split", "(", "'_'", ")", "\n", "center_frame_idx", "=", "int", "(", "name_b", ")", "\n", "\n", "#### determine the neighbor frames", "\n", "interval", "=", "random", ".", "choice", "(", "self", ".", "interval_list", ")", "\n", "if", "self", ".", "opt", "[", "'border_mode'", "]", ":", "\n", "            ", "direction", "=", "1", "# 1: forward; 0: backward", "\n", "N_frames", "=", "self", ".", "opt", "[", "'N_frames'", "]", "\n", "if", "self", ".", "random_reverse", "and", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "direction", "=", "random", ".", "choice", "(", "[", "0", ",", "1", "]", ")", "\n", "", "if", "center_frame_idx", "+", "interval", "*", "(", "N_frames", "-", "1", ")", ">", "99", ":", "\n", "                ", "direction", "=", "0", "\n", "", "elif", "center_frame_idx", "-", "interval", "*", "(", "N_frames", "-", "1", ")", "<", "0", ":", "\n", "                ", "direction", "=", "1", "\n", "# get the neighbor list", "\n", "", "if", "direction", "==", "1", ":", "\n", "                ", "neighbor_list", "=", "list", "(", "\n", "range", "(", "center_frame_idx", ",", "center_frame_idx", "+", "interval", "*", "N_frames", ",", "interval", ")", ")", "\n", "", "else", ":", "\n", "                ", "neighbor_list", "=", "list", "(", "\n", "range", "(", "center_frame_idx", ",", "center_frame_idx", "-", "interval", "*", "N_frames", ",", "-", "interval", ")", ")", "\n", "", "name_b", "=", "'{:08d}'", ".", "format", "(", "neighbor_list", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "# ensure not exceeding the borders", "\n", "            ", "while", "(", "center_frame_idx", "+", "self", ".", "half_N_frames", "*", "interval", ">", "\n", "99", ")", "or", "(", "center_frame_idx", "-", "self", ".", "half_N_frames", "*", "interval", "<", "0", ")", ":", "\n", "                ", "center_frame_idx", "=", "random", ".", "randint", "(", "0", ",", "99", ")", "\n", "# get the neighbor list", "\n", "", "neighbor_list", "=", "list", "(", "\n", "range", "(", "center_frame_idx", "-", "self", ".", "half_N_frames", "*", "interval", ",", "\n", "center_frame_idx", "+", "self", ".", "half_N_frames", "*", "interval", "+", "1", ",", "interval", ")", ")", "\n", "if", "self", ".", "random_reverse", "and", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "neighbor_list", ".", "reverse", "(", ")", "\n", "", "name_b", "=", "'{:08d}'", ".", "format", "(", "neighbor_list", "[", "self", ".", "half_N_frames", "]", ")", "\n", "\n", "", "assert", "len", "(", "\n", "neighbor_list", ")", "==", "self", ".", "opt", "[", "'N_frames'", "]", ",", "'Wrong length of neighbor list: {}'", ".", "format", "(", "\n", "len", "(", "neighbor_list", ")", ")", "\n", "\n", "#### get the GT image (as the center frame)", "\n", "if", "self", ".", "data_type", "==", "'mc'", ":", "\n", "            ", "img_GT", "=", "self", ".", "_read_img_mc_BGR", "(", "self", ".", "GT_root", ",", "name_a", ",", "name_b", ")", "\n", "img_GT", "=", "img_GT", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.", "\n", "", "elif", "self", ".", "data_type", "==", "'lmdb'", ":", "\n", "            ", "img_GT", "=", "util", ".", "read_img", "(", "self", ".", "GT_env", ",", "key", ",", "(", "3", ",", "720", ",", "1280", ")", ")", "\n", "", "else", ":", "\n", "            ", "img_GT", "=", "util", ".", "read_img", "(", "None", ",", "osp", ".", "join", "(", "self", ".", "GT_root", ",", "name_a", ",", "name_b", "+", "'.png'", ")", ")", "\n", "\n", "#### get LQ images", "\n", "", "LQ_size_tuple", "=", "(", "3", ",", "180", ",", "320", ")", "if", "self", ".", "LR_input", "else", "(", "3", ",", "720", ",", "1280", ")", "\n", "img_LQ_l", "=", "[", "]", "\n", "for", "v", "in", "neighbor_list", ":", "\n", "            ", "img_LQ_path", "=", "osp", ".", "join", "(", "self", ".", "LQ_root", ",", "name_a", ",", "'{:08d}.png'", ".", "format", "(", "v", ")", ")", "\n", "if", "self", ".", "data_type", "==", "'mc'", ":", "\n", "                ", "if", "self", ".", "LR_input", ":", "\n", "                    ", "img_LQ", "=", "self", ".", "_read_img_mc", "(", "img_LQ_path", ")", "\n", "", "else", ":", "\n", "                    ", "img_LQ", "=", "self", ".", "_read_img_mc_BGR", "(", "self", ".", "LQ_root", ",", "name_a", ",", "'{:08d}'", ".", "format", "(", "v", ")", ")", "\n", "", "img_LQ", "=", "img_LQ", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.", "\n", "", "elif", "self", ".", "data_type", "==", "'lmdb'", ":", "\n", "                ", "img_LQ", "=", "util", ".", "read_img", "(", "self", ".", "LQ_env", ",", "'{}_{:08d}'", ".", "format", "(", "name_a", ",", "v", ")", ",", "LQ_size_tuple", ")", "\n", "", "else", ":", "\n", "                ", "img_LQ", "=", "util", ".", "read_img", "(", "None", ",", "img_LQ_path", ")", "\n", "", "img_LQ_l", ".", "append", "(", "img_LQ", ")", "\n", "\n", "", "if", "self", ".", "opt", "[", "'phase'", "]", "==", "'train'", ":", "\n", "            ", "C", ",", "H", ",", "W", "=", "LQ_size_tuple", "# LQ size", "\n", "# randomly crop", "\n", "if", "self", ".", "LR_input", ":", "\n", "                ", "LQ_size", "=", "GT_size", "//", "scale", "\n", "rnd_h", "=", "random", ".", "randint", "(", "0", ",", "max", "(", "0", ",", "H", "-", "LQ_size", ")", ")", "\n", "rnd_w", "=", "random", ".", "randint", "(", "0", ",", "max", "(", "0", ",", "W", "-", "LQ_size", ")", ")", "\n", "img_LQ_l", "=", "[", "v", "[", "rnd_h", ":", "rnd_h", "+", "LQ_size", ",", "rnd_w", ":", "rnd_w", "+", "LQ_size", ",", ":", "]", "for", "v", "in", "img_LQ_l", "]", "\n", "rnd_h_HR", ",", "rnd_w_HR", "=", "int", "(", "rnd_h", "*", "scale", ")", ",", "int", "(", "rnd_w", "*", "scale", ")", "\n", "img_GT", "=", "img_GT", "[", "rnd_h_HR", ":", "rnd_h_HR", "+", "GT_size", ",", "rnd_w_HR", ":", "rnd_w_HR", "+", "GT_size", ",", ":", "]", "\n", "", "else", ":", "\n", "                ", "rnd_h", "=", "random", ".", "randint", "(", "0", ",", "max", "(", "0", ",", "H", "-", "GT_size", ")", ")", "\n", "rnd_w", "=", "random", ".", "randint", "(", "0", ",", "max", "(", "0", ",", "W", "-", "GT_size", ")", ")", "\n", "img_LQ_l", "=", "[", "v", "[", "rnd_h", ":", "rnd_h", "+", "GT_size", ",", "rnd_w", ":", "rnd_w", "+", "GT_size", ",", ":", "]", "for", "v", "in", "img_LQ_l", "]", "\n", "img_GT", "=", "img_GT", "[", "rnd_h", ":", "rnd_h", "+", "GT_size", ",", "rnd_w", ":", "rnd_w", "+", "GT_size", ",", ":", "]", "\n", "\n", "# augmentation - flip, rotate", "\n", "", "img_LQ_l", ".", "append", "(", "img_GT", ")", "\n", "rlt", "=", "util", ".", "augment", "(", "img_LQ_l", ",", "self", ".", "opt", "[", "'use_flip'", "]", ",", "self", ".", "opt", "[", "'use_rot'", "]", ")", "\n", "img_LQ_l", "=", "rlt", "[", "0", ":", "-", "1", "]", "\n", "img_GT", "=", "rlt", "[", "-", "1", "]", "\n", "\n", "# stack LQ images to NHWC, N is the frame number", "\n", "", "img_LQs", "=", "np", ".", "stack", "(", "img_LQ_l", ",", "axis", "=", "0", ")", "\n", "# BGR to RGB, HWC to CHW, numpy to tensor", "\n", "img_GT", "=", "img_GT", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "img_LQs", "=", "img_LQs", "[", ":", ",", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "img_GT", "=", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "np", ".", "transpose", "(", "img_GT", ",", "(", "2", ",", "0", ",", "1", ")", ")", ")", ")", ".", "float", "(", ")", "\n", "img_LQs", "=", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "np", ".", "transpose", "(", "img_LQs", ",", "\n", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", ")", ")", ".", "float", "(", ")", "\n", "return", "{", "'LQs'", ":", "img_LQs", ",", "'GT'", ":", "img_GT", ",", "'key'", ":", "key", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.REDS_dataset.REDSDataset.__len__": [[209, 211], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "paths_GT", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.LQGT_dataset.LQGTDataset.__init__": [[16, 33], ["torch.Dataset.__init__", "torch.get_image_paths", "torch.get_image_paths", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.get_image_paths", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.get_image_paths"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "LQGTDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "data_type", "=", "self", ".", "opt", "[", "'data_type'", "]", "\n", "self", ".", "paths_LQ", ",", "self", ".", "paths_GT", "=", "None", ",", "None", "\n", "self", ".", "sizes_LQ", ",", "self", ".", "sizes_GT", "=", "None", ",", "None", "\n", "self", ".", "LQ_env", ",", "self", ".", "GT_env", "=", "None", ",", "None", "# environments for lmdb", "\n", "\n", "self", ".", "paths_GT", ",", "self", ".", "sizes_GT", "=", "util", ".", "get_image_paths", "(", "self", ".", "data_type", ",", "opt", "[", "'dataroot_GT'", "]", ")", "\n", "self", ".", "paths_LQ", ",", "self", ".", "sizes_LQ", "=", "util", ".", "get_image_paths", "(", "self", ".", "data_type", ",", "opt", "[", "'dataroot_LQ'", "]", ")", "\n", "assert", "self", ".", "paths_GT", ",", "'Error: GT path is empty.'", "\n", "if", "self", ".", "paths_LQ", "and", "self", ".", "paths_GT", ":", "\n", "            ", "assert", "len", "(", "self", ".", "paths_LQ", ")", "==", "len", "(", "\n", "self", ".", "paths_GT", "\n", ")", ",", "'GT and LQ datasets have different number of images - {}, {}.'", ".", "format", "(", "\n", "len", "(", "self", ".", "paths_LQ", ")", ",", "len", "(", "self", ".", "paths_GT", ")", ")", "\n", "", "self", ".", "random_scale_list", "=", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.LQGT_dataset.LQGTDataset._init_lmdb": [[34, 40], ["lmdb.open", "lmdb.open"], "methods", ["None"], ["", "def", "_init_lmdb", "(", "self", ")", ":", "\n", "# https://github.com/chainer/chainermn/issues/129", "\n", "        ", "self", ".", "GT_env", "=", "lmdb", ".", "open", "(", "self", ".", "opt", "[", "'dataroot_GT'", "]", ",", "readonly", "=", "True", ",", "lock", "=", "False", ",", "readahead", "=", "False", ",", "\n", "meminit", "=", "False", ")", "\n", "self", ".", "LQ_env", "=", "lmdb", ".", "open", "(", "self", ".", "opt", "[", "'dataroot_LQ'", "]", ",", "readonly", "=", "True", ",", "lock", "=", "False", ",", "readahead", "=", "False", ",", "\n", "meminit", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.LQGT_dataset.LQGTDataset.__getitem__": [[41, 125], ["torch.read_img", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "LQGT_dataset.LQGTDataset._init_lmdb", "torch.modcrop", "torch.read_img", "torch.imresize_np", "random.randint", "random.randint", "torch.augment", "int", "torch.channel_convert", "random.choice", "LQGT_dataset.LQGTDataset.__getitem__._mod"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.read_img", "home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset._init_lmdb", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.modcrop", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.read_img", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.imresize_np", "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.augment", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.channel_convert"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "data_type", "==", "'lmdb'", "and", "(", "self", ".", "GT_env", "is", "None", "or", "self", ".", "LQ_env", "is", "None", ")", ":", "\n", "            ", "self", ".", "_init_lmdb", "(", ")", "\n", "", "GT_path", ",", "LQ_path", "=", "None", ",", "None", "\n", "scale", "=", "self", ".", "opt", "[", "'scale'", "]", "\n", "GT_size", "=", "self", ".", "opt", "[", "'GT_size'", "]", "\n", "\n", "# get GT image", "\n", "GT_path", "=", "self", ".", "paths_GT", "[", "index", "]", "\n", "resolution", "=", "[", "int", "(", "s", ")", "for", "s", "in", "self", ".", "sizes_GT", "[", "index", "]", ".", "split", "(", "'_'", ")", "\n", "]", "if", "self", ".", "data_type", "==", "'lmdb'", "else", "None", "\n", "img_GT", "=", "util", ".", "read_img", "(", "self", ".", "GT_env", ",", "GT_path", ",", "resolution", ")", "\n", "if", "self", ".", "opt", "[", "'phase'", "]", "!=", "'train'", ":", "# modcrop in the validation / test phase", "\n", "            ", "img_GT", "=", "util", ".", "modcrop", "(", "img_GT", ",", "scale", ")", "\n", "", "if", "self", ".", "opt", "[", "'color'", "]", ":", "# change color space if necessary", "\n", "            ", "img_GT", "=", "util", ".", "channel_convert", "(", "img_GT", ".", "shape", "[", "2", "]", ",", "self", ".", "opt", "[", "'color'", "]", ",", "[", "img_GT", "]", ")", "[", "0", "]", "\n", "\n", "# get LQ image", "\n", "", "if", "self", ".", "paths_LQ", ":", "\n", "            ", "LQ_path", "=", "self", ".", "paths_LQ", "[", "index", "]", "\n", "resolution", "=", "[", "int", "(", "s", ")", "for", "s", "in", "self", ".", "sizes_LQ", "[", "index", "]", ".", "split", "(", "'_'", ")", "\n", "]", "if", "self", ".", "data_type", "==", "'lmdb'", "else", "None", "\n", "img_LQ", "=", "util", ".", "read_img", "(", "self", ".", "LQ_env", ",", "LQ_path", ",", "resolution", ")", "\n", "", "else", ":", "# down-sampling on-the-fly", "\n", "# randomly scale during training", "\n", "            ", "if", "self", ".", "opt", "[", "'phase'", "]", "==", "'train'", ":", "\n", "                ", "random_scale", "=", "random", ".", "choice", "(", "self", ".", "random_scale_list", ")", "\n", "H_s", ",", "W_s", ",", "_", "=", "img_GT", ".", "shape", "\n", "\n", "def", "_mod", "(", "n", ",", "random_scale", ",", "scale", ",", "thres", ")", ":", "\n", "                    ", "rlt", "=", "int", "(", "n", "*", "random_scale", ")", "\n", "rlt", "=", "(", "rlt", "//", "scale", ")", "*", "scale", "\n", "return", "thres", "if", "rlt", "<", "thres", "else", "rlt", "\n", "\n", "", "H_s", "=", "_mod", "(", "H_s", ",", "random_scale", ",", "scale", ",", "GT_size", ")", "\n", "W_s", "=", "_mod", "(", "W_s", ",", "random_scale", ",", "scale", ",", "GT_size", ")", "\n", "img_GT", "=", "cv2", ".", "resize", "(", "img_GT", ",", "(", "W_s", ",", "H_s", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "if", "img_GT", ".", "ndim", "==", "2", ":", "\n", "                    ", "img_GT", "=", "cv2", ".", "cvtColor", "(", "img_GT", ",", "cv2", ".", "COLOR_GRAY2BGR", ")", "\n", "\n", "", "", "H", ",", "W", ",", "_", "=", "img_GT", ".", "shape", "\n", "# using matlab imresize", "\n", "img_LQ", "=", "util", ".", "imresize_np", "(", "img_GT", ",", "1", "/", "scale", ",", "True", ")", "\n", "if", "img_LQ", ".", "ndim", "==", "2", ":", "\n", "                ", "img_LQ", "=", "np", ".", "expand_dims", "(", "img_LQ", ",", "axis", "=", "2", ")", "\n", "\n", "", "", "if", "self", ".", "opt", "[", "'phase'", "]", "==", "'train'", ":", "\n", "# if the image size is too small", "\n", "            ", "H", ",", "W", ",", "_", "=", "img_GT", ".", "shape", "\n", "if", "H", "<", "GT_size", "or", "W", "<", "GT_size", ":", "\n", "                ", "img_GT", "=", "cv2", ".", "resize", "(", "img_GT", ",", "(", "GT_size", ",", "GT_size", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "# using matlab imresize", "\n", "img_LQ", "=", "util", ".", "imresize_np", "(", "img_GT", ",", "1", "/", "scale", ",", "True", ")", "\n", "if", "img_LQ", ".", "ndim", "==", "2", ":", "\n", "                    ", "img_LQ", "=", "np", ".", "expand_dims", "(", "img_LQ", ",", "axis", "=", "2", ")", "\n", "\n", "", "", "H", ",", "W", ",", "C", "=", "img_LQ", ".", "shape", "\n", "LQ_size", "=", "GT_size", "//", "scale", "\n", "\n", "# randomly crop", "\n", "rnd_h", "=", "random", ".", "randint", "(", "0", ",", "max", "(", "0", ",", "H", "-", "LQ_size", ")", ")", "\n", "rnd_w", "=", "random", ".", "randint", "(", "0", ",", "max", "(", "0", ",", "W", "-", "LQ_size", ")", ")", "\n", "img_LQ", "=", "img_LQ", "[", "rnd_h", ":", "rnd_h", "+", "LQ_size", ",", "rnd_w", ":", "rnd_w", "+", "LQ_size", ",", ":", "]", "\n", "rnd_h_GT", ",", "rnd_w_GT", "=", "int", "(", "rnd_h", "*", "scale", ")", ",", "int", "(", "rnd_w", "*", "scale", ")", "\n", "img_GT", "=", "img_GT", "[", "rnd_h_GT", ":", "rnd_h_GT", "+", "GT_size", ",", "rnd_w_GT", ":", "rnd_w_GT", "+", "GT_size", ",", ":", "]", "\n", "\n", "# augmentation - flip, rotate", "\n", "img_LQ", ",", "img_GT", "=", "util", ".", "augment", "(", "[", "img_LQ", ",", "img_GT", "]", ",", "self", ".", "opt", "[", "'use_flip'", "]", ",", "\n", "self", ".", "opt", "[", "'use_rot'", "]", ")", "\n", "\n", "", "if", "self", ".", "opt", "[", "'color'", "]", ":", "# change color space if necessary", "\n", "            ", "img_LQ", "=", "util", ".", "channel_convert", "(", "C", ",", "self", ".", "opt", "[", "'color'", "]", ",", "\n", "[", "img_LQ", "]", ")", "[", "0", "]", "# TODO during val no definition", "\n", "\n", "# BGR to RGB, HWC to CHW, numpy to tensor", "\n", "", "if", "img_GT", ".", "shape", "[", "2", "]", "==", "3", ":", "\n", "            ", "img_GT", "=", "img_GT", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "img_LQ", "=", "img_LQ", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "", "img_GT", "=", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "np", ".", "transpose", "(", "img_GT", ",", "(", "2", ",", "0", ",", "1", ")", ")", ")", ")", ".", "float", "(", ")", "\n", "img_LQ", "=", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "np", ".", "transpose", "(", "img_LQ", ",", "(", "2", ",", "0", ",", "1", ")", ")", ")", ")", ".", "float", "(", ")", "\n", "\n", "if", "LQ_path", "is", "None", ":", "\n", "            ", "LQ_path", "=", "GT_path", "\n", "", "return", "{", "'LQ'", ":", "img_LQ", ",", "'GT'", ":", "img_GT", ",", "'LQ_path'", ":", "LQ_path", ",", "'GT_path'", ":", "GT_path", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.LQGT_dataset.LQGTDataset.__len__": [[126, 128], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "paths_GT", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.LQ_dataset.LQDataset.__init__": [[11, 19], ["torch.Dataset.__init__", "torch.get_image_paths"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.get_image_paths"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "LQDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "paths_LQ", ",", "self", ".", "paths_GT", "=", "None", ",", "None", "\n", "self", ".", "LQ_env", "=", "None", "# environment for lmdb", "\n", "\n", "self", ".", "paths_LQ", ",", "self", ".", "sizes_LQ", "=", "util", ".", "get_image_paths", "(", "self", ".", "data_type", ",", "opt", "[", "'dataroot_LQ'", "]", ")", "\n", "assert", "self", ".", "paths_LQ", ",", "'Error: LQ paths are empty.'", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.LQ_dataset.LQDataset._init_lmdb": [[20, 23], ["lmdb.open"], "methods", ["None"], ["", "def", "_init_lmdb", "(", "self", ")", ":", "\n", "        ", "self", ".", "LQ_env", "=", "lmdb", ".", "open", "(", "self", ".", "opt", "[", "'dataroot_LQ'", "]", ",", "readonly", "=", "True", ",", "lock", "=", "False", ",", "readahead", "=", "False", ",", "\n", "meminit", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.LQ_dataset.LQDataset.__getitem__": [[24, 45], ["torch.read_img", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "LQ_dataset.LQDataset._init_lmdb", "int", "torch.channel_convert", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "LQ_dataset.LQDataset.sizes_LQ[].split", "numpy.ascontiguousarray", "numpy.transpose"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.read_img", "home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset._init_lmdb", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.channel_convert"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "data_type", "==", "'lmdb'", "and", "self", ".", "LQ_env", "is", "None", ":", "\n", "            ", "self", ".", "_init_lmdb", "(", ")", "\n", "", "LQ_path", "=", "None", "\n", "\n", "# get LQ image", "\n", "LQ_path", "=", "self", ".", "LQ_path", "[", "index", "]", "\n", "resolution", "=", "[", "int", "(", "s", ")", "for", "s", "in", "self", ".", "sizes_LQ", "[", "index", "]", ".", "split", "(", "'_'", ")", "\n", "]", "if", "self", ".", "data_type", "==", "'lmdb'", "else", "None", "\n", "img_LQ", "=", "util", ".", "read_img", "(", "self", ".", "LQ_env", ",", "LQ_path", ",", "resolution", ")", "\n", "H", ",", "W", ",", "C", "=", "img_LQ", ".", "shape", "\n", "\n", "if", "self", ".", "opt", "[", "'color'", "]", ":", "# change color space if necessary", "\n", "            ", "img_LQ", "=", "util", ".", "channel_convert", "(", "C", ",", "self", ".", "opt", "[", "'color'", "]", ",", "[", "img_LQ", "]", ")", "[", "0", "]", "\n", "\n", "# BGR to RGB, HWC to CHW, numpy to tensor", "\n", "", "if", "img_LQ", ".", "shape", "[", "2", "]", "==", "3", ":", "\n", "            ", "img_LQ", "=", "img_LQ", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "", "img_LQ", "=", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "np", ".", "transpose", "(", "img_LQ", ",", "(", "2", ",", "0", ",", "1", ")", ")", ")", ")", ".", "float", "(", ")", "\n", "\n", "return", "{", "'LQ'", ":", "img_LQ", ",", "'LQ_path'", ":", "LQ_path", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.LQ_dataset.LQDataset.__len__": [[46, 48], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "paths_LQ", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__": [[30, 75], ["torch.Dataset.__init__", "logger.info", "range", "Vimeo90K_dataset.Vimeo90KDataset.LQ_frames_list.append", "torch.get_image_paths", "logger.info", "logger.info", "ValueError", "pickle.load", "ValueError", "str", "open"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__init__", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.get_image_paths", "home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.load"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "Vimeo90KDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "# temporal augmentation", "\n", "self", ".", "interval_list", "=", "opt", "[", "'interval_list'", "]", "\n", "self", ".", "random_reverse", "=", "opt", "[", "'random_reverse'", "]", "\n", "logger", ".", "info", "(", "'Temporal augmentation interval list: [{}], with random reverse is {}.'", ".", "format", "(", "\n", "','", ".", "join", "(", "str", "(", "x", ")", "for", "x", "in", "opt", "[", "'interval_list'", "]", ")", ",", "self", ".", "random_reverse", ")", ")", "\n", "\n", "self", ".", "GT_root", ",", "self", ".", "LQ_root", "=", "opt", "[", "'dataroot_GT'", "]", ",", "opt", "[", "'dataroot_LQ'", "]", "\n", "self", ".", "data_type", "=", "self", ".", "opt", "[", "'data_type'", "]", "\n", "self", ".", "LR_input", "=", "False", "if", "opt", "[", "'GT_size'", "]", "==", "opt", "[", "'LQ_size'", "]", "else", "True", "# low resolution inputs", "\n", "\n", "#### determine the LQ frame list", "\n", "'''\n        N | frames\n        1 | 4\n        3 | 3,4,5\n        5 | 2,3,4,5,6\n        7 | 1,2,3,4,5,6,7\n        '''", "\n", "self", ".", "LQ_frames_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "opt", "[", "'N_frames'", "]", ")", ":", "\n", "            ", "self", ".", "LQ_frames_list", ".", "append", "(", "i", "+", "(", "9", "-", "opt", "[", "'N_frames'", "]", ")", "//", "2", ")", "\n", "\n", "#### directly load image keys", "\n", "", "if", "self", ".", "data_type", "==", "'lmdb'", ":", "\n", "            ", "self", ".", "paths_GT", ",", "_", "=", "util", ".", "get_image_paths", "(", "self", ".", "data_type", ",", "opt", "[", "'dataroot_GT'", "]", ")", "\n", "logger", ".", "info", "(", "'Using lmdb meta info for cache keys.'", ")", "\n", "", "elif", "opt", "[", "'cache_keys'", "]", ":", "\n", "            ", "logger", ".", "info", "(", "'Using cache keys: {}'", ".", "format", "(", "opt", "[", "'cache_keys'", "]", ")", ")", "\n", "self", ".", "paths_GT", "=", "pickle", ".", "load", "(", "open", "(", "opt", "[", "'cache_keys'", "]", ",", "'rb'", ")", ")", "[", "'keys'", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Need to create cache keys (meta_info.pkl) by running [create_lmdb.py]'", ")", "\n", "", "assert", "self", ".", "paths_GT", ",", "'Error: GT path is empty.'", "\n", "\n", "if", "self", ".", "data_type", "==", "'lmdb'", ":", "\n", "            ", "self", ".", "GT_env", ",", "self", ".", "LQ_env", "=", "None", ",", "None", "\n", "", "elif", "self", ".", "data_type", "==", "'mc'", ":", "# memcached", "\n", "            ", "self", ".", "mclient", "=", "None", "\n", "", "elif", "self", ".", "data_type", "==", "'img'", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Wrong data type: {}'", ".", "format", "(", "self", ".", "data_type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset._init_lmdb": [[76, 82], ["lmdb.open", "lmdb.open"], "methods", ["None"], ["", "", "def", "_init_lmdb", "(", "self", ")", ":", "\n", "# https://github.com/chainer/chainermn/issues/129", "\n", "        ", "self", ".", "GT_env", "=", "lmdb", ".", "open", "(", "self", ".", "opt", "[", "'dataroot_GT'", "]", ",", "readonly", "=", "True", ",", "lock", "=", "False", ",", "readahead", "=", "False", ",", "\n", "meminit", "=", "False", ")", "\n", "self", ".", "LQ_env", "=", "lmdb", ".", "open", "(", "self", ".", "opt", "[", "'dataroot_LQ'", "]", ",", "readonly", "=", "True", ",", "lock", "=", "False", ",", "readahead", "=", "False", ",", "\n", "meminit", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset._ensure_memcached": [[83, 90], ["mc.MemcachedClient.GetInstance"], "methods", ["None"], ["", "def", "_ensure_memcached", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "mclient", "is", "None", ":", "\n", "# specify the config files", "\n", "            ", "server_list_config_file", "=", "None", "\n", "client_config_file", "=", "None", "\n", "self", ".", "mclient", "=", "mc", ".", "MemcachedClient", ".", "GetInstance", "(", "server_list_config_file", ",", "\n", "client_config_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset._read_img_mc": [[91, 99], ["mc.pyvector", "Vimeo90K_dataset.Vimeo90KDataset.mclient.Get", "mc.ConvertBuffer", "numpy.frombuffer", "cv2.imdecode"], "methods", ["None"], ["", "", "def", "_read_img_mc", "(", "self", ",", "path", ")", ":", "\n", "        ", "''' Return BGR, HWC, [0, 255], uint8'''", "\n", "value", "=", "mc", ".", "pyvector", "(", ")", "\n", "self", ".", "mclient", ".", "Get", "(", "path", ",", "value", ")", "\n", "value_buf", "=", "mc", ".", "ConvertBuffer", "(", "value", ")", "\n", "img_array", "=", "np", ".", "frombuffer", "(", "value_buf", ",", "np", ".", "uint8", ")", "\n", "img", "=", "cv2", ".", "imdecode", "(", "img_array", ",", "cv2", ".", "IMREAD_UNCHANGED", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__getitem__": [[100, 165], ["key.split", "numpy.stack", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "Vimeo90K_dataset.Vimeo90KDataset._ensure_memcached", "Vimeo90K_dataset.Vimeo90KDataset._read_img_mc", "img_LQ_l.append", "img_LQ_l.append", "torch.augment", "Vimeo90K_dataset.Vimeo90KDataset._init_lmdb", "os.join", "data.read_img.astype", "torch.read_img", "torch.read_img", "Vimeo90K_dataset.Vimeo90KDataset._read_img_mc", "random.randint", "random.randint", "random.randint", "random.randint", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "os.join", "os.join", "data.read_img.astype", "torch.read_img", "torch.read_img", "max", "max", "int", "int", "max", "max", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "os.join", "numpy.transpose", "numpy.transpose"], "methods", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset._ensure_memcached", "home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset._read_img_mc", "home.repos.pwc.inspect_result.esw0116_DynaVSR.estimator.preprocessing.augment", "home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset._init_lmdb", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.read_img", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.read_img", "home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset._read_img_mc", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.read_img", "home.repos.pwc.inspect_result.esw0116_DynaVSR.data.util.read_img"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "data_type", "==", "'mc'", ":", "\n", "            ", "self", ".", "_ensure_memcached", "(", ")", "\n", "", "elif", "self", ".", "data_type", "==", "'lmdb'", "and", "(", "self", ".", "GT_env", "is", "None", "or", "self", ".", "LQ_env", "is", "None", ")", ":", "\n", "            ", "self", ".", "_init_lmdb", "(", ")", "\n", "\n", "", "scale", "=", "self", ".", "opt", "[", "'scale'", "]", "\n", "GT_size", "=", "self", ".", "opt", "[", "'GT_size'", "]", "\n", "key", "=", "self", ".", "paths_GT", "[", "index", "]", "\n", "name_a", ",", "name_b", "=", "key", ".", "split", "(", "'_'", ")", "\n", "#### get the GT image (as the center frame)", "\n", "if", "self", ".", "data_type", "==", "'mc'", ":", "\n", "            ", "img_GT", "=", "self", ".", "_read_img_mc", "(", "osp", ".", "join", "(", "self", ".", "GT_root", ",", "name_a", ",", "name_b", ",", "'4.png'", ")", ")", "\n", "img_GT", "=", "img_GT", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.", "\n", "", "elif", "self", ".", "data_type", "==", "'lmdb'", ":", "\n", "            ", "img_GT", "=", "util", ".", "read_img", "(", "self", ".", "GT_env", ",", "key", "+", "'_4'", ",", "(", "3", ",", "256", ",", "448", ")", ")", "\n", "", "else", ":", "\n", "            ", "img_GT", "=", "util", ".", "read_img", "(", "None", ",", "osp", ".", "join", "(", "self", ".", "GT_root", ",", "name_a", ",", "name_b", ",", "'im4.png'", ")", ")", "\n", "\n", "#### get LQ images", "\n", "", "LQ_size_tuple", "=", "(", "3", ",", "64", ",", "112", ")", "if", "self", ".", "LR_input", "else", "(", "3", ",", "256", ",", "448", ")", "\n", "img_LQ_l", "=", "[", "]", "\n", "for", "v", "in", "self", ".", "LQ_frames_list", ":", "\n", "            ", "if", "self", ".", "data_type", "==", "'mc'", ":", "\n", "                ", "img_LQ", "=", "self", ".", "_read_img_mc", "(", "\n", "osp", ".", "join", "(", "self", ".", "LQ_root", ",", "name_a", ",", "name_b", ",", "'{}.png'", ".", "format", "(", "v", ")", ")", ")", "\n", "img_LQ", "=", "img_LQ", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.", "\n", "", "elif", "self", ".", "data_type", "==", "'lmdb'", ":", "\n", "                ", "img_LQ", "=", "util", ".", "read_img", "(", "self", ".", "LQ_env", ",", "key", "+", "'_{}'", ".", "format", "(", "v", ")", ",", "LQ_size_tuple", ")", "\n", "", "else", ":", "\n", "                ", "img_LQ", "=", "util", ".", "read_img", "(", "None", ",", "\n", "osp", ".", "join", "(", "self", ".", "LQ_root", ",", "name_a", ",", "name_b", ",", "'im{}.png'", ".", "format", "(", "v", ")", ")", ")", "\n", "", "img_LQ_l", ".", "append", "(", "img_LQ", ")", "\n", "\n", "", "if", "self", ".", "opt", "[", "'phase'", "]", "==", "'train'", ":", "\n", "            ", "C", ",", "H", ",", "W", "=", "LQ_size_tuple", "# LQ size", "\n", "# randomly crop", "\n", "if", "self", ".", "LR_input", ":", "\n", "                ", "LQ_size", "=", "GT_size", "//", "scale", "\n", "rnd_h", "=", "random", ".", "randint", "(", "0", ",", "max", "(", "0", ",", "H", "-", "LQ_size", ")", ")", "\n", "rnd_w", "=", "random", ".", "randint", "(", "0", ",", "max", "(", "0", ",", "W", "-", "LQ_size", ")", ")", "\n", "img_LQ_l", "=", "[", "v", "[", "rnd_h", ":", "rnd_h", "+", "LQ_size", ",", "rnd_w", ":", "rnd_w", "+", "LQ_size", ",", ":", "]", "for", "v", "in", "img_LQ_l", "]", "\n", "rnd_h_HR", ",", "rnd_w_HR", "=", "int", "(", "rnd_h", "*", "scale", ")", ",", "int", "(", "rnd_w", "*", "scale", ")", "\n", "img_GT", "=", "img_GT", "[", "rnd_h_HR", ":", "rnd_h_HR", "+", "GT_size", ",", "rnd_w_HR", ":", "rnd_w_HR", "+", "GT_size", ",", ":", "]", "\n", "", "else", ":", "\n", "                ", "rnd_h", "=", "random", ".", "randint", "(", "0", ",", "max", "(", "0", ",", "H", "-", "GT_size", ")", ")", "\n", "rnd_w", "=", "random", ".", "randint", "(", "0", ",", "max", "(", "0", ",", "W", "-", "GT_size", ")", ")", "\n", "img_LQ_l", "=", "[", "v", "[", "rnd_h", ":", "rnd_h", "+", "GT_size", ",", "rnd_w", ":", "rnd_w", "+", "GT_size", ",", ":", "]", "for", "v", "in", "img_LQ_l", "]", "\n", "img_GT", "=", "img_GT", "[", "rnd_h", ":", "rnd_h", "+", "GT_size", ",", "rnd_w", ":", "rnd_w", "+", "GT_size", ",", ":", "]", "\n", "\n", "# augmentation - flip, rotate", "\n", "", "img_LQ_l", ".", "append", "(", "img_GT", ")", "\n", "rlt", "=", "util", ".", "augment", "(", "img_LQ_l", ",", "self", ".", "opt", "[", "'use_flip'", "]", ",", "self", ".", "opt", "[", "'use_rot'", "]", ")", "\n", "img_LQ_l", "=", "rlt", "[", "0", ":", "-", "1", "]", "\n", "img_GT", "=", "rlt", "[", "-", "1", "]", "\n", "\n", "# stack LQ images to NHWC, N is the frame number", "\n", "", "img_LQs", "=", "np", ".", "stack", "(", "img_LQ_l", ",", "axis", "=", "0", ")", "\n", "# BGR to RGB, HWC to CHW, numpy to tensor", "\n", "img_GT", "=", "img_GT", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "img_LQs", "=", "img_LQs", "[", ":", ",", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "img_GT", "=", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "np", ".", "transpose", "(", "img_GT", ",", "(", "2", ",", "0", ",", "1", ")", ")", ")", ")", ".", "float", "(", ")", "\n", "img_LQs", "=", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "np", ".", "transpose", "(", "img_LQs", ",", "\n", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", ")", ")", ".", "float", "(", ")", "\n", "return", "{", "'LQs'", ":", "img_LQs", ",", "'GT'", ":", "img_GT", ",", "'key'", ":", "key", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.Vimeo90K_dataset.Vimeo90KDataset.__len__": [[166, 168], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "paths_GT", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.__init__.create_dataloader": [[7, 26], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.esw0116_DynaVSR.baseline.__init__.create_dataset": [[28, 50], ["D", "logging.getLogger", "logging.getLogger.info", "NotImplementedError"], "function", ["None"], []], "home.repos.pwc.inspect_result.esw0116_DynaVSR.options.options.NoneDict.__missing__": [[109, 111], ["None"], "methods", ["None"], ["    ", "def", "__missing__", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.options.options.parse": [[11, 93], ["opt[].items", "opt[].items", "os.abspath", "open", "yaml.load", "dataset[].endswith", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "phase.split", "dataset.get", "os.expanduser", "dataset[].endswith", "dataset.get", "os.expanduser", "dataset[].endswith", "dataset[].replace", "isinstance", "[].items", "os.expanduser", "os.expanduser"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.models.base_model.BaseModel.load"], ["def", "parse", "(", "opt_path", ",", "is_train", "=", "True", ",", "exp_name", "=", "None", ")", ":", "\n", "    ", "with", "open", "(", "opt_path", ",", "mode", "=", "'r'", ")", "as", "f", ":", "\n", "        ", "opt", "=", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "Loader", ")", "\n", "# export CUDA_VISIBLE_DEVICES", "\n", "# gpu_list = ','.join(str(x) for x in opt['gpu_ids'])", "\n", "# os.environ['CUDA_VISIBLE_DEVICES'] = gpu_list", "\n", "# print('export CUDA_VISIBLE_DEVICES=' + gpu_list)", "\n", "", "if", "exp_name", "is", "not", "None", ":", "\n", "        ", "opt", "[", "'name'", "]", "=", "exp_name", "\n", "", "else", ":", "\n", "        ", "'''\n        inner_loop_name = opt['train']['maml']['optimizer'][0] + str(opt['train']['maml']['adapt_iter']) + str(math.floor(math.log10(opt['train']['maml']['lr_alpha'])))\n        meta_loop_name = opt['train']['optim'][0] + str(opt['train']['lr_G'])[0] + str(math.floor(math.log10(opt['train']['lr_G'])))\n        if opt['datasets']['val']['degradation_mode'] == 'set':\n            degradation_name = str(opt['datasets']['val']['degradation_type'])\\\n                    + '_' + str(opt['datasets']['val']['sigma_x']) \\\n                    + '_' + str(opt['datasets']['val']['sigma_y'])\\\n                    + '_' + str(opt['datasets']['val']['theta'])\n        else:\n            degradation_name = opt['datasets']['val']['degradation_mode']\n        patch_name = 'p{}x{}'.format(opt['train']['maml']['patch_size'], opt['train']['maml']['num_patch']) if opt['train']['maml']['use_patch'] else 'full'\n        use_real_flag = '_ideal' if opt['train']['use_real'] else ''\n        opt['name'] = opt['name'] + '_' + inner_loop_name + meta_loop_name + '_' + degradation_name + '_' + patch_name + use_real_flag\n        '''", "\n", "pass", "\n", "", "opt", "[", "'is_train'", "]", "=", "is_train", "\n", "if", "opt", "[", "'distortion'", "]", "==", "'sr'", ":", "\n", "        ", "scale", "=", "opt", "[", "'scale'", "]", "\n", "\n", "# datasets", "\n", "", "for", "phase", ",", "dataset", "in", "opt", "[", "'datasets'", "]", ".", "items", "(", ")", ":", "\n", "        ", "phase", "=", "phase", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "dataset", "[", "'phase'", "]", "=", "phase", "\n", "if", "opt", "[", "'distortion'", "]", "==", "'sr'", ":", "\n", "            ", "dataset", "[", "'scale'", "]", "=", "scale", "\n", "", "is_lmdb", "=", "False", "\n", "if", "dataset", ".", "get", "(", "'dataroot_GT'", ",", "None", ")", "is", "not", "None", ":", "\n", "            ", "dataset", "[", "'dataroot_GT'", "]", "=", "osp", ".", "expanduser", "(", "dataset", "[", "'dataroot_GT'", "]", ")", "\n", "if", "dataset", "[", "'dataroot_GT'", "]", ".", "endswith", "(", "'lmdb'", ")", ":", "\n", "                ", "is_lmdb", "=", "True", "\n", "", "", "if", "dataset", ".", "get", "(", "'dataroot_LQ'", ",", "None", ")", "is", "not", "None", ":", "\n", "            ", "dataset", "[", "'dataroot_LQ'", "]", "=", "osp", ".", "expanduser", "(", "dataset", "[", "'dataroot_LQ'", "]", ")", "\n", "if", "dataset", "[", "'dataroot_LQ'", "]", ".", "endswith", "(", "'lmdb'", ")", ":", "\n", "                ", "is_lmdb", "=", "True", "\n", "", "", "dataset", "[", "'data_type'", "]", "=", "'lmdb'", "if", "is_lmdb", "else", "'img'", "\n", "if", "dataset", "[", "'mode'", "]", ".", "endswith", "(", "'mc'", ")", ":", "# for memcached", "\n", "            ", "dataset", "[", "'data_type'", "]", "=", "'mc'", "\n", "dataset", "[", "'mode'", "]", "=", "dataset", "[", "'mode'", "]", ".", "replace", "(", "'_mc'", ",", "''", ")", "\n", "\n", "# path", "\n", "", "", "for", "key", ",", "path", "in", "opt", "[", "'path'", "]", ".", "items", "(", ")", ":", "\n", "        ", "if", "path", "and", "key", "in", "opt", "[", "'path'", "]", "and", "key", "!=", "'strict_load'", ":", "\n", "            ", "if", "isinstance", "(", "path", ",", "OrderedDict", ")", ":", "\n", "                ", "for", "subkey", ",", "subpath", "in", "opt", "[", "'path'", "]", "[", "key", "]", ".", "items", "(", ")", ":", "\n", "                    ", "if", "subpath", "and", "subkey", "in", "opt", "[", "'path'", "]", "[", "key", "]", ":", "\n", "                        ", "opt", "[", "'path'", "]", "[", "key", "]", "[", "subkey", "]", "=", "osp", ".", "expanduser", "(", "subpath", ")", "\n", "", "", "", "else", ":", "\n", "                ", "opt", "[", "'path'", "]", "[", "key", "]", "=", "osp", ".", "expanduser", "(", "path", ")", "\n", "", "", "", "opt", "[", "'path'", "]", "[", "'root'", "]", "=", "osp", ".", "abspath", "(", "osp", ".", "join", "(", "__file__", ",", "osp", ".", "pardir", ",", "osp", ".", "pardir", ",", "osp", ".", "pardir", ")", ")", "\n", "if", "is_train", ":", "\n", "        ", "experiments_root", "=", "osp", ".", "join", "(", "opt", "[", "'path'", "]", "[", "'root'", "]", ",", "'experiments'", ",", "opt", "[", "'name'", "]", ")", "\n", "opt", "[", "'path'", "]", "[", "'experiments_root'", "]", "=", "experiments_root", "\n", "opt", "[", "'path'", "]", "[", "'models'", "]", "=", "osp", ".", "join", "(", "experiments_root", ",", "'models'", ")", "\n", "opt", "[", "'path'", "]", "[", "'training_state'", "]", "=", "osp", ".", "join", "(", "experiments_root", ",", "'training_state'", ")", "\n", "opt", "[", "'path'", "]", "[", "'log'", "]", "=", "experiments_root", "\n", "opt", "[", "'path'", "]", "[", "'val_images'", "]", "=", "osp", ".", "join", "(", "experiments_root", ",", "'val_images'", ")", "\n", "\n", "# change some options for debug mode", "\n", "if", "'debug'", "in", "opt", "[", "'name'", "]", ":", "\n", "            ", "opt", "[", "'train'", "]", "[", "'val_freq'", "]", "=", "8", "\n", "opt", "[", "'logger'", "]", "[", "'print_freq'", "]", "=", "1", "\n", "opt", "[", "'logger'", "]", "[", "'save_checkpoint_freq'", "]", "=", "8", "\n", "", "", "else", ":", "# test", "\n", "        ", "results_root", "=", "osp", ".", "join", "(", "opt", "[", "'path'", "]", "[", "'root'", "]", ",", "'results'", ",", "opt", "[", "'name'", "]", ")", "\n", "opt", "[", "'path'", "]", "[", "'results_root'", "]", "=", "results_root", "\n", "opt", "[", "'path'", "]", "[", "'log'", "]", "=", "results_root", "\n", "\n", "# network", "\n", "", "if", "opt", "[", "'distortion'", "]", "==", "'sr'", ":", "\n", "        ", "opt", "[", "'network_G'", "]", "[", "'scale'", "]", "=", "scale", "\n", "\n", "", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.options.options.dict2str": [[95, 106], ["opt.items", "isinstance", "options.dict2str", "str"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.options.options.dict2str"], ["", "def", "dict2str", "(", "opt", ",", "indent_l", "=", "1", ")", ":", "\n", "    ", "'''dict to string for logger'''", "\n", "msg", "=", "''", "\n", "for", "k", ",", "v", "in", "opt", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "            ", "msg", "+=", "' '", "*", "(", "indent_l", "*", "2", ")", "+", "k", "+", "':[\\n'", "\n", "msg", "+=", "dict2str", "(", "v", ",", "indent_l", "+", "1", ")", "\n", "msg", "+=", "' '", "*", "(", "indent_l", "*", "2", ")", "+", "']\\n'", "\n", "", "else", ":", "\n", "            ", "msg", "+=", "' '", "*", "(", "indent_l", "*", "2", ")", "+", "k", "+", "': '", "+", "str", "(", "v", ")", "+", "'\\n'", "\n", "", "", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.options.options.dict_to_nonedict": [[114, 124], ["isinstance", "dict", "opt.items", "options.NoneDict", "isinstance", "options.dict_to_nonedict", "options.dict_to_nonedict"], "function", ["home.repos.pwc.inspect_result.esw0116_DynaVSR.options.options.dict_to_nonedict", "home.repos.pwc.inspect_result.esw0116_DynaVSR.options.options.dict_to_nonedict"], ["", "", "def", "dict_to_nonedict", "(", "opt", ")", ":", "\n", "    ", "if", "isinstance", "(", "opt", ",", "dict", ")", ":", "\n", "        ", "new_opt", "=", "dict", "(", ")", "\n", "for", "key", ",", "sub_opt", "in", "opt", ".", "items", "(", ")", ":", "\n", "            ", "new_opt", "[", "key", "]", "=", "dict_to_nonedict", "(", "sub_opt", ")", "\n", "", "return", "NoneDict", "(", "**", "new_opt", ")", "\n", "", "elif", "isinstance", "(", "opt", ",", "list", ")", ":", "\n", "        ", "return", "[", "dict_to_nonedict", "(", "sub_opt", ")", "for", "sub_opt", "in", "opt", "]", "\n", "", "else", ":", "\n", "        ", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.esw0116_DynaVSR.options.options.check_resume": [[126, 141], ["logging.getLogger", "os.join", "logging.getLogger.info", "logging.getLogger.warning", "os.join", "logging.getLogger.info", "opt[].get", "opt[].get"], "function", ["None"], ["", "", "def", "check_resume", "(", "opt", ",", "resume_iter", ")", ":", "\n", "    ", "'''Check resume states and pretrain_model paths'''", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'base'", ")", "\n", "if", "opt", "[", "'path'", "]", "[", "'resume_state'", "]", ":", "\n", "        ", "if", "opt", "[", "'path'", "]", ".", "get", "(", "'pretrain_model_G'", ",", "None", ")", "is", "not", "None", "or", "opt", "[", "'path'", "]", ".", "get", "(", "\n", "'pretrain_model_D'", ",", "None", ")", "is", "not", "None", ":", "\n", "            ", "logger", ".", "warning", "(", "'pretrain_model path will be ignored when resuming training.'", ")", "\n", "\n", "", "opt", "[", "'path'", "]", "[", "'pretrain_model_G'", "]", "=", "osp", ".", "join", "(", "opt", "[", "'path'", "]", "[", "'models'", "]", ",", "\n", "'{}_G.pth'", ".", "format", "(", "resume_iter", ")", ")", "\n", "logger", ".", "info", "(", "'Set [pretrain_model_G] to '", "+", "opt", "[", "'path'", "]", "[", "'pretrain_model_G'", "]", ")", "\n", "if", "'gan'", "in", "opt", "[", "'model'", "]", ":", "\n", "            ", "opt", "[", "'path'", "]", "[", "'pretrain_model_D'", "]", "=", "osp", ".", "join", "(", "opt", "[", "'path'", "]", "[", "'models'", "]", ",", "\n", "'{}_D.pth'", ".", "format", "(", "resume_iter", ")", ")", "\n", "logger", ".", "info", "(", "'Set [pretrain_model_D] to '", "+", "opt", "[", "'path'", "]", "[", "'pretrain_model_D'", "]", ")", "\n", "", "", "", ""]]}