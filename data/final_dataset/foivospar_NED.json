{"home.repos.pwc.inspect_result.foivospar_NED.preprocessing.eye_landmarks.is_image_file": [[13, 15], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.eye_landmarks.get_image_paths": [[16, 26], ["os.path.isdir", "sorted", "os.walk", "sorted", "eye_landmarks.is_image_file", "os.path.join", "image_files.append"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.data.image_folder.is_image_file"], ["", "def", "get_image_paths", "(", "dir", ")", ":", "\n", "# Returns list: [path1, path2, ...]", "\n", "    ", "image_files", "=", "[", "]", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "dir", ")", ",", "'%s is not a valid directory'", "%", "dir", "\n", "for", "root", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "dir", ")", ")", ":", "\n", "        ", "for", "fname", "in", "sorted", "(", "fnames", ")", ":", "\n", "            ", "if", "is_image_file", "(", "fname", ")", ":", "\n", "                ", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "image_files", ".", "append", "(", "path", ")", "\n", "", "", "", "return", "image_files", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.eye_landmarks.mkdir": [[27, 30], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "def", "mkdir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.eye_landmarks.umeyama": [[32, 101], ["src.mean", "dst.mean", "numpy.ones", "numpy.eye", "numpy.linalg.svd", "numpy.linalg.matrix_rank", "numpy.dot", "numpy.linalg.det", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "src_demean.var().sum", "numpy.linalg.det", "numpy.linalg.det", "numpy.dot", "numpy.diag", "numpy.diag", "src_demean.var"], "function", ["None"], ["", "", "def", "umeyama", "(", "src", ",", "dst", ",", "estimate_scale", ")", ":", "\n", "    ", "\"\"\"Estimate N-D similarity transformation with or without scaling.\n    Parameters\n    ----------\n    src : (M, N) array\n        Source coordinates.\n    dst : (M, N) array\n        Destination coordinates.\n    estimate_scale : bool\n        Whether to estimate scaling factor.\n    Returns\n    -------\n    T : (N + 1, N + 1)\n        The homogeneous similarity transformation matrix. The matrix contains\n        NaN values only if the problem is not well-conditioned.\n    References\n    ----------\n    .. [1] \"Least-squares estimation of transformation parameters between two\n            point patterns\", Shinji Umeyama, PAMI 1991, DOI: 10.1109/34.88573\n    \"\"\"", "\n", "\n", "num", "=", "src", ".", "shape", "[", "0", "]", "\n", "dim", "=", "src", ".", "shape", "[", "1", "]", "\n", "\n", "# Compute mean of src and dst.", "\n", "src_mean", "=", "src", ".", "mean", "(", "axis", "=", "0", ")", "\n", "dst_mean", "=", "dst", ".", "mean", "(", "axis", "=", "0", ")", "\n", "\n", "# Subtract mean from src and dst.", "\n", "src_demean", "=", "src", "-", "src_mean", "\n", "dst_demean", "=", "dst", "-", "dst_mean", "\n", "\n", "# Eq. (38).", "\n", "A", "=", "np", ".", "dot", "(", "dst_demean", ".", "T", ",", "src_demean", ")", "/", "num", "\n", "\n", "# Eq. (39).", "\n", "d", "=", "np", ".", "ones", "(", "(", "dim", ",", ")", ",", "dtype", "=", "np", ".", "double", ")", "\n", "if", "np", ".", "linalg", ".", "det", "(", "A", ")", "<", "0", ":", "\n", "        ", "d", "[", "dim", "-", "1", "]", "=", "-", "1", "\n", "\n", "", "T", "=", "np", ".", "eye", "(", "dim", "+", "1", ",", "dtype", "=", "np", ".", "double", ")", "\n", "\n", "U", ",", "S", ",", "V", "=", "np", ".", "linalg", ".", "svd", "(", "A", ")", "\n", "\n", "# Eq. (40) and (43).", "\n", "rank", "=", "np", ".", "linalg", ".", "matrix_rank", "(", "A", ")", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "return", "np", ".", "nan", "*", "T", "\n", "", "elif", "rank", "==", "dim", "-", "1", ":", "\n", "        ", "if", "np", ".", "linalg", ".", "det", "(", "U", ")", "*", "np", ".", "linalg", ".", "det", "(", "V", ")", ">", "0", ":", "\n", "            ", "T", "[", ":", "dim", ",", ":", "dim", "]", "=", "np", ".", "dot", "(", "U", ",", "V", ")", "\n", "", "else", ":", "\n", "            ", "s", "=", "d", "[", "dim", "-", "1", "]", "\n", "d", "[", "dim", "-", "1", "]", "=", "-", "1", "\n", "T", "[", ":", "dim", ",", ":", "dim", "]", "=", "np", ".", "dot", "(", "U", ",", "np", ".", "dot", "(", "np", ".", "diag", "(", "d", ")", ",", "V", ")", ")", "\n", "d", "[", "dim", "-", "1", "]", "=", "s", "\n", "", "", "else", ":", "\n", "        ", "T", "[", ":", "dim", ",", ":", "dim", "]", "=", "np", ".", "dot", "(", "U", ",", "np", ".", "dot", "(", "np", ".", "diag", "(", "d", ")", ",", "V", ")", ")", "\n", "\n", "", "if", "estimate_scale", ":", "\n", "# Eq. (41) and (42).", "\n", "        ", "scale", "=", "1.0", "/", "src_demean", ".", "var", "(", "axis", "=", "0", ")", ".", "sum", "(", ")", "*", "np", ".", "dot", "(", "S", ",", "d", ")", "\n", "", "else", ":", "\n", "        ", "scale", "=", "1.0", "\n", "\n", "", "T", "[", ":", "dim", ",", "dim", "]", "=", "dst_mean", "-", "scale", "*", "np", ".", "dot", "(", "T", "[", ":", "dim", ",", ":", "dim", "]", ",", "src_mean", ".", "T", ")", "\n", "T", "[", ":", "dim", ",", ":", "dim", "]", "*=", "scale", "\n", "\n", "return", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.eye_landmarks.save_results": [[102, 120], ["set", "print", "tqdm.tqdm", "p.replace", "len", "eye_landmarks.mkdir", "range", "numpy.savetxt", "p.replace", "os.path.dirname", "len", "len", "numpy.savetxt", "os.path.splitext", "image_pth.replace", "os.path.splitext", "image_pth.replace"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.renderer.create_inputs.mkdir"], ["", "def", "save_results", "(", "image_pths", ",", "landmarks", ",", "align_transforms", ")", ":", "\n", "# Make dirs", "\n", "    ", "out_pths", "=", "[", "p", ".", "replace", "(", "'/images/'", ",", "'/eye_landmarks/'", ")", "for", "p", "in", "image_pths", "]", "\n", "if", "len", "(", "align_transforms", ")", ">", "0", ":", "\n", "        ", "out_pths", "+=", "[", "p", ".", "replace", "(", "'/images/'", ",", "'/align_transforms/'", ")", "for", "p", "in", "image_pths", "]", "\n", "", "out_paths", "=", "set", "(", "os", ".", "path", ".", "dirname", "(", "out_pth", ")", "for", "out_pth", "in", "out_pths", ")", "\n", "for", "out_path", "in", "out_paths", ":", "\n", "        ", "mkdir", "(", "out_path", ")", "\n", "", "print", "(", "'Saving results'", ")", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "len", "(", "image_pths", ")", ")", ")", ":", "\n", "        ", "image_pth", "=", "image_pths", "[", "i", "]", "\n", "landmark", "=", "landmarks", "[", "i", "]", "\n", "landmark_file", "=", "os", ".", "path", ".", "splitext", "(", "image_pth", ".", "replace", "(", "'/images/'", ",", "'/eye_landmarks/'", ")", ")", "[", "0", "]", "+", "'.txt'", "\n", "np", ".", "savetxt", "(", "landmark_file", ",", "landmark", ")", "\n", "if", "len", "(", "align_transforms", ")", ">", "0", ":", "\n", "            ", "align_file", "=", "os", ".", "path", ".", "splitext", "(", "image_pth", ".", "replace", "(", "'/images/'", ",", "'/align_transforms/'", ")", ")", "[", "0", "]", "+", "'.txt'", "\n", "tr", "=", "align_transforms", "[", "i", "]", "\n", "np", ".", "savetxt", "(", "align_file", ",", "tr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.eye_landmarks.dirs_exist": [[121, 125], ["set", "all", "p.replace", "os.path.dirname", "os.path.exists"], "function", ["None"], ["", "", "", "def", "dirs_exist", "(", "image_pths", ")", ":", "\n", "    ", "lnd_pths", "=", "[", "p", ".", "replace", "(", "'/images/'", ",", "'/eye_landmarks/'", ")", "for", "p", "in", "image_pths", "]", "\n", "out_paths", "=", "set", "(", "os", ".", "path", ".", "dirname", "(", "lnd_pth", ")", "for", "lnd_pth", "in", "lnd_pths", ")", "\n", "return", "all", "(", "[", "os", ".", "path", ".", "exists", "(", "out_path", ")", "for", "out_path", "in", "out_paths", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.eye_landmarks.get_mass_center": [[126, 138], ["numpy.zeros_like", "cv2.fillPoly", "numpy.multiply", "numpy.divide", "numpy.max", "numpy.indices", "numpy.sum", "numpy.sum", "numpy.flip", "numpy.ones_like", "numpy.multiply", "numpy.zeros_like", "numpy.expand_dims"], "function", ["None"], ["", "def", "get_mass_center", "(", "points", ",", "gray", ")", ":", "\n", "    ", "im", "=", "np", ".", "zeros_like", "(", "gray", ")", "\n", "cv2", ".", "fillPoly", "(", "im", ",", "[", "points", "]", ",", "1", ")", "\n", "eyes_image", "=", "np", ".", "multiply", "(", "gray", ",", "im", ")", "\n", "inverse_intensity", "=", "np", ".", "divide", "(", "np", ".", "ones_like", "(", "eyes_image", ")", ",", "eyes_image", ",", "out", "=", "np", ".", "zeros_like", "(", "eyes_image", ")", ",", "where", "=", "eyes_image", "!=", "0", ")", "\n", "max", "=", "np", ".", "max", "(", "inverse_intensity", ")", "\n", "inverse_intensity", "=", "inverse_intensity", "/", "max", "\n", "coordinates_grid", "=", "np", ".", "indices", "(", "(", "gray", ".", "shape", "[", "0", "]", ",", "gray", ".", "shape", "[", "1", "]", ")", ")", "\n", "nom", "=", "np", ".", "sum", "(", "np", ".", "multiply", "(", "coordinates_grid", ",", "np", ".", "expand_dims", "(", "inverse_intensity", ",", "axis", "=", "0", ")", ")", ",", "axis", "=", "(", "1", ",", "2", ")", ")", "\n", "denom", "=", "np", ".", "sum", "(", "inverse_intensity", ")", "\n", "mass_center", "=", "np", ".", "flip", "(", "nom", "/", "denom", ")", "\n", "return", "mass_center", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.eye_landmarks.add_eye_pupils_landmarks": [[139, 148], ["skimage.color.rgb2gray", "get_mass_center().astype", "get_mass_center().astype", "eye_landmarks.get_mass_center", "eye_landmarks.get_mass_center"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.preprocessing.eye_landmarks.get_mass_center", "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.eye_landmarks.get_mass_center"], ["", "def", "add_eye_pupils_landmarks", "(", "points", ",", "image", ")", ":", "\n", "    ", "I", "=", "rgb2gray", "(", "image", ")", "\n", "left_eye_points", "=", "points", "[", ":", "6", ",", ":", "]", "\n", "right_eye_points", "=", "points", "[", "6", ":", "12", ",", ":", "]", "\n", "left_pupil", "=", "get_mass_center", "(", "left_eye_points", ",", "I", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "right_pupil", "=", "get_mass_center", "(", "right_eye_points", ",", "I", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "points", "[", "12", ",", ":", "]", "=", "left_pupil", "\n", "points", "[", "13", ",", ":", "]", "=", "right_pupil", "\n", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.eye_landmarks.detect_landmarks": [[149, 196], ["tqdm.tqdm", "range", "skimage.io.imread", "predictor.get_landmarks_from_image", "len", "numpy.empty", "eye_landmarks.add_eye_pupils_landmarks", "landmarks.append", "print", "landmarks.append", "len", "print", "align_transforms.append", "numpy.concatenate", "align_transforms.append", "numpy.mean", "eye_landmarks.umeyama", "numpy.stack", "numpy.array().astype", "cv2.warpAffine", "predictor.get_landmarks_from_image", "np.mean.append", "numpy.array"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.preprocessing.eye_landmarks.add_eye_pupils_landmarks", "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.eye_landmarks.umeyama"], ["", "def", "detect_landmarks", "(", "img_paths", ",", "predictor", ",", "device", ",", "mouth", ",", "template", "=", "None", ",", "multisample", "=", "True", ")", ":", "\n", "    ", "landmarks", "=", "[", "]", "\n", "prev_points", "=", "None", "\n", "align_transforms", "=", "[", "]", "\n", "prev_aligns", "=", "None", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "len", "(", "img_paths", ")", ")", ")", ":", "\n", "        ", "img", "=", "io", ".", "imread", "(", "img_paths", "[", "i", "]", ")", "\n", "preds", "=", "predictor", ".", "get_landmarks_from_image", "(", "img", ")", "\n", "if", "preds", "is", "not", "None", ":", "\n", "            ", "if", "len", "(", "preds", ")", ">", "2", ":", "\n", "                ", "print", "(", "'More than one faces were found in %s'", "%", "img_paths", "[", "i", "]", ")", "\n", "\n", "# face alignment", "\n", "", "if", "template", "is", "not", "None", ":", "\n", "                ", "if", "multisample", ":", "\n", "                    ", "lnds", "=", "[", "preds", "[", "0", "]", "]", "\n", "tx", "=", "[", "-", "5", ",", "+", "5", "]", "\n", "ty", "=", "[", "-", "5", ",", "+", "5", "]", "\n", "for", "x", "in", "tx", ":", "\n", "                        ", "for", "y", "in", "ty", ":", "\n", "                            ", "mat", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "x", "]", ",", "\n", "[", "0", ",", "1", ",", "y", "]", "]", ")", ".", "astype", "(", "float", ")", "\n", "img_t", "=", "cv2", ".", "warpAffine", "(", "img", ",", "mat", ",", "(", "img", ".", "shape", "[", "1", "]", ",", "img", ".", "shape", "[", "0", "]", ")", ",", "flags", "=", "cv2", ".", "INTER_LANCZOS4", ")", "\n", "preds_t", "=", "predictor", ".", "get_landmarks_from_image", "(", "img_t", ")", "\n", "if", "preds_t", "is", "not", "None", ":", "\n", "                                ", "lnds", ".", "append", "(", "preds_t", "[", "0", "]", ")", "\n", "", "", "", "lnds", "=", "np", ".", "mean", "(", "np", ".", "stack", "(", "lnds", ")", ",", "0", ")", "\n", "", "else", ":", "\n", "                    ", "lnds", "=", "preds", "[", "0", "]", "\n", "", "align", "=", "umeyama", "(", "lnds", ",", "template", ",", "True", ")", "[", "0", ":", "2", "]", "\n", "prev_aligns", "=", "align", "\n", "align_transforms", ".", "append", "(", "align", ")", "\n", "\n", "", "points", "=", "np", ".", "empty", "(", "[", "14", ",", "2", "]", ",", "dtype", "=", "int", ")", "\n", "points", "[", ":", "6", "]", "=", "preds", "[", "0", "]", "[", "36", ":", "42", ",", ":", "]", "# left-eye landmarks", "\n", "points", "[", "6", ":", "12", "]", "=", "preds", "[", "0", "]", "[", "42", ":", "48", ",", ":", "]", "# right-eye landmarks", "\n", "points", "=", "add_eye_pupils_landmarks", "(", "points", ",", "img", ")", "\n", "if", "mouth", ":", "\n", "                ", "points", "=", "np", ".", "concatenate", "(", "[", "points", ",", "preds", "[", "0", "]", "[", "48", ":", ",", ":", "]", "]", ",", "0", ")", "# mouth landmarks", "\n", "", "prev_points", "=", "points", "\n", "landmarks", ".", "append", "(", "points", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'No face detected, using previous landmarks'", ")", "\n", "landmarks", ".", "append", "(", "prev_points", ")", "\n", "if", "template", "is", "not", "None", ":", "\n", "                ", "align_transforms", ".", "append", "(", "prev_aligns", ")", "\n", "", "", "", "return", "landmarks", ",", "align_transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.eye_landmarks.print_args": [[197, 208], ["sorted", "print", "vars().items", "parser.get_default", "str", "str", "vars", "str"], "function", ["None"], ["", "def", "print_args", "(", "parser", ",", "args", ")", ":", "\n", "    ", "message", "=", "''", "\n", "message", "+=", "'----------------- Arguments ---------------\\n'", "\n", "for", "k", ",", "v", "in", "sorted", "(", "vars", "(", "args", ")", ".", "items", "(", ")", ")", ":", "\n", "        ", "comment", "=", "''", "\n", "default", "=", "parser", ".", "get_default", "(", "k", ")", "\n", "if", "v", "!=", "default", ":", "\n", "            ", "comment", "=", "'\\t[default: %s]'", "%", "str", "(", "default", ")", "\n", "", "message", "+=", "'{:>25}: {:<30}{}\\n'", ".", "format", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ",", "comment", ")", "\n", "", "message", "+=", "'-------------------------------------------'", "\n", "print", "(", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.eye_landmarks.main": [[209, 247], ["print", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "int", "eye_landmarks.print_args", "face_alignment.FaceAlignment", "os.path.join", "eye_landmarks.get_image_paths", "torch.cuda.is_available", "numpy.loadtxt", "eye_landmarks.dirs_exist", "eye_landmarks.detect_landmarks", "eye_landmarks.save_results", "print", "print", "print", "exit", "torch.cuda.device_count", "str"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.utils.config.parse_args", "home.repos.pwc.inspect_result.foivospar_NED.renderer.create_inputs.print_args", "home.repos.pwc.inspect_result.foivospar_NED.models.base_model.BaseModel.get_image_paths", "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.align.dirs_exist", "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.eye_landmarks.detect_landmarks", "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.segment_face.save_results"], ["", "def", "main", "(", ")", ":", "\n", "    ", "print", "(", "'---------- Eye-landmarks detection --------- \\n'", ")", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_id'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "help", "=", "'Negative value to use CPU, or greater or equal than zero for GPU id.'", ")", "\n", "parser", ".", "add_argument", "(", "'--celeb'", ",", "type", "=", "str", ",", "default", "=", "'JackNicholson'", ",", "help", "=", "'Path to celebrity folder.'", ")", "\n", "parser", ".", "add_argument", "(", "'--mouth'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Whether to save mouth landmarks too (used for training with mouth discriminator).'", ")", "\n", "parser", ".", "add_argument", "(", "'--align'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Whether to calculate and save alignment transformations.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "# Figure out the device", "\n", "gpu_id", "=", "int", "(", "args", ".", "gpu_id", ")", "\n", "if", "gpu_id", "<", "0", ":", "\n", "        ", "device", "=", "'cpu'", "\n", "", "elif", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "if", "gpu_id", ">=", "torch", ".", "cuda", ".", "device_count", "(", ")", ":", "\n", "            ", "device", "=", "'cuda:0'", "\n", "", "else", ":", "\n", "            ", "device", "=", "'cuda:'", "+", "str", "(", "gpu_id", ")", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "'GPU device not available. Exit'", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "# Print Arguments", "\n", "", "print_args", "(", "parser", ",", "args", ")", "\n", "\n", "predictor", "=", "face_alignment", ".", "FaceAlignment", "(", "face_alignment", ".", "LandmarksType", ".", "_2D", ",", "device", "=", "device", ",", "face_detector", "=", "'sfd'", ")", "\n", "template", "=", "np", ".", "loadtxt", "(", "'preprocessing/files/template.gz'", ")", "if", "args", ".", "align", "else", "None", "# template 68 landmarks (for face alignment)", "\n", "\n", "# Get the path of each image.", "\n", "images_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "celeb", ",", "'images'", ")", "\n", "image_paths", "=", "get_image_paths", "(", "images_dir", ")", "\n", "\n", "if", "not", "dirs_exist", "(", "image_paths", ")", ":", "\n", "        ", "landmarks", ",", "align_transforms", "=", "detect_landmarks", "(", "image_paths", ",", "predictor", ",", "device", ",", "args", ".", "mouth", ",", "template", "=", "template", ")", "\n", "save_results", "(", "image_paths", ",", "landmarks", ",", "align_transforms", ")", "\n", "print", "(", "'DONE!'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Eye-landmarks detection already done!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.reconstruct.mkdir": [[19, 22], ["os.path.exists", "os.makedirs"], "function", ["None"], ["def", "mkdir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.reconstruct.dirs_exist": [[23, 32], ["all", "os.path.join", "out_pths.append", "out_pths.append", "out_pths.append", "os.path.join", "os.path.join", "os.path.join", "os.path.exists"], "function", ["None"], ["", "", "def", "dirs_exist", "(", "args", ")", ":", "\n", "    ", "out_pths", "=", "[", "os", ".", "path", ".", "join", "(", "args", ".", "celeb", ",", "'DECA'", ")", "]", "\n", "if", "args", ".", "save_renderings", ":", "\n", "        ", "out_pths", ".", "append", "(", "os", ".", "path", ".", "join", "(", "args", ".", "celeb", ",", "'renderings'", ")", ")", "\n", "", "if", "args", ".", "save_shapes", ":", "\n", "        ", "out_pths", ".", "append", "(", "os", ".", "path", ".", "join", "(", "args", ".", "celeb", ",", "'shapes'", ")", ")", "\n", "", "if", "args", ".", "save_nmfcs", ":", "\n", "        ", "out_pths", ".", "append", "(", "os", ".", "path", ".", "join", "(", "args", ".", "celeb", ",", "'nmfcs'", ")", ")", "\n", "", "return", "all", "(", "[", "os", ".", "path", ".", "exists", "(", "out_path", ")", "for", "out_path", "in", "out_pths", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.reconstruct.print_args": [[33, 44], ["sorted", "print", "vars().items", "parser.get_default", "str", "str", "vars", "str"], "function", ["None"], ["", "def", "print_args", "(", "parser", ",", "args", ")", ":", "\n", "    ", "message", "=", "''", "\n", "message", "+=", "'----------------- Arguments ---------------\\n'", "\n", "for", "k", ",", "v", "in", "sorted", "(", "vars", "(", "args", ")", ".", "items", "(", ")", ")", ":", "\n", "        ", "comment", "=", "''", "\n", "default", "=", "parser", ".", "get_default", "(", "k", ")", "\n", "if", "v", "!=", "default", ":", "\n", "            ", "comment", "=", "'\\t[default: %s]'", "%", "str", "(", "default", ")", "\n", "", "message", "+=", "'{:>25}: {:<30}{}\\n'", ".", "format", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ",", "comment", ")", "\n", "", "message", "+=", "'-------------------------------------------'", "\n", "print", "(", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.reconstruct.main": [[45, 123], ["print", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "int", "reconstruct.print_args", "os.path.join", "DECA.decalib.datasets.datasets.TestData", "numpy.loadtxt", "torch.cuda.is_available", "torch.cuda.is_available", "reconstruct.dirs_exist", "DECA.decalib.deca.DECA", "print", "tqdm.tqdm", "print", "print", "print", "exit", "range", "torch.cuda.device_count", "torch.cuda.device_count", "len", "[].to", "torch.no_grad", "torch.no_grad", "DECA.decalib.deca.DECA.encode", "reconstruct.mkdir", "reconstruct.mkdir", "img_pth.replace", "torch.grid_sample", "skimage.transform.warp", "cv2.imwrite", "reconstruct.mkdir", "img_pth.replace", "skimage.transform.warp", "cv2.imwrite", "reconstruct.mkdir", "img_pth.replace", "skimage.transform.warp", "cv2.imwrite", "str", "os.path.dirname", "open", "pickle.dump", "DECA.decalib.deca.DECA.decode", "os.path.dirname", "opdict[].detach", "os.path.dirname", "os.path.dirname", "img_pth.replace", "codedict[].cpu().numpy", "os.path.splitext", "img_pth.replace", "DECA.decalib.utils.util.tensor2image", "img_pth.replace", "DECA.decalib.utils.util.tensor2image", "img_pth.replace", "DECA.decalib.utils.util.tensor2image", "img_pth.replace", "codedict[].cpu"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.utils.config.parse_args", "home.repos.pwc.inspect_result.foivospar_NED.renderer.create_inputs.print_args", "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.align.dirs_exist", "home.repos.pwc.inspect_result.foivospar_NED.decalib.deca.DECA.encode", "home.repos.pwc.inspect_result.foivospar_NED.renderer.create_inputs.mkdir", "home.repos.pwc.inspect_result.foivospar_NED.renderer.create_inputs.mkdir", "home.repos.pwc.inspect_result.foivospar_NED.renderer.create_inputs.mkdir", "home.repos.pwc.inspect_result.foivospar_NED.renderer.create_inputs.mkdir", "home.repos.pwc.inspect_result.foivospar_NED.decalib.deca.DECA.decode", "home.repos.pwc.inspect_result.foivospar_NED.utils.util.tensor2image", "home.repos.pwc.inspect_result.foivospar_NED.utils.util.tensor2image", "home.repos.pwc.inspect_result.foivospar_NED.utils.util.tensor2image"], ["", "def", "main", "(", ")", ":", "\n", "    ", "print", "(", "'---------- 3D face reconstruction (DECA) --------- \\n'", ")", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--celeb'", ",", "type", "=", "str", ",", "default", "=", "'JackNicholson'", ",", "help", "=", "'Path to celebrity folder.'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_id'", ",", "type", "=", "int", ",", "default", "=", "'0'", ",", "help", "=", "'Negative value to use CPU, or greater equal than zero for GPU id.'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_renderings'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Save the rendering images.'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_shapes'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Save the detailed shape produced by DECA.'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_nmfcs'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Save the nmfc produced by DECA.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "# Figure out the device", "\n", "gpu_id", "=", "int", "(", "args", ".", "gpu_id", ")", "\n", "if", "gpu_id", "<", "0", ":", "\n", "        ", "device", "=", "'cpu'", "\n", "", "elif", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "if", "gpu_id", ">=", "torch", ".", "cuda", ".", "device_count", "(", ")", ":", "\n", "            ", "device", "=", "'cuda:0'", "\n", "", "else", ":", "\n", "            ", "device", "=", "'cuda:'", "+", "str", "(", "gpu_id", ")", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "'GPU device not available. Exit'", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "# Print Arguments", "\n", "", "print_args", "(", "parser", ",", "args", ")", "\n", "\n", "# load test images", "\n", "images_folder", "=", "os", ".", "path", ".", "join", "(", "args", ".", "celeb", ",", "'images'", ")", "\n", "dataset", "=", "datasets", ".", "TestData", "(", "images_folder", ",", "iscrop", "=", "True", ",", "face_detector", "=", "'fan'", ",", "scale", "=", "1.25", ",", "device", "=", "device", ")", "\n", "template", "=", "np", ".", "loadtxt", "(", "'preprocessing/files/template.gz'", ")", "\n", "\n", "if", "not", "dirs_exist", "(", "args", ")", ":", "\n", "\n", "# run DECA", "\n", "        ", "deca_cfg", ".", "model", ".", "use_tex", "=", "True", "\n", "deca", "=", "DECA", "(", "config", "=", "deca_cfg", ",", "device", "=", "device", ")", "\n", "\n", "print", "(", "'Reconstructing faces and saving results'", ")", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "len", "(", "dataset", ")", ")", ")", ":", "\n", "            ", "img_pth", "=", "dataset", "[", "i", "]", "[", "'imagepath'", "]", "\n", "images", "=", "dataset", "[", "i", "]", "[", "'image'", "]", ".", "to", "(", "device", ")", "[", "None", ",", "...", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "codedict", "=", "deca", ".", "encode", "(", "images", ")", "\n", "mkdir", "(", "os", ".", "path", ".", "dirname", "(", "img_pth", ".", "replace", "(", "'/images'", ",", "'/DECA'", ")", ")", ")", "\n", "new_codedict", "=", "{", "}", "\n", "for", "key", "in", "codedict", ":", "\n", "                    ", "if", "key", "!=", "'images'", ":", "\n", "                        ", "new_codedict", "[", "key", "]", "=", "codedict", "[", "key", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "", "new_codedict", "[", "'tform'", "]", "=", "dataset", "[", "i", "]", "[", "'tform'", "]", "\n", "new_codedict", "[", "'original_size'", "]", "=", "dataset", "[", "i", "]", "[", "'original_size'", "]", "\n", "codedict_pth", "=", "os", ".", "path", ".", "splitext", "(", "img_pth", ".", "replace", "(", "'/images'", ",", "'/DECA'", ")", ")", "[", "0", "]", "+", "'.pkl'", "\n", "with", "open", "(", "codedict_pth", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                    ", "pickle", ".", "dump", "(", "new_codedict", ",", "f", ")", "\n", "\n", "", "if", "args", ".", "save_renderings", "or", "args", ".", "save_shapes", "or", "args", ".", "save_nmfcs", ":", "\n", "                    ", "opdict", ",", "visdict", "=", "deca", ".", "decode", "(", "codedict", ")", "\n", "\n", "", "", "if", "args", ".", "save_renderings", ":", "\n", "                ", "mkdir", "(", "os", ".", "path", ".", "dirname", "(", "img_pth", ".", "replace", "(", "'/images'", ",", "'/renderings'", ")", ")", ")", "\n", "rendering_pth", "=", "img_pth", ".", "replace", "(", "'/images'", ",", "'/renderings'", ")", "\n", "detail_image", "=", "F", ".", "grid_sample", "(", "opdict", "[", "'uv_texture'", "]", ",", "opdict", "[", "'grid'", "]", ".", "detach", "(", ")", ",", "align_corners", "=", "False", ")", "\n", "detail_image", "=", "warp", "(", "util", ".", "tensor2image", "(", "detail_image", "[", "0", "]", ")", "/", "255", ",", "dataset", "[", "i", "]", "[", "'tform'", "]", ",", "output_shape", "=", "(", "dataset", "[", "i", "]", "[", "'original_size'", "]", "[", "1", "]", ",", "dataset", "[", "i", "]", "[", "'original_size'", "]", "[", "0", "]", ")", ")", "\n", "cv2", ".", "imwrite", "(", "rendering_pth", ",", "(", "detail_image", "*", "255", ")", ".", "astype", "(", "int", ")", ")", "\n", "\n", "", "if", "args", ".", "save_shapes", ":", "\n", "                ", "mkdir", "(", "os", ".", "path", ".", "dirname", "(", "img_pth", ".", "replace", "(", "'/images'", ",", "'/shapes'", ")", ")", ")", "\n", "shape_pth", "=", "img_pth", ".", "replace", "(", "'/images'", ",", "'/shapes'", ")", "\n", "shape_image", "=", "warp", "(", "util", ".", "tensor2image", "(", "visdict", "[", "'shape_detail_images'", "]", "[", "0", "]", ")", "/", "255", ",", "dataset", "[", "i", "]", "[", "'tform'", "]", ",", "output_shape", "=", "(", "dataset", "[", "i", "]", "[", "'original_size'", "]", "[", "1", "]", ",", "dataset", "[", "i", "]", "[", "'original_size'", "]", "[", "0", "]", ")", ")", "\n", "cv2", ".", "imwrite", "(", "shape_pth", ",", "(", "shape_image", "*", "255", ")", ".", "astype", "(", "int", ")", ")", "\n", "\n", "", "if", "args", ".", "save_nmfcs", ":", "\n", "                ", "mkdir", "(", "os", ".", "path", ".", "dirname", "(", "img_pth", ".", "replace", "(", "'/images'", ",", "'/nmfcs'", ")", ")", ")", "\n", "nmfc_pth", "=", "img_pth", ".", "replace", "(", "'/images'", ",", "'/nmfcs'", ")", "\n", "nmfc_image", "=", "warp", "(", "util", ".", "tensor2image", "(", "visdict", "[", "'nmfcs'", "]", "[", "0", "]", ")", "/", "255", ",", "dataset", "[", "i", "]", "[", "'tform'", "]", ",", "output_shape", "=", "(", "dataset", "[", "i", "]", "[", "'original_size'", "]", "[", "1", "]", ",", "dataset", "[", "i", "]", "[", "'original_size'", "]", "[", "0", "]", ")", ")", "\n", "cv2", ".", "imwrite", "(", "nmfc_pth", ",", "(", "nmfc_image", "*", "255", ")", ".", "astype", "(", "int", ")", ")", "\n", "", "", "print", "(", "'DONE!'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'3D face reconstruction already done!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.segment_face.is_image_file": [[14, 16], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.segment_face.get_image_paths": [[17, 27], ["os.path.isdir", "sorted", "os.walk", "sorted", "segment_face.is_image_file", "os.path.join", "image_files.append"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.data.image_folder.is_image_file"], ["", "def", "get_image_paths", "(", "dir", ")", ":", "\n", "# Returns list: [path1, path2, ...]", "\n", "    ", "image_files", "=", "[", "]", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "dir", ")", ",", "'%s is not a valid directory'", "%", "dir", "\n", "for", "root", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "dir", ")", ")", ":", "\n", "        ", "for", "fname", "in", "sorted", "(", "fnames", ")", ":", "\n", "            ", "if", "is_image_file", "(", "fname", ")", ":", "\n", "                ", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "image_files", ".", "append", "(", "path", ")", "\n", "", "", "", "return", "image_files", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.segment_face.mkdir": [[28, 31], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "def", "mkdir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.segment_face.save_results": [[32, 44], ["set", "print", "tqdm.tqdm", "p.replace", "segment_face.mkdir", "segment_face.mkdir", "zip", "cv2.imread", "cv2.imwrite", "cv2.imwrite", "os.path.dirname", "out_path.replace", "len", "image_pth.replace", "skimage.img_as_ubyte", "image_pth.replace"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.renderer.create_inputs.mkdir", "home.repos.pwc.inspect_result.foivospar_NED.renderer.create_inputs.mkdir"], ["", "", "def", "save_results", "(", "image_pths", ",", "masks", ")", ":", "\n", "# Make dirs", "\n", "    ", "mask_pths", "=", "[", "p", ".", "replace", "(", "'/images/'", ",", "'/masks/'", ")", "for", "p", "in", "image_pths", "]", "\n", "out_paths", "=", "set", "(", "os", ".", "path", ".", "dirname", "(", "mask_pth", ")", "for", "mask_pth", "in", "mask_pths", ")", "\n", "for", "out_path", "in", "out_paths", ":", "\n", "        ", "mkdir", "(", "out_path", ")", "\n", "mkdir", "(", "out_path", ".", "replace", "(", "'/masks'", ",", "'/faces'", ")", ")", "\n", "", "print", "(", "'Saving results'", ")", "\n", "for", "mask", ",", "image_pth", "in", "tqdm", "(", "zip", "(", "masks", ",", "image_pths", ")", ",", "total", "=", "len", "(", "image_pths", ")", ")", ":", "\n", "        ", "image", "=", "cv2", ".", "imread", "(", "image_pth", ")", "\n", "cv2", ".", "imwrite", "(", "image_pth", ".", "replace", "(", "'/images/'", ",", "'/masks/'", ")", ",", "img_as_ubyte", "(", "mask", ")", ")", "\n", "cv2", ".", "imwrite", "(", "image_pth", ".", "replace", "(", "'/images/'", ",", "'/faces/'", ")", ",", "image", "*", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.segment_face.dirs_exist": [[45, 49], ["set", "all", "p.replace", "os.path.dirname", "os.path.exists"], "function", ["None"], ["", "", "def", "dirs_exist", "(", "image_pths", ")", ":", "\n", "    ", "mask_pths", "=", "[", "p", ".", "replace", "(", "'/images/'", ",", "'/masks/'", ")", "for", "p", "in", "image_pths", "]", "\n", "out_paths", "=", "set", "(", "os", ".", "path", ".", "dirname", "(", "mask_pth", ")", "for", "mask_pth", "in", "mask_pths", ")", "\n", "return", "all", "(", "[", "os", ".", "path", ".", "exists", "(", "out_path", ")", "for", "out_path", "in", "out_paths", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.segment_face.getLargestCC": [[50, 57], ["skimage.measure.label", "numpy.unique", "list", "max", "zip"], "function", ["None"], ["", "def", "getLargestCC", "(", "segmentation", ")", ":", "\n", "    ", "labels", "=", "label", "(", "segmentation", ")", "\n", "unique", ",", "counts", "=", "np", ".", "unique", "(", "labels", ",", "return_counts", "=", "True", ")", "\n", "list_seg", "=", "list", "(", "zip", "(", "unique", ",", "counts", ")", ")", "[", "1", ":", "]", "# the 0 label is by default background so take the rest", "\n", "largest", "=", "max", "(", "list_seg", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "\n", "labels_max", "=", "(", "labels", "==", "largest", ")", "\n", "return", "labels_max", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.segment_face.get_face_masks": [[58, 85], ["print", "tqdm.tqdm", "range", "skimage.img_as_float32", "torch.from_numpy().permute().unsqueeze().to", "predictor", "smoother", "getLargestCC.squeeze().permute().cpu().numpy", "len", "skimage.io.imread", "predictor.argmax", "segment_face.getLargestCC", "masks.append", "print", "masks.append", "torch.from_numpy().permute().unsqueeze", "getLargestCC.squeeze().permute().cpu", "torch.from_numpy().permute", "getLargestCC.squeeze().permute", "torch.from_numpy", "getLargestCC.squeeze"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.preprocessing.segment_face.getLargestCC"], ["", "def", "get_face_masks", "(", "img_paths", ",", "predictor", ",", "smoother", ",", "device", ")", ":", "\n", "    ", "print", "(", "'Extracting face masks'", ")", "\n", "masks", "=", "[", "]", "\n", "prev_mask", "=", "None", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "len", "(", "img_paths", ")", ")", ")", ":", "\n", "        ", "img", "=", "img_as_float32", "(", "io", ".", "imread", "(", "img_paths", "[", "i", "]", ")", ")", "\n", "\n", "# convert to torch.tensor, change position of channel dim, and add batch dim", "\n", "im_tensor", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "# predict face mask", "\n", "pred", "=", "predictor", "(", "im_tensor", ")", "# 3-channel image for 3-wise segmentation (background, face, hair)", "\n", "mask", "=", "(", "pred", ".", "argmax", "(", "1", ",", "keepdim", "=", "True", ")", "==", "1", ")", "\n", "_", ",", "mask", "=", "smoother", "(", "mask", ")", "# soft erosion", "\n", "\n", "# convert to single-channel image", "\n", "mask", "=", "mask", ".", "squeeze", "(", "0", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "True", "in", "mask", ":", "\n", "# keep only the largest connected component if more than one found", "\n", "            ", "mask", "=", "getLargestCC", "(", "mask", ")", "\n", "prev_mask", "=", "mask", "\n", "masks", ".", "append", "(", "mask", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'No face mask detected, using previous mask'", ")", "\n", "masks", ".", "append", "(", "prev_mask", ")", "\n", "\n", "", "", "return", "masks", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.segment_face.print_args": [[86, 97], ["sorted", "print", "vars().items", "parser.get_default", "str", "str", "vars", "str"], "function", ["None"], ["", "def", "print_args", "(", "parser", ",", "args", ")", ":", "\n", "    ", "message", "=", "''", "\n", "message", "+=", "'----------------- Arguments ---------------\\n'", "\n", "for", "k", ",", "v", "in", "sorted", "(", "vars", "(", "args", ")", ".", "items", "(", ")", ")", ":", "\n", "        ", "comment", "=", "''", "\n", "default", "=", "parser", ".", "get_default", "(", "k", ")", "\n", "if", "v", "!=", "default", ":", "\n", "            ", "comment", "=", "'\\t[default: %s]'", "%", "str", "(", "default", ")", "\n", "", "message", "+=", "'{:>25}: {:<30}{}\\n'", ".", "format", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ",", "comment", ")", "\n", "", "message", "+=", "'-------------------------------------------'", "\n", "print", "(", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.segment_face.main": [[98, 138], ["print", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "int", "segment_face.print_args", "torch.load", "preprocessing.segmentation.simple_unet.UNet().to", "UNet().to.load_state_dict", "postprocessing.image_blending.image_blender.SoftErosion().to", "os.path.join", "segment_face.get_image_paths", "torch.cuda.is_available", "segment_face.dirs_exist", "segment_face.get_face_masks", "segment_face.save_results", "print", "print", "print", "exit", "preprocessing.segmentation.simple_unet.UNet", "postprocessing.image_blending.image_blender.SoftErosion", "torch.cuda.device_count", "str"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.utils.config.parse_args", "home.repos.pwc.inspect_result.foivospar_NED.renderer.create_inputs.print_args", "home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.foivospar_NED.models.frnet.load_state_dict", "home.repos.pwc.inspect_result.foivospar_NED.models.base_model.BaseModel.get_image_paths", "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.align.dirs_exist", "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.segment_face.get_face_masks", "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.segment_face.save_results"], ["", "def", "main", "(", ")", ":", "\n", "    ", "print", "(", "'---------- Face segmentation --------- \\n'", ")", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_id'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "help", "=", "'Negative value to use CPU, or greater or equal than zero for GPU id.'", ")", "\n", "parser", ".", "add_argument", "(", "'--celeb'", ",", "type", "=", "str", ",", "default", "=", "'JackNicholson'", ",", "help", "=", "'Path to celebrity folder.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "# Figure out the device", "\n", "gpu_id", "=", "int", "(", "args", ".", "gpu_id", ")", "\n", "if", "gpu_id", "<", "0", ":", "\n", "        ", "device", "=", "'cpu'", "\n", "", "elif", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "if", "gpu_id", ">=", "torch", ".", "cuda", ".", "device_count", "(", ")", ":", "\n", "            ", "device", "=", "'cuda:0'", "\n", "", "else", ":", "\n", "            ", "device", "=", "'cuda:'", "+", "str", "(", "gpu_id", ")", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "'GPU device not available. Exit'", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "# Print Arguments", "\n", "", "print_args", "(", "parser", ",", "args", ")", "\n", "\n", "# Load pretrained face segmenter", "\n", "segmenter_path", "=", "'preprocessing/segmentation/lfw_figaro_unet_256_2_0_segmentation_v1.pth'", "\n", "checkpoint", "=", "torch", ".", "load", "(", "segmenter_path", ")", "\n", "predictor", "=", "UNet", "(", "n_classes", "=", "3", ",", "feature_scale", "=", "1", ")", ".", "to", "(", "device", ")", "\n", "predictor", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "smooth_mask", "=", "SoftErosion", "(", "kernel_size", "=", "21", ",", "threshold", "=", "0.6", ")", ".", "to", "(", "device", ")", "\n", "\n", "# Get the path of each image.", "\n", "images_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "celeb", ",", "'images'", ")", "\n", "image_paths", "=", "get_image_paths", "(", "images_dir", ")", "\n", "\n", "if", "not", "dirs_exist", "(", "image_paths", ")", ":", "\n", "        ", "masks", "=", "get_face_masks", "(", "image_paths", ",", "predictor", ",", "smooth_mask", ",", "device", ")", "\n", "save_results", "(", "image_paths", ",", "masks", ")", "\n", "print", "(", "'DONE!'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Face segmentation already done!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.detect.is_video_file": [[14, 16], ["any", "filename.endswith"], "function", ["None"], ["def", "is_video_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "VID_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.detect.tensor2npimage": [[17, 27], ["isinstance", "image_tensor.cpu().float().numpy", "numpy.clip", "np.clip.astype", "range", "len", "np.clip.append", "image_tensor.cpu().float", "detect.tensor2npimage", "image_tensor.cpu"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.preprocessing.detect.tensor2npimage"], ["", "def", "tensor2npimage", "(", "image_tensor", ",", "imtype", "=", "np", ".", "uint8", ")", ":", "\n", "# Tesnor in range [0,255]", "\n", "    ", "if", "isinstance", "(", "image_tensor", ",", "list", ")", ":", "\n", "        ", "image_numpy", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "image_tensor", ")", ")", ":", "\n", "            ", "image_numpy", ".", "append", "(", "tensor2npimage", "(", "image_tensor", "[", "i", "]", ",", "imtype", ")", ")", "\n", "", "return", "image_numpy", "\n", "", "image_numpy", "=", "image_tensor", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "numpy", "(", ")", "\n", "image_numpy", "=", "np", ".", "clip", "(", "image_numpy", ",", "0", ",", "255", ")", "\n", "return", "image_numpy", ".", "astype", "(", "imtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.detect.save_image": [[28, 33], ["PIL.Image.fromarray", "Image.fromarray.save", "numpy.transpose"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.models.base_model.BaseModel.save"], ["", "def", "save_image", "(", "image_numpy", ",", "image_path", ",", "transpose", "=", "True", ")", ":", "\n", "    ", "if", "transpose", ":", "\n", "        ", "image_numpy", "=", "np", ".", "transpose", "(", "image_numpy", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "", "image_pil", "=", "Image", ".", "fromarray", "(", "image_numpy", ")", "\n", "image_pil", ".", "save", "(", "image_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.detect.save_images": [[34, 42], ["range", "len", "os.path.join", "detect.save_image", "os.path.exists", "os.makedirs", "os.path.join"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.util.util.save_image"], ["", "def", "save_images", "(", "images", ",", "folder", ",", "split", ",", "start_i", ",", "args", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "len", "(", "images", ")", ")", ":", "\n", "        ", "n_frame", "=", "\"{:06d}\"", ".", "format", "(", "i", "+", "start_i", ")", "\n", "part", "=", "\"{:06d}\"", ".", "format", "(", "(", "i", "+", "start_i", ")", "//", "args", ".", "seq_length", ")", "if", "split", "else", "\"\"", "\n", "save_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "celeb", ",", "folder", ",", "part", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "", "save_image", "(", "images", "[", "i", "]", ",", "os", ".", "path", ".", "join", "(", "save_dir", ",", "n_frame", "+", "'.png'", ")", ",", "transpose", "=", "folder", "==", "'images'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.detect.get_video_paths": [[43, 53], ["os.path.isdir", "sorted", "os.walk", "sorted", "detect.is_video_file", "os.path.join", "video_files.append"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.preprocessing.detect.is_video_file"], ["", "", "def", "get_video_paths", "(", "dir", ")", ":", "\n", "# Returns list of paths to video files", "\n", "    ", "video_files", "=", "[", "]", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "dir", ")", ",", "'%s is not a valid directory'", "%", "dir", "\n", "for", "root", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "dir", ")", ")", ":", "\n", "        ", "for", "fname", "in", "sorted", "(", "fnames", ")", ":", "\n", "            ", "if", "is_video_file", "(", "fname", ")", ":", "\n", "                ", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "video_files", ".", "append", "(", "path", ")", "\n", "", "", "", "return", "video_files", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.detect.smooth_boxes": [[54, 81], ["range", "numpy.array", "min", "numpy.concatenate", "range", "len", "len", "next", "scipy.ndimage.median_filter().reshape", "range", "scipy.ndimage.median_filter"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.util.util.reshape"], ["", "def", "smooth_boxes", "(", "boxes", ",", "previous_box", ",", "args", ")", ":", "\n", "# Check if there are None boxes.", "\n", "    ", "if", "boxes", "[", "0", "]", "is", "None", ":", "\n", "        ", "boxes", "[", "0", "]", "=", "previous_box", "\n", "", "for", "i", "in", "range", "(", "len", "(", "boxes", ")", ")", ":", "\n", "        ", "if", "boxes", "[", "i", "]", "is", "None", ":", "\n", "            ", "boxes", "[", "i", "]", "=", "next", "(", "(", "item", "for", "item", "in", "boxes", "[", "i", "+", "1", ":", "]", "if", "item", "is", "not", "None", ")", ",", "boxes", "[", "i", "-", "1", "]", ")", "\n", "", "", "boxes", "=", "[", "box", "[", "0", "]", "for", "box", "in", "boxes", "]", "# if more than one faces detected, keep the one with the heighest probability", "\n", "# Smoothen boxes", "\n", "old_boxes", "=", "np", ".", "array", "(", "boxes", ")", "\n", "window_length", "=", "min", "(", "args", ".", "window_length", ",", "old_boxes", ".", "shape", "[", "0", "]", ")", "\n", "if", "window_length", "%", "2", "==", "0", ":", "\n", "        ", "window_length", "-=", "1", "\n", "", "smooth_boxes", "=", "np", ".", "concatenate", "(", "[", "ndimage", ".", "median_filter", "(", "old_boxes", "[", ":", ",", "i", "]", ",", "size", "=", "window_length", ",", "mode", "=", "'reflect'", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "for", "i", "in", "range", "(", "4", ")", "]", ",", "1", ")", "\n", "# Make boxes square.", "\n", "for", "i", "in", "range", "(", "len", "(", "smooth_boxes", ")", ")", ":", "\n", "        ", "offset_w", "=", "smooth_boxes", "[", "i", "]", "[", "2", "]", "-", "smooth_boxes", "[", "i", "]", "[", "0", "]", "\n", "offset_h", "=", "smooth_boxes", "[", "i", "]", "[", "3", "]", "-", "smooth_boxes", "[", "i", "]", "[", "1", "]", "\n", "offset_dif", "=", "(", "offset_h", "-", "offset_w", ")", "/", "2", "\n", "# width", "\n", "smooth_boxes", "[", "i", "]", "[", "0", "]", "=", "smooth_boxes", "[", "i", "]", "[", "2", "]", "-", "offset_w", "-", "offset_dif", "\n", "smooth_boxes", "[", "i", "]", "[", "2", "]", "=", "smooth_boxes", "[", "i", "]", "[", "2", "]", "+", "offset_dif", "\n", "# height - center a bit lower", "\n", "smooth_boxes", "[", "i", "]", "[", "3", "]", "=", "smooth_boxes", "[", "i", "]", "[", "3", "]", "+", "args", ".", "height_recentre", "*", "offset_h", "\n", "smooth_boxes", "[", "i", "]", "[", "1", "]", "=", "smooth_boxes", "[", "i", "]", "[", "3", "]", "-", "offset_h", "\n", "\n", "", "return", "smooth_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.detect.get_faces": [[82, 116], ["numpy.arange", "detect.smooth_boxes", "zip", "len", "detector.detect", "all_boxes.extend", "all_imgs.extend", "facenet_pytorch.extract_face", "ret_faces.append", "ret_boxes.append", "PIL.Image.fromarray", "int", "int", "int", "int", "max", "max", "min", "min"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.preprocessing.detect.smooth_boxes"], ["", "def", "get_faces", "(", "detector", ",", "images", ",", "previous_box", ",", "args", ")", ":", "\n", "    ", "ret_faces", "=", "[", "]", "\n", "ret_boxes", "=", "[", "]", "\n", "\n", "all_boxes", "=", "[", "]", "\n", "all_imgs", "=", "[", "]", "\n", "\n", "# Get bounding boxes", "\n", "for", "lb", "in", "np", ".", "arange", "(", "0", ",", "len", "(", "images", ")", ",", "args", ".", "mtcnn_batch_size", ")", ":", "\n", "        ", "imgs_pil", "=", "[", "Image", ".", "fromarray", "(", "image", ")", "for", "image", "in", "images", "[", "lb", ":", "lb", "+", "args", ".", "mtcnn_batch_size", "]", "]", "\n", "boxes", ",", "_", "=", "detector", ".", "detect", "(", "imgs_pil", ")", "\n", "all_boxes", ".", "extend", "(", "boxes", ")", "\n", "all_imgs", ".", "extend", "(", "imgs_pil", ")", "\n", "# Temporal smoothing", "\n", "", "boxes", "=", "smooth_boxes", "(", "all_boxes", ",", "previous_box", ",", "args", ")", "\n", "# Crop face regions.", "\n", "for", "img", ",", "box", "in", "zip", "(", "all_imgs", ",", "boxes", ")", ":", "\n", "        ", "face", "=", "extract_face", "(", "img", ",", "box", ",", "args", ".", "cropped_image_size", ",", "args", ".", "margin", ")", "\n", "ret_faces", ".", "append", "(", "face", ")", "\n", "# Find real bbox   (taken from https://github.com/timesler/facenet-pytorch/blob/54c869c51e0e3e12f7f92f551cdd2ecd164e2443/models/utils/detect_face.py#L358)", "\n", "margin", "=", "[", "\n", "args", ".", "margin", "*", "(", "box", "[", "2", "]", "-", "box", "[", "0", "]", ")", "/", "(", "args", ".", "cropped_image_size", "-", "args", ".", "margin", ")", ",", "\n", "args", ".", "margin", "*", "(", "box", "[", "3", "]", "-", "box", "[", "1", "]", ")", "/", "(", "args", ".", "cropped_image_size", "-", "args", ".", "margin", ")", ",", "\n", "]", "\n", "raw_image_size", "=", "img", ".", "size", "\n", "box", "=", "[", "\n", "int", "(", "max", "(", "box", "[", "0", "]", "-", "margin", "[", "0", "]", "/", "2", ",", "0", ")", ")", ",", "\n", "int", "(", "max", "(", "box", "[", "1", "]", "-", "margin", "[", "1", "]", "/", "2", ",", "0", ")", ")", ",", "\n", "int", "(", "min", "(", "box", "[", "2", "]", "+", "margin", "[", "0", "]", "/", "2", ",", "raw_image_size", "[", "0", "]", ")", ")", ",", "\n", "int", "(", "min", "(", "box", "[", "3", "]", "+", "margin", "[", "1", "]", "/", "2", ",", "raw_image_size", "[", "1", "]", ")", ")", ",", "\n", "]", "\n", "ret_boxes", ".", "append", "(", "box", ")", "\n", "\n", "", "return", "ret_faces", ",", "ret_boxes", ",", "boxes", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.detect.detect_and_save_faces": [[117, 175], ["cv2.VideoCapture", "cv2.VideoCapture.get", "int", "print", "tqdm.tqdm", "detect.get_faces", "detect.save_images", "len", "cv2.VideoCapture.release", "cv2.VideoCapture.get", "range", "cv2.VideoCapture.read", "cv2.cvtColor", "detect.tensor2npimage", "detect.save_images", "len", "images.append", "detect.get_faces", "detect.save_images", "len", "os.path.exists", "open", "open.write", "open.close", "open", "numpy.savetxt", "open.close", "detect.tensor2npimage", "detect.save_images", "os.path.splitext", "numpy.expand_dims", "os.path.exists", "open", "open.write", "open.close", "open", "numpy.savetxt", "open.close", "os.path.splitext", "numpy.expand_dims"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.preprocessing.detect.get_faces", "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.detect.save_images", "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.detect.tensor2npimage", "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.detect.save_images", "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.detect.get_faces", "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.detect.save_images", "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.detect.tensor2npimage", "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.detect.save_images"], ["", "def", "detect_and_save_faces", "(", "detector", ",", "mp4_path", ",", "split", ",", "start_i", ",", "args", ")", ":", "\n", "\n", "    ", "reader", "=", "cv2", ".", "VideoCapture", "(", "mp4_path", ")", "\n", "fps", "=", "reader", ".", "get", "(", "cv2", ".", "CAP_PROP_FPS", ")", "\n", "n_frames", "=", "int", "(", "reader", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_COUNT", ")", ")", "\n", "\n", "images", "=", "[", "]", "\n", "previous_box", "=", "None", "\n", "\n", "print", "(", "'Reading %s, extracting faces, and saving images'", "%", "mp4_path", ")", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "n_frames", ")", ")", ":", "\n", "        ", "_", ",", "image", "=", "reader", ".", "read", "(", ")", "\n", "image", "=", "cv2", ".", "cvtColor", "(", "image", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "if", "len", "(", "images", ")", "<", "args", ".", "filter_length", ":", "\n", "            ", "images", ".", "append", "(", "image", ")", "\n", "# else, detect faces in sequence and create new list", "\n", "", "else", ":", "\n", "            ", "face_images", ",", "boxes", ",", "previous_box", "=", "get_faces", "(", "detector", ",", "images", ",", "previous_box", ",", "args", ")", "\n", "save_images", "(", "tensor2npimage", "(", "face_images", ")", ",", "'images'", ",", "split", ",", "start_i", ",", "args", ")", "\n", "\n", "if", "args", ".", "save_full_frames", ":", "\n", "                ", "save_images", "(", "images", ",", "'full_frames'", ",", "split", ",", "start_i", ",", "args", ")", "\n", "\n", "", "if", "args", ".", "save_videos_info", ":", "\n", "                ", "videos_file", "=", "os", ".", "path", ".", "splitext", "(", "mp4_path", ")", "[", "0", "]", "+", "'.txt'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "videos_file", ")", ":", "\n", "                    ", "vfile", "=", "open", "(", "videos_file", ",", "\"a\"", ")", "\n", "vfile", ".", "write", "(", "'{} {} fps {} frames\\n'", ".", "format", "(", "mp4_path", ",", "fps", ",", "n_frames", ")", ")", "\n", "vfile", ".", "close", "(", ")", "\n", "", "for", "box", "in", "boxes", ":", "\n", "                    ", "vfile", "=", "open", "(", "videos_file", ",", "\"a\"", ")", "\n", "np", ".", "savetxt", "(", "vfile", ",", "np", ".", "expand_dims", "(", "box", ",", "0", ")", ")", "\n", "vfile", ".", "close", "(", ")", "\n", "\n", "", "", "start_i", "+=", "len", "(", "images", ")", "\n", "images", "=", "[", "image", "]", "\n", "# last sequence", "\n", "", "", "face_images", ",", "boxes", ",", "_", "=", "get_faces", "(", "detector", ",", "images", ",", "previous_box", ",", "args", ")", "\n", "save_images", "(", "tensor2npimage", "(", "face_images", ")", ",", "'images'", ",", "split", ",", "start_i", ",", "args", ")", "\n", "\n", "if", "args", ".", "save_full_frames", ":", "\n", "        ", "save_images", "(", "images", ",", "'full_frames'", ",", "split", ",", "start_i", ",", "args", ")", "\n", "\n", "", "if", "args", ".", "save_videos_info", ":", "\n", "        ", "videos_file", "=", "os", ".", "path", ".", "splitext", "(", "mp4_path", ")", "[", "0", "]", "+", "'.txt'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "videos_file", ")", ":", "\n", "            ", "vfile", "=", "open", "(", "videos_file", ",", "\"a\"", ")", "\n", "vfile", ".", "write", "(", "'{} {} fps {} frames\\n'", ".", "format", "(", "mp4_path", ",", "fps", ",", "n_frames", ")", ")", "\n", "vfile", ".", "close", "(", ")", "\n", "", "for", "box", "in", "boxes", ":", "\n", "            ", "vfile", "=", "open", "(", "videos_file", ",", "\"a\"", ")", "\n", "np", ".", "savetxt", "(", "vfile", ",", "np", ".", "expand_dims", "(", "box", ",", "0", ")", ")", "\n", "vfile", ".", "close", "(", ")", "\n", "\n", "", "", "start_i", "+=", "len", "(", "images", ")", "\n", "\n", "reader", ".", "release", "(", ")", "\n", "return", "start_i", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.detect.print_args": [[177, 188], ["sorted", "print", "vars().items", "parser.get_default", "str", "str", "vars", "str"], "function", ["None"], ["", "def", "print_args", "(", "parser", ",", "args", ")", ":", "\n", "    ", "message", "=", "''", "\n", "message", "+=", "'----------------- Arguments ---------------\\n'", "\n", "for", "k", ",", "v", "in", "sorted", "(", "vars", "(", "args", ")", ".", "items", "(", ")", ")", ":", "\n", "        ", "comment", "=", "''", "\n", "default", "=", "parser", ".", "get_default", "(", "k", ")", "\n", "if", "v", "!=", "default", ":", "\n", "            ", "comment", "=", "'\\t[default: %s]'", "%", "str", "(", "default", ")", "\n", "", "message", "+=", "'{:>25}: {:<30}{}\\n'", ".", "format", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ",", "comment", ")", "\n", "", "message", "+=", "'-------------------------------------------'", "\n", "print", "(", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.detect.main": [[189, 253], ["print", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "detect.print_args", "os.path.join", "os.path.isdir", "print", "int", "os.path.join", "detect.get_video_paths", "len", "print", "facenet_pytorch.MTCNN", "print", "torch.cuda.is_available", "detect.detect_and_save_faces", "print", "os.path.join", "print", "exit", "len", "shutil.rmtree", "torch.cuda.device_count", "sorted", "os.listdir", "str", "os.listdir"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.utils.config.parse_args", "home.repos.pwc.inspect_result.foivospar_NED.renderer.create_inputs.print_args", "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.detect.get_video_paths", "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.detect.detect_and_save_faces"], ["", "def", "main", "(", ")", ":", "\n", "    ", "print", "(", "'-------------- Face detection -------------- \\n'", ")", "\n", "# Argument Parser", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_id'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "help", "=", "'Negative value to use CPU, or greater or equal than zero for GPU id.'", ")", "\n", "parser", ".", "add_argument", "(", "'--celeb'", ",", "type", "=", "str", ",", "default", "=", "'JackNicholson'", ",", "help", "=", "'Path to celebrity folder.'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_videos_info'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Whether to save videos meta-data (fps, #frames, bounding boxes) in .txt file'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_full_frames'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Whether to save full video frames (for reproducing the original clip)'", ")", "\n", "parser", ".", "add_argument", "(", "'--mtcnn_batch_size'", ",", "default", "=", "8", ",", "type", "=", "int", ",", "help", "=", "'The number of frames for face detection.'", ")", "\n", "parser", ".", "add_argument", "(", "'--select_largest'", ",", "action", "=", "'store_true'", ",", "help", "=", "'In case of multiple detected faces, keep the largest (if specified), or the one with the highest probability'", ")", "\n", "parser", ".", "add_argument", "(", "'--cropped_image_size'", ",", "default", "=", "256", ",", "type", "=", "int", ",", "help", "=", "'The size of frames after cropping the face.'", ")", "\n", "parser", ".", "add_argument", "(", "'--margin'", ",", "default", "=", "70", ",", "type", "=", "int", ",", "help", "=", "'.'", ")", "\n", "parser", ".", "add_argument", "(", "'--filter_length'", ",", "default", "=", "500", ",", "type", "=", "int", ",", "help", "=", "'Number of consecutive bounding boxes to be filtered'", ")", "\n", "parser", ".", "add_argument", "(", "'--window_length'", ",", "default", "=", "49", ",", "type", "=", "int", ",", "help", "=", "'savgol filter window length.'", ")", "\n", "parser", ".", "add_argument", "(", "'--height_recentre'", ",", "default", "=", "0.0", ",", "type", "=", "float", ",", "help", "=", "'The amount of re-centring bounding boxes lower on the face.'", ")", "\n", "parser", ".", "add_argument", "(", "'--split'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Whether to split video sequence to sub-sequences (for training)'", ")", "\n", "parser", ".", "add_argument", "(", "'--seq_length'", ",", "default", "=", "50", ",", "type", "=", "int", ",", "help", "=", "'The number of frames for each training sub-sequence.'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "print_args", "(", "parser", ",", "args", ")", "\n", "\n", "# check if face detection has already been done", "\n", "images_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "celeb", ",", "'images'", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "images_dir", ")", ":", "\n", "        ", "print", "(", "'Face detection already done!'", ")", "\n", "\n", "", "else", ":", "\n", "# Figure out the device", "\n", "        ", "gpu_id", "=", "int", "(", "args", ".", "gpu_id", ")", "\n", "if", "gpu_id", "<", "0", ":", "\n", "            ", "device", "=", "'cpu'", "\n", "", "elif", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "if", "gpu_id", ">=", "torch", ".", "cuda", ".", "device_count", "(", ")", ":", "\n", "                ", "device", "=", "'cuda:0'", "\n", "", "else", ":", "\n", "                ", "device", "=", "'cuda:'", "+", "str", "(", "gpu_id", ")", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "'GPU device not available. Exit'", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "# subfolder containing videos", "\n", "", "videos_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "celeb", ",", "'videos'", ")", "\n", "\n", "# Store video paths in list.", "\n", "mp4_paths", "=", "get_video_paths", "(", "videos_path", ")", "\n", "n_mp4s", "=", "len", "(", "mp4_paths", ")", "\n", "print", "(", "'Number of videos to process: %d \\n'", "%", "n_mp4s", ")", "\n", "\n", "# Initialize the MTCNN face  detector.", "\n", "detector", "=", "MTCNN", "(", "image_size", "=", "args", ".", "cropped_image_size", ",", "select_largest", "=", "args", ".", "select_largest", ",", "margin", "=", "args", ".", "margin", ",", "post_process", "=", "False", ",", "device", "=", "device", ")", "\n", "\n", "# Run detection", "\n", "n_completed", "=", "0", "\n", "start_i", "=", "0", "\n", "for", "path", "in", "mp4_paths", ":", "\n", "            ", "n_completed", "+=", "1", "\n", "start_i", "=", "detect_and_save_faces", "(", "detector", ",", "path", ",", "args", ".", "split", ",", "start_i", ",", "args", ")", "\n", "print", "(", "'(%d/%d) %s [SUCCESS]'", "%", "(", "n_completed", ",", "n_mp4s", ",", "path", ")", ")", "\n", "", "if", "args", ".", "split", ":", "\n", "# delete last sub-sequence if has less than \"seq_length\" frames", "\n", "            ", "last_folder", "=", "os", ".", "path", ".", "join", "(", "images_dir", ",", "sorted", "(", "os", ".", "listdir", "(", "images_dir", ")", ")", "[", "-", "1", "]", ")", "\n", "if", "len", "(", "os", ".", "listdir", "(", "last_folder", ")", ")", "!=", "args", ".", "seq_length", ":", "\n", "                ", "rmtree", "(", "last_folder", ")", "\n", "", "", "print", "(", "'DONE!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.align.is_mat_file": [[9, 11], ["any", "filename.endswith"], "function", ["None"], ["def", "is_mat_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "FILE_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.align.get_mats_paths": [[12, 22], ["os.path.isdir", "sorted", "os.walk", "sorted", "align.is_mat_file", "os.path.join", "mats_files.append"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.preprocessing.align.is_mat_file"], ["", "def", "get_mats_paths", "(", "dir", ")", ":", "\n", "# Returns list: [path1, path2, ...]", "\n", "    ", "mats_files", "=", "[", "]", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "dir", ")", ",", "'%s is not a valid directory'", "%", "dir", "\n", "for", "root", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "dir", ")", ")", ":", "\n", "        ", "for", "fname", "in", "sorted", "(", "fnames", ")", ":", "\n", "            ", "if", "is_mat_file", "(", "fname", ")", ":", "\n", "                ", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "mats_files", ".", "append", "(", "path", ")", "\n", "", "", "", "return", "mats_files", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.align.mkdir": [[23, 26], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "def", "mkdir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.align.save_aligned": [[27, 70], ["set", "print", "tqdm.tqdm", "align.mkdir", "zip", "iter", "p.replace", "p.replace", "p.replace", "p.replace", "p.replace", "p.replace", "os.path.dirname", "len", "next", "cv2.imwrite", "cv2.imwrite", "next", "cv2.imwrite", "next", "cv2.imwrite", "next", "cv2.imwrite", "next", "mat_pth.replace", "numpy.savetxt", "os.path.splitext", "os.path.splitext", "os.path.splitext", "os.path.splitext", "os.path.splitext", "mat_pth.replace", "mat_pth.replace", "mat_pth.replace", "mat_pth.replace", "mat_pth.replace"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.renderer.create_inputs.mkdir"], ["", "", "def", "save_aligned", "(", "mat_pths", ",", "aligned", ",", "args", ")", ":", "\n", "# Make dirs", "\n", "    ", "out_paths", "=", "[", "]", "\n", "if", "args", ".", "faces_and_masks", ":", "\n", "        ", "out_paths", "+=", "[", "p", ".", "replace", "(", "'/align_transforms/'", ",", "'/faces_aligned/'", ")", "for", "p", "in", "mat_pths", "]", "\n", "out_paths", "+=", "[", "p", ".", "replace", "(", "'/align_transforms/'", ",", "'/masks_aligned/'", ")", "for", "p", "in", "mat_pths", "]", "\n", "", "if", "args", ".", "renderings", ":", "\n", "        ", "out_paths", "+=", "[", "p", ".", "replace", "(", "'/align_transforms/'", ",", "'/renderings_aligned/'", ")", "for", "p", "in", "mat_pths", "]", "\n", "", "if", "args", ".", "shapes", ":", "\n", "        ", "out_paths", "+=", "[", "p", ".", "replace", "(", "'/align_transforms/'", ",", "'/shapes_aligned/'", ")", "for", "p", "in", "mat_pths", "]", "\n", "", "if", "args", ".", "nmfcs", ":", "\n", "        ", "out_paths", "+=", "[", "p", ".", "replace", "(", "'/align_transforms/'", ",", "'/nmfcs_aligned/'", ")", "for", "p", "in", "mat_pths", "]", "\n", "", "if", "args", ".", "landmarks", ":", "\n", "        ", "out_paths", "+=", "[", "p", ".", "replace", "(", "'/align_transforms/'", ",", "'/eye_landmarks_aligned/'", ")", "for", "p", "in", "mat_pths", "]", "\n", "", "out_paths", "=", "set", "(", "os", ".", "path", ".", "dirname", "(", "out_pth", ")", "for", "out_pth", "in", "out_paths", ")", "\n", "for", "out_path", "in", "out_paths", ":", "\n", "        ", "mkdir", "(", "out_path", ")", "\n", "\n", "", "print", "(", "'Saving results'", ")", "\n", "for", "al", ",", "mat_pth", "in", "tqdm", "(", "zip", "(", "aligned", ",", "mat_pths", ")", ",", "total", "=", "len", "(", "mat_pths", ")", ")", ":", "\n", "        ", "al_iter", "=", "iter", "(", "al", ")", "\n", "if", "args", ".", "faces_and_masks", ":", "\n", "            ", "face_a", ",", "mask_a", "=", "next", "(", "al_iter", ")", "\n", "face_file", "=", "os", ".", "path", ".", "splitext", "(", "mat_pth", ".", "replace", "(", "'/align_transforms/'", ",", "'/faces_aligned/'", ")", ")", "[", "0", "]", "+", "'.png'", "\n", "mask_file", "=", "os", ".", "path", ".", "splitext", "(", "mat_pth", ".", "replace", "(", "'/align_transforms/'", ",", "'/masks_aligned/'", ")", ")", "[", "0", "]", "+", "'.png'", "\n", "cv2", ".", "imwrite", "(", "face_file", ",", "face_a", ")", "\n", "cv2", ".", "imwrite", "(", "mask_file", ",", "mask_a", ")", "\n", "", "if", "args", ".", "renderings", ":", "\n", "            ", "rendering_a", "=", "next", "(", "al_iter", ")", "\n", "rendering_file", "=", "os", ".", "path", ".", "splitext", "(", "mat_pth", ".", "replace", "(", "'/align_transforms/'", ",", "'/renderings_aligned/'", ")", ")", "[", "0", "]", "+", "'.png'", "\n", "cv2", ".", "imwrite", "(", "rendering_file", ",", "rendering_a", ")", "\n", "", "if", "args", ".", "shapes", ":", "\n", "            ", "shape_a", "=", "next", "(", "al_iter", ")", "\n", "shape_file", "=", "os", ".", "path", ".", "splitext", "(", "mat_pth", ".", "replace", "(", "'/align_transforms/'", ",", "'/shapes_aligned/'", ")", ")", "[", "0", "]", "+", "'.png'", "\n", "cv2", ".", "imwrite", "(", "shape_file", ",", "shape_a", ")", "\n", "", "if", "args", ".", "nmfcs", ":", "\n", "            ", "nmfc_a", "=", "next", "(", "al_iter", ")", "\n", "nmfc_file", "=", "os", ".", "path", ".", "splitext", "(", "mat_pth", ".", "replace", "(", "'/align_transforms/'", ",", "'/nmfcs_aligned/'", ")", ")", "[", "0", "]", "+", "'.png'", "\n", "cv2", ".", "imwrite", "(", "nmfc_file", ",", "nmfc_a", ")", "\n", "", "if", "args", ".", "landmarks", ":", "\n", "            ", "lands_a", "=", "next", "(", "al_iter", ")", "\n", "lands_file", "=", "mat_pth", ".", "replace", "(", "'/align_transforms/'", ",", "'/eye_landmarks_aligned/'", ")", "\n", "np", ".", "savetxt", "(", "lands_file", ",", "lands_a", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.align.dirs_exist": [[71, 86], ["set", "all", "p.replace", "p.replace", "p.replace", "p.replace", "p.replace", "p.replace", "os.path.dirname", "os.path.exists"], "function", ["None"], ["", "", "", "def", "dirs_exist", "(", "mat_pths", ",", "args", ")", ":", "\n", "    ", "out_paths", "=", "[", "]", "\n", "if", "args", ".", "faces_and_masks", ":", "\n", "        ", "out_paths", "+=", "[", "p", ".", "replace", "(", "'/align_transforms/'", ",", "'/faces_aligned/'", ")", "for", "p", "in", "mat_pths", "]", "\n", "out_paths", "+=", "[", "p", ".", "replace", "(", "'/align_transforms/'", ",", "'/masks_aligned/'", ")", "for", "p", "in", "mat_pths", "]", "\n", "", "if", "args", ".", "renderings", ":", "\n", "        ", "out_paths", "+=", "[", "p", ".", "replace", "(", "'/align_transforms/'", ",", "'/renderings_aligned/'", ")", "for", "p", "in", "mat_pths", "]", "\n", "", "if", "args", ".", "shapes", ":", "\n", "        ", "out_paths", "+=", "[", "p", ".", "replace", "(", "'/align_transforms/'", ",", "'/shapes_aligned/'", ")", "for", "p", "in", "mat_pths", "]", "\n", "", "if", "args", ".", "nmfcs", ":", "\n", "        ", "out_paths", "+=", "[", "p", ".", "replace", "(", "'/align_transforms/'", ",", "'/nmfcs_aligned/'", ")", "for", "p", "in", "mat_pths", "]", "\n", "", "if", "args", ".", "landmarks", ":", "\n", "        ", "out_paths", "+=", "[", "p", ".", "replace", "(", "'/align_transforms/'", ",", "'/eye_landmarks_aligned/'", ")", "for", "p", "in", "mat_pths", "]", "\n", "", "out_paths", "=", "set", "(", "os", ".", "path", ".", "dirname", "(", "out_pth", ")", "for", "out_pth", "in", "out_paths", ")", "\n", "return", "all", "(", "[", "os", ".", "path", ".", "exists", "(", "out_path", ")", "for", "out_path", "in", "out_paths", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.align.transform_points": [[87, 92], ["numpy.expand_dims", "cv2.transform", "numpy.squeeze"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.VGGFace2Loss.transform"], ["", "def", "transform_points", "(", "points", ",", "mat", ")", ":", "\n", "    ", "points", "=", "np", ".", "expand_dims", "(", "points", ",", "axis", "=", "1", ")", "\n", "points", "=", "cv2", ".", "transform", "(", "points", ",", "mat", ",", "points", ".", "shape", ")", "\n", "points", "=", "np", ".", "squeeze", "(", "points", ")", "\n", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.align.align": [[93, 136], ["print", "tqdm.tqdm", "numpy.loadtxt", "rets.append", "cv2.imread", "cv2.imread", "cv2.warpAffine", "cv2.warpAffine", "ret.append", "cv2.imread", "cv2.warpAffine", "ret.append", "cv2.imread", "cv2.warpAffine", "ret.append", "cv2.imread", "cv2.warpAffine", "ret.append", "mat_pth.replace", "numpy.loadtxt", "align.transform_points", "ret.append", "os.path.splitext", "os.path.splitext", "numpy.where", "os.path.splitext", "os.path.splitext", "os.path.splitext", "mat_pth.replace", "mat_pth.replace", "mat_pth.replace", "mat_pth.replace", "mat_pth.replace"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.renderer.create_inputs.transform_points"], ["", "def", "align", "(", "mat_paths", ",", "args", ")", ":", "\n", "    ", "rets", "=", "[", "]", "\n", "print", "(", "'Aligning images'", ")", "\n", "for", "mat_pth", "in", "tqdm", "(", "mat_paths", ")", ":", "\n", "        ", "ret", "=", "[", "]", "\n", "mat", "=", "np", ".", "loadtxt", "(", "mat_pth", ")", "\n", "if", "args", ".", "faces_and_masks", ":", "\n", "            ", "face_pth", "=", "os", ".", "path", ".", "splitext", "(", "mat_pth", ".", "replace", "(", "'/align_transforms/'", ",", "'/faces/'", ")", ")", "[", "0", "]", "+", "'.png'", "\n", "face", "=", "cv2", ".", "imread", "(", "face_pth", ")", "\n", "mask_pth", "=", "os", ".", "path", ".", "splitext", "(", "mat_pth", ".", "replace", "(", "'/align_transforms/'", ",", "'/masks/'", ")", ")", "[", "0", "]", "+", "'.png'", "\n", "mask", "=", "cv2", ".", "imread", "(", "mask_pth", ")", "\n", "face_a", "=", "cv2", ".", "warpAffine", "(", "face", ",", "mat", ",", "(", "face", ".", "shape", "[", "1", "]", ",", "face", ".", "shape", "[", "0", "]", ")", ",", "flags", "=", "cv2", ".", "INTER_LANCZOS4", ")", "\n", "mask_a", "=", "cv2", ".", "warpAffine", "(", "mask", ",", "mat", ",", "(", "mask", ".", "shape", "[", "1", "]", ",", "mask", ".", "shape", "[", "0", "]", ")", ",", "flags", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "face_a", "[", "np", ".", "where", "(", "mask_a", "==", "0", ")", "]", "=", "0", "\n", "\n", "ret", ".", "append", "(", "(", "face_a", ",", "mask_a", ")", ")", "\n", "", "if", "args", ".", "renderings", ":", "\n", "            ", "r_pth", "=", "os", ".", "path", ".", "splitext", "(", "mat_pth", ".", "replace", "(", "'/align_transforms/'", ",", "'/renderings/'", ")", ")", "[", "0", "]", "+", "'.png'", "\n", "rendering", "=", "cv2", ".", "imread", "(", "r_pth", ")", "\n", "rendering_a", "=", "cv2", ".", "warpAffine", "(", "rendering", ",", "mat", ",", "(", "rendering", ".", "shape", "[", "1", "]", ",", "rendering", ".", "shape", "[", "0", "]", ")", ",", "flags", "=", "cv2", ".", "INTER_LANCZOS4", ")", "\n", "\n", "ret", ".", "append", "(", "rendering_a", ")", "\n", "", "if", "args", ".", "shapes", ":", "\n", "            ", "s_pth", "=", "os", ".", "path", ".", "splitext", "(", "mat_pth", ".", "replace", "(", "'/align_transforms/'", ",", "'/shapes/'", ")", ")", "[", "0", "]", "+", "'.png'", "\n", "shape", "=", "cv2", ".", "imread", "(", "s_pth", ")", "\n", "shape_a", "=", "cv2", ".", "warpAffine", "(", "shape", ",", "mat", ",", "(", "shape", ".", "shape", "[", "1", "]", ",", "shape", ".", "shape", "[", "0", "]", ")", ",", "flags", "=", "cv2", ".", "INTER_LANCZOS4", ")", "\n", "\n", "ret", ".", "append", "(", "shape_a", ")", "\n", "", "if", "args", ".", "nmfcs", ":", "\n", "            ", "n_pth", "=", "os", ".", "path", ".", "splitext", "(", "mat_pth", ".", "replace", "(", "'/align_transforms/'", ",", "'/nmfcs/'", ")", ")", "[", "0", "]", "+", "'.png'", "\n", "nmfc", "=", "cv2", ".", "imread", "(", "n_pth", ")", "\n", "nmfc_a", "=", "cv2", ".", "warpAffine", "(", "nmfc", ",", "mat", ",", "(", "nmfc", ".", "shape", "[", "1", "]", ",", "nmfc", ".", "shape", "[", "0", "]", ")", ",", "flags", "=", "cv2", ".", "INTER_LANCZOS4", ")", "\n", "\n", "ret", ".", "append", "(", "nmfc_a", ")", "\n", "", "if", "args", ".", "landmarks", ":", "\n", "            ", "land_file", "=", "mat_pth", ".", "replace", "(", "'/align_transforms'", ",", "'/eye_landmarks/'", ")", "\n", "lands", "=", "np", ".", "loadtxt", "(", "land_file", ")", "\n", "lands_a", "=", "transform_points", "(", "lands", ",", "mat", ")", "\n", "\n", "ret", ".", "append", "(", "lands_a", ")", "\n", "", "rets", ".", "append", "(", "ret", ")", "\n", "\n", "", "return", "rets", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.align.print_args": [[137, 148], ["sorted", "print", "vars().items", "parser.get_default", "str", "str", "vars", "str"], "function", ["None"], ["", "def", "print_args", "(", "parser", ",", "args", ")", ":", "\n", "    ", "message", "=", "''", "\n", "message", "+=", "'----------------- Arguments ---------------\\n'", "\n", "for", "k", ",", "v", "in", "sorted", "(", "vars", "(", "args", ")", ".", "items", "(", ")", ")", ":", "\n", "        ", "comment", "=", "''", "\n", "default", "=", "parser", ".", "get_default", "(", "k", ")", "\n", "if", "v", "!=", "default", ":", "\n", "            ", "comment", "=", "'\\t[default: %s]'", "%", "str", "(", "default", ")", "\n", "", "message", "+=", "'{:>25}: {:<30}{}\\n'", ".", "format", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ",", "comment", ")", "\n", "", "message", "+=", "'-------------------------------------------'", "\n", "print", "(", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.align.main": [[149, 173], ["print", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "align.print_args", "os.path.join", "align.get_mats_paths", "align.dirs_exist", "align.align", "align.save_aligned", "print", "print"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.utils.config.parse_args", "home.repos.pwc.inspect_result.foivospar_NED.renderer.create_inputs.print_args", "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.align.get_mats_paths", "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.align.dirs_exist", "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.align.align", "home.repos.pwc.inspect_result.foivospar_NED.preprocessing.align.save_aligned"], ["", "def", "main", "(", ")", ":", "\n", "    ", "print", "(", "'---------- Face alignment --------- \\n'", ")", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--celeb'", ",", "type", "=", "str", ",", "default", "=", "'JackNicholson'", ",", "help", "=", "'Path to celebrity folder.'", ")", "\n", "parser", ".", "add_argument", "(", "'--faces_and_masks'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Whether to aling face and mask images'", ")", "\n", "parser", ".", "add_argument", "(", "'--renderings'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Whether to aling renderings'", ")", "\n", "parser", ".", "add_argument", "(", "'--shapes'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Whether to aling shape images'", ")", "\n", "parser", ".", "add_argument", "(", "'--nmfcs'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Whether to aling nmfc images'", ")", "\n", "parser", ".", "add_argument", "(", "'--landmarks'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Whether to aling eye-landmarks'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "# Print Arguments", "\n", "print_args", "(", "parser", ",", "args", ")", "\n", "\n", "# Get the path of each transformation file.", "\n", "mats_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "celeb", ",", "'align_transforms'", ")", "\n", "mat_paths", "=", "get_mats_paths", "(", "mats_dir", ")", "\n", "\n", "if", "not", "dirs_exist", "(", "mat_paths", ",", "args", ")", ":", "\n", "        ", "aligned", "=", "align", "(", "mat_paths", ",", "args", ")", "\n", "save_aligned", "(", "mat_paths", ",", "aligned", ",", "args", ")", "\n", "print", "(", "'DONE!'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Face alignment already done!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.segmentation.simple_unet.UNet.__init__": [[22, 56], ["torch.Module.__init__", "simple_unet.UnetConv2", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "simple_unet.UnetConv2", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "simple_unet.UnetConv2", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "simple_unet.UnetConv2", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "simple_unet.UnetConv2", "simple_unet.UnetUp", "simple_unet.UnetUp", "simple_unet.UnetUp", "simple_unet.UnetUp", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "int"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.datasets.datasets.TestData.__init__"], ["def", "__init__", "(", "self", ",", "feature_scale", "=", "4", ",", "n_classes", "=", "21", ",", "is_deconv", "=", "False", ",", "in_channels", "=", "3", ",", "is_batchnorm", "=", "True", ")", ":", "\n", "        ", "super", "(", "UNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "is_deconv", "=", "is_deconv", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "is_batchnorm", "=", "is_batchnorm", "\n", "self", ".", "feature_scale", "=", "feature_scale", "\n", "\n", "filters", "=", "[", "64", ",", "128", ",", "256", ",", "512", ",", "1024", "]", "\n", "filters", "=", "[", "int", "(", "x", "/", "self", ".", "feature_scale", ")", "for", "x", "in", "filters", "]", "\n", "\n", "# downsampling", "\n", "self", ".", "conv1", "=", "UnetConv2", "(", "self", ".", "in_channels", ",", "filters", "[", "0", "]", ",", "self", ".", "is_batchnorm", ")", "\n", "self", ".", "maxpool1", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ")", "\n", "\n", "self", ".", "conv2", "=", "UnetConv2", "(", "filters", "[", "0", "]", ",", "filters", "[", "1", "]", ",", "self", ".", "is_batchnorm", ")", "\n", "self", ".", "maxpool2", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ")", "\n", "\n", "self", ".", "conv3", "=", "UnetConv2", "(", "filters", "[", "1", "]", ",", "filters", "[", "2", "]", ",", "self", ".", "is_batchnorm", ")", "\n", "self", ".", "maxpool3", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ")", "\n", "\n", "self", ".", "conv4", "=", "UnetConv2", "(", "filters", "[", "2", "]", ",", "filters", "[", "3", "]", ",", "self", ".", "is_batchnorm", ")", "\n", "self", ".", "maxpool4", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ")", "\n", "\n", "self", ".", "center", "=", "UnetConv2", "(", "filters", "[", "3", "]", ",", "filters", "[", "4", "]", ",", "self", ".", "is_batchnorm", ")", "\n", "\n", "# upsampling", "\n", "self", ".", "up_concat4", "=", "UnetUp", "(", "filters", "[", "4", "]", ",", "filters", "[", "3", "]", ",", "self", ".", "is_deconv", ")", "\n", "self", ".", "up_concat3", "=", "UnetUp", "(", "filters", "[", "3", "]", ",", "filters", "[", "2", "]", ",", "self", ".", "is_deconv", ")", "\n", "self", ".", "up_concat2", "=", "UnetUp", "(", "filters", "[", "2", "]", ",", "filters", "[", "1", "]", ",", "self", ".", "is_deconv", ")", "\n", "self", ".", "up_concat1", "=", "UnetUp", "(", "filters", "[", "1", "]", ",", "filters", "[", "0", "]", ",", "self", ".", "is_deconv", ")", "\n", "\n", "# final conv (without any concat)", "\n", "self", ".", "final", "=", "nn", ".", "Conv2d", "(", "filters", "[", "0", "]", ",", "n_classes", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.segmentation.simple_unet.UNet.forward": [[57, 79], ["simple_unet.UNet.conv1", "simple_unet.UNet.maxpool1", "simple_unet.UNet.conv2", "simple_unet.UNet.maxpool2", "simple_unet.UNet.conv3", "simple_unet.UNet.maxpool3", "simple_unet.UNet.conv4", "simple_unet.UNet.maxpool4", "simple_unet.UNet.center", "simple_unet.UNet.up_concat4", "simple_unet.UNet.up_concat3", "simple_unet.UNet.up_concat2", "simple_unet.UNet.up_concat1", "simple_unet.UNet.final"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "conv1", "=", "self", ".", "conv1", "(", "inputs", ")", "\n", "maxpool1", "=", "self", ".", "maxpool1", "(", "conv1", ")", "\n", "\n", "conv2", "=", "self", ".", "conv2", "(", "maxpool1", ")", "\n", "maxpool2", "=", "self", ".", "maxpool2", "(", "conv2", ")", "\n", "\n", "conv3", "=", "self", ".", "conv3", "(", "maxpool2", ")", "\n", "maxpool3", "=", "self", ".", "maxpool3", "(", "conv3", ")", "\n", "\n", "conv4", "=", "self", ".", "conv4", "(", "maxpool3", ")", "\n", "maxpool4", "=", "self", ".", "maxpool4", "(", "conv4", ")", "\n", "\n", "center", "=", "self", ".", "center", "(", "maxpool4", ")", "\n", "up4", "=", "self", ".", "up_concat4", "(", "conv4", ",", "center", ")", "\n", "up3", "=", "self", ".", "up_concat3", "(", "conv3", ",", "up4", ")", "\n", "up2", "=", "self", ".", "up_concat2", "(", "conv2", ",", "up3", ")", "\n", "up1", "=", "self", ".", "up_concat1", "(", "conv1", ",", "up2", ")", "\n", "\n", "final", "=", "self", ".", "final", "(", "up1", ")", "\n", "\n", "return", "final", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.segmentation.simple_unet.UnetConv2.__init__": [[89, 107], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.datasets.datasets.TestData.__init__"], ["def", "__init__", "(", "self", ",", "in_size", ",", "out_size", ",", "is_batchnorm", ")", ":", "\n", "        ", "super", "(", "UnetConv2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "is_batchnorm", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_size", ",", "out_size", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "out_size", ",", "out_size", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_size", ",", "out_size", ",", "3", ",", "1", ",", "1", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "out_size", ",", "out_size", ",", "3", ",", "1", ",", "1", ")", ",", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.segmentation.simple_unet.UnetConv2.forward": [[109, 113], ["simple_unet.UnetConv2.conv1", "simple_unet.UnetConv2.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "conv1", "(", "inputs", ")", "\n", "outputs", "=", "self", ".", "conv2", "(", "outputs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.segmentation.simple_unet.UnetUp.__init__": [[124, 132], ["torch.Module.__init__", "simple_unet.UnetConv2", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.UpsamplingBilinear2d", "torch.UpsamplingBilinear2d", "torch.UpsamplingBilinear2d"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.datasets.datasets.TestData.__init__"], ["def", "__init__", "(", "self", ",", "in_size", ",", "out_size", ",", "is_deconv", ")", ":", "\n", "        ", "super", "(", "UnetUp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "UnetConv2", "(", "in_size", ",", "out_size", ",", "False", ")", "\n", "if", "is_deconv", ":", "\n", "            ", "self", ".", "up", "=", "nn", ".", "ConvTranspose2d", "(", "in_size", ",", "out_size", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "up", "=", "nn", ".", "UpsamplingBilinear2d", "(", "scale_factor", "=", "2", ")", "\n", "", "self", ".", "conv1d", "=", "nn", ".", "Conv1d", "(", "in_size", ",", "out_size", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.segmentation.simple_unet.UnetUp.forward": [[133, 140], ["simple_unet.UnetUp.up", "simple_unet.UnetUp.conv1d", "torch.pad", "torch.pad", "torch.pad", "simple_unet.UnetUp.conv", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "simple_unet.UnetUp.size", "inputs1.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs1", ",", "inputs2", ")", ":", "\n", "        ", "outputs2", "=", "self", ".", "up", "(", "inputs2", ")", "\n", "outputs2", "=", "self", ".", "conv1d", "(", "outputs2", ",", ")", "\n", "offset", "=", "outputs2", ".", "size", "(", ")", "[", "2", "]", "-", "inputs1", ".", "size", "(", ")", "[", "2", "]", "\n", "padding", "=", "2", "*", "[", "offset", "//", "2", ",", "offset", "//", "2", "]", "\n", "outputs1", "=", "F", ".", "pad", "(", "inputs1", ",", "padding", ")", "\n", "return", "self", ".", "conv", "(", "torch", ".", "cat", "(", "[", "outputs1", ",", "outputs2", "]", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.segmentation.simple_unet.unet": [[142, 168], ["simple_unet.UNet", "torch.load", "torch.load", "torch.load", "weights.pop", "weights.pop", "UNet.load_state_dict", "simple_unet.UNet"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.foivospar_NED.models.frnet.load_state_dict"], ["", "", "def", "unet", "(", "num_classes", "=", "21", ",", "is_deconv", "=", "False", ",", "feature_scale", "=", "1", ",", "is_batchnorm", "=", "True", ",", "pretrained", "=", "False", ")", ":", "\n", "    ", "\"\"\" Creates a UNet model with pretrained optiopn.\n\n    Args:\n        num_classes (int): Output number of channels\n        is_deconv (bool): If True, transposed convolution will be used for the upsampling operation instead of\n                bilinear interpolation\n        feature_scale (int): Divides the intermediate feature map number of channels\n        is_batchnorm (bool): If True, enables the use of batch normalization\n        pretrained (bool): If True, return a pretrained model on Pascal dataset\n\n    Returns:\n        UNet model\n    \"\"\"", "\n", "if", "pretrained", ":", "\n", "        ", "model_path", "=", "pretrained_models", "[", "'pascal'", "]", "\n", "model", "=", "UNet", "(", "n_classes", "=", "num_classes", ",", "feature_scale", "=", "feature_scale", ",", "is_batchnorm", "=", "is_batchnorm", ",", "is_deconv", "=", "is_deconv", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "weights", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "weights", "[", "'notinuse'", "]", "=", "weights", ".", "pop", "(", "'final.weight'", ")", "\n", "weights", "[", "'notinuse2'", "]", "=", "weights", ".", "pop", "(", "'final.bias'", ")", "\n", "model", ".", "load_state_dict", "(", "weights", ",", "strict", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "UNet", "(", "n_classes", "=", "num_classes", ",", "feature_scale", "=", "feature_scale", ",", "is_batchnorm", "=", "is_batchnorm", ",", "is_deconv", "=", "is_deconv", ")", "\n", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.foivospar_NED.postprocessing.unalign.is_image_file": [[9, 11], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMAGE_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.postprocessing.unalign.get_faces_a_paths": [[12, 21], ["os.path.isdir", "sorted", "os.listdir", "unalign.is_image_file", "os.path.join", "faces_a_files.append"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.data.image_folder.is_image_file"], ["", "def", "get_faces_a_paths", "(", "dir", ")", ":", "\n", "# Returns list: [path1, path2, ...]", "\n", "    ", "faces_a_files", "=", "[", "]", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "dir", ")", ",", "'%s is not a valid directory'", "%", "dir", "\n", "for", "fname", "in", "sorted", "(", "os", ".", "listdir", "(", "dir", ")", ")", ":", "\n", "        ", "if", "is_image_file", "(", "fname", ")", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "fname", ")", "\n", "faces_a_files", ".", "append", "(", "path", ")", "\n", "", "", "return", "faces_a_files", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.postprocessing.unalign.mkdir": [[22, 25], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "def", "mkdir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.postprocessing.unalign.save_faces": [[26, 31], ["unalign.mkdir", "print", "tqdm.tqdm", "os.path.join", "zip", "cv2.imwrite", "len", "face_a_pth.replace"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.renderer.create_inputs.mkdir"], ["", "", "def", "save_faces", "(", "face_a_pths", ",", "faces", ",", "args", ")", ":", "\n", "    ", "mkdir", "(", "os", ".", "path", ".", "join", "(", "args", ".", "celeb", ",", "args", ".", "exp_name", ",", "'faces'", ")", ")", "\n", "print", "(", "'Saving results'", ")", "\n", "for", "face_a_pth", ",", "face", "in", "tqdm", "(", "zip", "(", "face_a_pths", ",", "faces", ")", ",", "total", "=", "len", "(", "faces", ")", ")", ":", "\n", "        ", "cv2", ".", "imwrite", "(", "face_a_pth", ".", "replace", "(", "'/faces_aligned/'", ",", "'/faces/'", ")", ",", "face", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.postprocessing.unalign.unalign": [[32, 47], ["print", "tqdm.tqdm", "face_a_pth.replace", "cv2.imread", "numpy.loadtxt", "cv2.imread", "cv2.warpAffine", "faces.append", "os.path.splitext", "numpy.where", "face_a_pth.replace"], "function", ["None"], ["", "", "def", "unalign", "(", "face_a_paths", ",", "args", ")", ":", "\n", "    ", "faces", "=", "[", "]", "\n", "print", "(", "'Removing alignment from face images'", ")", "\n", "for", "face_a_pth", "in", "tqdm", "(", "face_a_paths", ")", ":", "\n", "        ", "mat_file", "=", "os", ".", "path", ".", "splitext", "(", "face_a_pth", ".", "replace", "(", "f'/{args.exp_name}/faces_aligned'", ",", "'/align_transforms'", ")", ")", "[", "0", "]", "+", "'.txt'", "\n", "mask_file", "=", "face_a_pth", ".", "replace", "(", "f'/{args.exp_name}/faces_aligned'", ",", "'/masks'", ")", "\n", "face_a", "=", "cv2", ".", "imread", "(", "face_a_pth", ")", "\n", "mat", "=", "np", ".", "loadtxt", "(", "mat_file", ")", "\n", "mask", "=", "cv2", ".", "imread", "(", "mask_file", ")", "\n", "face", "=", "cv2", ".", "warpAffine", "(", "face_a", ",", "mat", ",", "(", "face_a", ".", "shape", "[", "1", "]", ",", "face_a", ".", "shape", "[", "0", "]", ")", ",", "flags", "=", "cv2", ".", "WARP_INVERSE_MAP", "|", "cv2", ".", "INTER_LANCZOS4", ")", "\n", "face", "[", "np", ".", "where", "(", "mask", "==", "0", ")", "]", "=", "0", "\n", "\n", "faces", ".", "append", "(", "face", ")", "\n", "\n", "", "return", "faces", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.postprocessing.unalign.print_args": [[48, 59], ["sorted", "print", "vars().items", "parser.get_default", "str", "str", "vars", "str"], "function", ["None"], ["", "def", "print_args", "(", "parser", ",", "args", ")", ":", "\n", "    ", "message", "=", "''", "\n", "message", "+=", "'----------------- Arguments ---------------\\n'", "\n", "for", "k", ",", "v", "in", "sorted", "(", "vars", "(", "args", ")", ".", "items", "(", ")", ")", ":", "\n", "        ", "comment", "=", "''", "\n", "default", "=", "parser", ".", "get_default", "(", "k", ")", "\n", "if", "v", "!=", "default", ":", "\n", "            ", "comment", "=", "'\\t[default: %s]'", "%", "str", "(", "default", ")", "\n", "", "message", "+=", "'{:>25}: {:<30}{}\\n'", ".", "format", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ",", "comment", ")", "\n", "", "message", "+=", "'-------------------------------------------'", "\n", "print", "(", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.postprocessing.unalign.main": [[60, 80], ["print", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "unalign.print_args", "os.path.join", "unalign.get_faces_a_paths", "os.path.exists", "unalign.unalign", "unalign.save_faces", "print", "print", "os.path.join.replace"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.utils.config.parse_args", "home.repos.pwc.inspect_result.foivospar_NED.renderer.create_inputs.print_args", "home.repos.pwc.inspect_result.foivospar_NED.postprocessing.unalign.get_faces_a_paths", "home.repos.pwc.inspect_result.foivospar_NED.postprocessing.unalign.unalign", "home.repos.pwc.inspect_result.foivospar_NED.postprocessing.unalign.save_faces"], ["", "def", "main", "(", ")", ":", "\n", "    ", "print", "(", "'---------- Undo face alignment --------- \\n'", ")", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--celeb'", ",", "type", "=", "str", ",", "default", "=", "'JackNicholson'", ",", "help", "=", "'Path to celebrity folder.'", ")", "\n", "parser", ".", "add_argument", "(", "'--exp_name'", ",", "type", "=", "str", ",", "default", "=", "'Pacino'", ",", "help", "=", "'Experiment sub-folder'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "# Print Arguments", "\n", "print_args", "(", "parser", ",", "args", ")", "\n", "\n", "# Get the path of each aligned face image.", "\n", "faces_a_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "celeb", ",", "args", ".", "exp_name", ",", "'faces_aligned'", ")", "\n", "face_a_paths", "=", "get_faces_a_paths", "(", "faces_a_dir", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "faces_a_dir", ".", "replace", "(", "'/faces_aligned'", ",", "'/faces'", ")", ")", ":", "\n", "        ", "faces", "=", "unalign", "(", "face_a_paths", ",", "args", ")", "\n", "save_faces", "(", "face_a_paths", ",", "faces", ",", "args", ")", "\n", "print", "(", "'DONE!'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Face un-alignment already done!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.postprocessing.images2video.main": [[8, 51], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "sorted", "cv2.VideoWriter", "print", "sorted", "cv2.destroyAllWindows", "video.set_audio.release", "print", "os.walk", "sorted", "cv2.VideoWriter_fourcc", "os.walk", "tqdm.tqdm", "print", "VideoFileClip", "VideoFileClip", "video.set_audio.set_audio", "os.remove", "video.set_audio.write_videofile", "len", "cv2.imread", "sorted", "cv2.imread", "video.set_audio.write", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.utils.config.parse_args"], ["def", "main", "(", ")", ":", "\n", "# Argument Parser", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--imgs_path'", ",", "type", "=", "str", ",", "nargs", "=", "'+'", ",", "default", "=", "'.'", ",", "\n", "help", "=", "\"path to saved images\"", ")", "\n", "parser", ".", "add_argument", "(", "'--out_path'", ",", "type", "=", "str", ",", "default", "=", "'.'", ",", "\n", "help", "=", "\"path to save video\"", ")", "\n", "parser", ".", "add_argument", "(", "'--fps'", ",", "type", "=", "float", ",", "default", "=", "30", ",", "\n", "help", "=", "\".\"", ")", "\n", "parser", ".", "add_argument", "(", "'--audio'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "\"Path to original .mp4 file that contains audio\"", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "for", "root", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "args", ".", "imgs_path", "[", "0", "]", ")", ")", ":", "\n", "        ", "if", "len", "(", "fnames", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "for", "name", "in", "sorted", "(", "fnames", ")", ":", "\n", "            ", "im", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "root", ",", "name", ")", ")", "\n", "w", ",", "h", "=", "im", ".", "shape", "[", "1", "]", ",", "im", ".", "shape", "[", "0", "]", "\n", "break", "\n", "", "break", "\n", "\n", "", "video", "=", "cv2", ".", "VideoWriter", "(", "args", ".", "out_path", ",", "cv2", ".", "VideoWriter_fourcc", "(", "*", "'mp4v'", ")", ",", "args", ".", "fps", ",", "(", "w", ",", "h", ")", ")", "\n", "print", "(", "'Converting images to video ...'", ")", "\n", "\n", "for", "root", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "args", ".", "imgs_path", "[", "0", "]", ")", ")", ":", "\n", "        ", "for", "name", "in", "tqdm", "(", "sorted", "(", "fnames", ")", ")", ":", "\n", "            ", "im", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "root", ",", "name", ")", ")", "\n", "video", ".", "write", "(", "im", ")", "\n", "\n", "", "", "cv2", ".", "destroyAllWindows", "(", ")", "\n", "video", ".", "release", "(", ")", "\n", "\n", "if", "args", ".", "audio", "is", "not", "None", ":", "\n", "        ", "print", "(", "'Adding audio with MoviePy ...'", ")", "\n", "video", "=", "VideoFileClip", "(", "args", ".", "out_path", ")", "\n", "video_audio", "=", "VideoFileClip", "(", "args", ".", "audio", ")", "\n", "video", "=", "video", ".", "set_audio", "(", "video_audio", ".", "audio", ")", "\n", "os", ".", "remove", "(", "args", ".", "out_path", ")", "\n", "video", ".", "write_videofile", "(", "args", ".", "out_path", ")", "\n", "\n", "", "print", "(", "'DONE'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.postprocessing.blend.is_image_file": [[12, 14], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.postprocessing.blend.get_image_paths": [[15, 24], ["os.path.isdir", "sorted", "os.listdir", "blend.is_image_file", "os.path.join", "image_files.append"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.data.image_folder.is_image_file"], ["", "def", "get_image_paths", "(", "dir", ")", ":", "\n", "# Returns list: [path1, path2, ...]", "\n", "    ", "image_files", "=", "[", "]", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "dir", ")", ",", "'%s is not a valid directory'", "%", "dir", "\n", "for", "fname", "in", "sorted", "(", "os", ".", "listdir", "(", "dir", ")", ")", ":", "\n", "        ", "if", "is_image_file", "(", "fname", ")", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "fname", ")", "\n", "image_files", ".", "append", "(", "path", ")", "\n", "", "", "return", "image_files", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.postprocessing.blend.mkdir": [[25, 28], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "def", "mkdir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.postprocessing.blend.load_bboxes": [[29, 36], ["os.path.join", "boxes.extend", "sorted", "list", "os.listdir", "numpy.loadtxt().astype", "numpy.loadtxt"], "function", ["None"], ["", "", "def", "load_bboxes", "(", "dir", ")", ":", "\n", "# Returns list with bounding boxes", "\n", "    ", "boxes", "=", "[", "]", "\n", "txt_files", "=", "[", "os", ".", "path", ".", "join", "(", "dir", ",", "f", ")", "for", "f", "in", "sorted", "(", "os", ".", "listdir", "(", "dir", ")", ")", "if", "'.txt'", "in", "f", "]", "\n", "for", "t", "in", "txt_files", ":", "\n", "        ", "boxes", ".", "extend", "(", "list", "(", "np", ".", "loadtxt", "(", "t", ",", "skiprows", "=", "1", ")", ".", "astype", "(", "int", ")", ")", ")", "\n", "", "return", "boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.postprocessing.blend.blend_and_save_images": [[37, 77], ["blend.mkdir", "os.path.join", "blend.load_bboxes", "print", "tqdm.tqdm", "os.path.join", "blend.mkdir", "face_pth.replace", "face_pth.replace", "face_pth.replace", "skimage.img_as_float32", "int", "skimage.img_as_float32", "skimage.img_as_float32", "blender", "cv2.imwrite", "os.path.join", "cv2.imread", "skimage.img_as_float32", "cv2.imread", "cv2.imread", "cv2.resize", "face_pth.replace", "skimage.img_as_ubyte", "cv2.imwrite", "os.path.splitext", "cv2.imread", "numpy.clip", "cv2.resize", "face_pth.replace", "skimage.img_as_ubyte", "os.path.basename", "numpy.clip"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.renderer.create_inputs.mkdir", "home.repos.pwc.inspect_result.foivospar_NED.postprocessing.blend.load_bboxes", "home.repos.pwc.inspect_result.foivospar_NED.renderer.create_inputs.mkdir"], ["", "def", "blend_and_save_images", "(", "face_pths", ",", "blender", ",", "args", ")", ":", "\n", "\n", "    ", "mkdir", "(", "os", ".", "path", ".", "join", "(", "args", ".", "celeb", ",", "args", ".", "exp_name", ",", "'full_frames'", ")", ")", "\n", "if", "args", ".", "save_images", ":", "\n", "        ", "mkdir", "(", "os", ".", "path", ".", "join", "(", "args", ".", "celeb", ",", "args", ".", "exp_name", ",", "'images'", ")", ")", "\n", "\n", "# Load original bounding boxes", "\n", "", "videos_folder", "=", "os", ".", "path", ".", "join", "(", "args", ".", "celeb", ",", "'videos'", ")", "\n", "boxes", "=", "load_bboxes", "(", "videos_folder", ")", "\n", "\n", "print", "(", "'Bleding and saving images'", ")", "\n", "for", "face_pth", "in", "tqdm", "(", "face_pths", ")", ":", "\n", "        ", "full_frame_pth", "=", "face_pth", ".", "replace", "(", "f'/{args.exp_name}/faces'", ",", "'/full_frames'", ")", "\n", "mask_pth", "=", "face_pth", ".", "replace", "(", "f'/{args.exp_name}/faces'", ",", "'/masks'", ")", "\n", "img_pth", "=", "face_pth", ".", "replace", "(", "f'/{args.exp_name}/faces'", ",", "'/images'", ")", "\n", "\n", "full_frame", "=", "img_as_float32", "(", "cv2", ".", "imread", "(", "full_frame_pth", ")", ")", "\n", "\n", "ind", "=", "int", "(", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "face_pth", ")", ")", "[", "0", "]", ")", "\n", "box", "=", "boxes", "[", "ind", "]", "\n", "\n", "if", "args", ".", "resize_first", ":", "\n", "            ", "imgA", "=", "full_frame", "[", "box", "[", "1", "]", ":", "box", "[", "3", "]", ",", "box", "[", "0", "]", ":", "box", "[", "2", "]", "]", "\n", "", "else", ":", "\n", "            ", "imgA", "=", "img_as_float32", "(", "cv2", ".", "imread", "(", "img_pth", ")", ")", "\n", "", "imgB", "=", "img_as_float32", "(", "cv2", ".", "imread", "(", "face_pth", ")", ")", "\n", "mask", "=", "img_as_float32", "(", "cv2", ".", "imread", "(", "mask_pth", ")", ")", "\n", "shape", "=", "imgB", ".", "shape", "\n", "\n", "new", "=", "blender", "(", "imgA", ",", "imgB", ",", "mask", ")", "\n", "if", "args", ".", "resize_first", ":", "\n", "            ", "full_frame", "[", "box", "[", "1", "]", ":", "box", "[", "3", "]", ",", "box", "[", "0", "]", ":", "box", "[", "2", "]", "]", "=", "new", "\n", "", "else", ":", "\n", "            ", "full_frame", "[", "box", "[", "1", "]", ":", "box", "[", "3", "]", ",", "box", "[", "0", "]", ":", "box", "[", "2", "]", "]", "=", "cv2", ".", "resize", "(", "new", ",", "(", "box", "[", "2", "]", "-", "box", "[", "0", "]", ",", "box", "[", "3", "]", "-", "box", "[", "1", "]", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LANCZOS4", ")", "\n", "", "cv2", ".", "imwrite", "(", "face_pth", ".", "replace", "(", "'/faces/'", ",", "'/full_frames/'", ")", ",", "img_as_ubyte", "(", "np", ".", "clip", "(", "full_frame", ",", "0", ",", "1", ")", ")", ")", "\n", "\n", "if", "args", ".", "save_images", ":", "\n", "            ", "if", "new", ".", "shape", "!=", "shape", ":", "\n", "                ", "new", "=", "cv2", ".", "resize", "(", "new", ",", "(", "shape", "[", "1", "]", ",", "shape", "[", "0", "]", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "", "cv2", ".", "imwrite", "(", "face_pth", ".", "replace", "(", "'/faces/'", ",", "'/images/'", ")", ",", "img_as_ubyte", "(", "np", ".", "clip", "(", "new", ",", "0", ",", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.postprocessing.blend.print_args": [[78, 89], ["sorted", "print", "vars().items", "parser.get_default", "str", "str", "vars", "str"], "function", ["None"], ["", "", "", "def", "print_args", "(", "parser", ",", "args", ")", ":", "\n", "    ", "message", "=", "''", "\n", "message", "+=", "'----------------- Arguments ---------------\\n'", "\n", "for", "k", ",", "v", "in", "sorted", "(", "vars", "(", "args", ")", ".", "items", "(", ")", ")", ":", "\n", "        ", "comment", "=", "''", "\n", "default", "=", "parser", ".", "get_default", "(", "k", ")", "\n", "if", "v", "!=", "default", ":", "\n", "            ", "comment", "=", "'\\t[default: %s]'", "%", "str", "(", "default", ")", "\n", "", "message", "+=", "'{:>25}: {:<30}{}\\n'", ".", "format", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ",", "comment", ")", "\n", "", "message", "+=", "'-------------------------------------------'", "\n", "print", "(", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.postprocessing.blend.main": [[90, 129], ["print", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "int", "blend.print_args", "os.path.join", "blend.get_image_paths", "torch.cuda.is_available", "os.path.exists", "postprocessing.image_blending.image_blender.Blend", "blend.blend_and_save_images", "print", "print", "print", "exit", "os.path.join.replace", "torch.cuda.device_count", "str"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.utils.config.parse_args", "home.repos.pwc.inspect_result.foivospar_NED.renderer.create_inputs.print_args", "home.repos.pwc.inspect_result.foivospar_NED.models.base_model.BaseModel.get_image_paths", "home.repos.pwc.inspect_result.foivospar_NED.postprocessing.blend.blend_and_save_images"], ["", "def", "main", "(", ")", ":", "\n", "    ", "print", "(", "'---------- Image blending --------- \\n'", ")", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_id'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "help", "=", "'Negative value to use CPU, or greater or equal than zero for GPU id.'", ")", "\n", "parser", ".", "add_argument", "(", "'--celeb'", ",", "type", "=", "str", ",", "default", "=", "'JackNicholson'", ",", "help", "=", "'Path to celebrity folder.'", ")", "\n", "parser", ".", "add_argument", "(", "'--exp_name'", ",", "type", "=", "str", ",", "default", "=", "'Pacino'", ",", "help", "=", "'Experiment sub-folder'", ")", "\n", "parser", ".", "add_argument", "(", "'--resize_first'", ",", "action", "=", "'store_true'", ",", "help", "=", "'If specified, first resize image, then blend, else reversely'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_images'", ",", "action", "=", "'store_true'", ",", "help", "=", "'If specified, save the cropped blended images, apart from the full frames'", ")", "\n", "parser", ".", "add_argument", "(", "'--method'", ",", "type", "=", "str", ",", "default", "=", "'pyramid'", ",", "choices", "=", "[", "'copy_paste'", ",", "'pyramid'", ",", "'poisson'", "]", ",", "help", "=", "'Blending method'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_levels'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'Number of levels of the laplacian pyramid, if pyramid blending is used'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_levels_copy'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'Number of levels at the top of the laplacian pyramid to copy from image A'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "# Figure out the device", "\n", "gpu_id", "=", "int", "(", "args", ".", "gpu_id", ")", "\n", "if", "gpu_id", "<", "0", ":", "\n", "        ", "device", "=", "'cpu'", "\n", "", "elif", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "if", "gpu_id", ">=", "torch", ".", "cuda", ".", "device_count", "(", ")", ":", "\n", "            ", "device", "=", "'cuda:0'", "\n", "", "else", ":", "\n", "            ", "device", "=", "'cuda:'", "+", "str", "(", "gpu_id", ")", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "'GPU device not available. Exit'", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "# Print Arguments", "\n", "", "print_args", "(", "parser", ",", "args", ")", "\n", "\n", "faces_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "celeb", ",", "args", ".", "exp_name", ",", "'faces'", ")", "\n", "\n", "face_paths", "=", "get_image_paths", "(", "faces_path", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "faces_path", ".", "replace", "(", "'/faces'", ",", "'/full_frames'", ")", ")", ":", "\n", "        ", "blender", "=", "Blend", "(", "method", "=", "args", ".", "method", ",", "n_levels", "=", "args", ".", "n_levels", ",", "n_levels_copy", "=", "args", ".", "n_levels_copy", ",", "device", "=", "device", ")", "\n", "blend_and_save_images", "(", "face_paths", ",", "blender", ",", "args", ")", "\n", "print", "(", "'DONE!'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Image blending already done!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.image_blending.image_blender.Blend.__init__": [[11, 19], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "method", "=", "'pyramid'", ",", "n_levels", "=", "4", ",", "n_levels_copy", "=", "0", ",", "device", "=", "'cuda:0'", ")", ":", "\n", "        ", "self", ".", "method", "=", "method", "\n", "if", "self", ".", "method", "not", "in", "[", "'pyramid'", ",", "'copy_paste'", ",", "'poisson'", "]", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "if", "self", ".", "method", "==", "'pyramid'", "or", "self", ".", "method", "==", "'poisson'", ":", "\n", "            ", "self", ".", "n_levels", "=", "n_levels", "\n", "self", ".", "n_levels_copy", "=", "n_levels_copy", "\n", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.image_blending.image_blender.Blend.paste_blending": [[20, 25], ["None"], "methods", ["None"], ["", "", "def", "paste_blending", "(", "self", ",", "imgA", ",", "imgB", ",", "mask", ")", ":", "\n", "        ", "\"\"\"\n        Simple copy-paste blending\n        \"\"\"", "\n", "return", "imgA", "*", "(", "1.0", "-", "mask", ")", "+", "imgB", "*", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.image_blending.image_blender.Blend.poisson_blending": [[26, 34], ["cv2.boundingRect", "cv2.seamlessClone", "skimage.img_as_float32", "skimage.img_as_ubyte", "int", "int", "skimage.img_as_ubyte", "skimage.img_as_ubyte", "skimage.img_as_ubyte", "numpy.clip", "numpy.clip"], "methods", ["None"], ["", "def", "poisson_blending", "(", "self", ",", "imgA", ",", "imgB", ",", "mask", ")", ":", "\n", "        ", "\"\"\"\n        Poisson image editing\n        \"\"\"", "\n", "x", ",", "y", ",", "w", ",", "h", "=", "cv2", ".", "boundingRect", "(", "img_as_ubyte", "(", "mask", "[", ":", ",", ":", ",", "0", "]", ")", ")", "\n", "center", "=", "(", "int", "(", "x", "+", "w", "*", "0.5", ")", ",", "int", "(", "y", "+", "h", "*", "0.5", ")", ")", "\n", "mixed", "=", "cv2", ".", "seamlessClone", "(", "img_as_ubyte", "(", "np", ".", "clip", "(", "imgB", ",", "0", ",", "1", ")", ")", ",", "img_as_ubyte", "(", "np", ".", "clip", "(", "imgA", ",", "0", ",", "1", ")", ")", ",", "img_as_ubyte", "(", "mask", ")", ",", "center", ",", "cv2", ".", "NORMAL_CLONE", ")", "\n", "return", "img_as_float32", "(", "mixed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.image_blending.image_blender.Blend.gaussian_pyramid": [[35, 45], ["img.copy", "range", "cv2.pyrDown", "gaussian_pyr.append"], "methods", ["None"], ["", "def", "gaussian_pyramid", "(", "self", ",", "img", ",", "num_levels", ")", ":", "\n", "        ", "\"\"\"\n        Returns gaussian pyramid\n        \"\"\"", "\n", "lower", "=", "img", ".", "copy", "(", ")", "\n", "gaussian_pyr", "=", "[", "lower", "]", "\n", "for", "i", "in", "range", "(", "num_levels", ")", ":", "\n", "            ", "lower", "=", "cv2", ".", "pyrDown", "(", "lower", ")", "\n", "gaussian_pyr", ".", "append", "(", "lower", ")", "\n", "", "return", "gaussian_pyr", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.image_blending.image_blender.Blend.laplacian_pyramid": [[46, 60], ["range", "len", "cv2.pyrUp", "cv2.subtract", "laplacian_pyr.append"], "methods", ["None"], ["", "def", "laplacian_pyramid", "(", "self", ",", "gaussian_pyr", ")", ":", "\n", "        ", "\"\"\"\n        Returns laplacian pyramid\n        \"\"\"", "\n", "laplacian_top", "=", "gaussian_pyr", "[", "-", "1", "]", "\n", "num_levels", "=", "len", "(", "gaussian_pyr", ")", "-", "1", "\n", "\n", "laplacian_pyr", "=", "[", "laplacian_top", "]", "\n", "for", "i", "in", "range", "(", "num_levels", ",", "0", ",", "-", "1", ")", ":", "\n", "            ", "size", "=", "(", "gaussian_pyr", "[", "i", "-", "1", "]", ".", "shape", "[", "1", "]", ",", "gaussian_pyr", "[", "i", "-", "1", "]", ".", "shape", "[", "0", "]", ")", "\n", "gaussian_expanded", "=", "cv2", ".", "pyrUp", "(", "gaussian_pyr", "[", "i", "]", ",", "dstsize", "=", "size", ")", "\n", "laplacian", "=", "cv2", ".", "subtract", "(", "gaussian_pyr", "[", "i", "-", "1", "]", ",", "gaussian_expanded", ")", "\n", "laplacian_pyr", ".", "append", "(", "laplacian", ")", "\n", "", "return", "laplacian_pyr", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.image_blending.image_blender.Blend.blend_laplacians": [[61, 73], ["enumerate", "zip", "LS.append", "la.copy"], "methods", ["None"], ["", "def", "blend_laplacians", "(", "self", ",", "laplacian_A", ",", "laplacian_B", ",", "mask_pyr", ")", ":", "\n", "        ", "\"\"\"\n        Blends the laplacian pyramids of the 2 images based on the mask pyramid\n        \"\"\"", "\n", "LS", "=", "[", "]", "\n", "for", "i", ",", "(", "la", ",", "lb", ",", "mask", ")", "in", "enumerate", "(", "zip", "(", "laplacian_A", ",", "laplacian_B", ",", "mask_pyr", ")", ")", ":", "\n", "            ", "if", "i", "<", "self", ".", "n_levels_copy", ":", "\n", "                ", "ls", "=", "la", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "                ", "ls", "=", "lb", "*", "mask", "+", "la", "*", "(", "1.0", "-", "mask", ")", "\n", "", "LS", ".", "append", "(", "ls", ")", "\n", "", "return", "LS", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.image_blending.image_blender.Blend.reconstruct": [[74, 85], ["range", "len", "cv2.pyrUp", "cv2.add"], "methods", ["None"], ["", "def", "reconstruct", "(", "self", ",", "laplacian_pyr", ")", ":", "\n", "        ", "\"\"\"\n        Reconstructs the original image from the laplacian pyramid\n        \"\"\"", "\n", "laplacian_top", "=", "laplacian_pyr", "[", "0", "]", "\n", "num_levels", "=", "len", "(", "laplacian_pyr", ")", "-", "1", "\n", "for", "i", "in", "range", "(", "num_levels", ")", ":", "\n", "            ", "size", "=", "(", "laplacian_pyr", "[", "i", "+", "1", "]", ".", "shape", "[", "1", "]", ",", "laplacian_pyr", "[", "i", "+", "1", "]", ".", "shape", "[", "0", "]", ")", "\n", "laplacian_expanded", "=", "cv2", ".", "pyrUp", "(", "laplacian_top", ",", "dstsize", "=", "size", ")", "\n", "laplacian_top", "=", "cv2", ".", "add", "(", "laplacian_pyr", "[", "i", "+", "1", "]", ",", "laplacian_expanded", ")", "\n", "", "return", "laplacian_top", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.image_blending.image_blender.Blend.__call__": [[86, 133], ["cv2.resize", "cv2.resize", "image_blender.Blend.paste_blending", "int", "SoftErosion().to", "[].to", "SoftErosion().to.", "numpy.float32", "image_blender.Blend.gaussian_pyramid", "image_blender.Blend.laplacian_pyramid", "image_blender.Blend.gaussian_pyramid", "image_blender.Blend.laplacian_pyramid", "image_blender.Blend.gaussian_pyramid", "image_blender.Blend.reverse", "image_blender.Blend.blend_laplacians", "image_blender.Blend.reconstruct", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "numpy.float32.squeeze().permute().repeat().cpu().numpy", "image_blender.Blend.poisson_blending", "image_blender.Blend.__call__", "image_blender.SoftErosion", "torch.tensor().permute", "torch.tensor().permute", "torch.tensor().permute", "torch.tensor().permute", "numpy.float32.squeeze().permute().repeat().cpu", "image_blender.blursharpen", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.float32.squeeze().permute().repeat", "numpy.float32.squeeze().permute", "numpy.float32.squeeze"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.image_blending.image_blender.Blend.paste_blending", "home.repos.pwc.inspect_result.foivospar_NED.image_blending.image_blender.Blend.gaussian_pyramid", "home.repos.pwc.inspect_result.foivospar_NED.image_blending.image_blender.Blend.laplacian_pyramid", "home.repos.pwc.inspect_result.foivospar_NED.image_blending.image_blender.Blend.gaussian_pyramid", "home.repos.pwc.inspect_result.foivospar_NED.image_blending.image_blender.Blend.laplacian_pyramid", "home.repos.pwc.inspect_result.foivospar_NED.image_blending.image_blender.Blend.gaussian_pyramid", "home.repos.pwc.inspect_result.foivospar_NED.image_blending.image_blender.Blend.blend_laplacians", "home.repos.pwc.inspect_result.foivospar_NED.image_blending.image_blender.Blend.reconstruct", "home.repos.pwc.inspect_result.foivospar_NED.image_blending.image_blender.Blend.poisson_blending", "home.repos.pwc.inspect_result.foivospar_NED.models.networks.GANLoss.__call__", "home.repos.pwc.inspect_result.foivospar_NED.image_blending.image_blender.blursharpen"], ["", "def", "__call__", "(", "self", ",", "imgA", ",", "imgB", ",", "mask", ")", ":", "\n", "        ", "\"\"\"\n        Main function for blending\n            imgA, imgB, mask:   3-channel float32 images\n\n        \"\"\"", "\n", "# Resize if needed", "\n", "if", "imgA", ".", "shape", "!=", "imgB", ".", "shape", ":", "\n", "            ", "imgB", "=", "cv2", ".", "resize", "(", "imgB", ",", "(", "imgA", ".", "shape", "[", "1", "]", ",", "imgA", ".", "shape", "[", "0", "]", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LANCZOS4", ")", "\n", "mask", "=", "cv2", ".", "resize", "(", "mask", ",", "(", "imgA", ".", "shape", "[", "1", "]", ",", "imgA", ".", "shape", "[", "0", "]", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "\n", "\n", "", "if", "self", ".", "method", "==", "'copy_paste'", ":", "\n", "            ", "new_img", "=", "self", ".", "paste_blending", "(", "imgA", ",", "imgB", ",", "mask", ")", "\n", "", "elif", "self", ".", "method", "==", "'pyramid'", ":", "\n", "# erode mask", "\n", "            ", "kernel_size", "=", "int", "(", "33", "*", "(", "imgA", ".", "shape", "[", "0", "]", "/", "256", ")", ")", "\n", "if", "kernel_size", "%", "2", "==", "0", ":", "\n", "                ", "kernel_size", "+=", "1", "\n", "", "smoother", "=", "SoftErosion", "(", "kernel_size", "=", "kernel_size", ",", "threshold", "=", "0.8", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "mask", "=", "torch", ".", "tensor", "(", "mask", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "[", "0", ":", "1", "]", ".", "to", "(", "self", ".", "device", ")", "# (1,H,W)", "\n", "_", ",", "mask", "=", "smoother", "(", "torch", ".", "unsqueeze", "(", "mask", ",", "0", ")", ")", "# (1,1,H,W)", "\n", "mask", "=", "np", ".", "float32", "(", "mask", ".", "squeeze", "(", "0", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "repeat", "(", "1", ",", "1", ",", "3", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "# (H,W,3)", "\n", "\n", "# For image-A, calculate Gaussian and Laplacian", "\n", "gaussian_pyr_A", "=", "self", ".", "gaussian_pyramid", "(", "imgA", ",", "self", ".", "n_levels", ")", "\n", "laplacian_pyr_A", "=", "self", ".", "laplacian_pyramid", "(", "gaussian_pyr_A", ")", "\n", "# For image-B, calculate Gaussian and Laplacian", "\n", "gaussian_pyr_B", "=", "self", ".", "gaussian_pyramid", "(", "imgB", ",", "self", ".", "n_levels", ")", "\n", "laplacian_pyr_B", "=", "self", ".", "laplacian_pyramid", "(", "gaussian_pyr_B", ")", "\n", "# Calculate the Gaussian pyramid for the mask image and reverse it.", "\n", "mask_pyr", "=", "self", ".", "gaussian_pyramid", "(", "mask", ",", "self", ".", "n_levels", ")", "\n", "mask_pyr", ".", "reverse", "(", ")", "\n", "# Blend the laplacians", "\n", "add_laplace", "=", "self", ".", "blend_laplacians", "(", "laplacian_pyr_A", ",", "laplacian_pyr_B", ",", "mask_pyr", ")", "\n", "# Reconstruct the images", "\n", "new_img", "=", "self", ".", "reconstruct", "(", "add_laplace", ")", "\n", "\n", "", "elif", "self", ".", "method", "==", "'poisson'", ":", "\n", "            ", "new_img", "=", "self", ".", "poisson_blending", "(", "imgA", ",", "imgB", ",", "mask", ")", "\n", "self", ".", "method", "=", "'pyramid'", "\n", "new_img", "=", "self", ".", "__call__", "(", "imgA", ",", "new_img", ",", "mask", ")", "\n", "self", ".", "method", "=", "'poisson'", "\n", "\n", "new_img", "=", "blursharpen", "(", "new_img", ")", "*", "mask", "+", "(", "1.0", "-", "mask", ")", "*", "imgA", "\n", "\n", "", "return", "new_img", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.image_blending.image_blender.SoftErosion.__init__": [[174, 188], ["super().__init__", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "kernel.view.view.sum", "kernel.view.view.view", "image_blender.SoftErosion.register_buffer", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.sqrt.max", "torch.sqrt.max"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.datasets.datasets.TestData.__init__"], ["def", "__init__", "(", "self", ",", "kernel_size", "=", "15", ",", "threshold", "=", "0.6", ",", "iterations", "=", "1", ")", ":", "\n", "        ", "super", "(", "SoftErosion", ",", "self", ")", ".", "__init__", "(", ")", "\n", "r", "=", "kernel_size", "//", "2", "\n", "self", ".", "padding", "=", "r", "\n", "self", ".", "iterations", "=", "iterations", "\n", "self", ".", "threshold", "=", "threshold", "\n", "\n", "# Create kernel", "\n", "y_indices", ",", "x_indices", "=", "torch", ".", "meshgrid", "(", "torch", ".", "arange", "(", "0.", ",", "kernel_size", ")", ",", "torch", ".", "arange", "(", "0.", ",", "kernel_size", ")", ")", "\n", "dist", "=", "torch", ".", "sqrt", "(", "(", "x_indices", "-", "r", ")", "**", "2", "+", "(", "y_indices", "-", "r", ")", "**", "2", ")", "\n", "kernel", "=", "dist", ".", "max", "(", ")", "-", "dist", "\n", "kernel", "/=", "kernel", ".", "sum", "(", ")", "\n", "kernel", "=", "kernel", ".", "view", "(", "1", ",", "1", ",", "*", "kernel", ".", "shape", ")", "\n", "self", ".", "register_buffer", "(", "'weight'", ",", "kernel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.image_blending.image_blender.SoftErosion.forward": [[189, 208], ["torch.min.float", "torch.min.float", "range", "torch.conv2d", "torch.conv2d", "x[].max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.conv2d", "torch.conv2d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\" Apply the soft erosion operation.\n        Args:\n            x (torch.Tensor): A binary mask of shape (1, H, W)\n        Returns:\n            (torch.Tensor, torch.Tensor): Tuple containing:\n                - soft_mask (torch.Tensor): The soft mask of shape (1, H, W)\n                - hard_mask (torch.Tensor): The hard mask of shape (1, H, W)\n        \"\"\"", "\n", "x", "=", "x", ".", "float", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "iterations", "-", "1", ")", ":", "\n", "            ", "x", "=", "torch", ".", "min", "(", "x", ",", "F", ".", "conv2d", "(", "x", ",", "weight", "=", "self", ".", "weight", ",", "groups", "=", "x", ".", "shape", "[", "1", "]", ",", "padding", "=", "self", ".", "padding", ")", ")", "\n", "", "x", "=", "F", ".", "conv2d", "(", "x", ",", "weight", "=", "self", ".", "weight", ",", "groups", "=", "x", ".", "shape", "[", "1", "]", ",", "padding", "=", "self", ".", "padding", ")", "\n", "\n", "mask", "=", "x", ">=", "self", ".", "threshold", "\n", "x", "[", "mask", "]", "=", "1.0", "\n", "x", "[", "~", "mask", "]", "/=", "x", "[", "~", "mask", "]", ".", "max", "(", ")", "\n", "\n", "return", "x", ",", "mask", "\n", "", "", ""]], "home.repos.pwc.inspect_result.foivospar_NED.image_blending.image_blender.blursharpen": [[134, 162], ["numpy.zeros", "cv2.filter2D", "numpy.ones", "cv2.GaussianBlur", "cv2.addWeighted", "cv2.medianBlur", "max", "int"], "function", ["None"], ["", "", "def", "blursharpen", "(", "img", ",", "sharpen_mode", "=", "2", ",", "kernel_size", "=", "3", ",", "amount", "=", "3", ")", ":", "\n", "    ", "if", "kernel_size", "%", "2", "==", "0", ":", "\n", "        ", "kernel_size", "+=", "1", "\n", "", "if", "amount", ">", "0", ":", "\n", "        ", "if", "sharpen_mode", "==", "1", ":", "#box", "\n", "            ", "kernel", "=", "np", ".", "zeros", "(", "(", "kernel_size", ",", "kernel_size", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "kernel", "[", "kernel_size", "//", "2", ",", "kernel_size", "//", "2", "]", "=", "1.0", "\n", "box_filter", "=", "np", ".", "ones", "(", "(", "kernel_size", ",", "kernel_size", ")", ",", "dtype", "=", "np", ".", "float32", ")", "/", "(", "kernel_size", "**", "2", ")", "\n", "kernel", "=", "kernel", "+", "(", "kernel", "-", "box_filter", ")", "*", "amount", "\n", "return", "cv2", ".", "filter2D", "(", "img", ",", "-", "1", ",", "kernel", ")", "\n", "", "elif", "sharpen_mode", "==", "2", ":", "#gaussian", "\n", "            ", "blur", "=", "cv2", ".", "GaussianBlur", "(", "img", ",", "(", "kernel_size", ",", "kernel_size", ")", ",", "0", ")", "\n", "img", "=", "cv2", ".", "addWeighted", "(", "img", ",", "1.0", "+", "(", "0.5", "*", "amount", ")", ",", "blur", ",", "-", "(", "0.5", "*", "amount", ")", ",", "0", ")", "\n", "return", "img", "\n", "", "", "elif", "amount", "<", "0", ":", "\n", "        ", "n", "=", "-", "amount", "\n", "while", "n", ">", "0", ":", "\n", "\n", "            ", "img_blur", "=", "cv2", ".", "medianBlur", "(", "img", ",", "5", ")", "\n", "if", "int", "(", "n", "/", "10", ")", "!=", "0", ":", "\n", "                ", "img", "=", "img_blur", "\n", "", "else", ":", "\n", "                ", "pass_power", "=", "(", "n", "%", "10", ")", "/", "10.0", "\n", "img", "=", "img", "*", "(", "1.0", "-", "pass_power", ")", "+", "img_blur", "*", "pass_power", "\n", "", "n", "=", "max", "(", "n", "-", "10", ",", "0", ")", "\n", "\n", "", "return", "img", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.manipulator.test.geometric_median": [[18, 45], ["numpy.mean", "scipy.spatial.distance.cdist", "numpy.sum", "numpy.sum", "len", "numpy.sum", "scipy.spatial.distance.euclidean", "len", "numpy.linalg.norm", "max", "min"], "function", ["None"], ["def", "geometric_median", "(", "X", ",", "eps", "=", "1e-5", ")", ":", "\n", "    ", "y", "=", "np", ".", "mean", "(", "X", ",", "0", ")", "\n", "\n", "while", "True", ":", "\n", "        ", "D", "=", "cdist", "(", "X", ",", "[", "y", "]", ")", "\n", "nonzeros", "=", "(", "D", "!=", "0", ")", "[", ":", ",", "0", "]", "\n", "\n", "Dinv", "=", "1", "/", "D", "[", "nonzeros", "]", "\n", "Dinvs", "=", "np", ".", "sum", "(", "Dinv", ")", "\n", "W", "=", "Dinv", "/", "Dinvs", "\n", "T", "=", "np", ".", "sum", "(", "W", "*", "X", "[", "nonzeros", "]", ",", "0", ")", "\n", "\n", "num_zeros", "=", "len", "(", "X", ")", "-", "np", ".", "sum", "(", "nonzeros", ")", "\n", "if", "num_zeros", "==", "0", ":", "\n", "            ", "y1", "=", "T", "\n", "", "elif", "num_zeros", "==", "len", "(", "X", ")", ":", "\n", "            ", "return", "y", "\n", "", "else", ":", "\n", "            ", "R", "=", "(", "T", "-", "y", ")", "*", "Dinvs", "\n", "r", "=", "np", ".", "linalg", ".", "norm", "(", "R", ")", "\n", "rinv", "=", "0", "if", "r", "==", "0", "else", "num_zeros", "/", "r", "\n", "y1", "=", "max", "(", "0", ",", "1", "-", "rinv", ")", "*", "T", "+", "min", "(", "1", ",", "rinv", ")", "*", "y", "\n", "\n", "", "if", "euclidean", "(", "y", ",", "y1", ")", "<", "eps", ":", "\n", "            ", "return", "y1", "\n", "\n", "", "y", "=", "y1", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.manipulator.test.get_style_vectors": [[47, 79], ["torch.no_grad", "len", "torch.randn().to", "torch.cat", "torch.from_numpy().type().to", "s_ref.view.view", "s_refs.append", "opt.selected_emotions.index", "s_refs.append", "x_ref.to.to", "s_ref.view.append", "print", "exit", "torch.randn", "nets.mapping_network", "nets.style_encoder", "torch.from_numpy().type", "torch.LongTensor().to().fill_", "torch.from_numpy", "torch.LongTensor().to", "test.geometric_median", "s_ref.view.cpu().numpy", "torch.LongTensor", "s_ref.view.cpu"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.manipulator.test.geometric_median"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_style_vectors", "(", "nets", ",", "opt", ",", "loader_src", ",", "loaders_ref", ")", ":", "\n", "    ", "device", "=", "f'cuda:{opt.gpu_ids[0]}'", "if", "len", "(", "opt", ".", "gpu_ids", ")", "else", "'cpu'", "\n", "\n", "s_refs", "=", "[", "]", "\n", "\n", "if", "loaders_ref", "is", "not", "None", ":", "# reference-guided", "\n", "# calculate average style vector of reference sequences", "\n", "        ", "for", "loader", "in", "loaders_ref", ":", "\n", "            ", "s_ref", "=", "[", "]", "\n", "for", "x_ref", ",", "_", "in", "loader", ":", "\n", "                ", "x_ref", "=", "x_ref", ".", "to", "(", "device", ")", "\n", "s_ref", ".", "append", "(", "nets", ".", "style_encoder", "(", "x_ref", ")", ")", "\n", "", "s_ref", "=", "torch", ".", "cat", "(", "s_ref", ",", "dim", "=", "0", ")", "\n", "# geometric median", "\n", "s_ref", "=", "torch", ".", "from_numpy", "(", "geometric_median", "(", "s_ref", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", ".", "type", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "s_ref", "=", "s_ref", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "s_refs", ".", "append", "(", "s_ref", ")", "\n", "\n", "", "", "else", ":", "# label-guided", "\n", "        ", "for", "e", "in", "opt", ".", "trg_emotions", ":", "\n", "            ", "if", "e", "not", "in", "opt", ".", "selected_emotions", ":", "\n", "                ", "print", "(", "'Invalid target emotion!'", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "# generate style vectors", "\n", "", "", "z_trg", "=", "torch", ".", "randn", "(", "1", ",", "opt", ".", "latent_dim", ")", ".", "to", "(", "device", ")", "\n", "for", "e", "in", "opt", ".", "trg_emotions", ":", "\n", "            ", "y", "=", "opt", ".", "selected_emotions", ".", "index", "(", "e", ")", "\n", "s_refs", ".", "append", "(", "nets", ".", "mapping_network", "(", "z_trg", ",", "torch", ".", "LongTensor", "(", "1", ")", ".", "to", "(", "device", ")", ".", "fill_", "(", "y", ")", ")", ")", "\n", "\n", "", "", "return", "s_refs", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.__init__": [[16, 22], ["os.makedirs", "os.path.dirname"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "fname_template", ",", "opt", ",", "data_parallel", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "fname_template", ")", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "fname_template", "=", "fname_template", "\n", "self", ".", "data_parallel", "=", "data_parallel", "\n", "self", ".", "module_dict", "=", "kwargs", "\n", "self", ".", "opt", "=", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.save": [[23, 33], ["checkpoint.CheckpointIO.fname_template.format", "print", "checkpoint.CheckpointIO.module_dict.items", "torch.save", "module.module.state_dict", "module.state_dict"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.models.base_model.BaseModel.save"], ["", "def", "save", "(", "self", ",", "step", ")", ":", "\n", "        ", "fname", "=", "self", ".", "fname_template", ".", "format", "(", "step", ")", "\n", "print", "(", "'Saving checkpoint into %s...'", "%", "fname", ")", "\n", "outdict", "=", "{", "}", "\n", "for", "name", ",", "module", "in", "self", ".", "module_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "self", ".", "data_parallel", ":", "\n", "                ", "outdict", "[", "name", "]", "=", "module", ".", "module", ".", "state_dict", "(", ")", "\n", "", "else", ":", "\n", "                ", "outdict", "[", "name", "]", "=", "module", ".", "state_dict", "(", ")", "\n", "", "", "torch", ".", "save", "(", "outdict", ",", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load": [[34, 48], ["checkpoint.CheckpointIO.fname_template.format", "os.path.exists", "print", "torch.cuda.is_available", "checkpoint.CheckpointIO.module_dict.items", "torch.load", "torch.load", "module.module.load_state_dict", "module.load_state_dict", "torch.device"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.foivospar_NED.models.frnet.load_state_dict", "home.repos.pwc.inspect_result.foivospar_NED.models.frnet.load_state_dict"], ["", "def", "load", "(", "self", ",", "step", ")", ":", "\n", "        ", "fname", "=", "self", ".", "fname_template", ".", "format", "(", "step", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "fname", ")", ",", "fname", "+", "' does not exist!'", "\n", "print", "(", "'Loading checkpoint from %s...'", "%", "fname", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "module_dict", "=", "torch", ".", "load", "(", "fname", ",", "map_location", "=", "f'cuda:{self.opt.gpu_ids[0]}'", ")", "\n", "", "else", ":", "\n", "            ", "module_dict", "=", "torch", ".", "load", "(", "fname", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "\n", "", "for", "name", ",", "module", "in", "self", ".", "module_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "self", ".", "data_parallel", ":", "\n", "                ", "module", ".", "module", ".", "load_state_dict", "(", "module_dict", "[", "name", "]", ")", "\n", "", "else", ":", "\n", "                ", "module", ".", "load_state_dict", "(", "module_dict", "[", "name", "]", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.foivospar_NED.util.logger.StarganV2Logger.__init__": [[8, 10], ["torch.utils.tensorboard.SummaryWriter.__init__"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.datasets.datasets.TestData.__init__"], ["    ", "def", "__init__", "(", "self", ",", "logdir", ")", ":", "\n", "        ", "super", "(", "StarganV2Logger", ",", "self", ")", ".", "__init__", "(", "logdir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.util.logger.StarganV2Logger.log_training": [[11, 14], ["logger.StarganV2Logger.add_scalar"], "methods", ["None"], ["", "def", "log_training", "(", "self", ",", "key", ",", "value", ",", "\n", "iteration", ")", ":", "\n", "        ", "self", ".", "add_scalar", "(", "key", ",", "value", ",", "iteration", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.util.logger.StarganV2Logger.log_mesh": [[15, 22], ["logger.StarganV2Logger.add_video", "video.unsqueeze"], "methods", ["None"], ["", "def", "log_mesh", "(", "self", ",", "video", ",", "name", ",", "iteration", ")", ":", "\n", "# video = video.permute(0,3,1,2)", "\n", "        ", "self", ".", "add_video", "(", "\n", "'{}'", ".", "format", "(", "name", ")", ",", "\n", "video", ".", "unsqueeze", "(", "0", ")", ",", "\n", "fps", "=", "30", ",", "\n", "global_step", "=", "iteration", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.util.util.print_network": [[3, 8], ["network.parameters", "print", "p.numel"], "function", ["None"], ["def", "print_network", "(", "network", ",", "name", ")", ":", "\n", "    ", "num_params", "=", "0", "\n", "for", "p", "in", "network", ".", "parameters", "(", ")", ":", "\n", "        ", "num_params", "+=", "p", ".", "numel", "(", ")", "\n", "", "print", "(", "\"Number of parameters of %s: %i\"", "%", "(", "name", ",", "num_params", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.util.util.he_init": [[10, 19], ["isinstance", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.constant_", "torch.init.constant_"], "function", ["None"], ["", "def", "he_init", "(", "module", ")", ":", "\n", "    ", "if", "isinstance", "(", "module", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "module", ".", "weight", ",", "mode", "=", "'fan_in'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "0", ")", "\n", "", "", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "module", ".", "weight", ",", "mode", "=", "'fan_in'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "0", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.foivospar_NED.util.html.HTML.__init__": [[7, 20], ["os.path.join", "dominate.document", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "meta", "str"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "web_dir", ",", "title", ",", "reflesh", "=", "0", ")", ":", "\n", "        ", "self", ".", "title", "=", "title", "\n", "self", ".", "web_dir", "=", "web_dir", "\n", "self", ".", "img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "web_dir", ",", "'images'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "web_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "web_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "img_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "img_dir", ")", "\n", "\n", "", "self", ".", "doc", "=", "dominate", ".", "document", "(", "title", "=", "title", ")", "\n", "if", "reflesh", ">", "0", ":", "\n", "            ", "with", "self", ".", "doc", ".", "head", ":", "\n", "                ", "meta", "(", "http_equiv", "=", "\"reflesh\"", ",", "content", "=", "str", "(", "reflesh", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.util.html.HTML.get_image_dir": [[21, 23], ["None"], "methods", ["None"], ["", "", "", "def", "get_image_dir", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "img_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.util.html.HTML.add_header": [[24, 27], ["h3"], "methods", ["None"], ["", "def", "add_header", "(", "self", ",", "str", ")", ":", "\n", "        ", "with", "self", ".", "doc", ":", "\n", "            ", "h3", "(", "str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.util.html.HTML.add_table": [[28, 31], ["table", "html.HTML.doc.add"], "methods", ["None"], ["", "", "def", "add_table", "(", "self", ",", "border", "=", "1", ")", ":", "\n", "        ", "self", ".", "t", "=", "table", "(", "border", "=", "border", ",", "style", "=", "\"table-layout: fixed;\"", ")", "\n", "self", ".", "doc", ".", "add", "(", "self", ".", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.util.html.HTML.add_images": [[32, 46], ["html.HTML.add_table", "tr", "zip", "td", "p", "br", "p", "a", "img", "img", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.util.html.HTML.add_table"], ["", "def", "add_images", "(", "self", ",", "ims", ",", "txts", ",", "links", ",", "width", "=", "400", ",", "height", "=", "0", ")", ":", "\n", "        ", "self", ".", "add_table", "(", ")", "\n", "with", "self", ".", "t", ":", "\n", "            ", "with", "tr", "(", ")", ":", "\n", "                ", "for", "im", ",", "txt", ",", "link", "in", "zip", "(", "ims", ",", "txts", ",", "links", ")", ":", "\n", "                    ", "with", "td", "(", "style", "=", "\"word-wrap: break-word;\"", ",", "halign", "=", "\"center\"", ",", "valign", "=", "\"top\"", ")", ":", "\n", "                        ", "with", "p", "(", ")", ":", "\n", "                            ", "with", "a", "(", "href", "=", "os", ".", "path", ".", "join", "(", "'images'", ",", "link", ")", ")", ":", "\n", "                                ", "if", "height", "!=", "0", ":", "\n", "                                    ", "img", "(", "style", "=", "\"width:%dpx;height:%dpx\"", "%", "(", "width", ",", "height", ")", ",", "src", "=", "os", ".", "path", ".", "join", "(", "'images'", ",", "im", ")", ")", "\n", "", "else", ":", "\n", "                                    ", "img", "(", "style", "=", "\"width:%dpx\"", "%", "(", "width", ")", ",", "src", "=", "os", ".", "path", ".", "join", "(", "'images'", ",", "im", ")", ")", "\n", "", "", "br", "(", ")", "\n", "p", "(", "txt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.util.html.HTML.save": [[47, 52], ["open", "open.write", "open.close", "html.HTML.doc.render"], "methods", ["None"], ["", "", "", "", "", "", "def", "save", "(", "self", ")", ":", "\n", "        ", "html_file", "=", "'%s/index.html'", "%", "self", ".", "web_dir", "\n", "f", "=", "open", "(", "html_file", ",", "'wt'", ")", "\n", "f", ".", "write", "(", "self", ".", "doc", ".", "render", "(", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.util.visualizer.Visualizer.__init__": [[15, 35], ["os.path.join", "os.path.join", "tf.summary.FileWriter", "os.path.join", "os.path.join", "print", "util.mkdirs", "open", "time.strftime", "log_file.write"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.util.util.mkdirs"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "tf_log", "=", "opt", ".", "tf_log", "\n", "self", ".", "use_html", "=", "opt", ".", "isTrain", "and", "not", "opt", ".", "no_html", "\n", "self", ".", "win_size", "=", "opt", ".", "display_winsize", "\n", "if", "self", ".", "tf_log", ":", "\n", "            ", "import", "tensorflow", "as", "tf", "\n", "self", ".", "tf", "=", "tf", "\n", "self", ".", "log_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "'logs'", ")", "\n", "self", ".", "writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "self", ".", "log_dir", ")", "\n", "\n", "", "if", "self", ".", "use_html", ":", "\n", "            ", "self", ".", "web_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "'web'", ")", "\n", "self", ".", "img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "web_dir", ",", "'images'", ")", "\n", "print", "(", "'create web directory %s...'", "%", "self", ".", "web_dir", ")", "\n", "util", ".", "mkdirs", "(", "[", "self", ".", "web_dir", ",", "self", ".", "img_dir", "]", ")", "\n", "", "self", ".", "log_name", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "'loss_log.txt'", ")", "\n", "with", "open", "(", "self", ".", "log_name", ",", "\"a\"", ")", "as", "log_file", ":", "\n", "            ", "now", "=", "time", ".", "strftime", "(", "\"%c\"", ")", "\n", "log_file", ".", "write", "(", "'================ Training Loss (%s) ================\\n'", "%", "now", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.util.visualizer.Visualizer.display_current_results": [[37, 93], ["visuals.items", "visualizer.Visualizer.tf.Summary", "visualizer.Visualizer.writer.add_summary", "visuals.items", "html.HTML", "range", "html.HTML.save", "scipy.misc.toimage().save", "visualizer.Visualizer.tf.Summary.Image", "img_summaries.append", "isinstance", "html.HTML.add_header", "visuals.items", "StringIO", "visualizer.Visualizer.tf.Summary.Value", "range", "os.path.join", "util.save_image", "isinstance", "len", "html.HTML.add_images", "int", "html.HTML.add_images", "html.HTML.add_images", "BytesIO", "scipy.misc.toimage", "BytesIO.getvalue", "len", "os.path.join", "util.save_image", "range", "ims.append", "txts.append", "links.append", "round", "len", "ims.append", "txts.append", "links.append", "len", "str"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.foivospar_NED.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.foivospar_NED.util.html.HTML.add_header", "home.repos.pwc.inspect_result.foivospar_NED.util.util.save_image", "home.repos.pwc.inspect_result.foivospar_NED.util.html.HTML.add_images", "home.repos.pwc.inspect_result.foivospar_NED.util.html.HTML.add_images", "home.repos.pwc.inspect_result.foivospar_NED.util.html.HTML.add_images", "home.repos.pwc.inspect_result.foivospar_NED.util.util.save_image"], ["", "", "def", "display_current_results", "(", "self", ",", "visuals", ",", "epoch", ",", "step", ")", ":", "\n", "        ", "if", "self", ".", "tf_log", ":", "# show images in tensorboard output", "\n", "            ", "img_summaries", "=", "[", "]", "\n", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "# Write the image to a string", "\n", "                ", "try", ":", "\n", "                    ", "s", "=", "StringIO", "(", ")", "\n", "", "except", ":", "\n", "                    ", "s", "=", "BytesIO", "(", ")", "\n", "", "scipy", ".", "misc", ".", "toimage", "(", "image_numpy", ")", ".", "save", "(", "s", ",", "format", "=", "\"jpeg\"", ")", "\n", "# Create an Image object", "\n", "img_sum", "=", "self", ".", "tf", ".", "Summary", ".", "Image", "(", "encoded_image_string", "=", "s", ".", "getvalue", "(", ")", ",", "height", "=", "image_numpy", ".", "shape", "[", "0", "]", ",", "width", "=", "image_numpy", ".", "shape", "[", "1", "]", ")", "\n", "# Create a Summary value", "\n", "img_summaries", ".", "append", "(", "self", ".", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "label", ",", "image", "=", "img_sum", ")", ")", "\n", "\n", "# Create and write Summary", "\n", "", "summary", "=", "self", ".", "tf", ".", "Summary", "(", "value", "=", "img_summaries", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "\n", "", "if", "self", ".", "use_html", ":", "# save images to a html file", "\n", "            ", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "image_numpy", ",", "list", ")", ":", "\n", "                    ", "for", "i", "in", "range", "(", "len", "(", "image_numpy", ")", ")", ":", "\n", "                        ", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "'epoch%.3d_%s_%d.jpg'", "%", "(", "epoch", ",", "label", ",", "i", ")", ")", "\n", "util", ".", "save_image", "(", "image_numpy", "[", "i", "]", ",", "img_path", ")", "\n", "", "", "else", ":", "\n", "                    ", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "'epoch%.3d_%s.jpg'", "%", "(", "epoch", ",", "label", ")", ")", "\n", "util", ".", "save_image", "(", "image_numpy", ",", "img_path", ")", "\n", "\n", "# update website", "\n", "", "", "webpage", "=", "html", ".", "HTML", "(", "self", ".", "web_dir", ",", "'Neural Emotion Director (NED)'", ",", "reflesh", "=", "1", ")", "\n", "for", "n", "in", "range", "(", "epoch", ",", "0", ",", "-", "1", ")", ":", "\n", "                ", "webpage", ".", "add_header", "(", "'epoch [%d]'", "%", "n", ")", "\n", "ims", "=", "[", "]", "\n", "txts", "=", "[", "]", "\n", "links", "=", "[", "]", "\n", "\n", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                    ", "if", "isinstance", "(", "image_numpy", ",", "list", ")", ":", "\n", "                        ", "for", "i", "in", "range", "(", "len", "(", "image_numpy", ")", ")", ":", "\n", "                            ", "img_path", "=", "'epoch%.3d_%s_%d.jpg'", "%", "(", "n", ",", "label", ",", "i", ")", "\n", "ims", ".", "append", "(", "img_path", ")", "\n", "txts", ".", "append", "(", "label", "+", "str", "(", "i", ")", ")", "\n", "links", ".", "append", "(", "img_path", ")", "\n", "", "", "else", ":", "\n", "                        ", "img_path", "=", "'epoch%.3d_%s.jpg'", "%", "(", "n", ",", "label", ")", "\n", "ims", ".", "append", "(", "img_path", ")", "\n", "txts", ".", "append", "(", "label", ")", "\n", "links", ".", "append", "(", "img_path", ")", "\n", "", "", "if", "len", "(", "ims", ")", "<", "6", ":", "\n", "                    ", "webpage", ".", "add_images", "(", "ims", ",", "txts", ",", "links", ",", "width", "=", "self", ".", "win_size", ")", "\n", "", "else", ":", "\n", "                    ", "num", "=", "int", "(", "round", "(", "len", "(", "ims", ")", "/", "2.0", ")", ")", "\n", "webpage", ".", "add_images", "(", "ims", "[", ":", "num", "]", ",", "txts", "[", ":", "num", "]", ",", "links", "[", ":", "num", "]", ",", "width", "=", "self", ".", "win_size", ")", "\n", "webpage", ".", "add_images", "(", "ims", "[", "num", ":", "]", ",", "txts", "[", "num", ":", "]", ",", "links", "[", "num", ":", "]", ",", "width", "=", "self", ".", "win_size", ")", "\n", "", "", "webpage", ".", "save", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.util.visualizer.Visualizer.plot_current_errors": [[95, 100], ["errors.items", "visualizer.Visualizer.tf.Summary", "visualizer.Visualizer.writer.add_summary", "visualizer.Visualizer.tf.Summary.Value"], "methods", ["None"], ["", "", "def", "plot_current_errors", "(", "self", ",", "errors", ",", "step", ")", ":", "\n", "        ", "if", "self", ".", "tf_log", ":", "\n", "            ", "for", "tag", ",", "value", "in", "errors", ".", "items", "(", ")", ":", "\n", "                ", "summary", "=", "self", ".", "tf", ".", "Summary", "(", "value", "=", "[", "self", ".", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "tag", ",", "simple_value", "=", "value", ")", "]", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.util.visualizer.Visualizer.print_current_errors": [[102, 111], ["sorted", "print", "errors.items", "open", "log_file.write"], "methods", ["None"], ["", "", "", "def", "print_current_errors", "(", "self", ",", "epoch", ",", "i", ",", "errors", ",", "t", ")", ":", "\n", "        ", "message", "=", "'(epoch: %d, iters: %d, time: %.3f) \\n'", "%", "(", "epoch", ",", "i", ",", "t", ")", "\n", "for", "k", ",", "v", "in", "sorted", "(", "errors", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "v", "!=", "0", ":", "\n", "                ", "message", "+=", "'%s: %.3f \\n'", "%", "(", "k", ",", "v", ")", "\n", "\n", "", "", "print", "(", "message", ")", "\n", "with", "open", "(", "self", ".", "log_name", ",", "\"a\"", ")", "as", "log_file", ":", "\n", "            ", "log_file", ".", "write", "(", "'%s\\n'", "%", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.util.visualizer.Visualizer.vis_print": [[112, 116], ["print", "open", "log_file.write"], "methods", ["None"], ["", "", "def", "vis_print", "(", "self", ",", "message", ")", ":", "\n", "        ", "print", "(", "message", ")", "\n", "with", "open", "(", "self", ".", "log_name", ",", "\"a\"", ")", "as", "log_file", ":", "\n", "            ", "log_file", ".", "write", "(", "'%s\\n'", "%", "message", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.foivospar_NED.util.util.reshape": [[9, 16], ["isinstance", "tensors.size", "tensors.contiguous().view", "util.reshape", "tensors.contiguous"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.util.util.reshape"], ["\n", "", "def", "he_init", "(", "module", ")", ":", "\n", "    ", "if", "isinstance", "(", "module", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "module", ".", "weight", ",", "mode", "=", "'fan_in'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "0", ")", "\n", "", "", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "module", ".", "weight", ",", "mode", "=", "'fan_in'", ",", "nonlinearity", "=", "'relu'", ")", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.util.util.tensor2im": [[19, 43], ["isinstance", "isinstance", "image_tensor.cpu().float().numpy", "numpy.clip", "np.concatenate.astype", "range", "len", "len", "np.concatenate.append", "image_tensor.size", "image_tensor.cpu().float", "numpy.transpose", "numpy.zeros().astype", "numpy.concatenate", "util.tensor2im", "image_tensor.cpu", "numpy.transpose", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.util.util.tensor2im"], ["", "", "", ""]], "home.repos.pwc.inspect_result.foivospar_NED.util.util.save_image": [[44, 47], ["PIL.Image.fromarray", "Image.fromarray.save"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.models.base_model.BaseModel.save"], []], "home.repos.pwc.inspect_result.foivospar_NED.util.util.print_numpy": [[48, 56], ["x.flatten.astype", "print", "x.flatten.flatten", "print", "numpy.mean", "numpy.min", "numpy.max", "numpy.median", "numpy.std"], "function", ["None"], []], "home.repos.pwc.inspect_result.foivospar_NED.util.util.mkdirs": [[57, 63], ["isinstance", "util.mkdir", "isinstance", "util.mkdir"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.renderer.create_inputs.mkdir", "home.repos.pwc.inspect_result.foivospar_NED.renderer.create_inputs.mkdir"], []], "home.repos.pwc.inspect_result.foivospar_NED.util.util.mkdir": [[64, 67], ["os.path.exists", "os.makedirs"], "function", ["None"], []], "home.repos.pwc.inspect_result.foivospar_NED.util.util.fit_ROI_in_frame": [[68, 75], ["torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "function", ["None"], []], "home.repos.pwc.inspect_result.foivospar_NED.util.util.crop_ROI": [[76, 79], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.foivospar_NED.util.util.get_ROI": [[80, 95], ["range", "torch.stack", "torch.stack", "torch.stack", "util.fit_ROI_in_frame", "torch.stack.append", "torch.stack.append", "torch.stack.append", "util.crop_ROI", "util.crop_ROI", "util.crop_ROI"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.util.util.fit_ROI_in_frame", "home.repos.pwc.inspect_result.foivospar_NED.util.util.crop_ROI", "home.repos.pwc.inspect_result.foivospar_NED.util.util.crop_ROI", "home.repos.pwc.inspect_result.foivospar_NED.util.util.crop_ROI"], []], "home.repos.pwc.inspect_result.foivospar_NED.models.networks.MappingNetwork.__init__": [[6, 21], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.datasets.datasets.TestData.__init__"], ["    ", "def", "__init__", "(", "self", ",", "latent_dim", "=", "4", ",", "hidden_dim", "=", "64", ",", "style_dim", "=", "16", ",", "n_emotions", "=", "7", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "layers", "=", "[", "]", "\n", "layers", "+=", "[", "nn", ".", "Linear", "(", "latent_dim", ",", "hidden_dim", ")", "]", "\n", "layers", "+=", "[", "nn", ".", "ReLU", "(", ")", "]", "\n", "for", "_", "in", "range", "(", "2", ")", ":", "\n", "            ", "layers", "+=", "[", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", "]", "\n", "layers", "+=", "[", "nn", ".", "ReLU", "(", ")", "]", "\n", "", "self", ".", "shared", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "self", ".", "unshared", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "_", "in", "range", "(", "n_emotions", ")", ":", "\n", "            ", "self", ".", "unshared", "+=", "[", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_dim", ",", "style_dim", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.networks.MappingNetwork.forward": [[22, 31], ["networks.MappingNetwork.shared", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "layer", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "range", "y.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "z", ",", "y", ")", ":", "\n", "        ", "h", "=", "self", ".", "shared", "(", "z", ")", "\n", "out", "=", "[", "]", "\n", "for", "layer", "in", "self", ".", "unshared", ":", "\n", "            ", "out", "+=", "[", "layer", "(", "h", ")", "]", "\n", "", "out", "=", "torch", ".", "stack", "(", "out", ",", "dim", "=", "1", ")", "# (batch, n_emotions, style_dim)", "\n", "idx", "=", "torch", ".", "LongTensor", "(", "range", "(", "y", ".", "size", "(", "0", ")", ")", ")", ".", "to", "(", "y", ".", "device", ")", "\n", "s", "=", "out", "[", "idx", ",", "y", "]", "# (batch, style_dim)", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.networks.Generator.__init__": [[63, 107], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "range", "range", "range", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "networks.ResnetBlock", "networks.ResnetBlock", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "networks.ResnetBlock"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.datasets.datasets.TestData.__init__"], ["\n", "", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "\n", "        ", "self", ".", "LSTM", ".", "flatten_parameters", "(", ")", "\n", "out", ",", "_", "=", "self", ".", "LSTM", "(", "self", ".", "seq1", "(", "x", ")", ")", "\n", "out", "=", "torch", ".", "mean", "(", "self", ".", "seq2", "(", "out", ")", ",", "1", ")", "# (batch, n_emotions)", "\n", "\n", "idx", "=", "torch", ".", "LongTensor", "(", "range", "(", "y", ".", "size", "(", "0", ")", ")", ")", ".", "to", "(", "y", ".", "device", ")", "\n", "out", "=", "out", "[", "idx", ",", "y", "]", "# (batch)", "\n", "return", "out", "\n", "\n", "", "", "class", "StyleEncoder", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "style_dim", "=", "16", ",", "num_exp_coeffs", "=", "28", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "seq1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "num_exp_coeffs", ",", "512", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Linear", "(", "512", ",", "256", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "LSTM", "=", "nn", ".", "LSTM", "(", "256", ",", "128", ",", "2", ",", "batch_first", "=", "True", ",", "bidirectional", "=", "True", ")", "\n", "self", ".", "seq2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "256", ",", "128", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Linear", "(", "128", ",", "64", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Linear", "(", "64", ",", "style_dim", ")", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "self", ".", "LSTM", ".", "flatten_parameters", "(", ")", "\n", "h", ",", "_", "=", "self", ".", "LSTM", "(", "self", ".", "seq1", "(", "x", ")", ")", "\n", "s", "=", "self", ".", "seq2", "(", "h", ")", "# (batch, seq_len, style_dim)", "\n", "return", "torch", ".", "mean", "(", "s", ",", "1", ")", "# (batch, style_dim)", "\n", "", "", ""]], "home.repos.pwc.inspect_result.foivospar_NED.models.networks.Generator.forward": [[108, 123], ["input[].unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks.Generator.model_up_img", "networks.Generator.model_final_img", "networks.Generator.model_down_seg", "networks.Generator.model_res_img", "networks.Generator.model_down_seg", "networks.Generator.model_down_img", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk"], "methods", ["None"], []], "home.repos.pwc.inspect_result.foivospar_NED.models.networks.Discriminator.__init__": [[56, 63], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.datasets.datasets.TestData.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_emotions", "=", "7", ",", "num_exp_coeffs", "=", "28", ")", ":", "\n", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "seq1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "num_exp_coeffs", ",", "512", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Linear", "(", "512", ",", "256", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "LSTM", "=", "nn", ".", "LSTM", "(", "256", ",", "128", ",", "2", ",", "batch_first", "=", "True", ",", "bidirectional", "=", "True", ")", "\n", "self", ".", "seq2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "256", ",", "128", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Linear", "(", "128", ",", "64", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Linear", "(", "64", ",", "n_emotions", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.networks.Discriminator.forward": [[64, 73], ["networks.Discriminator.LSTM.flatten_parameters", "networks.Discriminator.LSTM", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "networks.Discriminator.seq1", "networks.Discriminator.seq2", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "range", "y.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "\n", "        ", "self", ".", "LSTM", ".", "flatten_parameters", "(", ")", "\n", "out", ",", "_", "=", "self", ".", "LSTM", "(", "self", ".", "seq1", "(", "x", ")", ")", "\n", "out", "=", "torch", ".", "mean", "(", "self", ".", "seq2", "(", "out", ")", ",", "1", ")", "# (batch, n_emotions)", "\n", "\n", "idx", "=", "torch", ".", "LongTensor", "(", "range", "(", "y", ".", "size", "(", "0", ")", ")", ")", ".", "to", "(", "y", ".", "device", ")", "\n", "out", "=", "out", "[", "idx", ",", "y", "]", "# (batch)", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.networks.StyleEncoder.__init__": [[75, 81], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.datasets.datasets.TestData.__init__"], ["    ", "def", "__init__", "(", "self", ",", "style_dim", "=", "16", ",", "num_exp_coeffs", "=", "28", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "seq1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "num_exp_coeffs", ",", "512", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Linear", "(", "512", ",", "256", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "LSTM", "=", "nn", ".", "LSTM", "(", "256", ",", "128", ",", "2", ",", "batch_first", "=", "True", ",", "bidirectional", "=", "True", ")", "\n", "self", ".", "seq2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "256", ",", "128", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Linear", "(", "128", ",", "64", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Linear", "(", "64", ",", "style_dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.networks.StyleEncoder.forward": [[82, 88], ["networks.StyleEncoder.LSTM.flatten_parameters", "networks.StyleEncoder.LSTM", "networks.StyleEncoder.seq2", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "networks.StyleEncoder.seq1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "self", ".", "LSTM", ".", "flatten_parameters", "(", ")", "\n", "h", ",", "_", "=", "self", ".", "LSTM", "(", "self", ".", "seq1", "(", "x", ")", ")", "\n", "s", "=", "self", ".", "seq2", "(", "h", ")", "# (batch, seq_len, style_dim)", "\n", "return", "torch", ".", "mean", "(", "s", ",", "1", ")", "# (batch, style_dim)", "\n", "", "", ""]], "home.repos.pwc.inspect_result.foivospar_NED.models.model.create_model": [[5, 34], ["networks.Generator", "networks.MappingNetwork", "networks.StyleEncoder", "munch.Munch", "len", "len", "torch.cuda.is_available", "nn.DataParallel.cuda", "nn.DataParallel.cuda", "nn.DataParallel.cuda", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "networks.Discriminator", "len", "len", "torch.cuda.is_available", "nn.DataParallel.cuda", "torch.DataParallel"], "function", ["None"], ["def", "create_model", "(", "opt", ")", ":", "\n", "    ", "num_exp_coeffs", "=", "51", "\n", "generator", "=", "Generator", "(", "opt", ".", "style_dim", ",", "num_exp_coeffs", ")", "\n", "mapping_network", "=", "MappingNetwork", "(", "opt", ".", "latent_dim", ",", "opt", ".", "hidden_dim", ",", "opt", ".", "style_dim", ",", "len", "(", "opt", ".", "selected_emotions", ")", ")", "\n", "style_encoder", "=", "StyleEncoder", "(", "opt", ".", "style_dim", ",", "num_exp_coeffs", ")", "\n", "\n", "if", "len", "(", "opt", ".", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "generator", ".", "cuda", "(", "opt", ".", "gpu_ids", "[", "0", "]", ")", "\n", "mapping_network", ".", "cuda", "(", "opt", ".", "gpu_ids", "[", "0", "]", ")", "\n", "style_encoder", ".", "cuda", "(", "opt", ".", "gpu_ids", "[", "0", "]", ")", "\n", "\n", "generator", "=", "nn", ".", "DataParallel", "(", "generator", ",", "device_ids", "=", "opt", ".", "gpu_ids", ")", "\n", "mapping_network", "=", "nn", ".", "DataParallel", "(", "mapping_network", ",", "device_ids", "=", "opt", ".", "gpu_ids", ")", "\n", "style_encoder", "=", "nn", ".", "DataParallel", "(", "style_encoder", ",", "device_ids", "=", "opt", ".", "gpu_ids", ")", "\n", "\n", "", "nets", "=", "Munch", "(", "generator", "=", "generator", ",", "\n", "mapping_network", "=", "mapping_network", ",", "\n", "style_encoder", "=", "style_encoder", ")", "\n", "\n", "if", "opt", ".", "isTrain", ":", "\n", "        ", "discriminator", "=", "Discriminator", "(", "len", "(", "opt", ".", "selected_emotions", ")", ",", "num_exp_coeffs", ")", "\n", "if", "len", "(", "opt", ".", "gpu_ids", ")", ":", "\n", "            ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "discriminator", ".", "cuda", "(", "opt", ".", "gpu_ids", "[", "0", "]", ")", "\n", "discriminator", "=", "nn", ".", "DataParallel", "(", "discriminator", ",", "device_ids", "=", "opt", ".", "gpu_ids", ")", "\n", "", "nets", ".", "discriminator", "=", "discriminator", "\n", "\n", "", "return", "nets", "\n", "", ""]], "home.repos.pwc.inspect_result.foivospar_NED.models.lbs.rot_mat_to_euler": [[26, 33], ["torch.sqrt", "torch.sqrt", "torch.atan2", "torch.atan2"], "function", ["None"], ["def", "rot_mat_to_euler", "(", "rot_mats", ")", ":", "\n", "# Calculates rotation matrix to euler angles", "\n", "# Careful for extreme cases of eular angles like [0.0, pi, 0.0]", "\n", "\n", "    ", "sy", "=", "torch", ".", "sqrt", "(", "rot_mats", "[", ":", ",", "0", ",", "0", "]", "*", "rot_mats", "[", ":", ",", "0", ",", "0", "]", "+", "\n", "rot_mats", "[", ":", ",", "1", ",", "0", "]", "*", "rot_mats", "[", ":", ",", "1", ",", "0", "]", ")", "\n", "return", "torch", ".", "atan2", "(", "-", "rot_mats", "[", ":", ",", "2", ",", "0", "]", ",", "sy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.lbs.find_dynamic_lmk_idx_and_bcoords": [[34, 99], ["torch.index_select", "torch.index_select", "batch_rodrigues().view", "torch.eye().unsqueeze_", "torch.eye().unsqueeze_", "range", "torch.round().to", "torch.round().to", "torch.round().to.lt().to", "torch.round().to.lt().to", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "pose.view", "len", "torch.bmm", "torch.bmm", "lbs.batch_rodrigues", "torch.eye", "torch.eye", "torch.round", "torch.round", "torch.round().to.lt", "torch.round().to.lt", "torch.index_select.view", "torch.clamp", "torch.clamp", "lbs.rot_mat_to_euler"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.utils.rotation_converter.batch_rodrigues", "home.repos.pwc.inspect_result.foivospar_NED.models.lbs.rot_mat_to_euler"], ["", "def", "find_dynamic_lmk_idx_and_bcoords", "(", "vertices", ",", "pose", ",", "dynamic_lmk_faces_idx", ",", "\n", "dynamic_lmk_b_coords", ",", "\n", "neck_kin_chain", ",", "dtype", "=", "torch", ".", "float32", ")", ":", "\n", "    ", "''' Compute the faces, barycentric coordinates for the dynamic landmarks\n\n\n        To do so, we first compute the rotation of the neck around the y-axis\n        and then use a pre-computed look-up table to find the faces and the\n        barycentric coordinates that will be used.\n\n        Special thanks to Soubhik Sanyal (soubhik.sanyal@tuebingen.mpg.de)\n        for providing the original TensorFlow implementation and for the LUT.\n\n        Parameters\n        ----------\n        vertices: torch.tensor BxVx3, dtype = torch.float32\n            The tensor of input vertices\n        pose: torch.tensor Bx(Jx3), dtype = torch.float32\n            The current pose of the body model\n        dynamic_lmk_faces_idx: torch.tensor L, dtype = torch.long\n            The look-up table from neck rotation to faces\n        dynamic_lmk_b_coords: torch.tensor Lx3, dtype = torch.float32\n            The look-up table from neck rotation to barycentric coordinates\n        neck_kin_chain: list\n            A python list that contains the indices of the joints that form the\n            kinematic chain of the neck.\n        dtype: torch.dtype, optional\n\n        Returns\n        -------\n        dyn_lmk_faces_idx: torch.tensor, dtype = torch.long\n            A tensor of size BxL that contains the indices of the faces that\n            will be used to compute the current dynamic landmarks.\n        dyn_lmk_b_coords: torch.tensor, dtype = torch.float32\n            A tensor of size BxL that contains the indices of the faces that\n            will be used to compute the current dynamic landmarks.\n    '''", "\n", "\n", "batch_size", "=", "vertices", ".", "shape", "[", "0", "]", "\n", "\n", "aa_pose", "=", "torch", ".", "index_select", "(", "pose", ".", "view", "(", "batch_size", ",", "-", "1", ",", "3", ")", ",", "1", ",", "\n", "neck_kin_chain", ")", "\n", "rot_mats", "=", "batch_rodrigues", "(", "\n", "aa_pose", ".", "view", "(", "-", "1", ",", "3", ")", ",", "dtype", "=", "dtype", ")", ".", "view", "(", "batch_size", ",", "-", "1", ",", "3", ",", "3", ")", "\n", "\n", "rel_rot_mat", "=", "torch", ".", "eye", "(", "3", ",", "device", "=", "vertices", ".", "device", ",", "\n", "dtype", "=", "dtype", ")", ".", "unsqueeze_", "(", "dim", "=", "0", ")", "\n", "for", "idx", "in", "range", "(", "len", "(", "neck_kin_chain", ")", ")", ":", "\n", "        ", "rel_rot_mat", "=", "torch", ".", "bmm", "(", "rot_mats", "[", ":", ",", "idx", "]", ",", "rel_rot_mat", ")", "\n", "\n", "", "y_rot_angle", "=", "torch", ".", "round", "(", "\n", "torch", ".", "clamp", "(", "-", "rot_mat_to_euler", "(", "rel_rot_mat", ")", "*", "180.0", "/", "np", ".", "pi", ",", "\n", "max", "=", "39", ")", ")", ".", "to", "(", "dtype", "=", "torch", ".", "long", ")", "\n", "neg_mask", "=", "y_rot_angle", ".", "lt", "(", "0", ")", ".", "to", "(", "dtype", "=", "torch", ".", "long", ")", "\n", "mask", "=", "y_rot_angle", ".", "lt", "(", "-", "39", ")", ".", "to", "(", "dtype", "=", "torch", ".", "long", ")", "\n", "neg_vals", "=", "mask", "*", "78", "+", "(", "1", "-", "mask", ")", "*", "(", "39", "-", "y_rot_angle", ")", "\n", "y_rot_angle", "=", "(", "neg_mask", "*", "neg_vals", "+", "\n", "(", "1", "-", "neg_mask", ")", "*", "y_rot_angle", ")", "\n", "\n", "dyn_lmk_faces_idx", "=", "torch", ".", "index_select", "(", "dynamic_lmk_faces_idx", ",", "\n", "0", ",", "y_rot_angle", ")", "\n", "dyn_lmk_b_coords", "=", "torch", ".", "index_select", "(", "dynamic_lmk_b_coords", ",", "\n", "0", ",", "y_rot_angle", ")", "\n", "\n", "return", "dyn_lmk_faces_idx", ",", "dyn_lmk_b_coords", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.lbs.vertices2landmarks": [[101, 138], ["torch.index_select().view", "torch.index_select().view", "[].view", "torch.einsum", "torch.einsum", "torch.arange().view", "torch.arange().view", "torch.index_select", "torch.index_select", "lmk_faces_idx.view", "torch.arange", "torch.arange", "vertices.view"], "function", ["None"], ["", "def", "vertices2landmarks", "(", "vertices", ",", "faces", ",", "lmk_faces_idx", ",", "lmk_bary_coords", ")", ":", "\n", "    ", "''' Calculates landmarks by barycentric interpolation\n\n        Parameters\n        ----------\n        vertices: torch.tensor BxVx3, dtype = torch.float32\n            The tensor of input vertices\n        faces: torch.tensor Fx3, dtype = torch.long\n            The faces of the mesh\n        lmk_faces_idx: torch.tensor L, dtype = torch.long\n            The tensor with the indices of the faces used to calculate the\n            landmarks.\n        lmk_bary_coords: torch.tensor Lx3, dtype = torch.float32\n            The tensor of barycentric coordinates that are used to interpolate\n            the landmarks\n\n        Returns\n        -------\n        landmarks: torch.tensor BxLx3, dtype = torch.float32\n            The coordinates of the landmarks for each mesh in the batch\n    '''", "\n", "# Extract the indices of the vertices for each face", "\n", "# BxLx3", "\n", "batch_size", ",", "num_verts", "=", "vertices", ".", "shape", "[", ":", "2", "]", "\n", "device", "=", "vertices", ".", "device", "\n", "\n", "lmk_faces", "=", "torch", ".", "index_select", "(", "faces", ",", "0", ",", "lmk_faces_idx", ".", "view", "(", "-", "1", ")", ")", ".", "view", "(", "\n", "batch_size", ",", "-", "1", ",", "3", ")", "\n", "\n", "lmk_faces", "+=", "torch", ".", "arange", "(", "\n", "batch_size", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "*", "num_verts", "\n", "\n", "lmk_vertices", "=", "vertices", ".", "view", "(", "-", "1", ",", "3", ")", "[", "lmk_faces", "]", ".", "view", "(", "\n", "batch_size", ",", "-", "1", ",", "3", ",", "3", ")", "\n", "\n", "landmarks", "=", "torch", ".", "einsum", "(", "'blfi,blf->bli'", ",", "[", "lmk_vertices", ",", "lmk_bary_coords", "]", ")", "\n", "return", "landmarks", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.lbs.lbs": [[140, 228], ["max", "lbs.vertices2joints", "torch.eye", "torch.eye", "lbs.batch_rigid_transform", "lbs_weights.unsqueeze().expand", "torch.matmul().view", "torch.matmul().view", "torch.ones", "torch.ones", "torch.cat", "torch.cat", "torch.matmul", "torch.matmul", "lbs.blend_shapes", "batch_rodrigues().view", "torch.matmul().view", "torch.matmul().view", "pose.view", "torch.matmul().view", "torch.matmul().view", "torch.unsqueeze", "torch.unsqueeze", "pose[].view", "lbs_weights.unsqueeze", "torch.matmul", "torch.matmul", "lbs.batch_rodrigues", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "A.view", "pose.view", "pose_feature.view"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.models.lbs.vertices2joints", "home.repos.pwc.inspect_result.foivospar_NED.models.lbs.batch_rigid_transform", "home.repos.pwc.inspect_result.foivospar_NED.models.lbs.blend_shapes", "home.repos.pwc.inspect_result.foivospar_NED.utils.rotation_converter.batch_rodrigues"], ["", "def", "lbs", "(", "betas", ",", "pose", ",", "v_template", ",", "shapedirs", ",", "posedirs", ",", "J_regressor", ",", "parents", ",", "\n", "lbs_weights", ",", "pose2rot", "=", "True", ",", "dtype", "=", "torch", ".", "float32", ")", ":", "\n", "    ", "''' Performs Linear Blend Skinning with the given shape and pose parameters\n\n        Parameters\n        ----------\n        betas : torch.tensor BxNB\n            The tensor of shape parameters\n        pose : torch.tensor Bx(J + 1) * 3\n            The pose parameters in axis-angle format\n        v_template torch.tensor BxVx3\n            The template mesh that will be deformed\n        shapedirs : torch.tensor 1xNB\n            The tensor of PCA shape displacements\n        posedirs : torch.tensor Px(V * 3)\n            The pose PCA coefficients\n        J_regressor : torch.tensor JxV\n            The regressor array that is used to calculate the joints from\n            the position of the vertices\n        parents: torch.tensor J\n            The array that describes the kinematic tree for the model\n        lbs_weights: torch.tensor N x V x (J + 1)\n            The linear blend skinning weights that represent how much the\n            rotation matrix of each part affects each vertex\n        pose2rot: bool, optional\n            Flag on whether to convert the input pose tensor to rotation\n            matrices. The default value is True. If False, then the pose tensor\n            should already contain rotation matrices and have a size of\n            Bx(J + 1)x9\n        dtype: torch.dtype, optional\n\n        Returns\n        -------\n        verts: torch.tensor BxVx3\n            The vertices of the mesh after applying the shape and pose\n            displacements.\n        joints: torch.tensor BxJx3\n            The joints of the model\n    '''", "\n", "\n", "batch_size", "=", "max", "(", "betas", ".", "shape", "[", "0", "]", ",", "pose", ".", "shape", "[", "0", "]", ")", "\n", "device", "=", "betas", ".", "device", "\n", "\n", "# Add shape contribution", "\n", "v_shaped", "=", "v_template", "+", "blend_shapes", "(", "betas", ",", "shapedirs", ")", "\n", "\n", "# Get the joints", "\n", "# NxJx3 array", "\n", "J", "=", "vertices2joints", "(", "J_regressor", ",", "v_shaped", ")", "\n", "\n", "# 3. Add pose blend shapes", "\n", "# N x J x 3 x 3", "\n", "ident", "=", "torch", ".", "eye", "(", "3", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "if", "pose2rot", ":", "\n", "        ", "rot_mats", "=", "batch_rodrigues", "(", "\n", "pose", ".", "view", "(", "-", "1", ",", "3", ")", ",", "dtype", "=", "dtype", ")", ".", "view", "(", "[", "batch_size", ",", "-", "1", ",", "3", ",", "3", "]", ")", "\n", "\n", "pose_feature", "=", "(", "rot_mats", "[", ":", ",", "1", ":", ",", ":", ",", ":", "]", "-", "ident", ")", ".", "view", "(", "[", "batch_size", ",", "-", "1", "]", ")", "\n", "# (N x P) x (P, V * 3) -> N x V x 3", "\n", "pose_offsets", "=", "torch", ".", "matmul", "(", "pose_feature", ",", "posedirs", ")", ".", "view", "(", "batch_size", ",", "-", "1", ",", "3", ")", "\n", "", "else", ":", "\n", "        ", "pose_feature", "=", "pose", "[", ":", ",", "1", ":", "]", ".", "view", "(", "batch_size", ",", "-", "1", ",", "3", ",", "3", ")", "-", "ident", "\n", "rot_mats", "=", "pose", ".", "view", "(", "batch_size", ",", "-", "1", ",", "3", ",", "3", ")", "\n", "\n", "pose_offsets", "=", "torch", ".", "matmul", "(", "pose_feature", ".", "view", "(", "batch_size", ",", "-", "1", ")", ",", "\n", "posedirs", ")", ".", "view", "(", "batch_size", ",", "-", "1", ",", "3", ")", "\n", "\n", "", "v_posed", "=", "pose_offsets", "+", "v_shaped", "\n", "# 4. Get the global joint location", "\n", "J_transformed", ",", "A", "=", "batch_rigid_transform", "(", "rot_mats", ",", "J", ",", "parents", ",", "dtype", "=", "dtype", ")", "\n", "\n", "# 5. Do skinning:", "\n", "# W is N x V x (J + 1)", "\n", "W", "=", "lbs_weights", ".", "unsqueeze", "(", "dim", "=", "0", ")", ".", "expand", "(", "[", "batch_size", ",", "-", "1", ",", "-", "1", "]", ")", "\n", "# (N x V x (J + 1)) x (N x (J + 1) x 16)", "\n", "num_joints", "=", "J_regressor", ".", "shape", "[", "0", "]", "\n", "T", "=", "torch", ".", "matmul", "(", "W", ",", "A", ".", "view", "(", "batch_size", ",", "num_joints", ",", "16", ")", ")", ".", "view", "(", "batch_size", ",", "-", "1", ",", "4", ",", "4", ")", "\n", "\n", "homogen_coord", "=", "torch", ".", "ones", "(", "[", "batch_size", ",", "v_posed", ".", "shape", "[", "1", "]", ",", "1", "]", ",", "\n", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "v_posed_homo", "=", "torch", ".", "cat", "(", "[", "v_posed", ",", "homogen_coord", "]", ",", "dim", "=", "2", ")", "\n", "v_homo", "=", "torch", ".", "matmul", "(", "T", ",", "torch", ".", "unsqueeze", "(", "v_posed_homo", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n", "verts", "=", "v_homo", "[", ":", ",", ":", ",", ":", "3", ",", "0", "]", "\n", "\n", "return", "verts", ",", "J_transformed", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.lbs.vertices2joints": [[230, 248], ["torch.einsum", "torch.einsum"], "function", ["None"], ["", "def", "vertices2joints", "(", "J_regressor", ",", "vertices", ")", ":", "\n", "    ", "''' Calculates the 3D joint locations from the vertices\n\n    Parameters\n    ----------\n    J_regressor : torch.tensor JxV\n        The regressor array that is used to calculate the joints from the\n        position of the vertices\n    vertices : torch.tensor BxVx3\n        The tensor of mesh vertices\n\n    Returns\n    -------\n    torch.tensor BxJx3\n        The location of the joints\n    '''", "\n", "\n", "return", "torch", ".", "einsum", "(", "'bik,ji->bjk'", ",", "[", "vertices", ",", "J_regressor", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.lbs.blend_shapes": [[250, 272], ["torch.einsum", "torch.einsum"], "function", ["None"], ["", "def", "blend_shapes", "(", "betas", ",", "shape_disps", ")", ":", "\n", "    ", "''' Calculates the per vertex displacement due to the blend shapes\n\n\n    Parameters\n    ----------\n    betas : torch.tensor Bx(num_betas)\n        Blend shape coefficients\n    shape_disps: torch.tensor Vx3x(num_betas)\n        Blend shapes\n\n    Returns\n    -------\n    torch.tensor BxVx3\n        The per-vertex displacement due to shape deformation\n    '''", "\n", "\n", "# Displacement[b, m, k] = sum_{l} betas[b, l] * shape_disps[m, k, l]", "\n", "# i.e. Multiply each shape displacement by its corresponding beta and", "\n", "# then sum them.", "\n", "blend_shape", "=", "torch", ".", "einsum", "(", "'bl,mkl->bmk'", ",", "[", "betas", ",", "shape_disps", "]", ")", "\n", "return", "blend_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.lbs.batch_rodrigues": [[274, 306], ["torch.norm", "torch.norm", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.split", "torch.split", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat().view", "torch.cat().view", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.cat", "torch.cat", "torch.eye", "torch.eye", "torch.bmm", "torch.bmm"], "function", ["None"], ["", "def", "batch_rodrigues", "(", "rot_vecs", ",", "epsilon", "=", "1e-8", ",", "dtype", "=", "torch", ".", "float32", ")", ":", "\n", "    ", "''' Calculates the rotation matrices for a batch of rotation vectors\n        Parameters\n        ----------\n        rot_vecs: torch.tensor Nx3\n            array of N axis-angle vectors\n        Returns\n        -------\n        R: torch.tensor Nx3x3\n            The rotation matrices for the given axis-angle parameters\n    '''", "\n", "\n", "batch_size", "=", "rot_vecs", ".", "shape", "[", "0", "]", "\n", "device", "=", "rot_vecs", ".", "device", "\n", "\n", "angle", "=", "torch", ".", "norm", "(", "rot_vecs", "+", "1e-8", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "rot_dir", "=", "rot_vecs", "/", "angle", "\n", "\n", "cos", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "cos", "(", "angle", ")", ",", "dim", "=", "1", ")", "\n", "sin", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "sin", "(", "angle", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# Bx1 arrays", "\n", "rx", ",", "ry", ",", "rz", "=", "torch", ".", "split", "(", "rot_dir", ",", "1", ",", "dim", "=", "1", ")", "\n", "K", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "3", ",", "3", ")", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "\n", "zeros", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "1", ")", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "K", "=", "torch", ".", "cat", "(", "[", "zeros", ",", "-", "rz", ",", "ry", ",", "rz", ",", "zeros", ",", "-", "rx", ",", "-", "ry", ",", "rx", ",", "zeros", "]", ",", "dim", "=", "1", ")", ".", "view", "(", "(", "batch_size", ",", "3", ",", "3", ")", ")", "\n", "\n", "ident", "=", "torch", ".", "eye", "(", "3", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "rot_mat", "=", "ident", "+", "sin", "*", "K", "+", "(", "1", "-", "cos", ")", "*", "torch", ".", "bmm", "(", "K", ",", "K", ")", "\n", "return", "rot_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.lbs.transform_mat": [[308, 319], ["torch.cat", "torch.cat", "torch.pad", "torch.pad"], "function", ["None"], ["", "def", "transform_mat", "(", "R", ",", "t", ")", ":", "\n", "    ", "''' Creates a batch of transformation matrices\n        Args:\n            - R: Bx3x3 array of a batch of rotation matrices\n            - t: Bx3x1 array of a batch of translation vectors\n        Returns:\n            - T: Bx4x4 Transformation matrix\n    '''", "\n", "# No padding left or right, only add an extra row", "\n", "return", "torch", ".", "cat", "(", "[", "F", ".", "pad", "(", "R", ",", "[", "0", ",", "0", ",", "0", ",", "1", "]", ")", ",", "\n", "F", ".", "pad", "(", "t", ",", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "value", "=", "1", ")", "]", ",", "dim", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.lbs.batch_rigid_transform": [[321, 379], ["torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze.clone", "transform_mat().reshape", "range", "torch.stack", "torch.stack", "torch.pad", "torch.matmul", "torch.matmul", "transform_chain.append", "torch.pad", "lbs.transform_mat", "torch.matmul", "torch.matmul", "rot_mats.view", "joints.clone.reshape"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.util.util.reshape", "home.repos.pwc.inspect_result.foivospar_NED.models.lbs.transform_mat", "home.repos.pwc.inspect_result.foivospar_NED.util.util.reshape"], ["", "def", "batch_rigid_transform", "(", "rot_mats", ",", "joints", ",", "parents", ",", "dtype", "=", "torch", ".", "float32", ")", ":", "\n", "    ", "\"\"\"\n    Applies a batch of rigid transformations to the joints\n\n    Parameters\n    ----------\n    rot_mats : torch.tensor BxNx3x3\n        Tensor of rotation matrices\n    joints : torch.tensor BxNx3\n        Locations of joints\n    parents : torch.tensor BxN\n        The kinematic tree of each object\n    dtype : torch.dtype, optional:\n        The data type of the created tensors, the default is torch.float32\n\n    Returns\n    -------\n    posed_joints : torch.tensor BxNx3\n        The locations of the joints after applying the pose rotations\n    rel_transforms : torch.tensor BxNx4x4\n        The relative (with respect to the root joint) rigid transformations\n        for all the joints\n    \"\"\"", "\n", "\n", "joints", "=", "torch", ".", "unsqueeze", "(", "joints", ",", "dim", "=", "-", "1", ")", "\n", "\n", "rel_joints", "=", "joints", ".", "clone", "(", ")", "\n", "rel_joints", "[", ":", ",", "1", ":", "]", "-=", "joints", "[", ":", ",", "parents", "[", "1", ":", "]", "]", "\n", "\n", "# transforms_mat = transform_mat(", "\n", "#     rot_mats.view(-1, 3, 3),", "\n", "#     rel_joints.view(-1, 3, 1)).view(-1, joints.shape[1], 4, 4)", "\n", "transforms_mat", "=", "transform_mat", "(", "\n", "rot_mats", ".", "view", "(", "-", "1", ",", "3", ",", "3", ")", ",", "\n", "rel_joints", ".", "reshape", "(", "-", "1", ",", "3", ",", "1", ")", ")", ".", "reshape", "(", "-", "1", ",", "joints", ".", "shape", "[", "1", "]", ",", "4", ",", "4", ")", "\n", "\n", "transform_chain", "=", "[", "transforms_mat", "[", ":", ",", "0", "]", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "parents", ".", "shape", "[", "0", "]", ")", ":", "\n", "# Subtract the joint location at the rest pose", "\n", "# No need for rotation, since it's identity when at rest", "\n", "        ", "curr_res", "=", "torch", ".", "matmul", "(", "transform_chain", "[", "parents", "[", "i", "]", "]", ",", "\n", "transforms_mat", "[", ":", ",", "i", "]", ")", "\n", "transform_chain", ".", "append", "(", "curr_res", ")", "\n", "\n", "", "transforms", "=", "torch", ".", "stack", "(", "transform_chain", ",", "dim", "=", "1", ")", "\n", "\n", "# The last column of the transformations contains the posed joints", "\n", "posed_joints", "=", "transforms", "[", ":", ",", ":", ",", ":", "3", ",", "3", "]", "\n", "\n", "# The last column of the transformations contains the posed joints", "\n", "posed_joints", "=", "transforms", "[", ":", ",", ":", ",", ":", "3", ",", "3", "]", "\n", "\n", "joints_homogen", "=", "F", ".", "pad", "(", "joints", ",", "[", "0", ",", "0", ",", "0", ",", "1", "]", ")", "\n", "\n", "rel_transforms", "=", "transforms", "-", "F", ".", "pad", "(", "\n", "torch", ".", "matmul", "(", "transforms", ",", "joints_homogen", ")", ",", "[", "3", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ")", "\n", "\n", "return", "posed_joints", ",", "rel_transforms", "", "", ""]], "home.repos.pwc.inspect_result.foivospar_NED.models.encoders.ResnetEncoder.__init__": [[23, 34], ["torch.Module.__init__", "resnet.load_ResNet50Model", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.datasets.datasets.TestData.__init__", "home.repos.pwc.inspect_result.foivospar_NED.models.resnet.load_ResNet50Model"], ["    ", "def", "__init__", "(", "self", ",", "outsize", ",", "last_op", "=", "None", ")", ":", "\n", "        ", "super", "(", "ResnetEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "feature_size", "=", "2048", "\n", "self", ".", "encoder", "=", "resnet", ".", "load_ResNet50Model", "(", ")", "#out: 2048", "\n", "### regressor", "\n", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "feature_size", ",", "1024", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "1024", ",", "outsize", ")", "\n", ")", "\n", "self", ".", "last_op", "=", "last_op", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.encoders.ResnetEncoder.forward": [[35, 41], ["encoders.ResnetEncoder.encoder", "encoders.ResnetEncoder.layers", "encoders.ResnetEncoder.last_op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "features", "=", "self", ".", "encoder", "(", "inputs", ")", "\n", "parameters", "=", "self", ".", "layers", "(", "features", ")", "\n", "if", "self", ".", "last_op", ":", "\n", "            ", "parameters", "=", "self", ".", "last_op", "(", "parameters", ")", "\n", "", "return", "parameters", "\n", "", "", ""]], "home.repos.pwc.inspect_result.foivospar_NED.models.decoders.Generator.__init__": [[20, 50], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.datasets.datasets.TestData.__init__"], ["    ", "def", "__init__", "(", "self", ",", "latent_dim", "=", "100", ",", "out_channels", "=", "1", ",", "out_scale", "=", "0.01", ",", "sample_mode", "=", "'bilinear'", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "out_scale", "=", "out_scale", "\n", "\n", "self", ".", "init_size", "=", "32", "//", "4", "# Initial size before upsampling", "\n", "self", ".", "l1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "latent_dim", ",", "128", "*", "self", ".", "init_size", "**", "2", ")", ")", "\n", "self", ".", "conv_blocks", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "sample_mode", ")", ",", "#16", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ",", "0.8", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "sample_mode", ")", ",", "#32", "\n", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ",", "0.8", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "sample_mode", ")", ",", "#64", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ",", "0.8", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "sample_mode", ")", ",", "#128", "\n", "nn", ".", "Conv2d", "(", "64", ",", "32", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ",", "0.8", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "sample_mode", ")", ",", "#256", "\n", "nn", ".", "Conv2d", "(", "32", ",", "16", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "16", ",", "0.8", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "16", ",", "out_channels", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.decoders.Generator.forward": [[52, 57], ["decoders.Generator.l1", "out.view.view.view", "decoders.Generator.conv_blocks"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "noise", ")", ":", "\n", "        ", "out", "=", "self", ".", "l1", "(", "noise", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "shape", "[", "0", "]", ",", "128", ",", "self", ".", "init_size", ",", "self", ".", "init_size", ")", "\n", "img", "=", "self", ".", "conv_blocks", "(", "out", ")", "\n", "return", "img", "*", "self", ".", "out_scale", "", "", "", ""]], "home.repos.pwc.inspect_result.foivospar_NED.models.resnet.ResNet.__init__": [[24, 46], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "resnet.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.datasets.datasets.TestData.__init__", "home.repos.pwc.inspect_result.foivospar_NED.models.frnet.ResNet._make_layer", "home.repos.pwc.inspect_result.foivospar_NED.models.frnet.ResNet._make_layer", "home.repos.pwc.inspect_result.foivospar_NED.models.frnet.ResNet._make_layer", "home.repos.pwc.inspect_result.foivospar_NED.models.frnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "# self.fc = nn.Linear(512 * block.expansion, num_classes)", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.resnet.ResNet._make_layer": [[47, 63], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.resnet.ResNet.forward": [[64, 81], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.avgpool", "x2.view.view.view", "x2.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x1", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x2", "=", "self", ".", "avgpool", "(", "x1", ")", "\n", "x2", "=", "x2", ".", "view", "(", "x2", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "# x = self.fc(x)", "\n", "## x2: [bz, 2048] for shape", "\n", "## x1: [bz, 2048, 7, 7] for texture", "\n", "return", "x2", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.resnet.Bottleneck.__init__": [[85, 97], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.datasets.datasets.TestData.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.resnet.Bottleneck.forward": [[98, 119], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.resnet.BasicBlock.__init__": [[128, 137], ["torch.Module.__init__", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.datasets.datasets.TestData.__init__", "home.repos.pwc.inspect_result.foivospar_NED.models.frnet.conv3x3", "home.repos.pwc.inspect_result.foivospar_NED.models.frnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.resnet.BasicBlock.forward": [[138, 155], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.resnet.DoubleConv.__init__": [[196, 205], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.datasets.datasets.TestData.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "double_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.resnet.DoubleConv.forward": [[207, 209], ["resnet.DoubleConv.double_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "double_conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.resnet.Down.__init__": [[214, 219], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.DoubleConv"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.datasets.datasets.TestData.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "maxpool_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "\n", "DoubleConv", "(", "in_channels", ",", "out_channels", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.resnet.Down.forward": [[221, 223], ["resnet.Down.maxpool_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "maxpool_conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.resnet.Up.__init__": [[228, 238], ["torch.Module.__init__", "resnet.DoubleConv", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.datasets.datasets.TestData.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "bilinear", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# if bilinear, use the normal convolutions to reduce the number of channels", "\n", "if", "bilinear", ":", "\n", "            ", "self", ".", "up", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "up", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", "//", "2", ",", "in_channels", "//", "2", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "", "self", ".", "conv", "=", "DoubleConv", "(", "in_channels", ",", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.resnet.Up.forward": [[239, 252], ["resnet.Up.up", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "resnet.Up.conv", "x2.size", "torch.pad.size", "x2.size", "torch.pad.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "x1", "=", "self", ".", "up", "(", "x1", ")", "\n", "# input is CHW", "\n", "diffY", "=", "x2", ".", "size", "(", ")", "[", "2", "]", "-", "x1", ".", "size", "(", ")", "[", "2", "]", "\n", "diffX", "=", "x2", ".", "size", "(", ")", "[", "3", "]", "-", "x1", ".", "size", "(", ")", "[", "3", "]", "\n", "\n", "x1", "=", "F", ".", "pad", "(", "x1", ",", "[", "diffX", "//", "2", ",", "diffX", "-", "diffX", "//", "2", ",", "\n", "diffY", "//", "2", ",", "diffY", "-", "diffY", "//", "2", "]", ")", "\n", "# if you have padding issues, see", "\n", "# https://github.com/HaiyongJiang/U-Net-Pytorch-Unstructured-Buggy/commit/0e854509c2cea854e247a9c615f175f76fbb2e3a", "\n", "# https://github.com/xiaopeng-liao/Pytorch-UNet/commit/8ebac70e633bac59fc22bb5195e513d5832fb3bd", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x2", ",", "x1", "]", ",", "dim", "=", "1", ")", "\n", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.resnet.OutConv.__init__": [[255, 258], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.datasets.datasets.TestData.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "OutConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.resnet.OutConv.forward": [[259, 261], ["resnet.OutConv.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "x", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.foivospar_NED.models.resnet.conv3x3": [[120, 124], ["torch.Conv2d"], "function", ["None"], ["", "", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.resnet.copy_parameter_from_resnet": [[156, 170], ["model.state_dict", "list", "isinstance", "resnet_dict.items", "cur_state_dict[].copy_"], "function", ["None"], ["", "", "def", "copy_parameter_from_resnet", "(", "model", ",", "resnet_dict", ")", ":", "\n", "    ", "cur_state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "# import ipdb; ipdb.set_trace()", "\n", "for", "name", ",", "param", "in", "list", "(", "resnet_dict", ".", "items", "(", ")", ")", "[", "0", ":", "None", "]", ":", "\n", "        ", "if", "name", "not", "in", "cur_state_dict", ":", "\n", "# print(name, ' not available in reconstructed resnet')", "\n", "            ", "continue", "\n", "", "if", "isinstance", "(", "param", ",", "Parameter", ")", ":", "\n", "            ", "param", "=", "param", ".", "data", "\n", "", "try", ":", "\n", "            ", "cur_state_dict", "[", "name", "]", ".", "copy_", "(", "param", ")", "\n", "", "except", ":", "\n", "# print(name, ' is inconsistent!')", "\n", "            ", "continue", "\n", "# print('copy resnet state dict finished!')", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.resnet.load_ResNet50Model": [[173, 177], ["resnet.ResNet", "resnet.copy_parameter_from_resnet", "torchvision.models.resnet50().state_dict", "torchvision.models.resnet50"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.models.resnet.copy_parameter_from_resnet", "home.repos.pwc.inspect_result.foivospar_NED.models.frnet.resnet50"], ["", "", "", "def", "load_ResNet50Model", "(", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "copy_parameter_from_resnet", "(", "model", ",", "torchvision", ".", "models", ".", "resnet50", "(", "pretrained", "=", "False", ")", ".", "state_dict", "(", ")", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.resnet.load_ResNet101Model": [[178, 182], ["resnet.ResNet", "resnet.copy_parameter_from_resnet", "torchvision.models.resnet101().state_dict", "torchvision.models.resnet101"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.models.resnet.copy_parameter_from_resnet"], ["", "def", "load_ResNet101Model", "(", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ")", "\n", "copy_parameter_from_resnet", "(", "model", ",", "torchvision", ".", "models", ".", "resnet101", "(", "pretrained", "=", "True", ")", ".", "state_dict", "(", ")", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.resnet.load_ResNet152Model": [[183, 187], ["resnet.ResNet", "resnet.copy_parameter_from_resnet", "torchvision.models.resnet152().state_dict", "torchvision.models.resnet152"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.models.resnet.copy_parameter_from_resnet"], ["", "def", "load_ResNet152Model", "(", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ")", "\n", "copy_parameter_from_resnet", "(", "model", ",", "torchvision", ".", "models", ".", "resnet152", "(", "pretrained", "=", "True", ")", ".", "state_dict", "(", ")", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.FLAME.Struct.__init__": [[33, 36], ["kwargs.items", "setattr"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "key", ",", "val", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "key", ",", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.FLAME.FLAME.__init__": [[43, 92], ["torch.Module.__init__", "print", "FLAME.FLAME.register_buffer", "FLAME.FLAME.register_buffer", "FLAME.to_tensor", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "FLAME.FLAME.register_buffer", "FLAME.FLAME.register_buffer", "FLAME.FLAME.register_buffer", "to_tensor().long", "FLAME.FLAME.register_buffer", "FLAME.FLAME.register_buffer", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "FLAME.FLAME.register_parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "FLAME.FLAME.register_parameter", "numpy.load", "FLAME.FLAME.register_buffer", "FLAME.FLAME.register_buffer", "FLAME.FLAME.register_buffer", "FLAME.FLAME.register_buffer", "FLAME.FLAME.register_buffer", "FLAME.FLAME.register_buffer", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "FLAME.FLAME.register_buffer", "open", "pickle.load", "FLAME.Struct", "FLAME.to_tensor", "FLAME.to_tensor", "FLAME.to_np", "numpy.reshape", "FLAME.to_tensor", "FLAME.to_tensor", "FLAME.to_tensor", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "lmk_embeddings[].long", "lmk_embeddings[].to", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "neck_kin_chain.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "FLAME.to_np", "FLAME.to_np", "FLAME.to_np", "FLAME.to_np", "FLAME.to_tensor", "FLAME.to_np", "FLAME.to_np", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.datasets.datasets.TestData.__init__", "home.repos.pwc.inspect_result.foivospar_NED.models.FLAME.to_tensor", "home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.foivospar_NED.models.FLAME.to_tensor", "home.repos.pwc.inspect_result.foivospar_NED.models.FLAME.to_tensor", "home.repos.pwc.inspect_result.foivospar_NED.models.FLAME.to_np", "home.repos.pwc.inspect_result.foivospar_NED.util.util.reshape", "home.repos.pwc.inspect_result.foivospar_NED.models.FLAME.to_tensor", "home.repos.pwc.inspect_result.foivospar_NED.models.FLAME.to_tensor", "home.repos.pwc.inspect_result.foivospar_NED.models.FLAME.to_tensor", "home.repos.pwc.inspect_result.foivospar_NED.models.FLAME.to_np", "home.repos.pwc.inspect_result.foivospar_NED.models.FLAME.to_np", "home.repos.pwc.inspect_result.foivospar_NED.models.FLAME.to_np", "home.repos.pwc.inspect_result.foivospar_NED.models.FLAME.to_np", "home.repos.pwc.inspect_result.foivospar_NED.models.FLAME.to_tensor", "home.repos.pwc.inspect_result.foivospar_NED.models.FLAME.to_np", "home.repos.pwc.inspect_result.foivospar_NED.models.FLAME.to_np"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "FLAME", ",", "self", ")", ".", "__init__", "(", ")", "\n", "print", "(", "\"creating the FLAME Decoder\"", ")", "\n", "with", "open", "(", "config", ".", "flame_model_path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "ss", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "flame_model", "=", "Struct", "(", "**", "ss", ")", "\n", "\n", "", "self", ".", "dtype", "=", "torch", ".", "float32", "\n", "self", ".", "register_buffer", "(", "'faces_tensor'", ",", "to_tensor", "(", "to_np", "(", "flame_model", ".", "f", ",", "dtype", "=", "np", ".", "int64", ")", ",", "dtype", "=", "torch", ".", "long", ")", ")", "\n", "# The vertices of the template model", "\n", "self", ".", "register_buffer", "(", "'v_template'", ",", "to_tensor", "(", "to_np", "(", "flame_model", ".", "v_template", ")", ",", "dtype", "=", "self", ".", "dtype", ")", ")", "\n", "# The shape components and expression", "\n", "shapedirs", "=", "to_tensor", "(", "to_np", "(", "flame_model", ".", "shapedirs", ")", ",", "dtype", "=", "self", ".", "dtype", ")", "\n", "shapedirs", "=", "torch", ".", "cat", "(", "[", "shapedirs", "[", ":", ",", ":", ",", ":", "config", ".", "n_shape", "]", ",", "shapedirs", "[", ":", ",", ":", ",", "300", ":", "300", "+", "config", ".", "n_exp", "]", "]", ",", "2", ")", "\n", "self", ".", "register_buffer", "(", "'shapedirs'", ",", "shapedirs", ")", "\n", "# The pose components", "\n", "num_pose_basis", "=", "flame_model", ".", "posedirs", ".", "shape", "[", "-", "1", "]", "\n", "posedirs", "=", "np", ".", "reshape", "(", "flame_model", ".", "posedirs", ",", "[", "-", "1", ",", "num_pose_basis", "]", ")", ".", "T", "\n", "self", ".", "register_buffer", "(", "'posedirs'", ",", "to_tensor", "(", "to_np", "(", "posedirs", ")", ",", "dtype", "=", "self", ".", "dtype", ")", ")", "\n", "# ", "\n", "self", ".", "register_buffer", "(", "'J_regressor'", ",", "to_tensor", "(", "to_np", "(", "flame_model", ".", "J_regressor", ")", ",", "dtype", "=", "self", ".", "dtype", ")", ")", "\n", "parents", "=", "to_tensor", "(", "to_np", "(", "flame_model", ".", "kintree_table", "[", "0", "]", ")", ")", ".", "long", "(", ")", ";", "parents", "[", "0", "]", "=", "-", "1", "\n", "self", ".", "register_buffer", "(", "'parents'", ",", "parents", ")", "\n", "self", ".", "register_buffer", "(", "'lbs_weights'", ",", "to_tensor", "(", "to_np", "(", "flame_model", ".", "weights", ")", ",", "dtype", "=", "self", ".", "dtype", ")", ")", "\n", "\n", "# Fixing Eyeball and neck rotation", "\n", "default_eyball_pose", "=", "torch", ".", "zeros", "(", "[", "1", ",", "6", "]", ",", "dtype", "=", "self", ".", "dtype", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "register_parameter", "(", "'eye_pose'", ",", "nn", ".", "Parameter", "(", "default_eyball_pose", ",", "\n", "requires_grad", "=", "False", ")", ")", "\n", "default_neck_pose", "=", "torch", ".", "zeros", "(", "[", "1", ",", "3", "]", ",", "dtype", "=", "self", ".", "dtype", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "register_parameter", "(", "'neck_pose'", ",", "nn", ".", "Parameter", "(", "default_neck_pose", ",", "\n", "requires_grad", "=", "False", ")", ")", "\n", "\n", "# Static and Dynamic Landmark embeddings for FLAME", "\n", "lmk_embeddings", "=", "np", ".", "load", "(", "config", ".", "flame_lmk_embedding_path", ",", "allow_pickle", "=", "True", ",", "encoding", "=", "'latin1'", ")", "\n", "lmk_embeddings", "=", "lmk_embeddings", "[", "(", ")", "]", "\n", "self", ".", "register_buffer", "(", "'lmk_faces_idx'", ",", "torch", ".", "from_numpy", "(", "lmk_embeddings", "[", "'static_lmk_faces_idx'", "]", ")", ".", "long", "(", ")", ")", "\n", "self", ".", "register_buffer", "(", "'lmk_bary_coords'", ",", "torch", ".", "from_numpy", "(", "lmk_embeddings", "[", "'static_lmk_bary_coords'", "]", ")", ".", "to", "(", "self", ".", "dtype", ")", ")", "\n", "self", ".", "register_buffer", "(", "'dynamic_lmk_faces_idx'", ",", "lmk_embeddings", "[", "'dynamic_lmk_faces_idx'", "]", ".", "long", "(", ")", ")", "\n", "self", ".", "register_buffer", "(", "'dynamic_lmk_bary_coords'", ",", "lmk_embeddings", "[", "'dynamic_lmk_bary_coords'", "]", ".", "to", "(", "self", ".", "dtype", ")", ")", "\n", "self", ".", "register_buffer", "(", "'full_lmk_faces_idx'", ",", "torch", ".", "from_numpy", "(", "lmk_embeddings", "[", "'full_lmk_faces_idx'", "]", ")", ".", "long", "(", ")", ")", "\n", "self", ".", "register_buffer", "(", "'full_lmk_bary_coords'", ",", "torch", ".", "from_numpy", "(", "lmk_embeddings", "[", "'full_lmk_bary_coords'", "]", ")", ".", "to", "(", "self", ".", "dtype", ")", ")", "\n", "\n", "neck_kin_chain", "=", "[", "]", ";", "NECK_IDX", "=", "1", "\n", "curr_idx", "=", "torch", ".", "tensor", "(", "NECK_IDX", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "while", "curr_idx", "!=", "-", "1", ":", "\n", "            ", "neck_kin_chain", ".", "append", "(", "curr_idx", ")", "\n", "curr_idx", "=", "self", ".", "parents", "[", "curr_idx", "]", "\n", "", "self", ".", "register_buffer", "(", "'neck_kin_chain'", ",", "torch", ".", "stack", "(", "neck_kin_chain", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.FLAME.FLAME._find_dynamic_lmk_idx_and_bcoords": [[93, 136], ["torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "lbs.lbs.batch_rodrigues().view", "torch.eye().unsqueeze_().expand", "torch.eye().unsqueeze_().expand", "torch.eye().unsqueeze_().expand", "torch.eye().unsqueeze_().expand", "torch.eye().unsqueeze_().expand", "torch.eye().unsqueeze_().expand", "torch.eye().unsqueeze_().expand", "torch.eye().unsqueeze_().expand", "torch.eye().unsqueeze_().expand", "range", "torch.round().to", "torch.round().to", "torch.round().to", "torch.round().to", "torch.round().to", "torch.round().to", "torch.round().to", "torch.round().to", "torch.round().to", "torch.round().to.lt().to", "torch.round().to.lt().to", "torch.round().to.lt().to", "torch.round().to.lt().to", "torch.round().to.lt().to", "torch.round().to.lt().to", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "pose.view", "len", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "lbs.lbs.batch_rodrigues", "torch.eye().unsqueeze_", "torch.eye().unsqueeze_", "torch.eye().unsqueeze_", "torch.eye().unsqueeze_", "torch.eye().unsqueeze_", "torch.eye().unsqueeze_", "torch.eye().unsqueeze_", "torch.eye().unsqueeze_", "torch.eye().unsqueeze_", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round().to.lt", "torch.round().to.lt", "torch.round().to.lt", "torch.round().to.lt", "torch.round().to.lt", "torch.round().to.lt", "torch.index_select.view", "torch.index_select.view", "torch.index_select.view", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "lbs.lbs.rot_mat_to_euler"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.utils.rotation_converter.batch_rodrigues", "home.repos.pwc.inspect_result.foivospar_NED.models.lbs.rot_mat_to_euler"], ["", "def", "_find_dynamic_lmk_idx_and_bcoords", "(", "self", ",", "pose", ",", "dynamic_lmk_faces_idx", ",", "\n", "dynamic_lmk_b_coords", ",", "\n", "neck_kin_chain", ",", "dtype", "=", "torch", ".", "float32", ")", ":", "\n", "        ", "\"\"\"\n            Selects the face contour depending on the reletive position of the head\n            Input:\n                vertices: N X num_of_vertices X 3\n                pose: N X full pose\n                dynamic_lmk_faces_idx: The list of contour face indexes\n                dynamic_lmk_b_coords: The list of contour barycentric weights\n                neck_kin_chain: The tree to consider for the relative rotation\n                dtype: Data type\n            return:\n                The contour face indexes and the corresponding barycentric weights\n        \"\"\"", "\n", "\n", "batch_size", "=", "pose", ".", "shape", "[", "0", "]", "\n", "\n", "aa_pose", "=", "torch", ".", "index_select", "(", "pose", ".", "view", "(", "batch_size", ",", "-", "1", ",", "3", ")", ",", "1", ",", "\n", "neck_kin_chain", ")", "\n", "rot_mats", "=", "batch_rodrigues", "(", "\n", "aa_pose", ".", "view", "(", "-", "1", ",", "3", ")", ",", "dtype", "=", "dtype", ")", ".", "view", "(", "batch_size", ",", "-", "1", ",", "3", ",", "3", ")", "\n", "\n", "rel_rot_mat", "=", "torch", ".", "eye", "(", "3", ",", "device", "=", "pose", ".", "device", ",", "\n", "dtype", "=", "dtype", ")", ".", "unsqueeze_", "(", "dim", "=", "0", ")", ".", "expand", "(", "batch_size", ",", "-", "1", ",", "-", "1", ")", "\n", "for", "idx", "in", "range", "(", "len", "(", "neck_kin_chain", ")", ")", ":", "\n", "            ", "rel_rot_mat", "=", "torch", ".", "bmm", "(", "rot_mats", "[", ":", ",", "idx", "]", ",", "rel_rot_mat", ")", "\n", "\n", "", "y_rot_angle", "=", "torch", ".", "round", "(", "\n", "torch", ".", "clamp", "(", "rot_mat_to_euler", "(", "rel_rot_mat", ")", "*", "180.0", "/", "np", ".", "pi", ",", "\n", "max", "=", "39", ")", ")", ".", "to", "(", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "neg_mask", "=", "y_rot_angle", ".", "lt", "(", "0", ")", ".", "to", "(", "dtype", "=", "torch", ".", "long", ")", "\n", "mask", "=", "y_rot_angle", ".", "lt", "(", "-", "39", ")", ".", "to", "(", "dtype", "=", "torch", ".", "long", ")", "\n", "neg_vals", "=", "mask", "*", "78", "+", "(", "1", "-", "mask", ")", "*", "(", "39", "-", "y_rot_angle", ")", "\n", "y_rot_angle", "=", "(", "neg_mask", "*", "neg_vals", "+", "\n", "(", "1", "-", "neg_mask", ")", "*", "y_rot_angle", ")", "\n", "\n", "dyn_lmk_faces_idx", "=", "torch", ".", "index_select", "(", "dynamic_lmk_faces_idx", ",", "\n", "0", ",", "y_rot_angle", ")", "\n", "dyn_lmk_b_coords", "=", "torch", ".", "index_select", "(", "dynamic_lmk_b_coords", ",", "\n", "0", ",", "y_rot_angle", ")", "\n", "return", "dyn_lmk_faces_idx", ",", "dyn_lmk_b_coords", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.FLAME.FLAME._vertices2landmarks": [[137, 168], ["torch.index_select().view().view", "torch.index_select().view().view", "torch.index_select().view().view", "torch.index_select().view().view", "torch.index_select().view().view", "torch.index_select().view().view", "torch.index_select().view().view", "torch.index_select().view().view", "torch.index_select().view().view", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "vertices.view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "lmk_faces_idx.view", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "def", "_vertices2landmarks", "(", "self", ",", "vertices", ",", "faces", ",", "lmk_faces_idx", ",", "lmk_bary_coords", ")", ":", "\n", "        ", "\"\"\"\n            Calculates landmarks by barycentric interpolation\n            Input:\n                vertices: torch.tensor NxVx3, dtype = torch.float32\n                    The tensor of input vertices\n                faces: torch.tensor (N*F)x3, dtype = torch.long\n                    The faces of the mesh\n                lmk_faces_idx: torch.tensor N X L, dtype = torch.long\n                    The tensor with the indices of the faces used to calculate the\n                    landmarks.\n                lmk_bary_coords: torch.tensor N X L X 3, dtype = torch.float32\n                    The tensor of barycentric coordinates that are used to interpolate\n                    the landmarks\n\n            Returns:\n                landmarks: torch.tensor NxLx3, dtype = torch.float32\n                    The coordinates of the landmarks for each mesh in the batch\n        \"\"\"", "\n", "# Extract the indices of the vertices for each face", "\n", "# NxLx3", "\n", "batch_size", ",", "num_verts", "=", "vertices", ".", "shape", "[", ":", "dd2", "]", "\n", "lmk_faces", "=", "torch", ".", "index_select", "(", "faces", ",", "0", ",", "lmk_faces_idx", ".", "view", "(", "-", "1", ")", ")", ".", "view", "(", "\n", "1", ",", "-", "1", ",", "3", ")", ".", "view", "(", "batch_size", ",", "lmk_faces_idx", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", "\n", "lmk_faces", "+=", "torch", ".", "arange", "(", "batch_size", ",", "dtype", "=", "torch", ".", "long", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", ".", "to", "(", "\n", "device", "=", "vertices", ".", "device", ")", "*", "num_verts", "\n", "\n", "lmk_vertices", "=", "vertices", ".", "view", "(", "-", "1", ",", "3", ")", "[", "lmk_faces", "]", "\n", "landmarks", "=", "torch", ".", "einsum", "(", "'blfi,blf->bli'", ",", "[", "lmk_vertices", ",", "lmk_bary_coords", "]", ")", "\n", "return", "landmarks", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.FLAME.FLAME.seletec_3d68": [[169, 174], ["lbs.lbs.vertices2landmarks", "FLAME.FLAME.full_lmk_faces_idx.repeat", "FLAME.FLAME.full_lmk_bary_coords.repeat"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.models.lbs.vertices2landmarks"], ["", "def", "seletec_3d68", "(", "self", ",", "vertices", ")", ":", "\n", "        ", "landmarks3d", "=", "vertices2landmarks", "(", "vertices", ",", "self", ".", "faces_tensor", ",", "\n", "self", ".", "full_lmk_faces_idx", ".", "repeat", "(", "vertices", ".", "shape", "[", "0", "]", ",", "1", ")", ",", "\n", "self", ".", "full_lmk_bary_coords", ".", "repeat", "(", "vertices", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ")", ")", "\n", "return", "landmarks3d", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.FLAME.FLAME.forward": [[175, 217], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "FLAME.FLAME.v_template.unsqueeze().expand", "lbs.lbs.lbs", "FLAME.FLAME.lmk_faces_idx.unsqueeze().expand", "FLAME.FLAME.lmk_bary_coords.unsqueeze().expand", "FLAME.FLAME._find_dynamic_lmk_idx_and_bcoords", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lbs.lbs.vertices2landmarks", "lbs.lbs.vertices2landmarks", "FLAME.FLAME.eye_pose.expand", "FLAME.FLAME.eye_pose.expand", "FLAME.FLAME.full_lmk_faces_idx.repeat", "FLAME.FLAME.full_lmk_bary_coords.repeat", "FLAME.FLAME.neck_pose.expand", "FLAME.FLAME.v_template.unsqueeze", "FLAME.FLAME.lmk_faces_idx.unsqueeze", "FLAME.FLAME.lmk_bary_coords.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.models.lbs.lbs", "home.repos.pwc.inspect_result.foivospar_NED.models.FLAME.FLAME._find_dynamic_lmk_idx_and_bcoords", "home.repos.pwc.inspect_result.foivospar_NED.models.lbs.vertices2landmarks", "home.repos.pwc.inspect_result.foivospar_NED.models.lbs.vertices2landmarks"], ["", "def", "forward", "(", "self", ",", "shape_params", "=", "None", ",", "expression_params", "=", "None", ",", "pose_params", "=", "None", ",", "eye_pose_params", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n            Input:\n                shape_params: N X number of shape parameters\n                expression_params: N X number of expression parameters\n                pose_params: N X number of pose parameters (6)\n            return:d\n                vertices: N X V X 3\n                landmarks: N X number of landmarks X 3\n        \"\"\"", "\n", "batch_size", "=", "shape_params", ".", "shape", "[", "0", "]", "\n", "if", "pose_params", "is", "None", ":", "\n", "            ", "pose_params", "=", "self", ".", "eye_pose", ".", "expand", "(", "batch_size", ",", "-", "1", ")", "\n", "", "if", "eye_pose_params", "is", "None", ":", "\n", "            ", "eye_pose_params", "=", "self", ".", "eye_pose", ".", "expand", "(", "batch_size", ",", "-", "1", ")", "\n", "", "betas", "=", "torch", ".", "cat", "(", "[", "shape_params", ",", "expression_params", "]", ",", "dim", "=", "1", ")", "\n", "full_pose", "=", "torch", ".", "cat", "(", "[", "pose_params", "[", ":", ",", ":", "3", "]", ",", "self", ".", "neck_pose", ".", "expand", "(", "batch_size", ",", "-", "1", ")", ",", "pose_params", "[", ":", ",", "3", ":", "]", ",", "eye_pose_params", "]", ",", "dim", "=", "1", ")", "\n", "template_vertices", "=", "self", ".", "v_template", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "batch_size", ",", "-", "1", ",", "-", "1", ")", "\n", "\n", "vertices", ",", "_", "=", "lbs", "(", "betas", ",", "full_pose", ",", "template_vertices", ",", "\n", "self", ".", "shapedirs", ",", "self", ".", "posedirs", ",", "\n", "self", ".", "J_regressor", ",", "self", ".", "parents", ",", "\n", "self", ".", "lbs_weights", ",", "dtype", "=", "self", ".", "dtype", ")", "\n", "\n", "lmk_faces_idx", "=", "self", ".", "lmk_faces_idx", ".", "unsqueeze", "(", "dim", "=", "0", ")", ".", "expand", "(", "batch_size", ",", "-", "1", ")", "\n", "lmk_bary_coords", "=", "self", ".", "lmk_bary_coords", ".", "unsqueeze", "(", "dim", "=", "0", ")", ".", "expand", "(", "batch_size", ",", "-", "1", ",", "-", "1", ")", "\n", "\n", "dyn_lmk_faces_idx", ",", "dyn_lmk_bary_coords", "=", "self", ".", "_find_dynamic_lmk_idx_and_bcoords", "(", "\n", "full_pose", ",", "self", ".", "dynamic_lmk_faces_idx", ",", "\n", "self", ".", "dynamic_lmk_bary_coords", ",", "\n", "self", ".", "neck_kin_chain", ",", "dtype", "=", "self", ".", "dtype", ")", "\n", "lmk_faces_idx", "=", "torch", ".", "cat", "(", "[", "dyn_lmk_faces_idx", ",", "lmk_faces_idx", "]", ",", "1", ")", "\n", "lmk_bary_coords", "=", "torch", ".", "cat", "(", "[", "dyn_lmk_bary_coords", ",", "lmk_bary_coords", "]", ",", "1", ")", "\n", "\n", "landmarks2d", "=", "vertices2landmarks", "(", "vertices", ",", "self", ".", "faces_tensor", ",", "\n", "lmk_faces_idx", ",", "\n", "lmk_bary_coords", ")", "\n", "bz", "=", "vertices", ".", "shape", "[", "0", "]", "\n", "landmarks3d", "=", "vertices2landmarks", "(", "vertices", ",", "self", ".", "faces_tensor", ",", "\n", "self", ".", "full_lmk_faces_idx", ".", "repeat", "(", "bz", ",", "1", ")", ",", "\n", "self", ".", "full_lmk_bary_coords", ".", "repeat", "(", "bz", ",", "1", ",", "1", ")", ")", "\n", "return", "vertices", ",", "landmarks2d", ",", "landmarks3d", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.FLAME.FLAMETex.__init__": [[225, 254], ["torch.Module.__init__", "FLAME.FLAMETex.register_buffer", "FLAME.FLAMETex.register_buffer", "numpy.load", "tex_space[].reshape", "tex_space[].reshape", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "numpy.load", "print", "tex_space[].reshape", "tex_space[].reshape", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.datasets.datasets.TestData.__init__", "home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.foivospar_NED.util.util.reshape", "home.repos.pwc.inspect_result.foivospar_NED.util.util.reshape", "home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.foivospar_NED.util.util.reshape", "home.repos.pwc.inspect_result.foivospar_NED.util.util.reshape"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "FLAMETex", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "config", ".", "tex_type", "==", "'BFM'", ":", "\n", "            ", "mu_key", "=", "'MU'", "\n", "pc_key", "=", "'PC'", "\n", "n_pc", "=", "199", "\n", "tex_path", "=", "config", ".", "tex_path", "\n", "tex_space", "=", "np", ".", "load", "(", "tex_path", ")", "\n", "texture_mean", "=", "tex_space", "[", "mu_key", "]", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "texture_basis", "=", "tex_space", "[", "pc_key", "]", ".", "reshape", "(", "-", "1", ",", "n_pc", ")", "\n", "\n", "", "elif", "config", ".", "tex_type", "==", "'FLAME'", ":", "\n", "            ", "mu_key", "=", "'mean'", "\n", "pc_key", "=", "'tex_dir'", "\n", "n_pc", "=", "200", "\n", "tex_path", "=", "config", ".", "flame_tex_path", "\n", "tex_space", "=", "np", ".", "load", "(", "tex_path", ")", "\n", "texture_mean", "=", "tex_space", "[", "mu_key", "]", ".", "reshape", "(", "1", ",", "-", "1", ")", "/", "255.", "\n", "texture_basis", "=", "tex_space", "[", "pc_key", "]", ".", "reshape", "(", "-", "1", ",", "n_pc", ")", "/", "255.", "\n", "", "else", ":", "\n", "            ", "print", "(", "'texture type '", ",", "config", ".", "tex_type", ",", "'not exist!'", ")", "\n", "raise", "NotImplementedError", "\n", "\n", "", "n_tex", "=", "config", ".", "n_tex", "\n", "num_components", "=", "texture_basis", ".", "shape", "[", "1", "]", "\n", "texture_mean", "=", "torch", ".", "from_numpy", "(", "texture_mean", ")", ".", "float", "(", ")", "[", "None", ",", "...", "]", "\n", "texture_basis", "=", "torch", ".", "from_numpy", "(", "texture_basis", "[", ":", ",", ":", "n_tex", "]", ")", ".", "float", "(", ")", "[", "None", ",", "...", "]", "\n", "self", ".", "register_buffer", "(", "'texture_mean'", ",", "texture_mean", ")", "\n", "self", ".", "register_buffer", "(", "'texture_basis'", ",", "texture_basis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.FLAME.FLAMETex.forward": [[255, 265], ["torch.interpolate.reshape().permute", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate.reshape"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.util.util.reshape"], ["", "def", "forward", "(", "self", ",", "texcode", ")", ":", "\n", "        ", "'''\n        texcode: [batchsize, n_tex]\n        texture: [bz, 3, 256, 256], range: 0-1\n        '''", "\n", "texture", "=", "self", ".", "texture_mean", "+", "(", "self", ".", "texture_basis", "*", "texcode", "[", ":", ",", "None", ",", ":", "]", ")", ".", "sum", "(", "-", "1", ")", "\n", "texture", "=", "texture", ".", "reshape", "(", "texcode", ".", "shape", "[", "0", "]", ",", "512", ",", "512", ",", "3", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "texture", "=", "F", ".", "interpolate", "(", "texture", ",", "[", "256", ",", "256", "]", ")", "\n", "texture", "=", "texture", "[", ":", ",", "[", "2", ",", "1", ",", "0", "]", ",", ":", ",", ":", "]", "\n", "return", "texture", "", "", "", ""]], "home.repos.pwc.inspect_result.foivospar_NED.models.FLAME.to_tensor": [[24, 27], ["str", "torch.tensor", "torch.tensor", "torch.tensor", "type"], "function", ["None"], ["def", "to_tensor", "(", "array", ",", "dtype", "=", "torch", ".", "float32", ")", ":", "\n", "    ", "if", "'torch.tensor'", "not", "in", "str", "(", "type", "(", "array", ")", ")", ":", "\n", "        ", "return", "torch", ".", "tensor", "(", "array", ",", "dtype", "=", "dtype", ")", "\n", "", "", "def", "to_np", "(", "array", ",", "dtype", "=", "np", ".", "float32", ")", ":", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.FLAME.to_np": [[27, 31], ["numpy.array", "str", "array.todense.todense", "type"], "function", ["None"], ["", "", "def", "to_np", "(", "array", ",", "dtype", "=", "np", ".", "float32", ")", ":", "\n", "    ", "if", "'scipy.sparse'", "in", "str", "(", "type", "(", "array", ")", ")", ":", "\n", "        ", "array", "=", "array", ".", "todense", "(", ")", "\n", "", "return", "np", ".", "array", "(", "array", ",", "dtype", "=", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.frnet.BasicBlock.__init__": [[18, 27], ["torch.Module.__init__", "frnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "frnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.datasets.datasets.TestData.__init__", "home.repos.pwc.inspect_result.foivospar_NED.models.frnet.conv3x3", "home.repos.pwc.inspect_result.foivospar_NED.models.frnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.frnet.BasicBlock.forward": [[28, 45], ["frnet.BasicBlock.conv1", "frnet.BasicBlock.bn1", "frnet.BasicBlock.relu", "frnet.BasicBlock.conv2", "frnet.BasicBlock.bn2", "frnet.BasicBlock.relu", "frnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.frnet.Bottleneck.__init__": [[50, 61], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.datasets.datasets.TestData.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.frnet.Bottleneck.forward": [[62, 83], ["frnet.Bottleneck.conv1", "frnet.Bottleneck.bn1", "frnet.Bottleneck.relu", "frnet.Bottleneck.conv2", "frnet.Bottleneck.bn2", "frnet.Bottleneck.relu", "frnet.Bottleneck.conv3", "frnet.Bottleneck.bn3", "frnet.Bottleneck.relu", "frnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.frnet.ResNet.__init__": [[87, 111], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "frnet.ResNet._make_layer", "frnet.ResNet._make_layer", "frnet.ResNet._make_layer", "frnet.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "frnet.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.datasets.datasets.TestData.__init__", "home.repos.pwc.inspect_result.foivospar_NED.models.frnet.ResNet._make_layer", "home.repos.pwc.inspect_result.foivospar_NED.models.frnet.ResNet._make_layer", "home.repos.pwc.inspect_result.foivospar_NED.models.frnet.ResNet._make_layer", "home.repos.pwc.inspect_result.foivospar_NED.models.frnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "include_top", "=", "True", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "include_top", "=", "include_top", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "ceil_mode", "=", "True", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.frnet.ResNet._make_layer": [[112, 128], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.frnet.ResNet.forward": [[129, 148], ["frnet.ResNet.conv1", "frnet.ResNet.bn1", "frnet.ResNet.relu", "frnet.ResNet.maxpool", "frnet.ResNet.layer1", "frnet.ResNet.layer2", "frnet.ResNet.layer3", "frnet.ResNet.layer4", "frnet.ResNet.avgpool", "frnet.ResNet.view", "frnet.ResNet.fc", "frnet.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "\n", "if", "not", "self", ".", "include_top", ":", "\n", "            ", "return", "x", "\n", "\n", "", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.frnet.conv3x3": [[10, 14], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.frnet.resnet50": [[149, 154], ["frnet.ResNet"], "function", ["None"], ["", "", "def", "resnet50", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.frnet.load_state_dict": [[156, 177], ["model.state_dict", "pickle.load.items", "open", "pickle.load", "KeyError", "own_state[].copy_", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "RuntimeError", "own_state[].size", "param.size"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load"], ["def", "load_state_dict", "(", "model", ",", "fname", ")", ":", "\n", "    ", "\"\"\"\n    Set parameters converted from Caffe models authors of VGGFace2 provide.\n    See https://www.robots.ox.ac.uk/~vgg/data/vgg_face2/.\n    Arguments:\n        model: model\n        fname: file name of parameters converted from a Caffe model, assuming the file format is Pickle.\n    \"\"\"", "\n", "with", "open", "(", "fname", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "weights", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "\n", "", "own_state", "=", "model", ".", "state_dict", "(", ")", "\n", "for", "name", ",", "param", "in", "weights", ".", "items", "(", ")", ":", "\n", "        ", "if", "name", "in", "own_state", ":", "\n", "            ", "try", ":", "\n", "                ", "own_state", "[", "name", "]", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "param", ")", ")", "\n", "", "except", "Exception", ":", "\n", "                ", "raise", "RuntimeError", "(", "'While copying the parameter named {}, whose dimensions in the model are {} and whose '", "'dimensions in the checkpoint are {}.'", ".", "format", "(", "name", ",", "own_state", "[", "name", "]", ".", "size", "(", ")", ",", "param", ".", "size", "(", ")", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "KeyError", "(", "'unexpected key \"{}\" in state_dict'", ".", "format", "(", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.networks.ResnetBlock.__init__": [[126, 129], ["torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Module.__init__", "networks.ResnetBlock.build_conv_block"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.datasets.datasets.TestData.__init__", "home.repos.pwc.inspect_result.foivospar_NED.models.networks.ResnetBlock.build_conv_block"], []], "home.repos.pwc.inspect_result.foivospar_NED.models.networks.ResnetBlock.build_conv_block": [[130, 161], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.foivospar_NED.models.networks.ResnetBlock.forward": [[162, 165], ["networks.ResnetBlock.conv_block"], "methods", ["None"], []], "home.repos.pwc.inspect_result.foivospar_NED.models.networks.MultiscaleDiscriminator.__init__": [[167, 187], ["torch.Module.__init__", "range", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "networks.NLayerDiscriminator", "min", "range", "setattr", "setattr", "getattr", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.datasets.datasets.TestData.__init__"], []], "home.repos.pwc.inspect_result.foivospar_NED.models.networks.MultiscaleDiscriminator.singleD_forward": [[188, 197], ["range", "len", "result.append", "model"], "methods", ["None"], []], "home.repos.pwc.inspect_result.foivospar_NED.models.networks.MultiscaleDiscriminator.forward": [[198, 212], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "result.append", "getattr", "networks.MultiscaleDiscriminator.singleD_forward", "networks.MultiscaleDiscriminator.downsample", "getattr", "range", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.models.networks.MultiscaleDiscriminator.singleD_forward"], []], "home.repos.pwc.inspect_result.foivospar_NED.models.networks.NLayerDiscriminator.__init__": [[215, 251], ["torch.Module.__init__", "int", "range", "min", "numpy.ceil", "min", "range", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "len", "setattr", "len", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "str"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.datasets.datasets.TestData.__init__"], []], "home.repos.pwc.inspect_result.foivospar_NED.models.networks.NLayerDiscriminator.forward": [[252, 261], ["range", "networks.NLayerDiscriminator.model", "getattr", "res.append", "getattr.", "str"], "methods", ["None"], []], "home.repos.pwc.inspect_result.foivospar_NED.models.networks.GANLoss.__init__": [[266, 276], ["torch.Module.__init__", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.datasets.datasets.TestData.__init__"], []], "home.repos.pwc.inspect_result.foivospar_NED.models.networks.GANLoss.get_target_tensor": [[277, 295], ["input.get_device", "networks.GANLoss.Tensor().cuda().fill_", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "networks.GANLoss.Tensor().cuda().fill_", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "networks.GANLoss.real_label_var.numel", "input.numel", "networks.GANLoss.fake_label_var.numel", "input.numel", "networks.GANLoss.Tensor().cuda", "networks.GANLoss.Tensor().cuda", "networks.GANLoss.Tensor", "networks.GANLoss.Tensor", "input.size", "input.size"], "methods", ["None"], []], "home.repos.pwc.inspect_result.foivospar_NED.models.networks.GANLoss.get_loss": [[296, 308], ["networks.GANLoss.get_target_tensor", "networks.GANLoss.loss", "networks.GANLoss.get_target_tensor", "networks.GANLoss.get_target_tensor", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.models.networks.GANLoss.get_target_tensor", "home.repos.pwc.inspect_result.foivospar_NED.models.networks.GANLoss.get_target_tensor", "home.repos.pwc.inspect_result.foivospar_NED.models.networks.GANLoss.get_target_tensor"], []], "home.repos.pwc.inspect_result.foivospar_NED.models.networks.GANLoss.__call__": [[309, 318], ["isinstance", "networks.GANLoss.get_loss", "networks.GANLoss.get_loss"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.models.networks.GANLoss.get_loss", "home.repos.pwc.inspect_result.foivospar_NED.models.networks.GANLoss.get_loss"], []], "home.repos.pwc.inspect_result.foivospar_NED.models.networks.Vgg19.__init__": [[320, 341], ["torch.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "torchvision.models.vgg19", "networks.Vgg19.slice1.add_module", "networks.Vgg19.slice2.add_module", "networks.Vgg19.slice3.add_module", "networks.Vgg19.slice4.add_module", "networks.Vgg19.slice5.add_module", "networks.Vgg19.parameters", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.datasets.datasets.TestData.__init__"], []], "home.repos.pwc.inspect_result.foivospar_NED.models.networks.Vgg19.forward": [[342, 350], ["networks.Vgg19.slice1", "networks.Vgg19.slice2", "networks.Vgg19.slice3", "networks.Vgg19.slice4", "networks.Vgg19.slice5"], "methods", ["None"], []], "home.repos.pwc.inspect_result.foivospar_NED.models.networks.VGGLoss.__init__": [[352, 358], ["torch.Module.__init__", "Vgg19().cuda", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "networks.Vgg19"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.datasets.datasets.TestData.__init__"], []], "home.repos.pwc.inspect_result.foivospar_NED.models.networks.VGGLoss.forward": [[359, 367], ["range", "networks.VGGLoss.vgg", "networks.VGGLoss.vgg", "len", "x.size", "networks.VGGLoss.downsample", "networks.VGGLoss.downsample", "networks.VGGLoss.criterion", "y_vgg[].detach"], "methods", ["None"], []], "home.repos.pwc.inspect_result.foivospar_NED.models.networks.get_norm_layer": [[11, 19], ["functools.partial", "functools.partial", "NotImplementedError"], "function", ["None"], ["for", "_", "in", "range", "(", "2", ")", ":", "\n", "            ", "layers", "+=", "[", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", "]", "\n", "layers", "+=", "[", "nn", ".", "ReLU", "(", ")", "]", "\n", "", "self", ".", "shared", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "self", ".", "unshared", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "_", "in", "range", "(", "n_emotions", ")", ":", "\n", "            ", "self", ".", "unshared", "+=", "[", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.networks.weights_init": [[20, 34], ["hasattr", "m.weight.data.normal_", "classname.find", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_", "classname.find", "m.weight.data.normal_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_"], "function", ["None"], ["nn", ".", "Linear", "(", "hidden_dim", ",", "style_dim", ")", ")", "]", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "z", ",", "y", ")", ":", "\n", "        ", "h", "=", "self", ".", "shared", "(", "z", ")", "\n", "out", "=", "[", "]", "\n", "for", "layer", "in", "self", ".", "unshared", ":", "\n", "            ", "out", "+=", "[", "layer", "(", "h", ")", "]", "\n", "", "out", "=", "torch", ".", "stack", "(", "out", ",", "dim", "=", "1", ")", "# (batch, n_emotions, style_dim)", "\n", "idx", "=", "torch", ".", "LongTensor", "(", "range", "(", "y", ".", "size", "(", "0", ")", ")", ")", ".", "to", "(", "y", ".", "device", ")", "\n", "s", "=", "out", "[", "idx", ",", "y", "]", "# (batch, style_dim)", "\n", "return", "s", "\n", "\n", "", "", "class", "Generator", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "style_dim", "=", "16", ",", "num_exp_coeffs", "=", "51", ")", ":", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.networks.define_G": [[35, 43], ["networks.get_norm_layer", "networks.Generator", "Generator.apply", "len", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "Generator.cuda"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.models.networks.get_norm_layer"], ["\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "seq1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "num_exp_coeffs", "+", "style_dim", ",", "512", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "LSTM", "=", "nn", ".", "LSTM", "(", "512", ",", "512", ",", "2", ",", "batch_first", "=", "True", ",", "bidirectional", "=", "True", ")", "\n", "self", ".", "seq2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "1024", ",", "1024", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Linear", "(", "1024", ",", "1024", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "1024", ",", "num_exp_coeffs", ")", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "s", ")", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.networks.define_D": [[44, 52], ["networks.get_norm_layer", "networks.MultiscaleDiscriminator", "MultiscaleDiscriminator.apply", "len", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "MultiscaleDiscriminator.cuda"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.models.networks.get_norm_layer"], ["        ", "s", "=", "s", ".", "view", "(", "s", ".", "size", "(", "0", ")", ",", "1", ",", "s", ".", "size", "(", "1", ")", ")", "\n", "s", "=", "s", ".", "repeat", "(", "1", ",", "x", ".", "size", "(", "1", ")", ",", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "s", "]", ",", "dim", "=", "2", ")", "\n", "\n", "self", ".", "LSTM", ".", "flatten_parameters", "(", ")", "\n", "out", ",", "_", "=", "self", ".", "LSTM", "(", "self", ".", "seq1", "(", "x", ")", ")", "\n", "out", "=", "self", ".", "seq2", "(", "out", ")", "\n", "\n", "return", "out", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.networks.print_network": [[53, 61], ["isinstance", "net.parameters", "print", "print", "param.numel"], "function", ["None"], ["\n", "", "", "class", "Discriminator", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "n_emotions", "=", "7", ",", "num_exp_coeffs", "=", "28", ")", ":", "\n", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "seq1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "num_exp_coeffs", ",", "512", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Linear", "(", "512", ",", "256", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "LSTM", "=", "nn", ".", "LSTM", "(", "256", ",", "128", ",", "2", ",", "batch_first", "=", "True", ",", "bidirectional", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.head2head_model.Head2HeadModelD.name": [[16, 18], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'Head2HeadModelD'", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.head2head_model.Head2HeadModelD.initialize": [[19, 72], ["base_model.BaseModel.initialize", "networks.define_D", "networks.GANLoss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "list", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "networks.define_D", "networks.define_D", "head2head_model.Head2HeadModelD.load_network", "print", "print", "networks.VGGLoss", "head2head_model.Head2HeadModelD.netD.parameters", "list", "list", "head2head_model.Head2HeadModelD.load_network", "head2head_model.Head2HeadModelD.load_network", "head2head_model.Head2HeadModelD.netDm.parameters", "head2head_model.Head2HeadModelD.netDe.parameters"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.options.train_options.TrainOptions.initialize", "home.repos.pwc.inspect_result.foivospar_NED.models.networks.define_D", "home.repos.pwc.inspect_result.foivospar_NED.models.networks.define_D", "home.repos.pwc.inspect_result.foivospar_NED.models.networks.define_D", "home.repos.pwc.inspect_result.foivospar_NED.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.foivospar_NED.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.foivospar_NED.models.base_model.BaseModel.load_network"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "BaseModel", ".", "initialize", "(", "self", ",", "opt", ")", "\n", "self", ".", "gpu_ids", "=", "opt", ".", "gpu_ids", "\n", "self", ".", "output_nc", "=", "opt", ".", "output_nc", "\n", "self", ".", "input_nc", "=", "opt", ".", "input_nc", "\n", "\n", "# Image discriminator", "\n", "netD_input_nc", "=", "self", ".", "input_nc", "+", "opt", ".", "output_nc", "\n", "self", ".", "netD", "=", "networks", ".", "define_D", "(", "netD_input_nc", ",", "opt", ".", "ndf", ",", "opt", ".", "n_layers_D", ",", "opt", ".", "norm", ",", "\n", "opt", ".", "num_D", ",", "not", "opt", ".", "no_ganFeat", ",", "gpu_ids", "=", "self", ".", "gpu_ids", ",", "opt", "=", "opt", ")", "\n", "\n", "# Mouth, Eyes discriminator", "\n", "if", "not", "opt", ".", "no_mouth_D", ":", "\n", "             ", "self", ".", "netDm", "=", "networks", ".", "define_D", "(", "netD_input_nc", ",", "opt", ".", "ndf", ",", "opt", ".", "n_layers_D", ",", "opt", ".", "norm", ",", "\n", "opt", ".", "num_D", ",", "not", "opt", ".", "no_ganFeat", ",", "gpu_ids", "=", "self", ".", "gpu_ids", ",", "opt", "=", "opt", ")", "\n", "", "if", "opt", ".", "use_eyes_D", ":", "\n", "             ", "self", ".", "netDe", "=", "networks", ".", "define_D", "(", "netD_input_nc", ",", "opt", ".", "ndf", ",", "opt", ".", "n_layers_D", ",", "opt", ".", "norm", ",", "\n", "opt", ".", "num_D", ",", "not", "opt", ".", "no_ganFeat", ",", "gpu_ids", "=", "self", ".", "gpu_ids", ",", "opt", "=", "opt", ")", "\n", "\n", "# load networks", "\n", "", "if", "(", "opt", ".", "continue_train", "or", "opt", ".", "load_pretrain", ")", ":", "\n", "            ", "self", ".", "load_network", "(", "self", ".", "netD", ",", "'D'", ",", "opt", ".", "which_epoch", ",", "opt", ".", "load_pretrain", ")", "\n", "if", "not", "opt", ".", "no_mouth_D", ":", "\n", "                ", "self", ".", "load_network", "(", "self", ".", "netDm", ",", "'Dm'", ",", "opt", ".", "which_epoch", ",", "opt", ".", "load_pretrain", ")", "\n", "", "if", "opt", ".", "use_eyes_D", ":", "\n", "                ", "self", ".", "load_network", "(", "self", ".", "netDe", ",", "'De'", ",", "opt", ".", "which_epoch", ",", "opt", ".", "load_pretrain", ")", "\n", "", "print", "(", "'---------- Discriminators loaded -------------'", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'---------- Discriminators initialized -------------'", ")", "\n", "\n", "# set loss functions and optimizers", "\n", "", "self", ".", "old_lr", "=", "opt", ".", "lr", "\n", "# define loss functions", "\n", "self", ".", "criterionGAN", "=", "networks", ".", "GANLoss", "(", "opt", ".", "gan_mode", ",", "tensor", "=", "self", ".", "Tensor", ")", "\n", "self", ".", "criterionFeat", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "if", "not", "opt", ".", "no_vgg", ":", "\n", "            ", "self", ".", "criterionVGG", "=", "networks", ".", "VGGLoss", "(", "self", ".", "gpu_ids", "[", "0", "]", ")", "\n", "\n", "", "self", ".", "loss_names", "=", "[", "'G_VGG'", ",", "'G_GAN'", ",", "'G_GAN_Feat'", ",", "'D_real'", ",", "'D_fake'", "]", "\n", "if", "not", "opt", ".", "no_mouth_D", ":", "\n", "            ", "self", ".", "loss_names", "+=", "[", "'Gm_GAN'", ",", "'Gm_GAN_Feat'", ",", "'Dm_real'", ",", "'Dm_fake'", "]", "\n", "", "if", "opt", ".", "use_eyes_D", ":", "\n", "            ", "self", ".", "loss_names", "+=", "[", "'Ge_GAN'", ",", "'Ge_GAN_Feat'", ",", "'De_real'", ",", "'De_fake'", "]", "\n", "\n", "", "beta1", ",", "beta2", "=", "opt", ".", "beta1", ",", "0.999", "\n", "lr", "=", "opt", ".", "lr", "\n", "# initialize optimizers", "\n", "params", "=", "list", "(", "self", ".", "netD", ".", "parameters", "(", ")", ")", "\n", "if", "not", "opt", ".", "no_mouth_D", ":", "\n", "            ", "params", "+=", "list", "(", "self", ".", "netDm", ".", "parameters", "(", ")", ")", "\n", "", "if", "opt", ".", "use_eyes_D", ":", "\n", "            ", "params", "+=", "list", "(", "self", ".", "netDe", ".", "parameters", "(", ")", ")", "\n", "", "self", ".", "optimizer_D", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "lr", ",", "betas", "=", "(", "beta1", ",", "beta2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.head2head_model.Head2HeadModelD.compute_D_losses": [[73, 87], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "netD.forward", "netD.forward", "head2head_model.Head2HeadModelD.criterionGAN", "head2head_model.Head2HeadModelD.criterionGAN", "netD.forward", "head2head_model.Head2HeadModelD.criterionGAN", "head2head_model.Head2HeadModelD.FM_loss", "torch.cat.detach", "torch.cat.detach", "torch.cat.detach"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.utils.renderer.SRenderY.forward", "home.repos.pwc.inspect_result.foivospar_NED.utils.renderer.SRenderY.forward", "home.repos.pwc.inspect_result.foivospar_NED.utils.renderer.SRenderY.forward", "home.repos.pwc.inspect_result.foivospar_NED.models.head2head_model.Head2HeadModelD.FM_loss"], ["", "def", "compute_D_losses", "(", "self", ",", "netD", ",", "real_A", ",", "real_B", ",", "fake_B", ")", ":", "\n", "# Input", "\n", "        ", "real_AB", "=", "torch", ".", "cat", "(", "(", "real_A", ",", "real_B", ")", ",", "dim", "=", "1", ")", "\n", "fake_AB", "=", "torch", ".", "cat", "(", "(", "real_A", ",", "fake_B", ")", ",", "dim", "=", "1", ")", "\n", "# D losses", "\n", "pred_real", "=", "netD", ".", "forward", "(", "real_AB", ")", "\n", "pred_fake", "=", "netD", ".", "forward", "(", "fake_AB", ".", "detach", "(", ")", ")", "\n", "loss_D_real", "=", "self", ".", "criterionGAN", "(", "pred_real", ",", "True", ",", "isG", "=", "False", ")", "\n", "loss_D_fake", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "False", ",", "isG", "=", "False", ")", "\n", "# G losses", "\n", "pred_fake", "=", "netD", ".", "forward", "(", "fake_AB", ")", "\n", "loss_G_GAN", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "True", ",", "isG", "=", "True", ")", "\n", "loss_G_GAN_Feat", "=", "self", ".", "FM_loss", "(", "pred_real", ",", "pred_fake", ")", "\n", "return", "loss_D_real", ",", "loss_D_fake", ",", "loss_G_GAN", ",", "loss_G_GAN_Feat", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.head2head_model.Head2HeadModelD.FM_loss": [[88, 100], ["range", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "min", "range", "len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "head2head_model.Head2HeadModelD.criterionFeat", "[].detach"], "methods", ["None"], ["", "def", "FM_loss", "(", "self", ",", "pred_real", ",", "pred_fake", ")", ":", "\n", "        ", "if", "not", "self", ".", "opt", ".", "no_ganFeat", ":", "\n", "            ", "loss_G_GAN_Feat", "=", "0", "\n", "feat_weights", "=", "4.0", "/", "(", "self", ".", "opt", ".", "n_layers_D", "+", "1", ")", "\n", "D_weights", "=", "1.0", "/", "self", ".", "opt", ".", "num_D", "\n", "for", "i", "in", "range", "(", "min", "(", "len", "(", "pred_fake", ")", ",", "self", ".", "opt", ".", "num_D", ")", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "len", "(", "pred_fake", "[", "i", "]", ")", "-", "1", ")", ":", "\n", "                    ", "loss_G_GAN_Feat", "+=", "D_weights", "*", "feat_weights", "*", "self", ".", "criterionFeat", "(", "pred_fake", "[", "i", "]", "[", "j", "]", ",", "pred_real", "[", "i", "]", "[", "j", "]", ".", "detach", "(", ")", ")", "*", "self", ".", "opt", ".", "lambda_feat", "\n", "", "", "", "else", ":", "\n", "            ", "loss_G_GAN_Feat", "=", "torch", ".", "zeros", "(", "1", ",", "1", ")", ".", "cuda", "(", ")", "\n", "", "return", "loss_G_GAN_Feat", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.head2head_model.Head2HeadModelD.forward": [[101, 135], ["real_B.size", "head2head_model.Head2HeadModelD.compute_D_losses", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "renderer.get_ROI", "head2head_model.Head2HeadModelD.compute_D_losses", "renderer.get_ROI", "head2head_model.Head2HeadModelD.compute_D_losses", "loss.unsqueeze", "head2head_model.Head2HeadModelD.criterionVGG", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.models.head2head_model.Head2HeadModelD.compute_D_losses", "home.repos.pwc.inspect_result.foivospar_NED.util.util.get_ROI", "home.repos.pwc.inspect_result.foivospar_NED.models.head2head_model.Head2HeadModelD.compute_D_losses", "home.repos.pwc.inspect_result.foivospar_NED.util.util.get_ROI", "home.repos.pwc.inspect_result.foivospar_NED.models.head2head_model.Head2HeadModelD.compute_D_losses"], ["", "def", "forward", "(", "self", ",", "tensors_list", ",", "mouth_centers", "=", "None", ",", "eyes_centers", "=", "None", ")", ":", "\n", "        ", "lambda_feat", "=", "self", ".", "opt", ".", "lambda_feat", "\n", "\n", "real_B", ",", "fake_B", ",", "real_A", "=", "tensors_list", "\n", "_", ",", "_", ",", "self", ".", "height", ",", "self", ".", "width", "=", "real_B", ".", "size", "(", ")", "\n", "#################### Losses ####################", "\n", "# VGG loss", "\n", "loss_G_VGG", "=", "(", "self", ".", "criterionVGG", "(", "fake_B", ",", "real_B", ")", "*", "lambda_feat", ")", "if", "not", "self", ".", "opt", ".", "no_vgg", "else", "torch", ".", "zeros", "(", "1", ",", "1", ")", ".", "cuda", "(", ")", "\n", "# GAN loss for Generator", "\n", "loss_D_real", ",", "loss_D_fake", ",", "loss_G_GAN", ",", "loss_G_GAN_Feat", "=", "self", ".", "compute_D_losses", "(", "self", ".", "netD", ",", "real_A", ",", "real_B", ",", "fake_B", ")", "\n", "\n", "loss_list", "=", "[", "loss_G_VGG", ",", "loss_G_GAN", ",", "loss_G_GAN_Feat", ",", "loss_D_real", ",", "loss_D_fake", "]", "\n", "\n", "if", "not", "self", ".", "opt", ".", "no_mouth_D", ":", "\n", "# Extract mouth region around the center.", "\n", "            ", "real_A_mouth", ",", "real_B_mouth", ",", "fake_B_mouth", "=", "util", ".", "get_ROI", "(", "[", "real_A", ",", "real_B", ",", "fake_B", "]", ",", "mouth_centers", ",", "self", ".", "opt", ")", "\n", "# Losses for mouth discriminator", "\n", "loss_Dm_real", ",", "loss_Dm_fake", ",", "loss_Gm_GAN", ",", "loss_Gm_GAN_Feat", "=", "self", ".", "compute_D_losses", "(", "self", ".", "netDm", ",", "real_A_mouth", ",", "real_B_mouth", ",", "fake_B_mouth", ")", "\n", "mouth_weight", "=", "1", "\n", "loss_Gm_GAN", "*=", "mouth_weight", "\n", "loss_Gm_GAN_Feat", "*=", "mouth_weight", "\n", "loss_list", "+=", "[", "loss_Gm_GAN", ",", "loss_Gm_GAN_Feat", ",", "loss_Dm_real", ",", "loss_Dm_fake", "]", "\n", "", "if", "self", ".", "opt", ".", "use_eyes_D", ":", "\n", "# Extract eyes region around the center.", "\n", "            ", "real_A_eyes", ",", "real_B_eyes", ",", "fake_B_eyes", "=", "util", ".", "get_ROI", "(", "[", "real_A", ",", "real_B", ",", "fake_B", "]", ",", "eyes_centers", ",", "self", ".", "opt", ")", "\n", "# Losses for eyes discriminator", "\n", "loss_De_real", ",", "loss_De_fake", ",", "loss_Ge_GAN", ",", "loss_Ge_GAN_Feat", "=", "self", ".", "compute_D_losses", "(", "self", ".", "netDe", ",", "real_A_eyes", ",", "real_B_eyes", ",", "fake_B_eyes", ")", "\n", "eyes_weight", "=", "1", "\n", "loss_Ge_GAN", "*=", "eyes_weight", "\n", "loss_Ge_GAN_Feat", "*=", "eyes_weight", "\n", "loss_list", "+=", "[", "loss_Ge_GAN", ",", "loss_Ge_GAN_Feat", ",", "loss_De_real", ",", "loss_De_fake", "]", "\n", "\n", "", "loss_list", "=", "[", "loss", ".", "unsqueeze", "(", "0", ")", "for", "loss", "in", "loss_list", "]", "\n", "return", "loss_list", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.head2head_model.Head2HeadModelD.save": [[136, 142], ["head2head_model.Head2HeadModelD.save_network", "head2head_model.Head2HeadModelD.save_network", "head2head_model.Head2HeadModelD.save_network"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.models.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.foivospar_NED.models.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.foivospar_NED.models.base_model.BaseModel.save_network"], ["", "def", "save", "(", "self", ",", "label", ")", ":", "\n", "        ", "self", ".", "save_network", "(", "self", ".", "netD", ",", "'D'", ",", "label", ",", "self", ".", "gpu_ids", ")", "\n", "if", "not", "self", ".", "opt", ".", "no_mouth_D", ":", "\n", "            ", "self", ".", "save_network", "(", "self", ".", "netDm", ",", "'Dm'", ",", "label", ",", "self", ".", "gpu_ids", ")", "\n", "", "if", "self", ".", "opt", ".", "use_eyes_D", ":", "\n", "            ", "self", ".", "save_network", "(", "self", ".", "netDe", ",", "'De'", ",", "label", ",", "self", ".", "gpu_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.head2head_model.Head2HeadModelD.update_learning_rate": [[143, 149], ["print"], "methods", ["None"], ["", "", "def", "update_learning_rate", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "lr", "=", "self", ".", "opt", ".", "lr", "*", "(", "1", "-", "(", "epoch", "-", "self", ".", "opt", ".", "niter", ")", "/", "self", ".", "opt", ".", "niter_decay", ")", "\n", "for", "param_group", "in", "self", ".", "optimizer_D", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "print", "(", "'update learning rate: %f -> %f'", "%", "(", "self", ".", "old_lr", ",", "lr", ")", ")", "\n", "self", ".", "old_lr", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.head2head_model.Head2HeadModelG.name": [[155, 157], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'Head2HeadModelG'", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.head2head_model.Head2HeadModelG.initialize": [[158, 185], ["base_model.BaseModel.initialize", "networks.define_G", "head2head_model.Head2HeadModelG.load_network", "print", "print", "min", "list", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "head2head_model.Head2HeadModelG.netG.parameters"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.options.train_options.TrainOptions.initialize", "home.repos.pwc.inspect_result.foivospar_NED.models.networks.define_G", "home.repos.pwc.inspect_result.foivospar_NED.models.base_model.BaseModel.load_network"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "BaseModel", ".", "initialize", "(", "self", ",", "opt", ")", "\n", "self", ".", "isTrain", "=", "opt", ".", "isTrain", "\n", "self", ".", "n_frames_G", "=", "opt", ".", "n_frames_G", "\n", "input_nc", "=", "opt", ".", "input_nc", "\n", "netG_input_nc", "=", "input_nc", "*", "self", ".", "n_frames_G", "\n", "prev_output_nc", "=", "(", "self", ".", "n_frames_G", "-", "1", ")", "*", "opt", ".", "output_nc", "\n", "\n", "self", ".", "netG", "=", "networks", ".", "define_G", "(", "netG_input_nc", ",", "opt", ".", "output_nc", ",", "prev_output_nc", ",", "opt", ".", "ngf", ",", "opt", ".", "n_downsample_G", ",", "opt", ".", "norm", ",", "self", ".", "gpu_ids", ",", "opt", ")", "\n", "\n", "# load networks", "\n", "if", "not", "self", ".", "isTrain", "or", "opt", ".", "continue_train", "or", "opt", ".", "load_pretrain", ":", "\n", "            ", "self", ".", "load_network", "(", "self", ".", "netG", ",", "'G'", ",", "opt", ".", "which_epoch", ",", "opt", ".", "load_pretrain", ")", "\n", "print", "(", "'---------- Generator loaded -------------'", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'---------- Generator initialized -------------'", ")", "\n", "\n", "# Optimizer for G", "\n", "", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "old_lr", "=", "opt", ".", "lr", "\n", "self", ".", "n_frames_backpropagate", "=", "self", ".", "opt", ".", "n_frames_backpropagate", "\n", "self", ".", "n_frames_load", "=", "min", "(", "self", ".", "opt", ".", "max_frames_per_gpu", ",", "self", ".", "opt", ".", "n_frames_total", ")", "\n", "# initialize optimizer G", "\n", "params", "=", "list", "(", "self", ".", "netG", ".", "parameters", "(", ")", ")", "\n", "beta1", ",", "beta2", "=", "opt", ".", "beta1", ",", "0.999", "\n", "lr", "=", "opt", ".", "lr", "\n", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "lr", ",", "betas", "=", "(", "beta1", ",", "beta2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.head2head_model.Head2HeadModelG.encode_input": [[186, 193], ["input_map.data.cuda.data.cuda.size", "input_map.data.cuda.data.cuda.data.cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable.data.cuda", "torch.autograd.Variable.data.cuda", "torch.autograd.Variable.data.cuda"], "methods", ["None"], ["", "", "def", "encode_input", "(", "self", ",", "input_map", ",", "real_image", ")", ":", "\n", "        ", "size", "=", "input_map", ".", "size", "(", ")", "\n", "self", ".", "bs", ",", "_", ",", "self", ".", "height", ",", "self", ".", "width", "=", "size", "[", "0", "]", ",", "size", "[", "1", "]", ",", "size", "[", "3", "]", ",", "size", "[", "4", "]", "\n", "input_map", "=", "input_map", ".", "data", ".", "cuda", "(", ")", "\n", "if", "real_image", "is", "not", "None", ":", "\n", "            ", "real_image", "=", "Variable", "(", "real_image", ".", "data", ".", "cuda", "(", ")", ")", "\n", "", "return", "input_map", ",", "real_image", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.head2head_model.Head2HeadModelG.forward": [[194, 223], ["head2head_model.Head2HeadModelG.encode_input", "real_A.get_device", "range", "fake_B_prev[].detach", "real_A.size", "real_A[].view().cuda", "fake_B_prev[].cuda", "fake_B_prevs.detach.detach.view", "head2head_model.Head2HeadModelG.netG.forward", "head2head_model.Head2HeadModelG.concatenate_tensors", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "fake_B_prevs.detach.detach.detach", "head2head_model.Head2HeadModelG.Tensor().zero_", "real_A[].view", "head2head_model.Head2HeadModelG.unsqueeze().cuda", "head2head_model.Head2HeadModelG.Tensor", "head2head_model.Head2HeadModelG.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.models.head2head_model.Head2HeadModelG.encode_input", "home.repos.pwc.inspect_result.foivospar_NED.utils.renderer.SRenderY.forward", "home.repos.pwc.inspect_result.foivospar_NED.models.head2head_model.Head2HeadModelG.concatenate_tensors"], ["", "def", "forward", "(", "self", ",", "input_A", ",", "input_B", ",", "fake_B_prev", ")", ":", "\n", "# Feed forward for training", "\n", "        ", "real_A", ",", "real_B", "=", "self", ".", "encode_input", "(", "input_A", ",", "input_B", ")", "\n", "gpu_id", "=", "real_A", ".", "get_device", "(", ")", "\n", "\n", "is_first_frame", "=", "fake_B_prev", "is", "None", "\n", "if", "is_first_frame", ":", "\n", "            ", "if", "self", ".", "opt", ".", "no_first_img", ":", "\n", "                ", "fake_B_prev", "=", "Variable", "(", "self", ".", "Tensor", "(", "self", ".", "bs", ",", "self", ".", "n_frames_G", "-", "1", ",", "self", ".", "opt", ".", "output_nc", ",", "self", ".", "height", ",", "self", ".", "width", ")", ".", "zero_", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "fake_B_prev", "=", "real_B", "[", ":", ",", ":", "self", ".", "n_frames_G", "-", "1", ",", "...", "]", "\n", "\n", "### generate frames sequentially", "\n", "", "", "for", "t", "in", "range", "(", "self", ".", "n_frames_load", ")", ":", "\n", "            ", "_", ",", "_", ",", "_", ",", "h", ",", "w", "=", "real_A", ".", "size", "(", ")", "\n", "real_A_reshaped", "=", "real_A", "[", ":", ",", "t", ":", "t", "+", "self", ".", "n_frames_G", ",", "...", "]", ".", "view", "(", "self", ".", "bs", ",", "-", "1", ",", "h", ",", "w", ")", ".", "cuda", "(", "gpu_id", ")", "\n", "\n", "fake_B_prevs", "=", "fake_B_prev", "[", ":", ",", "t", ":", "t", "+", "self", ".", "n_frames_G", "-", "1", ",", "...", "]", ".", "cuda", "(", "gpu_id", ")", "\n", "if", "(", "t", "%", "self", ".", "n_frames_backpropagate", ")", "==", "0", ":", "\n", "                ", "fake_B_prevs", "=", "fake_B_prevs", ".", "detach", "(", ")", "\n", "", "fake_B_prevs_reshaped", "=", "fake_B_prevs", ".", "view", "(", "self", ".", "bs", ",", "-", "1", ",", "h", ",", "w", ")", "\n", "\n", "fake_B", "=", "self", ".", "netG", ".", "forward", "(", "real_A_reshaped", ",", "fake_B_prevs_reshaped", ")", "\n", "\n", "fake_B_prev", "=", "self", ".", "concatenate_tensors", "(", "[", "fake_B_prev", ",", "fake_B", ".", "unsqueeze", "(", "1", ")", ".", "cuda", "(", "gpu_id", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "fake_B", "=", "fake_B_prev", "[", ":", ",", "self", ".", "n_frames_G", "-", "1", ":", "]", "\n", "fake_B_prev", "=", "fake_B_prev", "[", ":", ",", "-", "self", ".", "n_frames_G", "+", "1", ":", "]", ".", "detach", "(", ")", "\n", "return", "fake_B", ",", "real_A", "[", ":", ",", "self", ".", "n_frames_G", "-", "1", ":", "]", ",", "real_B", "[", ":", ",", "self", ".", "n_frames_G", "-", "2", ":", "]", ",", "fake_B_prev", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.head2head_model.Head2HeadModelG.inference": [[224, 244], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "head2head_model.Head2HeadModelG.encode_input", "real_A.size", "real_A[].view", "head2head_model.Head2HeadModelG.fake_B_prev.view", "head2head_model.Head2HeadModelG.netG.forward", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "hasattr", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "head2head_model.Head2HeadModelG.Tensor().zero_", "head2head_model.Head2HeadModelG.Tensor"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.models.head2head_model.Head2HeadModelG.encode_input", "home.repos.pwc.inspect_result.foivospar_NED.utils.renderer.SRenderY.forward"], ["", "def", "inference", "(", "self", ",", "input_A", ",", "input_B", ")", ":", "\n", "# Feed forward for test", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "real_A", ",", "real_B", "=", "self", ".", "encode_input", "(", "input_A", ",", "input_B", ")", "\n", "self", ".", "is_first_frame", "=", "not", "hasattr", "(", "self", ",", "'fake_B_prev'", ")", "or", "self", ".", "fake_B_prev", "is", "None", "\n", "if", "self", ".", "is_first_frame", ":", "\n", "                ", "if", "self", ".", "opt", ".", "no_first_img", ":", "\n", "                    ", "fake_B_prev", "=", "Variable", "(", "self", ".", "Tensor", "(", "self", ".", "bs", ",", "self", ".", "n_frames_G", "-", "1", ",", "self", ".", "opt", ".", "output_nc", ",", "self", ".", "height", ",", "self", ".", "width", ")", ".", "zero_", "(", ")", ")", "\n", "", "else", ":", "\n", "                    ", "fake_B_prev", "=", "real_B", "[", ":", ",", ":", "self", ".", "n_frames_G", "-", "1", ",", "...", "]", "\n", "", "self", ".", "fake_B_prev", "=", "fake_B_prev", "[", "0", "]", "\n", "\n", "", "_", ",", "_", ",", "_", ",", "h", ",", "w", "=", "real_A", ".", "size", "(", ")", "\n", "\n", "real_As_reshaped", "=", "real_A", "[", "0", ",", ":", "self", ".", "n_frames_G", "]", ".", "view", "(", "1", ",", "-", "1", ",", "h", ",", "w", ")", "\n", "fake_B_prevs_reshaped", "=", "self", ".", "fake_B_prev", ".", "view", "(", "1", ",", "-", "1", ",", "h", ",", "w", ")", "\n", "\n", "fake_B", "=", "self", ".", "netG", ".", "forward", "(", "real_As_reshaped", ",", "fake_B_prevs_reshaped", ")", "\n", "self", ".", "fake_B_prev", "=", "torch", ".", "cat", "(", "[", "self", ".", "fake_B_prev", "[", "1", ":", ",", "...", "]", ",", "fake_B", "]", ")", "\n", "", "return", "fake_B", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.head2head_model.Head2HeadModelG.concatenate_tensors": [[245, 257], ["isinstance", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "len", "tensors_cat.append", "head2head_model.Head2HeadModelG.concatenate_tensors"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.models.head2head_model.Head2HeadModelG.concatenate_tensors"], ["", "def", "concatenate_tensors", "(", "self", ",", "tensors", ",", "dim", "=", "0", ")", ":", "\n", "        ", "if", "tensors", "[", "0", "]", "is", "not", "None", "and", "tensors", "[", "1", "]", "is", "not", "None", ":", "\n", "            ", "if", "isinstance", "(", "tensors", "[", "0", "]", ",", "list", ")", ":", "\n", "                ", "tensors_cat", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "tensors", "[", "0", "]", ")", ")", ":", "\n", "                    ", "tensors_cat", ".", "append", "(", "self", ".", "concatenate_tensors", "(", "[", "tensors", "[", "0", "]", "[", "i", "]", ",", "tensors", "[", "1", "]", "[", "i", "]", "]", ",", "dim", "=", "dim", ")", ")", "\n", "", "return", "tensors_cat", "\n", "", "return", "torch", ".", "cat", "(", "[", "tensors", "[", "0", "]", ",", "tensors", "[", "1", "]", "]", ",", "dim", "=", "dim", ")", "\n", "", "elif", "tensors", "[", "0", "]", "is", "not", "None", ":", "\n", "            ", "return", "tensors", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "return", "tensors", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.head2head_model.Head2HeadModelG.save": [[258, 260], ["head2head_model.Head2HeadModelG.save_network"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.models.base_model.BaseModel.save_network"], ["", "", "def", "save", "(", "self", ",", "label", ")", ":", "\n", "        ", "self", ".", "save_network", "(", "self", ".", "netG", ",", "'G'", ",", "label", ",", "self", ".", "gpu_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.head2head_model.Head2HeadModelG.update_learning_rate": [[261, 267], ["print"], "methods", ["None"], ["", "def", "update_learning_rate", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "lr", "=", "self", ".", "opt", ".", "lr", "*", "(", "1", "-", "(", "epoch", "-", "self", ".", "opt", ".", "niter", ")", "/", "self", ".", "opt", ".", "niter_decay", ")", "\n", "for", "param_group", "in", "self", ".", "optimizer_G", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "print", "(", "'update learning rate: %f -> %f'", "%", "(", "self", ".", "old_lr", ",", "lr", ")", ")", "\n", "self", ".", "old_lr", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.head2head_model.create_model": [[269, 280], ["head2head_model.Head2HeadModelG", "nn.DataParallel.initialize", "len", "torch.DataParallel", "head2head_model.Head2HeadModelD", "nn.DataParallel.initialize", "torch.DataParallel"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.options.train_options.TrainOptions.initialize", "home.repos.pwc.inspect_result.foivospar_NED.options.train_options.TrainOptions.initialize"], ["", "", "def", "create_model", "(", "opt", ")", ":", "\n", "    ", "modelG", "=", "Head2HeadModelG", "(", ")", "\n", "modelG", ".", "initialize", "(", "opt", ")", "\n", "if", "opt", ".", "isTrain", "and", "len", "(", "opt", ".", "gpu_ids", ")", ":", "\n", "        ", "modelG", "=", "nn", ".", "DataParallel", "(", "modelG", ",", "device_ids", "=", "opt", ".", "gpu_ids", ")", "\n", "modelD", "=", "Head2HeadModelD", "(", ")", "\n", "modelD", ".", "initialize", "(", "opt", ")", "\n", "modelD", "=", "nn", ".", "DataParallel", "(", "modelD", ",", "device_ids", "=", "opt", ".", "gpu_ids", ")", "\n", "return", "[", "modelG", ",", "modelD", "]", "\n", "", "else", ":", "\n", "        ", "return", "modelG", "\n", "", "", ""]], "home.repos.pwc.inspect_result.foivospar_NED.models.base_model.BaseModel.name": [[6, 8], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'BaseModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.base_model.BaseModel.initialize": [[9, 15], ["None"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "gpu_ids", "=", "opt", ".", "gpu_ids", "\n", "self", ".", "isTrain", "=", "opt", ".", "isTrain", "\n", "self", ".", "Tensor", "=", "torch", ".", "cuda", ".", "FloatTensor", "if", "self", ".", "gpu_ids", "else", "torch", ".", "Tensor", "\n", "self", ".", "save_dir", "=", "opt", ".", "checkpoints_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.base_model.BaseModel.set_input": [[16, 18], ["None"], "methods", ["None"], ["", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "        ", "self", ".", "input", "=", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.base_model.BaseModel.forward": [[19, 21], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.base_model.BaseModel.test": [[23, 25], ["None"], "methods", ["None"], ["", "def", "test", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.base_model.BaseModel.get_image_paths": [[26, 28], ["None"], "methods", ["None"], ["", "def", "get_image_paths", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.base_model.BaseModel.optimize_parameters": [[29, 31], ["None"], "methods", ["None"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.base_model.BaseModel.get_current_visuals": [[32, 34], ["None"], "methods", ["None"], ["", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.base_model.BaseModel.get_current_errors": [[35, 37], ["None"], "methods", ["None"], ["", "def", "get_current_errors", "(", "self", ")", ":", "\n", "        ", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.base_model.BaseModel.save": [[38, 40], ["None"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "label", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.base_model.BaseModel.save_network": [[42, 48], ["os.path.join", "torch.save", "network.cpu().state_dict", "len", "torch.cuda.is_available", "network.cuda", "network.cpu"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.models.base_model.BaseModel.save"], ["", "def", "save_network", "(", "self", ",", "network", ",", "network_label", ",", "epoch_label", ",", "gpu_ids", ")", ":", "\n", "        ", "save_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch_label", ",", "network_label", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "save_filename", ")", "\n", "torch", ".", "save", "(", "network", ".", "cpu", "(", ")", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "if", "len", "(", "gpu_ids", ")", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "network", ".", "cuda", "(", "gpu_ids", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.base_model.BaseModel.load_network": [[50, 87], ["os.path.join", "os.path.isfile", "print", "network.load_state_dict", "torch.load", "torch.load", "network.state_dict", "network.load_state_dict", "print", "print", "torch.load.items", "network.state_dict.items", "print", "network.load_state_dict", "torch.load.items", "set", "Set", "sorted", "v.size", "model_dict[].size", "Set.add", "v.size", "pretrained_dict[].size", "k.split"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.models.frnet.load_state_dict", "home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.foivospar_NED.models.frnet.load_state_dict", "home.repos.pwc.inspect_result.foivospar_NED.models.frnet.load_state_dict"], ["", "", "def", "load_network", "(", "self", ",", "network", ",", "network_label", ",", "epoch_label", ",", "save_dir", "=", "''", ")", ":", "\n", "        ", "save_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch_label", ",", "network_label", ")", "\n", "if", "not", "save_dir", ":", "\n", "            ", "save_dir", "=", "self", ".", "save_dir", "\n", "", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "save_filename", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "save_path", ")", ":", "\n", "            ", "print", "(", "'%s not exists yet!'", "%", "save_path", ")", "\n", "if", "'G'", "in", "network_label", ":", "\n", "                ", "raise", "(", "'Generator must exist!'", ")", "\n", "", "", "else", ":", "\n", "            ", "try", ":", "\n", "                ", "network", ".", "load_state_dict", "(", "torch", ".", "load", "(", "save_path", ")", ")", "\n", "", "except", ":", "\n", "                ", "pretrained_dict", "=", "torch", ".", "load", "(", "save_path", ")", "\n", "model_dict", "=", "network", ".", "state_dict", "(", ")", "\n", "try", ":", "\n", "                    ", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", "}", "\n", "network", ".", "load_state_dict", "(", "pretrained_dict", ")", "\n", "print", "(", "'Pretrained network %s has excessive layers; Only loading layers that are used'", "%", "network_label", ")", "\n", "", "except", ":", "\n", "                    ", "print", "(", "'Pretrained network %s has fewer layers; The following are not initialized:'", "%", "network_label", ")", "\n", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", ":", "\n", "                        ", "if", "v", ".", "size", "(", ")", "==", "model_dict", "[", "k", "]", ".", "size", "(", ")", ":", "\n", "                            ", "model_dict", "[", "k", "]", "=", "v", "\n", "\n", "", "", "if", "sys", ".", "version_info", ">=", "(", "3", ",", "0", ")", ":", "\n", "                        ", "not_initialized", "=", "set", "(", ")", "\n", "", "else", ":", "\n", "                        ", "from", "sets", "import", "Set", "\n", "not_initialized", "=", "Set", "(", ")", "\n", "\n", "", "for", "k", ",", "v", "in", "model_dict", ".", "items", "(", ")", ":", "\n", "                        ", "if", "k", "not", "in", "pretrained_dict", "or", "v", ".", "size", "(", ")", "!=", "pretrained_dict", "[", "k", "]", ".", "size", "(", ")", ":", "\n", "                            ", "not_initialized", ".", "add", "(", "k", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "\n", "", "", "print", "(", "sorted", "(", "not_initialized", ")", ")", "\n", "network", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.models.base_model.BaseModel.update_learning_rate": [[88, 90], ["None"], "methods", ["None"], ["", "", "", "", "def", "update_learning_rate", "(", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.foivospar_NED.data.test_dataset.test.__init__": [[16, 22], ["os.path.join", "sorted", "test_dataset.is_exp_file", "range", "os.listdir", "len", "len"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.data.test_dataset.is_exp_file"], ["def", "__init__", "(", "self", ",", "dataroot", ",", "opt", ")", ":", "\n", "        ", "\"\"\"Initialize the dataset.\"\"\"", "\n", "\n", "self", ".", "root", "=", "dataroot", "\n", "paths", "=", "[", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "f", ")", "for", "f", "in", "sorted", "(", "os", ".", "listdir", "(", "self", ".", "root", ")", ")", "if", "is_exp_file", "(", "f", ")", "]", "\n", "self", ".", "seq_paths", "=", "[", "paths", "[", "x", ":", "x", "+", "opt", ".", "seq_len", "]", "for", "x", "in", "range", "(", "0", ",", "len", "(", "paths", ")", ",", "1", ")", "if", "len", "(", "paths", "[", "x", ":", "x", "+", "opt", ".", "seq_len", "]", ")", "==", "opt", ".", "seq_len", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.data.test_dataset.test.__getitem__": [[23, 34], ["torch.FloatTensor", "pickle.load", "params.append", "numpy.concatenate", "open", "numpy.concatenate", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Return one sequence and its corresponding paths.\"\"\"", "\n", "\n", "paths", "=", "self", ".", "seq_paths", "[", "index", "]", "\n", "params", "=", "[", "]", "\n", "for", "pth", "in", "paths", ":", "\n", "            ", "deca", "=", "pickle", ".", "load", "(", "open", "(", "pth", ",", "'rb'", ")", ")", "\n", "params", ".", "append", "(", "np", ".", "concatenate", "(", "(", "deca", "[", "'pose'", "]", "[", ":", ",", "3", ":", "4", "]", ",", "deca", "[", "'exp'", "]", ")", ",", "1", ")", ")", "\n", "", "sequence", "=", "torch", ".", "FloatTensor", "(", "np", ".", "concatenate", "(", "params", ",", "0", ")", ")", "\n", "\n", "return", "sequence", ",", "[", "os", ".", "path", ".", "basename", "(", "p", ")", "for", "p", "in", "paths", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.data.test_dataset.test.__len__": [[36, 39], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the number of sequences.\"\"\"", "\n", "return", "len", "(", "self", ".", "seq_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.data.test_dataset.is_exp_file": [[10, 12], ["any", "filename.endswith"], "function", ["None"], ["def", "is_exp_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "FILE_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.data.test_dataset.get_test_loader": [[40, 50], ["test_dataset.test", "torch.utils.data.DataLoader"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.models.base_model.BaseModel.test"], ["", "", "def", "get_test_loader", "(", "root", ",", "opt", ")", ":", "\n", "    ", "if", "root", "is", "None", ":", "\n", "        ", "return", "None", "\n", "", "else", ":", "\n", "        ", "dataset", "=", "test", "(", "root", ",", "opt", ")", "\n", "return", "data", ".", "DataLoader", "(", "dataset", "=", "dataset", ",", "\n", "batch_size", "=", "opt", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "opt", ".", "nThreads", ",", "\n", "pin_memory", "=", "True", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.foivospar_NED.data.video_dataset.videoDataset.initialize": [[10, 35], ["os.path.join", "renderer.data.image_folder.make_video_dataset", "os.path.join", "renderer.data.image_folder.make_video_dataset", "renderer.data.image_folder.assert_valid_pairs", "os.path.join", "renderer.data.image_folder.make_video_dataset", "renderer.data.image_folder.assert_valid_pairs", "os.path.join", "renderer.data.image_folder.make_video_dataset", "renderer.data.image_folder.assert_valid_pairs", "len", "max", "video_dataset.videoDataset.init_frame_index", "os.path.join", "renderer.data.image_folder.make_video_dataset", "renderer.data.image_folder.assert_valid_pairs", "len"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.data.image_folder.make_video_dataset", "home.repos.pwc.inspect_result.foivospar_NED.data.image_folder.make_video_dataset", "home.repos.pwc.inspect_result.foivospar_NED.data.image_folder.assert_valid_pairs", "home.repos.pwc.inspect_result.foivospar_NED.data.image_folder.make_video_dataset", "home.repos.pwc.inspect_result.foivospar_NED.data.image_folder.assert_valid_pairs", "home.repos.pwc.inspect_result.foivospar_NED.data.image_folder.make_video_dataset", "home.repos.pwc.inspect_result.foivospar_NED.data.image_folder.assert_valid_pairs", "home.repos.pwc.inspect_result.foivospar_NED.data.base_dataset.BaseDataset.init_frame_index", "home.repos.pwc.inspect_result.foivospar_NED.data.image_folder.make_video_dataset", "home.repos.pwc.inspect_result.foivospar_NED.data.image_folder.assert_valid_pairs"], ["    ", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "exp_name", "=", "opt", ".", "exp_name", "if", "not", "opt", ".", "isTrain", "else", "''", "\n", "self", ".", "postfix", "=", "'_aligned'", "if", "not", "opt", ".", "no_align", "else", "''", "\n", "\n", "# Get dataset directories.", "\n", "self", ".", "dir_nmfc_video", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "celeb", ",", "self", ".", "exp_name", ",", "'nmfcs'", "+", "self", ".", "postfix", ")", "\n", "self", ".", "nmfc_video_paths", "=", "make_video_dataset", "(", "self", ".", "dir_nmfc_video", ",", "opt", ".", "max_n_sequences", ")", "\n", "self", ".", "dir_rgb_video", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "celeb", ",", "'faces'", "+", "self", ".", "postfix", ")", "\n", "self", ".", "rgb_video_paths", "=", "make_video_dataset", "(", "self", ".", "dir_rgb_video", ",", "opt", ".", "max_n_sequences", ")", "\n", "assert_valid_pairs", "(", "self", ".", "nmfc_video_paths", ",", "self", ".", "rgb_video_paths", ")", "\n", "if", "opt", ".", "use_shapes", ":", "\n", "            ", "self", ".", "dir_shape_video", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "celeb", ",", "self", ".", "exp_name", ",", "'shapes'", "+", "self", ".", "postfix", ")", "\n", "self", ".", "shape_video_paths", "=", "make_video_dataset", "(", "self", ".", "dir_shape_video", ",", "opt", ".", "max_n_sequences", ")", "\n", "assert_valid_pairs", "(", "self", ".", "nmfc_video_paths", ",", "self", ".", "shape_video_paths", ")", "\n", "", "self", ".", "dir_landmark_video", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "celeb", ",", "self", ".", "exp_name", ",", "'eye_landmarks'", "+", "self", ".", "postfix", ")", "\n", "self", ".", "landmark_video_paths", "=", "make_video_dataset", "(", "self", ".", "dir_landmark_video", ",", "opt", ".", "max_n_sequences", ")", "\n", "assert_valid_pairs", "(", "self", ".", "landmark_video_paths", ",", "self", ".", "rgb_video_paths", ")", "\n", "self", ".", "dir_mask_video", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "celeb", ",", "'masks'", "+", "self", ".", "postfix", ")", "\n", "self", ".", "mask_video_paths", "=", "make_video_dataset", "(", "self", ".", "dir_mask_video", ",", "opt", ".", "max_n_sequences", ")", "\n", "assert_valid_pairs", "(", "self", ".", "mask_video_paths", ",", "self", ".", "rgb_video_paths", ")", "\n", "\n", "self", ".", "n_of_seqs", "=", "len", "(", "self", ".", "nmfc_video_paths", ")", "\n", "self", ".", "seq_len_max", "=", "max", "(", "[", "len", "(", "A", ")", "for", "A", "in", "self", ".", "nmfc_video_paths", "]", ")", "\n", "self", ".", "init_frame_index", "(", "self", ".", "nmfc_video_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.data.video_dataset.videoDataset.__getitem__": [[36, 101], ["video_dataset.videoDataset.update_frame_index", "len", "renderer.data.base_dataset.get_video_parameters", "PIL.Image.open().convert", "renderer.data.base_dataset.get_params", "renderer.data.base_dataset.get_transform", "renderer.data.base_dataset.get_transform", "renderer.data.base_dataset.get_transform", "range", "video_dataset.videoDataset.get_image", "video_dataset.videoDataset.get_image", "video_dataset.videoDataset.get_image", "A_paths.append", "PIL.Image.open", "torch.cat", "torch.cat", "video_dataset.videoDataset.get_image", "torch.cat", "renderer.data.landmarks_to_image.create_eyes_image", "video_dataset.videoDataset.get_mouth_center", "video_dataset.videoDataset.get_eyes_center", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.data.base_dataset.BaseDataset.update_frame_index", "home.repos.pwc.inspect_result.foivospar_NED.data.base_dataset.get_video_parameters", "home.repos.pwc.inspect_result.foivospar_NED.data.base_dataset.get_params", "home.repos.pwc.inspect_result.foivospar_NED.data.base_dataset.get_transform", "home.repos.pwc.inspect_result.foivospar_NED.data.base_dataset.get_transform", "home.repos.pwc.inspect_result.foivospar_NED.data.base_dataset.get_transform", "home.repos.pwc.inspect_result.foivospar_NED.data.video_dataset.videoDataset.get_image", "home.repos.pwc.inspect_result.foivospar_NED.data.video_dataset.videoDataset.get_image", "home.repos.pwc.inspect_result.foivospar_NED.data.video_dataset.videoDataset.get_image", "home.repos.pwc.inspect_result.foivospar_NED.data.video_dataset.videoDataset.get_image", "home.repos.pwc.inspect_result.foivospar_NED.data.landmarks_to_image.create_eyes_image", "home.repos.pwc.inspect_result.foivospar_NED.data.video_dataset.videoDataset.get_mouth_center", "home.repos.pwc.inspect_result.foivospar_NED.data.video_dataset.videoDataset.get_eyes_center"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "# Get sequence paths.", "\n", "        ", "seq_idx", "=", "self", ".", "update_frame_index", "(", "self", ".", "nmfc_video_paths", ",", "index", ")", "\n", "nmfc_video_paths", "=", "self", ".", "nmfc_video_paths", "[", "seq_idx", "]", "\n", "nmfc_len", "=", "len", "(", "nmfc_video_paths", ")", "\n", "rgb_video_paths", "=", "self", ".", "rgb_video_paths", "[", "seq_idx", "]", "\n", "if", "self", ".", "opt", ".", "use_shapes", ":", "\n", "            ", "shape_video_paths", "=", "self", ".", "shape_video_paths", "[", "seq_idx", "]", "\n", "", "landmark_video_paths", "=", "self", ".", "landmark_video_paths", "[", "seq_idx", "]", "\n", "mask_video_paths", "=", "self", ".", "mask_video_paths", "[", "seq_idx", "]", "\n", "\n", "# Get parameters and transforms.", "\n", "n_frames_total", ",", "start_idx", "=", "get_video_parameters", "(", "self", ".", "opt", ",", "self", ".", "n_frames_total", ",", "nmfc_len", ",", "self", ".", "frame_idx", ")", "\n", "first_nmfc_image", "=", "Image", ".", "open", "(", "nmfc_video_paths", "[", "0", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "params", "=", "get_params", "(", "self", ".", "opt", ",", "first_nmfc_image", ".", "size", ")", "\n", "transform_scale_nmfc_video", "=", "get_transform", "(", "self", ".", "opt", ",", "params", ",", "normalize", "=", "False", ",", "\n", "augment", "=", "not", "self", ".", "opt", ".", "no_augment_input", "and", "self", ".", "opt", ".", "isTrain", ")", "# do not normalize nmfc but augment.", "\n", "transform_scale_eye_gaze_video", "=", "transform_scale_nmfc_video", "#get_transform(self.opt, params, normalize=False) # do not normalize eye_gaze.", "\n", "transform_scale_rgb_video", "=", "get_transform", "(", "self", ".", "opt", ",", "params", ")", "\n", "if", "self", ".", "opt", ".", "use_shapes", ":", "\n", "            ", "transform_scale_shape_video", "=", "transform_scale_nmfc_video", "#get_transform(self.opt, params, normalize=False) # do not normalize shape.", "\n", "", "transform_scale_mask_video", "=", "get_transform", "(", "self", ".", "opt", ",", "params", ",", "normalize", "=", "False", ")", "\n", "change_seq", "=", "False", "if", "self", ".", "opt", ".", "isTrain", "else", "self", ".", "change_seq", "\n", "\n", "# Read data.", "\n", "A_paths", "=", "[", "]", "\n", "rgb_video", "=", "nmfc_video", "=", "shape_video", "=", "mask_video", "=", "eye_video", "=", "mouth_centers", "=", "eyes_centers", "=", "0", "\n", "for", "i", "in", "range", "(", "n_frames_total", ")", ":", "\n", "# NMFC", "\n", "            ", "nmfc_video_path", "=", "nmfc_video_paths", "[", "start_idx", "+", "i", "]", "\n", "nmfc_video_i", "=", "self", ".", "get_image", "(", "nmfc_video_path", ",", "transform_scale_nmfc_video", ")", "\n", "nmfc_video", "=", "nmfc_video_i", "if", "i", "==", "0", "else", "torch", ".", "cat", "(", "[", "nmfc_video", ",", "nmfc_video_i", "]", ",", "dim", "=", "0", ")", "\n", "# RGB", "\n", "rgb_video_path", "=", "rgb_video_paths", "[", "start_idx", "+", "i", "]", "\n", "rgb_video_i", "=", "self", ".", "get_image", "(", "rgb_video_path", ",", "transform_scale_rgb_video", ")", "\n", "rgb_video", "=", "rgb_video_i", "if", "i", "==", "0", "else", "torch", ".", "cat", "(", "[", "rgb_video", ",", "rgb_video_i", "]", ",", "dim", "=", "0", ")", "\n", "# SHAPE", "\n", "if", "self", ".", "opt", ".", "use_shapes", ":", "\n", "                ", "shape_video_path", "=", "shape_video_paths", "[", "start_idx", "+", "i", "]", "\n", "shape_video_i", "=", "self", ".", "get_image", "(", "shape_video_path", ",", "transform_scale_shape_video", ")", "\n", "shape_video", "=", "shape_video_i", "if", "i", "==", "0", "else", "torch", ".", "cat", "(", "[", "shape_video", ",", "shape_video_i", "]", ",", "dim", "=", "0", ")", "\n", "# MASK", "\n", "", "mask_video_path", "=", "mask_video_paths", "[", "start_idx", "+", "i", "]", "\n", "mask_video_i", "=", "self", ".", "get_image", "(", "mask_video_path", ",", "transform_scale_mask_video", ")", "\n", "mask_video", "=", "mask_video_i", "if", "i", "==", "0", "else", "torch", ".", "cat", "(", "[", "mask_video", ",", "mask_video_i", "]", ",", "dim", "=", "0", ")", "\n", "A_paths", ".", "append", "(", "nmfc_video_path", ")", "\n", "if", "not", "self", ".", "opt", ".", "no_eye_gaze", ":", "\n", "                ", "landmark_video_path", "=", "landmark_video_paths", "[", "start_idx", "+", "i", "]", "\n", "eye_video_i", "=", "create_eyes_image", "(", "landmark_video_path", ",", "first_nmfc_image", ".", "size", ",", "\n", "transform_scale_eye_gaze_video", ",", "\n", "add_noise", "=", "self", ".", "opt", ".", "isTrain", ")", "\n", "eye_video", "=", "eye_video_i", "if", "i", "==", "0", "else", "torch", ".", "cat", "(", "[", "eye_video", ",", "eye_video_i", "]", ",", "dim", "=", "0", ")", "\n", "", "if", "not", "self", ".", "opt", ".", "no_mouth_D", "and", "self", ".", "opt", ".", "isTrain", ":", "\n", "                ", "landmark_video_path", "=", "landmark_video_paths", "[", "start_idx", "+", "i", "]", "\n", "mouth_centers_i", "=", "self", ".", "get_mouth_center", "(", "landmark_video_path", ")", "\n", "mouth_centers", "=", "mouth_centers_i", "if", "i", "==", "0", "else", "torch", ".", "cat", "(", "[", "mouth_centers", ",", "mouth_centers_i", "]", ",", "dim", "=", "0", ")", "\n", "", "if", "self", ".", "opt", ".", "use_eyes_D", "and", "self", ".", "opt", ".", "isTrain", ":", "\n", "                ", "landmark_video_path", "=", "landmark_video_paths", "[", "start_idx", "+", "i", "]", "\n", "eyes_centers_i", "=", "self", ".", "get_eyes_center", "(", "landmark_video_path", ")", "\n", "eyes_centers", "=", "eyes_centers_i", "if", "i", "==", "0", "else", "torch", ".", "cat", "(", "[", "eyes_centers", ",", "eyes_centers_i", "]", ",", "dim", "=", "0", ")", "\n", "\n", "", "", "return_list", "=", "{", "'nmfc_video'", ":", "nmfc_video", ",", "'rgb_video'", ":", "rgb_video", ",", "'mask_video'", ":", "mask_video", ",", "'shape_video'", ":", "shape_video", ",", "\n", "'eye_video'", ":", "eye_video", ",", "'mouth_centers'", ":", "mouth_centers", ",", "'eyes_centers'", ":", "eyes_centers", ",", "\n", "'change_seq'", ":", "change_seq", ",", "'A_paths'", ":", "A_paths", "}", "\n", "return", "return_list", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.data.video_dataset.videoDataset.get_mouth_center": [[102, 110], ["numpy.loadtxt", "keypoints[].astype", "numpy.median", "mouth_center.astype.astype.astype", "torch.tensor", "RuntimeError", "numpy.expand_dims"], "methods", ["None"], ["", "def", "get_mouth_center", "(", "self", ",", "A_path", ")", ":", "\n", "        ", "keypoints", "=", "np", ".", "loadtxt", "(", "A_path", ",", "delimiter", "=", "' '", ")", "\n", "if", "keypoints", ".", "shape", "[", "0", "]", "==", "14", ":", "\n", "            ", "raise", "(", "RuntimeError", "(", "'No mouth landmarks found in file.'", ")", ")", "\n", "", "pts", "=", "keypoints", "[", "14", ":", ",", ":", "]", ".", "astype", "(", "np", ".", "int32", ")", "# mouth landmarks", "\n", "mouth_center", "=", "np", ".", "median", "(", "pts", ",", "axis", "=", "0", ")", "\n", "mouth_center", "=", "mouth_center", ".", "astype", "(", "np", ".", "int32", ")", "\n", "return", "torch", ".", "tensor", "(", "np", ".", "expand_dims", "(", "mouth_center", ",", "axis", "=", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.data.video_dataset.videoDataset.get_eyes_center": [[111, 117], ["numpy.loadtxt", "keypoints[].astype", "numpy.median", "eyes_center.astype.astype.astype", "torch.tensor", "numpy.expand_dims"], "methods", ["None"], ["", "def", "get_eyes_center", "(", "self", ",", "A_path", ")", ":", "\n", "        ", "keypoints", "=", "np", ".", "loadtxt", "(", "A_path", ",", "delimiter", "=", "' '", ")", "\n", "pts", "=", "keypoints", "[", "0", ":", "14", ",", ":", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", "eyes_center", "=", "np", ".", "median", "(", "pts", ",", "axis", "=", "0", ")", "\n", "eyes_center", "=", "eyes_center", ".", "astype", "(", "np", ".", "int32", ")", "\n", "return", "torch", ".", "tensor", "(", "np", ".", "expand_dims", "(", "eyes_center", ",", "axis", "=", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.data.video_dataset.videoDataset.get_image": [[118, 124], ["PIL.Image.open", "transform_scale", "A_img.convert.convert.convert"], "methods", ["None"], ["", "def", "get_image", "(", "self", ",", "A_path", ",", "transform_scale", ",", "convert_rgb", "=", "True", ")", ":", "\n", "        ", "A_img", "=", "Image", ".", "open", "(", "A_path", ")", "\n", "if", "convert_rgb", ":", "\n", "            ", "A_img", "=", "A_img", ".", "convert", "(", "'RGB'", ")", "\n", "", "A_scaled", "=", "transform_scale", "(", "A_img", ")", "\n", "return", "A_scaled", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.data.video_dataset.videoDataset.__len__": [[125, 130], ["len", "sum"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "opt", ".", "isTrain", ":", "\n", "            ", "return", "len", "(", "self", ".", "nmfc_video_paths", ")", "\n", "", "else", ":", "\n", "            ", "return", "sum", "(", "self", ".", "n_frames_in_sequence", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.data.video_dataset.videoDataset.name": [[131, 133], ["None"], "methods", ["None"], ["", "", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'nmfc'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.foivospar_NED.data.base_dataset.BaseDataset.__init__": [[7, 9], ["torch.Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.datasets.datasets.TestData.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BaseDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.data.base_dataset.BaseDataset.name": [[10, 12], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'BaseDataset'", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.data.base_dataset.BaseDataset.initialize": [[13, 15], ["None"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.data.base_dataset.BaseDataset.init_frame_index": [[16, 25], ["len", "max", "base_dataset.BaseDataset.n_frames_in_sequence.append", "len", "len"], "methods", ["None"], ["", "def", "init_frame_index", "(", "self", ",", "A_paths", ")", ":", "\n", "        ", "self", ".", "seq_idx", "=", "0", "\n", "self", ".", "frame_idx", "=", "-", "1", "if", "not", "self", ".", "opt", ".", "isTrain", "else", "0", "\n", "self", ".", "n_frames_total", "=", "self", ".", "opt", ".", "n_frames_total", "if", "self", ".", "opt", ".", "isTrain", "else", "1", "\n", "self", ".", "n_sequences", "=", "len", "(", "A_paths", ")", "\n", "self", ".", "max_seq_len", "=", "max", "(", "[", "len", "(", "A", ")", "for", "A", "in", "A_paths", "]", ")", "\n", "self", ".", "n_frames_in_sequence", "=", "[", "]", "\n", "for", "path", "in", "A_paths", ":", "\n", "            ", "self", ".", "n_frames_in_sequence", ".", "append", "(", "len", "(", "path", ")", "-", "self", ".", "opt", ".", "n_frames_G", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.data.base_dataset.BaseDataset.update_frame_index": [[26, 38], ["None"], "methods", ["None"], ["", "", "def", "update_frame_index", "(", "self", ",", "A_paths", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "opt", ".", "isTrain", ":", "\n", "            ", "seq_idx", "=", "index", "%", "self", ".", "n_sequences", "\n", "return", "seq_idx", "\n", "", "else", ":", "\n", "            ", "self", ".", "change_seq", "=", "self", ".", "frame_idx", ">=", "self", ".", "n_frames_in_sequence", "[", "self", ".", "seq_idx", "]", "-", "1", "\n", "if", "self", ".", "change_seq", ":", "\n", "                ", "self", ".", "seq_idx", "+=", "1", "\n", "self", ".", "frame_idx", "=", "0", "\n", "", "else", ":", "\n", "                ", "self", ".", "frame_idx", "+=", "1", "\n", "", "return", "self", ".", "seq_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.data.base_dataset.BaseDataset.update_sequence_length": [[39, 44], ["min", "print"], "methods", ["None"], ["", "", "def", "update_sequence_length", "(", "self", ",", "ratio", ")", ":", "\n", "        ", "max_seq_len", "=", "self", ".", "max_seq_len", "-", "self", ".", "opt", ".", "n_frames_G", "+", "1", "\n", "if", "self", ".", "n_frames_total", "<", "max_seq_len", ":", "\n", "            ", "self", ".", "n_frames_total", "=", "min", "(", "max_seq_len", ",", "self", ".", "opt", ".", "n_frames_total", "*", "(", "2", "**", "ratio", ")", ")", "\n", "print", "(", "'Updated sequence length to %d'", "%", "self", ".", "n_frames_total", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.data.base_dataset.get_params": [[45, 56], ["int", "int", "base_dataset.__make_power_2", "base_dataset.__make_power_2", "round", "round"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.data.base_dataset.__make_power_2", "home.repos.pwc.inspect_result.foivospar_NED.data.base_dataset.__make_power_2"], ["", "", "", "def", "get_params", "(", "opt", ",", "size", ")", ":", "\n", "    ", "w", ",", "h", "=", "size", "\n", "if", "opt", ".", "resize", ":", "\n", "        ", "new_h", "=", "new_w", "=", "opt", ".", "loadSize", "\n", "new_w", "=", "int", "(", "round", "(", "new_w", "/", "4", ")", ")", "*", "4", "\n", "new_h", "=", "int", "(", "round", "(", "new_h", "/", "4", ")", ")", "*", "4", "\n", "new_w", ",", "new_h", "=", "__make_power_2", "(", "new_w", ")", ",", "__make_power_2", "(", "new_h", ")", "\n", "", "else", ":", "\n", "        ", "new_h", "=", "h", "\n", "new_w", "=", "w", "\n", "", "return", "{", "'new_size'", ":", "(", "new_w", ",", "new_h", ")", ",", "'ratio'", ":", "(", "new_h", "/", "h", ",", "new_w", "/", "w", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.data.base_dataset.get_transform": [[57, 76], ["torchvision.Compose", "transform_list.append", "transform_list.append", "torchvision.Resize", "torchvision.Lambda", "torchvision.RandomAffine", "torchvision.ToTensor", "torchvision.Normalize", "base_dataset.__scale"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.data.base_dataset.__scale"], ["", "def", "get_transform", "(", "opt", ",", "params", ",", "method", "=", "Image", ".", "BICUBIC", ",", "normalize", "=", "True", ",", "augment", "=", "False", ",", "toTensor", "=", "True", ")", ":", "\n", "    ", "transform_list", "=", "[", "]", "\n", "### resize input image", "\n", "if", "opt", ".", "resize", ":", "\n", "        ", "osize", "=", "[", "opt", ".", "loadSize", ",", "opt", ".", "loadSize", "]", "\n", "transform_list", ".", "append", "(", "transforms", ".", "Resize", "(", "osize", ",", "method", ")", ")", "\n", "", "else", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "__scale", "(", "img", ",", "params", "[", "'new_size'", "]", ",", "method", ")", ")", ")", "\n", "\n", "", "if", "augment", ":", "\n", "        ", "transform_list", "+=", "[", "transforms", ".", "RandomAffine", "(", "degrees", "=", "(", "0", ",", "0", ")", ",", "\n", "translate", "=", "(", "0.01", ",", "0.01", ")", ",", "\n", "scale", "=", "(", "0.99", ",", "1.01", ")", ")", "]", "\n", "", "if", "toTensor", ":", "\n", "        ", "transform_list", "+=", "[", "transforms", ".", "ToTensor", "(", ")", "]", "\n", "", "if", "normalize", ":", "\n", "        ", "transform_list", "+=", "[", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "\n", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", "\n", "", "return", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.data.base_dataset.__scale": [[77, 80], ["img.resize"], "function", ["None"], ["", "def", "__scale", "(", "img", ",", "size", ",", "method", "=", "Image", ".", "BICUBIC", ")", ":", "\n", "    ", "w", ",", "h", "=", "size", "\n", "return", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.data.base_dataset.__make_power_2": [[81, 83], ["int", "round"], "function", ["None"], ["", "def", "__make_power_2", "(", "n", ",", "base", "=", "32.0", ")", ":", "\n", "    ", "return", "int", "(", "round", "(", "n", "/", "base", ")", "*", "base", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.data.base_dataset.get_video_parameters": [[84, 94], ["min", "max", "numpy.random.randint"], "function", ["None"], ["", "def", "get_video_parameters", "(", "opt", ",", "n_frames_total", ",", "cur_seq_len", ",", "index", ")", ":", "\n", "    ", "if", "opt", ".", "isTrain", ":", "\n", "        ", "n_frames_total", "=", "min", "(", "n_frames_total", ",", "cur_seq_len", "-", "opt", ".", "n_frames_G", "+", "1", ")", "\n", "n_frames_total", "+=", "opt", ".", "n_frames_G", "-", "1", "\n", "offset_max", "=", "max", "(", "1", ",", "cur_seq_len", "-", "n_frames_total", "+", "1", ")", "\n", "start_idx", "=", "np", ".", "random", ".", "randint", "(", "offset_max", ")", "\n", "", "else", ":", "\n", "        ", "n_frames_total", "=", "opt", ".", "n_frames_G", "\n", "start_idx", "=", "index", "\n", "", "return", "n_frames_total", ",", "start_idx", "\n", "", ""]], "home.repos.pwc.inspect_result.foivospar_NED.data.custom_dataset_data_loader.BaseDataLoader.__init__": [[10, 12], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.data.custom_dataset_data_loader.BaseDataLoader.initialize": [[13, 16], ["None"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.data.custom_dataset_data_loader.BaseDataLoader.load_data": [[17, 19], ["None"], "methods", ["None"], ["", "def", "load_data", "(", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.data.custom_dataset_data_loader.CustomDatasetDataLoader.name": [[21, 23], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'CustomDatasetDataLoader'", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.data.custom_dataset_data_loader.CustomDatasetDataLoader.initialize": [[24, 34], ["custom_dataset_data_loader.BaseDataLoader.initialize", "custom_dataset_data_loader.CreateDataset", "torch.utils.data.DataLoader", "custom_dataset_data_loader.MySequentialSampler", "int"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.options.train_options.TrainOptions.initialize", "home.repos.pwc.inspect_result.foivospar_NED.data.custom_dataset_data_loader.CreateDataset"], ["", "def", "initialize", "(", "self", ",", "opt", ",", "start_idx", ")", ":", "\n", "        ", "BaseDataLoader", ".", "initialize", "(", "self", ",", "opt", ")", "\n", "self", ".", "dataset", "=", "CreateDataset", "(", "opt", ")", "\n", "self", ".", "sampler", "=", "MySequentialSampler", "(", "self", ".", "dataset", ",", "start_idx", ")", "if", "opt", ".", "serial_batches", "else", "None", "\n", "self", ".", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "self", ".", "dataset", ",", "\n", "batch_size", "=", "opt", ".", "batch_size", ",", "\n", "shuffle", "=", "not", "opt", ".", "serial_batches", ",", "\n", "sampler", "=", "self", ".", "sampler", ",", "\n", "num_workers", "=", "int", "(", "opt", ".", "nThreads", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.data.custom_dataset_data_loader.CustomDatasetDataLoader.load_data": [[35, 37], ["None"], "methods", ["None"], ["", "def", "load_data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.data.custom_dataset_data_loader.CustomDatasetDataLoader.__len__": [[38, 40], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.data.custom_dataset_data_loader.MySequentialSampler.__init__": [[47, 50], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data_source", ",", "start_idx", ")", ":", "\n", "        ", "self", ".", "data_source", "=", "data_source", "\n", "self", ".", "start_idx", "=", "start_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.data.custom_dataset_data_loader.MySequentialSampler.__iter__": [[51, 53], ["iter", "range", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "range", "(", "self", ".", "start_idx", ",", "len", "(", "self", ".", "data_source", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.data.custom_dataset_data_loader.MySequentialSampler.__len__": [[54, 56], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data_source", ")", "-", "self", ".", "start_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.data.custom_dataset_data_loader.CreateDataset": [[3, 8], ["videoDataset", "videoDataset.initialize"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.options.train_options.TrainOptions.initialize"], ["def", "CreateDataset", "(", "opt", ")", ":", "\n", "    ", "from", "data", ".", "video_dataset", "import", "videoDataset", "\n", "dataset", "=", "videoDataset", "(", ")", "\n", "dataset", ".", "initialize", "(", "opt", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.data.custom_dataset_data_loader.CreateDataLoader": [[57, 61], ["custom_dataset_data_loader.CustomDatasetDataLoader", "custom_dataset_data_loader.CustomDatasetDataLoader.initialize"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.options.train_options.TrainOptions.initialize"], ["", "", "def", "CreateDataLoader", "(", "opt", ",", "start_idx", "=", "0", ")", ":", "\n", "    ", "data_loader", "=", "CustomDatasetDataLoader", "(", ")", "\n", "data_loader", ".", "initialize", "(", "opt", ",", "start_idx", ")", "\n", "return", "data_loader", "\n", "", ""]], "home.repos.pwc.inspect_result.foivospar_NED.data.image_folder.is_image_file": [[9, 11], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.data.image_folder.make_video_dataset": [[12, 28], ["os.path.isdir", "sorted", "sorted", "os.walk", "sorted", "image_folder.is_image_file", "len", "images.append", "paths.append", "os.path.join"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.data.image_folder.is_image_file"], ["", "def", "make_video_dataset", "(", "dir", ",", "max_n_sequences", "=", "None", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "if", "dir", ":", "\n", "        ", "assert", "os", ".", "path", ".", "isdir", "(", "dir", ")", ",", "'%s is not a valid directory'", "%", "dir", "\n", "fnames", "=", "sorted", "(", "os", ".", "walk", "(", "dir", ")", ")", "\n", "for", "fname", "in", "sorted", "(", "fnames", ")", ":", "\n", "            ", "paths", "=", "[", "]", "\n", "root", "=", "fname", "[", "0", "]", "\n", "for", "f", "in", "sorted", "(", "fname", "[", "2", "]", ")", ":", "\n", "                ", "if", "is_image_file", "(", "f", ")", ":", "\n", "                    ", "paths", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "f", ")", ")", "\n", "", "", "if", "len", "(", "paths", ")", ">", "0", ":", "\n", "                ", "images", ".", "append", "(", "paths", ")", "\n", "", "", "if", "max_n_sequences", "is", "not", "None", ":", "\n", "            ", "images", "=", "images", "[", ":", "max_n_sequences", "]", "\n", "", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.data.image_folder.assert_valid_pairs": [[29, 34], ["range", "len", "len", "len", "len", "len", "len", "len"], "function", ["None"], ["", "def", "assert_valid_pairs", "(", "A_paths", ",", "B_paths", ")", ":", "\n", "    ", "assert", "len", "(", "A_paths", ")", ">", "0", "and", "len", "(", "B_paths", ")", ">", "0", ",", "'No sequences found.'", "\n", "assert", "len", "(", "A_paths", ")", "==", "len", "(", "B_paths", ")", ",", "'Number of NMFC sequences different than RGB sequences.'", "\n", "for", "i", "in", "range", "(", "len", "(", "A_paths", ")", ")", ":", "\n", "        ", "assert", "len", "(", "A_paths", "[", "i", "]", ")", "==", "len", "(", "B_paths", "[", "i", "]", ")", ",", "'Number of NMFC frames in sequence different than corresponding RGB frames.'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.foivospar_NED.data.landmarks_to_image.func": [[5, 7], ["None"], "function", ["None"], ["def", "func", "(", "x", ",", "a", ",", "b", ",", "c", ")", ":", "\n", "    ", "return", "a", "*", "x", "**", "2", "+", "b", "*", "x", "+", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.data.landmarks_to_image.linear": [[8, 10], ["None"], "function", ["None"], ["", "def", "linear", "(", "x", ",", "a", ",", "b", ")", ":", "\n", "    ", "return", "a", "*", "x", "+", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.data.landmarks_to_image.setColor": [[11, 22], ["len"], "function", ["None"], ["", "def", "setColor", "(", "im", ",", "yy", ",", "xx", ",", "color", ")", ":", "\n", "    ", "if", "len", "(", "im", ".", "shape", ")", "==", "3", ":", "\n", "        ", "im", "[", "yy", ",", "xx", ",", "0", "]", ",", "im", "[", "yy", ",", "xx", ",", "1", "]", ",", "im", "[", "yy", ",", "xx", ",", "2", "]", "=", "color", "[", "0", "]", ",", "color", "[", "1", "]", ",", "color", "[", "2", "]", "\n", "#if (im[yy, xx] == 0).all():", "\n", "#    im[yy, xx, 0], im[yy, xx, 1], im[yy, xx, 2] = color[0], color[1], color[2]", "\n", "#else:", "\n", "#    im[yy, xx, 0] = ((im[yy, xx, 0].astype(float) + color[0]) / 2).astype(np.uint8)", "\n", "#    im[yy, xx, 1] = ((im[yy, xx, 1].astype(float) + color[1]) / 2).astype(np.uint8)", "\n", "#    im[yy, xx, 2] = ((im[yy, xx, 2].astype(float) + color[2]) / 2).astype(np.uint8)", "\n", "", "else", ":", "\n", "        ", "im", "[", "yy", ",", "xx", "]", "=", "color", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.data.landmarks_to_image.drawCircle": [[23, 33], ["range", "range", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.linalg.norm", "landmarks_to_image.setColor", "numpy.array"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.data.landmarks_to_image.setColor"], ["", "", "def", "drawCircle", "(", "im", ",", "x", ",", "y", ",", "rad", ",", "color", "=", "(", "255", ",", "0", ",", "0", ")", ")", ":", "\n", "    ", "if", "x", "is", "not", "None", "and", "x", ".", "size", ":", "\n", "        ", "h", ",", "w", "=", "im", ".", "shape", "[", "0", "]", ",", "im", ".", "shape", "[", "1", "]", "\n", "# edge", "\n", "for", "i", "in", "range", "(", "-", "rad", ",", "rad", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "-", "rad", ",", "rad", ")", ":", "\n", "                ", "yy", "=", "np", ".", "maximum", "(", "0", ",", "np", ".", "minimum", "(", "h", "-", "1", ",", "y", "+", "i", ")", ")", "\n", "xx", "=", "np", ".", "maximum", "(", "0", ",", "np", ".", "minimum", "(", "w", "-", "1", ",", "x", "+", "j", ")", ")", "\n", "if", "np", ".", "linalg", ".", "norm", "(", "np", ".", "array", "(", "[", "i", ",", "j", "]", ")", ")", "<", "rad", ":", "\n", "                    ", "setColor", "(", "im", ",", "yy", ",", "xx", ",", "color", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.data.landmarks_to_image.drawEdge": [[34, 43], ["range", "range", "numpy.maximum", "numpy.maximum", "landmarks_to_image.setColor", "numpy.minimum", "numpy.minimum"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.data.landmarks_to_image.setColor"], ["", "", "", "", "", "def", "drawEdge", "(", "im", ",", "x", ",", "y", ",", "bw", "=", "1", ",", "color", "=", "(", "255", ",", "255", ",", "255", ")", ")", ":", "\n", "    ", "if", "x", "is", "not", "None", "and", "x", ".", "size", ":", "\n", "        ", "h", ",", "w", "=", "im", ".", "shape", "[", "0", "]", ",", "im", ".", "shape", "[", "1", "]", "\n", "# edge", "\n", "for", "i", "in", "range", "(", "-", "bw", ",", "bw", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "-", "bw", ",", "bw", ")", ":", "\n", "                ", "yy", "=", "np", ".", "maximum", "(", "0", ",", "np", ".", "minimum", "(", "h", "-", "1", ",", "y", "+", "i", ")", ")", "\n", "xx", "=", "np", ".", "maximum", "(", "0", ",", "np", ".", "minimum", "(", "w", "-", "1", ",", "x", "+", "j", ")", ")", "\n", "setColor", "(", "im", ",", "yy", ",", "xx", ",", "color", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.data.landmarks_to_image.interpPoints": [[44, 65], ["abs().max", "abs().max", "landmarks_to_image.interpPoints", "numpy.linspace", "np.linspace.astype", "func.astype", "len", "scipy.optimize.curve_fit", "scipy.optimize.curve_fit", "list", "list", "len", "landmarks_to_image.linear", "landmarks_to_image.func", "abs", "abs", "abs", "reversed", "reversed"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.data.landmarks_to_image.interpPoints", "home.repos.pwc.inspect_result.foivospar_NED.data.landmarks_to_image.linear", "home.repos.pwc.inspect_result.foivospar_NED.data.landmarks_to_image.func"], ["", "", "", "", "def", "interpPoints", "(", "x", ",", "y", ")", ":", "\n", "    ", "if", "abs", "(", "x", "[", ":", "-", "1", "]", "-", "x", "[", "1", ":", "]", ")", ".", "max", "(", ")", "<", "abs", "(", "y", "[", ":", "-", "1", "]", "-", "y", "[", "1", ":", "]", ")", ".", "max", "(", ")", ":", "\n", "        ", "curve_y", ",", "curve_x", "=", "interpPoints", "(", "y", ",", "x", ")", "\n", "if", "curve_y", "is", "None", ":", "\n", "            ", "return", "None", ",", "None", "\n", "", "", "else", ":", "\n", "        ", "if", "len", "(", "x", ")", "<", "3", ":", "\n", "            ", "popt", ",", "_", "=", "curve_fit", "(", "linear", ",", "x", ",", "y", ")", "\n", "", "else", ":", "\n", "            ", "popt", ",", "_", "=", "curve_fit", "(", "func", ",", "x", ",", "y", ")", "\n", "if", "abs", "(", "popt", "[", "0", "]", ")", ">", "1", ":", "\n", "                ", "return", "None", ",", "None", "\n", "", "", "if", "x", "[", "0", "]", ">", "x", "[", "-", "1", "]", ":", "\n", "            ", "x", "=", "list", "(", "reversed", "(", "x", ")", ")", "\n", "y", "=", "list", "(", "reversed", "(", "y", ")", ")", "\n", "", "curve_x", "=", "np", ".", "linspace", "(", "x", "[", "0", "]", ",", "x", "[", "-", "1", "]", ",", "(", "x", "[", "-", "1", "]", "-", "x", "[", "0", "]", ")", ")", "\n", "if", "len", "(", "x", ")", "<", "3", ":", "\n", "            ", "curve_y", "=", "linear", "(", "curve_x", ",", "*", "popt", ")", "\n", "", "else", ":", "\n", "            ", "curve_y", "=", "func", "(", "curve_x", ",", "*", "popt", ")", "\n", "", "", "return", "curve_x", ".", "astype", "(", "int", ")", ",", "curve_y", ".", "astype", "(", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.data.landmarks_to_image.create_eyes_image": [[66, 117], ["numpy.zeros", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate().astype", "landmarks_to_image.drawCircle", "landmarks_to_image.drawCircle", "transform_scale", "numpy.loadtxt", "keypoints[].astype", "numpy.mean", "numpy.mean", "int", "int", "PIL.Image.fromarray", "numpy.random.randn", "numpy.random.randn", "numpy.concatenate", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.uint8"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.data.landmarks_to_image.drawCircle", "home.repos.pwc.inspect_result.foivospar_NED.data.landmarks_to_image.drawCircle"], ["", "def", "create_eyes_image", "(", "A_path", ",", "size", ",", "transform_scale", ",", "add_noise", ",", "pts", "=", "None", ")", ":", "\n", "    ", "w", ",", "h", "=", "size", "\n", "eyes_image", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", ",", "3", ")", ",", "np", ".", "int32", ")", "\n", "\n", "if", "pts", "is", "None", ":", "\n", "        ", "keypoints", "=", "np", ".", "loadtxt", "(", "A_path", ",", "delimiter", "=", "' '", ")", "\n", "pts", "=", "keypoints", "[", "0", ":", "14", ",", ":", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "", "left_eye_pts", "=", "np", ".", "concatenate", "(", "[", "pts", "[", "0", ":", "6", ",", ":", "]", ",", "pts", "[", "12", ":", "13", ",", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "right_eye_pts", "=", "np", ".", "concatenate", "(", "[", "pts", "[", "6", ":", "12", ",", ":", "]", ",", "pts", "[", "13", ":", "14", ",", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "\n", "#left_eye_pts[1:3,1] += 1 # dvp video.", "\n", "#left_eye_pts[6,1] += 1 # dvp video.", "\n", "#left_eye_pts[0,0] -= 1 # dvp video.", "\n", "#left_eye_pts[3,0] += 1 # dvp video.", "\n", "#right_eye_pts[0,0] -= 1 # dvp video.", "\n", "#right_eye_pts[3,0] += 1 # dvp video.", "\n", "\n", "if", "add_noise", ":", "\n", "        ", "scale_noise", "=", "2", "*", "np", ".", "random", ".", "randn", "(", "1", ")", "\n", "scale", "=", "1", "+", "scale_noise", "[", "0", "]", "/", "100", "\n", "left_eye_mean", "=", "np", ".", "mean", "(", "left_eye_pts", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "right_eye_mean", "=", "np", ".", "mean", "(", "right_eye_pts", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "left_eye_pts", "=", "(", "left_eye_pts", "-", "left_eye_mean", ")", "*", "scale", "+", "left_eye_mean", "\n", "right_eye_pts", "=", "(", "right_eye_pts", "-", "right_eye_mean", ")", "*", "scale", "+", "right_eye_mean", "\n", "# add noise to eyes distance (x dimension)", "\n", "d_noise", "=", "2", "*", "np", ".", "random", ".", "randn", "(", "2", ")", "\n", "left_eye_pts", "[", ":", ",", "0", "]", "+=", "d_noise", "[", "0", "]", "\n", "right_eye_pts", "[", ":", ",", "0", "]", "-=", "d_noise", "[", "1", "]", "\n", "\n", "", "pts", "=", "np", ".", "concatenate", "(", "[", "left_eye_pts", ",", "right_eye_pts", "]", ",", "axis", "=", "0", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "# Draw", "\n", "'''\n    face_list = [ [[0,1,2,3], [3,4,5,0]], # left eye\n                  [[7,8,9,10], [10,11,12,7]], # right eye\n                 ]\n    for edge_list in face_list:\n            for edge in edge_list:\n                for i in range(0, max(1, len(edge)-1)):\n                    sub_edge = edge[i:i+2]\n                    x, y = pts[sub_edge, 0], pts[sub_edge, 1]\n                    curve_x, curve_y = interpPoints(x, y)\n                    drawEdge(eyes_image, curve_x, curve_y)\n    '''", "\n", "radius_left", "=", "(", "np", ".", "linalg", ".", "norm", "(", "pts", "[", "1", "]", "-", "pts", "[", "4", "]", ")", "+", "np", ".", "linalg", ".", "norm", "(", "pts", "[", "2", "]", "-", "pts", "[", "5", "]", ")", ")", "/", "4", "\n", "radius_right", "=", "(", "np", ".", "linalg", ".", "norm", "(", "pts", "[", "8", "]", "-", "pts", "[", "11", "]", ")", "+", "np", ".", "linalg", ".", "norm", "(", "pts", "[", "9", "]", "-", "pts", "[", "12", "]", ")", ")", "/", "4", "\n", "drawCircle", "(", "eyes_image", ",", "pts", "[", "6", ",", "0", "]", ",", "pts", "[", "6", ",", "1", "]", ",", "int", "(", "radius_left", ")", ")", "\n", "drawCircle", "(", "eyes_image", ",", "pts", "[", "13", ",", "0", "]", ",", "pts", "[", "13", ",", "1", "]", ",", "int", "(", "radius_right", ")", ")", "\n", "eyes_image", "=", "transform_scale", "(", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "eyes_image", ")", ")", ")", "\n", "return", "eyes_image", "\n", "", ""]], "home.repos.pwc.inspect_result.foivospar_NED.options.test_options.TestOptions.initialize": [[4, 11], ["base_options.BaseOptions.initialize", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.options.train_options.TrainOptions.initialize"], ["    ", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "BaseOptions", ".", "initialize", "(", "self", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--which_epoch'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'which epoch to load?'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--celeb'", ",", "type", "=", "str", ",", "default", "=", "'Pacino'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--ref_dirs'", ",", "type", "=", "str", ",", "nargs", "=", "'+'", ",", "help", "=", "'Directories containing input reference sequences'", ",", "default", "=", "None", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--trg_emotions'", ",", "type", "=", "str", ",", "nargs", "=", "'+'", ",", "choices", "=", "[", "'neutral'", ",", "'angry'", ",", "'disgusted'", ",", "'fear'", ",", "'happy'", ",", "'sad'", ",", "'surprised'", ",", "'contempt'", "]", ",", "\n", "help", "=", "'Target emotions'", ",", "default", "=", "None", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--exp_name'", ",", "type", "=", "str", ",", "help", "=", "'Folder name to store the manipulated expression parameters'", ",", "default", "=", "'exp'", ")", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.options.base_options.BaseOptions.__init__": [[7, 10], ["argparse.ArgumentParser"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "self", ".", "initialized", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.options.base_options.BaseOptions.initialize": [[11, 46], ["base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument"], "methods", ["None"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "# model arguments", "\n", "        ", "self", ".", "parser", ".", "add_argument", "(", "'--seq_len'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'Length of exp. coeffs. sequence'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--hop_len'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'Hop Length (set to 1 by default for test)'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--selected_emotions'", ",", "type", "=", "str", ",", "nargs", "=", "'+'", ",", "help", "=", "'Subset (or all) of the 8 basic emotions'", ",", "\n", "default", "=", "[", "'neutral'", ",", "'angry'", ",", "'disgusted'", ",", "'fear'", ",", "'happy'", ",", "'sad'", ",", "'surprised'", "]", ",", "\n", "choices", "=", "[", "'neutral'", ",", "'angry'", ",", "'disgusted'", ",", "'fear'", ",", "'happy'", ",", "'sad'", ",", "'surprised'", ",", "'contempt'", "]", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'input batch size'", ")", "\n", "\n", "# network arch", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--latent_dim'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'Latent vector dimension'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--hidden_dim'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'Hidden dimension of mapping network'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--style_dim'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "help", "=", "'Style code dimension'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--gpu_ids'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "help", "=", "'gpu ids: e.g. 0  0,1,2, 0,2. use -1 for CPU'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--nThreads'", ",", "default", "=", "4", ",", "type", "=", "int", ",", "help", "=", "'# threads for loading data'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--checkpoints_dir'", ",", "type", "=", "str", ",", "default", "=", "'./manipulator_checkpoints'", ",", "help", "=", "'models are saved here'", ")", "\n", "\n", "self", ".", "initialized", "=", "True", "\n", "\n", "", "def", "parse", "(", "self", ",", "save", "=", "True", ")", ":", "\n", "        ", "if", "not", "self", ".", "initialized", ":", "\n", "            ", "self", ".", "initialize", "(", ")", "\n", "", "self", ".", "opt", "=", "self", ".", "parser", ".", "parse_args", "(", ")", "\n", "self", ".", "opt", ".", "isTrain", "=", "self", ".", "isTrain", "# train or test", "\n", "\n", "str_ids", "=", "self", ".", "opt", ".", "gpu_ids", ".", "split", "(", "','", ")", "\n", "self", ".", "opt", ".", "gpu_ids", "=", "[", "]", "\n", "for", "str_id", "in", "str_ids", ":", "\n", "            ", "id", "=", "int", "(", "str_id", ")", "\n", "if", "id", ">=", "0", ":", "\n", "                ", "self", ".", "opt", ".", "gpu_ids", ".", "append", "(", "id", ")", "\n", "\n", "# set gpu ids", "\n", "", "", "if", "len", "(", "self", ".", "opt", ".", "gpu_ids", ")", ">", "0", ":", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.options.base_options.BaseOptions.parse": [[47, 81], ["base_options.BaseOptions.parser.parse_args", "base_options.BaseOptions.opt.gpu_ids.split", "vars", "print", "sorted", "print", "renderer.util.util.mkdirs", "base_options.BaseOptions.initialize", "int", "len", "torch.cuda.set_device", "vars.items", "print", "os.path.join", "base_options.BaseOptions.opt.gpu_ids.append", "open", "opt_file.write", "sorted", "opt_file.write", "vars.items", "opt_file.write", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.utils.config.parse_args", "home.repos.pwc.inspect_result.foivospar_NED.util.util.mkdirs", "home.repos.pwc.inspect_result.foivospar_NED.options.train_options.TrainOptions.initialize"], ["            ", "torch", ".", "cuda", ".", "set_device", "(", "self", ".", "opt", ".", "gpu_ids", "[", "0", "]", ")", "\n", "\n", "", "args", "=", "vars", "(", "self", ".", "opt", ")", "\n", "\n", "print", "(", "'------------ Options -------------'", ")", "\n", "for", "k", ",", "v", "in", "sorted", "(", "args", ".", "items", "(", ")", ")", ":", "\n", "            ", "print", "(", "'%s: %s'", "%", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ")", ")", "\n", "", "print", "(", "'-------------- End ----------------'", ")", "\n", "\n", "# save to the disk", "\n", "mkdirs", "(", "self", ".", "opt", ".", "checkpoints_dir", ")", "\n", "if", "save", ":", "\n", "            ", "file_name", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "checkpoints_dir", ",", "'opt.txt'", ")", "\n", "with", "open", "(", "file_name", ",", "'wt'", ")", "as", "opt_file", ":", "\n", "                ", "opt_file", ".", "write", "(", "'------------ Options -------------\\n'", ")", "\n", "for", "k", ",", "v", "in", "sorted", "(", "args", ".", "items", "(", ")", ")", ":", "\n", "                    ", "opt_file", ".", "write", "(", "'%s: %s\\n'", "%", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ")", ")", "\n", "", "opt_file", ".", "write", "(", "'-------------- End ----------------\\n'", ")", "\n", "", "", "return", "self", ".", "opt", "\n", "", "", ""]], "home.repos.pwc.inspect_result.foivospar_NED.options.train_options.TrainOptions.initialize": [[5, 29], ["base_options.BaseOptions.initialize", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.options.train_options.TrainOptions.initialize"], ["    ", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "BaseOptions", ".", "initialize", "(", "self", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--display_freq'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'frequency of showing training results on screen'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'frequency of showing training results on console'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--save_latest_freq'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'frequency of saving the latest results'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--save_epoch_freq'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'frequency of saving checkpoints at the end of epochs'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--continue_train'", ",", "action", "=", "'store_true'", ",", "help", "=", "'continue training: load the latest model'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--which_epoch'", ",", "type", "=", "str", ",", "default", "=", "'latest'", ",", "help", "=", "'which epoch to load? set to latest to use latest cached model'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--niter'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "'# of epochs at starting learning rate'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--niter_decay'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'# of epochs to linearly decay learning rate to zero'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--beta1'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'momentum term of adam'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.0002", ",", "help", "=", "'initial learning rate for adam'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--gan_mode'", ",", "type", "=", "str", ",", "default", "=", "'ls'", ",", "help", "=", "'(ls|other), with other being a hinge loss'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_html'", ",", "action", "=", "'store_true'", ",", "help", "=", "'do not save intermediate training results to [opt.checkpoints_dir]/web/'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--num_D'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'number of patch scales in each discriminator'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--n_layers_D'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'number of layers in discriminator'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_vgg'", ",", "action", "=", "'store_true'", ",", "help", "=", "'do not use VGG feature matching loss'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_ganFeat'", ",", "action", "=", "'store_true'", ",", "help", "=", "'do not match discriminator features'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lambda_feat'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "help", "=", "'weight for vgg and feature matching'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--max_frames_per_gpu'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'max number of frames to load into one GPU at a time'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--n_frames_backpropagate'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'max number of frames to backpropagate'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--n_frames_total'", ",", "type", "=", "int", ",", "default", "=", "12", ",", "help", "=", "'the overall number of frames in a sequence to train with'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--niter_step'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'how many epochs do we change training sequence length'", ")", "\n", "self", ".", "isTrain", "=", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.foivospar_NED.decalib.deca.DECA.__init__": [[38, 50], ["torch.Module.__init__", "deca.DECA._create_model", "deca.DECA._setup_renderer"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.datasets.datasets.TestData.__init__", "home.repos.pwc.inspect_result.foivospar_NED.decalib.deca.DECA._create_model", "home.repos.pwc.inspect_result.foivospar_NED.decalib.deca.DECA._setup_renderer"], ["    ", "def", "__init__", "(", "self", ",", "config", "=", "None", ",", "device", "=", "'cuda'", ")", ":", "\n", "        ", "super", "(", "DECA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "config", "is", "None", ":", "\n", "            ", "self", ".", "cfg", "=", "cfg", "\n", "", "else", ":", "\n", "            ", "self", ".", "cfg", "=", "config", "\n", "", "self", ".", "device", "=", "device", "\n", "self", ".", "image_size", "=", "self", ".", "cfg", ".", "dataset", ".", "image_size", "\n", "self", ".", "uv_size", "=", "self", ".", "cfg", ".", "model", ".", "uv_size", "\n", "\n", "self", ".", "_create_model", "(", "self", ".", "cfg", ".", "model", ")", "\n", "self", ".", "_setup_renderer", "(", "self", ".", "cfg", ".", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.decalib.deca.DECA._setup_renderer": [[51, 66], ["utils.renderer.SRenderY().to", "[].contiguous", "torch.interpolate().to", "torch.interpolate().to", "torch.interpolate().to", "[].contiguous", "torch.interpolate().to", "torch.interpolate().to", "torch.interpolate().to", "numpy.load", "torch.tensor().float().to", "torch.tensor().float().to", "torch.tensor().float().to", "torch.tensor().float().to", "torch.tensor().float().to", "torch.tensor().float().to", "torch.tensor().float().to", "torch.tensor().float().to", "torch.tensor().float().to", "[].contiguous", "torch.interpolate().to", "torch.interpolate().to", "torch.interpolate().to", "numpy.load().item", "skimage.io.imread().astype", "skimage.io.imread().astype", "skimage.io.imread().astype", "utils.renderer.SRenderY", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.interpolate", "torch.interpolate", "torch.interpolate", "numpy.load", "skimage.io.imread", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "skimage.io.imread", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "skimage.io.imread", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "[].contiguous.transpose"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load"], ["", "def", "_setup_renderer", "(", "self", ",", "model_cfg", ")", ":", "\n", "        ", "self", ".", "render", "=", "SRenderY", "(", "self", ".", "image_size", ",", "obj_filename", "=", "model_cfg", ".", "topology_path", ",", "uv_size", "=", "model_cfg", ".", "uv_size", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "# face mask for rendering details", "\n", "mask", "=", "imread", "(", "model_cfg", ".", "face_eye_mask_path", ")", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.", ";", "mask", "=", "torch", ".", "from_numpy", "(", "mask", "[", ":", ",", ":", ",", "0", "]", ")", "[", "None", ",", "None", ",", ":", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "self", ".", "uv_face_eye_mask", "=", "F", ".", "interpolate", "(", "mask", ",", "[", "model_cfg", ".", "uv_size", ",", "model_cfg", ".", "uv_size", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "mask", "=", "imread", "(", "model_cfg", ".", "face_mask_path", ")", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.", ";", "mask", "=", "torch", ".", "from_numpy", "(", "mask", "[", ":", ",", ":", ",", "0", "]", ")", "[", "None", ",", "None", ",", ":", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "self", ".", "uv_face_mask", "=", "F", ".", "interpolate", "(", "mask", ",", "[", "model_cfg", ".", "uv_size", ",", "model_cfg", ".", "uv_size", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "# displacement correction", "\n", "fixed_dis", "=", "np", ".", "load", "(", "model_cfg", ".", "fixed_displacement_path", ")", "\n", "self", ".", "fixed_uv_dis", "=", "torch", ".", "tensor", "(", "fixed_dis", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "# mean texture", "\n", "mean_texture", "=", "imread", "(", "model_cfg", ".", "mean_tex_path", ")", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.", ";", "mean_texture", "=", "torch", ".", "from_numpy", "(", "mean_texture", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", "[", "None", ",", ":", ",", ":", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "self", ".", "mean_texture", "=", "F", ".", "interpolate", "(", "mean_texture", ",", "[", "model_cfg", ".", "uv_size", ",", "model_cfg", ".", "uv_size", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "# dense mesh template, for save detail mesh", "\n", "self", ".", "dense_template", "=", "np", ".", "load", "(", "model_cfg", ".", "dense_template_path", ",", "allow_pickle", "=", "True", ",", "encoding", "=", "'latin1'", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.decalib.deca.DECA._create_model": [[67, 101], ["models.encoders.ResnetEncoder().to", "models.encoders.ResnetEncoder().to", "models.FLAME.FLAME().to", "deca.DECA.flame.v_template.view", "models.decoders.Generator().to", "os.path.exists", "deca.DECA.E_flame.eval", "deca.DECA.E_detail.eval", "deca.DECA.D_detail.eval", "model_cfg.get", "models.FLAME.FLAMETex().to", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "utils.util.copy_state_dict", "utils.util.copy_state_dict", "utils.util.copy_state_dict", "print", "models.encoders.ResnetEncoder", "models.encoders.ResnetEncoder", "models.FLAME.FLAME", "models.decoders.Generator", "deca.DECA.E_flame.state_dict", "deca.DECA.E_detail.state_dict", "deca.DECA.D_detail.state_dict", "deca.DECA.nmfc.min", "deca.DECA.nmfc.max", "deca.DECA.nmfc.min", "models.FLAME.FLAMETex"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.foivospar_NED.utils.util.copy_state_dict", "home.repos.pwc.inspect_result.foivospar_NED.utils.util.copy_state_dict", "home.repos.pwc.inspect_result.foivospar_NED.utils.util.copy_state_dict"], ["", "def", "_create_model", "(", "self", ",", "model_cfg", ")", ":", "\n", "# set up parameters", "\n", "        ", "self", ".", "n_param", "=", "model_cfg", ".", "n_shape", "+", "model_cfg", ".", "n_tex", "+", "model_cfg", ".", "n_exp", "+", "model_cfg", ".", "n_pose", "+", "model_cfg", ".", "n_cam", "+", "model_cfg", ".", "n_light", "\n", "self", ".", "n_detail", "=", "model_cfg", ".", "n_detail", "\n", "self", ".", "n_cond", "=", "model_cfg", ".", "n_exp", "+", "3", "# exp + jaw pose", "\n", "self", ".", "num_list", "=", "[", "model_cfg", ".", "n_shape", ",", "model_cfg", ".", "n_tex", ",", "model_cfg", ".", "n_exp", ",", "model_cfg", ".", "n_pose", ",", "model_cfg", ".", "n_cam", ",", "model_cfg", ".", "n_light", "]", "\n", "self", ".", "param_dict", "=", "{", "i", ":", "model_cfg", ".", "get", "(", "'n_'", "+", "i", ")", "for", "i", "in", "model_cfg", ".", "param_list", "}", "\n", "\n", "# encoders", "\n", "self", ".", "E_flame", "=", "ResnetEncoder", "(", "outsize", "=", "self", ".", "n_param", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "E_detail", "=", "ResnetEncoder", "(", "outsize", "=", "self", ".", "n_detail", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "# decoders", "\n", "self", ".", "flame", "=", "FLAME", "(", "model_cfg", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "nmfc", "=", "self", ".", "flame", ".", "v_template", ".", "view", "(", "1", ",", "-", "1", ",", "3", ")", "\n", "self", ".", "nmfc", "=", "(", "self", ".", "nmfc", "-", "self", ".", "nmfc", ".", "min", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", ")", "/", "(", "self", ".", "nmfc", ".", "max", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "-", "self", ".", "nmfc", ".", "min", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", ")", "\n", "if", "model_cfg", ".", "use_tex", ":", "\n", "            ", "self", ".", "flametex", "=", "FLAMETex", "(", "model_cfg", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "self", ".", "D_detail", "=", "Generator", "(", "latent_dim", "=", "self", ".", "n_detail", "+", "self", ".", "n_cond", ",", "out_channels", "=", "1", ",", "out_scale", "=", "model_cfg", ".", "max_z", ",", "sample_mode", "=", "'bilinear'", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "# resume model", "\n", "model_path", "=", "self", ".", "cfg", ".", "pretrained_modelpath", "\n", "if", "os", ".", "path", ".", "exists", "(", "model_path", ")", ":", "\n", "            ", "print", "(", "f'trained model found. load {model_path}'", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "self", ".", "checkpoint", "=", "checkpoint", "\n", "util", ".", "copy_state_dict", "(", "self", ".", "E_flame", ".", "state_dict", "(", ")", ",", "checkpoint", "[", "'E_flame'", "]", ")", "\n", "util", ".", "copy_state_dict", "(", "self", ".", "E_detail", ".", "state_dict", "(", ")", ",", "checkpoint", "[", "'E_detail'", "]", ")", "\n", "util", ".", "copy_state_dict", "(", "self", ".", "D_detail", ".", "state_dict", "(", ")", ",", "checkpoint", "[", "'D_detail'", "]", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "f'please check model path: {model_path}'", ")", "\n", "# exit()", "\n", "# eval mode", "\n", "", "self", ".", "E_flame", ".", "eval", "(", ")", "\n", "self", ".", "E_detail", ".", "eval", "(", ")", "\n", "self", ".", "D_detail", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.decalib.deca.DECA.decompose_code": [[102, 115], ["int", "code_dict[].reshape"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.util.util.reshape"], ["", "def", "decompose_code", "(", "self", ",", "code", ",", "num_dict", ")", ":", "\n", "        ", "''' Convert a flattened parameter vector to a dictionary of parameters\n        code_dict.keys() = ['shape', 'tex', 'exp', 'pose', 'cam', 'light']\n        '''", "\n", "code_dict", "=", "{", "}", "\n", "start", "=", "0", "\n", "for", "key", "in", "num_dict", ":", "\n", "            ", "end", "=", "start", "+", "int", "(", "num_dict", "[", "key", "]", ")", "\n", "code_dict", "[", "key", "]", "=", "code", "[", ":", ",", "start", ":", "end", "]", "\n", "start", "=", "end", "\n", "if", "key", "==", "'light'", ":", "\n", "                ", "code_dict", "[", "key", "]", "=", "code_dict", "[", "key", "]", ".", "reshape", "(", "code_dict", "[", "key", "]", ".", "shape", "[", "0", "]", ",", "9", ",", "3", ")", "\n", "", "", "return", "code_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.decalib.deca.DECA.displacement2normal": [[116, 129], ["deca.DECA.render.world2uv().detach", "deca.DECA.render.world2uv().detach", "uv_detail_vertices.permute().reshape", "utils.util.vertex_normals", "uv_detail_normals.reshape().permute.reshape().permute.reshape().permute", "deca.DECA.render.dense_faces.expand", "deca.DECA.render.world2uv", "deca.DECA.render.world2uv", "deca.DECA.detach", "uv_detail_vertices.permute", "uv_detail_normals.reshape().permute.reshape().permute.reshape"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.util.util.reshape", "home.repos.pwc.inspect_result.foivospar_NED.utils.util.vertex_normals", "home.repos.pwc.inspect_result.foivospar_NED.utils.renderer.SRenderY.world2uv", "home.repos.pwc.inspect_result.foivospar_NED.utils.renderer.SRenderY.world2uv", "home.repos.pwc.inspect_result.foivospar_NED.util.util.reshape"], ["", "def", "displacement2normal", "(", "self", ",", "uv_z", ",", "coarse_verts", ",", "coarse_normals", ")", ":", "\n", "        ", "''' Convert displacement map into detail normal map\n        '''", "\n", "batch_size", "=", "uv_z", ".", "shape", "[", "0", "]", "\n", "uv_coarse_vertices", "=", "self", ".", "render", ".", "world2uv", "(", "coarse_verts", ")", ".", "detach", "(", ")", "\n", "uv_coarse_normals", "=", "self", ".", "render", ".", "world2uv", "(", "coarse_normals", ")", ".", "detach", "(", ")", "\n", "\n", "uv_z", "=", "uv_z", "*", "self", ".", "uv_face_eye_mask", "\n", "uv_detail_vertices", "=", "uv_coarse_vertices", "+", "uv_z", "*", "uv_coarse_normals", "+", "self", ".", "fixed_uv_dis", "[", "None", ",", "None", ",", ":", ",", ":", "]", "*", "uv_coarse_normals", ".", "detach", "(", ")", "\n", "dense_vertices", "=", "uv_detail_vertices", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "[", "batch_size", ",", "-", "1", ",", "3", "]", ")", "\n", "uv_detail_normals", "=", "util", ".", "vertex_normals", "(", "dense_vertices", ",", "self", ".", "render", ".", "dense_faces", ".", "expand", "(", "batch_size", ",", "-", "1", ",", "-", "1", ")", ")", "\n", "uv_detail_normals", "=", "uv_detail_normals", ".", "reshape", "(", "[", "batch_size", ",", "uv_coarse_vertices", ".", "shape", "[", "2", "]", ",", "uv_coarse_vertices", ".", "shape", "[", "3", "]", ",", "3", "]", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "return", "uv_detail_normals", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.decalib.deca.DECA.visofp": [[130, 136], ["deca.DECA.flame.seletec_3d68"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.models.FLAME.FLAME.seletec_3d68"], ["", "def", "visofp", "(", "self", ",", "normals", ")", ":", "\n", "        ", "''' visibility of keypoints, based on the normal direction\n        '''", "\n", "normals68", "=", "self", ".", "flame", ".", "seletec_3d68", "(", "normals", ")", "\n", "vis68", "=", "(", "normals68", "[", ":", ",", ":", ",", "2", ":", "]", "<", "0.1", ")", ".", "float", "(", ")", "\n", "return", "vis68", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.decalib.deca.DECA.encode": [[138, 157], ["deca.DECA.decompose_code", "deca.DECA.E_flame", "deca.DECA.E_detail", "posecode[].clone", "utils.rotation_converter.batch_euler2axis", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "deca.DECA.E_flame"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.decalib.deca.DECA.decompose_code", "home.repos.pwc.inspect_result.foivospar_NED.utils.rotation_converter.batch_euler2axis"], ["", "def", "encode", "(", "self", ",", "images", ",", "use_detail", "=", "True", ")", ":", "\n", "        ", "if", "use_detail", ":", "\n", "# use_detail is for training detail model, need to set coarse model as eval mode", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "parameters", "=", "self", ".", "E_flame", "(", "images", ")", "\n", "", "", "else", ":", "\n", "            ", "parameters", "=", "self", ".", "E_flame", "(", "images", ")", "\n", "", "codedict", "=", "self", ".", "decompose_code", "(", "parameters", ",", "self", ".", "param_dict", ")", "\n", "codedict", "[", "'images'", "]", "=", "images", "\n", "if", "use_detail", ":", "\n", "            ", "detailcode", "=", "self", ".", "E_detail", "(", "images", ")", "\n", "codedict", "[", "'detail'", "]", "=", "detailcode", "\n", "", "if", "self", ".", "cfg", ".", "model", ".", "jaw_type", "==", "'euler'", ":", "\n", "            ", "posecode", "=", "codedict", "[", "'pose'", "]", "\n", "euler_jaw_pose", "=", "posecode", "[", ":", ",", "3", ":", "]", ".", "clone", "(", ")", "# x for yaw (open mouth), y for pitch (left ang right), z for roll", "\n", "posecode", "[", ":", ",", "3", ":", "]", "=", "batch_euler2axis", "(", "euler_jaw_pose", ")", "\n", "codedict", "[", "'pose'", "]", "=", "posecode", "\n", "codedict", "[", "'euler_jaw_pose'", "]", "=", "euler_jaw_pose", "\n", "", "return", "codedict", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.decalib.deca.DECA.decode": [[159, 246], ["deca.DECA.flame", "torch.cat.clone", "torch.cat.clone", "torch.cat.clone", "utils.util.batch_orth_proj", "utils.util.batch_orth_proj", "deca.DECA.flametex", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "utils.util.batch_orth_proj", "deca.DECA.render", "deca.DECA.D_detail", "deca.DECA.displacement2normal", "deca.DECA.render.add_SHlight", "deca.DECA.visofp", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "deca.DECA.render.render_shape", "deca.DECA.render.render_shape", "deca.DECA.render.render_colors", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "deca.DECA.D_detail", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.utils.util.batch_orth_proj", "home.repos.pwc.inspect_result.foivospar_NED.utils.util.batch_orth_proj", "home.repos.pwc.inspect_result.foivospar_NED.utils.util.batch_orth_proj", "home.repos.pwc.inspect_result.foivospar_NED.decalib.deca.DECA.displacement2normal", "home.repos.pwc.inspect_result.foivospar_NED.utils.renderer.SRenderY.add_SHlight", "home.repos.pwc.inspect_result.foivospar_NED.decalib.deca.DECA.visofp", "home.repos.pwc.inspect_result.foivospar_NED.utils.renderer.SRenderY.render_shape", "home.repos.pwc.inspect_result.foivospar_NED.utils.renderer.SRenderY.render_shape", "home.repos.pwc.inspect_result.foivospar_NED.utils.renderer.SRenderY.render_colors"], ["", "def", "decode", "(", "self", ",", "codedict", ",", "rendering", "=", "True", ",", "iddict", "=", "None", ",", "vis_lmk", "=", "True", ",", "return_vis", "=", "True", ",", "use_detail", "=", "True", ")", ":", "\n", "#images = codedict['images']", "\n", "        ", "batch_size", "=", "codedict", "[", "'exp'", "]", ".", "shape", "[", "0", "]", "\n", "\n", "## decode", "\n", "verts", ",", "landmarks2d", ",", "landmarks3d", "=", "self", ".", "flame", "(", "shape_params", "=", "codedict", "[", "'shape'", "]", ",", "expression_params", "=", "codedict", "[", "'exp'", "]", ",", "pose_params", "=", "codedict", "[", "'pose'", "]", ")", "\n", "if", "self", ".", "cfg", ".", "model", ".", "use_tex", ":", "\n", "            ", "albedo", "=", "self", ".", "flametex", "(", "codedict", "[", "'tex'", "]", ")", "\n", "", "else", ":", "\n", "            ", "albedo", "=", "torch", ".", "zeros", "(", "[", "batch_size", ",", "3", ",", "self", ".", "uv_size", ",", "self", ".", "uv_size", "]", ",", "device", "=", "images", ".", "device", ")", "\n", "", "landmarks3d_world", "=", "landmarks3d", ".", "clone", "(", ")", "\n", "\n", "## projection", "\n", "landmarks2d", "=", "util", ".", "batch_orth_proj", "(", "landmarks2d", ",", "codedict", "[", "'cam'", "]", ")", "[", ":", ",", ":", ",", ":", "2", "]", ";", "landmarks2d", "[", ":", ",", ":", ",", "1", ":", "]", "=", "-", "landmarks2d", "[", ":", ",", ":", ",", "1", ":", "]", "#; landmarks2d = landmarks2d*self.image_size/2 + self.image_size/2", "\n", "landmarks3d", "=", "util", ".", "batch_orth_proj", "(", "landmarks3d", ",", "codedict", "[", "'cam'", "]", ")", ";", "landmarks3d", "[", ":", ",", ":", ",", "1", ":", "]", "=", "-", "landmarks3d", "[", ":", ",", ":", ",", "1", ":", "]", "#; landmarks3d = landmarks3d*self.image_size/2 + self.image_size/2", "\n", "trans_verts", "=", "util", ".", "batch_orth_proj", "(", "verts", ",", "codedict", "[", "'cam'", "]", ")", ";", "trans_verts", "[", ":", ",", ":", ",", "1", ":", "]", "=", "-", "trans_verts", "[", ":", ",", ":", ",", "1", ":", "]", "\n", "opdict", "=", "{", "\n", "'verts'", ":", "verts", ",", "\n", "'trans_verts'", ":", "trans_verts", ",", "\n", "'landmarks2d'", ":", "landmarks2d", ",", "\n", "'landmarks3d'", ":", "landmarks3d", ",", "\n", "'landmarks3d_world'", ":", "landmarks3d_world", ",", "\n", "}", "\n", "## rendering", "\n", "if", "rendering", ":", "\n", "            ", "ops", "=", "self", ".", "render", "(", "verts", ",", "trans_verts", ",", "albedo", ",", "codedict", "[", "'light'", "]", ")", "\n", "## output", "\n", "opdict", "[", "'grid'", "]", "=", "ops", "[", "'grid'", "]", "\n", "opdict", "[", "'rendered_images'", "]", "=", "ops", "[", "'images'", "]", "\n", "opdict", "[", "'alpha_images'", "]", "=", "ops", "[", "'alpha_images'", "]", "\n", "opdict", "[", "'normal_images'", "]", "=", "ops", "[", "'normal_images'", "]", "\n", "\n", "", "if", "self", ".", "cfg", ".", "model", ".", "use_tex", ":", "\n", "            ", "opdict", "[", "'albedo'", "]", "=", "albedo", "\n", "\n", "", "if", "use_detail", ":", "\n", "            ", "uv_z", "=", "self", ".", "D_detail", "(", "torch", ".", "cat", "(", "[", "codedict", "[", "'pose'", "]", "[", ":", ",", "3", ":", "]", ",", "codedict", "[", "'exp'", "]", ",", "codedict", "[", "'detail'", "]", "]", ",", "dim", "=", "1", ")", ")", "\n", "if", "iddict", "is", "not", "None", ":", "\n", "                ", "uv_z", "=", "self", ".", "D_detail", "(", "torch", ".", "cat", "(", "[", "iddict", "[", "'pose'", "]", "[", ":", ",", "3", ":", "]", ",", "iddict", "[", "'exp'", "]", ",", "codedict", "[", "'detail'", "]", "]", ",", "dim", "=", "1", ")", ")", "\n", "", "uv_detail_normals", "=", "self", ".", "displacement2normal", "(", "uv_z", ",", "verts", ",", "ops", "[", "'normals'", "]", ")", "\n", "uv_shading", "=", "self", ".", "render", ".", "add_SHlight", "(", "uv_detail_normals", ",", "codedict", "[", "'light'", "]", ")", "\n", "uv_texture", "=", "albedo", "*", "uv_shading", "\n", "\n", "opdict", "[", "'uv_texture'", "]", "=", "uv_texture", "\n", "opdict", "[", "'normals'", "]", "=", "ops", "[", "'normals'", "]", "\n", "opdict", "[", "'uv_detail_normals'", "]", "=", "uv_detail_normals", "\n", "opdict", "[", "'displacement_map'", "]", "=", "uv_z", "+", "self", ".", "fixed_uv_dis", "[", "None", ",", "None", ",", ":", ",", ":", "]", "\n", "\n", "", "if", "vis_lmk", ":", "\n", "            ", "landmarks3d_vis", "=", "self", ".", "visofp", "(", "ops", "[", "'transformed_normals'", "]", ")", "#/self.image_size", "\n", "landmarks3d", "=", "torch", ".", "cat", "(", "[", "landmarks3d", ",", "landmarks3d_vis", "]", ",", "dim", "=", "2", ")", "\n", "opdict", "[", "'landmarks3d'", "]", "=", "landmarks3d", "\n", "\n", "", "if", "return_vis", ":", "\n", "## render shape", "\n", "            ", "shape_images", ",", "pos_mask", "=", "self", ".", "render", ".", "render_shape", "(", "verts", ",", "trans_verts", ")", "\n", "detail_normal_images", "=", "F", ".", "grid_sample", "(", "uv_detail_normals", ",", "ops", "[", "'grid'", "]", ",", "align_corners", "=", "False", ")", "*", "ops", "[", "'alpha_images'", "]", "\n", "shape_detail_images", ",", "_", "=", "self", ".", "render", ".", "render_shape", "(", "verts", ",", "trans_verts", ",", "detail_normal_images", "=", "detail_normal_images", ")", "\n", "## render nmfc", "\n", "nmfc_images", "=", "self", ".", "render", ".", "render_colors", "(", "trans_verts", ",", "self", ".", "nmfc", ",", "pos_mask", ")", "\n", "## extract texture", "\n", "## TODO: current resolution 256x256, support higher resolution, and add visibility", "\n", "'''\n            uv_pverts = self.render.world2uv(trans_verts)\n            uv_gt = F.grid_sample(images, uv_pverts.permute(0,2,3,1)[:,:,:,:2], mode='bilinear')\n            if self.cfg.model.use_tex:\n                ## TODO: poisson blending should give better-looking results\n                uv_texture_gt = uv_gt[:,:3,:,:]*self.uv_face_eye_mask + (uv_texture[:,:3,:,:]*(1-self.uv_face_eye_mask))\n            else:\n                uv_texture_gt = uv_gt[:,:3,:,:]*self.uv_face_eye_mask + (torch.ones_like(uv_gt[:,:3,:,:])*(1-self.uv_face_eye_mask)*0.7)\n\n            opdict['uv_texture_gt'] = uv_texture_gt\n            '''", "\n", "visdict", "=", "{", "\n", "#'inputs': images,", "\n", "#'landmarks2d': util.tensor_vis_landmarks(images, landmarks2d),", "\n", "#'landmarks3d': util.tensor_vis_landmarks(images, landmarks3d),", "\n", "'shape_images'", ":", "shape_images", ",", "\n", "'shape_detail_images'", ":", "shape_detail_images", ",", "\n", "'nmfcs'", ":", "nmfc_images", "\n", "}", "\n", "if", "self", ".", "cfg", ".", "model", ".", "use_tex", ":", "\n", "                ", "visdict", "[", "'rendered_images'", "]", "=", "ops", "[", "'images'", "]", "\n", "", "return", "opdict", ",", "visdict", "\n", "\n", "", "else", ":", "\n", "            ", "return", "opdict", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.decalib.deca.DECA.visualize": [[247, 257], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "numpy.minimum().astype", "torchvision.utils.make_grid().detach().cpu", "list", "grids.values", "torch.cat.numpy().transpose().copy", "torch.cat.numpy().transpose().copy", "torch.cat.numpy().transpose().copy", "numpy.minimum", "torchvision.utils.make_grid().detach", "numpy.maximum", "torch.cat.numpy().transpose", "torch.cat.numpy().transpose", "torch.cat.numpy().transpose", "torchvision.utils.make_grid", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat.numpy", "torch.cat.numpy", "torch.cat.numpy"], "methods", ["None"], ["", "", "def", "visualize", "(", "self", ",", "visdict", ",", "size", "=", "None", ")", ":", "\n", "        ", "grids", "=", "{", "}", "\n", "if", "size", "is", "None", ":", "\n", "            ", "size", "=", "self", ".", "image_size", "\n", "", "for", "key", "in", "visdict", ":", "\n", "            ", "grids", "[", "key", "]", "=", "torchvision", ".", "utils", ".", "make_grid", "(", "F", ".", "interpolate", "(", "visdict", "[", "key", "]", ",", "[", "size", ",", "size", "]", ")", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "", "grid", "=", "torch", ".", "cat", "(", "list", "(", "grids", ".", "values", "(", ")", ")", ",", "2", ")", "\n", "grid_image", "=", "(", "grid", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", ".", "copy", "(", ")", "*", "255", ")", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "grid_image", "=", "np", ".", "minimum", "(", "np", ".", "maximum", "(", "grid_image", ",", "0", ")", ",", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "return", "grid_image", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.decalib.deca.DECA.save_obj": [[258, 286], ["[].cpu().numpy", "deca.DECA.render.faces[].cpu().numpy", "utils.util.tensor2image", "deca.DECA.render.raw_uvcoords[].cpu().numpy", "deca.DECA.render.uvfaces[].cpu().numpy", "utils.util.tensor2image", "utils.util.write_obj", "[].cpu().numpy", "[].cpu().numpy().squeeze", "utils.util.upsample_mesh", "utils.util.write_obj", "filename.replace", "[].cpu", "deca.DECA.render.faces[].cpu", "deca.DECA.render.raw_uvcoords[].cpu", "deca.DECA.render.uvfaces[].cpu", "[].cpu", "[].cpu().numpy", "[].cpu"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.utils.util.tensor2image", "home.repos.pwc.inspect_result.foivospar_NED.utils.util.tensor2image", "home.repos.pwc.inspect_result.foivospar_NED.utils.util.write_obj", "home.repos.pwc.inspect_result.foivospar_NED.utils.util.upsample_mesh", "home.repos.pwc.inspect_result.foivospar_NED.utils.util.write_obj"], ["", "def", "save_obj", "(", "self", ",", "filename", ",", "opdict", ")", ":", "\n", "        ", "'''\n        vertices: [nv, 3], tensor\n        texture: [3, h, w], tensor\n        '''", "\n", "i", "=", "0", "\n", "vertices", "=", "opdict", "[", "'verts'", "]", "[", "i", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "faces", "=", "self", ".", "render", ".", "faces", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "texture", "=", "util", ".", "tensor2image", "(", "opdict", "[", "'uv_texture_gt'", "]", "[", "i", "]", ")", "\n", "uvcoords", "=", "self", ".", "render", ".", "raw_uvcoords", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "uvfaces", "=", "self", ".", "render", ".", "uvfaces", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# save coarse mesh, with texture and normal map", "\n", "normal_map", "=", "util", ".", "tensor2image", "(", "opdict", "[", "'uv_detail_normals'", "]", "[", "i", "]", "*", "0.5", "+", "0.5", ")", "\n", "util", ".", "write_obj", "(", "filename", ",", "vertices", ",", "faces", ",", "\n", "texture", "=", "texture", ",", "\n", "uvcoords", "=", "uvcoords", ",", "\n", "uvfaces", "=", "uvfaces", ",", "\n", "normal_map", "=", "normal_map", ")", "\n", "# upsample mesh, save detailed mesh", "\n", "texture", "=", "texture", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "normals", "=", "opdict", "[", "'normals'", "]", "[", "i", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "displacement_map", "=", "opdict", "[", "'displacement_map'", "]", "[", "i", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", "\n", "dense_vertices", ",", "dense_colors", ",", "dense_faces", "=", "util", ".", "upsample_mesh", "(", "vertices", ",", "normals", ",", "faces", ",", "displacement_map", ",", "texture", ",", "self", ".", "dense_template", ")", "\n", "util", ".", "write_obj", "(", "filename", ".", "replace", "(", "'.obj'", ",", "'_detail.obj'", ")", ",", "\n", "dense_vertices", ",", "\n", "dense_faces", ",", "\n", "# colors = dense_colors,", "\n", "inverse_face_order", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.decalib.deca.DECA.run": [[287, 295], ["datasets.datasets.datasets.TestData", "deca.DECA.encode", "deca.DECA.decode", "[].to"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.decalib.deca.DECA.encode", "home.repos.pwc.inspect_result.foivospar_NED.decalib.deca.DECA.decode"], ["", "def", "run", "(", "self", ",", "imagepath", ",", "iscrop", "=", "True", ")", ":", "\n", "        ", "''' An api for running deca given an image path\n        '''", "\n", "testdata", "=", "datasets", ".", "TestData", "(", "imagepath", ")", "\n", "images", "=", "testdata", "[", "0", "]", "[", "'image'", "]", ".", "to", "(", "self", ".", "device", ")", "[", "None", ",", "...", "]", "\n", "codedict", "=", "self", ".", "encode", "(", "images", ")", "\n", "opdict", ",", "visdict", "=", "self", ".", "decode", "(", "codedict", ")", "\n", "return", "codedict", ",", "opdict", ",", "visdict", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.decalib.deca.DECA.model_dict": [[296, 301], ["deca.DECA.E_flame.state_dict", "deca.DECA.E_detail.state_dict", "deca.DECA.D_detail.state_dict"], "methods", ["None"], ["", "def", "model_dict", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "'E_flame'", ":", "self", ".", "E_flame", ".", "state_dict", "(", ")", ",", "\n", "'E_detail'", ":", "self", ".", "E_detail", ".", "state_dict", "(", ")", ",", "\n", "'D_detail'", ":", "self", ".", "D_detail", ".", "state_dict", "(", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.config.get_cfg_defaults": [[115, 120], ["cfg.clone"], "function", ["None"], ["def", "get_cfg_defaults", "(", ")", ":", "\n", "    ", "\"\"\"Get a yacs CfgNode object with default values for my_project.\"\"\"", "\n", "# Return a clone so that the defaults will not be altered", "\n", "# This is for the \"local variable\" use pattern", "\n", "return", "cfg", ".", "clone", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.config.update_cfg": [[121, 124], ["cfg.merge_from_file", "cfg.clone"], "function", ["None"], ["", "def", "update_cfg", "(", "cfg", ",", "cfg_file", ")", ":", "\n", "    ", "cfg", ".", "merge_from_file", "(", "cfg_file", ")", "\n", "return", "cfg", ".", "clone", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.config.parse_args": [[125, 143], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "config.get_cfg_defaults", "config.update_cfg"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.utils.config.parse_args", "home.repos.pwc.inspect_result.foivospar_NED.utils.config.get_cfg_defaults", "home.repos.pwc.inspect_result.foivospar_NED.utils.config.update_cfg"], ["", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--cfg'", ",", "type", "=", "str", ",", "help", "=", "'cfg file path'", ")", "\n", "parser", ".", "add_argument", "(", "'--mode'", ",", "type", "=", "str", ",", "default", "=", "'train'", ",", "help", "=", "'deca mode'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "print", "(", "args", ",", "end", "=", "'\\n\\n'", ")", "\n", "\n", "cfg", "=", "get_cfg_defaults", "(", ")", "\n", "cfg", ".", "cfg_file", "=", "None", "\n", "cfg", ".", "mode", "=", "args", ".", "mode", "\n", "# import ipdb; ipdb.set_trace()", "\n", "if", "args", ".", "cfg", "is", "not", "None", ":", "\n", "        ", "cfg_file", "=", "args", ".", "cfg", "\n", "cfg", "=", "update_cfg", "(", "cfg", ",", "args", ".", "cfg", ")", "\n", "cfg", ".", "cfg_file", "=", "cfg_file", "\n", "\n", "", "return", "cfg", "\n", "", ""]], "home.repos.pwc.inspect_result.foivospar_NED.utils.rotation_converter.rad2deg": [[23, 43], ["torch.is_tensor", "TypeError", "pi.to().type", "type", "pi.to"], "function", ["None"], ["def", "rad2deg", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"Function that converts angles from radians to degrees.\n\n    See :class:`~torchgeometry.RadToDeg` for details.\n\n    Args:\n        tensor (Tensor): Tensor of arbitrary shape.\n\n    Returns:\n        Tensor: Tensor with same shape as input.\n\n    Example:\n        >>> input = tgm.pi * torch.rand(1, 3, 3)\n        >>> output = tgm.rad2deg(input)\n    \"\"\"", "\n", "if", "not", "torch", ".", "is_tensor", "(", "tensor", ")", ":", "\n", "        ", "raise", "TypeError", "(", "\"Input type is not a torch.Tensor. Got {}\"", "\n", ".", "format", "(", "type", "(", "tensor", ")", ")", ")", "\n", "\n", "", "return", "180.", "*", "tensor", "/", "pi", ".", "to", "(", "tensor", ".", "device", ")", ".", "type", "(", "tensor", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.rotation_converter.deg2rad": [[44, 65], ["torch.is_tensor", "TypeError", "pi.to().type", "type", "pi.to"], "function", ["None"], ["", "def", "deg2rad", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"Function that converts angles from degrees to radians.\n\n    See :class:`~torchgeometry.DegToRad` for details.\n\n    Args:\n        tensor (Tensor): Tensor of arbitrary shape.\n\n    Returns:\n        Tensor: Tensor with same shape as input.\n\n    Examples::\n\n        >>> input = 360. * torch.rand(1, 3, 3)\n        >>> output = tgm.deg2rad(input)\n    \"\"\"", "\n", "if", "not", "torch", ".", "is_tensor", "(", "tensor", ")", ":", "\n", "        ", "raise", "TypeError", "(", "\"Input type is not a torch.Tensor. Got {}\"", "\n", ".", "format", "(", "type", "(", "tensor", ")", ")", ")", "\n", "\n", "", "return", "tensor", "*", "pi", ".", "to", "(", "tensor", ".", "device", ")", ".", "type", "(", "tensor", ".", "dtype", ")", "/", "180.", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.rotation_converter.euler_to_quaternion": [[67, 87], ["torch.cos", "torch.sin", "torch.cos", "torch.sin", "torch.cos", "torch.sin", "[].to", "torch.zeros_like", "r.repeat"], "function", ["None"], ["", "def", "euler_to_quaternion", "(", "r", ")", ":", "\n", "    ", "x", "=", "r", "[", "...", ",", "0", "]", "\n", "y", "=", "r", "[", "...", ",", "1", "]", "\n", "z", "=", "r", "[", "...", ",", "2", "]", "\n", "\n", "z", "=", "z", "/", "2.0", "\n", "y", "=", "y", "/", "2.0", "\n", "x", "=", "x", "/", "2.0", "\n", "cz", "=", "torch", ".", "cos", "(", "z", ")", "\n", "sz", "=", "torch", ".", "sin", "(", "z", ")", "\n", "cy", "=", "torch", ".", "cos", "(", "y", ")", "\n", "sy", "=", "torch", ".", "sin", "(", "y", ")", "\n", "cx", "=", "torch", ".", "cos", "(", "x", ")", "\n", "sx", "=", "torch", ".", "sin", "(", "x", ")", "\n", "quaternion", "=", "torch", ".", "zeros_like", "(", "r", ".", "repeat", "(", "1", ",", "2", ")", ")", "[", "...", ",", ":", "4", "]", ".", "to", "(", "r", ".", "device", ")", "\n", "quaternion", "[", "...", ",", "0", "]", "+=", "cx", "*", "cy", "*", "cz", "-", "sx", "*", "sy", "*", "sz", "\n", "quaternion", "[", "...", ",", "1", "]", "+=", "cx", "*", "sy", "*", "sz", "+", "cy", "*", "cz", "*", "sx", "\n", "quaternion", "[", "...", ",", "2", "]", "+=", "cx", "*", "cz", "*", "sy", "-", "sx", "*", "cy", "*", "sz", "\n", "quaternion", "[", "...", ",", "3", "]", "+=", "cx", "*", "cy", "*", "sz", "+", "sx", "*", "cz", "*", "sy", "\n", "return", "quaternion", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.rotation_converter.rotation_matrix_to_quaternion": [[88, 166], ["torch.transpose", "torch.stack", "t0.repeat().t", "torch.stack", "t1.repeat().t", "torch.stack", "t2.repeat().t", "torch.stack", "t3.repeat().t", "mask_c0.view().type_as.view().type_as", "mask_c1.view().type_as.view().type_as", "mask_c2.view().type_as.view().type_as", "mask_c3.view().type_as.view().type_as", "torch.sqrt", "torch.is_tensor", "TypeError", "len", "ValueError", "mask_d0_d1.float", "t0.repeat", "t1.repeat", "t2.repeat", "t3.repeat", "mask_d0_d1.float", "mask_d2.float", "mask_d2.float", "mask_d0_nd1.float", "mask_c0.view().type_as.view", "mask_c1.view().type_as.view", "mask_c2.view().type_as.view", "mask_c3.view().type_as.view", "type"], "function", ["None"], ["", "def", "rotation_matrix_to_quaternion", "(", "rotation_matrix", ",", "eps", "=", "1e-6", ")", ":", "\n", "    ", "\"\"\"Convert 3x4 rotation matrix to 4d quaternion vector\n\n    This algorithm is based on algorithm described in\n    https://github.com/KieranWynn/pyquaternion/blob/master/pyquaternion/quaternion.py#L201\n\n    Args:\n        rotation_matrix (Tensor): the rotation matrix to convert.\n\n    Return:\n        Tensor: the rotation in quaternion\n\n    Shape:\n        - Input: :math:`(N, 3, 4)`\n        - Output: :math:`(N, 4)`\n\n    Example:\n        >>> input = torch.rand(4, 3, 4)  # Nx3x4\n        >>> output = tgm.rotation_matrix_to_quaternion(input)  # Nx4\n    \"\"\"", "\n", "if", "not", "torch", ".", "is_tensor", "(", "rotation_matrix", ")", ":", "\n", "        ", "raise", "TypeError", "(", "\"Input type is not a torch.Tensor. Got {}\"", ".", "format", "(", "\n", "type", "(", "rotation_matrix", ")", ")", ")", "\n", "\n", "", "if", "len", "(", "rotation_matrix", ".", "shape", ")", ">", "3", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"Input size must be a three dimensional tensor. Got {}\"", ".", "format", "(", "\n", "rotation_matrix", ".", "shape", ")", ")", "\n", "# if not rotation_matrix.shape[-2:] == (3, 4):", "\n", "#     raise ValueError(", "\n", "#         \"Input size must be a N x 3 x 4  tensor. Got {}\".format(", "\n", "#             rotation_matrix.shape))", "\n", "\n", "", "rmat_t", "=", "torch", ".", "transpose", "(", "rotation_matrix", ",", "1", ",", "2", ")", "\n", "\n", "mask_d2", "=", "rmat_t", "[", ":", ",", "2", ",", "2", "]", "<", "eps", "\n", "\n", "mask_d0_d1", "=", "rmat_t", "[", ":", ",", "0", ",", "0", "]", ">", "rmat_t", "[", ":", ",", "1", ",", "1", "]", "\n", "mask_d0_nd1", "=", "rmat_t", "[", ":", ",", "0", ",", "0", "]", "<", "-", "rmat_t", "[", ":", ",", "1", ",", "1", "]", "\n", "\n", "t0", "=", "1", "+", "rmat_t", "[", ":", ",", "0", ",", "0", "]", "-", "rmat_t", "[", ":", ",", "1", ",", "1", "]", "-", "rmat_t", "[", ":", ",", "2", ",", "2", "]", "\n", "q0", "=", "torch", ".", "stack", "(", "[", "rmat_t", "[", ":", ",", "1", ",", "2", "]", "-", "rmat_t", "[", ":", ",", "2", ",", "1", "]", ",", "\n", "t0", ",", "rmat_t", "[", ":", ",", "0", ",", "1", "]", "+", "rmat_t", "[", ":", ",", "1", ",", "0", "]", ",", "\n", "rmat_t", "[", ":", ",", "2", ",", "0", "]", "+", "rmat_t", "[", ":", ",", "0", ",", "2", "]", "]", ",", "-", "1", ")", "\n", "t0_rep", "=", "t0", ".", "repeat", "(", "4", ",", "1", ")", ".", "t", "(", ")", "\n", "\n", "t1", "=", "1", "-", "rmat_t", "[", ":", ",", "0", ",", "0", "]", "+", "rmat_t", "[", ":", ",", "1", ",", "1", "]", "-", "rmat_t", "[", ":", ",", "2", ",", "2", "]", "\n", "q1", "=", "torch", ".", "stack", "(", "[", "rmat_t", "[", ":", ",", "2", ",", "0", "]", "-", "rmat_t", "[", ":", ",", "0", ",", "2", "]", ",", "\n", "rmat_t", "[", ":", ",", "0", ",", "1", "]", "+", "rmat_t", "[", ":", ",", "1", ",", "0", "]", ",", "\n", "t1", ",", "rmat_t", "[", ":", ",", "1", ",", "2", "]", "+", "rmat_t", "[", ":", ",", "2", ",", "1", "]", "]", ",", "-", "1", ")", "\n", "t1_rep", "=", "t1", ".", "repeat", "(", "4", ",", "1", ")", ".", "t", "(", ")", "\n", "\n", "t2", "=", "1", "-", "rmat_t", "[", ":", ",", "0", ",", "0", "]", "-", "rmat_t", "[", ":", ",", "1", ",", "1", "]", "+", "rmat_t", "[", ":", ",", "2", ",", "2", "]", "\n", "q2", "=", "torch", ".", "stack", "(", "[", "rmat_t", "[", ":", ",", "0", ",", "1", "]", "-", "rmat_t", "[", ":", ",", "1", ",", "0", "]", ",", "\n", "rmat_t", "[", ":", ",", "2", ",", "0", "]", "+", "rmat_t", "[", ":", ",", "0", ",", "2", "]", ",", "\n", "rmat_t", "[", ":", ",", "1", ",", "2", "]", "+", "rmat_t", "[", ":", ",", "2", ",", "1", "]", ",", "t2", "]", ",", "-", "1", ")", "\n", "t2_rep", "=", "t2", ".", "repeat", "(", "4", ",", "1", ")", ".", "t", "(", ")", "\n", "\n", "t3", "=", "1", "+", "rmat_t", "[", ":", ",", "0", ",", "0", "]", "+", "rmat_t", "[", ":", ",", "1", ",", "1", "]", "+", "rmat_t", "[", ":", ",", "2", ",", "2", "]", "\n", "q3", "=", "torch", ".", "stack", "(", "[", "t3", ",", "rmat_t", "[", ":", ",", "1", ",", "2", "]", "-", "rmat_t", "[", ":", ",", "2", ",", "1", "]", ",", "\n", "rmat_t", "[", ":", ",", "2", ",", "0", "]", "-", "rmat_t", "[", ":", ",", "0", ",", "2", "]", ",", "\n", "rmat_t", "[", ":", ",", "0", ",", "1", "]", "-", "rmat_t", "[", ":", ",", "1", ",", "0", "]", "]", ",", "-", "1", ")", "\n", "t3_rep", "=", "t3", ".", "repeat", "(", "4", ",", "1", ")", ".", "t", "(", ")", "\n", "\n", "mask_c0", "=", "mask_d2", "*", "mask_d0_d1", ".", "float", "(", ")", "\n", "mask_c1", "=", "mask_d2", "*", "(", "1", "-", "mask_d0_d1", ".", "float", "(", ")", ")", "\n", "mask_c2", "=", "(", "1", "-", "mask_d2", ".", "float", "(", ")", ")", "*", "mask_d0_nd1", "\n", "mask_c3", "=", "(", "1", "-", "mask_d2", ".", "float", "(", ")", ")", "*", "(", "1", "-", "mask_d0_nd1", ".", "float", "(", ")", ")", "\n", "mask_c0", "=", "mask_c0", ".", "view", "(", "-", "1", ",", "1", ")", ".", "type_as", "(", "q0", ")", "\n", "mask_c1", "=", "mask_c1", ".", "view", "(", "-", "1", ",", "1", ")", ".", "type_as", "(", "q1", ")", "\n", "mask_c2", "=", "mask_c2", ".", "view", "(", "-", "1", ",", "1", ")", ".", "type_as", "(", "q2", ")", "\n", "mask_c3", "=", "mask_c3", ".", "view", "(", "-", "1", ",", "1", ")", ".", "type_as", "(", "q3", ")", "\n", "\n", "q", "=", "q0", "*", "mask_c0", "+", "q1", "*", "mask_c1", "+", "q2", "*", "mask_c2", "+", "q3", "*", "mask_c3", "\n", "q", "/=", "torch", ".", "sqrt", "(", "t0_rep", "*", "mask_c0", "+", "t1_rep", "*", "mask_c1", "+", "# noqa", "\n", "t2_rep", "*", "mask_c2", "+", "t3_rep", "*", "mask_c3", ")", "# noqa", "\n", "q", "*=", "0.5", "\n", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.rotation_converter.angle_axis_to_quaternion": [[178, 226], ["torch.sqrt", "torch.ones_like", "torch.where", "torch.where", "torch.zeros_like", "torch.cat", "torch.is_tensor", "TypeError", "ValueError", "torch.sin", "torch.cos", "type"], "function", ["None"], ["", "def", "angle_axis_to_quaternion", "(", "angle_axis", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"Convert an angle axis to a quaternion.\n\n    Adapted from ceres C++ library: ceres-solver/include/ceres/rotation.h\n\n    Args:\n        angle_axis (torch.Tensor): tensor with angle axis.\n\n    Return:\n        torch.Tensor: tensor with quaternion.\n\n    Shape:\n        - Input: :math:`(*, 3)` where `*` means, any number of dimensions\n        - Output: :math:`(*, 4)`\n\n    Example:\n        >>> angle_axis = torch.rand(2, 4)  # Nx4\n        >>> quaternion = tgm.angle_axis_to_quaternion(angle_axis)  # Nx3\n    \"\"\"", "\n", "if", "not", "torch", ".", "is_tensor", "(", "angle_axis", ")", ":", "\n", "        ", "raise", "TypeError", "(", "\"Input type is not a torch.Tensor. Got {}\"", ".", "format", "(", "\n", "type", "(", "angle_axis", ")", ")", ")", "\n", "\n", "", "if", "not", "angle_axis", ".", "shape", "[", "-", "1", "]", "==", "3", ":", "\n", "        ", "raise", "ValueError", "(", "\"Input must be a tensor of shape Nx3 or 3. Got {}\"", "\n", ".", "format", "(", "angle_axis", ".", "shape", ")", ")", "\n", "# unpack input and compute conversion", "\n", "", "a0", ":", "torch", ".", "Tensor", "=", "angle_axis", "[", "...", ",", "0", ":", "1", "]", "\n", "a1", ":", "torch", ".", "Tensor", "=", "angle_axis", "[", "...", ",", "1", ":", "2", "]", "\n", "a2", ":", "torch", ".", "Tensor", "=", "angle_axis", "[", "...", ",", "2", ":", "3", "]", "\n", "theta_squared", ":", "torch", ".", "Tensor", "=", "a0", "*", "a0", "+", "a1", "*", "a1", "+", "a2", "*", "a2", "\n", "\n", "theta", ":", "torch", ".", "Tensor", "=", "torch", ".", "sqrt", "(", "theta_squared", ")", "\n", "half_theta", ":", "torch", ".", "Tensor", "=", "theta", "*", "0.5", "\n", "\n", "mask", ":", "torch", ".", "Tensor", "=", "theta_squared", ">", "0.0", "\n", "ones", ":", "torch", ".", "Tensor", "=", "torch", ".", "ones_like", "(", "half_theta", ")", "\n", "\n", "k_neg", ":", "torch", ".", "Tensor", "=", "0.5", "*", "ones", "\n", "k_pos", ":", "torch", ".", "Tensor", "=", "torch", ".", "sin", "(", "half_theta", ")", "/", "theta", "\n", "k", ":", "torch", ".", "Tensor", "=", "torch", ".", "where", "(", "mask", ",", "k_pos", ",", "k_neg", ")", "\n", "w", ":", "torch", ".", "Tensor", "=", "torch", ".", "where", "(", "mask", ",", "torch", ".", "cos", "(", "half_theta", ")", ",", "ones", ")", "\n", "\n", "quaternion", ":", "torch", ".", "Tensor", "=", "torch", ".", "zeros_like", "(", "angle_axis", ")", "\n", "quaternion", "[", "...", ",", "0", ":", "1", "]", "+=", "a0", "*", "k", "\n", "quaternion", "[", "...", ",", "1", ":", "2", "]", "+=", "a1", "*", "k", "\n", "quaternion", "[", "...", ",", "2", ":", "3", "]", "+=", "a2", "*", "k", "\n", "return", "torch", ".", "cat", "(", "[", "w", ",", "quaternion", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.rotation_converter.quaternion_to_rotation_matrix": [[228, 249], ["quat.size", "torch.stack().view", "norm_quat.norm", "w.pow", "x.pow", "y.pow", "z.pow", "torch.stack"], "function", ["None"], ["", "def", "quaternion_to_rotation_matrix", "(", "quat", ")", ":", "\n", "    ", "\"\"\"Convert quaternion coefficients to rotation matrix.\n    Args:\n        quat: size = [B, 4] 4 <===>(w, x, y, z)\n    Returns:\n        Rotation matrix corresponding to the quaternion -- size = [B, 3, 3]\n    \"\"\"", "\n", "norm_quat", "=", "quat", "\n", "norm_quat", "=", "norm_quat", "/", "norm_quat", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "w", ",", "x", ",", "y", ",", "z", "=", "norm_quat", "[", ":", ",", "0", "]", ",", "norm_quat", "[", ":", ",", "1", "]", ",", "norm_quat", "[", ":", ",", "2", "]", ",", "norm_quat", "[", ":", ",", "3", "]", "\n", "\n", "B", "=", "quat", ".", "size", "(", "0", ")", "\n", "\n", "w2", ",", "x2", ",", "y2", ",", "z2", "=", "w", ".", "pow", "(", "2", ")", ",", "x", ".", "pow", "(", "2", ")", ",", "y", ".", "pow", "(", "2", ")", ",", "z", ".", "pow", "(", "2", ")", "\n", "wx", ",", "wy", ",", "wz", "=", "w", "*", "x", ",", "w", "*", "y", ",", "w", "*", "z", "\n", "xy", ",", "xz", ",", "yz", "=", "x", "*", "y", ",", "x", "*", "z", ",", "y", "*", "z", "\n", "\n", "rotMat", "=", "torch", ".", "stack", "(", "[", "w2", "+", "x2", "-", "y2", "-", "z2", ",", "2", "*", "xy", "-", "2", "*", "wz", ",", "2", "*", "wy", "+", "2", "*", "xz", ",", "\n", "2", "*", "wz", "+", "2", "*", "xy", ",", "w2", "-", "x2", "+", "y2", "-", "z2", ",", "2", "*", "yz", "-", "2", "*", "wx", ",", "\n", "2", "*", "xz", "-", "2", "*", "wy", ",", "2", "*", "wx", "+", "2", "*", "yz", ",", "w2", "-", "x2", "-", "y2", "+", "z2", "]", ",", "dim", "=", "1", ")", ".", "view", "(", "B", ",", "3", ",", "3", ")", "\n", "return", "rotMat", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.rotation_converter.quaternion_to_angle_axis": [[250, 298], ["torch.sqrt", "torch.where", "torch.is_tensor", "TypeError", "ValueError", "torch.where", "torch.ones_like().to", "torch.zeros_like().to", "torch.atan2", "torch.atan2", "type", "torch.ones_like", "torch.zeros_like"], "function", ["None"], ["", "def", "quaternion_to_angle_axis", "(", "quaternion", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "\"\"\"Convert quaternion vector to angle axis of rotation. TODO: CORRECT\n\n    Adapted from ceres C++ library: ceres-solver/include/ceres/rotation.h\n\n    Args:\n        quaternion (torch.Tensor): tensor with quaternions.\n\n    Return:\n        torch.Tensor: tensor with angle axis of rotation.\n\n    Shape:\n        - Input: :math:`(*, 4)` where `*` means, any number of dimensions\n        - Output: :math:`(*, 3)`\n\n    Example:\n        >>> quaternion = torch.rand(2, 4)  # Nx4\n        >>> angle_axis = tgm.quaternion_to_angle_axis(quaternion)  # Nx3\n    \"\"\"", "\n", "if", "not", "torch", ".", "is_tensor", "(", "quaternion", ")", ":", "\n", "        ", "raise", "TypeError", "(", "\"Input type is not a torch.Tensor. Got {}\"", ".", "format", "(", "\n", "type", "(", "quaternion", ")", ")", ")", "\n", "\n", "", "if", "not", "quaternion", ".", "shape", "[", "-", "1", "]", "==", "4", ":", "\n", "        ", "raise", "ValueError", "(", "\"Input must be a tensor of shape Nx4 or 4. Got {}\"", "\n", ".", "format", "(", "quaternion", ".", "shape", ")", ")", "\n", "# unpack input and compute conversion", "\n", "", "q1", ":", "torch", ".", "Tensor", "=", "quaternion", "[", "...", ",", "1", "]", "\n", "q2", ":", "torch", ".", "Tensor", "=", "quaternion", "[", "...", ",", "2", "]", "\n", "q3", ":", "torch", ".", "Tensor", "=", "quaternion", "[", "...", ",", "3", "]", "\n", "sin_squared_theta", ":", "torch", ".", "Tensor", "=", "q1", "*", "q1", "+", "q2", "*", "q2", "+", "q3", "*", "q3", "\n", "\n", "sin_theta", ":", "torch", ".", "Tensor", "=", "torch", ".", "sqrt", "(", "sin_squared_theta", ")", "\n", "cos_theta", ":", "torch", ".", "Tensor", "=", "quaternion", "[", "...", ",", "0", "]", "\n", "two_theta", ":", "torch", ".", "Tensor", "=", "2.0", "*", "torch", ".", "where", "(", "\n", "cos_theta", "<", "0.0", ",", "\n", "torch", ".", "atan2", "(", "-", "sin_theta", ",", "-", "cos_theta", ")", ",", "\n", "torch", ".", "atan2", "(", "sin_theta", ",", "cos_theta", ")", ")", "\n", "\n", "k_pos", ":", "torch", ".", "Tensor", "=", "two_theta", "/", "sin_theta", "\n", "k_neg", ":", "torch", ".", "Tensor", "=", "2.0", "*", "torch", ".", "ones_like", "(", "sin_theta", ")", ".", "to", "(", "quaternion", ".", "device", ")", "\n", "k", ":", "torch", ".", "Tensor", "=", "torch", ".", "where", "(", "sin_squared_theta", ">", "0.0", ",", "k_pos", ",", "k_neg", ")", "\n", "\n", "angle_axis", ":", "torch", ".", "Tensor", "=", "torch", ".", "zeros_like", "(", "quaternion", ")", ".", "to", "(", "quaternion", ".", "device", ")", "[", "...", ",", ":", "3", "]", "\n", "angle_axis", "[", "...", ",", "0", "]", "+=", "q1", "*", "k", "\n", "angle_axis", "[", "...", ",", "1", "]", "+=", "q2", "*", "k", "\n", "angle_axis", "[", "...", ",", "2", "]", "+=", "q3", "*", "k", "\n", "return", "angle_axis", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.rotation_converter.batch_euler2axis": [[300, 302], ["rotation_converter.quaternion_to_angle_axis", "rotation_converter.euler_to_quaternion"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.utils.rotation_converter.quaternion_to_angle_axis", "home.repos.pwc.inspect_result.foivospar_NED.utils.rotation_converter.euler_to_quaternion"], ["", "def", "batch_euler2axis", "(", "r", ")", ":", "\n", "    ", "return", "quaternion_to_angle_axis", "(", "euler_to_quaternion", "(", "r", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.rotation_converter.batch_euler2matrix": [[303, 305], ["rotation_converter.quaternion_to_rotation_matrix", "rotation_converter.euler_to_quaternion"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.utils.rotation_converter.quaternion_to_rotation_matrix", "home.repos.pwc.inspect_result.foivospar_NED.utils.rotation_converter.euler_to_quaternion"], ["", "def", "batch_euler2matrix", "(", "r", ")", ":", "\n", "    ", "return", "quaternion_to_rotation_matrix", "(", "euler_to_quaternion", "(", "r", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.rotation_converter.batch_matrix2euler": [[306, 314], ["torch.sqrt", "torch.atan2"], "function", ["None"], ["", "def", "batch_matrix2euler", "(", "rot_mats", ")", ":", "\n", "# Calculates rotation matrix to euler angles", "\n", "# Careful for extreme cases of eular angles like [0.0, pi, 0.0]", "\n", "### only y?", "\n", "# TODO:", "\n", "    ", "sy", "=", "torch", ".", "sqrt", "(", "rot_mats", "[", ":", ",", "0", ",", "0", "]", "*", "rot_mats", "[", ":", ",", "0", ",", "0", "]", "+", "\n", "rot_mats", "[", ":", ",", "1", ",", "0", "]", "*", "rot_mats", "[", ":", ",", "1", ",", "0", "]", ")", "\n", "return", "torch", ".", "atan2", "(", "-", "rot_mats", "[", ":", ",", "2", ",", "0", "]", ",", "sy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.rotation_converter.batch_matrix2axis": [[315, 317], ["rotation_converter.quaternion_to_angle_axis", "rotation_converter.rotation_matrix_to_quaternion"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.utils.rotation_converter.quaternion_to_angle_axis", "home.repos.pwc.inspect_result.foivospar_NED.utils.rotation_converter.rotation_matrix_to_quaternion"], ["", "def", "batch_matrix2axis", "(", "rot_mats", ")", ":", "\n", "    ", "return", "quaternion_to_angle_axis", "(", "rotation_matrix_to_quaternion", "(", "rot_mats", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.rotation_converter.batch_axis2matrix": [[318, 324], ["rotation_converter.quaternion_to_rotation_matrix", "rotation_converter.angle_axis_to_quaternion"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.utils.rotation_converter.quaternion_to_rotation_matrix", "home.repos.pwc.inspect_result.foivospar_NED.utils.rotation_converter.angle_axis_to_quaternion"], ["", "def", "batch_axis2matrix", "(", "theta", ")", ":", "\n", "# angle axis to rotation matrix", "\n", "# theta N x 3", "\n", "# return quat2mat(quat)", "\n", "# batch_rodrigues", "\n", "    ", "return", "quaternion_to_rotation_matrix", "(", "angle_axis_to_quaternion", "(", "theta", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.rotation_converter.batch_axis2euler": [[328, 330], ["rot_mat_to_euler", "rotation_converter.batch_rodrigues"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.models.lbs.rot_mat_to_euler", "home.repos.pwc.inspect_result.foivospar_NED.utils.rotation_converter.batch_rodrigues"], ["", "def", "batch_axis2euler", "(", "r", ")", ":", "\n", "    ", "return", "rot_mat_to_euler", "(", "batch_rodrigues", "(", "r", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.rotation_converter.batch_orth_proj": [[332, 341], ["camera.clone().view.clone().view", "torch.cat", "camera.clone().view.clone"], "function", ["None"], ["", "def", "batch_orth_proj", "(", "X", ",", "camera", ")", ":", "\n", "    ", "'''\n        X is N x num_pquaternion_to_angle_axisoints x 3\n    '''", "\n", "camera", "=", "camera", ".", "clone", "(", ")", ".", "view", "(", "-", "1", ",", "1", ",", "3", ")", "\n", "X_trans", "=", "X", "[", ":", ",", ":", ",", ":", "2", "]", "+", "camera", "[", ":", ",", ":", ",", "1", ":", "]", "\n", "X_trans", "=", "torch", ".", "cat", "(", "[", "X_trans", ",", "X", "[", ":", ",", ":", ",", "2", ":", "]", "]", ",", "2", ")", "\n", "Xn", "=", "(", "camera", "[", ":", ",", ":", ",", "0", ":", "1", "]", "*", "X_trans", ")", "\n", "return", "Xn", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.rotation_converter.batch_rodrigues": [[342, 375], ["torch.norm", "torch.unsqueeze", "torch.unsqueeze", "torch.split", "torch.zeros", "torch.zeros", "torch.cat().view", "torch.eye().unsqueeze", "torch.cos", "torch.sin", "torch.cat", "torch.eye", "torch.bmm"], "function", ["None"], ["", "def", "batch_rodrigues", "(", "rot_vecs", ",", "epsilon", "=", "1e-8", ",", "dtype", "=", "torch", ".", "float32", ")", ":", "\n", "    ", "'''  same as batch_matrix2axis\n    Calculates the rotation matrices for a batch of rotation vectors\n        Parameters\n        ----------\n        rot_vecs: torch.tensor Nx3\n            array of N axis-angle vectors\n        Returns\n        -------\n        R: torch.tensor Nx3x3\n            The rotation matrices for the given axis-angle parameters\n    '''", "\n", "\n", "batch_size", "=", "rot_vecs", ".", "shape", "[", "0", "]", "\n", "device", "=", "rot_vecs", ".", "device", "\n", "\n", "angle", "=", "torch", ".", "norm", "(", "rot_vecs", "+", "1e-8", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "rot_dir", "=", "rot_vecs", "/", "angle", "\n", "\n", "cos", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "cos", "(", "angle", ")", ",", "dim", "=", "1", ")", "\n", "sin", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "sin", "(", "angle", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# Bx1 arrays", "\n", "rx", ",", "ry", ",", "rz", "=", "torch", ".", "split", "(", "rot_dir", ",", "1", ",", "dim", "=", "1", ")", "\n", "K", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "3", ",", "3", ")", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "\n", "zeros", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "1", ")", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "K", "=", "torch", ".", "cat", "(", "[", "zeros", ",", "-", "rz", ",", "ry", ",", "rz", ",", "zeros", ",", "-", "rx", ",", "-", "ry", ",", "rx", ",", "zeros", "]", ",", "dim", "=", "1", ")", ".", "view", "(", "(", "batch_size", ",", "3", ",", "3", ")", ")", "\n", "\n", "ident", "=", "torch", ".", "eye", "(", "3", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "rot_mat", "=", "ident", "+", "sin", "*", "K", "+", "(", "1", "-", "cos", ")", "*", "torch", ".", "bmm", "(", "K", ",", "K", ")", "\n", "return", "rot_mat", "\n", "", ""]], "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.VGG19FeatLayer.__init__": [[340, 345], ["torch.Module.__init__", "torchvision.vgg19().features.eval().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torchvision.vgg19().features.eval", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torchvision.vgg19"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.datasets.datasets.TestData.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "VGG19FeatLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vgg19", "=", "models", ".", "vgg19", "(", "pretrained", "=", "True", ")", ".", "features", ".", "eval", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "mean", "=", "torch", ".", "tensor", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", ".", "cuda", "(", ")", "\n", "self", ".", "std", "=", "torch", ".", "tensor", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.VGG19FeatLayer.forward": [[346, 372], ["lossfunc.VGG19FeatLayer.vgg19.children", "isinstance", "torch.ReLU.", "isinstance", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "isinstance", "isinstance", "RuntimeError"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "{", "}", "\n", "x", "=", "x", "-", "self", ".", "mean", "\n", "x", "=", "x", "/", "self", ".", "std", "\n", "ci", "=", "1", "\n", "ri", "=", "0", "\n", "for", "layer", "in", "self", ".", "vgg19", ".", "children", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "ri", "+=", "1", "\n", "name", "=", "'conv{}_{}'", ".", "format", "(", "ci", ",", "ri", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "nn", ".", "ReLU", ")", ":", "\n", "                ", "ri", "+=", "1", "\n", "name", "=", "'relu{}_{}'", ".", "format", "(", "ci", ",", "ri", ")", "\n", "layer", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "nn", ".", "MaxPool2d", ")", ":", "\n", "                ", "ri", "=", "0", "\n", "name", "=", "'pool_{}'", ".", "format", "(", "ci", ")", "\n", "ci", "+=", "1", "\n", "", "elif", "isinstance", "(", "layer", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "name", "=", "'bn_{}'", ".", "format", "(", "ci", ")", "\n", "", "else", ":", "\n", "                ", "raise", "RuntimeError", "(", "'Unrecognized layer: {}'", ".", "format", "(", "layer", ".", "__class__", ".", "__name__", ")", ")", "\n", "", "x", "=", "layer", "(", "x", ")", "\n", "out", "[", "name", "]", "=", "x", "\n", "# print([x for x in out])", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.IDMRFLoss.__init__": [[374, 383], ["torch.Module.__init__", "featlayer"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.datasets.datasets.TestData.__init__"], ["    ", "def", "__init__", "(", "self", ",", "featlayer", "=", "VGG19FeatLayer", ")", ":", "\n", "        ", "super", "(", "IDMRFLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "featlayer", "=", "featlayer", "(", ")", "\n", "self", ".", "feat_style_layers", "=", "{", "'relu3_2'", ":", "1.0", ",", "'relu4_2'", ":", "1.0", "}", "\n", "self", ".", "feat_content_layers", "=", "{", "'relu4_2'", ":", "1.0", "}", "\n", "self", ".", "bias", "=", "1.0", "\n", "self", ".", "nn_stretch_sigma", "=", "0.5", "\n", "self", ".", "lambda_style", "=", "1.0", "\n", "self", ".", "lambda_content", "=", "1.0", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.IDMRFLoss.sum_normalize": [[384, 387], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "sum_normalize", "(", "self", ",", "featmaps", ")", ":", "\n", "        ", "reduce_sum", "=", "torch", ".", "sum", "(", "featmaps", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "return", "featmaps", "/", "reduce_sum", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.IDMRFLoss.patch_extraction": [[388, 396], ["featmaps.unfold().unfold", "featmaps.unfold().unfold.permute", "lossfunc.IDMRFLoss.patches_OIHW.size", "lossfunc.IDMRFLoss.patches_OIHW.view", "featmaps.unfold"], "methods", ["None"], ["", "def", "patch_extraction", "(", "self", ",", "featmaps", ")", ":", "\n", "        ", "patch_size", "=", "1", "\n", "patch_stride", "=", "1", "\n", "patches_as_depth_vectors", "=", "featmaps", ".", "unfold", "(", "2", ",", "patch_size", ",", "patch_stride", ")", ".", "unfold", "(", "3", ",", "patch_size", ",", "patch_stride", ")", "\n", "self", ".", "patches_OIHW", "=", "patches_as_depth_vectors", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ",", "4", ",", "5", ")", "\n", "dims", "=", "self", ".", "patches_OIHW", ".", "size", "(", ")", "\n", "self", ".", "patches_OIHW", "=", "self", ".", "patches_OIHW", ".", "view", "(", "-", "1", ",", "dims", "[", "3", "]", ",", "dims", "[", "4", "]", ",", "dims", "[", "5", "]", ")", "\n", "return", "self", ".", "patches_OIHW", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.IDMRFLoss.compute_relative_distances": [[397, 402], ["torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min"], "methods", ["None"], ["", "def", "compute_relative_distances", "(", "self", ",", "cdist", ")", ":", "\n", "        ", "epsilon", "=", "1e-5", "\n", "div", "=", "torch", ".", "min", "(", "cdist", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "relative_dist", "=", "cdist", "/", "(", "div", "+", "epsilon", ")", "\n", "return", "relative_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.IDMRFLoss.exp_norm_relative_dist": [[403, 408], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "lossfunc.IDMRFLoss.sum_normalize"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.VGGLoss.sum_normalize"], ["", "def", "exp_norm_relative_dist", "(", "self", ",", "relative_dist", ")", ":", "\n", "        ", "scaled_dist", "=", "relative_dist", "\n", "dist_before_norm", "=", "torch", ".", "exp", "(", "(", "self", ".", "bias", "-", "scaled_dist", ")", "/", "self", ".", "nn_stretch_sigma", ")", "\n", "self", ".", "cs_NCHW", "=", "self", ".", "sum_normalize", "(", "dist_before_norm", ")", "\n", "return", "self", ".", "cs_NCHW", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.IDMRFLoss.mrf_loss": [[409, 439], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "tar.size", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lossfunc.IDMRFLoss.compute_relative_distances", "lossfunc.IDMRFLoss.exp_norm_relative_dist", "lossfunc.IDMRFLoss.size", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "lossfunc.IDMRFLoss.patch_extraction", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "cosine_dist_l.append", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "lossfunc.IDMRFLoss.view"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.VGGLoss.compute_relative_distances", "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.VGGLoss.exp_norm_relative_dist", "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.VGGLoss.patch_extraction"], ["", "def", "mrf_loss", "(", "self", ",", "gen", ",", "tar", ")", ":", "\n", "        ", "meanT", "=", "torch", ".", "mean", "(", "tar", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "gen_feats", ",", "tar_feats", "=", "gen", "-", "meanT", ",", "tar", "-", "meanT", "\n", "\n", "gen_feats_norm", "=", "torch", ".", "norm", "(", "gen_feats", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "tar_feats_norm", "=", "torch", ".", "norm", "(", "tar_feats", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "gen_normalized", "=", "gen_feats", "/", "gen_feats_norm", "\n", "tar_normalized", "=", "tar_feats", "/", "tar_feats_norm", "\n", "\n", "cosine_dist_l", "=", "[", "]", "\n", "BatchSize", "=", "tar", ".", "size", "(", "0", ")", "\n", "\n", "for", "i", "in", "range", "(", "BatchSize", ")", ":", "\n", "            ", "tar_feat_i", "=", "tar_normalized", "[", "i", ":", "i", "+", "1", ",", ":", ",", ":", ",", ":", "]", "\n", "gen_feat_i", "=", "gen_normalized", "[", "i", ":", "i", "+", "1", ",", ":", ",", ":", ",", ":", "]", "\n", "patches_OIHW", "=", "self", ".", "patch_extraction", "(", "tar_feat_i", ")", "\n", "\n", "cosine_dist_i", "=", "F", ".", "conv2d", "(", "gen_feat_i", ",", "patches_OIHW", ")", "\n", "cosine_dist_l", ".", "append", "(", "cosine_dist_i", ")", "\n", "", "cosine_dist", "=", "torch", ".", "cat", "(", "cosine_dist_l", ",", "dim", "=", "0", ")", "\n", "cosine_dist_zero_2_one", "=", "-", "(", "cosine_dist", "-", "1", ")", "/", "2", "\n", "relative_dist", "=", "self", ".", "compute_relative_distances", "(", "cosine_dist_zero_2_one", ")", "\n", "rela_dist", "=", "self", ".", "exp_norm_relative_dist", "(", "relative_dist", ")", "\n", "dims_div_mrf", "=", "rela_dist", ".", "size", "(", ")", "\n", "k_max_nc", "=", "torch", ".", "max", "(", "rela_dist", ".", "view", "(", "dims_div_mrf", "[", "0", "]", ",", "dims_div_mrf", "[", "1", "]", ",", "-", "1", ")", ",", "dim", "=", "2", ")", "[", "0", "]", "\n", "div_mrf", "=", "torch", ".", "mean", "(", "k_max_nc", ",", "dim", "=", "1", ")", "\n", "div_mrf_sum", "=", "-", "torch", ".", "log", "(", "div_mrf", ")", "\n", "div_mrf_sum", "=", "torch", ".", "sum", "(", "div_mrf_sum", ")", "\n", "return", "div_mrf_sum", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.IDMRFLoss.forward": [[440, 451], ["lossfunc.IDMRFLoss.featlayer", "lossfunc.IDMRFLoss.featlayer", "functools.reduce", "functools.reduce", "lossfunc.IDMRFLoss.mrf_loss", "lossfunc.IDMRFLoss.mrf_loss"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.VGGLoss.mrf_loss", "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.VGGLoss.mrf_loss"], ["", "def", "forward", "(", "self", ",", "gen", ",", "tar", ")", ":", "\n", "## gen: [bz,3,h,w] rgb [0,1]", "\n", "        ", "gen_vgg_feats", "=", "self", ".", "featlayer", "(", "gen", ")", "\n", "tar_vgg_feats", "=", "self", ".", "featlayer", "(", "tar", ")", "\n", "style_loss_list", "=", "[", "self", ".", "feat_style_layers", "[", "layer", "]", "*", "self", ".", "mrf_loss", "(", "gen_vgg_feats", "[", "layer", "]", ",", "tar_vgg_feats", "[", "layer", "]", ")", "for", "layer", "in", "self", ".", "feat_style_layers", "]", "\n", "self", ".", "style_loss", "=", "reduce", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ",", "style_loss_list", ")", "*", "self", ".", "lambda_style", "\n", "\n", "content_loss_list", "=", "[", "self", ".", "feat_content_layers", "[", "layer", "]", "*", "self", ".", "mrf_loss", "(", "gen_vgg_feats", "[", "layer", "]", ",", "tar_vgg_feats", "[", "layer", "]", ")", "for", "layer", "in", "self", ".", "feat_content_layers", "]", "\n", "self", ".", "content_loss", "=", "reduce", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ",", "content_loss_list", ")", "*", "self", ".", "lambda_content", "\n", "\n", "return", "self", ".", "style_loss", "+", "self", ".", "content_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.VGG_16.__init__": [[466, 489], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tensor().float().view().cuda", "torch.Tensor().float().view().cuda", "torch.Tensor().float().view().cuda", "torch.Tensor().float().view().cuda", "torch.Tensor().float().view().cuda", "torch.Tensor().float().view().cuda", "torch.Tensor().float().view().cuda", "torch.Tensor().float().view().cuda", "torch.Tensor().float().view().cuda", "torch.Tensor().float().view().cuda", "torch.Tensor().float().view().cuda", "torch.Tensor().float().view().cuda", "torch.Tensor().float().view().cuda", "torch.Tensor().float().view().cuda", "torch.Tensor().float().view().cuda", "torch.Tensor().float().view().cuda", "torch.Tensor().float().view", "torch.Tensor().float().view", "torch.Tensor().float().view", "torch.Tensor().float().view", "torch.Tensor().float().view", "torch.Tensor().float().view", "torch.Tensor().float().view", "torch.Tensor().float().view", "torch.Tensor().float().view", "torch.Tensor().float().view", "torch.Tensor().float().view", "torch.Tensor().float().view", "torch.Tensor().float().view", "torch.Tensor().float().view", "torch.Tensor().float().view", "torch.Tensor().float().view", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.datasets.datasets.TestData.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Constructor\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "block_size", "=", "[", "2", ",", "2", ",", "3", ",", "3", ",", "3", "]", "\n", "self", ".", "conv_1_1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_1_2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_2_1", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_2_2", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_3_1", "=", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_3_2", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_3_3", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_4_1", "=", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_4_2", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_4_3", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_5_1", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_5_2", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_5_3", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "fc6", "=", "nn", ".", "Linear", "(", "512", "*", "7", "*", "7", ",", "4096", ")", "\n", "self", ".", "fc7", "=", "nn", ".", "Linear", "(", "4096", ",", "4096", ")", "\n", "self", ".", "fc8", "=", "nn", ".", "Linear", "(", "4096", ",", "2622", ")", "\n", "self", ".", "mean", "=", "torch", ".", "Tensor", "(", "np", ".", "array", "(", "[", "129.1863", ",", "104.7624", ",", "93.5940", "]", ")", "/", "255.", ")", ".", "float", "(", ")", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", ".", "cuda", "(", ")", "\n", "# self.mean = torch.tensor([0.485, 0.456, 0.406]).view(1, 3, 1, 1).cuda()", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.VGG_16.load_weights": [[491, 514], ["torchfile.load", "enumerate", "getattr", "getattr", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor().view_as", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load"], ["", "def", "load_weights", "(", "self", ",", "path", "=", "\"pretrained/VGG_FACE.t7\"", ")", ":", "\n", "        ", "\"\"\" Function to load luatorch pretrained\n        Args:\n            path: path for the luatorch pretrained\n        \"\"\"", "\n", "model", "=", "torchfile", ".", "load", "(", "path", ")", "\n", "counter", "=", "1", "\n", "block", "=", "1", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "model", ".", "modules", ")", ":", "\n", "            ", "if", "layer", ".", "weight", "is", "not", "None", ":", "\n", "                ", "if", "block", "<=", "5", ":", "\n", "                    ", "self_layer", "=", "getattr", "(", "self", ",", "\"conv_%d_%d\"", "%", "(", "block", ",", "counter", ")", ")", "\n", "counter", "+=", "1", "\n", "if", "counter", ">", "self", ".", "block_size", "[", "block", "-", "1", "]", ":", "\n", "                        ", "counter", "=", "1", "\n", "block", "+=", "1", "\n", "", "self_layer", ".", "weight", ".", "data", "[", "...", "]", "=", "torch", ".", "tensor", "(", "layer", ".", "weight", ")", ".", "view_as", "(", "self_layer", ".", "weight", ")", "[", "...", "]", "\n", "self_layer", ".", "bias", ".", "data", "[", "...", "]", "=", "torch", ".", "tensor", "(", "layer", ".", "bias", ")", ".", "view_as", "(", "self_layer", ".", "bias", ")", "[", "...", "]", "\n", "", "else", ":", "\n", "                    ", "self_layer", "=", "getattr", "(", "self", ",", "\"fc%d\"", "%", "(", "block", ")", ")", "\n", "block", "+=", "1", "\n", "self_layer", ".", "weight", ".", "data", "[", "...", "]", "=", "torch", ".", "tensor", "(", "layer", ".", "weight", ")", ".", "view_as", "(", "self_layer", ".", "weight", ")", "[", "...", "]", "\n", "self_layer", ".", "bias", ".", "data", "[", "...", "]", "=", "torch", ".", "tensor", "(", "layer", ".", "bias", ")", ".", "view_as", "(", "self_layer", ".", "bias", ")", "[", "...", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.VGG_16.forward": [[515, 551], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "lossfunc.VGG_16.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "lossfunc.VGG_16.fc8", "lossfunc.VGG_16.conv_1_1", "lossfunc.VGG_16.conv_1_2", "lossfunc.VGG_16.conv_2_1", "lossfunc.VGG_16.conv_2_2", "lossfunc.VGG_16.conv_3_1", "lossfunc.VGG_16.conv_3_2", "lossfunc.VGG_16.conv_3_3", "lossfunc.VGG_16.conv_4_1", "lossfunc.VGG_16.conv_4_2", "lossfunc.VGG_16.conv_4_3", "lossfunc.VGG_16.conv_5_1", "lossfunc.VGG_16.conv_5_2", "lossfunc.VGG_16.conv_5_3", "lossfunc.VGG_16.size", "lossfunc.VGG_16.fc6", "lossfunc.VGG_16.fc7"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\" Pytorch forward\n        Args:\n            x: input image (224x224)\n        Returns: class logits\n        \"\"\"", "\n", "out", "=", "{", "}", "\n", "x", "=", "x", "-", "self", ".", "mean", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv_1_1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv_1_2", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv_2_1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv_2_2", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv_3_1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv_3_2", "(", "x", ")", ")", "\n", "out", "[", "'relu3_2'", "]", "=", "x", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv_3_3", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv_4_1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv_4_2", "(", "x", ")", ")", "\n", "out", "[", "'relu4_2'", "]", "=", "x", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv_4_3", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv_5_1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv_5_2", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv_5_3", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc6", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "0.5", ",", "self", ".", "training", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc7", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "0.5", ",", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "fc8", "(", "x", ")", "\n", "out", "[", "'last'", "]", "=", "x", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.VGGLoss.__init__": [[553, 564], ["torch.Module.__init__", "VGG_16().float", "lossfunc.VGGLoss.featlayer.load_weights", "lossfunc.VGGLoss.featlayer.cuda().eval", "lossfunc.VGG_16", "lossfunc.VGGLoss.featlayer.cuda"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.datasets.datasets.TestData.__init__", "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.VGG_16.load_weights"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "VGGLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "featlayer", "=", "VGG_16", "(", ")", ".", "float", "(", ")", "\n", "self", ".", "featlayer", ".", "load_weights", "(", "path", "=", "\"data/face_recognition_model/vgg_face_torch/VGG_FACE.t7\"", ")", "\n", "self", ".", "featlayer", "=", "self", ".", "featlayer", ".", "cuda", "(", ")", ".", "eval", "(", ")", "\n", "self", ".", "feat_style_layers", "=", "{", "'relu3_2'", ":", "1.0", ",", "'relu4_2'", ":", "1.0", "}", "\n", "self", ".", "feat_content_layers", "=", "{", "'relu4_2'", ":", "1.0", "}", "\n", "self", ".", "bias", "=", "1.0", "\n", "self", ".", "nn_stretch_sigma", "=", "0.5", "\n", "self", ".", "lambda_style", "=", "1.0", "\n", "self", ".", "lambda_content", "=", "1.0", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.VGGLoss.sum_normalize": [[565, 568], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "sum_normalize", "(", "self", ",", "featmaps", ")", ":", "\n", "        ", "reduce_sum", "=", "torch", ".", "sum", "(", "featmaps", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "return", "featmaps", "/", "reduce_sum", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.VGGLoss.patch_extraction": [[569, 577], ["featmaps.unfold().unfold", "featmaps.unfold().unfold.permute", "lossfunc.VGGLoss.patches_OIHW.size", "lossfunc.VGGLoss.patches_OIHW.view", "featmaps.unfold"], "methods", ["None"], ["", "def", "patch_extraction", "(", "self", ",", "featmaps", ")", ":", "\n", "        ", "patch_size", "=", "1", "\n", "patch_stride", "=", "1", "\n", "patches_as_depth_vectors", "=", "featmaps", ".", "unfold", "(", "2", ",", "patch_size", ",", "patch_stride", ")", ".", "unfold", "(", "3", ",", "patch_size", ",", "patch_stride", ")", "\n", "self", ".", "patches_OIHW", "=", "patches_as_depth_vectors", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ",", "4", ",", "5", ")", "\n", "dims", "=", "self", ".", "patches_OIHW", ".", "size", "(", ")", "\n", "self", ".", "patches_OIHW", "=", "self", ".", "patches_OIHW", ".", "view", "(", "-", "1", ",", "dims", "[", "3", "]", ",", "dims", "[", "4", "]", ",", "dims", "[", "5", "]", ")", "\n", "return", "self", ".", "patches_OIHW", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.VGGLoss.compute_relative_distances": [[578, 583], ["torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min"], "methods", ["None"], ["", "def", "compute_relative_distances", "(", "self", ",", "cdist", ")", ":", "\n", "        ", "epsilon", "=", "1e-5", "\n", "div", "=", "torch", ".", "min", "(", "cdist", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "relative_dist", "=", "cdist", "/", "(", "div", "+", "epsilon", ")", "\n", "return", "relative_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.VGGLoss.exp_norm_relative_dist": [[584, 589], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "lossfunc.VGGLoss.sum_normalize"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.VGGLoss.sum_normalize"], ["", "def", "exp_norm_relative_dist", "(", "self", ",", "relative_dist", ")", ":", "\n", "        ", "scaled_dist", "=", "relative_dist", "\n", "dist_before_norm", "=", "torch", ".", "exp", "(", "(", "self", ".", "bias", "-", "scaled_dist", ")", "/", "self", ".", "nn_stretch_sigma", ")", "\n", "self", ".", "cs_NCHW", "=", "self", ".", "sum_normalize", "(", "dist_before_norm", ")", "\n", "return", "self", ".", "cs_NCHW", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.VGGLoss.mrf_loss": [[590, 620], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "tar.size", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lossfunc.VGGLoss.compute_relative_distances", "lossfunc.VGGLoss.exp_norm_relative_dist", "lossfunc.VGGLoss.size", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "lossfunc.VGGLoss.patch_extraction", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "cosine_dist_l.append", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "lossfunc.VGGLoss.view"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.VGGLoss.compute_relative_distances", "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.VGGLoss.exp_norm_relative_dist", "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.VGGLoss.patch_extraction"], ["", "def", "mrf_loss", "(", "self", ",", "gen", ",", "tar", ")", ":", "\n", "        ", "meanT", "=", "torch", ".", "mean", "(", "tar", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "gen_feats", ",", "tar_feats", "=", "gen", "-", "meanT", ",", "tar", "-", "meanT", "\n", "\n", "gen_feats_norm", "=", "torch", ".", "norm", "(", "gen_feats", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "tar_feats_norm", "=", "torch", ".", "norm", "(", "tar_feats", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "gen_normalized", "=", "gen_feats", "/", "gen_feats_norm", "\n", "tar_normalized", "=", "tar_feats", "/", "tar_feats_norm", "\n", "\n", "cosine_dist_l", "=", "[", "]", "\n", "BatchSize", "=", "tar", ".", "size", "(", "0", ")", "\n", "\n", "for", "i", "in", "range", "(", "BatchSize", ")", ":", "\n", "            ", "tar_feat_i", "=", "tar_normalized", "[", "i", ":", "i", "+", "1", ",", ":", ",", ":", ",", ":", "]", "\n", "gen_feat_i", "=", "gen_normalized", "[", "i", ":", "i", "+", "1", ",", ":", ",", ":", ",", ":", "]", "\n", "patches_OIHW", "=", "self", ".", "patch_extraction", "(", "tar_feat_i", ")", "\n", "\n", "cosine_dist_i", "=", "F", ".", "conv2d", "(", "gen_feat_i", ",", "patches_OIHW", ")", "\n", "cosine_dist_l", ".", "append", "(", "cosine_dist_i", ")", "\n", "", "cosine_dist", "=", "torch", ".", "cat", "(", "cosine_dist_l", ",", "dim", "=", "0", ")", "\n", "cosine_dist_zero_2_one", "=", "-", "(", "cosine_dist", "-", "1", ")", "/", "2", "\n", "relative_dist", "=", "self", ".", "compute_relative_distances", "(", "cosine_dist_zero_2_one", ")", "\n", "rela_dist", "=", "self", ".", "exp_norm_relative_dist", "(", "relative_dist", ")", "\n", "dims_div_mrf", "=", "rela_dist", ".", "size", "(", ")", "\n", "k_max_nc", "=", "torch", ".", "max", "(", "rela_dist", ".", "view", "(", "dims_div_mrf", "[", "0", "]", ",", "dims_div_mrf", "[", "1", "]", ",", "-", "1", ")", ",", "dim", "=", "2", ")", "[", "0", "]", "\n", "div_mrf", "=", "torch", ".", "mean", "(", "k_max_nc", ",", "dim", "=", "1", ")", "\n", "div_mrf_sum", "=", "-", "torch", ".", "log", "(", "div_mrf", ")", "\n", "div_mrf_sum", "=", "torch", ".", "sum", "(", "div_mrf_sum", ")", "\n", "return", "div_mrf_sum", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.VGGLoss.forward": [[621, 632], ["lossfunc.VGGLoss.featlayer", "lossfunc.VGGLoss.featlayer", "functools.reduce", "functools.reduce", "lossfunc.VGGLoss.mrf_loss", "lossfunc.VGGLoss.mrf_loss"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.VGGLoss.mrf_loss", "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.VGGLoss.mrf_loss"], ["", "def", "forward", "(", "self", ",", "gen", ",", "tar", ")", ":", "\n", "## gen: [bz,3,h,w] rgb [0,1]", "\n", "        ", "gen_vgg_feats", "=", "self", ".", "featlayer", "(", "gen", ")", "\n", "tar_vgg_feats", "=", "self", ".", "featlayer", "(", "tar", ")", "\n", "style_loss_list", "=", "[", "self", ".", "feat_style_layers", "[", "layer", "]", "*", "self", ".", "mrf_loss", "(", "gen_vgg_feats", "[", "layer", "]", ",", "tar_vgg_feats", "[", "layer", "]", ")", "for", "layer", "in", "self", ".", "feat_style_layers", "]", "\n", "self", ".", "style_loss", "=", "reduce", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ",", "style_loss_list", ")", "*", "self", ".", "lambda_style", "\n", "\n", "content_loss_list", "=", "[", "self", ".", "feat_content_layers", "[", "layer", "]", "*", "self", ".", "mrf_loss", "(", "gen_vgg_feats", "[", "layer", "]", ",", "tar_vgg_feats", "[", "layer", "]", ")", "for", "layer", "in", "self", ".", "feat_content_layers", "]", "\n", "self", ".", "content_loss", "=", "reduce", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ",", "content_loss_list", ")", "*", "self", ".", "lambda_content", "\n", "\n", "return", "self", ".", "style_loss", "+", "self", ".", "content_loss", "\n", "# loss = 0", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.VGGFace2Loss.__init__": [[641, 646], ["torch.Module.__init__", "torchvision.frnet.resnet50().eval().cuda", "torchvision.frnet.load_state_dict", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torchvision.frnet.resnet50().eval", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torchvision.frnet.resnet50"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.datasets.datasets.TestData.__init__", "home.repos.pwc.inspect_result.foivospar_NED.models.frnet.load_state_dict", "home.repos.pwc.inspect_result.foivospar_NED.models.frnet.resnet50"], ["    ", "def", "__init__", "(", "self", ",", "pretrained_model", ",", "pretrained_data", "=", "'vggface2'", ")", ":", "\n", "        ", "super", "(", "VGGFace2Loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "reg_model", "=", "resnet50", "(", "num_classes", "=", "8631", ",", "include_top", "=", "False", ")", ".", "eval", "(", ")", ".", "cuda", "(", ")", "\n", "load_state_dict", "(", "self", ".", "reg_model", ",", "pretrained_model", ")", "\n", "self", ".", "mean_bgr", "=", "torch", ".", "tensor", "(", "[", "91.4953", ",", "103.8827", ",", "131.0912", "]", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.VGGFace2Loss.reg_features": [[647, 657], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "lossfunc.VGGFace2Loss.reg_model", "feature.view.view.view", "torch.interpolate.size"], "methods", ["None"], ["", "def", "reg_features", "(", "self", ",", "x", ")", ":", "\n", "# out = []", "\n", "        ", "margin", "=", "10", "\n", "x", "=", "x", "[", ":", ",", ":", ",", "margin", ":", "224", "-", "margin", ",", "margin", ":", "224", "-", "margin", "]", "\n", "# x = F.interpolate(x*2. - 1., [224,224], mode='nearest')", "\n", "x", "=", "F", ".", "interpolate", "(", "x", "*", "2.", "-", "1.", ",", "[", "224", ",", "224", "]", ",", "mode", "=", "'bilinear'", ")", "\n", "# import ipdb; ipdb.set_trace()", "\n", "feature", "=", "self", ".", "reg_model", "(", "x", ")", "\n", "feature", "=", "feature", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "return", "feature", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.VGGFace2Loss.transform": [[658, 663], ["img.permute.permute.permute", "img[].permute"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "img", ")", ":", "\n", "# import ipdb;ipdb.set_trace()", "\n", "        ", "img", "=", "img", "[", ":", ",", "[", "2", ",", "1", ",", "0", "]", ",", ":", ",", ":", "]", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "*", "255", "-", "self", ".", "mean_bgr", "\n", "img", "=", "img", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.VGGFace2Loss._cos_metric": [[664, 666], ["torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity"], "methods", ["None"], ["", "def", "_cos_metric", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "return", "1.0", "-", "F", ".", "cosine_similarity", "(", "x1", ",", "x2", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.VGGFace2Loss.forward": [[667, 676], ["lossfunc.VGGFace2Loss.transform", "lossfunc.VGGFace2Loss.transform", "lossfunc.VGGFace2Loss.reg_features", "lossfunc.VGGFace2Loss.reg_features", "lossfunc.VGGFace2Loss._cos_metric().mean", "lossfunc.VGGFace2Loss._cos_metric"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.VGGFace2Loss.transform", "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.VGGFace2Loss.transform", "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.VGGFace2Loss.reg_features", "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.VGGFace2Loss.reg_features", "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.VGGFace2Loss._cos_metric"], ["", "def", "forward", "(", "self", ",", "gen", ",", "tar", ",", "is_crop", "=", "True", ")", ":", "\n", "        ", "gen", "=", "self", ".", "transform", "(", "gen", ")", "\n", "tar", "=", "self", ".", "transform", "(", "tar", ")", "\n", "\n", "gen_out", "=", "self", ".", "reg_features", "(", "gen", ")", "\n", "tar_out", "=", "self", ".", "reg_features", "(", "tar", ")", "\n", "# loss = ((gen_out - tar_out)**2).mean()", "\n", "loss", "=", "self", ".", "_cos_metric", "(", "gen_out", ",", "tar_out", ")", ".", "mean", "(", ")", "\n", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.l2_distance": [[15, 17], ["torch.sqrt().mean().mean", "torch.sqrt().mean().mean", "torch.sqrt().mean().mean", "torch.sqrt().mean().mean", "torch.sqrt().mean", "torch.sqrt().mean", "torch.sqrt().mean", "torch.sqrt().mean", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "function", ["None"], ["def", "l2_distance", "(", "verts1", ",", "verts2", ")", ":", "\n", "    ", "return", "torch", ".", "sqrt", "(", "(", "(", "verts1", "-", "verts2", ")", "**", "2", ")", ".", "sum", "(", "2", ")", ")", ".", "mean", "(", "1", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.kl_loss": [[19, 31], ["mu.pow().add_().mul_().add_().add_", "torch.sum().mul_", "torch.sum().mul_", "torch.sum().mul_", "torch.sum().mul_", "mu.pow().add_().mul_().add_", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "mu.pow().add_().mul_", "mu.pow().add_", "logvar.exp", "mu.pow"], "function", ["None"], ["", "def", "kl_loss", "(", "texcode", ")", ":", "\n", "    ", "\"\"\"\n    recon_x: generating images\n    x: origin images\n    mu: latent mean\n    logvar: latent log variance\n    \"\"\"", "\n", "mu", ",", "logvar", "=", "texcode", "[", ":", ",", ":", "128", "]", ",", "texcode", "[", ":", ",", "128", ":", "]", "\n", "KLD_element", "=", "mu", ".", "pow", "(", "2", ")", ".", "add_", "(", "logvar", ".", "exp", "(", ")", ")", ".", "mul_", "(", "-", "1", ")", ".", "add_", "(", "1", ")", ".", "add_", "(", "logvar", ")", "\n", "KLD", "=", "torch", ".", "sum", "(", "KLD_element", ")", ".", "mul_", "(", "-", "0.5", ")", "\n", "# KL divergence", "\n", "return", "KLD", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.shading_white_loss": [[37, 46], ["rgb_diff.mean", "shading.mean"], "function", ["None"], ["", "def", "shading_white_loss", "(", "shading", ")", ":", "\n", "    ", "'''\n    regularize lighting: assume lights close to white \n    '''", "\n", "# rgb_diff = (shading[:,0] - shading[:,1])**2 + (shading[:,0] - shading[:,2])**2 + (shading[:,1] - shading[:,2])**2", "\n", "# rgb_diff = (shading[:,0].mean([1,2]) - shading[:,1].mean([1,2]))**2 + (shading[:,0].mean([1,2]) - shading[:,2].mean([1,2]))**2 + (shading[:,1].mean([1,2]) - shading[:,2].mean([1,2]))**2", "\n", "# rgb_diff = (shading.mean([2, 3]) - torch.ones((shading.shape[0], 3)).float().cuda())**2", "\n", "rgb_diff", "=", "(", "shading", ".", "mean", "(", "[", "0", ",", "2", ",", "3", "]", ")", "-", "0.99", ")", "**", "2", "\n", "return", "rgb_diff", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.shading_smooth_loss": [[47, 56], ["gradient_image.mean"], "function", ["None"], ["", "def", "shading_smooth_loss", "(", "shading", ")", ":", "\n", "    ", "'''\n    assume: shading should be smooth\n    ref: Lifting AutoEncoders: Unsupervised Learning of a Fully-Disentangled 3D Morphable Model using Deep Non-Rigid Structure from Motion\n    '''", "\n", "dx", "=", "shading", "[", ":", ",", ":", ",", "1", ":", "-", "1", ",", "1", ":", "]", "-", "shading", "[", ":", ",", ":", ",", "1", ":", "-", "1", ",", ":", "-", "1", "]", "\n", "dy", "=", "shading", "[", ":", ",", ":", ",", "1", ":", ",", "1", ":", "-", "1", "]", "-", "shading", "[", ":", ",", ":", ",", ":", "-", "1", ",", "1", ":", "-", "1", "]", "\n", "gradient_image", "=", "(", "dx", "**", "2", ")", ".", "mean", "(", ")", "+", "(", "dy", "**", "2", ")", ".", "mean", "(", ")", "\n", "return", "gradient_image", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.albedo_constancy_loss": [[71, 85], ["torch.exp().detach", "torch.exp().detach", "torch.exp().detach", "torch.exp().detach", "torch.exp().detach", "torch.exp().detach", "torch.exp().detach", "torch.exp().detach", "albedo_const_loss_x.mean", "albedo_const_loss_y.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "function", ["None"], ["", "def", "albedo_constancy_loss", "(", "albedo", ",", "alpha", "=", "15", ",", "weight", "=", "1.", ")", ":", "\n", "    ", "'''\n    for similarity of neighbors\n    ref: Self-supervised Multi-level Face Model Learning for Monocular Reconstruction at over 250 Hz\n        Towards High-fidelity Nonlinear 3D Face Morphable Model\n    '''", "\n", "albedo_chromaticity", "=", "albedo", "/", "(", "torch", ".", "sum", "(", "albedo", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "1e-6", ")", "\n", "weight_x", "=", "torch", ".", "exp", "(", "-", "alpha", "*", "(", "albedo_chromaticity", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "-", "albedo_chromaticity", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", ")", "**", "2", ")", ".", "detach", "(", ")", "\n", "weight_y", "=", "torch", ".", "exp", "(", "-", "alpha", "*", "(", "albedo_chromaticity", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "-", "albedo_chromaticity", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", ")", "**", "2", ")", ".", "detach", "(", ")", "\n", "albedo_const_loss_x", "=", "(", "(", "albedo", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "-", "albedo", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", ")", "**", "2", ")", "*", "weight_x", "\n", "albedo_const_loss_y", "=", "(", "(", "albedo", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "-", "albedo", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", ")", "**", "2", ")", "*", "weight_y", "\n", "\n", "albedo_constancy_loss", "=", "albedo_const_loss_x", ".", "mean", "(", ")", "+", "albedo_const_loss_y", ".", "mean", "(", ")", "\n", "return", "albedo_constancy_loss", "*", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.albedo_ring_loss": [[86, 109], ["range", "range", "torch.add", "torch.add", "torch.add", "torch.add", "torch.nn.functional.relu().mean", "torch.nn.functional.relu().mean", "torch.nn.functional.relu().mean", "torch.nn.functional.relu().mean", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu"], "function", ["None"], ["", "def", "albedo_ring_loss", "(", "texcode", ",", "ring_elements", ",", "margin", ",", "weight", "=", "1.", ")", ":", "\n", "        ", "\"\"\"\n            computes ring loss for ring_outputs before FLAME decoder\n            Inputs:\n              ring_outputs = a list containing N streams of the ring; len(ring_outputs) = N\n              Each ring_outputs[i] is a tensor of (batch_size X shape_dim_num)\n              Aim is to force each row (same subject) of each stream to produce same shape\n              Each row of first N-1 strams are of the same subject and\n              the Nth stream is the different subject\n        \"\"\"", "\n", "tot_ring_loss", "=", "(", "texcode", "[", "0", "]", "-", "texcode", "[", "0", "]", ")", ".", "sum", "(", ")", "\n", "diff_stream", "=", "texcode", "[", "-", "1", "]", "\n", "count", "=", "0.0", "\n", "for", "i", "in", "range", "(", "ring_elements", "-", "1", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "ring_elements", "-", "1", ")", ":", "\n", "                ", "pd", "=", "(", "texcode", "[", "i", "]", "-", "texcode", "[", "j", "]", ")", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ")", "\n", "nd", "=", "(", "texcode", "[", "i", "]", "-", "diff_stream", ")", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ")", "\n", "tot_ring_loss", "=", "torch", ".", "add", "(", "tot_ring_loss", ",", "\n", "(", "torch", ".", "nn", ".", "functional", ".", "relu", "(", "margin", "+", "pd", "-", "nd", ")", ".", "mean", "(", ")", ")", ")", "\n", "count", "+=", "1.0", "\n", "\n", "", "", "tot_ring_loss", "=", "(", "1.0", "/", "count", ")", "*", "tot_ring_loss", "\n", "return", "tot_ring_loss", "*", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.albedo_same_loss": [[110, 127], ["range", "range"], "function", ["None"], ["", "def", "albedo_same_loss", "(", "albedo", ",", "ring_elements", ",", "weight", "=", "1.", ")", ":", "\n", "        ", "\"\"\"\n            computes ring loss for ring_outputs before FLAME decoder\n            Inputs:\n              ring_outputs = a list containing N streams of the ring; len(ring_outputs) = N\n              Each ring_outputs[i] is a tensor of (batch_size X shape_dim_num)\n              Aim is to force each row (same subject) of each stream to produce same shape\n              Each row of first N-1 strams are of the same subject and\n              the Nth stream is the different subject\n        \"\"\"", "\n", "loss", "=", "0", "\n", "for", "i", "in", "range", "(", "ring_elements", "-", "1", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "ring_elements", "-", "1", ")", ":", "\n", "                ", "pd", "=", "(", "albedo", "[", "i", "]", "-", "albedo", "[", "j", "]", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", "\n", "loss", "+=", "pd", "\n", "", "", "loss", "=", "loss", "/", "ring_elements", "\n", "return", "loss", "*", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.batch_kp_2d_l1_loss": [[129, 144], ["real_2d_kp.view", "predicted_2d_kp.contiguous().view", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "predicted_2d_kp.contiguous", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "function", ["None"], ["", "def", "batch_kp_2d_l1_loss", "(", "real_2d_kp", ",", "predicted_2d_kp", ",", "weights", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Computes the l1 loss between the ground truth keypoints and the predicted keypoints\n    Inputs:\n    kp_gt  : N x K x 3\n    kp_pred: N x K x 2\n    \"\"\"", "\n", "if", "weights", "is", "not", "None", ":", "\n", "        ", "real_2d_kp", "[", ":", ",", ":", ",", "2", "]", "=", "weights", "[", "None", ",", ":", "]", "*", "real_2d_kp", "[", ":", ",", ":", ",", "2", "]", "\n", "", "kp_gt", "=", "real_2d_kp", ".", "view", "(", "-", "1", ",", "3", ")", "\n", "kp_pred", "=", "predicted_2d_kp", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "2", ")", "\n", "vis", "=", "kp_gt", "[", ":", ",", "2", "]", "\n", "k", "=", "torch", ".", "sum", "(", "vis", ")", "*", "2.0", "+", "1e-8", "\n", "dif_abs", "=", "torch", ".", "abs", "(", "kp_gt", "[", ":", ",", ":", "2", "]", "-", "kp_pred", ")", ".", "sum", "(", "1", ")", "\n", "return", "torch", ".", "matmul", "(", "dif_abs", ",", "vis", ")", "*", "1.0", "/", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.landmark_loss": [[145, 155], ["lossfunc.batch_kp_2d_l1_loss", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.batch_kp_2d_l1_loss"], ["", "def", "landmark_loss", "(", "predicted_landmarks", ",", "landmarks_gt", ",", "weight", "=", "1.", ")", ":", "\n", "# (predicted_theta, predicted_verts, predicted_landmarks) = ringnet_outputs[-1]", "\n", "    ", "if", "torch", ".", "is_tensor", "(", "landmarks_gt", ")", "is", "not", "True", ":", "\n", "        ", "real_2d", "=", "torch", ".", "cat", "(", "landmarks_gt", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "real_2d", "=", "torch", ".", "cat", "(", "[", "landmarks_gt", ",", "torch", ".", "ones", "(", "(", "landmarks_gt", ".", "shape", "[", "0", "]", ",", "68", ",", "1", ")", ")", ".", "cuda", "(", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "# real_2d = torch.cat(landmarks_gt).cuda()", "\n", "\n", "", "loss_lmk_2d", "=", "batch_kp_2d_l1_loss", "(", "real_2d", ",", "predicted_landmarks", ")", "\n", "return", "loss_lmk_2d", "*", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.eye_dis": [[157, 164], ["torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "function", ["None"], ["", "def", "eye_dis", "(", "landmarks", ")", ":", "\n", "# left eye:  [38,42], [39,41] - 1", "\n", "# right eye: [44,48], [45,47] -1", "\n", "    ", "eye_up", "=", "landmarks", "[", ":", ",", "[", "37", ",", "38", ",", "43", ",", "44", "]", ",", ":", "]", "\n", "eye_bottom", "=", "landmarks", "[", ":", ",", "[", "41", ",", "40", ",", "47", ",", "46", "]", ",", ":", "]", "\n", "dis", "=", "torch", ".", "sqrt", "(", "(", "(", "eye_up", "-", "eye_bottom", ")", "**", "2", ")", ".", "sum", "(", "2", ")", ")", "#[bz, 4]", "\n", "return", "dis", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.eyed_loss": [[165, 175], ["lossfunc.eye_dis", "lossfunc.eye_dis", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.eye_dis", "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.eye_dis"], ["", "def", "eyed_loss", "(", "predicted_landmarks", ",", "landmarks_gt", ",", "weight", "=", "1.", ")", ":", "\n", "    ", "if", "torch", ".", "is_tensor", "(", "landmarks_gt", ")", "is", "not", "True", ":", "\n", "        ", "real_2d", "=", "torch", ".", "cat", "(", "landmarks_gt", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "real_2d", "=", "torch", ".", "cat", "(", "[", "landmarks_gt", ",", "torch", ".", "ones", "(", "(", "landmarks_gt", ".", "shape", "[", "0", "]", ",", "68", ",", "1", ")", ")", ".", "cuda", "(", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "pred_eyed", "=", "eye_dis", "(", "predicted_landmarks", "[", ":", ",", ":", ",", ":", "2", "]", ")", "\n", "gt_eyed", "=", "eye_dis", "(", "real_2d", "[", ":", ",", ":", ",", ":", "2", "]", ")", "\n", "\n", "loss", "=", "(", "pred_eyed", "-", "gt_eyed", ")", ".", "abs", "(", ")", ".", "mean", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.lip_dis": [[176, 183], ["torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "function", ["None"], ["", "def", "lip_dis", "(", "landmarks", ")", ":", "\n", "# up inner lip:  [62, 63, 64] - 1", "\n", "# down innder lip: [68, 67, 66] -1", "\n", "    ", "lip_up", "=", "landmarks", "[", ":", ",", "[", "61", ",", "62", ",", "63", "]", ",", ":", "]", "\n", "lip_down", "=", "landmarks", "[", ":", ",", "[", "67", ",", "66", ",", "65", "]", ",", ":", "]", "\n", "dis", "=", "torch", ".", "sqrt", "(", "(", "(", "lip_up", "-", "lip_down", ")", "**", "2", ")", ".", "sum", "(", "2", ")", ")", "#[bz, 4]", "\n", "return", "dis", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.lipd_loss": [[184, 194], ["lossfunc.lip_dis", "lossfunc.lip_dis", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.lip_dis", "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.lip_dis"], ["", "def", "lipd_loss", "(", "predicted_landmarks", ",", "landmarks_gt", ",", "weight", "=", "1.", ")", ":", "\n", "    ", "if", "torch", ".", "is_tensor", "(", "landmarks_gt", ")", "is", "not", "True", ":", "\n", "        ", "real_2d", "=", "torch", ".", "cat", "(", "landmarks_gt", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "real_2d", "=", "torch", ".", "cat", "(", "[", "landmarks_gt", ",", "torch", ".", "ones", "(", "(", "landmarks_gt", ".", "shape", "[", "0", "]", ",", "68", ",", "1", ")", ")", ".", "cuda", "(", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "pred_lipd", "=", "lip_dis", "(", "predicted_landmarks", "[", ":", ",", ":", ",", ":", "2", "]", ")", "\n", "gt_lipd", "=", "lip_dis", "(", "real_2d", "[", ":", ",", ":", ",", ":", "2", "]", ")", "\n", "\n", "loss", "=", "(", "pred_lipd", "-", "gt_lipd", ")", ".", "abs", "(", ")", ".", "mean", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.weighted_landmark_loss": [[195, 216], ["torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "lossfunc.batch_kp_2d_l1_loss", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.batch_kp_2d_l1_loss"], ["", "def", "weighted_landmark_loss", "(", "predicted_landmarks", ",", "landmarks_gt", ",", "weight", "=", "1.", ")", ":", "\n", "#smaller inner landmark weights", "\n", "# (predicted_theta, predicted_verts, predicted_landmarks) = ringnet_outputs[-1]", "\n", "# import ipdb; ipdb.set_trace()", "\n", "    ", "real_2d", "=", "landmarks_gt", "\n", "weights", "=", "torch", ".", "ones", "(", "(", "68", ",", ")", ")", ".", "cuda", "(", ")", "\n", "weights", "[", "5", ":", "7", "]", "=", "2", "\n", "weights", "[", "10", ":", "12", "]", "=", "2", "\n", "# nose points", "\n", "weights", "[", "27", ":", "36", "]", "=", "1.5", "\n", "weights", "[", "30", "]", "=", "3", "\n", "weights", "[", "31", "]", "=", "3", "\n", "weights", "[", "35", "]", "=", "3", "\n", "# inner mouth", "\n", "weights", "[", "60", ":", "68", "]", "=", "1.5", "\n", "weights", "[", "48", ":", "60", "]", "=", "1.5", "\n", "weights", "[", "48", "]", "=", "3", "\n", "weights", "[", "54", "]", "=", "3", "\n", "\n", "loss_lmk_2d", "=", "batch_kp_2d_l1_loss", "(", "real_2d", ",", "predicted_landmarks", ",", "weights", ")", "\n", "return", "loss_lmk_2d", "*", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.landmark_loss_tensor": [[217, 221], ["lossfunc.batch_kp_2d_l1_loss"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.batch_kp_2d_l1_loss"], ["", "def", "landmark_loss_tensor", "(", "predicted_landmarks", ",", "landmarks_gt", ",", "weight", "=", "1.", ")", ":", "\n", "# (predicted_theta, predicted_verts, predicted_landmarks) = ringnet_outputs[-1]", "\n", "    ", "loss_lmk_2d", "=", "batch_kp_2d_l1_loss", "(", "landmarks_gt", ",", "predicted_landmarks", ")", "\n", "return", "loss_lmk_2d", "*", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.ring_loss": [[223, 275], ["range", "range", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.nn.functional.relu().mean", "torch.nn.functional.relu().mean", "torch.nn.functional.relu().mean", "torch.nn.functional.relu().mean", "torch.nn.functional.relu().mean", "torch.nn.functional.relu().mean", "torch.nn.functional.relu().mean", "torch.nn.functional.relu().mean", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu"], "function", ["None"], ["", "def", "ring_loss", "(", "ring_outputs", ",", "ring_type", ",", "margin", ",", "weight", "=", "1.", ")", ":", "\n", "    ", "\"\"\"\n        computes ring loss for ring_outputs before FLAME decoder\n        Inputs:\n            ring_outputs = a list containing N streams of the ring; len(ring_outputs) = N\n            Each ring_outputs[i] is a tensor of (batch_size X shape_dim_num)\n            Aim is to force each row (same subject) of each stream to produce same shape\n            Each row of first N-1 strams are of the same subject and\n            the Nth stream is the different subject\n        \"\"\"", "\n", "tot_ring_loss", "=", "(", "ring_outputs", "[", "0", "]", "-", "ring_outputs", "[", "0", "]", ")", ".", "sum", "(", ")", "\n", "if", "ring_type", "==", "'51'", ":", "\n", "        ", "diff_stream", "=", "ring_outputs", "[", "-", "1", "]", "\n", "count", "=", "0.0", "\n", "for", "i", "in", "range", "(", "6", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "6", ")", ":", "\n", "                ", "pd", "=", "(", "ring_outputs", "[", "i", "]", "-", "ring_outputs", "[", "j", "]", ")", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ")", "\n", "nd", "=", "(", "ring_outputs", "[", "i", "]", "-", "diff_stream", ")", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ")", "\n", "tot_ring_loss", "=", "torch", ".", "add", "(", "tot_ring_loss", ",", "\n", "(", "torch", ".", "nn", ".", "functional", ".", "relu", "(", "margin", "+", "pd", "-", "nd", ")", ".", "mean", "(", ")", ")", ")", "\n", "count", "+=", "1.0", "\n", "\n", "", "", "", "elif", "ring_type", "==", "'33'", ":", "\n", "        ", "perm_code", "=", "[", "(", "0", ",", "1", ",", "3", ")", ",", "\n", "(", "0", ",", "1", ",", "4", ")", ",", "\n", "(", "0", ",", "1", ",", "5", ")", ",", "\n", "(", "0", ",", "2", ",", "3", ")", ",", "\n", "(", "0", ",", "2", ",", "4", ")", ",", "\n", "(", "0", ",", "2", ",", "5", ")", ",", "\n", "(", "1", ",", "0", ",", "3", ")", ",", "\n", "(", "1", ",", "0", ",", "4", ")", ",", "\n", "(", "1", ",", "0", ",", "5", ")", ",", "\n", "(", "1", ",", "2", ",", "3", ")", ",", "\n", "(", "1", ",", "2", ",", "4", ")", ",", "\n", "(", "1", ",", "2", ",", "5", ")", ",", "\n", "(", "2", ",", "0", ",", "3", ")", ",", "\n", "(", "2", ",", "0", ",", "4", ")", ",", "\n", "(", "2", ",", "0", ",", "5", ")", ",", "\n", "(", "2", ",", "1", ",", "3", ")", ",", "\n", "(", "2", ",", "1", ",", "4", ")", ",", "\n", "(", "2", ",", "1", ",", "5", ")", "]", "\n", "count", "=", "0.0", "\n", "for", "i", "in", "perm_code", ":", "\n", "            ", "pd", "=", "(", "ring_outputs", "[", "i", "[", "0", "]", "]", "-", "ring_outputs", "[", "i", "[", "1", "]", "]", ")", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ")", "\n", "nd", "=", "(", "ring_outputs", "[", "i", "[", "1", "]", "]", "-", "ring_outputs", "[", "i", "[", "2", "]", "]", ")", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ")", "\n", "tot_ring_loss", "=", "torch", ".", "add", "(", "tot_ring_loss", ",", "\n", "(", "torch", ".", "nn", ".", "functional", ".", "relu", "(", "margin", "+", "pd", "-", "nd", ")", ".", "mean", "(", ")", ")", ")", "\n", "count", "+=", "1.0", "\n", "\n", "", "", "tot_ring_loss", "=", "(", "1.0", "/", "count", ")", "*", "tot_ring_loss", "\n", "\n", "return", "tot_ring_loss", "*", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.gradient_dif_loss": [[278, 285], ["diff.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "function", ["None"], ["", "def", "gradient_dif_loss", "(", "prediction", ",", "gt", ")", ":", "\n", "    ", "prediction_diff_x", "=", "prediction", "[", ":", ",", ":", ",", "1", ":", "-", "1", ",", "1", ":", "]", "-", "prediction", "[", ":", ",", ":", ",", "1", ":", "-", "1", ",", ":", "-", "1", "]", "\n", "prediction_diff_y", "=", "prediction", "[", ":", ",", ":", ",", "1", ":", ",", "1", ":", "-", "1", "]", "-", "prediction", "[", ":", ",", ":", ",", "1", ":", ",", "1", ":", "-", "1", "]", "\n", "gt_x", "=", "gt", "[", ":", ",", ":", ",", "1", ":", "-", "1", ",", "1", ":", "]", "-", "gt", "[", ":", ",", ":", ",", "1", ":", "-", "1", ",", ":", "-", "1", "]", "\n", "gt_y", "=", "gt", "[", ":", ",", ":", ",", "1", ":", ",", "1", ":", "-", "1", "]", "-", "gt", "[", ":", ",", ":", ",", ":", "-", "1", ",", "1", ":", "-", "1", "]", "\n", "diff", "=", "torch", ".", "mean", "(", "(", "prediction_diff_x", "-", "gt_x", ")", "**", "2", ")", "+", "torch", ".", "mean", "(", "(", "prediction_diff_y", "-", "gt_y", ")", "**", "2", ")", "\n", "return", "diff", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.get_laplacian_kernel2d": [[287, 324], ["torch.ones", "torch.ones", "torch.ones", "torch.ones", "TypeError", "isinstance"], "function", ["None"], ["", "def", "get_laplacian_kernel2d", "(", "kernel_size", ":", "int", ")", ":", "\n", "    ", "r\"\"\"Function that returns Gaussian filter matrix coefficients.\n\n    Args:\n        kernel_size (int): filter size should be odd.\n\n    Returns:\n        Tensor: 2D tensor with laplacian filter matrix coefficients.\n\n    Shape:\n        - Output: :math:`(\\text{kernel_size}_x, \\text{kernel_size}_y)`\n\n    Examples::\n\n        >>> kornia.image.get_laplacian_kernel2d(3)\n        tensor([[ 1.,  1.,  1.],\n                [ 1., -8.,  1.],\n                [ 1.,  1.,  1.]])\n\n        >>> kornia.image.get_laplacian_kernel2d(5)\n        tensor([[  1.,   1.,   1.,   1.,   1.],\n                [  1.,   1.,   1.,   1.,   1.],\n                [  1.,   1., -24.,   1.,   1.],\n                [  1.,   1.,   1.,   1.,   1.],\n                [  1.,   1.,   1.,   1.,   1.]])\n\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "kernel_size", ",", "int", ")", "or", "kernel_size", "%", "2", "==", "0", "or", "kernel_size", "<=", "0", ":", "\n", "        ", "raise", "TypeError", "(", "\"ksize must be an odd positive integer. Got {}\"", "\n", ".", "format", "(", "kernel_size", ")", ")", "\n", "\n", "", "kernel", "=", "torch", ".", "ones", "(", "(", "kernel_size", ",", "kernel_size", ")", ")", "\n", "mid", "=", "kernel_size", "//", "2", "\n", "kernel", "[", "mid", ",", "mid", "]", "=", "1", "-", "kernel_size", "**", "2", "\n", "kernel_2d", ":", "torch", ".", "Tensor", "=", "kernel", "\n", "return", "kernel_2d", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.laplacian_hq_loss": [[325, 336], ["get_laplacian_kernel2d().to().to", "kernel.repeat.repeat", "torch.conv2d", "torch.conv2d", "get_laplacian_kernel2d().to", "lossfunc.get_laplacian_kernel2d"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.utils.util.get_laplacian_kernel2d"], ["", "def", "laplacian_hq_loss", "(", "prediction", ",", "gt", ")", ":", "\n", "# https://torchgeometry.readthedocs.io/en/latest/_modules/kornia/filters/laplacian.html", "\n", "    ", "b", ",", "c", ",", "h", ",", "w", "=", "prediction", ".", "shape", "\n", "kernel_size", "=", "3", "\n", "kernel", "=", "get_laplacian_kernel2d", "(", "kernel_size", ")", ".", "to", "(", "prediction", ".", "device", ")", ".", "to", "(", "prediction", ".", "dtype", ")", "\n", "kernel", "=", "kernel", ".", "repeat", "(", "c", ",", "1", ",", "1", ",", "1", ")", "\n", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", "\n", "lap_pre", "=", "F", ".", "conv2d", "(", "prediction", ",", "kernel", ",", "padding", "=", "padding", ",", "stride", "=", "1", ",", "groups", "=", "c", ")", "\n", "lap_gt", "=", "F", ".", "conv2d", "(", "gt", ",", "kernel", ",", "padding", "=", "padding", ",", "stride", "=", "1", ",", "groups", "=", "c", ")", "\n", "\n", "return", "(", "(", "lap_pre", "-", "lap_gt", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.trainer.Trainer.__init__": [[44, 71], ["trainer.Trainer.configure_optimizers", "trainer.Trainer.load_checkpoint", "utils.lossfunc.IDMRFLoss", "utils.lossfunc.VGGFace2Loss", "utils.util.load_local_mask", "loguru.logger.add", "os.path.join", "SummaryWriter", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.utils.trainer.Trainer.configure_optimizers", "home.repos.pwc.inspect_result.foivospar_NED.utils.trainer.Trainer.load_checkpoint", "home.repos.pwc.inspect_result.foivospar_NED.utils.util.load_local_mask"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "config", "=", "None", ",", "device", "=", "'cuda:0'", ")", ":", "\n", "        ", "if", "config", "is", "None", ":", "\n", "            ", "self", ".", "cfg", "=", "cfg", "\n", "", "else", ":", "\n", "            ", "self", ".", "cfg", "=", "config", "\n", "", "self", ".", "device", "=", "device", "\n", "self", ".", "batch_size", "=", "self", ".", "cfg", ".", "dataset", ".", "batch_size", "\n", "self", ".", "image_size", "=", "self", ".", "cfg", ".", "dataset", ".", "image_size", "\n", "self", ".", "uv_size", "=", "self", ".", "cfg", ".", "model", ".", "uv_size", "\n", "\n", "# deca model", "\n", "self", ".", "deca", "=", "model", "\n", "self", ".", "E_flame", "=", "self", ".", "deca", ".", "E_flame", "\n", "self", ".", "flametex", "=", "self", ".", "deca", ".", "flametex", "\n", "self", ".", "configure_optimizers", "(", ")", "\n", "self", ".", "load_checkpoint", "(", ")", "\n", "\n", "# initialize loss        ", "\n", "self", ".", "mrf_loss", "=", "lossfunc", ".", "IDMRFLoss", "(", ")", "\n", "self", ".", "id_loss", "=", "lossfunc", ".", "VGGFace2Loss", "(", ")", "\n", "self", ".", "face_attr_mask", "=", "util", ".", "load_local_mask", "(", "image_size", "=", "self", ".", "cfg", ".", "model", ".", "uv_size", ",", "mode", "=", "'bbx'", ")", "\n", "\n", "# intizalize loggers", "\n", "logger", ".", "add", "(", "os", ".", "path", ".", "join", "(", "self", ".", "cfg", ".", "output_dir", ",", "self", ".", "cfg", ".", "train", ".", "log_dir", ",", "'train.log'", ")", ")", "\n", "if", "self", ".", "cfg", ".", "train", ".", "write_summary", ":", "\n", "            ", "from", "torch", ".", "utils", ".", "tensorboard", "import", "SummaryWriter", "\n", "self", ".", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cfg", ".", "output_dir", ",", "self", ".", "cfg", ".", "train", ".", "log_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.trainer.Trainer.configure_optimizers": [[72, 77], ["torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "trainer.Trainer.E_flame.parameters"], "methods", ["None"], ["", "", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "self", ".", "opt", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "self", ".", "E_flame", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "cfg", ".", "train", ".", "lr", ",", "\n", "amsgrad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.trainer.Trainer.load_checkpoint": [[78, 100], ["trainer.Trainer.deca.model_dict", "os.path.exists", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "trainer.Trainer.keys", "utils.util.copy_state_dict", "loguru.logger.info", "loguru.logger.info", "os.path.exists", "os.path.join", "os.path.join", "trainer.Trainer.opt.state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "trainer.Trainer.keys", "loguru.logger.info", "torch.load.keys", "torch.load.keys", "torch.load.keys", "utils.util.copy_state_dict", "os.path.join", "torch.load.keys", "torch.load.keys", "torch.load.keys", "utils.util.copy_state_dict"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.decalib.deca.DECA.model_dict", "home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.foivospar_NED.utils.util.copy_state_dict", "home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.foivospar_NED.utils.util.copy_state_dict", "home.repos.pwc.inspect_result.foivospar_NED.utils.util.copy_state_dict"], ["", "def", "load_checkpoint", "(", "self", ")", ":", "\n", "        ", "model_dict", "=", "self", ".", "deca", ".", "model_dict", "(", ")", "\n", "# resume training, including model weight, opt, steps", "\n", "if", "self", ".", "cfg", ".", "train", ".", "resume", "and", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "cfg", ".", "output_dir", ",", "'model.tar'", ")", ")", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "cfg", ".", "output_dir", ",", "'model.tar'", ")", ")", "\n", "for", "key", "in", "model_dict", ".", "keys", "(", ")", ":", "\n", "                ", "if", "key", "in", "checkpoint", ".", "keys", "(", ")", ":", "\n", "                    ", "util", ".", "copy_state_dict", "(", "model_dict", "[", "key", "]", ",", "checkpoint", "[", "key", "]", ")", "\n", "", "", "util", ".", "copy_state_dict", "(", "self", ".", "opt", ".", "state_dict", "(", ")", ",", "checkpoint", "[", "'opt'", "]", ")", "\n", "self", ".", "global_step", "=", "checkpoint", "[", "'global_step'", "]", "\n", "logger", ".", "info", "(", "f\"resume training from {os.path.join(self.cfg.output_dir, 'model.tar')}\"", ")", "\n", "logger", ".", "info", "(", "f\"training start from step {self.global_step}\"", ")", "\n", "# load model weights only", "\n", "", "elif", "os", ".", "path", ".", "exists", "(", "self", ".", "cfg", ".", "pretrained_modelpath", ")", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "self", ".", "cfg", ".", "pretrained_modelpath", ")", "\n", "for", "key", "in", "model_dict", ".", "keys", "(", ")", ":", "\n", "                ", "if", "key", "in", "checkpoint", ".", "keys", "(", ")", ":", "\n", "                    ", "util", ".", "copy_state_dict", "(", "model_dict", "[", "key", "]", ",", "checkpoint", "[", "key", "]", ")", "\n", "", "", "self", ".", "global_step", "=", "0", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "'model path not found, start training from scratch'", ")", "\n", "self", ".", "global_step", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.trainer.Trainer.training_step": [[101, 192], ["trainer.Trainer.deca.train", "batch[].cuda", "torch.cat.view", "torch.cat.view", "torch.cat.view", "batch[].cuda", "torch.cat.view", "torch.cat.view", "torch.cat.view", "batch[].cuda", "torch.cat.view", "torch.cat.view", "torch.cat.view", "trainer.Trainer.deca.encode", "trainer.Trainer.deca.decode", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "losses.keys", "numpy.array", "new_order.flatten.flatten.flatten", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "trainer.Trainer.deca.uv_face_eye_mask.expand", "opdict[].detach", "trainer.Trainer.deca.render.add_SHlight", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "utils.lossfunc.weighted_landmark_loss", "utils.lossfunc.landmark_loss", "utils.lossfunc.eyed_loss", "utils.lossfunc.lipd_loss", "codedict[].detach", "opdict[].detach", "trainer.Trainer.id_loss", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "numpy.random.permutation", "range", "torch.relu", "torch.relu", "torch.relu", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.decalib.deca.DECA.encode", "home.repos.pwc.inspect_result.foivospar_NED.decalib.deca.DECA.decode", "home.repos.pwc.inspect_result.foivospar_NED.utils.renderer.SRenderY.add_SHlight", "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.weighted_landmark_loss", "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.landmark_loss", "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.eyed_loss", "home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.lipd_loss"], ["", "", "def", "training_step", "(", "self", ",", "batch", ",", "batch_nb", ")", ":", "\n", "        ", "self", ".", "deca", ".", "train", "(", ")", "\n", "\n", "# [B, K, 3, size, size] ==> [BxK, 3, size, size]", "\n", "images", "=", "batch", "[", "'image'", "]", ".", "cuda", "(", ")", ";", "images", "=", "images", ".", "view", "(", "-", "1", ",", "images", ".", "shape", "[", "-", "3", "]", ",", "images", ".", "shape", "[", "-", "2", "]", ",", "images", ".", "shape", "[", "-", "1", "]", ")", "\n", "lmk", "=", "batch", "[", "'landmark'", "]", ".", "cuda", "(", ")", ";", "lmk", "=", "lmk", ".", "view", "(", "-", "1", ",", "lmk", ".", "shape", "[", "-", "2", "]", ",", "lmk", ".", "shape", "[", "-", "1", "]", ")", "\n", "masks", "=", "batch", "[", "'mask'", "]", ".", "cuda", "(", ")", ";", "masks", "=", "masks", ".", "view", "(", "-", "1", ",", "images", ".", "shape", "[", "-", "2", "]", ",", "images", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "#-- encoder", "\n", "codedict", "=", "self", ".", "deca", ".", "encode", "(", "images", ")", "\n", "\n", "### shape constraints", "\n", "if", "self", ".", "cfg", ".", "loss", ".", "shape_consistency", "==", "'exchange'", ":", "\n", "            ", "'''\n            make sure s0, s1 is something to make shape close\n            the difference from ||so - s1|| is \n            the later encourage s0, s1 is cloase in l2 space, but not really ensure shape will be close\n            '''", "\n", "new_order", "=", "np", ".", "array", "(", "[", "np", ".", "random", ".", "permutation", "(", "self", ".", "K", ")", "+", "i", "*", "self", ".", "K", "for", "i", "in", "range", "(", "self", ".", "batch_size", ")", "]", ")", "\n", "new_order", "=", "new_order", ".", "flatten", "(", ")", "\n", "shapecode", "=", "codedict", "[", "'shape'", "]", "\n", "shapecode_new", "=", "shapecode", "[", "new_order", "]", "\n", "codedict", "[", "key", "]", "=", "torch", ".", "cat", "(", "[", "shapecode", ",", "shapecode_new", "]", ",", "dim", "=", "0", ")", "\n", "for", "key", "in", "[", "'tex'", ",", "'exp'", ",", "'pose'", ",", "'cam'", ",", "'light'", ",", "'images'", "]", ":", "\n", "                ", "code", "=", "codedict", "[", "key", "]", "\n", "codedict", "[", "key", "]", "=", "torch", ".", "cat", "(", "[", "code", ",", "code", "]", ",", "dim", "=", "0", ")", "\n", "## append gt", "\n", "", "images", "=", "torch", ".", "cat", "(", "[", "images", ",", "images", "]", ",", "dim", "=", "0", ")", "# images = images.view(-1, images.shape[-3], images.shape[-2], images.shape[-1]) ", "\n", "lmk", "=", "torch", ".", "cat", "(", "[", "lmk", ",", "lmk", "]", ",", "dim", "=", "0", ")", "#lmk = lmk.view(-1, lmk.shape[-2], lmk.shape[-1])", "\n", "masks", "=", "torch", ".", "cat", "(", "[", "masks", ",", "masks", "]", ",", "dim", "=", "0", ")", "\n", "# import ipdb; ipdb.set_trace()", "\n", "\n", "", "batch_size", "=", "images", ".", "shape", "[", "0", "]", "\n", "#-- decoder", "\n", "opdict", "=", "self", ".", "deca", ".", "decode", "(", "codedict", ",", "vis_lmk", "=", "False", ",", "return_vis", "=", "False", ",", "use_detail", "=", "False", ")", "\n", "\n", "#------ rendering", "\n", "# mask", "\n", "mask_face_eye", "=", "F", ".", "grid_sample", "(", "self", ".", "deca", ".", "uv_face_eye_mask", ".", "expand", "(", "batch_size", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", ",", "opdict", "[", "'grid'", "]", ".", "detach", "(", ")", ",", "align_corners", "=", "False", ")", "\n", "\n", "# images", "\n", "predicted_images", "=", "opdict", "[", "'rendered_images'", "]", "*", "mask_face_eye", "*", "opdict", "[", "'alpha_images'", "]", "\n", "opdict", "[", "'predicted_images'", "]", "=", "predicted_images", "\n", "opdict", "[", "'images'", "]", "=", "images", "\n", "opdict", "[", "'lmk'", "]", "=", "lmk", "\n", "\n", "#### ----------------------- Losses", "\n", "losses", "=", "{", "}", "\n", "\n", "############################# base shape", "\n", "predicted_landmarks", "=", "opdict", "[", "'landmarks2d'", "]", "\n", "if", "self", ".", "cfg", ".", "loss", ".", "useWlmk", ":", "\n", "            ", "losses", "[", "'landmark'", "]", "=", "lossfunc", ".", "weighted_landmark_loss", "(", "predicted_landmarks", ",", "lmk", ")", "*", "self", ".", "cfg", ".", "loss", ".", "lmk", "\n", "", "else", ":", "\n", "            ", "losses", "[", "'landmark'", "]", "=", "lossfunc", ".", "landmark_loss", "(", "predicted_landmarks", ",", "lmk", ")", "*", "self", ".", "cfg", ".", "loss", ".", "lmk", "\n", "", "if", "self", ".", "cfg", ".", "loss", ".", "eyed", ">", "0.", ":", "\n", "            ", "losses", "[", "'eye_distance'", "]", "=", "lossfunc", ".", "eyed_loss", "(", "predicted_landmarks", ",", "lmk", ")", "*", "self", ".", "cfg", ".", "loss", ".", "eyed", "\n", "", "if", "self", ".", "cfg", ".", "loss", ".", "lipd", ">", "0.", ":", "\n", "            ", "losses", "[", "'lip_distance'", "]", "=", "lossfunc", ".", "lipd_loss", "(", "predicted_landmarks", ",", "lmk", ")", "*", "self", ".", "cfg", ".", "loss", ".", "lipd", "\n", "\n", "", "if", "self", ".", "cfg", ".", "loss", ".", "useSeg", ":", "\n", "            ", "masks", "=", "masks", "[", ":", ",", "None", ",", ":", ",", ":", "]", "\n", "", "else", ":", "\n", "            ", "masks", "=", "mask_face_eye", "*", "opdict", "[", "'alpha_images'", "]", "\n", "\n", "", "if", "self", ".", "cfg", ".", "loss", ".", "photo", ">", "0.", ":", "\n", "            ", "losses", "[", "'photometric_texture'", "]", "=", "(", "masks", "*", "(", "predicted_images", "-", "images", ")", ".", "abs", "(", ")", ")", ".", "mean", "(", ")", "*", "self", ".", "cfg", ".", "loss", ".", "photo", "\n", "\n", "", "if", "self", ".", "cfg", ".", "loss", ".", "id", ">", "0.", ":", "\n", "            ", "shading_images", "=", "self", ".", "deca", ".", "render", ".", "add_SHlight", "(", "opdict", "[", "'normal_images'", "]", ",", "codedict", "[", "'light'", "]", ".", "detach", "(", ")", ")", "\n", "albedo_images", "=", "F", ".", "grid_sample", "(", "opdict", "[", "'albedo'", "]", ".", "detach", "(", ")", ",", "opdict", "[", "'grid'", "]", ",", "align_corners", "=", "False", ")", "\n", "overlay", "=", "albedo_images", "*", "shading_images", "*", "mask_face_eye", "+", "images", "*", "(", "1", "-", "mask_face_eye", ")", "\n", "losses", "[", "'identity'", "]", "=", "self", ".", "id_loss", "(", "overlay", ",", "images", ")", "*", "self", ".", "cfg", ".", "loss", ".", "id", "\n", "\n", "", "losses", "[", "'shape_reg'", "]", "=", "(", "torch", ".", "sum", "(", "codedict", "[", "'shape'", "]", "**", "2", ")", "/", "2", ")", "*", "self", ".", "cfg", ".", "loss", ".", "reg_shape", "\n", "losses", "[", "'expression_reg'", "]", "=", "(", "torch", ".", "sum", "(", "codedict", "[", "'exp'", "]", "**", "2", ")", "/", "2", ")", "*", "self", ".", "cfg", ".", "loss", ".", "reg_exp", "\n", "losses", "[", "'tex_reg'", "]", "=", "(", "torch", ".", "sum", "(", "codedict", "[", "'tex'", "]", "**", "2", ")", "/", "2", ")", "*", "self", ".", "cfg", ".", "loss", ".", "reg_tex", "\n", "losses", "[", "'light_reg'", "]", "=", "(", "(", "torch", ".", "mean", "(", "codedict", "[", "'light'", "]", ",", "dim", "=", "2", ")", "[", ":", ",", ":", ",", "None", "]", "-", "codedict", "[", "'light'", "]", ")", "**", "2", ")", ".", "mean", "(", ")", "*", "self", ".", "cfg", ".", "loss", ".", "reg_light", "\n", "if", "self", ".", "cfg", ".", "model", ".", "jaw_type", "==", "'euler'", ":", "\n", "# reg on jaw pose", "\n", "            ", "losses", "[", "'reg_jawpose_roll'", "]", "=", "(", "torch", ".", "sum", "(", "codedict", "[", "'euler_jaw_pose'", "]", "[", ":", ",", "-", "1", "]", "**", "2", ")", "/", "2", ")", "*", "10.", "\n", "losses", "[", "'reg_jawpose_close'", "]", "=", "(", "torch", ".", "sum", "(", "F", ".", "relu", "(", "-", "codedict", "[", "'euler_jaw_pose'", "]", "[", ":", ",", "0", "]", ")", "**", "2", ")", "/", "2", ")", "*", "10.", "\n", "\n", "#########################################################", "\n", "", "all_loss", "=", "0.", "\n", "losses_key", "=", "losses", ".", "keys", "(", ")", "\n", "# losses_key = ['landmark', 'shape_reg', 'expression_reg']", "\n", "for", "key", "in", "losses_key", ":", "\n", "            ", "all_loss", "=", "all_loss", "+", "losses", "[", "key", "]", "\n", "", "losses", "[", "'all_loss'", "]", "=", "all_loss", "\n", "return", "losses", ",", "opdict", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.trainer.Trainer.validation_step": [[194, 207], ["trainer.Trainer.deca.eval", "batch[].cuda", "images.view.view.view", "os.path.join", "utils.util.visualize_grid", "next", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "trainer.Trainer.deca.encode", "trainer.Trainer.deca.decode", "iter", "next"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.utils.util.visualize_grid", "home.repos.pwc.inspect_result.foivospar_NED.decalib.deca.DECA.encode", "home.repos.pwc.inspect_result.foivospar_NED.decalib.deca.DECA.decode"], ["", "def", "validation_step", "(", "self", ")", ":", "\n", "        ", "self", ".", "deca", ".", "eval", "(", ")", "\n", "try", ":", "\n", "            ", "batch", "=", "next", "(", "self", ".", "val_iter", ")", "\n", "", "except", ":", "\n", "            ", "self", ".", "val_iter", "=", "iter", "(", "self", ".", "val_dataloader", ")", "\n", "batch", "=", "next", "(", "self", ".", "val_iter", ")", "\n", "", "images", "=", "batch", "[", "'image'", "]", ".", "cuda", "(", ")", ";", "images", "=", "images", ".", "view", "(", "-", "1", ",", "images", ".", "shape", "[", "-", "3", "]", ",", "images", ".", "shape", "[", "-", "2", "]", ",", "images", ".", "shape", "[", "-", "1", "]", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "codedict", "=", "self", ".", "deca", ".", "encode", "(", "images", ")", "\n", "opdict", ",", "visdict", "=", "self", ".", "deca", ".", "decode", "(", "codedict", ")", "\n", "", "savepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cfg", ".", "output_dir", ",", "self", ".", "cfg", ".", "train", ".", "val_vis_dir", ",", "f'{self.global_step:08}.jpg'", ")", "\n", "util", ".", "visualize_grid", "(", "visdict", ",", "savepath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.trainer.Trainer.evaluate": [[208, 244], ["os.makedirs", "os.path.join", "os.makedirs", "trainer.Trainer.deca.eval", "NoWDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "trainer.Trainer.deca.flame.faces_tensor.cpu().numpy", "enumerate", "os.path.join", "tqdm.tqdm.tqdm", "batch[].cuda", "opdict[].cpu().numpy", "landmark_7.cpu().numpy.cpu().numpy.cpu().numpy", "range", "utils.util.visualize_grid", "trainer.Trainer.deca.flame.faces_tensor.cpu", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "trainer.Trainer.deca.encode", "trainer.Trainer.deca.decode", "os.makedirs", "utils.util.write_obj", "numpy.save", "os.path.join", "opdict[].cpu", "landmark_7.cpu().numpy.cpu().numpy.cpu", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.utils.util.visualize_grid", "home.repos.pwc.inspect_result.foivospar_NED.decalib.deca.DECA.encode", "home.repos.pwc.inspect_result.foivospar_NED.decalib.deca.DECA.decode", "home.repos.pwc.inspect_result.foivospar_NED.utils.util.write_obj", "home.repos.pwc.inspect_result.foivospar_NED.models.base_model.BaseModel.save"], ["", "def", "evaluate", "(", "self", ")", ":", "\n", "        ", "''' NOW validation \n        '''", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "self", ".", "cfg", ".", "output_dir", ",", "'NOW_validation'", ")", ",", "exist_ok", "=", "True", ")", "\n", "savefolder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cfg", ".", "output_dir", ",", "'NOW_validation'", ",", "f'step_{self.global_step:08}'", ")", "\n", "os", ".", "makedirs", "(", "savefolder", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "deca", ".", "eval", "(", ")", "\n", "# run now validation images", "\n", "from", ".", "datasets", ".", "now", "import", "NoWDataset", "#, NoWVal_old", "\n", "dataset", "=", "NoWDataset", "(", "scale", "=", "(", "self", ".", "cfg", ".", "dataset", ".", "scale_min", "+", "self", ".", "cfg", ".", "dataset", ".", "scale_max", ")", "/", "2", ")", "\n", "dataloader", "=", "DataLoader", "(", "dataset", ",", "batch_size", "=", "8", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "8", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "False", ")", "\n", "faces", "=", "self", ".", "deca", ".", "flame", ".", "faces_tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "tqdm", "(", "dataloader", ",", "desc", "=", "'now evaluation '", ")", ")", ":", "\n", "            ", "images", "=", "batch", "[", "'image'", "]", ".", "cuda", "(", ")", "\n", "imagename", "=", "batch", "[", "'imagename'", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "codedict", "=", "self", ".", "deca", ".", "encode", "(", "images", ")", "\n", "codedict", "[", "'exp'", "]", "[", ":", "]", "=", "0.", "\n", "codedict", "[", "'pose'", "]", "[", ":", "]", "=", "0.", "\n", "opdict", ",", "visdict", "=", "self", ".", "deca", ".", "decode", "(", "codedict", ")", "\n", "#-- save results for evaluation", "\n", "", "verts", "=", "opdict", "[", "'verts'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "landmark_51", "=", "opdict", "[", "'landmarks3d_world'", "]", "[", ":", ",", "17", ":", "]", "\n", "landmark_7", "=", "landmark_51", "[", ":", ",", "[", "19", ",", "22", ",", "25", ",", "28", ",", "16", ",", "31", ",", "37", "]", "]", "\n", "landmark_7", "=", "landmark_7", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "k", "in", "range", "(", "images", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "savefolder", ",", "imagename", "[", "k", "]", ")", ",", "exist_ok", "=", "True", ")", "\n", "# save mesh", "\n", "util", ".", "write_obj", "(", "os", ".", "path", ".", "join", "(", "savefolder", ",", "f'{imagename[k]}.obj'", ")", ",", "vertices", "=", "verts", "[", "k", "]", ",", "faces", "=", "faces", ")", "\n", "# save 7 landmarks for alignment", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "savefolder", ",", "f'{imagename[k]}.npy'", ")", ",", "landmark_7", "[", "k", "]", ")", "\n", "# visualize results to check", "\n", "", "util", ".", "visualize_grid", "(", "visdict", ",", "os", ".", "path", ".", "join", "(", "savefolder", ",", "f'{i}.jpg'", ")", ")", "\n", "# exit()", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.trainer.Trainer.prepare_data": [[247, 261], ["datasets.datasets.build_datasets.build_train", "datasets.datasets.build_datasets.build_val", "loguru.logger.info", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "iter", "len"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.datasets.build_datasets.build_train", "home.repos.pwc.inspect_result.foivospar_NED.datasets.build_datasets.build_val"], ["", "", "def", "prepare_data", "(", "self", ")", ":", "\n", "        ", "self", ".", "train_dataset", "=", "build_datasets", ".", "build_train", "(", "self", ".", "cfg", ".", "dataset", ")", "\n", "self", ".", "val_dataset", "=", "build_datasets", ".", "build_val", "(", "self", ".", "cfg", ".", "dataset", ")", "\n", "logger", ".", "info", "(", "'---- training data numbers: '", ",", "len", "(", "self", ".", "train_dataset", ")", ")", "\n", "\n", "self", ".", "train_dataloader", "=", "DataLoader", "(", "self", ".", "train_dataset", ",", "batch_size", "=", "self", ".", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "self", ".", "cfg", ".", "dataset", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "True", ")", "\n", "self", ".", "val_dataloader", "=", "DataLoader", "(", "self", ".", "val_dataset", ",", "batch_size", "=", "8", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "8", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "False", ")", "\n", "self", ".", "val_iter", "=", "iter", "(", "self", ".", "val_dataloader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.trainer.Trainer.fit": [[262, 311], ["trainer.Trainer.prepare_data", "int", "tqdm.tqdm.tqdm", "range", "enumerate", "len", "tqdm.tqdm.tqdm", "trainer.Trainer.training_step", "ipdb.set_trace", "trainer.Trainer.opt.zero_grad", "all_loss.backward", "trainer.Trainer.opt.step", "losses.items", "loguru.logger.info", "list", "trainer.Trainer.deca.render.render_shape", "os.path.join", "utils.util.visualize_grid", "trainer.Trainer.deca.model_dict", "trainer.Trainer.opt.state_dict", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "trainer.Trainer.validation_step", "trainer.Trainer.evaluate", "range", "utils.util.tensor_vis_landmarks", "utils.util.tensor_vis_landmarks", "os.path.join", "datetime.datetime.datetime.now().strftime", "trainer.Trainer.writer.add_scalar", "datetime.datetime.datetime.now"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.utils.trainer.Trainer.prepare_data", "home.repos.pwc.inspect_result.foivospar_NED.utils.trainer.Trainer.training_step", "home.repos.pwc.inspect_result.foivospar_NED.utils.renderer.SRenderY.render_shape", "home.repos.pwc.inspect_result.foivospar_NED.utils.util.visualize_grid", "home.repos.pwc.inspect_result.foivospar_NED.decalib.deca.DECA.model_dict", "home.repos.pwc.inspect_result.foivospar_NED.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.foivospar_NED.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.foivospar_NED.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.foivospar_NED.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.foivospar_NED.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.foivospar_NED.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.foivospar_NED.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.foivospar_NED.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.foivospar_NED.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.foivospar_NED.utils.trainer.Trainer.validation_step", "home.repos.pwc.inspect_result.foivospar_NED.utils.trainer.Trainer.evaluate", "home.repos.pwc.inspect_result.foivospar_NED.utils.util.tensor_vis_landmarks", "home.repos.pwc.inspect_result.foivospar_NED.utils.util.tensor_vis_landmarks"], ["", "def", "fit", "(", "self", ")", ":", "\n", "        ", "self", ".", "prepare_data", "(", ")", "\n", "\n", "iters_every_epoch", "=", "int", "(", "len", "(", "self", ".", "train_dataset", ")", "/", "self", ".", "batch_size", ")", "\n", "start_epoch", "=", "self", ".", "global_step", "//", "iters_every_epoch", "\n", "for", "epoch", "in", "tqdm", "(", "range", "(", "start_epoch", ",", "self", ".", "cfg", ".", "train", ".", "max_epochs", ")", ")", ":", "\n", "            ", "for", "step", ",", "batch", "in", "enumerate", "(", "tqdm", "(", "self", ".", "train_dataloader", ")", ")", ":", "\n", "                ", "losses", ",", "opdict", "=", "self", ".", "training_step", "(", "batch", ",", "step", ")", "\n", "import", "ipdb", ";", "ipdb", ".", "set_trace", "(", ")", "\n", "if", "self", ".", "global_step", "%", "self", ".", "cfg", ".", "train", ".", "log_steps", "==", "0", ":", "\n", "                    ", "loss_info", "=", "f\"ExpName: {self.cfg.exp_name} \\nEpoch: {epoch}, Iter: {step}/{iters_every_epoch}, Time: {datetime.now().strftime('%Y-%m-%d-%H:%M:%S')} \\n\"", "\n", "for", "k", ",", "v", "in", "losses", ".", "items", "(", ")", ":", "\n", "                        ", "loss_info", "=", "loss_info", "+", "f'{k}: {v:.4f}, '", "\n", "if", "self", ".", "cfg", ".", "train", ".", "write_summary", ":", "\n", "                            ", "self", ".", "writer", ".", "add_scalar", "(", "'train_loss/'", "+", "k", ",", "v", ",", "global_step", "=", "self", ".", "global_step", ")", "\n", "", "", "logger", ".", "info", "(", "loss_info", ")", "\n", "\n", "", "if", "self", ".", "global_step", "%", "self", ".", "cfg", ".", "train", ".", "vis_steps", "==", "0", ":", "\n", "                    ", "visind", "=", "list", "(", "range", "(", "8", ")", ")", "\n", "shape_images", "=", "self", ".", "deca", ".", "render", ".", "render_shape", "(", "opdict", "[", "'verts'", "]", ",", "opdict", "[", "'trans_verts'", "]", ")", "\n", "# import ipdb; ipdb.set_trace()", "\n", "visdict", "=", "{", "\n", "'inputs'", ":", "opdict", "[", "'images'", "]", "[", "visind", "]", ",", "\n", "'landmarks2d_gt'", ":", "util", ".", "tensor_vis_landmarks", "(", "opdict", "[", "'images'", "]", "[", "visind", "]", ",", "opdict", "[", "'lmk'", "]", "[", "visind", "]", ",", "isScale", "=", "True", ")", ",", "\n", "'landmarks2d'", ":", "util", ".", "tensor_vis_landmarks", "(", "opdict", "[", "'images'", "]", "[", "visind", "]", ",", "opdict", "[", "'landmarks2d'", "]", "[", "visind", "]", ",", "isScale", "=", "True", ")", ",", "\n", "'shape_images'", ":", "shape_images", "[", "visind", "]", ",", "\n", "'predicted_images'", ":", "opdict", "[", "'predicted_images'", "]", "[", "visind", "]", "\n", "}", "\n", "savepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cfg", ".", "output_dir", ",", "self", ".", "cfg", ".", "train", ".", "vis_dir", ",", "f'{self.global_step:06}.jpg'", ")", "\n", "util", ".", "visualize_grid", "(", "visdict", ",", "savepath", ")", "\n", "\n", "", "if", "self", ".", "global_step", "%", "self", ".", "cfg", ".", "train", ".", "checkpoint_steps", "==", "0", ":", "\n", "                    ", "model_dict", "=", "self", ".", "deca", ".", "model_dict", "(", ")", "\n", "model_dict", "[", "'opt'", "]", "=", "self", ".", "opt", ".", "state_dict", "(", ")", "\n", "model_dict", "[", "'global_step'", "]", "=", "self", ".", "global_step", "\n", "model_dict", "[", "'batch_size'", "]", "=", "self", ".", "batch_size", "\n", "torch", ".", "save", "(", "model_dict", ",", "os", ".", "path", ".", "join", "(", "self", ".", "cfg", ".", "output_dir", ",", "'model'", "+", "'.tar'", ")", ")", "\n", "\n", "", "if", "self", ".", "global_step", "%", "self", ".", "cfg", ".", "train", ".", "val_steps", "==", "0", ":", "\n", "                    ", "self", ".", "validation_step", "(", ")", "\n", "\n", "", "if", "self", ".", "global_step", "%", "self", ".", "cfg", ".", "train", ".", "eval_steps", "==", "0", ":", "\n", "                    ", "self", ".", "evaluate", "(", ")", "\n", "\n", "", "all_loss", "=", "losses", "[", "'all_loss'", "]", "\n", "self", ".", "opt", ".", "zero_grad", "(", ")", ";", "all_loss", ".", "backward", "(", ")", ";", "self", ".", "opt", ".", "step", "(", ")", "\n", "self", ".", "global_step", "+=", "1", "\n", "if", "self", ".", "global_step", ">", "self", ".", "cfg", ".", "train", ".", "max_steps", ":", "\n", "                    ", "break", "", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.foivospar_NED.utils.renderer.Pytorch3dRasterizer.__init__": [[35, 50], ["torch.Module.__init__", "util.dict2obj"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.datasets.datasets.TestData.__init__", "home.repos.pwc.inspect_result.foivospar_NED.utils.util.dict2obj"], ["def", "__init__", "(", "self", ",", "image_size", "=", "224", ")", ":", "\n", "        ", "\"\"\"\n        use fixed raster_settings for rendering faces\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "raster_settings", "=", "{", "\n", "'image_size'", ":", "image_size", ",", "\n", "'blur_radius'", ":", "0.0", ",", "\n", "'faces_per_pixel'", ":", "1", ",", "\n", "'bin_size'", ":", "None", ",", "\n", "'max_faces_per_bin'", ":", "None", ",", "\n", "'perspective_correct'", ":", "False", ",", "\n", "}", "\n", "raster_settings", "=", "util", ".", "dict2obj", "(", "raster_settings", ")", "\n", "self", ".", "raster_settings", "=", "raster_settings", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.renderer.Pytorch3dRasterizer.forward": [[51, 79], ["vertices.clone", "pytorch3d.structures.Meshes", "pytorch3d.renderer.mesh.rasterize_meshes", "attributes.view.view.clone", "attributes.view.view.view", "pix_to_face.clone.clone.clone", "pix_to_face.clone.clone.view().expand", "attributes.view.view.gather().view", "pixel_vals[].permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "vertices.clone.float", "faces.long", "pix_to_face.clone.clone.view", "attributes.view.view.gather"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "vertices", ",", "faces", ",", "attributes", "=", "None", ")", ":", "\n", "        ", "fixed_vertices", "=", "vertices", ".", "clone", "(", ")", "\n", "fixed_vertices", "[", "...", ",", ":", "2", "]", "=", "-", "fixed_vertices", "[", "...", ",", ":", "2", "]", "\n", "meshes_screen", "=", "Meshes", "(", "verts", "=", "fixed_vertices", ".", "float", "(", ")", ",", "faces", "=", "faces", ".", "long", "(", ")", ")", "\n", "raster_settings", "=", "self", ".", "raster_settings", "\n", "pix_to_face", ",", "zbuf", ",", "bary_coords", ",", "dists", "=", "rasterize_meshes", "(", "\n", "meshes_screen", ",", "\n", "image_size", "=", "raster_settings", ".", "image_size", ",", "\n", "blur_radius", "=", "raster_settings", ".", "blur_radius", ",", "\n", "faces_per_pixel", "=", "raster_settings", ".", "faces_per_pixel", ",", "\n", "bin_size", "=", "raster_settings", ".", "bin_size", ",", "\n", "max_faces_per_bin", "=", "raster_settings", ".", "max_faces_per_bin", ",", "\n", "perspective_correct", "=", "raster_settings", ".", "perspective_correct", ",", "\n", ")", "\n", "vismask", "=", "(", "pix_to_face", ">", "-", "1", ")", ".", "float", "(", ")", "\n", "D", "=", "attributes", ".", "shape", "[", "-", "1", "]", "\n", "attributes", "=", "attributes", ".", "clone", "(", ")", ";", "attributes", "=", "attributes", ".", "view", "(", "attributes", ".", "shape", "[", "0", "]", "*", "attributes", ".", "shape", "[", "1", "]", ",", "3", ",", "attributes", ".", "shape", "[", "-", "1", "]", ")", "\n", "N", ",", "H", ",", "W", ",", "K", ",", "_", "=", "bary_coords", ".", "shape", "\n", "mask", "=", "pix_to_face", "==", "-", "1", "\n", "pix_to_face", "=", "pix_to_face", ".", "clone", "(", ")", "\n", "pix_to_face", "[", "mask", "]", "=", "0", "\n", "idx", "=", "pix_to_face", ".", "view", "(", "N", "*", "H", "*", "W", "*", "K", ",", "1", ",", "1", ")", ".", "expand", "(", "N", "*", "H", "*", "W", "*", "K", ",", "3", ",", "D", ")", "\n", "pixel_face_vals", "=", "attributes", ".", "gather", "(", "0", ",", "idx", ")", ".", "view", "(", "N", ",", "H", ",", "W", ",", "K", ",", "3", ",", "D", ")", "\n", "pixel_vals", "=", "(", "bary_coords", "[", "...", ",", "None", "]", "*", "pixel_face_vals", ")", ".", "sum", "(", "dim", "=", "-", "2", ")", "\n", "pixel_vals", "[", "mask", "]", "=", "0", "# Replace masked values in output.", "\n", "pixel_vals", "=", "pixel_vals", "[", ":", ",", ":", ",", ":", ",", "0", "]", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "pixel_vals", "=", "torch", ".", "cat", "(", "[", "pixel_vals", ",", "vismask", "[", ":", ",", ":", ",", ":", ",", "0", "]", "[", ":", ",", "None", ",", ":", ",", ":", "]", "]", ",", "dim", "=", "1", ")", "\n", "return", "pixel_vals", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.renderer.SRenderY.__init__": [[81, 120], ["torch.Module.__init__", "pytorch3d.io.load_obj", "util.generate_triangles", "renderer.SRenderY.register_buffer", "renderer.SRenderY.register_buffer", "renderer.SRenderY.register_buffer", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "util.face_vertices", "renderer.SRenderY.register_buffer", "renderer.SRenderY.register_buffer", "renderer.SRenderY.register_buffer", "util.face_vertices", "renderer.SRenderY.register_buffer", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "renderer.SRenderY.register_buffer", "renderer.Pytorch3dRasterizer", "renderer.Pytorch3dRasterizer", "[].repeat().float", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "[].repeat", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "faces.max", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.datasets.datasets.TestData.__init__", "home.repos.pwc.inspect_result.foivospar_NED.utils.util.generate_triangles", "home.repos.pwc.inspect_result.foivospar_NED.utils.util.face_vertices", "home.repos.pwc.inspect_result.foivospar_NED.utils.util.face_vertices"], ["    ", "def", "__init__", "(", "self", ",", "image_size", ",", "obj_filename", ",", "uv_size", "=", "256", ",", "rasterizer_type", "=", "'pytorch3d'", ")", ":", "\n", "        ", "super", "(", "SRenderY", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "image_size", "=", "image_size", "\n", "self", ".", "uv_size", "=", "uv_size", "\n", "\n", "verts", ",", "faces", ",", "aux", "=", "load_obj", "(", "obj_filename", ")", "\n", "uvcoords", "=", "aux", ".", "verts_uvs", "[", "None", ",", "...", "]", "# (N, V, 2)", "\n", "uvfaces", "=", "faces", ".", "textures_idx", "[", "None", ",", "...", "]", "# (N, F, 3)", "\n", "faces", "=", "faces", ".", "verts_idx", "[", "None", ",", "...", "]", "\n", "\n", "if", "rasterizer_type", "==", "'pytorch3d'", ":", "\n", "            ", "self", ".", "rasterizer", "=", "Pytorch3dRasterizer", "(", "image_size", ")", "\n", "self", ".", "uv_rasterizer", "=", "Pytorch3dRasterizer", "(", "uv_size", ")", "\n", "\n", "# faces", "\n", "", "dense_triangles", "=", "util", ".", "generate_triangles", "(", "uv_size", ",", "uv_size", ")", "\n", "self", ".", "register_buffer", "(", "'dense_faces'", ",", "torch", ".", "from_numpy", "(", "dense_triangles", ")", ".", "long", "(", ")", "[", "None", ",", ":", ",", ":", "]", ")", "\n", "self", ".", "register_buffer", "(", "'faces'", ",", "faces", ")", "\n", "self", ".", "register_buffer", "(", "'raw_uvcoords'", ",", "uvcoords", ")", "\n", "\n", "# uv coords", "\n", "uvcoords", "=", "torch", ".", "cat", "(", "[", "uvcoords", ",", "uvcoords", "[", ":", ",", ":", ",", "0", ":", "1", "]", "*", "0.", "+", "1.", "]", ",", "-", "1", ")", "#[bz, ntv, 3]", "\n", "uvcoords", "=", "uvcoords", "*", "2", "-", "1", ";", "uvcoords", "[", "...", ",", "1", "]", "=", "-", "uvcoords", "[", "...", ",", "1", "]", "\n", "face_uvcoords", "=", "util", ".", "face_vertices", "(", "uvcoords", ",", "uvfaces", ")", "\n", "self", ".", "register_buffer", "(", "'uvcoords'", ",", "uvcoords", ")", "\n", "self", ".", "register_buffer", "(", "'uvfaces'", ",", "uvfaces", ")", "\n", "self", ".", "register_buffer", "(", "'face_uvcoords'", ",", "face_uvcoords", ")", "\n", "\n", "# shape colors, for rendering shape overlay", "\n", "colors", "=", "torch", ".", "tensor", "(", "[", "180", ",", "180", ",", "180", "]", ")", "[", "None", ",", "None", ",", ":", "]", ".", "repeat", "(", "1", ",", "faces", ".", "max", "(", ")", "+", "1", ",", "1", ")", ".", "float", "(", ")", "/", "255.", "\n", "face_colors", "=", "util", ".", "face_vertices", "(", "colors", ",", "faces", ")", "\n", "self", ".", "register_buffer", "(", "'face_colors'", ",", "face_colors", ")", "\n", "\n", "## SH factors for lighting", "\n", "pi", "=", "np", ".", "pi", "\n", "constant_factor", "=", "torch", ".", "tensor", "(", "[", "1", "/", "np", ".", "sqrt", "(", "4", "*", "pi", ")", ",", "(", "(", "2", "*", "pi", ")", "/", "3", ")", "*", "(", "np", ".", "sqrt", "(", "3", "/", "(", "4", "*", "pi", ")", ")", ")", ",", "(", "(", "2", "*", "pi", ")", "/", "3", ")", "*", "(", "np", ".", "sqrt", "(", "3", "/", "(", "4", "*", "pi", ")", ")", ")", ",", "(", "(", "2", "*", "pi", ")", "/", "3", ")", "*", "(", "np", ".", "sqrt", "(", "3", "/", "(", "4", "*", "pi", ")", ")", ")", ",", "(", "pi", "/", "4", ")", "*", "(", "3", ")", "*", "(", "np", ".", "sqrt", "(", "5", "/", "(", "12", "*", "pi", ")", ")", ")", ",", "(", "pi", "/", "4", ")", "*", "(", "3", ")", "*", "(", "np", ".", "sqrt", "(", "5", "/", "(", "12", "*", "pi", ")", ")", ")", ",", "(", "pi", "/", "4", ")", "*", "(", "3", ")", "*", "(", "np", ".", "sqrt", "(", "5", "/", "(", "12", "*", "pi", ")", ")", ")", ",", "(", "pi", "/", "4", ")", "*", "(", "3", "/", "2", ")", "*", "(", "np", ".", "sqrt", "(", "5", "/", "(", "12", "*", "pi", ")", ")", ")", ",", "(", "pi", "/", "4", ")", "*", "(", "1", "/", "2", ")", "*", "(", "np", ".", "sqrt", "(", "5", "/", "(", "4", "*", "pi", ")", ")", ")", "]", ")", ".", "float", "(", ")", "\n", "self", ".", "register_buffer", "(", "'constant_factor'", ",", "constant_factor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.renderer.SRenderY.forward": [[121, 192], ["util.face_vertices", "util.vertex_normals", "util.face_vertices", "util.vertex_normals", "util.face_vertices", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "renderer.SRenderY.rasterizer", "[].detach", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "rendering[].detach", "renderer.SRenderY.faces.expand", "renderer.SRenderY.faces.expand", "renderer.SRenderY.faces.expand", "renderer.SRenderY.faces.expand", "renderer.SRenderY.faces.expand", "renderer.SRenderY.faces.expand", "uvcoords_images.permute", "renderer.SRenderY.face_uvcoords.expand", "util.face_vertices.detach", "util.face_vertices.detach", "renderer.SRenderY.add_SHlight", "images.detach", "rendering[].detach", "renderer.SRenderY.add_pointlight", "renderer.SRenderY.reshape().permute", "renderer.SRenderY.add_directionlight", "renderer.SRenderY.reshape().permute", "rendering[].detach.permute().reshape", "normal_images.permute().reshape", "normal_images.permute().reshape", "renderer.SRenderY.reshape", "renderer.SRenderY.reshape", "rendering[].detach.permute", "normal_images.permute", "normal_images.permute"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.utils.util.face_vertices", "home.repos.pwc.inspect_result.foivospar_NED.utils.util.vertex_normals", "home.repos.pwc.inspect_result.foivospar_NED.utils.util.face_vertices", "home.repos.pwc.inspect_result.foivospar_NED.utils.util.vertex_normals", "home.repos.pwc.inspect_result.foivospar_NED.utils.util.face_vertices", "home.repos.pwc.inspect_result.foivospar_NED.utils.renderer.SRenderY.add_SHlight", "home.repos.pwc.inspect_result.foivospar_NED.utils.renderer.SRenderY.add_pointlight", "home.repos.pwc.inspect_result.foivospar_NED.utils.renderer.SRenderY.add_directionlight", "home.repos.pwc.inspect_result.foivospar_NED.util.util.reshape", "home.repos.pwc.inspect_result.foivospar_NED.util.util.reshape", "home.repos.pwc.inspect_result.foivospar_NED.util.util.reshape", "home.repos.pwc.inspect_result.foivospar_NED.util.util.reshape", "home.repos.pwc.inspect_result.foivospar_NED.util.util.reshape"], ["", "def", "forward", "(", "self", ",", "vertices", ",", "transformed_vertices", ",", "albedos", ",", "lights", "=", "None", ",", "light_type", "=", "'point'", ")", ":", "\n", "        ", "'''\n        -- Texture Rendering\n        vertices: [batch_size, V, 3], vertices in world space, for calculating normals, then shading\n        transformed_vertices: [batch_size, V, 3], range:normalized to [-1,1], projected vertices in image space (that is aligned to the iamge pixel), for rasterization\n        albedos: [batch_size, 3, h, w], uv map\n        lights:\n            spherical homarnic: [N, 9(shcoeff), 3(rgb)]\n            points/directional lighting: [N, n_lights, 6(xyzrgb)]\n        light_type:\n            point or directional\n        '''", "\n", "batch_size", "=", "vertices", ".", "shape", "[", "0", "]", "\n", "## rasterizer near 0 far 100. move mesh so minz larger than 0", "\n", "transformed_vertices", "[", ":", ",", ":", ",", "2", "]", "=", "transformed_vertices", "[", ":", ",", ":", ",", "2", "]", "+", "10", "\n", "# attributes", "\n", "face_vertices", "=", "util", ".", "face_vertices", "(", "vertices", ",", "self", ".", "faces", ".", "expand", "(", "batch_size", ",", "-", "1", ",", "-", "1", ")", ")", "\n", "normals", "=", "util", ".", "vertex_normals", "(", "vertices", ",", "self", ".", "faces", ".", "expand", "(", "batch_size", ",", "-", "1", ",", "-", "1", ")", ")", ";", "face_normals", "=", "util", ".", "face_vertices", "(", "normals", ",", "self", ".", "faces", ".", "expand", "(", "batch_size", ",", "-", "1", ",", "-", "1", ")", ")", "\n", "transformed_normals", "=", "util", ".", "vertex_normals", "(", "transformed_vertices", ",", "self", ".", "faces", ".", "expand", "(", "batch_size", ",", "-", "1", ",", "-", "1", ")", ")", ";", "transformed_face_normals", "=", "util", ".", "face_vertices", "(", "transformed_normals", ",", "self", ".", "faces", ".", "expand", "(", "batch_size", ",", "-", "1", ",", "-", "1", ")", ")", "\n", "\n", "attributes", "=", "torch", ".", "cat", "(", "[", "self", ".", "face_uvcoords", ".", "expand", "(", "batch_size", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", ",", "\n", "transformed_face_normals", ".", "detach", "(", ")", ",", "\n", "face_vertices", ".", "detach", "(", ")", ",", "\n", "face_normals", "]", ",", "\n", "-", "1", ")", "\n", "# rasterize", "\n", "rendering", "=", "self", ".", "rasterizer", "(", "transformed_vertices", ",", "self", ".", "faces", ".", "expand", "(", "batch_size", ",", "-", "1", ",", "-", "1", ")", ",", "attributes", ")", "\n", "\n", "####", "\n", "# vis mask", "\n", "alpha_images", "=", "rendering", "[", ":", ",", "-", "1", ",", ":", ",", ":", "]", "[", ":", ",", "None", ",", ":", ",", ":", "]", ".", "detach", "(", ")", "\n", "\n", "# albedo", "\n", "uvcoords_images", "=", "rendering", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", ";", "grid", "=", "(", "uvcoords_images", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "[", ":", ",", ":", ",", ":", ",", ":", "2", "]", "\n", "albedo_images", "=", "F", ".", "grid_sample", "(", "albedos", ",", "grid", ",", "align_corners", "=", "False", ")", "\n", "\n", "# visible mask for pixels with positive normal direction", "\n", "transformed_normal_map", "=", "rendering", "[", ":", ",", "3", ":", "6", ",", ":", ",", ":", "]", ".", "detach", "(", ")", "\n", "pos_mask", "=", "(", "transformed_normal_map", "[", ":", ",", "2", ":", ",", ":", ",", ":", "]", "<", "-", "0.05", ")", ".", "float", "(", ")", "\n", "\n", "# shading", "\n", "normal_images", "=", "rendering", "[", ":", ",", "9", ":", "12", ",", ":", ",", ":", "]", "\n", "if", "lights", "is", "not", "None", ":", "\n", "            ", "if", "lights", ".", "shape", "[", "1", "]", "==", "9", ":", "\n", "                ", "shading_images", "=", "self", ".", "add_SHlight", "(", "normal_images", ",", "lights", ")", "\n", "", "else", ":", "\n", "                ", "if", "light_type", "==", "'point'", ":", "\n", "                    ", "vertice_images", "=", "rendering", "[", ":", ",", "6", ":", "9", ",", ":", ",", ":", "]", ".", "detach", "(", ")", "\n", "shading", "=", "self", ".", "add_pointlight", "(", "vertice_images", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "[", "batch_size", ",", "-", "1", ",", "3", "]", ")", ",", "normal_images", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "[", "batch_size", ",", "-", "1", ",", "3", "]", ")", ",", "lights", ")", "\n", "shading_images", "=", "shading", ".", "reshape", "(", "[", "batch_size", ",", "albedo_images", ".", "shape", "[", "2", "]", ",", "albedo_images", ".", "shape", "[", "3", "]", ",", "3", "]", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "", "else", ":", "\n", "                    ", "shading", "=", "self", ".", "add_directionlight", "(", "normal_images", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "[", "batch_size", ",", "-", "1", ",", "3", "]", ")", ",", "lights", ")", "\n", "shading_images", "=", "shading", ".", "reshape", "(", "[", "batch_size", ",", "albedo_images", ".", "shape", "[", "2", "]", ",", "albedo_images", ".", "shape", "[", "3", "]", ",", "3", "]", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "", "", "images", "=", "albedo_images", "*", "shading_images", "\n", "", "else", ":", "\n", "            ", "images", "=", "albedo_images", "\n", "shading_images", "=", "images", ".", "detach", "(", ")", "*", "0.", "\n", "\n", "", "outputs", "=", "{", "\n", "'images'", ":", "images", "*", "alpha_images", ",", "\n", "'albedo_images'", ":", "albedo_images", "*", "alpha_images", ",", "\n", "'alpha_images'", ":", "alpha_images", ",", "\n", "'pos_mask'", ":", "pos_mask", ",", "\n", "'shading_images'", ":", "shading_images", ",", "\n", "'grid'", ":", "grid", ",", "\n", "'normals'", ":", "normals", ",", "\n", "'normal_images'", ":", "normal_images", "*", "alpha_images", ",", "\n", "'transformed_normals'", ":", "transformed_normals", ",", "\n", "}", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.renderer.SRenderY.add_SHlight": [[193, 207], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "add_SHlight", "(", "self", ",", "normal_images", ",", "sh_coeff", ")", ":", "\n", "        ", "'''\n            sh_coeff: [bz, 9, 3]\n        '''", "\n", "N", "=", "normal_images", "\n", "sh", "=", "torch", ".", "stack", "(", "[", "\n", "N", "[", ":", ",", "0", "]", "*", "0.", "+", "1.", ",", "N", "[", ":", ",", "0", "]", ",", "N", "[", ":", ",", "1", "]", ",", "N", "[", ":", ",", "2", "]", ",", "N", "[", ":", ",", "0", "]", "*", "N", "[", ":", ",", "1", "]", ",", "N", "[", ":", ",", "0", "]", "*", "N", "[", ":", ",", "2", "]", ",", "\n", "N", "[", ":", ",", "1", "]", "*", "N", "[", ":", ",", "2", "]", ",", "N", "[", ":", ",", "0", "]", "**", "2", "-", "N", "[", ":", ",", "1", "]", "**", "2", ",", "3", "*", "(", "N", "[", ":", ",", "2", "]", "**", "2", ")", "-", "1", "\n", "]", ",", "\n", "1", ")", "# [bz, 9, h, w]", "\n", "sh", "=", "sh", "*", "self", ".", "constant_factor", "[", "None", ",", ":", ",", "None", ",", "None", "]", "\n", "shading", "=", "torch", ".", "sum", "(", "sh_coeff", "[", ":", ",", ":", ",", ":", ",", "None", ",", "None", "]", "*", "sh", "[", ":", ",", ":", ",", "None", ",", ":", ",", ":", "]", ",", "1", ")", "# [bz, 9, 3, h, w]", "\n", "return", "shading", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.renderer.SRenderY.add_pointlight": [[208, 221], ["torch.normalize", "torch.normalize", "torch.normalize", "shading.mean"], "methods", ["None"], ["", "def", "add_pointlight", "(", "self", ",", "vertices", ",", "normals", ",", "lights", ")", ":", "\n", "        ", "'''\n            vertices: [bz, nv, 3]\n            lights: [bz, nlight, 6]\n        returns:\n            shading: [bz, nv, 3]\n        '''", "\n", "light_positions", "=", "lights", "[", ":", ",", ":", ",", ":", "3", "]", ";", "light_intensities", "=", "lights", "[", ":", ",", ":", ",", "3", ":", "]", "\n", "directions_to_lights", "=", "F", ".", "normalize", "(", "light_positions", "[", ":", ",", ":", ",", "None", ",", ":", "]", "-", "vertices", "[", ":", ",", "None", ",", ":", ",", ":", "]", ",", "dim", "=", "3", ")", "\n", "# normals_dot_lights = torch.clamp((normals[:,None,:,:]*directions_to_lights).sum(dim=3), 0., 1.)", "\n", "normals_dot_lights", "=", "(", "normals", "[", ":", ",", "None", ",", ":", ",", ":", "]", "*", "directions_to_lights", ")", ".", "sum", "(", "dim", "=", "3", ")", "\n", "shading", "=", "normals_dot_lights", "[", ":", ",", ":", ",", ":", ",", "None", "]", "*", "light_intensities", "[", ":", ",", ":", ",", "None", ",", ":", "]", "\n", "return", "shading", ".", "mean", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.renderer.SRenderY.add_directionlight": [[222, 236], ["torch.normalize", "torch.normalize", "torch.normalize", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "shading.mean", "light_direction[].expand"], "methods", ["None"], ["", "def", "add_directionlight", "(", "self", ",", "normals", ",", "lights", ")", ":", "\n", "        ", "'''\n            normals: [bz, nv, 3]\n            lights: [bz, nlight, 6]\n        returns:\n            shading: [bz, nv, 3]\n        '''", "\n", "light_direction", "=", "lights", "[", ":", ",", ":", ",", ":", "3", "]", ";", "light_intensities", "=", "lights", "[", ":", ",", ":", ",", "3", ":", "]", "\n", "directions_to_lights", "=", "F", ".", "normalize", "(", "light_direction", "[", ":", ",", ":", ",", "None", ",", ":", "]", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "normals", ".", "shape", "[", "1", "]", ",", "-", "1", ")", ",", "dim", "=", "3", ")", "\n", "# normals_dot_lights = torch.clamp((normals[:,None,:,:]*directions_to_lights).sum(dim=3), 0., 1.)", "\n", "# normals_dot_lights = (normals[:,None,:,:]*directions_to_lights).sum(dim=3)", "\n", "normals_dot_lights", "=", "torch", ".", "clamp", "(", "(", "normals", "[", ":", ",", "None", ",", ":", ",", ":", "]", "*", "directions_to_lights", ")", ".", "sum", "(", "dim", "=", "3", ")", ",", "0.", ",", "1.", ")", "\n", "shading", "=", "normals_dot_lights", "[", ":", ",", ":", ",", ":", ",", "None", "]", "*", "light_intensities", "[", ":", ",", ":", ",", "None", ",", ":", "]", "\n", "return", "shading", ".", "mean", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.renderer.SRenderY.render_shape": [[237, 294], ["util.face_vertices", "util.vertex_normals", "util.face_vertices", "util.vertex_normals", "util.face_vertices", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "renderer.SRenderY.rasterizer", "[].detach", "rendering[].detach", "rendering[].detach", "rendering[].detach", "renderer.SRenderY.add_directionlight", "renderer.SRenderY.reshape().permute().contiguous", "[].expand().float", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "renderer.SRenderY.faces.expand", "renderer.SRenderY.faces.expand", "renderer.SRenderY.faces.expand", "renderer.SRenderY.faces.expand", "renderer.SRenderY.faces.expand", "renderer.SRenderY.faces.expand", "rendering[].detach.permute().reshape", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "renderer.SRenderY.face_colors.expand", "util.face_vertices.detach", "util.face_vertices.detach", "renderer.SRenderY.reshape().permute", "[].expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "rendering[].detach.permute", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "renderer.SRenderY.reshape", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.utils.util.face_vertices", "home.repos.pwc.inspect_result.foivospar_NED.utils.util.vertex_normals", "home.repos.pwc.inspect_result.foivospar_NED.utils.util.face_vertices", "home.repos.pwc.inspect_result.foivospar_NED.utils.util.vertex_normals", "home.repos.pwc.inspect_result.foivospar_NED.utils.util.face_vertices", "home.repos.pwc.inspect_result.foivospar_NED.utils.renderer.SRenderY.add_directionlight", "home.repos.pwc.inspect_result.foivospar_NED.util.util.reshape", "home.repos.pwc.inspect_result.foivospar_NED.util.util.reshape"], ["", "def", "render_shape", "(", "self", ",", "vertices", ",", "transformed_vertices", ",", "images", "=", "None", ",", "detail_normal_images", "=", "None", ",", "lights", "=", "None", ")", ":", "\n", "        ", "'''\n        -- rendering shape with detail normal map\n        '''", "\n", "batch_size", "=", "vertices", ".", "shape", "[", "0", "]", "\n", "# set lighting", "\n", "if", "lights", "is", "None", ":", "\n", "            ", "light_positions", "=", "torch", ".", "tensor", "(", "\n", "[", "\n", "[", "-", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "-", "1", ",", "-", "1", ",", "1", "]", ",", "\n", "[", "1", ",", "-", "1", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "\n", "]", "\n", ")", "[", "None", ",", ":", ",", ":", "]", ".", "expand", "(", "batch_size", ",", "-", "1", ",", "-", "1", ")", ".", "float", "(", ")", "\n", "light_intensities", "=", "torch", ".", "ones_like", "(", "light_positions", ")", ".", "float", "(", ")", "*", "1.7", "\n", "lights", "=", "torch", ".", "cat", "(", "(", "light_positions", ",", "light_intensities", ")", ",", "2", ")", ".", "to", "(", "vertices", ".", "device", ")", "\n", "", "transformed_vertices", "[", ":", ",", ":", ",", "2", "]", "=", "transformed_vertices", "[", ":", ",", ":", ",", "2", "]", "+", "10", "\n", "\n", "# Attributes", "\n", "face_vertices", "=", "util", ".", "face_vertices", "(", "vertices", ",", "self", ".", "faces", ".", "expand", "(", "batch_size", ",", "-", "1", ",", "-", "1", ")", ")", "\n", "normals", "=", "util", ".", "vertex_normals", "(", "vertices", ",", "self", ".", "faces", ".", "expand", "(", "batch_size", ",", "-", "1", ",", "-", "1", ")", ")", ";", "face_normals", "=", "util", ".", "face_vertices", "(", "normals", ",", "self", ".", "faces", ".", "expand", "(", "batch_size", ",", "-", "1", ",", "-", "1", ")", ")", "\n", "transformed_normals", "=", "util", ".", "vertex_normals", "(", "transformed_vertices", ",", "self", ".", "faces", ".", "expand", "(", "batch_size", ",", "-", "1", ",", "-", "1", ")", ")", ";", "transformed_face_normals", "=", "util", ".", "face_vertices", "(", "transformed_normals", ",", "self", ".", "faces", ".", "expand", "(", "batch_size", ",", "-", "1", ",", "-", "1", ")", ")", "\n", "attributes", "=", "torch", ".", "cat", "(", "[", "self", ".", "face_colors", ".", "expand", "(", "batch_size", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", ",", "\n", "transformed_face_normals", ".", "detach", "(", ")", ",", "\n", "face_vertices", ".", "detach", "(", ")", ",", "\n", "face_normals", "]", ",", "\n", "-", "1", ")", "\n", "# rasterize", "\n", "rendering", "=", "self", ".", "rasterizer", "(", "transformed_vertices", ",", "self", ".", "faces", ".", "expand", "(", "batch_size", ",", "-", "1", ",", "-", "1", ")", ",", "attributes", ")", "\n", "\n", "####", "\n", "alpha_images", "=", "rendering", "[", ":", ",", "-", "1", ",", ":", ",", ":", "]", "[", ":", ",", "None", ",", ":", ",", ":", "]", ".", "detach", "(", ")", "\n", "\n", "# albedo", "\n", "albedo_images", "=", "rendering", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", "\n", "# mask", "\n", "transformed_normal_map", "=", "rendering", "[", ":", ",", "3", ":", "6", ",", ":", ",", ":", "]", ".", "detach", "(", ")", "\n", "pos_mask", "=", "(", "transformed_normal_map", "[", ":", ",", "2", ":", ",", ":", ",", ":", "]", "<", "0.15", ")", ".", "float", "(", ")", "\n", "\n", "# shading", "\n", "normal_images", "=", "rendering", "[", ":", ",", "9", ":", "12", ",", ":", ",", ":", "]", ".", "detach", "(", ")", "\n", "vertice_images", "=", "rendering", "[", ":", ",", "6", ":", "9", ",", ":", ",", ":", "]", ".", "detach", "(", ")", "\n", "if", "detail_normal_images", "is", "not", "None", ":", "\n", "            ", "normal_images", "=", "detail_normal_images", "\n", "\n", "", "shading", "=", "self", ".", "add_directionlight", "(", "normal_images", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "[", "batch_size", ",", "-", "1", ",", "3", "]", ")", ",", "lights", ")", "\n", "shading_images", "=", "shading", ".", "reshape", "(", "[", "batch_size", ",", "albedo_images", ".", "shape", "[", "2", "]", ",", "albedo_images", ".", "shape", "[", "3", "]", ",", "3", "]", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "shaded_images", "=", "albedo_images", "*", "shading_images", "\n", "\n", "alpha_images", "=", "alpha_images", "*", "pos_mask", "\n", "if", "images", "is", "None", ":", "\n", "            ", "shape_images", "=", "shaded_images", "*", "alpha_images", "+", "torch", ".", "zeros_like", "(", "shaded_images", ")", ".", "to", "(", "vertices", ".", "device", ")", "*", "(", "1", "-", "alpha_images", ")", "\n", "", "else", ":", "\n", "            ", "shape_images", "=", "shaded_images", "*", "alpha_images", "+", "images", "*", "(", "1", "-", "alpha_images", ")", "\n", "", "return", "shape_images", ",", "pos_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.renderer.SRenderY.render_depth": [[295, 315], ["util.face_vertices", "renderer.SRenderY.rasterizer", "[].detach", "transformed_vertices[].min", "transformed_vertices[].repeat().clone", "z.min", "z.max", "renderer.SRenderY.faces.expand", "renderer.SRenderY.faces.expand", "transformed_vertices[].repeat"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.utils.util.face_vertices"], ["", "def", "render_depth", "(", "self", ",", "transformed_vertices", ")", ":", "\n", "        ", "'''\n        -- rendering depth\n        '''", "\n", "batch_size", "=", "transformed_vertices", ".", "shape", "[", "0", "]", "\n", "\n", "transformed_vertices", "[", ":", ",", ":", ",", "2", "]", "=", "transformed_vertices", "[", ":", ",", ":", ",", "2", "]", "-", "transformed_vertices", "[", ":", ",", ":", ",", "2", "]", ".", "min", "(", ")", "\n", "z", "=", "-", "transformed_vertices", "[", ":", ",", ":", ",", "2", ":", "]", ".", "repeat", "(", "1", ",", "1", ",", "3", ")", ".", "clone", "(", ")", "\n", "z", "=", "z", "-", "z", ".", "min", "(", ")", "\n", "z", "=", "z", "/", "z", ".", "max", "(", ")", "\n", "# Attributes", "\n", "attributes", "=", "util", ".", "face_vertices", "(", "z", ",", "self", ".", "faces", ".", "expand", "(", "batch_size", ",", "-", "1", ",", "-", "1", ")", ")", "\n", "# rasterize", "\n", "transformed_vertices", "[", ":", ",", ":", ",", "2", "]", "=", "transformed_vertices", "[", ":", ",", ":", ",", "2", "]", "+", "10", "\n", "rendering", "=", "self", ".", "rasterizer", "(", "transformed_vertices", ",", "self", ".", "faces", ".", "expand", "(", "batch_size", ",", "-", "1", ",", "-", "1", ")", ",", "attributes", ")", "\n", "\n", "####", "\n", "alpha_images", "=", "rendering", "[", ":", ",", "-", "1", ",", ":", ",", ":", "]", "[", ":", ",", "None", ",", ":", ",", ":", "]", ".", "detach", "(", ")", "\n", "depth_images", "=", "rendering", "[", ":", ",", ":", "1", ",", ":", ",", ":", "]", "\n", "return", "depth_images", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.renderer.SRenderY.render_colors": [[316, 334], ["util.face_vertices", "renderer.SRenderY.rasterizer", "rendering[].detach", "renderer.SRenderY.faces.expand", "renderer.SRenderY.faces.expand"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.utils.util.face_vertices"], ["", "def", "render_colors", "(", "self", ",", "transformed_vertices", ",", "colors", ",", "pos_mask", "=", "None", ")", ":", "\n", "        ", "'''\n        -- rendering colors: could be rgb color/ normals, etc\n            colors: [bz, num of vertices, 3]\n        '''", "\n", "batch_size", "=", "colors", ".", "shape", "[", "0", "]", "\n", "\n", "# Attributes", "\n", "attributes", "=", "util", ".", "face_vertices", "(", "colors", ",", "self", ".", "faces", ".", "expand", "(", "batch_size", ",", "-", "1", ",", "-", "1", ")", ")", "\n", "# rasterize", "\n", "rendering", "=", "self", ".", "rasterizer", "(", "transformed_vertices", ",", "self", ".", "faces", ".", "expand", "(", "batch_size", ",", "-", "1", ",", "-", "1", ")", ",", "attributes", ")", "\n", "\n", "####", "\n", "alpha_images", "=", "rendering", "[", ":", ",", "[", "-", "1", "]", ",", ":", ",", ":", "]", ".", "detach", "(", ")", "\n", "images", "=", "rendering", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", "*", "alpha_images", "\n", "if", "pos_mask", "is", "not", "None", ":", "\n", "            ", "images", "=", "images", "*", "pos_mask", "\n", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.utils.renderer.SRenderY.world2uv": [[335, 345], ["util.face_vertices", "renderer.SRenderY.faces.expand", "renderer.SRenderY.uv_rasterizer", "renderer.SRenderY.uvcoords.expand", "renderer.SRenderY.uvfaces.expand"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.utils.util.face_vertices"], ["", "def", "world2uv", "(", "self", ",", "vertices", ")", ":", "\n", "        ", "'''\n        warp vertices from world space to uv space\n        vertices: [bz, V, 3]\n        uv_vertices: [bz, 3, h, w]\n        '''", "\n", "batch_size", "=", "vertices", ".", "shape", "[", "0", "]", "\n", "face_vertices", "=", "util", ".", "face_vertices", "(", "vertices", ",", "self", ".", "faces", ".", "expand", "(", "batch_size", ",", "-", "1", ",", "-", "1", ")", ")", "\n", "uv_vertices", "=", "self", ".", "uv_rasterizer", "(", "self", ".", "uvcoords", ".", "expand", "(", "batch_size", ",", "-", "1", ",", "-", "1", ")", ",", "self", ".", "uvfaces", ".", "expand", "(", "batch_size", ",", "-", "1", ",", "-", "1", ")", ",", "face_vertices", ")", "[", ":", ",", ":", "3", "]", "\n", "return", "uv_vertices", "\n", "", "", ""]], "home.repos.pwc.inspect_result.foivospar_NED.utils.util.Struct.__init__": [[504, 507], ["kwargs.items", "setattr"], "methods", ["None"], []], "home.repos.pwc.inspect_result.foivospar_NED.utils.util.upsample_mesh": [[27, 62], ["numpy.einsum", "numpy.linalg.norm", "y_coords[].astype", "x_coords[].astype", "y_coords[].astype", "x_coords[].astype"], "function", ["None"], []], "home.repos.pwc.inspect_result.foivospar_NED.utils.util.write_obj": [[64, 155], ["obj_name.replace", "obj_name.replace", "faces.copy.copy", "open", "obj_name.split", "f.write", "range", "range", "range", "range", "f.write", "range", "cv2.imwrite", "f.write", "f.write", "f.write", "f.write", "f.write", "open", "f.write", "f.write", "os.path.basename", "os.path.basename", "os.path.splitext", "f.write", "cv2.imwrite"], "function", ["None"], []], "home.repos.pwc.inspect_result.foivospar_NED.utils.util.generate_triangles": [[157, 173], ["range", "numpy.array", "range", "np.array.append", "np.array.append"], "function", ["None"], []], "home.repos.pwc.inspect_result.foivospar_NED.utils.util.face_vertices": [[175, 194], ["vertices.reshape.reshape", "vertices.reshape.ndimension", "faces.ndimension", "faces.long", "torch.arange().to", "torch.arange().to", "torch.arange", "torch.arange"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.util.util.reshape"], []], "home.repos.pwc.inspect_result.foivospar_NED.utils.util.vertex_normals": [[195, 228], ["torch.zeros().to", "torch.zeros().to", "faces.reshape.reshape", "vertices_faces.reshape.reshape", "normals.reshape.index_add_", "normals.reshape.index_add_", "normals.reshape.index_add_", "torch.normalize", "normals.reshape.reshape", "vertices.ndimension", "faces.reshape.ndimension", "vertices.reshape", "faces[].long", "torch.cross", "torch.cross", "faces[].long", "torch.cross", "torch.cross", "faces[].long", "torch.cross", "torch.cross", "torch.zeros", "torch.zeros", "faces.reshape.long", "torch.arange().to", "torch.arange().to", "torch.arange", "torch.arange"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.util.util.reshape", "home.repos.pwc.inspect_result.foivospar_NED.util.util.reshape", "home.repos.pwc.inspect_result.foivospar_NED.util.util.reshape", "home.repos.pwc.inspect_result.foivospar_NED.util.util.reshape"], []], "home.repos.pwc.inspect_result.foivospar_NED.utils.util.batch_orth_proj": [[229, 240], ["camera.clone().view.clone().view", "torch.cat", "torch.cat", "camera.clone().view.clone"], "function", ["None"], []], "home.repos.pwc.inspect_result.foivospar_NED.utils.util.gaussian": [[243, 249], ["torch.stack", "torch.stack", "torch.stack.sum", "float", "torch.exp", "torch.exp", "torch.tensor", "torch.tensor", "range", "util.gaussian.gauss_fcn"], "function", ["None"], []], "home.repos.pwc.inspect_result.foivospar_NED.utils.util.get_gaussian_kernel": [[250, 277], ["util.gaussian", "TypeError", "isinstance"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.utils.util.gaussian"], []], "home.repos.pwc.inspect_result.foivospar_NED.utils.util.get_gaussian_kernel2d": [[278, 318], ["util.get_gaussian_kernel", "util.get_gaussian_kernel", "torch.matmul", "torch.matmul", "TypeError", "TypeError", "get_gaussian_kernel.unsqueeze", "get_gaussian_kernel.unsqueeze().t", "isinstance", "len", "isinstance", "len", "get_gaussian_kernel.unsqueeze"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.utils.util.get_gaussian_kernel", "home.repos.pwc.inspect_result.foivospar_NED.utils.util.get_gaussian_kernel"], []], "home.repos.pwc.inspect_result.foivospar_NED.utils.util.gaussian_blur": [[319, 325], ["get_gaussian_kernel2d().to().to", "kernel.repeat.repeat", "torch.conv2d", "get_gaussian_kernel2d().to", "util.get_gaussian_kernel2d"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.utils.util.get_gaussian_kernel2d"], []], "home.repos.pwc.inspect_result.foivospar_NED.utils.util._compute_binary_kernel": [[326, 335], ["torch.zeros", "torch.zeros", "range", "kernel.view"], "function", ["None"], []], "home.repos.pwc.inspect_result.foivospar_NED.utils.util.median_blur": [[336, 345], ["_compute_binary_kernel().to().to", "kernel.repeat.repeat", "torch.conv2d", "features.view.view", "torch.median", "torch.median", "_compute_binary_kernel().to", "util._compute_binary_kernel"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.utils.util._compute_binary_kernel"], []], "home.repos.pwc.inspect_result.foivospar_NED.utils.util.get_laplacian_kernel2d": [[346, 383], ["torch.ones", "torch.ones", "TypeError", "isinstance"], "function", ["None"], []], "home.repos.pwc.inspect_result.foivospar_NED.utils.util.laplacian": [[384, 392], ["get_laplacian_kernel2d().to().to", "kernel.repeat.repeat", "torch.conv2d", "get_laplacian_kernel2d().to", "util.get_laplacian_kernel2d"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.utils.util.get_laplacian_kernel2d"], []], "home.repos.pwc.inspect_result.foivospar_NED.utils.util.angle2matrix": [[393, 423], ["torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.zeros_like().to", "torch.zeros_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.stack", "torch.stack", "torch.reshape", "torch.reshape", "torch.zeros_like", "torch.zeros_like", "torch.ones_like", "torch.ones_like"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.util.util.reshape", "home.repos.pwc.inspect_result.foivospar_NED.util.util.reshape"], []], "home.repos.pwc.inspect_result.foivospar_NED.utils.util.binary_erosion": [[424, 433], ["tensor.cpu().numpy", "numpy.ones", "tensor.cpu().numpy.copy", "range", "torch.from_numpy().to", "torch.from_numpy().to", "scipy.ndimage.morphology.binary_erosion", "tensor.cpu", "torch.from_numpy", "torch.from_numpy", "mask.copy.astype"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.utils.util.binary_erosion"], []], "home.repos.pwc.inspect_result.foivospar_NED.utils.util.flip_image": [[434, 451], ["cv2.flip"], "function", ["None"], []], "home.repos.pwc.inspect_result.foivospar_NED.utils.util.copy_state_dict": [[453, 472], ["cur_state_dict.keys", "util.copy_state_dict._get_params"], "function", ["None"], []], "home.repos.pwc.inspect_result.foivospar_NED.utils.util.check_mkdir": [[473, 477], ["os.path.exists", "print", "os.makedirs"], "function", ["None"], []], "home.repos.pwc.inspect_result.foivospar_NED.utils.util.check_mkdirlist": [[478, 483], ["os.path.exists", "print", "os.makedirs"], "function", ["None"], []], "home.repos.pwc.inspect_result.foivospar_NED.utils.util.tensor2image": [[484, 490], ["tensor.detach().cpu().numpy", "numpy.maximum", "np.maximum.astype().copy", "numpy.minimum", "np.maximum.transpose", "tensor.detach().cpu", "np.maximum.astype", "tensor.detach"], "function", ["None"], []], "home.repos.pwc.inspect_result.foivospar_NED.utils.util.dict2obj": [[491, 502], ["C", "isinstance", "util.dict2obj"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.utils.util.dict2obj"], []], "home.repos.pwc.inspect_result.foivospar_NED.utils.util.remove_module": [[509, 516], ["collections.OrderedDict", "state_dict.items"], "function", ["None"], []], "home.repos.pwc.inspect_result.foivospar_NED.utils.util.dict_tensor2npy": [[517, 522], ["[].cpu().numpy", "[].cpu"], "function", ["None"], []], "home.repos.pwc.inspect_result.foivospar_NED.utils.util.plot_kpts": [[525, 553], ["cv2.line.copy", "kpts.copy.copy", "range", "cv2.circle", "cv2.line", "int", "int", "int", "int", "int", "int"], "function", ["None"], []], "home.repos.pwc.inspect_result.foivospar_NED.utils.util.plot_verts": [[554, 575], ["cv2.circle.copy", "range", "cv2.circle", "int", "int"], "function", ["None"], []], "home.repos.pwc.inspect_result.foivospar_NED.utils.util.tensor_vis_landmarks": [[576, 604], ["images.cpu().numpy.cpu().numpy", "landmarks.detach().cpu().numpy", "range", "numpy.stack", "gt_landmarks.detach().cpu().numpy", "[].copy", "np.stack.append", "torch.from_numpy", "torch.from_numpy", "images.cpu().numpy.cpu", "landmarks.detach().cpu", "util.plot_kpts", "util.plot_verts", "vis_landmarks[].transpose", "gt_landmarks.detach().cpu", "util.plot_verts", "util.plot_verts", "landmarks.detach", "[].copy.transpose", "gt_landmarks.detach"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.utils.util.plot_kpts", "home.repos.pwc.inspect_result.foivospar_NED.utils.util.plot_verts", "home.repos.pwc.inspect_result.foivospar_NED.utils.util.plot_verts", "home.repos.pwc.inspect_result.foivospar_NED.utils.util.plot_verts"], []], "home.repos.pwc.inspect_result.foivospar_NED.utils.util.load_local_mask": [[607, 627], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["None"], []], "home.repos.pwc.inspect_result.foivospar_NED.utils.util.visualize_grid": [[628, 649], ["torch.cat", "torch.cat", "numpy.minimum().astype", "torchvision.utils.make_grid", "list", "cv2.imwrite", "int", "torch.interpolate().detach().cpu", "grids.values", "torch.cat.numpy().transpose().copy", "numpy.minimum", "int", "numpy.maximum", "torch.interpolate().detach", "torch.cat.numpy().transpose", "torch.interpolate", "torch.cat.numpy"], "function", ["None"], []], "home.repos.pwc.inspect_result.foivospar_NED.datasets.vggface.VGGFace2Dataset.__init__": [[13, 35], ["numpy.load().astype", "numpy.load"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load"], ["    ", "def", "__init__", "(", "self", ",", "K", ",", "image_size", ",", "scale", ",", "trans_scale", "=", "0", ",", "isTemporal", "=", "False", ",", "isEval", "=", "False", ",", "isSingle", "=", "False", ")", ":", "\n", "        ", "'''\n        K must be less than 6\n        '''", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "image_size", "=", "image_size", "\n", "self", ".", "imagefolder", "=", "'/ps/scratch/face2d3d/train'", "\n", "self", ".", "kptfolder", "=", "'/ps/scratch/face2d3d/train_annotated_torch7'", "\n", "self", ".", "segfolder", "=", "'/ps/scratch/face2d3d/texture_in_the_wild_code/VGGFace2_seg/test_crop_size_400_batch'", "\n", "# hq:", "\n", "# datafile = '/ps/scratch/face2d3d/texture_in_the_wild_code/VGGFace2_cleaning_codes/ringnetpp_training_lists/second_cleaning/vggface2_bbx_size_bigger_than_400_train_list_max_normal_100_ring_5_1_serial.npy'", "\n", "datafile", "=", "'/ps/scratch/face2d3d/texture_in_the_wild_code/VGGFace2_cleaning_codes/ringnetpp_training_lists/second_cleaning/vggface2_train_list_max_normal_100_ring_5_1_serial.npy'", "\n", "if", "isEval", ":", "\n", "            ", "datafile", "=", "'/ps/scratch/face2d3d/texture_in_the_wild_code/VGGFace2_cleaning_codes/ringnetpp_training_lists/second_cleaning/vggface2_val_list_max_normal_100_ring_5_1_serial.npy'", "\n", "", "self", ".", "data_lines", "=", "np", ".", "load", "(", "datafile", ")", ".", "astype", "(", "'str'", ")", "\n", "\n", "self", ".", "isTemporal", "=", "isTemporal", "\n", "self", ".", "scale", "=", "scale", "#[scale_min, scale_max]", "\n", "self", ".", "trans_scale", "=", "trans_scale", "#[dx, dy]", "\n", "self", ".", "isSingle", "=", "isSingle", "\n", "if", "isSingle", ":", "\n", "            ", "self", ".", "K", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.vggface.VGGFace2Dataset.__len__": [[36, 38], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data_lines", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.vggface.VGGFace2Dataset.__getitem__": [[39, 84], ["torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "numpy.random.permutation", "os.path.join", "os.path.join", "os.path.join", "vggface.VGGFace2Dataset.load_mask", "vggface.VGGFace2Dataset.crop", "skimage.transform.warp", "skimage.transform.warp", "images_list.append", "kpt_list.append", "mask_list.append", "images_array.squeeze.squeeze.squeeze", "kpt_array.squeeze.squeeze.squeeze", "mask_array.squeeze.squeeze.squeeze", "skimage.io.imread", "numpy.load", "numpy.dot", "skimage.transform.warp.transpose", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array", "numpy.array", "numpy.array", "numpy.hstack", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.datasets.ethnicity.EthnicityDataset.load_mask", "home.repos.pwc.inspect_result.foivospar_NED.datasets.ethnicity.EthnicityDataset.crop", "home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "images_list", "=", "[", "]", ";", "kpt_list", "=", "[", "]", ";", "mask_list", "=", "[", "]", "\n", "\n", "random_ind", "=", "np", ".", "random", ".", "permutation", "(", "5", ")", "[", ":", "self", ".", "K", "]", "\n", "for", "i", "in", "random_ind", ":", "\n", "            ", "name", "=", "self", ".", "data_lines", "[", "idx", ",", "i", "]", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "imagefolder", ",", "name", "+", "'.jpg'", ")", "\n", "seg_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "segfolder", ",", "name", "+", "'.npy'", ")", "\n", "kpt_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "kptfolder", ",", "name", "+", "'.npy'", ")", "\n", "\n", "image", "=", "imread", "(", "image_path", ")", "/", "255.", "\n", "kpt", "=", "np", ".", "load", "(", "kpt_path", ")", "[", ":", ",", ":", "2", "]", "\n", "mask", "=", "self", ".", "load_mask", "(", "seg_path", ",", "image", ".", "shape", "[", "0", "]", ",", "image", ".", "shape", "[", "1", "]", ")", "\n", "\n", "### crop information", "\n", "tform", "=", "self", ".", "crop", "(", "image", ",", "kpt", ")", "\n", "## crop ", "\n", "cropped_image", "=", "warp", "(", "image", ",", "tform", ".", "inverse", ",", "output_shape", "=", "(", "self", ".", "image_size", ",", "self", ".", "image_size", ")", ")", "\n", "cropped_mask", "=", "warp", "(", "mask", ",", "tform", ".", "inverse", ",", "output_shape", "=", "(", "self", ".", "image_size", ",", "self", ".", "image_size", ")", ")", "\n", "cropped_kpt", "=", "np", ".", "dot", "(", "tform", ".", "params", ",", "np", ".", "hstack", "(", "[", "kpt", ",", "np", ".", "ones", "(", "[", "kpt", ".", "shape", "[", "0", "]", ",", "1", "]", ")", "]", ")", ".", "T", ")", ".", "T", "# np.linalg.inv(tform.params)", "\n", "\n", "# normalized kpt", "\n", "cropped_kpt", "[", ":", ",", ":", "2", "]", "=", "cropped_kpt", "[", ":", ",", ":", "2", "]", "/", "self", ".", "image_size", "*", "2", "-", "1", "\n", "\n", "images_list", ".", "append", "(", "cropped_image", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "kpt_list", ".", "append", "(", "cropped_kpt", ")", "\n", "mask_list", ".", "append", "(", "cropped_mask", ")", "\n", "\n", "###", "\n", "", "images_array", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "images_list", ")", ")", ".", "type", "(", "dtype", "=", "torch", ".", "float32", ")", "#K,224,224,3", "\n", "kpt_array", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "kpt_list", ")", ")", ".", "type", "(", "dtype", "=", "torch", ".", "float32", ")", "#K,224,224,3", "\n", "mask_array", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "mask_list", ")", ")", ".", "type", "(", "dtype", "=", "torch", ".", "float32", ")", "#K,224,224,3", "\n", "\n", "if", "self", ".", "isSingle", ":", "\n", "            ", "images_array", "=", "images_array", ".", "squeeze", "(", ")", "\n", "kpt_array", "=", "kpt_array", ".", "squeeze", "(", ")", "\n", "mask_array", "=", "mask_array", ".", "squeeze", "(", ")", "\n", "\n", "", "data_dict", "=", "{", "\n", "'image'", ":", "images_array", ",", "\n", "'landmark'", ":", "kpt_array", ",", "\n", "'mask'", ":", "mask_array", "\n", "}", "\n", "\n", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.vggface.VGGFace2Dataset.crop": [[85, 108], ["numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.array", "int", "numpy.array", "numpy.array", "skimage.transform.estimate_transform", "numpy.random.rand", "numpy.random.rand"], "methods", ["None"], ["", "def", "crop", "(", "self", ",", "image", ",", "kpt", ")", ":", "\n", "        ", "left", "=", "np", ".", "min", "(", "kpt", "[", ":", ",", "0", "]", ")", ";", "right", "=", "np", ".", "max", "(", "kpt", "[", ":", ",", "0", "]", ")", ";", "\n", "top", "=", "np", ".", "min", "(", "kpt", "[", ":", ",", "1", "]", ")", ";", "bottom", "=", "np", ".", "max", "(", "kpt", "[", ":", ",", "1", "]", ")", "\n", "\n", "h", ",", "w", ",", "_", "=", "image", ".", "shape", "\n", "old_size", "=", "(", "right", "-", "left", "+", "bottom", "-", "top", ")", "/", "2", "\n", "center", "=", "np", ".", "array", "(", "[", "right", "-", "(", "right", "-", "left", ")", "/", "2.0", ",", "bottom", "-", "(", "bottom", "-", "top", ")", "/", "2.0", "]", ")", "#+ old_size*0.1])", "\n", "# translate center", "\n", "trans_scale", "=", "(", "np", ".", "random", ".", "rand", "(", "2", ")", "*", "2", "-", "1", ")", "*", "self", ".", "trans_scale", "\n", "center", "=", "center", "+", "trans_scale", "*", "old_size", "# 0.5", "\n", "\n", "scale", "=", "np", ".", "random", ".", "rand", "(", ")", "*", "(", "self", ".", "scale", "[", "1", "]", "-", "self", ".", "scale", "[", "0", "]", ")", "+", "self", ".", "scale", "[", "0", "]", "\n", "size", "=", "int", "(", "old_size", "*", "scale", ")", "\n", "\n", "# crop image", "\n", "src_pts", "=", "np", ".", "array", "(", "[", "[", "center", "[", "0", "]", "-", "size", "/", "2", ",", "center", "[", "1", "]", "-", "size", "/", "2", "]", ",", "[", "center", "[", "0", "]", "-", "size", "/", "2", ",", "center", "[", "1", "]", "+", "size", "/", "2", "]", ",", "[", "center", "[", "0", "]", "+", "size", "/", "2", ",", "center", "[", "1", "]", "-", "size", "/", "2", "]", "]", ")", "\n", "DST_PTS", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "self", ".", "image_size", "-", "1", "]", ",", "[", "self", ".", "image_size", "-", "1", ",", "0", "]", "]", ")", "\n", "tform", "=", "estimate_transform", "(", "'similarity'", ",", "src_pts", ",", "DST_PTS", ")", "\n", "\n", "# cropped_image = warp(image, tform.inverse, output_shape=(self.image_size, self.image_size))", "\n", "# # change kpt accordingly", "\n", "# cropped_kpt = np.dot(tform.params, np.hstack([kpt, np.ones([kpt.shape[0],1])]).T).T # np.linalg.inv(tform.params)", "\n", "return", "tform", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.vggface.VGGFace2Dataset.load_mask": [[109, 121], ["os.path.isfile", "numpy.load", "numpy.zeros_like", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load"], ["", "def", "load_mask", "(", "self", ",", "maskpath", ",", "h", ",", "w", ")", ":", "\n", "# print(maskpath)", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "maskpath", ")", ":", "\n", "            ", "vis_parsing_anno", "=", "np", ".", "load", "(", "maskpath", ")", "\n", "# atts = ['skin', 'l_brow', 'r_brow', 'l_eye', 'r_eye', 'eye_g', 'l_ear', 'r_ear', 'ear_r',", "\n", "#     'nose', 'mouth', 'u_lip', 'l_lip', 'neck', 'neck_l', 'cloth', 'hair', 'hat']", "\n", "mask", "=", "np", ".", "zeros_like", "(", "vis_parsing_anno", ")", "\n", "# for i in range(1, 16):", "\n", "mask", "[", "vis_parsing_anno", ">", "0.5", "]", "=", "1.", "\n", "", "else", ":", "\n", "            ", "mask", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ")", "\n", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.vggface.VGGFace2HQDataset.__init__": [[125, 145], ["numpy.load().astype", "numpy.load"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load"], ["    ", "def", "__init__", "(", "self", ",", "K", ",", "image_size", ",", "scale", ",", "trans_scale", "=", "0", ",", "isTemporal", "=", "False", ",", "isEval", "=", "False", ",", "isSingle", "=", "False", ")", ":", "\n", "        ", "'''\n        K must be less than 6\n        '''", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "image_size", "=", "image_size", "\n", "self", ".", "imagefolder", "=", "'/ps/scratch/face2d3d/train'", "\n", "self", ".", "kptfolder", "=", "'/ps/scratch/face2d3d/train_annotated_torch7'", "\n", "self", ".", "segfolder", "=", "'/ps/scratch/face2d3d/texture_in_the_wild_code/VGGFace2_seg/test_crop_size_400_batch'", "\n", "# hq:", "\n", "# datafile = '/ps/scratch/face2d3d/texture_in_the_wild_code/VGGFace2_cleaning_codes/ringnetpp_training_lists/second_cleaning/vggface2_bbx_size_bigger_than_400_train_list_max_normal_100_ring_5_1_serial.npy'", "\n", "datafile", "=", "'/ps/scratch/face2d3d/texture_in_the_wild_code/VGGFace2_cleaning_codes/ringnetpp_training_lists/second_cleaning/vggface2_bbx_size_bigger_than_400_train_list_max_normal_100_ring_5_1_serial.npy'", "\n", "self", ".", "data_lines", "=", "np", ".", "load", "(", "datafile", ")", ".", "astype", "(", "'str'", ")", "\n", "\n", "self", ".", "isTemporal", "=", "isTemporal", "\n", "self", ".", "scale", "=", "scale", "#[scale_min, scale_max]", "\n", "self", ".", "trans_scale", "=", "trans_scale", "#[dx, dy]", "\n", "self", ".", "isSingle", "=", "isSingle", "\n", "if", "isSingle", ":", "\n", "            ", "self", ".", "K", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.vggface.VGGFace2HQDataset.__len__": [[146, 148], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data_lines", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.vggface.VGGFace2HQDataset.__getitem__": [[149, 193], ["range", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "os.path.join", "os.path.join", "os.path.join", "vggface.VGGFace2HQDataset.load_mask", "vggface.VGGFace2HQDataset.crop", "skimage.transform.warp", "skimage.transform.warp", "images_list.append", "kpt_list.append", "mask_list.append", "images_array.squeeze.squeeze.squeeze", "kpt_array.squeeze.squeeze.squeeze", "mask_array.squeeze.squeeze.squeeze", "skimage.io.imread", "numpy.load", "numpy.dot", "skimage.transform.warp.transpose", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array", "numpy.array", "numpy.array", "numpy.hstack", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.datasets.ethnicity.EthnicityDataset.load_mask", "home.repos.pwc.inspect_result.foivospar_NED.datasets.ethnicity.EthnicityDataset.crop", "home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "images_list", "=", "[", "]", ";", "kpt_list", "=", "[", "]", ";", "mask_list", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "K", ")", ":", "\n", "            ", "name", "=", "self", ".", "data_lines", "[", "idx", ",", "i", "]", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "imagefolder", ",", "name", "+", "'.jpg'", ")", "\n", "seg_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "segfolder", ",", "name", "+", "'.npy'", ")", "\n", "kpt_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "kptfolder", ",", "name", "+", "'.npy'", ")", "\n", "\n", "image", "=", "imread", "(", "image_path", ")", "/", "255.", "\n", "kpt", "=", "np", ".", "load", "(", "kpt_path", ")", "[", ":", ",", ":", "2", "]", "\n", "mask", "=", "self", ".", "load_mask", "(", "seg_path", ",", "image", ".", "shape", "[", "0", "]", ",", "image", ".", "shape", "[", "1", "]", ")", "\n", "\n", "### crop information", "\n", "tform", "=", "self", ".", "crop", "(", "image", ",", "kpt", ")", "\n", "## crop ", "\n", "cropped_image", "=", "warp", "(", "image", ",", "tform", ".", "inverse", ",", "output_shape", "=", "(", "self", ".", "image_size", ",", "self", ".", "image_size", ")", ")", "\n", "cropped_mask", "=", "warp", "(", "mask", ",", "tform", ".", "inverse", ",", "output_shape", "=", "(", "self", ".", "image_size", ",", "self", ".", "image_size", ")", ")", "\n", "cropped_kpt", "=", "np", ".", "dot", "(", "tform", ".", "params", ",", "np", ".", "hstack", "(", "[", "kpt", ",", "np", ".", "ones", "(", "[", "kpt", ".", "shape", "[", "0", "]", ",", "1", "]", ")", "]", ")", ".", "T", ")", ".", "T", "# np.linalg.inv(tform.params)", "\n", "\n", "# normalized kpt", "\n", "cropped_kpt", "[", ":", ",", ":", "2", "]", "=", "cropped_kpt", "[", ":", ",", ":", "2", "]", "/", "self", ".", "image_size", "*", "2", "-", "1", "\n", "\n", "images_list", ".", "append", "(", "cropped_image", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "kpt_list", ".", "append", "(", "cropped_kpt", ")", "\n", "mask_list", ".", "append", "(", "cropped_mask", ")", "\n", "\n", "###", "\n", "", "images_array", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "images_list", ")", ")", ".", "type", "(", "dtype", "=", "torch", ".", "float32", ")", "#K,224,224,3", "\n", "kpt_array", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "kpt_list", ")", ")", ".", "type", "(", "dtype", "=", "torch", ".", "float32", ")", "#K,224,224,3", "\n", "mask_array", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "mask_list", ")", ")", ".", "type", "(", "dtype", "=", "torch", ".", "float32", ")", "#K,224,224,3", "\n", "\n", "if", "self", ".", "isSingle", ":", "\n", "            ", "images_array", "=", "images_array", ".", "squeeze", "(", ")", "\n", "kpt_array", "=", "kpt_array", ".", "squeeze", "(", ")", "\n", "mask_array", "=", "mask_array", ".", "squeeze", "(", ")", "\n", "\n", "", "data_dict", "=", "{", "\n", "'image'", ":", "images_array", ",", "\n", "'landmark'", ":", "kpt_array", ",", "\n", "'mask'", ":", "mask_array", "\n", "}", "\n", "\n", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.vggface.VGGFace2HQDataset.crop": [[194, 217], ["numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.array", "int", "numpy.array", "numpy.array", "skimage.transform.estimate_transform", "numpy.random.rand", "numpy.random.rand"], "methods", ["None"], ["", "def", "crop", "(", "self", ",", "image", ",", "kpt", ")", ":", "\n", "        ", "left", "=", "np", ".", "min", "(", "kpt", "[", ":", ",", "0", "]", ")", ";", "right", "=", "np", ".", "max", "(", "kpt", "[", ":", ",", "0", "]", ")", ";", "\n", "top", "=", "np", ".", "min", "(", "kpt", "[", ":", ",", "1", "]", ")", ";", "bottom", "=", "np", ".", "max", "(", "kpt", "[", ":", ",", "1", "]", ")", "\n", "\n", "h", ",", "w", ",", "_", "=", "image", ".", "shape", "\n", "old_size", "=", "(", "right", "-", "left", "+", "bottom", "-", "top", ")", "/", "2", "\n", "center", "=", "np", ".", "array", "(", "[", "right", "-", "(", "right", "-", "left", ")", "/", "2.0", ",", "bottom", "-", "(", "bottom", "-", "top", ")", "/", "2.0", "]", ")", "#+ old_size*0.1])", "\n", "# translate center", "\n", "trans_scale", "=", "(", "np", ".", "random", ".", "rand", "(", "2", ")", "*", "2", "-", "1", ")", "*", "self", ".", "trans_scale", "\n", "center", "=", "center", "+", "trans_scale", "*", "old_size", "# 0.5", "\n", "\n", "scale", "=", "np", ".", "random", ".", "rand", "(", ")", "*", "(", "self", ".", "scale", "[", "1", "]", "-", "self", ".", "scale", "[", "0", "]", ")", "+", "self", ".", "scale", "[", "0", "]", "\n", "size", "=", "int", "(", "old_size", "*", "scale", ")", "\n", "\n", "# crop image", "\n", "src_pts", "=", "np", ".", "array", "(", "[", "[", "center", "[", "0", "]", "-", "size", "/", "2", ",", "center", "[", "1", "]", "-", "size", "/", "2", "]", ",", "[", "center", "[", "0", "]", "-", "size", "/", "2", ",", "center", "[", "1", "]", "+", "size", "/", "2", "]", ",", "[", "center", "[", "0", "]", "+", "size", "/", "2", ",", "center", "[", "1", "]", "-", "size", "/", "2", "]", "]", ")", "\n", "DST_PTS", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "self", ".", "image_size", "-", "1", "]", ",", "[", "self", ".", "image_size", "-", "1", ",", "0", "]", "]", ")", "\n", "tform", "=", "estimate_transform", "(", "'similarity'", ",", "src_pts", ",", "DST_PTS", ")", "\n", "\n", "# cropped_image = warp(image, tform.inverse, output_shape=(self.image_size, self.image_size))", "\n", "# # change kpt accordingly", "\n", "# cropped_kpt = np.dot(tform.params, np.hstack([kpt, np.ones([kpt.shape[0],1])]).T).T # np.linalg.inv(tform.params)", "\n", "return", "tform", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.vggface.VGGFace2HQDataset.load_mask": [[218, 230], ["os.path.isfile", "numpy.load", "numpy.zeros_like", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load"], ["", "def", "load_mask", "(", "self", ",", "maskpath", ",", "h", ",", "w", ")", ":", "\n", "# print(maskpath)", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "maskpath", ")", ":", "\n", "            ", "vis_parsing_anno", "=", "np", ".", "load", "(", "maskpath", ")", "\n", "# atts = ['skin', 'l_brow', 'r_brow', 'l_eye', 'r_eye', 'eye_g', 'l_ear', 'r_ear', 'ear_r',", "\n", "#     'nose', 'mouth', 'u_lip', 'l_lip', 'neck', 'neck_l', 'cloth', 'hair', 'hat']", "\n", "mask", "=", "np", ".", "zeros_like", "(", "vis_parsing_anno", ")", "\n", "# for i in range(1, 16):", "\n", "mask", "[", "vis_parsing_anno", ">", "0.5", "]", "=", "1.", "\n", "", "else", ":", "\n", "            ", "mask", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ")", "\n", "", "return", "mask", "", "", "", ""]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.vox.VoxelDataset.__init__": [[13, 70], ["list", "sorted", "vox.VoxelDataset.face_dict.keys", "len", "list", "os.listdir", "os.listdir", "numpy.load", "list", "len", "vox.VoxelDataset.face_dict.keys", "os.path.join", "os.listdir", "line.split", "vox.VoxelDataset.face_dict.keys", "list", "os.path.join", "os.listdir", "sorted", "vox.VoxelDataset.face_dict.keys", "vox.VoxelDataset.face_dict[].append", "len", "vox.VoxelDataset.face_dict.keys", "os.path.join", "len"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load"], ["    ", "def", "__init__", "(", "self", ",", "K", ",", "image_size", ",", "scale", ",", "trans_scale", "=", "0", ",", "dataname", "=", "'vox2'", ",", "n_train", "=", "100000", ",", "isTemporal", "=", "False", ",", "isEval", "=", "False", ",", "isSingle", "=", "False", ")", ":", "\n", "        ", "self", ".", "K", "=", "K", "\n", "self", ".", "image_size", "=", "image_size", "\n", "if", "dataname", "==", "'vox1'", ":", "\n", "            ", "self", ".", "kpt_suffix", "=", "'.txt'", "\n", "self", ".", "imagefolder", "=", "'/ps/project/face2d3d/VoxCeleb/vox1/dev/images_cropped'", "\n", "self", ".", "kptfolder", "=", "'/ps/scratch/yfeng/Data/VoxCeleb/vox1/landmark_2d'", "\n", "\n", "self", ".", "face_dict", "=", "{", "}", "\n", "for", "person_id", "in", "sorted", "(", "os", ".", "listdir", "(", "self", ".", "kptfolder", ")", ")", ":", "\n", "                ", "for", "video_id", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "self", ".", "kptfolder", ",", "person_id", ")", ")", ":", "\n", "                    ", "for", "face_id", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "self", ".", "kptfolder", ",", "person_id", ",", "video_id", ")", ")", ":", "\n", "                        ", "if", "'txt'", "in", "face_id", ":", "\n", "                            ", "continue", "\n", "", "key", "=", "person_id", "+", "'/'", "+", "video_id", "+", "'/'", "+", "face_id", "\n", "# if key not in self.face_dict.keys():", "\n", "#     self.face_dict[key] = []", "\n", "name_list", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "self", ".", "kptfolder", ",", "person_id", ",", "video_id", ",", "face_id", ")", ")", "\n", "name_list", "=", "[", "name", ".", "split", "[", "'.'", "]", "[", "0", "]", "for", "name", "in", "name_list", "]", "\n", "if", "len", "(", "name_list", ")", "<", "self", ".", "K", ":", "\n", "                            ", "continue", "\n", "", "self", ".", "face_dict", "[", "key", "]", "=", "sorted", "(", "name_list", ")", "\n", "\n", "", "", "", "", "elif", "dataname", "==", "'vox2'", ":", "\n", "# clean version: filter out images with bad lanmark labels, may lack extreme pose example", "\n", "            ", "self", ".", "kpt_suffix", "=", "'.npy'", "\n", "self", ".", "imagefolder", "=", "'/ps/scratch/face2d3d/VoxCeleb/vox2/dev/images_cropped_full_height'", "\n", "self", ".", "kptfolder", "=", "'/ps/scratch/face2d3d/vox2_best_clips_annotated_torch7'", "\n", "self", ".", "segfolder", "=", "'/ps/scratch/face2d3d/texture_in_the_wild_code/vox2_best_clips_cropped_frames_seg/test_crop_size_400_batch/'", "\n", "\n", "cleanlist_path", "=", "'/ps/scratch/face2d3d/texture_in_the_wild_code/VGGFace2_cleaning_codes/vox2_best_clips_info_max_normal_50_images_loadinglist.npy'", "\n", "cleanlist", "=", "np", ".", "load", "(", "cleanlist_path", ",", "allow_pickle", "=", "True", ")", "\n", "self", ".", "face_dict", "=", "{", "}", "\n", "for", "line", "in", "cleanlist", ":", "\n", "                ", "person_id", ",", "video_id", ",", "face_id", ",", "name", "=", "line", ".", "split", "(", "'/'", ")", "\n", "key", "=", "person_id", "+", "'/'", "+", "video_id", "+", "'/'", "+", "face_id", "\n", "if", "key", "not", "in", "self", ".", "face_dict", ".", "keys", "(", ")", ":", "\n", "                    ", "self", ".", "face_dict", "[", "key", "]", "=", "[", "]", "\n", "", "else", ":", "\n", "                    ", "self", ".", "face_dict", "[", "key", "]", ".", "append", "(", "name", ")", "\n", "# filter face", "\n", "", "", "keys", "=", "list", "(", "self", ".", "face_dict", ".", "keys", "(", ")", ")", "\n", "for", "key", "in", "keys", ":", "\n", "                ", "if", "len", "(", "self", ".", "face_dict", "[", "key", "]", ")", "<", "self", ".", "K", ":", "\n", "                    ", "del", "self", ".", "face_dict", "[", "key", "]", "\n", "\n", "", "", "", "self", ".", "face_list", "=", "list", "(", "self", ".", "face_dict", ".", "keys", "(", ")", ")", "\n", "n_train", "=", "n_train", "if", "n_train", "<", "len", "(", "self", ".", "face_list", ")", "else", "len", "(", "self", ".", "face_list", ")", "\n", "self", ".", "face_list", "=", "list", "(", "self", ".", "face_dict", ".", "keys", "(", ")", ")", "[", ":", "n_train", "]", "\n", "if", "isEval", ":", "\n", "            ", "self", ".", "face_list", "=", "list", "(", "self", ".", "face_dict", ".", "keys", "(", ")", ")", "[", ":", "n_train", "]", "[", "-", "100", ":", "]", "\n", "", "self", ".", "isTemporal", "=", "isTemporal", "\n", "self", ".", "scale", "=", "scale", "#[scale_min, scale_max]", "\n", "self", ".", "trans_scale", "=", "trans_scale", "#[dx, dy]", "\n", "self", ".", "isSingle", "=", "isSingle", "\n", "if", "isSingle", ":", "\n", "            ", "self", ".", "K", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.vox.VoxelDataset.__len__": [[71, 73], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "face_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.vox.VoxelDataset.__getitem__": [[74, 128], ["key.split", "numpy.random.randint", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "numpy.random.randint", "range", "numpy.array", "os.path.join", "os.path.join", "os.path.join", "vox.VoxelDataset.load_mask", "vox.VoxelDataset.crop", "skimage.transform.warp", "skimage.transform.warp", "images_list.append", "kpt_list.append", "mask_list.append", "images_array.squeeze.squeeze.squeeze", "kpt_array.squeeze.squeeze.squeeze", "mask_array.squeeze.squeeze.squeeze", "len", "numpy.random.randint", "skimage.io.imread", "numpy.load", "numpy.dot", "skimage.transform.warp.transpose", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array", "numpy.array", "numpy.array", "len", "len", "numpy.hstack", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.datasets.ethnicity.EthnicityDataset.load_mask", "home.repos.pwc.inspect_result.foivospar_NED.datasets.ethnicity.EthnicityDataset.crop", "home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "key", "=", "self", ".", "face_list", "[", "idx", "]", "\n", "person_id", ",", "video_id", ",", "face_id", "=", "key", ".", "split", "(", "'/'", ")", "\n", "name_list", "=", "self", ".", "face_dict", "[", "key", "]", "\n", "ind", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "len", "(", "name_list", ")", ")", "\n", "\n", "images_list", "=", "[", "]", ";", "kpt_list", "=", "[", "]", ";", "fullname_list", "=", "[", "]", ";", "mask_list", "=", "[", "]", "\n", "if", "self", ".", "isTemporal", ":", "\n", "            ", "random_start", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "len", "(", "name_list", ")", "-", "self", ".", "K", ")", "\n", "sample_list", "=", "range", "(", "random_start", ",", "random_start", "+", "self", ".", "K", ")", "\n", "", "else", ":", "\n", "            ", "sample_list", "=", "np", ".", "array", "(", "(", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "len", "(", "name_list", ")", ",", "size", "=", "self", ".", "K", ")", ")", ")", "\n", "\n", "", "for", "i", "in", "sample_list", ":", "\n", "            ", "name", "=", "name_list", "[", "i", "]", "\n", "image_path", "=", "(", "os", ".", "path", ".", "join", "(", "self", ".", "imagefolder", ",", "person_id", ",", "video_id", ",", "face_id", ",", "name", "+", "'.png'", ")", ")", "\n", "kpt_path", "=", "(", "os", ".", "path", ".", "join", "(", "self", ".", "kptfolder", ",", "person_id", ",", "video_id", ",", "face_id", ",", "name", "+", "self", ".", "kpt_suffix", ")", ")", "\n", "seg_path", "=", "(", "os", ".", "path", ".", "join", "(", "self", ".", "segfolder", ",", "person_id", ",", "video_id", ",", "face_id", ",", "name", "+", "'.npy'", ")", ")", "\n", "\n", "image", "=", "imread", "(", "image_path", ")", "/", "255.", "\n", "kpt", "=", "np", ".", "load", "(", "kpt_path", ")", "[", ":", ",", ":", "2", "]", "\n", "mask", "=", "self", ".", "load_mask", "(", "seg_path", ",", "image", ".", "shape", "[", "0", "]", ",", "image", ".", "shape", "[", "1", "]", ")", "\n", "\n", "### crop information", "\n", "tform", "=", "self", ".", "crop", "(", "image", ",", "kpt", ")", "\n", "## crop ", "\n", "cropped_image", "=", "warp", "(", "image", ",", "tform", ".", "inverse", ",", "output_shape", "=", "(", "self", ".", "image_size", ",", "self", ".", "image_size", ")", ")", "\n", "cropped_mask", "=", "warp", "(", "mask", ",", "tform", ".", "inverse", ",", "output_shape", "=", "(", "self", ".", "image_size", ",", "self", ".", "image_size", ")", ")", "\n", "cropped_kpt", "=", "np", ".", "dot", "(", "tform", ".", "params", ",", "np", ".", "hstack", "(", "[", "kpt", ",", "np", ".", "ones", "(", "[", "kpt", ".", "shape", "[", "0", "]", ",", "1", "]", ")", "]", ")", ".", "T", ")", ".", "T", "# np.linalg.inv(tform.params)", "\n", "\n", "# normalized kpt", "\n", "cropped_kpt", "[", ":", ",", ":", "2", "]", "=", "cropped_kpt", "[", ":", ",", ":", "2", "]", "/", "self", ".", "image_size", "*", "2", "-", "1", "\n", "\n", "images_list", ".", "append", "(", "cropped_image", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "kpt_list", ".", "append", "(", "cropped_kpt", ")", "\n", "mask_list", ".", "append", "(", "cropped_mask", ")", "\n", "\n", "###", "\n", "", "images_array", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "images_list", ")", ")", ".", "type", "(", "dtype", "=", "torch", ".", "float32", ")", "#K,224,224,3", "\n", "kpt_array", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "kpt_list", ")", ")", ".", "type", "(", "dtype", "=", "torch", ".", "float32", ")", "#K,224,224,3", "\n", "mask_array", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "mask_list", ")", ")", ".", "type", "(", "dtype", "=", "torch", ".", "float32", ")", "#K,224,224,3", "\n", "\n", "if", "self", ".", "isSingle", ":", "\n", "            ", "images_array", "=", "images_array", ".", "squeeze", "(", ")", "\n", "kpt_array", "=", "kpt_array", ".", "squeeze", "(", ")", "\n", "mask_array", "=", "mask_array", ".", "squeeze", "(", ")", "\n", "\n", "", "data_dict", "=", "{", "\n", "'image'", ":", "images_array", ",", "\n", "'landmark'", ":", "kpt_array", ",", "\n", "'mask'", ":", "mask_array", "\n", "}", "\n", "\n", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.vox.VoxelDataset.crop": [[129, 152], ["numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.array", "int", "numpy.array", "numpy.array", "skimage.transform.estimate_transform", "numpy.random.rand", "numpy.random.rand"], "methods", ["None"], ["", "def", "crop", "(", "self", ",", "image", ",", "kpt", ")", ":", "\n", "        ", "left", "=", "np", ".", "min", "(", "kpt", "[", ":", ",", "0", "]", ")", ";", "right", "=", "np", ".", "max", "(", "kpt", "[", ":", ",", "0", "]", ")", ";", "\n", "top", "=", "np", ".", "min", "(", "kpt", "[", ":", ",", "1", "]", ")", ";", "bottom", "=", "np", ".", "max", "(", "kpt", "[", ":", ",", "1", "]", ")", "\n", "\n", "h", ",", "w", ",", "_", "=", "image", ".", "shape", "\n", "old_size", "=", "(", "right", "-", "left", "+", "bottom", "-", "top", ")", "/", "2", "\n", "center", "=", "np", ".", "array", "(", "[", "right", "-", "(", "right", "-", "left", ")", "/", "2.0", ",", "bottom", "-", "(", "bottom", "-", "top", ")", "/", "2.0", "]", ")", "#+ old_size*0.1])", "\n", "# translate center", "\n", "trans_scale", "=", "(", "np", ".", "random", ".", "rand", "(", "2", ")", "*", "2", "-", "1", ")", "*", "self", ".", "trans_scale", "\n", "center", "=", "center", "+", "trans_scale", "*", "old_size", "# 0.5", "\n", "\n", "scale", "=", "np", ".", "random", ".", "rand", "(", ")", "*", "(", "self", ".", "scale", "[", "1", "]", "-", "self", ".", "scale", "[", "0", "]", ")", "+", "self", ".", "scale", "[", "0", "]", "\n", "size", "=", "int", "(", "old_size", "*", "scale", ")", "\n", "\n", "# crop image", "\n", "src_pts", "=", "np", ".", "array", "(", "[", "[", "center", "[", "0", "]", "-", "size", "/", "2", ",", "center", "[", "1", "]", "-", "size", "/", "2", "]", ",", "[", "center", "[", "0", "]", "-", "size", "/", "2", ",", "center", "[", "1", "]", "+", "size", "/", "2", "]", ",", "[", "center", "[", "0", "]", "+", "size", "/", "2", ",", "center", "[", "1", "]", "-", "size", "/", "2", "]", "]", ")", "\n", "DST_PTS", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "self", ".", "image_size", "-", "1", "]", ",", "[", "self", ".", "image_size", "-", "1", ",", "0", "]", "]", ")", "\n", "tform", "=", "estimate_transform", "(", "'similarity'", ",", "src_pts", ",", "DST_PTS", ")", "\n", "\n", "# cropped_image = warp(image, tform.inverse, output_shape=(self.image_size, self.image_size))", "\n", "# # change kpt accordingly", "\n", "# cropped_kpt = np.dot(tform.params, np.hstack([kpt, np.ones([kpt.shape[0],1])]).T).T # np.linalg.inv(tform.params)", "\n", "return", "tform", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.vox.VoxelDataset.load_mask": [[153, 165], ["os.path.isfile", "numpy.load", "numpy.zeros_like", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load"], ["", "def", "load_mask", "(", "self", ",", "maskpath", ",", "h", ",", "w", ")", ":", "\n", "# print(maskpath)", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "maskpath", ")", ":", "\n", "            ", "vis_parsing_anno", "=", "np", ".", "load", "(", "maskpath", ")", "\n", "# atts = ['skin', 'l_brow', 'r_brow', 'l_eye', 'r_eye', 'eye_g', 'l_ear', 'r_ear', 'ear_r',", "\n", "#     'nose', 'mouth', 'u_lip', 'l_lip', 'neck', 'neck_l', 'cloth', 'hair', 'hat']", "\n", "mask", "=", "np", ".", "zeros_like", "(", "vis_parsing_anno", ")", "\n", "# for i in range(1, 16):", "\n", "mask", "[", "vis_parsing_anno", ">", "0.5", "]", "=", "1.", "\n", "", "else", ":", "\n", "            ", "mask", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ")", "\n", "", "return", "mask", "\n", "", "", ""]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.detectors.FAN.__init__": [[20, 23], ["face_alignment.FaceAlignment"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "device", "=", "'cuda'", ")", ":", "\n", "        ", "import", "face_alignment", "\n", "self", ".", "model", "=", "face_alignment", ".", "FaceAlignment", "(", "face_alignment", ".", "LandmarksType", ".", "_2D", ",", "flip_input", "=", "False", ",", "device", "=", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.detectors.FAN.run": [[24, 38], ["detectors.FAN.model.get_landmarks", "out[].squeeze", "numpy.min", "numpy.max", "numpy.min", "numpy.max"], "methods", ["None"], ["", "def", "run", "(", "self", ",", "image", ")", ":", "\n", "        ", "'''\n        image: 0-255, uint8, rgb, [h, w, 3]\n        return: detected box list\n        '''", "\n", "out", "=", "self", ".", "model", ".", "get_landmarks", "(", "image", ")", "\n", "if", "out", "is", "None", ":", "\n", "            ", "return", "[", "0", "]", ",", "'kpt68'", "\n", "", "else", ":", "\n", "            ", "kpt", "=", "out", "[", "0", "]", ".", "squeeze", "(", ")", "\n", "left", "=", "np", ".", "min", "(", "kpt", "[", ":", ",", "0", "]", ")", ";", "right", "=", "np", ".", "max", "(", "kpt", "[", ":", ",", "0", "]", ")", ";", "\n", "top", "=", "np", ".", "min", "(", "kpt", "[", ":", ",", "1", "]", ")", ";", "bottom", "=", "np", ".", "max", "(", "kpt", "[", ":", ",", "1", "]", ")", "\n", "bbox", "=", "[", "left", ",", "top", ",", "right", ",", "bottom", "]", "\n", "return", "bbox", ",", "'kpt68'", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.detectors.MTCNN.__init__": [[40, 47], ["mtcnn"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "device", "=", "'cpu'", ")", ":", "\n", "        ", "'''\n        https://github.com/timesler/facenet-pytorch/blob/master/examples/infer.ipynb\n        '''", "\n", "from", "facenet_pytorch", "import", "MTCNN", "as", "mtcnn", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "model", "=", "mtcnn", "(", "keep_all", "=", "True", ")", "\n", "", "def", "run", "(", "self", ",", "input", ")", ":", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.detectors.MTCNN.run": [[47, 58], ["detectors.MTCNN.model.detect", "[].squeeze"], "methods", ["None"], ["", "def", "run", "(", "self", ",", "input", ")", ":", "\n", "        ", "'''\n        image: 0-255, uint8, rgb, [h, w, 3]\n        return: detected box\n        '''", "\n", "out", "=", "self", ".", "model", ".", "detect", "(", "input", "[", "None", ",", "...", "]", ")", "\n", "if", "out", "[", "0", "]", "[", "0", "]", "is", "None", ":", "\n", "            ", "return", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "bbox", "=", "out", "[", "0", "]", "[", "0", "]", ".", "squeeze", "(", ")", "\n", "return", "bbox", ",", "'bbox'", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.build_datasets.build_train": [[18, 35], ["torch.utils.data.ConcatDataset", "data_list.append", "data_list.append", "data_list.append", "data_list.append", "data_list.append", "data_list.append", "vox.VoxelDataset", "vggface.VGGFace2Dataset", "VGGFace2HQDataset", "ethnicity.EthnicityDataset", "COCODataset", "CelebAHQDataset"], "function", ["None"], ["def", "build_train", "(", "config", ",", "is_train", "=", "True", ")", ":", "\n", "    ", "data_list", "=", "[", "]", "\n", "if", "'vox2'", "in", "config", ".", "training_data", ":", "\n", "        ", "data_list", ".", "append", "(", "VoxelDataset", "(", "dataname", "=", "'vox2'", ",", "K", "=", "config", ".", "K", ",", "image_size", "=", "config", ".", "image_size", ",", "scale", "=", "[", "config", ".", "scale_min", ",", "config", ".", "scale_max", "]", ",", "trans_scale", "=", "config", ".", "trans_scale", ",", "isSingle", "=", "config", ".", "isSingle", ")", ")", "\n", "", "if", "'vggface2'", "in", "config", ".", "training_data", ":", "\n", "        ", "data_list", ".", "append", "(", "VGGFace2Dataset", "(", "K", "=", "config", ".", "K", ",", "image_size", "=", "config", ".", "image_size", ",", "scale", "=", "[", "config", ".", "scale_min", ",", "config", ".", "scale_max", "]", ",", "trans_scale", "=", "config", ".", "trans_scale", ",", "isSingle", "=", "config", ".", "isSingle", ")", ")", "\n", "", "if", "'vggface2hq'", "in", "config", ".", "training_data", ":", "\n", "        ", "data_list", ".", "append", "(", "VGGFace2HQDataset", "(", "K", "=", "config", ".", "K", ",", "image_size", "=", "config", ".", "image_size", ",", "scale", "=", "[", "config", ".", "scale_min", ",", "config", ".", "scale_max", "]", ",", "trans_scale", "=", "config", ".", "trans_scale", ",", "isSingle", "=", "config", ".", "isSingle", ")", ")", "\n", "", "if", "'ethnicity'", "in", "config", ".", "training_data", ":", "\n", "        ", "data_list", ".", "append", "(", "EthnicityDataset", "(", "K", "=", "config", ".", "K", ",", "image_size", "=", "config", ".", "image_size", ",", "scale", "=", "[", "config", ".", "scale_min", ",", "config", ".", "scale_max", "]", ",", "trans_scale", "=", "config", ".", "trans_scale", ",", "isSingle", "=", "config", ".", "isSingle", ")", ")", "\n", "", "if", "'coco'", "in", "config", ".", "training_data", ":", "\n", "        ", "data_list", ".", "append", "(", "COCODataset", "(", "image_size", "=", "config", ".", "image_size", ",", "scale", "=", "[", "config", ".", "scale_min", ",", "config", ".", "scale_max", "]", ",", "trans_scale", "=", "config", ".", "trans_scale", ")", ")", "\n", "", "if", "'celebahq'", "in", "config", ".", "training_data", ":", "\n", "        ", "data_list", ".", "append", "(", "CelebAHQDataset", "(", "image_size", "=", "config", ".", "image_size", ",", "scale", "=", "[", "config", ".", "scale_min", ",", "config", ".", "scale_max", "]", ",", "trans_scale", "=", "config", ".", "trans_scale", ")", ")", "\n", "", "dataset", "=", "ConcatDataset", "(", "data_list", ")", "\n", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.build_datasets.build_val": [[36, 47], ["torch.utils.data.ConcatDataset", "data_list.append", "data_list.append", "data_list.append", "vggface.VGGFace2Dataset", "now.NoWDataset", "aflw2000.AFLW2000"], "function", ["None"], ["", "def", "build_val", "(", "config", ",", "is_train", "=", "True", ")", ":", "\n", "    ", "data_list", "=", "[", "]", "\n", "if", "'vggface2'", "in", "config", ".", "eval_data", ":", "\n", "        ", "data_list", ".", "append", "(", "VGGFace2Dataset", "(", "isEval", "=", "True", ",", "K", "=", "config", ".", "K", ",", "image_size", "=", "config", ".", "image_size", ",", "scale", "=", "[", "config", ".", "scale_min", ",", "config", ".", "scale_max", "]", ",", "trans_scale", "=", "config", ".", "trans_scale", ",", "isSingle", "=", "config", ".", "isSingle", ")", ")", "\n", "", "if", "'now'", "in", "config", ".", "eval_data", ":", "\n", "        ", "data_list", ".", "append", "(", "NoWDataset", "(", ")", ")", "\n", "", "if", "'aflw2000'", "in", "config", ".", "eval_data", ":", "\n", "        ", "data_list", ".", "append", "(", "AFLW2000", "(", ")", ")", "\n", "", "dataset", "=", "ConcatDataset", "(", "data_list", ")", "\n", "\n", "return", "dataset", "\n", "", ""]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.train_datasets.VoxelDataset.__init__": [[52, 109], ["list", "sorted", "train_datasets.VoxelDataset.face_dict.keys", "len", "list", "os.listdir", "os.listdir", "numpy.load", "list", "len", "train_datasets.VoxelDataset.face_dict.keys", "os.path.join", "os.listdir", "line.split", "train_datasets.VoxelDataset.face_dict.keys", "list", "os.path.join", "os.listdir", "sorted", "train_datasets.VoxelDataset.face_dict.keys", "train_datasets.VoxelDataset.face_dict[].append", "len", "train_datasets.VoxelDataset.face_dict.keys", "os.path.join", "len"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load"], ["    ", "def", "__init__", "(", "self", ",", "K", ",", "image_size", ",", "scale", ",", "trans_scale", "=", "0", ",", "dataname", "=", "'vox2'", ",", "n_train", "=", "100000", ",", "isTemporal", "=", "False", ",", "isEval", "=", "False", ",", "isSingle", "=", "False", ")", ":", "\n", "        ", "self", ".", "K", "=", "K", "\n", "self", ".", "image_size", "=", "image_size", "\n", "if", "dataname", "==", "'vox1'", ":", "\n", "            ", "self", ".", "kpt_suffix", "=", "'.txt'", "\n", "self", ".", "imagefolder", "=", "'/ps/project/face2d3d/VoxCeleb/vox1/dev/images_cropped'", "\n", "self", ".", "kptfolder", "=", "'/ps/scratch/yfeng/Data/VoxCeleb/vox1/landmark_2d'", "\n", "\n", "self", ".", "face_dict", "=", "{", "}", "\n", "for", "person_id", "in", "sorted", "(", "os", ".", "listdir", "(", "self", ".", "kptfolder", ")", ")", ":", "\n", "                ", "for", "video_id", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "self", ".", "kptfolder", ",", "person_id", ")", ")", ":", "\n", "                    ", "for", "face_id", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "self", ".", "kptfolder", ",", "person_id", ",", "video_id", ")", ")", ":", "\n", "                        ", "if", "'txt'", "in", "face_id", ":", "\n", "                            ", "continue", "\n", "", "key", "=", "person_id", "+", "'/'", "+", "video_id", "+", "'/'", "+", "face_id", "\n", "# if key not in self.face_dict.keys():", "\n", "#     self.face_dict[key] = []", "\n", "name_list", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "self", ".", "kptfolder", ",", "person_id", ",", "video_id", ",", "face_id", ")", ")", "\n", "name_list", "=", "[", "name", ".", "split", "[", "'.'", "]", "[", "0", "]", "for", "name", "in", "name_list", "]", "\n", "if", "len", "(", "name_list", ")", "<", "self", ".", "K", ":", "\n", "                            ", "continue", "\n", "", "self", ".", "face_dict", "[", "key", "]", "=", "sorted", "(", "name_list", ")", "\n", "\n", "", "", "", "", "elif", "dataname", "==", "'vox2'", ":", "\n", "# clean version: filter out images with bad lanmark labels, may lack extreme pose example", "\n", "            ", "self", ".", "kpt_suffix", "=", "'.npy'", "\n", "self", ".", "imagefolder", "=", "'/ps/scratch/face2d3d/VoxCeleb/vox2/dev/images_cropped_full_height'", "\n", "self", ".", "kptfolder", "=", "'/ps/scratch/face2d3d/vox2_best_clips_annotated_torch7'", "\n", "self", ".", "segfolder", "=", "'/ps/scratch/face2d3d/texture_in_the_wild_code/vox2_best_clips_cropped_frames_seg/test_crop_size_400_batch/'", "\n", "\n", "cleanlist_path", "=", "'/ps/scratch/face2d3d/texture_in_the_wild_code/VGGFace2_cleaning_codes/vox2_best_clips_info_max_normal_50_images_loadinglist.npy'", "\n", "cleanlist", "=", "np", ".", "load", "(", "cleanlist_path", ",", "allow_pickle", "=", "True", ")", "\n", "self", ".", "face_dict", "=", "{", "}", "\n", "for", "line", "in", "cleanlist", ":", "\n", "                ", "person_id", ",", "video_id", ",", "face_id", ",", "name", "=", "line", ".", "split", "(", "'/'", ")", "\n", "key", "=", "person_id", "+", "'/'", "+", "video_id", "+", "'/'", "+", "face_id", "\n", "if", "key", "not", "in", "self", ".", "face_dict", ".", "keys", "(", ")", ":", "\n", "                    ", "self", ".", "face_dict", "[", "key", "]", "=", "[", "]", "\n", "", "else", ":", "\n", "                    ", "self", ".", "face_dict", "[", "key", "]", ".", "append", "(", "name", ")", "\n", "# filter face", "\n", "", "", "keys", "=", "list", "(", "self", ".", "face_dict", ".", "keys", "(", ")", ")", "\n", "for", "key", "in", "keys", ":", "\n", "                ", "if", "len", "(", "self", ".", "face_dict", "[", "key", "]", ")", "<", "self", ".", "K", ":", "\n", "                    ", "del", "self", ".", "face_dict", "[", "key", "]", "\n", "\n", "", "", "", "self", ".", "face_list", "=", "list", "(", "self", ".", "face_dict", ".", "keys", "(", ")", ")", "\n", "n_train", "=", "n_train", "if", "n_train", "<", "len", "(", "self", ".", "face_list", ")", "else", "len", "(", "self", ".", "face_list", ")", "\n", "self", ".", "face_list", "=", "list", "(", "self", ".", "face_dict", ".", "keys", "(", ")", ")", "[", ":", "n_train", "]", "\n", "if", "isEval", ":", "\n", "            ", "self", ".", "face_list", "=", "list", "(", "self", ".", "face_dict", ".", "keys", "(", ")", ")", "[", ":", "n_train", "]", "[", "-", "100", ":", "]", "\n", "", "self", ".", "isTemporal", "=", "isTemporal", "\n", "self", ".", "scale", "=", "scale", "#[scale_min, scale_max]", "\n", "self", ".", "trans_scale", "=", "trans_scale", "#[dx, dy]", "\n", "self", ".", "isSingle", "=", "isSingle", "\n", "if", "isSingle", ":", "\n", "            ", "self", ".", "K", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.train_datasets.VoxelDataset.__len__": [[110, 112], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "face_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.train_datasets.VoxelDataset.__getitem__": [[113, 167], ["key.split", "numpy.random.randint", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "numpy.random.randint", "range", "numpy.array", "os.path.join", "os.path.join", "os.path.join", "train_datasets.VoxelDataset.load_mask", "train_datasets.VoxelDataset.crop", "skimage.transform.warp", "skimage.transform.warp", "images_list.append", "kpt_list.append", "mask_list.append", "images_array.squeeze.squeeze.squeeze", "kpt_array.squeeze.squeeze.squeeze", "mask_array.squeeze.squeeze.squeeze", "len", "numpy.random.randint", "skimage.io.imread", "numpy.load", "numpy.dot", "skimage.transform.warp.transpose", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array", "numpy.array", "numpy.array", "len", "len", "numpy.hstack", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.datasets.ethnicity.EthnicityDataset.load_mask", "home.repos.pwc.inspect_result.foivospar_NED.datasets.ethnicity.EthnicityDataset.crop", "home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "key", "=", "self", ".", "face_list", "[", "idx", "]", "\n", "person_id", ",", "video_id", ",", "face_id", "=", "key", ".", "split", "(", "'/'", ")", "\n", "name_list", "=", "self", ".", "face_dict", "[", "key", "]", "\n", "ind", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "len", "(", "name_list", ")", ")", "\n", "\n", "images_list", "=", "[", "]", ";", "kpt_list", "=", "[", "]", ";", "fullname_list", "=", "[", "]", ";", "mask_list", "=", "[", "]", "\n", "if", "self", ".", "isTemporal", ":", "\n", "            ", "random_start", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "len", "(", "name_list", ")", "-", "self", ".", "K", ")", "\n", "sample_list", "=", "range", "(", "random_start", ",", "random_start", "+", "self", ".", "K", ")", "\n", "", "else", ":", "\n", "            ", "sample_list", "=", "np", ".", "array", "(", "(", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "len", "(", "name_list", ")", ",", "size", "=", "self", ".", "K", ")", ")", ")", "\n", "\n", "", "for", "i", "in", "sample_list", ":", "\n", "            ", "name", "=", "name_list", "[", "i", "]", "\n", "image_path", "=", "(", "os", ".", "path", ".", "join", "(", "self", ".", "imagefolder", ",", "person_id", ",", "video_id", ",", "face_id", ",", "name", "+", "'.png'", ")", ")", "\n", "kpt_path", "=", "(", "os", ".", "path", ".", "join", "(", "self", ".", "kptfolder", ",", "person_id", ",", "video_id", ",", "face_id", ",", "name", "+", "self", ".", "kpt_suffix", ")", ")", "\n", "seg_path", "=", "(", "os", ".", "path", ".", "join", "(", "self", ".", "segfolder", ",", "person_id", ",", "video_id", ",", "face_id", ",", "name", "+", "'.npy'", ")", ")", "\n", "\n", "image", "=", "imread", "(", "image_path", ")", "/", "255.", "\n", "kpt", "=", "np", ".", "load", "(", "kpt_path", ")", "[", ":", ",", ":", "2", "]", "\n", "mask", "=", "self", ".", "load_mask", "(", "seg_path", ",", "image", ".", "shape", "[", "0", "]", ",", "image", ".", "shape", "[", "1", "]", ")", "\n", "\n", "### crop information", "\n", "tform", "=", "self", ".", "crop", "(", "image", ",", "kpt", ")", "\n", "## crop ", "\n", "cropped_image", "=", "warp", "(", "image", ",", "tform", ".", "inverse", ",", "output_shape", "=", "(", "self", ".", "image_size", ",", "self", ".", "image_size", ")", ")", "\n", "cropped_mask", "=", "warp", "(", "mask", ",", "tform", ".", "inverse", ",", "output_shape", "=", "(", "self", ".", "image_size", ",", "self", ".", "image_size", ")", ")", "\n", "cropped_kpt", "=", "np", ".", "dot", "(", "tform", ".", "params", ",", "np", ".", "hstack", "(", "[", "kpt", ",", "np", ".", "ones", "(", "[", "kpt", ".", "shape", "[", "0", "]", ",", "1", "]", ")", "]", ")", ".", "T", ")", ".", "T", "# np.linalg.inv(tform.params)", "\n", "\n", "# normalized kpt", "\n", "cropped_kpt", "[", ":", ",", ":", "2", "]", "=", "cropped_kpt", "[", ":", ",", ":", "2", "]", "/", "self", ".", "image_size", "*", "2", "-", "1", "\n", "\n", "images_list", ".", "append", "(", "cropped_image", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "kpt_list", ".", "append", "(", "cropped_kpt", ")", "\n", "mask_list", ".", "append", "(", "cropped_mask", ")", "\n", "\n", "###", "\n", "", "images_array", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "images_list", ")", ")", ".", "type", "(", "dtype", "=", "torch", ".", "float32", ")", "#K,224,224,3", "\n", "kpt_array", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "kpt_list", ")", ")", ".", "type", "(", "dtype", "=", "torch", ".", "float32", ")", "#K,224,224,3", "\n", "mask_array", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "mask_list", ")", ")", ".", "type", "(", "dtype", "=", "torch", ".", "float32", ")", "#K,224,224,3", "\n", "\n", "if", "self", ".", "isSingle", ":", "\n", "            ", "images_array", "=", "images_array", ".", "squeeze", "(", ")", "\n", "kpt_array", "=", "kpt_array", ".", "squeeze", "(", ")", "\n", "mask_array", "=", "mask_array", ".", "squeeze", "(", ")", "\n", "\n", "", "data_dict", "=", "{", "\n", "'image'", ":", "images_array", ",", "\n", "'landmark'", ":", "kpt_array", ",", "\n", "'mask'", ":", "mask_array", "\n", "}", "\n", "\n", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.train_datasets.VoxelDataset.crop": [[168, 191], ["numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.array", "int", "numpy.array", "numpy.array", "skimage.transform.estimate_transform", "numpy.random.rand", "numpy.random.rand"], "methods", ["None"], ["", "def", "crop", "(", "self", ",", "image", ",", "kpt", ")", ":", "\n", "        ", "left", "=", "np", ".", "min", "(", "kpt", "[", ":", ",", "0", "]", ")", ";", "right", "=", "np", ".", "max", "(", "kpt", "[", ":", ",", "0", "]", ")", ";", "\n", "top", "=", "np", ".", "min", "(", "kpt", "[", ":", ",", "1", "]", ")", ";", "bottom", "=", "np", ".", "max", "(", "kpt", "[", ":", ",", "1", "]", ")", "\n", "\n", "h", ",", "w", ",", "_", "=", "image", ".", "shape", "\n", "old_size", "=", "(", "right", "-", "left", "+", "bottom", "-", "top", ")", "/", "2", "\n", "center", "=", "np", ".", "array", "(", "[", "right", "-", "(", "right", "-", "left", ")", "/", "2.0", ",", "bottom", "-", "(", "bottom", "-", "top", ")", "/", "2.0", "]", ")", "#+ old_size*0.1])", "\n", "# translate center", "\n", "trans_scale", "=", "(", "np", ".", "random", ".", "rand", "(", "2", ")", "*", "2", "-", "1", ")", "*", "self", ".", "trans_scale", "\n", "center", "=", "center", "+", "trans_scale", "*", "old_size", "# 0.5", "\n", "\n", "scale", "=", "np", ".", "random", ".", "rand", "(", ")", "*", "(", "self", ".", "scale", "[", "1", "]", "-", "self", ".", "scale", "[", "0", "]", ")", "+", "self", ".", "scale", "[", "0", "]", "\n", "size", "=", "int", "(", "old_size", "*", "scale", ")", "\n", "\n", "# crop image", "\n", "src_pts", "=", "np", ".", "array", "(", "[", "[", "center", "[", "0", "]", "-", "size", "/", "2", ",", "center", "[", "1", "]", "-", "size", "/", "2", "]", ",", "[", "center", "[", "0", "]", "-", "size", "/", "2", ",", "center", "[", "1", "]", "+", "size", "/", "2", "]", ",", "[", "center", "[", "0", "]", "+", "size", "/", "2", ",", "center", "[", "1", "]", "-", "size", "/", "2", "]", "]", ")", "\n", "DST_PTS", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "self", ".", "image_size", "-", "1", "]", ",", "[", "self", ".", "image_size", "-", "1", ",", "0", "]", "]", ")", "\n", "tform", "=", "estimate_transform", "(", "'similarity'", ",", "src_pts", ",", "DST_PTS", ")", "\n", "\n", "# cropped_image = warp(image, tform.inverse, output_shape=(self.image_size, self.image_size))", "\n", "# # change kpt accordingly", "\n", "# cropped_kpt = np.dot(tform.params, np.hstack([kpt, np.ones([kpt.shape[0],1])]).T).T # np.linalg.inv(tform.params)", "\n", "return", "tform", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.train_datasets.VoxelDataset.load_mask": [[192, 204], ["os.path.isfile", "numpy.load", "numpy.zeros_like", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load"], ["", "def", "load_mask", "(", "self", ",", "maskpath", ",", "h", ",", "w", ")", ":", "\n", "# print(maskpath)", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "maskpath", ")", ":", "\n", "            ", "vis_parsing_anno", "=", "np", ".", "load", "(", "maskpath", ")", "\n", "# atts = ['skin', 'l_brow', 'r_brow', 'l_eye', 'r_eye', 'eye_g', 'l_ear', 'r_ear', 'ear_r',", "\n", "#     'nose', 'mouth', 'u_lip', 'l_lip', 'neck', 'neck_l', 'cloth', 'hair', 'hat']", "\n", "mask", "=", "np", ".", "zeros_like", "(", "vis_parsing_anno", ")", "\n", "# for i in range(1, 16):", "\n", "mask", "[", "vis_parsing_anno", ">", "0.5", "]", "=", "1.", "\n", "", "else", ":", "\n", "            ", "mask", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ")", "\n", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.train_datasets.COCODataset.__init__": [[207, 219], ["os.listdir"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "image_size", ",", "scale", ",", "trans_scale", "=", "0", ",", "isEval", "=", "False", ")", ":", "\n", "        ", "'''\n        # 53877 faces\n        K must be less than 6\n        '''", "\n", "self", ".", "image_size", "=", "image_size", "\n", "self", ".", "imagefolder", "=", "'/ps/scratch/yfeng/Data/COCO/raw/train2017'", "\n", "self", ".", "kptfolder", "=", "'/ps/scratch/yfeng/Data/COCO/face/train2017_kpt'", "\n", "\n", "self", ".", "kptpath_list", "=", "os", ".", "listdir", "(", "self", ".", "kptfolder", ")", "\n", "self", ".", "scale", "=", "scale", "#[scale_min, scale_max]", "\n", "self", ".", "trans_scale", "=", "trans_scale", "# 0.5?", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.train_datasets.COCODataset.__len__": [[220, 222], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "kptpath_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.train_datasets.COCODataset.__getitem__": [[223, 260], ["os.path.join", "os.path.join", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "train_datasets.COCODataset.crop", "skimage.transform.warp", "torch.from_numpy().type", "torch.from_numpy().type", "kptname.split", "numpy.loadtxt", "numpy.random.randint", "skimage.io.imread", "len", "numpy.tile", "numpy.dot", "torch.from_numpy", "torch.from_numpy", "len", "numpy.hstack", "skimage.transform.warp.transpose", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.datasets.ethnicity.EthnicityDataset.crop"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "while", "(", "100", ")", ":", "\n", "            ", "kptname", "=", "self", ".", "kptpath_list", "[", "idx", "]", "\n", "name", "=", "kptname", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "imagefolder", ",", "name", "+", "'.jpg'", ")", "\n", "kpt_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "kptfolder", ",", "kptname", ")", "\n", "\n", "kpt", "=", "np", ".", "loadtxt", "(", "kpt_path", ")", "[", ":", ",", ":", "2", "]", "\n", "left", "=", "np", ".", "min", "(", "kpt", "[", ":", ",", "0", "]", ")", ";", "right", "=", "np", ".", "max", "(", "kpt", "[", ":", ",", "0", "]", ")", ";", "\n", "top", "=", "np", ".", "min", "(", "kpt", "[", ":", ",", "1", "]", ")", ";", "bottom", "=", "np", ".", "max", "(", "kpt", "[", ":", ",", "1", "]", ")", "\n", "if", "(", "right", "-", "left", ")", "<", "10", "or", "(", "bottom", "-", "top", ")", "<", "10", ":", "\n", "                ", "idx", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "len", "(", "self", ".", "kptpath_list", ")", ")", "\n", "continue", "\n", "\n", "", "image", "=", "imread", "(", "image_path", ")", "/", "255.", "\n", "if", "len", "(", "image", ".", "shape", ")", "<", "3", ":", "\n", "                ", "image", "=", "np", ".", "tile", "(", "image", "[", ":", ",", ":", ",", "None", "]", ",", "3", ")", "\n", "### crop information", "\n", "", "tform", "=", "self", ".", "crop", "(", "image", ",", "kpt", ")", "\n", "## crop ", "\n", "cropped_image", "=", "warp", "(", "image", ",", "tform", ".", "inverse", ",", "output_shape", "=", "(", "self", ".", "image_size", ",", "self", ".", "image_size", ")", ")", "\n", "cropped_kpt", "=", "np", ".", "dot", "(", "tform", ".", "params", ",", "np", ".", "hstack", "(", "[", "kpt", ",", "np", ".", "ones", "(", "[", "kpt", ".", "shape", "[", "0", "]", ",", "1", "]", ")", "]", ")", ".", "T", ")", ".", "T", "# np.linalg.inv(tform.params)", "\n", "\n", "# normalized kpt", "\n", "cropped_kpt", "[", ":", ",", ":", "2", "]", "=", "cropped_kpt", "[", ":", ",", ":", "2", "]", "/", "self", ".", "image_size", "*", "2", "-", "1", "\n", "\n", "###", "\n", "images_array", "=", "torch", ".", "from_numpy", "(", "cropped_image", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", ".", "type", "(", "dtype", "=", "torch", ".", "float32", ")", "#224,224,3", "\n", "kpt_array", "=", "torch", ".", "from_numpy", "(", "cropped_kpt", ")", ".", "type", "(", "dtype", "=", "torch", ".", "float32", ")", "#224,224,3", "\n", "\n", "data_dict", "=", "{", "\n", "'image'", ":", "images_array", "*", "2.", "-", "1", ",", "\n", "'landmark'", ":", "kpt_array", ",", "\n", "# 'mask': mask_array", "\n", "}", "\n", "\n", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.train_datasets.COCODataset.crop": [[261, 284], ["numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.array", "int", "numpy.array", "numpy.array", "skimage.transform.estimate_transform", "numpy.random.rand", "numpy.random.rand"], "methods", ["None"], ["", "", "def", "crop", "(", "self", ",", "image", ",", "kpt", ")", ":", "\n", "        ", "left", "=", "np", ".", "min", "(", "kpt", "[", ":", ",", "0", "]", ")", ";", "right", "=", "np", ".", "max", "(", "kpt", "[", ":", ",", "0", "]", ")", ";", "\n", "top", "=", "np", ".", "min", "(", "kpt", "[", ":", ",", "1", "]", ")", ";", "bottom", "=", "np", ".", "max", "(", "kpt", "[", ":", ",", "1", "]", ")", "\n", "\n", "h", ",", "w", ",", "_", "=", "image", ".", "shape", "\n", "old_size", "=", "(", "right", "-", "left", "+", "bottom", "-", "top", ")", "/", "2", "\n", "center", "=", "np", ".", "array", "(", "[", "right", "-", "(", "right", "-", "left", ")", "/", "2.0", ",", "bottom", "-", "(", "bottom", "-", "top", ")", "/", "2.0", "]", ")", "#+ old_size*0.1])", "\n", "trans_scale", "=", "(", "np", ".", "random", ".", "rand", "(", "2", ")", "*", "2", "-", "1", ")", "*", "self", ".", "trans_scale", "\n", "center", "=", "center", "+", "trans_scale", "*", "old_size", "# 0.5", "\n", "\n", "scale", "=", "np", ".", "random", ".", "rand", "(", ")", "*", "(", "self", ".", "scale", "[", "1", "]", "-", "self", ".", "scale", "[", "0", "]", ")", "+", "self", ".", "scale", "[", "0", "]", "\n", "\n", "size", "=", "int", "(", "old_size", "*", "scale", ")", "\n", "\n", "# crop image", "\n", "src_pts", "=", "np", ".", "array", "(", "[", "[", "center", "[", "0", "]", "-", "size", "/", "2", ",", "center", "[", "1", "]", "-", "size", "/", "2", "]", ",", "[", "center", "[", "0", "]", "-", "size", "/", "2", ",", "center", "[", "1", "]", "+", "size", "/", "2", "]", ",", "[", "center", "[", "0", "]", "+", "size", "/", "2", ",", "center", "[", "1", "]", "-", "size", "/", "2", "]", "]", ")", "\n", "DST_PTS", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "self", ".", "image_size", "-", "1", "]", ",", "[", "self", ".", "image_size", "-", "1", ",", "0", "]", "]", ")", "\n", "tform", "=", "estimate_transform", "(", "'similarity'", ",", "src_pts", ",", "DST_PTS", ")", "\n", "\n", "# cropped_image = warp(image, tform.inverse, output_shape=(self.image_size, self.image_size))", "\n", "# # change kpt accordingly", "\n", "# cropped_kpt = np.dot(tform.params, np.hstack([kpt, np.ones([kpt.shape[0],1])]).T).T # np.linalg.inv(tform.params)", "\n", "return", "tform", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.train_datasets.COCODataset.load_mask": [[285, 297], ["os.path.isfile", "numpy.load", "numpy.zeros_like", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load"], ["", "def", "load_mask", "(", "self", ",", "maskpath", ",", "h", ",", "w", ")", ":", "\n", "# print(maskpath)", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "maskpath", ")", ":", "\n", "            ", "vis_parsing_anno", "=", "np", ".", "load", "(", "maskpath", ")", "\n", "# atts = ['skin', 'l_brow', 'r_brow', 'l_eye', 'r_eye', 'eye_g', 'l_ear', 'r_ear', 'ear_r',", "\n", "#     'nose', 'mouth', 'u_lip', 'l_lip', 'neck', 'neck_l', 'cloth', 'hair', 'hat']", "\n", "mask", "=", "np", ".", "zeros_like", "(", "vis_parsing_anno", ")", "\n", "# for i in range(1, 16):", "\n", "mask", "[", "vis_parsing_anno", ">", "0.5", "]", "=", "1.", "\n", "", "else", ":", "\n", "            ", "mask", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ")", "\n", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.train_datasets.CelebAHQDataset.__init__": [[300, 312], ["os.listdir"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "image_size", ",", "scale", ",", "trans_scale", "=", "0", ",", "isEval", "=", "False", ")", ":", "\n", "        ", "'''\n        # 53877 faces\n        K must be less than 6\n        '''", "\n", "self", ".", "image_size", "=", "image_size", "\n", "self", ".", "imagefolder", "=", "'/ps/project/face2d3d/faceHQ_100K/celebA-HQ/celebahq_resized_256'", "\n", "self", ".", "kptfolder", "=", "'/ps/project/face2d3d/faceHQ_100K/celebA-HQ/celebahq_resized_256_torch'", "\n", "\n", "self", ".", "kptpath_list", "=", "os", ".", "listdir", "(", "self", ".", "kptfolder", ")", "\n", "self", ".", "scale", "=", "scale", "#[scale_min, scale_max]", "\n", "self", ".", "trans_scale", "=", "trans_scale", "# 0.5?", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.train_datasets.CelebAHQDataset.__len__": [[313, 315], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "kptpath_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.train_datasets.CelebAHQDataset.__getitem__": [[316, 352], ["os.path.join", "os.path.join", "numpy.load", "train_datasets.CelebAHQDataset.crop", "skimage.transform.warp", "torch.from_numpy().type", "torch.from_numpy().type", "kptname.split", "len", "numpy.random.randint", "skimage.io.imread", "len", "numpy.tile", "numpy.dot", "torch.from_numpy", "torch.from_numpy", "len", "numpy.hstack", "skimage.transform.warp.transpose", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.foivospar_NED.datasets.ethnicity.EthnicityDataset.crop"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "while", "(", "100", ")", ":", "\n", "            ", "kptname", "=", "self", ".", "kptpath_list", "[", "idx", "]", "\n", "name", "=", "kptname", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "imagefolder", ",", "name", "+", "'.png'", ")", "\n", "kpt_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "kptfolder", ",", "kptname", ")", "\n", "kpt", "=", "np", ".", "load", "(", "kpt_path", ",", "allow_pickle", "=", "True", ")", "\n", "if", "len", "(", "kpt", ".", "shape", ")", "!=", "2", ":", "\n", "                ", "idx", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "len", "(", "self", ".", "kptpath_list", ")", ")", "\n", "continue", "\n", "# print(kpt_path, kpt.shape)", "\n", "# kpt = kpt[:,:2]", "\n", "\n", "", "image", "=", "imread", "(", "image_path", ")", "/", "255.", "\n", "if", "len", "(", "image", ".", "shape", ")", "<", "3", ":", "\n", "                ", "image", "=", "np", ".", "tile", "(", "image", "[", ":", ",", ":", ",", "None", "]", ",", "3", ")", "\n", "### crop information", "\n", "", "tform", "=", "self", ".", "crop", "(", "image", ",", "kpt", ")", "\n", "## crop ", "\n", "cropped_image", "=", "warp", "(", "image", ",", "tform", ".", "inverse", ",", "output_shape", "=", "(", "self", ".", "image_size", ",", "self", ".", "image_size", ")", ")", "\n", "cropped_kpt", "=", "np", ".", "dot", "(", "tform", ".", "params", ",", "np", ".", "hstack", "(", "[", "kpt", ",", "np", ".", "ones", "(", "[", "kpt", ".", "shape", "[", "0", "]", ",", "1", "]", ")", "]", ")", ".", "T", ")", ".", "T", "# np.linalg.inv(tform.params)", "\n", "\n", "# normalized kpt", "\n", "cropped_kpt", "[", ":", ",", ":", "2", "]", "=", "cropped_kpt", "[", ":", ",", ":", "2", "]", "/", "self", ".", "image_size", "*", "2", "-", "1", "\n", "\n", "###", "\n", "images_array", "=", "torch", ".", "from_numpy", "(", "cropped_image", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", ".", "type", "(", "dtype", "=", "torch", ".", "float32", ")", "#224,224,3", "\n", "kpt_array", "=", "torch", ".", "from_numpy", "(", "cropped_kpt", ")", ".", "type", "(", "dtype", "=", "torch", ".", "float32", ")", "#224,224,3", "\n", "\n", "data_dict", "=", "{", "\n", "'image'", ":", "images_array", ",", "\n", "'landmark'", ":", "kpt_array", ",", "\n", "# 'mask': mask_array", "\n", "}", "\n", "\n", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.train_datasets.CelebAHQDataset.crop": [[353, 377], ["numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.array", "int", "numpy.array", "numpy.array", "skimage.transform.estimate_transform", "numpy.random.rand", "numpy.random.rand"], "methods", ["None"], ["", "", "def", "crop", "(", "self", ",", "image", ",", "kpt", ")", ":", "\n", "        ", "left", "=", "np", ".", "min", "(", "kpt", "[", ":", ",", "0", "]", ")", ";", "right", "=", "np", ".", "max", "(", "kpt", "[", ":", ",", "0", "]", ")", ";", "\n", "top", "=", "np", ".", "min", "(", "kpt", "[", ":", ",", "1", "]", ")", ";", "bottom", "=", "np", ".", "max", "(", "kpt", "[", ":", ",", "1", "]", ")", "\n", "\n", "h", ",", "w", ",", "_", "=", "image", ".", "shape", "\n", "old_size", "=", "(", "right", "-", "left", "+", "bottom", "-", "top", ")", "/", "2", "\n", "center", "=", "np", ".", "array", "(", "[", "right", "-", "(", "right", "-", "left", ")", "/", "2.0", ",", "bottom", "-", "(", "bottom", "-", "top", ")", "/", "2.0", "]", ")", "#+ old_size*0.1])", "\n", "trans_scale", "=", "(", "np", ".", "random", ".", "rand", "(", "2", ")", "*", "2", "-", "1", ")", "*", "self", ".", "trans_scale", "\n", "center", "=", "center", "+", "trans_scale", "*", "old_size", "# 0.5", "\n", "\n", "scale", "=", "np", ".", "random", ".", "rand", "(", ")", "*", "(", "self", ".", "scale", "[", "1", "]", "-", "self", ".", "scale", "[", "0", "]", ")", "+", "self", ".", "scale", "[", "0", "]", "\n", "\n", "size", "=", "int", "(", "old_size", "*", "scale", ")", "\n", "\n", "# crop image", "\n", "# src_pts = np.array([[center[0]-size/2, center[1]-size/2], [center[0] - size/2, center[1]+size/2], [center[0]+size/2, center[1]-size/2]])", "\n", "src_pts", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "h", "-", "1", "]", ",", "[", "w", "-", "1", ",", "0", "]", "]", ")", "\n", "DST_PTS", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "self", ".", "image_size", "-", "1", "]", ",", "[", "self", ".", "image_size", "-", "1", ",", "0", "]", "]", ")", "\n", "tform", "=", "estimate_transform", "(", "'similarity'", ",", "src_pts", ",", "DST_PTS", ")", "\n", "\n", "# cropped_image = warp(image, tform.inverse, output_shape=(self.image_size, self.image_size))", "\n", "# # change kpt accordingly", "\n", "# cropped_kpt = np.dot(tform.params, np.hstack([kpt, np.ones([kpt.shape[0],1])]).T).T # np.linalg.inv(tform.params)", "\n", "return", "tform", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.train_datasets.CelebAHQDataset.load_mask": [[378, 390], ["os.path.isfile", "numpy.load", "numpy.zeros_like", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load"], ["", "def", "load_mask", "(", "self", ",", "maskpath", ",", "h", ",", "w", ")", ":", "\n", "# print(maskpath)", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "maskpath", ")", ":", "\n", "            ", "vis_parsing_anno", "=", "np", ".", "load", "(", "maskpath", ")", "\n", "# atts = ['skin', 'l_brow', 'r_brow', 'l_eye', 'r_eye', 'eye_g', 'l_ear', 'r_ear', 'ear_r',", "\n", "#     'nose', 'mouth', 'u_lip', 'l_lip', 'neck', 'neck_l', 'cloth', 'hair', 'hat']", "\n", "mask", "=", "np", ".", "zeros_like", "(", "vis_parsing_anno", ")", "\n", "# for i in range(1, 16):", "\n", "mask", "[", "vis_parsing_anno", ">", "0.5", "]", "=", "1.", "\n", "", "else", ":", "\n", "            ", "mask", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ")", "\n", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.train_datasets.TestData.__init__": [[412, 440], ["isinstance", "print", "sorted", "os.path.isdir", "detectors.Dlib", "len", "detectors.FAN", "print", "glob.glob.glob", "os.path.isfile", "glob.glob.glob", "glob.glob.glob", "os.path.isfile", "train_datasets.video2sequence", "print", "exit"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.datasets.datasets.video2sequence"], ["    ", "def", "__init__", "(", "self", ",", "testpath", ",", "iscrop", "=", "True", ",", "crop_size", "=", "224", ",", "scale", "=", "1.25", ",", "face_detector", "=", "'fan'", ",", "face_detector_model", "=", "None", ")", ":", "\n", "        ", "'''\n            testpath: folder, imagepath_list, image path, video path\n        '''", "\n", "if", "isinstance", "(", "testpath", ",", "list", ")", ":", "\n", "            ", "self", ".", "imagepath_list", "=", "testpath", "\n", "", "elif", "os", ".", "path", ".", "isdir", "(", "testpath", ")", ":", "\n", "            ", "self", ".", "imagepath_list", "=", "glob", "(", "testpath", "+", "'/*.jpg'", ")", "+", "glob", "(", "testpath", "+", "'/*.png'", ")", "+", "glob", "(", "testpath", "+", "'/*.bmp'", ")", "\n", "", "elif", "os", ".", "path", ".", "isfile", "(", "testpath", ")", "and", "(", "testpath", "[", "-", "3", ":", "]", "in", "[", "'jpg'", ",", "'png'", ",", "'bmp'", "]", ")", ":", "\n", "            ", "self", ".", "imagepath_list", "=", "[", "testpath", "]", "\n", "", "elif", "os", ".", "path", ".", "isfile", "(", "testpath", ")", "and", "(", "testpath", "[", "-", "3", ":", "]", "in", "[", "'mp4'", ",", "'csv'", ",", "'vid'", ",", "'ebm'", "]", ")", ":", "\n", "            ", "self", ".", "imagepath_list", "=", "video2sequence", "(", "testpath", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'please check the input path'", ")", "\n", "exit", "(", ")", "\n", "\n", "", "print", "(", "'total {} images'", ".", "format", "(", "len", "(", "self", ".", "imagepath_list", ")", ")", ")", "\n", "self", ".", "imagepath_list", "=", "sorted", "(", "self", ".", "imagepath_list", ")", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "iscrop", "=", "iscrop", "\n", "self", ".", "resolution_inp", "=", "crop_size", "\n", "if", "face_detector", "==", "'dlib'", ":", "\n", "            ", "self", ".", "face_detector", "=", "detectors", ".", "Dlib", "(", "model_path", "=", "face_detector_model", ")", "\n", "", "elif", "face_detector", "==", "'fan'", ":", "\n", "            ", "self", ".", "face_detector", "=", "detectors", ".", "FAN", "(", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'no detector is used'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.train_datasets.TestData.__len__": [[441, 443], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imagepath_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.train_datasets.TestData.__getitem__": [[444, 495], ["numpy.array", "numpy.array", "skimage.transform.estimate_transform", "skimage.transform.warp", "dst_image.transpose.transpose.transpose", "[].split", "skimage.io.imread", "len", "image[].repeat", "numpy.array", "int", "numpy.array", "numpy.array", "torch.tensor().float", "torch.tensor().float", "max", "print", "skimage.transform.rescale", "train_datasets.TestData.face_detector.run", "train_datasets.TestData.face_detector.run", "print", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "max", "skimage.transform.rescale.astype", "image[].repeat.astype", "max", "torch.tensor", "torch.tensor", "imagepath.split", "image[].repeat.transpose"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.datasets.detectors.MTCNN.run", "home.repos.pwc.inspect_result.foivospar_NED.datasets.detectors.MTCNN.run"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "imagepath", "=", "self", ".", "imagepath_list", "[", "index", "]", "\n", "imagename", "=", "imagepath", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "\n", "image", "=", "np", ".", "array", "(", "imread", "(", "imagepath", ")", ")", "\n", "if", "len", "(", "image", ".", "shape", ")", "==", "2", ":", "\n", "            ", "image", "=", "image", "[", ":", ",", ":", ",", "None", "]", ".", "repeat", "(", "1", ",", "1", ",", "3", ")", "\n", "\n", "", "h", ",", "w", ",", "_", "=", "image", ".", "shape", "\n", "if", "self", ".", "iscrop", ":", "\n", "            ", "if", "max", "(", "h", ",", "w", ")", ">", "1000", ":", "\n", "                ", "print", "(", "'image is too large, resize '", ",", "imagepath", ")", "# dlib detector will be very slow if the input image size is too large", "\n", "scale_factor", "=", "1000", "/", "max", "(", "h", ",", "w", ")", "\n", "image_small", "=", "rescale", "(", "image", ",", "scale_factor", ",", "preserve_range", "=", "True", ",", "multichannel", "=", "True", ")", "\n", "# print(image.shape)", "\n", "# print(image_small.shape)", "\n", "# exit()", "\n", "detected_faces", "=", "self", ".", "face_detector", ".", "run", "(", "image_small", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "", "else", ":", "\n", "                ", "detected_faces", "=", "self", ".", "face_detector", ".", "run", "(", "image", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n", "", "if", "detected_faces", "is", "None", ":", "\n", "                ", "print", "(", "'no face detected! run original image'", ")", "\n", "left", "=", "0", ";", "right", "=", "h", "-", "1", ";", "top", "=", "0", ";", "bottom", "=", "w", "-", "1", "\n", "", "else", ":", "\n", "# d = detected_faces[0].rect ## only use the first detected face (assume that each input image only contains one face)", "\n", "# left = d.left(); right = d.right(); top = d.top(); bottom = d.bottom()", "\n", "                ", "kpt", "=", "detected_faces", "[", "0", "]", "\n", "left", "=", "np", ".", "min", "(", "kpt", "[", ":", ",", "0", "]", ")", ";", "right", "=", "np", ".", "max", "(", "kpt", "[", ":", ",", "0", "]", ")", ";", "\n", "top", "=", "np", ".", "min", "(", "kpt", "[", ":", ",", "1", "]", ")", ";", "bottom", "=", "np", ".", "max", "(", "kpt", "[", ":", ",", "1", "]", ")", "\n", "if", "max", "(", "h", ",", "w", ")", ">", "1000", ":", "\n", "                    ", "scale_factor", "=", "1.", "/", "scale_factor", "\n", "left", "=", "left", "*", "scale_factor", ";", "right", "=", "right", "*", "scale_factor", ";", "top", "=", "top", "*", "scale_factor", ";", "bottom", "=", "bottom", "*", "scale_factor", "\n", "", "", "old_size", "=", "(", "right", "-", "left", "+", "bottom", "-", "top", ")", "/", "2", "\n", "center", "=", "np", ".", "array", "(", "[", "right", "-", "(", "right", "-", "left", ")", "/", "2.0", ",", "bottom", "-", "(", "bottom", "-", "top", ")", "/", "2.0", "]", ")", "#+ old_size*0.1])", "\n", "size", "=", "int", "(", "old_size", "*", "self", ".", "scale", ")", "\n", "src_pts", "=", "np", ".", "array", "(", "[", "[", "center", "[", "0", "]", "-", "size", "/", "2", ",", "center", "[", "1", "]", "-", "size", "/", "2", "]", ",", "[", "center", "[", "0", "]", "-", "size", "/", "2", ",", "center", "[", "1", "]", "+", "size", "/", "2", "]", ",", "[", "center", "[", "0", "]", "+", "size", "/", "2", ",", "center", "[", "1", "]", "-", "size", "/", "2", "]", "]", ")", "\n", "", "else", ":", "\n", "            ", "src_pts", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "h", "-", "1", "]", ",", "[", "w", "-", "1", ",", "0", "]", "]", ")", "\n", "\n", "", "DST_PTS", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "self", ".", "resolution_inp", "-", "1", "]", ",", "[", "self", ".", "resolution_inp", "-", "1", ",", "0", "]", "]", ")", "\n", "tform", "=", "estimate_transform", "(", "'similarity'", ",", "src_pts", ",", "DST_PTS", ")", "\n", "\n", "image", "=", "image", "/", "255.", "\n", "\n", "dst_image", "=", "warp", "(", "image", ",", "tform", ".", "inverse", ",", "output_shape", "=", "(", "self", ".", "resolution_inp", ",", "self", ".", "resolution_inp", ")", ")", "\n", "dst_image", "=", "dst_image", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "return", "{", "'image'", ":", "torch", ".", "tensor", "(", "dst_image", ")", ".", "float", "(", ")", ",", "\n", "'imagename'", ":", "imagename", ",", "\n", "'tform'", ":", "tform", ",", "\n", "'original_image'", ":", "torch", ".", "tensor", "(", "image", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", ".", "float", "(", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.train_datasets.EvalData.__init__": [[498, 527], ["isinstance", "sorted", "os.path.isdir", "detectors.Dlib", "detectors.FAN", "print", "glob.glob.glob", "glob.glob.glob", "os.path.isfile", "os.path.isfile", "train_datasets.video2sequence", "print", "exit"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.datasets.datasets.video2sequence"], ["    ", "def", "__init__", "(", "self", ",", "testpath", ",", "kptfolder", ",", "iscrop", "=", "True", ",", "crop_size", "=", "224", ",", "scale", "=", "1.25", ",", "face_detector", "=", "'fan'", ",", "face_detector_model", "=", "None", ")", ":", "\n", "        ", "'''\n            testpath: folder, imagepath_list, image path, video path\n        '''", "\n", "if", "isinstance", "(", "testpath", ",", "list", ")", ":", "\n", "            ", "self", ".", "imagepath_list", "=", "testpath", "\n", "", "elif", "os", ".", "path", ".", "isdir", "(", "testpath", ")", ":", "\n", "            ", "self", ".", "imagepath_list", "=", "glob", "(", "testpath", "+", "'/*.jpg'", ")", "+", "glob", "(", "testpath", "+", "'/*.png'", ")", "\n", "", "elif", "os", ".", "path", ".", "isfile", "(", "testpath", ")", "and", "(", "testpath", "[", "-", "3", ":", "]", "in", "[", "'jpg'", ",", "'png'", "]", ")", ":", "\n", "            ", "self", ".", "imagepath_list", "=", "[", "testpath", "]", "\n", "", "elif", "os", ".", "path", ".", "isfile", "(", "testpath", ")", "and", "(", "testpath", "[", "-", "3", ":", "]", "in", "[", "'mp4'", ",", "'csv'", ",", "'vid'", ",", "'ebm'", "]", ")", ":", "\n", "            ", "self", ".", "imagepath_list", "=", "video2sequence", "(", "testpath", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'please check the input path'", ")", "\n", "exit", "(", ")", "\n", "\n", "# print('total {} images'.format(len(self.imagepath_list)))", "\n", "", "self", ".", "imagepath_list", "=", "sorted", "(", "self", ".", "imagepath_list", ")", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "iscrop", "=", "iscrop", "\n", "self", ".", "resolution_inp", "=", "crop_size", "\n", "if", "face_detector", "==", "'dlib'", ":", "\n", "            ", "self", ".", "face_detector", "=", "detectors", ".", "Dlib", "(", "model_path", "=", "face_detector_model", ")", "\n", "", "elif", "face_detector", "==", "'fan'", ":", "\n", "            ", "self", ".", "face_detector", "=", "detectors", ".", "FAN", "(", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'no detector is used'", ")", "\n", "", "self", ".", "kptfolder", "=", "kptfolder", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.train_datasets.EvalData.__len__": [[528, 530], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imagepath_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.train_datasets.EvalData.__getitem__": [[531, 561], ["numpy.array", "skimage.transform.estimate_transform", "skimage.transform.warp", "dst_image.transpose.transpose.transpose", "[].split", "skimage.io.imread", "os.path.join", "numpy.load", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.array", "int", "numpy.array", "numpy.array", "torch.tensor().float", "torch.tensor().float", "torch.tensor", "torch.tensor", "imagepath.split", "image.transpose"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "imagepath", "=", "self", ".", "imagepath_list", "[", "index", "]", "\n", "imagename", "=", "imagepath", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "\n", "image", "=", "imread", "(", "imagepath", ")", "[", ":", ",", ":", ",", ":", "3", "]", "\n", "\n", "h", ",", "w", ",", "_", "=", "image", ".", "shape", "\n", "if", "self", ".", "iscrop", ":", "\n", "            ", "kptpath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "kptfolder", ",", "imagename", "+", "'.npy'", ")", "\n", "kpt", "=", "np", ".", "load", "(", "kptpath", ")", "\n", "left", "=", "np", ".", "min", "(", "kpt", "[", ":", ",", "0", "]", ")", ";", "right", "=", "np", ".", "max", "(", "kpt", "[", ":", ",", "0", "]", ")", "\n", "top", "=", "np", ".", "min", "(", "kpt", "[", ":", ",", "1", "]", ")", ";", "bottom", "=", "np", ".", "max", "(", "kpt", "[", ":", ",", "1", "]", ")", "\n", "old_size", "=", "(", "right", "-", "left", "+", "bottom", "-", "top", ")", "/", "2", "\n", "center", "=", "np", ".", "array", "(", "[", "right", "-", "(", "right", "-", "left", ")", "/", "2.0", ",", "bottom", "-", "(", "bottom", "-", "top", ")", "/", "2.0", "]", ")", "#+ old_size*0.1])", "\n", "size", "=", "int", "(", "old_size", "*", "self", ".", "scale", ")", "\n", "src_pts", "=", "np", ".", "array", "(", "[", "[", "center", "[", "0", "]", "-", "size", "/", "2", ",", "center", "[", "1", "]", "-", "size", "/", "2", "]", ",", "[", "center", "[", "0", "]", "-", "size", "/", "2", ",", "center", "[", "1", "]", "+", "size", "/", "2", "]", ",", "[", "center", "[", "0", "]", "+", "size", "/", "2", ",", "center", "[", "1", "]", "-", "size", "/", "2", "]", "]", ")", "\n", "", "else", ":", "\n", "            ", "src_pts", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "h", "-", "1", "]", ",", "[", "w", "-", "1", ",", "0", "]", "]", ")", "\n", "\n", "", "DST_PTS", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "self", ".", "resolution_inp", "-", "1", "]", ",", "[", "self", ".", "resolution_inp", "-", "1", ",", "0", "]", "]", ")", "\n", "tform", "=", "estimate_transform", "(", "'similarity'", ",", "src_pts", ",", "DST_PTS", ")", "\n", "\n", "image", "=", "image", "/", "255.", "\n", "\n", "dst_image", "=", "warp", "(", "image", ",", "tform", ".", "inverse", ",", "output_shape", "=", "(", "self", ".", "resolution_inp", ",", "self", ".", "resolution_inp", ")", ")", "\n", "dst_image", "=", "dst_image", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "return", "{", "'image'", ":", "torch", ".", "tensor", "(", "dst_image", ")", ".", "float", "(", ")", ",", "\n", "'imagename'", ":", "imagename", ",", "\n", "'tform'", ":", "tform", ",", "\n", "'original_image'", ":", "torch", ".", "tensor", "(", "image", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", ".", "float", "(", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.train_datasets.build_dataloader": [[14, 47], ["torch.utils.data.ConcatDataset", "torch.utils.data.DataLoader", "data_list.append", "data_list.append", "data_list.append", "data_list.append", "data_list.append", "data_list.append", "data_list.append", "data_list.append", "data_list.append", "train_datasets.VoxelDataset", "train_datasets.VoxelDataset", "VGGFace2Dataset", "VGGFace2HQDataset", "EthnicityDataset", "train_datasets.COCODataset", "train_datasets.CelebAHQDataset", "NoWVal", "AFLW2000"], "function", ["None"], ["def", "build_dataloader", "(", "config", ",", "is_train", "=", "True", ")", ":", "\n", "    ", "data_list", "=", "[", "]", "\n", "if", "'vox1'", "in", "config", ".", "training_data", ":", "\n", "        ", "data_list", ".", "append", "(", "VoxelDataset", "(", "K", "=", "config", ".", "K", ",", "image_size", "=", "config", ".", "image_size", ",", "scale", "=", "[", "config", ".", "scale_min", ",", "config", ".", "scale_max", "]", ",", "n_train", "=", "config", ".", "n_train", ",", "isSingle", "=", "config", ".", "isSingle", ")", ")", "\n", "", "if", "'vox2'", "in", "config", ".", "training_data", ":", "\n", "        ", "data_list", ".", "append", "(", "VoxelDataset", "(", "dataname", "=", "'vox2'", ",", "K", "=", "config", ".", "K", ",", "image_size", "=", "config", ".", "image_size", ",", "scale", "=", "[", "config", ".", "scale_min", ",", "config", ".", "scale_max", "]", ",", "n_train", "=", "config", ".", "n_train", ",", "isSingle", "=", "config", ".", "isSingle", ")", ")", "\n", "", "if", "'vggface2'", "in", "config", ".", "training_data", ":", "\n", "        ", "data_list", ".", "append", "(", "VGGFace2Dataset", "(", "K", "=", "config", ".", "K", ",", "image_size", "=", "config", ".", "image_size", ",", "scale", "=", "[", "config", ".", "scale_min", ",", "config", ".", "scale_max", "]", ",", "trans_scale", "=", "config", ".", "trans_scale", ",", "isSingle", "=", "config", ".", "isSingle", ")", ")", "\n", "", "if", "'vggface2hq'", "in", "config", ".", "training_data", ":", "\n", "        ", "data_list", ".", "append", "(", "VGGFace2HQDataset", "(", "K", "=", "config", ".", "K", ",", "image_size", "=", "config", ".", "image_size", ",", "scale", "=", "[", "config", ".", "scale_min", ",", "config", ".", "scale_max", "]", ",", "trans_scale", "=", "config", ".", "trans_scale", ",", "isSingle", "=", "config", ".", "isSingle", ")", ")", "\n", "", "if", "'ethnicity'", "in", "config", ".", "training_data", ":", "\n", "        ", "data_list", ".", "append", "(", "EthnicityDataset", "(", "K", "=", "config", ".", "K", ",", "image_size", "=", "config", ".", "image_size", ",", "scale", "=", "[", "config", ".", "scale_min", ",", "config", ".", "scale_max", "]", ",", "trans_scale", "=", "config", ".", "trans_scale", ",", "isSingle", "=", "config", ".", "isSingle", ")", ")", "\n", "", "if", "'coco'", "in", "config", ".", "training_data", ":", "\n", "        ", "data_list", ".", "append", "(", "COCODataset", "(", "image_size", "=", "config", ".", "image_size", ",", "scale", "=", "[", "config", ".", "scale_min", ",", "config", ".", "scale_max", "]", ",", "trans_scale", "=", "config", ".", "trans_scale", ")", ")", "\n", "", "if", "'celebahq'", "in", "config", ".", "training_data", ":", "\n", "        ", "data_list", ".", "append", "(", "CelebAHQDataset", "(", "image_size", "=", "config", ".", "image_size", ",", "scale", "=", "[", "config", ".", "scale_min", ",", "config", ".", "scale_max", "]", ",", "trans_scale", "=", "config", ".", "trans_scale", ")", ")", "\n", "", "if", "'now_eval'", "in", "config", ".", "training_data", ":", "\n", "        ", "data_list", ".", "append", "(", "NoWVal", "(", ")", ")", "\n", "", "if", "'aflw2000'", "in", "config", ".", "training_data", ":", "\n", "        ", "data_list", ".", "append", "(", "AFLW2000", "(", ")", ")", "\n", "", "train_dataset", "=", "ConcatDataset", "(", "data_list", ")", "\n", "if", "is_train", ":", "\n", "        ", "drop_last", "=", "True", "\n", "shuffle", "=", "True", "\n", "", "else", ":", "\n", "        ", "drop_last", "=", "False", "\n", "shuffle", "=", "False", "\n", "", "train_loader", "=", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "config", ".", "batch_size", ",", "shuffle", "=", "shuffle", ",", "\n", "num_workers", "=", "config", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "drop_last", ")", "\n", "# print('---- data length: ', len(train_dataset))", "\n", "return", "train_dataset", ",", "train_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.train_datasets.video2sequence": [[393, 410], ["os.makedirs", "cv2.VideoCapture", "cv2.VideoCapture.read", "print", "video_path.split", "[].split", "cv2.imwrite", "cv2.VideoCapture.read", "imagepath_list.append", "video_path.split"], "function", ["None"], ["", "", "def", "video2sequence", "(", "video_path", ")", ":", "\n", "    ", "videofolder", "=", "video_path", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "os", ".", "makedirs", "(", "videofolder", ",", "exist_ok", "=", "True", ")", "\n", "video_name", "=", "video_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "# import ipdb; ipdb.set_trace()", "\n", "vidcap", "=", "cv2", ".", "VideoCapture", "(", "video_path", ")", "\n", "success", ",", "image", "=", "vidcap", ".", "read", "(", ")", "\n", "count", "=", "0", "\n", "imagepath_list", "=", "[", "]", "\n", "while", "success", ":", "\n", "        ", "imagepath", "=", "'{}/{}_frame{:04d}.jpg'", ".", "format", "(", "videofolder", ",", "video_name", ",", "count", ")", "\n", "cv2", ".", "imwrite", "(", "imagepath", ",", "image", ")", "# save frame as JPEG file", "\n", "success", ",", "image", "=", "vidcap", ".", "read", "(", ")", "\n", "count", "+=", "1", "\n", "imagepath_list", ".", "append", "(", "imagepath", ")", "\n", "", "print", "(", "'video frames are stored in {}'", ".", "format", "(", "videofolder", ")", ")", "\n", "return", "imagepath_list", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.now.NoWDataset.__init__": [[13, 27], ["os.path.join", "os.path.join", "os.path.join", "open", "f.readlines"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "ring_elements", "=", "6", ",", "crop_size", "=", "224", ",", "scale", "=", "1.6", ")", ":", "\n", "        ", "folder", "=", "'/ps/scratch/yfeng/other-github/now_evaluation/data/NoW_Dataset'", "\n", "self", ".", "data_path", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'imagepathsvalidation.txt'", ")", "\n", "with", "open", "(", "self", ".", "data_path", ")", "as", "f", ":", "\n", "            ", "self", ".", "data_lines", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "", "self", ".", "imagefolder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'final_release_version'", ",", "'iphone_pictures'", ")", "\n", "self", ".", "bbxfolder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'final_release_version'", ",", "'detected_face'", ")", "\n", "\n", "# self.data_path = '/ps/scratch/face2d3d/ringnetpp/eccv/test_data/evaluation/NoW_Dataset/final_release_version/test_image_paths_ring_6_elements.npy'", "\n", "# self.imagepath = '/ps/scratch/face2d3d/ringnetpp/eccv/test_data/evaluation/NoW_Dataset/final_release_version/iphone_pictures/'", "\n", "# self.bbxpath = '/ps/scratch/face2d3d/ringnetpp/eccv/test_data/evaluation/NoW_Dataset/final_release_version/detected_face/'", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "scale", "=", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.now.NoWDataset.__len__": [[28, 30], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data_lines", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.now.NoWDataset.__getitem__": [[31, 57], ["os.path.join", "os.path.join", "numpy.load().item", "numpy.array", "int", "numpy.array", "numpy.array", "skimage.transform.estimate_transform", "skimage.transform.warp", "dst_image.transpose.transpose.transpose", "now.NoWDataset.data_lines[].strip", "now.NoWDataset.data_lines[].strip().replace", "[].split", "skimage.io.imread", "torch.tensor().float", "now.NoWDataset.data_lines[].strip().replace", "numpy.load", "now.NoWDataset.data_lines[].strip", "torch.tensor", "now.NoWDataset.data_lines[].strip", "os.path.join.split"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "imagepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "imagefolder", ",", "self", ".", "data_lines", "[", "index", "]", ".", "strip", "(", ")", ")", "#+ '.jpg'", "\n", "bbx_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "bbxfolder", ",", "self", ".", "data_lines", "[", "index", "]", ".", "strip", "(", ")", ".", "replace", "(", "'.jpg'", ",", "'.npy'", ")", ")", "\n", "bbx_data", "=", "np", ".", "load", "(", "bbx_path", ",", "allow_pickle", "=", "True", ",", "encoding", "=", "'latin1'", ")", ".", "item", "(", ")", "\n", "# box = np.array([[bbx_data['left'], bbx_data['top']], [bbx_data['right'], bbx_data['bottom']]]).astype('float32')", "\n", "left", "=", "bbx_data", "[", "'left'", "]", ";", "right", "=", "bbx_data", "[", "'right'", "]", "\n", "top", "=", "bbx_data", "[", "'top'", "]", ";", "bottom", "=", "bbx_data", "[", "'bottom'", "]", "\n", "\n", "imagename", "=", "imagepath", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "image", "=", "imread", "(", "imagepath", ")", "[", ":", ",", ":", ",", ":", "3", "]", "\n", "\n", "h", ",", "w", ",", "_", "=", "image", ".", "shape", "\n", "old_size", "=", "(", "right", "-", "left", "+", "bottom", "-", "top", ")", "/", "2", "\n", "center", "=", "np", ".", "array", "(", "[", "right", "-", "(", "right", "-", "left", ")", "/", "2.0", ",", "bottom", "-", "(", "bottom", "-", "top", ")", "/", "2.0", "]", ")", "\n", "size", "=", "int", "(", "old_size", "*", "self", ".", "scale", ")", "\n", "\n", "# crop image", "\n", "src_pts", "=", "np", ".", "array", "(", "[", "[", "center", "[", "0", "]", "-", "size", "/", "2", ",", "center", "[", "1", "]", "-", "size", "/", "2", "]", ",", "[", "center", "[", "0", "]", "-", "size", "/", "2", ",", "center", "[", "1", "]", "+", "size", "/", "2", "]", ",", "[", "center", "[", "0", "]", "+", "size", "/", "2", ",", "center", "[", "1", "]", "-", "size", "/", "2", "]", "]", ")", "\n", "DST_PTS", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "self", ".", "crop_size", "-", "1", "]", ",", "[", "self", ".", "crop_size", "-", "1", ",", "0", "]", "]", ")", "\n", "tform", "=", "estimate_transform", "(", "'similarity'", ",", "src_pts", ",", "DST_PTS", ")", "\n", "\n", "image", "=", "image", "/", "255.", "\n", "dst_image", "=", "warp", "(", "image", ",", "tform", ".", "inverse", ",", "output_shape", "=", "(", "self", ".", "crop_size", ",", "self", ".", "crop_size", ")", ")", "\n", "dst_image", "=", "dst_image", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "return", "{", "'image'", ":", "torch", ".", "tensor", "(", "dst_image", ")", ".", "float", "(", ")", ",", "\n", "'imagename'", ":", "self", ".", "data_lines", "[", "index", "]", ".", "strip", "(", ")", ".", "replace", "(", "'.jpg'", ",", "''", ")", ",", "\n", "# 'tform': tform,", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.aflw2000.AFLW2000.__init__": [[14, 33], ["os.path.isdir", "print", "sorted", "isinstance", "glob.glob.glob", "glob.glob.glob", "len", "os.path.isfile", "print", "exit"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "testpath", "=", "'/ps/scratch/yfeng/Data/AFLW2000/GT'", ",", "crop_size", "=", "224", ")", ":", "\n", "        ", "'''\n            data class for loading AFLW2000 dataset\n            make sure each image has corresponding mat file, which provides cropping infromation\n        '''", "\n", "if", "os", ".", "path", ".", "isdir", "(", "testpath", ")", ":", "\n", "            ", "self", ".", "imagepath_list", "=", "glob", "(", "testpath", "+", "'/*.jpg'", ")", "+", "glob", "(", "testpath", "+", "'/*.png'", ")", "\n", "", "elif", "isinstance", "(", "testpath", ",", "list", ")", ":", "\n", "            ", "self", ".", "imagepath_list", "=", "testpath", "\n", "", "elif", "os", ".", "path", ".", "isfile", "(", "testpath", ")", "and", "(", "testpath", "[", "-", "3", ":", "]", "in", "[", "'jpg'", ",", "'png'", "]", ")", ":", "\n", "            ", "self", ".", "imagepath_list", "=", "[", "testpath", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "'please check the input path'", ")", "\n", "exit", "(", ")", "\n", "", "print", "(", "'total {} images'", ".", "format", "(", "len", "(", "self", ".", "imagepath_list", ")", ")", ")", "\n", "self", ".", "imagepath_list", "=", "sorted", "(", "self", ".", "imagepath_list", ")", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "scale", "=", "1.6", "\n", "self", ".", "resolution_inp", "=", "crop_size", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.aflw2000.AFLW2000.__len__": [[34, 36], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imagepath_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.aflw2000.AFLW2000.__getitem__": [[37, 60], ["numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.array", "int", "numpy.array", "numpy.array", "skimage.transform.estimate_transform", "skimage.transform.warp", "dst_image.transpose.transpose.transpose", "[].split", "skimage.io.imread", "torch.tensor().float", "scipy.io.loadmat", "scipy.io.loadmat", "scipy.io.loadmat", "scipy.io.loadmat", "imagepath.replace", "torch.tensor", "imagepath.split"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "imagepath", "=", "self", ".", "imagepath_list", "[", "index", "]", "\n", "imagename", "=", "imagepath", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "image", "=", "imread", "(", "imagepath", ")", "[", ":", ",", ":", ",", ":", "3", "]", "\n", "kpt", "=", "scipy", ".", "io", ".", "loadmat", "(", "imagepath", ".", "replace", "(", "'jpg'", ",", "'mat'", ")", ")", "[", "'pt3d_68'", "]", ".", "T", "\n", "left", "=", "np", ".", "min", "(", "kpt", "[", ":", ",", "0", "]", ")", ";", "right", "=", "np", ".", "max", "(", "kpt", "[", ":", ",", "0", "]", ")", ";", "\n", "top", "=", "np", ".", "min", "(", "kpt", "[", ":", ",", "1", "]", ")", ";", "bottom", "=", "np", ".", "max", "(", "kpt", "[", ":", ",", "1", "]", ")", "\n", "\n", "h", ",", "w", ",", "_", "=", "image", ".", "shape", "\n", "old_size", "=", "(", "right", "-", "left", "+", "bottom", "-", "top", ")", "/", "2", "\n", "center", "=", "np", ".", "array", "(", "[", "right", "-", "(", "right", "-", "left", ")", "/", "2.0", ",", "bottom", "-", "(", "bottom", "-", "top", ")", "/", "2.0", "]", ")", "#+ old_size*0.1])", "\n", "size", "=", "int", "(", "old_size", "*", "self", ".", "scale", ")", "\n", "\n", "# crop image", "\n", "src_pts", "=", "np", ".", "array", "(", "[", "[", "center", "[", "0", "]", "-", "size", "/", "2", ",", "center", "[", "1", "]", "-", "size", "/", "2", "]", ",", "[", "center", "[", "0", "]", "-", "size", "/", "2", ",", "center", "[", "1", "]", "+", "size", "/", "2", "]", ",", "[", "center", "[", "0", "]", "+", "size", "/", "2", ",", "center", "[", "1", "]", "-", "size", "/", "2", "]", "]", ")", "\n", "DST_PTS", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "self", ".", "resolution_inp", "-", "1", "]", ",", "[", "self", ".", "resolution_inp", "-", "1", ",", "0", "]", "]", ")", "\n", "tform", "=", "estimate_transform", "(", "'similarity'", ",", "src_pts", ",", "DST_PTS", ")", "\n", "\n", "image", "=", "image", "/", "255.", "\n", "dst_image", "=", "warp", "(", "image", ",", "tform", ".", "inverse", ",", "output_shape", "=", "(", "self", ".", "resolution_inp", ",", "self", ".", "resolution_inp", ")", ")", "\n", "dst_image", "=", "dst_image", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "return", "{", "'image'", ":", "torch", ".", "tensor", "(", "dst_image", ")", ".", "float", "(", ")", ",", "\n", "'imagename'", ":", "imagename", ",", "\n", "# 'tform': tform,", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.ethnicity.EthnicityDataset.__init__": [[13, 33], ["numpy.load().astype", "numpy.load"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load"], ["    ", "def", "__init__", "(", "self", ",", "K", ",", "image_size", ",", "scale", ",", "trans_scale", "=", "0", ",", "isTemporal", "=", "False", ",", "isEval", "=", "False", ",", "isSingle", "=", "False", ")", ":", "\n", "        ", "'''\n        K must be less than 6\n        '''", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "image_size", "=", "image_size", "\n", "self", ".", "imagefolder", "=", "'/ps/scratch/face2d3d/train'", "\n", "self", ".", "kptfolder", "=", "'/ps/scratch/face2d3d/train_annotated_torch7/'", "\n", "self", ".", "segfolder", "=", "'/ps/scratch/face2d3d/texture_in_the_wild_code/VGGFace2_seg/test_crop_size_400_batch/'", "\n", "# hq:", "\n", "# datafile = '/ps/scratch/face2d3d/texture_in_the_wild_code/VGGFace2_cleaning_codes/ringnetpp_training_lists/second_cleaning/vggface2_bbx_size_bigger_than_400_train_list_max_normal_100_ring_5_1_serial.npy'", "\n", "datafile", "=", "'/ps/scratch/face2d3d/texture_in_the_wild_code/VGGFace2_cleaning_codes/ringnetpp_training_lists/second_cleaning/vggface2_and_race_per_7000_african_asian_2d_train_list_max_normal_100_ring_5_1_serial.npy'", "\n", "self", ".", "data_lines", "=", "np", ".", "load", "(", "datafile", ")", ".", "astype", "(", "'str'", ")", "\n", "\n", "self", ".", "isTemporal", "=", "isTemporal", "\n", "self", ".", "scale", "=", "scale", "#[scale_min, scale_max]", "\n", "self", ".", "trans_scale", "=", "trans_scale", "#[dx, dy]", "\n", "self", ".", "isSingle", "=", "isSingle", "\n", "if", "isSingle", ":", "\n", "            ", "self", ".", "K", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.ethnicity.EthnicityDataset.__len__": [[34, 36], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data_lines", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.ethnicity.EthnicityDataset.__getitem__": [[37, 89], ["range", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "os.path.join", "os.path.join", "os.path.join", "ethnicity.EthnicityDataset.load_mask", "ethnicity.EthnicityDataset.crop", "skimage.transform.warp", "skimage.transform.warp", "images_list.append", "kpt_list.append", "mask_list.append", "images_array.squeeze.squeeze.squeeze", "kpt_array.squeeze.squeeze.squeeze", "mask_array.squeeze.squeeze.squeeze", "skimage.io.imread", "numpy.load", "numpy.dot", "skimage.transform.warp.transpose", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array", "numpy.array", "numpy.array", "numpy.hstack", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.datasets.ethnicity.EthnicityDataset.load_mask", "home.repos.pwc.inspect_result.foivospar_NED.datasets.ethnicity.EthnicityDataset.crop", "home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "images_list", "=", "[", "]", ";", "kpt_list", "=", "[", "]", ";", "mask_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "K", ")", ":", "\n", "            ", "name", "=", "self", ".", "data_lines", "[", "idx", ",", "i", "]", "\n", "if", "name", "[", "0", "]", "==", "'n'", ":", "\n", "                ", "self", ".", "imagefolder", "=", "'/ps/scratch/face2d3d/train/'", "\n", "self", ".", "kptfolder", "=", "'/ps/scratch/face2d3d/train_annotated_torch7/'", "\n", "self", ".", "segfolder", "=", "'/ps/scratch/face2d3d/texture_in_the_wild_code/VGGFace2_seg/test_crop_size_400_batch/'", "\n", "", "elif", "name", "[", "0", "]", "==", "'A'", ":", "\n", "                ", "self", ".", "imagefolder", "=", "'/ps/scratch/face2d3d/race_per_7000/'", "\n", "self", ".", "kptfolder", "=", "'/ps/scratch/face2d3d/race_per_7000_annotated_torch7_new/'", "\n", "self", ".", "segfolder", "=", "'/ps/scratch/face2d3d/texture_in_the_wild_code/race7000_seg/test_crop_size_400_batch/'", "\n", "\n", "", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "imagefolder", ",", "name", "+", "'.jpg'", ")", "\n", "seg_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "segfolder", ",", "name", "+", "'.npy'", ")", "\n", "kpt_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "kptfolder", ",", "name", "+", "'.npy'", ")", "\n", "\n", "image", "=", "imread", "(", "image_path", ")", "/", "255.", "\n", "kpt", "=", "np", ".", "load", "(", "kpt_path", ")", "[", ":", ",", ":", "2", "]", "\n", "mask", "=", "self", ".", "load_mask", "(", "seg_path", ",", "image", ".", "shape", "[", "0", "]", ",", "image", ".", "shape", "[", "1", "]", ")", "\n", "\n", "### crop information", "\n", "tform", "=", "self", ".", "crop", "(", "image", ",", "kpt", ")", "\n", "## crop ", "\n", "cropped_image", "=", "warp", "(", "image", ",", "tform", ".", "inverse", ",", "output_shape", "=", "(", "self", ".", "image_size", ",", "self", ".", "image_size", ")", ")", "\n", "cropped_mask", "=", "warp", "(", "mask", ",", "tform", ".", "inverse", ",", "output_shape", "=", "(", "self", ".", "image_size", ",", "self", ".", "image_size", ")", ")", "\n", "cropped_kpt", "=", "np", ".", "dot", "(", "tform", ".", "params", ",", "np", ".", "hstack", "(", "[", "kpt", ",", "np", ".", "ones", "(", "[", "kpt", ".", "shape", "[", "0", "]", ",", "1", "]", ")", "]", ")", ".", "T", ")", ".", "T", "# np.linalg.inv(tform.params)", "\n", "\n", "# normalized kpt", "\n", "cropped_kpt", "[", ":", ",", ":", "2", "]", "=", "cropped_kpt", "[", ":", ",", ":", "2", "]", "/", "self", ".", "image_size", "*", "2", "-", "1", "\n", "\n", "images_list", ".", "append", "(", "cropped_image", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "kpt_list", ".", "append", "(", "cropped_kpt", ")", "\n", "mask_list", ".", "append", "(", "cropped_mask", ")", "\n", "\n", "###", "\n", "", "images_array", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "images_list", ")", ")", ".", "type", "(", "dtype", "=", "torch", ".", "float32", ")", "#K,224,224,3", "\n", "kpt_array", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "kpt_list", ")", ")", ".", "type", "(", "dtype", "=", "torch", ".", "float32", ")", "#K,224,224,3", "\n", "mask_array", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "mask_list", ")", ")", ".", "type", "(", "dtype", "=", "torch", ".", "float32", ")", "#K,224,224,3", "\n", "\n", "if", "self", ".", "isSingle", ":", "\n", "            ", "images_array", "=", "images_array", ".", "squeeze", "(", ")", "\n", "kpt_array", "=", "kpt_array", ".", "squeeze", "(", ")", "\n", "mask_array", "=", "mask_array", ".", "squeeze", "(", ")", "\n", "\n", "", "data_dict", "=", "{", "\n", "'image'", ":", "images_array", ",", "\n", "'landmark'", ":", "kpt_array", ",", "\n", "'mask'", ":", "mask_array", "\n", "}", "\n", "\n", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.ethnicity.EthnicityDataset.crop": [[90, 113], ["numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.array", "int", "numpy.array", "numpy.array", "skimage.transform.estimate_transform", "numpy.random.rand", "numpy.random.rand"], "methods", ["None"], ["", "def", "crop", "(", "self", ",", "image", ",", "kpt", ")", ":", "\n", "        ", "left", "=", "np", ".", "min", "(", "kpt", "[", ":", ",", "0", "]", ")", ";", "right", "=", "np", ".", "max", "(", "kpt", "[", ":", ",", "0", "]", ")", ";", "\n", "top", "=", "np", ".", "min", "(", "kpt", "[", ":", ",", "1", "]", ")", ";", "bottom", "=", "np", ".", "max", "(", "kpt", "[", ":", ",", "1", "]", ")", "\n", "\n", "h", ",", "w", ",", "_", "=", "image", ".", "shape", "\n", "old_size", "=", "(", "right", "-", "left", "+", "bottom", "-", "top", ")", "/", "2", "\n", "center", "=", "np", ".", "array", "(", "[", "right", "-", "(", "right", "-", "left", ")", "/", "2.0", ",", "bottom", "-", "(", "bottom", "-", "top", ")", "/", "2.0", "]", ")", "#+ old_size*0.1])", "\n", "# translate center", "\n", "trans_scale", "=", "(", "np", ".", "random", ".", "rand", "(", "2", ")", "*", "2", "-", "1", ")", "*", "self", ".", "trans_scale", "\n", "center", "=", "center", "+", "trans_scale", "*", "old_size", "# 0.5", "\n", "\n", "scale", "=", "np", ".", "random", ".", "rand", "(", ")", "*", "(", "self", ".", "scale", "[", "1", "]", "-", "self", ".", "scale", "[", "0", "]", ")", "+", "self", ".", "scale", "[", "0", "]", "\n", "size", "=", "int", "(", "old_size", "*", "scale", ")", "\n", "\n", "# crop image", "\n", "src_pts", "=", "np", ".", "array", "(", "[", "[", "center", "[", "0", "]", "-", "size", "/", "2", ",", "center", "[", "1", "]", "-", "size", "/", "2", "]", ",", "[", "center", "[", "0", "]", "-", "size", "/", "2", ",", "center", "[", "1", "]", "+", "size", "/", "2", "]", ",", "[", "center", "[", "0", "]", "+", "size", "/", "2", ",", "center", "[", "1", "]", "-", "size", "/", "2", "]", "]", ")", "\n", "DST_PTS", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "self", ".", "image_size", "-", "1", "]", ",", "[", "self", ".", "image_size", "-", "1", ",", "0", "]", "]", ")", "\n", "tform", "=", "estimate_transform", "(", "'similarity'", ",", "src_pts", ",", "DST_PTS", ")", "\n", "\n", "# cropped_image = warp(image, tform.inverse, output_shape=(self.image_size, self.image_size))", "\n", "# # change kpt accordingly", "\n", "# cropped_kpt = np.dot(tform.params, np.hstack([kpt, np.ones([kpt.shape[0],1])]).T).T # np.linalg.inv(tform.params)", "\n", "return", "tform", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.ethnicity.EthnicityDataset.load_mask": [[114, 126], ["os.path.isfile", "numpy.load", "numpy.zeros_like", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load"], ["", "def", "load_mask", "(", "self", ",", "maskpath", ",", "h", ",", "w", ")", ":", "\n", "# print(maskpath)", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "maskpath", ")", ":", "\n", "            ", "vis_parsing_anno", "=", "np", ".", "load", "(", "maskpath", ")", "\n", "# atts = ['skin', 'l_brow', 'r_brow', 'l_eye', 'r_eye', 'eye_g', 'l_ear', 'r_ear', 'ear_r',", "\n", "#     'nose', 'mouth', 'u_lip', 'l_lip', 'neck', 'neck_l', 'cloth', 'hair', 'hat']", "\n", "mask", "=", "np", ".", "zeros_like", "(", "vis_parsing_anno", ")", "\n", "# for i in range(1, 16):", "\n", "mask", "[", "vis_parsing_anno", ">", "0.5", "]", "=", "1.", "\n", "", "else", ":", "\n", "            ", "mask", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ")", "\n", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.datasets.TestData.__init__": [[48, 77], ["isinstance", "sorted", "os.path.isdir", "detectors.FAN", "print", "exit", "glob.glob.glob", "os.path.isfile", "glob.glob.glob", "os.path.isfile", "datasets.video2sequence", "print", "exit", "glob.glob.glob", "glob.glob.glob", "glob.glob.glob", "glob.glob.glob"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.datasets.datasets.video2sequence"], ["    ", "def", "__init__", "(", "self", ",", "testpath", ",", "iscrop", "=", "True", ",", "crop_size", "=", "224", ",", "scale", "=", "1.25", ",", "face_detector", "=", "'fan'", ",", "device", "=", "'cuda'", ")", ":", "\n", "        ", "'''\n            testpath: folder, imagepath_list, image path, video path\n        '''", "\n", "if", "isinstance", "(", "testpath", ",", "list", ")", ":", "\n", "            ", "self", ".", "imagepath_list", "=", "testpath", "\n", "", "elif", "os", ".", "path", ".", "isdir", "(", "testpath", ")", ":", "\n", "            ", "self", ".", "imagepath_list", "=", "glob", "(", "testpath", "+", "'/*.jpg'", ")", "+", "glob", "(", "testpath", "+", "'/*.png'", ")", "+", "glob", "(", "testpath", "+", "'/*.bmp'", ")", "+", "glob", "(", "testpath", "+", "'/*/*.jpg'", ")", "+", "glob", "(", "testpath", "+", "'/*/*.png'", ")", "+", "glob", "(", "testpath", "+", "'/*/*.bmp'", ")", "\n", "", "elif", "os", ".", "path", ".", "isfile", "(", "testpath", ")", "and", "(", "testpath", "[", "-", "3", ":", "]", "in", "[", "'jpg'", ",", "'png'", ",", "'bmp'", "]", ")", ":", "\n", "            ", "self", ".", "imagepath_list", "=", "[", "testpath", "]", "\n", "", "elif", "os", ".", "path", ".", "isfile", "(", "testpath", ")", "and", "(", "testpath", "[", "-", "3", ":", "]", "in", "[", "'mp4'", ",", "'csv'", ",", "'vid'", ",", "'ebm'", "]", ")", ":", "\n", "            ", "self", ".", "imagepath_list", "=", "video2sequence", "(", "testpath", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "f'please check the test path: {testpath}'", ")", "\n", "exit", "(", ")", "\n", "# print('total {} images'.format(len(self.imagepath_list)))", "\n", "", "self", ".", "imagepath_list", "=", "sorted", "(", "self", ".", "imagepath_list", ")", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "iscrop", "=", "iscrop", "\n", "self", ".", "resolution_inp", "=", "crop_size", "\n", "if", "face_detector", "==", "'fan'", ":", "\n", "            ", "self", ".", "face_detector", "=", "detectors", ".", "FAN", "(", "device", "=", "device", ")", "\n", "# elif face_detector == 'mtcnn':", "\n", "#     self.face_detector = detectors.MTCNN()", "\n", "", "else", ":", "\n", "            ", "print", "(", "f'please check the detector: {face_detector}'", ")", "\n", "exit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.datasets.TestData.__len__": [[78, 80], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imagepath_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.datasets.TestData.bbox2point": [[81, 93], ["numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "bbox2point", "(", "self", ",", "left", ",", "right", ",", "top", ",", "bottom", ",", "type", "=", "'bbox'", ")", ":", "\n", "        ", "''' bbox from detector and landmarks are different\n        '''", "\n", "if", "type", "==", "'kpt68'", ":", "\n", "            ", "old_size", "=", "(", "right", "-", "left", "+", "bottom", "-", "top", ")", "/", "2", "*", "1.1", "\n", "center", "=", "np", ".", "array", "(", "[", "right", "-", "(", "right", "-", "left", ")", "/", "2.0", ",", "bottom", "-", "(", "bottom", "-", "top", ")", "/", "2.0", "]", ")", "\n", "", "elif", "type", "==", "'bbox'", ":", "\n", "            ", "old_size", "=", "(", "right", "-", "left", "+", "bottom", "-", "top", ")", "/", "2", "\n", "center", "=", "np", ".", "array", "(", "[", "right", "-", "(", "right", "-", "left", ")", "/", "2.0", ",", "bottom", "-", "(", "bottom", "-", "top", ")", "/", "2.0", "+", "old_size", "*", "0.12", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "return", "old_size", ",", "center", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.datasets.TestData.__getitem__": [[94, 144], ["numpy.array", "numpy.array", "skimage.transform.estimate_transform", "skimage.transform.warp", "dst_image.transpose.transpose.transpose", "skimage.io.imread", "len", "image[].repeat", "imagepath.replace().replace", "imagepath.replace().replace", "os.path.exists", "int", "numpy.array", "numpy.array", "torch.tensor().float", "len", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "datasets.TestData.bbox2point", "os.path.exists", "imagepath.replace", "imagepath.replace", "numpy.loadtxt", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "datasets.TestData.bbox2point", "datasets.TestData.face_detector.run", "datasets.TestData.bbox2point", "torch.tensor", "scipy.io.loadmat", "scipy.io.loadmat", "scipy.io.loadmat", "scipy.io.loadmat", "len", "print"], "methods", ["home.repos.pwc.inspect_result.foivospar_NED.datasets.datasets.TestData.bbox2point", "home.repos.pwc.inspect_result.foivospar_NED.datasets.datasets.TestData.bbox2point", "home.repos.pwc.inspect_result.foivospar_NED.datasets.detectors.MTCNN.run", "home.repos.pwc.inspect_result.foivospar_NED.datasets.datasets.TestData.bbox2point"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "imagepath", "=", "self", ".", "imagepath_list", "[", "index", "]", "\n", "\n", "image", "=", "np", ".", "array", "(", "imread", "(", "imagepath", ")", ")", "\n", "original_size", "=", "(", "image", ".", "shape", "[", "1", "]", ",", "image", ".", "shape", "[", "0", "]", ")", "\n", "if", "len", "(", "image", ".", "shape", ")", "==", "2", ":", "\n", "            ", "image", "=", "image", "[", ":", ",", ":", ",", "None", "]", ".", "repeat", "(", "1", ",", "1", ",", "3", ")", "\n", "", "if", "len", "(", "image", ".", "shape", ")", "==", "3", "and", "image", ".", "shape", "[", "2", "]", ">", "3", ":", "\n", "            ", "image", "=", "image", "[", ":", ",", ":", ",", ":", "3", "]", "\n", "\n", "", "h", ",", "w", ",", "_", "=", "image", ".", "shape", "\n", "if", "self", ".", "iscrop", ":", "\n", "# provide kpt as txt file, or mat file (for AFLW2000)", "\n", "            ", "kpt_matpath", "=", "imagepath", ".", "replace", "(", "'.jpg'", ",", "'.mat'", ")", ".", "replace", "(", "'.png'", ",", "'.mat'", ")", "\n", "kpt_txtpath", "=", "imagepath", ".", "replace", "(", "'.jpg'", ",", "'.txt'", ")", ".", "replace", "(", "'.png'", ",", "'.txt'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "kpt_matpath", ")", ":", "\n", "                ", "kpt", "=", "scipy", ".", "io", ".", "loadmat", "(", "kpt_matpath", ")", "[", "'pt3d_68'", "]", ".", "T", "\n", "left", "=", "np", ".", "min", "(", "kpt", "[", ":", ",", "0", "]", ")", ";", "right", "=", "np", ".", "max", "(", "kpt", "[", ":", ",", "0", "]", ")", ";", "\n", "top", "=", "np", ".", "min", "(", "kpt", "[", ":", ",", "1", "]", ")", ";", "bottom", "=", "np", ".", "max", "(", "kpt", "[", ":", ",", "1", "]", ")", "\n", "old_size", ",", "center", "=", "self", ".", "bbox2point", "(", "left", ",", "right", ",", "top", ",", "bottom", ",", "type", "=", "'kpt68'", ")", "\n", "", "elif", "os", ".", "path", ".", "exists", "(", "kpt_txtpath", ")", ":", "\n", "                ", "kpt", "=", "np", ".", "loadtxt", "(", "kpt_txtpath", ")", "\n", "left", "=", "np", ".", "min", "(", "kpt", "[", ":", ",", "0", "]", ")", ";", "right", "=", "np", ".", "max", "(", "kpt", "[", ":", ",", "0", "]", ")", ";", "\n", "top", "=", "np", ".", "min", "(", "kpt", "[", ":", ",", "1", "]", ")", ";", "bottom", "=", "np", ".", "max", "(", "kpt", "[", ":", ",", "1", "]", ")", "\n", "old_size", ",", "center", "=", "self", ".", "bbox2point", "(", "left", ",", "right", ",", "top", ",", "bottom", ",", "type", "=", "'kpt68'", ")", "\n", "", "else", ":", "\n", "                ", "bbox", ",", "bbox_type", "=", "self", ".", "face_detector", ".", "run", "(", "image", ")", "\n", "if", "len", "(", "bbox", ")", "<", "4", ":", "\n", "                    ", "print", "(", "'no face detected! run original image'", ")", "\n", "left", "=", "0", ";", "right", "=", "h", "-", "1", ";", "top", "=", "0", ";", "bottom", "=", "w", "-", "1", "\n", "", "else", ":", "\n", "                    ", "left", "=", "bbox", "[", "0", "]", ";", "right", "=", "bbox", "[", "2", "]", "\n", "top", "=", "bbox", "[", "1", "]", ";", "bottom", "=", "bbox", "[", "3", "]", "\n", "", "old_size", ",", "center", "=", "self", ".", "bbox2point", "(", "left", ",", "right", ",", "top", ",", "bottom", ",", "type", "=", "bbox_type", ")", "\n", "", "size", "=", "int", "(", "old_size", "*", "self", ".", "scale", ")", "\n", "src_pts", "=", "np", ".", "array", "(", "[", "[", "center", "[", "0", "]", "-", "size", "/", "2", ",", "center", "[", "1", "]", "-", "size", "/", "2", "]", ",", "[", "center", "[", "0", "]", "-", "size", "/", "2", ",", "center", "[", "1", "]", "+", "size", "/", "2", "]", ",", "[", "center", "[", "0", "]", "+", "size", "/", "2", ",", "center", "[", "1", "]", "-", "size", "/", "2", "]", "]", ")", "\n", "", "else", ":", "\n", "            ", "src_pts", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "h", "-", "1", "]", ",", "[", "w", "-", "1", ",", "0", "]", "]", ")", "\n", "\n", "", "DST_PTS", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "self", ".", "resolution_inp", "-", "1", "]", ",", "[", "self", ".", "resolution_inp", "-", "1", ",", "0", "]", "]", ")", "\n", "tform", "=", "estimate_transform", "(", "'similarity'", ",", "src_pts", ",", "DST_PTS", ")", "\n", "\n", "image", "=", "image", "/", "255.", "\n", "\n", "dst_image", "=", "warp", "(", "image", ",", "tform", ".", "inverse", ",", "output_shape", "=", "(", "self", ".", "resolution_inp", ",", "self", ".", "resolution_inp", ")", ")", "\n", "dst_image", "=", "dst_image", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "return", "{", "'image'", ":", "torch", ".", "tensor", "(", "dst_image", ")", ".", "float", "(", ")", ",", "\n", "'imagepath'", ":", "imagepath", ",", "\n", "'tform'", ":", "tform", ",", "\n", "'original_size'", ":", "original_size", "\n", "# 'original_image': torch.tensor(image.transpose(2,0,1)).float(),", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.datasets.datasets.video2sequence": [[30, 46], ["os.makedirs", "cv2.VideoCapture", "cv2.VideoCapture.read", "print", "video_path.split", "[].split", "cv2.imwrite", "cv2.VideoCapture.read", "imagepath_list.append", "video_path.split"], "function", ["None"], ["def", "video2sequence", "(", "video_path", ")", ":", "\n", "    ", "videofolder", "=", "video_path", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "os", ".", "makedirs", "(", "videofolder", ",", "exist_ok", "=", "True", ")", "\n", "video_name", "=", "video_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "vidcap", "=", "cv2", ".", "VideoCapture", "(", "video_path", ")", "\n", "success", ",", "image", "=", "vidcap", ".", "read", "(", ")", "\n", "count", "=", "0", "\n", "imagepath_list", "=", "[", "]", "\n", "while", "success", ":", "\n", "        ", "imagepath", "=", "'{}/{}_frame{:04d}.jpg'", ".", "format", "(", "videofolder", ",", "video_name", ",", "count", ")", "\n", "cv2", ".", "imwrite", "(", "imagepath", ",", "image", ")", "# save frame as JPEG file", "\n", "success", ",", "image", "=", "vidcap", ".", "read", "(", ")", "\n", "count", "+=", "1", "\n", "imagepath_list", ".", "append", "(", "imagepath", ")", "\n", "", "print", "(", "'video frames are stored in {}'", ".", "format", "(", "videofolder", ")", ")", "\n", "return", "imagepath_list", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.renderer.create_inputs.mkdir": [[17, 20], ["os.path.exists", "os.makedirs"], "function", ["None"], ["def", "mkdir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.renderer.create_inputs.read_DECA_params": [[21, 33], ["os.path.join", "pickle.load.keys", "params.append", "sorted", "open", "pickle.load", "os.listdir", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.checkpoint.checkpoint.CheckpointIO.load"], ["", "", "def", "read_DECA_params", "(", "path", ",", "device", "=", "'cuda'", ")", ":", "\n", "    ", "pkl_files", "=", "[", "os", ".", "path", ".", "join", "(", "path", ",", "pkl", ")", "for", "pkl", "in", "sorted", "(", "os", ".", "listdir", "(", "path", ")", ")", "]", "\n", "params", "=", "[", "]", "\n", "for", "p", "in", "pkl_files", ":", "\n", "        ", "with", "open", "(", "p", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "param", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "for", "key", "in", "param", ".", "keys", "(", ")", ":", "\n", "            ", "if", "key", "!=", "'tform'", "and", "key", "!=", "'original_size'", ":", "\n", "                ", "param", "[", "key", "]", "=", "torch", ".", "from_numpy", "(", "param", "[", "key", "]", ")", ".", "to", "(", "device", ")", "\n", "", "", "params", ".", "append", "(", "param", ")", "\n", "\n", "", "return", "params", ",", "pkl_files", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.renderer.create_inputs.read_eye_landmarks": [[34, 45], ["os.path.join", "os.path.exists", "sorted", "numpy.concatenate", "numpy.concatenate", "eye_landmarks_left.append", "eye_landmarks_right.append", "os.listdir", "numpy.loadtxt", "numpy.loadtxt", "numpy.loadtxt", "numpy.loadtxt"], "function", ["None"], ["", "def", "read_eye_landmarks", "(", "path", ")", ":", "\n", "    ", "txt_files", "=", "[", "os", ".", "path", ".", "join", "(", "path", ",", "txt", ")", "for", "txt", "in", "sorted", "(", "os", ".", "listdir", "(", "path", ")", ")", "]", "\n", "eye_landmarks_left", "=", "[", "]", "\n", "eye_landmarks_right", "=", "[", "]", "\n", "for", "f", "in", "txt_files", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "f", ")", ":", "\n", "            ", "left", "=", "np", ".", "concatenate", "(", "[", "np", ".", "loadtxt", "(", "f", ")", "[", "0", ":", "6", "]", ",", "np", ".", "loadtxt", "(", "f", ")", "[", "12", ":", "13", "]", "]", ",", "axis", "=", "0", ")", "\n", "right", "=", "np", ".", "concatenate", "(", "[", "np", ".", "loadtxt", "(", "f", ")", "[", "6", ":", "12", "]", ",", "np", ".", "loadtxt", "(", "f", ")", "[", "13", ":", "14", "]", "]", ",", "axis", "=", "0", ")", "\n", "eye_landmarks_left", ".", "append", "(", "left", ")", "# Left eye", "\n", "eye_landmarks_right", ".", "append", "(", "right", ")", "# Right eye", "\n", "", "", "return", "[", "eye_landmarks_left", ",", "eye_landmarks_right", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.renderer.create_inputs.transform_points": [[46, 51], ["numpy.expand_dims", "cv2.transform", "numpy.squeeze"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.utils.lossfunc.VGGFace2Loss.transform"], ["", "def", "transform_points", "(", "points", ",", "mat", ")", ":", "\n", "    ", "points", "=", "np", ".", "expand_dims", "(", "points", ",", "axis", "=", "1", ")", "\n", "points", "=", "cv2", ".", "transform", "(", "points", ",", "mat", ",", "points", ".", "shape", ")", "\n", "points", "=", "np", ".", "squeeze", "(", "points", ")", "\n", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.renderer.create_inputs.print_args": [[52, 63], ["sorted", "print", "vars().items", "parser.get_default", "str", "str", "vars", "str"], "function", ["None"], ["", "def", "print_args", "(", "parser", ",", "args", ")", ":", "\n", "    ", "message", "=", "''", "\n", "message", "+=", "'----------------- Arguments ---------------\\n'", "\n", "for", "k", ",", "v", "in", "sorted", "(", "vars", "(", "args", ")", ".", "items", "(", ")", ")", ":", "\n", "        ", "comment", "=", "''", "\n", "default", "=", "parser", ".", "get_default", "(", "k", ")", "\n", "if", "v", "!=", "default", ":", "\n", "            ", "comment", "=", "'\\t[default: %s]'", "%", "str", "(", "default", ")", "\n", "", "message", "+=", "'{:>25}: {:<30}{}\\n'", ".", "format", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ",", "comment", ")", "\n", "", "message", "+=", "'-------------------------------------------'", "\n", "print", "(", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.foivospar_NED.renderer.create_inputs.main": [[64, 189], ["print", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "int", "create_inputs.print_args", "os.path.join", "os.path.isdir", "create_inputs.read_DECA_params", "create_inputs.read_DECA_params", "create_inputs.mkdir", "DECA.decalib.deca.DECA", "tqdm.tqdm", "print", "torch.cuda.is_available", "torch.cuda.is_available", "print", "exit", "os.path.join", "os.path.join", "create_inputs.read_eye_landmarks", "os.path.join", "create_inputs.mkdir", "create_inputs.mkdir", "create_inputs.mkdir", "create_inputs.mkdir", "enumerate", "DECA.decalib.deca.DECA.decode", "skimage.transform.warp", "skimage.img_as_ubyte", "cv2.imwrite", "print", "exit", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "create_inputs.mkdir", "create_inputs.mkdir", "create_inputs.mkdir", "zip", "len", "numpy.loadtxt", "cv2.warpAffine", "cv2.imwrite", "torch.grid_sample", "skimage.transform.warp", "skimage.img_as_ubyte", "cv2.imwrite", "skimage.transform.warp", "skimage.img_as_ubyte", "cv2.imwrite", "src_codedict[].inverse", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.concatenate().astype", "numpy.savetxt", "torch.cuda.device_count", "torch.cuda.device_count", "os.path.join", "os.path.join", "os.path.join", "os.path.splitext", "DECA.decalib.utils.util.tensor2image", "nmfc_pth.replace", "opdict[].detach", "cv2.warpAffine", "cv2.imwrite", "cv2.warpAffine", "cv2.imwrite", "create_inputs.transform_points", "numpy.savetxt", "str", "pth.replace", "os.path.splitext", "os.path.splitext", "DECA.decalib.utils.util.tensor2image", "rendering_pth.replace", "os.path.splitext", "DECA.decalib.utils.util.tensor2image", "shape_pth.replace", "numpy.concatenate", "os.path.splitext", "eye_lnds_pth.replace", "pth.replace", "pth.replace", "pth.replace", "[].cpu().numpy", "pth.replace", "[].cpu"], "function", ["home.repos.pwc.inspect_result.foivospar_NED.utils.config.parse_args", "home.repos.pwc.inspect_result.foivospar_NED.renderer.create_inputs.print_args", "home.repos.pwc.inspect_result.foivospar_NED.renderer.create_inputs.read_DECA_params", "home.repos.pwc.inspect_result.foivospar_NED.renderer.create_inputs.read_DECA_params", "home.repos.pwc.inspect_result.foivospar_NED.renderer.create_inputs.mkdir", "home.repos.pwc.inspect_result.foivospar_NED.renderer.create_inputs.read_eye_landmarks", "home.repos.pwc.inspect_result.foivospar_NED.renderer.create_inputs.mkdir", "home.repos.pwc.inspect_result.foivospar_NED.renderer.create_inputs.mkdir", "home.repos.pwc.inspect_result.foivospar_NED.renderer.create_inputs.mkdir", "home.repos.pwc.inspect_result.foivospar_NED.renderer.create_inputs.mkdir", "home.repos.pwc.inspect_result.foivospar_NED.decalib.deca.DECA.decode", "home.repos.pwc.inspect_result.foivospar_NED.renderer.create_inputs.mkdir", "home.repos.pwc.inspect_result.foivospar_NED.renderer.create_inputs.mkdir", "home.repos.pwc.inspect_result.foivospar_NED.renderer.create_inputs.mkdir", "home.repos.pwc.inspect_result.foivospar_NED.utils.util.tensor2image", "home.repos.pwc.inspect_result.foivospar_NED.renderer.create_inputs.transform_points", "home.repos.pwc.inspect_result.foivospar_NED.utils.util.tensor2image", "home.repos.pwc.inspect_result.foivospar_NED.utils.util.tensor2image"], ["", "def", "main", "(", ")", ":", "\n", "    ", "print", "(", "'--------- Create modified NMFCs and eye landmarks --------- \\n'", ")", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_id'", ",", "type", "=", "int", ",", "default", "=", "'0'", ",", "help", "=", "'Negative value to use CPU, or greater equal than zero for GPU id.'", ")", "\n", "parser", ".", "add_argument", "(", "'--celeb'", ",", "type", "=", "str", ",", "default", "=", "'JackNicholson'", ",", "help", "=", "'Path to celebrity folder'", ")", "\n", "parser", ".", "add_argument", "(", "'--exp_name'", ",", "type", "=", "str", ",", "default", "=", "'happy'", ",", "help", "=", "'Subfolder for specific experiment'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_eye_gaze'", ",", "action", "=", "'store_true'", ",", "help", "=", "'If specified, do not use eye-landmarks'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_align'", ",", "action", "=", "'store_true'", ",", "help", "=", "'If specfied, no alignment is performed'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_renderings'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Whether to save renderings'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_shapes'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Whether to save shapes'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "# Figure out the device", "\n", "gpu_id", "=", "int", "(", "args", ".", "gpu_id", ")", "\n", "if", "gpu_id", "<", "0", ":", "\n", "        ", "device", "=", "'cpu'", "\n", "", "elif", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "if", "gpu_id", ">=", "torch", ".", "cuda", ".", "device_count", "(", ")", ":", "\n", "            ", "device", "=", "'cuda:0'", "\n", "", "else", ":", "\n", "            ", "device", "=", "'cuda:'", "+", "str", "(", "gpu_id", ")", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "'GPU device not available. Exit'", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "# Print Arguments", "\n", "", "print_args", "(", "parser", ",", "args", ")", "\n", "\n", "# Check if conditional input files already exist.", "\n", "save_nmfcs_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "celeb", ",", "args", ".", "exp_name", ",", "'nmfcs'", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "save_nmfcs_dir", ")", ":", "\n", "        ", "print", "(", "'Conditional input files already exist!'", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "# Read parameters from the DECA sub-folders.", "\n", "", "src_codedicts", ",", "_", "=", "read_DECA_params", "(", "os", ".", "path", ".", "join", "(", "args", ".", "celeb", ",", "'DECA'", ")", ",", "device", "=", "device", ")", "\n", "trg_codedicts", ",", "paths", "=", "read_DECA_params", "(", "os", ".", "path", ".", "join", "(", "args", ".", "celeb", ",", "args", ".", "exp_name", ",", "'DECA'", ")", ",", "device", "=", "device", ")", "\n", "\n", "# Read src eye landmarks.", "\n", "if", "not", "args", ".", "no_eye_gaze", ":", "\n", "        ", "src_eye_landmarks", "=", "read_eye_landmarks", "(", "os", ".", "path", ".", "join", "(", "args", ".", "celeb", ",", "'eye_landmarks'", ")", ")", "\n", "\n", "# Create save dirs", "\n", "", "mkdir", "(", "os", ".", "path", ".", "join", "(", "args", ".", "celeb", ",", "args", ".", "exp_name", ",", "'nmfcs'", ")", ")", "\n", "if", "args", ".", "save_renderings", ":", "\n", "        ", "mkdir", "(", "os", ".", "path", ".", "join", "(", "args", ".", "celeb", ",", "args", ".", "exp_name", ",", "'renderings'", ")", ")", "\n", "", "if", "args", ".", "save_shapes", ":", "\n", "        ", "mkdir", "(", "os", ".", "path", ".", "join", "(", "args", ".", "celeb", ",", "args", ".", "exp_name", ",", "'shapes'", ")", ")", "\n", "", "if", "not", "args", ".", "no_eye_gaze", ":", "\n", "        ", "mkdir", "(", "os", ".", "path", ".", "join", "(", "args", ".", "celeb", ",", "args", ".", "exp_name", ",", "'eye_landmarks'", ")", ")", "\n", "", "if", "not", "args", ".", "no_align", ":", "\n", "        ", "mkdir", "(", "os", ".", "path", ".", "join", "(", "args", ".", "celeb", ",", "args", ".", "exp_name", ",", "'nmfcs_aligned'", ")", ")", "\n", "if", "args", ".", "save_renderings", ":", "\n", "            ", "mkdir", "(", "os", ".", "path", ".", "join", "(", "args", ".", "celeb", ",", "args", ".", "exp_name", ",", "'renderings_aligned'", ")", ")", "\n", "", "if", "args", ".", "save_shapes", ":", "\n", "            ", "mkdir", "(", "os", ".", "path", ".", "join", "(", "args", ".", "celeb", ",", "args", ".", "exp_name", ",", "'shapes_aligned'", ")", ")", "\n", "", "if", "not", "args", ".", "no_eye_gaze", ":", "\n", "            ", "mkdir", "(", "os", ".", "path", ".", "join", "(", "args", ".", "celeb", ",", "args", ".", "exp_name", ",", "'eye_landmarks_aligned'", ")", ")", "\n", "\n", "# run DECA decoding", "\n", "", "", "deca_cfg", ".", "model", ".", "use_tex", "=", "True", "\n", "deca", "=", "DECA", "(", "config", "=", "deca_cfg", ",", "device", "=", "device", ")", "\n", "\n", "for", "i", ",", "(", "src_codedict", ",", "trg_codedict", ",", "pth", ")", "in", "tqdm", "(", "enumerate", "(", "zip", "(", "src_codedicts", ",", "trg_codedicts", ",", "paths", ")", ")", ",", "total", "=", "len", "(", "src_codedicts", ")", ")", ":", "\n", "        ", "src_codedict", "[", "'exp'", "]", "=", "trg_codedict", "[", "'exp'", "]", "\n", "src_codedict", "[", "'pose'", "]", "[", "0", ",", "3", "]", "=", "trg_codedict", "[", "'pose'", "]", "[", "0", ",", "3", "]", "\n", "\n", "opdict", ",", "visdict", "=", "deca", ".", "decode", "(", "src_codedict", ")", "\n", "\n", "nmfc_pth", "=", "os", ".", "path", ".", "splitext", "(", "pth", ".", "replace", "(", "'/DECA'", ",", "'/nmfcs'", ")", ")", "[", "0", "]", "+", "'.png'", "\n", "nmfc_image", "=", "warp", "(", "util", ".", "tensor2image", "(", "visdict", "[", "'nmfcs'", "]", "[", "0", "]", ")", "/", "255", ",", "src_codedict", "[", "'tform'", "]", ",", "output_shape", "=", "(", "src_codedict", "[", "'original_size'", "]", "[", "1", "]", ",", "src_codedict", "[", "'original_size'", "]", "[", "0", "]", ")", ")", "\n", "nmfc_image", "=", "img_as_ubyte", "(", "nmfc_image", ")", "\n", "cv2", ".", "imwrite", "(", "nmfc_pth", ",", "nmfc_image", ")", "\n", "if", "not", "args", ".", "no_align", ":", "\n", "            ", "mat_pth", "=", "os", ".", "path", ".", "splitext", "(", "pth", ".", "replace", "(", "f'/{args.exp_name}/DECA'", ",", "'/align_transforms'", ")", ")", "[", "0", "]", "+", "'.txt'", "\n", "mat", "=", "np", ".", "loadtxt", "(", "mat_pth", ")", "\n", "\n", "nmfc_image_a", "=", "cv2", ".", "warpAffine", "(", "nmfc_image", ",", "mat", ",", "(", "nmfc_image", ".", "shape", "[", "1", "]", ",", "nmfc_image", ".", "shape", "[", "0", "]", ")", ",", "flags", "=", "cv2", ".", "INTER_LANCZOS4", ")", "\n", "cv2", ".", "imwrite", "(", "nmfc_pth", ".", "replace", "(", "'/nmfcs'", ",", "'/nmfcs_aligned'", ")", ",", "nmfc_image_a", ")", "\n", "\n", "", "if", "args", ".", "save_renderings", ":", "\n", "            ", "rendering_pth", "=", "os", ".", "path", ".", "splitext", "(", "pth", ".", "replace", "(", "'/DECA'", ",", "'/renderings'", ")", ")", "[", "0", "]", "+", "'.png'", "\n", "detail_image", "=", "F", ".", "grid_sample", "(", "opdict", "[", "'uv_texture'", "]", ",", "opdict", "[", "'grid'", "]", ".", "detach", "(", ")", ",", "align_corners", "=", "False", ")", "\n", "detail_image", "=", "warp", "(", "util", ".", "tensor2image", "(", "detail_image", "[", "0", "]", ")", "/", "255", ",", "src_codedict", "[", "'tform'", "]", ",", "output_shape", "=", "(", "src_codedict", "[", "'original_size'", "]", "[", "1", "]", ",", "src_codedict", "[", "'original_size'", "]", "[", "0", "]", ")", ")", "\n", "detail_image", "=", "img_as_ubyte", "(", "detail_image", ")", "\n", "cv2", ".", "imwrite", "(", "rendering_pth", ",", "detail_image", ")", "\n", "if", "not", "args", ".", "no_align", ":", "\n", "                ", "detail_image_a", "=", "cv2", ".", "warpAffine", "(", "detail_image", ",", "mat", ",", "(", "detail_image", ".", "shape", "[", "1", "]", ",", "detail_image", ".", "shape", "[", "0", "]", ")", ",", "flags", "=", "cv2", ".", "INTER_LANCZOS4", ")", "\n", "cv2", ".", "imwrite", "(", "rendering_pth", ".", "replace", "(", "'/renderings'", ",", "'/renderings_aligned'", ")", ",", "detail_image_a", ")", "\n", "\n", "", "", "if", "args", ".", "save_shapes", ":", "\n", "            ", "shape_pth", "=", "os", ".", "path", ".", "splitext", "(", "pth", ".", "replace", "(", "'/DECA'", ",", "'/shapes'", ")", ")", "[", "0", "]", "+", "'.png'", "\n", "shape_image", "=", "warp", "(", "util", ".", "tensor2image", "(", "visdict", "[", "'shape_detail_images'", "]", "[", "0", "]", ")", "/", "255", ",", "src_codedict", "[", "'tform'", "]", ",", "output_shape", "=", "(", "src_codedict", "[", "'original_size'", "]", "[", "1", "]", ",", "src_codedict", "[", "'original_size'", "]", "[", "0", "]", ")", ")", "\n", "shape_image", "=", "img_as_ubyte", "(", "shape_image", ")", "\n", "cv2", ".", "imwrite", "(", "shape_pth", ",", "shape_image", ")", "\n", "if", "not", "args", ".", "no_align", ":", "\n", "                ", "shape_image_a", "=", "cv2", ".", "warpAffine", "(", "shape_image", ",", "mat", ",", "(", "shape_image", ".", "shape", "[", "1", "]", ",", "shape_image", ".", "shape", "[", "0", "]", ")", ",", "flags", "=", "cv2", ".", "INTER_LANCZOS4", ")", "\n", "cv2", ".", "imwrite", "(", "shape_pth", ".", "replace", "(", "'/shapes'", ",", "'/shapes_aligned'", ")", ",", "shape_image_a", ")", "\n", "\n", "# Adapt eye pupil and save eye landmarks", "\n", "", "", "if", "not", "args", ".", "no_eye_gaze", ":", "\n", "            ", "trg_lnds", "=", "src_codedict", "[", "'tform'", "]", ".", "inverse", "(", "112", "+", "112", "*", "opdict", "[", "'landmarks2d'", "]", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "trg_left_eye", "=", "trg_lnds", "[", "36", ":", "42", "]", "\n", "trg_right_eye", "=", "trg_lnds", "[", "42", ":", "48", "]", "\n", "\n", "src_left_eye", "=", "src_eye_landmarks", "[", "0", "]", "[", "i", "]", "\n", "src_right_eye", "=", "src_eye_landmarks", "[", "1", "]", "[", "i", "]", "\n", "\n", "src_left_center", "=", "np", ".", "mean", "(", "src_left_eye", "[", "0", ":", "6", "]", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "src_right_center", "=", "np", ".", "mean", "(", "src_right_eye", "[", "0", ":", "6", "]", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "\n", "trg_left_center", "=", "np", ".", "mean", "(", "trg_left_eye", "[", "0", ":", "6", "]", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "trg_right_center", "=", "np", ".", "mean", "(", "trg_right_eye", "[", "0", ":", "6", "]", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "\n", "trg_left_pupil", "=", "src_left_eye", "[", "6", ":", "7", "]", "+", "(", "trg_left_center", "-", "src_left_center", ")", "\n", "trg_right_pupil", "=", "src_right_eye", "[", "6", ":", "7", "]", "+", "(", "trg_right_center", "-", "src_right_center", ")", "\n", "\n", "eye_lnds", "=", "np", ".", "concatenate", "(", "[", "trg_left_eye", ",", "trg_right_eye", ",", "trg_left_pupil", ",", "trg_right_pupil", "]", ",", "axis", "=", "0", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "eye_lnds_pth", "=", "os", ".", "path", ".", "splitext", "(", "pth", ".", "replace", "(", "'/DECA'", ",", "'/eye_landmarks'", ")", ")", "[", "0", "]", "+", "'.txt'", "\n", "np", ".", "savetxt", "(", "eye_lnds_pth", ",", "eye_lnds", ")", "\n", "\n", "if", "not", "args", ".", "no_align", ":", "\n", "                ", "eye_lnds_a", "=", "transform_points", "(", "eye_lnds", ",", "mat", ")", "\n", "np", ".", "savetxt", "(", "eye_lnds_pth", ".", "replace", "(", "'/eye_landmarks'", ",", "'/eye_landmarks_aligned'", ")", ",", "eye_lnds_a", ")", "\n", "", "", "", "print", "(", "'DONE!'", ")", "\n", "\n"]]}