{"home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.models.Lenet300100.__init__": [[17, 24], ["tensorflow.keras.initializers.VarianceScaling"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "shape", ",", "batchnorm", "=", "True", ",", "decay", "=", "5e-4", ",", "output_classes", "=", "10", ",", "activation", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "output_classes", "=", "output_classes", "\n", "self", ".", "shape", "=", "shape", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "batchnorm", "=", "batchnorm", "\n", "self", ".", "decay", "=", "decay", "\n", "self", ".", "initializer", "=", "tf", ".", "keras", ".", "initializers", ".", "VarianceScaling", "(", "scale", "=", "2.0", ",", "mode", "=", "\"fan_avg\"", ",", "distribution", "=", "\"normal\"", ")", "\n", "", "def", "build", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.models.Lenet300100.build": [[24, 48], ["tensorflow.keras.layers.Input", "tensorflow.keras.models.Model", "range", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "len", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensors.append", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2"], "methods", ["None"], ["", "def", "build", "(", "self", ")", ":", "\n", "        ", "inputs", "=", "layers", ".", "Input", "(", "shape", "=", "self", ".", "shape", ")", "\n", "x", "=", "layers", ".", "Flatten", "(", "name", "=", "\"output_0\"", ")", "(", "inputs", ")", "\n", "x", "=", "layers", ".", "Dense", "(", "units", "=", "300", ",", "use_bias", "=", "True", ",", "bias_initializer", "=", "\"zeros\"", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "activation", "=", "None", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_dense_1\"", ")", "(", "x", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "\"output_1\"", ")", "(", "x", ")", "\n", "", "x", "=", "layers", ".", "Dense", "(", "units", "=", "100", ",", "use_bias", "=", "True", ",", "bias_initializer", "=", "\"zeros\"", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "activation", "=", "None", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_dense_2\"", ")", "(", "x", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "\"output_2\"", ")", "(", "x", ")", "\n", "", "x", "=", "layers", ".", "Dense", "(", "units", "=", "self", ".", "output_classes", ",", "use_bias", "=", "True", ",", "bias_initializer", "=", "\"zeros\"", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "activation", "=", "None", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_dense_3\"", ")", "(", "x", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"softmax\"", ",", "name", "=", "\"output_3\"", ")", "(", "x", ")", "\n", "", "model", "=", "models", ".", "Model", "(", "inputs", ",", "x", ",", "name", "=", "\"LeNet-300-100\"", ")", "\n", "tensors", "=", "[", "]", "\n", "for", "layer", "in", "range", "(", "len", "(", "model", ".", "layers", ")", ")", ":", "\n", "            ", "if", "\"tensor\"", "in", "model", ".", "layers", "[", "layer", "]", ".", "name", ":", "\n", "                ", "tensors", ".", "append", "(", "layer", ")", "\n", "", "", "return", "model", ",", "tensors", "\n", "\n"]], "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.models.Lenet5.__init__": [[50, 57], ["tensorflow.keras.initializers.VarianceScaling"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "shape", ",", "batchnorm", "=", "True", ",", "decay", "=", "5e-4", ",", "output_classes", "=", "10", ",", "activation", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "output_classes", "=", "output_classes", "\n", "self", ".", "shape", "=", "shape", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "batchnorm", "=", "batchnorm", "\n", "self", ".", "decay", "=", "decay", "\n", "self", ".", "initializer", "=", "tf", ".", "keras", ".", "initializers", ".", "VarianceScaling", "(", "scale", "=", "2.0", ",", "mode", "=", "\"fan_avg\"", ",", "distribution", "=", "\"normal\"", ")", "\n", "", "def", "build", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.models.Lenet5.build": [[57, 93], ["tensorflow.keras.layers.Input", "tensorflow.keras.models.Model", "range", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.AveragePooling2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.AveragePooling2D", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "len", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensors.append", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2"], "methods", ["None"], ["", "def", "build", "(", "self", ")", ":", "\n", "        ", "inputs", "=", "layers", ".", "Input", "(", "shape", "=", "self", ".", "shape", ",", "name", "=", "\"output_0\"", ")", "\n", "x", "=", "layers", ".", "Conv2D", "(", "filters", "=", "6", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "padding", "=", "\"valid\"", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "True", ",", "bias_initializer", "=", "\"zeros\"", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_conv1\"", ")", "(", "inputs", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "\"output_1\"", ")", "(", "x", ")", "\n", "", "x", "=", "layers", ".", "AveragePooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "\"valid\"", ",", "name", "=", "\"pool2_1\"", ")", "(", "x", ")", "\n", "x", "=", "layers", ".", "Conv2D", "(", "filters", "=", "16", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "padding", "=", "\"valid\"", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "True", ",", "bias_initializer", "=", "\"zeros\"", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_conv2\"", ")", "(", "x", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "\"output_2\"", ")", "(", "x", ")", "\n", "", "x", "=", "layers", ".", "AveragePooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "\"valid\"", ",", "name", "=", "\"pool2_2\"", ")", "(", "x", ")", "\n", "x", "=", "layers", ".", "Flatten", "(", "name", "=", "\"flatten\"", ")", "(", "x", ")", "\n", "x", "=", "layers", ".", "Dense", "(", "units", "=", "120", ",", "use_bias", "=", "True", ",", "bias_initializer", "=", "\"zeros\"", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "activation", "=", "None", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_dense1\"", ")", "(", "x", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "\"output_3\"", ")", "(", "x", ")", "\n", "", "x", "=", "layers", ".", "Dense", "(", "units", "=", "84", ",", "use_bias", "=", "True", ",", "bias_initializer", "=", "\"zeros\"", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "activation", "=", "None", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_dense2\"", ")", "(", "x", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "\"output_4\"", ")", "(", "x", ")", "\n", "", "x", "=", "layers", ".", "Dense", "(", "units", "=", "self", ".", "output_classes", ",", "use_bias", "=", "True", ",", "bias_initializer", "=", "\"zeros\"", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "activation", "=", "None", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_dense3\"", ")", "(", "x", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"softmax\"", ",", "name", "=", "\"output_5\"", ")", "(", "x", ")", "\n", "", "model", "=", "models", ".", "Model", "(", "inputs", ",", "x", ",", "name", "=", "\"LeNet-5\"", ")", "\n", "tensors", "=", "[", "]", "\n", "for", "layer", "in", "range", "(", "len", "(", "model", ".", "layers", ")", ")", ":", "\n", "            ", "if", "\"tensor\"", "in", "model", ".", "layers", "[", "layer", "]", ".", "name", ":", "\n", "                ", "tensors", ".", "append", "(", "layer", ")", "\n", "", "", "return", "model", ",", "tensors", "\n", "\n"]], "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.models.VGG16.__init__": [[95, 103], ["tensorflow.keras.initializers.VarianceScaling"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "shape", ",", "pool", "=", "\"max\"", ",", "batchnorm", "=", "False", ",", "decay", "=", "1e-4", ",", "output_classes", "=", "10", ",", "activation", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "output_classes", "=", "output_classes", "\n", "self", ".", "shape", "=", "shape", "\n", "self", ".", "pool", "=", "pool", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "decay", "=", "decay", "\n", "self", ".", "batchnorm", "=", "batchnorm", "\n", "self", ".", "initializer", "=", "tf", ".", "keras", ".", "initializers", ".", "VarianceScaling", "(", "scale", "=", "2.0", ",", "mode", "=", "\"fan_avg\"", ",", "distribution", "=", "\"normal\"", ")", "\n", "", "def", "build", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.models.VGG16.build": [[103, 202], ["tensorflow.keras.layers.Input", "tensorflow.keras.models.Model", "range", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Dense", "len", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.MaxPooling2D", "tensorflow.keras.layers.AveragePooling2D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.MaxPooling2D", "tensorflow.keras.layers.AveragePooling2D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.MaxPooling2D", "tensorflow.keras.layers.AveragePooling2D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.MaxPooling2D", "tensorflow.keras.layers.AveragePooling2D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.MaxPooling2D", "tensorflow.keras.layers.AveragePooling2D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensors.append", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2"], "methods", ["None"], ["", "def", "build", "(", "self", ")", ":", "\n", "        ", "inputs", "=", "layers", ".", "Input", "(", "shape", "=", "self", ".", "shape", ",", "name", "=", "\"output_0\"", ")", "\n", "x", "=", "layers", ".", "Conv2D", "(", "filters", "=", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "True", ",", "bias_initializer", "=", "\"zeros\"", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_conv1\"", ")", "(", "inputs", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "\"output_1\"", ")", "(", "x", ")", "\n", "", "x", "=", "layers", ".", "Conv2D", "(", "filters", "=", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "True", ",", "bias_initializer", "=", "\"zeros\"", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_conv2\"", ")", "(", "x", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "\"output_2\"", ")", "(", "x", ")", "\n", "", "if", "self", ".", "pool", "==", "\"max\"", ":", "\n", "            ", "x", "=", "layers", ".", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "\"same\"", ")", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "layers", ".", "AveragePooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "\"same\"", ")", "(", "x", ")", "\n", "", "x", "=", "layers", ".", "Conv2D", "(", "filters", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "True", ",", "bias_initializer", "=", "\"zeros\"", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_conv3\"", ")", "(", "x", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "\"output_3\"", ")", "(", "x", ")", "\n", "", "x", "=", "layers", ".", "Conv2D", "(", "filters", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "True", ",", "bias_initializer", "=", "\"zeros\"", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_conv4\"", ")", "(", "x", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "\"output_4\"", ")", "(", "x", ")", "\n", "", "if", "self", ".", "pool", "==", "\"max\"", ":", "\n", "            ", "x", "=", "layers", ".", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "\"same\"", ")", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "layers", ".", "AveragePooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "\"same\"", ")", "(", "x", ")", "\n", "", "x", "=", "layers", ".", "Conv2D", "(", "filters", "=", "256", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "True", ",", "bias_initializer", "=", "\"zeros\"", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_conv5\"", ")", "(", "x", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "\"output_5\"", ")", "(", "x", ")", "\n", "", "x", "=", "layers", ".", "Conv2D", "(", "filters", "=", "256", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "True", ",", "bias_initializer", "=", "\"zeros\"", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_conv6\"", ")", "(", "x", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "\"output_6\"", ")", "(", "x", ")", "\n", "", "x", "=", "layers", ".", "Conv2D", "(", "filters", "=", "256", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "True", ",", "bias_initializer", "=", "\"zeros\"", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_conv7\"", ")", "(", "x", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "\"output_7\"", ")", "(", "x", ")", "\n", "", "if", "self", ".", "pool", "==", "\"max\"", ":", "\n", "            ", "x", "=", "layers", ".", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "\"same\"", ")", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "layers", ".", "AveragePooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "\"same\"", ")", "(", "x", ")", "\n", "", "x", "=", "layers", ".", "Conv2D", "(", "filters", "=", "512", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "True", ",", "bias_initializer", "=", "\"zeros\"", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_conv8\"", ")", "(", "x", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "\"output_8\"", ")", "(", "x", ")", "\n", "", "x", "=", "layers", ".", "Conv2D", "(", "filters", "=", "512", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "True", ",", "bias_initializer", "=", "\"zeros\"", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_conv9\"", ")", "(", "x", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "\"output_9\"", ")", "(", "x", ")", "\n", "", "x", "=", "layers", ".", "Conv2D", "(", "filters", "=", "512", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "True", ",", "bias_initializer", "=", "\"zeros\"", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_conv10\"", ")", "(", "x", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "\"output_10\"", ")", "(", "x", ")", "\n", "", "if", "self", ".", "pool", "==", "\"max\"", ":", "\n", "            ", "x", "=", "layers", ".", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "\"same\"", ")", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "layers", ".", "AveragePooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "\"same\"", ")", "(", "x", ")", "\n", "", "x", "=", "layers", ".", "Conv2D", "(", "filters", "=", "512", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "True", ",", "bias_initializer", "=", "\"zeros\"", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_conv11\"", ")", "(", "x", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "\"output_11\"", ")", "(", "x", ")", "\n", "", "x", "=", "layers", ".", "Conv2D", "(", "filters", "=", "512", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "True", ",", "bias_initializer", "=", "\"zeros\"", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_conv12\"", ")", "(", "x", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "\"output_12\"", ")", "(", "x", ")", "\n", "", "x", "=", "layers", ".", "Conv2D", "(", "filters", "=", "512", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "True", ",", "bias_initializer", "=", "\"zeros\"", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_conv13\"", ")", "(", "x", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "\"output_13\"", ")", "(", "x", ")", "\n", "", "if", "self", ".", "pool", "==", "\"max\"", ":", "\n", "            ", "x", "=", "layers", ".", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "\"same\"", ")", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "layers", ".", "AveragePooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "\"same\"", ")", "(", "x", ")", "\n", "", "x", "=", "layers", ".", "Flatten", "(", ")", "(", "x", ")", "\n", "x", "=", "layers", ".", "Dense", "(", "units", "=", "self", ".", "output_classes", ",", "use_bias", "=", "True", ",", "bias_initializer", "=", "\"zeros\"", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "activation", "=", "None", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_dense2\"", ")", "(", "x", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"softmax\"", ",", "name", "=", "\"output_15\"", ")", "(", "x", ")", "\n", "", "model", "=", "models", ".", "Model", "(", "inputs", ",", "x", ",", "name", "=", "\"VGG-16\"", ")", "\n", "tensors", "=", "[", "]", "\n", "for", "layer", "in", "range", "(", "len", "(", "model", ".", "layers", ")", ")", ":", "\n", "            ", "if", "\"tensor\"", "in", "model", ".", "layers", "[", "layer", "]", ".", "name", ":", "\n", "                ", "tensors", ".", "append", "(", "layer", ")", "\n", "", "", "return", "model", ",", "tensors", "\n", "\n"]], "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.models.VGG19.__init__": [[204, 212], ["tensorflow.keras.initializers.VarianceScaling"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "shape", ",", "pool", "=", "\"max\"", ",", "batchnorm", "=", "False", ",", "decay", "=", "1e-4", ",", "output_classes", "=", "100", ",", "activation", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "output_classes", "=", "output_classes", "\n", "self", ".", "shape", "=", "shape", "\n", "self", ".", "pool", "=", "pool", "\n", "self", ".", "decay", "=", "decay", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "batchnorm", "=", "batchnorm", "\n", "self", ".", "initializer", "=", "tf", ".", "keras", ".", "initializers", ".", "VarianceScaling", "(", "scale", "=", "2.0", ",", "mode", "=", "\"fan_avg\"", ",", "distribution", "=", "\"normal\"", ")", "\n", "", "def", "build", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.models.VGG19.build": [[212, 311], ["tensorflow.keras.layers.Input", "tensorflow.keras.models.Model", "range", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.MaxPooling2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.MaxPooling2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.MaxPooling2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.MaxPooling2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.MaxPooling2D", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Dense", "len", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensors.append", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2"], "methods", ["None"], ["", "def", "build", "(", "self", ")", ":", "\n", "        ", "inputs", "=", "layers", ".", "Input", "(", "shape", "=", "self", ".", "shape", ",", "name", "=", "\"output_0\"", ")", "\n", "x", "=", "layers", ".", "Conv2D", "(", "filters", "=", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "True", ",", "bias_initializer", "=", "\"zeros\"", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_conv1\"", ")", "(", "inputs", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "\"output_1\"", ")", "(", "x", ")", "\n", "", "x", "=", "layers", ".", "Conv2D", "(", "filters", "=", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "True", ",", "bias_initializer", "=", "\"zeros\"", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_conv2\"", ")", "(", "x", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "\"output_2\"", ")", "(", "x", ")", "\n", "", "x", "=", "layers", ".", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "\"same\"", ")", "(", "x", ")", "\n", "x", "=", "layers", ".", "Conv2D", "(", "filters", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "True", ",", "bias_initializer", "=", "\"zeros\"", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_conv3\"", ")", "(", "x", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "\"output_3\"", ")", "(", "x", ")", "\n", "", "x", "=", "layers", ".", "Conv2D", "(", "filters", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "True", ",", "bias_initializer", "=", "\"zeros\"", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_conv4\"", ")", "(", "x", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "\"output_4\"", ")", "(", "x", ")", "\n", "", "x", "=", "layers", ".", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "\"same\"", ")", "(", "x", ")", "\n", "x", "=", "layers", ".", "Conv2D", "(", "filters", "=", "256", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "True", ",", "bias_initializer", "=", "\"zeros\"", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_conv5\"", ")", "(", "x", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "\"output_5\"", ")", "(", "x", ")", "\n", "", "x", "=", "layers", ".", "Conv2D", "(", "filters", "=", "256", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "True", ",", "bias_initializer", "=", "\"zeros\"", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_conv6\"", ")", "(", "x", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "\"output_6\"", ")", "(", "x", ")", "\n", "", "x", "=", "layers", ".", "Conv2D", "(", "filters", "=", "256", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "True", ",", "bias_initializer", "=", "\"zeros\"", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_conv7\"", ")", "(", "x", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "\"output_7\"", ")", "(", "x", ")", "\n", "", "x", "=", "layers", ".", "Conv2D", "(", "filters", "=", "256", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "True", ",", "bias_initializer", "=", "\"zeros\"", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_conv8\"", ")", "(", "x", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "\"output_8\"", ")", "(", "x", ")", "\n", "", "x", "=", "layers", ".", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "\"same\"", ")", "(", "x", ")", "\n", "x", "=", "layers", ".", "Conv2D", "(", "filters", "=", "512", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "True", ",", "bias_initializer", "=", "\"zeros\"", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_conv9\"", ")", "(", "x", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "\"output_9\"", ")", "(", "x", ")", "\n", "", "x", "=", "layers", ".", "Conv2D", "(", "filters", "=", "512", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "True", ",", "bias_initializer", "=", "\"zeros\"", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_conv10\"", ")", "(", "x", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "\"output_10\"", ")", "(", "x", ")", "\n", "", "x", "=", "layers", ".", "Conv2D", "(", "filters", "=", "512", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "True", ",", "bias_initializer", "=", "\"zeros\"", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_conv11\"", ")", "(", "x", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "\"output_11\"", ")", "(", "x", ")", "\n", "", "x", "=", "layers", ".", "Conv2D", "(", "filters", "=", "512", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "True", ",", "bias_initializer", "=", "\"zeros\"", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_conv12\"", ")", "(", "x", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "\"output_12\"", ")", "(", "x", ")", "\n", "", "x", "=", "layers", ".", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "\"same\"", ")", "(", "x", ")", "\n", "x", "=", "layers", ".", "Conv2D", "(", "filters", "=", "512", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "True", ",", "bias_initializer", "=", "\"zeros\"", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_conv13\"", ")", "(", "x", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "\"output_13\"", ")", "(", "x", ")", "\n", "", "x", "=", "layers", ".", "Conv2D", "(", "filters", "=", "512", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "True", ",", "bias_initializer", "=", "\"zeros\"", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_conv14\"", ")", "(", "x", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "\"output_14\"", ")", "(", "x", ")", "\n", "", "x", "=", "layers", ".", "Conv2D", "(", "filters", "=", "512", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "True", ",", "bias_initializer", "=", "\"zeros\"", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_conv15\"", ")", "(", "x", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "\"output_15\"", ")", "(", "x", ")", "\n", "", "x", "=", "layers", ".", "Conv2D", "(", "filters", "=", "512", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "True", ",", "bias_initializer", "=", "\"zeros\"", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_conv16\"", ")", "(", "x", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "\"output_16\"", ")", "(", "x", ")", "\n", "", "x", "=", "layers", ".", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "\"same\"", ")", "(", "x", ")", "\n", "x", "=", "layers", ".", "Flatten", "(", ")", "(", "x", ")", "\n", "x", "=", "layers", ".", "Dense", "(", "units", "=", "self", ".", "output_classes", ",", "use_bias", "=", "True", ",", "bias_initializer", "=", "\"zeros\"", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "activation", "=", "None", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_dense2\"", ")", "(", "x", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"softmax\"", ",", "name", "=", "\"output_18\"", ")", "(", "x", ")", "\n", "", "model", "=", "models", ".", "Model", "(", "inputs", ",", "x", ",", "name", "=", "\"VGG-19\"", ")", "\n", "tensors", "=", "[", "]", "\n", "for", "layer", "in", "range", "(", "len", "(", "model", ".", "layers", ")", ")", ":", "\n", "            ", "if", "\"tensor\"", "in", "model", ".", "layers", "[", "layer", "]", ".", "name", ":", "\n", "                ", "tensors", ".", "append", "(", "layer", ")", "\n", "", "", "return", "model", ",", "tensors", "\n", "\n"]], "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.models.Resnet18.__init__": [[313, 320], ["tensorflow.keras.initializers.VarianceScaling"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "shape", ",", "batchnorm", "=", "False", ",", "decay", "=", "1e-4", ",", "output_classes", "=", "200", ",", "activation", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "output_classes", "=", "output_classes", "\n", "self", ".", "shape", "=", "shape", "\n", "self", ".", "decay", "=", "decay", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "batchnorm", "=", "batchnorm", "\n", "self", ".", "initializer", "=", "tf", ".", "keras", ".", "initializers", ".", "VarianceScaling", "(", "scale", "=", "2.0", ",", "mode", "=", "\"fan_avg\"", ",", "distribution", "=", "\"normal\"", ")", "\n", "", "def", "build", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.models.Resnet18.build": [[320, 476], ["tensorflow.keras.layers.Input", "tensorflow.keras.models.Model", "range", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.AveragePooling2D", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Dense", "len", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensors.append", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2"], "methods", ["None"], ["", "def", "build", "(", "self", ")", ":", "\n", "        ", "inputs", "=", "layers", ".", "Input", "(", "shape", "=", "self", ".", "shape", ",", "name", "=", "\"output_0\"", ")", "\n", "x", "=", "layers", ".", "Conv2D", "(", "filters", "=", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "False", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_conv1\"", ")", "(", "inputs", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "\"output_1\"", ")", "(", "x", ")", "\n", "", "shortcut", "=", "x", "# layer 1: block 1", "\n", "stride", "=", "1", "\n", "x", "=", "layers", ".", "Conv2D", "(", "filters", "=", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "strides", "=", "(", "stride", ",", "stride", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "False", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_conv2\"", ")", "(", "x", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "\"output_2\"", ")", "(", "x", ")", "\n", "", "x", "=", "layers", ".", "Conv2D", "(", "filters", "=", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "False", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_conv3\"", ")", "(", "x", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "x", ".", "shape", "[", "1", ":", "]", "!=", "shortcut", ".", "shape", "[", "1", ":", "]", "or", "stride", "!=", "1", ":", "\n", "            ", "shortcut", "=", "layers", ".", "Conv2D", "(", "filters", "=", "64", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "\"valid\"", ",", "strides", "=", "(", "stride", ",", "stride", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "False", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_shortcut_conv1\"", ")", "(", "shortcut", ")", "\n", "", "if", "self", ".", "batchnorm", ":", "\n", "            ", "shortcut", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "shortcut", ",", "training", "=", "True", ")", "\n", "", "x", "=", "x", "+", "shortcut", "\n", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "\"output_3\"", ")", "(", "x", ")", "\n", "", "shortcut", "=", "x", "# layer 2: block 2", "\n", "stride", "=", "1", "\n", "x", "=", "layers", ".", "Conv2D", "(", "filters", "=", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "strides", "=", "(", "stride", ",", "stride", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "False", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_conv4\"", ")", "(", "x", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "\"output_4\"", ")", "(", "x", ")", "\n", "", "x", "=", "layers", ".", "Conv2D", "(", "filters", "=", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "False", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_conv5\"", ")", "(", "x", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "x", ".", "shape", "[", "1", ":", "]", "!=", "shortcut", ".", "shape", "[", "1", ":", "]", "or", "stride", "!=", "1", ":", "\n", "            ", "shortcut", "=", "layers", ".", "Conv2D", "(", "filters", "=", "64", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "\"valid\"", ",", "strides", "=", "(", "stride", ",", "stride", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "False", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_shortcut_conv2\"", ")", "(", "shortcut", ")", "\n", "", "if", "self", ".", "batchnorm", ":", "\n", "            ", "shortcut", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "shortcut", ",", "training", "=", "True", ")", "\n", "", "x", "=", "x", "+", "shortcut", "\n", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "\"output_5\"", ")", "(", "x", ")", "\n", "", "shortcut", "=", "x", "# layer 2: block 1", "\n", "stride", "=", "2", "\n", "x", "=", "layers", ".", "Conv2D", "(", "filters", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "strides", "=", "(", "stride", ",", "stride", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "False", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_conv6\"", ")", "(", "x", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "\"output_6\"", ")", "(", "x", ")", "\n", "", "x", "=", "layers", ".", "Conv2D", "(", "filters", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "False", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_conv7\"", ")", "(", "x", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "x", ".", "shape", "[", "1", ":", "]", "!=", "shortcut", ".", "shape", "[", "1", ":", "]", "or", "stride", "!=", "1", ":", "\n", "            ", "shortcut", "=", "layers", ".", "Conv2D", "(", "filters", "=", "128", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "\"valid\"", ",", "strides", "=", "(", "stride", ",", "stride", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "False", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_shortcut_conv3\"", ")", "(", "shortcut", ")", "\n", "", "if", "self", ".", "batchnorm", ":", "\n", "            ", "shortcut", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "shortcut", ",", "training", "=", "True", ")", "\n", "", "x", "=", "x", "+", "shortcut", "\n", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "\"output_7\"", ")", "(", "x", ")", "\n", "", "shortcut", "=", "x", "# layer 2: block 2:", "\n", "stride", "=", "1", "\n", "x", "=", "layers", ".", "Conv2D", "(", "filters", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "strides", "=", "(", "stride", ",", "stride", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "False", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_conv8\"", ")", "(", "x", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "\"output_8\"", ")", "(", "x", ")", "\n", "", "x", "=", "layers", ".", "Conv2D", "(", "filters", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "False", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_conv9\"", ")", "(", "x", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "x", ".", "shape", "[", "1", ":", "]", "!=", "shortcut", ".", "shape", "[", "1", ":", "]", "or", "stride", "!=", "1", ":", "\n", "            ", "shortcut", "=", "layers", ".", "Conv2D", "(", "filters", "=", "128", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "\"valid\"", ",", "strides", "=", "(", "stride", ",", "stride", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "False", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_shortcut_conv4\"", ")", "(", "shortcut", ")", "\n", "", "if", "self", ".", "batchnorm", ":", "\n", "            ", "shortcut", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "shortcut", ",", "training", "=", "True", ")", "\n", "", "x", "=", "x", "+", "shortcut", "\n", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "\"output_9\"", ")", "(", "x", ")", "\n", "", "shortcut", "=", "x", "# layer 3: block 1:", "\n", "stride", "=", "2", "\n", "x", "=", "layers", ".", "Conv2D", "(", "filters", "=", "256", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "strides", "=", "(", "stride", ",", "stride", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "False", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_conv10\"", ")", "(", "x", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "\"output_10\"", ")", "(", "x", ")", "\n", "", "x", "=", "layers", ".", "Conv2D", "(", "filters", "=", "256", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "False", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_conv11\"", ")", "(", "x", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "x", ".", "shape", "[", "1", ":", "]", "!=", "shortcut", ".", "shape", "[", "1", ":", "]", "or", "stride", "!=", "1", ":", "\n", "            ", "shortcut", "=", "layers", ".", "Conv2D", "(", "filters", "=", "256", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "\"valid\"", ",", "strides", "=", "(", "stride", ",", "stride", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "False", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_shortcut_conv5\"", ")", "(", "shortcut", ")", "\n", "", "if", "self", ".", "batchnorm", ":", "\n", "            ", "shortcut", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "shortcut", ",", "training", "=", "True", ")", "\n", "", "x", "=", "x", "+", "shortcut", "\n", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "\"output_11\"", ")", "(", "x", ")", "\n", "", "shortcut", "=", "x", "# layer 3: block 2:", "\n", "stride", "=", "1", "\n", "x", "=", "layers", ".", "Conv2D", "(", "filters", "=", "256", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "strides", "=", "(", "stride", ",", "stride", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "False", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_conv12\"", ")", "(", "x", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "\"output_12\"", ")", "(", "x", ")", "\n", "", "x", "=", "layers", ".", "Conv2D", "(", "filters", "=", "256", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "False", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_conv13\"", ")", "(", "x", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "x", ".", "shape", "[", "1", ":", "]", "!=", "shortcut", ".", "shape", "[", "1", ":", "]", "or", "stride", "!=", "1", ":", "\n", "            ", "shortcut", "=", "layers", ".", "Conv2D", "(", "filters", "=", "256", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "\"valid\"", ",", "strides", "=", "(", "stride", ",", "stride", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "False", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_shortcut_conv6\"", ")", "(", "shortcut", ")", "\n", "", "if", "self", ".", "batchnorm", ":", "\n", "            ", "shortcut", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "shortcut", ",", "training", "=", "True", ")", "\n", "", "x", "=", "x", "+", "shortcut", "\n", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "\"output_13\"", ")", "(", "x", ")", "\n", "", "shortcut", "=", "x", "# layer 4: block 1:", "\n", "stride", "=", "2", "\n", "x", "=", "layers", ".", "Conv2D", "(", "filters", "=", "512", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "strides", "=", "(", "stride", ",", "stride", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "False", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_conv14\"", ")", "(", "x", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "\"output_14\"", ")", "(", "x", ")", "\n", "", "x", "=", "layers", ".", "Conv2D", "(", "filters", "=", "512", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "False", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_conv15\"", ")", "(", "x", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "x", ".", "shape", "[", "1", ":", "]", "!=", "shortcut", ".", "shape", "[", "1", ":", "]", "or", "stride", "!=", "1", ":", "\n", "            ", "shortcut", "=", "layers", ".", "Conv2D", "(", "filters", "=", "512", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "\"valid\"", ",", "strides", "=", "(", "stride", ",", "stride", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "False", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_shortcut_conv7\"", ")", "(", "shortcut", ")", "\n", "", "if", "self", ".", "batchnorm", ":", "\n", "            ", "shortcut", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "shortcut", ",", "training", "=", "True", ")", "\n", "", "x", "=", "x", "+", "shortcut", "\n", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "\"output_15\"", ")", "(", "x", ")", "\n", "", "shortcut", "=", "x", "# layer 4: block 2:", "\n", "stride", "=", "1", "\n", "x", "=", "layers", ".", "Conv2D", "(", "filters", "=", "512", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "strides", "=", "(", "stride", ",", "stride", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "False", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_conv16\"", ")", "(", "x", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "\"output_16\"", ")", "(", "x", ")", "\n", "", "x", "=", "layers", ".", "Conv2D", "(", "filters", "=", "512", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "False", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_conv17\"", ")", "(", "x", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "x", ".", "shape", "[", "1", ":", "]", "!=", "shortcut", ".", "shape", "[", "1", ":", "]", "or", "stride", "!=", "1", ":", "\n", "            ", "shortcut", "=", "layers", ".", "Conv2D", "(", "filters", "=", "512", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "\"valid\"", ",", "strides", "=", "(", "stride", ",", "stride", ")", ",", "activation", "=", "None", ",", "use_bias", "=", "False", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_shortcut_conv8\"", ")", "(", "shortcut", ")", "\n", "", "if", "self", ".", "batchnorm", ":", "\n", "            ", "shortcut", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "shortcut", ",", "training", "=", "True", ")", "\n", "", "x", "=", "x", "+", "shortcut", "\n", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "\"output_17\"", ")", "(", "x", ")", "\n", "", "x", "=", "layers", ".", "AveragePooling2D", "(", "pool_size", "=", "(", "8", ",", "8", ")", ",", "padding", "=", "\"valid\"", ")", "(", "x", ")", "\n", "x", "=", "layers", ".", "Flatten", "(", ")", "(", "x", ")", "\n", "x", "=", "layers", ".", "Dense", "(", "units", "=", "self", ".", "output_classes", ",", "use_bias", "=", "False", ",", "kernel_initializer", "=", "self", ".", "initializer", ",", "activation", "=", "None", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "self", ".", "decay", ")", ",", "name", "=", "\"tensor_dense1\"", ")", "(", "x", ")", "\n", "if", "self", ".", "batchnorm", ":", "\n", "            ", "x", "=", "layers", ".", "BatchNormalization", "(", ")", "(", "inputs", "=", "x", ",", "training", "=", "True", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "layers", ".", "Activation", "(", "\"softmax\"", ",", "name", "=", "\"output_18\"", ")", "(", "x", ")", "\n", "", "model", "=", "models", ".", "Model", "(", "inputs", ",", "x", ",", "name", "=", "\"ResNet-18\"", ")", "\n", "tensors", "=", "[", "]", "\n", "for", "layer", "in", "range", "(", "len", "(", "model", ".", "layers", ")", ")", ":", "\n", "            ", "if", "\"tensor\"", "in", "model", ".", "layers", "[", "layer", "]", ".", "name", ":", "\n", "                ", "tensors", ".", "append", "(", "layer", ")", "\n", "", "", "return", "model", ",", "tensors", "", "", "", ""]], "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.models.get_model": [[4, 15], ["architecture.lower", "models.Lenet300100.build", "architecture.lower", "models.Lenet5.build", "architecture.lower", "models.VGG16.build", "architecture.lower", "models.VGG19.build", "architecture.lower", "models.Resnet18.build", "models.Lenet300100", "models.Lenet5", "models.VGG16", "models.VGG19", "models.Resnet18"], "function", ["home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.models.Resnet18.build", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.models.Resnet18.build", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.models.Resnet18.build", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.models.Resnet18.build", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.models.Resnet18.build"], ["def", "get_model", "(", "shape", ",", "architecture", ",", "**", "kwargs", ")", ":", "\n", "  ", "if", "architecture", ".", "lower", "(", ")", "==", "\"lenet300100\"", ":", "\n", "    ", "return", "Lenet300100", "(", "shape", "=", "shape", ",", "**", "kwargs", ")", ".", "build", "(", ")", "\n", "", "if", "architecture", ".", "lower", "(", ")", "==", "\"lenet5\"", ":", "\n", "    ", "return", "Lenet5", "(", "shape", "=", "shape", ",", "**", "kwargs", ")", ".", "build", "(", ")", "\n", "", "if", "architecture", ".", "lower", "(", ")", "==", "\"vgg16\"", ":", "\n", "    ", "return", "VGG16", "(", "shape", "=", "shape", ",", "**", "kwargs", ")", ".", "build", "(", ")", "\n", "", "if", "architecture", ".", "lower", "(", ")", "==", "\"vgg19\"", ":", "\n", "    ", "return", "VGG19", "(", "shape", "=", "shape", ",", "**", "kwargs", ")", ".", "build", "(", ")", "\n", "", "if", "architecture", ".", "lower", "(", ")", "==", "\"resnet18\"", ":", "\n", "    ", "return", "Resnet18", "(", "shape", "=", "shape", ",", "**", "kwargs", ")", ".", "build", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.main.main": [[46, 83], ["os.path.join", "os.path.join", "logging.basicConfig", "data.get_data", "int", "models.get_model", "tensorflow.keras.optimizers.schedules.PiecewiseConstantDecay", "model.compile", "numpy.arange", "pruning.Pruner", "pruning.Pruner.prune", "callbacks.LogCallback", "effective_masks.effective_masks_custom", "effective_masks.effective_masks_synflow", "logging.info", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "callbacks.SubnetworkCallback", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "model.fit", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "round", "os.path.join", "len", "len", "range", "tensorflow.keras.optimizers.SGD", "os.path.join", "model.layers[].get_weights", "utils.get_direct_sparsity", "utils.get_direct_sparsity", "utils.get_direct_sparsity", "os.path.join", "datagen.flow", "utils.get_overall_direct_sparsity", "utils.get_overall_direct_sparsity", "os.path.join", "os.path.join", "os.path.join", "numpy.prod", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "len", "len", "model.layers[].get_weights"], "function", ["home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.data.get_data", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.models.get_model", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.Pruner.prune", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.effective_masks.effective_masks_custom", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.effective_masks.effective_masks_synflow", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.utils.get_direct_sparsity", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.utils.get_direct_sparsity", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.utils.get_direct_sparsity", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.utils.get_overall_direct_sparsity", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.utils.get_overall_direct_sparsity"], ["", "def", "main", "(", "args", ")", ":", "\n", "  ", "target_compression", "=", "10", "**", "args", ".", "com_exp", "if", "args", ".", "com_exp", "is", "not", "None", "else", "1.", "/", "(", "1", "-", "args", ".", "target_sparsity", ")", "\n", "extension", "=", "f'{args.sample}_{round(target_compression)}_'", "\n", "path_to_dense", "=", "os", ".", "path", ".", "join", "(", "args", ".", "out_path", ",", "args", ".", "architecture", ",", "'dense'", ")", "\n", "args", ".", "out_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "out_path", ",", "args", ".", "architecture", ",", "args", ".", "pruner", ",", "args", ".", "pruning_type", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "out_path", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "args", ".", "out_path", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "path_to_dense", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "path_to_dense", ")", "\n", "", "logging", ".", "basicConfig", "(", "filename", "=", "os", ".", "path", ".", "join", "(", "args", ".", "out_path", ",", "extension", "+", "'info.log'", ")", ",", "level", "=", "logging", ".", "INFO", ",", "filemode", "=", "'w'", ")", "\n", "datagen", ",", "train_X", ",", "train_y", ",", "test_X", ",", "test_y", "=", "data", ".", "get_data", "(", "config", "[", "'data'", "]", ",", "path_to_data", "=", "args", ".", "path_to_data", ")", "\n", "epochs", "=", "int", "(", "config", "[", "'batch_size_train'", "]", "*", "config", "[", "'iterations'", "]", "/", "len", "(", "train_X", ")", ")", "\n", "model", ",", "tensors", "=", "models", ".", "get_model", "(", "shape", "=", "train_X", "[", "0", "]", ".", "shape", ",", "architecture", "=", "args", ".", "architecture", ",", "batchnorm", "=", "config", "[", "'batchnorm'", "]", ",", "decay", "=", "config", "[", "'weight_decay'", "]", ",", "output_classes", "=", "len", "(", "train_y", "[", "0", "]", ")", ")", "\n", "values", "=", "[", "config", "[", "'lr'", "]", "*", "(", "0.1", "**", "i", ")", "for", "i", "in", "range", "(", "len", "(", "config", "[", "'lr_decay'", "]", ")", "+", "1", ")", "]", "\n", "learningrate", "=", "tf", ".", "keras", ".", "optimizers", ".", "schedules", ".", "PiecewiseConstantDecay", "(", "config", "[", "'lr_decay'", "]", ",", "values", ")", "\n", "model", ".", "compile", "(", "optimizer", "=", "tf", ".", "keras", ".", "optimizers", ".", "SGD", "(", "learning_rate", "=", "learningrate", ",", "momentum", "=", "config", "[", "'momentum'", "]", ")", ",", "loss", "=", "'categorical_crossentropy'", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "log_list", "=", "np", ".", "arange", "(", "0", ",", "config", "[", "'iterations'", "]", ",", "1000", ")", "\n", "pruner", "=", "pruning", ".", "Pruner", "(", "args", ".", "pruner", ")", "\n", "masks", "=", "pruner", ".", "prune", "(", "model", ",", "tensors", ",", "1", "-", "1.", "/", "target_compression", ",", "args", ".", "pruning_type", ",", "train_X", "=", "train_X", ",", "train_y", "=", "train_y", ",", "out_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "out_path", ",", "extension", ")", ",", "config", "=", "config", ",", "sample", "=", "args", ".", "sample", ",", "path_to_dense", "=", "path_to_dense", ")", "\n", "inits", "=", "[", "model", ".", "layers", "[", "layer", "]", ".", "get_weights", "(", ")", "[", "0", "]", "for", "layer", "in", "tensors", "]", "\n", "log_cb", "=", "callbacks", ".", "LogCallback", "(", "model", ",", "tensors", ",", "masks", ",", "log_list", ",", "(", "test_X", ",", "test_y", ")", ")", "\n", "fit_callbacks", "=", "[", "callbacks", ".", "SubnetworkCallback", "(", "model", ",", "tensors", ",", "masks", ")", ",", "log_cb", "]", "\n", "eff_masks_custom", "=", "effective_masks_custom", "(", "model", ".", "name", ",", "masks", ")", "\n", "eff_masks_synflow", "=", "effective_masks_synflow", "(", "model", ",", "tensors", ",", "masks", ")", "\n", "logging", ".", "info", "(", "f'<main> [direct sparsity: {get_overall_direct_sparsity(masks):.6f}][effective sparsity: {get_overall_direct_sparsity(eff_masks_synflow):.6f}][epochs to train: {epochs}][iterations to train: {config[\"iterations\"]}][pruner: {args.pruner}][sample: {args.sample}]'", ")", "\n", "if", "args", ".", "save", "and", "args", ".", "pruner", "!=", "'dense'", ":", "\n", "    ", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "args", ".", "out_path", ",", "extension", ")", "+", "'sparsities_effective_synflow.npy'", ",", "get_direct_sparsity", "(", "eff_masks_synflow", ")", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "args", ".", "out_path", ",", "extension", ")", "+", "'sparsities_effective_custom.npy'", ",", "get_direct_sparsity", "(", "eff_masks_custom", ")", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "args", ".", "out_path", ",", "extension", ")", "+", "'sparsities_direct.npy'", ",", "get_direct_sparsity", "(", "masks", ")", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "path_to_dense", ",", "'counts.npy'", ")", ",", "[", "np", ".", "prod", "(", "model", ".", "layers", "[", "layer", "]", ".", "get_weights", "(", ")", "[", "0", "]", ".", "shape", ")", "for", "layer", "in", "tensors", "]", ")", "\n", "", "if", "args", ".", "train", ":", "\n", "    ", "model", ".", "fit", "(", "datagen", ".", "flow", "(", "train_X", ",", "train_y", ",", "batch_size", "=", "config", "[", "'batch_size_train'", "]", ")", ",", "steps_per_epoch", "=", "len", "(", "train_X", ")", "//", "config", "[", "'batch_size_train'", "]", ",", "epochs", "=", "epochs", ",", "shuffle", "=", "True", ",", "verbose", "=", "False", ",", "validation_data", "=", "(", "test_X", ",", "test_y", ")", ",", "callbacks", "=", "fit_callbacks", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "args", ".", "out_path", ",", "extension", ")", "+", "'accuracies.npy'", ",", "log_cb", ".", "accuracies", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "args", ".", "out_path", ",", "extension", ")", "+", "'losses.npy'", ",", "log_cb", ".", "losses", ")", "\n", "", "if", "args", ".", "save", "and", "args", ".", "train", "and", "args", ".", "pruner", "==", "'dense'", ":", "\n", "    ", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "args", ".", "out_path", ",", "extension", ")", "+", "'inits.npy'", ",", "inits", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "args", ".", "out_path", ",", "extension", ")", "+", "'final_weights.npy'", ",", "log_cb", ".", "final_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.tinyimagenet.get_annotations_map": [[7, 16], ["open", "open.read", "valAnnotationsFile.read.splitlines", "line.strip().split", "line.strip"], "function", ["None"], ["def", "get_annotations_map", "(", "path", ")", ":", "\n", "\t", "valAnnotationsPath", "=", "path", "+", "'/val/val_annotations.txt'", "\n", "valAnnotationsFile", "=", "open", "(", "valAnnotationsPath", ",", "'r'", ")", "\n", "valAnnotationsContents", "=", "valAnnotationsFile", ".", "read", "(", ")", "\n", "valAnnotations", "=", "{", "}", "\n", "for", "line", "in", "valAnnotationsContents", ".", "splitlines", "(", ")", ":", "\n", "\t\t", "pieces", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "valAnnotations", "[", "pieces", "[", "0", "]", "]", "=", "pieces", "[", "1", "]", "\n", "", "return", "valAnnotations", "\n", "\n"]], "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.tinyimagenet.load_images": [[17, 56], ["numpy.zeros", "numpy.zeros", "os.listdir", "tinyimagenet.get_annotations_map", "numpy.zeros", "numpy.zeros", "os.listdir", "os.path.join", "os.listdir", "os.path.join", "numpy.array", "annotations.keys", "os.path.join", "numpy.array", "PIL.Image.open", "len", "numpy.array", "numpy.transpose", "PIL.Image.open", "len", "numpy.array", "numpy.transpose", "os.path.join", "numpy.shape", "numpy.shape"], "function", ["home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.tinyimagenet.get_annotations_map"], ["", "def", "load_images", "(", "path", ",", "num_classes", ")", ":", "\n", "    ", "X_train", "=", "np", ".", "zeros", "(", "[", "num_classes", "*", "500", ",", "3", ",", "64", ",", "64", "]", ",", "dtype", "=", "'uint8'", ")", "\n", "y_train", "=", "np", ".", "zeros", "(", "[", "num_classes", "*", "500", "]", ",", "dtype", "=", "'uint8'", ")", "\n", "trainPath", "=", "path", "+", "'/train'", "\n", "i", "=", "0", "\n", "j", "=", "0", "\n", "annotations", "=", "{", "}", "\n", "for", "sChild", "in", "os", ".", "listdir", "(", "trainPath", ")", ":", "\n", "        ", "sChildPath", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "join", "(", "trainPath", ",", "sChild", ")", ",", "'images'", ")", "\n", "annotations", "[", "sChild", "]", "=", "j", "\n", "for", "c", "in", "os", ".", "listdir", "(", "sChildPath", ")", ":", "\n", "            ", "X", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "sChildPath", ",", "c", ")", ")", ")", "\n", "if", "len", "(", "np", ".", "shape", "(", "X", ")", ")", "==", "2", ":", "\n", "                ", "X_train", "[", "i", "]", "=", "np", ".", "array", "(", "[", "X", ",", "X", ",", "X", "]", ")", "\n", "", "else", ":", "\n", "                ", "X_train", "[", "i", "]", "=", "np", ".", "transpose", "(", "X", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "", "y_train", "[", "i", "]", "=", "j", "\n", "i", "+=", "1", "\n", "", "j", "+=", "1", "\n", "if", "(", "j", ">=", "num_classes", ")", ":", "\n", "            ", "break", "\n", "", "", "val_annotations_map", "=", "get_annotations_map", "(", "path", ")", "\n", "X_test", "=", "np", ".", "zeros", "(", "[", "num_classes", "*", "50", ",", "3", ",", "64", ",", "64", "]", ",", "dtype", "=", "'uint8'", ")", "\n", "y_test", "=", "np", ".", "zeros", "(", "[", "num_classes", "*", "50", "]", ",", "dtype", "=", "'uint8'", ")", "\n", "i", "=", "0", "\n", "testPath", "=", "path", "+", "'/val/images'", "\n", "for", "sChild", "in", "os", ".", "listdir", "(", "testPath", ")", ":", "\n", "        ", "if", "val_annotations_map", "[", "sChild", "]", "in", "annotations", ".", "keys", "(", ")", ":", "\n", "            ", "sChildPath", "=", "os", ".", "path", ".", "join", "(", "testPath", ",", "sChild", ")", "\n", "X", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "sChildPath", ")", ")", "\n", "if", "len", "(", "np", ".", "shape", "(", "X", ")", ")", "==", "2", ":", "\n", "                ", "X_test", "[", "i", "]", "=", "np", ".", "array", "(", "[", "X", ",", "X", ",", "X", "]", ")", "\n", "", "else", ":", "\n", "                ", "X_test", "[", "i", "]", "=", "np", ".", "transpose", "(", "X", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "", "y_test", "[", "i", "]", "=", "annotations", "[", "val_annotations_map", "[", "sChild", "]", "]", "\n", "i", "+=", "1", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "", "", "return", "X_train", ",", "y_train", ",", "X_test", ",", "y_test", "", "", ""]], "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.visualization.accuracies": [[30, 123], ["numpy.load", "numpy.array", "ax.axhline", "ax.fill_between", "ax.set_title", "ax.set_xlabel", "ax.set_ylabel", "ax.tick_params", "ax.legend", "ax.set_xscale", "ax.grid", "fig.tight_layout", "matplotlib.savefig", "set", "os.path.join", "os.listdir", "sorted", "os.path.join", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.min", "numpy.mean", "numpy.max", "enumerate", "ax.plot", "ax.fill_between", "enumerate", "ax.scatter", "ax.plot", "ax.fill_between", "matplotlib.xlim", "matplotlib.lines.Line2D", "matplotlib.lines.Line2D", "matplotlib.lines.Line2D", "os.path.join", "list", "sorted", "len", "range", "mins.append", "means.append", "maxs.append", "numpy.array", "numpy.array", "numpy.array", "matplotlib.patches.Patch", "sorted", "len", "range", "mins.append", "means.append", "maxs.append", "numpy.array", "numpy.array", "numpy.array", "os.path.isfile", "int", "numpy.load", "range", "range", "range", "numpy.arange", "len", "range", "numpy.min", "numpy.mean", "numpy.max", "range", "range", "numpy.arange", "len", "range", "numpy.min", "numpy.mean", "numpy.max", "os.path.join", "compressions[].add", "range", "numpy.load", "range", "numpy.load", "range", "range", "range", "os.path.join", "[].argsort", "max", "sum", "len", "min", "curr_accs.append", "[].argsort", "max", "sum", "len", "min", "curr_accs.append", "filename.split", "numpy.load", "os.path.join", "os.path.join", "sum", "sum", "range", "sum", "sum", "range", "numpy.log10", "numpy.where", "curr_accs.append", "curr_accs.append", "min", "numpy.log10", "numpy.where", "curr_accs.append", "curr_accs.append", "min", "os.path.join", "len", "len", "min", "int", "numpy.where", "numpy.where", "min", "int", "numpy.where", "numpy.where", "range", "numpy.array", "range", "numpy.array", "zip", "zip", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["None"], ["def", "accuracies", "(", "args", ")", ":", "\n", "    ", "\"\"\" plots accuracies against effective and direct compression\n    \"\"\"", "\n", "legend_elements", "=", "[", "]", "\n", "compressions", "=", "{", "pruner", ":", "set", "(", "[", "]", ")", "for", "pruner", "in", "args", ".", "pruners_to_display", "}", "\n", "load_prefix", "=", "{", "pruner", ":", "os", ".", "path", ".", "join", "(", "args", ".", "out_path", ",", "args", ".", "architecture", ",", "pruner", ",", "args", ".", "pruning_type", ")", "for", "pruner", "in", "args", ".", "pruners_to_display", "}", "\n", "for", "pruner", "in", "args", ".", "pruners_to_display", ":", "\n", "        ", "for", "filename", "in", "os", ".", "listdir", "(", "load_prefix", "[", "pruner", "]", ")", ":", "\n", "            ", "if", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "load_prefix", "[", "pruner", "]", ",", "filename", ")", ")", "and", "filename", "[", "0", "]", "!=", "'.'", ":", "\n", "                ", "compression", "=", "int", "(", "filename", ".", "split", "(", "'_'", ")", "[", "1", "]", ")", "\n", "if", "'accuracies.npy'", "in", "filename", ":", "\n", "                    ", "compressions", "[", "pruner", "]", ".", "add", "(", "compression", ")", "\n", "", "", "", "", "compressions", "=", "{", "pruner", ":", "sorted", "(", "list", "(", "compressions", "[", "pruner", "]", ")", ")", "for", "pruner", "in", "args", ".", "pruners_to_display", "}", "\n", "counts", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "out_path", ",", "args", ".", "architecture", ",", "'dense'", ",", "'counts.npy'", ")", ")", "\n", "accuracies", "=", "{", "pruner", ":", "np", ".", "array", "(", "[", "[", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "load_prefix", "[", "pruner", "]", ",", "f'{sample}_{compression}_accuracies.npy'", ")", ")", "[", "-", "1", "]", "for", "compression", "in", "compressions", "[", "pruner", "]", "]", "for", "sample", "in", "range", "(", "args", ".", "num_samples", ")", "]", ")", "for", "pruner", "in", "args", ".", "pruners_to_display", "}", "\n", "direct_sparsities", "=", "{", "pruner", ":", "np", ".", "array", "(", "[", "[", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "load_prefix", "[", "pruner", "]", ",", "f'{sample}_{compression}_sparsities_direct.npy'", ")", ")", "for", "compression", "in", "compressions", "[", "pruner", "]", "]", "for", "sample", "in", "range", "(", "args", ".", "num_samples", ")", "]", ")", "for", "pruner", "in", "args", ".", "pruners_to_display", "}", "\n", "effective_sparsities", "=", "{", "pruner", ":", "np", ".", "array", "(", "[", "[", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "load_prefix", "[", "pruner", "]", ",", "f'{sample}_{compression}_sparsities_effective_{args.effective_type}.npy'", ")", ")", "for", "compression", "in", "compressions", "[", "pruner", "]", "]", "for", "sample", "in", "range", "(", "args", ".", "num_samples", ")", "]", ")", "for", "pruner", "in", "args", ".", "pruners_to_display", "}", "\n", "overall_direct_sparsity", "=", "{", "pruner", ":", "np", ".", "array", "(", "[", "[", "sum", "(", "[", "sparsity", "*", "count", "for", "sparsity", ",", "count", "in", "zip", "(", "direct_sparsities", "[", "pruner", "]", "[", "sample", "]", "[", "level", "]", ",", "counts", ")", "]", ")", "/", "sum", "(", "counts", ")", "for", "level", "in", "range", "(", "len", "(", "compressions", "[", "pruner", "]", ")", ")", "]", "for", "sample", "in", "range", "(", "args", ".", "num_samples", ")", "]", ")", "for", "pruner", "in", "args", ".", "pruners_to_display", "}", "\n", "overall_effective_sparsity", "=", "{", "pruner", ":", "np", ".", "array", "(", "[", "[", "sum", "(", "[", "sparsity", "*", "count", "for", "sparsity", ",", "count", "in", "zip", "(", "effective_sparsities", "[", "pruner", "]", "[", "sample", "]", "[", "level", "]", ",", "counts", ")", "]", ")", "/", "sum", "(", "counts", ")", "for", "level", "in", "range", "(", "len", "(", "compressions", "[", "pruner", "]", ")", ")", "]", "for", "sample", "in", "range", "(", "args", ".", "num_samples", ")", "]", ")", "for", "pruner", "in", "args", ".", "pruners_to_display", "}", "\n", "overall_direct_compression", "=", "{", "pruner", ":", "1.", "/", "(", "1", "-", "overall_direct_sparsity", "[", "pruner", "]", ")", "for", "pruner", "in", "args", ".", "pruners_to_display", "}", "\n", "overall_effective_compression", "=", "{", "pruner", ":", "1.", "/", "(", "1", "-", "overall_effective_sparsity", "[", "pruner", "]", ")", "for", "pruner", "in", "args", ".", "pruners_to_display", "}", "\n", "dense", "=", "np", ".", "array", "(", "[", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "out_path", ",", "args", ".", "architecture", ",", "'dense'", ",", "f'{sample}_1_accuracies.npy'", ")", ")", "[", "-", "1", "]", "for", "sample", "in", "range", "(", "args", ".", "num_samples", ")", "]", ")", "\n", "dense_min", ",", "dense_mean", ",", "dense_max", "=", "np", ".", "min", "(", "dense", ")", ",", "np", ".", "mean", "(", "dense", ")", ",", "np", ".", "max", "(", "dense", ")", "\n", "accuracies_direct_sorted", "=", "{", "pruner", ":", "[", "accuracies", "[", "pruner", "]", "[", "sample", "]", "[", "overall_direct_compression", "[", "pruner", "]", "[", "sample", "]", ".", "argsort", "(", ")", "]", "for", "sample", "in", "range", "(", "args", ".", "num_samples", ")", "]", "for", "pruner", "in", "args", ".", "pruners_to_display", "}", "\n", "overall_direct_compression", "=", "{", "pruner", ":", "[", "sorted", "(", "overall_direct_compression", "[", "pruner", "]", "[", "sample", "]", ")", "for", "sample", "in", "range", "(", "args", ".", "num_samples", ")", "]", "for", "pruner", "in", "args", ".", "pruners_to_display", "}", "\n", "ticks", "=", "{", "pruner", ":", "10", "**", "(", "0.05", "*", "np", ".", "arange", "(", "max", "(", "[", "min", "(", "overall_direct_compression", "[", "pruner", "]", "[", "sample", "]", ")", "for", "sample", "in", "range", "(", "args", ".", "num_samples", ")", "]", ")", ",", "20", "*", "np", ".", "log10", "(", "compressions", "[", "pruner", "]", "[", "-", "1", "]", ")", ",", "20", "/", "9", ")", ")", "for", "pruner", "in", "args", ".", "pruners_to_display", "}", "\n", "inf_idxs_direct", "=", "{", "pruner", ":", "[", "np", ".", "where", "(", "np", ".", "array", "(", "overall_direct_compression", "[", "pruner", "]", "[", "sample", "]", ")", ">", "1e20", ")", "[", "0", "]", "[", "0", "]", "if", "sum", "(", "[", "int", "(", "direct_compression", ">", "1e20", ")", "for", "direct_compression", "in", "overall_direct_compression", "[", "pruner", "]", "[", "sample", "]", "]", ")", ">", "0", "else", "len", "(", "overall_direct_compression", "[", "pruner", "]", "[", "sample", "]", ")", "for", "sample", "in", "range", "(", "args", ".", "num_samples", ")", "]", "for", "pruner", "in", "args", ".", "pruners_to_display", "}", "\n", "for", "pruner", "in", "args", ".", "pruners_to_display", ":", "\n", "        ", "means", ",", "mins", ",", "maxs", ",", "start_idx", ",", "end_idx", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "math", ".", "inf", ",", "len", "(", "ticks", "[", "pruner", "]", ")", "\n", "for", "tick_idx", ",", "tick", "in", "enumerate", "(", "ticks", "[", "pruner", "]", ")", ":", "\n", "            ", "curr_accs", "=", "[", "]", "\n", "for", "sample", "in", "range", "(", "args", ".", "num_samples", ")", ":", "\n", "                ", "if", "len", "(", "np", ".", "where", "(", "np", ".", "array", "(", "overall_direct_compression", "[", "pruner", "]", "[", "sample", "]", ")", "<=", "tick", ")", "[", "0", "]", ")", ">", "0", ":", "\n", "                    ", "start", "=", "np", ".", "where", "(", "np", ".", "array", "(", "overall_direct_compression", "[", "pruner", "]", "[", "sample", "]", ")", "<=", "tick", ")", "[", "0", "]", "[", "-", "1", "]", "\n", "start_idx", "=", "min", "(", "[", "start_idx", ",", "tick_idx", "]", ")", "\n", "if", "start", "+", "1", "<", "inf_idxs_direct", "[", "pruner", "]", "[", "sample", "]", ":", "\n", "                        ", "coeff_start", "=", "(", "tick", "-", "overall_direct_compression", "[", "pruner", "]", "[", "sample", "]", "[", "start", "]", ")", "/", "(", "overall_direct_compression", "[", "pruner", "]", "[", "sample", "]", "[", "start", "+", "1", "]", "-", "overall_direct_compression", "[", "pruner", "]", "[", "sample", "]", "[", "start", "]", ")", "\n", "coeff_end", "=", "(", "overall_direct_compression", "[", "pruner", "]", "[", "sample", "]", "[", "start", "+", "1", "]", "-", "tick", ")", "/", "(", "overall_direct_compression", "[", "pruner", "]", "[", "sample", "]", "[", "start", "+", "1", "]", "-", "overall_direct_compression", "[", "pruner", "]", "[", "sample", "]", "[", "start", "]", ")", "\n", "curr_accs", ".", "append", "(", "(", "accuracies_direct_sorted", "[", "pruner", "]", "[", "sample", "]", "[", "start", "]", "*", "coeff_end", "+", "accuracies_direct_sorted", "[", "pruner", "]", "[", "sample", "]", "[", "start", "+", "1", "]", "*", "coeff_start", ")", ")", "\n", "", "else", ":", "\n", "                        ", "curr_accs", ".", "append", "(", "random", "[", "args", ".", "architecture", "]", ")", "\n", "end_idx", "=", "min", "(", "[", "end_idx", ",", "tick_idx", "]", ")", "\n", "", "", "else", ":", "\n", "                    ", "curr_accs", ".", "append", "(", "random", "[", "args", ".", "architecture", "]", ")", "\n", "", "", "mins", ".", "append", "(", "np", ".", "min", "(", "curr_accs", ")", ")", "\n", "means", ".", "append", "(", "np", ".", "mean", "(", "curr_accs", ")", ")", "\n", "maxs", ".", "append", "(", "np", ".", "max", "(", "curr_accs", ")", ")", "\n", "", "mins", ",", "means", ",", "maxs", "=", "np", ".", "array", "(", "mins", ")", ",", "np", ".", "array", "(", "means", ")", ",", "np", ".", "array", "(", "maxs", ")", "\n", "ax", ".", "plot", "(", "ticks", "[", "pruner", "]", "[", "start_idx", ":", "end_idx", "]", ",", "means", "[", "start_idx", ":", "end_idx", "]", ",", "zorder", "=", "3", ",", "color", "=", "color_map", "[", "pruner", "]", ",", "linewidth", "=", "2.5", ",", "linestyle", "=", "linestyle_direct", ")", "\n", "ax", ".", "fill_between", "(", "ticks", "[", "pruner", "]", "[", "start_idx", ":", "end_idx", "]", ",", "mins", "[", "start_idx", ":", "end_idx", "]", ",", "maxs", "[", "start_idx", ":", "end_idx", "]", ",", "color", "=", "color_map", "[", "pruner", "]", ",", "zorder", "=", "3", ",", "alpha", "=", "0.3", ")", "\n", "legend_elements", "+=", "[", "mpl", ".", "patches", ".", "Patch", "(", "facecolor", "=", "color_map", "[", "pruner", "]", ",", "label", "=", "pruner_names", "[", "pruner", "]", ")", "]", "\n", "", "accuracies_effective_sorted", "=", "{", "pruner", ":", "[", "accuracies", "[", "pruner", "]", "[", "sample", "]", "[", "overall_effective_compression", "[", "pruner", "]", "[", "sample", "]", ".", "argsort", "(", ")", "]", "for", "sample", "in", "range", "(", "args", ".", "num_samples", ")", "]", "for", "pruner", "in", "args", ".", "pruners_to_display", "}", "\n", "overall_effective_compression", "=", "{", "pruner", ":", "[", "sorted", "(", "overall_effective_compression", "[", "pruner", "]", "[", "sample", "]", ")", "for", "sample", "in", "range", "(", "args", ".", "num_samples", ")", "]", "for", "pruner", "in", "args", ".", "pruners_to_display", "}", "\n", "ticks", "=", "{", "pruner", ":", "10", "**", "(", "0.05", "*", "np", ".", "arange", "(", "max", "(", "[", "min", "(", "overall_effective_compression", "[", "pruner", "]", "[", "sample", "]", ")", "for", "sample", "in", "range", "(", "args", ".", "num_samples", ")", "]", ")", ",", "20", "*", "np", ".", "log10", "(", "compressions", "[", "pruner", "]", "[", "-", "1", "]", ")", ",", "20", "/", "9", ")", ")", "for", "pruner", "in", "args", ".", "pruners_to_display", "}", "\n", "inf_idxs_effective", "=", "{", "pruner", ":", "[", "np", ".", "where", "(", "np", ".", "array", "(", "overall_effective_compression", "[", "pruner", "]", "[", "sample", "]", ")", ">", "1e20", ")", "[", "0", "]", "[", "0", "]", "if", "sum", "(", "[", "int", "(", "effective_compression", ">", "1e20", ")", "for", "effective_compression", "in", "overall_effective_compression", "[", "pruner", "]", "[", "sample", "]", "]", ")", ">", "0", "else", "len", "(", "overall_effective_compression", "[", "pruner", "]", "[", "sample", "]", ")", "for", "sample", "in", "range", "(", "args", ".", "num_samples", ")", "]", "for", "pruner", "in", "args", ".", "pruners_to_display", "}", "\n", "for", "pruner", "in", "args", ".", "pruners_to_display", ":", "\n", "        ", "means", ",", "mins", ",", "maxs", ",", "start_idx", ",", "end_idx", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "math", ".", "inf", ",", "len", "(", "ticks", "[", "pruner", "]", ")", "\n", "for", "tick_idx", ",", "tick", "in", "enumerate", "(", "ticks", "[", "pruner", "]", ")", ":", "\n", "            ", "curr_accs", "=", "[", "]", "\n", "for", "sample", "in", "range", "(", "args", ".", "num_samples", ")", ":", "\n", "                ", "if", "len", "(", "np", ".", "where", "(", "np", ".", "array", "(", "overall_effective_compression", "[", "pruner", "]", "[", "sample", "]", ")", "<=", "tick", ")", "[", "0", "]", ")", ">", "0", ":", "\n", "                    ", "start", "=", "np", ".", "where", "(", "np", ".", "array", "(", "overall_effective_compression", "[", "pruner", "]", "[", "sample", "]", ")", "<=", "tick", ")", "[", "0", "]", "[", "-", "1", "]", "\n", "start_idx", "=", "min", "(", "[", "start_idx", ",", "tick_idx", "]", ")", "\n", "if", "start", "+", "1", "<", "inf_idxs_effective", "[", "pruner", "]", "[", "sample", "]", ":", "\n", "                        ", "coeff_start", "=", "(", "tick", "-", "overall_effective_compression", "[", "pruner", "]", "[", "sample", "]", "[", "start", "]", ")", "/", "(", "overall_effective_compression", "[", "pruner", "]", "[", "sample", "]", "[", "start", "+", "1", "]", "-", "overall_effective_compression", "[", "pruner", "]", "[", "sample", "]", "[", "start", "]", ")", "\n", "coeff_end", "=", "(", "overall_effective_compression", "[", "pruner", "]", "[", "sample", "]", "[", "start", "+", "1", "]", "-", "tick", ")", "/", "(", "overall_effective_compression", "[", "pruner", "]", "[", "sample", "]", "[", "start", "+", "1", "]", "-", "overall_effective_compression", "[", "pruner", "]", "[", "sample", "]", "[", "start", "]", ")", "\n", "curr_accs", ".", "append", "(", "(", "accuracies_effective_sorted", "[", "pruner", "]", "[", "sample", "]", "[", "start", "]", "*", "coeff_end", "+", "accuracies_effective_sorted", "[", "pruner", "]", "[", "sample", "]", "[", "start", "+", "1", "]", "*", "coeff_start", ")", ")", "\n", "", "else", ":", "\n", "                        ", "curr_accs", ".", "append", "(", "random", "[", "args", ".", "architecture", "]", ")", "\n", "end_idx", "=", "min", "(", "[", "end_idx", ",", "tick_idx", "]", ")", "\n", "", "", "else", ":", "\n", "                    ", "curr_accs", ".", "append", "(", "random", "[", "args", ".", "architecture", "]", ")", "\n", "", "", "mins", ".", "append", "(", "np", ".", "min", "(", "curr_accs", ")", ")", "\n", "means", ".", "append", "(", "np", ".", "mean", "(", "curr_accs", ")", ")", "\n", "maxs", ".", "append", "(", "np", ".", "max", "(", "curr_accs", ")", ")", "\n", "", "ax", ".", "scatter", "(", "overall_effective_compression", "[", "pruner", "]", "[", "sample", "]", ",", "accuracies_effective_sorted", "[", "pruner", "]", "[", "sample", "]", ",", "color", "=", "color_map", "[", "pruner", "]", ",", "zorder", "=", "3", ",", "s", "=", "25", ",", "alpha", "=", "0.3", ")", "\n", "mins", ",", "means", ",", "maxs", "=", "np", ".", "array", "(", "mins", ")", ",", "np", ".", "array", "(", "means", ")", ",", "np", ".", "array", "(", "maxs", ")", "\n", "ax", ".", "plot", "(", "ticks", "[", "pruner", "]", "[", "start_idx", ":", "end_idx", "]", ",", "means", "[", "start_idx", ":", "end_idx", "]", ",", "zorder", "=", "3", ",", "color", "=", "color_map", "[", "pruner", "]", ",", "linewidth", "=", "2.5", ",", "linestyle", "=", "linestyle_effective", ")", "\n", "ax", ".", "fill_between", "(", "ticks", "[", "pruner", "]", "[", "start_idx", ":", "end_idx", "]", ",", "mins", "[", "start_idx", ":", "end_idx", "]", ",", "maxs", "[", "start_idx", ":", "end_idx", "]", ",", "color", "=", "color_map", "[", "pruner", "]", ",", "zorder", "=", "3", ",", "alpha", "=", "0.3", ")", "\n", "", "ax", ".", "axhline", "(", "dense_mean", ",", "linestyle", "=", "'solid'", ",", "color", "=", "'grey'", ",", "zorder", "=", "3", ",", "linewidth", "=", "2.5", ")", "\n", "ax", ".", "fill_between", "(", "plt", ".", "xlim", "(", ")", ",", "dense_min", ",", "dense_max", ",", "color", "=", "'grey'", ",", "zorder", "=", "3", ",", "alpha", "=", "0.3", ")", "\n", "legend_elements", "+=", "[", "mpl", ".", "lines", ".", "Line2D", "(", "[", "0", "]", ",", "[", "0", "]", ",", "color", "=", "'grey'", ",", "linestyle", "=", "'solid'", ",", "label", "=", "'Dense'", ",", "linewidth", "=", "2.5", ")", "]", "\n", "legend_elements", "+=", "[", "mpl", ".", "lines", ".", "Line2D", "(", "[", "0", "]", ",", "[", "0", "]", ",", "color", "=", "'k'", ",", "linestyle", "=", "'solid'", ",", "label", "=", "'vs. effective'", ",", "linewidth", "=", "2.5", ")", "]", "\n", "legend_elements", "+=", "[", "mpl", ".", "lines", ".", "Line2D", "(", "[", "0", "]", ",", "[", "0", "]", ",", "color", "=", "'k'", ",", "linestyle", "=", "'dashed'", ",", "label", "=", "'vs. direct'", ",", "linewidth", "=", "2.5", ")", "]", "\n", "ax", ".", "set_title", "(", "network_names", "[", "args", ".", "architecture", "]", ",", "fontsize", "=", "'medium'", ")", "\n", "ax", ".", "set_xlabel", "(", "\"Compression\"", ",", "fontsize", "=", "'medium'", ")", "\n", "ax", ".", "set_ylabel", "(", "f\"Top-1 test accuracy\"", ",", "fontsize", "=", "'medium'", ")", "\n", "ax", ".", "tick_params", "(", "axis", "=", "'both'", ",", "labelsize", "=", "'medium'", ")", "\n", "ax", ".", "legend", "(", "handles", "=", "legend_elements", ",", "loc", "=", "'lower left'", ",", "markerscale", "=", "1", ",", "fontsize", "=", "'medium'", ")", "\n", "ax", ".", "set_xscale", "(", "'log'", ",", "base", "=", "10", ")", "\n", "ax", ".", "grid", "(", "zorder", "=", "0", ",", "ls", "=", "'dashed'", ",", "alpha", "=", "0.6", ")", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "args", ".", "out_path", ",", "args", ".", "architecture", ",", "'figures'", ",", "'accuracies.png'", ")", ",", "dpi", "=", "600", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.visualization.compressions": [[124, 161], ["numpy.load", "ax.set_title", "ax.set_xlabel", "ax.set_ylabel", "ax.tick_params", "ax.legend", "ax.set_xscale", "ax.set_yscale", "ax.grid", "fig.tight_layout", "matplotlib.savefig", "set", "os.path.join", "os.listdir", "sorted", "os.path.join", "numpy.array", "numpy.array", "numpy.array", "numpy.min", "numpy.mean", "numpy.max", "min", "ax.plot", "ax.fill_between", "os.path.join", "os.path.isfile", "list", "matplotlib.patches.Patch", "os.path.join", "int", "compressions[].add", "numpy.load", "range", "range", "len", "range", "inf_idxs_effective[].argsort", "len", "range", "filename.split", "os.path.join", "sum", "sum", "range", "sum", "sum", "len", "numpy.where", "numpy.where", "int", "int", "int", "zip", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "compressions", "(", "args", ")", ":", "\n", "    ", "\"\"\" plots effective compression against target compression\n    \"\"\"", "\n", "legend_elements", "=", "[", "]", "\n", "compressions", "=", "{", "pruner", ":", "set", "(", "[", "]", ")", "for", "pruner", "in", "args", ".", "pruners_to_display", "}", "\n", "load_prefix", "=", "{", "pruner", ":", "os", ".", "path", ".", "join", "(", "args", ".", "out_path", ",", "args", ".", "architecture", ",", "pruner", ",", "args", ".", "pruning_type", ")", "for", "pruner", "in", "args", ".", "pruners_to_display", "}", "\n", "for", "pruner", "in", "args", ".", "pruners_to_display", ":", "\n", "        ", "for", "filename", "in", "os", ".", "listdir", "(", "load_prefix", "[", "pruner", "]", ")", ":", "\n", "            ", "if", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "load_prefix", "[", "pruner", "]", ",", "filename", ")", ")", ":", "\n", "                ", "compression", "=", "int", "(", "filename", ".", "split", "(", "'_'", ")", "[", "1", "]", ")", "\n", "if", "'.npy'", "in", "filename", ":", "\n", "                    ", "compressions", "[", "pruner", "]", ".", "add", "(", "compression", ")", "\n", "", "", "", "", "compressions", "=", "{", "pruner", ":", "sorted", "(", "list", "(", "compressions", "[", "pruner", "]", ")", ")", "for", "pruner", "in", "args", ".", "pruners_to_display", "}", "\n", "counts", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "out_path", ",", "args", ".", "architecture", ",", "'dense'", ",", "'counts.npy'", ")", ")", "\n", "effective_sparsities", "=", "{", "pruner", ":", "np", ".", "array", "(", "[", "[", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "load_prefix", "[", "pruner", "]", ",", "f'{sample}_{compression}_sparsities_effective_{args.effective_type}.npy'", ")", ")", "for", "compression", "in", "compressions", "[", "pruner", "]", "]", "for", "sample", "in", "range", "(", "args", ".", "num_samples", ")", "]", ")", "for", "pruner", "in", "args", ".", "pruners_to_display", "}", "\n", "overall_effective_sparsity", "=", "{", "pruner", ":", "np", ".", "array", "(", "[", "[", "sum", "(", "[", "sparsity", "*", "count", "for", "sparsity", ",", "count", "in", "zip", "(", "effective_sparsities", "[", "pruner", "]", "[", "sample", "]", "[", "level", "]", ",", "counts", ")", "]", ")", "/", "sum", "(", "counts", ")", "for", "level", "in", "range", "(", "len", "(", "compressions", "[", "pruner", "]", ")", ")", "]", "for", "sample", "in", "range", "(", "args", ".", "num_samples", ")", "]", ")", "for", "pruner", "in", "args", ".", "pruners_to_display", "}", "\n", "overall_effective_compression", "=", "{", "pruner", ":", "1.", "/", "(", "1", "-", "overall_effective_sparsity", "[", "pruner", "]", ")", "for", "pruner", "in", "args", ".", "pruners_to_display", "}", "\n", "inf_idxs_effective", "=", "{", "pruner", ":", "np", ".", "array", "(", "[", "np", ".", "where", "(", "np", ".", "array", "(", "overall_effective_compression", "[", "pruner", "]", "[", "sample", "]", ")", ">", "1e20", ")", "[", "0", "]", "[", "0", "]", "if", "sum", "(", "[", "int", "(", "effective_compression", ">", "1e20", ")", "for", "effective_compression", "in", "overall_effective_compression", "[", "pruner", "]", "[", "sample", "]", "]", ")", ">", "0", "else", "len", "(", "overall_effective_compression", "[", "pruner", "]", "[", "sample", "]", ")", "for", "sample", "in", "range", "(", "args", ".", "num_samples", ")", "]", ")", "for", "pruner", "in", "args", ".", "pruners_to_display", "}", "\n", "overall_effective_compression", "=", "{", "pruner", ":", "overall_effective_compression", "[", "pruner", "]", "[", "inf_idxs_effective", "[", "pruner", "]", ".", "argsort", "(", ")", "[", "-", "args", ".", "num_samples", "//", "2", ":", "]", "]", "for", "pruner", "in", "args", ".", "pruners_to_display", "}", "\n", "overall_effective_compression_min", "=", "{", "pruner", ":", "np", ".", "min", "(", "overall_effective_compression", "[", "pruner", "]", ",", "axis", "=", "0", ")", "for", "pruner", "in", "args", ".", "pruners_to_display", "}", "\n", "overall_effective_compression_mean", "=", "{", "pruner", ":", "np", ".", "mean", "(", "overall_effective_compression", "[", "pruner", "]", ",", "axis", "=", "0", ")", "for", "pruner", "in", "args", ".", "pruners_to_display", "}", "\n", "overall_effective_compression_max", "=", "{", "pruner", ":", "np", ".", "max", "(", "overall_effective_compression", "[", "pruner", "]", ",", "axis", "=", "0", ")", "for", "pruner", "in", "args", ".", "pruners_to_display", "}", "\n", "inf_idxs_effective", "=", "{", "pruner", ":", "min", "(", "[", "np", ".", "where", "(", "np", ".", "array", "(", "overall_effective_compression", "[", "pruner", "]", "[", "sample", "]", ")", ">", "1e20", ")", "[", "0", "]", "[", "0", "]", "if", "sum", "(", "[", "int", "(", "effective_compression", ">", "1e20", ")", "for", "effective_compression", "in", "overall_effective_compression", "[", "pruner", "]", "[", "sample", "]", "]", ")", ">", "0", "else", "len", "(", "overall_effective_compression", "[", "pruner", "]", "[", "sample", "]", ")", "for", "sample", "in", "range", "(", "args", ".", "num_samples", "//", "2", "+", "int", "(", "args", ".", "num_samples", ">", "2", ")", ")", "]", ")", "for", "pruner", "in", "args", ".", "pruners_to_display", "}", "\n", "for", "pruner", "in", "args", ".", "pruners_to_display", ":", "\n", "        ", "ax", ".", "plot", "(", "compressions", "[", "pruner", "]", "[", ":", "inf_idxs_effective", "[", "pruner", "]", "]", ",", "overall_effective_compression_mean", "[", "pruner", "]", "[", ":", "inf_idxs_effective", "[", "pruner", "]", "]", ",", "color", "=", "color_map", "[", "pruner", "]", ",", "linewidth", "=", "2.5", ")", "\n", "ax", ".", "fill_between", "(", "compressions", "[", "pruner", "]", "[", ":", "inf_idxs_effective", "[", "pruner", "]", "]", ",", "overall_effective_compression_min", "[", "pruner", "]", "[", ":", "inf_idxs_effective", "[", "pruner", "]", "]", ",", "overall_effective_compression_max", "[", "pruner", "]", "[", ":", "inf_idxs_effective", "[", "pruner", "]", "]", ",", "color", "=", "color_map", "[", "pruner", "]", ",", "alpha", "=", "0.3", ")", "\n", "legend_elements", "+=", "[", "mpl", ".", "patches", ".", "Patch", "(", "facecolor", "=", "color_map", "[", "pruner", "]", ",", "label", "=", "pruner_names", "[", "pruner", "]", ")", "]", "\n", "", "ax", ".", "set_title", "(", "network_names", "[", "args", ".", "architecture", "]", ",", "fontsize", "=", "'medium'", ")", "\n", "ax", ".", "set_xlabel", "(", "f\"Target compression ({args.pruning_type} pruning)\"", ",", "fontsize", "=", "'medium'", ")", "\n", "ax", ".", "set_ylabel", "(", "f\"Effective compression\"", ",", "fontsize", "=", "'medium'", ")", "\n", "ax", ".", "tick_params", "(", "axis", "=", "'both'", ",", "labelsize", "=", "'medium'", ")", "\n", "ax", ".", "legend", "(", "handles", "=", "legend_elements", ",", "loc", "=", "'lower right'", ",", "markerscale", "=", "1", ",", "fontsize", "=", "'medium'", ")", "\n", "ax", ".", "set_xscale", "(", "'log'", ",", "base", "=", "10", ")", "\n", "ax", ".", "set_yscale", "(", "'log'", ",", "base", "=", "10", ")", "\n", "ax", ".", "grid", "(", "zorder", "=", "0", ",", "ls", "=", "'dashed'", ",", "alpha", "=", "0.6", ")", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "args", ".", "out_path", ",", "args", ".", "architecture", ",", "'figures'", ",", "'compressions.png'", ")", ",", "dpi", "=", "600", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.Pruner.__init__": [[179, 181], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "mode", ")", ":", "\n", "    ", "self", ".", "mode", "=", "mode", "\n", "", "def", "prune", "(", "self", ",", "model", ",", "tensors", ",", "sparsity", ",", "pruning_type", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.Pruner.prune": [[181, 258], ["utils.set_weights_model", "pruning.lamp", "pruning.effective_correction_from_global_scores", "numpy.load", "numpy.load", "model.name.replace().lower", "utils.set_weights_model", "model.layers[].get_weights", "logging.error", "pruning.Pruner.mode.split", "numpy.load", "numpy.load", "pruning.effective_correction_layerwise_scores_magnitude_pruning", "utils.check_valid_sparsities", "pruning.effective_correction_layerwise_scores_magnitude_pruning", "utils.check_valid_sparsities", "pruning.effective_correction_layerwise_scores_magnitude_pruning", "utils.check_valid_sparsities", "pruning.effective_correction_layerwise_scores_magnitude_pruning", "utils.check_valid_sparsities", "pruning.magnitude_global", "pruning.effective_correction_from_global_scores", "model.name.replace", "logging.error", "abs", "pruning.erk_quotas", "pruning.magnitude_layerwise", "abs", "pruning.igq_quotas", "pruning.magnitude_layerwise", "abs", "pruning.uniform_quotas", "pruning.magnitude_layerwise", "abs", "pruning.uniform_plus_quotas", "pruning.magnitude_layerwise", "pruning.Pruner.mode.split", "pruning.Pruner.prune_random", "pruning.Pruner.prune_iterative_snip", "zip", "zip", "zip", "zip", "utils.get_direct_sparsity", "utils.get_direct_sparsity", "utils.check_valid_sparsities", "pruning.Pruner.prune_random", "pruning.Pruner.prune_snip", "pruning.Pruner.prune_snip", "pruning.Pruner.prune_synflow", "func", "pruning.Pruner.prune_synflow", "logging.error", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.utils.set_weights_model", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.lamp", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.effective_correction_from_global_scores", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.utils.set_weights_model", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.effective_correction_layerwise_scores_magnitude_pruning", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.utils.check_valid_sparsities", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.effective_correction_layerwise_scores_magnitude_pruning", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.utils.check_valid_sparsities", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.effective_correction_layerwise_scores_magnitude_pruning", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.utils.check_valid_sparsities", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.effective_correction_layerwise_scores_magnitude_pruning", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.utils.check_valid_sparsities", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.magnitude_global", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.effective_correction_from_global_scores", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.erk_quotas", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.magnitude_layerwise", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.igq_quotas", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.magnitude_layerwise", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.uniform_quotas", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.magnitude_layerwise", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.uniform_plus_quotas", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.magnitude_layerwise", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.Pruner.prune_random", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.Pruner.prune_iterative_snip", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.utils.get_direct_sparsity", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.utils.get_direct_sparsity", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.utils.check_valid_sparsities", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.Pruner.prune_random", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.Pruner.prune_snip", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.Pruner.prune_snip", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.Pruner.prune_synflow", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.Pruner.prune_synflow"], ["", "def", "prune", "(", "self", ",", "model", ",", "tensors", ",", "sparsity", ",", "pruning_type", ",", "**", "kwargs", ")", ":", "\n", "    ", "shapes", "=", "[", "model", ".", "layers", "[", "layer", "]", ".", "get_weights", "(", ")", "[", "0", "]", ".", "shape", "for", "layer", "in", "tensors", "]", "\n", "if", "self", ".", "mode", "==", "'lamp'", ":", "\n", "      ", "try", ":", "\n", "        ", "final_weights", "=", "np", ".", "load", "(", "f'{kwargs[\"path_to_dense\"]}/{kwargs[\"sample\"]}_1_final_weights.npy'", ",", "allow_pickle", "=", "True", ")", "\n", "inits", "=", "np", ".", "load", "(", "f'{kwargs[\"path_to_dense\"]}/{kwargs[\"sample\"]}_1_inits.npy'", ",", "allow_pickle", "=", "True", ")", "\n", "", "except", ":", "\n", "        ", "logging", ".", "error", "(", "f'<pruning> required files in ({kwargs[\"path_to_dense\"]}/{kwargs[\"sample\"]}) do not exist.'", ")", "\n", "raise", "FileNotFoundError", "\n", "", "set_weights_model", "(", "model", ",", "tensors", ",", "inits", ")", "\n", "scores", ",", "masks", "=", "lamp", "(", "final_weights", ",", "sparsity", ")", "\n", "corrected_masks", "=", "effective_correction_from_global_scores", "(", "model", ",", "tensors", ",", "scores", ",", "sparsity", ")", "\n", "if", "pruning_type", "==", "'effective'", ":", "\n", "        ", "return", "corrected_masks", "\n", "", "elif", "pruning_type", "==", "'direct'", ":", "\n", "        ", "return", "masks", "\n", "", "", "elif", "self", ".", "mode", ".", "split", "(", "'/'", ")", "[", "0", "]", "==", "'magnitude'", ":", "\n", "      ", "model_name", "=", "model", ".", "name", ".", "replace", "(", "'-'", ",", "''", ")", ".", "lower", "(", ")", "\n", "try", ":", "\n", "        ", "final_weights", "=", "np", ".", "load", "(", "f'{kwargs[\"path_to_dense\"]}/{kwargs[\"sample\"]}_1_final_weights.npy'", ",", "allow_pickle", "=", "True", ")", "\n", "inits", "=", "np", ".", "load", "(", "f'{kwargs[\"path_to_dense\"]}/{kwargs[\"sample\"]}_1_inits.npy'", ",", "allow_pickle", "=", "True", ")", "\n", "", "except", ":", "\n", "        ", "logging", ".", "error", "(", "f'<pruning> required files in ({kwargs[\"path_to_dense\"]}/{kwargs[\"sample\"]}) do not exist.'", ")", "\n", "raise", "FileNotFoundError", "\n", "", "if", "self", ".", "mode", "==", "'magnitude/erk'", ":", "\n", "        ", "corrected_masks", "=", "effective_correction_layerwise_scores_magnitude_pruning", "(", "model", ",", "tensors", ",", "erk_quotas", ",", "abs", "(", "final_weights", ")", ",", "sparsity", ")", "\n", "sparsities", "=", "check_valid_sparsities", "(", "erk_quotas", "(", "sparsity", ",", "shapes", ")", ")", "\n", "masks", "=", "[", "magnitude_layerwise", "(", "final_weight", ",", "s", ")", "for", "final_weight", ",", "s", "in", "zip", "(", "final_weights", ",", "sparsities", ")", "]", "\n", "", "if", "self", ".", "mode", "==", "'magnitude/igq'", ":", "\n", "        ", "corrected_masks", "=", "effective_correction_layerwise_scores_magnitude_pruning", "(", "model", ",", "tensors", ",", "igq_quotas", ",", "abs", "(", "final_weights", ")", ",", "sparsity", ")", "\n", "sparsities", "=", "check_valid_sparsities", "(", "igq_quotas", "(", "sparsity", ",", "shapes", ")", ")", "\n", "masks", "=", "[", "magnitude_layerwise", "(", "final_weight", ",", "s", ")", "for", "final_weight", ",", "s", "in", "zip", "(", "final_weights", ",", "sparsities", ")", "]", "\n", "", "if", "self", ".", "mode", "==", "'magnitude/uniform'", ":", "\n", "        ", "corrected_masks", "=", "effective_correction_layerwise_scores_magnitude_pruning", "(", "model", ",", "tensors", ",", "uniform_quotas", ",", "abs", "(", "final_weights", ")", ",", "sparsity", ")", "\n", "sparsities", "=", "check_valid_sparsities", "(", "uniform_quotas", "(", "sparsity", ",", "shapes", ")", ")", "\n", "masks", "=", "[", "magnitude_layerwise", "(", "final_weight", ",", "s", ")", "for", "final_weight", ",", "s", "in", "zip", "(", "final_weights", ",", "sparsities", ")", "]", "\n", "", "if", "self", ".", "mode", "==", "'magnitude/uniform_plus'", ":", "\n", "        ", "corrected_masks", "=", "effective_correction_layerwise_scores_magnitude_pruning", "(", "model", ",", "tensors", ",", "uniform_plus_quotas", ",", "abs", "(", "final_weights", ")", ",", "sparsity", ")", "\n", "sparsities", "=", "check_valid_sparsities", "(", "uniform_plus_quotas", "(", "sparsity", ",", "shapes", ")", ")", "\n", "masks", "=", "[", "magnitude_layerwise", "(", "final_weight", ",", "s", ")", "for", "final_weight", ",", "s", "in", "zip", "(", "final_weights", ",", "sparsities", ")", "]", "\n", "", "if", "self", ".", "mode", "==", "'magnitude/global'", ":", "\n", "        ", "scores", ",", "masks", "=", "magnitude_global", "(", "final_weights", ",", "sparsity", ")", "\n", "corrected_masks", "=", "effective_correction_from_global_scores", "(", "model", ",", "tensors", ",", "scores", ",", "sparsity", ")", "\n", "", "set_weights_model", "(", "model", ",", "tensors", ",", "inits", ")", "\n", "if", "pruning_type", "==", "'effective'", ":", "\n", "        ", "return", "corrected_masks", "\n", "", "elif", "pruning_type", "==", "'direct'", ":", "\n", "        ", "return", "masks", "\n", "", "", "elif", "self", ".", "mode", ".", "split", "(", "'/'", ")", "[", "0", "]", "==", "'random'", ":", "\n", "      ", "if", "self", ".", "mode", "==", "'random/snip'", ":", "\n", "        ", "func", "=", "lambda", "**", "kwargs", ":", "get_direct_sparsity", "(", "self", ".", "prune_snip", "(", "**", "kwargs", ")", ")", "\n", "", "if", "self", ".", "mode", "==", "'random/synflow'", ":", "\n", "        ", "func", "=", "lambda", "**", "kwargs", ":", "get_direct_sparsity", "(", "self", ".", "prune_synflow", "(", "**", "kwargs", ")", ")", "\n", "", "if", "self", ".", "mode", "==", "'random/uniform'", ":", "\n", "        ", "func", "=", "uniform_quotas", "\n", "", "if", "self", ".", "mode", "==", "'random/igq'", ":", "\n", "        ", "func", "=", "igq_quotas", "\n", "", "if", "self", ".", "mode", "==", "'random/erk'", ":", "\n", "        ", "func", "=", "erk_quotas", "\n", "", "if", "self", ".", "mode", "==", "'random/uniform_plus'", ":", "\n", "        ", "func", "=", "uniform_plus_quotas", "\n", "", "if", "pruning_type", "==", "'effective'", ":", "\n", "        ", "return", "self", ".", "prune_random", "(", "model", ",", "tensors", ",", "'effective'", ",", "target_sparsity", "=", "sparsity", ",", "func", "=", "func", ",", "shapes", "=", "shapes", ",", "**", "kwargs", ")", "\n", "", "elif", "pruning_type", "==", "'direct'", ":", "\n", "        ", "sparsities", "=", "check_valid_sparsities", "(", "func", "(", "target_sparsity", "=", "sparsity", ",", "shapes", "=", "shapes", ",", "model", "=", "model", ",", "tensors", "=", "tensors", ",", "pruning_type", "=", "'direct'", ",", "**", "kwargs", ")", ")", "\n", "return", "self", ".", "prune_random", "(", "model", ",", "tensors", ",", "'direct'", ",", "sparsities", "=", "sparsities", ")", "\n", "", "", "elif", "self", ".", "mode", "==", "'snip/iterative'", ":", "\n", "      ", "return", "self", ".", "prune_iterative_snip", "(", "model", ",", "tensors", ",", "sparsity", ",", "pruning_type", ",", "**", "kwargs", ")", "\n", "", "elif", "self", ".", "mode", "==", "'snip'", ":", "\n", "      ", "return", "self", ".", "prune_snip", "(", "model", ",", "tensors", ",", "sparsity", ",", "pruning_type", ",", "**", "kwargs", ")", "\n", "", "elif", "self", ".", "mode", "==", "'synflow'", ":", "\n", "      ", "return", "self", ".", "prune_synflow", "(", "model", ",", "tensors", ",", "sparsity", ",", "pruning_type", ",", "**", "kwargs", ")", "\n", "", "elif", "self", ".", "mode", "==", "'dense'", ":", "\n", "      ", "return", "[", "np", ".", "ones", "(", "shape", ")", "for", "shape", "in", "shapes", "]", "\n", "", "else", ":", "\n", "      ", "logging", ".", "error", "(", "f'<pruning> unknown pruner \"{self.mode}\" encountered.'", ")", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.Pruner.prune_synflow": [[259, 293], ["tensorflow.keras.models.get_model", "range", "numpy.ones", "numpy.prod", "sum", "abs", "numpy.zeros", "utils.set_weights_model", "tape.gradient", "numpy.concatenate", "numpy.concatenate", "pruning.effective_correction_from_global_scores", "logging.info", "logging.info", "range", "model.name.replace().lower", "len", "int", "tensorflow.GradientTape", "linear_model", "tensorflow.reduce_sum", "len", "masks[].reshape", "model.layers[].get_weights", "model.layers[].get_weights", "numpy.ones", "mask.reshape", "numpy.concatenate.argsort", "range", "numpy.where", "len", "model.name.replace", "zip", "numpy.isin", "len", "utils.get_overall_direct_sparsity", "utils.get_overall_direct_sparsity", "numpy.concatenate.argsort", "numpy.min", "numpy.min", "effective_masks.effective_masks_synflow", "effective_masks.effective_masks_synflow", "numpy.where", "numpy.max", "numpy.min", "numpy.max", "numpy.min", "float", "gradient.numpy"], "methods", ["home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.models.get_model", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.utils.set_weights_model", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.effective_correction_from_global_scores", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.utils.get_overall_direct_sparsity", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.utils.get_overall_direct_sparsity", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.effective_masks.effective_masks_synflow", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.effective_masks.effective_masks_synflow"], ["", "", "def", "prune_synflow", "(", "self", ",", "model", ",", "tensors", ",", "target_sparsity", ",", "pruning_type", ",", "train_X", ",", "train_y", ",", "**", "kwargs", ")", ":", "\n", "    ", "shapes", "=", "[", "model", ".", "layers", "[", "layer", "]", ".", "get_weights", "(", ")", "[", "0", "]", ".", "shape", "for", "layer", "in", "tensors", "]", "\n", "masks", "=", "[", "np", ".", "ones", "(", "shape", ")", "for", "shape", "in", "shapes", "]", "\n", "counts", "=", "[", "np", ".", "prod", "(", "shape", ")", "for", "shape", "in", "shapes", "]", "\n", "counts_sum", "=", "[", "sum", "(", "counts", "[", ":", "layer", "]", ")", "for", "layer", "in", "range", "(", "len", "(", "shapes", ")", "+", "1", ")", "]", "\n", "linear_model", ",", "linear_tensors", "=", "get_model", "(", "shape", "=", "train_X", "[", "0", "]", ".", "shape", ",", "architecture", "=", "model", ".", "name", ".", "replace", "(", "'-'", ",", "''", ")", ".", "lower", "(", ")", ",", "batchnorm", "=", "False", ",", "activation", "=", "False", ",", "pool", "=", "'average'", ",", "output_classes", "=", "len", "(", "train_y", "[", "0", "]", ")", ")", "\n", "abs_inits", "=", "[", "abs", "(", "model", ".", "layers", "[", "layer", "]", ".", "get_weights", "(", ")", "[", "0", "]", ")", "for", "layer", "in", "tensors", "]", "\n", "already_pruned", ",", "weight_scores", "=", "0", ",", "np", ".", "zeros", "(", "counts_sum", "[", "-", "1", "]", ")", "\n", "for", "iteration", "in", "range", "(", "1", ",", "101", ")", ":", "\n", "      ", "set_weights_model", "(", "linear_model", ",", "linear_tensors", ",", "abs_inits", ",", "masks", "=", "masks", ")", "\n", "to_prune", "=", "int", "(", "counts_sum", "[", "-", "1", "]", "-", "counts_sum", "[", "-", "1", "]", "*", "(", "1", "-", "target_sparsity", ")", "**", "(", "float", "(", "iteration", ")", "/", "100", ")", ")", "-", "already_pruned", "\n", "already_pruned", "+=", "to_prune", "\n", "with", "tf", ".", "GradientTape", "(", "persistent", "=", "False", ")", "as", "tape", ":", "\n", "        ", "output", "=", "linear_model", "(", "np", ".", "ones", "(", "[", "1", "]", "+", "linear_model", ".", "inputs", "[", "0", "]", ".", "shape", "[", "1", ":", "]", ")", ")", "\n", "saliency", "=", "tf", ".", "reduce_sum", "(", "output", ")", "\n", "weights", "=", "[", "linear_model", ".", "layers", "[", "layer", "]", ".", "trainable_weights", "[", "0", "]", "for", "layer", "in", "linear_tensors", "]", "\n", "", "gradients", "=", "tape", ".", "gradient", "(", "saliency", ",", "weights", ")", "\n", "scores", "=", "np", ".", "concatenate", "(", "[", "(", "gradient", ".", "numpy", "(", ")", "*", "abs_init", "*", "mask", ")", ".", "reshape", "(", "-", "1", ")", "for", "gradient", ",", "abs_init", ",", "mask", "in", "zip", "(", "gradients", ",", "abs_inits", ",", "masks", ")", "]", ")", "\n", "masks", "=", "np", ".", "concatenate", "(", "[", "mask", ".", "reshape", "(", "-", "1", ")", "for", "mask", "in", "masks", "]", ")", "\n", "indices_to_prune", "=", "scores", ".", "argsort", "(", ")", "[", "np", ".", "isin", "(", "scores", ".", "argsort", "(", ")", ",", "np", ".", "where", "(", "masks", "==", "1", ")", "[", "0", "]", ")", "]", "[", ":", "to_prune", "]", "\n", "masks", "[", "indices_to_prune", "]", "=", "0.", "\n", "if", "len", "(", "indices_to_prune", ")", ">", "0", ":", "\n", "        ", "weight_scores", "[", "indices_to_prune", "]", "=", "iteration", "*", "2", "+", "(", "scores", "[", "indices_to_prune", "]", "-", "np", ".", "min", "(", "scores", "[", "indices_to_prune", "]", ")", ")", "/", "(", "np", ".", "max", "(", "scores", "[", "indices_to_prune", "]", ")", "-", "np", ".", "min", "(", "scores", "[", "indices_to_prune", "]", ")", "+", "1e-10", ")", "\n", "", "masks", "=", "[", "masks", "[", "counts_sum", "[", "layer", "]", ":", "counts_sum", "[", "layer", "+", "1", "]", "]", ".", "reshape", "(", "shapes", "[", "layer", "]", ")", "for", "layer", "in", "range", "(", "len", "(", "linear_tensors", ")", ")", "]", "\n", "if", "iteration", "==", "100", ":", "\n", "        ", "last_batch", "=", "np", ".", "where", "(", "weight_scores", "==", "0", ")", "[", "0", "]", "\n", "weight_scores", "[", "last_batch", "]", "=", "(", "iteration", "+", "1", ")", "*", "2", "+", "(", "scores", "[", "last_batch", "]", "-", "np", ".", "min", "(", "scores", "[", "last_batch", "]", ")", ")", "/", "(", "np", ".", "max", "(", "scores", "[", "last_batch", "]", ")", "-", "np", ".", "min", "(", "scores", "[", "last_batch", "]", ")", "+", "1e-10", ")", "\n", "", "", "if", "pruning_type", "==", "'effective'", ":", "\n", "      ", "corrected_masks", "=", "effective_correction_from_global_scores", "(", "model", ",", "tensors", ",", "weight_scores", ",", "target_sparsity", ")", "\n", "logging", ".", "info", "(", "f'<pruning> direct pruning overall sparsity: {get_overall_direct_sparsity(effective_masks_synflow(model,tensors,masks)):.6f}'", ")", "\n", "logging", ".", "info", "(", "f'<pruning> effective pruning overall sparsity: {get_overall_direct_sparsity(effective_masks_synflow(model,tensors,corrected_masks)):.6f}'", ")", "\n", "return", "corrected_masks", "\n", "", "elif", "pruning_type", "==", "'direct'", ":", "\n", "      ", "return", "masks", "\n", "\n"]], "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.Pruner.prune_snip": [[294, 323], ["numpy.random.choice", "numpy.ones", "zip", "numpy.concatenate", "numpy.prod", "sum", "range", "numpy.split", "numpy.split", "tape.gradient", "zip", "numpy.mean", "masks[].reshape", "pruning.effective_correction_from_global_scores", "logging.info", "logging.info", "model.layers[].get_weights", "range", "len", "min", "range", "range", "tensorflow.GradientTape", "model", "tensorflow.reduce_mean", "gradients[].append", "abs().reshape", "range", "model.layers[].get_weights", "len", "len", "tensorflow.keras.losses.categorical_crossentropy", "gradient_minibatch.numpy", "zip", "numpy.concatenate.argsort", "len", "len", "len", "abs", "int", "utils.get_overall_direct_sparsity", "utils.get_overall_direct_sparsity", "effective_masks.effective_masks_synflow", "effective_masks.effective_masks_synflow"], "methods", ["home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.effective_correction_from_global_scores", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.utils.get_overall_direct_sparsity", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.utils.get_overall_direct_sparsity", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.effective_masks.effective_masks_synflow", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.effective_masks.effective_masks_synflow"], ["", "", "def", "prune_snip", "(", "self", ",", "model", ",", "tensors", ",", "target_sparsity", ",", "pruning_type", ",", "train_X", ",", "train_y", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "    ", "inits", "=", "[", "model", ".", "layers", "[", "layer", "]", ".", "get_weights", "(", ")", "[", "0", "]", "for", "layer", "in", "tensors", "]", "\n", "shapes", "=", "[", "model", ".", "layers", "[", "layer", "]", ".", "get_weights", "(", ")", "[", "0", "]", ".", "shape", "for", "layer", "in", "tensors", "]", "\n", "counts", "=", "[", "np", ".", "prod", "(", "shape", ")", "for", "shape", "in", "shapes", "]", "\n", "counts_sum", "=", "[", "sum", "(", "counts", "[", ":", "layer", "]", ")", "for", "layer", "in", "range", "(", "len", "(", "shapes", ")", "+", "1", ")", "]", "\n", "choice", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "len", "(", "train_X", ")", ")", ",", "size", "=", "min", "(", "[", "config", "[", "'batch_size_snip'", "]", "*", "300", ",", "len", "(", "train_X", ")", "]", ")", ",", "replace", "=", "False", ")", "\n", "batch_X", ",", "batch_y", "=", "train_X", "[", "choice", "]", ",", "train_y", "[", "choice", "]", "\n", "masks", "=", "np", ".", "ones", "(", "counts_sum", "[", "-", "1", "]", ")", "\n", "gradients", "=", "{", "layer", ":", "[", "]", "for", "layer", "in", "tensors", "}", "\n", "for", "minibatch_X", ",", "minibatch_y", "in", "zip", "(", "np", ".", "split", "(", "batch_X", ",", "range", "(", "128", ",", "len", "(", "batch_X", ")", ",", "128", ")", ")", ",", "np", ".", "split", "(", "batch_y", ",", "range", "(", "128", ",", "len", "(", "batch_y", ")", ",", "128", ")", ")", ")", ":", "\n", "      ", "with", "tf", ".", "GradientTape", "(", "persistent", "=", "False", ")", "as", "tape", ":", "\n", "        ", "output", "=", "model", "(", "minibatch_X", ")", "\n", "weights", "=", "[", "model", ".", "layers", "[", "layer", "]", ".", "trainable_weights", "[", "0", "]", "for", "layer", "in", "tensors", "]", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "keras", ".", "losses", ".", "categorical_crossentropy", "(", "output", ",", "minibatch_y", ")", ")", "\n", "", "gradients_minibatch", "=", "tape", ".", "gradient", "(", "loss", ",", "weights", ")", "\n", "for", "gradient_minibatch", ",", "layer", "in", "zip", "(", "gradients_minibatch", ",", "tensors", ")", ":", "\n", "        ", "gradients", "[", "layer", "]", ".", "append", "(", "gradient_minibatch", ".", "numpy", "(", ")", ")", "\n", "", "", "for", "layer", "in", "tensors", ":", "\n", "      ", "gradients", "[", "layer", "]", "=", "np", ".", "mean", "(", "gradients", "[", "layer", "]", ",", "axis", "=", "0", ")", "\n", "", "cs", "=", "np", ".", "concatenate", "(", "[", "abs", "(", "gradients", "[", "layer", "]", "*", "init", "*", "mask", ")", ".", "reshape", "(", "-", "1", ")", "for", "layer", ",", "init", ",", "mask", "in", "zip", "(", "tensors", ",", "inits", ",", "masks", ")", "]", ")", "\n", "masks", "[", "cs", ".", "argsort", "(", ")", "[", ":", "int", "(", "target_sparsity", "*", "counts_sum", "[", "-", "1", "]", ")", "]", "]", "=", "0.", "\n", "masks", "=", "[", "masks", "[", "counts_sum", "[", "layer", "]", ":", "counts_sum", "[", "layer", "+", "1", "]", "]", ".", "reshape", "(", "shapes", "[", "layer", "]", ")", "for", "layer", "in", "range", "(", "len", "(", "tensors", ")", ")", "]", "\n", "if", "pruning_type", "==", "'effective'", ":", "\n", "      ", "corrected_masks", "=", "effective_correction_from_global_scores", "(", "model", ",", "tensors", ",", "cs", ",", "target_sparsity", ")", "\n", "logging", ".", "info", "(", "f'<pruning> direct pruning: overall effective sparsity: {get_overall_direct_sparsity(effective_masks_synflow(model,tensors,masks)):.6f}'", ")", "\n", "logging", ".", "info", "(", "f'<pruning> effective pruning: overall effective sparsity: {get_overall_direct_sparsity(effective_masks_synflow(model,tensors,corrected_masks)):.6f}'", ")", "\n", "return", "corrected_masks", "\n", "", "elif", "pruning_type", "==", "'direct'", ":", "\n", "      ", "return", "masks", "\n", "\n"]], "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.Pruner.prune_iterative_snip": [[324, 364], ["range", "utils.set_weights_model", "numpy.ones", "numpy.prod", "sum", "numpy.zeros", "numpy.random.choice", "utils.set_weights_model", "zip", "numpy.concatenate", "numpy.concatenate", "pruning.effective_correction_from_global_scores", "logging.info", "logging.info", "model.layers[].get_weights", "range", "range", "int", "numpy.split", "numpy.split", "tape.gradient", "zip", "numpy.mean", "len", "masks[].reshape", "len", "min", "range", "range", "tensorflow.GradientTape", "model", "tensorflow.reduce_mean", "gradients[].append", "abs().reshape", "mask.reshape", "numpy.concatenate.argsort", "range", "numpy.where", "len", "len", "len", "tensorflow.keras.losses.categorical_crossentropy", "gradient_minibatch.numpy", "zip", "numpy.isin", "len", "utils.get_overall_direct_sparsity", "utils.get_overall_direct_sparsity", "len", "abs", "numpy.concatenate.argsort", "numpy.min", "effective_masks.effective_masks_synflow", "effective_masks.effective_masks_synflow", "numpy.where", "numpy.max", "numpy.min", "float"], "methods", ["home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.utils.set_weights_model", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.utils.set_weights_model", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.effective_correction_from_global_scores", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.utils.get_overall_direct_sparsity", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.utils.get_overall_direct_sparsity", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.effective_masks.effective_masks_synflow", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.effective_masks.effective_masks_synflow"], ["", "", "def", "prune_iterative_snip", "(", "self", ",", "model", ",", "tensors", ",", "target_sparsity", ",", "pruning_type", ",", "train_X", ",", "train_y", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "    ", "inits", "=", "[", "model", ".", "layers", "[", "layer", "]", ".", "get_weights", "(", ")", "[", "0", "]", "for", "layer", "in", "tensors", "]", "\n", "shapes", "=", "[", "init", ".", "shape", "for", "init", "in", "inits", "]", "\n", "masks", "=", "[", "np", ".", "ones", "(", "shape", ")", "for", "shape", "in", "shapes", "]", "\n", "counts", "=", "[", "np", ".", "prod", "(", "shape", ")", "for", "shape", "in", "shapes", "]", "\n", "counts_sum", "=", "[", "sum", "(", "counts", "[", ":", "layer", "]", ")", "for", "layer", "in", "range", "(", "len", "(", "shapes", ")", "+", "1", ")", "]", "\n", "scores", ",", "already_pruned", "=", "np", ".", "zeros", "(", "counts_sum", "[", "-", "1", "]", ")", ",", "0", "\n", "for", "iteration", "in", "range", "(", "1", ",", "301", ")", ":", "\n", "      ", "choice", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "len", "(", "train_X", ")", ")", ",", "size", "=", "min", "(", "[", "config", "[", "'batch_size_snip'", "]", ",", "len", "(", "train_X", ")", "]", ")", ",", "replace", "=", "False", ")", "\n", "batch_X", ",", "batch_y", "=", "train_X", "[", "choice", "]", ",", "train_y", "[", "choice", "]", "\n", "to_prune", "=", "int", "(", "counts_sum", "[", "-", "1", "]", "-", "counts_sum", "[", "-", "1", "]", "*", "(", "1", "-", "target_sparsity", ")", "**", "(", "float", "(", "iteration", ")", "/", "300", ")", ")", "-", "already_pruned", "\n", "already_pruned", "+=", "to_prune", "\n", "gradients", "=", "{", "layer", ":", "[", "]", "for", "layer", "in", "tensors", "}", "\n", "set_weights_model", "(", "model", ",", "tensors", ",", "inits", ",", "masks", "=", "masks", ")", "\n", "for", "minibatch_X", ",", "minibatch_y", "in", "zip", "(", "np", ".", "split", "(", "batch_X", ",", "range", "(", "128", ",", "len", "(", "batch_X", ")", ",", "128", ")", ")", ",", "np", ".", "split", "(", "batch_y", ",", "range", "(", "128", ",", "len", "(", "batch_y", ")", ",", "128", ")", ")", ")", ":", "\n", "        ", "with", "tf", ".", "GradientTape", "(", "persistent", "=", "False", ")", "as", "tape", ":", "\n", "          ", "output", "=", "model", "(", "minibatch_X", ")", "\n", "weights", "=", "[", "model", ".", "layers", "[", "layer", "]", ".", "trainable_weights", "[", "0", "]", "for", "layer", "in", "tensors", "]", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "keras", ".", "losses", ".", "categorical_crossentropy", "(", "output", ",", "minibatch_y", ")", ")", "\n", "", "gradients_minibatch", "=", "tape", ".", "gradient", "(", "loss", ",", "weights", ")", "\n", "for", "gradient_minibatch", ",", "layer", "in", "zip", "(", "gradients_minibatch", ",", "tensors", ")", ":", "\n", "          ", "gradients", "[", "layer", "]", ".", "append", "(", "gradient_minibatch", ".", "numpy", "(", ")", ")", "\n", "", "", "for", "layer", "in", "tensors", ":", "\n", "        ", "gradients", "[", "layer", "]", "=", "np", ".", "mean", "(", "gradients", "[", "layer", "]", ",", "axis", "=", "0", ")", "\n", "", "cs", "=", "np", ".", "concatenate", "(", "[", "abs", "(", "gradients", "[", "layer", "]", "*", "init", "*", "mask", ")", ".", "reshape", "(", "-", "1", ")", "for", "layer", ",", "init", ",", "mask", "in", "zip", "(", "tensors", ",", "inits", ",", "masks", ")", "]", ")", "\n", "masks", "=", "np", ".", "concatenate", "(", "[", "mask", ".", "reshape", "(", "-", "1", ")", "for", "mask", "in", "masks", "]", ")", "\n", "indices_to_prune", "=", "cs", ".", "argsort", "(", ")", "[", "np", ".", "isin", "(", "cs", ".", "argsort", "(", ")", ",", "np", ".", "where", "(", "masks", "==", "1", ")", "[", "0", "]", ")", "]", "[", ":", "to_prune", "]", "\n", "masks", "[", "indices_to_prune", "]", "=", "0.", "\n", "if", "len", "(", "indices_to_prune", ")", ">", "0", ":", "\n", "        ", "scores", "[", "indices_to_prune", "]", "=", "iteration", "*", "2", "+", "(", "cs", "[", "indices_to_prune", "]", "-", "np", ".", "min", "(", "cs", "[", "indices_to_prune", "]", ")", ")", "/", "(", "np", ".", "max", "(", "cs", "[", "indices_to_prune", "]", ")", "-", "np", ".", "min", "(", "cs", "[", "indices_to_prune", "]", ")", "+", "1e-10", ")", "\n", "", "masks", "=", "[", "masks", "[", "counts_sum", "[", "layer", "]", ":", "counts_sum", "[", "layer", "+", "1", "]", "]", ".", "reshape", "(", "shapes", "[", "layer", "]", ")", "for", "layer", "in", "range", "(", "len", "(", "tensors", ")", ")", "]", "\n", "", "scores", "[", "np", ".", "where", "(", "scores", "==", "0", ")", "[", "0", "]", "]", "=", "2", "*", "(", "iteration", "+", "2", ")", "\n", "set_weights_model", "(", "model", ",", "tensors", ",", "inits", ")", "\n", "if", "pruning_type", "==", "'effective'", ":", "\n", "      ", "corrected_masks", "=", "effective_correction_from_global_scores", "(", "model", ",", "tensors", ",", "scores", ",", "target_sparsity", ")", "\n", "logging", ".", "info", "(", "f'<pruning> direct pruning overall sparsity: {get_overall_direct_sparsity(effective_masks_synflow(model,tensors,masks)):.6f}'", ")", "\n", "logging", ".", "info", "(", "f'<pruning> effective pruning overall sparsity: {get_overall_direct_sparsity(effective_masks_synflow(model,tensors,corrected_masks)):.6f}'", ")", "\n", "return", "corrected_masks", "\n", "", "elif", "pruning_type", "==", "'direct'", ":", "\n", "      ", "return", "masks", "\n", "\n"]], "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.Pruner.prune_random": [[365, 418], ["enumerate", "numpy.ones", "numpy.random.choice", "func", "sum", "func", "numpy.array", "pruning.Pruner.prune_random", "func", "utils.check_valid_sparsities", "pruning.Pruner.prune_random", "logging.info", "logging.info", "range", "zip", "mask.reshape", "numpy.prod", "sum", "func", "numpy.array", "numpy.zeros", "func", "utils.check_valid_sparsities", "enumerate", "effective_masks.effective_masks_synflow", "utils.get_overall_direct_sparsity", "numpy.prod", "int", "round", "numpy.random.choice", "numpy.array", "model.layers[].get_weights", "model.layers[].get_weights", "sum", "sum", "zip", "range", "range", "middle_mask.reshape", "utils.get_overall_direct_sparsity", "utils.get_overall_direct_sparsity", "numpy.prod", "sum", "sum", "numpy.where", "min", "len", "len", "effective_masks.effective_masks_synflow", "effective_masks.effective_masks_synflow", "numpy.array", "numpy.array", "numpy.logical_and", "max", "len", "low_masks[].reshape", "high_masks[].reshape", "int", "numpy.where", "numpy.logical_and", "numpy.sum", "low_masks[].reshape", "high_masks[].reshape"], "methods", ["home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.Pruner.prune_random", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.utils.check_valid_sparsities", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.Pruner.prune_random", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.utils.check_valid_sparsities", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.effective_masks.effective_masks_synflow", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.utils.get_overall_direct_sparsity", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.utils.get_overall_direct_sparsity", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.utils.get_overall_direct_sparsity", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.effective_masks.effective_masks_synflow", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.effective_masks.effective_masks_synflow"], ["", "", "def", "prune_random", "(", "self", ",", "model", ",", "tensors", ",", "pruning_type", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "pruning_type", "==", "'direct'", ":", "\n", "      ", "sparsities", "=", "kwargs", "[", "\"sparsities\"", "]", "\n", "masks", "=", "[", "np", ".", "ones", "(", "model", ".", "layers", "[", "layer", "]", ".", "get_weights", "(", ")", "[", "0", "]", ".", "shape", ")", "for", "layer", "in", "tensors", "]", "\n", "inds", "=", "[", "np", ".", "random", ".", "choice", "(", "range", "(", "np", ".", "prod", "(", "mask", ".", "shape", ")", ")", ",", "size", "=", "int", "(", "sparsity", "*", "np", ".", "prod", "(", "mask", ".", "shape", ")", ")", ",", "replace", "=", "False", ")", "for", "sparsity", ",", "mask", "in", "zip", "(", "sparsities", ",", "masks", ")", "]", "\n", "for", "ind", ",", "mask", "in", "enumerate", "(", "masks", ")", ":", "\n", "        ", "mask", ".", "reshape", "(", "-", "1", ")", "[", "inds", "[", "ind", "]", "]", "=", "0.", "\n", "", "", "elif", "pruning_type", "==", "'effective'", ":", "\n", "      ", "shapes", "=", "[", "model", ".", "layers", "[", "layer", "]", ".", "get_weights", "(", ")", "[", "0", "]", ".", "shape", "for", "layer", "in", "tensors", "]", "\n", "counts", "=", "[", "np", ".", "prod", "(", "shape", ")", "for", "shape", "in", "shapes", "]", "\n", "target_sparsity", "=", "kwargs", "[", "\"target_sparsity\"", "]", "\n", "del", "kwargs", "[", "\"target_sparsity\"", "]", "\n", "low", ",", "high", ",", "func", ",", "flag", "=", "0", ",", "sum", "(", "counts", ")", ",", "kwargs", "[", "\"func\"", "]", ",", "False", "\n", "low_val", "=", "func", "(", "model", "=", "model", ",", "tensors", "=", "tensors", ",", "pruning_type", "=", "'direct'", ",", "target_sparsity", "=", "low", "/", "sum", "(", "counts", ")", ",", "**", "kwargs", ")", "\n", "while", "(", "(", "np", ".", "array", "(", "low_val", ")", "<", "0", ")", ".", "any", "(", ")", "or", "(", "np", ".", "array", "(", "low_val", ")", ">", "1", ")", ".", "any", "(", ")", ")", "and", "high", "-", "low", ">", "1", ":", "\n", "        ", "flag", "=", "True", "\n", "middle", "=", "(", "low", "+", "high", ")", "//", "2", "\n", "middle_val", "=", "func", "(", "model", "=", "model", ",", "tensors", "=", "tensors", ",", "pruning_type", "=", "'direct'", ",", "target_sparsity", "=", "middle", "/", "sum", "(", "counts", ")", ",", "**", "kwargs", ")", "\n", "middle_sparsities", "=", "np", ".", "array", "(", "middle_val", ")", "\n", "if", "(", "middle_sparsities", "<", "0", ")", ".", "any", "(", ")", "or", "(", "middle_sparsities", ">", "1", ")", ".", "any", "(", ")", ":", "\n", "          ", "low", ",", "high", "=", "middle", ",", "high", "\n", "", "else", ":", "\n", "          ", "low", ",", "high", "=", "low", ",", "middle", "\n", "", "", "low", "=", "high", "if", "flag", "else", "0", "\n", "high", "=", "sum", "(", "counts", ")", "\n", "low_val", "=", "func", "(", "model", "=", "model", ",", "tensors", "=", "tensors", ",", "pruning_type", "=", "'direct'", ",", "target_sparsity", "=", "low", "/", "sum", "(", "counts", ")", ",", "**", "kwargs", ")", "\n", "low_sparsities", "=", "np", ".", "array", "(", "low_val", ")", "\n", "low_masks", "=", "self", ".", "prune_random", "(", "model", ",", "tensors", ",", "'direct'", ",", "sparsities", "=", "low_sparsities", ")", "\n", "high_masks", "=", "[", "np", ".", "zeros", "(", "shape", ")", "for", "shape", "in", "shapes", "]", "\n", "while", "high", "-", "low", ">", "1", ":", "\n", "        ", "middle", "=", "(", "high", "+", "low", ")", "//", "2", "\n", "middle_val", "=", "func", "(", "model", "=", "model", ",", "tensors", "=", "tensors", ",", "pruning_type", "=", "'direct'", ",", "target_sparsity", "=", "middle", "/", "sum", "(", "counts", ")", ",", "**", "kwargs", ")", "\n", "middle_sparsities", "=", "check_valid_sparsities", "(", "middle_val", ")", "\n", "middle_to_prune", "=", "[", "round", "(", "s", "*", "count", ")", "for", "s", ",", "count", "in", "zip", "(", "middle_sparsities", ",", "counts", ")", "]", "\n", "indices_to_prune", "=", "[", "np", ".", "random", ".", "choice", "(", "np", ".", "where", "(", "np", ".", "logical_and", "(", "low_masks", "[", "layer", "]", ".", "reshape", "(", "-", "1", ")", "==", "1", ",", "high_masks", "[", "layer", "]", ".", "reshape", "(", "-", "1", ")", "==", "0", ")", ")", "[", "0", "]", ",", "size", "=", "min", "(", "[", "max", "(", "[", "0", ",", "int", "(", "middle_to_prune", "[", "layer", "]", "-", "np", ".", "sum", "(", "1", "-", "low_masks", "[", "layer", "]", ")", ")", "]", ")", ",", "len", "(", "np", ".", "where", "(", "np", ".", "logical_and", "(", "low_masks", "[", "layer", "]", ".", "reshape", "(", "-", "1", ")", "==", "1", ",", "high_masks", "[", "layer", "]", ".", "reshape", "(", "-", "1", ")", "==", "0", ")", ")", "[", "0", "]", ")", "]", ")", ",", "replace", "=", "False", ")", "for", "layer", "in", "range", "(", "len", "(", "tensors", ")", ")", "]", "\n", "middle_masks", "=", "[", "np", ".", "array", "(", "low_masks", "[", "layer", "]", ")", "for", "layer", "in", "range", "(", "len", "(", "tensors", ")", ")", "]", "\n", "for", "i", ",", "middle_mask", "in", "enumerate", "(", "middle_masks", ")", ":", "\n", "          ", "middle_mask", ".", "reshape", "(", "-", "1", ")", "[", "indices_to_prune", "[", "i", "]", "]", "=", "0", "\n", "", "effective_middle_masks", "=", "effective_masks_synflow", "(", "model", ",", "tensors", ",", "middle_masks", ")", "\n", "effective_middle_sparsity", "=", "get_overall_direct_sparsity", "(", "effective_middle_masks", ")", "\n", "if", "effective_middle_sparsity", "<=", "target_sparsity", ":", "\n", "          ", "low", ",", "high", "=", "middle", ",", "high", "\n", "low_masks", ",", "high_masks", "=", "middle_masks", ",", "high_masks", "\n", "", "else", ":", "\n", "          ", "low", ",", "high", "=", "low", ",", "middle", "\n", "low_masks", ",", "high_masks", "=", "low_masks", ",", "middle_masks", "\n", "", "", "masks", "=", "low_masks", "\n", "sparsities", "=", "func", "(", "model", "=", "model", ",", "tensors", "=", "tensors", ",", "pruning_type", "=", "'direct'", ",", "target_sparsity", "=", "target_sparsity", ",", "**", "kwargs", ")", "\n", "sparsities", "=", "check_valid_sparsities", "(", "sparsities", ")", "\n", "direct_masks", "=", "self", ".", "prune_random", "(", "model", ",", "tensors", ",", "'direct'", ",", "sparsities", "=", "sparsities", ")", "\n", "logging", ".", "info", "(", "f'<pruning> direct pruning overall sparsity: {get_overall_direct_sparsity(effective_masks_synflow(model,tensors,direct_masks)):.6f}'", ")", "\n", "logging", ".", "info", "(", "f'<pruning> effective pruning overall sparsity: {get_overall_direct_sparsity(effective_masks_synflow(model,tensors,masks)):.6f}'", ")", "\n", "", "return", "masks", "", "", "", ""]], "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.lamp": [[10, 28], ["numpy.concatenate", "numpy.ones", "numpy.prod", "sum", "sorted", "partial_sums.append", "numpy.array", "sum", "masks[].reshape", "range", "partial_sum.append", "zip", "zip", "range", "numpy.argsort", "np.concatenate.argsort", "len", "len", "range", "numpy.argsort", "int", "len", "sum"], "function", ["None"], ["def", "lamp", "(", "weights", ",", "target_sparsity", ")", ":", "\n", "  ", "shapes", "=", "[", "weight", ".", "shape", "for", "weight", "in", "weights", "]", "\n", "counts", "=", "[", "np", ".", "prod", "(", "shape", ")", "for", "shape", "in", "shapes", "]", "\n", "counts_sum", "=", "[", "sum", "(", "counts", "[", ":", "layer", "]", ")", "for", "layer", "in", "range", "(", "len", "(", "shapes", ")", "+", "1", ")", "]", "\n", "wsorted_squared", "=", "[", "sorted", "(", "(", "weight", "**", "2", ")", ".", "reshape", "(", "-", "1", ")", ")", "for", "weight", "in", "weights", "]", "\n", "partial_sums", "=", "[", "]", "\n", "for", "w", "in", "wsorted_squared", ":", "\n", "    ", "partial_sum", "=", "[", "0", "]", "\n", "for", "weight", "in", "w", "[", ":", ":", "-", "1", "]", ":", "\n", "      ", "partial_sum", ".", "append", "(", "partial_sum", "[", "-", "1", "]", "+", "weight", ")", "\n", "", "partial_sums", ".", "append", "(", "partial_sum", "[", ":", "0", ":", "-", "1", "]", ")", "\n", "", "scores", "=", "[", "np", ".", "array", "(", "[", "w", "[", "i", "]", "/", "(", "p", "[", "i", "]", "+", "1e-8", ")", "for", "i", "in", "range", "(", "len", "(", "w", ")", ")", "]", ")", "for", "w", ",", "p", "in", "zip", "(", "wsorted_squared", ",", "partial_sums", ")", "]", "\n", "scores", "=", "[", "score", "[", "np", ".", "argsort", "(", "np", ".", "argsort", "(", "(", "weight", "**", "2", ")", ".", "reshape", "(", "-", "1", ")", ")", ")", "]", "for", "score", ",", "weight", "in", "zip", "(", "scores", ",", "weights", ")", "]", "\n", "scores", "=", "np", ".", "concatenate", "(", "scores", ")", "\n", "masks", "=", "np", ".", "ones", "(", "(", "sum", "(", "counts", ")", ")", ")", "\n", "masks", "[", "scores", ".", "argsort", "(", ")", "[", ":", "int", "(", "target_sparsity", "*", "sum", "(", "counts", ")", ")", "]", "]", "=", "0.", "\n", "masks", "=", "[", "masks", "[", "counts_sum", "[", "layer", "]", ":", "counts_sum", "[", "layer", "+", "1", "]", "]", ".", "reshape", "(", "shapes", "[", "layer", "]", ")", "for", "layer", "in", "range", "(", "len", "(", "shapes", ")", ")", "]", "\n", "return", "scores", ",", "masks", "\n", "\n"]], "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.magnitude_layerwise": [[29, 38], ["numpy.abs", "np.abs.argsort", "int", "numpy.ones", "mask.reshape.reshape", "weight.reshape", "round", "len"], "function", ["None"], ["", "def", "magnitude_layerwise", "(", "weight", ",", "target_sparsity", ")", ":", "\n", "  ", "shape", "=", "weight", ".", "shape", "\n", "flat_abs", "=", "np", ".", "abs", "(", "weight", ".", "reshape", "(", "-", "1", ")", ")", "\n", "argsort", "=", "flat_abs", ".", "argsort", "(", ")", "\n", "prune_count", "=", "int", "(", "round", "(", "len", "(", "flat_abs", ")", "*", "target_sparsity", ")", ")", "\n", "mask", "=", "np", ".", "ones", "(", "flat_abs", ".", "shape", ")", "\n", "mask", "[", "argsort", "[", ":", "prune_count", "]", "]", "=", "0", "\n", "mask", "=", "mask", ".", "reshape", "(", "shape", ")", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.magnitude_global": [[39, 48], ["numpy.concatenate", "numpy.ones", "numpy.prod", "sum", "sum", "masks[].reshape", "range", "numpy.abs", "range", "weight.reshape", "np.concatenate.argsort", "len", "len", "int", "sum"], "function", ["None"], ["", "def", "magnitude_global", "(", "weights", ",", "target_sparsity", ")", ":", "\n", "  ", "shapes", "=", "[", "weight", ".", "shape", "for", "weight", "in", "weights", "]", "\n", "counts", "=", "[", "np", ".", "prod", "(", "shape", ")", "for", "shape", "in", "shapes", "]", "\n", "counts_sum", "=", "[", "sum", "(", "counts", "[", ":", "layer", "]", ")", "for", "layer", "in", "range", "(", "len", "(", "shapes", ")", "+", "1", ")", "]", "\n", "scores", "=", "np", ".", "concatenate", "(", "[", "np", ".", "abs", "(", "weight", ".", "reshape", "(", "-", "1", ")", ")", "for", "weight", "in", "weights", "]", ")", "\n", "masks", "=", "np", ".", "ones", "(", "(", "sum", "(", "counts", ")", ")", ")", "\n", "masks", "[", "scores", ".", "argsort", "(", ")", "[", ":", "int", "(", "target_sparsity", "*", "sum", "(", "counts", ")", ")", "]", "]", "=", "0.", "\n", "masks", "=", "[", "masks", "[", "counts_sum", "[", "layer", "]", ":", "counts_sum", "[", "layer", "+", "1", "]", "]", ".", "reshape", "(", "shapes", "[", "layer", "]", ")", "for", "layer", "in", "range", "(", "len", "(", "shapes", ")", ")", "]", "\n", "return", "scores", ",", "masks", "\n", "\n"]], "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.erk_quotas": [[49, 55], ["pruning.redistribute_invalid_quotas", "numpy.prod", "sum", "sum", "enumerate", "sum", "zip"], "function", ["home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.redistribute_invalid_quotas"], ["", "def", "erk_quotas", "(", "target_sparsity", ",", "shapes", ",", "**", "kwargs", ")", ":", "\n", "  ", "counts", "=", "[", "np", ".", "prod", "(", "shape", ")", "for", "shape", "in", "shapes", "]", "\n", "coeffs", "=", "[", "sum", "(", "shape", ")", "/", "counts", "[", "i", "]", "for", "i", ",", "shape", "in", "enumerate", "(", "shapes", ")", "]", "\n", "k", "=", "(", "sum", "(", "counts", ")", "*", "(", "1", "-", "target_sparsity", ")", ")", "/", "sum", "(", "[", "count", "*", "coeff", "for", "count", ",", "coeff", "in", "zip", "(", "counts", ",", "coeffs", ")", "]", ")", "\n", "sparsities", "=", "[", "1", "-", "k", "*", "coeff", "for", "coeff", "in", "coeffs", "]", "\n", "return", "redistribute_invalid_quotas", "(", "sparsities", ",", "shapes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.bs_force_igq": [[56, 71], ["pruning.bs_force_igq", "abs", "abs", "float", "zip", "sum", "sum", "zip", "sum", "sum", "zip", "sum", "sum", "zip", "zip"], "function", ["home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.bs_force_igq"], ["", "def", "bs_force_igq", "(", "areas", ",", "Lengths", ",", "target_sparsity", ",", "tolerance", ",", "f_low", ",", "f_high", ")", ":", "\n", "  ", "lengths_low", "=", "[", "Length", "/", "(", "f_low", "/", "area", "+", "1", ")", "for", "Length", ",", "area", "in", "zip", "(", "Lengths", ",", "areas", ")", "]", "\n", "overall_sparsity_low", "=", "1", "-", "sum", "(", "lengths_low", ")", "/", "sum", "(", "Lengths", ")", "\n", "if", "abs", "(", "overall_sparsity_low", "-", "target_sparsity", ")", "<", "tolerance", ":", "\n", "    ", "return", "[", "1", "-", "length", "/", "Length", "for", "length", ",", "Length", "in", "zip", "(", "lengths_low", ",", "Lengths", ")", "]", "\n", "", "lengths_high", "=", "[", "Length", "/", "(", "f_high", "/", "area", "+", "1", ")", "for", "Length", ",", "area", "in", "zip", "(", "Lengths", ",", "areas", ")", "]", "\n", "overall_sparsity_high", "=", "1", "-", "sum", "(", "lengths_high", ")", "/", "sum", "(", "Lengths", ")", "\n", "if", "abs", "(", "overall_sparsity_high", "-", "target_sparsity", ")", "<", "tolerance", ":", "\n", "    ", "return", "[", "1", "-", "length", "/", "Length", "for", "length", ",", "Length", "in", "zip", "(", "lengths_high", ",", "Lengths", ")", "]", "\n", "", "force", "=", "float", "(", "f_low", "+", "f_high", ")", "/", "2", "\n", "lengths", "=", "[", "Length", "/", "(", "force", "/", "area", "+", "1", ")", "for", "Length", ",", "area", "in", "zip", "(", "Lengths", ",", "areas", ")", "]", "\n", "overall_sparsity", "=", "1", "-", "sum", "(", "lengths", ")", "/", "sum", "(", "Lengths", ")", "\n", "f_low", "=", "force", "if", "overall_sparsity", "<", "target_sparsity", "else", "f_low", "\n", "f_high", "=", "force", "if", "overall_sparsity", ">", "target_sparsity", "else", "f_high", "\n", "return", "bs_force_igq", "(", "areas", ",", "Lengths", ",", "target_sparsity", ",", "tolerance", ",", "f_low", ",", "f_high", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.igq_quotas": [[72, 78], ["pruning.bs_force_igq", "numpy.prod", "sum"], "function", ["home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.bs_force_igq"], ["", "def", "igq_quotas", "(", "target_sparsity", ",", "shapes", ",", "**", "kwargs", ")", ":", "\n", "  ", "counts", "=", "[", "np", ".", "prod", "(", "shape", ")", "for", "shape", "in", "shapes", "]", "\n", "tolerance", "=", "1.", "/", "sum", "(", "counts", ")", "\n", "areas", "=", "[", "1.", "/", "count", "for", "count", "in", "counts", "]", "\n", "Lengths", "=", "[", "count", "for", "count", "in", "counts", "]", "\n", "return", "bs_force_igq", "(", "areas", ",", "Lengths", ",", "target_sparsity", ",", "tolerance", ",", "0", ",", "1e20", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.redistribute_invalid_quotas": [[79, 89], ["range", "numpy.prod", "len", "logging.warning", "abs"], "function", ["None"], ["", "def", "redistribute_invalid_quotas", "(", "sparsities", ",", "shapes", ",", "**", "kwargs", ")", ":", "\n", "  ", "counts", "=", "[", "np", ".", "prod", "(", "shape", ")", "for", "shape", "in", "shapes", "]", "\n", "for", "layer", "in", "range", "(", "len", "(", "sparsities", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "    ", "sparsity", "=", "sparsities", "[", "layer", "]", "\n", "if", "sparsity", "<", "0", "and", "layer", ">", "0", ":", "\n", "      ", "sparsities", "[", "layer", "-", "1", "]", "=", "(", "counts", "[", "layer", "-", "1", "]", "*", "sparsities", "[", "layer", "-", "1", "]", "+", "sparsities", "[", "layer", "]", "*", "counts", "[", "layer", "]", ")", "/", "counts", "[", "layer", "-", "1", "]", "\n", "sparsities", "[", "layer", "]", "=", "0", "\n", "", "elif", "sparsity", "<", "0", "and", "abs", "(", "sparsity", "*", "counts", "[", "0", "]", ")", ">", "2", "and", "layer", "==", "0", ":", "\n", "      ", "logging", ".", "warning", "(", "f\"<pruning> unable to redistribute density quotas: {sparsities}\"", ")", "\n", "", "", "return", "sparsities", "\n", "\n"]], "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.uniform_plus_quotas": [[90, 98], ["max", "numpy.concatenate", "len", "logging.error", "len", "numpy.prod", "sum", "sum", "sum", "min", "len"], "function", ["None"], ["", "def", "uniform_plus_quotas", "(", "target_sparsity", ",", "shapes", ",", "**", "kwargs", ")", ":", "\n", "  ", "if", "len", "(", "shapes", "[", "0", "]", ")", "<=", "2", ":", "logging", ".", "error", "(", "\"<pruning> uniform+ supports convolutional networks only.\"", ")", "\n", "assert", "len", "(", "shapes", "[", "0", "]", ")", ">", "2", ",", "\"<pruning> uniform+ supports convolutional networks only.\"", "\n", "counts", "=", "[", "np", ".", "prod", "(", "shape", ")", "for", "shape", "in", "shapes", "]", "\n", "sparsity", "=", "target_sparsity", "*", "sum", "(", "counts", ")", "/", "sum", "(", "counts", "[", "1", ":", "]", ")", "\n", "to_distribute", "=", "max", "(", "[", "0", ",", "(", "sparsity", "-", "0.8", ")", "*", "counts", "[", "-", "1", "]", "]", ")", "\n", "additional_sparsity", "=", "to_distribute", "/", "(", "sum", "(", "counts", "[", "1", ":", "-", "1", "]", ")", ")", "\n", "return", "np", ".", "concatenate", "(", "[", "[", "0.", "]", ",", "[", "sparsity", "+", "additional_sparsity", "]", "*", "(", "len", "(", "counts", ")", "-", "2", ")", ",", "[", "min", "(", "[", "sparsity", ",", "0.8", "]", ")", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.effective_correction_from_global_scores": [[99, 119], ["numpy.concatenate", "numpy.prod", "sum", "sum", "numpy.concatenate", "effective_masks.effective_masks_synflow", "utils.get_overall_direct_sparsity", "low_masks[].reshape", "range", "middle_masks[].reshape", "numpy.ones().reshape", "range", "model.layers[].get_weights", "numpy.ones().reshape", "range", "scores.argsort", "len", "len", "scores.argsort", "len", "numpy.ones", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.effective_masks.effective_masks_synflow", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.utils.get_overall_direct_sparsity"], ["", "def", "effective_correction_from_global_scores", "(", "model", ",", "tensors", ",", "scores", ",", "target_sparsity", ")", ":", "\n", "  ", "shapes", "=", "[", "model", ".", "layers", "[", "layer", "]", ".", "get_weights", "(", ")", "[", "0", "]", ".", "shape", "for", "layer", "in", "tensors", "]", "\n", "counts", "=", "[", "np", ".", "prod", "(", "shape", ")", "for", "shape", "in", "shapes", "]", "\n", "counts_sum", "=", "[", "sum", "(", "counts", "[", ":", "layer", "]", ")", "for", "layer", "in", "range", "(", "len", "(", "shapes", ")", "+", "1", ")", "]", "\n", "low", ",", "high", "=", "0", ",", "sum", "(", "counts", ")", "\n", "while", "high", "-", "low", ">", "1", ":", "\n", "    ", "middle", "=", "(", "high", "+", "low", ")", "//", "2", "\n", "middle_masks", "=", "np", ".", "concatenate", "(", "[", "np", ".", "ones", "(", "shape", ")", ".", "reshape", "(", "-", "1", ")", "for", "shape", "in", "shapes", "]", ")", "\n", "middle_masks", "[", "scores", ".", "argsort", "(", ")", "[", ":", "middle", "]", "]", "=", "0.", "\n", "middle_masks", "=", "[", "middle_masks", "[", "counts_sum", "[", "layer", "]", ":", "counts_sum", "[", "layer", "+", "1", "]", "]", ".", "reshape", "(", "shapes", "[", "layer", "]", ")", "for", "layer", "in", "range", "(", "len", "(", "shapes", ")", ")", "]", "\n", "middle_effective_masks", "=", "effective_masks_synflow", "(", "model", ",", "tensors", ",", "middle_masks", ")", "\n", "middle_effective_sparsity", "=", "get_overall_direct_sparsity", "(", "middle_effective_masks", ")", "\n", "if", "middle_effective_sparsity", "<=", "target_sparsity", ":", "\n", "      ", "low", ",", "high", "=", "middle", ",", "high", "\n", "", "else", ":", "\n", "      ", "low", ",", "high", "=", "low", ",", "middle", "\n", "", "", "low_masks", "=", "np", ".", "concatenate", "(", "[", "np", ".", "ones", "(", "shape", ")", ".", "reshape", "(", "-", "1", ")", "for", "shape", "in", "shapes", "]", ")", "\n", "low_masks", "[", "scores", ".", "argsort", "(", ")", "[", ":", "low", "]", "]", "=", "0.", "\n", "low_masks", "=", "[", "low_masks", "[", "counts_sum", "[", "layer", "]", ":", "counts_sum", "[", "layer", "+", "1", "]", "]", ".", "reshape", "(", "shapes", "[", "layer", "]", ")", "for", "layer", "in", "range", "(", "len", "(", "shapes", ")", ")", "]", "\n", "return", "low_masks", "\n", "\n"]], "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.effective_correction_layerwise_scores_magnitude_pruning": [[120, 174], ["sum", "numpy.array", "logging.info", "logging.info", "logging.info", "numpy.prod", "sum", "numpy.array", "numpy.array", "sum", "logging.error", "pruning.magnitude_layerwise", "numpy.zeros", "numpy.array", "effective_masks.effective_masks_synflow", "utils.get_overall_direct_sparsity", "pruning.magnitude_layerwise", "zip", "pruning.magnitude_layerwise", "zip", "model.layers[].get_weights", "sum", "zip", "utils.get_overall_direct_sparsity", "utils.get_overall_direct_sparsity", "sum", "sum", "sum", "effective_masks.effective_masks_synflow", "effective_masks.effective_masks_synflow", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "pruning.erk_quotas", "pruning.igq_quotas", "pruning.uniform_quotas", "pruning.uniform_plus_quotas"], "function", ["home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.magnitude_layerwise", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.effective_masks.effective_masks_synflow", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.utils.get_overall_direct_sparsity", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.magnitude_layerwise", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.magnitude_layerwise", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.utils.get_overall_direct_sparsity", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.utils.get_overall_direct_sparsity", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.effective_masks.effective_masks_synflow", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.effective_masks.effective_masks_synflow", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.erk_quotas", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.igq_quotas", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.uniform_quotas", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.uniform_plus_quotas"], ["", "def", "effective_correction_layerwise_scores_magnitude_pruning", "(", "model", ",", "tensors", ",", "func", ",", "scores", ",", "target_sparsity", ")", ":", "\n", "  ", "shapes", "=", "[", "model", ".", "layers", "[", "layer", "]", ".", "get_weights", "(", ")", "[", "0", "]", ".", "shape", "for", "layer", "in", "tensors", "]", "\n", "counts", "=", "[", "np", ".", "prod", "(", "shape", ")", "for", "shape", "in", "shapes", "]", "\n", "low", ",", "high", ",", "flag", "=", "0", ",", "sum", "(", "counts", ")", ",", "False", "\n", "low_val", "=", "func", "(", "target_sparsity", "=", "low", ",", "shapes", "=", "shapes", ")", "\n", "while", "(", "(", "np", ".", "array", "(", "low_val", ")", "<", "0", ")", ".", "any", "(", ")", "or", "(", "np", ".", "array", "(", "low_val", ")", ">", "1", ")", ".", "any", "(", ")", ")", "and", "high", "-", "low", ">", "1", ":", "# checking the lowest achievable sparsity ", "\n", "    ", "flag", "=", "True", "\n", "middle", "=", "(", "low", "+", "high", ")", "//", "2", "\n", "middle_val", "=", "func", "(", "target_sparsity", "=", "middle", "/", "sum", "(", "counts", ")", ",", "shapes", "=", "shapes", ")", "\n", "middle_sparsities", "=", "np", ".", "array", "(", "middle_val", ")", "\n", "if", "(", "middle_sparsities", "<", "0", ")", ".", "any", "(", ")", "or", "(", "middle_sparsities", ">", "1", ")", ".", "any", "(", ")", ":", "\n", "      ", "low", ",", "high", "=", "middle", ",", "high", "\n", "", "else", ":", "\n", "      ", "low", ",", "high", "=", "low", ",", "middle", "\n", "", "", "low", "=", "actual_low", "=", "high", "if", "flag", "else", "0", "\n", "high_val", "=", "sum", "(", "counts", ")", "\n", "flag", "=", "False", "\n", "while", "(", "(", "np", ".", "array", "(", "high_val", ")", "<", "0", ")", ".", "any", "(", ")", "or", "(", "np", ".", "array", "(", "high_val", ")", ">", "1", ")", ".", "any", "(", ")", ")", "and", "high", "-", "low", ">", "1", ":", "# checking the highest achievable sparsity", "\n", "    ", "flag", "=", "True", "\n", "middle", "=", "(", "low", "+", "high", ")", "//", "2", "\n", "middle_val", "=", "func", "(", "target_sparsity", "=", "middle", "/", "sum", "(", "counts", ")", ",", "shapes", "=", "shapes", ")", "\n", "middle_sparsities", "=", "np", ".", "array", "(", "middle_val", ")", "\n", "if", "(", "middle_sparsities", "<", "0", ")", ".", "any", "(", ")", "or", "(", "middle_sparsities", ">", "1", ")", ".", "any", "(", ")", ":", "\n", "      ", "low", ",", "high", "=", "low", ",", "middle", "\n", "", "else", ":", "\n", "      ", "low", ",", "high", "=", "middle", ",", "high", "\n", "", "", "high", "=", "actual_high", "=", "low", "if", "flag", "else", "sum", "(", "counts", ")", "\n", "low", "=", "actual_low", "\n", "if", "low", ">=", "high", ":", "\n", "    ", "logging", ".", "error", "(", "f\"<pruning> low: ({low}) >= high ({high}). target sparsity might be incompatible with the pruning method.\"", ")", "\n", "", "low_val", "=", "func", "(", "target_sparsity", "=", "low", "/", "sum", "(", "counts", ")", ",", "shapes", "=", "shapes", ")", "\n", "low_sparsities", "=", "np", ".", "array", "(", "low_val", ")", "\n", "low_masks", "=", "[", "magnitude_layerwise", "(", "score", ",", "sparsity", ")", "for", "score", ",", "sparsity", "in", "zip", "(", "scores", ",", "low_sparsities", ")", "]", "\n", "high_masks", "=", "[", "np", ".", "zeros", "(", "shape", ")", "for", "shape", "in", "shapes", "]", "\n", "while", "high", "-", "low", ">", "1", ":", "\n", "    ", "middle", "=", "(", "high", "+", "low", ")", "//", "2", "\n", "middle_val", "=", "func", "(", "target_sparsity", "=", "middle", "/", "sum", "(", "counts", ")", ",", "shapes", "=", "shapes", ")", "\n", "middle_sparsities", "=", "np", ".", "array", "(", "middle_val", ")", "\n", "middle_masks", "=", "[", "magnitude_layerwise", "(", "score", ",", "sparsity", ")", "for", "score", ",", "sparsity", "in", "zip", "(", "scores", ",", "middle_sparsities", ")", "]", "\n", "effective_middle_masks", "=", "effective_masks_synflow", "(", "model", ",", "tensors", ",", "middle_masks", ")", "\n", "effective_middle_sparsity", "=", "get_overall_direct_sparsity", "(", "effective_middle_masks", ")", "\n", "if", "effective_middle_sparsity", "<=", "target_sparsity", ":", "\n", "      ", "low", ",", "high", "=", "middle", ",", "high", "\n", "low_masks", ",", "high_masks", "=", "middle_masks", ",", "high_masks", "\n", "", "else", ":", "\n", "      ", "low", ",", "high", "=", "low", ",", "middle", "\n", "low_masks", ",", "high_masks", "=", "low_masks", ",", "middle_masks", "\n", "", "", "masks", "=", "low_masks", "\n", "sparsities", "=", "func", "(", "target_sparsity", "=", "target_sparsity", ",", "shapes", "=", "shapes", ")", "\n", "logging", ".", "info", "(", "f'<pruning> requested: ({target_sparsity:.6f})'", ")", "\n", "direct_masks", "=", "[", "magnitude_layerwise", "(", "score", ",", "sparsity", ")", "for", "score", ",", "sparsity", "in", "zip", "(", "scores", ",", "sparsities", ")", "]", "\n", "logging", ".", "info", "(", "f'<pruning> direct pruning overall sparsity: {get_overall_direct_sparsity(effective_masks_synflow(model,tensors,direct_masks)):.6f}'", ")", "\n", "logging", ".", "info", "(", "f'<pruning> effective pruning overall sparsity: {get_overall_direct_sparsity(effective_masks_synflow(model,tensors,masks)):.6f}'", ")", "\n", "return", "low_masks", "\n", "\n"]], "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.pruning.uniform_quotas": [[175, 177], ["numpy.full", "len"], "function", ["None"], ["", "def", "uniform_quotas", "(", "target_sparsity", ",", "shapes", ",", "**", "kwargs", ")", ":", "\n", "  ", "return", "np", ".", "full", "(", "len", "(", "shapes", ")", ",", "target_sparsity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.data.get_data": [[7, 42], ["tensorflow.keras.utils.to_categorical", "tensorflow.keras.utils.to_categorical", "tensorflow.keras.preprocessing.image.ImageDataGenerator", "tensorflow.keras.preprocessing.image.ImageDataGenerator.fit", "dataset.lower", "tensorflow.keras.datasets.mnist.load_data", "numpy.divide", "numpy.divide", "numpy.expand_dims", "numpy.expand_dims", "dataset.lower", "tensorflow.keras.datasets.cifar10.load_data", "len", "len", "dataset.lower", "tensorflow.keras.datasets.cifar100.load_data", "dataset.lower", "tinyimagenet.load_images", "numpy.float32", "numpy.float32", "numpy.transpose", "numpy.transpose"], "function", ["home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.tinyimagenet.load_images"], ["def", "get_data", "(", "dataset", ",", "path_to_data", "=", "None", ")", ":", "\n", "  ", "aug_config", "=", "{", "}", "\n", "if", "dataset", ".", "lower", "(", ")", "==", "'mnist'", ":", "\n", "    ", "(", "train_X", ",", "train_y", ")", ",", "(", "test_X", ",", "test_y", ")", "=", "datasets", ".", "mnist", ".", "load_data", "(", ")", "\n", "aug_config", "[", "'rotation_range'", "]", "=", "4", "\n", "mean", ",", "std", "=", "0.1307", ",", "0.3081", "\n", "num_classes", "=", "10", "\n", "", "elif", "dataset", ".", "lower", "(", ")", "==", "'cifar10'", ":", "\n", "    ", "(", "train_X", ",", "train_y", ")", ",", "(", "test_X", ",", "test_y", ")", "=", "datasets", ".", "cifar10", ".", "load_data", "(", ")", "\n", "aug_config", "[", "'horizontal_flip'", "]", "=", "True", "\n", "aug_config", "[", "'width_shift_range'", "]", "=", "aug_config", "[", "'height_shift_range'", "]", "=", "4", "\n", "mean", ",", "std", "=", "[", "0.4914", ",", "0.4822", ",", "0.4465", "]", ",", "[", "0.2470", ",", "0.2435", ",", "0.2616", "]", "\n", "num_classes", "=", "10", "\n", "", "elif", "dataset", ".", "lower", "(", ")", "==", "'cifar100'", ":", "\n", "    ", "aug_config", "[", "'horizontal_flip'", "]", "=", "True", "\n", "aug_config", "[", "'width_shift_range'", "]", "=", "aug_config", "[", "'height_shift_range'", "]", "=", "4", "\n", "(", "train_X", ",", "train_y", ")", ",", "(", "test_X", ",", "test_y", ")", "=", "datasets", ".", "cifar100", ".", "load_data", "(", ")", "\n", "mean", ",", "std", "=", "[", "0.5071", ",", "0.4865", ",", "0.4409", "]", ",", "[", "0.2673", ",", "0.2564", ",", "0.2762", "]", "\n", "num_classes", "=", "100", "\n", "", "elif", "dataset", ".", "lower", "(", ")", "==", "'tinyimagenet'", ":", "\n", "    ", "aug_config", "[", "'horizontal_flip'", "]", "=", "True", "\n", "aug_config", "[", "'width_shift_range'", "]", "=", "aug_config", "[", "'height_shift_range'", "]", "=", "4", "\n", "train_X", ",", "train_y", ",", "test_X", ",", "test_y", "=", "load_images", "(", "path_to_data", "+", "'/tiny-imagenet-200'", ",", "200", ")", "\n", "train_X", ",", "test_X", "=", "np", ".", "float32", "(", "np", ".", "transpose", "(", "train_X", ",", "axes", "=", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", ")", ",", "np", ".", "float32", "(", "np", ".", "transpose", "(", "test_X", ",", "axes", "=", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", ")", "\n", "mean", ",", "std", "=", "[", "0.4802", ",", "0.4481", ",", "0.3975", "]", ",", "[", "0.2770", ",", "0.2691", ",", "0.2821", "]", "\n", "num_classes", "=", "200", "\n", "", "train_y", "=", "tf", ".", "keras", ".", "utils", ".", "to_categorical", "(", "train_y", ",", "num_classes", ")", "\n", "test_y", "=", "tf", ".", "keras", ".", "utils", ".", "to_categorical", "(", "test_y", ",", "num_classes", ")", "\n", "train_X", ",", "test_X", "=", "np", ".", "divide", "(", "train_X", ",", "255", ")", ",", "np", ".", "divide", "(", "test_X", ",", "255", ")", "\n", "train_X", ",", "test_X", "=", "(", "train_X", "-", "mean", ")", "/", "std", ",", "(", "test_X", "-", "mean", ")", "/", "std", "\n", "train_X", "=", "np", ".", "expand_dims", "(", "train_X", ",", "axis", "=", "3", ")", "if", "len", "(", "train_X", ".", "shape", ")", "<", "4", "else", "train_X", "# adding channel dimensions when it's not there", "\n", "test_X", "=", "np", ".", "expand_dims", "(", "test_X", ",", "axis", "=", "3", ")", "if", "len", "(", "test_X", ".", "shape", ")", "<", "4", "else", "test_X", "\n", "datagen", "=", "ImageDataGenerator", "(", "**", "aug_config", ")", "\n", "datagen", ".", "fit", "(", "train_X", ")", "\n", "return", "datagen", ",", "train_X", ",", "train_y", ",", "test_X", ",", "test_y", "", "", ""]], "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.effective_masks.stabilizer_synflow_layer": [[7, 21], ["utils.set_weights_layer", "abs", "logging.warning", "inter_model.layers[].get_weights", "inter_model().numpy", "sum", "utils.set_weights_layer", "effective_masks.stabilizer_synflow_layer", "abs.reshape", "sum", "utils.set_weights_layer", "effective_masks.stabilizer_synflow_layer", "inter_model", "abs.reshape", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.utils.set_weights_layer", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.utils.set_weights_layer", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.effective_masks.stabilizer_synflow_layer", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.utils.set_weights_layer", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.effective_masks.stabilizer_synflow_layer"], ["def", "stabilizer_synflow_layer", "(", "stab_low", ",", "stab_high", ",", "inter_model", ",", "layer", ",", "low_lim", ",", "high_lim", ",", "attempt", ")", ":", "\n", "  ", "if", "attempt", ">", "10", ":", "\n", "    ", "logging", ".", "warning", "(", "f'<effective_masks> unable to stabilize layer {layer}'", ")", "\n", "return", "0", "\n", "", "stabilizer", "=", "(", "stab_low", "+", "stab_high", ")", "/", "2", "\n", "weight", "=", "inter_model", ".", "layers", "[", "layer", "]", ".", "get_weights", "(", ")", "[", "0", "]", "\n", "set_weights_layer", "(", "inter_model", ",", "layer", ",", "weight", "*", "(", "10", "**", "stabilizer", ")", ")", "\n", "output", "=", "abs", "(", "inter_model", "(", "np", ".", "ones", "(", "[", "1", "]", "+", "inter_model", ".", "inputs", "[", "0", "]", ".", "shape", "[", "1", ":", "]", ")", ")", ".", "numpy", "(", ")", ")", "\n", "if", "sum", "(", "output", ".", "reshape", "(", "-", "1", ")", ")", ">", "10", "**", "high_lim", ":", "\n", "    ", "set_weights_layer", "(", "inter_model", ",", "layer", ",", "weight", ")", "\n", "return", "stabilizer_synflow_layer", "(", "stab_low", ",", "stabilizer", ",", "inter_model", ",", "layer", ",", "low_lim", ",", "high_lim", ",", "attempt", "+", "1", ")", "\n", "", "elif", "sum", "(", "output", ".", "reshape", "(", "-", "1", ")", ")", "<", "10", "**", "low_lim", ":", "\n", "    ", "set_weights_layer", "(", "inter_model", ",", "layer", ",", "weight", ")", "\n", "return", "stabilizer_synflow_layer", "(", "stabilizer", ",", "stab_high", ",", "inter_model", ",", "layer", ",", "low_lim", ",", "high_lim", ",", "attempt", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.effective_masks.stabilizer_synflow": [[22, 27], ["models.Model", "effective_masks.stabilizer_synflow_layer", "model.layers[].get_weights"], "function", ["home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.effective_masks.stabilizer_synflow_layer"], ["", "", "def", "stabilizer_synflow", "(", "stab_low", ",", "stab_high", ",", "model", ",", "tensors", ",", "low_lim", ",", "high_lim", ")", ":", "\n", "  ", "for", "layer", "in", "tensors", ":", "\n", "    ", "inter_model", "=", "models", ".", "Model", "(", "inputs", "=", "model", ".", "inputs", ",", "outputs", "=", "model", ".", "layers", "[", "layer", "]", ".", "output", ")", "\n", "stabilizer_synflow_layer", "(", "stab_low", ",", "stab_high", ",", "inter_model", ",", "layer", ",", "low_lim", ",", "high_lim", ",", "0", ")", "\n", "weight", "=", "model", ".", "layers", "[", "layer", "]", ".", "get_weights", "(", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.effective_masks.effective_masks_synflow": [[28, 50], ["models.get_model", "utils.set_weights_model", "tape.gradient", "numpy.concatenate", "model.inputs[].get_shape().as_list", "model.output[].get_shape().as_list", "numpy.prod", "sum", "abs", "tensorflow.GradientTape", "linear_model", "tensorflow.reduce_sum", "range", "model.name.replace().lower", "numpy.ones", "scores[].reshape", "range", "model.inputs[].get_shape", "model.output[].get_shape", "model.layers[].get_weights", "linear_model.layers[].get_weights", "zip", "len", "len", "model.name.replace", "gradient.numpy"], "function", ["home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.models.get_model", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.utils.set_weights_model"], ["", "", "def", "effective_masks_synflow", "(", "model", ",", "tensors", ",", "masks", ")", ":", "\n", "  ", "\"\"\" computes effective sparsity of a pruned model using SynFlow\n  \"\"\"", "\n", "in_shape", "=", "model", ".", "inputs", "[", "0", "]", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", ":", "]", "\n", "num_classes", "=", "model", ".", "output", "[", "0", "]", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "0", "]", "\n", "shapes", "=", "[", "model", ".", "layers", "[", "layer", "]", ".", "get_weights", "(", ")", "[", "0", "]", ".", "shape", "for", "layer", "in", "tensors", "]", "\n", "counts", "=", "[", "np", ".", "prod", "(", "shape", ")", "for", "shape", "in", "shapes", "]", "\n", "counts_sum", "=", "[", "sum", "(", "counts", "[", ":", "layer", "]", ")", "for", "layer", "in", "range", "(", "len", "(", "shapes", ")", "+", "1", ")", "]", "\n", "linear_model", ",", "linear_tensors", "=", "get_model", "(", "shape", "=", "in_shape", ",", "architecture", "=", "model", ".", "name", ".", "replace", "(", "'-'", ",", "''", ")", ".", "lower", "(", ")", ",", "batchnorm", "=", "False", ",", "activation", "=", "False", ",", "pool", "=", "'average'", ",", "output_classes", "=", "num_classes", ")", "\n", "if", "model", ".", "name", "==", "'ResNet-18'", ":", "\n", "    ", "main_tensors", "=", "linear_tensors", "[", ":", "7", "]", "+", "linear_tensors", "[", "8", ":", "12", "]", "+", "linear_tensors", "[", "13", ":", "17", "]", "+", "linear_tensors", "[", "18", ":", "]", "\n", "", "abs_inits", "=", "[", "abs", "(", "linear_model", ".", "layers", "[", "layer", "]", ".", "get_weights", "(", ")", "[", "0", "]", ")", "for", "layer", "in", "linear_tensors", "]", "\n", "set_weights_model", "(", "linear_model", ",", "linear_tensors", ",", "abs_inits", ",", "masks", "=", "masks", ")", "\n", "#stabilizer_synflow(-7,7,linear_model,main_tensors if 'ResNet' in model.name else linear_tensors,-10,38) # ad-hoc weight rescaling to stabilize network's output", "\n", "with", "tf", ".", "GradientTape", "(", "persistent", "=", "False", ")", "as", "tape", ":", "\n", "    ", "output", "=", "linear_model", "(", "np", ".", "ones", "(", "[", "1", "]", "+", "linear_model", ".", "inputs", "[", "0", "]", ".", "shape", "[", "1", ":", "]", ")", ")", "\n", "saliency", "=", "tf", ".", "reduce_sum", "(", "output", ")", "\n", "weights", "=", "[", "linear_model", ".", "layers", "[", "layer", "]", ".", "trainable_weights", "[", "0", "]", "for", "layer", "in", "linear_tensors", "]", "\n", "", "gradients", "=", "tape", ".", "gradient", "(", "saliency", ",", "weights", ")", "\n", "scores", "=", "np", ".", "concatenate", "(", "[", "(", "gradient", ".", "numpy", "(", ")", "*", "abs_init", "*", "mask", ")", ".", "reshape", "(", "-", "1", ")", "for", "gradient", ",", "abs_init", ",", "mask", "in", "zip", "(", "gradients", ",", "abs_inits", ",", "masks", ")", "]", ")", "\n", "true_masks", "=", "[", "scores", "[", "counts_sum", "[", "layer", "]", ":", "counts_sum", "[", "layer", "+", "1", "]", "]", ".", "reshape", "(", "shapes", "[", "layer", "]", ")", "!=", "0", "for", "layer", "in", "range", "(", "len", "(", "tensors", ")", ")", "]", "\n", "return", "true_masks", "\n", "\n"]], "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.effective_masks.effective_masks_custom": [[51, 69], ["effective_masks.effective_masks_denseonly", "effective_masks.effective_masks_residual", "effective_masks.effective_masks_convolutional"], "function", ["home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.effective_masks.effective_masks_denseonly", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.effective_masks.effective_masks_residual", "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.effective_masks.effective_masks_convolutional"], ["", "def", "effective_masks_custom", "(", "model_name", ",", "masks", ")", ":", "\n", "  ", "\"\"\" removes inactive neurons and connections based on topology of the network alone\n  and can sometimes underestimate the actual sparsity of the network. For example,\n  consider a kernel with a single unpruned weight in its corner. When zero-padding is\n  employed, it is possible that this weight only sees pixels from padding and should\n  therefore be considered inactivated by effective masks. While effective_masks_synflow\n  accounts for such cases, this custom method treats networks as a directed graphs only\n  and trims only those neurons / kernels that are detached from either input or output\n  layers. effective_masks_custom agrees with effective_masks_synflow on fully-connected\n  networks and some convolutional networks and always constitutes a pretty tight lower \n  bound for effective_masks_synflow, thus useful for debugging when instability is a threat. \n  \"\"\"", "\n", "if", "model_name", "==", "'LeNet-300-100'", ":", "\n", "    ", "return", "effective_masks_denseonly", "(", "masks", ")", "\n", "", "elif", "'ResNet'", "in", "model_name", ":", "\n", "    ", "return", "effective_masks_residual", "(", "model_name", ",", "masks", ")", "\n", "", "else", ":", "\n", "    ", "return", "effective_masks_convolutional", "(", "masks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.effective_masks.effective_masks_denseonly": [[70, 88], ["numpy.ones", "numpy.ones", "numpy.matmul", "way_out.append", "numpy.matmul", "way_in.append", "np.ones.reshape", "numpy.sum", "np.ones.reshape", "numpy.sum", "zip", "numpy.matmul", "enumerate", "activity[].reshape", "activity[].reshape", "len", "len", "len", "len"], "function", ["None"], ["", "", "def", "effective_masks_denseonly", "(", "masks", ")", ":", "\n", "  ", "units", "=", "[", "mask", ".", "shape", "[", "-", "2", "]", "for", "mask", "in", "masks", "]", "+", "[", "masks", "[", "-", "1", "]", ".", "shape", "[", "-", "1", "]", "]", "\n", "next_layer", "=", "np", ".", "ones", "(", "units", "[", "-", "1", "]", ")", "\n", "way_out", "=", "[", "next_layer", "]", "\n", "for", "mask", "in", "masks", "[", ":", ":", "-", "1", "]", ":", "\n", "    ", "curr_mask", "=", "np", ".", "matmul", "(", "mask", ",", "next_layer", ".", "reshape", "(", "(", "len", "(", "next_layer", ")", ",", "1", ")", ")", ")", "\n", "next_layer", "=", "np", ".", "sum", "(", "curr_mask", ",", "axis", "=", "1", ")", ">", "0", "\n", "way_out", ".", "append", "(", "next_layer", ")", "\n", "", "way_out", "=", "way_out", "[", ":", ":", "-", "1", "]", "\n", "prev_layer", "=", "np", ".", "ones", "(", "units", "[", "0", "]", ")", "\n", "way_in", "=", "[", "prev_layer", "]", "\n", "for", "mask", "in", "masks", ":", "\n", "    ", "curr_mask", "=", "np", ".", "matmul", "(", "prev_layer", ".", "reshape", "(", "(", "1", ",", "len", "(", "prev_layer", ")", ")", ")", ",", "mask", ")", "\n", "prev_layer", "=", "np", ".", "sum", "(", "curr_mask", ",", "axis", "=", "0", ")", ">", "0", "\n", "way_in", ".", "append", "(", "prev_layer", ")", "\n", "", "activity", "=", "[", "w_in", "*", "w_out", "for", "w_in", ",", "w_out", "in", "zip", "(", "way_in", ",", "way_out", ")", "]", "\n", "effective_masks", "=", "[", "mask", "*", "np", ".", "matmul", "(", "activity", "[", "i", "]", ".", "reshape", "(", "(", "len", "(", "activity", "[", "i", "]", ")", ",", "1", ")", ")", ",", "activity", "[", "i", "+", "1", "]", ".", "reshape", "(", "(", "1", ",", "len", "(", "activity", "[", "i", "+", "1", "]", ")", ")", ")", ")", "for", "i", ",", "mask", "in", "enumerate", "(", "masks", ")", "]", "\n", "return", "effective_masks", "\n", "\n"]], "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.effective_masks.effective_masks_convolutional": [[89, 131], ["numpy.ones", "range", "numpy.ones", "range", "numpy.array", "len", "numpy.matmul", "way_out.append", "numpy.matmul", "way_out.append", "len", "numpy.matmul", "way_in.append", "numpy.matmul", "way_in.append", "zip", "numpy.repeat", "numpy.matmul", "np.array.reshape", "numpy.sum", "numpy.array", "way_out.append", "numpy.sum", "np.array.reshape", "numpy.sum", "numpy.sum", "np.tile.reshape", "numpy.sum", "numpy.tile", "way_in.append", "np.tile.reshape", "numpy.sum", "activity[].reshape", "activity[].reshape", "len", "numpy.repeat", "numpy.where", "numpy.where", "len", "len", "len", "len", "len", "len", "len", "sum", "range", "numpy.matmul", "activity[].reshape", "activity[].reshape", "len", "len", "range"], "function", ["None"], ["", "def", "effective_masks_convolutional", "(", "masks", ")", ":", "\n", "  ", "conv", "=", "[", "1", "]", "+", "[", "1", "if", "len", "(", "mask", ".", "shape", ")", ">", "2", "else", "0", "for", "mask", "in", "masks", "]", "+", "[", "0", "]", "\n", "next_layer", "=", "np", ".", "ones", "(", "masks", "[", "-", "1", "]", ".", "shape", "[", "-", "1", "]", ")", "\n", "way_out", "=", "[", "next_layer", "]", "\n", "for", "curr", "in", "range", "(", "len", "(", "masks", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "    ", "if", "not", "conv", "[", "curr", "+", "1", "]", ":", "\n", "      ", "curr_mask", "=", "np", ".", "matmul", "(", "masks", "[", "curr", "]", ",", "next_layer", ".", "reshape", "(", "(", "len", "(", "next_layer", ")", ",", "1", ")", ")", ")", "\n", "next_layer", "=", "np", ".", "sum", "(", "curr_mask", ",", "axis", "=", "1", ")", ">", "0", "\n", "way_out", ".", "append", "(", "next_layer", ")", "\n", "if", "conv", "[", "curr", "]", ":", "\n", "        ", "channels", "=", "masks", "[", "curr", "-", "1", "]", ".", "shape", "[", "3", "]", "\n", "area", "=", "len", "(", "next_layer", ")", "//", "channels", "\n", "next_layer", "=", "np", ".", "array", "(", "[", "sum", "(", "next_layer", "[", "[", "channel", "+", "channels", "*", "i", "for", "i", "in", "range", "(", "area", ")", "]", "]", ")", ">", "0", "for", "channel", "in", "range", "(", "channels", ")", "]", ")", "\n", "way_out", ".", "append", "(", "next_layer", ")", "\n", "", "", "else", ":", "\n", "      ", "mask", "=", "np", ".", "sum", "(", "masks", "[", "curr", "]", ",", "axis", "=", "(", "0", ",", "1", ")", ")", ">", "0", "\n", "curr_mask", "=", "np", ".", "matmul", "(", "mask", ",", "next_layer", ".", "reshape", "(", "(", "len", "(", "next_layer", ")", ",", "1", ")", ")", ")", "\n", "next_layer", "=", "np", ".", "sum", "(", "curr_mask", ",", "axis", "=", "1", ")", ">", "0", "\n", "way_out", ".", "append", "(", "next_layer", ")", "\n", "", "", "way_out", "=", "way_out", "[", ":", ":", "-", "1", "]", "\n", "prev_layer", "=", "np", ".", "ones", "(", "masks", "[", "0", "]", ".", "shape", "[", "2", "]", ")", "\n", "way_in", "=", "[", "prev_layer", "]", "\n", "for", "curr", "in", "range", "(", "1", ",", "len", "(", "masks", ")", "+", "1", ")", ":", "\n", "    ", "if", "conv", "[", "curr", "]", ":", "\n", "      ", "mask", "=", "np", ".", "sum", "(", "masks", "[", "curr", "-", "1", "]", ",", "axis", "=", "(", "0", ",", "1", ")", ")", ">", "0", "\n", "curr_mask", "=", "np", ".", "matmul", "(", "prev_layer", ".", "reshape", "(", "(", "1", ",", "len", "(", "prev_layer", ")", ")", ")", ",", "mask", ")", "\n", "prev_layer", "=", "np", ".", "sum", "(", "curr_mask", ",", "axis", "=", "0", ")", ">", "0", "\n", "way_in", ".", "append", "(", "prev_layer", ")", "\n", "if", "not", "conv", "[", "curr", "+", "1", "]", ":", "\n", "        ", "channels", "=", "masks", "[", "curr", "-", "1", "]", ".", "shape", "[", "3", "]", "\n", "area", "=", "masks", "[", "curr", "]", ".", "shape", "[", "0", "]", "//", "channels", "\n", "prev_layer", "=", "np", ".", "tile", "(", "prev_layer", ",", "area", ")", "\n", "way_in", ".", "append", "(", "prev_layer", ")", "\n", "", "", "else", ":", "\n", "      ", "curr_mask", "=", "np", ".", "matmul", "(", "prev_layer", ".", "reshape", "(", "(", "1", ",", "len", "(", "prev_layer", ")", ")", ")", ",", "masks", "[", "curr", "-", "1", "]", ")", "\n", "prev_layer", "=", "np", ".", "sum", "(", "curr_mask", ",", "axis", "=", "0", ")", ">", "0", "\n", "way_in", ".", "append", "(", "prev_layer", ")", "\n", "", "", "activity", "=", "[", "w_in", "*", "w_out", "for", "w_in", ",", "w_out", "in", "zip", "(", "way_in", ",", "way_out", ")", "]", "\n", "conv", "=", "np", ".", "array", "(", "conv", ")", "\n", "effective_masks_conv", "=", "[", "masks", "[", "i", "]", "*", "np", ".", "repeat", "(", "np", ".", "repeat", "(", "np", ".", "matmul", "(", "activity", "[", "i", "]", ".", "reshape", "(", "(", "len", "(", "activity", "[", "i", "]", ")", ",", "1", ")", ")", ",", "activity", "[", "i", "+", "1", "]", ".", "reshape", "(", "(", "1", ",", "len", "(", "activity", "[", "i", "+", "1", "]", ")", ")", ")", ")", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ",", "masks", "[", "i", "]", ".", "shape", "[", "1", "]", ",", "axis", "=", "0", ")", "[", "np", ".", "newaxis", ",", ":", ",", ":", ",", ":", "]", ",", "masks", "[", "i", "]", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "for", "i", "in", "np", ".", "where", "(", "conv", "==", "1", ")", "[", "0", "]", "[", ":", "-", "1", "]", "]", "\n", "effective_masks_dense", "=", "[", "masks", "[", "i", "-", "1", "]", "*", "np", ".", "matmul", "(", "activity", "[", "i", "]", ".", "reshape", "(", "(", "len", "(", "activity", "[", "i", "]", ")", ",", "1", ")", ")", ",", "activity", "[", "i", "+", "1", "]", ".", "reshape", "(", "(", "1", ",", "len", "(", "activity", "[", "i", "+", "1", "]", ")", ")", ")", ")", "for", "i", "in", "np", ".", "where", "(", "conv", "==", "0", ")", "[", "0", "]", "[", ":", "-", "1", "]", "]", "\n", "return", "effective_masks_conv", "+", "effective_masks_dense", "\n", "\n"]], "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.effective_masks.effective_masks_residual": [[132, 239], ["numpy.ones", "range", "numpy.ones", "range", "enumerate", "numpy.array", "zip", "real_effective_masks.insert", "len", "numpy.matmul", "way_out.append", "numpy.matmul", "numpy.squeeze", "numpy.zeros", "way_out.append", "len", "len", "way_in.append", "numpy.matmul", "way_in.append", "zip", "numpy.zeros", "numpy.repeat", "numpy.matmul", "numpy.expand_dims", "enumerate", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "np.array.reshape", "numpy.sum", "numpy.array", "way_out.append", "numpy.sum", "np.array.reshape", "numpy.sum", "numpy.matmul", "numpy.matmul", "numpy.squeeze", "numpy.tile", "way_in.append", "np.tile.reshape", "numpy.squeeze", "max", "len", "numpy.sum", "numpy.matmul", "numpy.squeeze", "numpy.tile", "activity[].reshape", "numpy.expand_dims", "zip", "len", "len", "way_out_shortcuts.append", "numpy.sum", "numpy.sum", "len", "numpy.sum", "numpy.matmul", "numpy.squeeze", "np.squeeze.reshape", "way_in_shortcuts.append", "np.tile.reshape", "np.squeeze.reshape", "numpy.repeat", "numpy.where", "numpy.where", "numpy.matmul", "len", "len", "len", "sum", "numpy.tile().reshape", "sum", "np.squeeze.reshape", "len", "sum", "len", "len", "len", "len", "numpy.sum", "numpy.matmul", "numpy.squeeze", "len", "sum", "len", "len", "len", "numpy.expand_dims", "numpy.expand_dims", "len", "sum", "range", "len", "sum", "np.squeeze.reshape", "enumerate", "numpy.matmul", "numpy.tile", "len", "activity[].reshape", "len", "len", "sum", "range"], "function", ["None"], ["", "def", "effective_masks_residual", "(", "model_name", ",", "masks", ")", ":", "\n", "  ", "conv", "=", "[", "1", "]", "+", "[", "1", "if", "len", "(", "mask", ".", "shape", ")", ">", "2", "else", "0", "for", "mask", "in", "masks", "]", "+", "[", "0", "]", "\n", "if", "model_name", "==", "'ResNet-18'", ":", "\n", "    ", "masks_shortcut", "=", "[", "np", ".", "ones", "(", "64", ")", ",", "np", ".", "ones", "(", "64", ")", ",", "masks", "[", "7", "]", ",", "np", ".", "ones", "(", "128", ")", ",", "masks", "[", "12", "]", ",", "np", ".", "ones", "(", "256", ")", ",", "masks", "[", "17", "]", ",", "np", ".", "ones", "(", "512", ")", "]", "if", "model_name", "==", "'ResNet-18'", "else", "[", "np", ".", "ones", "(", "5", ")", ",", "np", ".", "ones", "(", "5", ")", ",", "masks", "[", "7", "]", ",", "np", ".", "ones", "(", "6", ")", ",", "masks", "[", "12", "]", ",", "np", ".", "ones", "(", "7", ")", ",", "masks", "[", "17", "]", ",", "np", ".", "ones", "(", "8", ")", "]", "\n", "original_shortcut_masks", "=", "[", "masks", "[", "7", "]", ",", "masks", "[", "12", "]", ",", "masks", "[", "17", "]", "]", "\n", "masks", "=", "masks", "[", ":", "7", "]", "+", "masks", "[", "8", ":", "12", "]", "+", "masks", "[", "13", ":", "17", "]", "+", "masks", "[", "18", ":", "]", "\n", "conv", "=", "[", "1", "]", "+", "[", "1", "if", "len", "(", "mask", ".", "shape", ")", ">", "2", "else", "0", "for", "mask", "in", "masks", "]", "+", "[", "0", "]", "\n", "forward_support", "=", "[", "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "backward_support", "=", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", "]", "\n", "residual_skip", ",", "first_backward_supporter", "=", "2", ",", "1", "\n", "layer_shortcut_inds", "=", "[", "(", "5", ",", "8", ")", ",", "(", "9", ",", "12", ")", ",", "(", "13", ",", "16", ")", "]", "\n", "shortcut_masks_positions", "=", "[", "7", ",", "12", ",", "17", "]", "\n", "", "next_layer", "=", "np", ".", "ones", "(", "masks", "[", "-", "1", "]", ".", "shape", "[", "-", "1", "]", ")", "\n", "way_out", "=", "[", "next_layer", "]", "\n", "way_out_shortcuts", "=", "[", "]", "\n", "for", "curr", "in", "range", "(", "len", "(", "masks", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "    ", "if", "not", "conv", "[", "curr", "+", "1", "]", ":", "\n", "      ", "curr_mask", "=", "np", ".", "matmul", "(", "masks", "[", "curr", "]", ",", "next_layer", ".", "reshape", "(", "(", "len", "(", "next_layer", ")", ",", "1", ")", ")", ")", "\n", "next_layer", "=", "np", ".", "sum", "(", "curr_mask", ",", "axis", "=", "1", ")", ">", "0", "\n", "way_out", ".", "append", "(", "next_layer", ")", "\n", "if", "conv", "[", "curr", "]", ":", "\n", "        ", "channels", "=", "masks", "[", "curr", "-", "1", "]", ".", "shape", "[", "3", "]", "\n", "area", "=", "len", "(", "next_layer", ")", "//", "channels", "\n", "next_layer", "=", "np", ".", "array", "(", "[", "sum", "(", "next_layer", "[", "[", "channel", "+", "channels", "*", "i", "for", "i", "in", "range", "(", "area", ")", "]", "]", ")", ">", "0", "for", "channel", "in", "range", "(", "channels", ")", "]", ")", "\n", "way_out", ".", "append", "(", "next_layer", ")", "\n", "", "", "else", ":", "\n", "      ", "mask", "=", "np", ".", "sum", "(", "masks", "[", "curr", "]", ",", "axis", "=", "(", "0", ",", "1", ")", ")", ">", "0", "\n", "curr_mask", "=", "np", ".", "matmul", "(", "mask", ",", "next_layer", ".", "reshape", "(", "(", "len", "(", "next_layer", ")", ",", "1", ")", ")", ")", "\n", "curr_mask", "=", "np", ".", "squeeze", "(", "curr_mask", ")", "\n", "supporter_mask", "=", "np", ".", "zeros", "(", "curr_mask", ".", "shape", ")", "\n", "if", "forward_support", "[", "curr", "]", ":", "\n", "        ", "supporter", "=", "way_out", "[", "-", "residual_skip", "]", "\n", "supporter_mask", "=", "masks_shortcut", "[", "sum", "(", "forward_support", "[", ":", "curr", "]", ")", "]", "\n", "if", "len", "(", "supporter_mask", ".", "shape", ")", ">", "1", ":", "\n", "          ", "way_out_shortcuts", ".", "append", "(", "supporter", ")", "\n", "supporter_mask", "=", "np", ".", "sum", "(", "supporter_mask", ",", "axis", "=", "(", "0", ",", "1", ")", ")", "\n", "supporter_mask", "=", "supporter_mask", "*", "np", ".", "tile", "(", "supporter", ",", "supporter_mask", ".", "shape", "[", "0", "]", ")", ".", "reshape", "(", "supporter_mask", ".", "shape", ")", "\n", "supporter_mask", "=", "np", ".", "sum", "(", "supporter_mask", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "          ", "supporter_mask", "=", "supporter_mask", "*", "supporter", "\n", "", "", "next_layer", "=", "(", "curr_mask", "+", "supporter_mask", ")", ">", "0", "\n", "way_out", ".", "append", "(", "next_layer", ")", "\n", "", "", "way_out", "=", "way_out", "[", ":", ":", "-", "1", "]", "\n", "way_out_shortcuts", "=", "way_out_shortcuts", "[", ":", ":", "-", "1", "]", "\n", "prev_layer", "=", "np", ".", "ones", "(", "masks", "[", "0", "]", ".", "shape", "[", "2", "]", ")", "\n", "way_in", "=", "[", "prev_layer", "]", "\n", "way_in_shortcuts", "=", "[", "]", "\n", "for", "curr", "in", "range", "(", "1", ",", "len", "(", "masks", ")", "+", "1", ")", ":", "\n", "    ", "if", "len", "(", "way_in", ")", "==", "first_backward_supporter", "+", "1", ":", "\n", "      ", "supporter_mask_global", "=", "way_in", "[", "-", "1", "]", "\n", "", "if", "conv", "[", "curr", "]", ":", "\n", "      ", "mask", "=", "np", ".", "sum", "(", "masks", "[", "curr", "-", "1", "]", ",", "axis", "=", "(", "0", ",", "1", ")", ")", ">", "0", "\n", "if", "backward_support", "[", "curr", "]", ":", "\n", "        ", "supporter_mask", "=", "masks_shortcut", "[", "sum", "(", "backward_support", "[", ":", "curr", "]", ")", "]", "\n", "if", "len", "(", "supporter_mask", ".", "shape", ")", ">", "1", ":", "\n", "          ", "supporter_mask", "=", "np", ".", "sum", "(", "supporter_mask", ",", "axis", "=", "(", "0", ",", "1", ")", ")", "\n", "supporter_mask_global", "=", "np", ".", "matmul", "(", "supporter_mask_global", ".", "reshape", "(", "1", ",", "len", "(", "supporter_mask_global", ")", ")", ",", "supporter_mask", ")", "\n", "supporter_mask_global", "=", "np", ".", "squeeze", "(", "supporter_mask_global", ")", "\n", "", "supporter_mask_global", "=", "(", "supporter_mask_global", "+", "prev_layer", ")", ">", "0", "\n", "prev_layer", "=", "np", ".", "matmul", "(", "(", "supporter_mask_global", ")", ".", "reshape", "(", "1", ",", "len", "(", "supporter_mask_global", ")", ")", ",", "mask", ")", "\n", "if", "sum", "(", "backward_support", "[", ":", "curr", "]", ")", "<", "len", "(", "masks_shortcut", ")", "and", "len", "(", "masks_shortcut", "[", "sum", "(", "backward_support", "[", ":", "curr", "]", ")", "+", "1", "]", ".", "shape", ")", ">", "1", ":", "\n", "          ", "way_in_shortcuts", ".", "append", "(", "supporter_mask_global", ")", "\n", "", "", "else", ":", "\n", "        ", "prev_layer", "=", "np", ".", "matmul", "(", "(", "prev_layer", ")", ".", "reshape", "(", "1", ",", "len", "(", "prev_layer", ")", ")", ",", "mask", ")", "\n", "", "prev_layer", "=", "np", ".", "squeeze", "(", "prev_layer", ")", ">", "0", "\n", "way_in", ".", "append", "(", "prev_layer", ")", "\n", "if", "not", "conv", "[", "curr", "+", "1", "]", ":", "\n", "        ", "channels", "=", "masks", "[", "curr", "-", "1", "]", ".", "shape", "[", "3", "]", "\n", "area", "=", "masks", "[", "curr", "]", ".", "shape", "[", "0", "]", "//", "channels", "\n", "if", "backward_support", "[", "curr", "+", "1", "]", ":", "\n", "          ", "supporter_mask", "=", "masks_shortcut", "[", "sum", "(", "backward_support", "[", ":", "curr", "+", "1", "]", ")", "]", "\n", "if", "len", "(", "supporter_mask", ".", "shape", ")", ">", "1", ":", "\n", "            ", "supporter_mask", "=", "np", ".", "sum", "(", "supporter_mask", ",", "axis", "=", "(", "0", ",", "1", ")", ")", "\n", "supporter_mask_global", "=", "np", ".", "matmul", "(", "supporter_mask_global", ".", "reshape", "(", "1", ",", "len", "(", "supporter_mask_global", ")", ")", ",", "supporter_mask", ")", "\n", "supporter_mask_global", "=", "np", ".", "squeeze", "(", "supporter_mask_global", ")", "\n", "", "prev_layer", "=", "supporter_mask_global", "=", "(", "supporter_mask_global", "+", "prev_layer", ")", ">", "0", "\n", "", "prev_layer", "=", "np", ".", "tile", "(", "prev_layer", ",", "area", ")", "\n", "way_in", ".", "append", "(", "prev_layer", ")", "\n", "", "", "else", ":", "\n", "      ", "curr_mask", "=", "np", ".", "matmul", "(", "prev_layer", ".", "reshape", "(", "(", "1", ",", "len", "(", "prev_layer", ")", ")", ")", ",", "masks", "[", "curr", "-", "1", "]", ")", "\n", "prev_layer", "=", "np", ".", "squeeze", "(", "curr_mask", ")", ">", "0", "\n", "way_in", ".", "append", "(", "prev_layer", ")", "\n", "", "", "activity", "=", "[", "w_in", "*", "w_out", "for", "w_in", ",", "w_out", "in", "zip", "(", "way_in", ",", "way_out", ")", "]", "\n", "shortcut_activity", "=", "{", "first_backward_supporter", ":", "activity", "[", "first_backward_supporter", "]", "}", "\n", "global_supporter_activity", "=", "activity", "[", "first_backward_supporter", "]", "\n", "forward_support", "[", "max", "(", "[", "i", "for", "i", ",", "val", "in", "enumerate", "(", "forward_support", ")", "if", "val", "==", "1", "]", ")", "+", "residual_skip", "]", "=", "1", "\n", "for", "i", ",", "supporter", "in", "enumerate", "(", "forward_support", "[", ":", "-", "1", "]", ")", ":", "\n", "    ", "if", "supporter", "and", "i", ">", "1", "and", "conv", "[", "i", "]", ":", "\n", "      ", "supporter_mask", "=", "masks_shortcut", "[", "sum", "(", "forward_support", "[", ":", "i", "]", ")", "-", "1", "]", "\n", "if", "len", "(", "supporter_mask", ".", "shape", ")", ">", "1", ":", "\n", "        ", "supporter_mask", "=", "np", ".", "sum", "(", "supporter_mask", ",", "axis", "=", "(", "0", ",", "1", ")", ")", "\n", "global_supporter_activity", "=", "np", ".", "matmul", "(", "global_supporter_activity", ".", "reshape", "(", "1", ",", "len", "(", "global_supporter_activity", ")", ")", ",", "supporter_mask", ")", "\n", "global_supporter_activity", "=", "np", ".", "squeeze", "(", "global_supporter_activity", ")", "\n", "", "global_supporter_activity", "=", "(", "global_supporter_activity", "+", "activity", "[", "i", "]", ")", ">", "0", "\n", "shortcut_activity", "[", "i", "]", "=", "global_supporter_activity", "\n", "if", "not", "conv", "[", "i", "+", "1", "]", ":", "\n", "        ", "shortcut_activity", "[", "i", "+", "1", "]", "=", "np", ".", "tile", "(", "global_supporter_activity", ",", "area", ")", "\n", "", "", "else", ":", "\n", "      ", "shortcut_activity", "[", "i", "]", "=", "np", ".", "zeros", "(", "activity", "[", "i", "]", ".", "shape", ")", "\n", "", "", "conv", "=", "np", ".", "array", "(", "conv", ")", "\n", "effective_masks_conv", "=", "[", "masks", "[", "i", "]", "*", "np", ".", "repeat", "(", "np", ".", "repeat", "(", "np", ".", "matmul", "(", "(", "activity", "[", "i", "]", "+", "shortcut_activity", "[", "i", "]", ")", ".", "reshape", "(", "(", "len", "(", "activity", "[", "i", "]", ")", ",", "1", ")", ")", ",", "activity", "[", "i", "+", "1", "]", ".", "reshape", "(", "(", "1", ",", "len", "(", "activity", "[", "i", "+", "1", "]", ")", ")", ")", ")", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ",", "masks", "[", "i", "]", ".", "shape", "[", "1", "]", ",", "axis", "=", "0", ")", "[", "np", ".", "newaxis", ",", ":", ",", ":", ",", ":", "]", ",", "masks", "[", "i", "]", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "for", "i", "in", "np", ".", "where", "(", "conv", "==", "1", ")", "[", "0", "]", "[", ":", "-", "1", "]", "]", "\n", "effective_masks_dense", "=", "[", "masks", "[", "i", "-", "1", "]", "*", "np", ".", "matmul", "(", "(", "activity", "[", "i", "]", "+", "shortcut_activity", "[", "i", "]", ")", ".", "reshape", "(", "(", "len", "(", "activity", "[", "i", "]", ")", ",", "1", ")", ")", ",", "activity", "[", "i", "+", "1", "]", ".", "reshape", "(", "(", "1", ",", "len", "(", "activity", "[", "i", "+", "1", "]", ")", ")", ")", ")", "for", "i", "in", "np", ".", "where", "(", "conv", "==", "0", ")", "[", "0", "]", "[", ":", "-", "1", "]", "]", "\n", "real_effective_masks", "=", "effective_masks_conv", "+", "effective_masks_dense", "\n", "shortcut_effective_masks", "=", "[", "original_shortcut_masks", "[", "i", "]", "*", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "np", ".", "matmul", "(", "np", ".", "expand_dims", "(", "_in", ",", "1", ")", ",", "np", ".", "expand_dims", "(", "_out", ",", "0", ")", ")", ",", "0", ")", ",", "0", ")", "for", "i", ",", "(", "_out", ",", "_in", ")", "in", "enumerate", "(", "zip", "(", "way_out_shortcuts", ",", "way_in_shortcuts", ")", ")", "]", "\n", "for", "i", ",", "s_mask", "in", "zip", "(", "shortcut_masks_positions", ",", "shortcut_effective_masks", ")", ":", "\n", "    ", "real_effective_masks", ".", "insert", "(", "i", ",", "s_mask", ")", "\n", "", "return", "real_effective_masks", "", "", ""]], "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.callbacks.SubnetworkCallback.__init__": [[7, 12], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.callbacks.LogCallback.__init__"], ["  ", "def", "__init__", "(", "self", ",", "model", ",", "tensors", ",", "masks", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "tensors", "=", "tensors", "\n", "self", ".", "masks", "=", "masks", "\n", "", "def", "on_train_batch_begin", "(", "self", ",", "batch", ",", "logs", "=", "{", "}", ")", ":", "\n"]], "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.callbacks.SubnetworkCallback.on_train_batch_begin": [[12, 15], ["utils.set_weights_model", "callbacks.SubnetworkCallback.model.layers[].get_weights"], "methods", ["home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.utils.set_weights_model"], ["", "def", "on_train_batch_begin", "(", "self", ",", "batch", ",", "logs", "=", "{", "}", ")", ":", "\n", "    ", "curr_weights", "=", "[", "self", ".", "model", ".", "layers", "[", "layer", "]", ".", "get_weights", "(", ")", "[", "0", "]", "for", "layer", "in", "self", ".", "tensors", "]", "\n", "set_weights_model", "(", "self", ".", "model", ",", "self", ".", "tensors", ",", "curr_weights", ",", "masks", "=", "self", ".", "masks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.callbacks.LogCallback.__init__": [[17, 29], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.callbacks.LogCallback.__init__"], ["  ", "def", "__init__", "(", "self", ",", "model", ",", "tensors", ",", "masks", ",", "log_list", ",", "test", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "masks", "=", "masks", "\n", "self", ".", "final_weights", "=", "None", "\n", "self", ".", "test_X", ",", "self", ".", "test_y", "=", "test", "\n", "self", ".", "tensors", "=", "tensors", "\n", "self", ".", "log_list", "=", "log_list", "\n", "self", ".", "iteration", "=", "0", "\n", "self", ".", "epoch", "=", "1", "\n", "self", ".", "losses", "=", "[", "]", "\n", "self", ".", "accuracies", "=", "[", "]", "\n", "", "def", "on_train_batch_begin", "(", "self", ",", "batch", ",", "logs", "=", "{", "}", ")", ":", "\n"]], "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.callbacks.LogCallback.on_train_batch_begin": [[29, 39], ["callbacks.LogCallback.model.evaluate", "callbacks.LogCallback.losses.append", "callbacks.LogCallback.accuracies.append", "logging.info", "callbacks.LogCallback.on_train_end", "len", "sum", "callbacks.LogCallback.model.optimizer.lr", "len"], "methods", ["home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.callbacks.LogCallback.on_train_end"], ["", "def", "on_train_batch_begin", "(", "self", ",", "batch", ",", "logs", "=", "{", "}", ")", ":", "\n", "    ", "if", "self", ".", "iteration", "in", "self", ".", "log_list", ":", "\n", "      ", "test_metrics", "=", "self", ".", "model", ".", "evaluate", "(", "x", "=", "self", ".", "test_X", ",", "y", "=", "self", ".", "test_y", ",", "batch_size", "=", "128", ",", "verbose", "=", "False", ")", "\n", "self", ".", "losses", ".", "append", "(", "test_metrics", "[", "0", "]", ")", "\n", "self", ".", "accuracies", ".", "append", "(", "test_metrics", "[", "1", "]", ")", "\n", "if", "len", "(", "self", ".", "accuracies", ")", ">", "5", "and", "sum", "(", "self", ".", "accuracies", "[", "-", "3", ":", "]", ")", "<=", "3", "*", "(", "1.", "/", "len", "(", "self", ".", "test_y", "[", "0", "]", ")", ")", ":", "\n", "        ", "self", ".", "model", ".", "stop_training", "# stop training if accuracy doesn't improve on random guessing", "\n", "self", ".", "on_train_end", "(", "self", ".", "iteration", ")", "\n", "", "logging", ".", "info", "(", "f\"<callbacks> [iteration/epoch: {self.iteration}/{self.epoch}][lr: {self.model.optimizer.lr(self.iteration):.4f}][val loss: {test_metrics[0]:.4f}][val acc: {test_metrics[1]:.4f}]\"", ")", "\n", "", "self", ".", "iteration", "+=", "1", "\n", "", "def", "on_epoch_end", "(", "self", ",", "batch", ",", "logs", "=", "{", "}", ")", ":", "\n"]], "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.callbacks.LogCallback.on_epoch_end": [[39, 41], ["None"], "methods", ["None"], ["", "def", "on_epoch_end", "(", "self", ",", "batch", ",", "logs", "=", "{", "}", ")", ":", "\n", "    ", "self", ".", "epoch", "+=", "1", "\n", "", "def", "on_train_end", "(", "self", ",", "batch", ",", "logs", "=", "{", "}", ")", ":", "\n"]], "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.callbacks.LogCallback.on_train_end": [[41, 43], ["callbacks.LogCallback.model.layers[].get_weights"], "methods", ["None"], ["", "def", "on_train_end", "(", "self", ",", "batch", ",", "logs", "=", "{", "}", ")", ":", "\n", "    ", "self", ".", "final_weights", "=", "[", "self", ".", "model", ".", "layers", "[", "layer", "]", ".", "get_weights", "(", ")", "[", "0", "]", "for", "layer", "in", "self", ".", "tensors", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.utils.set_weights_layer": [[4, 10], ["numpy.ones", "len", "model.layers[].set_weights", "model.layers[].set_weights", "model.layers[].get_weights", "model.layers[].get_weights"], "function", ["None"], ["def", "set_weights_layer", "(", "model", ",", "layer", ",", "weight", ",", "mask", "=", "None", ")", ":", "\n", "  ", "mask", "=", "np", ".", "ones", "(", "weight", ".", "shape", ")", "if", "mask", "is", "None", "else", "mask", "\n", "if", "len", "(", "model", ".", "layers", "[", "layer", "]", ".", "get_weights", "(", ")", ")", "==", "1", ":", "\n", "      ", "model", ".", "layers", "[", "layer", "]", ".", "set_weights", "(", "[", "weight", "*", "mask", "]", ")", "\n", "", "else", ":", "\n", "      ", "model", ".", "layers", "[", "layer", "]", ".", "set_weights", "(", "(", "weight", "*", "mask", ",", "model", ".", "layers", "[", "layer", "]", ".", "get_weights", "(", ")", "[", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.utils.set_weights_model": [[11, 15], ["zip", "utils.set_weights_layer", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.utils.set_weights_layer"], ["", "", "def", "set_weights_model", "(", "model", ",", "tensors", ",", "weights", ",", "masks", "=", "None", ")", ":", "\n", "  ", "masks", "=", "[", "np", ".", "ones", "(", "weight", ".", "shape", ")", "for", "weight", "in", "weights", "]", "if", "masks", "is", "None", "else", "masks", "\n", "for", "weight", ",", "mask", ",", "layer", "in", "zip", "(", "weights", ",", "masks", ",", "tensors", ")", ":", "\n", "    ", "set_weights_layer", "(", "model", ",", "layer", ",", "weight", ",", "mask", "=", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.utils.get_direct_sparsity": [[16, 19], ["numpy.array", "len", "round", "float", "numpy.prod", "len", "numpy.nonzero", "matrix.reshape"], "function", ["None"], ["", "", "def", "get_direct_sparsity", "(", "matrices", ")", ":", "\n", "  ", "s", "=", "[", "round", "(", "1", "-", "float", "(", "len", "(", "np", ".", "nonzero", "(", "matrix", ".", "reshape", "(", "-", "1", ")", ")", "[", "0", "]", ")", ")", "/", "np", ".", "prod", "(", "matrix", ".", "shape", ")", ",", "9", ")", "for", "matrix", "in", "matrices", "]", "if", "len", "(", "matrices", ")", ">", "1", "else", "matrices", "[", "0", "]", "\n", "return", "np", ".", "array", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.utils.get_overall_direct_sparsity": [[20, 24], ["utils.get_direct_sparsity", "sum", "sum", "numpy.prod", "zip", "numpy.prod"], "function", ["home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.utils.get_direct_sparsity"], ["", "def", "get_overall_direct_sparsity", "(", "matrices", ")", ":", "\n", "  ", "layerwise", "=", "get_direct_sparsity", "(", "matrices", ")", "\n", "overall_sparsity", "=", "sum", "(", "i_1", "*", "i_2", "for", "i_1", ",", "i_2", "in", "zip", "(", "layerwise", ",", "[", "np", ".", "prod", "(", "matrix", ".", "shape", ")", "for", "matrix", "in", "matrices", "]", ")", ")", "/", "sum", "(", "[", "np", ".", "prod", "(", "matrix", ".", "shape", ")", "for", "matrix", "in", "matrices", "]", ")", "\n", "return", "overall_sparsity", "\n", "\n"]], "home.repos.pwc.inspect_result.avysogorets_effective-sparsity.None.utils.check_valid_sparsities": [[25, 29], ["numpy.array", "sum", "len", "logging.error", "sum", "len", "int", "int"], "function", ["None"], ["", "def", "check_valid_sparsities", "(", "sparsities", ")", ":", "\n", "  ", "if", "sum", "(", "[", "int", "(", "s", "<=", "1", "and", "s", ">=", "0", ")", "for", "s", "in", "sparsities", "]", ")", "<", "len", "(", "sparsities", ")", ":", "logging", ".", "error", "(", "f\"<utils> invalid sparsities {sparsities} encountered.\"", ")", "\n", "assert", "sum", "(", "[", "int", "(", "s", "<=", "1", "and", "s", ">=", "0", ")", "for", "s", "in", "sparsities", "]", ")", "==", "len", "(", "sparsities", ")", ",", "f\"<utils> invalid sparsities {sparsities} encountered.\"", "\n", "return", "np", ".", "array", "(", "sparsities", ")", "\n", "", ""]]}