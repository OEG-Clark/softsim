{"home.repos.pwc.inspect_result.acecreamu_ssim-pan.None.train.main": [[5, 71], ["options.train_options.TrainOptions().parse", "data.data_loader.CreateDataLoader", "data.data_loader.CreateDataLoader.load_data", "len", "print", "range", "Pix2PixModel", "PanModel.initialize", "time.time", "enumerate", "print", "PanModel.update_learning_rate", "options.train_options.TrainOptions", "PanModel", "PanModel.initialize", "time.time", "PanModel.set_input", "PanModel.optimize_parameters", "print", "PanModel.save", "PanModel.save", "PanModel.get_current_errors", "model.get_current_errors.items", "print", "print", "PanModel.save", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.options.base_options.BaseOptions.parse", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.data.data_loader.CreateDataLoader", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.data.base_data_loader.BaseDataLoader.load_data", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.base_model.BaseModel.update_learning_rate", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pix2pix_model.Pix2PixModel.set_input", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pix2pix_model.Pix2PixModel.optimize_parameters", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pix2pix_model.Pix2PixModel.save", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pix2pix_model.Pix2PixModel.save", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pix2pix_model.Pix2PixModel.get_current_errors", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pix2pix_model.Pix2PixModel.save"], ["def", "main", "(", ")", ":", "\n", "    ", "opt", "=", "TrainOptions", "(", ")", ".", "parse", "(", ")", "\n", "data_loader", "=", "CreateDataLoader", "(", "opt", ")", "\n", "dataset", "=", "data_loader", ".", "load_data", "(", ")", "\n", "dataset_size", "=", "len", "(", "data_loader", ")", "\n", "print", "(", "'#training images = %d'", "%", "dataset_size", ")", "\n", "\n", "# read pix2pix/PAN moodel", "\n", "if", "opt", ".", "model", "==", "'pix2pix'", ":", "\n", "        ", "assert", "(", "opt", ".", "dataset_mode", "==", "'aligned'", ")", "\n", "from", "models", ".", "pix2pix_model", "import", "Pix2PixModel", "\n", "model", "=", "Pix2PixModel", "(", ")", "\n", "model", ".", "initialize", "(", "opt", ")", "\n", "", "elif", "opt", ".", "model", "==", "'pan'", ":", "\n", "        ", "from", "models", ".", "pan_model", "import", "PanModel", "\n", "model", "=", "PanModel", "(", ")", "\n", "model", ".", "initialize", "(", "opt", ")", "\n", "\n", "", "total_steps", "=", "0", "\n", "\n", "batch_size", "=", "opt", ".", "batchSize", "\n", "print_freq", "=", "opt", ".", "print_freq", "\n", "epoch_count", "=", "opt", ".", "epoch_count", "\n", "niter", "=", "opt", ".", "niter", "\n", "niter_decay", "=", "opt", ".", "niter_decay", "\n", "display_freq", "=", "opt", ".", "display_freq", "\n", "save_latest_freq", "=", "opt", ".", "save_latest_freq", "\n", "save_epoch_freq", "=", "opt", ".", "save_epoch_freq", "\n", "\n", "for", "epoch", "in", "range", "(", "epoch_count", ",", "niter", "+", "niter_decay", "+", "1", ")", ":", "\n", "        ", "epoch_start_time", "=", "time", ".", "time", "(", ")", "\n", "epoch_iter", "=", "0", "\n", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "dataset", ")", ":", "\n", "# data --> (1, 3, 256, 256)", "\n", "            ", "iter_start_time", "=", "time", ".", "time", "(", ")", "\n", "total_steps", "+=", "batch_size", "\n", "epoch_iter", "+=", "batch_size", "\n", "model", ".", "set_input", "(", "data", ")", "\n", "model", ".", "optimize_parameters", "(", ")", "\n", "\n", "if", "total_steps", "%", "print_freq", "==", "0", ":", "\n", "                ", "errors", "=", "model", ".", "get_current_errors", "(", ")", "\n", "t", "=", "(", "time", ".", "time", "(", ")", "-", "iter_start_time", ")", "/", "batch_size", "\n", "\n", "message", "=", "'(epoch: %d, iters: %d, time: %.3f) '", "%", "(", "epoch", ",", "epoch_iter", ",", "t", ")", "\n", "for", "k", ",", "v", "in", "errors", ".", "items", "(", ")", ":", "\n", "                    ", "message", "+=", "'%s: %.3f '", "%", "(", "k", ",", "v", ")", "\n", "", "print", "(", "message", ")", "\n", "\n", "# save latest weights", "\n", "", "if", "total_steps", "%", "save_latest_freq", "==", "0", ":", "\n", "                ", "print", "(", "'saving the latest model (epoch %d, total_steps %d)'", "%", "\n", "(", "epoch", ",", "total_steps", ")", ")", "\n", "model", ".", "save", "(", "'latest'", ")", "\n", "\n", "# save weights periodicaly", "\n", "", "", "if", "epoch", "%", "save_epoch_freq", "==", "0", ":", "\n", "            ", "print", "(", "'saving the model at the end of epoch %d, iters %d'", "%", "\n", "(", "epoch", ",", "total_steps", ")", ")", "\n", "model", ".", "save", "(", "'latest'", ")", "\n", "model", ".", "save", "(", "epoch", ")", "\n", "\n", "", "print", "(", "'End of epoch %d / %d \\t Time Taken: %d sec'", "%", "\n", "(", "epoch", ",", "niter", "+", "niter_decay", ",", "time", ".", "time", "(", ")", "-", "epoch_start_time", ")", ")", "\n", "model", ".", "update_learning_rate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.None.test.main": [[8, 47], ["options.test_options.TestOptions().parse", "data.data_loader.CreateDataLoader", "data.data_loader.CreateDataLoader.load_data", "util.visualizer.Visualizer", "os.path.join", "util.html.HTML", "enumerate", "html.HTML.save", "Pix2PixModel", "PanModel.initialize", "PanModel.set_input", "PanModel.test", "PanModel.get_current_visuals", "PanModel.get_image_paths", "print", "util.visualizer.Visualizer.save_images", "options.test_options.TestOptions", "PanModel", "PanModel.initialize"], "function", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.options.base_options.BaseOptions.parse", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.data.data_loader.CreateDataLoader", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.data.base_data_loader.BaseDataLoader.load_data", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pix2pix_model.Pix2PixModel.save", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pix2pix_model.Pix2PixModel.set_input", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pix2pix_model.Pix2PixModel.test", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pix2pix_model.Pix2PixModel.get_current_visuals", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pix2pix_model.Pix2PixModel.get_image_paths", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.visualizer.Visualizer.save_images", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.options.base_options.BaseOptions.initialize"], ["def", "main", "(", ")", ":", "\n", "    ", "opt", "=", "TestOptions", "(", ")", ".", "parse", "(", ")", "\n", "opt", ".", "nThreads", "=", "1", "# test code only supports nThreads = 1", "\n", "opt", ".", "batchSize", "=", "1", "# test code only supports batchSize = 1", "\n", "opt", ".", "serial_batches", "=", "True", "# no shuffle", "\n", "opt", ".", "no_flip", "=", "True", "# no flip", "\n", "\n", "data_loader", "=", "CreateDataLoader", "(", "opt", ")", "\n", "dataset", "=", "data_loader", ".", "load_data", "(", ")", "\n", "\n", "# read pix2pix/PAN model", "\n", "if", "opt", ".", "model", "==", "'pix2pix'", ":", "\n", "        ", "assert", "(", "opt", ".", "dataset_mode", "==", "'aligned'", ")", "\n", "from", "models", ".", "pix2pix_model", "import", "Pix2PixModel", "\n", "model", "=", "Pix2PixModel", "(", ")", "\n", "model", ".", "initialize", "(", "opt", ")", "\n", "", "elif", "opt", ".", "model", "==", "'pan'", ":", "\n", "        ", "from", "models", ".", "pan_model", "import", "PanModel", "\n", "model", "=", "PanModel", "(", ")", "\n", "model", ".", "initialize", "(", "opt", ")", "\n", "\n", "", "visualizer", "=", "Visualizer", "(", "opt", ")", "\n", "\n", "# create website", "\n", "web_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "results_dir", ",", "opt", ".", "name", ",", "'%s_%s'", "%", "(", "opt", ".", "phase", ",", "opt", ".", "which_epoch", ")", ")", "\n", "webpage", "=", "html", ".", "HTML", "(", "web_dir", ",", "'Experiment = %s, Phase = %s, Epoch = %s'", "%", "(", "opt", ".", "name", ",", "opt", ".", "phase", ",", "opt", ".", "which_epoch", ")", ")", "\n", "\n", "# test", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "dataset", ")", ":", "\n", "        ", "if", "i", ">=", "opt", ".", "how_many", ":", "# default 50 images", "\n", "            ", "break", "\n", "", "model", ".", "set_input", "(", "data", ")", "\n", "model", ".", "test", "(", ")", "\n", "visuals", "=", "model", ".", "get_current_visuals", "(", ")", "\n", "img_path", "=", "model", ".", "get_image_paths", "(", ")", "\n", "print", "(", "'process image... %s'", "%", "img_path", ")", "\n", "visualizer", ".", "save_images", "(", "webpage", ",", "visuals", ",", "img_path", ")", "\n", "\n", "", "webpage", ".", "save", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.html.HTML.__init__": [[7, 21], ["os.path.join", "dominate.document", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "meta", "str"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "web_dir", ",", "title", ",", "reflesh", "=", "0", ")", ":", "\n", "        ", "self", ".", "title", "=", "title", "\n", "self", ".", "web_dir", "=", "web_dir", "\n", "self", ".", "img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "web_dir", ",", "'images'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "web_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "web_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "img_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "img_dir", ")", "\n", "# print(self.img_dir)", "\n", "\n", "", "self", ".", "doc", "=", "dominate", ".", "document", "(", "title", "=", "title", ")", "\n", "if", "reflesh", ">", "0", ":", "\n", "            ", "with", "self", ".", "doc", ".", "head", ":", "\n", "                ", "meta", "(", "http_equiv", "=", "\"reflesh\"", ",", "content", "=", "str", "(", "reflesh", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.html.HTML.get_image_dir": [[22, 24], ["None"], "methods", ["None"], ["", "", "", "def", "get_image_dir", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "img_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.html.HTML.add_header": [[25, 28], ["h3"], "methods", ["None"], ["", "def", "add_header", "(", "self", ",", "str", ")", ":", "\n", "        ", "with", "self", ".", "doc", ":", "\n", "            ", "h3", "(", "str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.html.HTML.add_table": [[29, 32], ["table", "html.HTML.doc.add"], "methods", ["None"], ["", "", "def", "add_table", "(", "self", ",", "border", "=", "1", ")", ":", "\n", "        ", "self", ".", "t", "=", "table", "(", "border", "=", "border", ",", "style", "=", "\"table-layout: fixed;\"", ")", "\n", "self", ".", "doc", ".", "add", "(", "self", ".", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.html.HTML.add_images": [[33, 44], ["html.HTML.add_table", "tr", "zip", "td", "p", "br", "p", "a", "img", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.html.HTML.add_table"], ["", "def", "add_images", "(", "self", ",", "ims", ",", "txts", ",", "links", ",", "width", "=", "400", ")", ":", "\n", "        ", "self", ".", "add_table", "(", ")", "\n", "with", "self", ".", "t", ":", "\n", "            ", "with", "tr", "(", ")", ":", "\n", "                ", "for", "im", ",", "txt", ",", "link", "in", "zip", "(", "ims", ",", "txts", ",", "links", ")", ":", "\n", "                    ", "with", "td", "(", "style", "=", "\"word-wrap: break-word;\"", ",", "halign", "=", "\"center\"", ",", "valign", "=", "\"top\"", ")", ":", "\n", "                        ", "with", "p", "(", ")", ":", "\n", "                            ", "with", "a", "(", "href", "=", "os", ".", "path", ".", "join", "(", "'images'", ",", "link", ")", ")", ":", "\n", "                                ", "img", "(", "style", "=", "\"width:%dpx\"", "%", "width", ",", "src", "=", "os", ".", "path", ".", "join", "(", "'images'", ",", "im", ")", ")", "\n", "", "br", "(", ")", "\n", "p", "(", "txt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.html.HTML.save": [[45, 50], ["open", "open.write", "open.close", "html.HTML.doc.render"], "methods", ["None"], ["", "", "", "", "", "", "def", "save", "(", "self", ")", ":", "\n", "        ", "html_file", "=", "'%s/index.html'", "%", "self", ".", "web_dir", "\n", "f", "=", "open", "(", "html_file", ",", "'wt'", ")", "\n", "f", ".", "write", "(", "self", ".", "doc", ".", "render", "(", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.png.encode": [[4, 33], ["len", "range", "struct.pack", "struct.pack", "png.encode.chunk"], "function", ["None"], ["def", "encode", "(", "buf", ",", "width", ",", "height", ")", ":", "\n", "  ", "\"\"\" buf: must be bytes or a bytearray in py3, a regular string in py2. formatted RGBRGB... \"\"\"", "\n", "assert", "(", "width", "*", "height", "*", "3", "==", "len", "(", "buf", ")", ")", "\n", "bpp", "=", "3", "\n", "\n", "def", "raw_data", "(", ")", ":", "\n", "# reverse the vertical line order and add null bytes at the start", "\n", "    ", "row_bytes", "=", "width", "*", "bpp", "\n", "for", "row_start", "in", "range", "(", "(", "height", "-", "1", ")", "*", "width", "*", "bpp", ",", "-", "1", ",", "-", "row_bytes", ")", ":", "\n", "      ", "yield", "b'\\x00'", "\n", "yield", "buf", "[", "row_start", ":", "row_start", "+", "row_bytes", "]", "\n", "\n", "", "", "def", "chunk", "(", "tag", ",", "data", ")", ":", "\n", "    ", "return", "[", "\n", "struct", ".", "pack", "(", "\"!I\"", ",", "len", "(", "data", ")", ")", ",", "\n", "tag", ",", "\n", "data", ",", "\n", "struct", ".", "pack", "(", "\"!I\"", ",", "0xFFFFFFFF", "&", "zlib", ".", "crc32", "(", "data", ",", "zlib", ".", "crc32", "(", "tag", ")", ")", ")", "\n", "]", "\n", "\n", "", "SIGNATURE", "=", "b'\\x89PNG\\r\\n\\x1a\\n'", "\n", "COLOR_TYPE_RGB", "=", "2", "\n", "COLOR_TYPE_RGBA", "=", "6", "\n", "bit_depth", "=", "8", "\n", "return", "b''", ".", "join", "(", "\n", "[", "SIGNATURE", "]", "+", "\n", "chunk", "(", "b'IHDR'", ",", "struct", ".", "pack", "(", "\"!2I5B\"", ",", "width", ",", "height", ",", "bit_depth", ",", "COLOR_TYPE_RGB", ",", "0", ",", "0", ",", "0", ")", ")", "+", "\n", "chunk", "(", "b'IDAT'", ",", "zlib", ".", "compress", "(", "b''", ".", "join", "(", "raw_data", "(", ")", ")", ",", "9", ")", ")", "+", "\n", "chunk", "(", "b'IEND'", ",", "b''", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.visualizer.Visualizer.__init__": [[9, 29], ["os.path.join", "visdom.Visdom", "os.path.join", "os.path.join", "print", "util.mkdirs", "open", "time.strftime", "log_file.write"], "methods", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.util.mkdirs"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "# self.opt = opt", "\n", "        ", "self", ".", "display_id", "=", "opt", ".", "display_id", "\n", "self", ".", "use_html", "=", "opt", ".", "isTrain", "and", "not", "opt", ".", "no_html", "\n", "self", ".", "win_size", "=", "opt", ".", "display_winsize", "\n", "self", ".", "name", "=", "opt", ".", "name", "\n", "if", "self", ".", "display_id", ">", "0", ":", "\n", "            ", "import", "visdom", "\n", "self", ".", "vis", "=", "visdom", ".", "Visdom", "(", "port", "=", "opt", ".", "display_port", ")", "\n", "self", ".", "display_single_pane_ncols", "=", "opt", ".", "display_single_pane_ncols", "\n", "\n", "", "if", "self", ".", "use_html", ":", "\n", "            ", "self", ".", "web_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ",", "'web'", ")", "\n", "self", ".", "img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "web_dir", ",", "'images'", ")", "\n", "print", "(", "'create web directory %s...'", "%", "self", ".", "web_dir", ")", "\n", "util", ".", "mkdirs", "(", "[", "self", ".", "web_dir", ",", "self", ".", "img_dir", "]", ")", "\n", "", "self", ".", "log_name", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ",", "'loss_log.txt'", ")", "\n", "with", "open", "(", "self", ".", "log_name", ",", "\"a\"", ")", "as", "log_file", ":", "\n", "            ", "now", "=", "time", ".", "strftime", "(", "\"%c\"", ")", "\n", "log_file", ".", "write", "(", "'================ Training Loss (%s) ================\\n'", "%", "now", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.visualizer.Visualizer.display_current_results": [[31, 92], ["visuals.items", "html.HTML", "range", "html.HTML.save", "int", "visuals.items", "visualizer.Visualizer.vis.images", "visualizer.Visualizer.vis.text", "visuals.items", "os.path.join", "util.save_image", "html.HTML.add_header", "visuals.items", "html.HTML.add_images", "numpy.ceil", "images.append", "numpy.ones_like", "images.append", "visualizer.Visualizer.vis.image", "ims.append", "txts.append", "links.append", "next", "image_numpy.transpose", "image_numpy.transpose", "dict", "dict", "image_numpy.transpose", "iter", "len", "dict", "visuals.values", "visuals.items"], "methods", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pix2pix_model.Pix2PixModel.save", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.util.save_image", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.html.HTML.add_header", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.html.HTML.add_images"], ["", "", "def", "display_current_results", "(", "self", ",", "visuals", ",", "epoch", ")", ":", "\n", "        ", "if", "self", ".", "display_id", ">", "0", ":", "# show images in the browser", "\n", "            ", "if", "self", ".", "display_single_pane_ncols", ">", "0", ":", "\n", "                ", "h", ",", "w", "=", "next", "(", "iter", "(", "visuals", ".", "values", "(", ")", ")", ")", ".", "shape", "[", ":", "2", "]", "\n", "table_css", "=", "\"\"\"<style>\n    table {border-collapse: separate; border-spacing:4px; white-space:nowrap; text-align:center}\n    table td {width: %dpx; height: %dpx; padding: 4px; outline: 4px solid black}\n</style>\"\"\"", "%", "(", "w", ",", "h", ")", "\n", "ncols", "=", "self", ".", "display_single_pane_ncols", "\n", "title", "=", "self", ".", "name", "\n", "label_html", "=", "''", "\n", "label_html_row", "=", "''", "\n", "nrows", "=", "int", "(", "np", ".", "ceil", "(", "len", "(", "visuals", ".", "items", "(", ")", ")", "/", "ncols", ")", ")", "\n", "images", "=", "[", "]", "\n", "idx", "=", "0", "\n", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                    ", "label_html_row", "+=", "'<td>%s</td>'", "%", "label", "\n", "images", ".", "append", "(", "image_numpy", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", ")", "\n", "idx", "+=", "1", "\n", "if", "idx", "%", "ncols", "==", "0", ":", "\n", "                        ", "label_html", "+=", "'<tr>%s</tr>'", "%", "label_html_row", "\n", "label_html_row", "=", "''", "\n", "", "", "white_image", "=", "np", ".", "ones_like", "(", "image_numpy", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", ")", "*", "255", "\n", "while", "idx", "%", "ncols", "!=", "0", ":", "\n", "                    ", "images", ".", "append", "(", "white_image", ")", "\n", "label_html_row", "+=", "'<td></td>'", "\n", "idx", "+=", "1", "\n", "", "if", "label_html_row", "!=", "''", ":", "\n", "                    ", "label_html", "+=", "'<tr>%s</tr>'", "%", "label_html_row", "\n", "# pane col = image row", "\n", "", "self", ".", "vis", ".", "images", "(", "images", ",", "nrow", "=", "ncols", ",", "win", "=", "self", ".", "display_id", "+", "1", ",", "\n", "padding", "=", "2", ",", "opts", "=", "dict", "(", "title", "=", "title", "+", "' images'", ")", ")", "\n", "label_html", "=", "'<table>%s</table>'", "%", "label_html", "\n", "self", ".", "vis", ".", "text", "(", "table_css", "+", "label_html", ",", "win", "=", "self", ".", "display_id", "+", "2", ",", "\n", "opts", "=", "dict", "(", "title", "=", "title", "+", "' labels'", ")", ")", "\n", "", "else", ":", "\n", "                ", "idx", "=", "1", "\n", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                    ", "self", ".", "vis", ".", "image", "(", "image_numpy", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", ",", "opts", "=", "dict", "(", "title", "=", "label", ")", ",", "\n", "win", "=", "self", ".", "display_id", "+", "idx", ")", "\n", "idx", "+=", "1", "\n", "\n", "", "", "", "if", "self", ".", "use_html", ":", "# save images to a html file", "\n", "            ", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                ", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "'epoch%.3d_%s.png'", "%", "(", "epoch", ",", "label", ")", ")", "\n", "util", ".", "save_image", "(", "image_numpy", ",", "img_path", ")", "\n", "# update website", "\n", "", "webpage", "=", "html", ".", "HTML", "(", "self", ".", "web_dir", ",", "'Experiment name = %s'", "%", "self", ".", "name", ",", "reflesh", "=", "1", ")", "\n", "for", "n", "in", "range", "(", "epoch", ",", "0", ",", "-", "1", ")", ":", "\n", "                ", "webpage", ".", "add_header", "(", "'epoch [%d]'", "%", "n", ")", "\n", "ims", "=", "[", "]", "\n", "txts", "=", "[", "]", "\n", "links", "=", "[", "]", "\n", "\n", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                    ", "img_path", "=", "'epoch%.3d_%s.png'", "%", "(", "n", ",", "label", ")", "\n", "ims", ".", "append", "(", "img_path", ")", "\n", "txts", ".", "append", "(", "label", ")", "\n", "links", ".", "append", "(", "img_path", ")", "\n", "", "webpage", ".", "add_images", "(", "ims", ",", "txts", ",", "links", ",", "width", "=", "self", ".", "win_size", ")", "\n", "", "webpage", ".", "save", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.visualizer.Visualizer.print_current_errors": [[94, 102], ["errors.items", "print", "open", "log_file.write"], "methods", ["None"], ["", "", "def", "print_current_errors", "(", "self", ",", "epoch", ",", "i", ",", "errors", ",", "t", ")", ":", "\n", "        ", "message", "=", "'(epoch: %d, iters: %d, time: %.3f) '", "%", "(", "epoch", ",", "i", ",", "t", ")", "\n", "for", "k", ",", "v", "in", "errors", ".", "items", "(", ")", ":", "\n", "            ", "message", "+=", "'%s: %.3f '", "%", "(", "k", ",", "v", ")", "\n", "\n", "", "print", "(", "message", ")", "\n", "with", "open", "(", "self", ".", "log_name", ",", "\"a\"", ")", "as", "log_file", ":", "\n", "            ", "log_file", ".", "write", "(", "'%s\\n'", "%", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.visualizer.Visualizer.save_images": [[104, 123], ["webpage.get_image_dir", "ntpath.basename", "webpage.add_header", "visuals.items", "webpage.add_images", "os.path.splitext", "os.path.join", "util.save_image", "ims.append", "txts.append", "links.append"], "methods", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.html.HTML.get_image_dir", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.html.HTML.add_header", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.html.HTML.add_images", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.util.save_image"], ["", "", "def", "save_images", "(", "self", ",", "webpage", ",", "visuals", ",", "image_path", ")", ":", "\n", "        ", "image_dir", "=", "webpage", ".", "get_image_dir", "(", ")", "\n", "short_path", "=", "ntpath", ".", "basename", "(", "image_path", "[", "0", "]", ")", "\n", "name", "=", "os", ".", "path", ".", "splitext", "(", "short_path", ")", "[", "0", "]", "\n", "\n", "webpage", ".", "add_header", "(", "name", ")", "\n", "ims", "=", "[", "]", "\n", "txts", "=", "[", "]", "\n", "links", "=", "[", "]", "\n", "\n", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "            ", "image_name", "=", "'%s_%s.png'", "%", "(", "name", ",", "label", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "image_dir", ",", "image_name", ")", "\n", "util", ".", "save_image", "(", "image_numpy", ",", "save_path", ")", "\n", "\n", "ims", ".", "append", "(", "image_name", ")", "\n", "txts", ".", "append", "(", "label", ")", "\n", "links", ".", "append", "(", "image_name", ")", "\n", "", "webpage", ".", "add_images", "(", "ims", ",", "txts", ",", "links", ",", "width", "=", "self", ".", "win_size", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.get_data.GetData.__init__": [[29, 36], ["url_dict.get", "technique.lower"], "methods", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.get_data.GetData.get"], ["def", "__init__", "(", "self", ",", "technique", "=", "'cyclegan'", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "url_dict", "=", "{", "\n", "'pix2pix'", ":", "'https://people.eecs.berkeley.edu/~tinghuiz/projects/pix2pix/datasets'", ",", "\n", "'cyclegan'", ":", "'https://people.eecs.berkeley.edu/~taesung_park/CycleGAN/datasets'", "\n", "}", "\n", "self", ".", "url", "=", "url_dict", ".", "get", "(", "technique", ".", "lower", "(", ")", ")", "\n", "self", ".", "_verbose", "=", "verbose", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.get_data.GetData._print": [[37, 40], ["print"], "methods", ["None"], ["", "def", "_print", "(", "self", ",", "text", ")", ":", "\n", "        ", "if", "self", ".", "_verbose", ":", "\n", "            ", "print", "(", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.get_data.GetData._get_options": [[41, 47], ["bs4.BeautifulSoup", "bs4.BeautifulSoup.find_all", "h.text.endswith"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_get_options", "(", "r", ")", ":", "\n", "        ", "soup", "=", "BeautifulSoup", "(", "r", ".", "text", ",", "'lxml'", ")", "\n", "options", "=", "[", "h", ".", "text", "for", "h", "in", "soup", ".", "find_all", "(", "'a'", ",", "href", "=", "True", ")", "\n", "if", "h", ".", "text", ".", "endswith", "(", "(", "'.zip'", ",", "'tar.gz'", ")", ")", "]", "\n", "return", "options", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.get_data.GetData._present_options": [[48, 57], ["requests.get", "get_data.GetData._get_options", "print", "enumerate", "input", "print", "int"], "methods", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.get_data.GetData.get", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.get_data.GetData._get_options"], ["", "def", "_present_options", "(", "self", ")", ":", "\n", "        ", "r", "=", "requests", ".", "get", "(", "self", ".", "url", ")", "\n", "options", "=", "self", ".", "_get_options", "(", "r", ")", "\n", "print", "(", "'Options:\\n'", ")", "\n", "for", "i", ",", "o", "in", "enumerate", "(", "options", ")", ":", "\n", "            ", "print", "(", "\"{0}: {1}\"", ".", "format", "(", "i", ",", "o", ")", ")", "\n", "", "choice", "=", "input", "(", "\"\\nPlease enter the number of the \"", "\n", "\"dataset above you wish to download:\"", ")", "\n", "return", "options", "[", "int", "(", "choice", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.get_data.GetData._download_data": [[58, 80], ["os.path.basename", "os.path.join", "os.path.basename.endswith", "get_data.GetData._print", "zipfile.ZipFile.extractall", "zipfile.ZipFile.close", "os.remove", "os.path.isdir", "os.makedirs", "open", "requests.get", "f.write", "tarfile.open", "os.path.basename.endswith", "zipfile.ZipFile", "ValueError"], "methods", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.get_data.GetData._print", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.get_data.GetData.get"], ["", "def", "_download_data", "(", "self", ",", "dataset_url", ",", "save_path", ")", ":", "\n", "        ", "if", "not", "isdir", "(", "save_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "\n", "", "base", "=", "basename", "(", "dataset_url", ")", "\n", "temp_save_path", "=", "join", "(", "save_path", ",", "base", ")", "\n", "\n", "with", "open", "(", "temp_save_path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "r", "=", "requests", ".", "get", "(", "dataset_url", ")", "\n", "f", ".", "write", "(", "r", ".", "content", ")", "\n", "\n", "", "if", "base", ".", "endswith", "(", "'.tar.gz'", ")", ":", "\n", "            ", "obj", "=", "tarfile", ".", "open", "(", "temp_save_path", ")", "\n", "", "elif", "base", ".", "endswith", "(", "'.zip'", ")", ":", "\n", "            ", "obj", "=", "ZipFile", "(", "temp_save_path", ",", "'r'", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown File Type: {0}.\"", ".", "format", "(", "base", ")", ")", "\n", "\n", "", "self", ".", "_print", "(", "\"Unpacking Data...\"", ")", "\n", "obj", ".", "extractall", "(", "save_path", ")", "\n", "obj", ".", "close", "(", ")", "\n", "os", ".", "remove", "(", "temp_save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.get_data.GetData.get": [[81, 116], ["os.path.join", "os.path.isdir", "os.path.abspath", "get_data.GetData._present_options", "warnings.warn", "get_data.GetData._print", "get_data.GetData._download_data", "get_data.GetData.split"], "methods", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.get_data.GetData._present_options", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.get_data.GetData._print", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.get_data.GetData._download_data"], ["", "def", "get", "(", "self", ",", "save_path", ",", "dataset", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n\n        Download a dataset.\n\n        Args:\n            save_path : str\n                A directory to save the data to.\n            dataset : str, optional\n                A specific dataset to download.\n                Note: this must include the file extension.\n                If None, options will be presented for you\n                to choose from.\n\n        Returns:\n            save_path_full : str\n                The absolute path to the downloaded data.\n\n        \"\"\"", "\n", "if", "dataset", "is", "None", ":", "\n", "            ", "selected_dataset", "=", "self", ".", "_present_options", "(", ")", "\n", "", "else", ":", "\n", "            ", "selected_dataset", "=", "dataset", "\n", "\n", "", "save_path_full", "=", "join", "(", "save_path", ",", "selected_dataset", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "\n", "if", "isdir", "(", "save_path_full", ")", ":", "\n", "            ", "warn", "(", "\"\\n'{0}' already exists. Voiding Download.\"", ".", "format", "(", "\n", "save_path_full", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_print", "(", "'Downloading Data...'", ")", "\n", "url", "=", "\"{0}/{1}\"", ".", "format", "(", "self", ".", "url", ",", "selected_dataset", ")", "\n", "self", ".", "_download_data", "(", "url", ",", "save_path", "=", "save_path", ")", "\n", "\n", "", "return", "abspath", "(", "save_path_full", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.util.tensor2im": [[12, 18], ["image_tensor[].cpu().float().numpy", "np.tile.astype", "numpy.tile", "image_tensor[].cpu().float", "numpy.transpose", "image_tensor[].cpu"], "function", ["None"], ["def", "tensor2im", "(", "image_tensor", ",", "imtype", "=", "np", ".", "uint8", ")", ":", "\n", "    ", "image_numpy", "=", "image_tensor", "[", "0", "]", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "numpy", "(", ")", "\n", "if", "image_numpy", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "        ", "image_numpy", "=", "np", ".", "tile", "(", "image_numpy", ",", "(", "3", ",", "1", ",", "1", ")", ")", "\n", "", "image_numpy", "=", "(", "np", ".", "transpose", "(", "image_numpy", ",", "(", "1", ",", "2", ",", "0", ")", ")", "+", "1", ")", "/", "2.0", "*", "255.0", "\n", "return", "image_numpy", ".", "astype", "(", "imtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.util.diagnose_network": [[20, 31], ["net.parameters", "print", "print", "torch.mean", "torch.abs"], "function", ["None"], ["", "def", "diagnose_network", "(", "net", ",", "name", "=", "'network'", ")", ":", "\n", "    ", "mean", "=", "0.0", "\n", "count", "=", "0", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "if", "param", ".", "grad", "is", "not", "None", ":", "\n", "            ", "mean", "+=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "param", ".", "grad", ".", "data", ")", ")", "\n", "count", "+=", "1", "\n", "", "", "if", "count", ">", "0", ":", "\n", "        ", "mean", "=", "mean", "/", "count", "\n", "", "print", "(", "name", ")", "\n", "print", "(", "mean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.util.save_image": [[33, 36], ["PIL.Image.fromarray", "Image.fromarray.save"], "function", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pix2pix_model.Pix2PixModel.save"], ["", "def", "save_image", "(", "image_numpy", ",", "image_path", ")", ":", "\n", "    ", "image_pil", "=", "Image", ".", "fromarray", "(", "image_numpy", ")", "\n", "image_pil", ".", "save", "(", "image_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.util.info": [[37, 46], ["print", "dir", "isinstance", "getattr", "s.split", "method.ljust", "processFunc", "str", "getattr"], "function", ["None"], ["", "def", "info", "(", "object", ",", "spacing", "=", "10", ",", "collapse", "=", "1", ")", ":", "\n", "    ", "\"\"\"Print methods and doc strings.\n    Takes module, class, list, dictionary, or string.\"\"\"", "\n", "methodList", "=", "[", "e", "for", "e", "in", "dir", "(", "object", ")", "if", "isinstance", "(", "getattr", "(", "object", ",", "e", ")", ",", "collections", ".", "Callable", ")", "]", "\n", "processFunc", "=", "collapse", "and", "(", "lambda", "s", ":", "\" \"", ".", "join", "(", "s", ".", "split", "(", ")", ")", ")", "or", "(", "lambda", "s", ":", "s", ")", "\n", "print", "(", "\"\\n\"", ".", "join", "(", "[", "\"%s %s\"", "%", "\n", "(", "method", ".", "ljust", "(", "spacing", ")", ",", "\n", "processFunc", "(", "str", "(", "getattr", "(", "object", ",", "method", ")", ".", "__doc__", ")", ")", ")", "\n", "for", "method", "in", "methodList", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.util.varname": [[47, 52], ["inspect.getframeinfo", "re.search", "re.search.group", "inspect.currentframe"], "function", ["None"], ["", "def", "varname", "(", "p", ")", ":", "\n", "    ", "for", "line", "in", "inspect", ".", "getframeinfo", "(", "inspect", ".", "currentframe", "(", ")", ".", "f_back", ")", "[", "3", "]", ":", "\n", "        ", "m", "=", "re", ".", "search", "(", "r'\\bvarname\\s*\\(\\s*([A-Za-z_][A-Za-z0-9_]*)\\s*\\)'", ",", "line", ")", "\n", "if", "m", ":", "\n", "            ", "return", "m", ".", "group", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.util.print_numpy": [[53, 61], ["x.flatten.astype", "print", "x.flatten.flatten", "print", "numpy.mean", "numpy.min", "numpy.max", "numpy.median", "numpy.std"], "function", ["None"], ["", "", "", "def", "print_numpy", "(", "x", ",", "val", "=", "True", ",", "shp", "=", "False", ")", ":", "\n", "    ", "x", "=", "x", ".", "astype", "(", "np", ".", "float64", ")", "\n", "if", "shp", ":", "\n", "        ", "print", "(", "'shape,'", ",", "x", ".", "shape", ")", "\n", "", "if", "val", ":", "\n", "        ", "x", "=", "x", ".", "flatten", "(", ")", "\n", "print", "(", "'mean = %3.3f, min = %3.3f, max = %3.3f, median = %3.3f, std=%3.3f'", "%", "(", "\n", "np", ".", "mean", "(", "x", ")", ",", "np", ".", "min", "(", "x", ")", ",", "np", ".", "max", "(", "x", ")", ",", "np", ".", "median", "(", "x", ")", ",", "np", ".", "std", "(", "x", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.util.mkdirs": [[63, 69], ["isinstance", "util.mkdir", "isinstance", "util.mkdir"], "function", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.util.mkdir", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.util.mkdir"], ["", "", "def", "mkdirs", "(", "paths", ")", ":", "\n", "    ", "if", "isinstance", "(", "paths", ",", "list", ")", "and", "not", "isinstance", "(", "paths", ",", "str", ")", ":", "\n", "        ", "for", "path", "in", "paths", ":", "\n", "            ", "mkdir", "(", "path", ")", "\n", "", "", "else", ":", "\n", "        ", "mkdir", "(", "paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.util.mkdir": [[71, 74], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "", "def", "mkdir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.networks.GANLoss.__init__": [[162, 171], ["torch.Module.__init__", "torch.BCELoss", "torch.BCELoss"], "methods", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "target_real_label", "=", "1.0", ",", "target_fake_label", "=", "0.0", ",", "\n", "tensor", "=", "torch", ".", "FloatTensor", ")", ":", "\n", "        ", "super", "(", "GANLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "real_label", "=", "target_real_label", "\n", "self", ".", "fake_label", "=", "target_fake_label", "\n", "self", ".", "real_label_var", "=", "None", "\n", "self", ".", "fake_label_var", "=", "None", "\n", "self", ".", "Tensor", "=", "tensor", "\n", "self", ".", "loss", "=", "nn", ".", "BCELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.networks.GANLoss.get_target_tensor": [[172, 189], ["networks.GANLoss.Tensor().fill_", "torch.autograd.Variable", "torch.autograd.Variable", "networks.GANLoss.Tensor().fill_", "torch.autograd.Variable", "torch.autograd.Variable", "networks.GANLoss.real_label_var.numel", "input.numel", "networks.GANLoss.fake_label_var.numel", "input.numel", "networks.GANLoss.Tensor", "networks.GANLoss.Tensor", "input.size", "input.size"], "methods", ["None"], ["", "def", "get_target_tensor", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "target_tensor", "=", "None", "\n", "if", "target_is_real", ":", "\n", "            ", "create_label", "=", "(", "(", "self", ".", "real_label_var", "is", "None", ")", "or", "\n", "(", "self", ".", "real_label_var", ".", "numel", "(", ")", "!=", "input", ".", "numel", "(", ")", ")", ")", "\n", "if", "create_label", ":", "\n", "                ", "real_tensor", "=", "self", ".", "Tensor", "(", "input", ".", "size", "(", ")", ")", ".", "fill_", "(", "self", ".", "real_label", ")", "\n", "self", ".", "real_label_var", "=", "Variable", "(", "real_tensor", ",", "requires_grad", "=", "False", ")", "\n", "", "target_tensor", "=", "self", ".", "real_label_var", "\n", "", "else", ":", "\n", "            ", "create_label", "=", "(", "(", "self", ".", "fake_label_var", "is", "None", ")", "or", "\n", "(", "self", ".", "fake_label_var", ".", "numel", "(", ")", "!=", "input", ".", "numel", "(", ")", ")", ")", "\n", "if", "create_label", ":", "\n", "                ", "fake_tensor", "=", "self", ".", "Tensor", "(", "input", ".", "size", "(", ")", ")", ".", "fill_", "(", "self", ".", "fake_label", ")", "\n", "self", ".", "fake_label_var", "=", "Variable", "(", "fake_tensor", ",", "requires_grad", "=", "False", ")", "\n", "", "target_tensor", "=", "self", ".", "fake_label_var", "\n", "", "return", "target_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.networks.GANLoss.__call__": [[190, 193], ["networks.GANLoss.get_target_tensor", "networks.GANLoss.loss"], "methods", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.networks.GANLoss.get_target_tensor"], ["", "def", "__call__", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "input", ",", "target_is_real", ")", "\n", "return", "self", ".", "loss", "(", "input", ",", "target_tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.networks.UnetGenerator.__init__": [[199, 214], ["torch.Module.__init__", "networks.UnetSkipConnectionBlock", "range", "networks.UnetSkipConnectionBlock", "networks.UnetSkipConnectionBlock", "networks.UnetSkipConnectionBlock", "networks.UnetSkipConnectionBlock", "networks.UnetSkipConnectionBlock"], "methods", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "num_downs", ",", "ngf", "=", "64", ",", "\n", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_dropout", "=", "False", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "        ", "super", "(", "UnetGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gpu_ids", "=", "gpu_ids", "\n", "\n", "# construct unet structure", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "input_nc", "=", "None", ",", "submodule", "=", "None", ",", "norm_layer", "=", "norm_layer", ",", "innermost", "=", "True", ")", "\n", "for", "i", "in", "range", "(", "num_downs", "-", "5", ")", ":", "\n", "            ", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ")", "\n", "", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", "*", "4", ",", "ngf", "*", "8", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", "*", "2", ",", "ngf", "*", "4", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", ",", "ngf", "*", "2", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "output_nc", ",", "ngf", ",", "input_nc", "=", "input_nc", ",", "submodule", "=", "unet_block", ",", "outermost", "=", "True", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n", "self", ".", "model", "=", "unet_block", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.networks.UnetGenerator.forward": [[215, 220], ["isinstance", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "networks.UnetGenerator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "gpu_ids", "and", "isinstance", "(", "input", ".", "data", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", ":", "\n", "            ", "return", "nn", ".", "parallel", ".", "data_parallel", "(", "self", ".", "model", ",", "input", ",", "self", ".", "gpu_ids", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.networks.UnetSkipConnectionBlock.__init__": [[226, 270], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "norm_layer", "torch.ReLU", "torch.ReLU", "norm_layer", "torch.Sequential", "torch.Sequential", "type", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Tanh", "torch.Tanh", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "outer_nc", ",", "inner_nc", ",", "input_nc", "=", "None", ",", "\n", "submodule", "=", "None", ",", "outermost", "=", "False", ",", "innermost", "=", "False", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "super", "(", "UnetSkipConnectionBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "outermost", "=", "outermost", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "", "if", "input_nc", "is", "None", ":", "\n", "            ", "input_nc", "=", "outer_nc", "\n", "", "downconv", "=", "nn", ".", "Conv2d", "(", "input_nc", ",", "inner_nc", ",", "kernel_size", "=", "4", ",", "\n", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "\n", "downrelu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "downnorm", "=", "norm_layer", "(", "inner_nc", ")", "\n", "uprelu", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "upnorm", "=", "norm_layer", "(", "outer_nc", ")", "\n", "\n", "if", "outermost", ":", "\n", "            ", "upconv", "=", "nn", ".", "ConvTranspose2d", "(", "inner_nc", "*", "2", ",", "outer_nc", ",", "\n", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ")", "\n", "down", "=", "[", "downconv", "]", "\n", "up", "=", "[", "uprelu", ",", "upconv", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "model", "=", "down", "+", "[", "submodule", "]", "+", "up", "\n", "", "elif", "innermost", ":", "\n", "            ", "upconv", "=", "nn", ".", "ConvTranspose2d", "(", "inner_nc", ",", "outer_nc", ",", "\n", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "\n", "down", "=", "[", "downrelu", ",", "downconv", "]", "\n", "up", "=", "[", "uprelu", ",", "upconv", ",", "upnorm", "]", "\n", "model", "=", "down", "+", "up", "\n", "", "else", ":", "\n", "            ", "upconv", "=", "nn", ".", "ConvTranspose2d", "(", "inner_nc", "*", "2", ",", "outer_nc", ",", "\n", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "\n", "down", "=", "[", "downrelu", ",", "downconv", ",", "downnorm", "]", "\n", "up", "=", "[", "uprelu", ",", "upconv", ",", "upnorm", "]", "\n", "\n", "if", "use_dropout", ":", "\n", "                ", "model", "=", "down", "+", "[", "submodule", "]", "+", "up", "+", "[", "nn", ".", "Dropout", "(", "0.5", ")", "]", "\n", "", "else", ":", "\n", "                ", "model", "=", "down", "+", "[", "submodule", "]", "+", "up", "\n", "\n", "", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.networks.UnetSkipConnectionBlock.forward": [[271, 276], ["networks.UnetSkipConnectionBlock.model", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks.UnetSkipConnectionBlock.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "outermost", ":", "\n", "            ", "return", "self", ".", "model", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "cat", "(", "[", "x", ",", "self", ".", "model", "(", "x", ")", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.networks.NLayerDiscriminator.__init__": [[280, 330], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d.register_forward_hook", "range", "min", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d.register_forward_hook", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d.register_forward_hook", "torch.Sequential", "torch.Sequential", "type", "torch.LeakyReLU", "torch.LeakyReLU", "min", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d.register_forward_hook", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_sigmoid", "=", "False", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "        ", "super", "(", "NLayerDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gpu_ids", "=", "gpu_ids", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "kw", "=", "4", "\n", "padw", "=", "1", "\n", "input_conv", "=", "nn", ".", "Conv2d", "(", "input_nc", ",", "ndf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", "\n", "sequence", "=", "[", "\n", "input_conv", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "\n", "input_conv", ".", "register_forward_hook", "(", "self", ".", "add_intermediate_output", ")", "\n", "\n", "nf_mult", "=", "1", "\n", "nf_mult_prev", "=", "1", "\n", "for", "n", "in", "range", "(", "1", ",", "n_layers", ")", ":", "\n", "            ", "nf_mult_prev", "=", "nf_mult", "\n", "nf_mult", "=", "min", "(", "2", "**", "n", ",", "8", ")", "\n", "intermediate_conv", "=", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult_prev", ",", "ndf", "*", "nf_mult", ",", "\n", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ",", "bias", "=", "use_bias", ")", "\n", "sequence", "+=", "[", "\n", "intermediate_conv", ",", "\n", "norm_layer", "(", "ndf", "*", "nf_mult", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "\n", "intermediate_conv", ".", "register_forward_hook", "(", "self", ".", "add_intermediate_output", ")", "\n", "\n", "", "nf_mult_prev", "=", "nf_mult", "\n", "nf_mult", "=", "min", "(", "2", "**", "n_layers", ",", "8", ")", "\n", "intermediate_conv2", "=", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult_prev", ",", "ndf", "*", "nf_mult", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ",", "bias", "=", "use_bias", ")", "\n", "sequence", "+=", "[", "\n", "intermediate_conv2", ",", "\n", "norm_layer", "(", "ndf", "*", "nf_mult", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "\n", "intermediate_conv2", ".", "register_forward_hook", "(", "self", ".", "add_intermediate_output", ")", "\n", "\n", "last_conv", "=", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult", ",", "1", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", "\n", "sequence", "+=", "[", "last_conv", "]", "\n", "last_conv", ".", "register_forward_hook", "(", "self", ".", "add_intermediate_output", ")", "\n", "\n", "if", "use_sigmoid", ":", "\n", "            ", "sequence", "+=", "[", "nn", ".", "Sigmoid", "(", ")", "]", "\n", "\n", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "sequence", ")", "\n", "self", ".", "intermediate_outputs", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.networks.NLayerDiscriminator.forward": [[331, 337], ["len", "isinstance", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "networks.NLayerDiscriminator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "self", ".", "intermediate_outputs", "=", "[", "]", "\n", "if", "len", "(", "self", ".", "gpu_ids", ")", "and", "isinstance", "(", "input", ".", "data", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", ":", "\n", "            ", "return", "nn", ".", "parallel", ".", "data_parallel", "(", "self", ".", "model", ",", "input", ",", "self", ".", "gpu_ids", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.networks.NLayerDiscriminator.add_intermediate_output": [[338, 340], ["networks.NLayerDiscriminator.intermediate_outputs.append", "torch.autograd.Variable", "torch.autograd.Variable"], "methods", ["None"], ["", "", "def", "add_intermediate_output", "(", "self", ",", "conv", ",", "input", ",", "output", ")", ":", "\n", "        ", "self", ".", "intermediate_outputs", ".", "append", "(", "Variable", "(", "output", ".", "data", ",", "requires_grad", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.networks.NLayerDiscriminator.get_intermediate_outputs": [[341, 343], ["None"], "methods", ["None"], ["", "def", "get_intermediate_outputs", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "intermediate_outputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.networks.weights_init_normal": [[14, 24], ["classname.find", "torch.nn.init.uniform", "classname.find", "torch.nn.init.uniform", "classname.find", "torch.nn.init.uniform", "torch.nn.init.constant"], "function", ["None"], ["def", "weights_init_normal", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "# print(classname)", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "uniform", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "uniform", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "uniform", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "0.02", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.networks.weights_init_xavier": [[26, 36], ["classname.find", "torch.nn.init.xavier_normal", "classname.find", "torch.nn.init.xavier_normal", "classname.find", "torch.nn.init.uniform", "torch.nn.init.constant"], "function", ["None"], ["", "", "def", "weights_init_xavier", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "# print(classname)", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "xavier_normal", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "1", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "xavier_normal", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "1", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "uniform", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "0.02", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.networks.weights_init_kaiming": [[38, 48], ["classname.find", "torch.nn.init.kaiming_normal", "classname.find", "torch.nn.init.kaiming_normal", "classname.find", "torch.nn.init.uniform", "torch.nn.init.constant"], "function", ["None"], ["", "", "def", "weights_init_kaiming", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "# print(classname)", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "kaiming_normal", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "kaiming_normal", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "uniform", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "0.02", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.networks.weights_init_orthogonal": [[50, 60], ["print", "classname.find", "torch.nn.init.orthogonal", "classname.find", "torch.nn.init.orthogonal", "classname.find", "torch.nn.init.uniform", "torch.nn.init.constant"], "function", ["None"], ["", "", "def", "weights_init_orthogonal", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "print", "(", "classname", ")", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "orthogonal", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "1", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "orthogonal", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "1", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "uniform", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "0.02", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.networks.init_weights": [[62, 74], ["print", "net.apply", "net.apply", "net.apply", "net.apply", "NotImplementedError"], "function", ["None"], ["", "", "def", "init_weights", "(", "net", ",", "init_type", "=", "'normal'", ")", ":", "\n", "    ", "print", "(", "'initialization method [%s]'", "%", "init_type", ")", "\n", "if", "init_type", "==", "'normal'", ":", "\n", "        ", "net", ".", "apply", "(", "weights_init_normal", ")", "\n", "", "elif", "init_type", "==", "'xavier'", ":", "\n", "        ", "net", ".", "apply", "(", "weights_init_xavier", ")", "\n", "", "elif", "init_type", "==", "'kaiming'", ":", "\n", "        ", "net", ".", "apply", "(", "weights_init_kaiming", ")", "\n", "", "elif", "init_type", "==", "'orthogonal'", ":", "\n", "        ", "net", ".", "apply", "(", "weights_init_orthogonal", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'initialization method [%s] is not implemented'", "%", "init_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.networks.get_norm_layer": [[76, 86], ["functools.partial", "functools.partial", "NotImplementedError"], "function", ["None"], ["", "", "def", "get_norm_layer", "(", "norm_type", "=", "'instance'", ")", ":", "\n", "    ", "if", "norm_type", "==", "'batch'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "BatchNorm2d", ",", "affine", "=", "True", ")", "\n", "", "elif", "norm_type", "==", "'instance'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "", "elif", "layer_type", "==", "'none'", ":", "\n", "        ", "norm_layer", "=", "None", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'normalization layer [%s] is not found'", "%", "norm_type", ")", "\n", "", "return", "norm_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.networks.get_scheduler": [[88, 101], ["torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.ReduceLROnPlateau", "NotImplementedError", "max", "float"], "function", ["None"], ["", "def", "get_scheduler", "(", "optimizer", ",", "opt", ")", ":", "\n", "    ", "if", "opt", ".", "lr_policy", "==", "'lambda'", ":", "\n", "        ", "def", "lambda_rule", "(", "epoch", ")", ":", "\n", "            ", "lr_l", "=", "1.0", "-", "max", "(", "0", ",", "epoch", "-", "opt", ".", "niter", ")", "/", "float", "(", "opt", ".", "niter_decay", "+", "1", ")", "\n", "return", "lr_l", "\n", "", "scheduler", "=", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "lr_lambda", "=", "lambda_rule", ")", "\n", "", "elif", "opt", ".", "lr_policy", "==", "'step'", ":", "\n", "        ", "scheduler", "=", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "step_size", "=", "opt", ".", "lr_decay_iters", ",", "gamma", "=", "0.1", ")", "\n", "", "elif", "opt", ".", "lr_policy", "==", "'plateau'", ":", "\n", "        ", "scheduler", "=", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "optimizer", ",", "mode", "=", "'min'", ",", "factor", "=", "0.2", ",", "threshold", "=", "0.01", ",", "patience", "=", "5", ")", "\n", "", "else", ":", "\n", "        ", "return", "NotImplementedError", "(", "'learning rate policy [%s] is not implemented'", ",", "opt", ".", "lr_policy", ")", "\n", "", "return", "scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.networks.define_G": [[103, 121], ["networks.get_norm_layer", "networks.init_weights", "len", "torch.cuda.is_available", "torch.cuda.is_available", "networks.UnetGenerator", "len", "UnetGenerator.cuda", "networks.UnetGenerator", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.networks.get_norm_layer", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.networks.init_weights"], ["", "def", "define_G", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "which_model_netG", ",", "norm", "=", "'batch'", ",", "use_dropout", "=", "False", ",", "init_type", "=", "'normal'", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "netG", "=", "None", "\n", "use_gpu", "=", "len", "(", "gpu_ids", ")", ">", "0", "\n", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "\n", "if", "use_gpu", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "\n", "", "if", "which_model_netG", "==", "'unet_128'", ":", "\n", "        ", "netG", "=", "UnetGenerator", "(", "input_nc", ",", "output_nc", ",", "7", ",", "ngf", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ",", "gpu_ids", "=", "gpu_ids", ")", "\n", "", "elif", "which_model_netG", "==", "'unet_256'", ":", "\n", "        ", "netG", "=", "UnetGenerator", "(", "input_nc", ",", "output_nc", ",", "8", ",", "ngf", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ",", "gpu_ids", "=", "gpu_ids", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Generator model name [%s] is not recognized'", "%", "which_model_netG", ")", "\n", "", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "netG", ".", "cuda", "(", "gpu_ids", "[", "0", "]", ")", "\n", "", "init_weights", "(", "netG", ",", "init_type", "=", "init_type", ")", "\n", "return", "netG", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.networks.define_D": [[123, 142], ["networks.get_norm_layer", "networks.init_weights", "len", "torch.cuda.is_available", "torch.cuda.is_available", "networks.NLayerDiscriminator", "NLayerDiscriminator.cuda", "networks.NLayerDiscriminator", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.networks.get_norm_layer", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.networks.init_weights"], ["", "def", "define_D", "(", "input_nc", ",", "ndf", ",", "which_model_netD", ",", "\n", "n_layers_D", "=", "3", ",", "norm", "=", "'batch'", ",", "use_sigmoid", "=", "False", ",", "init_type", "=", "'normal'", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "netD", "=", "None", "\n", "use_gpu", "=", "len", "(", "gpu_ids", ")", ">", "0", "\n", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "\n", "if", "use_gpu", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "", "if", "which_model_netD", "==", "'basic'", ":", "\n", "        ", "netD", "=", "NLayerDiscriminator", "(", "input_nc", ",", "ndf", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "norm_layer", ",", "use_sigmoid", "=", "use_sigmoid", ",", "gpu_ids", "=", "gpu_ids", ")", "\n", "", "elif", "which_model_netD", "==", "'n_layers'", ":", "\n", "        ", "netD", "=", "NLayerDiscriminator", "(", "input_nc", ",", "ndf", ",", "n_layers_D", ",", "norm_layer", "=", "norm_layer", ",", "use_sigmoid", "=", "use_sigmoid", ",", "gpu_ids", "=", "gpu_ids", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Discriminator model name [%s] is not recognized'", "%", "\n", "which_model_netD", ")", "\n", "", "if", "use_gpu", ":", "\n", "        ", "netD", ".", "cuda", "(", "gpu_ids", "[", "0", "]", ")", "\n", "", "init_weights", "(", "netD", ",", "init_type", "=", "init_type", ")", "\n", "return", "netD", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.networks.print_network": [[144, 150], ["net.parameters", "print", "print", "param.numel"], "function", ["None"], ["", "def", "print_network", "(", "net", ")", ":", "\n", "    ", "num_params", "=", "0", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "print", "(", "net", ")", "\n", "print", "(", "'Total number of parameters: %d'", "%", "num_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pan_model.PanModel.name": [[13, 15], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'PanModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pan_model.PanModel.initialize": [[16, 72], ["base_model.BaseModel.initialize", "pan_model.PanModel.Tensor", "pan_model.PanModel.Tensor", "networks.define_G", "print", "networks.print_network", "print", "networks.define_D", "pan_model.PanModel.load_network", "networks.GANLoss", "torch.nn.L1Loss", "torch.optim.Adam", "torch.optim.Adam", "pan_model.PanModel.optimizers.append", "pan_model.PanModel.optimizers.append", "networks.print_network", "pan_model.PanModel.load_network", "pan_model.PanModel.netG.parameters", "pan_model.PanModel.netD.parameters", "pan_model.PanModel.schedulers.append", "networks.get_scheduler"], "methods", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.networks.define_G", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.networks.print_network", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.networks.define_D", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.networks.print_network", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.networks.get_scheduler"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "BaseModel", ".", "initialize", "(", "self", ",", "opt", ")", "\n", "\n", "self", ".", "isTrain", "=", "opt", ".", "isTrain", "\n", "\n", "# define tensors", "\n", "self", ".", "input_A", "=", "self", ".", "Tensor", "(", "opt", ".", "batchSize", ",", "opt", ".", "input_nc", ",", "\n", "opt", ".", "fineSize", ",", "opt", ".", "fineSize", ")", "\n", "self", ".", "input_B", "=", "self", ".", "Tensor", "(", "opt", ".", "batchSize", ",", "opt", ".", "output_nc", ",", "\n", "opt", ".", "fineSize", ",", "opt", ".", "fineSize", ")", "\n", "\n", "# load/define networks", "\n", "# init_type: he(kaiming) or xavier", "\n", "self", ".", "netG", "=", "networks", ".", "define_G", "(", "opt", ".", "input_nc", ",", "opt", ".", "output_nc", ",", "opt", ".", "ngf", ",", "\n", "opt", ".", "which_model_netG", ",", "opt", ".", "norm", ",", "not", "opt", ".", "no_dropout", ",", "opt", ".", "init_type", ",", "self", ".", "gpu_ids", ")", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "use_sigmoid", "=", "opt", ".", "no_lsgan", "\n", "self", ".", "netD", "=", "networks", ".", "define_D", "(", "opt", ".", "input_nc", "+", "opt", ".", "output_nc", ",", "opt", ".", "ndf", ",", "\n", "opt", ".", "which_model_netD", ",", "\n", "opt", ".", "n_layers_D", ",", "opt", ".", "norm", ",", "use_sigmoid", ",", "opt", ".", "init_type", ",", "self", ".", "gpu_ids", ")", "\n", "\n", "", "if", "not", "self", ".", "isTrain", "or", "opt", ".", "continue_train", ":", "\n", "            ", "self", ".", "load_network", "(", "self", ".", "netG", ",", "'G'", ",", "opt", ".", "which_epoch", ")", "\n", "# train from pre-trained weights", "\n", "if", "self", ".", "isTrain", ":", "\n", "                ", "self", ".", "load_network", "(", "self", ".", "netD", ",", "'D'", ",", "opt", ".", "which_epoch", ")", "\n", "\n", "", "", "if", "self", ".", "isTrain", ":", "\n", "\n", "# hyper parameters", "\n", "            ", "self", ".", "pan_lambdas", "=", "opt", ".", "pan_lambdas", "\n", "self", ".", "pan_mergin_m", "=", "opt", ".", "pan_mergin_m", "\n", "\n", "self", ".", "old_lr", "=", "opt", ".", "lr", "\n", "# define loss functions", "\n", "self", ".", "criterionGAN", "=", "networks", ".", "GANLoss", "(", "tensor", "=", "self", ".", "Tensor", ")", "\n", "self", ".", "criterionPAN", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "criterionSSIM", "=", "pytorch_msssim", ".", "msssim", "\n", "\n", "# initialize optimizers", "\n", "self", ".", "schedulers", "=", "[", "]", "\n", "self", ".", "optimizers", "=", "[", "]", "\n", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "netG", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "self", ".", "optimizer_D", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "netD", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_G", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_D", ")", "\n", "for", "optimizer", "in", "self", ".", "optimizers", ":", "\n", "                ", "self", ".", "schedulers", ".", "append", "(", "networks", ".", "get_scheduler", "(", "optimizer", ",", "opt", ")", ")", "\n", "\n", "", "", "print", "(", "'---------- Networks initialized -------------'", ")", "\n", "networks", ".", "print_network", "(", "self", ".", "netG", ")", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "networks", ".", "print_network", "(", "self", ".", "netD", ")", "\n", "", "print", "(", "'-----------------------------------------------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pan_model.PanModel.set_input": [[73, 80], ["pan_model.PanModel.input_A.resize_().copy_", "pan_model.PanModel.input_B.resize_().copy_", "pan_model.PanModel.input_A.resize_", "pan_model.PanModel.input_B.resize_", "input_A.size", "input_B.size"], "methods", ["None"], ["", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "        ", "AtoB", "=", "self", ".", "opt", ".", "which_direction", "==", "'AtoB'", "\n", "input_A", "=", "input", "[", "'A'", "if", "AtoB", "else", "'B'", "]", "\n", "input_B", "=", "input", "[", "'B'", "if", "AtoB", "else", "'A'", "]", "\n", "self", ".", "input_A", ".", "resize_", "(", "input_A", ".", "size", "(", ")", ")", ".", "copy_", "(", "input_A", ")", "\n", "self", ".", "input_B", ".", "resize_", "(", "input_B", ".", "size", "(", ")", ")", ".", "copy_", "(", "input_B", ")", "\n", "self", ".", "image_paths", "=", "input", "[", "'A_paths'", "if", "AtoB", "else", "'B_paths'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pan_model.PanModel.forward": [[81, 85], ["torch.autograd.Variable", "pan_model.PanModel.netG.forward", "torch.autograd.Variable"], "methods", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.pytorch_msssim.__init__.MSSSIM.forward"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "self", ".", "real_A", "=", "Variable", "(", "self", ".", "input_A", ")", "\n", "self", ".", "fake_B", "=", "self", ".", "netG", ".", "forward", "(", "self", ".", "real_A", ")", "\n", "self", ".", "real_B", "=", "Variable", "(", "self", ".", "input_B", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pan_model.PanModel.test": [[87, 91], ["torch.autograd.Variable", "pan_model.PanModel.netG.forward", "torch.autograd.Variable"], "methods", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.pytorch_msssim.__init__.MSSSIM.forward"], ["", "def", "test", "(", "self", ")", ":", "\n", "        ", "self", ".", "real_A", "=", "Variable", "(", "self", ".", "input_A", ",", "volatile", "=", "True", ")", "\n", "self", ".", "fake_B", "=", "self", ".", "netG", ".", "forward", "(", "self", ".", "real_A", ")", "\n", "self", ".", "real_B", "=", "Variable", "(", "self", ".", "input_B", ",", "volatile", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pan_model.PanModel.get_image_paths": [[93, 95], ["None"], "methods", ["None"], ["", "def", "get_image_paths", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "image_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pan_model.PanModel.backward_D": [[96, 130], ["torch.cat", "pan_model.PanModel.netD.forward", "pan_model.PanModel.criterionGAN", "pan_model.PanModel.netD.get_intermediate_outputs", "torch.cat", "pan_model.PanModel.netD.forward", "pan_model.PanModel.criterionGAN", "pan_model.PanModel.netD.get_intermediate_outputs", "zip", "pan_model.PanModel.loss_D.backward", "torch.cat.detach", "torch.autograd.Variable", "pan_model.PanModel.criterionPAN", "pan_model.PanModel.Tensor", "torch.autograd.Variable", "numpy.array", "pan_model.PanModel.Tensor", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.pytorch_msssim.__init__.MSSSIM.forward", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.networks.NLayerDiscriminator.get_intermediate_outputs", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.pytorch_msssim.__init__.MSSSIM.forward", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.networks.NLayerDiscriminator.get_intermediate_outputs"], ["", "def", "backward_D", "(", "self", ")", ":", "\n", "# Fake", "\n", "        ", "fake_AB", "=", "torch", ".", "cat", "(", "(", "self", ".", "real_A", ",", "self", ".", "fake_B", ")", ",", "1", ")", "\n", "#fake_AB --> torch.Size([1, 6, 256, 256])", "\n", "\n", "# detach: make fake_AB volatile", "\n", "self", ".", "pred_fake", "=", "self", ".", "netD", ".", "forward", "(", "fake_AB", ".", "detach", "(", ")", ")", "\n", "self", ".", "loss_D_fake", "=", "self", ".", "criterionGAN", "(", "self", ".", "pred_fake", ",", "False", ")", "\n", "\n", "# outputs of intermediate layers", "\n", "fake_inters", "=", "self", ".", "netD", ".", "get_intermediate_outputs", "(", ")", "\n", "\n", "# Real", "\n", "real_AB", "=", "torch", ".", "cat", "(", "(", "self", ".", "real_A", ",", "self", ".", "real_B", ")", ",", "1", ")", "\n", "self", ".", "pred_real", "=", "self", ".", "netD", ".", "forward", "(", "real_AB", ")", "\n", "self", ".", "loss_D_real", "=", "self", ".", "criterionGAN", "(", "self", ".", "pred_real", ",", "True", ")", "\n", "\n", "# outputs of intermediate layers", "\n", "real_inters", "=", "self", ".", "netD", ".", "get_intermediate_outputs", "(", ")", "\n", "\n", "# calc Parceptual Adversarial Loss", "\n", "self", ".", "loss_PAN", "=", "0", "\n", "for", "(", "fake_i", ",", "real_i", ",", "lam", ")", "in", "zip", "(", "fake_inters", ",", "real_inters", ",", "self", ".", "pan_lambdas", ")", ":", "\n", "            ", "self", ".", "loss_PAN", "+=", "self", ".", "criterionPAN", "(", "fake_i", ",", "real_i", ")", "*", "lam", "\n", "\n", "", "if", "self", ".", "loss_PAN", ".", "data", "[", "0", "]", ">", "self", ".", "pan_mergin_m", ":", "\n", "            ", "loss_PAN", "=", "Variable", "(", "self", ".", "Tensor", "(", "np", ".", "array", "(", "[", "0", "]", ",", "dtype", "=", "np", ".", "float", ")", ")", ",", "requires_grad", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "loss_PAN", "=", "Variable", "(", "self", ".", "Tensor", "(", "np", ".", "array", "(", "[", "self", ".", "pan_mergin_m", "]", ",", "dtype", "=", "np", ".", "float", ")", ")", ",", "requires_grad", "=", "False", ")", "-", "self", ".", "loss_PAN", "\n", "\n", "# Combined loss", "\n", "", "self", ".", "loss_D", "=", "(", "self", ".", "loss_D_fake", "+", "self", ".", "loss_D_real", ")", "*", "0.5", "+", "loss_PAN", "\n", "\n", "self", ".", "loss_D", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pan_model.PanModel.backward_G": [[131, 144], ["torch.cat", "pan_model.PanModel.netD.forward", "pan_model.PanModel.criterionGAN", "pan_model.PanModel.loss_G.backward", "pan_model.PanModel.criterionSSIM"], "methods", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.pytorch_msssim.__init__.MSSSIM.forward"], ["", "def", "backward_G", "(", "self", ",", "retain", "=", "False", ")", ":", "\n", "# First, G(A) should fake the discriminator", "\n", "        ", "fake_AB", "=", "torch", ".", "cat", "(", "(", "self", ".", "real_A", ",", "self", ".", "fake_B", ")", ",", "1", ")", "\n", "pred_fake", "=", "self", ".", "netD", ".", "forward", "(", "fake_AB", ")", "\n", "self", ".", "loss_G_GAN", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "True", ")", "\n", "\n", "# Second, G(A) = B", "\n", "self", ".", "loss_SSIM", "=", "-", "self", ".", "criterionSSIM", "(", "self", ".", "fake_B", ",", "self", ".", "real_B", ")", "*", "100", "#self.opt.lambda_SSIM", "\n", "\n", "# Combined loss", "\n", "self", ".", "loss_G", "=", "self", ".", "loss_G_GAN", "+", "self", ".", "loss_PAN", "+", "self", ".", "loss_SSIM", "\n", "\n", "self", ".", "loss_G", ".", "backward", "(", "retain_graph", "=", "retain", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pan_model.PanModel.optimize_parameters": [[145, 165], ["pan_model.PanModel.forward", "pan_model.PanModel.optimizer_D.zero_grad", "pan_model.PanModel.backward_D", "pan_model.PanModel.optimizer_D.step", "pan_model.PanModel.optimizer_G.zero_grad", "pan_model.PanModel.backward_G", "pan_model.PanModel.optimizer_G.step"], "methods", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.pytorch_msssim.__init__.MSSSIM.forward", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pix2pix_model.Pix2PixModel.backward_D", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pix2pix_model.Pix2PixModel.backward_G"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "forward", "(", ")", "\n", "\n", "# update D", "\n", "self", ".", "optimizer_D", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward_D", "(", ")", "\n", "self", ".", "optimizer_D", ".", "step", "(", ")", "\n", "\n", "# # update G 3 times", "\n", "# for i in range(3):", "\n", "#     self.optimizer_G.zero_grad()", "\n", "#     if i == 2:", "\n", "#         self.backward_G(retain=False)", "\n", "#     else:", "\n", "#         self.backward_G(retain=True)", "\n", "#     self.optimizer_G.step()", "\n", "\n", "self", ".", "optimizer_G", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward_G", "(", ")", "\n", "self", ".", "optimizer_G", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pan_model.PanModel.get_current_errors": [[166, 172], ["collections.OrderedDict"], "methods", ["None"], ["", "def", "get_current_errors", "(", "self", ")", ":", "\n", "        ", "return", "OrderedDict", "(", "[", "(", "'G_GAN'", ",", "self", ".", "loss_G_GAN", ".", "data", "[", "0", "]", ")", ",", "\n", "(", "'PAN'", ",", "self", ".", "loss_PAN", ".", "data", "[", "0", "]", ")", ",", "\n", "(", "'SSIM'", ",", "self", ".", "loss_SSIM", ".", "data", "[", "0", "]", ")", ",", "\n", "(", "'D_real'", ",", "self", ".", "loss_D_real", ".", "data", "[", "0", "]", ")", ",", "\n", "(", "'D_fake'", ",", "self", ".", "loss_D_fake", ".", "data", "[", "0", "]", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pan_model.PanModel.get_current_visuals": [[174, 179], ["util.tensor2im", "util.tensor2im", "util.tensor2im", "collections.OrderedDict"], "methods", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.util.tensor2im", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.util.tensor2im", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.util.tensor2im"], ["", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "        ", "real_A", "=", "util", ".", "tensor2im", "(", "self", ".", "real_A", ".", "data", ")", "\n", "fake_B", "=", "util", ".", "tensor2im", "(", "self", ".", "fake_B", ".", "data", ")", "\n", "real_B", "=", "util", ".", "tensor2im", "(", "self", ".", "real_B", ".", "data", ")", "\n", "return", "OrderedDict", "(", "[", "(", "'real_A'", ",", "real_A", ")", ",", "(", "'fake_B'", ",", "fake_B", ")", ",", "(", "'real_B'", ",", "real_B", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pan_model.PanModel.save": [[180, 183], ["pan_model.PanModel.save_network", "pan_model.PanModel.save_network"], "methods", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.base_model.BaseModel.save_network"], ["", "def", "save", "(", "self", ",", "label", ")", ":", "\n", "        ", "self", ".", "save_network", "(", "self", ".", "netG", ",", "'G'", ",", "label", ",", "self", ".", "gpu_ids", ")", "\n", "self", ".", "save_network", "(", "self", ".", "netD", ",", "'D'", ",", "label", ",", "self", ".", "gpu_ids", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pan_model_original.PanModel.name": [[12, 14], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'PanModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pan_model_original.PanModel.initialize": [[15, 70], ["base_model.BaseModel.initialize", "pan_model_original.PanModel.Tensor", "pan_model_original.PanModel.Tensor", "networks.define_G", "print", "networks.print_network", "print", "networks.define_D", "pan_model_original.PanModel.load_network", "networks.GANLoss", "torch.nn.L1Loss", "torch.optim.Adam", "torch.optim.Adam", "pan_model_original.PanModel.optimizers.append", "pan_model_original.PanModel.optimizers.append", "networks.print_network", "pan_model_original.PanModel.load_network", "pan_model_original.PanModel.netG.parameters", "pan_model_original.PanModel.netD.parameters", "pan_model_original.PanModel.schedulers.append", "networks.get_scheduler"], "methods", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.networks.define_G", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.networks.print_network", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.networks.define_D", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.networks.print_network", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.networks.get_scheduler"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "BaseModel", ".", "initialize", "(", "self", ",", "opt", ")", "\n", "\n", "self", ".", "isTrain", "=", "opt", ".", "isTrain", "\n", "\n", "# define tensors", "\n", "self", ".", "input_A", "=", "self", ".", "Tensor", "(", "opt", ".", "batchSize", ",", "opt", ".", "input_nc", ",", "\n", "opt", ".", "fineSize", ",", "opt", ".", "fineSize", ")", "\n", "self", ".", "input_B", "=", "self", ".", "Tensor", "(", "opt", ".", "batchSize", ",", "opt", ".", "output_nc", ",", "\n", "opt", ".", "fineSize", ",", "opt", ".", "fineSize", ")", "\n", "\n", "# load/define networks", "\n", "# init_type: he(kaiming) or xavier", "\n", "self", ".", "netG", "=", "networks", ".", "define_G", "(", "opt", ".", "input_nc", ",", "opt", ".", "output_nc", ",", "opt", ".", "ngf", ",", "\n", "opt", ".", "which_model_netG", ",", "opt", ".", "norm", ",", "not", "opt", ".", "no_dropout", ",", "opt", ".", "init_type", ",", "self", ".", "gpu_ids", ")", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "use_sigmoid", "=", "opt", ".", "no_lsgan", "\n", "self", ".", "netD", "=", "networks", ".", "define_D", "(", "opt", ".", "input_nc", "+", "opt", ".", "output_nc", ",", "opt", ".", "ndf", ",", "\n", "opt", ".", "which_model_netD", ",", "\n", "opt", ".", "n_layers_D", ",", "opt", ".", "norm", ",", "use_sigmoid", ",", "opt", ".", "init_type", ",", "self", ".", "gpu_ids", ")", "\n", "\n", "", "if", "not", "self", ".", "isTrain", "or", "opt", ".", "continue_train", ":", "\n", "            ", "self", ".", "load_network", "(", "self", ".", "netG", ",", "'G'", ",", "opt", ".", "which_epoch", ")", "\n", "# train from pre-trained weights", "\n", "if", "self", ".", "isTrain", ":", "\n", "                ", "self", ".", "load_network", "(", "self", ".", "netD", ",", "'D'", ",", "opt", ".", "which_epoch", ")", "\n", "\n", "", "", "if", "self", ".", "isTrain", ":", "\n", "\n", "# hyper parameters", "\n", "            ", "self", ".", "pan_lambdas", "=", "opt", ".", "pan_lambdas", "\n", "self", ".", "pan_mergin_m", "=", "opt", ".", "pan_mergin_m", "\n", "\n", "self", ".", "old_lr", "=", "opt", ".", "lr", "\n", "# define loss functions", "\n", "self", ".", "criterionGAN", "=", "networks", ".", "GANLoss", "(", "tensor", "=", "self", ".", "Tensor", ")", "\n", "self", ".", "criterionPAN", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "\n", "# initialize optimizers", "\n", "self", ".", "schedulers", "=", "[", "]", "\n", "self", ".", "optimizers", "=", "[", "]", "\n", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "netG", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "self", ".", "optimizer_D", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "netD", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_G", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_D", ")", "\n", "for", "optimizer", "in", "self", ".", "optimizers", ":", "\n", "                ", "self", ".", "schedulers", ".", "append", "(", "networks", ".", "get_scheduler", "(", "optimizer", ",", "opt", ")", ")", "\n", "\n", "", "", "print", "(", "'---------- Networks initialized -------------'", ")", "\n", "networks", ".", "print_network", "(", "self", ".", "netG", ")", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "networks", ".", "print_network", "(", "self", ".", "netD", ")", "\n", "", "print", "(", "'-----------------------------------------------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pan_model_original.PanModel.set_input": [[71, 78], ["pan_model_original.PanModel.input_A.resize_().copy_", "pan_model_original.PanModel.input_B.resize_().copy_", "pan_model_original.PanModel.input_A.resize_", "pan_model_original.PanModel.input_B.resize_", "input_A.size", "input_B.size"], "methods", ["None"], ["", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "        ", "AtoB", "=", "self", ".", "opt", ".", "which_direction", "==", "'AtoB'", "\n", "input_A", "=", "input", "[", "'A'", "if", "AtoB", "else", "'B'", "]", "\n", "input_B", "=", "input", "[", "'B'", "if", "AtoB", "else", "'A'", "]", "\n", "self", ".", "input_A", ".", "resize_", "(", "input_A", ".", "size", "(", ")", ")", ".", "copy_", "(", "input_A", ")", "\n", "self", ".", "input_B", ".", "resize_", "(", "input_B", ".", "size", "(", ")", ")", ".", "copy_", "(", "input_B", ")", "\n", "self", ".", "image_paths", "=", "input", "[", "'A_paths'", "if", "AtoB", "else", "'B_paths'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pan_model_original.PanModel.forward": [[79, 83], ["torch.autograd.Variable", "pan_model_original.PanModel.netG.forward", "torch.autograd.Variable"], "methods", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.pytorch_msssim.__init__.MSSSIM.forward"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "self", ".", "real_A", "=", "Variable", "(", "self", ".", "input_A", ")", "\n", "self", ".", "fake_B", "=", "self", ".", "netG", ".", "forward", "(", "self", ".", "real_A", ")", "\n", "self", ".", "real_B", "=", "Variable", "(", "self", ".", "input_B", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pan_model_original.PanModel.test": [[85, 89], ["torch.autograd.Variable", "pan_model_original.PanModel.netG.forward", "torch.autograd.Variable"], "methods", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.pytorch_msssim.__init__.MSSSIM.forward"], ["", "def", "test", "(", "self", ")", ":", "\n", "        ", "self", ".", "real_A", "=", "Variable", "(", "self", ".", "input_A", ",", "volatile", "=", "True", ")", "\n", "self", ".", "fake_B", "=", "self", ".", "netG", ".", "forward", "(", "self", ".", "real_A", ")", "\n", "self", ".", "real_B", "=", "Variable", "(", "self", ".", "input_B", ",", "volatile", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pan_model_original.PanModel.get_image_paths": [[91, 93], ["None"], "methods", ["None"], ["", "def", "get_image_paths", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "image_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pan_model_original.PanModel.backward_D": [[94, 128], ["torch.cat", "pan_model_original.PanModel.netD.forward", "pan_model_original.PanModel.criterionGAN", "pan_model_original.PanModel.netD.get_intermediate_outputs", "torch.cat", "pan_model_original.PanModel.netD.forward", "pan_model_original.PanModel.criterionGAN", "pan_model_original.PanModel.netD.get_intermediate_outputs", "zip", "pan_model_original.PanModel.loss_D.backward", "torch.cat.detach", "torch.autograd.Variable", "pan_model_original.PanModel.criterionPAN", "pan_model_original.PanModel.Tensor", "torch.autograd.Variable", "numpy.array", "pan_model_original.PanModel.Tensor", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.pytorch_msssim.__init__.MSSSIM.forward", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.networks.NLayerDiscriminator.get_intermediate_outputs", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.pytorch_msssim.__init__.MSSSIM.forward", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.networks.NLayerDiscriminator.get_intermediate_outputs"], ["", "def", "backward_D", "(", "self", ")", ":", "\n", "# Fake", "\n", "        ", "fake_AB", "=", "torch", ".", "cat", "(", "(", "self", ".", "real_A", ",", "self", ".", "fake_B", ")", ",", "1", ")", "\n", "#fake_AB --> torch.Size([1, 6, 256, 256])", "\n", "\n", "# detach: make fake_AB volatile", "\n", "self", ".", "pred_fake", "=", "self", ".", "netD", ".", "forward", "(", "fake_AB", ".", "detach", "(", ")", ")", "\n", "self", ".", "loss_D_fake", "=", "self", ".", "criterionGAN", "(", "self", ".", "pred_fake", ",", "False", ")", "\n", "\n", "# outputs of intermediate layers", "\n", "fake_inters", "=", "self", ".", "netD", ".", "get_intermediate_outputs", "(", ")", "\n", "\n", "# Real", "\n", "real_AB", "=", "torch", ".", "cat", "(", "(", "self", ".", "real_A", ",", "self", ".", "real_B", ")", ",", "1", ")", "\n", "self", ".", "pred_real", "=", "self", ".", "netD", ".", "forward", "(", "real_AB", ")", "\n", "self", ".", "loss_D_real", "=", "self", ".", "criterionGAN", "(", "self", ".", "pred_real", ",", "True", ")", "\n", "\n", "# outputs of intermediate layers", "\n", "real_inters", "=", "self", ".", "netD", ".", "get_intermediate_outputs", "(", ")", "\n", "\n", "# calc Parceptual Adversarial Loss", "\n", "self", ".", "loss_PAN", "=", "0", "\n", "for", "(", "fake_i", ",", "real_i", ",", "lam", ")", "in", "zip", "(", "fake_inters", ",", "real_inters", ",", "self", ".", "pan_lambdas", ")", ":", "\n", "            ", "self", ".", "loss_PAN", "+=", "self", ".", "criterionPAN", "(", "fake_i", ",", "real_i", ")", "*", "lam", "\n", "\n", "", "if", "self", ".", "loss_PAN", ".", "data", "[", "0", "]", ">", "self", ".", "pan_mergin_m", ":", "\n", "            ", "loss_PAN", "=", "Variable", "(", "self", ".", "Tensor", "(", "np", ".", "array", "(", "[", "0", "]", ",", "dtype", "=", "np", ".", "float", ")", ")", ",", "requires_grad", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "loss_PAN", "=", "Variable", "(", "self", ".", "Tensor", "(", "np", ".", "array", "(", "[", "self", ".", "pan_mergin_m", "]", ",", "dtype", "=", "np", ".", "float", ")", ")", ",", "requires_grad", "=", "False", ")", "-", "self", ".", "loss_PAN", "\n", "\n", "# Combined loss", "\n", "", "self", ".", "loss_D", "=", "(", "self", ".", "loss_D_fake", "+", "self", ".", "loss_D_real", ")", "*", "0.5", "+", "loss_PAN", "\n", "\n", "self", ".", "loss_D", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pan_model_original.PanModel.backward_G": [[129, 139], ["torch.cat", "pan_model_original.PanModel.netD.forward", "pan_model_original.PanModel.criterionGAN", "pan_model_original.PanModel.loss_G.backward"], "methods", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.pytorch_msssim.__init__.MSSSIM.forward"], ["", "def", "backward_G", "(", "self", ",", "retain", "=", "False", ")", ":", "\n", "# First, G(A) should fake the discriminator", "\n", "        ", "fake_AB", "=", "torch", ".", "cat", "(", "(", "self", ".", "real_A", ",", "self", ".", "fake_B", ")", ",", "1", ")", "\n", "pred_fake", "=", "self", ".", "netD", ".", "forward", "(", "fake_AB", ")", "\n", "self", ".", "loss_G_GAN", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "True", ")", "\n", "\n", "# Combined loss", "\n", "self", ".", "loss_G", "=", "self", ".", "loss_G_GAN", "+", "self", ".", "loss_PAN", "\n", "\n", "self", ".", "loss_G", ".", "backward", "(", "retain_graph", "=", "retain", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pan_model_original.PanModel.optimize_parameters": [[140, 160], ["pan_model_original.PanModel.forward", "pan_model_original.PanModel.optimizer_D.zero_grad", "pan_model_original.PanModel.backward_D", "pan_model_original.PanModel.optimizer_D.step", "pan_model_original.PanModel.optimizer_G.zero_grad", "pan_model_original.PanModel.backward_G", "pan_model_original.PanModel.optimizer_G.step"], "methods", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.pytorch_msssim.__init__.MSSSIM.forward", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pix2pix_model.Pix2PixModel.backward_D", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pix2pix_model.Pix2PixModel.backward_G"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "forward", "(", ")", "\n", "\n", "# update D", "\n", "self", ".", "optimizer_D", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward_D", "(", ")", "\n", "self", ".", "optimizer_D", ".", "step", "(", ")", "\n", "\n", "# # update G 3 times", "\n", "# for i in range(3):", "\n", "#     self.optimizer_G.zero_grad()", "\n", "#     if i == 2:", "\n", "#         self.backward_G(retain=False)", "\n", "#     else:", "\n", "#         self.backward_G(retain=True)", "\n", "#     self.optimizer_G.step()", "\n", "\n", "self", ".", "optimizer_G", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward_G", "(", ")", "\n", "self", ".", "optimizer_G", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pan_model_original.PanModel.get_current_errors": [[161, 166], ["collections.OrderedDict"], "methods", ["None"], ["", "def", "get_current_errors", "(", "self", ")", ":", "\n", "        ", "return", "OrderedDict", "(", "[", "(", "'G_GAN'", ",", "self", ".", "loss_G_GAN", ".", "data", "[", "0", "]", ")", ",", "\n", "(", "'PAN'", ",", "self", ".", "loss_PAN", ".", "data", "[", "0", "]", ")", ",", "\n", "(", "'D_real'", ",", "self", ".", "loss_D_real", ".", "data", "[", "0", "]", ")", ",", "\n", "(", "'D_fake'", ",", "self", ".", "loss_D_fake", ".", "data", "[", "0", "]", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pan_model_original.PanModel.get_current_visuals": [[168, 173], ["util.tensor2im", "util.tensor2im", "util.tensor2im", "collections.OrderedDict"], "methods", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.util.tensor2im", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.util.tensor2im", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.util.tensor2im"], ["", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "        ", "real_A", "=", "util", ".", "tensor2im", "(", "self", ".", "real_A", ".", "data", ")", "\n", "fake_B", "=", "util", ".", "tensor2im", "(", "self", ".", "fake_B", ".", "data", ")", "\n", "real_B", "=", "util", ".", "tensor2im", "(", "self", ".", "real_B", ".", "data", ")", "\n", "return", "OrderedDict", "(", "[", "(", "'real_A'", ",", "real_A", ")", ",", "(", "'fake_B'", ",", "fake_B", ")", ",", "(", "'real_B'", ",", "real_B", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pan_model_original.PanModel.save": [[174, 177], ["pan_model_original.PanModel.save_network", "pan_model_original.PanModel.save_network"], "methods", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.base_model.BaseModel.save_network"], ["", "def", "save", "(", "self", ",", "label", ")", ":", "\n", "        ", "self", ".", "save_network", "(", "self", ".", "netG", ",", "'G'", ",", "label", ",", "self", ".", "gpu_ids", ")", "\n", "self", ".", "save_network", "(", "self", ".", "netD", ",", "'D'", ",", "label", ",", "self", ".", "gpu_ids", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.base_model.BaseModel.name": [[6, 8], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'BaseModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.base_model.BaseModel.initialize": [[9, 15], ["os.path.join"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "gpu_ids", "=", "opt", ".", "gpu_ids", "\n", "self", ".", "isTrain", "=", "opt", ".", "isTrain", "\n", "self", ".", "Tensor", "=", "torch", ".", "cuda", ".", "FloatTensor", "if", "self", ".", "gpu_ids", "else", "torch", ".", "Tensor", "\n", "self", ".", "save_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.base_model.BaseModel.set_input": [[16, 18], ["None"], "methods", ["None"], ["", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "        ", "self", ".", "input", "=", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.base_model.BaseModel.forward": [[19, 21], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.base_model.BaseModel.test": [[23, 25], ["None"], "methods", ["None"], ["", "def", "test", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.base_model.BaseModel.get_image_paths": [[26, 28], ["None"], "methods", ["None"], ["", "def", "get_image_paths", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.base_model.BaseModel.optimize_parameters": [[29, 31], ["None"], "methods", ["None"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.base_model.BaseModel.get_current_visuals": [[32, 34], ["None"], "methods", ["None"], ["", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.base_model.BaseModel.get_current_errors": [[35, 37], ["None"], "methods", ["None"], ["", "def", "get_current_errors", "(", "self", ")", ":", "\n", "        ", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.base_model.BaseModel.save": [[38, 40], ["None"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "label", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.base_model.BaseModel.save_network": [[42, 48], ["os.path.join", "torch.save", "network.cpu().state_dict", "len", "torch.cuda.is_available", "network.cuda", "network.cpu"], "methods", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pix2pix_model.Pix2PixModel.save"], ["", "def", "save_network", "(", "self", ",", "network", ",", "network_label", ",", "epoch_label", ",", "gpu_ids", ")", ":", "\n", "        ", "save_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch_label", ",", "network_label", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "save_filename", ")", "\n", "torch", ".", "save", "(", "network", ".", "cpu", "(", ")", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "if", "len", "(", "gpu_ids", ")", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "network", ".", "cuda", "(", "gpu_ids", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.base_model.BaseModel.load_network": [[50, 54], ["os.path.join", "network.load_state_dict", "torch.load"], "methods", ["None"], ["", "", "def", "load_network", "(", "self", ",", "network", ",", "network_label", ",", "epoch_label", ")", ":", "\n", "        ", "save_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch_label", ",", "network_label", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "save_filename", ")", "\n", "network", ".", "load_state_dict", "(", "torch", ".", "load", "(", "save_path", ")", ")", "\n", "# update learning rate (called once every epoch)", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.base_model.BaseModel.update_learning_rate": [[55, 60], ["print", "scheduler.step"], "methods", ["None"], ["", "def", "update_learning_rate", "(", "self", ")", ":", "\n", "        ", "for", "scheduler", "in", "self", ".", "schedulers", ":", "\n", "            ", "scheduler", ".", "step", "(", ")", "\n", "", "lr", "=", "self", ".", "optimizers", "[", "0", "]", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "print", "(", "'learning rate = %.7f'", "%", "lr", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pix2pix_model.Pix2PixModel.name": [[12, 14], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'Pix2PixModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pix2pix_model.Pix2PixModel.initialize": [[15, 64], ["base_model.BaseModel.initialize", "pix2pix_model.Pix2PixModel.Tensor", "pix2pix_model.Pix2PixModel.Tensor", "networks.define_G", "print", "networks.print_network", "print", "networks.define_D", "pix2pix_model.Pix2PixModel.load_network", "networks.GANLoss", "torch.nn.L1Loss", "torch.optim.Adam", "torch.optim.Adam", "pix2pix_model.Pix2PixModel.optimizers.append", "pix2pix_model.Pix2PixModel.optimizers.append", "networks.print_network", "pix2pix_model.Pix2PixModel.load_network", "pix2pix_model.Pix2PixModel.netG.parameters", "pix2pix_model.Pix2PixModel.netD.parameters", "pix2pix_model.Pix2PixModel.schedulers.append", "networks.get_scheduler"], "methods", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.networks.define_G", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.networks.print_network", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.networks.define_D", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.networks.print_network", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.networks.get_scheduler"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "BaseModel", ".", "initialize", "(", "self", ",", "opt", ")", "\n", "self", ".", "isTrain", "=", "opt", ".", "isTrain", "\n", "\n", "# define tensors", "\n", "self", ".", "input_A", "=", "self", ".", "Tensor", "(", "opt", ".", "batchSize", ",", "opt", ".", "input_nc", ",", "\n", "opt", ".", "fineSize", ",", "opt", ".", "fineSize", ")", "\n", "self", ".", "input_B", "=", "self", ".", "Tensor", "(", "opt", ".", "batchSize", ",", "opt", ".", "output_nc", ",", "\n", "opt", ".", "fineSize", ",", "opt", ".", "fineSize", ")", "\n", "\n", "# load/define networks", "\n", "# init_type: he(kaiming) or xavier", "\n", "self", ".", "netG", "=", "networks", ".", "define_G", "(", "opt", ".", "input_nc", ",", "opt", ".", "output_nc", ",", "opt", ".", "ngf", ",", "\n", "opt", ".", "which_model_netG", ",", "opt", ".", "norm", ",", "not", "opt", ".", "no_dropout", ",", "opt", ".", "init_type", ",", "self", ".", "gpu_ids", ")", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "use_sigmoid", "=", "opt", ".", "no_lsgan", "\n", "self", ".", "netD", "=", "networks", ".", "define_D", "(", "opt", ".", "input_nc", "+", "opt", ".", "output_nc", ",", "opt", ".", "ndf", ",", "\n", "opt", ".", "which_model_netD", ",", "\n", "opt", ".", "n_layers_D", ",", "opt", ".", "norm", ",", "use_sigmoid", ",", "opt", ".", "init_type", ",", "self", ".", "gpu_ids", ")", "\n", "\n", "", "if", "not", "self", ".", "isTrain", "or", "opt", ".", "continue_train", ":", "\n", "            ", "self", ".", "load_network", "(", "self", ".", "netG", ",", "'G'", ",", "opt", ".", "which_epoch", ")", "\n", "# train from pre-trained weights", "\n", "if", "self", ".", "isTrain", ":", "\n", "                ", "self", ".", "load_network", "(", "self", ".", "netD", ",", "'D'", ",", "opt", ".", "which_epoch", ")", "\n", "\n", "", "", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "old_lr", "=", "opt", ".", "lr", "\n", "# define loss functions", "\n", "self", ".", "criterionGAN", "=", "networks", ".", "GANLoss", "(", "tensor", "=", "self", ".", "Tensor", ")", "\n", "self", ".", "criterionL1", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "\n", "# initialize optimizers", "\n", "self", ".", "schedulers", "=", "[", "]", "\n", "self", ".", "optimizers", "=", "[", "]", "\n", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "netG", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "self", ".", "optimizer_D", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "netD", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_G", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_D", ")", "\n", "for", "optimizer", "in", "self", ".", "optimizers", ":", "\n", "                ", "self", ".", "schedulers", ".", "append", "(", "networks", ".", "get_scheduler", "(", "optimizer", ",", "opt", ")", ")", "\n", "\n", "", "", "print", "(", "'---------- Networks initialized -------------'", ")", "\n", "networks", ".", "print_network", "(", "self", ".", "netG", ")", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "networks", ".", "print_network", "(", "self", ".", "netD", ")", "\n", "", "print", "(", "'-----------------------------------------------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pix2pix_model.Pix2PixModel.set_input": [[65, 73], ["pix2pix_model.Pix2PixModel.input_A.resize_().copy_", "pix2pix_model.Pix2PixModel.input_B.resize_().copy_", "pix2pix_model.Pix2PixModel.input_A.resize_", "pix2pix_model.Pix2PixModel.input_B.resize_", "input_A.size", "input_B.size"], "methods", ["None"], ["", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "        ", "AtoB", "=", "self", ".", "opt", ".", "which_direction", "==", "'AtoB'", "\n", "input_A", "=", "input", "[", "'A'", "if", "AtoB", "else", "'B'", "]", "\n", "input_B", "=", "input", "[", "'B'", "if", "AtoB", "else", "'A'", "]", "\n", "self", ".", "input_A", ".", "resize_", "(", "input_A", ".", "size", "(", ")", ")", ".", "copy_", "(", "input_A", ")", "\n", "self", ".", "input_B", ".", "resize_", "(", "input_B", ".", "size", "(", ")", ")", ".", "copy_", "(", "input_B", ")", "\n", "#print(self.input_B.shape) # torch.Size([1, 3, 256, 256])", "\n", "self", ".", "image_paths", "=", "input", "[", "'A_paths'", "if", "AtoB", "else", "'B_paths'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pix2pix_model.Pix2PixModel.forward": [[74, 78], ["torch.autograd.Variable", "pix2pix_model.Pix2PixModel.netG.forward", "torch.autograd.Variable"], "methods", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.pytorch_msssim.__init__.MSSSIM.forward"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "self", ".", "real_A", "=", "Variable", "(", "self", ".", "input_A", ")", "\n", "self", ".", "fake_B", "=", "self", ".", "netG", ".", "forward", "(", "self", ".", "real_A", ")", "\n", "self", ".", "real_B", "=", "Variable", "(", "self", ".", "input_B", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pix2pix_model.Pix2PixModel.test": [[80, 84], ["torch.autograd.Variable", "pix2pix_model.Pix2PixModel.netG.forward", "torch.autograd.Variable"], "methods", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.pytorch_msssim.__init__.MSSSIM.forward"], ["", "def", "test", "(", "self", ")", ":", "\n", "        ", "self", ".", "real_A", "=", "Variable", "(", "self", ".", "input_A", ",", "volatile", "=", "True", ")", "\n", "self", ".", "fake_B", "=", "self", ".", "netG", ".", "forward", "(", "self", ".", "real_A", ")", "\n", "self", ".", "real_B", "=", "Variable", "(", "self", ".", "input_B", ",", "volatile", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pix2pix_model.Pix2PixModel.get_image_paths": [[86, 88], ["None"], "methods", ["None"], ["", "def", "get_image_paths", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "image_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pix2pix_model.Pix2PixModel.backward_D": [[89, 107], ["torch.cat", "pix2pix_model.Pix2PixModel.netD.forward", "pix2pix_model.Pix2PixModel.criterionGAN", "torch.cat", "pix2pix_model.Pix2PixModel.netD.forward", "pix2pix_model.Pix2PixModel.criterionGAN", "pix2pix_model.Pix2PixModel.loss_D.backward", "torch.cat.detach"], "methods", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.pytorch_msssim.__init__.MSSSIM.forward", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.pytorch_msssim.__init__.MSSSIM.forward"], ["", "def", "backward_D", "(", "self", ")", ":", "\n", "# Fake", "\n", "        ", "fake_AB", "=", "torch", ".", "cat", "(", "(", "self", ".", "real_A", ",", "self", ".", "fake_B", ")", ",", "1", ")", "\n", "#fake_AB --> torch.Size([1, 6, 256, 256])", "\n", "\n", "# detach: make fake_AB volatile", "\n", "self", ".", "pred_fake", "=", "self", ".", "netD", ".", "forward", "(", "fake_AB", ".", "detach", "(", ")", ")", "\n", "self", ".", "loss_D_fake", "=", "self", ".", "criterionGAN", "(", "self", ".", "pred_fake", ",", "False", ")", "\n", "\n", "# Real", "\n", "real_AB", "=", "torch", ".", "cat", "(", "(", "self", ".", "real_A", ",", "self", ".", "real_B", ")", ",", "1", ")", "\n", "self", ".", "pred_real", "=", "self", ".", "netD", ".", "forward", "(", "real_AB", ")", "\n", "self", ".", "loss_D_real", "=", "self", ".", "criterionGAN", "(", "self", ".", "pred_real", ",", "True", ")", "\n", "\n", "# Combined loss", "\n", "self", ".", "loss_D", "=", "(", "self", ".", "loss_D_fake", "+", "self", ".", "loss_D_real", ")", "*", "0.5", "\n", "\n", "self", ".", "loss_D", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pix2pix_model.Pix2PixModel.backward_G": [[108, 120], ["torch.cat", "pix2pix_model.Pix2PixModel.netD.forward", "pix2pix_model.Pix2PixModel.criterionGAN", "pix2pix_model.Pix2PixModel.loss_G.backward", "pix2pix_model.Pix2PixModel.criterionL1"], "methods", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.pytorch_msssim.__init__.MSSSIM.forward"], ["", "def", "backward_G", "(", "self", ")", ":", "\n", "# First, G(A) should fake the discriminator", "\n", "        ", "fake_AB", "=", "torch", ".", "cat", "(", "(", "self", ".", "real_A", ",", "self", ".", "fake_B", ")", ",", "1", ")", "\n", "pred_fake", "=", "self", ".", "netD", ".", "forward", "(", "fake_AB", ")", "\n", "self", ".", "loss_G_GAN", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "True", ")", "\n", "\n", "# Second, G(A) = B", "\n", "self", ".", "loss_G_L1", "=", "self", ".", "criterionL1", "(", "self", ".", "fake_B", ",", "self", ".", "real_B", ")", "*", "self", ".", "opt", ".", "lambda_A", "\n", "\n", "self", ".", "loss_G", "=", "self", ".", "loss_G_GAN", "+", "self", ".", "loss_G_L1", "\n", "\n", "self", ".", "loss_G", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pix2pix_model.Pix2PixModel.optimize_parameters": [[121, 131], ["pix2pix_model.Pix2PixModel.forward", "pix2pix_model.Pix2PixModel.optimizer_D.zero_grad", "pix2pix_model.Pix2PixModel.backward_D", "pix2pix_model.Pix2PixModel.optimizer_D.step", "pix2pix_model.Pix2PixModel.optimizer_G.zero_grad", "pix2pix_model.Pix2PixModel.backward_G", "pix2pix_model.Pix2PixModel.optimizer_G.step"], "methods", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.pytorch_msssim.__init__.MSSSIM.forward", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pix2pix_model.Pix2PixModel.backward_D", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pix2pix_model.Pix2PixModel.backward_G"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "forward", "(", ")", "\n", "\n", "self", ".", "optimizer_D", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward_D", "(", ")", "\n", "self", ".", "optimizer_D", ".", "step", "(", ")", "\n", "\n", "self", ".", "optimizer_G", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward_G", "(", ")", "\n", "self", ".", "optimizer_G", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pix2pix_model.Pix2PixModel.get_current_errors": [[132, 137], ["collections.OrderedDict"], "methods", ["None"], ["", "def", "get_current_errors", "(", "self", ")", ":", "\n", "        ", "return", "OrderedDict", "(", "[", "(", "'G_GAN'", ",", "self", ".", "loss_G_GAN", ".", "data", "[", "0", "]", ")", ",", "\n", "(", "'G_L1'", ",", "self", ".", "loss_G_L1", ".", "data", "[", "0", "]", ")", ",", "\n", "(", "'D_real'", ",", "self", ".", "loss_D_real", ".", "data", "[", "0", "]", ")", ",", "\n", "(", "'D_fake'", ",", "self", ".", "loss_D_fake", ".", "data", "[", "0", "]", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pix2pix_model.Pix2PixModel.get_current_visuals": [[139, 144], ["util.tensor2im", "util.tensor2im", "util.tensor2im", "collections.OrderedDict"], "methods", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.util.tensor2im", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.util.tensor2im", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.util.tensor2im"], ["", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "        ", "real_A", "=", "util", ".", "tensor2im", "(", "self", ".", "real_A", ".", "data", ")", "\n", "fake_B", "=", "util", ".", "tensor2im", "(", "self", ".", "fake_B", ".", "data", ")", "\n", "real_B", "=", "util", ".", "tensor2im", "(", "self", ".", "real_B", ".", "data", ")", "\n", "return", "OrderedDict", "(", "[", "(", "'real_A'", ",", "real_A", ")", ",", "(", "'fake_B'", ",", "fake_B", ")", ",", "(", "'real_B'", ",", "real_B", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.pix2pix_model.Pix2PixModel.save": [[145, 148], ["pix2pix_model.Pix2PixModel.save_network", "pix2pix_model.Pix2PixModel.save_network"], "methods", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.models.base_model.BaseModel.save_network"], ["", "def", "save", "(", "self", ",", "label", ")", ":", "\n", "        ", "self", ".", "save_network", "(", "self", ".", "netG", ",", "'G'", ",", "label", ",", "self", ".", "gpu_ids", ")", "\n", "self", ".", "save_network", "(", "self", ".", "netD", ",", "'D'", ",", "label", ",", "self", ".", "gpu_ids", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.pytorch_msssim.__init__.SSIM.__init__": [[102, 111], ["super().__init__", "__init__.create_window"], "methods", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.pytorch_msssim.__init__.create_window"], ["    ", "def", "__init__", "(", "self", ",", "window_size", "=", "11", ",", "size_average", "=", "True", ",", "val_range", "=", "None", ")", ":", "\n", "        ", "super", "(", "SSIM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "window_size", "=", "window_size", "\n", "self", ".", "size_average", "=", "size_average", "\n", "self", ".", "val_range", "=", "val_range", "\n", "\n", "# Assume 1 channel for SSIM", "\n", "self", ".", "channel", "=", "1", "\n", "self", ".", "window", "=", "create_window", "(", "window_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.pytorch_msssim.__init__.SSIM.forward": [[112, 123], ["img1.size", "__init__.ssim", "create_window().to().type", "create_window().to", "__init__.create_window"], "methods", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.pytorch_msssim.__init__.ssim", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.pytorch_msssim.__init__.create_window"], ["", "def", "forward", "(", "self", ",", "img1", ",", "img2", ")", ":", "\n", "        ", "(", "_", ",", "channel", ",", "_", ",", "_", ")", "=", "img1", ".", "size", "(", ")", "\n", "\n", "if", "channel", "==", "self", ".", "channel", "and", "self", ".", "window", ".", "dtype", "==", "img1", ".", "dtype", ":", "\n", "            ", "window", "=", "self", ".", "window", "\n", "", "else", ":", "\n", "            ", "window", "=", "create_window", "(", "self", ".", "window_size", ",", "channel", ")", ".", "to", "(", "img1", ".", "device", ")", ".", "type", "(", "img1", ".", "dtype", ")", "\n", "self", ".", "window", "=", "window", "\n", "self", ".", "channel", "=", "channel", "\n", "\n", "", "return", "ssim", "(", "img1", ",", "img2", ",", "window", "=", "window", ",", "window_size", "=", "self", ".", "window_size", ",", "size_average", "=", "self", ".", "size_average", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.pytorch_msssim.__init__.MSSSIM.__init__": [[125, 130], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "window_size", "=", "11", ",", "size_average", "=", "True", ",", "channel", "=", "3", ")", ":", "\n", "        ", "super", "(", "MSSSIM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "window_size", "=", "window_size", "\n", "self", ".", "size_average", "=", "size_average", "\n", "self", ".", "channel", "=", "channel", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.pytorch_msssim.__init__.MSSSIM.forward": [[131, 134], ["__init__.msssim"], "methods", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.pytorch_msssim.__init__.msssim"], ["", "def", "forward", "(", "self", ",", "img1", ",", "img2", ")", ":", "\n", "# TODO: store window between calls if possible", "\n", "        ", "return", "msssim", "(", "img1", ",", "img2", ",", "window_size", "=", "self", ".", "window_size", ",", "size_average", "=", "self", ".", "size_average", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.pytorch_msssim.__init__.gaussian": [[7, 10], ["torch.Tensor", "torch.Tensor", "torch.Tensor.sum", "math.exp", "range", "float"], "function", ["None"], ["def", "gaussian", "(", "window_size", ",", "sigma", ")", ":", "\n", "    ", "gauss", "=", "torch", ".", "Tensor", "(", "[", "exp", "(", "-", "(", "x", "-", "window_size", "//", "2", ")", "**", "2", "/", "float", "(", "2", "*", "sigma", "**", "2", ")", ")", "for", "x", "in", "range", "(", "window_size", ")", "]", ")", "\n", "return", "gauss", "/", "gauss", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.pytorch_msssim.__init__.create_window": [[12, 17], ["gaussian().unsqueeze", "gaussian().unsqueeze.mm().float().unsqueeze().unsqueeze", "_1D_window.mm().float().unsqueeze().unsqueeze.expand().contiguous", "__init__.gaussian", "gaussian().unsqueeze.mm().float().unsqueeze", "_1D_window.mm().float().unsqueeze().unsqueeze.expand", "gaussian().unsqueeze.mm().float", "gaussian().unsqueeze.mm", "gaussian().unsqueeze.t"], "function", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.pytorch_msssim.__init__.gaussian"], ["", "def", "create_window", "(", "window_size", ",", "channel", "=", "1", ")", ":", "\n", "    ", "_1D_window", "=", "gaussian", "(", "window_size", ",", "1.5", ")", ".", "unsqueeze", "(", "1", ")", "\n", "_2D_window", "=", "_1D_window", ".", "mm", "(", "_1D_window", ".", "t", "(", ")", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "window", "=", "_2D_window", ".", "expand", "(", "channel", ",", "1", ",", "window_size", ",", "window_size", ")", ".", "contiguous", "(", ")", "\n", "return", "window", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.pytorch_msssim.__init__.ssim": [[19, 69], ["img1.size", "torch.conv2d", "torch.conv2d", "F.conv2d.pow", "F.conv2d.pow", "torch.mean", "torch.mean", "min", "create_window().to", "torch.conv2d", "torch.conv2d", "torch.conv2d", "ssim_map.mean", "ssim_map.mean().mean().mean", "torch.max", "torch.max", "torch.min", "torch.min", "__init__.create_window", "ssim_map.mean().mean", "ssim_map.mean"], "function", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.pytorch_msssim.__init__.create_window"], ["", "def", "ssim", "(", "img1", ",", "img2", ",", "window_size", "=", "11", ",", "window", "=", "None", ",", "size_average", "=", "True", ",", "full", "=", "False", ",", "val_range", "=", "None", ")", ":", "\n", "# Value range can be different from 255. Other common ranges are 1 (sigmoid) and 2 (tanh).", "\n", "    ", "if", "val_range", "is", "None", ":", "\n", "        ", "if", "torch", ".", "max", "(", "img1", ")", ">", "128", ":", "\n", "            ", "max_val", "=", "255", "\n", "", "else", ":", "\n", "            ", "max_val", "=", "1", "\n", "\n", "", "if", "torch", ".", "min", "(", "img1", ")", "<", "-", "0.5", ":", "\n", "            ", "min_val", "=", "-", "1", "\n", "", "else", ":", "\n", "            ", "min_val", "=", "0", "\n", "", "L", "=", "max_val", "-", "min_val", "\n", "", "else", ":", "\n", "        ", "L", "=", "val_range", "\n", "\n", "", "padd", "=", "0", "\n", "(", "_", ",", "channel", ",", "height", ",", "width", ")", "=", "img1", ".", "size", "(", ")", "\n", "if", "window", "is", "None", ":", "\n", "        ", "real_size", "=", "min", "(", "window_size", ",", "height", ",", "width", ")", "\n", "window", "=", "create_window", "(", "real_size", ",", "channel", "=", "channel", ")", ".", "to", "(", "img1", ".", "device", ")", "\n", "\n", "", "mu1", "=", "F", ".", "conv2d", "(", "img1", ",", "window", ",", "padding", "=", "padd", ",", "groups", "=", "channel", ")", "\n", "mu2", "=", "F", ".", "conv2d", "(", "img2", ",", "window", ",", "padding", "=", "padd", ",", "groups", "=", "channel", ")", "\n", "\n", "mu1_sq", "=", "mu1", ".", "pow", "(", "2", ")", "\n", "mu2_sq", "=", "mu2", ".", "pow", "(", "2", ")", "\n", "mu1_mu2", "=", "mu1", "*", "mu2", "\n", "\n", "sigma1_sq", "=", "F", ".", "conv2d", "(", "img1", "*", "img1", ",", "window", ",", "padding", "=", "padd", ",", "groups", "=", "channel", ")", "-", "mu1_sq", "\n", "sigma2_sq", "=", "F", ".", "conv2d", "(", "img2", "*", "img2", ",", "window", ",", "padding", "=", "padd", ",", "groups", "=", "channel", ")", "-", "mu2_sq", "\n", "sigma12", "=", "F", ".", "conv2d", "(", "img1", "*", "img2", ",", "window", ",", "padding", "=", "padd", ",", "groups", "=", "channel", ")", "-", "mu1_mu2", "\n", "\n", "C1", "=", "(", "0.01", "*", "L", ")", "**", "2", "\n", "C2", "=", "(", "0.03", "*", "L", ")", "**", "2", "\n", "\n", "v1", "=", "2.0", "*", "sigma12", "+", "C2", "\n", "v2", "=", "sigma1_sq", "+", "sigma2_sq", "+", "C2", "\n", "cs", "=", "torch", ".", "mean", "(", "v1", "/", "v2", ")", "# contrast sensitivity", "\n", "\n", "ssim_map", "=", "(", "(", "2", "*", "mu1_mu2", "+", "C1", ")", "*", "v1", ")", "/", "(", "(", "mu1_sq", "+", "mu2_sq", "+", "C1", ")", "*", "v2", ")", "\n", "\n", "if", "size_average", ":", "\n", "        ", "ret", "=", "ssim_map", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "        ", "ret", "=", "ssim_map", ".", "mean", "(", "1", ")", ".", "mean", "(", "1", ")", ".", "mean", "(", "1", ")", "\n", "\n", "", "if", "full", ":", "\n", "        ", "return", "ret", ",", "cs", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.pytorch_msssim.__init__.msssim": [[71, 98], ["torch.FloatTensor().to", "torch.FloatTensor().to", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.prod", "torch.prod", "torch.FloatTensor().to.size", "__init__.ssim", "torch.stack.append", "torch.stack.append", "torch.avg_pool2d", "torch.avg_pool2d", "torch.FloatTensor", "torch.FloatTensor"], "function", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.pytorch_msssim.__init__.ssim"], ["", "def", "msssim", "(", "img1", ",", "img2", ",", "window_size", "=", "11", ",", "size_average", "=", "True", ",", "val_range", "=", "None", ",", "normalize", "=", "False", ")", ":", "\n", "    ", "device", "=", "img1", ".", "device", "\n", "weights", "=", "torch", ".", "FloatTensor", "(", "[", "0.0448", ",", "0.2856", ",", "0.3001", ",", "0.2363", ",", "0.1333", "]", ")", ".", "to", "(", "device", ")", "\n", "levels", "=", "weights", ".", "size", "(", ")", "[", "0", "]", "\n", "mssim", "=", "[", "]", "\n", "mcs", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "levels", ")", ":", "\n", "        ", "sim", ",", "cs", "=", "ssim", "(", "img1", ",", "img2", ",", "window_size", "=", "window_size", ",", "size_average", "=", "size_average", ",", "full", "=", "True", ",", "val_range", "=", "val_range", ")", "\n", "mssim", ".", "append", "(", "sim", ")", "\n", "mcs", ".", "append", "(", "cs", ")", "\n", "\n", "img1", "=", "F", ".", "avg_pool2d", "(", "img1", ",", "(", "2", ",", "2", ")", ")", "\n", "img2", "=", "F", ".", "avg_pool2d", "(", "img2", ",", "(", "2", ",", "2", ")", ")", "\n", "\n", "", "mssim", "=", "torch", ".", "stack", "(", "mssim", ")", "\n", "mcs", "=", "torch", ".", "stack", "(", "mcs", ")", "\n", "\n", "# Normalize (to avoid NaNs during training unstable models, not compliant with original definition)", "\n", "if", "normalize", ":", "\n", "        ", "mssim", "=", "(", "mssim", "+", "1", ")", "/", "2", "\n", "mcs", "=", "(", "mcs", "+", "1", ")", "/", "2", "\n", "\n", "", "pow1", "=", "mcs", "**", "weights", "\n", "pow2", "=", "mssim", "**", "weights", "\n", "# From Matlab implementation https://ece.uwaterloo.ca/~z70wang/research/iwssim/", "\n", "output", "=", "torch", ".", "prod", "(", "pow1", "[", ":", "-", "1", "]", "*", "pow2", "[", "-", "1", "]", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.data.aligned_dataset.AlignedDataset.initialize": [[11, 25], ["os.path.join", "sorted", "torchvision.Compose", "data.image_folder.make_dataset", "torchvision.ToTensor", "torchvision.Normalize"], "methods", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.data.image_folder.make_dataset"], ["    ", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "root", "=", "opt", ".", "dataroot", "\n", "self", ".", "dir_AB", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "opt", ".", "phase", ")", "\n", "\n", "self", ".", "AB_paths", "=", "sorted", "(", "make_dataset", "(", "self", ".", "dir_AB", ")", ")", "\n", "\n", "assert", "(", "opt", ".", "resize_or_crop", "==", "'resize_and_crop'", ")", "\n", "\n", "transform_list", "=", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "\n", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", "\n", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.data.aligned_dataset.AlignedDataset.__getitem__": [[26, 66], ["PIL.Image.open().convert", "aligned_dataset.AlignedDataset.resize", "aligned_dataset.AlignedDataset.transform", "aligned_dataset.AlignedDataset.size", "int", "aligned_dataset.AlignedDataset.size", "random.randint", "random.randint", "max", "max", "torch.LongTensor", "tmp.unsqueeze.index_select", "tmp.unsqueeze.index_select", "tmp.unsqueeze", "tmp.unsqueeze", "PIL.Image.open", "random.random", "range", "tmp.unsqueeze.size"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "AB_path", "=", "self", ".", "AB_paths", "[", "index", "]", "\n", "AB", "=", "Image", ".", "open", "(", "AB_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "AB", "=", "AB", ".", "resize", "(", "(", "self", ".", "opt", ".", "loadSize", "*", "2", ",", "self", ".", "opt", ".", "loadSize", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "AB", "=", "self", ".", "transform", "(", "AB", ")", "\n", "\n", "w_total", "=", "AB", ".", "size", "(", "2", ")", "\n", "w", "=", "int", "(", "w_total", "/", "2", ")", "\n", "h", "=", "AB", ".", "size", "(", "1", ")", "\n", "w_offset", "=", "random", ".", "randint", "(", "0", ",", "max", "(", "0", ",", "w", "-", "self", ".", "opt", ".", "fineSize", "-", "1", ")", ")", "\n", "h_offset", "=", "random", ".", "randint", "(", "0", ",", "max", "(", "0", ",", "h", "-", "self", ".", "opt", ".", "fineSize", "-", "1", ")", ")", "\n", "\n", "A", "=", "AB", "[", ":", ",", "h_offset", ":", "h_offset", "+", "self", ".", "opt", ".", "fineSize", ",", "\n", "w_offset", ":", "w_offset", "+", "self", ".", "opt", ".", "fineSize", "]", "\n", "B", "=", "AB", "[", ":", ",", "h_offset", ":", "h_offset", "+", "self", ".", "opt", ".", "fineSize", ",", "\n", "w", "+", "w_offset", ":", "w", "+", "w_offset", "+", "self", ".", "opt", ".", "fineSize", "]", "\n", "\n", "if", "self", ".", "opt", ".", "which_direction", "==", "'BtoA'", ":", "\n", "            ", "input_nc", "=", "self", ".", "opt", ".", "output_nc", "\n", "output_nc", "=", "self", ".", "opt", ".", "input_nc", "\n", "", "else", ":", "\n", "            ", "input_nc", "=", "self", ".", "opt", ".", "input_nc", "\n", "output_nc", "=", "self", ".", "opt", ".", "output_nc", "\n", "\n", "", "if", "(", "not", "self", ".", "opt", ".", "no_flip", ")", "and", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "idx", "=", "[", "i", "for", "i", "in", "range", "(", "A", ".", "size", "(", "2", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", "]", "\n", "idx", "=", "torch", ".", "LongTensor", "(", "idx", ")", "\n", "A", "=", "A", ".", "index_select", "(", "2", ",", "idx", ")", "\n", "B", "=", "B", ".", "index_select", "(", "2", ",", "idx", ")", "\n", "\n", "", "if", "input_nc", "==", "1", ":", "# RGB to gray", "\n", "            ", "tmp", "=", "A", "[", "0", ",", "...", "]", "*", "0.299", "+", "A", "[", "1", ",", "...", "]", "*", "0.587", "+", "A", "[", "2", ",", "...", "]", "*", "0.114", "\n", "A", "=", "tmp", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "if", "output_nc", "==", "1", ":", "# RGB to gray", "\n", "            ", "tmp", "=", "B", "[", "0", ",", "...", "]", "*", "0.299", "+", "B", "[", "1", ",", "...", "]", "*", "0.587", "+", "B", "[", "2", ",", "...", "]", "*", "0.114", "\n", "B", "=", "tmp", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "return", "{", "'A'", ":", "A", ",", "'B'", ":", "B", ",", "\n", "'A_paths'", ":", "AB_path", ",", "'B_paths'", ":", "AB_path", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.data.aligned_dataset.AlignedDataset.__len__": [[67, 69], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "AB_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.data.aligned_dataset.AlignedDataset.name": [[70, 72], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'AlignedDataset'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.data.data_loader.CreateDataLoader": [[2, 8], ["CustomDatasetDataLoader", "print", "CustomDatasetDataLoader.initialize", "CustomDatasetDataLoader.name"], "function", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.data.unaligned_dataset.UnalignedDataset.name"], ["def", "CreateDataLoader", "(", "opt", ")", ":", "\n", "    ", "from", "data", ".", "custom_dataset_data_loader", "import", "CustomDatasetDataLoader", "\n", "data_loader", "=", "CustomDatasetDataLoader", "(", ")", "\n", "print", "(", "data_loader", ".", "name", "(", ")", ")", "\n", "data_loader", ".", "initialize", "(", "opt", ")", "\n", "return", "data_loader", "\n", "", ""]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.data.base_dataset.BaseDataset.__init__": [[6, 8], ["torch.Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BaseDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.data.base_dataset.BaseDataset.name": [[9, 11], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'BaseDataset'", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.data.base_dataset.BaseDataset.initialize": [[12, 14], ["None"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.data.base_dataset.get_transform": [[15, 38], ["torchvision.Compose", "transform_list.append", "transform_list.append", "transform_list.append", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Scale", "torchvision.RandomCrop", "transform_list.append", "torchvision.RandomHorizontalFlip", "torchvision.RandomCrop", "transform_list.append", "torchvision.Lambda", "transform_list.append", "transform_list.append", "torchvision.Lambda", "torchvision.RandomCrop", "base_dataset.__scale_width", "base_dataset.__scale_width"], "function", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.data.base_dataset.__scale_width", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.data.base_dataset.__scale_width"], ["", "", "def", "get_transform", "(", "opt", ")", ":", "\n", "    ", "transform_list", "=", "[", "]", "\n", "if", "opt", ".", "resize_or_crop", "==", "'resize_and_crop'", ":", "\n", "        ", "osize", "=", "[", "opt", ".", "loadSize", ",", "opt", ".", "loadSize", "]", "\n", "transform_list", ".", "append", "(", "transforms", ".", "Scale", "(", "osize", ",", "Image", ".", "BICUBIC", ")", ")", "\n", "transform_list", ".", "append", "(", "transforms", ".", "RandomCrop", "(", "opt", ".", "fineSize", ")", ")", "\n", "", "elif", "opt", ".", "resize_or_crop", "==", "'crop'", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "RandomCrop", "(", "opt", ".", "fineSize", ")", ")", "\n", "", "elif", "opt", ".", "resize_or_crop", "==", "'scale_width'", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "\n", "lambda", "img", ":", "__scale_width", "(", "img", ",", "opt", ".", "fineSize", ")", ")", ")", "\n", "", "elif", "opt", ".", "resize_or_crop", "==", "'scale_width_and_crop'", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "\n", "lambda", "img", ":", "__scale_width", "(", "img", ",", "opt", ".", "loadSize", ")", ")", ")", "\n", "transform_list", ".", "append", "(", "transforms", ".", "RandomCrop", "(", "opt", ".", "fineSize", ")", ")", "\n", "\n", "", "if", "opt", ".", "isTrain", "and", "not", "opt", ".", "no_flip", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "RandomHorizontalFlip", "(", ")", ")", "\n", "\n", "", "transform_list", "+=", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "\n", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", "\n", "return", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.data.base_dataset.__scale_width": [[39, 46], ["int", "img.resize"], "function", ["None"], ["", "def", "__scale_width", "(", "img", ",", "target_width", ")", ":", "\n", "    ", "ow", ",", "oh", "=", "img", ".", "size", "\n", "if", "(", "ow", "==", "target_width", ")", ":", "\n", "        ", "return", "img", "\n", "", "w", "=", "target_width", "\n", "h", "=", "int", "(", "target_width", "*", "oh", "/", "ow", ")", "\n", "return", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.data.custom_dataset_data_loader.CustomDatasetDataLoader.name": [[25, 27], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'CustomDatasetDataLoader'", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.data.custom_dataset_data_loader.CustomDatasetDataLoader.initialize": [[28, 36], ["data.base_data_loader.BaseDataLoader.initialize", "custom_dataset_data_loader.CreateDataset", "torch.utils.data.DataLoader", "int"], "methods", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.data.custom_dataset_data_loader.CreateDataset"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "BaseDataLoader", ".", "initialize", "(", "self", ",", "opt", ")", "\n", "self", ".", "dataset", "=", "CreateDataset", "(", "opt", ")", "\n", "self", ".", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "self", ".", "dataset", ",", "\n", "batch_size", "=", "opt", ".", "batchSize", ",", "\n", "shuffle", "=", "not", "opt", ".", "serial_batches", ",", "\n", "num_workers", "=", "int", "(", "opt", ".", "nThreads", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.data.custom_dataset_data_loader.CustomDatasetDataLoader.load_data": [[37, 39], ["None"], "methods", ["None"], ["", "def", "load_data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.data.custom_dataset_data_loader.CustomDatasetDataLoader.__len__": [[40, 42], ["min", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "min", "(", "len", "(", "self", ".", "dataset", ")", ",", "self", ".", "opt", ".", "max_dataset_size", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.data.custom_dataset_data_loader.CreateDataset": [[5, 22], ["print", "SingleDataset.initialize", "AlignedDataset", "UnalignedDataset", "SingleDataset.name", "SingleDataset", "ValueError"], "function", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.data.unaligned_dataset.UnalignedDataset.name"], ["def", "CreateDataset", "(", "opt", ")", ":", "\n", "    ", "dataset", "=", "None", "\n", "if", "opt", ".", "dataset_mode", "==", "'aligned'", ":", "\n", "        ", "from", "data", ".", "aligned_dataset", "import", "AlignedDataset", "\n", "dataset", "=", "AlignedDataset", "(", ")", "\n", "", "elif", "opt", ".", "dataset_mode", "==", "'unaligned'", ":", "\n", "        ", "from", "data", ".", "unaligned_dataset", "import", "UnalignedDataset", "\n", "dataset", "=", "UnalignedDataset", "(", ")", "\n", "", "elif", "opt", ".", "dataset_mode", "==", "'single'", ":", "\n", "        ", "from", "data", ".", "single_dataset", "import", "SingleDataset", "\n", "dataset", "=", "SingleDataset", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Dataset [%s] not recognized.\"", "%", "opt", ".", "dataset_mode", ")", "\n", "\n", "", "print", "(", "\"dataset [%s] was created\"", "%", "(", "dataset", ".", "name", "(", ")", ")", ")", "\n", "dataset", ".", "initialize", "(", "opt", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.data.single_dataset.SingleDataset.initialize": [[9, 19], ["os.path.join", "data.image_folder.make_dataset", "sorted", "data.base_dataset.get_transform"], "methods", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.data.base_dataset.get_transform"], ["    ", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "root", "=", "opt", ".", "dataroot", "\n", "self", ".", "dir_A", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ")", "\n", "\n", "self", ".", "A_paths", "=", "make_dataset", "(", "self", ".", "dir_A", ")", "\n", "\n", "self", ".", "A_paths", "=", "sorted", "(", "self", ".", "A_paths", ")", "\n", "\n", "self", ".", "transform", "=", "get_transform", "(", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.data.single_dataset.SingleDataset.__getitem__": [[20, 34], ["PIL.Image.open().convert", "single_dataset.SingleDataset.transform", "tmp.unsqueeze", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "A_path", "=", "self", ".", "A_paths", "[", "index", "]", "\n", "A_img", "=", "Image", ".", "open", "(", "A_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "A", "=", "self", ".", "transform", "(", "A_img", ")", "\n", "if", "self", ".", "opt", ".", "which_direction", "==", "'BtoA'", ":", "\n", "            ", "input_nc", "=", "self", ".", "opt", ".", "output_nc", "\n", "", "else", ":", "\n", "            ", "input_nc", "=", "self", ".", "opt", ".", "input_nc", "\n", "\n", "", "if", "input_nc", "==", "1", ":", "# RGB to gray", "\n", "            ", "tmp", "=", "A", "[", "0", ",", "...", "]", "*", "0.299", "+", "A", "[", "1", ",", "...", "]", "*", "0.587", "+", "A", "[", "2", ",", "...", "]", "*", "0.114", "\n", "A", "=", "tmp", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "return", "{", "'A'", ":", "A", ",", "'A_paths'", ":", "A_path", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.data.single_dataset.SingleDataset.__len__": [[35, 37], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "A_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.data.single_dataset.SingleDataset.name": [[38, 40], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'SingleImageDataset'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.data.image_folder.ImageFolder.__init__": [[43, 56], ["image_folder.make_dataset", "len", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.data.image_folder.make_dataset"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "transform", "=", "None", ",", "return_paths", "=", "False", ",", "\n", "loader", "=", "default_loader", ")", ":", "\n", "        ", "imgs", "=", "make_dataset", "(", "root", ")", "\n", "if", "len", "(", "imgs", ")", "==", "0", ":", "\n", "            ", "raise", "(", "RuntimeError", "(", "\"Found 0 images in: \"", "+", "root", "+", "\"\\n\"", "\n", "\"Supported image extensions are: \"", "+", "\n", "\",\"", ".", "join", "(", "IMG_EXTENSIONS", ")", ")", ")", "\n", "\n", "", "self", ".", "root", "=", "root", "\n", "self", ".", "imgs", "=", "imgs", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "return_paths", "=", "return_paths", "\n", "self", ".", "loader", "=", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.data.image_folder.ImageFolder.__getitem__": [[57, 66], ["image_folder.ImageFolder.loader", "image_folder.ImageFolder.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path", "=", "self", ".", "imgs", "[", "index", "]", "\n", "img", "=", "self", ".", "loader", "(", "path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "if", "self", ".", "return_paths", ":", "\n", "            ", "return", "img", ",", "path", "\n", "", "else", ":", "\n", "            ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.data.image_folder.ImageFolder.__len__": [[67, 69], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.data.image_folder.is_image_file": [[20, 22], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.data.image_folder.make_dataset": [[24, 35], ["os.path.isdir", "os.path.isdir", "sorted", "os.walk", "os.walk", "image_folder.is_image_file", "os.path.join", "os.path.join", "images.append"], "function", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.data.image_folder.is_image_file"], ["", "def", "make_dataset", "(", "dir", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "dir", ")", ",", "'%s is not a valid directory'", "%", "dir", "\n", "\n", "for", "root", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "dir", ")", ")", ":", "\n", "        ", "for", "fname", "in", "fnames", ":", "\n", "            ", "if", "is_image_file", "(", "fname", ")", ":", "\n", "                ", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "images", ".", "append", "(", "path", ")", "\n", "\n", "", "", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.data.image_folder.default_loader": [[37, 39], ["PIL.Image.open().convert", "PIL.Image.open"], "function", ["None"], ["", "def", "default_loader", "(", "path", ")", ":", "\n", "    ", "return", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.data.base_data_loader.BaseDataLoader.__init__": [[3, 5], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.data.base_data_loader.BaseDataLoader.initialize": [[6, 9], ["None"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.data.base_data_loader.BaseDataLoader.load_data": [[10, 12], ["None"], "methods", ["None"], ["", "def", "load_data", "(", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.data.unaligned_dataset.UnalignedDataset.initialize": [[10, 24], ["os.path.join", "os.path.join", "data.image_folder.make_dataset", "data.image_folder.make_dataset", "sorted", "sorted", "len", "len", "data.base_dataset.get_transform"], "methods", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.data.base_dataset.get_transform"], ["    ", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "root", "=", "opt", ".", "dataroot", "\n", "self", ".", "dir_A", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "opt", ".", "phase", "+", "'A'", ")", "\n", "self", ".", "dir_B", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "opt", ".", "phase", "+", "'B'", ")", "\n", "\n", "self", ".", "A_paths", "=", "make_dataset", "(", "self", ".", "dir_A", ")", "\n", "self", ".", "B_paths", "=", "make_dataset", "(", "self", ".", "dir_B", ")", "\n", "\n", "self", ".", "A_paths", "=", "sorted", "(", "self", ".", "A_paths", ")", "\n", "self", ".", "B_paths", "=", "sorted", "(", "self", ".", "B_paths", ")", "\n", "self", ".", "A_size", "=", "len", "(", "self", ".", "A_paths", ")", "\n", "self", ".", "B_size", "=", "len", "(", "self", ".", "B_paths", ")", "\n", "self", ".", "transform", "=", "get_transform", "(", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.data.unaligned_dataset.UnalignedDataset.__getitem__": [[25, 52], ["random.randint", "PIL.Image.open().convert", "PIL.Image.open().convert", "unaligned_dataset.UnalignedDataset.transform", "unaligned_dataset.UnalignedDataset.transform", "tmp.unsqueeze", "tmp.unsqueeze", "PIL.Image.open", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "A_path", "=", "self", ".", "A_paths", "[", "index", "%", "self", ".", "A_size", "]", "\n", "index_A", "=", "index", "%", "self", ".", "A_size", "\n", "index_B", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "B_size", "-", "1", ")", "\n", "B_path", "=", "self", ".", "B_paths", "[", "index_B", "]", "\n", "# print('(A, B) = (%d, %d)' % (index_A, index_B))", "\n", "A_img", "=", "Image", ".", "open", "(", "A_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "B_img", "=", "Image", ".", "open", "(", "B_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "A", "=", "self", ".", "transform", "(", "A_img", ")", "\n", "B", "=", "self", ".", "transform", "(", "B_img", ")", "\n", "if", "self", ".", "opt", ".", "which_direction", "==", "'BtoA'", ":", "\n", "            ", "input_nc", "=", "self", ".", "opt", ".", "output_nc", "\n", "output_nc", "=", "self", ".", "opt", ".", "input_nc", "\n", "", "else", ":", "\n", "            ", "input_nc", "=", "self", ".", "opt", ".", "input_nc", "\n", "output_nc", "=", "self", ".", "opt", ".", "output_nc", "\n", "\n", "", "if", "input_nc", "==", "1", ":", "# RGB to gray", "\n", "            ", "tmp", "=", "A", "[", "0", ",", "...", "]", "*", "0.299", "+", "A", "[", "1", ",", "...", "]", "*", "0.587", "+", "A", "[", "2", ",", "...", "]", "*", "0.114", "\n", "A", "=", "tmp", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "if", "output_nc", "==", "1", ":", "# RGB to gray", "\n", "            ", "tmp", "=", "B", "[", "0", ",", "...", "]", "*", "0.299", "+", "B", "[", "1", ",", "...", "]", "*", "0.587", "+", "B", "[", "2", ",", "...", "]", "*", "0.114", "\n", "B", "=", "tmp", ".", "unsqueeze", "(", "0", ")", "\n", "", "return", "{", "'A'", ":", "A", ",", "'B'", ":", "B", ",", "\n", "'A_paths'", ":", "A_path", ",", "'B_paths'", ":", "B_path", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.data.unaligned_dataset.UnalignedDataset.__len__": [[53, 55], ["max"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "max", "(", "self", ".", "A_size", ",", "self", ".", "B_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.data.unaligned_dataset.UnalignedDataset.name": [[56, 58], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'UnalignedDataset'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.options.test_options.TestOptions.initialize": [[5, 15], ["base_options.BaseOptions.initialize", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "float"], "methods", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.options.base_options.BaseOptions.initialize"], ["    ", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "BaseOptions", ".", "initialize", "(", "self", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--ntest'", ",", "type", "=", "int", ",", "default", "=", "float", "(", "\"inf\"", ")", ",", "help", "=", "'# of test examples.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--results_dir'", ",", "type", "=", "str", ",", "default", "=", "'./results/'", ",", "help", "=", "'saves results here.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--aspect_ratio'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'aspect ratio of result images'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--phase'", ",", "type", "=", "str", ",", "default", "=", "'test'", ",", "help", "=", "'train, val, test, etc'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--which_epoch'", ",", "type", "=", "str", ",", "default", "=", "'latest'", ",", "help", "=", "'which epoch to load? set to latest to use latest cached model'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--how_many'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'how many test images to run'", ")", "\n", "#self.parser.add_argument('--identity', type=float, default=0.0, help='use identity mapping. Setting identity other than 1 has an effect of scaling the weight of the identity mapping loss. For example, if the weight of the identity loss should be 10 times smaller than the weight of the reconstruction loss, please set optidentity = 0.1')", "\n", "self", ".", "isTrain", "=", "False", "\n", "", "", ""]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.options.train_options.TrainOptions.initialize": [[5, 30], ["base_options.BaseOptions.initialize", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument"], "methods", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.options.base_options.BaseOptions.initialize"], ["    ", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "BaseOptions", ".", "initialize", "(", "self", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--pan_lambdas'", ",", "nargs", "=", "'+'", ",", "type", "=", "float", ",", "default", "=", "[", "5.0", ",", "1.0", ",", "1.0", ",", "1.0", ",", "5.0", "]", ",", "help", "=", "'lambdas of PAN_loss'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--display_freq'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'frequency of showing training results on screen'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'frequency of showing training results on console'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--save_latest_freq'", ",", "type", "=", "int", ",", "default", "=", "5000", ",", "help", "=", "'frequency of saving the latest results'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--save_epoch_freq'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'frequency of saving checkpoints at the end of epochs'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--continue_train'", ",", "action", "=", "'store_true'", ",", "help", "=", "'continue training: load the latest model'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--epoch_count'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'the starting epoch count, we save the model by <epoch_count>, <epoch_count>+<save_latest_freq>, ...'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--phase'", ",", "type", "=", "str", ",", "default", "=", "'train'", ",", "help", "=", "'train, val, test, etc'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--which_epoch'", ",", "type", "=", "str", ",", "default", "=", "'latest'", ",", "help", "=", "'which epoch to load? set to latest to use latest cached model'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--niter'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'# of iter at starting learning rate'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--niter_decay'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'# of iter to linearly decay learning rate to zero'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--beta1'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'momentum term of adam'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.0002", ",", "help", "=", "'initial learning rate for adam'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_lsgan'", ",", "action", "=", "'store_true'", ",", "help", "=", "'do *not* use least square GAN, if false, use vanilla GAN'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lambda_A'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "help", "=", "'weight for cycle loss (A -> B -> A)'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lambda_B'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "help", "=", "'weight for cycle loss (B -> A -> B)'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--pool_size'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'the size of image buffer that stores previously generated images'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_html'", ",", "action", "=", "'store_true'", ",", "help", "=", "'do not save intermediate training results to [opt.checkpoints_dir]/[opt.name]/web/'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lr_policy'", ",", "type", "=", "str", ",", "default", "=", "'lambda'", ",", "help", "=", "'learning rate policy: lambda|step|plateau'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lr_decay_iters'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'multiply by a gamma every lr_decay_iters iterations'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--identity'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "'use identity mapping. Setting identity other than 1 has an effect of scaling the weight of the identity mapping loss. For example, if the weight of the identity loss should be 10 times smaller than the weight of the reconstruction loss, please set optidentity = 0.1'", ")", "\n", "\n", "self", ".", "isTrain", "=", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.options.base_options.BaseOptions.__init__": [[7, 10], ["argparse.ArgumentParser"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "self", ".", "initialized", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.options.base_options.BaseOptions.initialize": [[11, 45], ["base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "float"], "methods", ["None"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "self", ".", "parser", ".", "add_argument", "(", "'--pan_mergin_m'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'positive margin of PAN loss'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--dataroot'", ",", "required", "=", "True", ",", "help", "=", "'path to images (should have subfolders trainA, trainB, valA, valB, etc)'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--batchSize'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'input batch size'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--loadSize'", ",", "type", "=", "int", ",", "default", "=", "286", ",", "help", "=", "'scale images to this size'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--fineSize'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'then crop to this size'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--input_nc'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'# of input image channels'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--output_nc'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'# of output image channels'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--ngf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of gen filters in first conv layer'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--ndf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of discrim filters in first conv layer'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--which_model_netD'", ",", "type", "=", "str", ",", "default", "=", "'basic'", ",", "help", "=", "'selects model to use for netD'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--which_model_netG'", ",", "type", "=", "str", ",", "default", "=", "'resnet_9blocks'", ",", "help", "=", "'selects model to use for netG'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--n_layers_D'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'only used if which_model_netD==n_layers'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--gpu_ids'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "help", "=", "'gpu ids: e.g. 0  0,1,2, 0,2. use -1 for CPU'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--name'", ",", "type", "=", "str", ",", "default", "=", "'experiment_name'", ",", "help", "=", "'name of the experiment. It decides where to store samples and models'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--dataset_mode'", ",", "type", "=", "str", ",", "default", "=", "'unaligned'", ",", "help", "=", "'chooses how datasets are loaded. [unaligned | aligned | single]'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'cycle_gan'", ",", "\n", "help", "=", "'chooses which model to use. cycle_gan, pix2pix, test'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--which_direction'", ",", "type", "=", "str", ",", "default", "=", "'AtoB'", ",", "help", "=", "'AtoB or BtoA'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--nThreads'", ",", "default", "=", "2", ",", "type", "=", "int", ",", "help", "=", "'# threads for loading data'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--checkpoints_dir'", ",", "type", "=", "str", ",", "default", "=", "'./checkpoints'", ",", "help", "=", "'models are saved here'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--norm'", ",", "type", "=", "str", ",", "default", "=", "'instance'", ",", "help", "=", "'instance normalization or batch normalization'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--serial_batches'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if true, takes images in order to make batches, otherwise takes them randomly'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--display_winsize'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'display window size'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--display_id'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'window id of the web display'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--display_port'", ",", "type", "=", "int", ",", "default", "=", "8097", ",", "help", "=", "'visdom port of the web display'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--display_single_pane_ncols'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'if positive, display all images in a single visdom web panel with certain number of images per row.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_dropout'", ",", "action", "=", "'store_true'", ",", "help", "=", "'no dropout for the generator'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--max_dataset_size'", ",", "type", "=", "int", ",", "default", "=", "float", "(", "\"inf\"", ")", ",", "help", "=", "'Maximum number of samples allowed per dataset. If the dataset directory contains more than max_dataset_size, only a subset is loaded.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--resize_or_crop'", ",", "type", "=", "str", ",", "default", "=", "'resize_and_crop'", ",", "help", "=", "'scaling and cropping of images at load time [resize_and_crop|crop|scale_width|scale_width_and_crop]'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_flip'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do not flip the images for data augmentation'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--init_type'", ",", "type", "=", "str", ",", "default", "=", "'xavier'", ",", "help", "=", "'network initialization [normal|xavier|kaiming|orthogonal]'", ")", "\n", "\n", "self", ".", "initialized", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.acecreamu_ssim-pan.options.base_options.BaseOptions.parse": [[46, 80], ["base_options.BaseOptions.parser.parse_args", "base_options.BaseOptions.opt.gpu_ids.split", "vars", "print", "sorted", "print", "os.path.join", "util.util.util.mkdirs", "os.path.join", "base_options.BaseOptions.initialize", "int", "len", "torch.cuda.set_device", "vars.items", "print", "open", "opt_file.write", "sorted", "opt_file.write", "base_options.BaseOptions.opt.gpu_ids.append", "vars.items", "opt_file.write", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.acecreamu_ssim-pan.util.util.mkdirs", "home.repos.pwc.inspect_result.acecreamu_ssim-pan.options.base_options.BaseOptions.initialize"], ["", "def", "parse", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "initialized", ":", "\n", "            ", "self", ".", "initialize", "(", ")", "\n", "", "self", ".", "opt", "=", "self", ".", "parser", ".", "parse_args", "(", ")", "\n", "self", ".", "opt", ".", "isTrain", "=", "self", ".", "isTrain", "# train or test", "\n", "\n", "str_ids", "=", "self", ".", "opt", ".", "gpu_ids", ".", "split", "(", "','", ")", "\n", "self", ".", "opt", ".", "gpu_ids", "=", "[", "]", "\n", "for", "str_id", "in", "str_ids", ":", "\n", "            ", "id", "=", "int", "(", "str_id", ")", "\n", "if", "id", ">=", "0", ":", "\n", "                ", "self", ".", "opt", ".", "gpu_ids", ".", "append", "(", "id", ")", "\n", "\n", "# set gpu ids", "\n", "", "", "if", "len", "(", "self", ".", "opt", ".", "gpu_ids", ")", ">", "0", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "self", ".", "opt", ".", "gpu_ids", "[", "0", "]", ")", "\n", "\n", "", "args", "=", "vars", "(", "self", ".", "opt", ")", "\n", "\n", "print", "(", "'------------ Options -------------'", ")", "\n", "for", "k", ",", "v", "in", "sorted", "(", "args", ".", "items", "(", ")", ")", ":", "\n", "            ", "print", "(", "'%s: %s'", "%", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ")", ")", "\n", "", "print", "(", "'-------------- End ----------------'", ")", "\n", "\n", "# save to the disk", "\n", "expr_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "checkpoints_dir", ",", "self", ".", "opt", ".", "name", ")", "\n", "util", ".", "mkdirs", "(", "expr_dir", ")", "\n", "file_name", "=", "os", ".", "path", ".", "join", "(", "expr_dir", ",", "'opt.txt'", ")", "\n", "with", "open", "(", "file_name", ",", "'wt'", ")", "as", "opt_file", ":", "\n", "            ", "opt_file", ".", "write", "(", "'------------ Options -------------\\n'", ")", "\n", "for", "k", ",", "v", "in", "sorted", "(", "args", ".", "items", "(", ")", ")", ":", "\n", "                ", "opt_file", ".", "write", "(", "'%s: %s\\n'", "%", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ")", ")", "\n", "", "opt_file", ".", "write", "(", "'-------------- End ----------------\\n'", ")", "\n", "", "return", "self", ".", "opt", "\n", "", "", ""]]}