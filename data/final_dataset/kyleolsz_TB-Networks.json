{"home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tbn_model.Conv.__init__": [[16, 36], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d"], "methods", ["home.repos.pwc.inspect_result.kyleolsz_TB-Networks.pytorch_ssim.__init__.SSIM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_in_layers", ",", "num_out_layers", ",", "kernel_size", ",", "stride", ",", "is_3d_conv", "=", "False", ",", "dilation", "=", "1", ",", "\n", "use_normalization", "=", "True", ",", "\n", "use_relu", "=", "False", ")", ":", "\n", "        ", "super", "(", "Conv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "is_3d_conv", "=", "is_3d_conv", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "use_normalization", "=", "use_normalization", "\n", "self", ".", "use_relu", "=", "use_relu", "\n", "\n", "if", "not", "self", ".", "is_3d_conv", ":", "\n", "            ", "self", ".", "conv_base", "=", "nn", ".", "Conv2d", "(", "num_in_layers", ",", "num_out_layers", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "dilation", "=", "self", ".", "dilation", ")", "\n", "if", "self", ".", "use_normalization", ":", "\n", "                ", "self", ".", "normalize", "=", "nn", ".", "BatchNorm2d", "(", "num_out_layers", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "conv_base", "=", "nn", ".", "Conv3d", "(", "num_in_layers", ",", "num_out_layers", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "dilation", "=", "self", ".", "dilation", ")", "\n", "if", "self", ".", "use_normalization", ":", "\n", "                ", "self", ".", "normalize", "=", "nn", ".", "BatchNorm3d", "(", "num_out_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tbn_model.Conv.forward": [[37, 50], ["int", "tbn_model.Conv.conv_base", "numpy.floor", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "tbn_model.Conv.normalize", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.elu", "torch.elu", "torch.elu", "torch.elu"], "methods", ["home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.loss_models.PerceptualVGG19.normalize"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "p", "=", "int", "(", "np", ".", "floor", "(", "self", ".", "dilation", "*", "(", "self", ".", "kernel_size", "-", "1", ")", "/", "2", ")", ")", "\n", "if", "not", "self", ".", "is_3d_conv", ":", "\n", "            ", "pd", "=", "(", "p", ",", "p", ",", "p", ",", "p", ")", "\n", "", "else", ":", "\n", "            ", "pd", "=", "(", "p", ",", "p", ",", "p", ",", "p", ",", "p", ",", "p", ")", "\n", "", "x", "=", "self", ".", "conv_base", "(", "F", ".", "pad", "(", "x", ",", "pd", ")", ")", "\n", "if", "self", ".", "use_normalization", ":", "\n", "            ", "x", "=", "self", ".", "normalize", "(", "x", ")", "\n", "", "if", "self", ".", "use_relu", ":", "\n", "            ", "return", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "return", "F", ".", "elu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tbn_model.ResConv.__init__": [[53, 69], ["torch.Module.__init__", "tbn_model.Conv", "tbn_model.Conv", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d"], "methods", ["home.repos.pwc.inspect_result.kyleolsz_TB-Networks.pytorch_ssim.__init__.SSIM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_in_layers", ",", "num_out_layers", ",", "stride", ",", "kernel_size", "=", "3", ",", "is_3d_conv", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "is_3d_conv", "=", "is_3d_conv", "\n", "self", ".", "num_out_layers", "=", "num_out_layers", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "conv1", "=", "Conv", "(", "num_in_layers", ",", "num_out_layers", ",", "1", ",", "1", ",", "self", ".", "is_3d_conv", ")", "\n", "self", ".", "conv2", "=", "Conv", "(", "num_out_layers", ",", "num_out_layers", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "is_3d_conv", "=", "self", ".", "is_3d_conv", ")", "\n", "if", "not", "self", ".", "is_3d_conv", ":", "\n", "            ", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "num_out_layers", ",", "4", "*", "num_out_layers", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "num_in_layers", ",", "4", "*", "num_out_layers", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ")", "\n", "self", ".", "normalize", "=", "nn", ".", "BatchNorm2d", "(", "4", "*", "num_out_layers", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv3", "=", "nn", ".", "Conv3d", "(", "num_out_layers", ",", "4", "*", "num_out_layers", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv3d", "(", "num_in_layers", ",", "4", "*", "num_out_layers", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ")", "\n", "self", ".", "normalize", "=", "nn", ".", "BatchNorm3d", "(", "4", "*", "num_out_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tbn_model.ResConv.forward": [[70, 76], ["tbn_model.ResConv.conv1", "tbn_model.ResConv.conv2", "tbn_model.ResConv.conv3", "tbn_model.ResConv.conv4", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "tbn_model.ResConv.normalize"], "methods", ["home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.loss_models.PerceptualVGG19.normalize"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x_out", "=", "self", ".", "conv2", "(", "x_out", ")", "\n", "x_out", "=", "self", ".", "conv3", "(", "x_out", ")", "\n", "shortcut", "=", "self", ".", "conv4", "(", "x", ")", "\n", "return", "F", ".", "elu", "(", "self", ".", "normalize", "(", "x_out", "+", "shortcut", ")", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tbn_model.UpConv.__init__": [[95, 100], ["torch.Module.__init__", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "tbn_model.Conv"], "methods", ["home.repos.pwc.inspect_result.kyleolsz_TB-Networks.pytorch_ssim.__init__.SSIM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_in_layers", ",", "num_out_layers", ",", "kernel_size", ",", "scale", ",", "is_3d_conv", "=", "False", ")", ":", "\n", "        ", "super", "(", "UpConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "is_3d_conv", "=", "is_3d_conv", "\n", "self", ".", "up_nn", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "scale", ")", "\n", "self", ".", "conv1", "=", "Conv", "(", "num_in_layers", ",", "num_out_layers", ",", "kernel_size", ",", "1", ",", "is_3d_conv", "=", "is_3d_conv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tbn_model.UpConv.forward": [[101, 104], ["tbn_model.UpConv.up_nn", "tbn_model.UpConv.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "up_nn", "(", "x", ")", "\n", "return", "self", ".", "conv1", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tbn_model.OutputConv.__init__": [[107, 116], ["torch.Module.__init__", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d"], "methods", ["home.repos.pwc.inspect_result.kyleolsz_TB-Networks.pytorch_ssim.__init__.SSIM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_in_layers", ",", "num_out_layers", "=", "3", ",", "is_3d_conv", "=", "False", ",", "kernel_size", "=", "3", ")", ":", "\n", "        ", "super", "(", "OutputConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "is_3d_conv", "=", "is_3d_conv", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "sigmoid", "=", "torch", ".", "nn", ".", "Sigmoid", "(", ")", "\n", "if", "not", "self", ".", "is_3d_conv", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "num_in_layers", ",", "num_out_layers", ",", "kernel_size", "=", "self", ".", "kernel_size", ",", "stride", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "num_in_layers", ",", "num_out_layers", ",", "kernel_size", "=", "self", ".", "kernel_size", ",", "stride", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tbn_model.OutputConv.forward": [[117, 129], ["tbn_model.OutputConv.sigmoid", "tbn_model.OutputConv.conv1", "tbn_model.OutputConv.conv1", "torch.pad", "torch.pad", "torch.pad", "torch.pad"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "kernel_size", ">", "1", ":", "\n", "            ", "p", "=", "1", "\n", "if", "not", "self", ".", "is_3d_conv", ":", "\n", "                ", "pd", "=", "(", "p", ",", "p", ",", "p", ",", "p", ")", "\n", "", "else", ":", "\n", "                ", "pd", "=", "(", "p", ",", "p", ",", "p", ",", "p", ",", "p", ",", "p", ")", "\n", "", "x", "=", "self", ".", "conv1", "(", "F", ".", "pad", "(", "x", ",", "pd", ")", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "sigmoid", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tbn_model.TBN.__init__": [[132, 240], ["torch.Module.__init__", "int", "int", "tbn_model.Conv", "tbn_model.ResBlock", "tbn_model.ResBlock", "tbn_model.ResBlock", "tbn_model.UpConv", "tbn_model.Conv", "tbn_model.UpConv", "tbn_model.Conv", "tbn_model.UpConv", "tbn_model.Conv", "tbn_model.ResBlock", "tbn_model.ResBlock", "tbn_model.ResBlock", "tbn_model.UpConv", "tbn_model.Conv", "tbn_model.UpConv", "tbn_model.Conv", "tbn_model.UpConv", "tbn_model.Conv", "tbn_model.UpConv", "tbn_model.Conv", "tbn_model.OutputConv", "int", "tbn_model.Conv", "tbn_model.Conv", "tbn_model.Conv", "tbn_model.Conv", "tbn_model.TBN.modules", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "tbn_model.OutputConv", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "tbn_model.TBN.init_seg3d_proxy", "isinstance", "in_conv_layers.append", "deconv_layers.append", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "isinstance", "tbn_model.Conv", "tbn_model.UpConv", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_"], "methods", ["home.repos.pwc.inspect_result.kyleolsz_TB-Networks.pytorch_ssim.__init__.SSIM.__init__", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tbn_model.ResBlock", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tbn_model.ResBlock", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tbn_model.ResBlock", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tbn_model.ResBlock", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tbn_model.ResBlock", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tbn_model.ResBlock", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tbn_model.TBN.init_seg3d_proxy"], ["    ", "def", "__init__", "(", "self", ",", "num_in_layers", ",", "num_out_layers", ",", "args", ",", "vol_dim", "=", "40", ",", "num_features", "=", "800", ",", "\n", "tensor_type", "=", "'torch.FloatTensor'", ",", ")", ":", "\n", "        ", "super", "(", "TBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "vol_dim", "=", "vol_dim", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "tensor_type", "=", "tensor_type", "\n", "self", ".", "num_enc_features", "=", "int", "(", "self", ".", "args", ".", "num_gen_features", "/", "self", ".", "args", ".", "encode_feature_scale_factor", ")", "\n", "self", ".", "num_dec_features", "=", "int", "(", "self", ".", "args", ".", "num_gen_features", "/", "self", ".", "args", ".", "decode_feature_scale_factor", ")", "\n", "\n", "in_layers", "=", "num_in_layers", "\n", "if", "0", "<", "self", ".", "args", ".", "num_input_convs", ":", "\n", "            ", "init_num_in_layers", "=", "num_in_layers", "\n", "middle_num_in_layers", "=", "self", ".", "num_enc_features", "\n", "middle_num_out_layers", "=", "middle_num_in_layers", "\n", "final_num_out_layers", "=", "middle_num_in_layers", "\n", "in_layers", "=", "final_num_out_layers", "\n", "in_conv_layers", "=", "[", "]", "\n", "\n", "for", "idx", "in", "range", "(", "self", ".", "args", ".", "num_input_convs", ")", ":", "\n", "                ", "if", "0", "==", "idx", ":", "\n", "                    ", "conv_in_layers", "=", "init_num_in_layers", "\n", "conv_out_layers", "=", "middle_num_in_layers", "\n", "", "elif", "self", ".", "args", ".", "num_input_convs", "-", "1", "==", "idx", ":", "\n", "                    ", "conv_in_layers", "=", "middle_num_in_layers", "\n", "conv_out_layers", "=", "middle_num_out_layers", "\n", "", "else", ":", "\n", "                    ", "conv_in_layers", "=", "middle_num_in_layers", "\n", "conv_out_layers", "=", "final_num_out_layers", "\n", "\n", "", "in_conv_layers", ".", "append", "(", "\n", "Conv", "(", "num_in_layers", "=", "conv_in_layers", ",", "num_out_layers", "=", "conv_out_layers", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "is_3d_conv", "=", "False", ",", "dilation", "=", "1", ",", "use_normalization", "=", "True", ")", "\n", ")", "\n", "\n", "", "self", ".", "in_conv", "=", "nn", ".", "Sequential", "(", "*", "in_conv_layers", ")", "\n", "\n", "", "self", ".", "conv1_2d_encode", "=", "Conv", "(", "in_layers", ",", "2", "*", "self", ".", "num_enc_features", ",", "7", ",", "2", ")", "\n", "self", ".", "conv2_2d_encode", "=", "ResBlock", "(", "2", "*", "self", ".", "num_enc_features", ",", "self", ".", "num_enc_features", ",", "self", ".", "args", ".", "num_res_convs", ",", "2", ")", "\n", "self", ".", "conv3_2d_encode", "=", "ResBlock", "(", "4", "*", "self", ".", "num_enc_features", ",", "2", "*", "self", ".", "num_enc_features", ",", "self", ".", "args", ".", "num_res_convs", ",", "2", ")", "\n", "self", ".", "conv4_2d_encode", "=", "ResBlock", "(", "8", "*", "self", ".", "num_enc_features", ",", "4", "*", "self", ".", "num_enc_features", ",", "self", ".", "args", ".", "num_res_convs", ",", "2", ")", "\n", "\n", "self", ".", "upconv4_2d_encode", "=", "UpConv", "(", "16", "*", "self", ".", "num_enc_features", ",", "8", "*", "self", ".", "num_enc_features", ",", "3", ",", "2", ")", "\n", "self", ".", "iconv4_2d_encode", "=", "Conv", "(", "2", "*", "8", "*", "self", ".", "num_enc_features", ",", "8", "*", "self", ".", "num_enc_features", ",", "3", ",", "1", ")", "\n", "\n", "self", ".", "upconv3_2d_encode", "=", "UpConv", "(", "8", "*", "self", ".", "num_enc_features", ",", "4", "*", "self", ".", "num_enc_features", ",", "3", ",", "2", ")", "\n", "self", ".", "iconv3_2d_encode", "=", "Conv", "(", "2", "*", "4", "*", "self", ".", "num_enc_features", ",", "4", "*", "self", ".", "num_enc_features", ",", "3", ",", "1", ")", "\n", "\n", "self", ".", "upconv2_2d_encode", "=", "UpConv", "(", "4", "*", "self", ".", "num_enc_features", ",", "self", ".", "num_features", ",", "3", ",", "2", ")", "\n", "self", ".", "iconv2_2d_encode", "=", "Conv", "(", "2", "*", "self", ".", "num_enc_features", "+", "self", ".", "num_features", ",", "self", ".", "num_features", ",", "3", ",", "1", ")", "\n", "\n", "self", ".", "src_seg2d", "=", "OutputConv", "(", "self", ".", "num_features", ",", "1", ")", "if", "0.0", "<", "self", ".", "args", ".", "w_gen_seg3d", "else", "None", "\n", "\n", "self", ".", "conv2_2d_decode", "=", "ResBlock", "(", "self", ".", "num_features", ",", "self", ".", "num_dec_features", ",", "self", ".", "args", ".", "num_res_convs", ",", "2", ")", "\n", "self", ".", "conv3_2d_decode", "=", "ResBlock", "(", "4", "*", "self", ".", "num_dec_features", ",", "2", "*", "self", ".", "num_dec_features", ",", "self", ".", "args", ".", "num_res_convs", ",", "2", ")", "\n", "self", ".", "conv4_2d_decode", "=", "ResBlock", "(", "8", "*", "self", ".", "num_dec_features", ",", "4", "*", "self", ".", "num_dec_features", ",", "self", ".", "args", ".", "num_res_convs", ",", "2", ")", "\n", "\n", "self", ".", "upconv4_2d_decode", "=", "UpConv", "(", "16", "*", "self", ".", "num_dec_features", ",", "8", "*", "self", ".", "num_dec_features", ",", "3", ",", "2", ")", "\n", "self", ".", "iconv4_2d_decode", "=", "Conv", "(", "2", "*", "8", "*", "self", ".", "num_dec_features", ",", "8", "*", "self", ".", "num_dec_features", ",", "3", ",", "1", ")", "\n", "\n", "self", ".", "upconv3_2d_decode", "=", "UpConv", "(", "8", "*", "self", ".", "num_dec_features", ",", "4", "*", "self", ".", "num_dec_features", ",", "3", ",", "2", ")", "\n", "self", ".", "iconv3_2d_decode", "=", "Conv", "(", "2", "*", "4", "*", "self", ".", "num_dec_features", ",", "4", "*", "self", ".", "num_dec_features", ",", "3", ",", "1", ")", "\n", "\n", "self", ".", "upconv2_2d_decode", "=", "UpConv", "(", "4", "*", "self", ".", "num_dec_features", ",", "2", "*", "self", ".", "num_dec_features", ",", "3", ",", "2", ")", "\n", "self", ".", "iconv2_2d_decode", "=", "Conv", "(", "self", ".", "num_features", "+", "2", "*", "self", ".", "num_dec_features", ",", "2", "*", "self", ".", "num_dec_features", ",", "3", ",", "1", ")", "\n", "\n", "self", ".", "upconv1_2d_decode", "=", "UpConv", "(", "2", "*", "self", ".", "num_dec_features", ",", "self", ".", "num_dec_features", ",", "3", ",", "2", ")", "\n", "self", ".", "iconv1_2d_decode", "=", "Conv", "(", "self", ".", "num_dec_features", ",", "self", ".", "num_dec_features", ",", "3", ",", "1", ")", "\n", "\n", "if", "0", "<", "self", ".", "args", ".", "num_output_deconvs", ":", "\n", "            ", "deconv_layers", "=", "[", "]", "\n", "init_num_in_layers", "=", "self", ".", "num_dec_features", "\n", "middle_num_in_layers", "=", "self", ".", "num_dec_features", "\n", "middle_num_out_layers", "=", "middle_num_in_layers", "\n", "final_num_out_layers", "=", "middle_num_in_layers", "\n", "\n", "for", "idx", "in", "range", "(", "self", ".", "args", ".", "num_output_deconvs", ")", ":", "\n", "                ", "if", "0", "==", "idx", ":", "\n", "                    ", "conv_in_layers", "=", "init_num_in_layers", "\n", "conv_out_layers", "=", "middle_num_in_layers", "\n", "", "elif", "self", ".", "args", ".", "num_output_deconvs", "-", "1", "==", "idx", ":", "\n", "                    ", "conv_in_layers", "=", "middle_num_in_layers", "\n", "conv_out_layers", "=", "middle_num_out_layers", "\n", "", "else", ":", "\n", "                    ", "conv_in_layers", "=", "middle_num_in_layers", "\n", "conv_out_layers", "=", "final_num_out_layers", "\n", "", "deconv_layers", ".", "append", "(", "UpConv", "(", "conv_in_layers", ",", "conv_out_layers", ",", "3", ",", "2", ")", ")", "\n", "\n", "", "self", ".", "deconv", "=", "nn", ".", "Sequential", "(", "*", "deconv_layers", ")", "\n", "\n", "", "self", ".", "output_2d_decode", "=", "OutputConv", "(", "self", ".", "num_dec_features", ",", "num_out_layers", ")", "\n", "\n", "num_3d_features", "=", "int", "(", "self", ".", "num_features", "/", "self", ".", "vol_dim", ")", "\n", "self", ".", "conv1_3d_encode", "=", "Conv", "(", "num_3d_features", ",", "self", ".", "num_enc_features", ",", "3", ",", "1", ",", "is_3d_conv", "=", "True", ")", "\n", "self", ".", "conv2_3d_encode", "=", "Conv", "(", "self", ".", "num_enc_features", ",", "num_3d_features", ",", "3", ",", "1", ",", "is_3d_conv", "=", "True", ")", "\n", "\n", "self", ".", "conv1_3d_decode", "=", "Conv", "(", "num_3d_features", ",", "self", ".", "num_dec_features", ",", "3", ",", "1", ",", "is_3d_conv", "=", "True", ")", "\n", "self", ".", "conv2_3d_decode", "=", "Conv", "(", "self", ".", "num_dec_features", ",", "num_3d_features", ",", "3", ",", "1", ",", "is_3d_conv", "=", "True", ")", "\n", "\n", "if", "self", ".", "args", ".", "use_seg3d_proxy", ":", "\n", "            ", "self", ".", "init_seg3d_proxy", "(", "num_3d_features", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tbn_model.TBN.init_seg3d_proxy": [[241, 259], ["tbn_model.Conv", "tbn_model.Conv", "tbn_model.Conv", "tbn_model.Conv", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "tbn_model.OutputConv", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "int", "int", "int", "int", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["None"], ["", "", "", "def", "init_seg3d_proxy", "(", "self", ",", "num_3d_features", ")", ":", "\n", "        ", "self", ".", "seg_conv1_3d_encode", "=", "Conv", "(", "num_3d_features", ",", "int", "(", "self", ".", "args", ".", "num_gen_features", "/", "self", ".", "args", ".", "encode_feature_scale_factor", ")", ",", "3", ",", "1", ",", "is_3d_conv", "=", "True", ")", "\n", "self", ".", "seg_conv2_3d_encode", "=", "Conv", "(", "int", "(", "self", ".", "args", ".", "num_gen_features", "/", "self", ".", "args", ".", "encode_feature_scale_factor", ")", ",", "num_3d_features", ",", "3", ",", "1", ",", "is_3d_conv", "=", "True", ")", "\n", "self", ".", "seg_conv1_3d_decode", "=", "Conv", "(", "num_3d_features", ",", "int", "(", "self", ".", "args", ".", "num_gen_features", "/", "self", ".", "args", ".", "decode_feature_scale_factor", ")", ",", "3", ",", "1", ",", "is_3d_conv", "=", "True", ")", "\n", "self", ".", "seg_conv2_3d_decode", "=", "Conv", "(", "int", "(", "self", ".", "args", ".", "num_gen_features", "/", "self", ".", "args", ".", "decode_feature_scale_factor", ")", ",", "1", ",", "3", ",", "1", ",", "is_3d_conv", "=", "True", ")", "\n", "\n", "self", ".", "seg_conv_3d_final", "=", "nn", ".", "Softmax", "(", "dim", "=", "2", ")", "if", "self", ".", "args", ".", "use_seg3d_softmax", "else", "nn", ".", "Sigmoid", "(", ")", "\n", "\n", "self", ".", "seg_conv_3d", "=", "nn", ".", "Sequential", "(", "self", ".", "seg_conv1_3d_encode", ",", "self", ".", "seg_conv2_3d_encode", ",", "\n", "self", ".", "seg_conv1_3d_decode", ",", "self", ".", "seg_conv2_3d_decode", ",", "\n", "self", ".", "seg_conv_3d_final", ")", "\n", "\n", "self", ".", "seg_conv_3d_to_2d", "=", "OutputConv", "(", "self", ".", "vol_dim", ",", "1", ",", "is_3d_conv", "=", "False", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "seg_inv_transform", "=", "nn", ".", "Upsample", "(", "size", "=", "[", "self", ".", "args", ".", "input_height", ",", "self", ".", "args", ".", "input_width", "]", ",", "mode", "=", "'nearest'", ")", "\n", "\n", "self", ".", "seg_conv_3d_combine", "=", "nn", ".", "Sequential", "(", "self", ".", "seg_conv_3d_to_2d", ",", "self", ".", "seg_inv_transform", ")", "\n", "\n", "self", ".", "seg_transform", "=", "nn", ".", "Upsample", "(", "size", "=", "[", "self", ".", "vol_dim", ",", "self", ".", "vol_dim", "]", ",", "mode", "=", "'bilinear'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tbn_model.TBN.get_flow_fields": [[260, 370], ["origxpos.repeat.repeat.repeat", "origypos.repeat.repeat.repeat", "origzpos.repeat.repeat.repeat", "torch.cos().reshape().repeat().reshape", "torch.cos().reshape().repeat().reshape", "torch.cos().reshape().repeat().reshape", "torch.cos().reshape().repeat().reshape", "torch.cos().reshape().repeat().reshape", "torch.cos().reshape().repeat().reshape", "torch.cos().reshape().repeat().reshape", "torch.cos().reshape().repeat().reshape", "torch.cos().reshape().repeat().reshape", "torch.cos().reshape().repeat().reshape", "torch.cos().reshape().repeat().reshape", "torch.cos().reshape().repeat().reshape", "torch.cos().reshape().repeat().reshape", "torch.cos().reshape().repeat().reshape", "torch.cos().reshape().repeat().reshape", "torch.cos().reshape().repeat().reshape", "torch.sin().reshape().repeat().reshape", "torch.sin().reshape().repeat().reshape", "torch.sin().reshape().repeat().reshape", "torch.sin().reshape().repeat().reshape", "torch.sin().reshape().repeat().reshape", "torch.sin().reshape().repeat().reshape", "torch.sin().reshape().repeat().reshape", "torch.sin().reshape().repeat().reshape", "torch.sin().reshape().repeat().reshape", "torch.sin().reshape().repeat().reshape", "torch.sin().reshape().repeat().reshape", "torch.sin().reshape().repeat().reshape", "torch.sin().reshape().repeat().reshape", "torch.sin().reshape().repeat().reshape", "torch.sin().reshape().repeat().reshape", "torch.sin().reshape().repeat().reshape", "torch.cos().reshape().repeat().reshape", "torch.cos().reshape().repeat().reshape", "torch.cos().reshape().repeat().reshape", "torch.cos().reshape().repeat().reshape", "torch.cos().reshape().repeat().reshape", "torch.cos().reshape().repeat().reshape", "torch.cos().reshape().repeat().reshape", "torch.cos().reshape().repeat().reshape", "torch.cos().reshape().repeat().reshape", "torch.cos().reshape().repeat().reshape", "torch.cos().reshape().repeat().reshape", "torch.cos().reshape().repeat().reshape", "torch.cos().reshape().repeat().reshape", "torch.cos().reshape().repeat().reshape", "torch.cos().reshape().repeat().reshape", "torch.cos().reshape().repeat().reshape", "torch.sin().reshape().repeat().reshape", "torch.sin().reshape().repeat().reshape", "torch.sin().reshape().repeat().reshape", "torch.sin().reshape().repeat().reshape", "torch.sin().reshape().repeat().reshape", "torch.sin().reshape().repeat().reshape", "torch.sin().reshape().repeat().reshape", "torch.sin().reshape().repeat().reshape", "torch.sin().reshape().repeat().reshape", "torch.sin().reshape().repeat().reshape", "torch.sin().reshape().repeat().reshape", "torch.sin().reshape().repeat().reshape", "torch.sin().reshape().repeat().reshape", "torch.sin().reshape().repeat().reshape", "torch.sin().reshape().repeat().reshape", "torch.sin().reshape().repeat().reshape", "torch.cos().reshape().repeat().reshape", "torch.cos().reshape().repeat().reshape", "torch.cos().reshape().repeat().reshape", "torch.cos().reshape().repeat().reshape", "torch.cos().reshape().repeat().reshape", "torch.cos().reshape().repeat().reshape", "torch.cos().reshape().repeat().reshape", "torch.cos().reshape().repeat().reshape", "torch.cos().reshape().repeat().reshape", "torch.cos().reshape().repeat().reshape", "torch.cos().reshape().repeat().reshape", "torch.cos().reshape().repeat().reshape", "torch.cos().reshape().repeat().reshape", "torch.cos().reshape().repeat().reshape", "torch.cos().reshape().repeat().reshape", "torch.cos().reshape().repeat().reshape", "torch.sin().reshape().repeat().reshape", "torch.sin().reshape().repeat().reshape", "torch.sin().reshape().repeat().reshape", "torch.sin().reshape().repeat().reshape", "torch.sin().reshape().repeat().reshape", "torch.sin().reshape().repeat().reshape", "torch.sin().reshape().repeat().reshape", "torch.sin().reshape().repeat().reshape", "torch.sin().reshape().repeat().reshape", "torch.sin().reshape().repeat().reshape", "torch.sin().reshape().repeat().reshape", "torch.sin().reshape().repeat().reshape", "torch.sin().reshape().repeat().reshape", "torch.sin().reshape().repeat().reshape", "torch.sin().reshape().repeat().reshape", "torch.sin().reshape().repeat().reshape", "flow_field_x.view().type.view().type.view().type", "flow_field_y.view().type.view().type.view().type", "flow_field_z.view().type.view().type.view().type", "rotation_angle.type", "init_elev_rotation_angle.type", "final_elev_rotation_angle.type", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.linspace().repeat().repeat().type", "torch.linspace().repeat().repeat().type", "torch.linspace().repeat().repeat().type", "torch.linspace().repeat().repeat().type", "torch.linspace().repeat().repeat().type", "torch.linspace().repeat().repeat().type", "torch.linspace().repeat().repeat().type", "torch.linspace().repeat().repeat().type", "torch.linspace().repeat().repeat().type", "torch.linspace().repeat().repeat().type", "torch.linspace().repeat().repeat().type", "torch.linspace().repeat().repeat().type", "torch.linspace().repeat().repeat().type", "torch.linspace().repeat().repeat().type", "torch.linspace().repeat().repeat().type", "torch.linspace().repeat().repeat().type", "torch.linspace().repeat().permute().repeat().type", "torch.linspace().repeat().permute().repeat().type", "torch.linspace().repeat().permute().repeat().type", "torch.linspace().repeat().permute().repeat().type", "torch.linspace().repeat().permute().repeat().type", "torch.linspace().repeat().permute().repeat().type", "torch.linspace().repeat().permute().repeat().type", "torch.linspace().repeat().permute().repeat().type", "torch.linspace().repeat().permute().repeat().type", "torch.linspace().repeat().permute().repeat().type", "torch.linspace().repeat().permute().repeat().type", "torch.linspace().repeat().permute().repeat().type", "torch.linspace().repeat().permute().repeat().type", "torch.linspace().repeat().permute().repeat().type", "torch.linspace().repeat().permute().repeat().type", "torch.linspace().repeat().permute().repeat().type", "torch.linspace().repeat().repeat().permute().type", "torch.linspace().repeat().repeat().permute().type", "torch.linspace().repeat().repeat().permute().type", "torch.linspace().repeat().repeat().permute().type", "torch.linspace().repeat().repeat().permute().type", "torch.linspace().repeat().repeat().permute().type", "torch.linspace().repeat().repeat().permute().type", "torch.linspace().repeat().repeat().permute().type", "torch.linspace().repeat().repeat().permute().type", "torch.linspace().repeat().repeat().permute().type", "torch.linspace().repeat().repeat().permute().type", "torch.linspace().repeat().repeat().permute().type", "torch.linspace().repeat().repeat().permute().type", "torch.linspace().repeat().repeat().permute().type", "torch.linspace().repeat().repeat().permute().type", "torch.linspace().repeat().repeat().permute().type", "torch.cos().reshape().repeat", "torch.cos().reshape().repeat", "torch.cos().reshape().repeat", "torch.cos().reshape().repeat", "torch.cos().reshape().repeat", "torch.cos().reshape().repeat", "torch.cos().reshape().repeat", "torch.cos().reshape().repeat", "torch.cos().reshape().repeat", "torch.cos().reshape().repeat", "torch.cos().reshape().repeat", "torch.cos().reshape().repeat", "torch.cos().reshape().repeat", "torch.cos().reshape().repeat", "torch.cos().reshape().repeat", "torch.cos().reshape().repeat", "torch.sin().reshape().repeat", "torch.sin().reshape().repeat", "torch.sin().reshape().repeat", "torch.sin().reshape().repeat", "torch.sin().reshape().repeat", "torch.sin().reshape().repeat", "torch.sin().reshape().repeat", "torch.sin().reshape().repeat", "torch.sin().reshape().repeat", "torch.sin().reshape().repeat", "torch.sin().reshape().repeat", "torch.sin().reshape().repeat", "torch.sin().reshape().repeat", "torch.sin().reshape().repeat", "torch.sin().reshape().repeat", "torch.sin().reshape().repeat", "torch.cos().reshape().repeat", "torch.cos().reshape().repeat", "torch.cos().reshape().repeat", "torch.cos().reshape().repeat", "torch.cos().reshape().repeat", "torch.cos().reshape().repeat", "torch.cos().reshape().repeat", "torch.cos().reshape().repeat", "torch.cos().reshape().repeat", "torch.cos().reshape().repeat", "torch.cos().reshape().repeat", "torch.cos().reshape().repeat", "torch.cos().reshape().repeat", "torch.cos().reshape().repeat", "torch.cos().reshape().repeat", "torch.cos().reshape().repeat", "torch.sin().reshape().repeat", "torch.sin().reshape().repeat", "torch.sin().reshape().repeat", "torch.sin().reshape().repeat", "torch.sin().reshape().repeat", "torch.sin().reshape().repeat", "torch.sin().reshape().repeat", "torch.sin().reshape().repeat", "torch.sin().reshape().repeat", "torch.sin().reshape().repeat", "torch.sin().reshape().repeat", "torch.sin().reshape().repeat", "torch.sin().reshape().repeat", "torch.sin().reshape().repeat", "torch.sin().reshape().repeat", "torch.sin().reshape().repeat", "torch.cos().reshape().repeat", "torch.cos().reshape().repeat", "torch.cos().reshape().repeat", "torch.cos().reshape().repeat", "torch.cos().reshape().repeat", "torch.cos().reshape().repeat", "torch.cos().reshape().repeat", "torch.cos().reshape().repeat", "torch.cos().reshape().repeat", "torch.cos().reshape().repeat", "torch.cos().reshape().repeat", "torch.cos().reshape().repeat", "torch.cos().reshape().repeat", "torch.cos().reshape().repeat", "torch.cos().reshape().repeat", "torch.cos().reshape().repeat", "torch.sin().reshape().repeat", "torch.sin().reshape().repeat", "torch.sin().reshape().repeat", "torch.sin().reshape().repeat", "torch.sin().reshape().repeat", "torch.sin().reshape().repeat", "torch.sin().reshape().repeat", "torch.sin().reshape().repeat", "torch.sin().reshape().repeat", "torch.sin().reshape().repeat", "torch.sin().reshape().repeat", "torch.sin().reshape().repeat", "torch.sin().reshape().repeat", "torch.sin().reshape().repeat", "torch.sin().reshape().repeat", "torch.sin().reshape().repeat", "flow_field_x.view().type.view().type.view", "flow_field_y.view().type.view().type.view", "flow_field_z.view().type.view().type.view", "torch.linspace().repeat().repeat", "torch.linspace().repeat().repeat", "torch.linspace().repeat().repeat", "torch.linspace().repeat().repeat", "torch.linspace().repeat().repeat", "torch.linspace().repeat().repeat", "torch.linspace().repeat().repeat", "torch.linspace().repeat().repeat", "torch.linspace().repeat().repeat", "torch.linspace().repeat().repeat", "torch.linspace().repeat().repeat", "torch.linspace().repeat().repeat", "torch.linspace().repeat().repeat", "torch.linspace().repeat().repeat", "torch.linspace().repeat().repeat", "torch.linspace().repeat().repeat", "torch.linspace().repeat().permute().repeat", "torch.linspace().repeat().permute().repeat", "torch.linspace().repeat().permute().repeat", "torch.linspace().repeat().permute().repeat", "torch.linspace().repeat().permute().repeat", "torch.linspace().repeat().permute().repeat", "torch.linspace().repeat().permute().repeat", "torch.linspace().repeat().permute().repeat", "torch.linspace().repeat().permute().repeat", "torch.linspace().repeat().permute().repeat", "torch.linspace().repeat().permute().repeat", "torch.linspace().repeat().permute().repeat", "torch.linspace().repeat().permute().repeat", "torch.linspace().repeat().permute().repeat", "torch.linspace().repeat().permute().repeat", "torch.linspace().repeat().permute().repeat", "torch.linspace().repeat().repeat().permute", "torch.linspace().repeat().repeat().permute", "torch.linspace().repeat().repeat().permute", "torch.linspace().repeat().repeat().permute", "torch.linspace().repeat().repeat().permute", "torch.linspace().repeat().repeat().permute", "torch.linspace().repeat().repeat().permute", "torch.linspace().repeat().repeat().permute", "torch.linspace().repeat().repeat().permute", "torch.linspace().repeat().repeat().permute", "torch.linspace().repeat().repeat().permute", "torch.linspace().repeat().repeat().permute", "torch.linspace().repeat().repeat().permute", "torch.linspace().repeat().repeat().permute", "torch.linspace().repeat().repeat().permute", "torch.linspace().repeat().repeat().permute", "torch.cos().reshape", "torch.cos().reshape", "torch.cos().reshape", "torch.cos().reshape", "torch.cos().reshape", "torch.cos().reshape", "torch.cos().reshape", "torch.cos().reshape", "torch.cos().reshape", "torch.cos().reshape", "torch.cos().reshape", "torch.cos().reshape", "torch.cos().reshape", "torch.cos().reshape", "torch.cos().reshape", "torch.cos().reshape", "torch.sin().reshape", "torch.sin().reshape", "torch.sin().reshape", "torch.sin().reshape", "torch.sin().reshape", "torch.sin().reshape", "torch.sin().reshape", "torch.sin().reshape", "torch.sin().reshape", "torch.sin().reshape", "torch.sin().reshape", "torch.sin().reshape", "torch.sin().reshape", "torch.sin().reshape", "torch.sin().reshape", "torch.sin().reshape", "torch.cos().reshape", "torch.cos().reshape", "torch.cos().reshape", "torch.cos().reshape", "torch.cos().reshape", "torch.cos().reshape", "torch.cos().reshape", "torch.cos().reshape", "torch.cos().reshape", "torch.cos().reshape", "torch.cos().reshape", "torch.cos().reshape", "torch.cos().reshape", "torch.cos().reshape", "torch.cos().reshape", "torch.cos().reshape", "torch.sin().reshape", "torch.sin().reshape", "torch.sin().reshape", "torch.sin().reshape", "torch.sin().reshape", "torch.sin().reshape", "torch.sin().reshape", "torch.sin().reshape", "torch.sin().reshape", "torch.sin().reshape", "torch.sin().reshape", "torch.sin().reshape", "torch.sin().reshape", "torch.sin().reshape", "torch.sin().reshape", "torch.sin().reshape", "torch.cos().reshape", "torch.cos().reshape", "torch.cos().reshape", "torch.cos().reshape", "torch.cos().reshape", "torch.cos().reshape", "torch.cos().reshape", "torch.cos().reshape", "torch.cos().reshape", "torch.cos().reshape", "torch.cos().reshape", "torch.cos().reshape", "torch.cos().reshape", "torch.cos().reshape", "torch.cos().reshape", "torch.cos().reshape", "torch.sin().reshape", "torch.sin().reshape", "torch.sin().reshape", "torch.sin().reshape", "torch.sin().reshape", "torch.sin().reshape", "torch.sin().reshape", "torch.sin().reshape", "torch.sin().reshape", "torch.sin().reshape", "torch.sin().reshape", "torch.sin().reshape", "torch.sin().reshape", "torch.sin().reshape", "torch.sin().reshape", "torch.sin().reshape", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat().permute", "torch.linspace().repeat().permute", "torch.linspace().repeat().permute", "torch.linspace().repeat().permute", "torch.linspace().repeat().permute", "torch.linspace().repeat().permute", "torch.linspace().repeat().permute", "torch.linspace().repeat().permute", "torch.linspace().repeat().permute", "torch.linspace().repeat().permute", "torch.linspace().repeat().permute", "torch.linspace().repeat().permute", "torch.linspace().repeat().permute", "torch.linspace().repeat().permute", "torch.linspace().repeat().permute", "torch.linspace().repeat().permute", "torch.linspace().repeat().repeat", "torch.linspace().repeat().repeat", "torch.linspace().repeat().repeat", "torch.linspace().repeat().repeat", "torch.linspace().repeat().repeat", "torch.linspace().repeat().repeat", "torch.linspace().repeat().repeat", "torch.linspace().repeat().repeat", "torch.linspace().repeat().repeat", "torch.linspace().repeat().repeat", "torch.linspace().repeat().repeat", "torch.linspace().repeat().repeat", "torch.linspace().repeat().repeat", "torch.linspace().repeat().repeat", "torch.linspace().repeat().repeat", "torch.linspace().repeat().repeat", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace"], "methods", ["None"], ["", "def", "get_flow_fields", "(", "self", ",", "crnt_transform_mode", ",", "final_elev_transform_mode", ",", "init_elev_transform_mode", ",", "\n", "width", ",", "height", ",", "depth", ",", "encoded_3d_vol", ")", ":", "\n", "        ", "rotation_angle", "=", "self", ".", "args", ".", "azim_rotation_angle_increment", "*", "crnt_transform_mode", "\n", "init_elev_rotation_angle", "=", "self", ".", "args", ".", "elev_rotation_angle_increment", "*", "init_elev_transform_mode", "\n", "final_elev_rotation_angle", "=", "self", ".", "args", ".", "elev_rotation_angle_increment", "*", "final_elev_transform_mode", "\n", "\n", "rotation_radians", "=", "(", "np", ".", "pi", "/", "180.0", ")", "*", "rotation_angle", ".", "type", "(", "self", ".", "tensor_type", ")", "\n", "init_elev_rotation_radians", "=", "(", "np", ".", "pi", "/", "180.0", ")", "*", "init_elev_rotation_angle", ".", "type", "(", "self", ".", "tensor_type", ")", "\n", "final_elev_rotation_radians", "=", "(", "np", ".", "pi", "/", "180.0", ")", "*", "final_elev_rotation_angle", ".", "type", "(", "self", ".", "tensor_type", ")", "\n", "\n", "origxpos", "=", "torch", ".", "linspace", "(", "0", ",", "width", "-", "1", ",", "width", ")", ".", "repeat", "(", "height", ",", "1", ")", ".", "repeat", "(", "depth", ",", "1", ",", "1", ")", ".", "type", "(", "\n", "self", ".", "tensor_type", ")", "-", "2.0", "*", "width", "/", "4.0", "+", "0.5", "\n", "origypos", "=", "torch", ".", "linspace", "(", "0", ",", "height", "-", "1", ",", "height", ")", ".", "repeat", "(", "width", ",", "1", ")", ".", "permute", "(", "1", ",", "0", ")", ".", "repeat", "(", "depth", ",", "1", ",", "1", ")", ".", "type", "(", "\n", "self", ".", "tensor_type", ")", "-", "2.0", "*", "height", "/", "4.0", "+", "0.5", "\n", "origzpos", "=", "torch", ".", "linspace", "(", "0", ",", "depth", "-", "1", ",", "depth", ")", ".", "repeat", "(", "height", ",", "1", ")", ".", "repeat", "(", "width", ",", "1", ",", "1", ")", ".", "permute", "(", "2", ",", "1", ",", "0", ")", ".", "type", "(", "\n", "self", ".", "tensor_type", ")", "-", "2.0", "*", "depth", "/", "4.0", "+", "0.5", "\n", "\n", "num_batch", "=", "crnt_transform_mode", ".", "shape", "[", "0", "]", "\n", "origxpos", "=", "origxpos", ".", "repeat", "(", "num_batch", ",", "1", ",", "1", ",", "1", ")", "\n", "origypos", "=", "origypos", ".", "repeat", "(", "num_batch", ",", "1", ",", "1", ",", "1", ")", "\n", "origzpos", "=", "origzpos", ".", "repeat", "(", "num_batch", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "rotxpos", "=", "origxpos", "\n", "rotypos", "=", "origypos", "\n", "rotzpos", "=", "origzpos", "\n", "\n", "xpos", "=", "rotxpos", "\n", "ypos", "=", "rotypos", "\n", "zpos", "=", "rotzpos", "\n", "\n", "init_elev_cos_rad", "=", "torch", ".", "cos", "(", "\n", "-", "init_elev_rotation_radians", ")", ".", "reshape", "(", "\n", "num_batch", ",", "1", ")", ".", "repeat", "(", "1", ",", "depth", "*", "height", "*", "width", ")", ".", "reshape", "(", "num_batch", ",", "depth", ",", "height", ",", "width", ")", "\n", "\n", "init_elev_sin_rad", "=", "torch", ".", "sin", "(", "-", "init_elev_rotation_radians", ")", ".", "reshape", "(", "num_batch", ",", "1", ")", ".", "repeat", "(", "1", ",", "\n", "depth", "*", "height", "*", "width", ")", ".", "reshape", "(", "\n", "num_batch", ",", "depth", ",", "height", ",", "width", ")", "\n", "rotypos", "=", "torch", ".", "mul", "(", "init_elev_cos_rad", ",", "ypos", ")", "+", "torch", ".", "mul", "(", "-", "init_elev_sin_rad", ",", "zpos", ")", "\n", "rotzpos", "=", "torch", ".", "mul", "(", "init_elev_sin_rad", ",", "ypos", ")", "+", "torch", ".", "mul", "(", "init_elev_cos_rad", ",", "zpos", ")", "\n", "ypos", "=", "rotypos", "\n", "zpos", "=", "rotzpos", "\n", "\n", "cos_rad", "=", "torch", ".", "cos", "(", "\n", "rotation_radians", ")", ".", "reshape", "(", "\n", "num_batch", ",", "1", "\n", ")", ".", "repeat", "(", "\n", "1", ",", "depth", "*", "height", "*", "width", "\n", ")", ".", "reshape", "(", "\n", "num_batch", ",", "depth", ",", "height", ",", "width", "\n", ")", "\n", "\n", "sin_rad", "=", "torch", ".", "sin", "(", "\n", "rotation_radians", "\n", ")", ".", "reshape", "(", "num_batch", ",", "1", ")", ".", "repeat", "(", "1", ",", "depth", "*", "height", "*", "width", ")", ".", "reshape", "(", "\n", "num_batch", ",", "depth", ",", "height", ",", "width", "\n", ")", "\n", "\n", "rotxpos", "=", "torch", ".", "mul", "(", "cos_rad", ",", "xpos", ")", "+", "torch", ".", "mul", "(", "sin_rad", ",", "zpos", ")", "\n", "\n", "rotzpos", "=", "torch", ".", "mul", "(", "-", "sin_rad", ",", "xpos", ")", "+", "torch", ".", "mul", "(", "cos_rad", ",", "zpos", ")", "\n", "\n", "zpos", "=", "rotzpos", "\n", "\n", "elev_cos_rad", "=", "torch", ".", "cos", "(", "\n", "final_elev_rotation_radians", "\n", ")", ".", "reshape", "(", "\n", "num_batch", ",", "1", "\n", ")", ".", "repeat", "(", "\n", "1", ",", "depth", "*", "height", "*", "width", "\n", ")", ".", "reshape", "(", "\n", "num_batch", ",", "depth", ",", "height", ",", "width", "\n", ")", "\n", "\n", "elev_sin_rad", "=", "torch", ".", "sin", "(", "\n", "final_elev_rotation_radians", "\n", ")", ".", "reshape", "(", "\n", "num_batch", ",", "1", "\n", ")", ".", "repeat", "(", "\n", "1", ",", "depth", "*", "height", "*", "width", "\n", ")", ".", "reshape", "(", "\n", "num_batch", ",", "depth", ",", "height", ",", "width", "\n", ")", "\n", "\n", "rotypos", "=", "torch", ".", "mul", "(", "elev_cos_rad", ",", "ypos", ")", "+", "torch", ".", "mul", "(", "-", "elev_sin_rad", ",", "zpos", ")", "\n", "rotzpos", "=", "torch", ".", "mul", "(", "elev_sin_rad", ",", "ypos", ")", "+", "torch", ".", "mul", "(", "elev_cos_rad", ",", "zpos", ")", "\n", "\n", "flow_field_x", "=", "(", "rotxpos", "-", "origxpos", ")", ".", "reshape", "(", "\n", "num_batch", ",", "1", ",", "encoded_3d_vol", ".", "shape", "[", "2", "]", ",", "\n", "encoded_3d_vol", ".", "shape", "[", "3", "]", ",", "encoded_3d_vol", ".", "shape", "[", "4", "]", "\n", ")", "\n", "flow_field_y", "=", "(", "rotypos", "-", "origypos", ")", ".", "reshape", "(", "\n", "num_batch", ",", "1", ",", "encoded_3d_vol", ".", "shape", "[", "2", "]", ",", "\n", "encoded_3d_vol", ".", "shape", "[", "3", "]", ",", "encoded_3d_vol", ".", "shape", "[", "4", "]", "\n", ")", "\n", "flow_field_z", "=", "(", "rotzpos", "-", "origzpos", ")", ".", "reshape", "(", "\n", "num_batch", ",", "1", ",", "encoded_3d_vol", ".", "shape", "[", "2", "]", ",", "\n", "encoded_3d_vol", ".", "shape", "[", "3", "]", ",", "encoded_3d_vol", ".", "shape", "[", "4", "]", "\n", ")", "\n", "\n", "flow_field_x", "=", "flow_field_x", ".", "view", "(", "-", "1", ")", ".", "type", "(", "self", ".", "tensor_type", ")", "\n", "flow_field_y", "=", "flow_field_y", ".", "view", "(", "-", "1", ")", ".", "type", "(", "self", ".", "tensor_type", ")", "\n", "flow_field_z", "=", "flow_field_z", ".", "view", "(", "-", "1", ")", ".", "type", "(", "self", ".", "tensor_type", ")", "\n", "\n", "return", "flow_field_x", ",", "flow_field_y", ",", "flow_field_z", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tbn_model.TBN.forward": [[371, 399], ["range", "tbn_model.TBN.decode", "tbn_model.TBN.encode", "gen_src_seg2d_image.append", "tbn_model.TBN.decode_segmentation", "range", "gen_src_seg3d_image.append", "tbn_model.TBN.decode_input_segmentation"], "methods", ["home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tbn_model.TBN.decode", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tbn_model.TBN.encode", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tbn_model.TBN.decode_segmentation", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tbn_model.TBN.decode_input_segmentation"], ["", "def", "forward", "(", "self", ",", "num_inputs_to_use", ",", "data", ")", ":", "\n", "        ", "final_tensor", "=", "None", "\n", "final_seg_tensor", "=", "None", "\n", "gen_src_seg2d_image", "=", "[", "]", "\n", "for", "input_idx", "in", "range", "(", "num_inputs_to_use", ")", ":", "\n", "            ", "encoded", ",", "gen_src_seg2d", ",", "seg_encoded", "=", "self", ".", "encode", "(", "input_idx", ",", "data", ")", "\n", "gen_src_seg2d_image", ".", "append", "(", "gen_src_seg2d", ")", "\n", "final_tensor", "=", "encoded", "if", "final_tensor", "is", "None", "else", "final_tensor", "+", "encoded", "\n", "if", "self", ".", "args", ".", "use_seg3d_proxy", ":", "\n", "                ", "final_seg_tensor", "=", "seg_encoded", "if", "final_seg_tensor", "is", "None", "else", "final_seg_tensor", "+", "seg_encoded", "\n", "", "", "final_tensor", "=", "final_tensor", "/", "num_inputs_to_use", "\n", "\n", "if", "self", ".", "args", ".", "use_seg3d_proxy", ":", "\n", "            ", "final_seg_tensor", "=", "final_seg_tensor", "/", "num_inputs_to_use", "\n", "\n", "", "gen_tgt_rgb_image", "=", "self", ".", "decode", "(", "final_tensor", ")", "\n", "\n", "if", "self", ".", "args", ".", "use_seg3d_proxy", ":", "\n", "            ", "gen_tgt_seg3d_image", "=", "self", ".", "decode_segmentation", "(", "final_seg_tensor", ")", "\n", "gen_src_seg3d_image", "=", "[", "]", "\n", "for", "input_idx", "in", "range", "(", "num_inputs_to_use", ")", ":", "\n", "                ", "gen_src_seg3d_image", ".", "append", "(", "self", ".", "decode_input_segmentation", "(", "input_idx", ",", "data", ",", "final_seg_tensor", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "gen_src_seg3d_image", "=", "None", "\n", "gen_tgt_seg3d_image", "=", "None", "\n", "final_seg_tensor", "=", "None", "\n", "\n", "", "return", "gen_tgt_rgb_image", ",", "gen_src_seg3d_image", ",", "gen_tgt_seg3d_image", ",", "gen_src_seg2d_image", ",", "final_seg_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tbn_model.TBN.encode": [[400, 473], ["tbn_model.TBN.conv1_2d_encode", "tbn_model.TBN.conv2_2d_encode", "tbn_model.TBN.conv3_2d_encode", "tbn_model.TBN.conv4_2d_encode", "tbn_model.TBN.upconv4_2d_encode", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "tbn_model.TBN.iconv4_2d_encode", "tbn_model.TBN.upconv3_2d_encode", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "tbn_model.TBN.iconv3_2d_encode", "tbn_model.TBN.upconv2_2d_encode", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "tbn_model.TBN.iconv2_2d_encode", "tbn_model.TBN.view", "tbn_model.TBN.conv1_3d_encode", "tbn_model.TBN.conv2_3d_encode", "tbn_model.TBN.get_flow_fields", "volume_sampler.apply_volume_transform", "tbn_model.TBN.in_conv", "tbn_model.TBN.src_seg2d", "tbn_model.TBN.seg_inv_transform", "int", "tbn_model.TBN.seg_conv_3d", "seg_out.squeeze.squeeze.squeeze", "seg_out.squeeze.squeeze.unsqueeze", "volume_sampler.apply_volume_transform"], "methods", ["home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tbn_model.TBN.get_flow_fields", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.volume_sampler.apply_volume_transform", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.volume_sampler.apply_volume_transform"], ["", "def", "encode", "(", "self", ",", "input_idx", ",", "data", ")", ":", "\n", "        ", "src_rgb", "=", "data", "[", "'src_rgb_image'", "]", "[", "input_idx", "]", "\n", "src_seg", "=", "data", "[", "'src_seg_image'", "]", "[", "input_idx", "]", "\n", "\n", "src_azim_transform_mode", "=", "data", "[", "'src_azim_transform_mode'", "]", "[", "input_idx", "]", "\n", "src_elev_transform_mode", "=", "data", "[", "'src_elev_transform_mode'", "]", "[", "input_idx", "]", "\n", "\n", "tgt_azim_transform_mode", "=", "data", "[", "'tgt_azim_transform_mode'", "]", "[", "0", "]", "\n", "tgt_elev_transform_mode", "=", "data", "[", "'tgt_elev_transform_mode'", "]", "[", "0", "]", "\n", "\n", "crnt_transform_mode", "=", "src_azim_transform_mode", "-", "tgt_azim_transform_mode", "\n", "\n", "x", "=", "src_rgb", "\n", "if", "0", "<", "self", ".", "args", ".", "num_input_convs", ":", "\n", "            ", "x", "=", "self", ".", "in_conv", "(", "x", ")", "\n", "\n", "", "x1", "=", "self", ".", "conv1_2d_encode", "(", "x", ")", "\n", "x2", "=", "self", ".", "conv2_2d_encode", "(", "x1", ")", "\n", "x3", "=", "self", ".", "conv3_2d_encode", "(", "x2", ")", "\n", "x4", "=", "self", ".", "conv4_2d_encode", "(", "x3", ")", "\n", "\n", "skip1", "=", "x1", "\n", "skip2", "=", "x2", "\n", "skip3", "=", "x3", "\n", "\n", "x_out", "=", "self", ".", "upconv4_2d_encode", "(", "x4", ")", "\n", "x_out", "=", "torch", ".", "cat", "(", "(", "x_out", ",", "skip3", ")", ",", "1", ")", "\n", "x_out", "=", "self", ".", "iconv4_2d_encode", "(", "x_out", ")", "\n", "\n", "x_out", "=", "self", ".", "upconv3_2d_encode", "(", "x_out", ")", "\n", "x_out", "=", "torch", ".", "cat", "(", "(", "x_out", ",", "skip2", ")", ",", "1", ")", "\n", "x_out", "=", "self", ".", "iconv3_2d_encode", "(", "x_out", ")", "\n", "\n", "x_out", "=", "self", ".", "upconv2_2d_encode", "(", "x_out", ")", "\n", "x_out", "=", "torch", ".", "cat", "(", "(", "x_out", ",", "skip1", ")", ",", "1", ")", "\n", "x_out", "=", "self", ".", "iconv2_2d_encode", "(", "x_out", ")", "\n", "\n", "if", "self", ".", "src_seg2d", "is", "not", "None", ":", "\n", "            ", "src_seg2d_output", "=", "self", ".", "src_seg2d", "(", "x_out", ")", "\n", "upsample_src_seg2d_output", "=", "self", ".", "seg_inv_transform", "(", "src_seg2d_output", ")", "\n", "", "else", ":", "\n", "            ", "upsample_src_seg2d_output", "=", "None", "\n", "\n", "", "depth", "=", "self", ".", "vol_dim", "\n", "height", "=", "x_out", ".", "shape", "[", "2", "]", "\n", "width", "=", "x_out", ".", "shape", "[", "3", "]", "\n", "\n", "x_out", "=", "x_out", ".", "view", "(", "x_out", ".", "shape", "[", "0", "]", ",", "\n", "int", "(", "x_out", ".", "shape", "[", "1", "]", "/", "self", ".", "vol_dim", ")", ",", "self", ".", "vol_dim", ",", "\n", "x_out", ".", "shape", "[", "2", "]", ",", "x_out", ".", "shape", "[", "3", "]", ")", "\n", "\n", "x_out", "=", "self", ".", "conv1_3d_encode", "(", "x_out", ")", "\n", "encoded_3d_vol", "=", "self", ".", "conv2_3d_encode", "(", "x_out", ")", "\n", "\n", "if", "self", ".", "args", ".", "use_seg3d_proxy", ":", "\n", "            ", "seg_out", "=", "self", ".", "seg_conv_3d", "(", "encoded_3d_vol", ")", "\n", "seg_out", "=", "seg_out", ".", "squeeze", "(", "1", ")", "\n", "seg_out", "=", "src_seg2d_output", "*", "seg_out", "\n", "seg_encoded_3d_vol", "=", "seg_out", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "", "flow_field_x", ",", "flow_field_y", ",", "flow_field_z", "=", "self", ".", "get_flow_fields", "(", "crnt_transform_mode", ",", "\n", "src_elev_transform_mode", ",", "\n", "tgt_elev_transform_mode", ",", "\n", "width", ",", "height", ",", "depth", ",", "encoded_3d_vol", ")", "\n", "\n", "transformed_output", "=", "apply_volume_transform", "(", "encoded_3d_vol", ",", "flow_field_x", ",", "flow_field_y", ",", "flow_field_z", ",", "\n", "tensor_type", "=", "self", ".", "tensor_type", ")", "\n", "seg_transformed_output", "=", "None", "\n", "if", "self", ".", "args", ".", "use_seg3d_proxy", ":", "\n", "            ", "seg_transformed_output", "=", "apply_volume_transform", "(", "seg_encoded_3d_vol", ",", "flow_field_x", ",", "flow_field_y", ",", "flow_field_z", ",", "\n", "tensor_type", "=", "self", ".", "tensor_type", ")", "\n", "\n", "", "return", "transformed_output", ",", "upsample_src_seg2d_output", ",", "seg_transformed_output", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tbn_model.TBN.decode_segmentation": [[474, 481], ["final_seg_transformed_output.squeeze", "tbn_model.TBN.seg_conv_3d_combine", "tgt_seg_list.append"], "methods", ["None"], ["", "def", "decode_segmentation", "(", "self", ",", "final_seg_transformed_output", ")", ":", "\n", "        ", "x_out", "=", "final_seg_transformed_output", ".", "squeeze", "(", "1", ")", "\n", "x_out", "=", "self", ".", "seg_conv_3d_combine", "(", "x_out", ")", "\n", "\n", "tgt_seg_list", "=", "[", "]", "\n", "tgt_seg_list", ".", "append", "(", "x_out", ")", "\n", "return", "tgt_seg_list", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tbn_model.TBN.decode_input_segmentation": [[482, 505], ["tbn_model.TBN.get_flow_fields", "volume_sampler.apply_volume_transform", "tbn_model.TBN.seg_conv_3d_combine", "volume_sampler.apply_volume_transform.squeeze"], "methods", ["home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tbn_model.TBN.get_flow_fields", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.volume_sampler.apply_volume_transform"], ["", "def", "decode_input_segmentation", "(", "self", ",", "input_idx", ",", "data", ",", "final_seg_transformed_output", ")", ":", "\n", "        ", "src_azim_transform_mode", "=", "data", "[", "'src_azim_transform_mode'", "]", "[", "input_idx", "]", "\n", "src_elev_transform_mode", "=", "data", "[", "'src_elev_transform_mode'", "]", "[", "input_idx", "]", "\n", "\n", "tgt_azim_transform_mode", "=", "data", "[", "'tgt_azim_transform_mode'", "]", "[", "0", "]", "\n", "tgt_elev_transform_mode", "=", "data", "[", "'tgt_elev_transform_mode'", "]", "[", "0", "]", "\n", "\n", "crnt_transform_mode", "=", "src_azim_transform_mode", "-", "tgt_azim_transform_mode", "\n", "\n", "depth", "=", "self", ".", "vol_dim", "\n", "height", "=", "final_seg_transformed_output", ".", "shape", "[", "2", "]", "\n", "width", "=", "final_seg_transformed_output", ".", "shape", "[", "3", "]", "\n", "flow_field_x", ",", "flow_field_y", ",", "flow_field_z", "=", "self", ".", "get_flow_fields", "(", "-", "crnt_transform_mode", ",", "\n", "tgt_elev_transform_mode", ",", "\n", "src_elev_transform_mode", ",", "\n", "width", ",", "height", ",", "depth", ",", "\n", "final_seg_transformed_output", ")", "\n", "\n", "seg_transformed_output", "=", "apply_volume_transform", "(", "final_seg_transformed_output", ",", "flow_field_x", ",", "\n", "flow_field_y", ",", "flow_field_z", ",", "\n", "tensor_type", "=", "self", ".", "tensor_type", ")", "\n", "\n", "return", "self", ".", "seg_conv_3d_combine", "(", "seg_transformed_output", ".", "squeeze", "(", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tbn_model.TBN.decode": [[506, 542], ["tbn_model.TBN.conv1_3d_decode", "tbn_model.TBN.conv2_3d_decode", "tbn_model.TBN.contiguous().view", "tbn_model.TBN.conv2_2d_decode", "tbn_model.TBN.conv3_2d_decode", "tbn_model.TBN.conv4_2d_decode", "tbn_model.TBN.upconv4_2d_decode", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "tbn_model.TBN.iconv4_2d_decode", "tbn_model.TBN.upconv3_2d_decode", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "tbn_model.TBN.iconv3_2d_decode", "tbn_model.TBN.upconv2_2d_decode", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "tbn_model.TBN.iconv2_2d_decode", "tbn_model.TBN.upconv1_2d_decode", "tbn_model.TBN.iconv1_2d_decode", "tbn_model.TBN.output_2d_decode", "tbn_model.TBN.deconv", "tbn_model.TBN.contiguous"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "final_transformed_output", ")", ":", "\n", "        ", "x_out", "=", "self", ".", "conv1_3d_decode", "(", "final_transformed_output", ")", "\n", "x_out", "=", "self", ".", "conv2_3d_decode", "(", "x_out", ")", "\n", "\n", "input_2d", "=", "x_out", ".", "contiguous", "(", ")", ".", "view", "(", "x_out", ".", "shape", "[", "0", "]", ",", "\n", "x_out", ".", "shape", "[", "1", "]", "*", "self", ".", "vol_dim", ",", "\n", "x_out", ".", "shape", "[", "3", "]", ",", "x_out", ".", "shape", "[", "4", "]", ")", "\n", "\n", "x2", "=", "self", ".", "conv2_2d_decode", "(", "input_2d", ")", "\n", "x3", "=", "self", ".", "conv3_2d_decode", "(", "x2", ")", "\n", "x4", "=", "self", ".", "conv4_2d_decode", "(", "x3", ")", "\n", "\n", "skip1", "=", "input_2d", "\n", "skip2", "=", "x2", "\n", "skip3", "=", "x3", "\n", "\n", "x_out", "=", "self", ".", "upconv4_2d_decode", "(", "x4", ")", "\n", "x_out", "=", "torch", ".", "cat", "(", "(", "x_out", ",", "skip3", ")", ",", "1", ")", "\n", "x_out", "=", "self", ".", "iconv4_2d_decode", "(", "x_out", ")", "\n", "\n", "x_out", "=", "self", ".", "upconv3_2d_decode", "(", "x_out", ")", "\n", "x_out", "=", "torch", ".", "cat", "(", "(", "x_out", ",", "skip2", ")", ",", "1", ")", "\n", "x_out", "=", "self", ".", "iconv3_2d_decode", "(", "x_out", ")", "\n", "\n", "x_out", "=", "self", ".", "upconv2_2d_decode", "(", "x_out", ")", "\n", "x_out", "=", "torch", ".", "cat", "(", "(", "x_out", ",", "skip1", ")", ",", "1", ")", "\n", "x_out", "=", "self", ".", "iconv2_2d_decode", "(", "x_out", ")", "\n", "\n", "x_out", "=", "self", ".", "upconv1_2d_decode", "(", "x_out", ")", "\n", "x_out", "=", "self", ".", "iconv1_2d_decode", "(", "x_out", ")", "\n", "\n", "if", "0", "<", "self", ".", "args", ".", "num_output_deconvs", ":", "\n", "            ", "x_out", "=", "self", ".", "deconv", "(", "x_out", ")", "\n", "\n", "", "tgt_img", "=", "self", ".", "output_2d_decode", "(", "x_out", ")", "\n", "return", "tgt_img", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tbn_model.ResBlock": [[78, 92], ["range", "layers.append", "torch.Sequential", "tbn_model.ResConv", "layers.append", "tbn_model.ResConv", "tbn_model.ResConv"], "function", ["None"], ["", "", "def", "ResBlock", "(", "num_in_layers", ",", "num_out_layers", ",", "num_blocks", ",", "stride", ",", "kernel_size", "=", "3", ",", "is_3d_conv", "=", "False", ")", ":", "\n", "    ", "layers", "=", "[", "\n", "ResConv", "(", "num_in_layers", ",", "num_out_layers", ",", "stride", ",", "kernel_size", "=", "kernel_size", ",", "is_3d_conv", "=", "is_3d_conv", ")", "\n", "]", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "num_blocks", "-", "1", ")", ":", "\n", "        ", "layers", ".", "append", "(", "\n", "ResConv", "(", "4", "*", "num_out_layers", ",", "num_out_layers", ",", "1", ",", "kernel_size", "=", "kernel_size", ",", "is_3d_conv", "=", "is_3d_conv", ")", "\n", ")", "\n", "\n", "", "layers", ".", "append", "(", "\n", "ResConv", "(", "4", "*", "num_out_layers", ",", "num_out_layers", ",", "1", ",", "kernel_size", "=", "kernel_size", ",", "is_3d_conv", "=", "is_3d_conv", ")", "\n", ")", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.drc_img_data_loader.ImgDataset.__init__": [[26, 78], ["list", "torch.Upsample", "torch.Upsample", "int", "int", "open", "os.join", "s.strip", "s.split", "fp.readlines", "s.split", "s.split"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "ids", ",", "n", ",", "name", "=", "'default'", ",", "\n", "max_examples", "=", "None", ",", "is_train", "=", "True", ",", "\n", "dataset_name", "=", "'drc_chair'", ",", "clamp_elevation", "=", "False", ",", "\n", "input_width", "=", "80", ",", "input_height", "=", "80", ",", "concat_mask", "=", "False", ",", "\n", "img_path", "=", "'./datasets/shapenet'", ",", "random_pairs", "=", "True", ",", "\n", "use_file_list", "=", "False", ",", "args", "=", "None", ")", ":", "\n", "        ", "self", ".", "_ids", "=", "list", "(", "ids", ")", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "dataset_name", "=", "dataset_name", "\n", "self", ".", "n", "=", "n", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "use_file_list", "=", "use_file_list", "\n", "\n", "if", "self", ".", "args", ".", "cull_identity_transform", ":", "\n", "            ", "self", ".", "bound", "=", "int", "(", "360", "/", "(", "ang_skip", "*", "ang_interval", ")", "+", "1", "-", "2", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bound", "=", "int", "(", "360", "/", "ang_interval", "+", "1", ")", "\n", "\n", "", "if", "self", ".", "use_file_list", ":", "\n", "            ", "with", "open", "(", "osp", ".", "join", "(", "'testing_tuple_lists/id_'", "+", "dataset_name", "+", "'_random_elevation.txt'", ")", ",", "'r'", ")", "as", "fp", ":", "\n", "                ", "self", ".", "ids_files", "=", "[", "s", ".", "strip", "(", ")", "for", "s", "in", "fp", ".", "readlines", "(", ")", "if", "s", "]", "\n", "self", ".", "ids_files_tgt", "=", "[", "s", ".", "split", "(", "' '", ")", "[", "0", "]", "for", "s", "in", "self", ".", "ids_files", "if", "s", "]", "\n", "self", ".", "ids_files_src", "=", "[", "s", ".", "split", "(", "' '", ")", "[", "1", "]", "for", "s", "in", "self", ".", "ids_files", "if", "s", "]", "\n", "self", ".", "ids_files_all", "=", "[", "s", ".", "split", "(", "' '", ")", "for", "s", "in", "self", ".", "ids_files", "if", "s", "]", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "ids_files", "=", "None", "\n", "self", ".", "ids_files_tgt", "=", "None", "\n", "self", ".", "ids_files_src", "=", "None", "\n", "self", ".", "ids_files_all", "=", "None", "\n", "\n", "", "self", ".", "concat_mask", "=", "concat_mask", "\n", "self", ".", "random_pairs", "=", "random_pairs", "\n", "self", ".", "clamp_elevation", "=", "clamp_elevation", "\n", "self", ".", "img_path", "=", "img_path", "\n", "\n", "self", ".", "rotate_increment", "=", "360", "\n", "self", ".", "num_elevations", "=", "3", "\n", "self", ".", "elev_increment", "=", "1.0", "\n", "\n", "self", ".", "input_width", "=", "input_width", "\n", "self", ".", "input_height", "=", "input_height", "\n", "\n", "self", ".", "transform", "=", "nn", ".", "Upsample", "(", "size", "=", "[", "self", ".", "input_height", ",", "self", ".", "input_width", "]", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "if", "self", ".", "random_pairs", ":", "\n", "            ", "self", ".", "num_pair_samples", "=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "num_pair_samples", "=", "2", "\n", "\n", "", "if", "max_examples", "is", "not", "None", ":", "\n", "            ", "self", ".", "_ids", "=", "self", ".", "_ids", "[", ":", "max_examples", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.drc_img_data_loader.ImgDataset.__getitem__": [[79, 108], ["drc_img_data_loader.ImgDataset.get_data_pair", "numpy.arange", "numpy.random.shuffle", "int", "int", "numpy.arange", "int", "int", "str"], "methods", ["home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.shapenet_img_data_loader.ImgDataset.get_data_pair"], ["", "", "def", "__getitem__", "(", "self", ",", "in_id", ")", ":", "\n", "        ", "if", "self", ".", "random_pairs", ":", "\n", "            ", "imgs_to_gen", "=", "num_imgs", "\n", "if", "self", ".", "args", ".", "cull_identity_transform", ":", "\n", "                ", "lower_bound", "=", "1", "\n", "", "else", ":", "\n", "                ", "lower_bound", "=", "0", "\n", "", "idx", "=", "np", ".", "arange", "(", "lower_bound", ",", "imgs_to_gen", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "idx", ")", "\n", "idx", "=", "idx", "[", ":", "self", ".", "n", "]", "\n", "\n", "prefix_in_id", "=", "int", "(", "in_id", "/", "num_imgs", ")", "\n", "suffix_in_id", "=", "int", "(", "in_id", "%", "num_imgs", ")", "\n", "", "else", ":", "\n", "            ", "imgs_to_gen", "=", "num_imgs", "\n", "idx", "=", "np", ".", "arange", "(", "0", ",", "imgs_to_gen", ")", "\n", "idx", "=", "idx", "[", ":", "self", ".", "n", "]", "\n", "\n", "prefix_in_id", "=", "int", "(", "in_id", "/", "self", ".", "num_pair_samples", ")", "\n", "suffix_in_id", "=", "int", "(", "in_id", "%", "self", ".", "num_pair_samples", ")", "\n", "\n", "", "suffix_in_id_str", "=", "'/render_'", "+", "str", "(", "suffix_in_id", ")", "\n", "id", "=", "self", ".", "_ids", "[", "prefix_in_id", "]", "\n", "\n", "int_tgt", "=", "suffix_in_id", "\n", "\n", "ang", "=", "(", "idx", "+", "int_tgt", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "return", "self", ".", "get_data_pair", "(", "id", ",", "ang", ",", "int_tgt", ",", "suffix_in_id_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.drc_img_data_loader.ImgDataset.get_data_pair": [[109, 172], ["drc_img_data_loader.ImgDataset.readImageToArray", "img_pos_params[].split", "float", "float", "numpy.concatenate", "open", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "drc_img_data_loader.ImgDataset.transform().squeeze", "drc_img_data_loader.ImgDataset.transform().squeeze", "drc_img_data_loader.ImgDataset.readImageToArray", "numpy.array", "img_pos_params[].split", "float", "float", "data[].append", "data[].append", "data[].append", "data[].append", "os.join", "s.strip", "numpy.concatenate.transpose", "str", "numpy.concatenate", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "drc_img_data_loader.ImgDataset.transform().squeeze", "drc_img_data_loader.ImgDataset.transform().squeeze", "numpy.expand_dims", "fp.readlines", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "drc_img_data_loader.ImgDataset.transform", "drc_img_data_loader.ImgDataset.transform", "numpy.concatenate.transpose", "tgt_image.unsqueeze", "tgt_mask.unsqueeze", "numpy.expand_dims", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "drc_img_data_loader.ImgDataset.transform", "drc_img_data_loader.ImgDataset.transform", "src_image.unsqueeze", "src_mask.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.shapenet_img_data_loader.ImgDataset.readImageToArray", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.shapenet_img_data_loader.ImgDataset.readImageToArray"], ["", "def", "get_data_pair", "(", "self", ",", "id", ",", "ang", ",", "int_tgt", ",", "suffix_in_id_str", ")", ":", "\n", "        ", "image", ",", "mask", "=", "self", ".", "readImageToArray", "(", "id", "+", "suffix_in_id_str", ")", "\n", "image", "[", "0.0", "==", "mask", "]", "=", "[", "1.0", ",", "1.0", ",", "1.0", "]", "\n", "if", "self", ".", "concat_mask", ":", "\n", "            ", "image", "=", "np", ".", "concatenate", "(", "(", "image", ",", "np", ".", "expand_dims", "(", "mask", ",", "-", "1", ")", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "img_path", ",", "self", ".", "dataset_name", "+", "'/'", "+", "id", "+", "'/'", "+", "'view.txt'", ")", ",", "'r'", ")", "as", "fp", ":", "\n", "            ", "img_pos_params", "=", "[", "s", ".", "strip", "(", ")", "for", "s", "in", "fp", ".", "readlines", "(", ")", "if", "s", "]", "\n", "\n", "", "tgt_params", "=", "img_pos_params", "[", "int_tgt", "]", ".", "split", "(", "' '", ")", "\n", "azimuth", "=", "float", "(", "tgt_params", "[", "0", "]", ")", "\n", "elevation", "=", "float", "(", "tgt_params", "[", "1", "]", ")", "\n", "\n", "tgt_azim_transform_mode", "=", "azimuth", "\n", "tgt_elev_transform_mode", "=", "elevation", "\n", "\n", "data", "=", "{", "}", "\n", "\n", "tgt_image", "=", "torch", ".", "Tensor", "(", "image", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", "[", ":", ",", "self", ".", "args", ".", "crop_y_dim", ":", "(", "self", ".", "args", ".", "final_height", "-", "self", ".", "args", ".", "crop_y_dim", ")", ",", "\n", "self", ".", "args", ".", "crop_x_dim", ":", "(", "self", ".", "args", ".", "final_width", "-", "self", ".", "args", ".", "crop_x_dim", ")", "]", "\n", "tgt_mask", "=", "torch", ".", "Tensor", "(", "mask", ")", ".", "unsqueeze", "(", "0", ")", "[", ":", ",", "self", ".", "args", ".", "crop_y_dim", ":", "(", "self", ".", "args", ".", "final_height", "-", "self", ".", "args", ".", "crop_y_dim", ")", ",", "\n", "self", ".", "args", ".", "crop_x_dim", ":", "(", "self", ".", "args", ".", "final_width", "-", "self", ".", "args", ".", "crop_x_dim", ")", "]", "\n", "data", "[", "'tgt_rgb_image'", "]", "=", "[", "self", ".", "transform", "(", "tgt_image", ".", "unsqueeze", "(", "0", ")", ")", ".", "squeeze", "(", "0", ")", "]", "\n", "data", "[", "'tgt_seg_image'", "]", "=", "[", "self", ".", "transform", "(", "tgt_mask", ".", "unsqueeze", "(", "0", ")", ")", ".", "squeeze", "(", "0", ")", "]", "\n", "if", "self", ".", "args", ".", "upsample_output", ":", "\n", "            ", "data", "[", "'orig_tgt_rgb_image'", "]", "=", "[", "tgt_image", "]", "\n", "data", "[", "'orig_tgt_seg_image'", "]", "=", "[", "tgt_mask", "]", "\n", "", "data", "[", "'tgt_azim_transform_mode'", "]", "=", "[", "tgt_azim_transform_mode", "]", "\n", "data", "[", "'tgt_elev_transform_mode'", "]", "=", "[", "tgt_elev_transform_mode", "]", "\n", "\n", "data", "[", "'src_rgb_image'", "]", "=", "[", "]", "\n", "data", "[", "'src_seg_image'", "]", "=", "[", "]", "\n", "data", "[", "'src_azim_transform_mode'", "]", "=", "[", "]", "\n", "data", "[", "'src_elev_transform_mode'", "]", "=", "[", "]", "\n", "\n", "for", "a", "in", "ang", ":", "\n", "            ", "int_src", "=", "a", "%", "num_imgs", "\n", "\n", "id_src", "=", "(", "id", "+", "suffix_in_id_str", ")", "[", ":", "-", "1", "]", "+", "str", "(", "int_src", ")", "\n", "image_tmp", ",", "mask_tmp", "=", "self", ".", "readImageToArray", "(", "id_src", ")", "\n", "image_tmp", "[", "0.0", "==", "mask_tmp", "]", "=", "np", ".", "array", "(", "[", "1.0", ",", "1.0", ",", "1.0", "]", ")", "\n", "\n", "if", "self", ".", "concat_mask", ":", "\n", "                ", "image_tmp", "=", "np", ".", "concatenate", "(", "(", "image_tmp", ",", "np", ".", "expand_dims", "(", "mask_tmp", ",", "-", "1", ")", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "src_params", "=", "img_pos_params", "[", "int_src", "]", ".", "split", "(", "' '", ")", "\n", "azimuth", "=", "float", "(", "src_params", "[", "0", "]", ")", "\n", "elevation", "=", "float", "(", "src_params", "[", "1", "]", ")", "\n", "\n", "src_azim_transform_mode", "=", "azimuth", "\n", "src_elev_transform_mode", "=", "elevation", "\n", "\n", "src_image", "=", "torch", ".", "Tensor", "(", "image_tmp", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", "[", ":", ",", "self", ".", "args", ".", "crop_y_dim", ":", "(", "self", ".", "args", ".", "final_height", "-", "self", ".", "args", ".", "crop_y_dim", ")", ",", "\n", "self", ".", "args", ".", "crop_x_dim", ":", "(", "self", ".", "args", ".", "final_width", "-", "self", ".", "args", ".", "crop_x_dim", ")", "]", "\n", "src_mask", "=", "torch", ".", "Tensor", "(", "mask_tmp", ")", ".", "unsqueeze", "(", "0", ")", "[", ":", ",", "self", ".", "args", ".", "crop_y_dim", ":", "(", "self", ".", "args", ".", "final_height", "-", "self", ".", "args", ".", "crop_y_dim", ")", ",", "\n", "self", ".", "args", ".", "crop_x_dim", ":", "(", "self", ".", "args", ".", "final_width", "-", "self", ".", "args", ".", "crop_x_dim", ")", "]", "\n", "data", "[", "'src_rgb_image'", "]", ".", "append", "(", "self", ".", "transform", "(", "src_image", ".", "unsqueeze", "(", "0", ")", ")", ".", "squeeze", "(", "0", ")", ")", "\n", "data", "[", "'src_seg_image'", "]", ".", "append", "(", "self", ".", "transform", "(", "src_mask", ".", "unsqueeze", "(", "0", ")", ")", ".", "squeeze", "(", "0", ")", ")", "\n", "\n", "data", "[", "'src_azim_transform_mode'", "]", ".", "append", "(", "src_azim_transform_mode", ")", "\n", "data", "[", "'src_elev_transform_mode'", "]", ".", "append", "(", "src_elev_transform_mode", ")", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.drc_img_data_loader.ImgDataset.ids": [[173, 176], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ids", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.drc_img_data_loader.ImgDataset.__len__": [[177, 182], ["len", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "random_pairs", ":", "\n", "            ", "return", "self", ".", "num_pair_samples", "*", "len", "(", "self", ".", "ids", ")", "\n", "\n", "", "return", "num_imgs", "*", "self", ".", "num_pair_samples", "*", "len", "(", "self", ".", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.drc_img_data_loader.ImgDataset.__repr__": [[183, 187], ["len"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'ImgDataset (%s, %d examples)'", "%", "(", "\n", "self", ".", "name", ",", "\n", "len", "(", "self", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.drc_img_data_loader.ImgDataset.readImageToArray": [[189, 206], ["numpy.expand_dims", "numpy.zeros", "mask.squeeze.squeeze.squeeze", "numpy.array", "PIL.Image.open", "numpy.array"], "methods", ["None"], ["", "def", "readImageToArray", "(", "self", ",", "in_id", ")", ":", "\n", "        ", "img", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "self", ".", "img_path", "+", "'/'", "+", "self", ".", "dataset_name", "+", "'/'", "+", "in_id", "+", "'.png'", ")", ")", "/", "255.0", "\n", "\n", "rgb", "=", "img", "[", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "alpha", "=", "img", "[", ":", ",", ":", ",", "3", "]", "\n", "alpha", "=", "np", ".", "expand_dims", "(", "alpha", ",", "2", ")", "\n", "\n", "# apply alpha channel", "\n", "rgb", "=", "alpha", "*", "rgb", "+", "(", "1.0", "-", "alpha", ")", "*", "np", ".", "array", "(", "[", "1.0", ",", "1.0", ",", "1.0", "]", ")", "\n", "\n", "# make alpha channel into binary mask", "\n", "mask", "=", "np", ".", "zeros", "(", "alpha", ".", "shape", ")", "\n", "mask", "[", "0.0", "==", "alpha", "]", "=", "0.0", "\n", "mask", "[", "0.0", "!=", "alpha", "]", "=", "1.0", "\n", "mask", "=", "mask", ".", "squeeze", "(", ")", "\n", "\n", "return", "rgb", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.drc_img_data_loader.create_default_splits": [[207, 223], ["drc_img_data_loader.all_ids", "print", "drc_img_data_loader.ImgDataset", "drc_img_data_loader.ImgDataset", "drc_img_data_loader.ImgDataset", "str"], "function", ["home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.shapenet_img_data_loader.all_ids"], ["", "", "def", "create_default_splits", "(", "n", ",", "is_train", "=", "True", ",", "dataset_name", "=", "'drc_chair'", ",", "\n", "input_width", "=", "80", ",", "input_height", "=", "80", ",", "concat_mask", "=", "True", ",", "\n", "shuffle_train", "=", "True", ",", "shuffle_test", "=", "True", ",", "img_path", "=", "'./datasets/shapenet'", ",", "args", "=", "None", ")", ":", "\n", "    ", "ids_train", ",", "ids_test", ",", "sorted_ids_val", "=", "all_ids", "(", "dataset_name", "=", "dataset_name", ",", "shuffle_train", "=", "shuffle_train", ",", "shuffle_test", "=", "shuffle_test", ")", "\n", "\n", "print", "(", "'concat_mask: '", "+", "str", "(", "concat_mask", ")", ")", "\n", "dataset_train", "=", "ImgDataset", "(", "ids_train", ",", "n", ",", "name", "=", "'train'", ",", "is_train", "=", "is_train", ",", "dataset_name", "=", "dataset_name", ",", "\n", "input_width", "=", "input_width", ",", "input_height", "=", "input_height", ",", "concat_mask", "=", "concat_mask", ",", "\n", "img_path", "=", "img_path", ",", "args", "=", "args", ")", "\n", "dataset_test", "=", "ImgDataset", "(", "ids_test", ",", "n", ",", "name", "=", "'test'", ",", "is_train", "=", "is_train", ",", "dataset_name", "=", "dataset_name", ",", "\n", "input_width", "=", "input_width", ",", "input_height", "=", "input_height", ",", "concat_mask", "=", "concat_mask", ",", "\n", "img_path", "=", "img_path", ",", "args", "=", "args", ")", "\n", "dataset_file_val", "=", "ImgDataset", "(", "sorted_ids_val", ",", "n", ",", "name", "=", "'file_test'", ",", "is_train", "=", "is_train", ",", "dataset_name", "=", "dataset_name", ",", "\n", "input_width", "=", "input_width", ",", "input_height", "=", "input_height", ",", "concat_mask", "=", "concat_mask", ",", "\n", "img_path", "=", "img_path", ",", "use_file_list", "=", "False", ",", "random_pairs", "=", "False", ",", "args", "=", "args", ")", "\n", "return", "dataset_train", ",", "dataset_test", ",", "dataset_file_val", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.drc_img_data_loader.all_ids": [[225, 241], ["open", "rs.shuffle", "open", "rs.shuffle", "open", "os.join", "s.strip", "os.join", "s.strip", "os.join", "s.strip", "fp.readlines", "fp.readlines", "fp.readlines"], "function", ["None"], ["", "def", "all_ids", "(", "dataset_name", "=", "'drc_chair'", ",", "shuffle_train", "=", "True", ",", "shuffle_test", "=", "True", ")", ":", "\n", "\n", "    ", "with", "open", "(", "osp", ".", "join", "(", "__PATH__", ",", "dataset_name", "+", "'_train.txt'", ")", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "ids_train", "=", "[", "s", ".", "strip", "(", ")", "for", "s", "in", "fp", ".", "readlines", "(", ")", "if", "s", "]", "\n", "", "if", "shuffle_train", ":", "\n", "        ", "rs", ".", "shuffle", "(", "ids_train", ")", "\n", "\n", "", "with", "open", "(", "osp", ".", "join", "(", "__PATH__", ",", "dataset_name", "+", "'_test.txt'", ")", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "ids_test", "=", "[", "s", ".", "strip", "(", ")", "for", "s", "in", "fp", ".", "readlines", "(", ")", "if", "s", "]", "\n", "", "if", "shuffle_test", ":", "\n", "        ", "rs", ".", "shuffle", "(", "ids_test", ")", "\n", "\n", "", "with", "open", "(", "osp", ".", "join", "(", "__PATH__", ",", "dataset_name", "+", "'_val.txt'", ")", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "sorted_ids_val", "=", "[", "s", ".", "strip", "(", ")", "for", "s", "in", "fp", ".", "readlines", "(", ")", "if", "s", "]", "\n", "\n", "", "return", "ids_train", ",", "ids_test", ",", "sorted_ids_val", "\n", "", ""]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.shapenet_img_data_loader.ImgDataset.__init__": [[23, 77], ["list", "torch.Upsample", "torch.Upsample", "int", "int", "int", "open", "os.join", "s.strip", "s.split", "fp.readlines", "s.split", "s.split"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "ids", ",", "n", ",", "name", "=", "'default'", ",", "\n", "max_examples", "=", "None", ",", "is_train", "=", "True", ",", "\n", "dataset_name", "=", "'chair'", ",", "clamp_elevation", "=", "False", ",", "\n", "input_width", "=", "80", ",", "input_height", "=", "80", ",", "concat_mask", "=", "False", ",", "\n", "img_path", "=", "'./datasets/shapenet'", ",", "random_pairs", "=", "True", ",", "\n", "use_file_list", "=", "False", ",", "args", "=", "None", ")", ":", "\n", "        ", "self", ".", "_ids", "=", "list", "(", "ids", ")", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "dataset_name", "=", "dataset_name", "\n", "self", ".", "n", "=", "n", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "use_file_list", "=", "use_file_list", "\n", "\n", "if", "self", ".", "args", ".", "cull_identity_transform", ":", "\n", "            ", "self", ".", "bound", "=", "int", "(", "360", "/", "(", "ang_skip", "*", "ang_interval", ")", "+", "1", "-", "2", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bound", "=", "int", "(", "360", "/", "ang_interval", "+", "1", ")", "\n", "\n", "", "if", "self", ".", "use_file_list", ":", "\n", "            ", "with", "open", "(", "osp", ".", "join", "(", "'testing_tuple_lists/id_'", "+", "dataset_name", "+", "'_random_elevation.txt'", ")", ",", "'r'", ")", "as", "fp", ":", "\n", "                ", "self", ".", "ids_files", "=", "[", "s", ".", "strip", "(", ")", "for", "s", "in", "fp", ".", "readlines", "(", ")", "if", "s", "]", "\n", "self", ".", "ids_files_tgt", "=", "[", "s", ".", "split", "(", "' '", ")", "[", "0", "]", "for", "s", "in", "self", ".", "ids_files", "if", "s", "]", "\n", "self", ".", "ids_files_src", "=", "[", "s", ".", "split", "(", "' '", ")", "[", "1", "]", "for", "s", "in", "self", ".", "ids_files", "if", "s", "]", "\n", "self", ".", "ids_files_all", "=", "[", "s", ".", "split", "(", "' '", ")", "for", "s", "in", "self", ".", "ids_files", "if", "s", "]", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "ids_files", "=", "None", "\n", "self", ".", "ids_files_tgt", "=", "None", "\n", "self", ".", "ids_files_src", "=", "None", "\n", "self", ".", "ids_files_all", "=", "None", "\n", "\n", "", "self", ".", "concat_mask", "=", "concat_mask", "\n", "self", ".", "use_tgt_bg_noise", "=", "False", "\n", "self", ".", "use_src_bg_noise", "=", "False", "\n", "self", ".", "random_pairs", "=", "random_pairs", "\n", "self", ".", "clamp_elevation", "=", "clamp_elevation", "\n", "self", ".", "img_path", "=", "img_path", "\n", "\n", "self", ".", "rotate_increment", "=", "36", "\n", "self", ".", "num_elevations", "=", "3", "\n", "self", ".", "elev_increment", "=", "10.0", "\n", "\n", "self", ".", "input_width", "=", "input_width", "\n", "self", ".", "input_height", "=", "input_height", "\n", "\n", "self", ".", "transform", "=", "nn", ".", "Upsample", "(", "size", "=", "[", "self", ".", "input_height", ",", "self", ".", "input_width", "]", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "if", "self", ".", "random_pairs", ":", "\n", "            ", "self", ".", "num_pair_samples", "=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "num_pair_samples", "=", "int", "(", "self", ".", "rotate_increment", "/", "ang_skip", ")", "\n", "\n", "", "if", "max_examples", "is", "not", "None", ":", "\n", "            ", "self", ".", "_ids", "=", "self", ".", "_ids", "[", ":", "max_examples", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.shapenet_img_data_loader.ImgDataset.__getitem__": [[78, 161], ["int", "numpy.random.shuffle", "str", "shapenet_img_data_loader.ImgDataset.get_data_pair", "int", "range", "shapenet_img_data_loader.ImgDataset.get_data_pair", "int", "int", "shapenet_img_data_loader.ImgDataset.get_data_pair", "id.split", "id.split", "id.split", "numpy.concatenate", "id.split", "int", "ang.append", "numpy.array", "id.split", "id.split", "id.split", "numpy.random.randint", "int", "int", "id.split", "int", "int", "numpy.random.uniform", "int", "int", "numpy.linspace", "numpy.linspace", "[].split"], "methods", ["home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.shapenet_img_data_loader.ImgDataset.get_data_pair", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.shapenet_img_data_loader.ImgDataset.get_data_pair", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.shapenet_img_data_loader.ImgDataset.get_data_pair"], ["", "", "def", "__getitem__", "(", "self", ",", "in_id", ")", ":", "\n", "        ", "if", "self", ".", "use_file_list", ":", "\n", "            ", "id", "=", "self", ".", "ids_files_all", "[", "in_id", "]", "[", "0", "]", "\n", "\n", "int_tgt", "=", "int", "(", "id", ".", "split", "(", "'_'", ")", "[", "1", "]", ")", "\n", "h", "=", "id", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", "\n", "int_elev_src", "=", "[", "int", "(", "h", ")", "]", "*", "self", ".", "n", "\n", "int_elev_tgt", "=", "[", "int", "(", "h", ")", "]", "\n", "\n", "ang", "=", "[", "]", "\n", "for", "src_idx", "in", "range", "(", "self", ".", "n", ")", ":", "\n", "                ", "ang", ".", "append", "(", "int", "(", "self", ".", "ids_files_all", "[", "in_id", "]", "[", "src_idx", "+", "1", "]", ".", "split", "(", "'_'", ")", "[", "1", "]", ")", ")", "\n", "\n", "", "return", "self", ".", "get_data_pair", "(", "id", ",", "ang", ",", "int_tgt", ",", "int_elev_src", ",", "int_elev_tgt", ")", "\n", "\n", "", "if", "self", ".", "clamp_elevation", ":", "\n", "            ", "sample_interval", "=", "self", ".", "num_elevations", "\n", "", "else", ":", "\n", "            ", "sample_interval", "=", "1", "\n", "\n", "", "if", "not", "self", ".", "random_pairs", ":", "\n", "            ", "id", "=", "self", ".", "_ids", "[", "sample_interval", "*", "int", "(", "in_id", "/", "self", ".", "num_pair_samples", ")", "]", "\n", "\n", "idx", "=", "np", ".", "array", "(", "[", "in_id", "%", "self", ".", "num_pair_samples", "]", ")", "*", "ang_skip", "\n", "\n", "id_base", "=", "id", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "tgt", "=", "id", ".", "split", "(", "'_'", ")", "[", "1", "]", "\n", "h", "=", "id", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", "\n", "\n", "if", "self", ".", "clamp_elevation", ":", "\n", "                ", "new_h", "=", "'0'", "\n", "", "else", ":", "\n", "                ", "new_h", "=", "h", "\n", "\n", "", "id", "=", "'_'", ".", "join", "(", "[", "id_base", ",", "tgt", ",", "new_h", "]", ")", "\n", "\n", "int_tgt", "=", "int", "(", "tgt", ")", "\n", "int_elev_tgt", "=", "int", "(", "new_h", ")", "\n", "\n", "ang", "=", "(", "idx", "+", "int_tgt", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "return", "self", ".", "get_data_pair", "(", "id", ",", "ang", ",", "int_tgt", ",", "int_elev_tgt", ",", "new_h", ")", "\n", "\n", "", "id", "=", "self", ".", "_ids", "[", "sample_interval", "*", "in_id", "]", "\n", "\n", "elev_transform", "=", "False", "\n", "\n", "if", "self", ".", "args", ".", "use_elev_transform", "and", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "1", ")", "[", "0", "]", "<", "self", ".", "args", ".", "elev_transform_threshold", ":", "\n", "            ", "elev_transform", "=", "True", "\n", "", "else", ":", "\n", "            ", "elev_transform", "=", "False", "\n", "\n", "", "id_base", "=", "id", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "tgt", "=", "id", ".", "split", "(", "'_'", ")", "[", "1", "]", "\n", "h", "=", "id", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", "\n", "\n", "if", "self", ".", "clamp_elevation", ":", "\n", "            ", "new_h", "=", "'0'", "\n", "", "else", ":", "\n", "            ", "new_h", "=", "h", "\n", "\n", "", "id", "=", "'_'", ".", "join", "(", "[", "id_base", ",", "tgt", ",", "new_h", "]", ")", "\n", "int_tgt", "=", "int", "(", "tgt", ")", "\n", "\n", "idx", "=", "np", ".", "concatenate", "(", "\n", "(", "np", ".", "linspace", "(", "-", "self", ".", "bound", ",", "0", ",", "self", ".", "bound", "+", "1", ")", "[", ":", "-", "1", "]", ",", "\n", "np", ".", "linspace", "(", "0", ",", "self", ".", "bound", ",", "self", ".", "bound", "+", "1", ")", "[", "1", ":", "]", ")", "\n", ")", "*", "ang_skip", "\n", "\n", "np", ".", "random", ".", "shuffle", "(", "idx", ")", "\n", "idx", "=", "idx", "[", ":", "self", ".", "n", "]", "\n", "h", "=", "str", "(", "new_h", ")", "\n", "\n", "if", "elev_transform", ":", "\n", "            ", "int_elev_src", "=", "10", "*", "np", ".", "random", ".", "randint", "(", "0", ",", "3", ",", "self", ".", "n", ")", "\n", "int_elev_tgt", "=", "[", "int", "(", "new_h", ")", "]", "\n", "", "else", ":", "\n", "            ", "int_elev_src", "=", "[", "int", "(", "new_h", ")", "]", "*", "self", ".", "n", "\n", "int_elev_tgt", "=", "[", "int", "(", "new_h", ")", "]", "\n", "\n", "", "ang", "=", "(", "idx", "+", "int_tgt", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "return", "self", ".", "get_data_pair", "(", "id", ",", "ang", ",", "int_tgt", ",", "int_elev_src", ",", "int_elev_tgt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.shapenet_img_data_loader.ImgDataset.get_data_pair": [[162, 233], ["shapenet_img_data_loader.ImgDataset.readImageToArray", "int", "enumerate", "numpy.random.normal", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "numpy.expand_dims", "numpy.concatenate", "numpy.concatenate", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "shapenet_img_data_loader.ImgDataset.transform().squeeze", "shapenet_img_data_loader.ImgDataset.transform().squeeze", "str", "shapenet_img_data_loader.ImgDataset.readImageToArray", "int", "data[].append", "data[].append", "data[].append", "data[].append", "numpy.sum", "numpy.concatenate.transpose", "id.split", "numpy.random.normal", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "numpy.expand_dims", "numpy.concatenate", "numpy.concatenate", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "shapenet_img_data_loader.ImgDataset.transform().squeeze", "shapenet_img_data_loader.ImgDataset.transform().squeeze", "numpy.expand_dims", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "shapenet_img_data_loader.ImgDataset.transform", "shapenet_img_data_loader.ImgDataset.transform", "str", "numpy.sum", "numpy.concatenate.transpose", "tgt_image.unsqueeze", "tgt_mask.unsqueeze", "numpy.expand_dims", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "shapenet_img_data_loader.ImgDataset.transform", "shapenet_img_data_loader.ImgDataset.transform", "src_image.unsqueeze", "src_mask.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.shapenet_img_data_loader.ImgDataset.readImageToArray", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.shapenet_img_data_loader.ImgDataset.readImageToArray"], ["", "def", "get_data_pair", "(", "self", ",", "id", ",", "ang", ",", "int_tgt", ",", "int_elev_src", ",", "int_elev_tgt", ")", ":", "\n", "        ", "image", "=", "self", ".", "readImageToArray", "(", "id", ")", "\n", "mask", "=", "1", "-", "(", "np", ".", "sum", "(", "image", ",", "axis", "=", "-", "1", ")", ">=", "2.997", ")", "\n", "if", "self", ".", "args", ".", "use_tgt_bg_noise", ":", "\n", "            ", "noise_image", "=", "np", ".", "random", ".", "normal", "(", "0.5", ",", "0.5", ",", "(", "256", ",", "256", ",", "3", ")", ")", "\n", "torch", ".", "clamp", "(", "noise_image", ",", "min", "=", "0.0", ",", "max", "=", "1.0", ")", "\n", "\n", "rgb_mask", "=", "np", ".", "expand_dims", "(", "mask", ",", "-", "1", ")", "\n", "rgb_mask", "=", "np", ".", "concatenate", "(", "(", "rgb_mask", ",", "rgb_mask", ",", "rgb_mask", ")", ",", "axis", "=", "-", "1", ")", "\n", "image", "=", "(", "(", "rgb_mask", ")", "*", "(", "image", ")", ")", "+", "(", "(", "1", "-", "rgb_mask", ")", "*", "(", "noise_image", ")", ")", "\n", "", "if", "self", ".", "concat_mask", ":", "\n", "            ", "image", "=", "np", ".", "concatenate", "(", "(", "image", ",", "np", ".", "expand_dims", "(", "mask", ",", "-", "1", ")", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "tgt_azim_transform_mode", "=", "(", "self", ".", "rotate_increment", "-", "int_tgt", ")", "%", "self", ".", "rotate_increment", "\n", "tgt_elev_transform_mode", "=", "int", "(", "int_elev_tgt", "[", "0", "]", "/", "self", ".", "elev_increment", ")", "\n", "\n", "data", "=", "{", "}", "\n", "\n", "tgt_image", "=", "torch", ".", "Tensor", "(", "image", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", "[", ":", ",", "self", ".", "args", ".", "crop_y_dim", ":", "(", "self", ".", "args", ".", "final_height", "-", "self", ".", "args", ".", "crop_y_dim", ")", ",", "\n", "self", ".", "args", ".", "crop_x_dim", ":", "(", "self", ".", "args", ".", "final_width", "-", "self", ".", "args", ".", "crop_x_dim", ")", "]", "\n", "tgt_mask", "=", "torch", ".", "Tensor", "(", "mask", ")", ".", "unsqueeze", "(", "0", ")", "[", ":", ",", "self", ".", "args", ".", "crop_y_dim", ":", "(", "self", ".", "args", ".", "final_height", "-", "self", ".", "args", ".", "crop_y_dim", ")", ",", "\n", "self", ".", "args", ".", "crop_x_dim", ":", "(", "self", ".", "args", ".", "final_width", "-", "self", ".", "args", ".", "crop_x_dim", ")", "]", "\n", "data", "[", "'tgt_rgb_image'", "]", "=", "[", "self", ".", "transform", "(", "tgt_image", ".", "unsqueeze", "(", "0", ")", ")", ".", "squeeze", "(", "0", ")", "]", "\n", "data", "[", "'tgt_seg_image'", "]", "=", "[", "self", ".", "transform", "(", "tgt_mask", ".", "unsqueeze", "(", "0", ")", ")", ".", "squeeze", "(", "0", ")", "]", "\n", "if", "self", ".", "args", ".", "upsample_output", ":", "\n", "            ", "data", "[", "'orig_tgt_rgb_image'", "]", "=", "[", "tgt_image", "]", "\n", "data", "[", "'orig_tgt_seg_image'", "]", "=", "[", "tgt_mask", "]", "\n", "\n", "", "data", "[", "'tgt_azim_transform_mode'", "]", "=", "[", "tgt_azim_transform_mode", "]", "\n", "data", "[", "'tgt_elev_transform_mode'", "]", "=", "[", "tgt_elev_transform_mode", "]", "\n", "\n", "data", "[", "'src_rgb_image'", "]", "=", "[", "]", "\n", "data", "[", "'src_seg_image'", "]", "=", "[", "]", "\n", "data", "[", "'src_azim_transform_mode'", "]", "=", "[", "]", "\n", "data", "[", "'src_elev_transform_mode'", "]", "=", "[", "]", "\n", "\n", "for", "idx", ",", "a", "in", "enumerate", "(", "ang", ")", ":", "\n", "            ", "id_base", "=", "id", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "\n", "int_src", "=", "a", "%", "self", ".", "rotate_increment", "\n", "\n", "src", "=", "str", "(", "int_src", ")", "\n", "\n", "id_src", "=", "'_'", ".", "join", "(", "[", "id_base", ",", "src", ",", "str", "(", "int_elev_src", "[", "idx", "]", ")", "]", ")", "\n", "image_tmp", "=", "self", ".", "readImageToArray", "(", "id_src", ")", "\n", "mask_tmp", "=", "1", "-", "(", "np", ".", "sum", "(", "image_tmp", ",", "axis", "=", "-", "1", ")", ">=", "2.997", ")", "\n", "\n", "if", "self", ".", "args", ".", "use_src_bg_noise", ":", "\n", "                ", "noise_image", "=", "np", ".", "random", ".", "normal", "(", "0.5", ",", "0.5", ",", "(", "256", ",", "256", ",", "3", ")", ")", "\n", "torch", ".", "clamp", "(", "noise_image", ",", "min", "=", "0.0", ",", "max", "=", "1.0", ")", "\n", "\n", "rgb_mask_tmp", "=", "np", ".", "expand_dims", "(", "mask_tmp", ",", "-", "1", ")", "\n", "rgb_mask_tmp", "=", "np", ".", "concatenate", "(", "(", "rgb_mask_tmp", ",", "rgb_mask_tmp", ",", "rgb_mask_tmp", ")", ",", "axis", "=", "-", "1", ")", "\n", "image_tmp", "=", "(", "(", "rgb_mask_tmp", ")", "*", "(", "image_tmp", ")", ")", "+", "(", "(", "1", "-", "rgb_mask_tmp", ")", "*", "(", "noise_image", ")", ")", "\n", "", "if", "self", ".", "concat_mask", ":", "\n", "                ", "image_tmp", "=", "np", ".", "concatenate", "(", "(", "image_tmp", ",", "np", ".", "expand_dims", "(", "mask_tmp", ",", "-", "1", ")", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "src_azim_transform_mode", "=", "(", "self", ".", "rotate_increment", "-", "int_src", ")", "%", "self", ".", "rotate_increment", "\n", "src_elev_transform_mode", "=", "int", "(", "int_elev_src", "[", "idx", "]", "/", "self", ".", "elev_increment", ")", "\n", "\n", "src_image", "=", "torch", ".", "Tensor", "(", "image_tmp", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", "[", ":", ",", "self", ".", "args", ".", "crop_y_dim", ":", "(", "self", ".", "args", ".", "final_height", "-", "self", ".", "args", ".", "crop_y_dim", ")", ",", "\n", "self", ".", "args", ".", "crop_x_dim", ":", "(", "self", ".", "args", ".", "final_width", "-", "self", ".", "args", ".", "crop_x_dim", ")", "]", "\n", "src_mask", "=", "torch", ".", "Tensor", "(", "mask_tmp", ")", ".", "unsqueeze", "(", "0", ")", "[", ":", ",", "self", ".", "args", ".", "crop_y_dim", ":", "(", "self", ".", "args", ".", "final_height", "-", "self", ".", "args", ".", "crop_y_dim", ")", ",", "\n", "self", ".", "args", ".", "crop_x_dim", ":", "(", "self", ".", "args", ".", "final_width", "-", "self", ".", "args", ".", "crop_x_dim", ")", "]", "\n", "data", "[", "'src_rgb_image'", "]", ".", "append", "(", "self", ".", "transform", "(", "src_image", ".", "unsqueeze", "(", "0", ")", ")", ".", "squeeze", "(", "0", ")", ")", "\n", "data", "[", "'src_seg_image'", "]", ".", "append", "(", "self", ".", "transform", "(", "src_mask", ".", "unsqueeze", "(", "0", ")", ")", ".", "squeeze", "(", "0", ")", ")", "\n", "\n", "data", "[", "'src_azim_transform_mode'", "]", ".", "append", "(", "src_azim_transform_mode", ")", "\n", "data", "[", "'src_elev_transform_mode'", "]", ".", "append", "(", "src_elev_transform_mode", ")", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.shapenet_img_data_loader.ImgDataset.ids": [[234, 237], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ids", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.shapenet_img_data_loader.ImgDataset.__len__": [[238, 245], ["len", "len", "int", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "use_file_list", ":", "\n", "            ", "return", "len", "(", "self", ".", "ids_files", ")", "\n", "\n", "", "if", "self", ".", "clamp_elevation", ":", "\n", "            ", "return", "self", ".", "num_pair_samples", "*", "int", "(", "len", "(", "self", ".", "ids", ")", "/", "self", ".", "num_elevations", ")", "\n", "", "return", "self", ".", "num_pair_samples", "*", "len", "(", "self", ".", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.shapenet_img_data_loader.ImgDataset.__repr__": [[246, 250], ["len"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'ImgDataset (%s, %d examples)'", "%", "(", "\n", "self", ".", "name", ",", "\n", "len", "(", "self", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.shapenet_img_data_loader.ImgDataset.readImageToArray": [[252, 255], ["numpy.array", "PIL.Image.open"], "methods", ["None"], ["", "def", "readImageToArray", "(", "self", ",", "in_id", ")", ":", "\n", "        ", "img", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "self", ".", "img_path", "+", "'/'", "+", "self", ".", "dataset_name", "+", "'/'", "+", "in_id", "+", "'.png'", ")", ")", "/", "255.0", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.shapenet_img_data_loader.create_default_splits": [[257, 272], ["shapenet_img_data_loader.all_ids", "shapenet_img_data_loader.ImgDataset", "shapenet_img_data_loader.ImgDataset", "shapenet_img_data_loader.ImgDataset"], "function", ["home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.shapenet_img_data_loader.all_ids"], ["", "", "def", "create_default_splits", "(", "n", ",", "is_train", "=", "True", ",", "dataset_name", "=", "'chair'", ",", "\n", "input_width", "=", "80", ",", "input_height", "=", "80", ",", "concat_mask", "=", "False", ",", "\n", "shuffle_train", "=", "True", ",", "shuffle_test", "=", "True", ",", "img_path", "=", "'./datasets/shapenet'", ",", "args", "=", "None", ")", ":", "\n", "    ", "ids_train", ",", "ids_test", "=", "all_ids", "(", "dataset_name", "=", "dataset_name", ",", "shuffle_train", "=", "shuffle_train", ",", "shuffle_test", "=", "shuffle_test", ")", "\n", "\n", "dataset_train", "=", "ImgDataset", "(", "ids_train", ",", "n", ",", "name", "=", "'train'", ",", "is_train", "=", "is_train", ",", "dataset_name", "=", "dataset_name", ",", "\n", "input_width", "=", "input_width", ",", "input_height", "=", "input_height", ",", "concat_mask", "=", "concat_mask", ",", "\n", "img_path", "=", "img_path", ",", "args", "=", "args", ")", "\n", "dataset_test", "=", "ImgDataset", "(", "ids_test", ",", "n", ",", "name", "=", "'test'", ",", "is_train", "=", "is_train", ",", "dataset_name", "=", "dataset_name", ",", "\n", "input_width", "=", "input_width", ",", "input_height", "=", "input_height", ",", "concat_mask", "=", "concat_mask", ",", "\n", "img_path", "=", "img_path", ",", "args", "=", "args", ")", "\n", "dataset_file_test", "=", "ImgDataset", "(", "ids_test", ",", "n", ",", "name", "=", "'file_test'", ",", "is_train", "=", "is_train", ",", "dataset_name", "=", "dataset_name", ",", "\n", "input_width", "=", "input_width", ",", "input_height", "=", "input_height", ",", "concat_mask", "=", "concat_mask", ",", "\n", "img_path", "=", "img_path", ",", "use_file_list", "=", "True", ",", "args", "=", "args", ")", "\n", "return", "dataset_train", ",", "dataset_test", ",", "dataset_file_test", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.shapenet_img_data_loader.all_ids": [[274, 286], ["open", "rs.shuffle", "open", "rs.shuffle", "os.join", "s.strip", "os.join", "s.strip", "fp.readlines", "fp.readlines"], "function", ["None"], ["", "def", "all_ids", "(", "dataset_name", "=", "'chair'", ",", "shuffle_train", "=", "True", ",", "shuffle_test", "=", "True", ")", ":", "\n", "    ", "with", "open", "(", "osp", ".", "join", "(", "__PATH__", ",", "'id_'", "+", "dataset_name", "+", "'_train.txt'", ")", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "ids_train", "=", "[", "s", ".", "strip", "(", ")", "for", "s", "in", "fp", ".", "readlines", "(", ")", "if", "s", "]", "\n", "", "if", "shuffle_train", ":", "\n", "        ", "rs", ".", "shuffle", "(", "ids_train", ")", "\n", "\n", "", "with", "open", "(", "osp", ".", "join", "(", "__PATH__", ",", "'id_'", "+", "dataset_name", "+", "'_test.txt'", ")", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "ids_test", "=", "[", "s", ".", "strip", "(", ")", "for", "s", "in", "fp", ".", "readlines", "(", ")", "if", "s", "]", "\n", "", "if", "shuffle_test", ":", "\n", "        ", "rs", ".", "shuffle", "(", "ids_test", ")", "\n", "\n", "", "return", "ids_train", ",", "ids_test", "\n", "", ""]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.__init__": [[25, 178], ["torch.Upsample", "torch.Upsample", "torch.Upsample", "dataset.create_default_splits", "train_dataset.__len__", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "test_dataset.__len__", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "file_test_dataset.__len__", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "loss.TBNLoss", "trainer.TBNTrainer.loss_function.to", "tbn_model.TBN", "trainer.TBNTrainer.model.to", "torch.Adam", "torch.Adam", "torch.Adam", "logger.Logger", "trainer.TBNTrainer.init_logs", "print", "vars", "enumerate", "print", "print", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "print", "loss_models.PatchImageDiscriminator", "os.makedirs", "os.makedirs", "iter", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "int", "range", "print", "int", "print", "trainer.TBNTrainer.model.parameters", "trainer.TBNTrainer.gan_criterion.to", "trainer.TBNTrainer.discriminator.to", "torch.Adam", "torch.Adam", "torch.Adam", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "print", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "sys.exit", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "os.path.exists", "os.path.exists", "ValueError", "int", "trainer.TBNTrainer.discriminator.parameters", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.shapenet_img_data_loader.create_default_splits", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.shapenet_img_data_loader.ImgDataset.__len__", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.shapenet_img_data_loader.ImgDataset.__len__", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.shapenet_img_data_loader.ImgDataset.__len__", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.init_logs"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "if", "args", ".", "print_args", ":", "\n", "            ", "print", "(", "'\\nArgs:'", ")", "\n", "vargs", "=", "vars", "(", "args", ")", "\n", "for", "argIdx", ",", "argKey", "in", "enumerate", "(", "vargs", ",", "0", ")", ":", "\n", "                ", "print", "(", "argKey", "+", "' : '", "+", "str", "(", "vargs", "[", "argKey", "]", ")", ")", "\n", "", "print", "(", "'\\n'", ")", "\n", "", "self", ".", "args", "=", "args", "\n", "\n", "if", "'gpu'", "==", "args", ".", "device_mode", ":", "\n", "            ", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "sys", ".", "exit", "(", "'Error: CUDA was requested but is unavailable.'", ")", "\n", "", "print", "(", "'using gpu, device: '", "+", "str", "(", "args", ".", "cuda_device_num", ")", ")", "\n", "self", ".", "tensor_type", "=", "'torch.cuda.FloatTensor'", "\n", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "cuda_device_num", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'using cpu'", ")", "\n", "self", ".", "tensor_type", "=", "'torch.FloatTensor'", "\n", "\n", "", "if", "self", ".", "args", ".", "use_amp", ":", "\n", "            ", "self", ".", "adam_betas", "=", "(", "0.9", ",", "0.99", ")", "\n", "self", ".", "adam_eps", "=", "1e-04", "\n", "", "else", ":", "\n", "            ", "self", ".", "adam_betas", "=", "(", "0.9", ",", "0.999", ")", "\n", "self", ".", "adam_eps", "=", "1e-08", "\n", "\n", "", "if", "self", ".", "args", ".", "use_gan", ":", "\n", "            ", "if", "self", ".", "args", ".", "use_ls_gan", ":", "\n", "                ", "self", ".", "gan_criterion", "=", "nn", ".", "MSELoss", "(", ")", "\n", "self", ".", "fake_val", "=", "-", "1", "\n", "", "else", ":", "\n", "                ", "self", ".", "gan_criterion", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "self", ".", "fake_val", "=", "0", "\n", "\n", "", "noise_sigma", "=", "self", ".", "args", ".", "gan_noise_sigma", "if", "self", ".", "args", ".", "use_gan_noise", "else", "None", "\n", "\n", "self", ".", "discriminator", "=", "PatchImageDiscriminator", "(", "n_channels", "=", "self", ".", "args", ".", "num_output_channels", ",", "\n", "use_noise", "=", "self", ".", "args", ".", "use_gan_noise", ",", "\n", "noise_sigma", "=", "noise_sigma", ",", "\n", "num_intermediate_layers", "=", "self", ".", "args", ".", "gan_num_extra_layers", ")", "\n", "\n", "", "self", ".", "out_batch_idx", "=", "0", "\n", "self", ".", "tensor_write_count", "=", "0", "\n", "\n", "if", "self", ".", "args", ".", "print_output", "and", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "args", ".", "img_out_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "args", ".", "img_out_dir", ")", "\n", "\n", "", "if", "0", "!=", "self", ".", "args", ".", "log_interval", "and", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "args", ".", "log_folder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "args", ".", "log_folder", ")", "\n", "\n", "", "self", ".", "num_eval_combine_views", "=", "self", ".", "args", ".", "num_combine_views", "\n", "if", "args", ".", "dataset_name", "==", "'chair'", "or", "args", ".", "dataset_name", "==", "'car'", ":", "\n", "            ", "import", "shapenet_img_data_loader", "as", "dataset", "\n", "args", ".", "azim_rotation_angle_increment", "=", "10.0", "\n", "args", ".", "elev_rotation_angle_increment", "=", "10.0", "\n", "args", ".", "final_height", "=", "256", "\n", "args", ".", "final_width", "=", "256", "\n", "self", ".", "do_run_eval", "=", "True", "\n", "", "elif", "'drc_'", "in", "args", ".", "dataset_name", ":", "\n", "            ", "import", "drc_img_data_loader", "as", "dataset", "\n", "args", ".", "azim_rotation_angle_increment", "=", "1.0", "\n", "args", ".", "elev_rotation_angle_increment", "=", "1.0", "\n", "args", ".", "final_height", "=", "224", "\n", "args", ".", "final_width", "=", "224", "\n", "self", ".", "do_run_eval", "=", "False", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "args", ".", "dataset_name", ")", "\n", "\n", "", "self", ".", "transform", "=", "nn", ".", "Upsample", "(", "size", "=", "[", "args", ".", "final_height", "-", "(", "2", "*", "self", ".", "args", ".", "crop_y_dim", ")", ",", "\n", "args", ".", "final_width", "-", "(", "2", "*", "self", ".", "args", ".", "crop_x_dim", ")", "]", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "shuffle_train", "=", "False", "\n", "shuffle_test", "=", "False", "\n", "config_num_input", "=", "args", ".", "num_combine_views", "\n", "train_dataset", ",", "test_dataset", ",", "file_test_dataset", "=", "dataset", ".", "create_default_splits", "(", "config_num_input", ",", "dataset_name", "=", "args", ".", "dataset_name", ",", "\n", "input_width", "=", "args", ".", "input_width", ",", "input_height", "=", "args", ".", "input_height", ",", "\n", "concat_mask", "=", "(", "4", "==", "args", ".", "num_output_channels", ")", ",", "\n", "shuffle_train", "=", "shuffle_train", ",", "shuffle_test", "=", "shuffle_test", ",", "\n", "img_path", "=", "self", ".", "args", ".", "img_path", ",", "args", "=", "self", ".", "args", ")", "\n", "\n", "shuffle", "=", "True", "\n", "self", ".", "n_img", "=", "train_dataset", ".", "__len__", "(", ")", "\n", "print", "(", "'Use a train dataset with'", ",", "self", ".", "n_img", ",", "'images'", ")", "\n", "self", ".", "train_loader", "=", "DataLoader", "(", "train_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "drop_last", "=", "True", ",", "\n", "shuffle", "=", "shuffle", ")", "\n", "\n", "self", ".", "n_test_img", "=", "test_dataset", ".", "__len__", "(", ")", "\n", "print", "(", "'Use a test dataset with'", ",", "self", ".", "n_test_img", ",", "'images'", ")", "\n", "self", ".", "test_loader", "=", "DataLoader", "(", "test_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "drop_last", "=", "True", ",", "\n", "shuffle", "=", "shuffle", ")", "\n", "\n", "self", ".", "n_file_test_img", "=", "file_test_dataset", ".", "__len__", "(", ")", "\n", "print", "(", "'Use a file tuple dataset with'", ",", "self", ".", "n_file_test_img", ",", "'images'", ")", "\n", "self", ".", "file_test_loader", "=", "DataLoader", "(", "file_test_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "drop_last", "=", "False", ",", "\n", "shuffle", "=", "False", ")", "\n", "\n", "if", "0", "!=", "self", ".", "args", ".", "test_interval", ":", "self", ".", "test_loader_iter", "=", "iter", "(", "self", ".", "test_loader", ")", "\n", "if", "0.0", "<", "self", ".", "args", ".", "w_gen_seg3d", "or", "self", ".", "args", ".", "use_seg3d_proxy", ":", "self", ".", "seg_criterion", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "if", "0", "==", "self", ".", "args", ".", "vol_dim", ":", "\n", "            ", "vol_dim", "=", "int", "(", "self", ".", "args", ".", "input_width", "/", "2", ")", "\n", "for", "conv_idx", "in", "range", "(", "self", ".", "args", ".", "num_input_convs", ")", ":", "\n", "                ", "vol_dim", "=", "int", "(", "vol_dim", "/", "2", ")", "\n", "", "print", "(", "'inferring vol_dim of '", "+", "str", "(", "vol_dim", ")", ")", "\n", "", "else", ":", "\n", "            ", "vol_dim", "=", "int", "(", "self", ".", "args", ".", "vol_dim", ")", "\n", "print", "(", "'using vol_dim of '", "+", "str", "(", "vol_dim", ")", ")", "\n", "\n", "", "self", ".", "num_input_channels", "=", "self", ".", "args", ".", "num_input_channels", "\n", "self", ".", "num_output_channels", "=", "self", ".", "args", ".", "num_output_channels", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "(", "\n", "(", "'cuda:'", "+", "str", "(", "self", ".", "args", ".", "cuda_device_num", ")", ")", "if", "'gpu'", "==", "self", ".", "args", ".", "device_mode", "else", "'cpu'", ")", ")", "\n", "self", ".", "loss_function", "=", "TBNLoss", "(", "tensor_type", "=", "self", ".", "tensor_type", ",", "use_vgg", "=", "(", "0.0", "<", "self", ".", "args", ".", "w_gen_vgg", ")", ",", "\n", "vgg_model_path", "=", "self", ".", "args", ".", "vgg_model_path", ")", "\n", "self", ".", "loss_function", "=", "self", ".", "loss_function", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "model", "=", "tbn_model", ".", "TBN", "(", "self", ".", "num_input_channels", ",", "self", ".", "num_output_channels", ",", "\n", "args", "=", "self", ".", "args", ",", "vol_dim", "=", "vol_dim", ",", "num_features", "=", "self", ".", "args", ".", "num_features", ",", "\n", "tensor_type", "=", "self", ".", "tensor_type", ")", "\n", "\n", "self", ".", "model", "=", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "learning_rate", ",", "\n", "betas", "=", "self", ".", "adam_betas", ",", "eps", "=", "self", ".", "adam_eps", ")", "\n", "if", "self", ".", "args", ".", "use_gan", ":", "\n", "            ", "self", ".", "gan_criterion", "=", "self", ".", "gan_criterion", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "discriminator", "=", "self", ".", "discriminator", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "disc_optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "discriminator", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "disc_learning_rate", ",", "\n", "betas", "=", "self", ".", "adam_betas", ",", "eps", "=", "self", ".", "adam_eps", ")", "\n", "\n", "", "if", "self", ".", "tensor_type", "==", "'torch.cuda.FloatTensor'", ":", "\n", "            ", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "", "self", ".", "batch_num", "=", "0", "\n", "self", ".", "test_batch_num", "=", "0", "\n", "self", ".", "eval_batch_num", "=", "0", "\n", "\n", "self", ".", "total_loss_sum", "=", "0.0", "\n", "self", ".", "total_test_loss_sum", "=", "0.0", "\n", "self", ".", "total_eval_loss_sum", "=", "0.0", "\n", "\n", "self", ".", "total_disc_loss_sum", "=", "0.0", "\n", "\n", "self", ".", "logger", "=", "Logger", "(", "self", ".", "args", ".", "log_folder", ")", "\n", "self", ".", "logs", "=", "self", ".", "init_logs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.ones_like": [[179, 182], ["torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "tensor.size"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "ones_like", "(", "tensor", ",", "device", ",", "val", "=", "1.", ")", ":", "\n", "        ", "return", "torch", ".", "FloatTensor", "(", "tensor", ".", "size", "(", ")", ")", ".", "fill_", "(", "val", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.zeros_like": [[183, 186], ["torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "tensor.size"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "zeros_like", "(", "tensor", ",", "device", ",", "val", "=", "0.", ")", ":", "\n", "        ", "return", "torch", ".", "FloatTensor", "(", "tensor", ".", "size", "(", ")", ")", ".", "fill_", "(", "val", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.images_to_numpy": [[187, 194], ["tensor.data.cpu().numpy().transpose", "tensor.data.cpu().numpy().transpose.astype", "tensor.data.cpu().numpy", "tensor.data.cpu"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "images_to_numpy", "(", "tensor", ")", ":", "\n", "        ", "generated", "=", "tensor", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "generated", "[", "generated", "<", "0", "]", "=", "0", "\n", "generated", "[", "generated", ">", "1", "]", "=", "1", "\n", "generated", "=", "generated", "*", "255", "\n", "return", "generated", ".", "astype", "(", "'uint8'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.adjust_learning_rate": [[195, 201], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "learning_rate", "=", "0.0002", ")", ":", "\n", "        ", "lr", "=", "learning_rate", "\n", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.train": [[202, 390], ["range", "print", "trainer.TBNTrainer.save", "print", "amp.register_float_function", "amp.initialize", "print", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "trainer.TBNTrainer.model.to", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "trainer.TBNTrainer.loss_function.to", "trainer.TBNTrainer.adjust_learning_rate", "time.time", "enumerate", "amp.initialize", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "trainer.TBNTrainer.discriminator.to", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "trainer.TBNTrainer.gan_criterion.to", "print", "trainer.TBNTrainer.adjust_learning_rate", "trainer.TBNTrainer.model.train", "trainer.TBNTrainer.get_data", "trainer.TBNTrainer.model", "trainer.TBNTrainer.optimizer.zero_grad", "trainer.TBNTrainer.compute_gen_losses", "trainer.TBNTrainer.optimizer.step", "trainer.TBNTrainer.item", "trainer.TBNTrainer.save", "print", "trainer.TBNTrainer.run_eval", "print", "ImportError", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "trainer.TBNTrainer.seg_criterion.to", "trainer.TBNTrainer.discriminator.train", "trainer.TBNTrainer.run_test_batch", "print", "trainer.TBNTrainer.disc_optimizer.zero_grad", "trainer.TBNTrainer.compute_disc_losses", "trainer.TBNTrainer.disc_optimizer.step", "trainer.TBNTrainer.backward", "trainer.TBNTrainer.item", "print", "exit", "trainer.TBNTrainer.logs.items", "print", "trainer.TBNTrainer.logs.items", "trainer.TBNTrainer.reset_logs", "trainer.TBNTrainer.reset_logs", "trainer.TBNTrainer.log_images", "time.time", "print", "print", "trainer.TBNTrainer.save", "trainer.TBNTrainer.save", "print", "print", "trainer.TBNTrainer.save", "numpy.random.uniform", "trainer.TBNTrainer.backward", "amp.scale_loss", "scaled_loss.backward", "trainer.TBNTrainer.logger.scalar_summary", "round", "str", "str", "str", "amp.scale_loss", "scaled_loss.backward", "time.time", "str", "str", "str", "float", "float", "int", "str", "str", "str", "str", "float", "float", "str"], "methods", ["home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.adjust_learning_rate", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.adjust_learning_rate", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.train", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.get_data", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.compute_gen_losses", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.run_eval", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.train", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.run_test_batch", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.compute_disc_losses", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.reset_logs", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.reset_logs", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.log_images", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.logger.Logger.scalar_summary"], ["", "", "def", "train", "(", "self", ")", ":", "\n", "        ", "self", ".", "best_epoch_raw_ssim_loss", "=", "-", "1e19", "\n", "\n", "had_training_error", "=", "False", "\n", "\n", "if", "self", ".", "args", ".", "use_amp", ":", "\n", "            ", "try", ":", "\n", "                ", "from", "apex", "import", "amp", "\n", "", "except", "ImportError", ":", "\n", "                ", "raise", "ImportError", "(", "\"Please install apex from https://www.github.com/nvidia/apex to run this program.\"", ")", "\n", "", "print", "(", "'enabling AMP...'", ")", "\n", "opt_level", "=", "\"O1\"", "\n", "amp", ".", "register_float_function", "(", "torch", ",", "'batch_norm'", ")", "\n", "if", "self", ".", "args", ".", "use_gan", ":", "\n", "                ", "self", ".", "discriminator", ",", "self", ".", "disc_optimizer", "=", "amp", ".", "initialize", "(", "self", ".", "discriminator", ",", "self", ".", "disc_optimizer", ",", "opt_level", "=", "opt_level", ",", "loss_scale", "=", "1.0", ")", "\n", "", "self", ".", "model", ",", "self", ".", "optimizer", "=", "amp", ".", "initialize", "(", "self", ".", "model", ",", "self", ".", "optimizer", ",", "opt_level", "=", "opt_level", ",", "loss_scale", "=", "1.0", ")", "\n", "# disable use of ssim loss for training due to issues with mixed precision", "\n", "self", ".", "args", ".", "w_gen_ssim", "=", "0.0", "\n", "\n", "", "if", "self", ".", "args", ".", "use_data_parallel", ":", "\n", "            ", "print", "(", "'enabling data parallel...'", ")", "\n", "self", ".", "model", "=", "nn", ".", "DataParallel", "(", "self", ".", "model", ")", "\n", "self", ".", "model", "=", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "loss_function", "=", "nn", ".", "DataParallel", "(", "self", ".", "loss_function", ")", "\n", "self", ".", "loss_function", "=", "self", ".", "loss_function", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "self", ".", "args", ".", "use_gan", ":", "\n", "                ", "self", ".", "discriminator", "=", "nn", ".", "DataParallel", "(", "self", ".", "discriminator", ")", "\n", "self", ".", "discriminator", "=", "self", ".", "discriminator", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "gan_criterion", "=", "nn", ".", "DataParallel", "(", "self", ".", "gan_criterion", ")", "\n", "self", ".", "gan_criterion", "=", "self", ".", "gan_criterion", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "if", "0.0", "<", "self", ".", "args", ".", "w_gen_seg3d", "or", "self", ".", "args", ".", "use_seg3d_proxy", ":", "\n", "                    ", "self", ".", "seg_criterion", "=", "nn", ".", "DataParallel", "(", "self", ".", "seg_criterion", ")", "\n", "self", ".", "seg_criterion", "=", "self", ".", "seg_criterion", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "", "", "", "for", "epoch", "in", "range", "(", "self", ".", "args", ".", "epochs", ")", ":", "\n", "            ", "if", "had_training_error", ":", "\n", "                ", "print", "(", "'exiting early due to training error'", ")", "\n", "break", "\n", "\n", "", "self", ".", "adjust_learning_rate", "(", "self", ".", "optimizer", ",", "epoch", ",", "\n", "self", ".", "args", ".", "learning_rate", ")", "\n", "if", "self", ".", "args", ".", "use_gan", ":", "\n", "                ", "self", ".", "adjust_learning_rate", "(", "self", ".", "disc_optimizer", ",", "epoch", ",", "\n", "self", ".", "args", ".", "disc_learning_rate", ")", "\n", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "loss_sum", "=", "0.0", "\n", "disc_loss_sum", "=", "0.0", "\n", "\n", "for", "(", "i", ",", "data", ")", "in", "enumerate", "(", "self", ".", "train_loader", ",", "0", ")", ":", "\n", "                ", "self", ".", "model", ".", "train", "(", ")", "\n", "if", "self", ".", "args", ".", "use_gan", "and", "0.0", "<", "self", ".", "args", ".", "w_disc_gan_label", ":", "\n", "                    ", "self", ".", "discriminator", ".", "train", "(", ")", "\n", "\n", "", "self", ".", "batch_num", "+=", "1", "\n", "\n", "if", "(", "(", "0", ")", "!=", "(", "self", ".", "args", ".", "test_interval", ")", ")", "and", "(", "(", "0", ")", "==", "(", "(", "self", ".", "batch_num", ")", "%", "(", "self", ".", "args", ".", "test_interval", ")", ")", ")", ":", "\n", "                    ", "self", ".", "run_test_batch", "(", "use_file_tuples", "=", "False", ")", "\n", "\n", "", "if", "(", "not", "self", ".", "args", ".", "use_variable_num_views", ")", "or", "(", "self", ".", "batch_num", "%", "self", ".", "args", ".", "log_interval", "==", "0", ")", ":", "\n", "                    ", "num_inputs_to_use", "=", "self", ".", "args", ".", "num_combine_views", "\n", "", "else", ":", "\n", "                    ", "sample_prob", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "1", ")", "[", "0", "]", "\n", "if", "sample_prob", "<", "0.500", ":", "\n", "                        ", "num_inputs_to_use", "=", "1", "\n", "", "elif", "sample_prob", "<", "0.750", ":", "\n", "                        ", "num_inputs_to_use", "=", "2", "\n", "", "elif", "sample_prob", "<", "0.875", ":", "\n", "                        ", "num_inputs_to_use", "=", "3", "\n", "", "else", ":", "\n", "                        ", "num_inputs_to_use", "=", "4", "\n", "\n", "", "", "data", "=", "self", ".", "get_data", "(", "data", ",", "num_inputs_to_use", ")", "\n", "\n", "if", "0", "==", "(", "i", "+", "1", ")", "%", "self", ".", "args", ".", "log_interval", ":", "\n", "                    ", "print", "(", "'start '", "+", "str", "(", "i", "+", "1", ")", "+", "' of '", "+", "str", "(", "self", ".", "n_img", "/", "self", ".", "args", ".", "batch_size", ")", ")", "\n", "\n", "", "model_out", "=", "self", ".", "model", "(", "num_inputs_to_use", ",", "data", ")", "\n", "\n", "if", "self", ".", "args", ".", "use_gan", "and", "0.0", "<", "self", ".", "args", ".", "w_disc_gan_label", ":", "\n", "# reset training params", "\n", "                    ", "self", ".", "disc_optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "disc_loss", "=", "self", ".", "compute_disc_losses", "(", "model_out", ",", "data", ",", "loss_type", "=", "'train'", ")", "\n", "\n", "# update model", "\n", "if", "self", ".", "args", ".", "use_amp", ":", "\n", "                        ", "with", "amp", ".", "scale_loss", "(", "disc_loss", ",", "self", ".", "disc_optimizer", ")", "as", "scaled_loss", ":", "\n", "                            ", "scaled_loss", ".", "backward", "(", ")", "\n", "", "", "else", ":", "\n", "                        ", "disc_loss", ".", "backward", "(", ")", "\n", "", "self", ".", "disc_optimizer", ".", "step", "(", ")", "\n", "\n", "# reset training params", "\n", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "loss", "=", "self", ".", "compute_gen_losses", "(", "model_out", ",", "data", ",", "loss_type", "=", "'train'", ")", "\n", "\n", "# update model", "\n", "if", "self", ".", "args", ".", "use_amp", ":", "\n", "                    ", "with", "amp", ".", "scale_loss", "(", "loss", ",", "self", ".", "optimizer", ")", "as", "scaled_loss", ":", "\n", "                        ", "scaled_loss", ".", "backward", "(", ")", "\n", "", "", "else", ":", "\n", "                    ", "loss", ".", "backward", "(", ")", "\n", "", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "loss_item", "=", "loss", ".", "item", "(", ")", "\n", "if", "self", ".", "args", ".", "use_gan", "and", "0.0", "<", "self", ".", "args", ".", "w_disc_gan_label", ":", "\n", "                    ", "disc_loss_item", "=", "disc_loss", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "                    ", "disc_loss_item", "=", "0.0", "\n", "\n", "# check for NAN during training", "\n", "", "if", "loss_item", "!=", "loss_item", "or", "disc_loss_item", "!=", "disc_loss_item", ":", "\n", "                    ", "print", "(", "'NAN loss in training:'", ",", "loss_item", ",", "disc_loss_item", ")", "\n", "had_training_error", "=", "True", "\n", "exit", "(", "-", "1", ")", "\n", "\n", "", "loss_sum", "+=", "loss_item", "\n", "\n", "if", "self", ".", "batch_num", "%", "self", ".", "args", ".", "log_interval", "==", "0", ":", "\n", "                    ", "log_string", "=", "\"Batch %d\"", "%", "self", ".", "batch_num", "\n", "for", "k", ",", "v", "in", "self", ".", "logs", ".", "items", "(", ")", ":", "\n", "                        ", "if", "'l_eval_'", "==", "k", "[", "0", ":", "7", "]", ":", "\n", "                            ", "scale_factor", "=", "1.0", "\n", "", "elif", "'l_test_'", "==", "k", "[", "0", ":", "7", "]", ":", "\n", "                            ", "scale_factor", "=", "(", "float", "(", "self", ".", "args", ".", "log_interval", ")", "/", "self", ".", "args", ".", "test_interval", ")", "if", "0", "!=", "self", ".", "args", ".", "test_interval", "else", "1.0", "\n", "", "else", ":", "\n", "                            ", "scale_factor", "=", "float", "(", "self", ".", "args", ".", "log_interval", ")", "\n", "", "log_string", "+=", "\" [%s] %5.3f\"", "%", "(", "k", ",", "v", "/", "scale_factor", ")", "\n", "\n", "", "log_string", "+=", "\". Took %5.2f\"", "%", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "\n", "\n", "print", "(", "log_string", ")", "\n", "\n", "for", "tag", ",", "value", "in", "self", ".", "logs", ".", "items", "(", ")", ":", "\n", "                        ", "if", "'l_eval_'", "==", "tag", "[", "0", ":", "7", "]", ":", "\n", "                            ", "scale_factor", "=", "1.0", "\n", "", "elif", "'l_test_'", "==", "tag", "[", "0", ":", "7", "]", ":", "\n", "                            ", "scale_factor", "=", "(", "float", "(", "self", ".", "args", ".", "log_interval", ")", "/", "self", ".", "args", ".", "test_interval", ")", "if", "0", "!=", "self", ".", "args", ".", "test_interval", "else", "1.0", "\n", "", "else", ":", "\n", "                            ", "scale_factor", "=", "float", "(", "self", ".", "args", ".", "log_interval", ")", "\n", "", "self", ".", "logger", ".", "scalar_summary", "(", "tag", ",", "value", "/", "scale_factor", ",", "self", ".", "batch_num", ")", "\n", "\n", "", "self", ".", "reset_logs", "(", "'train'", ")", "\n", "self", ".", "reset_logs", "(", "'test'", ")", "\n", "self", ".", "log_images", "(", "model_out", ",", "data", ",", "'T_Images'", ")", "\n", "\n", "", "if", "0", "==", "(", "i", "+", "1", ")", "%", "self", ".", "args", ".", "log_interval", ":", "\n", "                    ", "crnt_time", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'end '", "+", "str", "(", "i", "+", "1", ")", "+", "' of '", "+", "str", "(", "self", ".", "n_img", "/", "self", ".", "args", ".", "batch_size", ")", ")", "\n", "print", "(", "\n", "'time:'", ",", "\n", "round", "(", "crnt_time", "-", "start_time", ",", "3", ")", ",", "\n", "'s'", ",", "\n", "loss_item", ",", "\n", "loss_sum", "/", "self", ".", "args", ".", "log_interval", ",", "\n", ")", "\n", "start_time", "=", "crnt_time", "\n", "loss_sum", "=", "0.0", "\n", "\n", "# save regularly after processing the specified number of input images", "\n", "", "if", "0", "==", "self", ".", "batch_num", "%", "self", ".", "args", ".", "int_save_interval", ":", "\n", "                    ", "model_name", "=", "self", ".", "args", ".", "model_path", "[", ":", "-", "4", "]", "+", "'_int_cpt.pth'", "\n", "self", ".", "save", "(", "model_name", ")", "\n", "\n", "", "if", "0", "==", "self", ".", "batch_num", "%", "self", ".", "args", ".", "checkpoint_save_interval", ":", "\n", "                    ", "model_name", "=", "self", ".", "args", ".", "model_path", "[", ":", "-", "4", "]", "+", "'_batch_'", "+", "str", "(", "int", "(", "self", ".", "batch_num", "/", "1000.0", ")", ")", "+", "'k_cpt.pth'", "\n", "self", ".", "save", "(", "model_name", ")", "\n", "print", "(", "'Checkpoint model saved to '", "+", "model_name", ")", "\n", "\n", "", "", "if", "0", "==", "(", "epoch", "+", "1", ")", "%", "self", ".", "args", ".", "epoch_save_interval", ":", "\n", "                ", "model_name", "=", "self", ".", "args", ".", "model_path", "[", ":", "-", "4", "]", "+", "'_epoch_'", "+", "str", "(", "epoch", ")", "+", "'_cpt.pth'", "\n", "self", ".", "save", "(", "model_name", ")", "\n", "print", "(", "'Epoch model saved to '", "+", "model_name", ")", "\n", "\n", "", "if", "self", ".", "do_run_eval", ":", "\n", "                ", "epoch_test_loss", ",", "epoch_raw_ssim_loss", "=", "self", ".", "run_eval", "(", ")", "\n", "print", "(", "'Epoch testing loss: '", "+", "str", "(", "epoch", ")", "+", "' '", "+", "str", "(", "epoch_test_loss", ")", "+", "' '", "+", "str", "(", "epoch_raw_ssim_loss", ")", ")", "\n", "if", "epoch_raw_ssim_loss", ">", "self", ".", "best_epoch_raw_ssim_loss", ":", "\n", "                    ", "print", "(", "'Best raw ssim: '", "+", "str", "(", "1.0", "-", "epoch_raw_ssim_loss", ")", "+", "' '", "+", "str", "(", "epoch_raw_ssim_loss", ")", ")", "\n", "self", ".", "best_epoch_raw_ssim_loss", "=", "epoch_raw_ssim_loss", "\n", "model_name", "=", "self", ".", "args", ".", "model_path", "[", ":", "-", "4", "]", "+", "'_best.pth'", "\n", "self", ".", "save", "(", "model_name", ")", "\n", "\n", "", "", "", "print", "(", "'Finished Training. Best loss: '", ",", "self", ".", "best_epoch_raw_ssim_loss", ")", "\n", "self", ".", "save", "(", "self", ".", "args", ".", "model_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.run_test_batch": [[391, 423], ["trainer.TBNTrainer.model.eval", "trainer.TBNTrainer.discriminator.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "trainer.TBNTrainer.get_data", "trainer.TBNTrainer.model", "trainer.TBNTrainer.compute_gen_losses", "trainer.TBNTrainer.log_images", "iter", "next", "next", "iter", "next"], "methods", ["home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.get_data", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.compute_gen_losses", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.log_images"], ["", "def", "run_test_batch", "(", "self", ",", "use_file_tuples", "=", "True", ")", ":", "\n", "        ", "self", ".", "test_batch_num", "+=", "1", "\n", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "if", "self", ".", "args", ".", "use_gan", ":", "\n", "            ", "self", ".", "discriminator", ".", "eval", "(", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "use_file_tuples", ":", "\n", "                ", "targetLabel", "=", "\"Static_Images\"", "\n", "# reset iterator", "\n", "self", ".", "file_test_loader_iter", "=", "iter", "(", "self", ".", "file_test_loader", ")", "\n", "test_data", "=", "next", "(", "self", ".", "file_test_loader_iter", ")", "\n", "", "else", ":", "\n", "                ", "targetLabel", "=", "\"Images\"", "\n", "try", ":", "\n", "                    ", "test_data", "=", "next", "(", "self", ".", "test_loader_iter", ")", "\n", "", "except", ":", "\n", "# reset iterator", "\n", "                    ", "self", ".", "test_loader_iter", "=", "iter", "(", "self", ".", "test_loader", ")", "\n", "test_data", "=", "next", "(", "self", ".", "test_loader_iter", ")", "\n", "\n", "", "", "num_inputs_to_use", "=", "self", ".", "args", ".", "num_combine_views", "\n", "\n", "data", "=", "self", ".", "get_data", "(", "test_data", ",", "num_inputs_to_use", ")", "\n", "\n", "model_out", "=", "self", ".", "model", "(", "num_inputs_to_use", ",", "data", ")", "\n", "test_loss", "=", "self", ".", "compute_gen_losses", "(", "model_out", ",", "data", ",", "loss_type", "=", "'test'", ")", "\n", "\n", "self", ".", "log_images", "(", "model_out", ",", "data", ",", "targetLabel", ")", "\n", "return", "test_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.log_images": [[424, 459], ["trainer.TBNTrainer.logger.image_summary", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "trainer.TBNTrainer.images_to_numpy", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.logger.Logger.image_summary", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.images_to_numpy"], ["", "", "def", "log_images", "(", "self", ",", "model_out", ",", "data", ",", "targetLabel", "=", "'T_Images'", ")", ":", "\n", "        ", "src_rgb_image", "=", "data", "[", "'src_rgb_image'", "]", "\n", "tgt_rgb_image", "=", "data", "[", "'tgt_rgb_image'", "]", "[", "0", "]", "\n", "\n", "if", "self", ".", "args", ".", "use_seg3d_proxy", ":", "\n", "            ", "src_seg_image", "=", "data", "[", "'src_seg_image'", "]", "\n", "tgt_seg_image", "=", "data", "[", "'tgt_seg_image'", "]", "[", "0", "]", "\n", "\n", "gen_tgt_seg3d", "=", "model_out", "[", "2", "]", "[", "0", "]", "\n", "gen_src_seg3d", "=", "model_out", "[", "1", "]", "\n", "src_cat_images", "=", "torch", ".", "cat", "(", "(", "src_rgb_image", "[", "0", "]", ",", "\n", "torch", ".", "cat", "(", "(", "gen_src_seg3d", "[", "0", "]", ",", "gen_src_seg3d", "[", "0", "]", ",", "gen_src_seg3d", "[", "0", "]", ")", ",", "1", ")", ",", "\n", "torch", ".", "cat", "(", "(", "src_seg_image", "[", "0", "]", ",", "src_seg_image", "[", "0", "]", ",", "src_seg_image", "[", "0", "]", ")", ",", "1", ")", ")", ",", "3", ")", "\n", "for", "view_idx", "in", "range", "(", "1", ",", "self", ".", "args", ".", "num_combine_views", ")", ":", "\n", "                ", "src_cat_images", "=", "torch", ".", "cat", "(", "(", "src_cat_images", ",", "src_rgb_image", "[", "view_idx", "]", ",", "\n", "torch", ".", "cat", "(", "(", "gen_src_seg3d", "[", "view_idx", "]", ",", "gen_src_seg3d", "[", "view_idx", "]", ",", "\n", "gen_src_seg3d", "[", "view_idx", "]", ")", ",", "1", ")", ",", "\n", "torch", ".", "cat", "(", "(", "src_seg_image", "[", "view_idx", "]", ",", "src_seg_image", "[", "view_idx", "]", ",", "\n", "src_seg_image", "[", "view_idx", "]", ")", ",", "1", ")", ")", ",", "3", ")", "\n", "\n", "", "tgt_seg_rgb", "=", "torch", ".", "cat", "(", "(", "tgt_seg_image", ",", "tgt_seg_image", ",", "tgt_seg_image", ")", ",", "1", ")", "\n", "gen_tgt_seg3d_rgb", "=", "torch", ".", "cat", "(", "(", "gen_tgt_seg3d", ",", "gen_tgt_seg3d", ",", "gen_tgt_seg3d", ")", ",", "1", ")", "\n", "cat_images", "=", "torch", ".", "cat", "(", "(", "src_cat_images", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", ",", "\n", "model_out", "[", "0", "]", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", ",", "tgt_rgb_image", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", ",", "\n", "gen_tgt_seg3d_rgb", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", ",", "\n", "tgt_seg_rgb", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", ")", ",", "3", ")", "\n", "", "else", ":", "\n", "            ", "src_cat_images", "=", "src_rgb_image", "[", "0", "]", "\n", "for", "view_idx", "in", "range", "(", "1", ",", "self", ".", "args", ".", "num_combine_views", ")", ":", "\n", "                ", "src_cat_images", "=", "torch", ".", "cat", "(", "(", "src_cat_images", ",", "src_rgb_image", "[", "view_idx", "]", ")", ",", "3", ")", "\n", "\n", "", "cat_images", "=", "torch", ".", "cat", "(", "(", "src_cat_images", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", ",", "\n", "model_out", "[", "0", "]", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", ",", "tgt_rgb_image", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", ")", ",", "3", ")", "\n", "\n", "", "self", ".", "logger", ".", "image_summary", "(", "targetLabel", ",", "self", ".", "images_to_numpy", "(", "cat_images", ")", ",", "self", ".", "batch_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.run_eval": [[460, 598], ["trainer.TBNTrainer.reset_logs", "trainer.TBNTrainer.model.eval", "print", "trainer.TBNTrainer.discriminator.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "time.time", "enumerate", "float", "trainer.TBNTrainer.logs[].item", "trainer.TBNTrainer.get_data", "trainer.TBNTrainer.model", "trainer.TBNTrainer.compute_gen_losses", "trainer.TBNTrainer.logs[].item", "print", "range", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "time.time", "print", "print", "trainer.TBNTrainer.model", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "scipy.misc.imsave", "scipy.misc.imsave", "scipy.misc.imsave", "scipy.misc.imsave", "round", "str", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "class_final_bottleneck.cpu().detach().numpy", "numpy.swapaxes.squeeze", "numpy.flip", "numpy.swapaxes", "scipy.savemat", "scipy.savemat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "numpy.squeeze", "str", "trainer.TBNTrainer.logs[].item", "trainer.TBNTrainer.logs[].item", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "numpy.transpose", "trainer.TBNTrainer.logs[].item", "str", "class_final_bottleneck.cpu().detach", "str", "outputFrame.cpu().detach().numpy", "str", "str", "class_final_bottleneck.cpu", "outputFrame.cpu().detach", "outputFrame.cpu"], "methods", ["home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.reset_logs", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.get_data", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.compute_gen_losses"], ["", "def", "run_eval", "(", "self", ",", "num_requested_inputs_to_use", "=", "0", ")", ":", "\n", "        ", "self", ".", "eval_batch_num", "+=", "1", "\n", "self", ".", "reset_logs", "(", "'eval'", ")", "\n", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "if", "self", ".", "args", ".", "use_gan", ":", "\n", "            ", "self", ".", "discriminator", ".", "eval", "(", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "test_loss_item", "=", "1e19", "\n", "\n", "running_loss", "=", "0.0", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "test_loss_sum", "=", "0.0", "\n", "\n", "num_inputs_to_use", "=", "self", ".", "num_eval_combine_views", "if", "0", "==", "num_requested_inputs_to_use", "else", "num_requested_inputs_to_use", "\n", "\n", "for", "(", "i", ",", "test_data", ")", "in", "enumerate", "(", "self", ".", "file_test_loader", ",", "0", ")", ":", "\n", "                ", "if", "(", "0", ")", "==", "(", "(", "i", "+", "1", ")", "%", "self", ".", "args", ".", "log_interval", ")", ":", "\n", "                    ", "print", "(", "'start '", "+", "str", "(", "i", "+", "1", ")", "+", "' of '", "+", "str", "(", "self", ".", "n_file_test_img", "/", "self", ".", "args", ".", "batch_size", ")", ")", "\n", "\n", "", "crnt_batch_size", "=", "test_data", "[", "'tgt_rgb_image'", "]", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "\n", "input_range", "=", "1", "if", "self", ".", "args", ".", "use_synthetic_input", "else", "num_inputs_to_use", "\n", "\n", "data", "=", "self", ".", "get_data", "(", "test_data", ",", "num_inputs_to_use", ",", "self", ".", "args", ".", "use_synthetic_input", ")", "\n", "\n", "if", "self", ".", "args", ".", "use_synthetic_input", ":", "\n", "                    ", "for", "input_idx", "in", "range", "(", "1", ",", "num_inputs_to_use", ")", ":", "\n", "# assign pose for image to be generated", "\n", "                        ", "data", "[", "'tgt_azim_transform_mode'", "]", "[", "0", "]", "=", "data", "[", "'src_azim_transform_mode'", "]", "[", "input_idx", "]", "\n", "data", "[", "'tgt_elev_transform_mode'", "]", "[", "0", "]", "=", "data", "[", "'src_elev_transform_mode'", "]", "[", "input_idx", "]", "\n", "\n", "model_out", "=", "self", ".", "model", "(", "1", ",", "data", ")", "\n", "\n", "data", "[", "'src_rgb_image'", "]", "[", "input_idx", "]", "=", "model_out", "[", "0", "]", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", "\n", "data", "[", "'src_seg_image'", "]", "[", "input_idx", "]", "=", "model_out", "[", "2", "]", "[", "0", "]", "\n", "\n", "", "data", "[", "'tgt_azim_transform_mode'", "]", "[", "0", "]", "=", "torch", ".", "zeros", "(", "data", "[", "'src_azim_transform_mode'", "]", "[", "0", "]", ".", "shape", ")", ".", "type", "(", "\n", "'torch.DoubleTensor'", ")", "\n", "data", "[", "'tgt_elev_transform_mode'", "]", "[", "0", "]", "=", "torch", ".", "zeros", "(", "data", "[", "'src_elev_transform_mode'", "]", "[", "0", "]", ".", "shape", ")", ".", "type", "(", "\n", "'torch.DoubleTensor'", ")", "\n", "\n", "", "model_out", "=", "self", ".", "model", "(", "num_inputs_to_use", ",", "data", ")", "\n", "eval_loss", "=", "self", ".", "compute_gen_losses", "(", "model_out", ",", "data", ",", "loss_type", "=", "'eval'", ")", "\n", "\n", "if", "self", ".", "args", ".", "print_output", ":", "\n", "                    ", "if", "self", ".", "args", ".", "use_seg3d_proxy", ":", "\n", "                        ", "gen_tgt_occupancy", "=", "model_out", "[", "4", "]", "\n", "for", "idx", "in", "range", "(", "gen_tgt_occupancy", ".", "shape", "[", "0", "]", ")", ":", "\n", "                            ", "class_final_bottleneck", "=", "gen_tgt_occupancy", "[", "idx", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "class_mat", "=", "{", "}", "\n", "np_class_final_bottleneck", "=", "class_final_bottleneck", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "np_class_final_bottleneck", "=", "np_class_final_bottleneck", ".", "squeeze", "(", "0", ")", "\n", "np_class_final_bottleneck", "=", "np", ".", "flip", "(", "np_class_final_bottleneck", ",", "axis", "=", "-", "2", ")", "\n", "np_class_final_bottleneck", "=", "np", ".", "swapaxes", "(", "np_class_final_bottleneck", ",", "1", ",", "2", ")", "\n", "\n", "class_mat", "[", "'volume'", "]", "=", "np_class_final_bottleneck", "\n", "\n", "sio", ".", "savemat", "(", "self", ".", "args", ".", "img_out_dir", "+", "'/'", "+", "str", "(", "self", ".", "tensor_write_count", "+", "1", ")", "+", "'.mat'", ",", "class_mat", ")", "\n", "\n", "self", ".", "tensor_write_count", "+=", "1", "\n", "\n", "", "", "src_rgb_image", "=", "data", "[", "'src_rgb_image'", "]", "\n", "src_seg_image", "=", "data", "[", "'src_seg_image'", "]", "\n", "\n", "tgt_rgb_image", "=", "data", "[", "'tgt_rgb_image'", "]", "[", "0", "]", "\n", "tgt_seg_image", "=", "data", "[", "'tgt_seg_image'", "]", "[", "0", "]", "\n", "\n", "src_cat_images", "=", "torch", ".", "cat", "(", "(", "src_rgb_image", "[", "0", "]", ",", "torch", ".", "cat", "(", "(", "src_seg_image", "[", "0", "]", ",", "src_seg_image", "[", "0", "]", ",", "src_seg_image", "[", "0", "]", ")", ",", "1", ")", ")", ",", "\n", "3", ")", "\n", "for", "view_idx", "in", "range", "(", "1", ",", "num_inputs_to_use", ")", ":", "\n", "                        ", "src_cat_images", "=", "torch", ".", "cat", "(", "(", "src_cat_images", ",", "src_rgb_image", "[", "view_idx", "]", ",", "\n", "torch", ".", "cat", "(", "(", "src_seg_image", "[", "view_idx", "]", ",", "src_seg_image", "[", "view_idx", "]", ",", "src_seg_image", "[", "view_idx", "]", ")", ",", "\n", "1", ")", ")", ",", "3", ")", "\n", "\n", "", "tgt_seg_rgb", "=", "torch", ".", "cat", "(", "(", "tgt_seg_image", ",", "tgt_seg_image", ",", "tgt_seg_image", ")", ",", "1", ")", "\n", "gen_tgt_seg3d", "=", "model_out", "[", "2", "]", "[", "0", "]", "\n", "gen_tgt_seg3d_rgb", "=", "torch", ".", "cat", "(", "(", "gen_tgt_seg3d", ",", "gen_tgt_seg3d", ",", "gen_tgt_seg3d", ")", ",", "1", ")", "\n", "cat_images", "=", "torch", ".", "cat", "(", "(", "src_cat_images", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", ",", "\n", "model_out", "[", "0", "]", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", ",", "tgt_rgb_image", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", ",", "\n", "gen_tgt_seg3d_rgb", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", ",", "tgt_seg_rgb", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", ")", ",", "3", ")", "\n", "\n", "for", "outImgIdx", "in", "range", "(", "crnt_batch_size", ")", ":", "\n", "                        ", "outputFrame", "=", "cat_images", "[", "outImgIdx", ",", ":", ",", ":", ",", ":", "]", "\n", "out_str", "=", "\"%05d\"", "%", "(", "self", ".", "args", ".", "batch_size", "*", "self", ".", "out_batch_idx", "+", "outImgIdx", ",", ")", "\n", "scipy", ".", "misc", ".", "imsave", "(", "self", ".", "args", ".", "img_out_dir", "+", "'/'", "+", "str", "(", "out_str", ")", "+", "'_out.png'", ",", "\n", "np", ".", "squeeze", "(", "np", ".", "transpose", "(", "outputFrame", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "\n", "(", "1", ",", "2", ",", "0", ")", ")", ")", ")", "\n", "\n", "", "self", ".", "out_batch_idx", "=", "self", ".", "out_batch_idx", "+", "1", "\n", "\n", "", "if", "0", "==", "(", "i", "+", "1", ")", "%", "self", ".", "args", ".", "log_interval", ":", "\n", "                    ", "crnt_time", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'end '", "+", "str", "(", "i", "+", "1", ")", "+", "' of '", "+", "str", "(", "self", ".", "n_file_test_img", "/", "self", ".", "args", ".", "batch_size", ")", ")", "\n", "print", "(", "\n", "'time:'", ",", "\n", "round", "(", "crnt_time", "-", "start_time", ",", "3", ")", ",", "\n", "'s'", ",", "\n", "'SSIM Loss:'", ",", "\n", "self", ".", "logs", "[", "'l_eval_gen_raw_ssim'", "]", ".", "item", "(", ")", "/", "(", "i", "+", "1", ")", ",", "\n", "'L1:'", ",", "\n", "self", ".", "logs", "[", "'l_eval_gen_raw_l1'", "]", ".", "item", "(", ")", "/", "(", "i", "+", "1", ")", ",", "\n", "'Final SSIM:'", ",", "\n", "1", "-", "self", ".", "logs", "[", "'l_eval_gen_raw_ssim'", "]", ".", "item", "(", ")", "/", "(", "i", "+", "1", ")", ",", "\n", ")", "\n", "start_time", "=", "crnt_time", "\n", "test_loss_sum", "=", "0.0", "\n", "\n", "", "", "", "final_scale_factor", "=", "float", "(", "self", ".", "n_file_test_img", ")", "/", "self", ".", "args", ".", "batch_size", "\n", "\n", "self", ".", "logs", "[", "'l_eval_gen'", "]", "/=", "final_scale_factor", "\n", "self", ".", "logs", "[", "'l_eval_gen_gan'", "]", "/=", "final_scale_factor", "\n", "self", ".", "logs", "[", "'l_eval_gen_l1'", "]", "/=", "final_scale_factor", "\n", "self", ".", "logs", "[", "'l_eval_gen_raw_l1'", "]", "/=", "final_scale_factor", "\n", "self", ".", "logs", "[", "'l_eval_gen_raw_ssim'", "]", "/=", "final_scale_factor", "\n", "self", ".", "logs", "[", "'l_eval_gen_ssim'", "]", "/=", "final_scale_factor", "\n", "self", ".", "logs", "[", "'l_eval_gen_seg3d'", "]", "/=", "final_scale_factor", "\n", "self", ".", "logs", "[", "'l_eval_gen_vgg'", "]", "/=", "final_scale_factor", "\n", "self", ".", "logs", "[", "'l_eval_gen_running'", "]", "/=", "final_scale_factor", "\n", "\n", "eval_gen_vgg", "=", "self", ".", "logs", "[", "'l_eval_gen_vgg'", "]", "/", "self", ".", "args", ".", "w_gen_vgg", "if", "0.0", "<", "self", ".", "args", ".", "w_gen_vgg", "else", "0.0", "\n", "\n", "print", "(", "\n", "'Eval tuples test:'", ",", "\n", "'SSIM:'", ",", "\n", "1.0", "-", "self", ".", "logs", "[", "'l_eval_gen_raw_ssim'", "]", ".", "item", "(", ")", ",", "\n", "'L1:'", ",", "\n", "self", ".", "logs", "[", "'l_eval_gen_raw_l1'", "]", ".", "item", "(", ")", ",", "\n", ")", "\n", "\n", "running_loss", "/=", "self", ".", "n_file_test_img", "/", "self", ".", "args", ".", "batch_size", "\n", "\n", "return", "running_loss", ",", "(", "1.0", "-", "self", ".", "logs", "[", "'l_eval_gen_raw_ssim'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.init_logs": [[599, 631], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "init_logs", "(", ")", ":", "\n", "        ", "return", "{", "'l_train_disc'", ":", "0.0", ",", "\n", "'l_train_disc_gan'", ":", "0.0", ",", "\n", "'l_train_disc_running'", ":", "0.0", ",", "\n", "'l_train_gen'", ":", "0.0", ",", "\n", "'l_train_gen_gan'", ":", "0.0", ",", "\n", "'l_train_gen_l1'", ":", "0.0", ",", "\n", "'l_train_gen_raw_l1'", ":", "0.0", ",", "\n", "'l_train_gen_raw_ssim'", ":", "0.0", ",", "\n", "'l_train_gen_ssim'", ":", "0.0", ",", "\n", "'l_train_gen_seg3d'", ":", "0.0", ",", "\n", "'l_train_gen_vgg'", ":", "0.0", ",", "\n", "'l_train_gen_running'", ":", "0.0", ",", "\n", "'l_test_gen'", ":", "0.0", ",", "\n", "'l_test_gen_gan'", ":", "0.0", ",", "\n", "'l_test_gen_l1'", ":", "0.0", ",", "\n", "'l_test_gen_ssim'", ":", "0.0", ",", "\n", "'l_test_gen_raw_l1'", ":", "0.0", ",", "\n", "'l_test_gen_raw_ssim'", ":", "0.0", ",", "\n", "'l_test_gen_seg3d'", ":", "0.0", ",", "\n", "'l_test_gen_vgg'", ":", "0.0", ",", "\n", "'l_test_gen_running'", ":", "0.0", ",", "\n", "'l_eval_gen'", ":", "0.0", ",", "\n", "'l_eval_gen_gan'", ":", "0.0", ",", "\n", "'l_eval_gen_l1'", ":", "0.0", ",", "\n", "'l_eval_gen_raw_l1'", ":", "0.0", ",", "\n", "'l_eval_gen_raw_ssim'", ":", "0.0", ",", "\n", "'l_eval_gen_ssim'", ":", "0.0", ",", "\n", "'l_eval_gen_seg3d'", ":", "0.0", ",", "\n", "'l_eval_gen_vgg'", ":", "0.0", ",", "\n", "'l_eval_gen_running'", ":", "0.0", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.reset_logs": [[632, 646], ["None"], "methods", ["None"], ["", "def", "reset_logs", "(", "self", ",", "log_type", "=", "'train'", ")", ":", "\n", "        ", "self", ".", "logs", "[", "'l_'", "+", "log_type", "+", "'_gen'", "]", "=", "0.0", "\n", "self", ".", "logs", "[", "'l_'", "+", "log_type", "+", "'_gen_gan'", "]", "=", "0.0", "\n", "self", ".", "logs", "[", "'l_'", "+", "log_type", "+", "'_gen_l1'", "]", "=", "0.0", "\n", "self", ".", "logs", "[", "'l_'", "+", "log_type", "+", "'_gen_raw_l1'", "]", "=", "0.0", "\n", "self", ".", "logs", "[", "'l_'", "+", "log_type", "+", "'_gen_raw_ssim'", "]", "=", "0.0", "\n", "self", ".", "logs", "[", "'l_'", "+", "log_type", "+", "'_gen_ssim'", "]", "=", "0.0", "\n", "self", ".", "logs", "[", "'l_'", "+", "log_type", "+", "'_gen_seg3d'", "]", "=", "0.0", "\n", "self", ".", "logs", "[", "'l_'", "+", "log_type", "+", "'_gen_vgg'", "]", "=", "0.0", "\n", "self", ".", "logs", "[", "'l_'", "+", "log_type", "+", "'_gen_running'", "]", "=", "0.0", "\n", "if", "'train'", "==", "log_type", ":", "\n", "            ", "self", ".", "logs", "[", "'l_'", "+", "log_type", "+", "'_disc'", "]", "=", "0.0", "\n", "self", ".", "logs", "[", "'l_'", "+", "log_type", "+", "'_disc_gan'", "]", "=", "0.0", "\n", "self", ".", "logs", "[", "'l_'", "+", "log_type", "+", "'_disc_running'", "]", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.compute_gen_losses": [[647, 755], ["trainer.TBNTrainer.loss_function", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "l_gen_l1_loss.item", "l_gen_ssim_loss.item", "l_gen_seg3d_loss.item", "l_gen_vgg_loss.item", "raw_l1_loss.mean", "loss.item", "upsample_model_out.append", "upsample_model_out.append", "len", "range", "raw_vgg_loss.mean", "raw_l1_loss.mean", "ssim_loss.mean", "ssim_loss.mean", "torch.zeros().to.mean", "torch.zeros().to.mean", "torch.zeros().to.mean", "trainer.TBNTrainer.discriminator", "trainer.TBNTrainer.ones_like", "l_gen_gan_loss.item", "loss.item", "trainer.TBNTrainer.transform", "upsample_model_out.append", "upsample_model_out.append", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "nonzero_ssim_loss.mean", "trainer.TBNTrainer.gan_criterion().mean", "loss.item", "trainer.TBNTrainer.seg_criterion", "trainer.TBNTrainer.seg_criterion", "trainer.TBNTrainer.transform", "trainer.TBNTrainer.seg_criterion", "trainer.TBNTrainer.seg_criterion", "loss.item", "ValueError", "trainer.TBNTrainer.transform", "trainer.TBNTrainer.gan_criterion"], "methods", ["home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.ones_like"], ["", "", "def", "compute_gen_losses", "(", "self", ",", "model_out", ",", "data", ",", "loss_type", "=", "'train'", ")", ":", "\n", "        ", "loss", "=", "0.0", "\n", "\n", "tgt_rgb_image", "=", "data", "[", "'tgt_rgb_image'", "]", "[", "0", "]", "\n", "tgt_seg_image", "=", "data", "[", "'tgt_seg_image'", "]", "[", "0", "]", "\n", "if", "self", ".", "args", ".", "upsample_output", ":", "\n", "            ", "orig_tgt_rgb_image", "=", "data", "[", "'orig_tgt_rgb_image'", "]", "[", "0", "]", "\n", "orig_tgt_seg_image", "=", "data", "[", "'orig_tgt_seg_image'", "]", "[", "0", "]", "\n", "\n", "", "src_seg_image", "=", "data", "[", "'src_seg_image'", "]", "\n", "\n", "if", "self", ".", "args", ".", "upsample_output", ":", "\n", "            ", "upsample_model_out", "=", "[", "]", "\n", "upsample_model_out", ".", "append", "(", "self", ".", "transform", "(", "model_out", "[", "0", "]", ")", ")", "\n", "upsample_model_out", ".", "append", "(", "model_out", "[", "1", "]", ")", "\n", "if", "self", ".", "args", ".", "use_seg3d_proxy", ":", "\n", "                ", "upsample_model_out", ".", "append", "(", "[", "self", ".", "transform", "(", "model_out", "[", "2", "]", "[", "0", "]", ")", "]", ")", "\n", "", "else", ":", "\n", "                ", "upsample_model_out", ".", "append", "(", "model_out", "[", "2", "]", ")", "\n", "\n", "", "loss_gen", "=", "upsample_model_out", "\n", "loss_tgt_rgb_image", "=", "orig_tgt_rgb_image", "\n", "loss_tgt_seg_image", "=", "orig_tgt_seg_image", "\n", "\n", "gen_src_seg3d", "=", "upsample_model_out", "[", "1", "]", "\n", "gen_tgt_seg3d", "=", "upsample_model_out", "[", "2", "]", "\n", "", "else", ":", "\n", "            ", "loss_gen", "=", "model_out", "\n", "loss_tgt_rgb_image", "=", "tgt_rgb_image", "\n", "loss_tgt_seg_image", "=", "tgt_seg_image", "\n", "\n", "gen_src_seg3d", "=", "model_out", "[", "1", "]", "\n", "gen_tgt_seg3d", "=", "model_out", "[", "2", "]", "\n", "\n", "", "raw_vgg_loss", ",", "raw_l1_loss", ",", "raw_ssim_loss", "=", "self", ".", "loss_function", "(", "loss_gen", "[", "0", "]", ",", "loss_tgt_rgb_image", ")", "\n", "\n", "raw_seg3d_loss", "=", "torch", ".", "zeros", "(", "raw_l1_loss", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "self", ".", "args", ".", "use_seg3d_proxy", ":", "\n", "            ", "num_src_imgs", "=", "len", "(", "gen_src_seg3d", ")", "\n", "gen_src_seg", "=", "model_out", "[", "3", "]", "\n", "for", "view_idx", "in", "range", "(", "0", ",", "num_src_imgs", ")", ":", "\n", "                ", "raw_seg3d_loss", "+=", "0.5", "*", "self", ".", "seg_criterion", "(", "gen_src_seg3d", "[", "view_idx", "]", ",", "src_seg_image", "[", "view_idx", "]", ")", "\n", "raw_seg3d_loss", "+=", "0.5", "*", "self", ".", "seg_criterion", "(", "gen_src_seg", "[", "view_idx", "]", ",", "src_seg_image", "[", "view_idx", "]", ")", "\n", "", "if", "0", "<", "len", "(", "gen_tgt_seg3d", ")", ":", "\n", "                ", "if", "self", ".", "args", ".", "upsample_output", ":", "\n", "                    ", "gen_tgt_seg", "=", "self", ".", "transform", "(", "model_out", "[", "0", "]", "[", ":", ",", "3", ":", "4", ",", ":", ",", ":", "]", ")", "\n", "", "else", ":", "\n", "                    ", "gen_tgt_seg", "=", "model_out", "[", "0", "]", "[", ":", ",", "3", ":", "4", ",", ":", ",", ":", "]", "\n", "", "raw_seg3d_loss", "+=", "0.5", "*", "self", ".", "seg_criterion", "(", "gen_tgt_seg3d", "[", "0", "]", ",", "loss_tgt_seg_image", ")", "\n", "raw_seg3d_loss", "+=", "0.5", "*", "self", ".", "seg_criterion", "(", "gen_tgt_seg", ",", "loss_tgt_seg_image", ")", "\n", "num_src_imgs", "+=", "1", "\n", "", "raw_seg3d_loss", "/=", "num_src_imgs", "\n", "\n", "", "l_gen_vgg_loss", "=", "self", ".", "args", ".", "w_gen_vgg", "*", "raw_vgg_loss", ".", "mean", "(", ")", "\n", "loss", "+=", "l_gen_vgg_loss", "\n", "l_gen_l1_loss", "=", "self", ".", "args", ".", "w_gen_l1", "*", "raw_l1_loss", ".", "mean", "(", ")", "\n", "loss", "+=", "l_gen_l1_loss", "\n", "\n", "if", "self", ".", "args", ".", "normalize_ssim_loss", ":", "\n", "            ", "nonzero_ssim_loss", "=", "(", "raw_ssim_loss", "+", "1.0", ")", "\n", "normalized_ssim_loss", "=", "0.5", "*", "nonzero_ssim_loss", "\n", "l_log_ssim_loss_val", "=", "(", "2.0", "-", "nonzero_ssim_loss", ".", "mean", "(", ")", ")", "\n", "ssim_loss", "=", "(", "2.0", "-", "nonzero_ssim_loss", ")", "\n", "", "else", ":", "\n", "            ", "ssim_loss", "=", "raw_ssim_loss", "\n", "ssim_loss", "=", "(", "1.0", "-", "ssim_loss", ")", "\n", "l_log_ssim_loss_val", "=", "ssim_loss", ".", "mean", "(", ")", "\n", "\n", "", "l_gen_ssim_loss", "=", "self", ".", "args", ".", "w_gen_ssim", "*", "ssim_loss", ".", "mean", "(", ")", "\n", "if", "not", "self", ".", "args", ".", "use_amp", ":", "\n", "            ", "loss", "+=", "l_gen_ssim_loss", "\n", "\n", "", "l_gen_seg3d_loss", "=", "self", ".", "args", ".", "w_gen_seg3d", "*", "raw_seg3d_loss", ".", "mean", "(", ")", "\n", "loss", "+=", "l_gen_seg3d_loss", "\n", "\n", "if", "self", ".", "args", ".", "use_gan", "and", "0.0", "<", "self", ".", "args", ".", "w_gen_gan_label", ":", "\n", "            ", "fake_labels", ",", "_", "=", "self", ".", "discriminator", "(", "model_out", "[", "0", "]", ")", "\n", "\n", "self", ".", "ones", "=", "self", ".", "ones_like", "(", "fake_labels", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "l_gen_gan_loss", "=", "self", ".", "args", ".", "w_gen_gan_label", "*", "self", ".", "gan_criterion", "(", "fake_labels", ",", "self", ".", "ones", ")", ".", "mean", "(", ")", "\n", "loss", "+=", "l_gen_gan_loss", "\n", "\n", "self", ".", "logs", "[", "'l_'", "+", "loss_type", "+", "'_gen_gan'", "]", "+=", "l_gen_gan_loss", ".", "item", "(", ")", "\n", "", "self", ".", "logs", "[", "'l_'", "+", "loss_type", "+", "'_gen_l1'", "]", "+=", "l_gen_l1_loss", ".", "item", "(", ")", "\n", "self", ".", "logs", "[", "'l_'", "+", "loss_type", "+", "'_gen_ssim'", "]", "+=", "l_gen_ssim_loss", ".", "item", "(", ")", "\n", "self", ".", "logs", "[", "'l_'", "+", "loss_type", "+", "'_gen_seg3d'", "]", "+=", "l_gen_seg3d_loss", ".", "item", "(", ")", "\n", "self", ".", "logs", "[", "'l_'", "+", "loss_type", "+", "'_gen_vgg'", "]", "+=", "l_gen_vgg_loss", ".", "item", "(", ")", "\n", "\n", "self", ".", "logs", "[", "'l_'", "+", "loss_type", "+", "'_gen_raw_l1'", "]", "+=", "raw_l1_loss", ".", "mean", "(", ")", "\n", "self", ".", "logs", "[", "'l_'", "+", "loss_type", "+", "'_gen_raw_ssim'", "]", "+=", "l_log_ssim_loss_val", "\n", "\n", "self", ".", "logs", "[", "'l_'", "+", "loss_type", "+", "'_gen'", "]", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "if", "'train'", "==", "loss_type", ":", "\n", "            ", "self", ".", "total_loss_sum", "+=", "loss", ".", "item", "(", ")", "\n", "running_loss", "=", "self", ".", "total_loss_sum", "/", "self", ".", "batch_num", "\n", "", "elif", "'test'", "==", "loss_type", ":", "\n", "            ", "self", ".", "total_test_loss_sum", "+=", "loss", ".", "item", "(", ")", "\n", "running_loss", "=", "self", ".", "total_test_loss_sum", "/", "self", ".", "test_batch_num", "\n", "", "elif", "'eval'", "==", "loss_type", ":", "\n", "            ", "self", ".", "total_eval_loss_sum", "+=", "loss", ".", "item", "(", ")", "\n", "running_loss", "=", "self", ".", "total_eval_loss_sum", "/", "self", ".", "eval_batch_num", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "loss_type", ")", "\n", "\n", "", "self", ".", "logs", "[", "'l_'", "+", "loss_type", "+", "'_gen_running'", "]", "+=", "running_loss", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.compute_disc_losses": [[756, 779], ["trainer.TBNTrainer.discriminator", "trainer.TBNTrainer.discriminator", "trainer.TBNTrainer.ones_like", "trainer.TBNTrainer.zeros_like", "l_disc_gan.item", "model_out[].detach", "trainer.TBNTrainer.gan_criterion", "trainer.TBNTrainer.gan_criterion"], "methods", ["home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.ones_like", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.zeros_like"], ["", "def", "compute_disc_losses", "(", "self", ",", "model_out", ",", "data", ",", "loss_type", "=", "'train'", ")", ":", "\n", "        ", "tgt_rgb_image", "=", "data", "[", "'tgt_rgb_image'", "]", "[", "0", "]", "\n", "\n", "fake_labels", ",", "_", "=", "self", ".", "discriminator", "(", "model_out", "[", "0", "]", ".", "detach", "(", ")", ")", "\n", "real_labels", ",", "_", "=", "self", ".", "discriminator", "(", "tgt_rgb_image", ")", "\n", "self", ".", "ones", "=", "self", ".", "ones_like", "(", "fake_labels", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "zeros", "=", "self", ".", "zeros_like", "(", "fake_labels", ",", "device", "=", "self", ".", "device", ",", "val", "=", "self", ".", "fake_val", ")", "\n", "\n", "l_disc_gan", "=", "self", ".", "args", ".", "w_disc_gan_label", "*", "(", "self", ".", "gan_criterion", "(", "real_labels", ",", "self", ".", "ones", ")", "+", "self", ".", "gan_criterion", "(", "fake_labels", ",", "self", ".", "zeros", ")", ")", ".", "mean", "(", ")", "\n", "\n", "l_disc_gan_item", "=", "l_disc_gan", ".", "item", "(", ")", "\n", "\n", "self", ".", "logs", "[", "'l_'", "+", "loss_type", "+", "'_disc_gan'", "]", "+=", "l_disc_gan_item", "\n", "self", ".", "logs", "[", "'l_'", "+", "loss_type", "+", "'_disc'", "]", "+=", "l_disc_gan_item", "\n", "\n", "if", "'train'", "==", "loss_type", ":", "\n", "            ", "self", ".", "total_disc_loss_sum", "+=", "l_disc_gan_item", "\n", "running_disc_loss", "=", "self", ".", "total_disc_loss_sum", "/", "self", ".", "batch_num", "\n", "self", ".", "logs", "[", "'l_'", "+", "loss_type", "+", "'_disc_running'", "]", "+=", "running_disc_loss", "\n", "\n", "", "return", "l_disc_gan", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.get_data": [[780, 809], ["range", "range", "[].to", "[].to", "[].to", "[].to", "[].to", "[].to", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "[].type", "[].type", "torch.ones().type", "torch.ones().type", "torch.ones().type", "torch.ones().type", "torch.ones().type", "torch.ones().type", "torch.ones().type", "torch.ones().type", "torch.ones().type", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "def", "get_data", "(", "self", ",", "data", ",", "num_inputs_to_use", "=", "1", ",", "use_synthetic_input", "=", "False", ",", "num_outputs_to_use", "=", "1", ")", ":", "\n", "        ", "output_data", "=", "data", "\n", "\n", "for", "output_idx", "in", "range", "(", "num_outputs_to_use", ")", ":", "\n", "            ", "output_data", "[", "'tgt_rgb_image'", "]", "[", "output_idx", "]", "=", "data", "[", "'tgt_rgb_image'", "]", "[", "output_idx", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "output_data", "[", "'tgt_seg_image'", "]", "[", "output_idx", "]", "=", "data", "[", "'tgt_seg_image'", "]", "[", "output_idx", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "self", ".", "args", ".", "upsample_output", ":", "\n", "                ", "output_data", "[", "'orig_tgt_rgb_image'", "]", "[", "output_idx", "]", "=", "data", "[", "'orig_tgt_rgb_image'", "]", "[", "output_idx", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "output_data", "[", "'orig_tgt_seg_image'", "]", "[", "output_idx", "]", "=", "data", "[", "'orig_tgt_seg_image'", "]", "[", "output_idx", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "", "", "for", "input_idx", "in", "range", "(", "num_inputs_to_use", ")", ":", "\n", "            ", "output_data", "[", "'src_rgb_image'", "]", "[", "input_idx", "]", "=", "data", "[", "'src_rgb_image'", "]", "[", "input_idx", "]", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "output_data", "[", "'src_seg_image'", "]", "[", "input_idx", "]", "=", "data", "[", "'src_seg_image'", "]", "[", "input_idx", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "if", "use_synthetic_input", "and", "not", "self", ".", "args", ".", "use_random_transforms", ":", "\n", "                ", "if", "0", "!=", "input_idx", ":", "\n", "# regularly sample positions around the central axis", "\n", "                    ", "angle", "=", "(", "input_idx", "-", "1", ")", "*", "(", "360.0", "/", "(", "num_inputs_to_use", "-", "1", ")", ")", "\n", "output_data", "[", "'src_azim_transform_mode'", "]", "[", "input_idx", "]", "=", "angle", "*", "torch", ".", "ones", "(", "\n", "data", "[", "'src_azim_transform_mode'", "]", "[", "input_idx", "]", ".", "shape", ")", ".", "type", "(", "'torch.DoubleTensor'", ")", "\n", "output_data", "[", "'src_elev_transform_mode'", "]", "[", "input_idx", "]", "=", "torch", ".", "zeros", "(", "\n", "data", "[", "'src_elev_transform_mode'", "]", "[", "input_idx", "]", ".", "shape", ")", ".", "type", "(", "'torch.DoubleTensor'", ")", "\n", "", "else", ":", "\n", "                    ", "output_data", "[", "'src_azim_transform_mode'", "]", "[", "input_idx", "]", "=", "data", "[", "'src_azim_transform_mode'", "]", "[", "input_idx", "]", ".", "type", "(", "\n", "'torch.DoubleTensor'", ")", "\n", "output_data", "[", "'src_elev_transform_mode'", "]", "[", "input_idx", "]", "=", "data", "[", "'src_elev_transform_mode'", "]", "[", "input_idx", "]", ".", "type", "(", "\n", "'torch.DoubleTensor'", ")", "\n", "\n", "", "", "", "return", "output_data", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save": [[810, 836], ["print", "isinstance", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "isinstance", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "str", "str"], "methods", ["home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save"], ["", "def", "save", "(", "self", ",", "path", ",", "save_optimizer", "=", "True", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "disc_path", "=", "path", "[", ":", "-", "4", "]", "+", "'_disc.pth'", "\n", "\n", "print", "(", "'saving '", "+", "str", "(", "path", ")", "+", "'...'", ")", "\n", "if", "isinstance", "(", "self", ".", "model", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "                ", "torch", ".", "save", "(", "self", ".", "model", ".", "module", ",", "path", ")", "\n", "", "else", ":", "\n", "                ", "torch", ".", "save", "(", "self", ".", "model", ",", "path", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "use_gan", ":", "\n", "                ", "if", "isinstance", "(", "self", ".", "discriminator", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "                    ", "torch", ".", "save", "(", "self", ".", "discriminator", ".", "module", ",", "disc_path", ")", "\n", "", "else", ":", "\n", "                    ", "torch", ".", "save", "(", "self", ".", "discriminator", ",", "disc_path", ")", "\n", "\n", "", "", "if", "save_optimizer", ":", "\n", "                ", "opt_path", "=", "path", "[", ":", "-", "4", "]", "+", "'_opt.pth'", "\n", "torch", ".", "save", "(", "self", ".", "optimizer", ",", "opt_path", ")", "\n", "\n", "if", "self", ".", "args", ".", "use_gan", ":", "\n", "                    ", "disc_opt_path", "=", "path", "[", ":", "-", "4", "]", "+", "'_disc_opt.pth'", "\n", "torch", ".", "save", "(", "self", ".", "disc_optimizer", ",", "disc_opt_path", ")", "\n", "", "", "", "except", ":", "\n", "            ", "print", "(", "'FAILED saving '", "+", "str", "(", "path", ")", "+", "' with new error, continuing...'", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.load": [[837, 882], ["os.path.exists", "isinstance", "trainer.TBNTrainer.model.to", "print", "exit", "os.path.exists", "print", "torch.Adam", "torch.Adam", "torch.Adam", "trainer.TBNTrainer.optimizer.load_state_dict", "torch.Adam", "torch.Adam", "torch.Adam", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "isinstance", "trainer.TBNTrainer.discriminator.to", "print", "trainer.TBNTrainer.model.parameters", "torch.load().state_dict", "torch.load().state_dict", "torch.load().state_dict", "torch.load().state_dict", "torch.load().state_dict", "torch.load().state_dict", "torch.load().state_dict", "torch.load().state_dict", "torch.load().state_dict", "torch.Adam", "torch.Adam", "torch.Adam", "trainer.TBNTrainer.disc_optimizer.load_state_dict", "trainer.TBNTrainer.model.parameters", "torch.Adam", "torch.Adam", "torch.Adam", "trainer.TBNTrainer.discriminator.parameters", "torch.load().state_dict", "torch.load().state_dict", "torch.load().state_dict", "torch.load().state_dict", "torch.load().state_dict", "torch.load().state_dict", "torch.load().state_dict", "torch.load().state_dict", "torch.load().state_dict", "trainer.TBNTrainer.discriminator.parameters", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load"], ["", "", "def", "load", "(", "self", ",", "path", ",", "load_disc", "=", "True", ",", "in_disc_path", "=", "''", ",", "load_optimizer", "=", "False", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "            ", "if", "'cpu'", "==", "self", ".", "args", ".", "device_mode", ":", "\n", "                ", "self", ".", "model", "=", "torch", ".", "load", "(", "path", ",", "map_location", "=", "'cpu'", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "model", "=", "torch", ".", "load", "(", "path", ")", "\n", "", "if", "isinstance", "(", "self", ".", "model", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "                ", "self", ".", "model", "=", "self", ".", "model", ".", "module", "\n", "", "self", ".", "model", ".", "tensor_type", "=", "self", ".", "tensor_type", "\n", "self", ".", "model", ".", "args", "=", "self", ".", "args", "\n", "self", ".", "model", "=", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'generator file not found: '", "+", "path", ")", "\n", "exit", "(", "-", "1", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "use_gan", "and", "load_disc", ":", "\n", "            ", "disc_path", "=", "path", "[", ":", "-", "4", "]", "+", "'_disc.pth'", "if", "''", "==", "in_disc_path", "else", "in_disc_path", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "disc_path", ")", ":", "\n", "                ", "self", ".", "discriminator", "=", "torch", ".", "load", "(", "disc_path", ")", "\n", "if", "isinstance", "(", "self", ".", "discriminator", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "                    ", "self", ".", "discriminator", "=", "self", ".", "discriminator", ".", "module", "\n", "", "self", ".", "discriminator", "=", "self", ".", "discriminator", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'discriminator file not found: '", "+", "disc_path", ")", "\n", "\n", "", "", "if", "load_optimizer", ":", "\n", "            ", "print", "(", "'loading optimizer from saved checkpoint...'", ")", "\n", "\n", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "args", ".", "learning_rate", ",", "\n", "betas", "=", "self", ".", "adam_betas", ",", "eps", "=", "self", ".", "adam_eps", ")", "\n", "opt_path", "=", "path", "[", ":", "-", "4", "]", "+", "'_opt.pth'", "\n", "self", ".", "optimizer", ".", "load_state_dict", "(", "torch", ".", "load", "(", "opt_path", ")", ".", "state_dict", "(", ")", ")", "\n", "\n", "if", "self", ".", "args", ".", "use_gan", "and", "load_disc", ":", "\n", "                ", "self", ".", "disc_optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "discriminator", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "args", ".", "disc_learning_rate", ",", "\n", "betas", "=", "self", ".", "adam_betas", ",", "eps", "=", "self", ".", "adam_eps", ")", "\n", "disc_opt_path", "=", "path", "[", ":", "-", "4", "]", "+", "'_disc_opt.pth'", "\n", "self", ".", "disc_optimizer", ".", "load_state_dict", "(", "torch", ".", "load", "(", "disc_opt_path", ")", ".", "state_dict", "(", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "args", ".", "learning_rate", ",", "\n", "betas", "=", "self", ".", "adam_betas", ",", "eps", "=", "self", ".", "adam_eps", ")", "\n", "if", "self", ".", "args", ".", "use_gan", "and", "load_disc", ":", "\n", "                ", "self", ".", "disc_optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "discriminator", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "args", ".", "disc_learning_rate", ",", "\n", "betas", "=", "self", ".", "adam_betas", ",", "eps", "=", "self", ".", "adam_eps", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.logger.Logger.__init__": [[13, 15], ["tensorflow.summary.FileWriter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "log_dir", ",", "suffix", "=", "None", ")", ":", "\n", "        ", "self", ".", "writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "log_dir", ",", "filename_suffix", "=", "suffix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.logger.Logger.scalar_summary": [[16, 19], ["tensorflow.Summary", "logger.Logger.writer.add_summary", "tensorflow.Summary.Value"], "methods", ["None"], ["", "def", "scalar_summary", "(", "self", ",", "tag", ",", "value", ",", "step", ")", ":", "\n", "        ", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "tag", ",", "simple_value", "=", "value", ")", "]", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.logger.Logger.image_summary": [[20, 42], ["enumerate", "tensorflow.Summary", "logger.Logger.writer.add_summary", "logger.Logger.writer.flush", "scipy.misc.toimage().save", "tensorflow.Summary.Image", "img_summaries.append", "StringIO", "tensorflow.Summary.Value", "BytesIO", "scipy.misc.toimage", "BytesIO.getvalue"], "methods", ["home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save"], ["", "def", "image_summary", "(", "self", ",", "tag", ",", "images", ",", "step", ")", ":", "\n", "\n", "        ", "img_summaries", "=", "[", "]", "\n", "for", "i", ",", "img", "in", "enumerate", "(", "images", ")", ":", "\n", "# Write the image to a string", "\n", "            ", "try", ":", "\n", "                ", "s", "=", "StringIO", "(", ")", "\n", "", "except", ":", "\n", "                ", "s", "=", "BytesIO", "(", ")", "\n", "", "scipy", ".", "misc", ".", "toimage", "(", "img", ")", ".", "save", "(", "s", ",", "format", "=", "\"png\"", ")", "\n", "\n", "# Create an Image object", "\n", "img_sum", "=", "tf", ".", "Summary", ".", "Image", "(", "encoded_image_string", "=", "s", ".", "getvalue", "(", ")", ",", "\n", "height", "=", "img", ".", "shape", "[", "0", "]", ",", "\n", "width", "=", "img", ".", "shape", "[", "1", "]", ")", "\n", "# Create a Summary value", "\n", "img_summaries", ".", "append", "(", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "'%s/%d'", "%", "(", "tag", ",", "i", ")", ",", "image", "=", "img_sum", ")", ")", "\n", "\n", "# Create and write Summary", "\n", "", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "img_summaries", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "self", ".", "writer", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.logger.Logger.video_summary": [[43, 76], ["list", "numpy.zeros", "numpy.concatenate", "enumerate", "tensorflow.Summary", "logger.Logger.writer.add_summary", "logger.Logger.writer.flush", "vid.transpose", "scipy.misc.toimage().save", "tensorflow.Summary.Image", "img_summaries.append", "StringIO", "numpy.squeeze", "numpy.concatenate", "tensorflow.Summary.Value", "BytesIO", "numpy.split", "scipy.misc.toimage", "BytesIO.getvalue"], "methods", ["home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.save"], ["", "def", "video_summary", "(", "self", ",", "tag", ",", "videos", ",", "step", ")", ":", "\n", "\n", "        ", "sh", "=", "list", "(", "videos", ".", "shape", ")", "\n", "sh", "[", "-", "1", "]", "=", "1", "\n", "\n", "separator", "=", "np", ".", "zeros", "(", "sh", ",", "dtype", "=", "videos", ".", "dtype", ")", "\n", "videos", "=", "np", ".", "concatenate", "(", "[", "videos", ",", "separator", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "img_summaries", "=", "[", "]", "\n", "for", "i", ",", "vid", "in", "enumerate", "(", "videos", ")", ":", "\n", "# Concat a video", "\n", "            ", "try", ":", "\n", "                ", "s", "=", "StringIO", "(", ")", "\n", "", "except", ":", "\n", "                ", "s", "=", "BytesIO", "(", ")", "\n", "\n", "", "v", "=", "vid", ".", "transpose", "(", "1", ",", "2", ",", "3", ",", "0", ")", "\n", "v", "=", "[", "np", ".", "squeeze", "(", "f", ")", "for", "f", "in", "np", ".", "split", "(", "v", ",", "v", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "]", "\n", "img", "=", "np", ".", "concatenate", "(", "v", ",", "axis", "=", "1", ")", "[", ":", ",", ":", "-", "1", ",", ":", "]", "\n", "\n", "scipy", ".", "misc", ".", "toimage", "(", "img", ")", ".", "save", "(", "s", ",", "format", "=", "\"png\"", ")", "\n", "\n", "# Create an Image object", "\n", "img_sum", "=", "tf", ".", "Summary", ".", "Image", "(", "encoded_image_string", "=", "s", ".", "getvalue", "(", ")", ",", "\n", "height", "=", "img", ".", "shape", "[", "0", "]", ",", "\n", "width", "=", "img", ".", "shape", "[", "1", "]", ")", "\n", "# Create a Summary value", "\n", "img_summaries", ".", "append", "(", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "'%s/%d'", "%", "(", "tag", ",", "i", ")", ",", "image", "=", "img_sum", ")", ")", "\n", "\n", "# Create and write Summary", "\n", "", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "img_summaries", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "self", ".", "writer", ".", "flush", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.loss.TBNLoss.__init__": [[11, 26], ["super().__init__", "pytorch_ssim.SSIM", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "loss_models.PerceptualVGG19", "loss.TBNLoss.l1_loss_module.cuda", "loss.TBNLoss.perception_loss_module.cuda"], "methods", ["home.repos.pwc.inspect_result.kyleolsz_TB-Networks.pytorch_ssim.__init__.SSIM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "tensor_type", "=", "'torch.cuda.FloatTensor'", ",", "use_vgg", "=", "True", ",", "vgg_model_path", "=", "''", ")", ":", "\n", "        ", "super", "(", "TBNLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "tensor_type", "=", "tensor_type", "\n", "self", ".", "pyssim_loss_module", "=", "pytorch_ssim", ".", "SSIM", "(", "window_size", "=", "11", ")", "\n", "self", ".", "use_vgg", "=", "use_vgg", "\n", "\n", "if", "self", ".", "use_vgg", ":", "\n", "            ", "self", ".", "perception_loss_module", "=", "PerceptualVGG19", "(", "feature_layers", "=", "[", "0", ",", "5", ",", "10", ",", "15", "]", ",", "use_normalization", "=", "False", ",", "\n", "path", "=", "vgg_model_path", ")", "\n", "if", "'torch.cuda.FloatTensor'", "==", "tensor_type", ":", "\n", "                ", "self", ".", "perception_loss_module", "=", "self", ".", "perception_loss_module", ".", "cuda", "(", ")", "\n", "\n", "", "", "self", ".", "l1_loss_module", "=", "nn", ".", "L1Loss", "(", ")", "\n", "if", "'torch.cuda.FloatTensor'", "==", "tensor_type", ":", "\n", "            ", "self", ".", "l1_loss_module", "=", "self", ".", "l1_loss_module", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.loss.TBNLoss.grayscale_transform": [[27, 29], ["None"], "methods", ["None"], ["", "", "def", "grayscale_transform", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "(", "(", "x", "[", ":", ",", "0", ",", ":", ",", ":", "]", "+", "x", "[", ":", ",", "1", ",", ":", ",", ":", "]", "+", "x", "[", ":", ",", "2", ",", ":", ",", ":", "]", ")", "/", "(", "3.0", ")", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.loss.TBNLoss.forward": [[30, 46], ["loss.TBNLoss.l1_loss_module", "loss.TBNLoss.pyssim_loss_module", "loss.TBNLoss.perception_loss_module", "loss.TBNLoss.perception_loss_module", "loss.TBNLoss.grayscale_transform", "loss.TBNLoss.grayscale_transform"], "methods", ["home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.loss.TBNLoss.grayscale_transform", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.loss.TBNLoss.grayscale_transform"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "input_rgb", "=", "input", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", "\n", "gt_tgt_rgb", "=", "target", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", "\n", "\n", "if", "self", ".", "use_vgg", ":", "\n", "            ", "_", ",", "fake_features", "=", "self", ".", "perception_loss_module", "(", "input_rgb", ")", "\n", "_", ",", "tgt_features", "=", "self", ".", "perception_loss_module", "(", "gt_tgt_rgb", ")", "\n", "vgg_tgt", "=", "(", "(", "fake_features", "-", "tgt_features", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "vgg_tgt", "=", "None", "\n", "\n", "", "l1_tgt", "=", "self", ".", "l1_loss_module", "(", "input_rgb", ",", "gt_tgt_rgb", ")", "\n", "\n", "ssim_tgt", "=", "self", ".", "pyssim_loss_module", "(", "self", ".", "grayscale_transform", "(", "input_rgb", ")", ",", "\n", "self", ".", "grayscale_transform", "(", "gt_tgt_rgb", ")", ")", "\n", "return", "vgg_tgt", ",", "l1_tgt", ",", "ssim_tgt", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.train_tbn.main": [[7, 36], ["init_args.ArgLoader.return_arguments", "os.path.dirname", "trainer.TBNTrainer", "trainer.TBNTrainer.train", "os.path.realpath", "os.path.isdir", "print", "os.path.makedirs", "trainer.TBNTrainer.load", "os.path.exists", "print", "trainer.TBNTrainer.load", "str"], "function", ["home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.init_args.ArgLoader.return_arguments", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.trainer.TBNTrainer.train", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load"], ["def", "main", "(", ")", ":", "\n", "    ", "in_config_list", "=", "'train_config.ini'", "\n", "args", "=", "ArgLoader", ".", "return_arguments", "(", "in_config_list", ")", "\n", "\n", "if", "args", ".", "test_interval", ">", "args", ".", "log_interval", ":", "\n", "        ", "args", ".", "test_interval", "=", "args", ".", "log_interval", "\n", "\n", "", "if", "False", "==", "args", ".", "use_seg3d_proxy", ":", "\n", "        ", "args", ".", "w_gen_seg3d", "=", "0.0", "\n", "\n", "", "output_dir_path", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "args", ".", "model_path", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "output_dir_path", ")", ":", "\n", "        ", "print", "(", "'creating '", "+", "str", "(", "output_dir_path", ")", ")", "\n", "os", ".", "path", ".", "makedirs", "(", "output_dir_path", ")", "\n", "\n", "", "model", "=", "TBNTrainer", "(", "args", ")", "\n", "load_disc", "=", "(", "args", ".", "use_gan", "and", "args", ".", "load_discriminator", ")", "\n", "if", "args", ".", "load_model", "and", "''", "!=", "args", ".", "input_model_file", ":", "\n", "        ", "model", ".", "load", "(", "args", ".", "input_model_file", ",", "load_disc", "=", "load_disc", ",", "load_optimizer", "=", "args", ".", "load_optimizer", ")", "\n", "\n", "# params to check if we should restart existing task", "\n", "", "if", "args", ".", "continue_train", ":", "\n", "# see if checkpoint from previous run exists", "\n", "        ", "model_name", "=", "args", ".", "model_path", "[", ":", "-", "4", "]", "+", "'_int_cpt.pth'", "\n", "if", "os", ".", "path", ".", "exists", "(", "model_name", ")", ":", "\n", "            ", "print", "(", "'continuing training, loading model and optimizer from: '", "+", "model_name", ")", "\n", "# continuing run, load models and optimizer", "\n", "model", ".", "load", "(", "model_name", ",", "load_disc", "=", "load_disc", ",", "load_optimizer", "=", "args", ".", "load_optimizer", ")", "\n", "", "", "model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.test_tbn.main": [[6, 13], ["init_args.ArgLoader.return_arguments", "tester.TBNTester", "tester.TBNTester.load", "tester.TBNTester.run_eval"], "function", ["home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.init_args.ArgLoader.return_arguments", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.run_eval"], ["def", "main", "(", ")", ":", "\n", "    ", "in_config_list", "=", "'test_config.ini'", "\n", "args", "=", "ArgLoader", ".", "return_arguments", "(", "in_config_list", ")", "\n", "\n", "model", "=", "TBNTester", "(", "args", ")", "\n", "model", ".", "load", "(", "args", ".", "input_model_file", ",", "load_disc", "=", "args", ".", "use_gan", ")", "\n", "model", ".", "run_eval", "(", "args", ".", "num_combine_views", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.init_args.ArgLoader.return_arguments": [[17, 170], ["configargparse.ArgParser", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.parse_args"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "return_arguments", "(", "in_config_list", "=", "'config.ini'", ")", ":", "\n", "        ", "parser", "=", "configargparse", ".", "ArgParser", "(", "default_config_files", "=", "[", "in_config_list", "]", ",", "\n", "description", "=", "'PyTorch Transformable Bottleneck Network.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--model_path'", ",", "type", "=", "str", ",", "default", "=", "'output/Models/output_model.pth'", ",", "\n", "help", "=", "'Path for output model file.'", ")", "\n", "parser", ".", "add_argument", "(", "'--input_height'", ",", "type", "=", "int", ",", "default", "=", "160", ",", "\n", "help", "=", "'Height of images used as input to network.'", ")", "\n", "parser", ".", "add_argument", "(", "'--input_width'", ",", "type", "=", "int", ",", "default", "=", "160", ",", "\n", "help", "=", "'Width of images used as input to network.'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "3000", ",", "\n", "help", "=", "'Number of epochs for training.'", ")", "\n", "parser", ".", "add_argument", "(", "'--learning_rate'", ",", "type", "=", "float", ",", "default", "=", "2e-4", ",", "\n", "help", "=", "'Learning rate for generator network.'", ")", "\n", "parser", ".", "add_argument", "(", "'--disc_learning_rate'", ",", "type", "=", "float", ",", "default", "=", "2e-4", ",", "\n", "help", "=", "'Learning rate for discriminator network.'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "\n", "help", "=", "'Number of images to use per batch.'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'Number of worker threads to use for loading images.'", ")", "\n", "parser", ".", "add_argument", "(", "'--device_mode'", ",", "type", "=", "str", ",", "default", "=", "'gpu'", ",", "\n", "help", "=", "'Device to use (gpu or cpu).'", ")", "\n", "parser", ".", "add_argument", "(", "'--cuda_device_num'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'Device ID of GPU to use. Use 0 when training with with --use_data_parallel enabled for multi-gpu training.'", ")", "\n", "parser", ".", "add_argument", "(", "'--print_output'", ",", "type", "=", "parse_boolean", ",", "default", "=", "False", ",", "\n", "help", "=", "'Enables printing of output images and/or occupancy volumes during evaluation.'", ")", "\n", "parser", ".", "add_argument", "(", "'--print_seg_output'", ",", "type", "=", "parse_boolean", ",", "default", "=", "False", ",", "\n", "help", "=", "'Enables printing of segmentation masks when --print_output is enabled.'", ")", "\n", "parser", ".", "add_argument", "(", "'--print_occupancy_volume'", ",", "type", "=", "parse_boolean", ",", "default", "=", "False", ",", "\n", "help", "=", "'Enables printing of occupancy volumes during evaluation when --print_output is enabled.'", ")", "\n", "parser", ".", "add_argument", "(", "'--img_out_dir'", ",", "type", "=", "str", ",", "default", "=", "'imgs.out/'", ",", "\n", "help", "=", "'Directory in which to write output images when --print_output is enabled'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_folder'", ",", "type", "=", "str", ",", "default", "=", "'logs/tboard/output_log/'", ",", "\n", "help", "=", "'Directory in which tensorboard logs are written.'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_interval'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "'Batch interval at which to print loss statistics.'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_interval'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "'Batch interval at which to run image from test set.'", ")", "\n", "parser", ".", "add_argument", "(", "'--epoch_test_interval'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'Epoch interval at which to run evaluation.'", ")", "\n", "parser", ".", "add_argument", "(", "'--vgg_model_path'", ",", "default", "=", "''", ",", "\n", "help", "=", "'Path to VGG model. If blank, model will be downloaded automatically.'", ")", "\n", "parser", ".", "add_argument", "(", "'--w_gen_l1'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "\n", "help", "=", "'Weight of L1 loss.'", ")", "\n", "parser", ".", "add_argument", "(", "'--w_gen_vgg'", ",", "type", "=", "float", ",", "default", "=", "5.0", ",", "\n", "help", "=", "'Weight of MSE loss on VGG features.'", ")", "\n", "parser", ".", "add_argument", "(", "'--w_gen_ssim'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "\n", "help", "=", "'Weight of Structural Similarity Index (SSIM) loss.'", ")", "\n", "parser", ".", "add_argument", "(", "'--w_gen_gan_label'", ",", "type", "=", "float", ",", "default", "=", "0.05", ",", "\n", "help", "=", "'Weight of adversarial loss in generator.'", ")", "\n", "parser", ".", "add_argument", "(", "'--w_gen_seg3d'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "\n", "help", "=", "'Weight of segmentation loss.'", ")", "\n", "parser", ".", "add_argument", "(", "'--w_disc_gan_label'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "\n", "help", "=", "'Weight of adversarial loss in discriminator.'", ")", "\n", "parser", ".", "add_argument", "(", "'--load_model'", ",", "type", "=", "parse_boolean", ",", "default", "=", "False", ",", "\n", "help", "=", "'If true, model specified by --input_model_file will be loaded at initialization.'", ")", "\n", "parser", ".", "add_argument", "(", "'--continue_train'", ",", "type", "=", "parse_boolean", ",", "default", "=", "True", ",", "\n", "help", "=", "'If enabled, will load latest checkpoint of the model specified by --model_path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--input_model_file'", ",", "type", "=", "str", ",", "default", "=", "'input/Models/input_model.pth'", ",", "\n", "help", "=", "'Model to load.'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_gan'", ",", "type", "=", "parse_boolean", ",", "default", "=", "True", ",", "\n", "help", "=", "'Enables use of adversarial loss.'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_amp'", ",", "type", "=", "parse_boolean", ",", "default", "=", "False", ",", "\n", "help", "=", "'Enables use of NVIDIA\\'s Apex for automatic mixed precision. Must have Apex installed: https://github.com/NVIDIA/apex.'", ")", "\n", "parser", ".", "add_argument", "(", "'--normalize_ssim_loss'", ",", "type", "=", "parse_boolean", ",", "default", "=", "True", ",", "\n", "help", "=", "'Normalizes SSIM loss to range [0.0, 2.0].'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_gan_noise'", ",", "type", "=", "parse_boolean", ",", "default", "=", "False", ",", "\n", "help", "=", "'Enables use of noise in discriminator.'", ")", "\n", "parser", ".", "add_argument", "(", "'--gan_noise_sigma'", ",", "type", "=", "float", ",", "default", "=", "0.2", ",", "\n", "help", "=", "'Sigma value for noise in discriminator when --use_gan_noise is enabled.'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_input_channels'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "\n", "help", "=", "'Number of input channels for generator. 3 for RGB, 4 for RGBA.'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_output_channels'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "\n", "help", "=", "'Number of output channels for generator. 3 for RGB, 4 for RGBA.'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_features'", ",", "type", "=", "int", ",", "default", "=", "800", ",", "\n", "help", "=", "'Number of 2D feature maps created by the 2D encoder. These maps will be reshaped to produce a 3D volume with a vector of size (num_features/vol_dim) in each cell.'", ")", "\n", "parser", ".", "add_argument", "(", "'--vol_dim'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'Resolution of volumetric bottleneck. 0 means infer volume dimension from other params.'", ")", "\n", "parser", ".", "add_argument", "(", "'--print_args'", ",", "type", "=", "parse_boolean", ",", "default", "=", "True", ",", "\n", "help", "=", "'Whether to print list of arguments at initialization.'", ")", "\n", "parser", ".", "add_argument", "(", "'--int_save_interval'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "\n", "help", "=", "'Interval at which to save a snapshot of the latest model. Will be overwritten at the specified number of iterations. Set to 0 to disable.'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint_save_interval'", ",", "type", "=", "int", ",", "default", "=", "30000", ",", "\n", "help", "=", "'A checkpoint will be saved after the specified number of iterations. Set to 0 to disable.'", ")", "\n", "parser", ".", "add_argument", "(", "'--epoch_save_interval'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'A checkpoint will be saved after the specified number of epochs. Set to 0 to disable.'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_combine_views'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "\n", "help", "=", "'Number of input views to use.'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset_name'", ",", "type", "=", "str", ",", "default", "=", "'chair'", ",", "\n", "help", "=", "'Dataset to use. Options are: chair, car, drc_chair, and drc_car.'", ")", "\n", "parser", ".", "add_argument", "(", "'--img_path'", ",", "type", "=", "str", ",", "default", "=", "'datasets/shapenet'", ",", "\n", "help", "=", "'Path to directory containing input images.'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_data_parallel'", ",", "type", "=", "parse_boolean", ",", "default", "=", "True", ",", "\n", "help", "=", "'Enables use of multi-GPU training.'", ")", "\n", "parser", ".", "add_argument", "(", "'--cull_identity_transform'", ",", "type", "=", "parse_boolean", ",", "default", "=", "True", ",", "\n", "help", "=", "'Determines whether identity transforms are included during training.'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_ls_gan'", ",", "type", "=", "parse_boolean", ",", "default", "=", "False", ",", "\n", "help", "=", "'Enables use of LS-GAN loss when --use_gan is enabled.'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_input_convs'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'Number of additional input convolutions to apply. Each additional convolution reduces the input size by a factor of 2.'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_output_deconvs'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'Number of additional output convolutions to apply. Each additional convolution increases the output size by a factor of 2.'", ")", "\n", "parser", ".", "add_argument", "(", "'--upsample_output'", ",", "type", "=", "parse_boolean", ",", "default", "=", "True", ",", "\n", "help", "=", "'Whether to upsample output to final resolution specified by --final_width and --final_height before measuring loss.'", ")", "\n", "parser", ".", "add_argument", "(", "'--final_height'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "\n", "help", "=", "'Height to which output images will be upsampled when --upsample_output is enabled.'", ")", "\n", "parser", ".", "add_argument", "(", "'--final_width'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "\n", "help", "=", "'Width to which output images will be upsampled when --upsample_output is enabled.'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_variable_num_views'", ",", "type", "=", "parse_boolean", ",", "default", "=", "False", ",", "\n", "help", "=", "'Whether to randomly choose the number of views to use during training. If disabled, --num_combine_views will be used at each iteration.'", ")", "\n", "parser", ".", "add_argument", "(", "'--gan_num_extra_layers'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "\n", "help", "=", "'Number of additional convolution layers to add to the discriminator. Additional layers reduce the total number of discrimantor output values.'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_seg3d_proxy'", ",", "type", "=", "parse_boolean", ",", "default", "=", "True", ",", "\n", "help", "=", "'Enables use of segmentation loss compared to the input image foreground masks.'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_seg3d_softmax'", ",", "type", "=", "parse_boolean", ",", "default", "=", "True", ",", "\n", "help", "=", "'Use softmax operation on output of 3D segmentation branch.'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_synthetic_input'", ",", "type", "=", "parse_boolean", ",", "default", "=", "False", ",", "\n", "help", "=", "'When enabled, one real input image will be used with additional input images synthesized by the network.'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_random_transforms'", ",", "type", "=", "parse_boolean", ",", "default", "=", "False", ",", "\n", "help", "=", "'Enables use of random poses when --use_synthetic_input is enabled. When false, regularly sampled poses around the vertical axis will be used.'", ")", "\n", "parser", ".", "add_argument", "(", "'--azim_rotation_angle_increment'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "\n", "help", "=", "'Increments between azimuth angles sampled during training/testing.'", ")", "\n", "parser", ".", "add_argument", "(", "'--elev_rotation_angle_increment'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "\n", "help", "=", "'Increments between elevation angles sampled during training/testing.'", ")", "\n", "parser", ".", "add_argument", "(", "'--crop_x_dim'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'Offset by which to crop input images in the x-dimension.'", ")", "\n", "parser", ".", "add_argument", "(", "'--crop_y_dim'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'Offset by which to crop input images in the y-dimension.'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_res_convs'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "\n", "help", "=", "'Number of residual convolution layers to use in residual blocks.'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_src_bg_noise'", ",", "type", "=", "parse_boolean", ",", "default", "=", "False", ",", "\n", "help", "=", "'Add background noise to source images.'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_tgt_bg_noise'", ",", "type", "=", "parse_boolean", ",", "default", "=", "False", ",", "\n", "help", "=", "'Add background noise to target images.'", ")", "\n", "parser", ".", "add_argument", "(", "'--load_discriminator'", ",", "type", "=", "parse_boolean", ",", "default", "=", "True", ",", "\n", "help", "=", "'Load the saved discriminator model when loading a saved model.'", ")", "\n", "parser", ".", "add_argument", "(", "'--load_optimizer'", ",", "type", "=", "parse_boolean", ",", "default", "=", "True", ",", "\n", "help", "=", "'Load the saved optimizer when loading a saved model.'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_gen_features'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "\n", "help", "=", "'Base number of generator features to use.'", ")", "\n", "parser", ".", "add_argument", "(", "'--encode_feature_scale_factor'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'Factor by which to reduce number of features used in the encoder.'", ")", "\n", "parser", ".", "add_argument", "(", "'--decode_feature_scale_factor'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'Factor by which to reduce number of features used in the decoder.'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_elev_transform'", ",", "type", "=", "parse_boolean", ",", "default", "=", "True", ",", "\n", "help", "=", "'Enable elevation variation in input and output images.'", ")", "\n", "parser", ".", "add_argument", "(", "'--elev_transform_threshold'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "\n", "help", "=", "'Probability of using variable elevations in input and output images.'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "args", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.init_args.parse_boolean": [[4, 13], ["b[].lower", "ValueError", "len", "ValueError"], "function", ["None"], ["def", "parse_boolean", "(", "b", ")", ":", "\n", "    ", "if", "len", "(", "b", ")", "<", "1", ":", "\n", "        ", "raise", "ValueError", "(", "'Cannot parse empty string into boolean.'", ")", "\n", "", "b", "=", "b", "[", "0", "]", ".", "lower", "(", ")", "\n", "if", "b", "==", "'t'", "or", "b", "==", "'y'", "or", "b", "==", "'1'", ":", "\n", "        ", "return", "True", "\n", "", "if", "b", "==", "'f'", "or", "b", "==", "'n'", "or", "b", "==", "'0'", ":", "\n", "        ", "return", "False", "\n", "", "raise", "ValueError", "(", "'Cannot parse string into boolean.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.volume_sampler.apply_volume_transform": [[6, 106], ["input_volume.size", "input_volume.permute().contiguous().view", "torch.linspace().repeat().type", "torch.linspace().repeat().permute().type", "torch.linspace().repeat().permute().type", "torch.clamp.contiguous().view().repeat", "torch.clamp.contiguous().view().repeat", "torch.clamp.contiguous().view().repeat", "torch.clamp", "torch.clamp", "torch.clamp", "torch.floor", "torch.floor", "torch.floor", "x1.clamp.clamp", "y1.clamp.clamp", "z1.clamp.clamp", "base.view().repeat().view.view().repeat().view", "input_volume.permute().contiguous().view.gather", "input_volume.permute().contiguous().view.gather", "input_volume.permute().contiguous().view.gather", "input_volume.permute().contiguous().view.gather", "input_volume.permute().contiguous().view.gather", "input_volume.permute().contiguous().view.gather", "input_volume.permute().contiguous().view.gather", "input_volume.permute().contiguous().view.gather", "output.view().permute", "x_offset.contiguous().view", "y_offset.contiguous().view", "z_offset.contiguous().view", "torch.arange().type", "idx_lun.repeat().long", "idx_luf.repeat().long", "idx_run.repeat().long", "idx_ruf.repeat().long", "idx_ldn.repeat().long", "idx_ldf.repeat().long", "idx_rdn.repeat().long", "idx_rdf.repeat().long", "input_volume.permute().contiguous", "torch.linspace().repeat", "torch.linspace().repeat().permute", "torch.linspace().repeat().permute", "torch.clamp.contiguous().view", "torch.clamp.contiguous().view", "torch.clamp.contiguous().view", "base.view().repeat().view.view().repeat", "output.view", "x_offset.contiguous", "y_offset.contiguous", "z_offset.contiguous", "torch.arange", "idx_lun.repeat", "idx_luf.repeat", "idx_run.repeat", "idx_ruf.repeat", "idx_ldn.repeat", "idx_ldf.repeat", "idx_rdn.repeat", "idx_rdf.repeat", "input_volume.permute", "torch.linspace", "torch.linspace().repeat", "torch.linspace().repeat", "torch.clamp.contiguous", "torch.clamp.contiguous", "torch.clamp.contiguous", "base.view().repeat().view.view", "torch.linspace", "torch.linspace"], "function", ["None"], ["def", "apply_volume_transform", "(", "input_volume", ",", "x_offset", ",", "y_offset", ",", "z_offset", ",", "\n", "tensor_type", "=", "'torch.cuda.FloatTensor'", ")", ":", "\n", "    ", "num_batch", ",", "num_channels", ",", "depth", ",", "height", ",", "width", "=", "input_volume", ".", "size", "(", ")", "\n", "\n", "im_flat", "=", "input_volume", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ",", "4", ")", ".", "contiguous", "(", ")", ".", "view", "(", "num_channels", ",", "-", "1", ")", "\n", "\n", "x", "=", "torch", ".", "linspace", "(", "0", ",", "width", "-", "1", ",", "width", ")", ".", "repeat", "(", "depth", ",", "height", ",", "1", ")", ".", "type", "(", "tensor_type", ")", "\n", "y", "=", "torch", ".", "linspace", "(", "0", ",", "height", "-", "1", ",", "height", ")", ".", "repeat", "(", "depth", ",", "width", ",", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "type", "(", "tensor_type", ")", "\n", "z", "=", "torch", ".", "linspace", "(", "0", ",", "depth", "-", "1", ",", "depth", ")", ".", "repeat", "(", "height", ",", "width", ",", "1", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "type", "(", "tensor_type", ")", "\n", "\n", "x", "=", "x", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "num_batch", ")", "\n", "y", "=", "y", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "num_batch", ")", "\n", "z", "=", "z", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "num_batch", ")", "\n", "\n", "x", "=", "x", "+", "x_offset", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "y", "=", "y", "+", "y_offset", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "z", "=", "z", "+", "z_offset", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "x", "=", "torch", ".", "clamp", "(", "x", ",", "0.0", ",", "width", "-", "1", ")", "\n", "y", "=", "torch", ".", "clamp", "(", "y", ",", "0.0", ",", "height", "-", "1", ")", "\n", "z", "=", "torch", ".", "clamp", "(", "z", ",", "0.0", ",", "depth", "-", "1", ")", "\n", "\n", "x0", "=", "torch", ".", "floor", "(", "x", ")", "\n", "x1", "=", "x0", "+", "1", "\n", "y0", "=", "torch", ".", "floor", "(", "y", ")", "\n", "y1", "=", "y0", "+", "1", "\n", "z0", "=", "torch", ".", "floor", "(", "z", ")", "\n", "z1", "=", "z0", "+", "1", "\n", "\n", "x1", "=", "x1", ".", "clamp", "(", "max", "=", "(", "width", "-", "1", ")", ")", "\n", "y1", "=", "y1", ".", "clamp", "(", "max", "=", "(", "height", "-", "1", ")", ")", "\n", "z1", "=", "z1", ".", "clamp", "(", "max", "=", "(", "depth", "-", "1", ")", ")", "\n", "\n", "dim3", "=", "width", "\n", "dim2", "=", "width", "*", "height", "\n", "dim1", "=", "width", "*", "height", "*", "depth", "\n", "\n", "base", "=", "dim1", "*", "torch", ".", "arange", "(", "num_batch", ")", ".", "type", "(", "tensor_type", ")", "\n", "base", "=", "base", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "depth", "*", "height", "*", "width", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "base_z0", "=", "base", "+", "z0", "*", "dim2", "\n", "base_z1", "=", "base", "+", "z1", "*", "dim2", "\n", "\n", "base_y0z0", "=", "base_z0", "+", "y0", "*", "dim3", "\n", "base_y0z1", "=", "base_z1", "+", "y0", "*", "dim3", "\n", "\n", "base_y1z0", "=", "base_z0", "+", "y1", "*", "dim3", "\n", "base_y1z1", "=", "base_z1", "+", "y1", "*", "dim3", "\n", "\n", "idx_lun", "=", "base_y0z0", "+", "x0", "\n", "idx_luf", "=", "base_y0z1", "+", "x0", "\n", "\n", "idx_run", "=", "base_y0z0", "+", "x1", "\n", "idx_ruf", "=", "base_y0z1", "+", "x1", "\n", "\n", "idx_ldn", "=", "base_y1z0", "+", "x0", "\n", "idx_ldf", "=", "base_y1z1", "+", "x0", "\n", "\n", "idx_rdn", "=", "base_y1z0", "+", "x1", "\n", "idx_rdf", "=", "base_y1z1", "+", "x1", "\n", "\n", "pix_lun", "=", "im_flat", ".", "gather", "(", "1", ",", "idx_lun", ".", "repeat", "(", "num_channels", ",", "1", ")", ".", "long", "(", ")", ")", "\n", "pix_luf", "=", "im_flat", ".", "gather", "(", "1", ",", "idx_luf", ".", "repeat", "(", "num_channels", ",", "1", ")", ".", "long", "(", ")", ")", "\n", "\n", "pix_run", "=", "im_flat", ".", "gather", "(", "1", ",", "idx_run", ".", "repeat", "(", "num_channels", ",", "1", ")", ".", "long", "(", ")", ")", "\n", "pix_ruf", "=", "im_flat", ".", "gather", "(", "1", ",", "idx_ruf", ".", "repeat", "(", "num_channels", ",", "1", ")", ".", "long", "(", ")", ")", "\n", "\n", "pix_ldn", "=", "im_flat", ".", "gather", "(", "1", ",", "idx_ldn", ".", "repeat", "(", "num_channels", ",", "1", ")", ".", "long", "(", ")", ")", "\n", "pix_ldf", "=", "im_flat", ".", "gather", "(", "1", ",", "idx_ldf", ".", "repeat", "(", "num_channels", ",", "1", ")", ".", "long", "(", ")", ")", "\n", "\n", "pix_rdn", "=", "im_flat", ".", "gather", "(", "1", ",", "idx_rdn", ".", "repeat", "(", "num_channels", ",", "1", ")", ".", "long", "(", ")", ")", "\n", "pix_rdf", "=", "im_flat", ".", "gather", "(", "1", ",", "idx_rdf", ".", "repeat", "(", "num_channels", ",", "1", ")", ".", "long", "(", ")", ")", "\n", "\n", "length_l", "=", "(", "x1", "-", "x", ")", "\n", "length_r", "=", "(", "x", "-", "x0", ")", "\n", "\n", "length_u", "=", "(", "y1", "-", "y", ")", "\n", "length_d", "=", "(", "y", "-", "y0", ")", "\n", "\n", "length_n", "=", "(", "z1", "-", "z", ")", "\n", "length_f", "=", "(", "z", "-", "z0", ")", "\n", "\n", "weight_lun", "=", "length_l", "*", "length_u", "*", "length_n", "\n", "weight_luf", "=", "length_l", "*", "length_u", "*", "length_f", "\n", "\n", "weight_run", "=", "length_r", "*", "length_u", "*", "length_n", "\n", "weight_ruf", "=", "length_r", "*", "length_u", "*", "length_f", "\n", "\n", "weight_ldn", "=", "length_l", "*", "length_d", "*", "length_n", "\n", "weight_ldf", "=", "length_l", "*", "length_d", "*", "length_f", "\n", "\n", "weight_rdn", "=", "length_r", "*", "length_d", "*", "length_n", "\n", "weight_rdf", "=", "length_r", "*", "length_d", "*", "length_f", "\n", "\n", "output", "=", "weight_lun", "*", "pix_lun", "+", "weight_luf", "*", "pix_luf", "+", "weight_run", "*", "pix_run", "+", "weight_ruf", "*", "pix_ruf", "+", "weight_ldn", "*", "pix_ldn", "+", "weight_ldf", "*", "pix_ldf", "+", "weight_rdn", "*", "pix_rdn", "+", "weight_rdf", "*", "pix_rdf", "\n", "\n", "return", "output", ".", "view", "(", "num_channels", ",", "num_batch", ",", "depth", ",", "height", ",", "width", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ",", "4", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.__init__": [[24, 147], ["torch.Upsample", "torch.Upsample", "dataset.create_default_splits", "file_test_dataset.__len__", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.device", "torch.device", "torch.device", "torch.device", "loss.TBNLoss", "tester.TBNTester.loss_function.to", "tbn_model.TBN", "tester.TBNTester.model.to", "tester.TBNTester.init_logs", "print", "vars", "enumerate", "print", "print", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "print", "loss_models.PatchImageDiscriminator", "os.makedirs", "torch.MSELoss", "torch.MSELoss", "int", "range", "print", "int", "print", "tester.TBNTester.gan_criterion.to", "tester.TBNTester.discriminator.to", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "print", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "sys.exit", "torch.MSELoss", "torch.MSELoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "os.path.exists", "ValueError", "int", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.shapenet_img_data_loader.create_default_splits", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.shapenet_img_data_loader.ImgDataset.__len__", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.init_logs"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "if", "args", ".", "print_args", ":", "\n", "            ", "print", "(", "'\\nArgs:'", ")", "\n", "vargs", "=", "vars", "(", "args", ")", "\n", "for", "argIdx", ",", "argKey", "in", "enumerate", "(", "vargs", ",", "0", ")", ":", "\n", "                ", "print", "(", "argKey", "+", "' : '", "+", "str", "(", "vargs", "[", "argKey", "]", ")", ")", "\n", "", "print", "(", "'\\n'", ")", "\n", "", "self", ".", "args", "=", "args", "\n", "\n", "if", "'gpu'", "==", "args", ".", "device_mode", ":", "\n", "            ", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "sys", ".", "exit", "(", "'Error: CUDA was requested but is unavailable.'", ")", "\n", "", "print", "(", "'using gpu, device: '", "+", "str", "(", "args", ".", "cuda_device_num", ")", ")", "\n", "self", ".", "tensor_type", "=", "'torch.cuda.FloatTensor'", "\n", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "cuda_device_num", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'using cpu'", ")", "\n", "self", ".", "tensor_type", "=", "'torch.FloatTensor'", "\n", "\n", "\n", "", "if", "self", ".", "args", ".", "use_gan", ":", "\n", "            ", "if", "self", ".", "args", ".", "use_ls_gan", ":", "\n", "                ", "self", ".", "gan_criterion", "=", "nn", ".", "MSELoss", "(", ")", "\n", "self", ".", "fake_val", "=", "-", "1", "\n", "", "else", ":", "\n", "                ", "self", ".", "gan_criterion", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "self", ".", "fake_val", "=", "0", "\n", "\n", "", "noise_sigma", "=", "self", ".", "args", ".", "gan_noise_sigma", "if", "self", ".", "args", ".", "use_gan_noise", "else", "None", "\n", "\n", "self", ".", "discriminator", "=", "PatchImageDiscriminator", "(", "n_channels", "=", "self", ".", "args", ".", "num_output_channels", ",", "\n", "use_noise", "=", "self", ".", "args", ".", "use_gan_noise", ",", "\n", "noise_sigma", "=", "noise_sigma", ",", "\n", "num_intermediate_layers", "=", "self", ".", "args", ".", "gan_num_extra_layers", ")", "\n", "\n", "", "self", ".", "out_batch_idx", "=", "0", "\n", "self", ".", "tensor_write_count", "=", "0", "\n", "\n", "if", "self", ".", "args", ".", "print_output", "and", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "args", ".", "img_out_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "args", ".", "img_out_dir", ")", "\n", "\n", "", "self", ".", "num_eval_combine_views", "=", "self", ".", "args", ".", "num_combine_views", "\n", "if", "args", ".", "dataset_name", "==", "'chair'", "or", "args", ".", "dataset_name", "==", "'car'", ":", "\n", "            ", "import", "shapenet_img_data_loader", "as", "dataset", "\n", "args", ".", "azim_rotation_angle_increment", "=", "10.0", "\n", "args", ".", "elev_rotation_angle_increment", "=", "10.0", "\n", "args", ".", "final_height", "=", "256", "\n", "args", ".", "final_width", "=", "256", "\n", "self", ".", "do_run_eval", "=", "True", "\n", "", "elif", "'drc_'", "in", "args", ".", "dataset_name", ":", "\n", "            ", "import", "drc_img_data_loader", "as", "dataset", "\n", "args", ".", "azim_rotation_angle_increment", "=", "1.0", "\n", "args", ".", "elev_rotation_angle_increment", "=", "1.0", "\n", "args", ".", "final_height", "=", "224", "\n", "args", ".", "final_width", "=", "224", "\n", "self", ".", "do_run_eval", "=", "False", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "args", ".", "dataset_name", ")", "\n", "\n", "", "self", ".", "transform", "=", "nn", ".", "Upsample", "(", "size", "=", "[", "args", ".", "final_height", "-", "(", "2", "*", "self", ".", "args", ".", "crop_y_dim", ")", ",", "\n", "args", ".", "final_width", "-", "(", "2", "*", "self", ".", "args", ".", "crop_x_dim", ")", "]", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "shuffle_train", "=", "False", "\n", "shuffle_test", "=", "False", "\n", "config_num_input", "=", "args", ".", "num_combine_views", "\n", "_", ",", "_", ",", "file_test_dataset", "=", "dataset", ".", "create_default_splits", "(", "config_num_input", ",", "dataset_name", "=", "args", ".", "dataset_name", ",", "\n", "input_width", "=", "args", ".", "input_width", ",", "input_height", "=", "args", ".", "input_height", ",", "\n", "concat_mask", "=", "(", "4", "==", "args", ".", "num_output_channels", ")", ",", "\n", "shuffle_train", "=", "shuffle_train", ",", "shuffle_test", "=", "shuffle_test", ",", "\n", "img_path", "=", "self", ".", "args", ".", "img_path", ",", "args", "=", "self", ".", "args", ")", "\n", "\n", "self", ".", "n_file_test_img", "=", "file_test_dataset", ".", "__len__", "(", ")", "\n", "print", "(", "'Use a file tuple dataset with'", ",", "self", ".", "n_file_test_img", ",", "'images'", ")", "\n", "self", ".", "file_test_loader", "=", "DataLoader", "(", "file_test_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "drop_last", "=", "False", ",", "\n", "shuffle", "=", "False", ")", "\n", "\n", "if", "0.0", "<", "self", ".", "args", ".", "w_gen_seg3d", "or", "self", ".", "args", ".", "use_seg3d_proxy", ":", "self", ".", "seg_criterion", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "if", "0", "==", "self", ".", "args", ".", "vol_dim", ":", "\n", "            ", "vol_dim", "=", "int", "(", "self", ".", "args", ".", "input_width", "/", "2", ")", "\n", "for", "conv_idx", "in", "range", "(", "self", ".", "args", ".", "num_input_convs", ")", ":", "\n", "                ", "vol_dim", "=", "int", "(", "vol_dim", "/", "2", ")", "\n", "", "print", "(", "'inferring vol_dim of '", "+", "str", "(", "vol_dim", ")", ")", "\n", "", "else", ":", "\n", "            ", "vol_dim", "=", "int", "(", "self", ".", "args", ".", "vol_dim", ")", "\n", "print", "(", "'using vol_dim of '", "+", "str", "(", "vol_dim", ")", ")", "\n", "\n", "", "self", ".", "num_input_channels", "=", "self", ".", "args", ".", "num_input_channels", "\n", "self", ".", "num_output_channels", "=", "self", ".", "args", ".", "num_output_channels", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "(", "\n", "(", "'cuda:'", "+", "str", "(", "self", ".", "args", ".", "cuda_device_num", ")", ")", "if", "'gpu'", "==", "self", ".", "args", ".", "device_mode", "else", "'cpu'", ")", ")", "\n", "self", ".", "loss_function", "=", "TBNLoss", "(", "tensor_type", "=", "self", ".", "tensor_type", ",", "use_vgg", "=", "(", "0.0", "<", "self", ".", "args", ".", "w_gen_vgg", ")", ",", "\n", "vgg_model_path", "=", "self", ".", "args", ".", "vgg_model_path", ")", "\n", "self", ".", "loss_function", "=", "self", ".", "loss_function", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "model", "=", "tbn_model", ".", "TBN", "(", "self", ".", "num_input_channels", ",", "self", ".", "num_output_channels", ",", "\n", "args", "=", "self", ".", "args", ",", "vol_dim", "=", "vol_dim", ",", "num_features", "=", "self", ".", "args", ".", "num_features", ",", "\n", "tensor_type", "=", "self", ".", "tensor_type", ")", "\n", "\n", "self", ".", "model", "=", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "if", "self", ".", "args", ".", "use_gan", ":", "\n", "            ", "self", ".", "gan_criterion", "=", "self", ".", "gan_criterion", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "discriminator", "=", "self", ".", "discriminator", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "", "if", "self", ".", "tensor_type", "==", "'torch.cuda.FloatTensor'", ":", "\n", "            ", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "", "self", ".", "batch_num", "=", "0", "\n", "self", ".", "test_batch_num", "=", "0", "\n", "self", ".", "eval_batch_num", "=", "0", "\n", "\n", "self", ".", "total_loss_sum", "=", "0.0", "\n", "self", ".", "total_test_loss_sum", "=", "0.0", "\n", "self", ".", "total_eval_loss_sum", "=", "0.0", "\n", "\n", "self", ".", "total_disc_loss_sum", "=", "0.0", "\n", "\n", "self", ".", "logs", "=", "self", ".", "init_logs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.ones_like": [[148, 151], ["torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "tensor.size"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "ones_like", "(", "tensor", ",", "device", ",", "val", "=", "1.", ")", ":", "\n", "        ", "return", "torch", ".", "FloatTensor", "(", "tensor", ".", "size", "(", ")", ")", ".", "fill_", "(", "val", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.run_eval": [[152, 304], ["tester.TBNTester.reset_logs", "tester.TBNTester.model.eval", "print", "tester.TBNTester.discriminator.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "time.time", "enumerate", "float", "tester.TBNTester.logs[].item", "tester.TBNTester.get_data", "tester.TBNTester.model", "tester.TBNTester.compute_gen_losses", "tester.TBNTester.logs[].item", "print", "range", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "range", "time.time", "print", "print", "tester.TBNTester.model", "range", "range", "range", "scipy.misc.imsave", "scipy.misc.imsave", "scipy.misc.imsave", "scipy.misc.imsave", "round", "str", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "class_final_bottleneck.cpu().detach().numpy", "numpy.swapaxes.squeeze", "numpy.flip", "numpy.swapaxes", "scipy.savemat", "scipy.savemat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "numpy.squeeze", "str", "tester.TBNTester.logs[].item", "tester.TBNTester.logs[].item", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "numpy.transpose", "tester.TBNTester.logs[].item", "str", "class_final_bottleneck.cpu().detach", "str", "outputFrame.cpu().detach().numpy", "str", "str", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "class_final_bottleneck.cpu", "outputFrame.cpu().detach", "outputFrame.cpu"], "methods", ["home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.reset_logs", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.get_data", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.compute_gen_losses"], ["", "def", "run_eval", "(", "self", ",", "num_requested_inputs_to_use", "=", "0", ")", ":", "\n", "        ", "self", ".", "eval_batch_num", "+=", "1", "\n", "self", ".", "reset_logs", "(", "'eval'", ")", "\n", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "if", "self", ".", "args", ".", "use_gan", ":", "\n", "            ", "self", ".", "discriminator", ".", "eval", "(", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "test_loss_item", "=", "1e19", "\n", "\n", "running_loss", "=", "0.0", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "test_loss_sum", "=", "0.0", "\n", "\n", "num_inputs_to_use", "=", "self", ".", "num_eval_combine_views", "if", "0", "==", "num_requested_inputs_to_use", "else", "num_requested_inputs_to_use", "\n", "\n", "for", "(", "i", ",", "test_data", ")", "in", "enumerate", "(", "self", ".", "file_test_loader", ",", "0", ")", ":", "\n", "                ", "if", "(", "0", ")", "==", "(", "(", "i", "+", "1", ")", "%", "self", ".", "args", ".", "log_interval", ")", ":", "\n", "                    ", "print", "(", "'start '", "+", "str", "(", "i", "+", "1", ")", "+", "' of '", "+", "str", "(", "self", ".", "n_file_test_img", "/", "self", ".", "args", ".", "batch_size", ")", ")", "\n", "\n", "", "crnt_batch_size", "=", "test_data", "[", "'tgt_rgb_image'", "]", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "\n", "input_range", "=", "1", "if", "self", ".", "args", ".", "use_synthetic_input", "else", "num_inputs_to_use", "\n", "\n", "data", "=", "self", ".", "get_data", "(", "test_data", ",", "num_inputs_to_use", ",", "self", ".", "args", ".", "use_synthetic_input", ")", "\n", "\n", "if", "self", ".", "args", ".", "use_synthetic_input", ":", "\n", "                    ", "for", "input_idx", "in", "range", "(", "1", ",", "num_inputs_to_use", ")", ":", "\n", "# assign pose for image to be generated", "\n", "                        ", "data", "[", "'tgt_azim_transform_mode'", "]", "[", "0", "]", "=", "data", "[", "'src_azim_transform_mode'", "]", "[", "input_idx", "]", "\n", "data", "[", "'tgt_elev_transform_mode'", "]", "[", "0", "]", "=", "data", "[", "'src_elev_transform_mode'", "]", "[", "input_idx", "]", "\n", "\n", "model_out", "=", "self", ".", "model", "(", "1", ",", "data", ")", "\n", "\n", "data", "[", "'src_rgb_image'", "]", "[", "input_idx", "]", "=", "model_out", "[", "0", "]", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", "\n", "data", "[", "'src_seg_image'", "]", "[", "input_idx", "]", "=", "model_out", "[", "2", "]", "[", "0", "]", "\n", "\n", "", "data", "[", "'tgt_azim_transform_mode'", "]", "[", "0", "]", "=", "torch", ".", "zeros", "(", "data", "[", "'src_azim_transform_mode'", "]", "[", "0", "]", ".", "shape", ")", ".", "type", "(", "\n", "'torch.DoubleTensor'", ")", "\n", "data", "[", "'tgt_elev_transform_mode'", "]", "[", "0", "]", "=", "torch", ".", "zeros", "(", "data", "[", "'src_elev_transform_mode'", "]", "[", "0", "]", ".", "shape", ")", ".", "type", "(", "\n", "'torch.DoubleTensor'", ")", "\n", "\n", "", "model_out", "=", "self", ".", "model", "(", "num_inputs_to_use", ",", "data", ")", "\n", "eval_loss", "=", "self", ".", "compute_gen_losses", "(", "model_out", ",", "data", ",", "loss_type", "=", "'eval'", ")", "\n", "\n", "if", "self", ".", "args", ".", "print_output", ":", "\n", "                    ", "if", "self", ".", "args", ".", "use_seg3d_proxy", "and", "self", ".", "args", ".", "print_occupancy_volume", ":", "\n", "                        ", "gen_tgt_occupancy", "=", "model_out", "[", "4", "]", "\n", "for", "idx", "in", "range", "(", "gen_tgt_occupancy", ".", "shape", "[", "0", "]", ")", ":", "\n", "                            ", "class_final_bottleneck", "=", "gen_tgt_occupancy", "[", "idx", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "class_mat", "=", "{", "}", "\n", "np_class_final_bottleneck", "=", "class_final_bottleneck", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "np_class_final_bottleneck", "=", "np_class_final_bottleneck", ".", "squeeze", "(", "0", ")", "\n", "np_class_final_bottleneck", "=", "np", ".", "flip", "(", "np_class_final_bottleneck", ",", "axis", "=", "-", "2", ")", "\n", "np_class_final_bottleneck", "=", "np", ".", "swapaxes", "(", "np_class_final_bottleneck", ",", "1", ",", "2", ")", "\n", "\n", "class_mat", "[", "'volume'", "]", "=", "np_class_final_bottleneck", "\n", "\n", "sio", ".", "savemat", "(", "self", ".", "args", ".", "img_out_dir", "+", "'/'", "+", "str", "(", "self", ".", "tensor_write_count", "+", "1", ")", "+", "'.mat'", ",", "class_mat", ")", "\n", "\n", "self", ".", "tensor_write_count", "+=", "1", "\n", "\n", "", "", "src_rgb_image", "=", "data", "[", "'src_rgb_image'", "]", "\n", "tgt_rgb_image", "=", "data", "[", "'tgt_rgb_image'", "]", "[", "0", "]", "\n", "\n", "if", "self", ".", "args", ".", "print_seg_output", "and", "self", ".", "args", ".", "use_seg3d_proxy", ":", "\n", "                        ", "src_seg_image", "=", "data", "[", "'src_seg_image'", "]", "\n", "tgt_seg_image", "=", "data", "[", "'tgt_seg_image'", "]", "[", "0", "]", "\n", "\n", "src_cat_images", "=", "None", "\n", "for", "view_idx", "in", "range", "(", "0", ",", "num_inputs_to_use", ")", ":", "\n", "                            ", "if", "src_cat_images", "is", "None", ":", "\n", "                                ", "src_cat_images", "=", "torch", ".", "cat", "(", "(", "src_rgb_image", "[", "0", "]", ",", "torch", ".", "cat", "(", "(", "src_seg_image", "[", "0", "]", ",", "src_seg_image", "[", "0", "]", ",", "src_seg_image", "[", "0", "]", ")", ",", "1", ")", ")", ",", "\n", "3", ")", "\n", "", "else", ":", "\n", "                                ", "src_cat_images", "=", "torch", ".", "cat", "(", "(", "src_cat_images", ",", "src_rgb_image", "[", "view_idx", "]", ",", "\n", "torch", ".", "cat", "(", "(", "src_seg_image", "[", "view_idx", "]", ",", "src_seg_image", "[", "view_idx", "]", ",", "src_seg_image", "[", "view_idx", "]", ")", ",", "\n", "1", ")", ")", ",", "3", ")", "\n", "\n", "", "tgt_seg_rgb", "=", "torch", ".", "cat", "(", "(", "tgt_seg_image", ",", "tgt_seg_image", ",", "tgt_seg_image", ")", ",", "1", ")", "\n", "gen_tgt_seg3d", "=", "model_out", "[", "2", "]", "[", "0", "]", "\n", "gen_tgt_seg3d_rgb", "=", "torch", ".", "cat", "(", "(", "gen_tgt_seg3d", ",", "gen_tgt_seg3d", ",", "gen_tgt_seg3d", ")", ",", "1", ")", "\n", "cat_images", "=", "torch", ".", "cat", "(", "(", "src_cat_images", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", ",", "\n", "model_out", "[", "0", "]", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", ",", "tgt_rgb_image", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", ",", "\n", "gen_tgt_seg3d_rgb", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", ",", "tgt_seg_rgb", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", ")", ",", "3", ")", "\n", "", "", "else", ":", "\n", "                        ", "src_cat_images", "=", "None", "\n", "for", "view_idx", "in", "range", "(", "0", ",", "num_inputs_to_use", ")", ":", "\n", "                            ", "if", "src_cat_images", "is", "None", ":", "\n", "                                ", "src_cat_images", "=", "src_rgb_image", "[", "0", "]", "\n", "", "else", ":", "\n", "                                ", "src_cat_images", "=", "torch", ".", "cat", "(", "(", "src_cat_images", ",", "src_rgb_image", "[", "view_idx", "]", ")", ",", "3", ")", "\n", "\n", "", "cat_images", "=", "torch", ".", "cat", "(", "(", "src_cat_images", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", ",", "\n", "model_out", "[", "0", "]", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", ",", "tgt_rgb_image", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", ")", ",", "3", ")", "\n", "\n", "", "", "for", "outImgIdx", "in", "range", "(", "crnt_batch_size", ")", ":", "\n", "                        ", "outputFrame", "=", "cat_images", "[", "outImgIdx", ",", ":", ",", ":", ",", ":", "]", "\n", "out_str", "=", "\"%05d\"", "%", "(", "self", ".", "args", ".", "batch_size", "*", "self", ".", "out_batch_idx", "+", "outImgIdx", ",", ")", "\n", "scipy", ".", "misc", ".", "imsave", "(", "self", ".", "args", ".", "img_out_dir", "+", "'/'", "+", "str", "(", "out_str", ")", "+", "'_out.png'", ",", "\n", "np", ".", "squeeze", "(", "np", ".", "transpose", "(", "outputFrame", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "\n", "(", "1", ",", "2", ",", "0", ")", ")", ")", ")", "\n", "\n", "", "self", ".", "out_batch_idx", "=", "self", ".", "out_batch_idx", "+", "1", "\n", "\n", "", "if", "0", "==", "(", "i", "+", "1", ")", "%", "self", ".", "args", ".", "log_interval", ":", "\n", "                    ", "crnt_time", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'end '", "+", "str", "(", "i", "+", "1", ")", "+", "' of '", "+", "str", "(", "self", ".", "n_file_test_img", "/", "self", ".", "args", ".", "batch_size", ")", ")", "\n", "print", "(", "\n", "'time:'", ",", "\n", "round", "(", "crnt_time", "-", "start_time", ",", "3", ")", ",", "\n", "'s'", ",", "\n", "'SSIM Loss:'", ",", "\n", "self", ".", "logs", "[", "'l_eval_gen_raw_ssim'", "]", ".", "item", "(", ")", "/", "(", "i", "+", "1", ")", ",", "\n", "'L1:'", ",", "\n", "self", ".", "logs", "[", "'l_eval_gen_raw_l1'", "]", ".", "item", "(", ")", "/", "(", "i", "+", "1", ")", ",", "\n", "'Final SSIM:'", ",", "\n", "1", "-", "self", ".", "logs", "[", "'l_eval_gen_raw_ssim'", "]", ".", "item", "(", ")", "/", "(", "i", "+", "1", ")", ",", "\n", ")", "\n", "start_time", "=", "crnt_time", "\n", "test_loss_sum", "=", "0.0", "\n", "\n", "", "", "", "final_scale_factor", "=", "float", "(", "self", ".", "n_file_test_img", ")", "/", "self", ".", "args", ".", "batch_size", "\n", "\n", "self", ".", "logs", "[", "'l_eval_gen'", "]", "/=", "final_scale_factor", "\n", "self", ".", "logs", "[", "'l_eval_gen_gan'", "]", "/=", "final_scale_factor", "\n", "self", ".", "logs", "[", "'l_eval_gen_l1'", "]", "/=", "final_scale_factor", "\n", "self", ".", "logs", "[", "'l_eval_gen_raw_l1'", "]", "/=", "final_scale_factor", "\n", "self", ".", "logs", "[", "'l_eval_gen_raw_ssim'", "]", "/=", "final_scale_factor", "\n", "self", ".", "logs", "[", "'l_eval_gen_ssim'", "]", "/=", "final_scale_factor", "\n", "self", ".", "logs", "[", "'l_eval_gen_seg3d'", "]", "/=", "final_scale_factor", "\n", "self", ".", "logs", "[", "'l_eval_gen_vgg'", "]", "/=", "final_scale_factor", "\n", "self", ".", "logs", "[", "'l_eval_gen_running'", "]", "/=", "final_scale_factor", "\n", "\n", "eval_gen_vgg", "=", "self", ".", "logs", "[", "'l_eval_gen_vgg'", "]", "/", "self", ".", "args", ".", "w_gen_vgg", "if", "0.0", "<", "self", ".", "args", ".", "w_gen_vgg", "else", "0.0", "\n", "\n", "print", "(", "\n", "'Eval tuples test:'", ",", "\n", "'SSIM:'", ",", "\n", "1.0", "-", "self", ".", "logs", "[", "'l_eval_gen_raw_ssim'", "]", ".", "item", "(", ")", ",", "\n", "'L1:'", ",", "\n", "self", ".", "logs", "[", "'l_eval_gen_raw_l1'", "]", ".", "item", "(", ")", ",", "\n", ")", "\n", "\n", "running_loss", "/=", "self", ".", "n_file_test_img", "/", "self", ".", "args", ".", "batch_size", "\n", "\n", "return", "running_loss", ",", "(", "1.0", "-", "self", ".", "logs", "[", "'l_eval_gen_raw_ssim'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.init_logs": [[305, 316], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "init_logs", "(", ")", ":", "\n", "        ", "return", "{", "'l_eval_gen'", ":", "0.0", ",", "\n", "'l_eval_gen_gan'", ":", "0.0", ",", "\n", "'l_eval_gen_l1'", ":", "0.0", ",", "\n", "'l_eval_gen_raw_l1'", ":", "0.0", ",", "\n", "'l_eval_gen_raw_ssim'", ":", "0.0", ",", "\n", "'l_eval_gen_ssim'", ":", "0.0", ",", "\n", "'l_eval_gen_seg3d'", ":", "0.0", ",", "\n", "'l_eval_gen_vgg'", ":", "0.0", ",", "\n", "'l_eval_gen_running'", ":", "0.0", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.reset_logs": [[317, 331], ["None"], "methods", ["None"], ["", "def", "reset_logs", "(", "self", ",", "log_type", "=", "'train'", ")", ":", "\n", "        ", "self", ".", "logs", "[", "'l_'", "+", "log_type", "+", "'_gen'", "]", "=", "0.0", "\n", "self", ".", "logs", "[", "'l_'", "+", "log_type", "+", "'_gen_gan'", "]", "=", "0.0", "\n", "self", ".", "logs", "[", "'l_'", "+", "log_type", "+", "'_gen_l1'", "]", "=", "0.0", "\n", "self", ".", "logs", "[", "'l_'", "+", "log_type", "+", "'_gen_raw_l1'", "]", "=", "0.0", "\n", "self", ".", "logs", "[", "'l_'", "+", "log_type", "+", "'_gen_raw_ssim'", "]", "=", "0.0", "\n", "self", ".", "logs", "[", "'l_'", "+", "log_type", "+", "'_gen_ssim'", "]", "=", "0.0", "\n", "self", ".", "logs", "[", "'l_'", "+", "log_type", "+", "'_gen_seg3d'", "]", "=", "0.0", "\n", "self", ".", "logs", "[", "'l_'", "+", "log_type", "+", "'_gen_vgg'", "]", "=", "0.0", "\n", "self", ".", "logs", "[", "'l_'", "+", "log_type", "+", "'_gen_running'", "]", "=", "0.0", "\n", "if", "'train'", "==", "log_type", ":", "\n", "            ", "self", ".", "logs", "[", "'l_'", "+", "log_type", "+", "'_disc'", "]", "=", "0.0", "\n", "self", ".", "logs", "[", "'l_'", "+", "log_type", "+", "'_disc_gan'", "]", "=", "0.0", "\n", "self", ".", "logs", "[", "'l_'", "+", "log_type", "+", "'_disc_running'", "]", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.compute_gen_losses": [[332, 439], ["tester.TBNTester.loss_function", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "l_gen_l1_loss.item", "l_gen_ssim_loss.item", "l_gen_seg3d_loss.item", "l_gen_vgg_loss.item", "raw_l1_loss.mean", "loss.item", "upsample_model_out.append", "upsample_model_out.append", "len", "range", "raw_vgg_loss.mean", "raw_l1_loss.mean", "ssim_loss.mean", "ssim_loss.mean", "torch.zeros().to.mean", "torch.zeros().to.mean", "tester.TBNTester.discriminator", "tester.TBNTester.ones_like", "l_gen_gan_loss.item", "loss.item", "tester.TBNTester.transform", "upsample_model_out.append", "upsample_model_out.append", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "nonzero_ssim_loss.mean", "tester.TBNTester.gan_criterion().mean", "loss.item", "tester.TBNTester.seg_criterion", "tester.TBNTester.seg_criterion", "tester.TBNTester.transform", "tester.TBNTester.seg_criterion", "tester.TBNTester.seg_criterion", "loss.item", "ValueError", "tester.TBNTester.transform", "tester.TBNTester.gan_criterion"], "methods", ["home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.ones_like"], ["", "", "def", "compute_gen_losses", "(", "self", ",", "model_out", ",", "data", ",", "loss_type", "=", "'train'", ")", ":", "\n", "        ", "loss", "=", "0.0", "\n", "\n", "tgt_rgb_image", "=", "data", "[", "'tgt_rgb_image'", "]", "[", "0", "]", "\n", "tgt_seg_image", "=", "data", "[", "'tgt_seg_image'", "]", "[", "0", "]", "\n", "if", "self", ".", "args", ".", "upsample_output", ":", "\n", "            ", "orig_tgt_rgb_image", "=", "data", "[", "'orig_tgt_rgb_image'", "]", "[", "0", "]", "\n", "orig_tgt_seg_image", "=", "data", "[", "'orig_tgt_seg_image'", "]", "[", "0", "]", "\n", "\n", "", "src_seg_image", "=", "data", "[", "'src_seg_image'", "]", "\n", "\n", "if", "self", ".", "args", ".", "upsample_output", ":", "\n", "            ", "upsample_model_out", "=", "[", "]", "\n", "upsample_model_out", ".", "append", "(", "self", ".", "transform", "(", "model_out", "[", "0", "]", ")", ")", "\n", "upsample_model_out", ".", "append", "(", "model_out", "[", "1", "]", ")", "\n", "if", "self", ".", "args", ".", "use_seg3d_proxy", ":", "\n", "                ", "upsample_model_out", ".", "append", "(", "[", "self", ".", "transform", "(", "model_out", "[", "2", "]", "[", "0", "]", ")", "]", ")", "\n", "", "else", ":", "\n", "                ", "upsample_model_out", ".", "append", "(", "model_out", "[", "2", "]", ")", "\n", "\n", "", "loss_gen", "=", "upsample_model_out", "\n", "loss_tgt_rgb_image", "=", "orig_tgt_rgb_image", "\n", "loss_tgt_seg_image", "=", "orig_tgt_seg_image", "\n", "\n", "gen_src_seg3d", "=", "upsample_model_out", "[", "1", "]", "\n", "gen_tgt_seg3d", "=", "upsample_model_out", "[", "2", "]", "\n", "", "else", ":", "\n", "            ", "loss_gen", "=", "model_out", "\n", "loss_tgt_rgb_image", "=", "tgt_rgb_image", "\n", "loss_tgt_seg_image", "=", "tgt_seg_image", "\n", "\n", "gen_src_seg3d", "=", "model_out", "[", "1", "]", "\n", "gen_tgt_seg3d", "=", "model_out", "[", "2", "]", "\n", "\n", "", "raw_vgg_loss", ",", "raw_l1_loss", ",", "raw_ssim_loss", "=", "self", ".", "loss_function", "(", "loss_gen", "[", "0", "]", ",", "loss_tgt_rgb_image", ")", "\n", "\n", "raw_seg3d_loss", "=", "torch", ".", "zeros", "(", "raw_l1_loss", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "self", ".", "args", ".", "use_seg3d_proxy", ":", "\n", "            ", "num_src_imgs", "=", "len", "(", "gen_src_seg3d", ")", "\n", "gen_src_seg", "=", "model_out", "[", "3", "]", "\n", "for", "view_idx", "in", "range", "(", "0", ",", "num_src_imgs", ")", ":", "\n", "                ", "raw_seg3d_loss", "+=", "0.5", "*", "self", ".", "seg_criterion", "(", "gen_src_seg3d", "[", "view_idx", "]", ",", "src_seg_image", "[", "view_idx", "]", ")", "\n", "raw_seg3d_loss", "+=", "0.5", "*", "self", ".", "seg_criterion", "(", "gen_src_seg", "[", "view_idx", "]", ",", "src_seg_image", "[", "view_idx", "]", ")", "\n", "", "if", "0", "<", "len", "(", "gen_tgt_seg3d", ")", ":", "\n", "                ", "if", "self", ".", "args", ".", "upsample_output", ":", "\n", "                    ", "gen_tgt_seg", "=", "self", ".", "transform", "(", "model_out", "[", "0", "]", "[", ":", ",", "3", ":", "4", ",", ":", ",", ":", "]", ")", "\n", "", "else", ":", "\n", "                    ", "gen_tgt_seg", "=", "model_out", "[", "0", "]", "[", ":", ",", "3", ":", "4", ",", ":", ",", ":", "]", "\n", "", "raw_seg3d_loss", "+=", "0.5", "*", "self", ".", "seg_criterion", "(", "gen_tgt_seg3d", "[", "0", "]", ",", "loss_tgt_seg_image", ")", "\n", "raw_seg3d_loss", "+=", "0.5", "*", "self", ".", "seg_criterion", "(", "gen_tgt_seg", ",", "loss_tgt_seg_image", ")", "\n", "num_src_imgs", "+=", "1", "\n", "", "raw_seg3d_loss", "/=", "num_src_imgs", "\n", "\n", "", "l_gen_vgg_loss", "=", "self", ".", "args", ".", "w_gen_vgg", "*", "raw_vgg_loss", ".", "mean", "(", ")", "\n", "loss", "+=", "l_gen_vgg_loss", "\n", "l_gen_l1_loss", "=", "self", ".", "args", ".", "w_gen_l1", "*", "raw_l1_loss", ".", "mean", "(", ")", "\n", "loss", "+=", "l_gen_l1_loss", "\n", "\n", "if", "self", ".", "args", ".", "normalize_ssim_loss", ":", "\n", "            ", "nonzero_ssim_loss", "=", "(", "raw_ssim_loss", "+", "1.0", ")", "\n", "normalized_ssim_loss", "=", "0.5", "*", "nonzero_ssim_loss", "\n", "l_log_ssim_loss_val", "=", "(", "2.0", "-", "nonzero_ssim_loss", ".", "mean", "(", ")", ")", "\n", "ssim_loss", "=", "(", "2.0", "-", "nonzero_ssim_loss", ")", "\n", "", "else", ":", "\n", "            ", "ssim_loss", "=", "raw_ssim_loss", "\n", "ssim_loss", "=", "(", "1.0", "-", "ssim_loss", ")", "\n", "l_log_ssim_loss_val", "=", "ssim_loss", ".", "mean", "(", ")", "\n", "\n", "", "l_gen_ssim_loss", "=", "self", ".", "args", ".", "w_gen_ssim", "*", "ssim_loss", ".", "mean", "(", ")", "\n", "loss", "+=", "l_gen_ssim_loss", "\n", "\n", "l_gen_seg3d_loss", "=", "self", ".", "args", ".", "w_gen_seg3d", "*", "raw_seg3d_loss", ".", "mean", "(", ")", "\n", "loss", "+=", "l_gen_seg3d_loss", "\n", "\n", "if", "self", ".", "args", ".", "use_gan", "and", "0.0", "<", "self", ".", "args", ".", "w_gen_gan_label", ":", "\n", "            ", "fake_labels", ",", "_", "=", "self", ".", "discriminator", "(", "model_out", "[", "0", "]", ")", "\n", "\n", "self", ".", "ones", "=", "self", ".", "ones_like", "(", "fake_labels", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "l_gen_gan_loss", "=", "self", ".", "args", ".", "w_gen_gan_label", "*", "self", ".", "gan_criterion", "(", "fake_labels", ",", "self", ".", "ones", ")", ".", "mean", "(", ")", "\n", "loss", "+=", "l_gen_gan_loss", "\n", "\n", "self", ".", "logs", "[", "'l_'", "+", "loss_type", "+", "'_gen_gan'", "]", "+=", "l_gen_gan_loss", ".", "item", "(", ")", "\n", "", "self", ".", "logs", "[", "'l_'", "+", "loss_type", "+", "'_gen_l1'", "]", "+=", "l_gen_l1_loss", ".", "item", "(", ")", "\n", "self", ".", "logs", "[", "'l_'", "+", "loss_type", "+", "'_gen_ssim'", "]", "+=", "l_gen_ssim_loss", ".", "item", "(", ")", "\n", "self", ".", "logs", "[", "'l_'", "+", "loss_type", "+", "'_gen_seg3d'", "]", "+=", "l_gen_seg3d_loss", ".", "item", "(", ")", "\n", "self", ".", "logs", "[", "'l_'", "+", "loss_type", "+", "'_gen_vgg'", "]", "+=", "l_gen_vgg_loss", ".", "item", "(", ")", "\n", "\n", "self", ".", "logs", "[", "'l_'", "+", "loss_type", "+", "'_gen_raw_l1'", "]", "+=", "raw_l1_loss", ".", "mean", "(", ")", "\n", "self", ".", "logs", "[", "'l_'", "+", "loss_type", "+", "'_gen_raw_ssim'", "]", "+=", "l_log_ssim_loss_val", "\n", "\n", "self", ".", "logs", "[", "'l_'", "+", "loss_type", "+", "'_gen'", "]", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "if", "'train'", "==", "loss_type", ":", "\n", "            ", "self", ".", "total_loss_sum", "+=", "loss", ".", "item", "(", ")", "\n", "running_loss", "=", "self", ".", "total_loss_sum", "/", "self", ".", "batch_num", "\n", "", "elif", "'test'", "==", "loss_type", ":", "\n", "            ", "self", ".", "total_test_loss_sum", "+=", "loss", ".", "item", "(", ")", "\n", "running_loss", "=", "self", ".", "total_test_loss_sum", "/", "self", ".", "test_batch_num", "\n", "", "elif", "'eval'", "==", "loss_type", ":", "\n", "            ", "self", ".", "total_eval_loss_sum", "+=", "loss", ".", "item", "(", ")", "\n", "running_loss", "=", "self", ".", "total_eval_loss_sum", "/", "self", ".", "eval_batch_num", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "loss_type", ")", "\n", "\n", "", "self", ".", "logs", "[", "'l_'", "+", "loss_type", "+", "'_gen_running'", "]", "+=", "running_loss", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.get_data": [[440, 469], ["range", "range", "[].to", "[].to", "[].to", "[].to", "[].to", "[].to", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "[].type", "[].type", "torch.ones().type", "torch.ones().type", "torch.ones().type", "torch.ones().type", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "def", "get_data", "(", "self", ",", "data", ",", "num_inputs_to_use", "=", "1", ",", "use_synthetic_input", "=", "False", ",", "num_outputs_to_use", "=", "1", ")", ":", "\n", "        ", "output_data", "=", "data", "\n", "\n", "for", "output_idx", "in", "range", "(", "num_outputs_to_use", ")", ":", "\n", "            ", "output_data", "[", "'tgt_rgb_image'", "]", "[", "output_idx", "]", "=", "data", "[", "'tgt_rgb_image'", "]", "[", "output_idx", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "output_data", "[", "'tgt_seg_image'", "]", "[", "output_idx", "]", "=", "data", "[", "'tgt_seg_image'", "]", "[", "output_idx", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "self", ".", "args", ".", "upsample_output", ":", "\n", "                ", "output_data", "[", "'orig_tgt_rgb_image'", "]", "[", "output_idx", "]", "=", "data", "[", "'orig_tgt_rgb_image'", "]", "[", "output_idx", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "output_data", "[", "'orig_tgt_seg_image'", "]", "[", "output_idx", "]", "=", "data", "[", "'orig_tgt_seg_image'", "]", "[", "output_idx", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "", "", "for", "input_idx", "in", "range", "(", "num_inputs_to_use", ")", ":", "\n", "            ", "output_data", "[", "'src_rgb_image'", "]", "[", "input_idx", "]", "=", "data", "[", "'src_rgb_image'", "]", "[", "input_idx", "]", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "output_data", "[", "'src_seg_image'", "]", "[", "input_idx", "]", "=", "data", "[", "'src_seg_image'", "]", "[", "input_idx", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "if", "use_synthetic_input", "and", "not", "self", ".", "args", ".", "use_random_transforms", ":", "\n", "                ", "if", "0", "!=", "input_idx", ":", "\n", "# regularly sample positions around the central axis", "\n", "                    ", "angle", "=", "(", "input_idx", "-", "1", ")", "*", "(", "360.0", "/", "(", "num_inputs_to_use", "-", "1", ")", ")", "\n", "output_data", "[", "'src_azim_transform_mode'", "]", "[", "input_idx", "]", "=", "angle", "*", "torch", ".", "ones", "(", "\n", "data", "[", "'src_azim_transform_mode'", "]", "[", "input_idx", "]", ".", "shape", ")", ".", "type", "(", "'torch.DoubleTensor'", ")", "\n", "output_data", "[", "'src_elev_transform_mode'", "]", "[", "input_idx", "]", "=", "torch", ".", "zeros", "(", "\n", "data", "[", "'src_elev_transform_mode'", "]", "[", "input_idx", "]", ".", "shape", ")", ".", "type", "(", "'torch.DoubleTensor'", ")", "\n", "", "else", ":", "\n", "                    ", "output_data", "[", "'src_azim_transform_mode'", "]", "[", "input_idx", "]", "=", "data", "[", "'src_azim_transform_mode'", "]", "[", "input_idx", "]", ".", "type", "(", "\n", "'torch.DoubleTensor'", ")", "\n", "output_data", "[", "'src_elev_transform_mode'", "]", "[", "input_idx", "]", "=", "data", "[", "'src_elev_transform_mode'", "]", "[", "input_idx", "]", ".", "type", "(", "\n", "'torch.DoubleTensor'", ")", "\n", "\n", "", "", "", "return", "output_data", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load": [[470, 495], ["os.path.exists", "isinstance", "tester.TBNTester.model.to", "print", "exit", "os.path.exists", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "isinstance", "tester.TBNTester.discriminator.to", "print"], "methods", ["home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load"], ["", "def", "load", "(", "self", ",", "path", ",", "load_disc", "=", "True", ",", "in_disc_path", "=", "''", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "            ", "if", "'cpu'", "==", "self", ".", "args", ".", "device_mode", ":", "\n", "                ", "self", ".", "model", "=", "torch", ".", "load", "(", "path", ",", "map_location", "=", "'cpu'", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "model", "=", "torch", ".", "load", "(", "path", ")", "\n", "", "if", "isinstance", "(", "self", ".", "model", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "                ", "self", ".", "model", "=", "self", ".", "model", ".", "module", "\n", "", "self", ".", "model", ".", "tensor_type", "=", "self", ".", "tensor_type", "\n", "self", ".", "model", ".", "args", "=", "self", ".", "args", "\n", "self", ".", "model", "=", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'generator file not found: '", "+", "path", ")", "\n", "exit", "(", "-", "1", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "use_gan", "and", "load_disc", ":", "\n", "            ", "disc_path", "=", "path", "[", ":", "-", "4", "]", "+", "'_disc.pth'", "if", "''", "==", "in_disc_path", "else", "in_disc_path", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "disc_path", ")", ":", "\n", "                ", "self", ".", "discriminator", "=", "torch", ".", "load", "(", "disc_path", ")", "\n", "if", "isinstance", "(", "self", ".", "discriminator", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "                    ", "self", ".", "discriminator", "=", "self", ".", "discriminator", ".", "module", "\n", "", "self", ".", "discriminator", "=", "self", ".", "discriminator", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'discriminator file not found: '", "+", "disc_path", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.loss_models.PerceptualVGG19.__init__": [[12, 41], ["torch.Module.__init__", "torchvision.models.vgg19.float", "torchvision.models.vgg19.eval", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "loss_models.PerceptualVGG19.parameters", "print", "torchvision.models.vgg19", "torchvision.models.vgg19.load_state_dict", "torchvision.models.vgg19", "loss_models.PerceptualVGG19.mean.cuda", "loss_models.PerceptualVGG19.std.cuda", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.kyleolsz_TB-Networks.pytorch_ssim.__init__.SSIM.__init__", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.tester.TBNTester.load"], ["    ", "def", "__init__", "(", "self", ",", "feature_layers", ",", "use_normalization", "=", "True", ",", "\n", "path", "=", "None", ")", ":", "\n", "        ", "super", "(", "PerceptualVGG19", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "path", "!=", "''", "and", "path", "is", "not", "None", ":", "\n", "            ", "print", "(", "'Loading pretrained model'", ")", "\n", "model", "=", "models", ".", "vgg19", "(", "pretrained", "=", "False", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "path", ")", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "models", ".", "vgg19", "(", "pretrained", "=", "True", ")", "\n", "", "model", ".", "float", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "feature_layers", "=", "feature_layers", "\n", "\n", "self", ".", "mean", "=", "torch", ".", "FloatTensor", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", "\n", "self", ".", "mean_tensor", "=", "None", "\n", "\n", "self", ".", "std", "=", "torch", ".", "FloatTensor", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "self", ".", "std_tensor", "=", "None", "\n", "\n", "self", ".", "use_normalization", "=", "use_normalization", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "self", ".", "mean", "=", "self", ".", "mean", ".", "cuda", "(", ")", "\n", "self", ".", "std", "=", "self", ".", "std", ".", "cuda", "(", ")", "\n", "\n", "", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.loss_models.PerceptualVGG19.normalize": [[42, 52], ["loss_models.PerceptualVGG19.mean.view().expand", "loss_models.PerceptualVGG19.std.view().expand", "x.size", "x.size", "loss_models.PerceptualVGG19.mean.view", "loss_models.PerceptualVGG19.std.view"], "methods", ["None"], ["", "", "def", "normalize", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "use_normalization", ":", "\n", "            ", "return", "x", "\n", "\n", "", "if", "self", ".", "mean_tensor", "is", "None", ":", "\n", "            ", "self", ".", "mean_tensor", "=", "self", ".", "mean", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", ".", "expand", "(", "x", ".", "size", "(", ")", ")", "\n", "self", ".", "std_tensor", "=", "self", ".", "std", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", ".", "expand", "(", "x", ".", "size", "(", ")", ")", "\n", "\n", "", "x", "=", "(", "x", "+", "1", ")", "/", "2", "\n", "return", "(", "x", "-", "self", ".", "mean_tensor", ")", "/", "self", ".", "std_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.loss_models.PerceptualVGG19.run": [[53, 65], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "max", "h.clone().view", "features.append", "h.size", "h.clone"], "methods", ["None"], ["", "def", "run", "(", "self", ",", "x", ")", ":", "\n", "        ", "features", "=", "[", "]", "\n", "\n", "h", "=", "x", "\n", "\n", "for", "f", "in", "range", "(", "max", "(", "self", ".", "feature_layers", ")", "+", "1", ")", ":", "\n", "            ", "h", "=", "self", ".", "model", ".", "features", "[", "f", "]", "(", "h", ")", "\n", "if", "f", "in", "self", ".", "feature_layers", ":", "\n", "                ", "not_normed_features", "=", "h", ".", "clone", "(", ")", ".", "view", "(", "h", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "features", ".", "append", "(", "not_normed_features", ")", "\n", "\n", "", "", "return", "None", ",", "torch", ".", "cat", "(", "features", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.loss_models.PerceptualVGG19.forward": [[66, 69], ["loss_models.PerceptualVGG19.normalize", "loss_models.PerceptualVGG19.run"], "methods", ["home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.loss_models.PerceptualVGG19.normalize", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.loss_models.PerceptualVGG19.run"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "self", ".", "normalize", "(", "x", ")", "\n", "return", "self", ".", "run", "(", "h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.loss_models.Noise.__init__": [[72, 76], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.kyleolsz_TB-Networks.pytorch_ssim.__init__.SSIM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "use_noise", ",", "sigma", "=", "0.2", ")", ":", "\n", "        ", "super", "(", "Noise", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_noise", "=", "use_noise", "\n", "self", ".", "sigma", "=", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.loss_models.Noise.forward": [[77, 81], ["T.FloatTensor().normal_", "T.FloatTensor", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "use_noise", ":", "\n", "            ", "return", "x", "+", "self", ".", "sigma", "*", "T", ".", "FloatTensor", "(", "x", ".", "size", "(", ")", ")", ".", "normal_", "(", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.loss_models.PatchImageDiscriminator.__init__": [[84, 114], ["torch.Module.__init__", "layers.append", "layers.append", "layers.append", "layers.append", "layers.append", "layers.append", "layers.append", "range", "layers.append", "layers.append", "layers.append", "layers.append", "layers.append", "layers.append", "torch.Sequential", "torch.Sequential", "loss_models.Noise", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "loss_models.Noise", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "layers.append", "layers.append", "layers.append", "layers.append", "loss_models.Noise", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "loss_models.Noise", "torch.Conv2d", "torch.Conv2d", "loss_models.Noise", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.kyleolsz_TB-Networks.pytorch_ssim.__init__.SSIM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_channels", ",", "ndf", "=", "64", ",", "use_noise", "=", "False", ",", "noise_sigma", "=", "None", ",", "num_intermediate_layers", "=", "0", ")", ":", "\n", "        ", "super", "(", "PatchImageDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "use_noise", "=", "use_noise", "\n", "\n", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "Noise", "(", "use_noise", ",", "sigma", "=", "noise_sigma", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "n_channels", ",", "ndf", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ")", "\n", "\n", "layers", ".", "append", "(", "Noise", "(", "use_noise", ",", "sigma", "=", "noise_sigma", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "ndf", ",", "ndf", "*", "2", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "ndf", "*", "2", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ")", "\n", "\n", "for", "layer_idx", "in", "range", "(", "num_intermediate_layers", ")", ":", "\n", "            ", "layers", ".", "append", "(", "Noise", "(", "use_noise", ",", "sigma", "=", "noise_sigma", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "ndf", "*", "2", ",", "ndf", "*", "2", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "ndf", "*", "2", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ")", "\n", "\n", "", "layers", ".", "append", "(", "Noise", "(", "use_noise", ",", "sigma", "=", "noise_sigma", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "ndf", "*", "2", ",", "ndf", "*", "4", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "ndf", "*", "4", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ")", "\n", "\n", "layers", ".", "append", "(", "Noise", "(", "use_noise", ",", "sigma", "=", "noise_sigma", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "ndf", "*", "4", ",", "1", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ")", "\n", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.loss_models.PatchImageDiscriminator.forward": [[115, 118], ["loss_models.PatchImageDiscriminator.main().squeeze", "loss_models.PatchImageDiscriminator.main"], "methods", ["home.repos.pwc.inspect_result.kyleolsz_TB-Networks.None.test_tbn.main"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "h", "=", "self", ".", "main", "(", "input", ")", ".", "squeeze", "(", ")", "\n", "return", "h", ",", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.pytorch_ssim.__init__.SSIM.__init__": [[40, 46], ["super().__init__", "__init__.create_window"], "methods", ["home.repos.pwc.inspect_result.kyleolsz_TB-Networks.pytorch_ssim.__init__.SSIM.__init__", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.pytorch_ssim.__init__.create_window"], ["    ", "def", "__init__", "(", "self", ",", "window_size", "=", "11", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "SSIM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "window_size", "=", "window_size", "\n", "self", ".", "size_average", "=", "size_average", "\n", "self", ".", "channel", "=", "1", "\n", "self", ".", "window", "=", "create_window", "(", "window_size", ",", "self", ".", "channel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.pytorch_ssim.__init__.SSIM.forward": [[47, 64], ["img1.size", "__init__._ssim", "__init__.create_window", "window.cuda.cuda.type_as", "__init__.SSIM.window.data.type", "img1.data.type", "window.cuda.cuda.cuda", "img1.get_device"], "methods", ["home.repos.pwc.inspect_result.kyleolsz_TB-Networks.pytorch_ssim.__init__._ssim", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.pytorch_ssim.__init__.create_window"], ["", "def", "forward", "(", "self", ",", "img1", ",", "img2", ")", ":", "\n", "        ", "(", "_", ",", "channel", ",", "_", ",", "_", ")", "=", "img1", ".", "size", "(", ")", "\n", "\n", "if", "channel", "==", "self", ".", "channel", "and", "self", ".", "window", ".", "data", ".", "type", "(", ")", "==", "img1", ".", "data", ".", "type", "(", ")", ":", "\n", "            ", "window", "=", "self", ".", "window", "\n", "", "else", ":", "\n", "            ", "window", "=", "create_window", "(", "self", ".", "window_size", ",", "channel", ")", "\n", "\n", "if", "img1", ".", "is_cuda", ":", "\n", "                ", "window", "=", "window", ".", "cuda", "(", "img1", ".", "get_device", "(", ")", ")", "\n", "", "window", "=", "window", ".", "type_as", "(", "img1", ")", "\n", "\n", "self", ".", "window", "=", "window", "\n", "self", ".", "channel", "=", "channel", "\n", "\n", "\n", "", "return", "_ssim", "(", "img1", ",", "img2", ",", "window", ",", "self", ".", "window_size", ",", "channel", ",", "self", ".", "size_average", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.pytorch_ssim.__init__.gaussian": [[7, 10], ["torch.Tensor", "torch.Tensor", "torch.Tensor.sum", "math.exp", "range", "float"], "function", ["None"], ["def", "gaussian", "(", "window_size", ",", "sigma", ")", ":", "\n", "    ", "gauss", "=", "torch", ".", "Tensor", "(", "[", "exp", "(", "-", "(", "x", "-", "window_size", "//", "2", ")", "**", "2", "/", "float", "(", "2", "*", "sigma", "**", "2", ")", ")", "for", "x", "in", "range", "(", "window_size", ")", "]", ")", "\n", "return", "gauss", "/", "gauss", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.pytorch_ssim.__init__.create_window": [[11, 16], ["gaussian().unsqueeze", "gaussian().unsqueeze.mm().float().unsqueeze().unsqueeze", "torch.autograd.Variable", "_1D_window.mm().float().unsqueeze().unsqueeze.expand().contiguous", "__init__.gaussian", "gaussian().unsqueeze.mm().float().unsqueeze", "_1D_window.mm().float().unsqueeze().unsqueeze.expand", "gaussian().unsqueeze.mm().float", "gaussian().unsqueeze.mm", "gaussian().unsqueeze.t"], "function", ["home.repos.pwc.inspect_result.kyleolsz_TB-Networks.pytorch_ssim.__init__.gaussian"], ["", "def", "create_window", "(", "window_size", ",", "channel", ")", ":", "\n", "    ", "_1D_window", "=", "gaussian", "(", "window_size", ",", "0.5", ")", ".", "unsqueeze", "(", "1", ")", "\n", "_2D_window", "=", "_1D_window", ".", "mm", "(", "_1D_window", ".", "t", "(", ")", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "window", "=", "Variable", "(", "_2D_window", ".", "expand", "(", "channel", ",", "1", ",", "window_size", ",", "window_size", ")", ".", "contiguous", "(", ")", ")", "\n", "return", "window", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.pytorch_ssim.__init__._ssim": [[17, 38], ["torch.conv2d", "torch.conv2d", "F.conv2d.pow", "F.conv2d.pow", "torch.conv2d", "torch.conv2d", "torch.conv2d", "ssim_map.mean", "ssim_map.mean().mean().mean", "ssim_map.mean().mean", "ssim_map.mean"], "function", ["None"], ["", "def", "_ssim", "(", "img1", ",", "img2", ",", "window", ",", "window_size", ",", "channel", ",", "size_average", "=", "True", ")", ":", "\n", "    ", "mu1", "=", "F", ".", "conv2d", "(", "img1", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "\n", "mu2", "=", "F", ".", "conv2d", "(", "img2", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "\n", "\n", "mu1_sq", "=", "mu1", ".", "pow", "(", "2", ")", "\n", "mu2_sq", "=", "mu2", ".", "pow", "(", "2", ")", "\n", "mu1_mu2", "=", "mu1", "*", "mu2", "\n", "\n", "sigma1_sq", "=", "F", ".", "conv2d", "(", "img1", "*", "img1", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "-", "mu1_sq", "\n", "sigma2_sq", "=", "F", ".", "conv2d", "(", "img2", "*", "img2", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "-", "mu2_sq", "\n", "sigma12", "=", "F", ".", "conv2d", "(", "img1", "*", "img2", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "-", "mu1_mu2", "\n", "\n", "C1", "=", "0.01", "**", "2", "\n", "C2", "=", "0.03", "**", "2", "\n", "\n", "ssim_map", "=", "(", "(", "2", "*", "mu1_mu2", "+", "C1", ")", "*", "(", "2", "*", "sigma12", "+", "C2", ")", ")", "/", "(", "(", "mu1_sq", "+", "mu2_sq", "+", "C1", ")", "*", "(", "sigma1_sq", "+", "sigma2_sq", "+", "C2", ")", ")", "\n", "\n", "if", "size_average", ":", "\n", "        ", "return", "ssim_map", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "ssim_map", ".", "mean", "(", "1", ")", ".", "mean", "(", "1", ")", ".", "mean", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.pytorch_ssim.__init__.ssim": [[65, 74], ["img1.size", "__init__.create_window", "window.cuda.type_as", "__init__._ssim", "window.cuda.cuda", "img1.get_device"], "function", ["home.repos.pwc.inspect_result.kyleolsz_TB-Networks.pytorch_ssim.__init__.create_window", "home.repos.pwc.inspect_result.kyleolsz_TB-Networks.pytorch_ssim.__init__._ssim"], ["", "", "def", "ssim", "(", "img1", ",", "img2", ",", "window_size", "=", "11", ",", "size_average", "=", "True", ")", ":", "\n", "    ", "(", "_", ",", "channel", ",", "_", ",", "_", ")", "=", "img1", ".", "size", "(", ")", "\n", "window", "=", "create_window", "(", "window_size", ",", "channel", ")", "\n", "\n", "if", "img1", ".", "is_cuda", ":", "\n", "        ", "window", "=", "window", ".", "cuda", "(", "img1", ".", "get_device", "(", ")", ")", "\n", "", "window", "=", "window", ".", "type_as", "(", "img1", ")", "\n", "\n", "return", "_ssim", "(", "img1", ",", "img2", ",", "window", ",", "window_size", ",", "channel", ",", "size_average", ")", "\n", "", ""]]}