{"home.repos.pwc.inspect_result.fodark_anonygan.None.test.test": [[9, 29], ["train.AnonyGAN.load_from_checkpoint", "src.data.dataloader.AnonyDataset", "pytorch_lightning.Trainer", "pl.Trainer.test"], "function", ["home.repos.pwc.inspect_result.fodark_anonygan.eval.verification.test"], ["def", "test", "(", "opt", ")", ":", "\n", "    ", "model", "=", "AnonyGAN", ".", "load_from_checkpoint", "(", "opt", ".", "ckpt", ",", "opt", "=", "opt", ",", "strict", "=", "False", ")", "\n", "# print(\"RD\", opt.reduced_landmarks)", "\n", "dataset", "=", "AnonyDataset", "(", "\n", "opt", ".", "data_root", ",", "\n", "opt", ".", "batch_size", ",", "\n", "opt", ".", "same_percentage", ",", "\n", "opt", ".", "train_same_identity", ",", "\n", "opt", ".", "reduced_landmarks", ",", "\n", "opt", ".", "iciap", ",", "\n", "opt", ".", "lfw", ",", "\n", ")", "\n", "\n", "# training", "\n", "trainer", "=", "pl", ".", "Trainer", "(", "\n", "gpus", "=", "-", "1", ",", "\n", "num_nodes", "=", "1", ",", "\n", "precision", "=", "32", ",", "\n", ")", "\n", "trainer", ".", "test", "(", "model", "=", "model", ",", "datamodule", "=", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.models.discriminator.Discriminator.__init__": [[6, 43], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.CustomImageDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_sigmoid", "=", "False", ")", ":", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "kw", "=", "4", "\n", "padw", "=", "1", "\n", "self", ".", "down1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "64", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "\n", ")", "\n", "self", ".", "down2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "\n", "norm_layer", "(", "128", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "\n", ")", "\n", "self", ".", "down3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "\n", "norm_layer", "(", "256", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "\n", ")", "\n", "self", ".", "down4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "\n", "norm_layer", "(", "512", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "\n", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", ",", "\n", "norm_layer", "(", "512", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "\n", ")", "\n", "\n", "if", "use_sigmoid", ":", "\n", "            ", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "512", ",", "1", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", ",", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "512", ",", "1", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.models.discriminator.Discriminator.forward": [[45, 61], ["discriminator.Discriminator.down1", "out.append", "discriminator.Discriminator.down2", "out.append", "discriminator.Discriminator.down3", "out.append", "discriminator.Discriminator.down4", "out.append", "discriminator.Discriminator.conv1", "out.append", "discriminator.Discriminator.conv2", "out.append"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "[", "]", "\n", "x", "=", "self", ".", "down1", "(", "input", ")", "\n", "out", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "down2", "(", "x", ")", "\n", "out", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "down3", "(", "x", ")", "\n", "out", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "down4", "(", "x", ")", "\n", "out", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "out", ".", "append", "(", "x", ")", "\n", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fodark_anonygan.models.anonygan.AnonyGAN.__init__": [[13, 55], ["pytorch_lightning.LightningModule.__init__", "Generator", "Discriminator", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.L1Loss", "torch.nn.L1Loss", "utils.SpecificNorm", "torch.nn.AvgPool2d", "torch.ones", "torch.zeros", "os.path.join", "os.makedirs", "Discriminator", "Discriminator", "Discriminator", "ArcFace", "torch.nn.CosineSimilarity", "Discriminator", "torch.nn.BCEWithLogitsLoss"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.CustomImageDataset.__init__", "home.repos.pwc.inspect_result.fodark_anonygan.models.load_arcface.ArcFace"], ["    ", "def", "__init__", "(", "self", ",", "opt", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "automatic_optimization", "=", "False", "\n", "\n", "self", ".", "G", "=", "Generator", "(", "\n", "ch_input", "=", "opt", ".", "ch_input", ",", "\n", "use_ch_att", "=", "not", "opt", ".", "no_ch_att", ",", "\n", "reduced_landmarks", "=", "opt", ".", "reduced_landmarks", ",", "\n", ")", "\n", "# self.D_rf = Discriminator(3)", "\n", "self", ".", "D_gan", "=", "Discriminator", "(", "3", "+", "3", ")", "\n", "if", "opt", ".", "double_discriminator", ":", "\n", "            ", "self", ".", "D_gan2", "=", "Discriminator", "(", "3", ")", "\n", "", "if", "opt", ".", "reduced_landmarks", ":", "\n", "            ", "self", ".", "D_pose", "=", "Discriminator", "(", "3", "+", "29", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "D_pose", "=", "Discriminator", "(", "3", "+", "68", ")", "\n", "", "if", "opt", ".", "pretrained_id_discriminator", ":", "\n", "            ", "self", ".", "D_id", "=", "ArcFace", "(", "opt", ".", "arcface_arch", ")", "\n", "", "elif", "opt", ".", "id_discriminator", ":", "\n", "            ", "self", ".", "D_id", "=", "Discriminator", "(", "3", "+", "3", ")", "\n", "\n", "", "self", ".", "gan_criterion", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "self", ".", "pose_criterion", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "if", "opt", ".", "pretrained_id_discriminator", ":", "\n", "            ", "self", ".", "id_criterion", "=", "nn", ".", "CosineSimilarity", "(", ")", "\n", "", "elif", "opt", ".", "id_discriminator", ":", "\n", "            ", "self", ".", "id_criterion", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "", "self", ".", "l1_criterion", "=", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "wfm_criterion", "=", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "sp", "=", "SpecificNorm", "(", ")", "\n", "self", ".", "downsample", "=", "nn", ".", "AvgPool2d", "(", "\n", "3", ",", "stride", "=", "2", ",", "padding", "=", "[", "1", ",", "1", "]", ",", "count_include_pad", "=", "False", "\n", ")", "\n", "\n", "self", ".", "opt", "=", "opt", "\n", "\n", "self", ".", "real_label", "=", "torch", ".", "ones", "(", "(", "opt", ".", "batch_size", ",", "1", ",", "11", ",", "9", ")", ")", "\n", "self", ".", "fake_label", "=", "torch", ".", "zeros", "(", "(", "opt", ".", "batch_size", ",", "1", ",", "11", ",", "9", ")", ")", "\n", "\n", "self", ".", "images_dir", "=", "os", ".", "path", ".", "join", "(", "\"./images\"", ",", "opt", ".", "name", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "images_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.models.anonygan.AnonyGAN.forward": [[56, 58], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.models.anonygan.AnonyGAN.lambda_rule": [[59, 62], ["max", "float"], "methods", ["None"], ["", "def", "lambda_rule", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "lr_l", "=", "1.0", "-", "max", "(", "0", ",", "epoch", "+", "1", "+", "1", "-", "500", ")", "/", "float", "(", "200", "+", "1", ")", "\n", "return", "lr_l", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.models.anonygan.AnonyGAN.configure_optimizers": [[63, 101], ["torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.Adam", "torch.optim.lr_scheduler.LambdaLR", "anonygan.AnonyGAN.G.parameters", "anonygan.AnonyGAN.D_gan.parameters", "torch.optim.Adam", "torch.optim.lr_scheduler.LambdaLR", "anonygan.AnonyGAN.D_pose.parameters", "torch.optim.Adam", "torch.optim.lr_scheduler.LambdaLR", "opts.append", "schs.append", "opts.append", "schs.append", "anonygan.AnonyGAN.D_gan2.parameters", "anonygan.AnonyGAN.D_id.parameters"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "opt_g", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "self", ".", "G", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "opt", ".", "g_lr", ",", "betas", "=", "(", "self", ".", "opt", ".", "beta1", ",", "0.999", ")", "\n", ")", "\n", "opt_d_gan", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "self", ".", "D_gan", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "opt", ".", "lr", ",", "betas", "=", "(", "self", ".", "opt", ".", "beta1", ",", "0.999", ")", "\n", ")", "\n", "\n", "sch_g", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "opt_g", ",", "self", ".", "lambda_rule", ")", "\n", "sch_d_gan", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "opt_d_gan", ",", "self", ".", "lambda_rule", ")", "\n", "\n", "if", "self", ".", "opt", ".", "double_discriminator", ":", "\n", "            ", "opt_d_gan2", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "self", ".", "D_gan2", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "opt", ".", "lr", ",", "betas", "=", "(", "self", ".", "opt", ".", "beta1", ",", "0.999", ")", "\n", ")", "\n", "sch_d_gan2", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "opt_d_gan2", ",", "self", ".", "lambda_rule", ")", "\n", "", "opt_d_pose", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "self", ".", "D_pose", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "opt", ".", "lr", ",", "betas", "=", "(", "self", ".", "opt", ".", "beta1", ",", "0.999", ")", "\n", ")", "\n", "sch_d_pose", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "opt_d_pose", ",", "self", ".", "lambda_rule", ")", "\n", "\n", "if", "self", ".", "opt", ".", "id_discriminator", ":", "\n", "            ", "opt_d_id", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "self", ".", "D_id", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "opt", ".", "lr", ",", "betas", "=", "(", "self", ".", "opt", ".", "beta1", ",", "0.999", ")", "\n", ")", "\n", "sch_d_id", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "opt_d_id", ",", "self", ".", "lambda_rule", ")", "\n", "\n", "", "opts", ",", "schs", "=", "[", "opt_g", ",", "opt_d_gan", ",", "opt_d_pose", "]", ",", "[", "sch_g", ",", "sch_d_gan", ",", "sch_d_pose", "]", "\n", "\n", "if", "self", ".", "opt", ".", "id_discriminator", ":", "\n", "            ", "opts", ".", "append", "(", "opt_d_id", ")", "\n", "schs", ".", "append", "(", "sch_d_id", ")", "\n", "\n", "", "if", "self", ".", "opt", ".", "double_discriminator", ":", "\n", "            ", "opts", ".", "append", "(", "opt_d_gan2", ")", "\n", "schs", ".", "append", "(", "sch_d_gan2", ")", "\n", "\n", "", "return", "opts", ",", "schs", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.models.anonygan.AnonyGAN.training_step": [[103, 316], ["anonygan.AnonyGAN.real_label.to", "anonygan.AnonyGAN.fake_label.to", "anonygan.AnonyGAN.optimizers", "anonygan.AnonyGAN.G", "opt_g.zero_grad", "torch.cat", "torch.cat", "anonygan.AnonyGAN.D_gan", "anonygan.AnonyGAN.D_gan", "anonygan.AnonyGAN.log", "anonygan.AnonyGAN.log", "anonygan.AnonyGAN.manual_backward", "opt_g.step", "opt_d_gan1.zero_grad", "torch.cat", "anonygan.AnonyGAN.gan_criterion", "torch.cat", "anonygan.AnonyGAN.gan_criterion", "anonygan.AnonyGAN.log", "anonygan.AnonyGAN.manual_backward", "opt_d_gan1.step", "opt_d_pose.zero_grad", "anonygan.AnonyGAN.gan_criterion", "anonygan.AnonyGAN.gan_criterion", "anonygan.AnonyGAN.log", "anonygan.AnonyGAN.manual_backward", "opt_d_pose.step", "anonygan.AnonyGAN.lr_schedulers", "anonygan.AnonyGAN.D_gan2", "anonygan.AnonyGAN.D_gan2", "anonygan.AnonyGAN.gan_criterion", "anonygan.AnonyGAN.log", "app_loss.item", "range", "anonygan.AnonyGAN.log", "anonygan.AnonyGAN.D_pose", "anonygan.AnonyGAN.pose_criterion", "pose_loss.item", "torch.nn.functional.interpolate", "anonygan.AnonyGAN.sp", "torch.nn.functional.interpolate", "anonygan.AnonyGAN.sp", "anonygan.AnonyGAN.D_id", "anonygan.AnonyGAN.D_id", "anonygan.AnonyGAN.log", "torch.cat", "[].mean", "anonygan.AnonyGAN.log", "anonygan.AnonyGAN.log", "opt_d_gan2.zero_grad", "anonygan.AnonyGAN.gan_criterion", "anonygan.AnonyGAN.gan_criterion", "anonygan.AnonyGAN.log", "anonygan.AnonyGAN.manual_backward", "opt_d_gan2.step", "anonygan.AnonyGAN.D_gan", "anonygan.AnonyGAN.D_gan", "D_app_loss.item", "anonygan.AnonyGAN.D_pose", "anonygan.AnonyGAN.D_pose", "D_pose_loss.item", "opt_d_id.zero_grad", "torch.cat", "torch.cat", "[].mean", "anonygan.AnonyGAN.gan_criterion", "[].mean", "anonygan.AnonyGAN.gan_criterion", "anonygan.AnonyGAN.log", "anonygan.AnonyGAN.manual_backward", "opt_d_id.step", "sch.step", "torch.cat", "torch.cat", "torch.cat", "anonygan.AnonyGAN.gan_criterion", "gan_loss.item", "wfm_loss.item", "torch.cat", "id_loss.item", "anonygan.AnonyGAN.id_criterion", "id_loss.item", "anonygan.AnonyGAN.l1_criterion", "rec_loss.item", "anonygan.AnonyGAN.D_gan2", "anonygan.AnonyGAN.D_gan2", "D_loss_real.item", "anonygan.AnonyGAN.detach", "torch.cat", "torch.cat", "D_id_loss.item", "len", "anonygan.AnonyGAN.id_criterion().mean", "anonygan.AnonyGAN.detach", "anonygan.AnonyGAN.detach", "anonygan.AnonyGAN.wfm_criterion", "anonygan.AnonyGAN.D_id", "anonygan.AnonyGAN.detach", "anonygan.AnonyGAN.D_id", "anonygan.AnonyGAN.D_id", "gan_real2[].detach", "anonygan.AnonyGAN.id_criterion"], "methods", ["None"], ["", "def", "training_step", "(", "self", ",", "train_batch", ",", "batch_idx", ")", ":", "\n", "        ", "self", ".", "real_label", "=", "self", ".", "real_label", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "fake_label", "=", "self", ".", "fake_label", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "opts", "=", "self", ".", "optimizers", "(", ")", "\n", "opt_g", ",", "opt_d_gan1", ",", "opt_d_pose", "=", "opts", "[", ":", "3", "]", "\n", "if", "self", ".", "opt", ".", "double_discriminator", ":", "\n", "            ", "opt_d_gan2", "=", "opts", "[", "-", "1", "]", "\n", "", "if", "self", ".", "opt", ".", "id_discriminator", ":", "\n", "            ", "opt_d_id", "=", "opts", "[", "3", "]", "\n", "\n", "", "input_P1", ",", "input_BP1", "=", "train_batch", "[", "\"P1\"", "]", ",", "train_batch", "[", "\"BP1\"", "]", "\n", "masked_P2", ",", "input_BP2", "=", "train_batch", "[", "\"masked_P2\"", "]", ",", "train_batch", "[", "\"BP2\"", "]", "\n", "input_P2", "=", "train_batch", "[", "\"P2\"", "]", "\n", "same", "=", "train_batch", "[", "\"same\"", "]", "\n", "\n", "if", "self", ".", "opt", ".", "ch_input", "==", "6", ":", "\n", "            ", "G_input", "=", "[", "\n", "torch", ".", "cat", "(", "(", "input_P1", ",", "masked_P2", ")", ",", "dim", "=", "1", ")", ",", "\n", "torch", ".", "cat", "(", "(", "input_BP1", ",", "input_BP2", ")", ",", "dim", "=", "1", ")", ",", "\n", "]", "\n", "", "else", ":", "\n", "            ", "G_input", "=", "[", "\n", "input_P1", ",", "\n", "torch", ".", "cat", "(", "(", "input_BP1", ",", "input_BP2", ")", ",", "dim", "=", "1", ")", ",", "\n", "]", "\n", "\n", "", "fake_P2", "=", "self", ".", "G", "(", "G_input", ")", "\n", "if", "self", ".", "opt", ".", "ch_input", "==", "3", ":", "\n", "            ", "fake_P2", "=", "(", "1.0", "-", "train_batch", "[", "\"mask\"", "]", ")", "*", "input_P2", "+", "train_batch", "[", "\n", "\"mask\"", "\n", "]", "*", "fake_P2", "\n", "\n", "# === TRAINING G ===", "\n", "", "opt_g", ".", "zero_grad", "(", ")", "\n", "\n", "## real/fake", "\n", "fake_pair", "=", "torch", ".", "cat", "(", "(", "fake_P2", ",", "input_P1", ")", ",", "dim", "=", "1", ")", "\n", "real_pair", "=", "torch", ".", "cat", "(", "(", "input_P2", ",", "input_P1", ")", ",", "dim", "=", "1", ")", "\n", "gan_real1", "=", "self", ".", "D_gan", "(", "real_pair", ")", "\n", "\n", "if", "self", ".", "opt", ".", "double_discriminator", ":", "\n", "            ", "gan_real2", "=", "self", ".", "D_gan2", "(", "input_P1", ")", "# input_P2", "\n", "real_features", "=", "[", "gan_real2", "]", "\n", "", "else", ":", "\n", "            ", "real_features", "=", "[", "gan_real1", "]", "\n", "\n", "", "gan_fake1", "=", "self", ".", "D_gan", "(", "fake_pair", ")", "\n", "\n", "if", "self", ".", "opt", ".", "double_discriminator", ":", "\n", "            ", "gan_fake2", "=", "self", ".", "D_gan2", "(", "fake_P2", ")", "\n", "fake_features", "=", "[", "gan_fake2", "]", "\n", "", "else", ":", "\n", "            ", "fake_features", "=", "[", "gan_fake1", "]", "\n", "\n", "", "app_loss", "=", "(", "\n", "self", ".", "gan_criterion", "(", "gan_fake1", "[", "-", "1", "]", ",", "self", ".", "real_label", ")", "*", "self", ".", "opt", ".", "lambda_gan", "\n", ")", "\n", "\n", "gan_loss", "=", "0.0", "\n", "if", "self", ".", "opt", ".", "double_discriminator", ":", "\n", "            ", "gan_loss", "=", "(", "\n", "self", ".", "gan_criterion", "(", "gan_fake2", "[", "-", "1", "]", ",", "self", ".", "real_label", ")", "*", "self", ".", "opt", ".", "lambda_gan", "\n", ")", "\n", "self", ".", "log", "(", "\"G/RF\"", ",", "gan_loss", ".", "item", "(", ")", ",", "prog_bar", "=", "True", ")", "\n", "# else:", "\n", "#     gan_loss2 = app_loss", "\n", "# gan_loss = (app_loss + gan_loss2) / 2", "\n", "", "self", ".", "log", "(", "\"G/APP\"", ",", "app_loss", ".", "item", "(", ")", ",", "prog_bar", "=", "True", ")", "\n", "\n", "## WFM", "\n", "wfm_loss", "=", "0.0", "\n", "if", "not", "self", ".", "opt", ".", "no_wfm", ":", "\n", "            ", "n_layers_D", "=", "4", "\n", "\n", "if", "self", ".", "opt", ".", "yiming", ":", "\n", "                ", "gan_real2", "=", "gan_real1", "\n", "gan_fake2", "=", "gan_fake1", "\n", "\n", "", "feat_weights", "=", "4.0", "/", "(", "n_layers_D", "+", "1", ")", "\n", "D_weights", "=", "1.0", "\n", "for", "j", "in", "range", "(", "0", ",", "len", "(", "gan_fake2", ")", "-", "1", ")", ":", "\n", "                ", "tmp_loss", "=", "(", "\n", "D_weights", "\n", "*", "feat_weights", "\n", "*", "self", ".", "wfm_criterion", "(", "gan_fake2", "[", "j", "]", ",", "gan_real2", "[", "j", "]", ".", "detach", "(", ")", ")", "\n", "*", "self", ".", "opt", ".", "lambda_wfm", "\n", ")", "\n", "wfm_loss", "+=", "tmp_loss", "\n", "\n", "", "self", ".", "log", "(", "\"G/WFM\"", ",", "wfm_loss", ".", "item", "(", ")", ",", "prog_bar", "=", "True", ")", "\n", "\n", "## pose", "\n", "", "pose_fake", "=", "self", ".", "D_pose", "(", "torch", ".", "cat", "(", "(", "fake_P2", ",", "input_BP2", ")", ",", "1", ")", ")", "[", "-", "1", "]", "\n", "pose_loss", "=", "(", "\n", "self", ".", "pose_criterion", "(", "pose_fake", ",", "self", ".", "real_label", ")", "*", "self", ".", "opt", ".", "lambda_pose", "\n", ")", "\n", "self", ".", "log", "(", "\"G/POSE\"", ",", "pose_loss", ".", "item", "(", ")", ")", "\n", "\n", "## id", "\n", "id_loss", "=", "0.0", "\n", "if", "self", ".", "opt", ".", "pretrained_id_discriminator", ":", "\n", "            ", "condition_resized", "=", "F", ".", "interpolate", "(", "input_P1", ",", "(", "112", ",", "112", ")", ")", "\n", "condition_resized", "=", "self", ".", "sp", "(", "condition_resized", ")", "\n", "fake_resized", "=", "F", ".", "interpolate", "(", "fake_P2", ",", "(", "112", ",", "112", ")", ")", "\n", "fake_resized", "=", "self", ".", "sp", "(", "fake_resized", ")", "\n", "id_embedding_real", "=", "self", ".", "D_id", "(", "condition_resized", ")", "\n", "id_embedding_fake", "=", "self", ".", "D_id", "(", "fake_resized", ")", "\n", "\n", "id_loss", "=", "(", "\n", "1", "-", "self", ".", "id_criterion", "(", "id_embedding_real", ",", "id_embedding_fake", ")", ".", "mean", "(", ")", "\n", ")", "*", "self", ".", "opt", ".", "lambda_id", "\n", "self", ".", "log", "(", "\"G/ID\"", ",", "id_loss", ".", "item", "(", ")", ")", "\n", "\n", "", "if", "self", ".", "opt", ".", "id_discriminator", ":", "\n", "            ", "fake_pair", "=", "torch", ".", "cat", "(", "[", "input_P1", ",", "fake_P2", "]", ",", "dim", "=", "1", ")", "\n", "id_fake", "=", "self", ".", "D_id", "(", "fake_pair", ")", "[", "-", "1", "]", ".", "mean", "(", "dim", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "id_loss", "=", "self", ".", "id_criterion", "(", "id_fake", ",", "self", ".", "real_label", ")", "*", "self", ".", "opt", ".", "lambda_id", "\n", "self", ".", "log", "(", "\"G/ID\"", ",", "id_loss", ".", "item", "(", ")", ",", "prog_bar", "=", "True", ")", "\n", "\n", "## reconstruction", "\n", "", "rec_loss", "=", "0.0", "\n", "if", "not", "self", ".", "opt", ".", "no_l1", "and", "self", ".", "opt", ".", "train_same_identity", ":", "\n", "            ", "generated_P2", "=", "(", "1.0", "-", "train_batch", "[", "\"mask\"", "]", ")", "*", "input_P2", "+", "train_batch", "[", "\n", "\"mask\"", "\n", "]", "*", "fake_P2", "\n", "fake_filtered", ",", "real_filtered", "=", "generated_P2", "[", "same", "]", ",", "input_P2", "[", "same", "]", "\n", "rec_loss", "=", "(", "\n", "self", ".", "l1_criterion", "(", "fake_filtered", ",", "real_filtered", ")", "*", "self", ".", "opt", ".", "lambda_rec", "\n", ")", "\n", "self", ".", "log", "(", "\"G/L1\"", ",", "rec_loss", ".", "item", "(", ")", ",", "prog_bar", "=", "True", ")", "\n", "\n", "", "total_loss", "=", "gan_loss", "+", "app_loss", "+", "wfm_loss", "+", "pose_loss", "+", "id_loss", "+", "rec_loss", "\n", "\n", "self", ".", "manual_backward", "(", "total_loss", ")", "\n", "opt_g", ".", "step", "(", ")", "\n", "\n", "# === TRAINING D RF", "\n", "\n", "if", "self", ".", "opt", ".", "double_discriminator", ":", "\n", "            ", "opt_d_gan2", ".", "zero_grad", "(", ")", "\n", "\n", "fea2_real", "=", "self", ".", "D_gan2", "(", "input_P1", ")", "[", "-", "1", "]", "# input_P2", "\n", "fea2_fake", "=", "self", ".", "D_gan2", "(", "fake_P2", ".", "detach", "(", ")", ")", "[", "-", "1", "]", "\n", "\n", "loss_D_real2", "=", "self", ".", "gan_criterion", "(", "fea2_real", ",", "self", ".", "real_label", ")", "\n", "loss_D_fake2", "=", "self", ".", "gan_criterion", "(", "fea2_fake", ",", "self", ".", "fake_label", ")", "\n", "\n", "D_loss_real", "=", "(", "loss_D_real2", "+", "loss_D_fake2", ")", "/", "2", "\n", "self", ".", "log", "(", "\"D/RF\"", ",", "D_loss_real", ".", "item", "(", ")", ")", "\n", "\n", "self", ".", "manual_backward", "(", "D_loss_real", ")", "\n", "opt_d_gan2", ".", "step", "(", ")", "\n", "\n", "# === TRAINING D APP ===", "\n", "\n", "", "opt_d_gan1", ".", "zero_grad", "(", ")", "\n", "\n", "# D_Fake", "\n", "fake_pair", "=", "torch", ".", "cat", "(", "(", "fake_P2", ".", "detach", "(", ")", ",", "input_P1", ")", ",", "dim", "=", "1", ")", "\n", "fea1_fake", "=", "self", ".", "D_gan", "(", "fake_pair", ")", "[", "-", "1", "]", "\n", "loss_D_fake1", "=", "self", ".", "gan_criterion", "(", "fea1_fake", ",", "self", ".", "fake_label", ")", "\n", "\n", "# D_Real", "\n", "real_pair", "=", "torch", ".", "cat", "(", "(", "input_P2", ",", "input_P1", ")", ",", "dim", "=", "1", ")", "\n", "fea1_real", "=", "self", ".", "D_gan", "(", "real_pair", ")", "[", "-", "1", "]", "\n", "loss_D_real1", "=", "self", ".", "gan_criterion", "(", "fea1_real", ",", "self", ".", "real_label", ")", "\n", "\n", "D_app_loss", "=", "(", "loss_D_fake1", "+", "loss_D_real1", ")", "/", "2", "*", "self", ".", "opt", ".", "lambda_gan", "\n", "self", ".", "log", "(", "\"D/APP\"", ",", "D_app_loss", ".", "item", "(", ")", ")", "\n", "\n", "self", ".", "manual_backward", "(", "D_app_loss", ")", "\n", "opt_d_gan1", ".", "step", "(", ")", "\n", "\n", "# === TRAINING D POSE ===", "\n", "opt_d_pose", ".", "zero_grad", "(", ")", "\n", "\n", "fea1_fake", "=", "self", ".", "D_pose", "(", "torch", ".", "cat", "(", "(", "fake_P2", ".", "detach", "(", ")", ",", "input_BP2", ")", ",", "1", ")", ")", "[", "-", "1", "]", "\n", "loss_D_fake1", "=", "self", ".", "gan_criterion", "(", "fea1_fake", ",", "self", ".", "fake_label", ")", "\n", "\n", "# D_Real", "\n", "fea1_real", "=", "self", ".", "D_pose", "(", "torch", ".", "cat", "(", "(", "input_P2", ",", "input_BP2", ")", ",", "1", ")", ")", "[", "-", "1", "]", "\n", "loss_D_real1", "=", "self", ".", "gan_criterion", "(", "fea1_real", ",", "self", ".", "real_label", ")", "\n", "\n", "D_pose_loss", "=", "(", "loss_D_fake1", "+", "loss_D_real1", ")", "/", "2", "*", "self", ".", "opt", ".", "lambda_pose", "\n", "self", ".", "log", "(", "\"D/POSE\"", ",", "D_pose_loss", ".", "item", "(", ")", ")", "\n", "\n", "self", ".", "manual_backward", "(", "D_pose_loss", ")", "\n", "opt_d_pose", ".", "step", "(", ")", "\n", "\n", "# === TRAINING D ID IF NEEDED ===", "\n", "if", "self", ".", "opt", ".", "id_discriminator", ":", "\n", "            ", "opt_d_id", ".", "zero_grad", "(", ")", "\n", "\n", "fake_pair", "=", "torch", ".", "cat", "(", "[", "input_P1", ",", "fake_P2", ".", "detach", "(", ")", "]", ",", "dim", "=", "1", ")", "\n", "real_pair", "=", "torch", ".", "cat", "(", "[", "input_P1", ",", "input_P2", "]", ",", "dim", "=", "1", ")", "\n", "\n", "fea1_fake", "=", "self", ".", "D_id", "(", "fake_pair", ")", "[", "-", "1", "]", ".", "mean", "(", "dim", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "loss_D_fake1", "=", "self", ".", "gan_criterion", "(", "fea1_fake", ",", "self", ".", "fake_label", ")", "\n", "\n", "# D_Real", "\n", "fea1_real", "=", "self", ".", "D_id", "(", "real_pair", ")", "[", "-", "1", "]", ".", "mean", "(", "dim", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "loss_D_real1", "=", "self", ".", "gan_criterion", "(", "fea1_real", ",", "self", ".", "real_label", ")", "\n", "\n", "D_id_loss", "=", "(", "loss_D_fake1", "+", "loss_D_real1", ")", "/", "2", "*", "self", ".", "opt", ".", "lambda_id", "\n", "self", ".", "log", "(", "\"D/ID\"", ",", "D_id_loss", ".", "item", "(", ")", ")", "\n", "\n", "self", ".", "manual_backward", "(", "D_id_loss", ")", "\n", "opt_d_id", ".", "step", "(", ")", "\n", "\n", "# end of batch, schedule lr", "\n", "", "for", "sch", "in", "self", ".", "lr_schedulers", "(", ")", ":", "\n", "            ", "sch", ".", "step", "(", "self", ".", "current_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.models.anonygan.AnonyGAN.validation_step": [[317, 342], ["anonygan.AnonyGAN.G", "utils.get_current_visuals", "PIL.Image.fromarray", "PIL.Image.fromarray.save", "os.path.join", "torch.cat", "torch.cat", "torch.cat", "str"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.models.utils.get_current_visuals"], ["", "", "def", "validation_step", "(", "self", ",", "train_batch", ",", "batch_idx", ")", ":", "\n", "        ", "input_P1", ",", "input_BP1", "=", "train_batch", "[", "\"P1\"", "]", ",", "train_batch", "[", "\"BP1\"", "]", "\n", "masked_P2", ",", "input_BP2", "=", "train_batch", "[", "\"masked_P2\"", "]", ",", "train_batch", "[", "\"BP2\"", "]", "\n", "input_P2", "=", "train_batch", "[", "\"P2\"", "]", "\n", "\n", "if", "self", ".", "opt", ".", "ch_input", "==", "6", ":", "\n", "            ", "G_input", "=", "[", "\n", "torch", ".", "cat", "(", "(", "input_P1", ",", "masked_P2", ")", ",", "dim", "=", "1", ")", ",", "\n", "torch", ".", "cat", "(", "(", "input_BP1", ",", "input_BP2", ")", ",", "dim", "=", "1", ")", ",", "\n", "]", "\n", "", "else", ":", "\n", "            ", "G_input", "=", "[", "\n", "input_P1", ",", "\n", "torch", ".", "cat", "(", "(", "input_BP1", ",", "input_BP2", ")", ",", "dim", "=", "1", ")", ",", "\n", "]", "\n", "\n", "", "fake_P2", "=", "self", ".", "G", "(", "G_input", ")", "\n", "generated_P2", "=", "(", "1.0", "-", "train_batch", "[", "\"mask\"", "]", ")", "*", "input_P2", "+", "train_batch", "[", "\n", "\"mask\"", "\n", "]", "*", "fake_P2", "# masked_P2 + train_batch[\"mask\"] * fake_P2", "\n", "viz", "=", "get_current_visuals", "(", "\n", "input_P1", ",", "input_P2", ",", "masked_P2", ",", "input_BP1", ",", "input_BP2", ",", "fake_P2", ",", "generated_P2", "\n", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "viz", ")", "\n", "img", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "images_dir", ",", "str", "(", "self", ".", "current_epoch", ")", "+", "\".jpg\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.models.anonygan.AnonyGAN.test_step": [[343, 370], ["anonygan.AnonyGAN.G", "PIL.Image.fromarray", "PIL.Image.fromarray.save", "utils.tensor2im", "os.path.join", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.models.utils.tensor2im"], ["", "def", "test_step", "(", "self", ",", "test_batch", ",", "batch_idx", ")", ":", "\n", "        ", "input_P1", ",", "input_BP1", "=", "test_batch", "[", "\"P1\"", "]", ",", "test_batch", "[", "\"BP1\"", "]", "\n", "masked_P2", ",", "input_BP2", "=", "test_batch", "[", "\"masked_P2\"", "]", ",", "test_batch", "[", "\"BP2\"", "]", "\n", "input_P2", "=", "test_batch", "[", "\"P2\"", "]", "\n", "P1_name", ",", "P2_name", "=", "test_batch", "[", "\"P1_path\"", "]", ",", "test_batch", "[", "\"P2_path\"", "]", "\n", "\n", "if", "self", ".", "opt", ".", "ch_input", "==", "6", ":", "\n", "            ", "G_input", "=", "[", "\n", "torch", ".", "cat", "(", "(", "input_P1", ",", "masked_P2", ")", ",", "dim", "=", "1", ")", ",", "\n", "torch", ".", "cat", "(", "(", "input_BP1", ",", "input_BP2", ")", ",", "dim", "=", "1", ")", ",", "\n", "]", "\n", "", "else", ":", "\n", "            ", "G_input", "=", "[", "\n", "input_P1", ",", "\n", "torch", ".", "cat", "(", "(", "input_BP1", ",", "input_BP2", ")", ",", "dim", "=", "1", ")", ",", "\n", "]", "\n", "\n", "", "fake_P2", "=", "self", ".", "G", "(", "G_input", ")", "\n", "generated_P2", "=", "(", "1.0", "-", "test_batch", "[", "\"mask\"", "]", ")", "*", "input_P2", "+", "test_batch", "[", "\n", "\"mask\"", "\n", "]", "*", "fake_P2", "\n", "# print('f', fake_P2.shape)", "\n", "img", "=", "Image", ".", "fromarray", "(", "tensor2im", "(", "fake_P2", ".", "data", ")", ")", "\n", "img", ".", "save", "(", "\n", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "opt", ".", "output_path", ",", "\n", "P2_name", "[", "0", "]", "+", "\".jpg\"", "\n", "# P1_name[0] + \"_\" + P2_name[0].split(\"/\")[1] + \".jpg\",", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.models.utils_modules_new.GCN.__init__": [[9, 14], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.CustomImageDataset.__init__"], ["def", "__init__", "(", "self", ",", "num_state", ",", "num_node", ",", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "GCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv1d", "(", "num_node", ",", "num_node", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv1d", "(", "num_state", ",", "num_state", ",", "kernel_size", "=", "1", ",", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.models.utils_modules_new.GCN.forward": [[15, 25], ["einops.rearrange", "utils_modules_new.GCN.conv1", "einops.rearrange", "utils_modules_new.GCN.conv2", "utils_modules_new.GCN.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# (n, num_state, num_node) -> (n, num_node, num_state)", "\n", "        ", "h", "=", "rearrange", "(", "x", ",", "\"b s n -> b n s\"", ")", "\n", "h", "=", "self", ".", "conv1", "(", "h", ")", "\n", "# (n, num_node, num_state) -> (n, num_state, num_node)", "\n", "h", "=", "rearrange", "(", "h", ",", "\"b n s -> b s n\"", ")", "\n", "h", "=", "h", "+", "x", "\n", "# (n, num_state, num_node) -> (n, num_state, num_node)", "\n", "h", "=", "self", ".", "conv2", "(", "self", ".", "relu", "(", "h", ")", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.models.utils_modules_new.GloRe_Unit_2D.__init__": [[28, 51], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "utils_modules_new.GCN", "utils_modules_new.GCN", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.CustomImageDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_input", ",", "num_mid", ",", "normalize", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "normalize", "=", "normalize", "\n", "self", ".", "num_states", "=", "2", "*", "num_mid", "\n", "self", ".", "num_nodes", "=", "num_mid", "\n", "\n", "# reduce dim", "\n", "self", ".", "conv_state", "=", "nn", ".", "Conv2d", "(", "num_input", ",", "self", ".", "num_states", ",", "kernel_size", "=", "1", ")", "\n", "# projection map", "\n", "self", ".", "conv_proj", "=", "nn", ".", "Conv2d", "(", "num_input", ",", "self", ".", "num_nodes", ",", "kernel_size", "=", "1", ")", "\n", "# ----------", "\n", "# reasoning via graph convolution", "\n", "self", ".", "gcn1", "=", "GCN", "(", "num_state", "=", "self", ".", "num_states", ",", "num_node", "=", "self", ".", "num_nodes", ")", "\n", "self", ".", "gcn2", "=", "GCN", "(", "num_state", "=", "self", ".", "num_states", ",", "num_node", "=", "self", ".", "num_nodes", ")", "\n", "# ----------", "\n", "# extend dimension", "\n", "self", ".", "conv_extend", "=", "nn", ".", "Conv2d", "(", "\n", "self", ".", "num_states", ",", "num_input", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "\n", "self", ".", "blocker", "=", "nn", ".", "BatchNorm2d", "(", "\n", "num_input", ",", "eps", "=", "1e-04", "\n", ")", "# should be zero initialized", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.models.utils_modules_new.GloRe_Unit_2D.forward": [[53, 124], ["utils_modules_new.GloRe_Unit_2D.conv_state", "einops.rearrange", "utils_modules_new.GloRe_Unit_2D.conv_state", "einops.rearrange", "utils_modules_new.GloRe_Unit_2D.conv_proj", "einops.rearrange", "utils_modules_new.GloRe_Unit_2D.conv_proj", "einops.rearrange", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "utils_modules_new.GloRe_Unit_2D.gcn1", "utils_modules_new.GloRe_Unit_2D.gcn2", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "einops.rearrange", "einops.rearrange", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "print", "utils_modules_new.GloRe_Unit_2D.blocker", "utils_modules_new.GloRe_Unit_2D.blocker", "utils_modules_new.GloRe_Unit_2D.conv_extend", "utils_modules_new.GloRe_Unit_2D.conv_extend", "torch.einsum.size", "torch.einsum.size", "torch.einsum.size", "torch.einsum.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        :param x: (n, c, d, h, w)\n        \"\"\"", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "# print(\"b\", b, \"c\", c, \"h\", h, \"w\", w)", "\n", "\n", "# n = x.size(0)", "\n", "#         c = torch.div(x.size(1),2).item()", "\n", "c_half", "=", "c", "//", "2", "\n", "\n", "x1", "=", "x", "[", ":", ",", ":", "c_half", "]", "\n", "x2", "=", "x", "[", ":", ",", "c_half", ":", "]", "\n", "\n", "# (n, num_in, h, w) --> (n, num_state, h, w)", "\n", "#                   --> (n, num_state, h*w)", "\n", "x_state_reshaped1", "=", "self", ".", "conv_state", "(", "x1", ")", "\n", "x_state_reshaped1", "=", "rearrange", "(", "x_state_reshaped1", ",", "\"b c h w -> b c (h w)\"", ")", "\n", "\n", "x_state_reshaped2", "=", "self", ".", "conv_state", "(", "x2", ")", "\n", "x_state_reshaped2", "=", "rearrange", "(", "x_state_reshaped2", ",", "\"b c h w -> b c (h w)\"", ")", "\n", "\n", "# (n, num_in, h, w) --> (n, num_node, h, w)", "\n", "#                   --> (n, num_node, h*w)", "\n", "x_proj_reshaped1", "=", "self", ".", "conv_proj", "(", "x2", ")", "\n", "x_proj_reshaped1", "=", "rearrange", "(", "x_proj_reshaped1", ",", "\"b c h w -> b c (h w)\"", ")", "\n", "\n", "x_proj_reshaped2", "=", "self", ".", "conv_proj", "(", "x1", ")", "\n", "x_proj_reshaped2", "=", "rearrange", "(", "x_proj_reshaped2", ",", "\"b c h w -> b c (h w)\"", ")", "\n", "\n", "# (n, num_in, h, w) --> (n, num_node, h, w)", "\n", "#                   --> (n, num_node, h*w)", "\n", "x_rproj_reshaped1", "=", "x_proj_reshaped1", "\n", "x_rproj_reshaped2", "=", "x_proj_reshaped2", "\n", "\n", "# projection: coordinate space -> interaction space", "\n", "# (n, num_state, h*w) x (n, num_node, h*w)T --> (n, num_state, num_node)", "\n", "x_n_state1", "=", "torch", ".", "einsum", "(", "\n", "\"b s d, b n d -> b s n\"", ",", "x_state_reshaped1", ",", "x_proj_reshaped1", "\n", ")", "\n", "x_n_state2", "=", "torch", ".", "einsum", "(", "\n", "\"b s d, b n d -> b s n\"", ",", "x_state_reshaped2", ",", "x_proj_reshaped2", "\n", ")", "\n", "\n", "if", "self", ".", "normalize", ":", "\n", "            ", "print", "(", "\"using normalize\"", ")", "\n", "x_n_state1", "=", "x_n_state1", "*", "(", "1.0", "/", "x_state_reshaped1", ".", "size", "(", "2", ")", ")", "\n", "x_n_state2", "=", "x_n_state2", "*", "(", "1.0", "/", "x_state_reshaped2", ".", "size", "(", "2", ")", ")", "\n", "\n", "# reasoning: (n, num_state, num_node) -> (n, num_state, num_node)", "\n", "", "x_n_rel1", "=", "self", ".", "gcn1", "(", "x_n_state1", ")", "\n", "x_n_rel2", "=", "self", ".", "gcn2", "(", "x_n_state2", ")", "\n", "\n", "# reverse projection: interaction space -> coordinate space", "\n", "# (n, num_state, num_node) x (n, num_node, h*w) --> (n, num_state, h*w)", "\n", "x_state_reshaped1", "=", "torch", ".", "einsum", "(", "\n", "\"b s n, b n d -> b s d\"", ",", "x_n_rel1", ",", "x_rproj_reshaped1", "\n", ")", "\n", "x_state_reshaped2", "=", "torch", ".", "einsum", "(", "\n", "\"b s n, b n d -> b s d\"", ",", "x_n_rel2", ",", "x_rproj_reshaped2", "\n", ")", "\n", "\n", "# (n, num_state, h*w) --> (n, num_state, h, w)", "\n", "x_state1", "=", "rearrange", "(", "x_state_reshaped1", ",", "\"b s (h w) -> b s h w\"", ",", "h", "=", "h", ",", "w", "=", "w", ")", "\n", "x_state2", "=", "rearrange", "(", "x_state_reshaped2", ",", "\"b s (h w) -> b s h w\"", ",", "h", "=", "h", ",", "w", "=", "w", ")", "\n", "\n", "# (n, num_state, h, w) -> (n, num_in, h, w)", "\n", "out1", "=", "x1", "+", "self", ".", "blocker", "(", "self", ".", "conv_extend", "(", "x_state1", ")", ")", "\n", "out2", "=", "x2", "+", "self", ".", "blocker", "(", "self", ".", "conv_extend", "(", "x_state2", ")", ")", "\n", "\n", "return", "torch", ".", "cat", "(", "(", "out1", ",", "out2", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.models.utils_modules_new.GraphBlock.__init__": [[127, 134], ["torch.Module.__init__", "utils_modules_new.GraphBlock.build_conv_block", "utils_modules_new.GraphBlock.build_conv_block", "utils_modules_new.GloRe_Unit_2D"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.CustomImageDataset.__init__", "home.repos.pwc.inspect_result.fodark_anonygan.models.utils_modules_old.GraphBlock.build_conv_block", "home.repos.pwc.inspect_result.fodark_anonygan.models.utils_modules_old.GraphBlock.build_conv_block"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "use_bias", ",", "cated_stream2", "=", "False", ")", ":", "\n", "        ", "super", "(", "GraphBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_block_stream1", "=", "self", ".", "build_conv_block", "(", "dim", ",", "use_bias", ",", "cal_att", "=", "False", ")", "\n", "self", ".", "conv_block_stream2", "=", "self", ".", "build_conv_block", "(", "\n", "dim", ",", "use_bias", ",", "cal_att", "=", "True", ",", "cated_stream2", "=", "cated_stream2", "\n", ")", "\n", "self", ".", "gcn", "=", "GloRe_Unit_2D", "(", "128", ",", "64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.models.utils_modules_new.GraphBlock.build_conv_block": [[135, 170], ["torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Dropout", "torch.Dropout", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["None"], ["", "def", "build_conv_block", "(", "self", ",", "dim", ",", "use_bias", ",", "cated_stream2", "=", "False", ",", "cal_att", "=", "False", ")", ":", "\n", "        ", "conv_block", "=", "[", "]", "\n", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "\n", "if", "cated_stream2", ":", "\n", "            ", "conv_block", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "dim", "*", "2", ",", "dim", "*", "2", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "dim", "*", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "]", "\n", "", "else", ":", "\n", "            ", "conv_block", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "]", "\n", "", "conv_block", "+=", "[", "nn", ".", "Dropout", "(", "0.5", ")", "]", "\n", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "\n", "if", "cal_att", ":", "\n", "            ", "if", "cated_stream2", ":", "\n", "                ", "conv_block", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "dim", "*", "2", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", "\n", "]", "\n", "", "else", ":", "\n", "                ", "conv_block", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", "\n", "]", "\n", "", "", "else", ":", "\n", "            ", "conv_block", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "dim", ")", ",", "\n", "]", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "conv_block", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.models.utils_modules_new.GraphBlock.forward": [[171, 184], ["utils_modules_new.GraphBlock.conv_block_stream1", "utils_modules_new.GraphBlock.conv_block_stream2", "utils_modules_new.GraphBlock.gcn", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "# print(\"x1\", x1.shape)", "\n", "        ", "x1_out", "=", "self", ".", "conv_block_stream1", "(", "x1", ")", "\n", "x2_out", "=", "self", ".", "conv_block_stream2", "(", "x2", ")", "\n", "x2_out", "=", "self", ".", "gcn", "(", "x2_out", ")", "\n", "\n", "att", "=", "torch", ".", "sigmoid", "(", "x2_out", ")", "\n", "# print(\"att\", att.shape, \"x1\", x1_out.shape)", "\n", "x1_out", "=", "x1_out", "*", "att", "\n", "out", "=", "x1", "+", "x1_out", "# residual connection", "\n", "# stream2 receive feedback from stream1", "\n", "x2_out", "=", "torch", ".", "cat", "(", "(", "x2_out", ",", "out", ")", ",", "1", ")", "\n", "return", "out", ",", "x2_out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fodark_anonygan.models.generator.Generator.__init__": [[9, 131], ["torch.Module.__init__", "range", "torch.ModuleList", "torch.ModuleList", "range", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "eca_layer.eca_layer.eca_layer", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ModuleList.append", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "range", "utils_modules_new.GraphBlock", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "int", "int"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.CustomImageDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ngf", "=", "64", ",", "n_blocks", "=", "6", ",", "n_downsampling", "=", "2", ",", "ch_input", "=", "6", ",", "use_ch_att", "=", "True", ",", "reduced_landmarks", "=", "False", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "input_nc_s1", "=", "ch_input", "\n", "if", "reduced_landmarks", ":", "\n", "            ", "self", ".", "input_nc_s2", "=", "2", "*", "29", "\n", "", "else", ":", "\n", "            ", "self", ".", "input_nc_s2", "=", "2", "*", "68", "\n", "", "self", ".", "output_nc", "=", "3", "\n", "self", ".", "ngf", "=", "ngf", "\n", "self", ".", "use_ch_att", "=", "use_ch_att", "\n", "\n", "if", "use_ch_att", ":", "\n", "            ", "self", ".", "ch_att", "=", "eca_layer", "(", "2", "*", "68", ")", "\n", "\n", "# down_sample", "\n", "", "model_stream1_down", "=", "[", "\n", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "self", ".", "input_nc_s1", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ngf", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "]", "\n", "\n", "model_stream2_down", "=", "[", "\n", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "self", ".", "input_nc_s2", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ngf", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "]", "\n", "\n", "# n_downsampling = 2", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "i", "\n", "model_stream1_down", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "\n", "ngf", "*", "mult", ",", "\n", "ngf", "*", "mult", "*", "2", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ngf", "*", "mult", "*", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "]", "\n", "model_stream2_down", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "\n", "ngf", "*", "mult", ",", "\n", "ngf", "*", "mult", "*", "2", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ngf", "*", "mult", "*", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "]", "\n", "\n", "# att_block in place of res_block", "\n", "", "mult", "=", "2", "**", "n_downsampling", "\n", "cated_stream2", "=", "[", "True", "for", "i", "in", "range", "(", "n_blocks", ")", "]", "\n", "cated_stream2", "[", "0", "]", "=", "False", "\n", "attBlock", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "n_blocks", ")", ":", "\n", "            ", "attBlock", ".", "append", "(", "\n", "GraphBlock", "(", "ngf", "*", "mult", ",", "use_bias", "=", "False", ",", "cated_stream2", "=", "cated_stream2", "[", "i", "]", ")", "\n", "# GraphBlock(", "\n", "#     ngf * mult,", "\n", "#     use_bias=False,", "\n", "#     cated_stream2=cated_stream2[i],", "\n", "#     padding_type=\"reflect\",", "\n", "#     norm_layer=nn.BatchNorm2d,", "\n", "#     use_dropout=True,", "\n", "# )", "\n", ")", "\n", "\n", "# up_sample", "\n", "", "model_stream1_up", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "(", "n_downsampling", "-", "i", ")", "\n", "model_stream1_up", "+=", "[", "\n", "nn", ".", "ConvTranspose2d", "(", "\n", "ngf", "*", "mult", ",", "\n", "int", "(", "ngf", "*", "mult", "/", "2", ")", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "\n", "output_padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "int", "(", "ngf", "*", "mult", "/", "2", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "]", "\n", "\n", "", "model_stream1_up", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", "]", "\n", "model_stream1_up", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", ",", "self", ".", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", "]", "\n", "model_stream1_up", "+=", "[", "nn", ".", "Tanh", "(", ")", "]", "\n", "\n", "# self.model = nn.Sequential(*model)", "\n", "self", ".", "stream1_down", "=", "nn", ".", "Sequential", "(", "*", "model_stream1_down", ")", "\n", "self", ".", "stream2_down", "=", "nn", ".", "Sequential", "(", "*", "model_stream2_down", ")", "\n", "# self.att = nn.Sequential(*attBlock)", "\n", "self", ".", "att", "=", "attBlock", "\n", "self", ".", "stream1_up", "=", "nn", ".", "Sequential", "(", "*", "model_stream1_up", ")", "\n", "\n", "self", ".", "conv_att1", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "256", ",", "\n", "128", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "\n", "output_padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "self", ".", "conv_att2", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "128", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "# self.conv_att3 = nn.ConvTranspose2d(", "\n", "#     64, 2, kernel_size=1, stride=1, padding=0, bias=False", "\n", "# )", "\n", "self", ".", "conv_att3", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "64", ",", "1", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.models.generator.Generator.forward": [[133, 164], ["generator.Generator.stream1_down", "generator.Generator.stream2_down", "generator.Generator.stream1_up", "generator.Generator.conv_att1", "generator.Generator.conv_att2", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "att.repeat.repeat.repeat", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "generator.Generator.ch_att", "model", "generator.Generator.conv_att3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "# x from stream 1 and stream 2", "\n", "# here x should be a tuple", "\n", "        ", "input_image", ",", "x2", "=", "input", "\n", "\n", "if", "self", ".", "use_ch_att", ":", "\n", "            ", "x2", "=", "self", ".", "ch_att", "(", "x2", ")", "\n", "\n", "# print('I', input_image.shape, 'P', x2.shape)", "\n", "\n", "", "x1", "=", "self", ".", "stream1_down", "(", "input_image", ")", "\n", "x2", "=", "self", ".", "stream2_down", "(", "x2", ")", "\n", "\n", "for", "model", "in", "self", ".", "att", ":", "\n", "            ", "x1", ",", "x2", "=", "model", "(", "x1", ",", "x2", ")", "\n", "\n", "", "out", "=", "self", ".", "stream1_up", "(", "x1", ")", "\n", "\n", "att", "=", "self", ".", "conv_att1", "(", "x1", ")", "\n", "att", "=", "self", ".", "conv_att2", "(", "att", ")", "\n", "att", "=", "torch", ".", "sigmoid", "(", "self", ".", "conv_att3", "(", "att", ")", ")", "\n", "\n", "# att1 = att[:, 0:1, :, :]", "\n", "# att2 = att[:, 1:2, :, :]", "\n", "att", "=", "att", ".", "repeat", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "# att2 = att2.repeat(1, 3, 1, 1)", "\n", "\n", "if", "self", ".", "input_nc_s1", "==", "6", ":", "\n", "            ", "out", "=", "out", "*", "att", "+", "input_image", "[", ":", ",", "3", ":", "]", "*", "(", "1", "-", "att", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "out", "*", "att", "+", "input_image", "*", "(", "1", "-", "att", ")", "\n", "", "return", "torch", ".", "clamp", "(", "out", ",", "-", "1", ",", "1", ")", "# torch.tanh(out)", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fodark_anonygan.models.utils_modules_old.GCN.__init__": [[8, 13], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.CustomImageDataset.__init__"], ["def", "__init__", "(", "self", ",", "num_state", ",", "num_node", ",", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "GCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv1d", "(", "num_node", ",", "num_node", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv1d", "(", "num_state", ",", "num_state", ",", "kernel_size", "=", "1", ",", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.models.utils_modules_old.GCN.forward": [[14, 22], ["utils_modules_old.GCN.conv1().permute", "utils_modules_old.GCN.conv2", "utils_modules_old.GCN.relu", "utils_modules_old.GCN.conv1", "x.permute().contiguous", "x.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# (n, num_state, num_node) -> (n, num_node, num_state)", "\n", "#                          -> (n, num_state, num_node)", "\n", "        ", "h", "=", "self", ".", "conv1", "(", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "h", "=", "h", "+", "x", "\n", "# (n, num_state, num_node) -> (n, num_state, num_node)", "\n", "h", "=", "self", ".", "conv2", "(", "self", ".", "relu", "(", "h", ")", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.models.utils_modules_old.GloRe_Unit.__init__": [[31, 58], ["torch.Module.__init__", "int", "int", "ConvNd", "ConvNd", "utils_modules_old.GCN", "utils_modules_old.GCN", "ConvNd", "BatchNormNd"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.CustomImageDataset.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "num_in", ",", "\n", "num_mid", ",", "\n", "ConvNd", "=", "nn", ".", "Conv3d", ",", "\n", "BatchNormNd", "=", "nn", ".", "BatchNorm3d", ",", "\n", "normalize", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", "GloRe_Unit", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "normalize", "=", "normalize", "\n", "self", ".", "num_s", "=", "int", "(", "2", "*", "num_mid", ")", "\n", "self", ".", "num_n", "=", "int", "(", "1", "*", "num_mid", ")", "\n", "\n", "# reduce dim", "\n", "self", ".", "conv_state", "=", "ConvNd", "(", "num_in", ",", "self", ".", "num_s", ",", "kernel_size", "=", "1", ")", "\n", "# projection map", "\n", "self", ".", "conv_proj", "=", "ConvNd", "(", "num_in", ",", "self", ".", "num_n", ",", "kernel_size", "=", "1", ")", "\n", "# ----------", "\n", "# reasoning via graph convolution", "\n", "self", ".", "gcn1", "=", "GCN", "(", "num_state", "=", "self", ".", "num_s", ",", "num_node", "=", "self", ".", "num_n", ")", "\n", "self", ".", "gcn2", "=", "GCN", "(", "num_state", "=", "self", ".", "num_s", ",", "num_node", "=", "self", ".", "num_n", ")", "\n", "# ----------", "\n", "# extend dimension", "\n", "self", ".", "conv_extend", "=", "ConvNd", "(", "self", ".", "num_s", ",", "num_in", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "blocker", "=", "BatchNormNd", "(", "num_in", ",", "eps", "=", "1e-04", ")", "# should be zero initialized", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.models.utils_modules_old.GloRe_Unit.forward": [[59, 114], ["x.size", "utils_modules_old.GloRe_Unit.conv_state().view", "utils_modules_old.GloRe_Unit.conv_state().view", "utils_modules_old.GloRe_Unit.conv_proj().view", "utils_modules_old.GloRe_Unit.conv_proj().view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "utils_modules_old.GloRe_Unit.gcn1", "utils_modules_old.GloRe_Unit.gcn2", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul.view", "torch.matmul.view", "torch.matmul.view", "torch.matmul.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x.size", "utils_modules_old.GloRe_Unit.permute", "utils_modules_old.GloRe_Unit.permute", "print", "utils_modules_old.GloRe_Unit.blocker", "utils_modules_old.GloRe_Unit.blocker", "utils_modules_old.GloRe_Unit.conv_state", "utils_modules_old.GloRe_Unit.conv_state", "utils_modules_old.GloRe_Unit.conv_proj", "utils_modules_old.GloRe_Unit.conv_proj", "utils_modules_old.GloRe_Unit.conv_extend", "utils_modules_old.GloRe_Unit.conv_extend", "torch.matmul.size", "torch.matmul.size", "torch.matmul.size", "torch.matmul.size", "x.size", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        :param x: (n, c, d, h, w)\n        \"\"\"", "\n", "n", "=", "x", ".", "size", "(", "0", ")", "\n", "#         c = torch.div(x.size(1),2).item()", "\n", "c", "=", "x", ".", "size", "(", "1", ")", "//", "2", "\n", "\n", "x1", "=", "x", "[", ":", ",", ":", "c", "]", "\n", "x2", "=", "x", "[", ":", ",", "c", ":", "]", "\n", "\n", "# (n, num_in, h, w) --> (n, num_state, h, w)", "\n", "#                   --> (n, num_state, h*w)", "\n", "x_state_reshaped1", "=", "self", ".", "conv_state", "(", "x1", ")", ".", "view", "(", "n", ",", "self", ".", "num_s", ",", "-", "1", ")", "\n", "x_state_reshaped2", "=", "self", ".", "conv_state", "(", "x2", ")", ".", "view", "(", "n", ",", "self", ".", "num_s", ",", "-", "1", ")", "\n", "\n", "# (n, num_in, h, w) --> (n, num_node, h, w)", "\n", "#                   --> (n, num_node, h*w)", "\n", "x_proj_reshaped1", "=", "self", ".", "conv_proj", "(", "x2", ")", ".", "view", "(", "n", ",", "self", ".", "num_n", ",", "-", "1", ")", "\n", "x_proj_reshaped2", "=", "self", ".", "conv_proj", "(", "x1", ")", ".", "view", "(", "n", ",", "self", ".", "num_n", ",", "-", "1", ")", "\n", "\n", "# (n, num_in, h, w) --> (n, num_node, h, w)", "\n", "#                   --> (n, num_node, h*w)", "\n", "x_rproj_reshaped1", "=", "x_proj_reshaped1", "\n", "x_rproj_reshaped2", "=", "x_proj_reshaped2", "\n", "\n", "# projection: coordinate space -> interaction space", "\n", "# (n, num_state, h*w) x (n, num_node, h*w)T --> (n, num_state, num_node)", "\n", "x_n_state1", "=", "torch", ".", "matmul", "(", "x_state_reshaped1", ",", "x_proj_reshaped1", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "x_n_state2", "=", "torch", ".", "matmul", "(", "x_state_reshaped2", ",", "x_proj_reshaped2", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "\n", "if", "self", ".", "normalize", ":", "\n", "            ", "print", "(", "\"using normalize\"", ")", "\n", "x_n_state1", "=", "x_n_state1", "*", "(", "1.0", "/", "x_state_reshaped1", ".", "size", "(", "2", ")", ")", "\n", "x_n_state2", "=", "x_n_state2", "*", "(", "1.0", "/", "x_state_reshaped2", ".", "size", "(", "2", ")", ")", "\n", "\n", "# reasoning: (n, num_state, num_node) -> (n, num_state, num_node)", "\n", "", "x_n_rel1", "=", "self", ".", "gcn1", "(", "x_n_state1", ")", "\n", "x_n_rel2", "=", "self", ".", "gcn2", "(", "x_n_state2", ")", "\n", "\n", "# reverse projection: interaction space -> coordinate space", "\n", "# (n, num_state, num_node) x (n, num_node, h*w) --> (n, num_state, h*w)", "\n", "x_state_reshaped1", "=", "torch", ".", "matmul", "(", "x_n_rel1", ",", "x_rproj_reshaped1", ")", "\n", "x_state_reshaped2", "=", "torch", ".", "matmul", "(", "x_n_rel2", ",", "x_rproj_reshaped2", ")", "\n", "\n", "# (n, num_state, h*w) --> (n, num_state, h, w)", "\n", "x_state1", "=", "x_state_reshaped1", ".", "view", "(", "n", ",", "self", ".", "num_s", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "x_state2", "=", "x_state_reshaped2", ".", "view", "(", "n", ",", "self", ".", "num_s", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "\n", "# (n, num_state, h, w) -> (n, num_in, h, w)", "\n", "# out = x + self.blocker(self.conv_extend(x_state))", "\n", "out1", "=", "x1", "+", "self", ".", "blocker", "(", "self", ".", "conv_extend", "(", "x_state1", ")", ")", "\n", "out2", "=", "x2", "+", "self", ".", "blocker", "(", "self", ".", "conv_extend", "(", "x_state2", ")", ")", "\n", "\n", "return", "torch", ".", "cat", "(", "(", "out1", ",", "out2", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.models.utils_modules_old.GloRe_Unit_2D.__init__": [[117, 127], ["utils_modules_old.GloRe_Unit.__init__"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.CustomImageDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_in", ",", "num_mid", ",", "normalize", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Set 'normalize = True' if the input size is not fixed\n        \"\"\"", "\n", "super", "(", "GloRe_Unit_2D", ",", "self", ")", ".", "__init__", "(", "\n", "num_in", ",", "\n", "num_mid", ",", "\n", "ConvNd", "=", "nn", ".", "Conv2d", ",", "\n", "BatchNormNd", "=", "nn", ".", "BatchNorm2d", ",", "\n", "normalize", "=", "normalize", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.models.utils_modules_old.GraphBlock.__init__": [[131, 157], ["torch.Module.__init__", "utils_modules_old.GraphBlock.build_conv_block", "utils_modules_old.GraphBlock.build_conv_block", "utils_modules_old.GloRe_Unit_2D"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.CustomImageDataset.__init__", "home.repos.pwc.inspect_result.fodark_anonygan.models.utils_modules_old.GraphBlock.build_conv_block", "home.repos.pwc.inspect_result.fodark_anonygan.models.utils_modules_old.GraphBlock.build_conv_block"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "dim", ",", "\n", "padding_type", ",", "\n", "norm_layer", ",", "\n", "use_dropout", ",", "\n", "use_bias", ",", "\n", "cated_stream2", "=", "False", ",", "\n", "use_fuser", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", "GraphBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_block_stream1", "=", "self", ".", "build_conv_block", "(", "\n", "dim", ",", "padding_type", ",", "norm_layer", ",", "use_dropout", ",", "use_bias", ",", "cal_att", "=", "False", "\n", ")", "\n", "self", ".", "conv_block_stream2", "=", "self", ".", "build_conv_block", "(", "\n", "dim", ",", "\n", "padding_type", ",", "\n", "norm_layer", ",", "\n", "use_dropout", ",", "\n", "use_bias", ",", "\n", "cal_att", "=", "True", ",", "\n", "cated_stream2", "=", "cated_stream2", ",", "\n", ")", "\n", "\n", "self", ".", "gcn", "=", "GloRe_Unit_2D", "(", "128", ",", "64", ")", "\n", "self", ".", "use_fuser", "=", "use_fuser", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.models.utils_modules_old.GraphBlock.build_conv_block": [[158, 220], ["torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["None"], ["", "def", "build_conv_block", "(", "\n", "self", ",", "\n", "dim", ",", "\n", "padding_type", ",", "\n", "norm_layer", ",", "\n", "use_dropout", ",", "\n", "use_bias", ",", "\n", "cated_stream2", "=", "False", ",", "\n", "cal_att", "=", "False", ",", "\n", ")", ":", "\n", "        ", "conv_block", "=", "[", "]", "\n", "p", "=", "0", "\n", "if", "padding_type", "==", "\"reflect\"", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "\"replicate\"", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "\"zero\"", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"padding [%s] is not implemented\"", "%", "padding_type", ")", "\n", "\n", "", "if", "cated_stream2", ":", "\n", "            ", "conv_block", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "dim", "*", "2", ",", "dim", "*", "2", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "dim", "*", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "]", "\n", "", "else", ":", "\n", "            ", "conv_block", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "]", "\n", "", "if", "use_dropout", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "Dropout", "(", "0.5", ")", "]", "\n", "\n", "", "p", "=", "0", "\n", "if", "padding_type", "==", "\"reflect\"", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "\"replicate\"", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "\"zero\"", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"padding [%s] is not implemented\"", "%", "padding_type", ")", "\n", "\n", "", "if", "cal_att", ":", "\n", "            ", "if", "cated_stream2", ":", "\n", "                ", "conv_block", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "dim", "*", "2", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ",", "bias", "=", "use_bias", ")", "\n", "]", "\n", "", "else", ":", "\n", "                ", "conv_block", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ",", "bias", "=", "use_bias", ")", "\n", "]", "\n", "", "", "else", ":", "\n", "            ", "conv_block", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "dim", ")", ",", "\n", "]", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "conv_block", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.models.utils_modules_old.GraphBlock.forward": [[221, 240], ["utils_modules_old.GraphBlock.conv_block_stream1", "utils_modules_old.GraphBlock.conv_block_stream2", "utils_modules_old.GraphBlock.gcn", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "utils_modules_old.GraphBlock.transfuser", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "x1_out", "=", "self", ".", "conv_block_stream1", "(", "x1", ")", "\n", "x2_out", "=", "self", ".", "conv_block_stream2", "(", "x2", ")", "\n", "x2_out", "=", "self", ".", "gcn", "(", "x2_out", ")", "\n", "\n", "if", "self", ".", "use_fuser", ":", "\n", "            ", "mixed", "=", "torch", ".", "cat", "(", "[", "x1_out", ",", "x2_out", "]", ",", "dim", "=", "1", ")", "\n", "# x1_out, x2_out = self.transfuser(x1_out, x2_out)", "\n", "out", "=", "self", ".", "transfuser", "(", "mixed", ")", "\n", "x1_out", ",", "x2_out", "=", "out", "[", ":", ",", ":", "256", ",", ":", ",", ":", "]", ",", "out", "[", ":", ",", "256", ":", ",", ":", ",", ":", "]", "\n", "x1_out", "=", "x1_out", "+", "x1", "# skip connection", "\n", "return", "x1_out", ",", "torch", ".", "cat", "(", "[", "x2_out", ",", "x1_out", "]", ",", "dim", "=", "1", ")", "# feedback from x1", "\n", "", "else", ":", "\n", "            ", "att", "=", "torch", ".", "sigmoid", "(", "x2_out", ")", "\n", "x1_out", "=", "x1_out", "*", "att", "\n", "out", "=", "x1", "+", "x1_out", "# residual connection", "\n", "# stream2 receive feedback from stream1", "\n", "x2_out", "=", "torch", ".", "cat", "(", "(", "x2_out", ",", "out", ")", ",", "1", ")", "\n", "return", "out", ",", "x2_out", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.fodark_anonygan.models.load_arcface.ArcFace": [[6, 11], ["arcface.backbones.get_model", "arcface.backbones.get_model.load_state_dict", "arcface.backbones.get_model.eval", "torch.load"], "function", ["home.repos.pwc.inspect_result.fodark_anonygan.backbones.__init__.get_model"], ["def", "ArcFace", "(", "arcface_arch", ")", ":", "\n", "    ", "model", "=", "get_model", "(", "f\"{arcface_arch}\"", ",", "fp16", "=", "False", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "f\"src/models/arcface/backbone_{arcface_arch}.pth\"", ")", ")", "\n", "\n", "return", "model", ".", "eval", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.fodark_anonygan.models.eca_layer.eca_layer.__init__": [[14, 21], ["torch.nn.Module.__init__", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Conv1d", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.CustomImageDataset.__init__"], ["def", "__init__", "(", "self", ",", "channel", ",", "k_size", "=", "3", ")", ":", "\n", "        ", "super", "(", "eca_layer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv1d", "(", "\n", "1", ",", "1", ",", "kernel_size", "=", "k_size", ",", "padding", "=", "(", "k_size", "-", "1", ")", "//", "2", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.models.eca_layer.eca_layer.forward": [[22, 34], ["eca_layer.eca_layer.avg_pool", "eca_layer.eca_layer.conv().transpose().unsqueeze", "eca_layer.eca_layer.sigmoid", "eca_layer.eca_layer.expand_as", "eca_layer.eca_layer.conv().transpose", "eca_layer.eca_layer.conv", "eca_layer.eca_layer.squeeze().transpose", "eca_layer.eca_layer.squeeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# feature descriptor on the global spatial information", "\n", "# print(\"INPUT ECA SHAPE\", x.shape)", "\n", "        ", "y", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "\n", "# Two different branches of ECA module", "\n", "y", "=", "self", ".", "conv", "(", "y", ".", "squeeze", "(", "-", "1", ")", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "# Multi-scale information fusion", "\n", "y", "=", "self", ".", "sigmoid", "(", "y", ")", "\n", "\n", "return", "x", "*", "y", ".", "expand_as", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fodark_anonygan.models.utils.SpecificNorm.__init__": [[37, 50], ["torch.Module.__init__", "numpy.array", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "utils.SpecificNorm.mean.view", "numpy.array", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "utils.SpecificNorm.std.view", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.CustomImageDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "epsilon", "=", "1e-8", ")", ":", "\n", "        ", "\"\"\"\n        @notice: avoid in-place ops.\n        https://discuss.pytorch.org/t/encounter-the-runtimeerror-one-of-the-variables-needed-for-gradient-computation-has-been-modified-by-an-inplace-operation/836/3\n        \"\"\"", "\n", "super", "(", "SpecificNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mean", "=", "np", ".", "array", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", "\n", "self", ".", "mean", "=", "torch", ".", "from_numpy", "(", "self", ".", "mean", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "mean", "=", "self", ".", "mean", ".", "view", "(", "[", "1", ",", "3", ",", "1", ",", "1", "]", ")", "\n", "\n", "self", ".", "std", "=", "np", ".", "array", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "self", ".", "std", "=", "torch", ".", "from_numpy", "(", "self", ".", "std", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "std", "=", "self", ".", "std", ".", "view", "(", "[", "1", ",", "3", ",", "1", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.models.utils.SpecificNorm.forward": [[51, 58], ["utils.SpecificNorm.mean.expand", "utils.SpecificNorm.std.expand"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "mean", "=", "self", ".", "mean", ".", "expand", "(", "[", "1", ",", "3", ",", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", "]", ")", "\n", "std", "=", "self", ".", "std", ".", "expand", "(", "[", "1", ",", "3", ",", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", "]", ")", "\n", "\n", "x", "=", "(", "x", "-", "mean", ")", "/", "std", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.models.utils._gradient_penalty": [[8, 34], ["torch.rand().expand_as", "torch.rand().expand_as", "torch.autograd.Variable", "torch.autograd.Variable", "netD", "grad.view.view", "torch.sqrt", "torch.sqrt", "torch.mean", "torch.mean", "torch.autograd.grad", "torch.autograd.grad", "grad.view.size", "torch.sum", "torch.sum", "torch.rand", "torch.rand", "torch.ones", "torch.ones", "netD.size"], "function", ["None"], ["def", "_gradient_penalty", "(", "netD", ",", "img_att", ",", "img_fake", ")", ":", "\n", "# interpolate sample", "\n", "    ", "bs", "=", "img_fake", ".", "shape", "[", "0", "]", "\n", "alpha", "=", "torch", ".", "rand", "(", "bs", ",", "1", ",", "1", ",", "1", ")", ".", "expand_as", "(", "img_fake", ")", "\n", "interpolated", "=", "torch", ".", "autograd", ".", "Variable", "(", "\n", "alpha", "*", "img_att", "+", "(", "1", "-", "alpha", ")", "*", "img_fake", ",", "requires_grad", "=", "True", "\n", ")", "\n", "pred_interpolated", "=", "netD", "(", "interpolated", ")", "\n", "pred_interpolated", "=", "pred_interpolated", "[", "-", "1", "]", "\n", "\n", "# compute gradients", "\n", "grad", "=", "torch", ".", "autograd", ".", "grad", "(", "\n", "outputs", "=", "pred_interpolated", ",", "\n", "inputs", "=", "interpolated", ",", "\n", "grad_outputs", "=", "torch", ".", "ones", "(", "pred_interpolated", ".", "size", "(", ")", ")", ",", "\n", "retain_graph", "=", "True", ",", "\n", "create_graph", "=", "True", ",", "\n", "only_inputs", "=", "True", ",", "\n", ")", "[", "0", "]", "\n", "\n", "# penalize gradients", "\n", "grad", "=", "grad", ".", "view", "(", "grad", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "grad_l2norm", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "grad", "**", "2", ",", "dim", "=", "1", ")", ")", "\n", "loss_d_gp", "=", "torch", ".", "mean", "(", "(", "grad_l2norm", "-", "1", ")", "**", "2", ")", "\n", "\n", "return", "loss_d_gp", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.models.utils.tensor2im": [[60, 66], ["image_tensor[].cpu().float().numpy", "np.tile.astype", "numpy.tile", "image_tensor[].cpu().float", "numpy.transpose", "image_tensor[].cpu"], "function", ["None"], ["", "", "def", "tensor2im", "(", "image_tensor", ",", "imtype", "=", "np", ".", "uint8", ")", ":", "\n", "    ", "image_numpy", "=", "image_tensor", "[", "0", "]", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "numpy", "(", ")", "\n", "if", "image_numpy", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "        ", "image_numpy", "=", "np", ".", "tile", "(", "image_numpy", ",", "(", "3", ",", "1", ",", "1", ")", ")", "\n", "", "image_numpy", "=", "(", "np", ".", "transpose", "(", "image_numpy", ",", "(", "1", ",", "2", ",", "0", ")", ")", "+", "1", ")", "/", "2.0", "*", "255.0", "\n", "return", "image_numpy", ".", "astype", "(", "imtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.models.utils.get_current_visuals": [[68, 96], ["utils.tensor2im", "utils.tensor2im", "utils.tensor2im", "utils.tensor2im", "utils.tensor2im", "numpy.zeros().astype", "tensor2im.size", "tensor2im.size", "utils.draw_pose_from_map", "utils.draw_pose_from_map", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.fodark_anonygan.models.utils.tensor2im", "home.repos.pwc.inspect_result.fodark_anonygan.models.utils.tensor2im", "home.repos.pwc.inspect_result.fodark_anonygan.models.utils.tensor2im", "home.repos.pwc.inspect_result.fodark_anonygan.models.utils.tensor2im", "home.repos.pwc.inspect_result.fodark_anonygan.models.utils.tensor2im", "home.repos.pwc.inspect_result.fodark_anonygan.models.utils.draw_pose_from_map", "home.repos.pwc.inspect_result.fodark_anonygan.models.utils.draw_pose_from_map"], ["", "def", "get_current_visuals", "(", "\n", "input_P1", ",", "input_P2", ",", "masked_P2", ",", "input_BP1", ",", "input_BP2", ",", "fake_p2", ",", "generated_p2", "\n", ")", ":", "\n", "    ", "height", ",", "width", "=", "input_P1", ".", "size", "(", "2", ")", ",", "input_P1", ".", "size", "(", "3", ")", "\n", "input_P1", "=", "tensor2im", "(", "input_P1", ".", "data", ")", "\n", "input_P2", "=", "tensor2im", "(", "input_P2", ".", "data", ")", "\n", "\n", "input_BP1", "=", "draw_pose_from_map", "(", "input_BP1", ".", "data", ")", "[", "0", "]", "\n", "input_BP2", "=", "draw_pose_from_map", "(", "input_BP2", ".", "data", ")", "[", "0", "]", "\n", "\n", "# generated_p2 = tensor2im(self.generated_p2.data)", "\n", "masked_P2", "=", "tensor2im", "(", "masked_P2", ".", "data", ")", "\n", "fake_p2", "=", "tensor2im", "(", "fake_p2", ".", "data", ")", "\n", "generated_p2", "=", "tensor2im", "(", "generated_p2", ".", "data", ")", "\n", "\n", "vis", "=", "np", ".", "zeros", "(", "(", "height", ",", "width", "*", "7", ",", "3", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "# h, w, c", "\n", "vis", "[", ":", ",", ":", "width", ",", ":", "]", "=", "input_P1", "\n", "vis", "[", ":", ",", "width", ":", "width", "*", "2", ",", ":", "]", "=", "input_BP1", "\n", "vis", "[", ":", ",", "width", "*", "2", ":", "width", "*", "3", ",", ":", "]", "=", "input_P2", "\n", "vis", "[", ":", ",", "width", "*", "3", ":", "width", "*", "4", ",", ":", "]", "=", "masked_P2", "\n", "vis", "[", ":", ",", "width", "*", "4", ":", "width", "*", "5", ",", ":", "]", "=", "input_BP2", "\n", "vis", "[", ":", ",", "width", "*", "5", ":", "width", "*", "6", ",", ":", "]", "=", "fake_p2", "\n", "vis", "[", ":", ",", "width", "*", "6", ":", "width", "*", "7", ",", ":", "]", "=", "generated_p2", "\n", "# vis[:, width * 5 :, :] = fake_p2", "\n", "\n", "# ret_visuals = OrderedDict([(\"vis\", vis)])", "\n", "\n", "return", "vis", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.models.utils.map_to_cord": [[189, 212], ["numpy.where", "zip", "range", "numpy.concatenate", "numpy.logical_and", "all_peaks[].append", "range", "len", "x_values.append", "y_values.append", "x_values.append", "y_values.append", "numpy.expand_dims", "numpy.expand_dims", "pose_map.max"], "function", ["None"], ["def", "map_to_cord", "(", "pose_map", ",", "threshold", "=", "0.1", ")", ":", "\n", "    ", "all_peaks", "=", "[", "[", "]", "for", "i", "in", "range", "(", "BP", ")", "]", "\n", "pose_map", "=", "pose_map", "[", "...", ",", ":", "BP", "]", "\n", "\n", "y", ",", "x", ",", "z", "=", "np", ".", "where", "(", "\n", "np", ".", "logical_and", "(", "pose_map", "==", "pose_map", ".", "max", "(", "axis", "=", "(", "0", ",", "1", ")", ")", ",", "pose_map", ">", "threshold", ")", "\n", ")", "\n", "for", "x_i", ",", "y_i", ",", "z_i", "in", "zip", "(", "x", ",", "y", ",", "z", ")", ":", "\n", "        ", "all_peaks", "[", "z_i", "]", ".", "append", "(", "[", "x_i", ",", "y_i", "]", ")", "\n", "\n", "", "x_values", "=", "[", "]", "\n", "y_values", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "BP", ")", ":", "\n", "        ", "if", "len", "(", "all_peaks", "[", "i", "]", ")", "!=", "0", ":", "\n", "            ", "x_values", ".", "append", "(", "all_peaks", "[", "i", "]", "[", "0", "]", "[", "0", "]", ")", "\n", "y_values", ".", "append", "(", "all_peaks", "[", "i", "]", "[", "0", "]", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "x_values", ".", "append", "(", "MISSING_VALUE", ")", "\n", "y_values", ".", "append", "(", "MISSING_VALUE", ")", "\n", "\n", "", "", "return", "np", ".", "concatenate", "(", "\n", "[", "np", ".", "expand_dims", "(", "y_values", ",", "-", "1", ")", ",", "np", ".", "expand_dims", "(", "x_values", ",", "-", "1", ")", "]", ",", "axis", "=", "1", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.models.utils.draw_pose_from_map": [[215, 221], ["pose_map[].cpu().transpose().transpose().numpy", "utils.map_to_cord", "utils.draw_pose_from_cords", "pose_map[].cpu().transpose().transpose", "pose_map[].cpu().transpose", "pose_map[].cpu"], "function", ["home.repos.pwc.inspect_result.fodark_anonygan.models.utils.map_to_cord", "home.repos.pwc.inspect_result.fodark_anonygan.models.utils.draw_pose_from_cords"], ["", "def", "draw_pose_from_map", "(", "pose_map", ",", "threshold", "=", "0.1", ",", "**", "kwargs", ")", ":", "\n", "# CHW -> HCW -> HWC", "\n", "    ", "pose_map", "=", "pose_map", "[", "0", "]", ".", "cpu", "(", ")", ".", "transpose", "(", "1", ",", "0", ")", ".", "transpose", "(", "2", ",", "1", ")", ".", "numpy", "(", ")", "\n", "\n", "cords", "=", "map_to_cord", "(", "pose_map", ",", "threshold", "=", "threshold", ")", "\n", "return", "draw_pose_from_cords", "(", "cords", ",", "pose_map", ".", "shape", "[", ":", "2", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.models.utils.draw_pose_from_cords": [[224, 256], ["numpy.zeros", "numpy.zeros", "enumerate", "skimage.draw.disk", "skimage.draw.line_aa", "numpy.expand_dims", "len"], "function", ["None"], ["", "def", "draw_pose_from_cords", "(", "pose_joints", ",", "img_size", ",", "radius", "=", "2", ",", "draw_joints", "=", "True", ")", ":", "\n", "    ", "colors", "=", "np", ".", "zeros", "(", "shape", "=", "img_size", "+", "(", "3", ",", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "shape", "=", "img_size", ",", "dtype", "=", "bool", ")", "\n", "\n", "if", "draw_joints", ":", "\n", "        ", "for", "f", ",", "t", "in", "LIMB_SEQ", ":", "\n", "            ", "from_missing", "=", "(", "\n", "pose_joints", "[", "f", "]", "[", "0", "]", "==", "MISSING_VALUE", "or", "pose_joints", "[", "f", "]", "[", "1", "]", "==", "MISSING_VALUE", "\n", ")", "\n", "to_missing", "=", "(", "\n", "pose_joints", "[", "t", "]", "[", "0", "]", "==", "MISSING_VALUE", "or", "pose_joints", "[", "t", "]", "[", "1", "]", "==", "MISSING_VALUE", "\n", ")", "\n", "if", "from_missing", "or", "to_missing", ":", "\n", "                ", "continue", "\n", "", "yy", ",", "xx", ",", "val", "=", "line_aa", "(", "\n", "pose_joints", "[", "f", "]", "[", "0", "]", ",", "\n", "pose_joints", "[", "f", "]", "[", "1", "]", ",", "\n", "pose_joints", "[", "t", "]", "[", "0", "]", ",", "\n", "pose_joints", "[", "t", "]", "[", "1", "]", ",", "\n", ")", "\n", "colors", "[", "yy", ",", "xx", "]", "=", "np", ".", "expand_dims", "(", "val", ",", "1", ")", "*", "255", "\n", "mask", "[", "yy", ",", "xx", "]", "=", "True", "\n", "\n", "", "", "for", "i", ",", "joint", "in", "enumerate", "(", "pose_joints", ")", ":", "\n", "        ", "if", "pose_joints", "[", "i", "]", "[", "0", "]", "==", "MISSING_VALUE", "or", "pose_joints", "[", "i", "]", "[", "1", "]", "==", "MISSING_VALUE", ":", "\n", "            ", "continue", "\n", "# yy, xx = circle(joint[0], joint[1], radius=radius, shape=img_size)", "\n", "", "yy", ",", "xx", "=", "disk", "(", "(", "joint", "[", "0", "]", ",", "joint", "[", "1", "]", ")", ",", "radius", "=", "radius", ",", "shape", "=", "img_size", ")", "\n", "colors", "[", "yy", ",", "xx", "]", "=", "COLORS", "[", "i", "%", "len", "(", "COLORS", ")", "]", "\n", "mask", "[", "yy", ",", "xx", "]", "=", "True", "\n", "\n", "", "return", "colors", ",", "mask", "\n", "", ""]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.partial_fc.PartialFC.__init__": [[19, 92], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.nn.Module.__init__", "torch.device", "torch.device", "torch.device", "torch.device", "int", "os.path.join", "os.path.join", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "int", "min", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "logging.info", "logging.info", "int", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "logging.info", "logging.info", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "logging.info", "logging.info", "torch.empty", "torch.empty", "torch.empty", "torch.empty"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.CustomImageDataset.__init__"], ["@", "torch", ".", "no_grad", "(", ")", "\n", "def", "__init__", "(", "self", ",", "rank", ",", "local_rank", ",", "world_size", ",", "batch_size", ",", "resume", ",", "\n", "margin_softmax", ",", "num_classes", ",", "sample_rate", "=", "1.0", ",", "embedding_size", "=", "512", ",", "prefix", "=", "\"./\"", ")", ":", "\n", "        ", "\"\"\"\n        rank: int\n            Unique process(GPU) ID from 0 to world_size - 1.\n        local_rank: int\n            Unique process(GPU) ID within the server from 0 to 7.\n        world_size: int\n            Number of GPU.\n        batch_size: int\n            Batch size on current rank(GPU).\n        resume: bool\n            Select whether to restore the weight of softmax.\n        margin_softmax: callable\n            A function of margin softmax, eg: cosface, arcface.\n        num_classes: int\n            The number of class center storage in current rank(CPU/GPU), usually is total_classes // world_size,\n            required.\n        sample_rate: float\n            The partial fc sampling rate, when the number of classes increases to more than 2 millions, Sampling\n            can greatly speed up training, and reduce a lot of GPU memory, default is 1.0.\n        embedding_size: int\n            The feature dimension, default is 512.\n        prefix: str\n            Path for save checkpoint, default is './'.\n        \"\"\"", "\n", "super", "(", "PartialFC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#", "\n", "self", ".", "num_classes", ":", "int", "=", "num_classes", "\n", "self", ".", "rank", ":", "int", "=", "rank", "\n", "self", ".", "local_rank", ":", "int", "=", "local_rank", "\n", "self", ".", "device", ":", "torch", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "self", ".", "local_rank", ")", ")", "\n", "self", ".", "world_size", ":", "int", "=", "world_size", "\n", "self", ".", "batch_size", ":", "int", "=", "batch_size", "\n", "self", ".", "margin_softmax", ":", "callable", "=", "margin_softmax", "\n", "self", ".", "sample_rate", ":", "float", "=", "sample_rate", "\n", "self", ".", "embedding_size", ":", "int", "=", "embedding_size", "\n", "self", ".", "prefix", ":", "str", "=", "prefix", "\n", "self", ".", "num_local", ":", "int", "=", "num_classes", "//", "world_size", "+", "int", "(", "rank", "<", "num_classes", "%", "world_size", ")", "\n", "self", ".", "class_start", ":", "int", "=", "num_classes", "//", "world_size", "*", "rank", "+", "min", "(", "rank", ",", "num_classes", "%", "world_size", ")", "\n", "self", ".", "num_sample", ":", "int", "=", "int", "(", "self", ".", "sample_rate", "*", "self", ".", "num_local", ")", "\n", "\n", "self", ".", "weight_name", "=", "os", ".", "path", ".", "join", "(", "self", ".", "prefix", ",", "\"rank_{}_softmax_weight.pt\"", ".", "format", "(", "self", ".", "rank", ")", ")", "\n", "self", ".", "weight_mom_name", "=", "os", ".", "path", ".", "join", "(", "self", ".", "prefix", ",", "\"rank_{}_softmax_weight_mom.pt\"", ".", "format", "(", "self", ".", "rank", ")", ")", "\n", "\n", "if", "resume", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "weight", ":", "torch", ".", "Tensor", "=", "torch", ".", "load", "(", "self", ".", "weight_name", ")", "\n", "self", ".", "weight_mom", ":", "torch", ".", "Tensor", "=", "torch", ".", "load", "(", "self", ".", "weight_mom_name", ")", "\n", "if", "self", ".", "weight", ".", "shape", "[", "0", "]", "!=", "self", ".", "num_local", "or", "self", ".", "weight_mom", ".", "shape", "[", "0", "]", "!=", "self", ".", "num_local", ":", "\n", "                    ", "raise", "IndexError", "\n", "", "logging", ".", "info", "(", "\"softmax weight resume successfully!\"", ")", "\n", "logging", ".", "info", "(", "\"softmax weight mom resume successfully!\"", ")", "\n", "", "except", "(", "FileNotFoundError", ",", "KeyError", ",", "IndexError", ")", ":", "\n", "                ", "self", ".", "weight", "=", "torch", ".", "normal", "(", "0", ",", "0.01", ",", "(", "self", ".", "num_local", ",", "self", ".", "embedding_size", ")", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "weight_mom", ":", "torch", ".", "Tensor", "=", "torch", ".", "zeros_like", "(", "self", ".", "weight", ")", "\n", "logging", ".", "info", "(", "\"softmax weight init!\"", ")", "\n", "logging", ".", "info", "(", "\"softmax weight mom init!\"", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "weight", "=", "torch", ".", "normal", "(", "0", ",", "0.01", ",", "(", "self", ".", "num_local", ",", "self", ".", "embedding_size", ")", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "weight_mom", ":", "torch", ".", "Tensor", "=", "torch", ".", "zeros_like", "(", "self", ".", "weight", ")", "\n", "logging", ".", "info", "(", "\"softmax weight init successfully!\"", ")", "\n", "logging", ".", "info", "(", "\"softmax weight mom init successfully!\"", ")", "\n", "", "self", ".", "stream", ":", "torch", ".", "cuda", ".", "Stream", "=", "torch", ".", "cuda", ".", "Stream", "(", "local_rank", ")", "\n", "\n", "self", ".", "index", "=", "None", "\n", "if", "int", "(", "self", ".", "sample_rate", ")", "==", "1", ":", "\n", "            ", "self", ".", "update", "=", "lambda", ":", "0", "\n", "self", ".", "sub_weight", "=", "Parameter", "(", "self", ".", "weight", ")", "\n", "self", ".", "sub_weight_mom", "=", "self", ".", "weight_mom", "\n", "", "else", ":", "\n", "            ", "self", ".", "sub_weight", "=", "Parameter", "(", "torch", ".", "empty", "(", "(", "0", ",", "0", ")", ")", ".", "cuda", "(", "local_rank", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.partial_fc.PartialFC.save_params": [[93, 98], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save"], "methods", ["None"], ["", "", "def", "save_params", "(", "self", ")", ":", "\n", "        ", "\"\"\" Save softmax weight for each rank on prefix\n        \"\"\"", "\n", "torch", ".", "save", "(", "self", ".", "weight", ".", "data", ",", "self", ".", "weight_name", ")", "\n", "torch", ".", "save", "(", "self", ".", "weight_mom", ",", "self", ".", "weight_mom_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.partial_fc.PartialFC.sample": [[99, 124], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "int", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.searchsorted", "torch.searchsorted", "torch.searchsorted", "torch.searchsorted", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.unique.size", "torch.unique.size", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "index.sort"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "sample", "(", "self", ",", "total_label", ")", ":", "\n", "        ", "\"\"\"\n        Sample all positive class centers in each rank, and random select neg class centers to filling a fixed\n        `num_sample`.\n\n        total_label: tensor\n            Label after all gather, which cross all GPUs.\n        \"\"\"", "\n", "index_positive", "=", "(", "self", ".", "class_start", "<=", "total_label", ")", "&", "(", "total_label", "<", "self", ".", "class_start", "+", "self", ".", "num_local", ")", "\n", "total_label", "[", "~", "index_positive", "]", "=", "-", "1", "\n", "total_label", "[", "index_positive", "]", "-=", "self", ".", "class_start", "\n", "if", "int", "(", "self", ".", "sample_rate", ")", "!=", "1", ":", "\n", "            ", "positive", "=", "torch", ".", "unique", "(", "total_label", "[", "index_positive", "]", ",", "sorted", "=", "True", ")", "\n", "if", "self", ".", "num_sample", "-", "positive", ".", "size", "(", "0", ")", ">=", "0", ":", "\n", "                ", "perm", "=", "torch", ".", "rand", "(", "size", "=", "[", "self", ".", "num_local", "]", ",", "device", "=", "self", ".", "device", ")", "\n", "perm", "[", "positive", "]", "=", "2.0", "\n", "index", "=", "torch", ".", "topk", "(", "perm", ",", "k", "=", "self", ".", "num_sample", ")", "[", "1", "]", "\n", "index", "=", "index", ".", "sort", "(", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "index", "=", "positive", "\n", "", "self", ".", "index", "=", "index", "\n", "total_label", "[", "index_positive", "]", "=", "torch", ".", "searchsorted", "(", "index", ",", "total_label", "[", "index_positive", "]", ")", "\n", "self", ".", "sub_weight", "=", "Parameter", "(", "self", ".", "weight", "[", "index", "]", ")", "\n", "self", ".", "sub_weight_mom", "=", "self", ".", "weight_mom", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.partial_fc.PartialFC.forward": [[125, 131], ["torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.nn.functional.linear", "torch.nn.functional.linear", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "total_features", ",", "norm_weight", ")", ":", "\n", "        ", "\"\"\" Partial fc forward, `logits = X * sample(W)`\n        \"\"\"", "\n", "torch", ".", "cuda", ".", "current_stream", "(", ")", ".", "wait_stream", "(", "self", ".", "stream", ")", "\n", "logits", "=", "linear", "(", "total_features", ",", "norm_weight", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.partial_fc.PartialFC.update": [[132, 138], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "update", "(", "self", ")", ":", "\n", "        ", "\"\"\" Set updated weight and weight_mom to memory bank.\n        \"\"\"", "\n", "self", ".", "weight_mom", "[", "self", ".", "index", "]", "=", "self", ".", "sub_weight_mom", "\n", "self", ".", "weight", "[", "self", ".", "index", "]", "=", "self", ".", "sub_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.partial_fc.PartialFC.prepare": [[139, 158], ["torch.cuda.stream", "torch.cuda.stream", "torch.cuda.stream", "torch.cuda.stream", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.all_gather", "torch.all_gather", "partial_fc.PartialFC.sample", "optimizer.state.pop", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "list", "torch.zeros.chunk", "torch.zeros.chunk"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.arcface.partial_fc.PartialFC.sample"], ["", "def", "prepare", "(", "self", ",", "label", ",", "optimizer", ")", ":", "\n", "        ", "\"\"\"\n        get sampled class centers for cal softmax.\n\n        label: tensor\n            Label tensor on each rank.\n        optimizer: opt\n            Optimizer for partial fc, which need to get weight mom.\n        \"\"\"", "\n", "with", "torch", ".", "cuda", ".", "stream", "(", "self", ".", "stream", ")", ":", "\n", "            ", "total_label", "=", "torch", ".", "zeros", "(", "\n", "size", "=", "[", "self", ".", "batch_size", "*", "self", ".", "world_size", "]", ",", "device", "=", "self", ".", "device", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "dist", ".", "all_gather", "(", "list", "(", "total_label", ".", "chunk", "(", "self", ".", "world_size", ",", "dim", "=", "0", ")", ")", ",", "label", ")", "\n", "self", ".", "sample", "(", "total_label", ")", "\n", "optimizer", ".", "state", ".", "pop", "(", "optimizer", ".", "param_groups", "[", "-", "1", "]", "[", "'params'", "]", "[", "0", "]", ",", "None", ")", "\n", "optimizer", ".", "param_groups", "[", "-", "1", "]", "[", "'params'", "]", "[", "0", "]", "=", "self", ".", "sub_weight", "\n", "optimizer", ".", "state", "[", "self", ".", "sub_weight", "]", "[", "'momentum_buffer'", "]", "=", "self", ".", "sub_weight_mom", "\n", "norm_weight", "=", "normalize", "(", "self", ".", "sub_weight", ")", "\n", "return", "total_label", ",", "norm_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.partial_fc.PartialFC.forward_backward": [[159, 223], ["partial_fc.PartialFC.prepare", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.all_gather", "torch.all_gather", "partial_fc.PartialFC.forward", "partial_fc.PartialFC.margin_softmax", "partial_fc.PartialFC.backward", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.reduce_scatter", "torch.reduce_scatter", "list", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.all_reduce", "torch.all_reduce", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp.sum", "torch.exp.sum", "torch.all_reduce", "torch.all_reduce", "torch.exp.div_", "torch.exp.div_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros.scatter_", "torch.zeros.scatter_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "grad[].gather", "torch.all_reduce", "torch.all_reduce", "grad.div_", "torch.zeros.grad.detach_", "torch.zeros.grad.detach_", "list", "torch.zeros.chunk", "torch.zeros.chunk", "torch.max", "torch.max", "torch.max", "torch.max", "torch.where", "torch.where", "torch.where", "torch.where", "torch.zeros.clamp_min_().log_().mean", "torch.zeros.clamp_min_().log_().mean", "torch.zeros.grad.chunk", "torch.zeros.grad.chunk", "grad.size", "torch.zeros.clamp_min_().log_", "torch.zeros.clamp_min_().log_", "index.size", "grad.size", "torch.zeros.clamp_min_", "torch.zeros.clamp_min_"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.arcface.partial_fc.PartialFC.prepare", "home.repos.pwc.inspect_result.fodark_anonygan.backbones.iresnet.IResNet.forward"], ["", "", "def", "forward_backward", "(", "self", ",", "label", ",", "features", ",", "optimizer", ")", ":", "\n", "        ", "\"\"\"\n        Partial fc forward and backward with model parallel\n\n        label: tensor\n            Label tensor on each rank(GPU)\n        features: tensor\n            Features tensor on each rank(GPU)\n        optimizer: optimizer\n            Optimizer for partial fc\n\n        Returns:\n        --------\n        x_grad: tensor\n            The gradient of features.\n        loss_v: tensor\n            Loss value for cross entropy.\n        \"\"\"", "\n", "total_label", ",", "norm_weight", "=", "self", ".", "prepare", "(", "label", ",", "optimizer", ")", "\n", "total_features", "=", "torch", ".", "zeros", "(", "\n", "size", "=", "[", "self", ".", "batch_size", "*", "self", ".", "world_size", ",", "self", ".", "embedding_size", "]", ",", "device", "=", "self", ".", "device", ")", "\n", "dist", ".", "all_gather", "(", "list", "(", "total_features", ".", "chunk", "(", "self", ".", "world_size", ",", "dim", "=", "0", ")", ")", ",", "features", ".", "data", ")", "\n", "total_features", ".", "requires_grad", "=", "True", "\n", "\n", "logits", "=", "self", ".", "forward", "(", "total_features", ",", "norm_weight", ")", "\n", "logits", "=", "self", ".", "margin_softmax", "(", "logits", ",", "total_label", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "max_fc", "=", "torch", ".", "max", "(", "logits", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "dist", ".", "all_reduce", "(", "max_fc", ",", "dist", ".", "ReduceOp", ".", "MAX", ")", "\n", "\n", "# calculate exp(logits) and all-reduce", "\n", "logits_exp", "=", "torch", ".", "exp", "(", "logits", "-", "max_fc", ")", "\n", "logits_sum_exp", "=", "logits_exp", ".", "sum", "(", "dim", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "dist", ".", "all_reduce", "(", "logits_sum_exp", ",", "dist", ".", "ReduceOp", ".", "SUM", ")", "\n", "\n", "# calculate prob", "\n", "logits_exp", ".", "div_", "(", "logits_sum_exp", ")", "\n", "\n", "# get one-hot", "\n", "grad", "=", "logits_exp", "\n", "index", "=", "torch", ".", "where", "(", "total_label", "!=", "-", "1", ")", "[", "0", "]", "\n", "one_hot", "=", "torch", ".", "zeros", "(", "size", "=", "[", "index", ".", "size", "(", ")", "[", "0", "]", ",", "grad", ".", "size", "(", ")", "[", "1", "]", "]", ",", "device", "=", "grad", ".", "device", ")", "\n", "one_hot", ".", "scatter_", "(", "1", ",", "total_label", "[", "index", ",", "None", "]", ",", "1", ")", "\n", "\n", "# calculate loss", "\n", "loss", "=", "torch", ".", "zeros", "(", "grad", ".", "size", "(", ")", "[", "0", "]", ",", "1", ",", "device", "=", "grad", ".", "device", ")", "\n", "loss", "[", "index", "]", "=", "grad", "[", "index", "]", ".", "gather", "(", "1", ",", "total_label", "[", "index", ",", "None", "]", ")", "\n", "dist", ".", "all_reduce", "(", "loss", ",", "dist", ".", "ReduceOp", ".", "SUM", ")", "\n", "loss_v", "=", "loss", ".", "clamp_min_", "(", "1e-30", ")", ".", "log_", "(", ")", ".", "mean", "(", ")", "*", "(", "-", "1", ")", "\n", "\n", "# calculate grad", "\n", "grad", "[", "index", "]", "-=", "one_hot", "\n", "grad", ".", "div_", "(", "self", ".", "batch_size", "*", "self", ".", "world_size", ")", "\n", "\n", "", "logits", ".", "backward", "(", "grad", ")", "\n", "if", "total_features", ".", "grad", "is", "not", "None", ":", "\n", "            ", "total_features", ".", "grad", ".", "detach_", "(", ")", "\n", "", "x_grad", ":", "torch", ".", "Tensor", "=", "torch", ".", "zeros_like", "(", "features", ",", "requires_grad", "=", "True", ")", "\n", "# feature gradient all-reduce", "\n", "dist", ".", "reduce_scatter", "(", "x_grad", ",", "list", "(", "total_features", ".", "grad", ".", "chunk", "(", "self", ".", "world_size", ",", "dim", "=", "0", ")", ")", ")", "\n", "x_grad", "=", "x_grad", "*", "self", ".", "world_size", "\n", "# backward backbone", "\n", "return", "x_grad", ",", "loss_v", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.torch2onnx.convert_onnx": [[6, 26], ["isinstance", "numpy.random.randint", "torch.from_numpy().unsqueeze().float.astype", "torch.from_numpy().unsqueeze().float.transpose", "torch.from_numpy().unsqueeze().float", "torch.load", "net.load_state_dict", "net.eval", "torch.onnx.export", "onnx.load", "onnx.save", "simplify", "torch.from_numpy().unsqueeze", "torch.from_numpy"], "function", ["None"], ["def", "convert_onnx", "(", "net", ",", "path_module", ",", "output", ",", "opset", "=", "11", ",", "simplify", "=", "False", ")", ":", "\n", "    ", "assert", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "Module", ")", "\n", "img", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "255", ",", "size", "=", "(", "112", ",", "112", ",", "3", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "img", "=", "img", ".", "astype", "(", "np", ".", "float", ")", "\n", "img", "=", "(", "img", "/", "255.", "-", "0.5", ")", "/", "0.5", "# torch style norm", "\n", "img", "=", "img", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "unsqueeze", "(", "0", ")", ".", "float", "(", ")", "\n", "\n", "weight", "=", "torch", ".", "load", "(", "path_module", ")", "\n", "net", ".", "load_state_dict", "(", "weight", ")", "\n", "net", ".", "eval", "(", ")", "\n", "torch", ".", "onnx", ".", "export", "(", "net", ",", "img", ",", "output", ",", "keep_initializers_as_inputs", "=", "False", ",", "verbose", "=", "False", ",", "opset_version", "=", "opset", ")", "\n", "model", "=", "onnx", ".", "load", "(", "output", ")", "\n", "graph", "=", "model", ".", "graph", "\n", "graph", ".", "input", "[", "0", "]", ".", "type", ".", "tensor_type", ".", "shape", ".", "dim", "[", "0", "]", ".", "dim_param", "=", "'None'", "\n", "if", "simplify", ":", "\n", "        ", "from", "onnxsim", "import", "simplify", "\n", "model", ",", "check", "=", "simplify", "(", "model", ")", "\n", "assert", "check", ",", "\"Simplified ONNX model could not be validated\"", "\n", "", "onnx", ".", "save", "(", "model", ",", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.eval_ijbc.Embedding.__init__": [[55, 74], ["torch.load", "backbones.get_model().cuda", "backbones.get_model().cuda.load_state_dict", "torch.nn.DataParallel", "eval_ijbc.Embedding.model.eval", "numpy.array", "backbones.get_model"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.backbones.__init__.get_model"], ["    ", "def", "__init__", "(", "self", ",", "prefix", ",", "data_shape", ",", "batch_size", "=", "1", ")", ":", "\n", "        ", "image_size", "=", "(", "112", ",", "112", ")", "\n", "self", ".", "image_size", "=", "image_size", "\n", "weight", "=", "torch", ".", "load", "(", "prefix", ")", "\n", "resnet", "=", "get_model", "(", "args", ".", "network", ",", "dropout", "=", "0", ",", "fp16", "=", "False", ")", ".", "cuda", "(", ")", "\n", "resnet", ".", "load_state_dict", "(", "weight", ")", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "resnet", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "src", "=", "np", ".", "array", "(", "[", "\n", "[", "30.2946", ",", "51.6963", "]", ",", "\n", "[", "65.5318", ",", "51.5014", "]", ",", "\n", "[", "48.0252", ",", "71.7366", "]", ",", "\n", "[", "33.5493", ",", "92.3655", "]", ",", "\n", "[", "62.7299", ",", "92.2041", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "src", "[", ":", ",", "0", "]", "+=", "8.0", "\n", "self", ".", "src", "=", "src", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "data_shape", "=", "data_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.eval_ijbc.Embedding.get": [[75, 102], ["skimage.transform.SimilarityTransform", "skimage.transform.SimilarityTransform.estimate", "cv2.warpAffine", "cv2.cvtColor", "numpy.fliplr", "numpy.transpose", "numpy.transpose", "numpy.zeros", "numpy.zeros"], "methods", ["None"], ["", "def", "get", "(", "self", ",", "rimg", ",", "landmark", ")", ":", "\n", "\n", "        ", "assert", "landmark", ".", "shape", "[", "0", "]", "==", "68", "or", "landmark", ".", "shape", "[", "0", "]", "==", "5", "\n", "assert", "landmark", ".", "shape", "[", "1", "]", "==", "2", "\n", "if", "landmark", ".", "shape", "[", "0", "]", "==", "68", ":", "\n", "            ", "landmark5", "=", "np", ".", "zeros", "(", "(", "5", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "landmark5", "[", "0", "]", "=", "(", "landmark", "[", "36", "]", "+", "landmark", "[", "39", "]", ")", "/", "2", "\n", "landmark5", "[", "1", "]", "=", "(", "landmark", "[", "42", "]", "+", "landmark", "[", "45", "]", ")", "/", "2", "\n", "landmark5", "[", "2", "]", "=", "landmark", "[", "30", "]", "\n", "landmark5", "[", "3", "]", "=", "landmark", "[", "48", "]", "\n", "landmark5", "[", "4", "]", "=", "landmark", "[", "54", "]", "\n", "", "else", ":", "\n", "            ", "landmark5", "=", "landmark", "\n", "", "tform", "=", "trans", ".", "SimilarityTransform", "(", ")", "\n", "tform", ".", "estimate", "(", "landmark5", ",", "self", ".", "src", ")", "\n", "M", "=", "tform", ".", "params", "[", "0", ":", "2", ",", ":", "]", "\n", "img", "=", "cv2", ".", "warpAffine", "(", "rimg", ",", "\n", "M", ",", "(", "self", ".", "image_size", "[", "1", "]", ",", "self", ".", "image_size", "[", "0", "]", ")", ",", "\n", "borderValue", "=", "0.0", ")", "\n", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "img_flip", "=", "np", ".", "fliplr", "(", "img", ")", "\n", "img", "=", "np", ".", "transpose", "(", "img", ",", "(", "2", ",", "0", ",", "1", ")", ")", "# 3*112*112, RGB", "\n", "img_flip", "=", "np", ".", "transpose", "(", "img_flip", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "input_blob", "=", "np", ".", "zeros", "(", "(", "2", ",", "3", ",", "self", ".", "image_size", "[", "1", "]", ",", "self", ".", "image_size", "[", "0", "]", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "input_blob", "[", "0", "]", "=", "img", "\n", "input_blob", "[", "1", "]", "=", "img_flip", "\n", "return", "input_blob", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.eval_ijbc.Embedding.forward_db": [[103, 110], ["torch.no_grad", "torch.Tensor().cuda", "torch.Tensor().cuda.div_().sub_().div_", "eval_ijbc.Embedding.model", "feat.reshape.reshape.reshape", "feat.reshape.reshape.cpu().numpy", "torch.Tensor", "torch.Tensor().cuda.div_().sub_", "feat.reshape.reshape.cpu", "torch.Tensor().cuda.div_"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "forward_db", "(", "self", ",", "batch_data", ")", ":", "\n", "        ", "imgs", "=", "torch", ".", "Tensor", "(", "batch_data", ")", ".", "cuda", "(", ")", "\n", "imgs", ".", "div_", "(", "255", ")", ".", "sub_", "(", "0.5", ")", ".", "div_", "(", "0.5", ")", "\n", "feat", "=", "self", ".", "model", "(", "imgs", ")", "\n", "feat", "=", "feat", ".", "reshape", "(", "[", "self", ".", "batch_size", ",", "2", "*", "feat", ".", "shape", "[", "1", "]", "]", ")", "\n", "return", "feat", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.eval_ijbc.divideIntoNstrand": [[113, 118], ["enumerate", "twoList[].append", "range"], "function", ["None"], ["", "", "def", "divideIntoNstrand", "(", "listTemp", ",", "n", ")", ":", "\n", "    ", "twoList", "=", "[", "[", "]", "for", "i", "in", "range", "(", "n", ")", "]", "\n", "for", "i", ",", "e", "in", "enumerate", "(", "listTemp", ")", ":", "\n", "        ", "twoList", "[", "i", "%", "n", "]", ".", "append", "(", "e", ")", "\n", "", "return", "twoList", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.eval_ijbc.read_template_media_list": [[120, 126], ["ijb_meta[].astype", "ijb_meta[].astype", "pandas.read_csv"], "function", ["None"], ["", "def", "read_template_media_list", "(", "path", ")", ":", "\n", "# ijb_meta = np.loadtxt(path, dtype=str)", "\n", "    ", "ijb_meta", "=", "pd", ".", "read_csv", "(", "path", ",", "sep", "=", "' '", ",", "header", "=", "None", ")", ".", "values", "\n", "templates", "=", "ijb_meta", "[", ":", ",", "1", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "medias", "=", "ijb_meta", "[", ":", ",", "2", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "return", "templates", ",", "medias", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.eval_ijbc.read_template_pair_list": [[131, 140], ["pairs[].astype", "pairs[].astype", "pairs[].astype", "pandas.read_csv"], "function", ["None"], ["", "def", "read_template_pair_list", "(", "path", ")", ":", "\n", "# pairs = np.loadtxt(path, dtype=str)", "\n", "    ", "pairs", "=", "pd", ".", "read_csv", "(", "path", ",", "sep", "=", "' '", ",", "header", "=", "None", ")", ".", "values", "\n", "# print(pairs.shape)", "\n", "# print(pairs[:, 0].astype(np.int))", "\n", "t1", "=", "pairs", "[", ":", ",", "0", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "t2", "=", "pairs", "[", ":", ",", "1", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "label", "=", "pairs", "[", ":", ",", "2", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "return", "t1", ",", "t2", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.eval_ijbc.read_image_feature": [[145, 149], ["open", "pickle.load"], "function", ["None"], ["", "def", "read_image_feature", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "fid", ":", "\n", "        ", "img_feats", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "", "return", "img_feats", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.eval_ijbc.get_image_feature": [[154, 207], ["print", "numpy.empty", "numpy.empty", "eval_ijbc.Embedding", "enumerate", "numpy.empty", "eval_ijbc.Embedding", "enumerate", "numpy.array().astype", "len", "len", "each_line.strip().split", "os.path.join", "cv2.imread", "numpy.array", "lmk.reshape.reshape", "eval_ijbc.Embedding.get", "np.array().astype.append", "each_line.strip().split", "os.path.join", "cv2.imread", "numpy.array", "lmk.reshape.reshape", "eval_ijbc.Embedding.get", "np.array().astype.append", "len", "print", "eval_ijbc.Embedding.forward_db", "print", "eval_ijbc.Embedding.forward_db", "numpy.array", "each_line.strip", "float", "each_line.strip", "float", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.fodark_anonygan.eval.verification.LFold.split", "home.repos.pwc.inspect_result.fodark_anonygan.utils.utils_amp._MultiDeviceReplicator.get", "home.repos.pwc.inspect_result.fodark_anonygan.eval.verification.LFold.split", "home.repos.pwc.inspect_result.fodark_anonygan.utils.utils_amp._MultiDeviceReplicator.get", "home.repos.pwc.inspect_result.fodark_anonygan.arcface.eval_ijbc.Embedding.forward_db", "home.repos.pwc.inspect_result.fodark_anonygan.arcface.eval_ijbc.Embedding.forward_db"], ["", "def", "get_image_feature", "(", "img_path", ",", "files_list", ",", "model_path", ",", "epoch", ",", "gpu_id", ")", ":", "\n", "    ", "batch_size", "=", "args", ".", "batch_size", "\n", "data_shape", "=", "(", "3", ",", "112", ",", "112", ")", "\n", "\n", "files", "=", "files_list", "\n", "print", "(", "'files:'", ",", "len", "(", "files", ")", ")", "\n", "rare_size", "=", "len", "(", "files", ")", "%", "batch_size", "\n", "faceness_scores", "=", "[", "]", "\n", "batch", "=", "0", "\n", "img_feats", "=", "np", ".", "empty", "(", "(", "len", "(", "files", ")", ",", "1024", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "batch_data", "=", "np", ".", "empty", "(", "(", "2", "*", "batch_size", ",", "3", ",", "112", ",", "112", ")", ")", "\n", "embedding", "=", "Embedding", "(", "model_path", ",", "data_shape", ",", "batch_size", ")", "\n", "for", "img_index", ",", "each_line", "in", "enumerate", "(", "files", "[", ":", "len", "(", "files", ")", "-", "rare_size", "]", ")", ":", "\n", "        ", "name_lmk_score", "=", "each_line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "img_name", "=", "os", ".", "path", ".", "join", "(", "img_path", ",", "name_lmk_score", "[", "0", "]", ")", "\n", "img", "=", "cv2", ".", "imread", "(", "img_name", ")", "\n", "lmk", "=", "np", ".", "array", "(", "[", "float", "(", "x", ")", "for", "x", "in", "name_lmk_score", "[", "1", ":", "-", "1", "]", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "lmk", "=", "lmk", ".", "reshape", "(", "(", "5", ",", "2", ")", ")", "\n", "input_blob", "=", "embedding", ".", "get", "(", "img", ",", "lmk", ")", "\n", "\n", "batch_data", "[", "2", "*", "(", "img_index", "-", "batch", "*", "batch_size", ")", "]", "[", ":", "]", "=", "input_blob", "[", "0", "]", "\n", "batch_data", "[", "2", "*", "(", "img_index", "-", "batch", "*", "batch_size", ")", "+", "1", "]", "[", ":", "]", "=", "input_blob", "[", "1", "]", "\n", "if", "(", "img_index", "+", "1", ")", "%", "batch_size", "==", "0", ":", "\n", "            ", "print", "(", "'batch'", ",", "batch", ")", "\n", "img_feats", "[", "batch", "*", "batch_size", ":", "batch", "*", "batch_size", "+", "\n", "batch_size", "]", "[", ":", "]", "=", "embedding", ".", "forward_db", "(", "batch_data", ")", "\n", "batch", "+=", "1", "\n", "", "faceness_scores", ".", "append", "(", "name_lmk_score", "[", "-", "1", "]", ")", "\n", "\n", "", "batch_data", "=", "np", ".", "empty", "(", "(", "2", "*", "rare_size", ",", "3", ",", "112", ",", "112", ")", ")", "\n", "embedding", "=", "Embedding", "(", "model_path", ",", "data_shape", ",", "rare_size", ")", "\n", "for", "img_index", ",", "each_line", "in", "enumerate", "(", "files", "[", "len", "(", "files", ")", "-", "rare_size", ":", "]", ")", ":", "\n", "        ", "name_lmk_score", "=", "each_line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "img_name", "=", "os", ".", "path", ".", "join", "(", "img_path", ",", "name_lmk_score", "[", "0", "]", ")", "\n", "img", "=", "cv2", ".", "imread", "(", "img_name", ")", "\n", "lmk", "=", "np", ".", "array", "(", "[", "float", "(", "x", ")", "for", "x", "in", "name_lmk_score", "[", "1", ":", "-", "1", "]", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "lmk", "=", "lmk", ".", "reshape", "(", "(", "5", ",", "2", ")", ")", "\n", "input_blob", "=", "embedding", ".", "get", "(", "img", ",", "lmk", ")", "\n", "batch_data", "[", "2", "*", "img_index", "]", "[", ":", "]", "=", "input_blob", "[", "0", "]", "\n", "batch_data", "[", "2", "*", "img_index", "+", "1", "]", "[", ":", "]", "=", "input_blob", "[", "1", "]", "\n", "if", "(", "img_index", "+", "1", ")", "%", "rare_size", "==", "0", ":", "\n", "            ", "print", "(", "'batch'", ",", "batch", ")", "\n", "img_feats", "[", "len", "(", "files", ")", "-", "\n", "rare_size", ":", "]", "[", ":", "]", "=", "embedding", ".", "forward_db", "(", "batch_data", ")", "\n", "batch", "+=", "1", "\n", "", "faceness_scores", ".", "append", "(", "name_lmk_score", "[", "-", "1", "]", ")", "\n", "", "faceness_scores", "=", "np", ".", "array", "(", "faceness_scores", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "# img_feats = np.ones( (len(files), 1024), dtype=np.float32) * 0.01", "\n", "# faceness_scores = np.ones( (len(files), ), dtype=np.float32 )", "\n", "return", "img_feats", ",", "faceness_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.eval_ijbc.image2template_feature": [[212, 247], ["numpy.unique", "numpy.zeros", "enumerate", "sklearn.preprocessing.normalize", "numpy.where", "numpy.unique", "zip", "numpy.array", "numpy.sum", "len", "numpy.where", "print", "numpy.mean"], "function", ["None"], ["", "def", "image2template_feature", "(", "img_feats", "=", "None", ",", "templates", "=", "None", ",", "medias", "=", "None", ")", ":", "\n", "# ==========================================================", "\n", "# 1. face image feature l2 normalization. img_feats:[number_image x feats_dim]", "\n", "# 2. compute media feature.", "\n", "# 3. compute template feature.", "\n", "# ==========================================================", "\n", "    ", "unique_templates", "=", "np", ".", "unique", "(", "templates", ")", "\n", "template_feats", "=", "np", ".", "zeros", "(", "(", "len", "(", "unique_templates", ")", ",", "img_feats", ".", "shape", "[", "1", "]", ")", ")", "\n", "\n", "for", "count_template", ",", "uqt", "in", "enumerate", "(", "unique_templates", ")", ":", "\n", "\n", "        ", "(", "ind_t", ",", ")", "=", "np", ".", "where", "(", "templates", "==", "uqt", ")", "\n", "face_norm_feats", "=", "img_feats", "[", "ind_t", "]", "\n", "face_medias", "=", "medias", "[", "ind_t", "]", "\n", "unique_medias", ",", "unique_media_counts", "=", "np", ".", "unique", "(", "face_medias", ",", "\n", "return_counts", "=", "True", ")", "\n", "media_norm_feats", "=", "[", "]", "\n", "for", "u", ",", "ct", "in", "zip", "(", "unique_medias", ",", "unique_media_counts", ")", ":", "\n", "            ", "(", "ind_m", ",", ")", "=", "np", ".", "where", "(", "face_medias", "==", "u", ")", "\n", "if", "ct", "==", "1", ":", "\n", "                ", "media_norm_feats", "+=", "[", "face_norm_feats", "[", "ind_m", "]", "]", "\n", "", "else", ":", "# image features from the same video will be aggregated into one feature", "\n", "                ", "media_norm_feats", "+=", "[", "\n", "np", ".", "mean", "(", "face_norm_feats", "[", "ind_m", "]", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "]", "\n", "", "", "media_norm_feats", "=", "np", ".", "array", "(", "media_norm_feats", ")", "\n", "# media_norm_feats = media_norm_feats / np.sqrt(np.sum(media_norm_feats ** 2, -1, keepdims=True))", "\n", "template_feats", "[", "count_template", "]", "=", "np", ".", "sum", "(", "media_norm_feats", ",", "axis", "=", "0", ")", "\n", "if", "count_template", "%", "2000", "==", "0", ":", "\n", "            ", "print", "(", "'Finish Calculating {} template features.'", ".", "format", "(", "\n", "count_template", ")", ")", "\n", "# template_norm_feats = template_feats / np.sqrt(np.sum(template_feats ** 2, -1, keepdims=True))", "\n", "", "", "template_norm_feats", "=", "sklearn", ".", "preprocessing", ".", "normalize", "(", "template_feats", ")", "\n", "# print(template_norm_feats.shape)", "\n", "return", "template_norm_feats", ",", "unique_templates", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.eval_ijbc.verification": [[252, 279], ["numpy.zeros", "enumerate", "numpy.zeros", "numpy.array", "len", "enumerate", "range", "numpy.sum", "np.sum.flatten", "len", "len", "range", "print", "max", "len"], "function", ["None"], ["", "def", "verification", "(", "template_norm_feats", "=", "None", ",", "\n", "unique_templates", "=", "None", ",", "\n", "p1", "=", "None", ",", "\n", "p2", "=", "None", ")", ":", "\n", "# ==========================================================", "\n", "#         Compute set-to-set Similarity Score.", "\n", "# ==========================================================", "\n", "    ", "template2id", "=", "np", ".", "zeros", "(", "(", "max", "(", "unique_templates", ")", "+", "1", ",", "1", ")", ",", "dtype", "=", "int", ")", "\n", "for", "count_template", ",", "uqt", "in", "enumerate", "(", "unique_templates", ")", ":", "\n", "        ", "template2id", "[", "uqt", "]", "=", "count_template", "\n", "\n", "", "score", "=", "np", ".", "zeros", "(", "(", "len", "(", "p1", ")", ",", ")", ")", "# save cosine distance between pairs", "\n", "\n", "total_pairs", "=", "np", ".", "array", "(", "range", "(", "len", "(", "p1", ")", ")", ")", "\n", "batchsize", "=", "100000", "# small batchsize instead of all pairs in one batch due to the memory limiation", "\n", "sublists", "=", "[", "\n", "total_pairs", "[", "i", ":", "i", "+", "batchsize", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "p1", ")", ",", "batchsize", ")", "\n", "]", "\n", "total_sublists", "=", "len", "(", "sublists", ")", "\n", "for", "c", ",", "s", "in", "enumerate", "(", "sublists", ")", ":", "\n", "        ", "feat1", "=", "template_norm_feats", "[", "template2id", "[", "p1", "[", "s", "]", "]", "]", "\n", "feat2", "=", "template_norm_feats", "[", "template2id", "[", "p2", "[", "s", "]", "]", "]", "\n", "similarity_score", "=", "np", ".", "sum", "(", "feat1", "*", "feat2", ",", "-", "1", ")", "\n", "score", "[", "s", "]", "=", "similarity_score", ".", "flatten", "(", ")", "\n", "if", "c", "%", "10", "==", "0", ":", "\n", "            ", "print", "(", "'Finish {}/{} pairs.'", ".", "format", "(", "c", ",", "total_sublists", ")", ")", "\n", "", "", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.eval_ijbc.verification2": [[282, 304], ["numpy.zeros", "enumerate", "numpy.zeros", "numpy.array", "len", "enumerate", "range", "numpy.sum", "np.sum.flatten", "len", "len", "range", "print", "max", "len"], "function", ["None"], ["", "def", "verification2", "(", "template_norm_feats", "=", "None", ",", "\n", "unique_templates", "=", "None", ",", "\n", "p1", "=", "None", ",", "\n", "p2", "=", "None", ")", ":", "\n", "    ", "template2id", "=", "np", ".", "zeros", "(", "(", "max", "(", "unique_templates", ")", "+", "1", ",", "1", ")", ",", "dtype", "=", "int", ")", "\n", "for", "count_template", ",", "uqt", "in", "enumerate", "(", "unique_templates", ")", ":", "\n", "        ", "template2id", "[", "uqt", "]", "=", "count_template", "\n", "", "score", "=", "np", ".", "zeros", "(", "(", "len", "(", "p1", ")", ",", ")", ")", "# save cosine distance between pairs", "\n", "total_pairs", "=", "np", ".", "array", "(", "range", "(", "len", "(", "p1", ")", ")", ")", "\n", "batchsize", "=", "100000", "# small batchsize instead of all pairs in one batch due to the memory limiation", "\n", "sublists", "=", "[", "\n", "total_pairs", "[", "i", ":", "i", "+", "batchsize", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "p1", ")", ",", "batchsize", ")", "\n", "]", "\n", "total_sublists", "=", "len", "(", "sublists", ")", "\n", "for", "c", ",", "s", "in", "enumerate", "(", "sublists", ")", ":", "\n", "        ", "feat1", "=", "template_norm_feats", "[", "template2id", "[", "p1", "[", "s", "]", "]", "]", "\n", "feat2", "=", "template_norm_feats", "[", "template2id", "[", "p2", "[", "s", "]", "]", "]", "\n", "similarity_score", "=", "np", ".", "sum", "(", "feat1", "*", "feat2", ",", "-", "1", ")", "\n", "score", "[", "s", "]", "=", "similarity_score", ".", "flatten", "(", ")", "\n", "if", "c", "%", "10", "==", "0", ":", "\n", "            ", "print", "(", "'Finish {}/{} pairs.'", ".", "format", "(", "c", ",", "total_sublists", ")", ")", "\n", "", "", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.eval_ijbc.read_score": [[306, 310], ["open", "pickle.load"], "function", ["None"], ["", "def", "read_score", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "fid", ":", "\n", "        ", "img_feats", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "", "return", "img_feats", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.evaluate.get_feats": [[11, 22], ["cv2.imread", "cv2.resize", "cv2.cvtColor", "numpy.transpose", "torch.from_numpy().unsqueeze().float", "torch.from_numpy().unsqueeze().float.div_().sub_().div_", "net", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze().float.div_().sub_", "torch.from_numpy", "torch.from_numpy().unsqueeze().float.div_"], "function", ["None"], ["def", "get_feats", "(", "net", ",", "img_path", ")", ":", "\n", "    ", "img", "=", "cv2", ".", "imread", "(", "img_path", ")", "\n", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "112", ",", "112", ")", ")", "\n", "\n", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "img", "=", "np", ".", "transpose", "(", "img", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "unsqueeze", "(", "0", ")", ".", "float", "(", ")", "\n", "img", ".", "div_", "(", "255", ")", ".", "sub_", "(", "0.5", ")", ".", "div_", "(", "0.5", ")", "\n", "feat", "=", "net", "(", "img", ")", "\n", "\n", "return", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.evaluate.main": [[24, 52], ["torch.no_grad", "backbones.get_model", "backbones.get_model.load_state_dict", "backbones.get_model.eval", "print", "torch.nn.CosineSimilarity", "tqdm.tqdm", "torch.std_mean", "print", "print", "torch.load", "os.listdir", "os.path.join", "os.path.join", "torch.nn.CosineSimilarity.item", "total_loss.append", "torch.tensor", "evaluate.get_feats", "evaluate.get_feats", "torch.nn.CosineSimilarity.", "mean.item", "std.item"], "function", ["home.repos.pwc.inspect_result.fodark_anonygan.backbones.__init__.get_model", "home.repos.pwc.inspect_result.fodark_anonygan.arcface.evaluate.get_feats", "home.repos.pwc.inspect_result.fodark_anonygan.arcface.evaluate.get_feats"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "main", "(", "weight", ",", "name", ",", "orig_dir", ",", "mod_dir", ")", ":", "\n", "\n", "    ", "net", "=", "get_model", "(", "name", ",", "fp16", "=", "False", ")", "\n", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "weight", ")", ")", "\n", "net", ".", "eval", "(", ")", "\n", "\n", "# orig_dir = \"/media/dvl1/SSD_DATA/wildtrack-dataset/quantitative_test/orig/\"", "\n", "# mod_dir = \"/media/dvl1/SSD_DATA/wildtrack-dataset/quantitative_test/gen/\"", "\n", "print", "(", "\"Starting ID retrieval...\"", ")", "\n", "total_loss", "=", "[", "]", "\n", "d", "=", "torch", ".", "nn", ".", "CosineSimilarity", "(", ")", "\n", "\n", "for", "f", "in", "tqdm", "(", "os", ".", "listdir", "(", "orig_dir", ")", ")", ":", "\n", "        ", "orig_pic", "=", "os", ".", "path", ".", "join", "(", "orig_dir", ",", "f", ")", "\n", "mod_pic", "=", "os", ".", "path", ".", "join", "(", "mod_dir", ",", "f", ")", "\n", "\n", "orig_feats", ",", "mod_feats", "=", "get_feats", "(", "net", ",", "orig_pic", ")", ",", "get_feats", "(", "net", ",", "mod_pic", ")", "\n", "\n", "diff", "=", "d", "(", "orig_feats", ",", "mod_feats", ")", ".", "item", "(", ")", "\n", "\n", "total_loss", ".", "append", "(", "diff", ")", "\n", "\n", "", "std", ",", "mean", "=", "torch", ".", "std_mean", "(", "torch", ".", "tensor", "(", "total_loss", ")", ")", "\n", "\n", "print", "(", "\"Done. Results:\"", ")", "\n", "print", "(", "f\"{mean.item()} +- {std.item()}\"", ")", "\n", "return", "mean", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.onnx_ijbc.AlignedDataSet.__init__": [[29, 33], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "lines", ",", "align", "=", "True", ")", ":", "\n", "        ", "self", ".", "lines", "=", "lines", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "align", "=", "align", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.onnx_ijbc.AlignedDataSet.__len__": [[34, 36], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "lines", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.onnx_ijbc.AlignedDataSet.__getitem__": [[37, 52], ["each_line.strip().split", "os.path.join", "cv2.cvtColor", "numpy.array().reshape", "skimage.transform.SimilarityTransform", "skimage.transform.SimilarityTransform.estimate", "cv2.warpAffine", "numpy.expand_dims", "numpy.expand_dims", "numpy.concatenate().astype", "numpy.transpose", "mxnet.nd.array", "cv2.imread", "numpy.fliplr", "each_line.strip", "numpy.array", "numpy.concatenate", "float"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.eval.verification.LFold.split"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "each_line", "=", "self", ".", "lines", "[", "idx", "]", "\n", "name_lmk_score", "=", "each_line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "name", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "name_lmk_score", "[", "0", "]", ")", "\n", "img", "=", "cv2", ".", "cvtColor", "(", "cv2", ".", "imread", "(", "name", ")", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "landmark5", "=", "np", ".", "array", "(", "[", "float", "(", "x", ")", "for", "x", "in", "name_lmk_score", "[", "1", ":", "-", "1", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "(", "5", ",", "2", ")", ")", "\n", "st", "=", "skimage", ".", "transform", ".", "SimilarityTransform", "(", ")", "\n", "st", ".", "estimate", "(", "landmark5", ",", "SRC", ")", "\n", "img", "=", "cv2", ".", "warpAffine", "(", "img", ",", "st", ".", "params", "[", "0", ":", "2", ",", ":", "]", ",", "(", "112", ",", "112", ")", ",", "borderValue", "=", "0.0", ")", "\n", "img_1", "=", "np", ".", "expand_dims", "(", "img", ",", "0", ")", "\n", "img_2", "=", "np", ".", "expand_dims", "(", "np", ".", "fliplr", "(", "img", ")", ",", "0", ")", "\n", "output", "=", "np", ".", "concatenate", "(", "(", "img_1", ",", "img_2", ")", ",", "axis", "=", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "output", "=", "np", ".", "transpose", "(", "output", ",", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "\n", "output", "=", "mx", ".", "nd", ".", "array", "(", "output", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.onnx_ijbc.extract": [[54, 76], ["onnx_helper.ArcFaceORT", "onnx_helper.ArcFaceORT.check", "numpy.zeros", "mxnet.gluon.data.DataLoader", "mxnet.nd.concat", "batch.asnumpy.asnumpy", "numpy.reshape", "onnx_helper.ArcFaceORT.session.run", "print", "len"], "function", ["home.repos.pwc.inspect_result.fodark_anonygan.arcface.onnx_helper.ArcFaceORT.check", "home.repos.pwc.inspect_result.fodark_anonygan.arcface.dataset.BackgroundGenerator.run"], ["", "", "def", "extract", "(", "model_root", ",", "dataset", ")", ":", "\n", "    ", "model", "=", "ArcFaceORT", "(", "model_path", "=", "model_root", ")", "\n", "model", ".", "check", "(", ")", "\n", "feat_mat", "=", "np", ".", "zeros", "(", "shape", "=", "(", "len", "(", "dataset", ")", ",", "2", "*", "model", ".", "feat_dim", ")", ")", "\n", "\n", "def", "batchify_fn", "(", "data", ")", ":", "\n", "        ", "return", "mx", ".", "nd", ".", "concat", "(", "*", "data", ",", "dim", "=", "0", ")", "\n", "\n", "", "data_loader", "=", "mx", ".", "gluon", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ",", "128", ",", "last_batch", "=", "'keep'", ",", "num_workers", "=", "4", ",", "\n", "thread_pool", "=", "True", ",", "prefetch", "=", "16", ",", "batchify_fn", "=", "batchify_fn", ")", "\n", "num_iter", "=", "0", "\n", "for", "batch", "in", "data_loader", ":", "\n", "        ", "batch", "=", "batch", ".", "asnumpy", "(", ")", "\n", "batch", "=", "(", "batch", "-", "model", ".", "input_mean", ")", "/", "model", ".", "input_std", "\n", "feat", "=", "model", ".", "session", ".", "run", "(", "model", ".", "output_names", ",", "{", "model", ".", "input_name", ":", "batch", "}", ")", "[", "0", "]", "\n", "feat", "=", "np", ".", "reshape", "(", "feat", ",", "(", "-", "1", ",", "model", ".", "feat_dim", "*", "2", ")", ")", "\n", "feat_mat", "[", "128", "*", "num_iter", ":", "128", "*", "num_iter", "+", "feat", ".", "shape", "[", "0", "]", ",", ":", "]", "=", "feat", "\n", "num_iter", "+=", "1", "\n", "if", "num_iter", "%", "50", "==", "0", ":", "\n", "            ", "print", "(", "num_iter", ")", "\n", "", "", "return", "feat_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.onnx_ijbc.read_template_media_list": [[78, 83], ["ijb_meta[].astype", "ijb_meta[].astype", "pandas.read_csv"], "function", ["None"], ["", "def", "read_template_media_list", "(", "path", ")", ":", "\n", "    ", "ijb_meta", "=", "pd", ".", "read_csv", "(", "path", ",", "sep", "=", "' '", ",", "header", "=", "None", ")", ".", "values", "\n", "templates", "=", "ijb_meta", "[", ":", ",", "1", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "medias", "=", "ijb_meta", "[", ":", ",", "2", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "return", "templates", ",", "medias", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.onnx_ijbc.read_template_pair_list": [[85, 91], ["pairs[].astype", "pairs[].astype", "pairs[].astype", "pandas.read_csv"], "function", ["None"], ["", "def", "read_template_pair_list", "(", "path", ")", ":", "\n", "    ", "pairs", "=", "pd", ".", "read_csv", "(", "path", ",", "sep", "=", "' '", ",", "header", "=", "None", ")", ".", "values", "\n", "t1", "=", "pairs", "[", ":", ",", "0", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "t2", "=", "pairs", "[", ":", ",", "1", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "label", "=", "pairs", "[", ":", ",", "2", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "return", "t1", ",", "t2", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.onnx_ijbc.read_image_feature": [[93, 97], ["open", "pickle.load"], "function", ["None"], ["", "def", "read_image_feature", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "fid", ":", "\n", "        ", "img_feats", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "", "return", "img_feats", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.onnx_ijbc.image2template_feature": [[99, 123], ["numpy.unique", "numpy.zeros", "enumerate", "sklearn.preprocessing.normalize", "numpy.where", "numpy.unique", "zip", "numpy.array", "numpy.sum", "len", "numpy.where", "print", "numpy.mean"], "function", ["None"], ["", "def", "image2template_feature", "(", "img_feats", "=", "None", ",", "\n", "templates", "=", "None", ",", "\n", "medias", "=", "None", ")", ":", "\n", "    ", "unique_templates", "=", "np", ".", "unique", "(", "templates", ")", "\n", "template_feats", "=", "np", ".", "zeros", "(", "(", "len", "(", "unique_templates", ")", ",", "img_feats", ".", "shape", "[", "1", "]", ")", ")", "\n", "for", "count_template", ",", "uqt", "in", "enumerate", "(", "unique_templates", ")", ":", "\n", "        ", "(", "ind_t", ",", ")", "=", "np", ".", "where", "(", "templates", "==", "uqt", ")", "\n", "face_norm_feats", "=", "img_feats", "[", "ind_t", "]", "\n", "face_medias", "=", "medias", "[", "ind_t", "]", "\n", "unique_medias", ",", "unique_media_counts", "=", "np", ".", "unique", "(", "face_medias", ",", "return_counts", "=", "True", ")", "\n", "media_norm_feats", "=", "[", "]", "\n", "for", "u", ",", "ct", "in", "zip", "(", "unique_medias", ",", "unique_media_counts", ")", ":", "\n", "            ", "(", "ind_m", ",", ")", "=", "np", ".", "where", "(", "face_medias", "==", "u", ")", "\n", "if", "ct", "==", "1", ":", "\n", "                ", "media_norm_feats", "+=", "[", "face_norm_feats", "[", "ind_m", "]", "]", "\n", "", "else", ":", "# image features from the same video will be aggregated into one feature", "\n", "                ", "media_norm_feats", "+=", "[", "np", ".", "mean", "(", "face_norm_feats", "[", "ind_m", "]", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", ",", "]", "\n", "", "", "media_norm_feats", "=", "np", ".", "array", "(", "media_norm_feats", ")", "\n", "template_feats", "[", "count_template", "]", "=", "np", ".", "sum", "(", "media_norm_feats", ",", "axis", "=", "0", ")", "\n", "if", "count_template", "%", "2000", "==", "0", ":", "\n", "            ", "print", "(", "'Finish Calculating {} template features.'", ".", "format", "(", "\n", "count_template", ")", ")", "\n", "", "", "template_norm_feats", "=", "normalize", "(", "template_feats", ")", "\n", "return", "template_norm_feats", ",", "unique_templates", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.onnx_ijbc.verification": [[125, 145], ["numpy.zeros", "enumerate", "numpy.zeros", "numpy.array", "len", "enumerate", "range", "numpy.sum", "np.sum.flatten", "len", "len", "range", "print", "max", "len"], "function", ["None"], ["", "def", "verification", "(", "template_norm_feats", "=", "None", ",", "\n", "unique_templates", "=", "None", ",", "\n", "p1", "=", "None", ",", "\n", "p2", "=", "None", ")", ":", "\n", "    ", "template2id", "=", "np", ".", "zeros", "(", "(", "max", "(", "unique_templates", ")", "+", "1", ",", "1", ")", ",", "dtype", "=", "int", ")", "\n", "for", "count_template", ",", "uqt", "in", "enumerate", "(", "unique_templates", ")", ":", "\n", "        ", "template2id", "[", "uqt", "]", "=", "count_template", "\n", "", "score", "=", "np", ".", "zeros", "(", "(", "len", "(", "p1", ")", ",", ")", ")", "\n", "total_pairs", "=", "np", ".", "array", "(", "range", "(", "len", "(", "p1", ")", ")", ")", "\n", "batchsize", "=", "100000", "\n", "sublists", "=", "[", "total_pairs", "[", "i", ":", "i", "+", "batchsize", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "p1", ")", ",", "batchsize", ")", "]", "\n", "total_sublists", "=", "len", "(", "sublists", ")", "\n", "for", "c", ",", "s", "in", "enumerate", "(", "sublists", ")", ":", "\n", "        ", "feat1", "=", "template_norm_feats", "[", "template2id", "[", "p1", "[", "s", "]", "]", "]", "\n", "feat2", "=", "template_norm_feats", "[", "template2id", "[", "p2", "[", "s", "]", "]", "]", "\n", "similarity_score", "=", "np", ".", "sum", "(", "feat1", "*", "feat2", ",", "-", "1", ")", "\n", "score", "[", "s", "]", "=", "similarity_score", ".", "flatten", "(", ")", "\n", "if", "c", "%", "10", "==", "0", ":", "\n", "            ", "print", "(", "'Finish {}/{} pairs.'", ".", "format", "(", "c", ",", "total_sublists", ")", ")", "\n", "", "", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.onnx_ijbc.verification2": [[147, 167], ["numpy.zeros", "enumerate", "numpy.zeros", "numpy.array", "len", "enumerate", "range", "numpy.sum", "np.sum.flatten", "len", "len", "range", "print", "max", "len"], "function", ["None"], ["", "def", "verification2", "(", "template_norm_feats", "=", "None", ",", "\n", "unique_templates", "=", "None", ",", "\n", "p1", "=", "None", ",", "\n", "p2", "=", "None", ")", ":", "\n", "    ", "template2id", "=", "np", ".", "zeros", "(", "(", "max", "(", "unique_templates", ")", "+", "1", ",", "1", ")", ",", "dtype", "=", "int", ")", "\n", "for", "count_template", ",", "uqt", "in", "enumerate", "(", "unique_templates", ")", ":", "\n", "        ", "template2id", "[", "uqt", "]", "=", "count_template", "\n", "", "score", "=", "np", ".", "zeros", "(", "(", "len", "(", "p1", ")", ",", ")", ")", "# save cosine distance between pairs", "\n", "total_pairs", "=", "np", ".", "array", "(", "range", "(", "len", "(", "p1", ")", ")", ")", "\n", "batchsize", "=", "100000", "# small batchsize instead of all pairs in one batch due to the memory limiation", "\n", "sublists", "=", "[", "total_pairs", "[", "i", ":", "i", "+", "batchsize", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "p1", ")", ",", "batchsize", ")", "]", "\n", "total_sublists", "=", "len", "(", "sublists", ")", "\n", "for", "c", ",", "s", "in", "enumerate", "(", "sublists", ")", ":", "\n", "        ", "feat1", "=", "template_norm_feats", "[", "template2id", "[", "p1", "[", "s", "]", "]", "]", "\n", "feat2", "=", "template_norm_feats", "[", "template2id", "[", "p2", "[", "s", "]", "]", "]", "\n", "similarity_score", "=", "np", ".", "sum", "(", "feat1", "*", "feat2", ",", "-", "1", ")", "\n", "score", "[", "s", "]", "=", "similarity_score", ".", "flatten", "(", ")", "\n", "if", "c", "%", "10", "==", "0", ":", "\n", "            ", "print", "(", "'Finish {}/{} pairs.'", ".", "format", "(", "c", ",", "total_sublists", ")", ")", "\n", "", "", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.onnx_ijbc.main": [[169, 258], ["timeit.default_timer", "onnx_ijbc.read_template_media_list", "timeit.default_timer", "print", "timeit.default_timer", "onnx_ijbc.read_template_pair_list", "timeit.default_timer", "print", "timeit.default_timer", "open", "open.readlines", "onnx_ijbc.AlignedDataSet", "onnx_ijbc.extract", "numpy.array().astype", "timeit.default_timer", "print", "print", "timeit.default_timer", "onnx_ijbc.image2template_feature", "timeit.default_timer", "print", "timeit.default_timer", "onnx_ijbc.verification", "timeit.default_timer", "print", "os.path.join", "os.path.join", "numpy.save", "numpy.array", "dict", "prettytable.PrettyTable", "print", "os.path.join", "os.path.join", "each_line.split", "np.array().astype.append", "print", "os.path.exists", "os.makedirs", "np.array.append", "dict.append", "zip", "sklearn.metrics.roc_curve", "numpy.flipud", "numpy.flipud", "tpr_fpr_row.append", "numpy.arange", "prettytable.PrettyTable.add_row", "args.target.lower", "numpy.array", "numpy.sqrt", "os.path.basename", "numpy.load", "len", "min", "tpr_fpr_row.append", "args.target.lower", "args.target.lower", "numpy.sum", "str", "list", "zip", "abs", "range", "len"], "function", ["home.repos.pwc.inspect_result.fodark_anonygan.arcface.onnx_ijbc.read_template_media_list", "home.repos.pwc.inspect_result.fodark_anonygan.utils.plot.read_template_pair_list", "home.repos.pwc.inspect_result.fodark_anonygan.arcface.onnx_ijbc.extract", "home.repos.pwc.inspect_result.fodark_anonygan.arcface.onnx_ijbc.image2template_feature", "home.repos.pwc.inspect_result.fodark_anonygan.arcface.onnx_ijbc.verification", "home.repos.pwc.inspect_result.fodark_anonygan.eval.verification.LFold.split"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "use_norm_score", "=", "True", "# if Ture, TestMode(N1)", "\n", "use_detector_score", "=", "True", "# if Ture, TestMode(D1)", "\n", "use_flip_test", "=", "True", "# if Ture, TestMode(F1)", "\n", "assert", "args", ".", "target", "==", "'IJBC'", "or", "args", ".", "target", "==", "'IJBB'", "\n", "\n", "start", "=", "timeit", ".", "default_timer", "(", ")", "\n", "templates", ",", "medias", "=", "read_template_media_list", "(", "\n", "os", ".", "path", ".", "join", "(", "'%s/meta'", "%", "args", ".", "image_path", ",", "'%s_face_tid_mid.txt'", "%", "args", ".", "target", ".", "lower", "(", ")", ")", ")", "\n", "stop", "=", "timeit", ".", "default_timer", "(", ")", "\n", "print", "(", "'Time: %.2f s. '", "%", "(", "stop", "-", "start", ")", ")", "\n", "\n", "start", "=", "timeit", ".", "default_timer", "(", ")", "\n", "p1", ",", "p2", ",", "label", "=", "read_template_pair_list", "(", "\n", "os", ".", "path", ".", "join", "(", "'%s/meta'", "%", "args", ".", "image_path", ",", "\n", "'%s_template_pair_label.txt'", "%", "args", ".", "target", ".", "lower", "(", ")", ")", ")", "\n", "stop", "=", "timeit", ".", "default_timer", "(", ")", "\n", "print", "(", "'Time: %.2f s. '", "%", "(", "stop", "-", "start", ")", ")", "\n", "\n", "start", "=", "timeit", ".", "default_timer", "(", ")", "\n", "img_path", "=", "'%s/loose_crop'", "%", "args", ".", "image_path", "\n", "img_list_path", "=", "'%s/meta/%s_name_5pts_score.txt'", "%", "(", "args", ".", "image_path", ",", "args", ".", "target", ".", "lower", "(", ")", ")", "\n", "img_list", "=", "open", "(", "img_list_path", ")", "\n", "files", "=", "img_list", ".", "readlines", "(", ")", "\n", "dataset", "=", "AlignedDataSet", "(", "root", "=", "img_path", ",", "lines", "=", "files", ",", "align", "=", "True", ")", "\n", "img_feats", "=", "extract", "(", "args", ".", "model_root", ",", "dataset", ")", "\n", "\n", "faceness_scores", "=", "[", "]", "\n", "for", "each_line", "in", "files", ":", "\n", "        ", "name_lmk_score", "=", "each_line", ".", "split", "(", ")", "\n", "faceness_scores", ".", "append", "(", "name_lmk_score", "[", "-", "1", "]", ")", "\n", "", "faceness_scores", "=", "np", ".", "array", "(", "faceness_scores", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "stop", "=", "timeit", ".", "default_timer", "(", ")", "\n", "print", "(", "'Time: %.2f s. '", "%", "(", "stop", "-", "start", ")", ")", "\n", "print", "(", "'Feature Shape: ({} , {}) .'", ".", "format", "(", "img_feats", ".", "shape", "[", "0", "]", ",", "img_feats", ".", "shape", "[", "1", "]", ")", ")", "\n", "start", "=", "timeit", ".", "default_timer", "(", ")", "\n", "\n", "if", "use_flip_test", ":", "\n", "        ", "img_input_feats", "=", "img_feats", "[", ":", ",", "0", ":", "img_feats", ".", "shape", "[", "1", "]", "//", "2", "]", "+", "img_feats", "[", ":", ",", "img_feats", ".", "shape", "[", "1", "]", "//", "2", ":", "]", "\n", "", "else", ":", "\n", "        ", "img_input_feats", "=", "img_feats", "[", ":", ",", "0", ":", "img_feats", ".", "shape", "[", "1", "]", "//", "2", "]", "\n", "\n", "", "if", "use_norm_score", ":", "\n", "        ", "img_input_feats", "=", "img_input_feats", "\n", "", "else", ":", "\n", "        ", "img_input_feats", "=", "img_input_feats", "/", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "img_input_feats", "**", "2", ",", "-", "1", ",", "keepdims", "=", "True", ")", ")", "\n", "\n", "", "if", "use_detector_score", ":", "\n", "        ", "print", "(", "img_input_feats", ".", "shape", ",", "faceness_scores", ".", "shape", ")", "\n", "img_input_feats", "=", "img_input_feats", "*", "faceness_scores", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "", "else", ":", "\n", "        ", "img_input_feats", "=", "img_input_feats", "\n", "\n", "", "template_norm_feats", ",", "unique_templates", "=", "image2template_feature", "(", "\n", "img_input_feats", ",", "templates", ",", "medias", ")", "\n", "stop", "=", "timeit", ".", "default_timer", "(", ")", "\n", "print", "(", "'Time: %.2f s. '", "%", "(", "stop", "-", "start", ")", ")", "\n", "\n", "start", "=", "timeit", ".", "default_timer", "(", ")", "\n", "score", "=", "verification", "(", "template_norm_feats", ",", "unique_templates", ",", "p1", ",", "p2", ")", "\n", "stop", "=", "timeit", ".", "default_timer", "(", ")", "\n", "print", "(", "'Time: %.2f s. '", "%", "(", "stop", "-", "start", ")", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "result_dir", ",", "\"{}_result\"", ".", "format", "(", "args", ".", "target", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "", "score_save_file", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"{}.npy\"", ".", "format", "(", "args", ".", "model_root", ")", ")", "\n", "np", ".", "save", "(", "score_save_file", ",", "score", ")", "\n", "files", "=", "[", "score_save_file", "]", "\n", "methods", "=", "[", "]", "\n", "scores", "=", "[", "]", "\n", "for", "file", "in", "files", ":", "\n", "        ", "methods", ".", "append", "(", "os", ".", "path", ".", "basename", "(", "file", ")", ")", "\n", "scores", ".", "append", "(", "np", ".", "load", "(", "file", ")", ")", "\n", "", "methods", "=", "np", ".", "array", "(", "methods", ")", "\n", "scores", "=", "dict", "(", "zip", "(", "methods", ",", "scores", ")", ")", "\n", "x_labels", "=", "[", "10", "**", "-", "6", ",", "10", "**", "-", "5", ",", "10", "**", "-", "4", ",", "10", "**", "-", "3", ",", "10", "**", "-", "2", ",", "10", "**", "-", "1", "]", "\n", "tpr_fpr_table", "=", "prettytable", ".", "PrettyTable", "(", "[", "'Methods'", "]", "+", "[", "str", "(", "x", ")", "for", "x", "in", "x_labels", "]", ")", "\n", "for", "method", "in", "methods", ":", "\n", "        ", "fpr", ",", "tpr", ",", "_", "=", "roc_curve", "(", "label", ",", "scores", "[", "method", "]", ")", "\n", "fpr", "=", "np", ".", "flipud", "(", "fpr", ")", "\n", "tpr", "=", "np", ".", "flipud", "(", "tpr", ")", "\n", "tpr_fpr_row", "=", "[", "]", "\n", "tpr_fpr_row", ".", "append", "(", "\"%s-%s\"", "%", "(", "method", ",", "args", ".", "target", ")", ")", "\n", "for", "fpr_iter", "in", "np", ".", "arange", "(", "len", "(", "x_labels", ")", ")", ":", "\n", "            ", "_", ",", "min_index", "=", "min", "(", "\n", "list", "(", "zip", "(", "abs", "(", "fpr", "-", "x_labels", "[", "fpr_iter", "]", ")", ",", "range", "(", "len", "(", "fpr", ")", ")", ")", ")", ")", "\n", "tpr_fpr_row", ".", "append", "(", "'%.2f'", "%", "(", "tpr", "[", "min_index", "]", "*", "100", ")", ")", "\n", "", "tpr_fpr_table", ".", "add_row", "(", "tpr_fpr_row", ")", "\n", "", "print", "(", "tpr_fpr_table", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.train.main": [[21, 134], ["utils.utils_config.get_config", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "os.makedirs", "utils.utils_logging.init_logging", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "dataset.DataLoaderX", "backbones.get_model().to", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel.train", "losses.get_loss", "partial_fc.PartialFC", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "len", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "utils.utils_config.get_config.items", "utils.utils_callbacks.CallBackVerification", "utils.utils_callbacks.CallBackLogging", "utils.utils_callbacks.CallBackModelCheckpoint", "utils.utils_logging.AverageMeter", "range", "torch.destroy_process_group", "int", "int", "torch.init_process_group", "dataset.SyntheticDataset", "dataset.MXFaceDataset", "logging.info", "utils.utils_amp.MaxClipGradScaler", "torch.utils.data.distributed.DistributedSampler.set_epoch", "enumerate", "utils.utils_callbacks.CallBackModelCheckpoint.", "torch.init_process_group", "backbones.get_model", "os.path.join", "torch.nn.parallel.DistributedDataParallel.load_state_dict", "len", "torch.normalize", "partial_fc.PartialFC.forward_backward", "torch.optim.SGD.step", "partial_fc.PartialFC.update", "torch.optim.SGD.zero_grad", "torch.optim.SGD.zero_grad", "utils.utils_logging.AverageMeter.update", "utils.utils_callbacks.CallBackLogging.", "utils.utils_callbacks.CallBackVerification.", "torch.optim.lr_scheduler.LambdaLR.step", "torch.optim.lr_scheduler.LambdaLR.step", "torch.load", "torch.load", "torch.load", "torch.load", "logging.info", "len", "str", "torch.nn.parallel.DistributedDataParallel.", "F.normalize.backward", "grad_amp.unscale_", "torch.nn.utils.clip_grad_norm_", "grad_amp.step", "grad_amp.update", "F.normalize.backward", "torch.nn.utils.clip_grad_norm_", "torch.optim.SGD.step", "logging.info", "torch.nn.parallel.DistributedDataParallel.parameters", "partial_fc.PartialFC.parameters", "grad_amp.scale", "torch.nn.parallel.DistributedDataParallel.parameters", "torch.nn.parallel.DistributedDataParallel.parameters", "torch.optim.lr_scheduler.LambdaLR.get_last_lr", "torch.device", "torch.device", "torch.device", "torch.device"], "function", ["home.repos.pwc.inspect_result.fodark_anonygan.utils.utils_config.get_config", "home.repos.pwc.inspect_result.fodark_anonygan.utils.utils_logging.init_logging", "home.repos.pwc.inspect_result.fodark_anonygan.arcface.losses.get_loss", "home.repos.pwc.inspect_result.fodark_anonygan.backbones.__init__.get_model", "home.repos.pwc.inspect_result.fodark_anonygan.arcface.partial_fc.PartialFC.forward_backward", "home.repos.pwc.inspect_result.fodark_anonygan.utils.utils_logging.AverageMeter.update", "home.repos.pwc.inspect_result.fodark_anonygan.utils.utils_logging.AverageMeter.update", "home.repos.pwc.inspect_result.fodark_anonygan.utils.utils_logging.AverageMeter.update", "home.repos.pwc.inspect_result.fodark_anonygan.utils.utils_amp.MaxClipGradScaler.scale"], ["opt", ".", "train_same_identity", ",", "\n", "opt", ".", "reduced_landmarks", ",", "\n", ")", "\n", "\n", "logger", "=", "TensorBoardLogger", "(", "save_dir", "=", "\"./lightning_logs\"", ",", "version", "=", "opt", ".", "name", ")", "\n", "wandb_logger", "=", "WandbLogger", "(", ")", "# newline 2", "\n", "\n", "wandb_logger", ".", "watch", "(", "model", ".", "G", ",", "log", "=", "\"gradients\"", ",", "log_freq", "=", "100", ")", "\n", "wandb_logger", ".", "watch", "(", "model", ".", "D_gan", ",", "log", "=", "\"gradients\"", ",", "log_freq", "=", "100", ")", "\n", "wandb_logger", ".", "watch", "(", "model", ".", "D_pose", ",", "log", "=", "\"gradients\"", ",", "log_freq", "=", "100", ")", "\n", "\n", "# training", "\n", "trainer", "=", "pl", ".", "Trainer", "(", "\n", "gpus", "=", "-", "1", ",", "\n", "num_nodes", "=", "1", ",", "\n", "precision", "=", "32", ",", "\n", "limit_train_batches", "=", "1.0", ",", "\n", "max_epochs", "=", "700", ",", "\n", "logger", "=", "wandb_logger", ",", "\n", "accelerator", "=", "\"ddp_spawn\"", ",", "\n", "plugins", "=", "DDPSpawnPlugin", "(", "find_unused_parameters", "=", "True", ")", ",", "\n", ")", "\n", "trainer", ".", "fit", "(", "model", ",", "dataset", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.dataset.BackgroundGenerator.__init__": [[14, 21], ["threading.Thread.__init__", "queue.Queue", "dataset.BackgroundGenerator.start"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.CustomImageDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "generator", ",", "local_rank", ",", "max_prefetch", "=", "6", ")", ":", "\n", "        ", "super", "(", "BackgroundGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "queue", "=", "Queue", ".", "Queue", "(", "max_prefetch", ")", "\n", "self", ".", "generator", "=", "generator", "\n", "self", ".", "local_rank", "=", "local_rank", "\n", "self", ".", "daemon", "=", "True", "\n", "self", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.dataset.BackgroundGenerator.run": [[22, 27], ["torch.cuda.set_device", "dataset.BackgroundGenerator.queue.put", "dataset.BackgroundGenerator.queue.put"], "methods", ["None"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "self", ".", "local_rank", ")", "\n", "for", "item", "in", "self", ".", "generator", ":", "\n", "            ", "self", ".", "queue", ".", "put", "(", "item", ")", "\n", "", "self", ".", "queue", ".", "put", "(", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.dataset.BackgroundGenerator.next": [[28, 33], ["dataset.BackgroundGenerator.queue.get"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.utils.utils_amp._MultiDeviceReplicator.get"], ["", "def", "next", "(", "self", ")", ":", "\n", "        ", "next_item", "=", "self", ".", "queue", ".", "get", "(", ")", "\n", "if", "next_item", "is", "None", ":", "\n", "            ", "raise", "StopIteration", "\n", "", "return", "next_item", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.dataset.BackgroundGenerator.__next__": [[34, 36], ["dataset.BackgroundGenerator.next"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.arcface.dataset.BackgroundGenerator.next"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "next", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.dataset.BackgroundGenerator.__iter__": [[37, 39], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.dataset.DataLoaderX.__init__": [[43, 47], ["torch.utils.data.DataLoader.__init__", "torch.cuda.Stream"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.CustomImageDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "local_rank", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DataLoaderX", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "stream", "=", "torch", ".", "cuda", ".", "Stream", "(", "local_rank", ")", "\n", "self", ".", "local_rank", "=", "local_rank", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.dataset.DataLoaderX.__iter__": [[48, 53], ["torch.utils.data.DataLoader.__iter__", "dataset.BackgroundGenerator", "dataset.DataLoaderX.preload"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.arcface.dataset.DataLoaderX.__iter__", "home.repos.pwc.inspect_result.fodark_anonygan.arcface.dataset.DataLoaderX.preload"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "iter", "=", "super", "(", "DataLoaderX", ",", "self", ")", ".", "__iter__", "(", ")", "\n", "self", ".", "iter", "=", "BackgroundGenerator", "(", "self", ".", "iter", ",", "self", ".", "local_rank", ")", "\n", "self", ".", "preload", "(", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.dataset.DataLoaderX.preload": [[54, 61], ["next", "torch.cuda.stream", "range", "len", "dataset.DataLoaderX.batch[].to"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.arcface.dataset.BackgroundGenerator.next"], ["", "def", "preload", "(", "self", ")", ":", "\n", "        ", "self", ".", "batch", "=", "next", "(", "self", ".", "iter", ",", "None", ")", "\n", "if", "self", ".", "batch", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "with", "torch", ".", "cuda", ".", "stream", "(", "self", ".", "stream", ")", ":", "\n", "            ", "for", "k", "in", "range", "(", "len", "(", "self", ".", "batch", ")", ")", ":", "\n", "                ", "self", ".", "batch", "[", "k", "]", "=", "self", ".", "batch", "[", "k", "]", ".", "to", "(", "device", "=", "self", ".", "local_rank", ",", "non_blocking", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.dataset.DataLoaderX.__next__": [[62, 69], ["torch.cuda.current_stream().wait_stream", "dataset.DataLoaderX.preload", "torch.cuda.current_stream"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.arcface.dataset.DataLoaderX.preload"], ["", "", "", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "current_stream", "(", ")", ".", "wait_stream", "(", "self", ".", "stream", ")", "\n", "batch", "=", "self", ".", "batch", "\n", "if", "batch", "is", "None", ":", "\n", "            ", "raise", "StopIteration", "\n", "", "self", ".", "preload", "(", ")", "\n", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.dataset.MXFaceDataset.__init__": [[72, 92], ["torch.utils.data.Dataset.__init__", "torchvision.transforms.Compose", "os.path.join", "os.path.join", "mxnet.recordio.MXIndexedRecordIO", "dataset.MXFaceDataset.imgrec.read_idx", "mxnet.recordio.unpack", "numpy.array", "numpy.array", "torchvision.transforms.ToPILImage", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "int", "int", "range", "list", "int"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.CustomImageDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root_dir", ",", "local_rank", ")", ":", "\n", "        ", "super", "(", "MXFaceDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "std", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", ",", "\n", "]", ")", "\n", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "local_rank", "=", "local_rank", "\n", "path_imgrec", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'train.rec'", ")", "\n", "path_imgidx", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'train.idx'", ")", "\n", "self", ".", "imgrec", "=", "mx", ".", "recordio", ".", "MXIndexedRecordIO", "(", "path_imgidx", ",", "path_imgrec", ",", "'r'", ")", "\n", "s", "=", "self", ".", "imgrec", ".", "read_idx", "(", "0", ")", "\n", "header", ",", "_", "=", "mx", ".", "recordio", ".", "unpack", "(", "s", ")", "\n", "if", "header", ".", "flag", ">", "0", ":", "\n", "            ", "self", ".", "header0", "=", "(", "int", "(", "header", ".", "label", "[", "0", "]", ")", ",", "int", "(", "header", ".", "label", "[", "1", "]", ")", ")", "\n", "self", ".", "imgidx", "=", "np", ".", "array", "(", "range", "(", "1", ",", "int", "(", "header", ".", "label", "[", "0", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "imgidx", "=", "np", ".", "array", "(", "list", "(", "self", ".", "imgrec", ".", "keys", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.dataset.MXFaceDataset.__getitem__": [[93, 105], ["dataset.MXFaceDataset.imgrec.read_idx", "mxnet.recordio.unpack", "torch.tensor", "mxnet.image.imdecode().asnumpy", "isinstance", "dataset.MXFaceDataset.transform", "mxnet.image.imdecode"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "idx", "=", "self", ".", "imgidx", "[", "index", "]", "\n", "s", "=", "self", ".", "imgrec", ".", "read_idx", "(", "idx", ")", "\n", "header", ",", "img", "=", "mx", ".", "recordio", ".", "unpack", "(", "s", ")", "\n", "label", "=", "header", ".", "label", "\n", "if", "not", "isinstance", "(", "label", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "label", "=", "label", "[", "0", "]", "\n", "", "label", "=", "torch", ".", "tensor", "(", "label", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "sample", "=", "mx", ".", "image", ".", "imdecode", "(", "img", ")", ".", "asnumpy", "(", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "", "return", "sample", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.dataset.MXFaceDataset.__len__": [[106, 108], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgidx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.dataset.SyntheticDataset.__init__": [[111, 119], ["torch.utils.data.Dataset.__init__", "numpy.random.randint", "numpy.transpose", "torch.from_numpy().squeeze().float", "torch.from_numpy().squeeze", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.CustomImageDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "local_rank", ")", ":", "\n", "        ", "super", "(", "SyntheticDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "img", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "255", ",", "size", "=", "(", "112", ",", "112", ",", "3", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "img", "=", "np", ".", "transpose", "(", "img", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "squeeze", "(", "0", ")", ".", "float", "(", ")", "\n", "img", "=", "(", "(", "img", "/", "255", ")", "-", "0.5", ")", "/", "0.5", "\n", "self", ".", "img", "=", "img", "\n", "self", ".", "label", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.dataset.SyntheticDataset.__getitem__": [[120, 122], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "img", ",", "self", ".", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.dataset.SyntheticDataset.__len__": [[123, 125], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "1000000", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.onnx_helper.ArcFaceORT.__init__": [[16, 19], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model_path", ",", "cpu", "=", "False", ")", ":", "\n", "        ", "self", ".", "model_path", "=", "model_path", "\n", "self", ".", "cpu", "=", "cpu", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.onnx_helper.ArcFaceORT.check": [[21, 186], ["track.startswith", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "print", "print", "tuple", "onnxruntime.InferenceSession.get_outputs", "onnx.load", "onnx_helper.ArcFaceORT.benchmark", "onnx_helper.ArcFaceORT.check_batch", "float", "print", "track.startswith", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.isdir", "os.path.isdir", "os.path.isdir", "os.path.isdir", "_file.endswith", "len", "sorted", "onnxruntime.InferenceSession", "onnxruntime.InferenceSession.set_providers", "onnxruntime.InferenceSession.get_inputs", "len", "isinstance", "print", "onnx.load", "os.join", "os.join", "onnx.save", "print", "print", "output_names.append", "len", "len", "os.join", "os.join", "os.exists", "os.exists", "os.path.getsize", "os.path.getsize", "os.path.getsize", "os.path.getsize", "float", "os.join", "os.join", "os.exists", "os.exists", "enumerate", "onnx.numpy_helper.to_array", "insightface.data.get_image", "cv2.resize", "cv2.resize", "numpy.sum", "print", "print", "len", "track.startswith", "onnx_files.append", "onnxruntime.InferenceSession", "onnxruntime.InferenceSession.set_providers", "onnxruntime.InferenceSession.get_inputs", "open().readlines", "tuple", "open().readlines", "float", "float", "print", "print", "str", "track.startswith", "os.join", "os.join", "len", "int", "len", "node.name.startswith", "node.name.startswith", "node.name.startswith", "node.name.startswith", "node.name.startswith", "float", "open", "open", "float"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.arcface.onnx_helper.ArcFaceORT.benchmark", "home.repos.pwc.inspect_result.fodark_anonygan.arcface.onnx_helper.ArcFaceORT.check_batch"], ["", "def", "check", "(", "self", ",", "track", "=", "'cfat'", ",", "test_img", "=", "None", ")", ":", "\n", "#default is cfat", "\n", "        ", "max_model_size_mb", "=", "1024", "\n", "max_feat_dim", "=", "512", "\n", "max_time_cost", "=", "15", "\n", "if", "track", ".", "startswith", "(", "'ms1m'", ")", ":", "\n", "            ", "max_model_size_mb", "=", "1024", "\n", "max_feat_dim", "=", "512", "\n", "max_time_cost", "=", "10", "\n", "", "elif", "track", ".", "startswith", "(", "'glint'", ")", ":", "\n", "            ", "max_model_size_mb", "=", "1024", "\n", "max_feat_dim", "=", "1024", "\n", "max_time_cost", "=", "20", "\n", "", "elif", "track", ".", "startswith", "(", "'cfat'", ")", ":", "\n", "            ", "max_model_size_mb", "=", "1024", "\n", "max_feat_dim", "=", "512", "\n", "max_time_cost", "=", "15", "\n", "", "elif", "track", ".", "startswith", "(", "'unconstrained'", ")", ":", "\n", "            ", "max_model_size_mb", "=", "1024", "\n", "max_feat_dim", "=", "1024", "\n", "max_time_cost", "=", "30", "\n", "", "else", ":", "\n", "            ", "return", "\"track not found\"", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "model_path", ")", ":", "\n", "            ", "return", "\"model_path not exists\"", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "self", ".", "model_path", ")", ":", "\n", "            ", "return", "\"model_path should be directory\"", "\n", "", "onnx_files", "=", "[", "]", "\n", "for", "_file", "in", "os", ".", "listdir", "(", "self", ".", "model_path", ")", ":", "\n", "            ", "if", "_file", ".", "endswith", "(", "'.onnx'", ")", ":", "\n", "                ", "onnx_files", ".", "append", "(", "osp", ".", "join", "(", "self", ".", "model_path", ",", "_file", ")", ")", "\n", "", "", "if", "len", "(", "onnx_files", ")", "==", "0", ":", "\n", "            ", "return", "\"do not have onnx files\"", "\n", "", "self", ".", "model_file", "=", "sorted", "(", "onnx_files", ")", "[", "-", "1", "]", "\n", "print", "(", "'use onnx-model:'", ",", "self", ".", "model_file", ")", "\n", "try", ":", "\n", "            ", "session", "=", "onnxruntime", ".", "InferenceSession", "(", "self", ".", "model_file", ",", "None", ")", "\n", "", "except", ":", "\n", "            ", "return", "\"load onnx failed\"", "\n", "", "if", "self", ".", "cpu", ":", "\n", "            ", "session", ".", "set_providers", "(", "[", "'CPUExecutionProvider'", "]", ")", "\n", "", "input_cfg", "=", "session", ".", "get_inputs", "(", ")", "[", "0", "]", "\n", "input_shape", "=", "input_cfg", ".", "shape", "\n", "print", "(", "'input-shape:'", ",", "input_shape", ")", "\n", "if", "len", "(", "input_shape", ")", "!=", "4", ":", "\n", "            ", "return", "\"length of input_shape should be 4\"", "\n", "", "if", "not", "isinstance", "(", "input_shape", "[", "0", "]", ",", "str", ")", ":", "\n", "#return \"input_shape[0] should be str to support batch-inference\"", "\n", "            ", "print", "(", "'reset input-shape[0] to None'", ")", "\n", "model", "=", "onnx", ".", "load", "(", "self", ".", "model_file", ")", "\n", "model", ".", "graph", ".", "input", "[", "0", "]", ".", "type", ".", "tensor_type", ".", "shape", ".", "dim", "[", "0", "]", ".", "dim_param", "=", "'None'", "\n", "new_model_file", "=", "osp", ".", "join", "(", "self", ".", "model_path", ",", "'zzzzrefined.onnx'", ")", "\n", "onnx", ".", "save", "(", "model", ",", "new_model_file", ")", "\n", "self", ".", "model_file", "=", "new_model_file", "\n", "print", "(", "'use new onnx-model:'", ",", "self", ".", "model_file", ")", "\n", "try", ":", "\n", "                ", "session", "=", "onnxruntime", ".", "InferenceSession", "(", "self", ".", "model_file", ",", "None", ")", "\n", "", "except", ":", "\n", "                ", "return", "\"load onnx failed\"", "\n", "", "if", "self", ".", "cpu", ":", "\n", "                ", "session", ".", "set_providers", "(", "[", "'CPUExecutionProvider'", "]", ")", "\n", "", "input_cfg", "=", "session", ".", "get_inputs", "(", ")", "[", "0", "]", "\n", "input_shape", "=", "input_cfg", ".", "shape", "\n", "print", "(", "'new-input-shape:'", ",", "input_shape", ")", "\n", "\n", "", "self", ".", "image_size", "=", "tuple", "(", "input_shape", "[", "2", ":", "4", "]", "[", ":", ":", "-", "1", "]", ")", "\n", "#print('image_size:', self.image_size)", "\n", "input_name", "=", "input_cfg", ".", "name", "\n", "outputs", "=", "session", ".", "get_outputs", "(", ")", "\n", "output_names", "=", "[", "]", "\n", "for", "o", "in", "outputs", ":", "\n", "            ", "output_names", ".", "append", "(", "o", ".", "name", ")", "\n", "#print(o.name, o.shape)", "\n", "", "if", "len", "(", "output_names", ")", "!=", "1", ":", "\n", "            ", "return", "\"number of output nodes should be 1\"", "\n", "", "self", ".", "session", "=", "session", "\n", "self", ".", "input_name", "=", "input_name", "\n", "self", ".", "output_names", "=", "output_names", "\n", "#print(self.output_names)", "\n", "model", "=", "onnx", ".", "load", "(", "self", ".", "model_file", ")", "\n", "graph", "=", "model", ".", "graph", "\n", "if", "len", "(", "graph", ".", "node", ")", "<", "8", ":", "\n", "            ", "return", "\"too small onnx graph\"", "\n", "\n", "", "input_size", "=", "(", "112", ",", "112", ")", "\n", "self", ".", "crop", "=", "None", "\n", "if", "track", "==", "'cfat'", ":", "\n", "            ", "crop_file", "=", "osp", ".", "join", "(", "self", ".", "model_path", ",", "'crop.txt'", ")", "\n", "if", "osp", ".", "exists", "(", "crop_file", ")", ":", "\n", "                ", "lines", "=", "open", "(", "crop_file", ",", "'r'", ")", ".", "readlines", "(", ")", "\n", "if", "len", "(", "lines", ")", "!=", "6", ":", "\n", "                    ", "return", "\"crop.txt should contain 6 lines\"", "\n", "", "lines", "=", "[", "int", "(", "x", ")", "for", "x", "in", "lines", "]", "\n", "self", ".", "crop", "=", "lines", "[", ":", "4", "]", "\n", "input_size", "=", "tuple", "(", "lines", "[", "4", ":", "6", "]", ")", "\n", "", "", "if", "input_size", "!=", "self", ".", "image_size", ":", "\n", "            ", "return", "\"input-size is inconsistant with onnx model input, %s vs %s\"", "%", "(", "input_size", ",", "self", ".", "image_size", ")", "\n", "\n", "", "self", ".", "model_size_mb", "=", "os", ".", "path", ".", "getsize", "(", "self", ".", "model_file", ")", "/", "float", "(", "1024", "*", "1024", ")", "\n", "if", "self", ".", "model_size_mb", ">", "max_model_size_mb", ":", "\n", "            ", "return", "\"max model size exceed, given %.3f-MB\"", "%", "self", ".", "model_size_mb", "\n", "\n", "", "input_mean", "=", "None", "\n", "input_std", "=", "None", "\n", "if", "track", "==", "'cfat'", ":", "\n", "            ", "pn_file", "=", "osp", ".", "join", "(", "self", ".", "model_path", ",", "'pixel_norm.txt'", ")", "\n", "if", "osp", ".", "exists", "(", "pn_file", ")", ":", "\n", "                ", "lines", "=", "open", "(", "pn_file", ",", "'r'", ")", ".", "readlines", "(", ")", "\n", "if", "len", "(", "lines", ")", "!=", "2", ":", "\n", "                    ", "return", "\"pixel_norm.txt should contain 2 lines\"", "\n", "", "input_mean", "=", "float", "(", "lines", "[", "0", "]", ")", "\n", "input_std", "=", "float", "(", "lines", "[", "1", "]", ")", "\n", "", "", "if", "input_mean", "is", "not", "None", "or", "input_std", "is", "not", "None", ":", "\n", "            ", "if", "input_mean", "is", "None", "or", "input_std", "is", "None", ":", "\n", "                ", "return", "\"please set input_mean and input_std simultaneously\"", "\n", "", "", "else", ":", "\n", "            ", "find_sub", "=", "False", "\n", "find_mul", "=", "False", "\n", "for", "nid", ",", "node", "in", "enumerate", "(", "graph", ".", "node", "[", ":", "8", "]", ")", ":", "\n", "                ", "print", "(", "nid", ",", "node", ".", "name", ")", "\n", "if", "node", ".", "name", ".", "startswith", "(", "'Sub'", ")", "or", "node", ".", "name", ".", "startswith", "(", "'_minus'", ")", ":", "\n", "                    ", "find_sub", "=", "True", "\n", "", "if", "node", ".", "name", ".", "startswith", "(", "'Mul'", ")", "or", "node", ".", "name", ".", "startswith", "(", "'_mul'", ")", "or", "node", ".", "name", ".", "startswith", "(", "'Div'", ")", ":", "\n", "                    ", "find_mul", "=", "True", "\n", "", "", "if", "find_sub", "and", "find_mul", ":", "\n", "                ", "print", "(", "\"find sub and mul\"", ")", "\n", "#mxnet arcface model", "\n", "input_mean", "=", "0.0", "\n", "input_std", "=", "1.0", "\n", "", "else", ":", "\n", "                ", "input_mean", "=", "127.5", "\n", "input_std", "=", "127.5", "\n", "", "", "self", ".", "input_mean", "=", "input_mean", "\n", "self", ".", "input_std", "=", "input_std", "\n", "for", "initn", "in", "graph", ".", "initializer", ":", "\n", "            ", "weight_array", "=", "numpy_helper", ".", "to_array", "(", "initn", ")", "\n", "dt", "=", "weight_array", ".", "dtype", "\n", "if", "dt", ".", "itemsize", "<", "4", ":", "\n", "                ", "return", "'invalid weight type - (%s:%s)'", "%", "(", "initn", ".", "name", ",", "dt", ".", "name", ")", "\n", "", "", "if", "test_img", "is", "None", ":", "\n", "            ", "test_img", "=", "get_image", "(", "'Tom_Hanks_54745'", ")", "\n", "test_img", "=", "cv2", ".", "resize", "(", "test_img", ",", "self", ".", "image_size", ")", "\n", "", "else", ":", "\n", "            ", "test_img", "=", "cv2", ".", "resize", "(", "test_img", ",", "self", ".", "image_size", ")", "\n", "", "feat", ",", "cost", "=", "self", ".", "benchmark", "(", "test_img", ")", "\n", "batch_result", "=", "self", ".", "check_batch", "(", "test_img", ")", "\n", "batch_result_sum", "=", "float", "(", "np", ".", "sum", "(", "batch_result", ")", ")", "\n", "if", "batch_result_sum", "in", "[", "float", "(", "'inf'", ")", ",", "-", "float", "(", "'inf'", ")", "]", "or", "batch_result_sum", "!=", "batch_result_sum", ":", "\n", "            ", "print", "(", "batch_result", ")", "\n", "print", "(", "batch_result_sum", ")", "\n", "return", "\"batch result output contains NaN!\"", "\n", "\n", "", "if", "len", "(", "feat", ".", "shape", ")", "<", "2", ":", "\n", "           ", "return", "\"the shape of the feature must be two, but get {}\"", ".", "format", "(", "str", "(", "feat", ".", "shape", ")", ")", "\n", "\n", "", "if", "feat", ".", "shape", "[", "1", "]", ">", "max_feat_dim", ":", "\n", "            ", "return", "\"max feat dim exceed, given %d\"", "%", "feat", ".", "shape", "[", "1", "]", "\n", "", "self", ".", "feat_dim", "=", "feat", ".", "shape", "[", "1", "]", "\n", "cost_ms", "=", "cost", "*", "1000", "\n", "if", "cost_ms", ">", "max_time_cost", ":", "\n", "            ", "return", "\"max time cost exceed, given %.4f\"", "%", "cost_ms", "\n", "", "self", ".", "cost_ms", "=", "cost_ms", "\n", "print", "(", "'check stat:, model-size-mb: %.4f, feat-dim: %d, time-cost-ms: %.4f, input-mean: %.3f, input-std: %.3f'", "%", "(", "self", ".", "model_size_mb", ",", "self", ".", "feat_dim", ",", "self", ".", "cost_ms", ",", "self", ".", "input_mean", ",", "self", ".", "input_std", ")", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.onnx_helper.ArcFaceORT.check_batch": [[187, 203], ["cv2.dnn.blobFromImages", "isinstance", "onnx_helper.ArcFaceORT.session.run", "nimgs.append", "cv2.resize"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.arcface.dataset.BackgroundGenerator.run"], ["", "def", "check_batch", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "img", ",", "list", ")", ":", "\n", "            ", "imgs", "=", "[", "img", ",", "]", "*", "32", "\n", "", "if", "self", ".", "crop", "is", "not", "None", ":", "\n", "            ", "nimgs", "=", "[", "]", "\n", "for", "img", "in", "imgs", ":", "\n", "                ", "nimg", "=", "img", "[", "self", ".", "crop", "[", "1", "]", ":", "self", ".", "crop", "[", "3", "]", ",", "self", ".", "crop", "[", "0", "]", ":", "self", ".", "crop", "[", "2", "]", ",", ":", "]", "\n", "if", "nimg", ".", "shape", "[", "0", "]", "!=", "self", ".", "image_size", "[", "1", "]", "or", "nimg", ".", "shape", "[", "1", "]", "!=", "self", ".", "image_size", "[", "0", "]", ":", "\n", "                    ", "nimg", "=", "cv2", ".", "resize", "(", "nimg", ",", "self", ".", "image_size", ")", "\n", "", "nimgs", ".", "append", "(", "nimg", ")", "\n", "", "imgs", "=", "nimgs", "\n", "", "blob", "=", "cv2", ".", "dnn", ".", "blobFromImages", "(", "\n", "images", "=", "imgs", ",", "scalefactor", "=", "1.0", "/", "self", ".", "input_std", ",", "size", "=", "self", ".", "image_size", ",", "\n", "mean", "=", "(", "self", ".", "input_mean", ",", "self", ".", "input_mean", ",", "self", ".", "input_mean", ")", ",", "swapRB", "=", "True", ")", "\n", "net_out", "=", "self", ".", "session", ".", "run", "(", "self", ".", "output_names", ",", "{", "self", ".", "input_name", ":", "blob", "}", ")", "[", "0", "]", "\n", "return", "net_out", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.onnx_helper.ArcFaceORT.meta_info": [[205, 207], ["None"], "methods", ["None"], ["", "def", "meta_info", "(", "self", ")", ":", "\n", "        ", "return", "{", "'model-size-mb'", ":", "self", ".", "model_size_mb", ",", "'feature-dim'", ":", "self", ".", "feat_dim", ",", "'infer'", ":", "self", ".", "cost_ms", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.onnx_helper.ArcFaceORT.forward": [[209, 224], ["cv2.dnn.blobFromImages", "isinstance", "onnx_helper.ArcFaceORT.session.run", "nimgs.append", "cv2.resize"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.arcface.dataset.BackgroundGenerator.run"], ["", "def", "forward", "(", "self", ",", "imgs", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "imgs", ",", "list", ")", ":", "\n", "            ", "imgs", "=", "[", "imgs", "]", "\n", "", "input_size", "=", "self", ".", "image_size", "\n", "if", "self", ".", "crop", "is", "not", "None", ":", "\n", "            ", "nimgs", "=", "[", "]", "\n", "for", "img", "in", "imgs", ":", "\n", "                ", "nimg", "=", "img", "[", "self", ".", "crop", "[", "1", "]", ":", "self", ".", "crop", "[", "3", "]", ",", "self", ".", "crop", "[", "0", "]", ":", "self", ".", "crop", "[", "2", "]", ",", ":", "]", "\n", "if", "nimg", ".", "shape", "[", "0", "]", "!=", "input_size", "[", "1", "]", "or", "nimg", ".", "shape", "[", "1", "]", "!=", "input_size", "[", "0", "]", ":", "\n", "                    ", "nimg", "=", "cv2", ".", "resize", "(", "nimg", ",", "input_size", ")", "\n", "", "nimgs", ".", "append", "(", "nimg", ")", "\n", "", "imgs", "=", "nimgs", "\n", "", "blob", "=", "cv2", ".", "dnn", ".", "blobFromImages", "(", "imgs", ",", "1.0", "/", "self", ".", "input_std", ",", "input_size", ",", "(", "self", ".", "input_mean", ",", "self", ".", "input_mean", ",", "self", ".", "input_mean", ")", ",", "swapRB", "=", "True", ")", "\n", "net_out", "=", "self", ".", "session", ".", "run", "(", "self", ".", "output_names", ",", "{", "self", ".", "input_name", ":", "blob", "}", ")", "[", "0", "]", "\n", "return", "net_out", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.onnx_helper.ArcFaceORT.benchmark": [[225, 243], ["cv2.dnn.blobFromImage", "range", "sorted", "datetime.datetime.now", "datetime.datetime.now", "sorted.append", "cv2.resize", "onnx_helper.ArcFaceORT.session.run"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.arcface.dataset.BackgroundGenerator.run"], ["", "def", "benchmark", "(", "self", ",", "img", ")", ":", "\n", "        ", "input_size", "=", "self", ".", "image_size", "\n", "if", "self", ".", "crop", "is", "not", "None", ":", "\n", "            ", "nimg", "=", "img", "[", "self", ".", "crop", "[", "1", "]", ":", "self", ".", "crop", "[", "3", "]", ",", "self", ".", "crop", "[", "0", "]", ":", "self", ".", "crop", "[", "2", "]", ",", ":", "]", "\n", "if", "nimg", ".", "shape", "[", "0", "]", "!=", "input_size", "[", "1", "]", "or", "nimg", ".", "shape", "[", "1", "]", "!=", "input_size", "[", "0", "]", ":", "\n", "                ", "nimg", "=", "cv2", ".", "resize", "(", "nimg", ",", "input_size", ")", "\n", "", "img", "=", "nimg", "\n", "", "blob", "=", "cv2", ".", "dnn", ".", "blobFromImage", "(", "img", ",", "1.0", "/", "self", ".", "input_std", ",", "input_size", ",", "(", "self", ".", "input_mean", ",", "self", ".", "input_mean", ",", "self", ".", "input_mean", ")", ",", "swapRB", "=", "True", ")", "\n", "costs", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "50", ")", ":", "\n", "            ", "ta", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "net_out", "=", "self", ".", "session", ".", "run", "(", "self", ".", "output_names", ",", "{", "self", ".", "input_name", ":", "blob", "}", ")", "[", "0", "]", "\n", "tb", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "cost", "=", "(", "tb", "-", "ta", ")", ".", "total_seconds", "(", ")", "\n", "costs", ".", "append", "(", "cost", ")", "\n", "", "costs", "=", "sorted", "(", "costs", ")", "\n", "cost", "=", "costs", "[", "5", "]", "\n", "return", "net_out", ",", "cost", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.losses.CosFace.__init__": [[15, 19], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.CustomImageDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "s", "=", "64.0", ",", "m", "=", "0.40", ")", ":", "\n", "        ", "super", "(", "CosFace", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "s", "=", "s", "\n", "self", ".", "m", "=", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.losses.CosFace.forward": [[20, 27], ["torch.zeros", "torch.zeros.scatter_", "torch.where", "index.size", "cosine.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "cosine", ",", "label", ")", ":", "\n", "        ", "index", "=", "torch", ".", "where", "(", "label", "!=", "-", "1", ")", "[", "0", "]", "\n", "m_hot", "=", "torch", ".", "zeros", "(", "index", ".", "size", "(", ")", "[", "0", "]", ",", "cosine", ".", "size", "(", ")", "[", "1", "]", ",", "device", "=", "cosine", ".", "device", ")", "\n", "m_hot", ".", "scatter_", "(", "1", ",", "label", "[", "index", ",", "None", "]", ",", "self", ".", "m", ")", "\n", "cosine", "[", "index", "]", "-=", "m_hot", "\n", "ret", "=", "cosine", "*", "self", ".", "s", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.losses.ArcFace.__init__": [[30, 34], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.CustomImageDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "s", "=", "64.0", ",", "m", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "ArcFace", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "s", "=", "s", "\n", "self", ".", "m", "=", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.losses.ArcFace.forward": [[35, 43], ["torch.zeros", "torch.zeros.scatter_", "cosine.acos_", "cosine.cos_().mul_", "torch.where", "index.size", "cosine.size", "cosine.cos_"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "cosine", ":", "torch", ".", "Tensor", ",", "label", ")", ":", "\n", "        ", "index", "=", "torch", ".", "where", "(", "label", "!=", "-", "1", ")", "[", "0", "]", "\n", "m_hot", "=", "torch", ".", "zeros", "(", "index", ".", "size", "(", ")", "[", "0", "]", ",", "cosine", ".", "size", "(", ")", "[", "1", "]", ",", "device", "=", "cosine", ".", "device", ")", "\n", "m_hot", ".", "scatter_", "(", "1", ",", "label", "[", "index", ",", "None", "]", ",", "self", ".", "m", ")", "\n", "cosine", ".", "acos_", "(", ")", "\n", "cosine", "[", "index", "]", "+=", "m_hot", "\n", "cosine", ".", "cos_", "(", ")", ".", "mul_", "(", "self", ".", "s", ")", "\n", "return", "cosine", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fodark_anonygan.arcface.losses.get_loss": [[5, 12], ["losses.CosFace", "losses.ArcFace", "ValueError"], "function", ["home.repos.pwc.inspect_result.fodark_anonygan.models.load_arcface.ArcFace"], ["def", "get_loss", "(", "name", ")", ":", "\n", "    ", "if", "name", "==", "\"cosface\"", ":", "\n", "        ", "return", "CosFace", "(", ")", "\n", "", "elif", "name", "==", "\"arcface\"", ":", "\n", "        ", "return", "ArcFace", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.utils.utils_config.get_config": [[5, 17], ["config_file.startswith", "os.basename", "importlib.import_module", "importlib.import_module", "cfg.update", "os.splitext", "os.join"], "function", ["home.repos.pwc.inspect_result.fodark_anonygan.utils.utils_logging.AverageMeter.update"], ["def", "get_config", "(", "config_file", ")", ":", "\n", "    ", "assert", "config_file", ".", "startswith", "(", "'configs/'", ")", ",", "'config file setting must start with configs/'", "\n", "temp_config_name", "=", "osp", ".", "basename", "(", "config_file", ")", "\n", "temp_module_name", "=", "osp", ".", "splitext", "(", "temp_config_name", ")", "[", "0", "]", "\n", "config", "=", "importlib", ".", "import_module", "(", "\"configs.base\"", ")", "\n", "cfg", "=", "config", ".", "config", "\n", "config", "=", "importlib", ".", "import_module", "(", "\"configs.%s\"", "%", "temp_module_name", ")", "\n", "job_cfg", "=", "config", ".", "config", "\n", "cfg", ".", "update", "(", "job_cfg", ")", "\n", "if", "cfg", ".", "output", "is", "None", ":", "\n", "        ", "cfg", ".", "output", "=", "osp", ".", "join", "(", "'work_dirs'", ",", "temp_module_name", ")", "\n", "", "return", "cfg", "", "", ""]], "home.repos.pwc.inspect_result.fodark_anonygan.utils.utils_amp._MultiDeviceReplicator.__init__": [[19, 23], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "master_tensor", ":", "torch", ".", "Tensor", ")", "->", "None", ":", "\n", "        ", "assert", "master_tensor", ".", "is_cuda", "\n", "self", ".", "master", "=", "master_tensor", "\n", "self", ".", "_per_device_tensors", ":", "Dict", "[", "torch", ".", "device", ",", "torch", ".", "Tensor", "]", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.utils.utils_amp._MultiDeviceReplicator.get": [[24, 30], ["utils_amp._MultiDeviceReplicator._per_device_tensors.get", "utils_amp._MultiDeviceReplicator.master.to"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.utils.utils_amp._MultiDeviceReplicator.get"], ["", "def", "get", "(", "self", ",", "device", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "retval", "=", "self", ".", "_per_device_tensors", ".", "get", "(", "device", ",", "None", ")", "\n", "if", "retval", "is", "None", ":", "\n", "            ", "retval", "=", "self", ".", "master", ".", "to", "(", "device", "=", "device", ",", "non_blocking", "=", "True", ",", "copy", "=", "True", ")", "\n", "self", ".", "_per_device_tensors", "[", "device", "]", "=", "retval", "\n", "", "return", "retval", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.utils.utils_amp.MaxClipGradScaler.__init__": [[33, 36], ["torch.cuda.amp.GradScaler.__init__"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.CustomImageDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "init_scale", ",", "max_scale", ":", "float", ",", "growth_interval", "=", "100", ")", ":", "\n", "        ", "GradScaler", ".", "__init__", "(", "self", ",", "init_scale", "=", "init_scale", ",", "growth_interval", "=", "growth_interval", ")", "\n", "self", ".", "max_scale", "=", "max_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.utils.utils_amp.MaxClipGradScaler.scale_clip": [[37, 45], ["utils_amp.MaxClipGradScaler.get_scale", "utils_amp.MaxClipGradScaler.set_growth_factor", "utils_amp.MaxClipGradScaler.get_scale", "utils_amp.MaxClipGradScaler.set_growth_factor", "utils_amp.MaxClipGradScaler.get_scale", "utils_amp.MaxClipGradScaler._scale.fill_", "utils_amp.MaxClipGradScaler.set_growth_factor"], "methods", ["None"], ["", "def", "scale_clip", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "get_scale", "(", ")", "==", "self", ".", "max_scale", ":", "\n", "            ", "self", ".", "set_growth_factor", "(", "1", ")", "\n", "", "elif", "self", ".", "get_scale", "(", ")", "<", "self", ".", "max_scale", ":", "\n", "            ", "self", ".", "set_growth_factor", "(", "2", ")", "\n", "", "elif", "self", ".", "get_scale", "(", ")", ">", "self", ".", "max_scale", ":", "\n", "            ", "self", ".", "_scale", ".", "fill_", "(", "self", ".", "max_scale", ")", "\n", "self", ".", "set_growth_factor", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.utils.utils_amp.MaxClipGradScaler.scale": [[46, 89], ["utils_amp.MaxClipGradScaler.scale_clip", "isinstance", "utils_amp.MaxClipGradScaler.scale.apply_scale"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.utils.utils_amp.MaxClipGradScaler.scale_clip"], ["", "", "def", "scale", "(", "self", ",", "outputs", ")", ":", "\n", "        ", "\"\"\"\n        Multiplies ('scales') a tensor or list of tensors by the scale factor.\n\n        Returns scaled outputs.  If this instance of :class:`GradScaler` is not enabled, outputs are returned\n        unmodified.\n\n        Arguments:\n            outputs (Tensor or iterable of Tensors):  Outputs to scale.\n        \"\"\"", "\n", "if", "not", "self", ".", "_enabled", ":", "\n", "            ", "return", "outputs", "\n", "", "self", ".", "scale_clip", "(", ")", "\n", "# Short-circuit for the common case.", "\n", "if", "isinstance", "(", "outputs", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "assert", "outputs", ".", "is_cuda", "\n", "if", "self", ".", "_scale", "is", "None", ":", "\n", "                ", "self", ".", "_lazy_init_scale_growth_tracker", "(", "outputs", ".", "device", ")", "\n", "", "assert", "self", ".", "_scale", "is", "not", "None", "\n", "return", "outputs", "*", "self", ".", "_scale", ".", "to", "(", "device", "=", "outputs", ".", "device", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# Invoke the more complex machinery only if we're treating multiple outputs.", "\n", "", "stash", ":", "List", "[", "_MultiDeviceReplicator", "]", "=", "[", "]", "# holds a reference that can be overwritten by apply_scale", "\n", "\n", "def", "apply_scale", "(", "val", ")", ":", "\n", "            ", "if", "isinstance", "(", "val", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "assert", "val", ".", "is_cuda", "\n", "if", "len", "(", "stash", ")", "==", "0", ":", "\n", "                    ", "if", "self", ".", "_scale", "is", "None", ":", "\n", "                        ", "self", ".", "_lazy_init_scale_growth_tracker", "(", "val", ".", "device", ")", "\n", "", "assert", "self", ".", "_scale", "is", "not", "None", "\n", "stash", ".", "append", "(", "_MultiDeviceReplicator", "(", "self", ".", "_scale", ")", ")", "\n", "", "return", "val", "*", "stash", "[", "0", "]", ".", "get", "(", "val", ".", "device", ")", "\n", "", "elif", "isinstance", "(", "val", ",", "Iterable", ")", ":", "\n", "                ", "iterable", "=", "map", "(", "apply_scale", ",", "val", ")", "\n", "if", "isinstance", "(", "val", ",", "list", ")", "or", "isinstance", "(", "val", ",", "tuple", ")", ":", "\n", "                    ", "return", "type", "(", "val", ")", "(", "iterable", ")", "\n", "", "else", ":", "\n", "                    ", "return", "iterable", "\n", "", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"outputs must be a Tensor or an iterable of Tensors\"", ")", "\n", "\n", "", "", "return", "apply_scale", "(", "outputs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fodark_anonygan.utils.plot.read_template_pair_list": [[19, 25], ["pairs[].astype", "pairs[].astype", "pairs[].astype", "pandas.read_csv"], "function", ["None"], ["def", "read_template_pair_list", "(", "path", ")", ":", "\n", "    ", "pairs", "=", "pd", ".", "read_csv", "(", "path", ",", "sep", "=", "' '", ",", "header", "=", "None", ")", ".", "values", "\n", "t1", "=", "pairs", "[", ":", ",", "0", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "t2", "=", "pairs", "[", ":", ",", "1", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "label", "=", "pairs", "[", ":", ",", "2", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "return", "t1", ",", "t2", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.utils.utils_logging.AverageMeter.__init__": [[10, 16], ["utils_logging.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.utils.utils_logging.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "None", "\n", "self", ".", "avg", "=", "None", "\n", "self", ".", "sum", "=", "None", "\n", "self", ".", "count", "=", "None", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.utils.utils_logging.AverageMeter.reset": [[17, 22], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.utils.utils_logging.AverageMeter.update": [[23, 28], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.utils.utils_logging.init_logging": [[30, 42], ["logging.getLogger", "logging.getLogger.setLevel", "logging.Formatter", "logging.FileHandler", "logging.StreamHandler", "logging.FileHandler.setFormatter", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.getLogger.addHandler", "logging.getLogger.info", "os.path.join"], "function", ["None"], ["", "", "def", "init_logging", "(", "rank", ",", "models_root", ")", ":", "\n", "    ", "if", "rank", "==", "0", ":", "\n", "        ", "log_root", "=", "logging", ".", "getLogger", "(", ")", "\n", "log_root", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "\"Training: %(asctime)s-%(message)s\"", ")", "\n", "handler_file", "=", "logging", ".", "FileHandler", "(", "os", ".", "path", ".", "join", "(", "models_root", ",", "\"training.log\"", ")", ")", "\n", "handler_stream", "=", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", "\n", "handler_file", ".", "setFormatter", "(", "formatter", ")", "\n", "handler_stream", ".", "setFormatter", "(", "formatter", ")", "\n", "log_root", ".", "addHandler", "(", "handler_file", ")", "\n", "log_root", ".", "addHandler", "(", "handler_stream", ")", "\n", "log_root", ".", "info", "(", "'rank_id: %d'", "%", "rank", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fodark_anonygan.utils.utils_callbacks.CallBackVerification.__init__": [[13, 22], ["len", "utils_callbacks.CallBackVerification.init_dataset"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.utils.utils_callbacks.CallBackVerification.init_dataset"], ["    ", "def", "__init__", "(", "self", ",", "frequent", ",", "rank", ",", "val_targets", ",", "rec_prefix", ",", "image_size", "=", "(", "112", ",", "112", ")", ")", ":", "\n", "        ", "self", ".", "frequent", ":", "int", "=", "frequent", "\n", "self", ".", "rank", ":", "int", "=", "rank", "\n", "self", ".", "highest_acc", ":", "float", "=", "0.0", "\n", "self", ".", "highest_acc_list", ":", "List", "[", "float", "]", "=", "[", "0.0", "]", "*", "len", "(", "val_targets", ")", "\n", "self", ".", "ver_list", ":", "List", "[", "object", "]", "=", "[", "]", "\n", "self", ".", "ver_name_list", ":", "List", "[", "str", "]", "=", "[", "]", "\n", "if", "self", ".", "rank", "is", "0", ":", "\n", "            ", "self", ".", "init_dataset", "(", "val_targets", "=", "val_targets", ",", "data_dir", "=", "rec_prefix", ",", "image_size", "=", "image_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.utils.utils_callbacks.CallBackVerification.ver_test": [[23, 35], ["range", "len", "eval.verification.test", "logging.info", "logging.info", "logging.info", "results.append"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.eval.verification.test"], ["", "", "def", "ver_test", "(", "self", ",", "backbone", ":", "torch", ".", "nn", ".", "Module", ",", "global_step", ":", "int", ")", ":", "\n", "        ", "results", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "ver_list", ")", ")", ":", "\n", "            ", "acc1", ",", "std1", ",", "acc2", ",", "std2", ",", "xnorm", ",", "embeddings_list", "=", "verification", ".", "test", "(", "\n", "self", ".", "ver_list", "[", "i", "]", ",", "backbone", ",", "10", ",", "10", ")", "\n", "logging", ".", "info", "(", "'[%s][%d]XNorm: %f'", "%", "(", "self", ".", "ver_name_list", "[", "i", "]", ",", "global_step", ",", "xnorm", ")", ")", "\n", "logging", ".", "info", "(", "'[%s][%d]Accuracy-Flip: %1.5f+-%1.5f'", "%", "(", "self", ".", "ver_name_list", "[", "i", "]", ",", "global_step", ",", "acc2", ",", "std2", ")", ")", "\n", "if", "acc2", ">", "self", ".", "highest_acc_list", "[", "i", "]", ":", "\n", "                ", "self", ".", "highest_acc_list", "[", "i", "]", "=", "acc2", "\n", "", "logging", ".", "info", "(", "\n", "'[%s][%d]Accuracy-Highest: %1.5f'", "%", "(", "self", ".", "ver_name_list", "[", "i", "]", ",", "global_step", ",", "self", ".", "highest_acc_list", "[", "i", "]", ")", ")", "\n", "results", ".", "append", "(", "acc2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.utils.utils_callbacks.CallBackVerification.init_dataset": [[36, 43], ["os.path.join", "os.path.exists", "eval.verification.load_bin", "utils_callbacks.CallBackVerification.ver_list.append", "utils_callbacks.CallBackVerification.ver_name_list.append"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.eval.verification.load_bin"], ["", "", "def", "init_dataset", "(", "self", ",", "val_targets", ",", "data_dir", ",", "image_size", ")", ":", "\n", "        ", "for", "name", "in", "val_targets", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "name", "+", "\".bin\"", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "                ", "data_set", "=", "verification", ".", "load_bin", "(", "path", ",", "image_size", ")", "\n", "self", ".", "ver_list", ".", "append", "(", "data_set", ")", "\n", "self", ".", "ver_name_list", ".", "append", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.utils.utils_callbacks.CallBackVerification.__call__": [[44, 49], ["backbone.eval", "utils_callbacks.CallBackVerification.ver_test", "backbone.train"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.utils.utils_callbacks.CallBackVerification.ver_test"], ["", "", "", "def", "__call__", "(", "self", ",", "num_update", ",", "backbone", ":", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "        ", "if", "self", ".", "rank", "is", "0", "and", "num_update", ">", "0", "and", "num_update", "%", "self", ".", "frequent", "==", "0", ":", "\n", "            ", "backbone", ".", "eval", "(", ")", "\n", "self", ".", "ver_test", "(", "backbone", ",", "num_update", ")", "\n", "backbone", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.utils.utils_callbacks.CallBackLogging.__init__": [[52, 63], ["time.time"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "frequent", ",", "rank", ",", "total_step", ",", "batch_size", ",", "world_size", ",", "writer", "=", "None", ")", ":", "\n", "        ", "self", ".", "frequent", ":", "int", "=", "frequent", "\n", "self", ".", "rank", ":", "int", "=", "rank", "\n", "self", ".", "time_start", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "total_step", ":", "int", "=", "total_step", "\n", "self", ".", "batch_size", ":", "int", "=", "batch_size", "\n", "self", ".", "world_size", ":", "int", "=", "world_size", "\n", "self", ".", "writer", "=", "writer", "\n", "\n", "self", ".", "init", "=", "False", "\n", "self", ".", "tic", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.utils.utils_callbacks.CallBackLogging.__call__": [[64, 103], ["logging.info", "loss.reset", "time.time", "time.time", "utils_callbacks.CallBackLogging.writer.add_scalar", "utils_callbacks.CallBackLogging.writer.add_scalar", "utils_callbacks.CallBackLogging.writer.add_scalar", "float", "time.time", "time.time", "grad_scaler.get_scale"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.utils.utils_logging.AverageMeter.reset"], ["", "def", "__call__", "(", "self", ",", "\n", "global_step", ":", "int", ",", "\n", "loss", ":", "AverageMeter", ",", "\n", "epoch", ":", "int", ",", "\n", "fp16", ":", "bool", ",", "\n", "learning_rate", ":", "float", ",", "\n", "grad_scaler", ":", "torch", ".", "cuda", ".", "amp", ".", "GradScaler", ")", ":", "\n", "        ", "if", "self", ".", "rank", "==", "0", "and", "global_step", ">", "0", "and", "global_step", "%", "self", ".", "frequent", "==", "0", ":", "\n", "            ", "if", "self", ".", "init", ":", "\n", "                ", "try", ":", "\n", "                    ", "speed", ":", "float", "=", "self", ".", "frequent", "*", "self", ".", "batch_size", "/", "(", "time", ".", "time", "(", ")", "-", "self", ".", "tic", ")", "\n", "speed_total", "=", "speed", "*", "self", ".", "world_size", "\n", "", "except", "ZeroDivisionError", ":", "\n", "                    ", "speed_total", "=", "float", "(", "'inf'", ")", "\n", "\n", "", "time_now", "=", "(", "time", ".", "time", "(", ")", "-", "self", ".", "time_start", ")", "/", "3600", "\n", "time_total", "=", "time_now", "/", "(", "(", "global_step", "+", "1", ")", "/", "self", ".", "total_step", ")", "\n", "time_for_end", "=", "time_total", "-", "time_now", "\n", "if", "self", ".", "writer", "is", "not", "None", ":", "\n", "                    ", "self", ".", "writer", ".", "add_scalar", "(", "'time_for_end'", ",", "time_for_end", ",", "global_step", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'learning_rate'", ",", "learning_rate", ",", "global_step", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'loss'", ",", "loss", ".", "avg", ",", "global_step", ")", "\n", "", "if", "fp16", ":", "\n", "                    ", "msg", "=", "\"Speed %.2f samples/sec   Loss %.4f   LearningRate %.4f   Epoch: %d   Global Step: %d   \"", "\"Fp16 Grad Scale: %2.f   Required: %1.f hours\"", "%", "(", "\n", "speed_total", ",", "loss", ".", "avg", ",", "learning_rate", ",", "epoch", ",", "global_step", ",", "\n", "grad_scaler", ".", "get_scale", "(", ")", ",", "time_for_end", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "msg", "=", "\"Speed %.2f samples/sec   Loss %.4f   LearningRate %.4f   Epoch: %d   Global Step: %d   \"", "\"Required: %1.f hours\"", "%", "(", "\n", "speed_total", ",", "loss", ".", "avg", ",", "learning_rate", ",", "epoch", ",", "global_step", ",", "time_for_end", "\n", ")", "\n", "", "logging", ".", "info", "(", "msg", ")", "\n", "loss", ".", "reset", "(", ")", "\n", "self", ".", "tic", "=", "time", ".", "time", "(", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "init", "=", "True", "\n", "self", ".", "tic", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.utils.utils_callbacks.CallBackModelCheckpoint.__init__": [[106, 109], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "rank", ",", "output", "=", "\"./\"", ")", ":", "\n", "        ", "self", ".", "rank", ":", "int", "=", "rank", "\n", "self", ".", "output", ":", "str", "=", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.utils.utils_callbacks.CallBackModelCheckpoint.__call__": [[110, 118], ["os.path.join", "torch.save", "logging.info", "partial_fc.save_params", "backbone.module.state_dict"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.arcface.partial_fc.PartialFC.save_params"], ["", "def", "__call__", "(", "self", ",", "global_step", ",", "backbone", ",", "partial_fc", ",", ")", ":", "\n", "        ", "if", "global_step", ">", "100", "and", "self", ".", "rank", "==", "0", ":", "\n", "            ", "path_module", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output", ",", "\"backbone.pth\"", ")", "\n", "torch", ".", "save", "(", "backbone", ".", "module", ".", "state_dict", "(", ")", ",", "path_module", ")", "\n", "logging", ".", "info", "(", "\"Pytorch Model Saved in '{}'\"", ".", "format", "(", "path_module", ")", ")", "\n", "\n", "", "if", "global_step", ">", "100", "and", "partial_fc", "is", "not", "None", ":", "\n", "            ", "partial_fc", ".", "save_params", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.fodark_anonygan.eval.verification.LFold.__init__": [[42, 46], ["sklearn.model_selection.KFold"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_splits", "=", "2", ",", "shuffle", "=", "False", ")", ":", "\n", "        ", "self", ".", "n_splits", "=", "n_splits", "\n", "if", "self", ".", "n_splits", ">", "1", ":", "\n", "            ", "self", ".", "k_fold", "=", "KFold", "(", "n_splits", "=", "n_splits", ",", "shuffle", "=", "shuffle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.eval.verification.LFold.split": [[47, 52], ["verification.LFold.k_fold.split"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.eval.verification.LFold.split"], ["", "", "def", "split", "(", "self", ",", "indices", ")", ":", "\n", "        ", "if", "self", ".", "n_splits", ">", "1", ":", "\n", "            ", "return", "self", ".", "k_fold", ".", "split", "(", "indices", ")", "\n", "", "else", ":", "\n", "            ", "return", "[", "(", "indices", ",", "indices", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.eval.verification.calculate_roc": [[54, 107], ["min", "len", "verification.LFold", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.arange", "enumerate", "numpy.mean", "numpy.mean", "len", "numpy.subtract", "numpy.sum", "verification.LFold.split", "numpy.zeros", "enumerate", "numpy.argmax", "enumerate", "verification.calculate_accuracy", "numpy.square", "print", "numpy.concatenate", "sklearn.decomposition.PCA", "sklearn.decomposition.PCA.fit", "sklearn.decomposition.PCA.transform", "sklearn.decomposition.PCA.transform", "sklearn.preprocessing.normalize", "sklearn.preprocessing.normalize", "numpy.subtract", "numpy.sum", "verification.calculate_accuracy", "verification.calculate_accuracy", "numpy.square"], "function", ["home.repos.pwc.inspect_result.fodark_anonygan.eval.verification.LFold.split", "home.repos.pwc.inspect_result.fodark_anonygan.eval.verification.calculate_accuracy", "home.repos.pwc.inspect_result.fodark_anonygan.eval.verification.calculate_accuracy", "home.repos.pwc.inspect_result.fodark_anonygan.eval.verification.calculate_accuracy"], ["", "", "", "def", "calculate_roc", "(", "thresholds", ",", "\n", "embeddings1", ",", "\n", "embeddings2", ",", "\n", "actual_issame", ",", "\n", "nrof_folds", "=", "10", ",", "\n", "pca", "=", "0", ")", ":", "\n", "    ", "assert", "(", "embeddings1", ".", "shape", "[", "0", "]", "==", "embeddings2", ".", "shape", "[", "0", "]", ")", "\n", "assert", "(", "embeddings1", ".", "shape", "[", "1", "]", "==", "embeddings2", ".", "shape", "[", "1", "]", ")", "\n", "nrof_pairs", "=", "min", "(", "len", "(", "actual_issame", ")", ",", "embeddings1", ".", "shape", "[", "0", "]", ")", "\n", "nrof_thresholds", "=", "len", "(", "thresholds", ")", "\n", "k_fold", "=", "LFold", "(", "n_splits", "=", "nrof_folds", ",", "shuffle", "=", "False", ")", "\n", "\n", "tprs", "=", "np", ".", "zeros", "(", "(", "nrof_folds", ",", "nrof_thresholds", ")", ")", "\n", "fprs", "=", "np", ".", "zeros", "(", "(", "nrof_folds", ",", "nrof_thresholds", ")", ")", "\n", "accuracy", "=", "np", ".", "zeros", "(", "(", "nrof_folds", ")", ")", "\n", "indices", "=", "np", ".", "arange", "(", "nrof_pairs", ")", "\n", "\n", "if", "pca", "==", "0", ":", "\n", "        ", "diff", "=", "np", ".", "subtract", "(", "embeddings1", ",", "embeddings2", ")", "\n", "dist", "=", "np", ".", "sum", "(", "np", ".", "square", "(", "diff", ")", ",", "1", ")", "\n", "\n", "", "for", "fold_idx", ",", "(", "train_set", ",", "test_set", ")", "in", "enumerate", "(", "k_fold", ".", "split", "(", "indices", ")", ")", ":", "\n", "        ", "if", "pca", ">", "0", ":", "\n", "            ", "print", "(", "'doing pca on'", ",", "fold_idx", ")", "\n", "embed1_train", "=", "embeddings1", "[", "train_set", "]", "\n", "embed2_train", "=", "embeddings2", "[", "train_set", "]", "\n", "_embed_train", "=", "np", ".", "concatenate", "(", "(", "embed1_train", ",", "embed2_train", ")", ",", "axis", "=", "0", ")", "\n", "pca_model", "=", "PCA", "(", "n_components", "=", "pca", ")", "\n", "pca_model", ".", "fit", "(", "_embed_train", ")", "\n", "embed1", "=", "pca_model", ".", "transform", "(", "embeddings1", ")", "\n", "embed2", "=", "pca_model", ".", "transform", "(", "embeddings2", ")", "\n", "embed1", "=", "sklearn", ".", "preprocessing", ".", "normalize", "(", "embed1", ")", "\n", "embed2", "=", "sklearn", ".", "preprocessing", ".", "normalize", "(", "embed2", ")", "\n", "diff", "=", "np", ".", "subtract", "(", "embed1", ",", "embed2", ")", "\n", "dist", "=", "np", ".", "sum", "(", "np", ".", "square", "(", "diff", ")", ",", "1", ")", "\n", "\n", "# Find the best threshold for the fold", "\n", "", "acc_train", "=", "np", ".", "zeros", "(", "(", "nrof_thresholds", ")", ")", "\n", "for", "threshold_idx", ",", "threshold", "in", "enumerate", "(", "thresholds", ")", ":", "\n", "            ", "_", ",", "_", ",", "acc_train", "[", "threshold_idx", "]", "=", "calculate_accuracy", "(", "\n", "threshold", ",", "dist", "[", "train_set", "]", ",", "actual_issame", "[", "train_set", "]", ")", "\n", "", "best_threshold_index", "=", "np", ".", "argmax", "(", "acc_train", ")", "\n", "for", "threshold_idx", ",", "threshold", "in", "enumerate", "(", "thresholds", ")", ":", "\n", "            ", "tprs", "[", "fold_idx", ",", "threshold_idx", "]", ",", "fprs", "[", "fold_idx", ",", "threshold_idx", "]", ",", "_", "=", "calculate_accuracy", "(", "\n", "threshold", ",", "dist", "[", "test_set", "]", ",", "\n", "actual_issame", "[", "test_set", "]", ")", "\n", "", "_", ",", "_", ",", "accuracy", "[", "fold_idx", "]", "=", "calculate_accuracy", "(", "\n", "thresholds", "[", "best_threshold_index", "]", ",", "dist", "[", "test_set", "]", ",", "\n", "actual_issame", "[", "test_set", "]", ")", "\n", "\n", "", "tpr", "=", "np", ".", "mean", "(", "tprs", ",", "0", ")", "\n", "fpr", "=", "np", ".", "mean", "(", "fprs", ",", "0", ")", "\n", "return", "tpr", ",", "fpr", ",", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.eval.verification.calculate_accuracy": [[109, 122], ["numpy.less", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "float", "numpy.logical_not", "numpy.logical_not", "numpy.logical_not", "numpy.logical_not", "float", "float", "float", "float"], "function", ["None"], ["", "def", "calculate_accuracy", "(", "threshold", ",", "dist", ",", "actual_issame", ")", ":", "\n", "    ", "predict_issame", "=", "np", ".", "less", "(", "dist", ",", "threshold", ")", "\n", "tp", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "predict_issame", ",", "actual_issame", ")", ")", "\n", "fp", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "predict_issame", ",", "np", ".", "logical_not", "(", "actual_issame", ")", ")", ")", "\n", "tn", "=", "np", ".", "sum", "(", "\n", "np", ".", "logical_and", "(", "np", ".", "logical_not", "(", "predict_issame", ")", ",", "\n", "np", ".", "logical_not", "(", "actual_issame", ")", ")", ")", "\n", "fn", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "np", ".", "logical_not", "(", "predict_issame", ")", ",", "actual_issame", ")", ")", "\n", "\n", "tpr", "=", "0", "if", "(", "tp", "+", "fn", "==", "0", ")", "else", "float", "(", "tp", ")", "/", "float", "(", "tp", "+", "fn", ")", "\n", "fpr", "=", "0", "if", "(", "fp", "+", "tn", "==", "0", ")", "else", "float", "(", "fp", ")", "/", "float", "(", "fp", "+", "tn", ")", "\n", "acc", "=", "float", "(", "tp", "+", "tn", ")", "/", "dist", ".", "size", "\n", "return", "tpr", ",", "fpr", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.eval.verification.calculate_val": [[124, 163], ["min", "len", "verification.LFold", "numpy.zeros", "numpy.zeros", "numpy.subtract", "numpy.sum", "numpy.arange", "enumerate", "numpy.mean", "numpy.mean", "numpy.std", "len", "numpy.square", "verification.LFold.split", "numpy.zeros", "enumerate", "verification.calculate_val_far", "verification.calculate_val_far", "numpy.max", "scipy.interpolate.interp1d", "interpolate.interp1d."], "function", ["home.repos.pwc.inspect_result.fodark_anonygan.eval.verification.LFold.split", "home.repos.pwc.inspect_result.fodark_anonygan.eval.verification.calculate_val_far", "home.repos.pwc.inspect_result.fodark_anonygan.eval.verification.calculate_val_far"], ["", "def", "calculate_val", "(", "thresholds", ",", "\n", "embeddings1", ",", "\n", "embeddings2", ",", "\n", "actual_issame", ",", "\n", "far_target", ",", "\n", "nrof_folds", "=", "10", ")", ":", "\n", "    ", "assert", "(", "embeddings1", ".", "shape", "[", "0", "]", "==", "embeddings2", ".", "shape", "[", "0", "]", ")", "\n", "assert", "(", "embeddings1", ".", "shape", "[", "1", "]", "==", "embeddings2", ".", "shape", "[", "1", "]", ")", "\n", "nrof_pairs", "=", "min", "(", "len", "(", "actual_issame", ")", ",", "embeddings1", ".", "shape", "[", "0", "]", ")", "\n", "nrof_thresholds", "=", "len", "(", "thresholds", ")", "\n", "k_fold", "=", "LFold", "(", "n_splits", "=", "nrof_folds", ",", "shuffle", "=", "False", ")", "\n", "\n", "val", "=", "np", ".", "zeros", "(", "nrof_folds", ")", "\n", "far", "=", "np", ".", "zeros", "(", "nrof_folds", ")", "\n", "\n", "diff", "=", "np", ".", "subtract", "(", "embeddings1", ",", "embeddings2", ")", "\n", "dist", "=", "np", ".", "sum", "(", "np", ".", "square", "(", "diff", ")", ",", "1", ")", "\n", "indices", "=", "np", ".", "arange", "(", "nrof_pairs", ")", "\n", "\n", "for", "fold_idx", ",", "(", "train_set", ",", "test_set", ")", "in", "enumerate", "(", "k_fold", ".", "split", "(", "indices", ")", ")", ":", "\n", "\n", "# Find the threshold that gives FAR = far_target", "\n", "        ", "far_train", "=", "np", ".", "zeros", "(", "nrof_thresholds", ")", "\n", "for", "threshold_idx", ",", "threshold", "in", "enumerate", "(", "thresholds", ")", ":", "\n", "            ", "_", ",", "far_train", "[", "threshold_idx", "]", "=", "calculate_val_far", "(", "\n", "threshold", ",", "dist", "[", "train_set", "]", ",", "actual_issame", "[", "train_set", "]", ")", "\n", "", "if", "np", ".", "max", "(", "far_train", ")", ">=", "far_target", ":", "\n", "            ", "f", "=", "interpolate", ".", "interp1d", "(", "far_train", ",", "thresholds", ",", "kind", "=", "'slinear'", ")", "\n", "threshold", "=", "f", "(", "far_target", ")", "\n", "", "else", ":", "\n", "            ", "threshold", "=", "0.0", "\n", "\n", "", "val", "[", "fold_idx", "]", ",", "far", "[", "fold_idx", "]", "=", "calculate_val_far", "(", "\n", "threshold", ",", "dist", "[", "test_set", "]", ",", "actual_issame", "[", "test_set", "]", ")", "\n", "\n", "", "val_mean", "=", "np", ".", "mean", "(", "val", ")", "\n", "far_mean", "=", "np", ".", "mean", "(", "far", ")", "\n", "val_std", "=", "np", ".", "std", "(", "val", ")", "\n", "return", "val_mean", ",", "val_std", ",", "far_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.eval.verification.calculate_val_far": [[165, 177], ["numpy.less", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.logical_and", "numpy.logical_and", "numpy.logical_not", "float", "float", "float", "float", "numpy.logical_not"], "function", ["None"], ["", "def", "calculate_val_far", "(", "threshold", ",", "dist", ",", "actual_issame", ")", ":", "\n", "    ", "predict_issame", "=", "np", ".", "less", "(", "dist", ",", "threshold", ")", "\n", "true_accept", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "predict_issame", ",", "actual_issame", ")", ")", "\n", "false_accept", "=", "np", ".", "sum", "(", "\n", "np", ".", "logical_and", "(", "predict_issame", ",", "np", ".", "logical_not", "(", "actual_issame", ")", ")", ")", "\n", "n_same", "=", "np", ".", "sum", "(", "actual_issame", ")", "\n", "n_diff", "=", "np", ".", "sum", "(", "np", ".", "logical_not", "(", "actual_issame", ")", ")", "\n", "# print(true_accept, false_accept)", "\n", "# print(n_same, n_diff)", "\n", "val", "=", "float", "(", "true_accept", ")", "/", "float", "(", "n_same", ")", "\n", "far", "=", "float", "(", "false_accept", ")", "/", "float", "(", "n_diff", ")", "\n", "return", "val", ",", "far", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.eval.verification.evaluate": [[179, 198], ["numpy.arange", "verification.calculate_roc", "numpy.arange", "verification.calculate_val", "numpy.asarray", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.fodark_anonygan.eval.verification.calculate_roc", "home.repos.pwc.inspect_result.fodark_anonygan.eval.verification.calculate_val"], ["", "def", "evaluate", "(", "embeddings", ",", "actual_issame", ",", "nrof_folds", "=", "10", ",", "pca", "=", "0", ")", ":", "\n", "# Calculate evaluation metrics", "\n", "    ", "thresholds", "=", "np", ".", "arange", "(", "0", ",", "4", ",", "0.01", ")", "\n", "embeddings1", "=", "embeddings", "[", "0", ":", ":", "2", "]", "\n", "embeddings2", "=", "embeddings", "[", "1", ":", ":", "2", "]", "\n", "tpr", ",", "fpr", ",", "accuracy", "=", "calculate_roc", "(", "thresholds", ",", "\n", "embeddings1", ",", "\n", "embeddings2", ",", "\n", "np", ".", "asarray", "(", "actual_issame", ")", ",", "\n", "nrof_folds", "=", "nrof_folds", ",", "\n", "pca", "=", "pca", ")", "\n", "thresholds", "=", "np", ".", "arange", "(", "0", ",", "4", ",", "0.001", ")", "\n", "val", ",", "val_std", ",", "far", "=", "calculate_val", "(", "thresholds", ",", "\n", "embeddings1", ",", "\n", "embeddings2", ",", "\n", "np", ".", "asarray", "(", "actual_issame", ")", ",", "\n", "1e-3", ",", "\n", "nrof_folds", "=", "nrof_folds", ")", "\n", "return", "tpr", ",", "fpr", ",", "accuracy", ",", "val", ",", "val_std", ",", "far", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.eval.verification.load_bin": [[199, 225], ["torch.no_grad", "range", "print", "torch.empty", "data_list.append", "mxnet.image.imdecode", "mxnet.ndarray.transpose", "open", "pickle.load", "len", "mxnet.image.resize_short", "torch.from_numpy", "print", "open", "pickle.load", "mxnet.ndarray.flip", "mx.ndarray.flip.asnumpy", "len"], "function", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "load_bin", "(", "path", ",", "image_size", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "bins", ",", "issame_list", "=", "pickle", ".", "load", "(", "f", ")", "# py2", "\n", "", "", "except", "UnicodeDecodeError", "as", "e", ":", "\n", "        ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "bins", ",", "issame_list", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'bytes'", ")", "# py3", "\n", "", "", "data_list", "=", "[", "]", "\n", "for", "flip", "in", "[", "0", ",", "1", "]", ":", "\n", "        ", "data", "=", "torch", ".", "empty", "(", "(", "len", "(", "issame_list", ")", "*", "2", ",", "3", ",", "image_size", "[", "0", "]", ",", "image_size", "[", "1", "]", ")", ")", "\n", "data_list", ".", "append", "(", "data", ")", "\n", "", "for", "idx", "in", "range", "(", "len", "(", "issame_list", ")", "*", "2", ")", ":", "\n", "        ", "_bin", "=", "bins", "[", "idx", "]", "\n", "img", "=", "mx", ".", "image", ".", "imdecode", "(", "_bin", ")", "\n", "if", "img", ".", "shape", "[", "1", "]", "!=", "image_size", "[", "0", "]", ":", "\n", "            ", "img", "=", "mx", ".", "image", ".", "resize_short", "(", "img", ",", "image_size", "[", "0", "]", ")", "\n", "", "img", "=", "nd", ".", "transpose", "(", "img", ",", "axes", "=", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "for", "flip", "in", "[", "0", ",", "1", "]", ":", "\n", "            ", "if", "flip", "==", "1", ":", "\n", "                ", "img", "=", "mx", ".", "ndarray", ".", "flip", "(", "data", "=", "img", ",", "axis", "=", "2", ")", "\n", "", "data_list", "[", "flip", "]", "[", "idx", "]", "[", ":", "]", "=", "torch", ".", "from_numpy", "(", "img", ".", "asnumpy", "(", ")", ")", "\n", "", "if", "idx", "%", "1000", "==", "0", ":", "\n", "            ", "print", "(", "'loading bin'", ",", "idx", ")", "\n", "", "", "print", "(", "data_list", "[", "0", "]", ".", "shape", ")", "\n", "return", "data_list", ",", "issame_list", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.eval.verification.test": [[226, 273], ["torch.no_grad", "print", "range", "sklearn.preprocessing.normalize", "print", "print", "verification.evaluate", "len", "embeddings_list.append", "range", "numpy.mean", "numpy.std", "min", "datetime.datetime.now", "backbone", "net_out.detach().cpu().numpy", "datetime.datetime.now", "diff.total_seconds", "numpy.linalg.norm", "numpy.zeros", "net_out.detach().cpu", "net_out.detach"], "function", ["home.repos.pwc.inspect_result.fodark_anonygan.eval.verification.evaluate"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "test", "(", "data_set", ",", "backbone", ",", "batch_size", ",", "nfolds", "=", "10", ")", ":", "\n", "    ", "print", "(", "'testing verification..'", ")", "\n", "data_list", "=", "data_set", "[", "0", "]", "\n", "issame_list", "=", "data_set", "[", "1", "]", "\n", "embeddings_list", "=", "[", "]", "\n", "time_consumed", "=", "0.0", "\n", "for", "i", "in", "range", "(", "len", "(", "data_list", ")", ")", ":", "\n", "        ", "data", "=", "data_list", "[", "i", "]", "\n", "embeddings", "=", "None", "\n", "ba", "=", "0", "\n", "while", "ba", "<", "data", ".", "shape", "[", "0", "]", ":", "\n", "            ", "bb", "=", "min", "(", "ba", "+", "batch_size", ",", "data", ".", "shape", "[", "0", "]", ")", "\n", "count", "=", "bb", "-", "ba", "\n", "_data", "=", "data", "[", "bb", "-", "batch_size", ":", "bb", "]", "\n", "time0", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "img", "=", "(", "(", "_data", "/", "255", ")", "-", "0.5", ")", "/", "0.5", "\n", "net_out", ":", "torch", ".", "Tensor", "=", "backbone", "(", "img", ")", "\n", "_embeddings", "=", "net_out", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "time_now", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "diff", "=", "time_now", "-", "time0", "\n", "time_consumed", "+=", "diff", ".", "total_seconds", "(", ")", "\n", "if", "embeddings", "is", "None", ":", "\n", "                ", "embeddings", "=", "np", ".", "zeros", "(", "(", "data", ".", "shape", "[", "0", "]", ",", "_embeddings", ".", "shape", "[", "1", "]", ")", ")", "\n", "", "embeddings", "[", "ba", ":", "bb", ",", ":", "]", "=", "_embeddings", "[", "(", "batch_size", "-", "count", ")", ":", ",", ":", "]", "\n", "ba", "=", "bb", "\n", "", "embeddings_list", ".", "append", "(", "embeddings", ")", "\n", "\n", "", "_xnorm", "=", "0.0", "\n", "_xnorm_cnt", "=", "0", "\n", "for", "embed", "in", "embeddings_list", ":", "\n", "        ", "for", "i", "in", "range", "(", "embed", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "_em", "=", "embed", "[", "i", "]", "\n", "_norm", "=", "np", ".", "linalg", ".", "norm", "(", "_em", ")", "\n", "_xnorm", "+=", "_norm", "\n", "_xnorm_cnt", "+=", "1", "\n", "", "", "_xnorm", "/=", "_xnorm_cnt", "\n", "\n", "acc1", "=", "0.0", "\n", "std1", "=", "0.0", "\n", "embeddings", "=", "embeddings_list", "[", "0", "]", "+", "embeddings_list", "[", "1", "]", "\n", "embeddings", "=", "sklearn", ".", "preprocessing", ".", "normalize", "(", "embeddings", ")", "\n", "print", "(", "embeddings", ".", "shape", ")", "\n", "print", "(", "'infer time'", ",", "time_consumed", ")", "\n", "_", ",", "_", ",", "accuracy", ",", "val", ",", "val_std", ",", "far", "=", "evaluate", "(", "embeddings", ",", "issame_list", ",", "nrof_folds", "=", "nfolds", ")", "\n", "acc2", ",", "std2", "=", "np", ".", "mean", "(", "accuracy", ")", ",", "np", ".", "std", "(", "accuracy", ")", "\n", "return", "acc1", ",", "std1", ",", "acc2", ",", "std2", ",", "_xnorm", ",", "embeddings_list", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.eval.verification.dumpR": [[275, 320], ["print", "range", "sklearn.preprocessing.normalize", "numpy.asarray", "os.path.join", "len", "embeddings_list.append", "open", "pickle.dump", "min", "mxnet.ndarray.slice_axis", "datetime.datetime.now", "model.forward", "model.get_outputs", "net_out[].asnumpy", "datetime.datetime.now", "diff.total_seconds", "mxnet.io.DataBatch", "mxnet.io.DataBatch", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.fodark_anonygan.backbones.iresnet.IResNet.forward"], ["", "def", "dumpR", "(", "data_set", ",", "\n", "backbone", ",", "\n", "batch_size", ",", "\n", "name", "=", "''", ",", "\n", "data_extra", "=", "None", ",", "\n", "label_shape", "=", "None", ")", ":", "\n", "    ", "print", "(", "'dump verification embedding..'", ")", "\n", "data_list", "=", "data_set", "[", "0", "]", "\n", "issame_list", "=", "data_set", "[", "1", "]", "\n", "embeddings_list", "=", "[", "]", "\n", "time_consumed", "=", "0.0", "\n", "for", "i", "in", "range", "(", "len", "(", "data_list", ")", ")", ":", "\n", "        ", "data", "=", "data_list", "[", "i", "]", "\n", "embeddings", "=", "None", "\n", "ba", "=", "0", "\n", "while", "ba", "<", "data", ".", "shape", "[", "0", "]", ":", "\n", "            ", "bb", "=", "min", "(", "ba", "+", "batch_size", ",", "data", ".", "shape", "[", "0", "]", ")", "\n", "count", "=", "bb", "-", "ba", "\n", "\n", "_data", "=", "nd", ".", "slice_axis", "(", "data", ",", "axis", "=", "0", ",", "begin", "=", "bb", "-", "batch_size", ",", "end", "=", "bb", ")", "\n", "time0", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "if", "data_extra", "is", "None", ":", "\n", "                ", "db", "=", "mx", ".", "io", ".", "DataBatch", "(", "data", "=", "(", "_data", ",", ")", ",", "label", "=", "(", "_label", ",", ")", ")", "\n", "", "else", ":", "\n", "                ", "db", "=", "mx", ".", "io", ".", "DataBatch", "(", "data", "=", "(", "_data", ",", "_data_extra", ")", ",", "\n", "label", "=", "(", "_label", ",", ")", ")", "\n", "", "model", ".", "forward", "(", "db", ",", "is_train", "=", "False", ")", "\n", "net_out", "=", "model", ".", "get_outputs", "(", ")", "\n", "_embeddings", "=", "net_out", "[", "0", "]", ".", "asnumpy", "(", ")", "\n", "time_now", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "diff", "=", "time_now", "-", "time0", "\n", "time_consumed", "+=", "diff", ".", "total_seconds", "(", ")", "\n", "if", "embeddings", "is", "None", ":", "\n", "                ", "embeddings", "=", "np", ".", "zeros", "(", "(", "data", ".", "shape", "[", "0", "]", ",", "_embeddings", ".", "shape", "[", "1", "]", ")", ")", "\n", "", "embeddings", "[", "ba", ":", "bb", ",", ":", "]", "=", "_embeddings", "[", "(", "batch_size", "-", "count", ")", ":", ",", ":", "]", "\n", "ba", "=", "bb", "\n", "", "embeddings_list", ".", "append", "(", "embeddings", ")", "\n", "", "embeddings", "=", "embeddings_list", "[", "0", "]", "+", "embeddings_list", "[", "1", "]", "\n", "embeddings", "=", "sklearn", ".", "preprocessing", ".", "normalize", "(", "embeddings", ")", "\n", "actual_issame", "=", "np", ".", "asarray", "(", "issame_list", ")", "\n", "outname", "=", "os", ".", "path", ".", "join", "(", "'temp.bin'", ")", "\n", "with", "open", "(", "outname", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "(", "embeddings", ",", "issame_list", ")", ",", "\n", "f", ",", "\n", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.backbones.mobilefacenet.Flatten.forward": [[12, 14], ["x.view", "x.size"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.backbones.mobilefacenet.ConvBlock.__init__": [[17, 23], ["torch.nn.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.PReLU", "torch.nn.PReLU"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.CustomImageDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_c", ",", "out_c", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "0", ")", ",", "groups", "=", "1", ")", ":", "\n", "        ", "super", "(", "ConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "\n", "Conv2d", "(", "in_c", ",", "out_c", ",", "kernel", ",", "groups", "=", "groups", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "num_features", "=", "out_c", ")", ",", "\n", "PReLU", "(", "num_parameters", "=", "out_c", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.backbones.mobilefacenet.ConvBlock.forward": [[25, 27], ["mobilefacenet.ConvBlock.layers"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "layers", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.backbones.mobilefacenet.LinearBlock.__init__": [[30, 35], ["torch.nn.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.CustomImageDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_c", ",", "out_c", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "0", ")", ",", "groups", "=", "1", ")", ":", "\n", "        ", "super", "(", "LinearBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "\n", "Conv2d", "(", "in_c", ",", "out_c", ",", "kernel", ",", "stride", ",", "padding", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "num_features", "=", "out_c", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.backbones.mobilefacenet.LinearBlock.forward": [[37, 39], ["mobilefacenet.LinearBlock.layers"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "layers", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.backbones.mobilefacenet.DepthWise.__init__": [[42, 49], ["torch.nn.Module.__init__", "torch.Sequential", "torch.Sequential", "mobilefacenet.ConvBlock", "mobilefacenet.ConvBlock", "mobilefacenet.LinearBlock"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.CustomImageDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_c", ",", "out_c", ",", "residual", "=", "False", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ")", ":", "\n", "        ", "super", "(", "DepthWise", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "residual", "=", "residual", "\n", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "\n", "ConvBlock", "(", "in_c", ",", "out_c", "=", "groups", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "0", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "ConvBlock", "(", "groups", ",", "groups", ",", "groups", "=", "groups", ",", "kernel", "=", "kernel", ",", "padding", "=", "padding", ",", "stride", "=", "stride", ")", ",", "\n", "LinearBlock", "(", "groups", ",", "out_c", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "0", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.backbones.mobilefacenet.DepthWise.forward": [[51, 61], ["mobilefacenet.DepthWise.layers"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "short_cut", "=", "None", "\n", "if", "self", ".", "residual", ":", "\n", "            ", "short_cut", "=", "x", "\n", "", "x", "=", "self", ".", "layers", "(", "x", ")", "\n", "if", "self", ".", "residual", ":", "\n", "            ", "output", "=", "short_cut", "+", "x", "\n", "", "else", ":", "\n", "            ", "output", "=", "x", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.backbones.mobilefacenet.Residual.__init__": [[64, 70], ["torch.nn.Module.__init__", "range", "torch.nn.Sequential", "torch.nn.Sequential", "modules.append", "mobilefacenet.DepthWise"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.CustomImageDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c", ",", "num_block", ",", "groups", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", ":", "\n", "        ", "super", "(", "Residual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "modules", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "num_block", ")", ":", "\n", "            ", "modules", ".", "append", "(", "DepthWise", "(", "c", ",", "c", ",", "True", ",", "kernel", ",", "stride", ",", "padding", ",", "groups", ")", ")", "\n", "", "self", ".", "layers", "=", "Sequential", "(", "*", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.backbones.mobilefacenet.Residual.forward": [[71, 73], ["mobilefacenet.Residual.layers"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "layers", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.backbones.mobilefacenet.GDC.__init__": [[76, 83], ["torch.nn.Module.__init__", "torch.Sequential", "torch.Sequential", "mobilefacenet.LinearBlock", "mobilefacenet.Flatten", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.CustomImageDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "embedding_size", ")", ":", "\n", "        ", "super", "(", "GDC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "\n", "LinearBlock", "(", "512", ",", "512", ",", "groups", "=", "512", ",", "kernel", "=", "(", "7", ",", "7", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "0", ")", ")", ",", "\n", "Flatten", "(", ")", ",", "\n", "Linear", "(", "512", ",", "embedding_size", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm1d", "(", "embedding_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.backbones.mobilefacenet.GDC.forward": [[84, 86], ["mobilefacenet.GDC.layers"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "layers", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.backbones.mobilefacenet.MobileFaceNet.__init__": [[89, 106], ["torch.nn.Module.__init__", "torch.Sequential", "torch.Sequential", "mobilefacenet.ConvBlock", "mobilefacenet.GDC", "mobilefacenet.MobileFaceNet._initialize_weights", "mobilefacenet.ConvBlock", "mobilefacenet.ConvBlock", "mobilefacenet.DepthWise", "mobilefacenet.Residual", "mobilefacenet.DepthWise", "mobilefacenet.Residual", "mobilefacenet.DepthWise", "mobilefacenet.Residual"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.CustomImageDataset.__init__", "home.repos.pwc.inspect_result.fodark_anonygan.backbones.mobilefacenet.MobileFaceNet._initialize_weights"], ["    ", "def", "__init__", "(", "self", ",", "fp16", "=", "False", ",", "num_features", "=", "512", ")", ":", "\n", "        ", "super", "(", "MobileFaceNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "scale", "=", "2", "\n", "self", ".", "fp16", "=", "fp16", "\n", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "\n", "ConvBlock", "(", "3", ",", "64", "*", "scale", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "ConvBlock", "(", "64", "*", "scale", ",", "64", "*", "scale", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "64", ")", ",", "\n", "DepthWise", "(", "64", "*", "scale", ",", "64", "*", "scale", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "128", ")", ",", "\n", "Residual", "(", "64", "*", "scale", ",", "num_block", "=", "4", ",", "groups", "=", "128", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "DepthWise", "(", "64", "*", "scale", ",", "128", "*", "scale", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "256", ")", ",", "\n", "Residual", "(", "128", "*", "scale", ",", "num_block", "=", "6", ",", "groups", "=", "256", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "DepthWise", "(", "128", "*", "scale", ",", "128", "*", "scale", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "512", ")", ",", "\n", "Residual", "(", "128", "*", "scale", ",", "num_block", "=", "2", ",", "groups", "=", "256", ",", "kernel", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", ",", "\n", ")", "\n", "self", ".", "conv_sep", "=", "ConvBlock", "(", "128", "*", "scale", ",", "512", ",", "kernel", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "0", ")", ")", "\n", "self", ".", "features", "=", "GDC", "(", "num_features", ")", "\n", "self", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.backbones.mobilefacenet.MobileFaceNet._initialize_weights": [[107, 120], ["mobilefacenet.MobileFaceNet.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.backbones.mobilefacenet.MobileFaceNet.forward": [[121, 127], ["mobilefacenet.MobileFaceNet.conv_sep", "mobilefacenet.MobileFaceNet.features", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "mobilefacenet.MobileFaceNet.layers", "mobilefacenet.MobileFaceNet.float"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", "self", ".", "fp16", ")", ":", "\n", "            ", "x", "=", "self", ".", "layers", "(", "x", ")", "\n", "", "x", "=", "self", ".", "conv_sep", "(", "x", ".", "float", "(", ")", "if", "self", ".", "fp16", "else", "x", ")", "\n", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.backbones.mobilefacenet.get_mbf": [[129, 131], ["mobilefacenet.MobileFaceNet"], "function", ["None"], ["", "", "def", "get_mbf", "(", "fp16", ",", "num_features", ")", ":", "\n", "    ", "return", "MobileFaceNet", "(", "fp16", ",", "num_features", ")", "", "", ""]], "home.repos.pwc.inspect_result.fodark_anonygan.backbones.iresnet2060.IBasicBlock.__init__": [[34, 49], ["torch.nn.Module.__init__", "torch.nn.BatchNorm2d", "iresnet2060.conv3x3", "torch.nn.BatchNorm2d", "torch.nn.PReLU", "iresnet2060.conv3x3", "torch.nn.BatchNorm2d", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.CustomImageDataset.__init__", "home.repos.pwc.inspect_result.fodark_anonygan.backbones.iresnet.conv3x3", "home.repos.pwc.inspect_result.fodark_anonygan.backbones.iresnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "\n", "groups", "=", "1", ",", "base_width", "=", "64", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", "IBasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "inplanes", ",", "eps", "=", "1e-05", ",", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "eps", "=", "1e-05", ",", ")", "\n", "self", ".", "prelu", "=", "nn", ".", "PReLU", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "eps", "=", "1e-05", ",", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.backbones.iresnet2060.IBasicBlock.forward": [[50, 62], ["iresnet2060.IBasicBlock.bn1", "iresnet2060.IBasicBlock.conv1", "iresnet2060.IBasicBlock.bn2", "iresnet2060.IBasicBlock.prelu", "iresnet2060.IBasicBlock.conv2", "iresnet2060.IBasicBlock.bn3", "iresnet2060.IBasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "out", "=", "self", ".", "bn1", "(", "x", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "prelu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "", "out", "+=", "identity", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.backbones.iresnet2060.IResNet.__init__": [[67, 118], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.PReLU", "iresnet2060.IResNet._make_layer", "iresnet2060.IResNet._make_layer", "iresnet2060.IResNet._make_layer", "iresnet2060.IResNet._make_layer", "torch.nn.BatchNorm2d", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.init.constant_", "iresnet2060.IResNet.modules", "len", "ValueError", "isinstance", "iresnet2060.IResNet.modules", "torch.nn.init.normal_", "isinstance", "isinstance", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.CustomImageDataset.__init__", "home.repos.pwc.inspect_result.fodark_anonygan.backbones.iresnet.IResNet._make_layer", "home.repos.pwc.inspect_result.fodark_anonygan.backbones.iresnet.IResNet._make_layer", "home.repos.pwc.inspect_result.fodark_anonygan.backbones.iresnet.IResNet._make_layer", "home.repos.pwc.inspect_result.fodark_anonygan.backbones.iresnet.IResNet._make_layer"], ["def", "__init__", "(", "self", ",", "\n", "block", ",", "layers", ",", "dropout", "=", "0", ",", "num_features", "=", "512", ",", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "width_per_group", "=", "64", ",", "replace_stride_with_dilation", "=", "None", ",", "fp16", "=", "False", ")", ":", "\n", "        ", "super", "(", "IResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fp16", "=", "fp16", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "inplanes", ",", "eps", "=", "1e-05", ")", "\n", "self", ".", "prelu", "=", "nn", ".", "PReLU", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "\n", "128", ",", "\n", "layers", "[", "1", "]", ",", "\n", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "\n", "256", ",", "\n", "layers", "[", "2", "]", ",", "\n", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "\n", "512", ",", "\n", "layers", "[", "3", "]", ",", "\n", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "512", "*", "block", ".", "expansion", ",", "eps", "=", "1e-05", ",", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ",", "inplace", "=", "True", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", "*", "self", ".", "fc_scale", ",", "num_features", ")", "\n", "self", ".", "features", "=", "nn", ".", "BatchNorm1d", "(", "num_features", ",", "eps", "=", "1e-05", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "features", ".", "weight", ",", "1.0", ")", "\n", "self", ".", "features", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "0.1", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "IBasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.backbones.iresnet2060.IResNet._make_layer": [[119, 144], ["layers.append", "range", "torch.nn.Sequential", "torch.nn.Sequential", "block", "layers.append", "iresnet2060.conv1x1", "torch.nn.BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.backbones.iresnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "eps", "=", "1e-05", ",", ")", ",", "\n", ")", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "block", "(", "self", ".", "inplanes", ",", "\n", "planes", ",", "\n", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "\n", "dilation", "=", "self", ".", "dilation", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.backbones.iresnet2060.IResNet.checkpoint": [[145, 150], ["torch.utils.checkpoint.checkpoint_sequential", "func"], "methods", ["None"], ["", "def", "checkpoint", "(", "self", ",", "func", ",", "num_seg", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "return", "checkpoint_sequential", "(", "func", ",", "num_seg", ",", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "func", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.backbones.iresnet2060.IResNet.forward": [[151, 166], ["iresnet2060.IResNet.fc", "iresnet2060.IResNet.features", "torch.cuda.amp.autocast", "iresnet2060.IResNet.conv1", "iresnet2060.IResNet.bn1", "iresnet2060.IResNet.prelu", "iresnet2060.IResNet.layer1", "iresnet2060.IResNet.checkpoint", "iresnet2060.IResNet.checkpoint", "iresnet2060.IResNet.layer4", "iresnet2060.IResNet.bn2", "torch.flatten", "iresnet2060.IResNet.dropout", "iresnet2060.IResNet.float"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.backbones.iresnet2060.IResNet.checkpoint", "home.repos.pwc.inspect_result.fodark_anonygan.backbones.iresnet2060.IResNet.checkpoint"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", "self", ".", "fp16", ")", ":", "\n", "            ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "prelu", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "checkpoint", "(", "self", ".", "layer2", ",", "20", ",", "x", ")", "\n", "x", "=", "self", ".", "checkpoint", "(", "self", ".", "layer3", ",", "100", ",", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "", "x", "=", "self", ".", "fc", "(", "x", ".", "float", "(", ")", "if", "self", ".", "fp16", "else", "x", ")", "\n", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.backbones.iresnet2060.conv3x3": [[10, 20], ["torch.nn.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "False", ",", "\n", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.backbones.iresnet2060.conv1x1": [[22, 29], ["torch.nn.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.backbones.iresnet2060._iresnet": [[168, 173], ["iresnet2060.IResNet", "ValueError"], "function", ["None"], ["", "", "def", "_iresnet", "(", "arch", ",", "block", ",", "layers", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "IResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "raise", "ValueError", "(", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.backbones.iresnet2060.iresnet2060": [[175, 177], ["iresnet2060._iresnet"], "function", ["home.repos.pwc.inspect_result.fodark_anonygan.backbones.iresnet._iresnet"], ["", "def", "iresnet2060", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "_iresnet", "(", "'iresnet2060'", ",", "IBasicBlock", ",", "[", "3", ",", "128", ",", "1024", "-", "128", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.fodark_anonygan.backbones.__init__.get_model": [[8, 29], ["iresnet.iresnet18", "iresnet.iresnet34", "iresnet.iresnet50", "iresnet.iresnet100", "iresnet.iresnet200", "iresnet2060", "kwargs.get", "kwargs.get", "mobilefacenet.get_mbf", "ValueError"], "function", ["home.repos.pwc.inspect_result.fodark_anonygan.backbones.iresnet.iresnet18", "home.repos.pwc.inspect_result.fodark_anonygan.backbones.iresnet.iresnet34", "home.repos.pwc.inspect_result.fodark_anonygan.backbones.iresnet.iresnet50", "home.repos.pwc.inspect_result.fodark_anonygan.backbones.iresnet.iresnet100", "home.repos.pwc.inspect_result.fodark_anonygan.backbones.iresnet.iresnet200", "home.repos.pwc.inspect_result.fodark_anonygan.backbones.iresnet2060.iresnet2060", "home.repos.pwc.inspect_result.fodark_anonygan.utils.utils_amp._MultiDeviceReplicator.get", "home.repos.pwc.inspect_result.fodark_anonygan.utils.utils_amp._MultiDeviceReplicator.get", "home.repos.pwc.inspect_result.fodark_anonygan.backbones.mobilefacenet.get_mbf"], []], "home.repos.pwc.inspect_result.fodark_anonygan.backbones.iresnet.IBasicBlock.__init__": [[30, 45], ["torch.nn.Module.__init__", "torch.nn.BatchNorm2d", "iresnet.conv3x3", "torch.nn.BatchNorm2d", "torch.nn.PReLU", "iresnet.conv3x3", "torch.nn.BatchNorm2d", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.CustomImageDataset.__init__", "home.repos.pwc.inspect_result.fodark_anonygan.backbones.iresnet.conv3x3", "home.repos.pwc.inspect_result.fodark_anonygan.backbones.iresnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "\n", "groups", "=", "1", ",", "base_width", "=", "64", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", "IBasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "inplanes", ",", "eps", "=", "1e-05", ",", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "eps", "=", "1e-05", ",", ")", "\n", "self", ".", "prelu", "=", "nn", ".", "PReLU", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "eps", "=", "1e-05", ",", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.backbones.iresnet.IBasicBlock.forward": [[46, 58], ["iresnet.IBasicBlock.bn1", "iresnet.IBasicBlock.conv1", "iresnet.IBasicBlock.bn2", "iresnet.IBasicBlock.prelu", "iresnet.IBasicBlock.conv2", "iresnet.IBasicBlock.bn3", "iresnet.IBasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "out", "=", "self", ".", "bn1", "(", "x", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "prelu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "", "out", "+=", "identity", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.backbones.iresnet.IResNet.__init__": [[62, 113], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.PReLU", "iresnet.IResNet._make_layer", "iresnet.IResNet._make_layer", "iresnet.IResNet._make_layer", "iresnet.IResNet._make_layer", "torch.nn.BatchNorm2d", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.init.constant_", "iresnet.IResNet.modules", "len", "ValueError", "isinstance", "iresnet.IResNet.modules", "torch.nn.init.normal_", "isinstance", "isinstance", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.CustomImageDataset.__init__", "home.repos.pwc.inspect_result.fodark_anonygan.backbones.iresnet.IResNet._make_layer", "home.repos.pwc.inspect_result.fodark_anonygan.backbones.iresnet.IResNet._make_layer", "home.repos.pwc.inspect_result.fodark_anonygan.backbones.iresnet.IResNet._make_layer", "home.repos.pwc.inspect_result.fodark_anonygan.backbones.iresnet.IResNet._make_layer"], ["def", "__init__", "(", "self", ",", "\n", "block", ",", "layers", ",", "dropout", "=", "0", ",", "num_features", "=", "512", ",", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "width_per_group", "=", "64", ",", "replace_stride_with_dilation", "=", "None", ",", "fp16", "=", "False", ")", ":", "\n", "        ", "super", "(", "IResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fp16", "=", "fp16", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "inplanes", ",", "eps", "=", "1e-05", ")", "\n", "self", ".", "prelu", "=", "nn", ".", "PReLU", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "\n", "128", ",", "\n", "layers", "[", "1", "]", ",", "\n", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "\n", "256", ",", "\n", "layers", "[", "2", "]", ",", "\n", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "\n", "512", ",", "\n", "layers", "[", "3", "]", ",", "\n", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "512", "*", "block", ".", "expansion", ",", "eps", "=", "1e-05", ",", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ",", "inplace", "=", "True", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", "*", "self", ".", "fc_scale", ",", "num_features", ")", "\n", "self", ".", "features", "=", "nn", ".", "BatchNorm1d", "(", "num_features", ",", "eps", "=", "1e-05", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "features", ".", "weight", ",", "1.0", ")", "\n", "self", ".", "features", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "0.1", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "IBasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.backbones.iresnet.IResNet._make_layer": [[114, 139], ["layers.append", "range", "torch.nn.Sequential", "torch.nn.Sequential", "block", "layers.append", "iresnet.conv1x1", "torch.nn.BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.backbones.iresnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "eps", "=", "1e-05", ",", ")", ",", "\n", ")", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "block", "(", "self", ".", "inplanes", ",", "\n", "planes", ",", "\n", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "\n", "dilation", "=", "self", ".", "dilation", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.backbones.iresnet.IResNet.forward": [[140, 155], ["iresnet.IResNet.fc", "iresnet.IResNet.features", "torch.cuda.amp.autocast", "iresnet.IResNet.conv1", "iresnet.IResNet.bn1", "iresnet.IResNet.prelu", "iresnet.IResNet.layer1", "iresnet.IResNet.layer2", "iresnet.IResNet.layer3", "iresnet.IResNet.layer4", "iresnet.IResNet.bn2", "torch.flatten", "iresnet.IResNet.dropout", "iresnet.IResNet.float"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", "self", ".", "fp16", ")", ":", "\n", "            ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "prelu", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "", "x", "=", "self", ".", "fc", "(", "x", ".", "float", "(", ")", "if", "self", ".", "fp16", "else", "x", ")", "\n", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.backbones.iresnet.conv3x3": [[7, 17], ["torch.nn.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "False", ",", "\n", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.backbones.iresnet.conv1x1": [[19, 26], ["torch.nn.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.backbones.iresnet._iresnet": [[157, 162], ["iresnet.IResNet", "ValueError"], "function", ["None"], ["", "", "def", "_iresnet", "(", "arch", ",", "block", ",", "layers", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "IResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "raise", "ValueError", "(", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.backbones.iresnet.iresnet18": [[164, 167], ["iresnet._iresnet"], "function", ["home.repos.pwc.inspect_result.fodark_anonygan.backbones.iresnet._iresnet"], ["", "def", "iresnet18", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "_iresnet", "(", "'iresnet18'", ",", "IBasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "pretrained", ",", "\n", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.backbones.iresnet.iresnet34": [[169, 172], ["iresnet._iresnet"], "function", ["home.repos.pwc.inspect_result.fodark_anonygan.backbones.iresnet._iresnet"], ["", "def", "iresnet34", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "_iresnet", "(", "'iresnet34'", ",", "IBasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "\n", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.backbones.iresnet.iresnet50": [[174, 177], ["iresnet._iresnet"], "function", ["home.repos.pwc.inspect_result.fodark_anonygan.backbones.iresnet._iresnet"], ["", "def", "iresnet50", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "_iresnet", "(", "'iresnet50'", ",", "IBasicBlock", ",", "[", "3", ",", "4", ",", "14", ",", "3", "]", ",", "pretrained", ",", "\n", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.backbones.iresnet.iresnet100": [[179, 182], ["iresnet._iresnet"], "function", ["home.repos.pwc.inspect_result.fodark_anonygan.backbones.iresnet._iresnet"], ["", "def", "iresnet100", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "_iresnet", "(", "'iresnet100'", ",", "IBasicBlock", ",", "[", "3", ",", "13", ",", "30", ",", "3", "]", ",", "pretrained", ",", "\n", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.backbones.iresnet.iresnet200": [[184, 187], ["iresnet._iresnet"], "function", ["home.repos.pwc.inspect_result.fodark_anonygan.backbones.iresnet._iresnet"], ["", "def", "iresnet200", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "_iresnet", "(", "'iresnet200'", ",", "IBasicBlock", ",", "[", "6", ",", "26", ",", "60", ",", "6", "]", ",", "pretrained", ",", "\n", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.data.dataloader.CustomLoader.__init__": [[63, 164], ["torch.utils.data.Dataset.__init__", "torchvision.transforms.Resize", "torchvision.transforms.Resize", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "pandas.read_csv", "len", "range", "pandas.read_csv", "range", "dataloader.CustomLoader.pairs_diff.append", "dataloader.CustomLoader.pairs_same.append", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "pandas.read_csv", "len", "range", "os.join", "os.join", "pandas.read_csv", "len", "dataloader.CustomLoader.pairs_test.append", "pandas.read_csv.iterrows", "pandas.read_csv.iterrows", "os.join", "os.join", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "dataloader.CustomLoader.pairs_test.append", "dataloader.CustomLoader.pairs_test.append", "[].split", "[].split", "src.split"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.CustomImageDataset.__init__", "home.repos.pwc.inspect_result.fodark_anonygan.eval.verification.LFold.split", "home.repos.pwc.inspect_result.fodark_anonygan.eval.verification.LFold.split", "home.repos.pwc.inspect_result.fodark_anonygan.eval.verification.LFold.split"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "data_dir", ",", "\n", "transform", ",", "\n", "stage", ",", "\n", "same_percentage", "=", "0.5", ",", "\n", "same_identity", "=", "False", ",", "\n", "reduced_landmarks", "=", "False", ",", "\n", "iciap", "=", "False", ",", "\n", "lfw", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data_dir", "=", "data_dir", "\n", "self", ".", "transforms", "=", "transform", "\n", "self", ".", "stage", "=", "stage", "\n", "self", ".", "same_percentage", "=", "same_percentage", "\n", "self", ".", "same_identity", "=", "same_identity", "\n", "self", ".", "resize", "=", "(", "\n", "transforms", ".", "Resize", "(", "size", "=", "(", "220", ",", "180", ")", ")", "\n", "if", "not", "lfw", "\n", "else", "transforms", ".", "Resize", "(", "size", "=", "(", "256", ",", "256", ")", ")", "\n", ")", "\n", "self", ".", "reduced_landmarks", "=", "reduced_landmarks", "\n", "self", ".", "iciap", "=", "iciap", "\n", "self", ".", "lfw", "=", "lfw", "\n", "\n", "if", "stage", "==", "\"fit\"", "or", "stage", "==", "\"val\"", ":", "\n", "            ", "self", ".", "image_dir", "=", "P", ".", "join", "(", "data_dir", ",", "\"train\"", ")", "\n", "self", ".", "landmarks_dir", "=", "P", ".", "join", "(", "data_dir", ",", "\"trainK_68\"", ")", "\n", "self", ".", "mask_dir", "=", "P", ".", "join", "(", "data_dir", ",", "\"train_mask\"", ")", "\n", "pairs_file_1", "=", "P", ".", "join", "(", "data_dir", ",", "\"celeba-pairs-train.csv\"", ")", "\n", "pairs_file_2", "=", "P", ".", "join", "(", "data_dir", ",", "\"celeba-pairs-train-sameid.csv\"", ")", "\n", "\n", "pairs_file_train_diff", "=", "pd", ".", "read_csv", "(", "pairs_file_1", ",", "dtype", "=", "str", ")", "\n", "self", ".", "size", "=", "len", "(", "pairs_file_train_diff", ")", "\n", "self", ".", "pairs_diff", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "size", ")", ":", "\n", "                ", "pair", "=", "[", "\n", "pairs_file_train_diff", ".", "iloc", "[", "i", "]", "[", "\"from\"", "]", ",", "\n", "pairs_file_train_diff", ".", "iloc", "[", "i", "]", "[", "\"to\"", "]", ",", "\n", "]", "\n", "self", ".", "pairs_diff", ".", "append", "(", "pair", ")", "\n", "\n", "", "pairs_file_train_same", "=", "pd", ".", "read_csv", "(", "pairs_file_2", ",", "dtype", "=", "str", ")", "\n", "self", ".", "pairs_same", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "size", ")", ":", "\n", "                ", "pair", "=", "[", "\n", "pairs_file_train_same", ".", "iloc", "[", "i", "]", "[", "\"from\"", "]", ",", "\n", "pairs_file_train_same", ".", "iloc", "[", "i", "]", "[", "\"to\"", "]", ",", "\n", "]", "\n", "self", ".", "pairs_same", ".", "append", "(", "pair", ")", "\n", "", "", "elif", "stage", "==", "\"test\"", ":", "\n", "            ", "self", ".", "image_dir", "=", "P", ".", "join", "(", "data_dir", ",", "\"test\"", ")", "\n", "self", ".", "landmarks_dir", "=", "P", ".", "join", "(", "data_dir", ",", "\"testK_68\"", ")", "\n", "self", ".", "mask_dir", "=", "P", ".", "join", "(", "data_dir", ",", "\"test_mask\"", ")", "\n", "\n", "self", ".", "image_dir_fallback", "=", "P", ".", "join", "(", "data_dir", ",", "\"train\"", ")", "\n", "self", ".", "landmarks_dir_fallback", "=", "P", ".", "join", "(", "data_dir", ",", "\"trainK_68\"", ")", "\n", "self", ".", "mask_dir_fallback", "=", "P", ".", "join", "(", "data_dir", ",", "\"train_mask\"", ")", "\n", "\n", "if", "not", "self", ".", "iciap", ":", "\n", "                ", "pairs_file_1", "=", "P", ".", "join", "(", "data_dir", ",", "\"celeba-pairs-test-new.csv\"", ")", "\n", "\n", "pairs_file_test", "=", "pd", ".", "read_csv", "(", "pairs_file_1", ",", "dtype", "=", "str", ")", "\n", "self", ".", "size", "=", "len", "(", "pairs_file_test", ")", "\n", "self", ".", "pairs_test", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "size", ")", ":", "\n", "                    ", "pair", "=", "[", "\n", "pairs_file_test", ".", "iloc", "[", "i", "]", "[", "\"from\"", "]", ",", "\n", "pairs_file_test", ".", "iloc", "[", "i", "]", "[", "\"to\"", "]", ",", "\n", "]", "\n", "self", ".", "pairs_test", ".", "append", "(", "pair", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "not", "self", ".", "lfw", ":", "\n", "                    ", "data_root", "=", "\"/media/dvl1/HDD_DATA/iciap/test_celeba\"", "\n", "", "else", ":", "\n", "                    ", "data_root", "=", "\"/media/dvl1/HDD_DATA/iciap/ciagan_lfw\"", "\n", "", "self", ".", "data_root", "=", "data_root", "\n", "pairs_file_1", "=", "P", ".", "join", "(", "data_root", ",", "\"fair.csv\"", ")", "\n", "\n", "pairs_file_test", "=", "pd", ".", "read_csv", "(", "pairs_file_1", ",", "dtype", "=", "str", ")", "\n", "# self.size = len(pairs_file_test)", "\n", "self", ".", "pairs_test", "=", "[", "]", "\n", "if", "not", "self", ".", "lfw", ":", "\n", "                    ", "for", "r", "in", "pairs_file_test", ".", "iterrows", "(", ")", ":", "\n", "                        ", "condition", "=", "r", "[", "1", "]", "[", "\"condition\"", "]", "\n", "source_id", "=", "r", "[", "1", "]", "[", "\"source_id\"", "]", "\n", "\n", "source_p", "=", "P", ".", "join", "(", "data_root", ",", "\"sources\"", ",", "source_id", ")", "\n", "for", "src", "in", "os", ".", "listdir", "(", "source_p", ")", ":", "\n", "                            ", "source", "=", "src", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "pair", "=", "[", "condition", ",", "f\"{source_id}/{source}\"", "]", "\n", "self", ".", "pairs_test", ".", "append", "(", "pair", ")", "\n", "", "", "", "else", ":", "\n", "                    ", "for", "r", "in", "pairs_file_test", ".", "iterrows", "(", ")", ":", "\n", "                        ", "condition", "=", "r", "[", "1", "]", "[", "\"condition\"", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "source", "=", "r", "[", "1", "]", "[", "\"source_id\"", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "\n", "pair", "=", "[", "condition", ",", "source", "]", "\n", "self", ".", "pairs_test", ".", "append", "(", "pair", ")", "\n", "", "", "self", ".", "size", "=", "len", "(", "self", ".", "pairs_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.data.dataloader.CustomLoader.__getitem__": [[165, 277], ["random.randint", "random.random", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "PIL.Image.open().convert", "PIL.Image.open().convert", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "PIL.Image.open().convert", "dataloader.CustomLoader.transforms", "dataloader.CustomLoader.transforms", "dataloader.CustomLoader.resize", "dataloader.CustomLoader.resize", "dataloader.CustomLoader.transforms", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "dataloader.CustomLoader.transforms", "dataloader.CustomLoader.transforms", "json.load", "json.load", "dataloader.create_landmark_and_mask", "dataloader.create_landmark_and_mask", "random.randint", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.join", "os.join", "os.join", "os.join", "torch.load.float", "torch.load.float", "torch.load.float", "torch.load.float", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "PIL.Image.open().convert", "PIL.Image.open().convert", "open", "open", "dataloader.CustomLoader.resize", "dataloader.CustomLoader.resize", "dataloader.CustomLoader.resize", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open", "P2_name.split", "os.join", "os.join", "os.join", "os.join", "PIL.Image.open", "PIL.Image.open", "P2_name.split"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.data.dataloader.create_landmark_and_mask", "home.repos.pwc.inspect_result.fodark_anonygan.data.dataloader.create_landmark_and_mask", "home.repos.pwc.inspect_result.fodark_anonygan.eval.verification.LFold.split", "home.repos.pwc.inspect_result.fodark_anonygan.eval.verification.LFold.split"], ["", "", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "same_identity", "=", "False", "\n", "if", "self", ".", "stage", "==", "\"fit\"", ":", "\n", "            ", "index", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "size", "-", "1", ")", "\n", "p", "=", "random", ".", "random", "(", ")", "\n", "if", "p", "<", "self", ".", "same_percentage", ":", "\n", "                ", "P1_name", ",", "P2_name", "=", "self", ".", "pairs_same", "[", "index", "]", "\n", "if", "self", ".", "same_identity", ":", "\n", "                    ", "P2_name", "=", "P1_name", "\n", "", "same_identity", "=", "True", "\n", "", "else", ":", "\n", "                ", "if", "not", "self", ".", "same_identity", ":", "\n", "                    ", "P1_name", ",", "P2_name", "=", "self", ".", "pairs_diff", "[", "index", "]", "\n", "", "else", ":", "\n", "                    ", "P1_name", ",", "P2_name", "=", "self", ".", "pairs_same", "[", "index", "]", "\n", "", "", "", "elif", "self", ".", "stage", "==", "\"test\"", ":", "\n", "            ", "P1_name", ",", "P2_name", "=", "self", ".", "pairs_test", "[", "index", "]", "\n", "", "else", ":", "\n", "            ", "index", "=", "random", ".", "randint", "(", "0", ",", "4000", ")", "\n", "P1_name", ",", "P2_name", "=", "self", ".", "pairs_same", "[", "index", "]", "\n", "\n", "", "if", "not", "self", ".", "iciap", ":", "\n", "            ", "P1_image_path", "=", "P", ".", "join", "(", "self", ".", "image_dir", ",", "P1_name", "+", "\".jpg\"", ")", "\n", "P1_landmarks_path", "=", "P", ".", "join", "(", "self", ".", "landmarks_dir", ",", "P1_name", "+", "\".pt\"", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "P1_image_path", ")", ":", "\n", "                ", "P1_image_path", "=", "P", ".", "join", "(", "self", ".", "image_dir_fallback", ",", "P1_name", "+", "\".jpg\"", ")", "\n", "P1_landmarks_path", "=", "P", ".", "join", "(", "self", ".", "landmarks_dir_fallback", ",", "P1_name", "+", "\".pt\"", ")", "\n", "", "P2_image_path", "=", "P", ".", "join", "(", "self", ".", "image_dir", ",", "P2_name", "+", "\".jpg\"", ")", "\n", "P2_landmarks_path", "=", "P", ".", "join", "(", "self", ".", "landmarks_dir", ",", "P2_name", "+", "\".pt\"", ")", "\n", "P2_mask_path", "=", "P", ".", "join", "(", "self", ".", "mask_dir", ",", "P2_name", "+", "\".jpg\"", ")", "\n", "\n", "P1_img", "=", "Image", ".", "open", "(", "P1_image_path", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "P2_img", "=", "Image", ".", "open", "(", "P2_image_path", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "\n", "BP1_img", "=", "torch", ".", "load", "(", "P1_landmarks_path", ")", "\n", "BP2_img", "=", "torch", ".", "load", "(", "P2_landmarks_path", ")", "\n", "\n", "P2_mask", "=", "Image", ".", "open", "(", "P2_mask_path", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "\n", "P1", "=", "self", ".", "transforms", "(", "P1_img", ")", "\n", "P2", "=", "self", ".", "transforms", "(", "P2_img", ")", "\n", "BP1", "=", "self", ".", "resize", "(", "BP1_img", ".", "float", "(", ")", ")", "\n", "BP2", "=", "self", ".", "resize", "(", "BP2_img", ".", "float", "(", ")", ")", "\n", "\n", "if", "self", ".", "reduced_landmarks", ":", "\n", "                ", "BP1", "=", "BP1", "[", "legal_mask", "]", "\n", "BP2", "=", "BP2", "[", "legal_mask", "]", "\n", "\n", "", "mask", "=", "self", ".", "transforms", "(", "P2_mask", ")", "\n", "msk", "=", "torch", ".", "zeros_like", "(", "mask", ")", "\n", "msk", "[", "mask", ">", "0", "]", "=", "1", "\n", "\n", "return", "{", "\n", "\"P1\"", ":", "P1", ",", "\n", "\"BP1\"", ":", "BP1", ",", "\n", "\"P2\"", ":", "P2", ",", "\n", "\"BP2\"", ":", "BP2", ",", "\n", "\"masked_P2\"", ":", "P2", "*", "(", "1", "-", "msk", ")", ",", "\n", "\"P1_path\"", ":", "P1_name", ",", "\n", "\"P2_path\"", ":", "P2_name", ",", "\n", "\"same\"", ":", "same_identity", ",", "\n", "\"mask\"", ":", "mask", ",", "\n", "}", "\n", "", "else", ":", "\n", "            ", "if", "not", "self", ".", "lfw", ":", "\n", "                ", "P2_basename", "=", "P2_name", ".", "split", "(", "\"/\"", ")", "[", "1", "]", "\n", "P1_image_path", "=", "P", ".", "join", "(", "\n", "self", ".", "data_root", ",", "\"condition\"", ",", "\"fair/\"", "+", "P1_name", "+", "\".png\"", "\n", ")", "\n", "P2_image_path", "=", "P", ".", "join", "(", "self", ".", "data_root", ",", "\"sources\"", ",", "P2_name", "+", "\".png\"", ")", "\n", "", "else", ":", "\n", "                ", "P1_image_path", "=", "P", ".", "join", "(", "\n", "self", ".", "data_root", ",", "\"lfw-only-second\"", ",", "P1_name", "+", "\".jpg\"", "\n", ")", "\n", "P2_image_path", "=", "P", ".", "join", "(", "\n", "self", ".", "data_root", ",", "\"lfw-only-second\"", ",", "P2_name", "+", "\".jpg\"", "\n", ")", "\n", "\n", "", "P1", "=", "self", ".", "transforms", "(", "Image", ".", "open", "(", "P1_image_path", ")", ".", "convert", "(", "\"RGB\"", ")", ")", "\n", "P2", "=", "self", ".", "transforms", "(", "Image", ".", "open", "(", "P2_image_path", ")", ".", "convert", "(", "\"RGB\"", ")", ")", "\n", "\n", "landmarks1", "=", "json", ".", "load", "(", "\n", "open", "(", "P", ".", "join", "(", "self", ".", "data_root", ",", "\"landmarks\"", ",", "P1_name", "+", "\".json\"", ")", ",", "\"r\"", ")", "\n", ")", "\n", "landmarks2", "=", "json", ".", "load", "(", "\n", "open", "(", "\n", "P", ".", "join", "(", "\n", "self", ".", "data_root", ",", "\"landmarks\"", ",", "P2_name", ".", "split", "(", "\"/\"", ")", "[", "1", "]", "+", "\".json\"", "\n", ")", ",", "\n", "\"r\"", ",", "\n", ")", "\n", ")", "\n", "\n", "BP1", ",", "_", "=", "create_landmark_and_mask", "(", "landmarks1", ",", "lfw", "=", "self", ".", "lfw", ")", "\n", "BP2", ",", "mask", "=", "create_landmark_and_mask", "(", "landmarks2", ",", "lfw", "=", "self", ".", "lfw", ")", "\n", "\n", "if", "self", ".", "reduced_landmarks", ":", "\n", "                ", "BP1", "=", "BP1", "[", "legal_mask", "]", "\n", "BP2", "=", "BP2", "[", "legal_mask", "]", "\n", "\n", "", "BP1", ",", "BP2", ",", "mask", "=", "self", ".", "resize", "(", "BP1", ")", ",", "self", ".", "resize", "(", "BP2", ")", ",", "self", ".", "resize", "(", "mask", ")", "\n", "\n", "return", "{", "\n", "\"P1\"", ":", "P1", ",", "\n", "\"BP1\"", ":", "BP1", ",", "\n", "\"P2\"", ":", "P2", ",", "\n", "\"BP2\"", ":", "BP2", ",", "\n", "\"masked_P2\"", ":", "P2", "*", "(", "1", "-", "mask", ")", ",", "\n", "\"P1_path\"", ":", "P1_name", ",", "\n", "\"P2_path\"", ":", "P2_basename", ",", "\n", "\"same\"", ":", "same_identity", ",", "\n", "\"mask\"", ":", "mask", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.data.dataloader.CustomLoader.__len__": [[279, 286], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "stage", "==", "\"test\"", ":", "\n", "            ", "return", "self", ".", "size", "\n", "", "if", "self", ".", "stage", "==", "\"fit\"", ":", "\n", "            ", "return", "4096", "\n", "", "else", ":", "\n", "            ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.data.dataloader.AnonyDataset.__init__": [[289, 314], ["pytorch_lightning.LightningDataModule.__init__", "torchvision.transforms.Compose", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "methods", ["home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.CustomImageDataset.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "data_dir", ":", "str", "=", "\"./\"", ",", "\n", "batch_size", "=", "32", ",", "\n", "same_percentage", "=", "0.5", ",", "\n", "same_identity", "=", "False", ",", "\n", "reduced_landmarks", "=", "False", ",", "\n", "iciap", "=", "False", ",", "\n", "lfw", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data_dir", "=", "data_dir", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "Resize", "(", "size", "=", "(", "220", ",", "180", ")", "if", "not", "lfw", "else", "(", "256", ",", "256", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", ",", "\n", "]", "\n", ")", "\n", "self", ".", "bs", "=", "batch_size", "\n", "self", ".", "same_percentage", "=", "same_percentage", "\n", "self", ".", "same_identity", "=", "same_identity", "\n", "self", ".", "reduced_landmarks", "=", "reduced_landmarks", "\n", "self", ".", "iciap", "=", "iciap", "\n", "self", ".", "lfw", "=", "lfw", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.data.dataloader.AnonyDataset.setup": [[315, 317], ["None"], "methods", ["None"], ["", "def", "setup", "(", "self", ",", "stage", ":", "Optional", "[", "str", "]", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "# print(\"STAGE\", stage)", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.data.dataloader.AnonyDataset.train_dataloader": [[330, 345], ["dataloader.CustomLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "train_dataloader", "(", "self", ")", ":", "\n", "        ", "data_train", "=", "CustomLoader", "(", "\n", "self", ".", "data_dir", ",", "\n", "self", ".", "transform", ",", "\n", "\"fit\"", ",", "\n", "same_percentage", "=", "self", ".", "same_percentage", ",", "\n", "same_identity", "=", "self", ".", "same_identity", ",", "\n", "reduced_landmarks", "=", "self", ".", "reduced_landmarks", ",", "\n", ")", "\n", "return", "DataLoader", "(", "\n", "data_train", ",", "\n", "batch_size", "=", "self", ".", "bs", ",", "\n", "num_workers", "=", "4", ",", "\n", "pin_memory", "=", "True", ",", "\n", "persistent_workers", "=", "True", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.data.dataloader.AnonyDataset.val_dataloader": [[347, 356], ["dataloader.CustomLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "val_dataloader", "(", "self", ")", ":", "\n", "        ", "data_val", "=", "CustomLoader", "(", "\n", "self", ".", "data_dir", ",", "\n", "self", ".", "transform", ",", "\n", "\"val\"", ",", "\n", "reduced_landmarks", "=", "self", ".", "reduced_landmarks", ",", "\n", ")", "\n", "return", "DataLoader", "(", "\n", "data_val", ",", "batch_size", "=", "1", ",", "num_workers", "=", "4", ",", "persistent_workers", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.data.dataloader.AnonyDataset.test_dataloader": [[358, 369], ["dataloader.CustomLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "test_dataloader", "(", "self", ")", ":", "\n", "        ", "data_test", "=", "CustomLoader", "(", "\n", "self", ".", "data_dir", ",", "\n", "self", ".", "transform", ",", "\n", "\"test\"", ",", "\n", "reduced_landmarks", "=", "self", ".", "reduced_landmarks", ",", "\n", "iciap", "=", "self", ".", "iciap", ",", "\n", "lfw", "=", "self", ".", "lfw", ",", "\n", ")", "\n", "return", "DataLoader", "(", "\n", "data_test", ",", "batch_size", "=", "1", ",", "num_workers", "=", "20", ",", "persistent_workers", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.data.dataloader.create_landmark_and_mask": [[25, 60], ["enumerate", "contours.append", "range", "contours.append", "cv2.fillPoly", "PIL.Image.fromarray", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "numpy.zeros", "numpy.zeros", "contours.append", "torchvision.transforms.ToTensor", "numpy.array"], "function", ["None"], ["", "def", "create_landmark_and_mask", "(", "landmarks", ",", "lfw", "=", "False", ")", ":", "\n", "    ", "final_tensor", "=", "(", "\n", "torch", ".", "zeros", "(", "(", "68", ",", "220", ",", "180", ")", ")", "if", "not", "lfw", "else", "torch", ".", "zeros", "(", "(", "68", ",", "256", ",", "256", ")", ")", "\n", ")", "\n", "for", "idx", ",", "l", "in", "enumerate", "(", "landmarks", ")", ":", "\n", "        ", "if", "l", "[", "\"y\"", "]", ">", "255", ":", "\n", "            ", "l", "[", "\"y\"", "]", "=", "255", "\n", "", "if", "l", "[", "\"x\"", "]", ">", "255", ":", "\n", "            ", "l", "[", "\"x\"", "]", "=", "255", "\n", "", "final_tensor", "[", "idx", "]", "[", "l", "[", "\"y\"", "]", "]", "[", "l", "[", "\"x\"", "]", "]", "=", "1.0", "\n", "\n", "", "img_msk", "=", "(", "\n", "np", ".", "zeros", "(", "(", "220", ",", "180", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "if", "not", "lfw", "\n", "else", "np", ".", "zeros", "(", "(", "256", ",", "256", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", ")", "\n", "contours", "=", "[", "]", "\n", "# leftest jaw point, highest left eyebrow point", "\n", "first_x", ",", "first_y", "=", "landmarks", "[", "0", "]", "[", "\"x\"", "]", ",", "landmarks", "[", "19", "]", "[", "\"y\"", "]", "\n", "# righest jaw point, highest right eyebrow point", "\n", "last_x", ",", "last_y", "=", "landmarks", "[", "16", "]", "[", "\"x\"", "]", ",", "landmarks", "[", "24", "]", "[", "\"y\"", "]", "\n", "\n", "contours", ".", "append", "(", "(", "first_x", ",", "first_y", ")", ")", "\n", "# complete jawline", "\n", "for", "p", "in", "range", "(", "17", ")", ":", "\n", "        ", "x", ",", "y", "=", "landmarks", "[", "p", "]", "[", "\"x\"", "]", ",", "landmarks", "[", "p", "]", "[", "\"y\"", "]", "\n", "contours", ".", "append", "(", "(", "x", ",", "y", ")", ")", "\n", "\n", "", "contours", ".", "append", "(", "(", "last_x", ",", "last_y", ")", ")", "\n", "# fill the polygon defined by above points of white", "\n", "cv2", ".", "fillPoly", "(", "img_msk", ",", "pts", "=", "[", "np", ".", "array", "(", "contours", ")", "]", ",", "color", "=", "(", "255", ",", "255", ",", "255", ")", ")", "\n", "result_mask", "=", "Image", ".", "fromarray", "(", "img_msk", ")", "\n", "result_mask", "=", "transforms", ".", "ToTensor", "(", ")", "(", "result_mask", ")", "\n", "\n", "return", "final_tensor", ",", "result_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.options.test_options.TestOptions.__init__": [[5, 22], ["argparse.ArgumentParser", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--data_root\"", ",", "type", "=", "str", ",", "default", "=", "\"/media/dvl1/SSD_DATA/anonygan-dataset\"", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--batch_size\"", ",", "type", "=", "int", ",", "default", "=", "32", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--beta1\"", ",", "type", "=", "float", ",", "default", "=", "0.5", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--name\"", ",", "type", "=", "str", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--lr\"", ",", "type", "=", "float", ",", "default", "=", "2e-4", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--ch_input\"", ",", "type", "=", "int", ",", "default", "=", "6", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--no_ch_att\"", ",", "action", "=", "\"store_true\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--iciap\"", ",", "action", "=", "\"store_true\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--ckpt\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--reduced_landmarks\"", ",", "action", "=", "\"store_true\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--lfw\"", ",", "action", "=", "\"store_true\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.options.test_options.TestOptions.parse": [[23, 26], ["test_options.TestOptions.parser.parse_args"], "methods", ["None"], ["", "def", "parse", "(", "self", ")", ":", "\n", "        ", "self", ".", "opt", "=", "self", ".", "parser", ".", "parse_args", "(", ")", "\n", "return", "self", ".", "opt", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fodark_anonygan.options.train_options.TrainOptions.__init__": [[5, 34], ["argparse.ArgumentParser", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--data_root\"", ",", "type", "=", "str", ",", "default", "=", "\"/media/dvl1/SSD_DATA/anonygan-dataset\"", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--batch_size\"", ",", "type", "=", "int", ",", "default", "=", "32", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--arcface_arch\"", ",", "type", "=", "str", ",", "default", "=", "\"r50\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--lambda_gan\"", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--lambda_pose\"", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--lambda_id\"", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--lambda_wfm\"", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--lambda_rec\"", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--beta1\"", ",", "type", "=", "float", ",", "default", "=", "0.5", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--same_percentage\"", ",", "type", "=", "float", ",", "default", "=", "0.5", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--double_discriminator\"", ",", "action", "=", "\"store_true\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--id_discriminator\"", ",", "action", "=", "\"store_true\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--pretrained_id_discriminator\"", ",", "action", "=", "\"store_true\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--no_wfm\"", ",", "action", "=", "\"store_true\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--no_l1\"", ",", "action", "=", "\"store_true\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--name\"", ",", "type", "=", "str", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--g_lr\"", ",", "type", "=", "float", ",", "default", "=", "2e-4", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--lr\"", ",", "type", "=", "float", ",", "default", "=", "2e-4", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--ch_input\"", ",", "type", "=", "int", ",", "default", "=", "6", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--train_same_identity\"", ",", "action", "=", "\"store_true\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--no_ch_att\"", ",", "action", "=", "\"store_true\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--yiming\"", ",", "action", "=", "\"store_true\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--reduced_landmarks\"", ",", "action", "=", "\"store_true\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.options.train_options.TrainOptions.parse": [[35, 38], ["train_options.TrainOptions.parser.parse_args"], "methods", ["None"], ["", "def", "parse", "(", "self", ")", ":", "\n", "        ", "self", ".", "opt", "=", "self", ".", "parser", ".", "parse_args", "(", ")", "\n", "return", "self", ".", "opt", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fodark_anonygan.evaluation.automatic_evaluation.run_evaluation": [[10, 40], ["os.path.join", "os.makedirs", "subprocess.call", "os.path.join", "os.makedirs", "subprocess.call", "subprocess.call", "print", "exit", "print", "exit", "print", "exit"], "function", ["None"], ["def", "run_evaluation", "(", "opt", ")", ":", "\n", "    ", "datasets", "=", "[", "\"celeba\"", ",", "\"lfw\"", "]", "\n", "c_out", "=", "os", ".", "path", ".", "join", "(", "celeba_output", ",", "opt", ".", "exp_name", ")", "\n", "os", ".", "makedirs", "(", "c_out", ",", "exist_ok", "=", "True", ")", "\n", "\n", "celeba_command", "=", "f\"python ../celeba/test.py --dataroot {celeba_root} --name {opt.exp_name} --model BiGraphGAN --phase test --dataset_mode keypoint --norm batch --batchSize 1 --resize_or_crop no --gpu_ids 0 --BP_input_nc {opt.kp} --no_flip --which_model_netG Graph --checkpoints_dir ./checkpoints --pairLst {celeba_root}celeba-pairs-test.csv --which_epoch latest --results_dir ./results/ --display_id 0 --P_input_nc {6 if opt.mask else 3} --dataset celeba --out_dir {c_out}\"", "\n", "celeba_command", "+=", "\" --use_fuser\"", "if", "opt", ".", "fuser", "else", "\"\"", "\n", "\n", "res", "=", "subprocess", ".", "call", "(", "celeba_command", ",", "shell", "=", "True", ")", "\n", "if", "res", "!=", "0", ":", "\n", "        ", "print", "(", "\"Something went wrong with celeba...\"", ")", "\n", "exit", "(", "res", ")", "\n", "\n", "", "l_out", "=", "os", ".", "path", ".", "join", "(", "lfw_output", ",", "f\"output-{opt.exp_name}\"", ")", "\n", "os", ".", "makedirs", "(", "l_out", ",", "exist_ok", "=", "True", ")", "\n", "\n", "lfw_command", "=", "f\"python ../celaba/test.py --dataroot {lfw_root} --name {opt.exp_name} --model BiGraphGAN --phase test --dataset_mode keypoint --norm batch --batchSize 1 --resize_or_crop no --gpu_ids 0 --BP_input_nc {opt.kp} --no_flip --which_model_netG Graph --checkpoints_dir ./checkpoints --pairLst {lfw_root}test_pairs.csv --which_epoch latest --results_dir ./results/ --display_id 0 --P_input_nc {6 if opt.mask else 3} --dataset lfw --out_dir {l_out}\"", "\n", "lfw_command", "+=", "\" --use_fuser\"", "if", "opt", ".", "fuser", "else", "\"\"", "\n", "\n", "res", "=", "subprocess", ".", "call", "(", "lfw_command", ",", "shell", "=", "True", ")", "\n", "if", "res", "!=", "0", ":", "\n", "        ", "print", "(", "\"Something went wrong with lfw...\"", ")", "\n", "exit", "(", "res", ")", "\n", "\n", "", "eval_command", "=", "f\"python evaluate.py --img_dir {c_out} --dataset /media/dvl1/SSD_DATA/BiGraphCeleba/test --lfw_generated {l_out} --exp_name {opt.exp_name}\"", "\n", "\n", "res", "=", "subprocess", ".", "call", "(", "eval_command", ",", "shell", "=", "True", ")", "\n", "if", "res", "!=", "0", ":", "\n", "        ", "print", "(", "\"Something went wrong with evaluation...\"", ")", "\n", "exit", "(", "res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.CustomImageDataset.__init__": [[23, 27], ["natsort.natsorted", "len"], "methods", ["None"], ["\n", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "main", "(", "weight", ",", "name", ",", "orig_dir", ",", "mod_dir", ")", ":", "\n", "\n", "    ", "net", "=", "get_model", "(", "name", ",", "fp16", "=", "False", ")", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.CustomImageDataset.__len__": [[28, 30], ["None"], "methods", ["None"], ["net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "weight", ")", ")", "\n", "net", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.CustomImageDataset.__getitem__": [[31, 38], ["os.path.join", "PIL.Image.open", "os.path.isfile", "torchvision.transforms.ToTensor"], "methods", ["None"], ["# orig_dir = \"/media/dvl1/SSD_DATA/wildtrack-dataset/quantitative_test/orig/\"", "\n", "# mod_dir = \"/media/dvl1/SSD_DATA/wildtrack-dataset/quantitative_test/gen/\"", "\n", "print", "(", "\"Starting ID retrieval...\"", ")", "\n", "total_loss", "=", "[", "]", "\n", "d", "=", "torch", ".", "nn", ".", "CosineSimilarity", "(", ")", "\n", "\n", "for", "f", "in", "tqdm", "(", "os", ".", "listdir", "(", "orig_dir", ")", ")", ":", "\n", "        ", "orig_pic", "=", "os", ".", "path", ".", "join", "(", "orig_dir", ",", "f", ")", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.lfw_matches": [[40, 54], ["zip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sum().item", "torch.sum().item", "in1.chunk", "in2.chunk", "torch.cat.append", "torch.cat.append", "model().detach", "model().detach", "torch.max", "torch.max", "torch.max", "torch.max", "torch.sum", "torch.sum", "model", "model", "minib1.cuda", "minib2.cuda"], "function", ["None"], ["\n", "orig_feats", ",", "mod_feats", "=", "get_feats", "(", "net", ",", "orig_pic", ")", ",", "get_feats", "(", "net", ",", "mod_pic", ")", "\n", "\n", "diff", "=", "d", "(", "orig_feats", ",", "mod_feats", ")", ".", "item", "(", ")", "\n", "\n", "total_loss", ".", "append", "(", "diff", ")", "\n", "\n", "", "std", ",", "mean", "=", "torch", ".", "std_mean", "(", "torch", ".", "tensor", "(", "total_loss", ")", ")", "\n", "\n", "print", "(", "\"Done. Results:\"", ")", "\n", "print", "(", "f\"{mean.item()} +- {std.item()}\"", ")", "\n", "return", "mean", ",", "std", "\n", "\n", "\n", "", "if", "__name__", "==", "\"__main__\"", ":", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.compute_reid_lfw": [[56, 153], ["open().readlines", "content[].split", "range", "torch.std_mean", "torch.std_mean", "torch.std_mean", "torch.std_mean", "int", "int", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "facenet_pytorch.InceptionResnetV1().cuda().eval", "evaluate.lfw_matches", "evaluate.lfw_matches", "reids_vgg.append", "facenet_pytorch.InceptionResnetV1().cuda().eval", "evaluate.lfw_matches", "evaluate.lfw_matches", "reids_casia.append", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "round", "round", "round", "round", "open", "content[].split", "os.path.join", "os.path.join", "os.path.isfile", "os.path.isfile", "content[].split", "os.path.join", "os.path.join", "os.path.isfile", "vgg_mean.item", "vgg_std.item", "casia_mean.item", "casia_std.item", "int", "int", "torch.stack.append", "torch.stack.append", "int", "int", "torch.stack.append", "torch.stack.append", "facenet_pytorch.InceptionResnetV1().cuda", "facenet_pytorch.InceptionResnetV1().cuda", "torchvision.io.read_image().float", "torchvision.io.read_image().float", "torchvision.io.read_image().float", "torchvision.io.read_image().float", "facenet_pytorch.InceptionResnetV1", "facenet_pytorch.InceptionResnetV1", "torchvision.io.read_image", "torchvision.io.read_image", "torchvision.io.read_image", "torchvision.io.read_image"], "function", ["home.repos.pwc.inspect_result.fodark_anonygan.eval.verification.LFold.split", "home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.lfw_matches", "home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.lfw_matches", "home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.lfw_matches", "home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.lfw_matches", "home.repos.pwc.inspect_result.fodark_anonygan.eval.verification.LFold.split", "home.repos.pwc.inspect_result.fodark_anonygan.eval.verification.LFold.split"], ["parser", ".", "add_argument", "(", "\"--network\"", ",", "type", "=", "str", ",", "default", "=", "\"r50\"", ",", "help", "=", "\"backbone network\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--weight\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--img\"", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\"-s\"", ",", "\"--original\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-g\"", ",", "\"--generated\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "main", "(", "args", ".", "weight", ",", "args", ".", "network", ",", "args", ".", "original", ",", "args", ".", "generated", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.compute_reid": [[155, 211], ["min", "list", "set", "list", "set", "list", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "facenet_pytorch.InceptionResnetV1().cuda().eval", "len", "zip", "round", "facenet_pytorch.InceptionResnetV1().cuda().eval", "zip", "round", "len", "os.listdir", "os.listdir", "set.intersection", "evaluate.CustomImageDataset", "evaluate.CustomImageDataset", "os.listdir", "torch.interpolate", "torch.interpolate", "torch.sum", "torch.sum", "torch.interpolate", "torch.interpolate", "torch.sum", "torch.sum", "os.listdir", "facenet_pytorch.InceptionResnetV1().cuda", "b1[].cuda", "b2[].cuda", "InceptionResnetV1().cuda().eval.detach", "InceptionResnetV1().cuda().eval.detach", "facenet_pytorch.InceptionResnetV1().cuda", "b1[].cuda", "b2[].cuda", "InceptionResnetV1().cuda().eval.detach", "InceptionResnetV1().cuda().eval.detach", "torch.max", "torch.max", "torch.max", "torch.max", "reidentified.item", "torch.max", "torch.max", "torch.max", "torch.max", "reidentified.item", "facenet_pytorch.InceptionResnetV1", "InceptionResnetV1().cuda().eval.", "InceptionResnetV1().cuda().eval.", "facenet_pytorch.InceptionResnetV1", "InceptionResnetV1().cuda().eval.", "InceptionResnetV1().cuda().eval."], "function", ["None"], []], "home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.face_detection": [[213, 248], ["facenet_pytorch.MTCNN", "os.listdir", "len", "round", "round", "cv2.imread", "cv2.cvtColor", "PIL.Image.fromarray", "_detector", "facenet_pytorch.MTCNN.detect", "os.path.join", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.compute_fid": [[250, 253], ["cleanfid.fid.compute_fid"], "function", ["home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.compute_fid"], []], "home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.compute_kp": [[261, 283], ["os.path.isfile", "cv2.imread", "cv2.resize", "cv2.resize.copy", "numpy.array", "detector", "enumerate", "predictor", "range", "numpy.array", "kp.append", "predictor.part", "predictor.part"], "function", ["None"], []], "home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.compute_norm_distance": [[285, 289], ["numpy.linalg.norm", "numpy.linalg.norm().mean", "numpy.linalg.norm"], "function", ["None"], []], "home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.compute_pose": [[291, 326], ["list", "set", "list", "set", "list", "natsort.natsorted", "numpy.array().mean", "os.listdir", "os.listdir", "set.intersection", "os.path.join", "os.path.join", "os.path.isfile", "os.path.isfile", "evaluate.compute_kp", "evaluate.compute_kp", "dist.append", "os.path.isfile", "os.path.isfile", "evaluate.compute_norm_distance", "numpy.array"], "function", ["home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.compute_kp", "home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.compute_kp", "home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.compute_norm_distance"], []], "home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.compute_pose_bis": [[328, 391], ["face_alignment.FaceAlignment", "list", "set", "list", "set", "list", "natsort.natsorted", "torch.std_mean", "torch.std_mean", "os.listdir", "os.listdir", "set.intersection", "os.path.join", "os.path.join", "os.path.isfile", "os.path.isfile", "skimage.io.imread", "face_alignment.FaceAlignment.get_landmarks", "skimage.io.imread", "face_alignment.FaceAlignment.get_landmarks", "torch.nn.L1Loss", "torch.nn.L1Loss", "dist.append", "torch.tensor", "torch.tensor", "os.path.isfile", "os.path.isfile", "lndmks1.append", "lndmks2.append", "torch.nn.L1Loss.", "torch.nn.L1Loss.", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "function", ["None"], []], "home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.compute_metrics": [[393, 403], ["evaluate.compute_pose_bis", "evaluate.compute_fid", "print", "print"], "function", ["home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.compute_pose_bis", "home.repos.pwc.inspect_result.fodark_anonygan.evaluation.evaluate.compute_fid"], []], "home.repos.pwc.inspect_result.fodark_anonygan.preparation.train_images_and_keypoints_1.select_100_train": [[9, 30], ["os.listdir", "os.path.join", "os.path.join", "train_idx.append", "print"], "function", ["None"], ["def", "select_100_train", "(", ")", ":", "\n", "# move 100 random ids w/ at least 25 images", "\n", "    ", "root_dir", "=", "\"/media/dvl1/SSD_DATA/CelebA/poses_4_hao\"", "\n", "dest_dir", "=", "\"/media/dvl1/SSD_DATA/BiGraphCeleba/train\"", "\n", "\n", "train_idx", "=", "[", "]", "\n", "\n", "idx", "=", "0", "\n", "for", "fld", "in", "os", ".", "listdir", "(", "root_dir", ")", ":", "\n", "        ", "src", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "fld", ")", "\n", "dst", "=", "os", ".", "path", ".", "join", "(", "dest_dir", ",", "fld", ")", "\n", "\n", "# 14 is the test conditioning image", "\n", "if", "fld", "!=", "\"14\"", ":", "\n", "# shutil.copytree(src, dst)", "\n", "            ", "train_idx", ".", "append", "(", "fld", ")", "\n", "idx", "+=", "1", "\n", "\n", "", "if", "idx", ">", "99", ":", "\n", "            ", "print", "(", "\"Done...\"", ")", "\n", "return", "train_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.preparation.train_images_and_keypoints_1.select_100_test": [[32, 55], ["train_images_and_keypoints_1.select_100_train", "os.listdir", "os.path.join", "os.path.join", "test_idx.append", "print"], "function", ["home.repos.pwc.inspect_result.fodark_anonygan.preparation.train_images_and_keypoints_1.select_100_train"], ["", "", "", "def", "select_100_test", "(", ")", ":", "\n", "# test set", "\n", "    ", "root_dir", "=", "\"/media/dvl1/SSD_DATA/CelebA/poses_4_hao\"", "\n", "dest_dir", "=", "\"/media/dvl1/SSD_DATA/BiGraphCeleba/test\"", "\n", "\n", "train_idx", "=", "select_100_train", "(", ")", "\n", "test_idx", "=", "[", "]", "\n", "\n", "idx", "=", "0", "\n", "for", "fld", "in", "os", ".", "listdir", "(", "root_dir", ")", ":", "\n", "\n", "        ", "src", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "fld", ")", "\n", "dst", "=", "os", ".", "path", ".", "join", "(", "dest_dir", ",", "fld", ")", "\n", "\n", "if", "fld", "!=", "\"14\"", "and", "fld", "not", "in", "train_idx", ":", "\n", "# print(fld)", "\n", "# shutil.copytree(src, dst)", "\n", "            ", "test_idx", ".", "append", "(", "fld", ")", "\n", "idx", "+=", "1", "\n", "\n", "", "if", "idx", ">", "99", ":", "\n", "            ", "print", "(", "\"Done...\"", ")", "\n", "return", "test_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.preparation.train_images_and_keypoints_1.generate_train_pairs": [[56, 71], ["pandas.DataFrame", "os.listdir", "df.append.to_csv", "os.listdir", "list", "list", "random.sample", "df.append.append", "os.path.join", "os.path.join", "map", "itertools.combinations", "str", "x.split"], "function", ["home.repos.pwc.inspect_result.fodark_anonygan.arcface.partial_fc.PartialFC.sample", "home.repos.pwc.inspect_result.fodark_anonygan.eval.verification.LFold.split"], ["", "", "", "def", "generate_train_pairs", "(", ")", ":", "\n", "# extract random pairs of images, 100 per id", "\n", "    ", "dest_dir", "=", "\"/media/dvl1/SSD_DATA/BiGraphCeleba/train\"", "\n", "df", "=", "pd", ".", "DataFrame", "(", ")", "\n", "\n", "for", "_id", "in", "os", ".", "listdir", "(", "dest_dir", ")", ":", "\n", "        ", "images_list", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "dest_dir", ",", "_id", ")", ")", "\n", "images_list", "=", "list", "(", "map", "(", "lambda", "x", ":", "str", "(", "x", ".", "split", "(", "\".\"", ")", "[", "0", "]", ")", ",", "images_list", ")", ")", "\n", "all_couples", "=", "list", "(", "itertools", ".", "combinations", "(", "images_list", ",", "2", ")", ")", "\n", "subset", "=", "random", ".", "sample", "(", "all_couples", ",", "100", ")", "\n", "df", "=", "df", ".", "append", "(", "subset", ")", "\n", "\n", "", "df", ".", "columns", "=", "[", "'from'", ",", "'to'", "]", "\n", "\n", "df", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "dest_dir", ",", "\"celeba-pairs-train.csv\"", ")", ",", "index", "=", "False", ",", "mode", "=", "\"w\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fodark_anonygan.preparation.train_images_and_keypoints_1.extract_landmarks": [[73, 109], ["pandas.read_csv", "pd.read_csv.to_numpy().flatten().tolist", "list", "pandas.read_csv", "list", "reduced_lndmks.apply", "os.path.join", "map", "range", "str", "pd.read_csv.to_numpy().flatten", "landmarks_df[].isin", "os.path.exists", "row[].tolist", "torch.zeros", "train_images_and_keypoints_1.extract_landmarks.create_image"], "function", ["None"], ["", "def", "extract_landmarks", "(", ")", ":", "\n", "# for the used images, extract landmarks and save the in suitable format", "\n", "    ", "dest_dir", "=", "\"/media/dvl1/SSD_DATA/bigraph-dataset/\"", "\n", "df", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "dest_dir", ",", "\"celeba-pairs-train.csv\"", ")", ",", "dtype", "=", "str", ")", "\n", "all_values", "=", "df", ".", "to_numpy", "(", ")", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "all_values", "=", "list", "(", "map", "(", "lambda", "x", ":", "f\"{x}.jpg\"", ",", "all_values", ")", ")", "\n", "\n", "landmarks_df", ":", "pd", ".", "DataFrame", "=", "pd", ".", "read_csv", "(", "\"/media/dvl1/SSD_DATA/CelebA/celeba_landmarks/landmark_align.txt\"", ",", "header", "=", "None", ",", "delim_whitespace", "=", "True", ")", "\n", "\n", "reduced_lndmks", "=", "landmarks_df", "[", "landmarks_df", "[", "0", "]", ".", "isin", "(", "all_values", ")", "]", "\n", "\n", "root_dir", "=", "\"/media/dvl1/SSD_DATA/bigraph-dataset/trainK_68\"", "\n", "\n", "# for 29-kp dataset", "\n", "#legal_lndmk = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16, 27,28,29,30, 60,61,62,63,64,65,66,67]", "\n", "# for full 68 kp", "\n", "legal_lndmk", "=", "list", "(", "range", "(", "68", ")", ")", "\n", "\n", "def", "create_image", "(", "row", ")", ":", "\n", "        ", "name", "=", "str", "(", "row", "[", "0", "]", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "root_dir", ",", "name", ")", ")", ":", "\n", "            ", "lndmks", "=", "row", "[", "1", ":", "]", ".", "tolist", "(", ")", "\n", "\n", "a", "=", "torch", ".", "zeros", "(", "(", "len", "(", "legal_lndmk", ")", ",", "218", ",", "178", ")", ",", "dtype", "=", "torch", ".", "int8", ")", "\n", "try", ":", "\n", "                ", "for", "i", "in", "range", "(", "len", "(", "legal_lndmk", ")", ")", ":", "\n", "                    ", "x", ",", "y", "=", "lndmks", "[", "2", "*", "legal_lndmk", "[", "i", "]", "]", ",", "lndmks", "[", "2", "*", "legal_lndmk", "[", "i", "]", "+", "1", "]", "\n", "a", "[", "i", "]", "[", "y", "]", "[", "x", "]", "=", "1", "\n", "\n", "", "name", "=", "name", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "torch", ".", "save", "(", "a", ",", "os", ".", "path", ".", "join", "(", "root_dir", ",", "f\"{name}.pt\"", ")", ")", "\n", "print", "(", "f\"Done {name}\"", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "print", "(", "f\"Problems with {name}\"", ",", "e", ")", "\n", "\n", "", "", "", "reduced_lndmks", ".", "apply", "(", "lambda", "x", ":", "create_image", "(", "x", ")", ",", "axis", "=", "1", ")", "", "", ""]]}