{"home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.generate_clozes.mask_answer": [[23, 26], ["len"], "function", ["None"], ["def", "mask_answer", "(", "text", ",", "answer_text", ",", "answer_start", ",", "answer_type", ")", ":", "\n", "    ", "before", ",", "after", "=", "text", "[", ":", "answer_start", "]", ",", "text", "[", "answer_start", "+", "len", "(", "answer_text", ")", ":", "]", "\n", "return", "before", "+", "CLOZE_MASKS", "[", "answer_type", "]", "+", "after", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.generate_clozes.noun_phrase_answer_generator": [[28, 30], ["None"], "function", ["None"], ["", "def", "noun_phrase_answer_generator", "(", "sent", ")", ":", "\n", "    ", "return", "[", "(", "n_p", ".", "text", ",", "n_p", ".", "start_char", "-", "sent", ".", "start_char", ",", "NOUNPHRASE_LABEL", ")", "for", "n_p", "in", "sent", ".", "noun_chunks", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.generate_clozes.named_entity_answer_generator": [[32, 34], ["None"], "function", ["None"], ["", "def", "named_entity_answer_generator", "(", "sent", ")", ":", "\n", "    ", "return", "[", "(", "e", ".", "text", ",", "e", ".", "start_char", "-", "sent", ".", "start_char", ",", "e", ".", "label_", ")", "for", "e", "in", "sent", ".", "ents", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.generate_clozes.is_appropriate_cloze": [[36, 43], ["sentence.split", "all", "len", "len", "len"], "function", ["None"], ["", "def", "is_appropriate_cloze", "(", "sentence", ")", ":", "\n", "    ", "good_char_len", "=", "MIN_CLOZE_CHAR_LEN", "<", "len", "(", "sentence", ")", "<", "MAX_CLOZE_CHAR_LEN", "\n", "no_links", "=", "not", "(", "(", "'https://'", "in", "sentence", ")", "or", "(", "'http://'", "in", "sentence", ")", ")", "\n", "tokens", "=", "sentence", ".", "split", "(", ")", "\n", "good_word_lens", "=", "all", "(", "[", "MIN_CLOZE_WORDSIZE", "<=", "len", "(", "tok", ")", "<=", "MAX_CLOZE_WORDSIZE", "for", "tok", "in", "tokens", "]", ")", "\n", "good_num_tokens", "=", "MIN_CLOZE_WORD_LEN", "<=", "len", "(", "tokens", ")", "<=", "MAX_CLOZE_WORD_LEN", "\n", "return", "good_char_len", "and", "no_links", "and", "good_word_lens", "and", "good_num_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.generate_clozes.is_appropriate_answer": [[45, 49], ["len", "len", "answer_text.split"], "function", ["None"], ["", "def", "is_appropriate_answer", "(", "answer_text", ")", ":", "\n", "    ", "correct_char_length", "=", "MIN_ANSWER_CHAR_LEN", "<=", "len", "(", "answer_text", ")", "<=", "MAX_ANSWER_CHAR_LEN", "\n", "correct_word_length", "=", "MIN_ANSWER_WORD_LEN", "<=", "len", "(", "answer_text", ".", "split", "(", ")", ")", "<=", "MAX_ANSWER_WORD_LEN", "\n", "return", "correct_char_length", "and", "correct_word_length", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.generate_clozes.is_appropriate_squad_datapoint": [[51, 66], ["all", "all", "len", "len", "len", "len", "len", "len", "paragraph_text.split", "question_text.split", "answer_text.split", "len", "paragraph_text.split", "len", "question_text.split"], "function", ["None"], ["", "def", "is_appropriate_squad_datapoint", "(", "question_text", ",", "answer_text", ",", "paragraph_text", ")", ":", "\n", "    ", "p_char_len_good", "=", "len", "(", "paragraph_text", ")", "<=", "MAX_PARAGRAPH_CHAR_LEN_THRESHOLD", "\n", "p_word_len_good", "=", "len", "(", "paragraph_text", ".", "split", "(", ")", ")", "<=", "MAX_PARAGRAPH_WORD_LEN_THRESHOLD", "\n", "p_wordsize_good", "=", "all", "(", "[", "len", "(", "w", ")", "<=", "MAX_PARAGRAPH_WORDSIZE_THRESHOLD", "for", "w", "in", "paragraph_text", ".", "split", "(", ")", "]", ")", "\n", "p_good", "=", "p_char_len_good", "and", "p_word_len_good", "and", "p_wordsize_good", "\n", "\n", "q_char_len_good", "=", "len", "(", "question_text", ")", "<=", "MAX_QUESTION_CHAR_LEN_THRESHOLD", "\n", "q_word_len_good", "=", "len", "(", "question_text", ".", "split", "(", ")", ")", "<=", "MAX_QUESTION_WORD_LEN_THRESHOLD", "\n", "q_wordsize_good", "=", "all", "(", "[", "len", "(", "w", ")", "<=", "MAX_QUESTION_WORDSIZE_THRESHOLD", "for", "w", "in", "question_text", ".", "split", "(", ")", "]", ")", "\n", "q_good", "=", "q_char_len_good", "and", "q_word_len_good", "and", "q_wordsize_good", "\n", "\n", "a_char_len_good", "=", "MIN_ANSWER_CHAR_LEN", "<=", "len", "(", "answer_text", ")", "<=", "MAX_ANSWER_CHAR_LEN", "\n", "a_word_len_good", "=", "MIN_ANSWER_WORD_LEN", "<=", "len", "(", "answer_text", ".", "split", "(", ")", ")", "<=", "MAX_ANSWER_WORD_LEN", "\n", "a_good", "=", "a_char_len_good", "and", "a_word_len_good", "\n", "return", "p_good", "and", "q_good", "and", "a_good", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.generate_clozes.get_cloze_id": [[68, 71], ["hashlib.sha1().hexdigest", "hashlib.sha1", "rep.encode"], "function", ["None"], ["", "def", "get_cloze_id", "(", "paragraph_text", ",", "sentence_text", ",", "answer_text", ")", ":", "\n", "    ", "rep", "=", "paragraph_text", "+", "sentence_text", "+", "answer_text", "\n", "return", "hashlib", ".", "sha1", "(", "rep", ".", "encode", "(", ")", ")", ".", "hexdigest", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.generate_clozes.generate_clozes_from_paragraph": [[73, 96], ["nlp", "generate_clozes.is_appropriate_cloze", "answer_generator", "generate_clozes.is_appropriate_answer", "data_classes.Cloze", "generate_clozes.get_cloze_id", "generate_clozes.mask_answer"], "function", ["home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.generate_clozes.is_appropriate_cloze", "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.generate_clozes.is_appropriate_answer", "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.generate_clozes.get_cloze_id", "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.generate_clozes.mask_answer"], ["", "def", "generate_clozes_from_paragraph", "(", "paragraph", ",", "answer_generator", ")", ":", "\n", "    ", "clozes", "=", "[", "]", "\n", "para_doc", "=", "nlp", "(", "paragraph", ".", "text", ")", "\n", "for", "sentence", "in", "para_doc", ".", "sents", ":", "\n", "        ", "is_good", "=", "is_appropriate_cloze", "(", "sentence", ".", "text", ")", "\n", "if", "is_good", ":", "\n", "            ", "answers", "=", "answer_generator", "(", "sentence", ")", "\n", "for", "answer_text", ",", "answer_start", ",", "answer_type", "in", "answers", ":", "\n", "                ", "if", "is_appropriate_answer", "(", "answer_text", ")", ":", "\n", "                    ", "yield", "Cloze", "(", "\n", "cloze_id", "=", "get_cloze_id", "(", "paragraph", ".", "text", ",", "sentence", ".", "text", ",", "answer_text", ")", ",", "\n", "paragraph", "=", "paragraph", ",", "\n", "source_text", "=", "sentence", ".", "text", ",", "\n", "source_start", "=", "sentence", ".", "start_char", ",", "\n", "cloze_text", "=", "mask_answer", "(", "sentence", ".", "text", ",", "answer_text", ",", "answer_start", ",", "answer_type", ")", ",", "\n", "answer_text", "=", "answer_text", ",", "\n", "answer_start", "=", "answer_start", ",", "\n", "constituency_parse", "=", "None", ",", "\n", "root_label", "=", "None", ",", "\n", "answer_type", "=", "answer_type", ",", "\n", "question_text", "=", "None", "\n", ")", "\n", "", "", "", "", "return", "clozes", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.generate_synthetic_qa_data._check_args": [[24, 59], ["os.path.exists", "args.output_file_formats.split", "os.path.exists", "os.path.exists", "generate_synthetic_qa_data._check_args._assert_exists"], "function", ["None"], ["def", "_check_args", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "use_wh_heuristic", ":", "\n", "        ", "assert", "args", ".", "use_named_entity_clozes", ",", "'Wh heuristics can only be used in conjunction with Named Entity Answers, Pass --use_named_entity_clozes'", "\n", "\n", "", "if", "args", ".", "use_subclause_clozes", ":", "\n", "        ", "assert", "args", ".", "use_named_entity_clozes", ",", "\"Subclause clozes can only be used in conjunction with Named Entity Answers Pass --use_named_entity_clozes\"", "\n", "\n", "", "assert", "os", ".", "path", ".", "exists", "(", "args", ".", "input_file", ")", ",", "f\"Input File: {args.input_file} does not exist\"", "\n", "\n", "for", "o", "in", "args", ".", "output_file_formats", ".", "split", "(", "','", ")", ":", "\n", "        ", "assert", "o", "in", "{", "'jsonl'", ",", "'squad'", "}", ",", "f\"Unrecognised output file format requested: {o}, must be one of ['jsonl', 'squad'] \"", "\n", "if", "o", "==", "'jsonl'", ":", "\n", "            ", "p", "=", "args", ".", "output_file", "+", "'.unsupervised_qa.jsonl'", "\n", "", "else", ":", "\n", "            ", "p", "=", "args", ".", "output_file", "+", "'.squad.json'", "\n", "", "assert", "not", "os", ".", "path", ".", "exists", "(", "p", ")", ",", "f'Output file {p} already exists, terminating...'", "\n", "\n", "# check for downloaded models before allowing unmt", "\n", "", "def", "_assert_exists", "(", "path", ")", ":", "\n", "        ", "assert", "os", ".", "path", ".", "exists", "(", "path", ")", ",", "f\"Requested model could not be found at {path}, download it using `download_models.sh`\"", "\n", "\n", "", "if", "args", ".", "translation_method", "==", "'unmt'", ":", "\n", "        ", "if", "args", ".", "use_subclause_clozes", ":", "\n", "            ", "if", "args", ".", "use_wh_heuristic", ":", "\n", "                ", "_assert_exists", "(", "UNMT_MODEL_SUBCLAUSE_NE_WH_HEURISTIC", ")", "\n", "", "else", ":", "\n", "                ", "_assert_exists", "(", "UNMT_MODEL_SUBCLAUSE_NE", ")", "\n", "", "", "elif", "args", ".", "use_named_entity_clozes", ":", "\n", "            ", "_assert_exists", "(", "UNMT_MODEL_SENTENCE_NE", ")", "\n", "", "else", ":", "\n", "            ", "_assert_exists", "(", "UNMT_MODEL_SENTENCE_NP", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.generate_synthetic_qa_data.get_questions_for_clozes": [[61, 80], ["attr.evolve", "attr.evolve", "unmt_translation.get_unmt_questions_for_clozes", "Exception", "baseline_translators.identity_translation", "baseline_translators.noisy_cloze_translation"], "function", ["home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.unmt_translation.get_unmt_questions_for_clozes", "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.baseline_translators.identity_translation", "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.baseline_translators.noisy_cloze_translation"], ["", "", "", "def", "get_questions_for_clozes", "(", "clozes", ",", "\n", "subclause_clozes", ",", "\n", "ne_answers", ",", "\n", "wh_heuristic", ",", "\n", "translation_method", ")", ":", "\n", "\n", "    ", "if", "translation_method", "==", "'identity'", ":", "\n", "        ", "clozes_with_questions", "=", "[", "attr", ".", "evolve", "(", "c", ",", "question_text", "=", "identity_translation", "(", "c", ",", "wh_heuristic", ")", ")", "for", "c", "in", "clozes", "]", "\n", "\n", "", "elif", "translation_method", "==", "'noisy_cloze'", ":", "\n", "        ", "clozes_with_questions", "=", "[", "attr", ".", "evolve", "(", "c", ",", "question_text", "=", "noisy_cloze_translation", "(", "c", ",", "wh_heuristic", ")", ")", "for", "c", "in", "clozes", "]", "\n", "\n", "", "elif", "translation_method", "==", "'unmt'", ":", "\n", "        ", "clozes_with_questions", "=", "get_unmt_questions_for_clozes", "(", "\n", "clozes", ",", "subclause_clozes", ",", "ne_answers", ",", "wh_heuristic", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "f'Unrecognised translation type: {translation_method}'", ")", "\n", "\n", "", "return", "clozes_with_questions", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.generate_synthetic_qa_data.generate_synthetic_training_data": [[82, 140], ["generate_synthetic_qa_data._check_args", "print", "print", "print", "print", "print", "print", "generate_synthetic_qa_data.get_questions_for_clozes", "print", "print", "print", "args.output_file_formats.split", "print", "print", "print", "open", "list", "constituency_parsing.get_constituency_parsed_clozes", "parsers_and_writers.parse_paragraphs_from_jsonl", "parsers_and_writers.parse_paragraphs_from_txt", "generate_clozes.generate_clozes_from_paragraph", "generate_clozes.is_appropriate_squad_datapoint", "print", "len", "constituency_parsing.shorten_cloze", "len", "open", "parsers_and_writers.dump_clozes", "print", "open", "parsers_and_writers.clozes2squadformat", "len", "len"], "function", ["home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.generate_synthetic_qa_data._check_args", "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.generate_synthetic_qa_data.get_questions_for_clozes", "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.constituency_parsing.get_constituency_parsed_clozes", "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.parsers_and_writers.parse_paragraphs_from_jsonl", "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.parsers_and_writers.parse_paragraphs_from_txt", "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.generate_clozes.generate_clozes_from_paragraph", "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.generate_clozes.is_appropriate_squad_datapoint", "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.constituency_parsing.shorten_cloze", "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.parsers_and_writers.dump_clozes", "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.parsers_and_writers.clozes2squadformat"], ["", "def", "generate_synthetic_training_data", "(", "args", ")", ":", "\n", "    ", "_check_args", "(", "args", ")", "\n", "\n", "with", "open", "(", "args", ".", "input_file", ")", "as", "f", ":", "\n", "        ", "if", "args", ".", "input_file_format", "==", "'jsonl'", ":", "\n", "            ", "paragraphs", "=", "parse_paragraphs_from_jsonl", "(", "f", ")", "\n", "", "else", ":", "\n", "            ", "paragraphs", "=", "parse_paragraphs_from_txt", "(", "f", ")", "\n", "", "paragraphs", "=", "list", "(", "paragraphs", ")", "\n", "\n", "", "print", "(", "'='", "*", "50", ")", "\n", "print", "(", "f'Parsed {len(paragraphs)} paragraphs from {args.input_file}'", ")", "\n", "print", "(", "'='", "*", "50", ")", "\n", "\n", "# Create clozes:", "\n", "answer_generator", "=", "ne_answer_gen", "if", "args", ".", "use_named_entity_clozes", "else", "np_answer_gen", "\n", "clozes", "=", "[", "c", "for", "p", "in", "paragraphs", "for", "c", "in", "generate_clozes_from_paragraph", "(", "p", ",", "answer_generator", ")", "]", "\n", "\n", "if", "args", ".", "use_subclause_clozes", ":", "\n", "        ", "syntax_clozes", "=", "get_constituency_parsed_clozes", "(", "clozes", ")", "\n", "clozes", "=", "[", "short_cloze", "for", "cloze", "in", "syntax_clozes", "for", "short_cloze", "in", "shorten_cloze", "(", "cloze", ")", "]", "\n", "#clozes = list(get_constituency_parsed_clozes(clozes))", "\n", "", "print", "(", "'='", "*", "50", ")", "\n", "print", "(", "f'{len(clozes)} Cloze questions extracted for Translation'", ")", "\n", "print", "(", "'='", "*", "50", ")", "\n", "# translate clozes to questions", "\n", "clozes_with_questions", "=", "get_questions_for_clozes", "(", "\n", "clozes", ",", "\n", "args", ".", "use_subclause_clozes", ",", "\n", "args", ".", "use_named_entity_clozes", ",", "\n", "args", ".", "use_wh_heuristic", ",", "\n", "args", ".", "translation_method", "\n", ")", "\n", "\n", "# filter generations", "\n", "clozes_with_questions", "=", "[", "\n", "c", "for", "c", "in", "clozes_with_questions", "\n", "if", "is_appropriate_squad_datapoint", "(", "c", ".", "question_text", ",", "c", ".", "answer_text", ",", "c", ".", "paragraph", ".", "text", ")", "\n", "]", "\n", "\n", "# Dump the synthetic training data", "\n", "print", "(", "'='", "*", "50", ")", "\n", "print", "(", "'Dumping results'", ")", "\n", "print", "(", "'='", "*", "50", ")", "\n", "for", "o", "in", "args", ".", "output_file_formats", ".", "split", "(", "','", ")", ":", "\n", "        ", "if", "o", "==", "'jsonl'", ":", "\n", "            ", "with", "open", "(", "args", ".", "output_file", "+", "'.unsupervised_qa.jsonl'", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "dump_clozes", "(", "clozes_with_questions", ",", "f", ")", "\n", "", "print", "(", "f\"Exported {len(clozes_with_questions)} instances to {args.output_file + '.unsupervised_qa.jsonl'}\"", ")", "\n", "\n", "", "elif", "o", "==", "'squad'", ":", "\n", "            ", "with", "open", "(", "args", ".", "output_file", "+", "'.squad.json'", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "clozes2squadformat", "(", "clozes_with_questions", ",", "f", ")", "\n", "", "print", "(", "f\"Exported {len(clozes_with_questions)} instances to {args.output_file + '.squad.json'}\"", ")", "\n", "\n", "", "", "print", "(", "'='", "*", "50", ")", "\n", "print", "(", "'Complete'", ")", "\n", "print", "(", "'='", "*", "50", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.unmt_translation._tokenize_file": [[29, 34], ["os.path.join", "os.path.join", "subprocess.check_call"], "function", ["None"], ["def", "_tokenize_file", "(", "input_path", ",", "output_path", ")", ":", "\n", "    ", "tokenizer", "=", "os", ".", "path", ".", "join", "(", "MOSES_DIR", ",", "'scripts'", ",", "'tokenizer'", ",", "'tokenizer.perl'", ")", "\n", "norm", "=", "os", ".", "path", ".", "join", "(", "MOSES_DIR", ",", "'scripts'", ",", "'tokenizer'", ",", "'normalize-punctuation.perl'", ")", "\n", "cmd", "=", "f'cat {input_path} | {norm} -l en | {tokenizer} -l en -no-escape -threads {N_THREADS_PREPRO} > {output_path}'", "\n", "subprocess", ".", "check_call", "(", "cmd", ",", "shell", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.unmt_translation._apply_bpe": [[36, 40], ["os.path.join", "subprocess.check_call"], "function", ["None"], ["", "def", "_apply_bpe", "(", "input_path", ",", "output_path", ",", "bpe_codes_path", ",", "vocab_path", ")", ":", "\n", "    ", "fast_bpe", "=", "os", ".", "path", ".", "join", "(", "FASTBPE_DIR", ",", "'fast'", ")", "\n", "cmd", "=", "f'{fast_bpe} applybpe {output_path} {input_path} {bpe_codes_path} {vocab_path}'", "\n", "subprocess", ".", "check_call", "(", "cmd", ",", "shell", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.unmt_translation._binarize_data": [[42, 46], ["os.path.join", "subprocess.check_call"], "function", ["None"], ["", "def", "_binarize_data", "(", "vocab_path", ",", "input_path", ")", ":", "\n", "    ", "prepro", "=", "os", ".", "path", ".", "join", "(", "PATH_TO_UNMT", ",", "'preprocess.py'", ")", "\n", "cmd", "=", "f'{prepro} {vocab_path} {input_path}'", "\n", "subprocess", ".", "check_call", "(", "cmd", ",", "shell", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.unmt_translation._dump_clozes_for_translation": [[48, 60], ["open", "cloze.cloze_text.replace", "fobj.write", "fobj.write", "unmt_translation._dump_clozes_for_translation._wh_heurisistic"], "function", ["None"], ["", "def", "_dump_clozes_for_translation", "(", "clozes", ",", "dump_path", ",", "wh_heuristic", ")", ":", "\n", "\n", "    ", "def", "_wh_heurisistic", "(", "cloze", ")", ":", "\n", "        ", "cloze_mask", "=", "CLOZE_MASKS", "[", "cloze", ".", "answer_type", "]", "\n", "cloze_text", "=", "cloze_mask", "+", "' '", "+", "cloze", ".", "cloze_text", ".", "replace", "(", "cloze_mask", ",", "'MASK'", ")", "\n", "return", "cloze_text", "\n", "\n", "", "with", "open", "(", "dump_path", ",", "'w'", ")", "as", "fobj", ":", "\n", "        ", "for", "c", "in", "clozes", ":", "\n", "            ", "cloze_text", "=", "_wh_heurisistic", "(", "c", ")", "if", "wh_heuristic", "else", "c", ".", "cloze_text", "\n", "fobj", ".", "write", "(", "cloze_text", ")", "\n", "fobj", ".", "write", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.unmt_translation.preprocessing": [[62, 73], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "unmt_translation._dump_clozes_for_translation", "unmt_translation._tokenize_file", "unmt_translation._apply_bpe", "unmt_translation._binarize_data"], "function", ["home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.unmt_translation._dump_clozes_for_translation", "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.unmt_translation._tokenize_file", "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.unmt_translation._apply_bpe", "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.unmt_translation._binarize_data"], ["", "", "", "def", "preprocessing", "(", "clozes", ",", "directory", ",", "vocab_path", ",", "bpe_codes_path", ",", "wh_heuristic", ")", ":", "\n", "    ", "raw_cloze_file", "=", "os", ".", "path", ".", "join", "(", "directory", ",", "'dev.cloze'", ")", "\n", "tok_cloze_file", "=", "os", ".", "path", ".", "join", "(", "directory", ",", "'dev.cloze.tok'", ")", "\n", "bpe_cloze_file", "=", "os", ".", "path", ".", "join", "(", "directory", ",", "'dev.cloze.tok.bpe'", ")", "\n", "binarized_cloze_file", "=", "os", ".", "path", ".", "join", "(", "directory", ",", "'dev.cloze.tok.bpe.pth'", ")", "\n", "\n", "_dump_clozes_for_translation", "(", "clozes", ",", "raw_cloze_file", ",", "wh_heuristic", ")", "\n", "_tokenize_file", "(", "raw_cloze_file", ",", "tok_cloze_file", ")", "\n", "_apply_bpe", "(", "tok_cloze_file", ",", "bpe_cloze_file", ",", "bpe_codes_path", ",", "vocab_path", ")", "\n", "_binarize_data", "(", "vocab_path", ",", "bpe_cloze_file", ")", "\n", "return", "binarized_cloze_file", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.unmt_translation._get_model_paths": [[75, 95], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "Exception"], "function", ["None"], ["", "def", "_get_model_paths", "(", "subclause_clozes", ",", "ne_answers", ",", "wh_heuristic", ")", ":", "\n", "    ", "if", "subclause_clozes", "and", "ne_answers", "and", "wh_heuristic", ":", "\n", "        ", "data_dir", "=", "UNMT_MODEL_SUBCLAUSE_NE_WH_HEURISTIC", "\n", "model_dir", "=", "UNMT_MODEL_SUBCLAUSE_NE_WH_HEURISTIC", "\n", "", "elif", "subclause_clozes", "and", "ne_answers", "and", "(", "not", "wh_heuristic", ")", ":", "\n", "        ", "data_dir", "=", "UNMT_MODEL_SUBCLAUSE_NE", "\n", "model_dir", "=", "UNMT_MODEL_SUBCLAUSE_NE", "\n", "", "elif", "(", "not", "subclause_clozes", ")", "and", "ne_answers", "and", "(", "not", "wh_heuristic", ")", ":", "\n", "        ", "data_dir", "=", "UNMT_MODEL_SENTENCE_NE", "\n", "model_dir", "=", "UNMT_MODEL_SENTENCE_NE", "\n", "", "elif", "(", "not", "subclause_clozes", ")", "and", "(", "not", "ne_answers", ")", "and", "(", "not", "wh_heuristic", ")", ":", "\n", "        ", "data_dir", "=", "UNMT_MODEL_SENTENCE_NP", "\n", "model_dir", "=", "UNMT_MODEL_SENTENCE_NP", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'This model configuration doesnt exist'", ")", "\n", "", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'periodic-20.pth'", ")", "\n", "vocab_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'vocab.cloze-question.60000'", ")", "\n", "bpe_codes_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'bpe_codes'", ")", "\n", "fasttext_vectors_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'all.cloze-question.60000.vec'", ")", "\n", "return", "checkpoint_path", ",", "vocab_path", ",", "bpe_codes_path", ",", "fasttext_vectors_path", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.unmt_translation._associate_questions_to_clozes": [[97, 115], ["open", "zip", "len", "len", "attr.evolve", "clozes_with_questions.append", "line.strip", "line.strip().split", "translations.append", "question_text.split", "line.strip", "unmt_translation._associate_questions_to_clozes._clean_wh_heurisistic"], "function", ["None"], ["", "def", "_associate_questions_to_clozes", "(", "clozes", ",", "translation_output_file", ",", "wh_heuristic", ")", ":", "\n", "\n", "    ", "def", "_clean_wh_heurisistic", "(", "question_text", ")", ":", "\n", "        ", "return", "' '", ".", "join", "(", "question_text", ".", "split", "(", "' '", ")", "[", "1", ":", "]", ")", "\n", "\n", "", "clozes_with_questions", "=", "[", "]", "\n", "translations", "=", "[", "]", "\n", "\n", "for", "line", "in", "open", "(", "translation_output_file", ")", ":", "\n", "        ", "if", "line", ".", "strip", "(", ")", "!=", "''", ":", "\n", "            ", "inp", ",", "outp", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "translations", ".", "append", "(", "_clean_wh_heurisistic", "(", "outp", ")", "if", "wh_heuristic", "else", "outp", ")", "\n", "\n", "", "", "assert", "len", "(", "clozes", ")", "==", "len", "(", "translations", ")", ",", "\"mismatch between number of clozes and translations\"", "\n", "for", "c", ",", "q", "in", "zip", "(", "clozes", ",", "translations", ")", ":", "\n", "        ", "c_with_q", "=", "attr", ".", "evolve", "(", "c", ",", "question_text", "=", "q", ")", "\n", "clozes_with_questions", ".", "append", "(", "c_with_q", ")", "\n", "", "return", "clozes_with_questions", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.unmt_translation.get_params": [[121, 224], ["unmt_translation.Params"], "function", ["None"], ["", "def", "get_params", "(", "\n", "exp_name", ",", "\n", "dump_path", ",", "\n", "cloze_train_path", ",", "\n", "question_train_path", ",", "\n", "cloze_test_path", ",", "\n", "fasttext_vectors_path", ",", "\n", "checkpoint_path", "\n", ")", ":", "\n", "    ", "params", "=", "Params", "(", ")", "\n", "params", ".", "exp_name", "=", "exp_name", "\n", "params", ".", "exp_id", "=", "\"\"", "\n", "params", ".", "dump_path", "=", "dump_path", "\n", "params", ".", "save_periodic", "=", "False", "\n", "params", ".", "seed", "=", "-", "1", "\n", "params", ".", "emb_dim", "=", "512", "\n", "params", ".", "n_enc_layers", "=", "4", "\n", "params", ".", "n_dec_layers", "=", "4", "\n", "params", ".", "hidden_dim", "=", "512", "\n", "params", ".", "lstm_proj", "=", "False", "\n", "params", ".", "dropout", "=", "0", "\n", "params", ".", "label_smoothing", "=", "0", "\n", "params", ".", "attention", "=", "True", "\n", "params", ".", "transformer", "=", "True", "\n", "params", ".", "transformer_ffn_emb_dim", "=", "2048", "\n", "params", ".", "attention_dropout", "=", "0", "\n", "params", ".", "relu_dropout", "=", "0", "\n", "params", ".", "encoder_attention_heads", "=", "8", "\n", "params", ".", "decoder_attention_heads", "=", "8", "\n", "params", ".", "encoder_normalize_before", "=", "False", "\n", "params", ".", "decoder_normalize_before", "=", "False", "\n", "params", ".", "share_lang_emb", "=", "True", "\n", "params", ".", "share_encdec_emb", "=", "False", "\n", "params", ".", "share_decpro_emb", "=", "False", "\n", "params", ".", "share_output_emb", "=", "True", "\n", "params", ".", "share_lstm_proj", "=", "False", "\n", "params", ".", "share_enc", "=", "3", "\n", "params", ".", "share_dec", "=", "3", "\n", "params", ".", "word_shuffle", "=", "0", "\n", "params", ".", "word_dropout", "=", "0", "\n", "params", ".", "word_blank", "=", "0", "\n", "params", ".", "dis_layers", "=", "3", "\n", "params", ".", "dis_hidden_dim", "=", "128", "\n", "params", ".", "dis_dropout", "=", "0", "\n", "params", ".", "dis_clip", "=", "0", "\n", "params", ".", "dis_smooth", "=", "0", "\n", "params", ".", "dis_input_proj", "=", "False", "\n", "params", ".", "langs", "=", "\"cloze,question\"", "\n", "params", ".", "vocab", "=", "\"\"", "\n", "params", ".", "vocab_min_count", "=", "0", "\n", "params", ".", "mono_dataset", "=", "f\"cloze:{cloze_train_path},,{cloze_test_path};question:{question_train_path},,\"", "\n", "params", ".", "para_dataset", "=", "\"\"", "\n", "params", ".", "back_dataset", "=", "\"\"", "\n", "params", ".", "n_mono", "=", "-", "1", "\n", "params", ".", "n_para", "=", "0", "\n", "params", ".", "n_back", "=", "0", "\n", "params", ".", "max_len", "=", "175", "\n", "params", ".", "max_vocab", "=", "-", "1", "\n", "params", ".", "n_dis", "=", "0", "\n", "params", ".", "mono_directions", "=", "'cloze,question'", "\n", "params", ".", "para_directions", "=", "\"\"", "\n", "params", ".", "pivo_directions", "=", "\"cloze-question-cloze,question-cloze-question\"", "\n", "params", ".", "back_directions", "=", "\"\"", "\n", "params", ".", "otf_sample", "=", "-", "1", "\n", "params", ".", "otf_backprop_temperature", "=", "-", "1", "\n", "params", ".", "otf_sync_params_every", "=", "1000", "\n", "params", ".", "otf_num_processes", "=", "0", "\n", "params", ".", "otf_update_enc", "=", "True", "\n", "params", ".", "otf_update_dec", "=", "True", "\n", "params", ".", "lm_before", "=", "0", "\n", "params", ".", "lm_after", "=", "0", "\n", "params", ".", "lm_share_enc", "=", "0", "\n", "params", ".", "lm_share_dec", "=", "0", "\n", "params", ".", "lm_share_emb", "=", "False", "\n", "params", ".", "lm_share_proj", "=", "False", "\n", "params", ".", "batch_size", "=", "UNMT_BATCH_SIZE", "\n", "params", ".", "group_by_size", "=", "True", "\n", "params", ".", "lambda_xe_mono", "=", "\"0:1,100000:0.1,300000:0\"", "\n", "params", ".", "lambda_xe_para", "=", "\"0\"", "\n", "params", ".", "lambda_xe_back", "=", "\"0\"", "\n", "params", ".", "lambda_xe_otfd", "=", "\"1\"", "\n", "params", ".", "lambda_xe_otfa", "=", "\"0\"", "\n", "params", ".", "lambda_dis", "=", "\"0\"", "\n", "params", ".", "lambda_lm", "=", "\"0\"", "\n", "params", ".", "enc_optimizer", "=", "\"adam,lr=0.0001\"", "\n", "params", ".", "dec_optimizer", "=", "\"enc_optimizer\"", "\n", "params", ".", "dis_optimizer", "=", "\"rmsprop,lr=0.0005\"", "\n", "params", ".", "clip_grad_norm", "=", "5", "\n", "params", ".", "epoch_size", "=", "10", "\n", "params", ".", "max_epoch", "=", "100000", "\n", "params", ".", "stopping_criterion", "=", "\"\"", "\n", "params", ".", "pretrained_emb", "=", "fasttext_vectors_path", "\n", "params", ".", "pretrained_out", "=", "True", "\n", "params", ".", "reload_model", "=", "checkpoint_path", "\n", "params", ".", "reload_enc", "=", "True", "\n", "params", ".", "reload_dec", "=", "True", "\n", "params", ".", "reload_dis", "=", "False", "\n", "params", ".", "freeze_enc_emb", "=", "False", "\n", "params", ".", "freeze_dec_emb", "=", "False", "\n", "params", ".", "eval_only", "=", "False", "\n", "params", ".", "beam_size", "=", "UNMT_BEAM_SIZE", "\n", "params", ".", "length_penalty", "=", "1.0", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.unmt_translation.convert_to_text": [[226, 248], ["batch.cpu().numpy.cpu().numpy", "lengths.cpu().numpy.cpu().numpy", "range", "range", "sentences.append", "batch.cpu().numpy.cpu", "lengths.cpu().numpy.cpu", "lengths.cpu().numpy.max", "words.append"], "function", ["None"], ["", "def", "convert_to_text", "(", "batch", ",", "lengths", ",", "dico", ",", "lang_id", ",", "params", ")", ":", "\n", "    ", "\"\"\"\n    Convert a batch of sentences to a list of text sentences.\n    \"\"\"", "\n", "batch", "=", "batch", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "lengths", "=", "lengths", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "bos_index", "=", "params", ".", "bos_index", "[", "lang_id", "]", "\n", "\n", "slen", ",", "bs", "=", "batch", ".", "shape", "\n", "assert", "lengths", ".", "max", "(", ")", "==", "slen", "and", "lengths", ".", "shape", "[", "0", "]", "==", "bs", "\n", "assert", "(", "batch", "[", "0", "]", "==", "bos_index", ")", ".", "sum", "(", ")", "==", "bs", "\n", "assert", "(", "batch", "==", "params", ".", "eos_index", ")", ".", "sum", "(", ")", "==", "bs", "\n", "sentences", "=", "[", "]", "\n", "\n", "for", "j", "in", "range", "(", "bs", ")", ":", "\n", "        ", "words", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "1", ",", "lengths", "[", "j", "]", ")", ":", "\n", "            ", "if", "batch", "[", "k", ",", "j", "]", "==", "params", ".", "eos_index", ":", "\n", "                ", "break", "\n", "", "words", ".", "append", "(", "dico", "[", "batch", "[", "k", ",", "j", "]", "]", ")", "\n", "", "sentences", ".", "append", "(", "\" \"", ".", "join", "(", "words", ")", ")", "\n", "", "return", "sentences", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.unmt_translation.perform_translation": [[250, 305], ["unmt_translation.get_params", "src.data.loader.check_all_data_params", "src.model.check_mt_model_params", "src.data.loader.load_data", "src.model.build_mt_model", "src.trainer.TrainerMT", "src.trainer.TrainerMT.reload_checkpoint", "src.trainer.TrainerMT.test_sharing", "src.evaluator.EvaluatorMT", "torch.no_grad", "src.evaluator.EvaluatorMT.encoder.eval", "src.evaluator.EvaluatorMT.decoder.eval", "enumerate", "os.path.join", "src.utils.restore_segmentation", "src.evaluator.EvaluatorMT.encoder", "src.evaluator.EvaluatorMT.decoder.generate", "unmt_translation.convert_to_text", "unmt_translation.convert_to_text", "zip", "open", "f.write", "dataset.get_iterator", "sent1.cuda"], "function", ["home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.unmt_translation.get_params", "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.unmt_translation.convert_to_text", "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.unmt_translation.convert_to_text"], ["", "def", "perform_translation", "(", "input_file_path", ",", "\n", "translation_directory", ",", "\n", "cloze_train_path", ",", "\n", "question_train_path", ",", "\n", "fasttext_vectors_path", ",", "\n", "checkpoint_path", "\n", ")", ":", "\n", "    ", "params", "=", "get_params", "(", "\n", "exp_name", "=", "'translation'", ",", "\n", "dump_path", "=", "translation_directory", ",", "\n", "cloze_train_path", "=", "cloze_train_path", ",", "\n", "question_train_path", "=", "question_train_path", ",", "\n", "cloze_test_path", "=", "input_file_path", ",", "\n", "fasttext_vectors_path", "=", "fasttext_vectors_path", ",", "\n", "checkpoint_path", "=", "checkpoint_path", ",", "\n", ")", "\n", "\n", "# check parameters", "\n", "assert", "params", ".", "exp_name", "\n", "check_all_data_params", "(", "params", ")", "\n", "check_mt_model_params", "(", "params", ")", "\n", "data", "=", "load_data", "(", "params", ",", "mono_only", "=", "True", ")", "\n", "encoder", ",", "decoder", ",", "discriminator", ",", "lm", "=", "build_mt_model", "(", "params", ",", "data", ")", "\n", "# initialize trainer / reload checkpoint / initialize evaluator", "\n", "trainer", "=", "TrainerMT", "(", "encoder", ",", "decoder", ",", "discriminator", ",", "lm", ",", "data", ",", "params", ")", "\n", "trainer", ".", "reload_checkpoint", "(", ")", "\n", "trainer", ".", "test_sharing", "(", ")", "# check parameters sharing", "\n", "evaluator", "=", "EvaluatorMT", "(", "trainer", ",", "data", ",", "params", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "lang1", ",", "lang2", "=", "'cloze'", ",", "'question'", "\n", "\n", "evaluator", ".", "encoder", ".", "eval", "(", ")", "\n", "evaluator", ".", "decoder", ".", "eval", "(", ")", "\n", "lang1_id", "=", "evaluator", ".", "params", ".", "lang2id", "[", "lang1", "]", "\n", "lang2_id", "=", "evaluator", ".", "params", ".", "lang2id", "[", "lang2", "]", "\n", "\n", "translations", "=", "[", "]", "\n", "dataset", "=", "evaluator", ".", "data", "[", "'mono'", "]", "[", "lang1", "]", "[", "'test'", "]", "\n", "dataset", ".", "batch_size", "=", "params", ".", "batch_size", "\n", "\n", "for", "i", ",", "(", "sent1", ",", "len1", ")", "in", "enumerate", "(", "dataset", ".", "get_iterator", "(", "shuffle", "=", "False", ",", "group_by_size", "=", "False", ")", "(", ")", ")", ":", "\n", "            ", "encoded", "=", "evaluator", ".", "encoder", "(", "sent1", ".", "cuda", "(", ")", ",", "len1", ",", "lang1_id", ")", "\n", "sent2_", ",", "len2_", ",", "_", "=", "evaluator", ".", "decoder", ".", "generate", "(", "encoded", ",", "lang2_id", ")", "\n", "lang1_text", "=", "convert_to_text", "(", "sent1", ",", "len1", ",", "evaluator", ".", "dico", "[", "lang1", "]", ",", "lang1_id", ",", "evaluator", ".", "params", ")", "\n", "lang2_text", "=", "convert_to_text", "(", "sent2_", ",", "len2_", ",", "evaluator", ".", "dico", "[", "lang2", "]", ",", "lang2_id", ",", "evaluator", ".", "params", ")", "\n", "translations", "+=", "zip", "(", "lang1_text", ",", "lang2_text", ")", "\n", "\n", "# export sentences to hypothesis file and restore BPE segmentation", "\n", "", "out_name", "=", "os", ".", "path", ".", "join", "(", "translation_directory", ",", "'output_translations.txt'", ")", "\n", "with", "open", "(", "out_name", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "'\\n'", ".", "join", "(", "[", "'\\t'", ".", "join", "(", "st", ")", "for", "st", "in", "translations", "]", ")", "+", "'\\n'", ")", "\n", "", "restore_segmentation", "(", "out_name", ")", "\n", "\n", "", "return", "out_name", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.unmt_translation.get_unmt_questions_for_clozes": [[307, 328], ["unmt_translation._get_model_paths", "tempfile.TemporaryDirectory", "unmt_translation.preprocessing", "unmt_translation.perform_translation", "unmt_translation._associate_questions_to_clozes"], "function", ["home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.unmt_translation._get_model_paths", "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.unmt_translation.preprocessing", "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.unmt_translation.perform_translation", "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.unmt_translation._associate_questions_to_clozes"], ["", "def", "get_unmt_questions_for_clozes", "(", "clozes", ",", "\n", "subclause_clozes", ",", "\n", "ne_answers", ",", "\n", "wh_heuristic", ",", "\n", ")", ":", "\n", "    ", "checkpoint_path", ",", "vocab_path", ",", "bpe_codes_path", ",", "fasttext_vectors_path", "=", "_get_model_paths", "(", "subclause_clozes", ",", "ne_answers", ",", "wh_heuristic", ")", "\n", "\n", "with", "tempfile", ".", "TemporaryDirectory", "(", ")", "as", "tempdir", ":", "\n", "        ", "translation_input_path", "=", "preprocessing", "(", "clozes", ",", "tempdir", ",", "vocab_path", ",", "bpe_codes_path", ",", "wh_heuristic", ")", "\n", "translation_output_path", "=", "perform_translation", "(", "\n", "translation_input_path", ",", "\n", "tempdir", ",", "\n", "translation_input_path", ",", "\n", "translation_input_path", ",", "\n", "fasttext_vectors_path", ",", "\n", "checkpoint_path", "\n", ")", "\n", "clozes_with_questions", "=", "_associate_questions_to_clozes", "(", "clozes", ",", "translation_output_path", ",", "wh_heuristic", ")", "\n", "\n", "", "return", "clozes_with_questions", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.baseline_translators._tokenize": [[24, 26], ["nltk.word_tokenize"], "function", ["None"], ["", "def", "_tokenize", "(", "x", ")", ":", "\n", "    ", "return", "nltk", ".", "word_tokenize", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.baseline_translators._word_shuffle": [[28, 32], ["numpy.random.uniform", "numpy.argsort", "list", "numpy.arange", "numpy.array", "len", "len"], "function", ["None"], ["", "def", "_word_shuffle", "(", "tokens", ",", "noiser_params", ")", ":", "\n", "    ", "noise", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "noiser_params", ".", "word_shuffle", ",", "size", "=", "(", "len", "(", "tokens", ")", ",", ")", ")", "\n", "permutation", "=", "np", ".", "argsort", "(", "np", ".", "arange", "(", "len", "(", "tokens", ")", ")", "+", "noise", ")", "\n", "return", "list", "(", "np", ".", "array", "(", "tokens", ")", "[", "permutation", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.baseline_translators._word_dropout": [[34, 37], ["numpy.random.rand", "len", "enumerate"], "function", ["None"], ["", "def", "_word_dropout", "(", "tokens", ",", "noiser_params", ")", ":", "\n", "    ", "keep", "=", "np", ".", "random", ".", "rand", "(", "len", "(", "tokens", ")", ",", ")", ">=", "noiser_params", ".", "word_dropout", "\n", "return", "[", "w", "for", "i", ",", "w", "in", "enumerate", "(", "tokens", ")", "if", "keep", "[", "i", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.baseline_translators._word_blank": [[39, 42], ["numpy.random.rand", "len", "enumerate"], "function", ["None"], ["", "def", "_word_blank", "(", "tokens", ",", "noiser_params", ")", ":", "\n", "    ", "keep", "=", "np", ".", "random", ".", "rand", "(", "len", "(", "tokens", ")", ",", ")", ">=", "noiser_params", ".", "word_blank", "\n", "return", "[", "w", "if", "keep", "[", "i", "]", "else", "noiser_params", ".", "blank_word", "for", "i", ",", "w", "in", "enumerate", "(", "tokens", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.baseline_translators._add_noise": [[44, 49], ["baseline_translators._word_shuffle", "baseline_translators._word_dropout", "baseline_translators._word_blank"], "function", ["home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.baseline_translators._word_shuffle", "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.baseline_translators._word_dropout", "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.baseline_translators._word_blank"], ["", "def", "_add_noise", "(", "words", ",", "noiser_params", ")", ":", "\n", "    ", "words", "=", "_word_shuffle", "(", "words", ",", "noiser_params", ")", "\n", "words", "=", "_word_dropout", "(", "words", ",", "noiser_params", ")", "\n", "words", "=", "_word_blank", "(", "words", ",", "noiser_params", ")", "\n", "return", "words", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.baseline_translators._get_wh_word": [[51, 57], ["random.choice", "random.choice"], "function", ["None"], ["", "def", "_get_wh_word", "(", "cloze", ",", "wh_heuristic", ")", ":", "\n", "    ", "if", "wh_heuristic", ":", "\n", "        ", "repl", "=", "random", ".", "choice", "(", "HEURISTIC_CLOZE_TYPE_QUESTION_MAP", "[", "cloze", ".", "answer_type", "]", ")", "\n", "", "else", ":", "\n", "        ", "repl", "=", "random", ".", "choice", "(", "[", "'Who'", ",", "'What'", ",", "'When'", ",", "'Where'", ",", "'How'", "]", ")", "\n", "", "return", "repl", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.baseline_translators._add_wh": [[59, 62], ["baseline_translators._get_wh_word"], "function", ["home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.baseline_translators._get_wh_word"], ["", "def", "_add_wh", "(", "tokens", ",", "cloze", ",", "wh_heuristic", ")", ":", "\n", "    ", "wh", "=", "_get_wh_word", "(", "cloze", ",", "wh_heuristic", ")", "\n", "return", "[", "wh", "]", "+", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.baseline_translators._replace_mask": [[64, 67], ["len"], "function", ["None"], ["", "def", "_replace_mask", "(", "cloze", ",", "repl", ")", ":", "\n", "    ", "return", "cloze", ".", "source_text", "[", ":", "cloze", ".", "answer_start", "]", "+", "repl", "+", "cloze", ".", "source_text", "[", "\n", "cloze", ".", "answer_start", "+", "len", "(", "cloze", ".", "answer_text", ")", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.baseline_translators._add_q_mark_and_fix_spaces": [[69, 71], ["q.replace().rstrip", "q.replace"], "function", ["None"], ["", "def", "_add_q_mark_and_fix_spaces", "(", "q", ")", ":", "\n", "    ", "return", "q", ".", "replace", "(", "'  '", ",", "' '", ")", ".", "rstrip", "(", "' ,.'", ")", "+", "'?'", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.baseline_translators.noisy_cloze_translation": [[73, 78], ["baseline_translators._replace_mask", "baseline_translators._tokenize", "baseline_translators._add_noise", "baseline_translators._add_q_mark_and_fix_spaces", "baseline_translators.NoiserParams", "baseline_translators._add_wh"], "function", ["home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.baseline_translators._replace_mask", "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.baseline_translators._tokenize", "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.baseline_translators._add_noise", "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.baseline_translators._add_q_mark_and_fix_spaces", "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.baseline_translators._add_wh"], ["", "def", "noisy_cloze_translation", "(", "cloze", ",", "wh_heuristic", ")", ":", "\n", "    ", "cloze_no_mask", "=", "_replace_mask", "(", "cloze", ",", "' '", ")", "\n", "cloze_no_mask_tokens", "=", "_tokenize", "(", "cloze_no_mask", ")", "\n", "noisy_cloze_tokens", "=", "_add_noise", "(", "cloze_no_mask_tokens", ",", "noiser_params", "=", "NoiserParams", "(", ")", ")", "\n", "return", "_add_q_mark_and_fix_spaces", "(", "' '", ".", "join", "(", "_add_wh", "(", "noisy_cloze_tokens", ",", "cloze", ",", "wh_heuristic", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.baseline_translators.identity_translation": [[80, 84], ["baseline_translators._get_wh_word", "baseline_translators._replace_mask", "baseline_translators._add_q_mark_and_fix_spaces"], "function", ["home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.baseline_translators._get_wh_word", "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.baseline_translators._replace_mask", "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.baseline_translators._add_q_mark_and_fix_spaces"], ["", "def", "identity_translation", "(", "cloze", ",", "wh_heuristic", ")", ":", "\n", "    ", "repl", "=", "_get_wh_word", "(", "cloze", ",", "wh_heuristic", ")", "\n", "q", "=", "_replace_mask", "(", "cloze", ",", "repl", ")", "\n", "return", "_add_q_mark_and_fix_spaces", "(", "q", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.parsers_and_writers.clozes2squadformat": [[16, 30], ["all", "json.dump", "qas[].append", "data.items"], "function", ["None"], ["def", "clozes2squadformat", "(", "clozes", ",", "out_fobj", ")", ":", "\n", "    ", "assert", "all", "(", "[", "c", ".", "question_text", "is", "not", "None", "for", "c", "in", "clozes", "]", ")", ",", "'Translate these clozes firse, some dont have questions'", "\n", "data", "=", "{", "cloze", ".", "paragraph", ".", "paragraph_id", ":", "{", "'context'", ":", "cloze", ".", "paragraph", ".", "text", ",", "'qas'", ":", "[", "]", "}", "for", "cloze", "in", "clozes", "}", "\n", "for", "cloze", "in", "clozes", ":", "\n", "        ", "qas", "=", "data", "[", "cloze", ".", "paragraph", ".", "paragraph_id", "]", "\n", "qas", "[", "'qas'", "]", ".", "append", "(", "{", "\n", "'question'", ":", "cloze", ".", "question_text", ",", "'id'", ":", "cloze", ".", "cloze_id", ",", "\n", "'answers'", ":", "[", "{", "'text'", ":", "cloze", ".", "answer_text", ",", "'answer_start'", ":", "cloze", ".", "answer_start", "}", "]", "\n", "}", ")", "\n", "", "squad_dataset", "=", "{", "\n", "'version'", ":", "1.1", ",", "\n", "'data'", ":", "[", "{", "'title'", ":", "para_id", ",", "'paragraphs'", ":", "[", "payload", "]", "}", "for", "para_id", ",", "payload", "in", "data", ".", "items", "(", ")", "]", "\n", "}", "\n", "json", ".", "dump", "(", "squad_dataset", ",", "out_fobj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.parsers_and_writers._parse_attr_obj": [[32, 34], ["json.loads", "data_classes.Cloze", "data_classes.Paragraph"], "function", ["None"], ["", "def", "_parse_attr_obj", "(", "cls", ",", "serialized", ")", ":", "\n", "    ", "return", "cls", "(", "**", "json", ".", "loads", "(", "serialized", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.parsers_and_writers.dumps_attr_obj": [[36, 38], ["json.dumps", "attr.asdict"], "function", ["None"], ["", "def", "dumps_attr_obj", "(", "obj", ")", ":", "\n", "    ", "return", "json", ".", "dumps", "(", "attr", ".", "asdict", "(", "obj", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.parsers_and_writers.parse_clozes": [[40, 44], ["serialized.strip", "parsers_and_writers._parse_attr_obj"], "function", ["home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.parsers_and_writers._parse_attr_obj"], ["", "def", "parse_clozes", "(", "fobj", ")", ":", "\n", "    ", "for", "serialized", "in", "fobj", ":", "\n", "        ", "if", "serialized", ".", "strip", "(", "'\\n'", ")", "!=", "''", ":", "\n", "            ", "yield", "_parse_attr_obj", "(", "Cloze", ",", "serialized", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.parsers_and_writers.dump_clozes": [[46, 50], ["fobj.write", "fobj.write", "parsers_and_writers.dumps_attr_obj"], "function", ["home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.parsers_and_writers.dumps_attr_obj"], ["", "", "", "def", "dump_clozes", "(", "clozes", ",", "fobj", ")", ":", "\n", "    ", "for", "cloze", "in", "clozes", ":", "\n", "        ", "fobj", ".", "write", "(", "dumps_attr_obj", "(", "cloze", ")", ")", "\n", "fobj", ".", "write", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.parsers_and_writers._get_paragraph_id": [[52, 54], ["hashlib.sha1().hexdigest", "hashlib.sha1", "text.encode"], "function", ["None"], ["", "", "def", "_get_paragraph_id", "(", "text", ")", ":", "\n", "    ", "return", "hashlib", ".", "sha1", "(", "text", ".", "encode", "(", ")", ")", ".", "hexdigest", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.parsers_and_writers.parse_paragraphs_from_txt": [[56, 63], ["paragraph_text.strip", "data_classes.Paragraph", "parsers_and_writers._get_paragraph_id"], "function", ["home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.parsers_and_writers._get_paragraph_id"], ["", "def", "parse_paragraphs_from_txt", "(", "fobj", ")", ":", "\n", "    ", "for", "paragraph_text", "in", "fobj", ":", "\n", "        ", "para_text", "=", "paragraph_text", ".", "strip", "(", "'\\n'", ")", "\n", "if", "para_text", "!=", "''", ":", "\n", "           ", "yield", "Paragraph", "(", "\n", "paragraph_id", "=", "_get_paragraph_id", "(", "para_text", ")", ",", "\n", "text", "=", "para_text", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.parsers_and_writers.parse_paragraphs_from_jsonl": [[66, 70], ["serialized.strip", "parsers_and_writers._parse_attr_obj"], "function", ["home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.parsers_and_writers._parse_attr_obj"], ["", "", "", "def", "parse_paragraphs_from_jsonl", "(", "fobj", ")", ":", "\n", "    ", "for", "serialized", "in", "fobj", ":", "\n", "        ", "if", "serialized", ".", "strip", "(", "'\\n'", ")", "!=", "''", ":", "\n", "            ", "yield", "_parse_attr_obj", "(", "Paragraph", ",", "serialized", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.constituency_parsing._load_constituency_parser": [[21, 24], ["allennlp.models.archival.load_archive", "allennlp.predictors.Predictor.from_archive"], "function", ["None"], ["def", "_load_constituency_parser", "(", ")", ":", "\n", "    ", "archive", "=", "load_archive", "(", "CONSTITUENCY_MODEL", ",", "cuda_device", "=", "CONSTITUENCY_CUDA", ")", "\n", "return", "Predictor", ".", "from_archive", "(", "archive", ",", "'constituency-parser'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.constituency_parsing.get_constituency_parsed_clozes": [[26, 38], ["range", "constituency_parsing._load_constituency_parser", "len", "tqdm.tqdm", "_load_constituency_parser.predict_batch_json", "zip", "constituency_parsing._get_root_type", "attr.evolve"], "function", ["home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.constituency_parsing._load_constituency_parser", "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.constituency_parsing._get_root_type"], ["", "def", "get_constituency_parsed_clozes", "(", "clozes", ",", "predictor", "=", "None", ",", "verbose", "=", "True", ",", "desc", "=", "'Running Constituency Parsing'", ")", ":", "\n", "    ", "if", "predictor", "is", "None", ":", "\n", "        ", "predictor", "=", "_load_constituency_parser", "(", ")", "\n", "", "jobs", "=", "range", "(", "0", ",", "len", "(", "clozes", ")", ",", "CONSTITUENCY_BATCH_SIZE", ")", "\n", "for", "i", "in", "tqdm", "(", "jobs", ",", "desc", "=", "desc", ",", "ncols", "=", "80", ")", "if", "verbose", "else", "jobs", ":", "\n", "        ", "input_batch", "=", "clozes", "[", "i", ":", "i", "+", "CONSTITUENCY_BATCH_SIZE", "]", "\n", "output_batch", "=", "predictor", ".", "predict_batch_json", "(", "[", "{", "'sentence'", ":", "c", ".", "source_text", "}", "for", "c", "in", "input_batch", "]", ")", "\n", "for", "c", ",", "t", "in", "zip", "(", "input_batch", ",", "output_batch", ")", ":", "\n", "            ", "root", "=", "_get_root_type", "(", "t", "[", "'trees'", "]", ")", "\n", "if", "root", "in", "CLOZE_SYNTACTIC_TYPES", ":", "\n", "                ", "c_with_parse", "=", "attr", ".", "evolve", "(", "c", ",", "constituency_parse", "=", "t", "[", "'trees'", "]", ",", "root_label", "=", "root", ")", "\n", "yield", "c_with_parse", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.constituency_parsing._get_root_type": [[40, 47], ["nltk.Tree.fromstring", "Tree.fromstring.label"], "function", ["None"], ["", "", "", "", "def", "_get_root_type", "(", "tree", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "t", "=", "Tree", ".", "fromstring", "(", "tree", ")", "\n", "label", "=", "t", ".", "label", "(", ")", "\n", "", "except", ":", "\n", "        ", "label", "=", "'FAIL'", "\n", "", "return", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.constituency_parsing._get_sub_clauses": [[49, 56], ["root.subtrees", "current.label", "subtexts.append", "current.leaves"], "function", ["None"], ["", "def", "_get_sub_clauses", "(", "root", ",", "clause_labels", ")", ":", "\n", "    ", "\"\"\"Simplify a sentence by getting clauses\"\"\"", "\n", "subtexts", "=", "[", "]", "\n", "for", "current", "in", "root", ".", "subtrees", "(", ")", ":", "\n", "        ", "if", "current", ".", "label", "(", ")", "in", "clause_labels", ":", "\n", "            ", "subtexts", ".", "append", "(", "' '", ".", "join", "(", "current", ".", "leaves", "(", ")", ")", ")", "\n", "", "", "return", "subtexts", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.constituency_parsing._tokens2spans": [[58, 68], ["zip", "spans.append", "sentence[].index", "len"], "function", ["None"], ["", "def", "_tokens2spans", "(", "sentence", ",", "tokens", ")", ":", "\n", "    ", "off", "=", "0", "\n", "spans", "=", "[", "]", "\n", "for", "t", "in", "tokens", ":", "\n", "        ", "span_start", "=", "sentence", "[", "off", ":", "]", ".", "index", "(", "t", ")", "+", "off", "\n", "spans", ".", "append", "(", "(", "span_start", ",", "span_start", "+", "len", "(", "t", ")", ")", ")", "\n", "off", "=", "spans", "[", "-", "1", "]", "[", "-", "1", "]", "\n", "", "for", "t", ",", "(", "s", ",", "e", ")", "in", "zip", "(", "tokens", ",", "spans", ")", ":", "\n", "        ", "assert", "sentence", "[", "s", ":", "e", "]", "==", "t", "\n", "", "return", "spans", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.constituency_parsing._subseq2sentence": [[70, 76], ["subsequence.split", "Exception", "enumerate", "len", "len"], "function", ["None"], ["", "def", "_subseq2sentence", "(", "sentence", ",", "tokens", ",", "token_spans", ",", "subsequence", ")", ":", "\n", "    ", "subsequence_tokens", "=", "subsequence", ".", "split", "(", "' '", ")", "\n", "for", "ind", "in", "(", "i", "for", "i", ",", "t", "in", "enumerate", "(", "tokens", ")", "if", "t", "==", "subsequence_tokens", "[", "0", "]", ")", ":", "\n", "        ", "if", "tokens", "[", "ind", ":", "ind", "+", "len", "(", "subsequence_tokens", ")", "]", "==", "subsequence_tokens", ":", "\n", "            ", "return", "sentence", "[", "token_spans", "[", "ind", "]", "[", "0", "]", ":", "token_spans", "[", "ind", "+", "len", "(", "subsequence_tokens", ")", "-", "1", "]", "[", "1", "]", "]", "\n", "", "", "raise", "Exception", "(", "'Failed to repair sentence from token list'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.constituency_parsing.get_sub_clauses": [[78, 85], ["nltk.Tree.fromstring", "constituency_parsing._get_sub_clauses", "Tree.fromstring.leaves", "constituency_parsing._tokens2spans", "constituency_parsing._subseq2sentence"], "function", ["home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.constituency_parsing._get_sub_clauses", "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.constituency_parsing._tokens2spans", "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.constituency_parsing._subseq2sentence"], ["", "def", "get_sub_clauses", "(", "sentence", ",", "tree", ")", ":", "\n", "    ", "clause_labels", "=", "CLOZE_SYNTACTIC_TYPES", "\n", "root", "=", "Tree", ".", "fromstring", "(", "tree", ")", "\n", "subs", "=", "_get_sub_clauses", "(", "root", ",", "clause_labels", ")", "\n", "tokens", "=", "root", ".", "leaves", "(", ")", "\n", "token_spans", "=", "_tokens2spans", "(", "sentence", ",", "tokens", ")", "\n", "return", "[", "_subseq2sentence", "(", "sentence", ",", "tokens", ",", "token_spans", ",", "sub", ")", "for", "sub", "in", "subs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.constituency_parsing.shorten_cloze": [[87, 118], ["constituency_parsing.get_sub_clauses", "sorted", "print", "cloze.source_text.index", "len", "len", "simple_clozes.append", "len", "data_classes.Cloze", "generate_clozes.mask_answer", "len"], "function", ["home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.constituency_parsing.get_sub_clauses", "home.repos.pwc.inspect_result.facebookresearch_UnsupervisedQA.unsupervisedqa.generate_clozes.mask_answer"], ["", "def", "shorten_cloze", "(", "cloze", ")", ":", "\n", "    ", "\"\"\"Return a list of shortened cloze questions from the original cloze question\"\"\"", "\n", "simple_clozes", "=", "[", "]", "\n", "try", ":", "\n", "        ", "subs", "=", "get_sub_clauses", "(", "cloze", ".", "source_text", ",", "cloze", ".", "constituency_parse", ")", "\n", "subs", "=", "sorted", "(", "subs", ")", "\n", "for", "sub", "in", "subs", ":", "\n", "            ", "if", "sub", "!=", "cloze", ".", "source_text", ":", "\n", "                ", "sub_start_index", "=", "cloze", ".", "source_text", ".", "index", "(", "sub", ")", "\n", "sub_answer_start_index", "=", "cloze", ".", "answer_start", "-", "sub_start_index", "\n", "good_start", "=", "0", "<=", "sub_answer_start_index", "<=", "len", "(", "sub", ")", "\n", "good_end", "=", "0", "<=", "sub_answer_start_index", "+", "len", "(", "cloze", ".", "answer_text", ")", "<=", "len", "(", "sub", ")", "\n", "if", "good_start", "and", "good_end", ":", "\n", "                    ", "simple_clozes", ".", "append", "(", "\n", "Cloze", "(", "\n", "cloze_id", "=", "cloze", ".", "cloze_id", "+", "f'_{len(simple_clozes)}'", ",", "\n", "paragraph", "=", "cloze", ".", "paragraph", ",", "\n", "source_text", "=", "sub", ",", "\n", "source_start", "=", "cloze", ".", "source_start", "+", "sub_start_index", ",", "\n", "cloze_text", "=", "mask_answer", "(", "sub", ",", "cloze", ".", "answer_text", ",", "sub_answer_start_index", ",", "cloze", ".", "answer_type", ")", ",", "\n", "answer_text", "=", "cloze", ".", "answer_text", ",", "\n", "answer_start", "=", "sub_answer_start_index", ",", "\n", "constituency_parse", "=", "None", ",", "\n", "root_label", "=", "None", ",", "\n", "answer_type", "=", "cloze", ".", "answer_type", ",", "\n", "question_text", "=", "None", "\n", ")", "\n", ")", "\n", "", "", "", "", "except", ":", "\n", "        ", "print", "(", "f'Failed to parse cloze: ID {cloze.cloze_id} Text: {cloze.source_text}'", ")", "\n", "", "return", "simple_clozes", "\n", "", ""]]}