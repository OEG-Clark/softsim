{"home.repos.pwc.inspect_result.hongyouc_fedbe.None.resnet.NormedLinear.__init__": [[39, 43], ["torch.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "resnet.NormedLinear.weight.data.uniform_().renorm_().mul_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "resnet.NormedLinear.weight.data.uniform_().renorm_", "resnet.NormedLinear.weight.data.uniform_"], "methods", ["home.repos.pwc.inspect_result.hongyouc_fedbe.models.Nets.CNNCifar.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ")", ":", "\n", "        ", "super", "(", "NormedLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "in_features", ",", "out_features", ")", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "1", ",", "1", ")", ".", "renorm_", "(", "2", ",", "1", ",", "1e-5", ")", ".", "mul_", "(", "1e5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.None.resnet.NormedLinear.forward": [[44, 47], ["torch.normalize().mm", "torch.normalize().mm", "torch.normalize().mm", "torch.normalize().mm", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "normalize", "(", "x", ",", "dim", "=", "1", ")", ".", "mm", "(", "F", ".", "normalize", "(", "self", ".", "weight", ",", "dim", "=", "0", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.None.resnet.BasicBlock.__init__": [[51, 69], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "LambdaLayer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hongyouc_fedbe.models.Nets.CNNCifar.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ",", "option", "=", "'A'", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "if", "option", "==", "'A'", ":", "\n", "                ", "\"\"\"\n                For CIFAR10 ResNet paper uses option A.\n                \"\"\"", "\n", "self", ".", "shortcut", "=", "LambdaLayer", "(", "lambda", "x", ":", "\n", "F", ".", "pad", "(", "x", "[", ":", ",", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", ",", "(", "0", ",", "0", ",", "0", ",", "0", ",", "planes", "//", "4", ",", "planes", "//", "4", ")", ",", "\"constant\"", ",", "0", ")", ")", "\n", "", "elif", "option", "==", "'B'", ":", "\n", "                ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.None.resnet.BasicBlock.forward": [[71, 77], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn2", "resnet.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn1", "resnet.BasicBlock.conv2", "resnet.BasicBlock.conv1"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.None.resnet.ResNet_s.__init__": [[81, 92], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.ResNet_s._make_layer", "resnet.ResNet_s._make_layer", "resnet.ResNet_s._make_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "resnet.ResNet_s.apply"], "methods", ["home.repos.pwc.inspect_result.hongyouc_fedbe.models.Nets.CNNCifar.__init__", "home.repos.pwc.inspect_result.hongyouc_fedbe.None.resnet.ResNet_s._make_layer", "home.repos.pwc.inspect_result.hongyouc_fedbe.None.resnet.ResNet_s._make_layer", "home.repos.pwc.inspect_result.hongyouc_fedbe.None.resnet.ResNet_s._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ",", "use_norm", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResNet_s", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "16", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "16", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "64", ",", "num_classes", ")", "\n", "self", ".", "apply", "(", "_weights_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.None.resnet.ResNet_s._make_layer": [[95, 103], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.None.resnet.ResNet_s.forward": [[104, 115], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.ResNet_s.layer1", "resnet.ResNet_s.layer2", "resnet.ResNet_s.layer3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet.ResNet_s.view", "resnet.ResNet_s.linear", "resnet.ResNet_s.bn1", "resnet.ResNet_s.size", "resnet.ResNet_s.conv1", "resnet.ResNet_s.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "out", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.None.resnet._weights_init": [[32, 36], ["isinstance", "isinstance", "torch.kaiming_normal_"], "function", ["None"], ["def", "_weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.None.resnet.resnet32": [[116, 118], ["resnet.ResNet_s"], "function", ["None"], ["", "", "def", "resnet32", "(", "num_classes", "=", "10", ",", "use_norm", "=", "False", ")", ":", "\n", "    ", "return", "ResNet_s", "(", "BasicBlock", ",", "[", "5", ",", "5", ",", "5", "]", ",", "num_classes", "=", "num_classes", ",", "use_norm", "=", "use_norm", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.hongyouc_fedbe.None.swag.SWAG_client.__init__": [[12, 19], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "base_model", ",", "lr", "=", "0.01", ",", "max_num_models", "=", "25", ",", "var_clamp", "=", "1e-5", ",", "concentrate_num", "=", "1", ")", ":", "\n", "        ", "self", ".", "base_model", "=", "base_model", "\n", "self", ".", "max_num_models", "=", "max_num_models", "\n", "self", ".", "var_clamp", "=", "var_clamp", "\n", "self", ".", "concentrate_num", "=", "concentrate_num", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "lr", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.None.swag.SWAG_client.compute_var": [[20, 27], ["mean.keys", "torch.clamp"], "methods", ["None"], ["", "def", "compute_var", "(", "self", ",", "mean", ",", "sq_mean", ")", ":", "\n", "        ", "var_dict", "=", "{", "}", "\n", "for", "k", "in", "mean", ".", "keys", "(", ")", ":", "\n", "          ", "var", "=", "torch", ".", "clamp", "(", "sq_mean", "[", "k", "]", "-", "(", "mean", "[", "k", "]", "**", "2", ")", ",", "self", ".", "var_clamp", ")", "\n", "var_dict", "[", "k", "]", "=", "var", "\n", "\n", "", "return", "var_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.None.swag.SWAG_client.construct_models": [[28, 49], ["swag.SWAG_client.compute_var", "range", "w_avg.keys", "torch.zeros", "w_avg.keys", "w.size", "w_avg.items", "torch.randn_like", "swag.SWAG_client.base_model[].cpu", "float", "torch.sqrt"], "methods", ["home.repos.pwc.inspect_result.hongyouc_fedbe.None.swag.SWAG_server.compute_var"], ["", "def", "construct_models", "(", "self", ",", "w", ")", ":", "\n", "      ", "(", "w_avg", ",", "w_sq_avg", ",", "w_norm", ")", "=", "w", "\n", "self", ".", "w_var", "=", "self", ".", "compute_var", "(", "w_avg", ",", "w_sq_avg", ")", "\n", "\n", "mean_grad", "=", "{", "k", ":", "torch", ".", "zeros", "(", "w", ".", "size", "(", ")", ")", "for", "k", ",", "w", "in", "w_avg", ".", "items", "(", ")", "}", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "concentrate_num", ")", ":", "\n", "        ", "for", "k", "in", "w_avg", ".", "keys", "(", ")", ":", "\n", "          ", "mean", "=", "w_avg", "[", "k", "]", "\n", "var", "=", "self", ".", "w_var", "[", "k", "]", "\n", "\n", "eps", "=", "torch", ".", "randn_like", "(", "mean", ")", "\n", "sample_grad", "=", "mean", "+", "torch", ".", "sqrt", "(", "var", ")", "*", "eps", "*", "self", ".", "args", ".", "var_scale", "\n", "mean_grad", "[", "k", "]", "+=", "sample_grad", "\n", "\n", "", "", "for", "k", "in", "w_avg", ".", "keys", "(", ")", ":", "\n", "        ", "grad_length", "=", "w_norm", "[", "k", "]", "/", "float", "(", "self", ".", "concentrate_num", ")", "*", "self", ".", "args", ".", "client_stepsize", "\n", "mean_grad", "[", "k", "]", "=", "mean_grad", "[", "k", "]", "*", "grad_length", "+", "self", ".", "base_model", "[", "k", "]", ".", "cpu", "(", ")", "\n", "\n", "", "self", ".", "w_avg", "=", "w_avg", "\n", "return", "mean_grad", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.None.swag.SWAG_server.__init__": [[51, 59], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "base_model", ",", "avg_model", "=", "None", ",", "max_num_models", "=", "25", ",", "var_clamp", "=", "1e-5", ",", "concentrate_num", "=", "1", ",", "size_arr", "=", "None", ")", ":", "\n", "        ", "self", ".", "base_model", "=", "base_model", "\n", "self", ".", "max_num_models", "=", "max_num_models", "\n", "self", ".", "var_clamp", "=", "var_clamp", "\n", "self", ".", "concentrate_num", "=", "concentrate_num", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "avg_model", "=", "avg_model", "\n", "self", ".", "size_arr", "=", "size_arr", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.None.swag.SWAG_server.compute_var": [[60, 67], ["mean.keys", "torch.clamp"], "methods", ["None"], ["", "def", "compute_var", "(", "self", ",", "mean", ",", "sq_mean", ")", ":", "\n", "        ", "var_dict", "=", "{", "}", "\n", "for", "k", "in", "mean", ".", "keys", "(", ")", ":", "\n", "          ", "var", "=", "torch", ".", "clamp", "(", "sq_mean", "[", "k", "]", "-", "mean", "[", "k", "]", "**", "2", ",", "self", ".", "var_clamp", ")", "\n", "var_dict", "[", "k", "]", "=", "var", "\n", "\n", "", "return", "var_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.None.swag.SWAG_server.compute_mean_sq": [[68, 97], ["teachers[].keys", "w_avg.keys", "torch.zeros", "torch.zeros", "range", "torch.div", "torch.div", "torch.div", "[].size", "[].size", "len", "torch.norm", "len", "len", "len", "[].cpu", "swag.SWAG_server.base_model[].cpu"], "methods", ["None"], ["", "def", "compute_mean_sq", "(", "self", ",", "teachers", ")", ":", "\n", "        ", "w_avg", "=", "{", "}", "\n", "w_sq_avg", "=", "{", "}", "\n", "w_norm", "=", "{", "}", "\n", "\n", "for", "k", "in", "teachers", "[", "0", "]", ".", "keys", "(", ")", ":", "\n", "          ", "if", "\"batches_tracked\"", "in", "k", ":", "continue", "\n", "w_avg", "[", "k", "]", "=", "torch", ".", "zeros", "(", "teachers", "[", "0", "]", "[", "k", "]", ".", "size", "(", ")", ")", "\n", "w_sq_avg", "[", "k", "]", "=", "torch", ".", "zeros", "(", "teachers", "[", "0", "]", "[", "k", "]", ".", "size", "(", ")", ")", "\n", "w_norm", "[", "k", "]", "=", "0.0", "\n", "\n", "", "for", "k", "in", "w_avg", ".", "keys", "(", ")", ":", "\n", "            ", "if", "\"batches_tracked\"", "in", "k", ":", "continue", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "teachers", ")", ")", ":", "\n", "              ", "grad", "=", "teachers", "[", "i", "]", "[", "k", "]", ".", "cpu", "(", ")", "-", "self", ".", "base_model", "[", "k", "]", ".", "cpu", "(", ")", "\n", "norm", "=", "torch", ".", "norm", "(", "grad", ",", "p", "=", "2", ")", "\n", "\n", "grad", "=", "grad", "/", "norm", "\n", "sq_grad", "=", "grad", "**", "2", "\n", "\n", "w_avg", "[", "k", "]", "+=", "grad", "\n", "w_sq_avg", "[", "k", "]", "+=", "sq_grad", "\n", "w_norm", "[", "k", "]", "+=", "norm", "\n", "\n", "", "w_avg", "[", "k", "]", "=", "torch", ".", "div", "(", "w_avg", "[", "k", "]", ",", "len", "(", "teachers", ")", ")", "\n", "w_sq_avg", "[", "k", "]", "=", "torch", ".", "div", "(", "w_sq_avg", "[", "k", "]", ",", "len", "(", "teachers", ")", ")", "\n", "w_norm", "[", "k", "]", "=", "torch", ".", "div", "(", "w_norm", "[", "k", "]", ",", "len", "(", "teachers", ")", ")", "\n", "\n", "", "return", "w_avg", ",", "w_sq_avg", ",", "w_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.None.swag.SWAG_server.construct_models": [[98, 144], ["swag.SWAG_server.compute_mean_sq", "swag.SWAG_server.compute_var", "copy.deepcopy", "range", "w_avg.keys", "w_avg.keys", "numpy.random.choice", "ts[].keys", "ts[].keys", "torch.clamp", "torch.randn_like", "swag.SWAG_server.base_model[].cpu", "torch.zeros", "enumerate", "numpy.random.dirichlet", "teachers[].keys", "teachers[].keys", "[].size", "numpy.repeat", "torch.zeros", "enumerate", "sum", "len", "[].size", "torch.sqrt"], "methods", ["home.repos.pwc.inspect_result.hongyouc_fedbe.None.swag.SWAG_server.compute_mean_sq", "home.repos.pwc.inspect_result.hongyouc_fedbe.None.swag.SWAG_server.compute_var"], ["", "def", "construct_models", "(", "self", ",", "teachers", ",", "mean", "=", "None", ",", "mode", "=", "\"dir\"", ")", ":", "\n", "      ", "if", "mode", "==", "\"gaussian\"", ":", "\n", "        ", "w_avg", ",", "w_sq_avg", ",", "w_norm", "=", "self", ".", "compute_mean_sq", "(", "teachers", ")", "\n", "w_var", "=", "self", ".", "compute_var", "(", "w_avg", ",", "w_sq_avg", ")", "\n", "\n", "mean_grad", "=", "copy", ".", "deepcopy", "(", "w_avg", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "concentrate_num", ")", ":", "\n", "          ", "for", "k", "in", "w_avg", ".", "keys", "(", ")", ":", "\n", "            ", "mean", "=", "w_avg", "[", "k", "]", "\n", "var", "=", "torch", ".", "clamp", "(", "w_var", "[", "k", "]", ",", "1e-6", ")", "\n", "\n", "eps", "=", "torch", ".", "randn_like", "(", "mean", ")", "\n", "sample_grad", "=", "mean", "+", "torch", ".", "sqrt", "(", "var", ")", "*", "eps", "*", "self", ".", "args", ".", "var_scale", "\n", "mean_grad", "[", "k", "]", "=", "(", "i", "*", "mean_grad", "[", "k", "]", "+", "sample_grad", ")", "/", "(", "i", "+", "1", ")", "\n", "\n", "", "", "for", "k", "in", "w_avg", ".", "keys", "(", ")", ":", "\n", "          ", "mean_grad", "[", "k", "]", "=", "mean_grad", "[", "k", "]", "*", "self", ".", "args", ".", "swag_stepsize", "*", "w_norm", "[", "k", "]", "+", "self", ".", "base_model", "[", "k", "]", ".", "cpu", "(", ")", "\n", "\n", "", "return", "mean_grad", "\n", "\n", "", "elif", "mode", "==", "\"random\"", ":", "\n", "        ", "num_t", "=", "3", "\n", "ts", "=", "np", ".", "random", ".", "choice", "(", "teachers", ",", "num_t", ",", "replace", "=", "False", ")", "\n", "mean_grad", "=", "{", "}", "\n", "for", "k", "in", "ts", "[", "0", "]", ".", "keys", "(", ")", ":", "\n", "          ", "mean_grad", "[", "k", "]", "=", "torch", ".", "zeros", "(", "ts", "[", "0", "]", "[", "k", "]", ".", "size", "(", ")", ")", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "ts", ")", ":", "\n", "            ", "mean_grad", "[", "k", "]", "+=", "t", "[", "k", "]", "\n", "\n", "", "", "for", "k", "in", "ts", "[", "0", "]", ".", "keys", "(", ")", ":", "\n", "          ", "mean_grad", "[", "k", "]", "/=", "num_t", "\n", "\n", "", "return", "mean_grad", "\n", "\n", "", "elif", "mode", "==", "\"dir\"", ":", "\n", "        ", "proportions", "=", "np", ".", "random", ".", "dirichlet", "(", "np", ".", "repeat", "(", "self", ".", "args", ".", "alpha", ",", "len", "(", "teachers", ")", ")", ")", "\n", "mean_grad", "=", "{", "}", "\n", "for", "k", "in", "teachers", "[", "0", "]", ".", "keys", "(", ")", ":", "\n", "          ", "mean_grad", "[", "k", "]", "=", "torch", ".", "zeros", "(", "teachers", "[", "0", "]", "[", "k", "]", ".", "size", "(", ")", ")", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "teachers", ")", ":", "\n", "            ", "mean_grad", "[", "k", "]", "+=", "t", "[", "k", "]", "*", "proportions", "[", "i", "]", "\n", "\n", "", "", "for", "k", "in", "teachers", "[", "0", "]", ".", "keys", "(", ")", ":", "\n", "          ", "mean_grad", "[", "k", "]", "/=", "sum", "(", "proportions", ")", "\n", "\n", "", "return", "mean_grad", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.utils.options.args_parser": [[7, 100], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "args_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "# federated arguments", "\n", "parser", ".", "add_argument", "(", "'--rounds'", ",", "type", "=", "int", ",", "default", "=", "40", ",", "help", "=", "\"rounds of training\"", ")", "\n", "parser", ".", "add_argument", "(", "'--num_users'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "\"number of users\"", ")", "\n", "parser", ".", "add_argument", "(", "'--num_data'", ",", "type", "=", "int", ",", "default", "=", "40000", ",", "help", "=", "\"number of data distributed to users\"", ")", "\n", "parser", ".", "add_argument", "(", "'--num_server_data'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "\"number of trans data to use in the server: -1 for using all - num_data in users.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--aug'", ",", "action", "=", "'store_true'", ",", "help", "=", "\"aug\"", ")", "\n", "parser", ".", "add_argument", "(", "'--ens'", ",", "action", "=", "'store_true'", ",", "help", "=", "\"ensemble\"", ")", "\n", "parser", ".", "add_argument", "(", "'--store_model'", ",", "action", "=", "'store_true'", ",", "help", "=", "\"store_model\"", ")", "\n", "parser", ".", "add_argument", "(", "'--frac'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "\"the fraction of clients\"", ")", "\n", "\n", "# Local train", "\n", "parser", ".", "add_argument", "(", "'--local_ep'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "\"the number of local epochs\"", ")", "\n", "parser", ".", "add_argument", "(", "'--local_bs'", ",", "type", "=", "int", ",", "default", "=", "40", ",", "help", "=", "\"local batch size\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "\"SGD momentum (default: 0.9)\"", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "help", "=", "\"learning rate\"", ")", "\n", "parser", ".", "add_argument", "(", "'--local_sch'", ",", "type", "=", "str", ",", "default", "=", "'step'", ",", "help", "=", "'step, adaptive'", ")", "\n", "parser", ".", "add_argument", "(", "'--adap_ep'", ",", "type", "=", "int", ",", "default", "=", "40", ",", "help", "=", "\"epochs for warm up training\"", ")", "\n", "parser", ".", "add_argument", "(", "'--local_loss'", ",", "type", "=", "str", ",", "default", "=", "'CE'", ",", "help", "=", "'CE'", ")", "\n", "parser", ".", "add_argument", "(", "'--server_sample_freq'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'o, resample'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "type", "=", "float", ",", "default", "=", "0.0005", ",", "help", "=", "\"weight_decay\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--num_layers'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"extra conv layer\"", ")", "\n", "parser", ".", "add_argument", "(", "'--use_SWA'", ",", "action", "=", "'store_true'", ",", "help", "=", "\"use_SWA\"", ")", "\n", "parser", ".", "add_argument", "(", "'--use_oracle'", ",", "action", "=", "'store_true'", ",", "help", "=", "\"use_oracle\"", ")", "\n", "parser", ".", "add_argument", "(", "'--dont_add_fedavg'", ",", "action", "=", "'store_true'", ",", "help", "=", "\"add_fedavg\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--log_dir'", ",", "type", "=", "str", ",", "default", "=", "'log'", ",", "help", "=", "'model name'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_ep'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'log_ep'", ")", "\n", "parser", ".", "add_argument", "(", "'--exp'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'model name'", ")", "\n", "\n", "# Dataset", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'cifar'", ",", "help", "=", "\"name of dataset\"", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset_trans'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "\"Unsupervised dataset for server\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--iid'", ",", "action", "=", "'store_true'", ",", "help", "=", "'whether i.i.d or not'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_classes'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "\"number of classes\"", ")", "\n", "parser", ".", "add_argument", "(", "'--num_channels'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "\"number of channels of imges\"", ")", "\n", "parser", ".", "add_argument", "(", "'--split_method'", ",", "type", "=", "str", ",", "default", "=", "'step'", ",", "help", "=", "'split_method, [step, dir]'", ")", "\n", "\n", "# client regualrzation: FedProx", "\n", "parser", ".", "add_argument", "(", "'--reg_type'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'FedProx, scaffold'", ")", "\n", "parser", ".", "add_argument", "(", "'--mu'", ",", "type", "=", "float", ",", "default", "=", "0.001", ",", "help", "=", "\"mu\"", ")", "\n", "\n", "# SWAG & Server", "\n", "parser", ".", "add_argument", "(", "'--fedM'", ",", "action", "=", "'store_true'", ",", "help", "=", "\"FedAvgM\"", ")", "\n", "parser", ".", "add_argument", "(", "'--teacher_type'", ",", "type", "=", "str", ",", "default", "=", "'SWAG'", ",", "help", "=", "'ensemble'", ")", "\n", "parser", ".", "add_argument", "(", "'--client_type'", ",", "type", "=", "str", ",", "default", "=", "'real'", ",", "help", "=", "'real, g'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--swag_stepsize'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "\"swag_stepsize\"", ")", "\n", "parser", ".", "add_argument", "(", "'--client_stepsize'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "\"client_stepsize\"", ")", "\n", "parser", ".", "add_argument", "(", "'--var_scale'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "\"var_scale\"", ")", "\n", "parser", ".", "add_argument", "(", "'--num_sample_teacher'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "\"number of teachers\"", ")", "\n", "parser", ".", "add_argument", "(", "'--num_base'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "\"number of teachers\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--use_client'", ",", "action", "=", "'store_true'", ",", "help", "=", "\"use_client\"", ")", "\n", "parser", ".", "add_argument", "(", "'--use_fake'", ",", "action", "=", "'store_true'", ",", "help", "=", "\"use_fake\"", ")", "\n", "parser", ".", "add_argument", "(", "'--sample_teacher'", ",", "type", "=", "str", ",", "default", "=", "\"gaussian\"", ",", "help", "=", "\"use_client\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--loss_type'", ",", "type", "=", "str", ",", "default", "=", "'KL'", ",", "help", "=", "'server loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--temp'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "\"temp\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--mom'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "\"teacher momentum\"", ")", "\n", "parser", ".", "add_argument", "(", "'--server_bs'", ",", "type", "=", "int", ",", "default", "=", "128", ",", "help", "=", "\"server batch size: B\"", ")", "\n", "parser", ".", "add_argument", "(", "'--server_lr'", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "help", "=", "\"learning rate\"", ")", "\n", "parser", ".", "add_argument", "(", "'--update'", ",", "type", "=", "str", ",", "default", "=", "'dist'", ",", "help", "=", "'Aggregation update strategy, [FedAvg, dist]'", ")", "\n", "parser", ".", "add_argument", "(", "'--server_ep'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "\"the number of center epochs\"", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup_ep'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "\"the number of warmup rounds\"", ")", "\n", "\n", "# model arguments", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'cnn'", ",", "help", "=", "'model name'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--kernel_num'", ",", "type", "=", "int", ",", "default", "=", "9", ",", "help", "=", "'number of each kind of kernel'", ")", "\n", "parser", ".", "add_argument", "(", "'--kernel_sizes'", ",", "type", "=", "str", ",", "default", "=", "'3,4,5'", ",", "\n", "help", "=", "'comma-separated kernel size to use for convolution'", ")", "\n", "parser", ".", "add_argument", "(", "'--norm'", ",", "type", "=", "str", ",", "default", "=", "'batch_norm'", ",", "help", "=", "\"batch_norm, layer_norm, or None\"", ")", "\n", "parser", ".", "add_argument", "(", "'--num_filters'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "help", "=", "\"number of filters for conv nets\"", ")", "\n", "parser", ".", "add_argument", "(", "'--max_pool'", ",", "type", "=", "str", ",", "default", "=", "'True'", ",", "\n", "help", "=", "\"Whether use max pooling rather than strided convolutions\"", ")", "\n", "\n", "# other arguments", "\n", "parser", ".", "add_argument", "(", "'--num_gpu'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"GPU ID, -1 for CPU\"", ")", "\n", "parser", ".", "add_argument", "(", "'--verbose'", ",", "action", "=", "'store_true'", ",", "help", "=", "'verbose print'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'random seed (default: 1)'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "update", "==", "\"FedAvg\"", ":", "args", ".", "use_SWA", "=", "False", "\n", "if", "args", ".", "teacher_type", "!=", "\"SWAG\"", ":", "args", ".", "dont_add_fedavg", "=", "True", "\n", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.hongyouc_fedbe.utils.tools.DatasetSplit.__init__": [[54, 57], ["list"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "idxs", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "idxs", "=", "list", "(", "idxs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.utils.tools.DatasetSplit.__len__": [[58, 60], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "idxs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.utils.tools.DatasetSplit.__getitem__": [[61, 64], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "image", ",", "label", "=", "self", ".", "dataset", "[", "self", ".", "idxs", "[", "item", "]", "]", "\n", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.utils.tools.logger.__init__": [[119, 145], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "    ", "self", ".", "name", "=", "name", "\n", "self", ".", "loss_train_list", "=", "[", "]", "\n", "self", ".", "loss_test_list", "=", "[", "]", "\n", "\n", "\n", "self", ".", "train_acc_list", "=", "[", "]", "\n", "self", ".", "test_acc_list", "=", "[", "]", "\n", "self", ".", "val_acc_list", "=", "[", "]", "\n", "self", ".", "loss_val_list", "=", "[", "]", "\n", "\n", "self", ".", "ens_train_acc_list", "=", "[", "]", "\n", "self", ".", "ens_test_acc_list", "=", "[", "]", "\n", "self", ".", "ens_val_acc_list", "=", "[", "]", "\n", "\n", "\n", "self", ".", "teacher_loss_train_list", "=", "[", "]", "\n", "self", ".", "teacher_loss_test_list", "=", "[", "]", "\n", "\n", "self", ".", "swa_train_acc_list", "=", "[", "]", "\n", "self", ".", "swa_test_acc_list", "=", "[", "]", "\n", "self", ".", "swa_val_acc_list", "=", "[", "]", "\n", "\n", "self", ".", "swag_train_acc_list", "=", "[", "]", "\n", "self", ".", "swag_test_acc_list", "=", "[", "]", "\n", "self", ".", "swag_val_acc_list", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.utils.tools.store_model": [[21, 25], ["torch.save", "torch.save", "torch.save", "range", "os.path.join", "len", "torch.save", "torch.save", "torch.save", "os.path.join"], "function", ["None"], ["def", "store_model", "(", "iter", ",", "model_dir", ",", "w_glob_org", ",", "client_w_list", ")", ":", "\n", "    ", "torch", ".", "save", "(", "w_glob_org", ",", "os", ".", "path", ".", "join", "(", "model_dir", ",", "\"w_org_%d\"", "%", "iter", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "client_w_list", ")", ")", ":", "\n", "      ", "torch", ".", "save", "(", "client_w_list", "[", "i", "]", ",", "os", ".", "path", ".", "join", "(", "model_dir", ",", "\"client_%d_%d\"", "%", "(", "iter", ",", "i", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.utils.tools.adaptive_schedule": [[26, 32], ["None"], "function", ["None"], ["", "", "def", "adaptive_schedule", "(", "local_ep", ",", "total_ep", ",", "rounds", ",", "adap_ep", ")", ":", "\n", "  ", "if", "rounds", "<", "5", ":", "\n", "    ", "running_ep", "=", "adap_ep", "\n", "", "else", ":", "\n", "    ", "running_ep", "=", "local_ep", "\n", "", "return", "running_ep", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.utils.tools.lr_schedule": [[33, 48], ["None"], "function", ["None"], ["", "def", "lr_schedule", "(", "base_lr", ",", "iter", ",", "total_ep", ")", ":", "\n", "  ", "if", "iter", "==", "0", ":", "\n", "    ", "return", "base_lr", "*", "0.5", "\n", "\n", "", "elif", "iter", ">", "total_ep", "*", "0.9", ":", "\n", "    ", "return", "base_lr", "*", "0.01", "\n", "\n", "", "elif", "iter", ">", "total_ep", "*", "0.6", ":", "\n", "    ", "return", "base_lr", "*", "0.1", "\n", "\n", "", "elif", "iter", ">", "total_ep", "*", "0.3", ":", "\n", "    ", "return", "base_lr", "*", "0.2", "\n", "\n", "", "else", ":", "\n", "    ", "return", "base_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.utils.tools.get_entropy": [[49, 52], ["numpy.mean", "scipy.stats.entropy"], "function", ["None"], ["", "", "def", "get_entropy", "(", "logits", ")", ":", "\n", "    ", "mean_entropy", "=", "np", ".", "mean", "(", "[", "entropy", "(", "logit", ")", "for", "logit", "in", "logits", "]", ")", "\n", "return", "mean_entropy", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.utils.tools.get_input_logits": [[65, 74], ["model.eval", "F.softmax.cpu().numpy", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model().detach", "torch.softmax", "F.softmax.cpu", "model"], "function", ["None"], ["", "", "def", "get_input_logits", "(", "inputs", ",", "model", ",", "is_logit", "=", "False", ",", "net_org", "=", "None", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "logit", "=", "model", "(", "inputs", ")", ".", "detach", "(", ")", "\n", "if", "not", "is_logit", ":", "\n", "        ", "logit", "=", "F", ".", "softmax", "(", "logit", ",", "dim", "=", "1", ")", "\n", "\n", "", "", "logit", "=", "logit", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "return", "logit", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.utils.tools.temp_softmax": [[75, 80], ["numpy.exp", "np.exp.sum", "numpy.max"], "function", ["None"], ["", "def", "temp_softmax", "(", "x", ",", "axis", "=", "-", "1", ",", "temp", "=", "1.0", ")", ":", "\n", "    ", "x", "=", "x", "/", "temp", "\n", "e_x", "=", "np", ".", "exp", "(", "x", "-", "np", ".", "max", "(", "x", ")", ")", "# same code", "\n", "e_x", "=", "e_x", "/", "e_x", ".", "sum", "(", "axis", "=", "axis", ",", "keepdims", "=", "True", ")", "\n", "return", "e_x", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.utils.tools.temp_sharpen": [[81, 84], ["numpy.maximum", "np.maximum.sum"], "function", ["None"], ["", "def", "temp_sharpen", "(", "x", ",", "axis", "=", "-", "1", ",", "temp", "=", "1.0", ")", ":", "\n", "    ", "x", "=", "np", ".", "maximum", "(", "x", "**", "(", "1", "/", "temp", ")", ",", "1e-8", ")", "\n", "return", "x", "/", "x", ".", "sum", "(", "axis", "=", "axis", ",", "keepdims", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.utils.tools.merge_logits": [[86, 111], ["numpy.mean", "numpy.argmax", "[].reshape", "numpy.mean", "numpy.mean", "tools.temp_softmax", "numpy.max", "tools.temp_softmax", "numpy.max", "len", "numpy.max", "tools.temp_sharpen", "numpy.max", "softmax", "numpy.max", "scipy.stats.mode"], "function", ["home.repos.pwc.inspect_result.hongyouc_fedbe.utils.tools.temp_softmax", "home.repos.pwc.inspect_result.hongyouc_fedbe.utils.tools.temp_softmax", "home.repos.pwc.inspect_result.hongyouc_fedbe.utils.tools.temp_sharpen"], ["", "def", "merge_logits", "(", "logits", ",", "method", ",", "loss_type", ",", "temp", "=", "0.3", ",", "global_ep", "=", "1000", ")", ":", "\n", "    ", "if", "\"vote\"", "in", "method", ":", "\n", "      ", "if", "loss_type", "==", "\"CE\"", ":", "\n", "        ", "votes", "=", "np", ".", "argmax", "(", "logits", ",", "axis", "=", "-", "1", ")", "\n", "logits_arr", "=", "mode", "(", "votes", ",", "axis", "=", "1", ")", "[", "0", "]", ".", "reshape", "(", "(", "len", "(", "logits", ")", ")", ")", "\n", "logits_cond", "=", "np", ".", "mean", "(", "np", ".", "max", "(", "logits", ",", "axis", "=", "-", "1", ")", ",", "axis", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "logits", "=", "np", ".", "mean", "(", "logits", ",", "axis", "=", "1", ")", "\n", "logits_arr", "=", "temp_softmax", "(", "logits", ",", "temp", "=", "temp", ")", "\n", "logits_cond", "=", "np", ".", "max", "(", "logits_arr", ",", "axis", "=", "-", "1", ")", "\n", "", "", "else", ":", "\n", "      ", "logits", "=", "np", ".", "mean", "(", "logits", ",", "axis", "=", "1", ")", "\n", "\n", "if", "loss_type", "==", "\"MSE\"", ":", "\n", "        ", "logits_arr", "=", "temp_softmax", "(", "logits", ",", "temp", "=", "1", ")", "\n", "logits_cond", "=", "np", ".", "max", "(", "logits_arr", ",", "axis", "=", "-", "1", ")", "\n", "", "elif", "\"KL\"", "in", "loss_type", ":", "\n", "        ", "logits_arr", "=", "temp_sharpen", "(", "logits", ",", "temp", "=", "temp", ")", "\n", "logits_cond", "=", "np", ".", "max", "(", "logits_arr", ",", "axis", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "logits_arr", "=", "logits", "\n", "logits_cond", "=", "softmax", "(", "logits", ",", "axis", "=", "-", "1", ")", "\n", "logits_cond", "=", "np", ".", "max", "(", "logits_cond", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "", "return", "logits_arr", ",", "logits_cond", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.utils.tools.weights_init": [[112, 117], ["isinstance", "isinstance", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_"], "function", ["None"], ["", "def", "weights_init", "(", "m", ")", ":", "\n", "  ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "      ", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "          ", "torch", ".", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.utils.sampling.mnist_iid": [[13, 26], ["int", "range", "set", "list", "len", "numpy.random.choice", "range", "set", "len"], "function", ["None"], ["def", "mnist_iid", "(", "dataset", ",", "num_users", ")", ":", "\n", "    ", "\"\"\"\n    Sample I.I.D. client data from MNIST dataset\n    :param dataset:\n    :param num_users:\n    :return: dict of image index\n    \"\"\"", "\n", "num_items", "=", "int", "(", "len", "(", "dataset", ")", "/", "num_users", ")", "\n", "dict_users", ",", "all_idxs", "=", "{", "}", ",", "[", "i", "for", "i", "in", "range", "(", "len", "(", "dataset", ")", ")", "]", "\n", "for", "i", "in", "range", "(", "num_users", ")", ":", "\n", "        ", "dict_users", "[", "i", "]", "=", "set", "(", "np", ".", "random", ".", "choice", "(", "all_idxs", ",", "num_items", ",", "replace", "=", "False", ")", ")", "\n", "all_idxs", "=", "list", "(", "set", "(", "all_idxs", ")", "-", "dict_users", "[", "i", "]", ")", "\n", "", "return", "dict_users", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.utils.sampling.mnist_noniid": [[27, 63], ["numpy.arange", "numpy.vstack", "range", "list", "numpy.array", "dataset.train_labels.numpy", "set", "list", "open", "range", "range", "range", "range", "numpy.random.choice", "numpy.array", "numpy.concatenate", "numpy.array", "f.write", "idxs_labels[].argsort", "set", "list", "set", "numpy.count_nonzero", "range", "sum", "str"], "function", ["None"], ["", "def", "mnist_noniid", "(", "dataset", ",", "num_users", ",", "num_data", "=", "60000", ")", ":", "\n", "    ", "\"\"\"\n    Sample non-I.I.D client data from MNIST dataset\n    :param dataset:\n    :param num_users:\n    :return:\n    \"\"\"", "\n", "num_shards", ",", "num_imgs", "=", "200", ",", "250", "\n", "idx_shard", "=", "[", "i", "for", "i", "in", "range", "(", "num_shards", ")", "]", "\n", "dict_users", "=", "{", "i", ":", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "'int64'", ")", "for", "i", "in", "range", "(", "num_users", ")", "}", "\n", "idxs", "=", "np", ".", "arange", "(", "num_shards", "*", "num_imgs", ")", "\n", "labels", "=", "dataset", ".", "train_labels", ".", "numpy", "(", ")", "[", ":", "num_shards", "*", "num_imgs", "]", "\n", "\n", "# sort labels", "\n", "idxs_labels", "=", "np", ".", "vstack", "(", "(", "idxs", ",", "labels", ")", ")", "\n", "idxs_labels", "=", "idxs_labels", "[", ":", ",", "idxs_labels", "[", "1", ",", ":", "]", ".", "argsort", "(", ")", "]", "\n", "idxs", "=", "idxs_labels", "[", "0", ",", ":", "]", "\n", "\n", "# divide and assign", "\n", "for", "i", "in", "range", "(", "num_users", ")", ":", "\n", "        ", "rand_set", "=", "set", "(", "np", ".", "random", ".", "choice", "(", "idx_shard", ",", "2", ",", "replace", "=", "False", ")", ")", "\n", "idx_shard", "=", "list", "(", "set", "(", "idx_shard", ")", "-", "rand_set", ")", "\n", "for", "rand", "in", "rand_set", ":", "\n", "            ", "add_idx", "=", "np", ".", "array", "(", "list", "(", "set", "(", "idxs", "[", "rand", "*", "num_imgs", ":", "(", "rand", "+", "1", ")", "*", "num_imgs", "]", ")", ")", ")", "\n", "dict_users", "[", "i", "]", "=", "np", ".", "concatenate", "(", "(", "dict_users", "[", "i", "]", ",", "add_idx", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "cnts_dict", "=", "{", "}", "\n", "with", "open", "(", "\"mnist_%d_u%d.txt\"", "%", "(", "num_data", ",", "num_users", ")", ",", "'w'", ")", "as", "f", ":", "\n", "      ", "for", "i", "in", "range", "(", "num_users", ")", ":", "\n", "        ", "labels_i", "=", "labels", "[", "dict_users", "[", "i", "]", "]", "\n", "cnts", "=", "np", ".", "array", "(", "[", "np", ".", "count_nonzero", "(", "labels_i", "==", "j", ")", "for", "j", "in", "range", "(", "10", ")", "]", ")", "\n", "cnts_dict", "[", "i", "]", "=", "cnts", "\n", "f", ".", "write", "(", "\"User %s: %s sum: %d\\n\"", "%", "(", "i", ",", "\" \"", ".", "join", "(", "[", "str", "(", "cnt", ")", "for", "cnt", "in", "cnts", "]", ")", ",", "sum", "(", "cnts", ")", ")", ")", "\n", "\n", "", "", "server_idx", "=", "list", "(", "range", "(", "num_shards", "*", "num_imgs", ",", "60000", ")", ")", "\n", "return", "dict_users", ",", "server_idx", ",", "cnts_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.utils.sampling.cifar_iid": [[64, 82], ["int", "range", "numpy.random.choice", "list", "set", "list", "len", "numpy.random.choice", "range", "set", "set", "set", "len"], "function", ["None"], ["", "def", "cifar_iid", "(", "dataset", ",", "num_users", ",", "num_data", "=", "50000", ")", ":", "\n", "    ", "\"\"\"\n    Sample I.I.D. client data from CIFAR10 dataset\n    :param dataset:\n    :param num_users:\n    :return: dict of image index\n    \"\"\"", "\n", "\n", "dict_users", ",", "all_idxs", "=", "{", "}", ",", "[", "i", "for", "i", "in", "range", "(", "len", "(", "dataset", ")", ")", "]", "\n", "if", "num_data", "<", "50000", ":", "\n", "      ", "server_idx", "=", "np", ".", "random", ".", "choice", "(", "all_idxs", ",", "50000", "-", "num_data", ",", "replace", "=", "False", ")", "\n", "all_idxs", "=", "list", "(", "set", "(", "all_idxs", ")", "-", "set", "(", "server_idx", ")", ")", "\n", "", "num_items", "=", "int", "(", "len", "(", "all_idxs", ")", "/", "num_users", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_users", ")", ":", "\n", "        ", "dict_users", "[", "i", "]", "=", "set", "(", "np", ".", "random", ".", "choice", "(", "all_idxs", ",", "num_items", ",", "replace", "=", "False", ")", ")", "\n", "all_idxs", "=", "list", "(", "set", "(", "all_idxs", ")", "-", "dict_users", "[", "i", "]", ")", "\n", "", "return", "dict_users", ",", "server_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.utils.sampling.cifar_noniid": [[83, 179], ["numpy.array", "numpy.arange", "numpy.vstack", "numpy.zeros", "range", "numpy.reshape", "set", "numpy.random.choice", "range", "open", "range", "numpy.random.choice", "np.random.choice.reshape", "numpy.reshape", "list", "numpy.array", "set", "list", "numpy.concatenate", "numpy.zeros", "range", "numpy.reshape", "set", "numpy.random.choice", "numpy.array", "range", "numpy.array", "f.write", "range", "range", "numpy.random.choice", "list", "list", "numpy.concatenate", "numpy.random.choice", "np.random.choice.reshape", "numpy.reshape", "list", "numpy.array", "range", "numpy.random.shuffle", "numpy.concatenate", "idxs_labels[].argsort", "numpy.where", "set", "set", "set", "range", "numpy.random.shuffle", "numpy.random.dirichlet", "numpy.array", "min", "numpy.count_nonzero", "range", "range", "set", "set", "numpy.where", "set", "range", "range", "numpy.where", "numpy.repeat", "np.array.sum", "range", "sum", "range", "idx.tolist", "zip", "len", "zip", "numpy.split", "str", "len", "numpy.cumsum", "len"], "function", ["None"], ["", "def", "cifar_noniid", "(", "dataset", ",", "num_users", ",", "num_data", "=", "50000", ",", "method", "=", "\"step\"", ")", ":", "\n", "    ", "\"\"\"\n    Sample non-I.I.D client data from CIFAR dataset\n    :param dataset:\n    :param num_users:\n    :return:\n    \"\"\"", "\n", "\n", "labels", "=", "np", ".", "array", "(", "dataset", ".", "targets", ")", "\n", "_lst_sample", "=", "10", "\n", "\n", "if", "method", "==", "\"step\"", ":", "\n", "\n", "      ", "num_shards", "=", "num_users", "*", "2", "\n", "num_imgs", "=", "50000", "//", "num_shards", "\n", "idx_shard", "=", "[", "i", "for", "i", "in", "range", "(", "num_shards", ")", "]", "\n", "\n", "idxs", "=", "np", ".", "arange", "(", "num_shards", "*", "num_imgs", ")", "\n", "# sort labels", "\n", "idxs_labels", "=", "np", ".", "vstack", "(", "(", "idxs", ",", "labels", ")", ")", "\n", "idxs_labels", "=", "idxs_labels", "[", ":", ",", "idxs_labels", "[", "1", ",", ":", "]", ".", "argsort", "(", ")", "]", "\n", "idxs", "=", "idxs_labels", "[", "0", ",", ":", "]", "\n", "\n", "least_idx", "=", "np", ".", "zeros", "(", "(", "num_users", ",", "10", ",", "_lst_sample", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "        ", "idx_i", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "where", "(", "labels", "==", "i", ")", "[", "0", "]", ",", "num_users", "*", "_lst_sample", ",", "replace", "=", "False", ")", "\n", "least_idx", "[", ":", ",", "i", ",", ":", "]", "=", "idx_i", ".", "reshape", "(", "(", "num_users", ",", "_lst_sample", ")", ")", "\n", "", "least_idx", "=", "np", ".", "reshape", "(", "least_idx", ",", "(", "num_users", ",", "-", "1", ")", ")", "\n", "\n", "least_idx_set", "=", "set", "(", "np", ".", "reshape", "(", "least_idx", ",", "(", "-", "1", ")", ")", ")", "\n", "server_idx", "=", "np", ".", "random", ".", "choice", "(", "list", "(", "set", "(", "range", "(", "50000", ")", ")", "-", "least_idx_set", ")", ",", "50000", "-", "num_data", ",", "replace", "=", "False", ")", "\n", "\n", "# divide and assign", "\n", "dict_users", "=", "{", "i", ":", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "'int64'", ")", "for", "i", "in", "range", "(", "num_users", ")", "}", "\n", "for", "i", "in", "range", "(", "num_users", ")", ":", "\n", "          ", "rand_set", "=", "set", "(", "np", ".", "random", ".", "choice", "(", "idx_shard", ",", "num_shards", "//", "num_users", ",", "replace", "=", "False", ")", ")", "\n", "idx_shard", "=", "list", "(", "set", "(", "idx_shard", ")", "-", "rand_set", ")", "\n", "for", "rand", "in", "rand_set", ":", "\n", "              ", "idx_i", "=", "list", "(", "set", "(", "range", "(", "rand", "*", "num_imgs", ",", "(", "rand", "+", "1", ")", "*", "num_imgs", ")", ")", ")", "\n", "add_idx", "=", "list", "(", "set", "(", "idxs", "[", "idx_i", "]", ")", "-", "set", "(", "server_idx", ")", ")", "\n", "\n", "dict_users", "[", "i", "]", "=", "np", ".", "concatenate", "(", "(", "dict_users", "[", "i", "]", ",", "add_idx", ")", ",", "axis", "=", "0", ")", "\n", "", "dict_users", "[", "i", "]", "=", "np", ".", "concatenate", "(", "(", "dict_users", "[", "i", "]", ",", "least_idx", "[", "i", "]", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "elif", "method", "==", "\"dir\"", ":", "\n", "      ", "min_size", "=", "0", "\n", "K", "=", "10", "\n", "y_train", "=", "labels", "\n", "\n", "_lst_sample", "=", "2", "\n", "\n", "least_idx", "=", "np", ".", "zeros", "(", "(", "num_users", ",", "10", ",", "_lst_sample", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "        ", "idx_i", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "where", "(", "labels", "==", "i", ")", "[", "0", "]", ",", "num_users", "*", "_lst_sample", ",", "replace", "=", "False", ")", "\n", "least_idx", "[", ":", ",", "i", ",", ":", "]", "=", "idx_i", ".", "reshape", "(", "(", "num_users", ",", "_lst_sample", ")", ")", "\n", "", "least_idx", "=", "np", ".", "reshape", "(", "least_idx", ",", "(", "num_users", ",", "-", "1", ")", ")", "\n", "\n", "least_idx_set", "=", "set", "(", "np", ".", "reshape", "(", "least_idx", ",", "(", "-", "1", ")", ")", ")", "\n", "#least_idx_set = set([])", "\n", "server_idx", "=", "np", ".", "random", ".", "choice", "(", "list", "(", "set", "(", "range", "(", "50000", ")", ")", "-", "least_idx_set", ")", ",", "50000", "-", "num_data", ",", "replace", "=", "False", ")", "\n", "local_idx", "=", "np", ".", "array", "(", "[", "i", "for", "i", "in", "range", "(", "50000", ")", "if", "i", "not", "in", "server_idx", "and", "i", "not", "in", "least_idx_set", "]", ")", "\n", "\n", "N", "=", "y_train", ".", "shape", "[", "0", "]", "\n", "net_dataidx_map", "=", "{", "}", "\n", "dict_users", "=", "{", "i", ":", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "'int64'", ")", "for", "i", "in", "range", "(", "num_users", ")", "}", "\n", "\n", "while", "min_size", "<", "10", ":", "\n", "          ", "idx_batch", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_users", ")", "]", "\n", "# for each class in the dataset", "\n", "for", "k", "in", "range", "(", "K", ")", ":", "\n", "              ", "idx_k", "=", "np", ".", "where", "(", "y_train", "==", "k", ")", "[", "0", "]", "\n", "idx_k", "=", "[", "id", "for", "id", "in", "idx_k", "if", "id", "in", "local_idx", "]", "\n", "\n", "np", ".", "random", ".", "shuffle", "(", "idx_k", ")", "\n", "proportions", "=", "np", ".", "random", ".", "dirichlet", "(", "np", ".", "repeat", "(", "0.1", ",", "num_users", ")", ")", "\n", "## Balance", "\n", "proportions", "=", "np", ".", "array", "(", "[", "p", "*", "(", "len", "(", "idx_j", ")", "<", "N", "/", "num_users", ")", "for", "p", ",", "idx_j", "in", "zip", "(", "proportions", ",", "idx_batch", ")", "]", ")", "\n", "proportions", "=", "proportions", "/", "proportions", ".", "sum", "(", ")", "\n", "proportions", "=", "(", "np", ".", "cumsum", "(", "proportions", ")", "*", "len", "(", "idx_k", ")", ")", ".", "astype", "(", "int", ")", "[", ":", "-", "1", "]", "\n", "idx_batch", "=", "[", "idx_j", "+", "idx", ".", "tolist", "(", ")", "for", "idx_j", ",", "idx", "in", "zip", "(", "idx_batch", ",", "np", ".", "split", "(", "idx_k", ",", "proportions", ")", ")", "]", "\n", "min_size", "=", "min", "(", "[", "len", "(", "idx_j", ")", "for", "idx_j", "in", "idx_batch", "]", ")", "\n", "\n", "", "", "for", "j", "in", "range", "(", "num_users", ")", ":", "\n", "          ", "np", ".", "random", ".", "shuffle", "(", "idx_batch", "[", "j", "]", ")", "\n", "dict_users", "[", "j", "]", "=", "idx_batch", "[", "j", "]", "\n", "dict_users", "[", "j", "]", "=", "np", ".", "concatenate", "(", "(", "dict_users", "[", "j", "]", ",", "least_idx", "[", "j", "]", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "cnts_dict", "=", "{", "}", "\n", "with", "open", "(", "\"data_%d_u%d_%s.txt\"", "%", "(", "num_data", ",", "num_users", ",", "method", ")", ",", "'w'", ")", "as", "f", ":", "\n", "      ", "for", "i", "in", "range", "(", "num_users", ")", ":", "\n", "        ", "labels_i", "=", "labels", "[", "dict_users", "[", "i", "]", "]", "\n", "cnts", "=", "np", ".", "array", "(", "[", "np", ".", "count_nonzero", "(", "labels_i", "==", "j", ")", "for", "j", "in", "range", "(", "10", ")", "]", ")", "\n", "cnts_dict", "[", "i", "]", "=", "cnts", "\n", "f", ".", "write", "(", "\"User %s: %s sum: %d\\n\"", "%", "(", "i", ",", "\" \"", ".", "join", "(", "[", "str", "(", "cnt", ")", "for", "cnt", "in", "cnts", "]", ")", ",", "sum", "(", "cnts", ")", ")", ")", "\n", "\n", "", "", "return", "dict_users", ",", "server_idx", ",", "cnts_dict", "\n", "", ""]], "home.repos.pwc.inspect_result.hongyouc_fedbe.models.Update.SWAGLocalUpdate.__init__": [[28, 41], ["torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "DatasetSplit", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "device", ",", "dataset", "=", "None", ",", "idxs", "=", "None", ",", "server_ids", "=", "None", ",", "test", "=", "(", "None", ",", "None", ")", ",", "num_per_cls", "=", "None", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "num_per_cls", "=", "num_per_cls", "\n", "\n", "self", ".", "loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "selected_clients", "=", "[", "]", "\n", "self", ".", "ldr_train", "=", "DataLoader", "(", "DatasetSplit", "(", "dataset", ",", "idxs", ")", ",", "batch_size", "=", "self", ".", "args", ".", "local_bs", ",", "shuffle", "=", "True", ")", "\n", "(", "self", ".", "test_dataset", ",", "self", ".", "test_ids", ")", "=", "test", "\n", "(", "self", ".", "train_dataset", ",", "self", ".", "user_train_ids", ")", "=", "(", "dataset", ",", "idxs", ")", "\n", "\n", "self", ".", "server_ids", "=", "server_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.models.Update.SWAGLocalUpdate.apply_weight_decay": [[42, 60], ["module.modules", "hasattr", "isinstance"], "methods", ["None"], ["", "def", "apply_weight_decay", "(", "self", ",", "*", "modules", ",", "weight_decay_factor", "=", "0.", ",", "wo_bn", "=", "True", ")", ":", "\n", "        ", "'''\n        https://discuss.pytorch.org/t/weight-decay-in-the-optimizers-is-a-bad-idea-especially-with-batchnorm/16994/5\n        Apply weight decay to pytorch model without BN;\n        In pytorch:\n            if group['weight_decay'] != 0:\n                grad = grad.add(p, alpha=group['weight_decay'])\n        p is the param;\n        :param modules:\n        :param weight_decay_factor:\n        :return:\n        '''", "\n", "for", "module", "in", "modules", ":", "\n", "            ", "for", "m", "in", "module", ".", "modules", "(", ")", ":", "\n", "                ", "if", "hasattr", "(", "m", ",", "'weight'", ")", ":", "\n", "                    ", "if", "wo_bn", "and", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "                        ", "continue", "\n", "", "m", ".", "weight", ".", "grad", "+=", "m", ".", "weight", "*", "weight_decay_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.models.Update.SWAGLocalUpdate.reg_loss": [[61, 69], ["net.named_parameters", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "grad_org[].to"], "methods", ["None"], ["", "", "", "", "def", "reg_loss", "(", "self", ",", "net", ",", "grad_org", ")", ":", "\n", "      ", "if", "self", ".", "args", ".", "reg_type", "==", "\"FedProx\"", ":", "\n", "        ", "reg_loss", "=", "0.0", "\n", "for", "name", ",", "param", "in", "net", ".", "named_parameters", "(", ")", ":", "\n", "          ", "if", "'weight'", "in", "name", ":", "\n", "            ", "reg_loss", "+=", "torch", ".", "norm", "(", "param", "-", "grad_org", "[", "name", "]", ".", "to", "(", "self", ".", "device", ")", ",", "2", ")", "\n", "", "", "reg_loss", "=", "reg_loss", "*", "0.5", "*", "self", ".", "args", ".", "mu", "\n", "", "return", "reg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.models.Update.SWAGLocalUpdate.train": [[70, 115], ["net.cpu.cpu.cpu", "copy.deepcopy", "net.cpu.cpu.to", "net.cpu.cpu.train", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "range", "net.cpu.cpu.cpu", "net.cpu.cpu.state_dict", "net.cpu.cpu.parameters", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "enumerate", "epoch_loss.append", "net.cpu.cpu.zero_grad", "net.cpu.cpu.", "Update.SWAGLocalUpdate.loss_func", "Update.SWAGLocalUpdate.backward", "Update.SWAGLocalUpdate.apply_weight_decay", "torch.optim.SGD.step", "torch.optim.SGD.step", "torch.optim.SGD.step", "batch_loss.append", "torch.optim.lr_scheduler.StepLR.step", "torch.optim.lr_scheduler.StepLR.step", "torch.optim.lr_scheduler.StepLR.step", "images.to", "labels.to", "Update.SWAGLocalUpdate.reg_loss", "print", "Update.SWAGLocalUpdate.item", "sum", "len", "len", "Update.SWAGLocalUpdate.item", "len", "len"], "methods", ["home.repos.pwc.inspect_result.hongyouc_fedbe.models.Update.ServerUpdate.train", "home.repos.pwc.inspect_result.hongyouc_fedbe.models.swa.SWA.state_dict", "home.repos.pwc.inspect_result.hongyouc_fedbe.models.Update.SWAGLocalUpdate.apply_weight_decay", "home.repos.pwc.inspect_result.hongyouc_fedbe.models.swa.SWA.step", "home.repos.pwc.inspect_result.hongyouc_fedbe.models.swa.SWA.step", "home.repos.pwc.inspect_result.hongyouc_fedbe.models.swa.SWA.step", "home.repos.pwc.inspect_result.hongyouc_fedbe.models.swa.SWA.step", "home.repos.pwc.inspect_result.hongyouc_fedbe.models.swa.SWA.step", "home.repos.pwc.inspect_result.hongyouc_fedbe.models.swa.SWA.step", "home.repos.pwc.inspect_result.hongyouc_fedbe.models.Update.SWAGLocalUpdate.reg_loss"], ["", "def", "train", "(", "self", ",", "net", ",", "running_ep", ",", "lr", ")", ":", "\n", "        ", "net", ".", "cpu", "(", ")", "\n", "grad_org", "=", "copy", ".", "deepcopy", "(", "net", ".", "state_dict", "(", ")", ")", "\n", "net", ".", "to", "(", "self", ".", "device", ")", "\n", "net", ".", "train", "(", ")", "\n", "\n", "# train and update", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "momentum", "=", "0.9", ")", "\n", "if", "self", ".", "args", ".", "ens", ":", "\n", "            ", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "\n", "step_size", "=", "30", ",", "\n", "gamma", "=", "0.1", ")", "\n", "", "epoch_loss", "=", "[", "]", "\n", "acc", "=", "0.0", "\n", "\n", "num_model", "=", "0", "\n", "cnt", "=", "0", "\n", "for", "iter", "in", "range", "(", "running_ep", ")", ":", "\n", "            ", "batch_loss", "=", "[", "]", "\n", "for", "batch_idx", ",", "(", "images", ",", "labels", ")", "in", "enumerate", "(", "self", ".", "ldr_train", ")", ":", "\n", "                ", "images", ",", "labels", "=", "images", ".", "to", "(", "self", ".", "device", ")", ",", "labels", ".", "to", "(", "self", ".", "device", ")", "\n", "net", ".", "zero_grad", "(", ")", "\n", "log_probs", "=", "net", "(", "images", ")", "\n", "loss", "=", "self", ".", "loss_func", "(", "log_probs", ",", "labels", ")", "\n", "\n", "if", "self", ".", "args", ".", "reg_type", "==", "\"FedProx\"", ":", "\n", "                  ", "reg_loss", "=", "self", ".", "reg_loss", "(", "net", ",", "grad_org", ")", "\n", "loss", "+=", "reg_loss", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "self", ".", "apply_weight_decay", "(", "net", ",", "weight_decay_factor", "=", "self", ".", "args", ".", "weight_decay", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "self", ".", "args", ".", "verbose", "and", "batch_idx", "%", "10", "==", "0", ":", "\n", "                    ", "print", "(", "'Update Epoch: {} [{}/{} ({:.0f}%)]\\tLoss: {:.6f}'", ".", "format", "(", "\n", "iter", ",", "batch_idx", "*", "len", "(", "images", ")", ",", "len", "(", "self", ".", "ldr_train", ".", "dataset", ")", ",", "\n", "100.", "*", "batch_idx", "/", "len", "(", "self", ".", "ldr_train", ")", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "", "batch_loss", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "", "epoch_loss", ".", "append", "(", "sum", "(", "batch_loss", ")", "/", "len", "(", "batch_loss", ")", ")", "\n", "\n", "if", "self", ".", "args", ".", "ens", ":", "\n", "              ", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "", "", "net", "=", "net", ".", "cpu", "(", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.models.Update.ServerUpdate.__init__": [[117, 143], ["len", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "os.path.join", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "next", "torch.nn.KLDivLoss", "torch.nn.KLDivLoss", "torch.nn.KLDivLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "DatasetSplit", "DatasetSplit", "DatasetSplit", "iter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "device", ",", "dataset", "=", "None", ",", "\n", "server_dataset", "=", "None", ",", "server_idxs", "=", "None", ",", "train_idx", "=", "None", ",", "\n", "test", "=", "(", "None", ",", "None", ")", ",", "\n", "w_org", "=", "None", ",", "base_teachers", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "loss_type", "=", "args", ".", "loss_type", "\n", "self", ".", "loss_func", "=", "nn", ".", "KLDivLoss", "(", ")", "if", "self", ".", "loss_type", "==", "\"KL\"", "else", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "selected_clients", "=", "[", "]", "\n", "\n", "self", ".", "server_data_size", "=", "len", "(", "server_idxs", ")", "\n", "self", ".", "aug", "=", "args", ".", "aug", "and", "args", ".", "use_SWA", "\n", "self", ".", "ldr_train", "=", "DataLoader", "(", "DatasetSplit", "(", "dataset", ",", "server_idxs", ")", ",", "batch_size", "=", "1024", ",", "shuffle", "=", "False", ")", "\n", "self", ".", "ldr_local_train", "=", "DataLoader", "(", "DatasetSplit", "(", "dataset", ",", "train_idx", ")", ",", "batch_size", "=", "self", ".", "args", ".", "server_bs", ",", "shuffle", "=", "False", ")", "\n", "self", ".", "test_dataset", "=", "DataLoader", "(", "test", "[", "0", "]", ",", "batch_size", "=", "self", ".", "args", ".", "server_bs", ",", "shuffle", "=", "False", ")", "\n", "self", ".", "aum_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "log_dir", ",", "\"aum\"", ")", "\n", "\n", "server_train_dataset", "=", "DataLoader", "(", "DatasetSplit", "(", "server_dataset", ",", "server_idxs", ")", ",", "batch_size", "=", "self", ".", "args", ".", "server_bs", ",", "shuffle", "=", "False", ")", "\n", "self", ".", "server_train_dataset", "=", "[", "images", "for", "images", ",", "labels", "in", "server_train_dataset", "]", "\n", "\n", "self", ".", "w_org", "=", "w_org", "\n", "self", ".", "base_teachers", "=", "base_teachers", "\n", "\n", "# Get one batch for testing", "\n", "(", "self", ".", "eval_images", ",", "self", ".", "eval_labels", ")", "=", "next", "(", "iter", "(", "self", ".", "ldr_train", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.models.Update.ServerUpdate.transform_train": [[144, 148], ["Update.random_crop", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.hongyouc_fedbe.models.Update.random_crop"], ["", "def", "transform_train", "(", "self", ",", "images", ")", ":", "\n", "        ", "images", "=", "random_crop", "(", "images", ",", "4", ")", "\n", "images", "=", "torch", ".", "Tensor", "(", "images", ")", ".", "cuda", "(", ")", "\n", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.models.Update.ServerUpdate.get_ensemble_logits": [[149, 159], ["numpy.zeros", "enumerate", "numpy.transpose", "merge_logits", "get_entropy", "get_input_logits", "numpy.transpose.reshape", "len", "len", "t_net.cuda"], "methods", ["home.repos.pwc.inspect_result.hongyouc_fedbe.utils.tools.merge_logits", "home.repos.pwc.inspect_result.hongyouc_fedbe.utils.tools.get_entropy", "home.repos.pwc.inspect_result.hongyouc_fedbe.utils.tools.get_input_logits"], ["", "def", "get_ensemble_logits", "(", "self", ",", "teachers", ",", "inputs", ",", "method", "=", "'mean'", ",", "global_ep", "=", "1000", ")", ":", "\n", "        ", "logits", "=", "np", ".", "zeros", "(", "(", "len", "(", "teachers", ")", ",", "len", "(", "inputs", ")", ",", "self", ".", "args", ".", "num_classes", ")", ")", "\n", "for", "i", ",", "t_net", "in", "enumerate", "(", "teachers", ")", ":", "\n", "          ", "logit", "=", "get_input_logits", "(", "inputs", ",", "t_net", ".", "cuda", "(", ")", ",", "is_logit", "=", "self", ".", "args", ".", "is_logit", ")", "#Disable res", "\n", "logits", "[", "i", "]", "=", "logit", "\n", "\n", "", "logits", "=", "np", ".", "transpose", "(", "logits", ",", "(", "1", ",", "0", ",", "2", ")", ")", "# batchsize, teachers, 10", "\n", "logits_arr", ",", "logits_cond", "=", "merge_logits", "(", "logits", ",", "method", ",", "self", ".", "args", ".", "loss_type", ",", "temp", "=", "self", ".", "args", ".", "temp", ",", "global_ep", "=", "global_ep", ")", "\n", "batch_entropy", "=", "get_entropy", "(", "logits", ".", "reshape", "(", "(", "-", "1", ",", "self", ".", "args", ".", "num_classes", ")", ")", ")", "\n", "return", "logits_arr", ",", "batch_entropy", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.models.Update.ServerUpdate.eval_ensemble": [[160, 184], ["get_aum", "enumerate", "enumerate", "numpy.argmax", "numpy.sum", "len", "images.cuda.cuda.cuda", "Update.ServerUpdate.get_ensemble_logits", "numpy.sum", "len", "float", "numpy.argmax", "labels.numpy", "labels.numpy"], "methods", ["home.repos.pwc.inspect_result.hongyouc_fedbe.models.Update.ServerUpdate.get_ensemble_logits"], ["", "def", "eval_ensemble", "(", "self", ",", "teachers", ",", "dataset", ")", ":", "\n", "        ", "acc", "=", "0.0", "\n", "cnt", "=", "0", "\n", "\n", "if", "self", ".", "args", ".", "soft_vote", ":", "\n", "          ", "num_votes_list", ",", "soft_vote", "=", "get_aum", "(", "self", ".", "args", ",", "teachers", ",", "dataset", ")", "\n", "for", "batch_idx", ",", "(", "_", ",", "labels", ")", "in", "enumerate", "(", "dataset", ")", ":", "\n", "              ", "logits", "=", "soft_vote", "[", "batch_idx", "]", "\n", "logits", "=", "np", ".", "argmax", "(", "logits", ",", "axis", "=", "-", "1", ")", "\n", "acc", "+=", "np", ".", "sum", "(", "logits", "==", "labels", ".", "numpy", "(", ")", ")", "\n", "cnt", "+=", "len", "(", "labels", ")", "\n", "\n", "", "", "else", ":", "\n", "          ", "for", "batch_idx", ",", "(", "images", ",", "labels", ")", "in", "enumerate", "(", "dataset", ")", ":", "\n", "              ", "images", "=", "images", ".", "cuda", "(", ")", "\n", "logits", ",", "_", "=", "self", ".", "get_ensemble_logits", "(", "teachers", ",", "images", ",", "method", "=", "self", ".", "args", ".", "logit_method", ",", "global_ep", "=", "1000", ")", "\n", "\n", "if", "self", ".", "args", ".", "logit_method", "!=", "\"vote\"", ":", "\n", "                ", "logits", "=", "np", ".", "argmax", "(", "logits", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "acc", "+=", "np", ".", "sum", "(", "logits", "==", "labels", ".", "numpy", "(", ")", ")", "\n", "cnt", "+=", "len", "(", "labels", ")", "\n", "\n", "", "", "return", "float", "(", "acc", ")", "/", "cnt", "*", "100.0", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.models.Update.ServerUpdate.loss_wrapper": [[185, 219], ["numpy.sum", "len", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "numpy.sum", "len", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "numpy.argmax", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.softmax", "torch.softmax", "torch.softmax", "Update.ServerUpdate.loss_func", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "numpy.argmax", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "P.log", "torch.Tensor().cuda().log", "torch.Tensor().cuda().log", "torch.Tensor().cuda().log", "torch.Tensor().cuda().log", "torch.Tensor().cuda().log", "torch.Tensor().cuda().log", "torch.Tensor().cuda().log", "torch.Tensor().cuda().log", "torch.Tensor().cuda().log", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "P.log", "Q.log", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["", "def", "loss_wrapper", "(", "self", ",", "log_probs", ",", "logits", ",", "labels", ")", ":", "\n", "# Modify target logits", "\n", "        ", "if", "self", ".", "loss_type", "==", "\"CE\"", ":", "\n", "          ", "if", "self", ".", "args", ".", "logit_method", "!=", "\"vote\"", ":", "\n", "            ", "logits", "=", "np", ".", "argmax", "(", "logits", ",", "axis", "=", "-", "1", ")", "\n", "", "acc_cnt", "=", "np", ".", "sum", "(", "logits", "==", "labels", ")", "\n", "cnt", "=", "len", "(", "labels", ")", "\n", "logits", "=", "torch", ".", "Tensor", "(", "logits", ")", ".", "long", "(", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "", "else", ":", "\n", "          ", "acc_cnt", "=", "np", ".", "sum", "(", "np", ".", "argmax", "(", "logits", ",", "axis", "=", "-", "1", ")", "==", "labels", ")", "\n", "cnt", "=", "len", "(", "labels", ")", "\n", "logits", "=", "torch", ".", "Tensor", "(", "logits", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "\n", "# For loss function", "\n", "", "if", "self", ".", "args", ".", "use_oracle", ":", "\n", "          ", "loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "(", "log_probs", ",", "torch", ".", "Tensor", "(", "labels", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", ")", "\n", "", "else", ":", "\n", "          ", "if", "\"KL\"", "in", "self", ".", "loss_type", ":", "\n", "            ", "log_probs", "=", "F", ".", "softmax", "(", "log_probs", ",", "dim", "=", "-", "1", ")", "\n", "if", "self", ".", "loss_type", "==", "\"reverse_KL\"", ":", "\n", "              ", "P", "=", "log_probs", "\n", "Q", "=", "logits", "\n", "", "else", ":", "\n", "              ", "P", "=", "logits", "\n", "Q", "=", "log_probs", "\n", "\n", "", "one_vec", "=", "(", "P", "*", "(", "P", ".", "log", "(", ")", "-", "torch", ".", "Tensor", "(", "[", "0.1", "]", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", ".", "log", "(", ")", ")", ")", "\n", "loss", "=", "(", "P", "*", "(", "P", ".", "log", "(", ")", "-", "Q", ".", "log", "(", ")", ")", ")", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "loss", "=", "self", ".", "loss_func", "(", "log_probs", ",", "logits", ")", "\n", "\n", "", "", "return", "loss", ",", "acc_cnt", ",", "cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.models.Update.ServerUpdate.test_net": [[220, 226], ["tmp_net.cuda.cuda.cuda", "tmp_net.cuda.cuda.", "Update.ServerUpdate.eval_images.cuda", "Update.ServerUpdate.eval_labels.cuda", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan"], "methods", ["None"], ["", "def", "test_net", "(", "self", ",", "tmp_net", ")", ":", "\n", "        ", "tmp_net", "=", "tmp_net", ".", "cuda", "(", ")", "\n", "(", "input", ",", "label", ")", "=", "(", "self", ".", "eval_images", ".", "cuda", "(", ")", ",", "self", ".", "eval_labels", ".", "cuda", "(", ")", ")", "\n", "log_probs", "=", "tmp_net", "(", "input", ")", "\n", "loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "(", "log_probs", ",", "label", ")", "\n", "return", "not", "torch", ".", "isnan", "(", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.models.Update.ServerUpdate.record_teacher": [[227, 279], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "len", "len", "Update.ServerUpdate.get_ensemble_logits", "scipy.stats.entropy.append", "images.numpy", "labels.numpy", "len", "Update.ServerUpdate.eval_ensemble", "Update.ServerUpdate.eval_ensemble", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.ylim", "matplotlib.title", "matplotlib.legend", "matplotlib.savefig", "matplotlib.clf", "images.cuda", "range", "range", "range", "os.path.join", "len", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.hongyouc_fedbe.models.Update.ServerUpdate.get_ensemble_logits", "home.repos.pwc.inspect_result.hongyouc_fedbe.models.Update.ServerUpdate.eval_ensemble", "home.repos.pwc.inspect_result.hongyouc_fedbe.models.Update.ServerUpdate.eval_ensemble"], ["", "def", "record_teacher", "(", "self", ",", "ldr_train", ",", "net", ",", "teachers", ",", "global_ep", ",", "log_dir", "=", "None", ",", "probe", "=", "True", ",", "resample", "=", "False", ")", ":", "\n", "        ", "entropy", "=", "[", "]", "\n", "ldr_train", "=", "[", "]", "\n", "\n", "acc_per_teacher", "=", "np", ".", "zeros", "(", "(", "len", "(", "teachers", ")", ")", ")", "\n", "conf_per_teacher", "=", "np", ".", "zeros", "(", "(", "len", "(", "teachers", ")", ")", ")", "\n", "teacher_per_sample", "=", "0.0", "\n", "has_correct_teacher_ratio", "=", "0.0", "\n", "\n", "num", "=", "self", ".", "server_data_size", "\n", "if", "\"cifar\"", "in", "self", ".", "args", ".", "dataset", ":", "\n", "          ", "imgsize", "=", "32", "\n", "", "elif", "\"mnist\"", "in", "self", ".", "args", ".", "dataset", ":", "\n", "          ", "imgsize", "=", "28", "\n", "\n", "", "channel", "=", "1", "if", "self", ".", "args", ".", "dataset", "==", "\"mnist\"", "else", "3", "\n", "all_images", "=", "np", ".", "zeros", "(", "(", "num", ",", "channel", ",", "imgsize", ",", "imgsize", ")", ")", "\n", "all_logits", "=", "np", ".", "zeros", "(", "(", "num", ",", "self", ".", "args", ".", "num_classes", ")", ")", "\n", "all_labels", "=", "np", ".", "zeros", "(", "(", "num", ")", ")", "\n", "cnt", "=", "0", "\n", "for", "batch_idx", ",", "(", "images", ",", "labels", ")", "in", "enumerate", "(", "self", ".", "ldr_train", ")", ":", "\n", "            ", "logits", ",", "batch_entropy", "=", "self", ".", "get_ensemble_logits", "(", "teachers", ",", "images", ".", "cuda", "(", ")", ",", "method", "=", "self", ".", "args", ".", "logit_method", ",", "global_ep", "=", "global_ep", ")", "\n", "entropy", ".", "append", "(", "batch_entropy", ")", "\n", "\n", "all_images", "[", "cnt", ":", "cnt", "+", "len", "(", "images", ")", "]", "=", "images", ".", "numpy", "(", ")", "\n", "all_logits", "[", "cnt", ":", "cnt", "+", "len", "(", "images", ")", "]", "=", "logits", "\n", "all_labels", "[", "cnt", ":", "cnt", "+", "len", "(", "images", ")", "]", "=", "labels", ".", "numpy", "(", ")", "\n", "cnt", "+=", "len", "(", "images", ")", "\n", "\n", "", "ldr_train", "=", "(", "all_images", ",", "all_logits", ",", "all_labels", ")", "\n", "#=============================", "\n", "# If args.soft_vote = True: ", "\n", "#    soft_vote from experts", "\n", "# Else: ", "\n", "#    just mean of all logits", "\n", "#=============================", "\n", "if", "not", "probe", ":", "\n", "          ", "return", "ldr_train", ",", "0.0", ",", "0.0", "\n", "", "else", ":", "\n", "          ", "test_acc", "=", "self", ".", "eval_ensemble", "(", "teachers", ",", "self", ".", "test_dataset", ")", "\n", "train_acc", "=", "self", ".", "eval_ensemble", "(", "teachers", ",", "self", ".", "ldr_local_train", ")", "\n", "\n", "plt", ".", "plot", "(", "range", "(", "len", "(", "teachers", ")", ")", ",", "acc_per_teacher", ",", "marker", "=", "\"o\"", ",", "label", "=", "\"Acc\"", ")", "\n", "plt", ".", "plot", "(", "range", "(", "len", "(", "teachers", ")", ")", ",", "conf_per_teacher", ",", "marker", "=", "\"o\"", ",", "label", "=", "\"Confidence\"", ")", "\n", "plt", ".", "plot", "(", "range", "(", "len", "(", "teachers", ")", ")", ",", "conf_per_teacher", "-", "acc_per_teacher", ",", "marker", "=", "\"o\"", ",", "label", "=", "\"Confidence - Acc\"", ")", "\n", "plt", ".", "ylim", "(", "ymax", "=", "1.0", ",", "ymin", "=", "-", "0.2", ")", "\n", "plt", ".", "title", "(", "\"Round %d, correct teacher/per sample %.2f, upperbound correct %.1f percentage\"", "%", "(", "global_ep", ",", "teacher_per_sample", ",", "has_correct_teacher_ratio", "*", "100.0", ")", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'best'", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "\"acc_per_teacher_%d.png\"", "%", "global_ep", ")", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "\n", "return", "ldr_train", ",", "train_acc", ",", "test_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.models.Update.ServerUpdate.set_opt": [[280, 286], ["torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "net.parameters", "models.swa.SWA"], "methods", ["None"], ["", "", "def", "set_opt", "(", "self", ",", "net", ")", ":", "\n", "        ", "base_opt", "=", "torch", ".", "optim", ".", "SGD", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "1e-3", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "0.00001", ")", "\n", "if", "self", ".", "args", ".", "use_SWA", ":", "\n", "            ", "self", ".", "optimizer", "=", "SWA", "(", "base_opt", ",", "swa_start", "=", "500", ",", "swa_freq", "=", "25", ",", "swa_lr", "=", "None", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "optimizer", "=", "base_opt", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.models.Update.ServerUpdate.train": [[287, 355], ["Update.ServerUpdate.set_opt", "Update.ServerUpdate.record_teacher", "print", "net.cpu.cpu.cuda", "net.cpu.cpu.train", "range", "copy.deepcopy", "net.cpu.cpu.cpu", "copy.deepcopy", "copy.deepcopy.cpu().state_dict", "print", "list", "numpy.random.shuffle", "range", "epoch_loss.append", "Update.ServerUpdate.optimizer.swap_swa_sgd", "net.cpu.cpu.state_dict", "range", "len", "net.cpu.cpu.zero_grad", "net.cpu.cpu.", "Update.ServerUpdate.loss_wrapper", "loss.backward", "Update.ServerUpdate.optimizer.step", "batch_loss.append", "float", "Update.ServerUpdate.optimizer.bn_update", "copy.deepcopy.cpu", "sum", "len", "len", "Update.ServerUpdate.transform_train", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "print", "loss.item", "sum", "len", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "len", "loss.item", "len", "len"], "methods", ["home.repos.pwc.inspect_result.hongyouc_fedbe.models.Update.ServerUpdate.set_opt", "home.repos.pwc.inspect_result.hongyouc_fedbe.models.Update.ServerUpdate.record_teacher", "home.repos.pwc.inspect_result.hongyouc_fedbe.models.Update.ServerUpdate.train", "home.repos.pwc.inspect_result.hongyouc_fedbe.models.swa.SWA.state_dict", "home.repos.pwc.inspect_result.hongyouc_fedbe.models.swa.SWA.swap_swa_sgd", "home.repos.pwc.inspect_result.hongyouc_fedbe.models.swa.SWA.state_dict", "home.repos.pwc.inspect_result.hongyouc_fedbe.models.Update.ServerUpdate.loss_wrapper", "home.repos.pwc.inspect_result.hongyouc_fedbe.models.swa.SWA.step", "home.repos.pwc.inspect_result.hongyouc_fedbe.models.swa.SWA.bn_update", "home.repos.pwc.inspect_result.hongyouc_fedbe.models.Update.ServerUpdate.transform_train"], ["", "", "def", "train", "(", "self", ",", "net", ",", "teachers", ",", "log_dir", ",", "global_ep", ",", "server_dataset", "=", "None", ")", ":", "\n", "#======================Record teachers========================", "\n", "        ", "self", ".", "set_opt", "(", "net", ")", "\n", "\n", "to_probe", "=", "True", "if", "global_ep", "%", "self", ".", "args", ".", "log_ep", "==", "0", "else", "False", "\n", "ldr_train", "=", "[", "]", "\n", "ldr_train", ",", "train_acc", ",", "test_acc", "=", "self", ".", "record_teacher", "(", "ldr_train", ",", "net", ",", "teachers", ",", "global_ep", ",", "log_dir", ",", "probe", "=", "to_probe", ")", "\n", "(", "all_images", ",", "all_logits", ",", "all_labels", ")", "=", "ldr_train", "\n", "#======================Server Train========================", "\n", "print", "(", "\"Start server training...\"", ")", "\n", "net", ".", "cuda", "(", ")", "\n", "net", ".", "train", "(", ")", "\n", "\n", "epoch_loss", "=", "[", "]", "\n", "acc", "=", "0", "\n", "cnt", "=", "0", "\n", "\n", "step", "=", "0", "\n", "train_ep", "=", "self", ".", "args", ".", "server_ep", "\n", "for", "iter", "in", "range", "(", "train_ep", ")", ":", "\n", "            ", "all_ids", "=", "list", "(", "range", "(", "len", "(", "all_images", ")", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "all_ids", ")", "\n", "\n", "batch_loss", "=", "[", "]", "\n", "for", "batch_idx", "in", "range", "(", "0", ",", "len", "(", "all_images", ")", ",", "self", ".", "args", ".", "server_bs", ")", ":", "\n", "                ", "ids", "=", "all_ids", "[", "batch_idx", ":", "batch_idx", "+", "self", ".", "args", ".", "server_bs", "]", "\n", "images", "=", "all_images", "[", "ids", "]", "\n", "\n", "if", "self", ".", "aug", ":", "\n", "                  ", "images", "=", "self", ".", "transform_train", "(", "images", ")", "\n", "", "else", ":", "\n", "                  ", "images", "=", "torch", ".", "Tensor", "(", "images", ")", ".", "cuda", "(", ")", "\n", "", "logits", "=", "all_logits", "[", "ids", "]", "\n", "labels", "=", "all_labels", "[", "ids", "]", "\n", "\n", "net", ".", "zero_grad", "(", ")", "\n", "log_probs", "=", "net", "(", "images", ")", "\n", "\n", "loss", ",", "acc_cnt_i", ",", "cnt_i", "=", "self", ".", "loss_wrapper", "(", "log_probs", ",", "logits", ",", "labels", ")", "\n", "acc", "+=", "acc_cnt_i", "\n", "cnt", "+=", "cnt_i", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "step", "+=", "1", "\n", "\n", "if", "batch_idx", "==", "0", "and", "iter", "%", "5", "==", "0", ":", "\n", "                    ", "print", "(", "'Update Epoch: {} [{}/{} ({:.0f}%)]\\tLoss: {:.6f}'", ".", "format", "(", "\n", "iter", ",", "batch_idx", "*", "len", "(", "images", ")", ",", "len", "(", "self", ".", "ldr_train", ".", "dataset", ")", ",", "\n", "100.", "*", "batch_idx", "/", "len", "(", "self", ".", "ldr_train", ")", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "", "batch_loss", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "", "epoch_loss", ".", "append", "(", "sum", "(", "batch_loss", ")", "/", "len", "(", "batch_loss", ")", ")", "\n", "\n", "", "val_acc", "=", "float", "(", "acc", ")", "/", "cnt", "*", "100.0", "\n", "net_glob", "=", "copy", ".", "deepcopy", "(", "net", ")", "\n", "\n", "if", "self", ".", "args", ".", "use_SWA", ":", "\n", "          ", "self", ".", "optimizer", ".", "swap_swa_sgd", "(", ")", "\n", "if", "\"resnet\"", "in", "self", ".", "args", ".", "model", ":", "\n", "            ", "self", ".", "optimizer", ".", "bn_update", "(", "self", ".", "ldr_train", ",", "net", ",", "device", "=", "None", ")", "\n", "\n", "", "", "net", "=", "net", ".", "cpu", "(", ")", "\n", "w_glob_avg", "=", "copy", ".", "deepcopy", "(", "net", ".", "state_dict", "(", ")", ")", "\n", "w_glob", "=", "net_glob", ".", "cpu", "(", ")", ".", "state_dict", "(", ")", "\n", "\n", "print", "(", "\"Ensemble Acc Train %.2f Val %.2f Test %.2f mean entropy %.5f\"", "%", "(", "train_acc", ",", "val_acc", ",", "test_acc", ",", "0.0", ")", ")", "\n", "return", "w_glob_avg", ",", "w_glob", ",", "train_acc", ",", "val_acc", ",", "test_acc", ",", "sum", "(", "epoch_loss", ")", "/", "len", "(", "epoch_loss", ")", ",", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.models.Update.check_size": [[357, 363], ["type", "type", "TypeError"], "function", ["None"], ["", "", "def", "check_size", "(", "size", ")", ":", "\n", "    ", "if", "type", "(", "size", ")", "==", "int", ":", "\n", "        ", "size", "=", "(", "size", ",", "size", ")", "\n", "", "if", "type", "(", "size", ")", "!=", "tuple", ":", "\n", "        ", "raise", "TypeError", "(", "'size is int or tuple'", ")", "\n", "", "return", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.models.Update.random_crop": [[364, 376], ["enumerate", "numpy.pad", "numpy.random.randint", "numpy.random.randint"], "function", ["None"], ["", "def", "random_crop", "(", "images", ",", "crop_size", ")", ":", "\n", "    ", "for", "i", ",", "image", "in", "enumerate", "(", "images", ")", ":", "\n", "      ", "image", "=", "np", ".", "pad", "(", "image", ",", "crop_size", ")", "\n", "_", ",", "h", ",", "w", "=", "image", ".", "shape", "\n", "top", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "crop_size", "*", "2", ")", "\n", "left", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "crop_size", "*", "2", ")", "\n", "bottom", "=", "top", "+", "(", "h", "-", "2", "*", "crop_size", ")", "\n", "right", "=", "left", "+", "(", "w", "-", "2", "*", "crop_size", ")", "\n", "\n", "images", "[", "i", "]", "=", "image", "[", "crop_size", ":", "-", "crop_size", ",", "top", ":", "bottom", ",", "left", ":", "right", "]", "\n", "\n", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.models.Update.horizontal_flip": [[377, 382], ["numpy.random.rand", "numpy.flip"], "function", ["None"], ["", "def", "horizontal_flip", "(", "image", ",", "rate", "=", "0.5", ")", ":", "\n", "    ", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "rate", ":", "\n", "#image = image[:, :, :, ::-1]", "\n", "        ", "image", "=", "np", ".", "flip", "(", "image", ",", "axis", "=", "-", "1", ")", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.models.Fed.create_local_init": [[10, 18], ["glob.keys"], "function", ["None"], ["def", "create_local_init", "(", "glob", ",", "local", ",", "bias_ratio", ")", ":", "\n", "    ", "assert", "bias_ratio", "<=", "1.0", "and", "bias_ratio", ">=", "0.0", "\n", "for", "k", "in", "glob", ".", "keys", "(", ")", ":", "\n", "      ", "if", "bias_ratio", ">", "0", ":", "\n", "        ", "glob", "[", "k", "]", "=", "glob", "[", "k", "]", "*", "(", "1", "-", "bias_ratio", ")", "+", "local", "[", "k", "]", "*", "(", "bias_ratio", ")", "\n", "", "else", ":", "\n", "        ", "glob", "[", "k", "]", "=", "(", "glob", "[", "k", "]", "+", "local", "[", "k", "]", "*", "bias_ratio", ")", "/", "(", "1.0", "+", "bias_ratio", ")", "\n", "", "", "return", "glob", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.models.Fed.FedAvg": [[20, 46], ["w[].keys", "torch.zeros", "numpy.sum", "numpy.array", "w_avg.keys", "w_avg.keys", "[].size", "numpy.array", "len", "range", "torch.div", "range", "torch.div", "len", "len", "len", "len", "len", "torch.norm", "torch.norm", "float"], "function", ["None"], ["", "def", "FedAvg", "(", "w", ",", "gpu", ",", "global_w", "=", "None", ",", "size_arr", "=", "None", ")", ":", "\n", "    ", "w_avg", "=", "{", "}", "\n", "for", "k", "in", "w", "[", "0", "]", ".", "keys", "(", ")", ":", "\n", "      ", "w_avg", "[", "k", "]", "=", "torch", ".", "zeros", "(", "w", "[", "0", "]", "[", "k", "]", ".", "size", "(", ")", ")", "\n", "\n", "# Prepare p ", "\n", "", "if", "size_arr", "is", "not", "None", ":", "\n", "      ", "total_num", "=", "np", ".", "sum", "(", "size_arr", ")", "\n", "size_arr", "=", "np", ".", "array", "(", "[", "float", "(", "p", ")", "/", "total_num", "for", "p", "in", "size_arr", "]", ")", "*", "len", "(", "size_arr", ")", "\n", "", "else", ":", "\n", "      ", "size_arr", "=", "np", ".", "array", "(", "[", "1.0", "]", "*", "len", "(", "size_arr", ")", ")", "\n", "\n", "", "if", "global_w", "is", "not", "None", ":", "\n", "      ", "for", "k", "in", "w_avg", ".", "keys", "(", ")", ":", "\n", "          ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "w", ")", ")", ":", "\n", "            ", "grad", "=", "w", "[", "i", "]", "[", "k", "]", "\n", "grad_norm", "=", "torch", ".", "norm", "(", "grad", ",", "p", "=", "2", ")", "/", "torch", ".", "norm", "(", "global_w", "[", "k", "]", ",", "p", "=", "2", ")", "\n", "w_avg", "[", "k", "]", "+=", "size_arr", "[", "i", "]", "*", "grad", "/", "grad_norm", "\n", "", "w_avg", "[", "k", "]", "=", "torch", ".", "div", "(", "w_avg", "[", "k", "]", ",", "len", "(", "w", ")", ")", "\n", "", "", "else", ":", "\n", "      ", "for", "k", "in", "w_avg", ".", "keys", "(", ")", ":", "\n", "          ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "w", ")", ")", ":", "\n", "            ", "w_avg", "[", "k", "]", "+=", "size_arr", "[", "i", "]", "*", "w", "[", "i", "]", "[", "k", "]", "\n", "", "w_avg", "[", "k", "]", "=", "torch", ".", "div", "(", "w_avg", "[", "k", "]", ",", "len", "(", "w", ")", ")", "\n", "\n", "", "", "return", "w_avg", "\n", "", ""]], "home.repos.pwc.inspect_result.hongyouc_fedbe.models.test.DatasetSplit.__init__": [[12, 15], ["list"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "idxs", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "idxs", "=", "list", "(", "idxs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.models.test.DatasetSplit.__len__": [[16, 18], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "idxs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.models.test.DatasetSplit.__getitem__": [[19, 22], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "image", ",", "label", "=", "self", ".", "dataset", "[", "self", ".", "idxs", "[", "item", "]", "]", "\n", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.models.test.onehot_encode": [[23, 28], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros", "torch.zeros", "len", "range"], "function", ["None"], ["", "", "def", "onehot_encode", "(", "target", ",", "n_classes", ")", ":", "\n", "    ", "y", "=", "torch", ".", "zeros", "(", "len", "(", "target", ")", ",", "n_classes", ")", ".", "cuda", "(", ")", "\n", "y", "[", "range", "(", "y", ".", "shape", "[", "0", "]", ")", ",", "target", "]", "=", "1", "\n", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.models.test.test_img": [[29, 58], ["net_g.cuda.eval", "torch.utils.data.DataLoader", "len", "net_g.cuda.cuda", "test.DatasetSplit", "torch.no_grad", "torch.no_grad", "enumerate", "print", "accuracy.numpy", "net_g.cuda.", "torch.cross_entropy().item", "target.data.view_as.data.view_as", "y_pred.eq().long().cpu().sum", "len", "net_g.data.max", "len", "data.cuda", "target.data.view_as.cuda", "torch.cross_entropy", "y_pred.eq().long().cpu", "y_pred.eq().long", "y_pred.eq"], "function", ["None"], ["", "def", "test_img", "(", "net_g", ",", "datatest", ",", "args", ",", "idxs", ",", "reweight", "=", "None", ",", "cls_num", "=", "10", ")", ":", "\n", "    ", "net_g", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "cnt", "=", "0.0", "\n", "\n", "data_loader", "=", "DataLoader", "(", "DatasetSplit", "(", "datatest", ",", "idxs", ")", ",", "batch_size", "=", "1024", ",", "shuffle", "=", "False", ")", "\n", "l", "=", "len", "(", "data_loader", ")", "\n", "net_g", "=", "net_g", ".", "cuda", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "for", "idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "          ", "if", "args", ".", "gpu", "!=", "-", "1", ":", "\n", "              ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "", "log_probs", "=", "net_g", "(", "data", ")", "\n", "# sum up batch loss", "\n", "test_loss", "+=", "F", ".", "cross_entropy", "(", "log_probs", ",", "target", ",", "reduction", "=", "'sum'", ")", ".", "item", "(", ")", "\n", "# get the index of the max log-probability", "\n", "y_pred", "=", "log_probs", ".", "data", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "target", "=", "target", ".", "data", ".", "view_as", "(", "y_pred", ")", "\n", "correct", "+=", "y_pred", ".", "eq", "(", "target", ")", ".", "long", "(", ")", ".", "cpu", "(", ")", ".", "sum", "(", ")", "\n", "cnt", "+=", "len", "(", "data", ")", "\n", "\n", "", "", "test_loss", "/=", "cnt", "\n", "accuracy", "=", "100.00", "*", "correct", "/", "cnt", "\n", "\n", "if", "args", ".", "verbose", ":", "\n", "        ", "print", "(", "'\\nTest set: Average loss: {:.4f} \\nAccuracy: {}/{} ({:.2f}%)\\n'", ".", "format", "(", "\n", "test_loss", ",", "correct", ",", "len", "(", "data_loader", ".", "dataset", ")", ",", "accuracy", ")", ")", "\n", "", "return", "accuracy", ".", "numpy", "(", ")", ",", "test_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.models.swa.SWA.__init__": [[9, 129], ["swa.SWA._check_params", "collections.defaultdict", "ValueError", "ValueError", "ValueError", "warnings.warn"], "methods", ["home.repos.pwc.inspect_result.hongyouc_fedbe.models.swa.SWA._check_params"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "swa_start", "=", "None", ",", "swa_freq", "=", "None", ",", "swa_lr", "=", "None", ")", ":", "\n", "        ", "r\"\"\"Implements Stochastic Weight Averaging (SWA).\n\n        Stochastic Weight Averaging was proposed in `Averaging Weights Leads to\n        Wider Optima and Better Generalization`_ by Pavel Izmailov, Dmitrii\n        Podoprikhin, Timur Garipov, Dmitry Vetrov and Andrew Gordon Wilson\n        (UAI 2018).\n\n        SWA is implemented as a wrapper class taking optimizer instance as input\n        and applying SWA on top of that optimizer.\n\n        SWA can be used in two modes: automatic and manual. In the automatic\n        mode SWA running averages are automatically updated every\n        :attr:`swa_freq` steps after :attr:`swa_start` steps of optimization. If\n        :attr:`swa_lr` is provided, the learning rate of the optimizer is reset\n        to :attr:`swa_lr` at every step starting from :attr:`swa_start`. To use\n        SWA in automatic mode provide values for both :attr:`swa_start` and\n        :attr:`swa_freq` arguments.\n\n        Alternatively, in the manual mode, use :meth:`update_swa` or\n        :meth:`update_swa_group` methods to update the SWA running averages.\n\n        In the end of training use `swap_swa_sgd` method to set the optimized\n        variables to the computed averages.\n\n        Args:\n            optimizer (torch.optim.Optimizer): optimizer to use with SWA\n            swa_start (int): number of steps before starting to apply SWA in\n                automatic mode; if None, manual mode is selected (default: None)\n            swa_freq (int): number of steps between subsequent updates of\n                SWA running averages in automatic mode; if None, manual mode is\n                selected (default: None)\n            swa_lr (float): learning rate to use starting from step swa_start\n                in automatic mode; if None, learning rate is not changed\n                (default: None)\n\n        Examples:\n            >>> # automatic mode\n            >>> base_opt = torch.optim.SGD(model.parameters(), lr=0.1)\n            >>> opt = torchcontrib.optim.SWA(\n            >>>                 base_opt, swa_start=10, swa_freq=5, swa_lr=0.05)\n            >>> for _ in range(100):\n            >>>     opt.zero_grad()\n            >>>     loss_fn(model(input), target).backward()\n            >>>     opt.step()\n            >>> opt.swap_swa_sgd()\n            >>> # manual mode\n            >>> opt = torchcontrib.optim.SWA(base_opt)\n            >>> for i in range(100):\n            >>>     opt.zero_grad()\n            >>>     loss_fn(model(input), target).backward()\n            >>>     opt.step()\n            >>>     if i > 10 and i % 5 == 0:\n            >>>         opt.update_swa()\n            >>> opt.swap_swa_sgd()\n\n        .. note::\n            SWA does not support parameter-specific values of :attr:`swa_start`,\n            :attr:`swa_freq` or :attr:`swa_lr`. In automatic mode SWA uses the\n            same :attr:`swa_start`, :attr:`swa_freq` and :attr:`swa_lr` for all\n            parameter groups. If needed, use manual mode withbn_update\n            :meth:`update_swa_group` to use different update schedules for\n            different parameter groups.\n\n        .. note::\n            Call :meth:`swap_swa_sgd` in the end of training to use the computed\n            running averages.\n\n        .. note::\n            If you are using SWA to optimize the parameters of a Neural Network\n            containing Batch Normalization layers, you need to update the\n            :attr:`running_mean` and :attr:`running_var` statistics of the\n            Batch Normalization module. You can do so by using\n            `torchcontrib.optim.swa.` utility.\n\n        .. note::\n            See the blogpost\n            https://pytorch.org/blog/stochastic-weight-averaging-in-pytorch/\n            for an extended description of this SWA implementation.\n\n        .. note::\n            The repo https://github.com/izmailovpavel/contrib_swa_examples\n            contains examples of using this SWA implementation.\n\n        .. _Averaging Weights Leads to Wider Optima and Better Generalization:\n            https://arxiv.org/abs/1803.05407\n        .. _Improving Consistency-Based Semi-Supervised Learning with Weight\n            Averaging:\n            https://arxiv.org/abs/1806.05594\n        \"\"\"", "\n", "self", ".", "_auto_mode", ",", "(", "self", ".", "swa_start", ",", "self", ".", "swa_freq", ")", "=", "self", ".", "_check_params", "(", "self", ",", "swa_start", ",", "swa_freq", ")", "\n", "self", ".", "swa_lr", "=", "swa_lr", "\n", "\n", "if", "self", ".", "_auto_mode", ":", "\n", "            ", "if", "swa_start", "<", "0", ":", "\n", "                ", "raise", "ValueError", "(", "\"Invalid swa_start: {}\"", ".", "format", "(", "swa_start", ")", ")", "\n", "", "if", "swa_freq", "<", "1", ":", "\n", "                ", "raise", "ValueError", "(", "\"Invalid swa_freq: {}\"", ".", "format", "(", "swa_freq", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "swa_lr", "is", "not", "None", ":", "\n", "                ", "warnings", ".", "warn", "(", "\n", "\"Some of swa_start, swa_freq is None, ignoring swa_lr\"", ")", "\n", "# If not in auto mode make all swa parameters None", "\n", "", "self", ".", "swa_lr", "=", "None", "\n", "self", ".", "swa_start", "=", "None", "\n", "self", ".", "swa_freq", "=", "None", "\n", "\n", "", "if", "self", ".", "swa_lr", "is", "not", "None", "and", "self", ".", "swa_lr", "<", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid SWA learning rate: {}\"", ".", "format", "(", "swa_lr", ")", ")", "\n", "\n", "", "self", ".", "optimizer", "=", "optimizer", "\n", "\n", "self", ".", "defaults", "=", "self", ".", "optimizer", ".", "defaults", "\n", "self", ".", "param_groups", "=", "self", ".", "optimizer", ".", "param_groups", "\n", "self", ".", "state", "=", "defaultdict", "(", "dict", ")", "\n", "self", ".", "opt_state", "=", "self", ".", "optimizer", ".", "state", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "group", "[", "'n_avg'", "]", "=", "0", "\n", "group", "[", "'step_counter'", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.models.swa.SWA._check_params": [[130, 142], ["enumerate", "any", "warnings.warn", "all", "int", "warnings.warn", "any", "isinstance"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_check_params", "(", "self", ",", "swa_start", ",", "swa_freq", ")", ":", "\n", "        ", "params", "=", "[", "swa_start", ",", "swa_freq", "]", "\n", "params_none", "=", "[", "param", "is", "None", "for", "param", "in", "params", "]", "\n", "if", "not", "all", "(", "params_none", ")", "and", "any", "(", "params_none", ")", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "\"Some of swa_start, swa_freq is None, ignoring other\"", ")", "\n", "", "for", "i", ",", "param", "in", "enumerate", "(", "params", ")", ":", "\n", "            ", "if", "param", "is", "not", "None", "and", "not", "isinstance", "(", "param", ",", "int", ")", ":", "\n", "                ", "params", "[", "i", "]", "=", "int", "(", "param", ")", "\n", "warnings", ".", "warn", "(", "\"Casting swa_start, swa_freq to int\"", ")", "\n", "", "", "return", "not", "any", "(", "params_none", ")", ",", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.models.swa.SWA._reset_lr_to_swa": [[143, 149], ["None"], "methods", ["None"], ["", "def", "_reset_lr_to_swa", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "swa_lr", "is", "None", ":", "\n", "            ", "return", "\n", "", "for", "param_group", "in", "self", ".", "param_groups", ":", "\n", "            ", "if", "param_group", "[", "'step_counter'", "]", ">=", "self", ".", "swa_start", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "self", ".", "swa_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.models.swa.SWA.update_swa_group": [[150, 180], ["buf.add_", "torch.zeros_like", "float"], "methods", ["None"], ["", "", "", "def", "update_swa_group", "(", "self", ",", "group", ")", ":", "\n", "        ", "r\"\"\"Updates the SWA running averages for the given parameter group.\n\n        Arguments:\n            param_group (dict): Specifies for what parameter group SWA running\n                averages should be updated\n\n        Examples:\n            >>> # automatic mode\n            >>> base_opt = torch.optim.SGD([{'params': [x]},\n            >>>             {'params': [y], 'lr': 1e-3}], lr=1e-2, momentum=0.9)\n            >>> opt = torchcontrib.optim.SWA(base_opt)\n            >>> for i in range(100):\n            >>>     opt.zero_grad()\n            >>>     loss_fn(model(input), target).backward()\n            >>>     opt.step()\n            >>>     if i > 10 and i % 5 == 0:\n            >>>         # Update SWA for the second parameter group\n            >>>         opt.update_swa_group(opt.param_groups[1])\n            >>> opt.swap_swa_sgd()\n        \"\"\"", "\n", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "            ", "param_state", "=", "self", ".", "state", "[", "p", "]", "\n", "if", "'swa_buffer'", "not", "in", "param_state", ":", "\n", "                ", "param_state", "[", "'swa_buffer'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "", "buf", "=", "param_state", "[", "'swa_buffer'", "]", "\n", "virtual_decay", "=", "1", "/", "float", "(", "group", "[", "\"n_avg\"", "]", "+", "1", ")", "\n", "diff", "=", "(", "p", ".", "data", "-", "buf", ")", "*", "virtual_decay", "\n", "buf", ".", "add_", "(", "diff", ")", "\n", "", "group", "[", "\"n_avg\"", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.models.swa.SWA.update_swa": [[181, 186], ["swa.SWA.update_swa_group"], "methods", ["home.repos.pwc.inspect_result.hongyouc_fedbe.models.swa.SWA.update_swa_group"], ["", "def", "update_swa", "(", "self", ")", ":", "\n", "        ", "r\"\"\"Updates the SWA running averages of all optimized parameters.\n        \"\"\"", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "self", ".", "update_swa_group", "(", "group", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.models.swa.SWA.swap_swa_sgd": [[187, 208], ["torch.empty_like", "torch.empty_like.copy_", "p.data.copy_", "buf.copy_", "warnings.warn"], "methods", ["None"], ["", "", "def", "swap_swa_sgd", "(", "self", ")", ":", "\n", "        ", "r\"\"\"Swaps the values of the optimized variables and swa buffers.\n\n        It's meant to be called in the end of training to use the collected\n        swa running averages. It can also be used to evaluate the running\n        averages during training; to continue training `swap_swa_sgd`\n        should be called again.\n        \"\"\"", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "param_state", "=", "self", ".", "state", "[", "p", "]", "\n", "if", "'swa_buffer'", "not", "in", "param_state", ":", "\n", "# If swa wasn't applied we don't swap params", "\n", "                    ", "warnings", ".", "warn", "(", "\n", "\"SWA wasn't applied to param {}; skipping it\"", ".", "format", "(", "p", ")", ")", "\n", "continue", "\n", "", "buf", "=", "param_state", "[", "'swa_buffer'", "]", "\n", "tmp", "=", "torch", ".", "empty_like", "(", "p", ".", "data", ")", "\n", "tmp", ".", "copy_", "(", "p", ".", "data", ")", "\n", "p", ".", "data", ".", "copy_", "(", "buf", ")", "\n", "buf", ".", "copy_", "(", "tmp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.models.swa.SWA.step": [[209, 223], ["swa.SWA._reset_lr_to_swa", "swa.SWA.optimizer.step", "swa.SWA.update_swa_group"], "methods", ["home.repos.pwc.inspect_result.hongyouc_fedbe.models.swa.SWA._reset_lr_to_swa", "home.repos.pwc.inspect_result.hongyouc_fedbe.models.swa.SWA.step", "home.repos.pwc.inspect_result.hongyouc_fedbe.models.swa.SWA.update_swa_group"], ["", "", "", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "r\"\"\"Performs a single optimization step.\n\n        In automatic mode also updates SWA running averages.\n        \"\"\"", "\n", "self", ".", "_reset_lr_to_swa", "(", ")", "\n", "loss", "=", "self", ".", "optimizer", ".", "step", "(", "closure", ")", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "group", "[", "\"step_counter\"", "]", "+=", "1", "\n", "steps", "=", "group", "[", "\"step_counter\"", "]", "\n", "if", "self", ".", "_auto_mode", ":", "\n", "                ", "if", "steps", ">", "self", ".", "swa_start", "and", "steps", "%", "self", ".", "swa_freq", "==", "0", ":", "\n", "                    ", "self", ".", "update_swa_group", "(", "group", ")", "\n", "", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.models.swa.SWA.state_dict": [[224, 242], ["swa.SWA.optimizer.state_dict", "isinstance", "id", "swa.SWA.state.items"], "methods", ["home.repos.pwc.inspect_result.hongyouc_fedbe.models.swa.SWA.state_dict"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "r\"\"\"Returns the state of SWA as a :class:`dict`.\n\n        It contains three entries:\n            * opt_state - a dict holding current optimization state of the base\n                optimizer. Its content differs between optimizer classes.\n            * swa_state - a dict containing current state of SWA. For each\n                optimized variable it contains swa_buffer keeping the running\n                average of the variable\n            * param_groups - a dict containing all parameter groups\n        \"\"\"", "\n", "opt_state_dict", "=", "self", ".", "optimizer", ".", "state_dict", "(", ")", "\n", "swa_state", "=", "{", "(", "id", "(", "k", ")", "if", "isinstance", "(", "k", ",", "torch", ".", "Tensor", ")", "else", "k", ")", ":", "v", "\n", "for", "k", ",", "v", "in", "self", ".", "state", ".", "items", "(", ")", "}", "\n", "opt_state", "=", "opt_state_dict", "[", "\"state\"", "]", "\n", "param_groups", "=", "opt_state_dict", "[", "\"param_groups\"", "]", "\n", "return", "{", "\"opt_state\"", ":", "opt_state", ",", "\"swa_state\"", ":", "swa_state", ",", "\n", "\"param_groups\"", ":", "param_groups", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.models.swa.SWA.load_state_dict": [[243, 257], ["super().load_state_dict", "swa.SWA.optimizer.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.hongyouc_fedbe.models.swa.SWA.load_state_dict", "home.repos.pwc.inspect_result.hongyouc_fedbe.models.swa.SWA.load_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "r\"\"\"Loads the optimizer state.\n\n        Args:\n            state_dict (dict): SWA optimizer state. Should be an object returned\n                from a call to `state_dict`.\n        \"\"\"", "\n", "swa_state_dict", "=", "{", "\"state\"", ":", "state_dict", "[", "\"swa_state\"", "]", ",", "\n", "\"param_groups\"", ":", "state_dict", "[", "\"param_groups\"", "]", "}", "\n", "opt_state_dict", "=", "{", "\"state\"", ":", "state_dict", "[", "\"opt_state\"", "]", ",", "\n", "\"param_groups\"", ":", "state_dict", "[", "\"param_groups\"", "]", "}", "\n", "super", "(", "SWA", ",", "self", ")", ".", "load_state_dict", "(", "swa_state_dict", ")", "\n", "self", ".", "optimizer", ".", "load_state_dict", "(", "opt_state_dict", ")", "\n", "self", ".", "opt_state", "=", "self", ".", "optimizer", ".", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.models.swa.SWA.add_param_group": [[258, 272], ["swa.SWA.optimizer.add_param_group"], "methods", ["home.repos.pwc.inspect_result.hongyouc_fedbe.models.swa.SWA.add_param_group"], ["", "def", "add_param_group", "(", "self", ",", "param_group", ")", ":", "\n", "        ", "r\"\"\"Add a param group to the :class:`Optimizer` s `param_groups`.\n\n        This can be useful when fine tuning a pre-trained network as frozen\n        layers can be made trainable and added to the :class:`Optimizer` as\n        training progresses.\n\n        Args:\n            param_group (dict): Specifies what Tensors should be optimized along\n            with group specific optimization options.\n        \"\"\"", "\n", "param_group", "[", "'n_avg'", "]", "=", "0", "\n", "param_group", "[", "'step_counter'", "]", "=", "0", "\n", "self", ".", "optimizer", ".", "add_param_group", "(", "param_group", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.models.swa.SWA.bn_update": [[273, 317], ["model.train", "model.apply", "model.apply", "model.apply", "model.train", "swa._check_bn", "isinstance", "input.cuda.cuda.size", "momenta.keys", "input.cuda.cuda.cuda", "model", "swa._get_momenta", "float", "swa._set_momenta"], "methods", ["home.repos.pwc.inspect_result.hongyouc_fedbe.models.Update.ServerUpdate.train", "home.repos.pwc.inspect_result.hongyouc_fedbe.models.Update.ServerUpdate.train", "home.repos.pwc.inspect_result.hongyouc_fedbe.models.swa._check_bn", "home.repos.pwc.inspect_result.hongyouc_fedbe.models.swa._get_momenta", "home.repos.pwc.inspect_result.hongyouc_fedbe.models.swa._set_momenta"], ["", "@", "staticmethod", "\n", "def", "bn_update", "(", "loader", ",", "model", ",", "device", "=", "None", ")", ":", "\n", "        ", "r\"\"\"Updates BatchNorm running_mean, running_var buffers in the model.\n\n        It performs one pass over data in `loader` to estimate the activation\n        statistics for BatchNorm layers in the model.\n\n        Args:\n            loader (torch.utils.data.DataLoader): dataset loader to compute the\n                activation statistics on. Each data batch should be either a\n                tensor, or a list/tuple whose first element is a tensor\n                containing data.\n\n            model (torch.nn.Module): model for which we seek to update BatchNorm\n                statistics.\n\n            device (torch.device, optional): If set, data will be trasferred to\n                :attr:`device` before being passed into :attr:`model`.\n        \"\"\"", "\n", "if", "not", "_check_bn", "(", "model", ")", ":", "\n", "            ", "return", "\n", "", "was_training", "=", "model", ".", "training", "\n", "model", ".", "train", "(", ")", "\n", "momenta", "=", "{", "}", "\n", "model", ".", "apply", "(", "_reset_bn", ")", "\n", "model", ".", "apply", "(", "lambda", "module", ":", "_get_momenta", "(", "module", ",", "momenta", ")", ")", "\n", "n", "=", "0", "\n", "for", "input", "in", "loader", ":", "\n", "            ", "if", "isinstance", "(", "input", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "                ", "input", "=", "input", "[", "0", "]", "\n", "", "b", "=", "input", ".", "size", "(", "0", ")", "\n", "\n", "momentum", "=", "b", "/", "float", "(", "n", "+", "b", ")", "\n", "for", "module", "in", "momenta", ".", "keys", "(", ")", ":", "\n", "                ", "module", ".", "momentum", "=", "momentum", "\n", "\n", "\n", "", "input", "=", "input", ".", "cuda", "(", ")", "\n", "\n", "model", "(", "input", ")", "\n", "n", "+=", "b", "\n", "\n", "", "model", ".", "apply", "(", "lambda", "module", ":", "_set_momenta", "(", "module", ",", "momenta", ")", ")", "\n", "model", ".", "train", "(", "was_training", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.models.swa._check_bn_apply": [[320, 323], ["issubclass"], "function", ["None"], ["", "", "def", "_check_bn_apply", "(", "module", ",", "flag", ")", ":", "\n", "    ", "if", "issubclass", "(", "module", ".", "__class__", ",", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "        ", "flag", "[", "0", "]", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.models.swa._check_bn": [[325, 329], ["model.apply", "swa._check_bn_apply"], "function", ["home.repos.pwc.inspect_result.hongyouc_fedbe.models.swa._check_bn_apply"], ["", "", "def", "_check_bn", "(", "model", ")", ":", "\n", "    ", "flag", "=", "[", "False", "]", "\n", "model", ".", "apply", "(", "lambda", "module", ":", "_check_bn_apply", "(", "module", ",", "flag", ")", ")", "\n", "return", "flag", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.models.swa._reset_bn": [[331, 335], ["issubclass", "torch.zeros_like", "torch.ones_like"], "function", ["None"], ["", "def", "_reset_bn", "(", "module", ")", ":", "\n", "    ", "if", "issubclass", "(", "module", ".", "__class__", ",", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "        ", "module", ".", "running_mean", "=", "torch", ".", "zeros_like", "(", "module", ".", "running_mean", ")", "\n", "module", ".", "running_var", "=", "torch", ".", "ones_like", "(", "module", ".", "running_var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.models.swa._get_momenta": [[337, 340], ["issubclass"], "function", ["None"], ["", "", "def", "_get_momenta", "(", "module", ",", "momenta", ")", ":", "\n", "    ", "if", "issubclass", "(", "module", ".", "__class__", ",", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "        ", "momenta", "[", "module", "]", "=", "module", ".", "momentum", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.models.swa._set_momenta": [[342, 345], ["issubclass"], "function", ["None"], ["", "", "def", "_set_momenta", "(", "module", ",", "momenta", ")", ":", "\n", "    ", "if", "issubclass", "(", "module", ".", "__class__", ",", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "        ", "module", ".", "momentum", "=", "momenta", "[", "module", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hongyouc_fedbe.models.FedM.create_local_init": [[10, 18], ["glob.keys"], "function", ["None"], ["def", "create_local_init", "(", "glob", ",", "local", ",", "bias_ratio", ")", ":", "\n", "    ", "assert", "bias_ratio", "<=", "1.0", "and", "bias_ratio", ">=", "0.0", "\n", "for", "k", "in", "glob", ".", "keys", "(", ")", ":", "\n", "      ", "if", "bias_ratio", ">", "0", ":", "\n", "        ", "glob", "[", "k", "]", "=", "glob", "[", "k", "]", "*", "(", "1", "-", "bias_ratio", ")", "+", "local", "[", "k", "]", "*", "(", "bias_ratio", ")", "\n", "", "else", ":", "\n", "        ", "glob", "[", "k", "]", "=", "(", "glob", "[", "k", "]", "+", "local", "[", "k", "]", "*", "bias_ratio", ")", "/", "(", "1.0", "+", "bias_ratio", ")", "\n", "", "", "return", "glob", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.models.FedM.FedAvgM": [[20, 44], ["w[].keys", "dict", "w_avg.keys", "torch.zeros", "numpy.sum", "numpy.array", "range", "[].size", "numpy.array", "len", "len", "len", "torch.div", "len", "float"], "function", ["None"], ["", "def", "FedAvgM", "(", "w", ",", "gpu", ",", "w_org", ",", "mom", ",", "size_arr", "=", "None", ")", ":", "\n", "    ", "(", "global_w", ",", "momentum", ")", "=", "w_org", "\n", "w_avg", "=", "{", "}", "\n", "for", "k", "in", "w", "[", "0", "]", ".", "keys", "(", ")", ":", "\n", "      ", "w_avg", "[", "k", "]", "=", "torch", ".", "zeros", "(", "w", "[", "0", "]", "[", "k", "]", ".", "size", "(", ")", ")", "\n", "", "w_mom", "=", "dict", "(", "w_avg", ")", "\n", "\n", "# Prepare p ", "\n", "if", "size_arr", "is", "not", "None", ":", "\n", "      ", "total_num", "=", "np", ".", "sum", "(", "size_arr", ")", "\n", "size_arr", "=", "np", ".", "array", "(", "[", "float", "(", "p", ")", "/", "total_num", "for", "p", "in", "size_arr", "]", ")", "*", "len", "(", "size_arr", ")", "\n", "", "else", ":", "\n", "      ", "size_arr", "=", "np", ".", "array", "(", "[", "1.0", "]", "*", "len", "(", "size_arr", ")", ")", "\n", "\n", "", "for", "k", "in", "w_avg", ".", "keys", "(", ")", ":", "\n", "      ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "w", ")", ")", ":", "\n", "        ", "grad", "=", "global_w", "[", "k", "]", "-", "w", "[", "i", "]", "[", "k", "]", "\n", "w_avg", "[", "k", "]", "+=", "size_arr", "[", "i", "]", "*", "grad", "\n", "\n", "", "mom_k", "=", "torch", ".", "div", "(", "w_avg", "[", "k", "]", ",", "len", "(", "w", ")", ")", "*", "(", "1", "-", "mom", ")", "+", "momentum", "[", "k", "]", "*", "mom", "\n", "w_avg", "[", "k", "]", "=", "global_w", "[", "k", "]", "-", "mom_k", "\n", "w_mom", "[", "k", "]", "=", "mom_k", "\n", "\n", "", "return", "w_avg", ",", "w_mom", "\n", "", ""]], "home.repos.pwc.inspect_result.hongyouc_fedbe.models.Nets.MLP.__init__": [[11, 18], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Softmax", "torch.nn.Softmax"], "methods", ["home.repos.pwc.inspect_result.hongyouc_fedbe.models.Nets.CNNCifar.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_in", ",", "dim_hidden", ",", "dim_out", ")", ":", "\n", "        ", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer_input", "=", "nn", ".", "Linear", "(", "dim_in", ",", "dim_hidden", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", ")", "\n", "self", ".", "layer_hidden", "=", "nn", ".", "Linear", "(", "dim_hidden", ",", "dim_out", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.models.Nets.MLP.forward": [[19, 26], ["Nets.MLP.view", "Nets.MLP.layer_input", "Nets.MLP.dropout", "Nets.MLP.relu", "Nets.MLP.layer_hidden"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "view", "(", "-", "1", ",", "x", ".", "shape", "[", "1", "]", "*", "x", ".", "shape", "[", "-", "2", "]", "*", "x", ".", "shape", "[", "-", "1", "]", ")", "\n", "x", "=", "self", ".", "layer_input", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "layer_hidden", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.models.Nets.CNNMnist.__init__": [[29, 36], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Dropout2d", "torch.nn.Dropout2d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.hongyouc_fedbe.models.Nets.CNNCifar.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "CNNMnist", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "args", ".", "num_channels", ",", "10", ",", "kernel_size", "=", "5", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "10", ",", "20", ",", "kernel_size", "=", "5", ")", "\n", "self", ".", "conv2_drop", "=", "nn", ".", "Dropout2d", "(", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "320", ",", "50", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "50", ",", "args", ".", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.models.Nets.CNNMnist.forward": [[37, 45], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "Nets.CNNMnist.view", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "Nets.CNNMnist.fc2", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "Nets.CNNMnist.fc1", "Nets.CNNMnist.conv1", "Nets.CNNMnist.conv2_drop", "Nets.CNNMnist.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "F", ".", "max_pool2d", "(", "self", ".", "conv1", "(", "x", ")", ",", "2", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "F", ".", "max_pool2d", "(", "self", ".", "conv2_drop", "(", "self", ".", "conv2", "(", "x", ")", ")", ",", "2", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "x", ".", "shape", "[", "1", "]", "*", "x", ".", "shape", "[", "2", "]", "*", "x", ".", "shape", "[", "3", "]", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.models.Nets.CNNCifar.__init__": [[48, 60], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "Nets.CNNCifar.hidden.append", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.hongyouc_fedbe.models.Nets.CNNCifar.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "CNNCifar", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "3", ")", "\n", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "3", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ")", "\n", "\n", "self", ".", "hidden", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "k", "in", "range", "(", "args", ".", "num_layers", ")", ":", "\n", "          ", "self", ".", "hidden", ".", "append", "(", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "padding", "=", "1", ")", ")", "\n", "", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "1024", ",", "64", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "64", ",", "args", ".", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongyouc_fedbe.models.Nets.CNNCifar.forward": [[61, 76], ["Nets.CNNCifar.conv1", "Nets.CNNCifar.pool", "Nets.CNNCifar.conv2", "Nets.CNNCifar.pool", "Nets.CNNCifar.conv3", "torch.relu", "torch.relu", "torch.relu.view", "Nets.CNNCifar.fc1", "torch.relu", "torch.relu", "Nets.CNNCifar.fc2", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "l"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "pool", "(", "F", ".", "relu", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "pool", "(", "F", ".", "relu", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "for", "l", "in", "self", ".", "hidden", ":", "\n", "          ", "x", "=", "F", ".", "relu", "(", "l", "(", "x", ")", ")", "\n", "", "x", "=", "x", ".", "view", "(", "-", "1", ",", "1024", ")", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]]}