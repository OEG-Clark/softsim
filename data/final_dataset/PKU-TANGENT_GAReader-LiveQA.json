{"home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.config.str2bool": [[8, 10], ["v.lower"], "function", ["None"], ["def", "str2bool", "(", "v", ")", ":", "\n", "    ", "return", "v", ".", "lower", "(", ")", "in", "(", "'yes'", ",", "'true'", ",", "'t'", ",", "'1'", ",", "'y'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.config.get_args": [[12, 153], ["argparse.ArgumentParser", "argparse.ArgumentParser.register", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "def", "get_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "register", "(", "'type'", ",", "'bool'", ",", "str2bool", ")", "\n", "\n", "# Basics", "\n", "parser", ".", "add_argument", "(", "'-debug'", ",", "\n", "type", "=", "'bool'", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "'whether it is debug mode'", ")", "\n", "parser", ".", "add_argument", "(", "'-tune_embedding'", ",", "\n", "type", "=", "'bool'", ",", "\n", "default", "=", "True", ",", "\n", "help", "=", "\"fine tune embedding\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-test_only'", ",", "\n", "type", "=", "'bool'", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "'test_only: no need to run training process'", ")", "\n", "parser", ".", "add_argument", "(", "'-model'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-random_seed'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1013", ",", "\n", "help", "=", "'Random seed'", ")", "\n", "\n", "# Data file", "\n", "parser", ".", "add_argument", "(", "'-train_file'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'Training file'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-dev_file'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'Development file'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-pre_trained'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'Pre-trained model.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-model_file'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "'model.pkl.gz'", ",", "\n", "help", "=", "'Model file to save'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-log_file'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'Log file'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-embedding_file'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'Word embedding file'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-max_dev'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'Maximum number of dev examples to evaluate on'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-relabeling'", ",", "\n", "type", "=", "'bool'", ",", "\n", "default", "=", "True", ",", "\n", "help", "=", "'Whether to relabel the entities when loading the data'", ")", "\n", "\n", "# Model details", "\n", "parser", ".", "add_argument", "(", "'-embedding_size'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'Default embedding size if embedding_file is not given'", ")", "\n", "parser", ".", "add_argument", "(", "'-max_vocab_size'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "50000", ",", "\n", "help", "=", "\"max vocab size\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-hidden_size'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "128", ",", "\n", "help", "=", "'Hidden size of RNN units'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-bidir'", ",", "\n", "type", "=", "'bool'", ",", "\n", "default", "=", "True", ",", "\n", "help", "=", "'bidir: whether to use a bidirectional RNN'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-num_layers'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ",", "\n", "help", "=", "'Number of RNN layers'", ")", "\n", "parser", ".", "add_argument", "(", "'-concat'", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-num_GA_layers'", ",", "type", "=", "int", ",", "default", "=", "2", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-rnn_type'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "'gru'", ",", "\n", "help", "=", "'RNN type: lstm or gru (default)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-att_func'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "'bilinear'", ",", "\n", "help", "=", "'Attention function: bilinear (default) or mlp or avg or last or dot'", ")", "\n", "\n", "# Optimization details", "\n", "parser", ".", "add_argument", "(", "'-batch_size'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "32", ",", "\n", "help", "=", "'Batch size'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-num_epoches'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "100", ",", "\n", "help", "=", "'Number of epoches'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-eval_iter'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1000", ",", "\n", "help", "=", "'Evaluation on dev set after K updates'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-dropout_rate'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.2", ",", "\n", "help", "=", "'Dropout rate'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-optimizer'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "'sgd'", ",", "\n", "help", "=", "'Optimizer: sgd (default) or adam or rmsprop'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-learning_rate'", ",", "'-lr'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.1", ",", "\n", "help", "=", "'Learning rate for SGD'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-grad_clipping'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "10.0", ",", "\n", "help", "=", "'Gradient clipping'", ")", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.main.gen_examples": [[17, 33], ["utils.get_minibatches", "len", "utils.prepare_data", "utils.prepare_data", "utils.prepare_data", "all_ex.append", "range"], "function", ["home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.utils.get_minibatches", "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.utils.prepare_data", "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.utils.prepare_data", "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.utils.prepare_data"], ["def", "gen_examples", "(", "x1", ",", "x2", ",", "x3", ",", "y", ",", "batch_size", ",", "concat", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n        Divide examples into batches of size `batch_size`.\n    \"\"\"", "\n", "minibatches", "=", "utils", ".", "get_minibatches", "(", "len", "(", "x1", ")", ",", "batch_size", ")", "\n", "all_ex", "=", "[", "]", "\n", "for", "minibatch", "in", "minibatches", ":", "\n", "        ", "mb_x1", "=", "[", "x1", "[", "t", "]", "for", "t", "in", "minibatch", "]", "\n", "mb_x2", "=", "[", "x2", "[", "t", "]", "for", "t", "in", "minibatch", "]", "\n", "mb_x3", "=", "[", "x3", "[", "t", "*", "4", "+", "k", "]", "for", "t", "in", "minibatch", "for", "k", "in", "range", "(", "4", ")", "]", "\n", "mb_y", "=", "[", "y", "[", "t", "]", "for", "t", "in", "minibatch", "]", "\n", "mb_x1", ",", "mb_mask1", "=", "utils", ".", "prepare_data", "(", "mb_x1", ")", "\n", "mb_x2", ",", "mb_mask2", "=", "utils", ".", "prepare_data", "(", "mb_x2", ")", "\n", "mb_x3", ",", "mb_mask3", "=", "utils", ".", "prepare_data", "(", "mb_x3", ")", "\n", "all_ex", ".", "append", "(", "(", "mb_x1", ",", "mb_mask1", ",", "mb_x2", ",", "mb_mask2", ",", "mb_x3", ",", "mb_mask3", ",", "mb_y", ")", ")", "\n", "", "return", "all_ex", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.main.build_fn": [[35, 173], ["theano.imatrix", "theano.imatrix", "theano.imatrix", "theano.matrix", "theano.matrix", "theano.matrix", "theano.ivector", "lasagne.layers.InputLayer", "lasagne.layers.InputLayer", "lasagne.layers.InputLayer", "lasagne.layers.InputLayer", "lasagne.layers.EmbeddingLayer", "lasagne.layers.EmbeddingLayer", "lasagne.layers.InputLayer", "lasagne.layers.InputLayer", "lasagne.layers.InputLayer", "lasagne.layers.InputLayer", "lasagne.layers.EmbeddingLayer", "lasagne.layers.EmbeddingLayer", "lasagne.layers.InputLayer", "lasagne.layers.InputLayer", "lasagne.layers.InputLayer", "lasagne.layers.InputLayer", "lasagne.layers.EmbeddingLayer", "lasagne.layers.EmbeddingLayer", "nn_layers.stack_rnn", "lasagne.layers.ReshapeLayer", "lasagne.layers.ReshapeLayer", "nn_layers.BilinearDotLayer", "logging.info", "logging.info", "lasagne.layers.get_all_layers", "lasagne.layers.get_all_layers", "lasagne.layers.get_output", "lasagne.layers.get_output", "theano.argmax", "theano.sum", "theano.function", "theano.function", "lasagne.layers.get_output", "lasagne.layers.get_output", "theano.clip", "lasagne.objectives.categorical_crossentropy().mean", "lasagne.objectives.categorical_crossentropy().mean", "lasagne.layers.get_all_params", "lasagne.layers.get_all_params", "lasagne.layers.get_all_params", "lasagne.layers.get_all_params", "theano.function", "theano.function", "lasagne.layers.EmbeddingLayer.params[].remove", "lasagne.layers.EmbeddingLayer.params[].remove", "lasagne.layers.EmbeddingLayer.params[].remove", "nn_layers.stack_rnn", "nn_layers.LengthLayer", "nn_layers.QuerySliceLayer", "xrange", "nn_layers.stack_rnn", "nn_layers.stack_rnn", "nn_layers.MLPAttentionLayer", "utils.load_params", "lasagne.layers.set_all_param_values", "lasagne.layers.set_all_param_values", "logging.info", "utils.load_params.iteritems", "logging.info", "theano.eq", "lasagne.updates.sgd", "lasagne.updates.sgd", "nn_layers.stack_rnn", "nn_layers.GatedAttentionLayerWithQueryAttention", "nn_layers.BilinearAttentionLayer", "logging.info", "lasagne.layers.count_params", "lasagne.layers.count_params", "lasagne.layers.count_params", "lasagne.layers.count_params", "lasagne.objectives.categorical_crossentropy", "lasagne.objectives.categorical_crossentropy", "lasagne.updates.adam", "lasagne.updates.adam", "nn_layers.AveragePoolingLayer", "lasagne.updates.rmsprop", "lasagne.updates.rmsprop", "NotImplementedError", "str", "nn_layers.DotProductAttentionLayer", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.nn_layers.stack_rnn", "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.nn_layers.stack_rnn", "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.nn_layers.stack_rnn", "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.nn_layers.stack_rnn", "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.utils.load_params", "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.nn_layers.stack_rnn"], ["", "def", "build_fn", "(", "args", ",", "embeddings", ")", ":", "\n", "    ", "\"\"\"\n        Build training and testing functions.\n    \"\"\"", "\n", "in_x1", "=", "T", ".", "imatrix", "(", "'x1'", ")", "\n", "in_x2", "=", "T", ".", "imatrix", "(", "'x2'", ")", "\n", "in_x3", "=", "T", ".", "imatrix", "(", "'x3'", ")", "\n", "in_mask1", "=", "T", ".", "matrix", "(", "'mask1'", ")", "\n", "in_mask2", "=", "T", ".", "matrix", "(", "'mask2'", ")", "\n", "in_mask3", "=", "T", ".", "matrix", "(", "'mask3'", ")", "\n", "in_y", "=", "T", ".", "ivector", "(", "'y'", ")", "\n", "\n", "l_in1", "=", "lasagne", ".", "layers", ".", "InputLayer", "(", "(", "None", ",", "None", ")", ",", "in_x1", ")", "\n", "l_mask1", "=", "lasagne", ".", "layers", ".", "InputLayer", "(", "(", "None", ",", "None", ")", ",", "in_mask1", ")", "\n", "l_emb1", "=", "lasagne", ".", "layers", ".", "EmbeddingLayer", "(", "l_in1", ",", "args", ".", "vocab_size", ",", "\n", "args", ".", "embedding_size", ",", "W", "=", "embeddings", ")", "\n", "\n", "l_in2", "=", "lasagne", ".", "layers", ".", "InputLayer", "(", "(", "None", ",", "None", ")", ",", "in_x2", ")", "\n", "l_mask2", "=", "lasagne", ".", "layers", ".", "InputLayer", "(", "(", "None", ",", "None", ")", ",", "in_mask2", ")", "\n", "l_emb2", "=", "lasagne", ".", "layers", ".", "EmbeddingLayer", "(", "l_in2", ",", "args", ".", "vocab_size", ",", "\n", "args", ".", "embedding_size", ",", "W", "=", "l_emb1", ".", "W", ")", "\n", "\n", "l_in3", "=", "lasagne", ".", "layers", ".", "InputLayer", "(", "(", "None", ",", "None", ")", ",", "in_x3", ")", "\n", "l_mask3", "=", "lasagne", ".", "layers", ".", "InputLayer", "(", "(", "None", ",", "None", ")", ",", "in_mask3", ")", "\n", "l_emb3", "=", "lasagne", ".", "layers", ".", "EmbeddingLayer", "(", "l_in3", ",", "args", ".", "vocab_size", ",", "\n", "args", ".", "embedding_size", ",", "W", "=", "l_emb1", ".", "W", ")", "\n", "\n", "if", "not", "args", ".", "tune_embedding", ":", "\n", "        ", "l_emb1", ".", "params", "[", "l_emb1", ".", "W", "]", ".", "remove", "(", "'trainable'", ")", "\n", "l_emb2", ".", "params", "[", "l_emb2", ".", "W", "]", ".", "remove", "(", "'trainable'", ")", "\n", "l_emb3", ".", "params", "[", "l_emb3", ".", "W", "]", ".", "remove", "(", "'trainable'", ")", "\n", "\n", "", "args", ".", "rnn_output_size", "=", "args", ".", "hidden_size", "*", "2", "if", "args", ".", "bidir", "else", "args", ".", "hidden_size", "\n", "if", "args", ".", "model", "==", "\"GA\"", ":", "\n", "        ", "l_d", "=", "l_emb1", "\n", "# NOTE: This implementation slightly differs from the original GA reader. Specifically:", "\n", "# 1. The query GRU is shared across hops.", "\n", "# 2. Dropout is applied to all hops (including the initial hop).", "\n", "# 3. Gated-attention is applied at the final layer as well.", "\n", "# 4. No character-level embeddings are used.", "\n", "\n", "l_q", "=", "nn_layers", ".", "stack_rnn", "(", "l_emb2", ",", "l_mask2", ",", "1", ",", "args", ".", "hidden_size", ",", "\n", "grad_clipping", "=", "args", ".", "grad_clipping", ",", "\n", "dropout_rate", "=", "args", ".", "dropout_rate", ",", "\n", "only_return_final", "=", "False", ",", "\n", "bidir", "=", "args", ".", "bidir", ",", "\n", "name", "=", "'q'", ",", "\n", "rnn_layer", "=", "args", ".", "rnn_layer", ")", "\n", "q_length", "=", "nn_layers", ".", "LengthLayer", "(", "l_mask2", ")", "\n", "network2", "=", "QuerySliceLayer", "(", "[", "l_q", ",", "q_length", "]", ")", "\n", "for", "layer_num", "in", "xrange", "(", "args", ".", "num_GA_layers", ")", ":", "\n", "            ", "l_d", "=", "nn_layers", ".", "stack_rnn", "(", "l_d", ",", "l_mask1", ",", "1", ",", "args", ".", "hidden_size", ",", "\n", "grad_clipping", "=", "args", ".", "grad_clipping", ",", "\n", "dropout_rate", "=", "args", ".", "dropout_rate", ",", "\n", "only_return_final", "=", "False", ",", "\n", "bidir", "=", "args", ".", "bidir", ",", "\n", "name", "=", "'d'", "+", "str", "(", "layer_num", ")", ",", "\n", "rnn_layer", "=", "args", ".", "rnn_layer", ")", "\n", "l_d", "=", "GatedAttentionLayerWithQueryAttention", "(", "[", "l_d", ",", "l_q", ",", "l_mask2", "]", ")", "\n", "", "network1", "=", "l_d", "\n", "", "else", ":", "\n", "        ", "assert", "args", ".", "model", "is", "None", "\n", "network1", "=", "nn_layers", ".", "stack_rnn", "(", "l_emb1", ",", "l_mask1", ",", "args", ".", "num_layers", ",", "args", ".", "hidden_size", ",", "\n", "grad_clipping", "=", "args", ".", "grad_clipping", ",", "\n", "dropout_rate", "=", "args", ".", "dropout_rate", ",", "\n", "only_return_final", "=", "(", "args", ".", "att_func", "==", "'last'", ")", ",", "\n", "bidir", "=", "args", ".", "bidir", ",", "\n", "name", "=", "'d'", ",", "\n", "rnn_layer", "=", "args", ".", "rnn_layer", ")", "\n", "\n", "network2", "=", "nn_layers", ".", "stack_rnn", "(", "l_emb2", ",", "l_mask2", ",", "args", ".", "num_layers", ",", "args", ".", "hidden_size", ",", "\n", "grad_clipping", "=", "args", ".", "grad_clipping", ",", "\n", "dropout_rate", "=", "args", ".", "dropout_rate", ",", "\n", "only_return_final", "=", "True", ",", "\n", "bidir", "=", "args", ".", "bidir", ",", "\n", "name", "=", "'q'", ",", "\n", "rnn_layer", "=", "args", ".", "rnn_layer", ")", "\n", "", "if", "args", ".", "att_func", "==", "'mlp'", ":", "\n", "        ", "att", "=", "nn_layers", ".", "MLPAttentionLayer", "(", "[", "network1", ",", "network2", "]", ",", "args", ".", "rnn_output_size", ",", "\n", "mask_input", "=", "l_mask1", ")", "\n", "", "elif", "args", ".", "att_func", "==", "'bilinear'", ":", "\n", "        ", "att", "=", "nn_layers", ".", "BilinearAttentionLayer", "(", "[", "network1", ",", "network2", "]", ",", "args", ".", "rnn_output_size", ",", "\n", "mask_input", "=", "l_mask1", ")", "\n", "", "elif", "args", ".", "att_func", "==", "'avg'", ":", "\n", "        ", "att", "=", "nn_layers", ".", "AveragePoolingLayer", "(", "network1", ",", "mask_input", "=", "l_mask1", ")", "\n", "", "elif", "args", ".", "att_func", "==", "'last'", ":", "\n", "        ", "att", "=", "network1", "\n", "", "elif", "args", ".", "att_func", "==", "'dot'", ":", "\n", "        ", "att", "=", "nn_layers", ".", "DotProductAttentionLayer", "(", "[", "network1", ",", "network2", "]", ",", "mask_input", "=", "l_mask1", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'att_func = %s'", "%", "args", ".", "att_func", ")", "\n", "", "network3", "=", "nn_layers", ".", "stack_rnn", "(", "l_emb3", ",", "l_mask3", ",", "args", ".", "num_layers", ",", "args", ".", "hidden_size", ",", "\n", "grad_clipping", "=", "args", ".", "grad_clipping", ",", "\n", "dropout_rate", "=", "args", ".", "dropout_rate", ",", "\n", "only_return_final", "=", "True", ",", "\n", "bidir", "=", "args", ".", "bidir", ",", "\n", "name", "=", "'o'", ",", "\n", "rnn_layer", "=", "args", ".", "rnn_layer", ")", "\n", "network3", "=", "lasagne", ".", "layers", ".", "ReshapeLayer", "(", "network3", ",", "(", "in_x1", ".", "shape", "[", "0", "]", ",", "4", ",", "args", ".", "rnn_output_size", ")", ")", "\n", "network", "=", "nn_layers", ".", "BilinearDotLayer", "(", "[", "network3", ",", "att", "]", ",", "args", ".", "rnn_output_size", ")", "\n", "if", "args", ".", "pre_trained", "is", "not", "None", ":", "\n", "        ", "dic", "=", "utils", ".", "load_params", "(", "args", ".", "pre_trained", ")", "\n", "lasagne", ".", "layers", ".", "set_all_param_values", "(", "network", ",", "dic", "[", "'params'", "]", ")", "\n", "del", "dic", "[", "'params'", "]", "\n", "logging", ".", "info", "(", "'Loaded pre-trained model: %s'", "%", "args", ".", "pre_trained", ")", "\n", "for", "dic_param", "in", "dic", ".", "iteritems", "(", ")", ":", "\n", "            ", "logging", ".", "info", "(", "dic_param", ")", "\n", "\n", "", "", "logging", ".", "info", "(", "'#params: %d'", "%", "lasagne", ".", "layers", ".", "count_params", "(", "network", ",", "trainable", "=", "True", ")", ")", "\n", "logging", ".", "info", "(", "'#fixed params: %d'", "%", "lasagne", ".", "layers", ".", "count_params", "(", "network", ",", "trainable", "=", "False", ")", ")", "\n", "for", "layer", "in", "lasagne", ".", "layers", ".", "get_all_layers", "(", "network", ")", ":", "\n", "        ", "logging", ".", "info", "(", "layer", ")", "\n", "\n", "# Test functions", "\n", "", "test_prob", "=", "lasagne", ".", "layers", ".", "get_output", "(", "network", ",", "deterministic", "=", "True", ")", "\n", "test_prediction", "=", "T", ".", "argmax", "(", "test_prob", ",", "axis", "=", "-", "1", ")", "\n", "acc", "=", "T", ".", "sum", "(", "T", ".", "eq", "(", "test_prediction", ",", "in_y", ")", ")", "\n", "test_fn", "=", "theano", ".", "function", "(", "[", "in_x1", ",", "in_mask1", ",", "in_x2", ",", "in_mask2", ",", "in_x3", ",", "in_mask3", ",", "in_y", "]", ",", "[", "acc", ",", "test_prediction", "]", ",", "on_unused_input", "=", "'warn'", ")", "\n", "\n", "# Train functions", "\n", "train_prediction", "=", "lasagne", ".", "layers", ".", "get_output", "(", "network", ")", "\n", "train_prediction", "=", "T", ".", "clip", "(", "train_prediction", ",", "1e-7", ",", "1.0", "-", "1e-7", ")", "\n", "loss", "=", "lasagne", ".", "objectives", ".", "categorical_crossentropy", "(", "train_prediction", ",", "in_y", ")", ".", "mean", "(", ")", "\n", "# TODO: lasagne.regularization.regularize_network_params(network, lasagne.regularization.l2)", "\n", "params", "=", "lasagne", ".", "layers", ".", "get_all_params", "(", "network", ")", "#, trainable=True)", "\n", "all_params", "=", "lasagne", ".", "layers", ".", "get_all_params", "(", "network", ")", "\n", "if", "args", ".", "optimizer", "==", "'sgd'", ":", "\n", "        ", "updates", "=", "lasagne", ".", "updates", ".", "sgd", "(", "loss", ",", "params", ",", "args", ".", "learning_rate", ")", "\n", "", "elif", "args", ".", "optimizer", "==", "'adam'", ":", "\n", "        ", "updates", "=", "lasagne", ".", "updates", ".", "adam", "(", "loss", ",", "params", ",", "learning_rate", "=", "args", ".", "learning_rate", ")", "\n", "", "elif", "args", ".", "optimizer", "==", "'rmsprop'", ":", "\n", "        ", "updates", "=", "lasagne", ".", "updates", ".", "rmsprop", "(", "loss", ",", "params", ",", "learning_rate", "=", "args", ".", "learning_rate", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'optimizer = %s'", "%", "args", ".", "optimizer", ")", "\n", "", "train_fn", "=", "theano", ".", "function", "(", "[", "in_x1", ",", "in_mask1", ",", "in_x2", ",", "in_mask2", ",", "in_x3", ",", "in_mask3", ",", "in_y", "]", ",", "\n", "loss", ",", "updates", "=", "updates", ",", "on_unused_input", "=", "'warn'", ")", "\n", "\n", "return", "train_fn", ",", "test_fn", ",", "params", ",", "all_params", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.main.eval_acc": [[175, 188], ["test_fn", "pred.tolist", "len"], "function", ["None"], ["", "def", "eval_acc", "(", "test_fn", ",", "all_examples", ")", ":", "\n", "    ", "\"\"\"\n        Evaluate accuracy on `all_examples`.\n    \"\"\"", "\n", "acc", "=", "0", "\n", "n_examples", "=", "0", "\n", "prediction", "=", "[", "]", "\n", "for", "x1", ",", "mask1", ",", "x2", ",", "mask2", ",", "x3", ",", "mask3", ",", "y", "in", "all_examples", ":", "\n", "        ", "tot_acc", ",", "pred", "=", "test_fn", "(", "x1", ",", "mask1", ",", "x2", ",", "mask2", ",", "x3", ",", "mask3", ",", "y", ")", "\n", "acc", "+=", "tot_acc", "\n", "prediction", "+=", "pred", ".", "tolist", "(", ")", "\n", "n_examples", "+=", "len", "(", "x1", ")", "\n", "", "return", "acc", "*", "100.0", "/", "n_examples", ",", "prediction", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.main.main": [[190, 271], ["logging.info", "logging.info", "len", "len", "logging.info", "logging.info", "pickle.load", "logging.info", "utils.gen_embeddings", "logging.info", "main.build_fn", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "utils.vectorize", "main.gen_examples", "main.eval_acc", "logging.info", "utils.save_params", "logging.info", "logging.info", "utils.vectorize", "time.time", "main.gen_examples", "range", "logging.info", "utils.load_data", "logging.info", "utils.load_data", "logging.info", "utils.load_data", "logging.info", "utils.load_data", "open", "len", "len", "numpy.random.shuffle", "enumerate", "train_fn", "logging.info", "logging.info", "sorted", "main.gen_examples", "main.eval_acc", "logging.info", "main.eval_acc", "logging.info", "numpy.random.choice", "logging.info", "utils.save_params", "min", "len", "len", "range", "time.time"], "function", ["home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.utils.gen_embeddings", "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.main.build_fn", "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.utils.vectorize", "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.main.gen_examples", "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.main.eval_acc", "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.utils.save_params", "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.utils.vectorize", "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.main.gen_examples", "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.utils.load_data", "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.utils.load_data", "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.utils.load_data", "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.utils.load_data", "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.main.gen_examples", "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.main.eval_acc", "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.main.eval_acc", "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.utils.save_params"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "logging", ".", "info", "(", "'-'", "*", "50", ")", "\n", "logging", ".", "info", "(", "'Load data files..'", ")", "\n", "question_belong", "=", "[", "]", "\n", "if", "args", ".", "debug", ":", "\n", "        ", "logging", ".", "info", "(", "'*'", "*", "10", "+", "' Train'", ")", "\n", "train_examples", "=", "utils", ".", "load_data", "(", "args", ".", "train_file", ",", "100", ",", "relabeling", "=", "args", ".", "relabeling", ")", "\n", "logging", ".", "info", "(", "'*'", "*", "10", "+", "' Dev'", ")", "\n", "dev_examples", "=", "utils", ".", "load_data", "(", "args", ".", "dev_file", ",", "100", ",", "relabeling", "=", "args", ".", "relabeling", ",", "question_belong", "=", "question_belong", ")", "\n", "", "else", ":", "\n", "        ", "logging", ".", "info", "(", "'*'", "*", "10", "+", "' Train'", ")", "\n", "train_examples", "=", "utils", ".", "load_data", "(", "args", ".", "train_file", ",", "relabeling", "=", "args", ".", "relabeling", ")", "\n", "logging", ".", "info", "(", "'*'", "*", "10", "+", "' Dev'", ")", "\n", "dev_examples", "=", "utils", ".", "load_data", "(", "args", ".", "dev_file", ",", "args", ".", "max_dev", ",", "relabeling", "=", "args", ".", "relabeling", ",", "question_belong", "=", "question_belong", ")", "\n", "\n", "", "args", ".", "num_train", "=", "len", "(", "train_examples", "[", "0", "]", ")", "\n", "args", ".", "num_dev", "=", "len", "(", "dev_examples", "[", "0", "]", ")", "\n", "\n", "logging", ".", "info", "(", "'-'", "*", "50", ")", "\n", "logging", ".", "info", "(", "'Build dictionary..'", ")", "\n", "#word_dict = utils.build_dict(train_examples[0] + train_examples[1] + train_examples[2], args.max_vocab_size)", "\n", "word_dict", "=", "pickle", ".", "load", "(", "open", "(", "\"../obj/dict.pkl\"", ",", "\"rb\"", ")", ")", "\n", "logging", ".", "info", "(", "'-'", "*", "50", ")", "\n", "embeddings", "=", "utils", ".", "gen_embeddings", "(", "word_dict", ",", "args", ".", "embedding_size", ",", "args", ".", "embedding_file", ")", "\n", "(", "args", ".", "vocab_size", ",", "args", ".", "embedding_size", ")", "=", "embeddings", ".", "shape", "\n", "logging", ".", "info", "(", "'Compile functions..'", ")", "\n", "train_fn", ",", "test_fn", ",", "params", ",", "all_params", "=", "build_fn", "(", "args", ",", "embeddings", ")", "\n", "logging", ".", "info", "(", "'Done.'", ")", "\n", "logging", ".", "info", "(", "'-'", "*", "50", ")", "\n", "logging", ".", "info", "(", "args", ")", "\n", "\n", "logging", ".", "info", "(", "'-'", "*", "50", ")", "\n", "logging", ".", "info", "(", "'Intial test..'", ")", "\n", "dev_x1", ",", "dev_x2", ",", "dev_x3", ",", "dev_y", "=", "utils", ".", "vectorize", "(", "dev_examples", ",", "word_dict", ",", "sort_by_len", "=", "not", "args", ".", "test_only", ",", "concat", "=", "args", ".", "concat", ")", "\n", "word_dict_r", "=", "{", "}", "\n", "word_dict_r", "[", "0", "]", "=", "\"unk\"", "\n", "assert", "len", "(", "dev_x1", ")", "==", "args", ".", "num_dev", "\n", "all_dev", "=", "gen_examples", "(", "dev_x1", ",", "dev_x2", ",", "dev_x3", ",", "dev_y", ",", "args", ".", "batch_size", ",", "args", ".", "concat", ")", "\n", "dev_acc", ",", "pred", "=", "eval_acc", "(", "test_fn", ",", "all_dev", ")", "\n", "logging", ".", "info", "(", "'Dev accuracy: %.2f %%'", "%", "dev_acc", ")", "\n", "best_acc", "=", "dev_acc", "\n", "if", "args", ".", "test_only", ":", "\n", "        ", "return", "\n", "", "utils", ".", "save_params", "(", "args", ".", "model_file", ",", "all_params", ",", "epoch", "=", "0", ",", "n_updates", "=", "0", ")", "\n", "\n", "# Training", "\n", "logging", ".", "info", "(", "'-'", "*", "50", ")", "\n", "logging", ".", "info", "(", "'Start training..'", ")", "\n", "train_x1", ",", "train_x2", ",", "train_x3", ",", "train_y", "=", "utils", ".", "vectorize", "(", "train_examples", ",", "word_dict", ",", "concat", "=", "args", ".", "concat", ")", "\n", "assert", "len", "(", "train_x1", ")", "==", "args", ".", "num_train", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "n_updates", "=", "0", "\n", "\n", "all_train", "=", "gen_examples", "(", "train_x1", ",", "train_x2", ",", "train_x3", ",", "train_y", ",", "args", ".", "batch_size", ",", "args", ".", "concat", ")", "\n", "for", "epoch", "in", "range", "(", "args", ".", "num_epoches", ")", ":", "\n", "        ", "np", ".", "random", ".", "shuffle", "(", "all_train", ")", "\n", "for", "idx", ",", "(", "mb_x1", ",", "mb_mask1", ",", "mb_x2", ",", "mb_mask2", ",", "mb_x3", ",", "mb_mask3", ",", "mb_y", ")", "in", "enumerate", "(", "all_train", ")", ":", "\n", "\n", "            ", "train_loss", "=", "train_fn", "(", "mb_x1", ",", "mb_mask1", ",", "mb_x2", ",", "mb_mask2", ",", "mb_x3", ",", "mb_mask3", ",", "mb_y", ")", "\n", "if", "idx", "%", "100", "==", "0", ":", "\n", "                ", "logging", ".", "info", "(", "'#Examples = %d, max_len = %d'", "%", "(", "len", "(", "mb_x1", ")", ",", "mb_x1", ".", "shape", "[", "1", "]", ")", ")", "\n", "logging", ".", "info", "(", "'Epoch = %d, iter = %d (max = %d), loss = %.2f, elapsed time = %.2f (s)'", "%", "(", "epoch", ",", "idx", ",", "len", "(", "all_train", ")", ",", "train_loss", ",", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "", "n_updates", "+=", "1", "\n", "\n", "if", "n_updates", "%", "args", ".", "eval_iter", "==", "0", ":", "\n", "                ", "samples", "=", "sorted", "(", "np", ".", "random", ".", "choice", "(", "args", ".", "num_train", ",", "min", "(", "args", ".", "num_train", ",", "args", ".", "num_dev", ")", ",", "\n", "replace", "=", "False", ")", ")", "\n", "sample_train", "=", "gen_examples", "(", "[", "train_x1", "[", "k", "]", "for", "k", "in", "samples", "]", ",", "\n", "[", "train_x2", "[", "k", "]", "for", "k", "in", "samples", "]", ",", "\n", "[", "train_x3", "[", "k", "*", "4", "+", "o", "]", "for", "k", "in", "samples", "for", "o", "in", "range", "(", "4", ")", "]", ",", "\n", "[", "train_y", "[", "k", "]", "for", "k", "in", "samples", "]", ",", "\n", "args", ".", "batch_size", ",", "args", ".", "concat", ")", "\n", "acc", ",", "pred", "=", "eval_acc", "(", "test_fn", ",", "sample_train", ")", "\n", "logging", ".", "info", "(", "'Train accuracy: %.2f %%'", "%", "acc", ")", "\n", "dev_acc", ",", "pred", "=", "eval_acc", "(", "test_fn", ",", "all_dev", ")", "\n", "logging", ".", "info", "(", "'Dev accuracy: %.2f %%'", "%", "dev_acc", ")", "\n", "if", "dev_acc", ">", "best_acc", ":", "\n", "                    ", "best_acc", "=", "dev_acc", "\n", "logging", ".", "info", "(", "'Best dev accuracy: epoch = %d, n_udpates = %d, acc = %.2f %%'", "\n", "%", "(", "epoch", ",", "n_updates", ",", "dev_acc", ")", ")", "\n", "utils", ".", "save_params", "(", "args", ".", "model_file", ",", "all_params", ",", "epoch", "=", "epoch", ",", "n_updates", "=", "n_updates", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.preprocess.tokenize": [[6, 10], ["jieba.cut"], "function", ["None"], ["def", "tokenize", "(", "st", ")", ":", "\n", "#TODO: The tokenizer's performance is suboptimal", "\n", "    ", "seg_list", "=", "jieba", ".", "cut", "(", "st", ",", "cut_all", "=", "False", ")", "\n", "return", "\" \"", ".", "join", "(", "seg_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.nn_layers.GatedAttentionLayerWithQueryAttention.get_output_for": [[11, 20], ["theano.batched_dot", "theano.nnet.softmax", "theano.batched_dot", "inputs[].dimshuffle", "theano.reshape", "theano.reshape", "inputs[].dimshuffle", "alphas_r.sum"], "methods", ["None"], ["    ", "def", "get_output_for", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "M", "=", "T", ".", "batched_dot", "(", "inputs", "[", "0", "]", ",", "inputs", "[", "1", "]", ".", "dimshuffle", "(", "(", "0", ",", "2", ",", "1", ")", ")", ")", "# B x N x Q", "\n", "B", ",", "N", ",", "Q", "=", "M", ".", "shape", "\n", "alphas", "=", "T", ".", "nnet", ".", "softmax", "(", "T", ".", "reshape", "(", "M", ",", "(", "B", "*", "N", ",", "Q", ")", ")", ")", "\n", "alphas_r", "=", "T", ".", "reshape", "(", "alphas", ",", "(", "B", ",", "N", ",", "Q", ")", ")", "*", "inputs", "[", "2", "]", ".", "dimshuffle", "(", "0", ",", "'x'", ",", "1", ")", "# B x N x Q", "\n", "alphas_r", "=", "alphas_r", "/", "alphas_r", ".", "sum", "(", "axis", "=", "2", ",", "keepdims", "=", "True", ")", "# B x N x Q", "\n", "q_rep", "=", "T", ".", "batched_dot", "(", "alphas_r", ",", "inputs", "[", "1", "]", ")", "# B x N x 2D", "\n", "d_gated", "=", "inputs", "[", "0", "]", "*", "q_rep", "\n", "return", "d_gated", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.nn_layers.GatedAttentionLayerWithQueryAttention.get_output_shape_for": [[21, 23], ["None"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shapes", ")", ":", "\n", "        ", "return", "input_shapes", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.nn_layers.QuerySliceLayer.get_output_for": [[166, 169], ["theano.arange"], "methods", ["None"], ["    ", "def", "get_output_for", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "q_slice", "=", "inputs", "[", "0", "]", "[", "T", ".", "arange", "(", "inputs", "[", "0", "]", ".", "shape", "[", "0", "]", ")", ",", "inputs", "[", "1", "]", ",", ":", "]", "# B x 2D", "\n", "return", "q_slice", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.nn_layers.QuerySliceLayer.get_output_shape_for": [[170, 172], ["None"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shapes", ")", ":", "\n", "        ", "return", "(", "input_shapes", "[", "0", "]", "[", "0", "]", ",", "input_shapes", "[", "0", "]", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.nn_layers.GatedAttentionLayer.get_output_for": [[39, 41], ["inputs[].dimshuffle"], "methods", ["None"], ["    ", "def", "get_output_for", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "inputs", "[", "0", "]", "*", "inputs", "[", "1", "]", ".", "dimshuffle", "(", "0", ",", "'x'", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.nn_layers.GatedAttentionLayer.get_output_shape_for": [[42, 44], ["None"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shapes", ")", ":", "\n", "        ", "return", "input_shapes", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.nn_layers.AttentionSumLayer.get_output_for": [[52, 59], ["theano.batched_dot", "theano.batched_dot", "theano.nnet.softmax", "attention.sum", "theano.batched_dot.sum"], "methods", ["None"], ["    ", "def", "get_output_for", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "dq", "=", "T", ".", "batched_dot", "(", "inputs", "[", "0", "]", ",", "inputs", "[", "1", "]", ")", "# B x len", "\n", "attention", "=", "T", ".", "nnet", ".", "softmax", "(", "dq", ")", "*", "inputs", "[", "3", "]", "# B x len", "\n", "attention", "=", "attention", "/", "attention", ".", "sum", "(", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "probs", "=", "T", ".", "batched_dot", "(", "attention", ",", "inputs", "[", "2", "]", ")", "# B x num_cand", "\n", "probs", "=", "probs", "/", "probs", ".", "sum", "(", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "return", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.nn_layers.AttentionSumLayer.get_output_shape_for": [[60, 62], ["None"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shapes", ")", ":", "\n", "        ", "return", "(", "input_shapes", "[", "2", "]", "[", "0", "]", ",", "input_shapes", "[", "2", "]", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.nn_layers.AveragePoolingLayer.__init__": [[98, 105], ["super().__init__", "incomings.append", "len", "ValueError"], "methods", ["home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.nn_layers.DotProductAttentionLayer.__init__"], ["def", "__init__", "(", "self", ",", "incoming", ",", "mask_input", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "incomings", "=", "[", "incoming", "]", "\n", "if", "mask_input", "is", "not", "None", ":", "\n", "            ", "incomings", ".", "append", "(", "mask_input", ")", "\n", "", "super", "(", "AveragePoolingLayer", ",", "self", ")", ".", "__init__", "(", "incomings", ",", "**", "kwargs", ")", "\n", "if", "len", "(", "self", ".", "input_shapes", "[", "0", "]", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "'the shape of incoming must be a 3-element tuple'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.nn_layers.AveragePoolingLayer.get_output_shape_for": [[106, 108], ["None"], "methods", ["None"], ["", "", "def", "get_output_shape_for", "(", "self", ",", "input_shapes", ")", ":", "\n", "        ", "return", "input_shapes", "[", "0", "]", "[", ":", "-", "2", "]", "+", "input_shapes", "[", "0", "]", "[", "-", "1", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.nn_layers.AveragePoolingLayer.get_output_for": [[109, 118], ["len", "theano.mean", "theano.sum", "theano.sum().dimshuffle", "inputs[].dimshuffle", "theano.sum"], "methods", ["None"], ["", "def", "get_output_for", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "len", "(", "inputs", ")", "==", "1", ":", "\n", "# mask_input is None", "\n", "            ", "return", "T", ".", "mean", "(", "inputs", "[", "0", "]", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "# inputs[0]: batch x len x h", "\n", "# inputs[1] = mask_input: batch x len", "\n", "            ", "return", "(", "T", ".", "sum", "(", "inputs", "[", "0", "]", "*", "inputs", "[", "1", "]", ".", "dimshuffle", "(", "0", ",", "1", ",", "'x'", ")", ",", "axis", "=", "1", ")", "/", "\n", "T", ".", "sum", "(", "inputs", "[", "1", "]", ",", "axis", "=", "1", ")", ".", "dimshuffle", "(", "0", ",", "'x'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.nn_layers.MLPAttentionLayer.__init__": [[127, 141], ["lasagne.init.Uniform", "lasagne.init.Uniform", "lasagne.init.Uniform", "lasagne.init.Uniform", "super().__init__", "nn_layers.MLPAttentionLayer.add_param", "nn_layers.MLPAttentionLayer.add_param", "nn_layers.MLPAttentionLayer.add_param", "len", "incomings.append"], "methods", ["home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.nn_layers.DotProductAttentionLayer.__init__"], ["def", "__init__", "(", "self", ",", "incomings", ",", "num_units", ",", "\n", "nonlinearity", "=", "lasagne", ".", "nonlinearities", ".", "tanh", ",", "\n", "mask_input", "=", "None", ",", "\n", "init", "=", "lasagne", ".", "init", ".", "Uniform", "(", ")", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "len", "(", "incomings", ")", "!=", "2", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "if", "mask_input", "is", "not", "None", ":", "\n", "            ", "incomings", ".", "append", "(", "mask_input", ")", "\n", "", "super", "(", "MLPAttentionLayer", ",", "self", ")", ".", "__init__", "(", "incomings", ",", "**", "kwargs", ")", "\n", "self", ".", "nonlinearity", "=", "nonlinearity", "\n", "self", ".", "num_units", "=", "num_units", "\n", "self", ".", "W0", "=", "self", ".", "add_param", "(", "init", ",", "(", "self", ".", "num_units", ",", "self", ".", "num_units", ")", ",", "name", "=", "'W0_mlp'", ")", "\n", "self", ".", "W1", "=", "self", ".", "add_param", "(", "init", ",", "(", "self", ".", "num_units", ",", "self", ".", "num_units", ")", ",", "name", "=", "'W1_mlp'", ")", "\n", "self", ".", "Wb", "=", "self", ".", "add_param", "(", "init", ",", "(", "self", ".", "num_units", ",", ")", ",", "name", "=", "'Wb_mlp'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.nn_layers.MLPAttentionLayer.get_output_shape_for": [[142, 144], ["None"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shapes", ")", ":", "\n", "        ", "return", "input_shapes", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.nn_layers.MLPAttentionLayer.get_output_for": [[145, 153], ["nn_layers.MLPAttentionLayer.nonlinearity", "theano.nnet.softmax", "theano.sum", "theano.dot", "theano.dot().dimshuffle", "theano.dot", "len", "theano.nnet.softmax.sum().reshape", "theano.nnet.softmax.dimshuffle", "theano.dot", "theano.nnet.softmax.sum"], "methods", ["None"], ["", "def", "get_output_for", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "M", "=", "T", ".", "dot", "(", "inputs", "[", "0", "]", ",", "self", ".", "W0", ")", "+", "T", ".", "dot", "(", "inputs", "[", "1", "]", ",", "self", ".", "W1", ")", ".", "dimshuffle", "(", "0", ",", "'x'", ",", "1", ")", "\n", "M", "=", "self", ".", "nonlinearity", "(", "M", ")", "\n", "alpha", "=", "T", ".", "nnet", ".", "softmax", "(", "T", ".", "dot", "(", "M", ",", "self", ".", "Wb", ")", ")", "\n", "if", "len", "(", "inputs", ")", "==", "3", ":", "\n", "            ", "alpha", "=", "alpha", "*", "inputs", "[", "2", "]", "\n", "alpha", "=", "alpha", "/", "alpha", ".", "sum", "(", "axis", "=", "1", ")", ".", "reshape", "(", "(", "alpha", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "", "return", "T", ".", "sum", "(", "inputs", "[", "0", "]", "*", "alpha", ".", "dimshuffle", "(", "0", ",", "1", ",", "'x'", ")", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.nn_layers.LengthLayer.get_output_for": [[156, 158], ["theano.cast", "input.sum"], "methods", ["None"], ["    ", "def", "get_output_for", "(", "self", ",", "input", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "T", ".", "cast", "(", "input", ".", "sum", "(", "axis", "=", "-", "1", ")", "-", "1", ",", "'int32'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.nn_layers.LengthLayer.get_output_shape_for": [[159, 161], ["None"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "input_shape", "[", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.nn_layers.BilinearAttentionLayer.__init__": [[179, 189], ["lasagne.init.Uniform", "lasagne.init.Uniform", "lasagne.init.Uniform", "lasagne.init.Uniform", "super().__init__", "nn_layers.BilinearAttentionLayer.add_param", "len", "incomings.append"], "methods", ["home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.nn_layers.DotProductAttentionLayer.__init__"], ["def", "__init__", "(", "self", ",", "incomings", ",", "num_units", ",", "\n", "mask_input", "=", "None", ",", "\n", "init", "=", "lasagne", ".", "init", ".", "Uniform", "(", ")", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "len", "(", "incomings", ")", "!=", "2", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "if", "mask_input", "is", "not", "None", ":", "\n", "            ", "incomings", ".", "append", "(", "mask_input", ")", "\n", "", "super", "(", "BilinearAttentionLayer", ",", "self", ")", ".", "__init__", "(", "incomings", ",", "**", "kwargs", ")", "\n", "self", ".", "num_units", "=", "num_units", "\n", "self", ".", "W", "=", "self", ".", "add_param", "(", "init", ",", "(", "self", ".", "num_units", ",", "self", ".", "num_units", ")", ",", "name", "=", "'W_bilinear'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.nn_layers.BilinearAttentionLayer.get_output_shape_for": [[190, 192], ["None"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shapes", ")", ":", "\n", "        ", "return", "input_shapes", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.nn_layers.BilinearAttentionLayer.get_output_for": [[193, 205], ["theano.dot().dimshuffle", "theano.nnet.softmax", "theano.sum", "theano.sum", "len", "theano.dot", "theano.nnet.softmax.sum().reshape", "theano.nnet.softmax.dimshuffle", "theano.nnet.softmax.sum"], "methods", ["None"], ["", "def", "get_output_for", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "\n", "# inputs[0]: batch * len * h", "\n", "# inputs[1]: batch * h", "\n", "# W: h * h", "\n", "\n", "        ", "M", "=", "T", ".", "dot", "(", "inputs", "[", "1", "]", ",", "self", ".", "W", ")", ".", "dimshuffle", "(", "0", ",", "'x'", ",", "1", ")", "\n", "alpha", "=", "T", ".", "nnet", ".", "softmax", "(", "T", ".", "sum", "(", "inputs", "[", "0", "]", "*", "M", ",", "axis", "=", "2", ")", ")", "\n", "if", "len", "(", "inputs", ")", "==", "3", ":", "\n", "            ", "alpha", "=", "alpha", "*", "inputs", "[", "2", "]", "\n", "alpha", "=", "alpha", "/", "alpha", ".", "sum", "(", "axis", "=", "1", ")", ".", "reshape", "(", "(", "alpha", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "", "return", "T", ".", "sum", "(", "inputs", "[", "0", "]", "*", "alpha", ".", "dimshuffle", "(", "0", ",", "1", ",", "'x'", ")", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.nn_layers.BilinearDotLayer.__init__": [[212, 222], ["lasagne.init.Uniform", "lasagne.init.Uniform", "lasagne.init.Uniform", "lasagne.init.Uniform", "super().__init__", "nn_layers.BilinearDotLayer.add_param", "len", "incomings.append"], "methods", ["home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.nn_layers.DotProductAttentionLayer.__init__"], ["def", "__init__", "(", "self", ",", "incomings", ",", "num_units", ",", "\n", "mask_input", "=", "None", ",", "\n", "init", "=", "lasagne", ".", "init", ".", "Uniform", "(", ")", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "len", "(", "incomings", ")", "!=", "2", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "if", "mask_input", "is", "not", "None", ":", "\n", "            ", "incomings", ".", "append", "(", "mask_input", ")", "\n", "", "super", "(", "BilinearDotLayer", ",", "self", ")", ".", "__init__", "(", "incomings", ",", "**", "kwargs", ")", "\n", "self", ".", "num_units", "=", "num_units", "\n", "self", ".", "W", "=", "self", ".", "add_param", "(", "init", ",", "(", "self", ".", "num_units", ",", "self", ".", "num_units", ")", ",", "name", "=", "'W_bilinear'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.nn_layers.BilinearDotLayer.get_output_shape_for": [[223, 225], ["None"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shapes", ")", ":", "\n", "        ", "return", "input_shapes", "[", "0", "]", "[", ":", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.nn_layers.BilinearDotLayer.get_output_for": [[226, 234], ["theano.dot().dimshuffle", "theano.nnet.softmax", "theano.sum", "theano.dot"], "methods", ["None"], ["", "def", "get_output_for", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "\n", "# inputs[0]: batch * len * h", "\n", "# inputs[1]: batch * h", "\n", "# W: h * h", "\n", "        ", "M", "=", "T", ".", "dot", "(", "inputs", "[", "1", "]", ",", "self", ".", "W", ")", ".", "dimshuffle", "(", "0", ",", "'x'", ",", "1", ")", "#batch * 1 * h", "\n", "alpha", "=", "T", ".", "nnet", ".", "softmax", "(", "T", ".", "sum", "(", "inputs", "[", "0", "]", "*", "M", ",", "axis", "=", "2", ")", ")", "#batch * len", "\n", "return", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.nn_layers.BilinearDotLayerTensor.__init__": [[242, 251], ["lasagne.init.Uniform", "lasagne.init.Uniform", "lasagne.init.Uniform", "lasagne.init.Uniform", "super().__init__", "len", "incomings.append"], "methods", ["home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.nn_layers.DotProductAttentionLayer.__init__"], ["def", "__init__", "(", "self", ",", "incomings", ",", "num_units", ",", "\n", "mask_input", "=", "None", ",", "\n", "init", "=", "lasagne", ".", "init", ".", "Uniform", "(", ")", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "len", "(", "incomings", ")", "!=", "2", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "if", "mask_input", "is", "not", "None", ":", "\n", "            ", "incomings", ".", "append", "(", "mask_input", ")", "\n", "", "super", "(", "BilinearDotLayerTensor", ",", "self", ")", ".", "__init__", "(", "incomings", ",", "**", "kwargs", ")", "\n", "self", ".", "num_units", "=", "num_units", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.nn_layers.BilinearDotLayerTensor.get_output_shape_for": [[252, 254], ["None"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shapes", ")", ":", "\n", "        ", "return", "input_shapes", "[", "0", "]", "[", ":", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.nn_layers.BilinearDotLayerTensor.get_output_for": [[255, 258], ["theano.nnet.softmax", "theano.sum"], "methods", ["None"], ["", "def", "get_output_for", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "alpha", "=", "T", ".", "nnet", ".", "softmax", "(", "T", ".", "sum", "(", "inputs", "[", "0", "]", "*", "inputs", "[", "1", "]", ",", "axis", "=", "2", ")", ")", "\n", "return", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.nn_layers.DotProductAttentionLayer.__init__": [[265, 271], ["super().__init__", "len", "incomings.append"], "methods", ["home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.nn_layers.DotProductAttentionLayer.__init__"], ["def", "__init__", "(", "self", ",", "incomings", ",", "mask_input", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "len", "(", "incomings", ")", "!=", "2", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "if", "mask_input", "is", "not", "None", ":", "\n", "            ", "incomings", ".", "append", "(", "mask_input", ")", "\n", "", "super", "(", "DotProductAttentionLayer", ",", "self", ")", ".", "__init__", "(", "incomings", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.nn_layers.DotProductAttentionLayer.get_output_shape_for": [[272, 274], ["None"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shapes", ")", ":", "\n", "        ", "return", "input_shapes", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.nn_layers.DotProductAttentionLayer.get_output_for": [[275, 286], ["theano.nnet.softmax", "theano.sum", "theano.sum", "len", "theano.nnet.softmax.sum().reshape", "theano.nnet.softmax.dimshuffle", "inputs[].dimshuffle", "theano.nnet.softmax.sum"], "methods", ["None"], ["", "def", "get_output_for", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "\n", "# inputs[0]: batch * len * h", "\n", "# inputs[1]: batch * h", "\n", "# mask_input (if any): batch * len", "\n", "\n", "        ", "alpha", "=", "T", ".", "nnet", ".", "softmax", "(", "T", ".", "sum", "(", "inputs", "[", "0", "]", "*", "inputs", "[", "1", "]", ".", "dimshuffle", "(", "0", ",", "'x'", ",", "1", ")", ",", "axis", "=", "2", ")", ")", "\n", "if", "len", "(", "inputs", ")", "==", "3", ":", "\n", "            ", "alpha", "=", "alpha", "*", "inputs", "[", "2", "]", "\n", "alpha", "=", "alpha", "/", "alpha", ".", "sum", "(", "axis", "=", "1", ")", ".", "reshape", "(", "(", "alpha", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "", "return", "T", ".", "sum", "(", "inputs", "[", "0", "]", "*", "alpha", ".", "dimshuffle", "(", "0", ",", "1", ",", "'x'", ")", ",", "axis", "=", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.nn_layers.stack_rnn": [[63, 91], ["nn_layers.stack_rnn._rnn"], "function", ["None"], ["", "", "def", "stack_rnn", "(", "l_emb", ",", "l_mask", ",", "num_layers", ",", "num_units", ",", "\n", "grad_clipping", "=", "10", ",", "dropout_rate", "=", "0.", ",", "\n", "bidir", "=", "True", ",", "\n", "only_return_final", "=", "False", ",", "\n", "name", "=", "''", ",", "\n", "rnn_layer", "=", "lasagne", ".", "layers", ".", "LSTMLayer", ")", ":", "\n", "    ", "\"\"\"\n        Stack multiple RNN layers.\n    \"\"\"", "\n", "\n", "def", "_rnn", "(", "backwards", "=", "True", ",", "name", "=", "''", ")", ":", "\n", "        ", "network", "=", "l_emb", "\n", "for", "layer", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "if", "dropout_rate", ">", "0", ":", "\n", "                ", "network", "=", "lasagne", ".", "layers", ".", "DropoutLayer", "(", "network", ",", "p", "=", "dropout_rate", ")", "\n", "", "c_only_return_final", "=", "only_return_final", "and", "(", "layer", "==", "num_layers", "-", "1", ")", "\n", "network", "=", "rnn_layer", "(", "network", ",", "num_units", ",", "\n", "grad_clipping", "=", "grad_clipping", ",", "\n", "mask_input", "=", "l_mask", ",", "\n", "only_return_final", "=", "c_only_return_final", ",", "\n", "backwards", "=", "backwards", ",", "\n", "name", "=", "name", "+", "'_layer'", "+", "str", "(", "layer", "+", "1", ")", ")", "\n", "", "return", "network", "\n", "\n", "", "network", "=", "_rnn", "(", "True", ",", "name", ")", "\n", "if", "bidir", ":", "\n", "        ", "network", "=", "lasagne", ".", "layers", ".", "ConcatLayer", "(", "[", "network", ",", "_rnn", "(", "False", ",", "name", "+", "'_back'", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "return", "network", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.utils.load_data": [[13, 53], ["utils.load_data.get_file"], "function", ["None"], ["def", "load_data", "(", "in_file", ",", "max_example", "=", "None", ",", "relabeling", "=", "True", ",", "question_belong", "=", "[", "]", ")", ":", "\n", "    ", "documents", "=", "[", "]", "\n", "questions", "=", "[", "]", "\n", "answers", "=", "[", "]", "\n", "options", "=", "[", "]", "\n", "num_examples", "=", "0", "\n", "def", "get_file", "(", "path", ")", ":", "\n", "        ", "files", "=", "[", "]", "\n", "for", "inf", "in", "os", ".", "listdir", "(", "path", ")", ":", "\n", "            ", "new_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "inf", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "new_path", ")", ":", "\n", "                ", "assert", "inf", "in", "[", "\"middle\"", ",", "\"high\"", "]", "\n", "files", "+=", "get_file", "(", "new_path", ")", "\n", "", "else", ":", "\n", "                ", "if", "new_path", ".", "find", "(", "\".DS_Store\"", ")", "!=", "-", "1", ":", "\n", "                    ", "continue", "\n", "", "files", "+=", "[", "new_path", "]", "\n", "", "", "return", "files", "\n", "", "files", "=", "get_file", "(", "in_file", ")", "\n", "for", "inf", "in", "files", ":", "\n", "        ", "obj", "=", "json", ".", "load", "(", "open", "(", "inf", ",", "\"r\"", ")", ")", "\n", "for", "i", ",", "q", "in", "enumerate", "(", "obj", "[", "\"questions\"", "]", ")", ":", "\n", "            ", "question_belong", "+=", "[", "inf", "+", "\"_\"", "+", "str", "(", "i", ")", "]", "\n", "documents", "+=", "[", "obj", "[", "\"article\"", "]", "]", "\n", "questions", "+=", "[", "q", "]", "\n", "assert", "len", "(", "obj", "[", "\"options\"", "]", "[", "i", "]", ")", "==", "4", "\n", "options", "+=", "obj", "[", "\"options\"", "]", "[", "i", "]", "\n", "answers", "+=", "[", "ord", "(", "obj", "[", "\"answers\"", "]", "[", "i", "]", ")", "-", "ord", "(", "'A'", ")", "]", "\n", "num_examples", "+=", "1", "\n", "", "if", "(", "max_example", "is", "not", "None", ")", "and", "(", "num_examples", ">=", "max_example", ")", ":", "\n", "            ", "break", "\n", "", "", "def", "clean", "(", "st_list", ")", ":", "\n", "        ", "for", "i", ",", "st", "in", "enumerate", "(", "st_list", ")", ":", "\n", "            ", "st_list", "[", "i", "]", "=", "st", ".", "lower", "(", ")", ".", "strip", "(", ")", "\n", "", "return", "st_list", "\n", "", "documents", "=", "clean", "(", "documents", ")", "\n", "questions", "=", "clean", "(", "questions", ")", "\n", "options", "=", "clean", "(", "options", ")", "\n", "logging", ".", "info", "(", "'#Examples: %d'", "%", "len", "(", "documents", ")", ")", "\n", "return", "(", "documents", ",", "questions", ",", "options", ",", "answers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.utils.build_dict": [[55, 77], ["collections.Counter", "collections.Counter.most_common", "logging.info", "logging.info", "sent.split", "logging.info", "logging.info", "enumerate", "len", "len"], "function", ["None"], ["", "def", "build_dict", "(", "sentences", ",", "max_words", "=", "50000", ")", ":", "\n", "    ", "\"\"\"\n        Build a dictionary for the words in `sentences`.\n        Only the max_words ones are kept and the remaining will be mapped to <UNK>.\n    \"\"\"", "\n", "word_count", "=", "Counter", "(", ")", "\n", "word_count", "[", "'a'", "]", "=", "100000", "\n", "for", "sent", "in", "sentences", ":", "\n", "        ", "for", "w", "in", "sent", ".", "split", "(", "' '", ")", ":", "\n", "            ", "word_count", "[", "w", "]", "+=", "1", "\n", "\n", "", "", "ls", "=", "word_count", ".", "most_common", "(", "max_words", ")", "\n", "logging", ".", "info", "(", "'#Words: %d -> %d'", "%", "(", "len", "(", "word_count", ")", ",", "len", "(", "ls", ")", ")", ")", "\n", "for", "key", "in", "ls", "[", ":", "5", "]", ":", "\n", "        ", "logging", ".", "info", "(", "key", ")", "\n", "", "logging", ".", "info", "(", "'...'", ")", "\n", "for", "key", "in", "ls", "[", "-", "5", ":", "]", ":", "\n", "        ", "logging", ".", "info", "(", "key", ")", "\n", "\n", "# leave 0 to UNK", "\n", "# leave 1 to delimiter |||", "\n", "", "return", "{", "w", "[", "0", "]", ":", "index", "+", "2", "for", "(", "index", ",", "w", ")", "in", "enumerate", "(", "ls", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.utils.vectorize": [[78, 134], ["enumerate", "zip", "d.split", "q.split", "utils.vectorize.get_vector"], "function", ["None"], ["", "def", "vectorize", "(", "examples", ",", "word_dict", ",", "\n", "sort_by_len", "=", "True", ",", "verbose", "=", "True", ",", "concat", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n        Vectorize `examples`.\n        in_x1, in_x2: sequences for document and question respecitvely.\n        in_y: label\n        in_l: whether the entity label occurs in the document.\n    \"\"\"", "\n", "in_x1", "=", "[", "]", "\n", "in_x2", "=", "[", "]", "\n", "in_x3", "=", "[", "]", "\n", "in_y", "=", "[", "]", "\n", "def", "get_vector", "(", "st", ")", ":", "\n", "        ", "seq", "=", "[", "word_dict", "[", "w", "]", "if", "w", "in", "word_dict", "else", "0", "for", "w", "in", "st", "]", "\n", "return", "seq", "\n", "\n", "", "for", "idx", ",", "(", "d", ",", "q", ",", "a", ")", "in", "enumerate", "(", "zip", "(", "examples", "[", "0", "]", ",", "examples", "[", "1", "]", ",", "examples", "[", "3", "]", ")", ")", ":", "\n", "        ", "d_words", "=", "d", ".", "split", "(", "' '", ")", "\n", "q_words", "=", "q", ".", "split", "(", "' '", ")", "\n", "assert", "0", "<=", "a", "<=", "3", "\n", "seq1", "=", "get_vector", "(", "d_words", ")", "\n", "seq2", "=", "get_vector", "(", "q_words", ")", "\n", "if", "(", "len", "(", "seq1", ")", ">", "0", ")", "and", "(", "len", "(", "seq2", ")", ">", "0", ")", ":", "\n", "            ", "in_x1", "+=", "[", "seq1", "]", "\n", "in_x2", "+=", "[", "seq2", "]", "\n", "option_seq", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "                ", "if", "concat", ":", "\n", "                    ", "op", "=", "\" \"", ".", "join", "(", "q_words", ")", "+", "' @ '", "+", "examples", "[", "2", "]", "[", "i", "+", "idx", "*", "4", "]", "\n", "", "else", ":", "\n", "                    ", "op", "=", "examples", "[", "2", "]", "[", "i", "+", "idx", "*", "4", "]", "\n", "", "op", "=", "op", ".", "split", "(", "' '", ")", "\n", "option", "=", "get_vector", "(", "op", ")", "\n", "assert", "len", "(", "option", ")", ">", "0", "\n", "option_seq", "+=", "[", "option", "]", "\n", "", "in_x3", "+=", "[", "option_seq", "]", "\n", "in_y", ".", "append", "(", "a", ")", "\n", "", "if", "verbose", "and", "(", "idx", "%", "10000", "==", "0", ")", ":", "\n", "            ", "logging", ".", "info", "(", "'Vectorization: processed %d / %d'", "%", "(", "idx", ",", "len", "(", "examples", "[", "0", "]", ")", ")", ")", "\n", "\n", "", "", "def", "len_argsort", "(", "seq", ")", ":", "\n", "        ", "return", "sorted", "(", "range", "(", "len", "(", "seq", ")", ")", ",", "key", "=", "lambda", "x", ":", "len", "(", "seq", "[", "x", "]", ")", ")", "\n", "\n", "", "if", "sort_by_len", ":", "\n", "# sort by the document length", "\n", "        ", "sorted_index", "=", "len_argsort", "(", "in_x1", ")", "\n", "in_x1", "=", "[", "in_x1", "[", "i", "]", "for", "i", "in", "sorted_index", "]", "\n", "in_x2", "=", "[", "in_x2", "[", "i", "]", "for", "i", "in", "sorted_index", "]", "\n", "in_y", "=", "[", "in_y", "[", "i", "]", "for", "i", "in", "sorted_index", "]", "\n", "in_x3", "=", "[", "in_x3", "[", "i", "]", "for", "i", "in", "sorted_index", "]", "\n", "", "new_in_x3", "=", "[", "]", "\n", "for", "i", "in", "in_x3", ":", "\n", "#print i", "\n", "        ", "new_in_x3", "+=", "i", "\n", "#print new_in_x3", "\n", "", "return", "in_x1", ",", "in_x2", ",", "new_in_x3", ",", "in_y", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.utils.prepare_data": [[136, 146], ["len", "numpy.max", "numpy.zeros().astype", "numpy.zeros().astype", "enumerate", "len", "numpy.zeros", "numpy.zeros"], "function", ["None"], ["", "def", "prepare_data", "(", "seqs", ")", ":", "\n", "    ", "lengths", "=", "[", "len", "(", "seq", ")", "for", "seq", "in", "seqs", "]", "\n", "n_samples", "=", "len", "(", "seqs", ")", "\n", "max_len", "=", "np", ".", "max", "(", "lengths", ")", "\n", "x", "=", "np", ".", "zeros", "(", "(", "n_samples", ",", "max_len", ")", ")", ".", "astype", "(", "'int32'", ")", "\n", "x_mask", "=", "np", ".", "zeros", "(", "(", "n_samples", ",", "max_len", ")", ")", ".", "astype", "(", "config", ".", "_floatX", ")", "\n", "for", "idx", ",", "seq", "in", "enumerate", "(", "seqs", ")", ":", "\n", "        ", "x", "[", "idx", ",", ":", "lengths", "[", "idx", "]", "]", "=", "seq", "\n", "x_mask", "[", "idx", ",", ":", "lengths", "[", "idx", "]", "]", "=", "1.0", "\n", "", "return", "x", ",", "x_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.utils.get_minibatches": [[148, 156], ["numpy.arange", "numpy.random.shuffle", "minibatches.append", "numpy.arange", "min"], "function", ["None"], ["", "def", "get_minibatches", "(", "n", ",", "minibatch_size", ",", "shuffle", "=", "False", ")", ":", "\n", "    ", "idx_list", "=", "np", ".", "arange", "(", "0", ",", "n", ",", "minibatch_size", ")", "\n", "if", "shuffle", ":", "\n", "        ", "np", ".", "random", ".", "shuffle", "(", "idx_list", ")", "\n", "", "minibatches", "=", "[", "]", "\n", "for", "idx", "in", "idx_list", ":", "\n", "        ", "minibatches", ".", "append", "(", "np", ".", "arange", "(", "idx", ",", "min", "(", "idx", "+", "minibatch_size", ",", "n", ")", ")", ")", "\n", "", "return", "minibatches", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.utils.get_dim": [[158, 161], ["open().readline", "len", "open", "open().readline.split"], "function", ["None"], ["", "def", "get_dim", "(", "in_file", ")", ":", "\n", "    ", "line", "=", "open", "(", "in_file", ")", ".", "readline", "(", ")", "\n", "return", "len", "(", "line", ".", "split", "(", ")", ")", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.utils.gen_embeddings": [[163, 201], ["lasagne.init.Uniform", "init", "logging.info", "max", "logging.info", "open().readlines", "logging.info", "word_dict.values", "line.split", "open", "len", "embeddings[].mean", "numpy.std", "numpy.random.normal", "float"], "function", ["None"], ["", "def", "gen_embeddings", "(", "word_dict", ",", "dim", ",", "in_file", "=", "None", ",", "\n", "init", "=", "lasagne", ".", "init", ".", "Uniform", "(", ")", ")", ":", "\n", "    ", "\"\"\"\n        Generate an initial embedding matrix for `word_dict`.\n        If an embedding file is not given or a word is not in the embedding file,\n        a randomly initialized vector will be used.\n    \"\"\"", "\n", "\n", "num_words", "=", "max", "(", "word_dict", ".", "values", "(", ")", ")", "+", "1", "\n", "embeddings", "=", "init", "(", "(", "num_words", ",", "dim", ")", ")", "\n", "logging", ".", "info", "(", "'Embeddings: %d x %d'", "%", "(", "num_words", ",", "dim", ")", ")", "\n", "\n", "if", "in_file", "is", "not", "None", ":", "\n", "        ", "logging", ".", "info", "(", "'Loading embedding file: %s'", "%", "in_file", ")", "\n", "pre_trained", "=", "0", "\n", "initialized", "=", "{", "}", "\n", "avg_sigma", "=", "0", "\n", "avg_mu", "=", "0", "\n", "for", "line", "in", "open", "(", "in_file", ")", ".", "readlines", "(", ")", ":", "\n", "            ", "sp", "=", "line", ".", "split", "(", ")", "\n", "assert", "len", "(", "sp", ")", "==", "dim", "+", "1", "\n", "if", "sp", "[", "0", "]", "in", "word_dict", ":", "\n", "                ", "initialized", "[", "sp", "[", "0", "]", "]", "=", "True", "\n", "pre_trained", "+=", "1", "\n", "embeddings", "[", "word_dict", "[", "sp", "[", "0", "]", "]", "]", "=", "[", "float", "(", "x", ")", "for", "x", "in", "sp", "[", "1", ":", "]", "]", "\n", "mu", "=", "embeddings", "[", "word_dict", "[", "sp", "[", "0", "]", "]", "]", ".", "mean", "(", ")", "\n", "#print embeddings[word_dict[sp[0]]]", "\n", "sigma", "=", "np", ".", "std", "(", "embeddings", "[", "word_dict", "[", "sp", "[", "0", "]", "]", "]", ")", "\n", "avg_mu", "+=", "mu", "\n", "avg_sigma", "+=", "sigma", "\n", "", "", "avg_sigma", "/=", "1.", "*", "pre_trained", "\n", "avg_mu", "/=", "1.", "*", "pre_trained", "\n", "for", "w", "in", "word_dict", ":", "\n", "            ", "if", "w", "not", "in", "initialized", ":", "\n", "                ", "embeddings", "[", "word_dict", "[", "w", "]", "]", "=", "np", ".", "random", ".", "normal", "(", "avg_mu", ",", "avg_sigma", ",", "(", "dim", ",", ")", ")", "\n", "", "", "logging", ".", "info", "(", "'Pre-trained: %d (%.2f%%)'", "%", "\n", "(", "pre_trained", ",", "pre_trained", "*", "100.0", "/", "num_words", ")", ")", "\n", "", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.utils.save_params": [[203, 212], ["dic.update", "gzip.open", "cPickle.dump", "x.get_value"], "function", ["None"], ["", "def", "save_params", "(", "file_name", ",", "params", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n        Save params to file_name.\n        params: a list of Theano variables\n    \"\"\"", "\n", "dic", "=", "{", "'params'", ":", "[", "x", ".", "get_value", "(", ")", "for", "x", "in", "params", "]", "}", "\n", "dic", ".", "update", "(", "kwargs", ")", "\n", "with", "gzip", ".", "open", "(", "file_name", ",", "\"w\"", ")", "as", "save_file", ":", "\n", "        ", "pickle", ".", "dump", "(", "obj", "=", "dic", ",", "file", "=", "save_file", ",", "protocol", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PKU-TANGENT_GAReader-LiveQA.src.utils.load_params": [[214, 221], ["gzip.open", "cPickle.load"], "function", ["None"], ["", "", "def", "load_params", "(", "file_name", ")", ":", "\n", "    ", "\"\"\"\n        Load params from file_name.\n    \"\"\"", "\n", "with", "gzip", ".", "open", "(", "file_name", ",", "\"rb\"", ")", "as", "save_file", ":", "\n", "        ", "dic", "=", "pickle", ".", "load", "(", "save_file", ")", "\n", "", "return", "dic", "\n", "", ""]]}