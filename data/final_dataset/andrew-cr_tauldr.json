{"home.repos.pwc.inspect_result.andrew-cr_tauldr.None.dist_train.setup": [[34, 38], ["str", "torch.init_process_group"], "function", ["None"], ["def", "setup", "(", "rank", ",", "world_size", ",", "unique_num", ")", ":", "\n", "    ", "os", ".", "environ", "[", "'MASTER_ADDR'", "]", "=", "'localhost'", "\n", "os", ".", "environ", "[", "'MASTER_PORT'", "]", "=", "str", "(", "12355", "+", "unique_num", ")", "\n", "dist", ".", "init_process_group", "(", "\"nccl\"", ",", "rank", "=", "rank", ",", "world_size", "=", "world_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.None.dist_train.cleanup": [[39, 41], ["torch.destroy_process_group"], "function", ["None"], ["", "def", "cleanup", "(", ")", ":", "\n", "    ", "dist", ".", "destroy_process_group", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.None.dist_train.main": [[43, 183], ["print", "print", "dist_train.setup", "torch.FileStore", "pathlib.Path", "torch.barrier", "pathlib.Path", "pathlib.Path", "pathlib.Path", "pathlib.Path", "lib.setup_tensorboard", "lib.create_model", "print", "lib.get_dataset", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "lib.get_loss", "lib.get_train_step", "lib.get_optimizer", "torch.barrier", "dist.FileStore.set", "dist.FileStore.set", "dist.FileStore.set", "dist.FileStore.set", "dist.FileStore.get().decode", "dist.FileStore.get().decode", "dist.FileStore.get().decode", "dist.FileStore.get().decode", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "sum", "model_utils.create_model.parameters", "lib.setup_preemption", "print", "lib.resume_training", "low_freq_loggers.append", "tqdm.tqdm", "lib.no_more_preemption_recovery_needed", "bookkeeping.setup_tensorboard.close", "lib.check_for_preempted_run", "bookkeeping.check_for_preempted_run.as_posix", "lib.create_experiment_folder", "lib.save_config_as_yaml", "lib.save_git_hash", "print", "lib.create_inner_experiment_folders", "bookkeeping.check_for_preempted_run.as_posix", "pathlib.Path.as_posix", "pathlib.Path.as_posix", "pathlib.Path.as_posix", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "bookkeeping.check_for_preempted_run.as_posix", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "state[].load_state_dict", "state[].load_state_dict", "lib.get_logger", "training_utils.get_train_step.step", "dist.FileStore.get", "dist.FileStore.get", "dist.FileStore.get", "dist.FileStore.get", "p.numel", "model_utils.create_model.parameters", "lib.save_checkpoint", "lib.save_archive_checkpoint", "logger"], "function", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.None.dist_train.setup", "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.setup_tensorboard", "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.model_utils.create_model", "home.repos.pwc.inspect_result.andrew-cr_tauldr.datasets.dataset_utils.get_dataset", "home.repos.pwc.inspect_result.andrew-cr_tauldr.losses.losses_utils.get_loss", "home.repos.pwc.inspect_result.andrew-cr_tauldr.training.training_utils.get_train_step", "home.repos.pwc.inspect_result.andrew-cr_tauldr.optimizers.optimizers_utils.get_optimizer", "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.setup_preemption", "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.resume_training", "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.no_more_preemption_recovery_needed", "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.DummyWriter.close", "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.check_for_preempted_run", "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.create_experiment_folder", "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.save_config_as_yaml", "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.save_git_hash", "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.create_inner_experiment_folders", "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.EMA.load_state_dict", "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.EMA.load_state_dict", "home.repos.pwc.inspect_result.andrew-cr_tauldr.loggers.logger_utils.get_logger", "home.repos.pwc.inspect_result.andrew-cr_tauldr.training.training.Standard.step", "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.save_checkpoint", "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.save_archive_checkpoint"], ["", "def", "main", "(", "rank", ",", "world_size", ",", "cfg", ",", "unique_num", ",", "custom_name", "=", "None", ")", ":", "\n", "# unique_num is a number that differentiates runs in a batch that may", "\n", "# run on the same machine and we don't want them using the same port", "\n", "# or ddp_store file", "\n", "# ideally in the range 0 - 10", "\n", "\n", "    ", "print", "(", "\"Training with config\"", ",", "cfg", ".", "experiment_name", ")", "\n", "print", "(", "f\"Rank: {rank}/{world_size}\"", ")", "\n", "\n", "\n", "setup", "(", "rank", ",", "world_size", ",", "unique_num", ")", "\n", "ddp_store", "=", "dist", ".", "FileStore", "(", "f\"/tmp/tldr_ddpstore_{unique_num}\"", ")", "\n", "\n", "\n", "preempted_path", "=", "Path", "(", "\"null\"", ")", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "if", "cfg", ".", "saving", ".", "enable_preemption_recovery", ":", "\n", "\n", "            ", "preempted_path", "=", "bookkeeping", ".", "check_for_preempted_run", "(", "\n", "cfg", ".", "save_location", ",", "\n", "cfg", ".", "saving", ".", "preemption_start_day_YYYYhyphenMMhyphenDD", ",", "\n", "cfg", ",", "\n", "cfg", ".", "saving", ".", "prepare_to_resume_after_timeout", "\n", ")", "\n", "\n", "", "if", "preempted_path", ".", "as_posix", "(", ")", "==", "\"null\"", ":", "\n", "            ", "save_dir", ",", "checkpoint_dir", ",", "config_dir", "=", "bookkeeping", ".", "create_experiment_folder", "(", "\n", "cfg", ".", "save_location", ",", "\n", "cfg", ".", "experiment_name", "if", "custom_name", "is", "None", "else", "custom_name", ",", "\n", "custom_name", "is", "None", "\n", ")", "\n", "bookkeeping", ".", "save_config_as_yaml", "(", "cfg", ",", "config_dir", ")", "\n", "bookkeeping", ".", "save_git_hash", "(", "save_dir", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Resuming from preempted run: \"", ",", "preempted_path", ")", "\n", "save_dir", "=", "preempted_path", "\n", "checkpoint_dir", ",", "config_dir", "=", "bookkeeping", ".", "create_inner_experiment_folders", "(", "save_dir", ")", "\n", "\n", "", "ddp_store", ".", "set", "(", "\"preempted_path\"", ",", "preempted_path", ".", "as_posix", "(", ")", ")", "\n", "ddp_store", ".", "set", "(", "\"save_dir\"", ",", "save_dir", ".", "as_posix", "(", ")", ")", "\n", "ddp_store", ".", "set", "(", "\"checkpoint_dir\"", ",", "checkpoint_dir", ".", "as_posix", "(", ")", ")", "\n", "ddp_store", ".", "set", "(", "\"config_dir\"", ",", "config_dir", ".", "as_posix", "(", ")", ")", "\n", "\n", "", "dist", ".", "barrier", "(", ")", "# wait for rank 0 process to get/create all the folders", "\n", "preempted_path", "=", "Path", "(", "ddp_store", ".", "get", "(", "\"preempted_path\"", ")", ".", "decode", "(", "\"utf-8\"", ")", ")", "\n", "save_dir", "=", "Path", "(", "ddp_store", ".", "get", "(", "\"save_dir\"", ")", ".", "decode", "(", "\"utf-8\"", ")", ")", "\n", "checkpoint_dir", "=", "Path", "(", "ddp_store", ".", "get", "(", "\"checkpoint_dir\"", ")", ".", "decode", "(", "\"utf-8\"", ")", ")", "\n", "config_dir", "=", "Path", "(", "ddp_store", ".", "get", "(", "\"config_dir\"", ")", ".", "decode", "(", "\"utf-8\"", ")", ")", "\n", "\n", "# writer is DummyWriter for non zero ranks", "\n", "writer", "=", "bookkeeping", ".", "setup_tensorboard", "(", "save_dir", ",", "rank", ")", "\n", "\n", "if", "cfg", ".", "device", "==", "\"cpu\"", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "", "elif", "cfg", ".", "device", "==", "\"cuda\"", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "f\"cuda:{rank}\"", ")", "\n", "\n", "", "model", "=", "model_utils", ".", "create_model", "(", "cfg", ",", "device", ",", "rank", ")", "\n", "print", "(", "\"number of parameters: \"", ",", "sum", "(", "[", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", ")", ")", "\n", "\n", "dataset", "=", "dataset_utils", ".", "get_dataset", "(", "cfg", ",", "device", ")", "\n", "dist_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "dataset", ",", "\n", "shuffle", "=", "cfg", ".", "data", ".", "shuffle", ")", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "\n", "batch_size", "=", "cfg", ".", "data", ".", "batch_size", "//", "world_size", ",", "\n", "sampler", "=", "dist_sampler", ")", "\n", "\n", "loss", "=", "losses_utils", ".", "get_loss", "(", "cfg", ")", "\n", "\n", "training_step", "=", "training_utils", ".", "get_train_step", "(", "cfg", ")", "\n", "\n", "optimizer", "=", "optimizers_utils", ".", "get_optimizer", "(", "model", ".", "parameters", "(", ")", ",", "cfg", ")", "\n", "\n", "state", "=", "{", "\n", "'model'", ":", "model", ",", "\n", "'optimizer'", ":", "optimizer", ",", "\n", "'n_iter'", ":", "0", "\n", "}", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "bookkeeping", ".", "setup_preemption", "(", "\n", "save_dir", ",", "checkpoint_dir", ",", "state", ",", "\n", "cfg", ".", "saving", ".", "num_checkpoints_to_keep", ",", "\n", "cfg", ".", "saving", ".", "prepare_to_resume_after_timeout", "\n", ")", "\n", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "\n", "\n", "mapping", "=", "{", "'cuda:0'", ":", "'cuda:%d'", "%", "rank", "}", "\n", "if", "not", "preempted_path", ".", "as_posix", "(", ")", "==", "\"null\"", ":", "\n", "        ", "print", "(", "\"loading state from premption: \"", ",", "preempted_path", ")", "\n", "state", "=", "bookkeeping", ".", "resume_training", "(", "preempted_path", ",", "state", ",", "mapping", ")", "\n", "", "elif", "cfg", ".", "init_model_path", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"loading state from init model: \"", ",", "cfg", ".", "init_model_path", ")", "\n", "loaded_state", "=", "torch", ".", "load", "(", "cfg", ".", "init_model_path", ",", "map_location", "=", "mapping", ")", "\n", "state", "[", "'model'", "]", ".", "load_state_dict", "(", "loaded_state", "[", "'model'", "]", ")", "\n", "state", "[", "'optimizer'", "]", ".", "load_state_dict", "(", "loaded_state", "[", "'optimizer'", "]", ")", "\n", "state", "[", "'n_iter'", "]", "=", "loaded_state", "[", "'n_iter'", "]", "\n", "\n", "\n", "", "low_freq_loggers", "=", "[", "]", "\n", "for", "logger", "in", "cfg", ".", "saving", ".", "low_freq_loggers", ":", "\n", "        ", "low_freq_loggers", ".", "append", "(", "logger_utils", ".", "get_logger", "(", "logger", ")", ")", "\n", "\n", "", "exit_flag", "=", "False", "\n", "\n", "while", "True", ":", "\n", "        ", "for", "minibatch", "in", "tqdm", "(", "dataloader", ")", ":", "\n", "\n", "            ", "training_step", ".", "step", "(", "state", ",", "minibatch", ",", "loss", ",", "writer", ")", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "                ", "if", "state", "[", "'n_iter'", "]", "%", "cfg", ".", "saving", ".", "checkpoint_freq", "==", "0", "or", "state", "[", "'n_iter'", "]", "==", "cfg", ".", "training", ".", "n_iters", "-", "1", ":", "\n", "                    ", "bookkeeping", ".", "save_checkpoint", "(", "checkpoint_dir", ",", "state", ",", "\n", "cfg", ".", "saving", ".", "num_checkpoints_to_keep", ")", "\n", "\n", "", "if", "state", "[", "'n_iter'", "]", "%", "cfg", ".", "saving", ".", "checkpoint_archive_freq", "==", "0", ":", "\n", "                    ", "bookkeeping", ".", "save_archive_checkpoint", "(", "checkpoint_dir", ",", "state", ")", "\n", "\n", "", "if", "state", "[", "'n_iter'", "]", "%", "cfg", ".", "saving", ".", "log_low_freq", "==", "0", "or", "state", "[", "'n_iter'", "]", "==", "cfg", ".", "training", ".", "n_iters", "-", "1", ":", "\n", "                    ", "for", "logger", "in", "low_freq_loggers", ":", "\n", "                        ", "logger", "(", "state", "=", "state", ",", "cfg", "=", "cfg", ",", "writer", "=", "writer", ",", "\n", "minibatch", "=", "minibatch", ",", "dataset", "=", "dataset", ")", "\n", "\n", "\n", "", "", "", "state", "[", "'n_iter'", "]", "+=", "1", "\n", "if", "state", "[", "'n_iter'", "]", ">", "cfg", ".", "training", ".", "n_iters", "-", "1", ":", "\n", "                ", "exit_flag", "=", "True", "\n", "break", "\n", "\n", "", "", "if", "exit_flag", ":", "\n", "            ", "break", "\n", "\n", "", "", "if", "rank", "==", "0", ":", "\n", "        ", "bookkeeping", ".", "no_more_preemption_recovery_needed", "(", "save_dir", ")", "\n", "writer", ".", "close", "(", ")", "\n", "\n", "", "return", "save_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.None.train.main": [[28, 120], ["print", "pathlib.Path", "lib.setup_tensorboard", "torch.device", "torch.device", "torch.device", "lib.create_model", "print", "lib.get_dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "lib.get_loss", "lib.get_train_step", "lib.get_optimizer", "lib.setup_preemption", "bookkeeping.setup_tensorboard.close", "lib.check_for_preempted_run", "bookkeeping.check_for_preempted_run.as_posix", "lib.create_experiment_folder", "lib.save_config_as_yaml", "print", "lib.create_inner_experiment_folders", "sum", "model_utils.create_model.parameters", "lib.resume_training", "low_freq_loggers.append", "tqdm.tqdm", "bookkeeping.check_for_preempted_run.as_posix", "lib.get_logger", "training_utils.get_train_step.step", "p.numel", "lib.save_checkpoint", "model_utils.create_model.parameters", "logger"], "function", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.setup_tensorboard", "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.model_utils.create_model", "home.repos.pwc.inspect_result.andrew-cr_tauldr.datasets.dataset_utils.get_dataset", "home.repos.pwc.inspect_result.andrew-cr_tauldr.losses.losses_utils.get_loss", "home.repos.pwc.inspect_result.andrew-cr_tauldr.training.training_utils.get_train_step", "home.repos.pwc.inspect_result.andrew-cr_tauldr.optimizers.optimizers_utils.get_optimizer", "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.setup_preemption", "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.DummyWriter.close", "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.check_for_preempted_run", "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.create_experiment_folder", "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.save_config_as_yaml", "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.create_inner_experiment_folders", "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.resume_training", "home.repos.pwc.inspect_result.andrew-cr_tauldr.loggers.logger_utils.get_logger", "home.repos.pwc.inspect_result.andrew-cr_tauldr.training.training.Standard.step", "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.save_checkpoint"], ["def", "main", "(", "cfg", ",", "custom_name", "=", "None", ")", ":", "\n", "    ", "print", "(", "\"Training with config\"", ",", "cfg", ".", "experiment_name", ")", "\n", "\n", "preempted_path", "=", "Path", "(", "\"null\"", ")", "\n", "if", "cfg", ".", "saving", ".", "enable_preemption_recovery", ":", "\n", "\n", "        ", "preempted_path", "=", "bookkeeping", ".", "check_for_preempted_run", "(", "cfg", ".", "save_location", ",", "\n", "cfg", ".", "saving", ".", "preemption_start_day_YYYYhyphenMMhyphenDD", ",", "\n", "cfg", ",", "\n", "cfg", ".", "saving", ".", "prepare_to_resume_after_timeout", "\n", ")", "\n", "\n", "", "if", "preempted_path", ".", "as_posix", "(", ")", "==", "\"null\"", ":", "\n", "        ", "save_dir", ",", "checkpoint_dir", ",", "config_dir", "=", "bookkeeping", ".", "create_experiment_folder", "(", "\n", "cfg", ".", "save_location", ",", "\n", "cfg", ".", "experiment_name", "if", "custom_name", "is", "None", "else", "custom_name", ",", "\n", "custom_name", "is", "None", "\n", ")", "\n", "bookkeeping", ".", "save_config_as_yaml", "(", "cfg", ",", "config_dir", ")", "\n", "\n", "# bookkeeping.save_git_hash(save_dir)", "\n", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Resuming from preempted run: \"", ",", "preempted_path", ")", "\n", "save_dir", "=", "preempted_path", "\n", "checkpoint_dir", ",", "config_dir", "=", "bookkeeping", ".", "create_inner_experiment_folders", "(", "save_dir", ")", "\n", "\n", "", "writer", "=", "bookkeeping", ".", "setup_tensorboard", "(", "save_dir", ",", "0", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "cfg", ".", "device", ")", "\n", "\n", "model", "=", "model_utils", ".", "create_model", "(", "cfg", ",", "device", ")", "\n", "print", "(", "\"number of parameters: \"", ",", "sum", "(", "[", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", ")", ")", "\n", "\n", "dataset", "=", "dataset_utils", ".", "get_dataset", "(", "cfg", ",", "device", ")", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "\n", "batch_size", "=", "cfg", ".", "data", ".", "batch_size", ",", "\n", "shuffle", "=", "cfg", ".", "data", ".", "shuffle", ")", "\n", "\n", "loss", "=", "losses_utils", ".", "get_loss", "(", "cfg", ")", "\n", "\n", "training_step", "=", "training_utils", ".", "get_train_step", "(", "cfg", ")", "\n", "\n", "optimizer", "=", "optimizers_utils", ".", "get_optimizer", "(", "model", ".", "parameters", "(", ")", ",", "cfg", ")", "\n", "\n", "state", "=", "{", "\n", "'model'", ":", "model", ",", "\n", "'optimizer'", ":", "optimizer", ",", "\n", "'n_iter'", ":", "0", "\n", "}", "\n", "\n", "bookkeeping", ".", "setup_preemption", "(", "save_dir", ",", "checkpoint_dir", ",", "state", ",", "\n", "cfg", ".", "saving", ".", "num_checkpoints_to_keep", ",", "\n", "cfg", ".", "saving", ".", "prepare_to_resume_after_timeout", ")", "\n", "\n", "\n", "if", "not", "preempted_path", ".", "as_posix", "(", ")", "==", "'null'", ":", "\n", "        ", "state", "=", "bookkeeping", ".", "resume_training", "(", "preempted_path", ",", "state", ",", "cfg", ".", "device", ")", "\n", "\n", "", "low_freq_loggers", "=", "[", "]", "\n", "for", "logger", "in", "cfg", ".", "saving", ".", "low_freq_loggers", ":", "\n", "        ", "low_freq_loggers", ".", "append", "(", "logger_utils", ".", "get_logger", "(", "logger", ")", ")", "\n", "\n", "", "exit_flag", "=", "False", "\n", "\n", "\n", "while", "True", ":", "\n", "        ", "for", "minibatch", "in", "tqdm", "(", "dataloader", ")", ":", "\n", "\n", "            ", "training_step", ".", "step", "(", "state", ",", "minibatch", ",", "loss", ",", "writer", ")", "\n", "\n", "if", "state", "[", "'n_iter'", "]", "%", "cfg", ".", "saving", ".", "checkpoint_freq", "==", "0", "or", "state", "[", "'n_iter'", "]", "==", "cfg", ".", "training", ".", "n_iters", "-", "1", ":", "\n", "                ", "bookkeeping", ".", "save_checkpoint", "(", "checkpoint_dir", ",", "state", ",", "\n", "cfg", ".", "saving", ".", "num_checkpoints_to_keep", ")", "\n", "\n", "", "if", "state", "[", "'n_iter'", "]", "%", "cfg", ".", "saving", ".", "log_low_freq", "==", "0", "or", "state", "[", "'n_iter'", "]", "==", "cfg", ".", "training", ".", "n_iters", "-", "1", ":", "\n", "                ", "for", "logger", "in", "low_freq_loggers", ":", "\n", "                    ", "logger", "(", "state", "=", "state", ",", "cfg", "=", "cfg", ",", "writer", "=", "writer", ",", "\n", "minibatch", "=", "minibatch", ",", "dataset", "=", "dataset", ")", "\n", "\n", "", "", "state", "[", "'n_iter'", "]", "+=", "1", "\n", "if", "state", "[", "'n_iter'", "]", ">", "cfg", ".", "training", ".", "n_iters", "-", "1", ":", "\n", "                ", "exit_flag", "=", "True", "\n", "break", "\n", "\n", "", "", "if", "exit_flag", ":", "\n", "            ", "break", "\n", "\n", "", "", "writer", ".", "close", "(", ")", "\n", "\n", "return", "save_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.NumpyWriter.__init__": [[137, 142], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "save_dir", ")", ":", "\n", "        ", "self", ".", "save_dir", "=", "save_dir", "\n", "self", ".", "scalar_data", "=", "{", "}", "\n", "self", ".", "figure_data", "=", "[", "]", "\n", "self", ".", "numpy_data", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.NumpyWriter.add_scalar": [[143, 149], ["[].append", "[].append"], "methods", ["None"], ["", "def", "add_scalar", "(", "self", ",", "name", ",", "value", ",", "idx", ")", ":", "\n", "        ", "if", "name", "in", "self", ".", "scalar_data", ":", "\n", "            ", "self", ".", "scalar_data", "[", "name", "]", "[", "0", "]", ".", "append", "(", "idx", ")", "\n", "self", ".", "scalar_data", "[", "name", "]", "[", "1", "]", ".", "append", "(", "value", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "scalar_data", "[", "name", "]", "=", "(", "[", "idx", "]", ",", "[", "value", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.NumpyWriter.add_figure": [[150, 152], ["bookkeeping.NumpyWriter.figure_data.append"], "methods", ["None"], ["", "", "def", "add_figure", "(", "self", ",", "name", ",", "fig", ",", "idx", ")", ":", "\n", "        ", "self", ".", "figure_data", ".", "append", "(", "(", "name", ",", "fig", ",", "idx", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.NumpyWriter.add_numpy_data": [[153, 155], ["bookkeeping.NumpyWriter.numpy_data.append"], "methods", ["None"], ["", "def", "add_numpy_data", "(", "self", ",", "name", ",", "nparray", ",", "idx", ")", ":", "\n", "        ", "self", ".", "numpy_data", ".", "append", "(", "(", "name", ",", "nparray", ",", "idx", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.NumpyWriter.save_to_disk": [[156, 169], ["numpy.zeros", "numpy.array", "numpy.array", "numpy.savetxt", "fig.savefig", "numpy.save", "pathlib.Path().joinpath", "pathlib.Path().joinpath", "pathlib.Path().joinpath", "len", "pathlib.Path", "pathlib.Path", "pathlib.Path", "str", "str"], "methods", ["None"], ["", "def", "save_to_disk", "(", "self", ")", ":", "\n", "        ", "for", "name", "in", "self", ".", "scalar_data", ":", "\n", "            ", "np_arr", "=", "np", ".", "zeros", "(", "(", "len", "(", "self", ".", "scalar_data", "[", "name", "]", "[", "0", "]", ")", ",", "2", ")", ")", "\n", "np_arr", "[", ":", ",", "0", "]", "=", "np", ".", "array", "(", "self", ".", "scalar_data", "[", "name", "]", "[", "0", "]", ")", "\n", "np_arr", "[", ":", ",", "1", "]", "=", "np", ".", "array", "(", "self", ".", "scalar_data", "[", "name", "]", "[", "1", "]", ")", "\n", "np", ".", "savetxt", "(", "Path", "(", "self", ".", "save_dir", ")", ".", "joinpath", "(", "name", ")", ",", "np_arr", ")", "\n", "", "for", "item", "in", "self", ".", "figure_data", ":", "\n", "            ", "name", ",", "fig", ",", "idx", "=", "item", "\n", "fig", ".", "savefig", "(", "Path", "(", "self", ".", "save_dir", ")", ".", "joinpath", "(", "name", "+", "'_'", "+", "str", "(", "idx", ")", "+", "'.pdf'", ")", ",", "\n", "format", "=", "'pdf'", ")", "\n", "", "for", "item", "in", "self", ".", "numpy_data", ":", "\n", "            ", "name", ",", "nparray", ",", "idx", "=", "item", "\n", "np", ".", "save", "(", "Path", "(", "self", ".", "save_dir", ")", ".", "joinpath", "(", "name", "+", "'_'", "+", "str", "(", "idx", ")", ")", ",", "nparray", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.NumpyWriter.close": [[170, 172], ["None"], "methods", ["None"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.DummyWriter.__init__": [[174, 176], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "save_dir", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.DummyWriter.add_scalar": [[177, 179], ["None"], "methods", ["None"], ["", "def", "add_scalar", "(", "self", ",", "name", ",", "value", ",", "idx", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.DummyWriter.add_figure": [[180, 182], ["None"], "methods", ["None"], ["", "def", "add_figure", "(", "self", ",", "name", ",", "fig", ",", "idx", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.DummyWriter.close": [[183, 185], ["None"], "methods", ["None"], ["", "def", "close", "(", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.create_experiment_folder": [[15, 28], ["datetime.datetime.today().strftime", "datetime.datetime.now().strftime", "pathlib.Path().joinpath().joinpath", "Path().joinpath().joinpath.mkdir", "bookkeeping.create_inner_experiment_folders", "datetime.datetime.today", "datetime.datetime.now", "pathlib.Path().joinpath", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.create_inner_experiment_folders"], ["def", "create_experiment_folder", "(", "save_location", ",", "inner_folder_name", ",", "include_time", "=", "True", ")", ":", "\n", "    ", "today_date", "=", "datetime", ".", "today", "(", ")", ".", "strftime", "(", "r'%Y-%m-%d'", ")", "\n", "now_time", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "r'%H-%M-%S'", ")", "\n", "if", "include_time", ":", "\n", "        ", "total_inner_folder_name", "=", "now_time", "+", "'_'", "+", "inner_folder_name", "\n", "", "else", ":", "\n", "        ", "total_inner_folder_name", "=", "inner_folder_name", "\n", "", "path", "=", "Path", "(", "save_location", ")", ".", "joinpath", "(", "today_date", ")", ".", "joinpath", "(", "total_inner_folder_name", ")", "\n", "path", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "checkpoint_dir", ",", "config_dir", "=", "create_inner_experiment_folders", "(", "path", ")", "\n", "\n", "return", "path", ",", "checkpoint_dir", ",", "config_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.create_inner_experiment_folders": [[29, 41], ["path.joinpath", "path.joinpath.mkdir", "path.joinpath.joinpath", "checkpoint_dir.joinpath.mkdir", "path.joinpath", "path.joinpath.mkdir"], "function", ["None"], ["", "def", "create_inner_experiment_folders", "(", "path", ")", ":", "\n", "\n", "    ", "checkpoint_dir", "=", "path", ".", "joinpath", "(", "'checkpoints'", ")", "\n", "checkpoint_dir", ".", "mkdir", "(", "exist_ok", "=", "True", ")", "\n", "\n", "checkpoint_archive_dir", "=", "checkpoint_dir", ".", "joinpath", "(", "'archive'", ")", "\n", "checkpoint_archive_dir", ".", "mkdir", "(", "exist_ok", "=", "True", ")", "\n", "\n", "config_dir", "=", "path", ".", "joinpath", "(", "'config'", ")", "\n", "config_dir", ".", "mkdir", "(", "exist_ok", "=", "True", ")", "\n", "\n", "return", "checkpoint_dir", ",", "config_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.save_config_as_yaml": [[43, 55], ["sorted", "glob.glob", "len", "pathlib.Path().joinpath", "int", "pathlib.Path().joinpath", "open", "yaml.dump", "pathlib.Path().joinpath().as_posix", "cfg.to_dict", "pathlib.Path", "pathlib.Path", "pathlib.Path().joinpath", "pathlib.Path"], "function", ["None"], ["", "def", "save_config_as_yaml", "(", "cfg", ",", "save_dir", ")", ":", "\n", "    ", "existing_configs", "=", "sorted", "(", "glob", ".", "glob", "(", "Path", "(", "save_dir", ")", ".", "joinpath", "(", "'config_*.yaml'", ")", ".", "as_posix", "(", ")", ")", ")", "\n", "\n", "if", "len", "(", "existing_configs", ")", "==", "0", ":", "\n", "        ", "save_name", "=", "Path", "(", "save_dir", ")", ".", "joinpath", "(", "'config_001.yaml'", ")", "\n", "", "else", ":", "\n", "        ", "most_recent_config", "=", "existing_configs", "[", "-", "1", "]", "\n", "most_recent_num", "=", "int", "(", "most_recent_config", "[", "-", "8", ":", "-", "5", "]", ")", "\n", "save_name", "=", "Path", "(", "save_dir", ")", ".", "joinpath", "(", "'config_{0:03d}.yaml'", ".", "format", "(", "most_recent_num", "+", "1", ")", ")", "\n", "\n", "", "with", "open", "(", "save_name", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "yaml", ".", "dump", "(", "cfg", ".", "to_dict", "(", ")", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.save_git_hash": [[56, 62], ["subprocess.check_output", "git_hash.decode.decode", "pathlib.Path().joinpath", "open", "f.write", "pathlib.Path"], "function", ["None"], ["", "", "def", "save_git_hash", "(", "save_dir", ")", ":", "\n", "    ", "git_hash", "=", "subprocess", ".", "check_output", "(", "[", "\"git\"", ",", "\"rev-parse\"", ",", "\"--verify\"", ",", "\"HEAD\"", "]", ")", "\n", "git_hash", "=", "git_hash", ".", "decode", "(", "\"utf-8\"", ")", "\n", "save_name", "=", "Path", "(", "save_dir", ")", ".", "joinpath", "(", "'git_hash.txt'", ")", "\n", "with", "open", "(", "save_name", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "git_hash", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.setup_tensorboard": [[63, 73], ["pathlib.Path().joinpath", "Path().joinpath.mkdir", "torch.writer.SummaryWriter", "bookkeeping.DummyWriter", "pathlib.Path"], "function", ["None"], ["", "", "def", "setup_tensorboard", "(", "save_dir", ",", "rank", ")", ":", "\n", "    ", "if", "rank", "==", "0", ":", "\n", "        ", "logs_dir", "=", "Path", "(", "save_dir", ")", ".", "joinpath", "(", "'tensorboard'", ")", "\n", "logs_dir", ".", "mkdir", "(", "exist_ok", "=", "True", ")", "\n", "\n", "writer", "=", "tensorboard", ".", "writer", ".", "SummaryWriter", "(", "logs_dir", ")", "\n", "\n", "return", "writer", "\n", "", "else", ":", "\n", "        ", "return", "DummyWriter", "(", "'none'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.save_checkpoint": [[74, 87], ["torch.save", "torch.save", "sorted", "state[].state_dict", "state[].state_dict", "checkpoint_dir.joinpath", "glob.glob", "len", "range", "checkpoint_dir.joinpath().as_posix", "os.remove", "len", "checkpoint_dir.joinpath"], "function", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.EMA.state_dict", "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.EMA.state_dict"], ["", "", "def", "save_checkpoint", "(", "checkpoint_dir", ",", "state", ",", "num_checkpoints_to_keep", ")", ":", "\n", "    ", "state_to_save", "=", "{", "\n", "'model'", ":", "state", "[", "'model'", "]", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "state", "[", "'optimizer'", "]", ".", "state_dict", "(", ")", ",", "\n", "'n_iter'", ":", "state", "[", "'n_iter'", "]", "\n", "}", "\n", "torch", ".", "save", "(", "state_to_save", ",", "\n", "checkpoint_dir", ".", "joinpath", "(", "'ckpt_{0:010d}.pt'", ".", "format", "(", "state", "[", "'n_iter'", "]", ")", ")", "\n", ")", "\n", "all_ckpts", "=", "sorted", "(", "glob", ".", "glob", "(", "checkpoint_dir", ".", "joinpath", "(", "'ckpt_*.pt'", ")", ".", "as_posix", "(", ")", ")", ")", "\n", "if", "len", "(", "all_ckpts", ")", ">", "num_checkpoints_to_keep", ":", "\n", "        ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "all_ckpts", ")", "-", "num_checkpoints_to_keep", ")", ":", "\n", "            ", "os", ".", "remove", "(", "all_ckpts", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.save_archive_checkpoint": [[88, 90], ["bookkeeping.save_checkpoint", "checkpoint_dir.joinpath"], "function", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.save_checkpoint"], ["", "", "", "def", "save_archive_checkpoint", "(", "checkpoint_dir", ",", "state", ")", ":", "\n", "    ", "save_checkpoint", "(", "checkpoint_dir", ".", "joinpath", "(", "'archive'", ")", ",", "state", ",", "9999999", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.resume_training": [[91, 101], ["bookkeeping.get_most_recent_checkpoint", "state[].load_state_dict", "state[].load_state_dict"], "function", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.get_most_recent_checkpoint", "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.EMA.load_state_dict", "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.EMA.load_state_dict"], ["", "def", "resume_training", "(", "resume_path", ",", "state", ",", "mapping", ")", ":", "\n", "\n", "\n", "    ", "loaded_state", "=", "get_most_recent_checkpoint", "(", "resume_path", ",", "mapping", ")", "\n", "\n", "state", "[", "'model'", "]", ".", "load_state_dict", "(", "loaded_state", "[", "'model'", "]", ")", "\n", "state", "[", "'optimizer'", "]", ".", "load_state_dict", "(", "loaded_state", "[", "'optimizer'", "]", ")", "\n", "state", "[", "'n_iter'", "]", "=", "loaded_state", "[", "'n_iter'", "]", "\n", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.get_most_recent_checkpoint": [[102, 110], ["sorted", "torch.load", "torch.load", "glob.glob", "dir.joinpath().joinpath().as_posix", "dir.joinpath().joinpath", "dir.joinpath"], "function", ["None"], ["", "def", "get_most_recent_checkpoint", "(", "dir", ",", "mapping", ")", ":", "\n", "# Get most recent checkpoint", "\n", "    ", "all_ckpts", "=", "sorted", "(", "glob", ".", "glob", "(", "dir", ".", "joinpath", "(", "'checkpoints'", ")", ".", "joinpath", "(", "'ckpt_*.pt'", ")", ".", "as_posix", "(", ")", ")", ")", "\n", "most_recent_checkpoint", "=", "all_ckpts", "[", "-", "1", "]", "\n", "\n", "loaded_state", "=", "torch", ".", "load", "(", "most_recent_checkpoint", ",", "map_location", "=", "mapping", ")", "\n", "\n", "return", "loaded_state", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.load_ml_collections": [[111, 115], ["ml_collections.ConfigDict", "open", "yaml.safe_load"], "function", ["None"], ["", "def", "load_ml_collections", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "raw_dict", "=", "yaml", ".", "safe_load", "(", "f", ")", "\n", "", "return", "ml_collections", ".", "ConfigDict", "(", "raw_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.setup_eval_folders": [[116, 130], ["experiment_path.joinpath", "experiment_path.joinpath.mkdir", "datetime.datetime.today().strftime", "datetime.datetime.now().strftime", "experiment_path.joinpath.joinpath", "eval_folder.joinpath.mkdir", "eval_folder.joinpath.joinpath", "eval_named_folder.joinpath.mkdir", "datetime.datetime.today", "datetime.datetime.now"], "function", ["None"], ["", "def", "setup_eval_folders", "(", "experiment_path", ",", "eval_name", ",", "job_id", "=", "0", ",", "task_id", "=", "0", ")", ":", "\n", "    ", "eval_folder", "=", "experiment_path", ".", "joinpath", "(", "'eval'", ")", "\n", "eval_folder", ".", "mkdir", "(", "exist_ok", "=", "True", ")", "\n", "\n", "today_date", "=", "datetime", ".", "today", "(", ")", ".", "strftime", "(", "r'%Y-%m-%d'", ")", "\n", "now_time", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "r'%H-%M-%S'", ")", "\n", "\n", "eval_folder_name_string", "=", "today_date", "+", "'_'", "+", "now_time", "+", "'_'", "+", "'IvI'", "+", "eval_name", "+", "'IvI'", "+", "f'_{job_id}_{task_id}'", "\n", "eval_named_folder", "=", "eval_folder", ".", "joinpath", "(", "eval_folder_name_string", ")", "\n", "eval_named_folder", ".", "mkdir", "(", "exist_ok", "=", "False", ")", "\n", "eval_named_folder_configs", "=", "eval_named_folder", ".", "joinpath", "(", "'config'", ")", "\n", "eval_named_folder_configs", ".", "mkdir", "(", "exist_ok", "=", "False", ")", "\n", "\n", "return", "eval_folder", ",", "eval_named_folder", ",", "eval_named_folder_configs", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.get_most_recent_config": [[131, 135], ["sorted", "glob.glob", "len", "config_path.joinpath().as_posix", "config_path.joinpath"], "function", ["None"], ["", "def", "get_most_recent_config", "(", "config_path", ")", ":", "\n", "    ", "configs", "=", "sorted", "(", "glob", ".", "glob", "(", "config_path", ".", "joinpath", "(", "'config_*.yaml'", ")", ".", "as_posix", "(", ")", ")", ")", "\n", "assert", "len", "(", "configs", ")", ">", "0", "\n", "return", "configs", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.signal_handler": [[187, 201], ["datetime.datetime.today().strftime", "bookkeeping.save_checkpoint", "sys.exit", "open", "f.write", "datetime.datetime.today"], "function", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.save_checkpoint"], ["", "", "def", "signal_handler", "(", "sig", ",", "frame", ",", "preemption_log_path", ",", "checkpoint_dir", ",", "state", ",", "num_checkpoints_to_keep", ")", ":", "\n", "    ", "time_string", "=", "datetime", ".", "today", "(", ")", ".", "strftime", "(", "r'%Y-%m-%d:%H-%M-%S'", ")", "\n", "if", "sig", "==", "signal", ".", "SIGCONT", ":", "\n", "        ", "write_string", "=", "time_string", "+", "\"  SIGCONT signal\\n\"", "\n", "", "elif", "sig", "==", "signal", ".", "SIGINT", ":", "\n", "        ", "write_string", "=", "time_string", "+", "\"  SIGINT signal\\n\"", "\n", "", "elif", "sig", "==", "signal", ".", "SIGTERM", ":", "\n", "        ", "write_string", "=", "time_string", "+", "\"  SIGTERM signal\\n\"", "\n", "", "with", "open", "(", "preemption_log_path", ",", "'a'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "write_string", ")", "\n", "\n", "", "save_checkpoint", "(", "checkpoint_dir", ",", "state", ",", "num_checkpoints_to_keep", ")", "\n", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.setup_preemption": [[203, 229], ["save_dir.joinpath", "datetime.datetime.today().strftime", "signal.signal", "signal.signal", "signal.signal", "os.path.isfile", "datetime.datetime.today", "open", "f.write", "bookkeeping.signal_handler", "bookkeeping.signal_handler", "bookkeeping.signal_handler", "f.write"], "function", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.signal_handler", "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.signal_handler", "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.signal_handler"], ["", "def", "setup_preemption", "(", "save_dir", ",", "checkpoint_dir", ",", "state", ",", "num_checkpoints_to_keep", ",", "\n", "prepare_to_resume_after_timeout", ")", ":", "\n", "\n", "    ", "preemption_log_path", "=", "save_dir", ".", "joinpath", "(", "'preemption_log.txt'", ")", "\n", "time_string", "=", "datetime", ".", "today", "(", ")", ".", "strftime", "(", "r'%Y-%m-%d:%H-%M-%S'", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "preemption_log_path", ")", ":", "\n", "        ", "with", "open", "(", "preemption_log_path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "time_string", "+", "'  start of log\\n'", ")", "\n", "if", "prepare_to_resume_after_timeout", ":", "\n", "                ", "f", ".", "write", "(", "time_string", "+", "' Expecting Timeout\\n'", ")", "\n", "\n", "", "", "", "signal", ".", "signal", "(", "\n", "signal", ".", "SIGCONT", ",", "\n", "lambda", "sig", ",", "frame", ":", "signal_handler", "(", "sig", ",", "frame", ",", "preemption_log_path", ",", "\n", "checkpoint_dir", ",", "state", ",", "num_checkpoints_to_keep", ")", "\n", ")", "\n", "signal", ".", "signal", "(", "\n", "signal", ".", "SIGINT", ",", "\n", "lambda", "sig", ",", "frame", ":", "signal_handler", "(", "sig", ",", "frame", ",", "preemption_log_path", ",", "\n", "checkpoint_dir", ",", "state", ",", "num_checkpoints_to_keep", ")", "\n", ")", "\n", "signal", ".", "signal", "(", "\n", "signal", ".", "SIGTERM", ",", "\n", "lambda", "sig", ",", "frame", ":", "signal_handler", "(", "sig", ",", "frame", ",", "preemption_log_path", ",", "\n", "checkpoint_dir", ",", "state", ",", "num_checkpoints_to_keep", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.check_for_preempted_run": [[231, 272], ["print", "pathlib.Path().joinpath", "sorted", "reversed", "print", "pathlib.Path", "glob.glob", "pathlib.Path", "bookkeeping.load_ml_collections", "datetime.datetime.today().strftime", "print", "pathlib.Path", "os.path.isfile", "open", "f.readlines", "os.path.isfile", "pathlib.Path.joinpath().joinpath", "open", "f.write", "Path().joinpath.as_posix", "pathlib.Path.joinpath", "pathlib.Path.joinpath", "pathlib.Path.joinpath().joinpath", "datetime.datetime.today", "pathlib.Path.joinpath", "f.write", "pathlib.Path.joinpath", "pathlib.Path.joinpath"], "function", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.load_ml_collections"], ["", "def", "check_for_preempted_run", "(", "save_location", ",", "start_date", ",", "cfg", ",", "\n", "prepare_to_resume_after_timeout", ")", ":", "\n", "    ", "print", "(", "\"Bookkeeping: checking for preempted run\"", ")", "\n", "\n", "# checks the runs in the start_date folder for ones which have the same ", "\n", "# config and also were preemppted. Then picks the most recent one or none", "\n", "check_dir", "=", "Path", "(", "save_location", ")", ".", "joinpath", "(", "start_date", ")", "\n", "inner_run_paths", "=", "sorted", "(", "glob", ".", "glob", "(", "check_dir", ".", "as_posix", "(", ")", "+", "'/*'", ")", ")", "\n", "for", "inner_run_path", "in", "reversed", "(", "inner_run_paths", ")", ":", "\n", "        ", "inner_run_path", "=", "Path", "(", "inner_run_path", ")", "\n", "\n", "# if the log doesn't exist then it is likely we are just starting", "\n", "# a parallel run and the other tasks haven't created it yet. so ", "\n", "# no need to preempt them", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "inner_run_path", ".", "joinpath", "(", "'preemption_log.txt'", ")", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "with", "open", "(", "inner_run_path", ".", "joinpath", "(", "'preemption_log.txt'", ")", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "preemption_log", "=", "f", ".", "readlines", "(", ")", "\n", "", "if", "not", "(", "'SIGCONT'", "in", "preemption_log", "[", "-", "1", "]", "or", "'Expecting Timeout'", "in", "preemption_log", "[", "-", "1", "]", ")", ":", "\n", "            ", "continue", "\n", "\n", "# its confusing if there's changes in configs going on as well", "\n", "", "assert", "not", "os", ".", "path", ".", "isfile", "(", "inner_run_path", ".", "joinpath", "(", "'config'", ")", ".", "joinpath", "(", "'config_002.yaml'", ")", ")", "\n", "\n", "run_config", "=", "load_ml_collections", "(", "inner_run_path", ".", "joinpath", "(", "'config'", ")", ".", "joinpath", "(", "'config_001.yaml'", ")", ")", "\n", "if", "not", "run_config", "==", "cfg", ":", "\n", "            ", "continue", "\n", "\n", "", "time_string", "=", "datetime", ".", "today", "(", ")", ".", "strftime", "(", "r'%Y-%m-%d:%H-%M-%S'", ")", "\n", "with", "open", "(", "inner_run_path", ".", "joinpath", "(", "'preemption_log.txt'", ")", ",", "'a'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "time_string", "+", "\"  resuming after preemption\\n\"", ")", "\n", "if", "prepare_to_resume_after_timeout", ":", "\n", "                ", "f", ".", "write", "(", "time_string", "+", "\" Expecting Timeout\\n\"", ")", "\n", "\n", "", "", "print", "(", "\"Bookkeeping: found preempted run: \"", ",", "inner_run_path", ")", "\n", "return", "inner_run_path", "\n", "\n", "", "print", "(", "\"Bookkeeping: no preempted run found\"", ")", "\n", "\n", "return", "Path", "(", "\"null\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.no_more_preemption_recovery_needed": [[273, 279], ["print", "experiment_dir.joinpath", "datetime.datetime.today().strftime", "open", "f.write", "datetime.datetime.today"], "function", ["None"], ["", "def", "no_more_preemption_recovery_needed", "(", "experiment_dir", ")", ":", "\n", "    ", "print", "(", "\"Bookkeeping: adding to preemption log that run finished\"", ")", "\n", "preemption_log_path", "=", "experiment_dir", ".", "joinpath", "(", "'preemption_log.txt'", ")", "\n", "time_string", "=", "datetime", ".", "today", "(", ")", ".", "strftime", "(", "r'%Y-%m-%d:%H-%M-%S'", ")", "\n", "with", "open", "(", "preemption_log_path", ",", "'a'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "time_string", "+", "'  Finished Run'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.utils.flatten_dict": [[6, 14], ["isinstance", "str", "dd.items", "flatten_dict().items", "str", "str", "utils.flatten_dict"], "function", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.utils.flatten_dict"], ["def", "flatten_dict", "(", "dd", ",", "separator", "=", "'*'", ",", "prefix", "=", "''", ")", ":", "\n", "    ", "\"\"\"\n    https://www.geeksforgeeks.org/python-convert-nested-dictionary-into-flattened-dictionary/\n    \"\"\"", "\n", "return", "{", "str", "(", "prefix", ")", "+", "separator", "+", "str", "(", "k", ")", "if", "prefix", "!=", "''", "else", "str", "(", "k", ")", ":", "v", "\n", "for", "kk", ",", "vv", "in", "dd", ".", "items", "(", ")", "\n", "for", "k", ",", "v", "in", "flatten_dict", "(", "vv", ",", "separator", ",", "kk", ")", ".", "items", "(", ")", "\n", "}", "if", "isinstance", "(", "dd", ",", "dict", ")", "else", "{", "prefix", ":", "dd", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.utils.set_in_nested_dict": [[15, 37], ["utils.set_in_nested_dict", "len"], "function", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.utils.set_in_nested_dict"], ["", "def", "set_in_nested_dict", "(", "nested_dict", ",", "keys", ",", "new_val", ")", ":", "\n", "    ", "\"\"\"\n        Sets a value in a nested dictionary (or ml_collections config)\n        e.g.\n        nested_dict = \\\n        {\n            'outer1': {\n                'inner1': 4,\n                'inner2': 5\n            },\n            'outer2': {\n                'inner3': 314,\n                'inner4': 654\n            }\n        } \n        keys = ['outer2', 'inner3']\n        new_val = 315\n    \"\"\"", "\n", "if", "len", "(", "keys", ")", "==", "1", ":", "\n", "        ", "nested_dict", "[", "keys", "[", "-", "1", "]", "]", "=", "new_val", "\n", "return", "\n", "", "return", "set_in_nested_dict", "(", "nested_dict", "[", "keys", "[", "0", "]", "]", ",", "keys", "[", "1", ":", "]", ",", "new_val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.utils.is_model_state_DDP": [[38, 43], ["dict.keys"], "function", ["None"], ["", "def", "is_model_state_DDP", "(", "dict", ")", ":", "\n", "    ", "for", "key", "in", "dict", ".", "keys", "(", ")", ":", "\n", "        ", "if", "'.module.'", "in", "key", ":", "\n", "            ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.utils.remove_module_from_keys": [[44, 56], ["dict.keys", "key.replace"], "function", ["None"], ["", "def", "remove_module_from_keys", "(", "dict", ")", ":", "\n", "# dict has keys of the form a.b.module.c.d", "\n", "# changes to a.b.c.d", "\n", "    ", "new_dict", "=", "{", "}", "\n", "for", "key", "in", "dict", ".", "keys", "(", ")", ":", "\n", "        ", "if", "'.module.'", "in", "key", ":", "\n", "            ", "new_key", "=", "key", ".", "replace", "(", "'.module.'", ",", "'.'", ")", "\n", "new_dict", "[", "new_key", "]", "=", "dict", "[", "key", "]", "\n", "", "else", ":", "\n", "            ", "new_dict", "[", "key", "]", "=", "dict", "[", "key", "]", "\n", "\n", "", "", "return", "new_dict", "", "", ""]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.loggers.loggers.denoisingImages": [[19, 60], ["matplotlib.subplots", "range", "writer.add_figure", "x.transpose.transpose", "x.transpose.transpose", "len", "range", "len", "model.transition", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical.sample().view", "model().view", "ax[].imshow", "ax[].axis", "ax[].imshow", "ax[].axis", "torch.tensor", "torch.tensor", "torch.max", "torch.max", "loggers.denoisingImages.imgtrans"], "function", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.DummyWriter.add_figure", "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.GaussianTargetRate.transition"], ["@", "logger_utils", ".", "register_logger", "\n", "def", "denoisingImages", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "state", "=", "kwargs", "[", "'state'", "]", "\n", "cfg", "=", "kwargs", "[", "'cfg'", "]", "\n", "writer", "=", "kwargs", "[", "'writer'", "]", "\n", "minibatch", "=", "kwargs", "[", "'minibatch'", "]", "\n", "dataset", "=", "kwargs", "[", "'dataset'", "]", "\n", "model", "=", "state", "[", "'model'", "]", "\n", "\n", "ts", "=", "[", "0.01", ",", "0.3", ",", "0.5", ",", "0.6", ",", "0.7", ",", "0.8", ",", "1.0", "]", "\n", "C", ",", "H", ",", "W", "=", "cfg", ".", "data", ".", "shape", "\n", "B", "=", "1", "\n", "S", "=", "cfg", ".", "data", ".", "S", "\n", "\n", "def", "imgtrans", "(", "x", ")", ":", "\n", "# C,H,W -> H,W,C", "\n", "        ", "x", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", "\n", "return", "x", "\n", "\n", "", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "6", ",", "len", "(", "ts", ")", ")", "\n", "for", "img_idx", "in", "range", "(", "3", ")", ":", "\n", "        ", "for", "t_idx", "in", "range", "(", "len", "(", "ts", ")", ")", ":", "\n", "            ", "qt0", "=", "model", ".", "transition", "(", "torch", ".", "tensor", "(", "[", "ts", "[", "t_idx", "]", "]", ",", "device", "=", "model", ".", "device", ")", ")", "# (B, S, S)", "\n", "qt0_rows", "=", "qt0", "[", "\n", "0", ",", "minibatch", "[", "img_idx", ",", "...", "]", ".", "flatten", "(", ")", ".", "long", "(", ")", ",", ":", "\n", "]", "\n", "x_t_cat", "=", "torch", ".", "distributions", ".", "categorical", ".", "Categorical", "(", "\n", "qt0_rows", "\n", ")", "\n", "x_t", "=", "x_t_cat", ".", "sample", "(", ")", ".", "view", "(", "1", ",", "C", "*", "H", "*", "W", ")", "\n", "\n", "x_0_logits", "=", "model", "(", "x_t", ",", "torch", ".", "tensor", "(", "[", "ts", "[", "t_idx", "]", "]", ",", "device", "=", "model", ".", "device", ")", ")", ".", "view", "(", "B", ",", "C", ",", "H", ",", "W", ",", "S", ")", "\n", "x_0_max_logits", "=", "torch", ".", "max", "(", "x_0_logits", ",", "dim", "=", "4", ")", "[", "1", "]", "\n", "\n", "ax", "[", "2", "*", "img_idx", ",", "t_idx", "]", ".", "imshow", "(", "imgtrans", "(", "x_t", ".", "view", "(", "B", ",", "C", ",", "H", ",", "W", ")", "[", "0", ",", "...", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", ")", "\n", "ax", "[", "2", "*", "img_idx", ",", "t_idx", "]", ".", "axis", "(", "'off'", ")", "\n", "ax", "[", "2", "*", "img_idx", "+", "1", ",", "t_idx", "]", ".", "imshow", "(", "imgtrans", "(", "x_0_max_logits", "[", "0", ",", "...", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", ")", "\n", "ax", "[", "2", "*", "img_idx", "+", "1", ",", "t_idx", "]", ".", "axis", "(", "'off'", ")", "\n", "\n", "", "", "writer", ".", "add_figure", "(", "'denoisingImages'", ",", "fig", ",", "state", "[", "'n_iter'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.loggers.loggers.ConditionalDenoisingNoteSeq": [[62, 115], ["fig.set_size_inches", "writer.add_figure", "torch.no_grad", "torch.no_grad", "matplotlib.subplots", "range", "len", "range", "len", "len", "model.transition", "minibatch[].view", "minibatch[].view", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical.sample().view", "torch.concat", "torch.concat", "model().view", "x_0_max_logits.cpu().detach().numpy", "x_t_cat.sample().view.cpu().detach().numpy", "conditioner[].cpu().detach().numpy", "ax[].scatter", "ax[].axis", "ax[].set_ylim", "ax[].scatter", "ax[].axis", "ax[].set_ylim", "torch.tensor", "torch.tensor", "torch.max", "torch.max", "numpy.arange", "numpy.concatenate", "numpy.arange", "numpy.concatenate", "torch.distributions.categorical.Categorical.sample", "model", "x_0_max_logits.cpu().detach", "x_t_cat.sample().view.cpu().detach", "conditioner[].cpu().detach", "minibatch[].view.flatten().long", "torch.tensor", "torch.tensor", "x_0_max_logits.cpu", "x_t_cat.sample().view.cpu", "conditioner[].cpu", "minibatch[].view.flatten"], "function", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.DummyWriter.add_figure", "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.GaussianTargetRate.transition", "home.repos.pwc.inspect_result.andrew-cr_tauldr.sampling.sampling.ConditionalPCTauLeaping.sample"], ["", "@", "logger_utils", ".", "register_logger", "\n", "def", "ConditionalDenoisingNoteSeq", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "state", "=", "kwargs", "[", "'state'", "]", "\n", "cfg", "=", "kwargs", "[", "'cfg'", "]", "\n", "writer", "=", "kwargs", "[", "'writer'", "]", "\n", "dataset", "=", "kwargs", "[", "'dataset'", "]", "\n", "model", "=", "state", "[", "'model'", "]", "\n", "minibatch", "=", "kwargs", "[", "'minibatch'", "]", "\n", "\n", "ts", "=", "[", "0.01", ",", "0.1", ",", "0.3", ",", "0.7", ",", "1.0", "]", "\n", "total_L", "=", "cfg", ".", "data", ".", "shape", "[", "0", "]", "\n", "data_L", "=", "cfg", ".", "data", ".", "shape", "[", "0", "]", "-", "cfg", ".", "loss", ".", "condition_dim", "\n", "S", "=", "cfg", ".", "data", ".", "S", "\n", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "2", ",", "len", "(", "ts", ")", ")", "\n", "for", "data_idx", "in", "range", "(", "1", ")", ":", "\n", "            ", "for", "t_idx", "in", "range", "(", "len", "(", "ts", ")", ")", ":", "\n", "                ", "qt0", "=", "model", ".", "transition", "(", "torch", ".", "tensor", "(", "[", "ts", "[", "t_idx", "]", "]", ",", "device", "=", "model", ".", "device", ")", ")", "# (B, S, S)", "\n", "conditioner", "=", "minibatch", "[", "data_idx", ",", "0", ":", "cfg", ".", "loss", ".", "condition_dim", "]", ".", "view", "(", "1", ",", "cfg", ".", "loss", ".", "condition_dim", ")", "\n", "data", "=", "minibatch", "[", "data_idx", ",", "cfg", ".", "loss", ".", "condition_dim", ":", "]", ".", "view", "(", "1", ",", "data_L", ")", "\n", "qt0_rows", "=", "qt0", "[", "\n", "0", ",", "data", ".", "flatten", "(", ")", ".", "long", "(", ")", ",", ":", "\n", "]", "\n", "x_t_cat", "=", "torch", ".", "distributions", ".", "categorical", ".", "Categorical", "(", "\n", "qt0_rows", "\n", ")", "\n", "x_t", "=", "x_t_cat", ".", "sample", "(", ")", ".", "view", "(", "1", ",", "data_L", ")", "\n", "\n", "model_input", "=", "torch", ".", "concat", "(", "(", "conditioner", ",", "x_t", ")", ",", "dim", "=", "1", ")", "\n", "\n", "full_x_0_logits", "=", "model", "(", "model_input", ",", "torch", ".", "tensor", "(", "[", "ts", "[", "t_idx", "]", "]", ",", "device", "=", "model", ".", "device", ")", ")", ".", "view", "(", "1", ",", "total_L", ",", "S", ")", "\n", "x_0_logits", "=", "full_x_0_logits", "[", ":", ",", "cfg", ".", "loss", ".", "condition_dim", ":", ",", ":", "]", "\n", "\n", "x_0_max_logits", "=", "torch", ".", "max", "(", "x_0_logits", ",", "dim", "=", "2", ")", "[", "1", "]", "\n", "\n", "x_0_np", "=", "x_0_max_logits", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "x_t_np", "=", "x_t", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "conditioner_np", "=", "conditioner", "[", "data_idx", ",", ":", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "ax", "[", "2", "*", "data_idx", ",", "t_idx", "]", ".", "scatter", "(", "np", ".", "arange", "(", "total_L", ")", ",", "\n", "np", ".", "concatenate", "(", "(", "conditioner_np", ",", "x_t_np", "[", "0", ",", ":", "]", ")", ",", "axis", "=", "0", ")", ",", "s", "=", "0.1", ")", "\n", "ax", "[", "2", "*", "data_idx", ",", "t_idx", "]", ".", "axis", "(", "'off'", ")", "\n", "ax", "[", "2", "*", "data_idx", ",", "t_idx", "]", ".", "set_ylim", "(", "0", ",", "S", ")", "\n", "ax", "[", "2", "*", "data_idx", "+", "1", ",", "t_idx", "]", ".", "scatter", "(", "np", ".", "arange", "(", "total_L", ")", ",", "\n", "np", ".", "concatenate", "(", "(", "conditioner_np", ",", "x_0_np", "[", "0", ",", ":", "]", ")", ",", "axis", "=", "0", ")", ",", "s", "=", "0.1", ")", "\n", "ax", "[", "2", "*", "data_idx", "+", "1", ",", "t_idx", "]", ".", "axis", "(", "'off'", ")", "\n", "ax", "[", "2", "*", "data_idx", "+", "1", ",", "t_idx", "]", ".", "set_ylim", "(", "0", ",", "S", ")", "\n", "\n", "", "", "", "fig", ".", "set_size_inches", "(", "len", "(", "ts", ")", "*", "2", ",", "2", "*", "2", ")", "\n", "\n", "writer", ".", "add_figure", "(", "'ConditionaldenoisingNoteSeq'", ",", "fig", ",", "state", "[", "'n_iter'", "]", ")", "", "", ""]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.loggers.logger_utils.register_logger": [[3, 9], ["ValueError"], "function", ["None"], ["def", "register_logger", "(", "func", ")", ":", "\n", "    ", "name", "=", "func", ".", "__name__", "\n", "if", "name", "in", "_LOGGERS", ":", "\n", "        ", "raise", "ValueError", "(", "f'{name} is already registered!'", ")", "\n", "", "_LOGGERS", "[", "name", "]", "=", "func", "\n", "return", "func", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.loggers.logger_utils.get_logger": [[10, 12], ["None"], "function", ["None"], ["", "def", "get_logger", "(", "name", ")", ":", "\n", "    ", "return", "_LOGGERS", "[", "name", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.datasets.dataset_utils.register_dataset": [[3, 9], ["ValueError"], "function", ["None"], ["def", "register_dataset", "(", "cls", ")", ":", "\n", "    ", "name", "=", "cls", ".", "__name__", "\n", "if", "name", "in", "_DATASETS", ":", "\n", "        ", "raise", "ValueError", "(", "f'{name} is already registered!'", ")", "\n", "", "_DATASETS", "[", "name", "]", "=", "cls", "\n", "return", "cls", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.datasets.dataset_utils.get_dataset": [[10, 12], ["None"], "function", ["None"], ["", "def", "get_dataset", "(", "cfg", ",", "device", ")", ":", "\n", "    ", "return", "_DATASETS", "[", "cfg", ".", "data", ".", "name", "]", "(", "cfg", ",", "device", ")", "", "", ""]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.datasets.datasets.DiscreteCIFAR10.__init__": [[12, 28], ["super().__init__", "torch.from_numpy", "datasets.DiscreteCIFAR10.data.transpose", "datasets.DiscreteCIFAR10.data.transpose", "torch.from_numpy", "datasets.DiscreteCIFAR10.data.to().view", "numpy.array", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.RandomHorizontalFlip", "datasets.DiscreteCIFAR10.data.to"], "methods", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.losses.losses.ConditionalAux.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "device", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "root", "=", "cfg", ".", "data", ".", "root", ",", "train", "=", "cfg", ".", "data", ".", "train", ",", "\n", "download", "=", "cfg", ".", "data", ".", "download", ")", "\n", "\n", "self", ".", "data", "=", "torch", ".", "from_numpy", "(", "self", ".", "data", ")", "\n", "self", ".", "data", "=", "self", ".", "data", ".", "transpose", "(", "1", ",", "3", ")", "\n", "self", ".", "data", "=", "self", ".", "data", ".", "transpose", "(", "2", ",", "3", ")", "\n", "\n", "self", ".", "targets", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "self", ".", "targets", ")", ")", "\n", "\n", "# Put both data and targets on GPU in advance", "\n", "self", ".", "data", "=", "self", ".", "data", ".", "to", "(", "device", ")", ".", "view", "(", "-", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "\n", "self", ".", "random_flips", "=", "cfg", ".", "data", ".", "random_flips", "\n", "if", "self", ".", "random_flips", ":", "\n", "            ", "self", ".", "flip", "=", "torchvision", ".", "transforms", ".", "RandomHorizontalFlip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.datasets.datasets.DiscreteCIFAR10.raw_folder": [[30, 33], ["os.path.join"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "raw_folder", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'CIFAR10'", ",", "'raw'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.datasets.datasets.DiscreteCIFAR10.processed_folder": [[34, 37], ["os.path.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "processed_folder", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'CIFAR10'", ",", "'processed'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.datasets.datasets.DiscreteCIFAR10.__getitem__": [[38, 52], ["datasets.DiscreteCIFAR10.flip"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n\n        Returns:\n            tuple: (image, target) where target is index of the target class.\n        \"\"\"", "\n", "img", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "targets", "[", "index", "]", "\n", "\n", "if", "self", ".", "random_flips", ":", "\n", "            ", "img", "=", "self", ".", "flip", "(", "img", ")", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.datasets.datasets.LakhPianoroll.__init__": [[56, 62], ["numpy.load", "torch.from_numpy().to", "torch.from_numpy"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "device", ")", ":", "\n", "        ", "S", "=", "cfg", ".", "data", ".", "S", "\n", "L", "=", "cfg", ".", "data", ".", "shape", "[", "0", "]", "\n", "np_data", "=", "np", ".", "load", "(", "cfg", ".", "data", ".", "path", ")", "# (N, L) in range [0, S)", "\n", "\n", "self", ".", "data", "=", "torch", ".", "from_numpy", "(", "np_data", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.datasets.datasets.LakhPianoroll.__len__": [[63, 65], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.datasets.datasets.LakhPianoroll.__getitem__": [[66, 69], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "return", "self", ".", "data", "[", "index", "]", "", "", "", ""]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.sampling.sampling_utils.register_sampler": [[3, 9], ["ValueError"], "function", ["None"], ["def", "register_sampler", "(", "cls", ")", ":", "\n", "    ", "name", "=", "cls", ".", "__name__", "\n", "if", "name", "in", "_SAMPLERS", ":", "\n", "        ", "raise", "ValueError", "(", "f'{name} is already registered!'", ")", "\n", "", "_SAMPLERS", "[", "name", "]", "=", "cls", "\n", "return", "cls", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.sampling.sampling_utils.get_sampler": [[10, 12], ["None"], "function", ["None"], ["", "def", "get_sampler", "(", "cfg", ")", ":", "\n", "    ", "return", "_SAMPLERS", "[", "cfg", ".", "sampler", ".", "name", "]", "(", "cfg", ")", "", "", ""]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.sampling.sampling.TauLeaping.__init__": [[32, 34], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "self", ".", "cfg", "=", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.sampling.sampling.TauLeaping.sample": [[35, 121], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "sampling.get_initial_samples", "numpy.concatenate", "tqdm.tqdm.tqdm", "numpy.array().astype", "numpy.array().astype", "torch.softmax", "torch.softmax", "torch.softmax", "enumerate", "model.transition", "model.rate", "torch.softmax", "torch.softmax", "torch.softmax", "rate[].view", "torch.distributions.poisson.Poisson", "torch.distributions.poisson.Poisson", "torch.distributions.poisson.Poisson", "torch.distributions.poisson.Poisson", "torch.distributions.poisson.Poisson", "torch.distributions.poisson.Poisson", "torch.distributions.poisson.Poisson", "torch.distributions.poisson.Poisson", "torch.distributions.poisson.Poisson", "torch.distributions.poisson.Poisson.sample", "torch.distributions.poisson.Poisson.sample", "torch.distributions.poisson.Poisson.sample", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "model", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "x_0max.detach().cpu().numpy().astype", "numpy.linspace", "numpy.array", "numpy.linspace", "model", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "numpy.array().astype.append", "numpy.array().astype.append", "qt0[].view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "get_initial_samples.view", "numpy.array", "numpy.array", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "get_initial_samples.clone().detach().cpu().numpy", "x_0max.clone().detach().cpu().numpy", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "x_0max.detach().cpu().numpy", "len", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "get_initial_samples.long().flatten", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "get_initial_samples.clone().detach().cpu", "x_0max.clone().detach().cpu", "x_0max.detach().cpu", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "get_initial_samples.long().flatten().repeat_interleave", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "get_initial_samples.long", "get_initial_samples.clone().detach", "x_0max.clone().detach", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "get_initial_samples.long().flatten().repeat_interleave", "x_0max.detach", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "get_initial_samples.long().flatten", "get_initial_samples.clone", "x_0max.clone", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "get_initial_samples.long().flatten", "get_initial_samples.long", "get_initial_samples.long"], "methods", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.sampling.sampling.get_initial_samples", "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.GaussianTargetRate.transition", "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.GaussianTargetRate.rate", "home.repos.pwc.inspect_result.andrew-cr_tauldr.sampling.sampling.ConditionalPCTauLeaping.sample", "home.repos.pwc.inspect_result.andrew-cr_tauldr.sampling.sampling.ConditionalPCTauLeaping.sample", "home.repos.pwc.inspect_result.andrew-cr_tauldr.sampling.sampling.ConditionalPCTauLeaping.sample"], ["", "def", "sample", "(", "self", ",", "model", ",", "N", ",", "num_intermediates", ")", ":", "\n", "        ", "t", "=", "1.0", "\n", "C", ",", "H", ",", "W", "=", "self", ".", "cfg", ".", "data", ".", "shape", "\n", "D", "=", "C", "*", "H", "*", "W", "\n", "S", "=", "self", ".", "cfg", ".", "data", ".", "S", "\n", "scfg", "=", "self", ".", "cfg", ".", "sampler", "\n", "num_steps", "=", "scfg", ".", "num_steps", "\n", "min_t", "=", "scfg", ".", "min_t", "\n", "eps_ratio", "=", "scfg", ".", "eps_ratio", "\n", "initial_dist", "=", "scfg", ".", "initial_dist", "\n", "if", "initial_dist", "==", "'gaussian'", ":", "\n", "            ", "initial_dist_std", "=", "model", ".", "Q_sigma", "\n", "", "else", ":", "\n", "            ", "initial_dist_std", "=", "None", "\n", "", "device", "=", "model", ".", "device", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "x", "=", "get_initial_samples", "(", "N", ",", "D", ",", "device", ",", "S", ",", "initial_dist", ",", "\n", "initial_dist_std", ")", "\n", "\n", "\n", "ts", "=", "np", ".", "concatenate", "(", "(", "np", ".", "linspace", "(", "1.0", ",", "min_t", ",", "num_steps", ")", ",", "np", ".", "array", "(", "[", "0", "]", ")", ")", ")", "\n", "save_ts", "=", "ts", "[", "np", ".", "linspace", "(", "0", ",", "len", "(", "ts", ")", "-", "2", ",", "num_intermediates", ",", "dtype", "=", "int", ")", "]", "\n", "\n", "x_hist", "=", "[", "]", "\n", "x0_hist", "=", "[", "]", "\n", "\n", "counter", "=", "0", "\n", "for", "idx", ",", "t", "in", "tqdm", "(", "enumerate", "(", "ts", "[", "0", ":", "-", "1", "]", ")", ")", ":", "\n", "                ", "h", "=", "ts", "[", "idx", "]", "-", "ts", "[", "idx", "+", "1", "]", "\n", "\n", "qt0", "=", "model", ".", "transition", "(", "t", "*", "torch", ".", "ones", "(", "(", "N", ",", ")", ",", "device", "=", "device", ")", ")", "# (N, S, S)", "\n", "rate", "=", "model", ".", "rate", "(", "t", "*", "torch", ".", "ones", "(", "(", "N", ",", ")", ",", "device", "=", "device", ")", ")", "# (N, S, S)", "\n", "\n", "p0t", "=", "F", ".", "softmax", "(", "model", "(", "x", ",", "t", "*", "torch", ".", "ones", "(", "(", "N", ",", ")", ",", "device", "=", "device", ")", ")", ",", "dim", "=", "2", ")", "# (N, D, S)", "\n", "\n", "\n", "x_0max", "=", "torch", ".", "max", "(", "p0t", ",", "dim", "=", "2", ")", "[", "1", "]", "\n", "if", "t", "in", "save_ts", ":", "\n", "                    ", "x_hist", ".", "append", "(", "x", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "x0_hist", ".", "append", "(", "x_0max", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "\n", "\n", "", "qt0_denom", "=", "qt0", "[", "\n", "torch", ".", "arange", "(", "N", ",", "device", "=", "device", ")", ".", "repeat_interleave", "(", "D", "*", "S", ")", ",", "\n", "torch", ".", "arange", "(", "S", ",", "device", "=", "device", ")", ".", "repeat", "(", "N", "*", "D", ")", ",", "\n", "x", ".", "long", "(", ")", ".", "flatten", "(", ")", ".", "repeat_interleave", "(", "S", ")", "\n", "]", ".", "view", "(", "N", ",", "D", ",", "S", ")", "+", "eps_ratio", "\n", "\n", "# First S is x0 second S is x tilde", "\n", "\n", "qt0_numer", "=", "qt0", "# (N, S, S)", "\n", "\n", "forward_rates", "=", "rate", "[", "\n", "torch", ".", "arange", "(", "N", ",", "device", "=", "device", ")", ".", "repeat_interleave", "(", "D", "*", "S", ")", ",", "\n", "torch", ".", "arange", "(", "S", ",", "device", "=", "device", ")", ".", "repeat", "(", "N", "*", "D", ")", ",", "\n", "x", ".", "long", "(", ")", ".", "flatten", "(", ")", ".", "repeat_interleave", "(", "S", ")", "\n", "]", ".", "view", "(", "N", ",", "D", ",", "S", ")", "\n", "\n", "inner_sum", "=", "(", "p0t", "/", "qt0_denom", ")", "@", "qt0_numer", "# (N, D, S)", "\n", "\n", "reverse_rates", "=", "forward_rates", "*", "inner_sum", "# (N, D, S)", "\n", "\n", "reverse_rates", "[", "\n", "torch", ".", "arange", "(", "N", ",", "device", "=", "device", ")", ".", "repeat_interleave", "(", "D", ")", ",", "\n", "torch", ".", "arange", "(", "D", ",", "device", "=", "device", ")", ".", "repeat", "(", "N", ")", ",", "\n", "x", ".", "long", "(", ")", ".", "flatten", "(", ")", "\n", "]", "=", "0.0", "\n", "\n", "diffs", "=", "torch", ".", "arange", "(", "S", ",", "device", "=", "device", ")", ".", "view", "(", "1", ",", "1", ",", "S", ")", "-", "x", ".", "view", "(", "N", ",", "D", ",", "1", ")", "\n", "poisson_dist", "=", "torch", ".", "distributions", ".", "poisson", ".", "Poisson", "(", "reverse_rates", "*", "h", ")", "\n", "jump_nums", "=", "poisson_dist", ".", "sample", "(", ")", "\n", "adj_diffs", "=", "jump_nums", "*", "diffs", "\n", "overall_jump", "=", "torch", ".", "sum", "(", "adj_diffs", ",", "dim", "=", "2", ")", "\n", "xp", "=", "x", "+", "overall_jump", "\n", "x_new", "=", "torch", ".", "clamp", "(", "xp", ",", "min", "=", "0", ",", "max", "=", "S", "-", "1", ")", "\n", "\n", "x", "=", "x_new", "\n", "\n", "", "x_hist", "=", "np", ".", "array", "(", "x_hist", ")", ".", "astype", "(", "int", ")", "\n", "x0_hist", "=", "np", ".", "array", "(", "x0_hist", ")", ".", "astype", "(", "int", ")", "\n", "\n", "p_0gt", "=", "F", ".", "softmax", "(", "model", "(", "x", ",", "min_t", "*", "torch", ".", "ones", "(", "(", "N", ",", ")", ",", "device", "=", "device", ")", ")", ",", "dim", "=", "2", ")", "# (N, D, S)", "\n", "x_0max", "=", "torch", ".", "max", "(", "p_0gt", ",", "dim", "=", "2", ")", "[", "1", "]", "\n", "return", "x_0max", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "int", ")", ",", "x_hist", ",", "x0_hist", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.sampling.sampling.PCTauLeaping.__init__": [[124, 126], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "self", ".", "cfg", "=", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.sampling.sampling.PCTauLeaping.sample": [[127, 241], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "sampling.get_initial_samples", "numpy.linspace", "tqdm.tqdm.tqdm", "numpy.array().astype", "numpy.array().astype", "torch.softmax", "torch.softmax", "torch.softmax", "enumerate", "sampling.PCTauLeaping.sample.get_rates"], "methods", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.sampling.sampling.get_initial_samples"], ["", "def", "sample", "(", "self", ",", "model", ",", "N", ",", "num_intermediates", ")", ":", "\n", "        ", "t", "=", "1.0", "\n", "\n", "C", ",", "H", ",", "W", "=", "self", ".", "cfg", ".", "data", ".", "shape", "\n", "D", "=", "C", "*", "H", "*", "W", "\n", "S", "=", "self", ".", "cfg", ".", "data", ".", "S", "\n", "scfg", "=", "self", ".", "cfg", ".", "sampler", "\n", "num_steps", "=", "scfg", ".", "num_steps", "\n", "min_t", "=", "scfg", ".", "min_t", "\n", "eps_ratio", "=", "scfg", ".", "eps_ratio", "\n", "num_corrector_steps", "=", "scfg", ".", "num_corrector_steps", "\n", "corrector_step_size_multiplier", "=", "scfg", ".", "corrector_step_size_multiplier", "\n", "corrector_entry_time", "=", "scfg", ".", "corrector_entry_time", "\n", "device", "=", "model", ".", "device", "\n", "\n", "initial_dist", "=", "scfg", ".", "initial_dist", "\n", "if", "initial_dist", "==", "'gaussian'", ":", "\n", "            ", "initial_dist_std", "=", "model", ".", "Q_sigma", "\n", "", "else", ":", "\n", "            ", "initial_dist_std", "=", "None", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "x", "=", "get_initial_samples", "(", "N", ",", "D", ",", "device", ",", "S", ",", "initial_dist", ",", "\n", "initial_dist_std", ")", "\n", "\n", "h", "=", "1.0", "/", "num_steps", "# approximately ", "\n", "ts", "=", "np", ".", "linspace", "(", "1.0", ",", "min_t", "+", "h", ",", "num_steps", ")", "\n", "save_ts", "=", "ts", "[", "np", ".", "linspace", "(", "0", ",", "len", "(", "ts", ")", "-", "2", ",", "num_intermediates", ",", "dtype", "=", "int", ")", "]", "\n", "\n", "x_hist", "=", "[", "]", "\n", "x0_hist", "=", "[", "]", "\n", "\n", "for", "idx", ",", "t", "in", "tqdm", "(", "enumerate", "(", "ts", "[", "0", ":", "-", "1", "]", ")", ")", ":", "\n", "\n", "                ", "h", "=", "ts", "[", "idx", "]", "-", "ts", "[", "idx", "+", "1", "]", "\n", "\n", "def", "get_rates", "(", "in_x", ",", "in_t", ")", ":", "\n", "                    ", "qt0", "=", "model", ".", "transition", "(", "in_t", "*", "torch", ".", "ones", "(", "(", "N", ",", ")", ",", "device", "=", "device", ")", ")", "# (N, S, S)", "\n", "rate", "=", "model", ".", "rate", "(", "in_t", "*", "torch", ".", "ones", "(", "(", "N", ",", ")", ",", "device", "=", "device", ")", ")", "# (N, S, S)", "\n", "\n", "p0t", "=", "F", ".", "softmax", "(", "model", "(", "in_x", ",", "in_t", "*", "torch", ".", "ones", "(", "(", "N", ",", ")", ",", "device", "=", "device", ")", ")", ",", "dim", "=", "2", ")", "# (N, D, S)", "\n", "\n", "\n", "x_0max", "=", "torch", ".", "max", "(", "p0t", ",", "dim", "=", "2", ")", "[", "1", "]", "\n", "\n", "qt0_denom", "=", "qt0", "[", "\n", "torch", ".", "arange", "(", "N", ",", "device", "=", "device", ")", ".", "repeat_interleave", "(", "D", "*", "S", ")", ",", "\n", "torch", ".", "arange", "(", "S", ",", "device", "=", "device", ")", ".", "repeat", "(", "N", "*", "D", ")", ",", "\n", "in_x", ".", "long", "(", ")", ".", "flatten", "(", ")", ".", "repeat_interleave", "(", "S", ")", "\n", "]", ".", "view", "(", "N", ",", "D", ",", "S", ")", "+", "eps_ratio", "\n", "\n", "# First S is x0 second S is x tilde", "\n", "\n", "qt0_numer", "=", "qt0", "# (N, S, S)", "\n", "\n", "forward_rates", "=", "rate", "[", "\n", "torch", ".", "arange", "(", "N", ",", "device", "=", "device", ")", ".", "repeat_interleave", "(", "D", "*", "S", ")", ",", "\n", "torch", ".", "arange", "(", "S", ",", "device", "=", "device", ")", ".", "repeat", "(", "N", "*", "D", ")", ",", "\n", "in_x", ".", "long", "(", ")", ".", "flatten", "(", ")", ".", "repeat_interleave", "(", "S", ")", "\n", "]", ".", "view", "(", "N", ",", "D", ",", "S", ")", "\n", "\n", "reverse_rates", "=", "forward_rates", "*", "(", "(", "p0t", "/", "qt0_denom", ")", "@", "qt0_numer", ")", "# (N, D, S)", "\n", "\n", "reverse_rates", "[", "\n", "torch", ".", "arange", "(", "N", ",", "device", "=", "device", ")", ".", "repeat_interleave", "(", "D", ")", ",", "\n", "torch", ".", "arange", "(", "D", ",", "device", "=", "device", ")", ".", "repeat", "(", "N", ")", ",", "\n", "in_x", ".", "long", "(", ")", ".", "flatten", "(", ")", "\n", "]", "=", "0.0", "\n", "\n", "transpose_forward_rates", "=", "rate", "[", "\n", "torch", ".", "arange", "(", "N", ",", "device", "=", "device", ")", ".", "repeat_interleave", "(", "D", "*", "S", ")", ",", "\n", "in_x", ".", "long", "(", ")", ".", "flatten", "(", ")", ".", "repeat_interleave", "(", "S", ")", ",", "\n", "torch", ".", "arange", "(", "S", ",", "device", "=", "device", ")", ".", "repeat", "(", "N", "*", "D", ")", "\n", "]", ".", "view", "(", "N", ",", "D", ",", "S", ")", "\n", "\n", "return", "transpose_forward_rates", ",", "reverse_rates", ",", "x_0max", "\n", "\n", "", "def", "take_poisson_step", "(", "in_x", ",", "in_reverse_rates", ",", "in_h", ")", ":", "\n", "                    ", "diffs", "=", "torch", ".", "arange", "(", "S", ",", "device", "=", "device", ")", ".", "view", "(", "1", ",", "1", ",", "S", ")", "-", "in_x", ".", "view", "(", "N", ",", "D", ",", "1", ")", "\n", "poisson_dist", "=", "torch", ".", "distributions", ".", "poisson", ".", "Poisson", "(", "in_reverse_rates", "*", "in_h", ")", "\n", "jump_nums", "=", "poisson_dist", ".", "sample", "(", ")", "\n", "adj_diffs", "=", "jump_nums", "*", "diffs", "\n", "overall_jump", "=", "torch", ".", "sum", "(", "adj_diffs", ",", "dim", "=", "2", ")", "\n", "unclip_x_new", "=", "in_x", "+", "overall_jump", "\n", "x_new", "=", "torch", ".", "clamp", "(", "unclip_x_new", ",", "min", "=", "0", ",", "max", "=", "S", "-", "1", ")", "\n", "\n", "return", "x_new", "\n", "\n", "", "transpose_forward_rates", ",", "reverse_rates", ",", "x_0max", "=", "get_rates", "(", "x", ",", "t", ")", "\n", "\n", "if", "t", "in", "save_ts", ":", "\n", "                    ", "x_hist", ".", "append", "(", "x", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "x0_hist", ".", "append", "(", "x_0max", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "x", "=", "take_poisson_step", "(", "x", ",", "reverse_rates", ",", "h", ")", "\n", "\n", "if", "t", "<=", "corrector_entry_time", ":", "\n", "                    ", "for", "_", "in", "range", "(", "num_corrector_steps", ")", ":", "\n", "                        ", "transpose_forward_rates", ",", "reverse_rates", ",", "_", "=", "get_rates", "(", "x", ",", "t", "-", "h", ")", "\n", "corrector_rate", "=", "transpose_forward_rates", "+", "reverse_rates", "\n", "corrector_rate", "[", "\n", "torch", ".", "arange", "(", "N", ",", "device", "=", "device", ")", ".", "repeat_interleave", "(", "D", ")", ",", "\n", "torch", ".", "arange", "(", "D", ",", "device", "=", "device", ")", ".", "repeat", "(", "N", ")", ",", "\n", "x", ".", "long", "(", ")", ".", "flatten", "(", ")", "\n", "]", "=", "0.0", "\n", "x", "=", "take_poisson_step", "(", "x", ",", "corrector_rate", ",", "\n", "corrector_step_size_multiplier", "*", "h", ")", "\n", "\n", "", "", "", "x_hist", "=", "np", ".", "array", "(", "x_hist", ")", ".", "astype", "(", "int", ")", "\n", "x0_hist", "=", "np", ".", "array", "(", "x0_hist", ")", ".", "astype", "(", "int", ")", "\n", "\n", "p_0gt", "=", "F", ".", "softmax", "(", "model", "(", "x", ",", "min_t", "*", "torch", ".", "ones", "(", "(", "N", ",", ")", ",", "device", "=", "device", ")", ")", ",", "dim", "=", "2", ")", "# (N, D, S)", "\n", "x_0max", "=", "torch", ".", "max", "(", "p_0gt", ",", "dim", "=", "2", ")", "[", "1", "]", "\n", "return", "x_0max", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "int", ")", ",", "x_hist", ",", "x0_hist", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.sampling.sampling.ConditionalTauLeaping.__init__": [[244, 246], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "self", ".", "cfg", "=", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.sampling.sampling.ConditionalTauLeaping.sample": [[247, 352], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "sampling.get_initial_samples", "numpy.concatenate", "tqdm.tqdm.tqdm", "numpy.array().astype", "numpy.array().astype", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.softmax", "torch.softmax", "torch.softmax", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "enumerate", "model.transition", "model.rate", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.softmax", "torch.softmax", "torch.softmax", "rate[].view", "torch.distributions.poisson.Poisson", "torch.distributions.poisson.Poisson", "torch.distributions.poisson.Poisson", "torch.distributions.poisson.Poisson", "torch.distributions.poisson.Poisson", "torch.distributions.poisson.Poisson", "torch.distributions.poisson.Poisson", "torch.distributions.poisson.Poisson", "torch.distributions.poisson.Poisson", "torch.distributions.poisson.Poisson.sample", "torch.distributions.poisson.Poisson.sample", "torch.distributions.poisson.Poisson.sample", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "model", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.concat.detach().cpu().numpy().astype", "torch.concat.detach().cpu().numpy().astype", "torch.concat.detach().cpu().numpy().astype", "numpy.linspace", "numpy.array", "numpy.linspace", "model", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "numpy.array().astype.append", "numpy.array().astype.append", "qt0[].view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "get_initial_samples.view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "numpy.array", "numpy.array", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "get_initial_samples.clone().detach().cpu().numpy", "x_0max.clone().detach().cpu().numpy", "jump_num_sum_mask.view", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.concat.detach().cpu().numpy", "torch.concat.detach().cpu().numpy", "torch.concat.detach().cpu().numpy", "len", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "get_initial_samples.long().flatten", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "get_initial_samples.clone().detach().cpu", "x_0max.clone().detach().cpu", "torch.concat.detach().cpu", "torch.concat.detach().cpu", "torch.concat.detach().cpu", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "get_initial_samples.long().flatten().repeat_interleave", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "get_initial_samples.long", "get_initial_samples.clone().detach", "x_0max.clone().detach", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "get_initial_samples.long().flatten().repeat_interleave", "torch.concat.detach", "torch.concat.detach", "torch.concat.detach", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "get_initial_samples.long().flatten", "get_initial_samples.clone", "x_0max.clone", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "get_initial_samples.long().flatten", "get_initial_samples.long", "get_initial_samples.long"], "methods", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.sampling.sampling.get_initial_samples", "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.GaussianTargetRate.transition", "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.GaussianTargetRate.rate", "home.repos.pwc.inspect_result.andrew-cr_tauldr.sampling.sampling.ConditionalPCTauLeaping.sample", "home.repos.pwc.inspect_result.andrew-cr_tauldr.sampling.sampling.ConditionalPCTauLeaping.sample", "home.repos.pwc.inspect_result.andrew-cr_tauldr.sampling.sampling.ConditionalPCTauLeaping.sample"], ["", "def", "sample", "(", "self", ",", "model", ",", "N", ",", "num_intermediates", ",", "conditioner", ")", ":", "\n", "        ", "assert", "conditioner", ".", "shape", "[", "0", "]", "==", "N", "\n", "\n", "t", "=", "1.0", "\n", "condition_dim", "=", "self", ".", "cfg", ".", "sampler", ".", "condition_dim", "\n", "total_D", "=", "self", ".", "cfg", ".", "data", ".", "shape", "[", "0", "]", "\n", "sample_D", "=", "total_D", "-", "condition_dim", "\n", "S", "=", "self", ".", "cfg", ".", "data", ".", "S", "\n", "scfg", "=", "self", ".", "cfg", ".", "sampler", "\n", "num_steps", "=", "scfg", ".", "num_steps", "\n", "min_t", "=", "scfg", ".", "min_t", "\n", "eps_ratio", "=", "scfg", ".", "eps_ratio", "\n", "reject_multiple_jumps", "=", "scfg", ".", "reject_multiple_jumps", "\n", "initial_dist", "=", "scfg", ".", "initial_dist", "\n", "if", "initial_dist", "==", "'gaussian'", ":", "\n", "            ", "initial_dist_std", "=", "model", ".", "Q_sigma", "\n", "", "else", ":", "\n", "            ", "initial_dist_std", "=", "None", "\n", "", "device", "=", "model", ".", "device", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "x", "=", "get_initial_samples", "(", "N", ",", "sample_D", ",", "device", ",", "S", ",", "initial_dist", ",", "\n", "initial_dist_std", ")", "\n", "\n", "\n", "ts", "=", "np", ".", "concatenate", "(", "(", "np", ".", "linspace", "(", "1.0", ",", "min_t", ",", "num_steps", ")", ",", "np", ".", "array", "(", "[", "0", "]", ")", ")", ")", "\n", "save_ts", "=", "ts", "[", "np", ".", "linspace", "(", "0", ",", "len", "(", "ts", ")", "-", "2", ",", "num_intermediates", ",", "dtype", "=", "int", ")", "]", "\n", "\n", "x_hist", "=", "[", "]", "\n", "x0_hist", "=", "[", "]", "\n", "\n", "counter", "=", "0", "\n", "for", "idx", ",", "t", "in", "tqdm", "(", "enumerate", "(", "ts", "[", "0", ":", "-", "1", "]", ")", ")", ":", "\n", "                ", "h", "=", "ts", "[", "idx", "]", "-", "ts", "[", "idx", "+", "1", "]", "\n", "\n", "qt0", "=", "model", ".", "transition", "(", "t", "*", "torch", ".", "ones", "(", "(", "N", ",", ")", ",", "device", "=", "device", ")", ")", "# (N, S, S)", "\n", "rate", "=", "model", ".", "rate", "(", "t", "*", "torch", ".", "ones", "(", "(", "N", ",", ")", ",", "device", "=", "device", ")", ")", "# (N, S, S)", "\n", "\n", "model_input", "=", "torch", ".", "concat", "(", "(", "conditioner", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "p0t", "=", "F", ".", "softmax", "(", "model", "(", "model_input", ",", "t", "*", "torch", ".", "ones", "(", "(", "N", ",", ")", ",", "device", "=", "device", ")", ")", ",", "dim", "=", "2", ")", "# (N, D, S)", "\n", "p0t", "=", "p0t", "[", ":", ",", "condition_dim", ":", ",", ":", "]", "\n", "\n", "\n", "x_0max", "=", "torch", ".", "max", "(", "p0t", ",", "dim", "=", "2", ")", "[", "1", "]", "\n", "if", "t", "in", "save_ts", ":", "\n", "                    ", "x_hist", ".", "append", "(", "x", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "x0_hist", ".", "append", "(", "x_0max", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "\n", "\n", "", "qt0_denom", "=", "qt0", "[", "\n", "torch", ".", "arange", "(", "N", ",", "device", "=", "device", ")", ".", "repeat_interleave", "(", "sample_D", "*", "S", ")", ",", "\n", "torch", ".", "arange", "(", "S", ",", "device", "=", "device", ")", ".", "repeat", "(", "N", "*", "sample_D", ")", ",", "\n", "x", ".", "long", "(", ")", ".", "flatten", "(", ")", ".", "repeat_interleave", "(", "S", ")", "\n", "]", ".", "view", "(", "N", ",", "sample_D", ",", "S", ")", "+", "eps_ratio", "\n", "\n", "# First S is x0 second S is x tilde", "\n", "\n", "qt0_numer", "=", "qt0", "# (N, S, S)", "\n", "\n", "forward_rates", "=", "rate", "[", "\n", "torch", ".", "arange", "(", "N", ",", "device", "=", "device", ")", ".", "repeat_interleave", "(", "sample_D", "*", "S", ")", ",", "\n", "torch", ".", "arange", "(", "S", ",", "device", "=", "device", ")", ".", "repeat", "(", "N", "*", "sample_D", ")", ",", "\n", "x", ".", "long", "(", ")", ".", "flatten", "(", ")", ".", "repeat_interleave", "(", "S", ")", "\n", "]", ".", "view", "(", "N", ",", "sample_D", ",", "S", ")", "\n", "\n", "inner_sum", "=", "(", "p0t", "/", "qt0_denom", ")", "@", "qt0_numer", "# (N, D, S)", "\n", "\n", "reverse_rates", "=", "forward_rates", "*", "inner_sum", "# (N, D, S)", "\n", "\n", "reverse_rates", "[", "\n", "torch", ".", "arange", "(", "N", ",", "device", "=", "device", ")", ".", "repeat_interleave", "(", "sample_D", ")", ",", "\n", "torch", ".", "arange", "(", "sample_D", ",", "device", "=", "device", ")", ".", "repeat", "(", "N", ")", ",", "\n", "x", ".", "long", "(", ")", ".", "flatten", "(", ")", "\n", "]", "=", "0.0", "\n", "\n", "diffs", "=", "torch", ".", "arange", "(", "S", ",", "device", "=", "device", ")", ".", "view", "(", "1", ",", "1", ",", "S", ")", "-", "x", ".", "view", "(", "N", ",", "sample_D", ",", "1", ")", "\n", "poisson_dist", "=", "torch", ".", "distributions", ".", "poisson", ".", "Poisson", "(", "reverse_rates", "*", "h", ")", "\n", "jump_nums", "=", "poisson_dist", ".", "sample", "(", ")", "\n", "\n", "if", "reject_multiple_jumps", ":", "\n", "                    ", "jump_num_sum", "=", "torch", ".", "sum", "(", "jump_nums", ",", "dim", "=", "2", ")", "\n", "jump_num_sum_mask", "=", "jump_num_sum", "<=", "1", "\n", "masked_jump_nums", "=", "jump_nums", "*", "jump_num_sum_mask", ".", "view", "(", "N", ",", "sample_D", ",", "1", ")", "\n", "adj_diffs", "=", "masked_jump_nums", "*", "diffs", "\n", "", "else", ":", "\n", "                    ", "adj_diffs", "=", "jump_nums", "*", "diffs", "\n", "\n", "\n", "", "adj_diffs", "=", "jump_nums", "*", "diffs", "\n", "overall_jump", "=", "torch", ".", "sum", "(", "adj_diffs", ",", "dim", "=", "2", ")", "\n", "xp", "=", "x", "+", "overall_jump", "\n", "x_new", "=", "torch", ".", "clamp", "(", "xp", ",", "min", "=", "0", ",", "max", "=", "S", "-", "1", ")", "\n", "\n", "x", "=", "x_new", "\n", "\n", "", "x_hist", "=", "np", ".", "array", "(", "x_hist", ")", ".", "astype", "(", "int", ")", "\n", "x0_hist", "=", "np", ".", "array", "(", "x0_hist", ")", ".", "astype", "(", "int", ")", "\n", "\n", "model_input", "=", "torch", ".", "concat", "(", "(", "conditioner", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "p_0gt", "=", "F", ".", "softmax", "(", "model", "(", "model_input", ",", "min_t", "*", "torch", ".", "ones", "(", "(", "N", ",", ")", ",", "device", "=", "device", ")", ")", ",", "dim", "=", "2", ")", "# (N, D, S)", "\n", "p_0gt", "=", "p_0gt", "[", ":", ",", "condition_dim", ":", ",", ":", "]", "\n", "x_0max", "=", "torch", ".", "max", "(", "p_0gt", ",", "dim", "=", "2", ")", "[", "1", "]", "\n", "output", "=", "torch", ".", "concat", "(", "(", "conditioner", ",", "x_0max", ")", ",", "dim", "=", "1", ")", "\n", "return", "output", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "int", ")", ",", "x_hist", ",", "x0_hist", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.sampling.sampling.ConditionalPCTauLeaping.__init__": [[356, 358], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "self", ".", "cfg", "=", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.sampling.sampling.ConditionalPCTauLeaping.sample": [[359, 491], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "sampling.get_initial_samples", "numpy.linspace", "tqdm.tqdm.tqdm", "numpy.array().astype", "numpy.array().astype", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.softmax", "torch.softmax", "torch.softmax", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "enumerate", "sampling.ConditionalPCTauLeaping.sample.get_rates"], "methods", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.sampling.sampling.get_initial_samples"], ["", "def", "sample", "(", "self", ",", "model", ",", "N", ",", "num_intermediates", ",", "conditioner", ")", ":", "\n", "        ", "assert", "conditioner", ".", "shape", "[", "0", "]", "==", "N", "\n", "\n", "t", "=", "1.0", "\n", "condition_dim", "=", "self", ".", "cfg", ".", "sampler", ".", "condition_dim", "\n", "total_D", "=", "self", ".", "cfg", ".", "data", ".", "shape", "[", "0", "]", "\n", "sample_D", "=", "total_D", "-", "condition_dim", "\n", "S", "=", "self", ".", "cfg", ".", "data", ".", "S", "\n", "scfg", "=", "self", ".", "cfg", ".", "sampler", "\n", "num_steps", "=", "scfg", ".", "num_steps", "\n", "min_t", "=", "scfg", ".", "min_t", "\n", "reject_multiple_jumps", "=", "scfg", ".", "reject_multiple_jumps", "\n", "eps_ratio", "=", "scfg", ".", "eps_ratio", "\n", "\n", "num_corrector_steps", "=", "scfg", ".", "num_corrector_steps", "\n", "corrector_step_size_multiplier", "=", "scfg", ".", "corrector_step_size_multiplier", "\n", "corrector_entry_time", "=", "scfg", ".", "corrector_entry_time", "\n", "\n", "initial_dist", "=", "scfg", ".", "initial_dist", "\n", "if", "initial_dist", "==", "'gaussian'", ":", "\n", "            ", "initial_dist_std", "=", "model", ".", "Q_sigma", "\n", "", "else", ":", "\n", "            ", "initial_dist_std", "=", "None", "\n", "", "device", "=", "model", ".", "device", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "x", "=", "get_initial_samples", "(", "N", ",", "sample_D", ",", "device", ",", "S", ",", "initial_dist", ",", "\n", "initial_dist_std", ")", "\n", "\n", "\n", "h", "=", "1.0", "/", "num_steps", "# approximately ", "\n", "ts", "=", "np", ".", "linspace", "(", "1.0", ",", "min_t", "+", "h", ",", "num_steps", ")", "\n", "save_ts", "=", "ts", "[", "np", ".", "linspace", "(", "0", ",", "len", "(", "ts", ")", "-", "2", ",", "num_intermediates", ",", "dtype", "=", "int", ")", "]", "\n", "\n", "x_hist", "=", "[", "]", "\n", "x0_hist", "=", "[", "]", "\n", "\n", "for", "idx", ",", "t", "in", "tqdm", "(", "enumerate", "(", "ts", "[", "0", ":", "-", "1", "]", ")", ")", ":", "\n", "                ", "h", "=", "ts", "[", "idx", "]", "-", "ts", "[", "idx", "+", "1", "]", "\n", "\n", "def", "get_rates", "(", "in_x", ",", "in_t", ")", ":", "\n", "                    ", "qt0", "=", "model", ".", "transition", "(", "in_t", "*", "torch", ".", "ones", "(", "(", "N", ",", ")", ",", "device", "=", "device", ")", ")", "# (N, S, S)", "\n", "rate", "=", "model", ".", "rate", "(", "in_t", "*", "torch", ".", "ones", "(", "(", "N", ",", ")", ",", "device", "=", "device", ")", ")", "# (N, S, S)", "\n", "\n", "model_input", "=", "torch", ".", "concat", "(", "(", "conditioner", ",", "in_x", ")", ",", "dim", "=", "1", ")", "\n", "p0t", "=", "F", ".", "softmax", "(", "model", "(", "model_input", ",", "in_t", "*", "torch", ".", "ones", "(", "(", "N", ",", ")", ",", "device", "=", "device", ")", ")", ",", "dim", "=", "2", ")", "# (N, D, S)", "\n", "p0t", "=", "p0t", "[", ":", ",", "condition_dim", ":", ",", ":", "]", "\n", "\n", "\n", "x_0max", "=", "torch", ".", "max", "(", "p0t", ",", "dim", "=", "2", ")", "[", "1", "]", "\n", "\n", "\n", "qt0_denom", "=", "qt0", "[", "\n", "torch", ".", "arange", "(", "N", ",", "device", "=", "device", ")", ".", "repeat_interleave", "(", "sample_D", "*", "S", ")", ",", "\n", "torch", ".", "arange", "(", "S", ",", "device", "=", "device", ")", ".", "repeat", "(", "N", "*", "sample_D", ")", ",", "\n", "x", ".", "long", "(", ")", ".", "flatten", "(", ")", ".", "repeat_interleave", "(", "S", ")", "\n", "]", ".", "view", "(", "N", ",", "sample_D", ",", "S", ")", "+", "eps_ratio", "\n", "\n", "# First S is x0 second S is x tilde", "\n", "\n", "qt0_numer", "=", "qt0", "# (N, S, S)", "\n", "\n", "forward_rates", "=", "rate", "[", "\n", "torch", ".", "arange", "(", "N", ",", "device", "=", "device", ")", ".", "repeat_interleave", "(", "sample_D", "*", "S", ")", ",", "\n", "torch", ".", "arange", "(", "S", ",", "device", "=", "device", ")", ".", "repeat", "(", "N", "*", "sample_D", ")", ",", "\n", "in_x", ".", "long", "(", ")", ".", "flatten", "(", ")", ".", "repeat_interleave", "(", "S", ")", "\n", "]", ".", "view", "(", "N", ",", "sample_D", ",", "S", ")", "\n", "\n", "reverse_rates", "=", "forward_rates", "*", "(", "(", "p0t", "/", "qt0_denom", ")", "@", "qt0_numer", ")", "# (N, D, S)", "\n", "\n", "reverse_rates", "[", "\n", "torch", ".", "arange", "(", "N", ",", "device", "=", "device", ")", ".", "repeat_interleave", "(", "sample_D", ")", ",", "\n", "torch", ".", "arange", "(", "sample_D", ",", "device", "=", "device", ")", ".", "repeat", "(", "N", ")", ",", "\n", "in_x", ".", "long", "(", ")", ".", "flatten", "(", ")", "\n", "]", "=", "0.0", "\n", "\n", "transpose_forward_rates", "=", "rate", "[", "\n", "torch", ".", "arange", "(", "N", ",", "device", "=", "device", ")", ".", "repeat_interleave", "(", "sample_D", "*", "S", ")", ",", "\n", "in_x", ".", "long", "(", ")", ".", "flatten", "(", ")", ".", "repeat_interleave", "(", "S", ")", ",", "\n", "torch", ".", "arange", "(", "S", ",", "device", "=", "device", ")", ".", "repeat", "(", "N", "*", "sample_D", ")", "\n", "]", ".", "view", "(", "N", ",", "sample_D", ",", "S", ")", "\n", "\n", "return", "transpose_forward_rates", ",", "reverse_rates", ",", "x_0max", "\n", "\n", "", "def", "take_poisson_step", "(", "in_x", ",", "in_reverse_rates", ",", "in_h", ")", ":", "\n", "                    ", "diffs", "=", "torch", ".", "arange", "(", "S", ",", "device", "=", "device", ")", ".", "view", "(", "1", ",", "1", ",", "S", ")", "-", "in_x", ".", "view", "(", "N", ",", "sample_D", ",", "1", ")", "\n", "poisson_dist", "=", "torch", ".", "distributions", ".", "poisson", ".", "Poisson", "(", "in_reverse_rates", "*", "in_h", ")", "\n", "jump_nums", "=", "poisson_dist", ".", "sample", "(", ")", "\n", "\n", "if", "reject_multiple_jumps", ":", "\n", "                        ", "jump_num_sum", "=", "torch", ".", "sum", "(", "jump_nums", ",", "dim", "=", "2", ")", "\n", "jump_num_sum_mask", "=", "jump_num_sum", "<=", "1", "\n", "masked_jump_nums", "=", "jump_nums", "*", "jump_num_sum_mask", ".", "view", "(", "N", ",", "sample_D", ",", "1", ")", "\n", "adj_diffs", "=", "masked_jump_nums", "*", "diffs", "\n", "", "else", ":", "\n", "                        ", "adj_diffs", "=", "jump_nums", "*", "diffs", "\n", "\n", "", "overall_jump", "=", "torch", ".", "sum", "(", "adj_diffs", ",", "dim", "=", "2", ")", "\n", "xp", "=", "in_x", "+", "overall_jump", "\n", "x_new", "=", "torch", ".", "clamp", "(", "xp", ",", "min", "=", "0", ",", "max", "=", "S", "-", "1", ")", "\n", "return", "x_new", "\n", "\n", "", "transpose_forward_rates", ",", "reverse_rates", ",", "x_0max", "=", "get_rates", "(", "x", ",", "t", ")", "\n", "\n", "if", "t", "in", "save_ts", ":", "\n", "                    ", "x_hist", ".", "append", "(", "x", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "x0_hist", ".", "append", "(", "x_0max", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "x", "=", "take_poisson_step", "(", "x", ",", "reverse_rates", ",", "h", ")", "\n", "if", "t", "<=", "corrector_entry_time", ":", "\n", "                    ", "for", "_", "in", "range", "(", "num_corrector_steps", ")", ":", "\n", "                        ", "transpose_forward_rates", ",", "reverse_rates", ",", "_", "=", "get_rates", "(", "x", ",", "t", "-", "h", ")", "\n", "corrector_rate", "=", "transpose_forward_rates", "+", "reverse_rates", "\n", "corrector_rate", "[", "\n", "torch", ".", "arange", "(", "N", ",", "device", "=", "device", ")", ".", "repeat_interleave", "(", "sample_D", ")", ",", "\n", "torch", ".", "arange", "(", "sample_D", ",", "device", "=", "device", ")", ".", "repeat", "(", "N", ")", ",", "\n", "x", ".", "long", "(", ")", ".", "flatten", "(", ")", "\n", "]", "=", "0.0", "\n", "x", "=", "take_poisson_step", "(", "x", ",", "corrector_rate", ",", "\n", "corrector_step_size_multiplier", "*", "h", ")", "\n", "\n", "\n", "\n", "", "", "", "x_hist", "=", "np", ".", "array", "(", "x_hist", ")", ".", "astype", "(", "int", ")", "\n", "x0_hist", "=", "np", ".", "array", "(", "x0_hist", ")", ".", "astype", "(", "int", ")", "\n", "\n", "model_input", "=", "torch", ".", "concat", "(", "(", "conditioner", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "p_0gt", "=", "F", ".", "softmax", "(", "model", "(", "model_input", ",", "min_t", "*", "torch", ".", "ones", "(", "(", "N", ",", ")", ",", "device", "=", "device", ")", ")", ",", "dim", "=", "2", ")", "# (N, D, S)", "\n", "p_0gt", "=", "p_0gt", "[", ":", ",", "condition_dim", ":", ",", ":", "]", "\n", "x_0max", "=", "torch", ".", "max", "(", "p_0gt", ",", "dim", "=", "2", ")", "[", "1", "]", "\n", "output", "=", "torch", ".", "concat", "(", "(", "conditioner", ",", "x_0max", ")", ",", "dim", "=", "1", ")", "\n", "return", "output", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "int", ")", ",", "x_hist", ",", "x0_hist", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.sampling.sampling.get_initial_samples": [[11, 28], ["torch.randint", "torch.randint", "torch.randint", "numpy.exp", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical.sample().view", "x.to.to", "NotImplementedError", "numpy.sum", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.distributions.categorical.Categorical.sample", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.sampling.sampling.ConditionalPCTauLeaping.sample"], ["def", "get_initial_samples", "(", "N", ",", "D", ",", "device", ",", "S", ",", "initial_dist", ",", "initial_dist_std", "=", "None", ")", ":", "\n", "    ", "if", "initial_dist", "==", "'uniform'", ":", "\n", "        ", "x", "=", "torch", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "S", ",", "size", "=", "(", "N", ",", "D", ")", ",", "device", "=", "device", ")", "\n", "", "elif", "initial_dist", "==", "'gaussian'", ":", "\n", "        ", "target", "=", "np", ".", "exp", "(", "\n", "-", "(", "(", "np", ".", "arange", "(", "1", ",", "S", "+", "1", ")", "-", "S", "//", "2", ")", "**", "2", ")", "/", "(", "2", "*", "initial_dist_std", "**", "2", ")", "\n", ")", "\n", "target", "=", "target", "/", "np", ".", "sum", "(", "target", ")", "\n", "\n", "cat", "=", "torch", ".", "distributions", ".", "categorical", ".", "Categorical", "(", "\n", "torch", ".", "from_numpy", "(", "target", ")", "\n", ")", "\n", "x", "=", "cat", ".", "sample", "(", "(", "N", "*", "D", ",", ")", ")", ".", "view", "(", "N", ",", "D", ")", "\n", "x", "=", "x", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Unrecognized initial dist '", "+", "initial_dist", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.training.training.Standard.__init__": [[7, 12], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "self", ".", "do_ema", "=", "'ema_decay'", "in", "cfg", ".", "model", "\n", "self", ".", "clip_grad", "=", "cfg", ".", "training", ".", "clip_grad", "\n", "self", ".", "warmup", "=", "cfg", ".", "training", ".", "warmup", "\n", "self", ".", "lr", "=", "cfg", ".", "optimizer", ".", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.training.training.Standard.step": [[13, 40], ["state[].zero_grad", "loss.calc_loss", "loss.calc_loss.backward", "state[].step", "writer.add_scalar", "loss.calc_loss.detach", "loss.calc_loss.isnan().any", "loss.calc_loss.isinf().any", "print", "torch.nn.utils.clip_grad_norm_", "state[].update_ema", "loss.calc_loss.detach", "state[].parameters", "loss.calc_loss.isnan", "loss.calc_loss.isinf", "numpy.minimum"], "methods", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.losses.losses.ConditionalAux.calc_loss", "home.repos.pwc.inspect_result.andrew-cr_tauldr.training.training.Standard.step", "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.DummyWriter.add_scalar", "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.EMA.update_ema"], ["", "def", "step", "(", "self", ",", "state", ",", "minibatch", ",", "loss", ",", "writer", ")", ":", "\n", "        ", "state", "[", "'optimizer'", "]", ".", "zero_grad", "(", ")", "\n", "l", "=", "loss", ".", "calc_loss", "(", "minibatch", ",", "state", ",", "writer", ")", "\n", "\n", "if", "l", ".", "isnan", "(", ")", ".", "any", "(", ")", "or", "l", ".", "isinf", "(", ")", ".", "any", "(", ")", ":", "\n", "            ", "print", "(", "\"Loss is nan\"", ")", "\n", "assert", "False", "\n", "", "l", ".", "backward", "(", ")", "\n", "\n", "\n", "if", "self", ".", "clip_grad", ":", "\n", "            ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "state", "[", "'model'", "]", ".", "parameters", "(", ")", ",", "1.0", ")", "\n", "\n", "\n", "", "if", "self", ".", "warmup", ">", "0", ":", "\n", "            ", "for", "g", "in", "state", "[", "'optimizer'", "]", ".", "param_groups", ":", "\n", "                ", "g", "[", "'lr'", "]", "=", "self", ".", "lr", "*", "np", ".", "minimum", "(", "state", "[", "'n_iter'", "]", "/", "self", ".", "warmup", ",", "1.0", ")", "\n", "\n", "\n", "", "", "state", "[", "'optimizer'", "]", ".", "step", "(", ")", "\n", "\n", "if", "self", ".", "do_ema", ":", "\n", "            ", "state", "[", "'model'", "]", ".", "update_ema", "(", ")", "\n", "\n", "", "writer", ".", "add_scalar", "(", "'loss'", ",", "l", ".", "detach", "(", ")", ",", "state", "[", "'n_iter'", "]", ")", "\n", "\n", "return", "l", ".", "detach", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.training.training_utils.register_train_step": [[3, 9], ["ValueError"], "function", ["None"], ["def", "register_train_step", "(", "cls", ")", ":", "\n", "    ", "name", "=", "cls", ".", "__name__", "\n", "if", "name", "in", "_TRAINSTEPS", ":", "\n", "        ", "raise", "ValueError", "(", "f'{name} is already registered!'", ")", "\n", "", "_TRAINSTEPS", "[", "name", "]", "=", "cls", "\n", "return", "cls", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.training.training_utils.get_train_step": [[10, 12], ["None"], "function", ["None"], ["", "def", "get_train_step", "(", "cfg", ")", ":", "\n", "    ", "return", "_TRAINSTEPS", "[", "cfg", ".", "training", ".", "train_step_name", "]", "(", "cfg", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.optimizers.optimizers_utils.register_optimizer": [[3, 9], ["ValueError"], "function", ["None"], ["def", "register_optimizer", "(", "function", ")", ":", "\n", "    ", "name", "=", "function", ".", "__name__", "\n", "if", "name", "in", "_OPTIMIZERS", ":", "\n", "        ", "raise", "ValueError", "(", "f'{name} is already registered!'", ")", "\n", "", "_OPTIMIZERS", "[", "name", "]", "=", "function", "\n", "return", "function", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.optimizers.optimizers_utils.get_optimizer": [[11, 13], ["None"], "function", ["None"], ["", "def", "get_optimizer", "(", "model_parameters", ",", "cfg", ")", ":", "\n", "    ", "return", "_OPTIMIZERS", "[", "cfg", ".", "optimizer", ".", "name", "]", "(", "model_parameters", ",", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.optimizers.optimizers.Adam": [[5, 8], ["torch.optim.Adam"], "function", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.optimizers.optimizers.Adam"], ["@", "optimizers_utils", ".", "register_optimizer", "\n", "def", "Adam", "(", "params", ",", "cfg", ")", ":", "\n", "    ", "return", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "cfg", ".", "optimizer", ".", "lr", ")", "", "", ""]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.ImageX0PredBase.__init__": [[17, 48], ["torch.Module.__init__", "lib.UNet().to", "lib.UNet().to", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "lib.UNet", "lib.UNet"], "methods", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.losses.losses.ConditionalAux.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "device", ",", "rank", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "fix_logistic", "=", "cfg", ".", "model", ".", "fix_logistic", "\n", "ch", "=", "cfg", ".", "model", ".", "ch", "\n", "num_res_blocks", "=", "cfg", ".", "model", ".", "num_res_blocks", "\n", "num_scales", "=", "cfg", ".", "model", ".", "num_scales", "\n", "ch_mult", "=", "cfg", ".", "model", ".", "ch_mult", "\n", "input_channels", "=", "cfg", ".", "model", ".", "input_channels", "\n", "output_channels", "=", "cfg", ".", "model", ".", "input_channels", "*", "cfg", ".", "data", ".", "S", "\n", "scale_count_to_put_attn", "=", "cfg", ".", "model", ".", "scale_count_to_put_attn", "\n", "data_min_max", "=", "cfg", ".", "model", ".", "data_min_max", "\n", "dropout", "=", "cfg", ".", "model", ".", "dropout", "\n", "skip_rescale", "=", "cfg", ".", "model", ".", "skip_rescale", "\n", "do_time_embed", "=", "True", "\n", "time_scale_factor", "=", "cfg", ".", "model", ".", "time_scale_factor", "\n", "time_embed_dim", "=", "cfg", ".", "model", ".", "time_embed_dim", "\n", "\n", "tmp_net", "=", "networks", ".", "UNet", "(", "\n", "ch", ",", "num_res_blocks", ",", "num_scales", ",", "ch_mult", ",", "input_channels", ",", "\n", "output_channels", ",", "scale_count_to_put_attn", ",", "data_min_max", ",", "\n", "dropout", ",", "skip_rescale", ",", "do_time_embed", ",", "time_scale_factor", ",", "\n", "time_embed_dim", "\n", ")", ".", "to", "(", "device", ")", "\n", "if", "cfg", ".", "distributed", ":", "\n", "            ", "self", ".", "net", "=", "DDP", "(", "tmp_net", ",", "device_ids", "=", "[", "rank", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "net", "=", "tmp_net", "\n", "\n", "", "self", ".", "S", "=", "cfg", ".", "data", ".", "S", "\n", "self", ".", "data_shape", "=", "cfg", ".", "data", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.ImageX0PredBase.forward": [[49, 93], ["x.view.view.view", "models.ImageX0PredBase.net", "net_out[].unsqueeze", "net_out[].unsqueeze", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.logsigmoid", "torch.logsigmoid", "torch.logsigmoid", "torch.logsigmoid", "torch.logsigmoid", "torch.logsigmoid", "torch.logsigmoid", "torch.logsigmoid", "models.ImageX0PredBase._log_minus_exp", "models.ImageX0PredBase._log_minus_exp", "torch.min.view", "torch.min.view", "torch.min.view", "torch.min.view", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace"], "methods", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.ImageX0PredBase._log_minus_exp", "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.ImageX0PredBase._log_minus_exp"], ["", "def", "forward", "(", "self", ",", "\n", "x", ":", "TensorType", "[", "\"B\"", ",", "\"D\"", "]", ",", "\n", "times", ":", "TensorType", "[", "\"B\"", "]", "\n", ")", "->", "TensorType", "[", "\"B\"", ",", "\"D\"", ",", "\"S\"", "]", ":", "\n", "        ", "\"\"\"\n            Returns logits over state space for each pixel \n        \"\"\"", "\n", "B", ",", "D", "=", "x", ".", "shape", "\n", "C", ",", "H", ",", "W", "=", "self", ".", "data_shape", "\n", "S", "=", "self", ".", "S", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "C", ",", "H", ",", "W", ")", "\n", "\n", "\n", "net_out", "=", "self", ".", "net", "(", "x", ",", "times", ")", "# (B, 2*C, H, W)", "\n", "\n", "# Truncated logistic output from https://arxiv.org/pdf/2107.03006.pdf", "\n", "\n", "\n", "mu", "=", "net_out", "[", ":", ",", "0", ":", "C", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "-", "1", ")", "\n", "log_scale", "=", "net_out", "[", ":", ",", "C", ":", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "inv_scale", "=", "torch", ".", "exp", "(", "-", "(", "log_scale", "-", "2", ")", ")", "\n", "\n", "bin_width", "=", "2.", "/", "self", ".", "S", "\n", "bin_centers", "=", "torch", ".", "linspace", "(", "start", "=", "-", "1.", "+", "bin_width", "/", "2", ",", "\n", "end", "=", "1.", "-", "bin_width", "/", "2", ",", "\n", "steps", "=", "self", ".", "S", ",", "\n", "device", "=", "self", ".", "device", ")", ".", "view", "(", "1", ",", "1", ",", "1", ",", "1", ",", "self", ".", "S", ")", "\n", "\n", "sig_in_left", "=", "(", "bin_centers", "-", "bin_width", "/", "2", "-", "mu", ")", "*", "inv_scale", "\n", "bin_left_logcdf", "=", "F", ".", "logsigmoid", "(", "sig_in_left", ")", "\n", "sig_in_right", "=", "(", "bin_centers", "+", "bin_width", "/", "2", "-", "mu", ")", "*", "inv_scale", "\n", "bin_right_logcdf", "=", "F", ".", "logsigmoid", "(", "sig_in_right", ")", "\n", "\n", "logits_1", "=", "self", ".", "_log_minus_exp", "(", "bin_right_logcdf", ",", "bin_left_logcdf", ")", "\n", "logits_2", "=", "self", ".", "_log_minus_exp", "(", "-", "sig_in_left", "+", "bin_left_logcdf", ",", "-", "sig_in_right", "+", "bin_right_logcdf", ")", "\n", "if", "self", ".", "fix_logistic", ":", "\n", "            ", "logits", "=", "torch", ".", "min", "(", "logits_1", ",", "logits_2", ")", "\n", "", "else", ":", "\n", "            ", "logits", "=", "logits_1", "\n", "\n", "", "logits", "=", "logits", ".", "view", "(", "B", ",", "D", ",", "S", ")", "\n", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.ImageX0PredBase._log_minus_exp": [[94, 100], ["torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["", "def", "_log_minus_exp", "(", "self", ",", "a", ",", "b", ",", "eps", "=", "1e-6", ")", ":", "\n", "        ", "\"\"\" \n            Compute log (exp(a) - exp(b)) for (b<a)\n            From https://arxiv.org/pdf/2107.03006.pdf\n        \"\"\"", "\n", "return", "a", "+", "torch", ".", "log1p", "(", "-", "torch", ".", "exp", "(", "b", "-", "a", ")", "+", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.BirthDeathForwardBase.__init__": [[102, 115], ["numpy.diag", "numpy.diag", "numpy.diag", "numpy.linalg.eigh", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "numpy.ones", "numpy.ones", "numpy.sum", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "device", ")", ":", "\n", "        ", "self", ".", "S", "=", "S", "=", "cfg", ".", "data", ".", "S", "\n", "self", ".", "sigma_min", ",", "self", ".", "sigma_max", "=", "cfg", ".", "model", ".", "sigma_min", ",", "cfg", ".", "model", ".", "sigma_max", "\n", "self", ".", "device", "=", "device", "\n", "\n", "base_rate", "=", "np", ".", "diag", "(", "np", ".", "ones", "(", "(", "S", "-", "1", ",", ")", ")", ",", "1", ")", "\n", "base_rate", "+=", "np", ".", "diag", "(", "np", ".", "ones", "(", "(", "S", "-", "1", ",", ")", ")", ",", "-", "1", ")", "\n", "base_rate", "-=", "np", ".", "diag", "(", "np", ".", "sum", "(", "base_rate", ",", "axis", "=", "1", ")", ")", "\n", "eigvals", ",", "eigvecs", "=", "np", ".", "linalg", ".", "eigh", "(", "base_rate", ")", "\n", "\n", "self", ".", "base_rate", "=", "torch", ".", "from_numpy", "(", "base_rate", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "base_eigvals", "=", "torch", ".", "from_numpy", "(", "eigvals", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "base_eigvecs", "=", "torch", ".", "from_numpy", "(", "eigvecs", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.BirthDeathForwardBase._rate_scalar": [[116, 120], ["math.log"], "methods", ["None"], ["", "def", "_rate_scalar", "(", "self", ",", "t", ":", "TensorType", "[", "\"B\"", "]", "\n", ")", "->", "TensorType", "[", "\"B\"", "]", ":", "\n", "        ", "return", "self", ".", "sigma_min", "**", "2", "*", "(", "self", ".", "sigma_max", "/", "self", ".", "sigma_min", ")", "**", "(", "2", "*", "t", ")", "*", "math", ".", "log", "(", "self", ".", "sigma_max", "/", "self", ".", "sigma_min", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.BirthDeathForwardBase._integral_rate_scalar": [[121, 125], ["None"], "methods", ["None"], ["", "def", "_integral_rate_scalar", "(", "self", ",", "t", ":", "TensorType", "[", "\"B\"", "]", "\n", ")", "->", "TensorType", "[", "\"B\"", "]", ":", "\n", "        ", "return", "0.5", "*", "self", ".", "sigma_min", "**", "2", "*", "(", "self", ".", "sigma_max", "/", "self", ".", "sigma_min", ")", "**", "(", "2", "*", "t", ")", "-", "0.5", "*", "self", ".", "sigma_min", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.BirthDeathForwardBase.rate": [[126, 133], ["models.BirthDeathForwardBase._rate_scalar", "models.BirthDeathForwardBase.base_rate.view", "models.BirthDeathForwardBase.view"], "methods", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.GaussianTargetRate._rate_scalar"], ["", "def", "rate", "(", "self", ",", "t", ":", "TensorType", "[", "\"B\"", "]", "\n", ")", "->", "TensorType", "[", "\"B\"", ",", "\"S\"", ",", "\"S\"", "]", ":", "\n", "        ", "B", "=", "t", ".", "shape", "[", "0", "]", "\n", "S", "=", "self", ".", "S", "\n", "rate_scalars", "=", "self", ".", "_rate_scalar", "(", "t", ")", "\n", "\n", "return", "self", ".", "base_rate", ".", "view", "(", "1", ",", "S", ",", "S", ")", "*", "rate_scalars", ".", "view", "(", "B", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.BirthDeathForwardBase.transition": [[134, 156], ["models.BirthDeathForwardBase._integral_rate_scalar", "models.BirthDeathForwardBase.view", "models.BirthDeathForwardBase.base_eigvals.view", "models.BirthDeathForwardBase.base_eigvecs.T.view", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "print", "models.BirthDeathForwardBase.base_eigvecs.view", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min"], "methods", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.GaussianTargetRate._integral_rate_scalar"], ["", "def", "transition", "(", "self", ",", "t", ":", "TensorType", "[", "\"B\"", "]", "\n", ")", "->", "TensorType", "[", "\"B\"", ",", "\"S\"", ",", "\"S\"", "]", ":", "\n", "        ", "B", "=", "t", ".", "shape", "[", "0", "]", "\n", "S", "=", "self", ".", "S", "\n", "\n", "integral_rate_scalars", "=", "self", ".", "_integral_rate_scalar", "(", "t", ")", "\n", "\n", "adj_eigvals", "=", "integral_rate_scalars", ".", "view", "(", "B", ",", "1", ")", "*", "self", ".", "base_eigvals", ".", "view", "(", "1", ",", "S", ")", "\n", "\n", "transitions", "=", "self", ".", "base_eigvecs", ".", "view", "(", "1", ",", "S", ",", "S", ")", "@", "torch", ".", "diag_embed", "(", "torch", ".", "exp", "(", "adj_eigvals", ")", ")", "@", "self", ".", "base_eigvecs", ".", "T", ".", "view", "(", "1", ",", "S", ",", "S", ")", "\n", "\n", "# Some entries that are supposed to be very close to zero might be negative", "\n", "if", "torch", ".", "min", "(", "transitions", ")", "<", "-", "1e-6", ":", "\n", "            ", "print", "(", "f\"[Warning] BirthDeathForwardBase, large negative transition values {torch.min(transitions)}\"", ")", "\n", "\n", "# Clamping at 1e-8 because at float level accuracy anything lower than that", "\n", "# is probably inaccurate and should be zero anyway", "\n", "", "transitions", "[", "transitions", "<", "1e-8", "]", "=", "0.0", "\n", "\n", "return", "transitions", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.UniformRate.__init__": [[158, 171], ["numpy.linalg.eigh", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "numpy.ones", "numpy.diag", "numpy.diag", "numpy.diag", "numpy.sum", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "device", ")", ":", "\n", "        ", "self", ".", "S", "=", "S", "=", "cfg", ".", "data", ".", "S", "\n", "self", ".", "rate_const", "=", "cfg", ".", "model", ".", "rate_const", "\n", "self", ".", "device", "=", "device", "\n", "\n", "rate", "=", "self", ".", "rate_const", "*", "np", ".", "ones", "(", "(", "S", ",", "S", ")", ")", "\n", "rate", "=", "rate", "-", "np", ".", "diag", "(", "np", ".", "diag", "(", "rate", ")", ")", "\n", "rate", "=", "rate", "-", "np", ".", "diag", "(", "np", ".", "sum", "(", "rate", ",", "axis", "=", "1", ")", ")", "\n", "eigvals", ",", "eigvecs", "=", "np", ".", "linalg", ".", "eigh", "(", "rate", ")", "\n", "\n", "self", ".", "rate_matrix", "=", "torch", ".", "from_numpy", "(", "rate", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "eigvals", "=", "torch", ".", "from_numpy", "(", "eigvals", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "eigvecs", "=", "torch", ".", "from_numpy", "(", "eigvecs", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.UniformRate.rate": [[172, 178], ["torch.tile", "torch.tile", "torch.tile", "torch.tile", "torch.tile", "torch.tile", "torch.tile", "torch.tile", "torch.tile", "torch.tile", "torch.tile", "torch.tile", "torch.tile", "torch.tile", "torch.tile", "torch.tile", "models.UniformRate.rate_matrix.view"], "methods", ["None"], ["", "def", "rate", "(", "self", ",", "t", ":", "TensorType", "[", "\"B\"", "]", "\n", ")", "->", "TensorType", "[", "\"B\"", ",", "\"S\"", ",", "\"S\"", "]", ":", "\n", "        ", "B", "=", "t", ".", "shape", "[", "0", "]", "\n", "S", "=", "self", ".", "S", "\n", "\n", "return", "torch", ".", "tile", "(", "self", ".", "rate_matrix", ".", "view", "(", "1", ",", "S", ",", "S", ")", ",", "(", "B", ",", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.UniformRate.transition": [[179, 193], ["models.UniformRate.eigvecs.T.view", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "print", "models.UniformRate.eigvecs.view", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "models.UniformRate.eigvals.view", "t.view"], "methods", ["None"], ["", "def", "transition", "(", "self", ",", "t", ":", "TensorType", "[", "\"B\"", "]", "\n", ")", "->", "TensorType", "[", "\"B\"", ",", "\"S\"", ",", "\"S\"", "]", ":", "\n", "        ", "B", "=", "t", ".", "shape", "[", "0", "]", "\n", "S", "=", "self", ".", "S", "\n", "transitions", "=", "self", ".", "eigvecs", ".", "view", "(", "1", ",", "S", ",", "S", ")", "@", "torch", ".", "diag_embed", "(", "torch", ".", "exp", "(", "self", ".", "eigvals", ".", "view", "(", "1", ",", "S", ")", "*", "t", ".", "view", "(", "B", ",", "1", ")", ")", ")", "@", "self", ".", "eigvecs", ".", "T", ".", "view", "(", "1", ",", "S", ",", "S", ")", "\n", "\n", "if", "torch", ".", "min", "(", "transitions", ")", "<", "-", "1e-6", ":", "\n", "            ", "print", "(", "f\"[Warning] UniformRate, large negative transition values {torch.min(transitions)}\"", ")", "\n", "\n", "", "transitions", "[", "transitions", "<", "1e-8", "]", "=", "0.0", "\n", "\n", "return", "transitions", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.GaussianTargetRate.__init__": [[195, 229], ["numpy.zeros", "numpy.exp", "range", "range", "numpy.linalg.eig", "numpy.linalg.inv", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "range", "range", "numpy.diag", "numpy.diag", "numpy.diag", "numpy.sum", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "numpy.arange", "numpy.exp", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "device", ")", ":", "\n", "        ", "self", ".", "S", "=", "S", "=", "cfg", ".", "data", ".", "S", "\n", "self", ".", "rate_sigma", "=", "cfg", ".", "model", ".", "rate_sigma", "\n", "self", ".", "Q_sigma", "=", "cfg", ".", "model", ".", "Q_sigma", "\n", "self", ".", "time_exponential", "=", "cfg", ".", "model", ".", "time_exponential", "\n", "self", ".", "time_base", "=", "cfg", ".", "model", ".", "time_base", "\n", "self", ".", "device", "=", "device", "\n", "\n", "rate", "=", "np", ".", "zeros", "(", "(", "S", ",", "S", ")", ")", "\n", "\n", "vals", "=", "np", ".", "exp", "(", "-", "np", ".", "arange", "(", "0", ",", "S", ")", "**", "2", "/", "(", "self", ".", "rate_sigma", "**", "2", ")", ")", "\n", "for", "i", "in", "range", "(", "S", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "S", ")", ":", "\n", "                ", "if", "i", "<", "S", "//", "2", ":", "\n", "                    ", "if", "j", ">", "i", "and", "j", "<", "S", "-", "i", ":", "\n", "                        ", "rate", "[", "i", ",", "j", "]", "=", "vals", "[", "j", "-", "i", "-", "1", "]", "\n", "", "", "elif", "i", ">", "S", "//", "2", ":", "\n", "                    ", "if", "j", "<", "i", "and", "j", ">", "-", "i", "+", "S", "-", "1", ":", "\n", "                        ", "rate", "[", "i", ",", "j", "]", "=", "vals", "[", "i", "-", "j", "-", "1", "]", "\n", "", "", "", "", "for", "i", "in", "range", "(", "S", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "S", ")", ":", "\n", "                ", "if", "rate", "[", "j", ",", "i", "]", ">", "0.0", ":", "\n", "                    ", "rate", "[", "i", ",", "j", "]", "=", "rate", "[", "j", ",", "i", "]", "*", "np", ".", "exp", "(", "-", "(", "(", "j", "+", "1", ")", "**", "2", "-", "(", "i", "+", "1", ")", "**", "2", "+", "S", "*", "(", "i", "+", "1", ")", "-", "S", "*", "(", "j", "+", "1", ")", ")", "/", "(", "2", "*", "self", ".", "Q_sigma", "**", "2", ")", ")", "\n", "\n", "", "", "", "rate", "=", "rate", "-", "np", ".", "diag", "(", "np", ".", "diag", "(", "rate", ")", ")", "\n", "rate", "=", "rate", "-", "np", ".", "diag", "(", "np", ".", "sum", "(", "rate", ",", "axis", "=", "1", ")", ")", "\n", "\n", "eigvals", ",", "eigvecs", "=", "np", ".", "linalg", ".", "eig", "(", "rate", ")", "\n", "inv_eigvecs", "=", "np", ".", "linalg", ".", "inv", "(", "eigvecs", ")", "\n", "\n", "self", ".", "base_rate", "=", "torch", ".", "from_numpy", "(", "rate", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "eigvals", "=", "torch", ".", "from_numpy", "(", "eigvals", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "eigvecs", "=", "torch", ".", "from_numpy", "(", "eigvecs", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "inv_eigvecs", "=", "torch", ".", "from_numpy", "(", "inv_eigvecs", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.GaussianTargetRate._integral_rate_scalar": [[230, 234], ["None"], "methods", ["None"], ["", "def", "_integral_rate_scalar", "(", "self", ",", "t", ":", "TensorType", "[", "\"B\"", "]", "\n", ")", "->", "TensorType", "[", "\"B\"", "]", ":", "\n", "        ", "return", "self", ".", "time_base", "*", "(", "self", ".", "time_exponential", "**", "t", ")", "-", "self", ".", "time_base", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.GaussianTargetRate._rate_scalar": [[235, 239], ["math.log"], "methods", ["None"], ["", "def", "_rate_scalar", "(", "self", ",", "t", ":", "TensorType", "[", "\"B\"", "]", "\n", ")", "->", "TensorType", "[", "\"B\"", "]", ":", "\n", "        ", "return", "self", ".", "time_base", "*", "math", ".", "log", "(", "self", ".", "time_exponential", ")", "*", "(", "self", ".", "time_exponential", "**", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.GaussianTargetRate.rate": [[240, 247], ["models.GaussianTargetRate._rate_scalar", "models.GaussianTargetRate.base_rate.view", "models.GaussianTargetRate.view"], "methods", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.GaussianTargetRate._rate_scalar"], ["", "def", "rate", "(", "self", ",", "t", ":", "TensorType", "[", "\"B\"", "]", "\n", ")", "->", "TensorType", "[", "\"B\"", ",", "\"S\"", ",", "\"S\"", "]", ":", "\n", "        ", "B", "=", "t", ".", "shape", "[", "0", "]", "\n", "S", "=", "self", ".", "S", "\n", "rate_scalars", "=", "self", ".", "_rate_scalar", "(", "t", ")", "\n", "\n", "return", "self", ".", "base_rate", ".", "view", "(", "1", ",", "S", ",", "S", ")", "*", "rate_scalars", ".", "view", "(", "B", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.GaussianTargetRate.transition": [[248, 270], ["models.GaussianTargetRate._integral_rate_scalar", "models.GaussianTargetRate.view", "models.GaussianTargetRate.eigvals.view", "models.GaussianTargetRate.inv_eigvecs.view", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "print", "models.GaussianTargetRate.eigvecs.view", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min"], "methods", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.GaussianTargetRate._integral_rate_scalar"], ["", "def", "transition", "(", "self", ",", "t", ":", "TensorType", "[", "\"B\"", "]", "\n", ")", "->", "TensorType", "[", "\"B\"", ",", "\"S\"", ",", "\"S\"", "]", ":", "\n", "        ", "B", "=", "t", ".", "shape", "[", "0", "]", "\n", "S", "=", "self", ".", "S", "\n", "\n", "integral_rate_scalars", "=", "self", ".", "_integral_rate_scalar", "(", "t", ")", "\n", "\n", "adj_eigvals", "=", "integral_rate_scalars", ".", "view", "(", "B", ",", "1", ")", "*", "self", ".", "eigvals", ".", "view", "(", "1", ",", "S", ")", "\n", "\n", "transitions", "=", "self", ".", "eigvecs", ".", "view", "(", "1", ",", "S", ",", "S", ")", "@", "torch", ".", "diag_embed", "(", "torch", ".", "exp", "(", "adj_eigvals", ")", ")", "@", "self", ".", "inv_eigvecs", ".", "view", "(", "1", ",", "S", ",", "S", ")", "\n", "\n", "# Some entries that are supposed to be very close to zero might be negative", "\n", "if", "torch", ".", "min", "(", "transitions", ")", "<", "-", "1e-6", ":", "\n", "            ", "print", "(", "f\"[Warning] GaussianTargetRate, large negative transition values {torch.min(transitions)}\"", ")", "\n", "\n", "# Clamping at 1e-8 because at float level accuracy anything lower than that", "\n", "# is probably inaccurate and should be zero anyway", "\n", "", "transitions", "[", "transitions", "<", "1e-8", "]", "=", "0.0", "\n", "\n", "return", "transitions", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.SequenceTransformer.__init__": [[273, 301], ["torch.Module.__init__", "lib.TransformerEncoder().to", "lib.TransformerEncoder().to", "len", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "lib.TransformerEncoder", "lib.TransformerEncoder"], "methods", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.losses.losses.ConditionalAux.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "device", ",", "rank", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "num_layers", "=", "cfg", ".", "model", ".", "num_layers", "\n", "d_model", "=", "cfg", ".", "model", ".", "d_model", "\n", "num_heads", "=", "cfg", ".", "model", ".", "num_heads", "\n", "dim_feedforward", "=", "cfg", ".", "model", ".", "dim_feedforward", "\n", "dropout", "=", "cfg", ".", "model", ".", "dropout", "\n", "num_output_FFresiduals", "=", "cfg", ".", "model", ".", "num_output_FFresiduals", "\n", "time_scale_factor", "=", "cfg", ".", "model", ".", "time_scale_factor", "\n", "temb_dim", "=", "cfg", ".", "model", ".", "temb_dim", "\n", "use_one_hot_input", "=", "cfg", ".", "model", ".", "use_one_hot_input", "\n", "self", ".", "S", "=", "cfg", ".", "data", ".", "S", "\n", "\n", "assert", "len", "(", "cfg", ".", "data", ".", "shape", ")", "==", "1", "\n", "max_len", "=", "cfg", ".", "data", ".", "shape", "[", "0", "]", "\n", "\n", "tmp_net", "=", "networks", ".", "TransformerEncoder", "(", "\n", "num_layers", ",", "d_model", ",", "num_heads", ",", "dim_feedforward", ",", "dropout", ",", "\n", "num_output_FFresiduals", ",", "time_scale_factor", ",", "self", ".", "S", ",", "max_len", ",", "\n", "temb_dim", ",", "use_one_hot_input", ",", "device", "\n", ")", ".", "to", "(", "device", ")", "\n", "if", "cfg", ".", "distributed", ":", "\n", "            ", "self", ".", "net", "=", "DDP", "(", "tmp_net", ",", "device_ids", "=", "[", "rank", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "net", "=", "tmp_net", "\n", "\n", "", "self", ".", "data_shape", "=", "cfg", ".", "data", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.SequenceTransformer.forward": [[302, 315], ["models.SequenceTransformer.net", "x.long", "times.long"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "\n", "x", ":", "TensorType", "[", "\"B\"", ",", "\"D\"", "]", ",", "\n", "times", ":", "TensorType", "[", "\"B\"", "]", "\n", ")", "->", "TensorType", "[", "\"B\"", ",", "\"D\"", ",", "\"S\"", "]", ":", "\n", "        ", "\"\"\"\n            Returns logits over state space\n        \"\"\"", "\n", "B", ",", "D", "=", "x", ".", "shape", "\n", "S", "=", "self", ".", "S", "\n", "\n", "logits", "=", "self", ".", "net", "(", "x", ".", "long", "(", ")", ",", "times", ".", "long", "(", ")", ")", "# (B, D, S)", "\n", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.ResidualMLP.__init__": [[318, 342], ["torch.Module.__init__", "lib.ResidualMLP().to", "lib.ResidualMLP().to", "len", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "lib.ResidualMLP", "lib.ResidualMLP"], "methods", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.losses.losses.ConditionalAux.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "device", ",", "rank", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "S", "=", "cfg", ".", "data", ".", "S", "\n", "num_layers", "=", "cfg", ".", "model", ".", "num_layers", "\n", "d_model", "=", "cfg", ".", "model", ".", "d_model", "\n", "hidden_dim", "=", "cfg", ".", "model", ".", "hidden_dim", "\n", "time_scale_factor", "=", "cfg", ".", "model", ".", "time_scale_factor", "\n", "temb_dim", "=", "cfg", ".", "model", ".", "temb_dim", "\n", "\n", "assert", "len", "(", "cfg", ".", "data", ".", "shape", ")", "==", "1", "\n", "D", "=", "cfg", ".", "data", ".", "shape", "[", "0", "]", "\n", "\n", "tmp_net", "=", "networks", ".", "ResidualMLP", "(", "\n", "num_layers", ",", "d_model", ",", "hidden_dim", ",", "D", ",", "self", ".", "S", ",", "\n", "time_scale_factor", ",", "temb_dim", "\n", ")", ".", "to", "(", "device", ")", "\n", "\n", "if", "cfg", ".", "distributed", ":", "\n", "            ", "self", ".", "net", "=", "DDP", "(", "tmp_net", ",", "device_ids", "=", "[", "rank", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "net", "=", "tmp_net", "\n", "\n", "", "self", ".", "data_shape", "=", "cfg", ".", "data", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.ResidualMLP.forward": [[343, 354], ["models.ResidualMLP.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "\n", "x", ":", "TensorType", "[", "\"B\"", ",", "\"D\"", "]", ",", "\n", "times", ":", "TensorType", "[", "\"B\"", "]", "\n", ")", "->", "TensorType", "[", "\"B\"", ",", "\"D\"", ",", "\"S\"", "]", ":", "\n", "        ", "\"\"\"\n            Returns logits over state space\n        \"\"\"", "\n", "\n", "logits", "=", "self", ".", "net", "(", "x", ",", "times", ")", "# (B, D, S)", "\n", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.EMA.__init__": [[357, 364], ["ValueError"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "self", ".", "decay", "=", "cfg", ".", "model", ".", "ema_decay", "\n", "if", "self", ".", "decay", "<", "0.0", "or", "self", ".", "decay", ">", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "'Decay must be between 0 and 1'", ")", "\n", "", "self", ".", "shadow_params", "=", "[", "]", "\n", "self", ".", "collected_params", "=", "[", "]", "\n", "self", ".", "num_updates", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.EMA.init_ema": [[365, 368], ["p.clone().detach", "models.EMA.parameters", "p.clone"], "methods", ["None"], ["", "def", "init_ema", "(", "self", ")", ":", "\n", "        ", "self", ".", "shadow_params", "=", "[", "p", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "for", "p", "in", "self", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.EMA.update_ema": [[369, 382], ["min", "len", "ValueError", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "zip", "s_param.sub_", "models.EMA.parameters"], "methods", ["None"], ["", "def", "update_ema", "(", "self", ")", ":", "\n", "\n", "        ", "if", "len", "(", "self", ".", "shadow_params", ")", "==", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Shadow params not initialized before first ema update!\"", ")", "\n", "\n", "", "decay", "=", "self", ".", "decay", "\n", "self", ".", "num_updates", "+=", "1", "\n", "decay", "=", "min", "(", "decay", ",", "(", "1", "+", "self", ".", "num_updates", ")", "/", "(", "10", "+", "self", ".", "num_updates", ")", ")", "\n", "one_minus_decay", "=", "1.0", "-", "decay", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "parameters", "=", "[", "p", "for", "p", "in", "self", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", "]", "\n", "for", "s_param", ",", "param", "in", "zip", "(", "self", ".", "shadow_params", ",", "parameters", ")", ":", "\n", "                ", "s_param", ".", "sub_", "(", "one_minus_decay", "*", "(", "s_param", "-", "param", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.EMA.state_dict": [[383, 390], ["torch.Module.state_dict", "torch.Module.state_dict", "torch.Module.state_dict", "torch.Module.state_dict"], "methods", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.EMA.state_dict", "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.EMA.state_dict", "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.EMA.state_dict", "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.EMA.state_dict"], ["", "", "", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "sd", "=", "nn", ".", "Module", ".", "state_dict", "(", "self", ")", "\n", "sd", "[", "'ema_decay'", "]", "=", "self", ".", "decay", "\n", "sd", "[", "'ema_num_updates'", "]", "=", "self", ".", "num_updates", "\n", "sd", "[", "'ema_shadow_params'", "]", "=", "self", ".", "shadow_params", "\n", "\n", "return", "sd", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.EMA.move_shadow_params_to_model_params": [[391, 396], ["zip", "models.EMA.parameters", "param.data.copy_"], "methods", ["None"], ["", "def", "move_shadow_params_to_model_params", "(", "self", ")", ":", "\n", "        ", "parameters", "=", "[", "p", "for", "p", "in", "self", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", "]", "\n", "for", "s_param", ",", "param", "in", "zip", "(", "self", ".", "shadow_params", ",", "parameters", ")", ":", "\n", "            ", "if", "param", ".", "requires_grad", ":", "\n", "                ", "param", ".", "data", ".", "copy_", "(", "s_param", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.EMA.move_model_params_to_collected_params": [[397, 399], ["param.clone", "models.EMA.parameters"], "methods", ["None"], ["", "", "", "def", "move_model_params_to_collected_params", "(", "self", ")", ":", "\n", "        ", "self", ".", "collected_params", "=", "[", "param", ".", "clone", "(", ")", "for", "param", "in", "self", ".", "parameters", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.EMA.move_collected_params_to_model_params": [[400, 403], ["zip", "models.EMA.parameters", "param.data.copy_"], "methods", ["None"], ["", "def", "move_collected_params_to_model_params", "(", "self", ")", ":", "\n", "        ", "for", "c_param", ",", "param", "in", "zip", "(", "self", ".", "collected_params", ",", "self", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param", ".", "data", ".", "copy_", "(", "c_param", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.EMA.load_state_dict": [[404, 424], ["torch.Module.load_state_dict", "torch.Module.load_state_dict", "torch.Module.load_state_dict", "torch.Module.load_state_dict", "len", "print", "print", "len"], "methods", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.EMA.load_state_dict", "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.EMA.load_state_dict", "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.EMA.load_state_dict", "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.EMA.load_state_dict"], ["", "", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "missing_keys", ",", "unexpected_keys", "=", "nn", ".", "Module", ".", "load_state_dict", "(", "self", ",", "state_dict", ",", "strict", "=", "False", ")", "\n", "\n", "# print(\"state dict keys\")", "\n", "# for key in state_dict.keys():", "\n", "#     print(key)", "\n", "\n", "if", "len", "(", "missing_keys", ")", ">", "0", ":", "\n", "            ", "print", "(", "\"Missing keys: \"", ",", "missing_keys", ")", "\n", "raise", "ValueError", "\n", "", "if", "not", "(", "len", "(", "unexpected_keys", ")", "==", "3", "and", "'ema_decay'", "in", "unexpected_keys", "and", "'ema_num_updates'", "in", "unexpected_keys", "and", "'ema_shadow_params'", "in", "unexpected_keys", ")", ":", "\n", "            ", "print", "(", "\"Unexpected keys: \"", ",", "unexpected_keys", ")", "\n", "raise", "ValueError", "\n", "\n", "", "self", ".", "decay", "=", "state_dict", "[", "'ema_decay'", "]", "\n", "self", ".", "num_updates", "=", "state_dict", "[", "'ema_num_updates'", "]", "\n", "self", ".", "shadow_params", "=", "state_dict", "[", "'ema_shadow_params'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.EMA.train": [[425, 441], ["torch.Module.train", "torch.Module.train", "torch.Module.train", "torch.Module.train", "print", "print", "print", "models.EMA.move_model_params_to_collected_params", "models.EMA.move_shadow_params_to_model_params", "len", "models.EMA.move_collected_params_to_model_params", "print"], "methods", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.EMA.train", "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.EMA.train", "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.EMA.train", "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.EMA.train", "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.EMA.move_model_params_to_collected_params", "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.EMA.move_shadow_params_to_model_params", "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.EMA.move_collected_params_to_model_params"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "if", "self", ".", "training", "==", "mode", ":", "\n", "            ", "print", "(", "\"Dont call model.train() with the same mode twice! Otherwise EMA parameters may overwrite original parameters\"", ")", "\n", "print", "(", "\"Current model training mode: \"", ",", "self", ".", "training", ")", "\n", "print", "(", "\"Requested training mode: \"", ",", "mode", ")", "\n", "raise", "ValueError", "\n", "\n", "", "nn", ".", "Module", ".", "train", "(", "self", ",", "mode", ")", "\n", "if", "mode", ":", "\n", "            ", "if", "len", "(", "self", ".", "collected_params", ")", ">", "0", ":", "\n", "                ", "self", ".", "move_collected_params_to_model_params", "(", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"model.train(True) called but no ema collected parameters!\"", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "move_model_params_to_collected_params", "(", ")", "\n", "self", ".", "move_shadow_params_to_model_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.GaussianTargetRateImageX0PredEMA.__init__": [[448, 454], ["models.EMA.__init__", "models.ImageX0PredBase.__init__", "models.GaussianTargetRate.__init__", "models.GaussianTargetRateImageX0PredEMA.init_ema"], "methods", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.losses.losses.ConditionalAux.__init__", "home.repos.pwc.inspect_result.andrew-cr_tauldr.losses.losses.ConditionalAux.__init__", "home.repos.pwc.inspect_result.andrew-cr_tauldr.losses.losses.ConditionalAux.__init__", "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.EMA.init_ema"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "device", ",", "rank", "=", "None", ")", ":", "\n", "        ", "EMA", ".", "__init__", "(", "self", ",", "cfg", ")", "\n", "ImageX0PredBase", ".", "__init__", "(", "self", ",", "cfg", ",", "device", ",", "rank", ")", "\n", "GaussianTargetRate", ".", "__init__", "(", "self", ",", "cfg", ",", "device", ")", "\n", "\n", "self", ".", "init_ema", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.UniformRateSequenceTransformerEMA.__init__": [[459, 465], ["models.EMA.__init__", "models.SequenceTransformer.__init__", "models.UniformRate.__init__", "models.UniformRateSequenceTransformerEMA.init_ema"], "methods", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.losses.losses.ConditionalAux.__init__", "home.repos.pwc.inspect_result.andrew-cr_tauldr.losses.losses.ConditionalAux.__init__", "home.repos.pwc.inspect_result.andrew-cr_tauldr.losses.losses.ConditionalAux.__init__", "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.EMA.init_ema"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "device", ",", "rank", "=", "None", ")", ":", "\n", "        ", "EMA", ".", "__init__", "(", "self", ",", "cfg", ")", "\n", "SequenceTransformer", ".", "__init__", "(", "self", ",", "cfg", ",", "device", ",", "rank", ")", "\n", "UniformRate", ".", "__init__", "(", "self", ",", "cfg", ",", "device", ")", "\n", "\n", "self", ".", "init_ema", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.BirthDeathRateSequenceTransformerEMA.__init__": [[469, 475], ["models.EMA.__init__", "models.SequenceTransformer.__init__", "models.BirthDeathForwardBase.__init__", "models.BirthDeathRateSequenceTransformerEMA.init_ema"], "methods", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.losses.losses.ConditionalAux.__init__", "home.repos.pwc.inspect_result.andrew-cr_tauldr.losses.losses.ConditionalAux.__init__", "home.repos.pwc.inspect_result.andrew-cr_tauldr.losses.losses.ConditionalAux.__init__", "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.EMA.init_ema"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "device", ",", "rank", "=", "None", ")", ":", "\n", "        ", "EMA", ".", "__init__", "(", "self", ",", "cfg", ")", "\n", "SequenceTransformer", ".", "__init__", "(", "self", ",", "cfg", ",", "device", ",", "rank", ")", "\n", "BirthDeathForwardBase", ".", "__init__", "(", "self", ",", "cfg", ",", "device", ")", "\n", "\n", "self", ".", "init_ema", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.GaussianRateResidualMLP.__init__": [[480, 483], ["models.ResidualMLP.__init__", "models.GaussianTargetRate.__init__"], "methods", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.losses.losses.ConditionalAux.__init__", "home.repos.pwc.inspect_result.andrew-cr_tauldr.losses.losses.ConditionalAux.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "device", ",", "rank", "=", "None", ")", ":", "\n", "        ", "ResidualMLP", ".", "__init__", "(", "self", ",", "cfg", ",", "device", ",", "rank", ")", "\n", "GaussianTargetRate", ".", "__init__", "(", "self", ",", "cfg", ",", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.model_utils.register_model": [[3, 9], ["ValueError"], "function", ["None"], ["def", "register_model", "(", "cls", ")", ":", "\n", "    ", "name", "=", "cls", ".", "__name__", "\n", "if", "name", "in", "_MODELS", ":", "\n", "        ", "raise", "ValueError", "(", "f'{name} is already registered!'", ")", "\n", "", "_MODELS", "[", "name", "]", "=", "cls", "\n", "return", "cls", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.model_utils.get_model": [[11, 13], ["None"], "function", ["None"], ["", "def", "get_model", "(", "name", ")", ":", "\n", "    ", "return", "_MODELS", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.model_utils.create_model": [[15, 20], ["model.to.to", "model_utils.get_model"], "function", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.models.model_utils.get_model"], ["", "def", "create_model", "(", "cfg", ",", "device", ",", "rank", "=", "None", ")", ":", "\n", "    ", "model", "=", "get_model", "(", "cfg", ".", "model", ".", "name", ")", "(", "cfg", ",", "device", ",", "rank", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.networks.NiN.__init__": [[53, 57], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "networks.default_init"], "methods", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.losses.losses.ConditionalAux.__init__", "home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.networks.default_init"], ["  ", "def", "__init__", "(", "self", ",", "in_ch", ",", "out_ch", ",", "init_scale", "=", "0.1", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "W", "=", "nn", ".", "Parameter", "(", "default_init", "(", "scale", "=", "init_scale", ")", "(", "(", "in_ch", ",", "out_ch", ")", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "b", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "out_ch", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.networks.NiN.forward": [[58, 66], ["x.permute.permute.permute", "y.permute", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "TensorType", "[", "\"batch\"", ",", "\"in_ch\"", ",", "\"H\"", ",", "\"W\"", "]", "\n", ")", "->", "TensorType", "[", "\"batch\"", ",", "\"out_ch\"", ",", "\"H\"", ",", "\"W\"", "]", ":", "\n", "\n", "    ", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "# x (batch, H, W, in_ch)", "\n", "y", "=", "torch", ".", "einsum", "(", "'bhwi,ik->bhwk'", ",", "x", ",", "self", ".", "W", ")", "+", "self", ".", "b", "\n", "# y (batch, H, W, out_ch)", "\n", "return", "y", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.networks.AttnBlock.__init__": [[69, 78], ["torch.Module.__init__", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "networks.NiN", "networks.NiN", "networks.NiN", "networks.NiN", "min"], "methods", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.losses.losses.ConditionalAux.__init__"], ["def", "__init__", "(", "self", ",", "channels", ",", "skip_rescale", "=", "True", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "skip_rescale", "=", "skip_rescale", "\n", "self", ".", "GroupNorm_0", "=", "nn", ".", "GroupNorm", "(", "num_groups", "=", "min", "(", "channels", "//", "4", ",", "32", ")", ",", "\n", "num_channels", "=", "channels", ",", "eps", "=", "1e-6", ")", "\n", "self", ".", "NIN_0", "=", "NiN", "(", "channels", ",", "channels", ")", "\n", "self", ".", "NIN_1", "=", "NiN", "(", "channels", ",", "channels", ")", "\n", "self", ".", "NIN_2", "=", "NiN", "(", "channels", ",", "channels", ")", "\n", "self", ".", "NIN_3", "=", "NiN", "(", "channels", ",", "channels", ",", "init_scale", "=", "0.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.networks.AttnBlock.forward": [[79, 99], ["networks.AttnBlock.GroupNorm_0", "networks.AttnBlock.NIN_0", "networks.AttnBlock.NIN_1", "networks.AttnBlock.NIN_2", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.softmax", "torch.softmax", "torch.softmax", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "networks.AttnBlock.NIN_3", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "int", "numpy.sqrt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "TensorType", "[", "\"batch\"", ",", "\"channels\"", ",", "\"H\"", ",", "\"W\"", "]", "\n", ")", "->", "TensorType", "[", "\"batch\"", ",", "\"channels\"", ",", "\"H\"", ",", "\"W\"", "]", ":", "\n", "\n", "    ", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "h", "=", "self", ".", "GroupNorm_0", "(", "x", ")", "\n", "q", "=", "self", ".", "NIN_0", "(", "h", ")", "\n", "k", "=", "self", ".", "NIN_1", "(", "h", ")", "\n", "v", "=", "self", ".", "NIN_2", "(", "h", ")", "\n", "\n", "w", "=", "torch", ".", "einsum", "(", "'bchw,bcij->bhwij'", ",", "q", ",", "k", ")", "*", "(", "int", "(", "C", ")", "**", "(", "-", "0.5", ")", ")", "\n", "w", "=", "torch", ".", "reshape", "(", "w", ",", "(", "B", ",", "H", ",", "W", ",", "H", "*", "W", ")", ")", "\n", "w", "=", "F", ".", "softmax", "(", "w", ",", "dim", "=", "-", "1", ")", "\n", "w", "=", "torch", ".", "reshape", "(", "w", ",", "(", "B", ",", "H", ",", "W", ",", "H", ",", "W", ")", ")", "\n", "h", "=", "torch", ".", "einsum", "(", "'bhwij,bcij->bchw'", ",", "w", ",", "v", ")", "\n", "h", "=", "self", ".", "NIN_3", "(", "h", ")", "\n", "\n", "if", "self", ".", "skip_rescale", ":", "\n", "        ", "return", "(", "x", "+", "h", ")", "/", "np", ".", "sqrt", "(", "2.", ")", "\n", "", "else", ":", "\n", "        ", "return", "x", "+", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.networks.ResBlock.__init__": [[102, 135], ["torch.Module.__init__", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "networks.NiN", "min", "min"], "methods", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.losses.losses.ConditionalAux.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "out_ch", ",", "temb_dim", "=", "None", ",", "dropout", "=", "0.1", ",", "skip_rescale", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_ch", "=", "in_ch", "\n", "self", ".", "out_ch", "=", "out_ch", "\n", "\n", "self", ".", "skip_rescale", "=", "skip_rescale", "\n", "\n", "self", ".", "act", "=", "nn", ".", "functional", ".", "silu", "\n", "self", ".", "groupnorm0", "=", "nn", ".", "GroupNorm", "(", "\n", "num_groups", "=", "min", "(", "in_ch", "//", "4", ",", "32", ")", ",", "\n", "num_channels", "=", "in_ch", ",", "eps", "=", "1e-6", "\n", ")", "\n", "self", ".", "conv0", "=", "nn", ".", "Conv2d", "(", "\n", "in_ch", ",", "out_ch", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", "\n", ")", "\n", "\n", "if", "temb_dim", "is", "not", "None", ":", "\n", "            ", "self", ".", "dense0", "=", "nn", ".", "Linear", "(", "temb_dim", ",", "out_ch", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "dense0", ".", "bias", ")", "\n", "\n", "\n", "", "self", ".", "groupnorm1", "=", "nn", ".", "GroupNorm", "(", "\n", "num_groups", "=", "min", "(", "out_ch", "//", "4", ",", "32", ")", ",", "\n", "num_channels", "=", "out_ch", ",", "eps", "=", "1e-6", "\n", ")", "\n", "self", ".", "dropout0", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "out_ch", ",", "out_ch", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", "\n", ")", "\n", "if", "out_ch", "!=", "in_ch", ":", "\n", "            ", "self", ".", "nin", "=", "NiN", "(", "in_ch", ",", "out_ch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.networks.ResBlock.forward": [[136, 162], ["networks.ResBlock.groupnorm0", "networks.ResBlock.act", "networks.ResBlock.conv0", "networks.ResBlock.groupnorm1", "networks.ResBlock.act", "networks.ResBlock.dropout0", "networks.ResBlock.conv1", "networks.ResBlock.nin", "networks.ResBlock.dense0", "numpy.sqrt", "networks.ResBlock.act"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ":", "TensorType", "[", "\"batch\"", ",", "\"in_ch\"", ",", "\"H\"", ",", "\"W\"", "]", ",", "\n", "temb", ":", "TensorType", "[", "\"batch\"", ",", "\"temb_dim\"", "]", "=", "None", "\n", ")", "->", "TensorType", "[", "\"batch\"", ",", "\"out_ch\"", ",", "\"H\"", ",", "\"W\"", "]", ":", "\n", "\n", "        ", "assert", "x", ".", "shape", "[", "1", "]", "==", "self", ".", "in_ch", "\n", "\n", "h", "=", "self", ".", "groupnorm0", "(", "x", ")", "\n", "h", "=", "self", ".", "act", "(", "h", ")", "\n", "h", "=", "self", ".", "conv0", "(", "h", ")", "\n", "\n", "if", "temb", "is", "not", "None", ":", "\n", "            ", "h", "+=", "self", ".", "dense0", "(", "self", ".", "act", "(", "temb", ")", ")", "[", ":", ",", ":", ",", "None", ",", "None", "]", "\n", "\n", "", "h", "=", "self", ".", "groupnorm1", "(", "h", ")", "\n", "h", "=", "self", ".", "act", "(", "h", ")", "\n", "h", "=", "self", ".", "dropout0", "(", "h", ")", "\n", "h", "=", "self", ".", "conv1", "(", "h", ")", "\n", "if", "h", ".", "shape", "[", "1", "]", "!=", "self", ".", "in_ch", ":", "\n", "            ", "x", "=", "self", ".", "nin", "(", "x", ")", "\n", "\n", "", "assert", "x", ".", "shape", "==", "h", ".", "shape", "\n", "\n", "if", "self", ".", "skip_rescale", ":", "\n", "            ", "return", "(", "x", "+", "h", ")", "/", "np", ".", "sqrt", "(", "2.", ")", "\n", "", "else", ":", "\n", "            ", "return", "x", "+", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.networks.Downsample.__init__": [[164, 168], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.losses.losses.ConditionalAux.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "channels", ",", "channels", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.networks.Downsample.forward": [[169, 177], ["torch.functional.pad", "torch.functional.pad", "torch.functional.pad", "networks.Downsample.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "TensorType", "[", "\"batch\"", ",", "\"ch\"", ",", "\"inH\"", ",", "\"inW\"", "]", "\n", ")", "->", "TensorType", "[", "\"batch\"", ",", "\"ch\"", ",", "\"outH\"", ",", "\"outW\"", "]", ":", "\n", "        ", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "x", "=", "nn", ".", "functional", ".", "pad", "(", "x", ",", "(", "0", ",", "1", ",", "0", ",", "1", ")", ")", "\n", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "\n", "assert", "x", ".", "shape", "==", "(", "B", ",", "C", ",", "H", "//", "2", ",", "W", "//", "2", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.networks.Upsample.__init__": [[179, 182], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.losses.losses.ConditionalAux.__init__"], ["  ", "def", "__init__", "(", "self", ",", "channels", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "channels", ",", "channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.networks.Upsample.forward": [[183, 191], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "networks.Upsample.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "TensorType", "[", "\"batch\"", ",", "\"ch\"", ",", "\"inH\"", ",", "\"inW\"", "]", "\n", ")", "->", "TensorType", "[", "\"batch\"", ",", "\"ch\"", ",", "\"outH\"", ",", "\"outW\"", "]", ":", "\n", "    ", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "h", "=", "F", ".", "interpolate", "(", "x", ",", "(", "H", "*", "2", ",", "W", "*", "2", ")", ",", "mode", "=", "'nearest'", ")", "\n", "h", "=", "self", ".", "conv", "(", "h", ")", "\n", "\n", "assert", "h", ".", "shape", "==", "(", "B", ",", "C", ",", "H", "*", "2", ",", "W", "*", "2", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.networks.UNet.__init__": [[193, 311], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "networks.UNet.middle_modules.append", "networks.UNet.middle_modules.append", "networks.UNet.middle_modules.append", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "reversed", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "networks.UNet.output_modules.append", "networks.UNet.output_modules.append", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "networks.UNet.temb_modules.append", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "networks.UNet.temb_modules.append", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "networks.ResBlock", "networks.AttnBlock", "networks.ResBlock", "range", "range", "len", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "networks.UNet.downsampling_modules.append", "h_cs.append", "networks.UNet.downsampling_modules.append", "h_cs.append", "networks.UNet.upsampling_modules.append", "networks.UNet.upsampling_modules.append", "min", "networks.ResBlock", "networks.UNet.downsampling_modules.append", "networks.Downsample", "networks.ResBlock", "networks.UNet.upsampling_modules.append", "networks.Upsample", "networks.AttnBlock", "networks.AttnBlock", "h_cs.pop"], "methods", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.losses.losses.ConditionalAux.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ch", ",", "num_res_blocks", ",", "num_scales", ",", "ch_mult", ",", "input_channels", ",", "\n", "output_channels", ",", "scale_count_to_put_attn", ",", "data_min_max", ",", "dropout", ",", "\n", "skip_rescale", ",", "do_time_embed", ",", "time_scale_factor", "=", "None", ",", "time_embed_dim", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "num_scales", "==", "len", "(", "ch_mult", ")", "\n", "\n", "self", ".", "ch", "=", "ch", "\n", "self", ".", "num_res_blocks", "=", "num_res_blocks", "\n", "self", ".", "num_scales", "=", "num_scales", "\n", "self", ".", "ch_mult", "=", "ch_mult", "\n", "self", ".", "input_channels", "=", "input_channels", "\n", "self", ".", "output_channels", "=", "2", "*", "input_channels", "\n", "self", ".", "scale_count_to_put_attn", "=", "scale_count_to_put_attn", "\n", "self", ".", "data_min_max", "=", "data_min_max", "# tuple of min and max value of input so it can be rescaled to [-1, 1]", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "skip_rescale", "=", "skip_rescale", "\n", "self", ".", "do_time_embed", "=", "do_time_embed", "# Whether to add in time embeddings", "\n", "self", ".", "time_scale_factor", "=", "time_scale_factor", "# scale to make the range of times be 0 to 1000", "\n", "self", ".", "time_embed_dim", "=", "time_embed_dim", "\n", "\n", "self", ".", "act", "=", "nn", ".", "functional", ".", "silu", "\n", "\n", "if", "self", ".", "do_time_embed", ":", "\n", "            ", "self", ".", "temb_modules", "=", "[", "]", "\n", "self", ".", "temb_modules", ".", "append", "(", "nn", ".", "Linear", "(", "self", ".", "time_embed_dim", ",", "self", ".", "time_embed_dim", "*", "4", ")", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "temb_modules", "[", "-", "1", "]", ".", "bias", ")", "\n", "self", ".", "temb_modules", ".", "append", "(", "nn", ".", "Linear", "(", "self", ".", "time_embed_dim", "*", "4", ",", "self", ".", "time_embed_dim", "*", "4", ")", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "temb_modules", "[", "-", "1", "]", ".", "bias", ")", "\n", "self", ".", "temb_modules", "=", "nn", ".", "ModuleList", "(", "self", ".", "temb_modules", ")", "\n", "\n", "", "self", ".", "expanded_time_dim", "=", "4", "*", "self", ".", "time_embed_dim", "if", "self", ".", "do_time_embed", "else", "None", "\n", "\n", "self", ".", "input_conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "input_channels", ",", "out_channels", "=", "self", ".", "ch", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "1", "\n", ")", "\n", "\n", "h_cs", "=", "[", "self", ".", "ch", "]", "\n", "in_ch", "=", "self", ".", "ch", "\n", "\n", "\n", "# Downsampling", "\n", "self", ".", "downsampling_modules", "=", "[", "]", "\n", "\n", "for", "scale_count", "in", "range", "(", "self", ".", "num_scales", ")", ":", "\n", "            ", "for", "res_count", "in", "range", "(", "self", ".", "num_res_blocks", ")", ":", "\n", "                ", "out_ch", "=", "self", ".", "ch", "*", "self", ".", "ch_mult", "[", "scale_count", "]", "\n", "self", ".", "downsampling_modules", ".", "append", "(", "\n", "ResBlock", "(", "in_ch", ",", "out_ch", ",", "temb_dim", "=", "self", ".", "expanded_time_dim", ",", "\n", "dropout", "=", "dropout", ",", "skip_rescale", "=", "self", ".", "skip_rescale", ")", "\n", ")", "\n", "in_ch", "=", "out_ch", "\n", "h_cs", ".", "append", "(", "in_ch", ")", "\n", "if", "scale_count", "==", "self", ".", "scale_count_to_put_attn", ":", "\n", "                    ", "self", ".", "downsampling_modules", ".", "append", "(", "\n", "AttnBlock", "(", "in_ch", ",", "skip_rescale", "=", "self", ".", "skip_rescale", ")", "\n", ")", "\n", "\n", "", "", "if", "scale_count", "!=", "self", ".", "num_scales", "-", "1", ":", "\n", "                ", "self", ".", "downsampling_modules", ".", "append", "(", "Downsample", "(", "in_ch", ")", ")", "\n", "h_cs", ".", "append", "(", "in_ch", ")", "\n", "\n", "", "", "self", ".", "downsampling_modules", "=", "nn", ".", "ModuleList", "(", "self", ".", "downsampling_modules", ")", "\n", "\n", "# Middle", "\n", "self", ".", "middle_modules", "=", "[", "]", "\n", "\n", "self", ".", "middle_modules", ".", "append", "(", "\n", "ResBlock", "(", "in_ch", ",", "in_ch", ",", "temb_dim", "=", "self", ".", "expanded_time_dim", ",", "\n", "dropout", "=", "dropout", ",", "skip_rescale", "=", "self", ".", "skip_rescale", ")", "\n", ")", "\n", "self", ".", "middle_modules", ".", "append", "(", "\n", "AttnBlock", "(", "in_ch", ",", "skip_rescale", "=", "self", ".", "skip_rescale", ")", "\n", ")", "\n", "self", ".", "middle_modules", ".", "append", "(", "\n", "ResBlock", "(", "in_ch", ",", "in_ch", ",", "temb_dim", "=", "self", ".", "expanded_time_dim", ",", "\n", "dropout", "=", "dropout", ",", "skip_rescale", "=", "self", ".", "skip_rescale", ")", "\n", ")", "\n", "self", ".", "middle_modules", "=", "nn", ".", "ModuleList", "(", "self", ".", "middle_modules", ")", "\n", "\n", "# Upsampling", "\n", "self", ".", "upsampling_modules", "=", "[", "]", "\n", "\n", "for", "scale_count", "in", "reversed", "(", "range", "(", "self", ".", "num_scales", ")", ")", ":", "\n", "            ", "for", "res_count", "in", "range", "(", "self", ".", "num_res_blocks", "+", "1", ")", ":", "\n", "                ", "out_ch", "=", "self", ".", "ch", "*", "self", ".", "ch_mult", "[", "scale_count", "]", "\n", "self", ".", "upsampling_modules", ".", "append", "(", "\n", "ResBlock", "(", "in_ch", "+", "h_cs", ".", "pop", "(", ")", ",", "\n", "out_ch", ",", "\n", "temb_dim", "=", "self", ".", "expanded_time_dim", ",", "\n", "dropout", "=", "dropout", ",", "\n", "skip_rescale", "=", "self", ".", "skip_rescale", "\n", ")", "\n", ")", "\n", "in_ch", "=", "out_ch", "\n", "\n", "if", "scale_count", "==", "self", ".", "scale_count_to_put_attn", ":", "\n", "                    ", "self", ".", "upsampling_modules", ".", "append", "(", "\n", "AttnBlock", "(", "in_ch", ",", "skip_rescale", "=", "self", ".", "skip_rescale", ")", "\n", ")", "\n", "", "", "if", "scale_count", "!=", "0", ":", "\n", "                ", "self", ".", "upsampling_modules", ".", "append", "(", "Upsample", "(", "in_ch", ")", ")", "\n", "\n", "", "", "self", ".", "upsampling_modules", "=", "nn", ".", "ModuleList", "(", "self", ".", "upsampling_modules", ")", "\n", "\n", "assert", "len", "(", "h_cs", ")", "==", "0", "\n", "\n", "# output", "\n", "self", ".", "output_modules", "=", "[", "]", "\n", "\n", "self", ".", "output_modules", ".", "append", "(", "\n", "nn", ".", "GroupNorm", "(", "min", "(", "in_ch", "//", "4", ",", "32", ")", ",", "in_ch", ",", "eps", "=", "1e-6", ")", "\n", ")", "\n", "\n", "self", ".", "output_modules", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "in_ch", ",", "self", ".", "output_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", ")", "\n", "self", ".", "output_modules", "=", "nn", ".", "ModuleList", "(", "self", ".", "output_modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.networks.UNet._center_data": [[313, 316], ["None"], "methods", ["None"], ["", "def", "_center_data", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "(", "x", "-", "self", ".", "data_min_max", "[", "0", "]", ")", "/", "(", "self", ".", "data_min_max", "[", "1", "]", "-", "self", ".", "data_min_max", "[", "0", "]", ")", "# [0, 1]", "\n", "return", "2", "*", "out", "-", "1", "# to put it in [-1, 1]", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.networks.UNet._time_embedding": [[317, 328], ["lib.transformer_timestep_embedding", "networks.UNet.act"], "methods", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.network_utils.transformer_timestep_embedding"], ["", "def", "_time_embedding", "(", "self", ",", "timesteps", ")", ":", "\n", "        ", "if", "self", ".", "do_time_embed", ":", "\n", "            ", "temb", "=", "network_utils", ".", "transformer_timestep_embedding", "(", "\n", "timesteps", "*", "self", ".", "time_scale_factor", ",", "self", ".", "time_embed_dim", "\n", ")", "\n", "temb", "=", "self", ".", "temb_modules", "[", "0", "]", "(", "temb", ")", "\n", "temb", "=", "self", ".", "temb_modules", "[", "1", "]", "(", "self", ".", "act", "(", "temb", ")", ")", "\n", "", "else", ":", "\n", "            ", "temb", "=", "None", "\n", "\n", "", "return", "temb", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.networks.UNet._do_input_conv": [[329, 333], ["networks.UNet.input_conv"], "methods", ["None"], ["", "def", "_do_input_conv", "(", "self", ",", "h", ")", ":", "\n", "        ", "h", "=", "self", ".", "input_conv", "(", "h", ")", "\n", "hs", "=", "[", "h", "]", "\n", "return", "h", ",", "hs", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.networks.UNet._do_downsampling": [[334, 353], ["range", "range", "len", "hs.append", "hs.append"], "methods", ["None"], ["", "def", "_do_downsampling", "(", "self", ",", "h", ",", "hs", ",", "temb", ")", ":", "\n", "        ", "m_idx", "=", "0", "\n", "for", "scale_count", "in", "range", "(", "self", ".", "num_scales", ")", ":", "\n", "            ", "for", "res_count", "in", "range", "(", "self", ".", "num_res_blocks", ")", ":", "\n", "                ", "h", "=", "self", ".", "downsampling_modules", "[", "m_idx", "]", "(", "h", ",", "temb", ")", "\n", "m_idx", "+=", "1", "\n", "if", "scale_count", "==", "self", ".", "scale_count_to_put_attn", ":", "\n", "                    ", "h", "=", "self", ".", "downsampling_modules", "[", "m_idx", "]", "(", "h", ")", "\n", "m_idx", "+=", "1", "\n", "", "hs", ".", "append", "(", "h", ")", "\n", "\n", "", "if", "scale_count", "!=", "self", ".", "num_scales", "-", "1", ":", "\n", "                ", "h", "=", "self", ".", "downsampling_modules", "[", "m_idx", "]", "(", "h", ")", "\n", "hs", ".", "append", "(", "h", ")", "\n", "m_idx", "+=", "1", "\n", "\n", "", "", "assert", "m_idx", "==", "len", "(", "self", ".", "downsampling_modules", ")", "\n", "\n", "return", "h", ",", "hs", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.networks.UNet._do_middle": [[354, 366], ["len"], "methods", ["None"], ["", "def", "_do_middle", "(", "self", ",", "h", ",", "temb", ")", ":", "\n", "        ", "m_idx", "=", "0", "\n", "h", "=", "self", ".", "middle_modules", "[", "m_idx", "]", "(", "h", ",", "temb", ")", "\n", "m_idx", "+=", "1", "\n", "h", "=", "self", ".", "middle_modules", "[", "m_idx", "]", "(", "h", ")", "\n", "m_idx", "+=", "1", "\n", "h", "=", "self", ".", "middle_modules", "[", "m_idx", "]", "(", "h", ",", "temb", ")", "\n", "m_idx", "+=", "1", "\n", "\n", "assert", "m_idx", "==", "len", "(", "self", ".", "middle_modules", ")", "\n", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.networks.UNet._do_upsampling": [[367, 386], ["reversed", "range", "range", "len", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "hs.pop"], "methods", ["None"], ["", "def", "_do_upsampling", "(", "self", ",", "h", ",", "hs", ",", "temb", ")", ":", "\n", "        ", "m_idx", "=", "0", "\n", "for", "scale_count", "in", "reversed", "(", "range", "(", "self", ".", "num_scales", ")", ")", ":", "\n", "            ", "for", "res_count", "in", "range", "(", "self", ".", "num_res_blocks", "+", "1", ")", ":", "\n", "                ", "h", "=", "self", ".", "upsampling_modules", "[", "m_idx", "]", "(", "torch", ".", "cat", "(", "[", "h", ",", "hs", ".", "pop", "(", ")", "]", ",", "dim", "=", "1", ")", ",", "temb", ")", "\n", "m_idx", "+=", "1", "\n", "\n", "if", "scale_count", "==", "self", ".", "scale_count_to_put_attn", ":", "\n", "                    ", "h", "=", "self", ".", "upsampling_modules", "[", "m_idx", "]", "(", "h", ")", "\n", "m_idx", "+=", "1", "\n", "\n", "", "", "if", "scale_count", "!=", "0", ":", "\n", "                ", "h", "=", "self", ".", "upsampling_modules", "[", "m_idx", "]", "(", "h", ")", "\n", "m_idx", "+=", "1", "\n", "\n", "", "", "assert", "len", "(", "hs", ")", "==", "0", "\n", "assert", "m_idx", "==", "len", "(", "self", ".", "upsampling_modules", ")", "\n", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.networks.UNet._do_output": [[387, 394], ["networks.UNet.act"], "methods", ["None"], ["", "def", "_do_output", "(", "self", ",", "h", ")", ":", "\n", "\n", "        ", "h", "=", "self", ".", "output_modules", "[", "0", "]", "(", "h", ")", "\n", "h", "=", "self", ".", "act", "(", "h", ")", "\n", "h", "=", "self", ".", "output_modules", "[", "1", "]", "(", "h", ")", "\n", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.networks.UNet._logistic_output_res": [[395, 403], ["torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh"], "methods", ["None"], ["", "def", "_logistic_output_res", "(", "self", ",", "\n", "h", ":", "TensorType", "[", "\"B\"", ",", "\"twoC\"", ",", "\"H\"", ",", "\"W\"", "]", ",", "\n", "centered_x_in", ":", "TensorType", "[", "\"B\"", ",", "\"C\"", ",", "\"H\"", ",", "\"W\"", "]", "\n", ")", "->", "TensorType", "[", "\"B\"", ",", "\"twoC\"", ",", "\"H\"", ",", "\"W\"", "]", ":", "\n", "        ", "B", ",", "twoC", ",", "H", ",", "W", "=", "h", ".", "shape", "\n", "C", "=", "twoC", "//", "2", "\n", "h", "[", ":", ",", "0", ":", "C", ",", ":", ",", ":", "]", "=", "torch", ".", "tanh", "(", "centered_x_in", "+", "h", "[", ":", ",", "0", ":", "C", ",", ":", ",", ":", "]", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.networks.UNet.forward": [[404, 428], ["networks.UNet._center_data", "networks.UNet._time_embedding", "networks.UNet._do_input_conv", "networks.UNet._do_downsampling", "networks.UNet._do_middle", "networks.UNet._do_upsampling", "networks.UNet._do_output", "networks.UNet._logistic_output_res"], "methods", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.networks.UNet._center_data", "home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.networks.UNet._time_embedding", "home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.networks.UNet._do_input_conv", "home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.networks.UNet._do_downsampling", "home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.networks.UNet._do_middle", "home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.networks.UNet._do_upsampling", "home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.networks.UNet._do_output", "home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.networks.UNet._logistic_output_res"], ["", "def", "forward", "(", "self", ",", "\n", "x", ":", "TensorType", "[", "\"B\"", ",", "\"C\"", ",", "\"H\"", ",", "\"W\"", "]", ",", "\n", "timesteps", ":", "TensorType", "[", "\"B\"", "]", "=", "None", "\n", ")", "->", "TensorType", "[", "\"B\"", ",", "\"twoC\"", ",", "\"H\"", ",", "\"W\"", "]", ":", "\n", "\n", "        ", "h", "=", "self", ".", "_center_data", "(", "x", ")", "\n", "centered_x_in", "=", "h", "\n", "\n", "temb", "=", "self", ".", "_time_embedding", "(", "timesteps", ")", "\n", "\n", "h", ",", "hs", "=", "self", ".", "_do_input_conv", "(", "h", ")", "\n", "\n", "h", ",", "hs", "=", "self", ".", "_do_downsampling", "(", "h", ",", "hs", ",", "temb", ")", "\n", "\n", "h", "=", "self", ".", "_do_middle", "(", "h", ",", "temb", ")", "\n", "\n", "h", "=", "self", ".", "_do_upsampling", "(", "h", ",", "hs", ",", "temb", ")", "\n", "\n", "h", "=", "self", ".", "_do_output", "(", "h", ")", "\n", "\n", "# h (B, 2*C, H, W)", "\n", "h", "=", "self", ".", "_logistic_output_res", "(", "h", ",", "centered_x_in", ")", "\n", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.networks.PositionalEncoding.__init__": [[433, 443], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "math.log"], "methods", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.losses.losses.ConditionalAux.__init__"], ["    ", "def", "__init__", "(", "self", ",", "device", ",", "d_model", ":", "int", ",", "dropout", ":", "float", "=", "0.1", ",", "max_len", ":", "int", "=", "5000", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "\n", "position", "=", "torch", ".", "arange", "(", "max_len", ",", "device", "=", "device", ")", ".", "unsqueeze", "(", "1", ")", "\n", "div_term", "=", "torch", ".", "exp", "(", "torch", ".", "arange", "(", "0", ",", "d_model", ",", "2", ",", "device", "=", "device", ")", "*", "(", "-", "math", ".", "log", "(", "10000.0", ")", "/", "d_model", ")", ")", "\n", "pe", "=", "torch", ".", "zeros", "(", "1", ",", "max_len", ",", "d_model", ",", "device", "=", "device", ")", "\n", "pe", "[", "0", ",", ":", ",", "0", ":", ":", "2", "]", "=", "torch", ".", "sin", "(", "position", "*", "div_term", ")", "\n", "pe", "[", "0", ",", ":", ",", "1", ":", ":", "2", "]", "=", "torch", ".", "cos", "(", "position", "*", "div_term", ")", "\n", "self", ".", "pe", "=", "pe", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.networks.PositionalEncoding.forward": [[444, 452], ["networks.PositionalEncoding.dropout", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "TensorType", "[", "\"B\"", ",", "\"L\"", ",", "\"K\"", "]", "\n", ")", "->", "TensorType", "[", "\"B\"", ",", "\"L\"", ",", "\"K\"", "]", ":", "\n", "        ", "\"\"\"\n        Args:\n            x: Tensor, shape [batch_size, seq_len, embedding_dim]\n        \"\"\"", "\n", "x", "=", "x", "+", "self", ".", "pe", "[", ":", ",", "0", ":", "x", ".", "size", "(", "1", ")", ",", ":", "]", "\n", "return", "self", ".", "dropout", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.networks.TransformerEncoderLayer.__init__": [[454, 471], ["torch.Module.__init__", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.losses.losses.ConditionalAux.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "num_heads", ",", "dim_feedforward", ",", "dropout", ",", "temb_dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "self_attn", "=", "nn", ".", "MultiheadAttention", "(", "d_model", ",", "num_heads", ",", "\n", "dropout", "=", "dropout", ",", "batch_first", "=", "True", ")", "\n", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "d_model", ",", "dim_feedforward", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "dim_feedforward", ",", "d_model", ")", "\n", "\n", "self", ".", "norm1", "=", "nn", ".", "LayerNorm", "(", "d_model", ",", "eps", "=", "1e-5", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "LayerNorm", "(", "d_model", ",", "eps", "=", "1e-5", ")", "\n", "self", ".", "dropout1", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "film_from_temb", "=", "nn", ".", "Linear", "(", "temb_dim", ",", "2", "*", "d_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.networks.TransformerEncoderLayer.forward": [[472, 486], ["networks.TransformerEncoderLayer.film_from_temb", "networks.TransformerEncoderLayer.norm1", "networks.TransformerEncoderLayer.norm2", "networks.TransformerEncoderLayer._sa_block", "networks.TransformerEncoderLayer._ff_block"], "methods", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.networks.TransformerEncoderLayer._sa_block", "home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.networks.TransformerEncoderLayer._ff_block"], ["", "def", "forward", "(", "self", ",", "\n", "x", ":", "TensorType", "[", "\"B\"", ",", "\"L\"", ",", "\"K\"", "]", ",", "\n", "temb", ":", "TensorType", "[", "\"B\"", ",", "\"temb_dim\"", "]", "\n", ")", ":", "\n", "        ", "B", ",", "L", ",", "K", "=", "x", ".", "shape", "\n", "\n", "film_params", "=", "self", ".", "film_from_temb", "(", "temb", ")", "\n", "\n", "x", "=", "self", ".", "norm1", "(", "x", "+", "self", ".", "_sa_block", "(", "x", ")", ")", "\n", "x", "=", "film_params", "[", ":", ",", "None", ",", "0", ":", "K", "]", "*", "x", "+", "film_params", "[", ":", ",", "None", ",", "K", ":", "]", "\n", "x", "=", "self", ".", "norm2", "(", "x", "+", "self", ".", "_ff_block", "(", "x", ")", ")", "\n", "x", "=", "film_params", "[", ":", ",", "None", ",", "0", ":", "K", "]", "*", "x", "+", "film_params", "[", ":", ",", "None", ",", "K", ":", "]", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.networks.TransformerEncoderLayer._sa_block": [[487, 490], ["networks.TransformerEncoderLayer.dropout1", "networks.TransformerEncoderLayer.self_attn"], "methods", ["None"], ["", "def", "_sa_block", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "self_attn", "(", "x", ",", "x", ",", "x", ")", "[", "0", "]", "\n", "return", "self", ".", "dropout1", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.networks.TransformerEncoderLayer._ff_block": [[491, 494], ["networks.TransformerEncoderLayer.linear2", "networks.TransformerEncoderLayer.dropout2", "networks.TransformerEncoderLayer.dropout", "networks.TransformerEncoderLayer.activation", "networks.TransformerEncoderLayer.linear1"], "methods", ["None"], ["", "def", "_ff_block", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "linear2", "(", "self", ".", "dropout", "(", "self", ".", "activation", "(", "self", ".", "linear1", "(", "x", ")", ")", ")", ")", "\n", "return", "self", ".", "dropout2", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.networks.FFResidual.__init__": [[496, 504], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.losses.losses.ConditionalAux.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "hidden", ",", "temb_dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "d_model", ",", "hidden", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "hidden", ",", "d_model", ")", "\n", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ",", "eps", "=", "1e-5", ")", "\n", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "film_from_temb", "=", "nn", ".", "Linear", "(", "temb_dim", ",", "2", "*", "d_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.networks.FFResidual.forward": [[505, 513], ["networks.FFResidual.film_from_temb", "networks.FFResidual.norm", "networks.FFResidual.linear2", "networks.FFResidual.activation", "networks.FFResidual.linear1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "temb", ")", ":", "\n", "        ", "B", ",", "L", ",", "K", "=", "x", ".", "shape", "\n", "\n", "film_params", "=", "self", ".", "film_from_temb", "(", "temb", ")", "\n", "\n", "x", "=", "self", ".", "norm", "(", "x", "+", "self", ".", "linear2", "(", "self", ".", "activation", "(", "self", ".", "linear1", "(", "x", ")", ")", ")", ")", "\n", "x", "=", "film_params", "[", ":", ",", "None", ",", "0", ":", "K", "]", "*", "x", "+", "film_params", "[", ":", ",", "None", ",", "K", ":", "]", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.networks.TransformerEncoder.__init__": [[515, 556], ["torch.Module.__init__", "networks.PositionalEncoding", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "networks.TransformerEncoder.encoder_layers.append", "networks.TransformerEncoder.output_resid_layers.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "networks.TransformerEncoderLayer", "networks.FFResidual"], "methods", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.losses.losses.ConditionalAux.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_layers", ",", "d_model", ",", "num_heads", ",", "dim_feedforward", ",", "\n", "dropout", ",", "num_output_FFresiduals", ",", "time_scale_factor", ",", "S", ",", "max_len", ",", "\n", "temb_dim", ",", "use_one_hot_input", ",", "device", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "temb_dim", "=", "temb_dim", "\n", "self", ".", "use_one_hot_input", "=", "use_one_hot_input", "\n", "\n", "self", ".", "S", "=", "S", "\n", "\n", "self", ".", "pos_embed", "=", "PositionalEncoding", "(", "device", ",", "d_model", ",", "dropout", ",", "max_len", ")", "\n", "\n", "self", ".", "encoder_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "self", ".", "encoder_layers", ".", "append", "(", "\n", "TransformerEncoderLayer", "(", "d_model", ",", "num_heads", ",", "dim_feedforward", ",", "\n", "dropout", ",", "4", "*", "temb_dim", ")", "\n", ")", "\n", "", "self", ".", "encoder_layers", "=", "nn", ".", "ModuleList", "(", "self", ".", "encoder_layers", ")", "\n", "\n", "self", ".", "output_resid_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_output_FFresiduals", ")", ":", "\n", "            ", "self", ".", "output_resid_layers", ".", "append", "(", "\n", "FFResidual", "(", "d_model", ",", "dim_feedforward", ",", "4", "*", "temb_dim", ")", "\n", ")", "\n", "", "self", ".", "output_resid_layers", "=", "nn", ".", "ModuleList", "(", "self", ".", "output_resid_layers", ")", "\n", "\n", "self", ".", "output_linear", "=", "nn", ".", "Linear", "(", "d_model", ",", "self", ".", "S", ")", "\n", "\n", "if", "use_one_hot_input", ":", "\n", "            ", "self", ".", "input_embedding", "=", "nn", ".", "Linear", "(", "S", ",", "d_model", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "input_embedding", "=", "nn", ".", "Linear", "(", "1", ",", "d_model", ")", "\n", "\n", "", "self", ".", "temb_net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "temb_dim", ",", "dim_feedforward", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "dim_feedforward", ",", "4", "*", "temb_dim", ")", "\n", ")", "\n", "\n", "self", ".", "time_scale_factor", "=", "time_scale_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.networks.TransformerEncoder.forward": [[557, 589], ["networks.TransformerEncoder.temb_net", "torch.functional.one_hot", "torch.functional.one_hot", "torch.functional.one_hot", "networks.TransformerEncoder.pos_embed", "networks.TransformerEncoder.output_linear", "lib.transformer_timestep_embedding", "networks.TransformerEncoder.input_embedding", "networks.TransformerEncoder.normalize_input", "resid_layer.view", "networks.TransformerEncoder.input_embedding", "encoder_layer", "resid_layer", "torch.functional.one_hot.float"], "methods", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.network_utils.transformer_timestep_embedding", "home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.networks.ResidualMLP.normalize_input"], ["", "def", "forward", "(", "self", ",", "x", ":", "TensorType", "[", "\"B\"", ",", "\"L\"", "]", ",", "\n", "times", ":", "TensorType", "[", "\"B\"", "]", ")", ":", "\n", "        ", "B", ",", "L", "=", "x", ".", "shape", "\n", "\n", "temb", "=", "self", ".", "temb_net", "(", "\n", "network_utils", ".", "transformer_timestep_embedding", "(", "\n", "times", "*", "self", ".", "time_scale_factor", ",", "self", ".", "temb_dim", "\n", ")", "\n", ")", "\n", "one_hot_x", "=", "nn", ".", "functional", ".", "one_hot", "(", "x", ",", "num_classes", "=", "self", ".", "S", ")", "# (B, L, S)", "\n", "\n", "if", "self", ".", "use_one_hot_input", ":", "\n", "            ", "x", "=", "self", ".", "input_embedding", "(", "one_hot_x", ".", "float", "(", ")", ")", "# (B, L, K)", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "normalize_input", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "L", ",", "1", ")", "\n", "x", "=", "self", ".", "input_embedding", "(", "x", ")", "# (B, L, K)", "\n", "\n", "", "x", "=", "self", ".", "pos_embed", "(", "x", ")", "\n", "\n", "for", "encoder_layer", "in", "self", ".", "encoder_layers", ":", "\n", "            ", "x", "=", "encoder_layer", "(", "x", ",", "temb", ")", "\n", "\n", "# x (B, L, K)", "\n", "", "for", "resid_layer", "in", "self", ".", "output_resid_layers", ":", "\n", "            ", "x", "=", "resid_layer", "(", "x", ",", "temb", ")", "\n", "\n", "", "x", "=", "self", ".", "output_linear", "(", "x", ")", "# (B, L, S)", "\n", "\n", "x", "=", "x", "+", "one_hot_x", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.networks.TransformerEncoder.normalize_input": [[590, 594], ["None"], "methods", ["None"], ["", "def", "normalize_input", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "/", "self", ".", "S", "# (0, 1)", "\n", "x", "=", "x", "*", "2", "-", "1", "# (-1, 1)", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.networks.ResidualMLP.__init__": [[596, 639], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "networks.ResidualMLP.layers1.append", "networks.ResidualMLP.layers2.append", "networks.ResidualMLP.norm_layers.append", "networks.ResidualMLP.temb_layers.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.losses.losses.ConditionalAux.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_layers", ",", "d_model", ",", "hidden_dim", ",", "D", ",", "S", ",", "\n", "time_scale_factor", ",", "temb_dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "time_scale_factor", "=", "time_scale_factor", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "S", "=", "S", "\n", "self", ".", "temb_dim", "=", "temb_dim", "\n", "\n", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "input_layer", "=", "nn", ".", "Linear", "(", "D", ",", "d_model", ")", "\n", "\n", "self", ".", "layers1", "=", "[", "]", "\n", "self", ".", "layers2", "=", "[", "]", "\n", "self", ".", "norm_layers", "=", "[", "]", "\n", "self", ".", "temb_layers", "=", "[", "]", "\n", "for", "n", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "self", ".", "layers1", ".", "append", "(", "\n", "nn", ".", "Linear", "(", "d_model", ",", "hidden_dim", ")", "\n", ")", "\n", "self", ".", "layers2", ".", "append", "(", "\n", "nn", ".", "Linear", "(", "hidden_dim", ",", "d_model", ")", "\n", ")", "\n", "self", ".", "norm_layers", ".", "append", "(", "\n", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", ")", "\n", "self", ".", "temb_layers", ".", "append", "(", "\n", "nn", ".", "Linear", "(", "4", "*", "temb_dim", ",", "2", "*", "d_model", ")", "\n", ")", "\n", "\n", "", "self", ".", "layers1", "=", "nn", ".", "ModuleList", "(", "self", ".", "layers1", ")", "\n", "self", ".", "layers2", "=", "nn", ".", "ModuleList", "(", "self", ".", "layers2", ")", "\n", "self", ".", "norm_layers", "=", "nn", ".", "ModuleList", "(", "self", ".", "norm_layers", ")", "\n", "self", ".", "temb_layers", "=", "nn", ".", "ModuleList", "(", "self", ".", "temb_layers", ")", "\n", "\n", "self", ".", "output_layer", "=", "nn", ".", "Linear", "(", "d_model", ",", "D", "*", "S", ")", "\n", "\n", "self", ".", "temb_net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "temb_dim", ",", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_dim", ",", "4", "*", "temb_dim", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.networks.ResidualMLP.forward": [[641, 672], ["networks.ResidualMLP.temb_net", "torch.functional.one_hot", "torch.functional.one_hot", "torch.functional.one_hot", "networks.ResidualMLP.normalize_input", "networks.ResidualMLP.input_layer", "range", "networks.ResidualMLP.output_layer", "h.reshape.reshape.reshape", "lib.transformer_timestep_embedding", "networks.ResidualMLP.activation"], "methods", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.networks.ResidualMLP.normalize_input", "home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.network_utils.transformer_timestep_embedding"], ["", "def", "forward", "(", "self", ",", "\n", "x", ":", "TensorType", "[", "\"B\"", ",", "\"D\"", "]", ",", "\n", "times", ":", "TensorType", "[", "\"B\"", "]", "\n", ")", ":", "\n", "        ", "B", ",", "D", "=", "x", ".", "shape", "\n", "S", "=", "self", ".", "S", "\n", "\n", "temb", "=", "self", ".", "temb_net", "(", "\n", "network_utils", ".", "transformer_timestep_embedding", "(", "\n", "times", "*", "self", ".", "time_scale_factor", ",", "self", ".", "temb_dim", "\n", ")", "\n", ")", "\n", "\n", "one_hot_x", "=", "nn", ".", "functional", ".", "one_hot", "(", "x", ",", "num_classes", "=", "self", ".", "S", ")", "# (B, D, S)", "\n", "\n", "h", "=", "self", ".", "normalize_input", "(", "x", ")", "\n", "\n", "h", "=", "self", ".", "input_layer", "(", "h", ")", "# (B, d_model)", "\n", "\n", "for", "n", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "h", "=", "self", ".", "norm_layers", "[", "n", "]", "(", "h", "+", "self", ".", "layers2", "[", "n", "]", "(", "self", ".", "activation", "(", "self", ".", "layers1", "[", "n", "]", "(", "h", ")", ")", ")", ")", "\n", "film_params", "=", "self", ".", "temb_layers", "[", "n", "]", "(", "temb", ")", "\n", "h", "=", "film_params", "[", ":", ",", "0", ":", "self", ".", "d_model", "]", "*", "h", "+", "film_params", "[", ":", ",", "self", ".", "d_model", ":", "]", "\n", "\n", "", "h", "=", "self", ".", "output_layer", "(", "h", ")", "# (B, D*S)", "\n", "\n", "h", "=", "h", ".", "reshape", "(", "B", ",", "D", ",", "S", ")", "\n", "\n", "logits", "=", "h", "+", "one_hot_x", "\n", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.networks.ResidualMLP.normalize_input": [[673, 677], ["None"], "methods", ["None"], ["", "def", "normalize_input", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "/", "self", ".", "S", "# (0, 1)", "\n", "x", "=", "x", "*", "2", "-", "1", "# (-1, 1)", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.networks.variance_scaling": [[13, 45], ["networks.variance_scaling._compute_fans"], "function", ["None"], ["def", "variance_scaling", "(", "scale", ",", "mode", ",", "distribution", ",", "\n", "in_axis", "=", "1", ",", "out_axis", "=", "0", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "\n", "device", "=", "'cpu'", ")", ":", "\n", "  ", "\"\"\"Ported from JAX. \"\"\"", "\n", "\n", "def", "_compute_fans", "(", "shape", ",", "in_axis", "=", "1", ",", "out_axis", "=", "0", ")", ":", "\n", "    ", "receptive_field_size", "=", "np", ".", "prod", "(", "shape", ")", "/", "shape", "[", "in_axis", "]", "/", "shape", "[", "out_axis", "]", "\n", "fan_in", "=", "shape", "[", "in_axis", "]", "*", "receptive_field_size", "\n", "fan_out", "=", "shape", "[", "out_axis", "]", "*", "receptive_field_size", "\n", "return", "fan_in", ",", "fan_out", "\n", "\n", "", "def", "init", "(", "shape", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", ":", "\n", "    ", "fan_in", ",", "fan_out", "=", "_compute_fans", "(", "shape", ",", "in_axis", ",", "out_axis", ")", "\n", "if", "mode", "==", "\"fan_in\"", ":", "\n", "      ", "denominator", "=", "fan_in", "\n", "", "elif", "mode", "==", "\"fan_out\"", ":", "\n", "      ", "denominator", "=", "fan_out", "\n", "", "elif", "mode", "==", "\"fan_avg\"", ":", "\n", "      ", "denominator", "=", "(", "fan_in", "+", "fan_out", ")", "/", "2", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "\"invalid mode for variance scaling initializer: {}\"", ".", "format", "(", "mode", ")", ")", "\n", "", "variance", "=", "scale", "/", "denominator", "\n", "if", "distribution", "==", "\"normal\"", ":", "\n", "      ", "return", "torch", ".", "randn", "(", "*", "shape", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "*", "np", ".", "sqrt", "(", "variance", ")", "\n", "", "elif", "distribution", "==", "\"uniform\"", ":", "\n", "      ", "return", "(", "torch", ".", "rand", "(", "*", "shape", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "*", "2.", "-", "1.", ")", "*", "np", ".", "sqrt", "(", "3", "*", "variance", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "\"invalid distribution for variance scaling initializer\"", ")", "\n", "\n", "", "", "return", "init", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.networks.default_init": [[47, 51], ["networks.variance_scaling"], "function", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.networks.variance_scaling"], ["", "def", "default_init", "(", "scale", "=", "1.", ")", ":", "\n", "  ", "\"\"\"The same initialization used in DDPM.\"\"\"", "\n", "scale", "=", "1e-10", "if", "scale", "==", "0", "else", "scale", "\n", "return", "variance_scaling", "(", "scale", ",", "'fan_avg'", ",", "'uniform'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.networks.network_utils.transformer_timestep_embedding": [[7, 22], ["torch.exp", "torch.exp", "torch.cat", "torch.cat", "len", "math.log", "torch.pad", "torch.arange", "torch.arange", "timesteps.float", "torch.sin", "torch.sin", "torch.cos", "torch.cos"], "function", ["None"], ["def", "transformer_timestep_embedding", "(", "timesteps", ",", "embedding_dim", ",", "max_positions", "=", "10000", ")", ":", "\n", "  ", "assert", "len", "(", "timesteps", ".", "shape", ")", "==", "1", "# and timesteps.dtype == tf.int32", "\n", "half_dim", "=", "embedding_dim", "//", "2", "\n", "# magic number 10000 is from transformers", "\n", "emb", "=", "math", ".", "log", "(", "max_positions", ")", "/", "(", "half_dim", "-", "1", ")", "\n", "# emb = math.log(2.) / (half_dim - 1)", "\n", "emb", "=", "torch", ".", "exp", "(", "torch", ".", "arange", "(", "half_dim", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "timesteps", ".", "device", ")", "*", "-", "emb", ")", "\n", "# emb = tf.range(num_embeddings, dtype=jnp.float32)[:, None] * emb[None, :]", "\n", "# emb = tf.cast(timesteps, dtype=jnp.float32)[:, None] * emb[None, :]", "\n", "emb", "=", "timesteps", ".", "float", "(", ")", "[", ":", ",", "None", "]", "*", "emb", "[", "None", ",", ":", "]", "\n", "emb", "=", "torch", ".", "cat", "(", "[", "torch", ".", "sin", "(", "emb", ")", ",", "torch", ".", "cos", "(", "emb", ")", "]", ",", "dim", "=", "1", ")", "\n", "if", "embedding_dim", "%", "2", "==", "1", ":", "# zero pad", "\n", "    ", "emb", "=", "F", ".", "pad", "(", "emb", ",", "(", "0", ",", "1", ")", ",", "mode", "=", "'constant'", ")", "\n", "", "assert", "emb", ".", "shape", "==", "(", "timesteps", ".", "shape", "[", "0", "]", ",", "embedding_dim", ")", "\n", "return", "emb", "", "", ""]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.losses.losses_utils.register_loss": [[3, 9], ["ValueError"], "function", ["None"], ["def", "register_loss", "(", "cls", ")", ":", "\n", "    ", "name", "=", "cls", ".", "__name__", "\n", "if", "name", "in", "_LOSSES", ":", "\n", "        ", "raise", "ValueError", "(", "f'{name} is already registered!'", ")", "\n", "", "_LOSSES", "[", "name", "]", "=", "cls", "\n", "return", "cls", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.losses.losses_utils.get_loss": [[10, 12], ["None"], "function", ["None"], ["", "def", "get_loss", "(", "cfg", ")", ":", "\n", "    ", "return", "_LOSSES", "[", "cfg", ".", "loss", ".", "name", "]", "(", "cfg", ")", "", "", ""]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.losses.losses.GenericAux.__init__": [[13, 20], ["torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "ratio_eps", "=", "cfg", ".", "loss", ".", "eps_ratio", "\n", "self", ".", "nll_weight", "=", "cfg", ".", "loss", ".", "nll_weight", "\n", "self", ".", "min_time", "=", "cfg", ".", "loss", ".", "min_time", "\n", "self", ".", "one_forward_pass", "=", "cfg", ".", "loss", ".", "one_forward_pass", "\n", "self", ".", "cross_ent", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.losses.losses.GenericAux.calc_loss": [[23, 247], ["model.transition", "model.rate", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical.sample().view", "torch.distributions.categorical.Categorical.sample().view", "torch.distributions.categorical.Categorical.sample().view", "torch.distributions.categorical.Categorical.sample().view", "rate_vals_square.view.view.view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical.sample", "torch.distributions.categorical.Categorical.sample", "torch.distributions.categorical.Categorical.sample", "torch.distributions.categorical.Categorical.sample", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical.sample", "torch.distributions.categorical.Categorical.sample", "torch.distributions.categorical.Categorical.sample", "torch.distributions.categorical.Categorical.sample", "torch.distributions.categorical.Categorical.sample().view.clone", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "model.transition.view", "rate[].view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "qt0[].view", "model.transition.view", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "rate[].view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "rate_row_sums[].view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "rate[].view", "qt0[].view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "writer.add_scalar", "writer.add_scalar", "torch.permute", "torch.permute", "torch.permute", "torch.permute", "torch.permute", "torch.permute", "torch.permute", "torch.permute", "torch.permute", "torch.permute", "torch.permute", "torch.permute", "torch.permute", "torch.permute", "torch.permute", "torch.permute", "losses.GenericAux.cross_ent", "len", "minibatch.view.view.view", "model", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "model", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "qt0[].view", "model.transition.view.transpose", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "qt0[].view", "rate[].view", "Z_addition.view", "qt0[].view", "torch.mean.detach", "torch.mean.detach", "torch.mean.detach", "torch.mean.detach", "torch.mean.detach", "torch.mean.detach", "torch.mean.detach", "torch.mean.detach", "minibatch.view.view.long", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.distributions.categorical.Categorical.sample", "torch.distributions.categorical.Categorical.sample", "torch.distributions.categorical.Categorical.sample", "torch.distributions.categorical.Categorical.sample", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "model", "torch.sum.view", "torch.sum.view", "torch.sum.view", "torch.sum.view", "Z_subtraction.view", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "minibatch.view.view.flatten().long", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.distributions.categorical.Categorical.sample().view.long().flatten", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.distributions.categorical.Categorical.sample().view.long().flatten", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "reg_x.long().flatten", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "x_t_cat.sample().view.clone.long().flatten", "qt0_sig_norm_denom.view", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "minibatch.view.view.long().flatten", "x_t_cat.sample().view.clone.long().flatten", "outer_qt0_denom_sig.view", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "minibatch.view.view.flatten", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.distributions.categorical.Categorical.sample().view.long", "torch.distributions.categorical.Categorical.sample().view.long", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "reg_x.long", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "reg_x.long().flatten", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "minibatch.view.view.long().flatten().repeat_interleave", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "x_t_cat.sample().view.clone.long", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "x_t_cat.sample().view.clone.long().flatten().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "x_t_cat.sample().view.clone.long().flatten", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "x_t_cat.sample().view.clone.long().flatten().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "minibatch.view.view.long().flatten().repeat_interleave", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "reg_x.long().flatten", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "minibatch.view.view.long", "x_t_cat.sample().view.clone.long", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "x_t_cat.sample().view.clone.long().flatten", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "minibatch.view.view.long().flatten", "x_t_cat.sample().view.clone.long().flatten", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "reg_x.long", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "minibatch.view.view.long().flatten", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "x_t_cat.sample().view.clone.long().flatten", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "x_t_cat.sample().view.clone.long", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "x_t_cat.sample().view.clone.long().flatten", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "minibatch.view.view.long().flatten", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "reg_x.long", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "x_t_cat.sample().view.clone.long", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "minibatch.view.view.long", "x_t_cat.sample().view.clone.long", "minibatch.view.view.long", "x_t_cat.sample().view.clone.long", "x_t_cat.sample().view.clone.long", "minibatch.view.view.long"], "methods", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.GaussianTargetRate.transition", "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.GaussianTargetRate.rate", "home.repos.pwc.inspect_result.andrew-cr_tauldr.sampling.sampling.ConditionalPCTauLeaping.sample", "home.repos.pwc.inspect_result.andrew-cr_tauldr.sampling.sampling.ConditionalPCTauLeaping.sample", "home.repos.pwc.inspect_result.andrew-cr_tauldr.sampling.sampling.ConditionalPCTauLeaping.sample", "home.repos.pwc.inspect_result.andrew-cr_tauldr.sampling.sampling.ConditionalPCTauLeaping.sample", "home.repos.pwc.inspect_result.andrew-cr_tauldr.sampling.sampling.ConditionalPCTauLeaping.sample", "home.repos.pwc.inspect_result.andrew-cr_tauldr.sampling.sampling.ConditionalPCTauLeaping.sample", "home.repos.pwc.inspect_result.andrew-cr_tauldr.sampling.sampling.ConditionalPCTauLeaping.sample", "home.repos.pwc.inspect_result.andrew-cr_tauldr.sampling.sampling.ConditionalPCTauLeaping.sample", "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.DummyWriter.add_scalar", "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.DummyWriter.add_scalar", "home.repos.pwc.inspect_result.andrew-cr_tauldr.sampling.sampling.ConditionalPCTauLeaping.sample", "home.repos.pwc.inspect_result.andrew-cr_tauldr.sampling.sampling.ConditionalPCTauLeaping.sample", "home.repos.pwc.inspect_result.andrew-cr_tauldr.sampling.sampling.ConditionalPCTauLeaping.sample", "home.repos.pwc.inspect_result.andrew-cr_tauldr.sampling.sampling.ConditionalPCTauLeaping.sample"], ["", "def", "calc_loss", "(", "self", ",", "minibatch", ",", "state", ",", "writer", ")", ":", "\n", "        ", "model", "=", "state", "[", "'model'", "]", "\n", "S", "=", "self", ".", "cfg", ".", "data", ".", "S", "\n", "if", "len", "(", "minibatch", ".", "shape", ")", "==", "4", ":", "\n", "            ", "B", ",", "C", ",", "H", ",", "W", "=", "minibatch", ".", "shape", "\n", "minibatch", "=", "minibatch", ".", "view", "(", "B", ",", "C", "*", "H", "*", "W", ")", "\n", "", "B", ",", "D", "=", "minibatch", ".", "shape", "\n", "device", "=", "model", ".", "device", "\n", "\n", "ts", "=", "torch", ".", "rand", "(", "(", "B", ",", ")", ",", "device", "=", "device", ")", "*", "(", "1.0", "-", "self", ".", "min_time", ")", "+", "self", ".", "min_time", "\n", "\n", "qt0", "=", "model", ".", "transition", "(", "ts", ")", "# (B, S, S)", "\n", "\n", "rate", "=", "model", ".", "rate", "(", "ts", ")", "# (B, S, S)", "\n", "\n", "\n", "# --------------- Sampling x_t, x_tilde --------------------", "\n", "\n", "qt0_rows_reg", "=", "qt0", "[", "\n", "torch", ".", "arange", "(", "B", ",", "device", "=", "device", ")", ".", "repeat_interleave", "(", "D", ")", ",", "\n", "minibatch", ".", "flatten", "(", ")", ".", "long", "(", ")", ",", "\n", ":", "\n", "]", "# (B*D, S)", "\n", "\n", "x_t_cat", "=", "torch", ".", "distributions", ".", "categorical", ".", "Categorical", "(", "qt0_rows_reg", ")", "\n", "x_t", "=", "x_t_cat", ".", "sample", "(", ")", ".", "view", "(", "B", ",", "D", ")", "\n", "\n", "rate_vals_square", "=", "rate", "[", "\n", "torch", ".", "arange", "(", "B", ",", "device", "=", "device", ")", ".", "repeat_interleave", "(", "D", ")", ",", "\n", "x_t", ".", "long", "(", ")", ".", "flatten", "(", ")", ",", "\n", ":", "\n", "]", "# (B*D, S)", "\n", "rate_vals_square", "[", "\n", "torch", ".", "arange", "(", "B", "*", "D", ",", "device", "=", "device", ")", ",", "\n", "x_t", ".", "long", "(", ")", ".", "flatten", "(", ")", "\n", "]", "=", "0.0", "# 0 the diagonals", "\n", "rate_vals_square", "=", "rate_vals_square", ".", "view", "(", "B", ",", "D", ",", "S", ")", "\n", "rate_vals_square_dimsum", "=", "torch", ".", "sum", "(", "rate_vals_square", ",", "dim", "=", "2", ")", ".", "view", "(", "B", ",", "D", ")", "\n", "square_dimcat", "=", "torch", ".", "distributions", ".", "categorical", ".", "Categorical", "(", "\n", "rate_vals_square_dimsum", "\n", ")", "\n", "square_dims", "=", "square_dimcat", ".", "sample", "(", ")", "# (B,) taking values in [0, D)", "\n", "rate_new_val_probs", "=", "rate_vals_square", "[", "\n", "torch", ".", "arange", "(", "B", ",", "device", "=", "device", ")", ",", "\n", "square_dims", ",", "\n", ":", "\n", "]", "# (B, S)", "\n", "square_newvalcat", "=", "torch", ".", "distributions", ".", "categorical", ".", "Categorical", "(", "\n", "rate_new_val_probs", "\n", ")", "\n", "square_newval_samples", "=", "square_newvalcat", ".", "sample", "(", ")", "# (B, ) taking values in [0, S)", "\n", "x_tilde", "=", "x_t", ".", "clone", "(", ")", "\n", "x_tilde", "[", "\n", "torch", ".", "arange", "(", "B", ",", "device", "=", "device", ")", ",", "\n", "square_dims", "\n", "]", "=", "square_newval_samples", "\n", "# x_tilde (B, D)", "\n", "\n", "\n", "# ---------- First term of ELBO (regularization) ---------------", "\n", "\n", "\n", "if", "self", ".", "one_forward_pass", ":", "\n", "            ", "x_logits", "=", "model", "(", "x_tilde", ",", "ts", ")", "# (B, D, S)", "\n", "p0t_reg", "=", "F", ".", "softmax", "(", "x_logits", ",", "dim", "=", "2", ")", "# (B, D, S)", "\n", "reg_x", "=", "x_tilde", "\n", "", "else", ":", "\n", "            ", "x_logits", "=", "model", "(", "x_t", ",", "ts", ")", "# (B, D, S)", "\n", "p0t_reg", "=", "F", ".", "softmax", "(", "x_logits", ",", "dim", "=", "2", ")", "# (B, D, S)", "\n", "reg_x", "=", "x_t", "\n", "\n", "# For (B, D, S, S) first S is x_0 second S is x'", "\n", "\n", "", "mask_reg", "=", "torch", ".", "ones", "(", "(", "B", ",", "D", ",", "S", ")", ",", "device", "=", "device", ")", "\n", "mask_reg", "[", "\n", "torch", ".", "arange", "(", "B", ",", "device", "=", "device", ")", ".", "repeat_interleave", "(", "D", ")", ",", "\n", "torch", ".", "arange", "(", "D", ",", "device", "=", "device", ")", ".", "repeat", "(", "B", ")", ",", "\n", "reg_x", ".", "long", "(", ")", ".", "flatten", "(", ")", "\n", "]", "=", "0.0", "\n", "\n", "qt0_numer_reg", "=", "qt0", ".", "view", "(", "B", ",", "S", ",", "S", ")", "\n", "\n", "qt0_denom_reg", "=", "qt0", "[", "\n", "torch", ".", "arange", "(", "B", ",", "device", "=", "device", ")", ".", "repeat_interleave", "(", "D", ")", ",", "\n", ":", ",", "\n", "reg_x", ".", "long", "(", ")", ".", "flatten", "(", ")", "\n", "]", ".", "view", "(", "B", ",", "D", ",", "S", ")", "+", "self", ".", "ratio_eps", "\n", "\n", "rate_vals_reg", "=", "rate", "[", "\n", "torch", ".", "arange", "(", "B", ",", "device", "=", "device", ")", ".", "repeat_interleave", "(", "D", ")", ",", "\n", ":", ",", "\n", "reg_x", ".", "long", "(", ")", ".", "flatten", "(", ")", "\n", "]", ".", "view", "(", "B", ",", "D", ",", "S", ")", "\n", "\n", "reg_tmp", "=", "(", "mask_reg", "*", "rate_vals_reg", ")", "@", "qt0_numer_reg", ".", "transpose", "(", "1", ",", "2", ")", "# (B, D, S)", "\n", "\n", "reg_term", "=", "torch", ".", "sum", "(", "\n", "(", "p0t_reg", "/", "qt0_denom_reg", ")", "*", "reg_tmp", ",", "\n", "dim", "=", "(", "1", ",", "2", ")", "\n", ")", "\n", "\n", "\n", "\n", "# ----- second term of continuous ELBO (signal term) ------------", "\n", "\n", "\n", "if", "self", ".", "one_forward_pass", ":", "\n", "            ", "p0t_sig", "=", "p0t_reg", "\n", "", "else", ":", "\n", "            ", "p0t_sig", "=", "F", ".", "softmax", "(", "model", "(", "x_tilde", ",", "ts", ")", ",", "dim", "=", "2", ")", "# (B, D, S)", "\n", "\n", "# When we have B,D,S,S first S is x_0, second is x", "\n", "\n", "", "outer_qt0_numer_sig", "=", "qt0", "[", "\n", "torch", ".", "arange", "(", "B", ",", "device", "=", "device", ")", ".", "repeat_interleave", "(", "D", "*", "S", ")", ",", "\n", "minibatch", ".", "long", "(", ")", ".", "flatten", "(", ")", ".", "repeat_interleave", "(", "S", ")", ",", "\n", "torch", ".", "arange", "(", "S", ",", "device", "=", "device", ")", ".", "repeat", "(", "B", "*", "D", ")", "\n", "]", ".", "view", "(", "B", ",", "D", ",", "S", ")", "\n", "\n", "outer_qt0_denom_sig", "=", "qt0", "[", "\n", "torch", ".", "arange", "(", "B", ",", "device", "=", "device", ")", ".", "repeat_interleave", "(", "D", ")", ",", "\n", "minibatch", ".", "long", "(", ")", ".", "flatten", "(", ")", ",", "\n", "x_tilde", ".", "long", "(", ")", ".", "flatten", "(", ")", "\n", "]", "+", "self", ".", "ratio_eps", "# (B, D)", "\n", "\n", "\n", "\n", "qt0_numer_sig", "=", "qt0", ".", "view", "(", "B", ",", "S", ",", "S", ")", "# first S is x_0, second S is x", "\n", "\n", "\n", "qt0_denom_sig", "=", "qt0", "[", "\n", "torch", ".", "arange", "(", "B", ",", "device", "=", "device", ")", ".", "repeat_interleave", "(", "D", ")", ",", "\n", ":", ",", "\n", "x_tilde", ".", "long", "(", ")", ".", "flatten", "(", ")", "\n", "]", ".", "view", "(", "B", ",", "D", ",", "S", ")", "+", "self", ".", "ratio_eps", "\n", "\n", "inner_log_sig", "=", "torch", ".", "log", "(", "\n", "(", "p0t_sig", "/", "qt0_denom_sig", ")", "@", "qt0_numer_sig", "+", "self", ".", "ratio_eps", "\n", ")", "# (B, D, S)", "\n", "\n", "\n", "x_tilde_mask", "=", "torch", ".", "ones", "(", "(", "B", ",", "D", ",", "S", ")", ",", "device", "=", "device", ")", "\n", "x_tilde_mask", "[", "\n", "torch", ".", "arange", "(", "B", ",", "device", "=", "device", ")", ".", "repeat_interleave", "(", "D", ")", ",", "\n", "torch", ".", "arange", "(", "D", ",", "device", "=", "device", ")", ".", "repeat", "(", "B", ")", ",", "\n", "x_tilde", ".", "long", "(", ")", ".", "flatten", "(", ")", "\n", "]", "=", "0.0", "\n", "\n", "outer_rate_sig", "=", "rate", "[", "\n", "torch", ".", "arange", "(", "B", ",", "device", "=", "device", ")", ".", "repeat_interleave", "(", "D", "*", "S", ")", ",", "\n", "torch", ".", "arange", "(", "S", ",", "device", "=", "device", ")", ".", "repeat", "(", "B", "*", "D", ")", ",", "\n", "x_tilde", ".", "long", "(", ")", ".", "flatten", "(", ")", ".", "repeat_interleave", "(", "S", ")", "\n", "]", ".", "view", "(", "B", ",", "D", ",", "S", ")", "\n", "\n", "outer_sum_sig", "=", "torch", ".", "sum", "(", "\n", "x_tilde_mask", "*", "outer_rate_sig", "*", "(", "outer_qt0_numer_sig", "/", "outer_qt0_denom_sig", ".", "view", "(", "B", ",", "D", ",", "1", ")", ")", "*", "inner_log_sig", ",", "\n", "dim", "=", "(", "1", ",", "2", ")", "\n", ")", "\n", "\n", "# now getting the 2nd term normalization", "\n", "\n", "rate_row_sums", "=", "-", "rate", "[", "\n", "torch", ".", "arange", "(", "B", ",", "device", "=", "device", ")", ".", "repeat_interleave", "(", "S", ")", ",", "\n", "torch", ".", "arange", "(", "S", ",", "device", "=", "device", ")", ".", "repeat", "(", "B", ")", ",", "\n", "torch", ".", "arange", "(", "S", ",", "device", "=", "device", ")", ".", "repeat", "(", "B", ")", "\n", "]", ".", "view", "(", "B", ",", "S", ")", "\n", "\n", "base_Z_tmp", "=", "rate_row_sums", "[", "\n", "torch", ".", "arange", "(", "B", ",", "device", "=", "device", ")", ".", "repeat_interleave", "(", "D", ")", ",", "\n", "x_tilde", ".", "long", "(", ")", ".", "flatten", "(", ")", "\n", "]", ".", "view", "(", "B", ",", "D", ")", "\n", "base_Z", "=", "torch", ".", "sum", "(", "base_Z_tmp", ",", "dim", "=", "1", ")", "\n", "\n", "Z_subtraction", "=", "base_Z_tmp", "# (B,D)", "\n", "Z_addition", "=", "rate_row_sums", "\n", "\n", "Z_sig_norm", "=", "base_Z", ".", "view", "(", "B", ",", "1", ",", "1", ")", "-", "Z_subtraction", ".", "view", "(", "B", ",", "D", ",", "1", ")", "+", "Z_addition", ".", "view", "(", "B", ",", "1", ",", "S", ")", "\n", "\n", "rate_sig_norm", "=", "rate", "[", "\n", "torch", ".", "arange", "(", "B", ",", "device", "=", "device", ")", ".", "repeat_interleave", "(", "D", "*", "S", ")", ",", "\n", "torch", ".", "arange", "(", "S", ",", "device", "=", "device", ")", ".", "repeat", "(", "B", "*", "D", ")", ",", "\n", "x_tilde", ".", "long", "(", ")", ".", "flatten", "(", ")", ".", "repeat_interleave", "(", "S", ")", "\n", "]", ".", "view", "(", "B", ",", "D", ",", "S", ")", "\n", "\n", "# qt0 is (B,S,S)", "\n", "qt0_sig_norm_numer", "=", "qt0", "[", "\n", "torch", ".", "arange", "(", "B", ",", "device", "=", "device", ")", ".", "repeat_interleave", "(", "D", "*", "S", ")", ",", "\n", "minibatch", ".", "long", "(", ")", ".", "flatten", "(", ")", ".", "repeat_interleave", "(", "S", ")", ",", "\n", "torch", ".", "arange", "(", "S", ",", "device", "=", "device", ")", ".", "repeat", "(", "B", "*", "D", ")", "\n", "]", ".", "view", "(", "B", ",", "D", ",", "S", ")", "\n", "\n", "qt0_sig_norm_denom", "=", "qt0", "[", "\n", "torch", ".", "arange", "(", "B", ",", "device", "=", "device", ")", ".", "repeat_interleave", "(", "D", ")", ",", "\n", "minibatch", ".", "long", "(", ")", ".", "flatten", "(", ")", ",", "\n", "x_tilde", ".", "long", "(", ")", ".", "flatten", "(", ")", "\n", "]", ".", "view", "(", "B", ",", "D", ")", "+", "self", ".", "ratio_eps", "\n", "\n", "\n", "\n", "sig_norm", "=", "torch", ".", "sum", "(", "\n", "(", "rate_sig_norm", "*", "qt0_sig_norm_numer", "*", "x_tilde_mask", ")", "/", "(", "Z_sig_norm", "*", "qt0_sig_norm_denom", ".", "view", "(", "B", ",", "D", ",", "1", ")", ")", ",", "\n", "dim", "=", "(", "1", ",", "2", ")", "\n", ")", "\n", "\n", "sig_mean", "=", "torch", ".", "mean", "(", "-", "outer_sum_sig", "/", "sig_norm", ")", "\n", "\n", "reg_mean", "=", "torch", ".", "mean", "(", "reg_term", ")", "\n", "\n", "\n", "writer", ".", "add_scalar", "(", "'sig'", ",", "sig_mean", ".", "detach", "(", ")", ",", "state", "[", "'n_iter'", "]", ")", "\n", "writer", ".", "add_scalar", "(", "'reg'", ",", "reg_mean", ".", "detach", "(", ")", ",", "state", "[", "'n_iter'", "]", ")", "\n", "\n", "\n", "neg_elbo", "=", "sig_mean", "+", "reg_mean", "\n", "\n", "\n", "\n", "perm_x_logits", "=", "torch", ".", "permute", "(", "x_logits", ",", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "\n", "nll", "=", "self", ".", "cross_ent", "(", "perm_x_logits", ",", "minibatch", ".", "long", "(", ")", ")", "\n", "\n", "return", "neg_elbo", "+", "self", ".", "nll_weight", "*", "nll", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.losses.losses.ConditionalAux.__init__": [[252, 260], ["torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "ratio_eps", "=", "cfg", ".", "loss", ".", "eps_ratio", "\n", "self", ".", "nll_weight", "=", "cfg", ".", "loss", ".", "nll_weight", "\n", "self", ".", "min_time", "=", "cfg", ".", "loss", ".", "min_time", "\n", "self", ".", "one_forward_pass", "=", "cfg", ".", "loss", ".", "one_forward_pass", "\n", "self", ".", "condition_dim", "=", "cfg", ".", "loss", ".", "condition_dim", "\n", "self", ".", "cross_ent", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.losses.losses.ConditionalAux.calc_loss": [[263, 494], ["model.transition", "model.rate", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical.sample().view", "torch.distributions.categorical.Categorical.sample().view", "torch.distributions.categorical.Categorical.sample().view", "torch.distributions.categorical.Categorical.sample().view", "rate_vals_square.view.view.view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical.sample", "torch.distributions.categorical.Categorical.sample", "torch.distributions.categorical.Categorical.sample", "torch.distributions.categorical.Categorical.sample", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical.sample", "torch.distributions.categorical.Categorical.sample", "torch.distributions.categorical.Categorical.sample", "torch.distributions.categorical.Categorical.sample", "torch.distributions.categorical.Categorical.sample().view.clone", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "model.transition.view", "rate[].view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "qt0[].view", "model.transition.view", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "rate[].view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "rate_row_sums[].view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "rate[].view", "qt0[].view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "writer.add_scalar", "writer.add_scalar", "torch.permute", "torch.permute", "torch.permute", "torch.permute", "torch.permute", "torch.permute", "torch.permute", "torch.permute", "torch.permute", "torch.permute", "torch.permute", "torch.permute", "torch.permute", "torch.permute", "torch.permute", "torch.permute", "losses.ConditionalAux.cross_ent", "len", "minibatch.view.view.view", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "model", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "model", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "qt0[].view", "model.transition.view.transpose", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "model", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "qt0[].view", "rate[].view", "Z_addition.view", "qt0[].view", "torch.mean.detach", "torch.mean.detach", "torch.mean.detach", "torch.mean.detach", "torch.mean.detach", "torch.mean.detach", "torch.mean.detach", "torch.mean.detach", "data.long", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.distributions.categorical.Categorical.sample", "torch.distributions.categorical.Categorical.sample", "torch.distributions.categorical.Categorical.sample", "torch.distributions.categorical.Categorical.sample", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum.view", "torch.sum.view", "torch.sum.view", "torch.sum.view", "Z_subtraction.view", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "data.flatten().long", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.distributions.categorical.Categorical.sample().view.long().flatten", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.distributions.categorical.Categorical.sample().view.long().flatten", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "reg_x.long().flatten", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "x_t_cat.sample().view.clone.long().flatten", "qt0_sig_norm_denom.view", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "data.long().flatten", "x_t_cat.sample().view.clone.long().flatten", "outer_qt0_denom_sig.view", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "data.flatten", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.distributions.categorical.Categorical.sample().view.long", "torch.distributions.categorical.Categorical.sample().view.long", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "reg_x.long", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "reg_x.long().flatten", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "data.long().flatten().repeat_interleave", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "x_t_cat.sample().view.clone.long", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "x_t_cat.sample().view.clone.long().flatten().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "x_t_cat.sample().view.clone.long().flatten", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "x_t_cat.sample().view.clone.long().flatten().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "data.long().flatten().repeat_interleave", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "reg_x.long().flatten", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "data.long", "x_t_cat.sample().view.clone.long", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "x_t_cat.sample().view.clone.long().flatten", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "data.long().flatten", "x_t_cat.sample().view.clone.long().flatten", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "reg_x.long", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "data.long().flatten", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "x_t_cat.sample().view.clone.long().flatten", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "x_t_cat.sample().view.clone.long", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "x_t_cat.sample().view.clone.long().flatten", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "data.long().flatten", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "reg_x.long", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "x_t_cat.sample().view.clone.long", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "data.long", "x_t_cat.sample().view.clone.long", "data.long", "x_t_cat.sample().view.clone.long", "x_t_cat.sample().view.clone.long", "data.long"], "methods", ["home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.GaussianTargetRate.transition", "home.repos.pwc.inspect_result.andrew-cr_tauldr.models.models.GaussianTargetRate.rate", "home.repos.pwc.inspect_result.andrew-cr_tauldr.sampling.sampling.ConditionalPCTauLeaping.sample", "home.repos.pwc.inspect_result.andrew-cr_tauldr.sampling.sampling.ConditionalPCTauLeaping.sample", "home.repos.pwc.inspect_result.andrew-cr_tauldr.sampling.sampling.ConditionalPCTauLeaping.sample", "home.repos.pwc.inspect_result.andrew-cr_tauldr.sampling.sampling.ConditionalPCTauLeaping.sample", "home.repos.pwc.inspect_result.andrew-cr_tauldr.sampling.sampling.ConditionalPCTauLeaping.sample", "home.repos.pwc.inspect_result.andrew-cr_tauldr.sampling.sampling.ConditionalPCTauLeaping.sample", "home.repos.pwc.inspect_result.andrew-cr_tauldr.sampling.sampling.ConditionalPCTauLeaping.sample", "home.repos.pwc.inspect_result.andrew-cr_tauldr.sampling.sampling.ConditionalPCTauLeaping.sample", "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.DummyWriter.add_scalar", "home.repos.pwc.inspect_result.andrew-cr_tauldr.utils.bookkeeping.DummyWriter.add_scalar", "home.repos.pwc.inspect_result.andrew-cr_tauldr.sampling.sampling.ConditionalPCTauLeaping.sample", "home.repos.pwc.inspect_result.andrew-cr_tauldr.sampling.sampling.ConditionalPCTauLeaping.sample", "home.repos.pwc.inspect_result.andrew-cr_tauldr.sampling.sampling.ConditionalPCTauLeaping.sample", "home.repos.pwc.inspect_result.andrew-cr_tauldr.sampling.sampling.ConditionalPCTauLeaping.sample"], ["", "def", "calc_loss", "(", "self", ",", "minibatch", ",", "state", ",", "writer", ")", ":", "\n", "        ", "model", "=", "state", "[", "'model'", "]", "\n", "S", "=", "self", ".", "cfg", ".", "data", ".", "S", "\n", "if", "len", "(", "minibatch", ".", "shape", ")", "==", "4", ":", "\n", "            ", "B", ",", "C", ",", "H", ",", "W", "=", "minibatch", ".", "shape", "\n", "minibatch", "=", "minibatch", ".", "view", "(", "B", ",", "C", "*", "H", "*", "W", ")", "\n", "", "B", ",", "D", "=", "minibatch", ".", "shape", "\n", "device", "=", "model", ".", "device", "\n", "\n", "ts", "=", "torch", ".", "rand", "(", "(", "B", ",", ")", ",", "device", "=", "device", ")", "*", "(", "1.0", "-", "self", ".", "min_time", ")", "+", "self", ".", "min_time", "\n", "\n", "qt0", "=", "model", ".", "transition", "(", "ts", ")", "# (B, S, S)", "\n", "\n", "rate", "=", "model", ".", "rate", "(", "ts", ")", "# (B, S, S)", "\n", "\n", "conditioner", "=", "minibatch", "[", ":", ",", "0", ":", "self", ".", "condition_dim", "]", "\n", "data", "=", "minibatch", "[", ":", ",", "self", ".", "condition_dim", ":", "]", "\n", "d", "=", "data", ".", "shape", "[", "1", "]", "\n", "\n", "\n", "# --------------- Sampling x_t, x_tilde --------------------", "\n", "\n", "qt0_rows_reg", "=", "qt0", "[", "\n", "torch", ".", "arange", "(", "B", ",", "device", "=", "device", ")", ".", "repeat_interleave", "(", "d", ")", ",", "\n", "data", ".", "flatten", "(", ")", ".", "long", "(", ")", ",", "\n", ":", "\n", "]", "# (B*d, S)", "\n", "\n", "x_t_cat", "=", "torch", ".", "distributions", ".", "categorical", ".", "Categorical", "(", "qt0_rows_reg", ")", "\n", "x_t", "=", "x_t_cat", ".", "sample", "(", ")", ".", "view", "(", "B", ",", "d", ")", "\n", "\n", "rate_vals_square", "=", "rate", "[", "\n", "torch", ".", "arange", "(", "B", ",", "device", "=", "device", ")", ".", "repeat_interleave", "(", "d", ")", ",", "\n", "x_t", ".", "long", "(", ")", ".", "flatten", "(", ")", ",", "\n", ":", "\n", "]", "# (B*d, S)", "\n", "rate_vals_square", "[", "\n", "torch", ".", "arange", "(", "B", "*", "d", ",", "device", "=", "device", ")", ",", "\n", "x_t", ".", "long", "(", ")", ".", "flatten", "(", ")", "\n", "]", "=", "0.0", "# 0 the diagonals", "\n", "rate_vals_square", "=", "rate_vals_square", ".", "view", "(", "B", ",", "d", ",", "S", ")", "\n", "rate_vals_square_dimsum", "=", "torch", ".", "sum", "(", "rate_vals_square", ",", "dim", "=", "2", ")", ".", "view", "(", "B", ",", "d", ")", "\n", "square_dimcat", "=", "torch", ".", "distributions", ".", "categorical", ".", "Categorical", "(", "\n", "rate_vals_square_dimsum", "\n", ")", "\n", "square_dims", "=", "square_dimcat", ".", "sample", "(", ")", "# (B,) taking values in [0, d)", "\n", "rate_new_val_probs", "=", "rate_vals_square", "[", "\n", "torch", ".", "arange", "(", "B", ",", "device", "=", "device", ")", ",", "\n", "square_dims", ",", "\n", ":", "\n", "]", "# (B, S)", "\n", "square_newvalcat", "=", "torch", ".", "distributions", ".", "categorical", ".", "Categorical", "(", "\n", "rate_new_val_probs", "\n", ")", "\n", "square_newval_samples", "=", "square_newvalcat", ".", "sample", "(", ")", "# (B, ) taking values in [0, S)", "\n", "x_tilde", "=", "x_t", ".", "clone", "(", ")", "\n", "x_tilde", "[", "\n", "torch", ".", "arange", "(", "B", ",", "device", "=", "device", ")", ",", "\n", "square_dims", "\n", "]", "=", "square_newval_samples", "\n", "# x_tilde (B, d)", "\n", "\n", "\n", "# ---------- First term of ELBO (regularization) ---------------", "\n", "\n", "\n", "if", "self", ".", "one_forward_pass", ":", "\n", "            ", "model_input", "=", "torch", ".", "concat", "(", "(", "conditioner", ",", "x_tilde", ")", ",", "dim", "=", "1", ")", "\n", "x_logits_full", "=", "model", "(", "model_input", ",", "ts", ")", "# (B, D, S)", "\n", "x_logits", "=", "x_logits_full", "[", ":", ",", "self", ".", "condition_dim", ":", ",", ":", "]", "# (B, d, S)", "\n", "p0t_reg", "=", "F", ".", "softmax", "(", "x_logits", ",", "dim", "=", "2", ")", "# (B, d, S)", "\n", "reg_x", "=", "x_tilde", "\n", "", "else", ":", "\n", "            ", "model_input", "=", "torch", ".", "concat", "(", "(", "conditioner", ",", "x_t", ")", ",", "dim", "=", "1", ")", "\n", "x_logits_full", "=", "model", "(", "model_input", ",", "ts", ")", "# (B, D, S)", "\n", "x_logits", "=", "x_logits_full", "[", ":", ",", "self", ".", "condition_dim", ":", ",", ":", "]", "# (B, d, S)", "\n", "p0t_reg", "=", "F", ".", "softmax", "(", "x_logits", ",", "dim", "=", "2", ")", "# (B, d, S)", "\n", "reg_x", "=", "x_t", "\n", "\n", "# For (B, d, S, S) first S is x_0 second S is x'", "\n", "\n", "", "mask_reg", "=", "torch", ".", "ones", "(", "(", "B", ",", "d", ",", "S", ")", ",", "device", "=", "device", ")", "\n", "mask_reg", "[", "\n", "torch", ".", "arange", "(", "B", ",", "device", "=", "device", ")", ".", "repeat_interleave", "(", "d", ")", ",", "\n", "torch", ".", "arange", "(", "d", ",", "device", "=", "device", ")", ".", "repeat", "(", "B", ")", ",", "\n", "reg_x", ".", "long", "(", ")", ".", "flatten", "(", ")", "\n", "]", "=", "0.0", "\n", "\n", "qt0_numer_reg", "=", "qt0", ".", "view", "(", "B", ",", "S", ",", "S", ")", "\n", "\n", "qt0_denom_reg", "=", "qt0", "[", "\n", "torch", ".", "arange", "(", "B", ",", "device", "=", "device", ")", ".", "repeat_interleave", "(", "d", ")", ",", "\n", ":", ",", "\n", "reg_x", ".", "long", "(", ")", ".", "flatten", "(", ")", "\n", "]", ".", "view", "(", "B", ",", "d", ",", "S", ")", "+", "self", ".", "ratio_eps", "\n", "\n", "rate_vals_reg", "=", "rate", "[", "\n", "torch", ".", "arange", "(", "B", ",", "device", "=", "device", ")", ".", "repeat_interleave", "(", "d", ")", ",", "\n", ":", ",", "\n", "reg_x", ".", "long", "(", ")", ".", "flatten", "(", ")", "\n", "]", ".", "view", "(", "B", ",", "d", ",", "S", ")", "\n", "\n", "reg_tmp", "=", "(", "mask_reg", "*", "rate_vals_reg", ")", "@", "qt0_numer_reg", ".", "transpose", "(", "1", ",", "2", ")", "# (B, d, S)", "\n", "\n", "reg_term", "=", "torch", ".", "sum", "(", "\n", "(", "p0t_reg", "/", "qt0_denom_reg", ")", "*", "reg_tmp", ",", "\n", "dim", "=", "(", "1", ",", "2", ")", "\n", ")", "\n", "\n", "\n", "\n", "# ----- second term of continuous ELBO (signal term) ------------", "\n", "\n", "\n", "if", "self", ".", "one_forward_pass", ":", "\n", "            ", "p0t_sig", "=", "p0t_reg", "\n", "", "else", ":", "\n", "            ", "model_input", "=", "torch", ".", "concat", "(", "(", "conditioner", ",", "x_tilde", ")", ",", "dim", "=", "1", ")", "\n", "x_logits_full", "=", "model", "(", "model_input", ",", "ts", ")", "# (B, d, S)", "\n", "x_logits", "=", "x_logits_full", "[", ":", ",", "self", ".", "condition_dim", ":", ",", ":", "]", "\n", "p0t_sig", "=", "F", ".", "softmax", "(", "x_logits", ",", "dim", "=", "2", ")", "# (B, d, S)", "\n", "\n", "# When we have B,D,S,S first S is x_0, second is x", "\n", "\n", "", "outer_qt0_numer_sig", "=", "qt0", "[", "\n", "torch", ".", "arange", "(", "B", ",", "device", "=", "device", ")", ".", "repeat_interleave", "(", "d", "*", "S", ")", ",", "\n", "data", ".", "long", "(", ")", ".", "flatten", "(", ")", ".", "repeat_interleave", "(", "S", ")", ",", "\n", "torch", ".", "arange", "(", "S", ",", "device", "=", "device", ")", ".", "repeat", "(", "B", "*", "d", ")", "\n", "]", ".", "view", "(", "B", ",", "d", ",", "S", ")", "\n", "\n", "outer_qt0_denom_sig", "=", "qt0", "[", "\n", "torch", ".", "arange", "(", "B", ",", "device", "=", "device", ")", ".", "repeat_interleave", "(", "d", ")", ",", "\n", "data", ".", "long", "(", ")", ".", "flatten", "(", ")", ",", "\n", "x_tilde", ".", "long", "(", ")", ".", "flatten", "(", ")", "\n", "]", "+", "self", ".", "ratio_eps", "# (B, d)", "\n", "\n", "\n", "\n", "qt0_numer_sig", "=", "qt0", ".", "view", "(", "B", ",", "S", ",", "S", ")", "# first S is x_0, second S is x", "\n", "\n", "\n", "qt0_denom_sig", "=", "qt0", "[", "\n", "torch", ".", "arange", "(", "B", ",", "device", "=", "device", ")", ".", "repeat_interleave", "(", "d", ")", ",", "\n", ":", ",", "\n", "x_tilde", ".", "long", "(", ")", ".", "flatten", "(", ")", "\n", "]", ".", "view", "(", "B", ",", "d", ",", "S", ")", "+", "self", ".", "ratio_eps", "\n", "\n", "inner_log_sig", "=", "torch", ".", "log", "(", "\n", "(", "p0t_sig", "/", "qt0_denom_sig", ")", "@", "qt0_numer_sig", "+", "self", ".", "ratio_eps", "\n", ")", "# (B, d, S)", "\n", "\n", "\n", "x_tilde_mask", "=", "torch", ".", "ones", "(", "(", "B", ",", "d", ",", "S", ")", ",", "device", "=", "device", ")", "\n", "x_tilde_mask", "[", "\n", "torch", ".", "arange", "(", "B", ",", "device", "=", "device", ")", ".", "repeat_interleave", "(", "d", ")", ",", "\n", "torch", ".", "arange", "(", "d", ",", "device", "=", "device", ")", ".", "repeat", "(", "B", ")", ",", "\n", "x_tilde", ".", "long", "(", ")", ".", "flatten", "(", ")", "\n", "]", "=", "0.0", "\n", "\n", "outer_rate_sig", "=", "rate", "[", "\n", "torch", ".", "arange", "(", "B", ",", "device", "=", "device", ")", ".", "repeat_interleave", "(", "d", "*", "S", ")", ",", "\n", "torch", ".", "arange", "(", "S", ",", "device", "=", "device", ")", ".", "repeat", "(", "B", "*", "d", ")", ",", "\n", "x_tilde", ".", "long", "(", ")", ".", "flatten", "(", ")", ".", "repeat_interleave", "(", "S", ")", "\n", "]", ".", "view", "(", "B", ",", "d", ",", "S", ")", "\n", "\n", "outer_sum_sig", "=", "torch", ".", "sum", "(", "\n", "x_tilde_mask", "*", "outer_rate_sig", "*", "(", "outer_qt0_numer_sig", "/", "outer_qt0_denom_sig", ".", "view", "(", "B", ",", "d", ",", "1", ")", ")", "*", "inner_log_sig", ",", "\n", "dim", "=", "(", "1", ",", "2", ")", "\n", ")", "\n", "\n", "# now getting the 2nd term normalization", "\n", "\n", "rate_row_sums", "=", "-", "rate", "[", "\n", "torch", ".", "arange", "(", "B", ",", "device", "=", "device", ")", ".", "repeat_interleave", "(", "S", ")", ",", "\n", "torch", ".", "arange", "(", "S", ",", "device", "=", "device", ")", ".", "repeat", "(", "B", ")", ",", "\n", "torch", ".", "arange", "(", "S", ",", "device", "=", "device", ")", ".", "repeat", "(", "B", ")", "\n", "]", ".", "view", "(", "B", ",", "S", ")", "\n", "\n", "base_Z_tmp", "=", "rate_row_sums", "[", "\n", "torch", ".", "arange", "(", "B", ",", "device", "=", "device", ")", ".", "repeat_interleave", "(", "d", ")", ",", "\n", "x_tilde", ".", "long", "(", ")", ".", "flatten", "(", ")", "\n", "]", ".", "view", "(", "B", ",", "d", ")", "\n", "base_Z", "=", "torch", ".", "sum", "(", "base_Z_tmp", ",", "dim", "=", "1", ")", "\n", "\n", "Z_subtraction", "=", "base_Z_tmp", "# (B,d)", "\n", "Z_addition", "=", "rate_row_sums", "\n", "\n", "Z_sig_norm", "=", "base_Z", ".", "view", "(", "B", ",", "1", ",", "1", ")", "-", "Z_subtraction", ".", "view", "(", "B", ",", "d", ",", "1", ")", "+", "Z_addition", ".", "view", "(", "B", ",", "1", ",", "S", ")", "\n", "\n", "rate_sig_norm", "=", "rate", "[", "\n", "torch", ".", "arange", "(", "B", ",", "device", "=", "device", ")", ".", "repeat_interleave", "(", "d", "*", "S", ")", ",", "\n", "torch", ".", "arange", "(", "S", ",", "device", "=", "device", ")", ".", "repeat", "(", "B", "*", "d", ")", ",", "\n", "x_tilde", ".", "long", "(", ")", ".", "flatten", "(", ")", ".", "repeat_interleave", "(", "S", ")", "\n", "]", ".", "view", "(", "B", ",", "d", ",", "S", ")", "\n", "\n", "# qt0 is (B,S,S)", "\n", "qt0_sig_norm_numer", "=", "qt0", "[", "\n", "torch", ".", "arange", "(", "B", ",", "device", "=", "device", ")", ".", "repeat_interleave", "(", "d", "*", "S", ")", ",", "\n", "data", ".", "long", "(", ")", ".", "flatten", "(", ")", ".", "repeat_interleave", "(", "S", ")", ",", "\n", "torch", ".", "arange", "(", "S", ",", "device", "=", "device", ")", ".", "repeat", "(", "B", "*", "d", ")", "\n", "]", ".", "view", "(", "B", ",", "d", ",", "S", ")", "\n", "\n", "qt0_sig_norm_denom", "=", "qt0", "[", "\n", "torch", ".", "arange", "(", "B", ",", "device", "=", "device", ")", ".", "repeat_interleave", "(", "d", ")", ",", "\n", "data", ".", "long", "(", ")", ".", "flatten", "(", ")", ",", "\n", "x_tilde", ".", "long", "(", ")", ".", "flatten", "(", ")", "\n", "]", ".", "view", "(", "B", ",", "d", ")", "+", "self", ".", "ratio_eps", "\n", "\n", "\n", "\n", "sig_norm", "=", "torch", ".", "sum", "(", "\n", "(", "rate_sig_norm", "*", "qt0_sig_norm_numer", "*", "x_tilde_mask", ")", "/", "(", "Z_sig_norm", "*", "qt0_sig_norm_denom", ".", "view", "(", "B", ",", "d", ",", "1", ")", ")", ",", "\n", "dim", "=", "(", "1", ",", "2", ")", "\n", ")", "\n", "\n", "sig_mean", "=", "torch", ".", "mean", "(", "-", "outer_sum_sig", "/", "sig_norm", ")", "\n", "reg_mean", "=", "torch", ".", "mean", "(", "reg_term", ")", "\n", "\n", "writer", ".", "add_scalar", "(", "'sig'", ",", "sig_mean", ".", "detach", "(", ")", ",", "state", "[", "'n_iter'", "]", ")", "\n", "writer", ".", "add_scalar", "(", "'reg'", ",", "reg_mean", ".", "detach", "(", ")", ",", "state", "[", "'n_iter'", "]", ")", "\n", "\n", "neg_elbo", "=", "sig_mean", "+", "reg_mean", "\n", "\n", "\n", "perm_x_logits", "=", "torch", ".", "permute", "(", "x_logits", ",", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "\n", "nll", "=", "self", ".", "cross_ent", "(", "perm_x_logits", ",", "data", ".", "long", "(", ")", ")", "\n", "\n", "return", "neg_elbo", "+", "self", ".", "nll_weight", "*", "nll", "\n", "", "", ""]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.eval.piano.get_config": [[3, 45], ["ml_collections.ConfigDict", "ml_collections.ConfigDict", "ml_collections.ConfigDict"], "function", ["None"], ["def", "get_config", "(", ")", ":", "\n", "\n", "    ", "pianoroll_dataset_path", "=", "'path/to/pianoroll_dataset'", "\n", "model_location", "=", "'path/to/piano/checkpoints/ckpt_0000999999.pt'", "\n", "model_config_location", "=", "'path/to/piano/config/config_001.yaml'", "\n", "\n", "config", "=", "ml_collections", ".", "ConfigDict", "(", ")", "\n", "config", ".", "eval_name", "=", "'piano'", "\n", "config", ".", "train_config_overrides", "=", "[", "\n", "[", "[", "'device'", "]", ",", "'cpu'", "]", ",", "\n", "[", "[", "'data'", ",", "'path'", "]", ",", "pianoroll_dataset_path", "+", "'/train.npy'", "]", ",", "\n", "[", "[", "'distributed'", "]", ",", "False", "]", "\n", "]", "\n", "config", ".", "train_config_path", "=", "model_config_location", "\n", "config", ".", "checkpoint_path", "=", "model_location", "\n", "config", ".", "pianoroll_dataset_path", "=", "pianoroll_dataset_path", "\n", "\n", "config", ".", "device", "=", "'cpu'", "\n", "\n", "config", ".", "data", "=", "data", "=", "ml_collections", ".", "ConfigDict", "(", ")", "\n", "data", ".", "name", "=", "'LakhPianoroll'", "\n", "data", ".", "path", "=", "pianoroll_dataset_path", "+", "'/train.npy'", "\n", "data", ".", "S", "=", "129", "\n", "data", ".", "batch_size", "=", "64", "#128", "\n", "data", ".", "shuffle", "=", "True", "\n", "data", ".", "shape", "=", "[", "256", "]", "\n", "\n", "\n", "config", ".", "sampler", "=", "sampler", "=", "ml_collections", ".", "ConfigDict", "(", ")", "\n", "sampler", ".", "name", "=", "'ConditionalTauLeaping'", "# ConditionalTauLeaping or ConditionalPCTauLeaping", "\n", "sampler", ".", "num_steps", "=", "1000", "\n", "sampler", ".", "min_t", "=", "0.01", "\n", "sampler", ".", "eps_ratio", "=", "1e-9", "\n", "sampler", ".", "initial_dist", "=", "'uniform'", "\n", "sampler", ".", "test_dataset", "=", "pianoroll_dataset_path", "+", "'/test.npy'", "\n", "sampler", ".", "condition_dim", "=", "32", "\n", "sampler", ".", "num_corrector_steps", "=", "2", "\n", "sampler", ".", "corrector_step_size_multiplier", "=", "0.1", "\n", "sampler", ".", "corrector_entry_time", "=", "0.9", "\n", "sampler", ".", "reject_multiple_jumps", "=", "True", "\n", "\n", "return", "config", "", "", ""]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.eval.cifar10.get_config": [[3, 43], ["ml_collections.ConfigDict", "ml_collections.ConfigDict", "ml_collections.ConfigDict"], "function", ["None"], ["def", "get_config", "(", ")", ":", "\n", "\n", "    ", "datasets_folder", "=", "'path/to/datasets'", "\n", "model_location", "=", "'path/to/cifar10/checkpoints/ckpt_0001999999.pt'", "\n", "model_config_location", "=", "'path/to/cifar10/config/config_001.yaml'", "\n", "\n", "config", "=", "ml_collections", ".", "ConfigDict", "(", ")", "\n", "config", ".", "eval_name", "=", "'CIFAR10'", "\n", "config", ".", "train_config_overrides", "=", "[", "\n", "[", "[", "'device'", "]", ",", "'cpu'", "]", ",", "\n", "[", "[", "'data'", ",", "'root'", "]", ",", "datasets_folder", "]", ",", "\n", "[", "[", "'distributed'", "]", ",", "False", "]", "\n", "]", "\n", "config", ".", "train_config_path", "=", "model_config_location", "\n", "config", ".", "checkpoint_path", "=", "model_location", "\n", "\n", "config", ".", "device", "=", "'cpu'", "\n", "\n", "config", ".", "data", "=", "data", "=", "ml_collections", ".", "ConfigDict", "(", ")", "\n", "data", ".", "name", "=", "'DiscreteCIFAR10'", "\n", "data", ".", "root", "=", "datasets_folder", "\n", "data", ".", "train", "=", "True", "\n", "data", ".", "download", "=", "True", "\n", "data", ".", "S", "=", "256", "\n", "data", ".", "batch_size", "=", "16", "\n", "data", ".", "shuffle", "=", "True", "\n", "data", ".", "shape", "=", "[", "3", ",", "32", ",", "32", "]", "\n", "data", ".", "random_flips", "=", "False", "\n", "\n", "config", ".", "sampler", "=", "sampler", "=", "ml_collections", ".", "ConfigDict", "(", ")", "\n", "sampler", ".", "name", "=", "'TauLeaping'", "# TauLeaping or PCTauLeaping", "\n", "sampler", ".", "num_steps", "=", "1000", "\n", "sampler", ".", "min_t", "=", "0.01", "\n", "sampler", ".", "eps_ratio", "=", "1e-9", "\n", "sampler", ".", "initial_dist", "=", "'gaussian'", "\n", "sampler", ".", "num_corrector_steps", "=", "10", "\n", "sampler", ".", "corrector_step_size_multiplier", "=", "1.5", "\n", "sampler", ".", "corrector_entry_time", "=", "0.1", "\n", "\n", "return", "config", "", "", ""]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.train.cifar10_distributed.get_config": [[3, 83], ["ml_collections.ConfigDict", "ml_collections.ConfigDict", "ml_collections.ConfigDict", "ml_collections.ConfigDict", "ml_collections.ConfigDict", "ml_collections.ConfigDict", "ml_collections.ConfigDict"], "function", ["None"], ["def", "get_config", "(", ")", ":", "\n", "    ", "save_directory", "=", "'path/to/output'", "\n", "datasets_folder", "=", "'path/to/datasets'", "\n", "\n", "\n", "\n", "config", "=", "ml_collections", ".", "ConfigDict", "(", ")", "\n", "config", ".", "experiment_name", "=", "'cifar10'", "\n", "config", ".", "save_location", "=", "save_directory", "\n", "\n", "config", ".", "init_model_path", "=", "None", "\n", "\n", "config", ".", "device", "=", "'cuda'", "\n", "config", ".", "distributed", "=", "True", "\n", "config", ".", "num_gpus", "=", "4", "\n", "\n", "config", ".", "loss", "=", "loss", "=", "ml_collections", ".", "ConfigDict", "(", ")", "\n", "loss", ".", "name", "=", "'GenericAux'", "\n", "loss", ".", "eps_ratio", "=", "1e-9", "\n", "loss", ".", "nll_weight", "=", "0.001", "\n", "loss", ".", "min_time", "=", "0.01", "\n", "loss", ".", "one_forward_pass", "=", "True", "\n", "\n", "config", ".", "training", "=", "training", "=", "ml_collections", ".", "ConfigDict", "(", ")", "\n", "training", ".", "train_step_name", "=", "'Standard'", "\n", "training", ".", "n_iters", "=", "2000000", "\n", "training", ".", "clip_grad", "=", "True", "\n", "training", ".", "warmup", "=", "5000", "\n", "\n", "config", ".", "data", "=", "data", "=", "ml_collections", ".", "ConfigDict", "(", ")", "\n", "data", ".", "name", "=", "'DiscreteCIFAR10'", "\n", "data", ".", "root", "=", "datasets_folder", "\n", "data", ".", "train", "=", "True", "\n", "data", ".", "download", "=", "True", "\n", "data", ".", "S", "=", "256", "\n", "data", ".", "batch_size", "=", "128", "\n", "data", ".", "shuffle", "=", "True", "\n", "data", ".", "shape", "=", "[", "3", ",", "32", ",", "32", "]", "\n", "data", ".", "random_flips", "=", "True", "\n", "\n", "config", ".", "model", "=", "model", "=", "ml_collections", ".", "ConfigDict", "(", ")", "\n", "model", ".", "name", "=", "'GaussianTargetRateImageX0PredEMA'", "\n", "\n", "model", ".", "ema_decay", "=", "0.9999", "#0.9999", "\n", "\n", "model", ".", "ch", "=", "128", "\n", "model", ".", "num_res_blocks", "=", "2", "\n", "model", ".", "num_scales", "=", "4", "\n", "model", ".", "ch_mult", "=", "[", "1", ",", "2", ",", "2", ",", "2", "]", "\n", "model", ".", "input_channels", "=", "3", "\n", "model", ".", "scale_count_to_put_attn", "=", "1", "\n", "model", ".", "data_min_max", "=", "[", "0", ",", "255", "]", "\n", "model", ".", "dropout", "=", "0.1", "\n", "model", ".", "skip_rescale", "=", "True", "\n", "model", ".", "time_embed_dim", "=", "model", ".", "ch", "\n", "model", ".", "time_scale_factor", "=", "1000", "\n", "model", ".", "fix_logistic", "=", "False", "\n", "\n", "model", ".", "rate_sigma", "=", "6.0", "\n", "model", ".", "Q_sigma", "=", "512.0", "\n", "model", ".", "time_exponential", "=", "100.0", "\n", "model", ".", "time_base", "=", "3.0", "\n", "\n", "\n", "config", ".", "optimizer", "=", "optimizer", "=", "ml_collections", ".", "ConfigDict", "(", ")", "\n", "optimizer", ".", "name", "=", "'Adam'", "\n", "optimizer", ".", "lr", "=", "2e-4", "\n", "\n", "config", ".", "saving", "=", "saving", "=", "ml_collections", ".", "ConfigDict", "(", ")", "\n", "\n", "saving", ".", "enable_preemption_recovery", "=", "False", "\n", "saving", ".", "preemption_start_day_YYYYhyphenMMhyphenDD", "=", "None", "\n", "saving", ".", "checkpoint_freq", "=", "1000", "\n", "saving", ".", "num_checkpoints_to_keep", "=", "2", "\n", "saving", ".", "checkpoint_archive_freq", "=", "200000", "\n", "saving", ".", "log_low_freq", "=", "10000", "\n", "saving", ".", "low_freq_loggers", "=", "[", "'denoisingImages'", "]", "\n", "saving", ".", "prepare_to_resume_after_timeout", "=", "False", "\n", "\n", "return", "config", "\n", "", ""]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.train.piano.get_config": [[3, 82], ["ml_collections.ConfigDict", "ml_collections.ConfigDict", "ml_collections.ConfigDict", "ml_collections.ConfigDict", "ml_collections.ConfigDict", "ml_collections.ConfigDict", "ml_collections.ConfigDict"], "function", ["None"], ["def", "get_config", "(", ")", ":", "\n", "\n", "    ", "pianoroll_dataset_path", "=", "'path/to/pianoroll_dataset'", "\n", "model_location", "=", "'path/to/piano/checkpoints/ckpt_0000999999.pt'", "\n", "model_config_location", "=", "'path/to/piano/config/config_001.yaml'", "\n", "\n", "config", "=", "ml_collections", ".", "ConfigDict", "(", ")", "\n", "config", ".", "eval_name", "=", "'piano'", "\n", "config", ".", "train_config_overrides", "=", "[", "\n", "[", "[", "'device'", "]", ",", "'cpu'", "]", ",", "\n", "[", "[", "'data'", ",", "'path'", "]", ",", "pianoroll_dataset_path", "+", "'/train.npy'", "]", ",", "\n", "[", "[", "'distributed'", "]", ",", "False", "]", "\n", "]", "\n", "config", ".", "train_config_path", "=", "model_config_location", "\n", "config", ".", "checkpoint_path", "=", "model_location", "\n", "config", ".", "pianoroll_dataset_path", "=", "pianoroll_dataset_path", "\n", "\n", "config", ".", "device", "=", "'cpu'", "\n", "\n", "config", ".", "data", "=", "data", "=", "ml_collections", ".", "ConfigDict", "(", ")", "\n", "data", ".", "name", "=", "'LakhPianoroll'", "\n", "data", ".", "path", "=", "pianoroll_dataset_path", "+", "'/train.npy'", "\n", "data", ".", "S", "=", "129", "\n", "data", ".", "batch_size", "=", "64", "#128", "\n", "data", ".", "shuffle", "=", "True", "\n", "data", ".", "shape", "=", "[", "256", "]", "\n", "\n", "\n", "config", ".", "sampler", "=", "sampler", "=", "ml_collections", ".", "ConfigDict", "(", ")", "\n", "sampler", ".", "name", "=", "'ConditionalTauLeaping'", "# ConditionalTauLeaping or ConditionalPCTauLeaping", "\n", "sampler", ".", "num_steps", "=", "1000", "\n", "sampler", ".", "min_t", "=", "0.01", "\n", "sampler", ".", "eps_ratio", "=", "1e-9", "\n", "sampler", ".", "initial_dist", "=", "'uniform'", "\n", "sampler", ".", "test_dataset", "=", "pianoroll_dataset_path", "+", "'/test.npy'", "\n", "sampler", ".", "condition_dim", "=", "32", "\n", "sampler", ".", "num_corrector_steps", "=", "2", "\n", "sampler", ".", "corrector_step_size_multiplier", "=", "0.1", "\n", "sampler", ".", "corrector_entry_time", "=", "0.9", "\n", "sampler", ".", "reject_multiple_jumps", "=", "True", "\n", "\n", "return", "config", "", "", ""]], "home.repos.pwc.inspect_result.andrew-cr_tauldr.train.cifar10.get_config": [[3, 83], ["ml_collections.ConfigDict", "ml_collections.ConfigDict", "ml_collections.ConfigDict", "ml_collections.ConfigDict", "ml_collections.ConfigDict", "ml_collections.ConfigDict", "ml_collections.ConfigDict"], "function", ["None"], ["def", "get_config", "(", ")", ":", "\n", "\n", "    ", "datasets_folder", "=", "'path/to/datasets'", "\n", "model_location", "=", "'path/to/cifar10/checkpoints/ckpt_0001999999.pt'", "\n", "model_config_location", "=", "'path/to/cifar10/config/config_001.yaml'", "\n", "\n", "config", "=", "ml_collections", ".", "ConfigDict", "(", ")", "\n", "config", ".", "eval_name", "=", "'CIFAR10'", "\n", "config", ".", "train_config_overrides", "=", "[", "\n", "[", "[", "'device'", "]", ",", "'cpu'", "]", ",", "\n", "[", "[", "'data'", ",", "'root'", "]", ",", "datasets_folder", "]", ",", "\n", "[", "[", "'distributed'", "]", ",", "False", "]", "\n", "]", "\n", "config", ".", "train_config_path", "=", "model_config_location", "\n", "config", ".", "checkpoint_path", "=", "model_location", "\n", "\n", "config", ".", "device", "=", "'cpu'", "\n", "\n", "config", ".", "data", "=", "data", "=", "ml_collections", ".", "ConfigDict", "(", ")", "\n", "data", ".", "name", "=", "'DiscreteCIFAR10'", "\n", "data", ".", "root", "=", "datasets_folder", "\n", "data", ".", "train", "=", "True", "\n", "data", ".", "download", "=", "True", "\n", "data", ".", "S", "=", "256", "\n", "data", ".", "batch_size", "=", "16", "\n", "data", ".", "shuffle", "=", "True", "\n", "data", ".", "shape", "=", "[", "3", ",", "32", ",", "32", "]", "\n", "data", ".", "random_flips", "=", "False", "\n", "\n", "config", ".", "sampler", "=", "sampler", "=", "ml_collections", ".", "ConfigDict", "(", ")", "\n", "sampler", ".", "name", "=", "'TauLeaping'", "# TauLeaping or PCTauLeaping", "\n", "sampler", ".", "num_steps", "=", "1000", "\n", "sampler", ".", "min_t", "=", "0.01", "\n", "sampler", ".", "eps_ratio", "=", "1e-9", "\n", "sampler", ".", "initial_dist", "=", "'gaussian'", "\n", "sampler", ".", "num_corrector_steps", "=", "10", "\n", "sampler", ".", "corrector_step_size_multiplier", "=", "1.5", "\n", "sampler", ".", "corrector_entry_time", "=", "0.1", "\n", "\n", "return", "config", "", "", ""]]}