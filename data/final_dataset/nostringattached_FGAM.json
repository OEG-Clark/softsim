{"home.repos.pwc.inspect_result.nostringattached_FGAM.None.fgam.train": [[80, 100], ["model.train", "log.reset", "enumerate", "print", "log.printLog", "iter", "range", "static.cuda.cuda", "targets.squeeze().long().cuda.squeeze().long().cuda", "optimizer.zero_grad", "torch.log_softmax", "log.update", "torch.nll_loss", "F.nll_loss.backward", "optimizer.step", "time_variying[].cuda", "model", "targets.squeeze().long().cuda.squeeze().long", "targets.squeeze().long().cuda.squeeze"], "function", ["home.repos.pwc.inspect_result.nostringattached_FGAM.None.fgam.train", "home.repos.pwc.inspect_result.nostringattached_FGAM.None.utils.LogMeters.reset", "home.repos.pwc.inspect_result.nostringattached_FGAM.None.utils.LogMeters.printLog", "home.repos.pwc.inspect_result.nostringattached_FGAM.None.utils.LogMeters.update", "home.repos.pwc.inspect_result.nostringattached_FGAM.None.adabound.AdaBound.step"], ["", "def", "train", "(", "epoch", ",", "data_loader", ",", "log", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "log", ".", "reset", "(", ")", "\n", "total_loss", ",", "total_batches", "=", "0.0", ",", "0.0", "\n", "for", "batch_idx", ",", "(", "static", ",", "time_variying", ",", "targets", ")", "in", "enumerate", "(", "iter", "(", "data_loader", ")", ")", ":", "\n", "        ", "for", "idx", "in", "range", "(", "dim_time_varying", ")", ":", "\n", "            ", "time_variying", "[", "idx", "]", "=", "time_variying", "[", "idx", "]", ".", "cuda", "(", ")", "\n", "", "static", "=", "static", ".", "cuda", "(", ")", "\n", "targets", "=", "targets", ".", "squeeze", "(", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "outputs", "=", "F", ".", "log_softmax", "(", "model", "(", "static", ",", "time_variying", ")", ",", "dim", "=", "1", ")", "\n", "log", ".", "update", "(", "outputs", ",", "targets", ")", "\n", "loss", "=", "F", ".", "nll_loss", "(", "outputs", ",", "targets", ")", "\n", "total_loss", "+=", "loss", "\n", "total_batches", "+=", "1", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "# scheduler.step()", "\n", "", "print", "(", "'Avg loss is {}'", ".", "format", "(", "total_loss", "/", "total_batches", ")", ")", "\n", "log", ".", "printLog", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nostringattached_FGAM.None.fgam.test": [[102, 113], ["model.eval", "log.reset", "enumerate", "log.printLog", "iter", "static.cuda.cuda", "range", "targets.squeeze().long().cuda.squeeze().long().cuda", "torch.log_softmax", "log.update", "time_variying[].cuda", "model", "targets.squeeze().long().cuda.squeeze().long", "targets.squeeze().long().cuda.squeeze"], "function", ["home.repos.pwc.inspect_result.nostringattached_FGAM.None.utils.LogMeters.reset", "home.repos.pwc.inspect_result.nostringattached_FGAM.None.utils.LogMeters.printLog", "home.repos.pwc.inspect_result.nostringattached_FGAM.None.utils.LogMeters.update"], ["", "def", "test", "(", "epoch", ",", "data_loader", ",", "log", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "log", ".", "reset", "(", ")", "\n", "for", "batch_idx", ",", "(", "static", ",", "time_variying", ",", "targets", ")", "in", "enumerate", "(", "iter", "(", "data_loader", ")", ")", ":", "\n", "        ", "static", "=", "static", ".", "cuda", "(", ")", "\n", "for", "idx", "in", "range", "(", "dim_time_varying", ")", ":", "\n", "            ", "time_variying", "[", "idx", "]", "=", "time_variying", "[", "idx", "]", ".", "cuda", "(", ")", "\n", "", "targets", "=", "targets", ".", "squeeze", "(", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "outputs", "=", "F", ".", "log_softmax", "(", "model", "(", "static", ",", "time_variying", ")", ",", "dim", "=", "1", ")", "\n", "log", ".", "update", "(", "outputs", ",", "targets", ")", "\n", "", "log", ".", "printLog", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nostringattached_FGAM.None.adabound.AdaBound.__init__": [[25, 44], ["dict", "torch.optim.Optimizer.__init__", "list", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError", "map"], "methods", ["home.repos.pwc.inspect_result.nostringattached_FGAM.None.utils.LogMeters.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "final_lr", "=", "0.1", ",", "gamma", "=", "1e-3", ",", "\n", "eps", "=", "1e-8", ",", "weight_decay", "=", "0", ",", "amsbound", "=", "False", ")", ":", "\n", "        ", "if", "not", "0.0", "<=", "lr", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {}\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "not", "0.0", "<=", "eps", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid epsilon value: {}\"", ".", "format", "(", "eps", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "0", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 0: {}\"", ".", "format", "(", "betas", "[", "0", "]", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "1", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 1: {}\"", ".", "format", "(", "betas", "[", "1", "]", ")", ")", "\n", "", "if", "not", "0.0", "<=", "final_lr", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid final learning rate: {}\"", ".", "format", "(", "final_lr", ")", ")", "\n", "", "if", "not", "0.0", "<=", "gamma", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid gamma parameter: {}\"", ".", "format", "(", "gamma", ")", ")", "\n", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "final_lr", "=", "final_lr", ",", "gamma", "=", "gamma", ",", "eps", "=", "eps", ",", "\n", "weight_decay", "=", "weight_decay", ",", "amsbound", "=", "amsbound", ")", "\n", "super", "(", "AdaBound", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n", "self", ".", "base_lrs", "=", "list", "(", "map", "(", "lambda", "group", ":", "group", "[", "'lr'", "]", ",", "self", ".", "param_groups", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nostringattached_FGAM.None.adabound.AdaBound.__setstate__": [[45, 49], ["super().__setstate__", "group.setdefault"], "methods", ["home.repos.pwc.inspect_result.nostringattached_FGAM.None.adabound.AdaBound.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "AdaBound", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "group", ".", "setdefault", "(", "'amsbound'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nostringattached_FGAM.None.adabound.AdaBound.step": [[50, 119], ["zip", "closure", "exp_avg.mul_().add_", "exp_avg_sq.mul_().addcmul_", "torch.full_like", "torch.full_like.div_().clamp_().mul_", "p.data.add_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "grad.add.add.add", "torch.max", "max_exp_avg_sq.sqrt().add_", "exp_avg_sq.sqrt().add_", "torch.zeros_like", "exp_avg.mul_", "exp_avg_sq.mul_", "math.sqrt", "torch.full_like.div_().clamp_", "max_exp_avg_sq.sqrt", "exp_avg_sq.sqrt", "torch.full_like.div_"], "methods", ["None"], ["", "", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", ",", "base_lr", "in", "zip", "(", "self", ".", "param_groups", ",", "self", ".", "base_lrs", ")", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\n", "'Adam does not support sparse gradients, please consider SparseAdam instead'", ")", "\n", "", "amsbound", "=", "group", "[", "'amsbound'", "]", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "# State initialization", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "# Exponential moving average of gradient values", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "# Exponential moving average of squared gradient values", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "if", "amsbound", ":", "\n", "# Maintains max of all exp. moving avg. of sq. grad. values", "\n", "                        ", "state", "[", "'max_exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "\n", "", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "if", "amsbound", ":", "\n", "                    ", "max_exp_avg_sq", "=", "state", "[", "'max_exp_avg_sq'", "]", "\n", "", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                    ", "grad", "=", "grad", ".", "add", "(", "group", "[", "'weight_decay'", "]", ",", "p", ".", "data", ")", "\n", "\n", "# Decay the first and second moment running average coefficient", "\n", "", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "if", "amsbound", ":", "\n", "# Maintains the maximum of all 2nd moment running avg. till now", "\n", "                    ", "torch", ".", "max", "(", "max_exp_avg_sq", ",", "exp_avg_sq", ",", "out", "=", "max_exp_avg_sq", ")", "\n", "# Use the max. for normalizing running avg. of gradient", "\n", "denom", "=", "max_exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "\n", "", "bias_correction1", "=", "1", "-", "beta1", "**", "state", "[", "'step'", "]", "\n", "bias_correction2", "=", "1", "-", "beta2", "**", "state", "[", "'step'", "]", "\n", "step_size", "=", "group", "[", "'lr'", "]", "*", "math", ".", "sqrt", "(", "bias_correction2", ")", "/", "bias_correction1", "\n", "\n", "# Applies bounds on actual learning rate", "\n", "# lr_scheduler cannot affect final_lr, this is a workaround to apply lr decay", "\n", "final_lr", "=", "group", "[", "'final_lr'", "]", "*", "group", "[", "'lr'", "]", "/", "base_lr", "\n", "lower_bound", "=", "final_lr", "*", "(", "1", "-", "1", "/", "(", "group", "[", "'gamma'", "]", "*", "state", "[", "'step'", "]", "+", "1", ")", ")", "\n", "upper_bound", "=", "final_lr", "*", "(", "1", "+", "1", "/", "(", "group", "[", "'gamma'", "]", "*", "state", "[", "'step'", "]", ")", ")", "\n", "step_size", "=", "torch", ".", "full_like", "(", "denom", ",", "step_size", ")", "\n", "step_size", ".", "div_", "(", "denom", ")", ".", "clamp_", "(", "lower_bound", ",", "upper_bound", ")", ".", "mul_", "(", "exp_avg", ")", "\n", "\n", "p", ".", "data", ".", "add_", "(", "-", "step_size", ")", "\n", "\n", "", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nostringattached_FGAM.None.My_DataLoader.MyData.__init__": [[8, 26], ["numpy.random.rand().astype", "numpy.random.rand().astype", "numpy.random.randint", "numpy.random.rand().astype", "numpy.random.rand().astype", "numpy.random.randint", "numpy.random.rand().astype", "numpy.random.rand().astype", "numpy.random.randint", "numpy.random.rand", "numpy.random.rand", "numpy.random.rand", "numpy.random.rand", "numpy.random.rand", "numpy.random.rand"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_type", "=", "'train'", ",", "upsampling", "=", "False", ")", ":", "\n", "        ", "assert", "data_type", "in", "(", "'train'", ",", "'valid'", ",", "'test'", ")", "\n", "# Please replace them with your own data", "\n", "if", "data_type", "==", "'train'", ":", "\n", "            ", "data", "=", "[", "np", ".", "random", ".", "rand", "(", "128", ",", "10", ")", ".", "astype", "(", "np", ".", "float32", ")", ",", "np", ".", "random", ".", "rand", "(", "128", ",", "20", ")", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "np", ".", "random", ".", "randint", "(", "2", ",", "size", "=", "(", "128", ",", "1", ")", ")", "]", "\n", "", "elif", "data_type", "==", "'valid'", ":", "\n", "            ", "data", "=", "[", "np", ".", "random", ".", "rand", "(", "128", ",", "10", ")", ".", "astype", "(", "np", ".", "float32", ")", ",", "np", ".", "random", ".", "rand", "(", "128", ",", "20", ")", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "np", ".", "random", ".", "randint", "(", "2", ",", "size", "=", "(", "128", ",", "1", ")", ")", "]", "\n", "", "else", ":", "\n", "            ", "data", "=", "[", "np", ".", "random", ".", "rand", "(", "128", ",", "10", ")", ".", "astype", "(", "np", ".", "float32", ")", ",", "np", ".", "random", ".", "rand", "(", "128", ",", "20", ")", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "np", ".", "random", ".", "randint", "(", "2", ",", "size", "=", "(", "128", ",", "1", ")", ")", "]", "\n", "", "self", ".", "unmodifiable_features", "=", "data", "[", "0", "]", "\n", "self", ".", "modifiable_features", "=", "data", "[", "1", "]", "\n", "self", ".", "labels", "=", "data", "[", "2", "]", "\n", "n", "=", "self", ".", "labels", ".", "shape", "[", "0", "]", "\n", "\n", "self", ".", "data_size", "=", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.nostringattached_FGAM.None.My_DataLoader.MyData.__getitem__": [[27, 32], ["torch.from_numpy", "numpy.array"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "unmodifiable_feature", "=", "self", ".", "unmodifiable_features", "[", "index", "]", "\n", "modifiable_feature", "=", "self", ".", "modifiable_features", "[", "index", "]", "\n", "label", "=", "self", ".", "labels", "[", "index", "]", "\n", "return", "unmodifiable_feature", ",", "[", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "ele", "]", ")", ")", "for", "ele", "in", "modifiable_feature", "]", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.nostringattached_FGAM.None.My_DataLoader.MyData.__len__": [[33, 35], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data_size", "\n", "\n"]], "home.repos.pwc.inspect_result.nostringattached_FGAM.None.model.FGAM.__init__": [[9, 45], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "model.FGAM.weights_module.append", "model.FGAM.weights_module.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "model.FGAM.weights_module2.append", "model.FGAM.weights_module2.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList.append", "range", "torch.ModuleList.append", "torch.ModuleList.append", "model.FGAM.embedding_layers.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ModuleList.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ModuleList.append", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.nostringattached_FGAM.None.utils.LogMeters.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_classes", ",", "dim_time_varying", ",", "dim_static", ",", "n_embedding", ",", "n_hid", ",", "batch_norm", "=", "False", ")", ":", "\n", "        ", "super", "(", "FGAM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "dim_time_varying", "=", "dim_time_varying", "\n", "self", ".", "dim_static", "=", "dim_static", "\n", "self", ".", "n_embedding", "=", "n_embedding", "\n", "self", ".", "n_hid", "=", "n_hid", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "self", ".", "embedding_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "dim_time_varying", ")", ":", "\n", "            ", "branch", "=", "nn", ".", "ModuleList", "(", ")", "\n", "branch", ".", "append", "(", "nn", ".", "Linear", "(", "1", ",", "self", ".", "n_embedding", ")", ")", "\n", "for", "_", "in", "range", "(", "n_hid", ")", ":", "\n", "                ", "branch", ".", "append", "(", "nn", ".", "Linear", "(", "self", ".", "n_embedding", ",", "self", ".", "n_embedding", ")", ")", "\n", "if", "self", ".", "batch_norm", ":", "\n", "                    ", "branch", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "self", ".", "n_embedding", ")", ")", "\n", "", "", "branch", ".", "append", "(", "nn", ".", "Linear", "(", "self", ".", "n_embedding", ",", "128", ")", ")", "\n", "branch", ".", "append", "(", "nn", ".", "Linear", "(", "128", ",", "1", ")", ")", "\n", "self", ".", "embedding_layers", ".", "append", "(", "branch", ")", "\n", "", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "self", ".", "dim_time_varying", ",", "self", ".", "n_classes", ")", "\n", "\n", "# for logits[0]", "\n", "self", ".", "weights_module", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "weights_module", ".", "append", "(", "nn", ".", "Linear", "(", "self", ".", "dim_static", ",", "128", ")", ")", "\n", "self", ".", "weights_module", ".", "append", "(", "nn", ".", "Linear", "(", "128", ",", "128", ")", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Linear", "(", "128", ",", "self", ".", "dim_time_varying", "*", "1", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Linear", "(", "128", ",", "1", ")", "\n", "\n", "# for logits[1]", "\n", "self", ".", "weights_module2", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "weights_module2", ".", "append", "(", "nn", ".", "Linear", "(", "self", ".", "dim_static", ",", "128", ")", ")", "\n", "self", ".", "weights_module2", ".", "append", "(", "nn", ".", "Linear", "(", "128", ",", "128", ")", ")", "\n", "self", ".", "weight2", "=", "nn", ".", "Linear", "(", "128", ",", "self", ".", "dim_time_varying", "*", "1", ")", "\n", "self", ".", "bias2", "=", "nn", ".", "Linear", "(", "128", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nostringattached_FGAM.None.model.FGAM.forward": [[48, 79], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "enumerate", "model.FGAM.weight", "model.FGAM.bias", "enumerate", "model.FGAM.weight2", "model.FGAM.bias2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "enumerate", "res.append", "torch.relu", "torch.relu", "torch.relu", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.relu", "torch.relu", "torch.relu", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "op", "op", "op", "torch.relu", "torch.relu", "torch.relu", "op", "[]._get_name", "len", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "static", ",", "time_varying", ")", ":", "\n", "        ", "res", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "dim_time_varying", ")", ":", "\n", "            ", "x", "=", "time_varying", "[", "i", "]", "\n", "for", "j", ",", "op", "in", "enumerate", "(", "self", ".", "embedding_layers", "[", "i", "]", ")", ":", "\n", "# no relu before batchNorm", "\n", "                ", "if", "(", "j", "<", "(", "len", "(", "self", ".", "embedding_layers", "[", "i", "]", ")", "-", "1", ")", "and", "\n", "(", "self", ".", "embedding_layers", "[", "i", "]", "[", "j", "+", "1", "]", ".", "_get_name", "(", ")", "==", "\n", "'BatchNorm1d'", ")", ")", "or", "(", "j", "==", "(", "len", "(", "self", ".", "embedding_layers", "[", "i", "]", ")", "-", "1", ")", ")", ":", "\n", "                    ", "x", "=", "op", "(", "x", ")", "\n", "", "else", ":", "\n", "                    ", "x", "=", "F", ".", "relu", "(", "op", "(", "x", ")", ")", "\n", "", "", "res", ".", "append", "(", "x", ")", "\n", "", "x", "=", "torch", ".", "cat", "(", "res", ",", "1", ")", "\n", "w", "=", "static", "\n", "w2", "=", "static", "\n", "for", "i", ",", "op", "in", "enumerate", "(", "self", ".", "weights_module", ")", ":", "\n", "            ", "w", "=", "F", ".", "relu", "(", "op", "(", "w", ")", ")", "\n", "", "weight", "=", "self", ".", "weight", "(", "w", ")", "\n", "bias", "=", "self", ".", "bias", "(", "w", ")", "\n", "logits0", "=", "torch", ".", "sum", "(", "x", "*", "weight", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "bias", "\n", "\n", "for", "i", ",", "op", "in", "enumerate", "(", "self", ".", "weights_module2", ")", ":", "\n", "            ", "w2", "=", "F", ".", "relu", "(", "op", "(", "w2", ")", ")", "\n", "", "weight2", "=", "self", ".", "weight2", "(", "w2", ")", "\n", "bias2", "=", "self", ".", "bias2", "(", "w2", ")", "\n", "logits1", "=", "torch", ".", "sum", "(", "x", "*", "weight2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "bias2", "\n", "\n", "logits", "=", "torch", ".", "cat", "(", "(", "logits0", ",", "logits1", ")", ",", "1", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.nostringattached_FGAM.None.utils.LogMeters.__init__": [[118, 130], ["os.path.join", "torchnet.ConfusionMeter", "torchnet.AUCMeter", "torchnet.ClassErrorMeter", "utils.saveMkdir", "open", "numpy.array().reshape", "numpy.array().reshape", "os.path.join", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.nostringattached_FGAM.None.utils.saveMkdir"], ["    ", "def", "__init__", "(", "self", ",", "name", "=", "None", ",", "n_classes", "=", "2", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "path", "=", "os", ".", "path", ".", "join", "(", "'log'", ",", "name", ")", "\n", "self", ".", "conf_mtr", "=", "meter", ".", "ConfusionMeter", "(", "n_classes", ")", "\n", "self", ".", "auc_mtr", "=", "meter", ".", "AUCMeter", "(", ")", "\n", "self", ".", "err_mtr", "=", "meter", ".", "ClassErrorMeter", "(", "topk", "=", "[", "1", "]", ",", "accuracy", "=", "True", ")", "\n", "saveMkdir", "(", "self", ".", "path", ")", "\n", "\n", "self", ".", "fp", "=", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "path", ",", "'res.log'", ")", ",", "'w'", ")", "\n", "self", ".", "y_scores", "=", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "0", ",", "1", ")", "\n", "self", ".", "y_true", "=", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nostringattached_FGAM.None.utils.LogMeters.update": [[131, 147], ["torch.exp", "torch.max", "utils.LogMeters.conf_mtr.add", "utils.LogMeters.err_mtr.add", "utils.LogMeters.auc_mtr.add", "probs[].cpu().squeeze().numpy", "probs[].cpu().squeeze().numpy.resize", "target.data.cpu().squeeze().numpy", "target.data.cpu().squeeze().numpy.resize", "numpy.vstack", "numpy.vstack", "probs[].cpu().squeeze", "target.data.cpu().squeeze", "probs[].cpu", "target.data.cpu"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "output", ",", "target", ")", ":", "\n", "        ", "preds", "=", "output", ".", "data", "\n", "probs", "=", "torch", ".", "exp", "(", "preds", ")", "\n", "_", ",", "predicted", "=", "torch", ".", "max", "(", "probs", ",", "1", ")", "\n", "self", ".", "conf_mtr", ".", "add", "(", "predicted", ",", "target", ".", "data", ")", "\n", "if", "self", ".", "n_classes", "==", "2", ":", "\n", "            ", "self", ".", "auc_mtr", ".", "add", "(", "probs", "[", ":", ",", "1", "]", ",", "\n", "target", ".", "data", ")", "\n", "curr_output", "=", "probs", "[", ":", ",", "1", "]", ".", "cpu", "(", ")", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", "\n", "curr_output", ".", "resize", "(", "curr_output", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "curr_target", "=", "target", ".", "data", ".", "cpu", "(", ")", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", "\n", "curr_target", ".", "resize", "(", "curr_target", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "self", ".", "y_scores", "=", "np", ".", "vstack", "(", "[", "self", ".", "y_scores", ",", "curr_output", "]", ")", "\n", "self", ".", "y_true", "=", "np", ".", "vstack", "(", "[", "self", ".", "y_true", ",", "curr_target", "]", ")", "\n", "\n", "", "self", ".", "err_mtr", ".", "add", "(", "probs", ",", "target", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nostringattached_FGAM.None.utils.LogMeters.printLog": [[148, 210], ["utils.LogMeters.conf_mtr.value", "print", "utils.LogMeters.err_mtr.value", "print", "utils.LogMeters.fp.writelines", "utils.LogMeters.fp.writelines", "utils.LogMeters.fp.writelines", "utils.LogMeters.fp.writelines", "utils.LogMeters.fp.writelines", "utils.LogMeters.fp.writelines", "utils.LogMeters.fp.flush", "matplotlib.figure", "matplotlib.step", "matplotlib.fill_between", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.ylim", "matplotlib.xlim", "matplotlib.title", "matplotlib.figure.savefig", "matplotlib.close", "matplotlib.figure", "matplotlib.step", "matplotlib.fill_between", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.ylim", "matplotlib.xlim", "matplotlib.title", "matplotlib.figure.savefig", "matplotlib.close", "sklearn.metrics.roc_auc_score", "print", "sklearn.metrics.average_precision_score", "print", "sklearn.metrics.precision_recall_curve", "numpy.savetxt", "numpy.savetxt", "numpy.savetxt", "numpy.savetxt", "sklearn.metrics.roc_curve", "numpy.savetxt", "numpy.savetxt", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.nostringattached_FGAM.None.adabound.AdaBound.step", "home.repos.pwc.inspect_result.nostringattached_FGAM.None.adabound.AdaBound.step"], ["", "def", "printLog", "(", "self", ",", "epoch", "=", "0", ")", ":", "\n", "        ", "conf_mtrx", "=", "self", ".", "conf_mtr", ".", "value", "(", ")", "\n", "print", "(", "conf_mtrx", ")", "\n", "if", "self", ".", "n_classes", "==", "2", ":", "\n", "            ", "val_auc", "=", "roc_auc_score", "(", "self", ".", "y_true", ",", "self", ".", "y_scores", ")", "\n", "print", "(", "'\\tAUC is {:.6f}'", ".", "format", "(", "val_auc", ")", ")", "\n", "average_precision", "=", "average_precision_score", "(", "self", ".", "y_true", ",", "\n", "self", ".", "y_scores", ")", "\n", "print", "(", "'\\tAPR is {:.6f}'", ".", "format", "(", "average_precision", ")", ")", "\n", "precision", ",", "recall", ",", "_", "=", "precision_recall_curve", "(", "self", ".", "y_true", ",", "\n", "self", ".", "y_scores", ")", "\n", "np", ".", "savetxt", "(", "self", ".", "path", "+", "'/precision_'", "+", "str", "(", "epoch", ")", "+", "'.txt'", ",", "\n", "precision", ",", "delimiter", "=", "','", ")", "\n", "np", ".", "savetxt", "(", "self", ".", "path", "+", "'/recall_'", "+", "str", "(", "epoch", ")", "+", "'.txt'", ",", "\n", "recall", ",", "delimiter", "=", "','", ")", "\n", "np", ".", "savetxt", "(", "self", ".", "path", "+", "'/true_'", "+", "str", "(", "epoch", ")", "+", "'.txt'", ",", "\n", "self", ".", "y_true", ",", "delimiter", "=", "','", ")", "\n", "np", ".", "savetxt", "(", "self", ".", "path", "+", "'/pred_'", "+", "str", "(", "epoch", ")", "+", "'.txt'", ",", "\n", "self", ".", "y_scores", ",", "delimiter", "=", "','", ")", "\n", "fpr", ",", "tpr", ",", "_", "=", "roc_curve", "(", "self", ".", "y_true", ",", "self", ".", "y_scores", ")", "\n", "np", ".", "savetxt", "(", "self", ".", "path", "+", "'/fpr_'", "+", "str", "(", "epoch", ")", "+", "'.txt'", ",", "\n", "fpr", ",", "delimiter", "=", "','", ")", "\n", "np", ".", "savetxt", "(", "self", ".", "path", "+", "'/tpr_'", "+", "str", "(", "epoch", ")", "+", "'.txt'", ",", "\n", "tpr", ",", "delimiter", "=", "','", ")", "\n", "", "acc", "=", "self", ".", "err_mtr", ".", "value", "(", ")", "\n", "acc", "=", "acc", "[", "0", "]", "\n", "print", "(", "'\\tACC is {:.6f}'", ".", "format", "(", "acc", ")", ")", "\n", "self", ".", "fp", ".", "writelines", "(", "'Confusion Matrix for '", "+", "self", ".", "name", "+", "'\\n'", ")", "\n", "self", ".", "fp", ".", "writelines", "(", "str", "(", "conf_mtrx", ")", "+", "'\\n'", ")", "\n", "self", ".", "fp", ".", "writelines", "(", "'AUC is {:.4f}'", ".", "format", "(", "val_auc", ")", "+", "'\\n'", ")", "\n", "self", ".", "fp", ".", "writelines", "(", "'APR is {:.4f}'", ".", "format", "(", "average_precision", ")", "+", "'\\n'", ")", "\n", "self", ".", "fp", ".", "writelines", "(", "'ACC Rate is {:.4f}%'", ".", "format", "(", "acc", ")", "+", "'\\n'", ")", "\n", "self", ".", "fp", ".", "writelines", "(", "'\\n'", ")", "\n", "self", ".", "fp", ".", "flush", "(", ")", "\n", "\n", "# plot image", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "step", "(", "recall", ",", "precision", ",", "color", "=", "'b'", ",", "alpha", "=", "0.2", ",", "where", "=", "'post'", ")", "\n", "plt", ".", "fill_between", "(", "recall", ",", "precision", ",", "step", "=", "'post'", ",", "alpha", "=", "0.2", ",", "color", "=", "'b'", ")", "\n", "\n", "plt", ".", "xlabel", "(", "'Recall'", ")", "\n", "plt", ".", "ylabel", "(", "'Precision'", ")", "\n", "plt", ".", "ylim", "(", "[", "0.0", ",", "1.0", "]", ")", "\n", "plt", ".", "xlim", "(", "[", "0.0", ",", "1.0", "]", ")", "\n", "plt", ".", "title", "(", "'Mortality Precision-Recall curve: AP={0:0.4f}'", ".", "format", "(", "\n", "average_precision", ")", ")", "\n", "fig", ".", "savefig", "(", "self", ".", "path", "+", "'/precision_recall_curve_'", "+", "\n", "str", "(", "epoch", ")", "+", "'.pdf'", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "step", "(", "fpr", ",", "tpr", ",", "color", "=", "'b'", ",", "alpha", "=", "0.2", ",", "where", "=", "'post'", ")", "\n", "plt", ".", "fill_between", "(", "fpr", ",", "tpr", ",", "step", "=", "'post'", ",", "alpha", "=", "0.2", ",", "color", "=", "'b'", ")", "\n", "\n", "plt", ".", "xlabel", "(", "'False Postive Rate'", ")", "\n", "plt", ".", "ylabel", "(", "'True Positive Rate'", ")", "\n", "plt", ".", "ylim", "(", "[", "0.0", ",", "1.0", "]", ")", "\n", "plt", ".", "xlim", "(", "[", "0.0", ",", "1.0", "]", ")", "\n", "plt", ".", "title", "(", "'Mortality ROC curve: AUC={0:0.4f}'", ".", "format", "(", "val_auc", ")", ")", "\n", "\n", "fig", ".", "savefig", "(", "self", ".", "path", "+", "'/ROC_curve_'", "+", "str", "(", "epoch", ")", "+", "'.pdf'", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nostringattached_FGAM.None.utils.LogMeters.reset": [[211, 217], ["numpy.array().reshape", "numpy.array().reshape", "utils.LogMeters.conf_mtr.reset", "utils.LogMeters.auc_mtr.reset", "utils.LogMeters.err_mtr.reset", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.nostringattached_FGAM.None.utils.LogMeters.reset", "home.repos.pwc.inspect_result.nostringattached_FGAM.None.utils.LogMeters.reset", "home.repos.pwc.inspect_result.nostringattached_FGAM.None.utils.LogMeters.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "y_scores", "=", "np", ".", "array", "(", "[", "]", ")", ".", "reshape", "(", "0", ",", "1", ")", "\n", "self", ".", "y_true", "=", "np", ".", "array", "(", "[", "]", ")", ".", "reshape", "(", "0", ",", "1", ")", "\n", "self", ".", "conf_mtr", ".", "reset", "(", ")", "\n", "self", ".", "auc_mtr", ".", "reset", "(", ")", "\n", "self", ".", "err_mtr", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nostringattached_FGAM.None.utils.progressBar": [[30, 72], ["int", "sys.stdout.write", "range", "sys.stdout.write", "range", "sys.stdout.write", "time.time", "L.append", "L.append", "sys.stdout.write", "range", "range", "sys.stdout.write", "sys.stdout.flush", "time.time", "int", "sys.stdout.write", "sys.stdout.write", "L.append", "sys.stdout.write", "sys.stdout.write", "sys.stdout.write", "sys.stdout.write", "utils.format_time", "utils.format_time", "len", "int", "int"], "function", ["home.repos.pwc.inspect_result.nostringattached_FGAM.None.utils.format_time", "home.repos.pwc.inspect_result.nostringattached_FGAM.None.utils.format_time"], ["def", "progressBar", "(", "current", ",", "total", ",", "msg", "=", "None", ")", ":", "\n", "    ", "global", "last_time", ",", "begin_time", "\n", "if", "current", "==", "0", ":", "\n", "        ", "begin_time", "=", "time", ".", "time", "(", ")", "# Reset for new bar.", "\n", "\n", "", "cur_len", "=", "int", "(", "TOTAL_BAR_LENGTH", "*", "current", "/", "total", ")", "\n", "rest_len", "=", "int", "(", "TOTAL_BAR_LENGTH", "-", "cur_len", ")", "-", "1", "\n", "\n", "sys", ".", "stdout", ".", "write", "(", "' ['", ")", "\n", "for", "i", "in", "range", "(", "cur_len", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'='", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "'>'", ")", "\n", "for", "i", "in", "range", "(", "rest_len", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'.'", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "']'", ")", "\n", "\n", "cur_time", "=", "time", ".", "time", "(", ")", "\n", "step_time", "=", "cur_time", "-", "last_time", "\n", "last_time", "=", "cur_time", "\n", "tot_time", "=", "cur_time", "-", "begin_time", "\n", "\n", "L", "=", "[", "]", "\n", "L", ".", "append", "(", "'  Step: %s'", "%", "format_time", "(", "step_time", ")", ")", "\n", "L", ".", "append", "(", "' | Tot: %s'", "%", "format_time", "(", "tot_time", ")", ")", "\n", "if", "msg", ":", "\n", "        ", "L", ".", "append", "(", "' | '", "+", "msg", ")", "\n", "\n", "", "msg", "=", "''", ".", "join", "(", "L", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "msg", ")", "\n", "for", "i", "in", "range", "(", "term_width", "-", "int", "(", "TOTAL_BAR_LENGTH", ")", "-", "len", "(", "msg", ")", "-", "3", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "' '", ")", "\n", "\n", "# Go back to the center of the bar.", "\n", "", "for", "i", "in", "range", "(", "term_width", "-", "int", "(", "TOTAL_BAR_LENGTH", "/", "2", ")", "+", "2", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\b'", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "' %d/%d '", "%", "(", "current", "+", "1", ",", "total", ")", ")", "\n", "\n", "if", "current", "<", "total", "-", "1", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\r'", ")", "\n", "", "else", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\n'", ")", "\n", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nostringattached_FGAM.None.utils.format_time": [[73, 104], ["int", "int", "int", "int", "int", "str", "str", "str", "str", "str"], "function", ["None"], ["", "def", "format_time", "(", "seconds", ")", ":", "\n", "    ", "days", "=", "int", "(", "seconds", "/", "3600", "/", "24", ")", "\n", "seconds", "=", "seconds", "-", "days", "*", "3600", "*", "24", "\n", "hours", "=", "int", "(", "seconds", "/", "3600", ")", "\n", "seconds", "=", "seconds", "-", "hours", "*", "3600", "\n", "minutes", "=", "int", "(", "seconds", "/", "60", ")", "\n", "seconds", "=", "seconds", "-", "minutes", "*", "60", "\n", "secondsf", "=", "int", "(", "seconds", ")", "\n", "seconds", "=", "seconds", "-", "secondsf", "\n", "millis", "=", "int", "(", "seconds", "*", "1000", ")", "\n", "\n", "f", "=", "''", "\n", "i", "=", "1", "\n", "if", "days", ">", "0", ":", "\n", "        ", "f", "+=", "str", "(", "days", ")", "+", "'D'", "\n", "i", "+=", "1", "\n", "", "if", "hours", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "hours", ")", "+", "'h'", "\n", "i", "+=", "1", "\n", "", "if", "minutes", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "minutes", ")", "+", "'m'", "\n", "i", "+=", "1", "\n", "", "if", "secondsf", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "secondsf", ")", "+", "'s'", "\n", "i", "+=", "1", "\n", "", "if", "millis", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "millis", ")", "+", "'ms'", "\n", "i", "+=", "1", "\n", "", "if", "f", "==", "''", ":", "\n", "        ", "f", "=", "'0ms'", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.nostringattached_FGAM.None.utils.saveCheckpoint": [[105, 109], ["torch.save", "torch.save"], "function", ["None"], ["", "def", "saveCheckpoint", "(", "state", ",", "filename", ",", "is_best", "=", "False", ")", ":", "\n", "    ", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "        ", "torch", ".", "save", "(", "state", ",", "'best_'", "+", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nostringattached_FGAM.None.utils.saveMkdir": [[110, 115], ["os.mkdir"], "function", ["None"], ["", "", "def", "saveMkdir", "(", "path", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "os", ".", "mkdir", "(", "path", ")", "\n", "", "except", "OSError", ":", "\n", "        ", "pass", "\n", "\n"]]}