{"home.repos.pwc.inspect_result.asonabend_ESRL.None.utils.riverSwim.__init__": [[22, 36], ["gym.Env.__init__", "gym.spaces.Discrete", "gym.spaces.Discrete"], "methods", ["home.repos.pwc.inspect_result.asonabend_ESRL.None.utils.experienceRepository.__init__"], ["def", "__init__", "(", "self", ",", "episode_length", ")", ":", "\n", "        ", "super", "(", "riverSwim", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "time", "=", "0", "\n", "self", ".", "state", "=", "0", "\n", "self", ".", "episode_length", "=", "episode_length", "\n", "self", ".", "done", "=", "False", "\n", "self", ".", "_max_episode_steps", "=", "episode_length", "\n", "# Define action and observation space", "\n", "N_DISCRETE_ACTIONS", "=", "2", "\n", "N_DISCRETE_STATES", "=", "6", "\n", "#N_TIME_STEPS = episode_length", "\n", "self", ".", "action_space", "=", "spaces", ".", "Discrete", "(", "N_DISCRETE_ACTIONS", ")", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Discrete", "(", "(", "N_DISCRETE_STATES", ")", ")", "\n", "self", ".", "observation_dim", "=", "2", "\n", "# Execute one time step within the environment", "\n"]], "home.repos.pwc.inspect_result.asonabend_ESRL.None.utils.riverSwim.step": [[37, 69], ["numpy.random.binomial", "numpy.random.choice", "numpy.random.binomial"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "if", "action", "not", "in", "[", "0", ",", "1", "]", ":", "\n", "            ", "return", "'error'", "\n", "", "if", "self", ".", "time", "==", "self", ".", "episode_length", ":", "\n", "            ", "self", ".", "done", "=", "True", "\n", "", "self", ".", "time", "+=", "1", "\n", "self", ".", "reward", "=", "0", "# no reward", "\n", "if", "self", ".", "state", "==", "0", ":", "\n", "            ", "if", "action", "==", "1", ":", "# swim to the right", "\n", "                ", "if", "np", ".", "random", ".", "binomial", "(", "1", ",", ".6", ")", "==", "1", ":", "# w.p. = 0.6 get to the right otherwise stay in state = 0", "\n", "                    ", "self", ".", "state", "=", "1", "\n", "", "", "else", ":", "#action == 0, stays in state = 0 and has the reward 5/1000", "\n", "                ", "self", ".", "reward", "=", "5", "/", "1000", "\n", "", "", "elif", "self", ".", "state", "==", "5", ":", "\n", "            ", "if", "action", "==", "1", ":", "# swim to the right", "\n", "                ", "if", "np", ".", "random", ".", "binomial", "(", "1", ",", ".6", ")", "==", "1", ":", "# w.p. = 0.6 swim succesfully to the right ", "\n", "                    ", "self", ".", "reward", "=", "1", "\n", "", "else", ":", "# w.p. 0.4 current takes it to the left", "\n", "                    ", "self", ".", "state", "=", "4", "\n", "", "", "else", ":", "# action == 0", "\n", "                ", "self", ".", "state", "=", "4", "\n", "", "", "else", ":", "#states 1,2,3,4", "\n", "            ", "if", "action", "==", "1", ":", "# swim to the right", "\n", "                ", "dice", "=", "np", ".", "random", ".", "choice", "(", "3", ",", "1", ",", "p", "=", "[", ".05", ",", "0.6", ",", "0.35", "]", ")", "\n", "if", "dice", "==", "0", ":", "# w.p. = 0.05 current takes it to the left", "\n", "                    ", "self", ".", "state", "-=", "1", "\n", "", "elif", "dice", "==", "2", ":", "# w.p. = 0.6 current it stays in the same state, w.p. 0.35 gets to the right", "\n", "                    ", "self", ".", "state", "+=", "1", "\n", "", "", "else", ":", "# action == 0", "\n", "                ", "self", ".", "state", "-=", "1", "\n", "", "", "info", "=", "'na'", "\n", "return", "self", ".", "state", ",", "self", ".", "reward", ",", "self", ".", "done", ",", "info", "\n", "", "def", "reset", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.asonabend_ESRL.None.utils.riverSwim.reset": [[69, 75], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "# Reset the state of the environment to an initial state", "\n", "        ", "self", ".", "time", "=", "0", "\n", "self", ".", "state", "=", "0", "\n", "self", ".", "done", "=", "False", "\n", "return", "self", ".", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.asonabend_ESRL.None.utils.experienceRepository.__init__": [[224, 228], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "limit", ")", ":", "\n", "        ", "self", ".", "limit", "=", "limit", "\n", "self", ".", "memory", "=", "[", "]", "\n", "self", ".", "position", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.asonabend_ESRL.None.utils.experienceRepository.store": [[229, 235], ["Transition", "len", "utils.experienceRepository.memory.append"], "methods", ["None"], ["", "def", "store", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "\"\"\"Stores a transition.\"\"\"", "\n", "if", "len", "(", "self", ".", "memory", ")", "<", "self", ".", "limit", ":", "\n", "            ", "self", ".", "memory", ".", "append", "(", "None", ")", "\n", "", "self", ".", "memory", "[", "self", ".", "position", "]", "=", "Transition", "(", "*", "args", ")", "\n", "self", ".", "position", "=", "(", "self", ".", "position", "+", "1", ")", "%", "self", ".", "limit", "\n", "\n"]], "home.repos.pwc.inspect_result.asonabend_ESRL.None.utils.experienceRepository.sample": [[236, 238], ["random.sample"], "methods", ["home.repos.pwc.inspect_result.asonabend_ESRL.None.utils.experienceRepository.sample"], ["", "def", "sample", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "return", "random", ".", "sample", "(", "self", ".", "memory", ",", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.asonabend_ESRL.None.utils.experienceRepository.__len__": [[239, 241], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "memory", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.asonabend_ESRL.None.utils.test_policy": [[82, 114], ["numpy.random.seed", "utils.experienceRepository", "utils.riverSwim", "tqdm.tqdm", "Transition", "utils.build_H_tk", "range", "utils.riverSwim.reset", "range", "rewrds_per_ep.append", "utils.experienceRepository.store", "int", "utils.riverSwim.step", "numpy.vstack", "numpy.vstack", "numpy.vstack", "sum", "zip", "numpy.random.binomial", "int", "numpy.random.choice"], "function", ["home.repos.pwc.inspect_result.asonabend_ESRL.None.utils.build_H_tk", "home.repos.pwc.inspect_result.asonabend_ESRL.None.utils.riverSwim.reset", "home.repos.pwc.inspect_result.asonabend_ESRL.None.utils.experienceRepository.store", "home.repos.pwc.inspect_result.asonabend_ESRL.None.utils.riverSwim.step"], ["", "", "def", "test_policy", "(", "mu_st", ",", "tau", ",", "seed", ",", "epsilon", "=", "0", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "test_episodes", "=", "10000", "\n", "test_episodes_repo", "=", "experienceRepository", "(", "test_episodes", ")", "\n", "# instantiate riverswim environment:", "\n", "env", "=", "riverSwim", "(", "episode_length", "=", "tau", ")", "\n", "#### OPPSRL Algorithm ", "\n", "rewrds_per_ep", "=", "[", "]", "\n", "for", "k", "in", "tqdm", "(", "range", "(", "int", "(", "test_episodes", ")", ")", ")", ":", "\n", "        ", "state", "=", "env", ".", "reset", "(", ")", "\n", "state_seq", "=", "state", "\n", "reward_seq", ",", "action_seq", "=", "-", "100", ",", "-", "100", "\n", "for", "t", "in", "range", "(", "tau", ")", ":", "\n", "            ", "if", "np", ".", "random", ".", "binomial", "(", "1", ",", "epsilon", ")", "==", "1", ":", "# w.p. epsilon choose random action", "\n", "                ", "action", "=", "int", "(", "np", ".", "random", ".", "choice", "(", "2", ",", "1", ",", "p", "=", "[", "0.5", ",", "0.5", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "action", "=", "mu_st", "[", "(", "state", ",", "t", ")", "]", "# w.p. 1-epsilon choose mu_k(s)", "\n", "", "next_state", ",", "reward", ",", "done", ",", "_", "=", "env", ".", "step", "(", "action", ")", "\n", "# store episode", "\n", "reward_seq", "=", "np", ".", "vstack", "(", "(", "reward_seq", ",", "reward", ")", ")", "\n", "action_seq", "=", "np", ".", "vstack", "(", "(", "action_seq", ",", "action", ")", ")", "\n", "state", "=", "next_state", "\n", "state_seq", "=", "np", ".", "vstack", "(", "(", "state_seq", ",", "state", ")", ")", "\n", "# store episode in repo", "\n", "", "rewrds_per_ep", ".", "append", "(", "sum", "(", "reward_seq", "[", "1", ":", "]", ")", ")", "\n", "test_episodes_repo", ".", "store", "(", "state_seq", "[", ":", "-", "1", "]", ",", "action_seq", "[", "1", ":", "]", ",", "[", "]", ",", "reward_seq", "[", "1", ":", "]", ")", "\n", "# Compute H_tk:", "\n", "", "test_episodes", "=", "test_episodes_repo", ".", "memory", "\n", "test_samp", "=", "Transition", "(", "*", "zip", "(", "*", "test_episodes", ")", ")", "\n", "test_H_tk", "=", "build_H_tk", "(", "test_samp", ",", "k", ")", "\n", "all_rewards", "=", "test_H_tk", "[", ":", ",", "2", "]", "\n", "return", "rewrds_per_ep", "\n", "\n"]], "home.repos.pwc.inspect_result.asonabend_ESRL.None.utils.step_IS_eval_mu": [[121, 136], ["range", "V_mu.append", "numpy.mean", "numpy.std", "V_mu.append", "pi_tsa.keys"], "function", ["None"], ["", "def", "step_IS_eval_mu", "(", "H_T", ",", "mu_st", ",", "pi_tsa", ",", "tau", ")", ":", "\n", "# H_t's columns are [state,action,reward,next state]", "\n", "    ", "V_mu", ",", "curr_V", "=", "[", "]", ",", "0", "\n", "for", "t", "in", "range", "(", "H_T", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "if", "t", "%", "tau", "==", "0", ":", "\n", "            ", "V_mu", ".", "append", "(", "curr_V", ")", "\n", "curr_V", ",", "rho", "=", "0", ",", "1", "\n", "", "s", ",", "a", ",", "r", "=", "H_T", "[", "t", ",", "0", "]", ",", "H_T", "[", "t", ",", "1", "]", ",", "H_T", "[", "t", ",", "2", "]", "\n", "if", "(", "t", "%", "tau", ",", "s", ",", "a", ")", "in", "pi_tsa", ".", "keys", "(", ")", ":", "\n", "            ", "rho", "*=", "(", "a", "==", "mu_st", "[", "(", "s", ",", "t", "%", "tau", ")", "]", ")", "/", "pi_tsa", "[", "(", "t", "%", "tau", ",", "s", ",", "a", ")", "]", "\n", "", "else", ":", "\n", "            ", "rho", "=", "1", "\n", "", "curr_V", "+=", "rho", "*", "r", "\n", "", "V_mu", ".", "append", "(", "curr_V", ")", "\n", "return", "np", ".", "mean", "(", "V_mu", ")", ",", "np", ".", "std", "(", "V_mu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.asonabend_ESRL.None.utils.step_WIS_eval_mu": [[139, 170], ["range", "range", "V_mu.append", "numpy.mean", "numpy.std", "pi_tsa.keys", "rho_s[].append", "V_mu.append", "pi_tsa.keys", "numpy.mean", "range", "range"], "function", ["None"], ["", "def", "step_WIS_eval_mu", "(", "H_T", ",", "mu_st", ",", "pi_tsa", ",", "tau", ")", ":", "\n", "# H_t's columns are [state,action,reward,next state]", "\n", "# Compute denominator for weighted importance sampling:", "\n", "    ", "T", "=", "H_T", ".", "shape", "[", "0", "]", "//", "tau", "\n", "rho_s", ",", "i", "=", "{", "i", ":", "[", "1", "]", "for", "i", "in", "range", "(", "T", ")", "}", ",", "-", "1", "\n", "for", "t", "in", "range", "(", "H_T", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "if", "t", "%", "tau", "==", "0", ":", "\n", "            ", "i", "+=", "1", "\n", "", "s", ",", "a", ",", "r", "=", "H_T", "[", "t", ",", ":", "3", "]", "\n", "if", "(", "t", "%", "tau", ",", "s", ",", "a", ")", "in", "pi_tsa", ".", "keys", "(", ")", ":", "\n", "            ", "rho_s", "[", "i", "]", ".", "append", "(", "rho_s", "[", "i", "]", "[", "-", "1", "]", "*", "(", "a", "==", "mu_st", "[", "(", "s", ",", "t", "%", "tau", ")", "]", ")", "/", "pi_tsa", "[", "(", "t", "%", "tau", ",", "s", ",", "a", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "rho", "=", "1", "\n", "# H_t's columns are [state,action,reward,next state]", "\n", "", "", "V_mu", ",", "curr_V", "=", "[", "]", ",", "0", "\n", "for", "t", "in", "range", "(", "H_T", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "if", "t", "%", "tau", "==", "0", ":", "\n", "            ", "V_mu", ".", "append", "(", "curr_V", ")", "\n", "curr_V", ",", "rho", "=", "0", ",", "1", "\n", "", "s", ",", "a", ",", "r", "=", "H_T", "[", "t", ",", "0", "]", ",", "H_T", "[", "t", ",", "1", "]", ",", "H_T", "[", "t", ",", "2", "]", "\n", "if", "(", "t", "%", "tau", ",", "s", ",", "a", ")", "in", "pi_tsa", ".", "keys", "(", ")", ":", "\n", "            ", "w_t", "=", "np", ".", "mean", "(", "[", "rho_s", "[", "i", "]", "[", "t", "%", "tau", "]", "for", "i", "in", "range", "(", "T", ")", "]", ")", "\n", "rho", "*=", "(", "a", "==", "mu_st", "[", "(", "s", ",", "t", "%", "tau", ")", "]", ")", "/", "pi_tsa", "[", "(", "t", "%", "tau", ",", "s", ",", "a", ")", "]", "\n", "", "else", ":", "\n", "            ", "rho", "=", "1", "\n", "", "if", "w_t", "==", "0", ":", "\n", "            ", "curr_V", "+=", "rho", "*", "r", "\n", "", "else", ":", "\n", "            ", "curr_V", "+=", "rho", "*", "r", "/", "w_t", "\n", "", "", "V_mu", ".", "append", "(", "curr_V", ")", "\n", "return", "np", ".", "mean", "(", "V_mu", ")", ",", "np", ".", "std", "(", "V_mu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.asonabend_ESRL.None.utils.sample_Vs": [[174, 205], ["numpy.random.seed", "numpy.zeros", "numpy.zeros", "utils.sampleK_MDPs", "tqdm.tqdm", "range", "range", "len", "int", "int", "numpy.random.choice", "numpy.random.binomial", "numpy.random.choice", "numpy.random.choice", "numpy.where", "numpy.product", "len"], "function", ["home.repos.pwc.inspect_result.asonabend_ESRL.None.utils.sampleK_MDPs"], ["", "def", "sample_Vs", "(", "pi_sa", ",", "H_Test", ",", "H_Train", ",", "mu_st", ",", "samps_No", ",", "tau", ",", "A_space", ",", "S_space", ",", "seed", ",", "sepsis", "=", "False", ",", "epsilon", "=", "0", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "V_samps", "=", "np", ".", "zeros", "(", "(", "samps_No", ")", ")", "\n", "S_samps", "=", "np", ".", "zeros", "(", "(", "samps_No", ")", ")", "\n", "# Sample MDP from posterior based on IPW repo:", "\n", "R_sa_dict", ",", "P_sas_dict", "=", "sampleK_MDPs", "(", "S_card", "=", "len", "(", "S_space", ")", ",", "A_space", "=", "A_space", ",", "H_tk", "=", "H_Train", ",", "K", "=", "samps_No", ",", "sepsis", "=", "sepsis", ")", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "samps_No", ")", ")", ":", "\n", "# Sample MDP from posterior based on IPW repo:", "\n", "        ", "R_sa", ",", "P_sas", "=", "R_sa_dict", "[", "i", "]", ",", "P_sas_dict", "[", "i", "]", "\n", "# initialize value V and policy function dictionaries:", "\n", "if", "sepsis", ":", "\n", "            ", "start_s", "=", "np", ".", "where", "(", "H_Test", "[", ":", ",", "3", "]", "==", "-", "1", ")", "[", "0", "]", "+", "1", "# index of initial states rows", "\n", "s", "=", "int", "(", "np", ".", "random", ".", "choice", "(", "H_Test", "[", "start_s", "[", ":", "-", "1", "]", ",", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "s", "=", "0", "#all episodes start at state = 0 in riverswim", "\n", "", "V_s0", "=", "0", "\n", "weights", "=", "[", "1", "]", "\n", "for", "t", "in", "range", "(", "tau", ")", ":", "\n", "# Choose action a according to (random) policy    ", "\n", "            ", "if", "np", ".", "random", ".", "binomial", "(", "1", ",", "epsilon", ")", "==", "1", ":", "# w.p. epsilon choose random action", "\n", "                ", "a", "=", "np", ".", "random", ".", "choice", "(", "A_space", ")", "\n", "", "else", ":", "\n", "                ", "a", "=", "mu_st", "[", "(", "s", ",", "t", ")", "]", "# w.p. 1-epsilon choose mu_k(s)", "\n", "", "sum_pi", "=", "1", "#sum([np.product(weights)/pi_sa[(s,a)] for a in A_space])", "\n", "#weights.append(1/pi_sa[(s,a)])            ", "\n", "V_s0", "+=", "R_sa", "[", "(", "s", ",", "a", ")", "]", "*", "np", ".", "product", "(", "weights", ")", "/", "sum_pi", "\n", "# Sample an action according to the sampled MDP and action taken", "\n", "s", "=", "int", "(", "np", ".", "random", ".", "choice", "(", "len", "(", "S_space", ")", ",", "1", ",", "p", "=", "P_sas", "[", "(", "s", ",", "a", ")", "]", ")", ")", "\n", "", "V_samps", "[", "i", "]", "=", "V_s0", "\n", "S_samps", "[", "i", "]", "=", "s", "\n", "", "return", "V_samps", ",", "S_samps", "\n", "\n"]], "home.repos.pwc.inspect_result.asonabend_ESRL.None.utils.sampleK_MDPs": [[247, 281], ["float", "range", "utils.normal_gamma_sample", "numpy.random.dirichlet", "range", "range", "range", "numpy.where", "numpy.unique", "sum", "numpy.product", "int", "numpy.array"], "function", ["home.repos.pwc.inspect_result.asonabend_ESRL.None.utils.normal_gamma_sample"], ["", "", "def", "sampleK_MDPs", "(", "S_card", ",", "A_space", ",", "H_tk", ",", "K", ",", "pi_sa", "=", "None", ",", "sepsis", "=", "False", ")", ":", "\n", "    ", "if", "sepsis", ":", "\n", "        ", "prior_par", "=", "{", "'m0'", ":", "0", ",", "'lamb0'", ":", "1", ",", "'alpha0'", ":", "5.01", ",", "'gamma0'", ":", "1", "}", "\n", "", "else", ":", "\n", "        ", "prior_par", "=", "{", "'m0'", ":", "0", ",", "'lamb0'", ":", "1", ",", "'alpha0'", ":", "1.01", ",", "'gamma0'", ":", "1", "}", "# Riverswim", "\n", "#prior_par = {'m0':1,'lamb0':.01,'alpha0':1.1,'gamma0':1}    # Frozen lake", "\n", "#prior_par = {'m0':1,'lamb0':1,'alpha0':1.01,'gamma0':1}", "\n", "#prior_par = {'m0':0,'lamb0':1e4,'alpha0':5.01,'gamma0':1}", "\n", "#{'m0':0,'lamb0':1e+4,'alpha0':5.01,'gamma0':1}", "\n", "", "all_states", "=", "[", "float", "(", "i", ")", "for", "i", "in", "range", "(", "S_card", ")", "]", "\n", "P_sas_dict", ",", "R_sa_dict", "=", "{", "k", ":", "{", "}", "for", "k", "in", "range", "(", "K", ")", "}", ",", "{", "k", ":", "{", "}", "for", "k", "in", "range", "(", "K", ")", "}", "\n", "for", "a", "in", "A_space", ":", "\n", "        ", "for", "s", "in", "all_states", ":", "\n", "            ", "H_sa", "=", "None", "\n", "dirich_alpha", "=", "[", "1", "/", "S_card", "]", "*", "S_card", "# reset state-action probabilities to 1/alpha", "\n", "if", "H_tk", "is", "not", "None", ":", "\n", "                ", "indx", "=", "np", ".", "where", "(", "np", ".", "product", "(", "np", ".", "array", "(", "[", "s", ",", "a", "]", ")", "==", "H_tk", "[", ":", ",", ":", "2", "]", ",", "axis", "=", "1", ")", "==", "1", ")", "[", "0", "]", "\n", "if", "indx", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "## Check if we should use informative prior:", "\n", "#if pi_sa is not None:", "\n", "#prior_par['m0'],prior_par['lamb0'] = pi_sa[(s,a)],len(indx)", "\n", "                    ", "H_sa", "=", "H_tk", "[", "indx", ",", ":", "]", "\n", "# update dirichlet's alphas with current counts", "\n", "for", "nxt_s", "in", "np", ".", "unique", "(", "H_sa", "[", ":", ",", "3", "]", ")", "[", "1", ":", "]", ":", "# all next states (remove -inf)", "\n", "                        ", "dirich_alpha", "[", "int", "(", "nxt_s", ")", "]", "+=", "sum", "(", "nxt_s", "==", "H_sa", "[", ":", ",", "3", "]", ")", "# add counts for that (s,a) pair to the Dirich. parameter", "\n", "# sample means for the reward distributions        ", "\n", "", "", "", "K_Rs", "=", "normal_gamma_sample", "(", "m0", "=", "prior_par", "[", "'m0'", "]", ",", "lamb0", "=", "prior_par", "[", "'lamb0'", "]", ",", "alpha0", "=", "prior_par", "[", "'alpha0'", "]", ",", "gamma0", "=", "prior_par", "[", "'gamma0'", "]", ",", "H_sa", "=", "H_sa", ",", "K", "=", "K", ")", "\n", "#prior_par = {'m0':1,'lamb0':1,'alpha0':1.0001,'gamma0':1}", "\n", "# Draw random vector of probabilities from Dir. posterior for the transition distribution:", "\n", "K_P_sas", "=", "np", ".", "random", ".", "dirichlet", "(", "dirich_alpha", ",", "K", ")", "\n", "for", "k", "in", "range", "(", "K", ")", ":", "\n", "                ", "R_sa_dict", "[", "k", "]", "[", "(", "s", ",", "a", ")", "]", "=", "K_Rs", "[", "k", "]", "\n", "P_sas_dict", "[", "k", "]", "[", "(", "s", ",", "a", ")", "]", "=", "K_P_sas", "[", "k", "]", "\n", "", "", "", "return", "R_sa_dict", ",", "P_sas_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.asonabend_ESRL.None.utils.normal_gamma_sample": [[283, 299], ["numpy.random.gamma", "numpy.random.normal", "numpy.mean", "numpy.mean"], "function", ["None"], ["", "def", "normal_gamma_sample", "(", "m0", ",", "lamb0", ",", "alpha0", ",", "gamma0", ",", "H_sa", "=", "None", ",", "K", "=", "1", ")", ":", "\n", "    ", "m", ",", "lamb", ",", "alpha", ",", "gamma", "=", "m0", ",", "lamb0", ",", "alpha0", ",", "gamma0", "\n", "if", "H_sa", "is", "not", "None", ":", "\n", "        ", "n_sa", "=", "H_sa", ".", "shape", "[", "0", "]", "\n", "r_bar", "=", "np", ".", "mean", "(", "H_sa", "[", ":", ",", "2", "]", ")", "\n", "r_sq_bar", "=", "np", ".", "mean", "(", "H_sa", "[", ":", ",", "2", "]", "**", "2", ")", "\n", "m", "=", "(", "lamb0", "*", "m0", "+", "n_sa", "*", "r_bar", ")", "/", "(", "lamb0", "+", "n_sa", ")", "\n", "lamb", "=", "lamb0", "+", "n_sa", "\n", "alpha", "=", "alpha0", "+", "n_sa", "/", "2", "\n", "gamma", "=", "gamma0", "+", "0.5", "*", "n_sa", "*", "(", "r_sq_bar", "-", "r_bar", "**", "2", ")", "+", "(", "n_sa", "*", "lamb0", "*", "(", "r_bar", "-", "m0", ")", "**", "2", ")", "/", "(", "2", "*", "(", "lamb0", "+", "n_sa", ")", ")", "\n", "#else:", "\n", "#m,lamb,alpha,gamma=m0,lamb0,alpha0,gamma0", "\n", "", "tautau", "=", "np", ".", "random", ".", "gamma", "(", "alpha", ",", "gamma", ",", "K", ")", "\n", "sigma", "=", "1", "/", "(", "lamb", "*", "tautau", ")", "\n", "mu_sa", "=", "np", ".", "random", ".", "normal", "(", "m", ",", "sigma", ",", "K", ")", "\n", "return", "mu_sa", "\n", "\n"]], "home.repos.pwc.inspect_result.asonabend_ESRL.None.utils.train_pi": [[306, 357], ["utils.experienceRepository", "tqdm.tqdm", "pickle.dump", "utils.riverSwim", "gym.make", "range", "utils.sampleK_MDPs", "utils.compute_policy", "gym.make.reset", "range", "utils.experienceRepository.store", "open", "range", "range", "int", "gym.make.step", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.hstack", "numpy.hstack", "numpy.vstack", "len", "episode_rewards.append", "gym.make.reset", "numpy.vstack", "numpy.vstack", "float", "float"], "function", ["home.repos.pwc.inspect_result.asonabend_ESRL.None.utils.sampleK_MDPs", "home.repos.pwc.inspect_result.asonabend_ESRL.None.utils.compute_policy", "home.repos.pwc.inspect_result.asonabend_ESRL.None.utils.riverSwim.reset", "home.repos.pwc.inspect_result.asonabend_ESRL.None.utils.experienceRepository.store", "home.repos.pwc.inspect_result.asonabend_ESRL.None.utils.riverSwim.step", "home.repos.pwc.inspect_result.asonabend_ESRL.None.utils.riverSwim.reset"], ["", "def", "train_pi", "(", "env_name", ")", ":", "\n", "    ", "if", "env_name", "==", "'Riverswim'", ":", "# instantiate riverswim environment", "\n", "        ", "ep_length", "=", "20", "\n", "env", "=", "riverSwim", "(", "episode_length", "=", "ep_length", ")", "\n", "", "else", ":", "\n", "        ", "ep_length", "=", "1", "\n", "env", "=", "gym", ".", "make", "(", "env_name", ")", "\n", "# State and action spaces            ", "\n", "", "S_space", "=", "[", "i", "for", "i", "in", "range", "(", "env", ".", "observation_space", ".", "n", ")", "]", "\n", "A_space", "=", "[", "i", "for", "i", "in", "range", "(", "env", ".", "action_space", ".", "n", ")", "]", "\n", "\n", "# instantiate memory:", "\n", "episodes_repo", "=", "experienceRepository", "(", "10000", ")", "\n", "episode_rewards", "=", "[", "]", "\n", "H_tk", "=", "None", "\n", "for", "k", "in", "tqdm", "(", "range", "(", "int", "(", "1e3", ")", ")", ")", ":", "\n", "# Sample MDP:", "\n", "        ", "R_sa", ",", "P_sas", "=", "sampleK_MDPs", "(", "S_card", "=", "len", "(", "S_space", ")", ",", "A_space", "=", "A_space", ",", "H_tk", "=", "H_tk", ",", "K", "=", "1", ")", "\n", "R_sa", ",", "P_sas", "=", "R_sa", "[", "0", "]", ",", "P_sas", "[", "0", "]", "\n", "# Compute mu_k", "\n", "muK_st", "=", "compute_policy", "(", "R_sa", ",", "P_sas", ",", "A_space", ",", "S_space", ",", "ep_length", ")", "\n", "state", "=", "env", ".", "reset", "(", ")", "\n", "state_seq", "=", "state", "\n", "reward_seq", ",", "action_seq", "=", "-", "100", ",", "-", "100", "\n", "loop_len", "=", "ep_length", "if", "env_name", "==", "'Riverswim'", "else", "1000", "\n", "for", "t", "in", "range", "(", "loop_len", ")", ":", "\n", "            ", "s_ext", "=", "t", "if", "env_name", "==", "'Riverswim'", "else", "0", "\n", "action", "=", "muK_st", "[", "(", "state", ",", "s_ext", ")", "]", "\n", "next_state", ",", "reward", ",", "done", ",", "_", "=", "env", ".", "step", "(", "action", ")", "\n", "# store episode", "\n", "reward_seq", "=", "np", ".", "vstack", "(", "(", "reward_seq", ",", "reward", ")", ")", "\n", "action_seq", "=", "np", ".", "vstack", "(", "(", "action_seq", ",", "action", ")", ")", "\n", "state", "=", "next_state", "\n", "state_seq", "=", "np", ".", "vstack", "(", "(", "state_seq", ",", "state", ")", ")", "\n", "# Check if done (Riverswim is done at t=ep_length)", "\n", "if", "env_name", "!=", "'Riverswim'", "and", "done", ":", "\n", "                ", "episode_rewards", ".", "append", "(", "reward", ")", "\n", "env", ".", "reset", "(", ")", "\n", "break", "\n", "# store episode in repo", "\n", "", "", "episodes_repo", ".", "store", "(", "state_seq", "[", ":", "-", "1", "]", ",", "action_seq", "[", "1", ":", "]", ",", "[", "]", ",", "reward_seq", "[", "1", ":", "]", ")", "\n", "# Compute H_tk for posterior:", "\n", "\n", "if", "k", "==", "0", ":", "\n", "            ", "H_tk", "=", "np", ".", "hstack", "(", "(", "state_seq", "[", ":", "-", "1", "]", ",", "action_seq", "[", "1", ":", "]", ",", "reward_seq", "[", "1", ":", "]", ",", "np", ".", "vstack", "(", "(", "state_seq", "[", "2", ":", "]", ",", "float", "(", "\"-inf\"", ")", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "sars_pairs", "=", "np", ".", "hstack", "(", "(", "state_seq", "[", ":", "-", "1", "]", ",", "action_seq", "[", "1", ":", "]", ",", "reward_seq", "[", "1", ":", "]", ",", "np", ".", "vstack", "(", "(", "state_seq", "[", "2", ":", "]", ",", "float", "(", "\"-inf\"", ")", ")", ")", ")", ")", "\n", "H_tk", "=", "np", ".", "vstack", "(", "(", "H_tk", ",", "sars_pairs", ")", ")", "\n", "\n", "", "", "pickle", ".", "dump", "(", "{", "'R_sa'", ":", "R_sa", ",", "'P_sas'", ":", "P_sas", ",", "'muK_st'", ":", "muK_st", "}", ",", "\n", "open", "(", "'./models/'", "+", "env_name", "+", "'_PSRL_optPolicy.p'", ",", "'wb'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.asonabend_ESRL.None.utils.build_H_tk": [[359, 368], ["numpy.hstack", "range", "numpy.vstack", "numpy.hstack", "numpy.vstack", "numpy.vstack", "float", "float"], "function", ["None"], ["", "def", "build_H_tk", "(", "samp", ",", "epi_no", ")", ":", "\n", "# build matrix of observations with concatenated episods, whith rows of the form: [state, action, reward]", "\n", "    ", "tt", "=", "0", "\n", "H_tk", "=", "np", ".", "hstack", "(", "(", "samp", ".", "state", "[", "tt", "]", ",", "samp", ".", "action", "[", "tt", "]", ",", "samp", ".", "reward", "[", "tt", "]", ",", "np", ".", "vstack", "(", "(", "samp", ".", "state", "[", "tt", "]", "[", "1", ":", "]", ",", "float", "(", "\"-inf\"", ")", ")", ")", ")", ")", "\n", "for", "tt", "in", "range", "(", "1", ",", "epi_no", ")", ":", "\n", "        ", "next_state", "=", "np", ".", "vstack", "(", "(", "samp", ".", "state", "[", "tt", "]", "[", "1", ":", "]", ",", "float", "(", "\"-inf\"", ")", ")", ")", "\n", "sars_pairs", "=", "np", ".", "hstack", "(", "(", "samp", ".", "state", "[", "tt", "]", ",", "samp", ".", "action", "[", "tt", "]", ",", "samp", ".", "reward", "[", "tt", "]", ",", "next_state", ")", ")", "\n", "H_tk", "=", "np", ".", "vstack", "(", "(", "H_tk", ",", "sars_pairs", ")", ")", "\n", "", "return", "H_tk", "\n", "\n"]], "home.repos.pwc.inspect_result.asonabend_ESRL.None.utils.generate_dataset": [[372, 421], ["pickle.load", "utils.experienceRepository", "numpy.random.seed", "range", "Transition", "utils.build_H_tk", "pickle.dump", "os.path.exists", "print", "sys.stderr.write", "numpy.random.seed", "utils.train_pi", "open", "utils.riverSwim", "int", "utils.riverSwim.reset", "range", "utils.experienceRepository.store", "open", "utils.riverSwim.step", "numpy.vstack", "numpy.vstack", "numpy.vstack", "zip", "numpy.random.binomial", "int", "numpy.random.choice", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.asonabend_ESRL.None.utils.build_H_tk", "home.repos.pwc.inspect_result.asonabend_ESRL.None.utils.train_pi", "home.repos.pwc.inspect_result.asonabend_ESRL.None.utils.riverSwim.reset", "home.repos.pwc.inspect_result.asonabend_ESRL.None.utils.experienceRepository.store", "home.repos.pwc.inspect_result.asonabend_ESRL.None.utils.riverSwim.step"], ["", "def", "generate_dataset", "(", "epsilon", ",", "episodes", ",", "env_name", ",", "seed", ")", ":", "\n", "# function to generate a dataset according to a mixture of a trained policy mu_k from PSRL and a random policy and", "\n", "# at any state s the decision is made according to: mu_k(s) w.p. 1-epsilon, rndm{0,1} w.p. epsilon", "\n", "# load (and generate and load) PSRL trained policy", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "'./models/'", "+", "env_name", "+", "'_PSRL_optPolicy.p'", ")", ":", "\n", "        ", "print", "(", "'Training PSRL behavior policy...'", ")", "\n", "sys", ".", "stderr", ".", "write", "(", "'Training expert policy with PSRL'", ")", "\n", "np", ".", "random", ".", "seed", "(", "116687", ")", "\n", "train_pi", "(", "env_name", ")", "\n", "# Load behavior policy", "\n", "", "PSRL_dict", "=", "pickle", ".", "load", "(", "open", "(", "'./models/'", "+", "env_name", "+", "'_PSRL_optPolicy.p'", ",", "\"rb\"", ")", ")", "\n", "_", ",", "_", ",", "mu_st", "=", "PSRL_dict", "[", "'R_sa'", "]", ",", "PSRL_dict", "[", "'P_sas'", "]", ",", "PSRL_dict", "[", "'muK_st'", "]", "\n", "\n", "# instantiate memory:", "\n", "obs_episodes_repo", "=", "experienceRepository", "(", "episodes", ")", "\n", "# instantiate riverswim environment:", "\n", "if", "env_name", "==", "'Riverswim'", ":", "# instantiate riverswim environment", "\n", "        ", "ep_length", "=", "20", "\n", "env", "=", "riverSwim", "(", "episode_length", "=", "ep_length", ")", "\n", "", "A_No", "=", "env", ".", "action_space", ".", "n", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "#### exploration", "\n", "for", "k", "in", "range", "(", "int", "(", "episodes", ")", ")", ":", "\n", "# Compute mu_k", "\n", "        ", "state", "=", "env", ".", "reset", "(", ")", "\n", "state_seq", "=", "state", "\n", "reward_seq", ",", "action_seq", "=", "-", "100", ",", "-", "100", "\n", "for", "t", "in", "range", "(", "ep_length", ")", ":", "\n", "            ", "if", "np", ".", "random", ".", "binomial", "(", "1", ",", "epsilon", ")", "==", "1", ":", "# w.p. epsilon choose random action", "\n", "                ", "action", "=", "int", "(", "np", ".", "random", ".", "choice", "(", "A_No", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "action", "=", "mu_st", "[", "(", "state", ",", "t", ")", "]", "# w.p. 1-epsilon choose mu_k(s)", "\n", "", "next_state", ",", "reward", ",", "done", ",", "_", "=", "env", ".", "step", "(", "action", ")", "\n", "# store episode", "\n", "reward_seq", "=", "np", ".", "vstack", "(", "(", "reward_seq", ",", "reward", ")", ")", "\n", "action_seq", "=", "np", ".", "vstack", "(", "(", "action_seq", ",", "action", ")", ")", "\n", "state", "=", "next_state", "\n", "state_seq", "=", "np", ".", "vstack", "(", "(", "state_seq", ",", "state", ")", ")", "\n", "# store episode in repo", "\n", "", "obs_episodes_repo", ".", "store", "(", "state_seq", "[", ":", "-", "1", "]", ",", "action_seq", "[", "1", ":", "]", ",", "state_seq", "[", "1", ":", "]", ",", "reward_seq", "[", "1", ":", "]", ")", "\n", "#if k % 1000==0:    ", "\n", "# Compute H_tk:", "\n", "", "obs_episodes", "=", "obs_episodes_repo", ".", "memory", "\n", "obs_samp", "=", "Transition", "(", "*", "zip", "(", "*", "obs_episodes", ")", ")", "\n", "obs_H_tk", "=", "build_H_tk", "(", "obs_samp", ",", "k", ")", "\n", "#print(k,np.mean(obs_H_tk[:s,2]))s", "\n", "\n", "pickle", ".", "dump", "(", "{", "'episodes_repo'", ":", "obs_episodes_repo", ",", "'H_tk'", ":", "obs_H_tk", ",", "'mu_st'", ":", "mu_st", "}", ",", "\n", "open", "(", "\"./buffers/obs_data\"", "+", "env_name", "+", "\"_seed_\"", "+", "str", "(", "seed", ")", "+", "\"_eps\"", "+", "str", "(", "epsilon", ")", "+", "\"_T_\"", "+", "str", "(", "episodes", ")", "+", "\".p\"", ",", "\"wb\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.asonabend_ESRL.None.utils.mode": [[427, 434], ["collections.Counter", "dict", "max", "list", "dict.values", "dict.items"], "function", ["None"], ["", "def", "mode", "(", "ls", ")", ":", "\n", "# calculate the frequency of each item", "\n", "    ", "data", "=", "collections", ".", "Counter", "(", "ls", ")", "\n", "data_list", "=", "dict", "(", "data", ")", "\n", "max_cnt", "=", "max", "(", "list", "(", "data_list", ".", "values", "(", ")", ")", ")", "\n", "mode_val", "=", "[", "num", "for", "num", ",", "freq", "in", "data_list", ".", "items", "(", ")", "if", "freq", "==", "max_cnt", "]", "\n", "return", "mode_val", "\n", "\n"]], "home.repos.pwc.inspect_result.asonabend_ESRL.None.utils.compute_policy": [[436, 448], ["range", "numpy.max", "numpy.argmax", "sum", "int"], "function", ["None"], ["", "def", "compute_policy", "(", "R_sa", ",", "P_sas", ",", "A_space", ",", "S_space", ",", "ep_length", ",", "rtrn_v", "=", "False", ")", ":", "\n", "# initializa value Vt(S) and policy function dictionaries:", "\n", "    ", "mu_st", "=", "{", "}", "\n", "V_st", "=", "{", "(", "s", ",", "ep_length", ")", ":", "0", "for", "s", "in", "S_space", "}", "\n", "for", "t", "in", "range", "(", "ep_length", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "        ", "for", "s", "in", "S_space", ":", "\n", "            ", "q_vals", "=", "[", "R_sa", "[", "(", "s", ",", "a", ")", "]", "+", "sum", "(", "[", "P_sas", "[", "(", "s", ",", "a", ")", "]", "[", "int", "(", "nxt_s", ")", "]", "*", "V_st", "[", "(", "nxt_s", ",", "t", "+", "1", ")", "]", "for", "nxt_s", "in", "S_space", "]", ")", "for", "a", "in", "A_space", "]", "\n", "V_st", "[", "(", "s", ",", "t", ")", "]", ",", "mu_st", "[", "(", "s", ",", "t", ")", "]", "=", "np", ".", "max", "(", "q_vals", ")", ",", "np", ".", "argmax", "(", "q_vals", ")", "\n", "", "", "if", "rtrn_v", ":", "\n", "        ", "return", "mu_st", ",", "V_st", "\n", "", "else", ":", "\n", "        ", "return", "mu_st", "\n", "#### Computes the null probability", "\n"]], "home.repos.pwc.inspect_result.asonabend_ESRL.None.utils.P_H0_MV": [[449, 457], ["numpy.zeros", "numpy.mean", "len", "len", "sum", "int"], "function", ["None"], ["", "", "def", "P_H0_MV", "(", "s", ",", "t", ",", "a_behavior", ",", "a_mu", ",", "Mk_R_sa", ",", "Mk_P_sas", ",", "kset", ",", "V_st", ",", "visited_states", ",", "pi_tsa", ",", "S_space", ",", "A_space", ")", ":", "\n", "    ", "Qs", ",", "i", "=", "np", ".", "zeros", "(", "(", "len", "(", "kset", ")", ",", "len", "(", "A_space", ")", ")", ")", ",", "0", "\n", "for", "k", "in", "kset", ":", "\n", "# compute Q values for current state of interest            ", "\n", "        ", "R_sa", ",", "P_sas", "=", "Mk_R_sa", "[", "k", "]", ",", "Mk_P_sas", "[", "k", "]", "\n", "Qs", "[", "i", ",", ":", "]", "=", "[", "(", "R_sa", "[", "(", "s", ",", "a", ")", "]", "+", "sum", "(", "[", "P_sas", "[", "(", "s", ",", "a", ")", "]", "[", "int", "(", "nxt_s", ")", "]", "*", "V_st", "[", "k", "]", "[", "(", "nxt_s", ",", "t", "+", "1", ")", "]", "for", "nxt_s", "in", "S_space", "]", ")", ")", "for", "a", "in", "A_space", "]", "\n", "i", "+=", "1", "\n", "", "return", "np", ".", "mean", "(", "Qs", "[", ":", ",", "a_mu", "]", "<", "Qs", "[", ":", ",", "a_behavior", "]", ")", ",", "Qs", "\n", "\n"]], "home.repos.pwc.inspect_result.asonabend_ESRL.None.utils.compute_pi_tsa": [[459, 496], ["range", "Transition", "utils.build_H_tk", "numpy.hstack", "set", "len", "range", "range", "zip", "numpy.argmax", "int", "numpy.array", "numpy.where", "numpy.where", "len", "visited_states[].add", "numpy.random.choice", "len", "len", "numpy.product", "numpy.product", "len", "len", "numpy.array", "numpy.array", "range"], "function", ["home.repos.pwc.inspect_result.asonabend_ESRL.None.utils.build_H_tk"], ["", "def", "compute_pi_tsa", "(", "episodes_repo", ",", "S_space", ",", "A_space", ",", "tau", ",", "sepsis", "=", "False", ",", "H_T", "=", "None", ")", ":", "\n", "    ", "if", "not", "sepsis", ":", "\n", "        ", "episodes", "=", "episodes_repo", ".", "memory", "\n", "samp", "=", "Transition", "(", "*", "zip", "(", "*", "episodes", ")", ")", "\n", "H_T", "=", "build_H_tk", "(", "samp", ",", "len", "(", "episodes_repo", ")", ")", "\n", "# augment history with column of episode stage", "\n", "# [time stage,state,action,reward,next state]", "\n", "H_T", "=", "np", ".", "hstack", "(", "(", "np", ".", "array", "(", "[", "[", "i", "for", "i", "in", "range", "(", "tau", ")", "]", "*", "(", "H_T", ".", "shape", "[", "0", "]", "//", "tau", ")", "]", ")", ".", "T", ",", "H_T", ")", ")", "\n", "", "T", "=", "H_T", ".", "shape", "[", "0", "]", "\n", "all_states", ",", "all_actions", "=", "S_space", ",", "A_space", "\n", "pi_tsa", "=", "{", "}", "\n", "visited_states", "=", "{", "t", ":", "set", "(", ")", "for", "t", "in", "range", "(", "tau", "+", "1", ")", "}", "\n", "for", "a", "in", "all_actions", ":", "\n", "        ", "for", "s", "in", "all_states", ":", "\n", "            ", "for", "t", "in", "range", "(", "tau", ")", ":", "\n", "# times action a was selected in state s at stage t", "\n", "                ", "indx_tsa", "=", "np", ".", "where", "(", "np", ".", "product", "(", "np", ".", "array", "(", "[", "t", ",", "s", ",", "a", "]", ")", "==", "H_T", "[", ":", ",", ":", "3", "]", ",", "axis", "=", "1", ")", "==", "1", ")", "[", "0", "]", "\n", "# times state s was observed at stage j", "\n", "indx_ts", "=", "np", ".", "where", "(", "np", ".", "product", "(", "np", ".", "array", "(", "[", "t", ",", "s", "]", ")", "==", "H_T", "[", ":", ",", ":", "2", "]", ",", "axis", "=", "1", ")", "==", "1", ")", "[", "0", "]", "\n", "if", "len", "(", "indx_ts", ")", ">", "0", ":", "\n", "                    ", "visited_states", "[", "t", "]", ".", "add", "(", "s", ")", "\n", "if", "len", "(", "indx_tsa", ")", ">", "0", ":", "\n", "                        ", "pi_tsa", "[", "(", "t", ",", "s", ",", "a", ")", "]", "=", "(", "len", "(", "indx_tsa", ")", "/", "len", "(", "indx_ts", ")", ")", "\n", "", "else", ":", "\n", "                        ", "pi_tsa", "[", "(", "t", ",", "s", ",", "a", ")", "]", "=", ".001", "\n", "", "", "else", ":", "\n", "                    ", "pi_tsa", "[", "(", "t", ",", "s", ",", "a", ")", "]", "=", "None", "\n", "\n", "# Compute behavior policy base on most likely action", "\n", "", "", "", "", "pi_st", "=", "{", "}", "\n", "for", "t", "in", "range", "(", "tau", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "        ", "for", "s", "in", "S_space", ":", "\n", "            ", "if", "s", "in", "visited_states", "[", "t", "]", ":", "\n", "                ", "pi_st", "[", "(", "s", ",", "t", ")", "]", "=", "np", ".", "argmax", "(", "[", "pi_tsa", "[", "(", "t", ",", "s", ",", "a", ")", "]", "for", "a", "in", "A_space", "]", ")", "\n", "", "else", ":", "\n", "                ", "pi_st", "[", "(", "s", ",", "t", ")", "]", "=", "int", "(", "np", ".", "random", ".", "choice", "(", "len", "(", "A_space", ")", ",", "1", ")", ")", "\n", "", "", "", "return", "pi_tsa", ",", "pi_st", ",", "visited_states", "\n", "\n"]], "home.repos.pwc.inspect_result.asonabend_ESRL.None.utils.ESRL": [[498, 538], ["list", "utils.sampleK_MDPs", "tqdm.tqdm", "set", "maj_vote_set_alpha.keys", "range", "range", "MV_set.intersection.intersection", "len", "numpy.random.choice", "int", "len", "range", "range", "int", "utils.P_H0_MV", "range", "int", "list", "range", "range", "numpy.argmax", "float", "range", "utils.mode", "len", "len", "utils.mode", "utils.mode", "sum", "list", "sum", "maj_vote_set_alpha.keys", "int", "int"], "function", ["home.repos.pwc.inspect_result.asonabend_ESRL.None.utils.sampleK_MDPs", "home.repos.pwc.inspect_result.asonabend_ESRL.None.utils.P_H0_MV", "home.repos.pwc.inspect_result.asonabend_ESRL.None.utils.mode", "home.repos.pwc.inspect_result.asonabend_ESRL.None.utils.mode", "home.repos.pwc.inspect_result.asonabend_ESRL.None.utils.mode"], ["", "def", "ESRL", "(", "H_T", ",", "alpha", ",", "tau", ",", "K_no", ",", "pi_st", ",", "pi_tsa", ",", "visited_states", ",", "S_space", ",", "A_space", ",", "sepsis", "=", "False", ")", ":", "\n", "# Generate sets for estimating Q and testing H0", "\n", "    ", "K_ls", "=", "list", "(", "range", "(", "K_no", ")", ")", "\n", "I_1", ",", "I_2", "=", "K_ls", "[", ":", "len", "(", "K_ls", ")", "//", "2", "]", ",", "K_ls", "[", "len", "(", "K_ls", ")", "//", "2", ":", "]", "\n", "# Samples K MDPs from posterior s", "\n", "Mk_R_sa", ",", "Mk_P_sas", "=", "sampleK_MDPs", "(", "S_card", "=", "len", "(", "S_space", ")", ",", "A_space", "=", "A_space", ",", "H_tk", "=", "H_T", ",", "K", "=", "K_no", ",", "sepsis", "=", "sepsis", ")", "\n", "# initialize value Vtau(S) and policy function dictionaries:", "\n", "V_st", "=", "{", "k", ":", "{", "(", "s", ",", "tau", ")", ":", "0", "for", "s", "in", "S_space", "}", "for", "k", "in", "range", "(", "K_no", ")", "}", "\n", "mu_st_alpha", ",", "mu_st", ",", "maj_vote_mu", ",", "maj_vote_mu_alpha", ",", "maj_vote_set_alpha", "=", "{", "k", ":", "{", "}", "for", "k", "in", "range", "(", "K_no", ")", "}", ",", "{", "k", ":", "{", "}", "for", "k", "in", "range", "(", "K_no", ")", "}", ",", "{", "}", ",", "{", "}", ",", "{", "}", "\n", "Qs_st", "=", "{", "}", "\n", "for", "t", "in", "tqdm", "(", "range", "(", "tau", "-", "1", ",", "-", "1", ",", "-", "1", ")", ")", ":", "\n", "        ", "for", "s", "in", "S_space", ":", "\n", "            ", "for", "k", "in", "range", "(", "K_no", ")", ":", "\n", "##", "\n", "# compute Q values for current state of interest            ", "\n", "                ", "R_sa", ",", "P_sas", "=", "Mk_R_sa", "[", "k", "]", ",", "Mk_P_sas", "[", "k", "]", "\n", "q_vals", "=", "[", "(", "R_sa", "[", "(", "s", ",", "a", ")", "]", "+", "sum", "(", "[", "P_sas", "[", "(", "s", ",", "a", ")", "]", "[", "int", "(", "nxt_s", ")", "]", "*", "V_st", "[", "k", "]", "[", "(", "nxt_s", ",", "t", "+", "1", ")", "]", "for", "nxt_s", "in", "S_space", "]", ")", ")", "for", "a", "in", "A_space", "]", "\n", "# Compute mu_k", "\n", "mu_st", "[", "k", "]", "[", "(", "s", ",", "t", ")", "]", "=", "np", ".", "argmax", "(", "q_vals", ")", "\n", "# Compute policy based on majority vote:            ", "\n", "", "maj_vote_mu", "[", "(", "s", ",", "t", ")", "]", "=", "int", "(", "mode", "(", "[", "mu_st", "[", "k", "]", "[", "(", "s", ",", "t", ")", "]", "for", "k", "in", "I_1", "]", ")", "[", "0", "]", ")", "\n", "# Compute P(H_0|s,d,H_T)", "\n", "P_0", ",", "Qs_st", "[", "(", "s", ",", "t", ")", "]", "=", "P_H0_MV", "(", "s", ",", "t", ",", "a_behavior", "=", "pi_st", "[", "(", "s", ",", "t", ")", "]", ",", "a_mu", "=", "maj_vote_mu", "[", "(", "s", ",", "t", ")", "]", ",", "Mk_R_sa", "=", "Mk_R_sa", ",", "Mk_P_sas", "=", "Mk_P_sas", ",", "kset", "=", "I_2", ",", "V_st", "=", "V_st", ",", "visited_states", "=", "visited_states", ",", "pi_tsa", "=", "pi_tsa", ",", "S_space", "=", "S_space", ",", "A_space", "=", "A_space", ")", "\n", "for", "k", "in", "range", "(", "K_no", ")", ":", "\n", "# Compute policy based on P-value rule", "\n", "                ", "mu_st_alpha", "[", "k", "]", "[", "(", "s", ",", "t", ")", "]", "=", "mu_st", "[", "k", "]", "[", "(", "s", ",", "t", ")", "]", "if", "P_0", "<", "alpha", "else", "pi_st", "[", "(", "s", ",", "t", ")", "]", "#if P_0>= alpha   ", "\n", "# Compute value function based on chosen policy", "\n", "V_st", "[", "k", "]", "[", "(", "s", ",", "t", ")", "]", "=", "float", "(", "*", "[", "(", "R_sa", "[", "(", "s", ",", "a", ")", "]", "+", "sum", "(", "[", "P_sas", "[", "(", "s", ",", "a", ")", "]", "[", "int", "(", "nxt_s", ")", "]", "*", "V_st", "[", "k", "]", "[", "(", "nxt_s", ",", "t", "+", "1", ")", "]", "for", "nxt_s", "in", "S_space", "]", ")", ")", "for", "a", "in", "[", "mu_st_alpha", "[", "k", "]", "[", "(", "s", ",", "t", ")", "]", "]", "]", ")", "\n", "# Compute policy based on majority vote, and set of k's which chose the most common action:            ", "\n", "", "maj_vote_mu_alpha", "[", "(", "s", ",", "t", ")", "]", "=", "int", "(", "mode", "(", "[", "mu_st_alpha", "[", "k", "]", "[", "(", "s", ",", "t", ")", "]", "for", "k", "in", "I_1", "]", ")", "[", "0", "]", ")", "\n", "maj_vote_set_alpha", "[", "(", "s", ",", "t", ")", "]", "=", "[", "k", "for", "k", "in", "I_1", "if", "maj_vote_mu_alpha", "[", "(", "s", ",", "t", ")", "]", "==", "mu_st_alpha", "[", "k", "]", "[", "(", "s", ",", "t", ")", "]", "]", "\n", "# Define majority voting set and check if there are models in all:", "\n", "", "", "MV_set", "=", "set", "(", "k", "for", "k", "in", "range", "(", "K_no", ")", ")", "\n", "for", "key", "in", "maj_vote_set_alpha", ".", "keys", "(", ")", ":", "\n", "        ", "MV_set", "=", "MV_set", ".", "intersection", "(", "maj_vote_set_alpha", "[", "key", "]", ")", "\n", "", "if", "len", "(", "MV_set", ")", ">", "0", ":", "\n", "        ", "chosen_k", "=", "np", ".", "random", ".", "choice", "(", "list", "(", "MV_set", ")", ")", "\n", "", "else", ":", "\n", "        ", "chosen_k", "=", "int", "(", "mode", "(", "[", "k", "for", "key", "in", "list", "(", "maj_vote_set_alpha", ".", "keys", "(", ")", ")", "for", "k", "in", "maj_vote_set_alpha", "[", "key", "]", "]", ")", "[", "0", "]", ")", "\n", "", "return", "mu_st_alpha", "[", "chosen_k", "]", ",", "Mk_R_sa", "[", "chosen_k", "]", ",", "Mk_P_sas", "[", "chosen_k", "]", ",", "Qs_st", "\n", "", ""]]}