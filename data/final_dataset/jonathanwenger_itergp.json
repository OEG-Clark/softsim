{"home.repos.pwc.inspect_result.jonathanwenger_itergp.itergp._gaussian_process.ConditionalGaussianProcess.__init__": [[62, 107], ["tuple", "tuple", "tuple", "tuple", "GaussianProcess.__init__", "ValueError", "probnum.backend.concatenate", "ConditionalGaussianProcess.Mean", "ConditionalGaussianProcess.Kernel", "k", "probnum.backend.expand_dims", "zip"], "methods", ["home.repos.pwc.inspect_result.jonathanwenger_itergp.preconditioners._diagonal_plus_low_rank.DiagonalPlusLowRank.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "prior", ":", "GaussianProcess", ",", "\n", "Xs", ":", "Sequence", "[", "backend", ".", "Array", "]", ",", "\n", "Ys", ":", "Sequence", "[", "backend", ".", "Array", "]", ",", "\n", "bs", ":", "Sequence", "[", "randvars", ".", "Normal", "]", ",", "\n", "ks", ":", "Sequence", "[", "randprocs", ".", "kernels", ".", "Kernel", "]", ",", "\n", "gram_Xs_Xs_inv", ":", "Tuple", "[", "backend", ".", "Array", ",", "bool", "]", ",", "\n", "representer_weights", ":", "randvars", ".", "RandomVariable", ",", "\n", ")", ":", "\n", "        ", "if", "prior", ".", "output_shape", "!=", "(", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Currently, only scalar conditioning is supported.\"", ")", "\n", "\n", "", "self", ".", "_prior", "=", "prior", "\n", "\n", "self", ".", "_bs", "=", "tuple", "(", "bs", ")", "\n", "\n", "self", ".", "_Xs", "=", "tuple", "(", "Xs", ")", "\n", "self", ".", "_Ys", "=", "tuple", "(", "Ys", ")", "\n", "\n", "self", ".", "_ks", "=", "tuple", "(", "ks", ")", "\n", "\n", "self", ".", "_k_Xs", ":", "Callable", "[", "\n", "[", "backend", ".", "Array", "]", ",", "backend", ".", "Array", "\n", "]", "=", "lambda", "x", ":", "backend", ".", "concatenate", "(", "\n", "[", "\n", "k", "(", "backend", ".", "expand_dims", "(", "x", ",", "axis", "=", "-", "self", ".", "_prior", ".", "_input_ndim", "-", "1", ")", ",", "X", ")", "\n", "for", "k", ",", "X", "in", "zip", "(", "self", ".", "_ks", ",", "self", ".", "_Xs", ")", "\n", "]", ",", "\n", "axis", "=", "-", "1", ",", "\n", ")", "\n", "\n", "self", ".", "_gram_Xs_Xs_inv", "=", "gram_Xs_Xs_inv", "\n", "self", ".", "_representer_weights", "=", "representer_weights", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "mean", "=", "ConditionalGaussianProcess", ".", "Mean", "(", "\n", "prior", "=", "self", ".", "_prior", ",", "\n", "X", "=", "self", ".", "_Xs", "[", "0", "]", ",", "\n", "representer_weights", "=", "self", ".", "_representer_weights", ",", "\n", ")", ",", "\n", "cov", "=", "ConditionalGaussianProcess", ".", "Kernel", "(", "\n", "prior_kernel", "=", "self", ".", "_prior", ".", "cov", ",", "\n", "k_Xs", "=", "self", ".", "_k_Xs", ",", "\n", "gram_Xs_Xs_inv", "=", "self", ".", "_gram_Xs_Xs_inv", ",", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.itergp._gaussian_process.ConditionalGaussianProcess.from_data": [[110, 163], ["methods.Cholesky", "cls._preprocess_observations", "probnum.linops.Zero", "probnum.linops.Zero", "probnum.problems.LinearSystem", "probnum.linalg.solvers.beliefs.LinearSystemBelief", "approx_method.solve", "cls", "probnum.randvars.Normal", "probnum.linops.aslinop().inv", "probnum.linops.aslinop"], "methods", ["home.repos.pwc.inspect_result.jonathanwenger_itergp.itergp._gaussian_process.ConditionalGaussianProcess._preprocess_observations"], ["", "@", "classmethod", "\n", "def", "from_data", "(", "\n", "cls", ",", "\n", "prior", ":", "GaussianProcess", ",", "\n", "X", ":", "backend", ".", "Array", ",", "\n", "Y", ":", "backend", ".", "Array", ",", "\n", "b", ":", "Optional", "[", "randvars", ".", "Normal", "]", "=", "None", ",", "\n", "approx_method", ":", "methods", ".", "ApproximationMethod", "=", "methods", ".", "Cholesky", "(", ")", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Construct a :class:`ConditionalGaussianProcess` from data.\n\n        Parameters\n        ----------\n        prior\n            Gaussian process prior.\n        X\n            Training inputs.\n        Y\n            Training outputs.\n        b\n            Observation noise.\n        approx_method\n            (Iterative) Approximation method to compute the linear solve\n            :math:`v \\mapsto \\hat{K}^{-1} v`.\n        \"\"\"", "\n", "X", ",", "Y", ",", "k", ",", "pred_mean_X", ",", "gram_XX", "=", "cls", ".", "_preprocess_observations", "(", "\n", "prior", "=", "prior", ",", "\n", "X", "=", "X", ",", "\n", "Y", "=", "Y", ",", "\n", "b", "=", "b", ",", "\n", ")", "\n", "\n", "# Compute representer weights", "\n", "P", "=", "linops", ".", "Zero", "(", "shape", "=", "(", "X", ".", "shape", "[", "0", "]", ",", "X", ".", "shape", "[", "0", "]", ")", ")", "\n", "Pinv", "=", "linops", ".", "Zero", "(", "shape", "=", "(", "X", ".", "shape", "[", "0", "]", ",", "X", ".", "shape", "[", "0", "]", ")", ")", "\n", "problem", "=", "problems", ".", "LinearSystem", "(", "gram_XX", ",", "Y", "-", "pred_mean_X", ")", "\n", "linsys_prior", "=", "solvers", ".", "beliefs", ".", "LinearSystemBelief", "(", "\n", "x", "=", "randvars", ".", "Normal", "(", "mean", "=", "Pinv", "@", "problem", ".", "b", ",", "cov", "=", "linops", ".", "aslinop", "(", "gram_XX", ")", ".", "inv", "(", ")", ")", ",", "\n", "Ainv", "=", "Pinv", ",", "\n", "A", "=", "P", ",", "\n", ")", "\n", "qoi_belief", ",", "_", "=", "approx_method", ".", "solve", "(", "problem", "=", "problem", ",", "prior", "=", "linsys_prior", ")", "\n", "gram_XX_inv", "=", "qoi_belief", ".", "Ainv", "\n", "representer_weights", "=", "qoi_belief", ".", "x", "\n", "\n", "return", "cls", "(", "\n", "prior", "=", "prior", ",", "\n", "bs", "=", "(", "b", ",", ")", ",", "\n", "Xs", "=", "(", "X", ",", ")", ",", "\n", "Ys", "=", "(", "Y", ",", ")", ",", "\n", "ks", "=", "(", "k", ",", ")", ",", "\n", "gram_Xs_Xs_inv", "=", "gram_XX_inv", ",", "\n", "representer_weights", "=", "representer_weights", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.itergp._gaussian_process.ConditionalGaussianProcess.numerical_predictive": [[165, 183], ["GaussianProcess", "ConditionalGaussianProcess.Mean", "ConditionalGaussianProcess.NumericalApproximationKernel"], "methods", ["None"], ["", "@", "property", "\n", "def", "numerical_predictive", "(", "self", ")", "->", "GaussianProcess", ":", "\n", "        ", "\"\"\"Numerical predictive distribution.\n\n        Returns the Gaussian process quantifying uncertainty induced by the numerical\n        approximation method used to compute the representer weights.\n        \"\"\"", "\n", "return", "GaussianProcess", "(", "\n", "mean", "=", "ConditionalGaussianProcess", ".", "Mean", "(", "\n", "prior", "=", "self", ".", "_prior", ",", "\n", "X", "=", "self", ".", "_Xs", "[", "0", "]", ",", "\n", "representer_weights", "=", "self", ".", "_representer_weights", ",", "\n", ")", ",", "\n", "cov", "=", "ConditionalGaussianProcess", ".", "NumericalApproximationKernel", "(", "\n", "input_shape", "=", "self", ".", "_prior", ".", "cov", ".", "input_shape", ",", "\n", "output_shape", "=", "self", ".", "_prior", ".", "cov", ".", "output_shape", ",", "\n", "k_Xs", "=", "self", ".", "_k_Xs", ",", "\n", "repr_weights_cov", "=", "self", ".", "_representer_weights", ".", "cov", ",", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.itergp._gaussian_process.ConditionalGaussianProcess.predictive": [[186, 195], ["None"], "methods", ["None"], ["", "def", "predictive", "(", "self", ",", "X", ":", "backend", ".", "Array", ")", "->", "randvars", ".", "Normal", ":", "\n", "        ", "\"\"\"Compute the predictive distribution.\n\n        Parameters\n        ----------\n        X\n            Inputs to predict at.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.itergp._gaussian_process.ConditionalGaussianProcess._preprocess_observations": [[315, 359], ["probnum.backend.asarray", "probnum.backend.asarray", "X.reshape.reshape.reshape", "Y.reshape.reshape.reshape", "f.mean", "probnum.linops.KernelMatrix", "isinstance", "b.mean.reshape", "probnum.linops.aslinop"], "methods", ["None"], ["", "", "@", "classmethod", "\n", "def", "_preprocess_observations", "(", "\n", "cls", ",", "\n", "prior", ":", "GaussianProcess", ",", "\n", "X", ":", "backend", ".", "Array", ",", "\n", "Y", ":", "backend", ".", "Array", ",", "\n", "b", ":", "Optional", "[", "Union", "[", "randvars", ".", "Normal", ",", "randvars", ".", "Constant", "]", "]", ",", "\n", ")", "->", "tuple", "[", "\n", "backend", ".", "Array", ",", "\n", "backend", ".", "Array", ",", "\n", "randprocs", ".", "kernels", ".", "Kernel", ",", "\n", "backend", ".", "Array", ",", "\n", "backend", ".", "Array", ",", "\n", "]", ":", "\n", "# Reshape to (N, input_dim) and (N,)", "\n", "        ", "X", "=", "backend", ".", "asarray", "(", "X", ")", "\n", "Y", "=", "backend", ".", "asarray", "(", "Y", ")", "\n", "\n", "assert", "prior", ".", "output_shape", "==", "(", ")", "\n", "assert", "(", "\n", "X", ".", "ndim", ">=", "1", "and", "X", ".", "shape", "[", "X", ".", "ndim", "-", "prior", ".", "_input_ndim", ":", "]", "==", "prior", ".", "input_shape", "\n", ")", "\n", "assert", "Y", ".", "shape", "==", "X", ".", "shape", "[", ":", "X", ".", "ndim", "-", "prior", ".", "_input_ndim", "]", "+", "prior", ".", "output_shape", "\n", "\n", "X", "=", "X", ".", "reshape", "(", "(", "-", "1", ",", ")", "+", "prior", ".", "input_shape", ",", "order", "=", "\"C\"", ")", "\n", "Y", "=", "Y", ".", "reshape", "(", "(", "-", "1", ",", ")", ",", "order", "=", "\"C\"", ")", "\n", "\n", "# Apply measurement operator to prior", "\n", "f", "=", "prior", "\n", "k", "=", "prior", ".", "cov", "\n", "\n", "# Compute predictive mean and kernel Gram matrix", "\n", "pred_mean_X", "=", "f", ".", "mean", "(", "X", ")", "\n", "gram_XX", "=", "itergp_linops", ".", "KernelMatrix", "(", "kernel", "=", "k", ",", "x0", "=", "X", ")", "\n", "\n", "if", "b", "is", "not", "None", ":", "\n", "            ", "assert", "isinstance", "(", "b", ",", "(", "randvars", ".", "Constant", ",", "randvars", ".", "Normal", ")", ")", "\n", "assert", "b", ".", "shape", "==", "Y", ".", "shape", "\n", "\n", "pred_mean_X", "+=", "b", ".", "mean", ".", "reshape", "(", "(", "-", "1", ",", ")", ",", "order", "=", "\"C\"", ")", "\n", "# This assumes that the covariance matrix is raveled in C-order", "\n", "gram_XX", "+=", "linops", ".", "aslinop", "(", "b", ".", "cov", ")", "\n", "\n", "", "return", "X", ",", "Y", ",", "k", ",", "pred_mean_X", ",", "gram_XX", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.itergp._gaussian_process.ConditionalGaussianProcess.plot": [[360, 475], ["probnum.backend.random.rng_state", "_gaussian_process.ConditionalGaussianProcess.mean", "_gaussian_process.ConditionalGaussianProcess.std", "ax.plot", "matplotlib.subplots", "matplotlib.subplots", "NotImplementedError", "probnum.backend.sort", "ax.scatter", "_gaussian_process.ConditionalGaussianProcess.sample", "ax.plot", "_gaussian_process.ConditionalGaussianProcess.mean", "gp_numerical_pred.std", "probnum.backend.sort", "ax.fill_between", "ax.fill_between", "ax.fill_between", "ax.fill_between"], "methods", ["home.repos.pwc.inspect_result.jonathanwenger_itergp.itergp._gaussian_process.ConditionalGaussianProcess.plot", "home.repos.pwc.inspect_result.jonathanwenger_itergp.itergp._gaussian_process.ConditionalGaussianProcess.plot"], ["", "def", "plot", "(", "\n", "self", ",", "\n", "X", ":", "backend", ".", "Array", ",", "\n", "data", ":", "Optional", "[", "Tuple", "[", "backend", ".", "Array", ",", "backend", ".", "Array", "]", "]", "=", "None", ",", "\n", "stdevs", ":", "Tuple", "[", "float", ",", "...", "]", "=", "(", "2", ",", ")", ",", "\n", "numerical_predictive", ":", "bool", "=", "False", ",", "\n", "samples", ":", "int", "=", "0", ",", "\n", "rng_state", ":", "RNGState", "=", "backend", ".", "random", ".", "rng_state", "(", "0", ")", ",", "\n", "ax", ":", "Optional", "[", "matplotlib", ".", "axis", ".", "Axis", "]", "=", "None", ",", "\n", "color", "=", "\"C0\"", ",", "\n", "**", "kwargs", ",", "\n", ")", "->", "matplotlib", ".", "axis", ".", "Axis", ":", "\n", "        ", "\"\"\"Plot the Gaussian process.\n\n        Parameters\n        ----------\n        X\n            Input points to plot at.\n        stdevs\n            Number of standard deviations to plot around the mean of the\n            Gaussian process. Can be a tuple to plot more than one shaded\n            credible region.\n        numerical_predictive\n            Whether to plot the numerical predictive distribution.\n        samples\n            Number of samples to plot.\n        rng_state\n            Random number generator state.\n        ax\n            Axis to plot into\n        kwargs\n            Key word arguments passed onto :func:`matplotlib.pyplot.plot`.\n        \"\"\"", "\n", "# TODO: refactor this to avoid code duplication with GaussianProcess.plot", "\n", "if", "ax", "is", "None", ":", "\n", "            ", "_", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "\n", "", "if", "X", ".", "ndim", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Only 1D plotting supported.\"", ")", "\n", "", "else", ":", "\n", "            ", "X", "=", "backend", ".", "sort", "(", "X", ")", "\n", "\n", "# Training data", "\n", "", "if", "data", "is", "not", "None", ":", "\n", "            ", "ax", ".", "scatter", "(", "data", "[", "0", "]", ",", "data", "[", "1", "]", ",", "marker", "=", "\".\"", ",", "color", "=", "\"black\"", ",", "label", "=", "\"Data\"", ")", "\n", "\n", "# Posterior", "\n", "", "mean", "=", "self", ".", "mean", "(", "X", ")", "\n", "std", "=", "self", ".", "std", "(", "X", ")", "\n", "\n", "ax", ".", "plot", "(", "X", ",", "mean", ",", "label", "=", "\"GP mean\"", ",", "**", "kwargs", ")", "\n", "\n", "# Samples", "\n", "if", "samples", ">", "0", ":", "\n", "            ", "samples", "=", "self", ".", "sample", "(", "rng_state", "=", "rng_state", ",", "sample_shape", "=", "samples", ",", "args", "=", "X", ")", "\n", "ax", ".", "plot", "(", "X", ",", "samples", ".", "T", ",", "lw", "=", "0.5", ",", "color", "=", "color", ",", "**", "kwargs", ")", "\n", "\n", "# Plot numerical predictive distribution", "\n", "", "if", "numerical_predictive", ":", "\n", "\n", "            ", "if", "X", ".", "ndim", "<=", "1", ":", "\n", "                ", "X", "=", "backend", ".", "sort", "(", "X", ")", "\n", "\n", "", "mean", "=", "self", ".", "mean", "(", "X", ")", "\n", "gp_numerical_pred", "=", "self", ".", "numerical_predictive", "\n", "gp_numerical_std", "=", "gp_numerical_pred", ".", "std", "(", "X", ")", "\n", "\n", "for", "i", "in", "stdevs", ":", "\n", "\n", "# Observational uncertainty", "\n", "                ", "ax", ".", "fill_between", "(", "\n", "x", "=", "X", ",", "\n", "y1", "=", "mean", "-", "i", "*", "std", ",", "\n", "y2", "=", "mean", "-", "i", "*", "gp_numerical_std", ",", "\n", "lw", "=", "0.1", ",", "\n", "alpha", "=", "0.4", ",", "\n", "label", "=", "f\"GP {i}$\\\\times$stdev\"", ",", "\n", "color", "=", "color", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "ax", ".", "fill_between", "(", "\n", "x", "=", "X", ",", "\n", "y1", "=", "mean", "+", "i", "*", "gp_numerical_std", ",", "\n", "y2", "=", "mean", "+", "i", "*", "std", ",", "\n", "lw", "=", "0.1", ",", "\n", "alpha", "=", "0.4", ",", "\n", "color", "=", "color", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "\n", "# Computational uncertainty", "\n", "ax", ".", "fill_between", "(", "\n", "x", "=", "X", ",", "\n", "y1", "=", "mean", "-", "i", "*", "gp_numerical_std", ",", "\n", "y2", "=", "mean", "+", "i", "*", "gp_numerical_std", ",", "\n", "lw", "=", "0.0", ",", "\n", "alpha", "=", "0.4", ",", "\n", "color", "=", "\"C2\"", ",", "\n", "label", "=", "\"Comp. uncertainty\"", ",", "\n", "zorder", "=", "0", ",", "\n", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "stdevs", ":", "\n", "                ", "ax", ".", "fill_between", "(", "\n", "x", "=", "X", ",", "\n", "y1", "=", "mean", "-", "i", "*", "std", ",", "\n", "y2", "=", "mean", "+", "i", "*", "std", ",", "\n", "lw", "=", "0.1", ",", "\n", "alpha", "=", "0.4", ",", "\n", "label", "=", "f\"GP {i}$\\\\times$stdev\"", ",", "\n", "color", "=", "color", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "\n", "", "", "return", "ax", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.itergp._gaussian_process._condition_on_data": [[477, 506], ["methods.Cholesky", "isinstance", "_gaussian_process.ConditionalGaussianProcess.from_data", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.jonathanwenger_itergp.itergp._gaussian_process.ConditionalGaussianProcess.from_data"], ["", "", "def", "_condition_on_data", "(", "\n", "self", ",", "\n", "X", ":", "backend", ".", "Array", ",", "\n", "Y", ":", "backend", ".", "Array", ",", "\n", "b", ":", "Optional", "[", "randvars", ".", "Normal", "]", "=", "None", ",", "\n", "approx_method", "=", "methods", ".", "Cholesky", "(", ")", ",", "\n", ")", "->", "ConditionalGaussianProcess", ":", "\n", "    ", "\"\"\"Condition the Gaussian process on data.\n\n    Given a Gaussian process prior :math:`f \\sim \\mathcal{GP}(\\mu, k)`, condition on\n    data :math:`(X, y)` assuming a likelihood of the form\n    :math:`y \\mid f(x) = f(x) + b = \\mathcal{N}(y; f(x) + \\mathbb{E}[b], \\operatorname{Cov}(b))`.\n\n    Parameters\n    ----------\n    X\n        Training inputs.\n    Y\n        Training outputs.\n    b\n        Observation noise.\n    approx_method\n        (Iterative) approximation method to compute the conditional distribution.\n    \"\"\"", "\n", "if", "isinstance", "(", "self", ",", "ConditionalGaussianProcess", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Conditioning multiple times is not (yet) supported.\"", ")", "\n", "\n", "", "return", "ConditionalGaussianProcess", ".", "from_data", "(", "\n", "prior", "=", "self", ",", "X", "=", "X", ",", "Y", "=", "Y", ",", "b", "=", "b", ",", "approx_method", "=", "approx_method", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.itergp._gaussian_process._plot": [[509, 573], ["probnum.backend.random.rng_state", "_gaussian_process..mean", "_gaussian_process..std", "ax.plot", "matplotlib.subplots", "NotImplementedError", "probnum.backend.sort", "ax.scatter", "ax.fill_between", "_gaussian_process..sample", "ax.plot"], "function", ["home.repos.pwc.inspect_result.jonathanwenger_itergp.itergp._gaussian_process.ConditionalGaussianProcess.plot", "home.repos.pwc.inspect_result.jonathanwenger_itergp.itergp._gaussian_process.ConditionalGaussianProcess.plot"], ["", "def", "_plot", "(", "\n", "self", ",", "\n", "X", ":", "backend", ".", "Array", ",", "\n", "data", ":", "Optional", "[", "Tuple", "[", "backend", ".", "Array", ",", "backend", ".", "Array", "]", "]", "=", "None", ",", "\n", "stdevs", ":", "Tuple", "[", "float", ",", "...", "]", "=", "(", "2", ",", ")", ",", "\n", "samples", ":", "int", "=", "0", ",", "\n", "rng_state", ":", "RNGState", "=", "backend", ".", "random", ".", "rng_state", "(", "0", ")", ",", "\n", "ax", ":", "Optional", "[", "matplotlib", ".", "axis", ".", "Axis", "]", "=", "None", ",", "\n", "**", "kwargs", ",", "\n", ")", "->", "matplotlib", ".", "axis", ".", "Axis", ":", "\n", "    ", "\"\"\"Plot the Gaussian process.\n\n    Parameters\n    ----------\n    X\n        Input points to plot at.\n    data\n        Training data.\n    stdevs\n        Number of standard deviations to plot around the mean of the\n        Gaussian process. Can be a tuple to plot more than one shaded\n        credible region.\n    samples\n        Number of samples to plot.\n    rng_state\n        Random number generator state for plotting samples.\n    ax\n        Plot axis.\n    \"\"\"", "\n", "if", "ax", "is", "None", ":", "\n", "        ", "_", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "\n", "", "if", "X", ".", "ndim", ">", "1", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Only 1D plotting supported.\"", ")", "\n", "", "else", ":", "\n", "        ", "X", "=", "backend", ".", "sort", "(", "X", ")", "\n", "\n", "# Training data", "\n", "", "if", "data", "is", "not", "None", ":", "\n", "        ", "ax", ".", "scatter", "(", "data", "[", "0", "]", ",", "data", "[", "1", "]", ",", "marker", "=", "\".\"", ",", "color", "=", "\"black\"", ",", "label", "=", "\"Data\"", ")", "\n", "\n", "# Posterior", "\n", "", "mean", "=", "self", ".", "mean", "(", "X", ")", "\n", "std", "=", "self", ".", "std", "(", "X", ")", "\n", "\n", "ax", ".", "plot", "(", "X", ",", "mean", ",", "label", "=", "\"GP mean\"", ",", "**", "kwargs", ")", "\n", "\n", "for", "i", "in", "stdevs", ":", "\n", "        ", "ax", ".", "fill_between", "(", "\n", "x", "=", "X", ",", "\n", "y1", "=", "mean", "-", "i", "*", "std", ",", "\n", "y2", "=", "mean", "+", "i", "*", "std", ",", "\n", "lw", "=", "0.0", ",", "\n", "alpha", "=", "0.4", ",", "\n", "label", "=", "f\"GP {i}$\\\\times$stdev\"", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "\n", "# Samples", "\n", "", "if", "samples", ">", "0", ":", "\n", "        ", "samples", "=", "self", ".", "sample", "(", "rng_state", "=", "rng_state", ",", "sample_shape", "=", "samples", ",", "args", "=", "X", ")", "\n", "ax", ".", "plot", "(", "X", ",", "samples", ".", "T", ",", "lw", "=", "0.5", ",", "**", "kwargs", ")", "\n", "\n", "", "return", "ax", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.itergp._gaussian_process._std": [[575, 581], ["_gaussian_process..var", "probnum.backend.zeros_like", "probnum.backend.sqrt"], "function", ["None"], ["", "def", "_std", "(", "self", ",", "args", ":", "ArrayLike", ")", "->", "backend", ".", "Array", ":", "\n", "    ", "var", "=", "self", ".", "var", "(", "args", "=", "args", ")", "\n", "clip_mask", "=", "(", "var", ">", "0.0", ")", "|", "(", "var", "<", "-", "(", "10", "**", "-", "12", ")", ")", "\n", "std", "=", "backend", ".", "zeros_like", "(", "var", ")", "\n", "std", "[", "clip_mask", "]", "=", "backend", ".", "sqrt", "(", "var", "[", "clip_mask", "]", ")", "\n", "return", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.datasets._synthetic_dataset.SyntheticDataset.__init__": [[46, 82], ["probnum.backend.asshape", "probnum.backend.asshape", "probnum.backend.random.split", "_synthetic_dataset.SyntheticDataset._generate_X", "_synthetic_dataset.SyntheticDataset._generate_y", "_dataset.Dataset.__init__", "probnum.backend.sin", "probnum.backend.sin", "probnum.backend.arange", "probnum.backend.ones"], "methods", ["home.repos.pwc.inspect_result.jonathanwenger_itergp.datasets._synthetic_dataset.SyntheticDataset._generate_X", "home.repos.pwc.inspect_result.jonathanwenger_itergp.datasets._synthetic_dataset.SyntheticDataset._generate_y", "home.repos.pwc.inspect_result.jonathanwenger_itergp.preconditioners._diagonal_plus_low_rank.DiagonalPlusLowRank.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "rng_state", ":", "backend", ".", "random", ".", "RNGState", ",", "\n", "size", ":", "Tuple", "[", "int", ",", "int", "]", ",", "\n", "input_shape", ":", "ShapeLike", "=", "(", ")", ",", "\n", "output_shape", ":", "ShapeLike", "=", "(", ")", ",", "\n", "fun", ":", "Callable", "[", "[", "backend", ".", "Array", "]", ",", "backend", ".", "Array", "]", "=", "lambda", "X", ":", "backend", ".", "sin", "(", "\n", "backend", ".", "pi", "*", "X", "\n", ")", "\n", "if", "X", ".", "ndim", "==", "1", "\n", "else", "backend", ".", "sin", "(", "backend", ".", "pi", "*", "X", "@", "backend", ".", "ones", "(", "(", "X", ".", "shape", "[", "1", ":", "]", ")", ")", ")", ",", "\n", "noise_var", ":", "float", "=", "0.1", ",", "\n", "range_X", ":", "Tuple", "[", "float", ",", "float", "]", "=", "[", "-", "1.0", ",", "1.0", "]", ",", "\n", ")", ":", "\n", "        ", "self", ".", "_fun", "=", "fun", "\n", "input_shape", "=", "backend", ".", "asshape", "(", "input_shape", ")", "\n", "output_shape", "=", "backend", ".", "asshape", "(", "output_shape", ")", "\n", "rng_state_X", ",", "rng_state_y", "=", "backend", ".", "random", ".", "split", "(", "rng_state", ",", "num", "=", "2", ")", "\n", "\n", "X", "=", "self", ".", "_generate_X", "(", "\n", "rng_state_X", "=", "rng_state_X", ",", "\n", "num_data", "=", "size", "[", "0", "]", "+", "size", "[", "1", "]", ",", "\n", "input_shape", "=", "input_shape", ",", "\n", "range_X", "=", "range_X", ",", "\n", ")", "\n", "\n", "y", "=", "self", ".", "_generate_y", "(", "\n", "X", "=", "X", ",", "\n", "rng_state_y", "=", "rng_state_y", ",", "\n", "num_data", "=", "size", "[", "0", "]", "+", "size", "[", "1", "]", ",", "\n", "output_shape", "=", "output_shape", ",", "\n", "fun", "=", "fun", ",", "\n", "noise_var", "=", "noise_var", ",", "\n", ")", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "X", "=", "X", ",", "y", "=", "y", ",", "train_idcs", "=", "backend", ".", "arange", "(", "size", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.datasets._synthetic_dataset.SyntheticDataset.fun": [[83, 86], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "fun", "(", "self", ")", "->", "Callable", "[", "[", "backend", ".", "Array", "]", ",", "backend", ".", "Array", "]", ":", "\n", "        ", "return", "self", ".", "_fun", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.datasets._synthetic_dataset.SyntheticDataset._generate_X": [[87, 100], ["probnum.backend.random.uniform"], "methods", ["None"], ["", "def", "_generate_X", "(", "\n", "self", ",", "\n", "rng_state_X", ":", "backend", ".", "random", ".", "RNGState", ",", "\n", "num_data", ":", "int", ",", "\n", "input_shape", ":", "ShapeType", ",", "\n", "range_X", ":", "Tuple", "[", "float", ",", "float", "]", ",", "\n", ")", "->", "backend", ".", "Array", ":", "\n", "        ", "\"\"\"Randomly generate inputs.\"\"\"", "\n", "return", "backend", ".", "random", ".", "uniform", "(", "\n", "rng_state", "=", "rng_state_X", ",", "\n", "shape", "=", "(", "num_data", ",", ")", "+", "input_shape", ",", "\n", "minval", "=", "range_X", "[", "0", "]", ",", "\n", "maxval", "=", "range_X", "[", "1", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.datasets._synthetic_dataset.SyntheticDataset._generate_y": [[102, 114], ["_synthetic_dataset.SyntheticDataset.fun"], "methods", ["home.repos.pwc.inspect_result.jonathanwenger_itergp.datasets._synthetic_dataset.SyntheticDataset.fun"], ["", "def", "_generate_y", "(", "\n", "self", ",", "\n", "X", ":", "backend", ".", "Array", ",", "\n", "rng_state_y", ":", "backend", ".", "random", ".", "RNGState", ",", "\n", "num_data", ":", "int", ",", "\n", "output_shape", ":", "ShapeType", ",", "\n", "fun", ":", "Callable", "[", "[", "backend", ".", "Array", "]", ",", "backend", ".", "Array", "]", ",", "\n", "noise_var", ":", "float", ",", "\n", ")", "->", "backend", ".", "Array", ":", "\n", "        ", "\"\"\"Generate outputs via a ground truth function and some added noise.\"\"\"", "\n", "return", "fun", "(", "X", ")", "+", "backend", ".", "sqrt", "(", "noise_var", ")", "*", "backend", ".", "random", ".", "standard_normal", "(", "\n", "rng_state", "=", "rng_state_y", ",", "shape", "=", "(", "num_data", ",", ")", "+", "output_shape", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.datasets._dataset.Dataset.__init__": [[31, 38], ["probnum.backend.ones", "probnum.backend.arange"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "X", ":", "backend", ".", "Array", ",", "y", ":", "backend", ".", "Array", ",", "train_idcs", ":", "backend", ".", "Array", ")", ":", "\n", "        ", "self", ".", "_X", "=", "X", "\n", "self", ".", "_y", "=", "y", "\n", "self", ".", "_train_idcs", "=", "train_idcs", "\n", "test_mask", "=", "backend", ".", "ones", "(", "X", ".", "shape", "[", "0", "]", ",", "dtype", "=", "backend", ".", "bool", ")", "\n", "test_mask", "[", "train_idcs", "]", "=", "False", "\n", "self", ".", "_test_idcs", "=", "backend", ".", "arange", "(", "X", ".", "shape", "[", "0", "]", ")", "[", "test_mask", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.datasets._dataset.Dataset.__len__": [[39, 41], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "_y", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.datasets._dataset.Dataset.__repr__": [[42, 45], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "(", "\n", "f\"<{self.__class__.__name__}: \"", "\n", "f\"input_shape={self.input_shape}, \"", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.datasets._dataset.Dataset.train": [[50, 55], ["TrainData"], "methods", ["None"], ["", "@", "property", "\n", "def", "train", "(", "self", ")", "->", "TrainData", ":", "\n", "        ", "\"\"\"Training data.\"\"\"", "\n", "return", "TrainData", "(", "\n", "X", "=", "self", ".", "_X", "[", "self", ".", "_train_idcs", ",", "...", "]", ",", "y", "=", "self", ".", "_y", "[", "self", ".", "_train_idcs", ",", "...", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.datasets._dataset.Dataset.test": [[57, 62], ["TestData"], "methods", ["None"], ["", "@", "property", "\n", "def", "test", "(", "self", ")", "->", "TestData", ":", "\n", "        ", "\"Test data.\"", "\n", "return", "TestData", "(", "\n", "X", "=", "self", ".", "_X", "[", "self", ".", "_test_idcs", ",", "...", "]", ",", "y", "=", "self", ".", "_y", "[", "self", ".", "_test_idcs", ",", "...", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.datasets._dataset.Dataset.input_shape": [[64, 68], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "input_shape", "(", "self", ")", "->", "ShapeType", ":", "\n", "        ", "\"\"\"Input shape of the data.\"\"\"", "\n", "return", "self", ".", "_X", ".", "shape", "[", "1", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.datasets._dataset.Dataset.output_shape": [[69, 73], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_shape", "(", "self", ")", "->", "ShapeType", ":", "\n", "        ", "\"\"\"Output shape of the data.\"\"\"", "\n", "return", "self", ".", "_y", ".", "shape", "[", "1", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.datasets._dataset.Dataset.from_disk": [[74, 77], ["cls", "cls._load"], "methods", ["home.repos.pwc.inspect_result.jonathanwenger_itergp.datasets._dataset.Dataset._load"], ["", "@", "classmethod", "\n", "def", "from_disk", "(", "cls", ",", "dir", ":", "str", ")", "->", "\"Dataset\"", ":", "\n", "        ", "return", "cls", "(", "*", "cls", ".", "_load", "(", "dir", "=", "dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.datasets._dataset.Dataset._load": [[78, 93], ["pathlib.Path", "numpy.load", "probnum.backend.asarray", "probnum.backend.asarray", "probnum.backend.asarray", "cls.__name__.lower"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_load", "(", "\n", "cls", ",", "\n", "dir", ":", "str", "=", "\"data\"", ",", "\n", ")", "->", "Tuple", "[", "backend", ".", "Array", ",", "backend", ".", "Array", ",", "backend", ".", "Array", "]", ":", "\n", "        ", "dir", "=", "pathlib", ".", "Path", "(", "dir", ")", "\n", "\n", "file", "=", "dir", "/", "(", "cls", ".", "__name__", ".", "lower", "(", ")", "+", "\".npz\"", ")", "\n", "dataset", "=", "np", ".", "load", "(", "file", "=", "file", ")", "\n", "\n", "X", "=", "backend", ".", "asarray", "(", "dataset", "[", "\"X\"", "]", ")", "\n", "y", "=", "backend", ".", "asarray", "(", "dataset", "[", "\"y\"", "]", ")", "\n", "train_idcs", "=", "backend", ".", "asarray", "(", "dataset", "[", "\"train_idcs\"", "]", ")", "\n", "\n", "return", "X", ",", "y", ",", "train_idcs", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.datasets._dataset.Dataset.save": [[94, 115], ["pathlib.Path", "pathlib.Path.mkdir", "numpy.savez_compressed", "_dataset.Dataset.__class__.__name__.lower", "os.path.isfile", "numpy.asarray", "numpy.asarray", "numpy.asarray"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "dir", ":", "str", "=", "\"data\"", ",", "overwrite", "=", "False", ")", "->", "None", ":", "\n", "        ", "\"\"\"Save dataset to disk.\n\n        Parameters\n        ----------\n        dir\n            Directory to save data to.\n        overwrite\n            Whether to overwrite existing data.\n        \"\"\"", "\n", "dir", "=", "pathlib", ".", "Path", "(", "dir", ")", "\n", "dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "file", "=", "dir", "/", "(", "self", ".", "__class__", ".", "__name__", ".", "lower", "(", ")", "+", "\".npz\"", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "file", ")", "or", "overwrite", ":", "\n", "            ", "np", ".", "savez_compressed", "(", "\n", "file", "=", "file", ",", "\n", "X", "=", "np", ".", "asarray", "(", "self", ".", "_X", ")", ",", "\n", "y", "=", "np", ".", "asarray", "(", "self", ".", "_y", ")", ",", "\n", "train_idcs", "=", "np", ".", "asarray", "(", "self", ".", "_train_idcs", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.datasets._dataset.Dataset.resample": [[117, 136], ["_dataset.Dataset", "probnum.backend.random.permutation", "len", "len"], "methods", ["None"], ["", "", "def", "resample", "(", "self", ",", "rng_state", ":", "RNGState", ")", "->", "\"Dataset\"", ":", "\n", "        ", "\"\"\"Resample the training and test set from the entire data set.\n\n        Randomly selects new datapoints for the training and test set of the same sizes\n        as the original dataset.\n\n        Parameters\n        ----------\n        rng_state\n            Random number generator state.\n        \"\"\"", "\n", "train_idcs", "=", "backend", ".", "random", ".", "permutation", "(", "rng_state", ",", "len", "(", "self", ")", ")", "[", "\n", "0", ":", "len", "(", "self", ".", "_train_idcs", ")", "\n", "]", "\n", "\n", "return", "Dataset", "(", "\n", "X", "=", "self", ".", "_X", ",", "\n", "y", "=", "self", ".", "_y", ",", "\n", "train_idcs", "=", "train_idcs", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.uci._parkinsons.Parkinsons.__init__": [[34, 38], ["_uci_dataset.UCIDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.jonathanwenger_itergp.preconditioners._diagonal_plus_low_rank.DiagonalPlusLowRank.__init__"], ["def", "__init__", "(", "\n", "self", ",", "dir", ":", "Optional", "[", "str", "]", "=", "\"data/uci/parkinsons\"", ",", "overwrite", ":", "bool", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dir", ",", "overwrite", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.uci._parkinsons.Parkinsons._download": [[39, 50], ["pandas.read_csv", "pandas.read_csv.drop", "pandas.read_csv.pop", "pandas.read_csv.insert", "probnum.backend.asarray"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_download", "(", ")", "->", "backend", ".", "Array", ":", "\n", "# Read data", "\n", "        ", "df", "=", "pd", ".", "read_csv", "(", "Parkinsons", ".", "URL", "+", "\"parkinsons_updrs.data\"", ")", "\n", "df", ".", "drop", "(", "[", "\"motor_UPDRS\"", "]", ",", "axis", "=", "1", ")", "\n", "\n", "# Move column to predict", "\n", "column_to_move", "=", "df", ".", "pop", "(", "\"total_UPDRS\"", ")", "\n", "df", ".", "insert", "(", "0", ",", "\"total_UPDRS\"", ",", "column_to_move", ")", "\n", "\n", "return", "backend", ".", "asarray", "(", "df", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.uci._parkinsons.Parkinsons._preprocess": [[51, 72], ["_uci_dataset.UCIDataset._get_train_idcs", "probnum.backend.mean", "probnum.backend.std", "probnum.backend.mean", "probnum.backend.random.rng_state"], "methods", ["home.repos.pwc.inspect_result.jonathanwenger_itergp.uci._uci_dataset.UCIDataset._get_train_idcs"], ["", "@", "staticmethod", "\n", "def", "_preprocess", "(", "\n", "raw_data", ":", "backend", ".", "Array", ",", "\n", ")", "->", "Tuple", "[", "backend", ".", "Array", ",", "backend", ".", "Array", ",", "backend", ".", "Array", ",", "backend", ".", "Array", "]", ":", "\n", "\n", "# Preprocess", "\n", "        ", "X", "=", "raw_data", "[", ":", ",", "1", ":", ":", "]", "\n", "y", "=", "raw_data", "[", ":", ",", "0", "]", "\n", "\n", "# Transform outputs", "\n", "y", "=", "y", "-", "backend", ".", "mean", "(", "y", ",", "axis", "=", "0", ")", "\n", "\n", "# Normalize features", "\n", "X", "=", "(", "X", "-", "backend", ".", "mean", "(", "X", ",", "axis", "=", "0", ")", ")", "/", "backend", ".", "std", "(", "X", ",", "axis", "=", "0", ")", "\n", "\n", "# Select train-test split", "\n", "train_idcs", "=", "UCIDataset", ".", "_get_train_idcs", "(", "\n", "rng_state", "=", "backend", ".", "random", ".", "rng_state", "(", "4589", ")", ",", "num_data", "=", "X", ".", "shape", "[", "0", "]", "\n", ")", "\n", "\n", "return", "X", ",", "y", ",", "train_idcs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.uci._protein.Protein.__init__": [[25, 29], ["_uci_dataset.UCIDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.jonathanwenger_itergp.preconditioners._diagonal_plus_low_rank.DiagonalPlusLowRank.__init__"], ["def", "__init__", "(", "\n", "self", ",", "dir", ":", "Optional", "[", "str", "]", "=", "\"data/uci/protein\"", ",", "overwrite", ":", "bool", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dir", ",", "overwrite", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.uci._protein.Protein._download": [[30, 36], ["pandas.read_csv", "probnum.backend.asarray"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_download", "(", ")", "->", "backend", ".", "Array", ":", "\n", "# Read data", "\n", "        ", "df", "=", "pd", ".", "read_csv", "(", "Protein", ".", "URL", "+", "\"CASP.csv\"", ")", "\n", "\n", "return", "backend", ".", "asarray", "(", "df", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.uci._protein.Protein._preprocess": [[37, 59], ["probnum.backend.log", "_uci_dataset.UCIDataset._get_train_idcs", "probnum.backend.mean", "probnum.backend.std", "probnum.backend.mean", "probnum.backend.random.rng_state"], "methods", ["home.repos.pwc.inspect_result.jonathanwenger_itergp.uci._uci_dataset.UCIDataset._get_train_idcs"], ["", "@", "staticmethod", "\n", "def", "_preprocess", "(", "\n", "raw_data", ":", "backend", ".", "Array", ",", "\n", ")", "->", "Tuple", "[", "backend", ".", "Array", ",", "backend", ".", "Array", ",", "backend", ".", "Array", "]", ":", "\n", "\n", "# Preprocess", "\n", "        ", "X", "=", "raw_data", "[", ":", ",", "1", ":", ":", "]", "\n", "y", "=", "raw_data", "[", ":", ",", "0", "]", "\n", "\n", "# Transform outputs", "\n", "y", "=", "backend", ".", "log", "(", "y", "+", "1", ")", "\n", "y", "=", "y", "-", "backend", ".", "mean", "(", "y", ",", "axis", "=", "0", ")", "\n", "\n", "# Normalize features", "\n", "X", "=", "(", "X", "-", "backend", ".", "mean", "(", "X", ",", "axis", "=", "0", ")", ")", "/", "backend", ".", "std", "(", "X", ",", "axis", "=", "0", ")", "\n", "\n", "# Select train-test split", "\n", "train_idcs", "=", "UCIDataset", ".", "_get_train_idcs", "(", "\n", "rng_state", "=", "backend", ".", "random", ".", "rng_state", "(", "876", ")", ",", "num_data", "=", "X", ".", "shape", "[", "0", "]", "\n", ")", "\n", "\n", "return", "X", ",", "y", ",", "train_idcs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.uci._bike_sharing.BikeSharing.__init__": [[34, 36], ["_uci_dataset.UCIDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.jonathanwenger_itergp.preconditioners._diagonal_plus_low_rank.DiagonalPlusLowRank.__init__"], ["def", "__init__", "(", "self", ",", "dir", ":", "Optional", "[", "str", "]", "=", "\"data/uci/bike\"", ",", "overwrite", ":", "bool", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dir", ",", "overwrite", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.uci._bike_sharing.BikeSharing._download": [[37, 50], ["requests.get", "zipfile.ZipFile", "pandas.read_csv", "pandas.to_datetime().astype", "probnum.backend.asarray", "io.BytesIO", "zipfile.ZipFile.open", "pandas.to_datetime"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_download", "(", ")", "->", "backend", ".", "Array", ":", "\n", "# Download and unzip archive", "\n", "        ", "r", "=", "requests", ".", "get", "(", "BikeSharing", ".", "URL", "+", "\"Bike-Sharing-Dataset.zip\"", ")", "\n", "files", "=", "ZipFile", "(", "BytesIO", "(", "r", ".", "content", ")", ")", "\n", "\n", "# Read data for the hourly count", "\n", "df", "=", "pd", ".", "read_csv", "(", "files", ".", "open", "(", "\"hour.csv\"", ")", ")", "\n", "\n", "# Convert dates to numeric", "\n", "df", "[", "\"dteday\"", "]", "=", "pd", ".", "to_datetime", "(", "df", "[", "\"dteday\"", "]", ")", ".", "astype", "(", "int", ")", "\n", "\n", "return", "backend", ".", "asarray", "(", "df", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.uci._bike_sharing.BikeSharing._preprocess": [[51, 73], ["probnum.backend.log", "_uci_dataset.UCIDataset._get_train_idcs", "probnum.backend.mean", "probnum.backend.std", "probnum.backend.mean", "probnum.backend.random.rng_state"], "methods", ["home.repos.pwc.inspect_result.jonathanwenger_itergp.uci._uci_dataset.UCIDataset._get_train_idcs"], ["", "@", "staticmethod", "\n", "def", "_preprocess", "(", "\n", "raw_data", ":", "backend", ".", "Array", ",", "\n", ")", "->", "Tuple", "[", "backend", ".", "Array", ",", "backend", ".", "Array", ",", "backend", ".", "Array", ",", "backend", ".", "Array", "]", ":", "\n", "\n", "# Preprocess", "\n", "        ", "X", "=", "raw_data", "[", ":", ",", "0", ":", "-", "1", "]", "\n", "y", "=", "raw_data", "[", ":", ",", "-", "1", "]", "\n", "\n", "# Transform outputs", "\n", "y", "=", "backend", ".", "log", "(", "y", ")", "\n", "y", "=", "y", "-", "backend", ".", "mean", "(", "y", ",", "axis", "=", "0", ")", "\n", "\n", "# Normalize features", "\n", "X", "=", "(", "X", "-", "backend", ".", "mean", "(", "X", ",", "axis", "=", "0", ")", ")", "/", "backend", ".", "std", "(", "X", ",", "axis", "=", "0", ")", "\n", "\n", "# Select train-test split", "\n", "train_idcs", "=", "UCIDataset", ".", "_get_train_idcs", "(", "\n", "rng_state", "=", "backend", ".", "random", ".", "rng_state", "(", "2494", ")", ",", "num_data", "=", "X", ".", "shape", "[", "0", "]", "\n", ")", "\n", "\n", "return", "X", ",", "y", ",", "train_idcs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.uci._uci_dataset.UCIDataset.__init__": [[27, 43], ["super().__init__", "os.path.isfile", "_uci_dataset.UCIDataset._load", "_uci_dataset.UCIDataset._download", "_uci_dataset.UCIDataset._preprocess", "_uci_dataset.UCIDataset.save", "_uci_dataset.UCIDataset.__class__.__name__.lower"], "methods", ["home.repos.pwc.inspect_result.jonathanwenger_itergp.preconditioners._diagonal_plus_low_rank.DiagonalPlusLowRank.__init__", "home.repos.pwc.inspect_result.jonathanwenger_itergp.datasets._dataset.Dataset._load", "home.repos.pwc.inspect_result.jonathanwenger_itergp.uci._kegg_undir.KEGGUndir._download", "home.repos.pwc.inspect_result.jonathanwenger_itergp.uci._kegg_undir.KEGGUndir._preprocess", "home.repos.pwc.inspect_result.jonathanwenger_itergp.datasets._dataset.Dataset.save"], ["def", "__init__", "(", "self", ",", "dir", ":", "Optional", "[", "str", "]", "=", "\"data/uci\"", ",", "overwrite", ":", "bool", "=", "False", ")", ":", "\n", "\n", "        ", "file", "=", "dir", "+", "\"/\"", "+", "self", ".", "__class__", ".", "__name__", ".", "lower", "(", ")", "+", "\".npz\"", "\n", "if", "os", ".", "path", ".", "isfile", "(", "file", ")", "and", "not", "overwrite", ":", "\n", "# Load data from file", "\n", "            ", "X", ",", "y", ",", "train_idcs", "=", "self", ".", "_load", "(", "dir", "=", "dir", ")", "\n", "", "else", ":", "\n", "# Download data from the web", "\n", "            ", "raw_data", "=", "self", ".", "_download", "(", ")", "\n", "X", ",", "y", ",", "train_idcs", "=", "self", ".", "_preprocess", "(", "raw_data", ")", "\n", "\n", "", "super", "(", ")", ".", "__init__", "(", "X", "=", "X", ",", "y", "=", "y", ",", "train_idcs", "=", "train_idcs", ")", "\n", "\n", "# Save to disk if data does not yet exist on disk", "\n", "if", "dir", "is", "not", "None", ":", "\n", "            ", "self", ".", "save", "(", "dir", "=", "dir", ",", "overwrite", "=", "overwrite", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.uci._uci_dataset.UCIDataset._download": [[44, 48], ["None"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_download", "(", ")", "->", "backend", ".", "Array", ":", "\n", "        ", "\"\"\"Download data from the UCI repository.\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.uci._uci_dataset.UCIDataset._preprocess": [[49, 55], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_preprocess", "(", "\n", "raw_data", ":", "backend", ".", "Array", ",", "\n", ")", "->", "Tuple", "[", "backend", ".", "Array", ",", "backend", ".", "Array", ",", "backend", ".", "Array", "]", ":", "\n", "        ", "\"\"\"Preprocess, normalize and split into train and test set.\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.uci._uci_dataset.UCIDataset._get_train_idcs": [[56, 63], ["int", "probnum.backend.random.permutation"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_train_idcs", "(", "\n", "rng_state", ":", "RNGState", ",", "num_data", ":", "int", ",", "train_fraction", ":", "float", "=", "0.9", "\n", ")", "->", "backend", ".", "Array", ":", "\n", "        ", "\"\"\"Sample a set of training indices.\"\"\"", "\n", "train_set_size", "=", "int", "(", "num_data", "*", "train_fraction", ")", "\n", "return", "backend", ".", "random", ".", "permutation", "(", "rng_state", ",", "num_data", ")", "[", "0", ":", "train_set_size", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.uci._road_network.RoadNetwork.__init__": [[27, 29], ["_uci_dataset.UCIDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.jonathanwenger_itergp.preconditioners._diagonal_plus_low_rank.DiagonalPlusLowRank.__init__"], ["def", "__init__", "(", "self", ",", "dir", ":", "Optional", "[", "str", "]", "=", "\"data/uci/3droad\"", ",", "overwrite", ":", "bool", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dir", ",", "overwrite", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.uci._road_network.RoadNetwork._download": [[30, 40], ["pandas.read_csv", "probnum.backend.asarray"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_download", "(", ")", "->", "backend", ".", "Array", ":", "\n", "# Read data", "\n", "        ", "df", "=", "pd", ".", "read_csv", "(", "\n", "RoadNetwork", ".", "URL", "+", "\"3D_spatial_network.txt\"", ",", "\n", "header", "=", "None", ",", "\n", "names", "=", "[", "\"OSM_ID\"", ",", "\"longitude\"", ",", "\"latitude\"", ",", "\"altitude\"", "]", ",", "\n", ")", "\n", "\n", "return", "backend", ".", "asarray", "(", "df", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.uci._road_network.RoadNetwork._preprocess": [[41, 62], ["_uci_dataset.UCIDataset._get_train_idcs", "probnum.backend.mean", "probnum.backend.std", "probnum.backend.mean", "probnum.backend.random.rng_state"], "methods", ["home.repos.pwc.inspect_result.jonathanwenger_itergp.uci._uci_dataset.UCIDataset._get_train_idcs"], ["", "@", "staticmethod", "\n", "def", "_preprocess", "(", "\n", "raw_data", ":", "backend", ".", "Array", ",", "\n", ")", "->", "Tuple", "[", "backend", ".", "Array", ",", "backend", ".", "Array", ",", "backend", ".", "Array", "]", ":", "\n", "\n", "# Preprocess", "\n", "        ", "X", "=", "raw_data", "[", ":", ",", "1", ":", "-", "1", "]", "\n", "y", "=", "raw_data", "[", ":", ",", "-", "1", "]", "\n", "\n", "# Transform outputs", "\n", "y", "=", "y", "-", "backend", ".", "mean", "(", "y", ",", "axis", "=", "0", ")", "\n", "\n", "# Normalize features", "\n", "X", "=", "(", "X", "-", "backend", ".", "mean", "(", "X", ",", "axis", "=", "0", ")", ")", "/", "backend", ".", "std", "(", "X", ",", "axis", "=", "0", ")", "\n", "\n", "# Select train-test split", "\n", "train_idcs", "=", "UCIDataset", ".", "_get_train_idcs", "(", "\n", "rng_state", "=", "backend", ".", "random", ".", "rng_state", "(", "126", ")", ",", "num_data", "=", "X", ".", "shape", "[", "0", "]", "\n", ")", "\n", "\n", "return", "X", ",", "y", ",", "train_idcs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.uci._kegg_undir.KEGGUndir.__init__": [[30, 32], ["_uci_dataset.UCIDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.jonathanwenger_itergp.preconditioners._diagonal_plus_low_rank.DiagonalPlusLowRank.__init__"], ["def", "__init__", "(", "self", ",", "dir", ":", "Optional", "[", "str", "]", "=", "\"data/uci/keggu\"", ",", "overwrite", ":", "bool", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dir", ",", "overwrite", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.uci._kegg_undir.KEGGUndir._download": [[33, 47], ["pandas.read_csv", "pandas.read_csv.drop", "df[].astype", "pandas.read_csv.drop", "pandas.read_csv.drop", "probnum.backend.asarray"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_download", "(", ")", "->", "backend", ".", "Array", ":", "\n", "# Read data", "\n", "        ", "df", "=", "pd", ".", "read_csv", "(", "\n", "KEGGUndir", ".", "URL", "+", "\"Reaction%20Network%20(Undirected).data\"", ",", "\n", "index_col", "=", "0", ",", "\n", "header", "=", "None", ",", "\n", ")", "\n", "df", ".", "drop", "(", "df", "[", "df", "[", "4", "]", "==", "\"?\"", "]", ".", "index", ",", "inplace", "=", "True", ")", "\n", "df", "[", "4", "]", "=", "df", "[", "4", "]", ".", "astype", "(", "float", ")", "\n", "df", ".", "drop", "(", "df", "[", "df", "[", "21", "]", ">", "1", "]", ".", "index", ",", "inplace", "=", "True", ")", "\n", "df", ".", "drop", "(", "columns", "=", "[", "10", "]", ",", "inplace", "=", "True", ")", "\n", "\n", "return", "backend", ".", "asarray", "(", "df", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.uci._kegg_undir.KEGGUndir._preprocess": [[48, 70], ["probnum.backend.log", "_uci_dataset.UCIDataset._get_train_idcs", "probnum.backend.mean", "probnum.backend.std", "probnum.backend.mean", "probnum.backend.random.rng_state"], "methods", ["home.repos.pwc.inspect_result.jonathanwenger_itergp.uci._uci_dataset.UCIDataset._get_train_idcs"], ["", "@", "staticmethod", "\n", "def", "_preprocess", "(", "\n", "raw_data", ":", "backend", ".", "Array", ",", "\n", ")", "->", "Tuple", "[", "backend", ".", "Array", ",", "backend", ".", "Array", ",", "backend", ".", "Array", ",", "backend", ".", "Array", "]", ":", "\n", "\n", "# Preprocess", "\n", "        ", "X", "=", "raw_data", "[", ":", ",", "0", ":", "-", "1", "]", "\n", "y", "=", "raw_data", "[", ":", ",", "-", "1", "]", "\n", "\n", "# Transform outputs", "\n", "y", "=", "backend", ".", "log", "(", "y", ")", "\n", "y", "=", "y", "-", "backend", ".", "mean", "(", "y", ",", "axis", "=", "0", ")", "\n", "\n", "# Normalize features", "\n", "X", "=", "(", "X", "-", "backend", ".", "mean", "(", "X", ",", "axis", "=", "0", ")", ")", "/", "backend", ".", "std", "(", "X", ",", "axis", "=", "0", ")", "\n", "\n", "# Select train-test split", "\n", "train_idcs", "=", "UCIDataset", ".", "_get_train_idcs", "(", "\n", "rng_state", "=", "backend", ".", "random", ".", "rng_state", "(", "48879", ")", ",", "num_data", "=", "X", ".", "shape", "[", "0", "]", "\n", ")", "\n", "\n", "return", "X", ",", "y", ",", "train_idcs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.linops._kernel_matrix.KernelMatrix.__init__": [[30, 57], ["probnum.backend.asarray", "probnum.linops.LinearOperator.__init__", "probnum.backend.asarray", "probnum.backend.promote_types", "_kernel_matrix.KernelMatrix._kernel.matrix", "_kernel_matrix.KernelMatrix"], "methods", ["home.repos.pwc.inspect_result.jonathanwenger_itergp.preconditioners._diagonal_plus_low_rank.DiagonalPlusLowRank.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "kernel", ":", "randprocs", ".", "kernels", ".", "Kernel", ",", "\n", "x0", ":", "backend", ".", "Array", ",", "\n", "x1", ":", "Optional", "[", "backend", ".", "Array", "]", "=", "None", ",", "\n", "size_keops", "=", "1000", ",", "\n", ")", ":", "\n", "\n", "        ", "self", ".", "_kernel", "=", "kernel", "\n", "\n", "self", ".", "_x0", "=", "x0", "=", "backend", ".", "asarray", "(", "x0", ")", "\n", "self", ".", "_x1", "=", "x0", "if", "x1", "is", "None", "else", "backend", ".", "asarray", "(", "x1", ")", "\n", "self", ".", "_use_keops", "=", "x0", ".", "shape", "[", "0", "]", ">=", "size_keops", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "shape", "=", "(", "self", ".", "_x0", ".", "shape", "[", "0", "]", ",", "self", ".", "_x1", ".", "shape", "[", "0", "]", ")", ",", "\n", "dtype", "=", "backend", ".", "promote_types", "(", "self", ".", "_x0", ".", "dtype", ",", "self", ".", "_x1", ".", "dtype", ")", ",", "\n", "matmul", "=", "self", ".", "_matmul", ",", "\n", "rmatmul", "=", "self", ".", "_rmatmul", ",", "\n", "todense", "=", "lambda", ":", "self", ".", "_kernel", ".", "matrix", "(", "self", ".", "_x0", ",", "self", ".", "_x1", ")", ",", "\n", "transpose", "=", "lambda", ":", "KernelMatrix", "(", "kernel", "=", "kernel", ",", "x0", "=", "x1", ",", "x1", "=", "x0", ")", ",", "\n", ")", "\n", "\n", "# Matrix properties", "\n", "if", "x1", "is", "None", ":", "\n", "            ", "self", ".", "is_symmetric", "=", "True", "\n", "self", ".", "is_positive_definite", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.linops._kernel_matrix.KernelMatrix.kernel": [[58, 61], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "kernel", "(", "self", ")", "->", "randprocs", ".", "kernels", ".", "Kernel", ":", "\n", "        ", "return", "self", ".", "_kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.linops._kernel_matrix.KernelMatrix.x0": [[62, 65], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "x0", "(", "self", ")", "->", "backend", ".", "Array", ":", "\n", "        ", "return", "self", ".", "_x0", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.linops._kernel_matrix.KernelMatrix.x1": [[66, 69], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "x1", "(", "self", ")", "->", "backend", ".", "Array", ":", "\n", "        ", "return", "self", ".", "_x1", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.linops._kernel_matrix.KernelMatrix._matmul": [[70, 83], ["_kernel_matrix.KernelMatrix.todense", "_kernel_matrix.KernelMatrix._kernel._keops_lazy_tensor"], "methods", ["None"], ["", "def", "_matmul", "(", "self", ",", "x", ":", "backend", ".", "Array", ")", ":", "\n", "        ", "if", "self", ".", "_use_keops", ":", "\n", "            ", "x0", "=", "self", ".", "_x0", "\n", "x1", "=", "self", ".", "_x1", "\n", "if", "self", ".", "_kernel", ".", "input_ndim", "==", "0", ":", "\n", "                ", "if", "self", ".", "_x0", ".", "ndim", "==", "1", ":", "\n", "                    ", "x0", "=", "self", ".", "_x0", "[", ":", ",", "None", "]", "\n", "", "if", "self", ".", "_x1", ".", "ndim", "==", "1", ":", "\n", "                    ", "x1", "=", "self", ".", "_x1", "[", ":", ",", "None", "]", "\n", "\n", "", "", "return", "self", ".", "_kernel", ".", "_keops_lazy_tensor", "(", "x0", ",", "x1", ")", "@", "x", "\n", "\n", "", "return", "self", ".", "todense", "(", ")", "@", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.linops._kernel_matrix.KernelMatrix._rmatmul": [[84, 88], ["_kernel_matrix.KernelMatrix.todense", "_kernel_matrix.KernelMatrix._matmul"], "methods", ["home.repos.pwc.inspect_result.jonathanwenger_itergp.linops._kernel_matrix.KernelMatrix._matmul"], ["", "def", "_rmatmul", "(", "self", ",", "x", ":", "backend", ".", "Array", ")", ":", "\n", "        ", "if", "self", ".", "_use_keops", ":", "\n", "            ", "return", "(", "self", ".", "_matmul", "(", "x", ".", "T", ")", ")", ".", "T", "\n", "", "return", "x", "@", "self", ".", "todense", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.linops._low_rank.LowRankMatrix.__init__": [[28, 61], ["probnum.linops.LinearOperator.__init__", "U.reshape", "probnum.linops.aslinop", "probnum.linops.aslinop", "V.reshape"], "methods", ["home.repos.pwc.inspect_result.jonathanwenger_itergp.preconditioners._diagonal_plus_low_rank.DiagonalPlusLowRank.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "U", ":", "backend", ".", "Array", ",", "\n", "V", ":", "Optional", "[", "backend", ".", "Array", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "if", "U", ".", "ndim", "==", "1", ":", "\n", "            ", "self", ".", "_U", "=", "U", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "", "self", ".", "_U", "=", "U", "\n", "\n", "if", "V", "is", "None", ":", "\n", "            ", "self", ".", "_V", "=", "self", ".", "_U", "\n", "self", ".", "_identical_factors", "=", "True", "\n", "", "else", ":", "\n", "            ", "if", "V", ".", "ndim", "==", "1", ":", "\n", "                ", "self", ".", "_V", "=", "V", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "", "self", ".", "_V", "=", "V", "\n", "\n", "", "self", ".", "_linop", "=", "linops", ".", "aslinop", "(", "self", ".", "_U", ")", "@", "linops", ".", "aslinop", "(", "self", ".", "_V", ".", "T", ")", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "shape", "=", "self", ".", "_linop", ".", "shape", ",", "\n", "dtype", "=", "self", ".", "_linop", ".", "dtype", ",", "\n", "matmul", "=", "self", ".", "_linop", ".", "__matmul__", ",", "\n", "rmatmul", "=", "self", ".", "_linop", ".", "__rmatmul__", ",", "\n", "apply", "=", "self", ".", "_linop", ".", "__call__", ",", "\n", "todense", "=", "self", ".", "_linop", ".", "todense", ",", "\n", "transpose", "=", "lambda", ":", "self", "if", "V", "is", "None", "else", "lambda", "self", ":", "self", ".", "_V", "@", "self", ".", "_U", ".", "T", ",", "\n", ")", "\n", "\n", "# Matrix properties", "\n", "if", "V", "is", "None", ":", "\n", "            ", "self", ".", "is_symmetric", "=", "True", "\n", "self", ".", "is_positive_definite", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.linops._low_rank.LowRankMatrix.identical_factors": [[62, 65], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "identical_factors", "(", "self", ")", "->", "bool", ":", "\n", "        ", "return", "self", ".", "_identical_factors", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.linops._low_rank.LowRankMatrix.U": [[66, 70], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "U", "(", "self", ")", "->", "linops", ".", "LinearOperator", ":", "\n", "        ", "\"\"\"First factor.\"\"\"", "\n", "return", "self", ".", "_U", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.linops._low_rank.LowRankMatrix.V": [[71, 75], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "V", "(", "self", ")", "->", "linops", ".", "LinearOperator", ":", "\n", "        ", "\"\"\"Second factor.\"\"\"", "\n", "return", "self", ".", "_V", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.kernels.__init__.linop": [[18, 60], ["probnum.backend.asarray", "itergp.linops.KernelMatrix", "probnum.backend.asarray", "ValueError", "ValueError", "errmsg.format", "errmsg.format"], "function", ["None"], [""]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.kernels.__init__._expquad_keops_lazy_tensor": [[62, 69], ["pykeops.numpy.Vi().sqdist", "pykeops.numpy.Pm", "pykeops.numpy.Vj", "probnum.backend.asarray", "pykeops.numpy.Vi"], "function", ["None"], []], "home.repos.pwc.inspect_result.jonathanwenger_itergp.kernels.__init__._matern_keops_lazy_tensor": [[72, 90], ["pykeops.numpy.Vi().sqdist", "Vi().sqdist.sqrt", "pykeops.numpy.Vj", "pykeops.numpy.Vi", "pykeops.numpy.Pm", "probnum.backend.asarray", "pykeops.numpy.Pm", "probnum.backend.asarray", "probnum.backend.sqrt"], "function", ["None"], []], "home.repos.pwc.inspect_result.jonathanwenger_itergp.kernels.__init__._scaled_keops_lazy_tensor": [[92, 98], ["__init__.._kernel._keops_lazy_tensor"], "function", ["None"], []], "home.repos.pwc.inspect_result.jonathanwenger_itergp.methods._auto_precond_conjugate_gradient.AutoPreconditionedConjugateGradient.__init__": [[41, 61], ["itergp.methods.policies.UnitVectorPolicy", "probnum.linalg.solvers.ProbabilisticLinearSolver.__init__", "itergp.methods.policies.AutoPreconditionedGradientPolicy", "probnum.linalg.solvers.information_ops.ProjectedResidualInformationOp", "itergp.methods.belief_updates.ProjectedResidualBeliefUpdate", "probnum.linalg.solvers.stopping_criteria.MaxIterationsStoppingCriterion", "probnum.linalg.solvers.stopping_criteria.ResidualNormStoppingCriterion"], "methods", ["home.repos.pwc.inspect_result.jonathanwenger_itergp.preconditioners._diagonal_plus_low_rank.DiagonalPlusLowRank.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "precond_iter", ":", "int", ",", "\n", "precond_policy", ":", "Tuple", "[", "\n", "linalg", ".", "solvers", ".", "policies", ".", "LinearSolverPolicy", "\n", "]", "=", "policies", ".", "UnitVectorPolicy", "(", ")", ",", "\n", "maxiter", ":", "int", "=", "None", ",", "\n", "atol", ":", "float", "=", "1e-6", ",", "\n", "rtol", ":", "float", "=", "1e-6", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "policy", "=", "policies", ".", "AutoPreconditionedGradientPolicy", "(", "\n", "precond_iter", "=", "precond_iter", ",", "precond_policy", "=", "precond_policy", "\n", ")", ",", "\n", "information_op", "=", "information_ops", ".", "ProjectedResidualInformationOp", "(", ")", ",", "\n", "belief_update", "=", "belief_updates", ".", "ProjectedResidualBeliefUpdate", "(", ")", ",", "\n", "stopping_criterion", "=", "stopping_criteria", ".", "MaxIterationsStoppingCriterion", "(", "\n", "maxiter", "=", "maxiter", "\n", ")", "\n", "|", "stopping_criteria", ".", "ResidualNormStoppingCriterion", "(", "atol", "=", "atol", ",", "rtol", "=", "rtol", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.methods._pseudo_input.PseudoInput.__init__": [[18, 26], ["probnum.linalg.solvers.ProbabilisticLinearSolver.__init__", "itergp.methods.policies.PseudoInputPolicy", "probnum.linalg.solvers.information_ops.ProjectedResidualInformationOp", "itergp.methods.belief_updates.ProjectedResidualBeliefUpdate", "itergp.methods.stopping_criteria.MaxIterationsStoppingCriterion"], "methods", ["home.repos.pwc.inspect_result.jonathanwenger_itergp.preconditioners._diagonal_plus_low_rank.DiagonalPlusLowRank.__init__"], ["def", "__init__", "(", "self", ",", "pseudo_inputs", ":", "backend", ".", "Array", ")", ":", "\n", "        ", "self", ".", "_pseudo_inputs", "=", "pseudo_inputs", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "policy", "=", "policies", ".", "PseudoInputPolicy", "(", "pseudo_inputs", "=", "pseudo_inputs", ")", ",", "\n", "information_op", "=", "information_ops", ".", "ProjectedResidualInformationOp", "(", ")", ",", "\n", "belief_update", "=", "belief_updates", ".", "ProjectedResidualBeliefUpdate", "(", ")", ",", "\n", "stopping_criterion", "=", "stopping_criteria", ".", "MaxIterationsStoppingCriterion", "(", "\n", "maxiter", "=", "pseudo_inputs", ".", "shape", "[", "0", "]", ",", "problem_size_factor", "=", "1", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.methods._pseudo_input.PseudoInput.pseudo_inputs": [[29, 32], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "pseudo_inputs", "(", "self", ")", "->", "backend", ".", "Array", ":", "\n", "        ", "return", "self", ".", "_pseudo_inputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.methods._projected_bayes_regressor.ProjectedBayesRegressor.__init__": [[28, 43], ["probnum.linalg.solvers.ProbabilisticLinearSolver.__init__", "itergp.methods.policies.EigenvectorPolicy", "probnum.linalg.solvers.information_ops.ProjectedResidualInformationOp", "itergp.methods.belief_updates.ProjectedResidualBeliefUpdate", "itergp.methods.stopping_criteria.MaxIterationsStoppingCriterion", "probnum.linalg.solvers.stopping_criteria.ResidualNormStoppingCriterion"], "methods", ["home.repos.pwc.inspect_result.jonathanwenger_itergp.preconditioners._diagonal_plus_low_rank.DiagonalPlusLowRank.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "descending", ":", "bool", "=", "True", ",", "\n", "maxiter", ":", "int", "=", "None", ",", "\n", "atol", ":", "float", "=", "1e-6", ",", "\n", "rtol", ":", "float", "=", "1e-6", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "policy", "=", "policies", ".", "EigenvectorPolicy", "(", "descending", "=", "descending", ")", ",", "\n", "information_op", "=", "information_ops", ".", "ProjectedResidualInformationOp", "(", ")", ",", "\n", "belief_update", "=", "belief_updates", ".", "ProjectedResidualBeliefUpdate", "(", ")", ",", "\n", "stopping_criterion", "=", "itergp", ".", "methods", ".", "stopping_criteria", ".", "MaxIterationsStoppingCriterion", "(", "\n", "maxiter", "=", "maxiter", ",", "problem_size_factor", "=", "1", "\n", ")", "\n", "|", "stopping_criteria", ".", "ResidualNormStoppingCriterion", "(", "atol", "=", "atol", ",", "rtol", "=", "rtol", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.methods._cholesky.Cholesky.__init__": [[22, 37], ["probnum.linalg.solvers.ProbabilisticLinearSolver.__init__", "itergp.methods.policies.UnitVectorPolicy", "probnum.linalg.solvers.information_ops.ProjectedResidualInformationOp", "itergp.methods.belief_updates.ProjectedResidualBeliefUpdate", "itergp.methods.stopping_criteria.MaxIterationsStoppingCriterion", "probnum.linalg.solvers.stopping_criteria.ResidualNormStoppingCriterion"], "methods", ["home.repos.pwc.inspect_result.jonathanwenger_itergp.preconditioners._diagonal_plus_low_rank.DiagonalPlusLowRank.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "atol", ":", "float", "=", "1e-6", ",", "\n", "rtol", ":", "float", "=", "1e-6", ",", "\n", "maxrank", ":", "int", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "policy", "=", "policies", ".", "UnitVectorPolicy", "(", ")", ",", "\n", "information_op", "=", "information_ops", ".", "ProjectedResidualInformationOp", "(", ")", ",", "\n", "belief_update", "=", "belief_updates", ".", "ProjectedResidualBeliefUpdate", "(", ")", ",", "\n", "stopping_criterion", "=", "stopping_criteria", ".", "MaxIterationsStoppingCriterion", "(", "\n", "maxiter", "=", "maxrank", ",", "problem_size_factor", "=", "1", "\n", ")", "\n", "|", "probnum", ".", "linalg", ".", "solvers", ".", "stopping_criteria", ".", "ResidualNormStoppingCriterion", "(", "\n", "atol", "=", "atol", ",", "rtol", "=", "rtol", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.methods._conjugate_gradient.ConjugateGradient.__init__": [[40, 73], ["probnum.linalg.solvers.ProbabilisticLinearSolver.__init__", "itergp.methods.policies.ConjugateGradientPolicy", "probnum.linalg.solvers.information_ops.ProjectedResidualInformationOp", "ConjugateGradient.BeliefUpdate", "probnum.linalg.solvers.stopping_criteria.MaxIterationsStoppingCriterion", "probnum.linalg.solvers.stopping_criteria.ResidualNormStoppingCriterion"], "methods", ["home.repos.pwc.inspect_result.jonathanwenger_itergp.preconditioners._diagonal_plus_low_rank.DiagonalPlusLowRank.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "precond_inv", ":", "LinearOperatorLike", "=", "None", ",", "\n", "maxiter", ":", "int", "=", "None", ",", "\n", "atol", ":", "float", "=", "1e-6", ",", "\n", "rtol", ":", "float", "=", "1e-6", ",", "\n", "reorthogonalization_fn_residual", ":", "Optional", "[", "\n", "Callable", "[", "\n", "[", "backend", ".", "Array", ",", "Iterable", "[", "backend", ".", "Array", "]", ",", "linops", ".", "LinearOperator", "]", ",", "\n", "backend", ".", "Array", ",", "\n", "]", "\n", "]", "=", "backend", ".", "linalg", ".", "gram_schmidt_double", ",", "\n", ")", ":", "\n", "# super().__init__(", "\n", "#     policy=policies.GradientPolicy(precond_inv=precond_inv),", "\n", "#     information_op=information_ops.ProjectedResidualInformationOp(),", "\n", "#     belief_update=belief_updates.ProjectedResidualBeliefUpdate(),", "\n", "#     stopping_criterion=stopping_criteria.MaxIterationsStoppingCriterion(", "\n", "#         maxiter=maxiter", "\n", "#     )", "\n", "#     | stopping_criteria.ResidualNormStoppingCriterion(atol=atol, rtol=rtol),", "\n", "# )", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "policy", "=", "policies", ".", "ConjugateGradientPolicy", "(", "\n", "precond_inv", "=", "precond_inv", ",", "\n", "reorthogonalization_fn_residual", "=", "reorthogonalization_fn_residual", ",", "\n", ")", ",", "\n", "information_op", "=", "information_ops", ".", "ProjectedResidualInformationOp", "(", ")", ",", "\n", "belief_update", "=", "ConjugateGradient", ".", "BeliefUpdate", "(", ")", ",", "\n", "stopping_criterion", "=", "stopping_criteria", ".", "MaxIterationsStoppingCriterion", "(", "\n", "maxiter", "=", "maxiter", "\n", ")", "\n", "|", "stopping_criteria", ".", "ResidualNormStoppingCriterion", "(", "atol", "=", "atol", ",", "rtol", "=", "rtol", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.methods._mixed_strategy.MixedStrategy.__init__": [[35, 54], ["probnum.linalg.solvers.ProbabilisticLinearSolver.__init__", "len", "len", "itergp.methods.policies.MixedPolicy", "probnum.linalg.solvers.information_ops.ProjectedResidualInformationOp", "itergp.methods.belief_updates.ProjectedResidualBeliefUpdate", "probnum.linalg.solvers.stopping_criteria.MaxIterationsStoppingCriterion", "probnum.linalg.solvers.stopping_criteria.ResidualNormStoppingCriterion"], "methods", ["home.repos.pwc.inspect_result.jonathanwenger_itergp.preconditioners._diagonal_plus_low_rank.DiagonalPlusLowRank.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "base_policies", ":", "Tuple", "[", "linalg", ".", "solvers", ".", "policies", ".", "LinearSolverPolicy", "]", ",", "\n", "iters", ":", "Tuple", "[", "int", "]", ",", "\n", "atol", ":", "float", "=", "1e-6", ",", "\n", "rtol", ":", "float", "=", "1e-6", ",", "\n", "maxiter", ":", "int", "=", "None", ",", "\n", ")", ":", "\n", "        ", "if", "len", "(", "iters", ")", "==", "len", "(", "base_policies", ")", "and", "maxiter", "is", "None", ":", "\n", "            ", "maxiter", "=", "iters", "[", "-", "1", "]", "\n", "\n", "", "super", "(", ")", ".", "__init__", "(", "\n", "policy", "=", "policies", ".", "MixedPolicy", "(", "base_policies", "=", "base_policies", ",", "iters", "=", "iters", ")", ",", "\n", "information_op", "=", "information_ops", ".", "ProjectedResidualInformationOp", "(", ")", ",", "\n", "belief_update", "=", "belief_updates", ".", "ProjectedResidualBeliefUpdate", "(", ")", ",", "\n", "stopping_criterion", "=", "stopping_criteria", ".", "MaxIterationsStoppingCriterion", "(", "\n", "maxiter", "=", "maxiter", ",", "problem_size_factor", "=", "1", "\n", ")", "\n", "|", "pn_stopping_criteria", ".", "ResidualNormStoppingCriterion", "(", "atol", "=", "atol", ",", "rtol", "=", "rtol", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.policies._gradient.GradientPolicy.__init__": [[25, 31], ["probnum.linalg.solvers.policies.LinearSolverPolicy.__init__", "probnum.linops.aslinop"], "methods", ["home.repos.pwc.inspect_result.jonathanwenger_itergp.preconditioners._diagonal_plus_low_rank.DiagonalPlusLowRank.__init__"], ["def", "__init__", "(", "self", ",", "precond_inv", ":", "Optional", "[", "LinearOperatorLike", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "if", "precond_inv", "is", "not", "None", ":", "\n", "            ", "self", ".", "_precond_inv", "=", "linops", ".", "aslinop", "(", "precond_inv", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_precond_inv", "=", "precond_inv", "\n", "", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.policies._gradient.GradientPolicy.precond_inv": [[32, 36], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "precond_inv", "(", "self", ")", "->", "Optional", "[", "linops", ".", "LinearOperator", "]", ":", "\n", "        ", "\"\"\"Preconditioner inverse.\"\"\"", "\n", "return", "self", ".", "_precond_inv", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.policies._gradient.GradientPolicy.__call__": [[37, 60], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "\n", "self", ",", "\n", "solver_state", ":", "\"probnum.linalg.solvers.LinearSolverState\"", ",", "\n", "rng", ":", "Optional", "[", "RNGState", "]", ",", "\n", ")", "->", "backend", ".", "Array", ":", "\n", "        ", "\"\"\"Return an action for a given solver state.\n\n        Parameters\n        ----------\n        solver_state\n            Current state of the linear solver.\n        rng\n            Random number generator.\n\n        Returns\n        -------\n        action\n            Next action to take.\n        \"\"\"", "\n", "if", "self", ".", "_precond_inv", "is", "None", ":", "\n", "            ", "return", "solver_state", ".", "residual", "\n", "\n", "", "return", "self", ".", "_precond_inv", "@", "solver_state", ".", "residual", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.policies._mixed.MixedPolicy.__init__": [[29, 35], ["probnum.linalg.solvers.policies.LinearSolverPolicy.__init__"], "methods", ["home.repos.pwc.inspect_result.jonathanwenger_itergp.preconditioners._diagonal_plus_low_rank.DiagonalPlusLowRank.__init__"], ["def", "__init__", "(", "\n", "self", ",", "base_policies", ":", "Tuple", "[", "policies", ".", "LinearSolverPolicy", "]", ",", "iters", ":", "Tuple", "[", "int", "]", "\n", ")", "->", "None", ":", "\n", "        ", "self", ".", "_base_policies", "=", "base_policies", "\n", "self", ".", "_iters", "=", "iters", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.policies._mixed.MixedPolicy.__call__": [[36, 57], ["bisect.bisect_right"], "methods", ["None"], ["", "def", "__call__", "(", "\n", "self", ",", "\n", "solver_state", ":", "\"probnum.linalg.solvers.LinearSolverState\"", ",", "\n", "rng", ":", "Optional", "[", "RNGState", "]", "=", "None", ",", "\n", ")", "->", "backend", ".", "Array", ":", "\n", "        ", "\"\"\"Return an action for a given solver state.\n\n        Parameters\n        ----------\n        solver_state\n            Current state of the linear solver.\n        rng\n            Random number generator.\n\n        Returns\n        -------\n        action\n            Next action to take.\n        \"\"\"", "\n", "policy_idx", "=", "bisect", ".", "bisect_right", "(", "self", ".", "_iters", ",", "solver_state", ".", "step", ")", "\n", "return", "self", ".", "_base_policies", "[", "policy_idx", "]", "(", "solver_state", "=", "solver_state", ",", "rng", "=", "rng", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.policies._pseudo_input.PseudoInputPolicy.__init__": [[21, 24], ["probnum.linalg.solvers.policies.LinearSolverPolicy.__init__"], "methods", ["home.repos.pwc.inspect_result.jonathanwenger_itergp.preconditioners._diagonal_plus_low_rank.DiagonalPlusLowRank.__init__"], ["policy", "=", "policies", ".", "PseudoInputPolicy", "(", "pseudo_inputs", "=", "pseudo_inputs", ")", ",", "\n", "information_op", "=", "information_ops", ".", "ProjectedResidualInformationOp", "(", ")", ",", "\n", "belief_update", "=", "belief_updates", ".", "ProjectedResidualBeliefUpdate", "(", ")", ",", "\n", "stopping_criterion", "=", "stopping_criteria", ".", "MaxIterationsStoppingCriterion", "(", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.policies._pseudo_input.PseudoInputPolicy.__call__": [[25, 54], ["kernel", "solver_state.cache.keys"], "methods", ["home.repos.pwc.inspect_result.jonathanwenger_itergp.linops._kernel_matrix.KernelMatrix.kernel"], ["maxiter", "=", "pseudo_inputs", ".", "shape", "[", "0", "]", ",", "problem_size_factor", "=", "1", "\n", ")", ",", "\n", ")", "\n", "\n", "", "@", "property", "\n", "def", "pseudo_inputs", "(", "self", ")", "->", "backend", ".", "Array", ":", "\n", "        ", "return", "self", ".", "_pseudo_inputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.policies._pseudo_input.PseudoInputPolicy.pseudo_inputs": [[55, 59], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jonathanwenger_itergp.policies._eigenvector.EigenvectorPolicy.__init__": [[23, 25], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "descending", ":", "bool", "=", "True", ")", "->", "None", ":", "\n", "        ", "self", ".", "_descending", "=", "descending", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.policies._eigenvector.EigenvectorPolicy.__call__": [[26, 57], ["isinstance", "probnum.backend.linalg.eigh", "probnum.backend.argsort", "solver_state.cache.keys", "solver_state.problem.A.todense"], "methods", ["None"], ["", "def", "__call__", "(", "\n", "self", ",", "\n", "solver_state", ":", "\"probnum.linalg.solvers.LinearSolverState\"", ",", "\n", "rng", ":", "Optional", "[", "RNGState", "]", ",", "\n", ")", "->", "backend", ".", "Array", ":", "\n", "        ", "\"\"\"Return an action for a given solver state.\n\n        Parameters\n        ----------\n        solver_state\n            Current state of the linear solver.\n        rng\n            Random number generator.\n\n        Returns\n        -------\n        action\n            Next action to take.\n        \"\"\"", "\n", "if", "not", "\"eigenvectors\"", "in", "solver_state", ".", "cache", ".", "keys", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "solver_state", ".", "problem", ".", "A", ",", "linops", ".", "LinearOperator", ")", ":", "\n", "                ", "A", "=", "solver_state", ".", "problem", ".", "A", ".", "todense", "(", ")", "\n", "", "else", ":", "\n", "                ", "A", "=", "solver_state", ".", "problem", ".", "A", "\n", "", "eigvals", ",", "eigvectors", "=", "backend", ".", "linalg", ".", "eigh", "(", "A", ")", "\n", "idx", "=", "backend", ".", "argsort", "(", "eigvals", ",", "descending", "=", "self", ".", "descending", ")", "\n", "solver_state", ".", "cache", "[", "\"eigenvectors\"", "]", "=", "eigvectors", "[", "...", ",", "idx", "]", "\n", "\n", "", "action", "=", "solver_state", ".", "cache", "[", "\"eigenvectors\"", "]", "[", "...", ",", "solver_state", ".", "step", "]", "\n", "\n", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.policies._eigenvector.EigenvectorPolicy.descending": [[58, 63], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "descending", "(", "self", ")", "->", "bool", ":", "\n", "        ", "\"\"\"Whether the returned eigenvectors are returned in descending or ascending\n        order of the eigenvalues.\"\"\"", "\n", "return", "self", ".", "_descending", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.policies._conjugate_gradient.ConjugateGradientPolicy.__init__": [[32, 47], ["probnum.linops.aslinop"], "methods", ["None"], ["\n", "\n", "def", "__init__", "(", "\n", "self", ",", "\n", "precond_inv", ":", "LinearOperatorLike", "=", "None", ",", "\n", "maxiter", ":", "int", "=", "None", ",", "\n", "atol", ":", "float", "=", "1e-6", ",", "\n", "rtol", ":", "float", "=", "1e-6", ",", "\n", "reorthogonalization_fn_residual", ":", "Optional", "[", "\n", "Callable", "[", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.policies._conjugate_gradient.ConjugateGradientPolicy.__call__": [[48, 88], ["probnum.linops.Identity", "solver_state.cache[].append", "_conjugate_gradient.ConjugateGradientPolicy._reorthogonalized_residual"], "methods", ["home.repos.pwc.inspect_result.jonathanwenger_itergp.policies._conjugate_gradient.ConjugateGradientPolicy._reorthogonalized_residual"], ["[", "backend", ".", "Array", ",", "Iterable", "[", "backend", ".", "Array", "]", ",", "linops", ".", "LinearOperator", "]", ",", "\n", "backend", ".", "Array", ",", "\n", "]", "\n", "]", "=", "backend", ".", "linalg", ".", "gram_schmidt_double", ",", "\n", ")", ":", "\n", "# super().__init__(", "\n", "#     policy=policies.GradientPolicy(precond_inv=precond_inv),", "\n", "#     information_op=information_ops.ProjectedResidualInformationOp(),", "\n", "#     belief_update=belief_updates.ProjectedResidualBeliefUpdate(),", "\n", "#     stopping_criterion=stopping_criteria.MaxIterationsStoppingCriterion(", "\n", "#         maxiter=maxiter", "\n", "#     )", "\n", "#     | stopping_criteria.ResidualNormStoppingCriterion(atol=atol, rtol=rtol),", "\n", "# )", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "policy", "=", "policies", ".", "ConjugateGradientPolicy", "(", "\n", "precond_inv", "=", "precond_inv", ",", "\n", "reorthogonalization_fn_residual", "=", "reorthogonalization_fn_residual", ",", "\n", ")", ",", "\n", "information_op", "=", "information_ops", ".", "ProjectedResidualInformationOp", "(", ")", ",", "\n", "belief_update", "=", "ConjugateGradient", ".", "BeliefUpdate", "(", ")", ",", "\n", "stopping_criterion", "=", "stopping_criteria", ".", "MaxIterationsStoppingCriterion", "(", "\n", "maxiter", "=", "maxiter", "\n", ")", "\n", "|", "stopping_criteria", ".", "ResidualNormStoppingCriterion", "(", "atol", "=", "atol", ",", "rtol", "=", "rtol", ")", ",", "\n", ")", "\n", "\n", "", "class", "BeliefUpdate", "(", "belief_updates", ".", "ProjectedResidualBeliefUpdate", ")", ":", "\n", "        ", "\"\"\"Belief update of the conjugate gradient method.\"\"\"", "\n", "\n", "def", "__call__", "(", "\n", "self", ",", "solver_state", ":", "\"probnum.linalg.solvers.LinearSolverState\"", "\n", ")", "->", "beliefs", ".", "LinearSystemBelief", ":", "\n", "\n", "# Search direction", "\n", "            ", "A_action", "=", "solver_state", ".", "problem", ".", "A", "@", "solver_state", ".", "action", "\n", "search_dir", "=", "solver_state", ".", "action", "\n", "\n", "# Normalization constant", "\n", "gram", "=", "search_dir", "@", "A_action", "\n", "gram_pinv", "=", "1.0", "/", "gram", "if", "gram", ">", "0.0", "else", "0.0", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.policies._conjugate_gradient.ConjugateGradientPolicy._reorthogonalized_residual": [[90, 107], ["_conjugate_gradient.ConjugateGradientPolicy._reorthogonalization_fn_residual", "solver_state.cache[].append", "numpy.asarray"], "methods", ["None"], ["return", "self", ".", "updated_linsys_belief", "(", "\n", "search_dir", "=", "search_dir", ",", "\n", "A_search_dir", "=", "A_action", ",", "\n", "gram_pinv", "=", "gram_pinv", ",", "\n", "solver_state", "=", "solver_state", ",", "\n", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.policies._auto_preconditioned_gradient.AutoPreconditionedGradientPolicy.__init__": [[37, 48], ["_unit_vector.UnitVectorPolicy"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "precond_iter", ":", "int", ",", "\n", "precond_policy", ":", "Tuple", "[", "\n", "linalg", ".", "solvers", ".", "policies", ".", "LinearSolverPolicy", "\n", "]", "=", "UnitVectorPolicy", "(", ")", ",", "\n", ")", "->", "None", ":", "\n", "\n", "        ", "self", ".", "_precond_policy", "=", "precond_policy", "\n", "self", ".", "_gradient_policy", "=", "None", "\n", "self", ".", "_precond_iter", "=", "precond_iter", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.policies._auto_preconditioned_gradient.AutoPreconditionedGradientPolicy.__call__": [[49, 84], ["_auto_preconditioned_gradient.AutoPreconditionedGradientPolicy._gradient_policy", "_auto_preconditioned_gradient.AutoPreconditionedGradientPolicy._precond_policy", "_gradient.GradientPolicy", "itergp.methods.preconditioners.DiagonalPlusLowRank.from_kernel_matrix_linear_solve", "itergp.methods.preconditioners.DiagonalPlusLowRank.from_kernel_matrix_linear_solve.inv"], "methods", ["home.repos.pwc.inspect_result.jonathanwenger_itergp.preconditioners._diagonal_plus_low_rank.DiagonalPlusLowRank.from_kernel_matrix_linear_solve"], ["", "def", "__call__", "(", "\n", "self", ",", "\n", "solver_state", ":", "\"probnum.linalg.solvers.LinearSolverState\"", ",", "\n", "rng", ":", "Optional", "[", "RNGState", "]", ",", "\n", ")", "->", "backend", ".", "Array", ":", "\n", "        ", "\"\"\"Return an action for a given solver state.\n\n        Parameters\n        ----------\n        solver_state\n            Current state of the linear solver.\n        rng\n            Random number generator.\n\n        Returns\n        -------\n        action\n            Next action to take.\n        \"\"\"", "\n", "if", "solver_state", ".", "step", "<", "self", ".", "_precond_iter", ":", "\n", "            ", "return", "self", ".", "_precond_policy", "(", "solver_state", "=", "solver_state", ",", "rng", "=", "rng", ")", "\n", "", "elif", "solver_state", ".", "step", "==", "self", ".", "_precond_iter", ":", "\n", "            ", "if", "self", ".", "_precond_iter", "==", "0", ":", "\n", "                ", "precond_inv", "=", "None", "\n", "", "else", ":", "\n", "                ", "precond", "=", "(", "\n", "preconditioners", ".", "DiagonalPlusLowRank", ".", "from_kernel_matrix_linear_solve", "(", "\n", "solver_state", "=", "solver_state", "\n", ")", "\n", ")", "\n", "precond_inv", "=", "precond", ".", "inv", "(", ")", "\n", "\n", "", "self", ".", "_gradient_policy", "=", "GradientPolicy", "(", "precond_inv", "=", "precond_inv", ")", "\n", "\n", "", "return", "self", ".", "_gradient_policy", "(", "solver_state", "=", "solver_state", ",", "rng", "=", "rng", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.policies._unit_vector.UnitVectorPolicy.__init__": [[23, 25], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "ordering", ":", "str", "=", "\"lexicographic\"", ")", "->", "None", ":", "\n", "        ", "self", ".", "_ordering", "=", "ordering", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.policies._unit_vector.UnitVectorPolicy.__call__": [[26, 58], ["probnum.backend.zeros", "solver_state.cache.keys", "probnum.backend.arange"], "methods", ["None"], ["", "def", "__call__", "(", "\n", "self", ",", "\n", "solver_state", ":", "\"probnum.linalg.solvers.LinearSolverState\"", ",", "\n", "rng", ":", "Optional", "[", "RNGState", "]", ",", "\n", ")", "->", "backend", ".", "Array", ":", "\n", "        ", "\"\"\"Return an action for a given solver state.\n\n        Parameters\n        ----------\n        solver_state\n            Current state of the linear solver.\n        rng\n            Random number generator.\n\n        Returns\n        -------\n        action\n            Next action to take.\n        \"\"\"", "\n", "if", "not", "\"ordering\"", "in", "solver_state", ".", "cache", ".", "keys", "(", ")", ":", "\n", "            ", "if", "self", ".", "ordering", "==", "\"lexicographic\"", ":", "\n", "                ", "solver_state", ".", "cache", "[", "\"ordering\"", "]", "=", "backend", ".", "arange", "(", "\n", "0", ",", "solver_state", ".", "problem", ".", "A", ".", "shape", "[", "0", "]", "+", "1", "\n", ")", "\n", "", "else", ":", "\n", "# TODO: support other orderings", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "", "", "action", "=", "backend", ".", "zeros", "(", "(", "solver_state", ".", "problem", ".", "A", ".", "shape", "[", "0", "]", ",", ")", ")", "\n", "action", "[", "solver_state", ".", "cache", "[", "\"ordering\"", "]", "[", "solver_state", ".", "step", "]", "]", "=", "1.0", "\n", "\n", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.policies._unit_vector.UnitVectorPolicy.ordering": [[59, 63], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ordering", "(", "self", ")", "->", "str", ":", "\n", "        ", "\"\"\"Ordering strategy defining in which order to select datapoints.\"\"\"", "\n", "return", "self", ".", "_ordering", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.stopping_criteria._maxiter.MaxIterationsStoppingCriterion.__init__": [[25, 28], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "maxiter", ":", "Optional", "[", "int", "]", "=", "None", ",", "problem_size_factor", ":", "int", "=", "10", ")", ":", "\n", "        ", "self", ".", "_maxiter", "=", "maxiter", "\n", "self", ".", "_problem_size_factor", "=", "problem_size_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.stopping_criteria._maxiter.MaxIterationsStoppingCriterion.__call__": [[29, 46], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "\n", "self", ",", "solver_state", ":", "\"probnum.linalg.solvers.LinearSolverState\"", "\n", ")", "->", "bool", ":", "\n", "        ", "\"\"\"Check whether the maximum number of iterations has been reached.\n\n        Parameters\n        ----------\n        solver_state\n            Current state of the linear solver.\n        \"\"\"", "\n", "if", "self", ".", "maxiter", "is", "None", ":", "\n", "            ", "return", "(", "\n", "solver_state", ".", "step", "\n", ">=", "solver_state", ".", "problem", ".", "A", ".", "shape", "[", "0", "]", "*", "self", ".", "problem_size_factor", "\n", ")", "\n", "\n", "", "return", "solver_state", ".", "step", ">=", "self", ".", "maxiter", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.stopping_criteria._maxiter.MaxIterationsStoppingCriterion.maxiter": [[47, 51], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "maxiter", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\"Maximum number of steps.\"\"\"", "\n", "return", "self", ".", "_maxiter", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.stopping_criteria._maxiter.MaxIterationsStoppingCriterion.problem_size_factor": [[52, 61], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "problem_size_factor", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\"Problem size factor.\n\n        If ``maxiter`` is None, stops after ``problem_size_factor * problem_size`` steps, where\n        ``problem_size`` is the dimension of the solution to the linear system. Will be ignored\n        otherwise.\n        \"\"\"", "\n", "return", "self", ".", "_problem_size_factor", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.preconditioners._diagonal_plus_low_rank.DiagonalPlusLowRank.__init__": [[30, 89], ["itergp.linops.LowRankMatrix", "probnum.backend.linalg.cholesky", "probnum.linops.LinearOperator.__init__", "isinstance", "probnum.linops.Scaling", "probnum.linops.Identity", "small_matrix.todense", "_diagonal_plus_low_rank.DiagonalPlusLowRank.diag_comp.inv", "probnum.backend.linalg.solve_cholesky", "_diagonal_plus_low_rank.DiagonalPlusLowRank.diag_comp.inv", "_diagonal_plus_low_rank.DiagonalPlusLowRank.diag_comp.inv", "_diagonal_plus_low_rank.DiagonalPlusLowRank.diag_comp.inv"], "methods", ["home.repos.pwc.inspect_result.jonathanwenger_itergp.preconditioners._diagonal_plus_low_rank.DiagonalPlusLowRank.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "diagonal", ":", "Union", "[", "backend", ".", "Scalar", ",", "backend", ".", "Array", ",", "linops", ".", "Scaling", "]", ",", "\n", "low_rank_factor", ":", "LinearOperatorLike", ",", "\n", ")", "->", "None", ":", "\n", "\n", "# Components", "\n", "        ", "if", "not", "isinstance", "(", "diagonal", ",", "linops", ".", "Scaling", ")", ":", "\n", "            ", "self", ".", "_diagonal", "=", "linops", ".", "Scaling", "(", "\n", "factors", "=", "diagonal", ",", "\n", "shape", "=", "(", "low_rank_factor", ".", "shape", "[", "0", "]", ",", "low_rank_factor", ".", "shape", "[", "0", "]", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_diagonal", "=", "diagonal", "\n", "\n", "", "self", ".", "_low_rank", "=", "itergp", ".", "linops", ".", "LowRankMatrix", "(", "U", "=", "low_rank_factor", ")", "\n", "\n", "sum_linop", "=", "self", ".", "_diagonal", "+", "self", ".", "_low_rank", "\n", "\n", "# Inverse via matrix inversion lemma", "\n", "small_matrix", "=", "(", "\n", "linops", ".", "Identity", "(", "\n", "shape", "=", "(", "low_rank_factor", ".", "shape", "[", "1", "]", ",", "low_rank_factor", ".", "shape", "[", "1", "]", ")", ",", "\n", "dtype", "=", "sum_linop", ".", "dtype", ",", "\n", ")", "\n", "+", "low_rank_factor", ".", "T", "@", "self", ".", "diag_comp", ".", "inv", "(", ")", "@", "low_rank_factor", "\n", ")", "\n", "small_matrix_cholfac", "=", "backend", ".", "linalg", ".", "cholesky", "(", "\n", "small_matrix", ".", "todense", "(", ")", ",", "upper", "=", "False", "\n", ")", "\n", "diag_plus_low_rank_inverse", "=", "(", "\n", "self", ".", "diag_comp", ".", "inv", "(", ")", "\n", "-", "self", ".", "diag_comp", ".", "inv", "(", ")", "\n", "@", "low_rank_factor", "\n", "@", "backend", ".", "linalg", ".", "solve_cholesky", "(", "\n", "small_matrix_cholfac", ",", "\n", "low_rank_factor", ".", "T", "@", "self", ".", "diag_comp", ".", "inv", "(", ")", ",", "\n", "lower", "=", "True", ",", "\n", ")", "\n", ")", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "shape", "=", "self", ".", "_diagonal", ".", "shape", ",", "\n", "dtype", "=", "sum_linop", ".", "dtype", ",", "\n", "matmul", "=", "sum_linop", ".", "__matmul__", ",", "\n", "rmatmul", "=", "sum_linop", ".", "__rmatmul__", ",", "\n", "todense", "=", "sum_linop", ".", "todense", ",", "\n", "transpose", "=", "lambda", ":", "self", ",", "\n", "inverse", "=", "lambda", ":", "diag_plus_low_rank_inverse", ",", "\n", "rank", "=", "lambda", ":", "self", ".", "_diagonal", ".", "shape", "[", "0", "]", "\n", "if", "self", ".", "_diagonal", ".", "is_positive_definite", "\n", "else", "None", ",", "\n", "trace", "=", "sum_linop", ".", "trace", ",", "\n", ")", "\n", "\n", "# Matrix properties", "\n", "self", ".", "is_symmetric", "=", "True", "\n", "if", "self", ".", "_diagonal", ".", "is_positive_definite", ":", "\n", "            ", "self", ".", "is_positive_definite", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.preconditioners._diagonal_plus_low_rank.DiagonalPlusLowRank.diag_comp": [[90, 94], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "diag_comp", "(", "self", ")", "->", "linops", ".", "Scaling", ":", "\n", "        ", "\"\"\"Diagonal component.\"\"\"", "\n", "return", "self", ".", "_diagonal", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.preconditioners._diagonal_plus_low_rank.DiagonalPlusLowRank.low_rank_comp": [[95, 99], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "low_rank_comp", "(", "self", ")", "->", "itergp", ".", "linops", ".", "LowRankMatrix", ":", "\n", "        ", "\"\"\"Low-rank component.\"\"\"", "\n", "return", "self", ".", "_low_rank", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.preconditioners._diagonal_plus_low_rank.DiagonalPlusLowRank.from_kernel_matrix_linear_solve": [[100, 112], ["probnum.backend.diagonal", "cls", "noise_linop.todense"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_kernel_matrix_linear_solve", "(", "\n", "cls", ",", "\n", "solver_state", ":", "solvers", ".", "LinearSolverState", ",", "\n", ")", ":", "\n", "        ", "kernel_linop", "=", "solver_state", ".", "problem", ".", "A", ".", "_summands", "[", "0", "]", "\n", "noise_linop", "=", "solver_state", ".", "problem", ".", "A", ".", "_summands", "[", "1", "]", "\n", "\n", "diagonal", "=", "backend", ".", "diagonal", "(", "noise_linop", ".", "todense", "(", ")", ")", "\n", "low_rank_factor", "=", "kernel_linop", "@", "solver_state", ".", "belief", ".", "Ainv", ".", "_summands", "[", "1", "]", ".", "U", "\n", "\n", "return", "cls", "(", "diagonal", "=", "diagonal", ",", "low_rank_factor", "=", "low_rank_factor", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.belief_updates.projected_residual.ProjectedResidualBeliefUpdate.__call__": [[28, 47], ["projected_residual.ProjectedResidualBeliefUpdate.updated_linsys_belief"], "methods", ["home.repos.pwc.inspect_result.jonathanwenger_itergp.belief_updates.projected_residual.ProjectedResidualBeliefUpdate.updated_linsys_belief"], ["def", "__call__", "(", "\n", "self", ",", "solver_state", ":", "\"probnum.linalg.solvers.LinearSolverState\"", "\n", ")", "->", "beliefs", ".", "LinearSystemBelief", ":", "\n", "\n", "# Search direction", "\n", "        ", "A_action", "=", "solver_state", ".", "problem", ".", "A", "@", "solver_state", ".", "action", "\n", "Ainv0_A_action", "=", "solver_state", ".", "belief", ".", "Ainv", "@", "A_action", "\n", "search_dir", "=", "solver_state", ".", "action", "-", "Ainv0_A_action", "# assumes Sigma_0 = A^{-1}", "\n", "A_search_dir", "=", "A_action", "-", "solver_state", ".", "problem", ".", "A", "@", "Ainv0_A_action", "\n", "\n", "# Normalization constant", "\n", "gram", "=", "solver_state", ".", "action", ".", "T", "@", "A_search_dir", "\n", "gram_pinv", "=", "1.0", "/", "gram", "if", "gram", ">", "0.0", "else", "0.0", "\n", "\n", "return", "self", ".", "updated_linsys_belief", "(", "\n", "search_dir", "=", "search_dir", ",", "\n", "A_search_dir", "=", "A_search_dir", ",", "\n", "gram_pinv", "=", "gram_pinv", ",", "\n", "solver_state", "=", "solver_state", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.belief_updates.projected_residual.ProjectedResidualBeliefUpdate.Ainv_update": [[49, 75], ["probnum.backend.ndim", "probnum.backend.reshape", "itergp.linops.LowRankMatrix", "itergp.linops.LowRankMatrix", "probnum.backend.hstack"], "methods", ["None"], ["", "def", "Ainv_update", "(", "\n", "self", ",", "\n", "normalized_search_dir", ":", "backend", ".", "Array", ",", "\n", "solver_state", ":", "\"probnum.linalg.solvers.LinearSolverState\"", ",", "\n", ")", "->", "linops", ".", "LowRankMatrix", ":", "\n", "        ", "r\"\"\"Update the system matrix approximation.\n\n        Parameters\n        ----------\n        normalized_search_dir\n            Normalized search direction :math:`\\fraction{1}{\\sqrt{s_i^\\top A \\Sigma_{i-1} A s_i}}As_i`.\n        solver_state\n            State of the linear solver.\n        \"\"\"", "\n", "if", "backend", ".", "ndim", "(", "normalized_search_dir", ")", "==", "1", ":", "\n", "            ", "normalized_search_dir", "=", "backend", ".", "reshape", "(", "normalized_search_dir", ",", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "", "if", "solver_state", ".", "step", "==", "0", ":", "\n", "            ", "Ainv_update", "=", "linops", ".", "LowRankMatrix", "(", "U", "=", "normalized_search_dir", ")", "\n", "", "else", ":", "\n", "            ", "Ainv_update", "=", "linops", ".", "LowRankMatrix", "(", "\n", "U", "=", "backend", ".", "hstack", "(", "\n", "[", "solver_state", ".", "belief", ".", "Ainv", ".", "_summands", "[", "1", "]", ".", "U", ",", "normalized_search_dir", "]", "\n", ")", "\n", ")", "\n", "", "return", "Ainv_update", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.belief_updates.projected_residual.ProjectedResidualBeliefUpdate.A_update": [[76, 102], ["probnum.backend.ndim", "probnum.backend.reshape", "itergp.linops.LowRankMatrix", "itergp.linops.LowRankMatrix", "probnum.backend.hstack"], "methods", ["None"], ["", "def", "A_update", "(", "\n", "self", ",", "\n", "A_normalized_search_dir", ":", "backend", ".", "Array", ",", "\n", "solver_state", ":", "\"probnum.linalg.solvers.LinearSolverState\"", ",", "\n", ")", "->", "linops", ".", "LowRankMatrix", ":", "\n", "        ", "r\"\"\"Update the system matrix approximation.\n\n        Parameters\n        ----------\n        A_normalized_search_dir\n            :math:`A` multiplied normalized search direction :math:`\\fraction{1}{\\sqrt{s_i^\\top A \\Sigma_{i-1} A s_i}}As_i`.\n        solver_state\n            State of the linear solver.\n        \"\"\"", "\n", "if", "backend", ".", "ndim", "(", "A_normalized_search_dir", ")", "==", "1", ":", "\n", "            ", "A_normalized_search_dir", "=", "backend", ".", "reshape", "(", "A_normalized_search_dir", ",", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "", "if", "solver_state", ".", "step", "==", "0", ":", "\n", "            ", "A_update", "=", "linops", ".", "LowRankMatrix", "(", "U", "=", "A_normalized_search_dir", ")", "\n", "", "else", ":", "\n", "            ", "A_update", "=", "linops", ".", "LowRankMatrix", "(", "\n", "U", "=", "backend", ".", "hstack", "(", "\n", "[", "solver_state", ".", "belief", ".", "A", ".", "_summands", "[", "1", "]", ".", "U", ",", "A_normalized_search_dir", "]", "\n", ")", "\n", ")", "\n", "", "return", "A_update", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathanwenger_itergp.belief_updates.projected_residual.ProjectedResidualBeliefUpdate.updated_linsys_belief": [[103, 149], ["projected_residual.ProjectedResidualBeliefUpdate.Ainv_update", "projected_residual.ProjectedResidualBeliefUpdate.A_update", "probnum.randvars.Normal", "probnum.linalg.solvers.beliefs.LinearSystemBelief", "probnum.backend.sqrt", "probnum.backend.sqrt"], "methods", ["home.repos.pwc.inspect_result.jonathanwenger_itergp.belief_updates.projected_residual.ProjectedResidualBeliefUpdate.Ainv_update", "home.repos.pwc.inspect_result.jonathanwenger_itergp.belief_updates.projected_residual.ProjectedResidualBeliefUpdate.A_update"], ["", "def", "updated_linsys_belief", "(", "\n", "self", ",", "\n", "search_dir", ":", "backend", ".", "Array", ",", "\n", "A_search_dir", ":", "backend", ".", "Array", ",", "\n", "gram_pinv", ":", "backend", ".", "Scalar", ",", "\n", "solver_state", ":", "\"probnum.linalg.solvers.LinearSolverState\"", ",", "\n", ")", "->", "beliefs", ".", "LinearSystemBelief", ":", "\n", "        ", "r\"\"\"Update the belief over the quantities of interest.\n\n        Parameters\n        ----------\n        search_dir\n            Search direction :math:`\\Sigma_{i-1}As_i`.\n        A_search_dir\n            :math:`A`-multiplied search direction :math:`A\\Sigma_{i-1}As_i`.\n        gram_pinv\n            Pseudo inverse of the Gramian, i.e. the normalization constant\n            :math:`\\fraction{1}{\\sqrt{s_i^\\top A \\Sigma_{i-1} A s_i}}`\n        solver_state\n            State of the linear solver.\n        \"\"\"", "\n", "\n", "# Update belief about inverse matrix", "\n", "Ainv_update", "=", "self", ".", "Ainv_update", "(", "\n", "normalized_search_dir", "=", "search_dir", "*", "backend", ".", "sqrt", "(", "gram_pinv", ")", ",", "\n", "solver_state", "=", "solver_state", ",", "\n", ")", "\n", "\n", "# Update belief about matrix", "\n", "A_update", "=", "self", ".", "A_update", "(", "\n", "A_normalized_search_dir", "=", "A_search_dir", "*", "backend", ".", "sqrt", "(", "gram_pinv", ")", ",", "\n", "solver_state", "=", "solver_state", ",", "\n", ")", "\n", "\n", "# Update belief about solution", "\n", "x", "=", "randvars", ".", "Normal", "(", "\n", "mean", "=", "solver_state", ".", "belief", ".", "x", ".", "mean", "\n", "+", "solver_state", ".", "observation", "*", "gram_pinv", "*", "search_dir", ",", "\n", "cov", "=", "solver_state", ".", "prior", ".", "x", ".", "cov", "-", "Ainv_update", ",", "\n", ")", "\n", "\n", "return", "beliefs", ".", "LinearSystemBelief", "(", "\n", "x", "=", "x", ",", "\n", "A", "=", "solver_state", ".", "prior", ".", "A", "+", "A_update", ",", "\n", "Ainv", "=", "solver_state", ".", "prior", ".", "Ainv", "+", "Ainv_update", ",", "\n", "b", "=", "solver_state", ".", "belief", ".", "b", ",", "\n", ")", "\n"]]}