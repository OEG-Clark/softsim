{"home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_trippy.loadJson": [[10, 15], ["os.path.isfile", "open", "json.load"], "function", ["None"], ["def", "loadJson", "(", "data_file", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isfile", "(", "data_file", ")", ":", "\n", "        ", "with", "open", "(", "data_file", ",", "'r'", ")", "as", "read_file", ":", "\n", "            ", "data", "=", "json", ".", "load", "(", "read_file", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_trippy.getErrorIndexes": [[16, 22], ["set", "range", "len", "set.add"], "function", ["None"], ["", "", "", "def", "getErrorIndexes", "(", "val", ")", ":", "\n", "    ", "err", "=", "set", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "val", ")", ")", ":", "\n", "        ", "if", "val", "[", "i", "]", "==", "0", ":", "\n", "            ", "err", ".", "add", "(", "i", ")", "\n", "", "", "return", "err", "\n", "\n"]], "home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_trippy.load_dataset_config": [[23, 27], ["open", "json.load"], "function", ["None"], ["", "def", "load_dataset_config", "(", "dataset_config", ")", ":", "\n", "    ", "with", "open", "(", "dataset_config", ",", "\"r\"", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "raw_config", "=", "json", ".", "load", "(", "f", ")", "\n", "", "return", "raw_config", "[", "'class_types'", "]", ",", "raw_config", "[", "'slots'", "]", ",", "raw_config", "[", "'label_maps'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_trippy.getNotNoneIndexes": [[28, 36], ["sl.replace", "id_list.append"], "function", ["None"], ["", "def", "getNotNoneIndexes", "(", "gt", ",", "slot_dict", ")", ":", "\n", "    ", "id_list", "=", "[", "]", "\n", "for", "dom", "in", "gt", ":", "\n", "        ", "for", "sl", "in", "gt", "[", "dom", "]", ":", "\n", "            ", "sl2", "=", "sl", ".", "replace", "(", "\"book \"", ",", "\"\"", ")", "\n", "sl_key", "=", "dom", "+", "\"-\"", "+", "sl2", "\n", "id_list", ".", "append", "(", "slot_dict", "[", "sl_key", "]", ")", "\n", "", "", "return", "id_list", "\n", "\n"]], "home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_trippy.getAvgGoalAccuracy": [[37, 45], ["len", "float", "len"], "function", ["None"], ["", "def", "getAvgGoalAccuracy", "(", "id_list", ",", "val", ")", ":", "\n", "    ", "acc", "=", "-", "1", "\n", "if", "(", "len", "(", "id_list", ")", ">", "0", ")", ":", "\n", "        ", "c", "=", "0", "\n", "for", "i", "in", "id_list", ":", "\n", "            ", "c", "+=", "val", "[", "i", "]", "\n", "", "acc", "=", "c", "/", "float", "(", "len", "(", "id_list", ")", ")", "\n", "", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_trade_somdst.loadJson": [[11, 16], ["os.path.isfile", "open", "json.load"], "function", ["None"], ["def", "loadJson", "(", "data_file", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isfile", "(", "data_file", ")", ":", "\n", "        ", "with", "open", "(", "data_file", ",", "'r'", ")", "as", "read_file", ":", "\n", "            ", "data", "=", "json", ".", "load", "(", "read_file", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_trade_somdst.getBeliefSet": [[17, 24], ["set", "set.add"], "function", ["None"], ["", "", "", "def", "getBeliefSet", "(", "ds", ")", ":", "\n", "    ", "bs", "=", "set", "(", ")", "\n", "for", "dom", "in", "ds", ":", "\n", "        ", "for", "slot", "in", "ds", "[", "dom", "]", ":", "\n", "            ", "t", "=", "dom", "+", "\"-\"", "+", "slot", "+", "\"-\"", "+", "ds", "[", "dom", "]", "[", "slot", "]", "\n", "bs", ".", "add", "(", "t", ")", "\n", "", "", "return", "bs", "\n", "\n"]], "home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_trade_somdst.getSlotAccuracy": [[26, 36], ["gt.difference", "pr.difference", "set", "set", "set.intersection", "len", "d.rsplit", "d.rsplit", "len", "len"], "function", ["None"], ["", "def", "getSlotAccuracy", "(", "gt", ",", "pr", ")", ":", "\n", "    ", "d1", "=", "gt", ".", "difference", "(", "pr", ")", "\n", "d2", "=", "pr", ".", "difference", "(", "gt", ")", "\n", "\n", "s1", "=", "set", "(", "[", "d", ".", "rsplit", "(", "\"-\"", ",", "1", ")", "[", "0", "]", "for", "d", "in", "d1", "]", ")", "\n", "s2", "=", "set", "(", "[", "d", ".", "rsplit", "(", "\"-\"", ",", "1", ")", "[", "0", "]", "for", "d", "in", "d2", "]", ")", "\n", "\n", "set_i", "=", "s1", ".", "intersection", "(", "s2", ")", "\n", "acc", "=", "(", "30", "-", "len", "(", "d1", ")", "-", "len", "(", "d2", ")", "+", "len", "(", "set_i", ")", ")", "/", "30.0", "\n", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_trade_somdst.compute_acc": [[38, 53], ["float", "miss_slot.append", "g.rsplit", "p.rsplit"], "function", ["None"], ["", "def", "compute_acc", "(", "gold", ",", "pred", ")", ":", "\n", "    ", "miss_gold", "=", "0", "\n", "miss_slot", "=", "[", "]", "\n", "for", "g", "in", "gold", ":", "\n", "        ", "if", "g", "not", "in", "pred", ":", "\n", "            ", "miss_gold", "+=", "1", "\n", "miss_slot", ".", "append", "(", "g", ".", "rsplit", "(", "\"-\"", ",", "1", ")", "[", "0", "]", ")", "\n", "", "", "wrong_pred", "=", "0", "\n", "for", "p", "in", "pred", ":", "\n", "        ", "if", "p", "not", "in", "gold", "and", "p", ".", "rsplit", "(", "\"-\"", ",", "1", ")", "[", "0", "]", "not", "in", "miss_slot", ":", "\n", "            ", "wrong_pred", "+=", "1", "\n", "", "", "ACC_TOTAL", "=", "30", "\n", "ACC", "=", "30", "-", "miss_gold", "-", "wrong_pred", "\n", "ACC", "=", "ACC", "/", "float", "(", "ACC_TOTAL", ")", "\n", "return", "ACC", "\n", "\n"]], "home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_trade_somdst.getAvgGoalAccuracy": [[55, 61], ["gt.intersection", "len", "len", "float", "len"], "function", ["None"], ["", "def", "getAvgGoalAccuracy", "(", "gt", ",", "pr", ")", ":", "\n", "    ", "set_i", "=", "gt", ".", "intersection", "(", "pr", ")", "\n", "acc", "=", "-", "1", "\n", "if", "(", "len", "(", "gt", ")", ">", "0", ")", ":", "\n", "        ", "acc", "=", "len", "(", "set_i", ")", "/", "float", "(", "len", "(", "gt", ")", ")", "\n", "", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_trade_somdst.getFGA": [[63, 91], ["gt.symmetric_difference", "len", "len", "gt_list[].symmetric_difference", "len", "gt.difference", "pr.difference", "gt.difference.issubset", "pr.difference.issubset", "math.exp"], "function", ["None"], ["", "def", "getFGA", "(", "gt_list", ",", "pr_list", ",", "turn_diff", ",", "L", ")", ":", "\n", "    ", "gt", "=", "gt_list", "[", "-", "1", "]", "\n", "pr", "=", "pr_list", "[", "-", "1", "]", "\n", "diff1", "=", "gt", ".", "symmetric_difference", "(", "pr", ")", "\n", "if", "len", "(", "diff1", ")", "==", "0", ":", "#Exact match", "\n", "        ", "return", "1", "\n", "", "else", ":", "\n", "        ", "if", "len", "(", "gt_list", ")", "==", "1", ":", "\n", "#Type 1 error", "\n", "#First turn is wrong", "\n", "            ", "return", "0", "\n", "", "else", ":", "\n", "            ", "diff2", "=", "gt_list", "[", "-", "2", "]", ".", "symmetric_difference", "(", "pr_list", "[", "-", "2", "]", ")", "\n", "if", "len", "(", "diff2", ")", "==", "0", ":", "\n", "#Type 1 error", "\n", "#Last turn was correct i.e the error in current turn", "\n", "                ", "return", "0", "\n", "", "else", ":", "\n", "                ", "tgt", "=", "gt", ".", "difference", "(", "gt_list", "[", "-", "2", "]", ")", "\n", "tpr", "=", "pr", ".", "difference", "(", "pr_list", "[", "-", "2", "]", ")", "\n", "if", "(", "not", "tgt", ".", "issubset", "(", "pr", ")", "or", "not", "tpr", ".", "issubset", "(", "gt", ")", ")", ":", "\n", "#Type 1 error", "\n", "#There exists some undetected/false positive intent in the current prediction", "\n", "                    ", "return", "0", "\n", "", "else", ":", "\n", "#Type 2 error", "\n", "#Current turn is correct but source of the error is some previous turn", "\n", "                    ", "return", "(", "1", "-", "math", ".", "exp", "(", "-", "L", "*", "turn_diff", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_trade_somdst.getModifiedBS": [[92, 103], ["slot.split"], "function", ["None"], ["", "", "", "", "", "def", "getModifiedBS", "(", "bs", ")", ":", "\n", "    ", "bs_new", "=", "{", "}", "\n", "for", "k", "in", "bs", ":", "\n", "        ", "bs_new", "[", "k", "]", "=", "{", "}", "\n", "for", "slot", "in", "bs", "[", "k", "]", ":", "\n", "            ", "sl", "=", "slot", "\n", "v", "=", "bs", "[", "k", "]", "[", "slot", "]", "\n", "if", "\"book\"", "in", "slot", ":", "\n", "                ", "sl", "=", "slot", ".", "split", "(", "' '", ")", "[", "1", "]", "\n", "", "bs_new", "[", "k", "]", "[", "sl", "]", "=", "v", "\n", "", "", "return", "bs_new", "\n", "\n"]], "home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_trade_somdst.getModelAccuracy": [[104, 171], ["os.path.join", "compute_accuracy_trade_somdst.loadJson", "print", "round", "round", "round", "print", "range", "len", "round", "print", "[].strip", "compute_accuracy_trade_somdst.getBeliefSet", "compute_accuracy_trade_somdst.getBeliefSet", "gt_list.append", "pr_list.append", "getBeliefSet.symmetric_difference", "compute_accuracy_trade_somdst.compute_acc", "compute_accuracy_trade_somdst.getAvgGoalAccuracy", "range", "len", "int", "[].strip", "avgGoalAcc.append", "len", "compute_accuracy_trade_somdst.getFGA", "int", "sum", "len", "int"], "function", ["home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_hi-dst.loadJson", "home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_trade_somdst.getBeliefSet", "home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_trade_somdst.getBeliefSet", "home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_trade_somdst.compute_acc", "home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_hi-dst.getAvgGoalAccuracy", "home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_hi-dst.getFGA"], ["", "def", "getModelAccuracy", "(", "model_name", ",", "dialog_data", ")", ":", "\n", "    ", "dst_res_path", "=", "os", ".", "path", ".", "join", "(", "model_name", ",", "model_name", "+", "\"_result.json\"", ")", "\n", "dst_res", "=", "loadJson", "(", "dst_res_path", ")", "\n", "\n", "joint_acc", "=", "0", "\n", "slot_acc", "=", "0", "\n", "avgGoalAcc", "=", "[", "]", "\n", "fga", "=", "[", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "turn_acc", "=", "0", "\n", "total", "=", "0", "\n", "lst_lambda", "=", "[", "0.25", ",", "0.5", ",", "0.75", ",", "1.0", "]", "\n", "\n", "for", "idx", "in", "dst_res", ":", "\n", "        ", "res", "=", "dst_res", "[", "idx", "]", "\n", "log", "=", "dialog_data", "[", "idx", "]", "[", "'log'", "]", "\n", "sys", "=", "\" \"", "\n", "\n", "gt_list", "=", "[", "]", "\n", "pr_list", "=", "[", "]", "\n", "error_turn", "=", "-", "1", "\n", "for", "turn", "in", "res", ":", "\n", "            ", "total", "+=", "1", "\n", "i", "=", "2", "*", "int", "(", "turn", ")", "\n", "usr", "=", "log", "[", "i", "]", "[", "'text'", "]", ".", "strip", "(", ")", "\n", "if", "(", "i", ">", "0", ")", ":", "\n", "                ", "sys", "=", "log", "[", "i", "-", "1", "]", "[", "'text'", "]", ".", "strip", "(", ")", "\n", "\n", "", "gt", "=", "getBeliefSet", "(", "res", "[", "turn", "]", "[", "'gt'", "]", ")", "\n", "pr", "=", "getBeliefSet", "(", "res", "[", "turn", "]", "[", "'pr'", "]", ")", "\n", "gt_list", ".", "append", "(", "gt", ")", "\n", "pr_list", ".", "append", "(", "pr", ")", "\n", "\n", "#print(f\"Sys_{turn}: {sys}\")", "\n", "#print(f\"Usr_{turn}: {usr}\")", "\n", "#print(f\"GT_{turn}: {getModifiedBS(res[turn]['gt'])}\")", "\n", "#print(f\"PR_{turn}: {getModifiedBS(res[turn]['pr'])}\")", "\n", "#print(\"-\"*40)", "\n", "\n", "diff", "=", "gt", ".", "symmetric_difference", "(", "pr", ")", "\n", "m", "=", "1", "if", "len", "(", "diff", ")", "==", "0", "else", "0", "\n", "joint_acc", "+=", "m", "\n", "\n", "#sa = getSlotAccuracy(gt, pr)", "\n", "sa", "=", "compute_acc", "(", "gt", ",", "pr", ")", "\n", "slot_acc", "+=", "sa", "\n", "\n", "aga", "=", "getAvgGoalAccuracy", "(", "gt", ",", "pr", ")", "\n", "if", "(", "aga", ">=", "0", ")", ":", "\n", "                ", "avgGoalAcc", ".", "append", "(", "aga", ")", "\n", "\n", "", "m", "=", "0", "\n", "for", "l", "in", "range", "(", "len", "(", "lst_lambda", ")", ")", ":", "\n", "                ", "m", "=", "getFGA", "(", "gt_list", ",", "pr_list", ",", "int", "(", "turn", ")", "-", "error_turn", ",", "lst_lambda", "[", "l", "]", ")", "\n", "fga", "[", "l", "]", "+=", "m", "\n", "", "if", "(", "m", "==", "0", ")", ":", "\n", "                ", "error_turn", "=", "int", "(", "turn", ")", "\n", "", "else", ":", "\n", "                ", "turn_acc", "+=", "1", "\n", "\n", "", "", "", "print", "(", "f\"Total: {total}, Exact Match: {joint_acc}, Turn Match: {turn_acc}\"", ")", "\n", "joint_acc", "=", "round", "(", "joint_acc", "*", "100.0", "/", "total", ",", "2", ")", "\n", "slot_acc", "=", "round", "(", "slot_acc", "*", "100.0", "/", "total", ",", "2", ")", "\n", "avg_goal_acc", "=", "round", "(", "sum", "(", "avgGoalAcc", ")", "*", "100.0", "/", "len", "(", "avgGoalAcc", ")", ",", "2", ")", "\n", "print", "(", "f\"Joint Acc = {joint_acc}, Slot Acc = {slot_acc}, Avg. Goal Acc = {avg_goal_acc}\"", ")", "\n", "for", "l", "in", "range", "(", "len", "(", "lst_lambda", ")", ")", ":", "\n", "        ", "fga_acc", "=", "round", "(", "fga", "[", "l", "]", "*", "100.0", "/", "total", ",", "2", ")", "\n", "print", "(", "f\"FGA with L={lst_lambda[l]} : {fga_acc}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_hi-dst.loadJson": [[32, 37], ["os.path.isfile", "open", "json.load"], "function", ["None"], ["def", "loadJson", "(", "data_file", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isfile", "(", "data_file", ")", ":", "\n", "        ", "with", "open", "(", "data_file", ",", "'r'", ")", "as", "read_file", ":", "\n", "            ", "data", "=", "json", ".", "load", "(", "read_file", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_hi-dst.getSlotAcc": [[39, 60], ["float", "miss_slot.append", "compute_accuracy_hi-dst.isMatch", "miss_slot.append"], "function", ["home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_hi-dst.isMatch"], ["", "", "", "def", "getSlotAcc", "(", "gt", ",", "pr", ")", ":", "\n", "    ", "miss_gold", "=", "0", "\n", "miss_slot", "=", "[", "]", "\n", "for", "g", "in", "gt", ":", "\n", "        ", "if", "g", "not", "in", "pr", ":", "\n", "            ", "miss_gold", "+=", "1", "\n", "miss_slot", ".", "append", "(", "g", ")", "\n", "", "else", ":", "\n", "            ", "is_match", "=", "isMatch", "(", "gt", "[", "g", "]", ",", "pr", "[", "g", "]", ",", "g", ")", "\n", "if", "(", "not", "is_match", ")", ":", "\n", "                ", "miss_gold", "+=", "1", "\n", "miss_slot", ".", "append", "(", "g", ")", "\n", "\n", "", "", "", "wrong_pred", "=", "0", "\n", "for", "p", "in", "pr", ":", "\n", "        ", "if", "p", "not", "in", "gt", "and", "p", "not", "in", "miss_slot", ":", "\n", "            ", "wrong_pred", "+=", "1", "\n", "", "", "ACC_TOTAL", "=", "30", "\n", "ACC", "=", "30", "-", "miss_gold", "-", "wrong_pred", "\n", "ACC", "=", "ACC", "/", "float", "(", "ACC_TOTAL", ")", "\n", "return", "ACC", "\n", "\n"]], "home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_hi-dst.normalize_time": [[61, 78], ["re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "str", "x.groups", "int", "int", "int", "x.groups", "x.groups", "x.groups"], "function", ["None"], ["", "def", "normalize_time", "(", "text", ")", ":", "\n", "    ", "text", "=", "re", ".", "sub", "(", "\"(\\d{1})(a\\.?m\\.?|p\\.?m\\.?)\"", ",", "r\"\\1 \\2\"", ",", "text", ")", "# am/pm without space", "\n", "text", "=", "re", ".", "sub", "(", "\"(^| )(\\d{1,2}) (a\\.?m\\.?|p\\.?m\\.?)\"", ",", "r\"\\1\\2:00 \\3\"", ",", "text", ")", "# am/pm short to long form", "\n", "text", "=", "re", ".", "sub", "(", "\"(^| )(at|from|by|until|after) ?(\\d{1,2}) ?(\\d{2})([^0-9]|$)\"", ",", "r\"\\1\\2 \\3:\\4\\5\"", ",", "text", ")", "# Missing separator", "\n", "text", "=", "re", ".", "sub", "(", "\"(^| )(\\d{2})[;.,](\\d{2})\"", ",", "r\"\\1\\2:\\3\"", ",", "text", ")", "# Wrong separator", "\n", "\n", "#text = re.sub(\"(^| )(\\d{1})[;.,](\\d{2})\", r\" \\2:\\3\", text) # Wrong separator", "\n", "text", "=", "re", ".", "sub", "(", "\"(^| )(\\d{2}):(\\d{2})/\"", ",", "r\"\\1\\2:\\3\"", ",", "text", ")", "# Wrong separator", "\n", "text", "=", "re", ".", "sub", "(", "\"(^| )(\\d{1}) (\\d{2})\"", ",", "r\"\\1\\2:\\3\"", ",", "text", ")", "# Wrong separator", "\n", "text", "=", "re", ".", "sub", "(", "\"(^| )(\\d{2}):!(\\d{1})\"", ",", "r\"\\1\\2:1\\3\"", ",", "text", ")", "# Wrong format", "\n", "\n", "text", "=", "re", ".", "sub", "(", "\"(^| )(at|from|by|until|after) ?(\\d{1,2})([;., ]|$)\"", ",", "r\"\\1\\2 \\3:00\\4\"", ",", "text", ")", "# normalize simple full hour time", "\n", "text", "=", "re", ".", "sub", "(", "\"(^| )(\\d{1}:\\d{2})\"", ",", "r\"\\g<1>0\\2\"", ",", "text", ")", "# Add missing leading 0", "\n", "# Map 12 hour times to 24 hour times", "\n", "text", "=", "re", ".", "sub", "(", "\"(\\d{2})(:\\d{2}) ?p\\.?m\\.?\"", ",", "lambda", "x", ":", "str", "(", "int", "(", "x", ".", "groups", "(", ")", "[", "0", "]", ")", "+", "12", "if", "int", "(", "x", ".", "groups", "(", ")", "[", "0", "]", ")", "<", "12", "else", "int", "(", "x", ".", "groups", "(", ")", "[", "0", "]", ")", ")", "+", "x", ".", "groups", "(", ")", "[", "1", "]", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "\"(^| )24:(\\d{2})\"", ",", "r\"\\g<1>00:\\2\"", ",", "text", ")", "# Correct times that use 24 as hour", "\n", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_hi-dst.isMatch": [[79, 123], ["re.sub", "re.sub", "re.sub", "re.sub", "key.split", "compute_accuracy_hi-dst.normalize_time", "v2.replace.replace", "re.sub", "re.sub", "v2.replace.replace", "re.sub.lower", "v3.replace.replace", "v4.replace.replace", "datetime.datetime.strptime", "datetime.datetime.strptime", "abs", "print"], "function", ["home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_hi-dst.normalize_time"], ["", "def", "isMatch", "(", "v1", ",", "v2", ",", "key", ")", ":", "\n", "    ", "is_match", "=", "False", "\n", "if", "(", "v1", "==", "v2", "or", "v1", "in", "v2", "or", "v2", "in", "v1", ")", ":", "\n", "        ", "is_match", "=", "True", "\n", "", "else", ":", "\n", "        ", "v3", "=", "re", ".", "sub", "(", "\"b and b\"", ",", "\"bed and breakfast\"", ",", "v1", ")", "\n", "v3", "=", "re", ".", "sub", "(", "\"(^the | |-|'|\\\"|:)\"", ",", "\"\"", ",", "v3", ")", "\n", "v4", "=", "re", ".", "sub", "(", "\"b and b\"", ",", "\"bed and breakfast\"", ",", "v2", ")", "\n", "v4", "=", "re", ".", "sub", "(", "\"(^the | |-|'|\\\"|:)\"", ",", "\"\"", ",", "v4", ")", "\n", "if", "(", "v3", "==", "v4", "or", "v3", "in", "v4", "or", "v4", "in", "v3", ")", ":", "\n", "            ", "is_match", "=", "True", "\n", "", "else", ":", "\n", "            ", "slot", "=", "key", ".", "split", "(", "\"-\"", ")", "[", "1", "]", "\n", "if", "(", "slot", "in", "time_slots", ")", ":", "\n", "                ", "v3", "=", "normalize_time", "(", "v1", ".", "lower", "(", ")", ")", "\n", "v4", "=", "v2", ".", "replace", "(", "\" \"", ",", "\"\"", ")", "\n", "if", "(", "v3", "==", "v4", ")", ":", "\n", "                    ", "is_match", "=", "True", "\n", "", "else", ":", "\n", "                    ", "try", ":", "\n", "                        ", "if", "(", "\":\"", "in", "v3", "and", "\":\"", "in", "v4", ")", ":", "\n", "                            ", "v3", "=", "v3", ".", "replace", "(", "\" : \"", ",", "\":\"", ")", "\n", "v4", "=", "v4", ".", "replace", "(", "\"24:\"", ",", "\"00:\"", ")", "\n", "t1", "=", "datetime", ".", "strptime", "(", "v3", ",", "'%H:%M'", ")", "\n", "t2", "=", "datetime", ".", "strptime", "(", "v4", ",", "'%H:%M'", ")", "\n", "t_diff", "=", "abs", "(", "(", "t1", "-", "t2", ")", ".", "total_seconds", "(", ")", "/", "60.0", ")", "\n", "if", "(", "t_diff", "<=", "15", ")", ":", "\n", "                                ", "is_match", "=", "True", "\n", "", "", "", "except", ":", "\n", "                        ", "print", "(", "\"Err :: {} {} {}\"", ".", "format", "(", "key", ",", "v1", ",", "v2", ")", ")", "\n", "", "", "", "else", ":", "\n", "                ", "v1", "=", "re", ".", "sub", "(", "\"^the \"", ",", "\"\"", ",", "v1", ")", "\n", "v2", "=", "re", ".", "sub", "(", "\"^the \"", ",", "\"\"", ",", "v2", ")", "\n", "v2", "=", "v2", ".", "replace", "(", "\" - \"", ",", "\"-\"", ")", "\n", "if", "v1", "in", "label_maps", ":", "\n", "                    ", "for", "value_label_variant", "in", "label_maps", "[", "v1", "]", ":", "\n", "                        ", "if", "(", "v2", "in", "value_label_variant", "or", "value_label_variant", "in", "v2", ")", ":", "\n", "                            ", "is_match", "=", "True", "\n", "\n", "", "", "", "if", "(", "not", "is_match", "and", "v2", "in", "label_maps", ")", ":", "\n", "                    ", "for", "value_label_variant", "in", "label_maps", "[", "v2", "]", ":", "\n", "                        ", "if", "(", "v1", "in", "value_label_variant", "or", "value_label_variant", "in", "v1", ")", ":", "\n", "                            ", "is_match", "=", "True", "\n", "", "", "", "", "", "", "return", "is_match", "\n", "\n"]], "home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_hi-dst.getMatch": [[124, 149], ["set", "set", "set.symmetric_difference", "len", "len", "len", "set.add", "set.add", "len", "compute_accuracy_hi-dst.isMatch"], "function", ["home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_hi-dst.isMatch"], ["", "def", "getMatch", "(", "gt", ",", "pr", ")", ":", "\n", "    ", "if", "(", "len", "(", "gt", ")", "!=", "len", "(", "pr", ")", ")", ":", "\n", "        ", "return", "0", "\n", "", "if", "(", "len", "(", "gt", ")", "==", "0", ")", ":", "\n", "        ", "return", "1", "\n", "\n", "", "gt_keys", "=", "set", "(", ")", "\n", "pr_keys", "=", "set", "(", ")", "\n", "for", "key", "in", "gt", ":", "\n", "        ", "gt_keys", ".", "add", "(", "key", ")", "\n", "", "for", "key", "in", "pr", ":", "\n", "        ", "pr_keys", ".", "add", "(", "key", ")", "\n", "", "diff", "=", "gt_keys", ".", "symmetric_difference", "(", "pr_keys", ")", "\n", "if", "(", "len", "(", "diff", ")", ">", "0", ")", ":", "\n", "        ", "return", "0", "\n", "\n", "", "f", "=", "1", "\n", "for", "key", "in", "gt", ":", "\n", "        ", "v1", "=", "gt", "[", "key", "]", "\n", "v2", "=", "pr", "[", "key", "]", "\n", "is_match", "=", "isMatch", "(", "v1", ",", "v2", ",", "key", ")", "\n", "if", "(", "not", "is_match", ")", ":", "\n", "            ", "f", "=", "0", "\n", "break", "\n", "", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_hi-dst.getAvgGoalAccuracy": [[151, 169], ["set", "set", "set.intersection", "set.add", "set.add", "compute_accuracy_hi-dst.isMatch", "len", "float", "len"], "function", ["home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_hi-dst.isMatch"], ["", "def", "getAvgGoalAccuracy", "(", "gt", ",", "pr", ")", ":", "\n", "    ", "set_gt", "=", "set", "(", ")", "\n", "set_pr", "=", "set", "(", ")", "\n", "for", "key", "in", "gt", ":", "\n", "        ", "set_gt", ".", "add", "(", "key", ")", "\n", "", "for", "key", "in", "pr", ":", "\n", "        ", "set_pr", ".", "add", "(", "key", ")", "\n", "\n", "", "set_i", "=", "set_gt", ".", "intersection", "(", "set_pr", ")", "\n", "c", "=", "0", "\n", "for", "key", "in", "set_i", ":", "\n", "        ", "is_match", "=", "isMatch", "(", "gt", "[", "key", "]", ",", "pr", "[", "key", "]", ",", "key", ")", "\n", "if", "(", "is_match", ")", ":", "\n", "            ", "c", "+=", "1", "\n", "", "", "acc", "=", "-", "1", "\n", "if", "(", "len", "(", "gt", ")", ">", "0", ")", ":", "\n", "        ", "acc", "=", "c", "/", "float", "(", "len", "(", "gt", ")", ")", "\n", "", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_hi-dst.getDiff": [[170, 185], ["set", "set", "set.difference", "set", "set1.difference.union", "set.add", "set.add", "compute_accuracy_hi-dst.isMatch", "set.add"], "function", ["home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_hi-dst.isMatch"], ["", "def", "getDiff", "(", "bs1", ",", "bs2", ")", ":", "\n", "    ", "set1", "=", "set", "(", ")", "\n", "set2", "=", "set", "(", ")", "\n", "for", "key", "in", "bs1", ":", "\n", "        ", "set1", ".", "add", "(", "key", ")", "\n", "", "for", "key", "in", "bs2", ":", "\n", "        ", "set2", ".", "add", "(", "key", ")", "\n", "", "set_diff", "=", "set1", ".", "difference", "(", "set2", ")", "\n", "set_extra", "=", "set", "(", ")", "\n", "for", "key", "in", "bs1", ":", "\n", "        ", "if", "key", "not", "in", "set_diff", ":", "\n", "            ", "is_match", "=", "isMatch", "(", "bs1", "[", "key", "]", ",", "bs2", "[", "key", "]", ",", "key", ")", "\n", "if", "(", "not", "is_match", ")", ":", "\n", "                ", "set_extra", ".", "add", "(", "key", ")", "\n", "", "", "", "return", "set_diff", ".", "union", "(", "set_extra", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_hi-dst.getSlotAcc2": [[187, 197], ["compute_accuracy_hi-dst.getDiff", "compute_accuracy_hi-dst.getDiff", "getDiff.intersection", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_hi-dst.getDiff", "home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_hi-dst.getDiff"], ["", "def", "getSlotAcc2", "(", "gt", ",", "pr", ")", ":", "\n", "    ", "d1", "=", "getDiff", "(", "gt", ",", "pr", ")", "\n", "d2", "=", "getDiff", "(", "pr", ",", "gt", ")", "\n", "\n", "#s1 = set([d.rsplit(\"-\", 1)[0] for d in d1])", "\n", "#s2 = set([d.rsplit(\"-\", 1)[0] for d in d2])    ", "\n", "\n", "set_i", "=", "d1", ".", "intersection", "(", "d2", ")", "\n", "acc", "=", "(", "30", "-", "len", "(", "d1", ")", "-", "len", "(", "d2", ")", "+", "len", "(", "set_i", ")", ")", "/", "30.0", "\n", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_hi-dst.checkSubset": [[198, 212], ["compute_accuracy_hi-dst.isMatch"], "function", ["home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_hi-dst.isMatch"], ["", "def", "checkSubset", "(", "bs1", ",", "bs2", ")", ":", "\n", "    ", "flag", "=", "True", "\n", "for", "key", "in", "bs1", ":", "\n", "        ", "if", "key", "in", "bs2", ":", "\n", "            ", "v1", "=", "bs1", "[", "key", "]", "\n", "v2", "=", "bs2", "[", "key", "]", "\n", "is_match", "=", "isMatch", "(", "v1", ",", "v2", ",", "key", ")", "\n", "if", "(", "not", "is_match", ")", ":", "\n", "                ", "flag", "=", "False", "\n", "break", "\n", "", "", "else", ":", "\n", "            ", "flag", "=", "False", "\n", "break", "\n", "", "", "return", "flag", "\n", "\n"]], "home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_hi-dst.getFGA": [[214, 241], ["compute_accuracy_hi-dst.getMatch", "len", "compute_accuracy_hi-dst.getMatch", "compute_accuracy_hi-dst.checkSubset", "compute_accuracy_hi-dst.checkSubset", "math.exp"], "function", ["home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_hi-dst.getMatch", "home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_hi-dst.getMatch", "home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_hi-dst.checkSubset", "home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_hi-dst.checkSubset"], ["", "def", "getFGA", "(", "gt_list", ",", "pr_list", ",", "gt_turn", ",", "pr_turn", ",", "turn_diff", ",", "L", ")", ":", "\n", "    ", "gt", "=", "gt_list", "[", "-", "1", "]", "\n", "pr", "=", "pr_list", "[", "-", "1", "]", "\n", "m", "=", "getMatch", "(", "gt", ",", "pr", ")", "\n", "if", "(", "m", "==", "1", ")", ":", "\n", "#Exact match", "\n", "        ", "return", "1", "\n", "", "else", ":", "\n", "        ", "if", "len", "(", "gt_list", ")", "==", "1", ":", "\n", "#Type 1 error", "\n", "#First turn is wrong", "\n", "            ", "return", "0", "\n", "", "else", ":", "\n", "            ", "n", "=", "getMatch", "(", "gt_list", "[", "-", "2", "]", ",", "pr_list", "[", "-", "2", "]", ")", "\n", "if", "(", "n", "==", "1", ")", ":", "\n", "#Type 1 error", "\n", "#Last turn was correct i.e the error in current turn", "\n", "                ", "return", "0", "\n", "", "else", ":", "\n", "                ", "if", "(", "not", "checkSubset", "(", "gt_turn", ",", "pr", ")", "or", "not", "checkSubset", "(", "pr_turn", ",", "gt", ")", ")", ":", "\n", "#Type 1 error", "\n", "#There exists some undetected/false positive intent in the current prediction", "\n", "                    ", "return", "0", "\n", "", "else", ":", "\n", "#Type 2 error", "\n", "#Current turn is correct but source of the error is some previous turn", "\n", "                    ", "return", "(", "1", "-", "math", ".", "exp", "(", "-", "L", "*", "turn_diff", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_hi-dst.modifyBS": [[242, 250], ["v.replace.replace"], "function", ["None"], ["", "", "", "", "", "def", "modifyBS", "(", "bs", ")", ":", "\n", "    ", "bs_modified", "=", "{", "}", "\n", "for", "slot_key", "in", "bs", ":", "\n", "        ", "if", "(", "True", ")", ":", "\n", "            ", "v", "=", "bs", "[", "slot_key", "]", "\n", "v", "=", "v", ".", "replace", "(", "\" '\"", ",", "\"'\"", ")", "\n", "bs_modified", "[", "slot_key", "]", "=", "v", "\n", "", "", "return", "bs_modified", "\n", "\n"]], "home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_hi-dst.modifyTurnPrediction": [[251, 264], ["slot_key.split", "pr[].replace"], "function", ["None"], ["", "def", "modifyTurnPrediction", "(", "pr", ",", "pred_slots", ")", ":", "\n", "    ", "pr_turn", "=", "{", "}", "\n", "for", "slot_key", "in", "pr", ":", "\n", "        ", "slot_act", "=", "pred_slots", "[", "slot_key", "]", "[", "0", "]", "\n", "slot", "=", "slot_key", ".", "split", "(", "\"-\"", ")", "[", "1", "]", "\n", "if", "(", "True", ")", ":", "\n", "            ", "if", "(", "slot", "in", "time_slots", ")", ":", "\n", "                ", "v", "=", "pr", "[", "slot_key", "]", "\n", "pr_turn", "[", "slot_key", "]", "=", "v", "\n", "", "else", ":", "\n", "                ", "v", "=", "pr", "[", "slot_key", "]", ".", "replace", "(", "\" '\"", ",", "\"'\"", ")", "\n", "pr_turn", "[", "slot_key", "]", "=", "v", "\n", "", "", "", "return", "pr_turn", "\n", "\n"]], "home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_hi-dst.isUnseen": [[265, 284], ["None"], "function", ["None"], ["", "def", "isUnseen", "(", "slot_key", ",", "slot_val", ",", "bs", ")", ":", "\n", "    ", "f", "=", "True", "\n", "if", "(", "slot_key", "in", "bs", ")", ":", "\n", "        ", "if", "(", "slot_val", "==", "bs", "[", "slot_key", "]", ")", ":", "\n", "            ", "f", "=", "False", "\n", "", "else", ":", "\n", "            ", "v", "=", "bs", "[", "slot_key", "]", "\n", "if", "v", "in", "label_maps", ":", "\n", "                ", "for", "value_label_variant", "in", "label_maps", "[", "v", "]", ":", "\n", "                    ", "if", "slot_val", "==", "value_label_variant", ":", "\n", "                        ", "f", "=", "False", "\n", "break", "\n", "\n", "", "", "", "if", "(", "f", "and", "slot_val", "in", "label_maps", ")", ":", "\n", "                ", "for", "value_label_variant", "in", "label_maps", "[", "slot_val", "]", ":", "\n", "                    ", "if", "v", "==", "value_label_variant", ":", "\n", "                        ", "f", "=", "False", "\n", "break", "\n", "", "", "", "", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_hi-dst.getTurnPrediction": [[285, 292], ["compute_accuracy_hi-dst.isUnseen"], "function", ["home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_hi-dst.isUnseen"], ["", "def", "getTurnPrediction", "(", "bs", ",", "bs_prev", ")", ":", "\n", "    ", "bs_turn", "=", "{", "}", "\n", "for", "slot_key", "in", "bs", ":", "\n", "        ", "slot_val", "=", "bs", "[", "slot_key", "]", "\n", "if", "(", "isUnseen", "(", "slot_key", ",", "slot_val", ",", "bs_prev", ")", ")", ":", "\n", "            ", "bs_turn", "[", "slot_key", "]", "=", "slot_val", "\n", "", "", "return", "bs_turn", "\n", "\n"]], "home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_hi-dst.getModelAccuracy": [[294, 362], ["compute_accuracy_hi-dst.loadJson", "print", "print", "range", "len", "len", "len", "round", "print", "compute_accuracy_hi-dst.modifyBS", "compute_accuracy_hi-dst.getTurnPrediction", "compute_accuracy_hi-dst.modifyTurnPrediction", "compute_accuracy_hi-dst.getTurnPrediction", "gt_list.append", "pr_list.append", "compute_accuracy_hi-dst.getMatch", "compute_accuracy_hi-dst.getSlotAcc", "sa_list.append", "compute_accuracy_hi-dst.getAvgGoalAccuracy", "compute_accuracy_hi-dst.getMatch", "range", "modifyBS.copy", "pr.copy", "sum", "sum", "avgGoalAcc.append", "int", "len", "compute_accuracy_hi-dst.getFGA", "int", "round", "round", "round", "int"], "function", ["home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_hi-dst.loadJson", "home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_hi-dst.modifyBS", "home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_hi-dst.getTurnPrediction", "home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_hi-dst.modifyTurnPrediction", "home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_hi-dst.getTurnPrediction", "home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_hi-dst.getMatch", "home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_hi-dst.getSlotAcc", "home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_hi-dst.getAvgGoalAccuracy", "home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_hi-dst.getMatch", "home.repos.pwc.inspect_result.suvodipdey_fga.None.compute_accuracy_hi-dst.getFGA"], ["", "def", "getModelAccuracy", "(", "result_file", ")", ":", "\n", "    ", "dst_res", "=", "loadJson", "(", "result_file", ")", "\n", "total", "=", "0", "\n", "c1", "=", "0", "\n", "c2", "=", "0", "\n", "c3", "=", "0", "\n", "sa_list", "=", "[", "]", "\n", "avgGoalAcc", "=", "[", "]", "\n", "turn_cor", "=", "0", "\n", "lst_lambda", "=", "[", "0.25", ",", "0.5", ",", "0.75", ",", "1.0", "]", "\n", "fga", "=", "[", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "\n", "for", "idx", "in", "dst_res", ":", "\n", "        ", "pr", "=", "{", "}", "\n", "gt_prev", "=", "{", "}", "\n", "pr_prev", "=", "{", "}", "\n", "gt_list", "=", "[", "]", "\n", "pr_list", "=", "[", "]", "\n", "error_turn", "=", "0", "\n", "for", "turn", "in", "dst_res", "[", "idx", "]", ":", "\n", "            ", "total", "+=", "1", "\n", "\n", "gt", "=", "modifyBS", "(", "dst_res", "[", "idx", "]", "[", "turn", "]", "[", "'gt'", "]", ")", "\n", "gt_turn", "=", "getTurnPrediction", "(", "gt", ",", "gt_prev", ")", "\n", "pr_turn", "=", "modifyTurnPrediction", "(", "dst_res", "[", "idx", "]", "[", "turn", "]", "[", "'pr_turn'", "]", ",", "dst_res", "[", "idx", "]", "[", "turn", "]", "[", "'slots'", "]", ")", "\n", "for", "slot_key", "in", "pr_turn", ":", "\n", "                ", "pr", "[", "slot_key", "]", "=", "pr_turn", "[", "slot_key", "]", "\n", "", "pr_turn", "=", "getTurnPrediction", "(", "pr", ",", "pr_prev", ")", "\n", "\n", "gt_list", ".", "append", "(", "gt", ")", "\n", "pr_list", ".", "append", "(", "pr", ")", "\n", "\n", "m", "=", "getMatch", "(", "gt", ",", "pr", ")", "\n", "c1", "+=", "m", "\n", "\n", "sa", "=", "getSlotAcc", "(", "gt", ",", "pr", ")", "\n", "c3", "+=", "sa", "\n", "sa_list", ".", "append", "(", "sa", ")", "\n", "\n", "aga", "=", "getAvgGoalAccuracy", "(", "gt", ",", "pr", ")", "\n", "if", "(", "aga", ">=", "0", ")", ":", "\n", "                ", "avgGoalAcc", ".", "append", "(", "aga", ")", "\n", "\n", "", "n", "=", "getMatch", "(", "gt_turn", ",", "pr_turn", ")", "\n", "c2", "+=", "n", "\n", "\n", "turn_diff", "=", "int", "(", "turn", ")", "-", "error_turn", "\n", "w", "=", "0", "\n", "for", "l", "in", "range", "(", "len", "(", "lst_lambda", ")", ")", ":", "\n", "                ", "w", "=", "getFGA", "(", "gt_list", ",", "pr_list", ",", "gt_turn", ",", "pr_turn", ",", "int", "(", "turn", ")", "-", "error_turn", ",", "lst_lambda", "[", "l", "]", ")", "\n", "fga", "[", "l", "]", "+=", "w", "\n", "", "if", "(", "w", "==", "0", ")", ":", "\n", "                ", "error_turn", "=", "int", "(", "turn", ")", "\n", "", "else", ":", "\n", "                ", "turn_cor", "+=", "1", "\n", "", "gt_prev", "=", "gt", ".", "copy", "(", ")", "\n", "pr_prev", "=", "pr", ".", "copy", "(", ")", "\n", "\n", "", "", "print", "(", "f\"Total: {total}, Exact Match: {c1}, Turn Match: {turn_cor}\"", ")", "\n", "joint_acc", "=", "c1", "*", "100.0", "/", "total", "\n", "turn_acc", "=", "c2", "*", "100.0", "/", "total", "\n", "slot_acc", "=", "sum", "(", "sa_list", ")", "*", "100.0", "/", "len", "(", "sa_list", ")", "\n", "avg_goal_acc", "=", "sum", "(", "avgGoalAcc", ")", "*", "100.0", "/", "len", "(", "avgGoalAcc", ")", "\n", "\n", "print", "(", "f\"Joint Acc = {round(joint_acc,2)}, Slot Acc = {round(slot_acc,2)}, Avg. Goal Acc = {round(avg_goal_acc,2)}\"", ")", "\n", "for", "l", "in", "range", "(", "len", "(", "lst_lambda", ")", ")", ":", "\n", "        ", "fga_acc", "=", "round", "(", "fga", "[", "l", "]", "*", "100.0", "/", "total", ",", "2", ")", "\n", "print", "(", "f\"FGA L={lst_lambda[l]} : {fga_acc}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suvodipdey_fga.trippy.metric_bert_dst.load_dataset_config": [[27, 31], ["open", "json.load"], "function", ["None"], ["def", "load_dataset_config", "(", "dataset_config", ")", ":", "\n", "    ", "with", "open", "(", "dataset_config", ",", "\"r\"", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "raw_config", "=", "json", ".", "load", "(", "f", ")", "\n", "", "return", "raw_config", "[", "'class_types'", "]", ",", "raw_config", "[", "'slots'", "]", ",", "raw_config", "[", "'label_maps'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.suvodipdey_fga.trippy.metric_bert_dst.tokenize": [[33, 39], ["re.sub", "re.sub", "text.strip.strip", "map", "re.split", "len"], "function", ["None"], ["", "def", "tokenize", "(", "text", ")", ":", "\n", "    ", "if", "\"\\u0120\"", "in", "text", ":", "\n", "        ", "text", "=", "re", ".", "sub", "(", "\" \"", ",", "\"\"", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "\"\\u0120\"", ",", "\" \"", ",", "text", ")", "\n", "text", "=", "text", ".", "strip", "(", ")", "\n", "", "return", "' '", ".", "join", "(", "[", "tok", "for", "tok", "in", "map", "(", "str", ".", "strip", ",", "re", ".", "split", "(", "\"(\\W+)\"", ",", "text", ")", ")", "if", "len", "(", "tok", ")", ">", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suvodipdey_fga.trippy.metric_bert_dst.is_in_list": [[41, 52], ["len", "len", "range", "map", "map", "re.split", "len", "re.split", "len"], "function", ["None"], ["", "def", "is_in_list", "(", "tok", ",", "value", ")", ":", "\n", "    ", "found", "=", "False", "\n", "tok_list", "=", "[", "item", "for", "item", "in", "map", "(", "str", ".", "strip", ",", "re", ".", "split", "(", "\"(\\W+)\"", ",", "tok", ")", ")", "if", "len", "(", "item", ")", ">", "0", "]", "\n", "value_list", "=", "[", "item", "for", "item", "in", "map", "(", "str", ".", "strip", ",", "re", ".", "split", "(", "\"(\\W+)\"", ",", "value", ")", ")", "if", "len", "(", "item", ")", ">", "0", "]", "\n", "tok_len", "=", "len", "(", "tok_list", ")", "\n", "value_len", "=", "len", "(", "value_list", ")", "\n", "for", "i", "in", "range", "(", "tok_len", "+", "1", "-", "value_len", ")", ":", "\n", "        ", "if", "tok_list", "[", "i", ":", "i", "+", "value_len", "]", "==", "value_list", ":", "\n", "            ", "found", "=", "True", "\n", "break", "\n", "", "", "return", "found", "\n", "\n"]], "home.repos.pwc.inspect_result.suvodipdey_fga.trippy.metric_bert_dst.check_slot_inform": [[54, 85], ["metric_bert_dst.is_in_list", "metric_bert_dst.is_in_list", "metric_bert_dst.is_in_list", "metric_bert_dst.is_in_list", "metric_bert_dst.is_in_list", "metric_bert_dst.is_in_list"], "function", ["home.repos.pwc.inspect_result.suvodipdey_fga.trippy.metric_bert_dst.is_in_list", "home.repos.pwc.inspect_result.suvodipdey_fga.trippy.metric_bert_dst.is_in_list", "home.repos.pwc.inspect_result.suvodipdey_fga.trippy.metric_bert_dst.is_in_list", "home.repos.pwc.inspect_result.suvodipdey_fga.trippy.metric_bert_dst.is_in_list", "home.repos.pwc.inspect_result.suvodipdey_fga.trippy.metric_bert_dst.is_in_list", "home.repos.pwc.inspect_result.suvodipdey_fga.trippy.metric_bert_dst.is_in_list"], ["", "def", "check_slot_inform", "(", "value_label", ",", "inform_label", ",", "label_maps", ")", ":", "\n", "    ", "value", "=", "inform_label", "\n", "if", "value_label", "==", "inform_label", ":", "\n", "        ", "value", "=", "value_label", "\n", "", "elif", "is_in_list", "(", "inform_label", ",", "value_label", ")", ":", "\n", "        ", "value", "=", "value_label", "\n", "", "elif", "is_in_list", "(", "value_label", ",", "inform_label", ")", ":", "\n", "        ", "value", "=", "value_label", "\n", "", "elif", "inform_label", "in", "label_maps", ":", "\n", "        ", "for", "inform_label_variant", "in", "label_maps", "[", "inform_label", "]", ":", "\n", "            ", "if", "value_label", "==", "inform_label_variant", ":", "\n", "                ", "value", "=", "value_label", "\n", "break", "\n", "", "elif", "is_in_list", "(", "inform_label_variant", ",", "value_label", ")", ":", "\n", "                ", "value", "=", "value_label", "\n", "break", "\n", "", "elif", "is_in_list", "(", "value_label", ",", "inform_label_variant", ")", ":", "\n", "                ", "value", "=", "value_label", "\n", "break", "\n", "", "", "", "elif", "value_label", "in", "label_maps", ":", "\n", "        ", "for", "value_label_variant", "in", "label_maps", "[", "value_label", "]", ":", "\n", "            ", "if", "value_label_variant", "==", "inform_label", ":", "\n", "                ", "value", "=", "value_label", "\n", "break", "\n", "", "elif", "is_in_list", "(", "inform_label", ",", "value_label_variant", ")", ":", "\n", "                ", "value", "=", "value_label", "\n", "break", "\n", "", "elif", "is_in_list", "(", "value_label_variant", ",", "inform_label", ")", ":", "\n", "                ", "value", "=", "value_label", "\n", "break", "\n", "", "", "", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.suvodipdey_fga.trippy.metric_bert_dst.get_joint_slot_correctness": [[87, 276], ["open", "json.load", "range", "print", "range", "print", "range", "metric_bert_dst.tokenize", "metric_bert_dst.tokenize", "range", "total_correctness.append", "[].append", "pos_correctness.append", "refer_correctness.append", "len", "print", "len", "print", "len", "print", "range", "print", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "range", "range", "range", "range", "range", "range", "class_types.index", "class_correctness[].append", "class_correctness[].append", "class_correctness[].append", "class_correctness[].append", "[].append", "len", "val_correctness.append", "len", "range", "len", "len", "len", "len", "len", "class_types.index", "class_types.index", "class_types.index", "pos_correctness.append", "refer_correctness.append", "val_correctness.append", "print", "len", "print", "print", "len", "len", "class_types.index", "pos_correctness.append", "pos_correctness.append", "class_types.index", "refer_correctness.append", "print", "refer_correctness.append", "print", "class_types.index", "val_correctness.append", "print", "val_correctness.append", "numpy.sum", "len", "class_types.index", "numpy.sum", "len", "class_types.index", "class_types.index", "print", "exit", "metric_bert_dst.check_slot_inform", "class_types.index", "metric_bert_dst.check_slot_inform", "metric_bert_dst.check_slot_inform", "print", "exit", "metric_bert_dst.check_slot_inform"], "function", ["home.repos.pwc.inspect_result.suvodipdey_fga.trippy.metric_bert_dst.tokenize", "home.repos.pwc.inspect_result.suvodipdey_fga.trippy.metric_bert_dst.tokenize", "home.repos.pwc.inspect_result.suvodipdey_fga.trippy.metric_bert_dst.check_slot_inform", "home.repos.pwc.inspect_result.suvodipdey_fga.trippy.metric_bert_dst.check_slot_inform", "home.repos.pwc.inspect_result.suvodipdey_fga.trippy.metric_bert_dst.check_slot_inform", "home.repos.pwc.inspect_result.suvodipdey_fga.trippy.metric_bert_dst.check_slot_inform"], ["", "def", "get_joint_slot_correctness", "(", "acc_dict", ",", "fp", ",", "class_types", ",", "label_maps", ",", "\n", "key_class_label_id", "=", "'class_label_id'", ",", "\n", "key_class_prediction", "=", "'class_prediction'", ",", "\n", "key_start_pos", "=", "'start_pos'", ",", "\n", "key_start_prediction", "=", "'start_prediction'", ",", "\n", "key_end_pos", "=", "'end_pos'", ",", "\n", "key_end_prediction", "=", "'end_prediction'", ",", "\n", "key_refer_id", "=", "'refer_id'", ",", "\n", "key_refer_prediction", "=", "'refer_prediction'", ",", "\n", "key_slot_groundtruth", "=", "'slot_groundtruth'", ",", "\n", "key_slot_prediction", "=", "'slot_prediction'", ")", ":", "\n", "    ", "with", "open", "(", "fp", ")", "as", "f", ":", "\n", "        ", "preds", "=", "json", ".", "load", "(", "f", ")", "\n", "class_correctness", "=", "[", "[", "]", "for", "cl", "in", "range", "(", "len", "(", "class_types", ")", "+", "1", ")", "]", "\n", "confusion_matrix", "=", "[", "[", "[", "]", "for", "cl_b", "in", "range", "(", "len", "(", "class_types", ")", ")", "]", "for", "cl_a", "in", "range", "(", "len", "(", "class_types", ")", ")", "]", "\n", "pos_correctness", "=", "[", "]", "\n", "refer_correctness", "=", "[", "]", "\n", "val_correctness", "=", "[", "]", "\n", "total_correctness", "=", "[", "]", "\n", "c_tp", "=", "{", "ct", ":", "0", "for", "ct", "in", "range", "(", "len", "(", "class_types", ")", ")", "}", "\n", "c_tn", "=", "{", "ct", ":", "0", "for", "ct", "in", "range", "(", "len", "(", "class_types", ")", ")", "}", "\n", "c_fp", "=", "{", "ct", ":", "0", "for", "ct", "in", "range", "(", "len", "(", "class_types", ")", ")", "}", "\n", "c_fn", "=", "{", "ct", ":", "0", "for", "ct", "in", "range", "(", "len", "(", "class_types", ")", ")", "}", "\n", "\n", "for", "pred", "in", "preds", ":", "\n", "            ", "guid", "=", "pred", "[", "'guid'", "]", "# List: set_type, dialogue_idx, turn_idx", "\n", "dg_id", "=", "pred", "[", "'guid'", "]", "[", "1", "]", "\n", "dg_turn_id", "=", "pred", "[", "'guid'", "]", "[", "2", "]", "\n", "if", "dg_id", "not", "in", "acc_dict", ":", "\n", "                ", "acc_dict", "[", "dg_id", "]", "=", "{", "}", "\n", "", "if", "dg_turn_id", "not", "in", "acc_dict", "[", "dg_id", "]", ":", "\n", "                ", "acc_dict", "[", "dg_id", "]", "[", "dg_turn_id", "]", "=", "[", "]", "\n", "\n", "", "turn_gt_class", "=", "pred", "[", "key_class_label_id", "]", "\n", "turn_pd_class", "=", "pred", "[", "key_class_prediction", "]", "\n", "gt_start_pos", "=", "pred", "[", "key_start_pos", "]", "\n", "pd_start_pos", "=", "pred", "[", "key_start_prediction", "]", "\n", "gt_end_pos", "=", "pred", "[", "key_end_pos", "]", "\n", "pd_end_pos", "=", "pred", "[", "key_end_prediction", "]", "\n", "gt_refer", "=", "pred", "[", "key_refer_id", "]", "\n", "pd_refer", "=", "pred", "[", "key_refer_prediction", "]", "\n", "gt_slot", "=", "pred", "[", "key_slot_groundtruth", "]", "\n", "pd_slot", "=", "pred", "[", "key_slot_prediction", "]", "\n", "\n", "gt_slot", "=", "tokenize", "(", "gt_slot", ")", "\n", "pd_slot", "=", "tokenize", "(", "pd_slot", ")", "\n", "\n", "# Make sure the true turn labels are contained in the prediction json file!", "\n", "joint_gt_slot", "=", "gt_slot", "\n", "\n", "if", "guid", "[", "-", "1", "]", "==", "'0'", ":", "# First turn, reset the slots", "\n", "                ", "joint_pd_slot", "=", "'none'", "\n", "\n", "# If turn_pd_class or a value to be copied is \"none\", do not update the dialog state.", "\n", "", "if", "turn_pd_class", "==", "class_types", ".", "index", "(", "'none'", ")", ":", "\n", "                ", "pass", "\n", "", "elif", "turn_pd_class", "==", "class_types", ".", "index", "(", "'dontcare'", ")", ":", "\n", "                ", "joint_pd_slot", "=", "'dontcare'", "\n", "", "elif", "turn_pd_class", "==", "class_types", ".", "index", "(", "'copy_value'", ")", ":", "\n", "                ", "joint_pd_slot", "=", "pd_slot", "\n", "", "elif", "'true'", "in", "class_types", "and", "turn_pd_class", "==", "class_types", ".", "index", "(", "'true'", ")", ":", "\n", "                ", "joint_pd_slot", "=", "'true'", "\n", "", "elif", "'false'", "in", "class_types", "and", "turn_pd_class", "==", "class_types", ".", "index", "(", "'false'", ")", ":", "\n", "                ", "joint_pd_slot", "=", "'false'", "\n", "", "elif", "'refer'", "in", "class_types", "and", "turn_pd_class", "==", "class_types", ".", "index", "(", "'refer'", ")", ":", "\n", "                ", "if", "pd_slot", "[", "0", ":", "3", "]", "==", "\"\u00a7\u00a7 \"", ":", "\n", "                    ", "if", "pd_slot", "[", "3", ":", "]", "!=", "'none'", ":", "\n", "                        ", "joint_pd_slot", "=", "check_slot_inform", "(", "joint_gt_slot", ",", "pd_slot", "[", "3", ":", "]", ",", "label_maps", ")", "\n", "", "", "elif", "pd_slot", "[", "0", ":", "2", "]", "==", "\"\u00a7\u00a7\"", ":", "\n", "                    ", "if", "pd_slot", "[", "2", ":", "]", "!=", "'none'", ":", "\n", "                        ", "joint_pd_slot", "=", "check_slot_inform", "(", "joint_gt_slot", ",", "pd_slot", "[", "2", ":", "]", ",", "label_maps", ")", "\n", "", "", "elif", "pd_slot", "!=", "'none'", ":", "\n", "                    ", "joint_pd_slot", "=", "pd_slot", "\n", "", "", "elif", "'inform'", "in", "class_types", "and", "turn_pd_class", "==", "class_types", ".", "index", "(", "'inform'", ")", ":", "\n", "                ", "if", "pd_slot", "[", "0", ":", "3", "]", "==", "\"\u00a7\u00a7 \"", ":", "\n", "                    ", "if", "pd_slot", "[", "3", ":", "]", "!=", "'none'", ":", "\n", "                        ", "joint_pd_slot", "=", "check_slot_inform", "(", "joint_gt_slot", ",", "pd_slot", "[", "3", ":", "]", ",", "label_maps", ")", "\n", "", "", "elif", "pd_slot", "[", "0", ":", "2", "]", "==", "\"\u00a7\u00a7\"", ":", "\n", "                    ", "if", "pd_slot", "[", "2", ":", "]", "!=", "'none'", ":", "\n", "                        ", "joint_pd_slot", "=", "check_slot_inform", "(", "joint_gt_slot", ",", "pd_slot", "[", "2", ":", "]", ",", "label_maps", ")", "\n", "", "", "else", ":", "\n", "                    ", "print", "(", "\"ERROR: Unexpected slot value format. Aborting.\"", ")", "\n", "exit", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "print", "(", "\"ERROR: Unexpected class_type. Aborting.\"", ")", "\n", "exit", "(", ")", "\n", "\n", "", "total_correct", "=", "True", "\n", "\n", "# Check the per turn correctness of the class_type prediction", "\n", "if", "turn_gt_class", "==", "turn_pd_class", ":", "\n", "                ", "class_correctness", "[", "turn_gt_class", "]", ".", "append", "(", "1.0", ")", "\n", "class_correctness", "[", "-", "1", "]", ".", "append", "(", "1.0", ")", "\n", "c_tp", "[", "turn_gt_class", "]", "+=", "1", "\n", "# Only where there is a span, we check its per turn correctness", "\n", "if", "turn_gt_class", "==", "class_types", ".", "index", "(", "'copy_value'", ")", ":", "\n", "                    ", "if", "gt_start_pos", "==", "pd_start_pos", "and", "gt_end_pos", "==", "pd_end_pos", ":", "\n", "                        ", "pos_correctness", ".", "append", "(", "1.0", ")", "\n", "", "else", ":", "\n", "                        ", "pos_correctness", ".", "append", "(", "0.0", ")", "\n", "# Only where there is a referral, we check its per turn correctness", "\n", "", "", "if", "'refer'", "in", "class_types", "and", "turn_gt_class", "==", "class_types", ".", "index", "(", "'refer'", ")", ":", "\n", "                    ", "if", "gt_refer", "==", "pd_refer", ":", "\n", "                        ", "refer_correctness", ".", "append", "(", "1.0", ")", "\n", "print", "(", "\"  [%s] Correct referral: %s | %s\"", "%", "(", "guid", ",", "gt_refer", ",", "pd_refer", ")", ")", "\n", "", "else", ":", "\n", "                        ", "refer_correctness", ".", "append", "(", "0.0", ")", "\n", "print", "(", "\"  [%s] Incorrect referral: %s | %s\"", "%", "(", "guid", ",", "gt_refer", ",", "pd_refer", ")", ")", "\n", "", "", "", "else", ":", "\n", "                ", "if", "turn_gt_class", "==", "class_types", ".", "index", "(", "'copy_value'", ")", ":", "\n", "                    ", "pos_correctness", ".", "append", "(", "0.0", ")", "\n", "", "if", "'refer'", "in", "class_types", "and", "turn_gt_class", "==", "class_types", ".", "index", "(", "'refer'", ")", ":", "\n", "                    ", "refer_correctness", ".", "append", "(", "0.0", ")", "\n", "", "class_correctness", "[", "turn_gt_class", "]", ".", "append", "(", "0.0", ")", "\n", "class_correctness", "[", "-", "1", "]", ".", "append", "(", "0.0", ")", "\n", "confusion_matrix", "[", "turn_gt_class", "]", "[", "turn_pd_class", "]", ".", "append", "(", "1.0", ")", "\n", "c_fn", "[", "turn_gt_class", "]", "+=", "1", "\n", "c_fp", "[", "turn_pd_class", "]", "+=", "1", "\n", "", "for", "cc", "in", "range", "(", "len", "(", "class_types", ")", ")", ":", "\n", "                ", "if", "cc", "!=", "turn_gt_class", "and", "cc", "!=", "turn_pd_class", ":", "\n", "                    ", "c_tn", "[", "cc", "]", "+=", "1", "\n", "\n", "# Check the joint slot correctness.", "\n", "# If the value label is not none, then we need to have a value prediction.", "\n", "# Even if the class_type is 'none', there can still be a value label,", "\n", "# it might just not be pointable in the current turn. It might however", "\n", "# be referrable and thus predicted correctly.", "\n", "", "", "if", "joint_gt_slot", "==", "joint_pd_slot", ":", "\n", "                ", "val_correctness", ".", "append", "(", "1.0", ")", "\n", "", "elif", "joint_gt_slot", "!=", "'none'", "and", "joint_gt_slot", "!=", "'dontcare'", "and", "joint_gt_slot", "!=", "'true'", "and", "joint_gt_slot", "!=", "'false'", "and", "joint_gt_slot", "in", "label_maps", ":", "\n", "                ", "no_match", "=", "True", "\n", "for", "variant", "in", "label_maps", "[", "joint_gt_slot", "]", ":", "\n", "                    ", "if", "variant", "==", "joint_pd_slot", ":", "\n", "                        ", "no_match", "=", "False", "\n", "break", "\n", "", "", "if", "no_match", ":", "\n", "                    ", "val_correctness", ".", "append", "(", "0.0", ")", "\n", "total_correct", "=", "False", "\n", "print", "(", "\"  [%s] Incorrect value (variant): %s (turn class: %s) | %s (turn class: %s)\"", "%", "(", "guid", ",", "joint_gt_slot", ",", "turn_gt_class", ",", "joint_pd_slot", ",", "turn_pd_class", ")", ")", "\n", "", "else", ":", "\n", "                    ", "val_correctness", ".", "append", "(", "1.0", ")", "\n", "", "", "else", ":", "\n", "                ", "val_correctness", ".", "append", "(", "0.0", ")", "\n", "total_correct", "=", "False", "\n", "print", "(", "\"  [%s] Incorrect value: %s (turn class: %s) | %s (turn class: %s)\"", "%", "(", "guid", ",", "joint_gt_slot", ",", "turn_gt_class", ",", "joint_pd_slot", ",", "turn_pd_class", ")", ")", "\n", "\n", "", "total_correctness", ".", "append", "(", "1.0", "if", "total_correct", "else", "0.0", ")", "\n", "acc_dict", "[", "dg_id", "]", "[", "dg_turn_id", "]", ".", "append", "(", "1", "if", "total_correct", "else", "0", ")", "\n", "\n", "# Account for empty lists (due to no instances of spans or referrals being seen)", "\n", "", "if", "pos_correctness", "==", "[", "]", ":", "\n", "            ", "pos_correctness", ".", "append", "(", "1.0", ")", "\n", "", "if", "refer_correctness", "==", "[", "]", ":", "\n", "            ", "refer_correctness", ".", "append", "(", "1.0", ")", "\n", "\n", "", "for", "ct", "in", "range", "(", "len", "(", "class_types", ")", ")", ":", "\n", "            ", "if", "c_tp", "[", "ct", "]", "+", "c_fp", "[", "ct", "]", ">", "0", ":", "\n", "                ", "precision", "=", "c_tp", "[", "ct", "]", "/", "(", "c_tp", "[", "ct", "]", "+", "c_fp", "[", "ct", "]", ")", "\n", "", "else", ":", "\n", "                ", "precision", "=", "1.0", "\n", "", "if", "c_tp", "[", "ct", "]", "+", "c_fn", "[", "ct", "]", ">", "0", ":", "\n", "                ", "recall", "=", "c_tp", "[", "ct", "]", "/", "(", "c_tp", "[", "ct", "]", "+", "c_fn", "[", "ct", "]", ")", "\n", "", "else", ":", "\n", "                ", "recall", "=", "1.0", "\n", "", "if", "precision", "+", "recall", ">", "0", ":", "\n", "                ", "f1", "=", "2", "*", "(", "(", "precision", "*", "recall", ")", "/", "(", "precision", "+", "recall", ")", ")", "\n", "", "else", ":", "\n", "                ", "f1", "=", "1.0", "\n", "", "if", "c_tp", "[", "ct", "]", "+", "c_tn", "[", "ct", "]", "+", "c_fp", "[", "ct", "]", "+", "c_fn", "[", "ct", "]", ">", "0", ":", "\n", "                ", "acc", "=", "(", "c_tp", "[", "ct", "]", "+", "c_tn", "[", "ct", "]", ")", "/", "(", "c_tp", "[", "ct", "]", "+", "c_tn", "[", "ct", "]", "+", "c_fp", "[", "ct", "]", "+", "c_fn", "[", "ct", "]", ")", "\n", "", "else", ":", "\n", "                ", "acc", "=", "1.0", "\n", "", "print", "(", "\"Performance for class '%s' (%s): Recall: %.2f (%d of %d), Precision: %.2f, F1: %.2f, Accuracy: %.2f (TP/TN/FP/FN: %d/%d/%d/%d)\"", "%", "\n", "(", "class_types", "[", "ct", "]", ",", "ct", ",", "recall", ",", "np", ".", "sum", "(", "class_correctness", "[", "ct", "]", ")", ",", "len", "(", "class_correctness", "[", "ct", "]", ")", ",", "precision", ",", "f1", ",", "acc", ",", "c_tp", "[", "ct", "]", ",", "c_tn", "[", "ct", "]", ",", "c_fp", "[", "ct", "]", ",", "c_fn", "[", "ct", "]", ")", ")", "\n", "\n", "", "print", "(", "\"Confusion matrix:\"", ")", "\n", "for", "cl", "in", "range", "(", "len", "(", "class_types", ")", ")", ":", "\n", "            ", "print", "(", "\"    %s\"", "%", "(", "cl", ")", ",", "end", "=", "\"\"", ")", "\n", "", "print", "(", "\"\"", ")", "\n", "for", "cl_a", "in", "range", "(", "len", "(", "class_types", ")", ")", ":", "\n", "            ", "print", "(", "\"%s \"", "%", "(", "cl_a", ")", ",", "end", "=", "\"\"", ")", "\n", "for", "cl_b", "in", "range", "(", "len", "(", "class_types", ")", ")", ":", "\n", "                ", "if", "len", "(", "class_correctness", "[", "cl_a", "]", ")", ">", "0", ":", "\n", "                    ", "print", "(", "\"%.2f \"", "%", "(", "np", ".", "sum", "(", "confusion_matrix", "[", "cl_a", "]", "[", "cl_b", "]", ")", "/", "len", "(", "class_correctness", "[", "cl_a", "]", ")", ")", ",", "end", "=", "\"\"", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "\"---- \"", ",", "end", "=", "\"\"", ")", "\n", "", "", "print", "(", "\"\"", ")", "\n", "\n", "", "return", "np", ".", "asarray", "(", "total_correctness", ")", ",", "np", ".", "asarray", "(", "val_correctness", ")", ",", "np", ".", "asarray", "(", "class_correctness", ")", ",", "np", ".", "asarray", "(", "pos_correctness", ")", ",", "np", ".", "asarray", "(", "refer_correctness", ")", ",", "np", ".", "asarray", "(", "confusion_matrix", ")", ",", "c_tp", ",", "c_tn", ",", "c_fp", ",", "c_fn", "\n", "\n"]]}