{"home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.None.options.parse_args": [[8, 42], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "ValueError"], "function", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.None.options.parse_args"], ["def", "parse_args", "(", "script", ")", ":", "\n", "  ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'few-shot script %s'", "%", "(", "script", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "default", "=", "'multi'", ",", "help", "=", "'miniImagenet/cub/cars/places/plantae, specify multi for training with multiple domains'", ")", "\n", "parser", ".", "add_argument", "(", "'--testset'", ",", "default", "=", "'cub'", ",", "help", "=", "'cub/cars/places/plantae, valid only when dataset=multi'", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "default", "=", "'ResNet10'", ",", "help", "=", "'model: Conv{4|6} / ResNet{10|18|34}'", ")", "# we use ResNet10 in the paper", "\n", "parser", ".", "add_argument", "(", "'--method'", ",", "default", "=", "'baseline'", ",", "help", "=", "'baseline/protonet/gnnnet'", ")", "\n", "parser", ".", "add_argument", "(", "'--stage'", ",", "default", "=", "'metatrain'", ",", "help", "=", "'pretrain/metatrain'", ")", "\n", "parser", ".", "add_argument", "(", "'--train_n_way'", ",", "default", "=", "5", ",", "type", "=", "int", ",", "help", "=", "'class num to classify for training'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_n_way'", ",", "default", "=", "5", ",", "type", "=", "int", ",", "help", "=", "'class num to classify for testing (validation) '", ")", "\n", "parser", ".", "add_argument", "(", "'--n_shot'", ",", "default", "=", "5", ",", "type", "=", "int", ",", "help", "=", "'number of labeled data in each class, same as n_support'", ")", "\n", "parser", ".", "add_argument", "(", "'--train_aug'", ",", "action", "=", "'store_true'", ",", "help", "=", "'perform data augmentation or not during training '", ")", "\n", "parser", ".", "add_argument", "(", "'--name'", ",", "default", "=", "'tmp'", ",", "type", "=", "str", ",", "help", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--save_dir'", ",", "default", "=", "'./output'", ",", "type", "=", "str", ",", "help", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--data_dir'", ",", "default", "=", "'/DATACENTER/2/lovelyqian/CROSS-DOMAIN-FSL-DATASETS'", ",", "type", "=", "str", ",", "help", "=", "''", ")", "\n", "\n", "if", "script", "==", "'train'", ":", "\n", "    ", "parser", ".", "add_argument", "(", "'--num_classes'", ",", "default", "=", "64", ",", "type", "=", "int", ",", "help", "=", "'total number of classes in softmax, only used in baseline'", ")", "\n", "parser", ".", "add_argument", "(", "'--target_set'", ",", "default", "=", "'cub'", ",", "help", "=", "'cub/cars/places/plantae, use the extremely labeled target data'", ")", "\n", "parser", ".", "add_argument", "(", "'--target_num_label'", ",", "default", "=", "5", ",", "type", "=", "int", ",", "help", "=", "'number of labeled target base images per class'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--save_freq'", ",", "default", "=", "50", ",", "type", "=", "int", ",", "help", "=", "'Save frequency'", ")", "\n", "parser", ".", "add_argument", "(", "'--start_epoch'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "'Starting epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'--stop_epoch'", ",", "default", "=", "400", ",", "type", "=", "int", ",", "help", "=", "'Stopping epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "help", "=", "'continue from previous trained model with largest epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume_epoch'", ",", "default", "=", "-", "1", ",", "type", "=", "int", ",", "help", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup'", ",", "default", "=", "'gg3b0'", ",", "type", "=", "str", ",", "help", "=", "'continue from baseline, neglected if resume is true'", ")", "\n", "", "elif", "script", "==", "'test'", ":", "\n", "    ", "parser", ".", "add_argument", "(", "'--split'", ",", "default", "=", "'novel'", ",", "help", "=", "'base/val/novel'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_epoch'", ",", "default", "=", "400", ",", "type", "=", "int", ",", "help", "=", "'load the model trained in x epoch, use the best model if x is -1'", ")", "\n", "parser", ".", "add_argument", "(", "'--ckp_path'", ")", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "'Unknown script'", ")", "\n", "\n", "", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.None.options.get_assigned_file": [[44, 47], ["os.path.join"], "function", ["None"], ["", "def", "get_assigned_file", "(", "checkpoint_dir", ",", "num", ")", ":", "\n", "  ", "assign_file", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "'{:d}.tar'", ".", "format", "(", "num", ")", ")", "\n", "return", "assign_file", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.None.options.get_resume_file": [[48, 59], ["glob.glob", "numpy.array", "numpy.max", "os.path.join", "os.path.join", "len", "int", "os.path.basename", "os.path.splitext", "os.path.basename"], "function", ["None"], ["", "def", "get_resume_file", "(", "checkpoint_dir", ",", "resume_epoch", "=", "-", "1", ")", ":", "\n", "  ", "filelist", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "'*.tar'", ")", ")", "\n", "if", "len", "(", "filelist", ")", "==", "0", ":", "\n", "    ", "return", "None", "\n", "\n", "", "filelist", "=", "[", "x", "for", "x", "in", "filelist", "if", "os", ".", "path", ".", "basename", "(", "x", ")", "!=", "'best_model.tar'", "]", "\n", "epochs", "=", "np", ".", "array", "(", "[", "int", "(", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "x", ")", ")", "[", "0", "]", ")", "for", "x", "in", "filelist", "]", ")", "\n", "max_epoch", "=", "np", ".", "max", "(", "epochs", ")", "\n", "epoch", "=", "max_epoch", "if", "resume_epoch", "==", "-", "1", "else", "resume_epoch", "\n", "resume_file", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "'{:d}.tar'", ".", "format", "(", "epoch", ")", ")", "\n", "return", "resume_file", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.None.options.get_best_file": [[60, 66], ["os.path.join", "os.path.isfile", "options.get_resume_file"], "function", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.None.options.get_resume_file"], ["", "def", "get_best_file", "(", "checkpoint_dir", ")", ":", "\n", "  ", "best_file", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "'best_model.tar'", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "best_file", ")", ":", "\n", "    ", "return", "best_file", "\n", "", "else", ":", "\n", "    ", "return", "get_resume_file", "(", "checkpoint_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.None.options.load_warmup_state": [[67, 95], ["print", "options.get_resume_file", "print", "torch.load", "list", "print", "enumerate", "ValueError", "state.keys", "key.replace", "state.pop", "key.replace", "state.pop", "key.replace", "state.pop", "key.replace", "state.pop", "state.pop"], "function", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.None.options.get_resume_file"], ["", "", "def", "load_warmup_state", "(", "filename", ",", "method", ")", ":", "\n", "  ", "print", "(", "'  load pre-trained model file: {}'", ".", "format", "(", "filename", ")", ")", "\n", "warmup_resume_file", "=", "get_resume_file", "(", "filename", ")", "\n", "print", "(", "' warmup_resume_file:'", ",", "warmup_resume_file", ")", "\n", "tmp", "=", "torch", ".", "load", "(", "warmup_resume_file", ")", "\n", "if", "tmp", "is", "not", "None", ":", "\n", "    ", "state", "=", "tmp", "[", "'state'", "]", "\n", "state_keys", "=", "list", "(", "state", ".", "keys", "(", ")", ")", "\n", "print", "(", "state_keys", ")", "\n", "for", "i", ",", "key", "in", "enumerate", "(", "state_keys", ")", ":", "\n", "      ", "if", "'relationnet'", "in", "method", "and", "\"feature.\"", "in", "key", ":", "\n", "        ", "newkey", "=", "key", ".", "replace", "(", "\"feature.\"", ",", "\"\"", ")", "\n", "state", "[", "newkey", "]", "=", "state", ".", "pop", "(", "key", ")", "\n", "", "elif", "method", "==", "'gnnnet'", "and", "'feature.'", "in", "key", ":", "\n", "        ", "newkey", "=", "key", ".", "replace", "(", "\"feature.\"", ",", "\"\"", ")", "\n", "state", "[", "newkey", "]", "=", "state", ".", "pop", "(", "key", ")", "\n", "", "elif", "method", "==", "'matchingnet'", "and", "'feature.'", "in", "key", "and", "'.7.'", "not", "in", "key", ":", "\n", "        ", "newkey", "=", "key", ".", "replace", "(", "\"feature.\"", ",", "\"\"", ")", "\n", "state", "[", "newkey", "]", "=", "state", ".", "pop", "(", "key", ")", "\n", "", "elif", "(", "'VAE_model.'", "in", "key", ")", ":", "\n", "        ", "newkey", "=", "key", ".", "replace", "(", "\"VAE_model.\"", ",", "\"\"", ")", "\n", "state", "[", "newkey", "]", "=", "state", ".", "pop", "(", "key", ")", "\n", "\n", "", "else", ":", "\n", "        ", "state", ".", "pop", "(", "key", ")", "\n", "", "", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "' No pre-trained encoder file found!'", ")", "\n", "", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.None.options.load_warmup_state_speci": [[98, 126], ["print", "print", "torch.load", "list", "print", "enumerate", "ValueError", "state.keys", "key.replace", "state.pop", "key.replace", "state.pop", "key.replace", "state.pop", "key.replace", "state.pop", "state.pop"], "function", ["None"], ["", "def", "load_warmup_state_speci", "(", "filename", ",", "method", ")", ":", "\n", "  ", "print", "(", "'  load pre-trained model file: {}'", ".", "format", "(", "filename", ")", ")", "\n", "#warmup_resume_file = get_resume_file(filename)", "\n", "warmup_resume_file", "=", "filename", "\n", "print", "(", "' warmup_resume_file:'", ",", "warmup_resume_file", ")", "\n", "tmp", "=", "torch", ".", "load", "(", "warmup_resume_file", ")", "\n", "if", "tmp", "is", "not", "None", ":", "\n", "    ", "state", "=", "tmp", "[", "'state'", "]", "\n", "state_keys", "=", "list", "(", "state", ".", "keys", "(", ")", ")", "\n", "print", "(", "state_keys", ")", "\n", "for", "i", ",", "key", "in", "enumerate", "(", "state_keys", ")", ":", "\n", "      ", "if", "'relationnet'", "in", "method", "and", "\"feature.\"", "in", "key", ":", "\n", "        ", "newkey", "=", "key", ".", "replace", "(", "\"feature.\"", ",", "\"\"", ")", "\n", "state", "[", "newkey", "]", "=", "state", ".", "pop", "(", "key", ")", "\n", "", "elif", "method", "==", "'gnnnet'", "and", "'feature.'", "in", "key", ":", "\n", "        ", "newkey", "=", "key", ".", "replace", "(", "\"feature.\"", ",", "\"\"", ")", "\n", "state", "[", "newkey", "]", "=", "state", ".", "pop", "(", "key", ")", "\n", "", "elif", "method", "==", "'matchingnet'", "and", "'feature.'", "in", "key", "and", "'.7.'", "not", "in", "key", ":", "\n", "        ", "newkey", "=", "key", ".", "replace", "(", "\"feature.\"", ",", "\"\"", ")", "\n", "state", "[", "newkey", "]", "=", "state", ".", "pop", "(", "key", ")", "\n", "", "elif", "(", "'VAE_model.'", "in", "key", ")", ":", "\n", "        ", "newkey", "=", "key", ".", "replace", "(", "\"VAE_model.\"", ",", "\"\"", ")", "\n", "state", "[", "newkey", "]", "=", "state", ".", "pop", "(", "key", ")", "\n", "", "else", ":", "\n", "        ", "state", ".", "pop", "(", "key", ")", "\n", "", "", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "' No pre-trained encoder file found!'", ")", "\n", "", "return", "state", "\n", "", ""]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.None.network_test.save_features": [[19, 45], ["h5py.File", "h5py.File.create_dataset", "enumerate", "h5py.File.create_dataset", "h5py.File.close", "len", "x.cuda.cuda", "model", "model_disentangle", "model.data.cpu().numpy", "y.cpu().numpy", "print", "h5py.File.create_dataset", "model.size", "model.data.cpu", "y.cpu", "len", "list", "model.size", "model.size", "model.size"], "function", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.cuda"], ["def", "save_features", "(", "model", ",", "model_disentangle", ",", "data_loader", ",", "featurefile", ")", ":", "\n", "  ", "f", "=", "h5py", ".", "File", "(", "featurefile", ",", "'w'", ")", "\n", "max_count", "=", "len", "(", "data_loader", ")", "*", "data_loader", ".", "batch_size", "\n", "all_labels", "=", "f", ".", "create_dataset", "(", "'all_labels'", ",", "(", "max_count", ",", ")", ",", "dtype", "=", "'i'", ")", "\n", "all_feats", "=", "None", "\n", "count", "=", "0", "\n", "for", "i", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "    ", "if", "(", "i", "%", "10", ")", "==", "0", ":", "\n", "      ", "print", "(", "'    {:d}/{:d}'", ".", "format", "(", "i", ",", "len", "(", "data_loader", ")", ")", ")", "\n", "", "x", "=", "x", ".", "cuda", "(", ")", "\n", "feats", "=", "model", "(", "x", ")", "\n", "\n", "\n", "a_code", ",", "b_code", "=", "model_disentangle", "(", "feats", ")", "\n", "feats", "=", "a_code", "\n", "\n", "\n", "if", "all_feats", "is", "None", ":", "\n", "      ", "all_feats", "=", "f", ".", "create_dataset", "(", "'all_feats'", ",", "[", "max_count", "]", "+", "list", "(", "feats", ".", "size", "(", ")", "[", "1", ":", "]", ")", ",", "dtype", "=", "'f'", ")", "\n", "", "all_feats", "[", "count", ":", "count", "+", "feats", ".", "size", "(", "0", ")", "]", "=", "feats", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "all_labels", "[", "count", ":", "count", "+", "feats", ".", "size", "(", "0", ")", "]", "=", "y", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "count", "=", "count", "+", "feats", ".", "size", "(", "0", ")", "\n", "\n", "", "count_var", "=", "f", ".", "create_dataset", "(", "'count'", ",", "(", "1", ",", ")", ",", "dtype", "=", "'i'", ")", "\n", "count_var", "[", "0", "]", "=", "count", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.None.network_test.feature_evaluation": [[47, 63], ["cl_data_file.keys", "random.sample", "torch.from_numpy", "model.set_forward", "model.set_forward.data.cpu().numpy().argmax", "numpy.repeat", "numpy.random.permutation().tolist", "torch.from_numpy.append", "numpy.array", "range", "numpy.mean", "model.set_forward.data.cpu().numpy", "numpy.random.permutation", "numpy.squeeze", "len", "range", "model.set_forward.data.cpu"], "function", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_template.MetaTemplate.set_forward"], ["", "def", "feature_evaluation", "(", "cl_data_file", ",", "model", ",", "n_way", "=", "5", ",", "n_support", "=", "5", ",", "n_query", "=", "15", ")", ":", "\n", "  ", "class_list", "=", "cl_data_file", ".", "keys", "(", ")", "\n", "select_class", "=", "random", ".", "sample", "(", "class_list", ",", "n_way", ")", "\n", "z_all", "=", "[", "]", "\n", "for", "cl", "in", "select_class", ":", "\n", "    ", "img_feat", "=", "cl_data_file", "[", "cl", "]", "\n", "perm_ids", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "img_feat", ")", ")", ".", "tolist", "(", ")", "\n", "z_all", ".", "append", "(", "[", "np", ".", "squeeze", "(", "img_feat", "[", "perm_ids", "[", "i", "]", "]", ")", "for", "i", "in", "range", "(", "n_support", "+", "n_query", ")", "]", ")", "\n", "", "z_all", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "z_all", ")", ")", "\n", "\n", "model", ".", "n_query", "=", "n_query", "\n", "scores", "=", "model", ".", "set_forward", "(", "z_all", ",", "is_feature", "=", "True", ")", "\n", "pred", "=", "scores", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "y", "=", "np", ".", "repeat", "(", "range", "(", "n_way", ")", ",", "n_query", ")", "\n", "acc", "=", "np", ".", "mean", "(", "pred", "==", "y", ")", "*", "100", "\n", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.None.network_test.test_single_ckp": [[66, 175], ["print", "print", "os.path.join", "print", "data.datamgr.SimpleDataManager", "data.datamgr.SimpleDataManager.get_data_loader", "print", "print", "methods.disentangle_module.Disentangle", "print", "methods.meta_FDMixup_model.MetaFDMixup.cuda", "model_disentangle.cuda.cuda", "torch.load", "list", "print", "enumerate", "print", "methods.meta_FDMixup_model.MetaFDMixup.load_state_dict", "methods.meta_FDMixup_model.MetaFDMixup.eval", "torch.load", "print", "print", "enumerate", "print", "model_disentangle.cuda.load_state_dict", "model_disentangle.cuda.eval", "print", "print", "params.ckp_path.replace().replace", "os.path.dirname", "network_test.save_features", "print", "dict", "print", "methods.meta_FDMixup_model.MetaFDMixup.cuda", "methods.meta_FDMixup_model.MetaFDMixup.eval", "print", "data.init_loader", "print", "range", "print", "numpy.asarray", "numpy.mean", "numpy.std", "print", "methods.meta_FDMixup_model.MetaFDMixup.state_dict().keys", "model_disentangle.cuda.state_dict().keys", "state.keys", "len", "list", "len", "state_disentangle.keys", "list", "len", "len", "os.path.isdir", "os.makedirs", "methods.protonet.ProtoNet", "network_test.feature_evaluation", "np.asarray.append", "os.remove", "key.replace", "state_backbone.pop", "state_backbone.pop", "state_backbone.keys", "list", "key.replace", "state_disentangle.pop", "state_disentangle.pop", "state_disentangle.keys", "list", "len", "len", "params.ckp_path.replace", "methods.meta_FDMixup_model.MetaFDMixup", "torch.load", "methods.meta_FDMixup_model.MetaFDMixup.load_state_dict", "methods.meta_FDMixup_model.MetaFDMixup.state_dict", "model_disentangle.cuda.state_dict", "state_backbone.keys", "state_disentangle.keys", "list", "list", "state_backbone.keys", "state_disentangle.keys", "numpy.sqrt"], "function", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.data.datamgr.SetDataManager.get_data_loader", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.cuda", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.cuda", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.None.network_test.save_features", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.cuda", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.data.feature_loader.init_loader", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.None.network_test.feature_evaluation"], ["", "def", "test_single_ckp", "(", "params", ")", ":", "\n", "  ", "print", "(", "'\\nStage 1: saving features'", ")", "\n", "# dataset", "\n", "print", "(", "'  build dataset'", ")", "\n", "image_size", "=", "224", "\n", "split", "=", "params", ".", "split", "\n", "loadfile", "=", "os", ".", "path", ".", "join", "(", "params", ".", "data_dir", ",", "params", ".", "dataset", ",", "split", "+", "'.json'", ")", "\n", "print", "(", "'load file:'", ",", "loadfile", ")", "\n", "datamgr", "=", "SimpleDataManager", "(", "image_size", ",", "batch_size", "=", "64", ")", "\n", "data_loader", "=", "datamgr", ".", "get_data_loader", "(", "loadfile", ",", "aug", "=", "False", ")", "\n", "\n", "print", "(", "'  build feature encoder'", ")", "\n", "model", "=", "model_dict", "[", "params", ".", "model", "]", "(", ")", "\n", "print", "(", "'model:'", ",", "model", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ")", "\n", "model_disentangle", "=", "Disentangle", "(", ")", "\n", "print", "(", "'model disentangle:'", ",", "model_disentangle", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "model_disentangle", "=", "model_disentangle", ".", "cuda", "(", ")", "\n", "tmp", "=", "torch", ".", "load", "(", "params", ".", "ckp_path", ")", "\n", "try", ":", "\n", "    ", "state", "=", "tmp", "[", "'state'", "]", "\n", "", "except", "KeyError", ":", "\n", "    ", "state", "=", "tmp", "[", "'model_state'", "]", "\n", "", "except", ":", "\n", "    ", "raise", "\n", "", "state_keys", "=", "list", "(", "state", ".", "keys", "(", ")", ")", "\n", "print", "(", "'state_keys:'", ",", "state_keys", ",", "len", "(", "state_keys", ")", ")", "\n", "\n", "\n", "# load params to the backbone model", "\n", "state_backbone", "=", "state", "\n", "for", "i", ",", "key", "in", "enumerate", "(", "state_keys", ")", ":", "\n", "    ", "if", "\"feature.\"", "in", "key", "and", "not", "'gamma'", "in", "key", "and", "not", "'beta'", "in", "key", ":", "\n", "      ", "newkey", "=", "key", ".", "replace", "(", "\"feature.\"", ",", "\"\"", ")", "\n", "state_backbone", "[", "newkey", "]", "=", "state_backbone", ".", "pop", "(", "key", ")", "\n", "", "else", ":", "\n", "      ", "state_backbone", ".", "pop", "(", "key", ")", "\n", "", "", "print", "(", "'backbone state keys:'", ",", "list", "(", "state_backbone", ".", "keys", "(", ")", ")", ",", "len", "(", "list", "(", "state_backbone", ".", "keys", "(", ")", ")", ")", ")", "\n", "model", ".", "load_state_dict", "(", "state_backbone", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "# load prams to the disentangle model", "\n", "tmp", "=", "torch", ".", "load", "(", "params", ".", "ckp_path", ")", "\n", "try", ":", "\n", "    ", "state", "=", "tmp", "[", "'state'", "]", "\n", "", "except", "KeyError", ":", "\n", "    ", "state", "=", "tmp", "[", "'model_state'", "]", "\n", "", "state_disentangle", "=", "state", "\n", "print", "(", "'\\n'", ")", "\n", "print", "(", "'state_disentangle:'", ",", "state_disentangle", ".", "keys", "(", ")", ")", "\n", "for", "i", ",", "key", "in", "enumerate", "(", "state_keys", ")", ":", "\n", "      ", "if", "(", "\"disentangle_model.\"", "in", "key", ")", ":", "\n", "          ", "newkey", "=", "key", ".", "replace", "(", "\"disentangle_model.\"", ",", "\"\"", ")", "\n", "state_disentangle", "[", "newkey", "]", "=", "state_disentangle", ".", "pop", "(", "key", ")", "\n", "", "else", ":", "\n", "          ", "state_disentangle", ".", "pop", "(", "key", ")", "\n", "", "", "print", "(", "'disentangle state keys:'", ",", "list", "(", "state_disentangle", ".", "keys", "(", ")", ")", ",", "len", "(", "list", "(", "state_disentangle", ".", "keys", "(", ")", ")", ")", ")", "\n", "model_disentangle", ".", "load_state_dict", "(", "state_disentangle", ")", "\n", "model_disentangle", ".", "eval", "(", ")", "\n", "print", "(", "'len check:'", ",", "len", "(", "list", "(", "state_backbone", ".", "keys", "(", ")", ")", ")", "+", "len", "(", "list", "(", "state_disentangle", ".", "keys", "(", ")", ")", ")", ",", "len", "(", "state_keys", ")", ")", "\n", "\n", "# save feature file", "\n", "print", "(", "'  extract and save features...'", ")", "\n", "featurefile", "=", "params", ".", "ckp_path", ".", "replace", "(", "'checkpoints'", ",", "'features'", ")", ".", "replace", "(", "'tar'", ",", "'hdf5'", ")", "\n", "dirname", "=", "os", ".", "path", ".", "dirname", "(", "featurefile", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "dirname", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "dirname", ")", "\n", "", "save_features", "(", "model", ",", "model_disentangle", ",", "data_loader", ",", "featurefile", ")", "\n", "\n", "\n", "\n", "print", "(", "'\\nStage 2: evaluate'", ")", "\n", "acc_all", "=", "[", "]", "\n", "iter_num", "=", "1000", "\n", "few_shot_params", "=", "dict", "(", "n_way", "=", "params", ".", "test_n_way", ",", "n_support", "=", "params", ".", "n_shot", ")", "\n", "# model", "\n", "print", "(", "'  build metric-based model'", ")", "\n", "if", "params", ".", "stage", "==", "'pretrain'", ":", "\n", "    ", "model", "=", "ProtoNet", "(", "model_dict", "[", "params", ".", "model", "]", ",", "**", "few_shot_params", ")", "\n", "", "elif", "params", ".", "stage", "==", "'metatrain'", ":", "\n", "    ", "model", "=", "MetaFDMixup", "(", "model_dict", "[", "params", ".", "model", "]", ",", "**", "few_shot_params", ")", "\n", "# load model", "\n", "tmp", "=", "torch", ".", "load", "(", "params", ".", "ckp_path", ")", "\n", "model", ".", "load_state_dict", "(", "tmp", "[", "'state'", "]", ")", "\n", "\n", "", "model", "=", "model", ".", "cuda", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "\n", "# load feature file", "\n", "print", "(", "'  load saved feature file'", ")", "\n", "cl_data_file", "=", "feat_loader", ".", "init_loader", "(", "featurefile", ")", "\n", "\n", "# start evaluate", "\n", "print", "(", "'  evaluate'", ")", "\n", "for", "i", "in", "range", "(", "iter_num", ")", ":", "\n", "    ", "acc", "=", "feature_evaluation", "(", "cl_data_file", ",", "model", ",", "n_query", "=", "15", ",", "**", "few_shot_params", ")", "\n", "acc_all", ".", "append", "(", "acc", ")", "\n", "\n", "# statics", "\n", "", "print", "(", "'  get statics'", ")", "\n", "acc_all", "=", "np", ".", "asarray", "(", "acc_all", ")", "\n", "acc_mean", "=", "np", ".", "mean", "(", "acc_all", ")", "\n", "acc_std", "=", "np", ".", "std", "(", "acc_all", ")", "\n", "print", "(", "'  %d test iterations: Acc = %4.2f%% +- %4.2f%%'", "%", "(", "iter_num", ",", "acc_mean", ",", "1.96", "*", "acc_std", "/", "np", ".", "sqrt", "(", "iter_num", ")", ")", ")", "\n", "\n", "# remove feature files [optional]", "\n", "if", "remove_featurefile", ":", "\n", "    ", "os", ".", "remove", "(", "featurefile", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.None.mixup.mixup_data": [[4, 15], ["numpy.random.beta", "x_1.size"], "function", ["None"], ["def", "mixup_data", "(", "x_1", ",", "x_2", ",", "alpha", "=", "1.0", ")", ":", "\n", "    ", "'''Returns mixed inputs, pairs of targets, and lambda'''", "\n", "if", "alpha", ">", "0", ":", "\n", "        ", "lam", "=", "np", ".", "random", ".", "beta", "(", "alpha", ",", "alpha", ")", "\n", "", "else", ":", "\n", "        ", "lam", "=", "1", "\n", "\n", "", "batch_size", "=", "x_1", ".", "size", "(", ")", "[", "0", "]", "\n", "mixed_x", "=", "lam", "*", "x_1", "+", "(", "1", "-", "lam", ")", "*", "x_2", "\n", "\n", "return", "mixed_x", ",", "lam", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.None.network_train.train": [[19, 69], ["range", "torch.optim.Adam", "torch.optim.Adam", "os.path.isdir", "os.makedirs", "model.train", "model.eval", "model.test_loop", "model.parameters", "torch.optim.Adam", "torch.optim.Adam", "model.train_loop", "print", "os.path.join", "torch.save", "torch.save", "print", "os.path.join", "torch.save", "torch.save", "model.train_loop", "model.state_dict", "model.state_dict", "model.feature.parameters", "model.disentangle_model.fc1.parameters", "model.disentangle_model.bn1.parameters", "model.disentangle_model.fc21a.parameters", "model.disentangle_model.fc22a.parameters", "model.disentangle_model.fc21b.parameters", "model.disentangle_model.fc22b.parameters", "model.fc.parameters", "model.domain_model.parameters", "model.gnn.parameters"], "function", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.None.network_train.train", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_template.MetaTemplate.test_loop", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_template.MetaTemplate.train_loop", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_template.MetaTemplate.train_loop"], ["def", "train", "(", "base_loader", ",", "val_loader", ",", "model", ",", "start_epoch", ",", "stop_epoch", ",", "params", ",", "labeled_target_loader", "=", "None", ")", ":", "\n", "# get optimizer and checkpoint path", "\n", "  ", "if", "(", "params", ".", "stage", "==", "'pretrain'", ")", ":", "\n", "      ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ")", "\n", "\n", "", "elif", "(", "params", ".", "stage", "==", "'metatrain'", ")", ":", "\n", "      ", "lr_new", "=", "0.002", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "{", "'params'", ":", "model", ".", "feature", ".", "parameters", "(", ")", "}", ",", "\n", "{", "'params'", ":", "model", ".", "disentangle_model", ".", "fc1", ".", "parameters", "(", ")", "}", ",", "\n", "{", "'params'", ":", "model", ".", "disentangle_model", ".", "bn1", ".", "parameters", "(", ")", "}", ",", "\n", "{", "'params'", ":", "model", ".", "disentangle_model", ".", "fc21a", ".", "parameters", "(", ")", "}", ",", "\n", "{", "'params'", ":", "model", ".", "disentangle_model", ".", "fc22a", ".", "parameters", "(", ")", "}", ",", "\n", "\n", "{", "'params'", ":", "model", ".", "disentangle_model", ".", "fc21b", ".", "parameters", "(", ")", ",", "'lr'", ":", "lr_new", "}", ",", "\n", "{", "'params'", ":", "model", ".", "disentangle_model", ".", "fc22b", ".", "parameters", "(", ")", ",", "'lr'", ":", "lr_new", "}", ",", "\n", "{", "'params'", ":", "model", ".", "fc", ".", "parameters", "(", ")", ",", "'lr'", ":", "lr_new", "}", ",", "\n", "{", "'params'", ":", "model", ".", "domain_model", ".", "parameters", "(", ")", ",", "'lr'", ":", "lr_new", "}", ",", "\n", "{", "'params'", ":", "model", ".", "gnn", ".", "parameters", "(", ")", ",", "'lr'", ":", "lr_new", "}", "]", ",", "\n", "lr", "=", "1e-3", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "params", ".", "checkpoint_dir", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "params", ".", "checkpoint_dir", ")", "\n", "\n", "# for validation", "\n", "", "max_acc", "=", "0", "\n", "total_it", "=", "0", "\n", "\n", "# start", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "stop_epoch", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "if", "(", "params", ".", "stage", "==", "'pretrain'", ")", ":", "\n", "        ", "total_it", "=", "model", ".", "train_loop", "(", "epoch", ",", "base_loader", ",", "optimizer", ",", "total_it", ")", "#model are called by reference, no need to return", "\n", "", "elif", "(", "params", ".", "stage", "==", "'metatrain'", ")", ":", "\n", "        ", "total_it", "=", "model", ".", "train_loop", "(", "epoch", ",", "base_loader", ",", "labeled_target_loader", ",", "optimizer", ",", "total_it", ")", "#model are called by reference, no need to return", "\n", "", "model", ".", "eval", "(", ")", "\n", "\n", "acc", "=", "model", ".", "test_loop", "(", "val_loader", ")", "\n", "if", "acc", ">", "max_acc", ":", "\n", "      ", "print", "(", "\"best model! save...\"", ")", "\n", "max_acc", "=", "acc", "\n", "outfile", "=", "os", ".", "path", ".", "join", "(", "params", ".", "checkpoint_dir", ",", "'best_model.tar'", ")", "\n", "torch", ".", "save", "(", "{", "'epoch'", ":", "epoch", ",", "'state'", ":", "model", ".", "state_dict", "(", ")", "}", ",", "outfile", ")", "\n", "", "else", ":", "\n", "      ", "print", "(", "\"GG! best accuracy {:f}\"", ".", "format", "(", "max_acc", ")", ")", "\n", "\n", "", "if", "(", "(", "epoch", "+", "1", ")", "%", "params", ".", "save_freq", "==", "0", ")", "or", "(", "epoch", "==", "stop_epoch", "-", "1", ")", ":", "\n", "      ", "outfile", "=", "os", ".", "path", ".", "join", "(", "params", ".", "checkpoint_dir", ",", "'{:d}.tar'", ".", "format", "(", "epoch", ")", ")", "\n", "torch", ".", "save", "(", "{", "'epoch'", ":", "epoch", ",", "'state'", ":", "model", ".", "state_dict", "(", ")", "}", ",", "outfile", ")", "\n", "\n", "", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.None.utils.one_hot": [[4, 6], ["torch.zeros().scatter_", "y.unsqueeze", "torch.zeros", "len"], "function", ["None"], ["def", "one_hot", "(", "y", ",", "num_class", ")", ":", "\n", "    ", "return", "torch", ".", "zeros", "(", "(", "len", "(", "y", ")", ",", "num_class", ")", ")", ".", "scatter_", "(", "1", ",", "y", ".", "unsqueeze", "(", "1", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.None.utils.DBindex": [[7, 24], ["cl_data_file.keys", "len", "numpy.tile", "numpy.transpose", "numpy.sqrt", "range", "numpy.mean", "cl_means.append", "stds.append", "numpy.expand_dims", "numpy.sum", "DBs.append", "numpy.mean", "numpy.sqrt", "numpy.array", "len", "numpy.square", "numpy.max", "numpy.mean", "numpy.sum", "numpy.square", "range"], "function", ["None"], ["", "def", "DBindex", "(", "cl_data_file", ")", ":", "\n", "    ", "class_list", "=", "cl_data_file", ".", "keys", "(", ")", "\n", "cl_num", "=", "len", "(", "class_list", ")", "\n", "cl_means", "=", "[", "]", "\n", "stds", "=", "[", "]", "\n", "DBs", "=", "[", "]", "\n", "for", "cl", "in", "class_list", ":", "\n", "        ", "cl_means", ".", "append", "(", "np", ".", "mean", "(", "cl_data_file", "[", "cl", "]", ",", "axis", "=", "0", ")", ")", "\n", "stds", ".", "append", "(", "np", ".", "sqrt", "(", "np", ".", "mean", "(", "np", ".", "sum", "(", "np", ".", "square", "(", "cl_data_file", "[", "cl", "]", "-", "cl_means", "[", "-", "1", "]", ")", ",", "axis", "=", "1", ")", ")", ")", ")", "\n", "\n", "", "mu_i", "=", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "np", ".", "array", "(", "cl_means", ")", ",", "axis", "=", "0", ")", ",", "(", "len", "(", "class_list", ")", ",", "1", ",", "1", ")", ")", "\n", "mu_j", "=", "np", ".", "transpose", "(", "mu_i", ",", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "mdists", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "square", "(", "mu_i", "-", "mu_j", ")", ",", "axis", "=", "2", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "cl_num", ")", ":", "\n", "        ", "DBs", ".", "append", "(", "np", ".", "max", "(", "[", "(", "stds", "[", "i", "]", "+", "stds", "[", "j", "]", ")", "/", "mdists", "[", "i", ",", "j", "]", "for", "j", "in", "range", "(", "cl_num", ")", "if", "j", "!=", "i", "]", ")", ")", "\n", "", "return", "np", ".", "mean", "(", "DBs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.None.utils.sparsity": [[25, 32], ["cl_data_file.keys", "numpy.mean", "cl_sparsity.append", "numpy.mean", "numpy.sum"], "function", ["None"], ["", "def", "sparsity", "(", "cl_data_file", ")", ":", "\n", "    ", "class_list", "=", "cl_data_file", ".", "keys", "(", ")", "\n", "cl_sparsity", "=", "[", "]", "\n", "for", "cl", "in", "class_list", ":", "\n", "        ", "cl_sparsity", ".", "append", "(", "np", ".", "mean", "(", "[", "np", ".", "sum", "(", "x", "!=", "0", ")", "for", "x", "in", "cl_data_file", "[", "cl", "]", "]", ")", ")", "\n", "\n", "", "return", "np", ".", "mean", "(", "cl_sparsity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.None.utils.load_state_to_the_backbone": [[34, 47], ["model.state_dict", "range", "model.load_state_dict", "print", "len", "list", "list", "list", "model_state[].size", "tmp_state[].size", "tmp_state.keys", "model.state_dict.keys", "tmp_state.keys"], "function", ["None"], ["", "def", "load_state_to_the_backbone", "(", "model", ",", "tmp", ")", ":", "\n", "    ", "model_state", "=", "model", ".", "state_dict", "(", ")", "\n", "tmp_state", "=", "tmp", "[", "'state'", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "list", "(", "tmp_state", ".", "keys", "(", ")", ")", ")", ")", ":", "\n", "        ", "model_key", "=", "list", "(", "model_state", ".", "keys", "(", ")", ")", "[", "i", "]", "\n", "tmp_key", "=", "list", "(", "tmp_state", ".", "keys", "(", ")", ")", "[", "i", "]", "\n", "#print('key:', model_key, tmp_key)", "\n", "if", "(", "model_state", "[", "model_key", "]", ".", "size", "(", ")", "==", "tmp_state", "[", "tmp_key", "]", ".", "size", "(", ")", ")", ":", "\n", "#print('true')", "\n", "            ", "model_state", "[", "model_key", "]", "=", "tmp_state", "[", "tmp_key", "]", "\n", "", "", "model", ".", "load_state_dict", "(", "model_state", ")", "\n", "print", "(", "'model loaded.'", ")", "\n", "return", "\n", "", ""]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.data.additional_transforms.ImageJitter.__init__": [[15, 17], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "transformdict", ")", ":", "\n", "    ", "self", ".", "transforms", "=", "[", "(", "transformtypedict", "[", "k", "]", ",", "transformdict", "[", "k", "]", ")", "for", "k", "in", "transformdict", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.data.additional_transforms.ImageJitter.__call__": [[18, 27], ["torch.rand", "enumerate", "len", "transformer().enhance().convert", "transformer().enhance", "transformer"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "    ", "out", "=", "img", "\n", "randtensor", "=", "torch", ".", "rand", "(", "len", "(", "self", ".", "transforms", ")", ")", "\n", "\n", "for", "i", ",", "(", "transformer", ",", "alpha", ")", "in", "enumerate", "(", "self", ".", "transforms", ")", ":", "\n", "      ", "r", "=", "alpha", "*", "(", "randtensor", "[", "i", "]", "*", "2.0", "-", "1.0", ")", "+", "1", "\n", "out", "=", "transformer", "(", "out", ")", ".", "enhance", "(", "r", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.data.feature_loader.SimpleHDF5Dataset.__init__": [[6, 17], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "file_handle", "=", "None", ")", ":", "\n", "    ", "if", "file_handle", "==", "None", ":", "\n", "      ", "self", ".", "f", "=", "''", "\n", "self", ".", "all_feats_dset", "=", "[", "]", "\n", "self", ".", "all_labels", "=", "[", "]", "\n", "self", ".", "total", "=", "0", "\n", "", "else", ":", "\n", "      ", "self", ".", "f", "=", "file_handle", "\n", "self", ".", "all_feats_dset", "=", "self", ".", "f", "[", "'all_feats'", "]", "[", "...", "]", "\n", "self", ".", "all_labels", "=", "self", ".", "f", "[", "'all_labels'", "]", "[", "...", "]", "\n", "self", ".", "total", "=", "self", ".", "f", "[", "'count'", "]", "[", "0", "]", "\n", "", "", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.data.feature_loader.SimpleHDF5Dataset.__getitem__": [[17, 19], ["torch.Tensor", "int"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "    ", "return", "torch", ".", "Tensor", "(", "self", ".", "all_feats_dset", "[", "i", ",", ":", "]", ")", ",", "int", "(", "self", ".", "all_labels", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.data.feature_loader.SimpleHDF5Dataset.__len__": [[20, 22], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.data.feature_loader.init_loader": [[24, 44], ["numpy.unique().tolist", "range", "h5py.File", "feature_loader.SimpleHDF5Dataset", "numpy.sum", "numpy.delete", "numpy.delete", "len", "cl_data_file[].append", "numpy.unique", "numpy.array"], "function", ["None"], ["", "", "def", "init_loader", "(", "filename", ")", ":", "\n", "  ", "with", "h5py", ".", "File", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "    ", "fileset", "=", "SimpleHDF5Dataset", "(", "f", ")", "\n", "\n", "", "feats", "=", "fileset", ".", "all_feats_dset", "\n", "labels", "=", "fileset", ".", "all_labels", "\n", "while", "np", ".", "sum", "(", "feats", "[", "-", "1", "]", ")", "==", "0", ":", "\n", "    ", "feats", "=", "np", ".", "delete", "(", "feats", ",", "-", "1", ",", "axis", "=", "0", ")", "\n", "labels", "=", "np", ".", "delete", "(", "labels", ",", "-", "1", ",", "axis", "=", "0", ")", "\n", "\n", "", "class_list", "=", "np", ".", "unique", "(", "np", ".", "array", "(", "labels", ")", ")", ".", "tolist", "(", ")", "\n", "inds", "=", "range", "(", "len", "(", "labels", ")", ")", "\n", "\n", "cl_data_file", "=", "{", "}", "\n", "for", "cl", "in", "class_list", ":", "\n", "    ", "cl_data_file", "[", "cl", "]", "=", "[", "]", "\n", "", "for", "ind", "in", "inds", ":", "\n", "    ", "cl_data_file", "[", "labels", "[", "ind", "]", "]", ".", "append", "(", "feats", "[", "ind", "]", ")", "\n", "\n", "", "return", "cl_data_file", "\n", "", ""]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.data.dataset.SimpleDataset.__init__": [[14, 19], ["open", "json.load"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "data_file", ",", "transform", ",", "target_transform", "=", "identity", ")", ":", "\n", "    ", "with", "open", "(", "data_file", ",", "'r'", ")", "as", "f", ":", "\n", "      ", "self", ".", "meta", "=", "json", ".", "load", "(", "f", ")", "\n", "", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.data.dataset.SimpleDataset.__getitem__": [[20, 28], ["os.path.join", "PIL.Image.open().convert", "dataset.SimpleDataset.transform", "dataset.SimpleDataset.target_transform", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "    ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "meta", "[", "'image_names'", "]", "[", "i", "]", ")", "\n", "\n", "#image_path = image_path[:12]+'2'+image_path[13:]", "\n", "img", "=", "Image", ".", "open", "(", "image_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "target", "=", "self", ".", "target_transform", "(", "self", ".", "meta", "[", "'image_labels'", "]", "[", "i", "]", ")", "\n", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.data.dataset.SimpleDataset.__len__": [[29, 31], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "meta", "[", "'image_names'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.data.dataset.RandomLabeledTargetDataset.__init__": [[35, 42], ["open", "json.load", "open", "json.load"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "data_file", ",", "data_file_miniImagenet", ",", "transform", ",", "target_transform", "=", "identity", ")", ":", "\n", "    ", "with", "open", "(", "data_file", ",", "'r'", ")", "as", "f", ":", "\n", "      ", "self", ".", "meta", "=", "json", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "data_file_miniImagenet", ",", "'r'", ")", "as", "f_miniI", ":", "\n", "      ", "self", ".", "meta_miniImagenet", "=", "json", ".", "load", "(", "f_miniI", ")", "\n", "", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.data.dataset.RandomLabeledTargetDataset.__getitem__": [[43, 52], ["random.randint", "PIL.Image.open().convert", "dataset.RandomLabeledTargetDataset.transform", "dataset.RandomLabeledTargetDataset.target_transform", "len", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "    ", "idx", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "meta", "[", "'image_names'", "]", ")", "-", "1", ")", "\n", "image_path", "=", "self", ".", "meta", "[", "'image_names'", "]", "[", "idx", "]", "\n", "\n", "#image_path = image_path[:12]+'2'+image_path[13:] ", "\n", "img", "=", "Image", ".", "open", "(", "image_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "target", "=", "self", ".", "target_transform", "(", "self", ".", "meta", "[", "'image_labels'", "]", "[", "idx", "]", ")", "\n", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.data.dataset.RandomLabeledTargetDataset.__len__": [[53, 56], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "#return len(self.meta['image_names'])", "\n", "    ", "return", "len", "(", "self", ".", "meta_miniImagenet", "[", "'image_names'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.data.dataset.SetDataset.__init__": [[59, 80], ["numpy.unique().tolist", "zip", "dict", "open", "json.load", "dataset.SetDataset.sub_meta[].append", "dataset.SubDataset", "dataset.SetDataset.sub_dataloader.append", "numpy.unique", "torch.utils.data.DataLoader"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "data_file", ",", "batch_size", ",", "transform", ")", ":", "\n", "    ", "with", "open", "(", "data_file", ",", "'r'", ")", "as", "f", ":", "\n", "      ", "self", ".", "meta", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "self", ".", "cl_list", "=", "np", ".", "unique", "(", "self", ".", "meta", "[", "'image_labels'", "]", ")", ".", "tolist", "(", ")", "\n", "\n", "self", ".", "sub_meta", "=", "{", "}", "\n", "for", "cl", "in", "self", ".", "cl_list", ":", "\n", "      ", "self", ".", "sub_meta", "[", "cl", "]", "=", "[", "]", "\n", "\n", "", "for", "x", ",", "y", "in", "zip", "(", "self", ".", "meta", "[", "'image_names'", "]", ",", "self", ".", "meta", "[", "'image_labels'", "]", ")", ":", "\n", "      ", "self", ".", "sub_meta", "[", "y", "]", ".", "append", "(", "x", ")", "\n", "\n", "", "self", ".", "sub_dataloader", "=", "[", "]", "\n", "sub_data_loader_params", "=", "dict", "(", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "0", ",", "#use main thread only or may receive multiple batches", "\n", "pin_memory", "=", "False", ")", "\n", "for", "cl", "in", "self", ".", "cl_list", ":", "\n", "      ", "sub_dataset", "=", "SubDataset", "(", "self", ".", "sub_meta", "[", "cl", "]", ",", "cl", ",", "transform", "=", "transform", ")", "\n", "self", ".", "sub_dataloader", ".", "append", "(", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "sub_dataset", ",", "**", "sub_data_loader_params", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.data.dataset.SetDataset.__getitem__": [[81, 83], ["next", "iter"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "    ", "return", "next", "(", "iter", "(", "self", ".", "sub_dataloader", "[", "i", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.data.dataset.SetDataset.__len__": [[84, 86], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "cl_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.data.dataset.MultiSetDataset.__init__": [[89, 114], ["numpy.array", "numpy.unique().tolist", "numpy.concatenate", "zip", "dict", "dataset.MultiSetDataset.n_classes.append", "open", "json.load", "sub_meta[].append", "dataset.SubDataset", "dataset.MultiSetDataset.sub_dataloader.append", "len", "numpy.unique", "torch.utils.data.DataLoader"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "data_files", ",", "batch_size", ",", "transform", ")", ":", "\n", "    ", "self", ".", "cl_list", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "self", ".", "sub_dataloader", "=", "[", "]", "\n", "self", ".", "n_classes", "=", "[", "]", "\n", "for", "data_file", "in", "data_files", ":", "\n", "      ", "with", "open", "(", "data_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "meta", "=", "json", ".", "load", "(", "f", ")", "\n", "", "cl_list", "=", "np", ".", "unique", "(", "meta", "[", "'image_labels'", "]", ")", ".", "tolist", "(", ")", "\n", "self", ".", "cl_list", "=", "np", ".", "concatenate", "(", "(", "self", ".", "cl_list", ",", "cl_list", ")", ")", "\n", "\n", "sub_meta", "=", "{", "}", "\n", "for", "cl", "in", "cl_list", ":", "\n", "        ", "sub_meta", "[", "cl", "]", "=", "[", "]", "\n", "\n", "", "for", "x", ",", "y", "in", "zip", "(", "meta", "[", "'image_names'", "]", ",", "meta", "[", "'image_labels'", "]", ")", ":", "\n", "        ", "sub_meta", "[", "y", "]", ".", "append", "(", "x", ")", "\n", "\n", "", "sub_data_loader_params", "=", "dict", "(", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "0", ",", "#use main thread only or may receive multiple batches", "\n", "pin_memory", "=", "False", ")", "\n", "for", "cl", "in", "cl_list", ":", "\n", "        ", "sub_dataset", "=", "SubDataset", "(", "sub_meta", "[", "cl", "]", ",", "cl", ",", "transform", "=", "transform", ",", "min_size", "=", "batch_size", ")", "\n", "self", ".", "sub_dataloader", ".", "append", "(", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "sub_dataset", ",", "**", "sub_data_loader_params", ")", ")", "\n", "", "self", ".", "n_classes", ".", "append", "(", "len", "(", "cl_list", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.data.dataset.MultiSetDataset.__getitem__": [[115, 117], ["next", "iter"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "    ", "return", "next", "(", "iter", "(", "self", ".", "sub_dataloader", "[", "i", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.data.dataset.MultiSetDataset.__len__": [[118, 120], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "cl_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.data.dataset.MultiSetDataset.lens": [[121, 123], ["None"], "methods", ["None"], ["", "def", "lens", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "n_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.data.dataset.SubDataset.__init__": [[126, 134], ["torchvision.ToTensor", "len", "[].tolist", "len", "range", "numpy.array"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "sub_meta", ",", "cl", ",", "transform", "=", "transforms", ".", "ToTensor", "(", ")", ",", "target_transform", "=", "identity", ",", "min_size", "=", "50", ")", ":", "\n", "    ", "self", ".", "sub_meta", "=", "sub_meta", "\n", "self", ".", "cl", "=", "cl", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "if", "len", "(", "self", ".", "sub_meta", ")", "<", "min_size", ":", "\n", "      ", "idxs", "=", "[", "i", "%", "len", "(", "self", ".", "sub_meta", ")", "for", "i", "in", "range", "(", "min_size", ")", "]", "\n", "self", ".", "sub_meta", "=", "np", ".", "array", "(", "self", ".", "sub_meta", ")", "[", "idxs", "]", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.data.dataset.SubDataset.__getitem__": [[135, 145], ["os.path.join", "PIL.Image.open().convert", "dataset.SubDataset.transform", "dataset.SubDataset.target_transform", "PIL.Image.open"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "#print('sub dataset:')", "\n", "    ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "sub_meta", "[", "i", "]", ")", "\n", "#print(image_path)", "\n", "#image_path = image_path[:12]+'2'+image_path[13:] ", "\n", "\n", "img", "=", "Image", ".", "open", "(", "image_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "target", "=", "self", ".", "target_transform", "(", "self", ".", "cl", ")", "\n", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.data.dataset.SubDataset.__len__": [[146, 148], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "sub_meta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.data.dataset.EpisodicBatchSampler.__init__": [[151, 155], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "n_classes", ",", "n_way", ",", "n_episodes", ")", ":", "\n", "    ", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "n_way", "=", "n_way", "\n", "self", ".", "n_episodes", "=", "n_episodes", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.data.dataset.EpisodicBatchSampler.__len__": [[156, 158], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "n_episodes", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.data.dataset.EpisodicBatchSampler.__iter__": [[159, 162], ["range", "torch.randperm"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "self", ".", "n_episodes", ")", ":", "\n", "      ", "yield", "torch", ".", "randperm", "(", "self", ".", "n_classes", ")", "[", ":", "self", ".", "n_way", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.data.dataset.MultiEpisodicBatchSampler.__init__": [[165, 170], ["len"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "n_classes", ",", "n_way", ",", "n_episodes", ")", ":", "\n", "    ", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "n_way", "=", "n_way", "\n", "self", ".", "n_episodes", "=", "n_episodes", "\n", "self", ".", "n_domains", "=", "len", "(", "n_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.data.dataset.MultiEpisodicBatchSampler.__len__": [[171, 173], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "n_episodes", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.data.dataset.MultiEpisodicBatchSampler.__iter__": [[174, 181], ["random.shuffle", "range", "sum", "range", "torch.randperm"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "    ", "domain_list", "=", "[", "i", "%", "self", ".", "n_domains", "for", "i", "in", "range", "(", "self", ".", "n_episodes", ")", "]", "\n", "random", ".", "shuffle", "(", "domain_list", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "n_episodes", ")", ":", "\n", "      ", "domain_idx", "=", "domain_list", "[", "i", "]", "\n", "start_idx", "=", "sum", "(", "self", ".", "n_classes", "[", ":", "domain_idx", "]", ")", "\n", "yield", "torch", ".", "randperm", "(", "self", ".", "n_classes", "[", "domain_idx", "]", ")", "[", ":", "self", ".", "n_way", "]", "+", "start_idx", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.data.datamgr.TransformLoader.__init__": [[12, 18], ["dict", "dict"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "image_size", ",", "\n", "normalize_param", "=", "dict", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "jitter_param", "=", "dict", "(", "Brightness", "=", "0.4", ",", "Contrast", "=", "0.4", ",", "Color", "=", "0.4", ")", ")", ":", "\n", "    ", "self", ".", "image_size", "=", "image_size", "\n", "self", ".", "normalize_param", "=", "normalize_param", "\n", "self", ".", "jitter_param", "=", "jitter_param", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.data.datamgr.TransformLoader.parse_transform": [[19, 35], ["getattr", "data.ImageJitter", "data.ImageJitter.", "data.ImageJitter.", "data.ImageJitter.", "data.ImageJitter.", "data.ImageJitter.", "int", "int"], "methods", ["None"], ["", "def", "parse_transform", "(", "self", ",", "transform_type", ")", ":", "\n", "    ", "if", "transform_type", "==", "'ImageJitter'", ":", "\n", "      ", "method", "=", "add_transforms", ".", "ImageJitter", "(", "self", ".", "jitter_param", ")", "\n", "return", "method", "\n", "", "method", "=", "getattr", "(", "transforms", ",", "transform_type", ")", "\n", "\n", "if", "transform_type", "==", "'RandomResizedCrop'", ":", "\n", "      ", "return", "method", "(", "self", ".", "image_size", ")", "\n", "", "elif", "transform_type", "==", "'CenterCrop'", ":", "\n", "      ", "return", "method", "(", "self", ".", "image_size", ")", "\n", "", "elif", "transform_type", "==", "'Resize'", ":", "\n", "      ", "return", "method", "(", "[", "int", "(", "self", ".", "image_size", "*", "1.15", ")", ",", "int", "(", "self", ".", "image_size", "*", "1.15", ")", "]", ")", "\n", "", "elif", "transform_type", "==", "'Normalize'", ":", "\n", "      ", "return", "method", "(", "**", "self", ".", "normalize_param", ")", "\n", "", "else", ":", "\n", "      ", "return", "method", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.data.datamgr.TransformLoader.get_composed_transform": [[36, 45], ["torchvision.Compose", "datamgr.TransformLoader.parse_transform"], "methods", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.data.datamgr.TransformLoader.parse_transform"], ["", "", "def", "get_composed_transform", "(", "self", ",", "aug", "=", "False", ")", ":", "\n", "    ", "if", "aug", ":", "\n", "      ", "transform_list", "=", "[", "'RandomResizedCrop'", ",", "'ImageJitter'", ",", "'RandomHorizontalFlip'", ",", "'ToTensor'", ",", "'Normalize'", "]", "\n", "", "else", ":", "\n", "      ", "transform_list", "=", "[", "'Resize'", ",", "'CenterCrop'", ",", "'ToTensor'", ",", "'Normalize'", "]", "\n", "\n", "", "transform_funcs", "=", "[", "self", ".", "parse_transform", "(", "x", ")", "for", "x", "in", "transform_list", "]", "\n", "transform", "=", "transforms", ".", "Compose", "(", "transform_funcs", ")", "\n", "return", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.data.datamgr.LabeledTargetDataset.__init__": [[51, 59], ["print", "datamgr.TransformLoader", "datamgr.LabeledTargetDataset.trans_loader.get_composed_transform", "open", "json.load", "len"], "methods", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.data.datamgr.TransformLoader.get_composed_transform"], ["   ", "def", "__init__", "(", "self", ",", "data_file", ",", "image_size", ",", "batch_size", "=", "16", ",", "aug", "=", "True", ")", ":", "\n", "       ", "with", "open", "(", "data_file", ",", "'r'", ")", "as", "f", ":", "\n", "           ", "self", ".", "meta", "=", "json", ".", "load", "(", "f", ")", "\n", "", "print", "(", "'len of labeled target data:'", ",", "len", "(", "self", ".", "meta", "[", "'image_names'", "]", ")", ")", "\n", "# define transform", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "trans_loader", "=", "TransformLoader", "(", "image_size", ")", "\n", "self", ".", "transform", "=", "self", ".", "trans_loader", ".", "get_composed_transform", "(", "aug", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.data.datamgr.LabeledTargetDataset.get_epoch": [[60, 82], ["random.sample", "torch.stack", "torch.LongTensor", "PIL.Image.open().convert", "datamgr.LabeledTargetDataset.transform", "torch.stack.append", "torch.LongTensor.append", "range", "len", "PIL.Image.open"], "methods", ["None"], ["", "def", "get_epoch", "(", "self", ")", ":", "\n", "# return random", "\n", "       ", "idx_list", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "self", ".", "meta", "[", "'image_names'", "]", ")", ")", "]", "\n", "selected_idx_list", "=", "random", ".", "sample", "(", "idx_list", ",", "self", ".", "batch_size", ")", "\n", "\n", "img_list", "=", "[", "]", "\n", "img_label", "=", "[", "]", "\n", "\n", "for", "idx", "in", "selected_idx_list", ":", "\n", "           ", "image_path", "=", "self", ".", "meta", "[", "'image_names'", "]", "[", "idx", "]", "\n", "image_label", "=", "self", ".", "meta", "[", "'image_labels'", "]", "[", "idx", "]", "\n", "img", "=", "Image", ".", "open", "(", "image_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "img_list", ".", "append", "(", "img", ")", "\n", "img_label", ".", "append", "(", "image_label", ")", "\n", "#print(img_label)", "\n", "", "img_list", "=", "torch", ".", "stack", "(", "img_list", ")", "\n", "#img_label = torch.stack(img_label)", "\n", "img_label", "=", "torch", ".", "LongTensor", "(", "img_label", ")", "\n", "#print('img_list:', img_list.size())", "\n", "#print('img_label:', img_label.size())", "\n", "return", "img_list", ",", "img_label", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.data.datamgr.DataManager.get_data_loader": [[86, 89], ["None"], "methods", ["None"], ["  ", "@", "abstractmethod", "\n", "def", "get_data_loader", "(", "self", ",", "data_file", ",", "aug", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.data.datamgr.SimpleDataManager.__init__": [[91, 95], ["super().__init__", "datamgr.TransformLoader"], "methods", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.gnn.GNN_nl.__init__"], ["  ", "def", "__init__", "(", "self", ",", "image_size", ",", "batch_size", ")", ":", "\n", "    ", "super", "(", "SimpleDataManager", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "trans_loader", "=", "TransformLoader", "(", "image_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.data.datamgr.SimpleDataManager.get_data_loader": [[96, 103], ["datamgr.SimpleDataManager.trans_loader.get_composed_transform", "data.dataset.SimpleDataset", "dict", "torch.utils.data.DataLoader"], "methods", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.data.datamgr.TransformLoader.get_composed_transform"], ["", "def", "get_data_loader", "(", "self", ",", "data_file", ",", "aug", ")", ":", "#parameters that would change on train/val set", "\n", "    ", "transform", "=", "self", ".", "trans_loader", ".", "get_composed_transform", "(", "aug", ")", "\n", "dataset", "=", "SimpleDataset", "(", "data_file", ",", "transform", ")", "\n", "data_loader_params", "=", "dict", "(", "batch_size", "=", "self", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "4", ",", "pin_memory", "=", "True", ")", "\n", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "**", "data_loader_params", ")", "\n", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.data.datamgr.RandomLabeledTargetDataManager.__init__": [[107, 111], ["super().__init__", "datamgr.TransformLoader"], "methods", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.gnn.GNN_nl.__init__"], ["  ", "def", "__init__", "(", "self", ",", "image_size", ",", "batch_size", ")", ":", "\n", "    ", "super", "(", "RandomLabeledTargetDataManager", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "trans_loader", "=", "TransformLoader", "(", "image_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.data.datamgr.RandomLabeledTargetDataManager.get_data_loader": [[112, 119], ["datamgr.RandomLabeledTargetDataManager.trans_loader.get_composed_transform", "data.dataset.RandomLabeledTargetDataset", "dict", "torch.utils.data.DataLoader"], "methods", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.data.datamgr.TransformLoader.get_composed_transform"], ["", "def", "get_data_loader", "(", "self", ",", "data_file", ",", "data_file_miniImagenet", ",", "aug", ")", ":", "#parameters that would change on train/val set", "\n", "    ", "transform", "=", "self", ".", "trans_loader", ".", "get_composed_transform", "(", "aug", ")", "\n", "dataset", "=", "RandomLabeledTargetDataset", "(", "data_file", ",", "data_file_miniImagenet", ",", "transform", ")", "\n", "data_loader_params", "=", "dict", "(", "batch_size", "=", "self", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "4", ",", "pin_memory", "=", "True", ")", "\n", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "**", "data_loader_params", ")", "\n", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.data.datamgr.SetDataManager.__init__": [[121, 129], ["super().__init__", "datamgr.TransformLoader"], "methods", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.gnn.GNN_nl.__init__"], ["  ", "def", "__init__", "(", "self", ",", "image_size", ",", "n_way", ",", "n_support", ",", "n_query", ",", "n_eposide", "=", "100", ")", ":", "\n", "    ", "super", "(", "SetDataManager", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "image_size", "=", "image_size", "\n", "self", ".", "n_way", "=", "n_way", "\n", "self", ".", "batch_size", "=", "n_support", "+", "n_query", "\n", "self", ".", "n_eposide", "=", "n_eposide", "\n", "\n", "self", ".", "trans_loader", "=", "TransformLoader", "(", "image_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.data.datamgr.SetDataManager.get_data_loader": [[130, 141], ["datamgr.SetDataManager.trans_loader.get_composed_transform", "isinstance", "dict", "torch.utils.data.DataLoader", "data.dataset.MultiSetDataset", "data.dataset.MultiEpisodicBatchSampler", "data.dataset.SetDataset", "data.dataset.EpisodicBatchSampler", "data.dataset.SetDataset.lens", "len"], "methods", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.data.datamgr.TransformLoader.get_composed_transform", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.data.dataset.MultiSetDataset.lens"], ["", "def", "get_data_loader", "(", "self", ",", "data_file", ",", "aug", ")", ":", "#parameters that would change on train/val set", "\n", "    ", "transform", "=", "self", ".", "trans_loader", ".", "get_composed_transform", "(", "aug", ")", "\n", "if", "isinstance", "(", "data_file", ",", "list", ")", ":", "\n", "      ", "dataset", "=", "MultiSetDataset", "(", "data_file", ",", "self", ".", "batch_size", ",", "transform", ")", "\n", "sampler", "=", "MultiEpisodicBatchSampler", "(", "dataset", ".", "lens", "(", ")", ",", "self", ".", "n_way", ",", "self", ".", "n_eposide", ")", "\n", "", "else", ":", "\n", "      ", "dataset", "=", "SetDataset", "(", "data_file", ",", "self", ".", "batch_size", ",", "transform", ")", "\n", "sampler", "=", "EpisodicBatchSampler", "(", "len", "(", "dataset", ")", ",", "self", ".", "n_way", ",", "self", ".", "n_eposide", ")", "\n", "", "data_loader_params", "=", "dict", "(", "batch_sampler", "=", "sampler", ",", "num_workers", "=", "4", ")", "\n", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "**", "data_loader_params", ")", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.disentangle_module.Disentangle.__init__": [[13, 24], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.gnn.GNN_nl.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Disentangle", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "#encoder", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "512", ",", "256", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "256", ",", "momentum", "=", "0.1", ")", "\n", "\n", "self", ".", "fc21a", "=", "nn", ".", "Linear", "(", "256", ",", "64", ")", "\n", "self", ".", "fc22a", "=", "nn", ".", "Linear", "(", "256", ",", "64", ")", "\n", "self", ".", "fc21b", "=", "nn", ".", "Linear", "(", "256", ",", "64", ")", "\n", "self", ".", "fc22b", "=", "nn", ".", "Linear", "(", "256", ",", "64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.disentangle_module.Disentangle.encode": [[27, 37], ["torch.relu", "torch.relu", "disentangle_module.Disentangle.bn1", "disentangle_module.Disentangle.fc21a", "disentangle_module.Disentangle.fc22a", "disentangle_module.Disentangle.fc21b", "disentangle_module.Disentangle.fc22b", "disentangle_module.Disentangle.fc1"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ")", ":", "\n", "        ", "h1", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "fc1", "(", "x", ")", ")", ")", "\n", "\n", "# a encoder: domain irrelevant", "\n", "a_mean", ",", "a_logvar", "=", "self", ".", "fc21a", "(", "h1", ")", ",", "self", ".", "fc22a", "(", "h1", ")", "\n", "\n", "# b encoder: domain specific", "\n", "b_mean", ",", "b_logvar", "=", "self", ".", "fc21b", "(", "h1", ")", ",", "self", ".", "fc22b", "(", "h1", ")", "\n", "\n", "return", "a_mean", ",", "a_logvar", ",", "b_mean", ",", "b_logvar", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.disentangle_module.Disentangle.reparametrize": [[39, 47], ["logvar.mul().exp_", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.autograd.Variable", "torch.autograd.Variable", "torch.FloatTensor().normal_.mul().add_", "torch.FloatTensor().normal_.mul().add_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "logvar.mul", "torch.FloatTensor().normal_.mul", "torch.FloatTensor().normal_.mul", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "logvar.mul().exp_.size", "logvar.mul().exp_.size"], "methods", ["None"], ["", "def", "reparametrize", "(", "self", ",", "mu", ",", "logvar", ")", ":", "\n", "        ", "std", "=", "logvar", ".", "mul", "(", "0.5", ")", ".", "exp_", "(", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "eps", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "std", ".", "size", "(", ")", ")", ".", "normal_", "(", ")", "\n", "", "else", ":", "\n", "            ", "eps", "=", "torch", ".", "FloatTensor", "(", "std", ".", "size", "(", ")", ")", ".", "normal_", "(", ")", "\n", "", "eps", "=", "Variable", "(", "eps", ")", "\n", "return", "eps", ".", "mul", "(", "std", ")", ".", "add_", "(", "mu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.disentangle_module.Disentangle.forward": [[49, 54], ["disentangle_module.Disentangle.encode", "disentangle_module.Disentangle.reparametrize", "disentangle_module.Disentangle.reparametrize"], "methods", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.disentangle_module.Disentangle.encode", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.disentangle_module.Disentangle.reparametrize", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.disentangle_module.Disentangle.reparametrize"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "a_mu", ",", "a_logvar", ",", "b_mu", ",", "b_logvar", "=", "self", ".", "encode", "(", "x", ")", "\n", "a_fea", "=", "self", ".", "reparametrize", "(", "a_mu", ",", "a_logvar", ")", "# domain-irrelevant  (H1)", "\n", "b_fea", "=", "self", ".", "reparametrize", "(", "b_mu", ",", "b_logvar", ")", "# domain-specific    (H2)", "\n", "return", "a_fea", ",", "b_fea", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.baselinetrain.BaselineTrain.__init__": [[12, 35], ["torch.Module.__init__", "model_func", "methods.disentangle_module.Disentangle", "torch.CrossEntropyLoss", "torch.Linear", "baselinetrain.BaselineTrain.classifier.bias.data.fill_", "tensorboardX.SummaryWriter", "methods.backbone.distLinear"], "methods", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.gnn.GNN_nl.__init__"], ["  ", "def", "__init__", "(", "self", ",", "model_func", ",", "num_class", ",", "tf_path", "=", "None", ",", "loss_type", "=", "'softmax'", ")", ":", "\n", "    ", "super", "(", "BaselineTrain", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# feature encoder", "\n", "self", ".", "feature", "=", "model_func", "(", ")", "\n", "\n", "# disentnagle module", "\n", "self", ".", "disentangle_model", "=", "Disentangle", "(", ")", "\n", "\n", "self", ".", "feature", ".", "final_feat_dim", "=", "64", "\n", "\n", "if", "loss_type", "==", "'softmax'", ":", "\n", "      ", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "feature", ".", "final_feat_dim", ",", "num_class", ")", "\n", "self", ".", "classifier", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n", "", "elif", "loss_type", "==", "'dist'", ":", "\n", "      ", "self", ".", "classifier", "=", "backbone", ".", "distLinear", "(", "self", ".", "feature", ".", "final_feat_dim", ",", "num_class", ")", "\n", "\n", "", "self", ".", "loss_type", "=", "loss_type", "\n", "self", ".", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "tf_writer", "=", "SummaryWriter", "(", "log_dir", "=", "tf_path", ")", "if", "tf_path", "is", "not", "None", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.baselinetrain.BaselineTrain.forward_loss": [[37, 53], ["x.cuda.cuda.cuda", "baselinetrain.BaselineTrain.feature.forward", "baselinetrain.BaselineTrain.disentangle_model", "baselinetrain.BaselineTrain.classifier.forward", "y.cuda.cuda.cuda", "baselinetrain.BaselineTrain.loss_fn"], "methods", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.cuda", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.gnn.GNN_nl.forward", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.gnn.GNN_nl.forward", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.cuda"], ["", "def", "forward_loss", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "# forward feature extractor", "\n", "    ", "x", "=", "x", ".", "cuda", "(", ")", "\n", "x_fea", "=", "self", ".", "feature", ".", "forward", "(", "x", ")", "\n", "\n", "# forward disentangle module", "\n", "a_code", ",", "b_code", "=", "self", ".", "disentangle_model", "(", "x_fea", ")", "\n", "\n", "# forward the classifier using the domain-irrelevant a code", "\n", "CLS_scores", "=", "self", ".", "classifier", ".", "forward", "(", "a_code", ")", "\n", "\n", "# calculate loss", "\n", "y", "=", "y", ".", "cuda", "(", ")", "\n", "loss_CLS", "=", "self", ".", "loss_fn", "(", "CLS_scores", ",", "y", ")", "\n", "\n", "return", "loss_CLS", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.baselinetrain.BaselineTrain.train_loop": [[55, 73], ["enumerate", "len", "optimizer.zero_grad", "baselinetrain.BaselineTrain.forward_loss", "baselinetrain.BaselineTrain.backward", "optimizer.step", "baselinetrain.BaselineTrain.item", "print", "baselinetrain.BaselineTrain.tf_writer.add_scalar", "baselinetrain.BaselineTrain.item", "len", "float"], "methods", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.baselinetrain.BaselineTrain.forward_loss"], ["", "def", "train_loop", "(", "self", ",", "epoch", ",", "train_loader", ",", "optimizer", ",", "total_it", ")", ":", "\n", "    ", "print_freq", "=", "len", "(", "train_loader", ")", "//", "10", "\n", "avg_loss", "=", "0", "\n", "\n", "for", "i", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "      ", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", "=", "self", ".", "forward_loss", "(", "x", ",", "y", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "avg_loss", "=", "avg_loss", "+", "loss", ".", "item", "(", ")", "#data[0]", "\n", "\n", "if", "(", "i", "+", "1", ")", "%", "print_freq", "==", "0", ":", "\n", "        ", "print", "(", "'Epoch {:d} | Batch {:d}/{:d} | Loss {:f}'", ".", "format", "(", "epoch", ",", "i", "+", "1", ",", "len", "(", "train_loader", ")", ",", "avg_loss", "/", "float", "(", "i", "+", "1", ")", ")", ")", "\n", "", "if", "(", "total_it", "+", "1", ")", "%", "10", "==", "0", ":", "\n", "        ", "self", ".", "tf_writer", ".", "add_scalar", "(", "'loss'", ",", "loss", ".", "item", "(", ")", ",", "total_it", "+", "1", ")", "\n", "", "total_it", "+=", "1", "\n", "", "return", "total_it", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.baselinetrain.BaselineTrain.test_loop": [[74, 76], ["None"], "methods", ["None"], ["", "def", "test_loop", "(", "self", ",", "val_loader", ")", ":", "\n", "    ", "return", "-", "1", "#no validation, just save model during iteration", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.__init__": [[20, 44], ["methods.meta_template.MetaTemplate.__init__", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.KLDivLoss", "torch.KLDivLoss", "torch.KLDivLoss", "methods.disentangle_module.Disentangle", "methods.domain_classifier.DomainClassifier", "methods.gnn.GNN_nl", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.zeros().scatter().view", "torch.zeros().scatter().view", "torch.zeros().scatter().view", "torch.zeros().scatter().view", "torch.zeros().scatter().view", "torch.zeros().scatter().view", "torch.zeros().scatter().view", "torch.zeros().scatter().view", "torch.zeros().scatter().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "methods.backbone.Linear_fw", "methods.backbone.BatchNorm1d_fw", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.zeros().scatter", "torch.zeros().scatter", "torch.zeros().scatter", "torch.zeros().scatter", "torch.zeros().scatter", "torch.zeros().scatter", "torch.zeros().scatter", "torch.zeros().scatter", "torch.zeros().scatter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "numpy.repeat", "range", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.gnn.GNN_nl.__init__"], ["def", "__init__", "(", "self", ",", "model_func", ",", "n_way", ",", "n_support", ",", "tf_path", "=", "None", ")", ":", "\n", "    ", "super", "(", "MetaFDMixup", ",", "self", ")", ".", "__init__", "(", "model_func", ",", "n_way", ",", "n_support", ",", "tf_path", "=", "tf_path", ")", "\n", "\n", "# loss function", "\n", "self", ".", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "loss_KLD", "=", "nn", ".", "KLDivLoss", "(", ")", "\n", "\n", "# disentangle  model", "\n", "self", ".", "disentangle_model", "=", "Disentangle", "(", ")", "\n", "\n", "# DomainClassifer model", "\n", "self", ".", "domain_model", "=", "DomainClassifier", "(", ")", "\n", "\n", "# metric function", "\n", "self", ".", "feat_dim", "=", "64", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "feat_dim", ",", "128", ")", ",", "nn", ".", "BatchNorm1d", "(", "128", ",", "track_running_stats", "=", "False", ")", ")", "if", "not", "self", ".", "maml", "else", "nn", ".", "Sequential", "(", "backbone", ".", "Linear_fw", "(", "self", ".", "feat_dim", ",", "128", ")", ",", "backbone", ".", "BatchNorm1d_fw", "(", "128", ",", "track_running_stats", "=", "False", ")", ")", "\n", "self", ".", "gnn", "=", "GNN_nl", "(", "128", "+", "self", ".", "n_way", ",", "96", ",", "self", ".", "n_way", ")", "\n", "self", ".", "method", "=", "'fullmodel'", "\n", "\n", "# fix label for training the metric function   1*nw(1 + ns)*nw", "\n", "support_label", "=", "torch", ".", "from_numpy", "(", "np", ".", "repeat", "(", "range", "(", "self", ".", "n_way", ")", ",", "self", ".", "n_support", ")", ")", ".", "unsqueeze", "(", "1", ")", "\n", "support_label", "=", "torch", ".", "zeros", "(", "self", ".", "n_way", "*", "self", ".", "n_support", ",", "self", ".", "n_way", ")", ".", "scatter", "(", "1", ",", "support_label", ",", "1", ")", ".", "view", "(", "self", ".", "n_way", ",", "self", ".", "n_support", ",", "self", ".", "n_way", ")", "\n", "support_label", "=", "torch", ".", "cat", "(", "[", "support_label", ",", "torch", ".", "zeros", "(", "self", ".", "n_way", ",", "1", ",", "n_way", ")", "]", ",", "dim", "=", "1", ")", "\n", "self", ".", "support_label", "=", "support_label", ".", "view", "(", "1", ",", "-", "1", ",", "self", ".", "n_way", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.cuda": [[46, 54], ["meta_FDMixup_model.MetaFDMixup.feature.cuda", "meta_FDMixup_model.MetaFDMixup.disentangle_model.cuda", "meta_FDMixup_model.MetaFDMixup.domain_model.cuda", "meta_FDMixup_model.MetaFDMixup.fc.cuda", "meta_FDMixup_model.MetaFDMixup.gnn.cuda", "meta_FDMixup_model.MetaFDMixup.support_label.cuda"], "methods", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.cuda", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.cuda", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.cuda", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.cuda", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.cuda", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.cuda"], ["", "def", "cuda", "(", "self", ")", ":", "\n", "    ", "self", ".", "feature", ".", "cuda", "(", ")", "\n", "self", ".", "disentangle_model", ".", "cuda", "(", ")", "\n", "self", ".", "domain_model", ".", "cuda", "(", ")", "\n", "self", ".", "fc", ".", "cuda", "(", ")", "\n", "self", ".", "gnn", ".", "cuda", "(", ")", "\n", "self", ".", "support_label", "=", "self", ".", "support_label", ".", "cuda", "(", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.set_forward": [[56, 74], ["x.view.view.cuda", "meta_FDMixup_model.MetaFDMixup.forward_gnn", "meta_FDMixup_model.MetaFDMixup.fc", "z.view.view.view", "x.view.view.view", "meta_FDMixup_model.MetaFDMixup.fc", "z.view.view.view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "z_stack[].size", "x.view.view.size", "x.view.view.view", "z.view.view.size", "meta_FDMixup_model.MetaFDMixup.feature", "z.view.view.size", "z.view.view.size", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x.view.view.size", "x.view.view.size"], "methods", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.cuda", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.forward_gnn"], ["", "def", "set_forward", "(", "self", ",", "x", ",", "is_feature", "=", "False", ")", ":", "\n", "    ", "x", "=", "x", ".", "cuda", "(", ")", "\n", "\n", "if", "is_feature", ":", "\n", "# reshape the feature tensor: n_way * n_s + 15 * f", "\n", "      ", "assert", "(", "x", ".", "size", "(", "1", ")", "==", "self", ".", "n_support", "+", "15", ")", "\n", "z", "=", "self", ".", "fc", "(", "x", ".", "view", "(", "-", "1", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", ")", "\n", "z", "=", "z", ".", "view", "(", "self", ".", "n_way", ",", "-", "1", ",", "z", ".", "size", "(", "1", ")", ")", "\n", "", "else", ":", "\n", "# get feature using encoder", "\n", "      ", "x", "=", "x", ".", "view", "(", "-", "1", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "z", "=", "self", ".", "fc", "(", "self", ".", "feature", "(", "x", ")", ")", "\n", "z", "=", "z", ".", "view", "(", "self", ".", "n_way", ",", "-", "1", ",", "z", ".", "size", "(", "1", ")", ")", "\n", "# stack the feature for metric function: n_way * n_s + n_q * f -> n_q * [1 * n_way(n_s + 1) * f]", "\n", "", "z_stack", "=", "[", "torch", ".", "cat", "(", "[", "z", "[", ":", ",", ":", "self", ".", "n_support", "]", ",", "z", "[", ":", ",", "self", ".", "n_support", "+", "i", ":", "self", ".", "n_support", "+", "i", "+", "1", "]", "]", ",", "dim", "=", "1", ")", ".", "view", "(", "1", ",", "-", "1", ",", "z", ".", "size", "(", "2", ")", ")", "for", "i", "in", "range", "(", "self", ".", "n_query", ")", "]", "\n", "assert", "(", "z_stack", "[", "0", "]", ".", "size", "(", "1", ")", "==", "self", ".", "n_way", "*", "(", "self", ".", "n_support", "+", "1", ")", ")", "\n", "scores", "=", "self", ".", "forward_gnn", "(", "z_stack", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.forward_gnn": [[76, 84], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "meta_FDMixup_model.MetaFDMixup.gnn", "[].permute().contiguous().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "[].permute().contiguous", "[].permute", "[].permute().contiguous().view.view"], "methods", ["None"], ["", "def", "forward_gnn", "(", "self", ",", "zs", ")", ":", "\n", "# gnn inp: n_q * n_way(n_s + 1) * f", "\n", "    ", "nodes", "=", "torch", ".", "cat", "(", "[", "torch", ".", "cat", "(", "[", "z", ",", "self", ".", "support_label", "]", ",", "dim", "=", "2", ")", "for", "z", "in", "zs", "]", ",", "dim", "=", "0", ")", "\n", "scores", "=", "self", ".", "gnn", "(", "nodes", ")", "\n", "\n", "# n_q * n_way(n_s + 1) * n_way -> (n_way * n_q) * n_way", "\n", "scores", "=", "scores", ".", "view", "(", "self", ".", "n_query", ",", "self", ".", "n_way", ",", "self", ".", "n_support", "+", "1", ",", "self", ".", "n_way", ")", "[", ":", ",", ":", ",", "-", "1", "]", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "self", ".", "n_way", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.set_forward_loss_init": [[85, 91], ["torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "y_query.cuda.cuda.cuda", "meta_FDMixup_model.MetaFDMixup.set_forward", "meta_FDMixup_model.MetaFDMixup.loss_fn", "numpy.repeat", "range"], "methods", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.cuda", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_template.MetaTemplate.set_forward"], ["", "def", "set_forward_loss_init", "(", "self", ",", "x", ")", ":", "\n", "    ", "y_query", "=", "torch", ".", "from_numpy", "(", "np", ".", "repeat", "(", "range", "(", "self", ".", "n_way", ")", ",", "self", ".", "n_query", ")", ")", "\n", "y_query", "=", "y_query", ".", "cuda", "(", ")", "\n", "scores", "=", "self", ".", "set_forward", "(", "x", ")", "\n", "loss", "=", "self", ".", "loss_fn", "(", "scores", ",", "y_query", ")", "\n", "return", "scores", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.set_forward_loss_for_test": [[92, 103], ["torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "y_query.cuda.cuda.cuda", "meta_FDMixup_model.MetaFDMixup.set_forward_feature_extractor", "meta_FDMixup_model.MetaFDMixup.disentangle_model", "meta_FDMixup_model.MetaFDMixup.fc", "z.view.view.view", "meta_FDMixup_model.MetaFDMixup.forward_gnn", "meta_FDMixup_model.MetaFDMixup.loss_fn", "numpy.repeat", "z.view.view.size", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "range", "z.view.view.size", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.cuda", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.set_forward_feature_extractor", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.forward_gnn"], ["", "def", "set_forward_loss_for_test", "(", "self", ",", "x", ")", ":", "\n", "    ", "y_query", "=", "torch", ".", "from_numpy", "(", "np", ".", "repeat", "(", "range", "(", "self", ".", "n_way", ")", ",", "self", ".", "n_query", ")", ")", "\n", "y_query", "=", "y_query", ".", "cuda", "(", ")", "\n", "x_fea", "=", "self", ".", "set_forward_feature_extractor", "(", "x", ")", "\n", "a_code", ",", "b_code", "=", "self", ".", "disentangle_model", "(", "x_fea", ")", "\n", "z", "=", "self", ".", "fc", "(", "a_code", ")", "\n", "z", "=", "z", ".", "view", "(", "self", ".", "n_way", ",", "-", "1", ",", "z", ".", "size", "(", "1", ")", ")", "\n", "z_stack", "=", "[", "torch", ".", "cat", "(", "[", "z", "[", ":", ",", ":", "self", ".", "n_support", "]", ",", "z", "[", ":", ",", "self", ".", "n_support", "+", "i", ":", "self", ".", "n_support", "+", "i", "+", "1", "]", "]", ",", "dim", "=", "1", ")", ".", "view", "(", "1", ",", "-", "1", ",", "z", ".", "size", "(", "2", ")", ")", "for", "i", "in", "range", "(", "self", ".", "n_query", ")", "]", "\n", "scores", "=", "self", ".", "forward_gnn", "(", "z_stack", ")", "\n", "loss", "=", "self", ".", "loss_fn", "(", "scores", ",", "y_query", ")", "\n", "return", "scores", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.set_forward_feature_extractor": [[105, 110], ["x.view.view.cuda", "x.view.view.view", "meta_FDMixup_model.MetaFDMixup.feature", "x.view.view.size"], "methods", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.cuda"], ["", "def", "set_forward_feature_extractor", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "cuda", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "fea", "=", "self", ".", "feature", "(", "x", ")", "\n", "return", "fea", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.set_forward_disentangle_module": [[111, 114], ["meta_FDMixup_model.MetaFDMixup.disentangle_model"], "methods", ["None"], ["", "def", "set_forward_disentangle_module", "(", "self", ",", "x_fea", ")", ":", "\n", "        ", "a_fea", ",", "b_fea", "=", "self", ".", "disentangle_model", "(", "x_fea", ")", "\n", "return", "a_fea", ",", "b_fea", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.set_forward_FSL_classifier": [[116, 123], ["meta_FDMixup_model.MetaFDMixup.fc", "z.view.view.view", "meta_FDMixup_model.MetaFDMixup.forward_gnn", "z.view.view.size", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "z_stack[].size", "z.view.view.size", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.forward_gnn"], ["", "def", "set_forward_FSL_classifier", "(", "self", ",", "x", ")", ":", "\n", "      ", "z", "=", "self", ".", "fc", "(", "x", ")", "\n", "z", "=", "z", ".", "view", "(", "self", ".", "n_way", ",", "-", "1", ",", "z", ".", "size", "(", "1", ")", ")", "\n", "z_stack", "=", "[", "torch", ".", "cat", "(", "[", "z", "[", ":", ",", ":", "self", ".", "n_support", "]", ",", "z", "[", ":", ",", "self", ".", "n_support", "+", "i", ":", "self", ".", "n_support", "+", "i", "+", "1", "]", "]", ",", "dim", "=", "1", ")", ".", "view", "(", "1", ",", "-", "1", ",", "z", ".", "size", "(", "2", ")", ")", "for", "i", "in", "range", "(", "self", ".", "n_query", ")", "]", "\n", "assert", "(", "z_stack", "[", "0", "]", ".", "size", "(", "1", ")", "==", "self", ".", "n_way", "*", "(", "self", ".", "n_support", "+", "1", ")", ")", "\n", "scores", "=", "self", ".", "forward_gnn", "(", "z_stack", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.set_forward_loss_for_train": [[125, 213], ["mixup.mixup_data", "meta_FDMixup_model.MetaFDMixup.set_forward_feature_extractor", "meta_FDMixup_model.MetaFDMixup.set_forward_feature_extractor", "meta_FDMixup_model.MetaFDMixup.set_forward_feature_extractor", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "meta_FDMixup_model.MetaFDMixup.set_forward_disentangle_module", "x_1_F.view.view.view", "x_2_F.view.view.view", "mix_F.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mixup_x_1.view.view.view", "mixup_x_2.view.view.view", "meta_FDMixup_model.MetaFDMixup.set_forward_FSL_classifier", "meta_FDMixup_model.MetaFDMixup.set_forward_FSL_classifier", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "y_query_1.cuda.cuda.cuda", "y_query_2.cuda.cuda.cuda", "meta_FDMixup_model.MetaFDMixup.loss_fn", "meta_FDMixup_model.MetaFDMixup.loss_fn", "meta_FDMixup_model.MetaFDMixup.domain_model", "meta_FDMixup_model.MetaFDMixup.domain_model", "meta_FDMixup_model.MetaFDMixup.domain_model", "meta_FDMixup_model.MetaFDMixup.domain_model", "meta_FDMixup_model.MetaFDMixup.domain_model", "meta_FDMixup_model.MetaFDMixup.domain_model", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "meta_FDMixup_model.MetaFDMixup.loss_KLD", "meta_FDMixup_model.MetaFDMixup.loss_KLD", "meta_FDMixup_model.MetaFDMixup.loss_KLD", "meta_FDMixup_model.MetaFDMixup.loss_fn", "meta_FDMixup_model.MetaFDMixup.loss_fn", "meta_FDMixup_model.MetaFDMixup.size", "meta_FDMixup_model.MetaFDMixup.size", "meta_FDMixup_model.MetaFDMixup.size", "numpy.repeat", "numpy.repeat", "meta_FDMixup_model.MetaFDMixup.size", "meta_FDMixup_model.MetaFDMixup.size", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "x_1_F.view.view.size", "x_2_F.view.view.size", "mix_F.view.view.size", "mixup_x_1.view.view.size", "mixup_x_2.view.view.size", "range", "range", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "meta_FDMixup_model.MetaFDMixup.loss_fn", "meta_FDMixup_model.MetaFDMixup.loss_fn", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.None.mixup.mixup_data", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.set_forward_feature_extractor", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.set_forward_feature_extractor", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.set_forward_feature_extractor", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.set_forward_disentangle_module", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.set_forward_FSL_classifier", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.set_forward_FSL_classifier", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.cuda", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.cuda", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.cuda", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.cuda", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.cuda", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.cuda", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.cuda", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.cuda", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.cuda", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.cuda", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.cuda", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.cuda", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.cuda", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.cuda", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.cuda", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.cuda", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.cuda", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.cuda", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.cuda", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.cuda", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.cuda", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.cuda", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.cuda"], ["", "def", "set_forward_loss_for_train", "(", "self", ",", "x_1", ",", "x_2", ")", ":", "\n", "# get support and query", "\n", "        ", "x_1_support", "=", "x_1", "[", ":", ",", ":", "self", ".", "n_support", ",", ":", ",", ":", ",", ":", "]", "\n", "x_1_query", "=", "x_1", "[", ":", ",", "self", ".", "n_support", ":", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "x_2_support", "=", "x_2", "[", ":", ",", ":", "self", ".", "n_support", ",", ":", ",", ":", ",", ":", "]", "\n", "x_2_query", "=", "x_2", "[", ":", ",", "self", ".", "n_support", ":", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "# mix the query", "\n", "mixed_query", ",", "lamda", "=", "mixup_data", "(", "x_1_query", ",", "x_2_query", ")", "\n", "\n", "\n", "# forward feature_extractor", "\n", "x_1_S_fea", "=", "self", ".", "set_forward_feature_extractor", "(", "x_1_support", ")", "\n", "x_2_S_fea", "=", "self", ".", "set_forward_feature_extractor", "(", "x_2_support", ")", "\n", "mix_Q_fea", "=", "self", ".", "set_forward_feature_extractor", "(", "mixed_query", ")", "\n", "\n", "\n", "# forward disentangle module", "\n", "input_fea_concat_1", "=", "torch", ".", "cat", "(", "(", "x_1_S_fea", ",", "x_2_S_fea", ")", ",", "dim", "=", "0", ")", "\n", "input_fea_concat", "=", "torch", ".", "cat", "(", "(", "input_fea_concat_1", ",", "mix_Q_fea", ")", ",", "dim", "=", "0", ")", "\n", "a_code", ",", "b_code", "=", "self", ".", "set_forward_disentangle_module", "(", "input_fea_concat", ")", "\n", "\n", "x_1_S_len", "=", "x_1_S_fea", ".", "size", "(", ")", "[", "0", "]", "\n", "x_2_S_len", "=", "x_2_S_fea", ".", "size", "(", ")", "[", "0", "]", "\n", "mix_Q_len", "=", "mix_Q_fea", ".", "size", "(", ")", "[", "0", "]", "\n", "x_1_S_a_code", ",", "x_1_S_b_code", "=", "a_code", "[", "0", ":", "x_1_S_len", ",", ":", "]", ",", "b_code", "[", "0", ":", "x_1_S_len", ",", ":", "]", "\n", "x_2_S_a_code", ",", "x_2_S_b_code", "=", "a_code", "[", "x_1_S_len", ":", "x_1_S_len", "+", "x_2_S_len", ",", ":", "]", ",", "b_code", "[", "x_1_S_len", ":", "x_1_S_len", "+", "x_2_S_len", ",", ":", "]", "\n", "mix_Q_a_code", ",", "mix_Q_b_code", "=", "a_code", "[", "x_1_S_len", "+", "x_2_S_len", ":", ",", ":", "]", ",", "b_code", "[", "x_1_S_len", "+", "x_2_S_len", ":", ",", ":", "]", "\n", "\n", "\n", "# forward FSL classifier --> score,   (the domain-irrelevant a code is used)", "\n", "x_1_F", ",", "x_2_F", ",", "mix_F", "=", "x_1_S_a_code", ",", "x_2_S_a_code", ",", "mix_Q_a_code", "\n", "x_1_F", "=", "x_1_F", ".", "view", "(", "self", ".", "n_way", ",", "-", "1", ",", "x_1_F", ".", "size", "(", ")", "[", "1", "]", ")", "\n", "x_2_F", "=", "x_2_F", ".", "view", "(", "self", ".", "n_way", ",", "-", "1", ",", "x_2_F", ".", "size", "(", ")", "[", "1", "]", ")", "\n", "mix_F", "=", "mix_F", ".", "view", "(", "self", ".", "n_way", ",", "-", "1", ",", "mix_F", ".", "size", "(", ")", "[", "1", "]", ")", "\n", "mixup_x_1", "=", "torch", ".", "cat", "(", "(", "x_1_F", ",", "mix_F", ")", ",", "1", ")", "\n", "mixup_x_2", "=", "torch", ".", "cat", "(", "(", "x_2_F", ",", "mix_F", ")", ",", "1", ")", "\n", "mixup_x_1", "=", "mixup_x_1", ".", "view", "(", "-", "1", ",", "mixup_x_1", ".", "size", "(", ")", "[", "2", "]", ")", "\n", "mixup_x_2", "=", "mixup_x_2", ".", "view", "(", "-", "1", ",", "mixup_x_2", ".", "size", "(", ")", "[", "2", "]", ")", "\n", "scores_FSL_1", "=", "self", ".", "set_forward_FSL_classifier", "(", "mixup_x_1", ")", "\n", "scores_FSL_2", "=", "self", ".", "set_forward_FSL_classifier", "(", "mixup_x_2", ")", "\n", "\n", "# ground-truth for FSL classification", "\n", "y_query_1", "=", "torch", ".", "from_numpy", "(", "np", ".", "repeat", "(", "range", "(", "self", ".", "n_way", ")", ",", "self", ".", "n_query", ")", ")", "\n", "y_query_2", "=", "torch", ".", "from_numpy", "(", "np", ".", "repeat", "(", "range", "(", "self", ".", "n_way", ")", ",", "self", ".", "n_query", ")", ")", "\n", "y_query_1", "=", "y_query_1", ".", "cuda", "(", ")", "\n", "y_query_2", "=", "y_query_2", ".", "cuda", "(", ")", "\n", "\n", "# calculate the loss_FSL", "\n", "loss_FSL_1", "=", "self", ".", "loss_fn", "(", "scores_FSL_1", ",", "y_query_1", ")", "\n", "loss_FSL_2", "=", "self", ".", "loss_fn", "(", "scores_FSL_2", ",", "y_query_2", ")", "\n", "loss_FSL", "=", "lamda", "*", "loss_FSL_1", "+", "(", "1", "-", "lamda", ")", "*", "loss_FSL_2", "\n", "\n", "\n", "# forward domain_classifier --> scores ", "\n", "x_1_S_a_domain_scores", "=", "self", ".", "domain_model", "(", "x_1_S_a_code", ")", "\n", "x_1_S_b_domain_scores", "=", "self", ".", "domain_model", "(", "x_1_S_b_code", ")", "\n", "x_2_S_a_domain_scores", "=", "self", ".", "domain_model", "(", "x_2_S_a_code", ")", "\n", "x_2_S_b_domain_scores", "=", "self", ".", "domain_model", "(", "x_2_S_b_code", ")", "\n", "mix_Q_a_domain_scores", "=", "self", ".", "domain_model", "(", "mix_Q_a_code", ")", "\n", "mix_Q_b_domain_scores", "=", "self", ".", "domain_model", "(", "mix_Q_b_code", ")", "\n", "\n", "\n", "# ground-truth for domain classification", "\n", "episode_batch", "=", "x_1_S_a_domain_scores", ".", "size", "(", ")", "[", "0", "]", "\n", "y_1_S_a", "=", "Variable", "(", "torch", ".", "ones", "(", "episode_batch", ",", "2", ")", "/", "2.0", ")", ".", "cuda", "(", ")", "#[0,5, 0.5]", "\n", "y_1_S_b", "=", "Variable", "(", "torch", ".", "ones", "(", "episode_batch", ")", ".", "long", "(", ")", ")", ".", "cuda", "(", ")", "#[1.0, 1.0]                         ", "\n", "y_2_S_a", "=", "Variable", "(", "torch", ".", "ones", "(", "episode_batch", ",", "2", ")", "/", "2.0", ")", ".", "cuda", "(", ")", "#[0.5, 0.5]", "\n", "y_2_S_b", "=", "Variable", "(", "torch", ".", "zeros", "(", "episode_batch", ")", ".", "long", "(", ")", ")", ".", "cuda", "(", ")", "#[0.0, 0.0]", "\n", "\n", "episode_batch_mix", "=", "mix_Q_a_domain_scores", ".", "size", "(", ")", "[", "0", "]", "\n", "y_mix_a", "=", "Variable", "(", "torch", ".", "ones", "(", "episode_batch_mix", ",", "2", ")", "/", "2.0", ")", ".", "cuda", "(", ")", "#[0.5,0.5]", "\n", "y_mix_b_1", "=", "Variable", "(", "torch", ".", "ones", "(", "episode_batch_mix", ")", ".", "long", "(", ")", ")", ".", "cuda", "(", ")", "#[1.0,1.0] with a ratio of lamda", "\n", "y_mix_b_2", "=", "Variable", "(", "torch", ".", "zeros", "(", "episode_batch_mix", ")", ".", "long", "(", ")", ")", ".", "cuda", "(", ")", "#[0.0,0.0] with a ratio of (1-lamda)", "\n", "\n", "# calculate loss_domain_fusion (domain-irrelevant a code)", "\n", "loss_domain_fusion_1", "=", "self", ".", "loss_KLD", "(", "F", ".", "log_softmax", "(", "x_1_S_a_domain_scores", ",", "dim", "=", "1", ")", ",", "y_1_S_a", ")", "\n", "loss_domain_fusion_2", "=", "self", ".", "loss_KLD", "(", "F", ".", "log_softmax", "(", "x_2_S_a_domain_scores", ",", "dim", "=", "1", ")", ",", "y_2_S_a", ")", "\n", "loss_domain_fusion_mix", "=", "self", ".", "loss_KLD", "(", "F", ".", "log_softmax", "(", "mix_Q_a_domain_scores", ",", "dim", "=", "1", ")", ",", "y_mix_a", ")", "\n", "loss_domain_fusion", "=", "(", "loss_domain_fusion_1", "+", "loss_domain_fusion_2", "+", "loss_domain_fusion_mix", ")", "/", "3.0", "\n", "\n", "# calculate loss domain_cls (domain-specific b code)", "\n", "loss_domain_CLS_1", "=", "self", ".", "loss_fn", "(", "x_1_S_b_domain_scores", ",", "y_1_S_b", ")", "\n", "loss_domain_CLS_2", "=", "self", ".", "loss_fn", "(", "x_2_S_b_domain_scores", ",", "y_2_S_b", ")", "\n", "loss_domain_CLS_mix", "=", "lamda", "*", "self", ".", "loss_fn", "(", "mix_Q_b_domain_scores", ",", "y_mix_b_1", ")", "+", "(", "1", "-", "lamda", ")", "*", "self", ".", "loss_fn", "(", "mix_Q_b_domain_scores", ",", "y_mix_b_2", ")", "\n", "loss_domain_CLS", "=", "(", "loss_domain_CLS_1", "+", "loss_domain_CLS_2", "+", "loss_domain_CLS_mix", ")", "/", "3.0", "\n", "return", "loss_FSL", ",", "loss_domain_fusion", ",", "loss_domain_CLS", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.domain_classifier.DomainClassifier.__init__": [[14, 19], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.gnn.GNN_nl.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "DomainClassifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# classifier", "\n", "self", ".", "domain_fc", "=", "nn", ".", "Linear", "(", "64", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.domain_classifier.DomainClassifier.forward": [[20, 23], ["domain_classifier.DomainClassifier.domain_fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "domain_fc", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.protonet.ProtoNet.__init__": [[9, 13], ["methods.meta_template.MetaTemplate.__init__", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.gnn.GNN_nl.__init__"], ["  ", "def", "__init__", "(", "self", ",", "model_func", ",", "n_way", ",", "n_support", ",", "tf_path", "=", "None", ")", ":", "\n", "    ", "super", "(", "ProtoNet", ",", "self", ")", ".", "__init__", "(", "model_func", ",", "n_way", ",", "n_support", ",", "tf_path", "=", "tf_path", ")", "\n", "self", ".", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "method", "=", "'ProtoNet'", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.protonet.ProtoNet.reset_modules": [[14, 16], ["None"], "methods", ["None"], ["", "def", "reset_modules", "(", "self", ")", ":", "\n", "    ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.protonet.ProtoNet.set_forward": [[17, 26], ["protonet.ProtoNet.parse_feature", "z_support.contiguous.contiguous.contiguous", "z_support.contiguous.contiguous.view().mean", "z_query.contiguous().view.contiguous().view.contiguous().view", "protonet.euclidean_dist", "z_support.contiguous.contiguous.view", "z_query.contiguous().view.contiguous().view.contiguous"], "methods", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_template.MetaTemplate.parse_feature", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.protonet.euclidean_dist"], ["", "def", "set_forward", "(", "self", ",", "x", ",", "is_feature", "=", "False", ")", ":", "\n", "    ", "z_support", ",", "z_query", "=", "self", ".", "parse_feature", "(", "x", ",", "is_feature", ")", "\n", "z_support", "=", "z_support", ".", "contiguous", "(", ")", "\n", "z_proto", "=", "z_support", ".", "view", "(", "self", ".", "n_way", ",", "self", ".", "n_support", ",", "-", "1", ")", ".", "mean", "(", "1", ")", "#the shape of z is [n_data, n_dim]", "\n", "z_query", "=", "z_query", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "n_way", "*", "self", ".", "n_query", ",", "-", "1", ")", "\n", "\n", "dists", "=", "euclidean_dist", "(", "z_query", ",", "z_proto", ")", "\n", "scores", "=", "-", "dists", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.protonet.ProtoNet.get_distance": [[27, 33], ["protonet.ProtoNet.parse_feature", "z_support.contiguous.contiguous.contiguous", "z_support.contiguous.contiguous.view().mean", "z_query.contiguous().view.contiguous().view.contiguous().view", "[].cpu().numpy", "z_support.contiguous.contiguous.view", "z_query.contiguous().view.contiguous().view.contiguous", "[].cpu", "protonet.euclidean_dist"], "methods", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_template.MetaTemplate.parse_feature", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.protonet.euclidean_dist"], ["", "def", "get_distance", "(", "self", ",", "x", ",", "is_feature", "=", "False", ")", ":", "\n", "    ", "z_support", ",", "z_query", "=", "self", ".", "parse_feature", "(", "x", ",", "is_feature", ")", "\n", "z_support", "=", "z_support", ".", "contiguous", "(", ")", "\n", "z_proto", "=", "z_support", ".", "view", "(", "self", ".", "n_way", ",", "self", ".", "n_support", ",", "-", "1", ")", ".", "mean", "(", "1", ")", "#the shape of z is [n_data, n_dim]", "\n", "z_query", "=", "z_query", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "n_way", "*", "self", ".", "n_query", ",", "-", "1", ")", "\n", "return", "euclidean_dist", "(", "z_proto", ",", "z_proto", ")", "[", "0", ",", ":", "5", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.protonet.ProtoNet.set_forward_loss": [[34, 40], ["torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "y_query.cuda.cuda.cuda", "protonet.ProtoNet.set_forward", "protonet.ProtoNet.loss_fn", "numpy.repeat", "range"], "methods", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.cuda", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_template.MetaTemplate.set_forward"], ["", "def", "set_forward_loss", "(", "self", ",", "x", ")", ":", "\n", "    ", "y_query", "=", "torch", ".", "from_numpy", "(", "np", ".", "repeat", "(", "range", "(", "self", ".", "n_way", ")", ",", "self", ".", "n_query", ")", ")", "\n", "y_query", "=", "y_query", ".", "cuda", "(", ")", "\n", "scores", "=", "self", ".", "set_forward", "(", "x", ")", "\n", "loss", "=", "self", ".", "loss_fn", "(", "scores", ",", "y_query", ")", "\n", "return", "scores", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.protonet.euclidean_dist": [[42, 54], ["x.unsqueeze().expand.size", "y.unsqueeze().expand.size", "x.unsqueeze().expand.size", "x.unsqueeze().expand.unsqueeze().expand", "y.unsqueeze().expand.unsqueeze().expand", "torch.pow().sum", "torch.pow().sum", "y.unsqueeze().expand.size", "x.unsqueeze().expand.unsqueeze", "y.unsqueeze().expand.unsqueeze", "torch.pow", "torch.pow"], "function", ["None"], ["", "", "def", "euclidean_dist", "(", "x", ",", "y", ")", ":", "\n", "# x: N x D", "\n", "# y: M x D", "\n", "  ", "n", "=", "x", ".", "size", "(", "0", ")", "\n", "m", "=", "y", ".", "size", "(", "0", ")", "\n", "d", "=", "x", ".", "size", "(", "1", ")", "\n", "assert", "d", "==", "y", ".", "size", "(", "1", ")", "\n", "\n", "x", "=", "x", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "n", ",", "m", ",", "d", ")", "\n", "y", "=", "y", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "n", ",", "m", ",", "d", ")", "\n", "\n", "return", "torch", ".", "pow", "(", "x", "-", "y", ",", "2", ")", ".", "sum", "(", "2", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_template.MetaTemplate.__init__": [[9, 18], ["torch.Module.__init__", "model_func", "tensorboardX.SummaryWriter"], "methods", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.gnn.GNN_nl.__init__"], ["  ", "def", "__init__", "(", "self", ",", "model_func", ",", "n_way", ",", "n_support", ",", "flatten", "=", "True", ",", "leakyrelu", "=", "False", ",", "tf_path", "=", "None", ",", "change_way", "=", "True", ")", ":", "\n", "    ", "super", "(", "MetaTemplate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_way", "=", "n_way", "\n", "self", ".", "n_support", "=", "n_support", "\n", "self", ".", "n_query", "=", "-", "1", "#(change depends on input)", "\n", "self", ".", "feature", "=", "model_func", "(", "flatten", "=", "flatten", ",", "leakyrelu", "=", "leakyrelu", ")", "\n", "self", ".", "feat_dim", "=", "self", ".", "feature", ".", "final_feat_dim", "\n", "self", ".", "change_way", "=", "change_way", "#some methods allow different_way classification during training and test", "\n", "self", ".", "tf_writer", "=", "SummaryWriter", "(", "log_dir", "=", "tf_path", ")", "if", "tf_path", "is", "not", "None", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_template.MetaTemplate.set_forward": [[19, 22], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "set_forward", "(", "self", ",", "x", ",", "is_feature", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_template.MetaTemplate.set_forward_loss": [[23, 26], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "set_forward_loss", "(", "self", ",", "x", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_template.MetaTemplate.forward": [[28, 31], ["meta_template.MetaTemplate.feature.forward"], "methods", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.gnn.GNN_nl.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "out", "=", "self", ".", "feature", ".", "forward", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_template.MetaTemplate.parse_feature": [[32, 45], ["x.contiguous().view.contiguous().view.cuda", "x.contiguous().view.contiguous().view.contiguous().view", "meta_template.MetaTemplate.feature.forward", "z_all.view.view.view", "x.contiguous().view.contiguous().view.contiguous", "x.contiguous().view.contiguous().view.size"], "methods", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.cuda", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.gnn.GNN_nl.forward"], ["", "def", "parse_feature", "(", "self", ",", "x", ",", "is_feature", ")", ":", "\n", "    ", "x", "=", "x", ".", "cuda", "(", ")", "\n", "if", "is_feature", ":", "\n", "      ", "z_all", "=", "x", "\n", "", "else", ":", "\n", "      ", "x", "=", "x", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "n_way", "*", "(", "self", ".", "n_support", "+", "self", ".", "n_query", ")", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "z_all", "=", "self", ".", "feature", ".", "forward", "(", "x", ")", "\n", "z_all", "=", "z_all", ".", "view", "(", "self", ".", "n_way", ",", "self", ".", "n_support", "+", "self", ".", "n_query", ",", "-", "1", ")", "\n", "\n", "", "z_support", "=", "z_all", "[", ":", ",", ":", "self", ".", "n_support", "]", "\n", "z_query", "=", "z_all", "[", ":", ",", "self", ".", "n_support", ":", "]", "\n", "\n", "return", "z_support", ",", "z_query", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_template.MetaTemplate.correct": [[47, 55], ["meta_template.MetaTemplate.set_forward_loss_for_test", "numpy.repeat", "scores.data.topk", "topk_labels.cpu().numpy", "numpy.sum", "range", "float", "len", "topk_labels.cpu", "loss.item", "len"], "methods", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.set_forward_loss_for_test"], ["", "def", "correct", "(", "self", ",", "x", ")", ":", "\n", "    ", "scores", ",", "loss", "=", "self", ".", "set_forward_loss_for_test", "(", "x", ")", "\n", "\n", "y_query", "=", "np", ".", "repeat", "(", "range", "(", "self", ".", "n_way", ")", ",", "self", ".", "n_query", ")", "\n", "topk_scores", ",", "topk_labels", "=", "scores", ".", "data", ".", "topk", "(", "1", ",", "1", ",", "True", ",", "True", ")", "\n", "topk_ind", "=", "topk_labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "top1_correct", "=", "np", ".", "sum", "(", "topk_ind", "[", ":", ",", "0", "]", "==", "y_query", ")", "\n", "return", "float", "(", "top1_correct", ")", ",", "len", "(", "y_query", ")", ",", "loss", ".", "item", "(", ")", "*", "len", "(", "y_query", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_template.MetaTemplate.train_loop": [[57, 81], ["zip", "len", "enumerate", "enumerate", "optimizer.zero_grad", "meta_template.MetaTemplate.set_forward_loss_for_train", "loss.backward", "optimizer.step", "x_1.size", "x_1.size", "loss.item", "print", "meta_template.MetaTemplate.tf_writer.add_scalar", "meta_template.MetaTemplate.tf_writer.add_scalar", "meta_template.MetaTemplate.tf_writer.add_scalar", "loss.item", "loss.item", "loss.item", "len", "float"], "methods", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_FDMixup_model.MetaFDMixup.set_forward_loss_for_train"], ["", "def", "train_loop", "(", "self", ",", "epoch", ",", "train_loader", ",", "labeled_target_loader", ",", "optimizer", ",", "total_it", ")", ":", "\n", "    ", "print_freq", "=", "len", "(", "train_loader", ")", "//", "10", "\n", "avg_loss", "=", "0", "\n", "\n", "for", "(", "i", ",", "(", "x_1", ",", "_", ")", ")", ",", "(", "j", ",", "(", "x_2", ",", "_", ")", ")", "in", "zip", "(", "enumerate", "(", "train_loader", ")", ",", "enumerate", "(", "labeled_target_loader", ")", ")", ":", "\n", "\n", "      ", "self", ".", "n_query", "=", "x_1", ".", "size", "(", "1", ")", "-", "self", ".", "n_support", "\n", "if", "self", ".", "change_way", ":", "\n", "        ", "self", ".", "n_way", "=", "x_1", ".", "size", "(", "0", ")", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss_FSL", ",", "loss_domain_fusion", ",", "loss_domain_CLS", "=", "self", ".", "set_forward_loss_for_train", "(", "x_1", ",", "x_2", ")", "\n", "loss", "=", "loss_FSL", "+", "loss_domain_fusion", "+", "loss_domain_CLS", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "avg_loss", "=", "avg_loss", "+", "loss", ".", "item", "(", ")", "\n", "\n", "if", "(", "i", "+", "1", ")", "%", "print_freq", "==", "0", ":", "\n", "        ", "print", "(", "'Epoch {:d} | Batch {:d}/{:d} | Loss {:f}'", ".", "format", "(", "epoch", ",", "i", "+", "1", ",", "len", "(", "train_loader", ")", ",", "avg_loss", "/", "float", "(", "i", "+", "1", ")", ")", ")", "\n", "", "if", "(", "total_it", "+", "1", ")", "%", "10", "==", "0", "and", "self", ".", "tf_writer", "is", "not", "None", ":", "\n", "        ", "self", ".", "tf_writer", ".", "add_scalar", "(", "self", ".", "method", "+", "'/query_loss'", ",", "loss", ".", "item", "(", ")", ",", "total_it", "+", "1", ")", "\n", "self", ".", "tf_writer", ".", "add_scalar", "(", "self", ".", "method", "+", "'/loss_FSL'", ",", "loss", ".", "item", "(", ")", ",", "total_it", "+", "1", ")", "\n", "self", ".", "tf_writer", ".", "add_scalar", "(", "self", ".", "method", "+", "'/loss_VAE'", ",", "loss", ".", "item", "(", ")", ",", "total_it", "+", "1", ")", "\n", "", "total_it", "+=", "1", "\n", "", "return", "total_it", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_template.MetaTemplate.test_loop": [[83, 105], ["len", "enumerate", "numpy.asarray", "numpy.mean", "numpy.std", "print", "print", "meta_template.MetaTemplate.correct", "numpy.asarray.append", "x.size", "x.size", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.meta_template.MetaTemplate.correct"], ["", "def", "test_loop", "(", "self", ",", "test_loader", ",", "record", "=", "None", ")", ":", "\n", "    ", "loss", "=", "0.", "\n", "count", "=", "0", "\n", "acc_all", "=", "[", "]", "\n", "\n", "iter_num", "=", "len", "(", "test_loader", ")", "\n", "for", "i", ",", "(", "x", ",", "_", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "      ", "self", ".", "n_query", "=", "x", ".", "size", "(", "1", ")", "-", "self", ".", "n_support", "\n", "if", "self", ".", "change_way", ":", "\n", "        ", "self", ".", "n_way", "=", "x", ".", "size", "(", "0", ")", "\n", "", "correct_this", ",", "count_this", ",", "loss_this", "=", "self", ".", "correct", "(", "x", ")", "\n", "acc_all", ".", "append", "(", "correct_this", "/", "count_this", "*", "100", ")", "\n", "loss", "+=", "loss_this", "\n", "count", "+=", "count_this", "\n", "\n", "", "acc_all", "=", "np", ".", "asarray", "(", "acc_all", ")", "\n", "acc_mean", "=", "np", ".", "mean", "(", "acc_all", ")", "\n", "acc_std", "=", "np", ".", "std", "(", "acc_all", ")", "\n", "print", "(", "'--- %d Loss = %.6f ---'", "%", "(", "iter_num", ",", "loss", "/", "count", ")", ")", "\n", "print", "(", "'--- %d Test Acc = %4.2f%% +- %4.2f%% ---'", "%", "(", "iter_num", ",", "acc_mean", ",", "1.96", "*", "acc_std", "/", "np", ".", "sqrt", "(", "iter_num", ")", ")", ")", "\n", "\n", "return", "acc_mean", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.backbone.distLinear.__init__": [[20, 24], ["torch.Module.__init__", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.gnn.GNN_nl.__init__"], ["  ", "def", "__init__", "(", "self", ",", "indim", ",", "outdim", ")", ":", "\n", "    ", "super", "(", "distLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "L", "=", "weight_norm", "(", "nn", ".", "Linear", "(", "indim", ",", "outdim", ",", "bias", "=", "False", ")", ",", "name", "=", "'weight'", ",", "dim", "=", "0", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.backbone.distLinear.forward": [[25, 33], ["torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "x.div", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "backbone.distLinear.L.weight.data.div", "backbone.distLinear.L", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x_norm", "=", "torch", ".", "norm", "(", "x", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "x", ")", "\n", "x_normalized", "=", "x", ".", "div", "(", "x_norm", "+", "0.00001", ")", "\n", "L_norm", "=", "torch", ".", "norm", "(", "self", ".", "L", ".", "weight", ".", "data", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "self", ".", "L", ".", "weight", ".", "data", ")", "\n", "self", ".", "L", ".", "weight", ".", "data", "=", "self", ".", "L", ".", "weight", ".", "data", ".", "div", "(", "L_norm", "+", "0.00001", ")", "\n", "cos_dist", "=", "self", ".", "L", "(", "x_normalized", ")", "\n", "scores", "=", "10", "*", "cos_dist", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.backbone.Flatten.__init__": [[36, 38], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.gnn.GNN_nl.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "Flatten", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.backbone.Flatten.forward": [[39, 41], ["x.view", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.backbone.Linear_fw.__init__": [[45, 49], ["torch.Linear.__init__"], "methods", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.gnn.GNN_nl.__init__"], ["  ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ")", ":", "\n", "    ", "super", "(", "Linear_fw", ",", "self", ")", ".", "__init__", "(", "in_features", ",", "out_features", ",", "bias", "=", "bias", ")", "\n", "self", ".", "weight", ".", "fast", "=", "None", "#Lazy hack to add fast weight link", "\n", "self", ".", "bias", ".", "fast", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.backbone.Linear_fw.forward": [[50, 56], ["torch.linear", "torch.linear", "torch.linear", "super().forward"], "methods", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.gnn.GNN_nl.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "if", "self", ".", "weight", ".", "fast", "is", "not", "None", "and", "self", ".", "bias", ".", "fast", "is", "not", "None", ":", "\n", "      ", "out", "=", "F", ".", "linear", "(", "x", ",", "self", ".", "weight", ".", "fast", ",", "self", ".", "bias", ".", "fast", ")", "\n", "", "else", ":", "\n", "      ", "out", "=", "super", "(", "Linear_fw", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.backbone.Conv2d_fw.__init__": [[59, 64], ["torch.Conv2d.__init__"], "methods", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.gnn.GNN_nl.__init__"], ["  ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ":", "\n", "    ", "super", "(", "Conv2d_fw", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", "\n", "self", ".", "weight", ".", "fast", "=", "None", "\n", "if", "not", "self", ".", "bias", "is", "None", ":", "\n", "      ", "self", ".", "bias", ".", "fast", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.backbone.Conv2d_fw.forward": [[65, 77], ["torch.conv2d", "torch.conv2d", "torch.conv2d", "super().forward", "torch.conv2d", "torch.conv2d", "torch.conv2d", "super().forward"], "methods", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.gnn.GNN_nl.forward", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.gnn.GNN_nl.forward"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "if", "self", ".", "bias", "is", "None", ":", "\n", "      ", "if", "self", ".", "weight", ".", "fast", "is", "not", "None", ":", "\n", "        ", "out", "=", "F", ".", "conv2d", "(", "x", ",", "self", ".", "weight", ".", "fast", ",", "None", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "self", ".", "padding", ")", "\n", "", "else", ":", "\n", "        ", "out", "=", "super", "(", "Conv2d_fw", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "", "", "else", ":", "\n", "      ", "if", "self", ".", "weight", ".", "fast", "is", "not", "None", "and", "self", ".", "bias", ".", "fast", "is", "not", "None", ":", "\n", "        ", "out", "=", "F", ".", "conv2d", "(", "x", ",", "self", ".", "weight", ".", "fast", ",", "self", ".", "bias", ".", "fast", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "self", ".", "padding", ")", "\n", "", "else", ":", "\n", "        ", "out", "=", "super", "(", "Conv2d_fw", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.backbone.FeatureWiseTransformation2d_fw.__init__": [[85, 96], ["torch.BatchNorm2d.__init__", "backbone.FeatureWiseTransformation2d_fw.reset_parameters", "backbone.FeatureWiseTransformation2d_fw.register_buffer", "backbone.FeatureWiseTransformation2d_fw.register_buffer", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.gnn.GNN_nl.__init__"], ["def", "__init__", "(", "self", ",", "num_features", ",", "momentum", "=", "0.1", ",", "track_running_stats", "=", "True", ")", ":", "\n", "    ", "super", "(", "FeatureWiseTransformation2d_fw", ",", "self", ")", ".", "__init__", "(", "num_features", ",", "momentum", "=", "momentum", ",", "track_running_stats", "=", "track_running_stats", ")", "\n", "self", ".", "weight", ".", "fast", "=", "None", "\n", "self", ".", "bias", ".", "fast", "=", "None", "\n", "if", "self", ".", "track_running_stats", ":", "\n", "      ", "self", ".", "register_buffer", "(", "'running_mean'", ",", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_var'", ",", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "", "if", "self", ".", "feature_augment", ":", "# initialize {gamma, beta} with {0.3, 0.5}", "\n", "      ", "self", ".", "gamma", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ",", "num_features", ",", "1", ",", "1", ")", "*", "0.3", ")", "\n", "self", ".", "beta", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ",", "num_features", ",", "1", ",", "1", ")", "*", "0.5", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.backbone.FeatureWiseTransformation2d_fw.reset_running_stats": [[97, 101], ["backbone.FeatureWiseTransformation2d_fw.running_mean.zero_", "backbone.FeatureWiseTransformation2d_fw.running_var.fill_"], "methods", ["None"], ["", "def", "reset_running_stats", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "track_running_stats", ":", "\n", "      ", "self", ".", "running_mean", ".", "zero_", "(", ")", "\n", "self", ".", "running_var", ".", "fill_", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.backbone.FeatureWiseTransformation2d_fw.forward": [[102, 120], ["torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "backbone.softplus", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "backbone.softplus"], "methods", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.backbone.softplus", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.backbone.softplus"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "step", "=", "0", ")", ":", "\n", "    ", "if", "self", ".", "weight", ".", "fast", "is", "not", "None", "and", "self", ".", "bias", ".", "fast", "is", "not", "None", ":", "\n", "      ", "weight", "=", "self", ".", "weight", ".", "fast", "\n", "bias", "=", "self", ".", "bias", ".", "fast", "\n", "", "else", ":", "\n", "      ", "weight", "=", "self", ".", "weight", "\n", "bias", "=", "self", ".", "bias", "\n", "", "if", "self", ".", "track_running_stats", ":", "\n", "      ", "out", "=", "F", ".", "batch_norm", "(", "x", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "weight", ",", "bias", ",", "training", "=", "self", ".", "training", ",", "momentum", "=", "self", ".", "momentum", ")", "\n", "", "else", ":", "\n", "      ", "out", "=", "F", ".", "batch_norm", "(", "x", ",", "torch", ".", "zeros_like", "(", "x", ")", ",", "torch", ".", "ones_like", "(", "x", ")", ",", "weight", ",", "bias", ",", "training", "=", "True", ",", "momentum", "=", "1", ")", "\n", "\n", "# apply feature-wise transformation", "\n", "", "if", "self", ".", "feature_augment", "and", "self", ".", "training", ":", "\n", "      ", "gamma", "=", "(", "1", "+", "torch", ".", "randn", "(", "1", ",", "self", ".", "num_features", ",", "1", ",", "1", ",", "dtype", "=", "self", ".", "gamma", ".", "dtype", ",", "device", "=", "self", ".", "gamma", ".", "device", ")", "*", "softplus", "(", "self", ".", "gamma", ")", ")", ".", "expand_as", "(", "out", ")", "\n", "beta", "=", "(", "torch", ".", "randn", "(", "1", ",", "self", ".", "num_features", ",", "1", ",", "1", ",", "dtype", "=", "self", ".", "beta", ".", "dtype", ",", "device", "=", "self", ".", "beta", ".", "device", ")", "*", "softplus", "(", "self", ".", "beta", ")", ")", ".", "expand_as", "(", "out", ")", "\n", "out", "=", "gamma", "*", "out", "+", "beta", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.backbone.BatchNorm2d_fw.__init__": [[123, 131], ["torch.BatchNorm2d.__init__", "backbone.BatchNorm2d_fw.reset_parameters", "backbone.BatchNorm2d_fw.register_buffer", "backbone.BatchNorm2d_fw.register_buffer", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.gnn.GNN_nl.__init__"], ["  ", "def", "__init__", "(", "self", ",", "num_features", ",", "momentum", "=", "0.1", ",", "track_running_stats", "=", "True", ")", ":", "\n", "    ", "super", "(", "BatchNorm2d_fw", ",", "self", ")", ".", "__init__", "(", "num_features", ",", "momentum", "=", "momentum", ",", "track_running_stats", "=", "track_running_stats", ")", "\n", "self", ".", "weight", ".", "fast", "=", "None", "\n", "self", ".", "bias", ".", "fast", "=", "None", "\n", "if", "self", ".", "track_running_stats", ":", "\n", "      ", "self", ".", "register_buffer", "(", "'running_mean'", ",", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_var'", ",", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.backbone.BatchNorm2d_fw.reset_running_stats": [[132, 136], ["backbone.BatchNorm2d_fw.running_mean.zero_", "backbone.BatchNorm2d_fw.running_var.fill_"], "methods", ["None"], ["", "def", "reset_running_stats", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "track_running_stats", ":", "\n", "      ", "self", ".", "running_mean", ".", "zero_", "(", ")", "\n", "self", ".", "running_var", ".", "fill_", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.backbone.BatchNorm2d_fw.forward": [[137, 149], ["torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "x.size", "x.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "step", "=", "0", ")", ":", "\n", "    ", "if", "self", ".", "weight", ".", "fast", "is", "not", "None", "and", "self", ".", "bias", ".", "fast", "is", "not", "None", ":", "\n", "      ", "weight", "=", "self", ".", "weight", ".", "fast", "\n", "bias", "=", "self", ".", "bias", ".", "fast", "\n", "", "else", ":", "\n", "      ", "weight", "=", "self", ".", "weight", "\n", "bias", "=", "self", ".", "bias", "\n", "", "if", "self", ".", "track_running_stats", ":", "\n", "      ", "out", "=", "F", ".", "batch_norm", "(", "x", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "weight", ",", "bias", ",", "training", "=", "self", ".", "training", ",", "momentum", "=", "self", ".", "momentum", ")", "\n", "", "else", ":", "\n", "      ", "out", "=", "F", ".", "batch_norm", "(", "x", ",", "torch", ".", "zeros", "(", "x", ".", "size", "(", "1", ")", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", ",", "torch", ".", "ones", "(", "x", ".", "size", "(", "1", ")", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", ",", "weight", ",", "bias", ",", "training", "=", "True", ",", "momentum", "=", "1", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.backbone.BatchNorm1d_fw.__init__": [[152, 160], ["torch.BatchNorm1d.__init__", "backbone.BatchNorm1d_fw.reset_parameters", "backbone.BatchNorm1d_fw.register_buffer", "backbone.BatchNorm1d_fw.register_buffer", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.gnn.GNN_nl.__init__"], ["  ", "def", "__init__", "(", "self", ",", "num_features", ",", "momentum", "=", "0.1", ",", "track_running_stats", "=", "True", ")", ":", "\n", "    ", "super", "(", "BatchNorm1d_fw", ",", "self", ")", ".", "__init__", "(", "num_features", ",", "momentum", "=", "momentum", ",", "track_running_stats", "=", "track_running_stats", ")", "\n", "self", ".", "weight", ".", "fast", "=", "None", "\n", "self", ".", "bias", ".", "fast", "=", "None", "\n", "if", "self", ".", "track_running_stats", ":", "\n", "      ", "self", ".", "register_buffer", "(", "'running_mean'", ",", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_var'", ",", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.backbone.BatchNorm1d_fw.reset_running_stats": [[161, 165], ["backbone.BatchNorm1d_fw.running_mean.zero_", "backbone.BatchNorm1d_fw.running_var.fill_"], "methods", ["None"], ["", "def", "reset_running_stats", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "track_running_stats", ":", "\n", "      ", "self", ".", "running_mean", ".", "zero_", "(", ")", "\n", "self", ".", "running_var", ".", "fill_", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.backbone.BatchNorm1d_fw.forward": [[166, 178], ["torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "x.size", "x.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "step", "=", "0", ")", ":", "\n", "    ", "if", "self", ".", "weight", ".", "fast", "is", "not", "None", "and", "self", ".", "bias", ".", "fast", "is", "not", "None", ":", "\n", "      ", "weight", "=", "self", ".", "weight", ".", "fast", "\n", "bias", "=", "self", ".", "bias", ".", "fast", "\n", "", "else", ":", "\n", "      ", "weight", "=", "self", ".", "weight", "\n", "bias", "=", "self", ".", "bias", "\n", "", "if", "self", ".", "track_running_stats", ":", "\n", "      ", "out", "=", "F", ".", "batch_norm", "(", "x", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "weight", ",", "bias", ",", "training", "=", "self", ".", "training", ",", "momentum", "=", "self", ".", "momentum", ")", "\n", "", "else", ":", "\n", "      ", "out", "=", "F", ".", "batch_norm", "(", "x", ",", "torch", ".", "zeros", "(", "x", ".", "size", "(", "1", ")", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", ",", "torch", ".", "ones", "(", "x", ".", "size", "(", "1", ")", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", ",", "weight", ",", "bias", ",", "training", "=", "True", ",", "momentum", "=", "1", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.backbone.ConvBlock.__init__": [[182, 202], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "backbone.Conv2d_fw", "backbone.FeatureWiseTransformation2d_fw", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "backbone.ConvBlock.parametrized_layers.append", "backbone.init_layer"], "methods", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.gnn.GNN_nl.__init__", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.backbone.init_layer"], ["def", "__init__", "(", "self", ",", "indim", ",", "outdim", ",", "pool", "=", "True", ",", "padding", "=", "1", ")", ":", "\n", "    ", "super", "(", "ConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "indim", "=", "indim", "\n", "self", ".", "outdim", "=", "outdim", "\n", "if", "self", ".", "maml", ":", "\n", "      ", "self", ".", "C", "=", "Conv2d_fw", "(", "indim", ",", "outdim", ",", "3", ",", "padding", "=", "padding", ")", "\n", "self", ".", "BN", "=", "FeatureWiseTransformation2d_fw", "(", "outdim", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "C", "=", "nn", ".", "Conv2d", "(", "indim", ",", "outdim", ",", "3", ",", "padding", "=", "padding", ")", "\n", "self", ".", "BN", "=", "nn", ".", "BatchNorm2d", "(", "outdim", ")", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "parametrized_layers", "=", "[", "self", ".", "C", ",", "self", ".", "BN", ",", "self", ".", "relu", "]", "\n", "if", "pool", ":", "\n", "      ", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", "self", ".", "parametrized_layers", ".", "append", "(", "self", ".", "pool", ")", "\n", "\n", "", "for", "layer", "in", "self", ".", "parametrized_layers", ":", "\n", "      ", "init_layer", "(", "layer", ")", "\n", "", "self", ".", "trunk", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "parametrized_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.backbone.ConvBlock.forward": [[203, 206], ["backbone.ConvBlock.trunk"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "out", "=", "self", ".", "trunk", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.backbone.SimpleBlock.__init__": [[210, 248], ["torch.Module.__init__", "backbone.Conv2d_fw", "backbone.BatchNorm2d_fw", "backbone.Conv2d_fw", "backbone.FeatureWiseTransformation2d_fw", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "backbone.SimpleBlock.parametrized_layers.append", "backbone.SimpleBlock.parametrized_layers.append", "backbone.init_layer", "backbone.Conv2d_fw", "backbone.FeatureWiseTransformation2d_fw", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.gnn.GNN_nl.__init__", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.backbone.init_layer"], ["def", "__init__", "(", "self", ",", "indim", ",", "outdim", ",", "half_res", ",", "leaky", "=", "False", ")", ":", "\n", "    ", "super", "(", "SimpleBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "indim", "=", "indim", "\n", "self", ".", "outdim", "=", "outdim", "\n", "if", "self", ".", "maml", ":", "\n", "      ", "self", ".", "C1", "=", "Conv2d_fw", "(", "indim", ",", "outdim", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", "if", "half_res", "else", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BN1", "=", "BatchNorm2d_fw", "(", "outdim", ")", "\n", "self", ".", "C2", "=", "Conv2d_fw", "(", "outdim", ",", "outdim", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BN2", "=", "FeatureWiseTransformation2d_fw", "(", "outdim", ")", "# feature-wise transformation at the end of each residual block", "\n", "", "else", ":", "\n", "      ", "self", ".", "C1", "=", "nn", ".", "Conv2d", "(", "indim", ",", "outdim", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", "if", "half_res", "else", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BN1", "=", "nn", ".", "BatchNorm2d", "(", "outdim", ")", "\n", "self", ".", "C2", "=", "nn", ".", "Conv2d", "(", "outdim", ",", "outdim", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BN2", "=", "nn", ".", "BatchNorm2d", "(", "outdim", ")", "\n", "", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "if", "not", "leaky", "else", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "if", "not", "leaky", "else", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "parametrized_layers", "=", "[", "self", ".", "C1", ",", "self", ".", "C2", ",", "self", ".", "BN1", ",", "self", ".", "BN2", "]", "\n", "\n", "self", ".", "half_res", "=", "half_res", "\n", "\n", "# if the input number of channels is not equal to the output, then need a 1x1 convolution", "\n", "if", "indim", "!=", "outdim", ":", "\n", "      ", "if", "self", ".", "maml", ":", "\n", "        ", "self", ".", "shortcut", "=", "Conv2d_fw", "(", "indim", ",", "outdim", ",", "1", ",", "2", "if", "half_res", "else", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BNshortcut", "=", "FeatureWiseTransformation2d_fw", "(", "outdim", ")", "\n", "", "else", ":", "\n", "        ", "self", ".", "shortcut", "=", "nn", ".", "Conv2d", "(", "indim", ",", "outdim", ",", "1", ",", "2", "if", "half_res", "else", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BNshortcut", "=", "nn", ".", "BatchNorm2d", "(", "outdim", ")", "\n", "\n", "", "self", ".", "parametrized_layers", ".", "append", "(", "self", ".", "shortcut", ")", "\n", "self", ".", "parametrized_layers", ".", "append", "(", "self", ".", "BNshortcut", ")", "\n", "self", ".", "shortcut_type", "=", "'1x1'", "\n", "", "else", ":", "\n", "      ", "self", ".", "shortcut_type", "=", "'identity'", "\n", "\n", "", "for", "layer", "in", "self", ".", "parametrized_layers", ":", "\n", "      ", "init_layer", "(", "layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.backbone.SimpleBlock.forward": [[249, 259], ["backbone.SimpleBlock.C1", "backbone.SimpleBlock.BN1", "backbone.SimpleBlock.relu1", "backbone.SimpleBlock.C2", "backbone.SimpleBlock.BN2", "backbone.SimpleBlock.relu2", "backbone.SimpleBlock.BNshortcut", "backbone.SimpleBlock.shortcut"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "out", "=", "self", ".", "C1", "(", "x", ")", "\n", "out", "=", "self", ".", "BN1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu1", "(", "out", ")", "\n", "out", "=", "self", ".", "C2", "(", "out", ")", "\n", "out", "=", "self", ".", "BN2", "(", "out", ")", "\n", "short_out", "=", "x", "if", "self", ".", "shortcut_type", "==", "'identity'", "else", "self", ".", "BNshortcut", "(", "self", ".", "shortcut", "(", "x", ")", ")", "\n", "out", "=", "out", "+", "short_out", "\n", "out", "=", "self", ".", "relu2", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.backbone.ConvNet.__init__": [[262, 278], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "backbone.ConvBlock", "trunk.append", "trunk.append", "backbone.Flatten"], "methods", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.gnn.GNN_nl.__init__"], ["  ", "def", "__init__", "(", "self", ",", "depth", ",", "flatten", "=", "True", ")", ":", "\n", "    ", "super", "(", "ConvNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "grads", "=", "[", "]", "\n", "self", ".", "fmaps", "=", "[", "]", "\n", "trunk", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "depth", ")", ":", "\n", "      ", "indim", "=", "3", "if", "i", "==", "0", "else", "64", "\n", "outdim", "=", "64", "\n", "B", "=", "ConvBlock", "(", "indim", ",", "outdim", ",", "pool", "=", "(", "i", "<", "4", ")", ")", "#only pooling for fist 4 layers", "\n", "trunk", ".", "append", "(", "B", ")", "\n", "\n", "", "if", "flatten", ":", "\n", "      ", "trunk", ".", "append", "(", "Flatten", "(", ")", ")", "\n", "\n", "", "self", ".", "trunk", "=", "nn", ".", "Sequential", "(", "*", "trunk", ")", "\n", "self", ".", "final_feat_dim", "=", "1600", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.backbone.ConvNet.forward": [[279, 282], ["backbone.ConvNet.trunk"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "out", "=", "self", ".", "trunk", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.backbone.ConvNetNopool.__init__": [[285, 298], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "backbone.ConvBlock", "trunk.append"], "methods", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.gnn.GNN_nl.__init__"], ["  ", "def", "__init__", "(", "self", ",", "depth", ")", ":", "\n", "    ", "super", "(", "ConvNetNopool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "grads", "=", "[", "]", "\n", "self", ".", "fmaps", "=", "[", "]", "\n", "trunk", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "depth", ")", ":", "\n", "      ", "indim", "=", "3", "if", "i", "==", "0", "else", "64", "\n", "outdim", "=", "64", "\n", "B", "=", "ConvBlock", "(", "indim", ",", "outdim", ",", "pool", "=", "(", "i", "in", "[", "0", ",", "1", "]", ")", ",", "padding", "=", "0", "if", "i", "in", "[", "0", ",", "1", "]", "else", "1", ")", "#only first two layer has pooling and no padding", "\n", "trunk", ".", "append", "(", "B", ")", "\n", "\n", "", "self", ".", "trunk", "=", "nn", ".", "Sequential", "(", "*", "trunk", ")", "\n", "self", ".", "final_feat_dim", "=", "[", "64", ",", "19", ",", "19", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.backbone.ConvNetNopool.forward": [[299, 302], ["backbone.ConvNetNopool.trunk"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "out", "=", "self", ".", "trunk", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.backbone.ResNet.__init__": [[306, 345], ["torch.Module.__init__", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "backbone.init_layer", "backbone.init_layer", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "len", "backbone.Conv2d_fw", "backbone.BatchNorm2d_fw", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "range", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "trunk.append", "trunk.append", "block", "trunk.append", "backbone.Flatten"], "methods", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.gnn.GNN_nl.__init__", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.backbone.init_layer", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.backbone.init_layer"], ["def", "__init__", "(", "self", ",", "block", ",", "list_of_num_layers", ",", "list_of_out_dims", ",", "flatten", "=", "True", ",", "leakyrelu", "=", "False", ")", ":", "\n", "# list_of_num_layers specifies number of layers in each stage", "\n", "# list_of_out_dims specifies number of output channel for each stage", "\n", "    ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "grads", "=", "[", "]", "\n", "self", ".", "fmaps", "=", "[", "]", "\n", "assert", "len", "(", "list_of_num_layers", ")", "==", "4", ",", "'Can have only four stages'", "\n", "if", "self", ".", "maml", ":", "\n", "      ", "conv1", "=", "Conv2d_fw", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "bn1", "=", "BatchNorm2d_fw", "(", "64", ")", "\n", "", "else", ":", "\n", "      ", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "\n", "", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "if", "not", "leakyrelu", "else", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", "pool1", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "init_layer", "(", "conv1", ")", "\n", "init_layer", "(", "bn1", ")", "\n", "\n", "trunk", "=", "[", "conv1", ",", "bn1", ",", "relu", ",", "pool1", "]", "\n", "\n", "indim", "=", "64", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "      ", "for", "j", "in", "range", "(", "list_of_num_layers", "[", "i", "]", ")", ":", "\n", "        ", "half_res", "=", "(", "i", ">=", "1", ")", "and", "(", "j", "==", "0", ")", "\n", "B", "=", "block", "(", "indim", ",", "list_of_out_dims", "[", "i", "]", ",", "half_res", ",", "leaky", "=", "leakyrelu", ")", "\n", "trunk", ".", "append", "(", "B", ")", "\n", "indim", "=", "list_of_out_dims", "[", "i", "]", "\n", "\n", "", "", "if", "flatten", ":", "\n", "      ", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ")", "\n", "trunk", ".", "append", "(", "avgpool", ")", "\n", "trunk", ".", "append", "(", "Flatten", "(", ")", ")", "\n", "self", ".", "final_feat_dim", "=", "indim", "\n", "", "else", ":", "\n", "      ", "self", ".", "final_feat_dim", "=", "[", "indim", ",", "7", ",", "7", "]", "\n", "\n", "", "self", ".", "trunk", "=", "nn", ".", "Sequential", "(", "*", "trunk", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.backbone.ResNet.forward": [[346, 349], ["backbone.ResNet.trunk"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "out", "=", "self", ".", "trunk", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.backbone.init_layer": [[10, 18], ["isinstance", "L.weight.data.normal_", "isinstance", "math.sqrt", "L.weight.data.fill_", "L.bias.data.fill_", "float"], "function", ["None"], ["def", "init_layer", "(", "L", ")", ":", "\n", "# Initialization using fan-in", "\n", "  ", "if", "isinstance", "(", "L", ",", "nn", ".", "Conv2d", ")", ":", "\n", "    ", "n", "=", "L", ".", "kernel_size", "[", "0", "]", "*", "L", ".", "kernel_size", "[", "1", "]", "*", "L", ".", "out_channels", "\n", "L", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "float", "(", "n", ")", ")", ")", "\n", "", "elif", "isinstance", "(", "L", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "    ", "L", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "L", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.backbone.softplus": [[79, 81], ["torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.nn.functional.softplus"], "function", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.backbone.softplus", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.backbone.softplus", "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.backbone.softplus"], ["", "", "def", "softplus", "(", "x", ")", ":", "\n", "  ", "return", "torch", ".", "nn", ".", "functional", ".", "softplus", "(", "x", ",", "beta", "=", "100", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.backbone.Conv4": [[351, 353], ["backbone.ConvNet"], "function", ["None"], ["", "", "def", "Conv4", "(", ")", ":", "\n", "    ", "return", "ConvNet", "(", "4", ")", "\n", "", "def", "Conv6", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.backbone.Conv6": [[353, 355], ["backbone.ConvNet"], "function", ["None"], ["", "def", "Conv6", "(", ")", ":", "\n", "    ", "return", "ConvNet", "(", "6", ")", "\n", "", "def", "Conv4NP", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.backbone.Conv4NP": [[355, 357], ["backbone.ConvNetNopool"], "function", ["None"], ["", "def", "Conv4NP", "(", ")", ":", "\n", "    ", "return", "ConvNetNopool", "(", "4", ")", "\n", "", "def", "Conv6NP", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.backbone.Conv6NP": [[357, 359], ["backbone.ConvNetNopool"], "function", ["None"], ["", "def", "Conv6NP", "(", ")", ":", "\n", "    ", "return", "ConvNetNopool", "(", "6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.backbone.ResNet10": [[361, 363], ["backbone.ResNet"], "function", ["None"], ["", "def", "ResNet10", "(", "flatten", "=", "True", ",", "leakyrelu", "=", "False", ")", ":", "\n", "    ", "return", "ResNet", "(", "SimpleBlock", ",", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "[", "64", ",", "128", ",", "256", ",", "512", "]", ",", "flatten", ",", "leakyrelu", ")", "\n", "", "def", "ResNet18", "(", "flatten", "=", "True", ",", "leakyrelu", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.backbone.ResNet18": [[363, 365], ["backbone.ResNet"], "function", ["None"], ["", "def", "ResNet18", "(", "flatten", "=", "True", ",", "leakyrelu", "=", "False", ")", ":", "\n", "    ", "return", "ResNet", "(", "SimpleBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "[", "64", ",", "128", ",", "256", ",", "512", "]", ",", "flatten", ",", "leakyrelu", ")", "\n", "", "def", "ResNet34", "(", "flatten", "=", "True", ",", "leakyrelu", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.backbone.ResNet34": [[365, 367], ["backbone.ResNet"], "function", ["None"], ["", "def", "ResNet34", "(", "flatten", "=", "True", ",", "leakyrelu", "=", "False", ")", ":", "\n", "    ", "return", "ResNet", "(", "SimpleBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "[", "64", ",", "128", ",", "256", ",", "512", "]", ",", "flatten", ",", "leakyrelu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.gnn.Gconv.__init__": [[32, 42], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "methods.backbone.Linear_fw", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "methods.backbone.BatchNorm1d_fw"], "methods", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.gnn.GNN_nl.__init__"], ["def", "__init__", "(", "self", ",", "nf_input", ",", "nf_output", ",", "J", ",", "bn_bool", "=", "True", ")", ":", "\n", "    ", "super", "(", "Gconv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "J", "=", "J", "\n", "self", ".", "num_inputs", "=", "J", "*", "nf_input", "\n", "self", ".", "num_outputs", "=", "nf_output", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "self", ".", "num_inputs", ",", "self", ".", "num_outputs", ")", "if", "not", "self", ".", "maml", "else", "Linear_fw", "(", "self", ".", "num_inputs", ",", "self", ".", "num_outputs", ")", "\n", "\n", "self", ".", "bn_bool", "=", "bn_bool", "\n", "if", "self", ".", "bn_bool", ":", "\n", "      ", "self", ".", "bn", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "num_outputs", ",", "track_running_stats", "=", "False", ")", "if", "not", "self", ".", "maml", "else", "BatchNorm1d_fw", "(", "self", ".", "num_outputs", ",", "track_running_stats", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.gnn.Gconv.forward": [[43, 57], ["gnn.gmul", "gnn.Gconv.size", "gnn.Gconv.contiguous", "gnn.Gconv.view", "gnn.Gconv.fc", "gnn.Gconv.view", "gnn.Gconv.bn"], "methods", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.gnn.gmul"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "    ", "W", "=", "input", "[", "0", "]", "\n", "x", "=", "gmul", "(", "input", ")", "# out has size (bs, N, num_inputs)", "\n", "#if self.J == 1:", "\n", "#    x = torch.abs(x)", "\n", "x_size", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "num_inputs", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "# has size (bs*N, num_outputs)", "\n", "\n", "if", "self", ".", "bn_bool", ":", "\n", "      ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "", "x", "=", "x", ".", "view", "(", "*", "x_size", "[", ":", "-", "1", "]", ",", "self", ".", "num_outputs", ")", "\n", "return", "W", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.gnn.Wcompute.__init__": [[60, 77], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "methods.backbone.Conv2d_fw", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "methods.backbone.BatchNorm2d_fw", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "methods.backbone.Conv2d_fw", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "methods.backbone.BatchNorm2d_fw", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "methods.backbone.Conv2d_fw", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "methods.backbone.BatchNorm2d_fw", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "methods.backbone.Conv2d_fw", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "methods.backbone.BatchNorm2d_fw", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "methods.backbone.Conv2d_fw", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.gnn.GNN_nl.__init__"], ["def", "__init__", "(", "self", ",", "input_features", ",", "nf", ",", "operator", "=", "'J2'", ",", "activation", "=", "'softmax'", ",", "ratio", "=", "[", "2", ",", "2", ",", "1", ",", "1", "]", ",", "num_operators", "=", "1", ",", "drop", "=", "False", ")", ":", "\n", "    ", "super", "(", "Wcompute", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "nf", "\n", "self", ".", "operator", "=", "operator", "\n", "self", ".", "conv2d_1", "=", "nn", ".", "Conv2d", "(", "input_features", ",", "int", "(", "nf", "*", "ratio", "[", "0", "]", ")", ",", "1", ",", "stride", "=", "1", ")", "if", "not", "self", ".", "maml", "else", "Conv2d_fw", "(", "input_features", ",", "int", "(", "nf", "*", "ratio", "[", "0", "]", ")", ",", "1", ",", "stride", "=", "1", ")", "\n", "self", ".", "bn_1", "=", "nn", ".", "BatchNorm2d", "(", "int", "(", "nf", "*", "ratio", "[", "0", "]", ")", ",", "track_running_stats", "=", "False", ")", "if", "not", "self", ".", "maml", "else", "BatchNorm2d_fw", "(", "int", "(", "nf", "*", "ratio", "[", "0", "]", ")", ",", "track_running_stats", "=", "False", ")", "\n", "self", ".", "drop", "=", "drop", "\n", "if", "self", ".", "drop", ":", "\n", "      ", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "0.3", ")", "\n", "", "self", ".", "conv2d_2", "=", "nn", ".", "Conv2d", "(", "int", "(", "nf", "*", "ratio", "[", "0", "]", ")", ",", "int", "(", "nf", "*", "ratio", "[", "1", "]", ")", ",", "1", ",", "stride", "=", "1", ")", "if", "not", "self", ".", "maml", "else", "Conv2d_fw", "(", "int", "(", "nf", "*", "ratio", "[", "0", "]", ")", ",", "int", "(", "nf", "*", "ratio", "[", "1", "]", ")", ",", "1", ",", "stride", "=", "1", ")", "\n", "self", ".", "bn_2", "=", "nn", ".", "BatchNorm2d", "(", "int", "(", "nf", "*", "ratio", "[", "1", "]", ")", ",", "track_running_stats", "=", "False", ")", "if", "not", "self", ".", "maml", "else", "BatchNorm2d_fw", "(", "int", "(", "nf", "*", "ratio", "[", "1", "]", ")", ",", "track_running_stats", "=", "False", ")", "\n", "self", ".", "conv2d_3", "=", "nn", ".", "Conv2d", "(", "int", "(", "nf", "*", "ratio", "[", "1", "]", ")", ",", "nf", "*", "ratio", "[", "2", "]", ",", "1", ",", "stride", "=", "1", ")", "if", "not", "self", ".", "maml", "else", "Conv2d_fw", "(", "int", "(", "nf", "*", "ratio", "[", "1", "]", ")", ",", "nf", "*", "ratio", "[", "2", "]", ",", "1", ",", "stride", "=", "1", ")", "\n", "self", ".", "bn_3", "=", "nn", ".", "BatchNorm2d", "(", "nf", "*", "ratio", "[", "2", "]", ",", "track_running_stats", "=", "False", ")", "if", "not", "self", ".", "maml", "else", "BatchNorm2d_fw", "(", "nf", "*", "ratio", "[", "2", "]", ",", "track_running_stats", "=", "False", ")", "\n", "self", ".", "conv2d_4", "=", "nn", ".", "Conv2d", "(", "nf", "*", "ratio", "[", "2", "]", ",", "nf", "*", "ratio", "[", "3", "]", ",", "1", ",", "stride", "=", "1", ")", "if", "not", "self", ".", "maml", "else", "Conv2d_fw", "(", "nf", "*", "ratio", "[", "2", "]", ",", "nf", "*", "ratio", "[", "3", "]", ",", "1", ",", "stride", "=", "1", ")", "\n", "self", ".", "bn_4", "=", "nn", ".", "BatchNorm2d", "(", "nf", "*", "ratio", "[", "3", "]", ",", "track_running_stats", "=", "False", ")", "if", "not", "self", ".", "maml", "else", "BatchNorm2d_fw", "(", "nf", "*", "ratio", "[", "3", "]", ",", "track_running_stats", "=", "False", ")", "\n", "self", ".", "conv2d_last", "=", "nn", ".", "Conv2d", "(", "nf", ",", "num_operators", ",", "1", ",", "stride", "=", "1", ")", "if", "not", "self", ".", "maml", "else", "Conv2d_fw", "(", "nf", ",", "num_operators", ",", "1", ",", "stride", "=", "1", ")", "\n", "self", ".", "activation", "=", "activation", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.gnn.Wcompute.forward": [[78, 133], ["x.unsqueeze", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "gnn.Wcompute.conv2d_1", "gnn.Wcompute.bn_1", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "gnn.Wcompute.conv2d_2", "gnn.Wcompute.bn_2", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "gnn.Wcompute.conv2d_3", "gnn.Wcompute.bn_3", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "gnn.Wcompute.conv2d_4", "gnn.Wcompute.bn_4", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "gnn.Wcompute.conv2d_last", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "gnn.Wcompute.dropout", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.cat.contiguous", "torch.cat.contiguous", "torch.cat.contiguous", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.softmax", "torch.softmax", "torch.softmax", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "W_id.expand_as"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "W_id", ")", ":", "\n", "    ", "W1", "=", "x", ".", "unsqueeze", "(", "2", ")", "\n", "W2", "=", "torch", ".", "transpose", "(", "W1", ",", "1", ",", "2", ")", "#size: bs x N x N x num_features", "\n", "W_new", "=", "torch", ".", "abs", "(", "W1", "-", "W2", ")", "#size: bs x N x N x num_features", "\n", "W_new", "=", "torch", ".", "transpose", "(", "W_new", ",", "1", ",", "3", ")", "#size: bs x num_features x N x N", "\n", "\n", "W_new", "=", "self", ".", "conv2d_1", "(", "W_new", ")", "\n", "W_new", "=", "self", ".", "bn_1", "(", "W_new", ")", "\n", "W_new", "=", "F", ".", "leaky_relu", "(", "W_new", ")", "\n", "if", "self", ".", "drop", ":", "\n", "      ", "W_new", "=", "self", ".", "dropout", "(", "W_new", ")", "\n", "\n", "", "W_new", "=", "self", ".", "conv2d_2", "(", "W_new", ")", "\n", "W_new", "=", "self", ".", "bn_2", "(", "W_new", ")", "\n", "W_new", "=", "F", ".", "leaky_relu", "(", "W_new", ")", "\n", "\n", "W_new", "=", "self", ".", "conv2d_3", "(", "W_new", ")", "\n", "W_new", "=", "self", ".", "bn_3", "(", "W_new", ")", "\n", "W_new", "=", "F", ".", "leaky_relu", "(", "W_new", ")", "\n", "\n", "W_new", "=", "self", ".", "conv2d_4", "(", "W_new", ")", "\n", "W_new", "=", "self", ".", "bn_4", "(", "W_new", ")", "\n", "W_new", "=", "F", ".", "leaky_relu", "(", "W_new", ")", "\n", "\n", "W_new", "=", "self", ".", "conv2d_last", "(", "W_new", ")", "\n", "W_new", "=", "torch", ".", "transpose", "(", "W_new", ",", "1", ",", "3", ")", "#size: bs x N x N x 1", "\n", "\n", "if", "self", ".", "activation", "==", "'softmax'", ":", "\n", "      ", "W_new", "=", "W_new", "-", "W_id", ".", "expand_as", "(", "W_new", ")", "*", "1e8", "\n", "W_new", "=", "torch", ".", "transpose", "(", "W_new", ",", "2", ",", "3", ")", "\n", "# Applying Softmax", "\n", "W_new", "=", "W_new", ".", "contiguous", "(", ")", "\n", "W_new_size", "=", "W_new", ".", "size", "(", ")", "\n", "W_new", "=", "W_new", ".", "view", "(", "-", "1", ",", "W_new", ".", "size", "(", "3", ")", ")", "\n", "W_new", "=", "F", ".", "softmax", "(", "W_new", ",", "dim", "=", "1", ")", "\n", "W_new", "=", "W_new", ".", "view", "(", "W_new_size", ")", "\n", "# Softmax applied", "\n", "W_new", "=", "torch", ".", "transpose", "(", "W_new", ",", "2", ",", "3", ")", "\n", "\n", "", "elif", "self", ".", "activation", "==", "'sigmoid'", ":", "\n", "      ", "W_new", "=", "F", ".", "sigmoid", "(", "W_new", ")", "\n", "W_new", "*=", "(", "1", "-", "W_id", ")", "\n", "", "elif", "self", ".", "activation", "==", "'none'", ":", "\n", "      ", "W_new", "*=", "(", "1", "-", "W_id", ")", "\n", "", "else", ":", "\n", "      ", "raise", "(", "NotImplementedError", ")", "\n", "\n", "", "if", "self", ".", "operator", "==", "'laplace'", ":", "\n", "      ", "W_new", "=", "W_id", "-", "W_new", "\n", "", "elif", "self", ".", "operator", "==", "'J2'", ":", "\n", "      ", "W_new", "=", "torch", ".", "cat", "(", "[", "W_id", ",", "W_new", "]", ",", "3", ")", "\n", "", "else", ":", "\n", "      ", "raise", "(", "NotImplementedError", ")", "\n", "\n", "", "return", "W_new", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.gnn.GNN_nl.__init__": [[135, 153], ["torch.Module.__init__", "range", "gnn.Wcompute", "gnn.Gconv", "gnn.GNN_nl.add_module", "gnn.GNN_nl.add_module", "gnn.Wcompute", "gnn.Gconv", "gnn.Wcompute", "gnn.Gconv", "int", "int", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.gnn.GNN_nl.__init__"], ["  ", "def", "__init__", "(", "self", ",", "input_features", ",", "nf", ",", "train_N_way", ")", ":", "\n", "    ", "super", "(", "GNN_nl", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_features", "=", "input_features", "\n", "self", ".", "nf", "=", "nf", "\n", "self", ".", "num_layers", "=", "2", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "      ", "if", "i", "==", "0", ":", "\n", "        ", "module_w", "=", "Wcompute", "(", "self", ".", "input_features", ",", "nf", ",", "operator", "=", "'J2'", ",", "activation", "=", "'softmax'", ",", "ratio", "=", "[", "2", ",", "2", ",", "1", ",", "1", "]", ")", "\n", "module_l", "=", "Gconv", "(", "self", ".", "input_features", ",", "int", "(", "nf", "/", "2", ")", ",", "2", ")", "\n", "", "else", ":", "\n", "        ", "module_w", "=", "Wcompute", "(", "self", ".", "input_features", "+", "int", "(", "nf", "/", "2", ")", "*", "i", ",", "nf", ",", "operator", "=", "'J2'", ",", "activation", "=", "'softmax'", ",", "ratio", "=", "[", "2", ",", "2", ",", "1", ",", "1", "]", ")", "\n", "module_l", "=", "Gconv", "(", "self", ".", "input_features", "+", "int", "(", "nf", "/", "2", ")", "*", "i", ",", "int", "(", "nf", "/", "2", ")", ",", "2", ")", "\n", "", "self", ".", "add_module", "(", "'layer_w{}'", ".", "format", "(", "i", ")", ",", "module_w", ")", "\n", "self", ".", "add_module", "(", "'layer_l{}'", ".", "format", "(", "i", ")", ",", "module_l", ")", "\n", "\n", "", "self", ".", "w_comp_last", "=", "Wcompute", "(", "self", ".", "input_features", "+", "int", "(", "self", ".", "nf", "/", "2", ")", "*", "self", ".", "num_layers", ",", "nf", ",", "operator", "=", "'J2'", ",", "activation", "=", "'softmax'", ",", "ratio", "=", "[", "2", ",", "2", ",", "1", ",", "1", "]", ")", "\n", "self", ".", "layer_last", "=", "Gconv", "(", "self", ".", "input_features", "+", "int", "(", "self", ".", "nf", "/", "2", ")", "*", "self", ".", "num_layers", ",", "train_N_way", ",", "2", ",", "bn_bool", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.gnn.GNN_nl.forward": [[154, 167], ["torch.eye().unsqueeze().repeat().unsqueeze", "torch.eye().unsqueeze().repeat().unsqueeze", "torch.eye().unsqueeze().repeat().unsqueeze", "torch.eye().unsqueeze().repeat().unsqueeze", "torch.eye().unsqueeze().repeat().unsqueeze", "torch.eye().unsqueeze().repeat().unsqueeze", "torch.eye().unsqueeze().repeat().unsqueeze", "torch.eye().unsqueeze().repeat().unsqueeze", "torch.eye().unsqueeze().repeat().unsqueeze", "range", "gnn.GNN_nl.w_comp_last", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "gnn.GNN_nl.layer_last", "torch.eye().unsqueeze().repeat", "torch.eye().unsqueeze().repeat", "torch.eye().unsqueeze().repeat", "torch.eye().unsqueeze().repeat", "torch.eye().unsqueeze().repeat", "torch.eye().unsqueeze().repeat", "torch.eye().unsqueeze().repeat", "torch.eye().unsqueeze().repeat", "torch.eye().unsqueeze().repeat", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.cat.size", "torch.cat.size", "torch.cat.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "W_init", "=", "torch", ".", "eye", "(", "x", ".", "size", "(", "1", ")", ",", "device", "=", "x", ".", "device", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ")", ".", "unsqueeze", "(", "3", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "      ", "Wi", "=", "self", ".", "_modules", "[", "'layer_w{}'", ".", "format", "(", "i", ")", "]", "(", "x", ",", "W_init", ")", "\n", "\n", "x_new", "=", "F", ".", "leaky_relu", "(", "self", ".", "_modules", "[", "'layer_l{}'", ".", "format", "(", "i", ")", "]", "(", "[", "Wi", ",", "x", "]", ")", "[", "1", "]", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "x_new", "]", ",", "2", ")", "\n", "\n", "", "Wl", "=", "self", ".", "w_comp_last", "(", "x", ",", "W_init", ")", "\n", "out", "=", "self", ".", "layer_last", "(", "[", "Wl", ",", "x", "]", ")", "[", "1", "]", "\n", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lovelyqian_Meta-FDMixup.methods.gnn.gmul": [[16, 29], ["torch.cat().squeeze.size", "torch.cat().squeeze.split", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.bmm", "torch.bmm", "torch.bmm", "torch.cat.split", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "function", ["None"], ["", "def", "gmul", "(", "input", ")", ":", "\n", "  ", "W", ",", "x", "=", "input", "\n", "# x is a tensor of size (bs, N, num_features)", "\n", "# W is a tensor of size (bs, N, N, J)", "\n", "#x_size = x.size()", "\n", "W_size", "=", "W", ".", "size", "(", ")", "\n", "N", "=", "W_size", "[", "-", "2", "]", "\n", "W", "=", "W", ".", "split", "(", "1", ",", "3", ")", "\n", "W", "=", "torch", ".", "cat", "(", "W", ",", "1", ")", ".", "squeeze", "(", "3", ")", "# W is now a tensor of size (bs, J*N, N)", "\n", "output", "=", "torch", ".", "bmm", "(", "W", ",", "x", ")", "# output has size (bs, J*N, num_features)", "\n", "output", "=", "output", ".", "split", "(", "N", ",", "1", ")", "\n", "output", "=", "torch", ".", "cat", "(", "output", ",", "2", ")", "# output has size (bs, N, J*num_features)", "\n", "return", "output", "\n", "\n"]]}