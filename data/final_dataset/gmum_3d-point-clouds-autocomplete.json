{"home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.metrics._average_precision": [[18, 22], ["torch.arange().type_as", "corrects.sum", "torch.arange", "query.view", "corrects.cumsum"], "function", ["None"], ["def", "_average_precision", "(", "query", ":", "torch", ".", "Tensor", ",", "retrieved", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "corrects", "=", "(", "retrieved", "==", "query", ".", "view", "(", "-", "1", ",", "1", ")", ")", ".", "half", "(", ")", "\n", "denominators", "=", "torch", ".", "arange", "(", "1", ",", "retrieved", ".", "shape", "[", "1", "]", "+", "1", ")", ".", "type_as", "(", "corrects", ")", "\n", "return", "(", "corrects", "*", "corrects", ".", "cumsum", "(", "dim", "=", "1", ",", "dtype", "=", "corrects", ".", "dtype", ")", "/", "denominators", ")", ".", "sum", "(", "dim", "=", "1", ")", "/", "corrects", ".", "sum", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.metrics.average_precision": [[24, 28], ["torch.arange().type_as", "corrects.sum", "torch.arange", "query.view", "retrieved.size", "corrects.cumsum"], "function", ["None"], ["", "def", "average_precision", "(", "query", ":", "torch", ".", "Tensor", ",", "retrieved", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "corrects", "=", "(", "query", ".", "view", "(", "-", "1", ",", "1", ")", "==", "retrieved", ")", ".", "half", "(", ")", "\n", "denominators", "=", "torch", ".", "arange", "(", "1", ",", "retrieved", ".", "size", "(", "1", ")", "+", "1", ")", ".", "type_as", "(", "corrects", ")", "\n", "return", "(", "corrects", "*", "corrects", ".", "cumsum", "(", "dim", "=", "1", ",", "dtype", "=", "corrects", ".", "dtype", ")", "/", "denominators", ")", ".", "sum", "(", "dim", "=", "1", ")", "/", "corrects", ".", "sum", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.metrics.mean_average_precision": [[30, 32], ["average_precision().mean", "metrics.average_precision"], "function", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.metrics.average_precision"], ["", "def", "mean_average_precision", "(", "query", ":", "torch", ".", "Tensor", ",", "retrieved", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "return", "average_precision", "(", "query", ",", "retrieved", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.metrics.average_precision_numpy": [[34, 38], ["numpy.arange", "corrects.sum", "query.reshape", "corrects.cumsum"], "function", ["None"], ["", "def", "average_precision_numpy", "(", "query", ",", "retrieved", ")", ":", "\n", "    ", "corrects", "=", "(", "retrieved", "==", "query", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "denominators", "=", "np", ".", "arange", "(", "1", ",", "retrieved", ".", "shape", "[", "1", "]", "+", "1", ")", "\n", "return", "(", "(", "corrects", "*", "corrects", ".", "cumsum", "(", "axis", "=", "1", ")", ")", "/", "denominators", ")", ".", "sum", "(", "axis", "=", "1", ")", "/", "corrects", ".", "sum", "(", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.metrics.mean_average_precision_numpy": [[40, 42], ["numpy.mean", "metrics.average_precision"], "function", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.metrics.average_precision"], ["", "def", "mean_average_precision_numpy", "(", "query", ",", "retrieved", ")", ":", "\n", "    ", "return", "np", ".", "mean", "(", "average_precision", "(", "query", ",", "retrieved", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.metrics.earth_mover_distance": [[44, 69], ["sample_pcs.unsqueeze.contiguous", "ref_pcs.unsqueeze.contiguous", "min", "range", "torch.cat", "sample_pcs.unsqueeze.dim", "sample_pcs.unsqueeze.unsqueeze", "ref_pcs.unsqueeze.dim", "ref_pcs.unsqueeze.unsqueeze", "min", "metrics.emd_approx", "emd_lst.append"], "function", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.metrics.emd_approx"], ["", "def", "earth_mover_distance", "(", "sample_pcs", ",", "ref_pcs", ",", "batch_size", "=", "None", ")", ":", "\n", "    ", "\"\"\"Use this function to calculate EMD in our experiments.\"\"\"", "\n", "sample_pcs", "=", "sample_pcs", ".", "contiguous", "(", ")", "\n", "ref_pcs", "=", "ref_pcs", ".", "contiguous", "(", ")", "\n", "if", "sample_pcs", ".", "dim", "(", ")", "==", "2", ":", "\n", "        ", "sample_pcs", "=", "sample_pcs", ".", "unsqueeze", "(", "0", ")", "\n", "", "if", "ref_pcs", ".", "dim", "(", ")", "==", "2", ":", "\n", "        ", "ref_pcs", "=", "ref_pcs", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "N_sample", "=", "sample_pcs", ".", "shape", "[", "0", "]", "\n", "N_ref", "=", "ref_pcs", ".", "shape", "[", "0", "]", "\n", "assert", "N_sample", "==", "N_ref", ",", "f'REF:{N_ref} SMP:{N_sample}'", "\n", "\n", "batch_size", "=", "min", "(", "batch_size", "or", "N_sample", ",", "300", ")", "\n", "\n", "emd_lst", "=", "[", "]", "\n", "for", "b_start", "in", "range", "(", "0", ",", "N_sample", ",", "batch_size", ")", ":", "\n", "        ", "b_end", "=", "min", "(", "N_sample", ",", "b_start", "+", "batch_size", ")", "\n", "sample_batch", "=", "sample_pcs", "[", "b_start", ":", "b_end", "]", "\n", "ref_batch", "=", "ref_pcs", "[", "b_start", ":", "b_end", "]", "\n", "\n", "emd_batch", "=", "emd_approx", "(", "sample_batch", ",", "ref_batch", ")", "\n", "emd_lst", ".", "append", "(", "emd_batch", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "emd_lst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.metrics.emd_approx": [[71, 77], ["utils.pytorch_structural_losses.match_cost.match_cost", "sample.size", "sample.size", "ref.size", "float"], "function", ["None"], ["", "def", "emd_approx", "(", "sample", ",", "ref", ")", ":", "\n", "    ", "B", ",", "N", ",", "N_ref", "=", "sample", ".", "size", "(", "0", ")", ",", "sample", ".", "size", "(", "1", ")", ",", "ref", ".", "size", "(", "1", ")", "\n", "assert", "N", "==", "N_ref", ",", "\"Not sure what would EMD do in this case\"", "\n", "emd", "=", "match_cost", "(", "sample", ",", "ref", ")", "# (B,)", "\n", "emd_norm", "=", "emd", "/", "float", "(", "N", ")", "# (B,)", "\n", "return", "emd_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.metrics.dist_chamfer": [[78, 84], ["chamfer_loss.batch_pairwise_dist", "chamfer_loss.batch_pairwise_dist.min", "chamfer_loss.batch_pairwise_dist.min"], "function", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.losses.champfer_loss.ChamferLoss.batch_pairwise_dist"], ["", "def", "dist_chamfer", "(", "x", ",", "y", ",", "chamfer_loss", ")", ":", "\n", "# from losses.champfer_loss import ChamferLoss", "\n", "# from utils.util import cuda_setup", "\n", "# chamfer_loss = ChamferLoss().to(cuda_setup())", "\n", "    ", "P", "=", "chamfer_loss", ".", "batch_pairwise_dist", "(", "x", ",", "y", ")", "\n", "return", "P", ".", "min", "(", "1", ")", "[", "0", "]", ",", "P", ".", "min", "(", "2", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.metrics.EMD_CD": [[86, 119], ["range", "min", "metrics.dist_chamfer", "cd_lst.append", "metrics.emd_approx", "emd_lst.append", "torch.cat().mean", "torch.cat().mean", "torch.cat", "torch.cat", "dl.mean", "dr.mean", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.metrics.dist_chamfer", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.metrics.emd_approx"], ["", "def", "EMD_CD", "(", "sample_pcs", ",", "ref_pcs", ",", "batch_size", ",", "reduced", "=", "True", ")", ":", "\n", "    ", "N_sample", "=", "sample_pcs", ".", "shape", "[", "0", "]", "\n", "N_ref", "=", "ref_pcs", ".", "shape", "[", "0", "]", "\n", "assert", "N_sample", "==", "N_ref", ",", "f'REF:{N_ref} SMP:{N_sample}'", "\n", "\n", "cd_lst", "=", "[", "]", "\n", "emd_lst", "=", "[", "]", "\n", "iterator", "=", "range", "(", "0", ",", "N_sample", ",", "batch_size", ")", "\n", "\n", "for", "b_start", "in", "iterator", ":", "\n", "        ", "b_end", "=", "min", "(", "N_sample", ",", "b_start", "+", "batch_size", ")", "\n", "sample_batch", "=", "sample_pcs", "[", "b_start", ":", "b_end", "]", "\n", "ref_batch", "=", "ref_pcs", "[", "b_start", ":", "b_end", "]", "\n", "\n", "dl", ",", "dr", "=", "dist_chamfer", "(", "sample_batch", ",", "ref_batch", ")", "\n", "cd_lst", ".", "append", "(", "dl", ".", "mean", "(", "dim", "=", "1", ")", "+", "dr", ".", "mean", "(", "dim", "=", "1", ")", ")", "\n", "\n", "emd_batch", "=", "emd_approx", "(", "sample_batch", ",", "ref_batch", ")", "\n", "emd_lst", ".", "append", "(", "emd_batch", ")", "\n", "\n", "", "if", "reduced", ":", "\n", "        ", "cd", "=", "torch", ".", "cat", "(", "cd_lst", ")", ".", "mean", "(", ")", "\n", "emd", "=", "torch", ".", "cat", "(", "emd_lst", ")", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "        ", "cd", "=", "torch", ".", "cat", "(", "cd_lst", ")", "\n", "emd", "=", "torch", ".", "cat", "(", "emd_lst", ")", "\n", "\n", "", "results", "=", "{", "\n", "'MMD-CD'", ":", "cd", ",", "\n", "'MMD-EMD'", ":", "emd", "\n", "}", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.metrics._pairwise_EMD_CD_": [[121, 159], ["range", "tqdm.tqdm", "torch.cat", "torch.cat", "range", "torch.cat", "torch.cat", "torch.cat.append", "torch.cat.append", "min", "ref_batch.size", "sample_batch.view().expand", "sample_batch_exp.contiguous.contiguous", "metrics.dist_chamfer", "torch.cat.append", "metrics.emd_approx", "torch.cat.append", "emd_approx.view", "sample_batch.view", "dl.mean", "dr.mean"], "function", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.metrics.dist_chamfer", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.metrics.emd_approx"], ["", "def", "_pairwise_EMD_CD_", "(", "sample_pcs", ",", "ref_pcs", ",", "batch_size", ",", "chamfer_loss", ")", ":", "\n", "    ", "N_sample", "=", "sample_pcs", ".", "shape", "[", "0", "]", "\n", "N_ref", "=", "ref_pcs", ".", "shape", "[", "0", "]", "\n", "all_cd", "=", "[", "]", "\n", "all_emd", "=", "[", "]", "\n", "iterator", "=", "range", "(", "N_sample", ")", "\n", "for", "sample_b_start", "in", "tqdm", "(", "iterator", ")", ":", "\n", "        ", "sample_batch", "=", "sample_pcs", "[", "sample_b_start", "]", "\n", "\n", "cd_lst", "=", "[", "]", "\n", "emd_lst", "=", "[", "]", "\n", "for", "ref_b_start", "in", "range", "(", "0", ",", "N_ref", ",", "batch_size", ")", ":", "\n", "            ", "ref_b_end", "=", "min", "(", "N_ref", ",", "ref_b_start", "+", "batch_size", ")", "\n", "ref_batch", "=", "ref_pcs", "[", "ref_b_start", ":", "ref_b_end", "]", "\n", "\n", "batch_size_ref", "=", "ref_batch", ".", "size", "(", "0", ")", "\n", "sample_batch_exp", "=", "sample_batch", ".", "view", "(", "1", ",", "-", "1", ",", "3", ")", ".", "expand", "(", "batch_size_ref", ",", "-", "1", ",", "-", "1", ")", "\n", "sample_batch_exp", "=", "sample_batch_exp", ".", "contiguous", "(", ")", "\n", "\n", "# dl, dr = nn_distance(sample_batch_exp, ref_batch)", "\n", "\n", "dl", ",", "dr", "=", "dist_chamfer", "(", "sample_batch_exp", ",", "ref_batch", ",", "chamfer_loss", ")", "\n", "\n", "\n", "cd_lst", ".", "append", "(", "(", "dl", ".", "mean", "(", "dim", "=", "1", ")", "+", "dr", ".", "mean", "(", "dim", "=", "1", ")", ")", ".", "view", "(", "1", ",", "-", "1", ")", ")", "\n", "\n", "emd_batch", "=", "emd_approx", "(", "sample_batch_exp", ",", "ref_batch", ")", "\n", "emd_lst", ".", "append", "(", "emd_batch", ".", "view", "(", "1", ",", "-", "1", ")", ")", "\n", "\n", "", "cd_lst", "=", "torch", ".", "cat", "(", "cd_lst", ",", "dim", "=", "1", ")", "\n", "emd_lst", "=", "torch", ".", "cat", "(", "emd_lst", ",", "dim", "=", "1", ")", "\n", "all_cd", ".", "append", "(", "cd_lst", ")", "\n", "all_emd", ".", "append", "(", "emd_lst", ")", "\n", "\n", "", "all_cd", "=", "torch", ".", "cat", "(", "all_cd", ",", "dim", "=", "0", ")", "# N_sample, N_ref", "\n", "all_emd", "=", "torch", ".", "cat", "(", "all_emd", ",", "dim", "=", "0", ")", "# N_sample, N_ref", "\n", "\n", "return", "all_cd", ",", "all_emd", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.metrics.knn": [[162, 192], ["Mxx.size", "Myy.size", "torch.cat().to", "torch.cat", "float", "torch.zeros().to", "range", "torch.ge().float", "s.update", "M.abs().sqrt.abs().sqrt", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.cat().to.index_select", "torch.ge", "torch.eq().float().mean", "M.abs().sqrt.abs", "torch.diag", "torch.ones", "torch.zeros", "Mxy.transpose", "torch.ones().to", "torch.eq().float", "torch.ones().to", "float", "torch.ones", "torch.eq", "torch.ones"], "function", ["None"], ["", "def", "knn", "(", "Mxx", ",", "Mxy", ",", "Myy", ",", "k", ",", "sqrt", "=", "False", ")", ":", "\n", "    ", "n0", "=", "Mxx", ".", "size", "(", "0", ")", "\n", "n1", "=", "Myy", ".", "size", "(", "0", ")", "\n", "label", "=", "torch", ".", "cat", "(", "(", "torch", ".", "ones", "(", "n0", ")", ",", "torch", ".", "zeros", "(", "n1", ")", ")", ")", ".", "to", "(", "Mxx", ")", "\n", "M", "=", "torch", ".", "cat", "(", "(", "torch", ".", "cat", "(", "(", "Mxx", ",", "Mxy", ")", ",", "1", ")", ",", "torch", ".", "cat", "(", "(", "Mxy", ".", "transpose", "(", "0", ",", "1", ")", ",", "Myy", ")", ",", "1", ")", ")", ",", "0", ")", "\n", "if", "sqrt", ":", "\n", "        ", "M", "=", "M", ".", "abs", "(", ")", ".", "sqrt", "(", ")", "\n", "", "INFINITY", "=", "float", "(", "'inf'", ")", "\n", "val", ",", "idx", "=", "(", "M", "+", "torch", ".", "diag", "(", "INFINITY", "*", "torch", ".", "ones", "(", "n0", "+", "n1", ")", ".", "to", "(", "Mxx", ")", ")", ")", ".", "topk", "(", "k", ",", "0", ",", "False", ")", "\n", "\n", "count", "=", "torch", ".", "zeros", "(", "n0", "+", "n1", ")", ".", "to", "(", "Mxx", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "k", ")", ":", "\n", "        ", "count", "=", "count", "+", "label", ".", "index_select", "(", "0", ",", "idx", "[", "i", "]", ")", "\n", "", "pred", "=", "torch", ".", "ge", "(", "count", ",", "(", "float", "(", "k", ")", "/", "2", ")", "*", "torch", ".", "ones", "(", "n0", "+", "n1", ")", ".", "to", "(", "Mxx", ")", ")", ".", "float", "(", ")", "\n", "\n", "s", "=", "{", "\n", "'tp'", ":", "(", "pred", "*", "label", ")", ".", "sum", "(", ")", ",", "\n", "'fp'", ":", "(", "pred", "*", "(", "1", "-", "label", ")", ")", ".", "sum", "(", ")", ",", "\n", "'fn'", ":", "(", "(", "1", "-", "pred", ")", "*", "label", ")", ".", "sum", "(", ")", ",", "\n", "'tn'", ":", "(", "(", "1", "-", "pred", ")", "*", "(", "1", "-", "label", ")", ")", ".", "sum", "(", ")", ",", "\n", "}", "\n", "\n", "s", ".", "update", "(", "{", "\n", "'precision'", ":", "s", "[", "'tp'", "]", "/", "(", "s", "[", "'tp'", "]", "+", "s", "[", "'fp'", "]", "+", "1e-10", ")", ",", "\n", "'recall'", ":", "s", "[", "'tp'", "]", "/", "(", "s", "[", "'tp'", "]", "+", "s", "[", "'fn'", "]", "+", "1e-10", ")", ",", "\n", "'acc_t'", ":", "s", "[", "'tp'", "]", "/", "(", "s", "[", "'tp'", "]", "+", "s", "[", "'fn'", "]", "+", "1e-10", ")", ",", "\n", "'acc_f'", ":", "s", "[", "'tn'", "]", "/", "(", "s", "[", "'tn'", "]", "+", "s", "[", "'fp'", "]", "+", "1e-10", ")", ",", "\n", "'acc'", ":", "torch", ".", "eq", "(", "label", ",", "pred", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ",", "\n", "}", ")", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.metrics.mmd_cov": [[194, 206], ["torch.min", "torch.min", "min_val.mean", "min_val_fromsmp.mean", "torch.tensor().to", "all_dist.size", "all_dist.size", "float", "float", "min_idx.unique().view().size", "torch.tensor", "min_idx.unique().view", "min_idx.unique"], "function", ["None"], ["", "def", "mmd_cov", "(", "all_dist", ")", ":", "\n", "    ", "N_sample", ",", "N_ref", "=", "all_dist", ".", "size", "(", "0", ")", ",", "all_dist", ".", "size", "(", "1", ")", "\n", "min_val_fromsmp", ",", "min_idx", "=", "torch", ".", "min", "(", "all_dist", ",", "dim", "=", "1", ")", "\n", "min_val", ",", "_", "=", "torch", ".", "min", "(", "all_dist", ",", "dim", "=", "0", ")", "\n", "mmd", "=", "min_val", ".", "mean", "(", ")", "\n", "mmd_smp", "=", "min_val_fromsmp", ".", "mean", "(", ")", "\n", "cov", "=", "float", "(", "min_idx", ".", "unique", "(", ")", ".", "view", "(", "-", "1", ")", ".", "size", "(", "0", ")", ")", "/", "float", "(", "N_ref", ")", "\n", "cov", "=", "torch", ".", "tensor", "(", "cov", ")", ".", "to", "(", "all_dist", ")", "\n", "return", "{", "\n", "'mmd(Fidelity)'", ":", "mmd", ",", "\n", "'cov(Coverage)'", ":", "cov", ",", "\n", "'mmd_smp'", ":", "mmd_smp", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.metrics.compute_all_metrics": [[209, 239], ["metrics._pairwise_EMD_CD_", "metrics.mmd_cov", "results.update", "metrics.mmd_cov", "results.update", "M_rs_cd.t", "M_rs_emd.t", "mmd_cov.items", "mmd_cov.items"], "function", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.metrics._pairwise_EMD_CD_", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.metrics.mmd_cov", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.metrics.mmd_cov"], ["", "def", "compute_all_metrics", "(", "sample_pcs", ",", "ref_pcs", ",", "batch_size", ",", "chamfer_loss", ")", ":", "\n", "    ", "results", "=", "{", "}", "\n", "\n", "M_rs_cd", ",", "M_rs_emd", "=", "_pairwise_EMD_CD_", "(", "ref_pcs", ",", "sample_pcs", ",", "batch_size", ",", "chamfer_loss", ")", "\n", "\n", "res_cd", "=", "mmd_cov", "(", "M_rs_cd", ".", "t", "(", ")", ")", "\n", "results", ".", "update", "(", "{", "\n", "\"%s-CD\"", "%", "k", ":", "v", "for", "k", ",", "v", "in", "res_cd", ".", "items", "(", ")", "\n", "}", ")", "\n", "\n", "\n", "res_emd", "=", "mmd_cov", "(", "M_rs_emd", ".", "t", "(", ")", ")", "\n", "results", ".", "update", "(", "{", "\n", "\"%s-EMD\"", "%", "k", ":", "v", "for", "k", ",", "v", "in", "res_emd", ".", "items", "(", ")", "\n", "}", ")", "\n", "'''\n    M_rr_cd, M_rr_emd = _pairwise_EMD_CD_(ref_pcs, ref_pcs, batch_size)\n    M_ss_cd, M_ss_emd = _pairwise_EMD_CD_(sample_pcs, sample_pcs, batch_size)\n\n    # 1-NN results\n    one_nn_cd_res = knn(M_rr_cd, M_rs_cd, M_ss_cd, 1, sqrt=False)\n    results.update({\n        \"1-NN-CD-%s\" % k: v for k, v in one_nn_cd_res.items() if 'acc' in k\n    })\n    one_nn_emd_res = knn(M_rr_emd, M_rs_emd, M_ss_emd, 1, sqrt=False)\n    results.update({\n        \"1-NN-EMD-%s\" % k: v for k, v in one_nn_emd_res.items() if 'acc' in k\n    })\n    '''", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.metrics.unit_cube_grid_point_cloud": [[244, 263], ["numpy.ndarray", "range", "float", "range", "grid.reshape.reshape", "range", "numpy.linalg.norm"], "function", ["None"], ["", "def", "unit_cube_grid_point_cloud", "(", "resolution", ",", "clip_sphere", "=", "False", ")", ":", "\n", "    ", "\"\"\"Returns the center coordinates of each cell of a 3D grid with resolution^3 cells,\n    that is placed in the unit-cube.\n    If clip_sphere it True it drops the \"corner\" cells that lie outside the unit-sphere.\n    \"\"\"", "\n", "grid", "=", "np", ".", "ndarray", "(", "(", "resolution", ",", "resolution", ",", "resolution", ",", "3", ")", ",", "np", ".", "float32", ")", "\n", "spacing", "=", "1.0", "/", "float", "(", "resolution", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "resolution", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "resolution", ")", ":", "\n", "            ", "for", "k", "in", "range", "(", "resolution", ")", ":", "\n", "                ", "grid", "[", "i", ",", "j", ",", "k", ",", "0", "]", "=", "i", "*", "spacing", "-", "0.5", "\n", "grid", "[", "i", ",", "j", ",", "k", ",", "1", "]", "=", "j", "*", "spacing", "-", "0.5", "\n", "grid", "[", "i", ",", "j", ",", "k", ",", "2", "]", "=", "k", "*", "spacing", "-", "0.5", "\n", "\n", "", "", "", "if", "clip_sphere", ":", "\n", "        ", "grid", "=", "grid", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "grid", "=", "grid", "[", "norm", "(", "grid", ",", "axis", "=", "1", ")", "<=", "0.5", "]", "\n", "\n", "", "return", "grid", ",", "spacing", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.metrics.jsd_between_point_cloud_sets": [[265, 277], ["metrics.jensen_shannon_divergence", "metrics.entropy_of_occupancy_grid", "metrics.entropy_of_occupancy_grid"], "function", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.metrics.jensen_shannon_divergence", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.metrics.entropy_of_occupancy_grid", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.metrics.entropy_of_occupancy_grid"], ["", "def", "jsd_between_point_cloud_sets", "(", "sample_pcs", ",", "ref_pcs", ",", "resolution", "=", "28", ")", ":", "\n", "    ", "\"\"\"Computes the JSD between two sets of point-clouds, as introduced in the paper\n    ```Learning Representations And Generative Models For 3D Point Clouds```.\n    Args:\n        sample_pcs: (np.ndarray S1xR2x3) S1 point-clouds, each of R1 points.\n        ref_pcs: (np.ndarray S2xR2x3) S2 point-clouds, each of R2 points.\n        resolution: (int) grid-resolution. Affects granularity of measurements.\n    \"\"\"", "\n", "in_unit_sphere", "=", "True", "\n", "sample_grid_var", "=", "entropy_of_occupancy_grid", "(", "sample_pcs", ",", "resolution", ",", "in_unit_sphere", ")", "[", "1", "]", "\n", "ref_grid_var", "=", "entropy_of_occupancy_grid", "(", "ref_pcs", ",", "resolution", ",", "in_unit_sphere", ")", "[", "1", "]", "\n", "return", "jensen_shannon_divergence", "(", "sample_grid_var", ",", "ref_grid_var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.metrics.entropy_of_occupancy_grid": [[279, 319], ["metrics.unit_cube_grid_point_cloud", "grid_coordinates.reshape.reshape", "numpy.zeros", "numpy.zeros", "sklearn.neighbors.NearestNeighbors().fit", "float", "len", "len", "NearestNeighbors().fit.kneighbors", "numpy.squeeze", "numpy.unique", "len", "abs", "abs", "warnings.warn", "numpy.max", "warnings.warn", "sklearn.neighbors.NearestNeighbors", "scipy.stats.entropy", "len", "numpy.max", "numpy.min", "numpy.sqrt", "float", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.pcutil.unit_cube_grid_point_cloud"], ["", "def", "entropy_of_occupancy_grid", "(", "pclouds", ",", "grid_resolution", ",", "in_sphere", "=", "False", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"Given a collection of point-clouds, estimate the entropy of the random variables\n    corresponding to occupancy-grid activation patterns.\n    Inputs:\n        pclouds: (numpy array) #point-clouds x points per point-cloud x 3\n        grid_resolution (int) size of occupancy grid that will be used.\n    \"\"\"", "\n", "epsilon", "=", "10e-4", "\n", "bound", "=", "0.5", "+", "epsilon", "\n", "if", "abs", "(", "np", ".", "max", "(", "pclouds", ")", ")", ">", "bound", "or", "abs", "(", "np", ".", "min", "(", "pclouds", ")", ")", ">", "bound", ":", "\n", "        ", "if", "verbose", ":", "\n", "            ", "warnings", ".", "warn", "(", "'Point-clouds are not in unit cube.'", ")", "\n", "\n", "", "", "if", "in_sphere", "and", "np", ".", "max", "(", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "pclouds", "**", "2", ",", "axis", "=", "2", ")", ")", ")", ">", "bound", ":", "\n", "        ", "if", "verbose", ":", "\n", "            ", "warnings", ".", "warn", "(", "'Point-clouds are not in unit sphere.'", ")", "\n", "\n", "", "", "grid_coordinates", ",", "_", "=", "unit_cube_grid_point_cloud", "(", "grid_resolution", ",", "in_sphere", ")", "\n", "grid_coordinates", "=", "grid_coordinates", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "grid_counters", "=", "np", ".", "zeros", "(", "len", "(", "grid_coordinates", ")", ")", "\n", "grid_bernoulli_rvars", "=", "np", ".", "zeros", "(", "len", "(", "grid_coordinates", ")", ")", "\n", "nn", "=", "NearestNeighbors", "(", "n_neighbors", "=", "1", ")", ".", "fit", "(", "grid_coordinates", ")", "\n", "\n", "for", "pc", "in", "pclouds", ":", "\n", "        ", "_", ",", "indices", "=", "nn", ".", "kneighbors", "(", "pc", ")", "\n", "indices", "=", "np", ".", "squeeze", "(", "indices", ")", "\n", "for", "i", "in", "indices", ":", "\n", "            ", "grid_counters", "[", "i", "]", "+=", "1", "\n", "", "indices", "=", "np", ".", "unique", "(", "indices", ")", "\n", "for", "i", "in", "indices", ":", "\n", "            ", "grid_bernoulli_rvars", "[", "i", "]", "+=", "1", "\n", "\n", "", "", "acc_entropy", "=", "0.0", "\n", "n", "=", "float", "(", "len", "(", "pclouds", ")", ")", "\n", "for", "g", "in", "grid_bernoulli_rvars", ":", "\n", "        ", "if", "g", ">", "0", ":", "\n", "            ", "p", "=", "float", "(", "g", ")", "/", "n", "\n", "acc_entropy", "+=", "entropy", "(", "[", "p", ",", "1.0", "-", "p", "]", ")", "\n", "\n", "", "", "return", "acc_entropy", "/", "len", "(", "grid_counters", ")", ",", "grid_counters", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.metrics.jensen_shannon_divergence": [[321, 341], ["scipy.stats.entropy", "scipy.stats.entropy", "scipy.stats.entropy", "metrics._jsdiv", "numpy.any", "numpy.any", "ValueError", "len", "len", "ValueError", "numpy.sum", "numpy.sum", "numpy.allclose", "warnings.warn"], "function", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.metrics._jsdiv"], ["", "def", "jensen_shannon_divergence", "(", "P", ",", "Q", ")", ":", "\n", "    ", "if", "np", ".", "any", "(", "P", "<", "0", ")", "or", "np", ".", "any", "(", "Q", "<", "0", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'Negative values.'", ")", "\n", "", "if", "len", "(", "P", ")", "!=", "len", "(", "Q", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'Non equal size.'", ")", "\n", "\n", "", "P_", "=", "P", "/", "np", ".", "sum", "(", "P", ")", "# Ensure probabilities.", "\n", "Q_", "=", "Q", "/", "np", ".", "sum", "(", "Q", ")", "\n", "\n", "e1", "=", "entropy", "(", "P_", ",", "base", "=", "2", ")", "\n", "e2", "=", "entropy", "(", "Q_", ",", "base", "=", "2", ")", "\n", "e_sum", "=", "entropy", "(", "(", "P_", "+", "Q_", ")", "/", "2.0", ",", "base", "=", "2", ")", "\n", "res", "=", "e_sum", "-", "(", "(", "e1", "+", "e2", ")", "/", "2.0", ")", "\n", "\n", "res2", "=", "_jsdiv", "(", "P_", ",", "Q_", ")", "\n", "\n", "if", "not", "np", ".", "allclose", "(", "res", ",", "res2", ",", "atol", "=", "10e-5", ",", "rtol", "=", "0", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "'Numerical values of two JSD methods don\\'t agree.'", ")", "\n", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.metrics._jsdiv": [[343, 360], ["A.copy", "B.copy", "numpy.logical_and", "numpy.sum", "numpy.sum", "numpy.sum", "metrics._jsdiv._kldiv"], "function", ["None"], ["", "def", "_jsdiv", "(", "P", ",", "Q", ")", ":", "\n", "    ", "\"\"\"another way of computing JSD\"\"\"", "\n", "\n", "def", "_kldiv", "(", "A", ",", "B", ")", ":", "\n", "        ", "a", "=", "A", ".", "copy", "(", ")", "\n", "b", "=", "B", ".", "copy", "(", ")", "\n", "idx", "=", "np", ".", "logical_and", "(", "a", ">", "0", ",", "b", ">", "0", ")", "\n", "a", "=", "a", "[", "idx", "]", "\n", "b", "=", "b", "[", "idx", "]", "\n", "return", "np", ".", "sum", "(", "[", "v", "for", "v", "in", "a", "*", "np", ".", "log2", "(", "a", "/", "b", ")", "]", ")", "\n", "\n", "", "P_", "=", "P", "/", "np", ".", "sum", "(", "P", ")", "\n", "Q_", "=", "Q", "/", "np", ".", "sum", "(", "Q", ")", "\n", "\n", "M", "=", "0.5", "*", "(", "P_", "+", "Q_", ")", "\n", "\n", "return", "0.5", "*", "(", "_kldiv", "(", "P_", ",", "M", ")", "+", "_kldiv", "(", "Q_", ",", "M", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.sphere_triangles.normalize": [[13, 16], ["Point", "sum"], "function", ["None"], ["def", "normalize", "(", "p", ")", ":", "\n", "    ", "s", "=", "sum", "(", "u", "*", "u", "for", "u", "in", "p", ")", "**", "0.5", "\n", "return", "Point", "(", "*", "(", "u", "/", "s", "for", "u", "in", "p", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.sphere_triangles.midpoint": [[18, 20], ["Point", "zip"], "function", ["None"], ["", "def", "midpoint", "(", "u", ",", "v", ")", ":", "\n", "    ", "return", "Point", "(", "*", "(", "(", "a", "+", "b", ")", "/", "2", "for", "a", ",", "b", "in", "zip", "(", "u", ",", "v", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.sphere_triangles.subdivide_hybrid3": [[22, 45], ["sphere_triangles.subdivide_hybrid3.centroid"], "function", ["None"], ["", "def", "subdivide_hybrid3", "(", "tri", ",", "depth", ")", ":", "\n", "    ", "def", "triangle", "(", "tri", ",", "depth", ")", ":", "\n", "        ", "if", "depth", "==", "0", ":", "\n", "            ", "yield", "tri", "\n", "return", "\n", "", "for", "t", "in", "subdivide_centroid", "(", "tri", ",", "1", ")", ":", "\n", "            ", "yield", "from", "edge", "(", "t", ",", "depth", "-", "1", ")", "\n", "\n", "", "", "def", "centroid", "(", "tri", ",", "depth", ")", ":", "\n", "        ", "if", "depth", "==", "0", ":", "\n", "            ", "yield", "tri", "\n", "return", "\n", "", "for", "t", "in", "subdivide_midpoint", "(", "tri", ",", "2", ")", ":", "\n", "            ", "yield", "from", "triangle", "(", "t", ",", "depth", "-", "1", ")", "\n", "\n", "", "", "def", "edge", "(", "tri", ",", "depth", ")", ":", "\n", "        ", "if", "depth", "==", "0", ":", "\n", "            ", "yield", "tri", "\n", "return", "\n", "", "for", "t", "in", "subdivide_edge", "(", "tri", ",", "1", ")", ":", "\n", "            ", "yield", "from", "centroid", "(", "t", ",", "depth", "-", "1", ")", "\n", "\n", "", "", "return", "centroid", "(", "tri", ",", "depth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.sphere_triangles.subdivide_hybrid2": [[47, 63], ["sphere_triangles.subdivide_hybrid3.centroid"], "function", ["None"], ["", "def", "subdivide_hybrid2", "(", "tri", ",", "depth", ")", ":", "\n", "    ", "def", "centroid", "(", "tri", ",", "depth", ")", ":", "\n", "        ", "if", "depth", "==", "0", ":", "\n", "            ", "yield", "tri", "\n", "return", "\n", "", "for", "t", "in", "subdivide_centroid", "(", "tri", ",", "1", ")", ":", "\n", "            ", "yield", "from", "edge", "(", "t", ",", "depth", "-", "1", ")", "\n", "\n", "", "", "def", "edge", "(", "tri", ",", "depth", ")", ":", "\n", "        ", "if", "depth", "==", "0", ":", "\n", "            ", "yield", "tri", "\n", "return", "\n", "", "for", "t", "in", "subdivide_edge", "(", "tri", ",", "1", ")", ":", "\n", "            ", "yield", "from", "centroid", "(", "t", ",", "depth", "-", "1", ")", "\n", "\n", "", "", "return", "centroid", "(", "tri", ",", "depth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.sphere_triangles.subdivide_hybrid": [[65, 81], ["sphere_triangles.subdivide_hybrid3.edge"], "function", ["None"], ["", "def", "subdivide_hybrid", "(", "tri", ",", "depth", ")", ":", "\n", "    ", "def", "centroid", "(", "tri", ",", "depth", ")", ":", "\n", "        ", "if", "depth", "==", "0", ":", "\n", "            ", "yield", "tri", "\n", "return", "\n", "", "for", "t", "in", "subdivide_centroid", "(", "tri", ",", "1", ")", ":", "\n", "            ", "yield", "from", "edge", "(", "t", ",", "depth", "-", "1", ")", "\n", "\n", "", "", "def", "edge", "(", "tri", ",", "depth", ")", ":", "\n", "        ", "if", "depth", "==", "0", ":", "\n", "            ", "yield", "tri", "\n", "return", "\n", "", "for", "t", "in", "subdivide_edge", "(", "tri", ",", "1", ")", ":", "\n", "            ", "yield", "from", "centroid", "(", "t", ",", "depth", "-", "1", ")", "\n", "\n", "", "", "return", "edge", "(", "tri", ",", "depth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.sphere_triangles.subdivide_midpoint2": [[83, 98], ["sphere_triangles.normalize", "sphere_triangles.midpoint", "sphere_triangles.subdivide_midpoint2", "sphere_triangles.subdivide_midpoint2", "Triangle", "Triangle"], "function", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.sphere_triangles.normalize", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.sphere_triangles.midpoint", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.sphere_triangles.subdivide_midpoint2", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.sphere_triangles.subdivide_midpoint2"], ["", "def", "subdivide_midpoint2", "(", "tri", ",", "depth", ")", ":", "\n", "    ", "if", "depth", "==", "0", ":", "\n", "        ", "yield", "tri", "\n", "return", "\n", "#       p0", "\n", "#      /|\\", "\n", "#     / | \\", "\n", "#    /  |  \\", "\n", "#   /___|___\\", "\n", "# p1   m12   p2", "\n", "", "p0", ",", "p1", ",", "p2", "=", "tri", "\n", "m12", "=", "normalize", "(", "midpoint", "(", "p1", ",", "p2", ")", ")", "\n", "# WRONG TRIANGULATION!", "\n", "yield", "from", "subdivide_midpoint2", "(", "Triangle", "(", "p0", ",", "m12", ",", "p1", ")", ",", "depth", "-", "1", ")", "\n", "yield", "from", "subdivide_midpoint2", "(", "Triangle", "(", "p0", ",", "p2", ",", "m12", ")", ",", "depth", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.sphere_triangles.subdivide_midpoint": [[100, 114], ["sphere_triangles.normalize", "sphere_triangles.midpoint", "sphere_triangles.subdivide_midpoint", "sphere_triangles.subdivide_midpoint", "Triangle", "Triangle"], "function", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.sphere_triangles.normalize", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.sphere_triangles.midpoint", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.sphere_triangles.subdivide_midpoint", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.sphere_triangles.subdivide_midpoint"], ["", "def", "subdivide_midpoint", "(", "tri", ",", "depth", ")", ":", "\n", "    ", "if", "depth", "==", "0", ":", "\n", "        ", "yield", "tri", "\n", "return", "\n", "#       p0", "\n", "#      /|\\", "\n", "#     / | \\", "\n", "#    /  |  \\", "\n", "#   /___|___\\", "\n", "# p1   m12   p2", "\n", "", "p0", ",", "p1", ",", "p2", "=", "tri", "\n", "m12", "=", "normalize", "(", "midpoint", "(", "p1", ",", "p2", ")", ")", "\n", "yield", "from", "subdivide_midpoint", "(", "Triangle", "(", "m12", ",", "p0", ",", "p1", ")", ",", "depth", "-", "1", ")", "\n", "yield", "from", "subdivide_midpoint", "(", "Triangle", "(", "m12", ",", "p2", ",", "p0", ")", ",", "depth", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.sphere_triangles.subdivide_edge": [[116, 138], ["sphere_triangles.normalize", "sphere_triangles.normalize", "sphere_triangles.normalize", "sphere_triangles.midpoint", "sphere_triangles.midpoint", "sphere_triangles.midpoint", "Triangle", "Triangle", "Triangle", "Triangle", "sphere_triangles.subdivide_edge"], "function", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.sphere_triangles.normalize", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.sphere_triangles.normalize", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.sphere_triangles.normalize", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.sphere_triangles.midpoint", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.sphere_triangles.midpoint", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.sphere_triangles.midpoint", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.sphere_triangles.subdivide_edge"], ["", "def", "subdivide_edge", "(", "tri", ",", "depth", ")", ":", "\n", "    ", "if", "depth", "==", "0", ":", "\n", "        ", "yield", "tri", "\n", "return", "\n", "#       p0", "\n", "#      /  \\", "\n", "# m01 /....\\ m02", "\n", "#    / \\  / \\", "\n", "#   /___\\/___\\", "\n", "# p1    m12   p2", "\n", "", "p0", ",", "p1", ",", "p2", "=", "tri", "\n", "m01", "=", "normalize", "(", "midpoint", "(", "p0", ",", "p1", ")", ")", "\n", "m02", "=", "normalize", "(", "midpoint", "(", "p0", ",", "p2", ")", ")", "\n", "m12", "=", "normalize", "(", "midpoint", "(", "p1", ",", "p2", ")", ")", "\n", "triangles", "=", "[", "\n", "Triangle", "(", "p0", ",", "m01", ",", "m02", ")", ",", "\n", "Triangle", "(", "m01", ",", "p1", ",", "m12", ")", ",", "\n", "Triangle", "(", "m02", ",", "m12", ",", "p2", ")", ",", "\n", "Triangle", "(", "m01", ",", "m02", ",", "m12", ")", ",", "\n", "]", "\n", "for", "t", "in", "triangles", ":", "\n", "        ", "yield", "from", "subdivide_edge", "(", "t", ",", "depth", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.sphere_triangles.subdivide_centroid": [[140, 163], ["sphere_triangles.normalize", "Triangle", "Triangle", "Triangle", "Point", "sphere_triangles.subdivide_centroid", "sphere_triangles.subdivide_centroid", "sphere_triangles.subdivide_centroid"], "function", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.sphere_triangles.normalize", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.sphere_triangles.subdivide_centroid", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.sphere_triangles.subdivide_centroid", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.sphere_triangles.subdivide_centroid"], ["", "", "def", "subdivide_centroid", "(", "tri", ",", "depth", ")", ":", "\n", "    ", "if", "depth", "==", "0", ":", "\n", "        ", "yield", "tri", "\n", "return", "\n", "#       p0", "\n", "#       / \\", "\n", "#      /   \\", "\n", "#     /  c  \\", "\n", "#    /_______\\", "\n", "#  p1         p2", "\n", "", "p0", ",", "p1", ",", "p2", "=", "tri", "\n", "centroid", "=", "normalize", "(", "Point", "(", "\n", "(", "p0", ".", "x", "+", "p1", ".", "x", "+", "p2", ".", "x", ")", "/", "3", ",", "\n", "(", "p0", ".", "y", "+", "p1", ".", "y", "+", "p2", ".", "y", ")", "/", "3", ",", "\n", "(", "p0", ".", "z", "+", "p1", ".", "z", "+", "p2", ".", "z", ")", "/", "3", ",", "\n", ")", ")", "\n", "t1", "=", "Triangle", "(", "p0", ",", "p1", ",", "centroid", ")", "\n", "t2", "=", "Triangle", "(", "p2", ",", "centroid", ",", "p0", ")", "\n", "t3", "=", "Triangle", "(", "centroid", ",", "p1", ",", "p2", ")", "\n", "\n", "yield", "from", "subdivide_centroid", "(", "t1", ",", "depth", "-", "1", ")", "\n", "yield", "from", "subdivide_centroid", "(", "t2", ",", "depth", "-", "1", ")", "\n", "yield", "from", "subdivide_centroid", "(", "t3", ",", "depth", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.sphere_triangles.subdivide": [[165, 168], ["method"], "function", ["None"], ["", "def", "subdivide", "(", "faces", ",", "depth", ",", "method", ")", ":", "\n", "    ", "for", "tri", "in", "faces", ":", "\n", "        ", "yield", "from", "method", "(", "tri", ",", "depth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.sphere_triangles.generate": [[170, 216], ["int", "enumerate", "numpy.array", "numpy.array", "numpy.array", "matplotlib.Triangulation", "numpy.concatenate", "Triangle", "Triangle", "Triangle", "Triangle", "Triangle", "Triangle", "Triangle", "Triangle", "sphere_triangles.subdivide", "np.array.extend", "np.array.extend", "np.array.extend", "mtri.Triangulation.append", "numpy.array", "torch.from_numpy().float", "Point", "Point", "Point", "Point", "Point", "Point", "Point", "Point", "Point", "Point", "Point", "Point", "Point", "Point", "Point", "Point", "Point", "Point", "Point", "Point", "Point", "Point", "Point", "Point", "np.array.reshape", "np.array.reshape", "np.array.reshape", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.sphere_triangles.subdivide"], ["", "", "def", "generate", "(", "_method", ",", "_depth", ")", ":", "\n", "    ", "method", "=", "{", "\n", "\"hybrid\"", ":", "subdivide_hybrid", ",", "\n", "\"hybrid2\"", ":", "subdivide_hybrid2", ",", "\n", "\"hybrid3\"", ":", "subdivide_hybrid3", ",", "\n", "\"midpoint\"", ":", "subdivide_midpoint", ",", "\n", "\"midpoint2\"", ":", "subdivide_midpoint2", ",", "\n", "\"centroid\"", ":", "subdivide_centroid", ",", "\n", "\"edge\"", ":", "subdivide_edge", ",", "\n", "}", "[", "_method", "]", "\n", "depth", "=", "int", "(", "_depth", ")", "\n", "\n", "# octahedron", "\n", "p", "=", "2", "**", "0.5", "/", "2", "\n", "faces", "=", "[", "\n", "# top half", "\n", "Triangle", "(", "Point", "(", "0", ",", "1", ",", "0", ")", ",", "Point", "(", "-", "p", ",", "0", ",", "p", ")", ",", "Point", "(", "p", ",", "0", ",", "p", ")", ")", ",", "\n", "Triangle", "(", "Point", "(", "0", ",", "1", ",", "0", ")", ",", "Point", "(", "p", ",", "0", ",", "p", ")", ",", "Point", "(", "p", ",", "0", ",", "-", "p", ")", ")", ",", "\n", "Triangle", "(", "Point", "(", "0", ",", "1", ",", "0", ")", ",", "Point", "(", "p", ",", "0", ",", "-", "p", ")", ",", "Point", "(", "-", "p", ",", "0", ",", "-", "p", ")", ")", ",", "\n", "Triangle", "(", "Point", "(", "0", ",", "1", ",", "0", ")", ",", "Point", "(", "-", "p", ",", "0", ",", "-", "p", ")", ",", "Point", "(", "-", "p", ",", "0", ",", "p", ")", ")", ",", "\n", "\n", "# bottom half", "\n", "Triangle", "(", "Point", "(", "0", ",", "-", "1", ",", "0", ")", ",", "Point", "(", "p", ",", "0", ",", "p", ")", ",", "Point", "(", "-", "p", ",", "0", ",", "p", ")", ")", ",", "\n", "Triangle", "(", "Point", "(", "0", ",", "-", "1", ",", "0", ")", ",", "Point", "(", "p", ",", "0", ",", "-", "p", ")", ",", "Point", "(", "p", ",", "0", ",", "p", ")", ")", ",", "\n", "Triangle", "(", "Point", "(", "0", ",", "-", "1", ",", "0", ")", ",", "Point", "(", "-", "p", ",", "0", ",", "-", "p", ")", ",", "Point", "(", "p", ",", "0", ",", "-", "p", ")", ")", ",", "\n", "Triangle", "(", "Point", "(", "0", ",", "-", "1", ",", "0", ")", ",", "Point", "(", "-", "p", ",", "0", ",", "p", ")", ",", "Point", "(", "-", "p", ",", "0", ",", "-", "p", ")", ")", ",", "\n", "]", "\n", "\n", "X", "=", "[", "]", "\n", "Y", "=", "[", "]", "\n", "Z", "=", "[", "]", "\n", "T", "=", "[", "]", "\n", "\n", "for", "i", ",", "tri", "in", "enumerate", "(", "subdivide", "(", "faces", ",", "depth", ",", "method", ")", ")", ":", "\n", "        ", "X", ".", "extend", "(", "[", "p", ".", "x", "for", "p", "in", "tri", "]", ")", "\n", "Y", ".", "extend", "(", "[", "p", ".", "y", "for", "p", "in", "tri", "]", ")", "\n", "Z", ".", "extend", "(", "[", "p", ".", "z", "for", "p", "in", "tri", "]", ")", "\n", "T", ".", "append", "(", "[", "3", "*", "i", ",", "3", "*", "i", "+", "1", ",", "3", "*", "i", "+", "2", "]", ")", "\n", "\n", "", "X", "=", "np", ".", "array", "(", "X", ")", "\n", "Y", "=", "np", ".", "array", "(", "Y", ")", "\n", "Z", "=", "np", ".", "array", "(", "Z", ")", "\n", "T", "=", "mtri", ".", "Triangulation", "(", "X", ",", "Y", ",", "np", ".", "array", "(", "T", ")", ")", "\n", "points", "=", "np", ".", "concatenate", "(", "(", "X", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "Y", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "Z", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", ",", "axis", "=", "1", ")", "\n", "\n", "return", "torch", ".", "from_numpy", "(", "points", ")", ".", "float", "(", ")", ",", "T", "\n", "", ""]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.telegram_logging.TelegramLogger.get_logger": [[9, 12], ["telegram_logging.TelegramLogger"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "get_logger", "(", "config", ")", ":", "\n", "        ", "return", "TelegramLogger", "(", "config", "[", "'bot_token'", "]", ",", "config", "[", "'chat_id'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.telegram_logging.TelegramLogger.__init__": [[13, 23], ["logging.getLogger().setLevel", "logging.getLogger().setLevel", "logging.getLogger", "logging.getLogger"], "methods", ["None"], ["", "def", "__init__", "(", "self", ",", "bot_token", ":", "str", ",", "chat_id", ":", "str", ",", "disable_req_log", ":", "bool", "=", "True", ")", ":", "\n", "        ", "self", ".", "_api_url", "=", "f'https://api.telegram.org/bot{bot_token}/'", "\n", "self", ".", "_message_url", "=", "self", ".", "_api_url", "+", "'sendMessage'", "\n", "self", ".", "_image_url", "=", "self", ".", "_api_url", "+", "'sendMediaGroup'", "\n", "self", ".", "_chat_id", "=", "chat_id", "\n", "\n", "if", "disable_req_log", ":", "\n", "            ", "import", "logging", "\n", "logging", ".", "getLogger", "(", "\"requests\"", ")", ".", "setLevel", "(", "logging", ".", "CRITICAL", ")", "\n", "logging", ".", "getLogger", "(", "\"urllib3\"", ")", ".", "setLevel", "(", "logging", ".", "CRITICAL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.telegram_logging.TelegramLogger.log": [[24, 33], ["requests.post"], "methods", ["None"], ["", "", "def", "log", "(", "self", ",", "message", ":", "str", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "send_data", "=", "{", "\n", "'chat_id'", ":", "self", ".", "_chat_id", ",", "\n", "'text'", ":", "message", ",", "\n", "}", "\n", "requests", ".", "post", "(", "self", ".", "_message_url", ",", "json", "=", "send_data", ")", "\n", "", "except", "Exception", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.telegram_logging.TelegramLogger.log_images": [[34, 50], ["requests.post", "json.dumps", "open", "enumerate", "range", "len"], "methods", ["None"], ["", "", "def", "log_images", "(", "self", ",", "image_paths", ":", "List", "[", "str", "]", ",", "message", ":", "str", "=", "''", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "send_data", "=", "{", "\n", "'chat_id'", ":", "self", ".", "_chat_id", ",", "\n", "'media'", ":", "json", ".", "dumps", "(", "[", "\n", "{", "\n", "'type'", ":", "'photo'", ",", "\n", "'media'", ":", "f'attach://image_{i}.png'", ",", "\n", "'caption'", ":", "message", "if", "i", "==", "0", "else", "''", ",", "\n", "}", "for", "i", "in", "range", "(", "len", "(", "image_paths", ")", ")", "\n", "]", ")", "\n", "}", "\n", "files", "=", "{", "f'image_{i}.png'", ":", "open", "(", "image_path", ",", "'rb'", ")", "for", "i", ",", "image_path", "in", "enumerate", "(", "image_paths", ")", "}", "\n", "requests", ".", "post", "(", "self", ".", "_image_url", ",", "params", "=", "send_data", ",", "files", "=", "files", ")", "\n", "", "except", "Exception", ":", "\n", "            ", "pass", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.points.generate_points_from_uniform_distribution": [[8, 14], ["torch.zeros().uniform_", "torch.zeros", "torch.norm"], "function", ["None"], ["def", "generate_points_from_uniform_distribution", "(", "size", ",", "low", "=", "-", "1", ",", "high", "=", "1", ")", ":", "\n", "    ", "while", "True", ":", "\n", "        ", "points", "=", "torch", ".", "zeros", "(", "[", "size", "[", "0", "]", "*", "3", ",", "*", "size", "[", "1", ":", "]", "]", ")", ".", "uniform_", "(", "low", ",", "high", ")", "\n", "points", "=", "points", "[", "torch", ".", "norm", "(", "points", ",", "dim", "=", "1", ")", "<", "1", "]", "\n", "if", "points", ".", "shape", "[", "0", "]", ">=", "size", "[", "0", "]", ":", "\n", "            ", "return", "points", "[", ":", "size", "[", "0", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.points.generate_points": [[16, 37], ["points.generate_points_from_uniform_distribution", "points.generate_points_from_uniform_distribution", "numpy.linspace", "numpy.linalg.norm", "torch.from_numpy().float", "torch.from_numpy", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.points.generate_points_from_uniform_distribution", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.points.generate_points_from_uniform_distribution"], ["", "", "", "def", "generate_points", "(", "config", ",", "epoch", ",", "size", ",", "normalize_points", "=", "None", ")", ":", "\n", "    ", "if", "normalize_points", "is", "None", ":", "\n", "        ", "normalize_points", "=", "config", "[", "'target_network_input'", "]", "[", "'normalization'", "]", "[", "'enable'", "]", "\n", "\n", "", "if", "normalize_points", "and", "config", "[", "'target_network_input'", "]", "[", "'normalization'", "]", "[", "'type'", "]", "==", "'progressive'", ":", "\n", "        ", "normalization_max_epoch", "=", "config", "[", "'target_network_input'", "]", "[", "'normalization'", "]", "[", "'epoch'", "]", "\n", "\n", "normalization_coef", "=", "np", ".", "linspace", "(", "0", ",", "1", ",", "normalization_max_epoch", ")", "[", "epoch", "-", "1", "]", "if", "epoch", "<=", "normalization_max_epoch", "else", "1", "\n", "points", "=", "generate_points_from_uniform_distribution", "(", "size", "=", "size", ")", "\n", "points", "[", "np", ".", "linalg", ".", "norm", "(", "points", ",", "axis", "=", "1", ")", "<", "normalization_coef", "]", "=", "normalization_coef", "*", "(", "\n", "points", "[", "\n", "np", ".", "linalg", ".", "norm", "(", "points", ",", "axis", "=", "1", ")", "<", "normalization_coef", "]", ".", "T", "/", "\n", "torch", ".", "from_numpy", "(", "\n", "np", ".", "linalg", ".", "norm", "(", "points", "[", "np", ".", "linalg", ".", "norm", "(", "points", ",", "axis", "=", "1", ")", "<", "normalization_coef", "]", ",", "axis", "=", "1", ")", ")", ".", "float", "(", ")", "\n", ")", ".", "T", "\n", "", "else", ":", "\n", "        ", "points", "=", "generate_points_from_uniform_distribution", "(", "size", "=", "size", ")", "\n", "\n", "", "return", "points", "\n", "", ""]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.util.find_latest_epoch": [[13, 24], ["re.compile", "os.path.exists", "os.listdir", "os.path.join", "os.path.join", "re.compile.match", "max", "epochs_completed.append", "int", "epoch_regex.match.group"], "function", ["None"], ["def", "find_latest_epoch", "(", "dirpath", ")", ":", "\n", "# Files with weights are in format ddddd_{D,E,G}.pth", "\n", "    ", "epoch_regex", "=", "re", ".", "compile", "(", "r'^(?P<n_epoch>\\d+)_([DEG]|model)\\.pth$'", ")", "\n", "epochs_completed", "=", "[", "]", "\n", "if", "exists", "(", "join", "(", "dirpath", ",", "'weights'", ")", ")", ":", "\n", "        ", "dirpath", "=", "join", "(", "dirpath", ",", "'weights'", ")", "\n", "", "for", "f", "in", "listdir", "(", "dirpath", ")", ":", "\n", "        ", "m", "=", "epoch_regex", ".", "match", "(", "f", ")", "\n", "if", "m", ":", "\n", "            ", "epochs_completed", ".", "append", "(", "int", "(", "m", ".", "group", "(", "'n_epoch'", ")", ")", ")", "\n", "", "", "return", "max", "(", "epochs_completed", ")", "if", "epochs_completed", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.util.get_classes_dir": [[26, 28], ["config.get"], "function", ["None"], ["", "def", "get_classes_dir", "(", "config", ")", ":", "\n", "    ", "return", "'all'", "if", "not", "config", ".", "get", "(", "'classes'", ")", "else", "'_'", ".", "join", "(", "config", "[", "'classes'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.util.get_distribution_dir": [[30, 38], ["None"], "function", ["None"], ["", "def", "get_distribution_dir", "(", "config", ")", ":", "\n", "    ", "normed_str", "=", "''", "\n", "if", "config", "[", "'target_network_input'", "]", "[", "'normalization'", "]", "[", "'enable'", "]", ":", "\n", "        ", "if", "config", "[", "'target_network_input'", "]", "[", "'normalization'", "]", "[", "'type'", "]", "==", "'progressive'", ":", "\n", "            ", "norm_max_epoch", "=", "config", "[", "'target_network_input'", "]", "[", "'normalization'", "]", "[", "'epoch'", "]", "\n", "normed_str", "=", "'normed_progressive_to_epoch_%d'", "%", "norm_max_epoch", "\n", "\n", "", "", "return", "'%s%s'", "%", "(", "'uniform'", ",", "'_'", "+", "normed_str", "if", "normed_str", "else", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.util.get_model_name": [[40, 62], ["[].items", "str", "str", "str", "str().replace", "str", "str"], "function", ["None"], ["", "def", "get_model_name", "(", "config", ")", ":", "\n", "    ", "model_name", "=", "''", "\n", "encoders_num", "=", "0", "\n", "real_size", "=", "config", "[", "'full_model'", "]", "[", "'real_encoder'", "]", "[", "'output_size'", "]", "\n", "random_size", "=", "config", "[", "'full_model'", "]", "[", "'random_encoder'", "]", "[", "'output_size'", "]", "\n", "\n", "if", "real_size", ">", "0", ":", "\n", "        ", "encoders_num", "+=", "1", "\n", "model_name", "+=", "str", "(", "real_size", ")", "\n", "\n", "", "if", "random_size", ">", "0", ":", "\n", "        ", "encoders_num", "+=", "1", "\n", "model_name", "+=", "'x'", "+", "str", "(", "random_size", ")", "if", "real_size", ">", "0", "else", "str", "(", "random_size", ")", "\n", "\n", "", "model_name", "=", "str", "(", "encoders_num", ")", "+", "'e'", "+", "model_name", "\n", "\n", "model_name", "+=", "config", "[", "'training'", "]", "[", "'lr_scheduler'", "]", "[", "'type'", "]", "\n", "\n", "for", "k", ",", "v", "in", "config", "[", "'training'", "]", "[", "'lr_scheduler'", "]", "[", "'hyperparams'", "]", ".", "items", "(", ")", ":", "\n", "        ", "model_name", "+=", "'_'", "+", "k", "+", "str", "(", "v", ")", ".", "replace", "(", "' '", ",", "''", ")", "\n", "\n", "", "return", "model_name", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.util.show_3d_cloud": [[64, 67], ["pptk.viewer().set", "pptk.viewer"], "function", ["None"], ["", "def", "show_3d_cloud", "(", "points_cloud", ")", ":", "\n", "    ", "import", "pptk", "\n", "pptk", ".", "viewer", "(", "points_cloud", ")", ".", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.util.replace_and_rename_pcd_file": [[69, 76], ["os.listdir", "os.listdir", "os.path.join", "os.listdir", "os.path.join", "copyfile", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "replace_and_rename_pcd_file", "(", "source", ",", "dest", ")", ":", "\n", "    ", "from", "shutil", "import", "copyfile", "\n", "model_ids", "=", "listdir", "(", "source", ")", "\n", "for", "model_id", "in", "model_ids", ":", "\n", "        ", "for", "sample", "in", "listdir", "(", "join", "(", "source", ",", "model_id", ")", ")", ":", "\n", "            ", "for", "filename", "in", "listdir", "(", "join", "(", "source", ",", "model_id", ",", "sample", ")", ")", ":", "\n", "                ", "copyfile", "(", "join", "(", "source", ",", "model_id", ",", "sample", ",", "filename", ")", ",", "join", "(", "dest", ",", "f'{model_id}_{sample}_{filename}'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.util.get_filenames_by_cat": [[78, 85], ["datasets.utils.shapenet_category_mapping.synth_id_to_category.keys", "pandas.DataFrame", "os.listdir", "os.path.join", "filenames.append"], "function", ["None"], ["", "", "", "", "def", "get_filenames_by_cat", "(", "path", ")", "->", "pd", ".", "DataFrame", ":", "\n", "    ", "filenames", "=", "[", "]", "\n", "for", "category_id", "in", "synth_id_to_category", ".", "keys", "(", ")", ":", "\n", "        ", "for", "f", "in", "listdir", "(", "join", "(", "path", ",", "category_id", ")", ")", ":", "\n", "            ", "if", "f", "not", "in", "[", "'.DS_Store'", "]", ":", "\n", "                ", "filenames", ".", "append", "(", "(", "category_id", ",", "f", ")", ")", "\n", "", "", "", "return", "pd", ".", "DataFrame", "(", "filenames", ",", "columns", "=", "[", "'category'", ",", "'filename'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.util.save_plot": [[87, 93], ["utils.pcutil.plot_3d_point_cloud", "os.path.join", "utils.pcutil.plot_3d_point_cloud.savefig", "matplotlib.close"], "function", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.pcutil.plot_3d_point_cloud"], ["", "def", "save_plot", "(", "X", ",", "epoch", ",", "k", ",", "results_dir", ",", "t", ")", ":", "\n", "    ", "fig", "=", "plot_3d_point_cloud", "(", "X", "[", "0", "]", ",", "X", "[", "1", "]", ",", "X", "[", "2", "]", ",", "in_u_sphere", "=", "True", ",", "show", "=", "False", ",", "title", "=", "f'{t}_{k} epoch: {epoch}'", ")", "\n", "fig_path", "=", "join", "(", "results_dir", ",", "f'{epoch}_{k}_{t}.png'", ")", "\n", "fig", ".", "savefig", "(", "fig_path", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "return", "fig_path", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.util.resample_pcd": [[95, 101], ["numpy.random.permutation", "numpy.concatenate", "numpy.random.randint"], "function", ["None"], ["", "def", "resample_pcd", "(", "pcd", ",", "n", ")", ":", "\n", "    ", "\"\"\"Drop or duplicate points so that pcd has exactly n points\"\"\"", "\n", "idx", "=", "np", ".", "random", ".", "permutation", "(", "pcd", ".", "shape", "[", "0", "]", ")", "\n", "if", "idx", ".", "shape", "[", "0", "]", "<", "n", ":", "\n", "        ", "idx", "=", "np", ".", "concatenate", "(", "[", "idx", ",", "np", ".", "random", ".", "randint", "(", "pcd", ".", "shape", "[", "0", "]", ",", "size", "=", "n", "-", "pcd", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "", "return", "pcd", "[", "idx", "[", ":", "n", "]", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.pcutil.rand_rotation_matrix": [[10, 49], ["numpy.random.uniform", "numpy.sqrt", "numpy.sin", "numpy.cos", "numpy.array", "numpy.random.seed", "numpy.sqrt", "numpy.sin", "numpy.cos", "numpy.outer", "numpy.eye"], "function", ["None"], ["def", "rand_rotation_matrix", "(", "deflection", "=", "1.0", ",", "seed", "=", "None", ")", ":", "\n", "    ", "\"\"\"Creates a random rotation matrix.\n\n    Args:\n        deflection: the magnitude of the rotation. For 0, no rotation; for 1,\n                    completely random rotation. Small deflection => small\n                    perturbation.\n\n    DOI: http://www.realtimerendering.com/resources/GraphicsGems/gemsiii/rand_rotation.c\n         http://blog.lostinmyterminal.com/python/2015/05/12/random-rotation-matrix.html\n    \"\"\"", "\n", "if", "seed", "is", "not", "None", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "", "theta", ",", "phi", ",", "z", "=", "np", ".", "random", ".", "uniform", "(", "size", "=", "(", "3", ",", ")", ")", "\n", "\n", "theta", "=", "theta", "*", "2.0", "*", "deflection", "*", "np", ".", "pi", "# Rotation about the pole (Z).", "\n", "phi", "=", "phi", "*", "2.0", "*", "np", ".", "pi", "# For direction of pole deflection.", "\n", "z", "=", "z", "*", "2.0", "*", "deflection", "# For magnitude of pole deflection.", "\n", "\n", "# Compute a vector V used for distributing points over the sphere", "\n", "# via the reflection I - V Transpose(V).  This formulation of V", "\n", "# will guarantee that if x[1] and x[2] are uniformly distributed,", "\n", "# the reflected points will be uniform on the sphere.  Note that V", "\n", "# has length sqrt(2) to eliminate the 2 in the Householder matrix.", "\n", "\n", "r", "=", "np", ".", "sqrt", "(", "z", ")", "\n", "V", "=", "(", "np", ".", "sin", "(", "phi", ")", "*", "r", ",", "\n", "np", ".", "cos", "(", "phi", ")", "*", "r", ",", "\n", "np", ".", "sqrt", "(", "2.0", "-", "z", ")", ")", "\n", "\n", "st", "=", "np", ".", "sin", "(", "theta", ")", "\n", "ct", "=", "np", ".", "cos", "(", "theta", ")", "\n", "\n", "R", "=", "np", ".", "array", "(", "(", "(", "ct", ",", "st", ",", "0", ")", ",", "(", "-", "st", ",", "ct", ",", "0", ")", ",", "(", "0", ",", "0", ",", "1", ")", ")", ")", "\n", "\n", "# Construct the rotation matrix  ( V Transpose(V) - I ) R.", "\n", "M", "=", "(", "np", ".", "outer", "(", "V", ",", "V", ")", "-", "np", ".", "eye", "(", "3", ")", ")", ".", "dot", "(", "R", ")", "\n", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.pcutil.add_gaussian_noise_to_pcloud": [[51, 56], ["numpy.random.normal", "numpy.tile"], "function", ["None"], ["", "def", "add_gaussian_noise_to_pcloud", "(", "pcloud", ",", "mu", "=", "0", ",", "sigma", "=", "1", ")", ":", "\n", "    ", "gnoise", "=", "np", ".", "random", ".", "normal", "(", "mu", ",", "sigma", ",", "pcloud", ".", "shape", "[", "0", "]", ")", "\n", "gnoise", "=", "np", ".", "tile", "(", "gnoise", ",", "(", "3", ",", "1", ")", ")", ".", "T", "\n", "pcloud", "+=", "gnoise", "\n", "return", "pcloud", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.pcutil.add_rotation_to_pcloud": [[58, 65], ["pcutil.rand_rotation_matrix", "len", "pcloud.dot", "numpy.asarray", "e.dot"], "function", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.pcutil.rand_rotation_matrix"], ["", "def", "add_rotation_to_pcloud", "(", "pcloud", ")", ":", "\n", "    ", "r_rotation", "=", "rand_rotation_matrix", "(", ")", "\n", "\n", "if", "len", "(", "pcloud", ".", "shape", ")", "==", "2", ":", "\n", "        ", "return", "pcloud", ".", "dot", "(", "r_rotation", ")", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "asarray", "(", "[", "e", ".", "dot", "(", "r_rotation", ")", "for", "e", "in", "pcloud", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.pcutil.apply_augmentations": [[67, 85], ["batch.dot.copy", "numpy.random.normal", "pcutil.rand_rotation_matrix", "batch.dot.dot"], "function", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.pcutil.rand_rotation_matrix"], ["", "", "def", "apply_augmentations", "(", "batch", ",", "conf", ")", ":", "\n", "    ", "if", "conf", ".", "gauss_augment", "is", "not", "None", "or", "conf", ".", "z_rotate", ":", "\n", "        ", "batch", "=", "batch", ".", "copy", "(", ")", "\n", "\n", "", "if", "conf", ".", "gauss_augment", "is", "not", "None", ":", "\n", "        ", "mu", "=", "conf", ".", "gauss_augment", "[", "'mu'", "]", "\n", "sigma", "=", "conf", ".", "gauss_augment", "[", "'sigma'", "]", "\n", "batch", "+=", "np", ".", "random", ".", "normal", "(", "mu", ",", "sigma", ",", "batch", ".", "shape", ")", "\n", "\n", "", "if", "conf", ".", "z_rotate", ":", "\n", "        ", "r_rotation", "=", "rand_rotation_matrix", "(", ")", "\n", "r_rotation", "[", "0", ",", "2", "]", "=", "0", "\n", "r_rotation", "[", "2", ",", "0", "]", "=", "0", "\n", "r_rotation", "[", "1", ",", "2", "]", "=", "0", "\n", "r_rotation", "[", "2", ",", "1", "]", "=", "0", "\n", "r_rotation", "[", "2", ",", "2", "]", "=", "1", "\n", "batch", "=", "batch", ".", "dot", "(", "r_rotation", ")", "\n", "", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.pcutil.unit_cube_grid_point_cloud": [[87, 107], ["numpy.ndarray", "range", "float", "range", "grid.reshape.reshape", "range", "numpy.linalg.norm"], "function", ["None"], ["", "def", "unit_cube_grid_point_cloud", "(", "resolution", ",", "clip_sphere", "=", "False", ")", ":", "\n", "    ", "\"\"\"Returns the center coordinates of each cell of a 3D grid with\n    resolution^3 cells, that is placed in the unit-cube.\n    If clip_sphere it True it drops the \"corner\" cells that lie outside\n    the unit-sphere.\n    \"\"\"", "\n", "grid", "=", "np", ".", "ndarray", "(", "(", "resolution", ",", "resolution", ",", "resolution", ",", "3", ")", ",", "np", ".", "float32", ")", "\n", "spacing", "=", "1.0", "/", "float", "(", "resolution", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "resolution", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "resolution", ")", ":", "\n", "            ", "for", "k", "in", "range", "(", "resolution", ")", ":", "\n", "                ", "grid", "[", "i", ",", "j", ",", "k", ",", "0", "]", "=", "i", "*", "spacing", "-", "0.5", "\n", "grid", "[", "i", ",", "j", ",", "k", ",", "1", "]", "=", "j", "*", "spacing", "-", "0.5", "\n", "grid", "[", "i", ",", "j", ",", "k", ",", "2", "]", "=", "k", "*", "spacing", "-", "0.5", "\n", "\n", "", "", "", "if", "clip_sphere", ":", "\n", "        ", "grid", "=", "grid", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "grid", "=", "grid", "[", "norm", "(", "grid", ",", "axis", "=", "1", ")", "<=", "0.5", "]", "\n", "\n", "", "return", "grid", ",", "spacing", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.pcutil.plot_3d_point_cloud": [[109, 153], ["matplotlib.switch_backend", "fig.add_subplot.scatter", "fig.add_subplot.view_init", "matplotlib.figure", "plt.figure.add_subplot", "matplotlib.title", "fig.add_subplot.scatter", "fig.add_subplot.set_xlim3d", "fig.add_subplot.set_ylim3d", "fig.add_subplot.set_zlim3d", "fig.add_subplot.set_xlim", "fig.add_subplot.set_ylim", "fig.add_subplot.set_zlim", "matplotlib.tight_layout", "matplotlib.axis", "matplotlib.colorbar", "matplotlib.show", "numpy.min", "numpy.max", "numpy.min", "numpy.min", "numpy.min", "numpy.max", "numpy.max", "numpy.max"], "function", ["None"], ["", "def", "plot_3d_point_cloud", "(", "x", ",", "y", ",", "z", ",", "show", "=", "True", ",", "show_axis", "=", "True", ",", "in_u_sphere", "=", "False", ",", "\n", "marker", "=", "'.'", ",", "s", "=", "8", ",", "alpha", "=", ".8", ",", "figsize", "=", "(", "5", ",", "5", ")", ",", "elev", "=", "10", ",", "\n", "azim", "=", "240", ",", "axis", "=", "None", ",", "title", "=", "None", ",", "x1", "=", "None", ",", "y1", "=", "None", ",", "z1", "=", "None", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "plt", ".", "switch_backend", "(", "'agg'", ")", "\n", "if", "axis", "is", "None", ":", "\n", "        ", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "figsize", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ",", "projection", "=", "'3d'", ")", "\n", "", "else", ":", "\n", "        ", "ax", "=", "axis", "\n", "fig", "=", "axis", "\n", "\n", "", "if", "title", "is", "not", "None", ":", "\n", "        ", "plt", ".", "title", "(", "title", ")", "\n", "\n", "", "if", "x1", "is", "not", "None", "and", "y1", "is", "not", "None", "and", "z1", "is", "not", "None", ":", "\n", "        ", "ax", ".", "scatter", "(", "x1", ",", "y1", ",", "z1", ",", "color", "=", "'r'", ",", "marker", "=", "marker", ",", "s", "=", "s", "*", "3", ",", "alpha", "=", "1", ",", "zorder", "=", "2", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "alpha", "=", "0.3", "\n", "\n", "", "sc", "=", "ax", ".", "scatter", "(", "x", ",", "y", ",", "z", ",", "marker", "=", "marker", ",", "s", "=", "s", ",", "alpha", "=", "alpha", ",", "zorder", "=", "1", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "ax", ".", "view_init", "(", "elev", "=", "elev", ",", "azim", "=", "azim", ")", "\n", "\n", "if", "in_u_sphere", ":", "\n", "        ", "ax", ".", "set_xlim3d", "(", "-", "0.5", ",", "0.5", ")", "\n", "ax", ".", "set_ylim3d", "(", "-", "0.5", ",", "0.5", ")", "\n", "ax", ".", "set_zlim3d", "(", "-", "0.5", ",", "0.5", ")", "\n", "", "else", ":", "\n", "# Multiply with 0.7 to squeeze free-space.", "\n", "        ", "miv", "=", "0.7", "*", "np", ".", "min", "(", "[", "np", ".", "min", "(", "x", ")", ",", "np", ".", "min", "(", "y", ")", ",", "np", ".", "min", "(", "z", ")", "]", ")", "\n", "mav", "=", "0.7", "*", "np", ".", "max", "(", "[", "np", ".", "max", "(", "x", ")", ",", "np", ".", "max", "(", "y", ")", ",", "np", ".", "max", "(", "z", ")", "]", ")", "\n", "ax", ".", "set_xlim", "(", "miv", ",", "mav", ")", "\n", "ax", ".", "set_ylim", "(", "miv", ",", "mav", ")", "\n", "ax", ".", "set_zlim", "(", "miv", ",", "mav", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "\n", "", "if", "not", "show_axis", ":", "\n", "        ", "plt", ".", "axis", "(", "'off'", ")", "\n", "\n", "", "if", "'c'", "in", "kwargs", ":", "\n", "        ", "plt", ".", "colorbar", "(", "sc", ")", "\n", "\n", "", "if", "show", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "\n", "", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.pcutil.transform_point_clouds": [[155, 165], ["pcutil.rand_rotation_matrix", "X.dot().astype.dot().astype", "X.dot().astype.dot"], "function", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.pcutil.rand_rotation_matrix"], ["", "def", "transform_point_clouds", "(", "X", ",", "only_z_rotation", "=", "False", ",", "deflection", "=", "1.0", ")", ":", "\n", "    ", "r_rotation", "=", "rand_rotation_matrix", "(", "deflection", ")", "\n", "if", "only_z_rotation", ":", "\n", "        ", "r_rotation", "[", "0", ",", "2", "]", "=", "0", "\n", "r_rotation", "[", "2", ",", "0", "]", "=", "0", "\n", "r_rotation", "[", "1", ",", "2", "]", "=", "0", "\n", "r_rotation", "[", "2", ",", "1", "]", "=", "0", "\n", "r_rotation", "[", "2", ",", "2", "]", "=", "1", "\n", "", "X", "=", "X", ".", "dot", "(", "r_rotation", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "X", "\n", "", ""]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyParseError.__init__": [[131, 147], ["Exception.__init__"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.losses.champfer_loss.ChamferLoss.__init__"], ["def", "__init__", "(", "self", ",", "message", ",", "element", "=", "None", ",", "row", "=", "None", ",", "prop", "=", "None", ")", ":", "\n", "        ", "self", ".", "message", "=", "message", "\n", "self", ".", "element", "=", "element", "\n", "self", ".", "row", "=", "row", "\n", "self", ".", "prop", "=", "prop", "\n", "\n", "s", "=", "''", "\n", "if", "self", ".", "element", ":", "\n", "            ", "s", "+=", "'element %r: '", "%", "self", ".", "element", ".", "name", "\n", "", "if", "self", ".", "row", "is", "not", "None", ":", "\n", "            ", "s", "+=", "'row %d: '", "%", "self", ".", "row", "\n", "", "if", "self", ".", "prop", ":", "\n", "            ", "s", "+=", "'property %r: '", "%", "self", ".", "prop", ".", "name", "\n", "", "s", "+=", "self", ".", "message", "\n", "\n", "Exception", ".", "__init__", "(", "self", ",", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyParseError.__repr__": [[148, 151], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "'PlyParseError(%r, element=%r, row=%r, prop=%r)'", "%", "\n", "self", ".", "message", ",", "self", ".", "element", ",", "self", ".", "row", ",", "self", ".", "prop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyData.__init__": [[165, 192], ["list", "list"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "elements", "=", "[", "]", ",", "text", "=", "False", ",", "byte_order", "=", "'='", ",", "\n", "comments", "=", "[", "]", ",", "obj_info", "=", "[", "]", ")", ":", "\n", "        ", "\"\"\"\n        elements: sequence of PlyElement instances.\n\n        text: whether the resulting PLY file will be text (True) or\n            binary (False).\n\n        byte_order: '<' for little-endian, '>' for big-endian, or '='\n            for native.  This is only relevant if `text' is False.\n\n        comments: sequence of strings that will be placed in the header\n            between the 'ply' and 'format ...' lines.\n\n        obj_info: like comments, but will be placed in the header with\n            \"obj_info ...\" instead of \"comment ...\".\n\n        \"\"\"", "\n", "if", "byte_order", "==", "'='", "and", "not", "text", ":", "\n", "            ", "byte_order", "=", "_native_byte_order", "\n", "\n", "", "self", ".", "byte_order", "=", "byte_order", "\n", "self", ".", "text", "=", "text", "\n", "\n", "self", ".", "comments", "=", "list", "(", "comments", ")", "\n", "self", ".", "obj_info", "=", "list", "(", "obj_info", ")", "\n", "self", ".", "elements", "=", "elements", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyData._get_elements": [[193, 195], ["None"], "methods", ["None"], ["", "def", "_get_elements", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_elements", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyData._set_elements": [[196, 199], ["tuple", "plyfile.PlyData._index"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyElement._index"], ["", "def", "_set_elements", "(", "self", ",", "elements", ")", ":", "\n", "        ", "self", ".", "_elements", "=", "tuple", "(", "elements", ")", "\n", "self", ".", "_index", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyData._get_byte_order": [[202, 204], ["None"], "methods", ["None"], ["def", "_get_byte_order", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_byte_order", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyData._set_byte_order": [[205, 210], ["ValueError"], "methods", ["None"], ["", "def", "_set_byte_order", "(", "self", ",", "byte_order", ")", ":", "\n", "        ", "if", "byte_order", "not", "in", "[", "'<'", ",", "'>'", ",", "'='", "]", ":", "\n", "            ", "raise", "ValueError", "(", "\"byte order must be '<', '>', or '='\"", ")", "\n", "\n", "", "self", ".", "_byte_order", "=", "byte_order", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyData._index": [[213, 218], ["dict", "len", "len", "ValueError"], "methods", ["None"], ["def", "_index", "(", "self", ")", ":", "\n", "        ", "self", ".", "_element_lookup", "=", "dict", "(", "(", "elt", ".", "name", ",", "elt", ")", "for", "elt", "in", "\n", "self", ".", "_elements", ")", "\n", "if", "len", "(", "self", ".", "_element_lookup", ")", "!=", "len", "(", "self", ".", "_elements", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"two elements with same name\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyData._parse_header": [[219, 273], ["plyfile.PlyData", "stream.readline().decode().strip", "plyfile._split_line", "plyfile.PlyParseError", "comments.keys", "comments[].append", "plyfile.PlyParseError", "plyfile.PlyParseError", "len", "plyfile.PlyParseError", "plyfile.PlyParseError", "comments[].append", "plyfile.PlyElement._parse_multi", "len", "comments.keys", "stream.readline().decode", "comments.keys", "lines.append", "lines.append", "stream.readline().decode().strip.split", "stream.readline"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile._split_line", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyElement._parse_multi"], ["", "", "@", "staticmethod", "\n", "def", "_parse_header", "(", "stream", ")", ":", "\n", "        ", "\"\"\"\n        Parse a PLY header from a readable file-like stream.\n\n        \"\"\"", "\n", "lines", "=", "[", "]", "\n", "comments", "=", "{", "'comment'", ":", "[", "]", ",", "'obj_info'", ":", "[", "]", "}", "\n", "while", "True", ":", "\n", "            ", "line", "=", "stream", ".", "readline", "(", ")", ".", "decode", "(", "'ascii'", ")", ".", "strip", "(", ")", "\n", "fields", "=", "_split_line", "(", "line", ",", "1", ")", "\n", "\n", "if", "fields", "[", "0", "]", "==", "'end_header'", ":", "\n", "                ", "break", "\n", "\n", "", "elif", "fields", "[", "0", "]", "in", "comments", ".", "keys", "(", ")", ":", "\n", "                ", "lines", ".", "append", "(", "fields", ")", "\n", "", "else", ":", "\n", "                ", "lines", ".", "append", "(", "line", ".", "split", "(", ")", ")", "\n", "\n", "", "", "a", "=", "0", "\n", "if", "lines", "[", "a", "]", "!=", "[", "'ply'", "]", ":", "\n", "            ", "raise", "PlyParseError", "(", "\"expected 'ply'\"", ")", "\n", "\n", "", "a", "+=", "1", "\n", "while", "lines", "[", "a", "]", "[", "0", "]", "in", "comments", ".", "keys", "(", ")", ":", "\n", "            ", "comments", "[", "lines", "[", "a", "]", "[", "0", "]", "]", ".", "append", "(", "lines", "[", "a", "]", "[", "1", "]", ")", "\n", "a", "+=", "1", "\n", "\n", "", "if", "lines", "[", "a", "]", "[", "0", "]", "!=", "'format'", ":", "\n", "            ", "raise", "PlyParseError", "(", "\"expected 'format'\"", ")", "\n", "\n", "", "if", "lines", "[", "a", "]", "[", "2", "]", "!=", "'1.0'", ":", "\n", "            ", "raise", "PlyParseError", "(", "\"expected version '1.0'\"", ")", "\n", "\n", "", "if", "len", "(", "lines", "[", "a", "]", ")", "!=", "3", ":", "\n", "            ", "raise", "PlyParseError", "(", "\"too many fields after 'format'\"", ")", "\n", "\n", "", "fmt", "=", "lines", "[", "a", "]", "[", "1", "]", "\n", "\n", "if", "fmt", "not", "in", "_byte_order_map", ":", "\n", "            ", "raise", "PlyParseError", "(", "\"don't understand format %r\"", "%", "fmt", ")", "\n", "\n", "", "byte_order", "=", "_byte_order_map", "[", "fmt", "]", "\n", "text", "=", "fmt", "==", "'ascii'", "\n", "\n", "a", "+=", "1", "\n", "while", "a", "<", "len", "(", "lines", ")", "and", "lines", "[", "a", "]", "[", "0", "]", "in", "comments", ".", "keys", "(", ")", ":", "\n", "            ", "comments", "[", "lines", "[", "a", "]", "[", "0", "]", "]", ".", "append", "(", "lines", "[", "a", "]", "[", "1", "]", ")", "\n", "a", "+=", "1", "\n", "\n", "", "return", "PlyData", "(", "PlyElement", ".", "_parse_multi", "(", "lines", "[", "a", ":", "]", ")", ",", "\n", "text", ",", "byte_order", ",", "\n", "comments", "[", "'comment'", "]", ",", "comments", "[", "'obj_info'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyData.read": [[274, 290], ["plyfile._open_stream", "plyfile.PlyData._parse_header", "elt._read", "stream.close"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile._open_stream", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyData._parse_header", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyElement._read"], ["", "@", "staticmethod", "\n", "def", "read", "(", "stream", ")", ":", "\n", "        ", "\"\"\"\n        Read PLY data from a readable file-like object or filename.\n\n        \"\"\"", "\n", "(", "must_close", ",", "stream", ")", "=", "_open_stream", "(", "stream", ",", "'read'", ")", "\n", "try", ":", "\n", "            ", "data", "=", "PlyData", ".", "_parse_header", "(", "stream", ")", "\n", "for", "elt", "in", "data", ":", "\n", "                ", "elt", ".", "_read", "(", "stream", ",", "data", ".", "text", ",", "data", ".", "byte_order", ")", "\n", "", "", "finally", ":", "\n", "            ", "if", "must_close", ":", "\n", "                ", "stream", ".", "close", "(", ")", "\n", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyData.write": [[291, 305], ["plyfile._open_stream", "stream.write", "stream.write", "plyfile.PlyData.header.encode", "elt._write", "stream.close"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile._open_stream", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyElement._write"], ["", "def", "write", "(", "self", ",", "stream", ")", ":", "\n", "        ", "\"\"\"\n        Write PLY data to a writeable file-like object or filename.\n\n        \"\"\"", "\n", "(", "must_close", ",", "stream", ")", "=", "_open_stream", "(", "stream", ",", "'write'", ")", "\n", "try", ":", "\n", "            ", "stream", ".", "write", "(", "self", ".", "header", ".", "encode", "(", "'ascii'", ")", ")", "\n", "stream", ".", "write", "(", "b'\\r\\n'", ")", "\n", "for", "elt", "in", "self", ":", "\n", "                ", "elt", ".", "_write", "(", "stream", ",", "self", ".", "text", ",", "self", ".", "byte_order", ")", "\n", "", "", "finally", ":", "\n", "            ", "if", "must_close", ":", "\n", "                ", "stream", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyData.header": [[306, 332], ["lines.extend", "lines.append", "lines.append", "lines.append", "lines.append", "lines.append"], "methods", ["None"], ["", "", "", "@", "property", "\n", "def", "header", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Provide PLY-formatted metadata for the instance.\n\n        \"\"\"", "\n", "lines", "=", "[", "'ply'", "]", "\n", "\n", "if", "self", ".", "text", ":", "\n", "            ", "lines", ".", "append", "(", "'format ascii 1.0'", ")", "\n", "", "else", ":", "\n", "            ", "lines", ".", "append", "(", "'format '", "+", "\n", "_byte_order_reverse", "[", "self", ".", "byte_order", "]", "+", "\n", "' 1.0'", ")", "\n", "\n", "# Some information is lost here, since all comments are placed", "\n", "# between the 'format' line and the first element.", "\n", "", "for", "c", "in", "self", ".", "comments", ":", "\n", "            ", "lines", ".", "append", "(", "'comment '", "+", "c", ")", "\n", "\n", "", "for", "c", "in", "self", ".", "obj_info", ":", "\n", "            ", "lines", ".", "append", "(", "'obj_info '", "+", "c", ")", "\n", "\n", "", "lines", ".", "extend", "(", "elt", ".", "header", "for", "elt", "in", "self", ".", "elements", ")", "\n", "lines", ".", "append", "(", "'end_header'", ")", "\n", "return", "'\\r\\n'", ".", "join", "(", "lines", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyData.__iter__": [[333, 335], ["iter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "elements", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyData.__len__": [[336, 338], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "elements", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyData.__contains__": [[339, 341], ["None"], "methods", ["None"], ["", "def", "__contains__", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "name", "in", "self", ".", "_element_lookup", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyData.__getitem__": [[342, 344], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "self", ".", "_element_lookup", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyData.__str__": [[345, 347], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "header", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyData.__repr__": [[348, 353], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "'PlyData(%r, text=%r, byte_order=%r, '", "\n", "'comments=%r, obj_info=%r)'", "%", "\n", "(", "self", ".", "elements", ",", "self", ".", "text", ",", "self", ".", "byte_order", ",", "\n", "self", ".", "comments", ",", "self", ".", "obj_info", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyElement.__init__": [[379, 398], ["str", "plyfile.PlyElement._check_name", "tuple", "plyfile.PlyElement._index", "list", "any", "isinstance"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyProperty._check_name", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyElement._index"], ["def", "__init__", "(", "self", ",", "name", ",", "properties", ",", "count", ",", "comments", "=", "[", "]", ")", ":", "\n", "        ", "\"\"\"\n        This is not part of the public interface.  The preferred methods\n        of obtaining PlyElement instances are PlyData.read (to read from\n        a file) and PlyElement.describe (to construct from a numpy\n        array).\n\n        \"\"\"", "\n", "self", ".", "_name", "=", "str", "(", "name", ")", "\n", "self", ".", "_check_name", "(", ")", "\n", "self", ".", "_count", "=", "count", "\n", "\n", "self", ".", "_properties", "=", "tuple", "(", "properties", ")", "\n", "self", ".", "_index", "(", ")", "\n", "\n", "self", ".", "comments", "=", "list", "(", "comments", ")", "\n", "\n", "self", ".", "_have_list", "=", "any", "(", "isinstance", "(", "p", ",", "PlyListProperty", ")", "\n", "for", "p", "in", "self", ".", "properties", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyElement.count": [[399, 402], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "count", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_count", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyElement._get_data": [[403, 405], ["None"], "methods", ["None"], ["", "def", "_get_data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_data", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyElement._set_data": [[406, 410], ["len", "plyfile.PlyElement._check_sanity"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyElement._check_sanity"], ["", "def", "_set_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "self", ".", "_data", "=", "data", "\n", "self", ".", "_count", "=", "len", "(", "data", ")", "\n", "self", ".", "_check_sanity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyElement._check_sanity": [[413, 417], ["ValueError"], "methods", ["None"], ["def", "_check_sanity", "(", "self", ")", ":", "\n", "        ", "for", "prop", "in", "self", ".", "properties", ":", "\n", "            ", "if", "prop", ".", "name", "not", "in", "self", ".", "_data", ".", "dtype", ".", "fields", ":", "\n", "                ", "raise", "ValueError", "(", "\"dangling property %r\"", "%", "prop", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyElement._get_properties": [[418, 420], ["None"], "methods", ["None"], ["", "", "", "def", "_get_properties", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_properties", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyElement._set_properties": [[421, 425], ["tuple", "plyfile.PlyElement._check_sanity", "plyfile.PlyElement._index"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyElement._check_sanity", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyElement._index"], ["", "def", "_set_properties", "(", "self", ",", "properties", ")", ":", "\n", "        ", "self", ".", "_properties", "=", "tuple", "(", "properties", ")", "\n", "self", ".", "_check_sanity", "(", ")", "\n", "self", ".", "_index", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyElement._index": [[428, 433], ["dict", "len", "len", "ValueError"], "methods", ["None"], ["def", "_index", "(", "self", ")", ":", "\n", "        ", "self", ".", "_property_lookup", "=", "dict", "(", "(", "prop", ".", "name", ",", "prop", ")", "\n", "for", "prop", "in", "self", ".", "_properties", ")", "\n", "if", "len", "(", "self", ".", "_property_lookup", ")", "!=", "len", "(", "self", ".", "_properties", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"two properties with same name\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyElement.ply_property": [[434, 436], ["None"], "methods", ["None"], ["", "", "def", "ply_property", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "self", ".", "_property_lookup", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyElement.name": [[437, 440], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_name", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyElement._check_name": [[441, 445], ["any", "ValueError", "c.isspace"], "methods", ["None"], ["", "def", "_check_name", "(", "self", ")", ":", "\n", "        ", "if", "any", "(", "c", ".", "isspace", "(", ")", "for", "c", "in", "self", ".", "_name", ")", ":", "\n", "            ", "msg", "=", "\"element name %r contains spaces\"", "%", "self", ".", "_name", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyElement.dtype": [[446, 456], ["prop.dtype"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyListProperty.dtype"], ["", "", "def", "dtype", "(", "self", ",", "byte_order", "=", "'='", ")", ":", "\n", "        ", "\"\"\"\n        Return the numpy dtype of the in-memory representation of the\n        data.  (If there are no list properties, and the PLY format is\n        binary, then this also accurately describes the on-disk\n        representation of the element.)\n\n        \"\"\"", "\n", "return", "[", "(", "prop", ".", "name", ",", "prop", ".", "dtype", "(", "byte_order", ")", ")", "\n", "for", "prop", "in", "self", ".", "properties", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyElement._parse_multi": [[457, 469], ["plyfile.PlyElement._parse_one", "elements.append"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyProperty._parse_one"], ["", "@", "staticmethod", "\n", "def", "_parse_multi", "(", "header_lines", ")", ":", "\n", "        ", "\"\"\"\n        Parse a list of PLY element definitions.\n\n        \"\"\"", "\n", "elements", "=", "[", "]", "\n", "while", "header_lines", ":", "\n", "            ", "(", "elt", ",", "header_lines", ")", "=", "PlyElement", ".", "_parse_one", "(", "header_lines", ")", "\n", "elements", ".", "append", "(", "elt", ")", "\n", "\n", "", "return", "elements", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyElement._parse_one": [[470, 505], ["plyfile.PlyParseError", "len", "plyfile.PlyParseError", "len", "plyfile.PlyParseError", "int", "plyfile.PlyElement", "len", "comments.append", "properties.append", "plyfile.PlyProperty._parse_one"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyProperty._parse_one"], ["", "@", "staticmethod", "\n", "def", "_parse_one", "(", "lines", ")", ":", "\n", "        ", "\"\"\"\n        Consume one element definition.  The unconsumed input is\n        returned along with a PlyElement instance.\n\n        \"\"\"", "\n", "a", "=", "0", "\n", "line", "=", "lines", "[", "a", "]", "\n", "\n", "if", "line", "[", "0", "]", "!=", "'element'", ":", "\n", "            ", "raise", "PlyParseError", "(", "\"expected 'element'\"", ")", "\n", "", "if", "len", "(", "line", ")", ">", "3", ":", "\n", "            ", "raise", "PlyParseError", "(", "\"too many fields after 'element'\"", ")", "\n", "", "if", "len", "(", "line", ")", "<", "3", ":", "\n", "            ", "raise", "PlyParseError", "(", "\"too few fields after 'element'\"", ")", "\n", "\n", "", "(", "name", ",", "count", ")", "=", "(", "line", "[", "1", "]", ",", "int", "(", "line", "[", "2", "]", ")", ")", "\n", "\n", "comments", "=", "[", "]", "\n", "properties", "=", "[", "]", "\n", "while", "True", ":", "\n", "            ", "a", "+=", "1", "\n", "if", "a", ">=", "len", "(", "lines", ")", ":", "\n", "                ", "break", "\n", "\n", "", "if", "lines", "[", "a", "]", "[", "0", "]", "==", "'comment'", ":", "\n", "                ", "comments", ".", "append", "(", "lines", "[", "a", "]", "[", "1", "]", ")", "\n", "", "elif", "lines", "[", "a", "]", "[", "0", "]", "==", "'property'", ":", "\n", "                ", "properties", ".", "append", "(", "PlyProperty", ".", "_parse_one", "(", "lines", "[", "a", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "break", "\n", "\n", "", "", "return", "(", "PlyElement", "(", "name", ",", "properties", ",", "count", ",", "comments", ")", ",", "\n", "lines", "[", "a", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyElement.describe": [[506, 566], ["len", "plyfile.PlyElement", "isinstance", "TypeError", "len", "ValueError", "properties.append", "isinstance", "ValueError", "ValueError", "plyfile.PlyListProperty", "plyfile._lookup_type", "plyfile.PlyProperty", "len", "val_types.get", "plyfile._lookup_type", "plyfile._lookup_type", "len", "ValueError", "len_types.get"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile._lookup_type", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile._lookup_type", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile._lookup_type"], ["", "@", "staticmethod", "\n", "def", "describe", "(", "data", ",", "name", ",", "len_types", "=", "{", "}", ",", "val_types", "=", "{", "}", ",", "\n", "comments", "=", "[", "]", ")", ":", "\n", "        ", "\"\"\"\n        Construct a PlyElement from an array's metadata.\n\n        len_types and val_types can be given as mappings from list\n        property names to type strings (like 'u1', 'f4', etc., or\n        'int8', 'float32', etc.). These can be used to define the length\n        and value types of list properties.  List property lengths\n        always default to type 'u1' (8-bit unsigned integer), and value\n        types default to 'i4' (32-bit integer).\n\n        \"\"\"", "\n", "if", "not", "isinstance", "(", "data", ",", "_np", ".", "ndarray", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\"only numpy arrays are supported\"", ")", "\n", "\n", "", "if", "len", "(", "data", ".", "shape", ")", "!=", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"only one-dimensional arrays are \"", "\n", "\"supported\"", ")", "\n", "\n", "", "count", "=", "len", "(", "data", ")", "\n", "\n", "properties", "=", "[", "]", "\n", "descr", "=", "data", ".", "dtype", ".", "descr", "\n", "\n", "for", "t", "in", "descr", ":", "\n", "            ", "if", "not", "isinstance", "(", "t", "[", "1", "]", ",", "str", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"nested records not supported\"", ")", "\n", "\n", "", "if", "not", "t", "[", "0", "]", ":", "\n", "                ", "raise", "ValueError", "(", "\"field with empty name\"", ")", "\n", "\n", "", "if", "len", "(", "t", ")", "!=", "2", "or", "t", "[", "1", "]", "[", "1", "]", "==", "'O'", ":", "\n", "# non-scalar field, which corresponds to a list", "\n", "# property in PLY.", "\n", "\n", "                ", "if", "t", "[", "1", "]", "[", "1", "]", "==", "'O'", ":", "\n", "                    ", "if", "len", "(", "t", ")", "!=", "2", ":", "\n", "                        ", "raise", "ValueError", "(", "\"non-scalar object fields not \"", "\n", "\"supported\"", ")", "\n", "\n", "", "", "len_str", "=", "_data_type_reverse", "[", "len_types", ".", "get", "(", "t", "[", "0", "]", ",", "'u1'", ")", "]", "\n", "if", "t", "[", "1", "]", "[", "1", "]", "==", "'O'", ":", "\n", "                    ", "val_type", "=", "val_types", ".", "get", "(", "t", "[", "0", "]", ",", "'i4'", ")", "\n", "val_str", "=", "_lookup_type", "(", "val_type", ")", "\n", "", "else", ":", "\n", "                    ", "val_str", "=", "_lookup_type", "(", "t", "[", "1", "]", "[", "1", ":", "]", ")", "\n", "\n", "", "prop", "=", "PlyListProperty", "(", "t", "[", "0", "]", ",", "len_str", ",", "val_str", ")", "\n", "", "else", ":", "\n", "                ", "val_str", "=", "_lookup_type", "(", "t", "[", "1", "]", "[", "1", ":", "]", ")", "\n", "prop", "=", "PlyProperty", "(", "t", "[", "0", "]", ",", "val_str", ")", "\n", "\n", "", "properties", ".", "append", "(", "prop", ")", "\n", "\n", "", "elt", "=", "PlyElement", "(", "name", ",", "properties", ",", "count", ",", "comments", ")", "\n", "elt", ".", "data", "=", "data", "\n", "\n", "return", "elt", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyElement._read": [[567, 592], ["plyfile.PlyElement._check_sanity", "plyfile.PlyElement._read_txt", "len", "len", "plyfile.PlyParseError", "plyfile.PlyElement._read_bin", "numpy.fromfile", "plyfile.PlyElement.dtype"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyElement._check_sanity", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyElement._read_txt", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyListProperty._read_bin", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyListProperty.dtype"], ["", "def", "_read", "(", "self", ",", "stream", ",", "text", ",", "byte_order", ")", ":", "\n", "        ", "\"\"\"\n        Read the actual data from a PLY file.\n\n        \"\"\"", "\n", "if", "text", ":", "\n", "            ", "self", ".", "_read_txt", "(", "stream", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "_have_list", ":", "\n", "# There are list properties, so a simple load is", "\n", "# impossible.", "\n", "                ", "self", ".", "_read_bin", "(", "stream", ",", "byte_order", ")", "\n", "", "else", ":", "\n", "# There are no list properties, so loading the data is", "\n", "# much more straightforward.", "\n", "                ", "self", ".", "_data", "=", "_np", ".", "fromfile", "(", "stream", ",", "\n", "self", ".", "dtype", "(", "byte_order", ")", ",", "\n", "self", ".", "count", ")", "\n", "\n", "", "", "if", "len", "(", "self", ".", "_data", ")", "<", "self", ".", "count", ":", "\n", "            ", "k", "=", "len", "(", "self", ".", "_data", ")", "\n", "del", "self", ".", "_data", "\n", "raise", "PlyParseError", "(", "\"early end-of-file\"", ",", "self", ",", "k", ")", "\n", "\n", "", "self", ".", "_check_sanity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyElement._write": [[593, 610], ["plyfile.PlyElement._write_txt", "plyfile.PlyElement._write_bin", "plyfile.PlyElement.data.astype().tofile", "plyfile.PlyElement.data.astype", "plyfile.PlyElement.dtype"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyElement._write_txt", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyListProperty._write_bin", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyListProperty.dtype"], ["", "def", "_write", "(", "self", ",", "stream", ",", "text", ",", "byte_order", ")", ":", "\n", "        ", "\"\"\"\n        Write the data to a PLY file.\n\n        \"\"\"", "\n", "if", "text", ":", "\n", "            ", "self", ".", "_write_txt", "(", "stream", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "_have_list", ":", "\n", "# There are list properties, so serialization is", "\n", "# slightly complicated.", "\n", "                ", "self", ".", "_write_bin", "(", "stream", ",", "byte_order", ")", "\n", "", "else", ":", "\n", "# no list properties, so serialization is", "\n", "# straightforward.", "\n", "                ", "self", ".", "data", ".", "astype", "(", "self", ".", "dtype", "(", "byte_order", ")", ",", "\n", "copy", "=", "False", ")", ".", "tofile", "(", "stream", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyElement._read_txt": [[611, 642], ["numpy.empty", "itertools.islice", "iter", "iter", "plyfile.PlyParseError", "plyfile.PlyElement.dtype", "line.strip().split", "next", "plyfile.PlyParseError", "prop._from_fields", "line.strip", "plyfile.PlyParseError", "plyfile.PlyParseError"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyListProperty.dtype", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyListProperty._from_fields"], ["", "", "", "def", "_read_txt", "(", "self", ",", "stream", ")", ":", "\n", "        ", "\"\"\"\n        Load a PLY element from an ASCII-format PLY file.  The element\n        may contain list properties.\n\n        \"\"\"", "\n", "self", ".", "_data", "=", "_np", ".", "empty", "(", "self", ".", "count", ",", "dtype", "=", "self", ".", "dtype", "(", ")", ")", "\n", "\n", "k", "=", "0", "\n", "for", "line", "in", "_islice", "(", "iter", "(", "stream", ".", "readline", ",", "b''", ")", ",", "self", ".", "count", ")", ":", "\n", "            ", "fields", "=", "iter", "(", "line", ".", "strip", "(", ")", ".", "split", "(", ")", ")", "\n", "for", "prop", "in", "self", ".", "properties", ":", "\n", "                ", "try", ":", "\n", "                    ", "self", ".", "_data", "[", "prop", ".", "name", "]", "[", "k", "]", "=", "prop", ".", "_from_fields", "(", "fields", ")", "\n", "", "except", "StopIteration", ":", "\n", "                    ", "raise", "PlyParseError", "(", "\"early end-of-line\"", ",", "\n", "self", ",", "k", ",", "prop", ")", "\n", "", "except", "ValueError", ":", "\n", "                    ", "raise", "PlyParseError", "(", "\"malformed input\"", ",", "\n", "self", ",", "k", ",", "prop", ")", "\n", "", "", "try", ":", "\n", "                ", "next", "(", "fields", ")", "\n", "", "except", "StopIteration", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "raise", "PlyParseError", "(", "\"expected end-of-line\"", ",", "self", ",", "k", ")", "\n", "", "k", "+=", "1", "\n", "\n", "", "if", "k", "<", "self", ".", "count", ":", "\n", "            ", "del", "self", ".", "_data", "\n", "raise", "PlyParseError", "(", "\"early end-of-file\"", ",", "self", ",", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyElement._write_txt": [[643, 655], ["numpy.savetxt", "fields.extend", "prop._to_fields"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyListProperty._to_fields"], ["", "", "def", "_write_txt", "(", "self", ",", "stream", ")", ":", "\n", "        ", "\"\"\"\n        Save a PLY element to an ASCII-format PLY file.  The element may\n        contain list properties.\n\n        \"\"\"", "\n", "for", "rec", "in", "self", ".", "data", ":", "\n", "            ", "fields", "=", "[", "]", "\n", "for", "prop", "in", "self", ".", "properties", ":", "\n", "                ", "fields", ".", "extend", "(", "prop", ".", "_to_fields", "(", "rec", "[", "prop", ".", "name", "]", ")", ")", "\n", "\n", "", "_np", ".", "savetxt", "(", "stream", ",", "[", "fields", "]", ",", "'%.18g'", ",", "newline", "=", "'\\r\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyElement._read_bin": [[656, 672], ["numpy.empty", "_range", "plyfile.PlyElement.dtype", "prop._read_bin", "plyfile.PlyParseError"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyListProperty.dtype", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyListProperty._read_bin"], ["", "", "def", "_read_bin", "(", "self", ",", "stream", ",", "byte_order", ")", ":", "\n", "        ", "\"\"\"\n        Load a PLY element from a binary PLY file.  The element may\n        contain list properties.\n\n        \"\"\"", "\n", "self", ".", "_data", "=", "_np", ".", "empty", "(", "self", ".", "count", ",", "dtype", "=", "self", ".", "dtype", "(", "byte_order", ")", ")", "\n", "\n", "for", "k", "in", "_range", "(", "self", ".", "count", ")", ":", "\n", "            ", "for", "prop", "in", "self", ".", "properties", ":", "\n", "                ", "try", ":", "\n", "                    ", "self", ".", "_data", "[", "prop", ".", "name", "]", "[", "k", "]", "=", "prop", ".", "_read_bin", "(", "stream", ",", "byte_order", ")", "\n", "", "except", "StopIteration", ":", "\n", "                    ", "raise", "PlyParseError", "(", "\"early end-of-file\"", ",", "\n", "self", ",", "k", ",", "prop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyElement._write_bin": [[673, 682], ["prop._write_bin"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyListProperty._write_bin"], ["", "", "", "", "def", "_write_bin", "(", "self", ",", "stream", ",", "byte_order", ")", ":", "\n", "        ", "\"\"\"\n        Save a PLY element to a binary PLY file.  The element may\n        contain list properties.\n\n        \"\"\"", "\n", "for", "rec", "in", "self", ".", "data", ":", "\n", "            ", "for", "prop", "in", "self", ".", "properties", ":", "\n", "                ", "prop", ".", "_write_bin", "(", "rec", "[", "prop", ".", "name", "]", ",", "stream", ",", "byte_order", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyElement.header": [[683, 700], ["lines.extend", "lines.append", "list", "map"], "methods", ["None"], ["", "", "", "@", "property", "\n", "def", "header", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Format this element's metadata as it would appear in a PLY\n        header.\n\n        \"\"\"", "\n", "lines", "=", "[", "'element %s %d'", "%", "(", "self", ".", "name", ",", "self", ".", "count", ")", "]", "\n", "\n", "# Some information is lost here, since all comments are placed", "\n", "# between the 'element' line and the first property definition.", "\n", "for", "c", "in", "self", ".", "comments", ":", "\n", "            ", "lines", ".", "append", "(", "'comment '", "+", "c", ")", "\n", "\n", "", "lines", ".", "extend", "(", "list", "(", "map", "(", "str", ",", "self", ".", "properties", ")", ")", ")", "\n", "\n", "return", "'\\r\\n'", ".", "join", "(", "lines", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyElement.__getitem__": [[701, 703], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "data", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyElement.__setitem__": [[704, 706], ["None"], "methods", ["None"], ["", "def", "__setitem__", "(", "self", ",", "key", ",", "value", ")", ":", "\n", "        ", "self", ".", "data", "[", "key", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyElement.__str__": [[707, 709], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "header", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyElement.__repr__": [[710, 714], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "'PlyElement(%r, %r, count=%d, comments=%r)'", "%", "\n", "(", "self", ".", "name", ",", "self", ".", "properties", ",", "self", ".", "count", ",", "\n", "self", ".", "comments", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyProperty.__init__": [[724, 728], ["str", "plyfile.PlyProperty._check_name"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyProperty._check_name"], ["def", "__init__", "(", "self", ",", "name", ",", "val_dtype", ")", ":", "\n", "        ", "self", ".", "_name", "=", "str", "(", "name", ")", "\n", "self", ".", "_check_name", "(", ")", "\n", "self", ".", "val_dtype", "=", "val_dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyProperty._get_val_dtype": [[729, 731], ["None"], "methods", ["None"], ["", "def", "_get_val_dtype", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_val_dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyProperty._set_val_dtype": [[732, 734], ["plyfile._lookup_type"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile._lookup_type"], ["", "def", "_set_val_dtype", "(", "self", ",", "val_dtype", ")", ":", "\n", "        ", "self", ".", "_val_dtype", "=", "_data_types", "[", "_lookup_type", "(", "val_dtype", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyProperty.name": [[737, 740], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_name", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyProperty._check_name": [[741, 745], ["any", "RuntimeError", "c.isspace"], "methods", ["None"], ["", "def", "_check_name", "(", "self", ")", ":", "\n", "        ", "if", "any", "(", "c", ".", "isspace", "(", ")", "for", "c", "in", "self", ".", "_name", ")", ":", "\n", "            ", "msg", "=", "\"Error: property name %r contains spaces\"", "%", "self", ".", "_name", "\n", "raise", "RuntimeError", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyProperty._parse_one": [[746, 769], ["plyfile.PlyListProperty", "plyfile.PlyProperty", "len", "plyfile.PlyParseError", "len", "plyfile.PlyParseError", "len", "plyfile.PlyParseError", "len", "plyfile.PlyParseError"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_parse_one", "(", "line", ")", ":", "\n", "        ", "assert", "line", "[", "0", "]", "==", "'property'", "\n", "\n", "if", "line", "[", "1", "]", "==", "'list'", ":", "\n", "            ", "if", "len", "(", "line", ")", ">", "5", ":", "\n", "                ", "raise", "PlyParseError", "(", "\"too many fields after \"", "\n", "\"'property list'\"", ")", "\n", "", "if", "len", "(", "line", ")", "<", "5", ":", "\n", "                ", "raise", "PlyParseError", "(", "\"too few fields after \"", "\n", "\"'property list'\"", ")", "\n", "\n", "", "return", "PlyListProperty", "(", "line", "[", "4", "]", ",", "line", "[", "2", "]", ",", "line", "[", "3", "]", ")", "\n", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "line", ")", ">", "3", ":", "\n", "                ", "raise", "PlyParseError", "(", "\"too many fields after \"", "\n", "\"'property'\"", ")", "\n", "", "if", "len", "(", "line", ")", "<", "3", ":", "\n", "                ", "raise", "PlyParseError", "(", "\"too few fields after \"", "\n", "\"'property'\"", ")", "\n", "\n", "", "return", "PlyProperty", "(", "line", "[", "2", "]", ",", "line", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyProperty.dtype": [[770, 777], ["None"], "methods", ["None"], ["", "", "def", "dtype", "(", "self", ",", "byte_order", "=", "'='", ")", ":", "\n", "        ", "\"\"\"\n        Return the numpy dtype description for this property (as a tuple\n        of strings).\n\n        \"\"\"", "\n", "return", "byte_order", "+", "self", ".", "val_dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyProperty._from_fields": [[778, 785], ["numpy.dtype().type", "next", "numpy.dtype", "plyfile.PlyProperty.dtype"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyListProperty.dtype", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyListProperty.dtype"], ["", "def", "_from_fields", "(", "self", ",", "fields", ")", ":", "\n", "        ", "\"\"\"\n        Parse from generator.  Raise StopIteration if the property could\n        not be read.\n\n        \"\"\"", "\n", "return", "_np", ".", "dtype", "(", "self", ".", "dtype", "(", ")", ")", ".", "type", "(", "next", "(", "fields", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyProperty._to_fields": [[786, 792], ["numpy.dtype().type", "numpy.dtype", "plyfile.PlyProperty.dtype"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyListProperty.dtype", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyListProperty.dtype"], ["", "def", "_to_fields", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"\n        Return generator over one item.\n\n        \"\"\"", "\n", "yield", "_np", ".", "dtype", "(", "self", ".", "dtype", "(", ")", ")", ".", "type", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyProperty._read_bin": [[793, 803], ["numpy.fromfile", "plyfile.PlyProperty.dtype"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyListProperty.dtype"], ["", "def", "_read_bin", "(", "self", ",", "stream", ",", "byte_order", ")", ":", "\n", "        ", "\"\"\"\n        Read data from a binary stream.  Raise StopIteration if the\n        property could not be read.\n\n        \"\"\"", "\n", "try", ":", "\n", "            ", "return", "_np", ".", "fromfile", "(", "stream", ",", "self", ".", "dtype", "(", "byte_order", ")", ",", "1", ")", "[", "0", "]", "\n", "", "except", "IndexError", ":", "\n", "            ", "raise", "StopIteration", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyProperty._write_bin": [[804, 810], ["numpy.dtype().type().tofile", "numpy.dtype().type", "numpy.dtype", "plyfile.PlyProperty.dtype"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyListProperty.dtype", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyListProperty.dtype"], ["", "", "def", "_write_bin", "(", "self", ",", "data", ",", "stream", ",", "byte_order", ")", ":", "\n", "        ", "\"\"\"\n        Write data to a binary stream.\n\n        \"\"\"", "\n", "_np", ".", "dtype", "(", "self", ".", "dtype", "(", "byte_order", ")", ")", ".", "type", "(", "data", ")", ".", "tofile", "(", "stream", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyProperty.__str__": [[811, 814], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "val_str", "=", "_data_type_reverse", "[", "self", ".", "val_dtype", "]", "\n", "return", "'property %s %s'", "%", "(", "val_str", ",", "self", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyProperty.__repr__": [[815, 818], ["plyfile._lookup_type"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile._lookup_type"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'PlyProperty(%r, %r)'", "%", "(", "self", ".", "name", ",", "\n", "_lookup_type", "(", "self", ".", "val_dtype", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyListProperty.__init__": [[827, 831], ["plyfile.PlyProperty.__init__"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.losses.champfer_loss.ChamferLoss.__init__"], ["def", "__init__", "(", "self", ",", "name", ",", "len_dtype", ",", "val_dtype", ")", ":", "\n", "        ", "PlyProperty", ".", "__init__", "(", "self", ",", "name", ",", "val_dtype", ")", "\n", "\n", "self", ".", "len_dtype", "=", "len_dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyListProperty._get_len_dtype": [[832, 834], ["None"], "methods", ["None"], ["", "def", "_get_len_dtype", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_len_dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyListProperty._set_len_dtype": [[835, 837], ["plyfile._lookup_type"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile._lookup_type"], ["", "def", "_set_len_dtype", "(", "self", ",", "len_dtype", ")", ":", "\n", "        ", "self", ".", "_len_dtype", "=", "_data_types", "[", "_lookup_type", "(", "len_dtype", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyListProperty.dtype": [[840, 846], ["None"], "methods", ["None"], ["def", "dtype", "(", "self", ",", "byte_order", "=", "'='", ")", ":", "\n", "        ", "\"\"\"\n        List properties always have a numpy dtype of \"object\".\n\n        \"\"\"", "\n", "return", "'|O'", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyListProperty.list_dtype": [[847, 855], ["None"], "methods", ["None"], ["", "def", "list_dtype", "(", "self", ",", "byte_order", "=", "'='", ")", ":", "\n", "        ", "\"\"\"\n        Return the pair (len_dtype, val_dtype) (both numpy-friendly\n        strings).\n\n        \"\"\"", "\n", "return", "(", "byte_order", "+", "self", ".", "len_dtype", ",", "\n", "byte_order", "+", "self", ".", "val_dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyListProperty._from_fields": [[856, 866], ["plyfile.PlyListProperty.list_dtype", "int", "numpy.loadtxt", "numpy.dtype().type", "list", "len", "next", "itertools.islice", "numpy.dtype"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyListProperty.list_dtype", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyListProperty.dtype"], ["", "def", "_from_fields", "(", "self", ",", "fields", ")", ":", "\n", "        ", "(", "len_t", ",", "val_t", ")", "=", "self", ".", "list_dtype", "(", ")", "\n", "\n", "n", "=", "int", "(", "_np", ".", "dtype", "(", "len_t", ")", ".", "type", "(", "next", "(", "fields", ")", ")", ")", "\n", "\n", "data", "=", "_np", ".", "loadtxt", "(", "list", "(", "_islice", "(", "fields", ",", "n", ")", ")", ",", "val_t", ",", "ndmin", "=", "1", ")", "\n", "if", "len", "(", "data", ")", "<", "n", ":", "\n", "            ", "raise", "StopIteration", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyListProperty._to_fields": [[867, 880], ["plyfile.PlyListProperty.list_dtype", "numpy.asarray().ravel", "numpy.dtype().type", "numpy.asarray", "numpy.dtype"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyListProperty.list_dtype", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyListProperty.dtype"], ["", "def", "_to_fields", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"\n        Return generator over the (numerical) PLY representation of the\n        list data (length followed by actual data).\n\n        \"\"\"", "\n", "(", "len_t", ",", "val_t", ")", "=", "self", ".", "list_dtype", "(", ")", "\n", "\n", "data", "=", "_np", ".", "asarray", "(", "data", ",", "dtype", "=", "val_t", ")", ".", "ravel", "(", ")", "\n", "\n", "yield", "_np", ".", "dtype", "(", "len_t", ")", ".", "type", "(", "data", ".", "size", ")", "\n", "for", "x", "in", "data", ":", "\n", "            ", "yield", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyListProperty._read_bin": [[881, 894], ["plyfile.PlyListProperty.list_dtype", "numpy.fromfile", "len", "numpy.fromfile"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyListProperty.list_dtype"], ["", "", "def", "_read_bin", "(", "self", ",", "stream", ",", "byte_order", ")", ":", "\n", "        ", "(", "len_t", ",", "val_t", ")", "=", "self", ".", "list_dtype", "(", "byte_order", ")", "\n", "\n", "try", ":", "\n", "            ", "n", "=", "_np", ".", "fromfile", "(", "stream", ",", "len_t", ",", "1", ")", "[", "0", "]", "\n", "", "except", "IndexError", ":", "\n", "            ", "raise", "StopIteration", "\n", "\n", "", "data", "=", "_np", ".", "fromfile", "(", "stream", ",", "val_t", ",", "n", ")", "\n", "if", "len", "(", "data", ")", "<", "n", ":", "\n", "            ", "raise", "StopIteration", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyListProperty._write_bin": [[895, 906], ["plyfile.PlyListProperty.list_dtype", "numpy.asarray().ravel", "numpy.array().tofile", "numpy.asarray().ravel.tofile", "numpy.asarray", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyListProperty.list_dtype"], ["", "def", "_write_bin", "(", "self", ",", "data", ",", "stream", ",", "byte_order", ")", ":", "\n", "        ", "\"\"\"\n        Write data to a binary stream.\n\n        \"\"\"", "\n", "(", "len_t", ",", "val_t", ")", "=", "self", ".", "list_dtype", "(", "byte_order", ")", "\n", "\n", "data", "=", "_np", ".", "asarray", "(", "data", ",", "dtype", "=", "val_t", ")", ".", "ravel", "(", ")", "\n", "\n", "_np", ".", "array", "(", "data", ".", "size", ",", "dtype", "=", "len_t", ")", ".", "tofile", "(", "stream", ")", "\n", "data", ".", "tofile", "(", "stream", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyListProperty.__str__": [[907, 911], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "len_str", "=", "_data_type_reverse", "[", "self", ".", "len_dtype", "]", "\n", "val_str", "=", "_data_type_reverse", "[", "self", ".", "val_dtype", "]", "\n", "return", "'property list %s %s %s'", "%", "(", "len_str", ",", "val_str", ",", "self", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyListProperty.__repr__": [[912, 917], ["plyfile._lookup_type", "plyfile._lookup_type"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile._lookup_type", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile._lookup_type"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "'PlyListProperty(%r, %r, %r)'", "%", "\n", "(", "self", ".", "name", ",", "\n", "_lookup_type", "(", "self", ".", "len_dtype", ")", ",", "\n", "_lookup_type", "(", "self", ".", "val_dtype", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile._lookup_type": [[80, 89], ["ValueError"], "function", ["None"], ["def", "_lookup_type", "(", "type_str", ")", ":", "\n", "    ", "if", "type_str", "not", "in", "_data_type_reverse", ":", "\n", "        ", "try", ":", "\n", "            ", "type_str", "=", "_data_types", "[", "type_str", "]", "\n", "", "except", "KeyError", ":", "\n", "            ", "raise", "ValueError", "(", "\"field type %r not in %r\"", "%", "\n", "(", "type_str", ",", "_types_list", ")", ")", "\n", "\n", "", "", "return", "_data_type_reverse", "[", "type_str", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile._split_line": [[91, 99], ["line.split", "len", "line.split.append", "len"], "function", ["None"], ["", "def", "_split_line", "(", "line", ",", "n", ")", ":", "\n", "    ", "fields", "=", "line", ".", "split", "(", "None", ",", "n", ")", "\n", "if", "len", "(", "fields", ")", "==", "n", ":", "\n", "        ", "fields", ".", "append", "(", "''", ")", "\n", "\n", "", "assert", "len", "(", "fields", ")", "==", "n", "+", "1", "\n", "\n", "return", "fields", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.make2d": [[101, 119], ["RuntimeError", "len", "numpy.fromiter", "len", "len"], "function", ["None"], ["", "def", "make2d", "(", "array", ",", "cols", "=", "None", ",", "dtype", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Make a 2D array from an array of arrays.  The `cols' and `dtype'\n    arguments can be omitted if the array is not empty.\n\n    \"\"\"", "\n", "if", "(", "cols", "is", "None", "or", "dtype", "is", "None", ")", "and", "not", "len", "(", "array", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"cols and dtype must be specified for empty \"", "\n", "\"array\"", ")", "\n", "\n", "", "if", "cols", "is", "None", ":", "\n", "        ", "cols", "=", "len", "(", "array", "[", "0", "]", ")", "\n", "\n", "", "if", "dtype", "is", "None", ":", "\n", "        ", "dtype", "=", "array", "[", "0", "]", ".", "dtype", "\n", "\n", "", "return", "_np", ".", "fromiter", "(", "array", ",", "[", "(", "'_'", ",", "dtype", ",", "(", "cols", ",", ")", ")", "]", ",", "\n", "count", "=", "len", "(", "array", ")", ")", "[", "'_'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile._open_stream": [[355, 362], ["hasattr", "open", "RuntimeError"], "function", ["None"], ["", "", "def", "_open_stream", "(", "stream", ",", "read_or_write", ")", ":", "\n", "    ", "if", "hasattr", "(", "stream", ",", "read_or_write", ")", ":", "\n", "        ", "return", "(", "False", ",", "stream", ")", "\n", "", "try", ":", "\n", "        ", "return", "(", "True", ",", "open", "(", "stream", ",", "read_or_write", "[", "0", "]", "+", "'b'", ")", ")", "\n", "", "except", "TypeError", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"expected open file or filename\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.load_ply": [[919, 942], ["plyfile.PlyData.read", "numpy.vstack", "numpy.vstack", "ret_val.append", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.hstack", "ret_val.append", "len"], "function", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyData.read"], ["", "", "def", "load_ply", "(", "file_name", ":", "str", ",", "\n", "with_faces", ":", "bool", "=", "False", ",", "\n", "with_color", ":", "bool", "=", "False", ")", "->", "_np", ".", "ndarray", ":", "\n", "    ", "ply_data", "=", "PlyData", ".", "read", "(", "file_name", ")", "\n", "points", "=", "ply_data", "[", "'vertex'", "]", "\n", "points", "=", "_np", ".", "vstack", "(", "[", "points", "[", "'x'", "]", ",", "points", "[", "'y'", "]", ",", "points", "[", "'z'", "]", "]", ")", ".", "T", "\n", "ret_val", "=", "[", "points", "]", "\n", "\n", "if", "with_faces", ":", "\n", "        ", "faces", "=", "_np", ".", "vstack", "(", "ply_data", "[", "'face'", "]", "[", "'vertex_indices'", "]", ")", "\n", "ret_val", ".", "append", "(", "faces", ")", "\n", "\n", "", "if", "with_color", ":", "\n", "        ", "r", "=", "_np", ".", "vstack", "(", "ply_data", "[", "'vertex'", "]", "[", "'red'", "]", ")", "\n", "g", "=", "_np", ".", "vstack", "(", "ply_data", "[", "'vertex'", "]", "[", "'green'", "]", ")", "\n", "b", "=", "_np", ".", "vstack", "(", "ply_data", "[", "'vertex'", "]", "[", "'blue'", "]", ")", "\n", "color", "=", "_np", ".", "hstack", "(", "(", "r", ",", "g", ",", "b", ")", ")", "\n", "ret_val", ".", "append", "(", "color", ")", "\n", "\n", "", "if", "len", "(", "ret_val", ")", "==", "1", ":", "# Unwrap the list", "\n", "        ", "ret_val", "=", "ret_val", "[", "0", "]", "\n", "\n", "", "return", "ret_val", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.quick_save_ply_file": [[944, 963], ["len", "numpy.empty", "open", "fp.write", "fp.write", "fp.close", "str", "bytes", "_np.empty.tobytes"], "function", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyData.write", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyData.write"], ["", "def", "quick_save_ply_file", "(", "points", ",", "filename", ":", "str", ")", ":", "\n", "    ", "pl", "=", "len", "(", "points", ")", "\n", "header", "=", "\"ply\\n\"", "\"format binary_little_endian 1.0\\n\"", "\"element vertex \"", "+", "str", "(", "pl", ")", "+", "\"\\n\"", "\"property float x\\n\"", "\"property float y\\n\"", "\"property float z\\n\"", "\"end_header\\n\"", "\n", "\n", "dtype_vertex", "=", "[", "(", "'vertex'", ",", "'<f4'", ",", "(", "3", ")", ")", "]", "\n", "vertex", "=", "_np", ".", "empty", "(", "pl", ",", "dtype", "=", "dtype_vertex", ")", "\n", "vertex", "[", "'vertex'", "]", "=", "points", "\n", "\n", "with", "open", "(", "filename", ",", "'wb'", ")", "as", "fp", ":", "\n", "        ", "fp", ".", "write", "(", "bytes", "(", "header", ",", "encoding", "=", "'utf-8'", ")", ")", "\n", "fp", ".", "write", "(", "vertex", ".", "tobytes", "(", ")", ")", "\n", "fp", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.dataset_generator.HyperPlane.__init__": [[6, 9], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "bias", ")", ":", "\n", "        ", "self", ".", "params", "=", "params", "\n", "self", ".", "bias", "=", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.dataset_generator.HyperPlane.check_point": [[10, 12], ["numpy.sign", "numpy.dot"], "methods", ["None"], ["", "def", "check_point", "(", "self", ",", "point", ")", ":", "\n", "        ", "return", "np", ".", "sign", "(", "np", ".", "dot", "(", "point", ",", "self", ".", "params", ")", "+", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.dataset_generator.HyperPlane.get_plane_from_3_points": [[13, 17], ["numpy.cross", "dataset_generator.HyperPlane", "numpy.dot"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_plane_from_3_points", "(", "points", ")", ":", "\n", "        ", "cp", "=", "np", ".", "cross", "(", "points", "[", "1", "]", "-", "points", "[", "0", "]", ",", "points", "[", "2", "]", "-", "points", "[", "0", "]", ")", "\n", "return", "HyperPlane", "(", "cp", ",", "np", ".", "dot", "(", "cp", ",", "points", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.dataset_generator.HyperPlane.get_random_plane": [[18, 21], ["dataset_generator.HyperPlane.get_plane_from_3_points", "numpy.random.rand"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.dataset_generator.HyperPlane.get_plane_from_3_points"], ["", "@", "staticmethod", "\n", "def", "get_random_plane", "(", ")", ":", "\n", "        ", "return", "HyperPlane", ".", "get_plane_from_3_points", "(", "np", ".", "random", ".", "rand", "(", "3", ",", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.dataset_generator.HyperPlane.__str__": [[22, 24], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"Plane A={}, B={}, C={}, D={}\"", ".", "format", "(", "*", "self", ".", "params", ",", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.dataset_generator.SlicedDatasetGenerator.generate_item": [[28, 40], ["HyperPlane.get_random_plane().check_point", "len", "len", "dataset_generator.HyperPlane.get_random_plane"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.dataset_generator.HyperPlane.check_point", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.dataset_generator.HyperPlane.get_random_plane"], ["    ", "@", "staticmethod", "\n", "def", "generate_item", "(", "points", ",", "target_partition_points", "=", "1024", ")", ":", "\n", "\n", "        ", "while", "True", ":", "\n", "            ", "under", "=", "HyperPlane", ".", "get_random_plane", "(", ")", ".", "check_point", "(", "points", ")", ">", "0", "\n", "points_under_plane", "=", "points", "[", "under", "]", "\n", "points_above_plane", "=", "points", "[", "~", "under", "]", "\n", "\n", "if", "target_partition_points", "==", "len", "(", "points_under_plane", ")", ":", "\n", "                ", "return", "points_under_plane", ",", "points_above_plane", "\n", "", "if", "target_partition_points", "==", "len", "(", "points_above_plane", ")", ":", "\n", "                ", "return", "points_above_plane", ",", "points_under_plane", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.pytorch_structural_losses.match_cost.MatchCostFunction.forward": [[7, 28], ["ctx.save_for_backward", "utils.pytorch_structural_losses.StructuralLossesBackend.ApproxMatch", "utils.pytorch_structural_losses.StructuralLossesBackend.MatchCost"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "# bias is an optional argument", "\n", "def", "forward", "(", "ctx", ",", "seta", ",", "setb", ")", ":", "\n", "#print(\"Match Cost Forward\")", "\n", "        ", "ctx", ".", "save_for_backward", "(", "seta", ",", "setb", ")", "\n", "'''\n        input:\n\t        set1 : batch_size * #dataset_points * 3\n\t        set2 : batch_size * #query_points * 3\n        returns:\n\t        match : batch_size * #query_points * #dataset_points\n        '''", "\n", "match", ",", "temp", "=", "ApproxMatch", "(", "seta", ",", "setb", ")", "\n", "ctx", ".", "match", "=", "match", "\n", "cost", "=", "MatchCost", "(", "seta", ",", "setb", ",", "match", ")", "\n", "# If you want to return matching matrix too, swap the return lines", "\n", "# Remember to use method `match_cost()` directly, because method", "\n", "# `utils.metrics.earth_mover_distance()` will try to divide the tuple by", "\n", "# the batch size. We omit the if statement for performance purposes.", "\n", "# return match, temp, cost", "\n", "return", "cost", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.pytorch_structural_losses.match_cost.MatchCostFunction.backward": [[34, 47], ["utils.pytorch_structural_losses.StructuralLossesBackend.MatchCostGrad", "grad_output.unsqueeze().unsqueeze", "grad_output.unsqueeze"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "#print(\"Match Cost Backward\")", "\n", "# This is a pattern that is very convenient - at the top of backward", "\n", "# unpack saved_tensors and initialize all gradients w.r.t. inputs to", "\n", "# None. Thanks to the fact that additional trailing Nones are", "\n", "# ignored, the return statement is simple even when the function has", "\n", "# optional inputs.", "\n", "        ", "seta", ",", "setb", "=", "ctx", ".", "saved_tensors", "\n", "#grad_input = grad_weight = grad_bias = None", "\n", "grada", ",", "gradb", "=", "MatchCostGrad", "(", "seta", ",", "setb", ",", "ctx", ".", "match", ")", "\n", "grad_output_expand", "=", "grad_output", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "return", "grada", "*", "grad_output_expand", ",", "gradb", "*", "grad_output_expand", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.pytorch_structural_losses.nn_distance.NNDistanceFunction.forward": [[8, 25], ["ctx.save_for_backward", "utils.pytorch_structural_losses.StructuralLossesBackend.NNDistance"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "# bias is an optional argument", "\n", "def", "forward", "(", "ctx", ",", "seta", ",", "setb", ")", ":", "\n", "#print(\"Match Cost Forward\")", "\n", "        ", "ctx", ".", "save_for_backward", "(", "seta", ",", "setb", ")", "\n", "'''\n        input:\n\t        set1 : batch_size * #dataset_points * 3\n\t        set2 : batch_size * #query_points * 3\n        returns:\n\t        dist1, idx1, dist2, idx2\n        '''", "\n", "dist1", ",", "idx1", ",", "dist2", ",", "idx2", "=", "NNDistance", "(", "seta", ",", "setb", ")", "\n", "# print(dist1, idx1, dist2, idx2, flush=True)", "\n", "ctx", ".", "idx1", "=", "idx1", "\n", "ctx", ".", "idx2", "=", "idx2", "\n", "return", "dist1", ",", "dist2", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.pytorch_structural_losses.nn_distance.NNDistanceFunction.backward": [[27, 40], ["utils.pytorch_structural_losses.StructuralLossesBackend.NNDistanceGrad"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_dist1", ",", "grad_dist2", ")", ":", "\n", "#print(\"Match Cost Backward\")", "\n", "# This is a pattern that is very convenient - at the top of backward", "\n", "# unpack saved_tensors and initialize all gradients w.r.t. inputs to", "\n", "# None. Thanks to the fact that additional trailing Nones are", "\n", "# ignored, the return statement is simple even when the function has", "\n", "# optional inputs.", "\n", "        ", "seta", ",", "setb", "=", "ctx", ".", "saved_tensors", "\n", "idx1", "=", "ctx", ".", "idx1", "\n", "idx2", "=", "ctx", ".", "idx2", "\n", "grada", ",", "gradb", "=", "NNDistanceGrad", "(", "seta", ",", "setb", ",", "idx1", ",", "idx2", ",", "grad_dist1", ",", "grad_dist2", ")", "\n", "return", "grada", ",", "gradb", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.evaluation.total_mutual_diff.process_one_tmd": [[14, 25], ["range", "len", "range", "len", "utils.evaluation.chamfer.compute_trimesh_chamfer", "len"], "function", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.evaluation.chamfer.compute_trimesh_chamfer"], ["@", "ray", ".", "remote", "\n", "def", "process_one_tmd", "(", "gen_pcs", ")", ":", "\n", "    ", "sum_dist", "=", "0", "\n", "for", "j", "in", "range", "(", "len", "(", "gen_pcs", ")", ")", ":", "\n", "        ", "for", "k", "in", "range", "(", "j", "+", "1", ",", "len", "(", "gen_pcs", ")", ",", "1", ")", ":", "\n", "            ", "pc1", "=", "gen_pcs", "[", "j", "]", "\n", "pc2", "=", "gen_pcs", "[", "k", "]", "\n", "chamfer_dist", "=", "compute_trimesh_chamfer", "(", "pc1", ",", "pc2", ")", "\n", "sum_dist", "+=", "chamfer_dist", "\n", "", "", "mean_dist", "=", "sum_dist", "*", "2", "/", "(", "len", "(", "gen_pcs", ")", "-", "1", ")", "\n", "return", "mean_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.evaluation.total_mutual_diff.process": [[27, 62], ["glob.glob", "sorted", "range", "numpy.array", "tqdm.tqdm", "numpy.mean", "os.path.join", "int", "range", "np.array.append", "range", "range", "results.append", "tqdm.tqdm.set_postfix", "pcs.append", "len", "len", "range", "len", "len", "utils.evaluation.chamfer.compute_trimesh_chamfer", "len", "numpy.mean", "numpy.load"], "function", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.evaluation.chamfer.compute_trimesh_chamfer"], ["", "def", "process", "(", "shape_dir", ")", ":", "\n", "    ", "pc_paths", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "shape_dir", ",", "\"*reconstruction.npy\"", ")", ")", "\n", "\n", "pc_paths", "=", "sorted", "(", "pc_paths", ")", "\n", "gen_pcs", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "int", "(", "len", "(", "pc_paths", ")", "/", "10", ")", ")", ":", "\n", "        ", "pcs", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "10", ")", ":", "\n", "            ", "pcs", ".", "append", "(", "np", ".", "load", "(", "pc_paths", "[", "i", "*", "10", "+", "j", "]", ")", ".", "T", ")", "\n", "", "gen_pcs", ".", "append", "(", "pcs", ")", "\n", "", "gen_pcs", "=", "np", ".", "array", "(", "gen_pcs", ")", "\n", "\n", "# parallel version", "\n", "# ray.init(num_cpus=os.cpu_count())", "\n", "# ray_tmd_tasks = [process_one_tmd.remote(gen_pcs[i]) for i in range(len(gen_pcs))]", "\n", "# tmd = ray.get(ray_tmd_tasks)", "\n", "# ray.shutdown()", "\n", "# return np.mean(tmd)", "\n", "\n", "results", "=", "[", "]", "\n", "pbar", "=", "tqdm", "(", "range", "(", "len", "(", "gen_pcs", ")", ")", ")", "\n", "for", "i", "in", "pbar", ":", "\n", "        ", "sum_dist", "=", "0", "\n", "for", "j", "in", "range", "(", "len", "(", "gen_pcs", "[", "i", "]", ")", ")", ":", "\n", "            ", "for", "k", "in", "range", "(", "j", "+", "1", ",", "len", "(", "gen_pcs", "[", "i", "]", ")", ",", "1", ")", ":", "\n", "                ", "pc1", "=", "gen_pcs", "[", "i", "]", "[", "j", "]", "\n", "pc2", "=", "gen_pcs", "[", "i", "]", "[", "k", "]", "\n", "chamfer_dist", "=", "compute_trimesh_chamfer", "(", "pc1", ",", "pc2", ")", "\n", "sum_dist", "+=", "chamfer_dist", "\n", "", "", "mean_dist", "=", "sum_dist", "*", "2", "/", "(", "len", "(", "gen_pcs", "[", "i", "]", ")", "-", "1", ")", "\n", "results", ".", "append", "(", "mean_dist", ")", "\n", "pbar", ".", "set_postfix", "(", "{", "\"mmd\"", ":", "np", ".", "mean", "(", "results", ")", "}", ")", "\n", "\n", "", "return", "np", ".", "mean", "(", "results", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.evaluation.completeness.directed_hausdorff": [[14, 39], ["point_cloud1.unsqueeze", "pc1.repeat.repeat", "point_cloud2.unsqueeze", "pc2.repeat.repeat", "torch.sqrt", "torch.min", "torch.max", "torch.sum", "torch.mean"], "function", ["None"], ["def", "directed_hausdorff", "(", "point_cloud1", ":", "torch", ".", "Tensor", ",", "point_cloud2", ":", "torch", ".", "Tensor", ",", "reduce_mean", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n\n    :param point_cloud1: (B, 3, N)\n    :param point_cloud2: (B, 3, M)\n    :return: directed hausdorff distance, A -> B\n    \"\"\"", "\n", "n_pts1", "=", "point_cloud1", ".", "shape", "[", "2", "]", "\n", "n_pts2", "=", "point_cloud2", ".", "shape", "[", "2", "]", "\n", "\n", "pc1", "=", "point_cloud1", ".", "unsqueeze", "(", "3", ")", "\n", "pc1", "=", "pc1", ".", "repeat", "(", "(", "1", ",", "1", ",", "1", ",", "n_pts2", ")", ")", "# (B, 3, N, M)", "\n", "pc2", "=", "point_cloud2", ".", "unsqueeze", "(", "2", ")", "\n", "pc2", "=", "pc2", ".", "repeat", "(", "(", "1", ",", "1", ",", "n_pts1", ",", "1", ")", ")", "# (B, 3, N, M)", "\n", "\n", "l2_dist", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "(", "pc1", "-", "pc2", ")", "**", "2", ",", "dim", "=", "1", ")", ")", "# (B, N, M)", "\n", "\n", "shortest_dist", ",", "_", "=", "torch", ".", "min", "(", "l2_dist", ",", "dim", "=", "2", ")", "\n", "\n", "hausdorff_dist", ",", "_", "=", "torch", ".", "max", "(", "shortest_dist", ",", "dim", "=", "1", ")", "# (B, )", "\n", "\n", "if", "reduce_mean", ":", "\n", "        ", "hausdorff_dist", "=", "torch", ".", "mean", "(", "hausdorff_dist", ")", "\n", "\n", "", "return", "hausdorff_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.evaluation.completeness.nn_distance": [[41, 45], ["scipy.spatial.cKDTree", "scipy.spatial.cKDTree.query"], "function", ["None"], ["", "def", "nn_distance", "(", "query_points", ",", "ref_points", ")", ":", "\n", "    ", "ref_points_kd_tree", "=", "KDTree", "(", "ref_points", ")", "\n", "one_distances", ",", "one_vertex_ids", "=", "ref_points_kd_tree", ".", "query", "(", "query_points", ")", "\n", "return", "one_distances", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.evaluation.completeness.completeness": [[47, 51], ["completeness.nn_distance", "numpy.sum", "len"], "function", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.evaluation.completeness.nn_distance"], ["", "def", "completeness", "(", "query_points", ",", "ref_points", ",", "thres", "=", "0.03", ")", ":", "\n", "    ", "a2b_nn_distance", "=", "nn_distance", "(", "query_points", ",", "ref_points", ")", "\n", "percentage", "=", "np", ".", "sum", "(", "a2b_nn_distance", "<", "thres", ")", "/", "len", "(", "a2b_nn_distance", ")", "\n", "return", "percentage", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.evaluation.completeness.process_one_uhd": [[53, 61], ["warnings.catch_warnings", "warnings.simplefilter", "torch.stack", "torch.tensor().unsqueeze().repeat", "directed_hausdorff().item", "torch.tensor", "torch.tensor().unsqueeze", "torch.stack.size", "completeness.directed_hausdorff", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.evaluation.completeness.directed_hausdorff"], ["", "@", "ray", ".", "remote", "\n", "def", "process_one_uhd", "(", "existing", ",", "gen_pcs", ")", ":", "\n", "    ", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "        ", "warnings", ".", "simplefilter", "(", "'ignore'", ")", "\n", "gen_pcs_tensors", "=", "[", "torch", ".", "tensor", "(", "pc", ")", "for", "pc", "in", "gen_pcs", "]", "\n", "gen_pcs_tensors", "=", "torch", ".", "stack", "(", "gen_pcs_tensors", ",", "dim", "=", "0", ")", "\n", "existing_pc_tensor", "=", "torch", ".", "tensor", "(", "existing", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "(", "gen_pcs_tensors", ".", "size", "(", "0", ")", ",", "1", ",", "1", ")", ")", "\n", "return", "directed_hausdorff", "(", "existing_pc_tensor", ",", "gen_pcs_tensors", ",", "reduce_mean", "=", "True", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.evaluation.completeness.process": [[63, 90], ["glob.glob", "sorted", "glob.glob", "sorted", "range", "numpy.array", "range", "numpy.array", "ray.init", "numpy.mean", "ray.shutdown", "os.path.join", "os.path.join", "int", "range", "np.array.append", "len", "np.array.append", "process_one_uhd.remote", "ray.get", "pcs.append", "numpy.load", "range", "len", "numpy.load", "int", "len"], "function", ["None"], ["", "", "def", "process", "(", "shape_dir", ")", ":", "\n", "# load generated shape", "\n", "    ", "pc_paths", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "shape_dir", ",", "\"*reconstruction.npy\"", ")", ")", "\n", "pc_paths", "=", "sorted", "(", "pc_paths", ")", "\n", "\n", "# load existing input", "\n", "existing_paths", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "shape_dir", ",", "\"*existing.npy\"", ")", ")", "\n", "existing_paths", "=", "sorted", "(", "existing_paths", ")", "\n", "\n", "gen_pcs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "int", "(", "len", "(", "pc_paths", ")", "/", "10", ")", ")", ":", "\n", "        ", "pcs", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "10", ")", ":", "\n", "            ", "pcs", ".", "append", "(", "np", ".", "load", "(", "pc_paths", "[", "i", "*", "10", "+", "j", "]", ")", ")", "\n", "", "gen_pcs", ".", "append", "(", "pcs", ")", "\n", "", "gen_pcs", "=", "np", ".", "array", "(", "gen_pcs", ")", "\n", "\n", "existing_pcs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "existing_paths", ")", ")", ":", "\n", "        ", "existing_pcs", ".", "append", "(", "np", ".", "load", "(", "existing_paths", "[", "i", "]", ")", ")", "\n", "", "existing_pcs", "=", "np", ".", "array", "(", "existing_pcs", ")", "\n", "\n", "ray", ".", "init", "(", "num_cpus", "=", "4", ")", "\n", "ray_uhd_tasks", "=", "[", "process_one_uhd", ".", "remote", "(", "existing_pcs", "[", "i", "]", ",", "gen_pcs", "[", "i", "]", ")", "for", "i", "in", "range", "(", "int", "(", "len", "(", "pc_paths", ")", "/", "10", ")", ")", "]", "\n", "uhd", "=", "np", ".", "mean", "(", "ray", ".", "get", "(", "ray_uhd_tasks", ")", ")", "\n", "ray", ".", "shutdown", "(", ")", "\n", "return", "uhd", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.evaluation.mmd.iterate_in_chunks": [[15, 21], ["range", "len"], "function", ["None"], ["def", "iterate_in_chunks", "(", "l", ",", "n", ")", ":", "\n", "    ", "'''Yield successive 'n'-sized chunks from iterable 'l'.\n    Note: last chunk will be smaller than l if n doesn't divide l perfectly.\n    '''", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "l", ")", ",", "n", ")", ":", "\n", "        ", "yield", "l", "[", "i", ":", "i", "+", "n", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.evaluation.mmd.minimum_mathing_distance": [[23, 48], ["tqdm.tqdm", "numpy.mean", "ValueError", "range", "torch.from_numpy().unsqueeze().to().contiguous", "mmd.iterate_in_chunks", "matched_dists.append", "tqdm.tqdm.set_postfix", "torch.from_numpy().to().contiguous", "utils.pytorch_structural_losses.nn_distance.nn_distance", "torch.min().item", "best_in_all_batches.append", "numpy.min", "torch.from_numpy().unsqueeze().to", "ref_to_s.mean", "s_to_ref.mean", "numpy.mean", "torch.from_numpy().to", "torch.min", "torch.from_numpy().unsqueeze", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.evaluation.mmd.iterate_in_chunks", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.evaluation.completeness.nn_distance"], ["", "", "def", "minimum_mathing_distance", "(", "sample_pcs", ",", "ref_pcs", ",", "batch_size", ",", "device", "=", "None", ")", ":", "\n", "\n", "    ", "n_ref", ",", "n_pc_points", ",", "pc_dim", "=", "ref_pcs", ".", "shape", "\n", "_", ",", "n_pc_points_s", ",", "pc_dim_s", "=", "sample_pcs", ".", "shape", "\n", "\n", "if", "n_pc_points", "!=", "n_pc_points_s", "or", "pc_dim", "!=", "pc_dim_s", ":", "\n", "        ", "raise", "ValueError", "(", "'Incompatible size of point-clouds.'", ")", "\n", "\n", "", "matched_dists", "=", "[", "]", "\n", "pbar", "=", "tqdm", "(", "range", "(", "n_ref", ")", ")", "\n", "for", "i", "in", "pbar", ":", "\n", "        ", "best_in_all_batches", "=", "[", "]", "\n", "ref", "=", "torch", ".", "from_numpy", "(", "ref_pcs", "[", "i", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", ".", "contiguous", "(", ")", "\n", "for", "sample_chunk", "in", "iterate_in_chunks", "(", "sample_pcs", ",", "batch_size", ")", ":", "\n", "            ", "chunk", "=", "torch", ".", "from_numpy", "(", "sample_chunk", ")", ".", "to", "(", "device", ")", ".", "contiguous", "(", ")", "\n", "ref_to_s", ",", "s_to_ref", "=", "nn_distance", "(", "ref", ",", "chunk", ")", "\n", "all_dist_in_batch", "=", "ref_to_s", ".", "mean", "(", "dim", "=", "1", ")", "+", "s_to_ref", ".", "mean", "(", "dim", "=", "1", ")", "\n", "best_in_batch", "=", "torch", ".", "min", "(", "all_dist_in_batch", ")", ".", "item", "(", ")", "\n", "best_in_all_batches", ".", "append", "(", "best_in_batch", ")", "\n", "\n", "", "matched_dists", ".", "append", "(", "np", ".", "min", "(", "best_in_all_batches", ")", ")", "\n", "pbar", ".", "set_postfix", "(", "{", "\"mmd\"", ":", "np", ".", "mean", "(", "matched_dists", ")", "}", ")", "\n", "\n", "", "mmd", "=", "np", ".", "mean", "(", "matched_dists", ")", "\n", "return", "mmd", ",", "matched_dists", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.evaluation.mmd.process": [[50, 70], ["random.seed", "numpy.stack", "glob.glob", "sorted", "numpy.stack", "mmd.minimum_mathing_distance", "np.stack.append", "os.path.join", "np.stack.append", "numpy.load"], "function", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.evaluation.mmd.minimum_mathing_distance"], ["", "def", "process", "(", "shape_dir", ",", "dataset", ",", "device", ",", "batch_size", "=", "64", ")", ":", "\n", "    ", "random", ".", "seed", "(", "1234", ")", "\n", "ref_pcs", "=", "[", "]", "\n", "for", "data", "in", "dataset", ":", "\n", "        ", "_", ",", "_", ",", "gt", ",", "_", "=", "data", "\n", "ref_pcs", ".", "append", "(", "gt", ")", "\n", "", "ref_pcs", "=", "np", ".", "stack", "(", "ref_pcs", ",", "axis", "=", "0", ")", "\n", "\n", "pc_paths", "=", "glob", ".", "glob", "(", "join", "(", "shape_dir", ",", "\"*reconstruction.npy\"", ")", ")", "\n", "pc_paths", "=", "sorted", "(", "pc_paths", ")", "\n", "\n", "sample_pcs", "=", "[", "]", "\n", "for", "path", "in", "pc_paths", ":", "\n", "        ", "sample_pcs", ".", "append", "(", "np", ".", "load", "(", "path", ")", ".", "T", ")", "\n", "", "sample_pcs", "=", "np", ".", "stack", "(", "sample_pcs", ",", "axis", "=", "0", ")", "\n", "\n", "mmd", ",", "matched_dists", "=", "minimum_mathing_distance", "(", "sample_pcs", ",", "ref_pcs", ",", "batch_size", ",", "device", ")", "\n", "del", "sample_pcs", "\n", "del", "ref_pcs", "\n", "return", "mmd", "\n", "", ""]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.evaluation.chamfer.compute_trimesh_chamfer": [[8, 32], ["scipy.spatial.cKDTree", "scipy.spatial.cKDTree.query", "numpy.mean", "scipy.spatial.cKDTree", "scipy.spatial.cKDTree.query", "numpy.mean", "numpy.square", "numpy.square"], "function", ["None"], ["def", "compute_trimesh_chamfer", "(", "gt_points", ",", "gen_points", ",", "offset", "=", "0", ",", "scale", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    This function computes a symmetric chamfer distance, i.e. the sum of both chamfers.\n    gt_points: numpy array. trimesh.points.PointCloud of just poins, sampled from the surface (see\n               compute_metrics.ply for more documentation)\n    gen_mesh: numpy array. trimesh.base.Trimesh of output mesh from whichever autoencoding reconstruction\n              method (see compute_metrics.py for more)\n    \"\"\"", "\n", "\n", "# gen_points_sampled = trimesh.sample.sample_surface(gen_mesh, num_mesh_samples)[0]", "\n", "\n", "gen_points", "=", "gen_points", "/", "scale", "-", "offset", "\n", "\n", "# one direction", "\n", "gen_points_kd_tree", "=", "KDTree", "(", "gen_points", ")", "\n", "one_distances", ",", "one_vertex_ids", "=", "gen_points_kd_tree", ".", "query", "(", "gt_points", ")", "\n", "gt_to_gen_chamfer", "=", "np", ".", "mean", "(", "np", ".", "square", "(", "one_distances", ")", ")", "\n", "\n", "# other direction", "\n", "gt_points_kd_tree", "=", "KDTree", "(", "gt_points", ")", "\n", "two_distances", ",", "two_vertex_ids", "=", "gt_points_kd_tree", ".", "query", "(", "gen_points", ")", "\n", "gen_to_gt_chamfer", "=", "np", ".", "mean", "(", "np", ".", "square", "(", "two_distances", ")", ")", "\n", "\n", "return", "gt_to_gen_chamfer", "+", "gen_to_gt_chamfer", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.evaluation.chamfer.scale_to_unit_sphere": [[34, 45], ["numpy.max", "numpy.sqrt", "numpy.max", "numpy.min", "numpy.sum"], "function", ["None"], ["", "def", "scale_to_unit_sphere", "(", "points", ")", ":", "\n", "    ", "\"\"\"\n    scale point clouds into a unit sphere\n    :param points: (n, 3) numpy array\n    :return:\n    \"\"\"", "\n", "midpoints", "=", "(", "np", ".", "max", "(", "points", ",", "axis", "=", "0", ")", "+", "np", ".", "min", "(", "points", ",", "axis", "=", "0", ")", ")", "/", "2", "\n", "points", "=", "points", "-", "midpoints", "\n", "scale", "=", "np", ".", "max", "(", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "points", "**", "2", ",", "axis", "=", "1", ")", ")", ")", "\n", "points", "=", "points", "/", "scale", "\n", "return", "points", "\n", "", ""]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.shapenet_3depn.ShapeNet3DEPNDataset.__init__": [[73, 105], ["datasets.base_dataset.BaseDataset.__init__", "os.path.join", "os.path.join", "sorted", "random.Random", "os.listdir", "open", "csv.reader", "os.path.join", "os.path.join", "os.listdir", "os.path.join", "os.path.join", "os.path.exists", "os.path.exists", "shapenet_3depn.ShapeNet3DEPNDataset.shape_names.append", "shape_names.append"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.losses.champfer_loss.ChamferLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root_dir", "=", "'/home/datasets/completion'", ",", "split", "=", "'train'", ",", "classes", "=", "[", "]", ",", "num_samples", "=", "4", ")", ":", "\n", "        ", "super", "(", "ShapeNet3DEPNDataset", ",", "self", ")", ".", "__init__", "(", "root_dir", ",", "split", ",", "classes", ")", "\n", "\n", "if", "self", ".", "split", "==", "'test'", ":", "\n", "            ", "self", ".", "cat_pc_root", "=", "join", "(", "root_dir", ",", "'ShapeNetPointCloud'", ",", "classes", "[", "0", "]", ")", "\n", "self", ".", "cat_pc_raw_root", "=", "join", "(", "root_dir", ",", "'shapenet_dim32_sdf_pc'", ",", "classes", "[", "0", "]", ")", "\n", "shape_names", "=", "[", "]", "\n", "with", "open", "(", "join", "(", "self", ".", "root_dir", ",", "'shapenet-official-split.csv'", ")", ",", "'r'", ")", "as", "csv_file", ":", "\n", "                ", "csv_reader", "=", "csv", ".", "reader", "(", "csv_file", ",", "delimiter", "=", "','", ")", "\n", "line_cnt", "=", "0", "\n", "for", "row", "in", "csv_reader", ":", "\n", "                    ", "if", "line_cnt", "==", "0", "or", "(", "row", "[", "1", "]", "!=", "classes", "[", "0", "]", ")", ":", "\n", "                        ", "pass", "\n", "", "else", ":", "\n", "                        ", "if", "row", "[", "-", "1", "]", "==", "self", ".", "split", ":", "\n", "                            ", "shape_names", ".", "append", "(", "row", "[", "-", "2", "]", ")", "\n", "", "", "line_cnt", "+=", "1", "\n", "\n", "", "", "self", ".", "shape_names", "=", "[", "]", "\n", "for", "name", "in", "shape_names", ":", "\n", "                ", "ply_path", "=", "join", "(", "self", ".", "cat_pc_root", ",", "name", "+", "'.ply'", ")", "\n", "path", "=", "join", "(", "self", ".", "cat_pc_raw_root", ",", "\"{}__0__.ply\"", ".", "format", "(", "name", ")", ")", "\n", "if", "exists", "(", "ply_path", ")", "and", "exists", "(", "path", ")", ":", "\n", "                    ", "self", ".", "shape_names", ".", "append", "(", "name", ")", "\n", "\n", "", "", "self", ".", "raw_ply_names", "=", "sorted", "(", "os", ".", "listdir", "(", "self", ".", "cat_pc_raw_root", ")", ")", "\n", "\n", "self", ".", "rng", "=", "random", ".", "Random", "(", "1234", ")", "# from original publication", "\n", "", "else", ":", "\n", "            ", "self", ".", "shape_names", "=", "os", ".", "listdir", "(", "join", "(", "self", ".", "root_dir", ",", "'slices'", ",", "'gt'", ",", "classes", "[", "0", "]", ")", ")", "\n", "self", ".", "num_samples", "=", "num_samples", "\n", "self", ".", "cat", "=", "classes", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.shapenet_3depn.ShapeNet3DEPNDataset.__getitem__": [[106, 132], ["shapenet_3depn.ShapeNet3DEPNDataset.rng.randint", "os.path.join", "numpy.array", "shapenet_3depn.ShapeNet3DEPNDataset._rotate_point_cloud_by_axis_angle", "shapenet_3depn.sample_point_cloud_by_n", "torch.tensor", "os.path.join", "numpy.array", "shapenet_3depn.sample_point_cloud_by_n", "torch.tensor", "utils.plyfile.load_ply", "utils.plyfile.load_ply", "utils.plyfile.load_ply", "os.path.join", "os.path.join", "os.path.join", "trimesh.load", "trimesh.load", "str", "str"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.shapenet_3depn.ShapeNet3DEPNDataset._rotate_point_cloud_by_axis_angle", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.shapenet_3depn.sample_point_cloud_by_n", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.shapenet_3depn.sample_point_cloud_by_n", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.load_ply", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.load_ply", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.load_ply"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "split", "==", "'test'", ":", "\n", "            ", "raw_n", "=", "self", ".", "rng", ".", "randint", "(", "0", ",", "7", ")", "\n", "raw_pc_name", "=", "self", ".", "shape_names", "[", "index", "]", "+", "\"__{}__.ply\"", ".", "format", "(", "raw_n", ")", "\n", "raw_ply_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cat_pc_raw_root", ",", "raw_pc_name", ")", "\n", "raw_pc", "=", "np", ".", "array", "(", "trimesh", ".", "load", "(", "raw_ply_path", ")", ".", "vertices", ")", "\n", "raw_pc", "=", "self", ".", "_rotate_point_cloud_by_axis_angle", "(", "raw_pc", ")", "\n", "raw_pc", "=", "sample_point_cloud_by_n", "(", "raw_pc", ",", "1024", ")", "\n", "raw_pc", "=", "torch", ".", "tensor", "(", "raw_pc", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "# process existing complete shapes", "\n", "real_shape_name", "=", "self", ".", "shape_names", "[", "index", "]", "\n", "real_ply_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cat_pc_root", ",", "real_shape_name", "+", "'.ply'", ")", "\n", "real_pc", "=", "np", ".", "array", "(", "trimesh", ".", "load", "(", "real_ply_path", ")", ".", "vertices", ")", "\n", "real_pc", "=", "sample_point_cloud_by_n", "(", "real_pc", ",", "2048", ")", "\n", "real_pc", "=", "torch", ".", "tensor", "(", "real_pc", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "return", "raw_pc", ",", "0", ",", "real_pc", ",", "real_shape_name", "\n", "", "else", ":", "\n", "            ", "pc_filename", "=", "self", ".", "shape_names", "[", "index", "//", "self", ".", "num_samples", "]", "\n", "existing", "=", "load_ply", "(", "join", "(", "self", ".", "root_dir", ",", "'slices'", ",", "'existing'", ",", "self", ".", "cat", ",", "\n", "str", "(", "index", "%", "self", ".", "num_samples", ")", "+", "'~'", "+", "pc_filename", ")", ")", "\n", "missing", "=", "load_ply", "(", "join", "(", "self", ".", "root_dir", ",", "'slices'", ",", "'missing'", ",", "self", ".", "cat", ",", "\n", "str", "(", "index", "%", "self", ".", "num_samples", ")", "+", "'~'", "+", "pc_filename", ")", ")", "\n", "gt", "=", "load_ply", "(", "join", "(", "self", ".", "root_dir", ",", "'slices'", ",", "'gt'", ",", "self", ".", "cat", ",", "pc_filename", ")", ")", "\n", "return", "existing", ",", "missing", ",", "gt", ",", "pc_filename", "[", ":", "-", "4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.shapenet_3depn.ShapeNet3DEPNDataset.__len__": [[133, 138], ["len", "len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "split", "==", "'test'", ":", "\n", "            ", "return", "len", "(", "self", ".", "shape_names", ")", "\n", "", "else", ":", "\n", "            ", "return", "len", "(", "self", ".", "shape_names", ")", "*", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.shapenet_3depn.ShapeNet3DEPNDataset._rotate_point_cloud_by_axis_angle": [[139, 144], ["numpy.array", "numpy.dot"], "methods", ["None"], ["", "", "def", "_rotate_point_cloud_by_axis_angle", "(", "self", ",", "points", ")", ":", "\n", "        ", "rot_m", "=", "np", ".", "array", "(", "[", "[", "2.22044605e-16", ",", "0.00000000e+00", ",", "1.00000000e+00", "]", ",", "\n", "[", "0.00000000e+00", ",", "1.00000000e+00", ",", "0.00000000e+00", "]", ",", "\n", "[", "-", "1.00000000e+00", ",", "0.00000000e+00", ",", "2.22044605e-16", "]", "]", ")", "\n", "return", "np", ".", "dot", "(", "rot_m", ",", "points", ".", "T", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.shapenet_3depn.ShapeNet3DEPNDataset.get_validation_datasets": [[145, 153], ["shapenet_3depn.ShapeNet3DEPNDataset"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "get_validation_datasets", "(", "cls", ",", "root_dir", ",", "classes", "=", "[", "]", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "not", "classes", ":", "\n", "            ", "classes", "=", "[", "'02691156'", ",", "'03001627'", ",", "'04379243'", "]", "\n", "\n", "", "return", "{", "synth_id_to_category", "[", "category_id", "]", ":", "ShapeNet3DEPNDataset", "(", "root_dir", "=", "root_dir", ",", "split", "=", "'val'", ",", "\n", "classes", "=", "[", "category_id", "]", ")", "\n", "for", "category_id", "in", "classes", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.shapenet_3depn.ShapeNet3DEPNDataset.get_test_datasets": [[154, 159], ["shapenet_3depn.ShapeNet3DEPNDataset"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "get_test_datasets", "(", "cls", ",", "root_dir", ",", "classes", "=", "[", "]", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "{", "synth_id_to_category", "[", "category_id", "]", ":", "ShapeNet3DEPNDataset", "(", "root_dir", "=", "root_dir", ",", "split", "=", "'test'", ",", "\n", "classes", "=", "[", "category_id", "]", ")", "\n", "for", "category_id", "in", "classes", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.shapenet_3depn.downsample_point_cloud": [[18, 27], ["random.choices", "list", "range"], "function", ["None"], ["def", "downsample_point_cloud", "(", "points", ",", "n_pts", ")", ":", "\n", "    ", "\"\"\"downsample points by random choice\n\n    :param points: (n, 3)\n    :param n_pts: int\n    :return:\n    \"\"\"", "\n", "p_idx", "=", "random", ".", "choices", "(", "list", "(", "range", "(", "points", ".", "shape", "[", "0", "]", ")", ")", ",", "k", "=", "n_pts", ")", "\n", "return", "points", "[", "p_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.shapenet_3depn.upsample_point_cloud": [[29, 40], ["random.choices", "numpy.concatenate", "list", "range"], "function", ["None"], ["", "def", "upsample_point_cloud", "(", "points", ",", "n_pts", ")", ":", "\n", "    ", "\"\"\"upsample points by random choice\n\n    :param points: (n, 3)\n    :param n_pts: int, > n\n    :return:\n    \"\"\"", "\n", "p_idx", "=", "random", ".", "choices", "(", "list", "(", "range", "(", "points", ".", "shape", "[", "0", "]", ")", ")", ",", "k", "=", "n_pts", "-", "points", ".", "shape", "[", "0", "]", ")", "\n", "dup_points", "=", "points", "[", "p_idx", "]", "\n", "points", "=", "np", ".", "concatenate", "(", "[", "points", ",", "dup_points", "]", ",", "axis", "=", "0", ")", "\n", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.shapenet_3depn.sample_point_cloud_by_n": [[42, 50], ["shapenet_3depn.upsample_point_cloud", "shapenet_3depn.downsample_point_cloud"], "function", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.shapenet_3depn.upsample_point_cloud", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.shapenet_3depn.downsample_point_cloud"], ["", "def", "sample_point_cloud_by_n", "(", "points", ",", "n_pts", ")", ":", "\n", "    ", "\"\"\"resample point cloud to given number of points\"\"\"", "\n", "if", "n_pts", ">", "points", ".", "shape", "[", "0", "]", ":", "\n", "        ", "return", "upsample_point_cloud", "(", "points", ",", "n_pts", ")", "\n", "", "elif", "n_pts", "<", "points", ".", "shape", "[", "0", "]", ":", "\n", "        ", "return", "downsample_point_cloud", "(", "points", ",", "n_pts", ")", "\n", "", "else", ":", "\n", "        ", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.shapenet_3depn.collect_train_split_by_id": [[52, 69], ["open", "csv.reader", "split_info[].append", "split_info[].append", "split_info[].append"], "function", ["None"], ["", "", "def", "collect_train_split_by_id", "(", "path", ",", "cat_id", ")", ":", "\n", "    ", "split_info", "=", "{", "\"train\"", ":", "[", "]", ",", "'validation'", ":", "[", "]", ",", "'test'", ":", "[", "]", "}", "\n", "with", "open", "(", "path", ",", "'r'", ")", "as", "csv_file", ":", "\n", "        ", "csv_reader", "=", "csv", ".", "reader", "(", "csv_file", ",", "delimiter", "=", "','", ")", "\n", "line_cnt", "=", "0", "\n", "for", "row", "in", "csv_reader", ":", "\n", "            ", "if", "line_cnt", "==", "0", "or", "row", "[", "1", "]", "!=", "cat_id", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "if", "row", "[", "-", "1", "]", "==", "\"train\"", ":", "\n", "                    ", "split_info", "[", "\"train\"", "]", ".", "append", "(", "row", "[", "-", "2", "]", ")", "\n", "", "elif", "row", "[", "-", "1", "]", "==", "\"val\"", ":", "\n", "                    ", "split_info", "[", "\"validation\"", "]", ".", "append", "(", "row", "[", "-", "2", "]", ")", "\n", "", "else", ":", "\n", "                    ", "split_info", "[", "\"test\"", "]", ".", "append", "(", "row", "[", "-", "2", "]", ")", "\n", "", "", "line_cnt", "+=", "1", "\n", "", "", "return", "split_info", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.shapenet.ShapeNetDataset.__init__": [[14, 62], ["datasets.base_dataset.BaseDataset.__init__", "os.path.join", "utils.util.get_filenames_by_cat", "open", "pc_df[].reset_index", "datasets.utils.shapenet_category_mapping.synth_id_to_category.keys", "pandas.concat", "datasets.utils.shapenet_category_mapping.synth_id_to_category.keys", "pandas.concat", "pandas.concat", "line.strip", "line.strip", "[].reset_index", "[].reset_index", "[].reset_index", "pc_df[].reset_index.category.isin", "line.strip().split", "int", "line.strip", "int", "int", "int", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.losses.champfer_loss.ChamferLoss.__init__", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.util.get_filenames_by_cat"], ["    ", "def", "__init__", "(", "self", ",", "root_dir", "=", "'/home/datasets/shapenet'", ",", "split", "=", "'train'", ",", "classes", "=", "[", "]", ",", "\n", "is_random_rotated", "=", "False", ",", "num_samples", "=", "4", ",", "use_pcn_model_list", "=", "True", ",", "is_gen", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            root_dir (string): Directory with all the point clouds.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "root_dir", ",", "split", ",", "classes", ")", "\n", "\n", "self", ".", "is_random_rotated", "=", "is_random_rotated", "\n", "self", ".", "use_pcn_model_list", "=", "use_pcn_model_list", "\n", "self", ".", "is_gen", "=", "is_gen", "\n", "self", ".", "num_samples", "=", "num_samples", "\n", "\n", "if", "is_gen", ":", "\n", "            ", "self", ".", "num_samples", "=", "1", "\n", "\n", "", "if", "self", ".", "use_pcn_model_list", ":", "\n", "            ", "list_path", "=", "join", "(", "root_dir", ",", "self", ".", "split", "+", "'.list'", ")", "\n", "with", "open", "(", "list_path", ")", "as", "file", ":", "\n", "                ", "if", "classes", ":", "\n", "                    ", "self", ".", "point_clouds_names", "=", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "file", "if", "line", ".", "strip", "(", ")", ".", "split", "(", "'/'", ")", "[", "0", "]", "in", "classes", "]", "\n", "", "else", ":", "\n", "                    ", "self", ".", "point_clouds_names", "=", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "file", "]", "\n", "", "", "", "else", ":", "\n", "            ", "pc_df", "=", "get_filenames_by_cat", "(", "self", ".", "root_dir", ")", "\n", "if", "classes", ":", "\n", "                ", "if", "classes", "[", "0", "]", "not", "in", "synth_id_to_category", ".", "keys", "(", ")", ":", "\n", "                    ", "classes", "=", "[", "category_to_synth_id", "[", "c", "]", "for", "c", "in", "classes", "]", "\n", "", "pc_df", "=", "pc_df", "[", "pc_df", ".", "category", ".", "isin", "(", "classes", ")", "]", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "classes", "=", "synth_id_to_category", ".", "keys", "(", ")", "\n", "\n", "", "if", "self", ".", "split", "==", "'train'", ":", "\n", "# first 85%", "\n", "                ", "self", ".", "point_clouds_names", "=", "pd", ".", "concat", "(", "\n", "[", "pc_df", "[", "pc_df", "[", "'category'", "]", "==", "c", "]", "[", ":", "int", "(", "0.85", "*", "len", "(", "pc_df", "[", "pc_df", "[", "'category'", "]", "==", "c", "]", ")", ")", "]", "\n", ".", "reset_index", "(", "drop", "=", "True", ")", "for", "c", "in", "classes", "]", ")", "\n", "", "elif", "self", ".", "split", "==", "'val'", ":", "\n", "# missing 5%", "\n", "                ", "self", ".", "point_clouds_names", "=", "pd", ".", "concat", "(", "[", "pc_df", "[", "pc_df", "[", "'category'", "]", "==", "c", "]", "[", "\n", "int", "(", "0.85", "*", "len", "(", "pc_df", "[", "pc_df", "[", "'category'", "]", "==", "c", "]", ")", ")", ":", "int", "(", "\n", "0.9", "*", "len", "(", "pc_df", "[", "pc_df", "[", "'category'", "]", "==", "c", "]", ")", ")", "]", "\n", ".", "reset_index", "(", "drop", "=", "True", ")", "for", "c", "in", "classes", "]", ")", "\n", "", "else", ":", "\n", "# last 10%", "\n", "                ", "self", ".", "point_clouds_names", "=", "pd", ".", "concat", "(", "\n", "[", "pc_df", "[", "pc_df", "[", "'category'", "]", "==", "c", "]", "[", "int", "(", "0.9", "*", "len", "(", "pc_df", "[", "pc_df", "[", "'category'", "]", "==", "c", "]", ")", ")", ":", "]", "\n", ".", "reset_index", "(", "drop", "=", "True", ")", "for", "c", "in", "classes", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.shapenet.ShapeNetDataset.__len__": [[63, 65], ["len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "point_clouds_names", ")", "*", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.shapenet.ShapeNetDataset.__getitem__": [[66, 95], ["str", "shapenet.ShapeNetDataset.point_clouds_names[].split", "Rotation.from_euler().as_matrix().astype", "utils.util.resample_pcd", "utils.util.resample_pcd", "utils.plyfile.load_ply", "utils.plyfile.load_ply", "utils.plyfile.load_ply", "utils.plyfile.load_ply", "utils.plyfile.load_ply", "utils.plyfile.load_ply", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "Rotation.from_euler().as_matrix", "os.path.join", "os.path.join", "Rotation.from_euler", "numpy.random.randint"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.util.resample_pcd", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.util.resample_pcd", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.load_ply", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.load_ply", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.load_ply", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.load_ply", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.load_ply", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.load_ply"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "use_pcn_model_list", ":", "\n", "            ", "pc_category", ",", "pc_filename", "=", "self", ".", "point_clouds_names", "[", "idx", "//", "self", ".", "num_samples", "]", ".", "split", "(", "'/'", ")", "\n", "pc_filename", "+=", "'.ply'", "\n", "", "else", ":", "\n", "            ", "pc_category", ",", "pc_filename", "=", "self", ".", "point_clouds_names", ".", "iloc", "[", "idx", "//", "self", ".", "num_samples", "]", ".", "values", "\n", "\n", "", "if", "self", ".", "is_random_rotated", ":", "\n", "            ", "from", "scipy", ".", "spatial", ".", "transform", "import", "Rotation", "\n", "random_rotation_matrix", "=", "Rotation", ".", "from_euler", "(", "'z'", ",", "np", ".", "random", ".", "randint", "(", "360", ")", ",", "degrees", "=", "True", ")", ".", "as_matrix", "(", ")", ".", "astype", "(", "\n", "np", ".", "float32", ")", "\n", "\n", "", "scan_idx", "=", "str", "(", "idx", "%", "self", ".", "num_samples", ")", "\n", "\n", "if", "self", ".", "is_gen", "and", "self", ".", "split", "==", "'test'", ":", "\n", "            ", "existing", "=", "resample_pcd", "(", "load_ply", "(", "join", "(", "self", ".", "root_dir", ",", "'test_gen'", ",", "'right'", ",", "pc_category", ",", "pc_filename", ")", ")", ",", "1024", ")", "\n", "missing", "=", "resample_pcd", "(", "load_ply", "(", "join", "(", "self", ".", "root_dir", ",", "'test_gen'", ",", "'left'", ",", "pc_category", ",", "pc_filename", ")", ")", ",", "1024", ")", "\n", "gt", "=", "load_ply", "(", "join", "(", "self", ".", "root_dir", ",", "'test_gen'", ",", "'gt'", ",", "pc_category", ",", "pc_filename", ")", ")", "\n", "", "else", ":", "\n", "            ", "existing", "=", "load_ply", "(", "join", "(", "self", ".", "root_dir", ",", "'slices'", ",", "'existing'", ",", "pc_category", ",", "scan_idx", "+", "'~'", "+", "pc_filename", ")", ")", "\n", "missing", "=", "load_ply", "(", "join", "(", "self", ".", "root_dir", ",", "'slices'", ",", "'missing'", ",", "pc_category", ",", "scan_idx", "+", "'~'", "+", "pc_filename", ")", ")", "\n", "gt", "=", "load_ply", "(", "join", "(", "self", ".", "root_dir", ",", "pc_category", ",", "pc_filename", ")", ")", "\n", "\n", "", "if", "self", ".", "is_random_rotated", ":", "\n", "            ", "existing", "=", "existing", "@", "random_rotation_matrix", "\n", "missing", "=", "missing", "@", "random_rotation_matrix", "\n", "gt", "=", "gt", "@", "random_rotation_matrix", "\n", "\n", "", "return", "existing", ",", "missing", ",", "gt", ",", "synth_id_to_number", "[", "pc_category", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.shapenet.ShapeNetDataset._get_datasets_for_classes": [[96, 108], ["kwargs.get", "shapenet.ShapeNetDataset", "list", "datasets.utils.shapenet_category_mapping.synth_id_to_category.keys"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_get_datasets_for_classes", "(", "cls", ",", "root_dir", ",", "split", ",", "classes", "=", "[", "]", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "not", "classes", ":", "\n", "            ", "if", "kwargs", ".", "get", "(", "'use_pcn_model_list'", ")", ":", "\n", "                ", "classes", "=", "[", "'02691156'", ",", "'02933112'", ",", "'02958343'", ",", "'03001627'", ",", "'03636649'", ",", "'04256520'", ",", "'04379243'", ",", "\n", "'04530566'", "]", "\n", "", "else", ":", "\n", "                ", "classes", "=", "list", "(", "synth_id_to_category", ".", "keys", "(", ")", ")", "\n", "", "", "return", "{", "synth_id_to_category", "[", "category_id", "]", ":", "ShapeNetDataset", "(", "root_dir", "=", "root_dir", ",", "\n", "split", "=", "split", ",", "\n", "classes", "=", "[", "category_id", "]", ",", "**", "kwargs", ")", "\n", "for", "category_id", "in", "classes", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.shapenet.ShapeNetDataset.get_validation_datasets": [[109, 112], ["cls._get_datasets_for_classes"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.shapenet.ShapeNetDataset._get_datasets_for_classes"], ["", "@", "classmethod", "\n", "def", "get_validation_datasets", "(", "cls", ",", "root_dir", ",", "classes", "=", "[", "]", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "cls", ".", "_get_datasets_for_classes", "(", "root_dir", ",", "'val'", ",", "classes", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.shapenet.ShapeNetDataset.get_test_datasets": [[113, 116], ["cls._get_datasets_for_classes"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.shapenet.ShapeNetDataset._get_datasets_for_classes"], ["", "@", "classmethod", "\n", "def", "get_test_datasets", "(", "cls", ",", "root_dir", ",", "classes", "=", "[", "]", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "cls", ".", "_get_datasets_for_classes", "(", "root_dir", ",", "'test'", ",", "classes", ",", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.real_data.RealDataNPYDataset.__init__": [[11, 25], ["datasets.base_dataset.BaseDataset.__init__", "os.listdir", "f.startswith", "real_data.RealDataNPYDataset.boxes.append", "f.startswith", "real_data.RealDataNPYDataset.objs.append", "f.startswith", "real_data.RealDataNPYDataset.scenes.append"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.losses.champfer_loss.ChamferLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root_dir", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "root_dir", ")", "\n", "\n", "self", ".", "scenes", "=", "[", "]", "\n", "self", ".", "objs", "=", "[", "]", "\n", "self", ".", "boxes", "=", "[", "]", "\n", "\n", "for", "f", "in", "listdir", "(", "self", ".", "root_dir", ")", ":", "\n", "            ", "if", "f", ".", "startswith", "(", "'object_box'", ")", ":", "\n", "                ", "self", ".", "boxes", ".", "append", "(", "f", ")", "\n", "", "elif", "f", ".", "startswith", "(", "'object'", ")", ":", "\n", "                ", "self", ".", "objs", ".", "append", "(", "f", ")", "\n", "", "elif", "f", ".", "startswith", "(", "'scen'", ")", ":", "\n", "                ", "self", ".", "scenes", ".", "append", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.real_data.RealDataNPYDataset._get_scales": [[26, 34], ["numpy.min", "numpy.max", "numpy.max"], "methods", ["None"], ["", "", "", "def", "_get_scales", "(", "self", ",", "pcd", ")", ":", "\n", "        ", "axis_mins", "=", "np", ".", "min", "(", "pcd", ".", "T", ",", "axis", "=", "1", ")", "\n", "axis_maxs", "=", "np", ".", "max", "(", "pcd", ".", "T", ",", "axis", "=", "1", ")", "\n", "\n", "scale", "=", "np", ".", "max", "(", "axis_maxs", "-", "axis_mins", ")", "\n", "pcd_center", "=", "(", "axis_maxs", "+", "axis_mins", ")", "/", "2", "\n", "\n", "return", "pcd_center", ",", "scale", "/", "0.9", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.real_data.RealDataNPYDataset.__getitem__": [[35, 40], ["numpy.load().astype", "real_data.RealDataNPYDataset._get_scales", "utils.util.resample_pcd", "numpy.load", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.real_data.RealDataNPYDataset._get_scales", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.util.resample_pcd"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "pcd", "=", "np", ".", "load", "(", "join", "(", "self", ".", "root_dir", ",", "self", ".", "objs", "[", "idx", "]", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "pcd_center", ",", "scale", "=", "self", ".", "_get_scales", "(", "pcd", ")", "\n", "pcd", "=", "(", "pcd", "-", "pcd_center", ")", "/", "scale", "\n", "return", "resample_pcd", "(", "pcd", ",", "1024", ")", ",", "0", ",", "0", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.real_data.RealDataNPYDataset.get_full_object": [[41, 43], ["numpy.load().astype", "numpy.load", "os.path.join"], "methods", ["None"], ["", "def", "get_full_object", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "np", ".", "load", "(", "join", "(", "self", ".", "root_dir", ",", "self", ".", "objs", "[", "idx", "]", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.real_data.RealDataNPYDataset.get_scene": [[44, 49], ["numpy.load().astype", "ValueError", "numpy.load", "os.path.join"], "methods", ["None"], ["", "def", "get_scene", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "scenes", ":", "\n", "            ", "return", "np", ".", "load", "(", "join", "(", "self", ".", "root_dir", ",", "self", ".", "scenes", "[", "idx", "]", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Dataset does not include scenes\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.real_data.RealDataNPYDataset.get_obj_box": [[50, 55], ["numpy.load().astype", "ValueError", "numpy.load", "os.path.join"], "methods", ["None"], ["", "", "def", "get_obj_box", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "boxes", ":", "\n", "            ", "return", "np", ".", "load", "(", "join", "(", "self", ".", "root_dir", ",", "self", ".", "boxes", "[", "idx", "]", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Dataset does not include object boxes\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.real_data.RealDataNPYDataset.inverse_scale_to_scene": [[56, 62], ["numpy.load().astype", "numpy.load().astype", "real_data.RealDataNPYDataset._get_scales", "real_data.RealDataNPYDataset._get_scales", "numpy.concatenate", "numpy.load", "numpy.load", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.real_data.RealDataNPYDataset._get_scales", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.real_data.RealDataNPYDataset._get_scales"], ["", "", "def", "inverse_scale_to_scene", "(", "self", ",", "idx", ",", "scaled_pcd", ")", ":", "\n", "        ", "scene", "=", "np", ".", "load", "(", "join", "(", "self", ".", "root_dir", ",", "self", ".", "scenes", "[", "idx", "]", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "pcd", "=", "np", ".", "load", "(", "join", "(", "self", ".", "root_dir", ",", "self", ".", "objs", "[", "idx", "]", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "pcd_center", ",", "scale", "=", "self", ".", "_get_scales", "(", "pcd", ")", "\n", "scaled_pcd_center", ",", "scaled_pcd_scale", "=", "self", ".", "_get_scales", "(", "scaled_pcd", ")", "\n", "return", "np", ".", "concatenate", "(", "[", "scene", ",", "(", "scaled_pcd", "/", "scaled_pcd_scale", "*", "scale", ")", "+", "pcd_center", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.real_data.RealDataNPYDataset.inverse_scale": [[63, 68], ["numpy.load().astype", "real_data.RealDataNPYDataset._get_scales", "real_data.RealDataNPYDataset._get_scales", "numpy.load", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.real_data.RealDataNPYDataset._get_scales", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.real_data.RealDataNPYDataset._get_scales"], ["", "def", "inverse_scale", "(", "self", ",", "idx", ",", "scaled_pcd", ")", ":", "\n", "        ", "pcd", "=", "np", ".", "load", "(", "join", "(", "self", ".", "root_dir", ",", "self", ".", "objs", "[", "idx", "]", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "pcd_center", ",", "scale", "=", "self", ".", "_get_scales", "(", "pcd", ")", "\n", "scaled_pcd_center", ",", "scaled_pcd_scale", "=", "self", ".", "_get_scales", "(", "scaled_pcd", ")", "\n", "return", "(", "scaled_pcd", "/", "scaled_pcd_scale", "*", "scale", ")", "+", "pcd_center", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.real_data.RealDataNPYDataset.__len__": [[69, 71], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "objs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.real_data.RealDataNPYDataset.get_validation_datasets": [[72, 75], ["None"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "get_validation_datasets", "(", "cls", ",", "root_dir", ",", "classes", "=", "[", "]", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.base_dataset.BaseDataset.__init__": [[6, 9], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root_dir", ",", "split", "=", "'train'", ",", "classes", "=", "[", "]", ")", ":", "\n", "        ", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "split", "=", "split", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.base_dataset.BaseDataset.get_validation_datasets": [[10, 13], ["None"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "get_validation_datasets", "(", "cls", ",", "root_dir", ",", "classes", "=", "[", "]", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.base_dataset.BaseDataset.get_test_datasets": [[14, 17], ["None"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "get_test_datasets", "(", "cls", ",", "root_dir", ",", "classes", "=", "[", "]", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.__init__.get_datasets": [[6, 35], ["datasets.shapenet.ShapeNetDataset", "datasets.shapenet.ShapeNetDataset.get_validation_datasets", "datasets.shapenet.ShapeNetDataset.get_test_datasets", "datasets.shapenet_completion3d.ShapeNetCompletion3DDataset", "datasets.shapenet_completion3d.ShapeNetCompletion3DDataset.get_validation_datasets", "datasets.shapenet_completion3d.ShapeNetCompletion3DDataset.get_test_datasets", "datasets.shapenet_3depn.ShapeNet3DEPNDataset", "datasets.shapenet_3depn.ShapeNet3DEPNDataset.get_validation_datasets", "datasets.shapenet_3depn.ShapeNet3DEPNDataset.get_test_datasets", "ValueError"], "function", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.shapenet_completion3d.ShapeNetCompletion3DDataset.get_validation_datasets", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.shapenet_completion3d.ShapeNetCompletion3DDataset.get_test_datasets", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.shapenet_completion3d.ShapeNetCompletion3DDataset.get_validation_datasets", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.shapenet_completion3d.ShapeNetCompletion3DDataset.get_test_datasets", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.shapenet_completion3d.ShapeNetCompletion3DDataset.get_validation_datasets", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.shapenet_completion3d.ShapeNetCompletion3DDataset.get_test_datasets"], []], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.shapenet_completion3d.ShapeNetCompletion3DDataset.__init__": [[12, 31], ["datasets.base_dataset.BaseDataset.__init__", "len", "os.path.join", "os.path.join", "os.path.join", "open", "line.strip", "line.strip", "line.strip().split", "line.strip"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.losses.champfer_loss.ChamferLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root_dir", "=", "'/home/datasets/completion'", ",", "split", "=", "'train'", ",", "classes", "=", "[", "]", ",", "model_list", "=", "None", ")", ":", "\n", "        ", "super", "(", "ShapeNetCompletion3DDataset", ",", "self", ")", ".", "__init__", "(", "root_dir", ",", "split", ",", "classes", ")", "\n", "\n", "if", "self", ".", "split", "==", "'train'", ":", "\n", "            ", "self", ".", "list_path", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'train.list'", ")", "\n", "", "elif", "self", ".", "split", "==", "'val'", ":", "\n", "            ", "self", ".", "list_path", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'val.list'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "list_path", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'test.list'", ")", "\n", "\n", "", "if", "model_list", "is", "None", ":", "\n", "            ", "with", "open", "(", "self", ".", "list_path", ")", "as", "file", ":", "\n", "                ", "if", "classes", ":", "\n", "                    ", "self", ".", "model_list", "=", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "file", "if", "line", ".", "strip", "(", ")", ".", "split", "(", "'/'", ")", "[", "0", "]", "in", "classes", "]", "\n", "", "else", ":", "\n", "                    ", "self", ".", "model_list", "=", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "file", "]", "\n", "", "", "", "else", ":", "\n", "            ", "self", ".", "model_list", "=", "model_list", "\n", "", "self", ".", "len", "=", "len", "(", "self", ".", "model_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.shapenet_completion3d.ShapeNetCompletion3DDataset.__len__": [[32, 34], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "len", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.shapenet_completion3d.ShapeNetCompletion3DDataset._load_h5": [[35, 40], ["h5py.File", "numpy.array", "h5py.File.close", "numpy.array.astype"], "methods", ["None"], ["", "def", "_load_h5", "(", "self", ",", "path", ")", ":", "\n", "        ", "f", "=", "h5py", ".", "File", "(", "path", ",", "'r'", ")", "\n", "cloud_data", "=", "np", ".", "array", "(", "f", "[", "'data'", "]", ")", "\n", "f", ".", "close", "(", ")", "\n", "return", "cloud_data", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.shapenet_completion3d.ShapeNetCompletion3DDataset.__getitem__": [[41, 49], ["shapenet_completion3d.ShapeNetCompletion3DDataset._load_h5", "os.path.join", "shapenet_completion3d.ShapeNetCompletion3DDataset._load_h5", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.shapenet_completion3d.ShapeNetCompletion3DDataset._load_h5", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.shapenet_completion3d.ShapeNetCompletion3DDataset._load_h5"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "model_name", "=", "self", ".", "model_list", "[", "index", "]", "\n", "existing", "=", "self", ".", "_load_h5", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "self", ".", "split", ",", "'partial'", ",", "model_name", "+", "'.h5'", ")", ")", "\n", "if", "self", ".", "split", "!=", "'test'", ":", "\n", "            ", "gt", "=", "self", ".", "_load_h5", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "self", ".", "split", ",", "'gt'", ",", "model_name", "+", "'.h5'", ")", ")", "\n", "", "else", ":", "\n", "            ", "gt", "=", "existing", "\n", "", "return", "existing", ",", "0", ",", "gt", ",", "model_name", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.shapenet_completion3d.ShapeNetCompletion3DDataset.get_validation_datasets": [[50, 67], ["os.path.join", "dict.fromkeys", "dict.fromkeys.keys", "list", "open", "shapenet_completion3d.ShapeNetCompletion3DDataset", "model_lists[].append", "dict.fromkeys.items", "line.strip", "line.strip().split", "line.strip"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "get_validation_datasets", "(", "cls", ",", "root_dir", ",", "classes", "=", "[", "]", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "not", "classes", ":", "\n", "            ", "classes", "=", "[", "'02691156'", ",", "'02933112'", ",", "'02958343'", ",", "'03001627'", ",", "'03636649'", ",", "'04256520'", ",", "'04379243'", ",", "'04530566'", "]", "\n", "\n", "", "list_path", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'val.list'", ")", "\n", "\n", "model_lists", "=", "dict", ".", "fromkeys", "(", "classes", ")", "\n", "for", "k", "in", "model_lists", ".", "keys", "(", ")", ":", "\n", "            ", "model_lists", "[", "k", "]", "=", "list", "(", ")", "\n", "\n", "", "with", "open", "(", "list_path", ")", "as", "file", ":", "\n", "            ", "for", "line", "in", "file", ":", "\n", "                ", "model_lists", "[", "line", ".", "strip", "(", ")", ".", "split", "(", "'/'", ")", "[", "0", "]", "]", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "\n", "", "", "return", "{", "synth_id_to_category", "[", "category_id", "]", ":", "ShapeNetCompletion3DDataset", "(", "root_dir", "=", "root_dir", ",", "split", "=", "'val'", ",", "\n", "model_list", "=", "model_list", ")", "\n", "for", "category_id", ",", "model_list", "in", "model_lists", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.shapenet_completion3d.ShapeNetCompletion3DDataset.get_test_datasets": [[68, 71], ["shapenet_completion3d.ShapeNetCompletion3DDataset"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "get_test_datasets", "(", "cls", ",", "root_dir", ",", "classes", "=", "[", "]", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "{", "'all'", ":", "ShapeNetCompletion3DDataset", "(", "root_dir", "=", "root_dir", ",", "split", "=", "'test'", ")", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.model.encoder.Encoder.__init__": [[6, 37], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv1d", "torch.Conv1d", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.losses.champfer_loss.ChamferLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "is_vae", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "output_size", "=", "config", "[", "'output_size'", "]", "\n", "self", ".", "use_bias", "=", "config", "[", "'use_bias'", "]", "\n", "self", ".", "relu_slope", "=", "config", "[", "'relu_slope'", "]", "\n", "self", ".", "is_vae", "=", "is_vae", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "1", ",", "bias", "=", "self", ".", "use_bias", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv1d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "1", ",", "bias", "=", "self", ".", "use_bias", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv1d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "1", ",", "bias", "=", "self", ".", "use_bias", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv1d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "1", ",", "bias", "=", "self", ".", "use_bias", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv1d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "1", ",", "bias", "=", "self", ".", "use_bias", ")", ",", "\n", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "512", ",", "512", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "self", ".", "mu_layer", "=", "nn", ".", "Linear", "(", "512", ",", "self", ".", "output_size", ",", "bias", "=", "True", ")", "\n", "self", ".", "std_layer", "=", "nn", ".", "Linear", "(", "512", ",", "self", ".", "output_size", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.model.encoder.Encoder.reparameterize": [[38, 42], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like.mul().add_", "torch.randn_like.mul().add_", "torch.randn_like.mul", "torch.randn_like.mul"], "methods", ["None"], ["", "def", "reparameterize", "(", "self", ",", "mu", ",", "logvar", ")", ":", "\n", "        ", "std", "=", "torch", ".", "exp", "(", "logvar", ")", "\n", "eps", "=", "torch", ".", "randn_like", "(", "std", ")", "\n", "return", "eps", ".", "mul", "(", "std", ")", ".", "add_", "(", "mu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.model.encoder.Encoder.forward": [[43, 54], ["encoder.Encoder.conv", "encoder.Encoder.fc", "encoder.Encoder.mu_layer", "encoder.Encoder.max", "encoder.Encoder.std_layer", "encoder.Encoder.reparameterize", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.model.encoder.Encoder.reparameterize"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "output", "=", "self", ".", "conv", "(", "x", ")", "\n", "output2", "=", "output", ".", "max", "(", "dim", "=", "2", ")", "[", "0", "]", "\n", "logit", "=", "self", ".", "fc", "(", "output2", ")", "\n", "mu", "=", "self", ".", "mu_layer", "(", "logit", ")", "\n", "if", "self", ".", "is_vae", ":", "\n", "            ", "logvar", "=", "self", ".", "std_layer", "(", "logit", ")", "\n", "z", "=", "self", ".", "reparameterize", "(", "mu", ",", "logvar", ")", "\n", "return", "z", ",", "mu", ",", "torch", ".", "exp", "(", "logvar", ")", "\n", "", "else", ":", "\n", "            ", "return", "mu", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.model.hyper_network.HyperNetwork.__init__": [[6, 40], ["torch.Module.__init__", "int", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ModuleList", "torch.ModuleList", "range", "len"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.losses.champfer_loss.ChamferLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "input_size", "=", "config", "[", "'input_size'", "]", "\n", "self", ".", "use_bias", "=", "config", "[", "'use_bias'", "]", "\n", "self", ".", "relu_slope", "=", "config", "[", "'relu_slope'", "]", "\n", "# target network layers out channels", "\n", "target_network_out_ch", "=", "[", "3", "]", "+", "config", "[", "'target_network_layer_out_channels'", "]", "+", "[", "3", "]", "\n", "target_network_use_bias", "=", "int", "(", "config", "[", "'target_network_use_bias'", "]", ")", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_features", "=", "self", ".", "input_size", ",", "out_features", "=", "64", ",", "bias", "=", "self", ".", "use_bias", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Linear", "(", "in_features", "=", "64", ",", "out_features", "=", "128", ",", "bias", "=", "self", ".", "use_bias", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Linear", "(", "in_features", "=", "128", ",", "out_features", "=", "512", ",", "bias", "=", "self", ".", "use_bias", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Linear", "(", "in_features", "=", "512", ",", "out_features", "=", "1024", ",", "bias", "=", "self", ".", "use_bias", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Linear", "(", "in_features", "=", "1024", ",", "out_features", "=", "2048", ",", "bias", "=", "self", ".", "use_bias", ")", ",", "\n", ")", "\n", "\n", "self", ".", "output", "=", "[", "\n", "nn", ".", "Linear", "(", "2048", ",", "(", "target_network_out_ch", "[", "x", "-", "1", "]", "+", "target_network_use_bias", ")", "*", "target_network_out_ch", "[", "x", "]", ",", "\n", "bias", "=", "True", ")", "\n", "for", "x", "in", "range", "(", "1", ",", "len", "(", "target_network_out_ch", ")", ")", "\n", "]", "\n", "\n", "if", "not", "config", "[", "'target_network_freeze_layers_learning'", "]", ":", "\n", "            ", "self", ".", "output", "=", "nn", ".", "ModuleList", "(", "self", ".", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.model.hyper_network.HyperNetwork.forward": [[41, 44], ["hyper_network.HyperNetwork.model", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "target_network_layer"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "output", "=", "self", ".", "model", "(", "x", ")", "\n", "return", "torch", ".", "cat", "(", "[", "target_network_layer", "(", "output", ")", "for", "target_network_layer", "in", "self", ".", "output", "]", ",", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.model.target_network.TargetNetwork.__init__": [[6, 30], ["torch.Module.__init__", "target_network.TargetNetwork._get_layer_data", "range", "target_network.TargetNetwork._get_layer_data", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "len", "target_network.TargetNetwork._get_layer_data", "len", "str"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.losses.champfer_loss.ChamferLoss.__init__", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.model.target_network.TargetNetwork._get_layer_data", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.model.target_network.TargetNetwork._get_layer_data", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.model.target_network.TargetNetwork._get_layer_data"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "weights", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# self.z_size = config['missing_size']", "\n", "self", ".", "use_bias", "=", "config", "[", "'use_bias'", "]", "\n", "# target network layers out channels", "\n", "out_ch", "=", "config", "[", "'layer_out_channels'", "]", "\n", "\n", "layer_data", ",", "split_index", "=", "self", ".", "_get_layer_data", "(", "start_index", "=", "0", ",", "end_index", "=", "out_ch", "[", "0", "]", "*", "3", ",", "\n", "shape", "=", "(", "out_ch", "[", "0", "]", ",", "3", ")", ",", "weights", "=", "weights", ")", "\n", "self", ".", "layers", "=", "{", "\"1\"", ":", "layer_data", "}", "\n", "\n", "for", "x", "in", "range", "(", "1", ",", "len", "(", "out_ch", ")", ")", ":", "\n", "            ", "layer_data", ",", "split_index", "=", "self", ".", "_get_layer_data", "(", "start_index", "=", "split_index", ",", "\n", "end_index", "=", "split_index", "+", "(", "out_ch", "[", "x", "-", "1", "]", "*", "out_ch", "[", "x", "]", ")", ",", "\n", "shape", "=", "(", "out_ch", "[", "x", "]", ",", "out_ch", "[", "x", "-", "1", "]", ")", ",", "weights", "=", "weights", ")", "\n", "self", ".", "layers", "[", "str", "(", "x", "+", "1", ")", "]", "=", "layer_data", "\n", "\n", "", "layer_data", ",", "split_index", "=", "self", ".", "_get_layer_data", "(", "start_index", "=", "split_index", ",", "\n", "end_index", "=", "split_index", "+", "(", "out_ch", "[", "-", "1", "]", "*", "3", ")", ",", "\n", "shape", "=", "(", "3", ",", "out_ch", "[", "-", "1", "]", ")", ",", "weights", "=", "weights", ")", "\n", "self", ".", "output", "=", "layer_data", "\n", "self", ".", "activation", "=", "torch", ".", "nn", ".", "ReLU", "(", ")", "\n", "assert", "split_index", "==", "len", "(", "weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.model.target_network.TargetNetwork.forward": [[31, 39], ["torch.mm", "torch.mm", "torch.mm", "torch.mm", "target_network.TargetNetwork.activation", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "target_network.TargetNetwork.output.get", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "layer_index", "in", "self", ".", "layers", ":", "\n", "            ", "x", "=", "torch", ".", "mm", "(", "x", ",", "torch", ".", "transpose", "(", "self", ".", "layers", "[", "layer_index", "]", "[", "\"weight\"", "]", ",", "0", ",", "1", ")", ")", "\n", "if", "self", ".", "use_bias", ":", "\n", "                ", "assert", "\"bias\"", "in", "self", ".", "layers", "[", "layer_index", "]", "\n", "x", "=", "x", "+", "self", ".", "layers", "[", "layer_index", "]", "[", "\"bias\"", "]", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "", "return", "torch", ".", "mm", "(", "x", ",", "torch", ".", "transpose", "(", "self", ".", "output", "[", "\"weight\"", "]", ",", "0", ",", "1", ")", ")", "+", "self", ".", "output", ".", "get", "(", "\"bias\"", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.model.target_network.TargetNetwork._get_layer_data": [[40, 46], ["weights[].view"], "methods", ["None"], ["", "def", "_get_layer_data", "(", "self", ",", "start_index", ",", "end_index", ",", "shape", ",", "weights", ")", ":", "\n", "        ", "layer_data", "=", "{", "\"weight\"", ":", "weights", "[", "start_index", ":", "end_index", "]", ".", "view", "(", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ")", "}", "\n", "if", "self", ".", "use_bias", ":", "\n", "            ", "layer_data", "[", "\"bias\"", "]", "=", "weights", "[", "end_index", ":", "end_index", "+", "shape", "[", "0", "]", "]", "\n", "end_index", "=", "end_index", "+", "shape", "[", "0", "]", "\n", "", "return", "layer_data", ",", "end_index", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.model.full_model.FullModel._complete_config": [[16, 25], ["None"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "_complete_config", "(", "config", ")", ":", "\n", "        ", "config", "[", "'hyper_network'", "]", "[", "'target_network_layer_out_channels'", "]", "=", "config", "[", "'target_network'", "]", "[", "'layer_out_channels'", "]", "\n", "config", "[", "'hyper_network'", "]", "[", "'target_network_use_bias'", "]", "=", "config", "[", "'target_network'", "]", "[", "'use_bias'", "]", "\n", "config", "[", "'hyper_network'", "]", "[", "'input_size'", "]", "=", "config", "[", "'random_encoder'", "]", "[", "'output_size'", "]", "+", "config", "[", "'real_encoder'", "]", "[", "'output_size'", "]", "\n", "\n", "config", "[", "'hyper_network'", "]", "[", "'target_network_freeze_layers_learning'", "]", "=", "config", "[", "'target_network'", "]", "[", "\n", "'freeze_layers_learning'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.model.full_model.FullModel.get_noise_size": [[26, 28], ["None"], "methods", ["None"], ["", "def", "get_noise_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "random_encoder_output_size", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.model.full_model.FullModel._resolve_mode": [[29, 43], ["full_model.HyperPocket", "model.encoder.Encoder", "model.encoder.Encoder", "full_model.HyperCloud", "model.encoder.Encoder", "full_model.HyperRec", "model.encoder.Encoder", "ValueError"], "methods", ["None"], ["", "def", "_resolve_mode", "(", "self", ",", "config", ")", ":", "\n", "        ", "self", ".", "random_encoder_output_size", "=", "config", "[", "'random_encoder'", "]", "[", "'output_size'", "]", "\n", "if", "config", "[", "'random_encoder'", "]", "[", "'output_size'", "]", ">", "0", "and", "config", "[", "'real_encoder'", "]", "[", "'output_size'", "]", ">", "0", ":", "\n", "            ", "self", ".", "mode", "=", "HyperPocket", "(", ")", "\n", "self", ".", "random_encoder", "=", "Encoder", "(", "config", "[", "'random_encoder'", "]", ",", "is_vae", "=", "True", ")", "\n", "self", ".", "real_encoder", "=", "Encoder", "(", "config", "[", "'real_encoder'", "]", ",", "is_vae", "=", "False", ")", "\n", "", "elif", "config", "[", "'random_encoder'", "]", "[", "'output_size'", "]", ">", "0", ":", "\n", "            ", "self", ".", "mode", "=", "HyperCloud", "(", ")", "\n", "self", ".", "random_encoder", "=", "Encoder", "(", "config", "[", "'random_encoder'", "]", ",", "is_vae", "=", "True", ")", "\n", "", "elif", "config", "[", "'real_encoder'", "]", "[", "'output_size'", "]", ">", "0", ":", "\n", "            ", "self", ".", "mode", "=", "HyperRec", "(", ")", "\n", "self", ".", "real_encoder", "=", "Encoder", "(", "config", "[", "'real_encoder'", "]", ",", "is_vae", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"at least one encoder should have non zero output\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.model.full_model.FullModel.__init__": [[44, 53], ["torch.Module.__init__", "full_model.FullModel._complete_config", "full_model.FullModel._resolve_mode", "model.hyper_network.HyperNetwork"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.losses.champfer_loss.ChamferLoss.__init__", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.model.full_model.FullModel._complete_config", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.model.full_model.FullModel._resolve_mode"], ["", "", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_complete_config", "(", "config", ")", "\n", "self", ".", "_resolve_mode", "(", "config", ")", "\n", "\n", "self", ".", "hyper_network", "=", "HyperNetwork", "(", "config", "[", "'hyper_network'", "]", ")", "\n", "self", ".", "target_network_config", "=", "config", "[", "'target_network'", "]", "\n", "\n", "self", ".", "point_generator_config", "=", "{", "'target_network_input'", ":", "config", "[", "'target_network_input'", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.model.full_model.FullModel.forward": [[54, 81], ["full_model.FullModel.mode.get_latent", "full_model.FullModel.hyper_network", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "enumerate", "existing.size", "existing.transpose_", "missing.transpose_", "model.target_network.TargetNetwork().to", "utils.points.generate_points", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "missing.size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "model.target_network.TargetNetwork().to.", "existing.dim", "existing.dim", "missing.dim", "missing.dim", "model.target_network.TargetNetwork", "utils.points.generate_points.to"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.model.full_model.HyperCloud.get_latent", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.points.generate_points"], ["", "def", "forward", "(", "self", ",", "existing", ",", "missing", ",", "gt_shape", ",", "epoch", ",", "device", ",", "noise", "=", "None", ")", ":", "\n", "\n", "        ", "if", "existing", ".", "size", "(", "-", "1", ")", "==", "3", ":", "\n", "            ", "existing", ".", "transpose_", "(", "existing", ".", "dim", "(", ")", "-", "2", ",", "existing", ".", "dim", "(", ")", "-", "1", ")", "\n", "\n", "", "if", "noise", "is", "None", "and", "missing", "is", "not", "None", "and", "missing", ".", "size", "(", "-", "1", ")", "==", "3", ":", "\n", "            ", "missing", ".", "transpose_", "(", "missing", ".", "dim", "(", ")", "-", "2", ",", "missing", ".", "dim", "(", ")", "-", "1", ")", "\n", "\n", "", "if", "gt_shape", "[", "-", "1", "]", "==", "3", ":", "\n", "            ", "gt_shape", "[", "1", "]", ",", "gt_shape", "[", "2", "]", "=", "gt_shape", "[", "2", "]", ",", "gt_shape", "[", "1", "]", "\n", "\n", "", "latent", ",", "mu", ",", "logvar", "=", "self", ".", "mode", ".", "get_latent", "(", "self", ",", "existing", ",", "missing", ",", "noise", ")", "\n", "\n", "target_networks_weights", "=", "self", ".", "hyper_network", "(", "latent", ")", "\n", "reconstruction", "=", "torch", ".", "zeros", "(", "gt_shape", ")", ".", "to", "(", "device", ")", "\n", "\n", "for", "j", ",", "target_network_weights", "in", "enumerate", "(", "target_networks_weights", ")", ":", "\n", "            ", "target_network", "=", "TargetNetwork", "(", "self", ".", "target_network_config", ",", "target_network_weights", ")", ".", "to", "(", "device", ")", "\n", "target_network_input", "=", "generate_points", "(", "config", "=", "self", ".", "point_generator_config", ",", "epoch", "=", "epoch", ",", "\n", "size", "=", "(", "gt_shape", "[", "2", "]", ",", "gt_shape", "[", "1", "]", ")", ")", "\n", "reconstruction", "[", "j", "]", "=", "torch", ".", "transpose", "(", "target_network", "(", "target_network_input", ".", "to", "(", "device", ")", ")", ",", "0", ",", "1", ")", "\n", "\n", "# reconstruction shape [BATCH_SIZE, 3, N]", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "return", "reconstruction", ",", "logvar", ",", "mu", "\n", "", "else", ":", "\n", "            ", "return", "reconstruction", "# , latent, target_networks_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.model.full_model.FullModel.parameters": [[82, 84], ["full_model.FullModel.mode.get_parameters"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.model.full_model.HyperCloud.get_parameters"], ["", "", "def", "parameters", "(", "self", ",", "recurse", ":", "bool", "=", "True", ")", "->", "Iterator", "[", "Parameter", "]", ":", "\n", "        ", "return", "self", ".", "mode", ".", "get_parameters", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.model.full_model.ModelMode.get_latent": [[88, 90], ["None"], "methods", ["None"], ["    ", "def", "get_latent", "(", "self", ",", "model", ":", "FullModel", ",", "existing", ",", "missing", ",", "noise", "=", "None", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.model.full_model.ModelMode.get_parameters": [[91, 93], ["None"], "methods", ["None"], ["", "def", "get_parameters", "(", "self", ",", "model", ":", "FullModel", ")", "->", "Iterator", "[", "Parameter", "]", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.model.full_model.ModelMode.has_generativity": [[94, 96], ["None"], "methods", ["None"], ["", "def", "has_generativity", "(", "self", ")", "->", "bool", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.model.full_model.HyperPocket.get_latent": [[100, 114], ["model.random_encoder", "model.real_encoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.real_encoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.random_encoder"], "methods", ["None"], ["    ", "def", "get_latent", "(", "self", ",", "model", ":", "FullModel", ",", "existing", ",", "missing", ",", "noise", "=", "None", ")", ":", "\n", "        ", "if", "model", ".", "training", ":", "\n", "            ", "codes", ",", "mu", ",", "logvar", "=", "model", ".", "random_encoder", "(", "missing", ")", "\n", "real_mu", "=", "model", ".", "real_encoder", "(", "existing", ")", "\n", "latent", "=", "torch", ".", "cat", "(", "[", "codes", ",", "real_mu", "]", ",", "1", ")", "\n", "return", "latent", ",", "mu", ",", "logvar", "\n", "", "else", ":", "\n", "            ", "if", "noise", "is", "None", ":", "\n", "                ", "_", ",", "random_mu", ",", "_", "=", "model", ".", "random_encoder", "(", "missing", ")", "\n", "", "else", ":", "\n", "                ", "random_mu", "=", "noise", "\n", "", "real_mu", "=", "model", ".", "real_encoder", "(", "existing", ")", "\n", "latent", "=", "torch", ".", "cat", "(", "[", "random_mu", ",", "real_mu", "]", ",", "1", ")", "\n", "return", "latent", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.model.full_model.HyperPocket.get_parameters": [[115, 119], ["itertools.chain", "model.random_encoder.parameters", "model.real_encoder.parameters", "model.hyper_network.parameters"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.model.full_model.FullModel.parameters", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.model.full_model.FullModel.parameters", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.model.full_model.FullModel.parameters"], ["", "", "def", "get_parameters", "(", "self", ",", "model", ":", "FullModel", ")", ":", "\n", "        ", "return", "chain", "(", "model", ".", "random_encoder", ".", "parameters", "(", ")", ",", "\n", "model", ".", "real_encoder", ".", "parameters", "(", ")", ",", "\n", "model", ".", "hyper_network", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.model.full_model.HyperPocket.has_generativity": [[120, 122], ["None"], "methods", ["None"], ["", "def", "has_generativity", "(", "self", ")", "->", "bool", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.model.full_model.HyperRec.get_latent": [[126, 128], ["model.real_encoder"], "methods", ["None"], ["    ", "def", "get_latent", "(", "self", ",", "model", ":", "FullModel", ",", "existing", ",", "missing", ",", "noise", "=", "None", ")", ":", "\n", "        ", "return", "model", ".", "real_encoder", "(", "existing", ")", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.model.full_model.HyperRec.get_parameters": [[129, 131], ["itertools.chain", "model.real_encoder.parameters", "model.hyper_network.parameters"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.model.full_model.FullModel.parameters", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.model.full_model.FullModel.parameters"], ["", "def", "get_parameters", "(", "self", ",", "model", ":", "FullModel", ")", ":", "\n", "        ", "return", "chain", "(", "model", ".", "real_encoder", ".", "parameters", "(", ")", ",", "model", ".", "hyper_network", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.model.full_model.HyperRec.has_generativity": [[132, 134], ["None"], "methods", ["None"], ["", "def", "has_generativity", "(", "self", ")", "->", "bool", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.model.full_model.HyperCloud.get_latent": [[138, 147], ["model.random_encoder", "model.random_encoder"], "methods", ["None"], ["    ", "def", "get_latent", "(", "self", ",", "model", ":", "FullModel", ",", "existing", ",", "missing", ",", "noise", "=", "None", ")", ":", "\n", "        ", "if", "model", ".", "training", ":", "\n", "            ", "return", "model", ".", "random_encoder", "(", "existing", ")", "\n", "", "else", ":", "\n", "            ", "if", "noise", "is", "None", ":", "\n", "                ", "_", ",", "random_mu", ",", "_", "=", "model", ".", "random_encoder", "(", "existing", ")", "\n", "", "else", ":", "\n", "                ", "random_mu", "=", "noise", "\n", "", "return", "random_mu", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.model.full_model.HyperCloud.get_parameters": [[148, 150], ["itertools.chain", "model.random_encoder.parameters", "model.hyper_network.parameters"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.model.full_model.FullModel.parameters", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.model.full_model.FullModel.parameters"], ["", "", "def", "get_parameters", "(", "self", ",", "model", ":", "FullModel", ")", ":", "\n", "        ", "return", "chain", "(", "model", ".", "random_encoder", ".", "parameters", "(", ")", ",", "model", ".", "hyper_network", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.model.full_model.HyperCloud.has_generativity": [[151, 153], ["None"], "methods", ["None"], ["", "def", "has_generativity", "(", "self", ")", "->", "bool", ":", "\n", "        ", "return", "False", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.core.main.main": [[24, 191], ["core.setup.seed_setup", "core.setup.get_results_dir_path", "core.setup.results_dir_setup", "core.setup.logging_setup", "logging.getLogger", "logging.getLogger.info", "core.setup.cuda_setup", "logging.getLogger.info", "losses.champfer_loss.ChamferLoss().to", "model.full_model.FullModel().to", "FullModel().to.apply", "getattr", "optimizer.", "getattr", "scheduler.", "logging.getLogger.info", "utils.util.find_latest_epoch", "logging.getLogger.info", "datasets.get_datasets", "logging.getLogger.info", "exit", "os.path.join", "os.path.join", "open", "json.dump", "utils.telegram_logging.TelegramLogger.get_logger", "FullModel().to.parameters", "logging.getLogger.info", "os.path.join", "torch.utils.data.DataLoader", "range", "tuple", "os.path.join", "os.path.join", "ValueError", "os.path.join", "losses.champfer_loss.ChamferLoss", "model.full_model.FullModel", "core.setup.restore_model_state", "FileNotFoundError", "torch.utils.data.DataLoader", "core.setup.restore_metrics", "datetime.datetime.now", "logging.getLogger.debug", "core.epoch_loops.train_epoch", "scheduler.step", "train_losses.append", "logging.getLogger.info", "range", "core.epoch_loops.val_epoch", "val_losses.append", "epoch_val_losses.items", "logging.getLogger.info", "epoch_val_samples.items", "FullModel().to.eval", "core.experiments.experiment_functions_dict.keys", "core.setup.get_results_dir_path", "core.setup.get_results_dir_path", "utils.util.get_model_name", "core.setup.restore_model_state", "val_dataset_dict.items", "numpy.array", "min", "train_plots.append", "train_plots.append", "train_plots.append", "TelegramLogger.get_logger.log_images", "val_dataset_dict.keys", "val_plots.append", "val_plots.append", "val_plots.append", "numpy.random.choice", "TelegramLogger.get_logger.log_images", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "numpy.save", "numpy.save", "logging.getLogger.debug", "torch.no_grad", "torch.no_grad", "[].items", "utils.util.save_plot", "utils.util.save_plot", "utils.util.save_plot", "utils.util.save_plot", "utils.util.save_plot", "utils.util.save_plot", "numpy.arange", "int", "plots_to_log.extend", "config[].get", "FullModel().to.state_dict", "os.path.join", "optimizer.state_dict", "os.path.join", "scheduler.state_dict", "os.path.join", "os.path.join", "numpy.array", "os.path.join", "numpy.array", "TelegramLogger.get_logger.log", "experiment_dict.pop", "val_dataset_dict.keys", "datetime.datetime.now", "str", "numpy.min", "logging.getLogger.info", "len", "len"], "function", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.core.setup.seed_setup", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.core.setup.get_results_dir_path", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.core.setup.results_dir_setup", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.core.setup.logging_setup", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.core.setup.cuda_setup", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.util.find_latest_epoch", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.__init__.get_datasets", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.telegram_logging.TelegramLogger.get_logger", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.model.full_model.FullModel.parameters", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.core.setup.restore_model_state", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.core.setup.restore_metrics", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.core.epoch_loops.train_epoch", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.core.epoch_loops.val_epoch", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.core.setup.get_results_dir_path", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.core.setup.get_results_dir_path", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.util.get_model_name", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.core.setup.restore_model_state", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.telegram_logging.TelegramLogger.log_images", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.telegram_logging.TelegramLogger.log_images", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.util.save_plot", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.util.save_plot", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.util.save_plot", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.util.save_plot", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.util.save_plot", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.util.save_plot", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.telegram_logging.TelegramLogger.log"], ["def", "main", "(", "config", ":", "dict", ")", ":", "\n", "# region Setup", "\n", "    ", "seed_setup", "(", "config", "[", "'setup'", "]", "[", "'seed'", "]", ")", "\n", "\n", "run_mode", ":", "str", "=", "config", "[", "'mode'", "]", "\n", "result_dir_path", ":", "str", "=", "get_results_dir_path", "(", "config", ",", "run_mode", ")", "\n", "\n", "if", "run_mode", "==", "'training'", ":", "\n", "        ", "dirs_to_create", "=", "(", "'weights'", ",", "'samples'", ",", "'metrics'", ")", "\n", "weights_path", "=", "join", "(", "result_dir_path", ",", "'weights'", ")", "\n", "metrics_path", "=", "join", "(", "result_dir_path", ",", "'metrics'", ")", "\n", "", "elif", "run_mode", "==", "'experiments'", ":", "\n", "        ", "dirs_to_create", "=", "tuple", "(", "experiment_functions_dict", ".", "keys", "(", ")", ")", "\n", "weights_path", "=", "join", "(", "get_results_dir_path", "(", "config", ",", "'training'", ")", ",", "'weights'", ")", "\n", "metrics_path", "=", "join", "(", "get_results_dir_path", "(", "config", ",", "'training'", ")", ",", "'metrics'", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"mode should be `training` or `experiments`\"", ")", "\n", "\n", "", "results_dir_setup", "(", "result_dir_path", ",", "dirs_to_create", ")", "\n", "\n", "with", "open", "(", "join", "(", "result_dir_path", ",", "'last_config.json'", ")", ",", "mode", "=", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "config", ",", "f", ")", "\n", "\n", "", "logging_setup", "(", "result_dir_path", ")", "\n", "log", "=", "logging", ".", "getLogger", "(", ")", "\n", "\n", "log", ".", "info", "(", "f'Current mode {run_mode}'", ")", "\n", "\n", "if", "config", "[", "'telegram_logger'", "]", "[", "'enable'", "]", ":", "\n", "        ", "tg_log", "=", "TelegramLogger", ".", "get_logger", "(", "config", "[", "'telegram_logger'", "]", ")", "\n", "\n", "", "device", "=", "cuda_setup", "(", "config", "[", "'setup'", "]", "[", "'gpu_id'", "]", ")", "\n", "log", ".", "info", "(", "f'Device variable: {device}'", ")", "\n", "\n", "reconstruction_loss", "=", "ChamferLoss", "(", ")", ".", "to", "(", "device", ")", "\n", "full_model", "=", "FullModel", "(", "config", "[", "'full_model'", "]", ")", ".", "to", "(", "device", ")", "\n", "full_model", ".", "apply", "(", "weights_init", ")", "\n", "\n", "optimizer", "=", "getattr", "(", "optim", ",", "config", "[", "'training'", "]", "[", "'optimizer'", "]", "[", "'type'", "]", ")", "# class", "\n", "optimizer", "=", "optimizer", "(", "full_model", ".", "parameters", "(", ")", ",", "**", "config", "[", "'training'", "]", "[", "'optimizer'", "]", "[", "'hyperparams'", "]", ")", "\n", "\n", "scheduler", "=", "getattr", "(", "optim", ".", "lr_scheduler", ",", "config", "[", "'training'", "]", "[", "'lr_scheduler'", "]", "[", "'type'", "]", ")", "# class", "\n", "scheduler", "=", "scheduler", "(", "optimizer", ",", "**", "config", "[", "'training'", "]", "[", "'lr_scheduler'", "]", "[", "'hyperparams'", "]", ")", "\n", "log", ".", "info", "(", "f'Model {get_model_name(config)} created'", ")", "\n", "\n", "latest_epoch", "=", "find_latest_epoch", "(", "result_dir_path", "if", "run_mode", "==", "\"training\"", "else", "weights_path", ")", "\n", "\n", "log", ".", "info", "(", "f'Latest epoch found: {latest_epoch}'", ")", "\n", "\n", "if", "latest_epoch", ">", "0", ":", "\n", "        ", "if", "run_mode", "==", "\"training\"", ":", "\n", "            ", "latest_epoch", "=", "restore_model_state", "(", "weights_path", ",", "metrics_path", ",", "config", "[", "'setup'", "]", "[", "'gpu_id'", "]", ",", "latest_epoch", ",", "\n", "\"latest\"", ",", "full_model", ",", "optimizer", ",", "scheduler", ")", "\n", "", "elif", "run_mode", "==", "\"experiments\"", ":", "\n", "            ", "latest_epoch", "=", "restore_model_state", "(", "weights_path", ",", "metrics_path", ",", "config", "[", "'setup'", "]", "[", "'gpu_id'", "]", ",", "latest_epoch", ",", "\n", "config", "[", "'experiments'", "]", "[", "'epoch'", "]", ",", "full_model", ")", "\n", "", "log", ".", "info", "(", "f'Restored epoch : {latest_epoch}'", ")", "\n", "", "elif", "run_mode", "==", "\"experiments\"", ":", "\n", "        ", "raise", "FileNotFoundError", "(", "\"no weights found at \"", ",", "weights_path", ")", "\n", "# endregion Setup", "\n", "\n", "", "train_dataset", ",", "val_dataset_dict", ",", "test_dataset_dict", "=", "get_datasets", "(", "config", "[", "'dataset'", "]", ")", "\n", "\n", "log", ".", "info", "(", "f'Dataset loaded for classes: {[cat_name for cat_name in val_dataset_dict.keys()]}'", ")", "\n", "\n", "if", "run_mode", "==", "'training'", ":", "\n", "        ", "samples_path", "=", "join", "(", "result_dir_path", ",", "'samples'", ")", "\n", "train_dataloader", "=", "DataLoader", "(", "train_dataset", ",", "pin_memory", "=", "True", ",", "**", "config", "[", "'training'", "]", "[", "'dataloader'", "]", "[", "'train'", "]", ")", "\n", "val_dataloaders_dict", "=", "{", "cat_name", ":", "DataLoader", "(", "cat_ds", ",", "pin_memory", "=", "True", ",", "**", "config", "[", "'training'", "]", "[", "'dataloader'", "]", "[", "'val'", "]", ")", "\n", "for", "cat_name", ",", "cat_ds", "in", "val_dataset_dict", ".", "items", "(", ")", "}", "\n", "if", "latest_epoch", "==", "0", ":", "\n", "            ", "best_epoch_loss", "=", "np", ".", "Infinity", "\n", "train_losses", "=", "[", "]", "\n", "val_losses", "=", "[", "]", "\n", "", "else", ":", "\n", "            ", "train_losses", ",", "val_losses", ",", "best_epoch_loss", "=", "restore_metrics", "(", "metrics_path", ",", "latest_epoch", ")", "\n", "\n", "", "for", "epoch", "in", "range", "(", "latest_epoch", "+", "1", ",", "config", "[", "'training'", "]", "[", "'max_epoch'", "]", "+", "1", ")", ":", "\n", "            ", "start_epoch_time", "=", "datetime", ".", "now", "(", ")", "\n", "log", ".", "debug", "(", "\"Epoch: %s\"", "%", "epoch", ")", "\n", "\n", "full_model", ",", "optimizer", ",", "epoch_loss_all", ",", "epoch_loss_kld", ",", "epoch_loss_r", ",", "latest_existing", ",", "latest_gt", ",", "latest_rec", "=", "train_epoch", "(", "epoch", ",", "full_model", ",", "optimizer", ",", "train_dataloader", ",", "device", ",", "reconstruction_loss", ",", "\n", "config", "[", "'training'", "]", "[", "'loss_coef'", "]", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "\n", "train_losses", ".", "append", "(", "np", ".", "array", "(", "[", "epoch_loss_all", ",", "epoch_loss_r", ",", "epoch_loss_kld", "]", ")", ")", "\n", "\n", "log_string", "=", "f'[{epoch}/{config[\"training\"][\"max_epoch\"]}] '", "f'Loss_ALL: {epoch_loss_all:.4f} '", "f'Loss_R: {epoch_loss_r:.4f} '", "f'Loss_E: {epoch_loss_kld:.4f} '", "f'Time: {datetime.now() - start_epoch_time}'", "\n", "log", ".", "info", "(", "log_string", ")", "\n", "\n", "train_plots", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "min", "(", "5", ",", "latest_rec", ".", "shape", "[", "0", "]", ")", ")", ":", "\n", "                ", "train_plots", ".", "append", "(", "save_plot", "(", "latest_existing", "[", "k", "]", ",", "epoch", ",", "k", ",", "samples_path", ",", "'existing'", ")", ")", "\n", "train_plots", ".", "append", "(", "save_plot", "(", "latest_rec", "[", "k", "]", ",", "epoch", ",", "k", ",", "samples_path", ",", "'reconstructed'", ")", ")", "\n", "train_plots", ".", "append", "(", "save_plot", "(", "latest_gt", "[", "k", "]", ".", "T", ",", "epoch", ",", "k", ",", "samples_path", ",", "'gt'", ")", ")", "\n", "\n", "", "if", "config", "[", "'telegram_logger'", "]", "[", "'enable'", "]", ":", "\n", "                ", "tg_log", ".", "log_images", "(", "train_plots", "[", ":", "9", "]", ",", "log_string", ")", "\n", "\n", "", "epoch_val_losses", ",", "epoch_val_samples", "=", "val_epoch", "(", "epoch", ",", "full_model", ",", "device", ",", "val_dataloaders_dict", ",", "\n", "val_dataset_dict", ".", "keys", "(", ")", ",", "reconstruction_loss", ",", "\n", "config", "[", "'training'", "]", "[", "'loss_coef'", "]", ")", "\n", "\n", "is_new_best", "=", "epoch_val_losses", "[", "'total'", "]", "[", "0", "]", "<", "best_epoch_loss", "\n", "\n", "if", "is_new_best", ":", "\n", "                ", "best_epoch_loss", "=", "epoch_val_losses", "[", "'total'", "]", "[", "0", "]", "\n", "\n", "", "val_losses", ".", "append", "(", "epoch_val_losses", "[", "'total'", "]", ")", "\n", "\n", "log_string", "=", "f'val results[{config[\"training\"][\"loss_coef\"]}*our_cd]:\\n'", "\n", "for", "k", ",", "v", "in", "epoch_val_losses", ".", "items", "(", ")", ":", "\n", "                ", "log_string", "+=", "k", "+", "': '", "+", "str", "(", "v", ")", "+", "'\\n'", "\n", "\n", "", "if", "is_new_best", ":", "\n", "                ", "log_string", "+=", "\"new best epoch\"", "\n", "\n", "", "log", ".", "info", "(", "log_string", ")", "\n", "\n", "val_plots", "=", "[", "]", "\n", "for", "cat_name", ",", "sample", "in", "epoch_val_samples", ".", "items", "(", ")", ":", "\n", "                ", "val_plots", ".", "append", "(", "save_plot", "(", "sample", "[", "0", "]", ",", "epoch", ",", "cat_name", ",", "samples_path", ",", "'val_existing'", ")", ")", "\n", "val_plots", ".", "append", "(", "save_plot", "(", "sample", "[", "2", "]", ",", "epoch", ",", "cat_name", ",", "samples_path", ",", "'val_rec'", ")", ")", "\n", "val_plots", ".", "append", "(", "save_plot", "(", "sample", "[", "1", "]", ".", "T", ",", "epoch", ",", "cat_name", ",", "samples_path", ",", "'val_gt'", ")", ")", "\n", "\n", "", "if", "config", "[", "'telegram_logger'", "]", "[", "'enable'", "]", ":", "\n", "                ", "chosen_plot_idx", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "len", "(", "val_plots", ")", "/", "3", ",", "dtype", "=", "np", ".", "int", ")", ",", "\n", "int", "(", "np", ".", "min", "(", "[", "3", ",", "len", "(", "val_plots", ")", "/", "3", "]", ")", ")", ",", "replace", "=", "False", ")", "\n", "plots_to_log", "=", "[", "]", "\n", "for", "idx", "in", "chosen_plot_idx", ":", "\n", "                    ", "plots_to_log", ".", "extend", "(", "val_plots", "[", "3", "*", "idx", ":", "3", "*", "idx", "+", "3", "]", ")", "\n", "", "tg_log", ".", "log_images", "(", "plots_to_log", ",", "log_string", ")", "\n", "\n", "", "if", "(", "epoch", "%", "config", "[", "'training'", "]", "[", "'state_save_frequency'", "]", "==", "0", "or", "is_new_best", ")", "and", "epoch", ">", "config", "[", "'training'", "]", ".", "get", "(", "'min_save_epoch'", ",", "0", ")", ":", "\n", "                ", "torch", ".", "save", "(", "full_model", ".", "state_dict", "(", ")", ",", "join", "(", "weights_path", ",", "f'{epoch:05}_model.pth'", ")", ")", "\n", "torch", ".", "save", "(", "optimizer", ".", "state_dict", "(", ")", ",", "join", "(", "weights_path", ",", "f'{epoch:05}_O.pth'", ")", ")", "\n", "torch", ".", "save", "(", "scheduler", ".", "state_dict", "(", ")", ",", "join", "(", "weights_path", ",", "f'{epoch:05}_S.pth'", ")", ")", "\n", "\n", "np", ".", "save", "(", "join", "(", "metrics_path", ",", "f'{epoch:05}_train'", ")", ",", "np", ".", "array", "(", "train_losses", ")", ")", "\n", "np", ".", "save", "(", "join", "(", "metrics_path", ",", "f'{epoch:05}_val'", ")", ",", "np", ".", "array", "(", "val_losses", ")", ")", "\n", "\n", "log_string", "=", "\"Epoch: %s saved\"", "%", "epoch", "\n", "log", ".", "debug", "(", "log_string", ")", "\n", "if", "config", "[", "'telegram_logger'", "]", "[", "'enable'", "]", ":", "\n", "                    ", "tg_log", ".", "log", "(", "log_string", ")", "\n", "\n", "", "", "", "", "elif", "run_mode", "==", "'experiments'", ":", "\n", "\n", "# from datasets.real_data import RealDataNPYDataset", "\n", "# test_dataset_dict = RealDataNPYDataset(root_dir=\"D:\\\\UJ\\\\bachelors\\\\3d-point-clouds-autocomplete\\\\data\\\\real_car_data\")", "\n", "\n", "        ", "full_model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "experiment_name", ",", "experiment_dict", "in", "config", "[", "'experiments'", "]", "[", "'settings'", "]", ".", "items", "(", ")", ":", "\n", "                ", "if", "experiment_dict", ".", "pop", "(", "'execute'", ",", "False", ")", ":", "\n", "                    ", "log", ".", "info", "(", "experiment_name", ")", "\n", "experiment_functions_dict", "[", "experiment_name", "]", "(", "full_model", ",", "device", ",", "test_dataset_dict", ",", "result_dir_path", ",", "\n", "latest_epoch", ",", "**", "experiment_dict", ")", "\n", "\n", "", "", "", "", "exit", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.core.setup.seed_setup": [[12, 20], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed_all"], "function", ["None"], ["'approxmatch.cu'", ",", "\n", "'nndistance.cu'", "\n", "]", ",", "\n", ")", "\n", "]", ",", "\n", "cmdclass", "=", "{", "'build_ext'", ":", "BuildExtension", "}", ",", "\n", ")", "\n", ""]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.core.setup.get_results_dir_path": [[22, 25], ["os.path.join", "utils.util.get_distribution_dir", "utils.util.get_classes_dir", "utils.util.get_model_name"], "function", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.util.get_distribution_dir", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.util.get_classes_dir", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.util.get_model_name"], []], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.core.setup.results_dir_setup": [[27, 32], ["os.makedirs", "os.makedirs", "os.path.join"], "function", ["None"], []], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.core.setup.logging_setup": [[34, 55], ["os.makedirs", "os.path.join", "logging.basicConfig", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.Formatter", "logging.StreamHandler.setFormatter", "logging.getLogger().addHandler", "os.path.exists", "logging.getLogger"], "function", ["None"], []], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.core.setup.cuda_setup": [[57, 61], ["torch.device", "torch.cuda.set_device", "torch.cuda.is_available"], "function", ["None"], []], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.core.setup.weights_init": [[63, 78], ["classname.find", "torch.nn.init.calculate_gain", "torch.nn.init.xavier_uniform_", "torch.nn.init.constant_", "classname.find", "torch.nn.init.constant_", "torch.nn.init.constant_", "classname.find", "torch.nn.init.calculate_gain", "torch.nn.init.xavier_uniform_", "torch.nn.init.constant_"], "function", ["None"], []], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.core.setup.restore_model_state": [[80, 102], ["full_model.load_state_dict", "torch.load", "optimizer.load_state_dict", "scheduler.load_state_dict", "numpy.load", "os.path.join", "torch.load", "torch.load", "os.path.join", "numpy.argmin", "int", "os.path.join", "os.path.join", "ValueError", "str"], "function", ["None"], []], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.core.setup.restore_metrics": [[104, 108], ["numpy.load", "numpy.load", "os.path.join", "os.path.join", "np.load.tolist", "np.load.tolist", "numpy.min"], "function", ["None"], []], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.core.epoch_loops.train_epoch": [[8, 47], ["full_model.train", "tqdm.tqdm", "enumerate", "optimizer.zero_grad", "existing.to.to", "missing.to.to", "gt.to.to", "full_model", "torch.mean", "full_model.mode.has_generativity", "torch.mean.item", "loss_all.item", "loss_all.backward", "optimizer.step", "existing.to.detach().cpu().numpy", "gt.to.detach().cpu().numpy", "reconstruction.detach().cpu().numpy", "len", "list", "torch.div", "torch.div.item", "rec_loss_function", "existing.to.detach().cpu", "gt.to.detach().cpu", "reconstruction.detach().cpu", "reconstruction.permute", "existing.to.detach", "gt.to.detach", "reconstruction.detach", "torch.exp", "torch.square"], "function", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.model.full_model.HyperCloud.has_generativity", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.pytorch_structural_losses.nn_distance.NNDistanceFunction.backward"], ["def", "train_epoch", "(", "epoch", ",", "full_model", ":", "FullModel", ",", "optimizer", ",", "loader", ",", "device", ",", "rec_loss_function", ",", "loss_coef", "=", "0.05", ")", ":", "\n", "    ", "full_model", ".", "train", "(", ")", "\n", "loss_all", "=", "0.0", "\n", "loss_r", "=", "0.0", "\n", "loss_kld", "=", "0.0", "\n", "\n", "for", "i", ",", "point_data", "in", "tqdm", "(", "enumerate", "(", "loader", ",", "1", ")", ",", "total", "=", "len", "(", "loader", ")", ")", ":", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "existing", ",", "missing", ",", "gt", ",", "_", "=", "point_data", "\n", "\n", "existing", "=", "existing", ".", "to", "(", "device", ")", "\n", "missing", "=", "missing", ".", "to", "(", "device", ")", "\n", "gt", "=", "gt", ".", "to", "(", "device", ")", "\n", "\n", "reconstruction", ",", "logvar", ",", "mu", "=", "full_model", "(", "existing", ",", "missing", ",", "list", "(", "gt", ".", "shape", ")", ",", "epoch", ",", "device", ")", "\n", "\n", "loss_r", "=", "torch", ".", "mean", "(", "\n", "loss_coef", "*", "rec_loss_function", "(", "gt", ",", "reconstruction", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ")", "\n", "\n", "if", "full_model", ".", "mode", ".", "has_generativity", "(", ")", ":", "\n", "            ", "loss_kld", "=", "0.5", "*", "(", "torch", ".", "exp", "(", "logvar", ")", "+", "torch", ".", "square", "(", "mu", ")", "-", "1", "-", "logvar", ")", ".", "sum", "(", ")", "\n", "loss_kld", "=", "torch", ".", "div", "(", "loss_kld", ",", "existing", ".", "shape", "[", "0", "]", ")", "\n", "loss_all", "=", "loss_r", "+", "loss_kld", "\n", "loss_kld", "+=", "loss_kld", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "            ", "loss_all", "=", "loss_r", "\n", "", "loss_r", "+=", "loss_r", ".", "item", "(", ")", "\n", "loss_all", "+=", "loss_all", ".", "item", "(", ")", "\n", "\n", "loss_all", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "loss_all", "=", "loss_all", "/", "i", "\n", "loss_kld", "=", "loss_kld", "/", "i", "\n", "loss_r", "=", "loss_r", "/", "i", "\n", "\n", "return", "full_model", ",", "optimizer", ",", "loss_all", ",", "loss_kld", ",", "loss_r", ",", "existing", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "gt", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "reconstruction", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.core.epoch_loops.val_epoch": [[49, 84], ["full_model.eval", "dict.fromkeys", "dict.fromkeys", "torch.no_grad", "loaders_dict.items", "numpy.zeros", "dict.fromkeys.values", "enumerate", "existing.to.detach().cpu().numpy", "gt.to.detach().cpu().numpy", "full_model.detach().cpu().numpy", "numpy.array", "numpy.add", "len", "existing.to.to", "missing.to.to", "gt.to.to", "full_model", "torch.mean", "torch.mean.item", "dict.fromkeys.keys", "list", "existing.to.detach().cpu", "gt.to.detach().cpu", "full_model.detach().cpu", "loss_function", "full_model.permute", "existing.to.detach", "gt.to.detach", "full_model.detach"], "function", ["None"], ["", "def", "val_epoch", "(", "epoch", ",", "full_model", ",", "device", ",", "loaders_dict", ",", "val_classes_names", ",", "loss_function", ",", "loss_coef", "=", "0.05", ")", ":", "\n", "    ", "full_model", ".", "eval", "(", ")", "\n", "\n", "val_losses", "=", "dict", ".", "fromkeys", "(", "val_classes_names", ")", "\n", "val_samples", "=", "dict", ".", "fromkeys", "(", "val_classes_names", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "cat_name", ",", "dl", "in", "loaders_dict", ".", "items", "(", ")", ":", "\n", "            ", "loss", "=", "0.0", "\n", "for", "i", ",", "point_data", "in", "enumerate", "(", "dl", ",", "1", ")", ":", "\n", "                ", "existing", ",", "missing", ",", "gt", ",", "_", "=", "point_data", "\n", "existing", "=", "existing", ".", "to", "(", "device", ")", "\n", "missing", "=", "missing", ".", "to", "(", "device", ")", "\n", "gt", "=", "gt", ".", "to", "(", "device", ")", "\n", "\n", "reconstruction", "=", "full_model", "(", "existing", ",", "missing", ",", "list", "(", "gt", ".", "shape", ")", ",", "epoch", ",", "device", ")", "\n", "\n", "loss_our_cd", "=", "torch", ".", "mean", "(", "\n", "loss_coef", "*", "loss_function", "(", "gt", ",", "reconstruction", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ")", "\n", "\n", "loss", "+=", "loss_our_cd", ".", "item", "(", ")", "\n", "\n", "", "existing", "=", "existing", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "gt", "=", "gt", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "reconstruction", "=", "reconstruction", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "val_samples", "[", "cat_name", "]", "=", "(", "existing", "[", "0", "]", ",", "gt", "[", "0", "]", ",", "reconstruction", "[", "0", "]", ")", "\n", "val_losses", "[", "cat_name", "]", "=", "np", ".", "array", "(", "[", "loss", "/", "i", "]", ")", "\n", "\n", "", "total", "=", "np", ".", "zeros", "(", "1", ")", "\n", "for", "v", "in", "val_losses", ".", "values", "(", ")", ":", "\n", "            ", "total", "=", "np", ".", "add", "(", "total", ",", "v", ")", "\n", "", "val_losses", "[", "'total'", "]", "=", "total", "/", "len", "(", "val_losses", ".", "keys", "(", ")", ")", "\n", "\n", "", "return", "val_losses", ",", "val_samples", "\n", "", ""]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.core.arg_parser.parse_config": [[5, 18], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "parser.parse_args.config.endswith", "open", "json.load"], "function", ["None"], ["def", "parse_config", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-c'", ",", "'--config'", ",", "default", "=", "None", ",", "type", "=", "str", ",", "\n", "help", "=", "'config file path'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "config", "=", "None", "\n", "if", "args", ".", "config", "is", "not", "None", "and", "args", ".", "config", ".", "endswith", "(", "'.json'", ")", ":", "\n", "        ", "with", "open", "(", "args", ".", "config", ")", "as", "f", ":", "\n", "            ", "config", "=", "json", ".", "load", "(", "f", ")", "\n", "", "", "assert", "config", "is", "not", "None", "\n", "\n", "return", "config", "\n", "", ""]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.core.experiments.fixed": [[23, 61], ["shutil.rmtree", "os.makedirs", "dataloaders_dict.items", "os.path.join", "os.path.join", "torch.utils.data.DataLoader", "tqdm.tqdm", "datasets_dict.items", "enumerate", "existing.cpu.to", "range", "existing.cpu.cpu", "range", "len", "torch.zeros().normal_().to", "full_model().cpu", "range", "numpy.save", "numpy.save", "os.path.join", "numpy.array", "utils.pcutil.plot_3d_point_cloud", "utils.pcutil.plot_3d_point_cloud.savefig", "matplotlib.close", "torch.zeros().normal_", "full_model", "os.path.join", "reconstruction[].numpy", "utils.pcutil.plot_3d_point_cloud", "utils.pcutil.plot_3d_point_cloud.savefig", "matplotlib.close", "existing[].cpu().numpy", "os.path.join", "os.path.join", "torch.zeros", "existing[].cpu", "full_model.get_noise_size"], "function", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.pcutil.plot_3d_point_cloud", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.pcutil.plot_3d_point_cloud", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.model.full_model.FullModel.get_noise_size"], ["def", "fixed", "(", "full_model", ":", "FullModel", ",", "device", ",", "datasets_dict", ",", "results_dir", ":", "str", ",", "epoch", ",", "amount", "=", "30", ",", "mean", "=", "0.0", ",", "std", "=", "0.015", ",", "\n", "noises_per_item", "=", "10", ",", "batch_size", "=", "8", ",", "save_plots", "=", "False", ",", "\n", "triangulation_config", "=", "{", "'execute'", ":", "False", ",", "'method'", ":", "'edge'", ",", "'depth'", ":", "2", "}", ")", ":", "\n", "# clean dir", "\n", "    ", "shutil", ".", "rmtree", "(", "join", "(", "results_dir", ",", "'fixed'", ")", ",", "ignore_errors", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "join", "(", "results_dir", ",", "'fixed'", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "dataloaders_dict", "=", "{", "cat_name", ":", "DataLoader", "(", "cat_ds", ",", "pin_memory", "=", "True", ",", "batch_size", "=", "batch_size", ")", "\n", "for", "cat_name", ",", "cat_ds", "in", "datasets_dict", ".", "items", "(", ")", "}", "\n", "for", "cat_name", ",", "dl", "in", "dataloaders_dict", ".", "items", "(", ")", ":", "\n", "\n", "        ", "for", "i", ",", "data", "in", "tqdm", "(", "enumerate", "(", "dl", ")", ",", "total", "=", "len", "(", "dl", ")", ")", ":", "\n", "\n", "            ", "existing", ",", "_", ",", "_", ",", "idx", "=", "data", "\n", "existing", "=", "existing", ".", "to", "(", "device", ")", "\n", "\n", "for", "j", "in", "range", "(", "noises_per_item", ")", ":", "\n", "                ", "fixed_noise", "=", "torch", ".", "zeros", "(", "existing", ".", "shape", "[", "0", "]", ",", "full_model", ".", "get_noise_size", "(", ")", ")", ".", "normal_", "(", "mean", "=", "mean", ",", "std", "=", "std", ")", ".", "to", "(", "\n", "device", ")", "\n", "reconstruction", "=", "full_model", "(", "existing", ",", "None", ",", "[", "existing", ".", "shape", "[", "0", "]", ",", "2048", ",", "3", "]", ",", "epoch", ",", "device", ",", "\n", "noise", "=", "fixed_noise", ")", ".", "cpu", "(", ")", "\n", "for", "k", "in", "range", "(", "reconstruction", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "np", ".", "save", "(", "join", "(", "results_dir", ",", "'fixed'", ",", "f'{cat_name}_{i * batch_size + k}_{j}_reconstruction'", ")", ",", "\n", "reconstruction", "[", "k", "]", ".", "numpy", "(", ")", ")", "\n", "if", "save_plots", ":", "\n", "                        ", "fig", "=", "plot_3d_point_cloud", "(", "reconstruction", "[", "k", "]", "[", "0", "]", ",", "reconstruction", "[", "k", "]", "[", "1", "]", ",", "reconstruction", "[", "k", "]", "[", "2", "]", ",", "\n", "in_u_sphere", "=", "True", ",", "show", "=", "False", ")", "\n", "fig", ".", "savefig", "(", "join", "(", "results_dir", ",", "'fixed'", ",", "f'{cat_name}_{i * batch_size + k}_{j}_fixed_reconstructed.png'", ")", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "# np.save(join(results_dir, 'fixed', f'{i*batch_size+k}_{j}_fixed_noise'), np.array(fixed_noise[k].cpu().numpy()))", "\n", "\n", "", "", "", "existing", "=", "existing", ".", "cpu", "(", ")", "\n", "for", "k", "in", "range", "(", "existing", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "np", ".", "save", "(", "join", "(", "results_dir", ",", "'fixed'", ",", "f'{cat_name}_{i * batch_size + k}_existing'", ")", ",", "np", ".", "array", "(", "existing", "[", "k", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "if", "save_plots", ":", "\n", "                    ", "fig", "=", "plot_3d_point_cloud", "(", "existing", "[", "k", "]", "[", "0", "]", ",", "existing", "[", "k", "]", "[", "1", "]", ",", "existing", "[", "k", "]", "[", "2", "]", ",", "in_u_sphere", "=", "True", ",", "show", "=", "False", ")", "\n", "fig", ".", "savefig", "(", "join", "(", "results_dir", ",", "'fixed'", ",", "f'{cat_name}_{i * batch_size + k}_existing.png'", ")", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.core.experiments.evaluate_generativity": [[63, 105], ["losses.champfer_loss.ChamferLoss().to", "torch.utils.data.DataLoader", "torch.no_grad", "dataloaders_dict.items", "datasets_dict.items", "losses.champfer_loss.ChamferLoss", "torch.cat().contiguous", "tqdm.tqdm", "print", "open", "json.dump", "missing.to.to", "torch.cat().contiguous.append", "existing.to.to", "range", "torch.cat", "utils.metrics.compute_all_metrics().items", "os.path.join", "torch.cat", "len", "len", "torch.zeros().normal_().to", "full_model", "torch.cat.append", "cat_results.get", "utils.metrics.jsd_between_point_cloud_sets", "full_model.cpu().detach().numpy", "torch.from_numpy().unsqueeze().to", "utils.metrics.compute_all_metrics", "cat_results.get", "v.item", "torch.cat.cpu().detach().numpy", "torch.cat().contiguous.cpu().numpy", "str", "torch.zeros().normal_", "full_model.cpu().detach", "torch.from_numpy().unsqueeze", "torch.cat.cpu().detach", "torch.cat().contiguous.cpu", "torch.zeros", "full_model.get_noise_size", "full_model.cpu", "torch.from_numpy", "torch.cat.cpu", "pc[].argsort"], "function", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.metrics.jsd_between_point_cloud_sets", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.metrics.compute_all_metrics", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.model.full_model.FullModel.get_noise_size"], ["", "", "", "", "", "def", "evaluate_generativity", "(", "full_model", ":", "FullModel", ",", "device", ",", "datasets_dict", ",", "results_dir", ",", "epoch", ",", "batch_size", ",", "num_workers", ",", "\n", "mean", "=", "0.0", ",", "std", "=", "0.005", ")", ":", "\n", "    ", "dataloaders_dict", "=", "{", "cat_name", ":", "DataLoader", "(", "cat_ds", ",", "pin_memory", "=", "True", ",", "batch_size", "=", "1", ",", "num_workers", "=", "num_workers", ")", "\n", "for", "cat_name", ",", "cat_ds", "in", "datasets_dict", ".", "items", "(", ")", "}", "\n", "chamfer_loss", "=", "ChamferLoss", "(", ")", ".", "to", "(", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "results", "=", "{", "}", "\n", "\n", "for", "cat_name", ",", "dl", "in", "dataloaders_dict", ".", "items", "(", ")", ":", "\n", "            ", "cat_gt", "=", "[", "]", "\n", "for", "data", "in", "dl", ":", "\n", "                ", "_", ",", "missing", ",", "_", ",", "_", "=", "data", "\n", "missing", "=", "missing", ".", "to", "(", "device", ")", "\n", "cat_gt", ".", "append", "(", "missing", ")", "\n", "", "cat_gt", "=", "torch", ".", "cat", "(", "cat_gt", ")", ".", "contiguous", "(", ")", "\n", "\n", "cat_results", "=", "{", "}", "\n", "\n", "for", "data", "in", "tqdm", "(", "dl", ",", "total", "=", "len", "(", "dl", ")", ")", ":", "\n", "                ", "existing", ",", "_", ",", "_", ",", "_", "=", "data", "\n", "existing", "=", "existing", ".", "to", "(", "device", ")", "\n", "\n", "obj_recs", "=", "[", "]", "\n", "\n", "for", "j", "in", "range", "(", "len", "(", "cat_gt", ")", ")", ":", "\n", "                    ", "fixed_noise", "=", "torch", ".", "zeros", "(", "1", ",", "full_model", ".", "get_noise_size", "(", ")", ")", ".", "normal_", "(", "mean", "=", "mean", ",", "std", "=", "std", ")", ".", "to", "(", "device", ")", "\n", "reconstruction", "=", "full_model", "(", "existing", ",", "None", ",", "[", "1", ",", "2048", ",", "3", "]", ",", "epoch", ",", "device", ",", "noise", "=", "fixed_noise", ")", "\n", "\n", "pc", "=", "reconstruction", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "obj_recs", ".", "append", "(", "torch", ".", "from_numpy", "(", "pc", ".", "T", "[", "pc", "[", "1", "]", ".", "argsort", "(", ")", "[", ":", "1024", "]", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", ")", "\n", "\n", "", "obj_recs", "=", "torch", ".", "cat", "(", "obj_recs", ")", "\n", "\n", "for", "k", ",", "v", "in", "compute_all_metrics", "(", "obj_recs", ",", "cat_gt", ",", "batch_size", ",", "chamfer_loss", ")", ".", "items", "(", ")", ":", "\n", "                    ", "cat_results", "[", "k", "]", "=", "cat_results", ".", "get", "(", "k", ",", "0.0", ")", "+", "v", ".", "item", "(", ")", "\n", "", "cat_results", "[", "'jsd'", "]", "=", "cat_results", ".", "get", "(", "'jsd'", ",", "0.0", ")", "+", "jsd_between_point_cloud_sets", "(", "\n", "obj_recs", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "cat_gt", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "results", "[", "cat_name", "]", "=", "cat_results", "\n", "print", "(", "cat_name", ",", "cat_results", ")", "\n", "\n", "", "with", "open", "(", "join", "(", "results_dir", ",", "'evaluate_generativity'", ",", "str", "(", "epoch", ")", "+", "'eval_gen_by_cat.json'", ")", ",", "mode", "=", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "results", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.core.experiments.compute_mmd_tmd_uhd": [[107, 129], ["os.path.join", "mmd", "print", "uhd", "print", "tmd", "print", "open", "json.dump", "os.path.join", "str"], "function", ["None"], ["", "", "", "def", "compute_mmd_tmd_uhd", "(", "full_model", ":", "FullModel", ",", "device", ",", "dataset", ",", "results_dir", ",", "epoch", ",", "batch_size", "=", "64", ")", ":", "\n", "    ", "from", "utils", ".", "evaluation", ".", "total_mutual_diff", "import", "process", "as", "tmd", "\n", "from", "utils", ".", "evaluation", ".", "completeness", "import", "process", "as", "uhd", "\n", "from", "utils", ".", "evaluation", ".", "mmd", "import", "process", "as", "mmd", "\n", "\n", "res", "=", "{", "}", "\n", "shape_dir_path", "=", "join", "(", "results_dir", ",", "'fixed'", ")", "\n", "\n", "mmd_v", "=", "mmd", "(", "shape_dir_path", ",", "dataset", ",", "device", ",", "batch_size", ")", "\n", "print", "(", "'MMD * 1000'", ",", "mmd_v", "*", "1000", ")", "\n", "res", "[", "'MMD * 1000'", "]", "=", "mmd_v", "*", "1000", "\n", "\n", "uhd_v", "=", "uhd", "(", "shape_dir_path", ")", "\n", "print", "(", "'UHD * 100'", ",", "uhd_v", "*", "100", ")", "\n", "res", "[", "'UHD * 100'", "]", "=", "uhd_v", "*", "100", "\n", "\n", "tmd_v", "=", "tmd", "(", "shape_dir_path", ")", "\n", "print", "(", "'TMD * 100'", ",", "tmd_v", "*", "100", ")", "\n", "res", "[", "'TMD * 100'", "]", "=", "tmd_v", "*", "100", "\n", "\n", "with", "open", "(", "join", "(", "results_dir", ",", "'compute_mmd_tmd_uhd'", ",", "str", "(", "epoch", ")", "+", "'res.json'", ")", ",", "mode", "=", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "res", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.core.experiments.merge_different_categories": [[131, 192], ["numpy.random.choice", "numpy.random.choice", "ValueError", "len", "len", "torch.no_grad", "range", "len", "len", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "torch.from_numpy().unsqueeze().to", "torch.from_numpy().unsqueeze().to", "list", "range", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torch.from_numpy().unsqueeze().to", "torch.from_numpy().unsqueeze().to", "full_model", "numpy.save", "full_model", "numpy.save", "full_model", "numpy.save", "full_model", "numpy.save", "numpy.min", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "f_gt.T[].argsort", "f_gt.T[].argsort", "s_gt.T[].argsort", "s_gt.T[].argsort", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "len", "len", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "temp_f_gt.T[].argsort", "temp_s_gt.T[].argsort", "full_model.cpu().numpy", "full_model.cpu().numpy", "full_model.cpu().numpy", "full_model.cpu().numpy", "torch.from_numpy", "torch.from_numpy", "full_model.cpu", "full_model.cpu", "full_model.cpu", "full_model.cpu"], "function", ["None"], ["", "", "def", "merge_different_categories", "(", "full_model", ",", "device", ",", "dataset", ",", "results_dir", ",", "epoch", ",", "amount", "=", "10", ",", "first_cat", "=", "'car'", ",", "\n", "second_cat", "=", "'airplane'", ")", ":", "\n", "    ", "first_cat_dataset", "=", "dataset", "[", "first_cat", "]", "\n", "second_cat_dataset", "=", "dataset", "[", "second_cat", "]", "\n", "\n", "if", "len", "(", "first_cat_dataset", ")", "<", "amount", "or", "len", "(", "second_cat_dataset", ")", "<", "amount", ":", "\n", "        ", "raise", "ValueError", "(", "f'with current dataset config the max amount value is '", "\n", "f'{np.min([len(first_cat_dataset), len(second_cat_dataset)])}'", ")", "\n", "\n", "", "first_cat_ids", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "first_cat_dataset", ")", ",", "amount", ",", "replace", "=", "False", ")", "\n", "second_cat_ids", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "first_cat_dataset", ")", ",", "amount", ",", "replace", "=", "False", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "amount", ")", ":", "\n", "            ", "f_existing", ",", "f_missing", ",", "f_gt", ",", "_", "=", "first_cat_dataset", "[", "first_cat_ids", "[", "i", "]", "]", "\n", "\n", "s_existing", ",", "s_missing", ",", "s_gt", ",", "_", "=", "second_cat_dataset", "[", "second_cat_ids", "[", "i", "]", "]", "\n", "\n", "f_existing", "=", "f_gt", "[", "f_gt", ".", "T", "[", "0", "]", ".", "argsort", "(", ")", "[", "1024", ":", "]", "]", "\n", "f_missing", "=", "f_gt", "[", "f_gt", ".", "T", "[", "0", "]", ".", "argsort", "(", ")", "[", ":", "1024", "]", "]", "\n", "s_existing", "=", "s_gt", "[", "s_gt", ".", "T", "[", "0", "]", ".", "argsort", "(", ")", "[", "1024", ":", "]", "]", "\n", "s_missing", "=", "s_gt", "[", "s_gt", ".", "T", "[", "0", "]", ".", "argsort", "(", ")", "[", ":", "1024", "]", "]", "\n", "\n", "np", ".", "save", "(", "join", "(", "results_dir", ",", "'merge_different_categories'", ",", "f'{first_cat}_{i}_existing'", ")", ",", "f_existing", ")", "\n", "np", ".", "save", "(", "join", "(", "results_dir", ",", "'merge_different_categories'", ",", "f'{first_cat}_{i}_missing'", ")", ",", "f_missing", ")", "\n", "np", ".", "save", "(", "join", "(", "results_dir", ",", "'merge_different_categories'", ",", "f'{first_cat}_{i}_gt'", ")", ",", "f_gt", ")", "\n", "\n", "np", ".", "save", "(", "join", "(", "results_dir", ",", "'merge_different_categories'", ",", "f'{second_cat}_{i}_existing'", ")", ",", "s_existing", ")", "\n", "np", ".", "save", "(", "join", "(", "results_dir", ",", "'merge_different_categories'", ",", "f'{second_cat}_{i}_missing'", ")", ",", "s_missing", ")", "\n", "np", ".", "save", "(", "join", "(", "results_dir", ",", "'merge_different_categories'", ",", "f'{second_cat}_{i}_gt'", ")", ",", "s_gt", ")", "\n", "\n", "f_existing", "=", "torch", ".", "from_numpy", "(", "f_existing", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "s_existing", "=", "torch", ".", "from_numpy", "(", "s_existing", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "\n", "gt_shape", "=", "list", "(", "torch", ".", "from_numpy", "(", "f_gt", ")", ".", "unsqueeze", "(", "0", ")", ".", "shape", ")", "\n", "\n", "for", "j", "in", "range", "(", "amount", ")", ":", "\n", "                ", "_", ",", "temp_f_missing", ",", "temp_f_gt", ",", "_", "=", "first_cat_dataset", "[", "first_cat_ids", "[", "j", "]", "]", "\n", "_", ",", "temp_s_missing", ",", "temp_s_gt", ",", "_", "=", "second_cat_dataset", "[", "second_cat_ids", "[", "j", "]", "]", "\n", "\n", "temp_f_missing", "=", "temp_f_gt", "[", "temp_f_gt", ".", "T", "[", "0", "]", ".", "argsort", "(", ")", "[", ":", "1024", "]", "]", "\n", "temp_s_missing", "=", "temp_s_gt", "[", "temp_s_gt", ".", "T", "[", "0", "]", ".", "argsort", "(", ")", "[", ":", "1024", "]", "]", "\n", "\n", "temp_f_missing", "=", "torch", ".", "from_numpy", "(", "temp_f_missing", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "temp_s_missing", "=", "torch", ".", "from_numpy", "(", "temp_s_missing", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "\n", "rec_ff", "=", "full_model", "(", "f_existing", ",", "temp_f_missing", ",", "gt_shape", ",", "epoch", ",", "device", ")", "\n", "np", ".", "save", "(", "join", "(", "results_dir", ",", "'merge_different_categories'", ",", "f'{first_cat}_{i}~{first_cat}_{j}_rec'", ")", ",", "\n", "rec_ff", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ".", "T", ")", "\n", "\n", "rec_fs", "=", "full_model", "(", "f_existing", ",", "temp_s_missing", ",", "gt_shape", ",", "epoch", ",", "device", ")", "\n", "np", ".", "save", "(", "join", "(", "results_dir", ",", "'merge_different_categories'", ",", "f'{first_cat}_{i}~{second_cat}_{j}_rec'", ")", ",", "\n", "rec_fs", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ".", "T", ")", "\n", "\n", "rec_sf", "=", "full_model", "(", "s_existing", ",", "temp_f_missing", ",", "gt_shape", ",", "epoch", ",", "device", ")", "\n", "np", ".", "save", "(", "join", "(", "results_dir", ",", "'merge_different_categories'", ",", "f'{second_cat}_{i}~{first_cat}_{j}_rec'", ")", ",", "\n", "rec_sf", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ".", "T", ")", "\n", "\n", "rec_ss", "=", "full_model", "(", "s_existing", ",", "temp_f_missing", ",", "gt_shape", ",", "epoch", ",", "device", ")", "\n", "np", ".", "save", "(", "join", "(", "results_dir", ",", "'merge_different_categories'", ",", "f'{second_cat}_{i}~{second_cat}_{j}_rec'", ")", ",", "\n", "rec_ss", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ".", "T", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.core.experiments.same_model_different_slices": [[194, 226], ["numpy.save", "torch.zeros().normal_", "numpy.save", "torch.from_numpy().unsqueeze().to", "noise.to.to", "[].cpu().numpy", "numpy.save", "utils.pcutil.plot_3d_point_cloud", "utils.pcutil.plot_3d_point_cloud.savefig", "matplotlib.close", "torch.no_grad", "datasets_dict.items", "os.path.join", "os.path.join", "noise.to.numpy", "os.path.join", "os.path.join", "numpy.random.choice", "tqdm.tqdm", "torch.zeros", "torch.from_numpy().unsqueeze", "[].cpu", "len", "enumerate", "utils.pcutil.plot_3d_point_cloud", "utils.pcutil.plot_3d_point_cloud.savefig", "matplotlib.close", "numpy.save", "range", "full_model.get_noise_size", "len", "os.path.join", "os.path.join", "datasets.utils.dataset_generator.SlicedDatasetGenerator.generate_item", "experiments.same_model_different_slices.process_existing"], "function", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.pcutil.plot_3d_point_cloud", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.pcutil.plot_3d_point_cloud", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.model.full_model.FullModel.get_noise_size", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.dataset_generator.SlicedDatasetGenerator.generate_item"], ["", "", "", "", "def", "same_model_different_slices", "(", "full_model", ",", "device", ",", "datasets_dict", ",", "results_dir", ",", "epoch", ",", "amount", "=", "10", ",", "slices_number", "=", "10", ",", "\n", "mean", "=", "0.0", ",", "std", "=", "0.015", ")", ":", "\n", "    ", "def", "process_existing", "(", "pcd", ",", "cat_name", ",", "name", ",", "i", ",", "j", ")", ":", "\n", "        ", "np", ".", "save", "(", "join", "(", "results_dir", ",", "'same_model_different_slices'", ",", "f'{cat_name}_{i}_{j}_{name}_pcd'", ")", ",", "pcd", ")", "\n", "noise", "=", "torch", ".", "zeros", "(", "1", ",", "full_model", ".", "get_noise_size", "(", ")", ")", ".", "normal_", "(", "mean", "=", "mean", ",", "std", "=", "std", ")", "\n", "np", ".", "save", "(", "join", "(", "results_dir", ",", "'same_model_different_slices'", ",", "f'{cat_name}_{i}_{j}_{name}_noise'", ")", ",", "noise", ".", "numpy", "(", ")", ")", "\n", "\n", "pcd", "=", "torch", ".", "from_numpy", "(", "pcd", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "noise", "=", "noise", ".", "to", "(", "device", ")", "\n", "rec", "=", "full_model", "(", "pcd", ",", "None", ",", "[", "1", ",", "2048", ",", "3", "]", ",", "epoch", ",", "device", ",", "noise", "=", "noise", ")", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "np", ".", "save", "(", "join", "(", "results_dir", ",", "'same_model_different_slices'", ",", "f'{cat_name}_{i}_{j}_{name}_rec'", ")", ",", "rec", ")", "\n", "\n", "fig", "=", "plot_3d_point_cloud", "(", "rec", "[", "0", "]", ",", "rec", "[", "1", "]", ",", "rec", "[", "2", "]", ",", "in_u_sphere", "=", "True", ",", "show", "=", "False", ")", "\n", "fig", ".", "savefig", "(", "join", "(", "results_dir", ",", "'same_model_different_slices'", ",", "f'{cat_name}_{i}_{j}_{name}_rec.png'", ")", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "cat_name", ",", "ds", "in", "datasets_dict", ".", "items", "(", ")", ":", "\n", "            ", "ids", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "ds", ")", ",", "amount", ",", "replace", "=", "False", ")", "\n", "for", "i", ",", "idx", "in", "tqdm", "(", "enumerate", "(", "ids", ")", ",", "total", "=", "len", "(", "ids", ")", ")", ":", "\n", "                ", "_", ",", "_", ",", "points", ",", "_", "=", "ds", "[", "idx", "]", "\n", "points", "=", "points", ".", "T", "\n", "fig", "=", "plot_3d_point_cloud", "(", "points", "[", "0", "]", ",", "points", "[", "1", "]", ",", "points", "[", "2", "]", ",", "in_u_sphere", "=", "True", ",", "show", "=", "False", ")", "\n", "fig", ".", "savefig", "(", "join", "(", "results_dir", ",", "'same_model_different_slices'", ",", "f'{cat_name}_{i}_gt.png'", ")", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "points", "=", "points", ".", "T", "\n", "np", ".", "save", "(", "join", "(", "results_dir", ",", "'same_model_different_slices'", ",", "f'{cat_name}_{i}_gt'", ")", ",", "points", ")", "\n", "for", "j", "in", "range", "(", "slices_number", ")", ":", "\n", "                    ", "f_pcd", ",", "s_pcd", "=", "SlicedDatasetGenerator", ".", "generate_item", "(", "points", ",", "1024", ")", "\n", "process_existing", "(", "f_pcd", ",", "cat_name", ",", "'f'", ",", "i", ",", "j", ")", "\n", "process_existing", "(", "s_pcd", ",", "cat_name", ",", "'s'", ",", "i", ",", "j", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.core.experiments.completion3d_submission": [[228, 248], ["os.path.join", "shutil.rmtree", "os.makedirs", "zipfile.ZipFile", "torch.utils.data.DataLoader", "tqdm.tqdm", "enumerate", "existing.to.to", "full_model().cpu", "enumerate", "len", "full_model().cpu.permute", "os.path.join", "zipfile.ZipFile.write", "full_model", "h5py.File", "f.create_dataset", "f.close", "os.path.basename", "model_id[].split", "x.numpy"], "function", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyData.write"], ["", "", "", "", "", "def", "completion3d_submission", "(", "full_model", ",", "device", ",", "datasets_dict", ",", "results_dir", ",", "epoch", ",", "batch_size", "=", "1", ")", ":", "\n", "    ", "benchmark_dir", "=", "join", "(", "results_dir", ",", "'completion3d_submission'", ")", "\n", "\n", "shutil", ".", "rmtree", "(", "benchmark_dir", ",", "ignore_errors", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "benchmark_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "submission_zip", "=", "ZipFile", "(", "'submission.zip'", ",", "'w'", ")", "\n", "\n", "test_dataloader", "=", "DataLoader", "(", "datasets_dict", "[", "'all'", "]", ",", "batch_size", "=", "batch_size", ")", "\n", "\n", "for", "i", ",", "point_data", "in", "tqdm", "(", "enumerate", "(", "test_dataloader", ",", "1", ")", ",", "total", "=", "len", "(", "test_dataloader", ")", ")", ":", "\n", "        ", "existing", ",", "_", ",", "_", ",", "model_id", "=", "point_data", "\n", "existing", "=", "existing", ".", "to", "(", "device", ")", "\n", "reconstruction", "=", "full_model", "(", "existing", ",", "None", ",", "[", "batch_size", ",", "2048", ",", "3", "]", ",", "epoch", ",", "device", ")", ".", "cpu", "(", ")", "\n", "for", "idx", ",", "x", "in", "enumerate", "(", "reconstruction", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ":", "\n", "            ", "ofile", "=", "join", "(", "benchmark_dir", ",", "model_id", "[", "idx", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "+", "'.h5'", ")", "\n", "with", "h5py", ".", "File", "(", "ofile", ",", "\"w\"", ")", "as", "f", ":", "\n", "                ", "f", ".", "create_dataset", "(", "\"data\"", ",", "data", "=", "x", ".", "numpy", "(", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "", "submission_zip", ".", "write", "(", "ofile", ",", "'all/'", "+", "basename", "(", "ofile", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.core.experiments.make_tsne_reduction": [[250, 390], ["ShapeNetDataset._get_datasets_for_classes", "torch.no_grad", "dataset_dict.items", "numpy.load", "numpy.load", "numpy.zeros", "numpy.zeros", "range", "matplotlib.plot", "matplotlib.title", "matplotlib.show", "matplotlib.plot", "matplotlib.title", "matplotlib.show", "dataloaders_dict.items", "numpy.concatenate", "numpy.concatenate", "latents.keys", "ShapeNetDataset._get_datasets_for_classes.keys", "numpy.random.choice", "range", "torch.cat().numpy", "torch.cat().numpy", "numpy.concatenate", "numpy.concatenate", "datetime.datetime.now", "print", "sklearn.manifold.TSNE().fit_transform", "print", "matplotlib.plot", "matplotlib.title", "matplotlib.show", "numpy.save", "datetime.datetime.now", "print", "sklearn.manifold.TSNE().fit_transform", "print", "matplotlib.plot", "matplotlib.title", "matplotlib.show", "numpy.save", "os.path.join", "os.path.join", "numpy.linalg.norm", "numpy.linalg.norm", "torch.utils.data.DataLoader", "tqdm.tqdm", "torch.cat().numpy", "torch.cat().numpy", "numpy.save", "numpy.save", "numpy.load", "numpy.load", "len", "numpy.save", "list", "torch.from_numpy().unsqueeze().to", "torch.from_numpy().unsqueeze().to", "full_model", "torch.cat().numpy.append", "torch.cat().numpy.append", "torch.from_numpy().unsqueeze().to", "torch.from_numpy().unsqueeze().to", "full_model", "torch.cat().numpy.append", "torch.cat().numpy.append", "os.path.join", "os.path.join", "ShapeNetDataset._get_datasets_for_classes.items", "existing.to.to", "missing.to.to", "full_model", "torch.cat().numpy.append", "torch.cat().numpy.append", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "latent.cpu", "tnw.cpu", "latent.cpu", "tnw.cpu", "torch.cat", "torch.cat", "sklearn.manifold.TSNE", "datetime.datetime.now", "sklearn.manifold.TSNE", "datetime.datetime.now", "len", "list", "latent.detach().cpu", "tnw.detach().cpu", "torch.cat", "torch.cat", "latents.values", "tnws.values", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "gt.T[].argsort", "gt.T[].argsort", "gt.T[].argsort", "gt.T[].argsort", "latent.detach", "tnw.detach", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.shapenet.ShapeNetDataset._get_datasets_for_classes"], ["", "", "", "def", "make_tsne_reduction", "(", "full_model", ",", "device", ",", "dataset_dict", ",", "results_dir", ",", "epoch", ")", ":", "\n", "    ", "'''\n        this experiment requires changing model.full_model.py:FullModel#forward method return to\n        reconstruction, latent, target_networks_weights\n    '''", "\n", "\n", "from", "datasets", ".", "shapenet", "import", "ShapeNetDataset", "\n", "\n", "cat_name", "=", "'car'", "\n", "amount", "=", "100", "\n", "\n", "train_dataset_dict", "=", "ShapeNetDataset", ".", "_get_datasets_for_classes", "(", "\n", "'D:\\\\UJ\\\\bachelors\\\\3d-point-clouds-autocomplete\\\\data\\\\shapenet'", ",", "\n", "'train'", ",", "\n", "use_pcn_model_list", "=", "True", ",", "\n", "is_random_rotated", "=", "False", ",", "\n", "num_samples", "=", "1", ",", "\n", "# classes=['04530566', '02933112']", "\n", ")", "\n", "\n", "is_compute", "=", "False", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "latents", "=", "{", "}", "\n", "tnws", "=", "{", "}", "\n", "if", "is_compute", ":", "\n", "            ", "dataloaders_dict", "=", "{", "cat_name", ":", "DataLoader", "(", "cat_ds", ",", "pin_memory", "=", "True", ",", "batch_size", "=", "1", ",", "num_workers", "=", "0", ")", "\n", "for", "cat_name", ",", "cat_ds", "in", "train_dataset_dict", ".", "items", "(", ")", "}", "\n", "for", "cat_name", ",", "dl", "in", "dataloaders_dict", ".", "items", "(", ")", ":", "\n", "                ", "if", "cat_name", "!=", "'car'", ":", "\n", "                    ", "continue", "\n", "", "cat_latent", "=", "[", "]", "\n", "cat_tnw", "=", "[", "]", "\n", "for", "data", "in", "tqdm", "(", "dl", ",", "total", "=", "len", "(", "dl", ")", ")", ":", "\n", "                    ", "existing", ",", "missing", ",", "gt", ",", "_", "=", "data", "\n", "existing", "=", "existing", ".", "to", "(", "device", ")", "\n", "missing", "=", "missing", ".", "to", "(", "device", ")", "\n", "rec", ",", "latent", ",", "tnw", "=", "full_model", "(", "existing", ",", "missing", ",", "list", "(", "gt", ".", "shape", ")", ",", "epoch", ",", "device", ")", "\n", "cat_latent", ".", "append", "(", "latent", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "cat_tnw", ".", "append", "(", "tnw", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "", "latents", "[", "cat_name", "]", "=", "torch", ".", "cat", "(", "cat_latent", ")", ".", "numpy", "(", ")", "\n", "tnws", "[", "cat_name", "]", "=", "torch", ".", "cat", "(", "cat_tnw", ")", ".", "numpy", "(", ")", "\n", "", "latents", "[", "'all'", "]", "=", "np", ".", "concatenate", "(", "[", "v", "for", "v", "in", "latents", ".", "values", "(", ")", "]", ")", "\n", "tnws", "[", "'all'", "]", "=", "np", ".", "concatenate", "(", "[", "v", "for", "v", "in", "tnws", ".", "values", "(", ")", "]", ")", "\n", "\n", "for", "cat_name", "in", "latents", ".", "keys", "(", ")", ":", "\n", "                ", "np", ".", "save", "(", "join", "(", "results_dir", ",", "'temp_exp'", ",", "f'{cat_name}_latent1'", ")", ",", "latents", "[", "cat_name", "]", ")", "\n", "np", ".", "save", "(", "join", "(", "results_dir", ",", "'temp_exp'", ",", "f'{cat_name}_tnw1'", ")", ",", "tnws", "[", "cat_name", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "cat_name", "in", "train_dataset_dict", ".", "keys", "(", ")", ":", "\n", "                ", "if", "cat_name", "!=", "'car'", ":", "\n", "                    ", "continue", "\n", "", "latents", "[", "cat_name", "]", "=", "np", ".", "load", "(", "join", "(", "results_dir", ",", "'temp_exp'", ",", "f'{cat_name}_latent1.npy'", ")", ")", "\n", "tnws", "[", "cat_name", "]", "=", "np", ".", "load", "(", "join", "(", "results_dir", ",", "'temp_exp'", ",", "f'{cat_name}_tnw1.npy'", ")", ")", "\n", "\n", "", "", "for", "cat_name", ",", "ds", "in", "dataset_dict", ".", "items", "(", ")", ":", "\n", "\n", "            ", "if", "cat_name", "!=", "'car'", ":", "\n", "                ", "continue", "\n", "\n", "", "cat_ids", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "ds", ")", ",", "amount", ",", "replace", "=", "False", ")", "\n", "\n", "cat_latent", "=", "[", "]", "\n", "cat_tnw", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "amount", ")", ":", "\n", "                ", "_", ",", "_", ",", "gt", ",", "_", "=", "ds", "[", "cat_ids", "[", "i", "]", "]", "\n", "\n", "np", ".", "save", "(", "join", "(", "results_dir", ",", "'temp_exp'", ",", "'gts'", ",", "f'{cat_name}_{i}'", ")", ",", "gt", ")", "\n", "\n", "existing_x", "=", "gt", "[", "gt", ".", "T", "[", "0", "]", ".", "argsort", "(", ")", "[", "1024", ":", "]", "]", "\n", "missing_x", "=", "gt", "[", "gt", ".", "T", "[", "0", "]", ".", "argsort", "(", ")", "[", ":", "1024", "]", "]", "\n", "\n", "existing_y", "=", "gt", "[", "gt", ".", "T", "[", "1", "]", ".", "argsort", "(", ")", "[", "1024", ":", "]", "]", "\n", "missing_y", "=", "gt", "[", "gt", ".", "T", "[", "1", "]", ".", "argsort", "(", ")", "[", ":", "1024", "]", "]", "\n", "\n", "gt_shape", "=", "list", "(", "torch", ".", "from_numpy", "(", "gt", ")", ".", "unsqueeze", "(", "0", ")", ".", "shape", ")", "\n", "\n", "existing", "=", "torch", ".", "from_numpy", "(", "existing_x", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "missing", "=", "torch", ".", "from_numpy", "(", "missing_x", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "_", ",", "latent", ",", "tnw", "=", "full_model", "(", "existing", ",", "missing", ",", "gt_shape", ",", "epoch", ",", "device", ")", "\n", "cat_latent", ".", "append", "(", "latent", ".", "cpu", "(", ")", ")", "\n", "cat_tnw", ".", "append", "(", "tnw", ".", "cpu", "(", ")", ")", "\n", "\n", "existing", "=", "torch", ".", "from_numpy", "(", "existing_y", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "missing", "=", "torch", ".", "from_numpy", "(", "missing_y", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "_", ",", "latent", ",", "tnw", "=", "full_model", "(", "existing", ",", "missing", ",", "gt_shape", ",", "epoch", ",", "device", ")", "\n", "cat_latent", ".", "append", "(", "latent", ".", "cpu", "(", ")", ")", "\n", "cat_tnw", ".", "append", "(", "tnw", ".", "cpu", "(", ")", ")", "\n", "\n", "", "cat_latent", "=", "torch", ".", "cat", "(", "cat_latent", ")", ".", "numpy", "(", ")", "\n", "cat_tnw", "=", "torch", ".", "cat", "(", "cat_tnw", ")", ".", "numpy", "(", ")", "\n", "\n", "cc_latent", "=", "np", ".", "concatenate", "(", "[", "latents", "[", "cat_name", "]", ",", "cat_latent", "]", ")", "\n", "cc_tnw", "=", "np", ".", "concatenate", "(", "[", "tnws", "[", "cat_name", "]", ",", "cat_tnw", "]", ")", "\n", "\n", "start_time", "=", "datetime", ".", "now", "(", ")", "\n", "print", "(", "start_time", ")", "\n", "latent_tsne", "=", "manifold", ".", "TSNE", "(", "n_components", "=", "2", ",", "init", "=", "'pca'", ")", ".", "fit_transform", "(", "cc_latent", ")", "\n", "print", "(", "datetime", ".", "now", "(", ")", "-", "start_time", ")", "\n", "cat_test_tsne", "=", "latent_tsne", "[", "-", "(", "2", "*", "amount", ")", ":", "]", "\n", "plt", ".", "plot", "(", "latent_tsne", ".", "T", "[", "0", "]", ",", "latent_tsne", ".", "T", "[", "1", "]", ",", "'o'", ",", "cat_test_tsne", ".", "T", "[", "0", "]", ",", "cat_test_tsne", ".", "T", "[", "1", "]", ",", "'o'", ")", "\n", "plt", ".", "title", "(", "'latent'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "np", ".", "save", "(", "join", "(", "results_dir", ",", "'temp_exp'", ",", "f'{cat_name}_latent_tsne'", ")", ",", "latent_tsne", ")", "\n", "\n", "start_time", "=", "datetime", ".", "now", "(", ")", "\n", "print", "(", "start_time", ")", "\n", "tnw_tsne", "=", "manifold", ".", "TSNE", "(", "n_components", "=", "2", ",", "init", "=", "'pca'", ")", ".", "fit_transform", "(", "cc_tnw", ")", "\n", "print", "(", "datetime", ".", "now", "(", ")", "-", "start_time", ")", "\n", "cat_test_tnw", "=", "tnw_tsne", "[", "-", "(", "2", "*", "amount", ")", ":", "]", "\n", "plt", ".", "plot", "(", "tnw_tsne", ".", "T", "[", "0", "]", ",", "tnw_tsne", ".", "T", "[", "1", "]", ",", "'o'", ",", "cat_test_tnw", ".", "T", "[", "0", "]", ",", "cat_test_tnw", ".", "T", "[", "1", "]", ",", "'o'", ")", "\n", "plt", ".", "title", "(", "'tnw'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "np", ".", "save", "(", "join", "(", "results_dir", ",", "'temp_exp'", ",", "f'{cat_name}_tnw_tsne'", ")", ",", "tnw_tsne", ")", "\n", "\n", "", "latent_tsne", "=", "np", ".", "load", "(", "join", "(", "results_dir", ",", "'temp_exp'", ",", "f'{cat_name}_latent_tsne.npy'", ")", ")", "\n", "tnw_tsne", "=", "np", ".", "load", "(", "join", "(", "results_dir", ",", "'temp_exp'", ",", "f'{cat_name}_tnw_tsne.npy'", ")", ")", "\n", "\n", "cat_test_tsne", "=", "latent_tsne", "[", "-", "(", "2", "*", "amount", ")", ":", "]", "\n", "cat_test_tnw", "=", "tnw_tsne", "[", "-", "(", "2", "*", "amount", ")", ":", "]", "\n", "\n", "latent_dist", "=", "np", ".", "zeros", "(", "amount", ")", "\n", "tnw_dist", "=", "np", ".", "zeros", "(", "amount", ")", "\n", "\n", "for", "i", "in", "range", "(", "amount", ")", ":", "\n", "            ", "latent_dist", "[", "i", "]", "=", "np", ".", "linalg", ".", "norm", "(", "cat_test_tsne", "[", "2", "*", "i", "]", "-", "cat_test_tsne", "[", "2", "*", "i", "+", "1", "]", ")", "\n", "tnw_dist", "[", "i", "]", "=", "np", ".", "linalg", ".", "norm", "(", "cat_test_tnw", "[", "2", "*", "i", "]", "-", "cat_test_tnw", "[", "2", "*", "i", "+", "1", "]", ")", "\n", "\n", "", "plt", ".", "plot", "(", "latent_tsne", ".", "T", "[", "0", "]", ",", "latent_tsne", ".", "T", "[", "1", "]", ",", "'o'", ",", "cat_test_tsne", ".", "T", "[", "0", "]", ",", "cat_test_tsne", ".", "T", "[", "1", "]", ",", "'o'", ")", "\n", "plt", ".", "title", "(", "'latent'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "plt", ".", "plot", "(", "tnw_tsne", ".", "T", "[", "0", "]", ",", "tnw_tsne", ".", "T", "[", "1", "]", ",", "'o'", ",", "cat_test_tnw", ".", "T", "[", "0", "]", "[", "0", "]", ",", "cat_test_tnw", ".", "T", "[", "1", "]", "[", "0", "]", ",", "'o'", ",", "\n", "cat_test_tnw", ".", "T", "[", "0", "]", "[", "1", "]", ",", "\n", "cat_test_tnw", ".", "T", "[", "1", "]", "[", "1", "]", ",", "'o'", ")", "\n", "plt", ".", "title", "(", "'tnw'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.core.experiments.temp_exp": [[392, 395], ["None"], "function", ["None"], ["", "", "def", "temp_exp", "(", "full_model", ",", "device", ",", "dataset_dict", ",", "results_dir", ",", "epoch", ")", ":", "\n", "# you may write your experiment here", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.losses.champfer_loss.ChamferLoss.__init__": [[7, 10], ["torch.Module.__init__", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.losses.champfer_loss.ChamferLoss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ChamferLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.losses.champfer_loss.ChamferLoss.forward": [[11, 18], ["champfer_loss.ChamferLoss.batch_pairwise_dist", "torch.min", "torch.min", "torch.min", "torch.min", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.min", "torch.min", "torch.min", "torch.min", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.losses.champfer_loss.ChamferLoss.batch_pairwise_dist"], ["", "def", "forward", "(", "self", ",", "preds", ",", "gts", ")", ":", "\n", "        ", "P", "=", "self", ".", "batch_pairwise_dist", "(", "gts", ",", "preds", ")", "\n", "mins", ",", "_", "=", "torch", ".", "min", "(", "P", ",", "1", ")", "\n", "loss_1", "=", "torch", ".", "sum", "(", "mins", ")", "\n", "mins", ",", "_", "=", "torch", ".", "min", "(", "P", ",", "2", ")", "\n", "loss_2", "=", "torch", ".", "sum", "(", "mins", ")", "\n", "return", "loss_1", "+", "loss_2", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.losses.champfer_loss.ChamferLoss.batch_pairwise_dist": [[19, 36], ["x.size", "y.size", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.arange().type", "torch.arange().type", "torch.arange().type", "torch.arange().type", "torch.arange().type", "torch.arange().type", "torch.arange().type", "torch.arange().type", "xx[].unsqueeze().expand_as", "yy[].unsqueeze().expand_as", "x.transpose", "y.transpose", "y.transpose", "torch.bmm.transpose", "torch.bmm.transpose", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "xx[].unsqueeze", "yy[].unsqueeze", "xx[].unsqueeze().expand_as.transpose"], "methods", ["None"], ["", "def", "batch_pairwise_dist", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "bs", ",", "num_points_x", ",", "points_dim", "=", "x", ".", "size", "(", ")", "\n", "_", ",", "num_points_y", ",", "_", "=", "y", ".", "size", "(", ")", "\n", "xx", "=", "torch", ".", "bmm", "(", "x", ",", "x", ".", "transpose", "(", "2", ",", "1", ")", ")", "\n", "yy", "=", "torch", ".", "bmm", "(", "y", ",", "y", ".", "transpose", "(", "2", ",", "1", ")", ")", "\n", "zz", "=", "torch", ".", "bmm", "(", "x", ",", "y", ".", "transpose", "(", "2", ",", "1", ")", ")", "\n", "if", "self", ".", "use_cuda", ":", "\n", "            ", "dtype", "=", "torch", ".", "cuda", ".", "LongTensor", "\n", "", "else", ":", "\n", "            ", "dtype", "=", "torch", ".", "LongTensor", "\n", "", "diag_ind_x", "=", "torch", ".", "arange", "(", "0", ",", "num_points_x", ")", ".", "type", "(", "dtype", ")", "\n", "diag_ind_y", "=", "torch", ".", "arange", "(", "0", ",", "num_points_y", ")", ".", "type", "(", "dtype", ")", "\n", "rx", "=", "xx", "[", ":", ",", "diag_ind_x", ",", "diag_ind_x", "]", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "\n", "zz", ".", "transpose", "(", "2", ",", "1", ")", ")", "\n", "ry", "=", "yy", "[", ":", ",", "diag_ind_y", ",", "diag_ind_y", "]", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "zz", ")", "\n", "P", "=", "rx", ".", "transpose", "(", "2", ",", "1", ")", "+", "ry", "-", "2", "*", "zz", "\n", "return", "P", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.util_scripts.generate_partial_dataset.generate_one_shapenet": [[17, 26], ["os.path.join", "utils.plyfile.load_ply", "range", "datasets.utils.dataset_generator.SlicedDatasetGenerator.generate_item", "utils.plyfile.quick_save_ply_file", "utils.plyfile.quick_save_ply_file", "os.path.join", "os.path.join", "str", "str"], "function", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.load_ply", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.dataset_generator.SlicedDatasetGenerator.generate_item", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.quick_save_ply_file", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.quick_save_ply_file"], ["@", "ray", ".", "remote", "\n", "def", "generate_one_shapenet", "(", "category", ":", "str", ",", "filename", ":", "str", ",", "dataset_path", ":", "str", ",", "num_samples", ":", "int", "=", "4", ")", ":", "\n", "    ", "pc_filepath", "=", "join", "(", "dataset_path", ",", "category", ",", "filename", ")", "\n", "points", "=", "load_ply", "(", "pc_filepath", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_samples", ")", ":", "\n", "        ", "existing", ",", "missing", "=", "SlicedDatasetGenerator", ".", "generate_item", "(", "points", ")", "\n", "quick_save_ply_file", "(", "existing", ",", "join", "(", "dataset_path", ",", "'slices'", ",", "'existing'", ",", "category", ",", "str", "(", "i", ")", "+", "'~'", "+", "filename", ")", ")", "\n", "quick_save_ply_file", "(", "missing", ",", "join", "(", "dataset_path", ",", "'slices'", ",", "'missing'", ",", "category", ",", "str", "(", "i", ")", "+", "'~'", "+", "filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.util_scripts.generate_partial_dataset.generate_one_3depn": [[28, 41], ["os.path.join", "numpy.array", "datasets.shapenet_3depn.sample_point_cloud_by_n", "utils.plyfile.quick_save_ply_file", "range", "os.path.join", "datasets.utils.dataset_generator.SlicedDatasetGenerator.generate_item", "utils.plyfile.quick_save_ply_file", "utils.plyfile.quick_save_ply_file", "trimesh.load", "os.path.join", "os.path.join", "str", "str"], "function", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.datasets.shapenet_3depn.sample_point_cloud_by_n", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.quick_save_ply_file", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.dataset_generator.SlicedDatasetGenerator.generate_item", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.quick_save_ply_file", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.quick_save_ply_file"], ["", "", "@", "ray", ".", "remote", "\n", "def", "generate_one_3depn", "(", "cat", ":", "str", ",", "name", ":", "str", ",", "dataset_path", ":", "str", ",", "pc_root", ":", "str", ",", "num_samples", ":", "int", "=", "4", ")", ":", "\n", "    ", "ply_path", "=", "join", "(", "pc_root", ",", "name", "+", "'.ply'", ")", "\n", "\n", "pc", "=", "np", ".", "array", "(", "trimesh", ".", "load", "(", "ply_path", ")", ".", "vertices", ")", "\n", "pc", "=", "sample_point_cloud_by_n", "(", "pc", ",", "2048", ")", "\n", "\n", "quick_save_ply_file", "(", "pc", ",", "join", "(", "dataset_path", ",", "'slices'", ",", "'gt'", ",", "cat", ",", "name", "+", "'.ply'", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_samples", ")", ":", "\n", "        ", "existing", ",", "missing", "=", "SlicedDatasetGenerator", ".", "generate_item", "(", "pc", ")", "\n", "quick_save_ply_file", "(", "existing", ",", "join", "(", "dataset_path", ",", "'slices'", ",", "'existing'", ",", "cat", ",", "str", "(", "i", ")", "+", "'~'", "+", "name", "+", "'.ply'", ")", ")", "\n", "quick_save_ply_file", "(", "missing", ",", "join", "(", "dataset_path", ",", "'slices'", ",", "'missing'", ",", "cat", ",", "str", "(", "i", ")", "+", "'~'", "+", "name", "+", "'.ply'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.util_scripts.generate_partial_dataset.main": [[43, 120], ["datasets.utils.shapenet_category_mapping.synth_id_to_category.keys", "ray.init", "ray.get", "ray.shutdown", "os.path.exists", "Exception", "os.makedirs", "os.makedirs", "cat_shape_names.items", "print", "print", "ray.init", "refined_shape_names.items", "ray.get", "ray.shutdown", "os.path.join", "os.path.join", "os.path.join", "os.cpu_count", "generate_one_shapenet.remote", "os.path.join", "os.path.join", "open", "csv.reader", "os.makedirs", "os.makedirs", "os.makedirs", "numpy.sum", "utils.util.get_filenames_by_cat().iterrows", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "len", "os.cpu_count", "ray_tasks.append", "os.path.exists", "os.path.exists", "refined_shape_names[].append", "len", "refined_shape_names.items", "generate_one_3depn.remote", "utils.util.get_filenames_by_cat", "cat_shape_names[].append", "refined_shape_names.values"], "function", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.util.get_filenames_by_cat"], ["", "", "def", "main", "(", "config", ":", "dict", ")", ":", "\n", "    ", "dataset_config", ":", "dict", "=", "config", "[", "'dataset'", "]", "\n", "\n", "dataset_path", ":", "str", "=", "dataset_config", "[", "'path'", "]", "\n", "dataset_name", ":", "str", "=", "dataset_config", "[", "'name'", "]", "\n", "num_samples", ":", "int", "=", "dataset_config", "[", "'num_samples'", "]", "\n", "\n", "if", "dataset_name", "==", "'shapenet'", ":", "\n", "        ", "if", "not", "exists", "(", "join", "(", "dataset_path", ")", ")", ":", "\n", "            ", "raise", "Exception", "(", "f'no ShapeNet dataset found at {dataset_path}, '", "\n", "f'please run `util_scripts/download_shapenet_2048.py` first'", ")", "\n", "\n", "", "for", "category", "in", "synth_id_to_category", ".", "keys", "(", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "join", "(", "dataset_path", ",", "'slices'", ",", "'existing'", ",", "category", ")", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "join", "(", "dataset_path", ",", "'slices'", ",", "'missing'", ",", "category", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "ray", ".", "init", "(", "num_cpus", "=", "os", ".", "cpu_count", "(", ")", ")", "\n", "ray", ".", "get", "(", "[", "generate_one_shapenet", ".", "remote", "(", "row", "[", "'category'", "]", ",", "row", "[", "'filename'", "]", ",", "dataset_path", ",", "num_samples", ")", "for", "_", ",", "row", "in", "\n", "get_filenames_by_cat", "(", "dataset_path", ")", ".", "iterrows", "(", ")", "]", ")", "\n", "ray", ".", "shutdown", "(", ")", "\n", "\n", "", "elif", "dataset_name", "==", "'3depn'", ":", "\n", "        ", "classes", ":", "list", "=", "[", "'02691156'", ",", "'03001627'", ",", "'04379243'", "]", "\n", "\n", "cat_pc_root", ":", "dict", "=", "{", "cat", ":", "join", "(", "dataset_path", ",", "'ShapeNetPointCloud'", ",", "cat", ")", "for", "cat", "in", "classes", "}", "\n", "cat_pc_raw_root", ":", "dict", "=", "{", "cat", ":", "join", "(", "dataset_path", ",", "'shapenet_dim32_sdf_pc'", ",", "cat", ")", "for", "cat", "in", "classes", "}", "\n", "cat_shape_names", ":", "dict", "=", "{", "cat", ":", "[", "]", "for", "cat", "in", "classes", "}", "\n", "\n", "with", "open", "(", "join", "(", "dataset_path", ",", "'shapenet-official-split.csv'", ")", ",", "'r'", ")", "as", "csv_file", ":", "\n", "            ", "csv_reader", "=", "csv", ".", "reader", "(", "csv_file", ",", "delimiter", "=", "','", ")", "\n", "line_cnt", "=", "0", "\n", "for", "row", "in", "csv_reader", ":", "\n", "                ", "if", "line_cnt", "==", "0", "or", "(", "row", "[", "1", "]", "not", "in", "classes", ")", ":", "\n", "                    ", "pass", "\n", "", "else", ":", "\n", "                    ", "if", "row", "[", "-", "1", "]", "in", "[", "'train'", ",", "'val'", "]", ":", "\n", "                        ", "cat_shape_names", "[", "row", "[", "1", "]", "]", ".", "append", "(", "row", "[", "-", "2", "]", ")", "\n", "", "", "line_cnt", "+=", "1", "\n", "\n", "", "", "refined_shape_names", ":", "dict", "=", "{", "cat", ":", "[", "]", "for", "cat", "in", "classes", "}", "\n", "for", "cat", ",", "shapes", "in", "cat_shape_names", ".", "items", "(", ")", ":", "\n", "            ", "for", "name", "in", "shapes", ":", "\n", "                ", "ply_path", "=", "join", "(", "cat_pc_root", "[", "cat", "]", ",", "name", "+", "'.ply'", ")", "\n", "path", "=", "join", "(", "cat_pc_raw_root", "[", "cat", "]", ",", "f'{name}__0__.ply'", ")", "\n", "if", "exists", "(", "ply_path", ")", "and", "exists", "(", "path", ")", ":", "\n", "                    ", "refined_shape_names", "[", "cat", "]", ".", "append", "(", "name", ")", "\n", "\n", "", "", "", "for", "cat", "in", "classes", ":", "\n", "            ", "os", ".", "makedirs", "(", "join", "(", "dataset_path", ",", "'slices'", ",", "'existing'", ",", "cat", ")", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "join", "(", "dataset_path", ",", "'slices'", ",", "'missing'", ",", "cat", ")", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "join", "(", "dataset_path", ",", "'slices'", ",", "'gt'", ",", "cat", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "print", "(", "'pc to process: '", ",", "np", ".", "sum", "(", "[", "len", "(", "v", ")", "for", "v", "in", "refined_shape_names", ".", "values", "(", ")", "]", ")", ")", "\n", "print", "(", "'pc to process: '", ",", "{", "k", ":", "len", "(", "v", ")", "for", "k", ",", "v", "in", "refined_shape_names", ".", "items", "(", ")", "}", ")", "\n", "\n", "ray", ".", "init", "(", "num_cpus", "=", "os", ".", "cpu_count", "(", ")", ")", "\n", "\n", "ray_tasks", "=", "[", "]", "\n", "for", "cat", ",", "shapes", "in", "refined_shape_names", ".", "items", "(", ")", ":", "\n", "            ", "for", "name", "in", "shapes", ":", "\n", "                ", "ray_tasks", ".", "append", "(", "generate_one_3depn", ".", "remote", "(", "cat", ",", "name", ",", "dataset_path", ",", "cat_pc_root", "[", "cat", "]", ",", "num_samples", ")", ")", "\n", "# single thread version", "\n", "# ply_path = join(cat_pc_root[cat], name + '.ply')", "\n", "#", "\n", "# pc = np.array(trimesh.load(ply_path).vertices)", "\n", "# pc = sample_point_cloud_by_n(pc, 2048)", "\n", "#", "\n", "# quick_save_ply_file(pc, join(dataset_path, 'slices', 'existing', cat, str(i) + '~' + name + '.ply'))", "\n", "#", "\n", "# for i in range(4):", "\n", "#     existing, missing = SlicedDatasetGenerator.generate_item(pc)", "\n", "#     quick_save_ply_file(existing, join(dataset_path, 'slices', 'existing', cat,", "\n", "#                                       str(i) + '~' + name + '.ply'))", "\n", "#     quick_save_ply_file(missing, join(dataset_path, 'slices', 'missing', cat,", "\n", "#                                         str(i) + '~' + name + '.ply'))", "\n", "", "", "ray", ".", "get", "(", "ray_tasks", ")", "\n", "ray", ".", "shutdown", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.util_scripts.generate_eval_gen_test_set.div_left_right_bin_search": [[11, 50], ["tqdm.tqdm", "enumerate", "utils.plyfile.load_ply", "init_plane_points.copy", "len", "os.path.join", "utils.plyfile.load_ply.T[].min", "utils.plyfile.load_ply.T[].max", "numpy.divide", "datasets.utils.dataset_generator.HyperPlane.get_plane_from_3_points().check_point", "utils.plyfile.quick_save_ply_file", "utils.plyfile.quick_save_ply_file", "utils.plyfile.quick_save_ply_file", "len", "len", "os.path.join", "os.path.join", "os.path.join", "len", "len", "utils.plyfile.quick_save_ply_file", "utils.plyfile.quick_save_ply_file", "utils.plyfile.quick_save_ply_file", "datasets.utils.dataset_generator.HyperPlane.get_plane_from_3_points", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.load_ply", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.dataset_generator.HyperPlane.check_point", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.quick_save_ply_file", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.quick_save_ply_file", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.quick_save_ply_file", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.quick_save_ply_file", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.quick_save_ply_file", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.quick_save_ply_file", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.dataset_generator.HyperPlane.get_plane_from_3_points"], ["def", "div_left_right_bin_search", "(", "dataset_dir", ",", "init_plane_points", ",", "pc_paths", ")", ":", "\n", "    ", "for", "i", ",", "pc_path", "in", "tqdm", "(", "enumerate", "(", "pc_paths", ")", ",", "total", "=", "len", "(", "pc_paths", ")", ")", ":", "\n", "\n", "        ", "pc", "=", "load_ply", "(", "join", "(", "dataset_dir", ",", "pc_path", ")", ")", "\n", "\n", "points", "=", "init_plane_points", ".", "copy", "(", ")", "\n", "\n", "l", ",", "r", "=", "pc", ".", "T", "[", "1", "]", ".", "min", "(", ")", ",", "pc", ".", "T", "[", "1", "]", ".", "max", "(", ")", "\n", "\n", "counter", "=", "0", "\n", "\n", "while", "True", ":", "\n", "\n", "            ", "m", "=", "np", ".", "divide", "(", "l", "+", "r", ",", "2", ")", "\n", "\n", "points", "[", "0", "]", "[", "1", "]", "=", "m", "\n", "points", "[", "1", "]", "[", "1", "]", "=", "m", "\n", "points", "[", "2", "]", "[", "1", "]", "=", "m", "\n", "\n", "right", "=", "HyperPlane", ".", "get_plane_from_3_points", "(", "points", ")", ".", "check_point", "(", "pc", ")", ">", "0", "\n", "right_points", "=", "pc", "[", "right", "]", "\n", "left_points", "=", "pc", "[", "~", "right", "]", "\n", "\n", "counter", "+=", "1", "\n", "if", "counter", "==", "100000000", ":", "\n", "                ", "quick_save_ply_file", "(", "right_points", ",", "join", "(", "dataset_dir", ",", "'test_gen'", ",", "'right'", ",", "pc_path", ")", ")", "\n", "quick_save_ply_file", "(", "left_points", ",", "join", "(", "dataset_dir", ",", "'test_gen'", ",", "'left'", ",", "pc_path", ")", ")", "\n", "quick_save_ply_file", "(", "pc", ",", "join", "(", "dataset_dir", ",", "'test_gen'", ",", "'gt'", ",", "pc_path", ")", ")", "\n", "break", "\n", "\n", "", "if", "len", "(", "left_points", ")", ">", "len", "(", "right_points", ")", ":", "\n", "                ", "l", "=", "m", "\n", "", "elif", "len", "(", "left_points", ")", "<", "len", "(", "right_points", ")", ":", "\n", "                ", "r", "=", "m", "\n", "", "else", ":", "\n", "                ", "quick_save_ply_file", "(", "left_points", ",", "join", "(", "dataset_dir", ",", "'test_gen'", ",", "'left'", ",", "pc_path", ")", ")", "\n", "quick_save_ply_file", "(", "right_points", ",", "join", "(", "dataset_dir", ",", "'test_gen'", ",", "'right'", ",", "pc_path", ")", ")", "\n", "quick_save_ply_file", "(", "pc", ",", "join", "(", "dataset_dir", ",", "'test_gen'", ",", "'gt'", ",", "pc_path", ")", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.util_scripts.generate_eval_gen_test_set.div_left_right_min_y": [[52, 62], ["tqdm.tqdm", "enumerate", "utils.plyfile.load_ply", "utils.plyfile.quick_save_ply_file", "utils.plyfile.quick_save_ply_file", "utils.plyfile.quick_save_ply_file", "len", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "utils.plyfile.load_ply.T[].argsort", "utils.plyfile.load_ply.T[].argsort"], "function", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.load_ply", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.quick_save_ply_file", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.quick_save_ply_file", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.quick_save_ply_file"], ["", "", "", "", "def", "div_left_right_min_y", "(", "dataset_dir", ",", "pc_paths", ")", ":", "\n", "    ", "for", "i", ",", "pc_path", "in", "tqdm", "(", "enumerate", "(", "pc_paths", ")", ",", "total", "=", "len", "(", "pc_paths", ")", ")", ":", "\n", "        ", "pc", "=", "load_ply", "(", "join", "(", "dataset_dir", ",", "pc_path", ")", ")", "\n", "\n", "right_points", "=", "pc", "[", "pc", ".", "T", "[", "1", "]", ".", "argsort", "(", ")", "[", "1024", ":", "]", "]", "\n", "left_points", "=", "pc", "[", "pc", ".", "T", "[", "1", "]", ".", "argsort", "(", ")", "[", ":", "1024", "]", "]", "\n", "\n", "quick_save_ply_file", "(", "left_points", ",", "join", "(", "dataset_dir", ",", "'test_gen'", ",", "'left'", ",", "pc_path", ")", ")", "\n", "quick_save_ply_file", "(", "right_points", ",", "join", "(", "dataset_dir", ",", "'test_gen'", ",", "'right'", ",", "pc_path", ")", ")", "\n", "quick_save_ply_file", "(", "pc", ",", "join", "(", "dataset_dir", ",", "'test_gen'", ",", "'gt'", ",", "pc_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.util_scripts.generate_eval_gen_test_set.main": [[64, 94], ["numpy.zeros", "generate_eval_gen_test_set.div_left_right_min_y", "open", "os.makedirs", "os.makedirs", "os.makedirs", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "not_existed_pc.append", "not_1024.append", "line.strip", "os.path.exists", "os.path.exists", "os.path.join", "os.path.join", "utils.plyfile.load_ply", "os.path.join"], "function", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.util_scripts.generate_eval_gen_test_set.div_left_right_min_y", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.load_ply"], ["", "", "def", "main", "(", "config", ")", ":", "\n", "    ", "dataset_dir", "=", "config", "[", "'dataset'", "]", "[", "'path'", "]", "\n", "\n", "with", "open", "(", "join", "(", "dataset_dir", ",", "'test.list'", ")", ")", "as", "file", ":", "\n", "        ", "pc_paths", "=", "[", "line", ".", "strip", "(", ")", "+", "'.ply'", "for", "line", "in", "file", "]", "\n", "\n", "", "plane_points", "=", "np", ".", "zeros", "(", "(", "3", ",", "3", ")", ")", "\n", "plane_points", "[", "1", "]", "[", "2", "]", "=", "1", "\n", "plane_points", "[", "2", "]", "[", "0", "]", "=", "1", "\n", "\n", "for", "cat", "in", "[", "'02691156'", ",", "'02933112'", ",", "'02958343'", ",", "'03001627'", ",", "'03636649'", ",", "'04256520'", ",", "'04379243'", ",", "'04530566'", "]", ":", "\n", "        ", "makedirs", "(", "join", "(", "dataset_dir", ",", "'test_gen'", ",", "'left'", ",", "cat", ")", ",", "exist_ok", "=", "True", ")", "\n", "makedirs", "(", "join", "(", "dataset_dir", ",", "'test_gen'", ",", "'right'", ",", "cat", ")", ",", "exist_ok", "=", "True", ")", "\n", "makedirs", "(", "join", "(", "dataset_dir", ",", "'test_gen'", ",", "'gt'", ",", "cat", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "div_left_right_min_y", "(", "dataset_dir", ",", "pc_paths", ")", "\n", "\n", "not_existed_pc", "=", "[", "]", "\n", "\n", "for", "pc_path", "in", "pc_paths", ":", "\n", "        ", "if", "not", "(", "exists", "(", "join", "(", "dataset_dir", ",", "'test_gen'", ",", "'left'", ",", "pc_path", ")", ")", "\n", "and", "exists", "(", "join", "(", "dataset_dir", ",", "'test_gen'", ",", "'left'", ",", "pc_path", ")", ")", ")", ":", "\n", "            ", "not_existed_pc", ".", "append", "(", "pc_path", ")", "\n", "\n", "# div_left_right_bin_search(dataset_dir, plane_points, not_existed_pc)", "\n", "\n", "", "", "not_1024", "=", "[", "]", "\n", "for", "pc_path", "in", "pc_paths", ":", "\n", "        ", "if", "load_ply", "(", "join", "(", "dataset_dir", ",", "'test_gen'", ",", "'left'", ",", "pc_path", ")", ")", ".", "shape", "[", "0", "]", "!=", "1024", ":", "\n", "            ", "not_1024", ".", "append", "(", "pc_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.util_scripts.download_shapenet_2048.main": [[10, 41], ["os.path.exists", "os.makedirs", "urllib.request.urlopen", "os.path.join", "print", "os.remove", "os.path.join", "os.listdir", "shutil.rmtree", "Exception", "open", "urllib.request.urlopen.read", "f.write", "zipfile.ZipFile", "zip_f.extractall", "shutil.move", "url.rpartition", "os.path.join"], "function", ["home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyData.read", "home.repos.pwc.inspect_result.gmum_3d-point-clouds-autocomplete.utils.plyfile.PlyData.write"], ["def", "main", "(", "config", ")", ":", "\n", "    ", "dataset_config", ":", "dict", "=", "config", "[", "'dataset'", "]", "\n", "dataset_path", ":", "str", "=", "dataset_config", "[", "'path'", "]", "\n", "\n", "if", "exists", "(", "dataset_path", ")", ":", "\n", "        ", "raise", "Exception", "(", "f'directory {dataset_path} already exists'", ")", "\n", "\n", "", "makedirs", "(", "dataset_path", ")", "\n", "\n", "url", "=", "'https://www.dropbox.com/s/vmsdrae6x5xws1v/shape_net_core_uniform_samples_2048.zip?dl=1'", "\n", "\n", "data", "=", "urllib", ".", "request", ".", "urlopen", "(", "url", ")", "\n", "filename", "=", "url", ".", "rpartition", "(", "'/'", ")", "[", "2", "]", "[", ":", "-", "5", "]", "\n", "file_path", "=", "join", "(", "dataset_path", ",", "filename", ")", "\n", "with", "open", "(", "file_path", ",", "mode", "=", "'wb'", ")", "as", "f", ":", "\n", "        ", "d", "=", "data", ".", "read", "(", ")", "\n", "f", ".", "write", "(", "d", ")", "\n", "\n", "", "print", "(", "'Extracting...'", ")", "\n", "with", "ZipFile", "(", "file_path", ",", "mode", "=", "'r'", ")", "as", "zip_f", ":", "\n", "        ", "zip_f", ".", "extractall", "(", "dataset_path", ")", "\n", "\n", "", "remove", "(", "file_path", ")", "\n", "\n", "extracted_dir", "=", "join", "(", "dataset_path", ",", "\n", "'shape_net_core_uniform_samples_2048'", ")", "\n", "for", "d", "in", "listdir", "(", "extracted_dir", ")", ":", "\n", "        ", "shutil", ".", "move", "(", "src", "=", "join", "(", "extracted_dir", ",", "d", ")", ",", "\n", "dst", "=", "dataset_path", ")", "\n", "\n", "", "shutil", ".", "rmtree", "(", "extracted_dir", ")", "\n", "\n"]]}