{"home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.write": [[17, 43], ["open", "w.write", "w.write", "w.write", "w.write", "w.write", "w.write", "w.write", "w.write", "w.write", "w.write", "w.write", "w.write", "w.write", "model.vina_hbond_coeff.data.cpu().numpy", "model.vina_hydrophobic_coeff.data.cput().numpy", "model.rotor_coeff.data.cpu().numpy", "w.write", "extra_data.keys", "w.write", "w.write", "model.vina_hbond_coeff.data.cpu", "model.vina_hydrophobic_coeff.data.cput", "model.rotor_coeff.data.cpu", "pred.sum"], "function", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.write", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.write", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.write", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.write", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.write", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.write", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.write", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.write", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.write", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.write", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.write", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.write", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.write", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.write", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.write", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.write"], ["def", "write", "(", "of", ",", "model", ",", "pred", ",", "time", ",", "args", ",", "extra_data", "=", "None", ")", ":", "\n", "    ", "with", "open", "(", "f\"{of}\"", ",", "\"w\"", ")", "as", "w", ":", "\n", "        ", "w", ".", "write", "(", "\"#Parameter\\n\"", ")", "\n", "w", ".", "write", "(", "f\"Local opt: {args.local_opt}\\n\"", ")", "\n", "hbond_coeff", "=", "model", ".", "vina_hbond_coeff", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "hydrophobic_coeff", "=", "model", ".", "vina_hydrophobic_coeff", ".", "data", ".", "cput", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "rotor_coeff", "=", "model", ".", "rotor_coeff", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "w", ".", "write", "(", "f\"Hbond coeff: {hbond_coeff:.3f}\\n\"", ")", "\n", "w", ".", "write", "(", "f\"Hydrophobic coeff: {hydrophobic_coeff:.3f}\\n\"", ")", "\n", "w", ".", "write", "(", "f\"Rotor coeff: {rotor_coeff:.3f}\\n\"", ")", "\n", "w", ".", "write", "(", "\"\\n\"", ")", "\n", "\n", "if", "extra_data", "is", "not", "None", ":", "\n", "            ", "w", ".", "write", "(", "\"#Extra data\\n\"", ")", "\n", "for", "k", "in", "extra_data", ".", "keys", "(", ")", ":", "\n", "                ", "w", ".", "write", "(", "f\"{k}: {extra_data[k]}\\n\"", ")", "\n", "", "w", ".", "write", "(", "\"\\n\"", ")", "\n", "\n", "", "w", ".", "write", "(", "\"#Prediction\\n\"", ")", "\n", "w", ".", "write", "(", "f\"Total prediction: {pred.sum():.3f} kcal/mol\\n\"", ")", "\n", "w", ".", "write", "(", "f\"VDW : {pred[0]:.3f} kcal/mol\\n\"", ")", "\n", "w", ".", "write", "(", "f\"Hbond : {pred[1]:.3f} kcal/mol\\n\"", ")", "\n", "w", ".", "write", "(", "f\"Metal : {pred[2]:.3f} kcal/mol\\n\"", ")", "\n", "w", ".", "write", "(", "f\"Hydrophobic : {pred[3]:.3f} kcal/mol\\n\"", ")", "\n", "w", ".", "write", "(", "f\"\\nTime : {time} s\\n\"", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.cal_vdw_energy": [[45, 55], ["torch.pow", "energy.sum.clamp", "energy.sum.sum", "torch.pow", "energy.sum.sum"], "function", ["None"], ["", "def", "cal_vdw_energy", "(", "dm", ",", "dm_0", ",", "vdw_A", ",", "vdw_N", ",", "is_last", "=", "False", ")", ":", "\n", "    ", "vdw1", "=", "torch", ".", "pow", "(", "dm_0", "/", "dm", ",", "2", "*", "vdw_N", ")", "\n", "vdw2", "=", "-", "2", "*", "torch", ".", "pow", "(", "dm_0", "/", "dm", ",", "vdw_N", ")", "\n", "energy", "=", "vdw1", "+", "vdw2", "\n", "energy", "=", "energy", ".", "clamp", "(", "max", "=", "100", ")", "\n", "energy", "=", "vdw_A", "*", "energy", "\n", "if", "is_last", ":", "\n", "        ", "return", "energy", ".", "sum", "(", "-", "1", ")", "[", "0", "]", "\n", "", "energy", "=", "energy", ".", "sum", "(", ")", "\n", "return", "energy", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.cal_hbond_energy": [[57, 73], ["energy.sum.clamp", "energy.sum.detach", "energy.detach.sum", "energy.sum.sum", "pair.sum.unsqueeze", "energy.sum.sum"], "function", ["None"], ["", "def", "cal_hbond_energy", "(", "dm", ",", "dm_0", ",", "coeff", ",", "A", ",", "is_last", "=", "False", ")", ":", "\n", "    ", "eff_dm", "=", "dm", "-", "dm_0", "\n", "energy", "=", "eff_dm", "*", "A", "/", "-", "0.7", "\n", "energy", "=", "energy", ".", "clamp", "(", "min", "=", "0.0", ",", "max", "=", "1.0", ")", "\n", "\n", "pair", "=", "energy", ".", "detach", "(", ")", "\n", "pair", "[", "pair", ">", "0", "]", "=", "1", "\n", "n_ligand_hbond", "=", "pair", ".", "sum", "(", "2", ")", "\n", "n_ligand_hbond", "[", "n_ligand_hbond", "<", "0.001", "]", "=", "1", "\n", "\n", "energy", "=", "energy", "/", "(", "n_ligand_hbond", ".", "unsqueeze", "(", "-", "1", ")", ")", "\n", "energy", "=", "energy", "*", "-", "coeff", "\n", "if", "is_last", ":", "\n", "        ", "return", "energy", ".", "sum", "(", "-", "1", ")", "[", "0", "]", "\n", "", "energy", "=", "energy", ".", "sum", "(", ")", "\n", "return", "energy", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.cal_hydrophobic_energy": [[75, 84], ["energy.sum.clamp", "energy.sum.sum", "energy.sum.sum"], "function", ["None"], ["", "def", "cal_hydrophobic_energy", "(", "dm", ",", "dm_0", ",", "coeff", ",", "A", ",", "is_last", "=", "False", ")", ":", "\n", "    ", "eff_dm", "=", "dm", "-", "dm_0", "\n", "energy", "=", "(", "-", "eff_dm", "+", "1.5", ")", "*", "A", "\n", "energy", "=", "energy", ".", "clamp", "(", "min", "=", "0.0", ",", "max", "=", "1.0", ")", "\n", "energy", "=", "energy", "*", "-", "coeff", "\n", "if", "is_last", ":", "\n", "        ", "return", "energy", ".", "sum", "(", "-", "1", ")", "[", "0", "]", "\n", "", "energy", "=", "energy", ".", "sum", "(", ")", "\n", "return", "energy", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.cal_internal_vdw_energy": [[86, 96], ["dm.squeeze.squeeze", "torch.pow", "energy.sum.sum", "torch.pow", "energy.sum.sum"], "function", ["None"], ["", "def", "cal_internal_vdw_energy", "(", "dm", ",", "topological_dm", ",", "epsilon", ",", "sigma", ",", "is_last", "=", "False", ")", ":", "\n", "    ", "dm", "=", "dm", ".", "squeeze", "(", "0", ")", "\n", "energy1", "=", "torch", ".", "pow", "(", "sigma", "/", "dm", ",", "12", ")", "\n", "energy2", "=", "-", "2", "*", "torch", ".", "pow", "(", "sigma", "/", "dm", ",", "6", ")", "\n", "energy", "=", "epsilon", "*", "(", "energy1", "+", "energy2", ")", "\n", "energy", "[", "topological_dm", "<", "4", "]", "=", "0.0", "\n", "if", "is_last", ":", "\n", "        ", "return", "energy", ".", "sum", "(", "-", "1", ")", "[", "0", "]", "\n", "", "energy", "=", "energy", ".", "sum", "(", ")", "\n", "return", "energy", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.make_ring_matrix": [[98, 108], ["rdkit.Chem.GetSymmSSSR", "m.GetNumAtoms", "numpy.zeros"], "function", ["None"], ["", "def", "make_ring_matrix", "(", "m", ")", ":", "\n", "    ", "ssr", "=", "Chem", ".", "GetSymmSSSR", "(", "m", ")", "\n", "natoms", "=", "m", ".", "GetNumAtoms", "(", ")", "\n", "retval", "=", "np", ".", "zeros", "(", "(", "natoms", ",", "natoms", ")", ")", "\n", "for", "indice", "in", "ssr", ":", "\n", "        ", "for", "i1", "in", "indice", ":", "\n", "            ", "for", "i2", "in", "indice", ":", "\n", "                ", "retval", "[", "i1", ",", "i2", "]", "=", "1", "\n", "#print (retval)", "\n", "", "", "", "return", "retval", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.make_conjugate_matrix": [[110, 124], ["ResonanceMolSupplier", "m.GetNumAtoms", "numpy.zeros", "numpy.zeros", "range", "range", "ResonanceMolSupplier.GetAtomConjGrpIdx", "range"], "function", ["None"], ["", "def", "make_conjugate_matrix", "(", "m", ")", ":", "\n", "    ", "from", "rdkit", ".", "Chem", ".", "rdchem", "import", "ResonanceMolSupplier", "\n", "suppl", "=", "ResonanceMolSupplier", "(", "m", ")", "\n", "natoms", "=", "m", ".", "GetNumAtoms", "(", ")", "\n", "retval", "=", "np", ".", "zeros", "(", "(", "natoms", ",", "natoms", ")", ")", "\n", "groups", "=", "np", ".", "zeros", "(", "(", "natoms", ",", ")", ")", "\n", "for", "i", "in", "range", "(", "natoms", ")", ":", "\n", "        ", "groups", "[", "i", "]", "=", "suppl", ".", "GetAtomConjGrpIdx", "(", "i", ")", "\n", "", "for", "i", "in", "range", "(", "natoms", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "natoms", ")", ":", "\n", "            ", "if", "groups", "[", "i", "]", "==", "groups", "[", "j", "]", "and", "groups", "[", "i", "]", "<", "natoms", ":", "\n", "                ", "retval", "[", "i", ",", "j", "]", "=", "1", "\n", "\n", "", "", "", "return", "retval", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.distance_fix_pair": [[126, 138], ["rdkit.Chem.rdmolops.GetAdjacencyMatrix().astype", "numpy.eye().astype", "numpy.matmul", "make_ring_matrix().astype", "make_conjugate_matrix().astype", "numpy.matmul", "rdkit.Chem.rdmolops.GetAdjacencyMatrix", "numpy.eye", "predict.make_ring_matrix", "predict.make_conjugate_matrix", "len"], "function", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.make_ring_matrix", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.make_conjugate_matrix"], ["", "def", "distance_fix_pair", "(", "m", ")", ":", "\n", "# adjacency matrix", "\n", "    ", "adj", "=", "GetAdjacencyMatrix", "(", "m", ")", ".", "astype", "(", "float", ")", "\n", "adj", "+=", "np", ".", "eye", "(", "len", "(", "adj", ")", ")", ".", "astype", "(", "float", ")", "\n", "adj_sec_neighbor", "=", "np", ".", "matmul", "(", "adj", ",", "adj", ")", "\n", "adj", "+=", "make_ring_matrix", "(", "m", ")", ".", "astype", "(", "float", ")", "\n", "adj", "+=", "make_conjugate_matrix", "(", "m", ")", ".", "astype", "(", "float", ")", "\n", "#adj[adj>1.0] = 1.0", "\n", "adj", "=", "np", ".", "matmul", "(", "adj", ",", "adj", ")", "\n", "adj", "+=", "adj_sec_neighbor", "\n", "adj", "[", "adj", ">", "1", "]", "=", "1", "\n", "return", "adj", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.write_molecule": [[140, 150], ["range", "rdkit.Chem.SDWriter", "Chem.SDWriter.write", "Chem.SDWriter.close", "m.GetConformers", "m.GetNumAtoms", "c.SetAtomPosition", "pos[].tolist"], "function", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.write"], ["", "def", "write_molecule", "(", "filename", ",", "m", ",", "pos", ")", ":", "\n", "    ", "if", "pos", "is", "not", "None", ":", "\n", "        ", "c", "=", "m", ".", "GetConformers", "(", ")", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "m", ".", "GetNumAtoms", "(", ")", ")", ":", "\n", "            ", "c", ".", "SetAtomPosition", "(", "i", ",", "pos", "[", "i", "]", ".", "tolist", "(", ")", ")", "\n", "", "", "if", "filename", "[", "-", "4", ":", "]", "==", "\".sdf\"", ":", "\n", "        ", "w", "=", "Chem", ".", "SDWriter", "(", "filename", ")", "\n", "w", ".", "write", "(", "m", ")", "\n", "w", ".", "close", "(", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.local_optimize": [[152, 275], ["time.time", "utils.read_molecule", "utils.extract_binding_pocket", "dataset.mol_to_feature", "dataset.tensor_collate_fn", "utils.dic_to_device", "torch.optim.Adam", "range", "predict.cal_vdw_energy", "predict.cal_hbond_energy", "predict.cal_hbond_energy", "predict.cal_hydrophobic_energy", "torch.stack", "pred.data.cpu().numpy.data.cpu().numpy", "torch.stack.data.cpu().numpy", "numpy.sum", "internal_vdw.detach.item", "cal_internal_vdw_energy.item", "torch.pow().squeeze.item", "numpy.abs().sum().item", "time.time", "predict.write", "predict.write_molecule", "torch.no_grad", "model.get_embedding_vector", "h1.unsqueeze().repeat", "h2.unsqueeze().repeat", "torch.cat", "model.cal_vdw_interaction_B().squeeze", "vdw_radius1.unsqueeze().repeat", "vdw_radius2.unsqueeze().repeat", "model.cal_vdw_interaction_A().squeeze", "dataset.get_epsilon_sigma", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "model.cal_distance_matrix", "torch.from_numpy", "torch.optim.Adam.zero_grad", "model.cal_distance_matrix", "model.cal_distance_matrix", "predict.cal_vdw_energy", "predict.cal_hbond_energy", "predict.cal_hbond_energy", "predict.cal_hydrophobic_energy", "predict.cal_internal_vdw_energy", "torch.pow().squeeze", "loss.backward", "torch.optim.Adam.step", "pos1.data.cpu().numpy", "pos1.clone().detach.data.cpu().numpy", "numpy.sum", "numpy.sum", "h2.size", "h1.size", "vdw_radius2.size", "vdw_radius1.size", "predict.distance_fix_pair", "rdkit.Chem.rdmolops.GetDistanceMatrix", "cal_internal_vdw_energy.detach", "torch.stack", "pos1.clone().detach", "torch.max", "pred.data.cpu().numpy.data.cpu", "torch.stack.data.cpu", "numpy.abs().sum", "h1.unsqueeze", "h2.unsqueeze", "model.cal_vdw_interaction_B", "vdw_radius1.unsqueeze", "vdw_radius2.unsqueeze", "model.cal_vdw_interaction_A", "torch.pow", "pos1.data.cpu", "pos1.clone().detach.data.cpu", "pos1.clone", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.utils.read_molecule", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.utils.extract_binding_pocket", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.mol_to_feature", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.tensor_collate_fn", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.utils.dic_to_device", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.cal_vdw_energy", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.cal_hbond_energy", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.cal_hbond_energy", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.cal_hydrophobic_energy", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.write", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.write_molecule", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.DTIHarmonic.get_embedding_vector", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.get_epsilon_sigma", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.GNN.cal_distance_matrix", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.GNN.cal_distance_matrix", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.GNN.cal_distance_matrix", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.cal_vdw_energy", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.cal_hbond_energy", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.cal_hbond_energy", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.cal_hydrophobic_energy", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.cal_internal_vdw_energy", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.distance_fix_pair"], ["", "def", "local_optimize", "(", "model", ",", "lf", ",", "pf", ",", "of", ",", "loof", ",", "args", ",", "device", ")", ":", "\n", "    ", "st", "=", "time", ".", "time", "(", ")", "\n", "\n", "# read ligand and protein. Then, convert to rdkit object", "\n", "m1", "=", "utils", ".", "read_molecule", "(", "lf", ")", "\n", "m2", "=", "utils", ".", "extract_binding_pocket", "(", "m1", ",", "pf", ")", "\n", "\n", "# preprocess: convert rdkit mol obj to feature", "\n", "sample", "=", "dataset", ".", "mol_to_feature", "(", "m1", ",", "m1", ",", "m2", ",", "None", ",", "0.0", ")", "\n", "sample", "[", "\"affinity\"", "]", "=", "0.0", "\n", "sample", "[", "\"key\"", "]", "=", "\"None\"", "\n", "sample", "=", "dataset", ".", "tensor_collate_fn", "(", "[", "sample", "]", ")", "\n", "sample", "=", "utils", ".", "dic_to_device", "(", "sample", ",", "device", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# get embedding vector", "\n", "        ", "h1", ",", "h2", "=", "model", ".", "get_embedding_vector", "(", "sample", ")", "\n", "h1_repeat", "=", "h1", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "h2", ".", "size", "(", "1", ")", ",", "1", ")", "\n", "h2_repeat", "=", "h2", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "h1", ".", "size", "(", "1", ")", ",", "1", ",", "1", ")", "\n", "h", "=", "torch", ".", "cat", "(", "[", "h1_repeat", ",", "h2_repeat", "]", ",", "-", "1", ")", "\n", "\n", "# vdw radius parameter", "\n", "dev_vdw_radius", "=", "model", ".", "cal_vdw_interaction_B", "(", "h", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "dev_vdw_radius", "=", "dev_vdw_radius", "*", "args", ".", "dev_vdw_radius", "\n", "vdw_radius1", ",", "vdw_radius2", "=", "sample", "[", "\"vdw_radius1\"", "]", ",", "sample", "[", "\"vdw_radius2\"", "]", "\n", "vdw_radius1_repeat", "=", "vdw_radius1", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "vdw_radius2", ".", "size", "(", "1", ")", ")", "\n", "vdw_radius2_repeat", "=", "vdw_radius2", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "vdw_radius1", ".", "size", "(", "1", ")", ",", "1", ")", "\n", "sum_vdw_radius", "=", "vdw_radius1_repeat", "+", "vdw_radius2_repeat", "+", "dev_vdw_radius", "\n", "\n", "# vdw interaction", "\n", "vdw_N", "=", "args", ".", "vdw_N", "\n", "vdw_A", "=", "model", ".", "cal_vdw_interaction_A", "(", "h", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "vdw_A", "=", "vdw_A", "*", "(", "args", ".", "max_vdw_interaction", "-", "args", ".", "min_vdw_interaction", ")", "\n", "vdw_A", "=", "vdw_A", "+", "args", ".", "min_vdw_interaction", "\n", "\n", "#hbond and hydrophobic", "\n", "hbond_coeff", "=", "model", ".", "vina_hbond_coeff", "*", "model", ".", "vina_hbond_coeff", "\n", "hydrophobic_coeff", "=", "model", ".", "vina_hydrophobic_coeff", "*", "model", ".", "vina_hydrophobic_coeff", "\n", "\n", "pos1", ",", "pos2", ",", "A_int", "=", "sample", "[", "\"pos1\"", "]", ",", "sample", "[", "\"pos2\"", "]", ",", "sample", "[", "\"A_int\"", "]", "\n", "epsilon", ",", "sigma", "=", "dataset", ".", "get_epsilon_sigma", "(", "m1", ",", "m1", ",", "False", ")", "\n", "epsilon", "=", "torch", ".", "from_numpy", "(", "epsilon", ")", "\n", "sigma", "=", "torch", ".", "from_numpy", "(", "sigma", ")", "\n", "\n", "fix_pair", "=", "torch", ".", "from_numpy", "(", "distance_fix_pair", "(", "m1", ")", ")", "\n", "initial_dm_internal", "=", "model", ".", "cal_distance_matrix", "(", "pos1", ",", "pos1", ",", "0.5", ")", "\n", "topological_dm", "=", "torch", ".", "from_numpy", "(", "GetDistanceMatrix", "(", "m1", ")", ")", "\n", "\n", "# optimizer", "\n", "", "pos1", ".", "requires_grad", "=", "True", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "pos1", "]", ",", "lr", "=", "0.01", ")", "\n", "\n", "for", "iter", "in", "range", "(", "100", ")", ":", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "dm", "=", "model", ".", "cal_distance_matrix", "(", "pos1", ",", "pos2", ",", "0.5", ")", "\n", "dm_internal", "=", "model", ".", "cal_distance_matrix", "(", "pos1", ",", "pos1", ",", "0.1", ")", "\n", "\n", "vdw", "=", "cal_vdw_energy", "(", "dm", ",", "sum_vdw_radius", ",", "vdw_A", ",", "vdw_N", ")", "\n", "hbond1", "=", "cal_hbond_energy", "(", "dm", ",", "sum_vdw_radius", ",", "hbond_coeff", ",", "A_int", "[", ":", ",", "1", "]", ")", "\n", "hbond2", "=", "cal_hbond_energy", "(", "\n", "dm", ",", "sum_vdw_radius", ",", "hbond_coeff", ",", "A_int", "[", ":", ",", "-", "1", "]", ")", "\n", "hydrophobic", "=", "cal_hydrophobic_energy", "(", "dm", ",", "sum_vdw_radius", ",", "\n", "hydrophobic_coeff", ",", "A_int", "[", ":", ",", "-", "2", "]", ")", "\n", "\n", "# constraint", "\n", "internal_vdw", "=", "cal_internal_vdw_energy", "(", "dm_internal", ",", "topological_dm", ",", "\n", "epsilon", ",", "sigma", ")", "\n", "dev_fix_distance", "=", "torch", ".", "pow", "(", "\n", "initial_dm_internal", "-", "dm_internal", ",", "2", ")", ".", "squeeze", "(", ")", "\n", "dev_fix_distance", "=", "(", "dev_fix_distance", "*", "fix_pair", ")", ".", "sum", "(", ")", "\n", "\n", "if", "iter", "==", "0", ":", "\n", "            ", "initial_internal_vdw", "=", "internal_vdw", ".", "detach", "(", ")", "\n", "initial_pred", "=", "torch", ".", "stack", "(", "[", "vdw", ",", "hbond1", ",", "hbond2", ",", "hydrophobic", "]", ")", "\n", "initial_pos1", "=", "pos1", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "\n", "# loss", "\n", "", "loss", "=", "vdw", "+", "hbond1", "+", "hbond2", "+", "hydrophobic", "\n", "loss", "=", "loss", "+", "torch", ".", "max", "(", "internal_vdw", ",", "initial_internal_vdw", ")", "\n", "loss", "=", "loss", "+", "dev_fix_distance", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# rotor penalty", "\n", "", "rotor_penalty", "=", "1", "+", "model", ".", "rotor_coeff", "*", "model", ".", "rotor_coeff", "*", "sample", "[", "\"rotor\"", "]", "\n", "\n", "lig_vdw", "=", "cal_vdw_energy", "(", "dm", ",", "sum_vdw_radius", ",", "vdw_A", ",", "vdw_N", ",", "is_last", "=", "True", ")", "\n", "lig_hbond1", "=", "cal_hbond_energy", "(", "\n", "dm", ",", "sum_vdw_radius", ",", "hbond_coeff", ",", "A_int", "[", ":", ",", "1", "]", ",", "is_last", "=", "True", ")", "\n", "lig_hbond2", "=", "cal_hbond_energy", "(", "\n", "dm", ",", "sum_vdw_radius", ",", "hbond_coeff", ",", "A_int", "[", ":", ",", "-", "1", "]", ",", "is_last", "=", "True", ")", "\n", "lig_hydrophobic", "=", "cal_hydrophobic_energy", "(", "\n", "dm", ",", "sum_vdw_radius", ",", "hydrophobic_coeff", ",", "A_int", "[", ":", ",", "-", "2", "]", ",", "is_last", "=", "True", ")", "\n", "lig_energy", "=", "lig_vdw", "+", "lig_hbond1", "+", "lig_hbond2", "+", "lig_hydrophobic", "\n", "\n", "pos1", "=", "pos1", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "initial_pos1", "=", "initial_pos1", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "pred", "=", "torch", ".", "stack", "(", "[", "vdw", ",", "hbond1", ",", "hbond2", ",", "hydrophobic", "]", ")", "\n", "pred", "=", "pred", "/", "rotor_penalty", "\n", "pred", "=", "pred", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "initial_pred", "=", "initial_pred", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "init_pred", "=", "np", ".", "sum", "(", "initial_pred", ")", "\n", "delta_pred", "=", "np", ".", "sum", "(", "pred", ")", "-", "np", ".", "sum", "(", "initial_pred", ")", "\n", "init_internal_vdw", "=", "initial_internal_vdw", ".", "item", "(", ")", "\n", "final_internal_vdw", "=", "internal_vdw", ".", "item", "(", ")", "\n", "final_dev_fix_distance", "=", "dev_fix_distance", ".", "item", "(", ")", "\n", "ligand_pos_change", "=", "(", "np", ".", "abs", "(", "pos1", "-", "initial_pos1", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "extra_data", "=", "{", "\"Initial prediction\"", ":", "f\"{init_pred:.3f} Kcal/mol\"", ",", "\n", "\"Delta prediction\"", ":", "f\"{delta_pred:.3f} Kcal/mol\"", ",", "\n", "\"Initial internal vdw\"", ":", "f\"{init_interval_vdw:.3f}\"", ",", "\n", "\"Final internal vdw\"", ":", "f\"{final_internal_vdw:.3f}\"", ",", "\n", "\"Final dev fix distance\"", ":", "f\"{final_dev_fix_distance:.3f}\"", ",", "\n", "\"ligand pos change\"", ":", "f\"{ligand_pos_change:.3f}\"", ",", "\n", "}", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "write", "(", "of", ",", "model", ",", "pred", ",", "end", "-", "st", ",", "args", ",", "extra_data", ")", "\n", "write_molecule", "(", "loof", ",", "m1", ",", "pos1", ")", "\n", "\n", "return", "lig_energy", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.predict": [[277, 298], ["time.time", "utils.read_molecule", "utils.extract_binding_pocket", "dataset.mol_to_feature", "dataset.tensor_collate_fn", "utils.dic_to_device", "model", "time.time", "predict.write", "pred.data.cpu().numpy", "pred.data.cpu"], "function", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.utils.read_molecule", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.utils.extract_binding_pocket", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.mol_to_feature", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.tensor_collate_fn", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.utils.dic_to_device", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.write"], ["", "def", "predict", "(", "model", ",", "lf", ",", "pf", ",", "of", ",", "args", ",", "device", ")", ":", "\n", "    ", "st", "=", "time", ".", "time", "(", ")", "\n", "\n", "# read ligand and protein. Then, convert to rdkit object", "\n", "m1", "=", "utils", ".", "read_molecule", "(", "lf", ")", "\n", "m2", "=", "utils", ".", "extract_binding_pocket", "(", "m1", ",", "pf", ")", "\n", "\n", "# preprocess: convert rdkit mol obj to feature", "\n", "sample", "=", "dataset", ".", "mol_to_feature", "(", "m1", ",", "m1", ",", "m2", ",", "None", ",", "0.0", ")", "\n", "sample", "[", "\"affinity\"", "]", "=", "0.0", "\n", "sample", "[", "\"key\"", "]", "=", "\"None\"", "\n", "sample", "=", "dataset", ".", "tensor_collate_fn", "(", "[", "sample", "]", ")", "\n", "sample", "=", "utils", ".", "dic_to_device", "(", "sample", ",", "device", ")", "\n", "\n", "# run prediction", "\n", "pred", ",", "_", ",", "_", ",", "_", "=", "model", "(", "sample", ",", "cal_der_loss", "=", "False", ")", "\n", "pred", "=", "pred", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "write", "(", "of", ",", "model", ",", "pred", ",", "end", "-", "st", ",", "args", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.arguments.str2bool": [[4, 11], ["v.lower", "v.lower", "argparse.ArgumentTypeEror"], "function", ["None"], ["def", "str2bool", "(", "v", ")", ":", "\n", "    ", "if", "v", ".", "lower", "(", ")", "in", "(", "\"yes\"", ",", "\"true\"", ",", "\"t\"", ",", "\"y\"", ",", "\"1\"", ")", ":", "\n", "        ", "return", "True", "\n", "", "elif", "v", ".", "lower", "(", ")", "in", "(", "\"no\"", ",", "\"false\"", ",", "\"f\"", ",", "\"n\"", ",", "\"0\"", ")", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeEror", "(", "\"Boolean value expected\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.arguments.parser": [[13, 303], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["", "", "def", "parser", "(", "command", ")", ":", "\n", "    ", "arg_command", "=", "command", "[", "1", ":", "]", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"parser for train and test\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--dim_gnn\"", ",", "\n", "help", "=", "\"dim_gnn\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "128", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_gnn\"", ",", "\n", "help", "=", "\"depth of gnn layer\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "3", ")", "\n", "parser", ".", "add_argument", "(", "\"--ngpu\"", ",", "\n", "help", "=", "\"ngpu\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\"--restart_file\"", ",", "\n", "help", "=", "\"restart file\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--potential\"", ",", "\n", "help", "=", "\"potential\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"harmonic\"", ",", "\n", "choices", "=", "[", "\"morse\"", ",", "\n", "\"harmonic\"", ",", "\n", "\"morse_all_pair\"", ",", "\n", "\"gnn\"", ",", "\n", "\"cnn3d\"", ",", "\n", "\"cnn3d_kdeep\"", "]", ")", "\n", "parser", ".", "add_argument", "(", "\"--pos_noise_std\"", ",", "\n", "help", "=", "\"std of noise added to the position\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.0", ")", "\n", "parser", ".", "add_argument", "(", "\"--filter_gamma\"", ",", "\n", "help", "=", "\"filter gamma\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "10.0", ")", "\n", "parser", ".", "add_argument", "(", "\"--filter_spacing\"", ",", "\n", "help", "=", "\"filter spacing\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.5", ")", "\n", "parser", ".", "add_argument", "(", "\"--interaction_net\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"edge conv\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--no_rotor_penalty\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"rotor penaly\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--vdw_N\"", ",", "\n", "help", "=", "\"vdw N\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "6.0", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_vdw_interaction\"", ",", "\n", "help", "=", "\"max vdw _interaction\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.0356", ")", "\n", "parser", ".", "add_argument", "(", "\"--min_vdw_interaction\"", ",", "\n", "help", "=", "\"min vdw _interaction\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.0178", ")", "\n", "parser", ".", "add_argument", "(", "\"--dev_vdw_radius\"", ",", "\n", "help", "=", "\"deviation of vdw radius\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.2", ")", "\n", "parser", ".", "add_argument", "(", "\"--dropout_rate\"", ",", "\n", "help", "=", "\"dropout rate\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.1", ")", "\n", "\n", "if", "\"train.py\"", "in", "command", "[", "0", "]", "or", "\"test.py\"", "in", "command", "[", "0", "]", ":", "\n", "        ", "parser", ".", "add_argument", "(", "\"--filename\"", ",", "\n", "help", "=", "\"filename\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--key_dir\"", ",", "\n", "help", "=", "\"key directory\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data_dir\"", ",", "\n", "help", "=", "\"data file path\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch_size\"", ",", "\n", "help", "=", "\"batch size\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "8", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_workers\"", ",", "\n", "help", "=", "\"number of workers\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "7", ")", "\n", "parser", ".", "add_argument", "(", "\"--grid_rotation\"", ",", "\n", "help", "=", "\"whether rotate the grid or not\"", ",", "\n", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lattice_dim\"", ",", "\n", "help", "=", "\"lattice size for 3D CNN\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "20", ")", "\n", "parser", ".", "add_argument", "(", "\"--scaling\"", ",", "\n", "help", "=", "\"scaling constant for 3D CNN\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.5", ")", "\n", "parser", ".", "add_argument", "(", "\"--with_uncertainty\"", ",", "\n", "help", "=", "\"with aleatoric uncertainty or not\"", ",", "\n", "action", "=", "\"store_true\"", ")", "\n", "\n", "# for train", "\n", "", "if", "\"train.py\"", "in", "command", "[", "0", "]", ":", "\n", "        ", "parser", ".", "add_argument", "(", "\"--lr\"", ",", "\n", "help", "=", "\"learning rate\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "1e-4", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr_decay\"", ",", "\n", "help", "=", "\"learning rate decay\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "1.0", ")", "\n", "parser", ".", "add_argument", "(", "\"--weight_decay\"", ",", "\n", "help", "=", "\"weight decay\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.0", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_epochs\"", ",", "\n", "help", "=", "\"number of epochs\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1001", ")", "\n", "parser", ".", "add_argument", "(", "\"--train_result_filename\"", ",", "\n", "help", "=", "\"train result filename\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"./result/train_result.txt\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--test_result_filename\"", ",", "\n", "help", "=", "\"test result filename\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"./result/test_result.txt\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--train_result_docking_filename\"", ",", "\n", "help", "=", "\"train result docking_filename\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"./result/train_result_docking.txt\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--test_result_docking_filename\"", ",", "\n", "help", "=", "\"test result docking filename\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"./result/test_result_docking.txt\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--train_result_screening_filename\"", ",", "\n", "help", "=", "\"train result screening filename\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"./result/train_result_screening.txt\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--test_result_screening_filename\"", ",", "\n", "help", "=", "\"test result screening filename\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"./result/test_result_screening.txt\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--loss_der1_ratio\"", ",", "\n", "help", "=", "\"loss der1 ratio\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "10.0", ")", "\n", "parser", ".", "add_argument", "(", "\"--loss_der2_ratio\"", ",", "\n", "help", "=", "\"loss der2 ratio\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "10.0", ")", "\n", "parser", ".", "add_argument", "(", "\"--min_loss_der2\"", ",", "\n", "help", "=", "\"min loss der2\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "-", "20.0", ")", "\n", "parser", ".", "add_argument", "(", "\"--loss_docking_ratio\"", ",", "\n", "help", "=", "\"loss docking ratio\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "10.0", ")", "\n", "parser", ".", "add_argument", "(", "\"--min_loss_docking\"", ",", "\n", "help", "=", "\"min loss docking\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "-", "1.0", ")", "\n", "parser", ".", "add_argument", "(", "\"--loss_screening_ratio\"", ",", "\n", "help", "=", "\"loss screening ratio\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "5.0", ")", "\n", "parser", ".", "add_argument", "(", "\"--loss_screening2_ratio\"", ",", "\n", "help", "=", "\"loss screening ratio\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "5.0", ")", "\n", "parser", ".", "add_argument", "(", "\"--save_dir\"", ",", "\n", "help", "=", "\"save directory of model save files\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"results/run01\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save_every\"", ",", "\n", "help", "=", "\"saver every n epoch\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "100", ")", "\n", "parser", ".", "add_argument", "(", "\"--tensorboard_dir\"", ",", "\n", "help", "=", "\"save directory of tensorboard log files\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"run/run01\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--filename2\"", ",", "\n", "help", "=", "\"filename2\"", ",", "\n", "default", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--key_dir2\"", ",", "\n", "help", "=", "\"key directory\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data_dir2\"", ",", "\n", "help", "=", "\"data file path\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--filename3\"", ",", "\n", "help", "=", "\"filename\"", ",", "\n", "default", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--key_dir3\"", ",", "\n", "help", "=", "\"key directory\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data_dir3\"", ",", "\n", "help", "=", "\"data file path\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--filename4\"", ",", "\n", "help", "=", "\"filename\"", ",", "\n", "default", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--key_dir4\"", ",", "\n", "help", "=", "\"key directory\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data_dir4\"", ",", "\n", "help", "=", "\"data file path\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"\"", ")", "\n", "\n", "if", "\"--with_uncertainty\"", "in", "command", ":", "\n", "            ", "parser", ".", "add_argument", "(", "\"--var_agg\"", ",", "\n", "help", "=", "\"var agg\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"product\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--var_abs\"", ",", "\n", "help", "=", "\"var abs\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"abs\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--var_log\"", ",", "\n", "help", "=", "\"log var or var\"", ",", "\n", "type", "=", "str2bool", ",", "\n", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\"--loss_var_ratio\"", ",", "\n", "help", "=", "\"loss var ratio\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "1e-4", ")", "\n", "parser", ".", "add_argument", "(", "\"--mc_dropout\"", ",", "\n", "help", "=", "\"to turn on or off MC dropout\"", ",", "\n", "type", "=", "str2bool", ",", "\n", "default", "=", "False", ")", "\n", "\n", "# for test", "\n", "", "", "if", "\"test.py\"", "in", "command", "[", "0", "]", ":", "\n", "        ", "parser", ".", "add_argument", "(", "\"--test_result_filename\"", ",", "\n", "help", "=", "\"test result filename\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"./result/test_result.txt\"", ")", "\n", "if", "\"--with_uncertainty\"", "in", "command", ":", "\n", "            ", "parser", ".", "add_argument", "(", "\"--n_mc_sampling\"", ",", "\n", "help", "=", "\"number of mc sampling\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "3", ")", "\n", "parser", ".", "add_argument", "(", "\"--var_agg\"", ",", "\n", "help", "=", "\"var agg\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"product\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--var_abs\"", ",", "\n", "help", "=", "\"var abs\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"abs\"", ")", "\n", "\n", "# for predict", "\n", "", "", "if", "\"predict.py\"", "in", "command", "[", "0", "]", ":", "\n", "        ", "parser", ".", "add_argument", "(", "\"--ligand_files\"", ",", "\n", "help", "=", "\"list of ligand file\"", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "type", "=", "str", ",", ")", "\n", "parser", ".", "add_argument", "(", "\"--protein_files\"", ",", "\n", "help", "=", "\"list of protein file\"", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "type", "=", "str", ",", ")", "\n", "parser", ".", "add_argument", "(", "\"--output_files\"", ",", "\n", "help", "=", "\"list of output file\"", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "type", "=", "str", ",", ")", "\n", "parser", ".", "add_argument", "(", "\"--ligand_opt_output_files\"", ",", "\n", "help", "=", "\"list of output file\"", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "type", "=", "str", ",", ")", "\n", "parser", ".", "add_argument", "(", "\"--local_opt\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"local_opt\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--ligand_prop\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"ligand_prop\"", ")", "\n", "\n", "", "args", "=", "parser", ".", "parse_args", "(", "arg_command", ")", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.train.run": [[25, 159], ["numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "model.train", "model.eval", "model.zero_grad", "next", "utils.dic_to_device", "model", "pred.data.cpu().numpy.sum", "loss_fn", "loss_der2.clamp.clamp", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "np.mean.append", "np.mean.append", "np.mean.append", "np.mean.append", "np.mean.append", "np.mean.append", "affinity.data.cpu().numpy.data.cpu().numpy", "pred.data.cpu().numpy.data.cpu().numpy", "range", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "loss_der1.sum", "loss_der2.clamp.sum", "utils.loss_var", "np.mean.append", "next", "utils.dic_to_device", "loss_docking.clamp().mean.clamp().mean", "next", "utils.dic_to_device", "loss_screening.clamp().mean.clamp().mean", "next", "utils.dic_to_device", "loss_screening2.clamp().mean.clamp().mean", "loss_all.backward", "optimizer.step", "loss_fn.data.cpu().numpy", "loss_der1.data.cpu().numpy", "loss_der2.clamp.data.cpu().numpy", "loss_docking.clamp().mean.data.cpu().numpy", "loss_screening.clamp().mean.data.cpu().numpy", "loss_screening2.clamp().mean.data.cpu().numpy", "len", "len", "pred_docking.data.cpu().numpy.data.cpu().numpy", "range", "len", "pred_screening.data.cpu().numpy.data.cpu().numpy", "range", "len", "pred_screening2.data.cpu().numpy.data.cpu().numpy", "range", "utils.loss_var.data.cpu().numpy", "model", "pred_docking.data.cpu().numpy.sum", "model", "pred_screening.data.cpu().numpy.sum", "model", "pred_screening2.data.cpu().numpy.sum", "affinity.data.cpu().numpy.data.cpu", "pred.data.cpu().numpy.data.cpu", "len", "len", "len", "loss_docking.clamp().mean.clamp", "loss_screening.clamp().mean.clamp", "loss_screening2.clamp().mean.clamp", "loss_fn.data.cpu", "loss_der1.data.cpu", "loss_der2.clamp.data.cpu", "loss_docking.clamp().mean.data.cpu", "loss_screening.clamp().mean.data.cpu", "loss_screening2.clamp().mean.data.cpu", "pred_docking.data.cpu().numpy.data.cpu", "pred_screening.data.cpu().numpy.data.cpu", "pred_screening2.data.cpu().numpy.data.cpu", "utils.loss_var.data.cpu"], "function", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.utils.dic_to_device", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.utils.loss_var", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.utils.dic_to_device", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.utils.dic_to_device", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.utils.dic_to_device"], ["", "def", "run", "(", "model", ",", "data_iter", ",", "data_iter2", ",", "data_iter3", ",", "data_iter4", ",", "train_mode", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "if", "train_mode", "else", "model", ".", "eval", "(", ")", "\n", "losses", "=", "[", "]", "\n", "losses_der1", "=", "[", "]", "\n", "losses_der2", "=", "[", "]", "\n", "losses_docking", "=", "[", "]", "\n", "losses_screening", "=", "[", "]", "\n", "if", "args", ".", "with_uncertainty", ":", "\n", "        ", "losses_var", "=", "[", "]", "\n", "", "save_pred", "=", "{", "}", "\n", "save_true", "=", "{", "}", "\n", "save_pred_docking", "=", "{", "}", "\n", "save_true_docking", "=", "{", "}", "\n", "save_pred_screening", "=", "{", "}", "\n", "save_true_screening", "=", "{", "}", "\n", "\n", "i_batch", "=", "0", "\n", "while", "True", ":", "\n", "        ", "model", ".", "zero_grad", "(", ")", "\n", "sample", "=", "next", "(", "data_iter", ",", "None", ")", "\n", "if", "sample", "is", "None", ":", "\n", "            ", "break", "\n", "", "sample", "=", "utils", ".", "dic_to_device", "(", "sample", ",", "device", ")", "\n", "keys", ",", "affinity", "=", "sample", "[", "\"key\"", "]", ",", "sample", "[", "\"affinity\"", "]", "\n", "\n", "loss_all", "=", "0.0", "\n", "cal_der_loss", "=", "False", "\n", "if", "args", ".", "loss_der1_ratio", ">", "0", "or", "args", ".", "loss_der2_ratio", ">", "0.0", ":", "\n", "            ", "cal_der_loss", "=", "True", "\n", "\n", "", "data", "=", "model", "(", "sample", ",", "cal_der_loss", "=", "cal_der_loss", ")", "\n", "if", "args", ".", "with_uncertainty", ":", "\n", "            ", "pred", ",", "loss_der1", ",", "loss_der2", ",", "var", "=", "data", "\n", "", "else", ":", "\n", "            ", "pred", ",", "loss_der1", ",", "loss_der2", "=", "data", "\n", "", "total_pred", "=", "pred", ".", "sum", "(", "-", "1", ")", "\n", "loss", "=", "loss_fn", "(", "total_pred", ",", "affinity", ")", "\n", "loss_der2", "=", "loss_der2", ".", "clamp", "(", "min", "=", "args", ".", "min_loss_der2", ")", "\n", "\n", "loss_all", "+=", "loss", "\n", "loss_all", "+=", "loss_der1", ".", "sum", "(", ")", "*", "args", ".", "loss_der1_ratio", "\n", "loss_all", "+=", "loss_der2", ".", "sum", "(", ")", "*", "args", ".", "loss_der2_ratio", "\n", "\n", "if", "args", ".", "with_uncertainty", ":", "\n", "            ", "loss_var", "=", "utils", ".", "loss_var", "(", "\n", "var", ",", "total_pred", ",", "affinity", ",", "log", "=", "args", ".", "var_log", ")", "\n", "loss_all", "+=", "loss_var", "*", "args", ".", "loss_var_ratio", "\n", "losses_var", ".", "append", "(", "loss_var", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "# loss4", "\n", "", "loss_docking", "=", "torch", ".", "zeros", "(", "(", "1", ",", ")", ")", "\n", "keys_docking", "=", "[", "]", "\n", "if", "args", ".", "loss_docking_ratio", ">", "0.0", ":", "\n", "            ", "sample_docking", "=", "next", "(", "data_iter2", ",", "None", ")", "\n", "sample_docking", "=", "utils", ".", "dic_to_device", "(", "sample_docking", ",", "device", ")", "\n", "keys_docking", ",", "affinity_docking", "=", "sample_docking", "[", "\"key\"", "]", ",", "sample_docking", "[", "\"affinity\"", "]", "\n", "pred_docking", "=", "model", "(", "sample_docking", ")", "[", "0", "]", "\n", "loss_docking", "=", "(", "affinity_docking", "-", "pred_docking", ".", "sum", "(", "-", "1", ")", ")", "\n", "loss_docking", "=", "loss_docking", ".", "clamp", "(", "args", ".", "min_loss_docking", ")", ".", "mean", "(", ")", "\n", "loss_all", "+=", "loss_docking", "*", "args", ".", "loss_docking_ratio", "\n", "\n", "", "loss_screening", "=", "torch", ".", "zeros", "(", "(", "1", ",", ")", ")", "\n", "keys_screening", "=", "[", "]", "\n", "if", "args", ".", "loss_screening_ratio", ">", "0.0", ":", "\n", "            ", "sample_screening", "=", "next", "(", "data_iter3", ",", "None", ")", "\n", "sample_screening", "=", "utils", ".", "dic_to_device", "(", "sample_screening", ",", "device", ")", "\n", "keys_screening", ",", "affinity_screening", "=", "sample_screening", "[", "\"key\"", "]", ",", "sample_screening", "[", "\"affinity\"", "]", "\n", "pred_screening", "=", "model", "(", "sample_screening", ")", "[", "0", "]", "\n", "loss_screening", "=", "affinity_screening", "-", "pred_screening", ".", "sum", "(", "-", "1", ")", "\n", "loss_screening", "=", "loss_screening", ".", "clamp", "(", "min", "=", "0.0", ")", ".", "mean", "(", ")", "\n", "loss_all", "+=", "loss_screening", "*", "args", ".", "loss_screening_ratio", "\n", "\n", "", "loss_screening2", "=", "torch", ".", "zeros", "(", "(", "1", ",", ")", ")", "\n", "keys_screening2", "=", "[", "]", "\n", "if", "args", ".", "loss_screening2_ratio", ">", "0.0", ":", "\n", "            ", "sample_screening2", "=", "next", "(", "data_iter4", ",", "None", ")", "\n", "sample_screening2", "=", "utils", ".", "dic_to_device", "(", "sample_screening2", ",", "device", ")", "\n", "keys_screening2", ",", "affinity_screening2", "=", "sample_screening2", "[", "\"key\"", "]", ",", "sample_screening2", "[", "\"affinity\"", "]", "\n", "pred_screening2", "=", "model", "(", "sample_screening2", ")", "[", "0", "]", "\n", "loss_screening2", "=", "affinity_screening2", "-", "pred_screening2", ".", "sum", "(", "-", "1", ")", "\n", "loss_screening2", "=", "loss_screening2", ".", "clamp", "(", "min", "=", "0.0", ")", ".", "mean", "(", ")", "\n", "loss_all", "+=", "loss_screening2", "*", "args", ".", "loss_screening2_ratio", "\n", "", "if", "train_mode", ":", "\n", "            ", "loss_all", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "losses", ".", "append", "(", "loss", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "losses_der1", ".", "append", "(", "loss_der1", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "losses_der2", ".", "append", "(", "loss_der2", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "losses_docking", ".", "append", "(", "loss_docking", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "losses_screening", ".", "append", "(", "loss_screening", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "losses_screening", ".", "append", "(", "loss_screening2", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "affinity", "=", "affinity", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pred", "=", "pred", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "keys", ")", ")", ":", "\n", "            ", "save_pred", "[", "keys", "[", "i", "]", "]", "=", "pred", "[", "i", "]", "\n", "save_true", "[", "keys", "[", "i", "]", "]", "=", "affinity", "[", "i", "]", "\n", "\n", "", "if", "len", "(", "keys_docking", ")", ">", "0", ":", "\n", "            ", "pred_docking", "=", "pred_docking", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "keys_docking", ")", ")", ":", "\n", "                ", "save_pred_docking", "[", "keys_docking", "[", "i", "]", "]", "=", "pred_docking", "[", "i", "]", "\n", "save_true_docking", "[", "keys_docking", "[", "i", "]", "]", "=", "affinity_docking", "[", "i", "]", "\n", "\n", "", "", "if", "len", "(", "keys_screening", ")", ">", "0", ":", "\n", "            ", "pred_screening", "=", "pred_screening", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "keys_screening", ")", ")", ":", "\n", "                ", "save_pred_screening", "[", "keys_screening", "[", "i", "]", "]", "=", "pred_screening", "[", "i", "]", "\n", "save_true_screening", "[", "keys_screening", "[", "i", "]", "]", "=", "affinity_screening", "[", "i", "]", "\n", "\n", "", "", "if", "len", "(", "keys_screening2", ")", ">", "0", ":", "\n", "            ", "pred_screening2", "=", "pred_screening2", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "keys_screening2", ")", ")", ":", "\n", "                ", "save_pred_screening", "[", "keys_screening2", "[", "i", "]", "]", "=", "pred_screening2", "[", "i", "]", "\n", "save_true_screening", "[", "keys_screening2", "[", "i", "]", "\n", "]", "=", "affinity_screening2", "[", "i", "]", "\n", "", "", "i_batch", "+=", "1", "\n", "\n", "", "losses", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "losses", ")", ")", "\n", "losses_der1", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "losses_der1", ")", ")", "\n", "losses_der2", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "losses_der2", ")", ")", "\n", "losses_var", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "losses_var", ")", ")", "\n", "losses_docking", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "losses_docking", ")", ")", "\n", "losses_screening", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "losses_screening", ")", ")", "\n", "total_losses", "=", "losses", "+", "losses_der1", "+", "losses_der2", "+", "losses_var", "+", "losses_docking", "+", "losses_screening", "\n", "return", "losses", ",", "losses_der1", ",", "losses_der2", ",", "losses_docking", ",", "losses_screening", ",", "losses_var", ",", "save_pred", ",", "save_true", ",", "save_pred_docking", ",", "save_true_docking", ",", "save_pred_screening", ",", "save_true_screening", ",", "total_losses", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.MolDataset.__init__": [[590, 600], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "keys", ",", "data_dir", ",", "id_to_y", ",", "random_rotation", "=", "0.0", ",", "\n", "pos_noise_std", "=", "0.0", ")", ":", "\n", "        ", "self", ".", "keys", "=", "keys", "\n", "self", ".", "data_dir", "=", "data_dir", "\n", "self", ".", "id_to_y", "=", "id_to_y", "\n", "self", ".", "random_rotation", "=", "random_rotation", "\n", "self", ".", "amino_acids", "=", "[", "\"ALA\"", ",", "\"ARG\"", ",", "\"ASN\"", ",", "\"ASP\"", ",", "\"ASX\"", ",", "\"CYS\"", ",", "\"GLU\"", ",", "\"GLN\"", ",", "\"GLX\"", ",", "\n", "\"GLY\"", ",", "\"HIS\"", ",", "\"ILE\"", ",", "\"LEU\"", ",", "\"LYS\"", ",", "\"MET\"", ",", "\"PHE\"", ",", "\"PRO\"", ",", "\"SER\"", ",", "\n", "\"THR\"", ",", "\"TRP\"", ",", "\"TYR\"", ",", "\"VAL\"", "]", "\n", "self", ".", "pos_noise_std", "=", "pos_noise_std", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.MolDataset.__len__": [[601, 603], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "keys", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.MolDataset.__getitem__": [[604, 614], ["dataset.mol_to_feature", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.mol_to_feature"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "key", "=", "self", ".", "keys", "[", "idx", "]", "\n", "with", "open", "(", "self", ".", "data_dir", "+", "\"/\"", "+", "key", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "m1", ",", "m1_uff", ",", "m2", ",", "interaction_data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "sample", "=", "mol_to_feature", "(", "\n", "m1", ",", "m1_uff", ",", "m2", ",", "interaction_data", ",", "self", ".", "pos_noise_std", ")", "\n", "sample", "[", "\"affinity\"", "]", "=", "self", ".", "id_to_y", "[", "key", "]", "*", "-", "1.36", "\n", "sample", "[", "\"key\"", "]", "=", "key", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.DTISampler.__init__": [[627, 632], ["numpy.array", "numpy.sum"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "weights", ",", "num_samples", ",", "replacement", "=", "True", ")", ":", "\n", "        ", "weights", "=", "np", ".", "array", "(", "weights", ")", "/", "np", ".", "sum", "(", "weights", ")", "\n", "self", ".", "weights", "=", "weights", "\n", "self", ".", "num_samples", "=", "num_samples", "\n", "self", ".", "replacement", "=", "replacement", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.DTISampler.__iter__": [[633, 637], ["numpy.random.choice", "iter", "len", "numpy.random.choice.tolist"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "retval", "=", "np", ".", "random", ".", "choice", "(", "\n", "len", "(", "self", ".", "weights", ")", ",", "self", ".", "num_samples", ",", "replace", "=", "self", ".", "replacement", ",", "p", "=", "self", ".", "weights", ")", "\n", "return", "iter", "(", "retval", ".", "tolist", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.DTISampler.__len__": [[638, 640], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.get_torsion_energy": [[36, 49], ["rdkit.Chem.ChemicalForceFields.MMFFGetMoleculeProperties", "rdkit.Chem.rdForceFieldHelpers.MMFFGetMoleculeForceField", "rdForceFieldHelpers.MMFFGetMoleculeForceField.CalcEnergy", "getattr", "getattr."], "function", ["None"], ["def", "get_torsion_energy", "(", "m", ")", ":", "\n", "    ", "mp", "=", "ChemicalForceFields", ".", "MMFFGetMoleculeProperties", "(", "m", ")", "\n", "if", "mp", "is", "None", ":", "\n", "        ", "return", "0.0", "\n", "", "ffTerms", "=", "(", "\"Bond\"", ",", "\"Angle\"", ",", "\"StretchBend\"", ",", "\"Torsion\"", ",", "\"Oop\"", ",", "\"VdW\"", ",", "\"Ele\"", ")", "\n", "iTerm", "=", "\"Torsion\"", "\n", "for", "jTerm", "in", "ffTerms", ":", "\n", "        ", "state", "=", "(", "iTerm", "==", "jTerm", ")", "\n", "setMethod", "=", "getattr", "(", "mp", ",", "\"SetMMFF\"", "+", "jTerm", "+", "\"Term\"", ")", "\n", "setMethod", "(", "state", ")", "\n", "", "ff", "=", "rdForceFieldHelpers", ".", "MMFFGetMoleculeForceField", "(", "m", ",", "mp", ")", "\n", "e", "=", "ff", ".", "CalcEnergy", "(", ")", "\n", "return", "e", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.get_epsilon_sigma": [[51, 58], ["dataset.get_epsilon_sigma_uff", "dataset.get_epsilon_sigma_mmff", "dataset.get_epsilon_sigma_uff"], "function", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.get_epsilon_sigma_uff", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.get_epsilon_sigma_mmff", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.get_epsilon_sigma_uff"], ["", "def", "get_epsilon_sigma", "(", "m1", ",", "m2", ",", "mmff", "=", "True", ")", ":", "\n", "    ", "if", "mmff", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "get_epsilon_sigma_mmff", "(", "m1", ",", "m2", ")", "\n", "", "except", ":", "\n", "            ", "return", "get_epsilon_sigma_uff", "(", "m1", ",", "m2", ")", "\n", "", "", "return", "get_epsilon_sigma_uff", "(", "m1", ",", "m2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.get_epsilon_sigma_uff": [[60, 75], ["m1.GetNumAtoms", "m2.GetNumAtoms", "rdkit.Chem.rdmolops.CombineMols", "range", "numpy.zeros", "numpy.zeros", "range", "rdkit.Chem.rdForceFieldHelpers.GetUFFVdWParams"], "function", ["None"], ["", "def", "get_epsilon_sigma_uff", "(", "m1", ",", "m2", ")", ":", "\n", "    ", "n1", "=", "m1", ".", "GetNumAtoms", "(", ")", "\n", "n2", "=", "m2", ".", "GetNumAtoms", "(", ")", "\n", "vdw_epsilon", ",", "vdw_sigma", "=", "np", ".", "zeros", "(", "(", "n1", ",", "n2", ")", ")", ",", "np", ".", "zeros", "(", "(", "n1", ",", "n2", ")", ")", "\n", "m_combine", "=", "CombineMols", "(", "m1", ",", "m2", ")", "\n", "for", "i1", "in", "range", "(", "n1", ")", ":", "\n", "        ", "for", "i2", "in", "range", "(", "n2", ")", ":", "\n", "            ", "param", "=", "GetUFFVdWParams", "(", "m_combine", ",", "i1", ",", "i1", "+", "i2", ")", "\n", "if", "param", "is", "None", ":", "\n", "                ", "continue", "\n", "", "d", ",", "e", "=", "param", "\n", "vdw_epsilon", "[", "i1", ",", "i2", "]", "=", "e", "\n", "vdw_sigma", "[", "i1", ",", "i2", "]", "=", "d", "\n", "# print (i1, i2, e, d)", "\n", "", "", "return", "vdw_epsilon", ",", "vdw_sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.get_epsilon_sigma_mmff": [[77, 93], ["m1.GetNumAtoms", "m2.GetNumAtoms", "rdkit.Chem.rdmolops.CombineMols", "rdkit.Chem.ChemicalForceFields.MMFFGetMoleculeProperties", "range", "numpy.zeros", "numpy.zeros", "range", "ChemicalForceFields.MMFFGetMoleculeProperties.GetMMFFVdWParams"], "function", ["None"], ["", "def", "get_epsilon_sigma_mmff", "(", "m1", ",", "m2", ")", ":", "\n", "    ", "n1", "=", "m1", ".", "GetNumAtoms", "(", ")", "\n", "n2", "=", "m2", ".", "GetNumAtoms", "(", ")", "\n", "vdw_epsilon", ",", "vdw_sigma", "=", "np", ".", "zeros", "(", "(", "n1", ",", "n2", ")", ")", ",", "np", ".", "zeros", "(", "(", "n1", ",", "n2", ")", ")", "\n", "m_combine", "=", "CombineMols", "(", "m1", ",", "m2", ")", "\n", "mp", "=", "ChemicalForceFields", ".", "MMFFGetMoleculeProperties", "(", "m_combine", ")", "\n", "for", "i1", "in", "range", "(", "n1", ")", ":", "\n", "        ", "for", "i2", "in", "range", "(", "n2", ")", ":", "\n", "            ", "param", "=", "mp", ".", "GetMMFFVdWParams", "(", "i1", ",", "i1", "+", "i2", ")", "\n", "if", "param", "is", "None", ":", "\n", "                ", "continue", "\n", "", "d", ",", "e", ",", "_", ",", "_", "=", "param", "\n", "vdw_epsilon", "[", "i1", ",", "i2", "]", "=", "e", "\n", "vdw_sigma", "[", "i1", ",", "i2", "]", "=", "d", "\n", "# print (i1, i2, e, d)", "\n", "", "", "return", "vdw_epsilon", ",", "vdw_sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.cal_torsion_energy": [[95, 114], ["rdkit.Chem.TorsionFingerprints.CalculateTorsionLists", "rdkit.Chem.TorsionFingerprints.CalculateTorsionAngles", "enumerate", "rdkit.Chem.rdForceFieldHelpers.GetUFFTorsionParams", "str", "set", "set", "m.GetAtomWithIdx().GetHybridization", "set", "set", "math.cos", "math.cos", "m.GetAtomWithIdx"], "function", ["None"], ["", "def", "cal_torsion_energy", "(", "m", ")", ":", "\n", "    ", "energy", "=", "0", "\n", "torsion_list", ",", "torsion_list_ring", "=", "CalculateTorsionLists", "(", "m", ")", "\n", "angles", "=", "CalculateTorsionAngles", "(", "m", ",", "torsion_list", ",", "torsion_list_ring", ")", "\n", "for", "idx", ",", "t", "in", "enumerate", "(", "torsion_list", ")", ":", "\n", "        ", "indice", ",", "_", "=", "t", "\n", "indice", ",", "angle", "=", "indice", "[", "0", "]", ",", "angles", "[", "idx", "]", "[", "0", "]", "[", "0", "]", "\n", "v", "=", "rdForceFieldHelpers", ".", "GetUFFTorsionParams", "(", "m", ",", "indice", "[", "0", "]", ",", "indice", "[", "1", "]", ",", "\n", "indice", "[", "2", "]", ",", "indice", "[", "3", "]", ")", "\n", "hs", "=", "[", "str", "(", "m", ".", "GetAtomWithIdx", "(", "i", ")", ".", "GetHybridization", "(", ")", ")", "for", "i", "in", "indice", "]", "\n", "if", "set", "(", "[", "hs", "[", "1", "]", ",", "hs", "[", "2", "]", "]", ")", "==", "set", "(", "[", "\"SP3\"", ",", "\"SP3\"", "]", ")", ":", "\n", "            ", "n", ",", "pi_zero", "=", "3", ",", "math", ".", "pi", "\n", "", "elif", "set", "(", "[", "hs", "[", "1", "]", ",", "hs", "[", "2", "]", "]", ")", "==", "set", "(", "[", "\"SP2\"", ",", "\"SP3\"", "]", ")", ":", "\n", "            ", "n", ",", "pi_zero", "=", "6", ",", "0.0", "\n", "", "else", ":", "\n", "            ", "continue", "\n", "", "energy", "+=", "0.5", "*", "v", "*", "(", "1", "-", "math", ".", "cos", "(", "n", "*", "pi_zero", ")", "*", "\n", "math", ".", "cos", "(", "n", "*", "angle", "/", "180", "*", "math", ".", "pi", ")", ")", "\n", "", "return", "energy", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.cal_internal_vdw": [[116, 139], ["m.GetNumAtoms", "numpy.array", "scipy.spatial.distance_matrix", "rdkit.Chem.rdmolops.GetAdjacencyMatrix", "rdkit.Chem.rdmolops.GetDistanceMatrix", "range", "m.GetConformers", "c.GetPositions", "range", "rdkit.Chem.rdForceFieldHelpers.GetUFFVdWParams"], "function", ["None"], ["", "def", "cal_internal_vdw", "(", "m", ")", ":", "\n", "    ", "retval", "=", "0", "\n", "n", "=", "m", ".", "GetNumAtoms", "(", ")", "\n", "c", "=", "m", ".", "GetConformers", "(", ")", "[", "0", "]", "\n", "d", "=", "np", ".", "array", "(", "c", ".", "GetPositions", "(", ")", ")", "\n", "dm", "=", "distance_matrix", "(", "d", ",", "d", ")", "\n", "adj", "=", "GetAdjacencyMatrix", "(", "m", ")", "\n", "topological_dm", "=", "GetDistanceMatrix", "(", "m", ")", "\n", "for", "i1", "in", "range", "(", "n", ")", ":", "\n", "        ", "for", "i2", "in", "range", "(", "0", ",", "i1", ")", ":", "\n", "            ", "param", "=", "GetUFFVdWParams", "(", "m", ",", "i1", ",", "i2", ")", "\n", "if", "param", "is", "None", ":", "\n", "                ", "continue", "\n", "", "d", ",", "e", "=", "param", "\n", "d", "=", "d", "*", "1.0", "\n", "if", "adj", "[", "i1", ",", "i2", "]", "==", "1", ":", "\n", "                ", "continue", "\n", "", "if", "topological_dm", "[", "i1", ",", "i2", "]", "<", "4", ":", "\n", "                ", "continue", "\n", "", "retval", "+=", "e", "*", "(", "(", "d", "/", "dm", "[", "i1", ",", "i2", "]", ")", "**", "12", "-", "\n", "2", "*", "(", "(", "d", "/", "dm", "[", "i1", ",", "i2", "]", ")", "**", "6", ")", ")", "\n", "# print (i1, i2, e, d)", "\n", "", "", "return", "retval", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.cal_charge": [[141, 156], ["rdkit.Chem.AllChem.CalcEEMcharges", "rdkit.Chem.AllChem.ComputeGasteigerCharges", "range", "float", "m.GetNumAtoms", "m.GetAtomWithIdx().GetProp", "range", "float", "m.GetNumAtoms", "m.GetAtomWithIdx().GetProp", "m.GetAtomWithIdx", "m.GetAtomWithIdx"], "function", ["None"], ["", "def", "cal_charge", "(", "m", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "charges", "=", "AllChem", ".", "CalcEEMcharges", "(", "m", ")", "\n", "AllChem", ".", "ComputeGasteigerCharges", "(", "m", ")", "\n", "", "except", ":", "\n", "        ", "charges", "=", "None", "\n", "", "if", "charges", "is", "None", ":", "\n", "        ", "charges", "=", "[", "float", "(", "m", ".", "GetAtomWithIdx", "(", "i", ")", ".", "GetProp", "(", "\"_GasteigerCharge\"", ")", ")", "\n", "for", "i", "in", "range", "(", "m", ".", "GetNumAtoms", "(", ")", ")", "]", "\n", "", "else", ":", "\n", "        ", "for", "i", "in", "range", "(", "m", ".", "GetNumAtoms", "(", ")", ")", ":", "\n", "            ", "if", "charges", "[", "i", "]", ">", "3", "or", "charges", "[", "i", "]", "<", "-", "3", ":", "\n", "                ", "charges", "[", "i", "]", "=", "float", "(", "m", ".", "GetAtomWithIdx", "(", "\n", "i", ")", ".", "GetProp", "(", "\"_GasteigerCharge\"", ")", ")", "\n", "", "", "", "return", "charges", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.one_of_k_encoding": [[158, 163], ["list", "Exception", "map"], "function", ["None"], ["", "def", "one_of_k_encoding", "(", "x", ",", "allowable_set", ")", ":", "\n", "    ", "if", "x", "not", "in", "allowable_set", ":", "\n", "        ", "raise", "Exception", "(", "\n", "\"input {0} not in allowable set{1}:\"", ".", "format", "(", "x", ",", "allowable_set", ")", ")", "\n", "", "return", "list", "(", "map", "(", "lambda", "s", ":", "x", "==", "s", ",", "allowable_set", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.one_of_k_encoding_unk": [[165, 170], ["list", "map"], "function", ["None"], ["", "def", "one_of_k_encoding_unk", "(", "x", ",", "allowable_set", ")", ":", "\n", "    ", "\"\"\"Maps inputs not in the allowable set to the last element.\"\"\"", "\n", "if", "x", "not", "in", "allowable_set", ":", "\n", "        ", "x", "=", "allowable_set", "[", "-", "1", "]", "\n", "", "return", "list", "(", "map", "(", "lambda", "s", ":", "x", "==", "s", ",", "allowable_set", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.atom_feature": [[172, 180], ["m.GetAtomWithIdx", "numpy.array", "dataset.one_of_k_encoding_unk", "m.GetAtomWithIdx.GetIsAromatic", "dataset.one_of_k_encoding_unk", "m.GetAtomWithIdx.GetImplicitValence", "dataset.one_of_k_encoding_unk", "dataset.one_of_k_encoding_unk", "m.GetAtomWithIdx.GetTotalNumHs", "m.GetAtomWithIdx.GetSymbol", "m.GetAtomWithIdx.GetDegree"], "function", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.one_of_k_encoding_unk", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.one_of_k_encoding_unk", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.one_of_k_encoding_unk", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.one_of_k_encoding_unk"], ["", "def", "atom_feature", "(", "m", ",", "atom_i", ",", "i_donor", ",", "i_acceptor", ")", ":", "\n", "    ", "atom", "=", "m", ".", "GetAtomWithIdx", "(", "atom_i", ")", "\n", "return", "np", ".", "array", "(", "one_of_k_encoding_unk", "(", "atom", ".", "GetSymbol", "(", ")", ",", "\n", "[", "\"C\"", ",", "\"N\"", ",", "\"O\"", ",", "\"S\"", ",", "\"F\"", ",", "\"P\"", ",", "\"Cl\"", ",", "\"Br\"", ",", "\"X\"", "]", ")", "+", "\n", "one_of_k_encoding_unk", "(", "atom", ".", "GetDegree", "(", ")", ",", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", ")", "+", "\n", "one_of_k_encoding_unk", "(", "atom", ".", "GetTotalNumHs", "(", ")", ",", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", "]", ")", "+", "\n", "one_of_k_encoding_unk", "(", "atom", ".", "GetImplicitValence", "(", ")", ",", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", ")", "+", "\n", "[", "atom", ".", "GetIsAromatic", "(", ")", "]", ")", "# (10, 6, 5, 6, 1) --> total 28", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.get_atom_feature": [[182, 193], ["m.GetNumAtoms", "range", "numpy.array", "np.concatenate.append", "numpy.concatenate", "numpy.concatenate", "dataset.atom_feature", "numpy.zeros", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.atom_feature"], ["", "def", "get_atom_feature", "(", "m", ",", "is_ligand", "=", "True", ")", ":", "\n", "    ", "n", "=", "m", ".", "GetNumAtoms", "(", ")", "\n", "H", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "H", ".", "append", "(", "atom_feature", "(", "m", ",", "i", ",", "None", ",", "None", ")", ")", "\n", "", "H", "=", "np", ".", "array", "(", "H", ")", "\n", "if", "is_ligand", ":", "\n", "        ", "H", "=", "np", ".", "concatenate", "(", "[", "H", ",", "np", ".", "zeros", "(", "(", "n", ",", "27", ")", ")", "]", ",", "1", ")", "\n", "", "else", ":", "\n", "        ", "H", "=", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "(", "n", ",", "27", ")", ")", ",", "H", "]", ",", "1", ")", "\n", "", "return", "H", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.rotate": [[195, 224], ["numpy.array", "numpy.mean", "range", "ase.Atoms", "ase.Atoms.rotate", "ase.Atoms.get_positions", "range", "molecule.GetConformers", "c.GetPositions", "len", "ase.Atoms.append", "molecule.GetNumAtoms", "c.SetAtomPosition", "ase.Atom"], "function", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.rotate"], ["", "def", "rotate", "(", "molecule", ",", "angle", ",", "axis", ",", "fix_com", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Since edge of each molecules are changing by different orientation,\n    this funciton used to make molecules rotation-invariant and enables further\n    self-supervised learning.\n    :param molecule: rdkit molecule object\n    :param anble: angle to rotate,\n                  random value between 0, 360\n    :param axis: axis for rotation,\n                 vector with three random values between 0, 1\n                 (a, b, c) -> each values means x, y, z value of the vector\n    :return: rotated molecule\n    \"\"\"", "\n", "c", "=", "molecule", ".", "GetConformers", "(", ")", "[", "0", "]", "\n", "d", "=", "np", ".", "array", "(", "c", ".", "GetPositions", "(", ")", ")", "\n", "ori_mean", "=", "np", ".", "mean", "(", "d", ",", "0", ",", "keepdims", "=", "True", ")", "\n", "if", "fix_com", ":", "\n", "        ", "d", "=", "d", "-", "ori_mean", "\n", "", "atoms", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "d", ")", ")", ":", "\n", "        ", "atoms", ".", "append", "(", "Atom", "(", "\"C\"", ",", "d", "[", "i", "]", ")", ")", "\n", "", "atoms", "=", "Atoms", "(", "atoms", ")", "\n", "atoms", ".", "rotate", "(", "angle", ",", "axis", ")", "\n", "new_d", "=", "atoms", ".", "get_positions", "(", ")", "\n", "if", "fix_com", ":", "\n", "        ", "new_d", "+=", "ori_mean", "\n", "", "for", "i", "in", "range", "(", "molecule", ".", "GetNumAtoms", "(", ")", ")", ":", "\n", "        ", "c", ".", "SetAtomPosition", "(", "i", ",", "new_d", "[", "i", "]", ")", "\n", "", "return", "molecule", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.dm_vector": [[226, 241], ["len", "len", "numpy.repeat", "numpy.repeat", "numpy.expand_dims", "numpy.expand_dims"], "function", ["None"], ["", "def", "dm_vector", "(", "d1", ",", "d2", ")", ":", "\n", "    ", "\"\"\"\n    Get distances for every atoms in molecule1(ligand), molecule2(protein).\n    # of atoms in molecule1, molecule2 = n1, n2 / shape of d1, d2 = [n1, 3], [n2, 3]\n    repeat these vectors, make vector shape of [n1, n2, 3] subtract two vectors\n    Square value of resulting vector means distances between every atoms in two molecules\n    :param d1: position vector of atoms in molecule1, shape: [n1, 3]\n    :param d2: position vector of atoms in molecule2, shape: [n2, 3]\n    :return: subtraction between enlarged vectors from d1, d2, shape : [n1, n2, 3]\n    \"\"\"", "\n", "n1", "=", "len", "(", "d1", ")", "\n", "n2", "=", "len", "(", "d2", ")", "\n", "d1", "=", "np", ".", "repeat", "(", "np", ".", "expand_dims", "(", "d1", ",", "1", ")", ",", "n2", ",", "1", ")", "\n", "d2", "=", "np", ".", "repeat", "(", "np", ".", "expand_dims", "(", "d2", ",", "0", ")", ",", "n1", ",", "0", ")", "\n", "return", "d1", "-", "d2", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.extract_valid_amino_acid": [[243, 263], ["rdkit.Chem.rdmolops.SplitMolByPDBResidues", "range", "len", "rdkit.Chem.rdmolops.SplitMolByPDBResidues.keys", "rdkit.Chem.rdmolops.CombineMols"], "function", ["None"], ["", "def", "extract_valid_amino_acid", "(", "m", ",", "amino_acids", ")", ":", "\n", "    ", "\"\"\"\n    Divide molecule into PDB residues and only select the residues\n    belong to amino acids. Then, combine the all of the residues\n    to make new molecule object. This is not \"real\" molecule, just\n    the information of the molecule with several residues\n    :param m: rdkit molecule object\n    :param amino_acids: lists of amino acids, total 22 exist\n    :return: one molecule information that all of amino acid residues are combined\n    \"\"\"", "\n", "ms", "=", "SplitMolByPDBResidues", "(", "m", ")", "\n", "valid_ms", "=", "[", "ms", "[", "k", "]", "for", "k", "in", "ms", ".", "keys", "(", ")", "]", "\n", "# valid_ms = [ms[k] for k in ms.keys() if k in amino_acids]", "\n", "ret_m", "=", "None", "\n", "for", "i", "in", "range", "(", "len", "(", "valid_ms", ")", ")", ":", "\n", "        ", "if", "i", "==", "0", ":", "\n", "            ", "ret_m", "=", "valid_ms", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "ret_m", "=", "CombineMols", "(", "ret_m", ",", "valid_ms", "[", "i", "]", ")", "\n", "", "", "return", "ret_m", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.position_to_index": [[265, 271], ["numpy.sum", "indice.tolist", "numpy.where", "numpy.expand_dims", "numpy.power", "numpy.where", "numpy.all", "numpy.array"], "function", ["None"], ["", "def", "position_to_index", "(", "positions", ",", "target_position", ")", ":", "\n", "    ", "indice", "=", "np", ".", "where", "(", "np", ".", "all", "(", "positions", "==", "target_position", ",", "axis", "=", "1", ")", ")", "[", "0", "]", "\n", "diff", "=", "positions", "-", "np", ".", "expand_dims", "(", "np", ".", "array", "(", "target_position", ")", ",", "0", ")", "\n", "diff", "=", "np", ".", "sum", "(", "np", ".", "power", "(", "diff", ",", "2", ")", ",", "-", "1", ")", "\n", "indice", "=", "np", ".", "where", "(", "diff", "<", "1e-6", ")", "[", "0", "]", "\n", "return", "indice", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.get_interaction_matrix": [[273, 291], ["numpy.zeros", "enumerate", "len", "len", "len", "dataset.position_to_index", "dataset.position_to_index", "len", "dataset.position_to_index", "dataset.position_to_index", "len", "len"], "function", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.position_to_index", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.position_to_index", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.position_to_index", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.position_to_index"], ["", "def", "get_interaction_matrix", "(", "d1", ",", "d2", ",", "interaction_data", ")", ":", "\n", "    ", "n1", ",", "n2", "=", "len", "(", "d1", ")", ",", "len", "(", "d2", ")", "\n", "\n", "A", "=", "np", ".", "zeros", "(", "(", "len", "(", "interaction_types", ")", ",", "n1", ",", "n2", ")", ")", "\n", "for", "i_type", ",", "k", "in", "enumerate", "(", "interaction_types", ")", ":", "\n", "        ", "for", "ps", "in", "interaction_data", "[", "k", "]", ":", "\n", "            ", "p1", ",", "p2", "=", "ps", "\n", "i1", "=", "position_to_index", "(", "d1", ",", "p1", ")", "\n", "i2", "=", "position_to_index", "(", "d2", ",", "p2", ")", "\n", "if", "len", "(", "i1", ")", "==", "0", ":", "\n", "                ", "i1", "=", "position_to_index", "(", "d1", ",", "p2", ")", "\n", "i2", "=", "position_to_index", "(", "d2", ",", "p1", ")", "\n", "", "if", "len", "(", "i1", ")", "==", "0", "or", "len", "(", "i2", ")", "==", "0", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "i1", ",", "i2", "=", "i1", "[", "0", "]", ",", "i2", "[", "0", "]", "\n", "A", "[", "i_type", ",", "i1", ",", "i2", "]", "=", "1", "\n", "", "", "", "return", "A", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.classifyAtoms": [[293, 316], ["mol.GetAtoms", "atom.SetProp", "radii.append", "atom.GetAtomicNum", "atom.SetProp", "atom.GetAtomicNum", "[].GetOtherAtom().GetAtomicNum", "atom.SetProp", "atom.GetSymbol().upper", "[].GetOtherAtom", "atom.GetSymbol", "atom.GetBonds"], "function", ["None"], ["", "def", "classifyAtoms", "(", "mol", ",", "polar_atoms", "=", "[", "7", ",", "8", ",", "15", ",", "16", "]", ")", ":", "\n", "# Taken from https://github.com/mittinatten/freesasa/blob/master/src/classifier.c", "\n", "    ", "symbol_radius", "=", "{", "\"H\"", ":", "1.10", ",", "\"C\"", ":", "1.70", ",", "\"N\"", ":", "1.55", ",", "\"O\"", ":", "1.52", ",", "\"P\"", ":", "1.80", ",", "\n", "\"S\"", ":", "1.80", ",", "\"SE\"", ":", "1.90", ",", "\"FE\"", ":", "2.05", ",", "\n", "\"F\"", ":", "1.47", ",", "\"CL\"", ":", "1.75", ",", "\"BR\"", ":", "1.83", ",", "\"I\"", ":", "1.98", ",", "\n", "\"LI\"", ":", "1.81", ",", "\"BE\"", ":", "1.53", ",", "\"B\"", ":", "1.92", ",", "\n", "\"NA\"", ":", "2.27", ",", "\"MG\"", ":", "1.74", ",", "\"AL\"", ":", "1.84", ",", "\"SI\"", ":", "2.10", ",", "\n", "\"K\"", ":", "2.75", ",", "\"CA\"", ":", "2.31", ",", "\"GA\"", ":", "1.87", ",", "\"GE\"", ":", "2.11", ",", "\"AS\"", ":", "1.85", ",", "\n", "\"RB\"", ":", "3.03", ",", "\"SR\"", ":", "2.49", ",", "\"IN\"", ":", "1.93", ",", "\"SN\"", ":", "2.17", ",", "\"SB\"", ":", "2.06", ",", "\"TE\"", ":", "2.06", ",", "\n", "\"MN\"", ":", "2.05", "}", "\n", "\n", "radii", "=", "[", "]", "\n", "for", "atom", "in", "mol", ".", "GetAtoms", "(", ")", ":", "\n", "# mark everything as apolar to start", "\n", "        ", "atom", ".", "SetProp", "(", "\"SASAClassName\"", ",", "\"Apolar\"", ")", "\n", "if", "atom", ".", "GetAtomicNum", "(", ")", "in", "polar_atoms", ":", "# identify polar atoms and change their marking", "\n", "            ", "atom", ".", "SetProp", "(", "\"SASAClassName\"", ",", "\"Polar\"", ")", "# mark as polar", "\n", "", "elif", "atom", ".", "GetAtomicNum", "(", ")", "==", "1", ":", "\n", "            ", "if", "atom", ".", "GetBonds", "(", ")", "[", "0", "]", ".", "GetOtherAtom", "(", "atom", ")", ".", "GetAtomicNum", "(", ")", "in", "polar_atoms", ":", "\n", "                ", "atom", ".", "SetProp", "(", "\"SASAClassName\"", ",", "\"Polar\"", ")", "# mark as polar", "\n", "", "", "radii", ".", "append", "(", "symbol_radius", "[", "atom", ".", "GetSymbol", "(", ")", ".", "upper", "(", ")", "]", ")", "\n", "", "return", "(", "radii", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.cal_sasa": [[318, 325], ["rdkit.Chem.rdFreeSASA.classifyAtoms", "dataset.classifyAtoms", "rdkit.Chem.rdFreeSASA.CalcSASA", "rdkit.Chem.rdFreeSASA.MakeFreeSasaAPolarAtomQuery"], "function", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.classifyAtoms", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.classifyAtoms"], ["", "def", "cal_sasa", "(", "m", ")", ":", "\n", "    ", "radii", "=", "rdFreeSASA", ".", "classifyAtoms", "(", "m", ")", "\n", "radii", "=", "classifyAtoms", "(", "m", ")", "\n", "# radii = rdFreeSASA.classifyAtoms(m1)", "\n", "sasa", "=", "rdFreeSASA", ".", "CalcSASA", "(", "m", ",", "radii", ",", "\n", "query", "=", "rdFreeSASA", ".", "MakeFreeSasaAPolarAtomQuery", "(", ")", ")", "\n", "return", "sasa", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.get_vdw_radius": [[327, 336], ["a.GetAtomicNum", "rdkit.Chem.GetPeriodicTable().GetRvdw", "atomic_number_to_radius.keys", "rdkit.Chem.GetPeriodicTable"], "function", ["None"], ["", "def", "get_vdw_radius", "(", "a", ")", ":", "\n", "    ", "metal_symbols", "=", "[", "\"Zn\"", ",", "\"Mn\"", ",", "\"Co\"", ",", "\"Mg\"", ",", "\"Ni\"", ",", "\"Fe\"", ",", "\"Ca\"", ",", "\"Cu\"", "]", "\n", "atomic_number", "=", "a", ".", "GetAtomicNum", "(", ")", "\n", "atomic_number_to_radius", "=", "{", "6", ":", "1.90", ",", "7", ":", "1.8", ",", "8", ":", "1.7", ",", "16", ":", "2.0", ",", "15", ":", "2.1", ",", "\n", "9", ":", "1.5", ",", "17", ":", "1.8", ",", "35", ":", "2.0", ",", "53", ":", "2.2", ",", "30", ":", "1.2", ",", "25", ":", "1.2", ",", "26", ":", "1.2", ",", "27", ":", "1.2", ",", "\n", "12", ":", "1.2", ",", "28", ":", "1.2", ",", "20", ":", "1.2", ",", "29", ":", "1.2", "}", "\n", "if", "atomic_number", "in", "atomic_number_to_radius", ".", "keys", "(", ")", ":", "\n", "        ", "return", "atomic_number_to_radius", "[", "atomic_number", "]", "\n", "", "return", "Chem", ".", "GetPeriodicTable", "(", ")", ".", "GetRvdw", "(", "atomic_number", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.cal_uff": [[338, 342], ["rdkit.Chem.AllChem.UFFGetMoleculeForceField", "AllChem.UFFGetMoleculeForceField.CalcEnergy"], "function", ["None"], ["", "def", "cal_uff", "(", "m", ")", ":", "\n", "    ", "ffu", "=", "AllChem", ".", "UFFGetMoleculeForceField", "(", "m", ")", "\n", "e", "=", "ffu", ".", "CalcEnergy", "(", ")", "\n", "return", "e", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.get_hydrophobic_atom": [[344, 360], ["m.GetNumAtoms", "numpy.zeros", "range", "m.GetAtomWithIdx", "m.GetAtomWithIdx.GetSymbol", "a.GetSymbol.upper", "a.GetSymbol.upper", "list", "x.GetSymbol", "len", "m.GetAtomWithIdx.GetNeighbors", "set", "set"], "function", ["None"], ["", "def", "get_hydrophobic_atom", "(", "m", ")", ":", "\n", "    ", "n", "=", "m", ".", "GetNumAtoms", "(", ")", "\n", "retval", "=", "np", ".", "zeros", "(", "(", "n", ",", ")", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "a", "=", "m", ".", "GetAtomWithIdx", "(", "i", ")", "\n", "s", "=", "a", ".", "GetSymbol", "(", ")", "\n", "if", "s", ".", "upper", "(", ")", "in", "[", "\"F\"", ",", "\"CL\"", ",", "\"BR\"", ",", "\"I\"", "]", ":", "\n", "            ", "retval", "[", "i", "]", "=", "1", "\n", "", "elif", "s", ".", "upper", "(", ")", "in", "[", "\"C\"", "]", ":", "\n", "            ", "n_a", "=", "[", "x", ".", "GetSymbol", "(", ")", "for", "x", "in", "a", ".", "GetNeighbors", "(", ")", "]", "\n", "diff", "=", "list", "(", "set", "(", "n_a", ")", "-", "set", "(", "[", "\"C\"", "]", ")", ")", "\n", "if", "len", "(", "diff", ")", "==", "0", ":", "\n", "                ", "retval", "[", "i", "]", "=", "1", "\n", "", "", "else", ":", "\n", "            ", "continue", "\n", "", "", "return", "retval", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.get_A_hydrophobic": [[362, 366], ["dataset.get_hydrophobic_atom", "dataset.get_hydrophobic_atom", "numpy.outer"], "function", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.get_hydrophobic_atom", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.get_hydrophobic_atom"], ["", "def", "get_A_hydrophobic", "(", "m1", ",", "m2", ")", ":", "\n", "    ", "indice1", "=", "get_hydrophobic_atom", "(", "m1", ")", "\n", "indice2", "=", "get_hydrophobic_atom", "(", "m2", ")", "\n", "return", "np", ".", "outer", "(", "indice1", ",", "indice2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.get_hbond_donor_indice": [[368, 383], ["numpy.array", "rdkit.Chem.MolFromSmarts", "m.GetSubstructMatches"], "function", ["None"], ["", "def", "get_hbond_donor_indice", "(", "m", ")", ":", "\n", "    ", "\"\"\"\n    indice = m.GetSubstructMatches(HDonorSmarts)\n    if len(indice)==0: return np.array([])\n    indice = np.array([i for i in indice])[:,0]\n    return indice\n    \"\"\"", "\n", "# smarts = [\"[!$([#6,H0,-,-2,-3])]\", \"[!H0;#7,#8,#9]\"]", "\n", "smarts", "=", "[", "\"[!#6;!H0]\"", "]", "\n", "indice", "=", "[", "]", "\n", "for", "s", "in", "smarts", ":", "\n", "        ", "s", "=", "Chem", ".", "MolFromSmarts", "(", "s", ")", "\n", "indice", "+=", "[", "i", "[", "0", "]", "for", "i", "in", "m", ".", "GetSubstructMatches", "(", "s", ")", "]", "\n", "", "indice", "=", "np", ".", "array", "(", "indice", ")", "\n", "return", "indice", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.get_hbond_acceptor_indice": [[385, 396], ["numpy.array", "rdkit.Chem.MolFromSmarts", "m.GetSubstructMatches"], "function", ["None"], ["", "def", "get_hbond_acceptor_indice", "(", "m", ")", ":", "\n", "# smarts = [\"[!$([#6,F,Cl,Br,I,o,s,nX3,#7v5,#15v5,#16v4,#16v6,*+1,*+2,*+3])]\",", "\n", "#          \"[#6,#7;R0]=[#8]\"]", "\n", "    ", "smarts", "=", "[", "\n", "\"[$([!#6;+0]);!$([F,Cl,Br,I]);!$([o,s,nX3]);!$([Nv5,Pv5,Sv4,Sv6])]\"", "]", "\n", "indice", "=", "[", "]", "\n", "for", "s", "in", "smarts", ":", "\n", "        ", "s", "=", "Chem", ".", "MolFromSmarts", "(", "s", ")", "\n", "indice", "+=", "[", "i", "[", "0", "]", "for", "i", "in", "m", ".", "GetSubstructMatches", "(", "s", ")", "]", "\n", "", "indice", "=", "np", ".", "array", "(", "indice", ")", "\n", "return", "indice", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.get_A_hbond": [[398, 413], ["dataset.get_hbond_acceptor_indice", "dataset.get_hbond_acceptor_indice", "dataset.get_hbond_donor_indice", "dataset.get_hbond_donor_indice", "numpy.zeros", "m1.GetNumAtoms", "m2.GetNumAtoms"], "function", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.get_hbond_acceptor_indice", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.get_hbond_acceptor_indice", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.get_hbond_donor_indice", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.get_hbond_donor_indice"], ["", "def", "get_A_hbond", "(", "m1", ",", "m2", ")", ":", "\n", "    ", "h_acc_indice1", "=", "get_hbond_acceptor_indice", "(", "m1", ")", "\n", "h_acc_indice2", "=", "get_hbond_acceptor_indice", "(", "m2", ")", "\n", "h_donor_indice1", "=", "get_hbond_donor_indice", "(", "m1", ")", "\n", "h_donor_indice2", "=", "get_hbond_donor_indice", "(", "m2", ")", "\n", "A", "=", "np", ".", "zeros", "(", "(", "m1", ".", "GetNumAtoms", "(", ")", ",", "m2", ".", "GetNumAtoms", "(", ")", ")", ")", "\n", "\n", "for", "i", "in", "h_acc_indice1", ":", "\n", "        ", "for", "j", "in", "h_donor_indice2", ":", "\n", "            ", "A", "[", "i", ",", "j", "]", "=", "1", "\n", "", "", "for", "i", "in", "h_donor_indice1", ":", "\n", "        ", "for", "j", "in", "h_acc_indice2", ":", "\n", "            ", "A", "[", "i", ",", "j", "]", "=", "1", "\n", "\n", "", "", "return", "A", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.get_A_metal_complexes": [[415, 432], ["dataset.get_hbond_acceptor_indice", "dataset.get_hbond_acceptor_indice", "numpy.array", "numpy.array", "numpy.zeros", "m1.GetNumAtoms", "m2.GetNumAtoms", "range", "range", "m1.GetNumAtoms", "m1.GetAtomWithIdx().GetSymbol", "m2.GetNumAtoms", "m2.GetAtomWithIdx().GetSymbol", "m1.GetAtomWithIdx", "m2.GetAtomWithIdx"], "function", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.get_hbond_acceptor_indice", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.get_hbond_acceptor_indice"], ["", "def", "get_A_metal_complexes", "(", "m1", ",", "m2", ")", ":", "\n", "    ", "h_acc_indice1", "=", "get_hbond_acceptor_indice", "(", "m1", ")", "\n", "h_acc_indice2", "=", "get_hbond_acceptor_indice", "(", "m2", ")", "\n", "metal_symbols", "=", "[", "\"Zn\"", ",", "\"Mn\"", ",", "\"Co\"", ",", "\"Mg\"", ",", "\"Ni\"", ",", "\"Fe\"", ",", "\"Ca\"", ",", "\"Cu\"", "]", "\n", "metal_indice1", "=", "np", ".", "array", "(", "[", "i", "for", "i", "in", "range", "(", "m1", ".", "GetNumAtoms", "(", ")", ")", "\n", "if", "m1", ".", "GetAtomWithIdx", "(", "i", ")", ".", "GetSymbol", "(", ")", "in", "metal_symbols", "]", ")", "\n", "metal_indice2", "=", "np", ".", "array", "(", "[", "i", "for", "i", "in", "range", "(", "m2", ".", "GetNumAtoms", "(", ")", ")", "\n", "if", "m2", ".", "GetAtomWithIdx", "(", "i", ")", ".", "GetSymbol", "(", ")", "in", "metal_symbols", "]", ")", "\n", "A", "=", "np", ".", "zeros", "(", "(", "m1", ".", "GetNumAtoms", "(", ")", ",", "m2", ".", "GetNumAtoms", "(", ")", ")", ")", "\n", "\n", "for", "i", "in", "h_acc_indice1", ":", "\n", "        ", "for", "j", "in", "metal_indice2", ":", "\n", "            ", "A", "[", "i", ",", "j", "]", "=", "1", "\n", "", "", "for", "i", "in", "metal_indice1", ":", "\n", "        ", "for", "j", "in", "h_acc_indice2", ":", "\n", "            ", "A", "[", "i", ",", "j", "]", "=", "1", "\n", "", "", "return", "A", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.mol_to_feature": [[434, 556], ["rdkit.Chem.RemoveHs", "rdkit.Chem.RemoveHs", "numpy.random.uniform", "numpy.random.uniform", "dataset.rotate", "Chem.RemoveHs.GetNumAtoms", "numpy.array", "numpy.random.normal", "numpy.array", "dataset.get_atom_feature", "Chem.RemoveHs.GetNumAtoms", "numpy.array", "numpy.random.normal", "dataset.get_atom_feature", "dataset.dm_vector", "dataset.dm_vector", "numpy.zeros", "dataset.get_A_hydrophobic", "dataset.get_A_hbond", "dataset.get_A_metal_complexes", "dataset.cal_sasa", "rdkit.Chem.rdMolDescriptors.CalcNumRotatableBonds", "numpy.zeros", "numpy.zeros", "numpy.array", "numpy.array", "numpy.nan_to_num", "numpy.nan_to_num", "numpy.ones", "numpy.ones", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "dataset.get_epsilon_sigma", "numpy.random.uniform", "numpy.random.uniform", "copy.deepcopy", "[].GetPositions", "[].GetPositions", "rdkit.Chem.rdmolops.GetAdjacencyMatrix", "numpy.eye", "Chem.RemoveHs.GetConformers", "c2.GetPositions", "rdkit.Chem.rdmolops.GetAdjacencyMatrix", "numpy.eye", "dataset.cal_sasa", "len", "Chem.RemoveHs.GetNumAtoms", "Chem.RemoveHs.GetNumAtoms", "dataset.get_vdw_radius", "dataset.get_vdw_radius", "Chem.RemoveHs.GetAtoms", "Chem.RemoveHs.GetAtoms", "Chem.RemoveHs.GetAtoms", "Chem.RemoveHs.GetAtoms", "Chem.RemoveHs.GetConformers", "rotate.GetConformers", "a.GetSymbol", "a.GetSymbol"], "function", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.rotate", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.get_atom_feature", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.get_atom_feature", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.dm_vector", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.dm_vector", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.get_A_hydrophobic", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.get_A_hbond", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.get_A_metal_complexes", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.cal_sasa", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.get_epsilon_sigma", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.cal_sasa", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.get_vdw_radius", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.get_vdw_radius"], ["", "def", "mol_to_feature", "(", "m1", ",", "m1_uff", ",", "m2", ",", "interaction_data", ",", "pos_noise_std", ")", ":", "\n", "# Remove hydrogens", "\n", "    ", "m1", "=", "Chem", ".", "RemoveHs", "(", "m1", ")", "\n", "m2", "=", "Chem", ".", "RemoveHs", "(", "m2", ")", "\n", "\n", "# extract valid amino acids", "\n", "# m2 = extract_valid_amino_acid(m2, self.amino_acids)", "\n", "\n", "# random rotation", "\n", "angle", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "360", ",", "1", ")", "[", "0", "]", "\n", "axis", "=", "np", ".", "random", ".", "uniform", "(", "-", "1", ",", "1", ",", "3", ")", "\n", "# m1 = rotate(m1, angle, axis, False)", "\n", "# m2 = rotate(m2, angle, axis, False)", "\n", "\n", "angle", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "360", ",", "1", ")", "[", "0", "]", "\n", "axis", "=", "np", ".", "random", ".", "uniform", "(", "-", "1", ",", "1", ",", "3", ")", "\n", "m1_rot", "=", "rotate", "(", "copy", ".", "deepcopy", "(", "m1", ")", ",", "angle", ",", "axis", ",", "True", ")", "\n", "\n", "# prepare ligand", "\n", "n1", "=", "m1", ".", "GetNumAtoms", "(", ")", "\n", "d1", "=", "np", ".", "array", "(", "m1", ".", "GetConformers", "(", ")", "[", "0", "]", ".", "GetPositions", "(", ")", ")", "\n", "d1", "+=", "np", ".", "random", ".", "normal", "(", "0.0", ",", "pos_noise_std", ",", "d1", ".", "shape", ")", "\n", "d1_rot", "=", "np", ".", "array", "(", "m1_rot", ".", "GetConformers", "(", ")", "[", "0", "]", ".", "GetPositions", "(", ")", ")", "\n", "adj1", "=", "GetAdjacencyMatrix", "(", "m1", ")", "+", "np", ".", "eye", "(", "n1", ")", "\n", "h1", "=", "get_atom_feature", "(", "m1", ",", "True", ")", "\n", "\n", "# prepare protein", "\n", "n2", "=", "m2", ".", "GetNumAtoms", "(", ")", "\n", "c2", "=", "m2", ".", "GetConformers", "(", ")", "[", "0", "]", "\n", "d2", "=", "np", ".", "array", "(", "c2", ".", "GetPositions", "(", ")", ")", "\n", "d2", "+=", "np", ".", "random", ".", "normal", "(", "0.0", ",", "pos_noise_std", ",", "d2", ".", "shape", ")", "\n", "adj2", "=", "GetAdjacencyMatrix", "(", "m2", ")", "+", "np", ".", "eye", "(", "n2", ")", "\n", "h2", "=", "get_atom_feature", "(", "m2", ",", "True", ")", "\n", "\n", "# prepare distance vector", "\n", "dmv", "=", "dm_vector", "(", "d1", ",", "d2", ")", "\n", "dmv_rot", "=", "dm_vector", "(", "d1_rot", ",", "d2", ")", "\n", "\n", "# get interaction matrix", "\n", "# A_int = get_interaction_matrix(d1, d2, interaction_data)", "\n", "A_int", "=", "np", ".", "zeros", "(", "\n", "(", "len", "(", "interaction_types", ")", ",", "m1", ".", "GetNumAtoms", "(", ")", ",", "m2", ".", "GetNumAtoms", "(", ")", ")", ")", "\n", "A_int", "[", "-", "2", "]", "=", "get_A_hydrophobic", "(", "m1", ",", "m2", ")", "\n", "A_int", "[", "1", "]", "=", "get_A_hbond", "(", "m1", ",", "m2", ")", "\n", "A_int", "[", "-", "1", "]", "=", "get_A_metal_complexes", "(", "m1", ",", "m2", ")", "\n", "\n", "# cal sasa", "\n", "sasa", "=", "cal_sasa", "(", "m1", ")", "\n", "dsasa", "=", "sasa", "-", "cal_sasa", "(", "m1_uff", ")", "\n", "\n", "# count rotatable bonds", "\n", "rotor", "=", "CalcNumRotatableBonds", "(", "m1", ")", "\n", "# dm = distance_matrix(d1, d2)", "\n", "# rotor = count_active_rotatable_bond(m1, dm)", "\n", "# charge", "\n", "# charge1 = cal_charge(m1)", "\n", "# charge2 = cal_charge(m2)", "\n", "charge1", "=", "np", ".", "zeros", "(", "(", "n1", ",", ")", ")", "\n", "charge2", "=", "np", ".", "zeros", "(", "(", "n2", ",", ")", ")", "\n", "\n", "\"\"\"\n    mp1 = AllChem.MMFFGetMoleculeProperties(m1)\n    mp2 = AllChem.MMFFGetMoleculeProperties(m2)\n    charge1 = [mp1.GetMMFFPartialCharge(i) for i in range(m1.GetNumAtoms())]\n    charge2 = [mp2.GetMMFFPartialCharge(i) for i in range(m2.GetNumAtoms())]\n    \"\"\"", "\n", "\n", "# partial charge calculated by gasteiger", "\n", "charge1", "=", "np", ".", "array", "(", "charge1", ")", "\n", "charge2", "=", "np", ".", "array", "(", "charge2", ")", "\n", "\n", "# There is nan for some cases.", "\n", "charge1", "=", "np", ".", "nan_to_num", "(", "charge1", ",", "nan", "=", "0", ",", "neginf", "=", "0", ",", "posinf", "=", "0", ")", "\n", "charge2", "=", "np", ".", "nan_to_num", "(", "charge2", ",", "nan", "=", "0", ",", "neginf", "=", "0", ",", "posinf", "=", "0", ")", "\n", "\n", "# valid", "\n", "valid1", "=", "np", ".", "ones", "(", "(", "n1", ",", ")", ")", "\n", "valid2", "=", "np", ".", "ones", "(", "(", "n2", ",", ")", ")", "\n", "\n", "# no metal", "\n", "metal_symbols", "=", "[", "\"Zn\"", ",", "\"Mn\"", ",", "\"Co\"", ",", "\"Mg\"", ",", "\"Ni\"", ",", "\"Fe\"", ",", "\"Ca\"", ",", "\"Cu\"", "]", "\n", "no_metal1", "=", "np", ".", "array", "(", "[", "1", "if", "a", ".", "GetSymbol", "(", ")", "not", "in", "metal_symbols", "else", "0", "\n", "for", "a", "in", "m1", ".", "GetAtoms", "(", ")", "]", ")", "\n", "no_metal2", "=", "np", ".", "array", "(", "[", "1", "if", "a", ".", "GetSymbol", "(", ")", "not", "in", "metal_symbols", "else", "0", "\n", "for", "a", "in", "m2", ".", "GetAtoms", "(", ")", "]", ")", "\n", "# vdw radius", "\n", "vdw_radius1", "=", "np", ".", "array", "(", "[", "get_vdw_radius", "(", "a", ")", "for", "a", "in", "m1", ".", "GetAtoms", "(", ")", "]", ")", "\n", "vdw_radius2", "=", "np", ".", "array", "(", "[", "get_vdw_radius", "(", "a", ")", "for", "a", "in", "m2", ".", "GetAtoms", "(", ")", "]", ")", "\n", "\n", "vdw_epsilon", ",", "vdw_sigma", "=", "get_epsilon_sigma", "(", "m1", ",", "m2", ",", "False", ")", "\n", "\n", "# uff energy difference", "\n", "# delta_uff = cal_uff(m1)-cal_uff(m1_uff)", "\n", "# delta_uff = get_torsion_energy(m1) - get_torsion_energy(m1_uff)", "\n", "# delta_uff = cal_torsion_energy(m1)+cal_internal_vdw(m1)", "\n", "delta_uff", "=", "0.0", "\n", "sample", "=", "{", "\n", "\"h1\"", ":", "h1", ",", "\n", "\"adj1\"", ":", "adj1", ",", "\n", "\"h2\"", ":", "h2", ",", "\n", "\"adj2\"", ":", "adj2", ",", "\n", "\"A_int\"", ":", "A_int", ",", "\n", "\"dmv\"", ":", "dmv", ",", "\n", "\"dmv_rot\"", ":", "dmv_rot", ",", "\n", "\"pos1\"", ":", "d1", ",", "\n", "\"pos2\"", ":", "d2", ",", "\n", "\"sasa\"", ":", "sasa", ",", "\n", "\"dsasa\"", ":", "dsasa", ",", "\n", "\"rotor\"", ":", "rotor", ",", "\n", "\"charge1\"", ":", "charge1", ",", "\n", "\"charge2\"", ":", "charge2", ",", "\n", "\"vdw_radius1\"", ":", "vdw_radius1", ",", "\n", "\"vdw_radius2\"", ":", "vdw_radius2", ",", "\n", "\"vdw_epsilon\"", ":", "vdw_epsilon", ",", "\n", "\"vdw_sigma\"", ":", "vdw_sigma", ",", "\n", "\"delta_uff\"", ":", "delta_uff", ",", "\n", "\"valid1\"", ":", "valid1", ",", "\n", "\"valid2\"", ":", "valid2", ",", "\n", "\"no_metal1\"", ":", "no_metal1", ",", "\n", "\"no_metal2\"", ":", "no_metal2", ",", "\n", "}", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.is_atoms_in_same_ring": [[558, 563], ["None"], "function", ["None"], ["", "def", "is_atoms_in_same_ring", "(", "i", ",", "j", ",", "ssr", ")", ":", "\n", "    ", "for", "s", "in", "ssr", ":", "\n", "        ", "if", "i", "in", "s", "and", "j", "in", "s", ":", "\n", "            ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.count_active_rotatable_bond": [[565, 586], ["m.GetSubstructMatches", "rdkit.Chem.GetSymmSSSR", "m.GetNumAtoms", "numpy.zeros", "numpy.copy", "numpy.min", "dataset.get_hydrophobic_atom", "range", "sum", "dataset.is_atoms_in_same_ring", "len"], "function", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.get_hydrophobic_atom", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.is_atoms_in_same_ring"], ["", "def", "count_active_rotatable_bond", "(", "m", ",", "dm", ")", ":", "\n", "    ", "rot_atom_pairs", "=", "m", ".", "GetSubstructMatches", "(", "RotatableBondSmarts", ")", "\n", "ssr", "=", "Chem", ".", "GetSymmSSSR", "(", "m", ")", "\n", "n", "=", "m", ".", "GetNumAtoms", "(", ")", "\n", "RT", "=", "np", ".", "zeros", "(", "(", "n", ",", ")", ")", "\n", "for", "pair", "in", "rot_atom_pairs", ":", "\n", "        ", "if", "is_atoms_in_same_ring", "(", "pair", "[", "0", "]", ",", "pair", "[", "1", "]", ",", "ssr", ")", ":", "\n", "            ", "continue", "\n", "", "RT", "[", "pair", "[", "0", "]", "]", "+=", "0.5", "\n", "RT", "[", "pair", "[", "1", "]", "]", "+=", "0.5", "\n", "", "RT_copy", "=", "np", ".", "copy", "(", "RT", ")", "\n", "min_dm", "=", "np", ".", "min", "(", "dm", ",", "1", ")", "\n", "RT", "[", "RT", ">", "1", "]", "=", "0.5", "\n", "RT", "[", "min_dm", ">", "4", "]", "=", "0.0", "\n", "# print (CalcNumRotatableBonds(m), sum(RT_copy), sum(RT))", "\n", "\n", "hydrophobic_indice", "=", "get_hydrophobic_atom", "(", "m", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "RT", ")", ")", ":", "\n", "        ", "if", "hydrophobic_indice", "[", "i", "]", "==", "0", ":", "\n", "            ", "RT", "[", "i", "]", "=", "RT", "[", "i", "]", "*", "0.5", "\n", "", "", "return", "sum", "(", "RT", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.check_dimension": [[642, 652], ["numpy.asarray", "numpy.max", "isinstance", "np.asarray.append", "np.asarray.append"], "function", ["None"], ["", "", "def", "check_dimension", "(", "tensors", ")", ":", "\n", "    ", "size", "=", "[", "]", "\n", "for", "tensor", "in", "tensors", ":", "\n", "        ", "if", "isinstance", "(", "tensor", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "size", ".", "append", "(", "tensor", ".", "shape", ")", "\n", "", "else", ":", "\n", "            ", "size", ".", "append", "(", "0", ")", "\n", "", "", "size", "=", "np", ".", "asarray", "(", "size", ")", "\n", "\n", "return", "np", ".", "max", "(", "size", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.collate_tensor": [[654, 667], ["isinstance", "tuple", "isinstance", "slice", "slice", "tuple"], "function", ["None"], ["", "def", "collate_tensor", "(", "tensor", ",", "max_tensor", ",", "batch_idx", ")", ":", "\n", "    ", "if", "isinstance", "(", "tensor", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "dims", "=", "tensor", ".", "shape", "\n", "max_dims", "=", "max_tensor", ".", "shape", "\n", "slice_list", "=", "tuple", "(", "[", "slice", "(", "0", ",", "dim", ")", "for", "dim", "in", "dims", "]", ")", "\n", "slice_list", "=", "[", "slice", "(", "batch_idx", ",", "batch_idx", "+", "1", ")", ",", "*", "slice_list", "]", "\n", "max_tensor", "[", "tuple", "(", "slice_list", ")", "]", "=", "tensor", "\n", "", "elif", "isinstance", "(", "tensor", ",", "str", ")", ":", "\n", "        ", "max_tensor", "[", "batch_idx", "]", "=", "tensor", "\n", "", "else", ":", "\n", "        ", "max_tensor", "[", "batch_idx", "]", "=", "tensor", "\n", "\n", "", "return", "max_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.tensor_collate_fn": [[669, 701], ["dict", "list", "len", "int", "enumerate", "range", "zip", "isinstance", "dict.items", "e.items", "len", "numpy.zeros", "isinstance", "dataset.collate_tensor", "enumerate", "numpy.array", "numpy.zeros", "isinstance", "torch.from_numpy().float", "range", "torch.from_numpy", "dataset.check_dimension"], "function", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.collate_tensor", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.dataset.check_dimension"], ["", "def", "tensor_collate_fn", "(", "batch", ")", ":", "\n", "# batch_items = [it for e in batch for it in e.items() if \"key\" != it[0]]", "\n", "    ", "batch_items", "=", "[", "it", "for", "e", "in", "batch", "for", "it", "in", "e", ".", "items", "(", ")", "]", "\n", "dim_dict", "=", "dict", "(", ")", "\n", "total_key", ",", "total_value", "=", "list", "(", "zip", "(", "*", "batch_items", ")", ")", "\n", "batch_size", "=", "len", "(", "batch", ")", "\n", "n_element", "=", "int", "(", "len", "(", "batch_items", ")", "/", "batch_size", ")", "\n", "total_key", "=", "total_key", "[", "0", ":", "n_element", "]", "\n", "for", "i", ",", "k", "in", "enumerate", "(", "total_key", ")", ":", "\n", "        ", "value_list", "=", "[", "v", "for", "j", ",", "v", "in", "enumerate", "(", "\n", "total_value", ")", "if", "j", "%", "n_element", "==", "i", "]", "\n", "if", "isinstance", "(", "value_list", "[", "0", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "dim_dict", "[", "k", "]", "=", "np", ".", "zeros", "(", "np", ".", "array", "(", "\n", "[", "batch_size", ",", "*", "check_dimension", "(", "value_list", ")", "]", ")", "\n", ")", "\n", "", "elif", "isinstance", "(", "value_list", "[", "0", "]", ",", "str", ")", ":", "\n", "            ", "dim_dict", "[", "k", "]", "=", "[", "\"\"", "for", "_", "in", "range", "(", "batch_size", ")", "]", "\n", "", "else", ":", "\n", "            ", "dim_dict", "[", "k", "]", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", ")", ")", "\n", "\n", "", "", "ret_dict", "=", "{", "}", "\n", "for", "j", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "if", "batch", "[", "j", "]", "==", "None", ":", "\n", "            ", "continue", "\n", "", "keys", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "dim_dict", ".", "items", "(", ")", ":", "\n", "            ", "value", "=", "collate_tensor", "(", "batch", "[", "j", "]", "[", "key", "]", ",", "value", ",", "j", ")", "\n", "if", "not", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "value", "=", "torch", ".", "from_numpy", "(", "value", ")", ".", "float", "(", ")", "\n", "", "ret_dict", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "ret_dict", "\n", "", ""]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.layers.MPNN.__init__": [[9, 24], ["super().__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.GRUCell", "torch.GRUCell", "torch.GRUCell", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Linear", "torch.Linear", "torch.Linear", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.CNN3D_KDEEP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_edge_feature", ",", "n_atom_feature", ")", ":", "\n", "        ", "super", "(", "MPNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "W", "=", "nn", ".", "Linear", "(", "n_atom_feature", ",", "n_atom_feature", ")", "\n", "self", ".", "C", "=", "nn", ".", "GRUCell", "(", "n_atom_feature", ",", "n_atom_feature", ")", "\n", "self", ".", "cal_message", "=", "nn", ".", "Sequential", "(", "\n", "#nn.Linear(n_feature, 3*n_feature),", "\n", "# nn.ReLU(),", "\n", "#nn.Linear(3*n_feature, 1*n_feature),", "\n", "# nn.ReLU(),", "\n", "nn", ".", "Linear", "(", "1", "*", "n_edge_feature", ",", "n_atom_feature", "*", "n_atom_feature", ")", ",", "\n", "# nn.ReLU(),", "\n", ")", "\n", "self", ".", "A", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "\n", "size", "=", "(", "n_atom_feature", ",", "n_atom_feature", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.layers.MPNN.forward": [[25, 43], ["layers.MPNN.cal_message", "message_matrix.view.view.view", "x2.unsqueeze().repeat().unsqueeze", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "message.sum().squeeze.sum().squeeze.squeeze", "message.sum().squeeze.sum().squeeze.sum().squeeze", "message.sum().squeeze.sum().squeeze.view", "x1.view", "layers.MPNN.C", "retval.view.view.view", "edge.size", "edge.size", "edge.size", "x1.size", "x1.size", "x1.size", "x1.size", "x1.size", "x1.size", "x1.size", "x2.unsqueeze().repeat", "message.sum().squeeze.sum().squeeze.sum", "x1.size", "x2.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ",", "edge", ")", ":", "\n", "        ", "message_matrix", "=", "self", ".", "cal_message", "(", "edge", ")", "\n", "\n", "message_matrix", "=", "message_matrix", ".", "view", "(", "edge", ".", "size", "(", "0", ")", ",", "edge", ".", "size", "(", "1", ")", ",", "\n", "edge", ".", "size", "(", "2", ")", ",", "x1", ".", "size", "(", "-", "1", ")", ",", "\n", "x1", ".", "size", "(", "-", "1", ")", ")", "\n", "x_repeat", "=", "x2", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "x1", ".", "size", "(", "1", ")", ",", "1", ",", "1", ")", ".", "unsqueeze", "(", "-", "2", ")", "\n", "\n", "message", "=", "torch", ".", "einsum", "(", "\"abcde,abcef->abcdf\"", ",", "\n", "(", "x_repeat", ",", "message_matrix", ")", ")", "\n", "message", "=", "message", ".", "squeeze", "(", "-", "2", ")", "\n", "message", "=", "message", ".", "sum", "(", "2", ")", ".", "squeeze", "(", ")", "\n", "\n", "reshaped_message", "=", "message", ".", "view", "(", "-", "1", ",", "x1", ".", "size", "(", "-", "1", ")", ")", "\n", "reshaped_x", "=", "x1", ".", "view", "(", "-", "1", ",", "x1", ".", "size", "(", "-", "1", ")", ")", "\n", "retval", "=", "self", ".", "C", "(", "reshaped_message", ",", "reshaped_x", ")", "\n", "retval", "=", "retval", ".", "view", "(", "x1", ".", "size", "(", "0", ")", ",", "x1", ".", "size", "(", "1", ")", ",", "x1", ".", "size", "(", "2", ")", ")", "\n", "return", "retval", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.layers.InteractionNet.__init__": [[46, 53], ["super().__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.GRUCell", "torch.GRUCell", "torch.GRUCell"], "methods", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.CNN3D_KDEEP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_edge_feature", ",", "n_atom_feature", ")", ":", "\n", "        ", "super", "(", "InteractionNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "W", "=", "nn", ".", "Linear", "(", "n_atom_feature", ",", "n_atom_feature", ")", "\n", "#self.M = nn.Linear(n_atom_feature, n_atom_feature)", "\n", "self", ".", "M", "=", "nn", ".", "Linear", "(", "n_atom_feature", ",", "n_atom_feature", ")", "\n", "self", ".", "C", "=", "nn", ".", "GRUCell", "(", "n_atom_feature", ",", "n_atom_feature", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.layers.InteractionNet.forward": [[54, 67], ["x2.unsqueeze().repeat", "layers.InteractionNet.W", "torch.relu", "torch.relu", "torch.relu", "retval.reshape.reshape.size", "layers.InteractionNet.C", "retval.reshape.reshape.reshape", "x1.size", "retval.reshape.reshape.reshape", "x1.reshape", "x1.size", "x1.size", "x1.size", "x2.unsqueeze", "layers.InteractionNet.M", "valid_edge.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ",", "edge", ",", "valid_edge", ")", ":", "\n", "        ", "new_edge", "=", "x2", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "x1", ".", "size", "(", "1", ")", ",", "1", ",", "1", ")", "\n", "retval", "=", "0", "\n", "\n", "m1", "=", "self", ".", "W", "(", "x1", ")", "\n", "m2", "=", "(", "self", ".", "M", "(", "new_edge", ")", "*", "\n", "valid_edge", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "max", "(", "2", ")", "[", "0", "]", "\n", "retval", "=", "F", ".", "relu", "(", "m1", "+", "m2", ")", "\n", "feature_size", "=", "retval", ".", "size", "(", "-", "1", ")", "\n", "retval", "=", "self", ".", "C", "(", "retval", ".", "reshape", "(", "-", "1", ",", "feature_size", ")", ",", "\n", "x1", ".", "reshape", "(", "-", "1", ",", "feature_size", ")", ")", "\n", "retval", "=", "retval", ".", "reshape", "(", "x1", ".", "size", "(", "0", ")", ",", "x1", ".", "size", "(", "1", ")", ",", "x1", ".", "size", "(", "2", ")", ")", "\n", "return", "retval", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.layers.IntraNet.__init__": [[70, 80], ["super().__init__", "torch.GRUCell", "torch.GRUCell", "torch.GRUCell", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.CNN3D_KDEEP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_atom_feature", ",", "n_edge_feature", ")", ":", "\n", "        ", "super", "(", "IntraNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "C", "=", "nn", ".", "GRUCell", "(", "n_atom_feature", ",", "n_atom_feature", ")", "\n", "self", ".", "cal_message", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "n_atom_feature", "*", "2", "+", "n_edge_feature", ",", "n_atom_feature", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "n_atom_feature", ",", "n_atom_feature", "*", "3", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "n_atom_feature", "*", "3", ",", "n_atom_feature", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.layers.IntraNet.forward": [[82, 102], ["x.unsqueeze().repeat", "x.unsqueeze().repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "layers.IntraNet.cal_message", "message.div.div.sum().squeeze", "adj.sum", "message.div.div.div", "message.div.div.view", "x.view", "layers.IntraNet.C", "retval.view.view.view", "x.size", "x.size", "adj.unsqueeze().repeat", "x.size", "x.size", "x.size", "x.size", "x.size", "x.unsqueeze", "x.unsqueeze", "message.div.div.size", "message.div.div.sum", "adj.sum.expand_as", "adj.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "edge", ",", "adj", ",", "x", ")", ":", "\n", "        ", "h1", "=", "x", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "x", ".", "size", "(", "1", ")", ",", "1", ",", "1", ")", "\n", "h2", "=", "x", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "x", ".", "size", "(", "1", ")", ",", "1", ")", "\n", "\n", "concat", "=", "torch", ".", "cat", "(", "[", "h1", ",", "h2", ",", "edge", "]", ",", "-", "1", ")", "\n", "message", "=", "self", ".", "cal_message", "(", "concat", ")", "\n", "message", "=", "message", "*", "adj", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "message", ".", "size", "(", "-", "1", ")", ")", "\n", "message", "=", "message", ".", "sum", "(", "2", ")", ".", "squeeze", "(", ")", "\n", "\n", "#norm = torch.norm(message, p=2, dim=-1, keepdim=True)", "\n", "#message = message.div(norm.expand_as(message))", "\n", "norm", "=", "adj", ".", "sum", "(", "2", ",", "keepdim", "=", "True", ")", "\n", "message", "=", "message", ".", "div", "(", "norm", ".", "expand_as", "(", "message", ")", "+", "1e-6", ")", "\n", "\n", "reshaped_message", "=", "message", ".", "view", "(", "-", "1", ",", "x", ".", "size", "(", "-", "1", ")", ")", "\n", "reshaped_x", "=", "x", ".", "view", "(", "-", "1", ",", "x", ".", "size", "(", "-", "1", ")", ")", "\n", "retval", "=", "self", ".", "C", "(", "reshaped_message", ",", "reshaped_x", ")", "\n", "retval", "=", "retval", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ",", "x", ".", "size", "(", "2", ")", ")", "\n", "\n", "return", "retval", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.layers.GAT_gate.__init__": [[105, 112], ["super().__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.CNN3D_KDEEP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_in_feature", ",", "n_out_feature", ")", ":", "\n", "        ", "super", "(", "GAT_gate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "W", "=", "nn", ".", "Linear", "(", "n_in_feature", ",", "n_out_feature", ")", "\n", "#self.A = nn.Parameter(torch.Tensor(n_out_feature, n_out_feature))", "\n", "self", ".", "A", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "size", "=", "(", "n_out_feature", ",", "n_out_feature", ")", ")", ")", "\n", "self", ".", "gate", "=", "nn", ".", "Linear", "(", "n_in_feature", "+", "n_out_feature", ",", "1", ")", "\n", "self", ".", "leakyrelu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.layers.GAT_gate.forward": [[113, 154], ["layers.GAT_gate.W", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.softmax", "torch.softmax", "torch.softmax", "torch.relu", "torch.relu", "torch.relu", "torch.sigmoid().repeat", "torch.sigmoid().repeat", "torch.sigmoid().repeat", "torch.sigmoid().repeat", "torch.sigmoid().repeat", "torch.sigmoid().repeat", "torch.sigmoid().repeat", "torch.sigmoid().repeat", "torch.sigmoid().repeat", "torch.einsum.permute", "torch.einsum.permute", "torch.einsum.permute", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "x.size", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "layers.GAT_gate.gate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "adj", ")", ":", "\n", "        ", "\"\"\"\\\n-graph attention gate\nh = WX [n_atom * n_out_feature]\ne = WXA * tr(WX) + tr(WXA * tr(WX)) [n_atom * n_atom]\nattention = Softmax(torch.where(adj > 1e-6, e, zero_vec) \\\n* adj [n_atom * n_atom]\n    => if adjacency element\"s value bigger than 1e-6 (if certain relation \\\nexists) then attention value becomes e\"s element at same location else zero \\\nvector\"s element at same location\nself.gate(x + zero_vec) [n_atom * 1]\nh_prime = relu(attention * h) [n_atom * n_out_feature]\ncoeff = Sigmoid(self.gate(x + zero_vec)).repeat(1, 1, X.size(-1)) \\\n[n_atom * n_in_feature]\n    => working as coefficient indicating importance ratio between X and \\\natt_result. Coefficient multiplies same attention values to all elements in \\\nsingle row.\nreturn coeff * X + (1-coeff) * h_prime\nchoose attention component via tr(WXB + tr(WX)) that component at the same \\\nplace in adjacency matrix has bigger value than 1e-6 then apply softmax \\\nfunction to attention matrix, multiply adjacency matrix to that then multiply \\\nit with WX\n:param x:   atom feature one-hot vector of ligand or protein molecule\n:param adj: adjacency matrix of ligand or protein molecule\n:return:    attention-multiplied matrix\"\"\"", "\n", "h", "=", "self", ".", "W", "(", "x", ")", "\n", "e", "=", "torch", ".", "einsum", "(", "\"ijl,ikl->ijk\"", ",", "(", "torch", ".", "matmul", "(", "h", ",", "self", ".", "A", ")", ",", "h", ")", ")", "\n", "e", "=", "e", "+", "e", ".", "permute", "(", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "# to make softmax result value to zero", "\n", "zero_vec", "=", "-", "9e15", "*", "torch", ".", "ones_like", "(", "e", ")", "\n", "attention", "=", "torch", ".", "where", "(", "adj", ">", "1e-6", ",", "e", ",", "zero_vec", ")", "\n", "attention", "=", "F", ".", "softmax", "(", "attention", ",", "dim", "=", "-", "1", ")", "\n", "#attention = F.dropout(attention, self.dropout, training=self.training)", "\n", "#h_prime = torch.matmul(attention, h)", "\n", "attention", "=", "attention", "*", "adj", "\n", "h_prime", "=", "F", ".", "relu", "(", "torch", ".", "einsum", "(", "\"aij,ajk->aik\"", ",", "(", "attention", ",", "h", ")", ")", ")", "\n", "\n", "coeff", "=", "torch", ".", "sigmoid", "(", "\n", "self", ".", "gate", "(", "torch", ".", "cat", "(", "[", "x", ",", "h_prime", "]", ",", "-", "1", ")", ")", ")", ".", "repeat", "(", "1", ",", "1", ",", "x", ".", "size", "(", "-", "1", ")", ")", "\n", "retval", "=", "coeff", "*", "x", "+", "(", "1", "-", "coeff", ")", "*", "h_prime", "\n", "return", "retval", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.layers.GConv_gate.__init__": [[157, 162], ["super().__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.GRUCell", "torch.GRUCell", "torch.GRUCell"], "methods", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.CNN3D_KDEEP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_in_feature", ",", "n_out_feature", ")", ":", "\n", "        ", "super", "(", "GConv_gate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "W", "=", "nn", ".", "Linear", "(", "n_in_feature", ",", "n_out_feature", ")", "\n", "self", ".", "gate", "=", "nn", ".", "Linear", "(", "n_out_feature", "*", "2", ",", "1", ")", "\n", "self", ".", "C", "=", "nn", ".", "GRUCell", "(", "n_atom_feature", ",", "n_atom_feature", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.layers.GConv_gate.forward": [[163, 173], ["layers.GConv_gate.W", "torch.relu", "torch.relu", "torch.relu", "torch.relu.size", "layers.GConv_gate.C", "retval.reshape.reshape.reshape", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.relu.reshape", "x.reshape", "x.size", "x.size", "x.size", "adj.clone"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "adj", ")", ":", "\n", "        ", "m", "=", "self", ".", "W", "(", "x", ")", "\n", "m", "=", "F", ".", "relu", "(", "torch", ".", "einsum", "(", "\"xjk,xkl->xjl\"", ",", "(", "adj", ".", "clone", "(", ")", ",", "m", ")", ")", ")", "\n", "feature_size", "=", "m", ".", "size", "(", "-", "1", ")", "\n", "retval", "=", "self", ".", "C", "(", "m", ".", "reshape", "(", "-", "1", ",", "feature_size", ")", ",", "\n", "x", ".", "reshape", "(", "-", "1", ",", "feature_size", ")", ")", "\n", "retval", "=", "retval", ".", "reshape", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ",", "x", ".", "size", "(", "2", ")", ")", "\n", "\n", "#x = torch.bmm(adj, x)", "\n", "return", "retval", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.layers.ConcreteDropout.__init__": [[176, 188], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty"], "methods", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.CNN3D_KDEEP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "weight_regularizer", "=", "1e-6", ",", "\n", "dropout_regularizer", "=", "1e-5", ",", "init_min", "=", "0.1", ",", "init_max", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "ConcreteDropout", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "weight_regularizer", "=", "weight_regularizer", "\n", "self", ".", "dropout_regularizer", "=", "dropout_regularizer", "\n", "\n", "init_min", "=", "np", ".", "log", "(", "init_min", ")", "-", "np", ".", "log", "(", "1.", "-", "init_min", ")", "\n", "init_max", "=", "np", ".", "log", "(", "init_max", ")", "-", "np", ".", "log", "(", "1.", "-", "init_max", ")", "\n", "\n", "self", ".", "p_logit", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "empty", "(", "1", ")", ".", "uniform_", "(", "init_min", ",", "init_max", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.layers.ConcreteDropout.forward": [[189, 211], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "layer.parameters", "x1[].numel", "layer", "layer", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "layers.ConcreteDropout._concrete_dropout", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.layers.ConcreteDropout._concrete_dropout"], ["", "def", "forward", "(", "self", ",", "x1", ",", "layer", ",", "additional_args", "=", "None", ")", ":", "\n", "        ", "p", "=", "torch", ".", "sigmoid", "(", "self", ".", "p_logit", ")", "\n", "if", "additional_args", "is", "None", ":", "\n", "            ", "out", "=", "layer", "(", "self", ".", "_concrete_dropout", "(", "x1", ",", "p", ")", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "layer", "(", "x1", ",", "*", "aditional_args", ")", "\n", "\n", "", "sum_of_square", "=", "0", "\n", "for", "param", "in", "layer", ".", "parameters", "(", ")", ":", "\n", "            ", "sum_of_square", "+=", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "param", ",", "2", ")", ")", "\n", "\n", "", "weights_regularizer", "=", "self", ".", "weight_regularizer", "*", "sum_of_square", "/", "(", "1", "-", "p", ")", "\n", "\n", "dropout_regularizer", "=", "p", "*", "torch", ".", "log", "(", "p", ")", "\n", "dropout_regularizer", "+=", "(", "1.", "-", "p", ")", "*", "torch", ".", "log", "(", "1.", "-", "p", ")", "\n", "\n", "# Number of elements of first item in batch", "\n", "input_dimensionality", "=", "x1", "[", "0", "]", ".", "numel", "(", ")", "\n", "dropout_regularizer", "*=", "self", ".", "dropout_regularizer", "*", "input_dimensionality", "\n", "\n", "regularization", "=", "weights_regularizer", "+", "dropout_regularizer", "\n", "return", "out", ",", "regularization", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.layers.ConcreteDropout._concrete_dropout": [[212, 226], ["torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["None"], ["", "def", "_concrete_dropout", "(", "self", ",", "x", ",", "p", ")", ":", "\n", "        ", "eps", "=", "1e-7", "\n", "temp", "=", "0.1", "\n", "\n", "unif_noise", "=", "torch", ".", "rand_like", "(", "x", ")", "\n", "\n", "drop_prob", "=", "(", "torch", ".", "log", "(", "p", "+", "eps", ")", "\n", "-", "torch", ".", "log", "(", "1", "-", "p", "+", "eps", ")", "\n", "+", "torch", ".", "log", "(", "unif_noise", "+", "eps", ")", "\n", "-", "torch", ".", "log", "(", "1", "-", "unif_noise", "+", "eps", ")", ")", "\n", "\n", "drop_prob", "=", "torch", ".", "sigmoid", "(", "drop_prob", "/", "temp", ")", "\n", "random_tensor", "=", "1", "-", "drop_prob", "\n", "retain_prob", "=", "1", "-", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.layers.MultiHeadAttention.__init__": [[229, 253], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "numpy.ones", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.CNN3D_KDEEP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "ninfo", ")", ":", "\n", "        ", "super", "(", "MultiHeadAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "ninfo", "=", "ninfo", "\n", "self", ".", "ligand_wq", "=", "nn", ".", "Linear", "(", "args", ".", "dim_gnn", ",", "args", ".", "dim_gnn", ")", "\n", "self", ".", "ligand_wk", "=", "nn", ".", "Linear", "(", "args", ".", "dim_gnn", ",", "args", ".", "dim_gnn", ")", "\n", "self", ".", "ligand_wv", "=", "nn", ".", "Linear", "(", "args", ".", "dim_gnn", ",", "args", ".", "dim_gnn", ")", "\n", "self", ".", "protein_wq", "=", "nn", ".", "Linear", "(", "args", ".", "dim_gnn", ",", "args", ".", "dim_gnn", ")", "\n", "self", ".", "protein_wk", "=", "nn", ".", "Linear", "(", "args", ".", "dim_gnn", ",", "args", ".", "dim_gnn", ")", "\n", "self", ".", "protein_wv", "=", "nn", ".", "Linear", "(", "args", ".", "dim_gnn", ",", "args", ".", "dim_gnn", ")", "\n", "self", ".", "batch", "=", "args", ".", "batch_size", "\n", "if", "args", ".", "ngpu", ":", "\n", "            ", "shape", "=", "(", "self", ".", "batch", "//", "args", ".", "ngpu", ",", "ninfo", ",", "args", ".", "dim_gnn", ")", "\n", "", "elif", "args", ".", "ngpu_on_train", ":", "\n", "            ", "shape", "=", "(", "self", ".", "batch", "//", "args", ".", "ngpu_on_train", ",", "ninfo", ",", "args", ".", "dim_gnn", ")", "\n", "", "else", ":", "\n", "            ", "shape", "=", "(", "self", ".", "batch", ",", "ninfo", ",", "args", ".", "dim_gnn", ")", "\n", "", "self", ".", "seed_vector", "=", "np", ".", "ones", "(", "shape", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "self", ".", "depth", "=", "args", ".", "dim_gnn", "//", "ninfo", "\n", "self", ".", "q", "=", "nn", ".", "Parameter", "(", "torch", ".", "from_numpy", "(", "self", ".", "seed_vector", ")", ".", "float", "(", ")", ",", "\n", "requires_grad", "=", "True", ")", "\n", "self", ".", "scale", "=", "nn", ".", "Parameter", "(", "torch", ".", "sqrt", "(", "torch", ".", "FloatTensor", "(", "[", "self", ".", "depth", "]", ")", ")", ",", "\n", "requires_grad", "=", "False", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.layers.MultiHeadAttention.forward": [[254, 290], ["x.sum().unsqueeze", "x.sum().unsqueeze.repeat", "x.sum().unsqueeze", "x.sum().unsqueeze.repeat", "layers.MultiHeadAttention.ligand_wq", "layers.MultiHeadAttention.ligand_wk", "layers.MultiHeadAttention.ligand_wv", "layers.MultiHeadAttention._split_heads", "layers.MultiHeadAttention._split_heads", "layers.MultiHeadAttention._split_heads", "layers.MultiHeadAttention.protein_wq", "layers.MultiHeadAttention.protein_wk", "layers.MultiHeadAttention.protein_wv", "layers.MultiHeadAttention._split_heads", "layers.MultiHeadAttention._split_heads", "layers.MultiHeadAttention._split_heads", "layers.MultiHeadAttention._multi_head_attention", "ligand_h.view.view.view", "layers.MultiHeadAttention._multi_head_attention", "protein_h.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "total_h.sum.sum.sum", "x.sum", "x.sum"], "methods", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.layers.NewMultiHeadAttention._split_heads", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.layers.NewMultiHeadAttention._split_heads", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.layers.NewMultiHeadAttention._split_heads", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.layers.NewMultiHeadAttention._split_heads", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.layers.NewMultiHeadAttention._split_heads", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.layers.NewMultiHeadAttention._split_heads", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.layers.NewMultiHeadAttention._multi_head_attention", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.layers.NewMultiHeadAttention._multi_head_attention"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        1. cut input X into ninfo number of tensors\n        2. calculate multiple attentions for each tensors\n        3. concat all attention and multiply to all tensors\n        \"\"\"", "\n", "batch_size", "=", "self", ".", "q", ".", "shape", "[", "0", "]", "\n", "ligand", "=", "x", ".", "sum", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "ligand_embedded", "=", "ligand", ".", "repeat", "(", "1", ",", "1", ",", "self", ".", "args", ".", "dim_gnn", ")", "\n", "protein", "=", "x", ".", "sum", "(", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "protein_embedded", "=", "protein", ".", "repeat", "(", "1", ",", "1", ",", "self", ".", "args", ".", "dim_gnn", ")", "\n", "\n", "ligand_q", "=", "self", ".", "ligand_wq", "(", "self", ".", "q", ")", "\n", "ligand_k", "=", "self", ".", "ligand_wk", "(", "ligand_embedded", ")", "\n", "ligand_v", "=", "self", ".", "ligand_wv", "(", "ligand_embedded", ")", "\n", "ligand_q", "=", "self", ".", "_split_heads", "(", "ligand_q", ")", "\n", "ligand_k", "=", "self", ".", "_split_heads", "(", "ligand_k", ")", "\n", "ligand_v", "=", "self", ".", "_split_heads", "(", "ligand_v", ")", "\n", "\n", "protein_q", "=", "self", ".", "protein_wq", "(", "self", ".", "q", ")", "\n", "protein_k", "=", "self", ".", "protein_wk", "(", "protein_embedded", ")", "\n", "protein_v", "=", "self", ".", "protein_wv", "(", "protein_embedded", ")", "\n", "protein_q", "=", "self", ".", "_split_heads", "(", "protein_q", ")", "\n", "protein_k", "=", "self", ".", "_split_heads", "(", "protein_k", ")", "\n", "protein_v", "=", "self", ".", "_split_heads", "(", "protein_v", ")", "\n", "\n", "ligand_h", "=", "self", ".", "_multi_head_attention", "(", "ligand_q", ",", "ligand_k", ",", "ligand_v", ")", "\n", "ligand_h", "=", "ligand_h", ".", "view", "(", "batch_size", ",", "-", "1", ",", "self", ".", "ninfo", ",", "self", ".", "depth", ")", "\n", "\n", "protein_h", "=", "self", ".", "_multi_head_attention", "(", "protein_q", ",", "protein_k", ",", "protein_v", ")", "\n", "protein_h", "=", "protein_h", ".", "view", "(", "batch_size", ",", "-", "1", ",", "self", ".", "ninfo", ",", "self", ".", "depth", ")", "\n", "\n", "total_h", "=", "torch", ".", "cat", "(", "[", "ligand_h", ",", "protein_h", "]", ",", "-", "1", ")", "\n", "total_h", "=", "total_h", ".", "sum", "(", "-", "1", ")", "\n", "\n", "return", "total_h", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.layers.MultiHeadAttention._split_heads": [[291, 296], ["x.permute.permute.view", "x.permute.permute.permute"], "methods", ["None"], ["", "def", "_split_heads", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "self", ".", "ninfo", ",", "self", ".", "depth", ")", "\n", "x", "=", "x", ".", "permute", "(", "(", "0", ",", "2", ",", "1", ",", "3", ")", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.layers.MultiHeadAttention._multi_head_attention": [[297, 304], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "layers.MultiHeadAttention.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose"], "methods", ["None"], ["", "def", "_multi_head_attention", "(", "self", ",", "xq", ",", "xk", ",", "xv", ")", ":", "\n", "        ", "matmul_qk", "=", "torch", ".", "matmul", "(", "xq", ",", "torch", ".", "transpose", "(", "xk", ",", "2", ",", "3", ")", ")", "\n", "attn", "=", "matmul_qk", "/", "self", ".", "scale", "\n", "attn", "=", "self", ".", "softmax", "(", "attn", ")", "\n", "out", "=", "torch", ".", "matmul", "(", "attn", ",", "xv", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.layers.NewMultiHeadAttention.__init__": [[307, 324], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "numpy.ones", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.CNN3D_KDEEP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "ninfo", ")", ":", "\n", "        ", "super", "(", "NewMultiHeadAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "ninfo", "=", "ninfo", "\n", "self", ".", "embedding", "=", "nn", ".", "Linear", "(", "args", ".", "dim_gnn", ",", "args", ".", "dim_gnn", ")", "\n", "self", ".", "wq", "=", "nn", ".", "Linear", "(", "args", ".", "dim_gnn", ",", "args", ".", "dim_gnn", ")", "\n", "self", ".", "wk", "=", "nn", ".", "Linear", "(", "args", ".", "dim_gnn", ",", "args", ".", "dim_gnn", ")", "\n", "self", ".", "wv", "=", "nn", ".", "Linear", "(", "args", ".", "dim_gnn", ",", "args", ".", "dim_gnn", ")", "\n", "self", ".", "batch", "=", "args", ".", "batch_size", "\n", "self", ".", "seed_vector", "=", "np", ".", "ones", "(", "(", "self", ".", "batch", ",", "4", ",", "args", ".", "dim_gnn", ")", ",", "\n", "dtype", "=", "np", ".", "float64", ")", "\n", "self", ".", "depth", "=", "args", ".", "dim_gnn", "//", "ninfo", "\n", "self", ".", "q", "=", "nn", ".", "Parameter", "(", "torch", ".", "from_numpy", "(", "self", ".", "seed_vector", ")", ".", "float", "(", ")", ",", "\n", "requires_grad", "=", "True", ")", "\n", "self", ".", "scale", "=", "nn", ".", "Parameter", "(", "torch", ".", "sqrt", "(", "torch", ".", "FloatTensor", "(", "[", "self", ".", "depth", "]", ")", ")", ",", "\n", "requires_grad", "=", "False", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.layers.NewMultiHeadAttention.forward": [[325, 348], ["torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "info.sum().unsqueeze().repeat.sum().unsqueeze().repeat.sum().unsqueeze().repeat", "layers.NewMultiHeadAttention.embedding", "layers.NewMultiHeadAttention.wq", "layers.NewMultiHeadAttention.wk", "layers.NewMultiHeadAttention.wv", "layers.NewMultiHeadAttention._split_heads", "layers.NewMultiHeadAttention._split_heads", "layers.NewMultiHeadAttention._split_heads", "layers.NewMultiHeadAttention._multi_head_attention", "h.view.view.view", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "info.sum().unsqueeze().repeat.sum().unsqueeze().repeat.sum().unsqueeze", "info.sum().unsqueeze().repeat.sum().unsqueeze().repeat.sum"], "methods", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.layers.NewMultiHeadAttention._split_heads", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.layers.NewMultiHeadAttention._split_heads", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.layers.NewMultiHeadAttention._split_heads", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.layers.NewMultiHeadAttention._multi_head_attention"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        1. cut input X into ninfo number of tensors\n        2. calculate multiple attentions for each tensors\n        3. concat all attention and multiply to all tensors\n        \"\"\"", "\n", "batch_size", "=", "self", ".", "q", ".", "shape", "[", "0", "]", "\n", "info", "=", "torch", ".", "einsum", "(", "\"ijk,ikl->ijl\"", ",", "x", ",", "torch", ".", "transpose", "(", "x", ",", "1", ",", "2", ")", ")", "\n", "info", "=", "info", ".", "sum", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "self", ".", "args", ".", "dim_gnn", ")", "\n", "info_embedded", "=", "self", ".", "embedding", "(", "info", ")", "\n", "\n", "q", "=", "self", ".", "wq", "(", "self", ".", "q", ")", "\n", "k", "=", "self", ".", "wk", "(", "info_embedded", ")", "\n", "v", "=", "self", ".", "wv", "(", "info_embedded", ")", "\n", "\n", "split_q", "=", "self", ".", "_split_heads", "(", "q", ")", "\n", "split_k", "=", "self", ".", "_split_heads", "(", "k", ")", "\n", "split_v", "=", "self", ".", "_split_heads", "(", "v", ")", "\n", "\n", "h", "=", "self", ".", "_multi_head_attention", "(", "split_q", ",", "split_k", ",", "split_v", ")", "\n", "h", "=", "h", ".", "view", "(", "batch_size", ",", "-", "1", ",", "self", ".", "args", ".", "dim_gnn", ")", "\n", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.layers.NewMultiHeadAttention._split_heads": [[349, 354], ["x.permute.permute.view", "x.permute.permute.permute"], "methods", ["None"], ["", "def", "_split_heads", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "self", ".", "ninfo", ",", "self", ".", "depth", ")", "\n", "x", "=", "x", ".", "permute", "(", "(", "0", ",", "2", ",", "1", ",", "3", ")", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.layers.NewMultiHeadAttention._multi_head_attention": [[355, 362], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "layers.NewMultiHeadAttention.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose"], "methods", ["None"], ["", "def", "_multi_head_attention", "(", "self", ",", "xq", ",", "xk", ",", "xv", ")", ":", "\n", "        ", "matmul_qk", "=", "torch", ".", "matmul", "(", "xq", ",", "torch", ".", "transpose", "(", "xk", ",", "2", ",", "3", ")", ")", "\n", "attn", "=", "matmul_qk", "/", "self", ".", "scale", "\n", "attn", "=", "self", ".", "softmax", "(", "attn", ")", "\n", "out", "=", "torch", ".", "matmul", "(", "attn", ",", "xv", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.layers.GraphAttention.__init__": [[365, 377], ["torch.Module.__init__", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.CNN3D_KDEEP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "ninfo", ")", ":", "\n", "        ", "super", "(", "GraphAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "ninfo", "=", "ninfo", "# 4", "\n", "self", ".", "wq", "=", "[", "nn", ".", "Linear", "(", "args", ".", "dim_gnn", ",", "args", ".", "dim_gnn", ")", "\n", "for", "_", "in", "range", "(", "args", ".", "n_gnn", ")", "]", "\n", "self", ".", "wk", "=", "[", "nn", ".", "Linear", "(", "args", ".", "dim_gnn", ",", "args", ".", "dim_gnn", ")", "\n", "for", "_", "in", "range", "(", "args", ".", "n_gnn", ")", "]", "\n", "self", ".", "wv", "=", "[", "nn", ".", "Linear", "(", "args", ".", "dim_gnn", ",", "args", ".", "dim_gnn", ")", "\n", "for", "_", "in", "range", "(", "args", ".", "n_gnn", ")", "]", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.layers.GraphAttention.forward": [[378, 395], ["torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "layers.GraphAttention._arbit_embedding", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "layers.GraphAttention._arbit_embedding", "layers.GraphAttention.relu", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "layers.GraphAttention._attn_matrix", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "h_list.append"], "methods", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.layers.GraphAttention._arbit_embedding", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.layers.GraphAttention._arbit_embedding", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.layers.GraphAttention._attn_matrix"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_info", "=", "torch", ".", "einsum", "(", "\"ijk,ikl->ijl\"", ",", "x", ",", "torch", ".", "transpose", "(", "x", ",", "1", ",", "2", ")", ")", "\n", "# x_info = x.sum(-1)", "\n", "embedded", "=", "self", ".", "_arbit_embedding", "(", "x_info", ")", "\n", "h_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "args", ".", "n_gnn", ")", ":", "\n", "            ", "q", "=", "self", ".", "wq", "[", "i", "]", "(", "embedded", ")", "\n", "k", "=", "self", ".", "wk", "[", "i", "]", "(", "embedded", ")", "\n", "v", "=", "self", ".", "wv", "[", "i", "]", "(", "embedded", ")", "\n", "attn", "=", "self", ".", "_attn_matrix", "(", "q", ",", "v", ",", "x_info", ")", "\n", "h", "=", "torch", ".", "bmm", "(", "attn", ",", "v", ")", "\n", "h_list", ".", "append", "(", "h", ")", "\n", "", "h", "=", "torch", ".", "cat", "(", "h_list", ",", "-", "1", ")", "\n", "h", "=", "self", ".", "_arbit_embedding", "(", "h", ")", "\n", "h", "=", "self", ".", "relu", "(", "h", ")", "\n", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.layers.GraphAttention._arbit_embedding": [[396, 402], ["torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear."], "methods", ["None"], ["", "def", "_arbit_embedding", "(", "self", ",", "vec", ")", ":", "\n", "        ", "dim", "=", "vec", ".", "shape", "[", "-", "1", "]", "\n", "embedding", "=", "nn", ".", "Linear", "(", "dim", ",", "self", ".", "args", ".", "dim_gnn", ")", "\n", "embedded", "=", "embedding", "(", "vec", ")", "\n", "\n", "return", "embedded", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.layers.GraphAttention._attn_matrix": [[403, 411], ["torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "layers.GraphAttention.tanh", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose"], "methods", ["None"], ["", "def", "_attn_matrix", "(", "self", ",", "q", ",", "k", ",", "info", ")", ":", "\n", "        ", "scale", "=", "torch", ".", "sqrt", "(", "torch", ".", "Tensor", "(", "[", "k", ".", "shape", "[", "-", "1", "]", "]", ")", ")", "\n", "attn", "=", "torch", ".", "einsum", "(", "\"ijk,ikl->ijl\"", ",", "q", ",", "torch", ".", "transpose", "(", "k", ",", "1", ",", "2", ")", ")", "\n", "attn", "=", "torch", ".", "bmm", "(", "attn", ",", "info", ")", "\n", "attn", "/=", "scale", "\n", "attn", "=", "self", ".", "tanh", "(", "attn", ")", "\n", "\n", "return", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.layers.ConvBlock.__init__": [[414, 426], ["torch.Module.__init__", "layers.ConvBlock.block.append", "layers.ConvBlock.block.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "layers.ConvBlock.block.append", "torch.ReLU", "torch.ReLU", "torch.ReLU", "layers.ConvBlock.block.append", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Dropout3d", "torch.Dropout3d", "torch.Dropout3d"], "methods", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.CNN3D_KDEEP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_feature", ",", "out_feature", ",", "do", "=", "0.0", ",", "stride", "=", "1", ",", "kernel", "=", "3", ",", "\n", "pad", "=", "1", ",", "bn", "=", "True", ")", ":", "\n", "        ", "super", "(", "ConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "block", "=", "[", "]", "\n", "self", ".", "block", ".", "append", "(", "\n", "nn", ".", "Conv3d", "(", "in_feature", ",", "out_feature", ",", "kernel", ",", "stride", ",", "pad", ")", ")", "\n", "if", "bn", ":", "\n", "            ", "self", ".", "block", ".", "append", "(", "nn", ".", "BatchNorm3d", "(", "out_feature", ")", ")", "\n", "", "self", ".", "block", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "if", "do", "!=", "0", ":", "\n", "            ", "self", ".", "block", ".", "append", "(", "nn", ".", "Dropout3d", "(", "p", "=", "do", ")", ")", "\n", "", "self", ".", "block", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "block", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.layers.ConvBlock.forward": [[427, 429], ["layers.ConvBlock.block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "block", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.layers.PredictBlock.__init__": [[432, 440], ["torch.Module.__init__", "layers.PredictBlock.block.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "layers.PredictBlock.block.append", "layers.PredictBlock.block.append", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.CNN3D_KDEEP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_feature", ",", "out_feature", ",", "dropout", ",", "is_last", ")", ":", "\n", "        ", "super", "(", "PredictBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "block", "=", "[", "]", "\n", "self", ".", "block", ".", "append", "(", "nn", ".", "Linear", "(", "in_feature", ",", "out_feature", ")", ")", "\n", "if", "not", "is_last", ":", "\n", "            ", "self", ".", "block", ".", "append", "(", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", ")", "\n", "self", ".", "block", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "", "self", ".", "block", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "block", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.layers.PredictBlock.forward": [[441, 443], ["layers.PredictBlock.block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "block", "(", "input", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.DTIHarmonic.__init__": [[22, 91], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "layers.GAT_gate", "int", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "range", "layers.InteractionNet", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "range", "range"], "methods", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.CNN3D_KDEEP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "DTIHarmonic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "node_embedding", "=", "nn", ".", "Linear", "(", "54", ",", "args", ".", "dim_gnn", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "gconv", "=", "nn", ".", "ModuleList", "(", "[", "GAT_gate", "(", "args", ".", "dim_gnn", ",", "args", ".", "dim_gnn", ")", "\n", "for", "_", "in", "range", "(", "args", ".", "n_gnn", ")", "]", ")", "\n", "if", "args", ".", "interaction_net", ":", "\n", "            ", "num_filter", "=", "int", "(", "10.0", "/", "args", ".", "filter_spacing", ")", "+", "1", "\n", "self", ".", "filter_center", "=", "torch", ".", "Tensor", "(", "[", "args", ".", "filter_spacing", "*", "i", "for", "i", "\n", "in", "range", "(", "num_filter", ")", "]", ")", "\n", "self", ".", "filter_gamma", "=", "args", ".", "filter_gamma", "\n", "self", ".", "interaction_net", "=", "nn", ".", "ModuleList", "(", "\n", "[", "InteractionNet", "(", "num_filter", ",", "args", ".", "dim_gnn", ")", "\n", "for", "_", "in", "range", "(", "args", ".", "n_gnn", ")", "]", ")", "\n", "", "self", ".", "num_interaction_type", "=", "len", "(", "dataset", ".", "interaction_types", ")", "\n", "\n", "self", ".", "cal_coolomb_interaction_A", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "args", ".", "dim_gnn", "*", "2", ",", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "128", ",", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "self", ".", "cal_coolomb_interaction_N", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "args", ".", "dim_gnn", "*", "2", ",", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "128", ",", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "\n", "self", ".", "cal_vdw_interaction_A", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "args", ".", "dim_gnn", "*", "2", ",", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "128", ",", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "self", ".", "cal_vdw_interaction_B", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "args", ".", "dim_gnn", "*", "2", ",", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "128", ",", "1", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "self", ".", "cal_vdw_interaction_N", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "args", ".", "dim_gnn", "*", "2", ",", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "128", ",", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "self", ".", "vina_hbond_coeff", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "[", "0.7", "]", ")", ")", "\n", "self", ".", "vina_hydrophobic_coeff", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "[", "0.3", "]", ")", ")", "\n", "self", ".", "vdw_coeff", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "[", "1.0", "]", ")", ")", "\n", "self", ".", "torsion_coeff", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "[", "1.0", "]", ")", ")", "\n", "self", ".", "rotor_coeff", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "[", "1.0", "]", ")", ")", "\n", "self", ".", "intercept", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "[", "0.0", "]", ")", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "if", "args", ".", "with_uncertainty", ":", "\n", "            ", "self", ".", "var_agg", "=", "args", ".", "var_agg", "\n", "self", ".", "var_abs", "=", "args", ".", "var_abs", "\n", "self", ".", "cal_variance_h", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "args", ".", "dim_gnn", "*", "2", ",", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "128", ",", "1", ")", "\n", ")", "\n", "a", "=", "torch", ".", "rand", "(", "1", ",", "dtype", "=", "torch", ".", "float32", ",", "\n", "device", "=", "device", ",", "requires_grad", "=", "True", ")", "\n", "b", "=", "torch", ".", "rand", "(", "1", ",", "dtype", "=", "torch", ".", "float32", ",", "\n", "device", "=", "device", ",", "requires_grad", "=", "True", ")", "**", "2", "\n", "self", ".", "cal_variance_r", "=", "lambda", "x", ":", "a", "*", "torch", ".", "exp", "(", "-", "b", "*", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.DTIHarmonic.vina_hbond": [[92, 107], ["vdw_radius1.unsqueeze().repeat", "vdw_radius2.unsqueeze().repeat", "retval.sum().sum().unsqueeze.sum().sum().unsqueeze.clamp", "retval.sum().sum().unsqueeze.sum().sum().unsqueeze.sum().sum().unsqueeze", "vdw_radius2.size", "vdw_radius1.size", "model.DTIHarmonic.cal_vdw_interaction_B().squeeze", "vdw_radius1.unsqueeze", "vdw_radius2.unsqueeze", "retval.sum().sum().unsqueeze.sum().sum().unsqueeze.sum().sum", "model.DTIHarmonic.cal_vdw_interaction_B", "retval.sum().sum().unsqueeze.sum().sum().unsqueeze.sum"], "methods", ["None"], ["", "", "def", "vina_hbond", "(", "self", ",", "dm", ",", "h", ",", "vdw_radius1", ",", "vdw_radius2", ",", "A", ")", ":", "\n", "        ", "vdw_radius1_repeat", "=", "vdw_radius1", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "vdw_radius2", ".", "size", "(", "1", ")", ")", "\n", "vdw_radius2_repeat", "=", "vdw_radius2", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "vdw_radius1", ".", "size", "(", "1", ")", ",", "1", ")", "\n", "B", "=", "self", ".", "cal_vdw_interaction_B", "(", "h", ")", ".", "squeeze", "(", "-", "1", ")", "*", "self", ".", "args", ".", "dev_vdw_radius", "\n", "dm_0", "=", "vdw_radius1_repeat", "+", "vdw_radius2_repeat", "+", "B", "\n", "dm", "=", "dm", "-", "dm_0", "\n", "retval", "=", "dm", "*", "A", "/", "-", "0.7", "\n", "retval", "=", "retval", ".", "clamp", "(", "min", "=", "0.0", ",", "max", "=", "1.0", ")", "\n", "coeff", "=", "self", ".", "vina_hbond_coeff", "*", "self", ".", "vina_hbond_coeff", "\n", "retval", "=", "retval", "*", "-", "coeff", "\n", "#retval = retval.clamp(min=0.0, max=1.0)*-0.587", "\n", "retval", "=", "retval", ".", "sum", "(", "-", "1", ")", ".", "sum", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "return", "retval", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.DTIHarmonic.vina_hydrophobic": [[108, 124], ["vdw_radius1.unsqueeze().repeat", "vdw_radius2.unsqueeze().repeat", "retval.sum().sum().unsqueeze.sum().sum().unsqueeze.clamp", "retval.sum().sum().unsqueeze.sum().sum().unsqueeze.sum().sum().unsqueeze", "vdw_radius2.size", "vdw_radius1.size", "model.DTIHarmonic.cal_vdw_interaction_B().squeeze", "vdw_radius1.unsqueeze", "vdw_radius2.unsqueeze", "retval.sum().sum().unsqueeze.sum().sum().unsqueeze.sum().sum", "model.DTIHarmonic.cal_vdw_interaction_B", "retval.sum().sum().unsqueeze.sum().sum().unsqueeze.sum"], "methods", ["None"], ["", "def", "vina_hydrophobic", "(", "self", ",", "dm", ",", "h", ",", "vdw_radius1", ",", "vdw_radius2", ",", "A", ")", ":", "\n", "        ", "vdw_radius1_repeat", "=", "vdw_radius1", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "vdw_radius2", ".", "size", "(", "1", ")", ")", "\n", "vdw_radius2_repeat", "=", "vdw_radius2", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "vdw_radius1", ".", "size", "(", "1", ")", ",", "1", ")", "\n", "B", "=", "self", ".", "cal_vdw_interaction_B", "(", "h", ")", ".", "squeeze", "(", "-", "1", ")", "*", "self", ".", "args", ".", "dev_vdw_radius", "\n", "dm_0", "=", "vdw_radius1_repeat", "+", "vdw_radius2_repeat", "+", "B", "\n", "dm", "=", "dm", "-", "dm_0", "\n", "\n", "retval", "=", "(", "-", "dm", "+", "1.5", ")", "*", "A", "\n", "retval", "=", "retval", ".", "clamp", "(", "min", "=", "0.0", ",", "max", "=", "1.0", ")", "\n", "#retval = retval.clamp(min=0.0, max=1.0)*-0.0351", "\n", "retval", "=", "retval", "*", "-", "self", ".", "vina_hydrophobic_coeff", "*", "self", ".", "vina_hydrophobic_coeff", "\n", "retval", "=", "retval", ".", "sum", "(", "-", "1", ")", ".", "sum", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "return", "retval", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.DTIHarmonic.cal_vdw_interaction": [[125, 155], ["valid1.unsqueeze().repeat", "valid2.unsqueeze().repeat", "vdw_radius1.unsqueeze().repeat", "vdw_radius2.unsqueeze().repeat", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "model.DTIHarmonic.cal_vdw_interaction_A().squeeze", "energy.sum().sum().unsqueeze.sum().sum().unsqueeze.clamp", "energy.sum().sum().unsqueeze.sum().sum().unsqueeze.sum().sum().unsqueeze", "valid2.size", "valid1.size", "vdw_radius2.size", "vdw_radius1.size", "model.DTIHarmonic.cal_vdw_interaction_B().squeeze", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "valid1.unsqueeze", "valid2.unsqueeze", "vdw_radius1.unsqueeze", "vdw_radius2.unsqueeze", "model.DTIHarmonic.cal_vdw_interaction_A", "energy.sum().sum().unsqueeze.sum().sum().unsqueeze.sum().sum", "model.DTIHarmonic.cal_vdw_interaction_B", "energy.sum().sum().unsqueeze.sum().sum().unsqueeze.sum"], "methods", ["None"], ["", "def", "cal_vdw_interaction", "(", "self", ",", "dm", ",", "h", ",", "vdw_radius1", ",", "vdw_radius2", ",", "\n", "vdw_epsilon", ",", "vdw_sigma", ",", "valid1", ",", "valid2", ")", ":", "\n", "        ", "valid1_repeat", "=", "valid1", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "valid2", ".", "size", "(", "1", ")", ")", "\n", "valid2_repeat", "=", "valid2", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "valid1", ".", "size", "(", "1", ")", ",", "1", ")", "\n", "vdw_radius1_repeat", "=", "vdw_radius1", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "vdw_radius2", ".", "size", "(", "1", ")", ")", "\n", "vdw_radius2_repeat", "=", "vdw_radius2", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "vdw_radius1", ".", "size", "(", "1", ")", ",", "1", ")", "\n", "\n", "B", "=", "self", ".", "cal_vdw_interaction_B", "(", "h", ")", ".", "squeeze", "(", "-", "1", ")", "*", "self", ".", "args", ".", "dev_vdw_radius", "\n", "dm_0", "=", "vdw_radius1_repeat", "+", "vdw_radius2_repeat", "+", "B", "\n", "#dm_0 = vdw_sigma", "\n", "dm_0", "[", "dm_0", "<", "0.0001", "]", "=", "1", "\n", "#N = self.cal_vdw_interaction_N(h).squeeze(-1)+5.5", "\n", "N", "=", "self", ".", "args", ".", "vdw_N", "\n", "vdw1", "=", "torch", ".", "pow", "(", "dm_0", "/", "dm", ",", "2", "*", "N", ")", "\n", "vdw2", "=", "-", "2", "*", "torch", ".", "pow", "(", "dm_0", "/", "dm", ",", "N", ")", "\n", "\n", "A", "=", "self", ".", "cal_vdw_interaction_A", "(", "h", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "A", "=", "A", "*", "(", "self", ".", "args", ".", "max_vdw_interaction", "-", "self", ".", "args", ".", "min_vdw_interaction", ")", "\n", "A", "=", "A", "+", "self", ".", "args", ".", "min_vdw_interaction", "\n", "#A = A*self.vdw_coeff*self.vdw_coeff", "\n", "#A = A*vdw_epsilon", "\n", "\n", "energy", "=", "vdw1", "+", "vdw2", "\n", "energy", "=", "energy", ".", "clamp", "(", "max", "=", "100", ")", "\n", "energy", "=", "energy", "*", "valid1_repeat", "*", "valid2_repeat", "\n", "energy", "=", "A", "*", "energy", "\n", "energy", "=", "energy", ".", "sum", "(", "1", ")", ".", "sum", "(", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "return", "energy", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.DTIHarmonic.cal_torsion_energy": [[156, 160], ["retval.unsqueeze"], "methods", ["None"], ["", "def", "cal_torsion_energy", "(", "self", ",", "torsion_energy", ")", ":", "\n", "        ", "retval", "=", "torsion_energy", "*", "self", ".", "vdw_coeff", "*", "self", ".", "vdw_coeff", "\n", "# retval=torsion_energy*self.torsion_coeff*self.torsion_coeff", "\n", "return", "retval", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.DTIHarmonic.cal_distance_matrix": [[161, 168], ["p1.unsqueeze().repeat", "p2.unsqueeze().repeat", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "p2.size", "p1.size", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "p1.unsqueeze", "p2.unsqueeze", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "def", "cal_distance_matrix", "(", "self", ",", "p1", ",", "p2", ",", "dm_min", ")", ":", "\n", "        ", "p1_repeat", "=", "p1", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "p2", ".", "size", "(", "1", ")", ",", "1", ")", "\n", "p2_repeat", "=", "p2", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "p1", ".", "size", "(", "1", ")", ",", "1", ",", "1", ")", "\n", "dm", "=", "torch", ".", "sqrt", "(", "torch", ".", "pow", "(", "p1_repeat", "-", "p2_repeat", ",", "2", ")", ".", "sum", "(", "-", "1", ")", "+", "1e-10", ")", "\n", "replace_vec", "=", "torch", ".", "ones_like", "(", "dm", ")", "*", "1e10", "\n", "dm", "=", "torch", ".", "where", "(", "dm", "<", "dm_min", ",", "replace_vec", ",", "dm", ")", "\n", "return", "dm", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.DTIHarmonic.get_embedding_vector": [[169, 210], ["model.DTIHarmonic.node_embedding", "model.DTIHarmonic.node_embedding", "range", "model.DTIHarmonic.cal_distance_matrix", "len", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "model.DTIHarmonic.unsqueeze().repeat", "model.DTIHarmonic.filter_center.unsqueeze().unsqueeze().unsqueeze().to", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "edge.detach.detach.detach", "model.DTIHarmonic.clone().detach", "range", "model.DTIHarmonic.filter_center.size", "len", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "model.DTIHarmonic.unsqueeze", "model.DTIHarmonic.filter_center.unsqueeze().unsqueeze().unsqueeze", "model.DTIHarmonic.clone", "edge.detach.detach.permute", "model.DTIHarmonic.clone().detach.permute", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "model.DTIHarmonic.filter_center.unsqueeze().unsqueeze", "model.DTIHarmonic.filter_center.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.GNN.cal_distance_matrix"], ["", "def", "get_embedding_vector", "(", "self", ",", "sample", ")", ":", "\n", "        ", "dropout", "=", "False", "\n", "if", "self", ".", "training", "or", "(", "not", "self", ".", "training", "and", "self", ".", "args", ".", "with_uncertainty", ")", ":", "\n", "            ", "dropout", "=", "True", "\n", "\n", "", "h1", "=", "self", ".", "node_embedding", "(", "sample", "[", "\"h1\"", "]", ")", "\n", "h2", "=", "self", ".", "node_embedding", "(", "sample", "[", "\"h2\"", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "gconv", ")", ")", ":", "\n", "            ", "h1", "=", "self", ".", "gconv", "[", "i", "]", "(", "h1", ",", "sample", "[", "\"adj1\"", "]", ")", "\n", "h2", "=", "self", ".", "gconv", "[", "i", "]", "(", "h2", ",", "sample", "[", "\"adj2\"", "]", ")", "\n", "h1", "=", "F", ".", "dropout", "(", "h1", ",", "training", "=", "dropout", ",", "p", "=", "self", ".", "args", ".", "dropout_rate", ")", "\n", "h2", "=", "F", ".", "dropout", "(", "h2", ",", "training", "=", "dropout", ",", "p", "=", "self", ".", "args", ".", "dropout_rate", ")", "\n", "", "pos1", ",", "pos2", "=", "sample", "[", "\"pos1\"", "]", ",", "sample", "[", "\"pos2\"", "]", "\n", "\n", "pos1", ".", "requires_grad", "=", "True", "\n", "dm", "=", "self", ".", "cal_distance_matrix", "(", "pos1", ",", "pos2", ",", "0.5", ")", "\n", "if", "self", ".", "args", ".", "interaction_net", ":", "\n", "            ", "edge", "=", "dm", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "\n", "self", ".", "filter_center", ".", "size", "(", "-", "1", ")", ")", "\n", "filter_center", "=", "self", ".", "filter_center", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "h1", ".", "device", ")", "\n", "\n", "edge", "=", "torch", ".", "exp", "(", "-", "torch", ".", "pow", "(", "edge", "-", "filter_center", ",", "2", ")", "\n", "*", "self", ".", "filter_gamma", ")", "\n", "edge", "=", "edge", ".", "detach", "(", ")", "\n", "adj12", "=", "dm", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "\n", "adj12", "[", "adj12", ">", "5", "]", "=", "0", "\n", "adj12", "[", "adj12", ">", "1e-3", "]", "=", "1", "\n", "adj12", "[", "adj12", "<", "1e-3", "]", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "interaction_net", ")", ")", ":", "\n", "                ", "new_h1", "=", "self", ".", "interaction_net", "[", "i", "]", "(", "h1", ",", "h2", ",", "edge", ",", "adj12", ")", "\n", "new_h2", "=", "self", ".", "interaction_net", "[", "i", "]", "(", "h2", ",", "h1", ",", "\n", "edge", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ",", "\n", "adj12", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "h1", ",", "h2", "=", "new_h1", ",", "new_h2", "\n", "h1", "=", "F", ".", "dropout", "(", "h1", ",", "training", "=", "dropout", ",", "p", "=", "self", ".", "args", ".", "dropout_rate", ")", "\n", "h2", "=", "F", ".", "dropout", "(", "h2", ",", "training", "=", "dropout", ",", "p", "=", "self", ".", "args", ".", "dropout_rate", ")", "\n", "", "", "return", "h1", ",", "h2", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.DTIHarmonic.forward": [[211, 290], ["model.DTIHarmonic.get_embedding_vector", "h1.unsqueeze().repeat", "h2.unsqueeze().repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.DTIHarmonic.cal_distance_matrix", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "h2.size", "h1.size", "model.DTIHarmonic.cal_variance_h().squeeze", "model.DTIHarmonic.cal_variance_r", "model.DTIHarmonic.cal_vdw_interaction", "model.DTIHarmonic.vina_hbond", "model.DTIHarmonic.vina_hbond", "model.DTIHarmonic.vina_hydrophobic", "model.DTIHarmonic.cal_torsion_energy", "torch.pow().mean", "torch.pow().mean", "torch.pow().mean", "torch.pow().mean", "torch.pow().mean", "torch.pow().mean", "torch.pow().mean", "torch.pow().mean", "torch.pow().mean", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "h1.unsqueeze", "h2.unsqueeze", "torch.clamp.mean", "torch.clamp.mean", "torch.clamp.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "penalty.unsqueeze", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.zeros_like().sum.sum().sum().mean", "torch.zeros_like().sum.sum().sum().mean", "torch.zeros_like().sum.sum().sum().mean", "model.DTIHarmonic.cal_variance_h", "torch.clamp.sum", "torch.clamp.sum", "torch.clamp.sum", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.cat.sum", "torch.cat.sum", "torch.cat.sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "minimum_loss.sum", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "minimum_loss.sum", "torch.zeros_like().sum.sum().sum", "torch.zeros_like().sum.sum().sum", "torch.zeros_like().sum.sum().sum", "torch.zeros_like().sum.sum", "torch.zeros_like().sum.sum", "torch.zeros_like().sum.sum"], "methods", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.DTIHarmonic.get_embedding_vector", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.GNN.cal_distance_matrix", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.DTIHarmonic.cal_vdw_interaction", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.DTIHarmonic.vina_hbond", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.DTIHarmonic.vina_hbond", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.DTIHarmonic.vina_hydrophobic", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.DTIHarmonic.cal_torsion_energy"], ["", "def", "forward", "(", "self", ",", "sample", ",", "DM_min", "=", "0.5", ",", "cal_der_loss", "=", "False", ")", ":", "\n", "        ", "h1", ",", "h2", "=", "self", ".", "get_embedding_vector", "(", "sample", ")", "\n", "h1_repeat", "=", "h1", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "h2", ".", "size", "(", "1", ")", ",", "1", ")", "\n", "h2_repeat", "=", "h2", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "h1", ".", "size", "(", "1", ")", ",", "1", ",", "1", ")", "\n", "h", "=", "torch", ".", "cat", "(", "[", "h1_repeat", ",", "h2_repeat", "]", ",", "-", "1", ")", "\n", "\n", "dm", "=", "self", ".", "cal_distance_matrix", "(", "sample", "[", "\"pos1\"", "]", ",", "sample", "[", "\"pos2\"", "]", ",", "0.5", ")", "\n", "if", "self", ".", "args", ".", "with_uncertainty", ":", "\n", "            ", "h_var", "=", "self", ".", "cal_variance_h", "(", "h", ")", ".", "squeeze", "(", ")", "\n", "r_var", "=", "self", ".", "cal_variance_r", "(", "dm", ")", "\n", "\n", "var", "=", "h_var", "*", "r_var", "\n", "if", "self", ".", "var_agg", "==", "\"mean\"", ":", "\n", "                ", "var", "=", "var", ".", "mean", "(", "dim", "=", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "", "elif", "self", ".", "var_agg", "==", "\"sum\"", ":", "\n", "                ", "var", "=", "var", ".", "sum", "(", "dim", "=", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "", "elif", "self", ".", "var_agg", "==", "\"product\"", ":", "\n", "                ", "var", "=", "torch", ".", "prod", "(", "var", ",", "dim", "=", "-", "1", ")", "\n", "var", "=", "torch", ".", "prod", "(", "var", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "if", "self", ".", "var_abs", "==", "\"abs\"", ":", "\n", "                ", "var", "=", "torch", ".", "abs", "(", "var", ")", "\n", "var", "=", "torch", ".", "clamp", "(", "var", ",", "min", "=", "1e-5", ")", "\n", "", "elif", "self", ".", "var_abs", "==", "\"sqr\"", ":", "\n", "                ", "var", "=", "var", "**", "2", "\n", "var", "=", "torch", ".", "clamp", "(", "var", ",", "min", "=", "1e-5", ")", "\n", "", "elif", "self", ".", "var_abs", "==", "\"clip\"", ":", "\n", "                ", "var", "=", "torch", ".", "clamp", "(", "var", ",", "min", "=", "1e-5", ")", "\n", "\n", "", "", "retval", "=", "[", "]", "\n", "vdw_radius1", ",", "vdw_radius2", ",", "A_int", "=", "sample", "[", "\"vdw_radius1\"", "]", ",", "sample", "[", "\"vdw_radius2\"", "]", ",", "sample", "[", "\"A_int\"", "]", "\n", "\n", "# vdw interaction", "\n", "retval", ".", "append", "(", "self", ".", "cal_vdw_interaction", "(", "dm", ",", "h", ",", "vdw_radius1", ",", "vdw_radius2", ",", "\n", "sample", "[", "\"vdw_epsilon\"", "]", ",", "\n", "sample", "[", "\"vdw_sigma\"", "]", ",", "\n", "sample", "[", "\"no_metal1\"", "]", ",", "\n", "sample", "[", "\"no_metal2\"", "]", ")", ")", "\n", "# hbond", "\n", "retval", ".", "append", "(", "self", ".", "vina_hbond", "(", "\n", "dm", ",", "h", ",", "vdw_radius1", ",", "vdw_radius2", ",", "A_int", "[", ":", ",", "1", "]", ")", ")", "\n", "\n", "# metal complex", "\n", "retval", ".", "append", "(", "self", ".", "vina_hbond", "(", "\n", "dm", ",", "h", ",", "vdw_radius1", ",", "vdw_radius2", ",", "A_int", "[", ":", ",", "-", "1", "]", ")", ")", "\n", "\n", "# hydrophobic", "\n", "retval", ".", "append", "(", "self", ".", "vina_hydrophobic", "(", "dm", ",", "h", ",", "vdw_radius1", ",", "vdw_radius2", ",", "\n", "A_int", "[", ":", ",", "-", "2", "]", ")", ")", "\n", "\n", "# torsion", "\n", "retval", ".", "append", "(", "self", ".", "cal_torsion_energy", "(", "sample", "[", "\"delta_uff\"", "]", ")", ")", "\n", "\n", "retval", "=", "torch", ".", "cat", "(", "retval", ",", "-", "1", ")", "\n", "if", "not", "self", ".", "args", ".", "no_rotor_penalty", ":", "\n", "            ", "penalty", "=", "1", "+", "self", ".", "rotor_coeff", "*", "self", ".", "rotor_coeff", "*", "sample", "[", "\"rotor\"", "]", "\n", "retval", "=", "retval", "/", "penalty", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "", "if", "cal_der_loss", ":", "\n", "            ", "minimum_loss", "=", "torch", ".", "autograd", ".", "grad", "(", "retval", ".", "sum", "(", ")", ",", "\n", "sample", "[", "\"pos1\"", "]", ",", "\n", "retain_graph", "=", "True", ",", "\n", "create_graph", "=", "True", ")", "[", "0", "]", "\n", "minimum_loss2", "=", "torch", ".", "pow", "(", "minimum_loss", ".", "sum", "(", "1", ")", ",", "2", ")", ".", "mean", "(", ")", "\n", "minimum_loss3", "=", "torch", ".", "autograd", ".", "grad", "(", "minimum_loss", ".", "sum", "(", ")", ",", "\n", "sample", "[", "\"pos1\"", "]", ",", "\n", "retain_graph", "=", "True", ",", "\n", "create_graph", "=", "True", ")", "[", "0", "]", "\n", "minimum_loss3", "=", "-", "minimum_loss3", ".", "sum", "(", "1", ")", ".", "sum", "(", "1", ")", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "minimum_loss2", "=", "torch", ".", "zeros_like", "(", "retval", ")", ".", "sum", "(", ")", "\n", "minimum_loss3", "=", "torch", ".", "zeros_like", "(", "retval", ")", ".", "sum", "(", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "with_uncertainty", ":", "\n", "            ", "retval", "=", "retval", ",", "minimum_loss2", ",", "minimum_loss3", ",", "var", "\n", "", "else", ":", "\n", "            ", "retval", "=", "retval", ",", "minimum_loss2", ",", "minimum_loss3", "\n", "", "return", "retval", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.GNN.__init__": [[293, 323], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "layers.GAT_gate", "int", "range", "layers.InteractionNet", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "range", "range", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.CNN3D_KDEEP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "GNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "node_embedding", "=", "nn", ".", "Linear", "(", "54", ",", "args", ".", "dim_gnn", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "gconv", "=", "nn", ".", "ModuleList", "(", "[", "GAT_gate", "(", "args", ".", "dim_gnn", ",", "args", ".", "dim_gnn", ")", "\n", "for", "_", "in", "range", "(", "args", ".", "n_gnn", ")", "]", ")", "\n", "if", "args", ".", "interaction_net", ":", "\n", "            ", "num_filter", "=", "int", "(", "10.0", "/", "args", ".", "filter_spacing", ")", "+", "1", "\n", "self", ".", "filter_center", "=", "torch", ".", "Tensor", "(", "[", "args", ".", "filter_spacing", "*", "i", "for", "i", "\n", "in", "range", "(", "num_filter", ")", "]", ")", "\n", "self", ".", "filter_gamma", "=", "args", ".", "filter_gamma", "\n", "self", ".", "interaction_net", "=", "nn", ".", "ModuleList", "(", "\n", "[", "InteractionNet", "(", "num_filter", ",", "args", ".", "dim_gnn", ")", "\n", "for", "_", "in", "range", "(", "args", ".", "n_gnn", ")", "]", ")", "\n", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "self", ".", "predict", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "args", ".", "dim_gnn", "*", "2", ",", "\n", "args", ".", "dim_gnn", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "args", ".", "dropout_rate", ")", ")", ",", "\n", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "args", ".", "dim_gnn", ",", "\n", "args", ".", "dim_gnn", "//", "2", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "args", ".", "dropout_rate", ")", ")", ",", "\n", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "args", ".", "dim_gnn", "//", "2", ",", "1", ")", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "predict", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "args", ".", "dim_gnn", "*", "2", ",", "args", ".", "dim_gnn", ")", ",", "\n", "nn", ".", "Linear", "(", "args", ".", "dim_gnn", ",", "args", ".", "dim_gnn", "//", "2", ")", ",", "\n", "nn", ".", "Linear", "(", "args", ".", "dim_gnn", "//", "2", ",", "1", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.GNN.cal_distance_matrix": [[324, 331], ["p1.unsqueeze().repeat", "p2.unsqueeze().repeat", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "p2.size", "p1.size", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "p1.unsqueeze", "p2.unsqueeze", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "", "def", "cal_distance_matrix", "(", "self", ",", "p1", ",", "p2", ",", "dm_min", ")", ":", "\n", "        ", "p1_repeat", "=", "p1", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "p2", ".", "size", "(", "1", ")", ",", "1", ")", "\n", "p2_repeat", "=", "p2", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "p1", ".", "size", "(", "1", ")", ",", "1", ",", "1", ")", "\n", "dm", "=", "torch", ".", "sqrt", "(", "torch", ".", "pow", "(", "p1_repeat", "-", "p2_repeat", ",", "2", ")", ".", "sum", "(", "-", "1", ")", "+", "1e-10", ")", "\n", "replace_vec", "=", "torch", ".", "ones_like", "(", "dm", ")", "*", "1e10", "\n", "dm", "=", "torch", ".", "where", "(", "dm", "<", "dm_min", ",", "replace_vec", ",", "dm", ")", "\n", "return", "dm", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.GNN.forward": [[332, 393], ["sample.values", "model.GNN.node_embedding", "model.GNN.node_embedding", "range", "model.GNN.cal_distance_matrix", "torch.dropout.unsqueeze().repeat", "torch.dropout.unsqueeze().repeat", "valid1.unsqueeze().repeat", "valid2.unsqueeze().repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.GNN._linear", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "len", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "model.GNN.unsqueeze().repeat", "model.GNN.filter_center.unsqueeze().unsqueeze().unsqueeze().to", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "edge.detach.detach.detach", "model.GNN.clone().detach", "range", "torch.dropout.size", "torch.dropout.size", "valid2.size", "valid1.size", "valid1.unsqueeze().repeat.unsqueeze", "valid2.unsqueeze().repeat.unsqueeze", "torch.ReLU", "torch.ReLU", "torch.ReLU", "model.GNN.filter_center.size", "len", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout.unsqueeze", "torch.dropout.unsqueeze", "valid1.unsqueeze", "valid2.unsqueeze", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "model.GNN.unsqueeze", "model.GNN.filter_center.unsqueeze().unsqueeze().unsqueeze", "model.GNN.clone", "edge.detach.detach.permute", "model.GNN.clone().detach.permute", "valid1.unsqueeze", "valid2.unsqueeze", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "model.GNN.filter_center.unsqueeze().unsqueeze", "model.GNN.filter_center.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.GNN.cal_distance_matrix", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.GNN._linear"], ["", "def", "forward", "(", "self", ",", "sample", ",", "DM_min", "=", "0.5", ",", "cal_der_loss", "=", "False", ")", ":", "\n", "        ", "h1", ",", "adj1", ",", "h2", ",", "adj2", ",", "A_int", ",", "dmv", ",", "_", ",", "pos1", ",", "pos2", ",", "sasa", ",", "dsasa", ",", "rotor", ",", "charge1", ",", "charge2", ",", "vdw_radius1", ",", "vdw_radius2", ",", "vdw_epsilon", ",", "vdw_sigma", ",", "delta_uff", ",", "valid1", ",", "valid2", ",", "no_metal1", ",", "no_metal2", ",", "_", ",", "_", "=", "sample", ".", "values", "(", ")", "\n", "\n", "h1", "=", "self", ".", "node_embedding", "(", "h1", ")", "\n", "h2", "=", "self", ".", "node_embedding", "(", "h2", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "gconv", ")", ")", ":", "\n", "            ", "h1", "=", "self", ".", "gconv", "[", "i", "]", "(", "h1", ",", "adj1", ")", "\n", "h2", "=", "self", ".", "gconv", "[", "i", "]", "(", "h2", ",", "adj2", ")", "\n", "h1", "=", "F", ".", "dropout", "(", "h1", ",", "training", "=", "self", ".", "training", ",", "\n", "p", "=", "self", ".", "args", ".", "dropout_rate", ")", "\n", "h2", "=", "F", ".", "dropout", "(", "h2", ",", "training", "=", "self", ".", "training", ",", "\n", "p", "=", "self", ".", "args", ".", "dropout_rate", ")", "\n", "\n", "", "dm", "=", "self", ".", "cal_distance_matrix", "(", "pos1", ",", "pos2", ",", "DM_min", ")", "\n", "if", "self", ".", "args", ".", "interaction_net", ":", "\n", "            ", "edge", "=", "dm", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "\n", "self", ".", "filter_center", ".", "size", "(", "-", "1", ")", ")", "\n", "filter_center", "=", "self", ".", "filter_center", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "h1", ".", "device", ")", "\n", "\n", "edge", "=", "torch", ".", "exp", "(", "-", "torch", ".", "pow", "(", "edge", "-", "filter_center", ",", "2", ")", "\n", "*", "self", ".", "filter_gamma", ")", "\n", "edge", "=", "edge", ".", "detach", "(", ")", "\n", "adj12", "=", "dm", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "\n", "adj12", "[", "adj12", ">", "5", "]", "=", "0", "\n", "adj12", "[", "adj12", ">", "1e-3", "]", "=", "1", "\n", "adj12", "[", "adj12", "<", "1e-3", "]", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "interaction_net", ")", ")", ":", "\n", "# [, n_ligand_atom, n_out_feature(dim_gnn)]", "\n", "                ", "new_h1", "=", "self", ".", "interaction_net", "[", "i", "]", "(", "h1", ",", "h2", ",", "edge", ",", "adj12", ")", "\n", "new_h2", "=", "self", ".", "interaction_net", "[", "i", "]", "(", "h2", ",", "h1", ",", "\n", "edge", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ",", "\n", "adj12", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "h1", ",", "h2", "=", "new_h1", ",", "new_h2", "\n", "h1", "=", "F", ".", "dropout", "(", "h1", ",", "training", "=", "self", ".", "training", ",", "\n", "p", "=", "self", ".", "args", ".", "dropout_rate", ")", "\n", "h2", "=", "F", ".", "dropout", "(", "h2", ",", "training", "=", "self", ".", "training", ",", "\n", "p", "=", "self", ".", "args", ".", "dropout_rate", ")", "\n", "\n", "", "", "h1_repeat", "=", "h1", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "h2", ".", "size", "(", "1", ")", ",", "1", ")", "\n", "h2_repeat", "=", "h2", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "h1", ".", "size", "(", "1", ")", ",", "1", ",", "1", ")", "\n", "valid1_repeat", "=", "valid1", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "valid2", ".", "size", "(", "1", ")", ")", "\n", "valid2_repeat", "=", "valid2", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "valid1", ".", "size", "(", "1", ")", ",", "1", ")", "\n", "h1_repeat", "=", "h1_repeat", "*", "valid1_repeat", ".", "unsqueeze", "(", "-", "1", ")", "\n", "h2_repeat", "=", "h2_repeat", "*", "valid2_repeat", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "h1", "=", "(", "h1", "*", "valid1", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "sum", "(", "1", ")", "# [, n_out_feature(dim_gnn)]", "\n", "h2", "=", "(", "h2", "*", "valid2", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "sum", "(", "1", ")", "# [, n_out_feature(dim_gnn)]", "\n", "h", "=", "torch", ".", "cat", "(", "(", "h1", ",", "h2", ")", ",", "-", "1", ")", "# [, 2*n_out_feature(dim_gnn)]", "\n", "retval", "=", "self", ".", "_linear", "(", "h", ",", "self", ".", "predict", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "minimum_loss2", "=", "torch", ".", "zeros_like", "(", "retval", ")", ".", "sum", "(", ")", "\n", "minimum_loss3", "=", "torch", ".", "zeros_like", "(", "retval", ")", ".", "sum", "(", ")", "\n", "\n", "return", "retval", ",", "minimum_loss2", ",", "minimum_loss3", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.GNN._linear": [[394, 402], ["enumerate", "layer", "act", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_linear", "(", "tensor", ",", "layers", ",", "act", "=", "None", ")", ":", "\n", "        ", "for", "i", ",", "layer", "in", "enumerate", "(", "layers", ")", ":", "\n", "            ", "tensor", "=", "layer", "(", "tensor", ")", "\n", "if", "act", "!=", "None", "and", "i", "!=", "len", "(", "layers", ")", "-", "1", ":", "\n", "                ", "tensor", "=", "act", "(", "tensor", ")", "\n", "\n", "", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.CNN3D.__init__": [[405, 415], ["torch.Module.__init__", "layers.ConvBlock", "layers.PredictBlock"], "methods", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.CNN3D_KDEEP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "CNN3D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "size", "=", "20", "\n", "\n", "# self.conv = ConvBlock(54, 64, args.dropout_rate)", "\n", "self", ".", "conv", "=", "ConvBlock", "(", "54", ",", "128", ",", "args", ".", "dropout_rate", ")", "\n", "\n", "# self.predict = PredictBlock(64*40*40*40, 1, args.dropout_rate, True)", "\n", "self", ".", "predict", "=", "PredictBlock", "(", "128", "*", "40", "*", "40", "*", "40", ",", "1", ",", "args", ".", "dropout_rate", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.CNN3D.forward": [[416, 443], ["sample.values", "model.CNN3D._get_lattice", "lattice.view.view.detach().cpu().numpy", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "numpy.rot90", "numpy.rot90", "numpy.rot90", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "model.CNN3D.conv", "lattice.view.view.view", "model.CNN3D.predict", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "valid1.unsqueeze", "valid2.unsqueeze", "valid1.unsqueeze", "valid2.unsqueeze", "lattice.view.view.detach().cpu", "angle[].item", "angle[].item", "angle[].item", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "lattice.view.view.copy", "lattice.view.view.detach"], "methods", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.CNN3D_KDEEP._get_lattice", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.predict"], ["", "def", "forward", "(", "self", ",", "sample", ",", "DM_min", "=", "0.5", ",", "cal_der_loss", "=", "False", ")", ":", "\n", "        ", "h1", ",", "adj1", ",", "h2", ",", "adj2", ",", "A_int", ",", "dmv", ",", "_", ",", "pos1", ",", "pos2", ",", "sasa", ",", "dsasa", ",", "rotor", ",", "charge1", ",", "charge2", ",", "vdw_radius1", ",", "vdw_radius2", ",", "vdw_epsilon", ",", "vdw_sigma", ",", "delta_uff", ",", "valid1", ",", "valid2", ",", "no_metal1", ",", "no_metal2", ",", "_", ",", "_", "=", "sample", ".", "values", "(", ")", "\n", "\n", "batch_size", "=", "pos1", ".", "shape", "[", "0", "]", "\n", "h1", "=", "h1", "*", "valid1", ".", "unsqueeze", "(", "-", "1", ")", "\n", "h2", "=", "h2", "*", "valid2", ".", "unsqueeze", "(", "-", "1", ")", "\n", "pos1", "=", "pos1", "*", "valid1", ".", "unsqueeze", "(", "-", "1", ")", "\n", "pos2", "=", "pos2", "*", "valid2", ".", "unsqueeze", "(", "-", "1", ")", "\n", "lattice", "=", "self", ".", "_get_lattice", "(", "batch_size", ",", "pos1", ",", "pos2", ",", "h1", ",", "h2", ",", "self", ".", "size", ")", "\n", "lattice", "=", "lattice", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# B, 54, 40, 40, 40", "\n", "angle", "=", "torch", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "4", ",", "size", "=", "(", "3", ",", ")", ")", "\n", "lattice", "=", "np", ".", "rot90", "(", "lattice", ",", "k", "=", "angle", "[", "0", "]", ".", "item", "(", ")", ",", "axes", "=", "(", "2", ",", "3", ")", ")", "\n", "lattice", "=", "np", ".", "rot90", "(", "lattice", ",", "k", "=", "angle", "[", "1", "]", ".", "item", "(", ")", ",", "axes", "=", "(", "3", ",", "4", ")", ")", "\n", "lattice", "=", "np", ".", "rot90", "(", "lattice", ",", "k", "=", "angle", "[", "2", "]", ".", "item", "(", ")", ",", "axes", "=", "(", "4", ",", "2", ")", ")", "\n", "lattice", "=", "torch", ".", "from_numpy", "(", "lattice", ".", "copy", "(", ")", ")", ".", "to", "(", "h1", ".", "device", ")", "\n", "\n", "lattice", "=", "self", ".", "conv", "(", "lattice", ")", "\n", "lattice", "=", "lattice", ".", "view", "(", "lattice", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "retval", "=", "self", ".", "predict", "(", "lattice", ")", "\n", "\n", "minimum_loss2", "=", "torch", ".", "zeros_like", "(", "retval", ")", ".", "sum", "(", ")", "\n", "minimum_loss3", "=", "torch", ".", "zeros_like", "(", "retval", ")", ".", "sum", "(", ")", "\n", "\n", "return", "retval", ",", "minimum_loss2", ",", "minimum_loss3", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.CNN3D._get_lattice": [[444, 487], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "lattice.permute.permute.to", "zip", "enumerate", "zip", "enumerate", "lattice.permute.permute.permute", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "zip", "zip", "pos1.sum", "nz_pos1_max.to", "nz_pos1_min.to"], "methods", ["None"], ["", "def", "_get_lattice", "(", "self", ",", "batch_size", ",", "pos1", ",", "pos2", ",", "h1", ",", "h2", ",", "lattice_size", ")", ":", "\n", "        ", "n_feature", "=", "h1", ".", "shape", "[", "-", "1", "]", "\n", "ranges", "=", "lattice_size", "*", "2", "\n", "device", "=", "pos1", ".", "device", "\n", "lattice", "=", "torch", ".", "zeros", "(", "batch_size", ",", "ranges", ",", "ranges", ",", "ranges", ",", "n_feature", ")", "\n", "nz_pos1", "=", "(", "pos1", ".", "sum", "(", "-", "1", ")", "==", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "nz_pos1_max", "=", "nz_pos1", "*", "-", "1e10", "\n", "nz_pos1_min", "=", "nz_pos1", "*", "1e10", "\n", "batch_max", "=", "torch", ".", "max", "(", "pos1", "+", "nz_pos1_max", ".", "to", "(", "device", ")", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "batch_min", "=", "torch", ".", "min", "(", "pos1", "+", "nz_pos1_min", ".", "to", "(", "device", ")", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "batch_diff", "=", "batch_max", "-", "batch_min", "\n", "sub", "=", "(", "(", "batch_min", "+", "batch_diff", "/", "2", ")", ")", ".", "unsqueeze", "(", "1", ")", "\n", "index1", "=", "(", "(", "pos1", "-", "sub", "+", "lattice_size", "/", "2", ")", "//", "\n", "0.5", ")", ".", "type", "(", "torch", ".", "IntTensor", ")", "# index", "\n", "index2", "=", "(", "(", "pos2", "-", "sub", "+", "lattice_size", "/", "2", ")", "//", "\n", "0.5", ")", ".", "type", "(", "torch", ".", "IntTensor", ")", "# index", "\n", "lattice", "=", "lattice", ".", "to", "(", "device", ")", "\n", "\n", "# fill lattice with h1, h2\"s one-hot vector", "\n", "batch_pos_feat1", "=", "zip", "(", "index1", ",", "h1", ")", "\n", "for", "i", ",", "(", "batch_pos1", ",", "batch_feat1", ")", "in", "enumerate", "(", "batch_pos_feat1", ")", ":", "\n", "            ", "pos_feat1", "=", "zip", "(", "batch_pos1", ",", "batch_feat1", ")", "\n", "for", "(", "coor1", ",", "feature1", ")", "in", "pos_feat1", ":", "\n", "                ", "x1", ",", "y1", ",", "z1", "=", "coor1", "\n", "if", "x1", "<", "0", "or", "x1", ">", "ranges", "-", "1", "or", "y1", "<", "0", "or", "y1", ">", "ranges", "-", "1", "or", "z1", "<", "0", "or", "z1", ">", "ranges", "-", "1", ":", "\n", "                    ", "continue", "\n", "", "lattice", "[", "i", "]", "[", "x1", "]", "[", "y1", "]", "[", "z1", "]", "=", "feature1", "\n", "", "", "batch_pos_feat2", "=", "zip", "(", "index2", ",", "h2", ")", "\n", "for", "j", ",", "(", "batch_pos2", ",", "batch_feat2", ")", "in", "enumerate", "(", "batch_pos_feat2", ")", ":", "\n", "            ", "pos_feat2", "=", "zip", "(", "batch_pos2", ",", "batch_feat2", ")", "\n", "for", "(", "coor2", ",", "feature2", ")", "in", "pos_feat2", ":", "\n", "                ", "x2", ",", "y2", ",", "z2", "=", "coor2", "\n", "if", "x2", "<", "0", "or", "x2", ">", "ranges", "-", "1", "or", "y2", "<", "0", "or", "y2", ">", "ranges", "-", "1", "or", "z2", "<", "0", "or", "z2", ">", "ranges", "-", "1", ":", "\n", "                    ", "continue", "\n", "", "lattice", "[", "j", "]", "[", "x2", "]", "[", "y2", "]", "[", "z2", "]", "=", "feature2", "\n", "\n", "", "", "lattice", "=", "lattice", ".", "permute", "(", "0", ",", "4", ",", "2", ",", "3", ",", "1", ")", "# b, f, y, z, x", "\n", "\n", "return", "lattice", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.CNN3D._plot": [[488, 512], ["lattice.permute.permute.permute", "lattice[].sum", "lattice[].sum", "numpy.empty", "matplotlib.figure", "matplotlib.figure.gca", "plt.figure.gca.voxels", "lattice[].sum", "lattice[].sum"], "methods", ["None"], ["", "def", "_plot", "(", "self", ",", "lattice", ",", "idx", ")", ":", "\n", "        ", "lattice", "=", "lattice", ".", "permute", "(", "0", ",", "4", ",", "2", ",", "3", ",", "1", ")", "# b, f, y, z, x", "\n", "lattice_0", "=", "lattice", "[", "0", "]", ".", "sum", "(", "-", "1", ")", "\n", "lattice_1", "=", "lattice", "[", "1", "]", ".", "sum", "(", "-", "1", ")", "\n", "\n", "voxels_0", "=", "(", "lattice_0", "!=", "0", ")", "\n", "voxels_1", "=", "(", "lattice_1", "!=", "0", ")", "\n", "voxels", "=", "voxels_0", "|", "voxels_1", "\n", "\n", "colors", "=", "np", ".", "empty", "(", "voxels", ".", "shape", ",", "dtype", "=", "object", ")", "\n", "colors", "[", "voxels_0", "]", "=", "\"green\"", "\n", "colors", "[", "voxels_1", "]", "=", "\"red\"", "\n", "if", "lattice", ".", "shape", "[", "0", "]", ">", "2", ":", "\n", "            ", "lattice_2", "=", "lattice", "[", "2", "]", ".", "sum", "(", "-", "1", ")", "\n", "lattice_3", "=", "lattice", "[", "3", "]", ".", "sum", "(", "-", "1", ")", "\n", "voxels_2", "=", "(", "lattice_2", "!=", "0", ")", "\n", "voxels_3", "=", "(", "lattice_3", "!=", "0", ")", "\n", "voxels", "=", "voxels", "|", "voxels_2", "|", "voxels_3", "\n", "colors", "[", "voxels_2", "]", "=", "\"yellow\"", "\n", "colors", "[", "voxels_3", "]", "=", "\"purple\"", "\n", "\n", "", "fig", "=", "plt", ".", "figure", "(", "idx", ")", "\n", "ax", "=", "fig", ".", "gca", "(", "projection", "=", "\"3d\"", ")", "\n", "ax", ".", "voxels", "(", "voxels", ",", "facecolors", "=", "colors", ",", "edgecolor", "=", "\"k\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.CNN3D_KDEEP.__init__": [[515, 554], ["torch.Module.__init__", "int", "model.CNN3D_KDEEP._add_act", "model.CNN3D_KDEEP._add_act", "model.CNN3D_KDEEP._add_act", "model.CNN3D_KDEEP._add_act", "model.CNN3D_KDEEP._add_act", "model.CNN3D_KDEEP._add_act", "model.CNN3D_KDEEP._add_act", "model.CNN3D_KDEEP._add_act", "model.CNN3D_KDEEP._add_act", "model.CNN3D_KDEEP._add_act", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "model.CNN3D_KDEEP._add_act", "model.CNN3D_KDEEP._add_act", "model.CNN3D_KDEEP._add_act", "model.CNN3D_KDEEP._add_act", "model.CNN3D_KDEEP._add_act", "model.CNN3D_KDEEP._add_act", "model.CNN3D_KDEEP._add_act", "model.CNN3D_KDEEP._add_act", "model.CNN3D_KDEEP._add_act", "model.CNN3D_KDEEP._add_act", "model.CNN3D_KDEEP._add_act", "model.CNN3D_KDEEP._add_act", "torch.AvgPool3d", "torch.AvgPool3d", "torch.AvgPool3d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d"], "methods", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.CNN3D_KDEEP.__init__", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.CNN3D_KDEEP._add_act", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.CNN3D_KDEEP._add_act", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.CNN3D_KDEEP._add_act", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.CNN3D_KDEEP._add_act", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.CNN3D_KDEEP._add_act", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.CNN3D_KDEEP._add_act", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.CNN3D_KDEEP._add_act", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.CNN3D_KDEEP._add_act", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.CNN3D_KDEEP._add_act", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.CNN3D_KDEEP._add_act", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.CNN3D_KDEEP._add_act", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.CNN3D_KDEEP._add_act", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.CNN3D_KDEEP._add_act", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.CNN3D_KDEEP._add_act", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.CNN3D_KDEEP._add_act", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.CNN3D_KDEEP._add_act", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.CNN3D_KDEEP._add_act", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.CNN3D_KDEEP._add_act", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.CNN3D_KDEEP._add_act", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.CNN3D_KDEEP._add_act", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.CNN3D_KDEEP._add_act", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.CNN3D_KDEEP._add_act"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "CNN3D_KDEEP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "lattice_dim", "=", "args", ".", "lattice_dim", "\n", "scaling", "=", "args", ".", "scaling", "\n", "lattice_size", "=", "int", "(", "lattice_dim", "/", "scaling", ")", "\n", "self", ".", "conv1", "=", "self", ".", "_add_act", "(", "nn", ".", "Conv3d", "(", "54", ",", "96", ",", "2", ",", "2", ",", "0", ")", ")", "\n", "self", ".", "fire2_squeeze", "=", "self", ".", "_add_act", "(", "nn", ".", "Conv3d", "(", "96", ",", "16", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "fire2_expand1", "=", "self", ".", "_add_act", "(", "nn", ".", "Conv3d", "(", "16", ",", "64", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "fire2_expand2", "=", "self", ".", "_add_act", "(", "nn", ".", "Conv3d", "(", "16", ",", "64", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "\n", "self", ".", "fire3_squeeze", "=", "self", ".", "_add_act", "(", "nn", ".", "Conv3d", "(", "128", ",", "16", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "fire3_expand1", "=", "self", ".", "_add_act", "(", "nn", ".", "Conv3d", "(", "16", ",", "64", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "fire3_expand2", "=", "self", ".", "_add_act", "(", "nn", ".", "Conv3d", "(", "16", ",", "64", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "\n", "self", ".", "fire4_squeeze", "=", "self", ".", "_add_act", "(", "nn", ".", "Conv3d", "(", "128", ",", "32", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "fire4_expand1", "=", "self", ".", "_add_act", "(", "nn", ".", "Conv3d", "(", "32", ",", "128", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "fire4_expand2", "=", "self", ".", "_add_act", "(", "nn", ".", "Conv3d", "(", "32", ",", "128", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "max_pooling4", "=", "nn", ".", "MaxPool3d", "(", "2", ",", "3", ",", "1", ")", "\n", "\n", "self", ".", "fire5_squeeze", "=", "self", ".", "_add_act", "(", "nn", ".", "Conv3d", "(", "256", ",", "32", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "fire5_expand1", "=", "self", ".", "_add_act", "(", "nn", ".", "Conv3d", "(", "32", ",", "128", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "fire5_expand2", "=", "self", ".", "_add_act", "(", "nn", ".", "Conv3d", "(", "32", ",", "128", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "\n", "self", ".", "fire6_squeeze", "=", "self", ".", "_add_act", "(", "nn", ".", "Conv3d", "(", "256", ",", "48", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "fire6_expand1", "=", "self", ".", "_add_act", "(", "nn", ".", "Conv3d", "(", "48", ",", "192", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "fire6_expand2", "=", "self", ".", "_add_act", "(", "nn", ".", "Conv3d", "(", "48", ",", "192", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "\n", "self", ".", "fire7_squeeze", "=", "self", ".", "_add_act", "(", "nn", ".", "Conv3d", "(", "384", ",", "48", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "fire7_expand1", "=", "self", ".", "_add_act", "(", "nn", ".", "Conv3d", "(", "48", ",", "192", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "fire7_expand2", "=", "self", ".", "_add_act", "(", "nn", ".", "Conv3d", "(", "48", ",", "192", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "\n", "self", ".", "fire8_squeeze", "=", "self", ".", "_add_act", "(", "nn", ".", "Conv3d", "(", "384", ",", "64", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "fire8_expand1", "=", "self", ".", "_add_act", "(", "nn", ".", "Conv3d", "(", "64", ",", "256", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "fire8_expand2", "=", "self", ".", "_add_act", "(", "nn", ".", "Conv3d", "(", "64", ",", "256", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "\n", "self", ".", "avg_pooling8", "=", "nn", ".", "AvgPool3d", "(", "3", ",", "2", ",", "0", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "4096", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.CNN3D_KDEEP.forward": [[555, 623], ["sample.values", "model.CNN3D_KDEEP._get_lattice", "model.CNN3D_KDEEP.conv1", "model.CNN3D_KDEEP.fire2_squeeze", "model.CNN3D_KDEEP.fire2_expand2", "model.CNN3D_KDEEP.fire2_expand2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.CNN3D_KDEEP.fire3_squeeze", "model.CNN3D_KDEEP.fire3_expand2", "model.CNN3D_KDEEP.fire3_expand2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.CNN3D_KDEEP.fire4_squeeze", "model.CNN3D_KDEEP.fire4_expand2", "model.CNN3D_KDEEP.fire4_expand2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.CNN3D_KDEEP.max_pooling4", "model.CNN3D_KDEEP.fire5_squeeze", "model.CNN3D_KDEEP.fire5_expand2", "model.CNN3D_KDEEP.fire5_expand2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.CNN3D_KDEEP.fire6_squeeze", "model.CNN3D_KDEEP.fire6_expand2", "model.CNN3D_KDEEP.fire6_expand2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.CNN3D_KDEEP.fire7_squeeze", "model.CNN3D_KDEEP.fire7_expand2", "model.CNN3D_KDEEP.fire7_expand2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.CNN3D_KDEEP.fire8_squeeze", "model.CNN3D_KDEEP.fire8_expand2", "model.CNN3D_KDEEP.fire8_expand2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.CNN3D_KDEEP.avg_pooling8", "torch.from_numpy().to.view", "torch.from_numpy().to.view", "torch.from_numpy().to.view", "model.CNN3D_KDEEP.linear", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.zeros_like().sum", "torch.from_numpy().to.detach().cpu().numpy", "torch.from_numpy().to.detach().cpu().numpy", "torch.from_numpy().to.detach().cpu().numpy", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "numpy.rot90", "numpy.rot90", "numpy.rot90", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.from_numpy().to.detach().cpu", "torch.from_numpy().to.detach().cpu", "torch.from_numpy().to.detach().cpu", "angle[].item", "angle[].item", "angle[].item", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().to.copy", "torch.from_numpy().to.copy", "torch.from_numpy().to.copy", "torch.from_numpy().to.detach", "torch.from_numpy().to.detach", "torch.from_numpy().to.detach"], "methods", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.CNN3D_KDEEP._get_lattice"], ["", "def", "forward", "(", "self", ",", "sample", ",", "DM_min", "=", "0.5", ",", "cal_der_loss", "=", "False", ")", ":", "\n", "        ", "h1", ",", "adj1", ",", "h2", ",", "adj2", ",", "A_int", ",", "dmv", ",", "_", ",", "pos1", ",", "pos2", ",", "sasa", ",", "dsasa", ",", "rotor", ",", "charge1", ",", "charge2", ",", "vdw_radius1", ",", "vdw_radius2", ",", "vdw_epsilon", ",", "vdw_sigma", ",", "delta_uff", ",", "valid1", ",", "valid2", ",", "no_metal1", ",", "no_metal2", ",", "_", ",", "_", "=", "sample", ".", "values", "(", ")", "\n", "\n", "batch_size", "=", "pos1", ".", "shape", "[", "0", "]", "\n", "lattice", "=", "self", ".", "_get_lattice", "(", "pos1", ",", "pos2", ",", "vdw_radius1", ",", "vdw_radius2", ",", "\n", "h1", ",", "h2", ",", "self", ".", "args", ".", "lattice_dim", ")", "\n", "\n", "if", "self", ".", "args", ".", "grid_rotation", ":", "\n", "            ", "lattice", "=", "lattice", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# B, 54, 40, 40, 40", "\n", "angle", "=", "torch", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "4", ",", "size", "=", "(", "3", ",", ")", ")", "\n", "lattice", "=", "np", ".", "rot90", "(", "lattice", ",", "k", "=", "angle", "[", "0", "]", ".", "item", "(", ")", ",", "axes", "=", "(", "2", ",", "3", ")", ")", "\n", "lattice", "=", "np", ".", "rot90", "(", "lattice", ",", "k", "=", "angle", "[", "1", "]", ".", "item", "(", ")", ",", "axes", "=", "(", "3", ",", "4", ")", ")", "\n", "lattice", "=", "np", ".", "rot90", "(", "lattice", ",", "k", "=", "angle", "[", "2", "]", ".", "item", "(", ")", ",", "axes", "=", "(", "4", ",", "2", ")", ")", "\n", "lattice", "=", "torch", ".", "from_numpy", "(", "lattice", ".", "copy", "(", ")", ")", ".", "to", "(", "h1", ".", "device", ")", "\n", "# print(lattice.shape)", "\n", "\n", "", "lattice", "=", "self", ".", "conv1", "(", "lattice", ")", "\n", "# print(lattice.shape)", "\n", "lattice", "=", "self", ".", "fire2_squeeze", "(", "lattice", ")", "\n", "lattice1", "=", "self", ".", "fire2_expand2", "(", "lattice", ")", "\n", "lattice2", "=", "self", ".", "fire2_expand2", "(", "lattice", ")", "\n", "lattice", "=", "torch", ".", "cat", "(", "[", "lattice1", ",", "lattice2", "]", ",", "dim", "=", "1", ")", "\n", "# print(lattice.shape)", "\n", "lattice", "=", "self", ".", "fire3_squeeze", "(", "lattice", ")", "\n", "lattice1", "=", "self", ".", "fire3_expand2", "(", "lattice", ")", "\n", "lattice2", "=", "self", ".", "fire3_expand2", "(", "lattice", ")", "\n", "lattice", "=", "torch", ".", "cat", "(", "[", "lattice1", ",", "lattice2", "]", ",", "dim", "=", "1", ")", "\n", "# print(lattice.shape)", "\n", "lattice", "=", "self", ".", "fire4_squeeze", "(", "lattice", ")", "\n", "lattice1", "=", "self", ".", "fire4_expand2", "(", "lattice", ")", "\n", "lattice2", "=", "self", ".", "fire4_expand2", "(", "lattice", ")", "\n", "lattice", "=", "torch", ".", "cat", "(", "[", "lattice1", ",", "lattice2", "]", ",", "dim", "=", "1", ")", "\n", "# print(lattice.shape)", "\n", "lattice", "=", "self", ".", "max_pooling4", "(", "lattice", ")", "\n", "lattice", "=", "self", ".", "fire5_squeeze", "(", "lattice", ")", "\n", "lattice1", "=", "self", ".", "fire5_expand2", "(", "lattice", ")", "\n", "lattice2", "=", "self", ".", "fire5_expand2", "(", "lattice", ")", "\n", "lattice", "=", "torch", ".", "cat", "(", "[", "lattice1", ",", "lattice2", "]", ",", "dim", "=", "1", ")", "\n", "# print(lattice.shape)", "\n", "lattice", "=", "self", ".", "fire6_squeeze", "(", "lattice", ")", "\n", "lattice1", "=", "self", ".", "fire6_expand2", "(", "lattice", ")", "\n", "lattice2", "=", "self", ".", "fire6_expand2", "(", "lattice", ")", "\n", "lattice", "=", "torch", ".", "cat", "(", "[", "lattice1", ",", "lattice2", "]", ",", "dim", "=", "1", ")", "\n", "# print(lattice.shape)", "\n", "lattice", "=", "self", ".", "fire7_squeeze", "(", "lattice", ")", "\n", "lattice1", "=", "self", ".", "fire7_expand2", "(", "lattice", ")", "\n", "lattice2", "=", "self", ".", "fire7_expand2", "(", "lattice", ")", "\n", "lattice", "=", "torch", ".", "cat", "(", "[", "lattice1", ",", "lattice2", "]", ",", "dim", "=", "1", ")", "\n", "# print(lattice.shape)", "\n", "lattice", "=", "self", ".", "fire8_squeeze", "(", "lattice", ")", "\n", "lattice1", "=", "self", ".", "fire8_expand2", "(", "lattice", ")", "\n", "lattice2", "=", "self", ".", "fire8_expand2", "(", "lattice", ")", "\n", "lattice", "=", "torch", ".", "cat", "(", "[", "lattice1", ",", "lattice2", "]", ",", "dim", "=", "1", ")", "\n", "# print(lattice.shape)", "\n", "lattice", "=", "self", ".", "avg_pooling8", "(", "lattice", ")", "\n", "# print(lattice.shape)", "\n", "\n", "lattice", "=", "lattice", ".", "view", "(", "lattice", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "retval", "=", "self", ".", "linear", "(", "lattice", ")", "\n", "# print(retval.shape)", "\n", "\n", "minimum_loss2", "=", "torch", ".", "zeros_like", "(", "retval", ")", ".", "sum", "(", ")", "\n", "minimum_loss3", "=", "torch", ".", "zeros_like", "(", "retval", ")", ".", "sum", "(", ")", "\n", "\n", "return", "retval", ",", "minimum_loss2", ",", "minimum_loss3", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.CNN3D_KDEEP._get_lattice": [[624, 697], ["pos1.size", "int", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "lattice.permute.permute.to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "grid.to.to.to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "lattice.permute.permute.permute", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "moved_pos1.size", "pe1.unsqueeze().repeat", "grid.to.to.unsqueeze().repeat", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "ce1.view.view.view", "he1.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "he1.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "he1.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "moved_pos2.size", "pe2.unsqueeze().repeat", "grid.to.to.unsqueeze().repeat", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "ce2.view.view.view", "he2.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "he2.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "he2.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "grid.to.to.size", "pe1.size", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "ce1.view.view.unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "grid.to.to.size", "pe2.size", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "ce2.view.view.unsqueeze", "pos1.sum", "pe1.unsqueeze", "grid.to.to.unsqueeze", "he1.unsqueeze().repeat.unsqueeze().repeat.unsqueeze", "he1.unsqueeze().repeat.unsqueeze().repeat.unsqueeze", "he1.unsqueeze().repeat.unsqueeze().repeat.unsqueeze", "pe2.unsqueeze", "grid.to.to.unsqueeze", "he2.unsqueeze().repeat.unsqueeze().repeat.unsqueeze", "he2.unsqueeze().repeat.unsqueeze().repeat.unsqueeze", "he2.unsqueeze().repeat.unsqueeze().repeat.unsqueeze", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "vre1.unsqueeze", "vre2.unsqueeze"], "methods", ["None"], ["", "def", "_get_lattice", "(", "self", ",", "pos1", ",", "pos2", ",", "vr1", ",", "vr2", ",", "h1", ",", "h2", ",", "lattice_dim", ")", ":", "\n", "        ", "n_feature", "=", "h1", ".", "shape", "[", "-", "1", "]", "\n", "device", "=", "pos1", ".", "device", "\n", "batch_size", "=", "pos1", ".", "size", "(", "0", ")", "\n", "\n", "lattice_size", "=", "int", "(", "lattice_dim", "/", "self", ".", "args", ".", "scaling", ")", "\n", "lattice", "=", "torch", ".", "zeros", "(", "batch_size", ",", "\n", "lattice_size", ",", "\n", "lattice_size", ",", "\n", "lattice_size", ",", "\n", "n_feature", ")", "\n", "nz_pos1", "=", "(", "pos1", ".", "sum", "(", "-", "1", ")", "==", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "nz_pos1_max", "=", "(", "nz_pos1", "*", "-", "1e10", ")", ".", "to", "(", "device", ")", "\n", "nz_pos1_min", "=", "(", "nz_pos1", "*", "1e10", ")", ".", "to", "(", "device", ")", "\n", "batch_max", "=", "torch", ".", "max", "(", "pos1", "+", "nz_pos1_max", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "batch_min", "=", "torch", ".", "min", "(", "pos1", "+", "nz_pos1_min", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "\n", "batch_diff", "=", "batch_max", "-", "batch_min", "\n", "sub", "=", "(", "(", "batch_min", "+", "batch_diff", "/", "2", ")", ")", ".", "unsqueeze", "(", "1", ")", "\n", "lattice", "=", "lattice", ".", "to", "(", "device", ")", "\n", "\n", "moved_pos1", "=", "(", "(", "pos1", "-", "sub", ")", "+", "lattice_dim", "/", "2", ")", "\n", "moved_pos2", "=", "(", "(", "pos2", "-", "sub", ")", "+", "lattice_dim", "/", "2", ")", "\n", "\n", "grid", "=", "torch", ".", "zeros", "(", "[", "lattice_size", ",", "lattice_size", ",", "lattice_size", "]", ")", "\n", "grid", "=", "torch", ".", "transpose", "(", "torch", ".", "stack", "(", "torch", ".", "where", "(", "grid", "==", "0", ")", ")", ",", "0", ",", "1", ")", "\n", "grid", "=", "grid", "*", "self", ".", "args", ".", "scaling", "\n", "grid", "=", "grid", ".", "to", "(", "device", ")", "\n", "\n", "sum1", "=", "torch", ".", "zeros", "(", "batch_size", ",", "\n", "lattice_size", ",", "\n", "lattice_size", ",", "\n", "lattice_size", ",", "\n", "n_feature", ")", ".", "to", "(", "device", ")", "\n", "for", "i", "in", "range", "(", "moved_pos1", ".", "size", "(", "1", ")", ")", ":", "\n", "            ", "pe1", "=", "moved_pos1", "[", ":", ",", "i", ",", ":", "]", "\n", "he1", "=", "h1", "[", ":", ",", "i", ",", ":", "]", "\n", "vre1", "=", "vr1", "[", ":", ",", "i", "]", "\n", "mp1", "=", "pe1", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "grid", ".", "size", "(", "0", ")", ",", "1", ")", "\n", "g1r", "=", "grid", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "pe1", ".", "size", "(", "0", ")", ",", "1", ",", "1", ")", "\n", "de1", "=", "torch", ".", "sqrt", "(", "torch", ".", "pow", "(", "mp1", "-", "g1r", ",", "2", ")", ".", "sum", "(", "-", "1", ")", ")", "\n", "ce1", "=", "1", "-", "torch", ".", "exp", "(", "-", "torch", ".", "pow", "(", "vre1", ".", "unsqueeze", "(", "-", "1", ")", "/", "de1", ",", "12", ")", ")", "\n", "ce1", "=", "ce1", ".", "view", "(", "-", "1", ",", "lattice_size", ",", "lattice_size", ",", "lattice_size", ")", "\n", "he1", "=", "he1", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "lattice_size", ",", "1", ")", "\n", "he1", "=", "he1", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "lattice_size", ",", "1", ",", "1", ")", "\n", "he1", "=", "he1", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "lattice_size", ",", "1", ",", "1", ",", "1", ")", "\n", "mul1", "=", "he1", "*", "ce1", ".", "unsqueeze", "(", "-", "1", ")", "\n", "sum1", "+=", "mul1", "\n", "\n", "", "sum2", "=", "torch", ".", "zeros", "(", "batch_size", ",", "\n", "lattice_size", ",", "\n", "lattice_size", ",", "\n", "lattice_size", ",", "\n", "n_feature", ")", ".", "to", "(", "device", ")", "\n", "for", "i", "in", "range", "(", "moved_pos2", ".", "size", "(", "1", ")", ")", ":", "\n", "            ", "pe2", "=", "moved_pos2", "[", ":", ",", "i", ",", ":", "]", "\n", "he2", "=", "h2", "[", ":", ",", "i", ",", ":", "]", "\n", "vre2", "=", "vr2", "[", ":", ",", "i", "]", "\n", "mp2", "=", "pe2", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "grid", ".", "size", "(", "0", ")", ",", "1", ")", "\n", "g2r", "=", "grid", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "pe2", ".", "size", "(", "0", ")", ",", "1", ",", "1", ")", "\n", "de2", "=", "torch", ".", "sqrt", "(", "torch", ".", "pow", "(", "mp2", "-", "g2r", ",", "2", ")", ".", "sum", "(", "-", "1", ")", ")", "\n", "ce2", "=", "1", "-", "torch", ".", "exp", "(", "-", "torch", ".", "pow", "(", "vre2", ".", "unsqueeze", "(", "-", "1", ")", "/", "de2", ",", "12", ")", ")", "\n", "ce2", "=", "ce2", ".", "view", "(", "-", "1", ",", "lattice_size", ",", "lattice_size", ",", "lattice_size", ")", "\n", "he2", "=", "he2", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "lattice_size", ",", "1", ")", "\n", "he2", "=", "he2", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "lattice_size", ",", "1", ",", "1", ")", "\n", "he2", "=", "he2", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "lattice_size", ",", "1", ",", "1", ",", "1", ")", "\n", "mul2", "=", "he2", "*", "ce2", ".", "unsqueeze", "(", "-", "1", ")", "\n", "sum2", "+=", "mul2", "\n", "\n", "", "lattice", "=", "sum1", "+", "sum2", "\n", "lattice", "=", "lattice", ".", "permute", "(", "0", ",", "4", ",", "2", ",", "3", ",", "1", ")", "\n", "\n", "return", "lattice", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.CNN3D_KDEEP._plot": [[698, 722], ["lattice.permute.permute.permute", "lattice[].sum", "lattice[].sum", "numpy.empty", "matplotlib.figure", "matplotlib.figure.gca", "plt.figure.gca.voxels", "lattice[].sum", "lattice[].sum"], "methods", ["None"], ["", "def", "_plot", "(", "self", ",", "lattice", ",", "idx", ")", ":", "\n", "        ", "lattice", "=", "lattice", ".", "permute", "(", "0", ",", "4", ",", "2", ",", "3", ",", "1", ")", "# b, f, y, z, x", "\n", "lattice_0", "=", "lattice", "[", "0", "]", ".", "sum", "(", "-", "1", ")", "\n", "lattice_1", "=", "lattice", "[", "1", "]", ".", "sum", "(", "-", "1", ")", "\n", "\n", "voxels_0", "=", "(", "lattice_0", "!=", "0", ")", "\n", "voxels_1", "=", "(", "lattice_1", "!=", "0", ")", "\n", "voxels", "=", "voxels_0", "|", "voxels_1", "\n", "\n", "colors", "=", "np", ".", "empty", "(", "voxels", ".", "shape", ",", "dtype", "=", "object", ")", "\n", "colors", "[", "voxels_0", "]", "=", "\"green\"", "\n", "colors", "[", "voxels_1", "]", "=", "\"red\"", "\n", "if", "lattice", ".", "shape", "[", "0", "]", ">", "2", ":", "\n", "            ", "lattice_2", "=", "lattice", "[", "2", "]", ".", "sum", "(", "-", "1", ")", "\n", "lattice_3", "=", "lattice", "[", "3", "]", ".", "sum", "(", "-", "1", ")", "\n", "voxels_2", "=", "(", "lattice_2", "!=", "0", ")", "\n", "voxels_3", "=", "(", "lattice_3", "!=", "0", ")", "\n", "voxels", "=", "voxels", "|", "voxels_2", "|", "voxels_3", "\n", "colors", "[", "voxels_2", "]", "=", "\"yellow\"", "\n", "colors", "[", "voxels_3", "]", "=", "\"purple\"", "\n", "\n", "", "fig", "=", "plt", ".", "figure", "(", "idx", ")", "\n", "ax", "=", "fig", ".", "gca", "(", "projection", "=", "\"3d\"", ")", "\n", "ax", ".", "voxels", "(", "voxels", ",", "facecolors", "=", "colors", ",", "edgecolor", "=", "\"k\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.model.CNN3D_KDEEP._add_act": [[723, 730], ["func_list.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "func_list.append", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_add_act", "(", "self", ",", "func", ",", "act", "=", "\"relu\"", ")", ":", "\n", "        ", "func_list", "=", "[", "]", "\n", "func_list", ".", "append", "(", "func", ")", "\n", "if", "act", "==", "\"relu\"", ":", "\n", "            ", "func_list", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "func_list", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.utils.loss_var": [[5, 14], ["loss.mean", "torch.exp", "torch.exp", "torch.log", "torch.log"], "function", ["None"], ["def", "loss_var", "(", "pred_var", ",", "pred", ",", "affinity", ",", "log", "=", "True", ")", ":", "\n", "    ", "mse", "=", "(", "pred", "-", "affinity", ")", "**", "2", "\n", "if", "log", ":", "\n", "        ", "loss", "=", "mse", "*", "0.5", "*", "torch", ".", "exp", "(", "-", "pred_var", ")", "\n", "loss", "+=", "0.5", "*", "pred_var", "\n", "", "else", ":", "\n", "        ", "loss", "=", "mse", "*", "0.5", "/", "pred_var", "\n", "loss", "+=", "0.5", "*", "torch", ".", "log", "(", "pred_var", ")", "\n", "", "return", "loss", ".", "mean", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.utils.dic_to_device": [[16, 23], ["dic.items", "isinstance", "dic_value.to.to"], "function", ["None"], ["", "def", "dic_to_device", "(", "dic", ",", "device", ")", ":", "\n", "    ", "for", "dic_key", ",", "dic_value", "in", "dic", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "dic_value", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "dic_value", "=", "dic_value", ".", "to", "(", "device", ")", "\n", "dic", "[", "dic_key", "]", "=", "dic_value", "\n", "\n", "", "", "return", "dic", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.utils.load_data": [[25, 38], ["dict", "open", "f.readlines", "l.split.strip", "l.split.split", "data[].append", "len", "l.split.append", "dict.keys", "int", "int", "float"], "function", ["None"], ["", "def", "load_data", "(", "filename", ")", ":", "\n", "    ", "data", "=", "dict", "(", ")", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "[", "1", ":", "]", "\n", "lines", "=", "[", "l", ".", "strip", "(", ")", "for", "l", "in", "lines", "]", "\n", "for", "l", "in", "lines", ":", "\n", "            ", "l", "=", "l", ".", "split", "(", "\",\"", ")", "\n", "if", "len", "(", "l", ")", "==", "5", ":", "l", ".", "append", "(", "-", "100.0", ")", "\n", "k", "=", "l", "[", "1", "]", "\n", "if", "k", "not", "in", "data", ".", "keys", "(", ")", ":", "data", "[", "k", "]", "=", "[", "]", "\n", "data", "[", "k", "]", ".", "append", "(", "(", "int", "(", "l", "[", "2", "]", ")", ",", "int", "(", "l", "[", "3", "]", ")", ",", "l", "[", "4", "]", ",", "float", "(", "l", "[", "5", "]", ")", ")", ")", "\n", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.utils.set_cuda_visible_device": [[39, 63], ["range", "range", "os.system", "os.system", "len", "print", "exit", "str", "open", "int", "int", "empty.append", "len", "len", "np.random.randint", "f.read"], "function", ["None"], ["", "def", "set_cuda_visible_device", "(", "ngpus", ")", ":", "\n", "    ", "import", "subprocess", "\n", "import", "os", "\n", "import", "numpy", "as", "np", "\n", "empty", "=", "[", "]", "\n", "if", "ngpus", ">", "0", ":", "\n", "        ", "fn", "=", "f\"/tmp/empty_gpu_check_{np.random.randint(0,10000000,1)[0]}\"", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "os", ".", "system", "(", "f\"nvidia-smi -i {i} | grep 'No running' | wc -l > {fn}\"", ")", "\n", "with", "open", "(", "fn", ")", "as", "f", ":", "\n", "                ", "out", "=", "int", "(", "f", ".", "read", "(", ")", ")", "\n", "", "if", "int", "(", "out", ")", "==", "1", ":", "\n", "                ", "empty", ".", "append", "(", "i", ")", "\n", "", "if", "len", "(", "empty", ")", "==", "ngpus", ":", "break", "\n", "", "if", "len", "(", "empty", ")", "<", "ngpus", ":", "\n", "            ", "print", "(", "\"avaliable gpus are less than required\"", ",", "len", "(", "empty", ")", ",", "ngpus", ")", "\n", "exit", "(", "-", "1", ")", "\n", "", "os", ".", "system", "(", "f\"rm -f {fn}\"", ")", "\n", "\n", "", "cmd", "=", "\"\"", "\n", "for", "i", "in", "range", "(", "ngpus", ")", ":", "\n", "        ", "cmd", "+=", "str", "(", "empty", "[", "i", "]", ")", "+", "\",\"", "\n", "\n", "", "return", "cmd", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.utils.initialize_model": [[65, 87], ["nn.DataParallel.to", "nn.DataParallel.load_state_dict", "nn.DataParallel.parameters", "torch.cuda.device_count", "torch.cuda.device_count", "print", "torch.DataParallel", "torch.load", "torch.load", "torch.load", "torch.load", "torch.cuda.device_count", "torch.cuda.device_count", "param.dim", "torch.init.constant", "torch.init.xavier_normal_"], "function", ["None"], ["", "def", "initialize_model", "(", "model", ",", "device", ",", "load_save_file", "=", "False", ")", ":", "\n", "    ", "if", "load_save_file", ":", "\n", "        ", "if", "device", ".", "type", "==", "\"cpu\"", ":", "\n", "            ", "load", "=", "torch", ".", "load", "(", "load_save_file", ",", "map_location", "=", "\"cpu\"", ")", "\n", "", "else", ":", "\n", "            ", "load", "=", "torch", ".", "load", "(", "load_save_file", ")", "\n", "", "model", ".", "load_state_dict", "(", "load", ")", "\n", "", "else", ":", "\n", "        ", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "param", ".", "dim", "(", ")", "==", "1", ":", "\n", "                ", "continue", "\n", "nn", ".", "init", ".", "constant", "(", "param", ",", "0", ")", "\n", "", "else", ":", "\n", "#nn.init.normal(param, 0.0, 0.15)", "\n", "                ", "nn", ".", "init", ".", "xavier_normal_", "(", "param", ")", "\n", "\n", "", "", "", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "      ", "print", "(", "\"Let's use\"", ",", "torch", ".", "cuda", ".", "device_count", "(", ")", ",", "\"GPUs!\"", ")", "\n", "# dim = 0 [30, xxx] -> [10, ...], [10, ...], [10, ...] on 3 GPUs", "\n", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "", "model", ".", "to", "(", "device", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.utils.read_data": [[88, 99], ["open", "f.readlines", "open", "pickle.load", "open", "pickle.load", "l.split", "float"], "function", ["None"], ["", "def", "read_data", "(", "filename", ",", "key_dir", ")", ":", "\n", "    ", "import", "pickle", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "lines", "=", "[", "l", ".", "split", "(", ")", "for", "l", "in", "lines", "]", "\n", "id_to_y", "=", "{", "l", "[", "0", "]", ":", "float", "(", "l", "[", "1", "]", ")", "for", "l", "in", "lines", "}", "\n", "", "with", "open", "(", "f\"{key_dir}/train_keys.pkl\"", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "train_keys", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "f\"{key_dir}/test_keys.pkl\"", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "test_keys", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "train_keys", ",", "test_keys", ",", "id_to_y", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.utils.get_dataset_dataloader": [[100, 119], ["MolDataset", "DataLoader", "MolDataset", "DataLoader"], "function", ["None"], ["", "def", "get_dataset_dataloader", "(", "train_keys", ",", "test_keys", ",", "data_dir", ",", "id_to_y", ",", "\n", "batch_size", ",", "num_workers", ",", "pos_noise_std", ")", ":", "\n", "    ", "from", "torch", ".", "utils", ".", "data", "import", "DataLoader", "\n", "from", "dataset", "import", "MolDataset", ",", "tensor_collate_fn", "\n", "train_dataset", "=", "MolDataset", "(", "train_keys", ",", "data_dir", ",", "id_to_y", ",", "\n", "pos_noise_std", "=", "pos_noise_std", ")", "\n", "train_dataloader", "=", "DataLoader", "(", "train_dataset", ",", "\n", "batch_size", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "collate_fn", "=", "tensor_collate_fn", ",", "\n", "shuffle", "=", "True", ")", "\n", "\n", "test_dataset", "=", "MolDataset", "(", "test_keys", ",", "data_dir", ",", "id_to_y", ")", "\n", "test_dataloader", "=", "DataLoader", "(", "test_dataset", ",", "\n", "batch_size", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "collate_fn", "=", "tensor_collate_fn", ",", "\n", "shuffle", "=", "False", ")", "\n", "return", "train_dataset", ",", "train_dataloader", ",", "test_dataset", ",", "test_dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.utils.write_result": [[121, 131], ["open", "pred.keys", "w.write", "w.write", "w.write", "range", "w.write", "w.write", "pred[].sum"], "function", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.write", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.write", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.write", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.write", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.write"], ["", "def", "write_result", "(", "filename", ",", "pred", ",", "true", ")", ":", "\n", "    ", "with", "open", "(", "filename", ",", "\"w\"", ")", "as", "w", ":", "\n", "        ", "for", "k", "in", "pred", ".", "keys", "(", ")", ":", "\n", "            ", "w", ".", "write", "(", "f\"{k}\\t{true[k]:.3f}\\t\"", ")", "\n", "w", ".", "write", "(", "f\"{pred[k].sum():.3f}\\t\"", ")", "\n", "w", ".", "write", "(", "f\"{0.0}\\t\"", ")", "\n", "for", "j", "in", "range", "(", "pred", "[", "k", "]", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "w", ".", "write", "(", "f\"{pred[k][j]:.3f}\\t\"", ")", "\n", "", "w", ".", "write", "(", "\"\\n\"", ")", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.utils.extract_binding_pocket": [[132, 173], ["PDBParser", "PDBParser.get_structure", "ligand.GetConformer().GetPositions", "PDBIO", "PDBIO.set_structure", "np.random.seed", "PDBIO.save", "Chem.MolFromPDBFile", "os.system", "os.path.exists", "GlySelect", "ligand.GetConformer", "np.array", "np.min", "str", "distance_matrix", "np.array", "np.random.randint", "list", "residue.get_atoms", "atom.get_vector", "atom.get_id"], "function", ["None"], ["", "def", "extract_binding_pocket", "(", "ligand", ",", "pdb", ")", ":", "\n", "    ", "from", "Bio", ".", "PDB", "import", "PDBParser", ",", "PDBIO", "\n", "from", "Bio", ".", "PDB", ".", "PDBIO", "import", "Select", "\n", "import", "os", "\n", "import", "numpy", "as", "np", "\n", "from", "rdkit", "import", "Chem", "\n", "from", "scipy", ".", "spatial", "import", "distance_matrix", "\n", "\n", "parser", "=", "PDBParser", "(", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "pdb", ")", ":", "\n", "#print (\"AAAAAAAAAAA\")", "\n", "        ", "return", "None", "\n", "", "structure", "=", "parser", ".", "get_structure", "(", "\"protein\"", ",", "pdb", ")", "\n", "#print (count_residue(structure))", "\n", "ligand_positions", "=", "ligand", ".", "GetConformer", "(", ")", ".", "GetPositions", "(", ")", "\n", "\n", "class", "GlySelect", "(", "Select", ")", ":", "\n", "        ", "def", "accept_residue", "(", "self", ",", "residue", ")", ":", "\n", "            ", "residue_positions", "=", "np", ".", "array", "(", "[", "np", ".", "array", "(", "list", "(", "atom", ".", "get_vector", "(", ")", ")", ")", "for", "atom", "in", "residue", ".", "get_atoms", "(", ")", "if", "\"H\"", "not", "in", "atom", ".", "get_id", "(", ")", "]", ")", "\n", "#print (residue_positions)", "\n", "min_dis", "=", "np", ".", "min", "(", "distance_matrix", "(", "residue_positions", ",", "ligand_positions", ")", ")", "\n", "if", "min_dis", "<", "5.0", ":", "\n", "                ", "return", "1", "\n", "", "else", ":", "\n", "                ", "return", "0", "\n", "", "", "", "io", "=", "PDBIO", "(", ")", "\n", "io", ".", "set_structure", "(", "structure", ")", "\n", "\n", "np", ".", "random", ".", "seed", "(", ")", "\n", "fn", "=", "\"/tmp/BS_tmp_\"", "+", "str", "(", "np", ".", "random", ".", "randint", "(", "0", ",", "100000", ",", "1", ")", "[", "0", "]", ")", "+", "\".pdb\"", "\n", "#fd, fpath = tempfile.mkstemp(prefix=\"BS_tmp\", dir=os.getcwd(), text=True)", "\n", "io", ".", "save", "(", "fn", ",", "GlySelect", "(", ")", ")", "\n", "#structure = parser.get_structure(\"protein\", fn)", "\n", "#if count_residue(structure)<10: return None", "\n", "#print (count_residue(structure))", "\n", "m2", "=", "Chem", ".", "MolFromPDBFile", "(", "fn", ")", "\n", "#os.unlink(fpath)", "\n", "os", ".", "system", "(", "\"rm -f \"", "+", "fn", ")", "\n", "\n", "return", "m2", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.utils.read_molecule": [[174, 184], ["exit", "Chem.SDMolSupplier", "Chem.MolFromMol2File", "print"], "function", ["None"], ["", "def", "read_molecule", "(", "filename", ")", ":", "\n", "    ", "from", "rdkit", "import", "Chem", "\n", "if", "filename", "[", "-", "4", ":", "]", "==", "\".sdf\"", ":", "\n", "        ", "return", "Chem", ".", "SDMolSupplier", "(", "filename", ")", "[", "0", "]", "\n", "", "elif", "filename", "[", "-", "5", ":", "]", "==", "\".mol2\"", ":", "\n", "        ", "return", "Chem", ".", "MolFromMol2File", "(", "filename", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "f\"{filename} is wrong filename\"", ")", "\n", "", "exit", "(", "-", "1", ")", "\n", "return", "None", "\n", "", ""]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.casf2016_benchmark.ranking_power.bootstrap_confidence": [[6, 15], ["range", "numpy.array", "scipy.stats.t.interval", "numpy.random.randint", "np.array.append", "len", "len", "len", "numpy.mean", "numpy.std", "sum", "len"], "function", ["None"], ["def", "bootstrap_confidence", "(", "values", ",", "n", "=", "10000", ",", "confidence", "=", "0.9", ")", ":", "\n", "    ", "metrics", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "n", ")", ":", "\n", "        ", "indice", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "values", ")", ",", "len", "(", "values", ")", ")", "\n", "sampled", "=", "[", "values", "[", "i", "]", "for", "i", "in", "indice", "]", "\n", "metrics", ".", "append", "(", "sum", "(", "sampled", ")", "/", "len", "(", "sampled", ")", ")", "\n", "", "metrics", "=", "np", ".", "array", "(", "metrics", ")", "\n", "return", "stats", ".", "t", ".", "interval", "(", "confidence", ",", "len", "(", "metrics", ")", "-", "1", ",", "\n", "loc", "=", "np", ".", "mean", "(", "metrics", ")", ",", "scale", "=", "np", ".", "std", "(", "metrics", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.casf2016_benchmark.ranking_power.predictive_index": [[16, 30], ["len", "range", "numpy.array", "numpy.array", "range", "numpy.sum", "numpy.sum", "abs", "np.array.append", "np.array.append"], "function", ["None"], ["", "def", "predictive_index", "(", "pred", ",", "true", ")", ":", "\n", "    ", "n", "=", "len", "(", "pred", ")", "\n", "ws", ",", "cs", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "n", ")", ":", "\n", "            ", "w", "=", "abs", "(", "true", "[", "j", "]", "-", "true", "[", "i", "]", ")", "\n", "c", "=", "-", "1", "\n", "if", "(", "pred", "[", "j", "]", "-", "pred", "[", "i", "]", ")", "*", "(", "true", "[", "j", "]", "-", "true", "[", "i", "]", ")", ">", "0", ":", "c", "=", "1", "\n", "elif", "true", "[", "j", "]", "-", "true", "[", "i", "]", "==", "0", ":", "c", "=", "0", "\n", "ws", ".", "append", "(", "w", ")", "\n", "cs", ".", "append", "(", "c", ")", "\n", "", "", "ws", "=", "np", ".", "array", "(", "ws", ")", "\n", "cs", "=", "np", ".", "array", "(", "cs", ")", "\n", "return", "np", ".", "sum", "(", "ws", "*", "cs", ")", "/", "np", ".", "sum", "(", "ws", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.casf2016_benchmark.scoring_power.mean_confidence_interval": [[7, 13], ["len", "numpy.array", "numpy.mean", "scipy.stats.sem", "scipy.stats.t.ppf"], "function", ["None"], ["def", "mean_confidence_interval", "(", "data", ",", "confidence", "=", "0.95", ")", ":", "\n", "    ", "a", "=", "1.0", "*", "np", ".", "array", "(", "data", ")", "\n", "n", "=", "len", "(", "a", ")", "\n", "m", ",", "se", "=", "np", ".", "mean", "(", "a", ")", ",", "stats", ".", "sem", "(", "a", ")", "\n", "h", "=", "se", "*", "stats", ".", "t", ".", "ppf", "(", "(", "1", "+", "confidence", ")", "/", "2.", ",", "n", "-", "1", ")", "\n", "return", "m", ",", "m", "-", "h", ",", "m", "+", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.casf2016_benchmark.scoring_power.bootstrap_confidence": [[14, 24], ["range", "numpy.array", "scipy.stats.t.interval", "numpy.random.randint", "scipy.stats.linregress", "np.array.append", "len", "len", "len", "numpy.mean", "numpy.std"], "function", ["None"], ["", "def", "bootstrap_confidence", "(", "true", ",", "pred", ",", "n", "=", "10000", ",", "confidence", "=", "0.9", ")", ":", "\n", "    ", "Rs", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "n", ")", ":", "\n", "        ", "indice", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "pred", ")", ",", "len", "(", "pred", ")", ")", "\n", "t", "=", "[", "true", "[", "i", "]", "for", "i", "in", "indice", "]", "\n", "p", "=", "[", "pred", "[", "i", "]", "for", "i", "in", "indice", "]", "\n", "a", ",", "b", ",", "R", ",", "_", ",", "std_err", "=", "stats", ".", "linregress", "(", "t", ",", "p", ")", "\n", "Rs", ".", "append", "(", "R", ")", "\n", "", "Rs", "=", "np", ".", "array", "(", "Rs", ")", "\n", "return", "stats", ".", "t", ".", "interval", "(", "confidence", ",", "len", "(", "Rs", ")", "-", "1", ",", "loc", "=", "np", ".", "mean", "(", "Rs", ")", ",", "scale", "=", "np", ".", "std", "(", "Rs", ")", ")", "\n", "#return mean_confidence_interval(Rs, confidence)", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.casf2016_benchmark.screening_power.bootstrap_confidence": [[7, 16], ["range", "numpy.array", "scipy.stats.t.interval", "numpy.random.randint", "np.array.append", "len", "len", "len", "numpy.mean", "numpy.std", "sum", "len"], "function", ["None"], ["def", "bootstrap_confidence", "(", "values", ",", "n", "=", "10000", ",", "confidence", "=", "0.9", ")", ":", "\n", "    ", "metrics", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "n", ")", ":", "\n", "        ", "indice", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "values", ")", ",", "len", "(", "values", ")", ")", "\n", "sampled", "=", "[", "values", "[", "i", "]", "for", "i", "in", "indice", "]", "\n", "metrics", ".", "append", "(", "sum", "(", "sampled", ")", "/", "len", "(", "sampled", ")", ")", "\n", "", "metrics", "=", "np", ".", "array", "(", "metrics", ")", "\n", "return", "stats", ".", "t", ".", "interval", "(", "confidence", ",", "len", "(", "metrics", ")", "-", "1", ",", "\n", "loc", "=", "np", ".", "mean", "(", "metrics", ")", ",", "scale", "=", "np", ".", "std", "(", "metrics", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.casf2016_benchmark.screening_power.choose_best_pose": [[17, 38], ["sorted", "id_to_pred.keys", "retval.keys", "list", "retval[].append", "min", "id_to_pred.keys", "set", "k.split", "k.split"], "function", ["None"], ["", "def", "choose_best_pose", "(", "id_to_pred", ")", ":", "\n", "    ", "\"\"\"\n    pairs = ['_'.join(k.split('_')[:-1]) for k in id_to_pred.keys()]\n    pairs = sorted(list(set(pairs)))\n    retval = dict()\n    for pair in pairs:\n        print (pair)\n        selected_keys = [k for k in id_to_pred.keys() if pair in k]\n        preds = [id_to_pred[k] for k in selected_keys]\n        preds, selected_keys = zip(*sorted(zip(preds, selected_keys)))\n        retval[selected_keys[0]]=preds[0]\n    \"\"\"", "\n", "pairs", "=", "[", "'_'", ".", "join", "(", "k", ".", "split", "(", "'_'", ")", "[", ":", "-", "1", "]", ")", "for", "k", "in", "id_to_pred", ".", "keys", "(", ")", "]", "\n", "pairs", "=", "sorted", "(", "list", "(", "set", "(", "pairs", ")", ")", ")", "\n", "retval", "=", "{", "p", ":", "[", "]", "for", "p", "in", "pairs", "}", "\n", "for", "k", "in", "id_to_pred", ".", "keys", "(", ")", ":", "\n", "        ", "pair", "=", "'_'", ".", "join", "(", "k", ".", "split", "(", "'_'", ")", "[", ":", "-", "1", "]", ")", "\n", "retval", "[", "pair", "]", ".", "append", "(", "id_to_pred", "[", "k", "]", ")", "\n", "", "for", "k", "in", "retval", ".", "keys", "(", ")", ":", "\n", "        ", "retval", "[", "k", "]", "=", "min", "(", "retval", "[", "k", "]", ")", "\n", "", "return", "retval", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.casf2016_benchmark.docking_power.bootstrap_confidence": [[6, 15], ["range", "numpy.array", "scipy.stats.t.interval", "numpy.random.randint", "np.array.append", "len", "len", "len", "numpy.mean", "numpy.std", "sum", "len"], "function", ["None"], ["def", "bootstrap_confidence", "(", "values", ",", "n", "=", "10000", ",", "confidence", "=", "0.9", ")", ":", "\n", "    ", "metrics", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "n", ")", ":", "\n", "        ", "indice", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "values", ")", ",", "len", "(", "values", ")", ")", "\n", "sampled", "=", "[", "values", "[", "i", "]", "for", "i", "in", "indice", "]", "\n", "metrics", ".", "append", "(", "sum", "(", "sampled", ")", "/", "len", "(", "sampled", ")", ")", "\n", "", "metrics", "=", "np", ".", "array", "(", "metrics", ")", "\n", "return", "stats", ".", "t", ".", "interval", "(", "confidence", ",", "len", "(", "metrics", ")", "-", "1", ",", "\n", "loc", "=", "np", ".", "mean", "(", "metrics", ")", ",", "scale", "=", "np", ".", "std", "(", "metrics", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.pdbbind_v2019_cross_screening.cal_docking.docking": [[16, 91], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "rdkit.Chem.SanitizeMol", "rdkit.Chem.AddHs", "rdkit.Chem.AllChem.EmbedMultipleConfs", "cenergy.index", "rdkit.Chem.RemoveHs", "rdkit.Chem.rdmolfiles.PDBWriter", "rdkit.Chem.rdmolfiles.PDBWriter.write", "rdkit.Chem.rdmolfiles.PDBWriter.close", "os.system", "os.path.exists", "cenergy.append", "min", "os.path.exists", "os.system", "os.path.exists", "os.system", "rdkit.Chem.SDMolSupplier", "rdkit.Chem.MolFromMol2File", "rdkit.Chem.AllChem.UFFOptimizeMolecule", "rdkit.Chem.AllChem.UFFGetMoleculeForceField().CalcEnergy", "rdkit.Chem.SDMolSupplier", "rdkit.Chem.AllChem.UFFGetMoleculeForceField"], "function", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.write"], ["def", "docking", "(", "k", ")", ":", "\n", "    ", "protein_id", ",", "ligand_id", "=", "k", "\n", "mol_id", "=", "f'{protein_id}_{ligand_id}'", "\n", "protein", "=", "os", ".", "path", ".", "join", "(", "pdbbind_dir", ",", "protein_id", ",", "\n", "f'{protein_id}_protein.pdb'", ")", "\n", "protein_pdbqt", "=", "os", ".", "path", ".", "join", "(", "pdbbind_dir", ",", "protein_id", ",", "\n", "f'{protein_id}_protein.pdbqt'", ")", "\n", "ligand", "=", "os", ".", "path", ".", "join", "(", "pdbbind_dir", ",", "ligand_id", ",", "f'{ligand_id}_ligand.sdf'", ")", "\n", "ligand_mol2", "=", "os", ".", "path", ".", "join", "(", "pdbbind_dir", ",", "ligand_id", ",", "\n", "f'{ligand_id}_ligand.mol2'", ")", "\n", "ligand_rcsb", "=", "os", ".", "path", ".", "join", "(", "rcsb_dir", ",", "ligand_id", ",", "f'{ligand_id}.sdf'", ")", "\n", "log_name", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "f'{mol_id}.log'", ")", "\n", "out_name", "=", "os", ".", "path", ".", "join", "(", "out_pdbqt_dir", ",", "f'{mol_id}_out.pdbqt'", ")", "\n", "pdb_name", "=", "os", ".", "path", ".", "join", "(", "pdb_dir", ",", "f'{mol_id}.pdb'", ")", "\n", "pdbqt_name", "=", "os", ".", "path", ".", "join", "(", "pdbqt_dir", ",", "f'{mol_id}.pdbqt'", ")", "\n", "\n", "# Generate 3D structure of ligand", "\n", "try", ":", "\n", "        ", "m", "=", "SDMolSupplier", "(", "ligand", ")", "[", "0", "]", "\n", "", "except", ":", "\n", "        ", "pass", "\n", "\n", "", "if", "m", "==", "None", "and", "os", ".", "path", ".", "exists", "(", "ligand_rcsb", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "m", "=", "SDMolSupplier", "(", "ligand_rcsb", ")", "[", "0", "]", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "\n", "", "", "if", "m", "==", "None", ":", "\n", "        ", "try", ":", "\n", "            ", "m", "=", "Chem", ".", "MolFromMol2File", "(", "ligand_mol2", ")", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "\n", "", "", "if", "m", "is", "None", ":", "\n", "        ", "return", "\n", "", "Chem", ".", "SanitizeMol", "(", "m", ")", "\n", "\n", "# Adding hydrogen atoms to molecule", "\n", "m", "=", "Chem", ".", "AddHs", "(", "m", ")", "\n", "cids", "=", "AllChem", ".", "EmbedMultipleConfs", "(", "\n", "m", ",", "\n", "numConfs", "=", "20", ",", "\n", ")", "\n", "cenergy", "=", "[", "]", "\n", "for", "conf", "in", "cids", ":", "\n", "        ", "converged", "=", "not", "AllChem", ".", "UFFOptimizeMolecule", "(", "m", ",", "confId", "=", "conf", ")", "\n", "cenergy", ".", "append", "(", "\n", "AllChem", ".", "UFFGetMoleculeForceField", "(", "m", ",", "confId", "=", "conf", ")", ".", "CalcEnergy", "(", ")", ")", "\n", "", "min_idx", "=", "cenergy", ".", "index", "(", "min", "(", "cenergy", ")", ")", "\n", "\n", "m", "=", "Chem", ".", "RemoveHs", "(", "m", ")", "\n", "w", "=", "PDBWriter", "(", "pdb_name", ")", "\n", "w", ".", "write", "(", "m", ",", "min_idx", ")", "\n", "w", ".", "close", "(", ")", "\n", "\n", "# pdb to pdbqt (both of ligand and protein)", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "pdbqt_name", ")", ":", "\n", "        ", "os", ".", "system", "(", "f'obabel {pdb_name} -O {pdbqt_name}'", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "protein_pdbqt", ")", ":", "\n", "        ", "os", ".", "system", "(", "f'obabel {protein} -O {protein_pdbqt}'", ")", "\n", "\n", "", "command", "=", "f'smina \\\n            -r {protein_pdbqt} \\\n            -l {pdbqt_name} \\\n            --autobox_ligand {ligand} \\\n            --autobox_add 8 \\\n            --exhaustiveness 8 \\\n            --log {log_name} \\\n            -o {out_name} \\\n            --cpu 1 \\\n            --num_modes 9 \\\n            --seed 0'", "\n", "\n", "os", ".", "system", "(", "command", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.pdbbind_v2019_cross_screening.cal_docking.run": [[93, 100], ["cal_docking.docking", "print", "print"], "function", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.pdbbind_v2019_random_screening.cal_docking.docking"], ["", "def", "run", "(", "k", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "docking", "(", "k", ")", "\n", "print", "(", "f\"{k} done!\"", ")", "\n", "", "except", ":", "\n", "        ", "print", "(", "f\"{k} failed!\"", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.pdbbind_v2019_cross_screening.pdbqt_to_pdb.split_pdbqt": [[8, 19], ["os.system", "[].split", "os.path.exists", "os.mkdir", "pdbqt.split", "pdbqt.split"], "function", ["None"], ["def", "split_pdbqt", "(", "pdbqt", ")", ":", "\n", "    ", "prefix", "=", "pdbqt", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "direc", "=", "\"/\"", ".", "join", "(", "pdbqt", ".", "split", "(", "\"/\"", ")", "[", ":", "-", "2", "]", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "direc", "+", "\"/result_split_pdbqt/\"", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "direc", "+", "\"/result_split_pdbqt\"", ")", "\n", "", "autodock_path", "=", "\"/home/mseok/programs/autodock_vina/autodock_vina_1_1_2_linux_x86/bin/vina_split\"", "\n", "command", "=", "f\"{autodock_path} \\\n            --input {pdbqt} \\\n            --ligand {direc}/result_split_pdbqt/{prefix}_\"", "\n", "\n", "os", ".", "system", "(", "command", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.pdbbind_v2019_cross_screening.pdbqt_to_pdb.cut_pdbqt": [[21, 26], ["os.path.exists", "os.system", "pdbqt.split", "pdbqt[].split"], "function", ["None"], ["", "def", "cut_pdbqt", "(", "pdbqt", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "pdbqt", ")", ":", "\n", "        ", "direc", "=", "\"/\"", ".", "join", "(", "pdbqt", ".", "split", "(", "\"/\"", ")", "[", ":", "-", "2", "]", ")", "\n", "pdb", "=", "direc", "+", "\"/result_pdb/\"", "+", "pdbqt", "[", ":", "-", "5", "]", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "+", "\"pdb\"", "\n", "os", ".", "system", "(", "f\"cut -c 1-60,70-79 {pdbqt} > {pdb}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.data.remove_noatom_protein.check": [[8, 14], ["open", "pickle.load", "p.GetNumAtoms", "os.remove", "print"], "function", ["None"], ["def", "check", "(", "k", ")", ":", "\n", "    ", "with", "open", "(", "k", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "_", ",", "_", ",", "p", ",", "_", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "if", "p", ".", "GetNumAtoms", "(", ")", "==", "0", ":", "\n", "        ", "os", ".", "remove", "(", "k", ")", "\n", "print", "(", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.data.preprocess.remove_water": [[19, 23], ["SaltRemover", "SaltRemover.StripMol"], "function", ["None"], ["def", "remove_water", "(", "m", ")", ":", "\n", "    ", "from", "rdkit", ".", "Chem", ".", "SaltRemover", "import", "SaltRemover", "\n", "remover", "=", "SaltRemover", "(", "defnData", "=", "\"[O]\"", ")", "\n", "return", "remover", ".", "StripMol", "(", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.data.preprocess.count_residue": [[25, 32], ["None"], "function", ["None"], ["", "def", "count_residue", "(", "structure", ")", ":", "\n", "    ", "count", "=", "0", "\n", "for", "model", "in", "structure", ":", "\n", "        ", "for", "chain", "in", "model", ":", "\n", "            ", "for", "residue", "in", "chain", ":", "\n", "                ", "count", "+=", "1", "\n", "", "", "", "return", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.data.preprocess.extract": [[34, 66], ["PDBParser", "PDBParser.get_structure", "ligand.GetConformer().GetPositions", "PDBIO", "PDBIO.set_structure", "PDBIO.save", "rdkit.Chem.MolFromPDBFile", "os.system", "os.path.exists", "print", "ResidueSelect", "ligand.GetConformer", "numpy.array", "numpy.min", "str", "len", "print", "scipy.spatial.distance_matrix", "numpy.array", "numpy.random.randint", "list", "residue.get_atoms", "atom.get_vector", "atom.get_id"], "function", ["None"], ["", "def", "extract", "(", "ligand", ",", "pdb", ")", ":", "\n", "    ", "parser", "=", "PDBParser", "(", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "pdb", ")", ":", "\n", "        ", "print", "(", "\"AAAAAAAAAAA\"", ")", "\n", "return", "None", "\n", "", "structure", "=", "parser", ".", "get_structure", "(", "\"protein\"", ",", "pdb", ")", "\n", "ligand_positions", "=", "ligand", ".", "GetConformer", "(", ")", ".", "GetPositions", "(", ")", "\n", "# Get distance between ligand positions (N_ligand, 3) and", "\n", "# residue positions (N_residue, 3) for each residue", "\n", "# only select residue with minimum distance of it is smaller than 5A", "\n", "class", "ResidueSelect", "(", "Select", ")", ":", "\n", "        ", "def", "accept_residue", "(", "self", ",", "residue", ")", ":", "\n", "            ", "residue_positions", "=", "np", ".", "array", "(", "[", "np", ".", "array", "(", "list", "(", "atom", ".", "get_vector", "(", ")", ")", ")", "for", "atom", "in", "residue", ".", "get_atoms", "(", ")", "if", "\"H\"", "not", "in", "atom", ".", "get_id", "(", ")", "]", ")", "\n", "if", "len", "(", "residue_positions", ".", "shape", ")", "<", "2", ":", "\n", "                ", "print", "(", "residue", ")", "\n", "return", "0", "\n", "", "min_dis", "=", "np", ".", "min", "(", "distance_matrix", "(", "residue_positions", ",", "ligand_positions", ")", ")", "\n", "if", "min_dis", "<", "5.0", ":", "\n", "                ", "return", "1", "\n", "", "else", ":", "\n", "                ", "return", "0", "\n", "", "", "", "io", "=", "PDBIO", "(", ")", "\n", "io", ".", "set_structure", "(", "structure", ")", "\n", "fn", "=", "\"BS_tmp_\"", "+", "str", "(", "np", ".", "random", ".", "randint", "(", "0", ",", "1000000", ",", "1", ")", "[", "0", "]", ")", "+", "\".pdb\"", "\n", "io", ".", "save", "(", "fn", ",", "ResidueSelect", "(", ")", ")", "\n", "m2", "=", "Chem", ".", "MolFromPDBFile", "(", "fn", ")", "\n", "os", ".", "system", "(", "\"rm -f \"", "+", "fn", ")", "\n", "return", "m2", "\n", "\n", "\n", "", "def", "uff", "(", "m", ")", ":", "\n", "    ", "Chem", ".", "SanitizeMol", "(", "m", ")", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.data.preprocess.uff": [[68, 89], ["rdkit.Chem.SanitizeMol", "rdkit.Chem.AddHs", "rdkit.Chem.AllChem.EmbedMultipleConfs", "cenergy.index", "rdkit.Chem.RemoveHs", "rdkit.Chem.SDWriter", "Chem.SDWriter.write", "Chem.SDWriter.close", "os.system", "cenergy.append", "min", "rdkit.Chem.SDMolSupplier", "rdkit.Chem.AllChem.UFFOptimizeMolecule", "rdkit.Chem.AllChem.UFFGetMoleculeForceField().CalcEnergy", "str", "rdkit.Chem.AllChem.UFFGetMoleculeForceField", "numpy.random.randint"], "function", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.write"], ["cids", "=", "AllChem", ".", "EmbedMultipleConfs", "(", "m", ",", "numConfs", "=", "20", ",", ")", "\n", "cenergy", "=", "[", "]", "\n", "for", "conf", "in", "cids", ":", "\n", "        ", "converged", "=", "not", "AllChem", ".", "UFFOptimizeMolecule", "(", "m", ",", "confId", "=", "conf", ")", "\n", "cenergy", ".", "append", "(", "AllChem", ".", "UFFGetMoleculeForceField", "(", "m", ",", "confId", "=", "conf", ")", ".", "CalcEnergy", "(", ")", ")", "\n", "", "min_idx", "=", "cenergy", ".", "index", "(", "min", "(", "cenergy", ")", ")", "\n", "m", "=", "Chem", ".", "RemoveHs", "(", "m", ")", "\n", "sdf_name", "=", "\"sdf_tmp_\"", "+", "str", "(", "np", ".", "random", ".", "randint", "(", "0", ",", "1000000", ",", "1", ")", "[", "0", "]", ")", "+", "\".pdb\"", "\n", "w", "=", "Chem", ".", "SDWriter", "(", "sdf_name", ")", "\n", "w", ".", "write", "(", "m", ",", "min_idx", ")", "\n", "w", ".", "close", "(", ")", "\n", "retval", "=", "Chem", ".", "SDMolSupplier", "(", "sdf_name", ")", "[", "0", "]", "\n", "os", ".", "system", "(", "\"rm -f \"", "+", "sdf_name", ")", "\n", "return", "retval", "\n", "\n", "\n", "", "def", "preprocessor", "(", "l", ")", ":", "\n", "    ", "pdb_fn", "=", "\"_\"", ".", "join", "(", "l", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", ".", "split", "(", "\"_\"", ")", "[", ":", "-", "2", "]", ")", "\n", "key", "=", "pdb_fn", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "\n", "# origin", "\n", "# l = \"../result_pdb/3oe4_1drj_out_1.pdb\"", "\n", "data_dir", "=", "\"./\"", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.data.preprocess.preprocessor": [[91, 136], ["os.path.exists", "rdkit.Chem.MolFromPDBFile", "preprocess.uff", "preprocess.extract", "preprocess.remove_water", "pdb_fn.split", "range", "print", "print", "print", "len", "len", "open", "pickle.dump", "[].split", "str", "os.path.exists", "Chem.MolFromPDBFile.GetConformers", "remove_water.GetConformers", "rdkit.Chem.MolFromPDBFile", "[].split", "l.split"], "function", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.pp_test.preprocess.uff", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.pp_test.preprocess.extract", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.pp_test.preprocess.remove_water"], ["        ", "return", "\n", "", "ligand_pdb_fn", "=", "l", "\n", "pdb_dir", "=", "\"../../refined_set\"", "\n", "bs_pdb_fn", "=", "f\"{pdb_dir}/{key}/{key}_protein.pdb\"", "\n", "\n", "# print(\"ligand_sdf_fn\")", "\n", "m1", "=", "Chem", ".", "MolFromPDBFile", "(", "ligand_pdb_fn", ")", "\n", "# print(m1)", "\n", "\n", "if", "m1", "is", "None", ":", "\n", "        ", "for", "i", "in", "range", "(", "2", ",", "10", ")", ":", "\n", "            ", "ligand_pdb_fn", "[", "-", "5", "]", "=", "str", "(", "i", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "l", ")", ":", "\n", "                ", "m1", "=", "Chem", ".", "MolFromPDBFile", "(", "ligand_pdb_fn", ")", "\n", "if", "m1", "is", "not", "None", ":", "\n", "                    ", "break", "\n", "", "", "", "print", "(", "f\"{pdb_fn} no mol generated from pdb\"", ")", "\n", "return", "\n", "\n", "", "m1_uff", "=", "uff", "(", "m1", ")", "\n", "if", "m1_uff", "is", "None", ":", "\n", "        ", "print", "(", "f\"{pdb_fn} no uff mol from ligand mol!\"", ")", "\n", "return", "\n", "\n", "# extract binding pocket", "\n", "", "m2", "=", "extract", "(", "m1", ",", "bs_pdb_fn", ")", "\n", "if", "m2", "is", "None", ":", "\n", "        ", "print", "(", "f\"{pdb_fn} no extracted binding pocket!\"", ")", "\n", "return", "\n", "", "m2", "=", "remove_water", "(", "m2", ")", "\n", "\n", "if", "len", "(", "m1", ".", "GetConformers", "(", ")", ")", "==", "0", ":", "\n", "        ", "return", "\n", "", "if", "len", "(", "m2", ".", "GetConformers", "(", ")", ")", "==", "0", ":", "\n", "        ", "return", "\n", "", "with", "open", "(", "data_dir", "+", "pdb_fn", ",", "\"wb\"", ")", "as", "fp", ":", "\n", "        ", "pickle", ".", "dump", "(", "(", "m1", ",", "m1_uff", ",", "m2", ",", "[", "]", ")", ",", "fp", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "return", "\n", "\n", "\n", "", "def", "run", "(", "l", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "return", "preprocessor", "(", "l", ")", "\n", "", "except", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.data.preprocess.run": [[138, 143], ["preprocess.preprocessor"], "function", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.pp_test.preprocess.preprocessor"], ["", "", "total", "=", "glob", ".", "glob", "(", "\"../result_pdb/*_out_1.pdb\"", ")", "\n", "keys", "=", "total", "\n", "for", "key", "in", "keys", ":", "\n", "    ", "run", "(", "key", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.mol2_decoy_docking.run_split.python_run": [[9, 25], ["dict", "dict.items", "open", "f.readlines", "[].split", "dic[].append", "open", "w.write", "line.split"], "function", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.write"], ["def", "python_run", "(", "fn", ")", ":", "\n", "    ", "with", "open", "(", "fn", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "dic", "=", "dict", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "if", "\"#\\tName\"", "in", "line", ":", "\n", "            ", "ligand", ",", "idx", "=", "line", ".", "split", "(", ")", "[", "-", "1", "]", ".", "split", "(", "\"_\"", ")", "\n", "curr", "=", "\"_\"", ".", "join", "(", "[", "ligand", ",", "idx", "]", ")", "+", "\".mol2\"", "\n", "dic", "[", "curr", "]", "=", "[", "line", "]", "\n", "", "else", ":", "\n", "            ", "dic", "[", "curr", "]", ".", "append", "(", "line", ")", "\n", "", "", "for", "k", ",", "v", "in", "dic", ".", "items", "(", ")", ":", "\n", "        ", "with", "open", "(", "k", ",", "\"w\"", ")", "as", "w", ":", "\n", "            ", "for", "l", "in", "v", ":", "\n", "                ", "w", ".", "write", "(", "l", ")", "\n", "", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.mol2_decoy_screening.run_split.python_run": [[9, 26], ["dict", "dict.items", "[].split", "open", "f.readlines", "[].split", "dic[].append", "open", "w.write", "fn.split", "line.split"], "function", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.write"], ["def", "python_run", "(", "fn", ")", ":", "\n", "    ", "with", "open", "(", "fn", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "dic", "=", "dict", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "if", "\"#\\tName\"", "in", "line", ":", "\n", "            ", "ligand", ",", "idx", "=", "line", ".", "split", "(", ")", "[", "-", "1", "]", ".", "split", "(", "\"_\"", ")", "\n", "curr", "=", "\"_\"", ".", "join", "(", "[", "ligand", ",", "idx", "]", ")", "+", "\".mol2\"", "\n", "dic", "[", "curr", "]", "=", "[", "line", "]", "\n", "", "else", ":", "\n", "            ", "dic", "[", "curr", "]", ".", "append", "(", "line", ")", "\n", "", "", "for", "k", ",", "v", "in", "dic", ".", "items", "(", ")", ":", "\n", "        ", "with", "open", "(", "k", ",", "\"w\"", ")", "as", "w", ":", "\n", "            ", "for", "l", "in", "v", ":", "\n", "                ", "w", ".", "write", "(", "l", ")", "\n", "", "", "", "return", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.csar1.split_receptor_ligand.split_protein_ligand": [[9, 56], ["pymol_cmd.load", "pymol_cmd.remove", "pymol_cmd.extract", "pymol_cmd.save", "pymol_cmd.save", "pymol_cmd.delete", "pymol_cmd.extract", "pymol_cmd.extract", "os.system", "rdkit.Chem.RemoveHs", "rdkit.Chem.RemoveHs", "rdkit.Chem.AllChem.AssignBondOrdersFromTemplate", "rdkit.Chem.SDWriter", "Chem.SDWriter.write", "Chem.SDWriter.close", "rdkit.Chem.MolFromSmiles", "rdkit.Chem.MolFromPDBFile", "print", "os.system"], "function", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.pp_test.preprocess.extract", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.pp_test.preprocess.extract", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.pp_test.preprocess.extract", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.write"], ["def", "split_protein_ligand", "(", "complex_pdb", ",", "\n", "protein_pdb", ",", "\n", "ligand_pdb", ",", "\n", "ligand_sdf", "=", "None", ",", "\n", "ligand_smiles", "=", "None", ",", "\n", "ligand_resname", "=", "None", ")", ":", "\n", "    ", "import", "pymol", "\n", "from", "pymol", "import", "cmd", "as", "pymol_cmd", "\n", "\n", "# load complex in pymol session", "\n", "pymol_cmd", ".", "load", "(", "complex_pdb", ",", "'complex'", ")", "\n", "pymol_cmd", ".", "remove", "(", "'hydrogens'", ")", "\n", "\n", "# extract ligand", "\n", "if", "ligand_resname", "is", "not", "None", ":", "\n", "        ", "pymol_cmd", ".", "extract", "(", "'ligand'", ",", "f'resn {ligand_resname}'", ")", "\n", "", "else", ":", "\n", "        ", "pymol_cmd", ".", "extract", "(", "'ligand'", ",", "'not polymer'", ")", "\n", "\n", "# extract protein", "\n", "", "pymol_cmd", ".", "extract", "(", "'receptor'", ",", "'polymer'", ")", "\n", "\n", "# save protein", "\n", "pymol_cmd", ".", "save", "(", "protein_pdb", ",", "'receptor'", ")", "\n", "\n", "# save ligand", "\n", "pymol_cmd", ".", "save", "(", "ligand_pdb", ",", "'ligand'", ")", "\n", "\n", "# delete session", "\n", "pymol_cmd", ".", "delete", "(", "'all'", ")", "\n", "\n", "# pdb to sdf", "\n", "if", "ligand_sdf", "is", "not", "None", ":", "\n", "        ", "if", "ligand_smiles", ":", "\n", "            ", "try", ":", "\n", "                ", "m_smiles", "=", "Chem", ".", "RemoveHs", "(", "Chem", ".", "MolFromSmiles", "(", "ligand_smiles", ")", ")", "\n", "m_pdb", "=", "Chem", ".", "RemoveHs", "(", "Chem", ".", "MolFromPDBFile", "(", "ligand_pdb", ")", ")", "\n", "m", "=", "AllChem", ".", "AssignBondOrdersFromTemplate", "(", "m_smiles", ",", "m_pdb", ")", "\n", "w", "=", "Chem", ".", "SDWriter", "(", "ligand_sdf", ")", "\n", "w", ".", "write", "(", "m", ")", "\n", "w", ".", "close", "(", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "print", "(", "f\"{ligand_sdf} failed: {e}\"", ")", "\n", "os", ".", "system", "(", "f'obabel {ligand_pdb} -O {ligand_sdf}'", ")", "\n", "", "", "else", ":", "\n", "            ", "os", ".", "system", "(", "f'obabel {ligand_pdb} -O {ligand_sdf}'", ")", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.csar2.split_receptor_ligand.split_protein_ligand": [[9, 56], ["pymol_cmd.load", "pymol_cmd.remove", "pymol_cmd.extract", "pymol_cmd.save", "pymol_cmd.save", "pymol_cmd.delete", "pymol_cmd.extract", "pymol_cmd.extract", "os.system", "rdkit.Chem.RemoveHs", "rdkit.Chem.RemoveHs", "rdkit.Chem.AllChem.AssignBondOrdersFromTemplate", "rdkit.Chem.SDWriter", "Chem.SDWriter.write", "Chem.SDWriter.close", "rdkit.Chem.MolFromSmiles", "rdkit.Chem.MolFromPDBFile", "print", "os.system"], "function", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.pp_test.preprocess.extract", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.pp_test.preprocess.extract", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.pp_test.preprocess.extract", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.write"], ["def", "split_protein_ligand", "(", "complex_pdb", ",", "\n", "protein_pdb", ",", "\n", "ligand_pdb", ",", "\n", "ligand_sdf", "=", "None", ",", "\n", "ligand_smiles", "=", "None", ",", "\n", "ligand_resname", "=", "None", ")", ":", "\n", "    ", "import", "pymol", "\n", "from", "pymol", "import", "cmd", "as", "pymol_cmd", "\n", "\n", "# load complex in pymol session", "\n", "pymol_cmd", ".", "load", "(", "complex_pdb", ",", "'complex'", ")", "\n", "pymol_cmd", ".", "remove", "(", "'hydrogens'", ")", "\n", "\n", "# extract ligand", "\n", "if", "ligand_resname", "is", "not", "None", ":", "\n", "        ", "pymol_cmd", ".", "extract", "(", "'ligand'", ",", "f'resn {ligand_resname}'", ")", "\n", "", "else", ":", "\n", "        ", "pymol_cmd", ".", "extract", "(", "'ligand'", ",", "'not polymer'", ")", "\n", "\n", "# extract protein", "\n", "", "pymol_cmd", ".", "extract", "(", "'receptor'", ",", "'polymer'", ")", "\n", "\n", "# save protein", "\n", "pymol_cmd", ".", "save", "(", "protein_pdb", ",", "'receptor'", ")", "\n", "\n", "# save ligand", "\n", "pymol_cmd", ".", "save", "(", "ligand_pdb", ",", "'ligand'", ")", "\n", "\n", "# delete session", "\n", "pymol_cmd", ".", "delete", "(", "'all'", ")", "\n", "\n", "# pdb to sdf", "\n", "if", "ligand_sdf", "is", "not", "None", ":", "\n", "        ", "if", "ligand_smiles", ":", "\n", "            ", "try", ":", "\n", "                ", "m_smiles", "=", "Chem", ".", "RemoveHs", "(", "Chem", ".", "MolFromSmiles", "(", "ligand_smiles", ")", ")", "\n", "m_pdb", "=", "Chem", ".", "RemoveHs", "(", "Chem", ".", "MolFromPDBFile", "(", "ligand_pdb", ")", ")", "\n", "m", "=", "AllChem", ".", "AssignBondOrdersFromTemplate", "(", "m_smiles", ",", "m_pdb", ")", "\n", "w", "=", "Chem", ".", "SDWriter", "(", "ligand_sdf", ")", "\n", "w", ".", "write", "(", "m", ")", "\n", "w", ".", "close", "(", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "print", "(", "f\"{ligand_sdf} failed: {e}\"", ")", "\n", "os", ".", "system", "(", "f'obabel {ligand_pdb} -O {ligand_sdf}'", ")", "\n", "", "", "else", ":", "\n", "            ", "os", ".", "system", "(", "f'obabel {ligand_pdb} -O {ligand_sdf}'", ")", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.pp_train.preprocess.remove_water": [[19, 23], ["SaltRemover", "SaltRemover.StripMol"], "function", ["None"], ["def", "remove_water", "(", "m", ")", ":", "\n", "    ", "from", "rdkit", ".", "Chem", ".", "SaltRemover", "import", "SaltRemover", "\n", "remover", "=", "SaltRemover", "(", "defnData", "=", "\"[O]\"", ")", "\n", "return", "remover", ".", "StripMol", "(", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.pp_train.preprocess.count_residue": [[25, 32], ["None"], "function", ["None"], ["", "def", "count_residue", "(", "structure", ")", ":", "\n", "    ", "count", "=", "0", "\n", "for", "model", "in", "structure", ":", "\n", "        ", "for", "chain", "in", "model", ":", "\n", "            ", "for", "residue", "in", "chain", ":", "\n", "                ", "count", "+=", "1", "\n", "", "", "", "return", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.pp_train.preprocess.extract": [[34, 63], ["PDBParser", "PDBParser.get_structure", "ligand.GetConformer().GetPositions", "PDBIO", "PDBIO.set_structure", "PDBIO.save", "rdkit.Chem.MolFromPDBFile", "os.system", "os.path.exists", "print", "ResidueSelect", "ligand.GetConformer", "numpy.array", "numpy.min", "str", "len", "print", "scipy.spatial.distance_matrix", "numpy.array", "numpy.random.randint", "list", "residue.get_atoms", "atom.get_vector", "atom.get_id"], "function", ["None"], ["", "def", "extract", "(", "ligand", ",", "pdb", ")", ":", "\n", "    ", "parser", "=", "PDBParser", "(", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "pdb", ")", ":", "\n", "        ", "print", "(", "\"AAAAAAAAAAA\"", ")", "\n", "return", "None", "\n", "", "structure", "=", "parser", ".", "get_structure", "(", "\"protein\"", ",", "pdb", ")", "\n", "ligand_positions", "=", "ligand", ".", "GetConformer", "(", ")", ".", "GetPositions", "(", ")", "\n", "# Get distance between ligand positions (N_ligand, 3) and", "\n", "# residue positions (N_residue, 3) for each residue", "\n", "# only select residue with minimum distance of it is smaller than 5A", "\n", "class", "ResidueSelect", "(", "Select", ")", ":", "\n", "        ", "def", "accept_residue", "(", "self", ",", "residue", ")", ":", "\n", "            ", "residue_positions", "=", "np", ".", "array", "(", "[", "np", ".", "array", "(", "list", "(", "atom", ".", "get_vector", "(", ")", ")", ")", "for", "atom", "in", "residue", ".", "get_atoms", "(", ")", "if", "\"H\"", "not", "in", "atom", ".", "get_id", "(", ")", "]", ")", "\n", "if", "len", "(", "residue_positions", ".", "shape", ")", "<", "2", ":", "\n", "                ", "print", "(", "residue", ")", "\n", "return", "0", "\n", "", "min_dis", "=", "np", ".", "min", "(", "distance_matrix", "(", "residue_positions", ",", "ligand_positions", ")", ")", "\n", "if", "min_dis", "<", "5.0", ":", "\n", "                ", "return", "1", "\n", "", "else", ":", "\n", "                ", "return", "0", "\n", "", "", "", "io", "=", "PDBIO", "(", ")", "\n", "io", ".", "set_structure", "(", "structure", ")", "\n", "fn", "=", "\"BS_tmp_\"", "+", "str", "(", "np", ".", "random", ".", "randint", "(", "0", ",", "1000000", ",", "1", ")", "[", "0", "]", ")", "+", "\".pdb\"", "\n", "io", ".", "save", "(", "fn", ",", "ResidueSelect", "(", ")", ")", "\n", "m2", "=", "Chem", ".", "MolFromPDBFile", "(", "fn", ")", "\n", "os", ".", "system", "(", "\"rm -f \"", "+", "fn", ")", "\n", "return", "m2", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.pp_train.preprocess.uff": [[65, 82], ["rdkit.Chem.SanitizeMol", "rdkit.Chem.AddHs", "rdkit.Chem.AllChem.EmbedMultipleConfs", "cenergy.index", "rdkit.Chem.RemoveHs", "rdkit.Chem.SDWriter", "Chem.SDWriter.write", "Chem.SDWriter.close", "os.system", "cenergy.append", "min", "rdkit.Chem.SDMolSupplier", "rdkit.Chem.AllChem.UFFOptimizeMolecule", "rdkit.Chem.AllChem.UFFGetMoleculeForceField().CalcEnergy", "str", "rdkit.Chem.AllChem.UFFGetMoleculeForceField", "numpy.random.randint"], "function", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.write"], ["", "def", "uff", "(", "m", ")", ":", "\n", "    ", "Chem", ".", "SanitizeMol", "(", "m", ")", "\n", "m", "=", "Chem", ".", "AddHs", "(", "m", ")", "\n", "cids", "=", "AllChem", ".", "EmbedMultipleConfs", "(", "m", ",", "numConfs", "=", "20", ",", ")", "\n", "cenergy", "=", "[", "]", "\n", "for", "conf", "in", "cids", ":", "\n", "        ", "converged", "=", "not", "AllChem", ".", "UFFOptimizeMolecule", "(", "m", ",", "confId", "=", "conf", ")", "\n", "cenergy", ".", "append", "(", "AllChem", ".", "UFFGetMoleculeForceField", "(", "m", ",", "confId", "=", "conf", ")", ".", "CalcEnergy", "(", ")", ")", "\n", "", "min_idx", "=", "cenergy", ".", "index", "(", "min", "(", "cenergy", ")", ")", "\n", "m", "=", "Chem", ".", "RemoveHs", "(", "m", ")", "\n", "sdf_name", "=", "\"sdf_tmp_\"", "+", "str", "(", "np", ".", "random", ".", "randint", "(", "0", ",", "1000000", ",", "1", ")", "[", "0", "]", ")", "+", "\".pdb\"", "\n", "w", "=", "Chem", ".", "SDWriter", "(", "sdf_name", ")", "\n", "w", ".", "write", "(", "m", ",", "min_idx", ")", "\n", "w", ".", "close", "(", ")", "\n", "retval", "=", "Chem", ".", "SDMolSupplier", "(", "sdf_name", ")", "[", "0", "]", "\n", "os", ".", "system", "(", "\"rm -f \"", "+", "sdf_name", ")", "\n", "return", "retval", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.pp_train.preprocess.preprocessor": [[84, 130], ["os.path.exists", "preprocess.uff", "preprocess.extract", "preprocess.remove_water", "l.split", "rdkit.Chem.SDMolSupplier", "os.path.exists", "rdkit.Chem.MolFromMol2File", "print", "print", "print", "len", "len", "open", "pickle.dump", "print", "Chem.MolFromMol2File.GetConformers", "remove_water.GetConformers", "rdkit.Chem.SDMolSupplier"], "function", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.pp_test.preprocess.uff", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.pp_test.preprocess.extract", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.pp_test.preprocess.remove_water"], ["", "def", "preprocessor", "(", "l", ")", ":", "\n", "    ", "pdb_fn", "=", "\"_\"", ".", "join", "(", "l", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", ".", "split", "(", "\"_\"", ")", "[", ":", "-", "2", "]", ")", "\n", "key", "=", "pdb_fn", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "\n", "# origin", "\n", "# l = \"../result_pdb/3oe4_1drj_out_1.pdb\"", "\n", "data_dir", "=", "\"./\"", "\n", "if", "os", ".", "path", ".", "exists", "(", "f\"{data_dir}/{key}\"", ")", ":", "\n", "        ", "return", "\n", "", "ligand_pdb_fn", "=", "l", "\n", "pdb_dir", "=", "\"../../refined_set\"", "\n", "bs_pdb_fn", "=", "f\"{pdb_dir}/{key}/{key}_protein.pdb\"", "\n", "\n", "# print(\"ligand_sdf_fn\")", "\n", "m1", "=", "Chem", ".", "MolFromPDBFile", "(", "ligand_pdb_fn", ")", "\n", "# print(m1)", "\n", "\n", "if", "m1", "is", "None", ":", "\n", "        ", "for", "i", "in", "range", "(", "2", ",", "10", ")", ":", "\n", "            ", "ligand_pdb_fn", "[", "-", "5", "]", "=", "str", "(", "i", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "l", ")", ":", "\n", "                ", "m1", "=", "Chem", ".", "MolFromPDBFile", "(", "ligand_pdb_fn", ")", "\n", "if", "m1", "is", "not", "None", ":", "\n", "                    ", "break", "\n", "", "", "", "print", "(", "f\"{pdb_fn} no mol generated from pdb\"", ")", "\n", "return", "\n", "\n", "", "m1_uff", "=", "uff", "(", "m1", ")", "\n", "if", "m1_uff", "is", "None", ":", "\n", "        ", "print", "(", "f\"{pdb_fn} no uff mol from ligand mol!\"", ")", "\n", "return", "\n", "\n", "# extract binding pocket", "\n", "", "m2", "=", "extract", "(", "m1", ",", "bs_pdb_fn", ")", "\n", "if", "m2", "is", "None", ":", "\n", "        ", "print", "(", "f\"{pdb_fn} no extracted binding pocket!\"", ")", "\n", "return", "\n", "", "m2", "=", "remove_water", "(", "m2", ")", "\n", "\n", "if", "len", "(", "m1", ".", "GetConformers", "(", ")", ")", "==", "0", ":", "\n", "        ", "return", "\n", "", "if", "len", "(", "m2", ".", "GetConformers", "(", ")", ")", "==", "0", ":", "\n", "        ", "return", "\n", "", "with", "open", "(", "data_dir", "+", "pdb_fn", ",", "\"wb\"", ")", "as", "fp", ":", "\n", "        ", "pickle", ".", "dump", "(", "(", "m1", ",", "m1_uff", ",", "m2", ",", "[", "]", ")", ",", "fp", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "return", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.pp_train.preprocess.run": [[132, 137], ["preprocess.preprocessor"], "function", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.pp_test.preprocess.preprocessor"], ["    ", "try", ":", "\n", "        ", "return", "preprocessor", "(", "l", ")", "\n", "", "except", ":", "\n", "        ", "return", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.pp_test.preprocess.remove_water": [[24, 28], ["SaltRemover", "SaltRemover.StripMol"], "function", ["None"], ["\n", "", "def", "count_residue", "(", "structure", ")", ":", "\n", "    ", "count", "=", "0", "\n", "for", "model", "in", "structure", ":", "\n", "        ", "for", "chain", "in", "model", ":", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.pp_test.preprocess.count_residue": [[30, 37], ["None"], "function", ["None"], ["                ", "count", "+=", "1", "\n", "", "", "", "return", "count", "\n", "\n", "\n", "", "def", "extract", "(", "ligand", ",", "pdb", ")", ":", "\n", "    ", "parser", "=", "PDBParser", "(", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "pdb", ")", ":", "\n", "        ", "print", "(", "\"AAAAAAAAAAA\"", ")", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.pp_test.preprocess.extract": [[39, 68], ["PDBParser", "PDBParser.get_structure", "ligand.GetConformer().GetPositions", "PDBIO", "PDBIO.set_structure", "PDBIO.save", "rdkit.Chem.MolFromPDBFile", "os.system", "os.path.exists", "print", "ResidueSelect", "ligand.GetConformer", "numpy.array", "numpy.min", "str", "len", "print", "scipy.spatial.distance_matrix", "numpy.array", "numpy.random.randint", "list", "residue.get_atoms", "atom.get_vector", "atom.get_id"], "function", ["None"], ["", "structure", "=", "parser", ".", "get_structure", "(", "\"protein\"", ",", "pdb", ")", "\n", "ligand_positions", "=", "ligand", ".", "GetConformer", "(", ")", ".", "GetPositions", "(", ")", "\n", "# Get distance between ligand positions (N_ligand, 3) and", "\n", "# residue positions (N_residue, 3) for each residue", "\n", "# only select residue with minimum distance of it is smaller than 5A", "\n", "class", "ResidueSelect", "(", "Select", ")", ":", "\n", "        ", "def", "accept_residue", "(", "self", ",", "residue", ")", ":", "\n", "            ", "residue_positions", "=", "np", ".", "array", "(", "[", "np", ".", "array", "(", "list", "(", "atom", ".", "get_vector", "(", ")", ")", ")", "for", "atom", "in", "residue", ".", "get_atoms", "(", ")", "if", "\"H\"", "not", "in", "atom", ".", "get_id", "(", ")", "]", ")", "\n", "if", "len", "(", "residue_positions", ".", "shape", ")", "<", "2", ":", "\n", "                ", "print", "(", "residue", ")", "\n", "return", "0", "\n", "", "min_dis", "=", "np", ".", "min", "(", "distance_matrix", "(", "residue_positions", ",", "ligand_positions", ")", ")", "\n", "if", "min_dis", "<", "5.0", ":", "\n", "                ", "return", "1", "\n", "", "else", ":", "\n", "                ", "return", "0", "\n", "", "", "", "io", "=", "PDBIO", "(", ")", "\n", "io", ".", "set_structure", "(", "structure", ")", "\n", "fn", "=", "\"BS_tmp_\"", "+", "str", "(", "np", ".", "random", ".", "randint", "(", "0", ",", "1000000", ",", "1", ")", "[", "0", "]", ")", "+", "\".pdb\"", "\n", "io", ".", "save", "(", "fn", ",", "ResidueSelect", "(", ")", ")", "\n", "m2", "=", "Chem", ".", "MolFromPDBFile", "(", "fn", ")", "\n", "os", ".", "system", "(", "\"rm -f \"", "+", "fn", ")", "\n", "return", "m2", "\n", "\n", "\n", "", "def", "uff", "(", "m", ")", ":", "\n", "    ", "Chem", ".", "SanitizeMol", "(", "m", ")", "\n", "m", "=", "Chem", ".", "AddHs", "(", "m", ")", "\n", "cids", "=", "AllChem", ".", "EmbedMultipleConfs", "(", "m", ",", "numConfs", "=", "20", ",", ")", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.pp_test.preprocess.uff": [[70, 87], ["rdkit.Chem.SanitizeMol", "rdkit.Chem.AddHs", "rdkit.Chem.AllChem.EmbedMultipleConfs", "cenergy.index", "rdkit.Chem.RemoveHs", "rdkit.Chem.SDWriter", "Chem.SDWriter.write", "Chem.SDWriter.close", "os.system", "cenergy.append", "min", "rdkit.Chem.SDMolSupplier", "rdkit.Chem.AllChem.UFFOptimizeMolecule", "rdkit.Chem.AllChem.UFFGetMoleculeForceField().CalcEnergy", "str", "rdkit.Chem.AllChem.UFFGetMoleculeForceField", "numpy.random.randint"], "function", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.write"], ["for", "conf", "in", "cids", ":", "\n", "        ", "converged", "=", "not", "AllChem", ".", "UFFOptimizeMolecule", "(", "m", ",", "confId", "=", "conf", ")", "\n", "cenergy", ".", "append", "(", "AllChem", ".", "UFFGetMoleculeForceField", "(", "m", ",", "confId", "=", "conf", ")", ".", "CalcEnergy", "(", ")", ")", "\n", "", "min_idx", "=", "cenergy", ".", "index", "(", "min", "(", "cenergy", ")", ")", "\n", "m", "=", "Chem", ".", "RemoveHs", "(", "m", ")", "\n", "sdf_name", "=", "\"sdf_tmp_\"", "+", "str", "(", "np", ".", "random", ".", "randint", "(", "0", ",", "1000000", ",", "1", ")", "[", "0", "]", ")", "+", "\".pdb\"", "\n", "w", "=", "Chem", ".", "SDWriter", "(", "sdf_name", ")", "\n", "w", ".", "write", "(", "m", ",", "min_idx", ")", "\n", "w", ".", "close", "(", ")", "\n", "retval", "=", "Chem", ".", "SDMolSupplier", "(", "sdf_name", ")", "[", "0", "]", "\n", "os", ".", "system", "(", "\"rm -f \"", "+", "sdf_name", ")", "\n", "return", "retval", "\n", "\n", "\n", "", "def", "preprocessor", "(", "l", ")", ":", "\n", "    ", "pdb_fn", "=", "\"_\"", ".", "join", "(", "l", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", ".", "split", "(", "\"_\"", ")", "[", ":", "-", "2", "]", ")", "\n", "key", "=", "pdb_fn", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "\n", "# origin", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.pp_test.preprocess.preprocessor": [[89, 136], ["print", "os.path.exists", "preprocess.uff", "preprocess.extract", "preprocess.remove_water", "l.split", "rdkit.Chem.SDMolSupplier", "os.path.exists", "rdkit.Chem.MolFromMol2File", "print", "print", "print", "len", "len", "open", "pickle.dump", "print", "Chem.MolFromMol2File.GetConformers", "remove_water.GetConformers", "rdkit.Chem.SDMolSupplier"], "function", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.pp_test.preprocess.uff", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.pp_test.preprocess.extract", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.pp_test.preprocess.remove_water"], ["data_dir", "=", "\"./\"", "\n", "if", "os", ".", "path", ".", "exists", "(", "f\"{data_dir}/{key}\"", ")", ":", "\n", "        ", "return", "\n", "", "ligand_pdb_fn", "=", "l", "\n", "pdb_dir", "=", "\"../../refined_set\"", "\n", "bs_pdb_fn", "=", "f\"{pdb_dir}/{key}/{key}_protein.pdb\"", "\n", "\n", "# print(\"ligand_sdf_fn\")", "\n", "m1", "=", "Chem", ".", "MolFromPDBFile", "(", "ligand_pdb_fn", ")", "\n", "# print(m1)", "\n", "\n", "if", "m1", "is", "None", ":", "\n", "        ", "for", "i", "in", "range", "(", "2", ",", "10", ")", ":", "\n", "            ", "ligand_pdb_fn", "[", "-", "5", "]", "=", "str", "(", "i", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "l", ")", ":", "\n", "                ", "m1", "=", "Chem", ".", "MolFromPDBFile", "(", "ligand_pdb_fn", ")", "\n", "if", "m1", "is", "not", "None", ":", "\n", "                    ", "break", "\n", "", "", "", "print", "(", "f\"{pdb_fn} no mol generated from pdb\"", ")", "\n", "return", "\n", "\n", "", "m1_uff", "=", "uff", "(", "m1", ")", "\n", "if", "m1_uff", "is", "None", ":", "\n", "        ", "print", "(", "f\"{pdb_fn} no uff mol from ligand mol!\"", ")", "\n", "return", "\n", "\n", "# extract binding pocket", "\n", "", "m2", "=", "extract", "(", "m1", ",", "bs_pdb_fn", ")", "\n", "if", "m2", "is", "None", ":", "\n", "        ", "print", "(", "f\"{pdb_fn} no extracted binding pocket!\"", ")", "\n", "return", "\n", "", "m2", "=", "remove_water", "(", "m2", ")", "\n", "\n", "if", "len", "(", "m1", ".", "GetConformers", "(", ")", ")", "==", "0", ":", "\n", "        ", "return", "\n", "", "if", "len", "(", "m2", ".", "GetConformers", "(", ")", ")", "==", "0", ":", "\n", "        ", "return", "\n", "", "with", "open", "(", "data_dir", "+", "pdb_fn", ",", "\"wb\"", ")", "as", "fp", ":", "\n", "        ", "pickle", ".", "dump", "(", "(", "m1", ",", "m1_uff", ",", "m2", ",", "[", "]", ")", ",", "fp", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "return", "\n", "\n", "\n", "", "def", "run", "(", "l", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "return", "preprocessor", "(", "l", ")", "\n", "", "except", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.pp_test.preprocess.run": [[138, 143], ["preprocess.preprocessor"], "function", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.pp_test.preprocess.preprocessor"], ["", "", "total", "=", "glob", ".", "glob", "(", "\"../result_pdb/*_out_1.pdb\"", ")", "\n", "keys", "=", "total", "\n", "for", "key", "in", "keys", ":", "\n", "    ", "run", "(", "key", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.pdbbind_v2019_docking_nowater.cal_docking.docking": [[16, 84], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.exists", "rdkit.Chem.SanitizeMol", "rdkit.Chem.AddHs", "rdkit.Chem.AllChem.EmbedMultipleConfs", "cenergy.index", "rdkit.Chem.RemoveHs", "rdkit.Chem.rdmolfiles.PDBWriter", "rdkit.Chem.rdmolfiles.PDBWriter.write", "rdkit.Chem.rdmolfiles.PDBWriter.close", "os.system", "rdkit.Chem.SDMolSupplier", "os.path.exists", "rdkit.Chem.MolFromMol2File", "cenergy.append", "min", "os.path.exists", "os.system", "os.path.exists", "os.system", "rdkit.Chem.SDMolSupplier", "rdkit.Chem.AllChem.UFFOptimizeMolecule", "rdkit.Chem.AllChem.UFFGetMoleculeForceField().CalcEnergy", "rdkit.Chem.AllChem.UFFGetMoleculeForceField"], "function", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.write"], ["def", "docking", "(", "k", ")", ":", "\n", "    ", "protein_id", ",", "ligand_id", "=", "k", "\n", "mol_id", "=", "f'{protein_id}_{ligand_id}'", "\n", "protein", "=", "os", ".", "path", ".", "join", "(", "pdbbind_dir", ",", "protein_id", ",", "\n", "f'{protein_id}_protein.pdb'", ")", "\n", "protein_pdbqt", "=", "os", ".", "path", ".", "join", "(", "pdbbind_dir", ",", "protein_id", ",", "\n", "f'{protein_id}_protein.pdbqt'", ")", "\n", "ligand", "=", "os", ".", "path", ".", "join", "(", "pdbbind_dir", ",", "ligand_id", ",", "f'{ligand_id}_ligand.sdf'", ")", "\n", "ligand_mol2", "=", "os", ".", "path", ".", "join", "(", "pdbbind_dir", ",", "ligand_id", ",", "\n", "f'{ligand_id}_ligand.mol2'", ")", "\n", "ligand_rcsb", "=", "os", ".", "path", ".", "join", "(", "rcsb_dir", ",", "ligand_id", ",", "f'{ligand_id}.sdf'", ")", "\n", "log_name", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "f'{mol_id}.log'", ")", "\n", "out_name", "=", "os", ".", "path", ".", "join", "(", "out_pdbqt_dir", ",", "f'{mol_id}_out.pdbqt'", ")", "\n", "pdb_name", "=", "os", ".", "path", ".", "join", "(", "pdb_dir", ",", "f'{mol_id}.pdb'", ")", "\n", "pdbqt_name", "=", "os", ".", "path", ".", "join", "(", "pdbqt_dir", ",", "f'{mol_id}.pdbqt'", ")", "\n", "\n", "# Generate 3D structure of ligand", "\n", "try", ":", "\n", "        ", "m", "=", "SDMolSupplier", "(", "ligand", ")", "[", "0", "]", "\n", "", "except", ":", "\n", "        ", "pass", "\n", "\n", "", "if", "m", "==", "None", "and", "os", ".", "path", ".", "exists", "(", "ligand_rcsb", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "m", "=", "SDMolSupplier", "(", "ligand_rcsb", ")", "[", "0", "]", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "\n", "", "", "if", "m", "==", "None", ":", "\n", "        ", "try", ":", "\n", "            ", "m", "=", "Chem", ".", "MolFromMol2File", "(", "ligand_mol2", ")", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "\n", "", "", "if", "m", "is", "None", ":", "\n", "        ", "return", "\n", "", "Chem", ".", "SanitizeMol", "(", "m", ")", "\n", "\n", "# Adding hydrogen atoms to molecule", "\n", "m", "=", "Chem", ".", "AddHs", "(", "m", ")", "\n", "cids", "=", "AllChem", ".", "EmbedMultipleConfs", "(", "\n", "m", ",", "\n", "numConfs", "=", "20", ",", "\n", ")", "\n", "cenergy", "=", "[", "]", "\n", "for", "conf", "in", "cids", ":", "\n", "        ", "converged", "=", "not", "AllChem", ".", "UFFOptimizeMolecule", "(", "m", ",", "confId", "=", "conf", ")", "\n", "cenergy", ".", "append", "(", "\n", "AllChem", ".", "UFFGetMoleculeForceField", "(", "m", ",", "confId", "=", "conf", ")", ".", "CalcEnergy", "(", ")", ")", "\n", "", "min_idx", "=", "cenergy", ".", "index", "(", "min", "(", "cenergy", ")", ")", "\n", "\n", "m", "=", "Chem", ".", "RemoveHs", "(", "m", ")", "\n", "w", "=", "PDBWriter", "(", "pdb_name", ")", "\n", "w", ".", "write", "(", "m", ",", "min_idx", ")", "\n", "w", ".", "close", "(", ")", "\n", "\n", "# pdb to pdbqt (both of ligand and protein)", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "pdbqt_name", ")", ":", "\n", "        ", "os", ".", "system", "(", "f'obabel {pdb_name} -O {pdbqt_name}'", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "protein_pdbqt", ")", ":", "\n", "        ", "os", ".", "system", "(", "f'obabel {protein} -O {protein_pdbqt}'", ")", "\n", "\n", "", "command", "="]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.pdbbind_v2019_docking_nowater.cal_docking.run": [[86, 93], ["cal_docking.docking", "print", "print", "k.split", "k.split"], "function", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.pdbbind_v2019_random_screening.cal_docking.docking"], ["\n", "\n", "os", ".", "system", "(", "command", ")", "\n", "\n", "\n", "", "def", "run", "(", "k", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.pdbbind_v2019_docking_nowater.pdbqt_to_pdb.split_pdbqt": [[8, 18], ["os.system", "[].split", "os.path.exists", "os.mkdir", "pdbqt.split", "pdbqt.split"], "function", ["None"], ["def", "split_pdbqt", "(", "pdbqt", ")", ":", "\n", "    ", "prefix", "=", "pdbqt", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "direc", "=", "\"/\"", ".", "join", "(", "pdbqt", ".", "split", "(", "\"/\"", ")", "[", ":", "-", "2", "]", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "direc", "+", "\"/result_split_pdbqt/\"", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "direc", "+", "\"/result_split_pdbqt\"", ")", "\n", "", "autodock_path", "=", "\"/home/mseok/programs/autodock_vina/autodock_vina_1_1_2_linux_x86/bin/vina_split\"", "\n", "command", "=", "f\"{autodock_path} \\\n            --input {pdbqt} \\\n            --ligand {direc}/result_split_pdbqt/{prefix}_\"", "\n", "\n", "os", ".", "system", "(", "command", ")", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.pdbbind_v2019_docking_nowater.pdbqt_to_pdb.cut_pdbqt": [[20, 25], ["os.path.exists", "os.system", "pdbqt.split", "pdbqt[].split"], "function", ["None"], ["\n", "", "def", "cut_pdbqt", "(", "pdbqt", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "pdbqt", ")", ":", "\n", "        ", "direc", "=", "\"/\"", ".", "join", "(", "pdbqt", ".", "split", "(", "\"/\"", ")", "[", ":", "-", "2", "]", ")", "\n", "pdb", "=", "direc", "+", "\"/result_pdb/\"", "+", "pdbqt", "[", ":", "-", "5", "]", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "+", "\"pdb\"", "\n", "os", ".", "system", "(", "f\"cut -c 1-60,70-79 {pdbqt} > {pdb}\"", ")", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.rcsb_pdb.download_ligand.wait_download": [[17, 40], ["time.time", "len", "time.sleep", "time.time", "os.listdir", "time.time", "os.listdir", "time.sleep", "fn.split", "os.listdir"], "function", ["None"], ["def", "wait_download", "(", "protein", ")", ":", "\n", "    ", "wait", "=", "True", "\n", "st", "=", "time", ".", "time", "(", ")", "\n", "dir_name", "=", "f\"./refined_data/{protein}\"", "\n", "while", "wait", ":", "\n", "        ", "if", "len", "(", "os", ".", "listdir", "(", "dir_name", ")", ")", ":", "\n", "            ", "wait", "=", "False", "\n", "done", "=", "False", "\n", "st", "=", "time", ".", "time", "(", ")", "\n", "while", "not", "done", ":", "\n", "                ", "fn", "=", "os", ".", "listdir", "(", "dir_name", ")", "[", "0", "]", "\n", "if", "fn", ".", "split", "(", "\".\"", ")", "[", "-", "1", "]", "==", "\"crdownload\"", ":", "\n", "                    ", "fn", "=", "os", ".", "listdir", "(", "dir_name", ")", "[", "0", "]", "\n", "time", ".", "sleep", "(", "1", ")", "\n", "", "else", ":", "\n", "                    ", "msg", "=", "f\"{protein} download success\"", "\n", "done", "=", "True", "\n", "", "", "", "time", ".", "sleep", "(", "1", ")", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "if", "(", "t", "-", "st", ">", "5", ")", ":", "\n", "            ", "msg", "=", "f\"{protein} download timeout\"", "\n", "wait", "=", "False", "\n", "", "", "return", "True", ",", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.rcsb_pdb.download_ligand.get_driver": [[42, 64], ["selenium.webdriver.chrome.options.Options", "selenium.webdriver.chrome.options.Options.add_argument", "selenium.webdriver.chrome.options.Options.add_argument", "selenium.webdriver.chrome.options.Options.add_argument", "selenium.webdriver.chrome.options.Options.add_argument", "selenium.webdriver.chrome.options.Options.add_experimental_option", "selenium.webdriver.DesiredCapabilities.CHROME.copy", "selenium.webdriver.Chrome", "selenium.webdriver.common.by.By.TAG_NAME"], "function", ["None"], ["", "def", "get_driver", "(", "protein", ")", ":", "\n", "    ", "chromedriver", "=", "driver_path", "\n", "download_path", "=", "f\"./refined_data/{protein}\"", "\n", "\n", "options", "=", "Options", "(", ")", "\n", "options", ".", "add_argument", "(", "\"--no-sandbox\"", ")", "\n", "options", ".", "add_argument", "(", "\"--disable-dev-shm-usage\"", ")", "\n", "options", ".", "add_argument", "(", "\"--headless\"", ")", "\n", "options", ".", "add_argument", "(", "\"--window-size=1920,1080\"", ")", "\n", "prefs", "=", "{", "\"download.default_directory\"", ":", "download_path", "}", "\n", "options", ".", "add_experimental_option", "(", "\"prefs\"", ",", "prefs", ")", "\n", "\n", "capabilities", "=", "DesiredCapabilities", ".", "CHROME", ".", "copy", "(", ")", "\n", "capabilities", "[", "\"acceptSslCerts\"", "]", "=", "True", "\n", "capabilities", "[", "\"acceptInsecureCerts\"", "]", "=", "True", "\n", "\n", "driver", "=", "webdriver", ".", "Chrome", "(", "\n", "options", "=", "options", ",", "\n", "executable_path", "=", "chromedriver", ",", "\n", "desired_capabilities", "=", "capabilities", ",", "\n", ")", "\n", "return", "driver", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.rcsb_pdb.download_ligand.download_ligand": [[66, 85], ["download_ligand.get_driver", "get_driver.get", "selenium.webdriver.support.ui.WebDriverWait().until", "get_driver.find_element_by_id().clear", "get_driver.find_element_by_id().send_keys", "get_driver.find_elements", "driver.find_elements.click", "download_ligand.wait_download", "selenium.webdriver.support.expected_conditions.presence_of_element_located", "get_driver.quit", "selenium.webdriver.support.ui.WebDriverWait", "get_driver.find_element_by_id", "get_driver.find_element_by_id", "b.get_attribute"], "function", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.rcsb_pdb.download_ligand.get_driver", "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.rcsb_pdb.download_ligand.wait_download"], ["", "def", "download_ligand", "(", "key", ")", ":", "\n", "    ", "protein", ",", "ligand", "=", "key", "\n", "driver", "=", "get_driver", "(", "protein", ")", "\n", "\n", "driver", ".", "get", "(", "\"https://www.rcsb.org/pages/download_features\"", ")", "\n", "WebDriverWait", "(", "driver", ",", "5", ")", ".", "until", "(", "\n", "EC", ".", "presence_of_element_located", "(", "(", "By", ".", "ID", ",", "\"ligandIdList\"", ")", ")", ")", "\n", "driver", ".", "find_element_by_id", "(", "\"ligandIdList\"", ")", ".", "clear", "(", ")", "\n", "driver", ".", "find_element_by_id", "(", "\"ligandIdList\"", ")", ".", "send_keys", "(", "ligand", ")", "\n", "button", "=", "driver", ".", "find_elements", "(", "By", ".", "TAG_NAME", ",", "\"input\"", ")", "\n", "button", "=", "[", "\n", "b", "for", "b", "in", "button", "if", "b", ".", "get_attribute", "(", "\"value\"", ")", "==", "\"Launch Download\"", "\n", "]", "[", "0", "]", "\n", "button", ".", "click", "(", ")", "\n", "\n", "done", ",", "msg", "=", "wait_download", "(", "protein", ")", "\n", "if", "done", ":", "\n", "        ", "driver", ".", "quit", "(", ")", "\n", "", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.rcsb_pdb.download_ligand.crawling": [[87, 102], ["print", "os.path.exists", "len", "os.path.exists", "os.mkdir", "download_ligand.download_ligand", "print", "os.listdir", "print"], "function", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.rcsb_pdb.download_ligand.download_ligand"], ["", "def", "crawling", "(", "key", ")", ":", "\n", "    ", "protein", ",", "_", "=", "key", "\n", "print", "(", "key", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "f\"./refined_data/{protein}\"", ")", "and", "len", "(", "os", ".", "listdir", "(", "f\"./refined_data/{protein}\"", ")", ")", ":", "\n", "        ", "return", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "f\"./refined_data/{protein}\"", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "f\"./refined_data/{protein}\"", ")", "\n", "", "try", ":", "\n", "        ", "msg", "=", "download_ligand", "(", "key", ")", "\n", "print", "(", "msg", ")", "\n", "return", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "e", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.rcsb_pdb.rename.select": [[5, 32], ["os.system", "key.upper", "len", "print", "os.removedirs", "fn.split", "open", "r.readlines", "open", "fn.split", "os.listdir", "w.write", "new_lines.append"], "function", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.write"], ["def", "select", "(", "fn", ")", ":", "\n", "# fn = './5c5t.sdf'", "\n", "    ", "directory", "=", "'/'", ".", "join", "(", "fn", ".", "split", "(", "'/'", ")", "[", ":", "-", "1", "]", ")", "\n", "if", "not", "len", "(", "os", ".", "listdir", "(", "directory", ")", ")", ":", "\n", "        ", "print", "(", "directory", ")", "\n", "os", ".", "removedirs", "(", "directory", ")", "\n", "", "key", "=", "fn", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "\n", "backup_fn", "=", "f'{key}_old.sdf'", "\n", "new_fn", "=", "f'{directory}/{key}.sdf'", "\n", "backup", "=", "f'{directory}/{backup_fn}'", "\n", "os", ".", "system", "(", "f'mv {fn} {backup}'", ")", "\n", "upperkey", "=", "key", ".", "upper", "(", ")", "\n", "with", "open", "(", "backup", ",", "'r'", ")", "as", "r", ":", "\n", "        ", "lines", "=", "r", ".", "readlines", "(", ")", "\n", "new_lines", "=", "[", "]", "\n", "here", "=", "False", "\n", "for", "l", "in", "lines", ":", "\n", "            ", "if", "upperkey", "in", "l", ":", "\n", "                ", "here", "=", "True", "\n", "", "if", "here", ":", "\n", "                ", "new_lines", ".", "append", "(", "l", ")", "\n", "", "if", "'$$$$'", "in", "l", ":", "\n", "                ", "here", "=", "False", "\n", "\n", "", "", "", "with", "open", "(", "new_fn", ",", "'w'", ")", "as", "w", ":", "\n", "        ", "for", "nl", "in", "new_lines", ":", "\n", "            ", "w", ".", "write", "(", "nl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.rcsb_pdb.ligand_crawling.find_ligand": [[14, 37], ["selenium.webdriver.chrome.options.Options", "selenium.webdriver.chrome.options.Options.add_argument", "selenium.webdriver.chrome.options.Options.add_argument", "selenium.webdriver.chrome.options.Options.add_argument", "selenium.webdriver.chrome.options.Options.add_argument", "selenium.webdriver.Chrome", "webdriver.Chrome.get", "print", "selenium.webdriver.support.ui.WebDriverWait().until", "webdriver.Chrome.find_element", "driver.find_element.find_element", "driver.find_element.find_elements", "webdriver.Chrome.quit", "time.sleep", "selenium.webdriver.support.expected_conditions.presence_of_all_elements_located", "webdriver.Chrome.find_element", "ligands[].get_attribute().split", "selenium.webdriver.support.ui.WebDriverWait", "r.get_attribute", "ligands[].get_attribute"], "function", ["None"], ["def", "find_ligand", "(", "complex", ")", ":", "\n", "    ", "options", "=", "Options", "(", ")", "\n", "options", ".", "add_argument", "(", "'--headless'", ")", "\n", "options", ".", "add_argument", "(", "'--no-sandbox'", ")", "\n", "options", ".", "add_argument", "(", "'--disable-dev-shm-usage'", ")", "\n", "options", ".", "add_argument", "(", "'--remote-debugging-port=9222'", ")", "\n", "chromedriver", "=", "\"/home/udg/wonho/others/chromedriver\"", "\n", "driver", "=", "webdriver", ".", "Chrome", "(", "executable_path", "=", "chromedriver", ",", "options", "=", "options", ")", "\n", "url", "=", "f'https://www.rcsb.org/structure/{complex}'", "\n", "driver", ".", "get", "(", "url", ")", "\n", "\n", "print", "(", "url", "+", "'!'", ")", "\n", "WebDriverWait", "(", "driver", ",", "5", ")", ".", "until", "(", "EC", ".", "presence_of_all_elements_located", "(", "(", "By", ".", "ID", ",", "'smallMoleculespanel'", ")", ")", ")", "\n", "boundary", "=", "driver", ".", "find_element", "(", "By", ".", "ID", ",", "'smallMoleculespanel'", ")", "\n", "table", "=", "boundary", ".", "find_element", "(", "By", ".", "ID", ",", "'LigandsMainTable'", ")", "\n", "if", "not", "table", ":", "\n", "        ", "table", "=", "driver", ".", "find_element", "(", "By", ".", "ID", ",", "'LigandsTable'", ")", "\n", "", "rows", "=", "table", ".", "find_elements", "(", "By", ".", "TAG_NAME", ",", "'tr'", ")", "\n", "ligands", "=", "[", "r", "for", "r", "in", "rows", "if", "'ligand_row'", "in", "r", ".", "get_attribute", "(", "'id'", ")", "]", "\n", "ligand", "=", "ligands", "[", "0", "]", ".", "get_attribute", "(", "'id'", ")", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", "\n", "driver", ".", "quit", "(", ")", "\n", "time", ".", "sleep", "(", "1", ")", "\n", "return", "(", "complex", ",", "ligand", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.rcsb_pdb.ligand_crawling.run": [[39, 45], ["ligand_crawling.find_ligand", "print"], "function", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.rcsb_pdb.ligand_crawling.find_ligand"], ["", "def", "run", "(", "complex", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "return", "find_ligand", "(", "complex", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "e", ")", "\n", "return", "(", "complex", ",", "e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.rcsb_pdb.ligand_crawling.multiprocess": [[47, 55], ["multiprocessing.Pool", "multiprocessing.Pool.map_async", "pool.map_async.wait", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "pool.map_async.get"], "function", ["None"], ["", "", "def", "multiprocess", "(", "keys", ")", ":", "\n", "    ", "pool", "=", "Pool", "(", "4", ")", "\n", "r", "=", "pool", ".", "map_async", "(", "run", ",", "keys", ")", "\n", "r", ".", "wait", "(", ")", "\n", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "data", "=", "r", ".", "get", "(", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.pdbbind_v2019_random_screening.cal_docking.docking": [[16, 82], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.exists", "rdkit.Chem.SanitizeMol", "rdkit.Chem.AddHs", "rdkit.Chem.AllChem.EmbedMultipleConfs", "cenergy.index", "rdkit.Chem.RemoveHs", "rdkit.Chem.rdmolfiles.PDBWriter", "rdkit.Chem.rdmolfiles.PDBWriter.write", "rdkit.Chem.rdmolfiles.PDBWriter.close", "os.system", "rdkit.Chem.MolFromSmiles", "cenergy.append", "min", "os.path.exists", "os.system", "os.path.exists", "os.system", "print", "rdkit.Chem.AllChem.UFFOptimizeMolecule", "rdkit.Chem.AllChem.UFFGetMoleculeForceField().CalcEnergy", "rdkit.Chem.AllChem.UFFGetMoleculeForceField"], "function", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.None.predict.write"], ["def", "docking", "(", "k", ")", ":", "\n", "    ", "protein_id", ",", "ligand_id", "=", "k", "\n", "mol_id", "=", "f'{protein_id}_{ligand_id}'", "\n", "protein", "=", "os", ".", "path", ".", "join", "(", "pdbbind_dir", ",", "protein_id", ",", "\n", "f'{protein_id}_protein.pdb'", ")", "\n", "protein_pdbqt", "=", "os", ".", "path", ".", "join", "(", "pdbbind_dir", ",", "protein_id", ",", "\n", "f'{protein_id}_protein.pdbqt'", ")", "\n", "ligand", "=", "os", ".", "path", ".", "join", "(", "pdbbind_dir", ",", "ligand_id", ",", "f'{ligand_id}_ligand.sdf'", ")", "\n", "ligand_mol2", "=", "os", ".", "path", ".", "join", "(", "pdbbind_dir", ",", "ligand_id", ",", "\n", "f'{ligand_id}_ligand.mol2'", ")", "\n", "ligand_rcsb", "=", "os", ".", "path", ".", "join", "(", "rcsb_dir", ",", "ligand_id", ",", "f'{ligand_id}.sdf'", ")", "\n", "log_name", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "f'{mol_id}.log'", ")", "\n", "out_name", "=", "os", ".", "path", ".", "join", "(", "out_pdbqt_dir", ",", "f'{mol_id}_out.pdbqt'", ")", "\n", "pdb_name", "=", "os", ".", "path", ".", "join", "(", "pdb_dir", ",", "f'{mol_id}.pdb'", ")", "\n", "pdbqt_name", "=", "os", ".", "path", ".", "join", "(", "pdbqt_dir", ",", "f'{mol_id}.pdbqt'", ")", "\n", "\n", "# Generate 3D structure of ligand", "\n", "try", ":", "\n", "        ", "m", "=", "SDMolSupplier", "(", "ligand", ")", "[", "0", "]", "\n", "", "except", ":", "\n", "        ", "pass", "\n", "\n", "", "if", "m", "==", "None", "and", "os", ".", "path", ".", "exists", "(", "ligand_rcsb", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "m", "=", "SDMolSupplier", "(", "ligand_rcsb", ")", "[", "0", "]", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "\n", "", "", "if", "m", "==", "None", ":", "\n", "        ", "try", ":", "\n", "            ", "m", "=", "Chem", ".", "MolFromMol2File", "(", "ligand_mol2", ")", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "\n", "", "", "if", "m", "is", "None", ":", "\n", "        ", "return", "\n", "", "Chem", ".", "SanitizeMol", "(", "m", ")", "\n", "\n", "# Adding hydrogen atoms to molecule", "\n", "m", "=", "Chem", ".", "AddHs", "(", "m", ")", "\n", "cids", "=", "AllChem", ".", "EmbedMultipleConfs", "(", "\n", "m", ",", "\n", "numConfs", "=", "20", ",", "\n", ")", "\n", "cenergy", "=", "[", "]", "\n", "for", "conf", "in", "cids", ":", "\n", "        ", "converged", "=", "not", "AllChem", ".", "UFFOptimizeMolecule", "(", "m", ",", "confId", "=", "conf", ")", "\n", "cenergy", ".", "append", "(", "\n", "AllChem", ".", "UFFGetMoleculeForceField", "(", "m", ",", "confId", "=", "conf", ")", ".", "CalcEnergy", "(", ")", ")", "\n", "", "min_idx", "=", "cenergy", ".", "index", "(", "min", "(", "cenergy", ")", ")", "\n", "\n", "m", "=", "Chem", ".", "RemoveHs", "(", "m", ")", "\n", "w", "=", "PDBWriter", "(", "pdb_name", ")", "\n", "w", ".", "write", "(", "m", ",", "min_idx", ")", "\n", "w", ".", "close", "(", ")", "\n", "\n", "# pdb to pdbqt (both of ligand and protein)", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "pdbqt_name", ")", ":", "\n", "        ", "os", ".", "system", "(", "f'obabel {pdb_name} -O {pdbqt_name}'", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "protein_pdbqt", ")", ":", "\n", "        ", "os", ".", "system", "(", "f'obabel {protein} -O {protein_pdbqt}'", ")", "\n", "\n", "", "command", "="]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.pdbbind_v2019_random_screening.cal_docking.run": [[84, 91], ["cal_docking.docking", "print", "print"], "function", ["home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.pdbbind_v2019_random_screening.cal_docking.docking"], ["\n", "\n", "os", ".", "system", "(", "command", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.pdbbind_v2019_random_screening.pdbqt_to_pdb.split_pdbqt": [[8, 18], ["os.system", "[].split", "os.path.exists", "os.mkdir", "pdbqt.split", "pdbqt.split"], "function", ["None"], ["def", "split_pdbqt", "(", "pdbqt", ")", ":", "\n", "    ", "prefix", "=", "pdbqt", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "direc", "=", "\"/\"", ".", "join", "(", "pdbqt", ".", "split", "(", "\"/\"", ")", "[", ":", "-", "2", "]", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "direc", "+", "\"/result_split_pdbqt/\"", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "direc", "+", "\"/result_split_pdbqt\"", ")", "\n", "", "autodock_path", "=", "\"/home/mseok/programs/autodock_vina/autodock_vina_1_1_2_linux_x86/bin/vina_split\"", "\n", "command", "=", "f\"{autodock_path} \\\n            --input {pdbqt} \\\n            --ligand {direc}/result_split_pdbqt/{prefix}_\"", "\n", "\n", "os", ".", "system", "(", "command", ")", "\n"]], "home.repos.pwc.inspect_result.jaechanglim_DTI_PDBbind.pdbbind_v2019_random_screening.pdbqt_to_pdb.cut_pdbqt": [[20, 25], ["os.path.exists", "os.system", "pdbqt.split", "pdbqt[].split"], "function", ["None"], ["\n", "", "def", "cut_pdbqt", "(", "pdbqt", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "pdbqt", ")", ":", "\n", "        ", "direc", "=", "\"/\"", ".", "join", "(", "pdbqt", ".", "split", "(", "\"/\"", ")", "[", ":", "-", "2", "]", ")", "\n", "pdb", "=", "direc", "+", "\"/result_pdb/\"", "+", "pdbqt", "[", ":", "-", "5", "]", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "+", "\"pdb\"", "\n", "os", ".", "system", "(", "f\"cut -c 1-60,70-79 {pdbqt} > {pdb}\"", ")", "\n"]]}