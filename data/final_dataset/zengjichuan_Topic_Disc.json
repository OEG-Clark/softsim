{"home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.gen_utils.generate": [[19, 95], ["model.eval", "data_feed.epoch_init", "list", "logger.info", "model.decoder.weight.data.cpu().numpy", "logger.info", "itertools.chain.from_iterable", "data_feed.next_batch", "model", "model.gen.cpu().data.numpy", "range", "json.dump", "model.decoder.weight.data.cpu", "range", "print", "engine.get_sent", "map", "logger.info", "logger.info", "logger.info", "numpy.argmax", "vocab_weight.append", "vocab_source.append", "numpy.array", "numpy.array", "numpy.argwhere().ravel", "gen_items.append", "model.gen.cpu", "list", "numpy.argwhere", "numpy.argwhere().ravel", "list", "list", "vocab_source.astype", "vocab_weight.astype", "numpy.argwhere"], "function", ["home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.dataset.dataloader_bases.DataLoader.epoch_init", "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.dataset.dataloader_bases.DataLoader.next_batch", "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.engine.get_sent"], ["def", "generate", "(", "model", ",", "data_feed", ",", "data_seq", ",", "config", ",", "num_batch", "=", "1", ",", "dest_f", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Generate latent representation and visualization data\n    :param model:\n    :param data_feed:\n    :param config:\n    :param num_batch:\n    :param dest_f:\n    :return:\n    \"\"\"", "\n", "model", ".", "eval", "(", ")", "\n", "old_batch_size", "=", "config", ".", "batch_size", "\n", "\n", "# if num_batch != None:", "\n", "#     config.batch_size = 5", "\n", "\n", "data_feed", ".", "epoch_init", "(", "config", ",", "ignore_residual", "=", "False", ",", "shuffle", "=", "False", ",", "verbose", "=", "False", ")", "\n", "config", ".", "batch_size", "=", "old_batch_size", "\n", "\n", "data_seq", ",", "msg_cnt", ",", "word_cnt", "=", "data_seq", "\n", "data_seq", "=", "list", "(", "itertools", ".", "chain", ".", "from_iterable", "(", "data_seq", ")", ")", "# flatten seq data", "\n", "\n", "logger", ".", "info", "(", "\"Generation: {} batches\"", ".", "format", "(", "data_feed", ".", "num_batch", "\n", "if", "num_batch", "is", "None", "\n", "else", "num_batch", ")", ")", "\n", "gen_items", "=", "[", "]", "\n", "\n", "weight_matrix", "=", "model", ".", "decoder", ".", "weight", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# vocab_size * (disc_num + topic_num)", "\n", "\n", "while", "True", ":", "\n", "        ", "batch", "=", "data_feed", ".", "next_batch", "(", ")", "\n", "if", "batch", "is", "None", "or", "(", "num_batch", "is", "not", "None", "\n", "and", "data_feed", ".", "ptr", ">", "num_batch", ")", ":", "\n", "            ", "break", "\n", "", "rst", "=", "model", "(", "batch", ",", "mode", "=", "INFER", ",", "return_latent", "=", "True", ")", "\n", "latent", "=", "rst", ".", "gen", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "tar", "=", "batch", "[", "'targets'", "]", "\n", "# print(tar.shape)", "\n", "\n", "index_base", "=", "(", "data_feed", ".", "ptr", "-", "1", ")", "*", "config", ".", "batch_size", "\n", "\n", "for", "b_id", "in", "range", "(", "tar", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "vocab_weight", "=", "[", "]", "\n", "vocab_source", "=", "[", "]", "\n", "for", "v_id", "in", "range", "(", "weight_matrix", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "att", "=", "latent", "[", "b_id", "]", "*", "weight_matrix", "[", "v_id", "]", "\n", "max_ind", "=", "np", ".", "argmax", "(", "att", ")", "\n", "max_val", "=", "att", "[", "max_ind", "]", "\n", "vocab_weight", ".", "append", "(", "max_val", ")", "\n", "vocab_source", ".", "append", "(", "max_ind", ")", "\n", "# filter with tar", "\n", "", "tar_ind", "=", "(", "tar", "[", "b_id", "]", ">", "0", ")", "\n", "vocab_weight", "=", "np", ".", "array", "(", "vocab_weight", ")", "[", "tar_ind", "]", "\n", "vocab_source", "=", "np", ".", "array", "(", "vocab_source", ")", "[", "tar_ind", "]", "\n", "\n", "# get target sent", "\n", "print", "(", "np", ".", "argwhere", "(", "tar_ind", ")", ".", "ravel", "(", ")", ")", "\n", "\n", "# tar_str = engine.get_sent(model, np.argwhere(tar_ind).squeeze())", "\n", "tar_str_seq", "=", "engine", ".", "get_sent", "(", "model", ",", "data_seq", "[", "index_base", "+", "b_id", "]", ".", "utt", ")", "\n", "\n", "# alias weight and source", "\n", "alias_index", "=", "map", "(", "list", "(", "np", ".", "argwhere", "(", "tar_ind", ")", ".", "ravel", "(", ")", ")", ".", "index", ",", "data_seq", "[", "index_base", "+", "b_id", "]", ".", "utt", ")", "\n", "vocab_weight", "=", "vocab_weight", "[", "alias_index", "]", "\n", "vocab_source", "=", "vocab_source", "[", "alias_index", "]", "\n", "\n", "logger", ".", "info", "(", "\"Target: {}\"", ".", "format", "(", "tar_str_seq", ")", ")", "\n", "logger", ".", "info", "(", "\"Source: {}\"", ".", "format", "(", "vocab_source", ")", ")", "\n", "logger", ".", "info", "(", "\"Weight: {}\\n\"", ".", "format", "(", "vocab_weight", ")", ")", "\n", "\n", "if", "dest_f", "is", "not", "None", ":", "\n", "                ", "gen_items", ".", "append", "(", "{", "\"target\"", ":", "tar_str_seq", ",", "\"source\"", ":", "list", "(", "vocab_source", ".", "astype", "(", "np", ".", "int", ")", ")", ",", "\"weight\"", ":", "list", "(", "vocab_weight", ".", "astype", "(", "np", ".", "float", ")", ")", "}", ")", "\n", "\n", "", "", "", "if", "gen_items", "and", "dest_f", "is", "not", "None", ":", "\n", "        ", "json", ".", "dump", "(", "gen_items", ",", "dest_f", ",", "indent", "=", "4", ")", "\n", "", "logger", ".", "info", "(", "\"Generation Done\"", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.engine.LossManager.__init__": [[17, 20], ["collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "losses", "=", "defaultdict", "(", "list", ")", "\n", "self", ".", "backward_losses", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.engine.LossManager.add_loss": [[21, 25], ["loss.items", "engine.LossManager.losses[].append", "type"], "methods", ["None"], ["", "def", "add_loss", "(", "self", ",", "loss", ")", ":", "\n", "        ", "for", "key", ",", "val", "in", "loss", ".", "items", "(", ")", ":", "\n", "            ", "if", "val", "is", "not", "None", "and", "type", "(", "val", ")", "is", "not", "bool", ":", "\n", "                ", "self", ".", "losses", "[", "key", "]", ".", "append", "(", "val", ".", "data", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.engine.LossManager.add_backward_loss": [[26, 28], ["engine.LossManager.backward_losses.append"], "methods", ["None"], ["", "", "", "def", "add_backward_loss", "(", "self", ",", "loss", ")", ":", "\n", "        ", "self", ".", "backward_losses", ".", "append", "(", "loss", ".", "data", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.engine.LossManager.clear": [[29, 32], ["collections.defaultdict"], "methods", ["None"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "losses", "=", "defaultdict", "(", "list", ")", "\n", "self", ".", "backward_losses", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.engine.LossManager.pprint": [[33, 46], ["engine.LossManager.losses.items", "str_losses.append", "numpy.average", "numpy.average", "str_losses.append"], "methods", ["None"], ["", "def", "pprint", "(", "self", ",", "name", ",", "window", "=", "None", ",", "prefix", "=", "None", ")", ":", "\n", "        ", "str_losses", "=", "[", "]", "\n", "for", "key", ",", "loss", "in", "self", ".", "losses", ".", "items", "(", ")", ":", "\n", "            ", "if", "loss", "is", "None", ":", "\n", "                ", "continue", "\n", "", "avg_loss", "=", "np", ".", "average", "(", "loss", ")", "if", "window", "is", "None", "else", "np", ".", "average", "(", "loss", "[", "-", "window", ":", "]", ")", "\n", "str_losses", ".", "append", "(", "\"{} {:.3f}\"", ".", "format", "(", "key", ",", "avg_loss", ")", ")", "\n", "if", "'nll'", "in", "key", ":", "\n", "                ", "str_losses", ".", "append", "(", "\"PPL({}) {:.3f}\"", ".", "format", "(", "key", ",", "avg_loss", ")", ")", "\n", "", "", "if", "prefix", ":", "\n", "            ", "return", "\"{}: {} {}\"", ".", "format", "(", "prefix", ",", "name", ",", "\" \"", ".", "join", "(", "str_losses", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "\"{} {}\"", ".", "format", "(", "name", ",", "\" \"", ".", "join", "(", "str_losses", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.engine.LossManager.avg_loss": [[47, 49], ["numpy.mean"], "methods", ["None"], ["", "", "def", "avg_loss", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "mean", "(", "self", ".", "backward_losses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.engine.print_topic_words": [[51, 56], ["enumerate", "decoder.weight.data.cpu().numpy", "decoder.weight.data.cpu", "numpy.argsort", "x.encode"], "function", ["None"], ["", "", "def", "print_topic_words", "(", "decoder", ",", "vocab_dic", ",", "n_top_words", "=", "10", ")", ":", "\n", "    ", "beta_exp", "=", "decoder", ".", "weight", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "T", "\n", "for", "k", ",", "beta_k", "in", "enumerate", "(", "beta_exp", ")", ":", "\n", "        ", "topic_words", "=", "[", "vocab_dic", "[", "w_id", "]", "for", "w_id", "in", "np", ".", "argsort", "(", "beta_k", ")", "[", ":", "-", "n_top_words", "-", "1", ":", "-", "1", "]", "]", "\n", "yield", "'Topic {}: {}'", ".", "format", "(", "k", ",", "' '", ".", "join", "(", "x", ".", "encode", "(", "'utf-8'", ")", "for", "x", "in", "topic_words", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.engine.get_sent": [[58, 61], ["None"], "function", ["None"], ["", "", "def", "get_sent", "(", "model", ",", "data", ")", ":", "\n", "    ", "sent", "=", "[", "model", ".", "vocab_bow", "[", "w_id", "]", "for", "w_id", "in", "data", "]", "\n", "return", "sent", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.engine.train": [[63, 148], ["model.get_optimizer", "engine.LossManager", "model.train", "logger.info", "logger.info", "logger.info", "models.model_bases.summary", "train_feed.epoch_init", "train_feed.next_batch", "model.get_optimizer.zero_grad", "model", "model.backward", "model.get_optimizer.step", "engine.LossManager.add_loss", "logger.info", "model.get_optimizer", "logger.info", "logger.info", "logger.info", "logging.info", "logging.info", "logging.info", "logging.info", "engine.validate", "model.train", "engine.LossManager.clear", "logger.info", "engine.LossManager.pprint", "model.reg_l1_loss.update_l1_strength", "engine.LossManager.pprint", "logger.info", "engine.print_topic_words", "engine.print_topic_words", "max", "logger.info", "logger.info", "torch.save", "logger.info", "model.state_dict", "os.path.join"], "function", ["home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.model_bases.BaseModel.get_optimizer", "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.engine.train", "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.model_bases.summary", "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.dataset.dataloader_bases.DataLoader.epoch_init", "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.dataset.dataloader_bases.DataLoader.next_batch", "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.model_bases.BaseModel.backward", "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.engine.LossManager.add_loss", "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.model_bases.BaseModel.get_optimizer", "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.engine.validate", "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.engine.train", "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.engine.LossManager.clear", "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.engine.LossManager.pprint", "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.criterions.L1RegLoss.update_l1_strength", "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.engine.LossManager.pprint", "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.engine.print_topic_words", "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.engine.print_topic_words"], ["", "def", "train", "(", "model", ",", "train_feed", ",", "valid_feed", ",", "test_feed", ",", "config", ")", ":", "\n", "\n", "    ", "patience", "=", "10", "# wait for at least 10 epoch before stop", "\n", "valid_loss_threshold", "=", "np", ".", "inf", "\n", "best_valid_loss", "=", "np", ".", "inf", "\n", "batch_cnt", "=", "0", "\n", "optimizer", "=", "model", ".", "get_optimizer", "(", "config", ")", "\n", "done_epoch", "=", "0", "\n", "train_loss", "=", "LossManager", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "logger", ".", "info", "(", "summary", "(", "model", ",", "show_weights", "=", "False", ")", ")", "\n", "logger", ".", "info", "(", "\"**** Training Begins ****\"", ")", "\n", "logger", ".", "info", "(", "\"**** Epoch 0/{} ****\"", ".", "format", "(", "config", ".", "max_epoch", ")", ")", "\n", "\n", "while", "True", ":", "\n", "        ", "train_feed", ".", "epoch_init", "(", "config", ",", "verbose", "=", "done_epoch", "==", "0", ",", "shuffle", "=", "True", ")", "\n", "while", "True", ":", "\n", "            ", "batch", "=", "train_feed", ".", "next_batch", "(", ")", "\n", "if", "batch", "is", "None", ":", "\n", "                ", "break", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", "=", "model", "(", "batch", ")", "\n", "if", "model", ".", "flush_valid", ":", "\n", "                ", "logger", ".", "info", "(", "\"Flush previous valid loss\"", ")", "\n", "best_valid_loss", "=", "np", ".", "inf", "\n", "model", ".", "flush_valid", "=", "False", "\n", "optimizer", "=", "model", ".", "get_optimizer", "(", "config", ")", "\n", "\n", "", "model", ".", "backward", "(", "batch_cnt", ",", "loss", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "batch_cnt", "+=", "1", "\n", "train_loss", ".", "add_loss", "(", "loss", ")", "\n", "\n", "if", "batch_cnt", "%", "config", ".", "print_step", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "train_loss", ".", "pprint", "(", "\"Train\"", ",", "window", "=", "config", ".", "print_step", ",", "\n", "prefix", "=", "\"{}/{}-({:.3f})\"", ".", "format", "(", "batch_cnt", "%", "config", ".", "ckpt_step", ",", "\n", "config", ".", "ckpt_step", ",", "\n", "model", ".", "kl_w", ")", ")", ")", "\n", "# update l1 strength", "\n", "if", "config", ".", "use_l1_reg", "and", "batch_cnt", "<=", "config", ".", "freeze_step", ":", "\n", "                    ", "model", ".", "reg_l1_loss", ".", "update_l1_strength", "(", "model", ".", "ctx_decoder", ".", "weight", ")", "\n", "\n", "", "", "if", "batch_cnt", "%", "config", ".", "ckpt_step", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "\"\\n=== Evaluating Model ===\"", ")", "\n", "logger", ".", "info", "(", "train_loss", ".", "pprint", "(", "\"Train\"", ")", ")", "\n", "done_epoch", "+=", "1", "\n", "\n", "# validation", "\n", "logging", ".", "info", "(", "\"Discourse Words:\"", ")", "\n", "logging", ".", "info", "(", "'\\n'", ".", "join", "(", "print_topic_words", "(", "model", ".", "x_decoder", ",", "model", ".", "vocab_bow", ")", ")", ")", "\n", "logging", ".", "info", "(", "\"Topic Words:\"", ")", "\n", "logging", ".", "info", "(", "\"\\n\"", ".", "join", "(", "print_topic_words", "(", "model", ".", "ctx_decoder", ",", "model", ".", "vocab_bow", ")", ")", ")", "\n", "\n", "valid_loss", "=", "validate", "(", "model", ",", "valid_feed", ",", "config", ",", "batch_cnt", ")", "\n", "\n", "# update early stopping stats", "\n", "if", "valid_loss", "<", "best_valid_loss", ":", "\n", "                    ", "if", "valid_loss", "<=", "valid_loss_threshold", "*", "config", ".", "improve_threshold", ":", "\n", "                        ", "patience", "=", "max", "(", "patience", ",", "\n", "done_epoch", "*", "config", ".", "patient_increase", ")", "\n", "valid_loss_threshold", "=", "valid_loss", "\n", "logger", ".", "info", "(", "\"Update patience to {}\"", ".", "format", "(", "patience", ")", ")", "\n", "\n", "", "if", "config", ".", "save_model", ":", "\n", "                        ", "logger", ".", "info", "(", "\"Model Saved.\"", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "config", ".", "session_dir", ",", "\"model\"", ")", ")", "\n", "\n", "", "best_valid_loss", "=", "valid_loss", "\n", "\n", "", "if", "done_epoch", ">=", "config", ".", "max_epoch", "or", "config", ".", "early_stop", "and", "patience", "<=", "done_epoch", ":", "\n", "                    ", "if", "done_epoch", "<", "config", ".", "max_epoch", ":", "\n", "                        ", "logger", ".", "info", "(", "\"!!Early stop due to run out of patience!!\"", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Best validation loss %f\"", "%", "best_valid_loss", ")", "\n", "\n", "return", "\n", "\n", "# exit eval model", "\n", "", "model", ".", "train", "(", ")", "\n", "train_loss", ".", "clear", "(", ")", "\n", "logger", ".", "info", "(", "\"\\n**** Epcoch {}/{} ****\"", ".", "format", "(", "done_epoch", ",", "\n", "config", ".", "max_epoch", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.engine.validate": [[150, 168], ["model.eval", "valid_feed.epoch_init", "engine.LossManager", "engine.LossManager.avg_loss", "logger.info", "logger.info", "valid_feed.next_batch", "model", "engine.LossManager.add_loss", "engine.LossManager.add_backward_loss", "engine.LossManager.pprint", "model.model_sel_loss"], "function", ["home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.dataset.dataloader_bases.DataLoader.epoch_init", "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.engine.LossManager.avg_loss", "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.dataset.dataloader_bases.DataLoader.next_batch", "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.engine.LossManager.add_loss", "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.engine.LossManager.add_backward_loss", "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.engine.LossManager.pprint", "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.conv_models.TDM.model_sel_loss"], ["", "", "", "", "def", "validate", "(", "model", ",", "valid_feed", ",", "config", ",", "batch_cnt", "=", "None", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "valid_feed", ".", "epoch_init", "(", "config", ",", "shuffle", "=", "False", ",", "verbose", "=", "True", ")", "\n", "losses", "=", "LossManager", "(", ")", "\n", "while", "True", ":", "\n", "        ", "batch", "=", "valid_feed", ".", "next_batch", "(", ")", "\n", "if", "batch", "is", "None", ":", "\n", "            ", "break", "\n", "", "loss", "=", "model", "(", "batch", ")", "\n", "losses", ".", "add_loss", "(", "loss", ")", "\n", "losses", ".", "add_backward_loss", "(", "model", ".", "model_sel_loss", "(", "loss", ",", "batch_cnt", ")", ")", "\n", "\n", "", "valid_loss", "=", "losses", ".", "avg_loss", "(", ")", "\n", "\n", "logger", ".", "info", "(", "losses", ".", "pprint", "(", "valid_feed", ".", "name", ")", ")", "\n", "logger", ".", "info", "(", "\"Total valid loss {}\"", ".", "format", "(", "valid_loss", ")", ")", "\n", "\n", "return", "valid_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.engine.inference": [[170, 207], ["model.eval", "data_feed.epoch_init", "logger.info", "numpy.concatenate", "numpy.concatenate", "enumerate", "pickle.dump", "logger.info", "data_feed.next_batch", "model", "model.gen.cpu().data.numpy", "model.d_ids.cpu().data.numpy", "np.concatenate.append", "np.concatenate.append", "rst.append", "model.gen.cpu", "model.d_ids.cpu"], "function", ["home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.dataset.dataloader_bases.DataLoader.epoch_init", "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.dataset.dataloader_bases.DataLoader.next_batch"], ["", "def", "inference", "(", "model", ",", "data_feed", ",", "config", ",", "num_batch", "=", "1", ",", "dest_f", "=", "None", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "data_feed", ".", "epoch_init", "(", "config", ",", "ignore_residual", "=", "False", ",", "shuffle", "=", "num_batch", "is", "not", "None", ",", "verbose", "=", "False", ")", "\n", "\n", "logger", ".", "info", "(", "\"Inference: {} batches\"", ".", "format", "(", "data_feed", ".", "num_batch", "\n", "if", "num_batch", "is", "None", "\n", "else", "num_batch", ")", ")", "\n", "gen", "=", "[", "]", "\n", "d_ids", "=", "[", "]", "\n", "while", "True", ":", "\n", "        ", "batch", "=", "data_feed", ".", "next_batch", "(", ")", "\n", "if", "batch", "is", "None", "or", "(", "num_batch", "is", "not", "None", "\n", "and", "data_feed", ".", "ptr", ">", "num_batch", ")", ":", "\n", "            ", "break", "\n", "", "outputs", "=", "model", "(", "batch", ",", "mode", "=", "INFER", ")", "\n", "\n", "# move from GPU to CPU", "\n", "gen_", "=", "outputs", ".", "gen", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "d_ids_", "=", "outputs", ".", "d_ids", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "gen", ".", "append", "(", "gen_", ")", "\n", "d_ids", ".", "append", "(", "d_ids_", ")", "\n", "", "gen", "=", "np", ".", "concatenate", "(", "gen", ")", "\n", "# output discourse", "\n", "d_ids", "=", "np", ".", "concatenate", "(", "d_ids", ")", "\n", "rst", "=", "[", "]", "\n", "\n", "for", "r_id", ",", "row", "in", "enumerate", "(", "data_feed", ".", "data", ")", ":", "\n", "        ", "u_id", "=", "row", ".", "target", ".", "meta", "[", "\"id\"", "]", "\n", "disc", "=", "row", ".", "target", ".", "meta", "[", "\"disc\"", "]", "\n", "vec", "=", "gen", "[", "r_id", "]", "\n", "d_id", "=", "d_ids", "[", "r_id", "]", "[", "0", "]", "\n", "rst", ".", "append", "(", "{", "\"id\"", ":", "u_id", ",", "\"true_disc\"", ":", "disc", ",", "\"pred_disc\"", ":", "d_id", ",", "\"vec\"", ":", "vec", "}", ")", "\n", "\n", "", "pickle", ".", "dump", "(", "rst", ",", "dest_f", ")", "\n", "logger", ".", "info", "(", "\"Inference Done\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.topic_disc.add_argument_group": [[23, 27], ["parser.add_argument_group", "arg_lists.append"], "function", ["home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.topic_disc.add_argument_group"], ["def", "add_argument_group", "(", "name", ")", ":", "\n", "    ", "arg", "=", "parser", ".", "add_argument_group", "(", "name", ")", "\n", "arg_lists", ".", "append", "(", "arg", ")", "\n", "return", "arg", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.topic_disc.get_config": [[29, 32], ["parser.parse_known_args"], "function", ["None"], ["", "def", "get_config", "(", ")", ":", "\n", "    ", "config", ",", "unparsed", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "return", "config", ",", "unparsed", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.topic_disc.main": [[81, 115], ["utils.prepare_dirs_loggers", "dataset.corpora.TwitterCorpus", "corpora.TwitterCorpus.get_corpus_bow", "dataset.data_loaders.TCDataLoader", "dataset.data_loaders.TCDataLoader", "dataset.data_loaders.TCDataLoader", "corpora.TwitterCorpus.get_corpus_seq", "models.conv_models.TDM", "engine.train", "dataset.data_loaders.TCDataLoader", "dataset.data_loaders.TCDataLoader", "dataset.data_loaders.TCDataLoader", "os.path.basename", "conv_models.TDM.cuda", "open", "gen_utils.generate", "os.path.join"], "function", ["home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.utils.prepare_dirs_loggers", "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.dataset.corpora.TwitterCorpus.get_corpus_bow", "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.dataset.corpora.TwitterCorpus.get_corpus_seq", "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.engine.train", "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.gen_utils.generate"], ["def", "main", "(", "config", ")", ":", "\n", "    ", "prepare_dirs_loggers", "(", "config", ",", "os", ".", "path", ".", "basename", "(", "__file__", ")", ")", "\n", "corpus_client", "=", "corpora", ".", "TwitterCorpus", "(", "config", ")", "\n", "\n", "conv_corpus", "=", "corpus_client", ".", "get_corpus_bow", "(", ")", "\n", "train_conv", ",", "valid_conv", ",", "test_conv", ",", "vocab_size", "=", "conv_corpus", "[", "'train'", "]", ",", "conv_corpus", "[", "'valid'", "]", ",", "conv_corpus", "[", "'test'", "]", ",", "conv_corpus", "[", "'vocab_size'", "]", "\n", "\n", "# create data loader that feed the deep models", "\n", "train_feed", "=", "data_loaders", ".", "TCDataLoader", "(", "\"Train\"", ",", "train_conv", ",", "vocab_size", ",", "config", ")", "\n", "valid_feed", "=", "data_loaders", ".", "TCDataLoader", "(", "\"Valid\"", ",", "valid_conv", ",", "vocab_size", ",", "config", ")", "\n", "test_feed", "=", "data_loaders", ".", "TCDataLoader", "(", "\"Test\"", ",", "test_conv", ",", "vocab_size", ",", "config", ")", "\n", "\n", "# for generation", "\n", "conv_corpus_seq", "=", "corpus_client", ".", "get_corpus_seq", "(", ")", "\n", "train_conv_seq", ",", "valid_conv_seq", ",", "test_conv_seq", "=", "conv_corpus_seq", "[", "'train'", "]", ",", "conv_corpus_seq", "[", "'valid'", "]", ",", "conv_corpus_seq", "[", "'test'", "]", "\n", "\n", "model", "=", "conv_models", ".", "TDM", "(", "corpus_client", ",", "config", ")", "\n", "\n", "if", "config", ".", "use_gpu", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "\n", "", "engine", ".", "train", "(", "model", ",", "train_feed", ",", "valid_feed", ",", "test_feed", ",", "config", ")", "\n", "\n", "# config.batch_size = 10", "\n", "train_feed_output", "=", "data_loaders", ".", "TCDataLoader", "(", "\"Train_Output\"", ",", "train_conv", ",", "vocab_size", ",", "config", ")", "\n", "test_feed_output", "=", "data_loaders", ".", "TCDataLoader", "(", "\"Test_Output\"", ",", "test_conv", ",", "vocab_size", ",", "config", ")", "\n", "valid_feed_output", "=", "data_loaders", ".", "TCDataLoader", "(", "\"Valid_Output\"", ",", "valid_conv", ",", "vocab_size", ",", "config", ")", "\n", "\n", "if", "config", ".", "output_vis", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "config", ".", "session_dir", ",", "\"gen_samples.txt\"", ")", ",", "\"w\"", ")", "as", "gen_f", ":", "\n", "            ", "gen_utils", ".", "generate", "(", "model", ",", "valid_feed_output", ",", "valid_conv_seq", ",", "config", ",", "num_batch", "=", "2", ",", "dest_f", "=", "gen_f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.criterions.L2Loss.forward": [[15, 23], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "type", "zip", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["def", "forward", "(", "self", ",", "state_a", ",", "state_b", ")", ":", "\n", "        ", "if", "type", "(", "state_a", ")", "is", "tuple", ":", "\n", "            ", "losses", "=", "0.0", "\n", "for", "s_a", ",", "s_b", "in", "zip", "(", "state_a", ",", "state_b", ")", ":", "\n", "                ", "losses", "+=", "torch", ".", "pow", "(", "s_a", "-", "s_b", ",", "2", ")", "\n", "", "", "else", ":", "\n", "            ", "losses", "=", "torch", ".", "pow", "(", "state_a", "-", "state_b", ",", "2", ")", "\n", "", "return", "torch", ".", "mean", "(", "losses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.criterions.L1RegLoss.__init__": [[30, 34], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.conv_models.GumbelConnector.__init__"], ["def", "__init__", "(", "self", ",", "sparsity", ")", ":", "\n", "        ", "super", "(", "L1RegLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sparsity", "=", "sparsity", "\n", "self", ".", "l1_strength", "=", "0.001", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.criterions.L1RegLoss.forward": [[35, 38], ["super().forward"], "methods", ["home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.conv_models.GumbelConnector.forward"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "l1_loss", "=", "super", "(", "L1RegLoss", ",", "self", ")", ".", "forward", "(", "input", ",", "target", ")", "\n", "return", "self", ".", "l1_strength", "*", "l1_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.criterions.L1RegLoss.update_l1_strength": [[39, 46], ["sum", "criterions.L1RegLoss.logger.info", "input.abs"], "methods", ["None"], ["", "def", "update_l1_strength", "(", "self", ",", "input", ")", ":", "\n", "# check sparsity", "\n", "        ", "num_zeros", "=", "(", "input", ".", "abs", "(", ")", "<", "1e-3", ")", ".", "sum", "(", ")", ".", "float", "(", ")", "\n", "cur_sparsity", "=", "num_zeros", "/", "(", "input", ".", "shape", "[", "0", "]", "*", "input", ".", "shape", "[", "1", "]", ")", "\n", "diff", "=", "self", ".", "sparsity", "-", "cur_sparsity", "\n", "self", ".", "l1_strength", "*=", "sum", "(", "2.0", "**", "diff", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Current sparsity: %.3f, Update l1 strength to %.3f\"", "%", "(", "cur_sparsity", ",", "self", ".", "l1_strength", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.criterions.NLLEntropy.__init__": [[50, 64], ["torch.nn.modules.loss._Loss.__init__", "criterions.NLLEntropy.logger.info", "numpy.ones", "utils.cast_type", "len", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.conv_models.GumbelConnector.__init__", "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.utils.cast_type"], ["def", "__init__", "(", "self", ",", "padding_idx", ",", "config", ",", "rev_vocab", "=", "None", ",", "key_vocab", "=", "None", ")", ":", "\n", "        ", "super", "(", "NLLEntropy", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "padding_idx", "=", "padding_idx", "if", "padding_idx", "is", "not", "None", "else", "-", "100", "\n", "self", ".", "avg_type", "=", "config", ".", "avg_type", "\n", "\n", "if", "rev_vocab", "is", "None", "or", "key_vocab", "is", "None", ":", "\n", "            ", "self", ".", "weight", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"Use extra cost for key words\"", ")", "\n", "weight", "=", "np", ".", "ones", "(", "len", "(", "rev_vocab", ")", ")", "\n", "for", "key", "in", "key_vocab", ":", "\n", "                ", "weight", "[", "rev_vocab", "[", "key", "]", "]", "=", "10.0", "\n", "", "self", ".", "weight", "=", "cast_type", "(", "torch", ".", "from_numpy", "(", "weight", ")", ",", "FLOAT", ",", "\n", "config", ".", "use_gpu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.criterions.NLLEntropy.forward": [[65, 95], ["net_output.size", "net_output.view", "labels.view", "net_output.size", "torch.nll_loss", "torch.nll_loss", "torch.nll_loss", "torch.nll_loss", "torch.nll_loss", "torch.nll_loss", "torch.nll_loss.view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "net_output.size", "torch.nll_loss", "torch.nll_loss", "ValueError", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sign", "torch.sign", "torch.sign", "torch.sign"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "net_output", ",", "labels", ")", ":", "\n", "        ", "batch_size", "=", "net_output", ".", "size", "(", "0", ")", "\n", "input", "=", "net_output", ".", "view", "(", "-", "1", ",", "net_output", ".", "size", "(", "-", "1", ")", ")", "\n", "target", "=", "labels", ".", "view", "(", "-", "1", ")", "\n", "if", "self", ".", "avg_type", "is", "None", ":", "\n", "            ", "loss", "=", "F", ".", "nll_loss", "(", "input", ",", "target", ",", "size_average", "=", "False", ",", "\n", "ignore_index", "=", "self", ".", "padding_idx", ",", "\n", "weight", "=", "self", ".", "weight", ")", "\n", "", "elif", "self", ".", "avg_type", "==", "'seq'", ":", "\n", "            ", "loss", "=", "F", ".", "nll_loss", "(", "input", ",", "target", ",", "size_average", "=", "False", ",", "\n", "ignore_index", "=", "self", ".", "padding_idx", ",", "\n", "weight", "=", "self", ".", "weight", ")", "\n", "loss", "=", "loss", "/", "batch_size", "\n", "", "elif", "self", ".", "avg_type", "==", "'real_word'", ":", "\n", "            ", "loss", "=", "F", ".", "nll_loss", "(", "input", ",", "target", ",", "size_average", "=", "True", ",", "\n", "ignore_index", "=", "self", ".", "padding_idx", ",", "\n", "weight", "=", "self", ".", "weight", ",", "reduce", "=", "False", ")", "\n", "loss", "=", "loss", ".", "view", "(", "-", "1", ",", "net_output", ".", "size", "(", "1", ")", ")", "\n", "loss", "=", "torch", ".", "sum", "(", "loss", ",", "dim", "=", "1", ")", "\n", "word_cnt", "=", "torch", ".", "sum", "(", "torch", ".", "sign", "(", "labels", ")", ",", "dim", "=", "1", ")", ".", "float", "(", ")", "\n", "loss", "=", "loss", "/", "word_cnt", "\n", "loss", "=", "torch", ".", "mean", "(", "loss", ")", "\n", "", "elif", "self", ".", "avg_type", "==", "'word'", ":", "\n", "            ", "loss", "=", "F", ".", "nll_loss", "(", "input", ",", "target", ",", "size_average", "=", "True", ",", "\n", "ignore_index", "=", "self", ".", "padding_idx", ",", "\n", "weight", "=", "self", ".", "weight", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown avg type\"", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.criterions.NormKLLoss.__init__": [[98, 101], ["torch.nn.modules.loss._Loss.__init__"], "methods", ["home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.conv_models.GumbelConnector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "unit_average", "=", "False", ")", ":", "\n", "        ", "super", "(", "NormKLLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "unit_average", "=", "unit_average", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.criterions.NormKLLoss.forward": [[102, 113], ["torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "recog_mu", ",", "recog_logvar", ",", "prior_mu", ",", "prior_logvar", ")", ":", "\n", "# find the KL divergence between two Gaussian distribution", "\n", "        ", "loss", "=", "1.0", "+", "(", "recog_logvar", "-", "prior_logvar", ")", "\n", "loss", "-=", "torch", ".", "div", "(", "torch", ".", "pow", "(", "prior_mu", "-", "recog_mu", ",", "2", ")", ",", "torch", ".", "exp", "(", "prior_logvar", ")", ")", "\n", "loss", "-=", "torch", ".", "div", "(", "torch", ".", "exp", "(", "recog_logvar", ")", ",", "torch", ".", "exp", "(", "prior_logvar", ")", ")", "\n", "if", "self", ".", "unit_average", ":", "\n", "            ", "kl_loss", "=", "-", "0.5", "*", "torch", ".", "mean", "(", "loss", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "kl_loss", "=", "-", "0.5", "*", "torch", ".", "sum", "(", "loss", ",", "dim", "=", "1", ")", "\n", "", "avg_kl_loss", "=", "torch", ".", "mean", "(", "kl_loss", ")", "\n", "return", "avg_kl_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.criterions.GaussianKLLoss.__init__": [[116, 118], ["torch.nn.modules.loss._Loss.__init__"], "methods", ["home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.conv_models.GumbelConnector.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GaussianKLLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.criterions.GaussianKLLoss.forward": [[119, 129], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "logvar.exp", "mu.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "mu", ",", "logvar", ",", "batch_size", "=", "None", ",", "unit_average", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        0.5 * sum(1 + log(sigma^2) - mu^2 - sigma^2)\n        \"\"\"", "\n", "y_kl", "=", "-", "0.5", "*", "torch", ".", "sum", "(", "1", "+", "logvar", "-", "mu", ".", "pow", "(", "2", ")", "-", "logvar", ".", "exp", "(", ")", ",", "dim", "=", "1", ")", "\n", "\n", "if", "unit_average", ":", "\n", "            ", "return", "torch", ".", "mean", "(", "y_kl", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "sum", "(", "y_kl", ")", "/", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.criterions.PPLLoss.__init__": [[133, 152], ["torch.nn.modules.loss._Loss.__init__", "criterions.PPLLoss.logger.info", "numpy.ones", "key_vocab.values", "utils.cast_type", "criterions.PPLLoss.logger.info", "numpy.ones", "ignore_vocab.values", "utils.cast_type", "len", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "len", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "vocab.token2id.get", "vocab.token2id.get"], "methods", ["home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.conv_models.GumbelConnector.__init__", "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.utils.cast_type", "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.utils.cast_type"], ["def", "__init__", "(", "self", ",", "config", ",", "vocab", "=", "None", ",", "key_vocab", "=", "None", ",", "ignore_vocab", "=", "None", ")", ":", "\n", "        ", "super", "(", "PPLLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "None", "\n", "self", ".", "ignore", "=", "None", "\n", "if", "vocab", "is", "not", "None", ":", "\n", "            ", "if", "key_vocab", "is", "not", "None", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "\"Use extra cost for key words\"", ")", "\n", "weight", "=", "np", ".", "ones", "(", "len", "(", "vocab", ")", ")", "\n", "for", "key_w", "in", "key_vocab", ".", "values", "(", ")", ":", "\n", "                    ", "weight", "[", "vocab", ".", "token2id", ".", "get", "(", "key_w", ")", "]", "=", "10.0", "\n", "", "self", ".", "weight", "=", "cast_type", "(", "torch", ".", "from_numpy", "(", "weight", ")", ",", "FLOAT", ",", "\n", "config", ".", "use_gpu", ")", "\n", "", "if", "ignore_vocab", "is", "not", "None", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "\"Use extra vocab for ignore words\"", ")", "\n", "ignore", "=", "np", ".", "ones", "(", "len", "(", "vocab", ")", ")", "\n", "for", "ignore_w", "in", "ignore_vocab", ".", "values", "(", ")", ":", "\n", "                    ", "ignore", "[", "vocab", ".", "token2id", ".", "get", "(", "ignore_w", ")", "]", "=", "0.0", "\n", "", "self", ".", "ignore", "=", "cast_type", "(", "torch", ".", "from_numpy", "(", "ignore", ")", ",", "FLOAT", ",", "\n", "config", ".", "use_gpu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.criterions.PPLLoss.forward": [[154, 170], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "log_qy", ",", "target", ",", "batch_size", "=", "None", ",", "unit_average", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        - py * log(q(y))\n        \"\"\"", "\n", "if", "self", ".", "weight", "is", "not", "None", "and", "self", ".", "ignore", "is", "None", ":", "\n", "            ", "y_ppl", "=", "-", "torch", ".", "sum", "(", "self", ".", "weight", "*", "target", "*", "log_qy", ",", "dim", "=", "1", ")", "\n", "", "elif", "self", ".", "ignore", "is", "not", "None", "and", "self", ".", "weight", "is", "None", ":", "\n", "            ", "y_ppl", "=", "-", "torch", ".", "sum", "(", "self", ".", "ignore", "*", "target", "*", "log_qy", ",", "dim", "=", "1", ")", "\n", "", "elif", "self", ".", "weight", "is", "not", "None", "and", "self", ".", "ignore", "is", "not", "None", ":", "\n", "            ", "y_ppl", "=", "-", "torch", ".", "sum", "(", "self", ".", "weight", "*", "self", ".", "ignore", "*", "target", "*", "log_qy", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "y_ppl", "=", "-", "torch", ".", "sum", "(", "target", "*", "log_qy", ",", "dim", "=", "1", ")", "\n", "", "if", "unit_average", ":", "\n", "            ", "return", "torch", ".", "mean", "(", "y_ppl", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "sum", "(", "y_ppl", ")", "/", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.criterions.CatKLLoss.__init__": [[173, 175], ["torch.nn.modules.loss._Loss.__init__"], "methods", ["home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.conv_models.GumbelConnector.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CatKLLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.criterions.CatKLLoss.forward": [[176, 189], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "log_qy.squeeze.squeeze.dim", "log_qy.squeeze.squeeze.squeeze", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "log_qy", ",", "log_py", ",", "batch_size", "=", "None", ",", "unit_average", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        qy * log(q(y)/p(y))\n        \"\"\"", "\n", "if", "log_qy", ".", "dim", "(", ")", ">", "2", ":", "\n", "            ", "log_qy", "=", "log_qy", ".", "squeeze", "(", ")", "\n", "\n", "", "qy", "=", "torch", ".", "exp", "(", "log_qy", ")", "\n", "y_kl", "=", "torch", ".", "sum", "(", "qy", "*", "(", "log_qy", "-", "log_py", ")", ",", "dim", "=", "-", "1", ")", "\n", "if", "unit_average", ":", "\n", "            ", "return", "torch", ".", "mean", "(", "y_kl", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "sum", "(", "y_kl", ")", "/", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.criterions.CrossEntropyoss.__init__": [[192, 194], ["torch.nn.modules.loss._Loss.__init__"], "methods", ["home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.conv_models.GumbelConnector.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CrossEntropyoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.criterions.CrossEntropyoss.forward": [[195, 209], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "log_qy.squeeze.squeeze.dim", "log_qy.squeeze.squeeze.squeeze", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "log_qy", ",", "log_py", ",", "batch_size", "=", "None", ",", "unit_average", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        -qy log(qy) + qy * log(q(y)/p(y))\n        \"\"\"", "\n", "if", "log_qy", ".", "dim", "(", ")", ">", "2", ":", "\n", "            ", "log_qy", "=", "log_qy", ".", "squeeze", "(", ")", "\n", "", "qy", "=", "torch", ".", "exp", "(", "log_qy", ")", "\n", "h_q", "=", "torch", ".", "sum", "(", "-", "1", "*", "log_qy", "*", "qy", ",", "dim", "=", "1", ")", "\n", "kl_qp", "=", "torch", ".", "sum", "(", "qy", "*", "(", "log_qy", "-", "log_py", ")", ",", "dim", "=", "1", ")", "\n", "cross_ent", "=", "h_q", "+", "kl_qp", "\n", "if", "unit_average", ":", "\n", "            ", "return", "torch", ".", "mean", "(", "cross_ent", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "sum", "(", "cross_ent", ")", "/", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.criterions.Entropy.__init__": [[212, 214], ["torch.nn.modules.loss._Loss.__init__"], "methods", ["home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.conv_models.GumbelConnector.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Entropy", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.criterions.Entropy.forward": [[215, 227], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "log_qy.squeeze.squeeze.dim", "log_qy.squeeze.squeeze.squeeze", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "log_qy", ",", "batch_size", "=", "None", ",", "unit_average", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        -qy log(qy)\n        \"\"\"", "\n", "if", "log_qy", ".", "dim", "(", ")", ">", "2", ":", "\n", "            ", "log_qy", "=", "log_qy", ".", "squeeze", "(", ")", "\n", "", "qy", "=", "torch", ".", "exp", "(", "log_qy", ")", "\n", "h_q", "=", "torch", ".", "sum", "(", "-", "1", "*", "log_qy", "*", "qy", ",", "dim", "=", "-", "1", ")", "\n", "if", "unit_average", ":", "\n", "            ", "return", "torch", ".", "mean", "(", "h_q", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "sum", "(", "h_q", ")", "/", "batch_size", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.utils.Pack.__getattr__": [[19, 24], ["super().__getattr__"], "methods", ["home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.utils.Pack.__getattr__"], ["    ", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "name", "in", "self", ":", "\n", "            ", "return", "self", "[", "name", "]", "\n", "", "else", ":", "\n", "            ", "return", "super", "(", "Pack", ",", "self", ")", ".", "__getattr__", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.utils.Pack.add": [[25, 28], ["kwargs.items"], "methods", ["None"], ["", "", "def", "add", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "self", "[", "k", "]", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.utils.Pack.copy": [[29, 37], ["utils.Pack", "utils.Pack.items", "type", "list"], "methods", ["None"], ["", "", "def", "copy", "(", "self", ")", ":", "\n", "        ", "pack", "=", "Pack", "(", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "items", "(", ")", ":", "\n", "            ", "if", "type", "(", "v", ")", "is", "list", ":", "\n", "                ", "pack", "[", "k", "]", "=", "list", "(", "v", ")", "\n", "", "else", ":", "\n", "                ", "pack", "[", "k", "]", "=", "v", "\n", "", "", "return", "pack", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.utils.missingdict.__missing__": [[120, 122], ["utils.missingdict.default_factory"], "methods", ["None"], ["    ", "def", "__missing__", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "default_factory", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.utils.prepare_dirs_loggers": [[39, 70], ["logging.Formatter", "logging.getLogger", "logging.getLogger.setLevel", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "os.mkdir", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "os.path.join", "os.path.exists", "os.makedirs", "utils.get_time", "os.path.join", "os.path.join", "os.path.join", "open", "json.dump", "print", "utils.get_time"], "function", ["home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.utils.get_time", "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.utils.get_time"], ["", "", "def", "prepare_dirs_loggers", "(", "config", ",", "script", "=", "\"\"", ")", ":", "\n", "    ", "logFormatter", "=", "logging", ".", "Formatter", "(", "\"%(message)s\"", ")", "\n", "rootLogger", "=", "logging", ".", "getLogger", "(", ")", "\n", "rootLogger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "\n", "consoleHandler", "=", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", "\n", "consoleHandler", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "consoleHandler", ".", "setFormatter", "(", "logFormatter", ")", "\n", "rootLogger", ".", "addHandler", "(", "consoleHandler", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "config", ".", "log_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "config", ".", "log_dir", ")", "\n", "\n", "", "dir_name", "=", "\"{}-{}\"", ".", "format", "(", "get_time", "(", ")", ",", "script", ")", "if", "script", "else", "get_time", "(", ")", "\n", "if", "config", ".", "token", ":", "\n", "        ", "config", ".", "session_dir", "=", "os", ".", "path", ".", "join", "(", "config", ".", "log_dir", ",", "dir_name", "+", "\"_\"", "+", "config", ".", "token", ")", "# append token", "\n", "", "else", ":", "\n", "        ", "config", ".", "session_dir", "=", "os", ".", "path", ".", "join", "(", "config", ".", "log_dir", ",", "dir_name", ")", "\n", "", "os", ".", "mkdir", "(", "config", ".", "session_dir", ")", "\n", "\n", "fileHandler", "=", "logging", ".", "FileHandler", "(", "os", ".", "path", ".", "join", "(", "config", ".", "session_dir", ",", "\n", "'session.log'", ")", ")", "\n", "fileHandler", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "fileHandler", ".", "setFormatter", "(", "logFormatter", ")", "\n", "rootLogger", ".", "addHandler", "(", "fileHandler", ")", "\n", "\n", "# save config", "\n", "param_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "session_dir", ",", "\"params.json\"", ")", "\n", "with", "open", "(", "param_path", ",", "'w'", ")", "as", "fp", ":", "\n", "        ", "json", ".", "dump", "(", "config", ".", "__dict__", ",", "fp", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", "\n", "print", "(", "\"Save params in \"", "+", "param_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.utils.load_config": [[71, 76], ["json.load", "argparse.Namespace", "open"], "function", ["None"], ["", "", "def", "load_config", "(", "load_path", ")", ":", "\n", "    ", "data", "=", "json", ".", "load", "(", "open", "(", "load_path", ",", "\"rb\"", ")", ")", "\n", "config", "=", "Namespace", "(", ")", "\n", "config", ".", "__dict__", "=", "data", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.utils.get_time": [[78, 80], ["datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["None"], ["", "def", "get_time", "(", ")", ":", "\n", "    ", "return", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y-%m-%dT%H-%M-%S\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.utils.str2bool": [[82, 84], ["v.lower"], "function", ["None"], ["", "def", "str2bool", "(", "v", ")", ":", "\n", "    ", "return", "v", ".", "lower", "(", ")", "in", "(", "'true'", ",", "'1'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.utils.cast_type": [[86, 106], ["var.type.type", "var.type.type", "var.type.type", "var.type.type", "var.type.type", "ValueError", "var.type.type", "ValueError"], "function", ["None"], ["", "def", "cast_type", "(", "var", ",", "dtype", ",", "use_gpu", ")", ":", "\n", "    ", "if", "use_gpu", ":", "\n", "        ", "if", "dtype", "==", "INT", ":", "\n", "            ", "var", "=", "var", ".", "type", "(", "torch", ".", "cuda", ".", "IntTensor", ")", "\n", "", "elif", "dtype", "==", "LONG", ":", "\n", "            ", "var", "=", "var", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "", "elif", "dtype", "==", "FLOAT", ":", "\n", "            ", "var", "=", "var", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown dtype\"", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "dtype", "==", "INT", ":", "\n", "            ", "var", "=", "var", ".", "type", "(", "torch", ".", "IntTensor", ")", "\n", "", "elif", "dtype", "==", "LONG", ":", "\n", "            ", "var", "=", "var", ".", "type", "(", "torch", ".", "LongTensor", ")", "\n", "", "elif", "dtype", "==", "FLOAT", ":", "\n", "            ", "var", "=", "var", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown dtype\"", ")", "\n", "", "", "return", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.utils.get_tokenize": [[108, 110], ["nltk.RegexpTokenizer"], "function", ["None"], ["", "def", "get_tokenize", "(", ")", ":", "\n", "    ", "return", "nltk", ".", "RegexpTokenizer", "(", "r'\\w+|#\\w+|<\\w+>|%\\w+|[^\\w\\s]+'", ")", ".", "tokenize", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.utils.get_chat_tokenize": [[112, 115], ["nltk.RegexpTokenizer"], "function", ["None"], ["", "def", "get_chat_tokenize", "(", ")", ":", "\n", "\n", "    ", "return", "nltk", ".", "RegexpTokenizer", "(", "u'\\w+|:d|:p|<sil>|<men>|<hash>|<url>|'", "\n", "u'[\\U0001f600-\\U0001f64f\\U0001f300-\\U0001f5ff\\U0001f680-\\U0001f6ff]|'", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.dataset.corpora.TwitterCorpus.__init__": [[25, 32], ["utils.get_chat_tokenize", "corpora.TwitterCorpus._read_file", "corpora.TwitterCorpus._build_vocab", "print", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.utils.get_chat_tokenize", "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.dataset.corpora.TwitterCorpus._read_file", "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.dataset.corpora.TwitterCorpus._build_vocab"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "_path", "=", "config", ".", "data_dir", "[", "0", "]", "\n", "self", ".", "tokenize", "=", "get_chat_tokenize", "(", ")", "\n", "self", ".", "train_corpus", ",", "self", ".", "test_corpus", ",", "self", ".", "valid_corpus", "=", "self", ".", "_read_file", "(", "os", ".", "path", ".", "join", "(", "self", ".", "_path", ")", ")", "\n", "self", ".", "_build_vocab", "(", "config", ".", "max_vocab_cnt", ")", "\n", "print", "(", "\"Done loading corpus\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.dataset.corpora.TwitterCorpus._process_dialog": [[33, 54], ["print", "print", "enumerate", "all_dialog_lens.append", "new_dialog.append", "corpora.TwitterCorpus.tokenize", "all_lens.append", "dialog.append", "len", "corpora.TwitterCorpus.lower", "len", "utils.Pack", "numpy.max", "float", "numpy.max", "float", "numpy.mean", "numpy.mean"], "methods", ["None"], ["", "def", "_process_dialog", "(", "self", ",", "data", ")", ":", "\n", "        ", "new_dialog", "=", "[", "]", "\n", "all_lens", "=", "[", "]", "\n", "all_dialog_lens", "=", "[", "]", "\n", "\n", "for", "raw_dialog", "in", "data", ":", "\n", "            ", "dialog", "=", "[", "]", "\n", "for", "i", ",", "turn", "in", "enumerate", "(", "raw_dialog", "[", "'text_lst'", "]", ")", ":", "\n", "                ", "utt", "=", "raw_dialog", "[", "'text_lst'", "]", "[", "i", "]", "\n", "utt", "=", "self", ".", "tokenize", "(", "utt", ".", "lower", "(", ")", ")", "\n", "all_lens", ".", "append", "(", "len", "(", "utt", ")", ")", "\n", "dialog", ".", "append", "(", "Pack", "(", "utt", "=", "utt", ",", "hashtag", "=", "raw_dialog", "[", "'hashtag_lst'", "]", "[", "i", "]", ",", "meta", "=", "raw_dialog", "[", "'meta_lst'", "]", "[", "i", "]", ")", ")", "\n", "\n", "", "all_dialog_lens", ".", "append", "(", "len", "(", "dialog", ")", ")", "\n", "new_dialog", ".", "append", "(", "dialog", ")", "\n", "\n", "", "print", "(", "\"Max utt len %d, mean utt len %.2f\"", "%", "(", "\n", "np", ".", "max", "(", "all_lens", ")", ",", "float", "(", "np", ".", "mean", "(", "all_lens", ")", ")", ")", ")", "\n", "print", "(", "\"Max dialog len %d, mean dialog len %.2f\"", "%", "(", "\n", "np", ".", "max", "(", "all_dialog_lens", ")", ",", "float", "(", "np", ".", "mean", "(", "all_dialog_lens", ")", ")", ")", ")", "\n", "return", "new_dialog", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.dataset.corpora.TwitterCorpus._build_vocab": [[55, 90], ["gensim.corpora.Dictionary", "len", "numpy.sum", "corpora.TwitterCorpus.vocab_bow.filter_extremes", "corpora.TwitterCorpus.vocab_bow.filter_extremes", "corpora.TwitterCorpus.vocab_bow.filter_tokens", "list", "corpora.TwitterCorpus.vocab_bow.filter_tokens", "corpora.TwitterCorpus.vocab_bow.compactify", "filter", "copy.deepcopy", "corpora.TwitterCorpus.vocab_bow_stopwords.filter_tokens", "corpora.TwitterCorpus.vocab_bow_stopwords.compactify", "copy.deepcopy", "corpora.TwitterCorpus.vocab_bow_non_stopwords.filter_tokens", "corpora.TwitterCorpus.vocab_bow_non_stopwords.compactify", "numpy.sum", "numpy.min", "print", "list", "list", "filter", "list", "corpora.TwitterCorpus.vocab_bow.values", "map", "map", "list", "list", "all_words.append", "corpora.TwitterCorpus.vocab_bow.dfs.values", "map", "corpora.TwitterCorpus.vocab_bow.values", "map", "corpora.TwitterCorpus.vocab_bow_stopwords.values", "corpora.TwitterCorpus.vocab_bow.dfs.values", "corpora.TwitterCorpus.vocab_bow.dfs.values", "len", "len", "len", "len", "re.match", "re.match", "float", "len"], "methods", ["None"], ["", "def", "_build_vocab", "(", "self", ",", "max_vocab_cnt", ")", ":", "\n", "        ", "all_words", "=", "[", "]", "\n", "for", "dialog", "in", "self", ".", "train_corpus", ":", "\n", "            ", "for", "turn", "in", "dialog", ":", "\n", "                ", "all_words", ".", "append", "(", "turn", ".", "utt", ")", "\n", "\n", "", "", "self", ".", "vocab_bow", "=", "Dictionary", "(", "all_words", ")", "\n", "raw_vocab_size", "=", "len", "(", "self", ".", "vocab_bow", ")", "\n", "raw_wc", "=", "np", ".", "sum", "(", "list", "(", "self", ".", "vocab_bow", ".", "dfs", ".", "values", "(", ")", ")", ")", "\n", "\n", "# build useless stopwords vocab (e.g, very few words, single ascii words, some punctuation ,.\"')", "\n", "self", ".", "vocab_bow", ".", "filter_extremes", "(", "no_below", "=", "20", ")", "\n", "self", ".", "vocab_bow", ".", "filter_extremes", "(", "keep_n", "=", "max_vocab_cnt", ")", "\n", "bad_ids", "=", "[", "HT", ",", "MEN", ",", "URL", "]", "+", "TWITTER_STOPWORDS", "\n", "self", ".", "vocab_bow", ".", "filter_tokens", "(", "list", "(", "map", "(", "self", ".", "vocab_bow", ".", "token2id", ".", "get", ",", "bad_ids", ")", ")", ")", "\n", "len_1_words", "=", "list", "(", "filter", "(", "lambda", "w", ":", "len", "(", "w", ")", "==", "1", "and", "re", ".", "match", "(", "r\"[\\x00-\\x7f]\"", ",", "w", ")", "and", "w", "not", "in", "[", "\"?\"", ",", "\"!\"", ",", "\"\\\"\"", ",", "\"i\"", "]", "and", "True", "or", "False", ",", "self", ".", "vocab_bow", ".", "values", "(", ")", ")", ")", "\n", "self", ".", "vocab_bow", ".", "filter_tokens", "(", "list", "(", "map", "(", "self", ".", "vocab_bow", ".", "token2id", ".", "get", ",", "len_1_words", ")", ")", ")", "\n", "self", ".", "vocab_bow", ".", "compactify", "(", ")", "\n", "# here we keep stopwords and some meaningful punctuations", "\n", "non_stopwords", "=", "filter", "(", "lambda", "w", ":", "re", ".", "match", "(", "r\"^(?=.*[a-zA-Z\\d])[\\w\\d_-]*$\"", ",", "w", ")", "and", "w", "not", "in", "STOPWORDS", "and", "True", "or", "False", ",", "self", ".", "vocab_bow", ".", "values", "(", ")", ")", "\n", "self", ".", "vocab_bow_stopwords", "=", "copy", ".", "deepcopy", "(", "self", ".", "vocab_bow", ")", "\n", "self", ".", "vocab_bow_stopwords", ".", "filter_tokens", "(", "map", "(", "self", ".", "vocab_bow_stopwords", ".", "token2id", ".", "get", ",", "non_stopwords", ")", ")", "\n", "self", ".", "vocab_bow_stopwords", ".", "compactify", "(", ")", "\n", "self", ".", "vocab_bow_non_stopwords", "=", "copy", ".", "deepcopy", "(", "self", ".", "vocab_bow", ")", "\n", "self", ".", "vocab_bow_non_stopwords", ".", "filter_tokens", "(", "map", "(", "self", ".", "vocab_bow_non_stopwords", ".", "token2id", ".", "get", ",", "self", ".", "vocab_bow_stopwords", ".", "values", "(", ")", ")", ")", "\n", "self", ".", "vocab_bow_non_stopwords", ".", "compactify", "(", ")", "\n", "remain_wc", "=", "np", ".", "sum", "(", "list", "(", "self", ".", "vocab_bow", ".", "dfs", ".", "values", "(", ")", ")", ")", "\n", "min_count", "=", "np", ".", "min", "(", "list", "(", "self", ".", "vocab_bow", ".", "dfs", ".", "values", "(", ")", ")", ")", "\n", "# create vocabulary list sorted by count", "\n", "print", "(", "\"Load corpus with train size %d, valid size %d, \"", "\n", "\"test size %d raw vocab size %d vocab size %d at cut_off %d OOV rate %f\"", "\n", "%", "(", "len", "(", "self", ".", "train_corpus", ")", ",", "len", "(", "self", ".", "valid_corpus", ")", ",", "\n", "len", "(", "self", ".", "test_corpus", ")", ",", "\n", "raw_vocab_size", ",", "len", "(", "self", ".", "vocab_bow", ")", ",", "min_count", ",", "\n", "1", "-", "float", "(", "remain_wc", ")", "/", "raw_wc", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.dataset.corpora.TwitterCorpus._read_file": [[91, 95], ["open", "json.load", "corpora.TwitterCorpus._process_dialog", "corpora.TwitterCorpus._process_dialog", "corpora.TwitterCorpus._process_dialog"], "methods", ["home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.dataset.corpora.TwitterCorpus._process_dialog", "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.dataset.corpora.TwitterCorpus._process_dialog", "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.dataset.corpora.TwitterCorpus._process_dialog"], ["", "def", "_read_file", "(", "self", ",", "path", ")", ":", "\n", "        ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "", "return", "self", ".", "_process_dialog", "(", "data", "[", "\"conv_train\"", "]", ")", ",", "self", ".", "_process_dialog", "(", "data", "[", "\"conv_test\"", "]", ")", ",", "self", ".", "_process_dialog", "(", "data", "[", "\"conv_valid\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.dataset.corpora.TwitterCorpus._sent2id": [[96, 98], ["list", "filter", "vocab.token2id.get"], "methods", ["None"], ["", "def", "_sent2id", "(", "self", ",", "sent", ",", "vocab", ")", ":", "\n", "        ", "return", "list", "(", "filter", "(", "lambda", "x", ":", "x", "is", "not", "None", ",", "[", "vocab", ".", "token2id", ".", "get", "(", "t", ")", "for", "t", "in", "sent", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.dataset.corpora.TwitterCorpus._sent2id_bow": [[99, 101], ["vocab.doc2bow"], "methods", ["None"], ["", "def", "_sent2id_bow", "(", "self", ",", "sent", ",", "vocab", ")", ":", "\n", "        ", "return", "vocab", ".", "doc2bow", "(", "sent", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.dataset.corpora.TwitterCorpus._to_id_corpus": [[102, 121], ["print", "results.append", "utils.Pack", "temp.append", "len", "corpora.TwitterCorpus._sent2id"], "methods", ["home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.dataset.corpora.TwitterCorpus._sent2id"], ["", "def", "_to_id_corpus", "(", "self", ",", "data", ",", "vocab", ")", ":", "\n", "        ", "results", "=", "[", "]", "\n", "word_cnt", "=", "0", "\n", "msg_cnt", "=", "0", "\n", "\n", "for", "dialog", "in", "data", ":", "\n", "            ", "temp", "=", "[", "]", "\n", "# convert utterance and feature into numeric numbers", "\n", "for", "turn", "in", "dialog", ":", "\n", "                ", "id_turn", "=", "Pack", "(", "utt", "=", "self", ".", "_sent2id", "(", "turn", ".", "utt", ",", "vocab", ")", ",", "# need to plus 1 for padding", "\n", "hashtag", "=", "turn", ".", "hashtag", ",", "\n", "meta", "=", "turn", ".", "meta", ")", "\n", "if", "id_turn", ".", "utt", ":", "\n", "                    ", "temp", ".", "append", "(", "id_turn", ")", "\n", "word_cnt", "+=", "len", "(", "id_turn", ".", "utt", ")", "\n", "msg_cnt", "+=", "1", "\n", "", "", "results", ".", "append", "(", "temp", ")", "\n", "", "print", "(", "\"Load seq with %d msgs, %d words\"", "%", "(", "msg_cnt", ",", "word_cnt", ")", ")", "\n", "return", "results", ",", "msg_cnt", ",", "word_cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.dataset.corpora.TwitterCorpus._to_id_corpus_bow": [[122, 143], ["print", "utils.Pack", "results.append", "temp.append", "numpy.sum", "corpora.TwitterCorpus._sent2id_bow"], "methods", ["home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.dataset.corpora.TwitterCorpus._sent2id_bow"], ["", "def", "_to_id_corpus_bow", "(", "self", ",", "data", ",", "vocab", ")", ":", "\n", "        ", "results", "=", "[", "]", "\n", "word_cnt", "=", "0", "\n", "msg_cnt", "=", "0", "\n", "\n", "for", "dialog", "in", "data", ":", "\n", "            ", "temp", "=", "[", "]", "\n", "# convert utterance and feature into numeric numbers", "\n", "for", "turn", "in", "dialog", ":", "\n", "\n", "                ", "id_turn", "=", "Pack", "(", "utt", "=", "self", ".", "_sent2id_bow", "(", "turn", ".", "utt", ",", "vocab", ")", ",", "\n", "hashtag", "=", "turn", ".", "hashtag", ",", "\n", "meta", "=", "turn", ".", "meta", ")", "\n", "if", "id_turn", ".", "utt", ":", "# filter empty utt", "\n", "                    ", "temp", ".", "append", "(", "id_turn", ")", "\n", "word_cnt", "+=", "np", ".", "sum", "(", "[", "j", "for", "i", ",", "j", "in", "id_turn", ".", "utt", "]", ")", "\n", "msg_cnt", "+=", "1", "\n", "", "", "if", "temp", ":", "\n", "                ", "results", ".", "append", "(", "temp", ")", "\n", "", "", "print", "(", "\"Load bow with %d msgs, %d words\"", "%", "(", "msg_cnt", ",", "word_cnt", ")", ")", "\n", "return", "results", ",", "msg_cnt", ",", "word_cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.dataset.corpora.TwitterCorpus.get_corpus_bow": [[144, 153], ["corpora.TwitterCorpus._to_id_corpus_bow", "corpora.TwitterCorpus._to_id_corpus_bow", "corpora.TwitterCorpus._to_id_corpus_bow", "utils.Pack", "len"], "methods", ["home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.dataset.corpora.TwitterCorpus._to_id_corpus_bow", "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.dataset.corpora.TwitterCorpus._to_id_corpus_bow", "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.dataset.corpora.TwitterCorpus._to_id_corpus_bow"], ["", "def", "get_corpus_bow", "(", "self", ",", "keep_stopwords", "=", "True", ")", ":", "\n", "        ", "if", "keep_stopwords", ":", "\n", "            ", "vocab", "=", "self", ".", "vocab_bow", "\n", "", "else", ":", "\n", "            ", "vocab", "=", "self", ".", "vocab_bow_non_stopwords", "\n", "", "id_train", "=", "self", ".", "_to_id_corpus_bow", "(", "self", ".", "train_corpus", ",", "vocab", ")", "\n", "id_valid", "=", "self", ".", "_to_id_corpus_bow", "(", "self", ".", "valid_corpus", ",", "vocab", ")", "\n", "id_test", "=", "self", ".", "_to_id_corpus_bow", "(", "self", ".", "test_corpus", ",", "vocab", ")", "\n", "return", "Pack", "(", "train", "=", "id_train", ",", "valid", "=", "id_valid", ",", "test", "=", "id_test", ",", "vocab_size", "=", "len", "(", "vocab", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.dataset.corpora.TwitterCorpus.get_corpus_seq": [[154, 163], ["corpora.TwitterCorpus._to_id_corpus", "corpora.TwitterCorpus._to_id_corpus", "corpora.TwitterCorpus._to_id_corpus", "utils.Pack", "len"], "methods", ["home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.dataset.corpora.TwitterCorpus._to_id_corpus", "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.dataset.corpora.TwitterCorpus._to_id_corpus", "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.dataset.corpora.TwitterCorpus._to_id_corpus"], ["", "def", "get_corpus_seq", "(", "self", ",", "keep_stopwords", "=", "True", ")", ":", "\n", "        ", "if", "keep_stopwords", ":", "\n", "            ", "vocab", "=", "self", ".", "vocab_bow", "\n", "", "else", ":", "\n", "            ", "vocab", "=", "self", ".", "vocab_bow_non_stopwords", "\n", "", "id_train", "=", "self", ".", "_to_id_corpus", "(", "self", ".", "train_corpus", ",", "vocab", ")", "\n", "id_valid", "=", "self", ".", "_to_id_corpus", "(", "self", ".", "valid_corpus", ",", "vocab", ")", "\n", "id_test", "=", "self", ".", "_to_id_corpus", "(", "self", ".", "test_corpus", ",", "vocab", ")", "\n", "return", "Pack", "(", "train", "=", "id_train", ",", "valid", "=", "id_valid", ",", "test", "=", "id_test", ",", "vocab_size", "=", "len", "(", "vocab", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.dataset.dataloader_bases.DataLoader.__init__": [[9, 19], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", ",", "fix_batch", "=", "True", ")", ":", "\n", "        ", "self", ".", "batch_size", "=", "0", "\n", "self", ".", "ptr", "=", "0", "\n", "self", ".", "num_batch", "=", "None", "\n", "self", ".", "indexes", "=", "None", "\n", "self", ".", "data_size", "=", "None", "\n", "self", ".", "batch_indexes", "=", "None", "\n", "self", ".", "fix_batch", "=", "fix_batch", "\n", "self", ".", "max_utt_size", "=", "None", "\n", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.dataset.dataloader_bases.DataLoader._shuffle_indexes": [[20, 22], ["numpy.random.shuffle"], "methods", ["None"], ["", "def", "_shuffle_indexes", "(", "self", ")", ":", "\n", "        ", "np", ".", "random", ".", "shuffle", "(", "self", ".", "indexes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.dataset.dataloader_bases.DataLoader._shuffle_batch_indexes": [[23, 25], ["numpy.random.shuffle"], "methods", ["None"], ["", "def", "_shuffle_batch_indexes", "(", "self", ")", ":", "\n", "        ", "np", ".", "random", ".", "shuffle", "(", "self", ".", "batch_indexes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.dataset.dataloader_bases.DataLoader._prepare_batch": [[26, 28], ["NotImplementedError"], "methods", ["None"], ["", "def", "_prepare_batch", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Have to override prepare batch\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.dataset.dataloader_bases.DataLoader.epoch_init": [[29, 52], ["range", "dataloader_bases.DataLoader.logger.info", "dataloader_bases.DataLoader._shuffle_indexes", "dataloader_bases.DataLoader.batch_indexes.append", "dataloader_bases.DataLoader.batch_indexes.append", "dataloader_bases.DataLoader._shuffle_batch_indexes", "dataloader_bases.DataLoader.logger.info"], "methods", ["home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.dataset.dataloader_bases.DataLoader._shuffle_indexes", "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.dataset.dataloader_bases.DataLoader._shuffle_batch_indexes"], ["", "def", "epoch_init", "(", "self", ",", "config", ",", "ignore_residual", "=", "True", ",", "shuffle", "=", "True", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "self", ".", "ptr", "=", "0", "\n", "self", ".", "batch_size", "=", "config", ".", "batch_size", "\n", "self", ".", "num_batch", "=", "self", ".", "data_size", "//", "config", ".", "batch_size", "\n", "if", "verbose", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"Number of left over sample %d\"", "%", "(", "self", ".", "data_size", "-", "config", ".", "batch_size", "*", "self", ".", "num_batch", ")", ")", "\n", "\n", "# if shuffle and we want to group lines, shuffle batch indexes", "\n", "", "if", "shuffle", "and", "not", "self", ".", "fix_batch", ":", "\n", "            ", "self", ".", "_shuffle_indexes", "(", ")", "\n", "\n", "", "self", ".", "batch_indexes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_batch", ")", ":", "\n", "            ", "self", ".", "batch_indexes", ".", "append", "(", "self", ".", "indexes", "[", "i", "*", "self", ".", "batch_size", ":", "(", "i", "+", "1", ")", "*", "self", ".", "batch_size", "]", ")", "\n", "\n", "", "if", "not", "ignore_residual", "and", "self", ".", "data_size", ">", "config", ".", "batch_size", "*", "self", ".", "num_batch", ":", "\n", "            ", "self", ".", "batch_indexes", ".", "append", "(", "self", ".", "indexes", "[", "config", ".", "batch_size", "*", "self", ".", "num_batch", ":", "self", ".", "data_size", "]", ")", "\n", "self", ".", "num_batch", "+=", "1", "\n", "", "if", "shuffle", "and", "self", ".", "fix_batch", ":", "\n", "            ", "self", ".", "_shuffle_batch_indexes", "(", ")", "\n", "\n", "", "if", "verbose", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"%s begins with %d batches\"", "%", "(", "self", ".", "name", ",", "self", ".", "num_batch", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.dataset.dataloader_bases.DataLoader.next_batch": [[53, 60], ["dataloader_bases.DataLoader._prepare_batch"], "methods", ["home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.dataset.data_loaders.TCDataLoader._prepare_batch"], ["", "", "def", "next_batch", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "ptr", "<", "self", ".", "num_batch", ":", "\n", "            ", "selected_ids", "=", "self", ".", "batch_indexes", "[", "self", ".", "ptr", "]", "\n", "self", ".", "ptr", "+=", "1", "\n", "return", "self", ".", "_prepare_batch", "(", "selected_index", "=", "selected_ids", ")", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.dataset.dataloader_bases.DataLoader.pad_to": [[61, 68], ["len", "len"], "methods", ["None"], ["", "", "def", "pad_to", "(", "self", ",", "max_len", ",", "tokens", ",", "do_pad", "=", "True", ")", ":", "\n", "        ", "if", "len", "(", "tokens", ")", ">=", "max_len", ":", "\n", "            ", "return", "tokens", "[", "0", ":", "max_len", "-", "1", "]", "+", "[", "tokens", "[", "-", "1", "]", "]", "\n", "", "elif", "do_pad", ":", "\n", "            ", "return", "tokens", "+", "[", "0", "]", "*", "(", "max_len", "-", "len", "(", "tokens", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.dataset.data_loaders.TCDataLoader.__init__": [[9, 21], ["dataset.dataloader_bases.DataLoader.__init__", "data_loaders.TCDataLoader.flatten_dialog", "len", "list", "len", "list", "range", "numpy.argsort", "len"], "methods", ["home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.conv_models.GumbelConnector.__init__", "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.dataset.data_loaders.TCDataLoader.flatten_dialog"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "data", ",", "vocab_size", ",", "config", ")", ":", "\n", "        ", "super", "(", "TCDataLoader", ",", "self", ")", ".", "__init__", "(", "name", ",", "fix_batch", "=", "config", ".", "fix_batch", ")", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "bow_data", ",", "m_cnt", ",", "w_cnt", "=", "data", "\n", "self", ".", "data", "=", "self", ".", "flatten_dialog", "(", "bow_data", ",", "config", ".", "window_size", ")", "\n", "self", ".", "data_size", "=", "len", "(", "self", ".", "data", ")", "\n", "if", "config", ".", "fix_batch", ":", "\n", "            ", "all_ctx_lens", "=", "[", "len", "(", "d", ".", "context", ")", "for", "d", "in", "self", ".", "data", "]", "\n", "self", ".", "indexes", "=", "list", "(", "np", ".", "argsort", "(", "all_ctx_lens", ")", ")", "[", ":", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "indexes", "=", "list", "(", "range", "(", "len", "(", "self", ".", "data", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.dataset.data_loaders.TCDataLoader.flatten_dialog": [[22, 35], ["range", "len", "max", "min", "copy.copy", "results.append", "len", "contexts.append", "utils.Pack"], "methods", ["home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.utils.Pack.copy"], ["", "", "def", "flatten_dialog", "(", "self", ",", "data", ",", "window_size", ")", ":", "\n", "        ", "results", "=", "[", "]", "\n", "for", "dialog", "in", "data", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "dialog", ")", ")", ":", "\n", "                ", "c_id", "=", "i", "\n", "s_id", "=", "max", "(", "0", ",", "c_id", "-", "window_size", "//", "2", ")", "\n", "e_id", "=", "min", "(", "len", "(", "dialog", ")", ",", "s_id", "+", "window_size", ")", "\n", "target", "=", "copy", ".", "copy", "(", "dialog", "[", "i", "]", ")", "\n", "contexts", "=", "[", "]", "\n", "for", "turn", "in", "dialog", "[", "s_id", ":", "e_id", "]", ":", "\n", "                    ", "contexts", ".", "append", "(", "turn", ")", "\n", "", "results", ".", "append", "(", "Pack", "(", "context", "=", "contexts", ",", "target", "=", "target", ")", ")", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.dataset.data_loaders.TCDataLoader._prepare_batch": [[36, 73], ["numpy.array", "numpy.zeros", "numpy.zeros", "numpy.array", "range", "utils.Pack", "context_lens.append", "context_utts.append", "target_utts.append", "target_lens.append", "hashtags.append", "metas.append", "len", "data_loaders.TCDataLoader._bow2vec", "numpy.empty", "numpy.empty.fill", "enumerate", "len", "len", "len", "numpy.max", "len", "data_loaders.TCDataLoader._bow2vec"], "methods", ["home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.dataset.data_loaders.TCDataLoader._bow2vec", "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.dataset.data_loaders.TCDataLoader._bow2vec"], ["", "def", "_prepare_batch", "(", "self", ",", "selected_index", ")", ":", "\n", "        ", "rows", "=", "[", "self", ".", "data", "[", "idx", "]", "for", "idx", "in", "selected_index", "]", "\n", "# input_context, context_lens, floors, topics, a_profiles, b_Profiles, outputs, output_lens", "\n", "context_lens", ",", "context_utts", ",", "target_utts", ",", "target_lens", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "metas", "=", "[", "]", "\n", "hashtags", "=", "[", "]", "\n", "for", "row", "in", "rows", ":", "\n", "            ", "ctx", "=", "row", ".", "context", "\n", "target", "=", "row", ".", "target", "\n", "\n", "target_utt", "=", "target", ".", "utt", "\n", "context_lens", ".", "append", "(", "len", "(", "ctx", ")", ")", "\n", "context_utts", ".", "append", "(", "[", "turn", ".", "utt", "for", "turn", "in", "ctx", "]", ")", "\n", "\n", "target_utts", ".", "append", "(", "target_utt", ")", "\n", "target_lens", ".", "append", "(", "len", "(", "target_utt", ")", ")", "\n", "hashtags", ".", "append", "(", "target", ".", "hashtag", ")", "\n", "metas", ".", "append", "(", "target", ".", "meta", ")", "\n", "\n", "", "vec_context_lens", "=", "np", ".", "array", "(", "context_lens", ")", "\n", "vec_context", "=", "np", ".", "zeros", "(", "(", "len", "(", "vec_context_lens", ")", ",", "np", ".", "max", "(", "vec_context_lens", ")", ",", "\n", "self", ".", "vocab_size", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "vec_targets", "=", "np", ".", "zeros", "(", "(", "len", "(", "vec_context_lens", ")", ",", "self", ".", "vocab_size", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "vec_target_lens", "=", "np", ".", "array", "(", "target_lens", ")", "\n", "\n", "for", "b_id", "in", "range", "(", "len", "(", "vec_context_lens", ")", ")", ":", "\n", "            ", "vec_targets", "[", "b_id", ",", ":", "]", "=", "self", ".", "_bow2vec", "(", "target_utts", "[", "b_id", "]", ",", "self", ".", "vocab_size", ")", "\n", "# fill the context tensor", "\n", "new_array", "=", "np", ".", "empty", "(", "(", "vec_context_lens", "[", "b_id", "]", ",", "self", ".", "vocab_size", ")", ")", "\n", "new_array", ".", "fill", "(", "0", ")", "\n", "for", "i", ",", "row", "in", "enumerate", "(", "context_utts", "[", "b_id", "]", ")", ":", "\n", "                ", "new_array", "[", "i", ",", ":", "]", "=", "self", ".", "_bow2vec", "(", "row", ",", "self", ".", "vocab_size", ")", "\n", "", "vec_context", "[", "b_id", ",", "0", ":", "vec_context_lens", "[", "b_id", "]", ",", ":", "]", "=", "new_array", "\n", "\n", "", "return", "Pack", "(", "contexts", "=", "vec_context", ",", "context_lens", "=", "vec_context_lens", ",", "\n", "targets", "=", "vec_targets", ",", "targets_lens", "=", "vec_target_lens", ",", "\n", "metas", "=", "metas", ",", "hashtags", "=", "hashtags", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.dataset.data_loaders.TCDataLoader._bow2vec": [[75, 80], ["numpy.zeros"], "methods", ["None"], ["", "def", "_bow2vec", "(", "self", ",", "bow", ",", "vec_size", ")", ":", "\n", "        ", "vec", "=", "np", ".", "zeros", "(", "vec_size", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "id", ",", "val", "in", "bow", ":", "\n", "            ", "vec", "[", "id", "]", "=", "val", "\n", "", "return", "vec", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.encoders.CNN.__init__": [[7, 29], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "len"], "methods", ["home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.conv_models.GumbelConnector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "emb_dim", ",", "emb_num", ",", "config", ")", ":", "\n", "        ", "super", "(", "CNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "config", ".", "emb_mat", "is", "None", ":", "\n", "            ", "V", "=", "emb_num", "\n", "D", "=", "emb_dim", "\n", "", "else", ":", "\n", "            ", "V", ",", "D", "=", "config", ".", "emb_mat", ".", "shape", "\n", "", "C", "=", "config", ".", "cls_num", "\n", "Ci", "=", "1", "\n", "Co", "=", "config", ".", "kernel_num", "\n", "Ks", "=", "config", ".", "kernel_sizes", "\n", "self", ".", "static", "=", "config", ".", "static_emb", "\n", "self", ".", "embed", "=", "nn", ".", "Embedding", "(", "V", ",", "D", ",", "padding_idx", "=", "config", ".", "pad_wid", ")", "\n", "# self.convs1 = [nn.Conv2d(Ci, Co, (K, D)) for K in Ks]", "\n", "self", ".", "convs1", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Conv2d", "(", "Ci", ",", "Co", ",", "(", "K", ",", "D", ")", ")", "for", "K", "in", "Ks", "]", ")", "\n", "'''\n        self.conv13 = nn.Conv2d(Ci, Co, (3, D))\n        self.conv14 = nn.Conv2d(Ci, Co, (4, D))\n        self.conv15 = nn.Conv2d(Ci, Co, (5, D))\n        '''", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "dropout", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "len", "(", "Ks", ")", "*", "Co", ",", "C", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.encoders.CNN.conv_and_pool": [[30, 34], ["torch.relu().squeeze", "torch.relu().squeeze", "torch.relu().squeeze", "torch.max_pool1d().squeeze", "torch.max_pool1d().squeeze", "torch.max_pool1d().squeeze", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool1d", "torch.max_pool1d", "torch.max_pool1d", "conv", "torch.max_pool1d().squeeze.size"], "methods", ["None"], ["", "def", "conv_and_pool", "(", "self", ",", "x", ",", "conv", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "conv", "(", "x", ")", ")", ".", "squeeze", "(", "3", ")", "# (N, Co, W)", "\n", "x", "=", "F", ".", "max_pool1d", "(", "x", ",", "x", ".", "size", "(", "2", ")", ")", ".", "squeeze", "(", "2", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.encoders.CNN.forward": [[35, 58], ["encoders.CNN.embed", "torch.autograd.Variable.unsqueeze", "torch.autograd.Variable.unsqueeze", "torch.autograd.Variable.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "encoders.CNN.dropout", "encoders.CNN.fc1", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.relu().squeeze", "torch.relu().squeeze", "torch.relu().squeeze", "torch.max_pool1d().squeeze", "torch.max_pool1d().squeeze", "torch.max_pool1d().squeeze", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool1d", "torch.max_pool1d", "torch.max_pool1d", "conv", "i.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "embed", "(", "x", ")", "# (N, W, D)", "\n", "\n", "if", "self", ".", "static", ":", "\n", "            ", "x", "=", "Variable", "(", "x", ")", "\n", "\n", "", "x", "=", "x", ".", "unsqueeze", "(", "1", ")", "# (N, Ci, W, D)", "\n", "\n", "x", "=", "[", "F", ".", "relu", "(", "conv", "(", "x", ")", ")", ".", "squeeze", "(", "3", ")", "for", "conv", "in", "self", ".", "convs1", "]", "# [(N, Co, W), ...]*len(Ks)", "\n", "\n", "x", "=", "[", "F", ".", "max_pool1d", "(", "i", ",", "i", ".", "size", "(", "2", ")", ")", ".", "squeeze", "(", "2", ")", "for", "i", "in", "x", "]", "# [(N, Co), ...]*len(Ks)", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "x", ",", "1", ")", "\n", "\n", "'''\n        x1 = self.conv_and_pool(x,self.conv13) #(N,Co)\n        x2 = self.conv_and_pool(x,self.conv14) #(N,Co)\n        x3 = self.conv_and_pool(x,self.conv15) #(N,Co)\n        x = torch.cat((x1, x2, x3), 1) # (N,len(Ks)*Co)\n        '''", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "# (N, len(Ks)*Co)", "\n", "logit", "=", "self", ".", "fc1", "(", "x", ")", "# (N, C)", "\n", "return", "logit", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.encoders.MultiFC.__init__": [[64, 78], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "range", "torch.Linear", "torch.Linear", "torch.Linear", "encoders.MultiFC.fc_layers.append", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.conv_models.GumbelConnector.__init__"], ["def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "output_size", ",", "num_hidden_layers", "=", "0", ",", "short_cut", "=", "False", ")", ":", "\n", "        ", "super", "(", "MultiFC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_hidden_layers", "=", "num_hidden_layers", "\n", "self", ".", "short_cut", "=", "short_cut", "\n", "if", "num_hidden_layers", "==", "0", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "input_size", ",", "output_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "fc_input", "=", "nn", ".", "Linear", "(", "input_size", ",", "hidden_size", ")", "\n", "self", ".", "fc_output", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "output_size", ")", "\n", "if", "short_cut", ":", "\n", "                ", "self", ".", "es", "=", "nn", ".", "Linear", "(", "input_size", ",", "output_size", ")", "\n", "", "for", "i", "in", "range", "(", "1", ",", "self", ".", "num_hidden_layers", ")", ":", "\n", "                ", "self", ".", "fc_layers", ".", "append", "(", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.encoders.MultiFC.forward": [[79, 90], ["encoders.MultiFC.fc", "torch.tanh", "torch.tanh", "torch.tanh", "range", "encoders.MultiFC.fc_output", "encoders.MultiFC.fc_input", "torch.tanh", "torch.tanh", "torch.tanh", "encoders.MultiFC.es"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "input_var", ")", ":", "\n", "        ", "if", "self", ".", "num_hidden_layers", "==", "0", ":", "\n", "            ", "out", "=", "self", ".", "fc", "(", "input_var", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "F", ".", "tanh", "(", "self", ".", "fc_input", "(", "input_var", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "num_hidden_layers", ")", ":", "\n", "                ", "x", "=", "F", ".", "tanh", "(", "self", ".", "fc_layers", "[", "i", "]", "(", "x", ")", ")", "\n", "", "out", "=", "self", ".", "fc_output", "(", "x", ")", "\n", "", "if", "self", ".", "short_cut", ":", "\n", "            ", "out", "=", "out", "+", "self", ".", "es", "(", "input_var", ")", "\n", "", "return", "out", "", "", "", ""]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.model_bases.BaseModel.__init__": [[44, 50], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.conv_models.GumbelConnector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BaseModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_gpu", "=", "config", ".", "use_gpu", "\n", "self", ".", "flush_valid", "=", "False", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "kl_w", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.model_bases.BaseModel.np2var": [[51, 56], ["utils.cast_type", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.utils.cast_type"], ["", "def", "np2var", "(", "self", ",", "inputs", ",", "dtype", ")", ":", "\n", "        ", "if", "inputs", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "return", "cast_type", "(", "Variable", "(", "torch", ".", "from_numpy", "(", "inputs", ")", ")", ",", "dtype", ",", "\n", "self", ".", "use_gpu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.model_bases.BaseModel.forward": [[57, 59], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "input", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.model_bases.BaseModel.backward": [[60, 63], ["model_bases.BaseModel.valid_loss", "model_bases.BaseModel.backward"], "methods", ["home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.conv_models.TDM.valid_loss", "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.model_bases.BaseModel.backward"], ["", "def", "backward", "(", "self", ",", "batch_cnt", ",", "loss", ")", ":", "\n", "        ", "total_loss", "=", "self", ".", "valid_loss", "(", "loss", ",", "batch_cnt", ")", "\n", "total_loss", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.model_bases.BaseModel.valid_loss": [[64, 70], ["loss.items"], "methods", ["None"], ["", "def", "valid_loss", "(", "self", ",", "loss", ",", "batch_cnt", "=", "None", ")", ":", "\n", "        ", "total_loss", "=", "0.0", "\n", "for", "key", ",", "l", "in", "loss", ".", "items", "(", ")", ":", "\n", "            ", "if", "l", "is", "not", "None", ":", "\n", "                ", "total_loss", "+=", "l", "\n", "", "", "return", "total_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.model_bases.BaseModel.model_sel_loss": [[71, 73], ["model_bases.BaseModel.valid_loss"], "methods", ["home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.conv_models.TDM.valid_loss"], ["", "def", "model_sel_loss", "(", "self", ",", "loss", ",", "batch_cnt", ")", ":", "\n", "        ", "return", "self", ".", "valid_loss", "(", "loss", ",", "batch_cnt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.model_bases.BaseModel.get_optimizer": [[74, 90], ["print", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "filter", "print", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "model_bases.BaseModel.parameters", "model_bases.BaseModel.parameters", "print", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "model_bases.BaseModel.parameters", "print", "torch.optim.Adagrad", "torch.optim.Adagrad", "torch.optim.Adagrad", "torch.optim.Adagrad", "torch.optim.Adagrad", "torch.optim.Adagrad", "torch.optim.Adagrad", "torch.optim.Adagrad", "torch.optim.Adagrad", "model_bases.BaseModel.parameters"], "methods", ["None"], ["", "def", "get_optimizer", "(", "self", ",", "config", ")", ":", "\n", "        ", "if", "config", ".", "op", "==", "'adam'", ":", "\n", "            ", "print", "(", "\"Use adam\"", ")", "\n", "return", "torch", ".", "optim", ".", "Adam", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "\n", "self", ".", "parameters", "(", ")", ")", ",", "lr", "=", "config", ".", "init_lr", ")", "\n", "", "elif", "config", ".", "op", "==", "'sgd'", ":", "\n", "            ", "print", "(", "\"Use SGD\"", ")", "\n", "return", "torch", ".", "optim", ".", "SGD", "(", "self", ".", "parameters", "(", ")", ",", "lr", "=", "config", ".", "init_lr", ",", "\n", "momentum", "=", "config", ".", "momentum", ")", "\n", "", "elif", "config", ".", "op", "==", "'rmsprop'", ":", "\n", "            ", "print", "(", "\"RMSProp\"", ")", "\n", "return", "torch", ".", "optim", ".", "RMSprop", "(", "self", ".", "parameters", "(", ")", ",", "lr", "=", "config", ".", "init_lr", ",", "\n", "momentum", "=", "config", ".", "momentum", ")", "\n", "", "elif", "config", ".", "op", "==", "'adagrad'", ":", "\n", "            ", "print", "(", "\"AdaGrad\"", ")", "\n", "return", "torch", ".", "optim", ".", "Adagrad", "(", "self", ".", "parameters", "(", ")", ",", "lr", "=", "config", ".", "init_lr", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.model_bases.summary": [[10, 41], ["model._modules.items", "torch.nn.modules.module._addindent", "sum", "tuple", "type", "model_bases.summary", "module.__repr__", "numpy.prod", "tuple", "p.size", "module.parameters", "p.size", "module.parameters"], "function", ["home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.model_bases.summary"], ["def", "summary", "(", "model", ",", "show_weights", "=", "True", ",", "show_parameters", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Summarizes torch model by showing trainable parameters and weights.\n    \"\"\"", "\n", "tmpstr", "=", "model", ".", "__class__", ".", "__name__", "+", "' (\\n'", "\n", "total_params", "=", "0", "\n", "for", "key", ",", "module", "in", "model", ".", "_modules", ".", "items", "(", ")", ":", "\n", "# if it contains layers let call it recursively to get params", "\n", "# and weights", "\n", "        ", "if", "type", "(", "module", ")", "in", "[", "\n", "torch", ".", "nn", ".", "modules", ".", "container", ".", "Container", ",", "\n", "torch", ".", "nn", ".", "modules", ".", "container", ".", "Sequential", "\n", "]", ":", "\n", "            ", "modstr", "=", "summary", "(", "module", ")", "\n", "", "else", ":", "\n", "            ", "modstr", "=", "module", ".", "__repr__", "(", ")", "\n", "", "modstr", "=", "_addindent", "(", "modstr", ",", "2", ")", "\n", "\n", "params", "=", "sum", "(", "[", "np", ".", "prod", "(", "p", ".", "size", "(", ")", ")", "for", "p", "in", "module", ".", "parameters", "(", ")", "]", ")", "\n", "weights", "=", "tuple", "(", "[", "tuple", "(", "p", ".", "size", "(", ")", ")", "for", "p", "in", "module", ".", "parameters", "(", ")", "]", ")", "\n", "total_params", "+=", "params", "\n", "\n", "tmpstr", "+=", "'  ('", "+", "key", "+", "'): '", "+", "modstr", "\n", "if", "show_weights", ":", "\n", "            ", "tmpstr", "+=", "', weights={}'", ".", "format", "(", "weights", ")", "\n", "", "if", "show_parameters", ":", "\n", "            ", "tmpstr", "+=", "', parameters={}'", ".", "format", "(", "params", ")", "\n", "", "tmpstr", "+=", "'\\n'", "\n", "\n", "", "tmpstr", "=", "tmpstr", "+", "') Total Parameters={}'", ".", "format", "(", "total_params", ")", "\n", "return", "tmpstr", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.conv_models.TDM.__init__": [[22, 67], ["models.model_bases.BaseModel.__init__", "len", "models.encoders.MultiFC", "models.encoders.MultiFC", "torch.Linear", "torch.Linear", "torch.Linear", "models.encoders.MultiFC", "models.encoders.MultiFC", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "conv_models.GumbelConnector", "criterions.PPLLoss", "criterions.PPLLoss", "criterions.GaussianKLLoss", "criterions.CatKLLoss", "criterions.Entropy", "criterions.L1RegLoss", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "hasattr", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "conv_models.TDM.log_uniform_d.cuda", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.conv_models.GumbelConnector.__init__"], ["def", "__init__", "(", "self", ",", "corpus", ",", "config", ")", ":", "\n", "        ", "super", "(", "TDM", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "vocab_bow", "=", "corpus", ".", "vocab_bow", "\n", "self", ".", "vocab_bow_stopwords", "=", "corpus", ".", "vocab_bow_stopwords", "\n", "self", ".", "vocab_size", "=", "len", "(", "self", ".", "vocab_bow", ")", "\n", "if", "not", "hasattr", "(", "config", ",", "\"freeze_step\"", ")", ":", "\n", "            ", "config", ".", "freeze_step", "=", "6000", "\n", "\n", "# build mode here", "\n", "# x is for discourse", "\n", "", "self", ".", "x_encoder", "=", "MultiFC", "(", "self", ".", "vocab_size", ",", "config", ".", "hidden_size", ",", "config", ".", "d", ",", "\n", "num_hidden_layers", "=", "1", ",", "short_cut", "=", "True", ")", "\n", "\n", "self", ".", "x_generator", "=", "MultiFC", "(", "config", ".", "d", ",", "config", ".", "d", ",", "config", ".", "d", ",", "\n", "num_hidden_layers", "=", "0", ",", "short_cut", "=", "False", ")", "\n", "self", ".", "x_decoder", "=", "nn", ".", "Linear", "(", "config", ".", "d", ",", "self", ".", "vocab_size", ",", "bias", "=", "False", ")", "\n", "\n", "# context encoder", "\n", "# ctx is for topic", "\n", "self", ".", "ctx_encoder", "=", "MultiFC", "(", "self", ".", "vocab_size", ",", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ",", "\n", "num_hidden_layers", "=", "1", ",", "short_cut", "=", "True", ")", "\n", "self", ".", "q_z_mu", ",", "self", ".", "q_z_logvar", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "k", ")", ",", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "k", ")", "\n", "# cnn", "\n", "# self.ctx_encoder = CtxEncoder(config, utt_encoder=self.utt_encoder)", "\n", "self", ".", "ctx_generator", "=", "MultiFC", "(", "config", ".", "k", ",", "config", ".", "k", ",", "config", ".", "k", ",", "num_hidden_layers", "=", "0", ",", "short_cut", "=", "False", ")", "\n", "\n", "# decoder", "\n", "self", ".", "ctx_dec_connector", "=", "nn", ".", "Linear", "(", "config", ".", "k", ",", "config", ".", "k", ",", "bias", "=", "True", ")", "\n", "self", ".", "x_dec_connector", "=", "nn", ".", "Linear", "(", "config", ".", "d", ",", "config", ".", "d", ",", "bias", "=", "True", ")", "\n", "self", ".", "ctx_decoder", "=", "nn", ".", "Linear", "(", "config", ".", "k", ",", "self", ".", "vocab_size", ")", "\n", "\n", "self", ".", "decoder", "=", "nn", ".", "Linear", "(", "config", ".", "k", "+", "config", ".", "d", ",", "self", ".", "vocab_size", ",", "bias", "=", "False", ")", "\n", "\n", "# connector", "\n", "self", ".", "cat_connector", "=", "GumbelConnector", "(", ")", "\n", "self", ".", "nll_loss", "=", "criterions", ".", "PPLLoss", "(", "self", ".", "config", ")", "\n", "self", ".", "nll_loss_filtered", "=", "criterions", ".", "PPLLoss", "(", "self", ".", "config", ",", "vocab", "=", "self", ".", "vocab_bow", ",", "\n", "ignore_vocab", "=", "self", ".", "vocab_bow_stopwords", ")", "\n", "self", ".", "kl_loss", "=", "criterions", ".", "GaussianKLLoss", "(", ")", "\n", "self", ".", "cat_kl_loss", "=", "criterions", ".", "CatKLLoss", "(", ")", "\n", "self", ".", "entropy_loss", "=", "criterions", ".", "Entropy", "(", ")", "\n", "self", ".", "reg_l1_loss", "=", "criterions", ".", "L1RegLoss", "(", "0.70", ")", "\n", "self", ".", "log_uniform_d", "=", "Variable", "(", "torch", ".", "log", "(", "torch", ".", "ones", "(", "1", ")", "/", "config", ".", "d", ")", ")", "\n", "if", "self", ".", "use_gpu", ":", "\n", "            ", "self", ".", "log_uniform_d", "=", "self", ".", "log_uniform_d", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.conv_models.TDM.qdx_forward": [[68, 77], ["conv_models.TDM.x_encoder().view", "conv_models.TDM.repeat", "conv_models.TDM.cat_connector", "sample_d_multi.mean", "d_ids_multi.view().transpose", "utils.Pack", "conv_models.TDM.x_encoder", "d_ids_multi.view"], "methods", ["None"], ["", "", "def", "qdx_forward", "(", "self", ",", "tar_utts", ")", ":", "\n", "        ", "qd_logits", "=", "self", ".", "x_encoder", "(", "tar_utts", ")", ".", "view", "(", "-", "1", ",", "self", ".", "config", ".", "d", ")", "\n", "qd_logits_multi", "=", "qd_logits", ".", "repeat", "(", "self", ".", "config", ".", "d_size", ",", "1", ",", "1", ")", "\n", "sample_d_multi", ",", "d_ids_multi", "=", "self", ".", "cat_connector", "(", "qd_logits_multi", ",", "1.0", ",", "\n", "self", ".", "use_gpu", ",", "return_max_id", "=", "True", ")", "\n", "sample_d", "=", "sample_d_multi", ".", "mean", "(", "0", ")", "\n", "d_ids", "=", "d_ids_multi", ".", "view", "(", "self", ".", "config", ".", "d_size", ",", "-", "1", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "return", "Pack", "(", "qd_logits", "=", "qd_logits", ",", "sample_d", "=", "sample_d", ",", "d_ids", "=", "d_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.conv_models.TDM.pxy_forward": [[78, 86], ["conv_models.TDM.x_generator", "conv_models.TDM.x_decoder"], "methods", ["None"], ["", "def", "pxy_forward", "(", "self", ",", "results", ")", ":", "\n", "        ", "gen_d", "=", "self", ".", "x_generator", "(", "results", ".", "sample_d", ")", "\n", "x_out", "=", "self", ".", "x_decoder", "(", "gen_d", ")", "\n", "\n", "results", "[", "'gen_d'", "]", "=", "gen_d", "\n", "results", "[", "'x_out'", "]", "=", "x_out", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.conv_models.TDM.qzc_forward": [[87, 94], ["torch.tanh", "torch.tanh", "torch.tanh", "conv_models.TDM.q_z_mu", "conv_models.TDM.q_z_logvar", "conv_models.TDM.reparameterize", "utils.Pack", "conv_models.TDM.ctx_encoder"], "methods", ["home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.conv_models.TDM.reparameterize"], ["", "def", "qzc_forward", "(", "self", ",", "ctx_utts", ")", ":", "\n", "        ", "ctx_out", "=", "F", ".", "tanh", "(", "self", ".", "ctx_encoder", "(", "ctx_utts", ")", ")", "\n", "z_mu", "=", "self", ".", "q_z_mu", "(", "ctx_out", ")", "\n", "z_logvar", "=", "self", ".", "q_z_logvar", "(", "ctx_out", ")", "\n", "\n", "sample_z", "=", "self", ".", "reparameterize", "(", "z_mu", ",", "z_logvar", ")", "\n", "return", "Pack", "(", "sample_z", "=", "sample_z", ",", "z_mu", "=", "z_mu", ",", "z_logvar", "=", "z_logvar", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.conv_models.TDM.pcz_forward": [[95, 103], ["conv_models.TDM.ctx_generator", "conv_models.TDM.ctx_decoder"], "methods", ["None"], ["", "def", "pcz_forward", "(", "self", ",", "results", ")", ":", "\n", "        ", "gen_c", "=", "self", ".", "ctx_generator", "(", "results", ".", "sample_z", ")", "\n", "c_out", "=", "self", ".", "ctx_decoder", "(", "gen_c", ")", "\n", "\n", "results", "[", "'gen_c'", "]", "=", "gen_c", "\n", "results", "[", "'c_out'", "]", "=", "c_out", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.conv_models.TDM.reparameterize": [[104, 111], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like.mul().add_", "torch.randn_like.mul().add_", "torch.randn_like.mul().add_", "torch.randn_like.mul", "torch.randn_like.mul", "torch.randn_like.mul"], "methods", ["None"], ["", "def", "reparameterize", "(", "self", ",", "mu", ",", "logvar", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "std", "=", "torch", ".", "exp", "(", "0.5", "*", "logvar", ")", "\n", "eps", "=", "torch", ".", "randn_like", "(", "std", ")", "\n", "return", "eps", ".", "mul", "(", "std", ")", ".", "add_", "(", "mu", ")", "\n", "", "else", ":", "\n", "            ", "return", "mu", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.conv_models.TDM.valid_loss": [[112, 140], ["conv_models.TDM.x_encoder.parameters", "conv_models.TDM.x_generator.parameters", "conv_models.TDM.x_decoder.parameters", "conv_models.TDM.ctx_encoder.parameters", "conv_models.TDM.ctx_generator.parameters", "conv_models.TDM.ctx_decoder.parameters"], "methods", ["None"], ["", "", "def", "valid_loss", "(", "self", ",", "loss", ",", "batch_cnt", "=", "None", ")", ":", "\n", "        ", "vae_x_loss", "=", "loss", ".", "vae_x_nll", "+", "loss", ".", "vae_x_kl", "\n", "vae_c_loss", "=", "loss", ".", "vae_c_nll", "+", "loss", ".", "vae_c_kl", "\n", "div_kl", "=", "loss", ".", "div_kl", "\n", "dec_loss", "=", "loss", ".", "nll", "\n", "\n", "if", "self", ".", "config", ".", "use_l1_reg", ":", "\n", "            ", "vae_c_loss", "+=", "loss", ".", "l1_reg", "\n", "\n", "", "if", "batch_cnt", "is", "not", "None", "and", "batch_cnt", ">", "self", ".", "config", ".", "freeze_step", ":", "\n", "            ", "total_loss", "=", "dec_loss", "\n", "self", ".", "flush_valid", "=", "True", "\n", "for", "param", "in", "self", ".", "x_encoder", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "", "for", "param", "in", "self", ".", "x_generator", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "", "for", "param", "in", "self", ".", "x_decoder", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "", "for", "param", "in", "self", ".", "ctx_encoder", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "", "for", "param", "in", "self", ".", "ctx_generator", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "", "for", "param", "in", "self", ".", "ctx_decoder", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "", "", "else", ":", "\n", "            ", "total_loss", "=", "vae_x_loss", "+", "vae_c_loss", "+", "0.001", "*", "div_kl", "\n", "\n", "", "return", "total_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.conv_models.TDM.forward": [[141, 195], ["len", "conv_models.TDM.np2var", "conv_models.TDM.np2var", "conv_models.TDM.pxy_forward", "ctx_utts.sum.sum.sum", "conv_models.TDM.pcz_forward", "conv_models.TDM.sample_z.detach", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "conv_models.TDM.decoder", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "conv_models.TDM.nll_loss", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "conv_models.TDM.cat_kl_loss", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "conv_models.TDM.nll_loss_filtered", "conv_models.TDM.kl_loss", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "conv_models.TDM.nll_loss", "utils.Pack", "conv_models.TDM.qdx_forward", "conv_models.TDM.qzc_forward", "conv_models.TDM.sample_d.detach", "conv_models.TDM.d_ids.detach", "utils.Pack", "conv_models.TDM.cat_kl_loss", "conv_models.TDM.reg_l1_loss", "conv_models.TDM.x_dec_connector", "conv_models.TDM.ctx_dec_connector", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.model_bases.BaseModel.np2var", "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.model_bases.BaseModel.np2var", "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.conv_models.TDM.pxy_forward", "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.conv_models.TDM.pcz_forward", "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.conv_models.TDM.qdx_forward", "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.conv_models.TDM.qzc_forward"], ["", "def", "forward", "(", "self", ",", "data_feed", ",", "mode", "=", "TRAIN", ",", "return_latent", "=", "False", ")", ":", "\n", "        ", "batch_size", "=", "len", "(", "data_feed", "[", "'targets'", "]", ")", "\n", "\n", "ctx_utts", "=", "self", ".", "np2var", "(", "data_feed", "[", "'contexts'", "]", ",", "FLOAT", ")", "\n", "tar_utts", "=", "self", ".", "np2var", "(", "data_feed", "[", "'targets'", "]", ",", "FLOAT", ")", "\n", "\n", "# vae here", "\n", "vae_x_resp", "=", "self", ".", "pxy_forward", "(", "self", ".", "qdx_forward", "(", "tar_utts", ")", ")", "\n", "\n", "# context encoder", "\n", "ctx_utts", "=", "ctx_utts", ".", "sum", "(", "1", ")", "# merge contexts into one bow", "\n", "vae_c_resp", "=", "self", ".", "pcz_forward", "(", "self", ".", "qzc_forward", "(", "ctx_utts", ")", ")", "\n", "\n", "# prior network (we can restrict the prior to stopwords and emotional words)", "\n", "\n", "# combine context topic and x discourse", "\n", "sample_d", ",", "d_ids", "=", "vae_x_resp", ".", "sample_d", ".", "detach", "(", ")", ",", "vae_x_resp", ".", "d_ids", ".", "detach", "(", ")", "\n", "sample_z", "=", "vae_c_resp", ".", "sample_z", ".", "detach", "(", ")", "\n", "gen", "=", "torch", ".", "cat", "(", "[", "self", ".", "x_dec_connector", "(", "sample_d", ")", ",", "self", ".", "ctx_dec_connector", "(", "sample_z", ")", "]", ",", "dim", "=", "1", ")", "\n", "dec_out", "=", "self", ".", "decoder", "(", "gen", ")", "\n", "\n", "# compute loss or return results", "\n", "if", "mode", "==", "INFER", ":", "\n", "            ", "return", "Pack", "(", "gen", "=", "gen", ",", "d_ids", "=", "d_ids", ")", "\n", "# vae-related losses", "\n", "", "log_qx", "=", "F", ".", "log_softmax", "(", "vae_x_resp", ".", "x_out", ",", "dim", "=", "1", ")", "\n", "log_qd", "=", "F", ".", "log_softmax", "(", "vae_x_resp", ".", "qd_logits", ",", "dim", "=", "1", ")", "\n", "vae_x_nll", "=", "self", ".", "nll_loss", "(", "log_qx", ",", "tar_utts", ",", "batch_size", ",", "unit_average", "=", "True", ")", "\n", "avg_log_qd", "=", "torch", ".", "exp", "(", "log_qd", ")", "\n", "avg_log_qd", "=", "torch", ".", "log", "(", "torch", ".", "mean", "(", "avg_log_qd", ",", "dim", "=", "0", ")", "+", "1e-15", ")", "\n", "vae_x_kl", "=", "self", ".", "cat_kl_loss", "(", "avg_log_qd", ",", "self", ".", "log_uniform_d", ",", "batch_size", ",", "unit_average", "=", "True", ")", "\n", "\n", "log_qc", "=", "F", ".", "log_softmax", "(", "vae_c_resp", ".", "c_out", ",", "dim", "=", "1", ")", "\n", "vae_c_nll", "=", "self", ".", "nll_loss_filtered", "(", "log_qc", ",", "ctx_utts", ",", "batch_size", ",", "unit_average", "=", "True", ")", "\n", "vae_c_kl", "=", "self", ".", "kl_loss", "(", "vae_c_resp", ".", "z_mu", ",", "vae_c_resp", ".", "z_logvar", ",", "batch_size", ",", "unit_average", "=", "True", ")", "\n", "\n", "div_kl", "=", "-", "self", ".", "cat_kl_loss", "(", "log_qx", ",", "log_qc", ",", "batch_size", ",", "unit_average", "=", "True", ")", "# maximize the kl loss", "\n", "\n", "# decoder loss", "\n", "log_dec", "=", "F", ".", "log_softmax", "(", "dec_out", ",", "dim", "=", "1", ")", "\n", "dec_nll", "=", "self", ".", "nll_loss", "(", "log_dec", ",", "tar_utts", ",", "batch_size", ",", "unit_average", "=", "True", ")", "\n", "\n", "# regularization loss", "\n", "if", "self", ".", "config", ".", "use_l1_reg", ":", "\n", "            ", "l1_reg", "=", "self", ".", "reg_l1_loss", "(", "self", ".", "ctx_decoder", ".", "weight", ",", "torch", ".", "zeros_like", "(", "self", ".", "ctx_decoder", ".", "weight", ")", ")", "\n", "", "else", ":", "\n", "            ", "l1_reg", "=", "None", "\n", "\n", "", "results", "=", "Pack", "(", "nll", "=", "dec_nll", ",", "vae_x_nll", "=", "vae_x_nll", ",", "vae_x_kl", "=", "vae_x_kl", ",", "vae_c_nll", "=", "vae_c_nll", ",", "\n", "vae_c_kl", "=", "vae_c_kl", ",", "l1_reg", "=", "l1_reg", ",", "div_kl", "=", "div_kl", ")", "\n", "if", "return_latent", ":", "\n", "            ", "results", "[", "'gen'", "]", "=", "gen", "\n", "results", "[", "'d_ids'", "]", "=", "d_ids", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.conv_models.TDM.model_sel_loss": [[196, 198], ["conv_models.TDM.valid_loss"], "methods", ["home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.conv_models.TDM.valid_loss"], ["", "def", "model_sel_loss", "(", "self", ",", "loss", ",", "batch_cnt", ")", ":", "\n", "        ", "return", "self", ".", "valid_loss", "(", "loss", ",", "batch_cnt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.conv_models.GumbelConnector.__init__": [[201, 203], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.conv_models.GumbelConnector.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GumbelConnector", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.conv_models.GumbelConnector.sample_gumbel": [[204, 209], ["torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "utils.cast_type", "logits.size", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.utils.cast_type"], ["", "def", "sample_gumbel", "(", "self", ",", "logits", ",", "use_gpu", ",", "eps", "=", "1e-20", ")", ":", "\n", "        ", "u", "=", "torch", ".", "rand", "(", "logits", ".", "size", "(", ")", ")", "\n", "sample", "=", "Variable", "(", "-", "torch", ".", "log", "(", "-", "torch", ".", "log", "(", "u", "+", "eps", ")", "+", "eps", ")", ")", "\n", "sample", "=", "cast_type", "(", "sample", ",", "FLOAT", ",", "use_gpu", ")", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.conv_models.GumbelConnector.gumbel_softmax_sample": [[210, 215], ["conv_models.GumbelConnector.sample_gumbel", "torch.softmax", "torch.softmax", "torch.softmax", "y.dim"], "methods", ["home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.conv_models.GumbelConnector.sample_gumbel"], ["", "def", "gumbel_softmax_sample", "(", "self", ",", "logits", ",", "temperature", ",", "use_gpu", ")", ":", "\n", "        ", "\"\"\" Draw a sample from the Gumbel-Softmax distribution\"\"\"", "\n", "eps", "=", "self", ".", "sample_gumbel", "(", "logits", ",", "use_gpu", ")", "\n", "y", "=", "logits", "+", "eps", "\n", "return", "F", ".", "softmax", "(", "y", "/", "temperature", ",", "dim", "=", "y", ".", "dim", "(", ")", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.conv_models.GumbelConnector.forward": [[216, 234], ["conv_models.GumbelConnector.gumbel_softmax_sample", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "utils.cast_type", "utils.cast_type.scatter_", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "conv_models.GumbelConnector.size"], "methods", ["home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.models.conv_models.GumbelConnector.gumbel_softmax_sample", "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.None.utils.cast_type"], ["", "def", "forward", "(", "self", ",", "logits", ",", "temperature", ",", "use_gpu", ",", "hard", "=", "False", ",", "\n", "return_max_id", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        :param logits: [batch_size, n_class] unnormalized log-prob\n        :param temperature: non-negative scalar\n        :param hard: if True take argmax\n        :return: [batch_size, n_class] sample from gumbel softmax\n        \"\"\"", "\n", "y", "=", "self", ".", "gumbel_softmax_sample", "(", "logits", ",", "temperature", ",", "use_gpu", ")", "\n", "_", ",", "y_hard", "=", "torch", ".", "max", "(", "y", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "if", "hard", ":", "\n", "            ", "y_onehot", "=", "cast_type", "(", "Variable", "(", "torch", ".", "zeros", "(", "y", ".", "size", "(", ")", ")", ")", ",", "FLOAT", ",", "use_gpu", ")", "\n", "y_onehot", ".", "scatter_", "(", "-", "1", ",", "y_hard", ",", "1.0", ")", "\n", "y", "=", "y_onehot", "\n", "", "if", "return_max_id", ":", "\n", "            ", "return", "y", ",", "y_hard", "\n", "", "else", ":", "\n", "            ", "return", "y", "", "", "", "", ""]], "home.repos.pwc.inspect_result.zengjichuan_Topic_Disc.vis.vis_atten.hello": [[5, 35], ["app.route", "open", "json.load", "enumerate", "open.close", "flask.render_template", "zip", "vis_data.append", "flask.Markup", "range", "len", "int", "round"], "function", ["None"], ["@", "app", ".", "route", "(", "\"/\"", ")", "\n", "def", "hello", "(", ")", ":", "\n", "\t", "data_file", "=", "open", "(", "\"./gen_samples.txt\"", ")", "\n", "data", "=", "json", ".", "load", "(", "data_file", ")", "\n", "colors", "=", "[", "\n", "[", "\"#ff7700\"", ",", "\"#ff851c\"", ",", "\"#ff9c47\"", ",", "\"#ffa960\"", ",", "\"#ffc08c\"", ",", "\"#ffd4b2\"", ",", "\"#ffe2cc\"", ",", "\"#ffefe2\"", ",", "\"#fff5ed\"", ",", "\"#fffaf7\"", "]", ",", "\n", "[", "\"#71fc00\"", ",", "\"#8bff2d\"", ",", "\"#9cfc4e\"", ",", "\"#aeff6d\"", ",", "\"#bafc85\"", ",", "\"#cdffa5\"", ",", "\"#d8ffba\"", ",", "\"#e4ffd1\"", ",", "\"#ecfce0\"", ",", "\"#f7fff2\"", "]", ",", "\n", "[", "\"#00fce7\"", ",", "\"#26ffec\"", ",", "\"#53fced\"", ",", "\"#77fff3\"", ",", "\"#b2fff8\"", ",", "\"#c4fff9\"", ",", "\"#d6fffa\"", ",", "\"#e0fffb\"", ",", "\"#edfffc\"", ",", "\"#f7fffd\"", "]", ",", "\n", "[", "\"#00c3ff\"", ",", "\"#21cbff\"", ",", "\"#5bd8ff\"", ",", "\"#72ddff\"", ",", "\"#91e4ff\"", ",", "\"#a8e9ff\"", ",", "\"#bceeff\"", ",", "\"#cef2ff\"", ",", "\"#d8f4ff\"", ",", "\"#effaff\"", "]", ",", "\n", "[", "\"#0037ff\"", ",", "\"#1c4dff\"", ",", "\"#345ff9\"", ",", "\"#5177ff\"", ",", "\"#6b8bff\"", ",", "\"#7e99fc\"", ",", "\"#97adfc\"", ",", "\"#b5c5ff\"", ",", "\"#c9d4fc\"", ",", "\"#e5ebff\"", "]", ",", "\n", "[", "\"#6005ff\"", ",", "\"#7121ff\"", ",", "\"#813aff\"", ",", "\"#9459ff\"", ",", "\"#a372ff\"", ",", "\"#af85fc\"", ",", "\"#c3a4fc\"", ",", "\"#dcc9ff\"", ",", "\"#e5d9fc\"", ",", "\"#f2edfc\"", "]", ",", "\n", "[", "\"#ff02e1\"", ",", "\"#fc28e3\"", ",", "\"#fc41e6\"", ",", "\"#fc5de9\"", ",", "\"#fc79ec\"", ",", "\"#fc94ef\"", ",", "\"#fcabf1\"", ",", "\"#fcc4f4\"", ",", "\"#f9def5\"", ",", "\"#fff7fd\"", "]", ",", "\n", "[", "\"#ff026b\"", ",", "\"#ff217d\"", ",", "\"#fc3a8a\"", ",", "\"#fc559a\"", ",", "\"#f76aa4\"", ",", "\"#f77eb0\"", ",", "\"#f9a4c8\"", ",", "\"#fcbdd8\"", ",", "\"#fcd1e4\"", ",", "\"#fceaf2\"", "]", ",", "\n", "[", "\"#fffa00\"", ",", "\"#fffa19\"", ",", "\"#fffa35\"", ",", "\"#fffa56\"", ",", "\"#fffa75\"", ",", "\"#fffb91\"", ",", "\"#fffcaf\"", ",", "\"#fffdcc\"", ",", "\"#fffde0\"", ",", "\"#fffdef\"", "]", ",", "\n", "[", "\"#00ffe5\"", ",", "\"#1effe8\"", ",", "\"#38ffea\"", ",", "\"#51ffec\"", ",", "\"#70ffee\"", ",", "\"#89fff1\"", ",", "\"#a3fff4\"", ",", "\"#bffff7\"", ",", "\"#d6fff9\"", ",", "\"#e5fffb\"", "]", ",", "\n", "[", "\"#f70000\"", ",", "\"#ff2d2d\"", ",", "\"#ff4444\"", ",", "\"#ff6363\"", ",", "\"#ff7a7a\"", ",", "\"#fc8d8d\"", ",", "\"#fc9f9f\"", ",", "\"#ffc1c1\"", ",", "\"#fcd4d4\"", ",", "\"#ffeded\"", "]", ",", "\n", "]", "\n", "vis_data", "=", "[", "]", "\n", "for", "idx", ",", "term", "in", "enumerate", "(", "data", ")", ":", "\n", "\t\t", "texts", "=", "data", "[", "idx", "]", "[", "\"target\"", "]", "\n", "sources", "=", "[", "4", "if", "i", "<", "10", "else", "10", "for", "i", "in", "data", "[", "idx", "]", "[", "\"source\"", "]", "]", "\n", "weights", "=", "[", "i", "if", "i", "<", "1.0", "else", "1.0", "for", "i", "in", "data", "[", "idx", "]", "[", "\"weight\"", "]", "]", "\n", "new_colors", "=", "[", "colors", "[", "sources", "[", "i", "]", "]", "[", "-", "int", "(", "round", "(", "weights", "[", "i", "]", "*", "10", ")", ")", "]", "for", "i", "in", "range", "(", "len", "(", "texts", ")", ")", "]", "\n", "text_color", "=", "zip", "(", "texts", ",", "new_colors", ")", "\n", "html_text", "=", "\"\"", "\n", "for", "ele", "in", "text_color", ":", "\n", "\t\t\t", "html_text", "+=", "\"<span style='background-color: \"", "+", "ele", "[", "1", "]", "+", "\"'>\"", "+", "ele", "[", "0", "]", "+", "\" </span>\"", "\n", "", "vis_data", ".", "append", "(", "Markup", "(", "html_text", ")", ")", "\n", "", "data_file", ".", "close", "(", ")", "\n", "return", "render_template", "(", "'vis.html'", ",", "vis_data", "=", "vis_data", ")", "\n", "\n"]]}