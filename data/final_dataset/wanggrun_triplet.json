{"home.repos.pwc.inspect_result.wanggrun_triplet.None.setup.readme": [[8, 12], ["open", "f.read"], "function", ["None"], ["def", "readme", "(", ")", ":", "\n", "    ", "with", "open", "(", "'README.md'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "content", "=", "f", ".", "read", "(", ")", "\n", "", "return", "content", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.None.setup.get_git_hash": [[26, 50], ["setup.get_git_hash._minimal_ext_cmd"], "function", ["None"], ["def", "get_git_hash", "(", ")", ":", "\n", "\n", "    ", "def", "_minimal_ext_cmd", "(", "cmd", ")", ":", "\n", "# construct minimal environment", "\n", "        ", "env", "=", "{", "}", "\n", "for", "k", "in", "[", "'SYSTEMROOT'", ",", "'PATH'", ",", "'HOME'", "]", ":", "\n", "            ", "v", "=", "os", ".", "environ", ".", "get", "(", "k", ")", "\n", "if", "v", "is", "not", "None", ":", "\n", "                ", "env", "[", "k", "]", "=", "v", "\n", "# LANGUAGE is used on win32", "\n", "", "", "env", "[", "'LANGUAGE'", "]", "=", "'C'", "\n", "env", "[", "'LANG'", "]", "=", "'C'", "\n", "env", "[", "'LC_ALL'", "]", "=", "'C'", "\n", "out", "=", "subprocess", ".", "Popen", "(", "\n", "cmd", ",", "stdout", "=", "subprocess", ".", "PIPE", ",", "env", "=", "env", ")", ".", "communicate", "(", ")", "[", "0", "]", "\n", "return", "out", "\n", "\n", "", "try", ":", "\n", "        ", "out", "=", "_minimal_ext_cmd", "(", "[", "'git'", ",", "'rev-parse'", ",", "'HEAD'", "]", ")", "\n", "sha", "=", "out", ".", "strip", "(", ")", ".", "decode", "(", "'ascii'", ")", "\n", "", "except", "OSError", ":", "\n", "        ", "sha", "=", "'unknown'", "\n", "\n", "", "return", "sha", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.None.setup.get_hash": [[52, 65], ["os.path.exists", "os.path.exists", "setup.get_git_hash", "__version__.split", "ImportError"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.None.setup.get_git_hash"], ["", "def", "get_hash", "(", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "'.git'", ")", ":", "\n", "        ", "sha", "=", "get_git_hash", "(", ")", "[", ":", "7", "]", "\n", "", "elif", "os", ".", "path", ".", "exists", "(", "version_file", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "from", "openselfsup", ".", "version", "import", "__version__", "\n", "sha", "=", "__version__", ".", "split", "(", "'+'", ")", "[", "-", "1", "]", "\n", "", "except", "ImportError", ":", "\n", "            ", "raise", "ImportError", "(", "'Unable to get git version'", ")", "\n", "", "", "else", ":", "\n", "        ", "sha", "=", "'unknown'", "\n", "\n", "", "return", "sha", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.None.setup.write_version_py": [[67, 79], ["setup.get_hash", "open", "f.write", "content.format", "time.asctime"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.None.setup.get_hash"], ["", "def", "write_version_py", "(", ")", ":", "\n", "    ", "content", "=", "\"\"\"# GENERATED VERSION FILE\n# TIME: {}\n\n__version__ = '{}'\nshort_version = '{}'\n\"\"\"", "\n", "sha", "=", "get_hash", "(", ")", "\n", "VERSION", "=", "SHORT_VERSION", "+", "'+'", "+", "sha", "\n", "\n", "with", "open", "(", "version_file", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "content", ".", "format", "(", "time", ".", "asctime", "(", ")", ",", "VERSION", ",", "SHORT_VERSION", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.None.setup.get_version": [[81, 85], ["open", "exec", "locals", "compile", "f.read"], "function", ["None"], ["", "", "def", "get_version", "(", ")", ":", "\n", "    ", "with", "open", "(", "version_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "exec", "(", "compile", "(", "f", ".", "read", "(", ")", ",", "version_file", ",", "'exec'", ")", ")", "\n", "", "return", "locals", "(", ")", "[", "'__version__'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.None.setup.parse_requirements": [[87, 164], ["list", "line.strip.startswith", "exists", "setup.parse_requirements.gen_packages_items"], "function", ["None"], ["", "def", "parse_requirements", "(", "fname", "=", "'requirements.txt'", ",", "with_version", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Parse the package dependencies listed in a requirements file but strips\n    specific versioning information.\n\n    Args:\n        fname (str): path to requirements file\n        with_version (bool, default=False): if True include version specs\n\n    Returns:\n        List[str]: list of requirements items\n\n    CommandLine:\n        python -c \"import setup; print(setup.parse_requirements())\"\n    \"\"\"", "\n", "import", "sys", "\n", "from", "os", ".", "path", "import", "exists", "\n", "import", "re", "\n", "require_fpath", "=", "fname", "\n", "\n", "def", "parse_line", "(", "line", ")", ":", "\n", "        ", "\"\"\"\n        Parse information from a line in a requirements text file\n        \"\"\"", "\n", "if", "line", ".", "startswith", "(", "'-r '", ")", ":", "\n", "# Allow specifying requirements in other files", "\n", "            ", "target", "=", "line", ".", "split", "(", "' '", ")", "[", "1", "]", "\n", "for", "info", "in", "parse_require_file", "(", "target", ")", ":", "\n", "                ", "yield", "info", "\n", "", "", "else", ":", "\n", "            ", "info", "=", "{", "'line'", ":", "line", "}", "\n", "if", "line", ".", "startswith", "(", "'-e '", ")", ":", "\n", "                ", "info", "[", "'package'", "]", "=", "line", ".", "split", "(", "'#egg='", ")", "[", "1", "]", "\n", "", "else", ":", "\n", "# Remove versioning from the package", "\n", "                ", "pat", "=", "'('", "+", "'|'", ".", "join", "(", "[", "'>='", ",", "'=='", ",", "'>'", "]", ")", "+", "')'", "\n", "parts", "=", "re", ".", "split", "(", "pat", ",", "line", ",", "maxsplit", "=", "1", ")", "\n", "parts", "=", "[", "p", ".", "strip", "(", ")", "for", "p", "in", "parts", "]", "\n", "\n", "info", "[", "'package'", "]", "=", "parts", "[", "0", "]", "\n", "if", "len", "(", "parts", ")", ">", "1", ":", "\n", "                    ", "op", ",", "rest", "=", "parts", "[", "1", ":", "]", "\n", "if", "';'", "in", "rest", ":", "\n", "# Handle platform specific dependencies", "\n", "# http://setuptools.readthedocs.io/en/latest/setuptools.html#declaring-platform-specific-dependencies", "\n", "                        ", "version", ",", "platform_deps", "=", "map", "(", "str", ".", "strip", ",", "\n", "rest", ".", "split", "(", "';'", ")", ")", "\n", "info", "[", "'platform_deps'", "]", "=", "platform_deps", "\n", "", "else", ":", "\n", "                        ", "version", "=", "rest", "# NOQA", "\n", "", "info", "[", "'version'", "]", "=", "(", "op", ",", "version", ")", "\n", "", "", "yield", "info", "\n", "\n", "", "", "def", "parse_require_file", "(", "fpath", ")", ":", "\n", "        ", "with", "open", "(", "fpath", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", "and", "not", "line", ".", "startswith", "(", "'#'", ")", ":", "\n", "                    ", "for", "info", "in", "parse_line", "(", "line", ")", ":", "\n", "                        ", "yield", "info", "\n", "\n", "", "", "", "", "", "def", "gen_packages_items", "(", ")", ":", "\n", "        ", "if", "exists", "(", "require_fpath", ")", ":", "\n", "            ", "for", "info", "in", "parse_require_file", "(", "require_fpath", ")", ":", "\n", "                ", "parts", "=", "[", "info", "[", "'package'", "]", "]", "\n", "if", "with_version", "and", "'version'", "in", "info", ":", "\n", "                    ", "parts", ".", "extend", "(", "info", "[", "'version'", "]", ")", "\n", "", "if", "not", "sys", ".", "version", ".", "startswith", "(", "'3.4'", ")", ":", "\n", "# apparently package_deps are broken in 3.4", "\n", "                    ", "platform_deps", "=", "info", ".", "get", "(", "'platform_deps'", ")", "\n", "if", "platform_deps", "is", "not", "None", ":", "\n", "                        ", "parts", ".", "append", "(", "';'", "+", "platform_deps", ")", "\n", "", "", "item", "=", "''", ".", "join", "(", "parts", ")", "\n", "yield", "item", "\n", "\n", "", "", "", "packages", "=", "list", "(", "gen_packages_items", "(", ")", ")", "\n", "return", "packages", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.None.transfer.parse_args": [[21, 57], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.tools.extract.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a model'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'train config file path'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--work_dir'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'the dir to save logs and models'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--resume_from'", ",", "help", "=", "'the checkpoint file to resume from'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--pretrained'", ",", "default", "=", "None", ",", "help", "=", "'pretrained model file'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--gpus'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ",", "\n", "help", "=", "'number of gpus to use '", "\n", "'(only applicable to non-distributed training)'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "help", "=", "'random seed'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--deterministic'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to set deterministic options for CUDNN backend.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--launcher'", ",", "\n", "choices", "=", "[", "'none'", ",", "'pytorch'", ",", "'slurm'", ",", "'mpi'", "]", ",", "\n", "default", "=", "'none'", ",", "\n", "help", "=", "'job launcher'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--port'", ",", "type", "=", "int", ",", "default", "=", "29500", ",", "\n", "help", "=", "'port only works when launcher==\"slurm\"'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "'LOCAL_RANK'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", "=", "str", "(", "args", ".", "local_rank", ")", "\n", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.None.transfer.main": [[59, 140], ["transfer.parse_args", "mmcv.Config.fromfile", "polyaxon_client.tracking.get_outputs_path", "Config.fromfile.get", "mmcv.mkdir_or_exist", "time.strftime", "os.join", "openselfsup.utils.get_root_logger", "dict", "openselfsup.utils.collect_env", "openselfsup.utils.get_root_logger.info", "openselfsup.utils.get_root_logger.info", "openselfsup.utils.get_root_logger.info", "openselfsup.models.build_model", "torch.save", "importlib.util.find_spec", "openselfsup.utils.traverse_replace", "mmcv.runner.init_dist", "os.abspath", "time.localtime", "openselfsup.utils.get_root_logger.info", "openselfsup.apis.set_random_seed", "isinstance", "openselfsup.datasets.build_dataset", "len", "dict", "openselfsup.models.build_model.state_dict", "polyaxon_client.tracking.get_data_paths", "openselfsup.utils.collect_env.items"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.tools.extract.parse_args", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.logger.get_root_logger", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.collect_env.collect_env", "home.repos.pwc.inspect_result.wanggrun_triplet.models.builder.build_model", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.config_tools.traverse_replace", "home.repos.pwc.inspect_result.wanggrun_triplet.apis.train.set_random_seed", "home.repos.pwc.inspect_result.wanggrun_triplet.datasets.builder.build_dataset"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "cfg", "=", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "\n", "base_path", "=", "tracking", ".", "get_data_paths", "(", ")", "[", "'ceph'", "]", "+", "'/'", "\n", "output_dir", "=", "tracking", ".", "get_outputs_path", "(", ")", "\n", "# set cudnn_benchmark", "\n", "if", "cfg", ".", "get", "(", "'cudnn_benchmark'", ",", "False", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "# update configs according to CLI args", "\n", "", "cfg", ".", "work_dir", "=", "output_dir", "\n", "\n", "if", "args", ".", "resume_from", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "resume_from", "=", "base_path", "+", "args", ".", "resume_from", "\n", "", "cfg", ".", "gpus", "=", "args", ".", "gpus", "\n", "\n", "# check memcached package exists", "\n", "if", "importlib", ".", "util", ".", "find_spec", "(", "'mc'", ")", "is", "None", ":", "\n", "        ", "traverse_replace", "(", "cfg", ",", "'memcached'", ",", "False", ")", "\n", "\n", "# init distributed env first, since logger depends on the dist info.", "\n", "", "if", "args", ".", "launcher", "==", "'none'", ":", "\n", "        ", "distributed", "=", "False", "\n", "assert", "cfg", ".", "model", ".", "type", "not", "in", "[", "'DeepCluster'", ",", "'MOCO'", ",", "'SimCLR'", ",", "'ODC'", ",", "'NPID'", "]", ",", "\"{} does not support non-dist training.\"", ".", "format", "(", "cfg", ".", "model", ".", "type", ")", "\n", "", "else", ":", "\n", "        ", "distributed", "=", "True", "\n", "if", "args", ".", "launcher", "==", "'slurm'", ":", "\n", "            ", "cfg", ".", "dist_params", "[", "'port'", "]", "=", "args", ".", "port", "\n", "", "init_dist", "(", "args", ".", "launcher", ",", "**", "cfg", ".", "dist_params", ")", "\n", "", "cfg", ".", "data", ".", "train", ".", "data_source", ".", "list_file", "=", "base_path", "+", "cfg", ".", "data", ".", "train", ".", "data_source", ".", "list_file", "\n", "cfg", ".", "data", ".", "train", ".", "data_source", ".", "root", "=", "base_path", "+", "cfg", ".", "data", ".", "train", ".", "data_source", ".", "root", "\n", "\n", "# create work_dir", "\n", "mmcv", ".", "mkdir_or_exist", "(", "osp", ".", "abspath", "(", "cfg", ".", "work_dir", ")", ")", "\n", "# init the logger before other steps", "\n", "timestamp", "=", "time", ".", "strftime", "(", "'%Y%m%d_%H%M%S'", ",", "time", ".", "localtime", "(", ")", ")", "\n", "log_file", "=", "osp", ".", "join", "(", "cfg", ".", "work_dir", ",", "'train_{}.log'", ".", "format", "(", "timestamp", ")", ")", "\n", "logger", "=", "get_root_logger", "(", "log_file", "=", "log_file", ",", "log_level", "=", "cfg", ".", "log_level", ")", "\n", "\n", "# init the meta dict to record some important information such as", "\n", "# environment info and seed, which will be logged", "\n", "meta", "=", "dict", "(", ")", "\n", "# log env info", "\n", "env_info_dict", "=", "collect_env", "(", ")", "\n", "env_info", "=", "'\\n'", ".", "join", "(", "[", "(", "'{}: {}'", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "for", "k", ",", "v", "in", "env_info_dict", ".", "items", "(", ")", "]", ")", "\n", "dash_line", "=", "'-'", "*", "60", "+", "'\\n'", "\n", "logger", ".", "info", "(", "'Environment info:\\n'", "+", "dash_line", "+", "env_info", "+", "'\\n'", "+", "\n", "dash_line", ")", "\n", "meta", "[", "'env_info'", "]", "=", "env_info", "\n", "\n", "# log some basic info", "\n", "logger", ".", "info", "(", "'Distributed training: {}'", ".", "format", "(", "distributed", ")", ")", "\n", "logger", ".", "info", "(", "'Config:\\n{}'", ".", "format", "(", "cfg", ".", "text", ")", ")", "\n", "\n", "# set random seeds", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "logger", ".", "info", "(", "'Set random seed to {}, deterministic: {}'", ".", "format", "(", "\n", "args", ".", "seed", ",", "args", ".", "deterministic", ")", ")", "\n", "set_random_seed", "(", "args", ".", "seed", ",", "deterministic", "=", "args", ".", "deterministic", ")", "\n", "", "cfg", ".", "seed", "=", "args", ".", "seed", "\n", "meta", "[", "'seed'", "]", "=", "args", ".", "seed", "\n", "\n", "if", "args", ".", "pretrained", "is", "not", "None", ":", "\n", "        ", "assert", "isinstance", "(", "args", ".", "pretrained", ",", "str", ")", "\n", "cfg", ".", "model", ".", "pretrained", "=", "args", ".", "pretrained", "\n", "", "model", "=", "build_model", "(", "cfg", ".", "model", ")", "\n", "\n", "datasets", "=", "[", "build_dataset", "(", "cfg", ".", "data", ".", "train", ")", "]", "\n", "assert", "len", "(", "cfg", ".", "workflow", ")", "==", "1", ",", "\"Validation is called by hook.\"", "\n", "if", "cfg", ".", "checkpoint_config", "is", "not", "None", ":", "\n", "# save openselfsup version, config file content and class names in", "\n", "# checkpoints as meta data", "\n", "        ", "cfg", ".", "checkpoint_config", ".", "meta", "=", "dict", "(", "\n", "openselfsup_version", "=", "__version__", ",", "config", "=", "cfg", ".", "text", ")", "\n", "# add an attribute for visualization convenience", "\n", "", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "'model_best_bacc.pth.tar'", ",", "\n", "_use_new_zipfile_serialization", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.detection.train_net.Res5ROIHeadsExtraNorm._build_res5_block": [[21, 27], ["super()._build_res5_block", "detectron2.layers.get_norm", "seq.add_module"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.detection.train_net.Res5ROIHeadsExtraNorm._build_res5_block"], ["def", "_build_res5_block", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "seq", ",", "out_channels", "=", "super", "(", ")", ".", "_build_res5_block", "(", "cfg", ")", "\n", "norm", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "NORM", "\n", "norm", "=", "get_norm", "(", "norm", ",", "out_channels", ")", "\n", "seq", ".", "add_module", "(", "\"norm\"", ",", "norm", ")", "\n", "return", "seq", ",", "out_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.detection.train_net.Trainer.build_evaluator": [[31, 40], ["os.path.join", "detectron2.evaluation.COCOEvaluator", "detectron2.evaluation.PascalVOCDetectionEvaluator"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "build_evaluator", "(", "cls", ",", "cfg", ",", "dataset_name", ",", "output_folder", "=", "None", ")", ":", "\n", "        ", "if", "output_folder", "is", "None", ":", "\n", "            ", "output_folder", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "OUTPUT_DIR", ",", "\"inference\"", ")", "\n", "", "if", "\"coco\"", "in", "dataset_name", ":", "\n", "            ", "return", "COCOEvaluator", "(", "dataset_name", ",", "cfg", ",", "True", ",", "output_folder", ")", "\n", "", "else", ":", "\n", "            ", "assert", "\"voc\"", "in", "dataset_name", "\n", "return", "PascalVOCDetectionEvaluator", "(", "dataset_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.detection.train_net.setup": [[42, 49], ["detectron2.config.get_cfg", "detectron2.config.get_cfg.merge_from_file", "detectron2.config.get_cfg.merge_from_list", "detectron2.config.get_cfg.freeze", "detectron2.engine.default_setup"], "function", ["None"], ["", "", "", "def", "setup", "(", "args", ")", ":", "\n", "    ", "cfg", "=", "get_cfg", "(", ")", "\n", "cfg", ".", "merge_from_file", "(", "args", ".", "config_file", ")", "\n", "cfg", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "cfg", ".", "freeze", "(", ")", "\n", "default_setup", "(", "cfg", ",", "args", ")", "\n", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.detection.train_net.main": [[51, 66], ["train_net.setup", "train_net.Trainer", "Trainer.resume_or_load", "Trainer.train", "Trainer.build_model", "detectron2.checkpoint.DetectionCheckpointer().resume_or_load", "Trainer.test", "detectron2.checkpoint.DetectionCheckpointer"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.detection.train_net.setup", "home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnet.ResNet.train", "home.repos.pwc.inspect_result.wanggrun_triplet.models.builder.build_model"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "cfg", "=", "setup", "(", "args", ")", "\n", "\n", "if", "args", ".", "eval_only", ":", "\n", "        ", "model", "=", "Trainer", ".", "build_model", "(", "cfg", ")", "\n", "DetectionCheckpointer", "(", "\n", "model", ",", "save_dir", "=", "cfg", ".", "OUTPUT_DIR", ")", ".", "resume_or_load", "(", "\n", "cfg", ".", "MODEL", ".", "WEIGHTS", ",", "resume", "=", "args", ".", "resume", ")", "\n", "res", "=", "Trainer", ".", "test", "(", "cfg", ",", "model", ")", "\n", "return", "res", "\n", "\n", "", "trainer", "=", "Trainer", "(", "cfg", ")", "\n", "#args.resume = \"output/model_0034999.pth\"", "\n", "trainer", ".", "resume_or_load", "(", "resume", "=", "args", ".", "resume", ")", "\n", "return", "trainer", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.test_svm.get_chosen_costs": [[35, 59], ["svm_helper.parse_cost_list", "numpy.zeros", "range", "numpy.argmax", "numpy.save", "numpy.save", "numpy.array", "range", "os.path.join", "numpy.array", "os.path.join", "numpy.array", "len", "len", "svm_helper.get_svm_train_output_files", "float", "numpy.load"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.svm_helper.parse_cost_list", "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.svm_helper.get_svm_train_output_files"], ["def", "get_chosen_costs", "(", "opts", ",", "num_classes", ")", ":", "\n", "    ", "costs_list", "=", "svm_helper", ".", "parse_cost_list", "(", "opts", ".", "costs_list", ")", "\n", "train_ap_matrix", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", "len", "(", "costs_list", ")", ")", ")", "\n", "for", "cls", "in", "range", "(", "num_classes", ")", ":", "\n", "        ", "for", "cost_idx", "in", "range", "(", "len", "(", "costs_list", ")", ")", ":", "\n", "            ", "cost", "=", "costs_list", "[", "cost_idx", "]", "\n", "_", ",", "ap_out_file", "=", "svm_helper", ".", "get_svm_train_output_files", "(", "\n", "cls", ",", "cost", ",", "opts", ".", "output_path", ")", "\n", "train_ap_matrix", "[", "cls", "]", "[", "cost_idx", "]", "=", "float", "(", "\n", "np", ".", "load", "(", "ap_out_file", ",", "encoding", "=", "'latin1'", ")", "[", "0", "]", ")", "\n", "", "", "argmax_cls", "=", "np", ".", "argmax", "(", "train_ap_matrix", ",", "axis", "=", "1", ")", "\n", "chosen_cost", "=", "[", "costs_list", "[", "idx", "]", "for", "idx", "in", "argmax_cls", "]", "\n", "#logger.info('chosen_cost: {}'.format(chosen_cost))", "\n", "np", ".", "save", "(", "\n", "os", ".", "path", ".", "join", "(", "opts", ".", "output_path", ",", "'crossval_ap.npy'", ")", ",", "\n", "np", ".", "array", "(", "train_ap_matrix", ")", ")", "\n", "np", ".", "save", "(", "\n", "os", ".", "path", ".", "join", "(", "opts", ".", "output_path", ",", "'chosen_cost.npy'", ")", ",", "\n", "np", ".", "array", "(", "chosen_cost", ")", ")", "\n", "#logger.info('saved crossval_ap AP to file: {}'.format(", "\n", "#    os.path.join(opts.output_path, 'crossval_ap.npy')))", "\n", "#logger.info('saved chosen costs to file: {}'.format(", "\n", "#    os.path.join(opts.output_path, 'chosen_cost.npy')))", "\n", "return", "np", ".", "array", "(", "chosen_cost", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.test_svm.load_json": [[61, 68], ["os.path.exists", "list", "list", "open", "json.load", "json.load.keys", "data[].keys"], "function", ["None"], ["", "def", "load_json", "(", "file_path", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "exists", "(", "file_path", ")", ",", "\"{} does not exist\"", ".", "format", "(", "file_path", ")", "\n", "with", "open", "(", "file_path", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "fp", ")", "\n", "", "img_ids", "=", "list", "(", "data", ".", "keys", "(", ")", ")", "\n", "cls_names", "=", "list", "(", "data", "[", "img_ids", "[", "0", "]", "]", ".", "keys", "(", ")", ")", "\n", "return", "img_ids", ",", "cls_names", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.test_svm.test_svm": [[70, 128], ["os.path.exists", "svm_helper.load_input_data", "svm_helper.normalize_features", "test_svm.get_chosen_costs", "numpy.zeros", "range", "logger.info", "numpy.save", "test_svm.load_json", "os.path.join", "pickle.load.decision_function", "svm_helper.get_precision_recall", "os.path.join", "os.path.join", "numpy.array", "open", "range", "open", "json.dump", "numpy.mean", "pickle.load", "pickle.load", "len", "numpy.where", "str", "str"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.svm_helper.load_input_data", "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.svm_helper.normalize_features", "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.test_svm.get_chosen_costs", "home.repos.pwc.inspect_result.wanggrun_triplet.prepare_data.create_voc_low_shot_challenge_samples.load_json", "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.svm_helper.get_precision_recall"], ["", "def", "test_svm", "(", "opts", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "exists", "(", "opts", ".", "data_file", ")", ",", "\"Data file not found. Abort!\"", "\n", "json_predictions", ",", "img_ids", ",", "cls_names", "=", "{", "}", ",", "[", "]", ",", "[", "]", "\n", "if", "opts", ".", "generate_json", ":", "\n", "        ", "img_ids", ",", "cls_names", "=", "load_json", "(", "opts", ".", "json_targets", ")", "\n", "\n", "", "features", ",", "targets", "=", "svm_helper", ".", "load_input_data", "(", "opts", ".", "data_file", ",", "\n", "opts", ".", "targets_data_file", ")", "\n", "# normalize the features: N x 9216 (example shape)", "\n", "features", "=", "svm_helper", ".", "normalize_features", "(", "features", ")", "\n", "num_classes", "=", "targets", ".", "shape", "[", "1", "]", "\n", "#logger.info('Num classes: {}'.format(num_classes))", "\n", "\n", "# get the chosen cost that maximizes the cross-validation AP per class", "\n", "costs_list", "=", "get_chosen_costs", "(", "opts", ",", "num_classes", ")", "\n", "\n", "ap_matrix", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", "1", ")", ")", "\n", "for", "cls", "in", "range", "(", "num_classes", ")", ":", "\n", "        ", "cost", "=", "costs_list", "[", "cls", "]", "\n", "#logger.info('Testing model for cls: {} cost: {}'.format(cls, cost))", "\n", "model_file", "=", "os", ".", "path", ".", "join", "(", "\n", "opts", ".", "output_path", ",", "\n", "'cls'", "+", "str", "(", "cls", ")", "+", "'_cost'", "+", "str", "(", "cost", ")", "+", "'.pickle'", ")", "\n", "with", "open", "(", "model_file", ",", "'rb'", ")", "as", "fopen", ":", "\n", "            ", "if", "six", ".", "PY2", ":", "\n", "                ", "model", "=", "pickle", ".", "load", "(", "fopen", ")", "\n", "", "else", ":", "\n", "                ", "model", "=", "pickle", ".", "load", "(", "fopen", ",", "encoding", "=", "'latin1'", ")", "\n", "", "", "prediction", "=", "model", ".", "decision_function", "(", "features", ")", "\n", "if", "opts", ".", "generate_json", ":", "\n", "            ", "cls_name", "=", "cls_names", "[", "cls", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "prediction", ")", ")", ":", "\n", "                ", "img_id", "=", "img_ids", "[", "idx", "]", "\n", "if", "img_id", "in", "json_predictions", ":", "\n", "                    ", "json_predictions", "[", "img_id", "]", "[", "cls_name", "]", "=", "prediction", "[", "idx", "]", "\n", "", "else", ":", "\n", "                    ", "out_lbl", "=", "{", "}", "\n", "out_lbl", "[", "cls_name", "]", "=", "prediction", "[", "idx", "]", "\n", "json_predictions", "[", "img_id", "]", "=", "out_lbl", "\n", "\n", "", "", "", "cls_labels", "=", "targets", "[", ":", ",", "cls", "]", "\n", "# meaning of labels in VOC/COCO original loaded target files:", "\n", "# label 0 = not present, set it to -1 as svm train target", "\n", "# label 1 = present. Make the svm train target labels as -1, 1.", "\n", "evaluate_data_inds", "=", "(", "targets", "[", ":", ",", "cls", "]", "!=", "-", "1", ")", "\n", "eval_preds", "=", "prediction", "[", "evaluate_data_inds", "]", "\n", "eval_cls_labels", "=", "cls_labels", "[", "evaluate_data_inds", "]", "\n", "eval_cls_labels", "[", "np", ".", "where", "(", "eval_cls_labels", "==", "0", ")", "]", "=", "-", "1", "\n", "P", ",", "R", ",", "score", ",", "ap", "=", "svm_helper", ".", "get_precision_recall", "(", "\n", "eval_cls_labels", ",", "eval_preds", ")", "\n", "ap_matrix", "[", "cls", "]", "[", "0", "]", "=", "ap", "\n", "", "if", "opts", ".", "generate_json", ":", "\n", "        ", "output_file", "=", "os", ".", "path", ".", "join", "(", "opts", ".", "output_path", ",", "'json_preds.json'", ")", "\n", "with", "open", "(", "output_file", ",", "'w'", ")", "as", "fp", ":", "\n", "            ", "json", ".", "dump", "(", "json_predictions", ",", "fp", ")", "\n", "#logger.info('Saved json predictions to: {}'.format(output_file))", "\n", "", "", "logger", ".", "info", "(", "'Mean AP: {}'", ".", "format", "(", "np", ".", "mean", "(", "ap_matrix", ",", "axis", "=", "0", ")", ")", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "opts", ".", "output_path", ",", "'test_ap.npy'", ")", ",", "np", ".", "array", "(", "ap_matrix", ")", ")", "\n", "#logger.info('saved test AP to file: {}'.format(", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.test_svm.main": [[132, 171], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "test_svm.test_svm", "len", "argparse.ArgumentParser.print_help", "sys.exit"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.tools.extract.parse_args", "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.test_svm.test_svm"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'SVM model test'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--data_file'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Numpy file containing image features and labels\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--json_targets'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Json file containing json targets\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--targets_data_file'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Numpy file containing image labels\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--costs_list'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"0.01,0.1\"", ",", "\n", "help", "=", "\"comma separated string containing list of costs\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--output_path'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"path where trained SVM models are saved\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--generate_json'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "0", ",", "\n", "help", "=", "\"Whether to generate json files for output\"", ")", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "1", ":", "\n", "        ", "parser", ".", "print_help", "(", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "opts", "=", "parser", ".", "parse_args", "(", ")", "\n", "#logger.info(opts)", "\n", "test_svm", "(", "opts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.svm_helper.py2_py3_compatible_cost": [[30, 32], ["str", "float"], "function", ["None"], ["def", "py2_py3_compatible_cost", "(", "cost", ")", ":", "\n", "    ", "return", "str", "(", "float", "(", "\"{:.17f}\"", ".", "format", "(", "cost", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.svm_helper.get_svm_train_output_files": [[34, 40], ["os.path.join", "os.path.join", "svm_helper.py2_py3_compatible_cost", "str"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.svm_helper.py2_py3_compatible_cost"], ["", "def", "get_svm_train_output_files", "(", "cls", ",", "cost", ",", "output_path", ")", ":", "\n", "    ", "cls_cost", "=", "str", "(", "cls", ")", "+", "'_cost'", "+", "py2_py3_compatible_cost", "(", "cost", ")", "\n", "out_file", "=", "os", ".", "path", ".", "join", "(", "output_path", ",", "'cls'", "+", "cls_cost", "+", "'.pickle'", ")", "\n", "ap_matrix_out_file", "=", "os", ".", "path", ".", "join", "(", "output_path", ",", "\n", "'AP_cls'", "+", "cls_cost", "+", "'.npy'", ")", "\n", "return", "out_file", ",", "ap_matrix_out_file", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.svm_helper.parse_cost_list": [[42, 48], ["range", "float", "costs_list.append", "costs.split"], "function", ["None"], ["", "def", "parse_cost_list", "(", "costs", ")", ":", "\n", "    ", "costs_list", "=", "[", "float", "(", "cost", ")", "for", "cost", "in", "costs", ".", "split", "(", "\",\"", ")", "]", "\n", "start_num", ",", "end_num", "=", "4", ",", "20", "\n", "for", "num", "in", "range", "(", "start_num", ",", "end_num", ")", ":", "\n", "        ", "costs_list", ".", "append", "(", "0.5", "**", "num", ")", "\n", "", "return", "costs_list", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.svm_helper.normalize_features": [[50, 54], ["numpy.linalg.norm"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.utils.conv_module.ConvModule.norm"], ["", "def", "normalize_features", "(", "features", ")", ":", "\n", "    ", "feats_norm", "=", "np", ".", "linalg", ".", "norm", "(", "features", ",", "axis", "=", "1", ")", "\n", "features", "=", "features", "/", "(", "feats_norm", "+", "1e-5", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.svm_helper.load_input_data": [[56, 66], ["numpy.load", "numpy.array().astype", "numpy.array", "numpy.load"], "function", ["None"], ["", "def", "load_input_data", "(", "data_file", ",", "targets_file", ")", ":", "\n", "# load the features and the targets", "\n", "#logger.info('loading features and targets...')", "\n", "    ", "targets", "=", "np", ".", "load", "(", "targets_file", ",", "encoding", "=", "'latin1'", ")", "\n", "features", "=", "np", ".", "array", "(", "np", ".", "load", "(", "data_file", ",", "\n", "encoding", "=", "'latin1'", ")", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "assert", "features", ".", "shape", "[", "0", "]", "==", "targets", ".", "shape", "[", "0", "]", ",", "\"Mismatched #images\"", "\n", "#logger.info('Loaded features: {} and targets: {}'.format(", "\n", "#    features.shape, targets.shape))", "\n", "return", "features", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.svm_helper.calculate_ap": [[68, 83], ["range", "rec.reshape", "prec.reshape", "numpy.zeros", "numpy.ones", "numpy.vstack", "numpy.vstack", "max", "len", "numpy.where"], "function", ["None"], ["", "def", "calculate_ap", "(", "rec", ",", "prec", ")", ":", "\n", "    ", "\"\"\"\n    Computes the AP under the precision recall curve.\n    \"\"\"", "\n", "rec", ",", "prec", "=", "rec", ".", "reshape", "(", "rec", ".", "size", ",", "1", ")", ",", "prec", ".", "reshape", "(", "prec", ".", "size", ",", "1", ")", "\n", "z", ",", "o", "=", "np", ".", "zeros", "(", "(", "1", ",", "1", ")", ")", ",", "np", ".", "ones", "(", "(", "1", ",", "1", ")", ")", "\n", "mrec", ",", "mpre", "=", "np", ".", "vstack", "(", "(", "z", ",", "rec", ",", "o", ")", ")", ",", "np", ".", "vstack", "(", "(", "z", ",", "prec", ",", "z", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "mpre", ")", "-", "2", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "        ", "mpre", "[", "i", "]", "=", "max", "(", "mpre", "[", "i", "]", ",", "mpre", "[", "i", "+", "1", "]", ")", "\n", "\n", "", "indices", "=", "np", ".", "where", "(", "mrec", "[", "1", ":", "]", "!=", "mrec", "[", "0", ":", "-", "1", "]", ")", "[", "0", "]", "+", "1", "\n", "ap", "=", "0", "\n", "for", "i", "in", "indices", ":", "\n", "        ", "ap", "=", "ap", "+", "(", "mrec", "[", "i", "]", "-", "mrec", "[", "i", "-", "1", "]", ")", "*", "mpre", "[", "i", "]", "\n", "", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.svm_helper.get_precision_recall": [[85, 117], ["numpy.array", "numpy.hstack", "numpy.argsort", "numpy.array", "numpy.array", "np.array.copy", "range", "numpy.sum", "svm_helper.calculate_ap", "numpy.cumsum", "numpy.cumsum", "targets[].astype", "preds[].astype", "numpy.cumsum", "numpy.cumsum"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.svm_helper.calculate_ap"], ["", "def", "get_precision_recall", "(", "targets", ",", "preds", ")", ":", "\n", "    ", "\"\"\"\n    [P, R, score, ap] = get_precision_recall(targets, preds)\n    Input    :\n        targets  : number of occurrences of this class in the ith image\n        preds    : score for this image\n    Output   :\n        P, R   : precision and recall\n        score  : score which corresponds to the particular precision and recall\n        ap     : average precision\n    \"\"\"", "\n", "# binarize targets", "\n", "targets", "=", "np", ".", "array", "(", "targets", ">", "0", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "tog", "=", "np", ".", "hstack", "(", "(", "targets", "[", ":", ",", "np", ".", "newaxis", "]", ".", "astype", "(", "np", ".", "float64", ")", ",", "\n", "preds", "[", ":", ",", "np", ".", "newaxis", "]", ".", "astype", "(", "np", ".", "float64", ")", ")", ")", "\n", "ind", "=", "np", ".", "argsort", "(", "preds", ")", "\n", "ind", "=", "ind", "[", ":", ":", "-", "1", "]", "\n", "score", "=", "np", ".", "array", "(", "[", "tog", "[", "i", ",", "1", "]", "for", "i", "in", "ind", "]", ")", "\n", "sortcounts", "=", "np", ".", "array", "(", "[", "tog", "[", "i", ",", "0", "]", "for", "i", "in", "ind", "]", ")", "\n", "\n", "tp", "=", "sortcounts", "\n", "fp", "=", "sortcounts", ".", "copy", "(", ")", "\n", "for", "i", "in", "range", "(", "sortcounts", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "if", "sortcounts", "[", "i", "]", ">=", "1", ":", "\n", "            ", "fp", "[", "i", "]", "=", "0.", "\n", "", "elif", "sortcounts", "[", "i", "]", "<", "1", ":", "\n", "            ", "fp", "[", "i", "]", "=", "1.", "\n", "", "", "P", "=", "np", ".", "cumsum", "(", "tp", ")", "/", "(", "np", ".", "cumsum", "(", "tp", ")", "+", "np", ".", "cumsum", "(", "fp", ")", ")", "\n", "numinst", "=", "np", ".", "sum", "(", "targets", ")", "\n", "R", "=", "np", ".", "cumsum", "(", "tp", ")", "/", "numinst", "\n", "ap", "=", "calculate_ap", "(", "R", ",", "P", ")", "\n", "return", "P", ",", "R", ",", "score", ",", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.svm_helper.get_low_shot_output_file": [[119, 128], ["os.path.join", "svm_helper.py2_py3_compatible_cost", "str"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.svm_helper.py2_py3_compatible_cost"], ["", "def", "get_low_shot_output_file", "(", "opts", ",", "cls", ",", "cost", ",", "suffix", ")", ":", "\n", "# in case of low-shot training, we train for 5 independent samples", "\n", "# (sample{}) and vary low-shot amount (k{}). The input data should have", "\n", "# sample{}_k{} information that we extract in suffix below.", "\n", "# logger.info('Suffix: {}'.format(suffix))", "\n", "    ", "cls_cost", "=", "str", "(", "cls", ")", "+", "'_cost'", "+", "py2_py3_compatible_cost", "(", "cost", ")", "\n", "out_file", "=", "os", ".", "path", ".", "join", "(", "opts", ".", "output_path", ",", "\n", "'cls'", "+", "cls_cost", "+", "'_'", "+", "suffix", "+", "'.pickle'", ")", "\n", "return", "out_file", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.svm_helper.get_low_shot_svm_classes": [[130, 145], ["range", "len", "list", "logger.info", "set", "set", "targets[].tolist", "targets[].tolist"], "function", ["None"], ["", "def", "get_low_shot_svm_classes", "(", "targets", ",", "dataset", ")", ":", "\n", "# classes for which SVM testing should be done", "\n", "    ", "num_classes", ",", "cls_list", "=", "None", ",", "None", "\n", "if", "dataset", "==", "'voc'", ":", "\n", "        ", "num_classes", "=", "targets", ".", "shape", "[", "1", "]", "\n", "cls_list", "=", "range", "(", "num_classes", ")", "\n", "", "elif", "dataset", "==", "'places'", ":", "\n", "# each image in places has a target cls [0, .... ,204]", "\n", "        ", "num_classes", "=", "len", "(", "set", "(", "targets", "[", ":", ",", "0", "]", ".", "tolist", "(", ")", ")", ")", "\n", "cls_list", "=", "list", "(", "set", "(", "targets", "[", ":", ",", "0", "]", ".", "tolist", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "info", "(", "'Dataset not recognized. Abort!'", ")", "\n", "#logger.info('Testing SVM for classes: {}'.format(cls_list))", "\n", "#logger.info('Num classes: {}'.format(num_classes))", "\n", "", "return", "num_classes", ",", "cls_list", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.svm_helper.get_cls_feats_labels": [[147, 172], ["targets[].astype", "targets.astype", "numpy.where", "out_cls_labels.reshape.reshape", "Exception", "numpy.where"], "function", ["None"], ["", "def", "get_cls_feats_labels", "(", "cls", ",", "features", ",", "targets", ",", "dataset", ")", ":", "\n", "    ", "out_feats", ",", "out_cls_labels", "=", "None", ",", "None", "\n", "if", "dataset", "==", "'voc'", ":", "\n", "        ", "cls_labels", "=", "targets", "[", ":", ",", "cls", "]", ".", "astype", "(", "dtype", "=", "np", ".", "int32", ",", "copy", "=", "True", ")", "\n", "# find the indices for positive/negative imgs. Remove the ignore label.", "\n", "out_data_inds", "=", "(", "targets", "[", ":", ",", "cls", "]", "!=", "-", "1", ")", "\n", "out_feats", "=", "features", "[", "out_data_inds", "]", "\n", "out_cls_labels", "=", "cls_labels", "[", "out_data_inds", "]", "\n", "# label 0 = not present, set it to -1 as svm train target.", "\n", "# Make the svm train target labels as -1, 1.", "\n", "out_cls_labels", "[", "np", ".", "where", "(", "out_cls_labels", "==", "0", ")", "]", "=", "-", "1", "\n", "", "elif", "dataset", "==", "'places'", ":", "\n", "        ", "out_feats", "=", "features", "\n", "out_cls_labels", "=", "targets", ".", "astype", "(", "dtype", "=", "np", ".", "int32", ",", "copy", "=", "True", ")", "\n", "# for the given class, get the relevant positive/negative images and", "\n", "# make the label 1, -1", "\n", "cls_inds", "=", "np", ".", "where", "(", "targets", "[", ":", ",", "0", "]", "==", "cls", ")", "\n", "non_cls_inds", "=", "(", "targets", "[", ":", ",", "0", "]", "!=", "cls", ")", "\n", "out_cls_labels", "[", "non_cls_inds", "]", "=", "-", "1", "\n", "out_cls_labels", "[", "cls_inds", "]", "=", "1", "\n", "# finally reshape into the format taken by sklearn svm package.", "\n", "out_cls_labels", "=", "out_cls_labels", ".", "reshape", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'args.dataset not recognized'", ")", "\n", "", "return", "out_feats", ",", "out_cls_labels", "\n", "", ""]], "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.test_svm_low_shot.load_json": [[36, 43], ["os.path.exists", "list", "list", "open", "json.load", "json.load.keys", "data[].keys"], "function", ["None"], ["def", "load_json", "(", "file_path", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "exists", "(", "file_path", ")", ",", "\"{} does not exist\"", ".", "format", "(", "file_path", ")", "\n", "with", "open", "(", "file_path", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "fp", ")", "\n", "", "img_ids", "=", "list", "(", "data", ".", "keys", "(", ")", ")", "\n", "cls_names", "=", "list", "(", "data", "[", "img_ids", "[", "0", "]", "]", ".", "keys", "(", ")", ")", "\n", "return", "img_ids", ",", "cls_names", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.test_svm_low_shot.save_json_predictions": [[45, 73], ["len", "range", "os.path.join", "svm_helper.get_low_shot_output_file", "pickle.load.decision_function", "range", "open", "json.dump", "open", "len", "pickle.load", "pickle.load"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.svm_helper.get_low_shot_output_file"], ["", "def", "save_json_predictions", "(", "opts", ",", "cost", ",", "sample_idx", ",", "k_low", ",", "features", ",", "cls_list", ",", "\n", "cls_names", ",", "img_ids", ")", ":", "\n", "    ", "num_classes", "=", "len", "(", "cls_list", ")", "\n", "json_predictions", "=", "{", "}", "\n", "for", "cls", "in", "range", "(", "num_classes", ")", ":", "\n", "        ", "suffix", "=", "'sample{}_k{}'", ".", "format", "(", "sample_idx", "+", "1", ",", "k_low", ")", "\n", "model_file", "=", "svm_helper", ".", "get_low_shot_output_file", "(", "\n", "opts", ",", "cls", ",", "cost", ",", "suffix", ")", "\n", "with", "open", "(", "model_file", ",", "'rb'", ")", "as", "fopen", ":", "\n", "            ", "if", "six", ".", "PY2", ":", "\n", "                ", "model", "=", "pickle", ".", "load", "(", "fopen", ")", "\n", "", "else", ":", "\n", "                ", "model", "=", "pickle", ".", "load", "(", "fopen", ",", "encoding", "=", "'latin1'", ")", "\n", "", "", "prediction", "=", "model", ".", "decision_function", "(", "features", ")", "\n", "cls_name", "=", "cls_names", "[", "cls", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "prediction", ")", ")", ":", "\n", "            ", "img_id", "=", "img_ids", "[", "idx", "]", "\n", "if", "img_id", "in", "json_predictions", ":", "\n", "                ", "json_predictions", "[", "img_id", "]", "[", "cls_name", "]", "=", "prediction", "[", "idx", "]", "\n", "", "else", ":", "\n", "                ", "out_lbl", "=", "{", "}", "\n", "out_lbl", "[", "cls_name", "]", "=", "prediction", "[", "idx", "]", "\n", "json_predictions", "[", "img_id", "]", "=", "out_lbl", "\n", "\n", "", "", "", "output_file", "=", "os", ".", "path", ".", "join", "(", "opts", ".", "output_path", ",", "\n", "'test_{}_json_preds.json'", ".", "format", "(", "suffix", ")", ")", "\n", "with", "open", "(", "output_file", ",", "'w'", ")", "as", "fp", ":", "\n", "        ", "json", ".", "dump", "(", "json_predictions", ",", "fp", ")", "\n", "#logger.info('Saved json predictions to: {}'.format(output_file))", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.test_svm_low_shot.test_svm_low_shot": [[76, 154], ["os.path.exists", "svm_helper.load_input_data", "svm_helper.normalize_features", "svm_helper.parse_cost_list", "svm_helper.get_low_shot_svm_classes", "range", "range", "int", "int", "test_svm_low_shot.load_json", "len", "numpy.zeros", "sample_ap_matrices.append", "len", "range", "opts.k_values.split", "opts.sample_inds.split", "len", "range", "os.path.join", "save_data.reshape.reshape", "numpy.save", "len", "len", "len", "numpy.zeros", "numpy.mean", "numpy.argmax", "test_svm_low_shot.save_json_predictions", "svm_helper.get_low_shot_output_file", "pickle.load.decision_function", "svm_helper.get_cls_feats_labels", "svm_helper.get_precision_recall", "open", "pickle.load", "pickle.load"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.svm_helper.load_input_data", "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.svm_helper.normalize_features", "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.svm_helper.parse_cost_list", "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.svm_helper.get_low_shot_svm_classes", "home.repos.pwc.inspect_result.wanggrun_triplet.prepare_data.create_voc_low_shot_challenge_samples.load_json", "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.test_svm_low_shot.save_json_predictions", "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.svm_helper.get_low_shot_output_file", "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.svm_helper.get_cls_feats_labels", "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.svm_helper.get_precision_recall"], ["", "", "def", "test_svm_low_shot", "(", "opts", ")", ":", "\n", "    ", "k_values", "=", "[", "int", "(", "val", ")", "for", "val", "in", "opts", ".", "k_values", ".", "split", "(", "\",\"", ")", "]", "\n", "sample_inds", "=", "[", "int", "(", "val", ")", "for", "val", "in", "opts", ".", "sample_inds", ".", "split", "(", "\",\"", ")", "]", "\n", "#logger.info('Testing svm for k-values: {} and sample_inds: {}'.format(", "\n", "#    k_values, sample_inds))", "\n", "\n", "img_ids", ",", "cls_names", "=", "[", "]", ",", "[", "]", "\n", "if", "opts", ".", "generate_json", ":", "\n", "        ", "img_ids", ",", "cls_names", "=", "load_json", "(", "opts", ".", "json_targets", ")", "\n", "\n", "", "assert", "os", ".", "path", ".", "exists", "(", "opts", ".", "data_file", ")", ",", "\"Data file not found. Abort!\"", "\n", "# we test the svms on the full test set. Given the test features and the", "\n", "# targets, we test it for various k-values (low-shot), cost values and", "\n", "# 5 independent samples.", "\n", "features", ",", "targets", "=", "svm_helper", ".", "load_input_data", "(", "opts", ".", "data_file", ",", "\n", "opts", ".", "targets_data_file", ")", "\n", "# normalize the features: N x 9216 (example shape)", "\n", "features", "=", "svm_helper", ".", "normalize_features", "(", "features", ")", "\n", "\n", "# parse the cost values for training the SVM on", "\n", "costs_list", "=", "svm_helper", ".", "parse_cost_list", "(", "opts", ".", "costs_list", ")", "\n", "#logger.info('Testing SVM for costs: {}'.format(costs_list))", "\n", "\n", "# classes for which SVM testing should be done", "\n", "num_classes", ",", "cls_list", "=", "svm_helper", ".", "get_low_shot_svm_classes", "(", "\n", "targets", ",", "opts", ".", "dataset", ")", "\n", "\n", "# create the output for per sample, per k-value and per cost.", "\n", "sample_ap_matrices", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "len", "(", "sample_inds", ")", ")", ":", "\n", "        ", "ap_matrix", "=", "np", ".", "zeros", "(", "(", "len", "(", "k_values", ")", ",", "len", "(", "costs_list", ")", ")", ")", "\n", "sample_ap_matrices", ".", "append", "(", "ap_matrix", ")", "\n", "\n", "# the test goes like this: For a given sample, for a given k-value and a", "\n", "# given cost value, we evaluate the trained svm model for all classes.", "\n", "# After computing over all classes, we get the mean AP value over all", "\n", "# classes. We hence end up with: output = [sample][k_value][cost]", "\n", "", "for", "inds", "in", "range", "(", "len", "(", "sample_inds", ")", ")", ":", "\n", "        ", "sample_idx", "=", "sample_inds", "[", "inds", "]", "\n", "for", "k_idx", "in", "range", "(", "len", "(", "k_values", ")", ")", ":", "\n", "            ", "k_low", "=", "k_values", "[", "k_idx", "]", "\n", "suffix", "=", "'sample{}_k{}'", ".", "format", "(", "sample_idx", "+", "1", ",", "k_low", ")", "\n", "for", "cost_idx", "in", "range", "(", "len", "(", "costs_list", ")", ")", ":", "\n", "                ", "cost", "=", "costs_list", "[", "cost_idx", "]", "\n", "local_cost_ap", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", "1", ")", ")", "\n", "for", "cls", "in", "cls_list", ":", "\n", "#logger.info(", "\n", "#    'Test sample/k_value/cost/cls: {}/{}/{}/{}'.format(", "\n", "#        sample_idx + 1, k_low, cost, cls))", "\n", "                    ", "model_file", "=", "svm_helper", ".", "get_low_shot_output_file", "(", "\n", "opts", ",", "cls", ",", "cost", ",", "suffix", ")", "\n", "with", "open", "(", "model_file", ",", "'rb'", ")", "as", "fopen", ":", "\n", "                        ", "if", "six", ".", "PY2", ":", "\n", "                            ", "model", "=", "pickle", ".", "load", "(", "fopen", ")", "\n", "", "else", ":", "\n", "                            ", "model", "=", "pickle", ".", "load", "(", "fopen", ",", "encoding", "=", "'latin1'", ")", "\n", "", "", "prediction", "=", "model", ".", "decision_function", "(", "features", ")", "\n", "eval_preds", ",", "eval_cls_labels", "=", "svm_helper", ".", "get_cls_feats_labels", "(", "\n", "cls", ",", "prediction", ",", "targets", ",", "opts", ".", "dataset", ")", "\n", "P", ",", "R", ",", "score", ",", "ap", "=", "svm_helper", ".", "get_precision_recall", "(", "\n", "eval_cls_labels", ",", "eval_preds", ")", "\n", "local_cost_ap", "[", "cls", "]", "[", "0", "]", "=", "ap", "\n", "", "mean_cost_ap", "=", "np", ".", "mean", "(", "local_cost_ap", ",", "axis", "=", "0", ")", "\n", "sample_ap_matrices", "[", "inds", "]", "[", "k_idx", "]", "[", "cost_idx", "]", "=", "mean_cost_ap", "\n", "", "out_k_sample_file", "=", "os", ".", "path", ".", "join", "(", "\n", "opts", ".", "output_path", ",", "\n", "'test_ap_sample{}_k{}.npy'", ".", "format", "(", "sample_idx", "+", "1", ",", "k_low", ")", ")", "\n", "save_data", "=", "sample_ap_matrices", "[", "inds", "]", "[", "k_idx", "]", "\n", "save_data", "=", "save_data", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", "\n", "np", ".", "save", "(", "out_k_sample_file", ",", "save_data", ")", "\n", "#logger.info('Saved sample test k_idx AP to file: {} {}'.format(", "\n", "#    out_k_sample_file, save_data.shape))", "\n", "if", "opts", ".", "generate_json", ":", "\n", "                ", "argmax_cls", "=", "np", ".", "argmax", "(", "save_data", ",", "axis", "=", "1", ")", "\n", "chosen_cost", "=", "costs_list", "[", "argmax_cls", "[", "0", "]", "]", "\n", "#logger.info('chosen cost: {}'.format(chosen_cost))", "\n", "save_json_predictions", "(", "opts", ",", "chosen_cost", ",", "sample_idx", ",", "k_low", ",", "\n", "features", ",", "cls_list", ",", "cls_names", ",", "img_ids", ")", "\n", "#logger.info('All done!!')", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.test_svm_low_shot.main": [[157, 209], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "test_svm_low_shot.test_svm_low_shot", "len", "argparse.ArgumentParser.print_help", "sys.exit"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.tools.extract.parse_args", "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.test_svm_low_shot.test_svm_low_shot"], ["", "", "", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Low shot SVM model test'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--data_file'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Numpy file containing image features and labels\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--targets_data_file'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Numpy file containing image labels\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--json_targets'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Numpy file containing json targets\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--generate_json'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "0", ",", "\n", "help", "=", "\"Whether to generate json files for output\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--costs_list'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\n", "\"0.0000001,0.000001,0.00001,0.0001,0.001,0.01,0.1,1.0,10.0,100.0\"", ",", "\n", "help", "=", "\"comma separated string containing list of costs\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--output_path'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"path where trained SVM models are saved\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--k_values'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"1,2,4,8,16,32,64,96\"", ",", "\n", "help", "=", "\"Low-shot k-values for svm testing. Comma separated\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--sample_inds'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"0,1,2,3,4\"", ",", "\n", "help", "=", "\"sample_inds for which to test svm. Comma separated\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "\"voc\"", ",", "help", "=", "'voc | places'", ")", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "1", ":", "\n", "        ", "parser", ".", "print_help", "(", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "opts", "=", "parser", ".", "parse_args", "(", ")", "\n", "#logger.info(opts)", "\n", "test_svm_low_shot", "(", "opts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.train_svm_low_shot_parallel.task": [[35, 63], ["svm_helper.get_low_shot_output_file", "os.path.exists", "sklearn.svm.LinearSVC", "svm_helper.get_cls_feats_labels", "sklearn.svm.LinearSVC.fit", "[].split", "open", "pickle.dump", "[].split", "opts.targets_data_file.split"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.svm_helper.get_low_shot_output_file", "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.svm_helper.get_cls_feats_labels"], ["def", "task", "(", "cls", ",", "cost", ",", "opts", ",", "features", ",", "targets", ")", ":", "\n", "    ", "suffix", "=", "'_'", ".", "join", "(", "\n", "opts", ".", "targets_data_file", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "split", "(", "'_'", ")", "[", "-", "2", ":", "]", ")", "\n", "out_file", "=", "svm_helper", ".", "get_low_shot_output_file", "(", "opts", ",", "cls", ",", "cost", ",", "suffix", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "out_file", ")", ":", "\n", "        ", "clf", "=", "LinearSVC", "(", "\n", "C", "=", "cost", ",", "\n", "class_weight", "=", "{", "\n", "1", ":", "2", ",", "\n", "-", "1", ":", "1", "\n", "}", ",", "\n", "intercept_scaling", "=", "1.0", ",", "\n", "verbose", "=", "0", ",", "\n", "penalty", "=", "'l2'", ",", "\n", "loss", "=", "'squared_hinge'", ",", "\n", "tol", "=", "0.0001", ",", "\n", "dual", "=", "True", ",", "\n", "max_iter", "=", "2000", ",", "\n", ")", "\n", "train_feats", ",", "train_cls_labels", "=", "svm_helper", ".", "get_cls_feats_labels", "(", "\n", "cls", ",", "features", ",", "targets", ",", "opts", ".", "dataset", ")", "\n", "clf", ".", "fit", "(", "train_feats", ",", "train_cls_labels", ")", "\n", "#cls_labels = targets[:, cls].astype(dtype=np.int32, copy=True)", "\n", "#cls_labels[np.where(cls_labels == 0)] = -1", "\n", "#clf.fit(features, cls_labels)", "\n", "with", "open", "(", "out_file", ",", "'wb'", ")", "as", "fwrite", ":", "\n", "            ", "pickle", ".", "dump", "(", "clf", ",", "fwrite", ")", "\n", "", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.train_svm_low_shot_parallel.mp_helper": [[65, 67], ["train_svm_low_shot_parallel.task"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.train_svm_kfold_parallel.task"], ["", "def", "mp_helper", "(", "args", ")", ":", "\n", "    ", "return", "task", "(", "*", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.train_svm_low_shot_parallel.train_svm_low_shot": [[69, 105], ["os.path.exists", "svm_helper.load_input_data", "svm_helper.normalize_features", "svm_helper.parse_cost_list", "svm_helper.get_low_shot_svm_classes", "multiprocessing.Pool", "tqdm.tqdm", "os.path.exists", "os.makedirs", "len", "len", "multiprocessing.cpu_count", "mp.Pool.imap_unordered", "args_cls.append", "args_cost.append", "zip"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.svm_helper.load_input_data", "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.svm_helper.normalize_features", "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.svm_helper.parse_cost_list", "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.svm_helper.get_low_shot_svm_classes"], ["", "def", "train_svm_low_shot", "(", "opts", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "exists", "(", "opts", ".", "data_file", ")", ",", "\"Data file not found. Abort!\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "opts", ".", "output_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "opts", ".", "output_path", ")", "\n", "\n", "", "features", ",", "targets", "=", "svm_helper", ".", "load_input_data", "(", "opts", ".", "data_file", ",", "\n", "opts", ".", "targets_data_file", ")", "\n", "# normalize the features: N x 9216 (example shape)", "\n", "features", "=", "svm_helper", ".", "normalize_features", "(", "features", ")", "\n", "\n", "# parse the cost values for training the SVM on", "\n", "costs_list", "=", "svm_helper", ".", "parse_cost_list", "(", "opts", ".", "costs_list", ")", "\n", "\n", "# classes for which SVM testing should be done", "\n", "num_classes", ",", "cls_list", "=", "svm_helper", ".", "get_low_shot_svm_classes", "(", "\n", "targets", ",", "opts", ".", "dataset", ")", "\n", "\n", "num_task", "=", "len", "(", "cls_list", ")", "*", "len", "(", "costs_list", ")", "\n", "args_cls", "=", "[", "]", "\n", "args_cost", "=", "[", "]", "\n", "for", "cls", "in", "cls_list", ":", "\n", "        ", "for", "cost", "in", "costs_list", ":", "\n", "            ", "args_cls", ".", "append", "(", "cls", ")", "\n", "args_cost", ".", "append", "(", "cost", ")", "\n", "", "", "args_opts", "=", "[", "opts", "]", "*", "num_task", "\n", "args_features", "=", "[", "features", "]", "*", "num_task", "\n", "args_targets", "=", "[", "targets", "]", "*", "num_task", "\n", "\n", "pool", "=", "mp", ".", "Pool", "(", "mp", ".", "cpu_count", "(", ")", ")", "\n", "for", "_", "in", "tqdm", ".", "tqdm", "(", "\n", "pool", ".", "imap_unordered", "(", "\n", "mp_helper", ",", "\n", "zip", "(", "args_cls", ",", "args_cost", ",", "args_opts", ",", "args_features", ",", "\n", "args_targets", ")", ")", ",", "\n", "total", "=", "num_task", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.train_svm_low_shot_parallel.main": [[107, 142], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "train_svm_low_shot_parallel.train_svm_low_shot", "len", "argparse.ArgumentParser.print_help", "sys.exit"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.tools.extract.parse_args", "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.train_svm_low_shot.train_svm_low_shot"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Low-shot SVM model training'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--data_file'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Numpy file containing image features\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--targets_data_file'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Numpy file containing image labels\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--costs_list'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"0.01,0.1\"", ",", "\n", "help", "=", "\"comma separated string containing list of costs\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--output_path'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"path where to save the trained SVM models\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--random_seed'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "100", ",", "\n", "help", "=", "\"random seed for SVM classifier training\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "\"voc\"", ",", "help", "=", "'voc | places'", ")", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "1", ":", "\n", "        ", "parser", ".", "print_help", "(", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "opts", "=", "parser", ".", "parse_args", "(", ")", "\n", "train_svm_low_shot", "(", "opts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.train_svm_kfold_parallel.task": [[35, 62], ["svm_helper.get_svm_train_output_files", "sklearn.svm.LinearSVC", "targets[].astype", "sklearn.model_selection.cross_val_score", "sklearn.svm.LinearSVC.fit", "numpy.save", "os.path.exists", "os.path.exists", "numpy.array", "open", "pickle.dump", "numpy.where", "sklearn.model_selection.cross_val_score.mean"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.svm_helper.get_svm_train_output_files"], ["def", "task", "(", "cls", ",", "cost", ",", "opts", ",", "features", ",", "targets", ")", ":", "\n", "    ", "out_file", ",", "ap_out_file", "=", "svm_helper", ".", "get_svm_train_output_files", "(", "\n", "cls", ",", "cost", ",", "opts", ".", "output_path", ")", "\n", "if", "not", "(", "os", ".", "path", ".", "exists", "(", "out_file", ")", "and", "os", ".", "path", ".", "exists", "(", "ap_out_file", ")", ")", ":", "\n", "        ", "clf", "=", "LinearSVC", "(", "\n", "C", "=", "cost", ",", "\n", "class_weight", "=", "{", "\n", "1", ":", "2", ",", "\n", "-", "1", ":", "1", "\n", "}", ",", "\n", "intercept_scaling", "=", "1.0", ",", "\n", "verbose", "=", "0", ",", "\n", "penalty", "=", "'l2'", ",", "\n", "loss", "=", "'squared_hinge'", ",", "\n", "tol", "=", "0.0001", ",", "\n", "dual", "=", "True", ",", "\n", "max_iter", "=", "2000", ",", "\n", ")", "\n", "cls_labels", "=", "targets", "[", ":", ",", "cls", "]", ".", "astype", "(", "dtype", "=", "np", ".", "int32", ",", "copy", "=", "True", ")", "\n", "cls_labels", "[", "np", ".", "where", "(", "cls_labels", "==", "0", ")", "]", "=", "-", "1", "\n", "ap_scores", "=", "cross_val_score", "(", "\n", "clf", ",", "features", ",", "cls_labels", ",", "cv", "=", "3", ",", "scoring", "=", "'average_precision'", ")", "\n", "clf", ".", "fit", "(", "features", ",", "cls_labels", ")", "\n", "np", ".", "save", "(", "ap_out_file", ",", "np", ".", "array", "(", "[", "ap_scores", ".", "mean", "(", ")", "]", ")", ")", "\n", "with", "open", "(", "out_file", ",", "'wb'", ")", "as", "fwrite", ":", "\n", "            ", "pickle", ".", "dump", "(", "clf", ",", "fwrite", ")", "\n", "", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.train_svm_kfold_parallel.mp_helper": [[64, 66], ["train_svm_kfold_parallel.task"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.train_svm_kfold_parallel.task"], ["", "def", "mp_helper", "(", "args", ")", ":", "\n", "    ", "return", "task", "(", "*", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.train_svm_kfold_parallel.train_svm": [[68, 107], ["os.path.exists", "svm_helper.load_input_data", "svm_helper.normalize_features", "svm_helper.parse_cost_list", "multiprocessing.Pool", "tqdm.tqdm", "os.path.exists", "os.makedirs", "range", "len", "len", "multiprocessing.cpu_count", "mp.Pool.imap_unordered", "int", "args_cls.append", "args_cost.append", "zip", "opts.cls_list.split"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.svm_helper.load_input_data", "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.svm_helper.normalize_features", "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.svm_helper.parse_cost_list"], ["", "def", "train_svm", "(", "opts", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "exists", "(", "opts", ".", "data_file", ")", ",", "\"Data file not found. Abort!\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "opts", ".", "output_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "opts", ".", "output_path", ")", "\n", "\n", "", "features", ",", "targets", "=", "svm_helper", ".", "load_input_data", "(", "opts", ".", "data_file", ",", "\n", "opts", ".", "targets_data_file", ")", "\n", "# normalize the features: N x 9216 (example shape)", "\n", "features", "=", "svm_helper", ".", "normalize_features", "(", "features", ")", "\n", "\n", "# parse the cost values for training the SVM on", "\n", "costs_list", "=", "svm_helper", ".", "parse_cost_list", "(", "opts", ".", "costs_list", ")", "\n", "\n", "# classes for which SVM training should be done", "\n", "if", "opts", ".", "cls_list", ":", "\n", "        ", "cls_list", "=", "[", "int", "(", "cls", ")", "for", "cls", "in", "opts", ".", "cls_list", ".", "split", "(", "\",\"", ")", "]", "\n", "", "else", ":", "\n", "        ", "num_classes", "=", "targets", ".", "shape", "[", "1", "]", "\n", "cls_list", "=", "range", "(", "num_classes", ")", "\n", "\n", "", "num_task", "=", "len", "(", "cls_list", ")", "*", "len", "(", "costs_list", ")", "\n", "args_cls", "=", "[", "]", "\n", "args_cost", "=", "[", "]", "\n", "for", "cls", "in", "cls_list", ":", "\n", "        ", "for", "cost", "in", "costs_list", ":", "\n", "            ", "args_cls", ".", "append", "(", "cls", ")", "\n", "args_cost", ".", "append", "(", "cost", ")", "\n", "", "", "args_opts", "=", "[", "opts", "]", "*", "num_task", "\n", "args_features", "=", "[", "features", "]", "*", "num_task", "\n", "args_targets", "=", "[", "targets", "]", "*", "num_task", "\n", "\n", "pool", "=", "mp", ".", "Pool", "(", "mp", ".", "cpu_count", "(", ")", ")", "\n", "for", "_", "in", "tqdm", ".", "tqdm", "(", "\n", "pool", ".", "imap_unordered", "(", "\n", "mp_helper", ",", "\n", "zip", "(", "args_cls", ",", "args_cost", ",", "args_opts", ",", "args_features", ",", "\n", "args_targets", ")", ")", ",", "\n", "total", "=", "num_task", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.train_svm_kfold_parallel.main": [[109, 148], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "train_svm_kfold_parallel.train_svm", "len", "argparse.ArgumentParser.print_help", "sys.exit"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.tools.extract.parse_args", "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.train_svm_kfold.train_svm"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'SVM model training'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--data_file'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Numpy file containing image features\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--targets_data_file'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Numpy file containing image labels\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--output_path'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"path where to save the trained SVM models\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--costs_list'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"0.01,0.1\"", ",", "\n", "help", "=", "\"comma separated string containing list of costs\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--random_seed'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "100", ",", "\n", "help", "=", "\"random seed for SVM classifier training\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--cls_list'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"comma separated string list of classes to train\"", ")", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "1", ":", "\n", "        ", "parser", ".", "print_help", "(", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "opts", "=", "parser", ".", "parse_args", "(", ")", "\n", "train_svm", "(", "opts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.train_svm_low_shot.train_svm_low_shot": [[39, 100], ["os.path.exists", "svm_helper.load_input_data", "svm_helper.normalize_features", "svm_helper.parse_cost_list", "svm_helper.get_low_shot_svm_classes", "tqdm.tqdm", "os.path.exists", "os.makedirs", "range", "len", "time.time", "svm_helper.get_low_shot_output_file", "os.path.exists", "logger.info", "sklearn.svm.LinearSVC", "svm_helper.get_cls_feats_labels", "sklearn.svm.LinearSVC.fit", "[].split", "open", "pickle.dump", "[].split", "opts.targets_data_file.split"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.svm_helper.load_input_data", "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.svm_helper.normalize_features", "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.svm_helper.parse_cost_list", "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.svm_helper.get_low_shot_svm_classes", "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.svm_helper.get_low_shot_output_file", "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.svm_helper.get_cls_feats_labels"], ["def", "train_svm_low_shot", "(", "opts", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "exists", "(", "opts", ".", "data_file", ")", ",", "\"Data file not found. Abort!\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "opts", ".", "output_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "opts", ".", "output_path", ")", "\n", "\n", "", "features", ",", "targets", "=", "svm_helper", ".", "load_input_data", "(", "opts", ".", "data_file", ",", "\n", "opts", ".", "targets_data_file", ")", "\n", "# normalize the features: N x 9216 (example shape)", "\n", "features", "=", "svm_helper", ".", "normalize_features", "(", "features", ")", "\n", "\n", "# parse the cost values for training the SVM on", "\n", "costs_list", "=", "svm_helper", ".", "parse_cost_list", "(", "opts", ".", "costs_list", ")", "\n", "#logger.info('Training SVM for costs: {}'.format(costs_list))", "\n", "\n", "# classes for which SVM testing should be done", "\n", "num_classes", ",", "cls_list", "=", "svm_helper", ".", "get_low_shot_svm_classes", "(", "\n", "targets", ",", "opts", ".", "dataset", ")", "\n", "\n", "for", "cls", "in", "tqdm", "(", "cls_list", ")", ":", "\n", "        ", "for", "cost_idx", "in", "range", "(", "len", "(", "costs_list", ")", ")", ":", "\n", "            ", "start", "=", "time", ".", "time", "(", ")", "\n", "cost", "=", "costs_list", "[", "cost_idx", "]", "\n", "suffix", "=", "'_'", ".", "join", "(", "\n", "opts", ".", "targets_data_file", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "split", "(", "'_'", ")", "\n", "[", "-", "2", ":", "]", ")", "\n", "out_file", "=", "svm_helper", ".", "get_low_shot_output_file", "(", "\n", "opts", ",", "cls", ",", "cost", ",", "suffix", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "out_file", ")", ":", "\n", "                ", "logger", ".", "info", "(", "'SVM model exists: {}'", ".", "format", "(", "out_file", ")", ")", "\n", "", "else", ":", "\n", "#logger.info('SVM model not found: {}'.format(out_file))", "\n", "#logger.info('Training model with the cost: {}'.format(cost))", "\n", "                ", "clf", "=", "LinearSVC", "(", "\n", "C", "=", "cost", ",", "\n", "class_weight", "=", "{", "\n", "1", ":", "2", ",", "\n", "-", "1", ":", "1", "\n", "}", ",", "\n", "intercept_scaling", "=", "1.0", ",", "\n", "verbose", "=", "0", ",", "\n", "penalty", "=", "'l2'", ",", "\n", "loss", "=", "'squared_hinge'", ",", "\n", "tol", "=", "0.0001", ",", "\n", "dual", "=", "True", ",", "\n", "max_iter", "=", "2000", ",", "\n", ")", "\n", "train_feats", ",", "train_cls_labels", "=", "svm_helper", ".", "get_cls_feats_labels", "(", "\n", "cls", ",", "features", ",", "targets", ",", "opts", ".", "dataset", ")", "\n", "#num_positives = len(np.where(train_cls_labels == 1)[0])", "\n", "#num_negatives = len(np.where(train_cls_labels == -1)[0])", "\n", "\n", "#logger.info('cls: {} has +ve: {} -ve: {} ratio: {}'.format(", "\n", "#    cls, num_positives, num_negatives,", "\n", "#    float(num_positives) / num_negatives)", "\n", "#)", "\n", "#logger.info('features: {} cls_labels: {}'.format(", "\n", "#    train_feats.shape, train_cls_labels.shape))", "\n", "clf", ".", "fit", "(", "train_feats", ",", "train_cls_labels", ")", "\n", "#logger.info('Saving SVM model to: {}'.format(out_file))", "\n", "with", "open", "(", "out_file", ",", "'wb'", ")", "as", "fwrite", ":", "\n", "                    ", "pickle", ".", "dump", "(", "clf", ",", "fwrite", ")", "\n", "#print(\"time: {:.4g} s\".format(time.time() - start))", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.train_svm_low_shot.main": [[104, 141], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "train_svm_low_shot.train_svm_low_shot", "len", "argparse.ArgumentParser.print_help", "sys.exit"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.tools.extract.parse_args", "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.train_svm_low_shot.train_svm_low_shot"], ["", "", "", "", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Low-shot SVM model training'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--data_file'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Numpy file containing image features\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--targets_data_file'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Numpy file containing image labels\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--costs_list'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"0.01,0.1\"", ",", "\n", "help", "=", "\"comma separated string containing list of costs\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--output_path'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"path where to save the trained SVM models\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--random_seed'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "100", ",", "\n", "help", "=", "\"random seed for SVM classifier training\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "\"voc\"", ",", "help", "=", "'voc | places'", ")", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "1", ":", "\n", "        ", "parser", ".", "print_help", "(", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "opts", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "#logger.info(opts)", "\n", "train_svm_low_shot", "(", "opts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.train_svm_kfold.train_svm": [[39, 117], ["os.path.exists", "svm_helper.load_input_data", "svm_helper.normalize_features", "svm_helper.parse_cost_list", "tqdm.tqdm", "os.path.exists", "os.makedirs", "range", "range", "range", "int", "len", "len", "time.time", "svm_helper.get_svm_train_output_files", "print", "opts.cls_list.split", "os.path.exists", "os.path.exists", "logger.info", "logger.info", "sklearn.svm.LinearSVC", "targets[].astype", "sklearn.model_selection.cross_val_score", "sklearn.svm.LinearSVC.fit", "numpy.save", "numpy.array", "open", "pickle.dump", "numpy.where", "time.time", "sklearn.model_selection.cross_val_score.mean"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.svm_helper.load_input_data", "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.svm_helper.normalize_features", "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.svm_helper.parse_cost_list", "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.svm_helper.get_svm_train_output_files"], ["def", "train_svm", "(", "opts", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "exists", "(", "opts", ".", "data_file", ")", ",", "\"Data file not found. Abort!\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "opts", ".", "output_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "opts", ".", "output_path", ")", "\n", "\n", "", "features", ",", "targets", "=", "svm_helper", ".", "load_input_data", "(", "opts", ".", "data_file", ",", "\n", "opts", ".", "targets_data_file", ")", "\n", "# normalize the features: N x 9216 (example shape)", "\n", "features", "=", "svm_helper", ".", "normalize_features", "(", "features", ")", "\n", "\n", "# parse the cost values for training the SVM on", "\n", "costs_list", "=", "svm_helper", ".", "parse_cost_list", "(", "opts", ".", "costs_list", ")", "\n", "#logger.info('Training SVM for costs: {}'.format(costs_list))", "\n", "\n", "# classes for which SVM training should be done", "\n", "if", "opts", ".", "cls_list", ":", "\n", "        ", "cls_list", "=", "[", "int", "(", "cls", ")", "for", "cls", "in", "opts", ".", "cls_list", ".", "split", "(", "\",\"", ")", "]", "\n", "", "else", ":", "\n", "        ", "num_classes", "=", "targets", ".", "shape", "[", "1", "]", "\n", "cls_list", "=", "range", "(", "num_classes", ")", "\n", "#logger.info('Training SVM for classes: {}'.format(cls_list))", "\n", "\n", "", "for", "cls_idx", "in", "tqdm", "(", "range", "(", "len", "(", "cls_list", ")", ")", ")", ":", "\n", "        ", "cls", "=", "cls_list", "[", "cls_idx", "]", "\n", "for", "cost_idx", "in", "range", "(", "len", "(", "costs_list", ")", ")", ":", "\n", "            ", "start", "=", "time", ".", "time", "(", ")", "\n", "cost", "=", "costs_list", "[", "cost_idx", "]", "\n", "out_file", ",", "ap_out_file", "=", "svm_helper", ".", "get_svm_train_output_files", "(", "\n", "cls", ",", "cost", ",", "opts", ".", "output_path", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "out_file", ")", "and", "os", ".", "path", ".", "exists", "(", "ap_out_file", ")", ":", "\n", "                ", "logger", ".", "info", "(", "'SVM model exists: {}'", ".", "format", "(", "out_file", ")", ")", "\n", "logger", ".", "info", "(", "'AP file exists: {}'", ".", "format", "(", "ap_out_file", ")", ")", "\n", "", "else", ":", "\n", "#logger.info('Training model with the cost: {}'.format(cost))", "\n", "                ", "clf", "=", "LinearSVC", "(", "\n", "C", "=", "cost", ",", "\n", "class_weight", "=", "{", "\n", "1", ":", "2", ",", "\n", "-", "1", ":", "1", "\n", "}", ",", "\n", "intercept_scaling", "=", "1.0", ",", "\n", "verbose", "=", "0", ",", "\n", "penalty", "=", "'l2'", ",", "\n", "loss", "=", "'squared_hinge'", ",", "\n", "tol", "=", "0.0001", ",", "\n", "dual", "=", "True", ",", "\n", "max_iter", "=", "2000", ",", "\n", ")", "\n", "cls_labels", "=", "targets", "[", ":", ",", "cls", "]", ".", "astype", "(", "dtype", "=", "np", ".", "int32", ",", "copy", "=", "True", ")", "\n", "# meaning of labels in VOC/COCO original loaded target files:", "\n", "# label 0 = not present, set it to -1 as svm train target", "\n", "# label 1 = present. Make the svm train target labels as -1, 1.", "\n", "cls_labels", "[", "np", ".", "where", "(", "cls_labels", "==", "0", ")", "]", "=", "-", "1", "\n", "#num_positives = len(np.where(cls_labels == 1)[0])", "\n", "#num_negatives = len(cls_labels) - num_positives", "\n", "\n", "#logger.info('cls: {} has +ve: {} -ve: {} ratio: {}'.format(", "\n", "#    cls, num_positives, num_negatives,", "\n", "#    float(num_positives) / num_negatives)", "\n", "#)", "\n", "#logger.info('features: {} cls_labels: {}'.format(", "\n", "#    features.shape, cls_labels.shape))", "\n", "ap_scores", "=", "cross_val_score", "(", "\n", "clf", ",", "\n", "features", ",", "\n", "cls_labels", ",", "\n", "cv", "=", "3", ",", "\n", "scoring", "=", "'average_precision'", ")", "\n", "clf", ".", "fit", "(", "features", ",", "cls_labels", ")", "\n", "\n", "#logger.info('cls: {} cost: {} AP: {} mean:{}'.format(", "\n", "#    cls, cost, ap_scores, ap_scores.mean()))", "\n", "#logger.info('Saving cls cost AP to: {}'.format(ap_out_file))", "\n", "np", ".", "save", "(", "ap_out_file", ",", "np", ".", "array", "(", "[", "ap_scores", ".", "mean", "(", ")", "]", ")", ")", "\n", "#logger.info('Saving SVM model to: {}'.format(out_file))", "\n", "with", "open", "(", "out_file", ",", "'wb'", ")", "as", "fwrite", ":", "\n", "                    ", "pickle", ".", "dump", "(", "clf", ",", "fwrite", ")", "\n", "", "", "print", "(", "\"time: {:.4g} s\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.train_svm_kfold.main": [[119, 159], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "train_svm_kfold.train_svm", "len", "argparse.ArgumentParser.print_help", "sys.exit"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.tools.extract.parse_args", "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.train_svm_kfold.train_svm"], ["", "", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'SVM model training'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--data_file'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Numpy file containing image features\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--targets_data_file'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Numpy file containing image labels\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--output_path'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"path where to save the trained SVM models\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--costs_list'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"0.01,0.1\"", ",", "\n", "help", "=", "\"comma separated string containing list of costs\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--random_seed'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "100", ",", "\n", "help", "=", "\"random seed for SVM classifier training\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--cls_list'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"comma separated string list of classes to train\"", ")", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "1", ":", "\n", "        ", "parser", ".", "print_help", "(", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "opts", "=", "parser", ".", "parse_args", "(", ")", "\n", "#logger.info(opts)", "\n", "train_svm", "(", "opts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.aggregate_low_shot_svm_stats.save_stats": [[33, 37], ["os.path.join", "numpy.save"], "function", ["None"], ["def", "save_stats", "(", "output_dir", ",", "stat", ",", "output", ")", ":", "\n", "    ", "out_file", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'test_ap_{}.npy'", ".", "format", "(", "stat", ")", ")", "\n", "#logger.info('Saving {} to: {} {}'.format(stat, out_file, output.shape))", "\n", "np", ".", "save", "(", "out_file", ",", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.aggregate_low_shot_svm_stats.aggregate_stats": [[39, 96], ["range", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "aggregate_low_shot_svm_stats.save_stats", "aggregate_low_shot_svm_stats.save_stats", "aggregate_low_shot_svm_stats.save_stats", "aggregate_low_shot_svm_stats.save_stats", "numpy.argmax", "range", "range", "int", "int", "len", "range", "numpy.concatenate", "numpy.max().reshape", "numpy.min().reshape", "numpy.mean().reshape", "numpy.std().reshape", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "len", "argmax_mean.append", "argmax_min.append", "argmax_max.append", "argmax_std.append", "len", "logger.info", "opts.k_values.split", "opts.sample_inds.split", "len", "os.path.join", "os.path.exists", "np.concatenate.append", "logger.info", "numpy.max", "numpy.min", "numpy.mean", "numpy.std", "round", "round", "round", "round", "numpy.load"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.aggregate_low_shot_svm_stats.save_stats", "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.aggregate_low_shot_svm_stats.save_stats", "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.aggregate_low_shot_svm_stats.save_stats", "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.aggregate_low_shot_svm_stats.save_stats"], ["", "def", "aggregate_stats", "(", "opts", ")", ":", "\n", "    ", "k_values", "=", "[", "int", "(", "val", ")", "for", "val", "in", "opts", ".", "k_values", ".", "split", "(", "\",\"", ")", "]", "\n", "sample_inds", "=", "[", "int", "(", "val", ")", "for", "val", "in", "opts", ".", "sample_inds", ".", "split", "(", "\",\"", ")", "]", "\n", "#logger.info(", "\n", "#    'Aggregating stats for k-values: {} and sample_inds: {}'.format(", "\n", "#        k_values, sample_inds))", "\n", "\n", "output_mean", ",", "output_max", ",", "output_min", ",", "output_std", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "k_idx", "in", "range", "(", "len", "(", "k_values", ")", ")", ":", "\n", "        ", "k_low", "=", "k_values", "[", "k_idx", "]", "\n", "k_val_output", "=", "[", "]", "\n", "for", "inds", "in", "range", "(", "len", "(", "sample_inds", ")", ")", ":", "\n", "            ", "sample_idx", "=", "sample_inds", "[", "inds", "]", "\n", "file_name", "=", "'test_ap_sample{}_k{}.npy'", ".", "format", "(", "\n", "sample_idx", "+", "1", ",", "k_low", ")", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "opts", ".", "output_path", ",", "file_name", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "filepath", ")", ":", "\n", "                ", "k_val_output", ".", "append", "(", "np", ".", "load", "(", "filepath", ",", "encoding", "=", "'latin1'", ")", ")", "\n", "", "else", ":", "\n", "                ", "logger", ".", "info", "(", "'file does not exist: {}'", ".", "format", "(", "filepath", ")", ")", "\n", "", "", "k_val_output", "=", "np", ".", "concatenate", "(", "k_val_output", ",", "axis", "=", "0", ")", "\n", "k_low_max", "=", "np", ".", "max", "(", "\n", "k_val_output", ",", "axis", "=", "0", ")", ".", "reshape", "(", "-", "1", ",", "k_val_output", ".", "shape", "[", "1", "]", ")", "\n", "k_low_min", "=", "np", ".", "min", "(", "\n", "k_val_output", ",", "axis", "=", "0", ")", ".", "reshape", "(", "-", "1", ",", "k_val_output", ".", "shape", "[", "1", "]", ")", "\n", "k_low_mean", "=", "np", ".", "mean", "(", "\n", "k_val_output", ",", "axis", "=", "0", ")", ".", "reshape", "(", "-", "1", ",", "k_val_output", ".", "shape", "[", "1", "]", ")", "\n", "k_low_std", "=", "np", ".", "std", "(", "\n", "k_val_output", ",", "axis", "=", "0", ")", ".", "reshape", "(", "-", "1", ",", "k_val_output", ".", "shape", "[", "1", "]", ")", "\n", "output_mean", ".", "append", "(", "k_low_mean", ")", "\n", "output_min", ".", "append", "(", "k_low_min", ")", "\n", "output_max", ".", "append", "(", "k_low_max", ")", "\n", "output_std", ".", "append", "(", "k_low_std", ")", "\n", "\n", "", "output_mean", "=", "np", ".", "concatenate", "(", "output_mean", ",", "axis", "=", "0", ")", "\n", "output_min", "=", "np", ".", "concatenate", "(", "output_min", ",", "axis", "=", "0", ")", "\n", "output_max", "=", "np", ".", "concatenate", "(", "output_max", ",", "axis", "=", "0", ")", "\n", "output_std", "=", "np", ".", "concatenate", "(", "output_std", ",", "axis", "=", "0", ")", "\n", "\n", "save_stats", "(", "opts", ".", "output_path", ",", "'mean'", ",", "output_mean", ")", "\n", "save_stats", "(", "opts", ".", "output_path", ",", "'min'", ",", "output_min", ")", "\n", "save_stats", "(", "opts", ".", "output_path", ",", "'max'", ",", "output_max", ")", "\n", "save_stats", "(", "opts", ".", "output_path", ",", "'std'", ",", "output_std", ")", "\n", "\n", "argmax_cls", "=", "np", ".", "argmax", "(", "output_mean", ",", "axis", "=", "1", ")", "\n", "argmax_mean", ",", "argmax_min", ",", "argmax_max", ",", "argmax_std", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "argmax_cls", ")", ")", ":", "\n", "        ", "argmax_mean", ".", "append", "(", "100.0", "*", "output_mean", "[", "idx", ",", "argmax_cls", "[", "idx", "]", "]", ")", "\n", "argmax_min", ".", "append", "(", "100.0", "*", "output_min", "[", "idx", ",", "argmax_cls", "[", "idx", "]", "]", ")", "\n", "argmax_max", ".", "append", "(", "100.0", "*", "output_max", "[", "idx", ",", "argmax_cls", "[", "idx", "]", "]", ")", "\n", "argmax_std", ".", "append", "(", "100.0", "*", "output_std", "[", "idx", ",", "argmax_cls", "[", "idx", "]", "]", ")", "\n", "", "for", "idx", "in", "range", "(", "len", "(", "argmax_max", ")", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'mean/min/max/std: {} / {} / {} / {}'", ".", "format", "(", "\n", "round", "(", "argmax_mean", "[", "idx", "]", ",", "2", ")", ",", "\n", "round", "(", "argmax_min", "[", "idx", "]", ",", "2", ")", ",", "\n", "round", "(", "argmax_max", "[", "idx", "]", ",", "2", ")", ",", "\n", "round", "(", "argmax_std", "[", "idx", "]", ",", "2", ")", ",", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.aggregate_low_shot_svm_stats.main": [[100, 124], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "aggregate_low_shot_svm_stats.aggregate_stats", "len", "argparse.ArgumentParser.print_help", "sys.exit"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.tools.extract.parse_args", "home.repos.pwc.inspect_result.wanggrun_triplet.svm_tools.aggregate_low_shot_svm_stats.aggregate_stats"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Low shot SVM model test'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--output_path'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Numpy file containing test AP result files\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--k_values'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Low-shot k-values for svm testing. Comma separated\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--sample_inds'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"sample_inds for which to test svm. Comma separated\"", ")", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "1", ":", "\n", "        ", "parser", ".", "print_help", "(", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "opts", "=", "parser", ".", "parse_args", "(", ")", "\n", "#logger.info(opts)", "\n", "aggregate_stats", "(", "opts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.tools.publish_model.parse_args": [[5, 11], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.tools.extract.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'Process a checkpoint to be published'", ")", "\n", "parser", ".", "add_argument", "(", "'in_file'", ",", "help", "=", "'input checkpoint filename'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.tools.publish_model.process_checkpoint": [[13, 25], ["subprocess.Popen", "subprocess.check_output().decode", "out_file.endswith", "print", "subprocess.Popen", "subprocess.check_output"], "function", ["None"], ["", "def", "process_checkpoint", "(", "in_file", ")", ":", "\n", "    ", "tmp_file", "=", "in_file", "+", "\".tmp\"", "\n", "subprocess", ".", "Popen", "(", "[", "'cp'", ",", "in_file", ",", "tmp_file", "]", ")", "\n", "sha", "=", "subprocess", ".", "check_output", "(", "[", "'sha256sum'", ",", "tmp_file", "]", ")", ".", "decode", "(", ")", "\n", "out_file", "=", "in_file", "\n", "if", "out_file", ".", "endswith", "(", "'.pth'", ")", ":", "\n", "        ", "out_file", "=", "out_file", "[", ":", "-", "4", "]", "\n", "", "final_file", "=", "out_file", "+", "f'-{sha[:8]}.pth'", "\n", "assert", "final_file", "!=", "in_file", ",", "\"The output filename is the same as the input file.\"", "\n", "print", "(", "\"Output file: {}\"", ".", "format", "(", "final_file", ")", ")", "\n", "subprocess", ".", "Popen", "(", "[", "'mv'", ",", "tmp_file", ",", "final_file", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.tools.publish_model.main": [[27, 30], ["publish_model.parse_args", "publish_model.process_checkpoint"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.tools.extract.parse_args", "home.repos.pwc.inspect_result.wanggrun_triplet.tools.publish_model.process_checkpoint"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "process_checkpoint", "(", "args", ".", "in_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.tools.extract_backbone_weights.parse_args": [[5, 13], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.tools.extract.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'This script extracts backbone weights from a checkpoint'", ")", "\n", "parser", ".", "add_argument", "(", "'checkpoint'", ",", "help", "=", "'checkpoint file'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'output'", ",", "type", "=", "str", ",", "help", "=", "'destination file name'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.tools.extract_backbone_weights.main": [[15, 33], ["extract_backbone_weights.parse_args", "parse_args.output.endswith", "torch.load", "dict", "ck[].items", "torch.save", "key.startswith", "Exception", "torch.device", "dict"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.tools.extract.parse_args"], ["", "def", "main", "(", ")", ":", "\n", "# base_path = tracking.get_data_paths()['ceph'] + '/'", "\n", "# output_dir = tracking.get_outputs_path()", "\n", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "# args.checkpoint = base_path + args.checkpoint", "\n", "# args.output = output_dir + args.output", "\n", "assert", "args", ".", "output", ".", "endswith", "(", "\".pth\"", ")", "\n", "ck", "=", "torch", ".", "load", "(", "args", ".", "checkpoint", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "output_dict", "=", "dict", "(", "state_dict", "=", "dict", "(", ")", ",", "author", "=", "\"OpenSelfSup\"", ")", "\n", "has_backbone", "=", "False", "\n", "for", "key", ",", "value", "in", "ck", "[", "'state_dict'", "]", ".", "items", "(", ")", ":", "\n", "        ", "if", "key", ".", "startswith", "(", "'backbone'", ")", ":", "\n", "            ", "output_dict", "[", "'state_dict'", "]", "[", "key", "[", "9", ":", "]", "]", "=", "value", "\n", "has_backbone", "=", "True", "\n", "", "", "if", "not", "has_backbone", ":", "\n", "        ", "raise", "Exception", "(", "\"Cannot find a backbone module in the checkpoint.\"", ")", "\n", "", "torch", ".", "save", "(", "output_dict", ",", "args", ".", "output", ",", "_use_new_zipfile_serialization", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.tools.count_parameters.parse_args": [[7, 12], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.tools.extract.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a model'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'train config file path'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.tools.count_parameters.main": [[14, 35], ["count_parameters.parse_args", "mmcv.Config.fromfile", "openselfsup.models.build_model", "print", "print", "print", "print", "sum", "sum", "sum", "sum", "p.numel", "p.numel", "p.numel", "p.numel", "openselfsup.models.build_model.parameters", "openselfsup.models.build_model.parameters", "openselfsup.models.build_model.backbone.parameters", "openselfsup.models.build_model.backbone.parameters"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.tools.extract.parse_args", "home.repos.pwc.inspect_result.wanggrun_triplet.models.builder.build_model"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "cfg", "=", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "\n", "model", "=", "build_model", "(", "cfg", ".", "model", ")", "\n", "\n", "num_params", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", ")", "/", "1000000.", "\n", "num_grad_params", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "/", "1000000.", "\n", "num_backbone_params", "=", "sum", "(", "\n", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "backbone", ".", "parameters", "(", ")", ")", "/", "1000000.", "\n", "num_backbone_grad_params", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "backbone", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "/", "1000000.", "\n", "print", "(", "\n", "\"Number of backbone parameters: {:.5g} M\"", ".", "format", "(", "num_backbone_params", ")", ")", "\n", "print", "(", "\"Number of backbone parameters requiring grad: {:.5g} M\"", ".", "format", "(", "\n", "num_backbone_grad_params", ")", ")", "\n", "print", "(", "\"Number of total parameters: {:.5g} M\"", ".", "format", "(", "num_params", ")", ")", "\n", "print", "(", "\"Number of total parameters requiring grad: {:.5g} M\"", ".", "format", "(", "\n", "num_grad_params", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.tools.train.parse_args": [[20, 56], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.tools.extract.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a model'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'train config file path'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--work_dir'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'the dir to save logs and models'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--resume_from'", ",", "help", "=", "'the checkpoint file to resume from'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--pretrained'", ",", "default", "=", "None", ",", "help", "=", "'pretrained model file'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--gpus'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ",", "\n", "help", "=", "'number of gpus to use '", "\n", "'(only applicable to non-distributed training)'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "help", "=", "'random seed'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--deterministic'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to set deterministic options for CUDNN backend.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--launcher'", ",", "\n", "choices", "=", "[", "'none'", ",", "'pytorch'", ",", "'slurm'", ",", "'mpi'", "]", ",", "\n", "default", "=", "'none'", ",", "\n", "help", "=", "'job launcher'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--port'", ",", "type", "=", "int", ",", "default", "=", "29500", ",", "\n", "help", "=", "'port only works when launcher==\"slurm\"'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "'LOCAL_RANK'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", "=", "str", "(", "args", ".", "local_rank", ")", "\n", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.tools.train.main": [[58, 139], ["train.parse_args", "mmcv.Config.fromfile", "Config.fromfile.get", "mmcv.mkdir_or_exist", "time.strftime", "os.join", "openselfsup.utils.get_root_logger", "dict", "openselfsup.utils.collect_env", "openselfsup.utils.get_root_logger.info", "openselfsup.utils.get_root_logger.info", "openselfsup.utils.get_root_logger.info", "openselfsup.models.build_model", "openselfsup.apis.train_model", "importlib.util.find_spec", "openselfsup.utils.traverse_replace", "mmcv.runner.init_dist", "os.abspath", "time.localtime", "openselfsup.utils.get_root_logger.info", "openselfsup.apis.set_random_seed", "isinstance", "openselfsup.datasets.build_dataset", "len", "dict", "openselfsup.utils.collect_env.items"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.tools.extract.parse_args", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.logger.get_root_logger", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.collect_env.collect_env", "home.repos.pwc.inspect_result.wanggrun_triplet.models.builder.build_model", "home.repos.pwc.inspect_result.wanggrun_triplet.apis.train.train_model", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.config_tools.traverse_replace", "home.repos.pwc.inspect_result.wanggrun_triplet.apis.train.set_random_seed", "home.repos.pwc.inspect_result.wanggrun_triplet.datasets.builder.build_dataset"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "cfg", "=", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "# set cudnn_benchmark", "\n", "if", "cfg", ".", "get", "(", "'cudnn_benchmark'", ",", "False", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "# update configs according to CLI args", "\n", "", "if", "args", ".", "work_dir", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "work_dir", "=", "args", ".", "work_dir", "\n", "", "if", "args", ".", "resume_from", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "resume_from", "=", "args", ".", "resume_from", "\n", "", "cfg", ".", "gpus", "=", "args", ".", "gpus", "\n", "\n", "# check memcached package exists", "\n", "if", "importlib", ".", "util", ".", "find_spec", "(", "'mc'", ")", "is", "None", ":", "\n", "        ", "traverse_replace", "(", "cfg", ",", "'memcached'", ",", "False", ")", "\n", "\n", "# init distributed env first, since logger depends on the dist info.", "\n", "", "if", "args", ".", "launcher", "==", "'none'", ":", "\n", "        ", "distributed", "=", "False", "\n", "assert", "cfg", ".", "model", ".", "type", "not", "in", "[", "'DeepCluster'", ",", "'MOCO'", ",", "'SimCLR'", ",", "'ODC'", ",", "'NPID'", "]", ",", "\"{} does not support non-dist training.\"", ".", "format", "(", "cfg", ".", "model", ".", "type", ")", "\n", "", "else", ":", "\n", "        ", "distributed", "=", "True", "\n", "if", "args", ".", "launcher", "==", "'slurm'", ":", "\n", "            ", "cfg", ".", "dist_params", "[", "'port'", "]", "=", "args", ".", "port", "\n", "", "init_dist", "(", "args", ".", "launcher", ",", "**", "cfg", ".", "dist_params", ")", "\n", "\n", "# create work_dir", "\n", "", "mmcv", ".", "mkdir_or_exist", "(", "osp", ".", "abspath", "(", "cfg", ".", "work_dir", ")", ")", "\n", "# init the logger before other steps", "\n", "timestamp", "=", "time", ".", "strftime", "(", "'%Y%m%d_%H%M%S'", ",", "time", ".", "localtime", "(", ")", ")", "\n", "log_file", "=", "osp", ".", "join", "(", "cfg", ".", "work_dir", ",", "'train_{}.log'", ".", "format", "(", "timestamp", ")", ")", "\n", "logger", "=", "get_root_logger", "(", "log_file", "=", "log_file", ",", "log_level", "=", "cfg", ".", "log_level", ")", "\n", "\n", "# init the meta dict to record some important information such as", "\n", "# environment info and seed, which will be logged", "\n", "meta", "=", "dict", "(", ")", "\n", "# log env info", "\n", "env_info_dict", "=", "collect_env", "(", ")", "\n", "env_info", "=", "'\\n'", ".", "join", "(", "[", "(", "'{}: {}'", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "for", "k", ",", "v", "in", "env_info_dict", ".", "items", "(", ")", "]", ")", "\n", "dash_line", "=", "'-'", "*", "60", "+", "'\\n'", "\n", "logger", ".", "info", "(", "'Environment info:\\n'", "+", "dash_line", "+", "env_info", "+", "'\\n'", "+", "\n", "dash_line", ")", "\n", "meta", "[", "'env_info'", "]", "=", "env_info", "\n", "\n", "# log some basic info", "\n", "logger", ".", "info", "(", "'Distributed training: {}'", ".", "format", "(", "distributed", ")", ")", "\n", "logger", ".", "info", "(", "'Config:\\n{}'", ".", "format", "(", "cfg", ".", "text", ")", ")", "\n", "\n", "# set random seeds", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "logger", ".", "info", "(", "'Set random seed to {}, deterministic: {}'", ".", "format", "(", "\n", "args", ".", "seed", ",", "args", ".", "deterministic", ")", ")", "\n", "set_random_seed", "(", "args", ".", "seed", ",", "deterministic", "=", "args", ".", "deterministic", ")", "\n", "", "cfg", ".", "seed", "=", "args", ".", "seed", "\n", "meta", "[", "'seed'", "]", "=", "args", ".", "seed", "\n", "\n", "if", "args", ".", "pretrained", "is", "not", "None", ":", "\n", "        ", "assert", "isinstance", "(", "args", ".", "pretrained", ",", "str", ")", "\n", "cfg", ".", "model", ".", "pretrained", "=", "args", ".", "pretrained", "\n", "", "model", "=", "build_model", "(", "cfg", ".", "model", ")", "\n", "\n", "datasets", "=", "[", "build_dataset", "(", "cfg", ".", "data", ".", "train", ")", "]", "\n", "assert", "len", "(", "cfg", ".", "workflow", ")", "==", "1", ",", "\"Validation is called by hook.\"", "\n", "if", "cfg", ".", "checkpoint_config", "is", "not", "None", ":", "\n", "# save openselfsup version, config file content and class names in", "\n", "# checkpoints as meta data", "\n", "        ", "cfg", ".", "checkpoint_config", ".", "meta", "=", "dict", "(", "\n", "openselfsup_version", "=", "__version__", ",", "config", "=", "cfg", ".", "text", ")", "\n", "# add an attribute for visualization convenience", "\n", "", "train_model", "(", "\n", "model", ",", "\n", "datasets", ",", "\n", "cfg", ",", "\n", "distributed", "=", "distributed", ",", "\n", "timestamp", "=", "timestamp", ",", "\n", "meta", "=", "meta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.tools.test.single_gpu_test": [[18, 24], ["model.eval", "openselfsup.utils.nondist_forward_collect", "model", "len"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.utils.collect.nondist_forward_collect"], ["def", "single_gpu_test", "(", "model", ",", "data_loader", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "func", "=", "lambda", "**", "x", ":", "model", "(", "mode", "=", "'test'", ",", "**", "x", ")", "\n", "results", "=", "nondist_forward_collect", "(", "func", ",", "data_loader", ",", "\n", "len", "(", "data_loader", ".", "dataset", ")", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.tools.test.multi_gpu_test": [[26, 33], ["model.eval", "mmcv.runner.get_dist_info", "openselfsup.utils.dist_forward_collect", "model", "len"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.utils.collect.dist_forward_collect"], ["", "def", "multi_gpu_test", "(", "model", ",", "data_loader", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "func", "=", "lambda", "**", "x", ":", "model", "(", "mode", "=", "'test'", ",", "**", "x", ")", "\n", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "results", "=", "dist_forward_collect", "(", "func", ",", "data_loader", ",", "rank", ",", "\n", "len", "(", "data_loader", ".", "dataset", ")", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.tools.test.parse_args": [[35, 58], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.tools.extract.parse_args"], ["", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'MMDet test (and eval) a model'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'test config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'checkpoint'", ",", "help", "=", "'checkpoint file'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--work_dir'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'the dir to save logs and models'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--launcher'", ",", "\n", "choices", "=", "[", "'none'", ",", "'pytorch'", ",", "'slurm'", ",", "'mpi'", "]", ",", "\n", "default", "=", "'none'", ",", "\n", "help", "=", "'job launcher'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--port'", ",", "type", "=", "int", ",", "default", "=", "29500", ",", "\n", "help", "=", "'port only works when launcher==\"slurm\"'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "'LOCAL_RANK'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", "=", "str", "(", "args", ".", "local_rank", ")", "\n", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.tools.test.main": [[60, 119], ["test.parse_args", "mmcv.Config.fromfile", "mmcv.Config.fromfile.get", "time.strftime", "os.join", "openselfsup.utils.get_root_logger", "openselfsup.datasets.build_dataset", "openselfsup.datasets.build_dataloader", "openselfsup.models.build_model", "mmcv.runner.load_checkpoint", "mmcv.runner.get_dist_info", "importlib.util.find_spec", "openselfsup.utils.traverse_replace", "mmcv.runner.init_dist", "time.localtime", "mmcv.parallel.MMDataParallel", "test.single_gpu_test", "mmcv.parallel.MMDistributedDataParallel", "test.multi_gpu_test", "multi_gpu_test.items", "mmcv.parallel.MMDistributedDataParallel.cuda", "openselfsup.datasets.build_dataset.evaluate", "torch.from_numpy", "torch.cuda.current_device"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.tools.extract.parse_args", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.logger.get_root_logger", "home.repos.pwc.inspect_result.wanggrun_triplet.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.wanggrun_triplet.loader.build_loader.build_dataloader", "home.repos.pwc.inspect_result.wanggrun_triplet.models.builder.build_model", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.config_tools.traverse_replace", "home.repos.pwc.inspect_result.wanggrun_triplet.tools.test.single_gpu_test", "home.repos.pwc.inspect_result.wanggrun_triplet.tools.test.multi_gpu_test", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.wanggrun_triplet.datasets.extraction.ExtractDataset.evaluate"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "cfg", "=", "mmcv", ".", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "# set cudnn_benchmark", "\n", "if", "cfg", ".", "get", "(", "'cudnn_benchmark'", ",", "False", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "# update configs according to CLI args", "\n", "", "if", "args", ".", "work_dir", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "work_dir", "=", "args", ".", "work_dir", "\n", "\n", "", "cfg", ".", "model", ".", "pretrained", "=", "None", "# ensure to use checkpoint rather than pretraining", "\n", "\n", "# check memcached package exists", "\n", "if", "importlib", ".", "util", ".", "find_spec", "(", "'mc'", ")", "is", "None", ":", "\n", "        ", "traverse_replace", "(", "cfg", ",", "'memcached'", ",", "False", ")", "\n", "\n", "# init distributed env first, since logger depends on the dist info.", "\n", "", "if", "args", ".", "launcher", "==", "'none'", ":", "\n", "        ", "distributed", "=", "False", "\n", "", "else", ":", "\n", "        ", "distributed", "=", "True", "\n", "if", "args", ".", "launcher", "==", "'slurm'", ":", "\n", "            ", "cfg", ".", "dist_params", "[", "'port'", "]", "=", "args", ".", "port", "\n", "", "init_dist", "(", "args", ".", "launcher", ",", "**", "cfg", ".", "dist_params", ")", "\n", "\n", "# logger", "\n", "", "timestamp", "=", "time", ".", "strftime", "(", "'%Y%m%d_%H%M%S'", ",", "time", ".", "localtime", "(", ")", ")", "\n", "log_file", "=", "osp", ".", "join", "(", "cfg", ".", "work_dir", ",", "'test_{}.log'", ".", "format", "(", "timestamp", ")", ")", "\n", "logger", "=", "get_root_logger", "(", "log_file", "=", "log_file", ",", "log_level", "=", "cfg", ".", "log_level", ")", "\n", "\n", "# build the dataloader", "\n", "dataset", "=", "build_dataset", "(", "cfg", ".", "data", ".", "val", ")", "\n", "data_loader", "=", "build_dataloader", "(", "\n", "dataset", ",", "\n", "imgs_per_gpu", "=", "cfg", ".", "data", ".", "imgs_per_gpu", ",", "\n", "workers_per_gpu", "=", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "dist", "=", "distributed", ",", "\n", "shuffle", "=", "False", ")", "\n", "\n", "# build the model and load checkpoint", "\n", "model", "=", "build_model", "(", "cfg", ".", "model", ")", "\n", "load_checkpoint", "(", "model", ",", "args", ".", "checkpoint", ",", "map_location", "=", "'cpu'", ")", "\n", "\n", "if", "not", "distributed", ":", "\n", "        ", "model", "=", "MMDataParallel", "(", "model", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "outputs", "=", "single_gpu_test", "(", "model", ",", "data_loader", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "MMDistributedDataParallel", "(", "\n", "model", ".", "cuda", "(", ")", ",", "\n", "device_ids", "=", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ",", "\n", "broadcast_buffers", "=", "False", ")", "\n", "outputs", "=", "multi_gpu_test", "(", "model", ",", "data_loader", ")", "# dict{key: np.ndarray}", "\n", "\n", "", "rank", ",", "_", "=", "get_dist_info", "(", ")", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "for", "name", ",", "val", "in", "outputs", ".", "items", "(", ")", ":", "\n", "            ", "dataset", ".", "evaluate", "(", "\n", "torch", ".", "from_numpy", "(", "val", ")", ",", "name", ",", "logger", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.tools.upgrade_models.parse_args": [[5, 12], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.tools.extract.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'checkpoint'", ",", "help", "=", "'checkpoint file'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--save-path'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "'destination file name'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.tools.upgrade_models.main": [[14, 24], ["upgrade_models.parse_args", "torch.load", "dict", "torch.load.items", "torch.save", "key.startswith", "torch.device", "dict"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.tools.extract.parse_args"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "ck", "=", "torch", ".", "load", "(", "args", ".", "checkpoint", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "output_dict", "=", "dict", "(", "state_dict", "=", "dict", "(", ")", ",", "author", "=", "'OpenSelfSup'", ")", "\n", "for", "key", ",", "value", "in", "ck", ".", "items", "(", ")", ":", "\n", "        ", "if", "key", ".", "startswith", "(", "'head'", ")", ":", "\n", "            ", "continue", "\n", "", "else", ":", "\n", "            ", "output_dict", "[", "'state_dict'", "]", "[", "key", "]", "=", "value", "\n", "", "", "torch", ".", "save", "(", "output_dict", ",", "args", ".", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.tools.extract.ExtractProcess.__init__": [[22, 28], ["extract.ExtractProcess.models.utils.MultiPooling"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "pool_type", "=", "'specified'", ",", "\n", "backbone", "=", "'resnet50'", ",", "\n", "layer_indices", "=", "(", "0", ",", "1", ",", "2", ",", "3", ",", "4", ")", ")", ":", "\n", "        ", "self", ".", "multi_pooling", "=", "MultiPooling", "(", "\n", "pool_type", ",", "in_indices", "=", "layer_indices", ",", "backbone", "=", "backbone", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.tools.extract.ExtractProcess._forward_func": [[29, 36], ["model", "extract.ExtractProcess.multi_pooling", "xx.view", "feat.cpu", "xx.size", "enumerate"], "methods", ["None"], ["", "def", "_forward_func", "(", "self", ",", "model", ",", "**", "x", ")", ":", "\n", "        ", "backbone_feats", "=", "model", "(", "mode", "=", "'extract'", ",", "**", "x", ")", "\n", "pooling_feats", "=", "self", ".", "multi_pooling", "(", "backbone_feats", ")", "\n", "flat_feats", "=", "[", "xx", ".", "view", "(", "xx", ".", "size", "(", "0", ")", ",", "-", "1", ")", "for", "xx", "in", "pooling_feats", "]", "\n", "feat_dict", "=", "{", "'feat{}'", ".", "format", "(", "i", "+", "1", ")", ":", "feat", ".", "cpu", "(", ")", "for", "i", ",", "feat", "in", "enumerate", "(", "flat_feats", ")", "}", "\n", "return", "feat_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.tools.extract.ExtractProcess.extract": [[37, 48], ["model.eval", "extract.ExtractProcess._forward_func", "mmcv.runner.get_dist_info", "extract.ExtractProcess.utils.dist_forward_collect", "extract.ExtractProcess.utils.nondist_forward_collect", "len", "len"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.hooks.extractor.Extractor._forward_func", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.collect.dist_forward_collect", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.collect.nondist_forward_collect"], ["", "def", "extract", "(", "self", ",", "model", ",", "data_loader", ",", "distributed", "=", "False", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "func", "=", "lambda", "**", "x", ":", "self", ".", "_forward_func", "(", "model", ",", "**", "x", ")", "\n", "if", "distributed", ":", "\n", "            ", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "results", "=", "dist_forward_collect", "(", "func", ",", "data_loader", ",", "rank", ",", "\n", "len", "(", "data_loader", ".", "dataset", ")", ")", "\n", "", "else", ":", "\n", "            ", "results", "=", "nondist_forward_collect", "(", "func", ",", "data_loader", ",", "\n", "len", "(", "data_loader", ".", "dataset", ")", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.tools.extract.parse_args": [[50, 83], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.tools.extract.parse_args"], ["", "", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'OpenSelfSup extract features of a model'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'test config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint'", ",", "default", "=", "None", ",", "help", "=", "'checkpoint file'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--pretrained'", ",", "default", "=", "'random'", ",", "\n", "help", "=", "'pretrained model file, exclusive to --checkpoint'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--dataset-config'", ",", "\n", "default", "=", "'benchmarks/extract_info/voc07.py'", ",", "\n", "help", "=", "'extract dataset config file path'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--layer-ind'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'layer indices, separated by comma, e.g., \"0,1,2,3,4\"'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--work_dir'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'the dir to save logs and models'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--launcher'", ",", "\n", "choices", "=", "[", "'none'", ",", "'pytorch'", ",", "'slurm'", ",", "'mpi'", "]", ",", "\n", "default", "=", "'none'", ",", "\n", "help", "=", "'job launcher'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--port'", ",", "type", "=", "int", ",", "default", "=", "29500", ",", "\n", "help", "=", "'port only works when launcher==\"slurm\"'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "'LOCAL_RANK'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", "=", "str", "(", "args", ".", "local_rank", ")", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.tools.extract.main": [[85, 179], ["extract.parse_args", "mmcv.Config.fromfile", "mmcv.Config.fromfile.get", "mmcv.mkdir_or_exist", "time.strftime", "os.join", "openselfsup.utils.get_root_logger", "mmcv.Config.fromfile", "openselfsup.datasets.build_dataset", "openselfsup.datasets.build_dataloader", "openselfsup.models.build_model", "extract.ExtractProcess", "ExtractProcess.extract", "mmcv.runner.get_dist_info", "mmcv.mkdir_or_exist", "int", "importlib.util.find_spec", "mmcv.runner.init_dist", "os.abspath", "time.localtime", "isinstance", "openselfsup.utils.get_root_logger.info", "mmcv.runner.load_checkpoint", "mmcv.parallel.MMDataParallel", "mmcv.parallel.MMDistributedDataParallel", "extractor.extract.items", "parse_args.layer_ind.split", "hasattr", "openselfsup.utils.get_root_logger.info", "openselfsup.utils.get_root_logger.info", "mmcv.parallel.MMDistributedDataParallel.cuda", "len", "range", "torch.cuda.current_device", "numpy.save", "getattr", "numpy.save", "numpy.save"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.tools.extract.parse_args", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.logger.get_root_logger", "home.repos.pwc.inspect_result.wanggrun_triplet.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.wanggrun_triplet.loader.build_loader.build_dataloader", "home.repos.pwc.inspect_result.wanggrun_triplet.models.builder.build_model", "home.repos.pwc.inspect_result.wanggrun_triplet.tools.extract.ExtractProcess.extract", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "cfg", "=", "mmcv", ".", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "# set cudnn_benchmark", "\n", "if", "cfg", ".", "get", "(", "'cudnn_benchmark'", ",", "False", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "# update configs according to CLI args", "\n", "", "if", "args", ".", "work_dir", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "work_dir", "=", "args", ".", "work_dir", "\n", "", "layer_ind", "=", "[", "int", "(", "idx", ")", "for", "idx", "in", "args", ".", "layer_ind", ".", "split", "(", "','", ")", "]", "\n", "cfg", ".", "model", ".", "backbone", ".", "out_indices", "=", "layer_ind", "\n", "\n", "# checkpoint and pretrained are exclusive", "\n", "assert", "args", ".", "pretrained", "==", "\"random\"", "or", "args", ".", "checkpoint", "is", "None", ",", "\"Checkpoint and pretrained are exclusive.\"", "\n", "\n", "# check memcached package exists", "\n", "if", "importlib", ".", "util", ".", "find_spec", "(", "'mc'", ")", "is", "None", ":", "\n", "        ", "for", "field", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", ":", "\n", "            ", "if", "hasattr", "(", "cfg", ".", "data", ",", "field", ")", ":", "\n", "                ", "getattr", "(", "cfg", ".", "data", ",", "field", ")", ".", "data_source", ".", "memcached", "=", "False", "\n", "\n", "# init distributed env first, since logger depends on the dist info.", "\n", "", "", "", "if", "args", ".", "launcher", "==", "'none'", ":", "\n", "        ", "distributed", "=", "False", "\n", "", "else", ":", "\n", "        ", "distributed", "=", "True", "\n", "if", "args", ".", "launcher", "==", "'slurm'", ":", "\n", "            ", "cfg", ".", "dist_params", "[", "'port'", "]", "=", "args", ".", "port", "\n", "", "init_dist", "(", "args", ".", "launcher", ",", "**", "cfg", ".", "dist_params", ")", "\n", "\n", "# create work_dir", "\n", "", "mmcv", ".", "mkdir_or_exist", "(", "osp", ".", "abspath", "(", "cfg", ".", "work_dir", ")", ")", "\n", "# logger", "\n", "timestamp", "=", "time", ".", "strftime", "(", "'%Y%m%d_%H%M%S'", ",", "time", ".", "localtime", "(", ")", ")", "\n", "log_file", "=", "osp", ".", "join", "(", "cfg", ".", "work_dir", ",", "'extract_{}.log'", ".", "format", "(", "timestamp", ")", ")", "\n", "logger", "=", "get_root_logger", "(", "log_file", "=", "log_file", ",", "log_level", "=", "cfg", ".", "log_level", ")", "\n", "\n", "# build the dataloader", "\n", "dataset_cfg", "=", "mmcv", ".", "Config", ".", "fromfile", "(", "args", ".", "dataset_config", ")", "\n", "dataset", "=", "build_dataset", "(", "dataset_cfg", ".", "data", ".", "extract", ")", "\n", "data_loader", "=", "build_dataloader", "(", "\n", "dataset", ",", "\n", "imgs_per_gpu", "=", "dataset_cfg", ".", "data", ".", "imgs_per_gpu", ",", "\n", "workers_per_gpu", "=", "dataset_cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "dist", "=", "distributed", ",", "\n", "shuffle", "=", "False", ")", "\n", "\n", "# specify pretrained model", "\n", "if", "args", ".", "pretrained", "!=", "'random'", ":", "\n", "        ", "assert", "isinstance", "(", "args", ".", "pretrained", ",", "str", ")", "\n", "cfg", ".", "model", ".", "pretrained", "=", "args", ".", "pretrained", "\n", "\n", "# build the model and load checkpoint", "\n", "", "model", "=", "build_model", "(", "cfg", ".", "model", ")", "\n", "if", "args", ".", "checkpoint", "is", "not", "None", ":", "\n", "        ", "logger", ".", "info", "(", "\"Use checkpoint: {} to extract features\"", ".", "format", "(", "\n", "args", ".", "checkpoint", ")", ")", "\n", "load_checkpoint", "(", "model", ",", "args", ".", "checkpoint", ",", "map_location", "=", "'cpu'", ")", "\n", "", "elif", "args", ".", "pretrained", "!=", "\"random\"", ":", "\n", "        ", "logger", ".", "info", "(", "'Use pretrained model: {} to extract features'", ".", "format", "(", "\n", "args", ".", "pretrained", ")", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "info", "(", "'No checkpoint or pretrained is give, use random init.'", ")", "\n", "\n", "", "if", "not", "distributed", ":", "\n", "        ", "model", "=", "MMDataParallel", "(", "model", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "MMDistributedDataParallel", "(", "\n", "model", ".", "cuda", "(", ")", ",", "\n", "device_ids", "=", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ",", "\n", "broadcast_buffers", "=", "False", ")", "\n", "\n", "# build extraction processor", "\n", "", "extractor", "=", "ExtractProcess", "(", "\n", "pool_type", "=", "'specified'", ",", "backbone", "=", "'resnet50'", ",", "layer_indices", "=", "layer_ind", ")", "\n", "\n", "# run", "\n", "outputs", "=", "extractor", ".", "extract", "(", "model", ",", "data_loader", ",", "distributed", "=", "distributed", ")", "\n", "rank", ",", "_", "=", "get_dist_info", "(", ")", "\n", "mmcv", ".", "mkdir_or_exist", "(", "\"{}/features/\"", ".", "format", "(", "args", ".", "work_dir", ")", ")", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "for", "key", ",", "val", "in", "outputs", ".", "items", "(", ")", ":", "\n", "            ", "split_num", "=", "len", "(", "dataset_cfg", ".", "split_name", ")", "\n", "split_at", "=", "dataset_cfg", ".", "split_at", "\n", "for", "ss", "in", "range", "(", "split_num", ")", ":", "\n", "                ", "output_file", "=", "\"{}/features/{}_{}.npy\"", ".", "format", "(", "\n", "args", ".", "work_dir", ",", "dataset_cfg", ".", "split_name", "[", "ss", "]", ",", "key", ")", "\n", "if", "ss", "==", "0", ":", "\n", "                    ", "np", ".", "save", "(", "output_file", ",", "val", "[", ":", "split_at", "[", "0", "]", "]", ")", "\n", "", "elif", "ss", "==", "split_num", "-", "1", ":", "\n", "                    ", "np", ".", "save", "(", "output_file", ",", "val", "[", "split_at", "[", "-", "1", "]", ":", "]", ")", "\n", "", "else", ":", "\n", "                    ", "np", ".", "save", "(", "output_file", ",", "val", "[", "split_at", "[", "ss", "-", "1", "]", ":", "split_at", "[", "ss", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.prepare_data.create_voc_low_shot_challenge_samples.load_json": [[30, 45], ["os.path.exists", "sorted", "sorted", "range", "open", "json.load", "list", "list", "numpy.empty", "numpy.empty", "len", "range", "json.load.keys", "data[].keys", "len", "len", "len", "len", "len"], "function", ["None"], ["def", "load_json", "(", "file_path", ",", "ground_truth", "=", "True", ")", ":", "\n", "    ", "import", "json", "\n", "assert", "os", ".", "path", ".", "exists", "(", "file_path", ")", ",", "\"{} does not exist\"", ".", "format", "(", "file_path", ")", "\n", "with", "open", "(", "file_path", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "fp", ")", "\n", "", "img_ids", "=", "sorted", "(", "list", "(", "data", ".", "keys", "(", ")", ")", ")", "\n", "cls_names", "=", "sorted", "(", "list", "(", "data", "[", "img_ids", "[", "0", "]", "]", ".", "keys", "(", ")", ")", ")", "\n", "if", "ground_truth", ":", "\n", "        ", "output", "=", "np", ".", "empty", "(", "(", "len", "(", "img_ids", ")", ",", "len", "(", "cls_names", ")", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "", "else", ":", "\n", "        ", "output", "=", "np", ".", "empty", "(", "(", "len", "(", "img_ids", ")", ",", "len", "(", "cls_names", ")", ")", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "", "for", "idx", "in", "range", "(", "len", "(", "img_ids", ")", ")", ":", "\n", "        ", "for", "cls_idx", "in", "range", "(", "len", "(", "cls_names", ")", ")", ":", "\n", "            ", "output", "[", "idx", "]", "[", "cls_idx", "]", "=", "data", "[", "img_ids", "[", "idx", "]", "]", "[", "cls_names", "[", "cls_idx", "]", "]", "\n", "", "", "return", "output", ",", "img_ids", ",", "cls_names", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.prepare_data.create_voc_low_shot_challenge_samples.save_json": [[47, 59], ["range", "logger.info", "len", "range", "open", "json.dump", "len", "int"], "function", ["None"], ["", "def", "save_json", "(", "input_data", ",", "img_ids", ",", "cls_names", ",", "output_file", ")", ":", "\n", "    ", "output_dict", "=", "{", "}", "\n", "for", "img_idx", "in", "range", "(", "len", "(", "img_ids", ")", ")", ":", "\n", "        ", "img_id", "=", "img_ids", "[", "img_idx", "]", "\n", "out_lbl", "=", "{", "}", "\n", "for", "cls_idx", "in", "range", "(", "len", "(", "cls_names", ")", ")", ":", "\n", "            ", "name", "=", "cls_names", "[", "cls_idx", "]", "\n", "out_lbl", "[", "name", "]", "=", "int", "(", "input_data", "[", "img_idx", "]", "[", "cls_idx", "]", ")", "\n", "", "output_dict", "[", "img_id", "]", "=", "out_lbl", "\n", "", "logger", ".", "info", "(", "'Saving file: {}'", ".", "format", "(", "output_file", ")", ")", "\n", "with", "open", "(", "output_file", ",", "'w'", ")", "as", "fp", ":", "\n", "        ", "json", ".", "dump", "(", "output_dict", ",", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.prepare_data.create_voc_low_shot_challenge_samples.sample_symbol": [[61, 70], ["logger.info", "range", "random.sample", "numpy.where", "list"], "function", ["None"], ["", "", "def", "sample_symbol", "(", "input_targets", ",", "output_target", ",", "symbol", ",", "num", ")", ":", "\n", "    ", "logger", ".", "info", "(", "'Sampling symbol: {} for num: {}'", ".", "format", "(", "symbol", ",", "num", ")", ")", "\n", "num_classes", "=", "input_targets", ".", "shape", "[", "1", "]", "\n", "for", "idx", "in", "range", "(", "num_classes", ")", ":", "\n", "        ", "symbol_data", "=", "np", ".", "where", "(", "input_targets", "[", ":", ",", "idx", "]", "==", "symbol", ")", "[", "0", "]", "\n", "sampled", "=", "random", ".", "sample", "(", "list", "(", "symbol_data", ")", ",", "num", ")", "\n", "for", "index", "in", "sampled", ":", "\n", "            ", "output_target", "[", "index", ",", "idx", "]", "=", "symbol", "\n", "", "", "return", "output_target", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.prepare_data.create_voc_low_shot_challenge_samples.generate_independent_sample": [[72, 97], ["range", "logger.info", "int", "opts.k_values.split", "logger.info", "create_voc_low_shot_challenge_samples.sample_symbol", "create_voc_low_shot_challenge_samples.sample_symbol", "os.path.join", "create_voc_low_shot_challenge_samples.save_json", "os.path.join", "logger.info", "numpy.save", "numpy.ones", "[].split", "opts.targets_data_file.split"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.prepare_data.create_voc_low_shot_challenge_samples.sample_symbol", "home.repos.pwc.inspect_result.wanggrun_triplet.prepare_data.create_voc_low_shot_challenge_samples.sample_symbol", "home.repos.pwc.inspect_result.wanggrun_triplet.prepare_data.create_voc_low_shot_challenge_samples.save_json"], ["", "def", "generate_independent_sample", "(", "opts", ",", "targets", ",", "img_ids", ",", "cls_names", ")", ":", "\n", "    ", "k_values", "=", "[", "int", "(", "val", ")", "for", "val", "in", "opts", ".", "k_values", ".", "split", "(", "\",\"", ")", "]", "\n", "# the way sample works is: for each independent sample, and a given k value", "\n", "# we create a matrix of the same shape as given targets file. We initialize", "\n", "# this matrix with -1 (ignore label). We then sample k positive and", "\n", "# (num_classes-1) * k negatives.", "\n", "# N x 20 shape", "\n", "num_classes", "=", "targets", ".", "shape", "[", "1", "]", "\n", "for", "idx", "in", "range", "(", "opts", ".", "num_samples", ")", ":", "\n", "        ", "for", "k", "in", "k_values", ":", "\n", "            ", "logger", ".", "info", "(", "'Sampling: {} time for k-value: {}'", ".", "format", "(", "idx", "+", "1", ",", "k", ")", ")", "\n", "output", "=", "np", ".", "ones", "(", "targets", ".", "shape", ",", "dtype", "=", "np", ".", "int32", ")", "*", "-", "1", "\n", "output", "=", "sample_symbol", "(", "targets", ",", "output", ",", "1", ",", "k", ")", "\n", "output", "=", "sample_symbol", "(", "targets", ",", "output", ",", "0", ",", "(", "num_classes", "-", "1", ")", "*", "k", ")", "\n", "prefix", "=", "opts", ".", "targets_data_file", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "output_file", "=", "os", ".", "path", ".", "join", "(", "\n", "opts", ".", "output_path", ",", "\n", "'{}_sample{}_k{}.json'", ".", "format", "(", "prefix", ",", "idx", "+", "1", ",", "k", ")", ")", "\n", "save_json", "(", "output", ",", "img_ids", ",", "cls_names", ",", "output_file", ")", "\n", "npy_output_file", "=", "os", ".", "path", ".", "join", "(", "\n", "opts", ".", "output_path", ",", "\n", "'{}_sample{}_k{}.npy'", ".", "format", "(", "prefix", ",", "idx", "+", "1", ",", "k", ")", ")", "\n", "logger", ".", "info", "(", "'Saving npy file: {}'", ".", "format", "(", "npy_output_file", ")", ")", "\n", "np", ".", "save", "(", "npy_output_file", ",", "output", ")", "\n", "", "", "logger", ".", "info", "(", "'Done!!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.prepare_data.create_voc_low_shot_challenge_samples.main": [[99, 128], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "create_voc_low_shot_challenge_samples.load_json", "create_voc_low_shot_challenge_samples.generate_independent_sample", "len", "argparse.ArgumentParser.print_help", "sys.exit"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.tools.extract.parse_args", "home.repos.pwc.inspect_result.wanggrun_triplet.prepare_data.create_voc_low_shot_challenge_samples.load_json", "home.repos.pwc.inspect_result.wanggrun_triplet.prepare_data.create_voc_low_shot_challenge_samples.generate_independent_sample"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'Sample Low shot data for VOC'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--targets_data_file'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Json file containing image labels\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--output_path'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"path where low-shot samples should be saved\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--k_values'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"1,2,4,8,16,32,64,96\"", ",", "\n", "help", "=", "\"Low-shot k-values for svm testing.\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--num_samples'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "5", ",", "\n", "help", "=", "\"Number of independent samples.\"", ")", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "1", ":", "\n", "        ", "parser", ".", "print_help", "(", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "opts", "=", "parser", ".", "parse_args", "(", ")", "\n", "targets", ",", "img_ids", ",", "cls_names", "=", "load_json", "(", "opts", ".", "targets_data_file", ")", "\n", "generate_independent_sample", "(", "opts", ",", "targets", ",", "img_ids", ",", "cls_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.prepare_data.create_voc_data_files.validate_files": [[32, 42], ["len", "output_files.append", "[].split", "item.split"], "function", ["None"], ["def", "validate_files", "(", "input_files", ")", ":", "\n", "    ", "\"\"\"\n    The valid files will have name: <class_name>_<split>.txt. We want to remove\n    all the other files from the input.\n    \"\"\"", "\n", "output_files", "=", "[", "]", "\n", "for", "item", "in", "input_files", ":", "\n", "        ", "if", "len", "(", "item", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'_'", ")", ")", "==", "2", ":", "\n", "            ", "output_files", ".", "append", "(", "item", ")", "\n", "", "", "return", "output_files", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.prepare_data.create_voc_data_files.get_data_files": [[44, 73], ["os.path.join", "os.path.exists", "glob.glob", "create_voc_data_files.validate_files", "os.path.join", "glob.glob", "glob.glob", "create_voc_data_files.validate_files", "create_voc_data_files.validate_files", "glob.glob", "create_voc_data_files.validate_files", "create_voc_data_files.validate_files", "len", "len", "os.path.join", "os.path.join", "len", "len", "os.path.join", "len", "glob.glob", "glob.glob", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.prepare_data.create_voc_data_files.validate_files", "home.repos.pwc.inspect_result.wanggrun_triplet.prepare_data.create_voc_data_files.validate_files", "home.repos.pwc.inspect_result.wanggrun_triplet.prepare_data.create_voc_data_files.validate_files", "home.repos.pwc.inspect_result.wanggrun_triplet.prepare_data.create_voc_data_files.validate_files", "home.repos.pwc.inspect_result.wanggrun_triplet.prepare_data.create_voc_data_files.validate_files"], ["", "def", "get_data_files", "(", "split", ",", "args", ")", ":", "\n", "    ", "data_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_source_dir", ",", "'ImageSets/Main'", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "data_dir", ")", ",", "\"Data: {} doesn't exist\"", ".", "format", "(", "data_dir", ")", "\n", "test_data_files", "=", "glob", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'*_test.txt'", ")", ")", "\n", "test_data_files", "=", "validate_files", "(", "test_data_files", ")", "\n", "if", "args", ".", "separate_partitions", ">", "0", ":", "\n", "        ", "train_data_files", "=", "glob", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'*_train.txt'", ")", ")", "\n", "val_data_files", "=", "glob", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'*_val.txt'", ")", ")", "\n", "train_data_files", "=", "validate_files", "(", "train_data_files", ")", "\n", "val_data_files", "=", "validate_files", "(", "val_data_files", ")", "\n", "assert", "len", "(", "train_data_files", ")", "==", "len", "(", "val_data_files", ")", "\n", "if", "split", "==", "'train'", ":", "\n", "            ", "data_files", "=", "train_data_files", "\n", "", "elif", "split", "==", "'test'", ":", "\n", "            ", "data_files", "=", "test_data_files", "\n", "", "else", ":", "\n", "            ", "data_files", "=", "val_data_files", "\n", "", "", "else", ":", "\n", "        ", "train_data_files", "=", "glob", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'*_trainval.txt'", ")", ")", "\n", "if", "len", "(", "test_data_files", ")", "==", "0", ":", "\n", "# For VOC2012 dataset, we have trainval, val and train data.", "\n", "            ", "train_data_files", "=", "glob", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'*_train.txt'", ")", ")", "\n", "test_data_files", "=", "glob", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'*_val.txt'", ")", ")", "\n", "", "test_data_files", "=", "validate_files", "(", "test_data_files", ")", "\n", "train_data_files", "=", "validate_files", "(", "train_data_files", ")", "\n", "data_files", "=", "train_data_files", "if", "(", "split", "\n", "==", "'train'", ")", "else", "test_data_files", "\n", "", "assert", "len", "(", "train_data_files", ")", "==", "len", "(", "test_data_files", ")", ",", "\"Missing classes\"", "\n", "return", "data_files", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.prepare_data.create_voc_data_files.get_images_labels_info": [[75, 130], ["os.path.exists", "create_voc_data_files.get_data_files", "enumerate", "sorted", "sorted", "img_labels_map.keys", "img_paths.append", "img_labels.append", "sorted", "sorted", "range", "open", "os.path.join", "cls_names.append", "img_labels_map.keys", "img_ids.append", "json_img_labels.append", "len", "range", "[].split", "len", "int", "line.strip().split", "int", "logger.info", "line.strip", "numpy.ones", "[].split", "len", "item.split"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.prepare_data.create_voc_data_files.get_data_files"], ["", "def", "get_images_labels_info", "(", "split", ",", "args", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "exists", "(", "args", ".", "data_source_dir", ")", ",", "\"Data source NOT found. Abort\"", "\n", "\n", "data_files", "=", "get_data_files", "(", "split", ",", "args", ")", "\n", "# we will construct a map for image name to the vector of -1, 0, 1", "\n", "# we sort the data_files which gives sorted class names as well", "\n", "img_labels_map", "=", "{", "}", "\n", "for", "cls_num", ",", "data_path", "in", "enumerate", "(", "sorted", "(", "data_files", ")", ")", ":", "\n", "# for this class, we have images and each image will have label", "\n", "# 1, -1, 0 -> present, not present, ignore respectively as in VOC data.", "\n", "        ", "with", "open", "(", "data_path", ",", "'r'", ")", "as", "fopen", ":", "\n", "            ", "for", "line", "in", "fopen", ":", "\n", "                ", "try", ":", "\n", "                    ", "img_name", ",", "orig_label", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "if", "img_name", "not", "in", "img_labels_map", ":", "\n", "                        ", "img_labels_map", "[", "img_name", "]", "=", "-", "np", ".", "ones", "(", "\n", "len", "(", "data_files", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "", "orig_label", "=", "int", "(", "orig_label", ")", "\n", "# in VOC data, -1 (not present), set it to 0 as train target", "\n", "if", "orig_label", "==", "-", "1", ":", "\n", "                        ", "orig_label", "=", "0", "\n", "# in VOC data, 0 (ignore), set it to -1 as train target", "\n", "", "elif", "orig_label", "==", "0", ":", "\n", "                        ", "orig_label", "=", "-", "1", "\n", "", "img_labels_map", "[", "img_name", "]", "[", "cls_num", "]", "=", "orig_label", "\n", "", "except", "Exception", ":", "\n", "                    ", "logger", ".", "info", "(", "'Error processing: {} data_path: {}'", ".", "format", "(", "\n", "line", ",", "data_path", ")", ")", "\n", "\n", "", "", "", "", "img_paths", ",", "img_labels", "=", "[", "]", ",", "[", "]", "\n", "for", "item", "in", "sorted", "(", "img_labels_map", ".", "keys", "(", ")", ")", ":", "\n", "        ", "img_paths", ".", "append", "(", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "data_source_dir", ",", "'JPEGImages'", ",", "item", "+", "'.jpg'", ")", ")", "\n", "img_labels", ".", "append", "(", "img_labels_map", "[", "item", "]", ")", "\n", "\n", "", "output_dict", "=", "{", "}", "\n", "if", "args", ".", "generate_json", ":", "\n", "        ", "cls_names", "=", "[", "]", "\n", "for", "item", "in", "sorted", "(", "data_files", ")", ":", "\n", "            ", "name", "=", "item", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "cls_names", ".", "append", "(", "name", ")", "\n", "\n", "", "img_ids", ",", "json_img_labels", "=", "[", "]", ",", "[", "]", "\n", "for", "item", "in", "sorted", "(", "img_labels_map", ".", "keys", "(", ")", ")", ":", "\n", "            ", "img_ids", ".", "append", "(", "item", ")", "\n", "json_img_labels", ".", "append", "(", "img_labels_map", "[", "item", "]", ")", "\n", "\n", "", "for", "img_idx", "in", "range", "(", "len", "(", "img_ids", ")", ")", ":", "\n", "            ", "img_id", "=", "img_ids", "[", "img_idx", "]", "\n", "out_lbl", "=", "{", "}", "\n", "for", "cls_idx", "in", "range", "(", "len", "(", "cls_names", ")", ")", ":", "\n", "                ", "name", "=", "cls_names", "[", "cls_idx", "]", "\n", "out_lbl", "[", "name", "]", "=", "int", "(", "json_img_labels", "[", "img_idx", "]", "[", "cls_idx", "]", ")", "\n", "", "output_dict", "[", "img_id", "]", "=", "out_lbl", "\n", "", "", "return", "img_paths", ",", "img_labels", ",", "output_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.prepare_data.create_voc_data_files.main": [[132, 190], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "logger.info", "partitions.append", "logger.info", "create_voc_data_files.get_images_labels_info", "os.path.join", "os.path.join", "logger.info", "logger.info", "logger.info", "logger.info", "numpy.save", "numpy.save", "numpy.array", "numpy.array", "os.path.join", "logger.info", "open", "json.dump", "numpy.array"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.tools.extract.parse_args", "home.repos.pwc.inspect_result.wanggrun_triplet.prepare_data.create_voc_data_files.get_images_labels_info"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Create VOC data files\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--data_source_dir'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Path to data directory containing ImageSets and JPEGImages\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--output_dir'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Output directory where images/label information will be written\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--separate_partitions'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "0", ",", "\n", "help", "=", "\"Whether to create files separately for partitions train/test/val\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--generate_json'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "0", ",", "\n", "help", "=", "\"Whether to json files for partitions train/test/val\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "# given the data directory for the partitions train, val, and test, we will", "\n", "# write numpy files for each partition.", "\n", "partitions", "=", "[", "'train'", ",", "'test'", "]", "\n", "if", "args", ".", "separate_partitions", ">", "0", ":", "\n", "        ", "partitions", ".", "append", "(", "'val'", ")", "\n", "\n", "", "for", "partition", "in", "partitions", ":", "\n", "        ", "logger", ".", "info", "(", "\n", "'========Preparing {} data files========'", ".", "format", "(", "partition", ")", ")", "\n", "imgs_info", ",", "lbls_info", ",", "output_dict", "=", "get_images_labels_info", "(", "\n", "partition", ",", "args", ")", "\n", "img_info_out_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\n", "partition", "+", "'_images.npy'", ")", "\n", "label_info_out_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\n", "partition", "+", "'_labels.npy'", ")", "\n", "logger", ".", "info", "(", "\n", "'=================SAVING DATA files======================='", ")", "\n", "logger", ".", "info", "(", "'partition: {} saving img_paths to: {}'", ".", "format", "(", "\n", "partition", ",", "img_info_out_path", ")", ")", "\n", "logger", ".", "info", "(", "'partition: {} saving lbls_paths: {}'", ".", "format", "(", "\n", "partition", ",", "label_info_out_path", ")", ")", "\n", "logger", ".", "info", "(", "'partition: {} imgs: {}'", ".", "format", "(", "partition", ",", "\n", "np", ".", "array", "(", "imgs_info", ")", ".", "shape", ")", ")", "\n", "np", ".", "save", "(", "img_info_out_path", ",", "np", ".", "array", "(", "imgs_info", ")", ")", "\n", "np", ".", "save", "(", "label_info_out_path", ",", "np", ".", "array", "(", "lbls_info", ")", ")", "\n", "if", "args", ".", "generate_json", ":", "\n", "            ", "json_out_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\n", "partition", "+", "'_targets.json'", ")", "\n", "import", "json", "\n", "with", "open", "(", "json_out_path", ",", "'w'", ")", "as", "fp", ":", "\n", "                ", "json", ".", "dump", "(", "output_dict", ",", "fp", ")", "\n", "", "logger", ".", "info", "(", "'Saved Json to: {}'", ".", "format", "(", "json_out_path", ")", ")", "\n", "", "", "logger", ".", "info", "(", "'DONE!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.Self-Supervised-ReID.test_sysu_combine.load_network": [[73, 77], ["os.path.join", "network.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load"], "function", ["None"], ["def", "load_network", "(", "network", ")", ":", "\n", "    ", "save_path", "=", "os", ".", "path", ".", "join", "(", "name", ",", "'net_%s.pth'", "%", "opt", ".", "which_epoch", ")", "\n", "network", ".", "load_state_dict", "(", "torch", ".", "load", "(", "save_path", ")", ")", "\n", "return", "network", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.Self-Supervised-ReID.test_sysu_combine.extract_feature": [[86, 107], ["torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "img.flip.size", "print", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.autograd.Variable", "model", "outputs[].mean().data.cpu", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "ff.div.div", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "img.flip.flip", "img.flip.cuda", "torch.norm.expand_as", "outputs[].mean"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.utils.conv_module.ConvModule.norm", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.conv_module.ConvModule.norm", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.conv_module.ConvModule.norm", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.conv_module.ConvModule.norm", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda"], ["", "def", "extract_feature", "(", "model", ",", "dataloaders", ")", ":", "\n", "    ", "features", "=", "torch", ".", "FloatTensor", "(", ")", "\n", "count", "=", "0", "\n", "for", "data", "in", "dataloaders", ":", "\n", "        ", "img", ",", "label", "=", "data", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "img", ".", "size", "(", ")", "\n", "count", "+=", "n", "\n", "print", "(", "count", ")", "\n", "ff", "=", "torch", ".", "FloatTensor", "(", "n", ",", "2048", ")", ".", "zero_", "(", ")", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "if", "(", "i", "==", "1", ")", ":", "\n", "                ", "img", "=", "img", ".", "flip", "(", "dims", "=", "[", "-", "1", "]", ")", "\n", "", "input_img", "=", "Variable", "(", "img", ".", "cuda", "(", ")", ")", "\n", "outputs", "=", "model", "(", "input_img", ")", "\n", "f", "=", "outputs", "[", "0", "]", ".", "mean", "(", "dim", "=", "[", "2", ",", "3", "]", ")", ".", "data", ".", "cpu", "(", ")", "\n", "ff", "=", "ff", "+", "f", "\n", "fnorm", "=", "torch", ".", "norm", "(", "ff", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "ff", "=", "ff", ".", "div", "(", "fnorm", ".", "expand_as", "(", "ff", ")", ")", "\n", "\n", "", "features", "=", "torch", ".", "cat", "(", "(", "features", ",", "ff", ")", ",", "0", ")", "\n", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.Self-Supervised-ReID.test_sysu_combine.get_id": [[108, 122], ["camera_id.append", "path.split", "filename.split", "filename.split", "labels.append", "labels.append", "int", "int"], "function", ["None"], ["", "def", "get_id", "(", "img_path", ")", ":", "\n", "    ", "camera_id", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "for", "path", ",", "v", "in", "img_path", ":", "\n", "        ", "filename", "=", "path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "#label = filename[0:4]", "\n", "label", "=", "filename", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "camera", "=", "filename", ".", "split", "(", "'c'", ")", "[", "1", "]", "\n", "if", "label", "[", "0", ":", "10", "]", "==", "'0000others'", ":", "\n", "            ", "labels", ".", "append", "(", "-", "1000", ")", "\n", "", "else", ":", "\n", "            ", "labels", ".", "append", "(", "int", "(", "label", ")", ")", "\n", "", "camera_id", ".", "append", "(", "int", "(", "camera", "[", "0", "]", ")", ")", "\n", "", "return", "camera_id", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.Self-Supervised-ReID.test_sysu_combine.evaluate": [[163, 181], ["numpy.dot", "numpy.argsort", "numpy.argwhere", "numpy.argwhere", "numpy.setdiff1d", "numpy.argwhere", "numpy.intersect1d", "numpy.append", "test_sysu_combine.compute_mAP"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.Self-Supervised-ReID.test_sysu_combine.compute_mAP"], ["def", "evaluate", "(", "qf", ",", "ql", ",", "qc", ",", "gf", ",", "gl", ",", "gc", ")", ":", "\n", "    ", "query", "=", "qf", "\n", "score", "=", "np", ".", "dot", "(", "gf", ",", "query", ")", "\n", "# predict index", "\n", "index", "=", "np", ".", "argsort", "(", "score", ")", "#from small to large", "\n", "index", "=", "index", "[", ":", ":", "-", "1", "]", "\n", "#index = index[0:2000]", "\n", "# good index", "\n", "query_index", "=", "np", ".", "argwhere", "(", "gl", "==", "ql", ")", "\n", "camera_index", "=", "np", ".", "argwhere", "(", "gc", "==", "qc", ")", "\n", "\n", "good_index", "=", "np", ".", "setdiff1d", "(", "query_index", ",", "camera_index", ",", "assume_unique", "=", "True", ")", "\n", "junk_index1", "=", "np", ".", "argwhere", "(", "gl", "==", "-", "1", ")", "\n", "junk_index2", "=", "np", ".", "intersect1d", "(", "query_index", ",", "camera_index", ")", "\n", "junk_index", "=", "np", ".", "append", "(", "junk_index2", ",", "junk_index1", ")", "#.flatten())", "\n", "\n", "CMC_tmp", "=", "compute_mAP", "(", "index", ",", "good_index", ",", "junk_index", ")", "\n", "return", "CMC_tmp", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.Self-Supervised-ReID.test_sysu_combine.compute_mAP": [[183, 211], ["torch.IntTensor().zero_", "torch.IntTensor().zero_", "torch.IntTensor().zero_", "torch.IntTensor().zero_", "numpy.in1d", "len", "numpy.in1d", "numpy.argwhere", "rows_good.flatten.flatten", "range", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "len"], "function", ["None"], ["", "def", "compute_mAP", "(", "index", ",", "good_index", ",", "junk_index", ")", ":", "\n", "    ", "ap", "=", "0", "\n", "cmc", "=", "torch", ".", "IntTensor", "(", "len", "(", "index", ")", ")", ".", "zero_", "(", ")", "\n", "if", "good_index", ".", "size", "==", "0", ":", "# if empty", "\n", "        ", "cmc", "[", "0", "]", "=", "-", "1", "\n", "return", "ap", ",", "cmc", "\n", "\n", "# remove junk_index", "\n", "", "mask", "=", "np", ".", "in1d", "(", "index", ",", "junk_index", ",", "invert", "=", "True", ")", "\n", "index", "=", "index", "[", "mask", "]", "\n", "\n", "# find good_index index", "\n", "ngood", "=", "len", "(", "good_index", ")", "\n", "mask", "=", "np", ".", "in1d", "(", "index", ",", "good_index", ")", "\n", "rows_good", "=", "np", ".", "argwhere", "(", "mask", "==", "True", ")", "\n", "rows_good", "=", "rows_good", ".", "flatten", "(", ")", "\n", "\n", "cmc", "[", "rows_good", "[", "0", "]", ":", "]", "=", "1", "\n", "for", "i", "in", "range", "(", "ngood", ")", ":", "\n", "        ", "d_recall", "=", "1.0", "/", "ngood", "\n", "precision", "=", "(", "i", "+", "1", ")", "*", "1.0", "/", "(", "rows_good", "[", "i", "]", "+", "1", ")", "\n", "if", "rows_good", "[", "i", "]", "!=", "0", ":", "\n", "            ", "old_precision", "=", "i", "*", "1.0", "/", "rows_good", "[", "i", "]", "\n", "", "else", ":", "\n", "            ", "old_precision", "=", "1.0", "\n", "", "ap", "=", "ap", "+", "d_recall", "*", "(", "old_precision", "+", "precision", ")", "/", "2", "\n", "\n", "", "return", "ap", ",", "cmc", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.Self-Supervised-ReID.resnet.BasicBlock.__init__": [[97, 131], ["dict", "torch.Module.__init__", "resnet.build_norm_layer", "resnet.build_norm_layer", "resnet.build_conv_layer", "resnet.BasicBlock.add_module", "resnet.build_conv_layer", "resnet.BasicBlock.add_module", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.hooks.triplet_hook.TripletHook.__init__", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.norm.build_norm_layer", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.norm.build_norm_layer", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.conv_module.build_conv_layer", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.conv_module.build_conv_layer"], ["def", "__init__", "(", "self", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "downsample", "=", "None", ",", "\n", "style", "=", "'pytorch'", ",", "\n", "with_cp", "=", "False", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "norm1_name", ",", "norm1", "=", "build_norm_layer", "(", "norm_cfg", ",", "planes", ",", "postfix", "=", "1", ")", "\n", "self", ".", "norm2_name", ",", "norm2", "=", "build_norm_layer", "(", "norm_cfg", ",", "planes", ",", "postfix", "=", "2", ")", "\n", "\n", "self", ".", "conv1", "=", "build_conv_layer", "(", "\n", "conv_cfg", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm1_name", ",", "norm1", ")", "\n", "self", ".", "conv2", "=", "build_conv_layer", "(", "\n", "conv_cfg", ",", "planes", ",", "planes", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm2_name", ",", "norm2", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "dilation", "=", "dilation", "\n", "assert", "not", "with_cp", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.Self-Supervised-ReID.resnet.BasicBlock.norm1": [[132, 135], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm1", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "norm1_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.Self-Supervised-ReID.resnet.BasicBlock.norm2": [[136, 139], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm2", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "norm2_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.Self-Supervised-ReID.resnet.BasicBlock.forward": [[140, 157], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.norm1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.norm2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnet.ResNet.norm1", "home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnet.Bottleneck.norm2"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "norm1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "norm2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.Self-Supervised-ReID.resnet.Bottleneck.__init__": [[162, 228], ["dict", "torch.Module.__init__", "resnet.build_norm_layer", "resnet.build_norm_layer", "resnet.build_norm_layer", "resnet.build_conv_layer", "resnet.Bottleneck.add_module", "resnet.build_conv_layer", "resnet.Bottleneck.add_module", "resnet.build_conv_layer", "resnet.Bottleneck.add_module", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.hooks.triplet_hook.TripletHook.__init__", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.norm.build_norm_layer", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.norm.build_norm_layer", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.norm.build_norm_layer", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.conv_module.build_conv_layer", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.conv_module.build_conv_layer", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.conv_module.build_conv_layer"], ["def", "__init__", "(", "self", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "downsample", "=", "None", ",", "\n", "style", "=", "'pytorch'", ",", "\n", "with_cp", "=", "False", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ")", ":", "\n", "        ", "\"\"\"Bottleneck block for ResNet.\n        If style is \"pytorch\", the stride-two layer is the 3x3 conv layer,\n        if it is \"caffe\", the stride-two layer is the first 1x1 conv layer.\n        \"\"\"", "\n", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "style", "in", "[", "'pytorch'", ",", "'caffe'", "]", "\n", "\n", "self", ".", "inplanes", "=", "inplanes", "\n", "self", ".", "planes", "=", "planes", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "style", "=", "style", "\n", "self", ".", "with_cp", "=", "with_cp", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "\n", "if", "self", ".", "style", "==", "'pytorch'", ":", "\n", "            ", "self", ".", "conv1_stride", "=", "1", "\n", "self", ".", "conv2_stride", "=", "stride", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1_stride", "=", "stride", "\n", "self", ".", "conv2_stride", "=", "1", "\n", "\n", "", "self", ".", "norm1_name", ",", "norm1", "=", "build_norm_layer", "(", "norm_cfg", ",", "planes", ",", "postfix", "=", "1", ")", "\n", "self", ".", "norm2_name", ",", "norm2", "=", "build_norm_layer", "(", "norm_cfg", ",", "planes", ",", "postfix", "=", "2", ")", "\n", "self", ".", "norm3_name", ",", "norm3", "=", "build_norm_layer", "(", "\n", "norm_cfg", ",", "planes", "*", "self", ".", "expansion", ",", "postfix", "=", "3", ")", "\n", "\n", "self", ".", "conv1", "=", "build_conv_layer", "(", "\n", "conv_cfg", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "self", ".", "conv1_stride", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm1_name", ",", "norm1", ")", "\n", "self", ".", "conv2", "=", "build_conv_layer", "(", "\n", "conv_cfg", ",", "\n", "planes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "self", ".", "conv2_stride", ",", "\n", "padding", "=", "dilation", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm2_name", ",", "norm2", ")", "\n", "self", ".", "conv3", "=", "build_conv_layer", "(", "\n", "conv_cfg", ",", "\n", "planes", ",", "\n", "planes", "*", "self", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm3_name", ",", "norm3", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.Self-Supervised-ReID.resnet.Bottleneck.norm1": [[229, 232], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm1", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "norm1_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.Self-Supervised-ReID.resnet.Bottleneck.norm2": [[233, 236], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm2", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "norm2_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.Self-Supervised-ReID.resnet.Bottleneck.norm3": [[237, 240], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm3", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "norm3_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.Self-Supervised-ReID.resnet.Bottleneck.forward": [[241, 272], ["resnet.Bottleneck.relu", "resnet.Bottleneck.conv1", "resnet.Bottleneck.norm1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.norm2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.norm3", "torch.checkpoint", "torch.checkpoint", "resnet.Bottleneck.forward._inner_forward"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnet.ResNet.norm1", "home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnet.Bottleneck.norm2", "home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnet.Bottleneck.norm3"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "def", "_inner_forward", "(", "x", ")", ":", "\n", "            ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "norm1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "norm2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "norm3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "                ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "\n", "return", "out", "\n", "\n", "", "if", "self", ".", "with_cp", "and", "x", ".", "requires_grad", ":", "\n", "            ", "out", "=", "cp", ".", "checkpoint", "(", "_inner_forward", ",", "x", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "_inner_forward", "(", "x", ")", "\n", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.Self-Supervised-ReID.resnet.ResNet.__init__": [[368, 431], ["dict", "torch.Module.__init__", "resnet.ResNet._make_stem_layer", "enumerate", "resnet.ResNet._freeze_stages", "KeyError", "len", "len", "max", "resnet.make_res_layer", "resnet.ResNet.add_module", "resnet.ResNet.res_layers.append", "len"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.hooks.triplet_hook.TripletHook.__init__", "home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnet.ResNet._make_stem_layer", "home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnet.ResNet._freeze_stages", "home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnext.make_res_layer"], ["def", "__init__", "(", "self", ",", "\n", "depth", ",", "\n", "in_channels", "=", "3", ",", "\n", "num_stages", "=", "4", ",", "\n", "strides", "=", "(", "1", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "out_indices", "=", "(", "0", ",", "1", ",", "2", ",", "3", ",", "4", ")", ",", "\n", "style", "=", "'pytorch'", ",", "\n", "frozen_stages", "=", "-", "1", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ",", "requires_grad", "=", "True", ")", ",", "\n", "norm_eval", "=", "False", ",", "\n", "with_cp", "=", "False", ",", "\n", "zero_init_residual", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "depth", "not", "in", "self", ".", "arch_settings", ":", "\n", "            ", "raise", "KeyError", "(", "'invalid depth {} for resnet'", ".", "format", "(", "depth", ")", ")", "\n", "", "self", ".", "depth", "=", "depth", "\n", "self", ".", "num_stages", "=", "num_stages", "\n", "assert", "num_stages", ">=", "1", "and", "num_stages", "<=", "4", "\n", "self", ".", "strides", "=", "strides", "\n", "self", ".", "dilations", "=", "dilations", "\n", "assert", "len", "(", "strides", ")", "==", "len", "(", "dilations", ")", "==", "num_stages", "\n", "self", ".", "out_indices", "=", "out_indices", "\n", "assert", "max", "(", "out_indices", ")", "<", "num_stages", "+", "1", "\n", "self", ".", "style", "=", "style", "\n", "self", ".", "frozen_stages", "=", "frozen_stages", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "with_cp", "=", "with_cp", "\n", "self", ".", "norm_eval", "=", "norm_eval", "\n", "self", ".", "zero_init_residual", "=", "zero_init_residual", "\n", "self", ".", "block", ",", "stage_blocks", "=", "self", ".", "arch_settings", "[", "depth", "]", "\n", "self", ".", "stage_blocks", "=", "stage_blocks", "[", ":", "num_stages", "]", "\n", "self", ".", "inplanes", "=", "64", "\n", "\n", "self", ".", "_make_stem_layer", "(", "in_channels", ")", "\n", "\n", "self", ".", "res_layers", "=", "[", "]", "\n", "for", "i", ",", "num_blocks", "in", "enumerate", "(", "self", ".", "stage_blocks", ")", ":", "\n", "            ", "stride", "=", "strides", "[", "i", "]", "\n", "dilation", "=", "dilations", "[", "i", "]", "\n", "planes", "=", "64", "*", "2", "**", "i", "\n", "res_layer", "=", "make_res_layer", "(", "\n", "self", ".", "block", ",", "\n", "self", ".", "inplanes", ",", "\n", "planes", ",", "\n", "num_blocks", ",", "\n", "stride", "=", "stride", ",", "\n", "dilation", "=", "dilation", ",", "\n", "style", "=", "self", ".", "style", ",", "\n", "with_cp", "=", "with_cp", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "self", ".", "block", ".", "expansion", "\n", "layer_name", "=", "'layer{}'", ".", "format", "(", "i", "+", "1", ")", "\n", "self", ".", "add_module", "(", "layer_name", ",", "res_layer", ")", "\n", "self", ".", "res_layers", ".", "append", "(", "layer_name", ")", "\n", "\n", "", "self", ".", "_freeze_stages", "(", ")", "\n", "\n", "self", ".", "feat_dim", "=", "self", ".", "block", ".", "expansion", "*", "64", "*", "2", "**", "(", "\n", "len", "(", "self", ".", "stage_blocks", ")", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.Self-Supervised-ReID.resnet.ResNet.norm1": [[432, 435], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm1", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "norm1_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.Self-Supervised-ReID.resnet.ResNet._make_stem_layer": [[436, 449], ["resnet.build_conv_layer", "resnet.build_norm_layer", "resnet.ResNet.add_module", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.utils.conv_module.build_conv_layer", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.norm.build_norm_layer"], ["", "def", "_make_stem_layer", "(", "self", ",", "in_channels", ")", ":", "\n", "        ", "self", ".", "conv1", "=", "build_conv_layer", "(", "\n", "self", ".", "conv_cfg", ",", "\n", "in_channels", ",", "\n", "64", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "norm1_name", ",", "norm1", "=", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "64", ",", "postfix", "=", "1", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm1_name", ",", "norm1", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.Self-Supervised-ReID.resnet.ResNet._freeze_stages": [[450, 462], ["range", "resnet.ResNet.norm1.eval", "getattr", "getattr.eval", "getattr.parameters", "getattr.parameters"], "methods", ["None"], ["", "def", "_freeze_stages", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "frozen_stages", ">=", "0", ":", "\n", "            ", "self", ".", "norm1", ".", "eval", "(", ")", "\n", "for", "m", "in", "[", "self", ".", "conv1", ",", "self", ".", "norm1", "]", ":", "\n", "                ", "for", "param", "in", "m", ".", "parameters", "(", ")", ":", "\n", "                    ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "", "for", "i", "in", "range", "(", "1", ",", "self", ".", "frozen_stages", "+", "1", ")", ":", "\n", "            ", "m", "=", "getattr", "(", "self", ",", "'layer{}'", ".", "format", "(", "i", ")", ")", "\n", "m", ".", "eval", "(", ")", "\n", "for", "param", "in", "m", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.Self-Supervised-ReID.resnet.ResNet.init_weights": [[463, 482], ["isinstance", "resnet.ResNet.utils.get_root_logger", "mmcv.runner.load_checkpoint", "resnet.ResNet.modules", "TypeError", "isinstance", "resnet.ResNet.modules", "mmcv.cnn.kaiming_init", "isinstance", "isinstance", "mmcv.cnn.constant_init", "mmcv.cnn.constant_init", "isinstance", "mmcv.cnn.constant_init"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.utils.logger.get_root_logger"], ["", "", "", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "if", "isinstance", "(", "pretrained", ",", "str", ")", ":", "\n", "            ", "logger", "=", "get_root_logger", "(", ")", "\n", "load_checkpoint", "(", "self", ",", "pretrained", ",", "strict", "=", "True", ",", "logger", "=", "logger", ")", "\n", "", "elif", "pretrained", "is", "None", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                    ", "kaiming_init", "(", "m", ",", "mode", "=", "'fan_in'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "_BatchNorm", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                    ", "constant_init", "(", "m", ",", "1", ")", "\n", "\n", "", "", "if", "self", ".", "zero_init_residual", ":", "\n", "                ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                    ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                        ", "constant_init", "(", "m", ".", "norm3", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                        ", "constant_init", "(", "m", ".", "norm2", ",", "0", ")", "\n", "", "", "", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "'pretrained must be a str or None'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.Self-Supervised-ReID.resnet.ResNet.forward": [[483, 498], ["resnet.ResNet.conv1", "resnet.ResNet.norm1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "enumerate", "tuple", "outs.append", "getattr", "getattr.", "outs.append"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnet.ResNet.norm1"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "outs", "=", "[", "]", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "norm1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "# r50: 64x128x128", "\n", "if", "0", "in", "self", ".", "out_indices", ":", "\n", "            ", "outs", ".", "append", "(", "x", ")", "\n", "", "x", "=", "self", ".", "maxpool", "(", "x", ")", "# r50: 64x56x56", "\n", "for", "i", ",", "layer_name", "in", "enumerate", "(", "self", ".", "res_layers", ")", ":", "\n", "            ", "res_layer", "=", "getattr", "(", "self", ",", "layer_name", ")", "\n", "x", "=", "res_layer", "(", "x", ")", "\n", "if", "i", "+", "1", "in", "self", ".", "out_indices", ":", "\n", "                ", "outs", ".", "append", "(", "x", ")", "\n", "# r50: 1-256x56x56; 2-512x28x28; 3-1024x14x14; 4-2048x7x7", "\n", "", "", "return", "tuple", "(", "outs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.Self-Supervised-ReID.resnet.ResNet.train": [[499, 507], ["super().train", "resnet.ResNet._freeze_stages", "resnet.ResNet.modules", "isinstance", "m.eval"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnet.ResNet.train", "home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnet.ResNet._freeze_stages"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "self", ".", "_freeze_stages", "(", ")", "\n", "if", "mode", "and", "self", ".", "norm_eval", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "# trick: eval have effect on BatchNorm only", "\n", "                ", "if", "isinstance", "(", "m", ",", "_BatchNorm", ")", ":", "\n", "                    ", "m", ".", "eval", "(", ")", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.wanggrun_triplet.Self-Supervised-ReID.resnet.build_norm_layer": [[19, 61], ["cfg.copy", "cfg.copy.pop", "isinstance", "cfg.copy.pop", "cfg.copy.setdefault", "norm_layer.parameters", "isinstance", "KeyError", "str", "norm_layer", "norm_layer"], "function", ["None"], ["def", "build_norm_layer", "(", "cfg", ",", "num_features", ",", "postfix", "=", "''", ")", ":", "\n", "    ", "\"\"\"Build normalization layer.\n    Args:\n        cfg (dict): cfg should contain:\n            type (str): identify norm layer type.\n            layer args: args needed to instantiate a norm layer.\n            requires_grad (bool): [optional] whether stop gradient updates\n        num_features (int): number of channels from input.\n        postfix (int, str): appended into norm abbreviation to\n            create named layer.\n    Returns:\n        name (str): abbreviation + postfix\n        layer (nn.Module): created norm layer\n    \"\"\"", "\n", "assert", "isinstance", "(", "cfg", ",", "dict", ")", "and", "'type'", "in", "cfg", "\n", "cfg_", "=", "cfg", ".", "copy", "(", ")", "\n", "\n", "layer_type", "=", "cfg_", ".", "pop", "(", "'type'", ")", "\n", "if", "layer_type", "not", "in", "norm_cfg", ":", "\n", "        ", "raise", "KeyError", "(", "'Unrecognized norm type {}'", ".", "format", "(", "layer_type", ")", ")", "\n", "", "else", ":", "\n", "        ", "abbr", ",", "norm_layer", "=", "norm_cfg", "[", "layer_type", "]", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "", "assert", "isinstance", "(", "postfix", ",", "(", "int", ",", "str", ")", ")", "\n", "name", "=", "abbr", "+", "str", "(", "postfix", ")", "\n", "\n", "requires_grad", "=", "cfg_", ".", "pop", "(", "'requires_grad'", ",", "True", ")", "\n", "cfg_", ".", "setdefault", "(", "'eps'", ",", "1e-5", ")", "\n", "if", "layer_type", "!=", "'GN'", ":", "\n", "        ", "layer", "=", "norm_layer", "(", "num_features", ",", "**", "cfg_", ")", "\n", "# if layer_type == 'SyncBN':", "\n", "#     layer._specify_ddp_gpu_num(1)", "\n", "", "else", ":", "\n", "        ", "assert", "'num_groups'", "in", "cfg_", "\n", "layer", "=", "norm_layer", "(", "num_channels", "=", "num_features", ",", "**", "cfg_", ")", "\n", "\n", "", "for", "param", "in", "layer", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "requires_grad", "=", "requires_grad", "\n", "\n", "", "return", "name", ",", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.Self-Supervised-ReID.resnet.build_conv_layer": [[67, 91], ["cfg.copy.pop", "conv_layer", "dict", "cfg.copy", "KeyError", "isinstance"], "function", ["None"], ["def", "build_conv_layer", "(", "cfg", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Build convolution layer.\n    Args:\n        cfg (None or dict): Cfg should contain:\n            type (str): Identify conv layer type.\n            layer args: Args needed to instantiate a conv layer.\n    Returns:\n        nn.Module: Created conv layer.\n    \"\"\"", "\n", "if", "cfg", "is", "None", ":", "\n", "        ", "cfg_", "=", "dict", "(", "type", "=", "'Conv'", ")", "\n", "", "else", ":", "\n", "        ", "assert", "isinstance", "(", "cfg", ",", "dict", ")", "and", "'type'", "in", "cfg", "\n", "cfg_", "=", "cfg", ".", "copy", "(", ")", "\n", "\n", "", "layer_type", "=", "cfg_", ".", "pop", "(", "'type'", ")", "\n", "if", "layer_type", "not", "in", "conv_cfg", ":", "\n", "        ", "raise", "KeyError", "(", "'Unrecognized norm type {}'", ".", "format", "(", "layer_type", ")", ")", "\n", "", "else", ":", "\n", "        ", "conv_layer", "=", "conv_cfg", "[", "layer_type", "]", "\n", "\n", "", "layer", "=", "conv_layer", "(", "*", "args", ",", "**", "kwargs", ",", "**", "cfg_", ")", "\n", "\n", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.Self-Supervised-ReID.resnet.make_res_layer": [[274, 323], ["dict", "layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet.build_conv_layer", "block", "resnet.build_norm_layer"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.utils.conv_module.build_conv_layer", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.norm.build_norm_layer"], ["", "", "def", "make_res_layer", "(", "block", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "blocks", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "style", "=", "'pytorch'", ",", "\n", "with_cp", "=", "False", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ")", ":", "\n", "    ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "        ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "build_conv_layer", "(", "\n", "conv_cfg", ",", "\n", "inplanes", ",", "\n", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ")", ",", "\n", "build_norm_layer", "(", "norm_cfg", ",", "planes", "*", "block", ".", "expansion", ")", "[", "1", "]", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "\n", "inplanes", "=", "inplanes", ",", "\n", "planes", "=", "planes", ",", "\n", "stride", "=", "stride", ",", "\n", "dilation", "=", "dilation", ",", "\n", "downsample", "=", "downsample", ",", "\n", "style", "=", "style", ",", "\n", "with_cp", "=", "with_cp", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ")", ")", "\n", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "        ", "layers", ".", "append", "(", "\n", "block", "(", "\n", "inplanes", "=", "inplanes", ",", "\n", "planes", "=", "planes", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "dilation", ",", "\n", "style", "=", "style", ",", "\n", "with_cp", "=", "with_cp", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.gather.gather_tensors": [[7, 37], ["torch.get_world_size", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.all_gather", "max", "numpy.zeros", "input_array.reshape", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.all_gather", "torch.Tensor().cuda", "torch.Tensor().cuda", "x.cpu().numpy", "int", "list", "torch.Tensor().cuda", "torch.Tensor().cuda", "x.cpu().numpy", "x[].reshape", "torch.Tensor", "torch.Tensor", "range", "x.prod", "map", "range", "torch.Tensor", "torch.Tensor", "enumerate", "numpy.array", "torch.Tensor", "torch.Tensor", "x.cpu", "torch.Tensor", "torch.Tensor", "x.cpu", "numpy.array"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda"], ["def", "gather_tensors", "(", "input_array", ")", ":", "\n", "    ", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "## gather shapes first", "\n", "myshape", "=", "input_array", ".", "shape", "\n", "mycount", "=", "input_array", ".", "size", "\n", "shape_tensor", "=", "torch", ".", "Tensor", "(", "np", ".", "array", "(", "myshape", ")", ")", ".", "cuda", "(", ")", "\n", "all_shape", "=", "[", "\n", "torch", ".", "Tensor", "(", "np", ".", "array", "(", "myshape", ")", ")", ".", "cuda", "(", ")", "for", "i", "in", "range", "(", "world_size", ")", "\n", "]", "\n", "dist", ".", "all_gather", "(", "all_shape", ",", "shape_tensor", ")", "\n", "## compute largest shapes", "\n", "all_shape", "=", "[", "x", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "for", "x", "in", "all_shape", "]", "\n", "all_count", "=", "[", "int", "(", "x", ".", "prod", "(", ")", ")", "for", "x", "in", "all_shape", "]", "\n", "all_shape", "=", "[", "list", "(", "map", "(", "int", ",", "x", ")", ")", "for", "x", "in", "all_shape", "]", "\n", "max_count", "=", "max", "(", "all_count", ")", "\n", "## padding tensors and gather them", "\n", "output_tensors", "=", "[", "\n", "torch", ".", "Tensor", "(", "max_count", ")", ".", "cuda", "(", ")", "for", "i", "in", "range", "(", "world_size", ")", "\n", "]", "\n", "padded_input_array", "=", "np", ".", "zeros", "(", "max_count", ")", "\n", "padded_input_array", "[", ":", "mycount", "]", "=", "input_array", ".", "reshape", "(", "-", "1", ")", "\n", "input_tensor", "=", "torch", ".", "Tensor", "(", "padded_input_array", ")", ".", "cuda", "(", ")", "\n", "dist", ".", "all_gather", "(", "output_tensors", ",", "input_tensor", ")", "\n", "## unpadding gathered tensors", "\n", "padded_output", "=", "[", "x", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "for", "x", "in", "output_tensors", "]", "\n", "output", "=", "[", "\n", "x", "[", ":", "all_count", "[", "i", "]", "]", ".", "reshape", "(", "all_shape", "[", "i", "]", ")", "\n", "for", "i", ",", "x", "in", "enumerate", "(", "padded_output", ")", "\n", "]", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.gather.gather_tensors_batch": [[39, 70], ["torch.get_rank", "range", "gather.gather_tensors", "all_features.append", "numpy.concatenate", "range", "numpy.concatenate", "min", "len", "range", "range", "len", "range"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.utils.gather.gather_tensors"], ["", "def", "gather_tensors_batch", "(", "input_array", ",", "part_size", "=", "100", ",", "ret_rank", "=", "-", "1", ")", ":", "\n", "# batch-wize gathering to avoid CUDA out of memory", "\n", "    ", "rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "all_features", "=", "[", "]", "\n", "part_num", "=", "input_array", ".", "shape", "[", "0", "]", "//", "part_size", "+", "1", "if", "input_array", ".", "shape", "[", "\n", "0", "]", "%", "part_size", "!=", "0", "else", "input_array", ".", "shape", "[", "0", "]", "//", "part_size", "\n", "for", "i", "in", "range", "(", "part_num", ")", ":", "\n", "        ", "part_feat", "=", "input_array", "[", "i", "*", "\n", "part_size", ":", "min", "(", "(", "i", "+", "1", ")", "*", "\n", "part_size", ",", "input_array", ".", "shape", "[", "0", "]", ")", ",", "\n", "...", "]", "\n", "assert", "part_feat", ".", "shape", "[", "\n", "0", "]", ">", "0", ",", "\"rank: {}, length of part features should > 0\"", ".", "format", "(", "rank", ")", "\n", "#print(\"rank: {}, gather part: {}/{}, length: {}\".format(rank, i, part_num, len(part_feat)))", "\n", "gather_part_feat", "=", "gather_tensors", "(", "part_feat", ")", "\n", "all_features", ".", "append", "(", "gather_part_feat", ")", "\n", "", "if", "ret_rank", "==", "-", "1", ":", "\n", "        ", "all_features", "=", "[", "\n", "np", ".", "concatenate", "(", "[", "all_features", "[", "i", "]", "[", "j", "]", "for", "i", "in", "range", "(", "part_num", ")", "]", ",", "\n", "axis", "=", "0", ")", "for", "j", "in", "range", "(", "len", "(", "all_features", "[", "0", "]", ")", ")", "\n", "]", "\n", "return", "all_features", "\n", "", "else", ":", "\n", "        ", "if", "rank", "==", "ret_rank", ":", "\n", "            ", "all_features", "=", "[", "\n", "np", ".", "concatenate", "(", "[", "all_features", "[", "i", "]", "[", "j", "]", "for", "i", "in", "range", "(", "part_num", ")", "]", ",", "\n", "axis", "=", "0", ")", "for", "j", "in", "range", "(", "len", "(", "all_features", "[", "0", "]", ")", ")", "\n", "]", "\n", "return", "all_features", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.config_tools.traverse_replace": [[3, 13], ["isinstance", "d.items", "isinstance", "config_tools.traverse_replace", "config_tools.traverse_replace"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.utils.config_tools.traverse_replace", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.config_tools.traverse_replace"], ["def", "traverse_replace", "(", "d", ",", "key", ",", "value", ")", ":", "\n", "    ", "if", "isinstance", "(", "d", ",", "(", "dict", ",", "Config", ")", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "==", "key", ":", "\n", "                ", "d", "[", "k", "]", "=", "value", "\n", "", "else", ":", "\n", "                ", "traverse_replace", "(", "v", ",", "key", ",", "value", ")", "\n", "", "", "", "elif", "isinstance", "(", "d", ",", "(", "list", ",", "tuple", ",", "set", ")", ")", ":", "\n", "        ", "for", "v", "in", "d", ":", "\n", "            ", "traverse_replace", "(", "v", ",", "key", ",", "value", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.collect.nondist_forward_collect": [[9, 37], ["mmcv.ProgressBar", "enumerate", "results[].keys", "len", "results.append", "mmcv.ProgressBar.update", "numpy.concatenate", "torch.no_grad", "func", "batch[].numpy"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.memories.simple_memory.SimpleMemory.update"], ["def", "nondist_forward_collect", "(", "func", ",", "data_loader", ",", "length", ")", ":", "\n", "    ", "\"\"\"Forward and collect network outputs.\n\n    This function performs forward propagation and collects outputs.\n    It can be used to collect results, features, losses, etc.\n\n    Args:\n        func (function): The function to process data. The output must be\n            a dictionary of CPU tensors.\n        length (int): Expected length of output arrays.\n\n    Returns:\n        results_all (dict(np.ndarray)): The concatenated outputs.\n    \"\"\"", "\n", "results", "=", "[", "]", "\n", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "data_loader", ")", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "result", "=", "func", "(", "**", "data", ")", "\n", "", "results", ".", "append", "(", "result", ")", "\n", "prog_bar", ".", "update", "(", ")", "\n", "\n", "", "results_all", "=", "{", "}", "\n", "for", "k", "in", "results", "[", "0", "]", ".", "keys", "(", ")", ":", "\n", "        ", "results_all", "[", "k", "]", "=", "np", ".", "concatenate", "(", "\n", "[", "batch", "[", "k", "]", ".", "numpy", "(", ")", "for", "batch", "in", "results", "]", ",", "axis", "=", "0", ")", "\n", "assert", "results_all", "[", "k", "]", ".", "shape", "[", "0", "]", "==", "length", "\n", "", "return", "results_all", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.collect.dist_forward_collect": [[39, 84], ["enumerate", "results[].keys", "mmcv.ProgressBar", "results.append", "numpy.concatenate", "len", "torch.no_grad", "func", "mmcv.ProgressBar.update", "gather.gather_tensors_batch", "gather.gather_tensors_batch", "batch[].numpy", "numpy.concatenate", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.memories.simple_memory.SimpleMemory.update", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.gather.gather_tensors_batch", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.gather.gather_tensors_batch"], ["", "def", "dist_forward_collect", "(", "func", ",", "data_loader", ",", "rank", ",", "length", ",", "ret_rank", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\"Forward and collect network outputs in a distributed manner.\n\n    This function performs forward propagation and collects outputs.\n    It can be used to collect results, features, losses, etc.\n\n    Args:\n        func (function): The function to process data. The output must be\n            a dictionary of CPU tensors.\n        rank (int): This process id.\n        length (int): Expected length of output arrays.\n        ret_rank (int): The process that returns.\n            Other processes will return None.\n\n    Returns:\n        results_all (dict(np.ndarray)): The concatenated outputs.\n    \"\"\"", "\n", "results", "=", "[", "]", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "data_loader", ")", ")", "\n", "", "for", "idx", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "result", "=", "func", "(", "**", "data", ")", "# dict{key: tensor}", "\n", "", "results", ".", "append", "(", "result", ")", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "prog_bar", ".", "update", "(", ")", "\n", "\n", "", "", "results_all", "=", "{", "}", "\n", "for", "k", "in", "results", "[", "0", "]", ".", "keys", "(", ")", ":", "\n", "        ", "results_cat", "=", "np", ".", "concatenate", "(", "[", "batch", "[", "k", "]", ".", "numpy", "(", ")", "for", "batch", "in", "results", "]", ",", "\n", "axis", "=", "0", ")", "\n", "if", "ret_rank", "==", "-", "1", ":", "\n", "            ", "results_gathered", "=", "gather_tensors_batch", "(", "results_cat", ",", "part_size", "=", "20", ")", "\n", "results_strip", "=", "np", ".", "concatenate", "(", "results_gathered", ",", "axis", "=", "0", ")", "[", ":", "length", "]", "\n", "", "else", ":", "\n", "            ", "results_gathered", "=", "gather_tensors_batch", "(", "\n", "results_cat", ",", "part_size", "=", "20", ",", "ret_rank", "=", "ret_rank", ")", "\n", "if", "rank", "==", "ret_rank", ":", "\n", "                ", "results_strip", "=", "np", ".", "concatenate", "(", "\n", "results_gathered", ",", "axis", "=", "0", ")", "[", ":", "length", "]", "\n", "", "else", ":", "\n", "                ", "results_strip", "=", "None", "\n", "", "", "results_all", "[", "k", "]", "=", "results_strip", "\n", "", "return", "results_all", "\n", "", ""]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.flops_counter.get_model_complexity_info": [[37, 67], ["flops_counter.add_flops_counting_methods", "add_flops_counting_methods.eval().start_flops_count", "add_flops_counting_methods.compute_average_flops_cost", "flops_counter.get_model_parameters_number", "add_flops_counting_methods.stop_flops_count", "type", "len", "input_constructor", "add_flops_counting_methods.", "torch.ones().new_empty", "torch.ones().new_empty", "add_flops_counting_methods.", "flops_counter.print_model_with_flops", "add_flops_counting_methods.eval", "flops_counter.flops_to_string", "flops_counter.params_to_string", "torch.ones", "torch.ones", "next", "next", "add_flops_counting_methods.parameters", "add_flops_counting_methods.parameters"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.utils.flops_counter.add_flops_counting_methods", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.flops_counter.start_flops_count", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.flops_counter.compute_average_flops_cost", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.flops_counter.get_model_parameters_number", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.flops_counter.stop_flops_count", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.flops_counter.print_model_with_flops", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.flops_counter.flops_to_string", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.flops_counter.params_to_string"], ["def", "get_model_complexity_info", "(", "model", ",", "\n", "input_res", ",", "\n", "print_per_layer_stat", "=", "True", ",", "\n", "as_strings", "=", "True", ",", "\n", "input_constructor", "=", "None", ",", "\n", "ost", "=", "sys", ".", "stdout", ")", ":", "\n", "    ", "assert", "type", "(", "input_res", ")", "is", "tuple", "\n", "assert", "len", "(", "input_res", ")", ">=", "2", "\n", "flops_model", "=", "add_flops_counting_methods", "(", "model", ")", "\n", "flops_model", ".", "eval", "(", ")", ".", "start_flops_count", "(", ")", "\n", "if", "input_constructor", ":", "\n", "        ", "input", "=", "input_constructor", "(", "input_res", ")", "\n", "_", "=", "flops_model", "(", "**", "input", ")", "\n", "", "else", ":", "\n", "        ", "batch", "=", "torch", ".", "ones", "(", "(", ")", ")", ".", "new_empty", "(", "\n", "(", "1", ",", "*", "input_res", ")", ",", "\n", "dtype", "=", "next", "(", "flops_model", ".", "parameters", "(", ")", ")", ".", "dtype", ",", "\n", "device", "=", "next", "(", "flops_model", ".", "parameters", "(", ")", ")", ".", "device", ")", "\n", "flops_model", "(", "batch", ")", "\n", "\n", "", "if", "print_per_layer_stat", ":", "\n", "        ", "print_model_with_flops", "(", "flops_model", ",", "ost", "=", "ost", ")", "\n", "", "flops_count", "=", "flops_model", ".", "compute_average_flops_cost", "(", ")", "\n", "params_count", "=", "get_model_parameters_number", "(", "flops_model", ")", "\n", "flops_model", ".", "stop_flops_count", "(", ")", "\n", "\n", "if", "as_strings", ":", "\n", "        ", "return", "flops_to_string", "(", "flops_count", ")", ",", "params_to_string", "(", "params_count", ")", "\n", "\n", "", "return", "flops_count", ",", "params_count", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.flops_counter.flops_to_string": [[69, 88], ["str", "round", "str", "str", "round", "str", "str", "round", "str", "str", "round", "round", "str", "round"], "function", ["None"], ["", "def", "flops_to_string", "(", "flops", ",", "units", "=", "'GMac'", ",", "precision", "=", "2", ")", ":", "\n", "    ", "if", "units", "is", "None", ":", "\n", "        ", "if", "flops", "//", "10", "**", "9", ">", "0", ":", "\n", "            ", "return", "str", "(", "round", "(", "flops", "/", "10.", "**", "9", ",", "precision", ")", ")", "+", "' GMac'", "\n", "", "elif", "flops", "//", "10", "**", "6", ">", "0", ":", "\n", "            ", "return", "str", "(", "round", "(", "flops", "/", "10.", "**", "6", ",", "precision", ")", ")", "+", "' MMac'", "\n", "", "elif", "flops", "//", "10", "**", "3", ">", "0", ":", "\n", "            ", "return", "str", "(", "round", "(", "flops", "/", "10.", "**", "3", ",", "precision", ")", ")", "+", "' KMac'", "\n", "", "else", ":", "\n", "            ", "return", "str", "(", "flops", ")", "+", "' Mac'", "\n", "", "", "else", ":", "\n", "        ", "if", "units", "==", "'GMac'", ":", "\n", "            ", "return", "str", "(", "round", "(", "flops", "/", "10.", "**", "9", ",", "precision", ")", ")", "+", "' '", "+", "units", "\n", "", "elif", "units", "==", "'MMac'", ":", "\n", "            ", "return", "str", "(", "round", "(", "flops", "/", "10.", "**", "6", ",", "precision", ")", ")", "+", "' '", "+", "units", "\n", "", "elif", "units", "==", "'KMac'", ":", "\n", "            ", "return", "str", "(", "round", "(", "flops", "/", "10.", "**", "3", ",", "precision", ")", ")", "+", "' '", "+", "units", "\n", "", "else", ":", "\n", "            ", "return", "str", "(", "flops", ")", "+", "' Mac'", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.flops_counter.params_to_string": [[90, 109], ["str", "str", "round", "str", "round"], "function", ["None"], ["", "", "", "def", "params_to_string", "(", "params_num", ")", ":", "\n", "    ", "\"\"\"converting number to string\n\n    :param float params_num: number\n    :returns str: number\n\n    >>> params_to_string(1e9)\n    '1000.0 M'\n    >>> params_to_string(2e5)\n    '200.0 k'\n    >>> params_to_string(3e-9)\n    '3e-09'\n    \"\"\"", "\n", "if", "params_num", "//", "10", "**", "6", ">", "0", ":", "\n", "        ", "return", "str", "(", "round", "(", "params_num", "/", "10", "**", "6", ",", "2", ")", ")", "+", "' M'", "\n", "", "elif", "params_num", "//", "10", "**", "3", ":", "\n", "        ", "return", "str", "(", "round", "(", "params_num", "/", "10", "**", "3", ",", "2", ")", ")", "+", "' k'", "\n", "", "else", ":", "\n", "        ", "return", "str", "(", "params_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.flops_counter.print_model_with_flops": [[111, 150], ["model.compute_average_flops_cost", "model.apply", "print", "model.apply", "flops_counter.is_supported_instance", "flops_counter..accumulate_flops", "accumulate_flops.__get__", "flops_repr.__get__", "hasattr", "hasattr", "flops_counter..children", "m.accumulate_flops", "flops_counter.flops_to_string", "flops_counter..original_extra_repr"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.utils.flops_counter.compute_average_flops_cost", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.flops_counter.is_supported_instance", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.flops_counter.flops_to_string"], ["", "", "def", "print_model_with_flops", "(", "model", ",", "units", "=", "'GMac'", ",", "precision", "=", "3", ",", "ost", "=", "sys", ".", "stdout", ")", ":", "\n", "    ", "total_flops", "=", "model", ".", "compute_average_flops_cost", "(", ")", "\n", "\n", "def", "accumulate_flops", "(", "self", ")", ":", "\n", "        ", "if", "is_supported_instance", "(", "self", ")", ":", "\n", "            ", "return", "self", ".", "__flops__", "/", "model", ".", "__batch_counter__", "\n", "", "else", ":", "\n", "            ", "sum", "=", "0", "\n", "for", "m", "in", "self", ".", "children", "(", ")", ":", "\n", "                ", "sum", "+=", "m", ".", "accumulate_flops", "(", ")", "\n", "", "return", "sum", "\n", "\n", "", "", "def", "flops_repr", "(", "self", ")", ":", "\n", "        ", "accumulated_flops_cost", "=", "self", ".", "accumulate_flops", "(", ")", "\n", "return", "', '", ".", "join", "(", "[", "\n", "flops_to_string", "(", "\n", "accumulated_flops_cost", ",", "units", "=", "units", ",", "precision", "=", "precision", ")", ",", "\n", "'{:.3%} MACs'", ".", "format", "(", "accumulated_flops_cost", "/", "total_flops", ")", ",", "\n", "self", ".", "original_extra_repr", "(", ")", "\n", "]", ")", "\n", "\n", "", "def", "add_extra_repr", "(", "m", ")", ":", "\n", "        ", "m", ".", "accumulate_flops", "=", "accumulate_flops", ".", "__get__", "(", "m", ")", "\n", "flops_extra_repr", "=", "flops_repr", ".", "__get__", "(", "m", ")", "\n", "if", "m", ".", "extra_repr", "!=", "flops_extra_repr", ":", "\n", "            ", "m", ".", "original_extra_repr", "=", "m", ".", "extra_repr", "\n", "m", ".", "extra_repr", "=", "flops_extra_repr", "\n", "assert", "m", ".", "extra_repr", "!=", "m", ".", "original_extra_repr", "\n", "\n", "", "", "def", "del_extra_repr", "(", "m", ")", ":", "\n", "        ", "if", "hasattr", "(", "m", ",", "'original_extra_repr'", ")", ":", "\n", "            ", "m", ".", "extra_repr", "=", "m", ".", "original_extra_repr", "\n", "del", "m", ".", "original_extra_repr", "\n", "", "if", "hasattr", "(", "m", ",", "'accumulate_flops'", ")", ":", "\n", "            ", "del", "m", ".", "accumulate_flops", "\n", "\n", "", "", "model", ".", "apply", "(", "add_extra_repr", ")", "\n", "print", "(", "model", ",", "file", "=", "ost", ")", "\n", "model", ".", "apply", "(", "del_extra_repr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.flops_counter.get_model_parameters_number": [[152, 155], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["", "def", "get_model_parameters_number", "(", "model", ")", ":", "\n", "    ", "params_num", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "return", "params_num", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.flops_counter.add_flops_counting_methods": [[157, 175], ["start_flops_count.__get__", "stop_flops_count.__get__", "reset_flops_count.__get__", "compute_average_flops_cost.__get__", "net_main_module.reset_flops_count", "net_main_module.apply"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.utils.flops_counter.reset_flops_count"], ["", "def", "add_flops_counting_methods", "(", "net_main_module", ")", ":", "\n", "# adding additional methods to the existing module object,", "\n", "# this is done this way so that each function has access to self object", "\n", "    ", "net_main_module", ".", "start_flops_count", "=", "start_flops_count", ".", "__get__", "(", "\n", "net_main_module", ")", "\n", "net_main_module", ".", "stop_flops_count", "=", "stop_flops_count", ".", "__get__", "(", "\n", "net_main_module", ")", "\n", "net_main_module", ".", "reset_flops_count", "=", "reset_flops_count", ".", "__get__", "(", "\n", "net_main_module", ")", "\n", "net_main_module", ".", "compute_average_flops_cost", "=", "compute_average_flops_cost", ".", "__get__", "(", "net_main_module", ")", "\n", "\n", "net_main_module", ".", "reset_flops_count", "(", ")", "\n", "\n", "# Adding variables necessary for masked flops computation", "\n", "net_main_module", ".", "apply", "(", "add_flops_mask_variable_or_reset", ")", "\n", "\n", "return", "net_main_module", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.flops_counter.compute_average_flops_cost": [[177, 191], ["flops_counter..modules", "flops_counter.is_supported_instance"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.utils.flops_counter.is_supported_instance"], ["", "def", "compute_average_flops_cost", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_flops_counting_methods() is\n    called on a desired net object.\n    Returns current mean flops consumption per image.\n    \"\"\"", "\n", "\n", "batches_count", "=", "self", ".", "__batch_counter__", "\n", "flops_sum", "=", "0", "\n", "for", "module", "in", "self", ".", "modules", "(", ")", ":", "\n", "        ", "if", "is_supported_instance", "(", "module", ")", ":", "\n", "            ", "flops_sum", "+=", "module", ".", "__flops__", "\n", "\n", "", "", "return", "flops_sum", "/", "batches_count", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.flops_counter.start_flops_count": [[193, 202], ["flops_counter.add_batch_counter_hook_function", "flops_counter..apply"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.utils.flops_counter.add_batch_counter_hook_function"], ["", "def", "start_flops_count", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_flops_counting_methods() is\n    called on a desired net object.\n    Activates the computation of mean flops consumption per image.\n    Call it before you run the network.\n    \"\"\"", "\n", "add_batch_counter_hook_function", "(", "self", ")", "\n", "self", ".", "apply", "(", "add_flops_counter_hook_function", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.flops_counter.stop_flops_count": [[204, 213], ["flops_counter.remove_batch_counter_hook_function", "flops_counter..apply"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.utils.flops_counter.remove_batch_counter_hook_function"], ["", "def", "stop_flops_count", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_flops_counting_methods() is\n    called on a desired net object.\n    Stops computing the mean flops consumption per image.\n    Call whenever you want to pause the computation.\n    \"\"\"", "\n", "remove_batch_counter_hook_function", "(", "self", ")", "\n", "self", ".", "apply", "(", "remove_flops_counter_hook_function", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.flops_counter.reset_flops_count": [[215, 223], ["flops_counter.add_batch_counter_variables_or_reset", "flops_counter..apply"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.utils.flops_counter.add_batch_counter_variables_or_reset"], ["", "def", "reset_flops_count", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_flops_counting_methods() is\n    called on a desired net object.\n    Resets statistics computed so far.\n    \"\"\"", "\n", "add_batch_counter_variables_or_reset", "(", "self", ")", "\n", "self", ".", "apply", "(", "add_flops_counter_variable_or_reset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.flops_counter.add_flops_mask": [[225, 232], ["module.apply", "isinstance"], "function", ["None"], ["", "def", "add_flops_mask", "(", "module", ",", "mask", ")", ":", "\n", "\n", "    ", "def", "add_flops_mask_func", "(", "module", ")", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "module", ".", "__mask__", "=", "mask", "\n", "\n", "", "", "module", ".", "apply", "(", "add_flops_mask_func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.flops_counter.remove_flops_mask": [[234, 236], ["module.apply"], "function", ["None"], ["", "def", "remove_flops_mask", "(", "module", ")", ":", "\n", "    ", "module", ".", "apply", "(", "add_flops_mask_variable_or_reset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.flops_counter.is_supported_instance": [[238, 243], ["issubclass", "type"], "function", ["None"], ["", "def", "is_supported_instance", "(", "module", ")", ":", "\n", "    ", "for", "mod", "in", "hook_mapping", ":", "\n", "        ", "if", "issubclass", "(", "type", "(", "module", ")", ",", "mod", ")", ":", "\n", "            ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.flops_counter.empty_flops_counter_hook": [[245, 247], ["None"], "function", ["None"], ["", "def", "empty_flops_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "module", ".", "__flops__", "+=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.flops_counter.upsample_flops_counter_hook": [[249, 256], ["int"], "function", ["None"], ["", "def", "upsample_flops_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "output_size", "=", "output", "[", "0", "]", "\n", "batch_size", "=", "output_size", ".", "shape", "[", "0", "]", "\n", "output_elements_count", "=", "batch_size", "\n", "for", "val", "in", "output_size", ".", "shape", "[", "1", ":", "]", ":", "\n", "        ", "output_elements_count", "*=", "val", "\n", "", "module", ".", "__flops__", "+=", "int", "(", "output_elements_count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.flops_counter.relu_flops_counter_hook": [[258, 261], ["output.numel", "int"], "function", ["None"], ["", "def", "relu_flops_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "active_elements_count", "=", "output", ".", "numel", "(", ")", "\n", "module", ".", "__flops__", "+=", "int", "(", "active_elements_count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.flops_counter.linear_flops_counter_hook": [[263, 267], ["int"], "function", ["None"], ["", "def", "linear_flops_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "input", "=", "input", "[", "0", "]", "\n", "batch_size", "=", "input", ".", "shape", "[", "0", "]", "\n", "module", ".", "__flops__", "+=", "int", "(", "batch_size", "*", "input", ".", "shape", "[", "1", "]", "*", "output", ".", "shape", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.flops_counter.pool_flops_counter_hook": [[269, 272], ["int", "numpy.prod"], "function", ["None"], ["", "def", "pool_flops_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "input", "=", "input", "[", "0", "]", "\n", "module", ".", "__flops__", "+=", "int", "(", "np", ".", "prod", "(", "input", ".", "shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.flops_counter.bn_flops_counter_hook": [[274, 281], ["numpy.prod", "int"], "function", ["None"], ["", "def", "bn_flops_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "input", "=", "input", "[", "0", "]", "\n", "\n", "batch_flops", "=", "np", ".", "prod", "(", "input", ".", "shape", ")", "\n", "if", "module", ".", "affine", ":", "\n", "        ", "batch_flops", "*=", "2", "\n", "", "module", ".", "__flops__", "+=", "int", "(", "batch_flops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.flops_counter.gn_flops_counter_hook": [[283, 292], ["numpy.prod", "int"], "function", ["None"], ["", "def", "gn_flops_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "elems", "=", "np", ".", "prod", "(", "input", "[", "0", "]", ".", "shape", ")", "\n", "# there is no precise FLOPs estimation of computing mean and variance,", "\n", "# and we just set it 2 * elems: half muladds for computing", "\n", "# means and half for computing vars", "\n", "batch_flops", "=", "3", "*", "elems", "\n", "if", "module", ".", "affine", ":", "\n", "        ", "batch_flops", "+=", "elems", "\n", "", "module", ".", "__flops__", "+=", "int", "(", "batch_flops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.flops_counter.deconv_flops_counter_hook": [[294, 319], ["int"], "function", ["None"], ["", "def", "deconv_flops_counter_hook", "(", "conv_module", ",", "input", ",", "output", ")", ":", "\n", "# Can have multiple inputs, getting the first one", "\n", "    ", "input", "=", "input", "[", "0", "]", "\n", "\n", "batch_size", "=", "input", ".", "shape", "[", "0", "]", "\n", "input_height", ",", "input_width", "=", "input", ".", "shape", "[", "2", ":", "]", "\n", "\n", "kernel_height", ",", "kernel_width", "=", "conv_module", ".", "kernel_size", "\n", "in_channels", "=", "conv_module", ".", "in_channels", "\n", "out_channels", "=", "conv_module", ".", "out_channels", "\n", "groups", "=", "conv_module", ".", "groups", "\n", "\n", "filters_per_channel", "=", "out_channels", "//", "groups", "\n", "conv_per_position_flops", "=", "(", "\n", "kernel_height", "*", "kernel_width", "*", "in_channels", "*", "filters_per_channel", ")", "\n", "\n", "active_elements_count", "=", "batch_size", "*", "input_height", "*", "input_width", "\n", "overall_conv_flops", "=", "conv_per_position_flops", "*", "active_elements_count", "\n", "bias_flops", "=", "0", "\n", "if", "conv_module", ".", "bias", "is", "not", "None", ":", "\n", "        ", "output_height", ",", "output_width", "=", "output", ".", "shape", "[", "2", ":", "]", "\n", "bias_flops", "=", "out_channels", "*", "batch_size", "*", "output_height", "*", "output_height", "\n", "", "overall_flops", "=", "overall_conv_flops", "+", "bias_flops", "\n", "\n", "conv_module", ".", "__flops__", "+=", "int", "(", "overall_flops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.flops_counter.conv_flops_counter_hook": [[321, 357], ["list", "list", "int", "numpy.prod", "conv_module.__mask__.expand", "conv_module.__mask__.expand.sum", "numpy.prod"], "function", ["None"], ["", "def", "conv_flops_counter_hook", "(", "conv_module", ",", "input", ",", "output", ")", ":", "\n", "# Can have multiple inputs, getting the first one", "\n", "    ", "input", "=", "input", "[", "0", "]", "\n", "\n", "batch_size", "=", "input", ".", "shape", "[", "0", "]", "\n", "output_dims", "=", "list", "(", "output", ".", "shape", "[", "2", ":", "]", ")", "\n", "\n", "kernel_dims", "=", "list", "(", "conv_module", ".", "kernel_size", ")", "\n", "in_channels", "=", "conv_module", ".", "in_channels", "\n", "out_channels", "=", "conv_module", ".", "out_channels", "\n", "groups", "=", "conv_module", ".", "groups", "\n", "\n", "filters_per_channel", "=", "out_channels", "//", "groups", "\n", "conv_per_position_flops", "=", "np", ".", "prod", "(", "\n", "kernel_dims", ")", "*", "in_channels", "*", "filters_per_channel", "\n", "\n", "active_elements_count", "=", "batch_size", "*", "np", ".", "prod", "(", "output_dims", ")", "\n", "\n", "if", "conv_module", ".", "__mask__", "is", "not", "None", ":", "\n", "# (b, 1, h, w)", "\n", "        ", "output_height", ",", "output_width", "=", "output", ".", "shape", "[", "2", ":", "]", "\n", "flops_mask", "=", "conv_module", ".", "__mask__", ".", "expand", "(", "batch_size", ",", "1", ",", "output_height", ",", "\n", "output_width", ")", "\n", "active_elements_count", "=", "flops_mask", ".", "sum", "(", ")", "\n", "\n", "", "overall_conv_flops", "=", "conv_per_position_flops", "*", "active_elements_count", "\n", "\n", "bias_flops", "=", "0", "\n", "\n", "if", "conv_module", ".", "bias", "is", "not", "None", ":", "\n", "\n", "        ", "bias_flops", "=", "out_channels", "*", "active_elements_count", "\n", "\n", "", "overall_flops", "=", "overall_conv_flops", "+", "bias_flops", "\n", "\n", "conv_module", ".", "__flops__", "+=", "int", "(", "overall_flops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.flops_counter.batch_counter_hook": [[385, 395], ["len", "len", "print"], "function", ["None"], ["def", "batch_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "batch_size", "=", "1", "\n", "if", "len", "(", "input", ")", ">", "0", ":", "\n", "# Can have multiple inputs, getting the first one", "\n", "        ", "input", "=", "input", "[", "0", "]", "\n", "batch_size", "=", "len", "(", "input", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Warning! No positional inputs found for a module, '", "\n", "'assuming batch size is 1.'", ")", "\n", "", "module", ".", "__batch_counter__", "+=", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.flops_counter.add_batch_counter_variables_or_reset": [[397, 399], ["None"], "function", ["None"], ["", "def", "add_batch_counter_variables_or_reset", "(", "module", ")", ":", "\n", "    ", "module", ".", "__batch_counter__", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.flops_counter.add_batch_counter_hook_function": [[401, 407], ["hasattr", "module.register_forward_hook"], "function", ["None"], ["", "def", "add_batch_counter_hook_function", "(", "module", ")", ":", "\n", "    ", "if", "hasattr", "(", "module", ",", "'__batch_counter_handle__'", ")", ":", "\n", "        ", "return", "\n", "\n", "", "handle", "=", "module", ".", "register_forward_hook", "(", "batch_counter_hook", ")", "\n", "module", ".", "__batch_counter_handle__", "=", "handle", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.flops_counter.remove_batch_counter_hook_function": [[409, 413], ["hasattr", "module.__batch_counter_handle__.remove"], "function", ["None"], ["", "def", "remove_batch_counter_hook_function", "(", "module", ")", ":", "\n", "    ", "if", "hasattr", "(", "module", ",", "'__batch_counter_handle__'", ")", ":", "\n", "        ", "module", ".", "__batch_counter_handle__", ".", "remove", "(", ")", "\n", "del", "module", ".", "__batch_counter_handle__", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.flops_counter.add_flops_counter_variable_or_reset": [[415, 418], ["flops_counter.is_supported_instance"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.utils.flops_counter.is_supported_instance"], ["", "", "def", "add_flops_counter_variable_or_reset", "(", "module", ")", ":", "\n", "    ", "if", "is_supported_instance", "(", "module", ")", ":", "\n", "        ", "module", ".", "__flops__", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.flops_counter.add_flops_counter_hook_function": [[420, 431], ["flops_counter.is_supported_instance", "hasattr", "hook_mapping.items", "issubclass", "type", "module.register_forward_hook"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.utils.flops_counter.is_supported_instance"], ["", "", "def", "add_flops_counter_hook_function", "(", "module", ")", ":", "\n", "    ", "if", "is_supported_instance", "(", "module", ")", ":", "\n", "        ", "if", "hasattr", "(", "module", ",", "'__flops_handle__'", ")", ":", "\n", "            ", "return", "\n", "\n", "", "for", "mod_type", ",", "counter_hook", "in", "hook_mapping", ".", "items", "(", ")", ":", "\n", "            ", "if", "issubclass", "(", "type", "(", "module", ")", ",", "mod_type", ")", ":", "\n", "                ", "handle", "=", "module", ".", "register_forward_hook", "(", "counter_hook", ")", "\n", "break", "\n", "\n", "", "", "module", ".", "__flops_handle__", "=", "handle", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.flops_counter.remove_flops_counter_hook_function": [[433, 438], ["flops_counter.is_supported_instance", "hasattr", "module.__flops_handle__.remove"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.utils.flops_counter.is_supported_instance"], ["", "", "def", "remove_flops_counter_hook_function", "(", "module", ")", ":", "\n", "    ", "if", "is_supported_instance", "(", "module", ")", ":", "\n", "        ", "if", "hasattr", "(", "module", ",", "'__flops_handle__'", ")", ":", "\n", "            ", "module", ".", "__flops_handle__", ".", "remove", "(", ")", "\n", "del", "module", ".", "__flops_handle__", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.flops_counter.add_flops_mask_variable_or_reset": [[442, 445], ["flops_counter.is_supported_instance"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.utils.flops_counter.is_supported_instance"], ["", "", "", "def", "add_flops_mask_variable_or_reset", "(", "module", ")", ":", "\n", "    ", "if", "is_supported_instance", "(", "module", ")", ":", "\n", "        ", "module", ".", "__mask__", "=", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.logger.get_root_logger": [[6, 41], ["logging.getLogger", "logging.getLogger.hasHandlers", "logging.basicConfig", "mmcv.runner.get_dist_info", "logging.getLogger.setLevel", "__name__.split", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.FileHandler.setLevel", "logging.getLogger.addHandler", "logging.Formatter"], "function", ["None"], ["def", "get_root_logger", "(", "log_file", "=", "None", ",", "log_level", "=", "logging", ".", "INFO", ")", ":", "\n", "    ", "\"\"\"Get the root logger.\n\n    The logger will be initialized if it has not been initialized. By default a\n    StreamHandler will be added. If `log_file` is specified, a FileHandler will\n    also be added. The name of the root logger is the top-level package name,\n    e.g., \"openselfsup\".\n\n    Args:\n        log_file (str | None): The log filename. If specified, a FileHandler\n            will be added to the root logger.\n        log_level (int): The root logger level. Note that only the process of\n            rank 0 is affected, while other processes will set the level to\n            \"Error\" and be silent most of the time.\n\n    Returns:\n        logging.Logger: The root logger.\n    \"\"\"", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "# i.e., openselfsup", "\n", "# if the logger has been initialized, just return it", "\n", "if", "logger", ".", "hasHandlers", "(", ")", ":", "\n", "        ", "return", "logger", "\n", "\n", "", "format_str", "=", "'%(asctime)s - %(name)s - %(levelname)s - %(message)s'", "\n", "logging", ".", "basicConfig", "(", "format", "=", "format_str", ",", "level", "=", "log_level", ")", "\n", "rank", ",", "_", "=", "get_dist_info", "(", ")", "\n", "if", "rank", "!=", "0", ":", "\n", "        ", "logger", ".", "setLevel", "(", "'ERROR'", ")", "\n", "", "elif", "log_file", "is", "not", "None", ":", "\n", "        ", "file_handler", "=", "logging", ".", "FileHandler", "(", "log_file", ",", "'w'", ")", "\n", "file_handler", ".", "setFormatter", "(", "logging", ".", "Formatter", "(", "format_str", ")", ")", "\n", "file_handler", ".", "setLevel", "(", "log_level", ")", "\n", "logger", ".", "addHandler", "(", "file_handler", ")", "\n", "\n", "", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.logger.print_log": [[43, 67], ["print", "logger.get_root_logger", "get_root_logger.log", "isinstance", "logger.log", "TypeError"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.utils.logger.get_root_logger"], ["", "def", "print_log", "(", "msg", ",", "logger", "=", "None", ",", "level", "=", "logging", ".", "INFO", ")", ":", "\n", "    ", "\"\"\"Print a log message.\n\n    Args:\n        msg (str): The message to be logged.\n        logger (logging.Logger | str | None): The logger to be used. Some\n            special loggers are:\n            - \"root\": the root logger obtained with `get_root_logger()`.\n            - \"silent\": no message will be printed.\n            - None: The `print()` method will be used to print log messages.\n        level (int): Logging level. Only available when `logger` is a Logger\n            object or \"root\".\n    \"\"\"", "\n", "if", "logger", "is", "None", ":", "\n", "        ", "print", "(", "msg", ")", "\n", "", "elif", "logger", "==", "'root'", ":", "\n", "        ", "_logger", "=", "get_root_logger", "(", ")", "\n", "_logger", ".", "log", "(", "level", ",", "msg", ")", "\n", "", "elif", "isinstance", "(", "logger", ",", "logging", ".", "Logger", ")", ":", "\n", "        ", "logger", ".", "log", "(", "level", ",", "msg", ")", "\n", "", "elif", "logger", "!=", "'silent'", ":", "\n", "        ", "raise", "TypeError", "(", "\n", "'logger should be either a logging.Logger object, \"root\", '", "\n", "'\"silent\" or None, but got {}'", ".", "format", "(", "logger", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.registry.Registry.__init__": [[9, 12], ["dict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "        ", "self", ".", "_name", "=", "name", "\n", "self", ".", "_module_dict", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.registry.Registry.__repr__": [[13, 17], ["list", "registry.Registry._module_dict.keys"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "format_str", "=", "self", ".", "__class__", ".", "__name__", "+", "'(name={}, items={})'", ".", "format", "(", "\n", "self", ".", "_name", ",", "list", "(", "self", ".", "_module_dict", ".", "keys", "(", ")", ")", ")", "\n", "return", "format_str", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.registry.Registry.name": [[18, 21], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_name", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.registry.Registry.module_dict": [[22, 25], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "module_dict", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_module_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.registry.Registry.get": [[26, 28], ["registry.Registry._module_dict.get"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.utils.registry.Registry.get"], ["", "def", "get", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "_module_dict", ".", "get", "(", "key", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.registry.Registry._register_module": [[29, 43], ["inspect.isclass", "TypeError", "KeyError", "type"], "methods", ["None"], ["", "def", "_register_module", "(", "self", ",", "module_class", ",", "force", "=", "False", ")", ":", "\n", "        ", "\"\"\"Register a module.\n\n        Args:\n            module (:obj:`nn.Module`): Module to be registered.\n        \"\"\"", "\n", "if", "not", "inspect", ".", "isclass", "(", "module_class", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'module must be a class, but got {}'", ".", "format", "(", "\n", "type", "(", "module_class", ")", ")", ")", "\n", "", "module_name", "=", "module_class", ".", "__name__", "\n", "if", "not", "force", "and", "module_name", "in", "self", ".", "_module_dict", ":", "\n", "            ", "raise", "KeyError", "(", "'{} is already registered in {}'", ".", "format", "(", "\n", "module_name", ",", "self", ".", "name", ")", ")", "\n", "", "self", ".", "_module_dict", "[", "module_name", "]", "=", "module_class", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.registry.Registry.register_module": [[44, 49], ["registry.Registry._register_module", "functools.partial"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.utils.registry.Registry._register_module"], ["", "def", "register_module", "(", "self", ",", "cls", "=", "None", ",", "force", "=", "False", ")", ":", "\n", "        ", "if", "cls", "is", "None", ":", "\n", "            ", "return", "partial", "(", "self", ".", "register_module", ",", "force", "=", "force", ")", "\n", "", "self", ".", "_register_module", "(", "cls", ",", "force", "=", "force", ")", "\n", "return", "cls", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.registry.build_from_cfg": [[51, 80], ["cfg.copy", "cfg.copy.pop", "mmcv.is_str", "registry.get.", "isinstance", "isinstance", "registry.get", "inspect.isclass", "default_args.items", "KeyError", "TypeError", "cfg.copy.setdefault", "type"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.utils.registry.Registry.get"], ["", "", "def", "build_from_cfg", "(", "cfg", ",", "registry", ",", "default_args", "=", "None", ")", ":", "\n", "    ", "\"\"\"Build a module from config dict.\n\n    Args:\n        cfg (dict): Config dict. It should at least contain the key \"type\".\n        registry (:obj:`Registry`): The registry to search the type from.\n        default_args (dict, optional): Default initialization arguments.\n\n    Returns:\n        obj: The constructed object.\n    \"\"\"", "\n", "assert", "isinstance", "(", "cfg", ",", "dict", ")", "and", "'type'", "in", "cfg", "\n", "assert", "isinstance", "(", "default_args", ",", "dict", ")", "or", "default_args", "is", "None", "\n", "args", "=", "cfg", ".", "copy", "(", ")", "\n", "obj_type", "=", "args", ".", "pop", "(", "'type'", ")", "\n", "if", "mmcv", ".", "is_str", "(", "obj_type", ")", ":", "\n", "        ", "obj_cls", "=", "registry", ".", "get", "(", "obj_type", ")", "\n", "if", "obj_cls", "is", "None", ":", "\n", "            ", "raise", "KeyError", "(", "'{} is not in the {} registry'", ".", "format", "(", "\n", "obj_type", ",", "registry", ".", "name", ")", ")", "\n", "", "", "elif", "inspect", ".", "isclass", "(", "obj_type", ")", ":", "\n", "        ", "obj_cls", "=", "obj_type", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "'type must be a str or valid type, but got {}'", ".", "format", "(", "\n", "type", "(", "obj_type", ")", ")", ")", "\n", "", "if", "default_args", "is", "not", "None", ":", "\n", "        ", "for", "name", ",", "value", "in", "default_args", ".", "items", "(", ")", ":", "\n", "            ", "args", ".", "setdefault", "(", "name", ",", "value", ")", "\n", "", "", "return", "obj_cls", "(", "**", "args", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.misc.tensor2imgs": [[8, 19], ["tensor.size", "numpy.array", "numpy.array", "range", "tensor[].cpu().numpy().transpose", "mmcv.imdenormalize().astype", "imgs.append", "numpy.ascontiguousarray", "tensor[].cpu().numpy", "mmcv.imdenormalize", "tensor[].cpu"], "function", ["None"], ["def", "tensor2imgs", "(", "tensor", ",", "mean", "=", "(", "0", ",", "0", ",", "0", ")", ",", "std", "=", "(", "1", ",", "1", ",", "1", ")", ",", "to_rgb", "=", "True", ")", ":", "\n", "    ", "num_imgs", "=", "tensor", ".", "size", "(", "0", ")", "\n", "mean", "=", "np", ".", "array", "(", "mean", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "std", "=", "np", ".", "array", "(", "std", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "imgs", "=", "[", "]", "\n", "for", "img_id", "in", "range", "(", "num_imgs", ")", ":", "\n", "        ", "img", "=", "tensor", "[", "img_id", ",", "...", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "img", "=", "mmcv", ".", "imdenormalize", "(", "\n", "img", ",", "mean", ",", "std", ",", "to_bgr", "=", "to_rgb", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "imgs", ".", "append", "(", "np", ".", "ascontiguousarray", "(", "img", ")", ")", "\n", "", "return", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.misc.multi_apply": [[21, 25], ["six.moves.map", "tuple", "functools.partial", "six.moves.map", "six.moves.zip"], "function", ["None"], ["", "def", "multi_apply", "(", "func", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "pfunc", "=", "partial", "(", "func", ",", "**", "kwargs", ")", "if", "kwargs", "else", "func", "\n", "map_results", "=", "map", "(", "pfunc", ",", "*", "args", ")", "\n", "return", "tuple", "(", "map", "(", "list", ",", "zip", "(", "*", "map_results", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.misc.unmap": [[27, 38], ["data.dim", "data.new_full", "data.new_full", "data.size"], "function", ["None"], ["", "def", "unmap", "(", "data", ",", "count", ",", "inds", ",", "fill", "=", "0", ")", ":", "\n", "    ", "\"\"\"Unmap a subset of item (data) back to the original set of items (of\n    size count).\"\"\"", "\n", "if", "data", ".", "dim", "(", ")", "==", "1", ":", "\n", "        ", "ret", "=", "data", ".", "new_full", "(", "(", "count", ",", ")", ",", "fill", ")", "\n", "ret", "[", "inds", "]", "=", "data", "\n", "", "else", ":", "\n", "        ", "new_size", "=", "(", "count", ",", ")", "+", "data", ".", "size", "(", ")", "[", "1", ":", "]", "\n", "ret", "=", "data", ".", "new_full", "(", "new_size", ",", "fill", ")", "\n", "ret", "[", "inds", ",", ":", "]", "=", "data", "\n", "", "return", "ret", "\n", "", ""]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.collect_env.collect_env": [[14, 60], ["sys.version.replace", "torch.cuda.is_available", "subprocess.check_output", "gcc.decode().strip.decode().strip", "torch.__config__.show", "collections.defaultdict", "range", "collections.defaultdict.items", "os.isdir", "torch.cuda.device_count", "devices[].append", "gcc.decode().strip.decode", "os.join", "subprocess.check_output", "nvcc.decode().strip.decode().strip", "str", "nvcc.decode().strip.decode", "torch.cuda.get_device_name"], "function", ["None"], ["def", "collect_env", "(", ")", ":", "\n", "    ", "\"\"\"Collect the information of the running environments.\"\"\"", "\n", "env_info", "=", "{", "}", "\n", "env_info", "[", "'sys.platform'", "]", "=", "sys", ".", "platform", "\n", "env_info", "[", "'Python'", "]", "=", "sys", ".", "version", ".", "replace", "(", "'\\n'", ",", "''", ")", "\n", "\n", "cuda_available", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "env_info", "[", "'CUDA available'", "]", "=", "cuda_available", "\n", "\n", "if", "cuda_available", ":", "\n", "        ", "from", "torch", ".", "utils", ".", "cpp_extension", "import", "CUDA_HOME", "\n", "env_info", "[", "'CUDA_HOME'", "]", "=", "CUDA_HOME", "\n", "\n", "if", "CUDA_HOME", "is", "not", "None", "and", "osp", ".", "isdir", "(", "CUDA_HOME", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "nvcc", "=", "osp", ".", "join", "(", "CUDA_HOME", ",", "'bin/nvcc'", ")", "\n", "nvcc", "=", "subprocess", ".", "check_output", "(", "\n", "'\"{}\" -V | tail -n1'", ".", "format", "(", "nvcc", ")", ",", "shell", "=", "True", ")", "\n", "nvcc", "=", "nvcc", ".", "decode", "(", "'utf-8'", ")", ".", "strip", "(", ")", "\n", "", "except", "subprocess", ".", "SubprocessError", ":", "\n", "                ", "nvcc", "=", "'Not Available'", "\n", "", "env_info", "[", "'NVCC'", "]", "=", "nvcc", "\n", "\n", "", "devices", "=", "defaultdict", "(", "list", ")", "\n", "for", "k", "in", "range", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ":", "\n", "            ", "devices", "[", "torch", ".", "cuda", ".", "get_device_name", "(", "k", ")", "]", ".", "append", "(", "str", "(", "k", ")", ")", "\n", "", "for", "name", ",", "devids", "in", "devices", ".", "items", "(", ")", ":", "\n", "            ", "env_info", "[", "'GPU '", "+", "','", ".", "join", "(", "devids", ")", "]", "=", "name", "\n", "\n", "", "", "gcc", "=", "subprocess", ".", "check_output", "(", "'gcc --version | head -n1'", ",", "shell", "=", "True", ")", "\n", "gcc", "=", "gcc", ".", "decode", "(", "'utf-8'", ")", ".", "strip", "(", ")", "\n", "env_info", "[", "'GCC'", "]", "=", "gcc", "\n", "\n", "env_info", "[", "'PyTorch'", "]", "=", "torch", ".", "__version__", "\n", "env_info", "[", "'PyTorch compiling details'", "]", "=", "torch", ".", "__config__", ".", "show", "(", ")", "\n", "\n", "env_info", "[", "'TorchVision'", "]", "=", "torchvision", ".", "__version__", "\n", "\n", "env_info", "[", "'OpenCV'", "]", "=", "cv2", ".", "__version__", "\n", "\n", "env_info", "[", "'MMCV'", "]", "=", "mmcv", ".", "__version__", "\n", "env_info", "[", "'OpenSelfSup'", "]", "=", "openselfsup", ".", "__version__", "\n", "#from openselfsup.ops import get_compiler_version, get_compiling_cuda_version", "\n", "#env_info['OpenSelfSup Compiler'] = get_compiler_version()", "\n", "#env_info['OpenSelfSup CUDA Compiler'] = get_compiling_cuda_version()", "\n", "return", "env_info", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.__init__": [[14, 50], ["len", "torch.zeros", "torch.LongTensor", "enumerate", "probs.sum", "probs.div_", "smaller.pop", "larger.pop", "probs.sum", "smaller.append", "larger.append", "len", "len", "smaller.append", "larger.append"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "probs", ")", ":", "\n", "\n", "        ", "if", "probs", ".", "sum", "(", ")", ">", "1", ":", "\n", "            ", "probs", ".", "div_", "(", "probs", ".", "sum", "(", ")", ")", "\n", "", "K", "=", "len", "(", "probs", ")", "\n", "self", ".", "prob", "=", "torch", ".", "zeros", "(", "K", ")", "\n", "self", ".", "alias", "=", "torch", ".", "LongTensor", "(", "[", "0", "]", "*", "K", ")", "\n", "\n", "# Sort the data into the outcomes with probabilities", "\n", "# that are larger and smaller than 1/K.", "\n", "smaller", "=", "[", "]", "\n", "larger", "=", "[", "]", "\n", "for", "kk", ",", "prob", "in", "enumerate", "(", "probs", ")", ":", "\n", "            ", "self", ".", "prob", "[", "kk", "]", "=", "K", "*", "prob", "\n", "if", "self", ".", "prob", "[", "kk", "]", "<", "1.0", ":", "\n", "                ", "smaller", ".", "append", "(", "kk", ")", "\n", "", "else", ":", "\n", "                ", "larger", ".", "append", "(", "kk", ")", "\n", "\n", "# Loop though and create little binary mixtures that", "\n", "# appropriately allocate the larger outcomes over the", "\n", "# overall uniform mixture.", "\n", "", "", "while", "len", "(", "smaller", ")", ">", "0", "and", "len", "(", "larger", ")", ">", "0", ":", "\n", "            ", "small", "=", "smaller", ".", "pop", "(", ")", "\n", "large", "=", "larger", ".", "pop", "(", ")", "\n", "\n", "self", ".", "alias", "[", "small", "]", "=", "large", "\n", "self", ".", "prob", "[", "large", "]", "=", "(", "self", ".", "prob", "[", "large", "]", "-", "1.0", ")", "+", "self", ".", "prob", "[", "small", "]", "\n", "\n", "if", "self", ".", "prob", "[", "large", "]", "<", "1.0", ":", "\n", "                ", "smaller", ".", "append", "(", "large", ")", "\n", "", "else", ":", "\n", "                ", "larger", ".", "append", "(", "large", ")", "\n", "\n", "", "", "for", "last_one", "in", "smaller", "+", "larger", ":", "\n", "            ", "self", ".", "prob", "[", "last_one", "]", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda": [[51, 54], ["alias_multinomial.AliasMethod.prob.cuda", "alias_multinomial.AliasMethod.alias.cuda"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda"], ["", "", "def", "cuda", "(", "self", ")", ":", "\n", "        ", "self", ".", "prob", "=", "self", ".", "prob", ".", "cuda", "(", ")", "\n", "self", ".", "alias", "=", "self", ".", "alias", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.draw": [[55, 76], ["alias_multinomial.AliasMethod.alias.size", "torch.zeros().random_", "alias_multinomial.AliasMethod.prob.index_select", "alias_multinomial.AliasMethod.alias.index_select", "torch.bernoulli", "torch.zeros().random_.mul", "alias_multinomial.AliasMethod.mul", "torch.bernoulli.long", "torch.zeros"], "methods", ["None"], ["", "def", "draw", "(", "self", ",", "N", ")", ":", "\n", "        ", "\"\"\"Draw N samples from multinomial.\n\n        Args:\n            N (int): Number of samples.\n\n        Returns:\n            Tensor: Samples.\n        \"\"\"", "\n", "K", "=", "self", ".", "alias", ".", "size", "(", "0", ")", "\n", "\n", "kk", "=", "torch", ".", "zeros", "(", "\n", "N", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "self", ".", "prob", ".", "device", ")", ".", "random_", "(", "0", ",", "K", ")", "\n", "prob", "=", "self", ".", "prob", ".", "index_select", "(", "0", ",", "kk", ")", "\n", "alias", "=", "self", ".", "alias", ".", "index_select", "(", "0", ",", "kk", ")", "\n", "# b is whether a random number is greater than q", "\n", "b", "=", "torch", ".", "bernoulli", "(", "prob", ")", "\n", "oq", "=", "kk", ".", "mul", "(", "b", ".", "long", "(", ")", ")", "\n", "oj", "=", "alias", ".", "mul", "(", "(", "1", "-", "b", ")", ".", "long", "(", ")", ")", "\n", "\n", "return", "oq", "+", "oj", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.optimizers.LARS.__init__": [[32, 57], ["dict", "torch.optim.optimizer.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.hooks.triplet_hook.TripletHook.__init__"], ["def", "__init__", "(", "self", ",", "\n", "params", ",", "\n", "lr", "=", "required", ",", "\n", "momentum", "=", "0", ",", "\n", "dampening", "=", "0", ",", "\n", "weight_decay", "=", "0", ",", "\n", "eta", "=", "0.001", ",", "\n", "nesterov", "=", "False", ")", ":", "\n", "        ", "if", "lr", "is", "not", "required", "and", "lr", "<", "0.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {}\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "momentum", "<", "0.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid momentum value: {}\"", ".", "format", "(", "momentum", ")", ")", "\n", "", "if", "weight_decay", "<", "0.0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Invalid weight_decay value: {}\"", ".", "format", "(", "weight_decay", ")", ")", "\n", "", "if", "eta", "<", "0.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid LARS coefficient value: {}\"", ".", "format", "(", "eta", ")", ")", "\n", "\n", "", "defaults", "=", "dict", "(", "\n", "lr", "=", "lr", ",", "momentum", "=", "momentum", ",", "dampening", "=", "dampening", ",", "\n", "weight_decay", "=", "weight_decay", ",", "nesterov", "=", "nesterov", ",", "eta", "=", "eta", ")", "\n", "if", "nesterov", "and", "(", "momentum", "<=", "0", "or", "dampening", "!=", "0", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Nesterov momentum requires a momentum and zero dampening\"", ")", "\n", "\n", "", "super", "(", "LARS", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.optimizers.LARS.__setstate__": [[58, 62], ["super().__setstate__", "group.setdefault"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.utils.optimizers.LARS.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "LARS", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "group", ".", "setdefault", "(", "'nesterov'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.optimizers.LARS.step": [[63, 117], ["torch.no_grad", "group.get", "torch.enable_grad", "closure", "d_p.add.add.add().mul", "p.add_", "torch.norm().item", "torch.norm().item", "d_p.add.add.add", "torch.clone().detach", "torch.clone().detach.mul_().add_", "d_p.add.add.add", "torch.norm", "torch.norm", "torch.clone", "torch.clone().detach.mul_"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.conv_module.ConvModule.norm", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.conv_module.ConvModule.norm"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n\n        Args:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "                ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "weight_decay", "=", "group", "[", "'weight_decay'", "]", "\n", "momentum", "=", "group", "[", "'momentum'", "]", "\n", "dampening", "=", "group", "[", "'dampening'", "]", "\n", "eta", "=", "group", "[", "'eta'", "]", "\n", "nesterov", "=", "group", "[", "'nesterov'", "]", "\n", "lr", "=", "group", "[", "'lr'", "]", "\n", "lars_exclude", "=", "group", ".", "get", "(", "'lars_exclude'", ",", "False", ")", "\n", "\n", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "\n", "", "d_p", "=", "p", ".", "grad", "\n", "\n", "if", "lars_exclude", ":", "\n", "                    ", "local_lr", "=", "1.", "\n", "", "else", ":", "\n", "                    ", "weight_norm", "=", "torch", ".", "norm", "(", "p", ")", ".", "item", "(", ")", "\n", "grad_norm", "=", "torch", ".", "norm", "(", "d_p", ")", ".", "item", "(", ")", "\n", "# Compute local learning rate for this layer", "\n", "local_lr", "=", "eta", "*", "weight_norm", "/", "(", "grad_norm", "+", "weight_decay", "*", "weight_norm", ")", "\n", "\n", "", "actual_lr", "=", "local_lr", "*", "lr", "\n", "d_p", "=", "d_p", ".", "add", "(", "p", ",", "alpha", "=", "weight_decay", ")", ".", "mul", "(", "actual_lr", ")", "\n", "if", "momentum", "!=", "0", ":", "\n", "                    ", "param_state", "=", "self", ".", "state", "[", "p", "]", "\n", "if", "'momentum_buffer'", "not", "in", "param_state", ":", "\n", "                        ", "buf", "=", "param_state", "[", "'momentum_buffer'", "]", "=", "torch", ".", "clone", "(", "d_p", ")", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "                        ", "buf", "=", "param_state", "[", "'momentum_buffer'", "]", "\n", "buf", ".", "mul_", "(", "momentum", ")", ".", "add_", "(", "d_p", ",", "alpha", "=", "1", "-", "dampening", ")", "\n", "", "if", "nesterov", ":", "\n", "                        ", "d_p", "=", "d_p", ".", "add", "(", "buf", ",", "alpha", "=", "momentum", ")", "\n", "", "else", ":", "\n", "                        ", "d_p", "=", "buf", "\n", "", "", "p", ".", "add_", "(", "-", "d_p", ")", "\n", "\n", "", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.norm.build_norm_layer": [[12, 56], ["cfg.copy", "cfg.copy.pop", "isinstance", "cfg.copy.pop", "cfg.copy.setdefault", "norm_layer.parameters", "isinstance", "KeyError", "str", "norm_layer", "norm_layer"], "function", ["None"], ["def", "build_norm_layer", "(", "cfg", ",", "num_features", ",", "postfix", "=", "''", ")", ":", "\n", "    ", "\"\"\"Build normalization layer.\n\n    Args:\n        cfg (dict): cfg should contain:\n            type (str): identify norm layer type.\n            layer args: args needed to instantiate a norm layer.\n            requires_grad (bool): [optional] whether stop gradient updates\n        num_features (int): number of channels from input.\n        postfix (int, str): appended into norm abbreviation to\n            create named layer.\n\n    Returns:\n        name (str): abbreviation + postfix\n        layer (nn.Module): created norm layer\n    \"\"\"", "\n", "assert", "isinstance", "(", "cfg", ",", "dict", ")", "and", "'type'", "in", "cfg", "\n", "cfg_", "=", "cfg", ".", "copy", "(", ")", "\n", "\n", "layer_type", "=", "cfg_", ".", "pop", "(", "'type'", ")", "\n", "if", "layer_type", "not", "in", "norm_cfg", ":", "\n", "        ", "raise", "KeyError", "(", "'Unrecognized norm type {}'", ".", "format", "(", "layer_type", ")", ")", "\n", "", "else", ":", "\n", "        ", "abbr", ",", "norm_layer", "=", "norm_cfg", "[", "layer_type", "]", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "", "assert", "isinstance", "(", "postfix", ",", "(", "int", ",", "str", ")", ")", "\n", "name", "=", "abbr", "+", "str", "(", "postfix", ")", "\n", "\n", "requires_grad", "=", "cfg_", ".", "pop", "(", "'requires_grad'", ",", "True", ")", "\n", "cfg_", ".", "setdefault", "(", "'eps'", ",", "1e-5", ")", "\n", "if", "layer_type", "!=", "'GN'", ":", "\n", "        ", "layer", "=", "norm_layer", "(", "num_features", ",", "**", "cfg_", ")", "\n", "# if layer_type == 'SyncBN':", "\n", "#     layer._specify_ddp_gpu_num(1)", "\n", "", "else", ":", "\n", "        ", "assert", "'num_groups'", "in", "cfg_", "\n", "layer", "=", "norm_layer", "(", "num_channels", "=", "num_features", ",", "**", "cfg_", ")", "\n", "\n", "", "for", "param", "in", "layer", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "requires_grad", "=", "requires_grad", "\n", "\n", "", "return", "name", ",", "layer", "\n", "", ""]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.scale.Scale.__init__": [[8, 11], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.hooks.triplet_hook.TripletHook.__init__"], ["def", "__init__", "(", "self", ",", "scale", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "Scale", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "scale", ",", "dtype", "=", "torch", ".", "float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.scale.Scale.forward": [[12, 14], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "*", "self", ".", "scale", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.conv_module.ConvModule.__init__": [[66, 144], ["torch.Module.__init__", "conv_module.build_conv_layer", "conv_module.ConvModule.init_weights", "isinstance", "isinstance", "isinstance", "set", "set", "warnings.warn", "norm.build_norm_layer", "conv_module.ConvModule.add_module", "len", "order.index", "order.index", "ValueError", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.hooks.triplet_hook.TripletHook.__init__", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.conv_module.build_conv_layer", "home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnet.ResNet.init_weights", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.norm.build_norm_layer"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "'auto'", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "None", ",", "\n", "activation", "=", "'relu'", ",", "\n", "inplace", "=", "True", ",", "\n", "order", "=", "(", "'conv'", ",", "'norm'", ",", "'act'", ")", ")", ":", "\n", "        ", "super", "(", "ConvModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "conv_cfg", "is", "None", "or", "isinstance", "(", "conv_cfg", ",", "dict", ")", "\n", "assert", "norm_cfg", "is", "None", "or", "isinstance", "(", "norm_cfg", ",", "dict", ")", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "inplace", "=", "inplace", "\n", "self", ".", "order", "=", "order", "\n", "assert", "isinstance", "(", "self", ".", "order", ",", "tuple", ")", "and", "len", "(", "self", ".", "order", ")", "==", "3", "\n", "assert", "set", "(", "order", ")", "==", "set", "(", "[", "'conv'", ",", "'norm'", ",", "'act'", "]", ")", "\n", "\n", "self", ".", "with_norm", "=", "norm_cfg", "is", "not", "None", "\n", "self", ".", "with_activation", "=", "activation", "is", "not", "None", "\n", "# if the conv layer is before a norm layer, bias is unnecessary.", "\n", "if", "bias", "==", "'auto'", ":", "\n", "            ", "bias", "=", "False", "if", "self", ".", "with_norm", "else", "True", "\n", "", "self", ".", "with_bias", "=", "bias", "\n", "\n", "if", "self", ".", "with_norm", "and", "self", ".", "with_bias", ":", "\n", "            ", "warnings", ".", "warn", "(", "'ConvModule has norm and bias at the same time'", ")", "\n", "\n", "# build convolution layer", "\n", "", "self", ".", "conv", "=", "build_conv_layer", "(", "\n", "conv_cfg", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "bias", ")", "\n", "# export the attributes of self.conv to a higher level for convenience", "\n", "self", ".", "in_channels", "=", "self", ".", "conv", ".", "in_channels", "\n", "self", ".", "out_channels", "=", "self", ".", "conv", ".", "out_channels", "\n", "self", ".", "kernel_size", "=", "self", ".", "conv", ".", "kernel_size", "\n", "self", ".", "stride", "=", "self", ".", "conv", ".", "stride", "\n", "self", ".", "padding", "=", "self", ".", "conv", ".", "padding", "\n", "self", ".", "dilation", "=", "self", ".", "conv", ".", "dilation", "\n", "self", ".", "transposed", "=", "self", ".", "conv", ".", "transposed", "\n", "self", ".", "output_padding", "=", "self", ".", "conv", ".", "output_padding", "\n", "self", ".", "groups", "=", "self", ".", "conv", ".", "groups", "\n", "\n", "# build normalization layers", "\n", "if", "self", ".", "with_norm", ":", "\n", "# norm layer is after conv layer", "\n", "            ", "if", "order", ".", "index", "(", "'norm'", ")", ">", "order", ".", "index", "(", "'conv'", ")", ":", "\n", "                ", "norm_channels", "=", "out_channels", "\n", "", "else", ":", "\n", "                ", "norm_channels", "=", "in_channels", "\n", "", "self", ".", "norm_name", ",", "norm", "=", "build_norm_layer", "(", "norm_cfg", ",", "norm_channels", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm_name", ",", "norm", ")", "\n", "\n", "# build activation layer", "\n", "", "if", "self", ".", "with_activation", ":", "\n", "# TODO: introduce `act_cfg` and supports more activation layers", "\n", "            ", "if", "self", ".", "activation", "not", "in", "[", "'relu'", "]", ":", "\n", "                ", "raise", "ValueError", "(", "'{} is currently not supported.'", ".", "format", "(", "\n", "self", ".", "activation", ")", ")", "\n", "", "if", "self", ".", "activation", "==", "'relu'", ":", "\n", "                ", "self", ".", "activate", "=", "nn", ".", "ReLU", "(", "inplace", "=", "inplace", ")", "\n", "\n", "# Use msra init by default", "\n", "", "", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.conv_module.ConvModule.norm": [[145, 148], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "norm_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.conv_module.ConvModule.init_weights": [[149, 154], ["mmcv.cnn.kaiming_init", "mmcv.cnn.constant_init"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "nonlinearity", "=", "'relu'", "if", "self", ".", "activation", "is", "None", "else", "self", ".", "activation", "\n", "kaiming_init", "(", "self", ".", "conv", ",", "mode", "=", "'fan_in'", ",", "nonlinearity", "=", "nonlinearity", ")", "\n", "if", "self", ".", "with_norm", ":", "\n", "            ", "constant_init", "(", "self", ".", "norm", ",", "1", ",", "bias", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.conv_module.ConvModule.forward": [[155, 164], ["conv_module.ConvModule.conv", "conv_module.ConvModule.norm", "conv_module.ConvModule.activate"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.utils.conv_module.ConvModule.norm"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "activate", "=", "True", ",", "norm", "=", "True", ")", ":", "\n", "        ", "for", "layer", "in", "self", ".", "order", ":", "\n", "            ", "if", "layer", "==", "'conv'", ":", "\n", "                ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "", "elif", "layer", "==", "'norm'", "and", "norm", "and", "self", ".", "with_norm", ":", "\n", "                ", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "", "elif", "layer", "==", "'act'", "and", "activate", "and", "self", ".", "with_activation", ":", "\n", "                ", "x", "=", "self", ".", "activate", "(", "x", ")", "\n", "", "", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.conv_module.build_conv_layer": [[15, 41], ["cfg.copy.pop", "conv_layer", "dict", "cfg.copy", "KeyError", "isinstance"], "function", ["None"], ["def", "build_conv_layer", "(", "cfg", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Build convolution layer.\n\n    Args:\n        cfg (None or dict): Cfg should contain:\n            type (str): Identify conv layer type.\n            layer args: Args needed to instantiate a conv layer.\n\n    Returns:\n        nn.Module: Created conv layer.\n    \"\"\"", "\n", "if", "cfg", "is", "None", ":", "\n", "        ", "cfg_", "=", "dict", "(", "type", "=", "'Conv'", ")", "\n", "", "else", ":", "\n", "        ", "assert", "isinstance", "(", "cfg", ",", "dict", ")", "and", "'type'", "in", "cfg", "\n", "cfg_", "=", "cfg", ".", "copy", "(", ")", "\n", "\n", "", "layer_type", "=", "cfg_", ".", "pop", "(", "'type'", ")", "\n", "if", "layer_type", "not", "in", "conv_cfg", ":", "\n", "        ", "raise", "KeyError", "(", "'Unrecognized norm type {}'", ".", "format", "(", "layer_type", ")", ")", "\n", "", "else", ":", "\n", "        ", "conv_layer", "=", "conv_cfg", "[", "layer_type", "]", "\n", "\n", "", "layer", "=", "conv_layer", "(", "*", "args", ",", "**", "kwargs", ",", "**", "cfg_", ")", "\n", "\n", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.gather_layer.GatherLayer.forward": [[9, 16], ["ctx.save_for_backward", "torch.all_gather", "torch.all_gather", "tuple", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "torch.get_world_size", "torch.get_world_size"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ")", ":", "\n", "        ", "ctx", ".", "save_for_backward", "(", "input", ")", "\n", "output", "=", "[", "torch", ".", "zeros_like", "(", "input", ")", "for", "_", "in", "range", "(", "dist", ".", "get_world_size", "(", ")", ")", "]", "\n", "dist", ".", "all_gather", "(", "output", ",", "input", ")", "\n", "return", "tuple", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.gather_layer.GatherLayer.backward": [[17, 23], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.get_rank", "torch.get_rank"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "*", "grads", ")", ":", "\n", "        ", "input", ",", "=", "ctx", ".", "saved_tensors", "\n", "grad_out", "=", "torch", ".", "zeros_like", "(", "input", ")", "\n", "grad_out", "[", ":", "]", "=", "grads", "[", "dist", ".", "get_rank", "(", ")", "]", "\n", "return", "grad_out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.sobel.Sobel.__init__": [[8, 22], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d.weight.data.fill_", "torch.Conv2d.bias.data.zero_", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d.weight.data[].copy_", "torch.Conv2d.weight.data[].copy_", "torch.Conv2d.bias.data.zero_", "torch.Sequential", "torch.Sequential", "sobel.Sobel.sobel.parameters", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.hooks.triplet_hook.TripletHook.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Sobel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "grayscale", "=", "nn", ".", "Conv2d", "(", "3", ",", "1", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "grayscale", ".", "weight", ".", "data", ".", "fill_", "(", "1.0", "/", "3.0", ")", "\n", "grayscale", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "sobel_filter", "=", "nn", ".", "Conv2d", "(", "1", ",", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "sobel_filter", ".", "weight", ".", "data", "[", "0", ",", "0", "]", ".", "copy_", "(", "\n", "torch", ".", "FloatTensor", "(", "[", "[", "1", ",", "0", ",", "-", "1", "]", ",", "[", "2", ",", "0", ",", "-", "2", "]", ",", "[", "1", ",", "0", ",", "-", "1", "]", "]", ")", ")", "\n", "sobel_filter", ".", "weight", ".", "data", "[", "1", ",", "0", "]", ".", "copy_", "(", "\n", "torch", ".", "FloatTensor", "(", "[", "[", "1", ",", "2", ",", "1", "]", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "2", ",", "-", "1", "]", "]", ")", ")", "\n", "sobel_filter", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "sobel", "=", "nn", ".", "Sequential", "(", "grayscale", ",", "sobel_filter", ")", "\n", "for", "p", "in", "self", ".", "sobel", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.sobel.Sobel.forward": [[23, 25], ["sobel.Sobel.sobel"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "sobel", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.multi_pooling.MultiPooling.__init__": [[19, 34], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.AdaptiveAvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.hooks.triplet_hook.TripletHook.__init__"], ["def", "__init__", "(", "self", ",", "\n", "pool_type", "=", "'adaptive'", ",", "\n", "in_indices", "=", "(", "0", ",", ")", ",", "\n", "backbone", "=", "'resnet50'", ")", ":", "\n", "        ", "super", "(", "MultiPooling", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "pool_type", "in", "[", "'adaptive'", ",", "'specified'", "]", "\n", "if", "pool_type", "==", "'adaptive'", ":", "\n", "            ", "self", ".", "pools", "=", "nn", ".", "ModuleList", "(", "[", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "self", ".", "POOL_SIZES", "[", "backbone", "]", "[", "l", "]", ")", "\n", "for", "l", "in", "in_indices", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "pools", "=", "nn", ".", "ModuleList", "(", "[", "\n", "nn", ".", "AvgPool2d", "(", "**", "self", ".", "POOL_PARAMS", "[", "backbone", "]", "[", "l", "]", ")", "\n", "for", "l", "in", "in_indices", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.multi_pooling.MultiPooling.forward": [[36, 39], ["isinstance", "p", "zip"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "isinstance", "(", "x", ",", "(", "list", ",", "tuple", ")", ")", "\n", "return", "[", "p", "(", "xx", ")", "for", "p", ",", "xx", "in", "zip", "(", "self", ".", "pools", ",", "x", ")", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.accuracy.Accuracy.__init__": [[26, 29], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.hooks.triplet_hook.TripletHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "topk", "=", "topk", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.accuracy.Accuracy.forward": [[30, 32], ["accuracy.accuracy"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.utils.accuracy.accuracy"], ["", "def", "forward", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "return", "accuracy", "(", "pred", ",", "target", ",", "self", ".", "topk", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.accuracy.accuracy": [[4, 22], ["isinstance", "isinstance", "max", "pred.topk", "pred_label.t.t", "pred_label.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "pred.size", "correct[].view"], "function", ["None"], ["def", "accuracy", "(", "pred", ",", "target", ",", "topk", "=", "1", ")", ":", "\n", "    ", "assert", "isinstance", "(", "topk", ",", "(", "int", ",", "tuple", ")", ")", "\n", "if", "isinstance", "(", "topk", ",", "int", ")", ":", "\n", "        ", "topk", "=", "(", "topk", ",", ")", "\n", "return_single", "=", "True", "\n", "", "else", ":", "\n", "        ", "return_single", "=", "False", "\n", "\n", "", "maxk", "=", "max", "(", "topk", ")", "\n", "_", ",", "pred_label", "=", "pred", ".", "topk", "(", "maxk", ",", "dim", "=", "1", ")", "\n", "pred_label", "=", "pred_label", ".", "t", "(", ")", "\n", "correct", "=", "pred_label", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred_label", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "pred", ".", "size", "(", "0", ")", ")", ")", "\n", "", "return", "res", "[", "0", "]", "if", "return_single", "else", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.conv_ws.ConvWS2d.__init__": [[23, 43], ["torch.Conv2d.__init__"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.hooks.triplet_hook.TripletHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "True", ",", "\n", "eps", "=", "1e-5", ")", ":", "\n", "        ", "super", "(", "ConvWS2d", ",", "self", ")", ".", "__init__", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "bias", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.conv_ws.ConvWS2d.forward": [[44, 47], ["conv_ws.conv_ws_2d"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.utils.conv_ws.conv_ws_2d"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "conv_ws_2d", "(", "x", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "\n", "self", ".", "dilation", ",", "self", ".", "groups", ",", "self", ".", "eps", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wanggrun_triplet.utils.conv_ws.conv_ws_2d": [[5, 19], ["weight.size", "weight.view", "weight.view.mean().view", "weight.view.std().view", "torch.conv2d", "weight.view.mean", "weight.view.std"], "function", ["None"], ["def", "conv_ws_2d", "(", "input", ",", "\n", "weight", ",", "\n", "bias", "=", "None", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "eps", "=", "1e-5", ")", ":", "\n", "    ", "c_in", "=", "weight", ".", "size", "(", "0", ")", "\n", "weight_flat", "=", "weight", ".", "view", "(", "c_in", ",", "-", "1", ")", "\n", "mean", "=", "weight_flat", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "view", "(", "c_in", ",", "1", ",", "1", ",", "1", ")", "\n", "std", "=", "weight_flat", ".", "std", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "view", "(", "c_in", ",", "1", ",", "1", ",", "1", ")", "\n", "weight", "=", "(", "weight", "-", "mean", ")", "/", "(", "std", "+", "eps", ")", "\n", "return", "F", ".", "conv2d", "(", "input", ",", "weight", ",", "bias", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.datasets.base.BaseDataset.__init__": [[24, 29], ["builder.build_datasource", "torchvision.transforms.Compose", "base.BaseDataset.utils.build_from_cfg"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.datasets.builder.build_datasource", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.registry.build_from_cfg"], []], "home.repos.pwc.inspect_result.wanggrun_triplet.datasets.base.BaseDataset.__len__": [[30, 32], ["base.BaseDataset.data_source.get_length"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.data_sources.image_list.ImageList.get_length"], []], "home.repos.pwc.inspect_result.wanggrun_triplet.datasets.base.BaseDataset.__getitem__": [[33, 36], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.wanggrun_triplet.datasets.base.BaseDataset.evaluate": [[37, 40], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.wanggrun_triplet.datasets.triplet.TripletDataset.__init__": [[18, 25], ["builder.build_datasource", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "triplet.TripletDataset.utils.build_from_cfg", "triplet.TripletDataset.utils.build_from_cfg"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.datasets.builder.build_datasource", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.registry.build_from_cfg", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.registry.build_from_cfg"], ["def", "__init__", "(", "self", ",", "data_source", ",", "pipeline1", ",", "pipeline2", ",", "prefetch", "=", "False", ")", ":", "\n", "        ", "self", ".", "data_source", "=", "build_datasource", "(", "data_source", ")", "\n", "pipeline1", "=", "[", "build_from_cfg", "(", "p", ",", "PIPELINES", ")", "for", "p", "in", "pipeline1", "]", "\n", "self", ".", "pipeline1", "=", "Compose", "(", "pipeline1", ")", "\n", "pipeline2", "=", "[", "build_from_cfg", "(", "p", ",", "PIPELINES", ")", "for", "p", "in", "pipeline2", "]", "\n", "self", ".", "pipeline2", "=", "Compose", "(", "pipeline2", ")", "\n", "self", ".", "prefetch", "=", "prefetch", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.datasets.triplet.TripletDataset.__len__": [[26, 28], ["triplet.TripletDataset.data_source.get_length"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.data_sources.image_list.ImageList.get_length"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data_source", ".", "get_length", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.datasets.triplet.TripletDataset.__getitem__": [[29, 39], ["triplet.TripletDataset.data_source.get_sample", "triplet.TripletDataset.pipeline1", "triplet.TripletDataset.pipeline2", "torch.cat", "dict", "torch.from_numpy", "torch.from_numpy", "utils.to_numpy", "utils.to_numpy", "torch.from_numpy.unsqueeze", "torch.from_numpy.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.data_sources.image_list.ImageList.get_sample", "home.repos.pwc.inspect_result.wanggrun_triplet.datasets.utils.to_numpy", "home.repos.pwc.inspect_result.wanggrun_triplet.datasets.utils.to_numpy"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img", "=", "self", ".", "data_source", ".", "get_sample", "(", "idx", ")", "\n", "img1", "=", "self", ".", "pipeline1", "(", "img", ")", "\n", "img2", "=", "self", ".", "pipeline2", "(", "img", ")", "\n", "if", "self", ".", "prefetch", ":", "\n", "            ", "img1", "=", "torch", ".", "from_numpy", "(", "to_numpy", "(", "img1", ")", ")", "\n", "img2", "=", "torch", ".", "from_numpy", "(", "to_numpy", "(", "img2", ")", ")", "\n", "\n", "", "img_cat", "=", "torch", ".", "cat", "(", "(", "img1", ".", "unsqueeze", "(", "0", ")", ",", "img2", ".", "unsqueeze", "(", "0", ")", ")", ",", "dim", "=", "0", ")", "\n", "return", "dict", "(", "img", "=", "img_cat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.datasets.triplet.TripletDataset.evaluate": [[40, 42], ["None"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "scores", ",", "keyword", ",", "logger", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplemented", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wanggrun_triplet.datasets.builder._concat_dataset": [[8, 28], ["cfg.get", "cfg.get", "cfg.get", "len", "range", "dataset_wrappers.ConcatDataset", "copy.deepcopy", "isinstance", "isinstance", "isinstance", "datasets.append", "builder.build_dataset"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.wanggrun_triplet.datasets.builder.build_dataset"], ["def", "_concat_dataset", "(", "cfg", ",", "default_args", "=", "None", ")", ":", "\n", "    ", "ann_files", "=", "cfg", "[", "'ann_file'", "]", "\n", "img_prefixes", "=", "cfg", ".", "get", "(", "'img_prefix'", ",", "None", ")", "\n", "seg_prefixes", "=", "cfg", ".", "get", "(", "'seg_prefix'", ",", "None", ")", "\n", "proposal_files", "=", "cfg", ".", "get", "(", "'proposal_file'", ",", "None", ")", "\n", "\n", "datasets", "=", "[", "]", "\n", "num_dset", "=", "len", "(", "ann_files", ")", "\n", "for", "i", "in", "range", "(", "num_dset", ")", ":", "\n", "        ", "data_cfg", "=", "copy", ".", "deepcopy", "(", "cfg", ")", "\n", "data_cfg", "[", "'ann_file'", "]", "=", "ann_files", "[", "i", "]", "\n", "if", "isinstance", "(", "img_prefixes", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "data_cfg", "[", "'img_prefix'", "]", "=", "img_prefixes", "[", "i", "]", "\n", "", "if", "isinstance", "(", "seg_prefixes", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "data_cfg", "[", "'seg_prefix'", "]", "=", "seg_prefixes", "[", "i", "]", "\n", "", "if", "isinstance", "(", "proposal_files", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "data_cfg", "[", "'proposal_file'", "]", "=", "proposal_files", "[", "i", "]", "\n", "", "datasets", ".", "append", "(", "build_dataset", "(", "data_cfg", ",", "default_args", ")", ")", "\n", "\n", "", "return", "ConcatDataset", "(", "datasets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.datasets.builder.build_dataset": [[30, 40], ["isinstance", "dataset_wrappers.ConcatDataset", "dataset_wrappers.RepeatDataset", "openselfsup.utils.build_from_cfg", "builder.build_dataset", "builder.build_dataset"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.utils.registry.build_from_cfg", "home.repos.pwc.inspect_result.wanggrun_triplet.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.wanggrun_triplet.datasets.builder.build_dataset"], ["", "def", "build_dataset", "(", "cfg", ",", "default_args", "=", "None", ")", ":", "\n", "    ", "if", "isinstance", "(", "cfg", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "dataset", "=", "ConcatDataset", "(", "[", "build_dataset", "(", "c", ",", "default_args", ")", "for", "c", "in", "cfg", "]", ")", "\n", "", "elif", "cfg", "[", "'type'", "]", "==", "'RepeatDataset'", ":", "\n", "        ", "dataset", "=", "RepeatDataset", "(", "\n", "build_dataset", "(", "cfg", "[", "'dataset'", "]", ",", "default_args", ")", ",", "cfg", "[", "'times'", "]", ")", "\n", "", "else", ":", "\n", "        ", "dataset", "=", "build_from_cfg", "(", "cfg", ",", "DATASETS", ",", "default_args", ")", "\n", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.datasets.builder.build_datasource": [[42, 44], ["openselfsup.utils.build_from_cfg"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.utils.registry.build_from_cfg"], ["", "def", "build_datasource", "(", "cfg", ")", ":", "\n", "    ", "return", "build_from_cfg", "(", "cfg", ",", "DATASOURCES", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.wanggrun_triplet.datasets.classification.ClassificationDataset.__init__": [[15, 17], ["base.BaseDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.hooks.triplet_hook.TripletHook.__init__"], ["def", "__init__", "(", "self", ",", "data_source", ",", "pipeline", ",", "prefetch", "=", "False", ")", ":", "\n", "        ", "super", "(", "ClassificationDataset", ",", "self", ")", ".", "__init__", "(", "data_source", ",", "pipeline", ",", "prefetch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.datasets.classification.ClassificationDataset.__getitem__": [[18, 24], ["classification.ClassificationDataset.data_source.get_sample", "classification.ClassificationDataset.pipeline", "dict", "torch.from_numpy", "utils.to_numpy"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.data_sources.image_list.ImageList.get_sample", "home.repos.pwc.inspect_result.wanggrun_triplet.datasets.utils.to_numpy"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img", ",", "target", "=", "self", ".", "data_source", ".", "get_sample", "(", "idx", ")", "\n", "img", "=", "self", ".", "pipeline", "(", "img", ")", "\n", "if", "self", ".", "prefetch", ":", "\n", "            ", "img", "=", "torch", ".", "from_numpy", "(", "to_numpy", "(", "img", ")", ")", "\n", "", "return", "dict", "(", "img", "=", "img", ",", "gt_label", "=", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.datasets.classification.ClassificationDataset.evaluate": [[25, 45], ["torch.LongTensor", "scores.size", "scores.topk", "pred.t.t.t", "pred.t.t.eq", "scores.size", "torch.LongTensor.size", "scores.size", "torch.LongTensor.size", "max", "torch.LongTensor.view().expand_as", "correct[].contiguous().view().float().sum().item", "classification.ClassificationDataset.utils.print_log", "torch.LongTensor.view", "correct[].contiguous().view().float().sum", "correct[].contiguous().view().float", "correct[].contiguous().view", "correct[].contiguous"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.utils.logger.print_log"], ["", "def", "evaluate", "(", "self", ",", "scores", ",", "keyword", ",", "logger", "=", "None", ",", "topk", "=", "(", "1", ",", "5", ")", ")", ":", "\n", "        ", "eval_res", "=", "{", "}", "\n", "\n", "target", "=", "torch", ".", "LongTensor", "(", "self", ".", "data_source", ".", "labels", ")", "\n", "assert", "scores", ".", "size", "(", "0", ")", "==", "target", ".", "size", "(", "0", ")", ",", "\"Inconsistent length for results and labels, {} vs {}\"", ".", "format", "(", "\n", "scores", ".", "size", "(", "0", ")", ",", "target", ".", "size", "(", "0", ")", ")", "\n", "num", "=", "scores", ".", "size", "(", "0", ")", "\n", "_", ",", "pred", "=", "scores", ".", "topk", "(", "max", "(", "topk", ")", ",", "dim", "=", "1", ",", "largest", "=", "True", ",", "sorted", "=", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "# KxN", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", ".", "item", "(", ")", "\n", "acc", "=", "correct_k", "*", "100.0", "/", "num", "\n", "eval_res", "[", "\"{}_top{}\"", ".", "format", "(", "keyword", ",", "k", ")", "]", "=", "acc", "\n", "if", "logger", "is", "not", "None", "and", "logger", "!=", "'silent'", ":", "\n", "                ", "print_log", "(", "\n", "\"{}_top{}: {:.03f}\"", ".", "format", "(", "keyword", ",", "k", ",", "acc", ")", ",", "\n", "logger", "=", "logger", ")", "\n", "", "", "return", "eval_res", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wanggrun_triplet.datasets.extraction.ExtractDataset.__init__": [[10, 12], ["base.BaseDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.hooks.triplet_hook.TripletHook.__init__"], ["def", "__init__", "(", "self", ",", "data_source", ",", "pipeline", ")", ":", "\n", "        ", "super", "(", "ExtractDataset", ",", "self", ")", ".", "__init__", "(", "data_source", ",", "pipeline", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.datasets.extraction.ExtractDataset.__getitem__": [[13, 17], ["extraction.ExtractDataset.data_source.get_sample", "extraction.ExtractDataset.pipeline", "dict"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.data_sources.image_list.ImageList.get_sample"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img", "=", "self", ".", "data_source", ".", "get_sample", "(", "idx", ")", "\n", "img", "=", "self", ".", "pipeline", "(", "img", ")", "\n", "return", "dict", "(", "img", "=", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.datasets.extraction.ExtractDataset.evaluate": [[18, 20], ["None"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "scores", ",", "keyword", ",", "logger", "=", "None", ")", ":", "\n", "        ", "raise", "NotImplemented", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wanggrun_triplet.datasets.dataset_wrappers.ConcatDataset.__init__": [[18, 26], ["torch.utils.data.dataset.ConcatDataset.__init__", "hasattr", "range", "numpy.concatenate", "len", "flags.append"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.hooks.triplet_hook.TripletHook.__init__"], ["def", "__init__", "(", "self", ",", "datasets", ")", ":", "\n", "        ", "super", "(", "ConcatDataset", ",", "self", ")", ".", "__init__", "(", "datasets", ")", "\n", "self", ".", "CLASSES", "=", "datasets", "[", "0", "]", ".", "CLASSES", "\n", "if", "hasattr", "(", "datasets", "[", "0", "]", ",", "'flag'", ")", ":", "\n", "            ", "flags", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "datasets", ")", ")", ":", "\n", "                ", "flags", ".", "append", "(", "datasets", "[", "i", "]", ".", "flag", ")", "\n", "", "self", ".", "flag", "=", "np", ".", "concatenate", "(", "flags", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.datasets.dataset_wrappers.RepeatDataset.__init__": [[42, 50], ["hasattr", "len", "numpy.tile"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataset", ",", "times", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "times", "=", "times", "\n", "self", ".", "CLASSES", "=", "dataset", ".", "CLASSES", "\n", "if", "hasattr", "(", "self", ".", "dataset", ",", "'flag'", ")", ":", "\n", "            ", "self", ".", "flag", "=", "np", ".", "tile", "(", "self", ".", "dataset", ".", "flag", ",", "times", ")", "\n", "\n", "", "self", ".", "_ori_len", "=", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.datasets.dataset_wrappers.RepeatDataset.__getitem__": [[51, 53], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "dataset", "[", "idx", "%", "self", ".", "_ori_len", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.datasets.dataset_wrappers.RepeatDataset.__len__": [[54, 56], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "times", "*", "self", ".", "_ori_len", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wanggrun_triplet.datasets.utils.to_numpy": [[4, 10], ["numpy.array", "numpy.rollaxis", "numpy.expand_dims"], "function", ["None"], ["def", "to_numpy", "(", "pil_img", ")", ":", "\n", "    ", "np_img", "=", "np", ".", "array", "(", "pil_img", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "if", "np_img", ".", "ndim", "<", "3", ":", "\n", "        ", "np_img", "=", "np", ".", "expand_dims", "(", "np_img", ",", "axis", "=", "-", "1", ")", "\n", "", "np_img", "=", "np", ".", "rollaxis", "(", "np_img", ",", "2", ")", "# HWC to CHW", "\n", "return", "np_img", "\n", "", ""]], "home.repos.pwc.inspect_result.wanggrun_triplet.data_sources.places205.Places205.__init__": [[8, 11], ["image_list.ImageList.__init__"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.hooks.triplet_hook.TripletHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "list_file", ",", "memcached", ",", "mclient_path", ",", "return_label", "=", "True", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Places205", ",", "self", ")", ".", "__init__", "(", "\n", "root", ",", "list_file", ",", "memcached", ",", "mclient_path", ",", "return_label", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wanggrun_triplet.data_sources.cifar.Cifar.__init__": [[13, 21], ["cifar.Cifar.set_cifar"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.data_sources.cifar.Cifar100.set_cifar"], ["def", "__init__", "(", "self", ",", "root", ",", "split", ",", "return_label", "=", "True", ")", ":", "\n", "        ", "assert", "split", "in", "[", "'train'", ",", "'test'", "]", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "return_label", "=", "return_label", "\n", "self", ".", "cifar", "=", "None", "\n", "self", ".", "set_cifar", "(", ")", "\n", "self", ".", "labels", "=", "self", ".", "cifar", ".", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.data_sources.cifar.Cifar.set_cifar": [[22, 25], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "set_cifar", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.data_sources.cifar.Cifar.get_length": [[26, 28], ["len"], "methods", ["None"], ["", "def", "get_length", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "cifar", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.data_sources.cifar.Cifar.get_sample": [[29, 36], ["PIL.Image.fromarray"], "methods", ["None"], ["", "def", "get_sample", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img", "=", "Image", ".", "fromarray", "(", "self", ".", "cifar", ".", "data", "[", "idx", "]", ")", "\n", "if", "self", ".", "return_label", ":", "\n", "            ", "target", "=", "self", ".", "labels", "[", "idx", "]", "# img: HWC, RGB", "\n", "return", "img", ",", "target", "\n", "", "else", ":", "\n", "            ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.data_sources.cifar.Cifar10.__init__": [[46, 48], ["cifar.Cifar.__init__"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.hooks.triplet_hook.TripletHook.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "split", ",", "return_label", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "root", ",", "split", ",", "return_label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.data_sources.cifar.Cifar10.set_cifar": [[49, 57], ["torchvision.datasets.CIFAR10", "Exception"], "methods", ["None"], ["", "def", "set_cifar", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "self", ".", "cifar", "=", "CIFAR10", "(", "\n", "root", "=", "self", ".", "root", ",", "train", "=", "self", ".", "split", "==", "'train'", ",", "download", "=", "False", ")", "\n", "", "except", ":", "\n", "            ", "raise", "Exception", "(", "\"Please download CIFAR10 manually, \\\n                  in case of downloading the dataset parallelly \\\n                  that may corrupt the dataset.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.data_sources.cifar.Cifar100.__init__": [[62, 64], ["cifar.Cifar.__init__"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.hooks.triplet_hook.TripletHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "split", ",", "return_label", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "root", ",", "split", ",", "return_label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.data_sources.cifar.Cifar100.set_cifar": [[65, 73], ["torchvision.datasets.CIFAR100", "Exception"], "methods", ["None"], ["", "def", "set_cifar", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "self", ".", "cifar", "=", "CIFAR100", "(", "\n", "root", "=", "self", ".", "root", ",", "train", "=", "self", ".", "split", "==", "'train'", ",", "download", "=", "False", ")", "\n", "", "except", ":", "\n", "            ", "raise", "Exception", "(", "\"Please download CIFAR10 manually, \\\n                  in case of downloading the dataset parallelly \\\n                  that may corrupt the dataset.\"", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.wanggrun_triplet.data_sources.image_list.ImageList.__init__": [[11, 26], ["open", "f.readlines", "len", "zip", "os.path.join", "lines[].split", "int", "l.strip", "l.strip().split", "l.strip"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "list_file", ",", "memcached", "=", "False", ",", "mclient_path", "=", "None", ",", "return_label", "=", "True", ")", ":", "\n", "        ", "with", "open", "(", "list_file", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "self", ".", "has_labels", "=", "len", "(", "lines", "[", "0", "]", ".", "split", "(", ")", ")", "==", "2", "\n", "self", ".", "return_label", "=", "return_label", "\n", "if", "self", ".", "has_labels", ":", "\n", "            ", "self", ".", "fns", ",", "self", ".", "labels", "=", "zip", "(", "*", "[", "l", ".", "strip", "(", ")", ".", "split", "(", ")", "for", "l", "in", "lines", "]", ")", "\n", "self", ".", "labels", "=", "[", "int", "(", "l", ")", "for", "l", "in", "self", ".", "labels", "]", "\n", "", "else", ":", "\n", "# assert self.return_label is False", "\n", "            ", "self", ".", "fns", "=", "[", "l", ".", "strip", "(", ")", "for", "l", "in", "lines", "]", "\n", "", "self", ".", "fns", "=", "[", "os", ".", "path", ".", "join", "(", "root", ",", "fn", ")", "for", "fn", "in", "self", ".", "fns", "]", "\n", "self", ".", "memcached", "=", "memcached", "\n", "self", ".", "mclient_path", "=", "mclient_path", "\n", "self", ".", "initialized", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.data_sources.image_list.ImageList._init_memcached": [[27, 32], ["utils.McLoader"], "methods", ["None"], ["", "def", "_init_memcached", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "initialized", ":", "\n", "            ", "assert", "self", ".", "mclient_path", "is", "not", "None", "\n", "self", ".", "mc_loader", "=", "McLoader", "(", "self", ".", "mclient_path", ")", "\n", "self", ".", "initialized", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.data_sources.image_list.ImageList.get_length": [[33, 35], ["len"], "methods", ["None"], ["", "", "def", "get_length", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "fns", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.data_sources.image_list.ImageList.get_sample": [[36, 49], ["PIL.Image.open.convert", "image_list.ImageList._init_memcached", "image_list.ImageList.mc_loader", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.data_sources.image_list.ImageList._init_memcached"], ["", "def", "get_sample", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "memcached", ":", "\n", "            ", "self", ".", "_init_memcached", "(", ")", "\n", "", "if", "self", ".", "memcached", ":", "\n", "            ", "img", "=", "self", ".", "mc_loader", "(", "self", ".", "fns", "[", "idx", "]", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "Image", ".", "open", "(", "self", ".", "fns", "[", "idx", "]", ")", "\n", "", "img", "=", "img", ".", "convert", "(", "'RGB'", ")", "\n", "if", "self", ".", "has_labels", "and", "self", ".", "return_label", ":", "\n", "            ", "target", "=", "self", ".", "labels", "[", "idx", "]", "\n", "return", "img", ",", "target", "\n", "", "else", ":", "\n", "            ", "return", "img", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.wanggrun_triplet.data_sources.imagenet.ImageNet.__init__": [[8, 11], ["image_list.ImageList.__init__"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.hooks.triplet_hook.TripletHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "list_file", ",", "memcached", ",", "mclient_path", ",", "return_label", "=", "True", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ImageNet", ",", "self", ")", ".", "__init__", "(", "\n", "root", ",", "list_file", ",", "memcached", ",", "mclient_path", ",", "return_label", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wanggrun_triplet.data_sources.utils.McLoader.__init__": [[16, 25], ["mc.MemcachedClient.GetInstance"], "methods", ["None"], []], "home.repos.pwc.inspect_result.wanggrun_triplet.data_sources.utils.McLoader.__call__": [[26, 37], ["mc.pyvector", "utils.McLoader.mclient.Get", "mc.ConvertBuffer", "utils.pil_loader", "print"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.data_sources.utils.pil_loader"], []], "home.repos.pwc.inspect_result.wanggrun_triplet.data_sources.utils.pil_loader": [[9, 12], ["io.BytesIO", "PIL.Image.open"], "function", ["None"], ["return", "np_img", "\n", "", ""]], "home.repos.pwc.inspect_result.wanggrun_triplet.pipelines.transforms.RandomAppliedTrans.__init__": [[30, 33], ["torchvision.transforms.RandomApply", "transforms.RandomAppliedTrans.utils.build_from_cfg"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.utils.registry.build_from_cfg"], ["def", "__init__", "(", "self", ",", "transforms", ",", "p", "=", "0.5", ")", ":", "\n", "        ", "t", "=", "[", "build_from_cfg", "(", "t", ",", "PIPELINES", ")", "for", "t", "in", "transforms", "]", "\n", "self", ".", "trans", "=", "_transforms", ".", "RandomApply", "(", "t", ",", "p", "=", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.pipelines.transforms.RandomAppliedTrans.__call__": [[34, 36], ["torchvision.transforms.RandomAppliedTrans.trans"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "return", "self", ".", "trans", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.pipelines.transforms.RandomAppliedTrans.__repr__": [[37, 40], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.pipelines.transforms.Lighting.__init__": [[58, 62], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "alphastd", "=", "0.1", "\n", "self", ".", "eigval", "=", "self", ".", "_IMAGENET_PCA", "[", "'eigval'", "]", "\n", "self", ".", "eigvec", "=", "self", ".", "_IMAGENET_PCA", "[", "'eigvec'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.pipelines.transforms.Lighting.__call__": [[63, 76], ["isinstance", "img.new().resize_().normal_", "torchvision.transforms.Lighting.eigvec.type_as().clone().mul().mul().sum().squeeze", "img.add", "type", "torchvision.transforms.Lighting.view().expand_as", "img.new().resize_", "torchvision.transforms.Lighting.eigvec.type_as().clone().mul().mul().sum", "torchvision.transforms.Lighting.view", "img.new", "torchvision.transforms.Lighting.eigvec.type_as().clone().mul().mul", "torchvision.transforms.Lighting.eigval.view().expand", "torchvision.transforms.Lighting.eigvec.type_as().clone().mul", "img.new().resize_().normal_.view().expand", "torchvision.transforms.Lighting.eigval.view", "torchvision.transforms.Lighting.eigvec.type_as().clone", "img.new().resize_().normal_.view", "torchvision.transforms.Lighting.eigvec.type_as"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "assert", "isinstance", "(", "img", ",", "torch", ".", "Tensor", ")", ",", "\"Expect torch.Tensor, got {}\"", ".", "format", "(", "type", "(", "img", ")", ")", "\n", "if", "self", ".", "alphastd", "==", "0", ":", "\n", "            ", "return", "img", "\n", "\n", "", "alpha", "=", "img", ".", "new", "(", ")", ".", "resize_", "(", "3", ")", ".", "normal_", "(", "0", ",", "self", ".", "alphastd", ")", "\n", "rgb", "=", "self", ".", "eigvec", ".", "type_as", "(", "img", ")", ".", "clone", "(", ")", ".", "mul", "(", "alpha", ".", "view", "(", "1", ",", "3", ")", ".", "expand", "(", "3", ",", "3", ")", ")", ".", "mul", "(", "self", ".", "eigval", ".", "view", "(", "1", ",", "3", ")", ".", "expand", "(", "3", ",", "3", ")", ")", ".", "sum", "(", "1", ")", ".", "squeeze", "(", ")", "\n", "\n", "return", "img", ".", "add", "(", "rgb", ".", "view", "(", "3", ",", "1", ",", "1", ")", ".", "expand_as", "(", "img", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.pipelines.transforms.Lighting.__repr__": [[77, 80], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.pipelines.transforms.GaussianBlur.__init__": [[86, 89], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sigma_min", ",", "sigma_max", ")", ":", "\n", "        ", "self", ".", "sigma_min", "=", "sigma_min", "\n", "self", ".", "sigma_max", "=", "sigma_max", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.pipelines.transforms.GaussianBlur.__call__": [[90, 94], ["numpy.random.uniform", "img.filter.filter.filter", "PIL.ImageFilter.GaussianBlur"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "sigma", "=", "np", ".", "random", ".", "uniform", "(", "self", ".", "sigma_min", ",", "self", ".", "sigma_max", ")", "\n", "img", "=", "img", ".", "filter", "(", "ImageFilter", ".", "GaussianBlur", "(", "radius", "=", "sigma", ")", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.pipelines.transforms.GaussianBlur.__repr__": [[95, 98], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.pipelines.transforms.Solarization.__init__": [[104, 106], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "threshold", "=", "128", ")", ":", "\n", "        ", "self", ".", "threshold", "=", "threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.pipelines.transforms.Solarization.__call__": [[107, 111], ["numpy.array", "numpy.where", "PIL.Image.fromarray", "numpy.where.astype"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "img", "=", "np", ".", "where", "(", "img", "<", "self", ".", "threshold", ",", "img", ",", "255", "-", "img", ")", "\n", "return", "Image", ".", "fromarray", "(", "img", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.pipelines.transforms.Solarization.__repr__": [[112, 115], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "return", "repr_str", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wanggrun_triplet.loader.sampler.DistributedSampler.__init__": [[13, 23], ["torch.utils.data.DistributedSampler.__init__"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.hooks.triplet_hook.TripletHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "dataset", ",", "\n", "num_replicas", "=", "None", ",", "\n", "rank", "=", "None", ",", "\n", "shuffle", "=", "True", ",", "\n", "replace", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset", ",", "num_replicas", "=", "num_replicas", ",", "rank", "=", "rank", ")", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "replace", "=", "replace", "\n", "self", ".", "unif_sampling_flag", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.loader.sampler.DistributedSampler.__iter__": [[24, 32], ["iter", "sampler.DistributedSampler.generate_new_list"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.loader.sampler.DistributedSampler.generate_new_list"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "# deterministically shuffle based on epoch", "\n", "        ", "if", "not", "self", ".", "unif_sampling_flag", ":", "\n", "            ", "self", ".", "generate_new_list", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "unif_sampling_flag", "=", "False", "\n", "", "return", "iter", "(", "self", ".", "indices", "[", "self", ".", "rank", "*", "self", ".", "num_samples", ":", "(", "self", ".", "rank", "+", "1", ")", "*", "\n", "self", ".", "num_samples", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.loader.sampler.DistributedSampler.generate_new_list": [[33, 53], ["torch.Generator", "torch.Generator.manual_seed", "torch.arange().tolist", "len", "torch.randint().tolist", "torch.randperm().tolist", "torch.arange", "len", "torch.randint", "torch.randperm", "len", "len", "len", "len"], "methods", ["None"], ["", "def", "generate_new_list", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "shuffle", ":", "\n", "            ", "g", "=", "torch", ".", "Generator", "(", ")", "\n", "g", ".", "manual_seed", "(", "self", ".", "epoch", ")", "\n", "if", "self", ".", "replace", ":", "\n", "                ", "indices", "=", "torch", ".", "randint", "(", "\n", "low", "=", "0", ",", "\n", "high", "=", "len", "(", "self", ".", "dataset", ")", ",", "\n", "size", "=", "(", "len", "(", "self", ".", "dataset", ")", ",", ")", ",", "\n", "generator", "=", "g", ")", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "                ", "indices", "=", "torch", ".", "randperm", "(", "\n", "len", "(", "self", ".", "dataset", ")", ",", "generator", "=", "g", ")", ".", "tolist", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "indices", "=", "torch", ".", "arange", "(", "len", "(", "self", ".", "dataset", ")", ")", ".", "tolist", "(", ")", "\n", "\n", "# add extra samples to make it evenly divisible", "\n", "", "indices", "+=", "indices", "[", ":", "(", "self", ".", "total_size", "-", "len", "(", "indices", ")", ")", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "total_size", "\n", "self", ".", "indices", "=", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.loader.sampler.DistributedSampler.set_uniform_indices": [[54, 82], ["numpy.random.seed", "len", "enumerate", "enumerate", "numpy.array", "numpy.random.shuffle", "indices[].astype().tolist", "len", "len", "int", "images_lists[].append", "indices[].astype().tolist.extend", "len", "len", "len", "len", "range", "len", "numpy.random.choice", "indices[].astype", "len", "len"], "methods", ["None"], ["", "def", "set_uniform_indices", "(", "self", ",", "labels", ",", "num_classes", ")", ":", "\n", "        ", "self", ".", "unif_sampling_flag", "=", "True", "\n", "assert", "self", ".", "shuffle", ",", "\"Using uniform sampling, the indices must be shuffled.\"", "\n", "np", ".", "random", ".", "seed", "(", "self", ".", "epoch", ")", "\n", "assert", "(", "len", "(", "labels", ")", "==", "len", "(", "self", ".", "dataset", ")", ")", "\n", "N", "=", "len", "(", "labels", ")", "\n", "size_per_label", "=", "int", "(", "N", "/", "num_classes", ")", "+", "1", "\n", "indices", "=", "[", "]", "\n", "images_lists", "=", "[", "[", "]", "for", "i", "in", "range", "(", "num_classes", ")", "]", "\n", "for", "i", ",", "l", "in", "enumerate", "(", "labels", ")", ":", "\n", "            ", "images_lists", "[", "l", "]", ".", "append", "(", "i", ")", "\n", "", "for", "i", ",", "l", "in", "enumerate", "(", "images_lists", ")", ":", "\n", "            ", "if", "len", "(", "l", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "indices", ".", "extend", "(", "\n", "np", ".", "random", ".", "choice", "(", "\n", "l", ",", "size_per_label", ",", "replace", "=", "(", "len", "(", "l", ")", "<=", "size_per_label", ")", ")", ")", "\n", "", "indices", "=", "np", ".", "array", "(", "indices", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "indices", ")", "\n", "indices", "=", "indices", "[", ":", "N", "]", ".", "astype", "(", "np", ".", "int", ")", ".", "tolist", "(", ")", "\n", "\n", "# add extra samples to make it evenly divisible", "\n", "assert", "len", "(", "indices", ")", "<=", "self", ".", "total_size", ",", "\"{} vs {}\"", ".", "format", "(", "len", "(", "indices", ")", ",", "self", ".", "total_size", ")", "\n", "indices", "+=", "indices", "[", ":", "(", "self", ".", "total_size", "-", "len", "(", "indices", ")", ")", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "total_size", ",", "\"{} vs {}\"", ".", "format", "(", "len", "(", "indices", ")", ",", "self", ".", "total_size", ")", "\n", "self", ".", "indices", "=", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.loader.sampler.GroupSampler.__init__": [[86, 96], ["hasattr", "dataset.flag.astype", "numpy.bincount", "enumerate", "int", "numpy.ceil"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "samples_per_gpu", "=", "1", ")", ":", "\n", "        ", "assert", "hasattr", "(", "dataset", ",", "'flag'", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "samples_per_gpu", "=", "samples_per_gpu", "\n", "self", ".", "flag", "=", "dataset", ".", "flag", ".", "astype", "(", "np", ".", "int64", ")", "\n", "self", ".", "group_sizes", "=", "np", ".", "bincount", "(", "self", ".", "flag", ")", "\n", "self", ".", "num_samples", "=", "0", "\n", "for", "i", ",", "size", "in", "enumerate", "(", "self", ".", "group_sizes", ")", ":", "\n", "            ", "self", ".", "num_samples", "+=", "int", "(", "np", ".", "ceil", "(", "\n", "size", "/", "self", ".", "samples_per_gpu", ")", ")", "*", "self", ".", "samples_per_gpu", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.loader.sampler.GroupSampler.__iter__": [[97, 120], ["enumerate", "numpy.concatenate", "numpy.concatenate", "indices.astype().tolist.astype().tolist.astype().tolist", "iter", "numpy.random.shuffle", "numpy.concatenate", "indices.astype().tolist.astype().tolist.append", "len", "numpy.where", "len", "len", "numpy.random.permutation", "indices.astype().tolist.astype().tolist.astype", "int", "numpy.random.choice", "range", "numpy.ceil", "len"], "methods", ["None"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "indices", "=", "[", "]", "\n", "for", "i", ",", "size", "in", "enumerate", "(", "self", ".", "group_sizes", ")", ":", "\n", "            ", "if", "size", "==", "0", ":", "\n", "                ", "continue", "\n", "", "indice", "=", "np", ".", "where", "(", "self", ".", "flag", "==", "i", ")", "[", "0", "]", "\n", "assert", "len", "(", "indice", ")", "==", "size", "\n", "np", ".", "random", ".", "shuffle", "(", "indice", ")", "\n", "num_extra", "=", "int", "(", "np", ".", "ceil", "(", "size", "/", "self", ".", "samples_per_gpu", ")", "\n", ")", "*", "self", ".", "samples_per_gpu", "-", "len", "(", "indice", ")", "\n", "indice", "=", "np", ".", "concatenate", "(", "\n", "[", "indice", ",", "np", ".", "random", ".", "choice", "(", "indice", ",", "num_extra", ")", "]", ")", "\n", "indices", ".", "append", "(", "indice", ")", "\n", "", "indices", "=", "np", ".", "concatenate", "(", "indices", ")", "\n", "indices", "=", "[", "\n", "indices", "[", "i", "*", "self", ".", "samples_per_gpu", ":", "(", "i", "+", "1", ")", "*", "self", ".", "samples_per_gpu", "]", "\n", "for", "i", "in", "np", ".", "random", ".", "permutation", "(", "\n", "range", "(", "len", "(", "indices", ")", "//", "self", ".", "samples_per_gpu", ")", ")", "\n", "]", "\n", "indices", "=", "np", ".", "concatenate", "(", "indices", ")", "\n", "indices", "=", "indices", ".", "astype", "(", "np", ".", "int64", ")", ".", "tolist", "(", ")", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "num_samples", "\n", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.loader.sampler.GroupSampler.__len__": [[121, 123], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.loader.sampler.DistributedGroupSampler.__init__": [[143, 169], ["mmcv.runner.get_dist_info", "hasattr", "numpy.bincount", "enumerate", "int", "math.ceil"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "dataset", ",", "\n", "samples_per_gpu", "=", "1", ",", "\n", "num_replicas", "=", "None", ",", "\n", "rank", "=", "None", ")", ":", "\n", "        ", "_rank", ",", "_num_replicas", "=", "get_dist_info", "(", ")", "\n", "if", "num_replicas", "is", "None", ":", "\n", "            ", "num_replicas", "=", "_num_replicas", "\n", "", "if", "rank", "is", "None", ":", "\n", "            ", "rank", "=", "_rank", "\n", "", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "samples_per_gpu", "=", "samples_per_gpu", "\n", "self", ".", "num_replicas", "=", "num_replicas", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "epoch", "=", "0", "\n", "\n", "assert", "hasattr", "(", "self", ".", "dataset", ",", "'flag'", ")", "\n", "self", ".", "flag", "=", "self", ".", "dataset", ".", "flag", "\n", "self", ".", "group_sizes", "=", "np", ".", "bincount", "(", "self", ".", "flag", ")", "\n", "\n", "self", ".", "num_samples", "=", "0", "\n", "for", "i", ",", "j", "in", "enumerate", "(", "self", ".", "group_sizes", ")", ":", "\n", "            ", "self", ".", "num_samples", "+=", "int", "(", "\n", "math", ".", "ceil", "(", "self", ".", "group_sizes", "[", "i", "]", "*", "1.0", "/", "self", ".", "samples_per_gpu", "/", "\n", "self", ".", "num_replicas", ")", ")", "*", "self", ".", "samples_per_gpu", "\n", "", "self", ".", "total_size", "=", "self", ".", "num_samples", "*", "self", ".", "num_replicas", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.loader.sampler.DistributedGroupSampler.__iter__": [[170, 209], ["torch.Generator", "torch.Generator.manual_seed", "enumerate", "iter", "len", "len", "indice[].tolist", "indice[].tolist.copy", "range", "indice[].tolist.extend", "indices.extend", "list", "range", "numpy.where", "len", "len", "indice[].tolist.extend", "torch.randperm", "int", "len", "list", "math.ceil", "torch.randperm", "int"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "# deterministically shuffle based on epoch", "\n", "        ", "g", "=", "torch", ".", "Generator", "(", ")", "\n", "g", ".", "manual_seed", "(", "self", ".", "epoch", ")", "\n", "\n", "indices", "=", "[", "]", "\n", "for", "i", ",", "size", "in", "enumerate", "(", "self", ".", "group_sizes", ")", ":", "\n", "            ", "if", "size", ">", "0", ":", "\n", "                ", "indice", "=", "np", ".", "where", "(", "self", ".", "flag", "==", "i", ")", "[", "0", "]", "\n", "assert", "len", "(", "indice", ")", "==", "size", "\n", "indice", "=", "indice", "[", "list", "(", "torch", ".", "randperm", "(", "int", "(", "size", ")", ",", "\n", "generator", "=", "g", ")", ")", "]", ".", "tolist", "(", ")", "\n", "extra", "=", "int", "(", "\n", "math", ".", "ceil", "(", "\n", "size", "*", "1.0", "/", "self", ".", "samples_per_gpu", "/", "self", ".", "num_replicas", ")", "\n", ")", "*", "self", ".", "samples_per_gpu", "*", "self", ".", "num_replicas", "-", "len", "(", "indice", ")", "\n", "# pad indice", "\n", "tmp", "=", "indice", ".", "copy", "(", ")", "\n", "for", "_", "in", "range", "(", "extra", "//", "size", ")", ":", "\n", "                    ", "indice", ".", "extend", "(", "tmp", ")", "\n", "", "indice", ".", "extend", "(", "tmp", "[", ":", "extra", "%", "size", "]", ")", "\n", "indices", ".", "extend", "(", "indice", ")", "\n", "\n", "", "", "assert", "len", "(", "indices", ")", "==", "self", ".", "total_size", "\n", "\n", "indices", "=", "[", "\n", "indices", "[", "j", "]", "for", "i", "in", "list", "(", "\n", "torch", ".", "randperm", "(", "\n", "len", "(", "indices", ")", "//", "self", ".", "samples_per_gpu", ",", "generator", "=", "g", ")", ")", "\n", "for", "j", "in", "range", "(", "i", "*", "self", ".", "samples_per_gpu", ",", "(", "i", "+", "1", ")", "*", "\n", "self", ".", "samples_per_gpu", ")", "\n", "]", "\n", "\n", "# subsample", "\n", "offset", "=", "self", ".", "num_samples", "*", "self", ".", "rank", "\n", "indices", "=", "indices", "[", "offset", ":", "offset", "+", "self", ".", "num_samples", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "num_samples", "\n", "\n", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.loader.sampler.DistributedGroupSampler.__len__": [[210, 212], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.loader.sampler.DistributedGroupSampler.set_epoch": [[213, 215], ["None"], "methods", ["None"], ["", "def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.loader.sampler.DistributedGivenIterationSampler.__init__": [[219, 238], ["mmcv.runner.get_dist_info", "sampler.DistributedGivenIterationSampler.gen_new_list"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.loader.sampler.DistributedGivenIterationSampler.gen_new_list"], ["    ", "def", "__init__", "(", "self", ",", "\n", "dataset", ",", "\n", "total_iter", ",", "\n", "batch_size", ",", "\n", "num_replicas", "=", "None", ",", "\n", "rank", "=", "None", ",", "\n", "last_iter", "=", "-", "1", ")", ":", "\n", "        ", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "assert", "rank", "<", "world_size", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "total_iter", "=", "total_iter", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "world_size", "=", "world_size", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "last_iter", "=", "last_iter", "\n", "\n", "self", ".", "total_size", "=", "self", ".", "total_iter", "*", "self", ".", "batch_size", "\n", "\n", "self", ".", "indices", "=", "self", ".", "gen_new_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.loader.sampler.DistributedGivenIterationSampler.__iter__": [[239, 241], ["iter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "indices", "[", "(", "self", ".", "last_iter", "+", "1", ")", "*", "self", ".", "batch_size", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.loader.sampler.DistributedGivenIterationSampler.set_uniform_indices": [[242, 273], ["numpy.random.seed", "len", "enumerate", "enumerate", "numpy.array", "numpy.random.shuffle", "indices[].astype", "numpy.tile", "numpy.random.shuffle", "len", "len", "int", "images_lists[].append", "numpy.tile.extend", "len", "range", "len", "numpy.random.choice", "len"], "methods", ["None"], ["", "def", "set_uniform_indices", "(", "self", ",", "labels", ",", "num_classes", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "assert", "(", "len", "(", "labels", ")", "==", "len", "(", "self", ".", "dataset", ")", ")", "\n", "N", "=", "len", "(", "labels", ")", "\n", "size_per_label", "=", "int", "(", "N", "/", "num_classes", ")", "+", "1", "\n", "indices", "=", "[", "]", "\n", "images_lists", "=", "[", "[", "]", "for", "i", "in", "range", "(", "num_classes", ")", "]", "\n", "for", "i", ",", "l", "in", "enumerate", "(", "labels", ")", ":", "\n", "            ", "images_lists", "[", "l", "]", ".", "append", "(", "i", ")", "\n", "", "for", "i", ",", "l", "in", "enumerate", "(", "images_lists", ")", ":", "\n", "            ", "if", "len", "(", "l", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "indices", ".", "extend", "(", "\n", "np", ".", "random", ".", "choice", "(", "\n", "l", ",", "size_per_label", ",", "replace", "=", "(", "len", "(", "l", ")", "<=", "size_per_label", ")", ")", ")", "\n", "", "indices", "=", "np", ".", "array", "(", "indices", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "indices", ")", "\n", "indices", "=", "indices", "[", ":", "N", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "# repeat", "\n", "all_size", "=", "self", ".", "total_size", "*", "self", ".", "world_size", "\n", "indices", "=", "indices", "[", ":", "all_size", "]", "\n", "num_repeat", "=", "(", "all_size", "-", "1", ")", "//", "indices", ".", "shape", "[", "0", "]", "+", "1", "\n", "indices", "=", "np", ".", "tile", "(", "indices", ",", "num_repeat", ")", "\n", "indices", "=", "indices", "[", ":", "all_size", "]", "\n", "np", ".", "random", ".", "shuffle", "(", "indices", ")", "\n", "# slice", "\n", "beg", "=", "self", ".", "total_size", "*", "self", ".", "rank", "\n", "indices", "=", "indices", "[", "beg", ":", "beg", "+", "self", ".", "total_size", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "total_size", "\n", "# set", "\n", "self", ".", "indices", "=", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.loader.sampler.DistributedGivenIterationSampler.gen_new_list": [[274, 293], ["numpy.random.seed", "numpy.arange", "numpy.tile", "numpy.random.shuffle", "len", "len"], "methods", ["None"], ["", "def", "gen_new_list", "(", "self", ")", ":", "\n", "\n", "# each process shuffle all list with same seed, and pick one piece according to rank", "\n", "        ", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "\n", "all_size", "=", "self", ".", "total_size", "*", "self", ".", "world_size", "\n", "indices", "=", "np", ".", "arange", "(", "len", "(", "self", ".", "dataset", ")", ")", "\n", "indices", "=", "indices", "[", ":", "all_size", "]", "\n", "num_repeat", "=", "(", "all_size", "-", "1", ")", "//", "indices", ".", "shape", "[", "0", "]", "+", "1", "\n", "indices", "=", "np", ".", "tile", "(", "indices", ",", "num_repeat", ")", "\n", "indices", "=", "indices", "[", ":", "all_size", "]", "\n", "\n", "np", ".", "random", ".", "shuffle", "(", "indices", ")", "\n", "beg", "=", "self", ".", "total_size", "*", "self", ".", "rank", "\n", "indices", "=", "indices", "[", "beg", ":", "beg", "+", "self", ".", "total_size", "]", "\n", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "total_size", "\n", "\n", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.loader.sampler.DistributedGivenIterationSampler.__len__": [[294, 300], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "# note here we do not take last iter into consideration, since __len__", "\n", "# should only be used for displaying, the correct remaining size is", "\n", "# handled by dataloader", "\n", "#return self.total_size - (self.last_iter+1)*self.batch_size", "\n", "        ", "return", "self", ".", "total_size", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.loader.sampler.DistributedGivenIterationSampler.set_epoch": [[301, 303], ["None"], "methods", ["None"], ["", "def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wanggrun_triplet.loader.build_loader.PrefetchLoader.__init__": [[98, 102], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "loader", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "loader", "=", "loader", "\n", "self", ".", "_mean", "=", "mean", "\n", "self", ".", "_std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.loader.build_loader.PrefetchLoader.__iter__": [[103, 123], ["torch.cuda.Stream", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.cuda.current_stream().wait_stream", "torch.tensor().cuda", "torch.tensor().cuda", "torch.cuda.stream", "next_input_dict[].cuda", "next_input_dict[].cuda.float().sub_().div_", "torch.cuda.current_stream", "torch.tensor", "torch.tensor", "next_input_dict[].cuda.float().sub_", "next_input_dict[].cuda.float"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "stream", "=", "torch", ".", "cuda", ".", "Stream", "(", ")", "\n", "first", "=", "True", "\n", "self", ".", "mean", "=", "torch", ".", "tensor", "(", "[", "x", "*", "255", "for", "x", "in", "self", ".", "_mean", "]", ")", ".", "cuda", "(", ")", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "std", "=", "torch", ".", "tensor", "(", "[", "x", "*", "255", "for", "x", "in", "self", ".", "_std", "]", ")", ".", "cuda", "(", ")", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "\n", "for", "next_input_dict", "in", "self", ".", "loader", ":", "\n", "            ", "with", "torch", ".", "cuda", ".", "stream", "(", "stream", ")", ":", "\n", "                ", "data", "=", "next_input_dict", "[", "'img'", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "next_input_dict", "[", "'img'", "]", "=", "data", ".", "float", "(", ")", ".", "sub_", "(", "self", ".", "mean", ")", ".", "div_", "(", "self", ".", "std", ")", "\n", "\n", "", "if", "not", "first", ":", "\n", "                ", "yield", "input", "\n", "", "else", ":", "\n", "                ", "first", "=", "False", "\n", "\n", "", "torch", ".", "cuda", ".", "current_stream", "(", ")", ".", "wait_stream", "(", "stream", ")", "\n", "input", "=", "next_input_dict", "\n", "\n", "", "yield", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.loader.build_loader.PrefetchLoader.__len__": [[124, 126], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.loader.build_loader.PrefetchLoader.sampler": [[127, 130], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "sampler", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "loader", ".", "sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.loader.build_loader.PrefetchLoader.dataset": [[131, 134], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dataset", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "loader", ".", "dataset", "", "", "", ""]], "home.repos.pwc.inspect_result.wanggrun_triplet.loader.build_loader.build_dataloader": [[22, 87], ["torch.utils.data.DataLoader", "mmcv.runner.get_dist_info", "sampler.DistributedSampler", "kwargs.get", "kwargs.pop", "kwargs.pop", "build_loader.PrefetchLoader", "torch.utils.data.RandomSampler", "functools.partial"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.utils.registry.Registry.get"], ["", "def", "build_dataloader", "(", "dataset", ",", "\n", "imgs_per_gpu", ",", "\n", "workers_per_gpu", ",", "\n", "num_gpus", "=", "1", ",", "\n", "dist", "=", "True", ",", "\n", "shuffle", "=", "True", ",", "\n", "replace", "=", "False", ",", "\n", "seed", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Build PyTorch DataLoader.\n\n    In distributed training, each GPU/process has a dataloader.\n    In non-distributed training, there is only one dataloader for all GPUs.\n\n    Args:\n        dataset (Dataset): A PyTorch dataset.\n        imgs_per_gpu (int): Number of images on each GPU, i.e., batch size of\n            each GPU.\n        workers_per_gpu (int): How many subprocesses to use for data loading\n            for each GPU.\n        num_gpus (int): Number of GPUs. Only used in non-distributed training.\n        dist (bool): Distributed training/test or not. Default: True.\n        shuffle (bool): Whether to shuffle the data at every epoch.\n            Default: True.\n        replace (bool): Replace or not in random shuffle.\n            It works on when shuffle is True.\n        kwargs: any keyword argument to be used to initialize DataLoader\n\n    Returns:\n        DataLoader: A PyTorch dataloader.\n    \"\"\"", "\n", "if", "dist", ":", "\n", "        ", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "sampler", "=", "DistributedSampler", "(", "\n", "dataset", ",", "world_size", ",", "rank", ",", "shuffle", "=", "shuffle", ",", "replace", "=", "replace", ")", "\n", "batch_size", "=", "imgs_per_gpu", "\n", "num_workers", "=", "workers_per_gpu", "\n", "", "else", ":", "\n", "        ", "if", "replace", ":", "\n", "            ", "raise", "NotImplemented", "\n", "", "sampler", "=", "RandomSampler", "(", "\n", "dataset", ")", "if", "shuffle", "else", "None", "# TODO: set replace", "\n", "batch_size", "=", "num_gpus", "*", "imgs_per_gpu", "\n", "num_workers", "=", "num_gpus", "*", "workers_per_gpu", "\n", "\n", "", "if", "kwargs", ".", "get", "(", "'prefetch'", ")", "is", "not", "None", ":", "\n", "        ", "prefetch", "=", "kwargs", ".", "pop", "(", "'prefetch'", ")", "\n", "img_norm_cfg", "=", "kwargs", ".", "pop", "(", "'img_norm_cfg'", ")", "\n", "", "else", ":", "\n", "        ", "prefetch", "=", "False", "\n", "\n", "", "data_loader", "=", "DataLoader", "(", "\n", "dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "sampler", "=", "sampler", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "collate_fn", "=", "partial", "(", "collate", ",", "samples_per_gpu", "=", "imgs_per_gpu", ")", ",", "\n", "pin_memory", "=", "False", ",", "\n", "worker_init_fn", "=", "worker_init_fn", "if", "seed", "is", "not", "None", "else", "None", ",", "\n", "**", "kwargs", ")", "\n", "\n", "if", "prefetch", ":", "\n", "        ", "data_loader", "=", "PrefetchLoader", "(", "data_loader", ",", "img_norm_cfg", "[", "'mean'", "]", ",", "img_norm_cfg", "[", "'std'", "]", ")", "\n", "\n", "", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.loader.build_loader.worker_init_fn": [[89, 92], ["numpy.random.seed", "random.seed"], "function", ["None"], ["", "def", "worker_init_fn", "(", "seed", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.apis.train.set_random_seed": [[18, 35], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all"], "function", ["None"], ["\n", "\n", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a model'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'train config file path'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--work_dir'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'the dir to save logs and models'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--resume_from'", ",", "help", "=", "'the checkpoint file to resume from'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--pretrained'", ",", "default", "=", "None", ",", "help", "=", "'pretrained model file'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--gpus'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ",", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.apis.train.parse_losses": [[37, 59], ["collections.OrderedDict", "losses.items", "sum", "collections.OrderedDict.items", "isinstance", "loss_value.data.clone.item", "loss_value.data.clone.mean", "isinstance", "torch.is_available", "torch.is_initialized", "loss_value.data.clone.data.clone", "torch.all_reduce", "sum", "TypeError", "collections.OrderedDict.items", "loss_value.data.clone.div_", "torch.get_world_size", "_loss.mean"], "function", ["None"], ["'(only applicable to non-distributed training)'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "help", "=", "'random seed'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--deterministic'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to set deterministic options for CUDNN backend.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--launcher'", ",", "\n", "choices", "=", "[", "'none'", ",", "'pytorch'", ",", "'slurm'", ",", "'mpi'", "]", ",", "\n", "default", "=", "'none'", ",", "\n", "help", "=", "'job launcher'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--port'", ",", "type", "=", "int", ",", "default", "=", "29500", ",", "\n", "help", "=", "'port only works when launcher==\"slurm\"'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "'LOCAL_RANK'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", "=", "str", "(", "args", ".", "local_rank", ")", "\n", "\n", "", "return", "args", "\n", "\n", "\n", "", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.apis.train.batch_processor": [[61, 84], ["model", "train.parse_losses", "dict", "len"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.apis.train.parse_losses"], ["cfg", "=", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "# set cudnn_benchmark", "\n", "if", "cfg", ".", "get", "(", "'cudnn_benchmark'", ",", "False", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "# update configs according to CLI args", "\n", "", "if", "args", ".", "work_dir", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "work_dir", "=", "args", ".", "work_dir", "\n", "", "if", "args", ".", "resume_from", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "resume_from", "=", "args", ".", "resume_from", "\n", "", "cfg", ".", "gpus", "=", "args", ".", "gpus", "\n", "\n", "# check memcached package exists", "\n", "if", "importlib", ".", "util", ".", "find_spec", "(", "'mc'", ")", "is", "None", ":", "\n", "        ", "traverse_replace", "(", "cfg", ",", "'memcached'", ",", "False", ")", "\n", "\n", "# init distributed env first, since logger depends on the dist info.", "\n", "", "if", "args", ".", "launcher", "==", "'none'", ":", "\n", "        ", "distributed", "=", "False", "\n", "assert", "cfg", ".", "model", ".", "type", "not", "in", "[", "'DeepCluster'", ",", "'MOCO'", ",", "'SimCLR'", ",", "'ODC'", ",", "'NPID'", "]", ",", "\"{} does not support non-dist training.\"", ".", "format", "(", "cfg", ".", "model", ".", "type", ")", "\n", "", "else", ":", "\n", "        ", "distributed", "=", "True", "\n", "if", "args", ".", "launcher", "==", "'slurm'", ":", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.apis.train.train_model": [[86, 101], ["openselfsup.utils.get_root_logger", "train._dist_train", "train._non_dist_train"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.utils.logger.get_root_logger", "home.repos.pwc.inspect_result.wanggrun_triplet.apis.train._dist_train", "home.repos.pwc.inspect_result.wanggrun_triplet.apis.train._non_dist_train"], ["", "init_dist", "(", "args", ".", "launcher", ",", "**", "cfg", ".", "dist_params", ")", "\n", "\n", "# create work_dir", "\n", "", "mmcv", ".", "mkdir_or_exist", "(", "osp", ".", "abspath", "(", "cfg", ".", "work_dir", ")", ")", "\n", "# init the logger before other steps", "\n", "timestamp", "=", "time", ".", "strftime", "(", "'%Y%m%d_%H%M%S'", ",", "time", ".", "localtime", "(", ")", ")", "\n", "log_file", "=", "osp", ".", "join", "(", "cfg", ".", "work_dir", ",", "'train_{}.log'", ".", "format", "(", "timestamp", ")", ")", "\n", "logger", "=", "get_root_logger", "(", "log_file", "=", "log_file", ",", "log_level", "=", "cfg", ".", "log_level", ")", "\n", "\n", "# init the meta dict to record some important information such as", "\n", "# environment info and seed, which will be logged", "\n", "meta", "=", "dict", "(", ")", "\n", "# log env info", "\n", "env_info_dict", "=", "collect_env", "(", ")", "\n", "env_info", "=", "'\\n'", ".", "join", "(", "[", "(", "'{}: {}'", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "for", "k", ",", "v", "in", "env_info_dict", ".", "items", "(", ")", "]", ")", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.apis.train.build_optimizer": [[103, 169], ["hasattr", "optimizer_cfg.copy.copy", "optimizer_cfg.copy.pop", "mmcv.runner.obj_from_dict", "isinstance", "model.named_parameters", "getattr", "getattr.", "dict", "optimizer_cfg.pop.items", "params.append", "optimizer_cfg.copy.pop", "params.append", "re.search", "model.parameters", "options.items", "key.endswith", "openselfsup.utils.print_log", "torch.is_initialized", "torch.get_rank"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.utils.logger.print_log"], ["logger", ".", "info", "(", "'Environment info:\\n'", "+", "dash_line", "+", "env_info", "+", "'\\n'", "+", "\n", "dash_line", ")", "\n", "meta", "[", "'env_info'", "]", "=", "env_info", "\n", "\n", "# log some basic info", "\n", "logger", ".", "info", "(", "'Distributed training: {}'", ".", "format", "(", "distributed", ")", ")", "\n", "logger", ".", "info", "(", "'Config:\\n{}'", ".", "format", "(", "cfg", ".", "text", ")", ")", "\n", "\n", "# set random seeds", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "logger", ".", "info", "(", "'Set random seed to {}, deterministic: {}'", ".", "format", "(", "\n", "args", ".", "seed", ",", "args", ".", "deterministic", ")", ")", "\n", "set_random_seed", "(", "args", ".", "seed", ",", "deterministic", "=", "args", ".", "deterministic", ")", "\n", "", "cfg", ".", "seed", "=", "args", ".", "seed", "\n", "meta", "[", "'seed'", "]", "=", "args", ".", "seed", "\n", "\n", "if", "args", ".", "pretrained", "is", "not", "None", ":", "\n", "        ", "assert", "isinstance", "(", "args", ".", "pretrained", ",", "str", ")", "\n", "cfg", ".", "model", ".", "pretrained", "=", "args", ".", "pretrained", "\n", "", "model", "=", "build_model", "(", "cfg", ".", "model", ")", "\n", "\n", "datasets", "=", "[", "build_dataset", "(", "cfg", ".", "data", ".", "train", ")", "]", "\n", "assert", "len", "(", "cfg", ".", "workflow", ")", "==", "1", ",", "\"Validation is called by hook.\"", "\n", "if", "cfg", ".", "checkpoint_config", "is", "not", "None", ":", "\n", "# save openselfsup version, config file content and class names in", "\n", "# checkpoints as meta data", "\n", "        ", "cfg", ".", "checkpoint_config", ".", "meta", "=", "dict", "(", "\n", "openselfsup_version", "=", "__version__", ",", "config", "=", "cfg", ".", "text", ")", "\n", "# add an attribute for visualization convenience", "\n", "", "train_model", "(", "\n", "model", ",", "\n", "datasets", ",", "\n", "cfg", ",", "\n", "distributed", "=", "distributed", ",", "\n", "timestamp", "=", "timestamp", ",", "\n", "meta", "=", "meta", ")", "\n", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "main", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.wanggrun_triplet.apis.train._dist_train": [[171, 228], ["train.build_optimizer", "mmcv.parallel.MMDistributedDataParallel", "mmcv.runner.Runner", "openselfsup.hooks.DistOptimizerHook", "mmcv.runner.Runner.register_training_hooks", "mmcv.runner.Runner.register_hook", "cfg.get", "mmcv.runner.Runner.run", "isinstance", "openselfsup.datasets.build_dataloader", "apex.amp.initialize", "openselfsup.utils.print_log", "mmcv.runner.DistSamplerSeedHook", "mmcv.runner.Runner.register_hook", "mmcv.runner.Runner.resume", "mmcv.parallel.MMDistributedDataParallel.cuda", "mmcv.parallel.MMDistributedDataParallel.cuda", "dict", "dict", "openselfsup.hooks.build_hook", "mmcv.runner.Runner.load_checkpoint", "getattr", "getattr", "next", "torch.cuda.current_device", "torch.cuda.current_device", "mmcv.parallel.MMDistributedDataParallel.parameters"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.apis.train.build_optimizer", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.wanggrun_triplet.loader.build_loader.build_dataloader", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.logger.print_log", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.wanggrun_triplet.hooks.builder.build_hook"], []], "home.repos.pwc.inspect_result.wanggrun_triplet.apis.train._non_dist_train": [[230, 288], ["mmcv.parallel.MMDataParallel().cuda", "train.build_optimizer", "mmcv.runner.Runner", "mmcv.runner.Runner.register_training_hooks", "cfg.get", "mmcv.runner.Runner.run", "isinstance", "openselfsup.datasets.build_dataloader", "NotImplementedError", "mmcv.runner.Runner.register_hook", "mmcv.runner.Runner.resume", "mmcv.parallel.MMDataParallel", "dict", "dict", "openselfsup.hooks.build_hook", "mmcv.runner.Runner.load_checkpoint", "getattr", "getattr", "range"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.wanggrun_triplet.apis.train.build_optimizer", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.wanggrun_triplet.loader.build_loader.build_dataloader", "home.repos.pwc.inspect_result.wanggrun_triplet.hooks.builder.build_hook"], []], "home.repos.pwc.inspect_result.wanggrun_triplet.models.triplet.Triplet.__init__": [[29, 49], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "triplet.Triplet.target_net.parameters", "builder.build_head", "triplet.Triplet.init_weights", "builder.build_backbone", "builder.build_neck", "builder.build_backbone", "builder.build_neck"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.hooks.triplet_hook.TripletHook.__init__", "home.repos.pwc.inspect_result.wanggrun_triplet.models.builder.build_head", "home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnet.ResNet.init_weights", "home.repos.pwc.inspect_result.wanggrun_triplet.models.builder.build_backbone", "home.repos.pwc.inspect_result.wanggrun_triplet.models.builder.build_neck", "home.repos.pwc.inspect_result.wanggrun_triplet.models.builder.build_backbone", "home.repos.pwc.inspect_result.wanggrun_triplet.models.builder.build_neck"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img", "=", "self", ".", "data_source", ".", "get_sample", "(", "idx", ")", "\n", "img1", "=", "self", ".", "pipeline1", "(", "img", ")", "\n", "img2", "=", "self", ".", "pipeline2", "(", "img", ")", "\n", "if", "self", ".", "prefetch", ":", "\n", "            ", "img1", "=", "torch", ".", "from_numpy", "(", "to_numpy", "(", "img1", ")", ")", "\n", "img2", "=", "torch", ".", "from_numpy", "(", "to_numpy", "(", "img2", ")", ")", "\n", "\n", "", "img_cat", "=", "torch", ".", "cat", "(", "(", "img1", ".", "unsqueeze", "(", "0", ")", ",", "img2", ".", "unsqueeze", "(", "0", ")", ")", ",", "dim", "=", "0", ")", "\n", "return", "dict", "(", "img", "=", "img_cat", ")", "\n", "\n", "", "def", "evaluate", "(", "self", ",", "scores", ",", "keyword", ",", "logger", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplemented", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wanggrun_triplet.models.triplet.Triplet.init_weights": [[50, 66], ["triplet.Triplet.online_net[].init_weights", "triplet.Triplet.online_net[].init_weights", "zip", "triplet.Triplet.head.init_weights", "triplet.Triplet.utils.print_log", "triplet.Triplet.online_net.parameters", "triplet.Triplet.target_net.parameters", "param_tgt.data.copy_"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnet.ResNet.init_weights", "home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnet.ResNet.init_weights", "home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnet.ResNet.init_weights", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.logger.print_log"], []], "home.repos.pwc.inspect_result.wanggrun_triplet.models.triplet.Triplet._momentum_update": [[67, 74], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "zip", "triplet.Triplet.online_net.parameters", "triplet.Triplet.target_net.parameters"], "methods", ["None"], []], "home.repos.pwc.inspect_result.wanggrun_triplet.models.triplet.Triplet.momentum_update": [[75, 78], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "triplet.Triplet._momentum_update"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.models.triplet.Triplet._momentum_update"], []], "home.repos.pwc.inspect_result.wanggrun_triplet.models.triplet.Triplet._batch_shuffle_ddp": [[80, 106], ["triplet.concat_all_gather", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.randperm().cuda.view", "torch.randperm().cuda.view", "torch.randperm().cuda.view", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.models.triplet.concat_all_gather", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda"], []], "home.repos.pwc.inspect_result.wanggrun_triplet.models.triplet.Triplet._batch_unshuffle_ddp": [[107, 124], ["triplet.concat_all_gather", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "idx_unshuffle.view"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.models.triplet.concat_all_gather"], []], "home.repos.pwc.inspect_result.wanggrun_triplet.models.triplet.Triplet.forward_train": [[125, 165], ["img[].contiguous", "img[].contiguous", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "dict", "img.dim", "img.dim", "numpy.random.randint", "triplet.Triplet.online_net", "numpy.random.randint", "triplet.Triplet.online_net", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.interpolate", "torch.interpolate", "torch.interpolate", "[].clone().detach", "torch.interpolate", "torch.interpolate", "torch.interpolate", "[].clone().detach", "numpy.random.randint", "numpy.random.randint", "triplet.Triplet.head", "triplet.Triplet.head", "[].clone", "[].clone", "triplet.Triplet.target_net", "triplet.Triplet.target_net"], "methods", ["None"], []], "home.repos.pwc.inspect_result.wanggrun_triplet.models.triplet.Triplet.forward_test": [[166, 169], ["print"], "methods", ["None"], []], "home.repos.pwc.inspect_result.wanggrun_triplet.models.triplet.Triplet.forward": [[170, 179], ["triplet.Triplet.forward_train", "triplet.Triplet.forward_test", "triplet.Triplet.backbone", "Exception"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.models.classification.Classification.forward_train", "home.repos.pwc.inspect_result.wanggrun_triplet.models.classification.Classification.forward_test"], []], "home.repos.pwc.inspect_result.wanggrun_triplet.models.triplet.concat_all_gather": [[181, 194], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.cat", "torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like", "torch.ones_like", "range", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size"], "function", ["None"], []], "home.repos.pwc.inspect_result.wanggrun_triplet.models.builder.build": [[7, 27], ["isinstance", "torch.nn.Sequential", "openselfsup.utils.build_from_cfg", "openselfsup.utils.build_from_cfg", "registry.BACKBONES", "registry.NECKS", "registry.MEMORIES", "registry.HEADS", "registry.LOSSES", "registry.MODELS"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.utils.registry.build_from_cfg", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.registry.build_from_cfg"], ["\n", "def", "_concat_dataset", "(", "cfg", ",", "default_args", "=", "None", ")", ":", "\n", "    ", "ann_files", "=", "cfg", "[", "'ann_file'", "]", "\n", "img_prefixes", "=", "cfg", ".", "get", "(", "'img_prefix'", ",", "None", ")", "\n", "seg_prefixes", "=", "cfg", ".", "get", "(", "'seg_prefix'", ",", "None", ")", "\n", "proposal_files", "=", "cfg", ".", "get", "(", "'proposal_file'", ",", "None", ")", "\n", "\n", "datasets", "=", "[", "]", "\n", "num_dset", "=", "len", "(", "ann_files", ")", "\n", "for", "i", "in", "range", "(", "num_dset", ")", ":", "\n", "        ", "data_cfg", "=", "copy", ".", "deepcopy", "(", "cfg", ")", "\n", "data_cfg", "[", "'ann_file'", "]", "=", "ann_files", "[", "i", "]", "\n", "if", "isinstance", "(", "img_prefixes", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "data_cfg", "[", "'img_prefix'", "]", "=", "img_prefixes", "[", "i", "]", "\n", "", "if", "isinstance", "(", "seg_prefixes", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "data_cfg", "[", "'seg_prefix'", "]", "=", "seg_prefixes", "[", "i", "]", "\n", "", "if", "isinstance", "(", "proposal_files", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "data_cfg", "[", "'proposal_file'", "]", "=", "proposal_files", "[", "i", "]", "\n", "", "datasets", ".", "append", "(", "build_dataset", "(", "data_cfg", ",", "default_args", ")", ")", "\n", "\n", "", "return", "ConcatDataset", "(", "datasets", ")", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.models.builder.build_backbone": [[29, 32], ["builder.build"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.models.builder.build"], ["\n", "", "def", "build_dataset", "(", "cfg", ",", "default_args", "=", "None", ")", ":", "\n", "    ", "if", "isinstance", "(", "cfg", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "dataset", "=", "ConcatDataset", "(", "[", "build_dataset", "(", "c", ",", "default_args", ")", "for", "c", "in", "cfg", "]", ")", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.models.builder.build_neck": [[34, 37], ["builder.build"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.models.builder.build"], ["        ", "dataset", "=", "RepeatDataset", "(", "\n", "build_dataset", "(", "cfg", "[", "'dataset'", "]", ",", "default_args", ")", ",", "cfg", "[", "'times'", "]", ")", "\n", "", "else", ":", "\n", "        ", "dataset", "=", "build_from_cfg", "(", "cfg", ",", "DATASETS", ",", "default_args", ")", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.models.builder.build_memory": [[39, 42], ["builder.build"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.models.builder.build"], ["", "return", "dataset", "\n", "\n", "\n", "", "def", "build_datasource", "(", "cfg", ")", ":", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.models.builder.build_head": [[44, 47], ["builder.build"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.models.builder.build"], ["", ""]], "home.repos.pwc.inspect_result.wanggrun_triplet.models.builder.build_loss": [[49, 52], ["builder.build"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.models.builder.build"], []], "home.repos.pwc.inspect_result.wanggrun_triplet.models.builder.build_model": [[54, 57], ["builder.build"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.models.builder.build"], []], "home.repos.pwc.inspect_result.wanggrun_triplet.models.classification.Classification.__init__": [[23, 36], ["torch.Module.__init__", "builder.build_backbone", "classification.Classification.init_weights", "utils.Sobel", "builder.build_head"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.hooks.triplet_hook.TripletHook.__init__", "home.repos.pwc.inspect_result.wanggrun_triplet.models.builder.build_backbone", "home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnet.ResNet.init_weights", "home.repos.pwc.inspect_result.wanggrun_triplet.models.builder.build_head"], ["", "return", "dict", "(", "img", "=", "img", ",", "gt_label", "=", "target", ")", "\n", "\n", "", "def", "evaluate", "(", "self", ",", "scores", ",", "keyword", ",", "logger", "=", "None", ",", "topk", "=", "(", "1", ",", "5", ")", ")", ":", "\n", "        ", "eval_res", "=", "{", "}", "\n", "\n", "target", "=", "torch", ".", "LongTensor", "(", "self", ".", "data_source", ".", "labels", ")", "\n", "assert", "scores", ".", "size", "(", "0", ")", "==", "target", ".", "size", "(", "0", ")", ",", "\"Inconsistent length for results and labels, {} vs {}\"", ".", "format", "(", "\n", "scores", ".", "size", "(", "0", ")", ",", "target", ".", "size", "(", "0", ")", ")", "\n", "num", "=", "scores", ".", "size", "(", "0", ")", "\n", "_", ",", "pred", "=", "scores", ".", "topk", "(", "max", "(", "topk", ")", ",", "dim", "=", "1", ",", "largest", "=", "True", ",", "sorted", "=", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "# KxN", "\n", "for", "k", "in", "topk", ":", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.models.classification.Classification.init_weights": [[37, 48], ["classification.Classification.backbone.init_weights", "classification.Classification.head.init_weights", "classification.Classification.utils.print_log"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnet.ResNet.init_weights", "home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnet.ResNet.init_weights", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.logger.print_log"], ["            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", ".", "item", "(", ")", "\n", "acc", "=", "correct_k", "*", "100.0", "/", "num", "\n", "eval_res", "[", "\"{}_top{}\"", ".", "format", "(", "keyword", ",", "k", ")", "]", "=", "acc", "\n", "if", "logger", "is", "not", "None", "and", "logger", "!=", "'silent'", ":", "\n", "                ", "print_log", "(", "\n", "\"{}_top{}: {:.03f}\"", ".", "format", "(", "keyword", ",", "k", ",", "acc", ")", ",", "\n", "logger", "=", "logger", ")", "\n", "", "", "return", "eval_res", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wanggrun_triplet.models.classification.Classification.forward_backbone": [[49, 63], ["classification.Classification.backbone", "classification.Classification.sobel_layer"], "methods", ["None"], []], "home.repos.pwc.inspect_result.wanggrun_triplet.models.classification.Classification.forward_train": [[64, 81], ["classification.Classification.forward_backbone", "classification.Classification.head", "classification.Classification.head.loss"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.models.classification.Classification.forward_backbone", "home.repos.pwc.inspect_result.wanggrun_triplet.heads.multi_cls_head.MultiClsHead.loss"], []], "home.repos.pwc.inspect_result.wanggrun_triplet.models.classification.Classification.forward_test": [[82, 88], ["classification.Classification.forward_backbone", "classification.Classification.head", "dict", "out.cpu", "zip", "range", "len"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.models.classification.Classification.forward_backbone"], []], "home.repos.pwc.inspect_result.wanggrun_triplet.models.classification.Classification.aug_test": [[89, 94], ["numpy.mean", "classification.Classification.head", "classification.Classification.forward_backbone"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.models.classification.Classification.forward_backbone"], []], "home.repos.pwc.inspect_result.wanggrun_triplet.models.classification.Classification.forward": [[95, 104], ["classification.Classification.forward_train", "classification.Classification.forward_test", "classification.Classification.forward_backbone", "Exception"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.models.classification.Classification.forward_train", "home.repos.pwc.inspect_result.wanggrun_triplet.models.classification.Classification.forward_test", "home.repos.pwc.inspect_result.wanggrun_triplet.models.classification.Classification.forward_backbone"], []], "home.repos.pwc.inspect_result.wanggrun_triplet.models.necks.LinearNeck.__init__": [[32, 38], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.hooks.triplet_hook.TripletHook.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "with_avg_pool", "=", "True", ")", ":", "\n", "        ", "super", "(", "LinearNeck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "with_avg_pool", "=", "with_avg_pool", "\n", "if", "with_avg_pool", ":", "\n", "            ", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "in_channels", ",", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.models.necks.LinearNeck.init_weights": [[39, 41], ["necks._init_weights"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.models.necks._init_weights"], ["", "def", "init_weights", "(", "self", ",", "init_linear", "=", "'normal'", ")", ":", "\n", "        ", "_init_weights", "(", "self", ",", "init_linear", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.models.necks.LinearNeck.forward": [[42, 48], ["len", "necks.LinearNeck.avgpool", "necks.LinearNeck.fc", "necks.LinearNeck.view", "necks.LinearNeck.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "len", "(", "x", ")", "==", "1", "\n", "x", "=", "x", "[", "0", "]", "\n", "if", "self", ".", "with_avg_pool", ":", "\n", "            ", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "", "return", "[", "self", ".", "fc", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.models.necks.RelativeLocNeck.__init__": [[55, 81], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "packaging.version.parse", "packaging.version.parse", "utils.build_norm_layer", "torch.BatchNorm1d", "torch.BatchNorm1d", "dict"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.hooks.triplet_hook.TripletHook.__init__", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.norm.build_norm_layer"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "sync_bn", "=", "False", ",", "\n", "with_avg_pool", "=", "True", ")", ":", "\n", "        ", "super", "(", "RelativeLocNeck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "with_avg_pool", "=", "with_avg_pool", "\n", "if", "with_avg_pool", ":", "\n", "            ", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "\n", "", "if", "version", ".", "parse", "(", "torch", ".", "__version__", ")", "<", "version", ".", "parse", "(", "\"1.4.0\"", ")", ":", "\n", "            ", "self", ".", "expand_for_syncbn", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "expand_for_syncbn", "=", "False", "\n", "\n", "", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "in_channels", "*", "2", ",", "out_channels", ")", "\n", "if", "sync_bn", ":", "\n", "            ", "_", ",", "self", ".", "bn", "=", "build_norm_layer", "(", "\n", "dict", "(", "type", "=", "'SyncBN'", ",", "momentum", "=", "0.003", ")", ",", "\n", "out_channels", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bn", "=", "nn", ".", "BatchNorm1d", "(", "\n", "out_channels", ",", "momentum", "=", "0.003", ")", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", ")", "\n", "self", ".", "sync_bn", "=", "sync_bn", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.models.necks.RelativeLocNeck.init_weights": [[82, 84], ["necks._init_weights"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.models.necks._init_weights"], ["", "def", "init_weights", "(", "self", ",", "init_linear", "=", "'normal'", ")", ":", "\n", "        ", "_init_weights", "(", "self", ",", "init_linear", ",", "std", "=", "0.005", ",", "bias", "=", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.models.necks.RelativeLocNeck._forward_syncbn": [[85, 92], ["module.dim", "module().squeeze().squeeze", "module", "module().squeeze", "module", "module.unsqueeze().unsqueeze", "module.unsqueeze"], "methods", ["None"], ["", "def", "_forward_syncbn", "(", "self", ",", "module", ",", "x", ")", ":", "\n", "        ", "assert", "x", ".", "dim", "(", ")", "==", "2", "\n", "if", "self", ".", "expand_for_syncbn", ":", "\n", "            ", "x", "=", "module", "(", "x", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "squeeze", "(", "-", "1", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "module", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.models.necks.RelativeLocNeck.forward": [[93, 107], ["necks.RelativeLocNeck.view", "necks.RelativeLocNeck.fc", "necks.RelativeLocNeck.relu", "necks.RelativeLocNeck.drop", "len", "necks.RelativeLocNeck.avgpool", "necks.RelativeLocNeck.size", "necks.RelativeLocNeck._forward_syncbn", "necks.RelativeLocNeck.bn"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.models.necks.NonLinearNeckSimCLR._forward_syncbn"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "len", "(", "x", ")", "==", "1", "\n", "x", "=", "x", "[", "0", "]", "\n", "if", "self", ".", "with_avg_pool", ":", "\n", "            ", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "if", "self", ".", "sync_bn", ":", "\n", "            ", "x", "=", "self", ".", "_forward_syncbn", "(", "self", ".", "bn", ",", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "[", "x", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.models.necks.NonLinearNeckV0.__init__": [[114, 143], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "packaging.version.parse", "packaging.version.parse", "utils.build_norm_layer", "torch.BatchNorm1d", "torch.BatchNorm1d", "dict"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.hooks.triplet_hook.TripletHook.__init__", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.norm.build_norm_layer"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "hid_channels", ",", "\n", "out_channels", ",", "\n", "sync_bn", "=", "False", ",", "\n", "with_avg_pool", "=", "True", ")", ":", "\n", "        ", "super", "(", "NonLinearNeckV0", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "with_avg_pool", "=", "with_avg_pool", "\n", "if", "with_avg_pool", ":", "\n", "            ", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "\n", "", "if", "version", ".", "parse", "(", "torch", ".", "__version__", ")", "<", "version", ".", "parse", "(", "\"1.4.0\"", ")", ":", "\n", "            ", "self", ".", "expand_for_syncbn", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "expand_for_syncbn", "=", "False", "\n", "\n", "", "self", ".", "fc0", "=", "nn", ".", "Linear", "(", "in_channels", ",", "hid_channels", ")", "\n", "if", "sync_bn", ":", "\n", "            ", "_", ",", "self", ".", "bn0", "=", "build_norm_layer", "(", "\n", "dict", "(", "type", "=", "'SyncBN'", ",", "momentum", "=", "0.001", ",", "affine", "=", "False", ")", ",", "\n", "hid_channels", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bn0", "=", "nn", ".", "BatchNorm1d", "(", "\n", "hid_channels", ",", "momentum", "=", "0.001", ",", "affine", "=", "False", ")", "\n", "\n", "", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "hid_channels", ",", "out_channels", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", ")", "\n", "self", ".", "sync_bn", "=", "sync_bn", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.models.necks.NonLinearNeckV0.init_weights": [[144, 146], ["necks._init_weights"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.models.necks._init_weights"], ["", "def", "init_weights", "(", "self", ",", "init_linear", "=", "'normal'", ")", ":", "\n", "        ", "_init_weights", "(", "self", ",", "init_linear", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.models.necks.NonLinearNeckV0._forward_syncbn": [[147, 154], ["module.dim", "module().squeeze().squeeze", "module", "module().squeeze", "module", "module.unsqueeze().unsqueeze", "module.unsqueeze"], "methods", ["None"], ["", "def", "_forward_syncbn", "(", "self", ",", "module", ",", "x", ")", ":", "\n", "        ", "assert", "x", ".", "dim", "(", ")", "==", "2", "\n", "if", "self", ".", "expand_for_syncbn", ":", "\n", "            ", "x", "=", "module", "(", "x", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "squeeze", "(", "-", "1", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "module", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.models.necks.NonLinearNeckV0.forward": [[155, 171], ["necks.NonLinearNeckV0.view", "necks.NonLinearNeckV0.fc0", "necks.NonLinearNeckV0.relu", "necks.NonLinearNeckV0.drop", "necks.NonLinearNeckV0.fc1", "necks.NonLinearNeckV0.relu", "len", "necks.NonLinearNeckV0.avgpool", "necks.NonLinearNeckV0.size", "necks.NonLinearNeckV0._forward_syncbn", "necks.NonLinearNeckV0.bn0"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.models.necks.NonLinearNeckSimCLR._forward_syncbn"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "len", "(", "x", ")", "==", "1", "\n", "x", "=", "x", "[", "0", "]", "\n", "if", "self", ".", "with_avg_pool", ":", "\n", "            ", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc0", "(", "x", ")", "\n", "if", "self", ".", "sync_bn", ":", "\n", "            ", "x", "=", "self", ".", "_forward_syncbn", "(", "self", ".", "bn0", ",", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "bn0", "(", "x", ")", "\n", "", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "return", "[", "x", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.models.necks.NonLinearNeckV1.__init__": [[178, 190], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.hooks.triplet_hook.TripletHook.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "hid_channels", ",", "\n", "out_channels", ",", "\n", "with_avg_pool", "=", "True", ")", ":", "\n", "        ", "super", "(", "NonLinearNeckV1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "with_avg_pool", "=", "with_avg_pool", "\n", "if", "with_avg_pool", ":", "\n", "            ", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "", "self", ".", "mlp", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_channels", ",", "hid_channels", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "hid_channels", ",", "out_channels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.models.necks.NonLinearNeckV1.init_weights": [[191, 193], ["necks._init_weights"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.models.necks._init_weights"], ["", "def", "init_weights", "(", "self", ",", "init_linear", "=", "'normal'", ")", ":", "\n", "        ", "_init_weights", "(", "self", ",", "init_linear", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.models.necks.NonLinearNeckV1.forward": [[194, 200], ["len", "necks.NonLinearNeckV1.avgpool", "necks.NonLinearNeckV1.mlp", "necks.NonLinearNeckV1.view", "necks.NonLinearNeckV1.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "len", "(", "x", ")", "==", "1", "\n", "x", "=", "x", "[", "0", "]", "\n", "if", "self", ".", "with_avg_pool", ":", "\n", "            ", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "", "return", "[", "self", ".", "mlp", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.models.necks.NonLinearNeckV2.__init__": [[207, 221], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.hooks.triplet_hook.TripletHook.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "hid_channels", ",", "\n", "out_channels", ",", "\n", "with_avg_pool", "=", "True", ")", ":", "\n", "        ", "super", "(", "NonLinearNeckV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "with_avg_pool", "=", "with_avg_pool", "\n", "if", "with_avg_pool", ":", "\n", "            ", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "", "self", ".", "mlp", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_channels", ",", "hid_channels", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "hid_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "hid_channels", ",", "out_channels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.models.necks.NonLinearNeckV2.init_weights": [[222, 224], ["necks._init_weights"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.models.necks._init_weights"], ["", "def", "init_weights", "(", "self", ",", "init_linear", "=", "'normal'", ")", ":", "\n", "        ", "_init_weights", "(", "self", ",", "init_linear", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.models.necks.NonLinearNeckV2.forward": [[225, 231], ["len", "len", "necks.NonLinearNeckV2.avgpool", "necks.NonLinearNeckV2.mlp", "necks.NonLinearNeckV2.view", "necks.NonLinearNeckV2.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "len", "(", "x", ")", "==", "1", ",", "\"Got: {}\"", ".", "format", "(", "len", "(", "x", ")", ")", "\n", "x", "=", "x", "[", "0", "]", "\n", "if", "self", ".", "with_avg_pool", ":", "\n", "            ", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "", "return", "[", "self", ".", "mlp", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.models.necks.NonLinearNeckSimCLR.__init__": [[253, 303], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "range", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "packaging.version.parse", "packaging.version.parse", "utils.build_norm_layer", "torch.BatchNorm1d", "torch.BatchNorm1d", "necks.NonLinearNeckSimCLR.add_module", "necks.NonLinearNeckSimCLR.fc_names.append", "dict", "torch.Linear", "torch.Linear", "necks.NonLinearNeckSimCLR.bn_names.append", "necks.NonLinearNeckSimCLR.bn_names.append", "necks.NonLinearNeckSimCLR.add_module", "necks.NonLinearNeckSimCLR.add_module", "torch.BatchNorm1d", "torch.BatchNorm1d", "utils.build_norm_layer", "dict"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.hooks.triplet_hook.TripletHook.__init__", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.norm.build_norm_layer", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.norm.build_norm_layer"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "hid_channels", ",", "\n", "out_channels", ",", "\n", "num_layers", "=", "2", ",", "\n", "sync_bn", "=", "True", ",", "\n", "with_bias", "=", "False", ",", "\n", "with_last_bn", "=", "True", ",", "\n", "with_avg_pool", "=", "True", ")", ":", "\n", "        ", "super", "(", "NonLinearNeckSimCLR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sync_bn", "=", "sync_bn", "\n", "self", ".", "with_last_bn", "=", "with_last_bn", "\n", "self", ".", "with_avg_pool", "=", "with_avg_pool", "\n", "if", "with_avg_pool", ":", "\n", "            ", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "\n", "", "if", "version", ".", "parse", "(", "torch", ".", "__version__", ")", "<", "version", ".", "parse", "(", "\"1.4.0\"", ")", ":", "\n", "            ", "self", ".", "expand_for_syncbn", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "expand_for_syncbn", "=", "False", "\n", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc0", "=", "nn", ".", "Linear", "(", "in_channels", ",", "hid_channels", ",", "bias", "=", "with_bias", ")", "\n", "if", "sync_bn", ":", "\n", "            ", "_", ",", "self", ".", "bn0", "=", "build_norm_layer", "(", "\n", "dict", "(", "type", "=", "'SyncBN'", ")", ",", "hid_channels", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bn0", "=", "nn", ".", "BatchNorm1d", "(", "hid_channels", ")", "\n", "\n", "", "self", ".", "fc_names", "=", "[", "]", "\n", "self", ".", "bn_names", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "num_layers", ")", ":", "\n", "            ", "this_channels", "=", "out_channels", "if", "i", "==", "num_layers", "-", "1", "else", "hid_channels", "\n", "self", ".", "add_module", "(", "\n", "\"fc{}\"", ".", "format", "(", "i", ")", ",", "\n", "nn", ".", "Linear", "(", "hid_channels", ",", "this_channels", ",", "bias", "=", "with_bias", ")", ")", "\n", "self", ".", "fc_names", ".", "append", "(", "\"fc{}\"", ".", "format", "(", "i", ")", ")", "\n", "if", "i", "!=", "num_layers", "-", "1", "or", "self", ".", "with_last_bn", ":", "\n", "                ", "if", "sync_bn", ":", "\n", "                    ", "self", ".", "add_module", "(", "\n", "\"bn{}\"", ".", "format", "(", "i", ")", ",", "\n", "build_norm_layer", "(", "dict", "(", "type", "=", "'SyncBN'", ")", ",", "this_channels", ")", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "add_module", "(", "\n", "\"bn{}\"", ".", "format", "(", "i", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "this_channels", ")", ")", "\n", "", "self", ".", "bn_names", ".", "append", "(", "\"bn{}\"", ".", "format", "(", "i", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "bn_names", ".", "append", "(", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.models.necks.NonLinearNeckSimCLR.init_weights": [[304, 306], ["necks._init_weights"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.models.necks._init_weights"], ["", "", "", "def", "init_weights", "(", "self", ",", "init_linear", "=", "'normal'", ")", ":", "\n", "        ", "_init_weights", "(", "self", ",", "init_linear", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.models.necks.NonLinearNeckSimCLR._forward_syncbn": [[307, 314], ["module.dim", "module().squeeze().squeeze", "module", "module().squeeze", "module", "module.unsqueeze().unsqueeze", "module.unsqueeze"], "methods", ["None"], ["", "def", "_forward_syncbn", "(", "self", ",", "module", ",", "x", ")", ":", "\n", "        ", "assert", "x", ".", "dim", "(", ")", "==", "2", "\n", "if", "self", ".", "expand_for_syncbn", ":", "\n", "            ", "x", "=", "module", "(", "x", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "squeeze", "(", "-", "1", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "module", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.models.necks.NonLinearNeckSimCLR.forward": [[315, 337], ["getattr.view", "necks.NonLinearNeckSimCLR.fc0", "zip", "len", "necks.NonLinearNeckSimCLR.avgpool", "getattr.size", "necks.NonLinearNeckSimCLR._forward_syncbn", "necks.NonLinearNeckSimCLR.bn0", "getattr", "necks.NonLinearNeckSimCLR.relu", "getattr.", "getattr", "necks.NonLinearNeckSimCLR._forward_syncbn", "getattr."], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.models.necks.NonLinearNeckSimCLR._forward_syncbn", "home.repos.pwc.inspect_result.wanggrun_triplet.models.necks.NonLinearNeckSimCLR._forward_syncbn"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "len", "(", "x", ")", "==", "1", "\n", "x", "=", "x", "[", "0", "]", "\n", "if", "self", ".", "with_avg_pool", ":", "\n", "            ", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc0", "(", "x", ")", "\n", "if", "self", ".", "sync_bn", ":", "\n", "            ", "x", "=", "self", ".", "_forward_syncbn", "(", "self", ".", "bn0", ",", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "bn0", "(", "x", ")", "\n", "", "for", "fc_name", ",", "bn_name", "in", "zip", "(", "self", ".", "fc_names", ",", "self", ".", "bn_names", ")", ":", "\n", "            ", "fc", "=", "getattr", "(", "self", ",", "fc_name", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "fc", "(", "x", ")", "\n", "if", "bn_name", "is", "not", "None", ":", "\n", "                ", "bn", "=", "getattr", "(", "self", ",", "bn_name", ")", "\n", "if", "self", ".", "sync_bn", ":", "\n", "                    ", "x", "=", "self", ".", "_forward_syncbn", "(", "bn", ",", "x", ")", "\n", "", "else", ":", "\n", "                    ", "x", "=", "bn", "(", "x", ")", "\n", "", "", "", "return", "[", "x", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.models.necks.AvgPoolNeck.__init__": [[344, 347], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.hooks.triplet_hook.TripletHook.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "AvgPoolNeck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.models.necks.AvgPoolNeck.init_weights": [[348, 350], ["None"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.models.necks.AvgPoolNeck.forward": [[351, 354], ["len", "necks.AvgPoolNeck.avg_pool"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "len", "(", "x", ")", "==", "1", "\n", "return", "[", "self", ".", "avg_pool", "(", "x", "[", "0", "]", ")", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wanggrun_triplet.models.necks._init_weights": [[10, 25], ["module.modules", "isinstance", "isinstance", "mmcv.cnn.normal_init", "mmcv.cnn.kaiming_init", "torch.init.constant_", "torch.init.constant_"], "function", ["None"], ["def", "_init_weights", "(", "module", ",", "init_linear", "=", "'normal'", ",", "std", "=", "0.01", ",", "bias", "=", "0.", ")", ":", "\n", "    ", "assert", "init_linear", "in", "[", "'normal'", ",", "'kaiming'", "]", ",", "\"Undefined init_linear: {}\"", ".", "format", "(", "init_linear", ")", "\n", "for", "m", "in", "module", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "if", "init_linear", "==", "'normal'", ":", "\n", "                ", "normal_init", "(", "m", ",", "std", "=", "std", ",", "bias", "=", "bias", ")", "\n", "", "else", ":", "\n", "                ", "kaiming_init", "(", "m", ",", "mode", "=", "'fan_in'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm1d", ",", "nn", ".", "BatchNorm2d", ",", "\n", "nn", ".", "GroupNorm", ",", "nn", ".", "SyncBatchNorm", ")", ")", ":", "\n", "            ", "if", "m", ".", "weight", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.heads.cls_head.ClsHead.__init__": [[13, 27], ["torch.Module.__init__", "torch.CrossEntropyLoss", "torch.Linear", "torch.AdaptiveAvgPool2d"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.hooks.triplet_hook.TripletHook.__init__"], ["def", "__init__", "(", "self", ",", "\n", "with_avg_pool", "=", "False", ",", "\n", "in_channels", "=", "2048", ",", "\n", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "ClsHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "with_avg_pool", "=", "with_avg_pool", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "if", "self", ".", "with_avg_pool", ":", "\n", "            ", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "", "self", ".", "fc_cls", "=", "nn", ".", "Linear", "(", "in_channels", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.heads.cls_head.ClsHead.init_weights": [[28, 43], ["cls_head.ClsHead.modules", "isinstance", "isinstance", "mmcv.cnn.normal_init", "mmcv.cnn.kaiming_init", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "init_linear", "=", "'normal'", ",", "std", "=", "0.01", ",", "bias", "=", "0.", ")", ":", "\n", "        ", "assert", "init_linear", "in", "[", "'normal'", ",", "'kaiming'", "]", ",", "\"Undefined init_linear: {}\"", ".", "format", "(", "init_linear", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "if", "init_linear", "==", "'normal'", ":", "\n", "                    ", "normal_init", "(", "m", ",", "std", "=", "std", ",", "bias", "=", "bias", ")", "\n", "", "else", ":", "\n", "                    ", "kaiming_init", "(", "m", ",", "mode", "=", "'fan_in'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "\n", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ",", "nn", ".", "SyncBatchNorm", ")", ")", ":", "\n", "                ", "if", "m", ".", "weight", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.heads.cls_head.ClsHead.forward": [[44, 54], ["cls_head.ClsHead.view", "cls_head.ClsHead.fc_cls", "isinstance", "cls_head.ClsHead.avg_pool", "cls_head.ClsHead.size", "len", "cls_head.ClsHead.dim", "cls_head.ClsHead.dim"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "isinstance", "(", "x", ",", "(", "tuple", ",", "list", ")", ")", "and", "len", "(", "x", ")", "==", "1", "\n", "x", "=", "x", "[", "0", "]", "\n", "if", "self", ".", "with_avg_pool", ":", "\n", "            ", "assert", "x", ".", "dim", "(", ")", "==", "4", ",", "\"Tensor must has 4 dims, got: {}\"", ".", "format", "(", "x", ".", "dim", "(", ")", ")", "\n", "x", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "cls_score", "=", "self", ".", "fc_cls", "(", "x", ")", "\n", "return", "[", "cls_score", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.heads.cls_head.ClsHead.loss": [[55, 61], ["dict", "cls_head.ClsHead.criterion", "utils.accuracy", "isinstance", "len"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.utils.accuracy.accuracy"], ["", "def", "loss", "(", "self", ",", "cls_score", ",", "labels", ")", ":", "\n", "        ", "losses", "=", "dict", "(", ")", "\n", "assert", "isinstance", "(", "cls_score", ",", "(", "tuple", ",", "list", ")", ")", "and", "len", "(", "cls_score", ")", "==", "1", "\n", "losses", "[", "'loss'", "]", "=", "self", ".", "criterion", "(", "cls_score", "[", "0", "]", ",", "labels", ")", "\n", "losses", "[", "'acc'", "]", "=", "accuracy", "(", "cls_score", "[", "0", "]", ",", "labels", ")", "\n", "return", "losses", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wanggrun_triplet.heads.multi_cls_head.MultiClsHead.__init__": [[16, 46], ["dict", "torch.Module.__init__", "torch.CrossEntropyLoss", "utils.MultiPooling", "torch.ModuleList", "torch.ModuleList", "multi_cls_head.MultiClsHead.fcs.append", "torch.Linear", "torch.Linear", "utils.build_norm_layer"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.hooks.triplet_hook.TripletHook.__init__", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.norm.build_norm_layer"], ["def", "__init__", "(", "self", ",", "\n", "pool_type", "=", "'adaptive'", ",", "\n", "in_indices", "=", "(", "0", ",", ")", ",", "\n", "with_last_layer_unpool", "=", "False", ",", "\n", "backbone", "=", "'resnet50'", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "MultiClsHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "norm_cfg", "[", "'type'", "]", "in", "[", "'BN'", ",", "'SyncBN'", ",", "'GN'", ",", "'null'", "]", "\n", "\n", "self", ".", "with_last_layer_unpool", "=", "with_last_layer_unpool", "\n", "self", ".", "with_norm", "=", "norm_cfg", "[", "'type'", "]", "!=", "'null'", "\n", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "self", ".", "multi_pooling", "=", "MultiPooling", "(", "pool_type", ",", "in_indices", ",", "backbone", ")", "\n", "\n", "if", "self", ".", "with_norm", ":", "\n", "            ", "self", ".", "norms", "=", "nn", ".", "ModuleList", "(", "[", "\n", "build_norm_layer", "(", "norm_cfg", ",", "self", ".", "FEAT_CHANNELS", "[", "backbone", "]", "[", "l", "]", ")", "[", "1", "]", "\n", "for", "l", "in", "in_indices", "\n", "]", ")", "\n", "\n", "", "self", ".", "fcs", "=", "nn", ".", "ModuleList", "(", "[", "\n", "nn", ".", "Linear", "(", "self", ".", "multi_pooling", ".", "POOL_DIMS", "[", "backbone", "]", "[", "l", "]", ",", "num_classes", ")", "\n", "for", "l", "in", "in_indices", "\n", "]", ")", "\n", "if", "with_last_layer_unpool", ":", "\n", "            ", "self", ".", "fcs", ".", "append", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "FEAT_LAST_UNPOOL", "[", "backbone", "]", ",", "num_classes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.heads.multi_cls_head.MultiClsHead.init_weights": [[47, 58], ["multi_cls_head.MultiClsHead.modules", "isinstance", "torch.init.normal_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "0.01", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "\n", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ",", "nn", ".", "SyncBatchNorm", ")", ")", ":", "\n", "                ", "if", "m", ".", "weight", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.heads.multi_cls_head.MultiClsHead.forward": [[59, 71], ["isinstance", "multi_cls_head.MultiClsHead.multi_pooling", "multi_cls_head.MultiClsHead.append", "xx.view", "fc", "n", "xx.size", "zip", "zip"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "isinstance", "(", "x", ",", "(", "list", ",", "tuple", ")", ")", "\n", "if", "self", ".", "with_last_layer_unpool", ":", "\n", "            ", "last_x", "=", "x", "[", "-", "1", "]", "\n", "", "x", "=", "self", ".", "multi_pooling", "(", "x", ")", "\n", "if", "self", ".", "with_norm", ":", "\n", "            ", "x", "=", "[", "n", "(", "xx", ")", "for", "n", ",", "xx", "in", "zip", "(", "self", ".", "norms", ",", "x", ")", "]", "\n", "", "if", "self", ".", "with_last_layer_unpool", ":", "\n", "            ", "x", ".", "append", "(", "last_x", ")", "\n", "", "x", "=", "[", "xx", ".", "view", "(", "xx", ".", "size", "(", "0", ")", ",", "-", "1", ")", "for", "xx", "in", "x", "]", "\n", "x", "=", "[", "fc", "(", "xx", ")", "for", "fc", ",", "xx", "in", "zip", "(", "self", ".", "fcs", ",", "x", ")", "]", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.heads.multi_cls_head.MultiClsHead.loss": [[72, 79], ["dict", "enumerate", "multi_cls_head.MultiClsHead.criterion", "utils.accuracy"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.utils.accuracy.accuracy"], ["", "def", "loss", "(", "self", ",", "cls_score", ",", "labels", ")", ":", "\n", "        ", "losses", "=", "dict", "(", ")", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "cls_score", ")", ":", "\n", "# keys must contain \"loss\"", "\n", "            ", "losses", "[", "'loss.{}'", ".", "format", "(", "i", "+", "1", ")", "]", "=", "self", ".", "criterion", "(", "s", ",", "labels", ")", "\n", "losses", "[", "'acc.{}'", ".", "format", "(", "i", "+", "1", ")", "]", "=", "accuracy", "(", "s", ",", "labels", ")", "\n", "", "return", "losses", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wanggrun_triplet.heads.triplet_loss_head.TripletLossHead.__init__": [[13, 19], ["torch.Module.__init__", "builder.build_neck", "torch.MarginRankingLoss", "torch.MarginRankingLoss"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.hooks.triplet_hook.TripletHook.__init__", "home.repos.pwc.inspect_result.wanggrun_triplet.models.builder.build_neck"], ["def", "__init__", "(", "self", ",", "predictor", ",", "gamma", "=", "2", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "TripletLossHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "predictor", "=", "builder", ".", "build_neck", "(", "predictor", ")", "\n", "self", ".", "size_average", "=", "size_average", "\n", "self", ".", "ranking_loss", "=", "nn", ".", "MarginRankingLoss", "(", "margin", "=", "100.", ")", "\n", "self", ".", "gamma", "=", "gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.heads.triplet_loss_head.TripletLossHead.init_weights": [[20, 22], ["triplet_loss_head.TripletLossHead.predictor.init_weights"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnet.ResNet.init_weights"], ["", "def", "init_weights", "(", "self", ",", "init_linear", "=", "'normal'", ")", ":", "\n", "        ", "self", ".", "predictor", ".", "init_weights", "(", "init_linear", "=", "init_linear", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.heads.triplet_loss_head.TripletLossHead.forward": [[23, 43], ["torch.functional.normalize", "torch.functional.normalize", "torch.functional.normalize", "torch.functional.normalize", "input.size", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange.expand().eq", "torch.arange.expand().eq", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "triplet_loss_head.TripletLossHead.ranking_loss", "dict", "triplet_loss_head.TripletLossHead.predictor", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.arange.expand().t", "torch.arange.expand().t", "torch.cat.append", "torch.cat.append", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "down_k[].mean().unsqueeze", "torch.cat.append", "torch.cat.append", "torch.functional.normalize.t", "torch.arange.expand", "torch.arange.expand", "[].max().unsqueeze", "torch.arange.expand", "torch.arange.expand", "down_k[].mean", "[].max"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "pred", "=", "self", ".", "predictor", "(", "[", "input", "]", ")", "[", "0", "]", "\n", "pred_norm", "=", "nn", ".", "functional", ".", "normalize", "(", "pred", ",", "dim", "=", "1", ")", "\n", "target_norm", "=", "nn", ".", "functional", ".", "normalize", "(", "target", ",", "dim", "=", "1", ")", "\n", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "dist", "=", "-", "2.", "*", "torch", ".", "matmul", "(", "pred_norm", ",", "target_norm", ".", "t", "(", ")", ")", "\n", "idx", "=", "torch", ".", "arange", "(", "n", ")", "\n", "mask", "=", "idx", ".", "expand", "(", "n", ",", "n", ")", ".", "eq", "(", "idx", ".", "expand", "(", "n", ",", "n", ")", ".", "t", "(", ")", ")", "\n", "dist_ap", ",", "dist_an", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "dist_ap", ".", "append", "(", "dist", "[", "i", "]", "[", "mask", "[", "i", "]", "]", ".", "max", "(", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "down_k", ",", "_", "=", "torch", ".", "topk", "(", "dist", "[", "i", "]", "[", "mask", "[", "i", "]", "==", "0", "]", ",", "10", ",", "dim", "=", "-", "1", ",", "largest", "=", "False", ")", "\n", "down_k", "=", "down_k", "[", "1", ":", "]", ".", "mean", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "dist_an", ".", "append", "(", "down_k", ")", "\n", "# dist_an.append(dist[i][mask[i] == 0].median().unsqueeze(0))", "\n", "", "dist_ap", "=", "torch", ".", "cat", "(", "dist_ap", ")", "\n", "dist_an", "=", "torch", ".", "cat", "(", "dist_an", ")", "\n", "y", "=", "torch", ".", "ones_like", "(", "dist_an", ")", "\n", "loss_triplet", "=", "self", ".", "ranking_loss", "(", "dist_an", ",", "self", ".", "gamma", "*", "dist_ap", ",", "y", ")", "\n", "return", "dict", "(", "loss", "=", "loss_triplet", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.memories.simple_memory.SimpleMemory.__init__": [[20, 28], ["torch.Module.__init__", "mmcv.runner.get_dist_info", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.functional.normalize", "torch.functional.normalize", "torch.functional.normalize", "simple_memory.SimpleMemory.utils.AliasMethod", "simple_memory.SimpleMemory.multinomial.cuda", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.hooks.triplet_hook.TripletHook.__init__", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda"], ["def", "__init__", "(", "self", ",", "length", ",", "feat_dim", ",", "momentum", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SimpleMemory", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rank", ",", "self", ".", "num_replicas", "=", "get_dist_info", "(", ")", "\n", "self", ".", "feature_bank", "=", "torch", ".", "randn", "(", "length", ",", "feat_dim", ")", ".", "cuda", "(", ")", "\n", "self", ".", "feature_bank", "=", "nn", ".", "functional", ".", "normalize", "(", "self", ".", "feature_bank", ")", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "multinomial", "=", "AliasMethod", "(", "torch", ".", "ones", "(", "length", ")", ")", "\n", "self", ".", "multinomial", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.memories.simple_memory.SimpleMemory.update": [[29, 43], ["torch.functional.normalize", "torch.functional.normalize", "torch.functional.normalize", "simple_memory.SimpleMemory._gather", "torch.functional.normalize", "torch.functional.normalize", "torch.functional.normalize"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.memories.simple_memory.SimpleMemory._gather"], ["", "def", "update", "(", "self", ",", "ind", ",", "feature", ")", ":", "\n", "        ", "\"\"\"Update features in memory bank.\n\n        Args:\n            ind (Tensor): Indices for the batch of features.\n            feature (Tensor): Batch of features.\n        \"\"\"", "\n", "feature_norm", "=", "nn", ".", "functional", ".", "normalize", "(", "feature", ")", "\n", "ind", ",", "feature_norm", "=", "self", ".", "_gather", "(", "ind", ",", "feature_norm", ")", "\n", "feature_old", "=", "self", ".", "feature_bank", "[", "ind", ",", "...", "]", "\n", "feature_new", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "feature_old", "+", "self", ".", "momentum", "*", "feature_norm", "\n", "feature_new_norm", "=", "nn", ".", "functional", ".", "normalize", "(", "feature_new", ")", "\n", "self", ".", "feature_bank", "[", "ind", ",", "...", "]", "=", "feature_new_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.memories.simple_memory.SimpleMemory._gather": [[44, 66], ["torch.all_gather", "torch.all_gather", "torch.all_gather", "torch.all_gather", "torch.all_gather", "torch.all_gather", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "range", "range", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.alias_multinomial.AliasMethod.cuda"], ["", "def", "_gather", "(", "self", ",", "ind", ",", "feature", ")", ":", "\n", "        ", "\"\"\"Gather indices and features.\n\n        Args:\n            ind (Tensor): Indices for the batch of features.\n            feature (Tensor): Batch of features.\n\n        Returns:\n            Tensor: Gathered indices.\n            Tensor: Gathered features.\n        \"\"\"", "\n", "ind_gathered", "=", "[", "\n", "torch", ".", "ones_like", "(", "ind", ")", ".", "cuda", "(", ")", "for", "_", "in", "range", "(", "self", ".", "num_replicas", ")", "\n", "]", "\n", "feature_gathered", "=", "[", "\n", "torch", ".", "ones_like", "(", "feature", ")", ".", "cuda", "(", ")", "for", "_", "in", "range", "(", "self", ".", "num_replicas", ")", "\n", "]", "\n", "dist", ".", "all_gather", "(", "ind_gathered", ",", "ind", ")", "\n", "dist", ".", "all_gather", "(", "feature_gathered", ",", "feature", ")", "\n", "ind_gathered", "=", "torch", ".", "cat", "(", "ind_gathered", ",", "dim", "=", "0", ")", "\n", "feature_gathered", "=", "torch", ".", "cat", "(", "feature_gathered", ",", "dim", "=", "0", ")", "\n", "return", "ind_gathered", ",", "feature_gathered", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnet.BasicBlock.__init__": [[15, 49], ["dict", "torch.Module.__init__", "utils.build_norm_layer", "utils.build_norm_layer", "utils.build_conv_layer", "resnet.BasicBlock.add_module", "utils.build_conv_layer", "resnet.BasicBlock.add_module", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.hooks.triplet_hook.TripletHook.__init__", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.norm.build_norm_layer", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.norm.build_norm_layer", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.conv_module.build_conv_layer", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.conv_module.build_conv_layer"], ["# and potentially 'SN'", "\n", "}", "\n", "\n", "\n", "def", "build_norm_layer", "(", "cfg", ",", "num_features", ",", "postfix", "=", "''", ")", ":", "\n", "    ", "\"\"\"Build normalization layer.\n    Args:\n        cfg (dict): cfg should contain:\n            type (str): identify norm layer type.\n            layer args: args needed to instantiate a norm layer.\n            requires_grad (bool): [optional] whether stop gradient updates\n        num_features (int): number of channels from input.\n        postfix (int, str): appended into norm abbreviation to\n            create named layer.\n    Returns:\n        name (str): abbreviation + postfix\n        layer (nn.Module): created norm layer\n    \"\"\"", "\n", "assert", "isinstance", "(", "cfg", ",", "dict", ")", "and", "'type'", "in", "cfg", "\n", "cfg_", "=", "cfg", ".", "copy", "(", ")", "\n", "\n", "layer_type", "=", "cfg_", ".", "pop", "(", "'type'", ")", "\n", "if", "layer_type", "not", "in", "norm_cfg", ":", "\n", "        ", "raise", "KeyError", "(", "'Unrecognized norm type {}'", ".", "format", "(", "layer_type", ")", ")", "\n", "", "else", ":", "\n", "        ", "abbr", ",", "norm_layer", "=", "norm_cfg", "[", "layer_type", "]", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "", "assert", "isinstance", "(", "postfix", ",", "(", "int", ",", "str", ")", ")", "\n", "name", "=", "abbr", "+", "str", "(", "postfix", ")", "\n", "\n", "requires_grad", "=", "cfg_", ".", "pop", "(", "'requires_grad'", ",", "True", ")", "\n", "cfg_", ".", "setdefault", "(", "'eps'", ",", "1e-5", ")", "\n", "if", "layer_type", "!=", "'GN'", ":", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnet.BasicBlock.norm1": [[50, 53], ["getattr"], "methods", ["None"], ["        ", "layer", "=", "norm_layer", "(", "num_features", ",", "**", "cfg_", ")", "\n", "# if layer_type == 'SyncBN':", "\n", "#     layer._specify_ddp_gpu_num(1)", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnet.BasicBlock.norm2": [[54, 57], ["getattr"], "methods", ["None"], ["        ", "assert", "'num_groups'", "in", "cfg_", "\n", "layer", "=", "norm_layer", "(", "num_channels", "=", "num_features", ",", "**", "cfg_", ")", "\n", "\n", "", "for", "param", "in", "layer", ".", "parameters", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnet.BasicBlock.forward": [[58, 75], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.norm1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.norm2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnet.ResNet.norm1", "home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnet.Bottleneck.norm2"], ["        ", "param", ".", "requires_grad", "=", "requires_grad", "\n", "\n", "", "return", "name", ",", "layer", "\n", "\n", "\n", "", "conv_cfg", "=", "{", "\n", "'Conv'", ":", "nn", ".", "Conv2d", ",", "\n", "}", "\n", "\n", "def", "build_conv_layer", "(", "cfg", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Build convolution layer.\n    Args:\n        cfg (None or dict): Cfg should contain:\n            type (str): Identify conv layer type.\n            layer args: Args needed to instantiate a conv layer.\n    Returns:\n        nn.Module: Created conv layer.\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnet.Bottleneck.__init__": [[80, 146], ["dict", "torch.Module.__init__", "utils.build_norm_layer", "utils.build_norm_layer", "utils.build_norm_layer", "utils.build_conv_layer", "resnet.Bottleneck.add_module", "utils.build_conv_layer", "resnet.Bottleneck.add_module", "utils.build_conv_layer", "resnet.Bottleneck.add_module", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.hooks.triplet_hook.TripletHook.__init__", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.norm.build_norm_layer", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.norm.build_norm_layer", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.norm.build_norm_layer", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.conv_module.build_conv_layer", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.conv_module.build_conv_layer", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.conv_module.build_conv_layer"], ["cfg_", "=", "cfg", ".", "copy", "(", ")", "\n", "\n", "", "layer_type", "=", "cfg_", ".", "pop", "(", "'type'", ")", "\n", "if", "layer_type", "not", "in", "conv_cfg", ":", "\n", "        ", "raise", "KeyError", "(", "'Unrecognized norm type {}'", ".", "format", "(", "layer_type", ")", ")", "\n", "", "else", ":", "\n", "        ", "conv_layer", "=", "conv_cfg", "[", "layer_type", "]", "\n", "\n", "", "layer", "=", "conv_layer", "(", "*", "args", ",", "**", "kwargs", ",", "**", "cfg_", ")", "\n", "\n", "return", "layer", "\n", "\n", "\n", "\n", "", "class", "BasicBlock", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "1", "\n", "\n", "def", "__init__", "(", "self", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "downsample", "=", "None", ",", "\n", "style", "=", "'pytorch'", ",", "\n", "with_cp", "=", "False", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "norm1_name", ",", "norm1", "=", "build_norm_layer", "(", "norm_cfg", ",", "planes", ",", "postfix", "=", "1", ")", "\n", "self", ".", "norm2_name", ",", "norm2", "=", "build_norm_layer", "(", "norm_cfg", ",", "planes", ",", "postfix", "=", "2", ")", "\n", "\n", "self", ".", "conv1", "=", "build_conv_layer", "(", "\n", "conv_cfg", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm1_name", ",", "norm1", ")", "\n", "self", ".", "conv2", "=", "build_conv_layer", "(", "\n", "conv_cfg", ",", "planes", ",", "planes", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm2_name", ",", "norm2", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "dilation", "=", "dilation", "\n", "assert", "not", "with_cp", "\n", "\n", "", "@", "property", "\n", "def", "norm1", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "norm1_name", ")", "\n", "\n", "", "@", "property", "\n", "def", "norm2", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "norm2_name", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "norm1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnet.Bottleneck.norm1": [[147, 150], ["getattr"], "methods", ["None"], ["out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "norm2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnet.Bottleneck.norm2": [[151, 154], ["getattr"], "methods", ["None"], ["            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnet.Bottleneck.norm3": [[155, 158], ["getattr"], "methods", ["None"], ["\n", "return", "out", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnet.Bottleneck.forward": [[159, 190], ["resnet.Bottleneck.relu", "resnet.Bottleneck.conv1", "resnet.Bottleneck.norm1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.norm2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.norm3", "torch.checkpoint", "torch.checkpoint", "resnet.Bottleneck.forward._inner_forward"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnet.ResNet.norm1", "home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnet.Bottleneck.norm2", "home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnet.Bottleneck.norm3"], ["", "", "class", "Bottleneck", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "4", "\n", "\n", "def", "__init__", "(", "self", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "downsample", "=", "None", ",", "\n", "style", "=", "'pytorch'", ",", "\n", "with_cp", "=", "False", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ")", ":", "\n", "        ", "\"\"\"Bottleneck block for ResNet.\n        If style is \"pytorch\", the stride-two layer is the 3x3 conv layer,\n        if it is \"caffe\", the stride-two layer is the first 1x1 conv layer.\n        \"\"\"", "\n", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "style", "in", "[", "'pytorch'", ",", "'caffe'", "]", "\n", "\n", "self", ".", "inplanes", "=", "inplanes", "\n", "self", ".", "planes", "=", "planes", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "style", "=", "style", "\n", "self", ".", "with_cp", "=", "with_cp", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "\n", "if", "self", ".", "style", "==", "'pytorch'", ":", "\n", "            ", "self", ".", "conv1_stride", "=", "1", "\n", "self", ".", "conv2_stride", "=", "stride", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnet.ResNet.__init__": [[291, 354], ["dict", "torch.Module.__init__", "resnet.ResNet._make_stem_layer", "enumerate", "resnet.ResNet._freeze_stages", "KeyError", "len", "len", "max", "resnet.make_res_layer", "resnet.ResNet.add_module", "resnet.ResNet.res_layers.append", "len"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.hooks.triplet_hook.TripletHook.__init__", "home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnet.ResNet._make_stem_layer", "home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnet.ResNet._freeze_stages", "home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnext.make_res_layer"], ["kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ")", ",", "\n", "build_norm_layer", "(", "norm_cfg", ",", "planes", "*", "block", ".", "expansion", ")", "[", "1", "]", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "\n", "inplanes", "=", "inplanes", ",", "\n", "planes", "=", "planes", ",", "\n", "stride", "=", "stride", ",", "\n", "dilation", "=", "dilation", ",", "\n", "downsample", "=", "downsample", ",", "\n", "style", "=", "style", ",", "\n", "with_cp", "=", "with_cp", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ")", ")", "\n", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "        ", "layers", ".", "append", "(", "\n", "block", "(", "\n", "inplanes", "=", "inplanes", ",", "\n", "planes", "=", "planes", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "dilation", ",", "\n", "style", "=", "style", ",", "\n", "with_cp", "=", "with_cp", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "\n", "", "class", "ResNet", "(", "nn", ".", "Module", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnet.ResNet.norm1": [[355, 358], ["getattr"], "methods", ["None"], []], "home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnet.ResNet._make_stem_layer": [[359, 372], ["utils.build_conv_layer", "utils.build_norm_layer", "resnet.ResNet.add_module", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.utils.conv_module.build_conv_layer", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.norm.build_norm_layer"], ["\n", "\n", "arch_settings", "=", "{", "\n", "50", ":", "(", "Bottleneck", ",", "(", "3", ",", "4", ",", "6", ",", "3", ")", ")", ",", "\n", "}", "\n", "\n", "def", "__init__", "(", "self", ",", "\n", "depth", ",", "\n", "in_channels", "=", "3", ",", "\n", "num_stages", "=", "4", ",", "\n", "strides", "=", "(", "1", ",", "2", ",", "2", ",", "2", ")", ",", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnet.ResNet._freeze_stages": [[373, 385], ["range", "resnet.ResNet.norm1.eval", "getattr", "getattr.eval", "getattr.parameters", "getattr.parameters"], "methods", ["None"], ["dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "out_indices", "=", "(", "0", ",", "1", ",", "2", ",", "3", ",", "4", ")", ",", "\n", "style", "=", "'pytorch'", ",", "\n", "frozen_stages", "=", "-", "1", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ",", "requires_grad", "=", "True", ")", ",", "\n", "norm_eval", "=", "False", ",", "\n", "with_cp", "=", "False", ",", "\n", "zero_init_residual", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "depth", "not", "in", "self", ".", "arch_settings", ":", "\n", "            ", "raise", "KeyError", "(", "'invalid depth {} for resnet'", ".", "format", "(", "depth", ")", ")", "\n", "", "self", ".", "depth", "=", "depth", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnet.ResNet.init_weights": [[386, 405], ["isinstance", "resnet.ResNet.utils.get_root_logger", "mmcv.runner.load_checkpoint", "resnet.ResNet.modules", "TypeError", "isinstance", "resnet.ResNet.modules", "mmcv.cnn.kaiming_init", "isinstance", "isinstance", "mmcv.cnn.constant_init", "mmcv.cnn.constant_init", "isinstance", "mmcv.cnn.constant_init"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.utils.logger.get_root_logger"], ["self", ".", "num_stages", "=", "num_stages", "\n", "assert", "num_stages", ">=", "1", "and", "num_stages", "<=", "4", "\n", "self", ".", "strides", "=", "strides", "\n", "self", ".", "dilations", "=", "dilations", "\n", "assert", "len", "(", "strides", ")", "==", "len", "(", "dilations", ")", "==", "num_stages", "\n", "self", ".", "out_indices", "=", "out_indices", "\n", "assert", "max", "(", "out_indices", ")", "<", "num_stages", "+", "1", "\n", "self", ".", "style", "=", "style", "\n", "self", ".", "frozen_stages", "=", "frozen_stages", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "with_cp", "=", "with_cp", "\n", "self", ".", "norm_eval", "=", "norm_eval", "\n", "self", ".", "zero_init_residual", "=", "zero_init_residual", "\n", "self", ".", "block", ",", "stage_blocks", "=", "self", ".", "arch_settings", "[", "depth", "]", "\n", "self", ".", "stage_blocks", "=", "stage_blocks", "[", ":", "num_stages", "]", "\n", "self", ".", "inplanes", "=", "64", "\n", "\n", "self", ".", "_make_stem_layer", "(", "in_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnet.ResNet.forward": [[406, 421], ["resnet.ResNet.conv1", "resnet.ResNet.norm1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "enumerate", "tuple", "outs.append", "getattr", "getattr.", "outs.append"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnet.ResNet.norm1"], ["self", ".", "res_layers", "=", "[", "]", "\n", "for", "i", ",", "num_blocks", "in", "enumerate", "(", "self", ".", "stage_blocks", ")", ":", "\n", "            ", "stride", "=", "strides", "[", "i", "]", "\n", "dilation", "=", "dilations", "[", "i", "]", "\n", "planes", "=", "64", "*", "2", "**", "i", "\n", "res_layer", "=", "make_res_layer", "(", "\n", "self", ".", "block", ",", "\n", "self", ".", "inplanes", ",", "\n", "planes", ",", "\n", "num_blocks", ",", "\n", "stride", "=", "stride", ",", "\n", "dilation", "=", "dilation", ",", "\n", "style", "=", "self", ".", "style", ",", "\n", "with_cp", "=", "with_cp", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ")", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnet.ResNet.train": [[422, 430], ["super().train", "resnet.ResNet._freeze_stages", "resnet.ResNet.modules", "isinstance", "m.eval"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnet.ResNet.train", "home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnet.ResNet._freeze_stages"], ["self", ".", "inplanes", "=", "planes", "*", "self", ".", "block", ".", "expansion", "\n", "layer_name", "=", "'layer{}'", ".", "format", "(", "i", "+", "1", ")", "\n", "self", ".", "add_module", "(", "layer_name", ",", "res_layer", ")", "\n", "self", ".", "res_layers", ".", "append", "(", "layer_name", ")", "\n", "\n", "", "self", ".", "_freeze_stages", "(", ")", "\n", "\n", "self", ".", "feat_dim", "=", "self", ".", "block", ".", "expansion", "*", "64", "*", "2", "**", "(", "\n", "len", "(", "self", ".", "stage_blocks", ")", "-", "1", ")", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnet.make_res_layer": [[192, 241], ["dict", "layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "utils.build_conv_layer", "block", "utils.build_norm_layer"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.utils.conv_module.build_conv_layer", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.norm.build_norm_layer"], ["            ", "self", ".", "conv1_stride", "=", "stride", "\n", "self", ".", "conv2_stride", "=", "1", "\n", "\n", "", "self", ".", "norm1_name", ",", "norm1", "=", "build_norm_layer", "(", "norm_cfg", ",", "planes", ",", "postfix", "=", "1", ")", "\n", "self", ".", "norm2_name", ",", "norm2", "=", "build_norm_layer", "(", "norm_cfg", ",", "planes", ",", "postfix", "=", "2", ")", "\n", "self", ".", "norm3_name", ",", "norm3", "=", "build_norm_layer", "(", "\n", "norm_cfg", ",", "planes", "*", "self", ".", "expansion", ",", "postfix", "=", "3", ")", "\n", "\n", "self", ".", "conv1", "=", "build_conv_layer", "(", "\n", "conv_cfg", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "self", ".", "conv1_stride", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm1_name", ",", "norm1", ")", "\n", "self", ".", "conv2", "=", "build_conv_layer", "(", "\n", "conv_cfg", ",", "\n", "planes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "self", ".", "conv2_stride", ",", "\n", "padding", "=", "dilation", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm2_name", ",", "norm2", ")", "\n", "self", ".", "conv3", "=", "build_conv_layer", "(", "\n", "conv_cfg", ",", "\n", "planes", ",", "\n", "planes", "*", "self", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm3_name", ",", "norm3", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n", "", "@", "property", "\n", "def", "norm1", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "norm1_name", ")", "\n", "\n", "", "@", "property", "\n", "def", "norm2", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "norm2_name", ")", "\n", "\n", "", "@", "property", "\n", "def", "norm3", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "norm3_name", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnext.Bottleneck.__init__": [[13, 76], ["resnet.Bottleneck.__init__", "utils.build_norm_layer", "utils.build_norm_layer", "utils.build_norm_layer", "utils.build_conv_layer", "resnext.Bottleneck.add_module", "resnext.Bottleneck.add_module", "utils.build_conv_layer", "resnext.Bottleneck.add_module", "resnext.Bottleneck.dcn.pop", "utils.build_conv_layer", "utils.build_conv_layer", "math.floor"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.hooks.triplet_hook.TripletHook.__init__", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.norm.build_norm_layer", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.norm.build_norm_layer", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.norm.build_norm_layer", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.conv_module.build_conv_layer", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.conv_module.build_conv_layer", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.conv_module.build_conv_layer", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.conv_module.build_conv_layer"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "groups", "=", "1", ",", "base_width", "=", "4", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Bottleneck block for ResNeXt.\n        If style is \"pytorch\", the stride-two layer is the 3x3 conv layer,\n        if it is \"caffe\", the stride-two layer is the first 1x1 conv layer.\n        \"\"\"", "\n", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", "inplanes", ",", "planes", ",", "**", "kwargs", ")", "\n", "\n", "if", "groups", "==", "1", ":", "\n", "            ", "width", "=", "self", ".", "planes", "\n", "", "else", ":", "\n", "            ", "width", "=", "math", ".", "floor", "(", "self", ".", "planes", "*", "(", "base_width", "/", "64", ")", ")", "*", "groups", "\n", "\n", "", "self", ".", "norm1_name", ",", "norm1", "=", "build_norm_layer", "(", "\n", "self", ".", "norm_cfg", ",", "width", ",", "postfix", "=", "1", ")", "\n", "self", ".", "norm2_name", ",", "norm2", "=", "build_norm_layer", "(", "\n", "self", ".", "norm_cfg", ",", "width", ",", "postfix", "=", "2", ")", "\n", "self", ".", "norm3_name", ",", "norm3", "=", "build_norm_layer", "(", "\n", "self", ".", "norm_cfg", ",", "self", ".", "planes", "*", "self", ".", "expansion", ",", "postfix", "=", "3", ")", "\n", "\n", "self", ".", "conv1", "=", "build_conv_layer", "(", "\n", "self", ".", "conv_cfg", ",", "\n", "self", ".", "inplanes", ",", "\n", "width", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "self", ".", "conv1_stride", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm1_name", ",", "norm1", ")", "\n", "fallback_on_stride", "=", "False", "\n", "self", ".", "with_modulated_dcn", "=", "False", "\n", "if", "self", ".", "with_dcn", ":", "\n", "            ", "fallback_on_stride", "=", "self", ".", "dcn", ".", "pop", "(", "'fallback_on_stride'", ",", "False", ")", "\n", "", "if", "not", "self", ".", "with_dcn", "or", "fallback_on_stride", ":", "\n", "            ", "self", ".", "conv2", "=", "build_conv_layer", "(", "\n", "self", ".", "conv_cfg", ",", "\n", "width", ",", "\n", "width", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "self", ".", "conv2_stride", ",", "\n", "padding", "=", "self", ".", "dilation", ",", "\n", "dilation", "=", "self", ".", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "assert", "self", ".", "conv_cfg", "is", "None", ",", "'conv_cfg must be None for DCN'", "\n", "self", ".", "conv2", "=", "build_conv_layer", "(", "\n", "self", ".", "dcn", ",", "\n", "width", ",", "\n", "width", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "self", ".", "conv2_stride", ",", "\n", "padding", "=", "self", ".", "dilation", ",", "\n", "dilation", "=", "self", ".", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "False", ")", "\n", "\n", "", "self", ".", "add_module", "(", "self", ".", "norm2_name", ",", "norm2", ")", "\n", "self", ".", "conv3", "=", "build_conv_layer", "(", "\n", "self", ".", "conv_cfg", ",", "\n", "width", ",", "\n", "self", ".", "planes", "*", "self", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm3_name", ",", "norm3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnext.ResNeXt.__init__": [[189, 223], ["resnet.ResNet.__init__", "enumerate", "resnext.ResNeXt._freeze_stages", "resnext.make_res_layer", "resnext.ResNeXt.add_module", "resnext.ResNeXt.res_layers.append"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.hooks.triplet_hook.TripletHook.__init__", "home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnet.ResNet._freeze_stages", "home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnext.make_res_layer"], ["def", "__init__", "(", "self", ",", "groups", "=", "1", ",", "base_width", "=", "4", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ResNeXt", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "base_width", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "res_layers", "=", "[", "]", "\n", "for", "i", ",", "num_blocks", "in", "enumerate", "(", "self", ".", "stage_blocks", ")", ":", "\n", "            ", "stride", "=", "self", ".", "strides", "[", "i", "]", "\n", "dilation", "=", "self", ".", "dilations", "[", "i", "]", "\n", "dcn", "=", "self", ".", "dcn", "if", "self", ".", "stage_with_dcn", "[", "i", "]", "else", "None", "\n", "gcb", "=", "self", ".", "gcb", "if", "self", ".", "stage_with_gcb", "[", "i", "]", "else", "None", "\n", "planes", "=", "64", "*", "2", "**", "i", "\n", "res_layer", "=", "make_res_layer", "(", "\n", "self", ".", "block", ",", "\n", "self", ".", "inplanes", ",", "\n", "planes", ",", "\n", "num_blocks", ",", "\n", "stride", "=", "stride", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "\n", "style", "=", "self", ".", "style", ",", "\n", "with_cp", "=", "self", ".", "with_cp", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "dcn", "=", "dcn", ",", "\n", "gcb", "=", "gcb", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "self", ".", "block", ".", "expansion", "\n", "layer_name", "=", "'layer{}'", ".", "format", "(", "i", "+", "1", ")", "\n", "self", ".", "add_module", "(", "layer_name", ",", "res_layer", ")", "\n", "self", ".", "res_layers", ".", "append", "(", "layer_name", ")", "\n", "\n", "", "self", ".", "_freeze_stages", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnext.make_res_layer": [[78, 139], ["dict", "layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "utils.build_conv_layer", "block", "utils.build_norm_layer"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.utils.conv_module.build_conv_layer", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.norm.build_norm_layer"], ["", "", "def", "make_res_layer", "(", "block", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "blocks", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "base_width", "=", "4", ",", "\n", "style", "=", "'pytorch'", ",", "\n", "with_cp", "=", "False", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "dcn", "=", "None", ",", "\n", "gcb", "=", "None", ")", ":", "\n", "    ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "        ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "build_conv_layer", "(", "\n", "conv_cfg", ",", "\n", "inplanes", ",", "\n", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ")", ",", "\n", "build_norm_layer", "(", "norm_cfg", ",", "planes", "*", "block", ".", "expansion", ")", "[", "1", "]", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "\n", "inplanes", "=", "inplanes", ",", "\n", "planes", "=", "planes", ",", "\n", "stride", "=", "stride", ",", "\n", "dilation", "=", "dilation", ",", "\n", "downsample", "=", "downsample", ",", "\n", "groups", "=", "groups", ",", "\n", "base_width", "=", "base_width", ",", "\n", "style", "=", "style", ",", "\n", "with_cp", "=", "with_cp", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "dcn", "=", "dcn", ",", "\n", "gcb", "=", "gcb", ")", ")", "\n", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "        ", "layers", ".", "append", "(", "\n", "block", "(", "\n", "inplanes", "=", "inplanes", ",", "\n", "planes", "=", "planes", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "base_width", "=", "base_width", ",", "\n", "style", "=", "style", ",", "\n", "with_cp", "=", "with_cp", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "dcn", "=", "dcn", ",", "\n", "gcb", "=", "gcb", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.hooks.optimizer_hook.DistOptimizerHook.__init__": [[10, 16], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "update_interval", "=", "1", ",", "grad_clip", "=", "None", ",", "coalesce", "=", "True", ",", "bucket_size_mb", "=", "-", "1", ",", "use_fp16", "=", "False", ")", ":", "\n", "        ", "self", ".", "grad_clip", "=", "grad_clip", "\n", "self", ".", "coalesce", "=", "coalesce", "\n", "self", ".", "bucket_size_mb", "=", "bucket_size_mb", "\n", "self", ".", "update_interval", "=", "update_interval", "\n", "self", ".", "use_fp16", "=", "use_fp16", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.hooks.optimizer_hook.DistOptimizerHook.before_run": [[17, 19], ["runner.optimizer.zero_grad"], "methods", ["None"], ["", "def", "before_run", "(", "self", ",", "runner", ")", ":", "\n", "        ", "runner", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.hooks.optimizer_hook.DistOptimizerHook.after_train_iter": [[20, 32], ["optimizer_hook.DistOptimizerHook.every_n_iters", "runner.outputs[].backward", "runner.optimizer.step", "runner.optimizer.zero_grad", "apex.amp.scale_loss", "scaled_loss.backward", "optimizer_hook.DistOptimizerHook.clip_grads", "runner.model.parameters"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.utils.gather_layer.GatherLayer.backward", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.optimizers.LARS.step", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.gather_layer.GatherLayer.backward"], ["", "def", "after_train_iter", "(", "self", ",", "runner", ")", ":", "\n", "        ", "runner", ".", "outputs", "[", "'loss'", "]", "/=", "self", ".", "update_interval", "\n", "if", "self", ".", "use_fp16", ":", "\n", "            ", "with", "apex", ".", "amp", ".", "scale_loss", "(", "runner", ".", "outputs", "[", "'loss'", "]", ",", "runner", ".", "optimizer", ")", "as", "scaled_loss", ":", "\n", "                ", "scaled_loss", ".", "backward", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "runner", ".", "outputs", "[", "'loss'", "]", ".", "backward", "(", ")", "\n", "", "if", "self", ".", "every_n_iters", "(", "runner", ",", "self", ".", "update_interval", ")", ":", "\n", "            ", "if", "self", ".", "grad_clip", "is", "not", "None", ":", "\n", "                ", "self", ".", "clip_grads", "(", "runner", ".", "model", ".", "parameters", "(", ")", ")", "\n", "", "runner", ".", "optimizer", ".", "step", "(", ")", "\n", "runner", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.wanggrun_triplet.hooks.validate_hook.ValidateHook.__init__": [[25, 53], ["isinstance", "datasets.build_dataloader", "isinstance", "datasets.build_dataset", "TypeError", "eval_kwargs.get", "eval_kwargs.get", "dict", "type"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.loader.build_loader.build_dataloader", "home.repos.pwc.inspect_result.wanggrun_triplet.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.registry.Registry.get"], ["def", "__init__", "(", "self", ",", "\n", "dataset", ",", "\n", "dist_mode", "=", "True", ",", "\n", "initial", "=", "True", ",", "\n", "interval", "=", "1", ",", "\n", "**", "eval_kwargs", ")", ":", "\n", "        ", "from", "openselfsup", "import", "datasets", "\n", "if", "isinstance", "(", "dataset", ",", "Dataset", ")", ":", "\n", "            ", "self", ".", "dataset", "=", "dataset", "\n", "", "elif", "isinstance", "(", "dataset", ",", "dict", ")", ":", "\n", "            ", "self", ".", "dataset", "=", "datasets", ".", "build_dataset", "(", "dataset", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "'dataset must be a Dataset object or a dict, not {}'", ".", "format", "(", "\n", "type", "(", "dataset", ")", ")", ")", "\n", "", "self", ".", "data_loader", "=", "datasets", ".", "build_dataloader", "(", "\n", "self", ".", "dataset", ",", "\n", "eval_kwargs", "[", "'imgs_per_gpu'", "]", ",", "\n", "eval_kwargs", "[", "'workers_per_gpu'", "]", ",", "\n", "dist", "=", "dist_mode", ",", "\n", "shuffle", "=", "False", ",", "\n", "prefetch", "=", "eval_kwargs", ".", "get", "(", "'prefetch'", ",", "False", ")", ",", "\n", "img_norm_cfg", "=", "eval_kwargs", ".", "get", "(", "'img_norm_cfg'", ",", "dict", "(", ")", ")", ",", "\n", ")", "\n", "self", ".", "dist_mode", "=", "dist_mode", "\n", "self", ".", "initial", "=", "initial", "\n", "self", ".", "interval", "=", "interval", "\n", "self", ".", "eval_kwargs", "=", "eval_kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.hooks.validate_hook.ValidateHook.before_run": [[54, 57], ["validate_hook.ValidateHook._run_validate"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.hooks.validate_hook.ValidateHook._run_validate"], ["", "def", "before_run", "(", "self", ",", "runner", ")", ":", "\n", "        ", "if", "self", ".", "initial", ":", "\n", "            ", "self", ".", "_run_validate", "(", "runner", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.hooks.validate_hook.ValidateHook.after_train_epoch": [[58, 62], ["validate_hook.ValidateHook._run_validate", "validate_hook.ValidateHook.every_n_epochs"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.hooks.validate_hook.ValidateHook._run_validate"], ["", "", "def", "after_train_epoch", "(", "self", ",", "runner", ")", ":", "\n", "        ", "if", "not", "self", ".", "every_n_epochs", "(", "runner", ",", "self", ".", "interval", ")", ":", "\n", "            ", "return", "\n", "", "self", ".", "_run_validate", "(", "runner", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.hooks.validate_hook.ValidateHook._run_validate": [[63, 77], ["runner.model.eval", "runner.model.train", "runner.model", "validate_hook.ValidateHook.utils.dist_forward_collect", "validate_hook.ValidateHook.utils.nondist_forward_collect", "validate_hook.ValidateHook.utils.nondist_forward_collect.items", "len", "len", "validate_hook.ValidateHook._evaluate", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.backbones.resnet.ResNet.train", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.collect.dist_forward_collect", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.collect.nondist_forward_collect", "home.repos.pwc.inspect_result.wanggrun_triplet.hooks.validate_hook.ValidateHook._evaluate"], ["", "def", "_run_validate", "(", "self", ",", "runner", ")", ":", "\n", "        ", "runner", ".", "model", ".", "eval", "(", ")", "\n", "func", "=", "lambda", "**", "x", ":", "runner", ".", "model", "(", "mode", "=", "'test'", ",", "**", "x", ")", "\n", "if", "self", ".", "dist_mode", ":", "\n", "            ", "results", "=", "dist_forward_collect", "(", "\n", "func", ",", "self", ".", "data_loader", ",", "runner", ".", "rank", ",", "\n", "len", "(", "self", ".", "dataset", ")", ")", "# dict{key: np.ndarray}", "\n", "", "else", ":", "\n", "            ", "results", "=", "nondist_forward_collect", "(", "func", ",", "self", ".", "data_loader", ",", "\n", "len", "(", "self", ".", "dataset", ")", ")", "\n", "", "if", "runner", ".", "rank", "==", "0", ":", "\n", "            ", "for", "name", ",", "val", "in", "results", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "_evaluate", "(", "runner", ",", "torch", ".", "from_numpy", "(", "val", ")", ",", "name", ")", "\n", "", "", "runner", ".", "model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.hooks.validate_hook.ValidateHook._evaluate": [[78, 87], ["validate_hook.ValidateHook.dataset.evaluate", "validate_hook.ValidateHook.items"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.datasets.extraction.ExtractDataset.evaluate"], ["", "def", "_evaluate", "(", "self", ",", "runner", ",", "results", ",", "keyword", ")", ":", "\n", "        ", "eval_res", "=", "self", ".", "dataset", ".", "evaluate", "(", "\n", "results", ",", "\n", "keyword", "=", "keyword", ",", "\n", "logger", "=", "runner", ".", "logger", ",", "\n", "**", "self", ".", "eval_kwargs", "[", "'eval_param'", "]", ")", "\n", "for", "name", ",", "val", "in", "eval_res", ".", "items", "(", ")", ":", "\n", "            ", "runner", ".", "log_buffer", ".", "output", "[", "name", "]", "=", "val", "\n", "", "runner", ".", "log_buffer", ".", "ready", "=", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wanggrun_triplet.hooks.extractor.Extractor.__init__": [[20, 42], ["isinstance", "datasets.build_dataloader", "torch.AdaptiveAvgPool2d", "isinstance", "datasets.build_dataset", "TypeError", "type"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.loader.build_loader.build_dataloader", "home.repos.pwc.inspect_result.wanggrun_triplet.datasets.builder.build_dataset"], ["def", "__init__", "(", "self", ",", "\n", "dataset", ",", "\n", "imgs_per_gpu", ",", "\n", "workers_per_gpu", ",", "\n", "dist_mode", "=", "False", ")", ":", "\n", "        ", "from", "openselfsup", "import", "datasets", "\n", "if", "isinstance", "(", "dataset", ",", "Dataset", ")", ":", "\n", "            ", "self", ".", "dataset", "=", "dataset", "\n", "", "elif", "isinstance", "(", "dataset", ",", "dict", ")", ":", "\n", "            ", "self", ".", "dataset", "=", "datasets", ".", "build_dataset", "(", "dataset", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "'dataset must be a Dataset object or a dict, not {}'", ".", "format", "(", "\n", "type", "(", "dataset", ")", ")", ")", "\n", "", "self", ".", "data_loader", "=", "datasets", ".", "build_dataloader", "(", "\n", "self", ".", "dataset", ",", "\n", "imgs_per_gpu", ",", "\n", "workers_per_gpu", ",", "\n", "dist", "=", "dist_mode", ",", "\n", "shuffle", "=", "False", ")", "\n", "self", ".", "dist_mode", "=", "dist_mode", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.hooks.extractor.Extractor._forward_func": [[43, 48], ["runner.model", "last_layer_feat.view.view.view", "dict", "runner.model.module.neck", "last_layer_feat.view.view.size", "last_layer_feat.view.view.cpu"], "methods", ["None"], ["", "def", "_forward_func", "(", "self", ",", "runner", ",", "**", "x", ")", ":", "\n", "        ", "backbone_feat", "=", "runner", ".", "model", "(", "mode", "=", "'extract'", ",", "**", "x", ")", "\n", "last_layer_feat", "=", "runner", ".", "model", ".", "module", ".", "neck", "(", "[", "backbone_feat", "[", "-", "1", "]", "]", ")", "[", "0", "]", "\n", "last_layer_feat", "=", "last_layer_feat", ".", "view", "(", "last_layer_feat", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "return", "dict", "(", "feature", "=", "last_layer_feat", ".", "cpu", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.hooks.extractor.Extractor.__call__": [[49, 62], ["extractor.Extractor._forward_func", "extractor.Extractor.utils.dist_forward_collect", "extractor.Extractor.utils.nondist_forward_collect", "len", "len"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.hooks.extractor.Extractor._forward_func", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.collect.dist_forward_collect", "home.repos.pwc.inspect_result.wanggrun_triplet.utils.collect.nondist_forward_collect"], ["", "def", "__call__", "(", "self", ",", "runner", ")", ":", "\n", "        ", "func", "=", "lambda", "**", "x", ":", "self", ".", "_forward_func", "(", "runner", ",", "**", "x", ")", "\n", "if", "self", ".", "dist_mode", ":", "\n", "            ", "feats", "=", "dist_forward_collect", "(", "\n", "func", ",", "\n", "self", ".", "data_loader", ",", "\n", "runner", ".", "rank", ",", "\n", "len", "(", "self", ".", "dataset", ")", ",", "\n", "ret_rank", "=", "-", "1", ")", "[", "'feature'", "]", "# NxD", "\n", "", "else", ":", "\n", "            ", "feats", "=", "nondist_forward_collect", "(", "func", ",", "self", ".", "data_loader", ",", "\n", "len", "(", "self", ".", "dataset", ")", ")", "[", "'feature'", "]", "\n", "", "return", "feats", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wanggrun_triplet.hooks.triplet_hook.TripletHook.__init__": [[21, 24], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "end_momentum", "=", "1.", ",", "update_interval", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "end_momentum", "=", "end_momentum", "\n", "self", ".", "update_interval", "=", "update_interval", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.hooks.triplet_hook.TripletHook.before_train_iter": [[25, 37], ["hasattr", "hasattr", "triplet_hook.TripletHook.every_n_iters", "math.cos", "float"], "methods", ["None"], ["", "def", "before_train_iter", "(", "self", ",", "runner", ")", ":", "\n", "        ", "assert", "hasattr", "(", "runner", ".", "model", ".", "module", ",", "'momentum'", ")", ",", "\"The runner must have attribute \\\"momentum\\\" in TripletHook.\"", "\n", "assert", "hasattr", "(", "runner", ".", "model", ".", "module", ",", "'base_momentum'", ")", ",", "\"The runner must have attribute \\\"base_momentum\\\" in TripletHook.\"", "\n", "if", "self", ".", "every_n_iters", "(", "runner", ",", "self", ".", "update_interval", ")", ":", "\n", "            ", "cur_iter", "=", "runner", ".", "iter", "\n", "max_iter", "=", "runner", ".", "max_iters", "\n", "base_m", "=", "runner", ".", "model", ".", "module", ".", "base_momentum", "\n", "m", "=", "self", ".", "end_momentum", "-", "(", "self", ".", "end_momentum", "-", "base_m", ")", "*", "(", "\n", "cos", "(", "pi", "*", "cur_iter", "/", "float", "(", "max_iter", ")", ")", "+", "1", ")", "/", "2", "\n", "runner", ".", "model", ".", "module", ".", "momentum", "=", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.wanggrun_triplet.hooks.triplet_hook.TripletHook.after_train_iter": [[38, 44], ["triplet_hook.TripletHook.every_n_iters", "mmcv.parallel.is_module_wrapper", "runner.model.module.momentum_update", "runner.model.momentum_update"], "methods", ["home.repos.pwc.inspect_result.wanggrun_triplet.models.triplet.Triplet.momentum_update", "home.repos.pwc.inspect_result.wanggrun_triplet.models.triplet.Triplet.momentum_update"], ["", "", "def", "after_train_iter", "(", "self", ",", "runner", ")", ":", "\n", "        ", "if", "self", ".", "every_n_iters", "(", "runner", ",", "self", ".", "update_interval", ")", ":", "\n", "            ", "if", "is_module_wrapper", "(", "runner", ".", "model", ")", ":", "\n", "                ", "runner", ".", "model", ".", "module", ".", "momentum_update", "(", ")", "\n", "", "else", ":", "\n", "                ", "runner", ".", "model", ".", "momentum_update", "(", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.wanggrun_triplet.hooks.builder.build_hook": [[6, 8], ["openselfsup.utils.build_from_cfg"], "function", ["home.repos.pwc.inspect_result.wanggrun_triplet.utils.registry.build_from_cfg"], ["\n", "\n", "def", "_concat_dataset", "(", "cfg", ",", "default_args", "=", "None", ")", ":", "\n"]]}