{"home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.core.Smooth.__init__": [[18, 27], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "base_classifier", ":", "torch", ".", "nn", ".", "Module", ",", "num_classes", ":", "int", ",", "sigma", ":", "float", ")", ":", "\n", "        ", "\"\"\"\n        :param base_classifier: maps from [batch x channel x height x width] to [batch x num_classes]\n        :param num_classes:\n        :param sigma: the noise level hyperparameter\n        \"\"\"", "\n", "self", ".", "base_classifier", "=", "base_classifier", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "sigma", "=", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.core.Smooth.certify": [[28, 57], ["core.Smooth.base_classifier.eval", "core.Smooth._sample_noise", "core.Smooth.argmax().item", "core.Smooth._sample_noise", "counts_estimation[].item", "core.Smooth._lower_confidence_bound", "core.Smooth.argmax", "scipy.stats.norm.ppf"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.core.Smooth._sample_noise", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.core.Smooth._sample_noise", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.core.Smooth._lower_confidence_bound"], ["", "def", "certify", "(", "self", ",", "x", ":", "torch", ".", "tensor", ",", "n0", ":", "int", ",", "n", ":", "int", ",", "alpha", ":", "float", ",", "batch_size", ":", "int", ")", "->", "(", "int", ",", "float", ")", ":", "\n", "        ", "\"\"\" Monte Carlo algorithm for certifying that g's prediction around x is constant within some L2 radius.\n        With probability at least 1 - alpha, the class returned by this method will equal g(x), and g's prediction will\n        robust within a L2 ball of radius R around x.\n\n        :param x: the input [channel x height x width]\n        :param n0: the number of Monte Carlo samples to use for selection\n        :param n: the number of Monte Carlo samples to use for estimation\n        :param alpha: the failure probability\n        :param batch_size: batch size to use when evaluating the base classifier\n        :return: (predicted class, certified radius)\n                 in the case of abstention, the class will be ABSTAIN and the radius 0.\n        \"\"\"", "\n", "self", ".", "base_classifier", ".", "eval", "(", ")", "\n", "# draw samples of f(x+ epsilon)", "\n", "counts_selection", "=", "self", ".", "_sample_noise", "(", "x", ",", "n0", ",", "batch_size", ")", "\n", "# use these samples to take a guess at the top class", "\n", "cAHat", "=", "counts_selection", ".", "argmax", "(", ")", ".", "item", "(", ")", "\n", "# draw more samples of f(x + epsilon)", "\n", "counts_estimation", "=", "self", ".", "_sample_noise", "(", "x", ",", "n", ",", "batch_size", ")", "\n", "# use these samples to estimate a lower bound on pA", "\n", "nA", "=", "counts_estimation", "[", "cAHat", "]", ".", "item", "(", ")", "\n", "pABar", "=", "self", ".", "_lower_confidence_bound", "(", "nA", ",", "n", ",", "alpha", ")", "\n", "\n", "if", "pABar", "<", "0.5", ":", "\n", "            ", "return", "Smooth", ".", "ABSTAIN", ",", "0.0", "\n", "", "else", ":", "\n", "            ", "radius", "=", "self", ".", "sigma", "*", "norm", ".", "ppf", "(", "pABar", ")", "\n", "return", "cAHat", ",", "radius", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.core.Smooth.predict": [[58, 80], ["core.Smooth.base_classifier.eval", "core.Smooth._sample_noise", "scipy.stats.binom_test", "core.Smooth.argsort"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.core.Smooth._sample_noise"], ["", "", "def", "predict", "(", "self", ",", "x", ":", "torch", ".", "tensor", ",", "n", ":", "int", ",", "alpha", ":", "float", ",", "batch_size", ":", "int", ")", "->", "int", ":", "\n", "        ", "\"\"\" Monte Carlo algorithm for evaluating the prediction of g at x.  With probability at least 1 - alpha, the\n        class returned by this method will equal g(x).\n\n        This function uses the hypothesis test described in https://arxiv.org/abs/1610.03944\n        for identifying the top category of a multinomial distribution.\n\n        :param x: the input [channel x height x width]\n        :param n: the number of Monte Carlo samples to use\n        :param alpha: the failure probability\n        :param batch_size: batch size to use when evaluating the base classifier\n        :return: the predicted class, or ABSTAIN\n        \"\"\"", "\n", "self", ".", "base_classifier", ".", "eval", "(", ")", "\n", "counts", "=", "self", ".", "_sample_noise", "(", "x", ",", "n", ",", "batch_size", ")", "\n", "top2", "=", "counts", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "[", ":", "2", "]", "\n", "count1", "=", "counts", "[", "top2", "[", "0", "]", "]", "\n", "count2", "=", "counts", "[", "top2", "[", "1", "]", "]", "\n", "if", "binom_test", "(", "count1", ",", "count1", "+", "count2", ",", "p", "=", "0.5", ")", ">", "alpha", ":", "\n", "            ", "return", "Smooth", ".", "ABSTAIN", "\n", "", "else", ":", "\n", "            ", "return", "top2", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.core.Smooth._sample_noise": [[81, 100], ["torch.no_grad", "numpy.zeros", "range", "math.ceil", "min", "x.repeat", "core.Smooth.base_classifier().argmax", "core.Smooth._count_arr", "torch.randn_like", "core.Smooth.cpu().numpy", "core.Smooth.base_classifier", "core.Smooth.cpu"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.core.Smooth._count_arr"], ["", "", "def", "_sample_noise", "(", "self", ",", "x", ":", "torch", ".", "tensor", ",", "num", ":", "int", ",", "batch_size", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\" Sample the base classifier's prediction under noisy corruptions of the input x.\n\n        :param x: the input [channel x width x height]\n        :param num: number of samples to collect\n        :param batch_size:\n        :return: an ndarray[int] of length num_classes containing the per-class counts\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "counts", "=", "np", ".", "zeros", "(", "self", ".", "num_classes", ",", "dtype", "=", "int", ")", "\n", "for", "_", "in", "range", "(", "ceil", "(", "num", "/", "batch_size", ")", ")", ":", "\n", "                ", "this_batch_size", "=", "min", "(", "batch_size", ",", "num", ")", "\n", "num", "-=", "this_batch_size", "\n", "\n", "batch", "=", "x", ".", "repeat", "(", "(", "this_batch_size", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "noise", "=", "torch", ".", "randn_like", "(", "batch", ",", "device", "=", "'cuda'", ")", "*", "self", ".", "sigma", "\n", "predictions", "=", "self", ".", "base_classifier", "(", "batch", "+", "noise", ")", ".", "argmax", "(", "1", ")", "\n", "counts", "+=", "self", ".", "_count_arr", "(", "predictions", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "self", ".", "num_classes", ")", "\n", "", "return", "counts", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.core.Smooth._count_arr": [[101, 106], ["numpy.zeros"], "methods", ["None"], ["", "", "def", "_count_arr", "(", "self", ",", "arr", ":", "np", ".", "ndarray", ",", "length", ":", "int", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "counts", "=", "np", ".", "zeros", "(", "length", ",", "dtype", "=", "int", ")", "\n", "for", "idx", "in", "arr", ":", "\n", "            ", "counts", "[", "idx", "]", "+=", "1", "\n", "", "return", "counts", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.core.Smooth._lower_confidence_bound": [[107, 118], ["statsmodels.stats.proportion.proportion_confint"], "methods", ["None"], ["", "def", "_lower_confidence_bound", "(", "self", ",", "NA", ":", "int", ",", "N", ":", "int", ",", "alpha", ":", "float", ")", "->", "float", ":", "\n", "        ", "\"\"\" Returns a (1 - alpha) lower confidence bound on a bernoulli proportion.\n\n        This function uses the Clopper-Pearson method.\n\n        :param NA: the number of \"successes\"\n        :param N: the number of total draws\n        :param alpha: the confidence level\n        :return: a lower bound on the binomial proportion which holds true w.p at least (1 - alpha) over the samples\n        \"\"\"", "\n", "return", "proportion_confint", "(", "NA", ",", "N", ",", "alpha", "=", "2", "*", "alpha", ",", "method", "=", "\"beta\"", ")", "[", "0", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.recon_attacks.Attacker.attack": [[14, 17], ["None"], "methods", ["None"], ["    ", "@", "abstractmethod", "\n", "def", "attack", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.recon_attacks.recon_PGD_L2.__init__": [[35, 45], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "super().__init__"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["def", "__init__", "(", "self", ",", "\n", "steps", ":", "int", ",", "\n", "random_start", ":", "bool", "=", "True", ",", "\n", "max_norm", ":", "Optional", "[", "float", "]", "=", "None", ",", "\n", "device", ":", "torch", ".", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "->", "None", ":", "\n", "        ", "super", "(", "recon_PGD_L2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "steps", "=", "steps", "\n", "self", ".", "random_start", "=", "random_start", "\n", "self", ".", "max_norm", "=", "max_norm", "\n", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.recon_attacks.recon_PGD_L2.attack": [[46, 49], ["recon_attacks.recon_PGD_L2._attack"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.recon_attacks.DDN._attack"], ["", "def", "attack", "(", "self", ",", "model", ":", "nn", ".", "Module", ",", "inputs", ":", "torch", ".", "Tensor", ",", "target", ":", "torch", ".", "Tensor", ",", "criterion", ",", "targeted", ":", "bool", "=", "False", ")", "->", "torch", ".", "Tensor", ":", "\n", "\n", "        ", "return", "self", ".", "_attack", "(", "model", ",", "inputs", ",", "target", ",", "criterion", ",", "targeted", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.recon_attacks.recon_PGD_L2._attack": [[50, 119], ["train_utils.init_logfile", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "delta.cuda.cuda.data.renorm_", "delta.cuda.cuda.cuda", "img.cuda.cuda.cuda", "img_original.cuda.cuda.cuda", "torch.SGD", "torch.SGD", "torch.SGD", "torch.SGD", "range", "img.cuda.cuda.size", "model", "criterion", "train_utils.log", "torch.SGD.zero_grad", "criterion.backward", "delta.cuda.cuda.grad.view().norm", "delta.cuda.cuda.grad.div_", "torch.SGD.step", "delta.cuda.cuda.data.add_", "delta.cuda.cuda.data.clamp_().sub_", "delta.cuda.cuda.data.renorm_", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "delta.cuda.grad.view().norm.view", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "img.cuda.cuda.size", "delta.cuda.cuda.grad.view", "delta.cuda.cuda.data.clamp_"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.init_logfile", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.log", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.vrnet.RBFActivationFunction.backward"], ["", "def", "_attack", "(", "self", ",", "model", ":", "nn", ".", "Module", ",", "img", ":", "torch", ".", "Tensor", ",", "img_original", ":", "torch", ".", "Tensor", ",", "criterion", ",", "targeted", ":", "bool", "=", "False", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Performs the attack of the model for the inputs and labels.\n\n        Parameters\n        ----------\n        model : nn.Module\n            Model to attack.\n        inputs : torch.Tensor\n            Batch of samples to attack. Values should be in the [0, 1] range.\n        labels : torch.Tensor\n            Labels of the samples to attack if untargeted, else labels of targets.\n        targeted : bool, optional\n            Whether to perform a targeted attack or not.\n\n        Returns\n        -------\n        torch.Tensor\n            Batch of samples modified to be adversarial to the model.\n\n        \"\"\"", "\n", "#print(\"Attack Start\")", "\n", "logfilename", "=", "'AdvAttack_Loss.txt'", "\n", "init_logfile", "(", "logfilename", ",", "\"step\\tAttack_Loss\"", ")", "\n", "\n", "multiplier", "=", "1", "if", "targeted", "else", "-", "1", "\n", "#delta = torch.zeros_like(img, requires_grad=True)", "\n", "delta", "=", "torch", ".", "FloatTensor", "(", "img", ".", "size", "(", ")", ")", ".", "uniform_", "(", "-", "self", ".", "max_norm", ",", "self", ".", "max_norm", ")", "\n", "delta", ".", "data", ".", "renorm_", "(", "p", "=", "2", ",", "dim", "=", "0", ",", "maxnorm", "=", "self", ".", "max_norm", ")", "\n", "delta", "=", "delta", ".", "cuda", "(", ")", "\n", "delta", ".", "requires_grad", "=", "True", "\n", "#print(delta.device)", "\n", "\n", "# Obtain the Shape of Inputs (Batch_size x Channel x H x W)", "\n", "batch_size", "=", "img", ".", "size", "(", ")", "[", "0", "]", "\n", "img", "=", "img", ".", "cuda", "(", ")", "# input x (batch,  channel, h, w)", "\n", "img_original", "=", "img_original", ".", "cuda", "(", ")", "\n", "\n", "# Setup optimizers", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "[", "delta", "]", ",", "lr", "=", "self", ".", "max_norm", "/", "self", ".", "steps", "*", "2", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "steps", ")", ":", "\n", "#print(\"Attack Step %d\" % ( i ))", "\n", "            ", "adv", "=", "img", "+", "delta", "\n", "recon", "=", "model", "(", "adv", ")", "\n", "loss", "=", "criterion", "(", "recon", ",", "img_original", ")", "\n", "loss", "=", "multiplier", "*", "loss", "\n", "\n", "log", "(", "logfilename", ",", "\"{}\\t{:.3}\"", ".", "format", "(", "i", ",", "loss", ")", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "# renorming gradient", "\n", "grad_norms", "=", "delta", ".", "grad", ".", "view", "(", "batch_size", ",", "-", "1", ")", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "delta", ".", "grad", ".", "div_", "(", "grad_norms", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "\n", "# avoid nan or inf if gradient is 0", "\n", "if", "(", "grad_norms", "==", "0", ")", ".", "any", "(", ")", ":", "\n", "                ", "delta", ".", "grad", "[", "grad_norms", "==", "0", "]", "=", "torch", ".", "randn_like", "(", "delta", ".", "grad", "[", "grad_norms", "==", "0", "]", ")", "\n", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "\n", "delta", ".", "data", ".", "add_", "(", "img", ")", "\n", "delta", ".", "data", ".", "clamp_", "(", "0", ",", "1", ")", ".", "sub_", "(", "img", ")", "\n", "\n", "delta", ".", "data", ".", "renorm_", "(", "p", "=", "2", ",", "dim", "=", "0", ",", "maxnorm", "=", "self", ".", "max_norm", ")", "\n", "\n", "#print(\"Attack Finished\")", "\n", "", "return", "img", "+", "delta", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.recon_attacks.recon_PGD_Linf.__init__": [[136, 146], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "super().__init__"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["def", "__init__", "(", "self", ",", "\n", "steps", ":", "int", ",", "\n", "random_start", ":", "bool", "=", "True", ",", "\n", "max_norm", ":", "Optional", "[", "float", "]", "=", "None", ",", "\n", "device", ":", "torch", ".", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "->", "None", ":", "\n", "        ", "super", "(", "recon_PGD_Linf", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "steps", "=", "steps", "\n", "self", ".", "random_start", "=", "random_start", "\n", "self", ".", "max_norm", "=", "max_norm", "\n", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.recon_attacks.recon_PGD_Linf.attack": [[147, 151], ["recon_attacks.recon_PGD_Linf._attack"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.recon_attacks.DDN._attack"], ["", "def", "attack", "(", "self", ",", "model", ":", "nn", ".", "Module", ",", "inputs", ":", "torch", ".", "Tensor", ",", "target", ":", "torch", ".", "Tensor", ",", "criterion", ",", "\n", "targeted", ":", "bool", "=", "False", ")", "->", "torch", ".", "Tensor", ":", "\n", "\n", "        ", "return", "self", ".", "_attack", "(", "model", ",", "inputs", ",", "target", ",", "criterion", ",", "targeted", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.recon_attacks.recon_PGD_Linf._attack": [[152, 209], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "img.cuda.cuda.cuda", "img_original.cuda.cuda.cuda", "torch.SGD", "torch.SGD", "torch.SGD", "torch.SGD", "range", "img.cuda.cuda.size", "model", "criterion", "torch.SGD.zero_grad", "criterion.backward", "torch.zeros_like.grad.view().norm", "torch.zeros_like.grad.view().norm", "torch.zeros_like.grad.view().norm", "torch.zeros_like.grad.view().norm", "torch.zeros_like.grad.div_", "torch.zeros_like.grad.div_", "torch.zeros_like.grad.div_", "torch.zeros_like.grad.div_", "torch.SGD.step", "torch.zeros_like.data.add_", "torch.zeros_like.data.add_", "torch.zeros_like.data.add_", "torch.zeros_like.data.add_", "torch.zeros_like.data.clamp_().sub_", "torch.zeros_like.data.clamp_().sub_", "torch.zeros_like.data.clamp_().sub_", "torch.zeros_like.data.clamp_().sub_", "torch.zeros_like.data.renorm_", "torch.zeros_like.data.renorm_", "torch.zeros_like.data.renorm_", "torch.zeros_like.data.renorm_", "torch.zeros_like.grad.view().norm.view", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.zeros_like.grad.view", "torch.zeros_like.grad.view", "torch.zeros_like.grad.view", "torch.zeros_like.grad.view", "torch.zeros_like.data.clamp_", "torch.zeros_like.data.clamp_", "torch.zeros_like.data.clamp_", "torch.zeros_like.data.clamp_", "float"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.vrnet.RBFActivationFunction.backward"], ["", "def", "_attack", "(", "self", ",", "model", ":", "nn", ".", "Module", ",", "img", ":", "torch", ".", "Tensor", ",", "img_original", ":", "torch", ".", "Tensor", ",", "criterion", ",", "\n", "targeted", ":", "bool", "=", "False", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Performs the attack of the model for the inputs and labels.\n\n        Parameters\n        ----------\n        model : nn.Module\n            Model to attack.\n        inputs : torch.Tensor\n            Batch of samples to attack. Values should be in the [0, 1] range.\n        labels : torch.Tensor\n            Labels of the samples to attack if untargeted, else labels of targets.\n        targeted : bool, optional\n            Whether to perform a targeted attack or not.\n\n        Returns\n        -------\n        torch.Tensor\n            Batch of samples modified to be adversarial to the model.\n\n        \"\"\"", "\n", "\n", "multiplier", "=", "1", "if", "targeted", "else", "-", "1", "\n", "delta", "=", "torch", ".", "zeros_like", "(", "img", ",", "requires_grad", "=", "True", ")", "\n", "\n", "# Obtain the Shape of Inputs (Batch_size x Channel x H x W)", "\n", "batch_size", "=", "img", ".", "size", "(", ")", "[", "0", "]", "\n", "img", "=", "img", ".", "cuda", "(", ")", "# input x (batch,  channel, h, w)", "\n", "img_original", "=", "img_original", ".", "cuda", "(", ")", "\n", "\n", "# Setup optimizers", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "[", "delta", "]", ",", "lr", "=", "self", ".", "max_norm", "/", "self", ".", "steps", "*", "2", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "steps", ")", ":", "\n", "            ", "adv", "=", "img", "+", "delta", "\n", "recon", "=", "model", "(", "adv", ")", "\n", "loss", "=", "criterion", "(", "recon", ",", "img_original", ")", "\n", "loss", "=", "multiplier", "*", "loss", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "# renorming gradient", "\n", "grad_norms", "=", "delta", ".", "grad", ".", "view", "(", "batch_size", ",", "-", "1", ")", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "delta", ".", "grad", ".", "div_", "(", "grad_norms", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "\n", "# avoid nan or inf if gradient is 0", "\n", "if", "(", "grad_norms", "==", "0", ")", ".", "any", "(", ")", ":", "\n", "                ", "delta", ".", "grad", "[", "grad_norms", "==", "0", "]", "=", "torch", ".", "randn_like", "(", "delta", ".", "grad", "[", "grad_norms", "==", "0", "]", ")", "\n", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "\n", "delta", ".", "data", ".", "add_", "(", "img", ")", "\n", "delta", ".", "data", ".", "clamp_", "(", "0", ",", "1", ")", ".", "sub_", "(", "img", ")", "\n", "\n", "delta", ".", "data", ".", "renorm_", "(", "p", "=", "float", "(", "'inf'", ")", ",", "dim", "=", "0", ",", "maxnorm", "=", "self", ".", "max_norm", ")", "\n", "", "return", "img", "+", "delta", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.recon_attacks.DDN.__init__": [[238, 258], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "super().__init__"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["def", "__init__", "(", "self", ",", "\n", "steps", ":", "int", ",", "\n", "gamma", ":", "float", "=", "0.05", ",", "\n", "init_norm", ":", "float", "=", "1.", ",", "\n", "quantize", ":", "bool", "=", "True", ",", "\n", "levels", ":", "int", "=", "256", ",", "\n", "max_norm", ":", "Optional", "[", "float", "]", "=", "None", ",", "\n", "device", ":", "torch", ".", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", ",", "\n", "callback", ":", "Optional", "=", "None", ")", "->", "None", ":", "\n", "        ", "super", "(", "DDN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "steps", "=", "steps", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "init_norm", "=", "init_norm", "\n", "\n", "self", ".", "quantize", "=", "quantize", "\n", "self", ".", "levels", "=", "levels", "\n", "self", ".", "max_norm", "=", "max_norm", "\n", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "callback", "=", "callback", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.recon_attacks.DDN.attack": [[259, 269], ["recon_attacks.DDN._attack", "recon_attacks.DDN._attack_mutlinoise"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.recon_attacks.DDN._attack", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.recon_attacks.DDN._attack_mutlinoise"], ["", "def", "attack", "(", "self", ",", "model", ":", "nn", ".", "Module", ",", "inputs", ":", "torch", ".", "Tensor", ",", "labels", ":", "torch", ".", "Tensor", ",", "\n", "noise", ":", "torch", ".", "Tensor", "=", "None", ",", "num_noise_vectors", "=", "1", ",", "targeted", ":", "bool", "=", "False", ",", "no_grad", "=", "False", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "if", "num_noise_vectors", "==", "1", ":", "\n", "            ", "return", "self", ".", "_attack", "(", "model", ",", "inputs", ",", "labels", ",", "noise", ",", "targeted", ")", "\n", "# return self._attack_mutlinoise(model, inputs, labels, noise, num_noise_vectors, targeted)", "\n", "", "else", ":", "\n", "            ", "if", "no_grad", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "_attack_mutlinoise", "(", "model", ",", "inputs", ",", "labels", ",", "noise", ",", "num_noise_vectors", ",", "targeted", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.recon_attacks.DDN._attack": [[271, 366], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.max().view().norm", "torch.max().view().norm", "torch.max().view().norm", "torch.max().view().norm", "torch.max().view().norm", "torch.max().view().norm", "torch.max().view().norm", "torch.max().view().norm", "torch.max().view().norm", "torch.max().view().norm", "torch.max().view().norm", "torch.max().view().norm", "torch.max().view().norm", "torch.max().view().norm", "torch.max().view().norm", "torch.max().view().norm", "torch.SGD", "torch.SGD", "torch.SGD", "torch.SGD", "torch.lr_scheduler.CosineAnnealingLR", "torch.lr_scheduler.CosineAnnealingLR", "torch.lr_scheduler.CosineAnnealingLR", "torch.lr_scheduler.CosineAnnealingLR", "torch.max().view().norm.clone", "torch.max().view().norm.clone", "torch.max().view().norm.clone", "torch.max().view().norm.clone", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "ValueError", "inputs.size", "torch.lr_scheduler.CosineAnnealingLR.step", "torch.zeros_like.data.view().norm", "torch.zeros_like.data.view().norm", "torch.zeros_like.data.view().norm", "torch.zeros_like.data.view().norm", "model", "model.argmax", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.SGD.zero_grad", "loss.backward", "torch.zeros_like.grad.view().norm", "torch.zeros_like.grad.view().norm", "torch.zeros_like.grad.view().norm", "torch.zeros_like.grad.view().norm", "torch.zeros_like.grad.div_", "torch.zeros_like.grad.div_", "torch.zeros_like.grad.div_", "torch.zeros_like.grad.div_", "torch.SGD.step", "torch.min.mul_", "torch.min.mul_", "torch.min.mul_", "torch.min.mul_", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.zeros_like.data.mul_", "torch.zeros_like.data.mul_", "torch.zeros_like.data.mul_", "torch.zeros_like.data.mul_", "torch.zeros_like.data.add_", "torch.zeros_like.data.add_", "torch.zeros_like.data.add_", "torch.zeros_like.data.add_", "torch.zeros_like.data.clamp_().sub_", "torch.zeros_like.data.clamp_().sub_", "torch.zeros_like.data.clamp_().sub_", "torch.zeros_like.data.clamp_().sub_", "torch.zeros_like.renorm_", "torch.zeros_like.renorm_", "torch.zeros_like.renorm_", "torch.zeros_like.renorm_", "inputs.min", "inputs.max", "torch.max().view", "torch.max().view", "torch.max().view", "torch.max().view", "torch.max().view", "torch.max().view", "torch.max().view", "torch.max().view", "torch.max().view", "torch.max().view", "torch.max().view", "torch.max().view", "torch.max().view", "torch.max().view", "torch.max().view", "torch.max().view", "torch.zeros_like.grad.view().norm.view", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.cosine_similarity().mean().item", "torch.cosine_similarity().mean().item", "torch.cosine_similarity().mean().item", "torch.cosine_similarity().mean().item", "recon_attacks.DDN.callback.scalar", "recon_attacks.DDN.callback.scalars", "recon_attacks.DDN.callback.scalars", "torch.zeros_like.data.mul_().round_().div_", "torch.zeros_like.data.mul_().round_().div_", "torch.zeros_like.data.mul_().round_().div_", "torch.zeros_like.data.mul_().round_().div_", "torch.zeros_like.mul_().round_().div_", "torch.zeros_like.mul_().round_().div_", "torch.zeros_like.mul_().round_().div_", "torch.zeros_like.mul_().round_().div_", "torch.zeros_like.data.view", "torch.zeros_like.data.view", "torch.zeros_like.data.view", "torch.zeros_like.data.view", "torch.zeros_like.grad.view", "torch.zeros_like.grad.view", "torch.zeros_like.grad.view", "torch.zeros_like.grad.view", "torch.zeros_like.data.clamp_", "torch.zeros_like.data.clamp_", "torch.zeros_like.data.clamp_", "torch.zeros_like.data.clamp_", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.cosine_similarity().mean", "torch.cosine_similarity().mean", "torch.cosine_similarity().mean", "torch.cosine_similarity().mean", "torch.cross_entropy.item", "torch.min.mean().item", "torch.min.mean().item", "torch.min.mean().item", "torch.min.mean().item", "torch.zeros_like.data.view().norm.mean().item", "torch.zeros.float().mean().item", "torch.zeros.float().mean().item", "torch.zeros.float().mean().item", "torch.zeros.float().mean().item", "torch.zeros_like.data.mul_().round_", "torch.zeros_like.data.mul_().round_", "torch.zeros_like.data.mul_().round_", "torch.zeros_like.data.mul_().round_", "torch.zeros_like.mul_().round_", "torch.zeros_like.mul_().round_", "torch.zeros_like.mul_().round_", "torch.zeros_like.mul_().round_", "torch.zeros.any", "torch.zeros.any", "torch.zeros.any", "torch.zeros.any", "best_l2[].mean().item", "torch.min.mean().item", "torch.min.mean().item", "torch.min.mean().item", "torch.min.mean().item", "torch.zeros_like.data.view().norm", "torch.zeros_like.data.view().norm", "torch.zeros_like.data.view().norm", "torch.zeros_like.data.view().norm", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.min.mean", "torch.min.mean", "torch.min.mean", "torch.min.mean", "torch.zeros_like.data.view().norm.mean", "torch.zeros.float().mean", "torch.zeros.float().mean", "torch.zeros.float().mean", "torch.zeros.float().mean", "is_adv.float", "torch.zeros_like.data.mul_", "torch.zeros_like.data.mul_", "torch.zeros_like.data.mul_", "torch.zeros_like.data.mul_", "torch.zeros_like.mul_", "torch.zeros_like.mul_", "torch.zeros_like.mul_", "torch.zeros_like.mul_", "torch.zeros_like.data.view", "torch.zeros_like.data.view", "torch.zeros_like.data.view", "torch.zeros_like.data.view", "best_l2[].mean", "torch.min.mean", "torch.min.mean", "torch.min.mean", "torch.min.mean", "torch.zeros_like.data.view", "torch.zeros_like.data.view", "torch.zeros_like.data.view", "torch.zeros_like.data.view", "torch.zeros_like.grad.view", "torch.zeros_like.grad.view", "torch.zeros_like.grad.view", "torch.zeros_like.grad.view", "torch.zeros.float", "torch.zeros.float", "torch.zeros.float", "torch.zeros.float"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.vrnet.RBFActivationFunction.backward"], ["", "", "", "def", "_attack", "(", "self", ",", "model", ":", "nn", ".", "Module", ",", "inputs", ":", "torch", ".", "Tensor", ",", "labels", ":", "torch", ".", "Tensor", ",", "\n", "noise", ":", "torch", ".", "Tensor", "=", "None", ",", "targeted", ":", "bool", "=", "False", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Performs the attack of the model for the inputs and labels.\n\n        Parameters\n        ----------\n        model : nn.Module\n            Model to attack.\n        inputs : torch.Tensor\n            Batch of samples to attack. Values should be in the [0, 1] range.\n        labels : torch.Tensor\n            Labels of the samples to attack if untargeted, else labels of targets.\n        targeted : bool, optional\n            Whether to perform a targeted attack or not.\n\n        Returns\n        -------\n        torch.Tensor\n            Batch of samples modified to be adversarial to the model.\n\n        \"\"\"", "\n", "if", "inputs", ".", "min", "(", ")", "<", "0", "or", "inputs", ".", "max", "(", ")", ">", "1", ":", "raise", "ValueError", "(", "'Input values should be in the [0, 1] range.'", ")", "\n", "\n", "batch_size", "=", "inputs", ".", "shape", "[", "0", "]", "\n", "multiplier", "=", "1", "if", "targeted", "else", "-", "1", "\n", "delta", "=", "torch", ".", "zeros_like", "(", "inputs", ",", "requires_grad", "=", "True", ")", "\n", "norm", "=", "torch", ".", "full", "(", "(", "batch_size", ",", ")", ",", "self", ".", "init_norm", ",", "device", "=", "self", ".", "device", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "worst_norm", "=", "torch", ".", "max", "(", "inputs", ",", "1", "-", "inputs", ")", ".", "view", "(", "batch_size", ",", "-", "1", ")", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "\n", "# Setup optimizers", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "[", "delta", "]", ",", "lr", "=", "1", ")", "\n", "scheduler", "=", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optimizer", ",", "T_max", "=", "self", ".", "steps", ",", "eta_min", "=", "0.01", ")", "\n", "\n", "best_l2", "=", "worst_norm", ".", "clone", "(", ")", "\n", "best_delta", "=", "torch", ".", "zeros_like", "(", "inputs", ")", "\n", "adv_found", "=", "torch", ".", "zeros", "(", "inputs", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "steps", ")", ":", "\n", "            ", "scheduler", ".", "step", "(", ")", "\n", "\n", "l2", "=", "delta", ".", "data", ".", "view", "(", "batch_size", ",", "-", "1", ")", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "adv", "=", "inputs", "+", "delta", "\n", "if", "noise", "is", "not", "None", ":", "\n", "                ", "adv", "=", "adv", "+", "noise", "\n", "", "logits", "=", "model", "(", "adv", ")", "\n", "pred_labels", "=", "logits", ".", "argmax", "(", "1", ")", "\n", "ce_loss", "=", "F", ".", "cross_entropy", "(", "logits", ",", "labels", ",", "reduction", "=", "'sum'", ")", "\n", "loss", "=", "multiplier", "*", "ce_loss", "\n", "\n", "is_adv", "=", "(", "pred_labels", "==", "labels", ")", "if", "targeted", "else", "(", "pred_labels", "!=", "labels", ")", "\n", "is_smaller", "=", "l2", "<", "best_l2", "\n", "is_both", "=", "is_adv", "*", "is_smaller", "\n", "adv_found", "[", "is_both", "]", "=", "1", "\n", "best_l2", "[", "is_both", "]", "=", "l2", "[", "is_both", "]", "\n", "best_delta", "[", "is_both", "]", "=", "delta", ".", "data", "[", "is_both", "]", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "# renorming gradient", "\n", "grad_norms", "=", "delta", ".", "grad", ".", "view", "(", "batch_size", ",", "-", "1", ")", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "delta", ".", "grad", ".", "div_", "(", "grad_norms", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "\n", "# avoid nan or inf if gradient is 0", "\n", "if", "(", "grad_norms", "==", "0", ")", ".", "any", "(", ")", ":", "\n", "                ", "delta", ".", "grad", "[", "grad_norms", "==", "0", "]", "=", "torch", ".", "randn_like", "(", "delta", ".", "grad", "[", "grad_norms", "==", "0", "]", ")", "\n", "\n", "", "if", "self", ".", "callback", ":", "\n", "                ", "cosine", "=", "F", ".", "cosine_similarity", "(", "-", "delta", ".", "grad", ".", "view", "(", "batch_size", ",", "-", "1", ")", ",", "\n", "delta", ".", "data", ".", "view", "(", "batch_size", ",", "-", "1", ")", ",", "dim", "=", "1", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "self", ".", "callback", ".", "scalar", "(", "'ce'", ",", "i", ",", "ce_loss", ".", "item", "(", ")", "/", "batch_size", ")", "\n", "self", ".", "callback", ".", "scalars", "(", "\n", "[", "'max_norm'", ",", "'l2'", ",", "'best_l2'", "]", ",", "i", ",", "\n", "[", "norm", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "l2", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "\n", "best_l2", "[", "adv_found", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "if", "adv_found", ".", "any", "(", ")", "else", "norm", ".", "mean", "(", ")", ".", "item", "(", ")", "]", "\n", ")", "\n", "self", ".", "callback", ".", "scalars", "(", "[", "'cosine'", ",", "'lr'", ",", "'success'", "]", ",", "i", ",", "\n", "[", "cosine", ",", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "adv_found", ".", "float", "(", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "]", ")", "\n", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "\n", "norm", ".", "mul_", "(", "1", "-", "(", "2", "*", "is_adv", ".", "float", "(", ")", "-", "1", ")", "*", "self", ".", "gamma", ")", "\n", "norm", "=", "torch", ".", "min", "(", "norm", ",", "worst_norm", ")", "\n", "\n", "delta", ".", "data", ".", "mul_", "(", "(", "norm", "/", "delta", ".", "data", ".", "view", "(", "batch_size", ",", "-", "1", ")", ".", "norm", "(", "2", ",", "1", ")", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "delta", ".", "data", ".", "add_", "(", "inputs", ")", "\n", "if", "self", ".", "quantize", ":", "\n", "                ", "delta", ".", "data", ".", "mul_", "(", "self", ".", "levels", "-", "1", ")", ".", "round_", "(", ")", ".", "div_", "(", "self", ".", "levels", "-", "1", ")", "\n", "", "delta", ".", "data", ".", "clamp_", "(", "0", ",", "1", ")", ".", "sub_", "(", "inputs", ")", "\n", "\n", "", "if", "self", ".", "max_norm", "is", "not", "None", ":", "\n", "            ", "best_delta", ".", "renorm_", "(", "p", "=", "2", ",", "dim", "=", "0", ",", "maxnorm", "=", "self", ".", "max_norm", ")", "\n", "if", "self", ".", "quantize", ":", "\n", "                ", "best_delta", ".", "mul_", "(", "self", ".", "levels", "-", "1", ")", ".", "round_", "(", ")", ".", "div_", "(", "self", ".", "levels", "-", "1", ")", "\n", "", "", "return", "inputs", "+", "best_delta", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.recon_attacks.DDN._attack_mutlinoise": [[368, 471], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.max().view().norm", "torch.max().view().norm", "torch.max().view().norm", "torch.max().view().norm", "torch.max().view().norm", "torch.max().view().norm", "torch.max().view().norm", "torch.max().view().norm", "torch.max().view().norm", "torch.max().view().norm", "torch.max().view().norm", "torch.max().view().norm", "torch.max().view().norm", "torch.max().view().norm", "torch.max().view().norm", "torch.max().view().norm", "torch.SGD", "torch.SGD", "torch.SGD", "torch.SGD", "torch.lr_scheduler.CosineAnnealingLR", "torch.lr_scheduler.CosineAnnealingLR", "torch.lr_scheduler.CosineAnnealingLR", "torch.lr_scheduler.CosineAnnealingLR", "torch.max().view().norm.clone", "torch.max().view().norm.clone", "torch.max().view().norm.clone", "torch.max().view().norm.clone", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "ValueError", "inputs[].size", "torch.lr_scheduler.CosineAnnealingLR.step", "torch.zeros.data.view().norm", "torch.zeros.data.view().norm", "torch.zeros.data.view().norm", "torch.zeros.data.view().norm", "model", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax.reshape().mean().squeeze", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.nll_loss", "torch.nll_loss", "torch.nll_loss", "torch.nll_loss", "torch.SGD.zero_grad", "loss.backward", "torch.zeros.grad.view().norm", "torch.zeros.grad.view().norm", "torch.zeros.grad.view().norm", "torch.zeros.grad.view().norm", "torch.zeros.grad.div_", "torch.zeros.grad.div_", "torch.zeros.grad.div_", "torch.zeros.grad.div_", "torch.SGD.step", "torch.min.mul_", "torch.min.mul_", "torch.min.mul_", "torch.min.mul_", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.zeros.data.mul_", "torch.zeros.data.mul_", "torch.zeros.data.mul_", "torch.zeros.data.mul_", "torch.zeros.data.add_", "torch.zeros.data.add_", "torch.zeros.data.add_", "torch.zeros.data.add_", "torch.zeros.data.clamp_().sub_", "torch.zeros.data.clamp_().sub_", "torch.zeros.data.clamp_().sub_", "torch.zeros.data.clamp_().sub_", "torch.zeros_like.renorm_", "torch.zeros_like.renorm_", "torch.zeros_like.renorm_", "torch.zeros_like.renorm_", "torch.zeros_like.repeat().view_as", "torch.zeros_like.repeat().view_as", "torch.zeros_like.repeat().view_as", "torch.zeros_like.repeat().view_as", "inputs.min", "inputs.max", "len", "torch.max().view", "torch.max().view", "torch.max().view", "torch.max().view", "torch.max().view", "torch.max().view", "torch.max().view", "torch.max().view", "torch.max().view", "torch.max().view", "torch.max().view", "torch.max().view", "torch.max().view", "torch.max().view", "torch.max().view", "torch.max().view", "torch.zeros.repeat().view_as", "torch.zeros.repeat().view_as", "torch.zeros.repeat().view_as", "torch.zeros.repeat().view_as", "model.argmax().reshape().mode", "F.softmax.reshape().mean().squeeze.clamp", "torch.zeros.grad.view().norm.view", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.cosine_similarity().mean().item", "torch.cosine_similarity().mean().item", "torch.cosine_similarity().mean().item", "torch.cosine_similarity().mean().item", "recon_attacks.DDN.callback.scalar", "recon_attacks.DDN.callback.scalars", "recon_attacks.DDN.callback.scalars", "torch.zeros.data.mul_().round_().div_", "torch.zeros.data.mul_().round_().div_", "torch.zeros.data.mul_().round_().div_", "torch.zeros.data.mul_().round_().div_", "torch.zeros_like.mul_().round_().div_", "torch.zeros_like.mul_().round_().div_", "torch.zeros_like.mul_().round_().div_", "torch.zeros_like.mul_().round_().div_", "torch.zeros.data.view", "torch.zeros.data.view", "torch.zeros.data.view", "torch.zeros.data.view", "torch.softmax.reshape().mean", "torch.zeros.grad.view", "torch.zeros.grad.view", "torch.zeros.grad.view", "torch.zeros.grad.view", "torch.zeros.data.clamp_", "torch.zeros.data.clamp_", "torch.zeros.data.clamp_", "torch.zeros.data.clamp_", "torch.zeros_like.repeat", "torch.zeros_like.repeat", "torch.zeros_like.repeat", "torch.zeros_like.repeat", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.zeros.repeat", "torch.zeros.repeat", "torch.zeros.repeat", "torch.zeros.repeat", "model.argmax().reshape", "torch.cosine_similarity().mean", "torch.cosine_similarity().mean", "torch.cosine_similarity().mean", "torch.cosine_similarity().mean", "torch.nll_loss.item", "torch.min.mean().item", "torch.min.mean().item", "torch.min.mean().item", "torch.min.mean().item", "torch.zeros.data.view().norm.mean().item", "torch.zeros.float().mean().item", "torch.zeros.float().mean().item", "torch.zeros.float().mean().item", "torch.zeros.float().mean().item", "torch.zeros.data.mul_().round_", "torch.zeros.data.mul_().round_", "torch.zeros.data.mul_().round_", "torch.zeros.data.mul_().round_", "torch.zeros_like.mul_().round_", "torch.zeros_like.mul_().round_", "torch.zeros_like.mul_().round_", "torch.zeros_like.mul_().round_", "torch.softmax.reshape", "torch.zeros.any", "torch.zeros.any", "torch.zeros.any", "torch.zeros.any", "best_l2[].mean().item", "torch.min.mean().item", "torch.min.mean().item", "torch.min.mean().item", "torch.min.mean().item", "torch.zeros.data.view().norm", "torch.zeros.data.view().norm", "torch.zeros.data.view().norm", "torch.zeros.data.view().norm", "model.argmax", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.min.mean", "torch.min.mean", "torch.min.mean", "torch.min.mean", "torch.zeros.data.view().norm.mean", "torch.zeros.float().mean", "torch.zeros.float().mean", "torch.zeros.float().mean", "torch.zeros.float().mean", "is_adv.float", "torch.zeros.data.mul_", "torch.zeros.data.mul_", "torch.zeros.data.mul_", "torch.zeros.data.mul_", "torch.zeros_like.mul_", "torch.zeros_like.mul_", "torch.zeros_like.mul_", "torch.zeros_like.mul_", "torch.zeros.data.view", "torch.zeros.data.view", "torch.zeros.data.view", "torch.zeros.data.view", "best_l2[].mean", "torch.min.mean", "torch.min.mean", "torch.min.mean", "torch.min.mean", "torch.zeros.data.view", "torch.zeros.data.view", "torch.zeros.data.view", "torch.zeros.data.view", "torch.zeros.grad.view", "torch.zeros.grad.view", "torch.zeros.grad.view", "torch.zeros.grad.view", "torch.zeros.float", "torch.zeros.float", "torch.zeros.float", "torch.zeros.float"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.log", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.log", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.log", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.log", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.log", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.log", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.log", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.log", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.log", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.log", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.log", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.log", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.log", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.log", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.log", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.log", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.vrnet.RBFActivationFunction.backward"], ["", "def", "_attack_mutlinoise", "(", "self", ",", "model", ":", "nn", ".", "Module", ",", "inputs", ":", "torch", ".", "Tensor", ",", "labels", ":", "torch", ".", "Tensor", ",", "\n", "noise", ":", "torch", ".", "Tensor", "=", "None", ",", "num_noise_vectors", ":", "int", "=", "1", ",", "targeted", ":", "bool", "=", "False", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Performs the attack of the model for the inputs and labels.\n\n        Parameters\n        ----------\n        model : nn.Module\n            Model to attack.\n        inputs : torch.Tensor\n            Batch of samples to attack. Values should be in the [0, 1] range.\n        labels : torch.Tensor\n            Labels of the samples to attack if untargeted, else labels of targets.\n        targeted : bool, optional\n            Whether to perform a targeted attack or not.\n\n        Returns\n        -------\n        torch.Tensor\n            Batch of samples modified to be adversarial to the model.\n\n        \"\"\"", "\n", "if", "inputs", ".", "min", "(", ")", "<", "0", "or", "inputs", ".", "max", "(", ")", ">", "1", ":", "raise", "ValueError", "(", "'Input values should be in the [0, 1] range.'", ")", "\n", "batch_size", "=", "labels", ".", "shape", "[", "0", "]", "\n", "multiplier", "=", "1", "if", "targeted", "else", "-", "1", "\n", "delta", "=", "torch", ".", "zeros", "(", "(", "len", "(", "labels", ")", ",", "*", "inputs", ".", "shape", "[", "1", ":", "]", ")", ",", "requires_grad", "=", "True", ",", "device", "=", "self", ".", "device", ")", "\n", "norm", "=", "torch", ".", "full", "(", "(", "batch_size", ",", ")", ",", "self", ".", "init_norm", ",", "device", "=", "self", ".", "device", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "worst_norm", "=", "torch", ".", "max", "(", "inputs", "[", ":", ":", "num_noise_vectors", "]", ",", "1", "-", "inputs", "[", ":", ":", "num_noise_vectors", "]", ")", ".", "view", "(", "batch_size", ",", "-", "1", ")", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "\n", "# Setup optimizers", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "[", "delta", "]", ",", "lr", "=", "1", ")", "\n", "scheduler", "=", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optimizer", ",", "T_max", "=", "self", ".", "steps", ",", "eta_min", "=", "0.01", ")", "\n", "\n", "best_l2", "=", "worst_norm", ".", "clone", "(", ")", "\n", "best_delta", "=", "torch", ".", "zeros_like", "(", "inputs", "[", ":", ":", "num_noise_vectors", "]", ")", "\n", "adv_found", "=", "torch", ".", "zeros", "(", "inputs", "[", ":", ":", "num_noise_vectors", "]", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "steps", ")", ":", "\n", "            ", "scheduler", ".", "step", "(", ")", "\n", "\n", "l2", "=", "delta", ".", "data", ".", "view", "(", "batch_size", ",", "-", "1", ")", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "adv", "=", "inputs", "+", "delta", ".", "repeat", "(", "1", ",", "num_noise_vectors", ",", "1", ",", "1", ")", ".", "view_as", "(", "inputs", ")", "\n", "if", "noise", "is", "not", "None", ":", "\n", "                ", "adv", "=", "adv", "+", "noise", "\n", "", "logits", "=", "model", "(", "adv", ")", "\n", "\n", "pred_labels", "=", "logits", ".", "argmax", "(", "1", ")", ".", "reshape", "(", "-", "1", ",", "num_noise_vectors", ")", ".", "mode", "(", "1", ")", "[", "0", "]", "\n", "# safe softamx", "\n", "softmax", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "# average the probabilities across noise", "\n", "average_softmax", "=", "softmax", ".", "reshape", "(", "-", "1", ",", "num_noise_vectors", ",", "logits", ".", "shape", "[", "-", "1", "]", ")", ".", "mean", "(", "1", ",", "keepdim", "=", "True", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "logsoftmax", "=", "torch", ".", "log", "(", "average_softmax", ".", "clamp", "(", "min", "=", "1e-20", ")", ")", "\n", "ce_loss", "=", "F", ".", "nll_loss", "(", "logsoftmax", ",", "labels", ")", "\n", "\n", "loss", "=", "multiplier", "*", "ce_loss", "\n", "\n", "is_adv", "=", "(", "pred_labels", "==", "labels", ")", "if", "targeted", "else", "(", "pred_labels", "!=", "labels", ")", "\n", "is_smaller", "=", "l2", "<", "best_l2", "\n", "is_both", "=", "is_adv", "*", "is_smaller", "\n", "adv_found", "[", "is_both", "]", "=", "1", "\n", "best_l2", "[", "is_both", "]", "=", "l2", "[", "is_both", "]", "\n", "best_delta", "[", "is_both", "]", "=", "delta", ".", "data", "[", "is_both", "]", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "# renorming gradient", "\n", "grad_norms", "=", "delta", ".", "grad", ".", "view", "(", "batch_size", ",", "-", "1", ")", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "delta", ".", "grad", ".", "div_", "(", "grad_norms", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "\n", "# avoid nan or inf if gradient is 0", "\n", "if", "(", "grad_norms", "==", "0", ")", ".", "any", "(", ")", ":", "\n", "                ", "delta", ".", "grad", "[", "grad_norms", "==", "0", "]", "=", "torch", ".", "randn_like", "(", "delta", ".", "grad", "[", "grad_norms", "==", "0", "]", ")", "\n", "\n", "", "if", "self", ".", "callback", ":", "\n", "                ", "cosine", "=", "F", ".", "cosine_similarity", "(", "-", "delta", ".", "grad", ".", "view", "(", "batch_size", ",", "-", "1", ")", ",", "\n", "delta", ".", "data", ".", "view", "(", "batch_size", ",", "-", "1", ")", ",", "dim", "=", "1", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "self", ".", "callback", ".", "scalar", "(", "'ce'", ",", "i", ",", "ce_loss", ".", "item", "(", ")", "/", "batch_size", ")", "\n", "self", ".", "callback", ".", "scalars", "(", "\n", "[", "'max_norm'", ",", "'l2'", ",", "'best_l2'", "]", ",", "i", ",", "\n", "[", "norm", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "l2", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "\n", "best_l2", "[", "adv_found", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "if", "adv_found", ".", "any", "(", ")", "else", "norm", ".", "mean", "(", ")", ".", "item", "(", ")", "]", "\n", ")", "\n", "self", ".", "callback", ".", "scalars", "(", "[", "'cosine'", ",", "'lr'", ",", "'success'", "]", ",", "i", ",", "\n", "[", "cosine", ",", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "adv_found", ".", "float", "(", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "]", ")", "\n", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "\n", "norm", ".", "mul_", "(", "1", "-", "(", "2", "*", "is_adv", ".", "float", "(", ")", "-", "1", ")", "*", "self", ".", "gamma", ")", "\n", "norm", "=", "torch", ".", "min", "(", "norm", ",", "worst_norm", ")", "\n", "\n", "delta", ".", "data", ".", "mul_", "(", "(", "norm", "/", "delta", ".", "data", ".", "view", "(", "batch_size", ",", "-", "1", ")", ".", "norm", "(", "2", ",", "1", ")", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "\n", "delta", ".", "data", ".", "add_", "(", "inputs", "[", ":", ":", "num_noise_vectors", "]", ")", "\n", "if", "self", ".", "quantize", ":", "\n", "                ", "delta", ".", "data", ".", "mul_", "(", "self", ".", "levels", "-", "1", ")", ".", "round_", "(", ")", ".", "div_", "(", "self", ".", "levels", "-", "1", ")", "\n", "", "delta", ".", "data", ".", "clamp_", "(", "0", ",", "1", ")", ".", "sub_", "(", "inputs", "[", ":", ":", "num_noise_vectors", "]", ")", "\n", "\n", "", "if", "self", ".", "max_norm", "is", "not", "None", ":", "\n", "            ", "best_delta", ".", "renorm_", "(", "p", "=", "2", ",", "dim", "=", "0", ",", "maxnorm", "=", "self", ".", "max_norm", ")", "\n", "if", "self", ".", "quantize", ":", "\n", "                ", "best_delta", ".", "mul_", "(", "self", ".", "levels", "-", "1", ")", ".", "round_", "(", ")", ".", "div_", "(", "self", ".", "levels", "-", "1", ")", "\n", "", "", "return", "inputs", "+", "best_delta", ".", "repeat", "(", "1", ",", "num_noise_vectors", ",", "1", ",", "1", ")", ".", "view_as", "(", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.visualization.main": [[40, 71], ["torch.utils.data.DataLoader", "architectures.get_architecture.eval", "architectures.get_architecture.cuda().eval", "visualization.visualize", "print", "print", "datasets.get_dataset", "torch.load", "architectures.get_architecture", "architectures.get_architecture.load_state_dict", "architectures.get_architecture", "architectures.get_architecture", "torch.load", "architectures.get_architecture", "architectures.get_architecture.load_state_dict", "architectures.get_architecture.cuda"], "function", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.visualization.visualize", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.datasets.get_dataset", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.architectures.get_architecture", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.architectures.get_architecture", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.architectures.get_architecture", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.architectures.get_architecture"], ["def", "main", "(", ")", ":", "\n", "## This is used to test the performance of the denoiser attached to a cifar10 classifier", "\n", "    ", "cifar10_test_loader", "=", "DataLoader", "(", "get_dataset", "(", "'cifar10'", ",", "'test'", ")", ",", "shuffle", "=", "False", ",", "batch_size", "=", "args", ".", "batch", ",", "\n", "num_workers", "=", "args", ".", "workers", ")", "\n", "\n", "# Denoiser Loading", "\n", "if", "args", ".", "pretrained_denoiser", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "pretrained_denoiser", ")", "\n", "assert", "checkpoint", "[", "'arch'", "]", "==", "args", ".", "arch", "\n", "denoiser", "=", "get_architecture", "(", "checkpoint", "[", "'arch'", "]", ",", "args", ".", "dataset", ")", "\n", "denoiser", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "", "else", ":", "\n", "        ", "denoiser", "=", "get_architecture", "(", "args", ".", "arch", ",", "args", ".", "dataset", ")", "\n", "", "denoiser", ".", "eval", "(", ")", "\n", "\n", "\n", "# Classifier Loading", "\n", "if", "args", ".", "classifier", "in", "IMAGENET_CLASSIFIERS", ":", "\n", "        ", "assert", "args", ".", "dataset", "==", "'imagenet'", "\n", "# loading pretrained imagenet architectures", "\n", "clf", "=", "get_architecture", "(", "args", ".", "classifier", ",", "args", ".", "dataset", ",", "pytorch_pretrained", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "classifier", ")", "\n", "clf", "=", "get_architecture", "(", "checkpoint", "[", "'arch'", "]", ",", "'cifar10'", ")", "\n", "clf", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "", "clf", ".", "cuda", "(", ")", ".", "eval", "(", ")", "\n", "\n", "num", "=", "visualize", "(", "cifar10_test_loader", ",", "denoiser", ",", "args", ".", "noise_sd", ",", "clf", ")", "\n", "\n", "print", "(", "num", ")", "\n", "print", "(", "\"Finished!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.visualization.tensor_to_PIL": [[73, 80], ["torchvision.transforms.ToPILImage", "tensor.cpu().clone", "unloader.squeeze", "torchvision.transforms.ToPILImage.", "tensor.cpu"], "function", ["None"], ["", "def", "tensor_to_PIL", "(", "tensor", ")", ":", "\n", "\n", "    ", "unloader", "=", "ToPILImage", "(", ")", "\n", "image", "=", "tensor", ".", "cpu", "(", ")", ".", "clone", "(", ")", "\n", "image", "=", "image", ".", "squeeze", "(", "0", ")", "\n", "image", "=", "unloader", "(", "image", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.visualization.visualize": [[82, 134], ["classifier.eval", "denoiser.eval", "torch.no_grad", "enumerate", "visualization.tensor_to_PIL", "inputs.cuda.save", "visualization.tensor_to_PIL", "tensor_to_PIL.save", "visualization.tensor_to_PIL", "tensor_to_PIL.save", "visualization.tensor_to_PIL", "denoiser.save", "print", "print", "print", "print", "inputs.cuda.cuda", "targets.cuda.cuda", "classifier().argmax().detach().clone", "denoiser", "classifier().argmax().detach().clone", "torch.randn_like", "classifier().argmax().detach", "classifier().argmax().detach", "classifier().argmax", "classifier().argmax", "classifier", "classifier"], "function", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.visualization.tensor_to_PIL", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.visualization.tensor_to_PIL", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.visualization.tensor_to_PIL", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.visualization.tensor_to_PIL"], ["", "def", "visualize", "(", "loader", ":", "DataLoader", ",", "denoiser", ":", "torch", ".", "nn", ".", "Module", ",", "noise_sd", ":", "float", ",", "classifier", ":", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"\n    A function to test the classification performance of a denoiser when attached to a given classifier\n        :param loader:DataLoader: test dataloader\n        :param denoiser:torch.nn.Module: the denoiser\n        :param noise_sd:float: the std-dev of the Guassian noise perturbation of the input\n        :param classifier:torch.nn.Module: the classifier to which the denoiser is attached\n    \"\"\"", "\n", "\n", "# switch to eval mode", "\n", "classifier", ".", "eval", "(", ")", "\n", "denoiser", ".", "eval", "(", ")", "\n", "\n", "k", "=", "0", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "            ", "k", "=", "k", "+", "1", "\n", "\n", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "targets", "=", "targets", ".", "cuda", "(", ")", "\n", "noise", "=", "torch", ".", "randn_like", "(", "inputs", ",", "device", "=", "'cuda'", ")", "*", "noise_sd", "\n", "\n", "# augment inputs with noise", "\n", "noisy_inputs", "=", "inputs", "+", "noise", "\n", "pre_original", "=", "classifier", "(", "noisy_inputs", ")", ".", "argmax", "(", "1", ")", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "\n", "recon", "=", "denoiser", "(", "noisy_inputs", ")", "\n", "pre_real", "=", "classifier", "(", "recon", ")", ".", "argmax", "(", "1", ")", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "\n", "if", "pre_original", "!=", "targets", "and", "pre_real", "==", "targets", "and", "k", ">", "1", ":", "\n", "                ", "break", "\n", "\n", "", "", "inputs", "=", "tensor_to_PIL", "(", "inputs", ")", "\n", "inputs", ".", "save", "(", "\"input.jpg\"", ")", "\n", "\n", "noise", "=", "tensor_to_PIL", "(", "noise", ")", "\n", "noise", ".", "save", "(", "\"noise.jpg\"", ")", "\n", "\n", "noisy_inputs", "=", "tensor_to_PIL", "(", "noisy_inputs", ")", "\n", "noisy_inputs", ".", "save", "(", "\"noisy_input.jpg\"", ")", "\n", "\n", "recon", "=", "tensor_to_PIL", "(", "recon", ")", "\n", "recon", ".", "save", "(", "\"recon.jpg\"", ")", "\n", "\n", "print", "(", "\"Original Prediction\"", ")", "\n", "print", "(", "pre_original", ")", "\n", "\n", "print", "(", "\"Denoised Prediction\"", ")", "\n", "print", "(", "pre_real", ")", "\n", "\n", "", "return", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.analyze.Accuracy.at_radii": [[18, 20], ["NotImplementedError"], "methods", ["None"], ["    ", "def", "at_radii", "(", "self", ",", "radii", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.analyze.ApproximateAccuracy.__init__": [[23, 25], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_file_path", ":", "str", ")", ":", "\n", "        ", "self", ".", "data_file_path", "=", "data_file_path", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.analyze.ApproximateAccuracy.at_radii": [[26, 29], ["pandas.read_csv", "numpy.array", "analyze.ApproximateAccuracy.at_radius"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.analyze.ApproximateAccuracy_API.at_radius"], ["", "def", "at_radii", "(", "self", ",", "radii", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "df", "=", "pd", ".", "read_csv", "(", "self", ".", "data_file_path", ",", "delimiter", "=", "\"\\t\"", ")", "\n", "return", "np", ".", "array", "(", "[", "self", ".", "at_radius", "(", "df", ",", "radius", ")", "for", "radius", "in", "radii", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.analyze.ApproximateAccuracy.at_radius": [[30, 32], ["None"], "methods", ["None"], ["", "def", "at_radius", "(", "self", ",", "df", ":", "pd", ".", "DataFrame", ",", "radius", ":", "float", ")", ":", "\n", "        ", "return", "(", "df", "[", "\"correct\"", "]", "&", "(", "df", "[", "\"radius\"", "]", ">=", "radius", ")", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.analyze.ApproximateAccuracy.get_abstention_rate": [[33, 36], ["pandas.read_csv", "len"], "methods", ["None"], ["", "def", "get_abstention_rate", "(", "self", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "df", "=", "pd", ".", "read_csv", "(", "self", ".", "data_file_path", ",", "delimiter", "=", "\"\\t\"", ")", "\n", "return", "1.", "*", "(", "df", "[", "\"predict\"", "]", "==", "-", "1", ")", ".", "sum", "(", ")", "/", "len", "(", "df", "[", "\"predict\"", "]", ")", "*", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.analyze.ApproximateAccuracy_API.__init__": [[38, 40], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_file_path", ":", "str", ")", ":", "\n", "        ", "self", ".", "data_file_path", "=", "data_file_path", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.analyze.ApproximateAccuracy_API.at_radii": [[41, 44], ["pandas.read_csv", "numpy.array", "analyze.ApproximateAccuracy_API.at_radius"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.analyze.ApproximateAccuracy_API.at_radius"], ["", "def", "at_radii", "(", "self", ",", "radii", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "df", "=", "pd", ".", "read_csv", "(", "self", ".", "data_file_path", ",", "header", "=", "None", ",", "delimiter", "=", "\"\\t\"", ")", "\n", "return", "np", ".", "array", "(", "[", "self", ".", "at_radius", "(", "df", ",", "radius", ")", "for", "radius", "in", "radii", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.analyze.ApproximateAccuracy_API.at_radius": [[45, 47], ["None"], "methods", ["None"], ["", "def", "at_radius", "(", "self", ",", "df", ":", "pd", ".", "DataFrame", ",", "radius", ":", "float", ")", ":", "\n", "        ", "return", "(", "df", "[", "df", ".", "columns", "[", "1", "]", "]", "&", "(", "df", "[", "df", ".", "columns", "[", "2", "]", "]", ">=", "radius", ")", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.analyze.ApproximateAccuracy_API.get_abstention_rate": [[48, 51], ["pandas.read_csv", "len"], "methods", ["None"], ["", "def", "get_abstention_rate", "(", "self", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "df", "=", "pd", ".", "read_csv", "(", "self", ".", "data_file_path", ",", "delimiter", "=", "\"\\t\"", ")", "\n", "return", "1.", "*", "(", "df", "[", "df", ".", "columns", "[", "-", "1", "]", "]", "==", "-", "1", ")", ".", "sum", "(", ")", "/", "len", "(", "df", "[", "df", ".", "columns", "[", "-", "1", "]", "]", ")", "*", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.analyze.Line.__init__": [[53, 59], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "quantity", ":", "Accuracy", ",", "legend", ":", "str", "=", "None", ",", "plot_fmt", ":", "str", "=", "\"\"", ",", "scale_x", ":", "float", "=", "1", ",", "alpha", ":", "float", "=", "1", ")", ":", "\n", "        ", "self", ".", "quantity", "=", "quantity", "\n", "self", ".", "legend", "=", "legend", "\n", "self", ".", "plot_fmt", "=", "plot_fmt", "\n", "self", ".", "scale_x", "=", "scale_x", "\n", "self", ".", "alpha", "=", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.analyze.plot_certified_accuracy_per_sigma_against_baseline": [[62, 92], ["enumerate", "enumerate", "matplotlib.ylim", "matplotlib.xlim", "matplotlib.tick_params", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.legend", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.title", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.close", "analyze._get_accuracies_at_radii", "matplotlib.plot", "matplotlib.plot", "matplotlib.gca().xaxis.set_major_locator", "accuracies_cert_ours.max", "line.quantity.at_radii", "matplotlib.MultipleLocator", "matplotlib.gca"], "function", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.analyze._get_accuracies_at_radii", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.analyze.ApproximateAccuracy_API.at_radii"], ["", "", "def", "plot_certified_accuracy_per_sigma_against_baseline", "(", "outfile", ":", "str", ",", "title", ":", "str", ",", "max_radius", ":", "float", ",", "\n", "methods", ":", "List", "[", "Line", "]", "=", "None", ",", "label", "=", "'Ours'", ",", "methods_base", ":", "List", "[", "Line", "]", "=", "None", ",", "label_base", "=", "'Baseline'", ",", "radius_step", ":", "float", "=", "0.01", ",", "upper_bounds", "=", "False", ")", "->", "None", ":", "\n", "    ", "color", "=", "[", "'b'", ",", "'orange'", ",", "'g'", ",", "'r'", "]", "\n", "\n", "sigmas", "=", "[", "0.12", ",", "0.25", ",", "0.5", ",", "1.00", "]", "\n", "if", "\"api\"", "in", "outfile", ":", "\n", "        ", "sigmas", "=", "[", "0.12", ",", "0.25", "]", "\n", "\n", "", "for", "it", ",", "sigma", "in", "enumerate", "(", "sigmas", ")", ":", "\n", "        ", "methods_sigma", "=", "[", "method", "for", "method", "in", "methods", "if", "'{:.2f}'", ".", "format", "(", "sigma", ")", "in", "method", ".", "quantity", ".", "data_file_path", "]", "\n", "accuracies_cert_ours", ",", "radii", "=", "_get_accuracies_at_radii", "(", "methods_sigma", ",", "0", ",", "max_radius", ",", "radius_step", ")", "\n", "plt", ".", "plot", "(", "radii", ",", "accuracies_cert_ours", ".", "max", "(", "0", ")", ",", "color", "[", "it", "]", ",", "label", "=", "'{}|$\\sigma = {:.2f}$'", ".", "format", "(", "label", ",", "sigma", ")", ")", "\n", "\n", "", "for", "it", ",", "line", "in", "enumerate", "(", "methods_base", ")", ":", "\n", "        ", "plt", ".", "plot", "(", "radii", "*", "line", ".", "scale_x", ",", "line", ".", "quantity", ".", "at_radii", "(", "radii", ")", ",", "color", "[", "it", "]", ",", "dashes", "=", "[", "2", ",", "2", "]", ",", "alpha", "=", "line", ".", "alpha", ",", "label", "=", "'{}|'", ".", "format", "(", "label_base", ")", "+", "line", ".", "legend", ")", "\n", "\n", "", "plt", ".", "ylim", "(", "(", "0", ",", "1", ")", ")", "\n", "plt", ".", "xlim", "(", "(", "0", ",", "max_radius", ")", ")", "\n", "plt", ".", "tick_params", "(", "labelsize", "=", "14", ")", "\n", "plt", ".", "xlabel", "(", "\"$\\ell_2$ radius\"", ",", "fontsize", "=", "16", ")", "\n", "plt", ".", "ylabel", "(", "\"Certified Accuracy\"", ",", "fontsize", "=", "16", ")", "\n", "if", "\"api\"", "not", "in", "outfile", ":", "\n", "        ", "plt", ".", "gca", "(", ")", ".", "xaxis", ".", "set_major_locator", "(", "plt", ".", "MultipleLocator", "(", "0.5", ")", ")", "\n", "", "plt", ".", "legend", "(", "loc", "=", "'upper right'", ",", "fontsize", "=", "16", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "outfile", "+", "\".pdf\"", ")", "\n", "plt", ".", "title", "(", "title", ",", "fontsize", "=", "20", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "outfile", "+", "\".png\"", ",", "dpi", "=", "300", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.analyze.plot_certified_accuracy_per_sigma_against_baseline_finetune": [[94, 131], ["enumerate", "enumerate", "enumerate", "matplotlib.ylim", "matplotlib.xlim", "matplotlib.tick_params", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.legend", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.title", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.close", "analyze._get_accuracies_at_radii", "matplotlib.plot", "analyze._get_accuracies_at_radii", "matplotlib.plot", "matplotlib.plot", "matplotlib.gca().xaxis.set_major_locator", "accuracies_cert_ours.max", "accuracies_cert_ours.max", "line.quantity.at_radii", "matplotlib.MultipleLocator", "matplotlib.gca"], "function", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.analyze._get_accuracies_at_radii", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.analyze._get_accuracies_at_radii", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.analyze.ApproximateAccuracy_API.at_radii"], ["", "def", "plot_certified_accuracy_per_sigma_against_baseline_finetune", "(", "outfile", ":", "str", ",", "title", ":", "str", ",", "max_radius", ":", "float", ",", "\n", "methods", ":", "List", "[", "Line", "]", "=", "None", ",", "label", "=", "'Ours'", ",", "methods_finetune", "=", "None", ",", "label_finetune", "=", "\"Finetune\"", ",", "methods_base", ":", "List", "[", "Line", "]", "=", "None", ",", "label_base", "=", "'Baseline'", ",", "radius_step", ":", "float", "=", "0.01", ",", "upper_bounds", "=", "False", ")", "->", "None", ":", "\n", "    ", "color", "=", "[", "'b'", ",", "'orange'", ",", "'g'", ",", "'r'", "]", "\n", "\n", "sigmas", "=", "[", "0.12", ",", "0.25", ",", "0.5", ",", "1.00", "]", "\n", "if", "\"api\"", "in", "outfile", ":", "\n", "        ", "sigmas", "=", "[", "0.25", "]", "\n", "\n", "", "for", "it", ",", "sigma", "in", "enumerate", "(", "sigmas", ")", ":", "\n", "        ", "methods_eps", "=", "[", "method", "for", "method", "in", "methods_finetune", "if", "'{:.2f}'", ".", "format", "(", "sigma", ")", "in", "method", ".", "quantity", ".", "data_file_path", "]", "\n", "accuracies_cert_ours", ",", "radii", "=", "_get_accuracies_at_radii", "(", "methods_eps", ",", "0", ",", "max_radius", ",", "radius_step", ")", "\n", "plt", ".", "plot", "(", "radii", ",", "accuracies_cert_ours", ".", "max", "(", "0", ")", ",", "color", "[", "3", "]", ",", "label", "=", "'{}|$\\sigma = {:.2f}$'", ".", "format", "(", "label_finetune", ",", "sigma", ")", ")", "\n", "\n", "", "for", "it", ",", "sigma", "in", "enumerate", "(", "sigmas", ")", ":", "\n", "        ", "methods_eps", "=", "[", "method", "for", "method", "in", "methods", "if", "'{:.2f}'", ".", "format", "(", "sigma", ")", "in", "method", ".", "quantity", ".", "data_file_path", "]", "\n", "accuracies_cert_ours", ",", "radii", "=", "_get_accuracies_at_radii", "(", "methods_eps", ",", "0", ",", "max_radius", ",", "radius_step", ")", "\n", "plt", ".", "plot", "(", "radii", ",", "accuracies_cert_ours", ".", "max", "(", "0", ")", ",", "color", "[", "0", "]", ",", "label", "=", "'{}|$\\sigma = {:.2f}$'", ".", "format", "(", "label", ",", "sigma", ")", ")", "\n", "\n", "", "for", "it", ",", "line", "in", "enumerate", "(", "methods_base", ")", ":", "\n", "        ", "if", "\"0.25\"", "not", "in", "line", ".", "quantity", ".", "data_file_path", ":", "\n", "            ", "continue", "\n", "", "plt", ".", "plot", "(", "radii", "*", "line", ".", "scale_x", ",", "line", ".", "quantity", ".", "at_radii", "(", "radii", ")", ",", "color", "[", "1", "]", ",", "alpha", "=", "line", ".", "alpha", ",", "label", "=", "'{}|'", ".", "format", "(", "label_base", ")", "+", "line", ".", "legend", ")", "\n", "\n", "", "plt", ".", "ylim", "(", "(", "0", ",", "1", ")", ")", "\n", "plt", ".", "xlim", "(", "(", "0", ",", "max_radius", ")", ")", "\n", "plt", ".", "tick_params", "(", "labelsize", "=", "14", ")", "\n", "plt", ".", "xlabel", "(", "\"$\\ell_2$ radius\"", ",", "fontsize", "=", "16", ")", "\n", "plt", ".", "ylabel", "(", "\"Certified Accuracy\"", ",", "fontsize", "=", "16", ")", "\n", "if", "\"api\"", "not", "in", "outfile", ":", "\n", "        ", "plt", ".", "gca", "(", ")", ".", "xaxis", ".", "set_major_locator", "(", "plt", ".", "MultipleLocator", "(", "0.5", ")", ")", "\n", "", "plt", ".", "legend", "(", "loc", "=", "'upper right'", ",", "fontsize", "=", "16", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "outfile", "+", "\".pdf\"", ")", "\n", "plt", ".", "title", "(", "title", ",", "fontsize", "=", "20", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "outfile", "+", "\".png\"", ",", "dpi", "=", "300", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.analyze.plot_certified_accuracy_per_sigma_best_model": [[133, 160], ["enumerate", "enumerate", "matplotlib.ylim", "matplotlib.xlim", "matplotlib.tick_params", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.gca().xaxis.set_major_locator", "matplotlib.legend", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.title", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.close", "analyze._get_accuracies_at_radii", "numpy.nan_to_num", "matplotlib.plot", "analyze._get_accuracies_at_radii", "numpy.nan_to_num", "matplotlib.plot", "matplotlib.MultipleLocator", "matplotlib.gca", "accuracies_cert_ours[].argmax", "accuracies_cert_ours[].argmax"], "function", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.analyze._get_accuracies_at_radii", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.analyze._get_accuracies_at_radii"], ["", "def", "plot_certified_accuracy_per_sigma_best_model", "(", "outfile", ":", "str", ",", "title", ":", "str", ",", "max_radius", ":", "float", ",", "\n", "methods", ":", "List", "[", "Line", "]", "=", "None", ",", "label", "=", "'Ours'", ",", "methods_base", ":", "List", "[", "Line", "]", "=", "None", ",", "label_base", "=", "'Baseline'", ",", "radius_step", ":", "float", "=", "0.01", ",", "upper_bounds", "=", "False", ",", "sigmas", "=", "[", "0.25", "]", ")", "->", "None", ":", "\n", "    ", "color", "=", "[", "'b'", ",", "'orange'", ",", "'g'", ",", "'r'", "]", "\n", "for", "it", ",", "sigma", "in", "enumerate", "(", "sigmas", ")", ":", "\n", "        ", "methods_sigma", "=", "[", "method", "for", "method", "in", "methods", "if", "'{:.2f}'", ".", "format", "(", "sigma", ")", "in", "method", ".", "quantity", ".", "data_file_path", "]", "\n", "accuracies_cert_ours", ",", "radii", "=", "_get_accuracies_at_radii", "(", "methods_sigma", ",", "0", ",", "max_radius", ",", "radius_step", ")", "\n", "accuracies_cert_ours", "=", "np", ".", "nan_to_num", "(", "accuracies_cert_ours", ",", "-", "1", ")", "\n", "plt", ".", "plot", "(", "radii", ",", "accuracies_cert_ours", "[", "accuracies_cert_ours", "[", ":", ",", "0", "]", ".", "argmax", "(", ")", ",", ":", "]", ",", "color", "[", "it", "]", ",", "label", "=", "'{}|$\\sigma = {:.2f}$'", ".", "format", "(", "label", ",", "sigma", ")", ")", "\n", "", "for", "it", ",", "sigma", "in", "enumerate", "(", "sigmas", ")", ":", "\n", "        ", "methods_sigma_base", "=", "[", "method", "for", "method", "in", "methods_base", "if", "'{:.2f}'", ".", "format", "(", "sigma", ")", "in", "method", ".", "quantity", ".", "data_file_path", "]", "\n", "accuracies_cert_ours", ",", "radii", "=", "_get_accuracies_at_radii", "(", "methods_sigma_base", ",", "0", ",", "max_radius", ",", "radius_step", ")", "\n", "accuracies_cert_ours", "=", "np", ".", "nan_to_num", "(", "accuracies_cert_ours", ",", "-", "1", ")", "\n", "plt", ".", "plot", "(", "radii", ",", "accuracies_cert_ours", "[", "accuracies_cert_ours", "[", ":", ",", "0", "]", ".", "argmax", "(", ")", ",", ":", "]", ",", "color", "[", "it", "]", ",", "dashes", "=", "[", "2", ",", "2", "]", ",", "label", "=", "'{}|$\\sigma = {:.2f}$'", ".", "format", "(", "label_base", ",", "sigma", ")", ")", "\n", "\n", "", "plt", ".", "ylim", "(", "(", "0", ",", "1", ")", ")", "\n", "plt", ".", "xlim", "(", "(", "0", ",", "max_radius", ")", ")", "\n", "plt", ".", "tick_params", "(", "labelsize", "=", "14", ")", "\n", "plt", ".", "xlabel", "(", "\"$\\ell_2$ radius\"", ",", "fontsize", "=", "16", ")", "\n", "plt", ".", "ylabel", "(", "\"Certified Accuracy\"", ",", "fontsize", "=", "16", ")", "\n", "plt", ".", "gca", "(", ")", ".", "xaxis", ".", "set_major_locator", "(", "plt", ".", "MultipleLocator", "(", "0.5", ")", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'upper right'", ",", "fontsize", "=", "16", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "outfile", "+", "\".pdf\"", ")", "\n", "plt", ".", "title", "(", "title", ",", "fontsize", "=", "20", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "outfile", "+", "\".png\"", ",", "dpi", "=", "300", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.analyze.plot_certified_accuracy_one_sigma_best_model_multiple_methods": [[162, 185], ["enumerate", "matplotlib.ylim", "matplotlib.xlim", "matplotlib.tick_params", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.gca().xaxis.set_major_locator", "matplotlib.legend", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.title", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.close", "analyze._get_accuracies_at_radii", "numpy.nan_to_num", "matplotlib.plot", "matplotlib.MultipleLocator", "matplotlib.gca", "accuracies_cert_ours[].argmax"], "function", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.analyze._get_accuracies_at_radii"], ["", "def", "plot_certified_accuracy_one_sigma_best_model_multiple_methods", "(", "outfile", ":", "str", ",", "title", ":", "str", ",", "max_radius", ":", "float", ",", "\n", "methods_labels_colors_dashes", ":", "List", ",", "\n", "radius_step", ":", "float", "=", "0.01", ",", "upper_bounds", "=", "False", ",", "sigma", "=", "0.25", ")", "->", "None", ":", "\n", "    ", "for", "it", ",", "(", "methods", ",", "label", ",", "color", ",", "dashes", ")", "in", "enumerate", "(", "methods_labels_colors_dashes", ")", ":", "\n", "        ", "methods_sigma", "=", "[", "method", "for", "method", "in", "methods", "if", "'{:.2f}'", ".", "format", "(", "sigma", ")", "in", "method", ".", "quantity", ".", "data_file_path", "]", "\n", "accuracies_cert_ours", ",", "radii", "=", "_get_accuracies_at_radii", "(", "methods_sigma", ",", "0", ",", "max_radius", ",", "radius_step", ")", "\n", "accuracies_cert_ours", "=", "np", ".", "nan_to_num", "(", "accuracies_cert_ours", ",", "-", "1", ")", "\n", "plt", ".", "plot", "(", "radii", ",", "accuracies_cert_ours", "[", "accuracies_cert_ours", "[", ":", ",", "0", "]", ".", "argmax", "(", ")", ",", ":", "]", ",", "\n", "color", ",", "dashes", "=", "dashes", ",", "linewidth", "=", "2", ",", "label", "=", "label", ")", "\n", "\n", "", "plt", ".", "ylim", "(", "(", "0", ",", "1", ")", ")", "\n", "plt", ".", "xlim", "(", "(", "0", ",", "max_radius", ")", ")", "\n", "plt", ".", "tick_params", "(", "labelsize", "=", "14", ")", "\n", "plt", ".", "xlabel", "(", "\"$\\ell_2$ radius\"", ",", "fontsize", "=", "16", ")", "\n", "plt", ".", "ylabel", "(", "\"Certified Accuracy\"", ",", "fontsize", "=", "16", ")", "\n", "plt", ".", "gca", "(", ")", ".", "xaxis", ".", "set_major_locator", "(", "plt", ".", "MultipleLocator", "(", "0.5", ")", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'upper right'", ",", "fontsize", "=", "16", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "outfile", "+", "\".pdf\"", ")", "\n", "plt", ".", "title", "(", "title", ",", "fontsize", "=", "20", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "outfile", "+", "\".png\"", ",", "dpi", "=", "300", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.analyze.latex_table_certified_accuracy_upper_envelope": [[187, 216], ["analyze._get_accuracies_at_radii", "analyze._get_accuracies_at_radii", "open", "open.write", "open.write", "open.write", "numpy.nan_to_num", "numpy.nan_to_num", "enumerate", "open.write", "open.close", "open.write", "numpy.argwhere", "argmaxs.flatten.flatten", "open.write", "accuracies[].max", "clean_accuracies[].argmax"], "function", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.analyze._get_accuracies_at_radii", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.analyze._get_accuracies_at_radii"], ["", "def", "latex_table_certified_accuracy_upper_envelope", "(", "outfile", ":", "str", ",", "radius_start", ":", "float", ",", "radius_stop", ":", "float", ",", "radius_step", ":", "float", ",", "\n", "methods", ":", "List", "[", "Line", "]", "=", "None", ",", "clean_accuracy", "=", "True", ")", ":", "\n", "    ", "accuracies", ",", "radii", "=", "_get_accuracies_at_radii", "(", "methods", ",", "radius_start", ",", "radius_stop", ",", "radius_step", ")", "\n", "clean_accuracies", ",", "_", "=", "_get_accuracies_at_radii", "(", "methods", ",", "0", ",", "0", ",", "0.25", ")", "\n", "assert", "clean_accuracies", ".", "shape", "[", "1", "]", "==", "1", "\n", "\n", "f", "=", "open", "(", "outfile", ",", "'w'", ")", "\n", "\n", "f", ".", "write", "(", "\"$\\ell_2$ Radius\"", ")", "\n", "for", "radius", "in", "radii", ":", "\n", "        ", "f", ".", "write", "(", "\"& ${:.3}$\"", ".", "format", "(", "radius", ")", ")", "\n", "", "f", ".", "write", "(", "\"\\\\\\\\\\n\"", ")", "\n", "\n", "f", ".", "write", "(", "\"\\midrule\\n\"", ")", "\n", "\n", "clean_accuracies", "=", "np", ".", "nan_to_num", "(", "clean_accuracies", ",", "-", "1", ")", "\n", "accuracies", "=", "np", ".", "nan_to_num", "(", "accuracies", ",", "-", "1", ")", "\n", "for", "j", ",", "radius", "in", "enumerate", "(", "radii", ")", ":", "\n", "        ", "argmaxs", "=", "np", ".", "argwhere", "(", "accuracies", "[", ":", ",", "j", "]", "==", "accuracies", "[", ":", ",", "j", "]", ".", "max", "(", ")", ")", "\n", "argmaxs", "=", "argmaxs", ".", "flatten", "(", ")", "\n", "i", "=", "argmaxs", "[", "clean_accuracies", "[", "argmaxs", ",", "0", "]", ".", "argmax", "(", ")", "]", "\n", "# i = i.flatten()[0]", "\n", "if", "clean_accuracy", ":", "\n", "            ", "txt", "=", "\" & $^{(\"", "+", "\"{:.2f})\"", ".", "format", "(", "clean_accuracies", "[", "i", ",", "0", "]", ")", "+", "\"}\"", "+", "\"${:.2f}\"", ".", "format", "(", "accuracies", "[", "i", ",", "j", "]", ")", "\n", "", "else", ":", "\n", "            ", "txt", "=", "\" & {:.2f}\"", ".", "format", "(", "accuracies", "[", "i", ",", "j", "]", ")", "\n", "", "f", ".", "write", "(", "txt", ")", "\n", "", "f", ".", "write", "(", "\"\\\\\\\\\\n\"", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.analyze._get_accuracies_at_radii": [[217, 223], ["numpy.arange", "numpy.zeros", "enumerate", "method.quantity.at_radii", "len", "len"], "function", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.analyze.ApproximateAccuracy_API.at_radii"], ["", "def", "_get_accuracies_at_radii", "(", "methods", ":", "List", "[", "Line", "]", ",", "radius_start", ":", "float", ",", "radius_stop", ":", "float", ",", "radius_step", ":", "float", ")", ":", "\n", "    ", "radii", "=", "np", ".", "arange", "(", "radius_start", ",", "radius_stop", "+", "radius_step", ",", "radius_step", ")", "\n", "accuracies", "=", "np", ".", "zeros", "(", "(", "len", "(", "methods", ")", ",", "len", "(", "radii", ")", ")", ")", "\n", "for", "i", ",", "method", "in", "enumerate", "(", "methods", ")", ":", "\n", "        ", "accuracies", "[", "i", ",", ":", "]", "=", "method", ".", "quantity", ".", "at_radii", "(", "radii", ")", "\n", "", "return", "accuracies", ",", "radii", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.AverageMeter.__init__": [[12, 14], ["train_utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.AverageMeter.reset": [[15, 20], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.AverageMeter.update": [[21, 26], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.accuracy": [[28, 43], ["torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "torch.flatten().float().sum", "res.append", "torch.flatten().float().sum.mul_", "target.view", "torch.flatten().float", "torch.flatten"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "torch", ".", "flatten", "(", "correct", "[", ":", "k", "]", ",", "start_dim", "=", "0", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.init_logfile": [[45, 49], ["open", "open.write", "open.close"], "function", ["None"], ["", "", "def", "init_logfile", "(", "filename", ":", "str", ",", "text", ":", "str", ")", ":", "\n", "    ", "f", "=", "open", "(", "filename", ",", "'w'", ")", "\n", "f", ".", "write", "(", "text", "+", "\"\\n\"", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.measurement": [[51, 56], ["torch.manual_seed", "torch.cuda.manual_seed_all", "torch.normal().cuda", "torch.normal", "numpy.sqrt"], "function", ["None"], ["", "def", "measurement", "(", "n_measure", ",", "dim", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "0", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "0", ")", "\n", "aa", "=", "torch", ".", "normal", "(", "0", ",", "np", ".", "sqrt", "(", "1", "/", "n_measure", ")", ",", "size", "=", "(", "dim", ",", "n_measure", ")", ")", ".", "cuda", "(", ")", "\n", "return", "aa", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.log": [[59, 63], ["open", "open.write", "open.close"], "function", ["None"], ["", "def", "log", "(", "filename", ":", "str", ",", "text", ":", "str", ")", ":", "\n", "    ", "f", "=", "open", "(", "filename", ",", "'a'", ")", "\n", "f", ".", "write", "(", "text", "+", "\"\\n\"", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.requires_grad_": [[65, 68], ["model.parameters", "param.requires_grad_"], "function", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.requires_grad_"], ["", "def", "requires_grad_", "(", "model", ":", "torch", ".", "nn", ".", "Module", ",", "requires_grad", ":", "bool", ")", "->", "None", ":", "\n", "    ", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "requires_grad_", "(", "requires_grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.copy_code": [[70, 87], ["set", "os.walk", "print", "os.path.join", "shutil.copy2", "os.path.exists", "os.mkdir", "os.path.join", "os.path.join", "f.endswith"], "function", ["None"], ["", "", "def", "copy_code", "(", "outdir", ")", ":", "\n", "    ", "\"\"\"Copies files to the outdir to store complete script with each experiment\"\"\"", "\n", "# embed()", "\n", "code", "=", "[", "]", "\n", "exclude", "=", "set", "(", "[", "]", ")", "\n", "for", "root", ",", "_", ",", "files", "in", "os", ".", "walk", "(", "\"./code\"", ",", "topdown", "=", "True", ")", ":", "\n", "        ", "for", "f", "in", "files", ":", "\n", "            ", "if", "not", "f", ".", "endswith", "(", "'.py'", ")", ":", "\n", "                ", "continue", "\n", "", "code", "+=", "[", "(", "root", ",", "f", ")", "]", "\n", "\n", "", "", "for", "r", ",", "f", "in", "code", ":", "\n", "        ", "codedir", "=", "os", ".", "path", ".", "join", "(", "outdir", ",", "r", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "codedir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "codedir", ")", "\n", "", "shutil", ".", "copy2", "(", "os", ".", "path", ".", "join", "(", "r", ",", "f", ")", ",", "os", ".", "path", ".", "join", "(", "codedir", ",", "f", ")", ")", "\n", "", "print", "(", "\"Code copied to '{}'\"", ".", "format", "(", "outdir", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.classifier_train.to_img": [[37, 42], ["x.view.clamp", "x.view.view", "x.view.size"], "function", ["None"], ["", "def", "to_img", "(", "x", ")", ":", "\n", "    ", "x", "=", "0.5", "*", "(", "x", "+", "1", ")", "\n", "x", "=", "x", ".", "clamp", "(", "0", ",", "1", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "28", ",", "28", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.architectures.get_architecture": [[70, 326], ["datasets.get_normalize_layer", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torchvision.models.resnet.resnet18", "torch.nn.DataParallel", "torch.nn.DataParallel", "archs.resnet.ResNet50().cuda", "torchvision.models.resnet.resnet34", "torch.nn.DataParallel", "torch.nn.DataParallel", "archs.resnet.ResNet18().cuda", "torchvision.models.resnet.resnet50", "archs.resnet.ResNet50", "archs.tiny_resnet.TinyResNet50().cuda", "archs.resnet.ResNet18", "archs.tiny_resnet.TinyResNet18().cuda", "archs.tiny_resnet.TinyResNet50", "archs.cifarnet.CifarNet().cuda", "archs.tiny_resnet.TinyResNet18", "archs.cifar_resnet.resnet.cuda", "archs.cifarnet.CifarNet", "archs.cifar_resnet.resnet.cuda", "archs.cifar_resnet.resnet", "archs.stl_resnet.STL10_ResNet18().cuda", "archs.cifar_resnet.resnet", "archs.mnist_resnet.MnistResNet101.cuda", "archs.stl_resnet.STL10_ResNet18", "archs.cifar_resnet.resnet.cuda", "archs.mnist_resnet.MnistResNet101", "archs.wrn.WideResNet().cuda", "archs.cifar_resnet.resnet", "archs.wrn.WideResNet().cuda", "archs.wrn.WideResNet", "archs.wrn.WideResNet().cuda", "archs.wrn.WideResNet", "archs.wrn.WideResNet().cuda", "archs.wrn.WideResNet", "VGG().cuda", "archs.wrn.WideResNet", "VGG().cuda", "VGG", "archs.resnet.ResNet18().cuda", "VGG", "PreActResNet18().cuda", "archs.resnet.ResNet18", "GoogLeNet().cuda", "PreActResNet18", "DenseNet121().cuda", "GoogLeNet", "ResNeXt29_2x64d().cuda", "DenseNet121", "MobileNet().cuda", "ResNeXt29_2x64d", "MobileNetV2().cuda", "MobileNet", "SENet18().cuda", "MobileNetV2", "ShuffleNetV2().cuda", "SENet18", "EfficientNetB0().cuda", "ShuffleNetV2", "archs.cae.MNIST_CAE().cuda", "EfficientNetB0", "archs.cae.MNIST_CAE().cuda", "archs.cae.MNIST_CAE", "archs.cae.CelebA_CAE().cuda", "archs.cae.MNIST_CAE", "archs.cae.CIFAR_CAE().cuda", "archs.cae.CelebA_CAE", "archs.dncnn.DnCNN().cuda", "archs.cae.CIFAR_CAE", "archs.cae.ImageNet_Encoder_1152().cuda", "archs.dncnn.DnCNN", "archs.cae.ImageNet_Decoder_1152().cuda", "archs.cae.ImageNet_Encoder_1152", "archs.cae.ImageNet_Encoder_1728().cuda", "archs.cae.ImageNet_Decoder_1152", "archs.cae.ImageNet_Decoder_1728().cuda", "archs.cae.ImageNet_Encoder_1728", "archs.cae.ImageNet_Encoder_2304().cuda", "archs.cae.ImageNet_Decoder_1728", "archs.cae.ImageNet_Decoder_2304().cuda", "archs.cae.ImageNet_Encoder_2304", "archs.cae.ImageNet_Encoder_3456().cuda", "archs.cae.ImageNet_Decoder_2304", "archs.cae.ImageNet_Decoder_3456().cuda", "archs.cae.ImageNet_Encoder_3456", "archs.cae.ImageNet_Encoder_15552().cuda", "archs.cae.ImageNet_Decoder_3456", "archs.cae.ImageNet_Decoder_15552().cuda", "archs.cae.ImageNet_Encoder_15552", "archs.cae.TinyImageNet_Encoder().cuda", "archs.cae.ImageNet_Decoder_15552", "archs.cae.TinyImageNet_Decoder().cuda", "archs.cae.TinyImageNet_Encoder", "archs.cae.TinyImageNet_Encoder_768().cuda", "archs.cae.TinyImageNet_Decoder", "archs.cae.TinyImageNet_Decoder_768().cuda", "archs.cae.TinyImageNet_Encoder_768", "archs.cae.MNIST_Dim_Encoder().cuda", "archs.cae.TinyImageNet_Decoder_768", "archs.cae.MNIST_Dim_Decoder().cuda", "archs.cae.MNIST_Dim_Encoder", "archs.cae.STL_Encoder().cuda", "archs.cae.MNIST_Dim_Decoder", "archs.cae.STL_Decoder().cuda", "archs.cae.STL_Encoder", "archs.cae.Cifar_Encoder_48().cuda", "archs.cae.STL_Decoder", "archs.cae.Cifar_Decoder_48().cuda", "archs.cae.Cifar_Encoder_48", "archs.cae.Cifar_Encoder_96().cuda", "archs.cae.Cifar_Decoder_48", "archs.cae.Cifar_Decoder_96().cuda", "archs.cae.Cifar_Encoder_96", "archs.cae.Cifar_Encoder_192().cuda", "archs.cae.Cifar_Decoder_96", "archs.cae.Cifar_Decoder_192().cuda", "archs.cae.Cifar_Encoder_192", "archs.cae.Cifar_Encoder_192_24().cuda", "archs.cae.Cifar_Decoder_192", "archs.cae.Cifar_Decoder_192_24().cuda", "archs.cae.Cifar_Encoder_192_24", "archs.cae.Cifar_Encoder_384().cuda", "archs.cae.Cifar_Decoder_192_24", "archs.cae.Cifar_Decoder_384().cuda", "archs.cae.Cifar_Encoder_384", "archs.cae.Cifar_Encoder_768_32().cuda", "archs.cae.Cifar_Decoder_384", "archs.cae.Cifar_Decoder_768_32().cuda", "archs.cae.Cifar_Encoder_768_32", "archs.cae.Cifar_Encoder_768_24().cuda", "archs.cae.Cifar_Decoder_768_32", "archs.cae.Cifar_Decoder_768_24().cuda", "archs.cae.Cifar_Encoder_768_24", "archs.cae.Cifar_Encoder_1536().cuda", "archs.cae.Cifar_Decoder_768_24", "archs.cae.Cifar_Decoder_1536().cuda", "archs.cae.Cifar_Encoder_1536", "archs.cae.Cifar_Encoder_2048().cuda", "archs.cae.Cifar_Decoder_1536", "archs.cae.Cifar_Decoder_2048().cuda", "archs.cae.Cifar_Encoder_2048", "archs.dncnn.DnCNN().cuda", "archs.cae.Cifar_Decoder_2048", "archs.dncnn.DnCNN().cuda", "archs.dncnn.DnCNN", "archs.dncnn.DnCNN().cuda", "archs.dncnn.DnCNN", "archs.memnet.MemNet().cuda", "archs.dncnn.DnCNN", "archs.dncnn.DnCNN().cuda", "archs.memnet.MemNet", "archs.dncnn.DnCNN().cuda", "archs.dncnn.DnCNN", "archs.dncnn.DnCNN().cuda", "archs.dncnn.DnCNN", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "Exception", "archs.dncnn.DnCNN", "torch.nn.DataParallel", "torch.nn.DataParallel", "archs.memnet.MemNet"], "function", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.datasets.get_normalize_layer", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.resnet.ResNet50", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.resnet.ResNet18", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cifar_resnet.resnet", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cifar_resnet.resnet", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cifar_resnet.resnet", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.resnet.ResNet18", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.preact_resnet.PreActResNet18", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.densenet.DenseNet121", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.resnext.ResNeXt29_2x64d", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.senet.SENet18", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.efficientnet.EfficientNetB0"], ["def", "get_architecture", "(", "arch", ":", "str", ",", "dataset", ":", "str", ",", "pytorch_pretrained", ":", "bool", "=", "False", ")", "->", "torch", ".", "nn", ".", "Module", ":", "\n", "    ", "\"\"\" Return a neural network (with random weights)\n\n    :param arch: the architecture - should be in the ARCHITECTURES list above\n    :param dataset: the dataset - should be in the datasets.DATASETS list\n    :return: a Pytorch module\n    \"\"\"", "\n", "## ImageNet classifiers", "\n", "if", "arch", "==", "\"resnet18\"", "and", "dataset", "==", "\"imagenet\"", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "resnet18", "(", "pretrained", "=", "pytorch_pretrained", ")", ")", ".", "cuda", "(", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "", "elif", "arch", "==", "\"resnet34\"", "and", "dataset", "==", "\"imagenet\"", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "resnet34", "(", "pretrained", "=", "pytorch_pretrained", ")", ")", ".", "cuda", "(", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "", "elif", "arch", "==", "\"resnet50\"", "and", "dataset", "==", "\"imagenet\"", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "resnet50", "(", "pretrained", "=", "pytorch_pretrained", ")", ")", ".", "cuda", "(", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "", "elif", "arch", "==", "'resnet50_restricted'", ":", "\n", "        ", "model", "=", "ResNet50", "(", ")", ".", "cuda", "(", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "return", "model", "\n", "", "elif", "arch", "==", "'resnet18_restricted'", ":", "\n", "        ", "model", "=", "ResNet18", "(", ")", ".", "cuda", "(", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "return", "model", "\n", "\n", "", "elif", "arch", "==", "\"tiny_resnet50\"", "and", "dataset", "==", "\"tinyimagenet\"", ":", "\n", "        ", "model", "=", "TinyResNet50", "(", ")", ".", "cuda", "(", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "", "elif", "arch", "==", "\"tiny_resnet18\"", "and", "dataset", "==", "\"tinyimagenet\"", ":", "\n", "        ", "model", "=", "TinyResNet18", "(", ")", ".", "cuda", "(", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "## Cifar classifiers", "\n", "", "elif", "arch", "==", "\"cifarnet\"", ":", "\n", "        ", "model", "=", "CifarNet", "(", ")", ".", "cuda", "(", ")", "\n", "", "elif", "arch", "==", "\"cifar_resnet20\"", ":", "\n", "        ", "model", "=", "resnet_cifar", "(", "depth", "=", "20", ",", "num_classes", "=", "10", ")", ".", "cuda", "(", ")", "\n", "", "elif", "arch", "==", "\"cifar_resnet110\"", ":", "\n", "        ", "model", "=", "resnet_cifar", "(", "depth", "=", "110", ",", "num_classes", "=", "10", ")", ".", "cuda", "(", ")", "\n", "", "elif", "arch", "==", "\"stl10_resnet18\"", ":", "\n", "        ", "model", "=", "STL10_ResNet18", "(", "3", ",", "10", ")", ".", "cuda", "(", ")", "\n", "", "elif", "arch", "==", "\"mnist_resnet101\"", ":", "\n", "        ", "model", "=", "resnet101_mnist", "(", ")", ".", "cuda", "(", ")", "\n", "", "elif", "arch", "==", "\"imagenet32_resnet110\"", ":", "\n", "        ", "model", "=", "resnet_cifar", "(", "depth", "=", "110", ",", "num_classes", "=", "1000", ")", ".", "cuda", "(", ")", "\n", "", "elif", "arch", "==", "\"imagenet32_wrn\"", ":", "\n", "        ", "model", "=", "WideResNet", "(", "depth", "=", "28", ",", "num_classes", "=", "1000", ",", "widen_factor", "=", "10", ")", ".", "cuda", "(", ")", "\n", "", "elif", "arch", "==", "'cifar_wrn_28_4'", ":", "\n", "        ", "model", "=", "WideResNet", "(", "depth", "=", "28", ",", "num_classes", "=", "10", ",", "widen_factor", "=", "4", ")", ".", "cuda", "(", ")", "\n", "\n", "# Cifar10 Models from https://github.com/kuangliu/pytorch-cifar", "\n", "# The 14 models we use in the paper as surrogate models", "\n", "", "elif", "arch", "==", "\"cifar_wrn\"", ":", "\n", "        ", "model", "=", "WideResNet", "(", "depth", "=", "28", ",", "num_classes", "=", "10", ",", "widen_factor", "=", "10", ")", ".", "cuda", "(", ")", "\n", "", "elif", "arch", "==", "\"cifar_wrn40\"", ":", "\n", "        ", "model", "=", "WideResNet", "(", "depth", "=", "40", ",", "num_classes", "=", "10", ",", "widen_factor", "=", "10", ")", ".", "cuda", "(", ")", "\n", "", "elif", "arch", "==", "\"VGG16\"", ":", "\n", "        ", "model", "=", "VGG", "(", "'VGG16'", ")", ".", "cuda", "(", ")", "\n", "", "elif", "arch", "==", "\"VGG19\"", ":", "\n", "        ", "model", "=", "VGG", "(", "'VGG19'", ")", ".", "cuda", "(", ")", "\n", "", "elif", "arch", "==", "\"ResNet18\"", ":", "\n", "        ", "model", "=", "ResNet18", "(", ")", ".", "cuda", "(", ")", "\n", "", "elif", "arch", "==", "\"PreActResNet18\"", ":", "\n", "        ", "model", "=", "PreActResNet18", "(", ")", ".", "cuda", "(", ")", "\n", "", "elif", "arch", "==", "\"GoogLeNet\"", ":", "\n", "        ", "model", "=", "GoogLeNet", "(", ")", ".", "cuda", "(", ")", "\n", "", "elif", "arch", "==", "\"DenseNet121\"", ":", "\n", "        ", "model", "=", "DenseNet121", "(", ")", ".", "cuda", "(", ")", "\n", "", "elif", "arch", "==", "\"ResNeXt29_2x64d\"", ":", "\n", "        ", "model", "=", "ResNeXt29_2x64d", "(", ")", ".", "cuda", "(", ")", "\n", "", "elif", "arch", "==", "\"MobileNet\"", ":", "\n", "        ", "model", "=", "MobileNet", "(", ")", ".", "cuda", "(", ")", "\n", "", "elif", "arch", "==", "\"MobileNetV2\"", ":", "\n", "        ", "model", "=", "MobileNetV2", "(", ")", ".", "cuda", "(", ")", "\n", "", "elif", "arch", "==", "\"SENet18\"", ":", "\n", "        ", "model", "=", "SENet18", "(", ")", ".", "cuda", "(", ")", "\n", "", "elif", "arch", "==", "\"ShuffleNetV2\"", ":", "\n", "        ", "model", "=", "ShuffleNetV2", "(", "1", ")", ".", "cuda", "(", ")", "\n", "", "elif", "arch", "==", "\"EfficientNetB0\"", ":", "\n", "        ", "model", "=", "EfficientNetB0", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "## Image Reconstruction Network", "\n", "", "elif", "arch", "==", "\"MNIST_CAE\"", ":", "\n", "        ", "model", "=", "MNIST_CAE", "(", ")", ".", "cuda", "(", ")", "\n", "", "elif", "arch", "==", "\"MNIST_CAE_NoNorm\"", ":", "\n", "        ", "model", "=", "MNIST_CAE", "(", ")", ".", "cuda", "(", ")", "\n", "return", "model", "\n", "", "elif", "arch", "==", "\"CelebA_CAE\"", ":", "\n", "        ", "model", "=", "CelebA_CAE", "(", ")", ".", "cuda", "(", ")", "\n", "", "elif", "arch", "==", "\"CIFAR_CAE\"", ":", "\n", "        ", "model", "=", "CIFAR_CAE", "(", ")", ".", "cuda", "(", ")", "\n", "", "elif", "arch", "==", "\"cifar_dncnn_recon\"", ":", "\n", "        ", "model", "=", "DnCNN", "(", "image_channels", "=", "3", ",", "depth", "=", "17", ",", "n_channels", "=", "64", ")", ".", "cuda", "(", ")", "\n", "\n", "# Encoder and Decoders", "\n", "", "elif", "arch", "==", "'restricted_imagenet_encoder_1152'", ":", "\n", "        ", "model", "=", "ImageNet_Encoder_1152", "(", ")", ".", "cuda", "(", ")", "\n", "return", "model", "\n", "", "elif", "arch", "==", "'restricted_imagenet_decoder_1152'", ":", "\n", "        ", "model", "=", "ImageNet_Decoder_1152", "(", ")", ".", "cuda", "(", ")", "\n", "return", "model", "\n", "", "elif", "arch", "==", "'restricted_imagenet_encoder_1728'", ":", "\n", "        ", "model", "=", "ImageNet_Encoder_1728", "(", ")", ".", "cuda", "(", ")", "\n", "return", "model", "\n", "", "elif", "arch", "==", "'restricted_imagenet_decoder_1728'", ":", "\n", "        ", "model", "=", "ImageNet_Decoder_1728", "(", ")", ".", "cuda", "(", ")", "\n", "return", "model", "\n", "", "elif", "arch", "==", "'restricted_imagenet_encoder_2304'", ":", "\n", "        ", "model", "=", "ImageNet_Encoder_2304", "(", ")", ".", "cuda", "(", ")", "\n", "return", "model", "\n", "", "elif", "arch", "==", "'restricted_imagenet_decoder_2304'", ":", "\n", "        ", "model", "=", "ImageNet_Decoder_2304", "(", ")", ".", "cuda", "(", ")", "\n", "return", "model", "\n", "", "elif", "arch", "==", "'restricted_imagenet_encoder_3456'", ":", "\n", "        ", "model", "=", "ImageNet_Encoder_3456", "(", ")", ".", "cuda", "(", ")", "\n", "return", "model", "\n", "", "elif", "arch", "==", "'restricted_imagenet_decoder_3456'", ":", "\n", "        ", "model", "=", "ImageNet_Decoder_3456", "(", ")", ".", "cuda", "(", ")", "\n", "return", "model", "\n", "", "elif", "arch", "==", "'restricted_imagenet_encoder_15552'", ":", "\n", "        ", "model", "=", "ImageNet_Encoder_15552", "(", ")", ".", "cuda", "(", ")", "\n", "return", "model", "\n", "", "elif", "arch", "==", "'restricted_imagenet_decoder_15552'", ":", "\n", "        ", "model", "=", "ImageNet_Decoder_15552", "(", ")", ".", "cuda", "(", ")", "\n", "return", "model", "\n", "\n", "", "elif", "arch", "==", "\"TinyImageNet_encoder\"", ":", "\n", "        ", "model", "=", "TinyImageNet_Encoder", "(", ")", ".", "cuda", "(", ")", "\n", "return", "model", "\n", "", "elif", "arch", "==", "\"TinyImageNet_decoder\"", ":", "\n", "        ", "model", "=", "TinyImageNet_Decoder", "(", ")", ".", "cuda", "(", ")", "\n", "return", "model", "\n", "", "elif", "arch", "==", "\"TinyImageNet_encoder_768\"", ":", "\n", "        ", "model", "=", "TinyImageNet_Encoder_768", "(", ")", ".", "cuda", "(", ")", "\n", "return", "model", "\n", "", "elif", "arch", "==", "\"TinyImageNet_decoder_768\"", ":", "\n", "        ", "model", "=", "TinyImageNet_Decoder_768", "(", ")", ".", "cuda", "(", ")", "\n", "return", "model", "\n", "\n", "", "elif", "arch", "==", "\"mnist_dim_encoder\"", ":", "\n", "        ", "model", "=", "MNIST_Dim_Encoder", "(", ")", ".", "cuda", "(", ")", "\n", "return", "model", "\n", "", "elif", "arch", "==", "\"mnist_dim_decoder\"", ":", "\n", "        ", "model", "=", "MNIST_Dim_Decoder", "(", ")", ".", "cuda", "(", ")", "\n", "return", "model", "\n", "\n", "", "elif", "arch", "==", "\"stl_encoder\"", ":", "\n", "        ", "model", "=", "STL_Encoder", "(", ")", ".", "cuda", "(", ")", "\n", "return", "model", "\n", "", "elif", "arch", "==", "\"stl_decoder\"", ":", "\n", "        ", "model", "=", "STL_Decoder", "(", ")", ".", "cuda", "(", ")", "\n", "return", "model", "\n", "\n", "", "elif", "arch", "==", "\"cifar_encoder_48\"", ":", "\n", "        ", "model", "=", "Cifar_Encoder_48", "(", ")", ".", "cuda", "(", ")", "\n", "return", "model", "\n", "", "elif", "arch", "==", "\"cifar_decoder_48\"", ":", "\n", "        ", "model", "=", "Cifar_Decoder_48", "(", ")", ".", "cuda", "(", ")", "\n", "return", "model", "\n", "\n", "", "elif", "arch", "==", "\"cifar_encoder_96\"", ":", "\n", "        ", "model", "=", "Cifar_Encoder_96", "(", ")", ".", "cuda", "(", ")", "\n", "return", "model", "\n", "", "elif", "arch", "==", "\"cifar_decoder_96\"", ":", "\n", "        ", "model", "=", "Cifar_Decoder_96", "(", ")", ".", "cuda", "(", ")", "\n", "return", "model", "\n", "\n", "", "elif", "arch", "==", "\"cifar_encoder_192\"", ":", "\n", "        ", "model", "=", "Cifar_Encoder_192", "(", ")", ".", "cuda", "(", ")", "\n", "return", "model", "\n", "", "elif", "arch", "==", "\"cifar_decoder_192\"", ":", "\n", "        ", "model", "=", "Cifar_Decoder_192", "(", ")", ".", "cuda", "(", ")", "\n", "return", "model", "\n", "\n", "", "elif", "arch", "==", "\"cifar_encoder_192_24\"", ":", "\n", "        ", "model", "=", "Cifar_Encoder_192_24", "(", ")", ".", "cuda", "(", ")", "\n", "return", "model", "\n", "", "elif", "arch", "==", "\"cifar_decoder_192_24\"", ":", "\n", "        ", "model", "=", "Cifar_Decoder_192_24", "(", ")", ".", "cuda", "(", ")", "\n", "return", "model", "\n", "\n", "", "elif", "arch", "==", "\"cifar_encoder_384\"", ":", "\n", "        ", "model", "=", "Cifar_Encoder_384", "(", ")", ".", "cuda", "(", ")", "\n", "return", "model", "\n", "", "elif", "arch", "==", "\"cifar_decoder_384\"", ":", "\n", "        ", "model", "=", "Cifar_Decoder_384", "(", ")", ".", "cuda", "(", ")", "\n", "return", "model", "\n", "\n", "", "elif", "arch", "==", "\"cifar_encoder_768_32\"", ":", "\n", "        ", "model", "=", "Cifar_Encoder_768_32", "(", ")", ".", "cuda", "(", ")", "\n", "return", "model", "\n", "", "elif", "arch", "==", "\"cifar_decoder_768_32\"", ":", "\n", "        ", "model", "=", "Cifar_Decoder_768_32", "(", ")", ".", "cuda", "(", ")", "\n", "return", "model", "\n", "\n", "", "elif", "arch", "==", "\"cifar_encoder_768_24\"", ":", "\n", "        ", "model", "=", "Cifar_Encoder_768_24", "(", ")", ".", "cuda", "(", ")", "\n", "return", "model", "\n", "", "elif", "arch", "==", "\"cifar_decoder_768_24\"", ":", "\n", "        ", "model", "=", "Cifar_Decoder_768_24", "(", ")", ".", "cuda", "(", ")", "\n", "return", "model", "\n", "\n", "", "elif", "arch", "==", "\"cifar_encoder_1536\"", ":", "\n", "        ", "model", "=", "Cifar_Encoder_1536", "(", ")", ".", "cuda", "(", ")", "\n", "return", "model", "\n", "", "elif", "arch", "==", "\"cifar_decoder_1536\"", ":", "\n", "        ", "model", "=", "Cifar_Decoder_1536", "(", ")", ".", "cuda", "(", ")", "\n", "return", "model", "\n", "\n", "", "elif", "arch", "==", "\"cifar_encoder_2048\"", ":", "\n", "        ", "model", "=", "Cifar_Encoder_2048", "(", ")", ".", "cuda", "(", ")", "\n", "return", "model", "\n", "", "elif", "arch", "==", "\"cifar_decoder_2048\"", ":", "\n", "        ", "model", "=", "Cifar_Decoder_2048", "(", ")", ".", "cuda", "(", ")", "\n", "return", "model", "\n", "#elif arch == \"vrnet\":", "\n", "#model = VariationalNetwork().cuda()", "\n", "\n", "\n", "## Image Denoising Architectures", "\n", "", "elif", "arch", "==", "\"cifar_dncnn\"", ":", "\n", "        ", "model", "=", "DnCNN", "(", "image_channels", "=", "3", ",", "depth", "=", "17", ",", "n_channels", "=", "64", ")", ".", "cuda", "(", ")", "\n", "#model = DnCNN(image_channels=3, depth=17, n_channels=64)", "\n", "return", "model", "\n", "", "elif", "arch", "==", "\"mnist_dncnn\"", ":", "\n", "        ", "model", "=", "DnCNN", "(", "image_channels", "=", "1", ",", "depth", "=", "17", ",", "n_channels", "=", "64", ")", ".", "cuda", "(", ")", "\n", "#model = DnCNN(image_channels=3, depth=17, n_channels=64)", "\n", "return", "model", "\n", "", "elif", "arch", "==", "\"cifar_dncnn_wide\"", ":", "\n", "        ", "model", "=", "DnCNN", "(", "image_channels", "=", "3", ",", "depth", "=", "17", ",", "n_channels", "=", "128", ")", ".", "cuda", "(", ")", "\n", "return", "model", "\n", "", "elif", "arch", "==", "'memnet'", ":", "\n", "        ", "model", "=", "MemNet", "(", "in_channels", "=", "3", ",", "channels", "=", "64", ",", "num_memblock", "=", "3", ",", "num_resblock", "=", "6", ")", ".", "cuda", "(", ")", "\n", "return", "model", "\n", "", "elif", "arch", "==", "\"imagenet_dncnn\"", ":", "\n", "        ", "model", "=", "DnCNN", "(", "image_channels", "=", "3", ",", "depth", "=", "17", ",", "n_channels", "=", "64", ")", ".", "cuda", "(", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "return", "model", "\n", "", "elif", "arch", "==", "\"tiny_imagenet_dncnn\"", ":", "\n", "        ", "model", "=", "DnCNN", "(", "image_channels", "=", "3", ",", "depth", "=", "17", ",", "n_channels", "=", "64", ")", ".", "cuda", "(", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "return", "model", "\n", "", "elif", "arch", "==", "\"stl10_dncnn\"", ":", "\n", "        ", "model", "=", "DnCNN", "(", "image_channels", "=", "3", ",", "depth", "=", "17", ",", "n_channels", "=", "64", ")", ".", "cuda", "(", ")", "\n", "return", "model", "\n", "", "elif", "arch", "==", "'imagenet_memnet'", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "MemNet", "(", "in_channels", "=", "3", ",", "channels", "=", "64", ",", "num_memblock", "=", "3", ",", "num_resblock", "=", "6", ")", ")", ".", "cuda", "(", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "return", "model", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Unknown architecture.'", ")", "\n", "\n", "", "normalize_layer", "=", "get_normalize_layer", "(", "dataset", ")", "\n", "return", "torch", ".", "nn", ".", "Sequential", "(", "normalize_layer", ",", "model", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.AE_DS_train.main": [[103, 316], ["train_utils.copy_code", "torch.load", "architectures.get_architecture", "architectures.get_architecture.load_state_dict", "architectures.get_architecture.cuda().eval", "train_utils.requires_grad_", "torch.optim.lr_scheduler.StepLR", "os.path.join", "range", "os.path.exists", "os.makedirs", "datasets.get_dataset", "datasets.get_dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.load", "architectures.get_architecture", "architectures.get_architecture.load_state_dict", "architectures.get_architecture", "train_utils.init_logfile", "torch.nn.CrossEntropyLoss().cuda", "time.time", "torch.optim.lr_scheduler.StepLR.step", "torch.save", "torch.save", "robustness.tools.imagenet_helpers.ImageNetHierarchy", "robustness.tools.imagenet_helpers.ImageNetHierarchy.get_subclasses", "robustness.datasets.CustomImageNet", "dataset_r.CustomImageNet.make_loaders", "torch.load", "architectures.get_architecture", "architectures.get_architecture.load_state_dict", "architectures.get_architecture", "torch.load", "architectures.get_architecture", "architectures.get_architecture.load_state_dict", "architectures.get_architecture", "architectures.get_architecture.cuda", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "train_utils.init_logfile", "torch.nn.MSELoss().cuda", "time.time", "train_utils.log", "torch.optim.lr_scheduler.StepLR.get_lr", "os.path.join", "torch.save", "torch.save", "os.path.join", "torch.save", "torch.save", "architectures.get_architecture.parameters", "itertools.chain", "itertools.chain", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.nn.CrossEntropyLoss", "AE_DS_train.train_ae", "AE_DS_train.test_with_classifier_ae", "AE_DS_train.test_with_classifier_ae", "architectures.get_architecture.state_dict", "torch.optim.SGD.state_dict", "os.path.join", "os.path.join", "architectures.get_architecture.state_dict", "torch.optim.SGD.state_dict", "os.path.join", "os.path.join", "architectures.get_architecture.parameters", "architectures.get_architecture.parameters", "architectures.get_architecture.parameters", "architectures.get_architecture.parameters", "architectures.get_architecture.parameters", "architectures.get_architecture.parameters", "itertools.chain", "itertools.chain", "torch.nn.MSELoss", "AE_DS_train.train", "AE_DS_train.test_with_classifier", "AE_DS_train.test_with_classifier", "AE_DS_train.recon_train_ae", "AE_DS_train.test_with_recon_ae", "train_utils.log", "architectures.get_architecture.state_dict", "torch.optim.SGD.state_dict", "architectures.get_architecture.state_dict", "torch.optim.SGD.state_dict", "architectures.get_architecture.state_dict", "torch.optim.SGD.state_dict", "architectures.get_architecture.state_dict", "torch.optim.SGD.state_dict", "architectures.get_architecture.parameters", "architectures.get_architecture.parameters", "architectures.get_architecture.parameters", "architectures.get_architecture.parameters", "architectures.get_architecture.parameters", "AE_DS_train.recon_train", "AE_DS_train.test_with_recon", "train_utils.log"], "function", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.copy_code", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.architectures.get_architecture", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.requires_grad_", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.datasets.get_dataset", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.datasets.get_dataset", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.architectures.get_architecture", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.architectures.get_architecture", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.init_logfile", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.architectures.get_architecture", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.architectures.get_architecture", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.architectures.get_architecture", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.architectures.get_architecture", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.init_logfile", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.log", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.AE_DS_train.train_ae", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.AE_DS_train.test_with_classifier_ae", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.AE_DS_train.test_with_classifier_ae", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.AE_DS_train.train", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.AE_DS_train.test_with_classifier", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.AE_DS_train.test_with_classifier", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.AE_DS_train.recon_train_ae", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.AE_DS_train.test_with_recon_ae", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.log", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.AE_DS_train.recon_train", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.AE_DS_train.test_with_recon", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.log"], ["def", "main", "(", ")", ":", "\n", "    ", "if", "args", ".", "gpu", ":", "\n", "        ", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "args", ".", "gpu", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "outdir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "outdir", ")", "\n", "\n", "# Copy code to output directory", "\n", "", "copy_code", "(", "args", ".", "outdir", ")", "\n", "pin_memory", "=", "(", "args", ".", "dataset", "==", "\"imagenet\"", ")", "\n", "\n", "# --------------------- Dataset Loading ----------------------", "\n", "if", "args", ".", "dataset", "==", "'cifar10'", "or", "args", ".", "dataset", "==", "'stl10'", "or", "args", ".", "dataset", "==", "'mnist'", ":", "\n", "        ", "train_dataset", "=", "get_dataset", "(", "args", ".", "dataset", ",", "'train'", ")", "\n", "test_dataset", "=", "get_dataset", "(", "args", ".", "dataset", ",", "'test'", ")", "\n", "\n", "train_loader", "=", "DataLoader", "(", "train_dataset", ",", "shuffle", "=", "True", ",", "batch_size", "=", "args", ".", "batch", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "pin_memory", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_dataset", ",", "shuffle", "=", "False", ",", "batch_size", "=", "args", ".", "batch", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "pin_memory", ")", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "'restricted_imagenet'", ":", "\n", "        ", "in_path", "=", "'/localscratch2/damondemon/datasets/imagenet'", "\n", "in_info_path", "=", "'/localscratch2/damondemon/datasets/imagenet_info'", "\n", "in_hier", "=", "ImageNetHierarchy", "(", "in_path", ",", "in_info_path", ")", "\n", "\n", "superclass_wnid", "=", "[", "'n02084071'", ",", "'n02120997'", ",", "'n01639765'", ",", "'n01662784'", ",", "'n02401031'", ",", "'n02131653'", ",", "'n02484322'", ",", "\n", "'n01976957'", ",", "'n02159955'", ",", "'n01482330'", "]", "\n", "\n", "class_ranges", ",", "label_map", "=", "in_hier", ".", "get_subclasses", "(", "superclass_wnid", ",", "balanced", "=", "True", ")", "\n", "custom_dataset", "=", "dataset_r", ".", "CustomImageNet", "(", "in_path", ",", "class_ranges", ")", "\n", "train_loader", ",", "test_loader", "=", "custom_dataset", ".", "make_loaders", "(", "workers", "=", "4", ",", "batch_size", "=", "args", ".", "batch", ")", "\n", "\n", "# --------------------- Model Loading -------------------------", "\n", "# a) Denoiser", "\n", "", "if", "args", ".", "pretrained_denoiser", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "pretrained_denoiser", ")", "\n", "assert", "checkpoint", "[", "'arch'", "]", "==", "args", ".", "arch", "\n", "denoiser", "=", "get_architecture", "(", "checkpoint", "[", "'arch'", "]", ",", "args", ".", "dataset", ")", "\n", "denoiser", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "", "else", ":", "\n", "        ", "denoiser", "=", "get_architecture", "(", "args", ".", "arch", ",", "args", ".", "dataset", ")", "\n", "\n", "# b) AutoEncoder", "\n", "", "if", "args", ".", "model_type", "==", "'AE_DS'", ":", "\n", "        ", "if", "args", ".", "pretrained_encoder", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "pretrained_encoder", ")", "\n", "assert", "checkpoint", "[", "'arch'", "]", "==", "args", ".", "encoder_arch", "\n", "encoder", "=", "get_architecture", "(", "checkpoint", "[", "'arch'", "]", ",", "args", ".", "dataset", ")", "\n", "encoder", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "", "else", ":", "\n", "            ", "encoder", "=", "get_architecture", "(", "args", ".", "encoder_arch", ",", "args", ".", "dataset", ")", "\n", "\n", "", "if", "args", ".", "pretrained_decoder", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "pretrained_decoder", ")", "\n", "assert", "checkpoint", "[", "'arch'", "]", "==", "args", ".", "decoder_arch", "\n", "decoder", "=", "get_architecture", "(", "checkpoint", "[", "'arch'", "]", ",", "args", ".", "dataset", ")", "\n", "decoder", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "", "else", ":", "\n", "            ", "decoder", "=", "get_architecture", "(", "args", ".", "decoder_arch", ",", "args", ".", "dataset", ")", "\n", "\n", "# c) Classifier / Reconstructor", "\n", "", "", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "classifier", ")", "\n", "clf", "=", "get_architecture", "(", "checkpoint", "[", "'arch'", "]", ",", "args", ".", "dataset", ")", "\n", "clf", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "clf", ".", "cuda", "(", ")", ".", "eval", "(", ")", "\n", "requires_grad_", "(", "clf", ",", "False", ")", "\n", "\n", "# --------------------- Model to be trained ------------------------", "\n", "if", "args", ".", "optimizer", "==", "'Adam'", ":", "\n", "        ", "if", "args", ".", "train_method", "==", "'part'", ":", "\n", "            ", "optimizer", "=", "Adam", "(", "denoiser", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "", "if", "args", ".", "train_method", "==", "'whole'", ":", "\n", "            ", "optimizer", "=", "Adam", "(", "itertools", ".", "chain", "(", "denoiser", ".", "parameters", "(", ")", ",", "encoder", ".", "parameters", "(", ")", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "", "if", "args", ".", "train_method", "==", "'whole_plus'", ":", "\n", "            ", "optimizer", "=", "Adam", "(", "itertools", ".", "chain", "(", "denoiser", ".", "parameters", "(", ")", ",", "encoder", ".", "parameters", "(", ")", ",", "decoder", ".", "parameters", "(", ")", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "", "", "elif", "args", ".", "optimizer", "==", "'SGD'", ":", "\n", "        ", "if", "args", ".", "train_method", "==", "'part'", ":", "\n", "            ", "optimizer", "=", "SGD", "(", "denoiser", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "", "if", "args", ".", "train_method", "==", "'whole'", ":", "\n", "            ", "optimizer", "=", "SGD", "(", "itertools", ".", "chain", "(", "denoiser", ".", "parameters", "(", ")", ",", "encoder", ".", "parameters", "(", ")", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "", "if", "args", ".", "train_method", "==", "'whole_plus'", ":", "\n", "            ", "optimizer", "=", "SGD", "(", "itertools", ".", "chain", "(", "denoiser", ".", "parameters", "(", ")", ",", "encoder", ".", "parameters", "(", ")", ",", "decoder", ".", "parameters", "(", ")", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "", "", "scheduler", "=", "StepLR", "(", "optimizer", ",", "step_size", "=", "args", ".", "lr_step_size", ",", "gamma", "=", "args", ".", "gamma", ")", "\n", "\n", "# --------------------- Log file initialization ---------------------", "\n", "starting_epoch", "=", "0", "\n", "logfilename", "=", "os", ".", "path", ".", "join", "(", "args", ".", "outdir", ",", "'log.txt'", ")", "\n", "if", "args", ".", "train_objective", "==", "'classification'", ":", "\n", "        ", "init_logfile", "(", "logfilename", ",", "\"epoch\\ttime\\tlr\\ttrainloss\\ttestloss\\ttestAcc\"", ")", "\n", "", "elif", "args", ".", "train_objective", "==", "'reconstruction'", ":", "\n", "        ", "init_logfile", "(", "logfilename", ",", "\n", "\"epoch\\ttime\\tlr\\ttrain_stab_loss\\tClean_TestLoss_NoDenoiser\\tSmoothed_Clean_TestLoss_NoDenoiser\\tClean_TestLoss\\tSmoothed_Clean_TestLoss\\tNoDenoiser_AdvLoss\\tSmoothed_NoDenoiser_AdvLoss\\tAdv_Loss\\tSmoothed_AdvLoss\"", ")", "\n", "\n", "# --------------------- Objective function ---------------------", "\n", "", "if", "args", ".", "train_objective", "==", "'classification'", ":", "\n", "        ", "criterion", "=", "CrossEntropyLoss", "(", "size_average", "=", "None", ",", "reduce", "=", "False", ",", "reduction", "=", "'none'", ")", ".", "cuda", "(", ")", "\n", "", "elif", "args", ".", "train_objective", "==", "'reconstruction'", ":", "\n", "        ", "criterion", "=", "MSELoss", "(", "size_average", "=", "None", ",", "reduce", "=", "None", ",", "reduction", "=", "'none'", ")", ".", "cuda", "(", ")", "\n", "\n", "# --------------------- Start Training -------------------------------", "\n", "", "best_acc", "=", "0", "\n", "for", "epoch", "in", "range", "(", "starting_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "before", "=", "time", ".", "time", "(", ")", "\n", "\n", "# classificaiton / reconstruction", "\n", "if", "args", ".", "train_objective", "==", "'classification'", ":", "\n", "            ", "if", "args", ".", "model_type", "==", "'AE_DS'", ":", "\n", "                ", "train_loss", "=", "train_ae", "(", "train_loader", ",", "encoder", ",", "decoder", ",", "denoiser", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "\n", "args", ".", "noise_sd", ",", "\n", "clf", ")", "\n", "_", ",", "train_acc", "=", "test_with_classifier_ae", "(", "train_loader", ",", "encoder", ",", "decoder", ",", "denoiser", ",", "criterion", ",", "\n", "args", ".", "noise_sd", ",", "\n", "args", ".", "print_freq", ",", "clf", ")", "\n", "test_loss", ",", "test_acc", "=", "test_with_classifier_ae", "(", "test_loader", ",", "encoder", ",", "decoder", ",", "denoiser", ",", "criterion", ",", "\n", "args", ".", "noise_sd", ",", "\n", "args", ".", "print_freq", ",", "clf", ")", "\n", "", "elif", "args", ".", "model_type", "==", "'DS'", ":", "\n", "                ", "train_loss", "=", "train", "(", "train_loader", ",", "denoiser", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ".", "noise_sd", ",", "\n", "clf", ")", "\n", "_", ",", "train_acc", "=", "test_with_classifier", "(", "train_loader", ",", "denoiser", ",", "criterion", ",", "args", ".", "noise_sd", ",", "\n", "args", ".", "print_freq", ",", "clf", ")", "\n", "test_loss", ",", "test_acc", "=", "test_with_classifier", "(", "test_loader", ",", "denoiser", ",", "criterion", ",", "\n", "args", ".", "noise_sd", ",", "\n", "args", ".", "print_freq", ",", "clf", ")", "\n", "", "after", "=", "time", ".", "time", "(", ")", "\n", "\n", "log", "(", "logfilename", ",", "\"{}\\t{:.3}\\t{:.3}\\t{:.3}\\t{:.3}\\t{:.3}\\t{:.3}\"", ".", "format", "(", "\n", "epoch", ",", "after", "-", "before", ",", "\n", "args", ".", "lr", ",", "train_loss", ",", "test_loss", ",", "train_acc", ",", "test_acc", ")", ")", "\n", "\n", "", "elif", "args", ".", "train_objective", "==", "'reconstruction'", ":", "\n", "            ", "if", "args", ".", "model_type", "==", "'AE_DS'", ":", "\n", "                ", "stab_train_loss", "=", "recon_train_ae", "(", "train_loader", ",", "encoder", ",", "decoder", ",", "denoiser", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "\n", "args", ".", "noise_sd", ",", "clf", ")", "\n", "test_no_loss", ",", "test_no_loss_smooth", ",", "test_loss", ",", "test_loss_smooth", ",", "recon_loss", ",", "recon_loss_smooth", ",", "adv_loss", ",", "smooth_loss", "=", "test_with_recon_ae", "(", "\n", "test_loader", ",", "encoder", ",", "decoder", ",", "denoiser", ",", "criterion", ",", "args", ".", "outdir", ",", "args", ".", "noise_sd", ",", "epoch", ",", "\n", "args", ".", "visual_freq", ",", "args", ".", "noise_num", ",", "\n", "args", ".", "num_steps", ",", "args", ".", "epsilon", ",", "args", ".", "print_freq", ",", "clf", ")", "\n", "\n", "log", "(", "logfilename", ",", "\n", "\"{}\\t{:.3}\\t{:.3}\\t{:.3}\\t{:.3}\\t{:.3}\\t{:.3}\\t{:.3}\\t{:.3}\\t{:.3}\\t{:.3}\\t{:.3}\"", ".", "format", "(", "\n", "epoch", ",", "after", "-", "before", ",", "\n", "args", ".", "lr", ",", "stab_train_loss", ",", "test_no_loss", ",", "test_no_loss_smooth", ",", "test_loss", ",", "test_loss_smooth", ",", "\n", "recon_loss", ",", "recon_loss_smooth", ",", "adv_loss", ",", "smooth_loss", ")", ")", "\n", "\n", "", "elif", "args", ".", "model_type", "==", "'DS'", ":", "\n", "                ", "stab_train_loss", "=", "recon_train", "(", "train_loader", ",", "denoiser", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "\n", "args", ".", "noise_sd", ",", "clf", ")", "\n", "test_no_loss", ",", "test_no_loss_smooth", ",", "test_loss", ",", "test_loss_smooth", ",", "recon_loss", ",", "recon_loss_smooth", ",", "adv_loss", ",", "smooth_loss", "=", "test_with_recon", "(", "\n", "test_loader", ",", "denoiser", ",", "criterion", ",", "args", ".", "outdir", ",", "args", ".", "noise_sd", ",", "epoch", ",", "\n", "args", ".", "visual_freq", ",", "args", ".", "noise_num", ",", "\n", "args", ".", "num_steps", ",", "args", ".", "epsilon", ",", "args", ".", "print_freq", ",", "clf", ")", "\n", "\n", "log", "(", "logfilename", ",", "\n", "\"{}\\t{:.3}\\t{:.3}\\t{:.3}\\t{:.3}\\t{:.3}\\t{:.3}\\t{:.3}\\t{:.3}\\t{:.3}\\t{:.3}\\t{:.3}\"", ".", "format", "(", "\n", "epoch", ",", "after", "-", "before", ",", "\n", "args", ".", "lr", ",", "stab_train_loss", ",", "test_no_loss", ",", "test_no_loss_smooth", ",", "test_loss", ",", "test_loss_smooth", ",", "\n", "recon_loss", ",", "recon_loss_smooth", ",", "adv_loss", ",", "smooth_loss", ")", ")", "\n", "\n", "", "", "scheduler", ".", "step", "(", "epoch", ")", "\n", "args", ".", "lr", "=", "scheduler", ".", "get_lr", "(", ")", "[", "0", "]", "\n", "\n", "# -----------------  Save the latest model  -------------------", "\n", "torch", ".", "save", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'arch'", ":", "args", ".", "arch", ",", "\n", "'state_dict'", ":", "denoiser", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "os", ".", "path", ".", "join", "(", "args", ".", "outdir", ",", "'denoiser.pth.tar'", ")", ")", "\n", "\n", "if", "args", ".", "model_type", "==", "'AE_DS'", ":", "\n", "            ", "torch", ".", "save", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'arch'", ":", "args", ".", "encoder_arch", ",", "\n", "'state_dict'", ":", "encoder", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "os", ".", "path", ".", "join", "(", "args", ".", "outdir", ",", "'encoder.pth.tar'", ")", ")", "\n", "\n", "torch", ".", "save", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'arch'", ":", "args", ".", "decoder_arch", ",", "\n", "'state_dict'", ":", "decoder", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "os", ".", "path", ".", "join", "(", "args", ".", "outdir", ",", "'decoder.pth.tar'", ")", ")", "\n", "\n", "# ----------------- Save the best model according to acc -----------------", "\n", "", "if", "test_acc", ">", "best_acc", ":", "\n", "            ", "best_acc", "=", "test_acc", "\n", "", "else", ":", "\n", "            ", "continue", "\n", "\n", "", "torch", ".", "save", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'arch'", ":", "args", ".", "arch", ",", "\n", "'state_dict'", ":", "denoiser", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "os", ".", "path", ".", "join", "(", "args", ".", "outdir", ",", "'best_denoiser.pth.tar'", ")", ")", "\n", "\n", "if", "args", ".", "model_type", "==", "'AE_DS'", ":", "\n", "            ", "torch", ".", "save", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'arch'", ":", "args", ".", "encoder_arch", ",", "\n", "'state_dict'", ":", "encoder", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "os", ".", "path", ".", "join", "(", "args", ".", "outdir", ",", "'best_encoder.pth.tar'", ")", ")", "\n", "\n", "torch", ".", "save", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'arch'", ":", "args", ".", "decoder_arch", ",", "\n", "'state_dict'", ":", "decoder", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "os", ".", "path", ".", "join", "(", "args", ".", "outdir", ",", "'best_decoder.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.AE_DS_train.train": [[318, 433], ["train_utils.AverageMeter", "train_utils.AverageMeter", "train_utils.AverageMeter", "time.time", "denoiser.train", "classifier.eval", "enumerate", "train_utils.AverageMeter.update", "inputs.cuda.cuda", "targets.argmax().detach().clone.cuda", "denoiser", "optimizer.zero_grad", "torch.sum().mean.backward", "optimizer.step", "train_utils.AverageMeter.update", "time.time", "torch.randn_like", "classifier", "criterion", "train_utils.AverageMeter.update", "print", "time.time", "torch.no_grad", "classifier", "targets.argmax().detach().clone.argmax().detach().clone", "torch.sum().mean.item", "inputs.cuda.size", "classifier.requires_grad_", "classifier.retain_grad", "time.time", "classifier.size", "classifier.size", "classifier.size", "classifier.size", "torch.flatten().cuda", "torch.zeros().cuda.detach", "torch.sum().mean", "len", "targets.argmax().detach().clone.argmax().detach", "torch.no_grad", "torch.tensor().cuda", "torch.tensor().cuda", "classifier().argmax().detach().clone", "classifier", "criterion", "criterion.mean", "train_utils.AverageMeter.update", "torch.flatten().cuda", "torch.zeros().cuda", "range", "loss_0.mean.item", "inputs.cuda.size", "torch.normal", "torch.norm().reshape().expand", "torch.div().cuda", "recon_q.view.view", "classifier", "criterion", "torch.tensor", "torch.flatten", "torch.sum", "targets.argmax().detach().clone.argmax", "torch.tensor", "torch.tensor", "classifier().argmax().detach", "torch.flatten", "torch.zeros", "torch.norm().reshape", "torch.div", "classifier().argmax", "torch.tensor.reshape().expand_as", "torch.norm", "classifier", "torch.tensor.reshape"], "function", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.AE_DS_train.train", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.AverageMeter.update", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.vrnet.RBFActivationFunction.backward", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.AverageMeter.update", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.AverageMeter.update", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.requires_grad_", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.AverageMeter.update"], ["", "", "", "def", "train", "(", "loader", ":", "DataLoader", ",", "denoiser", ":", "torch", ".", "nn", ".", "Module", ",", "criterion", ",", "optimizer", ":", "Optimizer", ",", "epoch", ":", "int", ",", "noise_sd", ":", "float", ",", "\n", "classifier", ":", "torch", ".", "nn", ".", "Module", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Function for training denoiser for one epoch\n        :param loader:DataLoader: training dataloader\n        :param denoiser:torch.nn.Module: the denoiser being trained\n        :param criterion: loss function\n        :param optimizer:Optimizer: optimizer used during trainined\n        :param epoch:int: the current epoch (for logging)\n        :param noise_sd:float: the std-dev of the Guassian noise perturbation of the input\n        :param classifier:torch.nn.Module=None: a ``freezed'' classifier attached to the denoiser\n                                                (required classifciation/stability objectives), None for denoising objective\n    \"\"\"", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "# switch to train mode", "\n", "denoiser", ".", "train", "(", ")", "\n", "classifier", ".", "eval", "(", ")", "\n", "\n", "for", "i", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "targets", "=", "targets", ".", "cuda", "(", ")", "\n", "if", "args", ".", "ground_truth", "==", "'original_output'", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "targets", "=", "classifier", "(", "inputs", ")", "\n", "targets", "=", "targets", ".", "argmax", "(", "1", ")", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "\n", "", "", "noise", "=", "torch", ".", "randn_like", "(", "inputs", ",", "device", "=", "'cuda'", ")", "*", "noise_sd", "\n", "recon", "=", "denoiser", "(", "inputs", "+", "noise", ")", "\n", "\n", "if", "args", ".", "optimization_method", "==", "'FO'", ":", "\n", "            ", "recon", "=", "classifier", "(", "recon", ")", "\n", "loss", "=", "criterion", "(", "recon", ",", "targets", ")", "\n", "\n", "# record loss", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "", "elif", "args", ".", "optimization_method", "==", "'ZO'", ":", "\n", "            ", "recon", ".", "requires_grad_", "(", "True", ")", "\n", "recon", ".", "retain_grad", "(", ")", "\n", "\n", "# Obtain the Shape of Inputs (Batch_size x Channel x H x W)", "\n", "batch_size", "=", "recon", ".", "size", "(", ")", "[", "0", "]", "\n", "channel", "=", "recon", ".", "size", "(", ")", "[", "1", "]", "\n", "h", "=", "recon", ".", "size", "(", ")", "[", "2", "]", "\n", "w", "=", "recon", ".", "size", "(", ")", "[", "3", "]", "\n", "d", "=", "channel", "*", "h", "*", "w", "\n", "\n", "# For DS model, only RGE could be exploited for ZO gradient estimation", "\n", "if", "args", ".", "zo_method", "==", "'RGE'", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "m", ",", "sigma", "=", "0", ",", "100", "# mean and standard deviation", "\n", "mu", "=", "torch", ".", "tensor", "(", "args", ".", "mu", ")", ".", "cuda", "(", ")", "\n", "q", "=", "torch", ".", "tensor", "(", "args", ".", "q", ")", ".", "cuda", "(", ")", "\n", "\n", "# Forward Inference (Original)", "\n", "original_pre", "=", "classifier", "(", "inputs", ")", ".", "argmax", "(", "1", ")", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "\n", "recon_pre", "=", "classifier", "(", "recon", ")", "\n", "loss_0", "=", "criterion", "(", "recon_pre", ",", "original_pre", ")", "\n", "\n", "# record original loss", "\n", "loss_0_mean", "=", "loss_0", ".", "mean", "(", ")", "\n", "losses", ".", "update", "(", "loss_0_mean", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "recon_flat_no_grad", "=", "torch", ".", "flatten", "(", "recon", ",", "start_dim", "=", "1", ")", ".", "cuda", "(", ")", "\n", "grad_est", "=", "torch", ".", "zeros", "(", "batch_size", ",", "d", ")", ".", "cuda", "(", ")", "\n", "\n", "# ZO Gradient Estimation", "\n", "for", "k", "in", "range", "(", "args", ".", "q", ")", ":", "\n", "# Obtain a random direction vector", "\n", "                        ", "u", "=", "torch", ".", "normal", "(", "m", ",", "sigma", ",", "size", "=", "(", "batch_size", ",", "d", ")", ")", "\n", "u_norm", "=", "torch", ".", "norm", "(", "u", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ".", "reshape", "(", "batch_size", ",", "1", ")", ".", "expand", "(", "batch_size", ",", "d", ")", "# dim -- careful", "\n", "u", "=", "torch", ".", "div", "(", "u", ",", "u_norm", ")", ".", "cuda", "(", ")", "# (batch_size, d)", "\n", "\n", "# Forward Inference (reconstructed image + random direction vector)", "\n", "recon_q", "=", "recon_flat_no_grad", "+", "mu", "*", "u", "\n", "recon_q", "=", "recon_q", ".", "view", "(", "batch_size", ",", "channel", ",", "h", ",", "w", ")", "\n", "recon_q_pre", "=", "classifier", "(", "recon_q", ")", "\n", "\n", "# Loss Calculation and Gradient Estimation", "\n", "loss_tmp", "=", "criterion", "(", "recon_q_pre", ",", "original_pre", ")", "\n", "loss_diff", "=", "torch", ".", "tensor", "(", "loss_tmp", "-", "loss_0", ")", "\n", "grad_est", "=", "grad_est", "+", "(", "d", "/", "q", ")", "*", "u", "*", "loss_diff", ".", "reshape", "(", "batch_size", ",", "1", ")", ".", "expand_as", "(", "u", ")", "/", "mu", "\n", "\n", "", "", "recon_flat", "=", "torch", ".", "flatten", "(", "recon", ",", "start_dim", "=", "1", ")", ".", "cuda", "(", ")", "\n", "grad_est_no_grad", "=", "grad_est", ".", "detach", "(", ")", "\n", "\n", "# reconstructed image * gradient estimation   <--   g(x) * a", "\n", "loss", "=", "torch", ".", "sum", "(", "recon_flat", "*", "grad_est_no_grad", ",", "dim", "=", "-", "1", ")", ".", "mean", "(", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "print", "(", "'Epoch: [{0}][{1}/{2}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})'", ".", "format", "(", "\n", "epoch", ",", "i", ",", "len", "(", "loader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ",", "loss", "=", "losses", ")", ")", "\n", "\n", "", "", "return", "losses", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.AE_DS_train.test_with_classifier": [[435, 498], ["train_utils.AverageMeter", "train_utils.AverageMeter", "train_utils.AverageMeter", "train_utils.AverageMeter", "train_utils.AverageMeter", "time.time", "classifier.eval", "denoiser.eval", "torch.no_grad", "enumerate", "train_utils.AverageMeter.update", "denoiser.cuda", "targets.cuda.cuda", "classifier", "criterion", "criterion.mean", "train_utils.accuracy", "train_utils.AverageMeter.update", "train_utils.AverageMeter.update", "train_utils.AverageMeter.update", "train_utils.AverageMeter.update", "time.time", "denoiser", "loss.mean.item", "denoiser.size", "acc1.item", "denoiser.size", "acc5.item", "denoiser.size", "print", "time.time", "torch.randn_like", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.AverageMeter.update", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.accuracy", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.AverageMeter.update", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.AverageMeter.update", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.AverageMeter.update", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.AverageMeter.update"], ["", "def", "test_with_classifier", "(", "loader", ":", "DataLoader", ",", "denoiser", ":", "torch", ".", "nn", ".", "Module", ",", "criterion", ",", "noise_sd", ":", "float", ",", "print_freq", ":", "int", ",", "classifier", ":", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"\n    A function to test the classification performance of a denoiser when attached to a given classifier\n        :param loader:DataLoader: test dataloader\n        :param denoiser:torch.nn.Module: the denoiser\n        :param criterion: the loss function (e.g. CE)\n        :param noise_sd:float: the std-dev of the Guassian noise perturbation of the input\n        :param print_freq:int: the frequency of logging\n        :param classifier:torch.nn.Module: the classifier to which the denoiser is attached\n    \"\"\"", "\n", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "# switch to eval mode", "\n", "classifier", ".", "eval", "(", ")", "\n", "if", "denoiser", ":", "\n", "        ", "denoiser", ".", "eval", "(", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "# measure data loading time", "\n", "            ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "targets", "=", "targets", ".", "cuda", "(", ")", "\n", "\n", "# augment inputs with noise", "\n", "inputs", "=", "inputs", "+", "torch", ".", "randn_like", "(", "inputs", ",", "device", "=", "'cuda'", ")", "*", "noise_sd", "\n", "\n", "if", "denoiser", "is", "not", "None", ":", "\n", "                ", "inputs", "=", "denoiser", "(", "inputs", ")", "\n", "# compute output", "\n", "", "outputs", "=", "classifier", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "loss_mean", "=", "loss", ".", "mean", "(", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "outputs", ",", "targets", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss_mean", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "print_freq", "==", "0", ":", "\n", "                ", "log", "=", "'Test: [{0}/{1}]\\t'", "' \\\n                '", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "' \\\n                '", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "' \\\n                '", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "' \\\n                '", "'Acc@1 {top1.val:.3f} ({top1.avg:.3f})\\t'", "' \\\n                '", "'Acc@5 {top5.val:.3f} ({top5.avg:.3f})\\n'", ".", "format", "(", "\n", "i", ",", "len", "(", "loader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ",", "loss", "=", "losses", ",", "top1", "=", "top1", ",", "top5", "=", "top5", ")", "\n", "\n", "print", "(", "log", ")", "\n", "", "", "return", "(", "losses", ".", "avg", ",", "top1", ".", "avg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.AE_DS_train.train_ae": [[500, 717], ["train_utils.AverageMeter", "train_utils.AverageMeter", "train_utils.AverageMeter", "time.time", "denoiser.train", "enumerate", "encoder.eval", "decoder.eval", "encoder.train", "decoder.eval", "encoder.train", "decoder.train", "classifier.eval", "train_utils.AverageMeter.update", "inputs.cuda.cuda", "targets.view().repeat().view.cuda", "denoiser", "encoder", "optimizer.zero_grad", "torch.sum().mean.backward", "optimizer.step", "train_utils.AverageMeter.update", "time.time", "torch.randn_like", "decoder", "classifier", "criterion", "train_utils.AverageMeter.update", "print", "time.time", "torch.no_grad", "classifier", "targets.view().repeat().view.argmax().detach().clone", "torch.sum().mean.item", "inputs.cuda.size", "classifier.requires_grad_", "classifier.retain_grad", "time.time", "classifier.size", "classifier.size", "classifier.size", "classifier.size", "torch.flatten().cuda", "grad_est.view().mean().view.detach", "torch.sum().mean", "len", "targets.view().repeat().view.argmax().detach", "torch.no_grad", "torch.tensor().cuda", "torch.tensor().cuda", "classifier().argmax().detach().clone", "classifier", "criterion", "criterion.mean", "train_utils.AverageMeter.update", "torch.flatten().cuda", "torch.zeros().cuda", "range", "torch.flatten().cuda", "grad_est.view().mean().view.detach", "torch.sum().mean", "decoder", "loss_0.mean.item", "inputs.cuda.size", "torch.normal", "torch.norm().reshape().expand", "torch.div().cuda", "recon.repeat().view.view", "classifier", "criterion", "torch.tensor", "torch.flatten", "torch.sum", "torch.no_grad", "torch.tensor().cuda", "torch.tensor().cuda", "classifier().argmax().detach().clone", "classifier", "criterion", "criterion.mean", "train_utils.AverageMeter.update", "torch.flatten().cuda", "torch.zeros().cuda", "range", "torch.zeros().cuda", "range", "u_flat.repeat().view.repeat().view", "u_flat.repeat().view.view", "torch.flatten().cuda", "grad_est.view().mean().view.detach", "torch.sum().mean", "targets.view().repeat().view.argmax", "torch.tensor", "torch.tensor", "classifier().argmax().detach", "torch.flatten", "torch.zeros", "decoder", "decoder", "loss_0.mean.item", "inputs.cuda.size", "torch.zeros().cuda", "recon_q_plus.view.view", "recon_q_minus.view.view", "classifier", "classifier", "criterion", "criterion", "torch.tensor", "torch.flatten", "torch.sum", "torch.no_grad", "torch.tensor().cuda", "classifier", "criterion", "criterion.mean", "train_utils.AverageMeter.update", "targets.view().repeat().view.view().repeat().view", "classifier.repeat().view", "classifier", "classifier", "criterion", "criterion", "torch.tensor", "grad_est.view().mean().view.view().mean().view", "torch.norm().reshape", "torch.div", "torch.tensor", "torch.tensor", "classifier().argmax().detach", "torch.flatten", "torch.zeros", "decoder", "decoder", "torch.zeros", "u_flat.repeat().view.repeat", "decoder", "loss_0.mean.item", "inputs.cuda.size", "decoder", "decoder", "torch.flatten", "torch.sum", "classifier().argmax", "torch.tensor.reshape().expand_as", "torch.zeros", "torch.tensor", "targets.view().repeat().view.view().repeat", "classifier.repeat", "torch.tensor.reshape().expand_as", "grad_est.view().mean().view.view().mean", "torch.norm", "classifier().argmax", "torch.tensor.reshape().expand_as", "classifier", "torch.tensor.reshape", "targets.view().repeat().view.view", "torch.tensor.reshape", "grad_est.view().mean().view.view", "classifier", "torch.tensor.reshape"], "function", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.AE_DS_train.train", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.AE_DS_train.train", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.AE_DS_train.train", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.AE_DS_train.train", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.AverageMeter.update", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.vrnet.RBFActivationFunction.backward", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.AverageMeter.update", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.AverageMeter.update", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.requires_grad_", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.AverageMeter.update", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.AverageMeter.update", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.AverageMeter.update"], ["", "", "def", "train_ae", "(", "loader", ":", "DataLoader", ",", "encoder", ":", "torch", ".", "nn", ".", "Module", ",", "decoder", ":", "torch", ".", "nn", ".", "Module", ",", "denoiser", ":", "torch", ".", "nn", ".", "Module", ",", "criterion", ",", "\n", "optimizer", ":", "Optimizer", ",", "epoch", ":", "int", ",", "noise_sd", ":", "float", ",", "\n", "classifier", ":", "torch", ".", "nn", ".", "Module", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Function for training denoiser for one epoch\n        :param loader:DataLoader: training dataloader\n        :param denoiser:torch.nn.Module: the denoiser being trained\n        :param criterion: loss function\n        :param optimizer:Optimizer: optimizer used during trainined\n        :param epoch:int: the current epoch (for logging)\n        :param noise_sd:float: the std-dev of the Guassian noise perturbation of the input\n        :param classifier:torch.nn.Module=None: a ``freezed'' classifier attached to the denoiser\n                                                (required classifciation/stability objectives), None for denoising objective\n    \"\"\"", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "# switch to train mode", "\n", "denoiser", ".", "train", "(", ")", "\n", "\n", "if", "args", ".", "train_method", "==", "'part'", ":", "\n", "        ", "encoder", ".", "eval", "(", ")", "\n", "decoder", ".", "eval", "(", ")", "\n", "", "if", "args", ".", "train_method", "==", "'whole'", ":", "\n", "        ", "encoder", ".", "train", "(", ")", "\n", "decoder", ".", "eval", "(", ")", "\n", "", "if", "args", ".", "train_method", "==", "'whole_plus'", ":", "\n", "        ", "encoder", ".", "train", "(", ")", "\n", "decoder", ".", "train", "(", ")", "\n", "\n", "", "if", "classifier", ":", "\n", "        ", "classifier", ".", "eval", "(", ")", "\n", "\n", "", "for", "i", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "targets", "=", "targets", ".", "cuda", "(", ")", "\n", "if", "args", ".", "ground_truth", "==", "'original_output'", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "targets", "=", "classifier", "(", "inputs", ")", "\n", "targets", "=", "targets", ".", "argmax", "(", "1", ")", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "\n", "# augment inputs with noise", "\n", "", "", "noise", "=", "torch", ".", "randn_like", "(", "inputs", ",", "device", "=", "'cuda'", ")", "*", "noise_sd", "\n", "\n", "recon", "=", "denoiser", "(", "inputs", "+", "noise", ")", "\n", "recon", "=", "encoder", "(", "recon", ")", "\n", "\n", "if", "args", ".", "optimization_method", "==", "'FO'", ":", "\n", "            ", "recon", "=", "decoder", "(", "recon", ")", "\n", "recon", "=", "classifier", "(", "recon", ")", "\n", "loss", "=", "criterion", "(", "recon", ",", "targets", ")", "\n", "\n", "# record loss", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "", "elif", "args", ".", "optimization_method", "==", "'ZO'", ":", "\n", "            ", "recon", ".", "requires_grad_", "(", "True", ")", "\n", "recon", ".", "retain_grad", "(", ")", "\n", "\n", "# Obtain the Shape of Inputs (Batch_size x Channel x H x W)", "\n", "batch_size", "=", "recon", ".", "size", "(", ")", "[", "0", "]", "\n", "channel", "=", "recon", ".", "size", "(", ")", "[", "1", "]", "\n", "h", "=", "recon", ".", "size", "(", ")", "[", "2", "]", "\n", "w", "=", "recon", ".", "size", "(", ")", "[", "3", "]", "\n", "d", "=", "channel", "*", "h", "*", "w", "\n", "\n", "if", "args", ".", "zo_method", "==", "'RGE'", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "m", ",", "sigma", "=", "0", ",", "100", "# mean and standard deviation", "\n", "mu", "=", "torch", ".", "tensor", "(", "args", ".", "mu", ")", ".", "cuda", "(", ")", "\n", "q", "=", "torch", ".", "tensor", "(", "args", ".", "q", ")", ".", "cuda", "(", ")", "\n", "\n", "# Forward Inference (Original)", "\n", "original_pre", "=", "classifier", "(", "inputs", ")", ".", "argmax", "(", "1", ")", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "\n", "recon_pre", "=", "classifier", "(", "decoder", "(", "recon", ")", ")", "\n", "loss_0", "=", "criterion", "(", "recon_pre", ",", "original_pre", ")", "\n", "\n", "# record original loss", "\n", "loss_0_mean", "=", "loss_0", ".", "mean", "(", ")", "\n", "losses", ".", "update", "(", "loss_0_mean", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "recon_flat_no_grad", "=", "torch", ".", "flatten", "(", "recon", ",", "start_dim", "=", "1", ")", ".", "cuda", "(", ")", "\n", "grad_est", "=", "torch", ".", "zeros", "(", "batch_size", ",", "d", ")", ".", "cuda", "(", ")", "\n", "\n", "# ZO Gradient Estimation", "\n", "for", "k", "in", "range", "(", "args", ".", "q", ")", ":", "\n", "# Obtain a random direction vector", "\n", "                        ", "u", "=", "torch", ".", "normal", "(", "m", ",", "sigma", ",", "size", "=", "(", "batch_size", ",", "d", ")", ")", "\n", "u_norm", "=", "torch", ".", "norm", "(", "u", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ".", "reshape", "(", "batch_size", ",", "1", ")", ".", "expand", "(", "batch_size", ",", "d", ")", "# dim -- careful", "\n", "u", "=", "torch", ".", "div", "(", "u", ",", "u_norm", ")", ".", "cuda", "(", ")", "# (batch_size, d)", "\n", "\n", "# Forward Inference (reconstructed image + random direction vector)", "\n", "recon_q", "=", "recon_flat_no_grad", "+", "mu", "*", "u", "\n", "recon_q", "=", "recon_q", ".", "view", "(", "batch_size", ",", "channel", ",", "h", ",", "w", ")", "\n", "recon_q_pre", "=", "classifier", "(", "decoder", "(", "recon_q", ")", ")", "\n", "\n", "# Loss Calculation and Gradient Estimation", "\n", "loss_tmp", "=", "criterion", "(", "recon_q_pre", ",", "original_pre", ")", "\n", "loss_diff", "=", "torch", ".", "tensor", "(", "loss_tmp", "-", "loss_0", ")", "\n", "grad_est", "=", "grad_est", "+", "(", "d", "/", "q", ")", "*", "u", "*", "loss_diff", ".", "reshape", "(", "batch_size", ",", "1", ")", ".", "expand_as", "(", "u", ")", "/", "mu", "\n", "\n", "", "", "recon_flat", "=", "torch", ".", "flatten", "(", "recon", ",", "start_dim", "=", "1", ")", ".", "cuda", "(", ")", "\n", "grad_est_no_grad", "=", "grad_est", ".", "detach", "(", ")", "\n", "\n", "# reconstructed image * gradient estimation   <--   g(x) * a", "\n", "loss", "=", "torch", ".", "sum", "(", "recon_flat", "*", "grad_est_no_grad", ",", "dim", "=", "-", "1", ")", ".", "mean", "(", ")", "\n", "\n", "", "elif", "args", ".", "zo_method", "==", "'CGE'", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "mu", "=", "torch", ".", "tensor", "(", "args", ".", "mu", ")", ".", "cuda", "(", ")", "\n", "q", "=", "torch", ".", "tensor", "(", "args", ".", "q", ")", ".", "cuda", "(", ")", "\n", "\n", "# Forward Inference (Original)", "\n", "original_pre", "=", "classifier", "(", "inputs", ")", ".", "argmax", "(", "1", ")", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "\n", "recon_pre", "=", "classifier", "(", "decoder", "(", "recon", ")", ")", "\n", "loss_0", "=", "criterion", "(", "recon_pre", ",", "original_pre", ")", "\n", "\n", "# record original loss", "\n", "loss_0_mean", "=", "loss_0", ".", "mean", "(", ")", "\n", "losses", ".", "update", "(", "loss_0_mean", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "recon_flat_no_grad", "=", "torch", ".", "flatten", "(", "recon", ",", "start_dim", "=", "1", ")", ".", "cuda", "(", ")", "\n", "grad_est", "=", "torch", ".", "zeros", "(", "batch_size", ",", "d", ")", ".", "cuda", "(", ")", "\n", "\n", "# ZO Gradient Estimation", "\n", "for", "k", "in", "range", "(", "d", ")", ":", "\n", "# Obtain a direction vector (1-0)", "\n", "                        ", "u", "=", "torch", ".", "zeros", "(", "batch_size", ",", "d", ")", ".", "cuda", "(", ")", "\n", "u", "[", ":", ",", "k", "]", "=", "1", "\n", "\n", "# Forward Inference (reconstructed image + random direction vector)", "\n", "recon_q_plus", "=", "recon_flat_no_grad", "+", "mu", "*", "u", "\n", "recon_q_minus", "=", "recon_flat_no_grad", "-", "mu", "*", "u", "\n", "\n", "recon_q_plus", "=", "recon_q_plus", ".", "view", "(", "batch_size", ",", "channel", ",", "h", ",", "w", ")", "\n", "recon_q_minus", "=", "recon_q_minus", ".", "view", "(", "batch_size", ",", "channel", ",", "h", ",", "w", ")", "\n", "recon_q_pre_plus", "=", "classifier", "(", "decoder", "(", "recon_q_plus", ")", ")", "\n", "recon_q_pre_minus", "=", "classifier", "(", "decoder", "(", "recon_q_minus", ")", ")", "\n", "\n", "# Loss Calculation and Gradient Estimation", "\n", "loss_tmp_plus", "=", "criterion", "(", "recon_q_pre_plus", ",", "original_pre", ")", "\n", "loss_tmp_minus", "=", "criterion", "(", "recon_q_pre_minus", ",", "original_pre", ")", "\n", "\n", "loss_diff", "=", "torch", ".", "tensor", "(", "loss_tmp_plus", "-", "loss_tmp_minus", ")", "\n", "grad_est", "=", "grad_est", "+", "u", "*", "loss_diff", ".", "reshape", "(", "batch_size", ",", "1", ")", ".", "expand_as", "(", "u", ")", "/", "(", "2", "*", "mu", ")", "\n", "\n", "", "", "recon_flat", "=", "torch", ".", "flatten", "(", "recon", ",", "start_dim", "=", "1", ")", ".", "cuda", "(", ")", "\n", "grad_est_no_grad", "=", "grad_est", ".", "detach", "(", ")", "\n", "\n", "# reconstructed image * gradient estimation   <--   g(x) * a", "\n", "loss", "=", "torch", ".", "sum", "(", "recon_flat", "*", "grad_est_no_grad", ",", "dim", "=", "-", "1", ")", ".", "mean", "(", ")", "\n", "\n", "", "elif", "args", ".", "zo_method", "==", "'CGE_sim'", ":", "\n", "# Generate Coordinate-wise Query Matrix", "\n", "                ", "u_flat", "=", "torch", ".", "zeros", "(", "1", ",", "args", ".", "q", ",", "d", ")", ".", "cuda", "(", ")", "\n", "for", "k", "in", "range", "(", "d", ")", ":", "\n", "                    ", "u_flat", "[", ":", ",", "k", ",", "k", "]", "=", "1", "\n", "", "u_flat", "=", "u_flat", ".", "repeat", "(", "1", ",", "batch_size", ",", "1", ")", ".", "view", "(", "batch_size", "*", "args", ".", "q", ",", "d", ")", "\n", "u", "=", "u_flat", ".", "view", "(", "-", "1", ",", "channel", ",", "h", ",", "w", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "mu", "=", "torch", ".", "tensor", "(", "args", ".", "mu", ")", ".", "cuda", "(", ")", "\n", "\n", "recon_pre", "=", "classifier", "(", "decoder", "(", "recon", ")", ")", "# (batch_size, 10)", "\n", "\n", "loss_0", "=", "criterion", "(", "recon_pre", ",", "targets", ")", "# (batch_size )", "\n", "loss_0_mean", "=", "loss_0", ".", "mean", "(", ")", "\n", "losses", ".", "update", "(", "loss_0_mean", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "# Repeat q times", "\n", "targets", "=", "targets", ".", "view", "(", "batch_size", ",", "1", ")", ".", "repeat", "(", "1", ",", "args", ".", "q", ")", ".", "view", "(", "batch_size", "*", "args", ".", "q", ")", "# (batch_size * q, )", "\n", "\n", "recon_q", "=", "recon", ".", "repeat", "(", "(", "1", ",", "args", ".", "q", ",", "1", ",", "1", ")", ")", ".", "view", "(", "-", "1", ",", "channel", ",", "h", ",", "w", ")", "\n", "recon_q_plus", "=", "recon_q", "+", "mu", "*", "u", "\n", "recon_q_minus", "=", "recon_q", "-", "mu", "*", "u", "\n", "\n", "# Black-Box Query", "\n", "recon_q_pre_plus", "=", "classifier", "(", "decoder", "(", "recon_q_plus", ")", ")", "\n", "recon_q_pre_minus", "=", "classifier", "(", "decoder", "(", "recon_q_minus", ")", ")", "\n", "loss_tmp_plus", "=", "criterion", "(", "recon_q_pre_plus", ",", "targets", ")", "\n", "loss_tmp_minus", "=", "criterion", "(", "recon_q_pre_minus", ",", "targets", ")", "\n", "\n", "loss_diff", "=", "torch", ".", "tensor", "(", "loss_tmp_plus", "-", "loss_tmp_minus", ")", "\n", "grad_est", "=", "u_flat", "*", "loss_diff", ".", "reshape", "(", "batch_size", "*", "args", ".", "q", ",", "1", ")", ".", "expand_as", "(", "u_flat", ")", "/", "(", "2", "*", "mu", ")", "\n", "grad_est", "=", "grad_est", ".", "view", "(", "batch_size", ",", "args", ".", "q", ",", "d", ")", ".", "mean", "(", "1", ",", "keepdim", "=", "True", ")", ".", "view", "(", "batch_size", ",", "d", ")", "\n", "\n", "", "recon_flat", "=", "torch", ".", "flatten", "(", "recon", ",", "start_dim", "=", "1", ")", ".", "cuda", "(", ")", "\n", "grad_est_no_grad", "=", "grad_est", ".", "detach", "(", ")", "\n", "\n", "# reconstructed image * gradient estimation   <--   g(x) * a", "\n", "loss", "=", "torch", ".", "sum", "(", "recon_flat", "*", "grad_est_no_grad", ",", "dim", "=", "-", "1", ")", ".", "mean", "(", ")", "# l_mean", "\n", "\n", "# compute gradient and do SGD step", "\n", "", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "print", "(", "'Epoch: [{0}][{1}/{2}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})'", ".", "format", "(", "\n", "epoch", ",", "i", ",", "len", "(", "loader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ",", "loss", "=", "losses", ")", ")", "\n", "\n", "", "", "return", "losses", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.AE_DS_train.test_with_classifier_ae": [[719, 787], ["train_utils.AverageMeter", "train_utils.AverageMeter", "train_utils.AverageMeter", "train_utils.AverageMeter", "train_utils.AverageMeter", "time.time", "classifier.eval", "encoder.eval", "decoder.eval", "denoiser.eval", "torch.no_grad", "enumerate", "train_utils.AverageMeter.update", "denoiser.cuda", "targets.cuda.cuda", "encoder", "decoder", "classifier", "criterion", "criterion.mean", "train_utils.accuracy", "train_utils.AverageMeter.update", "train_utils.AverageMeter.update", "train_utils.AverageMeter.update", "train_utils.AverageMeter.update", "time.time", "denoiser", "loss.mean.item", "denoiser.size", "acc1.item", "denoiser.size", "acc5.item", "denoiser.size", "print", "time.time", "torch.randn_like", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.AverageMeter.update", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.accuracy", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.AverageMeter.update", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.AverageMeter.update", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.AverageMeter.update", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.AverageMeter.update"], ["", "def", "test_with_classifier_ae", "(", "loader", ":", "DataLoader", ",", "encoder", ":", "torch", ".", "nn", ".", "Module", ",", "decoder", ":", "torch", ".", "nn", ".", "Module", ",", "denoiser", ":", "torch", ".", "nn", ".", "Module", ",", "criterion", ",", "noise_sd", ":", "float", ",", "print_freq", ":", "int", ",", "classifier", ":", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"\n    A function to test the classification performance of a denoiser when attached to a given classifier\n        :param loader:DataLoader: test dataloader\n        :param denoiser:torch.nn.Module: the denoiser\n        :param criterion: the loss function (e.g. CE)\n        :param noise_sd:float: the std-dev of the Guassian noise perturbation of the input\n        :param print_freq:int: the frequency of logging\n        :param classifier:torch.nn.Module: the classifier to which the denoiser is attached\n    \"\"\"", "\n", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "# switch to eval mode", "\n", "classifier", ".", "eval", "(", ")", "\n", "encoder", ".", "eval", "(", ")", "\n", "decoder", ".", "eval", "(", ")", "\n", "if", "denoiser", ":", "\n", "        ", "denoiser", ".", "eval", "(", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "# measure data loading time", "\n", "            ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "targets", "=", "targets", ".", "cuda", "(", ")", "\n", "\n", "# augment inputs with noise", "\n", "inputs", "=", "inputs", "+", "torch", ".", "randn_like", "(", "inputs", ",", "device", "=", "'cuda'", ")", "*", "noise_sd", "\n", "\n", "if", "denoiser", "is", "not", "None", ":", "\n", "                ", "inputs", "=", "denoiser", "(", "inputs", ")", "\n", "# compute output", "\n", "", "outputs", "=", "encoder", "(", "inputs", ")", "\n", "outputs", "=", "decoder", "(", "outputs", ")", "\n", "outputs", "=", "classifier", "(", "outputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "loss_mean", "=", "loss", ".", "mean", "(", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "outputs", ",", "targets", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss_mean", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "print_freq", "==", "0", ":", "\n", "                ", "log", "=", "'Test: [{0}/{1}]\\t'", "' \\\n                '", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "' \\\n                '", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "' \\\n                '", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "' \\\n                '", "'Acc@1 {top1.val:.3f} ({top1.avg:.3f})\\t'", "' \\\n                '", "'Acc@5 {top5.val:.3f} ({top5.avg:.3f})\\n'", ".", "format", "(", "\n", "i", ",", "len", "(", "loader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ",", "loss", "=", "losses", ",", "top1", "=", "top1", ",", "top5", "=", "top5", ")", "\n", "\n", "print", "(", "log", ")", "\n", "\n", "", "", "return", "(", "losses", ".", "avg", ",", "top1", ".", "avg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.AE_DS_train.recon_train": [[789, 931], ["torch.tensor().cuda", "torch.tensor().cuda", "torch.manual_seed", "torch.cuda.manual_seed_all", "train_utils.AverageMeter", "train_utils.AverageMeter", "train_utils.AverageMeter", "time.time", "denoiser.train", "enumerate", "recon_net.eval", "train_utils.AverageMeter.update", "img_original.cuda.cuda", "img_original.cuda.view().cuda", "torch.mm", "torch.mm", "img.float.view", "img.float.float", "denoiser", "train_utils.AverageMeter.update", "time.time", "torch.tensor", "torch.tensor", "img_original.cuda.size", "img_original.cuda.size", "img_original.cuda.size", "img_original.cuda.size", "train_utils.measurement", "print", "print", "train_utils.measurement.t", "torch.randn_like", "recon_net", "criterion", "criterion.mean", "train_utils.AverageMeter.update", "optimizer.zero_grad", "stab_loss.mean.backward", "optimizer.step", "print", "time.time", "img_original.cuda.view", "stab_loss.mean.item", "img_original.cuda.size", "recon_net.requires_grad_", "recon_net.retain_grad", "torch.flatten().cuda", "torch.zeros().cuda.detach", "torch.sum().mean", "optimizer.zero_grad", "torch.sum().mean.backward", "optimizer.step", "time.time", "len", "torch.no_grad", "torch.tensor().cuda", "torch.tensor().cuda", "recon_net", "recon_net", "criterion", "criterion.mean", "train_utils.AverageMeter.update", "torch.flatten().cuda", "torch.zeros().cuda", "range", "loss_0.mean.item", "img_original.cuda.size", "torch.zeros().cuda", "recon_q_plus.view.view", "recon_q_minus.view.view", "recon_net", "recon_net", "criterion", "criterion", "torch.tensor", "loss_diff.mean().mean.mean().mean", "torch.flatten", "torch.sum", "torch.tensor", "torch.tensor", "torch.flatten", "torch.zeros", "torch.zeros", "loss_diff.mean().mean.mean", "loss_diff.mean().mean.reshape().expand_as", "loss_diff.mean().mean.reshape"], "function", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.AE_DS_train.train", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.AverageMeter.update", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.AverageMeter.update", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.measurement", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.AverageMeter.update", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.vrnet.RBFActivationFunction.backward", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.requires_grad_", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.vrnet.RBFActivationFunction.backward", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.AverageMeter.update"], ["", "", "def", "recon_train", "(", "loader", ":", "DataLoader", ",", "denoiser", ":", "torch", ".", "nn", ".", "Module", ",", "criterion", ",", "optimizer", ":", "Optimizer", ",", "epoch", ":", "int", ",", "noise_sd", ":", "float", ",", "\n", "recon_net", ":", "torch", ".", "nn", ".", "Module", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Function for training denoiser for one epoch\n        :param loader:DataLoader: training dataloader\n        :param denoiser:torch.nn.Module: the denoiser being trained\n        :param criterion: loss function\n        :param optimizer:Optimizer: optimizer used during trainined\n        :param epoch:int: the current epoch (for logging)\n        :param noise_sd:float: the std-dev of the Guassian noise perturbation of the input\n        :param classifier:torch.nn.Module=None: a ``freezed'' classifier attached to the denoiser\n                                                (required classifciation/stability objectives), None for denoising objective\n    \"\"\"", "\n", "n_measurement", "=", "args", ".", "measurement", "\n", "mm_min", "=", "torch", ".", "tensor", "(", "args", ".", "data_min", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "mm_max", "=", "torch", ".", "tensor", "(", "args", ".", "data_max", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "mm_dis", "=", "mm_max", "-", "mm_min", "\n", "\n", "torch", ".", "manual_seed", "(", "0", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "0", ")", "\n", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "# switch to train mode", "\n", "denoiser", ".", "train", "(", ")", "\n", "if", "recon_net", ":", "\n", "        ", "recon_net", ".", "eval", "(", ")", "\n", "\n", "", "for", "i", ",", "(", "img_original", ",", "_", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "# Obtain the Shape of Inputs (Batch_size x Channel x H x W)", "\n", "batch_size", "=", "img_original", ".", "size", "(", ")", "[", "0", "]", "\n", "channel", "=", "img_original", ".", "size", "(", ")", "[", "1", "]", "\n", "h", "=", "img_original", ".", "size", "(", ")", "[", "2", "]", "\n", "w", "=", "img_original", ".", "size", "(", ")", "[", "3", "]", "\n", "d", "=", "channel", "*", "h", "*", "w", "\n", "\n", "img_original", "=", "img_original", ".", "cuda", "(", ")", "# input x (batch,  channel, h, w)", "\n", "img", "=", "img_original", ".", "view", "(", "batch_size", ",", "d", ")", ".", "cuda", "(", ")", "\n", "\n", "if", "i", "==", "0", ":", "\n", "            ", "a", "=", "measurement", "(", "n_measurement", ",", "d", ")", "# Measurement Matrix", "\n", "print", "(", "\"-----------------------training--------------------\"", ")", "\n", "print", "(", "a", "[", "0", ",", ":", "]", ")", "\n", "\n", "", "img", "=", "torch", ".", "mm", "(", "img", ",", "a", ")", "# y = A^T x", "\n", "img", "=", "torch", ".", "mm", "(", "img", ",", "a", ".", "t", "(", ")", ")", "\n", "img", "=", "img", ".", "view", "(", "batch_size", ",", "channel", ",", "h", ",", "w", ")", "\n", "img", "=", "img", ".", "float", "(", ")", "\n", "img", "=", "(", "img", "-", "mm_min", ")", "/", "mm_dis", "\n", "\n", "#augment inputs with noise", "\n", "noise", "=", "torch", ".", "randn_like", "(", "img", ",", "device", "=", "'cuda'", ")", "*", "noise_sd", "\n", "recon", "=", "denoiser", "(", "img", "+", "noise", ")", "\n", "\n", "if", "args", ".", "optimization_method", "==", "'FO'", ":", "\n", "            ", "recon", "=", "recon_net", "(", "recon", ")", "\n", "stab_loss", "=", "criterion", "(", "recon", ",", "img_original", ")", "\n", "\n", "# record original loss", "\n", "stab_loss_mean", "=", "stab_loss", ".", "mean", "(", ")", "\n", "losses", ".", "update", "(", "stab_loss_mean", ".", "item", "(", ")", ",", "img_original", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "stab_loss_mean", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "elif", "args", ".", "optimization_method", "==", "'ZO'", ":", "\n", "            ", "recon", ".", "requires_grad_", "(", "True", ")", "\n", "recon", ".", "retain_grad", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "mu", "=", "torch", ".", "tensor", "(", "args", ".", "mu", ")", ".", "cuda", "(", ")", "\n", "q", "=", "torch", ".", "tensor", "(", "args", ".", "q", ")", ".", "cuda", "(", ")", "\n", "\n", "# Forward Inference (Original)", "\n", "original_recon", "=", "recon_net", "(", "img", ")", "\n", "\n", "recon_test", "=", "recon_net", "(", "recon", ")", "\n", "loss_0", "=", "criterion", "(", "recon_test", ",", "original_recon", ")", "\n", "# record original loss", "\n", "loss_0_mean", "=", "loss_0", ".", "mean", "(", ")", "\n", "losses", ".", "update", "(", "loss_0_mean", ".", "item", "(", ")", ",", "img_original", ".", "size", "(", "0", ")", ")", "\n", "\n", "recon_flat_no_grad", "=", "torch", ".", "flatten", "(", "recon", ",", "start_dim", "=", "1", ")", ".", "cuda", "(", ")", "\n", "grad_est", "=", "torch", ".", "zeros", "(", "batch_size", ",", "d", ")", ".", "cuda", "(", ")", "\n", "\n", "# ZO Gradient Estimation", "\n", "for", "k", "in", "range", "(", "d", ")", ":", "\n", "# Obtain a direction vector (1-0)", "\n", "                    ", "u", "=", "torch", ".", "zeros", "(", "batch_size", ",", "d", ")", ".", "cuda", "(", ")", "\n", "u", "[", ":", ",", "k", "]", "=", "1", "\n", "\n", "# Forward Inference (reconstructed image + random direction vector)", "\n", "recon_q_plus", "=", "recon_flat_no_grad", "+", "mu", "*", "u", "\n", "recon_q_minus", "=", "recon_flat_no_grad", "-", "mu", "*", "u", "\n", "\n", "recon_q_plus", "=", "recon_q_plus", ".", "view", "(", "batch_size", ",", "channel", ",", "h", ",", "w", ")", "\n", "recon_q_minus", "=", "recon_q_minus", ".", "view", "(", "batch_size", ",", "channel", ",", "h", ",", "w", ")", "\n", "recon_q_pre_plus", "=", "recon_net", "(", "recon_q_plus", ")", "\n", "recon_q_pre_minus", "=", "recon_net", "(", "recon_q_minus", ")", "\n", "\n", "# Loss Calculation and Gradient Estimation", "\n", "loss_tmp_plus", "=", "criterion", "(", "recon_q_pre_plus", ",", "original_recon", ")", "\n", "loss_tmp_minus", "=", "criterion", "(", "recon_q_pre_minus", ",", "original_recon", ")", "\n", "\n", "loss_diff", "=", "torch", ".", "tensor", "(", "loss_tmp_plus", "-", "loss_tmp_minus", ")", "\n", "loss_diff", "=", "loss_diff", ".", "mean", "(", "3", ",", "keepdim", "=", "True", ")", ".", "mean", "(", "2", ",", "keepdim", "=", "True", ")", "\n", "grad_est", "=", "grad_est", "+", "u", "*", "loss_diff", ".", "reshape", "(", "batch_size", ",", "1", ")", ".", "expand_as", "(", "u", ")", "/", "(", "2", "*", "mu", ")", "\n", "\n", "", "", "recon_flat", "=", "torch", ".", "flatten", "(", "recon", ",", "start_dim", "=", "1", ")", ".", "cuda", "(", ")", "\n", "grad_est_no_grad", "=", "grad_est", ".", "detach", "(", ")", "\n", "\n", "# reconstructed image * gradient estimation   <--   g(x) * a", "\n", "loss", "=", "torch", ".", "sum", "(", "recon_flat", "*", "grad_est_no_grad", ",", "dim", "=", "-", "1", ")", ".", "mean", "(", ")", "# l_mean", "\n", "# compute gradient and do step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "log", "=", "'Epoch: [{0}][{1}/{2}]\\t'", "' \\\n            '", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "' \\\n            '", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "' \\\n            '", "'Stab_Loss {stab_loss.val:.4f} ({stab_loss.avg:.4f})'", "'\\n'", ".", "format", "(", "\n", "epoch", ",", "i", ",", "len", "(", "loader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ",", "stab_loss", "=", "losses", ")", "\n", "\n", "print", "(", "log", ")", "\n", "\n", "", "", "return", "losses", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.AE_DS_train.test_with_recon": [[933, 1156], ["recon_net.eval", "torch.manual_seed", "torch.cuda.manual_seed_all", "train_utils.AverageMeter", "train_utils.AverageMeter", "train_utils.AverageMeter", "train_utils.AverageMeter", "train_utils.AverageMeter", "train_utils.AverageMeter", "train_utils.AverageMeter", "train_utils.AverageMeter", "train_utils.AverageMeter", "train_utils.AverageMeter", "time.time", "torch.tensor().cuda", "torch.tensor().cuda", "recon_attacks.recon_PGD_L2", "recon_net.eval", "enumerate", "denoiser.eval", "denoiser.eval", "train_utils.AverageMeter.update", "img_original.cuda.cuda", "img_original.cuda.cuda", "img_original.cuda.view().cuda", "torch.mm", "torch.mm", "img.float.view", "img.float.float", "recon_attacks.recon_PGD_L2.attack", "train_utils.AverageMeter.update", "time.time", "torch.tensor", "torch.tensor", "img_original.cuda.size", "img_original.cuda.size", "img_original.cuda.size", "img_original.cuda.size", "train_utils.measurement", "train_utils.measurement.t", "torch.no_grad", "recon_net", "criterion", "criterion.mean", "train_utils.AverageMeter.update", "img.float.repeat().view", "recon_net", "outputs.view().mean().reshape.view().mean().reshape", "criterion", "criterion.mean", "train_utils.AverageMeter.update", "denoiser", "recon_net", "criterion", "criterion.mean", "train_utils.AverageMeter.update", "img.float.repeat().view", "denoiser", "recon_net", "outputs.view().mean().reshape.view().mean().reshape", "criterion", "criterion.mean", "train_utils.AverageMeter.update", "recon_net", "criterion", "criterion.mean", "train_utils.AverageMeter.update", "attacker.attack.repeat().view", "recon_net", "outputs.view().mean().reshape.view().mean().reshape", "criterion", "criterion.mean", "train_utils.AverageMeter.update", "denoiser", "recon_net", "criterion", "criterion.mean", "train_utils.AverageMeter.update", "attacker.attack.repeat().view", "denoiser", "recon_net", "outputs.view().mean().reshape.view().mean().reshape", "criterion", "criterion.mean", "train_utils.AverageMeter.update", "print", "time.time", "img_original.cuda.view", "loss_no.mean.item", "img.float.size", "AE_DS_train.to_img", "torchvision.utils.save_image", "smooth_loss_no_clean.mean.item", "img.float.size", "AE_DS_train.to_img", "torchvision.utils.save_image", "loss.mean.item", "img.float.size", "AE_DS_train.to_img", "torchvision.utils.save_image", "smooth_loss_clean.mean.item", "img.float.size", "AE_DS_train.to_img", "torchvision.utils.save_image", "recon_loss.mean.item", "img.float.size", "AE_DS_train.to_img", "torchvision.utils.save_image", "smooth_loss_no_adv.mean.item", "img.float.size", "AE_DS_train.to_img", "torchvision.utils.save_image", "adv_loss.mean.item", "img.float.size", "AE_DS_train.to_img", "torchvision.utils.save_image", "smooth_loss.mean.item", "img.float.size", "AE_DS_train.to_img", "torchvision.utils.save_image", "time.time", "len", "os.path.join().format", "img.float.repeat", "torch.randn_like", "outputs.view().mean().reshape.view().mean", "os.path.join().format", "os.path.join().format", "img.float.repeat", "torch.randn_like", "outputs.view().mean().reshape.view().mean", "os.path.join().format", "os.path.join().format", "attacker.attack.repeat", "torch.randn_like", "outputs.view().mean().reshape.view().mean", "os.path.join().format", "os.path.join().format", "attacker.attack.repeat", "torch.randn_like", "outputs.view().mean().reshape.view().mean", "os.path.join().format", "outputs.view().mean().reshape.cpu", "outputs.view().mean().reshape.cpu", "outputs.view().mean().reshape.cpu", "outputs.view().mean().reshape.cpu", "outputs.view().mean().reshape.cpu", "outputs.view().mean().reshape.cpu", "outputs.view().mean().reshape.cpu", "outputs.view().mean().reshape.cpu", "os.path.join", "outputs.view().mean().reshape.view", "os.path.join", "os.path.join", "outputs.view().mean().reshape.view", "os.path.join", "os.path.join", "outputs.view().mean().reshape.view", "os.path.join", "os.path.join", "outputs.view().mean().reshape.view", "os.path.join"], "function", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.AverageMeter.update", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.recon_attacks.DDN.attack", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.AverageMeter.update", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.measurement", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.AverageMeter.update", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.AverageMeter.update", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.AverageMeter.update", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.AverageMeter.update", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.AverageMeter.update", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.AverageMeter.update", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.AverageMeter.update", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.AverageMeter.update", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.AE_DS_train.to_img", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.AE_DS_train.to_img", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.AE_DS_train.to_img", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.AE_DS_train.to_img", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.AE_DS_train.to_img", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.AE_DS_train.to_img", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.AE_DS_train.to_img", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.AE_DS_train.to_img"], ["", "def", "test_with_recon", "(", "loader", ":", "DataLoader", ",", "denoiser", ":", "torch", ".", "nn", ".", "Module", ",", "criterion", ",", "outdir", ":", "str", ",", "noise_sd", ":", "float", ",", "epoch", ":", "int", ",", "visual_freq", ":", "int", ",", "noise_num", ":", "int", ",", "num_steps", ":", "int", ",", "epsilon", ":", "int", ",", "print_freq", ":", "int", ",", "recon_net", ":", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"\n    A function to test the classification performance of a denoiser when attached to a given classifier\n        :param loader:DataLoader: test dataloader\n        :param denoiser:torch.nn.Module: the denoiser\n        :param criterion: the loss function (e.g. MAE)\n        :param noise_sd:float: the std-dev of the Guassian noise perturbation of the input\n        :param print_freq:int: the frequency of logging\n        :param recon_net:torch.nn.Module: the reconstruction network to which the denoiser is attached\n    \"\"\"", "\n", "\n", "# switch to eval mode", "\n", "recon_net", ".", "eval", "(", ")", "\n", "if", "denoiser", ":", "\n", "        ", "denoiser", ".", "eval", "(", ")", "\n", "\n", "", "torch", ".", "manual_seed", "(", "0", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "0", ")", "\n", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses_no", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "recon_losses", "=", "AverageMeter", "(", ")", "\n", "adv_losses", "=", "AverageMeter", "(", ")", "\n", "smooth_losses", "=", "AverageMeter", "(", ")", "\n", "smooth_losses_no_clean", "=", "AverageMeter", "(", ")", "\n", "smooth_losses_clean", "=", "AverageMeter", "(", ")", "\n", "smooth_losses_no_adv", "=", "AverageMeter", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "n_measurement", "=", "args", ".", "measurement", "\n", "mm_min", "=", "torch", ".", "tensor", "(", "args", ".", "data_min", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "mm_max", "=", "torch", ".", "tensor", "(", "args", ".", "data_max", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "mm_dis", "=", "mm_max", "-", "mm_min", "\n", "\n", "mark", "=", "39", "\n", "\n", "attacker", "=", "recon_PGD_L2", "(", "steps", "=", "num_steps", ",", "device", "=", "'cuda'", ",", "max_norm", "=", "epsilon", ")", "# remember epsilon/256", "\n", "\n", "# switch to eval mode", "\n", "recon_net", ".", "eval", "(", ")", "\n", "if", "denoiser", ":", "\n", "        ", "denoiser", ".", "eval", "(", ")", "\n", "\n", "", "for", "i", ",", "(", "img_original", ",", "_", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "img_original", "=", "img_original", ".", "cuda", "(", ")", "\n", "\n", "# Obtain the Shape of Inputs (Batch_size x Channel x H x W)", "\n", "batch_size", "=", "img_original", ".", "size", "(", ")", "[", "0", "]", "\n", "channel", "=", "img_original", ".", "size", "(", ")", "[", "1", "]", "\n", "h", "=", "img_original", ".", "size", "(", ")", "[", "2", "]", "\n", "w", "=", "img_original", ".", "size", "(", ")", "[", "3", "]", "\n", "d", "=", "channel", "*", "h", "*", "w", "\n", "\n", "img_original", "=", "img_original", ".", "cuda", "(", ")", "# input x (batch,  channel, h, w)", "\n", "img", "=", "img_original", ".", "view", "(", "batch_size", ",", "d", ")", ".", "cuda", "(", ")", "\n", "\n", "if", "i", "==", "0", ":", "\n", "            ", "a", "=", "measurement", "(", "n_measurement", ",", "d", ")", "\n", "\n", "", "img", "=", "torch", ".", "mm", "(", "img", ",", "a", ")", "\n", "img", "=", "torch", ".", "mm", "(", "img", ",", "a", ".", "t", "(", ")", ")", "\n", "img", "=", "img", ".", "view", "(", "batch_size", ",", "channel", ",", "h", ",", "w", ")", "\n", "img", "=", "img", ".", "float", "(", ")", "\n", "img", "=", "(", "img", "-", "mm_min", ")", "/", "mm_dis", "\n", "\n", "\n", "# adv_img = attacker.attack(model, img, img_original, criterion)", "\n", "adv_img", "=", "attacker", ".", "attack", "(", "recon_net", ",", "img", ",", "img_original", ",", "criterion", ")", "\n", "\n", "# augment inputs with noise", "\n", "# inputs = img + torch.randn_like(img, device='cuda') * noise_sd", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# ----------Clean Reconstruction Acc without denoiser------------", "\n", "            ", "outputs", "=", "recon_net", "(", "img", ")", "\n", "loss_no", "=", "criterion", "(", "outputs", ",", "img_original", ")", "\n", "loss_no_mean", "=", "loss_no", ".", "mean", "(", ")", "\n", "losses_no", ".", "update", "(", "loss_no_mean", ".", "item", "(", ")", ",", "img", ".", "size", "(", "0", ")", ")", "\n", "\n", "if", "i", "==", "mark", "and", "epoch", "%", "visual_freq", "==", "0", ":", "\n", "                ", "pic", "=", "to_img", "(", "outputs", ".", "cpu", "(", ")", ".", "data", ")", "\n", "save_image", "(", "pic", ",", "\n", "os", ".", "path", ".", "join", "(", "outdir", ",", "'Epoch_{epoch}_clean_NoDenoiser_Loss_{loss:.3f}.png'", ")", ".", "format", "(", "\n", "epoch", "=", "epoch", ",", "\n", "loss", "=", "losses_no", ".", "avg", ")", ")", "\n", "\n", "# ------------- clean Reconstruction Acc using smoothed reconstruction network --------------", "\n", "", "outputs", "=", "img", ".", "repeat", "(", "(", "1", ",", "noise_num", ",", "1", ",", "1", ")", ")", ".", "view", "(", "-", "1", ",", "channel", ",", "h", ",", "w", ")", "\n", "outputs", "=", "outputs", "+", "torch", ".", "randn_like", "(", "outputs", ",", "device", "=", "'cuda'", ")", "*", "noise_sd", "\n", "outputs", "=", "recon_net", "(", "outputs", ")", "\n", "outputs", "=", "outputs", ".", "view", "(", "-", "1", ",", "batch_size", ",", "noise_num", ",", "channel", ",", "h", ",", "w", ")", ".", "mean", "(", "2", ",", "keepdim", "=", "True", ")", ".", "reshape", "(", "batch_size", ",", "\n", "channel", ",", "h", ",", "\n", "w", ")", "\n", "smooth_loss_no_clean", "=", "criterion", "(", "outputs", ",", "img_original", ")", "\n", "smooth_loss_no_clean_mean", "=", "smooth_loss_no_clean", ".", "mean", "(", ")", "\n", "smooth_losses_no_clean", ".", "update", "(", "smooth_loss_no_clean_mean", ".", "item", "(", ")", ",", "img", ".", "size", "(", "0", ")", ")", "\n", "\n", "if", "i", "==", "mark", "and", "epoch", "%", "visual_freq", "==", "0", ":", "\n", "                ", "pic", "=", "to_img", "(", "outputs", ".", "cpu", "(", ")", ".", "data", ")", "\n", "save_image", "(", "pic", ",", "\n", "os", ".", "path", ".", "join", "(", "outdir", ",", "'Epoch_{epoch}_clean_NoDenoiser_smooth_Loss_{loss:.3f}.png'", ")", ".", "format", "(", "\n", "epoch", "=", "epoch", ",", "\n", "loss", "=", "smooth_losses_no_clean", ".", "avg", ")", ")", "\n", "\n", "# ----------Clean Reconstruction Acc with DS and AE------------", "\n", "", "outputs", "=", "denoiser", "(", "img", ")", "\n", "outputs", "=", "recon_net", "(", "outputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "img_original", ")", "\n", "loss_mean", "=", "loss", ".", "mean", "(", ")", "\n", "losses", ".", "update", "(", "loss_mean", ".", "item", "(", ")", ",", "img", ".", "size", "(", "0", ")", ")", "\n", "\n", "if", "i", "==", "mark", "and", "epoch", "%", "visual_freq", "==", "0", ":", "\n", "                ", "pic", "=", "to_img", "(", "outputs", ".", "cpu", "(", ")", ".", "data", ")", "\n", "save_image", "(", "pic", ",", "os", ".", "path", ".", "join", "(", "outdir", ",", "'Epoch_{epoch}_clean_Loss_{loss:.3f}.png'", ")", ".", "format", "(", "epoch", "=", "epoch", ",", "\n", "loss", "=", "losses", ".", "avg", ")", ")", "\n", "\n", "# ------------- clean Reconstruction Acc with DS and AE using smoothed model --------------", "\n", "", "outputs", "=", "img", ".", "repeat", "(", "(", "1", ",", "noise_num", ",", "1", ",", "1", ")", ")", ".", "view", "(", "-", "1", ",", "channel", ",", "h", ",", "w", ")", "\n", "outputs", "=", "outputs", "+", "torch", ".", "randn_like", "(", "outputs", ",", "device", "=", "'cuda'", ")", "*", "noise_sd", "\n", "outputs", "=", "denoiser", "(", "outputs", ")", "\n", "outputs", "=", "recon_net", "(", "outputs", ")", "\n", "outputs", "=", "outputs", ".", "view", "(", "-", "1", ",", "batch_size", ",", "noise_num", ",", "channel", ",", "h", ",", "w", ")", ".", "mean", "(", "2", ",", "keepdim", "=", "True", ")", ".", "reshape", "(", "batch_size", ",", "\n", "channel", ",", "h", ",", "\n", "w", ")", "\n", "smooth_loss_clean", "=", "criterion", "(", "outputs", ",", "img_original", ")", "\n", "smooth_loss_clean_mean", "=", "smooth_loss_clean", ".", "mean", "(", ")", "\n", "smooth_losses_clean", ".", "update", "(", "smooth_loss_clean_mean", ".", "item", "(", ")", ",", "img", ".", "size", "(", "0", ")", ")", "\n", "\n", "if", "i", "==", "mark", "and", "epoch", "%", "visual_freq", "==", "0", ":", "\n", "                ", "pic", "=", "to_img", "(", "outputs", ".", "cpu", "(", ")", ".", "data", ")", "\n", "save_image", "(", "pic", ",", "\n", "os", ".", "path", ".", "join", "(", "outdir", ",", "'Epoch_{epoch}_clean_smooth_Loss_{loss:.3f}.png'", ")", ".", "format", "(", "\n", "epoch", "=", "epoch", ",", "\n", "loss", "=", "smooth_losses_clean", ".", "avg", ")", ")", "\n", "\n", "# ----------Adversarial Reconstruction Acc using recon-net only------------", "\n", "", "outputs", "=", "recon_net", "(", "adv_img", ")", "\n", "recon_loss", "=", "criterion", "(", "outputs", ",", "img_original", ")", "\n", "recon_loss_mean", "=", "recon_loss", ".", "mean", "(", ")", "\n", "recon_losses", ".", "update", "(", "recon_loss_mean", ".", "item", "(", ")", ",", "img", ".", "size", "(", "0", ")", ")", "\n", "\n", "if", "i", "==", "mark", "and", "epoch", "%", "visual_freq", "==", "0", ":", "\n", "                ", "pic", "=", "to_img", "(", "outputs", ".", "cpu", "(", ")", ".", "data", ")", "\n", "save_image", "(", "pic", ",", "\n", "os", ".", "path", ".", "join", "(", "outdir", ",", "'Epoch_{epoch}_adv_NoDenoiser_Loss_{loss:.3f}.png'", ")", ".", "format", "(", "\n", "epoch", "=", "epoch", ",", "\n", "loss", "=", "recon_losses", ".", "avg", ")", ")", "\n", "\n", "# ------------- Adversarial Reconstruction Acc using smoothed reconstruction network --------------", "\n", "", "outputs", "=", "adv_img", ".", "repeat", "(", "(", "1", ",", "noise_num", ",", "1", ",", "1", ")", ")", ".", "view", "(", "-", "1", ",", "channel", ",", "h", ",", "w", ")", "\n", "outputs", "=", "outputs", "+", "torch", ".", "randn_like", "(", "outputs", ",", "device", "=", "'cuda'", ")", "*", "noise_sd", "\n", "outputs", "=", "recon_net", "(", "outputs", ")", "\n", "outputs", "=", "outputs", ".", "view", "(", "-", "1", ",", "batch_size", ",", "noise_num", ",", "channel", ",", "h", ",", "w", ")", ".", "mean", "(", "2", ",", "keepdim", "=", "True", ")", ".", "reshape", "(", "\n", "batch_size", ",", "\n", "channel", ",", "h", ",", "\n", "w", ")", "\n", "smooth_loss_no_adv", "=", "criterion", "(", "outputs", ",", "img_original", ")", "\n", "smooth_loss_no_adv_mean", "=", "smooth_loss_no_adv", ".", "mean", "(", ")", "\n", "smooth_losses_no_adv", ".", "update", "(", "smooth_loss_no_adv_mean", ".", "item", "(", ")", ",", "img", ".", "size", "(", "0", ")", ")", "\n", "\n", "if", "i", "==", "mark", "and", "epoch", "%", "visual_freq", "==", "0", ":", "\n", "                ", "pic", "=", "to_img", "(", "outputs", ".", "cpu", "(", ")", ".", "data", ")", "\n", "save_image", "(", "pic", ",", "\n", "os", ".", "path", ".", "join", "(", "outdir", ",", "'Epoch_{epoch}_adv_NoDenoiser_smooth_Loss_{loss:.3f}.png'", ")", ".", "format", "(", "\n", "epoch", "=", "epoch", ",", "\n", "loss", "=", "smooth_losses_no_adv", ".", "avg", ")", ")", "\n", "\n", "# -----------Adversarial Reconstruction Acc using recon-net + denoiser--------------", "\n", "", "outputs", "=", "denoiser", "(", "adv_img", ")", "\n", "outputs", "=", "recon_net", "(", "outputs", ")", "\n", "adv_loss", "=", "criterion", "(", "outputs", ",", "img_original", ")", "\n", "adv_loss_mean", "=", "adv_loss", ".", "mean", "(", ")", "\n", "adv_losses", ".", "update", "(", "adv_loss_mean", ".", "item", "(", ")", ",", "img", ".", "size", "(", "0", ")", ")", "\n", "\n", "if", "i", "==", "mark", "and", "epoch", "%", "visual_freq", "==", "0", ":", "\n", "                ", "pic", "=", "to_img", "(", "outputs", ".", "cpu", "(", ")", ".", "data", ")", "\n", "save_image", "(", "pic", ",", "os", ".", "path", ".", "join", "(", "outdir", ",", "'Epoch_{epoch}_adv_Loss_{loss:.3f}.png'", ")", ".", "format", "(", "epoch", "=", "epoch", ",", "\n", "loss", "=", "adv_losses", ".", "avg", ")", ")", "\n", "\n", "# ------------- Adversarial Reconstruction Acc with DS + AE using smoothed model --------------", "\n", "", "outputs", "=", "adv_img", ".", "repeat", "(", "(", "1", ",", "noise_num", ",", "1", ",", "1", ")", ")", ".", "view", "(", "-", "1", ",", "channel", ",", "h", ",", "w", ")", "\n", "outputs", "=", "outputs", "+", "torch", ".", "randn_like", "(", "outputs", ",", "device", "=", "'cuda'", ")", "*", "noise_sd", "\n", "outputs", "=", "denoiser", "(", "outputs", ")", "\n", "outputs", "=", "recon_net", "(", "outputs", ")", "\n", "outputs", "=", "outputs", ".", "view", "(", "-", "1", ",", "batch_size", ",", "noise_num", ",", "channel", ",", "h", ",", "w", ")", ".", "mean", "(", "2", ",", "keepdim", "=", "True", ")", ".", "reshape", "(", "\n", "batch_size", ",", "\n", "channel", ",", "h", ",", "\n", "w", ")", "\n", "smooth_loss", "=", "criterion", "(", "outputs", ",", "img_original", ")", "\n", "smooth_loss_mean", "=", "smooth_loss", ".", "mean", "(", ")", "\n", "smooth_losses", ".", "update", "(", "smooth_loss_mean", ".", "item", "(", ")", ",", "img", ".", "size", "(", "0", ")", ")", "\n", "\n", "if", "i", "==", "mark", "and", "epoch", "%", "visual_freq", "==", "0", ":", "\n", "                ", "pic", "=", "to_img", "(", "outputs", ".", "cpu", "(", ")", ".", "data", ")", "\n", "save_image", "(", "pic", ",", "\n", "os", ".", "path", ".", "join", "(", "outdir", ",", "'Epoch_{epoch}_adv_smooth_Loss_{loss:.3f}.png'", ")", ".", "format", "(", "epoch", "=", "epoch", ",", "\n", "loss", "=", "smooth_losses", ".", "avg", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "", "", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "print_freq", "==", "0", ":", "\n", "            ", "log", "=", "'Test: [{0}/{1}]\\t'", "' \\\n            '", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "' \\\n            '", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "' \\\n            '", "'Clean Loss without Denoiser {loss_no.val:.4f} ({loss_no.avg:.4f})\\t'", "' \\\n            '", "'Clean Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "' \\\n            '", "'Recon_Loss {recon_loss.val:.4f} ({recon_loss.avg:.4f})\\t'", "' \\\n            '", "'Adv_Loss {adv_loss.val:.4f} ({adv_loss.avg:.4f})\\t'", "' \\\n            '", "'Smooth_Loss {smooth_loss.val:.4f} ({smooth_loss.avg:.4f})\\n'", ".", "format", "(", "\n", "i", ",", "len", "(", "loader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ",", "loss_no", "=", "losses_no", ",", "loss", "=", "losses", ",", "recon_loss", "=", "recon_losses", ",", "adv_loss", "=", "adv_losses", ",", "\n", "smooth_loss", "=", "smooth_losses", ")", "\n", "\n", "print", "(", "log", ")", "\n", "\n", "", "", "return", "losses_no", ".", "avg", ",", "smooth_losses_no_clean", ".", "avg", ",", "losses", ".", "avg", ",", "smooth_losses_clean", ".", "avg", ",", "recon_losses", ".", "avg", ",", "smooth_losses_no_adv", ".", "avg", ",", "adv_losses", ".", "avg", ",", "smooth_losses", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.AE_DS_train.recon_train_ae": [[1158, 1311], ["torch.tensor().cuda", "torch.tensor().cuda", "torch.manual_seed", "torch.cuda.manual_seed_all", "train_utils.AverageMeter", "train_utils.AverageMeter", "train_utils.AverageMeter", "time.time", "denoiser.train", "enumerate", "encoder.eval", "decoder.eval", "encoder.train", "decoder.eval", "encoder.train", "decoder.train", "recon_net.eval", "train_utils.AverageMeter.update", "img_original.cuda.cuda", "img_original.cuda.view().cuda", "torch.mm", "torch.mm", "img.float.view", "img.float.float", "encoder", "train_utils.AverageMeter.update", "time.time", "torch.tensor", "torch.tensor", "img_original.cuda.size", "img_original.cuda.size", "img_original.cuda.size", "img_original.cuda.size", "train_utils.measurement", "print", "print", "train_utils.measurement.t", "torch.randn_like", "denoiser", "recon_net", "criterion", "criterion.mean", "train_utils.AverageMeter.update", "optimizer.zero_grad", "stab_loss.mean.backward", "optimizer.step", "print", "time.time", "img_original.cuda.view", "decoder", "stab_loss.mean.item", "img_original.cuda.size", "recon_net.requires_grad_", "recon_net.retain_grad", "torch.flatten().cuda", "torch.zeros().cuda.detach", "torch.sum().mean", "optimizer.zero_grad", "torch.sum().mean.backward", "optimizer.step", "time.time", "len", "torch.no_grad", "torch.tensor().cuda", "torch.tensor().cuda", "recon_net", "recon_net", "criterion", "criterion.mean", "train_utils.AverageMeter.update", "torch.flatten().cuda", "torch.zeros().cuda", "range", "decoder", "loss_0.mean.item", "img_original.cuda.size", "torch.zeros().cuda", "recon_q_plus.view.view", "recon_q_minus.view.view", "recon_net", "recon_net", "criterion", "criterion", "torch.tensor", "loss_diff.mean().mean.mean().mean", "torch.flatten", "torch.sum", "torch.tensor", "torch.tensor", "torch.flatten", "torch.zeros", "decoder", "decoder", "torch.zeros", "loss_diff.mean().mean.mean", "loss_diff.mean().mean.reshape().expand_as", "loss_diff.mean().mean.reshape"], "function", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.AE_DS_train.train", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.AE_DS_train.train", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.AE_DS_train.train", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.AE_DS_train.train", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.AverageMeter.update", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.AverageMeter.update", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.measurement", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.AverageMeter.update", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.vrnet.RBFActivationFunction.backward", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.requires_grad_", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.vrnet.RBFActivationFunction.backward", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.AverageMeter.update"], ["", "def", "recon_train_ae", "(", "loader", ":", "DataLoader", ",", "encoder", ":", "torch", ".", "nn", ".", "Module", ",", "decoder", ":", "torch", ".", "nn", ".", "Module", ",", "denoiser", ":", "torch", ".", "nn", ".", "Module", ",", "criterion", ",", "optimizer", ":", "Optimizer", ",", "epoch", ":", "int", ",", "noise_sd", ":", "float", ",", "\n", "recon_net", ":", "torch", ".", "nn", ".", "Module", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Function for training denoiser for one epoch\n        :param loader:DataLoader: training dataloader\n        :param denoiser:torch.nn.Module: the denoiser being trained\n        :param criterion: loss function\n        :param optimizer:Optimizer: optimizer used during trainined\n        :param epoch:int: the current epoch (for logging)\n        :param noise_sd:float: the std-dev of the Guassian noise perturbation of the input\n        :param classifier:torch.nn.Module=None: a ``freezed'' classifier attached to the denoiser\n                                                (required classifciation/stability objectives), None for denoising objective\n    \"\"\"", "\n", "n_measurement", "=", "args", ".", "measurement", "\n", "mm_min", "=", "torch", ".", "tensor", "(", "args", ".", "data_min", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "mm_max", "=", "torch", ".", "tensor", "(", "args", ".", "data_max", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "mm_dis", "=", "mm_max", "-", "mm_min", "\n", "\n", "torch", ".", "manual_seed", "(", "0", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "0", ")", "\n", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "# switch to train mode", "\n", "denoiser", ".", "train", "(", ")", "\n", "\n", "if", "args", ".", "train_method", "==", "'part'", ":", "\n", "        ", "encoder", ".", "eval", "(", ")", "\n", "decoder", ".", "eval", "(", ")", "\n", "", "if", "args", ".", "train_method", "==", "'whole'", ":", "\n", "        ", "encoder", ".", "train", "(", ")", "\n", "decoder", ".", "eval", "(", ")", "\n", "", "if", "args", ".", "train_method", "==", "'whole_plus'", ":", "\n", "        ", "encoder", ".", "train", "(", ")", "\n", "decoder", ".", "train", "(", ")", "\n", "\n", "", "if", "recon_net", ":", "\n", "        ", "recon_net", ".", "eval", "(", ")", "\n", "\n", "", "for", "i", ",", "(", "img_original", ",", "_", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "# Obtain the Shape of Inputs (Batch_size x Channel x H x W)", "\n", "batch_size", "=", "img_original", ".", "size", "(", ")", "[", "0", "]", "\n", "channel", "=", "img_original", ".", "size", "(", ")", "[", "1", "]", "\n", "h", "=", "img_original", ".", "size", "(", ")", "[", "2", "]", "\n", "w", "=", "img_original", ".", "size", "(", ")", "[", "3", "]", "\n", "d", "=", "channel", "*", "h", "*", "w", "\n", "\n", "img_original", "=", "img_original", ".", "cuda", "(", ")", "# input x (batch,  channel, h, w)", "\n", "img", "=", "img_original", ".", "view", "(", "batch_size", ",", "d", ")", ".", "cuda", "(", ")", "\n", "\n", "if", "i", "==", "0", ":", "\n", "            ", "a", "=", "measurement", "(", "n_measurement", ",", "d", ")", "# Measurement Matrix", "\n", "print", "(", "\"-----------------------training--------------------\"", ")", "\n", "print", "(", "a", "[", "0", ",", ":", "]", ")", "\n", "\n", "", "img", "=", "torch", ".", "mm", "(", "img", ",", "a", ")", "# y = A^T x", "\n", "img", "=", "torch", ".", "mm", "(", "img", ",", "a", ".", "t", "(", ")", ")", "\n", "img", "=", "img", ".", "view", "(", "batch_size", ",", "channel", ",", "h", ",", "w", ")", "\n", "img", "=", "img", ".", "float", "(", ")", "\n", "img", "=", "(", "img", "-", "mm_min", ")", "/", "mm_dis", "\n", "\n", "#augment inputs with noise", "\n", "noise", "=", "torch", ".", "randn_like", "(", "img", ",", "device", "=", "'cuda'", ")", "*", "noise_sd", "\n", "recon", "=", "encoder", "(", "denoiser", "(", "img", "+", "noise", ")", ")", "\n", "\n", "if", "args", ".", "optimization_method", "==", "'FO'", ":", "\n", "            ", "recon", "=", "recon_net", "(", "decoder", "(", "recon", ")", ")", "\n", "stab_loss", "=", "criterion", "(", "recon", ",", "img_original", ")", "\n", "\n", "# record original loss", "\n", "stab_loss_mean", "=", "stab_loss", ".", "mean", "(", ")", "\n", "losses", ".", "update", "(", "stab_loss_mean", ".", "item", "(", ")", ",", "img_original", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "stab_loss_mean", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "elif", "args", ".", "optimization_method", "==", "'ZO'", ":", "\n", "            ", "recon", ".", "requires_grad_", "(", "True", ")", "\n", "recon", ".", "retain_grad", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "mu", "=", "torch", ".", "tensor", "(", "args", ".", "mu", ")", ".", "cuda", "(", ")", "\n", "q", "=", "torch", ".", "tensor", "(", "args", ".", "q", ")", ".", "cuda", "(", ")", "\n", "\n", "# Forward Inference (Original)", "\n", "original_recon", "=", "recon_net", "(", "img", ")", "\n", "\n", "recon_test", "=", "recon_net", "(", "decoder", "(", "recon", ")", ")", "\n", "loss_0", "=", "criterion", "(", "recon_test", ",", "original_recon", ")", "\n", "# record original loss", "\n", "loss_0_mean", "=", "loss_0", ".", "mean", "(", ")", "\n", "losses", ".", "update", "(", "loss_0_mean", ".", "item", "(", ")", ",", "img_original", ".", "size", "(", "0", ")", ")", "\n", "\n", "recon_flat_no_grad", "=", "torch", ".", "flatten", "(", "recon", ",", "start_dim", "=", "1", ")", ".", "cuda", "(", ")", "\n", "grad_est", "=", "torch", ".", "zeros", "(", "batch_size", ",", "d", ")", ".", "cuda", "(", ")", "\n", "\n", "# ZO Gradient Estimation", "\n", "for", "k", "in", "range", "(", "d", ")", ":", "\n", "# Obtain a direction vector (1-0)", "\n", "                    ", "u", "=", "torch", ".", "zeros", "(", "batch_size", ",", "d", ")", ".", "cuda", "(", ")", "\n", "u", "[", ":", ",", "k", "]", "=", "1", "\n", "\n", "# Forward Inference (reconstructed image + random direction vector)", "\n", "recon_q_plus", "=", "recon_flat_no_grad", "+", "mu", "*", "u", "\n", "recon_q_minus", "=", "recon_flat_no_grad", "-", "mu", "*", "u", "\n", "\n", "recon_q_plus", "=", "recon_q_plus", ".", "view", "(", "batch_size", ",", "channel", ",", "h", ",", "w", ")", "\n", "recon_q_minus", "=", "recon_q_minus", ".", "view", "(", "batch_size", ",", "channel", ",", "h", ",", "w", ")", "\n", "recon_q_pre_plus", "=", "recon_net", "(", "decoder", "(", "recon_q_plus", ")", ")", "\n", "recon_q_pre_minus", "=", "recon_net", "(", "decoder", "(", "recon_q_minus", ")", ")", "\n", "\n", "# Loss Calculation and Gradient Estimation", "\n", "loss_tmp_plus", "=", "criterion", "(", "recon_q_pre_plus", ",", "original_recon", ")", "\n", "loss_tmp_minus", "=", "criterion", "(", "recon_q_pre_minus", ",", "original_recon", ")", "\n", "\n", "loss_diff", "=", "torch", ".", "tensor", "(", "loss_tmp_plus", "-", "loss_tmp_minus", ")", "\n", "loss_diff", "=", "loss_diff", ".", "mean", "(", "3", ",", "keepdim", "=", "True", ")", ".", "mean", "(", "2", ",", "keepdim", "=", "True", ")", "\n", "grad_est", "=", "grad_est", "+", "u", "*", "loss_diff", ".", "reshape", "(", "batch_size", ",", "1", ")", ".", "expand_as", "(", "u", ")", "/", "(", "2", "*", "mu", ")", "\n", "\n", "", "", "recon_flat", "=", "torch", ".", "flatten", "(", "recon", ",", "start_dim", "=", "1", ")", ".", "cuda", "(", ")", "\n", "grad_est_no_grad", "=", "grad_est", ".", "detach", "(", ")", "\n", "\n", "# reconstructed image * gradient estimation   <--   g(x) * a", "\n", "loss", "=", "torch", ".", "sum", "(", "recon_flat", "*", "grad_est_no_grad", ",", "dim", "=", "-", "1", ")", ".", "mean", "(", ")", "# l_mean", "\n", "# compute gradient and do step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "log", "=", "'Epoch: [{0}][{1}/{2}]\\t'", "' \\\n            '", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "' \\\n            '", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "' \\\n            '", "'Stab_Loss {stab_loss.val:.4f} ({stab_loss.avg:.4f})'", "'\\n'", ".", "format", "(", "\n", "epoch", ",", "i", ",", "len", "(", "loader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ",", "stab_loss", "=", "losses", ")", "\n", "\n", "print", "(", "log", ")", "\n", "\n", "", "", "return", "losses", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.AE_DS_train.test_with_recon_ae": [[1313, 1538], ["recon_net.eval", "encoder.eval", "decoder.eval", "torch.manual_seed", "torch.cuda.manual_seed_all", "train_utils.AverageMeter", "train_utils.AverageMeter", "train_utils.AverageMeter", "train_utils.AverageMeter", "train_utils.AverageMeter", "train_utils.AverageMeter", "train_utils.AverageMeter", "train_utils.AverageMeter", "train_utils.AverageMeter", "train_utils.AverageMeter", "time.time", "torch.tensor().cuda", "torch.tensor().cuda", "recon_attacks.recon_PGD_L2", "recon_net.eval", "enumerate", "denoiser.eval", "denoiser.eval", "train_utils.AverageMeter.update", "img_original.cuda.cuda", "img_original.cuda.cuda", "img_original.cuda.view().cuda", "torch.mm", "torch.mm", "img.float.view", "img.float.float", "recon_attacks.recon_PGD_L2.attack", "train_utils.AverageMeter.update", "time.time", "torch.tensor", "torch.tensor", "img_original.cuda.size", "img_original.cuda.size", "img_original.cuda.size", "img_original.cuda.size", "train_utils.measurement", "train_utils.measurement.t", "torch.no_grad", "recon_net", "criterion", "criterion.mean", "train_utils.AverageMeter.update", "img.float.repeat().view", "recon_net", "outputs.view().mean().reshape.view().mean().reshape", "criterion", "criterion.mean", "train_utils.AverageMeter.update", "encoder", "recon_net", "criterion", "criterion.mean", "train_utils.AverageMeter.update", "img.float.repeat().view", "encoder", "recon_net", "outputs.view().mean().reshape.view().mean().reshape", "criterion", "criterion.mean", "train_utils.AverageMeter.update", "recon_net", "criterion", "criterion.mean", "train_utils.AverageMeter.update", "attacker.attack.repeat().view", "recon_net", "outputs.view().mean().reshape.view().mean().reshape", "criterion", "criterion.mean", "train_utils.AverageMeter.update", "encoder", "recon_net", "criterion", "criterion.mean", "train_utils.AverageMeter.update", "attacker.attack.repeat().view", "encoder", "recon_net", "outputs.view().mean().reshape.view().mean().reshape", "criterion", "criterion.mean", "train_utils.AverageMeter.update", "print", "time.time", "img_original.cuda.view", "loss_no.mean.item", "img.float.size", "AE_DS_train.to_img", "torchvision.utils.save_image", "smooth_loss_no_clean.mean.item", "img.float.size", "AE_DS_train.to_img", "torchvision.utils.save_image", "denoiser", "decoder", "loss.mean.item", "img.float.size", "AE_DS_train.to_img", "torchvision.utils.save_image", "denoiser", "decoder", "smooth_loss_clean.mean.item", "img.float.size", "AE_DS_train.to_img", "torchvision.utils.save_image", "recon_loss.mean.item", "img.float.size", "AE_DS_train.to_img", "torchvision.utils.save_image", "smooth_loss_no_adv.mean.item", "img.float.size", "AE_DS_train.to_img", "torchvision.utils.save_image", "denoiser", "decoder", "adv_loss.mean.item", "img.float.size", "AE_DS_train.to_img", "torchvision.utils.save_image", "denoiser", "decoder", "smooth_loss.mean.item", "img.float.size", "AE_DS_train.to_img", "torchvision.utils.save_image", "time.time", "len", "os.path.join().format", "img.float.repeat", "torch.randn_like", "outputs.view().mean().reshape.view().mean", "os.path.join().format", "os.path.join().format", "img.float.repeat", "torch.randn_like", "outputs.view().mean().reshape.view().mean", "os.path.join().format", "os.path.join().format", "attacker.attack.repeat", "torch.randn_like", "outputs.view().mean().reshape.view().mean", "os.path.join().format", "os.path.join().format", "attacker.attack.repeat", "torch.randn_like", "outputs.view().mean().reshape.view().mean", "os.path.join().format", "outputs.view().mean().reshape.cpu", "outputs.view().mean().reshape.cpu", "outputs.view().mean().reshape.cpu", "outputs.view().mean().reshape.cpu", "outputs.view().mean().reshape.cpu", "outputs.view().mean().reshape.cpu", "outputs.view().mean().reshape.cpu", "outputs.view().mean().reshape.cpu", "os.path.join", "outputs.view().mean().reshape.view", "os.path.join", "os.path.join", "outputs.view().mean().reshape.view", "os.path.join", "os.path.join", "outputs.view().mean().reshape.view", "os.path.join", "os.path.join", "outputs.view().mean().reshape.view", "os.path.join"], "function", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.AverageMeter.update", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.recon_attacks.DDN.attack", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.AverageMeter.update", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.measurement", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.AverageMeter.update", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.AverageMeter.update", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.AverageMeter.update", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.AverageMeter.update", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.AverageMeter.update", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.AverageMeter.update", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.AverageMeter.update", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.train_utils.AverageMeter.update", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.AE_DS_train.to_img", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.AE_DS_train.to_img", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.AE_DS_train.to_img", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.AE_DS_train.to_img", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.AE_DS_train.to_img", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.AE_DS_train.to_img", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.AE_DS_train.to_img", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.AE_DS_train.to_img"], ["", "def", "test_with_recon_ae", "(", "loader", ":", "DataLoader", ",", "encoder", ":", "torch", ".", "nn", ".", "Module", ",", "decoder", ":", "torch", ".", "nn", ".", "Module", ",", "denoiser", ":", "torch", ".", "nn", ".", "Module", ",", "criterion", ",", "outdir", ":", "str", ",", "noise_sd", ":", "float", ",", "epoch", ":", "int", ",", "visual_freq", ":", "int", ",", "noise_num", ":", "int", ",", "num_steps", ":", "int", ",", "epsilon", ":", "int", ",", "print_freq", ":", "int", ",", "recon_net", ":", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"\n    A function to test the classification performance of a denoiser when attached to a given classifier\n        :param loader:DataLoader: test dataloader\n        :param denoiser:torch.nn.Module: the denoiser\n        :param criterion: the loss function (e.g. MAE)\n        :param noise_sd:float: the std-dev of the Guassian noise perturbation of the input\n        :param print_freq:int: the frequency of logging\n        :param recon_net:torch.nn.Module: the reconstruction network to which the denoiser is attached\n    \"\"\"", "\n", "\n", "# switch to eval mode", "\n", "recon_net", ".", "eval", "(", ")", "\n", "encoder", ".", "eval", "(", ")", "\n", "decoder", ".", "eval", "(", ")", "\n", "if", "denoiser", ":", "\n", "        ", "denoiser", ".", "eval", "(", ")", "\n", "\n", "", "torch", ".", "manual_seed", "(", "0", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "0", ")", "\n", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses_no", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "recon_losses", "=", "AverageMeter", "(", ")", "\n", "adv_losses", "=", "AverageMeter", "(", ")", "\n", "smooth_losses", "=", "AverageMeter", "(", ")", "\n", "smooth_losses_no_clean", "=", "AverageMeter", "(", ")", "\n", "smooth_losses_clean", "=", "AverageMeter", "(", ")", "\n", "smooth_losses_no_adv", "=", "AverageMeter", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "n_measurement", "=", "args", ".", "measurement", "\n", "mm_min", "=", "torch", ".", "tensor", "(", "args", ".", "data_min", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "mm_max", "=", "torch", ".", "tensor", "(", "args", ".", "data_max", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "mm_dis", "=", "mm_max", "-", "mm_min", "\n", "\n", "mark", "=", "39", "\n", "\n", "attacker", "=", "recon_PGD_L2", "(", "steps", "=", "num_steps", ",", "device", "=", "'cuda'", ",", "max_norm", "=", "epsilon", ")", "# remember epsilon/256", "\n", "\n", "# switch to eval mode", "\n", "recon_net", ".", "eval", "(", ")", "\n", "if", "denoiser", ":", "\n", "        ", "denoiser", ".", "eval", "(", ")", "\n", "\n", "", "for", "i", ",", "(", "img_original", ",", "_", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "img_original", "=", "img_original", ".", "cuda", "(", ")", "\n", "\n", "# Obtain the Shape of Inputs (Batch_size x Channel x H x W)", "\n", "batch_size", "=", "img_original", ".", "size", "(", ")", "[", "0", "]", "\n", "channel", "=", "img_original", ".", "size", "(", ")", "[", "1", "]", "\n", "h", "=", "img_original", ".", "size", "(", ")", "[", "2", "]", "\n", "w", "=", "img_original", ".", "size", "(", ")", "[", "3", "]", "\n", "d", "=", "channel", "*", "h", "*", "w", "\n", "\n", "img_original", "=", "img_original", ".", "cuda", "(", ")", "# input x (batch,  channel, h, w)", "\n", "img", "=", "img_original", ".", "view", "(", "batch_size", ",", "d", ")", ".", "cuda", "(", ")", "\n", "\n", "if", "i", "==", "0", ":", "\n", "            ", "a", "=", "measurement", "(", "n_measurement", ",", "d", ")", "\n", "\n", "", "img", "=", "torch", ".", "mm", "(", "img", ",", "a", ")", "\n", "img", "=", "torch", ".", "mm", "(", "img", ",", "a", ".", "t", "(", ")", ")", "\n", "img", "=", "img", ".", "view", "(", "batch_size", ",", "channel", ",", "h", ",", "w", ")", "\n", "img", "=", "img", ".", "float", "(", ")", "\n", "img", "=", "(", "img", "-", "mm_min", ")", "/", "mm_dis", "\n", "\n", "\n", "# adv_img = attacker.attack(model, img, img_original, criterion)", "\n", "adv_img", "=", "attacker", ".", "attack", "(", "recon_net", ",", "img", ",", "img_original", ",", "criterion", ")", "\n", "\n", "# augment inputs with noise", "\n", "# inputs = img + torch.randn_like(img, device='cuda') * noise_sd", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# ----------Clean Reconstruction Acc without denoiser------------", "\n", "            ", "outputs", "=", "recon_net", "(", "img", ")", "\n", "loss_no", "=", "criterion", "(", "outputs", ",", "img_original", ")", "\n", "loss_no_mean", "=", "loss_no", ".", "mean", "(", ")", "\n", "losses_no", ".", "update", "(", "loss_no_mean", ".", "item", "(", ")", ",", "img", ".", "size", "(", "0", ")", ")", "\n", "\n", "if", "i", "==", "mark", "and", "epoch", "%", "visual_freq", "==", "0", ":", "\n", "                ", "pic", "=", "to_img", "(", "outputs", ".", "cpu", "(", ")", ".", "data", ")", "\n", "save_image", "(", "pic", ",", "\n", "os", ".", "path", ".", "join", "(", "outdir", ",", "'Epoch_{epoch}_clean_NoDenoiser_Loss_{loss:.3f}.png'", ")", ".", "format", "(", "\n", "epoch", "=", "epoch", ",", "\n", "loss", "=", "losses_no", ".", "avg", ")", ")", "\n", "\n", "# ------------- clean Reconstruction Acc using smoothed reconstruction network --------------", "\n", "", "outputs", "=", "img", ".", "repeat", "(", "(", "1", ",", "noise_num", ",", "1", ",", "1", ")", ")", ".", "view", "(", "-", "1", ",", "channel", ",", "h", ",", "w", ")", "\n", "outputs", "=", "outputs", "+", "torch", ".", "randn_like", "(", "outputs", ",", "device", "=", "'cuda'", ")", "*", "noise_sd", "\n", "outputs", "=", "recon_net", "(", "outputs", ")", "\n", "outputs", "=", "outputs", ".", "view", "(", "-", "1", ",", "batch_size", ",", "noise_num", ",", "channel", ",", "h", ",", "w", ")", ".", "mean", "(", "2", ",", "keepdim", "=", "True", ")", ".", "reshape", "(", "batch_size", ",", "\n", "channel", ",", "h", ",", "\n", "w", ")", "\n", "smooth_loss_no_clean", "=", "criterion", "(", "outputs", ",", "img_original", ")", "\n", "smooth_loss_no_clean_mean", "=", "smooth_loss_no_clean", ".", "mean", "(", ")", "\n", "smooth_losses_no_clean", ".", "update", "(", "smooth_loss_no_clean_mean", ".", "item", "(", ")", ",", "img", ".", "size", "(", "0", ")", ")", "\n", "\n", "if", "i", "==", "mark", "and", "epoch", "%", "visual_freq", "==", "0", ":", "\n", "                ", "pic", "=", "to_img", "(", "outputs", ".", "cpu", "(", ")", ".", "data", ")", "\n", "save_image", "(", "pic", ",", "\n", "os", ".", "path", ".", "join", "(", "outdir", ",", "'Epoch_{epoch}_clean_NoDenoiser_smooth_Loss_{loss:.3f}.png'", ")", ".", "format", "(", "\n", "epoch", "=", "epoch", ",", "\n", "loss", "=", "smooth_losses_no_clean", ".", "avg", ")", ")", "\n", "\n", "# ----------Clean Reconstruction Acc with DS and AE------------", "\n", "", "outputs", "=", "encoder", "(", "denoiser", "(", "img", ")", ")", "\n", "outputs", "=", "recon_net", "(", "decoder", "(", "outputs", ")", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "img_original", ")", "\n", "loss_mean", "=", "loss", ".", "mean", "(", ")", "\n", "losses", ".", "update", "(", "loss_mean", ".", "item", "(", ")", ",", "img", ".", "size", "(", "0", ")", ")", "\n", "\n", "if", "i", "==", "mark", "and", "epoch", "%", "visual_freq", "==", "0", ":", "\n", "                ", "pic", "=", "to_img", "(", "outputs", ".", "cpu", "(", ")", ".", "data", ")", "\n", "save_image", "(", "pic", ",", "os", ".", "path", ".", "join", "(", "outdir", ",", "'Epoch_{epoch}_clean_Loss_{loss:.3f}.png'", ")", ".", "format", "(", "epoch", "=", "epoch", ",", "\n", "loss", "=", "losses", ".", "avg", ")", ")", "\n", "\n", "# ------------- clean Reconstruction Acc with DS and AE using smoothed model --------------", "\n", "", "outputs", "=", "img", ".", "repeat", "(", "(", "1", ",", "noise_num", ",", "1", ",", "1", ")", ")", ".", "view", "(", "-", "1", ",", "channel", ",", "h", ",", "w", ")", "\n", "outputs", "=", "outputs", "+", "torch", ".", "randn_like", "(", "outputs", ",", "device", "=", "'cuda'", ")", "*", "noise_sd", "\n", "outputs", "=", "encoder", "(", "denoiser", "(", "outputs", ")", ")", "\n", "outputs", "=", "recon_net", "(", "decoder", "(", "outputs", ")", ")", "\n", "outputs", "=", "outputs", ".", "view", "(", "-", "1", ",", "batch_size", ",", "noise_num", ",", "channel", ",", "h", ",", "w", ")", ".", "mean", "(", "2", ",", "keepdim", "=", "True", ")", ".", "reshape", "(", "batch_size", ",", "\n", "channel", ",", "h", ",", "\n", "w", ")", "\n", "smooth_loss_clean", "=", "criterion", "(", "outputs", ",", "img_original", ")", "\n", "smooth_loss_clean_mean", "=", "smooth_loss_clean", ".", "mean", "(", ")", "\n", "smooth_losses_clean", ".", "update", "(", "smooth_loss_clean_mean", ".", "item", "(", ")", ",", "img", ".", "size", "(", "0", ")", ")", "\n", "\n", "if", "i", "==", "mark", "and", "epoch", "%", "visual_freq", "==", "0", ":", "\n", "                ", "pic", "=", "to_img", "(", "outputs", ".", "cpu", "(", ")", ".", "data", ")", "\n", "save_image", "(", "pic", ",", "\n", "os", ".", "path", ".", "join", "(", "outdir", ",", "'Epoch_{epoch}_clean_smooth_Loss_{loss:.3f}.png'", ")", ".", "format", "(", "\n", "epoch", "=", "epoch", ",", "\n", "loss", "=", "smooth_losses_clean", ".", "avg", ")", ")", "\n", "\n", "# ----------Adversarial Reconstruction Acc using recon-net only------------", "\n", "", "outputs", "=", "recon_net", "(", "adv_img", ")", "\n", "recon_loss", "=", "criterion", "(", "outputs", ",", "img_original", ")", "\n", "recon_loss_mean", "=", "recon_loss", ".", "mean", "(", ")", "\n", "recon_losses", ".", "update", "(", "recon_loss_mean", ".", "item", "(", ")", ",", "img", ".", "size", "(", "0", ")", ")", "\n", "\n", "if", "i", "==", "mark", "and", "epoch", "%", "visual_freq", "==", "0", ":", "\n", "                ", "pic", "=", "to_img", "(", "outputs", ".", "cpu", "(", ")", ".", "data", ")", "\n", "save_image", "(", "pic", ",", "\n", "os", ".", "path", ".", "join", "(", "outdir", ",", "'Epoch_{epoch}_adv_NoDenoiser_Loss_{loss:.3f}.png'", ")", ".", "format", "(", "\n", "epoch", "=", "epoch", ",", "\n", "loss", "=", "recon_losses", ".", "avg", ")", ")", "\n", "\n", "# ------------- Adversarial Reconstruction Acc using smoothed reconstruction network --------------", "\n", "", "outputs", "=", "adv_img", ".", "repeat", "(", "(", "1", ",", "noise_num", ",", "1", ",", "1", ")", ")", ".", "view", "(", "-", "1", ",", "channel", ",", "h", ",", "w", ")", "\n", "outputs", "=", "outputs", "+", "torch", ".", "randn_like", "(", "outputs", ",", "device", "=", "'cuda'", ")", "*", "noise_sd", "\n", "outputs", "=", "recon_net", "(", "outputs", ")", "\n", "outputs", "=", "outputs", ".", "view", "(", "-", "1", ",", "batch_size", ",", "noise_num", ",", "channel", ",", "h", ",", "w", ")", ".", "mean", "(", "2", ",", "keepdim", "=", "True", ")", ".", "reshape", "(", "\n", "batch_size", ",", "\n", "channel", ",", "h", ",", "\n", "w", ")", "\n", "smooth_loss_no_adv", "=", "criterion", "(", "outputs", ",", "img_original", ")", "\n", "smooth_loss_no_adv_mean", "=", "smooth_loss_no_adv", ".", "mean", "(", ")", "\n", "smooth_losses_no_adv", ".", "update", "(", "smooth_loss_no_adv_mean", ".", "item", "(", ")", ",", "img", ".", "size", "(", "0", ")", ")", "\n", "\n", "if", "i", "==", "mark", "and", "epoch", "%", "visual_freq", "==", "0", ":", "\n", "                ", "pic", "=", "to_img", "(", "outputs", ".", "cpu", "(", ")", ".", "data", ")", "\n", "save_image", "(", "pic", ",", "\n", "os", ".", "path", ".", "join", "(", "outdir", ",", "'Epoch_{epoch}_adv_NoDenoiser_smooth_Loss_{loss:.3f}.png'", ")", ".", "format", "(", "\n", "epoch", "=", "epoch", ",", "\n", "loss", "=", "smooth_losses_no_adv", ".", "avg", ")", ")", "\n", "\n", "# -----------Adversarial Reconstruction Acc using recon-net + denoiser--------------", "\n", "", "outputs", "=", "encoder", "(", "denoiser", "(", "adv_img", ")", ")", "\n", "outputs", "=", "recon_net", "(", "decoder", "(", "outputs", ")", ")", "\n", "adv_loss", "=", "criterion", "(", "outputs", ",", "img_original", ")", "\n", "adv_loss_mean", "=", "adv_loss", ".", "mean", "(", ")", "\n", "adv_losses", ".", "update", "(", "adv_loss_mean", ".", "item", "(", ")", ",", "img", ".", "size", "(", "0", ")", ")", "\n", "\n", "if", "i", "==", "mark", "and", "epoch", "%", "visual_freq", "==", "0", ":", "\n", "                ", "pic", "=", "to_img", "(", "outputs", ".", "cpu", "(", ")", ".", "data", ")", "\n", "save_image", "(", "pic", ",", "os", ".", "path", ".", "join", "(", "outdir", ",", "'Epoch_{epoch}_adv_Loss_{loss:.3f}.png'", ")", ".", "format", "(", "epoch", "=", "epoch", ",", "\n", "loss", "=", "adv_losses", ".", "avg", ")", ")", "\n", "\n", "# ------------- Adversarial Reconstruction Acc with DS + AE using smoothed model --------------", "\n", "", "outputs", "=", "adv_img", ".", "repeat", "(", "(", "1", ",", "noise_num", ",", "1", ",", "1", ")", ")", ".", "view", "(", "-", "1", ",", "channel", ",", "h", ",", "w", ")", "\n", "outputs", "=", "outputs", "+", "torch", ".", "randn_like", "(", "outputs", ",", "device", "=", "'cuda'", ")", "*", "noise_sd", "\n", "outputs", "=", "encoder", "(", "denoiser", "(", "outputs", ")", ")", "\n", "outputs", "=", "recon_net", "(", "decoder", "(", "outputs", ")", ")", "\n", "outputs", "=", "outputs", ".", "view", "(", "-", "1", ",", "batch_size", ",", "noise_num", ",", "channel", ",", "h", ",", "w", ")", ".", "mean", "(", "2", ",", "keepdim", "=", "True", ")", ".", "reshape", "(", "\n", "batch_size", ",", "\n", "channel", ",", "h", ",", "\n", "w", ")", "\n", "smooth_loss", "=", "criterion", "(", "outputs", ",", "img_original", ")", "\n", "smooth_loss_mean", "=", "smooth_loss", ".", "mean", "(", ")", "\n", "smooth_losses", ".", "update", "(", "smooth_loss_mean", ".", "item", "(", ")", ",", "img", ".", "size", "(", "0", ")", ")", "\n", "\n", "if", "i", "==", "mark", "and", "epoch", "%", "visual_freq", "==", "0", ":", "\n", "                ", "pic", "=", "to_img", "(", "outputs", ".", "cpu", "(", ")", ".", "data", ")", "\n", "save_image", "(", "pic", ",", "\n", "os", ".", "path", ".", "join", "(", "outdir", ",", "'Epoch_{epoch}_adv_smooth_Loss_{loss:.3f}.png'", ")", ".", "format", "(", "epoch", "=", "epoch", ",", "\n", "loss", "=", "smooth_losses", ".", "avg", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "", "", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "print_freq", "==", "0", ":", "\n", "            ", "log", "=", "'Test: [{0}/{1}]\\t'", "' \\\n            '", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "' \\\n            '", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "' \\\n            '", "'Clean Loss without Denoiser {loss_no.val:.4f} ({loss_no.avg:.4f})\\t'", "' \\\n            '", "'Clean Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "' \\\n            '", "'Recon_Loss {recon_loss.val:.4f} ({recon_loss.avg:.4f})\\t'", "' \\\n            '", "'Adv_Loss {adv_loss.val:.4f} ({adv_loss.avg:.4f})\\t'", "' \\\n            '", "'Smooth_Loss {smooth_loss.val:.4f} ({smooth_loss.avg:.4f})\\n'", ".", "format", "(", "\n", "i", ",", "len", "(", "loader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ",", "loss_no", "=", "losses_no", ",", "loss", "=", "losses", ",", "recon_loss", "=", "recon_losses", ",", "adv_loss", "=", "adv_losses", ",", "\n", "smooth_loss", "=", "smooth_losses", ")", "\n", "\n", "print", "(", "log", ")", "\n", "\n", "", "", "return", "losses_no", ".", "avg", ",", "smooth_losses_no_clean", ".", "avg", ",", "losses", ".", "avg", ",", "smooth_losses_clean", ".", "avg", ",", "recon_losses", ".", "avg", ",", "smooth_losses_no_adv", ".", "avg", ",", "adv_losses", ".", "avg", ",", "smooth_losses", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.AE_DS_train.to_img": [[1540, 1544], ["x.view.clamp", "x.view.view", "x.view.size"], "function", ["None"], ["", "def", "to_img", "(", "x", ")", ":", "\n", "    ", "x", "=", "x", ".", "clamp", "(", "0", ",", "1", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "28", ",", "28", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.AE_DS_train.frozen_module": [[1545, 1548], ["module.parameters"], "function", ["None"], ["", "def", "frozen_module", "(", "module", ")", ":", "\n", "    ", "for", "param", "in", "module", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.datasets.NormalizeLayer.__init__": [[180, 188], ["super().__init__", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["def", "__init__", "(", "self", ",", "means", ":", "List", "[", "float", "]", ",", "sds", ":", "List", "[", "float", "]", ")", ":", "\n", "        ", "\"\"\"\n        :param means: the channel means\n        :param sds: the channel standard deviations\n        \"\"\"", "\n", "super", "(", "NormalizeLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "means", "=", "torch", ".", "tensor", "(", "means", ")", ".", "cuda", "(", ")", "\n", "self", ".", "sds", "=", "torch", ".", "tensor", "(", "sds", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.datasets.NormalizeLayer.forward": [[189, 194], ["torchvision.datasets.NormalizeLayer.means.repeat().permute", "torchvision.datasets.NormalizeLayer.sds.repeat().permute", "torchvision.datasets.NormalizeLayer.means.repeat", "torchvision.datasets.NormalizeLayer.sds.repeat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ":", "torch", ".", "tensor", ")", ":", "\n", "        ", "(", "batch_size", ",", "num_channels", ",", "height", ",", "width", ")", "=", "input", ".", "shape", "\n", "means", "=", "self", ".", "means", ".", "repeat", "(", "(", "batch_size", ",", "height", ",", "width", ",", "1", ")", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "sds", "=", "self", ".", "sds", ".", "repeat", "(", "(", "batch_size", ",", "height", ",", "width", ",", "1", ")", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "return", "(", "input", "-", "means", ")", "/", "sds", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.datasets.ImageNetDS.__init__": [[231, 269], ["os.path.expanduser", "torchvision.datasets.ImageNetDS.base_folder.format", "numpy.concatenate", "torchvision.datasets.ImageNetDS.train_data.reshape", "torchvision.datasets.ImageNetDS.train_data.transpose", "os.path.join", "open", "pickle.load", "open.close", "torchvision.datasets.ImageNetDS.test_data.reshape", "torchvision.datasets.ImageNetDS.test_data.transpose", "os.path.join", "open", "pickle.load", "torchvision.datasets.ImageNetDS.train_data.append"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "root", ",", "img_size", ",", "train", "=", "True", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "root", "=", "os", ".", "path", ".", "expanduser", "(", "root", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "train", "=", "train", "# training set or test set", "\n", "self", ".", "img_size", "=", "img_size", "\n", "\n", "self", ".", "base_folder", "=", "self", ".", "base_folder", ".", "format", "(", "img_size", ")", "\n", "\n", "# if not self._check_integrity():", "\n", "#    raise RuntimeError('Dataset not found or corrupted.') # TODO", "\n", "\n", "# now load the picked numpy arrays", "\n", "if", "self", ".", "train", ":", "\n", "            ", "self", ".", "train_data", "=", "[", "]", "\n", "self", ".", "train_labels", "=", "[", "]", "\n", "for", "fentry", "in", "self", ".", "train_list", ":", "\n", "                ", "f", "=", "fentry", "[", "0", "]", "\n", "file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "base_folder", ",", "f", ")", "\n", "with", "open", "(", "file", ",", "'rb'", ")", "as", "fo", ":", "\n", "                    ", "entry", "=", "pickle", ".", "load", "(", "fo", ")", "\n", "self", ".", "train_data", ".", "append", "(", "entry", "[", "'data'", "]", ")", "\n", "self", ".", "train_labels", "+=", "[", "label", "-", "1", "for", "label", "in", "entry", "[", "'labels'", "]", "]", "\n", "self", ".", "mean", "=", "entry", "[", "'mean'", "]", "\n", "\n", "", "", "self", ".", "train_data", "=", "np", ".", "concatenate", "(", "self", ".", "train_data", ")", "\n", "self", ".", "train_data", "=", "self", ".", "train_data", ".", "reshape", "(", "(", "self", ".", "train_data", ".", "shape", "[", "0", "]", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "self", ".", "train_data", "=", "self", ".", "train_data", ".", "transpose", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "# convert to HWC", "\n", "", "else", ":", "\n", "            ", "f", "=", "self", ".", "test_list", "[", "0", "]", "[", "0", "]", "\n", "file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "f", ")", "\n", "fo", "=", "open", "(", "file", ",", "'rb'", ")", "\n", "entry", "=", "pickle", ".", "load", "(", "fo", ")", "\n", "self", ".", "test_data", "=", "entry", "[", "'data'", "]", "\n", "self", ".", "test_labels", "=", "[", "label", "-", "1", "for", "label", "in", "entry", "[", "'labels'", "]", "]", "\n", "fo", ".", "close", "(", ")", "\n", "self", ".", "test_data", "=", "self", ".", "test_data", ".", "reshape", "(", "(", "self", ".", "test_data", ".", "shape", "[", "0", "]", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "self", ".", "test_data", "=", "self", ".", "test_data", ".", "transpose", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "# convert to HWC", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.datasets.ImageNetDS.__getitem__": [[270, 294], ["PIL.Image.fromarray", "torchvision.datasets.ImageNetDS.transform", "torchvision.datasets.ImageNetDS.target_transform"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n\n        Returns:\n            tuple: (image, target) where target is index of the target class.\n        \"\"\"", "\n", "if", "self", ".", "train", ":", "\n", "            ", "img", ",", "target", "=", "self", ".", "train_data", "[", "index", "]", ",", "self", ".", "train_labels", "[", "index", "]", "\n", "", "else", ":", "\n", "            ", "img", ",", "target", "=", "self", ".", "test_data", "[", "index", "]", ",", "self", ".", "test_labels", "[", "index", "]", "\n", "\n", "# doing this so that it is consistent with all other datasets", "\n", "# to return a PIL Image", "\n", "", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.datasets.ImageNetDS.__len__": [[295, 300], ["len", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "train", ":", "\n", "            ", "return", "len", "(", "self", ".", "train_data", ")", "\n", "", "else", ":", "\n", "            ", "return", "len", "(", "self", ".", "test_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.datasets.ImageNetDS._check_integrity": [[301, 309], ["os.path.join", "torchvision.datasets.utils.check_integrity"], "methods", ["None"], ["", "", "def", "_check_integrity", "(", "self", ")", ":", "\n", "        ", "root", "=", "self", ".", "root", "\n", "for", "fentry", "in", "(", "self", ".", "train_list", "+", "self", ".", "test_list", ")", ":", "\n", "            ", "filename", ",", "md5", "=", "fentry", "[", "0", "]", ",", "fentry", "[", "1", "]", "\n", "fpath", "=", "os", ".", "path", ".", "join", "(", "root", ",", "self", ".", "base_folder", ",", "filename", ")", "\n", "if", "not", "check_integrity", "(", "fpath", ",", "md5", ")", ":", "\n", "                ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.datasets.get_dataset": [[34, 47], ["datasets._imagenet", "datasets._imagenet32", "datasets._cifar10", "datasets._stl10"], "function", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.datasets._imagenet", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.datasets._imagenet32", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.datasets._cifar10", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.datasets._stl10"], ["def", "get_dataset", "(", "dataset", ":", "str", ",", "split", ":", "str", ")", "->", "Dataset", ":", "\n", "    ", "\"\"\"Return the dataset as a PyTorch Dataset object\"\"\"", "\n", "if", "dataset", "==", "\"imagenet\"", ":", "\n", "        ", "return", "_imagenet", "(", "split", ")", "\n", "\n", "", "elif", "dataset", "==", "\"imagenet32\"", ":", "\n", "        ", "return", "_imagenet32", "(", "split", ")", "\n", "\n", "", "elif", "dataset", "==", "\"cifar10\"", ":", "\n", "        ", "return", "_cifar10", "(", "split", ")", "\n", "\n", "", "elif", "dataset", "==", "\"stl10\"", ":", "\n", "        ", "return", "_stl10", "(", "split", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.datasets.get_num_classes": [[49, 57], ["None"], "function", ["None"], ["", "", "def", "get_num_classes", "(", "dataset", ":", "str", ")", ":", "\n", "    ", "\"\"\"Return the number of classes in the dataset. \"\"\"", "\n", "if", "dataset", "==", "\"imagenet\"", ":", "\n", "        ", "return", "1000", "\n", "", "elif", "dataset", "==", "\"stl10\"", ":", "\n", "        ", "return", "10", "\n", "", "elif", "dataset", "==", "\"cifar10\"", ":", "\n", "        ", "return", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.datasets.get_normalize_layer": [[59, 73], ["datasets.NormalizeLayer", "datasets.NormalizeLayer", "datasets.NormalizeLayer", "datasets.NormalizeLayer", "datasets.NormalizeLayer", "datasets.NormalizeLayer"], "function", ["None"], ["", "", "def", "get_normalize_layer", "(", "dataset", ":", "str", ")", "->", "torch", ".", "nn", ".", "Module", ":", "\n", "    ", "\"\"\"Return the dataset's normalization layer\"\"\"", "\n", "if", "dataset", "==", "\"imagenet\"", ":", "\n", "        ", "return", "NormalizeLayer", "(", "_IMAGENET_MEAN", ",", "_IMAGENET_STDDEV", ")", "\n", "", "elif", "dataset", "==", "\"cifar10\"", ":", "\n", "        ", "return", "NormalizeLayer", "(", "_CIFAR10_MEAN", ",", "_CIFAR10_STDDEV", ")", "\n", "", "elif", "dataset", "==", "\"imagenet32\"", ":", "\n", "        ", "return", "NormalizeLayer", "(", "_IMAGENET_MEAN", ",", "_IMAGENET_STDDEV", ")", "\n", "", "elif", "dataset", "==", "\"tinyimagenet\"", ":", "\n", "        ", "return", "NormalizeLayer", "(", "_IMAGENET_MEAN", ",", "_IMAGENET_STDDEV", ")", "\n", "", "elif", "dataset", "==", "\"mnist\"", ":", "\n", "        ", "return", "NormalizeLayer", "(", "_MNIST_MEAN", ",", "_MNIST_STDDEV", ")", "\n", "", "elif", "dataset", "==", "\"stl10\"", ":", "\n", "        ", "return", "NormalizeLayer", "(", "_STL10_MEAN", ",", "_STL10_STDDEV", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.datasets.get_input_center_layer": [[75, 81], ["InputCenterLayer", "InputCenterLayer"], "function", ["None"], ["", "", "def", "get_input_center_layer", "(", "dataset", ":", "str", ")", "->", "torch", ".", "nn", ".", "Module", ":", "\n", "    ", "\"\"\"Return the dataset's Input Centering layer\"\"\"", "\n", "if", "dataset", "==", "\"imagenet\"", ":", "\n", "        ", "return", "InputCenterLayer", "(", "_IMAGENET_MEAN", ")", "\n", "", "elif", "dataset", "==", "\"cifar10\"", ":", "\n", "        ", "return", "InputCenterLayer", "(", "_CIFAR10_MEAN", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.datasets._stl10": [[97, 109], ["os.path.join", "os.getenv", "torchvision.datasets.STL10", "torchvision.datasets.STL10", "torchvision.datasets.STL10", "Exception", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.ToTensor", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.RandomVerticalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.RandomVerticalFlip", "torchvision.transforms.ToTensor"], "function", ["None"], ["def", "_stl10", "(", "split", ":", "str", ")", "->", "Dataset", ":", "\n", "    ", "dataset_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getenv", "(", "'PT_DATA_DIR'", ",", "'datasets'", ")", ",", "'stl10'", ")", "\n", "if", "split", "==", "\"train\"", ":", "\n", "        ", "return", "datasets", ".", "STL10", "(", "dataset_path", ",", "split", "=", "'train'", ",", "download", "=", "True", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "RandomHorizontalFlip", "(", "p", "=", "0.5", ")", ",", "transforms", ".", "RandomVerticalFlip", "(", "p", "=", "0.5", ")", ",", "transforms", ".", "ToTensor", "(", ")", "]", ")", ")", "\n", "", "if", "split", "==", "\"train+unlabeled\"", ":", "\n", "        ", "return", "datasets", ".", "STL10", "(", "dataset_path", ",", "split", "=", "'train+unlabeled'", ",", "download", "=", "True", ",", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "RandomHorizontalFlip", "(", "p", "=", "0.5", ")", ",", "transforms", ".", "RandomVerticalFlip", "(", "p", "=", "0.5", ")", ",", "transforms", ".", "ToTensor", "(", ")", "]", ")", ")", "\n", "", "elif", "split", "==", "\"test\"", ":", "\n", "        ", "return", "datasets", ".", "STL10", "(", "dataset_path", ",", "split", "=", "'test'", ",", "download", "=", "True", ",", "transform", "=", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"Unknown split name.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.datasets._cifar10": [[111, 124], ["os.path.join", "os.getenv", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "Exception", "torchvision.transforms.Compose", "torchvision.transforms.ToTensor", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor"], "function", ["None"], ["", "", "def", "_cifar10", "(", "split", ":", "str", ")", "->", "Dataset", ":", "\n", "    ", "dataset_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getenv", "(", "'PT_DATA_DIR'", ",", "'datasets'", ")", ",", "'dataset_cache'", ")", "\n", "if", "split", "==", "\"train\"", ":", "\n", "        ", "return", "datasets", ".", "CIFAR10", "(", "dataset_path", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "\n", "]", ")", ")", "\n", "", "elif", "split", "==", "\"test\"", ":", "\n", "        ", "return", "datasets", ".", "CIFAR10", "(", "dataset_path", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"Unknown split name.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.datasets._mnist": [[125, 134], ["os.path.join", "os.getenv", "torchvision.datasets.MNIST", "torchvision.datasets.MNIST", "Exception", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor"], "function", ["None"], ["", "", "def", "_mnist", "(", "split", ":", "str", ")", "->", "Dataset", ":", "\n", "    ", "dataset_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getenv", "(", "'PT_DATA_DIR'", ",", "'datasets'", ")", ",", "'dataset_cache'", ")", "\n", "if", "split", "==", "\"train\"", ":", "\n", "        ", "return", "datasets", ".", "MNIST", "(", "dataset_path", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "", "elif", "split", "==", "\"test\"", ":", "\n", "        ", "return", "datasets", ".", "MNIST", "(", "dataset_path", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"Unknown split name.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.datasets._imagenet": [[136, 156], ["torchvision.datasets.ImageFolder", "RuntimeError", "os.path.join", "torchvision.transforms.Compose", "os.path.join", "torchvision.transforms.Compose", "torchvision.transforms.RandomSizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor"], "function", ["None"], ["", "", "def", "_imagenet", "(", "split", ":", "str", ")", "->", "Dataset", ":", "\n", "    ", "if", "not", "IMAGENET_LOC_ENV", "in", "os", ".", "environ", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"environment variable for ImageNet directory not set\"", ")", "\n", "\n", "", "dir", "=", "os", ".", "environ", "[", "IMAGENET_LOC_ENV", "]", "\n", "if", "split", "==", "\"train\"", ":", "\n", "        ", "subdir", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "\"train\"", ")", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomSizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "\n", "]", ")", "\n", "", "elif", "split", "==", "\"test\"", ":", "\n", "        ", "subdir", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "\"val\"", ")", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "\n", "]", ")", "\n", "", "return", "datasets", ".", "ImageFolder", "(", "subdir", ",", "transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.None.datasets._imagenet32": [[158, 169], ["os.path.join", "os.getenv", "datasets.ImageNetDS", "datasets.ImageNetDS", "torchvision.transforms.Compose", "torchvision.transforms.ToTensor", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor"], "function", ["None"], ["", "def", "_imagenet32", "(", "split", ":", "str", ")", "->", "Dataset", ":", "\n", "    ", "dataset_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getenv", "(", "'PT_DATA_DIR'", ",", "'datasets'", ")", ",", "'Imagenet32'", ")", "\n", "\n", "if", "split", "==", "\"train\"", ":", "\n", "        ", "return", "ImageNetDS", "(", "dataset_path", ",", "32", ",", "train", "=", "True", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "]", ")", ")", "\n", "\n", "", "elif", "split", "==", "\"test\"", ":", "\n", "        ", "return", "ImageNetDS", "(", "dataset_path", ",", "32", ",", "train", "=", "False", ",", "transform", "=", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.vrnet.RBFActivationFunction.forward": [[34, 64], ["input.new_zeros", "input.new_zeros", "range", "ctx.save_for_backward", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "w", ",", "mu", ",", "sigma", ")", ":", "\n", "        ", "\"\"\" Forward pass for RBF activation\n\n        Parameters:\n        ----------\n        ctx: \n        input: torch tensor (NxCxHxW)\n            input tensor\n        w: torch tensor (1 x C x 1 x 1 x # of RBF kernels)\n            weight of the RBF kernels\n        mu: torch tensor (# of RBF kernels)\n            center of the RBF\n        sigma: torch tensor (1)\n            std of the RBF\n\n        Returns:\n        ----------\n        torch tensor: linear weight combination of RBF of input\n        \"\"\"", "\n", "num_act_weights", "=", "w", ".", "shape", "[", "-", "1", "]", "\n", "output", "=", "input", ".", "new_zeros", "(", "input", ".", "shape", ")", "\n", "rbf_grad_input", "=", "input", ".", "new_zeros", "(", "input", ".", "shape", ")", "\n", "for", "i", "in", "range", "(", "num_act_weights", ")", ":", "\n", "            ", "tmp", "=", "w", "[", ":", ",", ":", ",", ":", ",", ":", ",", "i", "]", "*", "torch", ".", "exp", "(", "-", "torch", ".", "square", "(", "input", "-", "mu", "[", "i", "]", ")", "/", "(", "2", "*", "sigma", "**", "2", ")", ")", "\n", "output", "+=", "tmp", "\n", "rbf_grad_input", "+=", "tmp", "*", "(", "-", "(", "input", "-", "mu", "[", "i", "]", ")", ")", "/", "(", "sigma", "**", "2", ")", "\n", "", "del", "tmp", "\n", "ctx", ".", "save_for_backward", "(", "input", ",", "w", ",", "mu", ",", "sigma", ",", "rbf_grad_input", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.vrnet.RBFActivationFunction.backward": [[65, 80], ["w.new_zeros", "range", "tmp.view", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "input", ",", "w", ",", "mu", ",", "sigma", ",", "rbf_grad_input", "=", "ctx", ".", "saved_tensors", "\n", "num_act_weights", "=", "w", ".", "shape", "[", "-", "1", "]", "\n", "\n", "#if ctx.needs_input_grad[0]:", "\n", "grad_input", "=", "grad_output", "*", "rbf_grad_input", "\n", "\n", "#if ctx.need_input_grad[1]:", "\n", "grad_w", "=", "w", ".", "new_zeros", "(", "w", ".", "shape", ")", "\n", "for", "i", "in", "range", "(", "num_act_weights", ")", ":", "\n", "            ", "tmp", "=", "(", "grad_output", "*", "torch", ".", "exp", "(", "-", "torch", ".", "square", "(", "input", "-", "mu", "[", "i", "]", ")", "/", "(", "2", "*", "sigma", "**", "2", ")", ")", ")", ".", "sum", "(", "(", "0", ",", "2", ",", "3", ")", ")", "\n", "grad_w", "[", ":", ",", ":", ",", ":", ",", ":", ",", "i", "]", "=", "tmp", ".", "view", "(", "w", ".", "shape", "[", "0", ":", "-", "1", "]", ")", "\n", "\n", "", "return", "grad_input", ",", "grad_w", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.vrnet.RBFActivation.__init__": [[84, 107], ["torch.Module.__init__", "numpy.linspace", "numpy.linspace", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.reshape", "numpy.repeat", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.sign", "numpy.maximum", "ValueError", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "options", "=", "kwargs", "\n", "x_0", "=", "np", ".", "linspace", "(", "kwargs", "[", "'vmin'", "]", ",", "kwargs", "[", "'vmax'", "]", ",", "kwargs", "[", "'num_act_weights'", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "mu", "=", "np", ".", "linspace", "(", "kwargs", "[", "'vmin'", "]", ",", "kwargs", "[", "'vmax'", "]", ",", "kwargs", "[", "'num_act_weights'", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "sigma", "=", "2", "*", "kwargs", "[", "'vmax'", "]", "/", "(", "kwargs", "[", "'num_act_weights'", "]", "-", "1", ")", "\n", "self", ".", "sigma", "=", "torch", ".", "tensor", "(", "self", ".", "sigma", ")", "\n", "if", "kwargs", "[", "'init_type'", "]", "==", "'linear'", ":", "\n", "            ", "w_0", "=", "kwargs", "[", "'init_scale'", "]", "*", "x_0", "\n", "", "elif", "kwargs", "[", "'init_type'", "]", "==", "'tv'", ":", "\n", "            ", "w_0", "=", "kwargs", "[", "'init_scale'", "]", "*", "np", ".", "sign", "(", "x_0", ")", "\n", "", "elif", "kwargs", "[", "'init_type'", "]", "==", "'relu'", ":", "\n", "            ", "w_0", "=", "kwargs", "[", "'init_scale'", "]", "*", "np", ".", "maximum", "(", "x_0", ",", "0", ")", "\n", "", "elif", "kwargs", "[", "'init_type'", "]", "==", "'student-t'", ":", "\n", "            ", "alpha", "=", "100", "\n", "w_0", "=", "kwargs", "[", "'init_scale'", "]", "*", "np", ".", "sqrt", "(", "alpha", ")", "*", "x_0", "/", "(", "1", "+", "0.5", "*", "alpha", "*", "x_0", "**", "2", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"init_type '%s' not defined!\"", "%", "kwargs", "[", "'init_type'", "]", ")", "\n", "", "w_0", "=", "np", ".", "reshape", "(", "w_0", ",", "(", "1", ",", "1", ",", "1", ",", "1", ",", "kwargs", "[", "'num_act_weights'", "]", ")", ")", "\n", "w_0", "=", "np", ".", "repeat", "(", "w_0", ",", "kwargs", "[", "'features_out'", "]", ",", "1", ")", "\n", "self", ".", "w", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "from_numpy", "(", "w_0", ")", ")", "\n", "self", ".", "mu", "=", "torch", ".", "from_numpy", "(", "mu", ")", "\n", "self", ".", "rbf_act", "=", "RBFActivationFunction", ".", "apply", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.vrnet.RBFActivation.forward": [[108, 127], ["vrnet.RBFActivation.rbf_act", "vrnet.RBFActivation.mu.to", "vrnet.RBFActivation.sigma.to"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# x = x.unsqueeze(-1)", "\n", "# x = x.repeat((1,1,1,1,self.mu.shape[-1]))", "\n", "# if not self.mu.device == x.device:", "\n", "#     self.mu = self.mu.to(x.device)", "\n", "#     self.std = self.std.to(x.device)", "\n", "# gaussian = torch.exp(-torch.square(x - self.mu)/(2*self.std ** 2))", "\n", "# weighted_gaussian = self.w_0 * gaussian", "\n", "# out = torch.sum(weighted_gaussian,axis=-1,keepdim=False)", "\n", "        ", "if", "not", "self", ".", "mu", ".", "device", "==", "x", ".", "device", ":", "\n", "        \t", "self", ".", "mu", "=", "self", ".", "mu", ".", "to", "(", "x", ".", "device", ")", "\n", "self", ".", "sigma", "=", "self", ".", "sigma", ".", "to", "(", "x", ".", "device", ")", "\n", "\n", "# out = torch.zeros(x.shape,dtype=torch.float32,device=x.device)", "\n", "# for i in range(self.options['num_act_weights']):", "\n", "# \tout += self.w_0[:,:,:,:,i] * torch.exp(-torch.square(x - self.mu[:,:,:,:,i])/(2*self.std ** 2))", "\n", "", "output", "=", "self", ".", "rbf_act", "(", "x", ",", "self", ".", "w", ",", "self", ".", "mu", ",", "self", ".", "sigma", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.vrnet.VnMriReconCell.__init__": [[130, 149], ["torch.Module.__init__", "numpy.mean", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "numpy.random.randn().astype", "numpy.sqrt", "zero_mean_norm_ball", "vrnet.RBFActivation", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "numpy.random.randn"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "options", "=", "kwargs", "\n", "self", ".", "options", "=", "options", "\n", "conv_kernel", "=", "np", ".", "random", ".", "randn", "(", "options", "[", "'features_out'", "]", ",", "options", "[", "'features_in'", "]", ",", "options", "[", "'kernel_size'", "]", ",", "options", "[", "'kernel_size'", "]", ",", "2", ")", ".", "astype", "(", "np", ".", "float32", ")", "/", "np", ".", "sqrt", "(", "options", "[", "'kernel_size'", "]", "**", "2", "*", "2", "*", "options", "[", "'features_in'", "]", ")", "\n", "conv_kernel", "-=", "np", ".", "mean", "(", "conv_kernel", ",", "axis", "=", "(", "1", ",", "2", ",", "3", ",", "4", ")", ",", "keepdims", "=", "True", ")", "\n", "conv_kernel", "=", "torch", ".", "from_numpy", "(", "conv_kernel", ")", "\n", "if", "options", "[", "'do_prox_map'", "]", ":", "\n", "            ", "conv_kernel", "=", "zero_mean_norm_ball", "(", "conv_kernel", ",", "axis", "=", "(", "1", ",", "2", ",", "3", ",", "4", ")", ")", "\n", "\n", "\n", "", "self", ".", "conv_kernel", "=", "torch", ".", "nn", ".", "Parameter", "(", "conv_kernel", ")", "\n", "\n", "if", "self", ".", "options", "[", "'activation'", "]", "==", "'rbf'", ":", "\n", "            ", "self", ".", "activation", "=", "RBFActivation", "(", "**", "options", ")", "\n", "", "elif", "self", ".", "options", "[", "'activation'", "]", "==", "'relu'", ":", "\n", "            ", "self", ".", "activation", "=", "torch", ".", "nn", ".", "ReLU", "(", ")", "\n", "", "self", ".", "lamb", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "options", "[", "'lamb_init'", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.vrnet.VnMriReconCell.mri_forward_op": [[151, 188], ["torch.pad.unsqueeze", "fft_utils.complex_mul", "fft_utils.fftc2d", "sampling_mask.unsqueeze", "mask.repeat.repeat.unsqueeze", "mask.repeat.repeat.repeat", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.pad", "torch.pad", "torch.pad"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.fft_utils.complex_mul", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.fft_utils.fftc2d"], ["", "def", "mri_forward_op", "(", "self", ",", "u", ",", "coil_sens", ",", "sampling_mask", ",", "os", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Forward pass with kspace\n        (2X the size)\n        \n        Parameters:\n        ----------\n        u: torch tensor NxHxWx2\n            complex input image\n        coil_sens: torch tensor NxCxHxWx2\n            coil sensitivity map\n        sampling_mask: torch tensor NxHxW\n            sampling mask to undersample kspace\n        os: bool\n            whether the data is oversampled in frequency encoding\n\n        Returns:\n        -----------\n        kspace of u with applied coil sensitivity and sampling mask\n        \"\"\"", "\n", "if", "os", ":", "\n", "            ", "pad_u", "=", "torch", ".", "tensor", "(", "(", "sampling_mask", ".", "shape", "[", "1", "]", "*", "0.25", "+", "1", ")", ",", "dtype", "=", "torch", ".", "int16", ")", "\n", "pad_l", "=", "torch", ".", "tensor", "(", "(", "sampling_mask", ".", "shape", "[", "1", "]", "*", "0.25", "-", "1", ")", ",", "dtype", "=", "torch", ".", "int16", ")", "\n", "u_pad", "=", "F", ".", "pad", "(", "u", ",", "[", "0", ",", "0", ",", "0", ",", "0", ",", "pad_u", ",", "pad_l", "]", ")", "\n", "", "else", ":", "\n", "            ", "u_pad", "=", "u", "\n", "", "u_pad", "=", "u_pad", ".", "unsqueeze", "(", "1", ")", "\n", "coil_imgs", "=", "complex_mul", "(", "u_pad", ",", "coil_sens", ")", "# NxCxHxWx2", "\n", "\n", "Fu", "=", "fftc2d", "(", "coil_imgs", ")", "#", "\n", "\n", "mask", "=", "sampling_mask", ".", "unsqueeze", "(", "1", ")", "# Nx1xHxW", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "4", ")", "# Nx1xHxWx1", "\n", "mask", "=", "mask", ".", "repeat", "(", "[", "1", ",", "1", ",", "1", ",", "1", ",", "2", "]", ")", "# Nx1xHxWx2", "\n", "\n", "kspace", "=", "mask", "*", "Fu", "# NxCxHxWx2", "\n", "return", "kspace", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.vrnet.VnMriReconCell.mri_adjoint_op": [[189, 225], ["sampling_mask.unsqueeze", "mask.repeat.repeat.unsqueeze", "mask.repeat.repeat.repeat", "fft_utils.ifftc2d", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "fft_utils.complex_mul", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "fft_utils.conj"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.fft_utils.ifftc2d", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.fft_utils.complex_mul", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.fft_utils.conj"], ["", "def", "mri_adjoint_op", "(", "self", ",", "f", ",", "coil_sens", ",", "sampling_mask", ",", "os", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Adjoint operation that convert kspace to coil-combined under-sampled image\n        by using coil_sens and sampling mask\n        \n        Parameters:\n        ----------\n        f: torch tensor NxCxHxWx2\n            multi channel kspace\n        coil_sens: torch tensor NxCxHxWx2\n            coil sensitivity map\n        sampling_mask: torch tensor NxHxW\n            sampling mask to undersample kspace\n        os: bool\n            whether the data is oversampled in frequency encoding\n        Returns:\n        -----------\n        Undersampled, coil-combined image\n        \"\"\"", "\n", "\n", "# Apply mask and perform inverse centered Fourier transform", "\n", "mask", "=", "sampling_mask", ".", "unsqueeze", "(", "1", ")", "# Nx1xHxW", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "4", ")", "# Nx1xHxWx1", "\n", "mask", "=", "mask", ".", "repeat", "(", "[", "1", ",", "1", ",", "1", ",", "1", ",", "2", "]", ")", "# Nx1xHxWx2", "\n", "\n", "Finv", "=", "ifftc2d", "(", "mask", "*", "f", ")", "# NxCxHxWx2", "\n", "# multiply coil images with sensitivities and sum up over channels", "\n", "img", "=", "torch", ".", "sum", "(", "complex_mul", "(", "Finv", ",", "conj", "(", "coil_sens", ")", ")", ",", "1", ")", "\n", "\n", "if", "os", ":", "\n", "# Padding to remove FE oversampling", "\n", "            ", "pad_u", "=", "torch", ".", "tensor", "(", "(", "sampling_mask", ".", "shape", "[", "1", "]", "*", "0.25", "+", "1", ")", ",", "dtype", "=", "torch", ".", "int16", ")", "\n", "pad_l", "=", "torch", ".", "tensor", "(", "(", "sampling_mask", ".", "shape", "[", "1", "]", "*", "0.25", "-", "1", ")", ",", "dtype", "=", "torch", ".", "int16", ")", "\n", "img", "=", "img", "[", ":", ",", "pad_u", ":", "-", "pad_l", ",", ":", ",", ":", "]", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.vrnet.VnMriReconCell.forward": [[226, 271], ["u_t_1.unsqueeze.unsqueeze.unsqueeze", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "vrnet.VnMriReconCell.activation", "torch.conv_transpose2d", "torch.conv_transpose2d", "torch.conv_transpose2d", "torch.conv_transpose2d", "torch.conv_transpose2d", "torch.conv_transpose2d", "u_k_T_real.unsqueeze.unsqueeze.unsqueeze", "u_k_T_imag.unsqueeze.unsqueeze.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "vrnet.VnMriReconCell.mri_forward_op", "vrnet.VnMriReconCell.mri_adjoint_op"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.vrnet.VnMriReconCell.mri_forward_op", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.vrnet.VnMriReconCell.mri_adjoint_op"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "u_t_1", "=", "inputs", "[", "'u_t'", "]", "#NxHxWx2", "\n", "f", "=", "inputs", "[", "'f'", "]", "\n", "c", "=", "inputs", "[", "'coil_sens'", "]", "\n", "m", "=", "inputs", "[", "'sampling_mask'", "]", "\n", "\n", "u_t_1", "=", "u_t_1", ".", "unsqueeze", "(", "1", ")", "#Nx1xHxWx2", "\n", "# pad the image to avoid problems at the border", "\n", "pad", "=", "self", ".", "options", "[", "'pad'", "]", "\n", "u_t_real", "=", "u_t_1", "[", ":", ",", ":", ",", ":", ",", ":", ",", "0", "]", "\n", "u_t_imag", "=", "u_t_1", "[", ":", ",", ":", ",", ":", ",", ":", ",", "1", "]", "\n", "\n", "u_t_real", "=", "F", ".", "pad", "(", "u_t_real", ",", "[", "pad", ",", "pad", ",", "pad", ",", "pad", "]", ",", "mode", "=", "'reflect'", ")", "#to do: implement symmetric padding", "\n", "u_t_imag", "=", "F", ".", "pad", "(", "u_t_imag", ",", "[", "pad", ",", "pad", ",", "pad", ",", "pad", "]", ",", "mode", "=", "'reflect'", ")", "\n", "# split the image in real and imaginary part and perform convolution", "\n", "u_k_real", "=", "F", ".", "conv2d", "(", "u_t_real", ",", "self", ".", "conv_kernel", "[", ":", ",", ":", ",", ":", ",", ":", ",", "0", "]", ",", "stride", "=", "1", ",", "padding", "=", "5", ")", "\n", "u_k_imag", "=", "F", ".", "conv2d", "(", "u_t_imag", ",", "self", ".", "conv_kernel", "[", ":", ",", ":", ",", ":", ",", ":", ",", "1", "]", ",", "stride", "=", "1", ",", "padding", "=", "5", ")", "\n", "# add up the convolution results", "\n", "u_k", "=", "u_k_real", "+", "u_k_imag", "\n", "#apply activation function", "\n", "f_u_k", "=", "self", ".", "activation", "(", "u_k", ")", "\n", "# perform transpose convolution for real and imaginary part", "\n", "u_k_T_real", "=", "F", ".", "conv_transpose2d", "(", "f_u_k", ",", "self", ".", "conv_kernel", "[", ":", ",", ":", ",", ":", ",", ":", ",", "0", "]", ",", "stride", "=", "1", ",", "padding", "=", "5", ")", "\n", "u_k_T_imag", "=", "F", ".", "conv_transpose2d", "(", "f_u_k", ",", "self", ".", "conv_kernel", "[", ":", ",", ":", ",", ":", ",", ":", ",", "1", "]", ",", "stride", "=", "1", ",", "padding", "=", "5", ")", "\n", "\n", "#Rebuild complex image", "\n", "u_k_T_real", "=", "u_k_T_real", ".", "unsqueeze", "(", "-", "1", ")", "\n", "u_k_T_imag", "=", "u_k_T_imag", ".", "unsqueeze", "(", "-", "1", ")", "\n", "u_k_T", "=", "torch", ".", "cat", "(", "(", "u_k_T_real", ",", "u_k_T_imag", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "#Remove padding and normalize by number of filter", "\n", "Ru", "=", "u_k_T", "[", ":", ",", "0", ",", "pad", ":", "-", "pad", ",", "pad", ":", "-", "pad", ",", ":", "]", "#NxHxWx2", "\n", "Ru", "/=", "self", ".", "options", "[", "'features_out'", "]", "\n", "\n", "if", "self", ".", "options", "[", "'sampling_pattern'", "]", "==", "'cartesian'", ":", "\n", "            ", "os", "=", "False", "\n", "", "elif", "not", "'sampling_pattern'", "in", "self", ".", "options", "or", "self", ".", "options", "[", "'sampling_pattern'", "]", "==", "'cartesian_with_os'", ":", "\n", "            ", "os", "=", "True", "\n", "\n", "", "Au", "=", "self", ".", "mri_forward_op", "(", "u_t_1", "[", ":", ",", "0", ",", ":", ",", ":", ",", ":", "]", ",", "c", ",", "m", ",", "os", ")", "\n", "At_Au_f", "=", "self", ".", "mri_adjoint_op", "(", "Au", "-", "f", ",", "c", ",", "m", ",", "os", ")", "\n", "Du", "=", "At_Au_f", "*", "self", ".", "lamb", "\n", "u_t", "=", "u_t_1", "[", ":", ",", "0", ",", ":", ",", ":", ",", ":", "]", "-", "Ru", "-", "Du", "\n", "output", "=", "{", "'u_t'", ":", "u_t", ",", "'f'", ":", "f", ",", "'coil_sens'", ":", "c", ",", "'sampling_mask'", ":", "m", "}", "\n", "return", "output", "#NxHxWx2", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.vrnet.VariationalNetwork.__init__": [[273, 287], ["torch.Module.__init__", "kwargs.keys", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "cell_list.append", "vrnet.VnMriReconCell"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "options", "=", "DEFAULT_OPTS", "\n", "\n", "for", "key", "in", "kwargs", ".", "keys", "(", ")", ":", "\n", "            ", "options", "[", "key", "]", "=", "kwargs", "[", "key", "]", "\n", "\n", "", "self", ".", "options", "=", "options", "\n", "cell_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "options", "[", "'num_stages'", "]", ")", ":", "\n", "            ", "cell_list", ".", "append", "(", "VnMriReconCell", "(", "**", "options", ")", ")", "\n", "\n", "", "self", ".", "cell_list", "=", "nn", ".", "Sequential", "(", "*", "cell_list", ")", "\n", "self", ".", "log_img_count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.vrnet.VariationalNetwork.forward": [[288, 291], ["vrnet.VariationalNetwork.cell_list"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "output", "=", "self", ".", "cell_list", "(", "inputs", ")", "\n", "return", "output", "[", "'u_t'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.vrnet.main": [[293, 296], ["vrnet.VariationalNetwork", "print"], "function", ["None"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "test", "=", "VariationalNetwork", "(", ")", "\n", "print", "(", "test", ")", "\n", "", "if", "__name__", "==", "\"__main__\"", ":", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.mobilenet.Block.__init__": [[13, 19], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "in_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "in_planes", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.mobilenet.Block.forward": [[20, 24], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "mobilenet.Block.bn1", "mobilenet.Block.bn2", "mobilenet.Block.conv1", "mobilenet.Block.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.mobilenet.MobileNet.__init__": [[30, 36], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "mobilenet.MobileNet._make_layers", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.mobilenetv2.MobileNetV2._make_layers"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "MobileNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "layers", "=", "self", ".", "_make_layers", "(", "in_planes", "=", "32", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "1024", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.mobilenet.MobileNet._make_layers": [[37, 45], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "isinstance", "isinstance", "mobilenet.Block"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "in_planes", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "x", "in", "self", ".", "cfg", ":", "\n", "            ", "out_planes", "=", "x", "if", "isinstance", "(", "x", ",", "int", ")", "else", "x", "[", "0", "]", "\n", "stride", "=", "1", "if", "isinstance", "(", "x", ",", "int", ")", "else", "x", "[", "1", "]", "\n", "layers", ".", "append", "(", "Block", "(", "in_planes", ",", "out_planes", ",", "stride", ")", ")", "\n", "in_planes", "=", "out_planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.mobilenet.MobileNet.forward": [[46, 53], ["torch.relu", "torch.relu", "torch.relu", "mobilenet.MobileNet.layers", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "mobilenet.MobileNet.view", "mobilenet.MobileNet.linear", "mobilenet.MobileNet.bn1", "mobilenet.MobileNet.size", "mobilenet.MobileNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layers", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "2", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.mobilenet.test": [[55, 60], ["mobilenet.MobileNet", "torch.randn", "torch.randn", "torch.randn", "MobileNet.", "print", "net.size"], "function", ["None"], ["", "", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "MobileNet", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.vgg.VGG.__init__": [[15, 19], ["torch.Module.__init__", "vgg.VGG._make_layers", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.mobilenetv2.MobileNetV2._make_layers"], ["    ", "def", "__init__", "(", "self", ",", "vgg_name", ")", ":", "\n", "        ", "super", "(", "VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "self", ".", "_make_layers", "(", "cfg", "[", "vgg_name", "]", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "512", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.vgg.VGG.forward": [[20, 25], ["vgg.VGG.features", "vgg.VGG.view", "vgg.VGG.classifier", "vgg.VGG.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "features", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.vgg.VGG._make_layers": [[26, 39], ["torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "in_channels", "=", "3", "\n", "for", "x", "in", "cfg", ":", "\n", "            ", "if", "x", "==", "'M'", ":", "\n", "                ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "", "else", ":", "\n", "                ", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "in_channels", ",", "x", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "x", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "in_channels", "=", "x", "\n", "", "", "layers", "+=", "[", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "]", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.vgg.test": [[41, 46], ["vgg.VGG", "torch.randn", "torch.randn", "VGG.", "print", "net.size"], "function", ["None"], ["", "", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "VGG", "(", "'VGG11'", ")", "\n", "x", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cifar_resnet.BasicBlock.__init__": [[22, 31], ["torch.Module.__init__", "cifar_resnet.conv3x3", "torch.BatchNorm2d", "torch.ReLU", "cifar_resnet.conv3x3", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.resnet.conv3x3", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cifar_resnet.BasicBlock.forward": [[32, 49], ["cifar_resnet.BasicBlock.conv1", "cifar_resnet.BasicBlock.bn1", "cifar_resnet.BasicBlock.relu", "cifar_resnet.BasicBlock.conv2", "cifar_resnet.BasicBlock.bn2", "cifar_resnet.BasicBlock.relu", "cifar_resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cifar_resnet.Bottleneck.__init__": [[54, 66], ["torch.Module.__init__", "torch.Conv2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cifar_resnet.Bottleneck.forward": [[67, 88], ["cifar_resnet.Bottleneck.conv1", "cifar_resnet.Bottleneck.bn1", "cifar_resnet.Bottleneck.relu", "cifar_resnet.Bottleneck.conv2", "cifar_resnet.Bottleneck.bn2", "cifar_resnet.Bottleneck.relu", "cifar_resnet.Bottleneck.conv3", "cifar_resnet.Bottleneck.bn3", "cifar_resnet.Bottleneck.relu", "cifar_resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cifar_resnet.ResNet.__init__": [[92, 125], ["torch.Module.__init__", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "cifar_resnet.ResNet._make_layer", "cifar_resnet.ResNet._make_layer", "cifar_resnet.ResNet._make_layer", "torch.AvgPool2d", "torch.Linear", "cifar_resnet.ResNet.modules", "block_name.lower", "isinstance", "block_name.lower", "ValueError", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.NetworkBlock._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "num_classes", "=", "1000", ",", "block_name", "=", "'BasicBlock'", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Model type specifies number of layers for CIFAR-10 model", "\n", "if", "block_name", ".", "lower", "(", ")", "==", "'basicblock'", ":", "\n", "            ", "assert", "(", "depth", "-", "2", ")", "%", "6", "==", "0", ",", "'When use basicblock, depth should be 6n+2, e.g. 20, 32, 44, 56, 110, 1202'", "\n", "n", "=", "(", "depth", "-", "2", ")", "//", "6", "\n", "block", "=", "BasicBlock", "\n", "", "elif", "block_name", ".", "lower", "(", ")", "==", "'bottleneck'", ":", "\n", "            ", "assert", "(", "depth", "-", "2", ")", "%", "9", "==", "0", ",", "'When use bottleneck, depth should be 9n+2, e.g. 20, 29, 47, 56, 110, 1199'", "\n", "n", "=", "(", "depth", "-", "2", ")", "//", "9", "\n", "block", "=", "Bottleneck", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'block_name shoule be Basicblock or Bottleneck'", ")", "\n", "\n", "\n", "", "self", ".", "inplanes", "=", "16", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "16", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "n", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "n", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "n", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "64", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cifar_resnet.ResNet._make_layer": [[126, 142], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cifar_resnet.ResNet.forward": [[143, 157], ["cifar_resnet.ResNet.conv1", "cifar_resnet.ResNet.bn1", "cifar_resnet.ResNet.relu", "cifar_resnet.ResNet.layer1", "cifar_resnet.ResNet.layer2", "cifar_resnet.ResNet.layer3", "cifar_resnet.ResNet.avgpool", "cifar_resnet.ResNet.view", "cifar_resnet.ResNet.fc", "cifar_resnet.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "# 32x32", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "# 32x32", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "# 16x16", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "# 8x8", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cifar_resnet.conv3x3": [[13, 17], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cifar_resnet.resnet": [[159, 164], ["cifar_resnet.ResNet"], "function", ["None"], ["", "", "def", "resnet", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Constructs a ResNet model.\n    \"\"\"", "\n", "return", "ResNet", "(", "**", "kwargs", ")", "", "", ""]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.efficientnet.Block.__init__": [[13, 39], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "expansion", ",", "stride", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "planes", "=", "expansion", "*", "in_planes", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "planes", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "\n", "planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "==", "1", "and", "in_planes", "!=", "out_planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", ")", "\n", "\n", "# SE layers", "\n", "", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "out_planes", ",", "out_planes", "//", "16", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "out_planes", "//", "16", ",", "out_planes", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.efficientnet.Block.forward": [[40, 51], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "efficientnet.Block.bn3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.relu", "torch.relu", "torch.relu", "efficientnet.Block.fc2().sigmoid", "efficientnet.Block.bn1", "efficientnet.Block.bn2", "efficientnet.Block.conv3", "efficientnet.Block.shortcut", "efficientnet.Block.size", "efficientnet.Block.fc1", "efficientnet.Block.conv1", "efficientnet.Block.conv2", "efficientnet.Block.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "x", ")", "if", "self", ".", "stride", "==", "1", "else", "out", "\n", "# Squeeze-Excitation", "\n", "w", "=", "F", ".", "avg_pool2d", "(", "out", ",", "out", ".", "size", "(", "2", ")", ")", "\n", "w", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "w", ")", ")", "\n", "w", "=", "self", ".", "fc2", "(", "w", ")", ".", "sigmoid", "(", ")", "\n", "out", "=", "out", "*", "w", "+", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.efficientnet.EfficientNet.__init__": [[54, 62], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "efficientnet.EfficientNet._make_layers", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.mobilenetv2.MobileNetV2._make_layers"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "EfficientNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "layers", "=", "self", ".", "_make_layers", "(", "in_planes", "=", "32", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "cfg", "[", "-", "1", "]", "[", "1", "]", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.efficientnet.EfficientNet._make_layers": [[63, 71], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "efficientnet.Block"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "in_planes", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "expansion", ",", "out_planes", ",", "num_blocks", ",", "stride", "in", "self", ".", "cfg", ":", "\n", "            ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "for", "stride", "in", "strides", ":", "\n", "                ", "layers", ".", "append", "(", "Block", "(", "in_planes", ",", "out_planes", ",", "expansion", ",", "stride", ")", ")", "\n", "in_planes", "=", "out_planes", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.efficientnet.EfficientNet.forward": [[72, 78], ["torch.relu", "torch.relu", "torch.relu", "efficientnet.EfficientNet.layers", "efficientnet.EfficientNet.view", "efficientnet.EfficientNet.linear", "efficientnet.EfficientNet.bn1", "efficientnet.EfficientNet.size", "efficientnet.EfficientNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layers", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.efficientnet.EfficientNetB0": [[80, 90], ["efficientnet.EfficientNet"], "function", ["None"], ["", "", "def", "EfficientNetB0", "(", ")", ":", "\n", "# (expansion, out_planes, num_blocks, stride)", "\n", "    ", "cfg", "=", "[", "(", "1", ",", "16", ",", "1", ",", "2", ")", ",", "\n", "(", "6", ",", "24", ",", "2", ",", "1", ")", ",", "\n", "(", "6", ",", "40", ",", "2", ",", "2", ")", ",", "\n", "(", "6", ",", "80", ",", "3", ",", "2", ")", ",", "\n", "(", "6", ",", "112", ",", "3", ",", "1", ")", ",", "\n", "(", "6", ",", "192", ",", "4", ",", "2", ")", ",", "\n", "(", "6", ",", "320", ",", "1", ",", "2", ")", "]", "\n", "return", "EfficientNet", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.efficientnet.test": [[92, 97], ["efficientnet.EfficientNetB0", "torch.randn", "torch.randn", "torch.randn", "EfficientNetB0.", "print"], "function", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.efficientnet.EfficientNetB0"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "EfficientNetB0", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.dncnn.DnCNN.__init__": [[19, 34], ["torch.Module.__init__", "layers.append", "layers.append", "range", "layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "dncnn.DnCNN._initialize_weights", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "layers.append", "layers.append", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.dncnn.DnCNN._initialize_weights"], ["def", "__init__", "(", "self", ",", "depth", "=", "17", ",", "n_channels", "=", "64", ",", "image_channels", "=", "1", ",", "use_bnorm", "=", "True", ",", "kernel_size", "=", "3", ")", ":", "\n", "        ", "super", "(", "DnCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "image_channels", "=", "image_channels", "\n", "padding", "=", "1", "\n", "layers", "=", "[", "]", "\n", "\n", "layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "image_channels", ",", "out_channels", "=", "n_channels", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "padding", ",", "bias", "=", "True", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "for", "_", "in", "range", "(", "depth", "-", "2", ")", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "n_channels", ",", "out_channels", "=", "n_channels", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "padding", ",", "bias", "=", "False", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "n_channels", ",", "eps", "=", "0.0001", ",", "momentum", "=", "0.95", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "n_channels", ",", "out_channels", "=", "image_channels", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "padding", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "dncnn", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "self", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.dncnn.DnCNN.forward": [[35, 39], ["dncnn.DnCNN.dncnn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "x", "\n", "out", "=", "self", ".", "dncnn", "(", "x", ")", "\n", "return", "y", "-", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.dncnn.DnCNN._initialize_weights": [[40, 53], ["dncnn.DnCNN.modules", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "isinstance", "torch.orthogonal_", "torch.orthogonal_", "torch.orthogonal_", "torch.orthogonal_", "isinstance", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "lastcnn", "=", "None", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "lastcnn", "=", "m", "\n", "init", ".", "orthogonal_", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "init", ".", "constant_", "(", "lastcnn", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.mobilenetv2.Block.__init__": [[13, 30], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "expansion", ",", "stride", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "planes", "=", "expansion", "*", "in_planes", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "planes", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "==", "1", "and", "in_planes", "!=", "out_planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.mobilenetv2.Block.forward": [[32, 38], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "mobilenetv2.Block.bn3", "mobilenetv2.Block.bn1", "mobilenetv2.Block.bn2", "mobilenetv2.Block.conv3", "mobilenetv2.Block.conv1", "mobilenetv2.Block.conv2", "mobilenetv2.Block.shortcut"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "=", "out", "+", "self", ".", "shortcut", "(", "x", ")", "if", "self", ".", "stride", "==", "1", "else", "out", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.mobilenetv2.MobileNetV2.__init__": [[50, 59], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "mobilenetv2.MobileNetV2._make_layers", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.mobilenetv2.MobileNetV2._make_layers"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "MobileNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# NOTE: change conv1 stride 2 -> 1 for CIFAR10", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "layers", "=", "self", ".", "_make_layers", "(", "in_planes", "=", "32", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "320", ",", "1280", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "1280", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "1280", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.mobilenetv2.MobileNetV2._make_layers": [[60, 68], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "mobilenetv2.Block"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "in_planes", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "expansion", ",", "out_planes", ",", "num_blocks", ",", "stride", "in", "self", ".", "cfg", ":", "\n", "            ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "for", "stride", "in", "strides", ":", "\n", "                ", "layers", ".", "append", "(", "Block", "(", "in_planes", ",", "out_planes", ",", "expansion", ",", "stride", ")", ")", "\n", "in_planes", "=", "out_planes", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.mobilenetv2.MobileNetV2.forward": [[69, 78], ["torch.relu", "torch.relu", "torch.relu", "mobilenetv2.MobileNetV2.layers", "torch.relu", "torch.relu", "torch.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "mobilenetv2.MobileNetV2.view", "mobilenetv2.MobileNetV2.linear", "mobilenetv2.MobileNetV2.bn1", "mobilenetv2.MobileNetV2.bn2", "mobilenetv2.MobileNetV2.size", "mobilenetv2.MobileNetV2.conv1", "mobilenetv2.MobileNetV2.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layers", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "# NOTE: change pooling kernel_size 7 -> 4 for CIFAR10", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.mobilenetv2.test": [[80, 85], ["mobilenetv2.MobileNetV2", "torch.randn", "torch.randn", "torch.randn", "MobileNetV2.", "print", "net.size"], "function", ["None"], ["", "", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "MobileNetV2", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.pnasnet.SepConv.__init__": [[12, 19], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", ")", ":", "\n", "        ", "super", "(", "SepConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "\n", "kernel_size", ",", "stride", ",", "\n", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "\n", "bias", "=", "False", ",", "groups", "=", "in_planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.pnasnet.SepConv.forward": [[20, 22], ["pnasnet.SepConv.bn1", "pnasnet.SepConv.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.pnasnet.CellA.__init__": [[25, 32], ["torch.Module.__init__", "pnasnet.SepConv", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "CellA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "sep_conv1", "=", "SepConv", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "7", ",", "stride", "=", "stride", ")", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.pnasnet.CellA.forward": [[33, 39], ["pnasnet.CellA.sep_conv1", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.relu", "pnasnet.CellA.bn1", "pnasnet.CellA.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y1", "=", "self", ".", "sep_conv1", "(", "x", ")", "\n", "y2", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "1", ")", "\n", "if", "self", ".", "stride", "==", "2", ":", "\n", "            ", "y2", "=", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "y2", ")", ")", "\n", "", "return", "F", ".", "relu", "(", "y1", "+", "y2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.pnasnet.CellB.__init__": [[41, 55], ["torch.Module.__init__", "pnasnet.SepConv", "pnasnet.SepConv", "pnasnet.SepConv", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "CellB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "# Left branch", "\n", "self", ".", "sep_conv1", "=", "SepConv", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "7", ",", "stride", "=", "stride", ")", "\n", "self", ".", "sep_conv2", "=", "SepConv", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ")", "\n", "# Right branch", "\n", "self", ".", "sep_conv3", "=", "SepConv", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "5", ",", "stride", "=", "stride", ")", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "# Reduce channels", "\n", "", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "2", "*", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.pnasnet.CellB.forward": [[56, 70], ["pnasnet.CellB.sep_conv1", "pnasnet.CellB.sep_conv2", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "pnasnet.CellB.sep_conv3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "pnasnet.CellB.bn1", "pnasnet.CellB.bn2", "pnasnet.CellB.conv1", "pnasnet.CellB.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# Left branch", "\n", "        ", "y1", "=", "self", ".", "sep_conv1", "(", "x", ")", "\n", "y2", "=", "self", ".", "sep_conv2", "(", "x", ")", "\n", "# Right branch", "\n", "y3", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "1", ")", "\n", "if", "self", ".", "stride", "==", "2", ":", "\n", "            ", "y3", "=", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "y3", ")", ")", "\n", "", "y4", "=", "self", ".", "sep_conv3", "(", "x", ")", "\n", "# Concat & reduce channels", "\n", "b1", "=", "F", ".", "relu", "(", "y1", "+", "y2", ")", "\n", "b2", "=", "F", ".", "relu", "(", "y3", "+", "y4", ")", "\n", "y", "=", "torch", ".", "cat", "(", "[", "b1", ",", "b2", "]", ",", "1", ")", "\n", "return", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "y", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.pnasnet.PNASNet.__init__": [[72, 87], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "pnasnet.PNASNet._make_layer", "pnasnet.PNASNet._downsample", "pnasnet.PNASNet._make_layer", "pnasnet.PNASNet._downsample", "pnasnet.PNASNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.pnasnet.PNASNet._downsample", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.pnasnet.PNASNet._downsample", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.NetworkBlock._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "cell_type", ",", "num_cells", ",", "num_planes", ")", ":", "\n", "        ", "super", "(", "PNASNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "num_planes", "\n", "self", ".", "cell_type", "=", "cell_type", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "num_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "num_planes", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "num_planes", ",", "num_cells", "=", "6", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_downsample", "(", "num_planes", "*", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "num_planes", "*", "2", ",", "num_cells", "=", "6", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_downsample", "(", "num_planes", "*", "4", ")", "\n", "self", ".", "layer5", "=", "self", ".", "_make_layer", "(", "num_planes", "*", "4", ",", "num_cells", "=", "6", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "num_planes", "*", "4", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.pnasnet.PNASNet._make_layer": [[88, 94], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "pnasnet.PNASNet.cell_type"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "planes", ",", "num_cells", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "num_cells", ")", ":", "\n", "            ", "layers", ".", "append", "(", "self", ".", "cell_type", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.pnasnet.PNASNet._downsample": [[95, 99], ["pnasnet.PNASNet.cell_type"], "methods", ["None"], ["", "def", "_downsample", "(", "self", ",", "planes", ")", ":", "\n", "        ", "layer", "=", "self", ".", "cell_type", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", "=", "2", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.pnasnet.PNASNet.forward": [[100, 110], ["torch.relu", "torch.relu", "torch.relu", "pnasnet.PNASNet.layer1", "pnasnet.PNASNet.layer2", "pnasnet.PNASNet.layer3", "pnasnet.PNASNet.layer4", "pnasnet.PNASNet.layer5", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "pnasnet.PNASNet.linear", "pnasnet.PNASNet.bn1", "pnasnet.PNASNet.view", "pnasnet.PNASNet.conv1", "pnasnet.PNASNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "self", ".", "layer5", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.pnasnet.PNASNetA": [[112, 114], ["pnasnet.PNASNet"], "function", ["None"], ["", "", "def", "PNASNetA", "(", ")", ":", "\n", "    ", "return", "PNASNet", "(", "CellA", ",", "num_cells", "=", "6", ",", "num_planes", "=", "44", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.pnasnet.PNASNetB": [[115, 117], ["pnasnet.PNASNet"], "function", ["None"], ["", "def", "PNASNetB", "(", ")", ":", "\n", "    ", "return", "PNASNet", "(", "CellB", ",", "num_cells", "=", "6", ",", "num_planes", "=", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.pnasnet.test": [[119, 124], ["pnasnet.PNASNetB", "torch.randn", "torch.randn", "torch.randn", "PNASNetB.", "print"], "function", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.pnasnet.PNASNetB"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "PNASNetB", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.memnet.MemNet.__init__": [[9, 16], ["torch.Module.__init__", "memnet.BNReLUConv", "memnet.BNReLUConv", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "memnet.MemoryBlock", "range"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "channels", ",", "num_memblock", ",", "num_resblock", ")", ":", "\n", "        ", "super", "(", "MemNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "image_channels", "=", "in_channels", "\n", "self", ".", "feature_extractor", "=", "BNReLUConv", "(", "in_channels", ",", "channels", ")", "\n", "self", ".", "reconstructor", "=", "BNReLUConv", "(", "channels", ",", "in_channels", ")", "\n", "self", ".", "dense_memory", "=", "nn", ".", "ModuleList", "(", "\n", "[", "MemoryBlock", "(", "channels", ",", "num_resblock", ",", "i", "+", "1", ")", "for", "i", "in", "range", "(", "num_memblock", ")", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.memnet.MemNet.forward": [[18, 29], ["memnet.MemNet.feature_extractor", "memnet.MemNet.reconstructor", "memory_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# x = x.contiguous()", "\n", "        ", "residual", "=", "x", "\n", "out", "=", "self", ".", "feature_extractor", "(", "x", ")", "\n", "ys", "=", "[", "out", "]", "\n", "for", "memory_block", "in", "self", ".", "dense_memory", ":", "\n", "            ", "out", "=", "memory_block", "(", "out", ",", "ys", ")", "\n", "", "out", "=", "self", ".", "reconstructor", "(", "out", ")", "\n", "out", "=", "out", "+", "residual", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.memnet.MemoryBlock.__init__": [[33, 39], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "memnet.BNReLUConv", "memnet.ResidualBlock", "range"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["def", "__init__", "(", "self", ",", "channels", ",", "num_resblock", ",", "num_memblock", ")", ":", "\n", "        ", "super", "(", "MemoryBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "recursive_unit", "=", "nn", ".", "ModuleList", "(", "\n", "[", "ResidualBlock", "(", "channels", ")", "for", "i", "in", "range", "(", "num_resblock", ")", "]", "\n", ")", "\n", "self", ".", "gate_unit", "=", "BNReLUConv", "(", "(", "num_resblock", "+", "num_memblock", ")", "*", "channels", ",", "channels", ",", "1", ",", "1", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.memnet.MemoryBlock.forward": [[40, 53], ["memnet.MemoryBlock.gate_unit", "ys.append", "layer", "xs.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "ys", ")", ":", "\n", "        ", "\"\"\"ys is a list which contains long-term memory coming from previous memory block\n        xs denotes the short-term memory coming from recursive unit\n        \"\"\"", "\n", "xs", "=", "[", "]", "\n", "residual", "=", "x", "\n", "for", "layer", "in", "self", ".", "recursive_unit", ":", "\n", "            ", "x", "=", "layer", "(", "x", ")", "\n", "xs", ".", "append", "(", "x", ")", "\n", "\n", "", "gate_out", "=", "self", ".", "gate_unit", "(", "torch", ".", "cat", "(", "xs", "+", "ys", ",", "1", ")", ")", "\n", "ys", ".", "append", "(", "gate_out", ")", "\n", "return", "gate_out", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.memnet.ResidualBlock.__init__": [[61, 65], ["super().__init__", "memnet.BNReLUConv", "memnet.BNReLUConv"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["def", "__init__", "(", "self", ",", "channels", ",", "k", "=", "3", ",", "s", "=", "1", ",", "p", "=", "1", ")", ":", "\n", "        ", "super", "(", "ResidualBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "relu_conv1", "=", "BNReLUConv", "(", "channels", ",", "channels", ",", "k", ",", "s", ",", "p", ")", "\n", "self", ".", "relu_conv2", "=", "BNReLUConv", "(", "channels", ",", "channels", ",", "k", ",", "s", ",", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.memnet.ResidualBlock.forward": [[66, 72], ["memnet.ResidualBlock.relu_conv1", "memnet.ResidualBlock.relu_conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "out", "=", "self", ".", "relu_conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "relu_conv2", "(", "out", ")", "\n", "out", "=", "out", "+", "residual", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.memnet.BNReLUConv.__init__": [[75, 80], ["torch.Sequential.__init__", "memnet.BNReLUConv.add_module", "memnet.BNReLUConv.add_module", "memnet.BNReLUConv.add_module", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "channels", ",", "k", "=", "3", ",", "s", "=", "1", ",", "p", "=", "1", ",", "inplace", "=", "True", ")", ":", "\n", "        ", "super", "(", "BNReLUConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_module", "(", "'bn'", ",", "nn", ".", "BatchNorm2d", "(", "in_channels", ")", ")", "\n", "self", ".", "add_module", "(", "'relu'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "inplace", ")", ")", "\n", "self", ".", "add_module", "(", "'conv'", ",", "nn", ".", "Conv2d", "(", "in_channels", ",", "channels", ",", "k", ",", "s", ",", "p", ",", "bias", "=", "False", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.lenet.LeNet.__init__": [[6, 13], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "LeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "6", ",", "5", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "6", ",", "16", ",", "5", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "16", "*", "5", "*", "5", ",", "120", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "120", ",", "84", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "84", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.lenet.LeNet.forward": [[14, 24], ["torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "lenet.LeNet.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lenet.LeNet.fc3", "lenet.LeNet.conv1", "lenet.LeNet.conv2", "lenet.LeNet.size", "lenet.LeNet.fc1", "lenet.LeNet.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "out", "=", "F", ".", "max_pool2d", "(", "out", ",", "2", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "max_pool2d", "(", "out", ",", "2", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "fc3", "(", "out", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cifarnet.CifarNet.__init__": [[6, 16], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CifarNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv2d", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "1", ")", "\n", "self", ".", "conv2d_1", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "1", ")", "\n", "self", ".", "conv2d_2", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "1", ")", "\n", "self", ".", "conv2d_3", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "1", ")", "\n", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "3200", ",", "1024", ")", "\n", "self", ".", "dense_1", "=", "nn", ".", "Linear", "(", "1024", ",", "256", ")", "\n", "self", ".", "dense_2", "=", "nn", ".", "Linear", "(", "256", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cifarnet.CifarNet.forward": [[17, 34], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "cifarnet.CifarNet.contiguous().view", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "cifarnet.CifarNet.dense_2", "cifarnet.CifarNet.conv2d", "cifarnet.CifarNet.conv2d_1", "cifarnet.CifarNet.conv2d_2", "cifarnet.CifarNet.conv2d_3", "cifarnet.CifarNet.dense", "cifarnet.CifarNet.dense_1", "cifarnet.CifarNet.contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "conv2d", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv2d_1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv2d_2", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv2d_3", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "x", "=", "x", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "3200", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "dense", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "0.5", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "dense_1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "0.5", ")", "\n", "x", "=", "self", ".", "dense_2", "(", "x", ")", "\n", "#     x = F.log_softmax(x, dim=1)", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.shufflenet.ShuffleBlock.__init__": [[11, 14], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "groups", ")", ":", "\n", "        ", "super", "(", "ShuffleBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "groups", "=", "groups", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.shufflenet.ShuffleBlock.forward": [[15, 20], ["x.size", "x.view().permute().reshape", "x.view().permute", "x.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''Channel shuffle: [N,C,H,W] -> [N,g,C/g,H,W] -> [N,C/g,g,H,w] -> [N,C,H,W]'''", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "g", "=", "self", ".", "groups", "\n", "return", "x", ".", "view", "(", "N", ",", "g", ",", "C", "//", "g", ",", "H", ",", "W", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", ".", "reshape", "(", "N", ",", "C", ",", "H", ",", "W", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.shufflenet.Bottleneck.__init__": [[23, 40], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "shufflenet.ShuffleBlock", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", ",", "groups", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "mid_planes", "=", "out_planes", "/", "4", "\n", "g", "=", "1", "if", "in_planes", "==", "24", "else", "groups", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "mid_planes", ",", "kernel_size", "=", "1", ",", "groups", "=", "g", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "mid_planes", ")", "\n", "self", ".", "shuffle1", "=", "ShuffleBlock", "(", "groups", "=", "g", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "mid_planes", ",", "mid_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "mid_planes", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "mid_planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "mid_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.shufflenet.Bottleneck.forward": [[41, 49], ["torch.relu", "torch.relu", "torch.relu", "shufflenet.Bottleneck.shuffle1", "torch.relu", "torch.relu", "torch.relu", "shufflenet.Bottleneck.bn3", "shufflenet.Bottleneck.shortcut", "shufflenet.Bottleneck.bn1", "shufflenet.Bottleneck.bn2", "shufflenet.Bottleneck.conv3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "shufflenet.Bottleneck.conv1", "shufflenet.Bottleneck.conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "shuffle1", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "res", "=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "torch", ".", "cat", "(", "[", "out", ",", "res", "]", ",", "1", ")", ")", "if", "self", ".", "stride", "==", "2", "else", "F", ".", "relu", "(", "out", "+", "res", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.shufflenet.ShuffleNet.__init__": [[52, 65], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "shufflenet.ShuffleNet._make_layer", "shufflenet.ShuffleNet._make_layer", "shufflenet.ShuffleNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.NetworkBlock._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "ShuffleNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "out_planes", "=", "cfg", "[", "'out_planes'", "]", "\n", "num_blocks", "=", "cfg", "[", "'num_blocks'", "]", "\n", "groups", "=", "cfg", "[", "'groups'", "]", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "24", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "24", ")", "\n", "self", ".", "in_planes", "=", "24", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "out_planes", "[", "0", "]", ",", "num_blocks", "[", "0", "]", ",", "groups", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "out_planes", "[", "1", "]", ",", "num_blocks", "[", "1", "]", ",", "groups", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "out_planes", "[", "2", "]", ",", "num_blocks", "[", "2", "]", ",", "groups", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "out_planes", "[", "2", "]", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.shufflenet.ShuffleNet._make_layer": [[66, 74], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "shufflenet.Bottleneck"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "out_planes", ",", "num_blocks", ",", "groups", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "stride", "=", "2", "if", "i", "==", "0", "else", "1", "\n", "cat_planes", "=", "self", ".", "in_planes", "if", "i", "==", "0", "else", "0", "\n", "layers", ".", "append", "(", "Bottleneck", "(", "self", ".", "in_planes", ",", "out_planes", "-", "cat_planes", ",", "stride", "=", "stride", ",", "groups", "=", "groups", ")", ")", "\n", "self", ".", "in_planes", "=", "out_planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.shufflenet.ShuffleNet.forward": [[75, 84], ["torch.relu", "torch.relu", "torch.relu", "shufflenet.ShuffleNet.layer1", "shufflenet.ShuffleNet.layer2", "shufflenet.ShuffleNet.layer3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "shufflenet.ShuffleNet.view", "shufflenet.ShuffleNet.linear", "shufflenet.ShuffleNet.bn1", "shufflenet.ShuffleNet.size", "shufflenet.ShuffleNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.shufflenet.ShuffleNetG2": [[86, 93], ["shufflenet.ShuffleNet"], "function", ["None"], ["", "", "def", "ShuffleNetG2", "(", ")", ":", "\n", "    ", "cfg", "=", "{", "\n", "'out_planes'", ":", "[", "200", ",", "400", ",", "800", "]", ",", "\n", "'num_blocks'", ":", "[", "4", ",", "8", ",", "4", "]", ",", "\n", "'groups'", ":", "2", "\n", "}", "\n", "return", "ShuffleNet", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.shufflenet.ShuffleNetG3": [[94, 101], ["shufflenet.ShuffleNet"], "function", ["None"], ["", "def", "ShuffleNetG3", "(", ")", ":", "\n", "    ", "cfg", "=", "{", "\n", "'out_planes'", ":", "[", "240", ",", "480", ",", "960", "]", ",", "\n", "'num_blocks'", ":", "[", "4", ",", "8", ",", "4", "]", ",", "\n", "'groups'", ":", "3", "\n", "}", "\n", "return", "ShuffleNet", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.shufflenet.test": [[103, 108], ["shufflenet.ShuffleNetG2", "torch.randn", "torch.randn", "torch.randn", "ShuffleNetG2.", "print"], "function", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.shufflenet.ShuffleNetG2"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "ShuffleNetG2", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.shufflenetv2.ShuffleBlock.__init__": [[11, 14], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "groups", "=", "2", ")", ":", "\n", "        ", "super", "(", "ShuffleBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "groups", "=", "groups", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.shufflenetv2.ShuffleBlock.forward": [[15, 20], ["x.size", "x.view().permute().reshape", "x.view().permute", "x.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''Channel shuffle: [N,C,H,W] -> [N,g,C/g,H,W] -> [N,C/g,g,H,w] -> [N,C,H,W]'''", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "g", "=", "self", ".", "groups", "\n", "return", "x", ".", "view", "(", "N", ",", "g", ",", "C", "//", "g", ",", "H", ",", "W", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", ".", "reshape", "(", "N", ",", "C", ",", "H", ",", "W", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.shufflenetv2.SplitBlock.__init__": [[23, 26], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ratio", ")", ":", "\n", "        ", "super", "(", "SplitBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ratio", "=", "ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.shufflenetv2.SplitBlock.forward": [[27, 30], ["int", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "c", "=", "int", "(", "x", ".", "size", "(", "1", ")", "*", "self", ".", "ratio", ")", "\n", "return", "x", "[", ":", ",", ":", "c", ",", ":", ",", ":", "]", ",", "x", "[", ":", ",", "c", ":", ",", ":", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.shufflenetv2.BasicBlock.__init__": [[33, 47], ["torch.Module.__init__", "shufflenetv2.SplitBlock", "int", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "shufflenetv2.ShuffleBlock"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "split_ratio", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "split", "=", "SplitBlock", "(", "split_ratio", ")", "\n", "in_channels", "=", "int", "(", "in_channels", "*", "split_ratio", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_channels", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "groups", "=", "in_channels", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "in_channels", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "in_channels", ")", "\n", "self", ".", "shuffle", "=", "ShuffleBlock", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.shufflenetv2.BasicBlock.forward": [[48, 56], ["shufflenetv2.BasicBlock.split", "torch.relu", "torch.relu", "torch.relu", "shufflenetv2.BasicBlock.bn2", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "shufflenetv2.BasicBlock.shuffle", "shufflenetv2.BasicBlock.bn1", "shufflenetv2.BasicBlock.conv2", "shufflenetv2.BasicBlock.bn3", "shufflenetv2.BasicBlock.conv1", "shufflenetv2.BasicBlock.conv3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", ",", "x2", "=", "self", ".", "split", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x2", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "x1", ",", "out", "]", ",", "1", ")", "\n", "out", "=", "self", ".", "shuffle", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.shufflenetv2.DownBlock.__init__": [[59, 81], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "shufflenetv2.ShuffleBlock"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "DownBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "mid_channels", "=", "out_channels", "//", "2", "\n", "# left", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "groups", "=", "in_channels", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_channels", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "mid_channels", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "mid_channels", ")", "\n", "# right", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "mid_channels", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "mid_channels", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "mid_channels", ",", "mid_channels", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "groups", "=", "mid_channels", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm2d", "(", "mid_channels", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "mid_channels", ",", "mid_channels", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn5", "=", "nn", ".", "BatchNorm2d", "(", "mid_channels", ")", "\n", "\n", "self", ".", "shuffle", "=", "ShuffleBlock", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.shufflenetv2.DownBlock.forward": [[82, 94], ["shufflenetv2.DownBlock.bn1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "shufflenetv2.DownBlock.bn4", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "shufflenetv2.DownBlock.shuffle", "shufflenetv2.DownBlock.conv1", "shufflenetv2.DownBlock.bn2", "shufflenetv2.DownBlock.bn3", "shufflenetv2.DownBlock.conv4", "shufflenetv2.DownBlock.bn5", "shufflenetv2.DownBlock.conv2", "shufflenetv2.DownBlock.conv3", "shufflenetv2.DownBlock.conv5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# left", "\n", "        ", "out1", "=", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "out1", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out1", ")", ")", ")", "\n", "# right", "\n", "out2", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "out2", "=", "self", ".", "bn4", "(", "self", ".", "conv4", "(", "out2", ")", ")", "\n", "out2", "=", "F", ".", "relu", "(", "self", ".", "bn5", "(", "self", ".", "conv5", "(", "out2", ")", ")", ")", "\n", "# concat", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out1", ",", "out2", "]", ",", "1", ")", "\n", "out", "=", "self", ".", "shuffle", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.shufflenetv2.ShuffleNetV2.__init__": [[97, 113], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "shufflenetv2.ShuffleNetV2._make_layer", "shufflenetv2.ShuffleNetV2._make_layer", "shufflenetv2.ShuffleNetV2._make_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.NetworkBlock._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "net_size", ")", ":", "\n", "        ", "super", "(", "ShuffleNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "out_channels", "=", "configs", "[", "net_size", "]", "[", "'out_channels'", "]", "\n", "num_blocks", "=", "configs", "[", "net_size", "]", "[", "'num_blocks'", "]", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "24", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "24", ")", "\n", "self", ".", "in_channels", "=", "24", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "out_channels", "[", "0", "]", ",", "num_blocks", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "out_channels", "[", "1", "]", ",", "num_blocks", "[", "1", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "out_channels", "[", "2", "]", ",", "num_blocks", "[", "2", "]", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "out_channels", "[", "2", "]", ",", "out_channels", "[", "3", "]", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", "[", "3", "]", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "out_channels", "[", "3", "]", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.shufflenetv2.ShuffleNetV2._make_layer": [[114, 120], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "shufflenetv2.DownBlock", "layers.append", "shufflenetv2.BasicBlock"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "out_channels", ",", "num_blocks", ")", ":", "\n", "        ", "layers", "=", "[", "DownBlock", "(", "self", ".", "in_channels", ",", "out_channels", ")", "]", "\n", "for", "i", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "BasicBlock", "(", "out_channels", ")", ")", "\n", "self", ".", "in_channels", "=", "out_channels", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.shufflenetv2.ShuffleNetV2.forward": [[121, 132], ["torch.relu", "torch.relu", "torch.relu", "shufflenetv2.ShuffleNetV2.layer1", "shufflenetv2.ShuffleNetV2.layer2", "shufflenetv2.ShuffleNetV2.layer3", "torch.relu", "torch.relu", "torch.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "shufflenetv2.ShuffleNetV2.view", "shufflenetv2.ShuffleNetV2.linear", "shufflenetv2.ShuffleNetV2.bn1", "shufflenetv2.ShuffleNetV2.bn2", "shufflenetv2.ShuffleNetV2.size", "shufflenetv2.ShuffleNetV2.conv1", "shufflenetv2.ShuffleNetV2.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "# out = F.max_pool2d(out, 3, stride=2, padding=1)", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.shufflenetv2.test": [[155, 160], ["shufflenetv2.ShuffleNetV2", "torch.randn", "torch.randn", "torch.randn", "ShuffleNetV2.", "print"], "function", ["None"], ["def", "test", "(", ")", ":", "\n", "    ", "net", "=", "ShuffleNetV2", "(", "net_size", "=", "0.5", ")", "\n", "x", "=", "torch", ".", "randn", "(", "3", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.resnet.BasicBlock.__init__": [[20, 37], ["torch.Module.__init__", "resnet.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.resnet.conv3x3", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.resnet.BasicBlock.forward": [[38, 55], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.resnet.Bottleneck.__init__": [[66, 82], ["torch.Module.__init__", "resnet.conv1x1", "norm_layer", "resnet.conv3x3", "norm_layer", "resnet.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.resnet.conv1x1", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.resnet.conv3x3", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.resnet.Bottleneck.forward": [[83, 104], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.resnet.ResNet.__init__": [[108, 158], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "resnet.ResNet.modules", "len", "ValueError", "isinstance", "resnet.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.NetworkBlock._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "10", ",", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "width_per_group", "=", "64", ",", "replace_stride_with_dilation", "=", "None", ",", "\n", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.resnet.ResNet._make_layer": [[159, 182], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.resnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.resnet.ResNet._forward_impl": [[183, 200], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "resnet.ResNet.fc"], "methods", ["None"], ["", "def", "_forward_impl", "(", "self", ",", "x", ")", ":", "\n", "# See note [TorchScript super()]", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.resnet.ResNet.forward": [[201, 203], ["resnet.ResNet._forward_impl"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.resnet.ResNet._forward_impl"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "_forward_impl", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.resnet.conv3x3": [[6, 10], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.resnet.conv1x1": [[12, 15], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.resnet._resnet": [[205, 208], ["resnet.ResNet"], "function", ["None"], ["", "", "def", "_resnet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.resnet.ResNet50": [[209, 218], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.resnet._resnet"], ["", "def", "ResNet50", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-50 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.resnet.ResNet18": [[219, 228], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.resnet._resnet"], ["", "def", "ResNet18", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-18 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "", "", ""]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.senet.BasicBlock.__init__": [[11, 28], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", ")", "\n", "\n", "# SE layers", "\n", "", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "//", "16", ",", "kernel_size", "=", "1", ")", "# Use nn.Conv2d instead of nn.Linear", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "planes", "//", "16", ",", "planes", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.senet.BasicBlock.forward": [[29, 43], ["torch.relu", "torch.relu", "torch.relu", "senet.BasicBlock.bn2", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "senet.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "senet.BasicBlock.bn1", "senet.BasicBlock.conv2", "torch.relu.size", "senet.BasicBlock.fc1", "senet.BasicBlock.fc2", "senet.BasicBlock.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "\n", "# Squeeze", "\n", "w", "=", "F", ".", "avg_pool2d", "(", "out", ",", "out", ".", "size", "(", "2", ")", ")", "\n", "w", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "w", ")", ")", "\n", "w", "=", "F", ".", "sigmoid", "(", "self", ".", "fc2", "(", "w", ")", ")", "\n", "# Excitation", "\n", "out", "=", "out", "*", "w", "# New broadcasting feature from v0.2!", "\n", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.senet.PreActBlock.__init__": [[46, 61], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PreActBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n", "\n", "# SE layers", "\n", "", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "//", "16", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "planes", "//", "16", ",", "planes", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.senet.PreActBlock.forward": [[62, 77], ["torch.relu", "torch.relu", "torch.relu", "senet.PreActBlock.conv1", "senet.PreActBlock.conv2", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "senet.PreActBlock.bn1", "hasattr", "senet.PreActBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "senet.PreActBlock.size", "senet.PreActBlock.fc1", "senet.PreActBlock.fc2", "senet.PreActBlock.bn2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "if", "hasattr", "(", "self", ",", "'shortcut'", ")", "else", "x", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "\n", "# Squeeze", "\n", "w", "=", "F", ".", "avg_pool2d", "(", "out", ",", "out", ".", "size", "(", "2", ")", ")", "\n", "w", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "w", ")", ")", "\n", "w", "=", "F", ".", "sigmoid", "(", "self", ".", "fc2", "(", "w", ")", ")", "\n", "# Excitation", "\n", "out", "=", "out", "*", "w", "\n", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.senet.SENet.__init__": [[80, 91], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "senet.SENet._make_layer", "senet.SENet._make_layer", "senet.SENet._make_layer", "senet.SENet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.NetworkBlock._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "SENet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.senet.SENet._make_layer": [[92, 99], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.senet.SENet.forward": [[100, 110], ["torch.relu", "torch.relu", "torch.relu", "senet.SENet.layer1", "senet.SENet.layer2", "senet.SENet.layer3", "senet.SENet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "senet.SENet.view", "senet.SENet.linear", "senet.SENet.bn1", "senet.SENet.size", "senet.SENet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.senet.SENet18": [[112, 114], ["senet.SENet"], "function", ["None"], ["", "", "def", "SENet18", "(", ")", ":", "\n", "    ", "return", "SENet", "(", "PreActBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.senet.test": [[116, 120], ["senet.SENet18", "SENet18.", "print", "torch.randn", "torch.randn", "torch.randn", "net.size"], "function", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.senet.SENet18"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "SENet18", "(", ")", "\n", "y", "=", "net", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.densenet.Bottleneck.__init__": [[10, 16], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "growth_rate", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "4", "*", "growth_rate", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "4", "*", "growth_rate", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "4", "*", "growth_rate", ",", "growth_rate", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.densenet.Bottleneck.forward": [[17, 22], ["densenet.Bottleneck.conv1", "densenet.Bottleneck.conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "densenet.Bottleneck.bn1", "densenet.Bottleneck.bn2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "x", "]", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.densenet.Transition.__init__": [[25, 29], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ")", ":", "\n", "        ", "super", "(", "Transition", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.densenet.Transition.forward": [[30, 34], ["densenet.Transition.conv", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.relu", "torch.relu", "torch.relu", "densenet.Transition.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "F", ".", "relu", "(", "self", ".", "bn", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "2", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.densenet.DenseNet.__init__": [[37, 67], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "densenet.DenseNet._make_dense_layers", "int", "densenet.Transition", "densenet.DenseNet._make_dense_layers", "int", "densenet.Transition", "densenet.DenseNet._make_dense_layers", "int", "densenet.Transition", "densenet.DenseNet._make_dense_layers", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "math.floor", "math.floor", "math.floor"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.densenet.DenseNet._make_dense_layers", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.densenet.DenseNet._make_dense_layers", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.densenet.DenseNet._make_dense_layers", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.densenet.DenseNet._make_dense_layers"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "nblocks", ",", "growth_rate", "=", "12", ",", "reduction", "=", "0.5", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "DenseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "growth_rate", "=", "growth_rate", "\n", "\n", "num_planes", "=", "2", "*", "growth_rate", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "num_planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "dense1", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "0", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "0", "]", "*", "growth_rate", "\n", "out_planes", "=", "int", "(", "math", ".", "floor", "(", "num_planes", "*", "reduction", ")", ")", "\n", "self", ".", "trans1", "=", "Transition", "(", "num_planes", ",", "out_planes", ")", "\n", "num_planes", "=", "out_planes", "\n", "\n", "self", ".", "dense2", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "1", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "1", "]", "*", "growth_rate", "\n", "out_planes", "=", "int", "(", "math", ".", "floor", "(", "num_planes", "*", "reduction", ")", ")", "\n", "self", ".", "trans2", "=", "Transition", "(", "num_planes", ",", "out_planes", ")", "\n", "num_planes", "=", "out_planes", "\n", "\n", "self", ".", "dense3", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "2", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "2", "]", "*", "growth_rate", "\n", "out_planes", "=", "int", "(", "math", ".", "floor", "(", "num_planes", "*", "reduction", ")", ")", "\n", "self", ".", "trans3", "=", "Transition", "(", "num_planes", ",", "out_planes", ")", "\n", "num_planes", "=", "out_planes", "\n", "\n", "self", ".", "dense4", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "3", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "3", "]", "*", "growth_rate", "\n", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "num_planes", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "num_planes", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.densenet.DenseNet._make_dense_layers": [[68, 74], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_dense_layers", "(", "self", ",", "block", ",", "in_planes", ",", "nblock", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nblock", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "in_planes", ",", "self", ".", "growth_rate", ")", ")", "\n", "in_planes", "+=", "self", ".", "growth_rate", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.densenet.DenseNet.forward": [[75, 85], ["densenet.DenseNet.conv1", "densenet.DenseNet.trans1", "densenet.DenseNet.trans2", "densenet.DenseNet.trans3", "densenet.DenseNet.dense4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "densenet.DenseNet.view", "densenet.DenseNet.linear", "densenet.DenseNet.dense1", "densenet.DenseNet.dense2", "densenet.DenseNet.dense3", "torch.relu", "torch.relu", "torch.relu", "densenet.DenseNet.size", "densenet.DenseNet.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "trans1", "(", "self", ".", "dense1", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "trans2", "(", "self", ".", "dense2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "trans3", "(", "self", ".", "dense3", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "dense4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "F", ".", "relu", "(", "self", ".", "bn", "(", "out", ")", ")", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.densenet.DenseNet121": [[86, 88], ["densenet.DenseNet"], "function", ["None"], ["", "", "def", "DenseNet121", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "24", ",", "16", "]", ",", "growth_rate", "=", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.densenet.DenseNet169": [[89, 91], ["densenet.DenseNet"], "function", ["None"], ["", "def", "DenseNet169", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "32", ",", "32", "]", ",", "growth_rate", "=", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.densenet.DenseNet201": [[92, 94], ["densenet.DenseNet"], "function", ["None"], ["", "def", "DenseNet201", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "48", ",", "32", "]", ",", "growth_rate", "=", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.densenet.DenseNet161": [[95, 97], ["densenet.DenseNet"], "function", ["None"], ["", "def", "DenseNet161", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "36", ",", "24", "]", ",", "growth_rate", "=", "48", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.densenet.densenet_cifar": [[98, 100], ["densenet.DenseNet"], "function", ["None"], ["", "def", "densenet_cifar", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "24", ",", "16", "]", ",", "growth_rate", "=", "12", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.densenet.test": [[101, 106], ["densenet.densenet_cifar", "torch.randn", "torch.randn", "torch.randn", "densenet_cifar.", "print"], "function", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.densenet.densenet_cifar"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "densenet_cifar", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.stl_resnet.SimpleResidualBlock.__init__": [[6, 12], ["torch.Module.__init__", "torch.Conv2d", "torch.ReLU", "torch.Conv2d", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.stl_resnet.SimpleResidualBlock.forward": [[13, 18], ["stl_resnet.SimpleResidualBlock.conv1", "stl_resnet.SimpleResidualBlock.relu1", "stl_resnet.SimpleResidualBlock.conv2", "stl_resnet.SimpleResidualBlock.relu2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "relu1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "return", "self", ".", "relu2", "(", "out", ")", "+", "x", "# ReLU can be applied before or after adding the input", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.stl_resnet.STL10_ResNet18.__init__": [[29, 53], ["torch.Module.__init__", "stl_resnet.conv_block", "stl_resnet.conv_block", "stl_resnet.conv_block", "stl_resnet.conv_block", "torch.Sequential", "stl_resnet.conv_block", "stl_resnet.conv_block", "stl_resnet.conv_block", "stl_resnet.conv_block", "torch.Sequential", "torch.Sequential", "stl_resnet.conv_block", "stl_resnet.conv_block", "stl_resnet.conv_block", "stl_resnet.conv_block", "torch.MaxPool2d", "torch.Flatten", "torch.Dropout", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.stl_resnet.conv_block", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.stl_resnet.conv_block", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.stl_resnet.conv_block", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.stl_resnet.conv_block", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.stl_resnet.conv_block", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.stl_resnet.conv_block", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.stl_resnet.conv_block", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.stl_resnet.conv_block", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.stl_resnet.conv_block", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.stl_resnet.conv_block", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.stl_resnet.conv_block", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.stl_resnet.conv_block"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1_1", "=", "conv_block", "(", "in_channels", ",", "64", ",", "pool", "=", "True", ")", "\n", "self", ".", "conv1_2", "=", "conv_block", "(", "64", ",", "64", ",", "pool", "=", "False", ")", "\n", "\n", "self", ".", "conv2_1", "=", "conv_block", "(", "64", ",", "128", ",", "pool", "=", "True", ")", "# output: 128 x 24 x 24", "\n", "self", ".", "conv2_2", "=", "conv_block", "(", "128", ",", "128", ",", "pool", "=", "False", ")", "# output: 128 x 24 x 24", "\n", "\n", "\n", "self", ".", "res1", "=", "nn", ".", "Sequential", "(", "conv_block", "(", "128", ",", "128", ")", ",", "conv_block", "(", "128", ",", "128", ")", ")", "\n", "\n", "self", ".", "conv3_1", "=", "conv_block", "(", "128", ",", "256", ",", "pool", "=", "True", ")", "# output: 256 x 12 x 12", "\n", "self", ".", "conv3_2", "=", "conv_block", "(", "256", ",", "256", ",", "pool", "=", "False", ")", "# output: 256 x 12 x 12", "\n", "\n", "self", ".", "conv4_1", "=", "conv_block", "(", "256", ",", "512", ",", "pool", "=", "True", ")", "# output: 512 x 6 x 6", "\n", "self", ".", "conv4_2", "=", "conv_block", "(", "512", ",", "512", ",", "pool", "=", "False", ")", "# output: 512 x 6 x 6", "\n", "\n", "self", ".", "res2", "=", "nn", ".", "Sequential", "(", "conv_block", "(", "512", ",", "512", ")", ",", "conv_block", "(", "512", ",", "512", ")", ")", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "nn", ".", "MaxPool2d", "(", "6", ")", ",", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.2", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.stl_resnet.STL10_ResNet18.forward": [[54, 72], ["stl_resnet.STL10_ResNet18.conv1_1", "stl_resnet.STL10_ResNet18.conv1_2", "stl_resnet.STL10_ResNet18.conv2_1", "stl_resnet.STL10_ResNet18.conv2_2", "stl_resnet.STL10_ResNet18.conv3_1", "stl_resnet.STL10_ResNet18.conv3_2", "stl_resnet.STL10_ResNet18.conv4_1", "stl_resnet.STL10_ResNet18.conv4_2", "stl_resnet.STL10_ResNet18.classifier", "stl_resnet.STL10_ResNet18.res1", "stl_resnet.STL10_ResNet18.res2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "xb", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1_1", "(", "xb", ")", "\n", "out", "=", "self", ".", "conv1_2", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2_1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2_2", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "res1", "(", "out", ")", "+", "out", "\n", "\n", "out", "=", "self", ".", "conv3_1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3_2", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv4_1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv4_2", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "res2", "(", "out", ")", "+", "out", "\n", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.stl_resnet.conv_block": [[20, 26], ["torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "layers.append", "torch.MaxPool2d"], "function", ["None"], ["", "", "def", "conv_block", "(", "in_channels", ",", "out_channels", ",", "pool", "=", "False", ")", ":", "\n", "    ", "layers", "=", "[", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "if", "pool", ":", "layers", ".", "append", "(", "nn", ".", "MaxPool2d", "(", "2", ")", ")", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.mnist_resnet.MnistResNet101.__init__": [[6, 21], ["torch.Module.__init__", "torchvision.resnet101", "torch.Conv2d", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", "=", "1", ")", ":", "\n", "        ", "super", "(", "MnistResNet101", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Load a pretrained resnet model from torchvision.models in Pytorch", "\n", "self", ".", "model", "=", "models", ".", "resnet101", "(", "pretrained", "=", "True", ")", "\n", "\n", "# Change the input layer to take Grayscale image, instead of RGB images.", "\n", "# Hence in_channels is set as 1 or 3 respectively", "\n", "# original definition of the first layer on the ResNet class", "\n", "# self.conv1 = nn.Conv2d(3, 64, kernel_size=7, stride=2, padding=3, bias=False)", "\n", "self", ".", "model", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "\n", "# Change the output layer to output 10 classes instead of 1000 classes", "\n", "num_ftrs", "=", "self", ".", "model", ".", "fc", ".", "in_features", "\n", "self", ".", "model", ".", "fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.mnist_resnet.MnistResNet101.forward": [[22, 24], ["mnist_resnet.MnistResNet101.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.fft_utils.generic_fftshift": [[5, 35], ["len", "len", "ValueError", "int", "torch.roll"], "function", ["None"], ["def", "generic_fftshift", "(", "x", ",", "axis", "=", "[", "-", "2", ",", "-", "1", "]", ",", "inverse", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Fourier shift to center the low frequency components\n\n    Parameters\n    ----------\n    x : torch Tensor\n        Input array\n    inverse : bool\n        whether the shift is for fft or ifft\n\n    Returns\n    -------\n    shifted array\n\n    \"\"\"", "\n", "if", "len", "(", "axis", ")", ">", "len", "(", "x", ".", "shape", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'Not enough axis to shift around!'", ")", "\n", "\n", "", "y", "=", "x", "\n", "for", "axe", "in", "axis", ":", "\n", "        ", "dim_size", "=", "x", ".", "shape", "[", "axe", "]", "\n", "shift", "=", "int", "(", "dim_size", "/", "2", ")", "\n", "if", "inverse", ":", "\n", "            ", "if", "not", "dim_size", "%", "2", "==", "0", ":", "\n", "                ", "shift", "+=", "1", "\n", "\n", "", "", "y", "=", "torch", ".", "roll", "(", "y", ",", "shift", ",", "axe", ")", "\n", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.fft_utils.fftshift": [[36, 38], ["fft_utils.generic_fftshift"], "function", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.fft_utils.generic_fftshift"], ["", "def", "fftshift", "(", "x", ",", "axis", "=", "[", "-", "2", ",", "-", "1", "]", ")", ":", "\n", "    ", "return", "generic_fftshift", "(", "x", ",", "axis", "=", "axis", ",", "inverse", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.fft_utils.ifftshift": [[39, 41], ["fft_utils.generic_fftshift"], "function", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.fft_utils.generic_fftshift"], ["", "def", "ifftshift", "(", "x", ",", "axis", "=", "[", "-", "2", ",", "-", "1", "]", ")", ":", "\n", "    ", "return", "generic_fftshift", "(", "x", ",", "axis", "=", "axis", ",", "inverse", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.fft_utils.fftc2d": [[42, 61], ["fft_utils.ifftshift", "torch.fft", "fft_utils.fftshift"], "function", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.fft_utils.ifftshift", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.fft_utils.fftshift"], ["", "def", "fftc2d", "(", "x", ")", ":", "\n", "    ", "\"\"\"\n    Centered 2d Fourier transform, performed on axis(-2,-3)\n\n    Parameters\n    ----------\n    x : input array\n        array to perform fft on\n        shape: [NxWxHx2]: real and imaginary channel\n\n    Returns\n    -------\n    centered fft transformed of x\n\n    \"\"\"", "\n", "x", "=", "ifftshift", "(", "x", ",", "axis", "=", "(", "-", "3", ",", "-", "2", ")", ")", "\n", "x", "=", "torch", ".", "fft", "(", "x", ",", "2", ",", "normalized", "=", "True", ")", "\n", "x", "=", "fftshift", "(", "x", ",", "axis", "=", "[", "-", "2", ",", "-", "3", "]", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.fft_utils.ifftc2d": [[62, 82], ["fft_utils.ifftshift", "torch.ifft", "fft_utils.fftshift"], "function", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.fft_utils.ifftshift", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.fft_utils.fftshift"], ["", "def", "ifftc2d", "(", "x", ")", ":", "\n", "    ", "\"\"\"\n    Centered inverse 2d Fourier transform, performed on axis(-2,-3)\n\n    Parameters\n    ----------\n    x : input array\n        array to perform ifft on\n        shape: [NxWxHx2]: real and imaginary channel\n\n    Returns\n    -------\n    centered ifft transformed of x\n\n    \"\"\"", "\n", "\n", "x", "=", "ifftshift", "(", "x", ",", "axis", "=", "[", "-", "2", ",", "-", "3", "]", ")", "\n", "x", "=", "torch", ".", "ifft", "(", "x", ",", "2", ",", "normalized", "=", "True", ")", "\n", "x", "=", "fftshift", "(", "x", ",", "axis", "=", "[", "-", "2", ",", "-", "3", "]", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.fft_utils.torch_abs": [[83, 89], ["torch.sqrt", "torch.sum", "torch.square"], "function", ["None"], ["", "def", "torch_abs", "(", "x", ")", ":", "\n", "    ", "\"\"\"\n    Compute magnitude for two-channel complex torch tensor\n    \"\"\"", "\n", "mag", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "torch", ".", "square", "(", "x", ")", ",", "axis", "=", "-", "1", ",", "keepdim", "=", "False", ")", "+", "1e-9", ")", "\n", "return", "mag", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.fft_utils.real_2_complex": [[91, 110], ["x.squeeze", "x.unsqueeze", "torch.zeros", "torch.cat"], "function", ["None"], ["def", "real_2_complex", "(", "x", ")", ":", "\n", "    ", "\"\"\"\n    Convert real-valued, 1-channel, torch tensor to complex-valued, 2-channel\n    with 0 imaginary component\n\n    Parameters\n    ----------\n    x : input tensor\n\n    Returns\n    -------\n    complex array with 2-channel at the end\n\n    \"\"\"", "\n", "out", "=", "x", ".", "squeeze", "(", ")", "\n", "out", "=", "x", ".", "unsqueeze", "(", "-", "1", ")", "\n", "imag", "=", "torch", ".", "zeros", "(", "out", ".", "shape", ",", "dtype", "=", "out", ".", "dtype", ",", "requires_grad", "=", "out", ".", "requires_grad", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "out", ",", "imag", ")", ",", "dim", "=", "-", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.fft_utils.complex_2_numpy": [[111, 128], ["x.numpy", "numpy.take", "numpy.take"], "function", ["None"], ["", "def", "complex_2_numpy", "(", "x", ")", ":", "\n", "    ", "\"\"\"\n    Convert 2-channel complex torch tensor to numpy complex number\n\n    Parameters\n    ----------\n    x : TYPE\n        DESCRIPTION.\n\n    Returns\n    -------\n    None.\n\n    \"\"\"", "\n", "out", "=", "x", ".", "numpy", "(", ")", "\n", "out", "=", "np", ".", "take", "(", "out", ",", "0", ",", "axis", "=", "-", "1", ")", "+", "np", ".", "take", "(", "out", ",", "1", ",", "axis", "=", "-", "1", ")", "*", "1j", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.fft_utils.numpy_2_complex": [[129, 150], ["numpy.real", "numpy.expand_dims", "numpy.imag", "numpy.expand_dims", "numpy.concatenate", "torch.from_numpy"], "function", ["None"], ["", "def", "numpy_2_complex", "(", "x", ")", ":", "\n", "    ", "\"\"\"\n    Convert numpy complex array to 2-channel complex torch tensor\n\n    Parameters\n    ----------\n    x : numpy complex array\n        input array\n\n    Returns\n    -------\n    Equivalent 2-channel torch tensor\n\n    \"\"\"", "\n", "real", "=", "np", ".", "real", "(", "x", ")", "\n", "real", "=", "np", ".", "expand_dims", "(", "real", ",", "-", "1", ")", "\n", "imag", "=", "np", ".", "imag", "(", "x", ")", "\n", "imag", "=", "np", ".", "expand_dims", "(", "imag", ",", "-", "1", ")", "\n", "out", "=", "np", ".", "concatenate", "(", "(", "real", ",", "imag", ")", ",", "axis", "=", "-", "1", ")", "\n", "out", "=", "torch", ".", "from_numpy", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.fft_utils.conj": [[151, 159], ["torch.stack"], "function", ["None"], ["", "def", "conj", "(", "x", ")", ":", "\n", "    ", "\"\"\"\n    Calculate the complex conjugate of x\n    \n    x is two-channels complex torch tensor\n    \"\"\"", "\n", "assert", "x", ".", "shape", "[", "-", "1", "]", "==", "2", "\n", "return", "torch", ".", "stack", "(", "(", "x", "[", "...", ",", "0", "]", ",", "-", "x", "[", "...", ",", "1", "]", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.fft_utils.complex_mul": [[161, 168], ["torch.stack"], "function", ["None"], ["", "def", "complex_mul", "(", "x", ",", "y", ")", ":", "\n", "    ", "\"\"\" Complex multiply 2-channel complex torch tensor x,y\n    \"\"\"", "\n", "assert", "x", ".", "shape", "[", "-", "1", "]", "==", "y", ".", "shape", "[", "-", "1", "]", "==", "2", "\n", "re", "=", "x", "[", "...", ",", "0", "]", "*", "y", "[", "...", ",", "0", "]", "-", "x", "[", "...", ",", "1", "]", "*", "y", "[", "...", ",", "1", "]", "\n", "im", "=", "x", "[", "...", ",", "0", "]", "*", "y", "[", "...", ",", "1", "]", "+", "x", "[", "...", ",", "1", "]", "*", "y", "[", "...", ",", "0", "]", "\n", "return", "torch", ".", "stack", "(", "(", "re", ",", "im", ")", ",", "dim", "=", "-", "1", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.resnext.Block.__init__": [[14, 29], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "cardinality", "=", "32", ",", "bottleneck_width", "=", "4", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "group_width", "=", "cardinality", "*", "bottleneck_width", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "group_width", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "group_width", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "group_width", ",", "group_width", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "cardinality", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "group_width", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "group_width", ",", "self", ".", "expansion", "*", "group_width", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "group_width", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "group_width", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "group_width", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "group_width", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.resnext.Block.forward": [[31, 38], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnext.Block.bn3", "resnext.Block.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnext.Block.bn1", "resnext.Block.bn2", "resnext.Block.conv3", "resnext.Block.conv1", "resnext.Block.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.resnext.ResNeXt.__init__": [[41, 54], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnext.ResNeXt._make_layer", "resnext.ResNeXt._make_layer", "resnext.ResNeXt._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.NetworkBlock._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "num_blocks", ",", "cardinality", ",", "bottleneck_width", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ResNeXt", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cardinality", "=", "cardinality", "\n", "self", ".", "bottleneck_width", "=", "bottleneck_width", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "num_blocks", "[", "0", "]", ",", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "num_blocks", "[", "1", "]", ",", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "num_blocks", "[", "2", "]", ",", "2", ")", "\n", "# self.layer4 = self._make_layer(num_blocks[3], 2)", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "cardinality", "*", "bottleneck_width", "*", "8", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.resnext.ResNeXt._make_layer": [[55, 64], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "resnext.Block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "Block", "(", "self", ".", "in_planes", ",", "self", ".", "cardinality", ",", "self", ".", "bottleneck_width", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "Block", ".", "expansion", "*", "self", ".", "cardinality", "*", "self", ".", "bottleneck_width", "\n", "# Increase bottleneck_width by 2 after each stage.", "\n", "", "self", ".", "bottleneck_width", "*=", "2", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.resnext.ResNeXt.forward": [[65, 75], ["torch.relu", "torch.relu", "torch.relu", "resnext.ResNeXt.layer1", "resnext.ResNeXt.layer2", "resnext.ResNeXt.layer3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnext.ResNeXt.view", "resnext.ResNeXt.linear", "resnext.ResNeXt.bn1", "resnext.ResNeXt.size", "resnext.ResNeXt.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "# out = self.layer4(out)", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.resnext.ResNeXt29_2x64d": [[77, 79], ["resnext.ResNeXt"], "function", ["None"], ["", "", "def", "ResNeXt29_2x64d", "(", ")", ":", "\n", "    ", "return", "ResNeXt", "(", "num_blocks", "=", "[", "3", ",", "3", ",", "3", "]", ",", "cardinality", "=", "2", ",", "bottleneck_width", "=", "64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.resnext.ResNeXt29_4x64d": [[80, 82], ["resnext.ResNeXt"], "function", ["None"], ["", "def", "ResNeXt29_4x64d", "(", ")", ":", "\n", "    ", "return", "ResNeXt", "(", "num_blocks", "=", "[", "3", ",", "3", ",", "3", "]", ",", "cardinality", "=", "4", ",", "bottleneck_width", "=", "64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.resnext.ResNeXt29_8x64d": [[83, 85], ["resnext.ResNeXt"], "function", ["None"], ["", "def", "ResNeXt29_8x64d", "(", ")", ":", "\n", "    ", "return", "ResNeXt", "(", "num_blocks", "=", "[", "3", ",", "3", ",", "3", "]", ",", "cardinality", "=", "8", ",", "bottleneck_width", "=", "64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.resnext.ResNeXt29_32x4d": [[86, 88], ["resnext.ResNeXt"], "function", ["None"], ["", "def", "ResNeXt29_32x4d", "(", ")", ":", "\n", "    ", "return", "ResNeXt", "(", "num_blocks", "=", "[", "3", ",", "3", ",", "3", "]", ",", "cardinality", "=", "32", ",", "bottleneck_width", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.resnext.test_resnext": [[89, 94], ["resnext.ResNeXt29_2x64d", "torch.randn", "torch.randn", "torch.randn", "ResNeXt29_2x64d.", "print", "net.size"], "function", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.resnext.ResNeXt29_2x64d"], ["", "def", "test_resnext", "(", ")", ":", "\n", "    ", "net", "=", "ResNeXt29_2x64d", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.MNIST_CAE.__init__": [[16, 38], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.Tanh"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MNIST_CAE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1", ",", "16", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "# b, 16, 28, 28", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "16", ",", "32", ",", "3", ",", "stride", "=", "3", ",", "padding", "=", "1", ")", ",", "# b, 32, 10, 10", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "32", ",", "16", ",", "3", ",", "stride", "=", "3", ",", "padding", "=", "1", ")", ",", "# b, 16, 4, 4", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "16", ",", "8", ",", "3", ",", "stride", "=", "3", ",", "padding", "=", "1", ")", ",", "# b, 8, 2, 2", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "8", ",", "16", ",", "3", ",", "stride", "=", "2", ")", ",", "# b, 16, 5, 5", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "16", ",", "8", ",", "5", ",", "stride", "=", "3", ",", "padding", "=", "1", ")", ",", "# b, 8, 15, 15", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "8", ",", "1", ",", "2", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "# b, 1, 28, 28", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.MNIST_CAE.forward": [[40, 44], ["cae.MNIST_CAE.encoder", "cae.MNIST_CAE.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "encoder", "(", "x", ")", "\n", "x", "=", "self", ".", "decoder", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.MNIST_Dim_Encoder.__init__": [[47, 54], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MNIST_Dim_Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1", ",", "3", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "#(3, 14, 14)", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "3", ",", "12", ",", "5", ",", "stride", "=", "3", ",", "padding", "=", "0", ")", ",", "#(12, 4, 4)", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.MNIST_Dim_Encoder.forward": [[55, 58], ["cae.MNIST_Dim_Encoder.encoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "encoded", "=", "self", ".", "encoder", "(", "x", ")", "# output size  [batch, 192, 1, 1]", "\n", "return", "encoded", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.MNIST_Dim_Decoder.__init__": [[61, 68], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MNIST_Dim_Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "12", ",", "3", ",", "5", ",", "stride", "=", "3", ",", "padding", "=", "0", ")", ",", "#(3, 14, 14)", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "3", ",", "1", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "#(1, 28, 28)", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.MNIST_Dim_Decoder.forward": [[69, 72], ["cae.MNIST_Dim_Decoder.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "decoded", "=", "self", ".", "decoder", "(", "x", ")", "\n", "return", "decoded", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.CelebA_CAE.__init__": [[75, 92], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.MaxPool2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.MaxPool2d", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.Tanh"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CelebA_CAE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1", ",", "16", ",", "3", ",", "stride", "=", "3", ",", "padding", "=", "1", ")", ",", "# b, 16, 10, 10", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "2", ")", ",", "# b, 16, 5, 5", "\n", "nn", ".", "Conv2d", "(", "16", ",", "8", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "# b, 8, 3, 3", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "1", ")", "# b, 8, 2, 2", "\n", ")", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "8", ",", "16", ",", "3", ",", "stride", "=", "2", ")", ",", "# b, 16, 5, 5", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "16", ",", "8", ",", "5", ",", "stride", "=", "3", ",", "padding", "=", "1", ")", ",", "# b, 8, 15, 15", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "8", ",", "1", ",", "2", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "# b, 1, 28, 28", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.CelebA_CAE.forward": [[94, 98], ["cae.CelebA_CAE.encoder", "cae.CelebA_CAE.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "encoder", "(", "x", ")", "\n", "x", "=", "self", ".", "decoder", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.CIFAR_CAE.__init__": [[101, 124], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CIFAR_CAE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Input size: [batch, 3, 32, 32]", "\n", "# Output size: [batch, 3, 32, 32]", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "4", ",", "stride", "=", "4", ",", "padding", "=", "0", ")", ",", "# [batch, 32, 16, 16]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "48", ",", "3", ",", "stride", "=", "3", ",", "padding", "=", "2", ")", ",", "# [batch, 48, 8, 8]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "# nn.Conv2d(24, 48, 4, stride=2, padding=1),           # [batch, 48, 4, 4]", "\n", "# nn.ReLU(),", "\n", "nn", ".", "Conv2d", "(", "48", ",", "96", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "# [batch, 96, 2, 2]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "96", ",", "48", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "# [batch, 48, 4, 4]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "#  nn.ConvTranspose2d(48, 24, 4, stride=2, padding=1),  # [batch, 24, 8, 8]", "\n", "# nn.ReLU(),", "\n", "nn", ".", "ConvTranspose2d", "(", "48", ",", "32", ",", "3", ",", "stride", "=", "3", ",", "padding", "=", "2", ")", ",", "# [batch, 32, 16, 16]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "32", ",", "3", ",", "4", ",", "stride", "=", "4", ",", "padding", "=", "0", ")", ",", "# [batch, 3, 32, 32]", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.CIFAR_CAE.forward": [[126, 130], ["cae.CIFAR_CAE.encoder", "cae.CIFAR_CAE.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "encoded", "=", "self", ".", "encoder", "(", "x", ")", "\n", "decoded", "=", "self", ".", "decoder", "(", "encoded", ")", "\n", "return", "decoded", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.STL_Encoder.__init__": [[133, 148], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "STL_Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "18", ",", "5", ",", "stride", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "18", ",", "72", ",", "4", ",", "stride", "=", "4", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "72", ",", "144", ",", "3", ",", "stride", "=", "3", ",", "padding", "=", "2", ")", ",", "# [batch, 24, 8, 8]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "# nn.Conv2d(24, 48, 4, stride=2, padding=1),           # [batch, 48, 4, 4]", "\n", "# nn.ReLU(),", "\n", "nn", ".", "Conv2d", "(", "144", ",", "288", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "# [batch, 96, 2, 2]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "288", ",", "576", ",", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "# [batch, 576, 1, 1]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.STL_Encoder.forward": [[149, 152], ["cae.STL_Encoder.encoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "encoded", "=", "self", ".", "encoder", "(", "x", ")", "# output size  [batch, 192, 1, 1]", "\n", "return", "encoded", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.STL_Decoder.__init__": [[155, 172], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "STL_Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Input size: [batch, 3, 32, 32]", "\n", "# Output size: [batch, 3, 32, 32]", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "576", ",", "288", ",", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "# [batch, 96, 2, 2]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "288", ",", "144", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "# [batch, 48, 4, 4]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "# nn.ConvTranspose2d(48, 24, 4, stride=2, padding=1),  # [batch, 24, 8, 8]", "\n", "# nn.ReLU(),", "\n", "nn", ".", "ConvTranspose2d", "(", "144", ",", "72", ",", "3", ",", "stride", "=", "3", ",", "padding", "=", "2", ")", ",", "# [batch, 12, 16, 16]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "72", ",", "18", ",", "4", ",", "stride", "=", "4", ",", "padding", "=", "0", ")", ",", "# [batch, 3, 32, 32]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "18", ",", "3", ",", "5", ",", "stride", "=", "3", ",", "padding", "=", "1", ")", ",", "# [batch, 12, 16, 16]", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.STL_Decoder.forward": [[173, 176], ["cae.STL_Decoder.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "decoded", "=", "self", ".", "decoder", "(", "x", ")", "\n", "return", "decoded", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.ImageNet_Encoder_15552.__init__": [[179, 194], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ImageNet_Encoder_15552", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Input size: [batch, 3, 32, 32]  3072", "\n", "# Output size: [batch, 3, 32, 32]", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "72", ",", "8", ",", "stride", "=", "6", ",", "padding", "=", "0", ")", ",", "# [batch, 18, 55, 55]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "72", ",", "144", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "# [batch, 72, 13, 13]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "144", ",", "432", ",", "3", ",", "stride", "=", "3", ",", "padding", "=", "0", ")", ",", "# [batch, 144, 6, 6]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "432", ",", "864", ",", "2", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "# [batch, 288, 3, 3]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "864", ",", "1728", ",", "2", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "# [batch, 864, 1, 1]", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.ImageNet_Encoder_15552.forward": [[196, 199], ["cae.ImageNet_Encoder_15552.encoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "encoded", "=", "self", ".", "encoder", "(", "x", ")", "\n", "return", "encoded", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.ImageNet_Decoder_15552.__init__": [[202, 221], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ImageNet_Decoder_15552", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Input size: [batch, 3, 32, 32]", "\n", "# Output size: [batch, 3, 32, 32]", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "1728", ",", "864", ",", "2", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "# [batch, 48, 4, 4]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "864", ",", "432", ",", "2", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "# [batch, 48, 4, 4]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "432", ",", "144", ",", "3", ",", "stride", "=", "3", ",", "padding", "=", "0", ")", ",", "# [batch, 48, 4, 4]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "144", ",", "72", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "# [batch, 48, 4, 4]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "# nn.ConvTranspose2d(48, 24, 4, stride=2, padding=1),  # [batch, 24, 8, 8]", "\n", "# nn.ReLU(),", "\n", "#nn.ConvTranspose2d(48, 32, 3, stride=3 , padding=2),  # [batch, 12, 16, 16]", "\n", "#nn.ReLU(),", "\n", "nn", ".", "ConvTranspose2d", "(", "72", ",", "3", ",", "8", ",", "stride", "=", "6", ",", "padding", "=", "0", ")", ",", "# [batch, 3, 32, 32]", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.ImageNet_Decoder_15552.forward": [[223, 226], ["cae.ImageNet_Decoder_15552.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "decoded", "=", "self", ".", "decoder", "(", "x", ")", "\n", "return", "decoded", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.ImageNet_Encoder_1152.__init__": [[231, 248], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ImageNet_Encoder_1152", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Input size: [batch, 3, 32, 32]  3072", "\n", "# Output size: [batch, 3, 32, 32]", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "24", ",", "8", ",", "stride", "=", "6", ",", "padding", "=", "0", ")", ",", "# [batch, 18, 55, 55]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "24", ",", "48", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "# [batch, 72, 13, 13]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "48", ",", "96", ",", "3", ",", "stride", "=", "3", ",", "padding", "=", "0", ")", ",", "# [batch, 144, 6, 6]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "96", ",", "192", ",", "2", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "# [batch, 288, 3, 3]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "192", ",", "384", ",", "2", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "# [batch, 864, 1, 1]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "384", ",", "1152", ",", "3", ",", "stride", "=", "3", ",", "padding", "=", "0", ")", ",", "# [batch, 864, 1, 1]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.ImageNet_Encoder_1152.forward": [[250, 253], ["cae.ImageNet_Encoder_1152.encoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "encoded", "=", "self", ".", "encoder", "(", "x", ")", "\n", "return", "encoded", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.ImageNet_Decoder_1152.__init__": [[256, 277], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ImageNet_Decoder_1152", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Input size: [batch, 3, 32, 32]", "\n", "# Output size: [batch, 3, 32, 32]", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "1152", ",", "384", ",", "3", ",", "stride", "=", "3", ",", "padding", "=", "0", ")", ",", "# [batch, 48, 4, 4]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "384", ",", "192", ",", "2", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "# [batch, 48, 4, 4]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "192", ",", "96", ",", "2", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "# [batch, 48, 4, 4]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "96", ",", "48", ",", "3", ",", "stride", "=", "3", ",", "padding", "=", "0", ")", ",", "# [batch, 48, 4, 4]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "48", ",", "24", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "# [batch, 48, 4, 4]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "# nn.ConvTranspose2d(48, 24, 4, stride=2, padding=1),  # [batch, 24, 8, 8]", "\n", "# nn.ReLU(),", "\n", "#nn.ConvTranspose2d(48, 32, 3, stride=3 , padding=2),  # [batch, 12, 16, 16]", "\n", "#nn.ReLU(),", "\n", "nn", ".", "ConvTranspose2d", "(", "24", ",", "3", ",", "8", ",", "stride", "=", "6", ",", "padding", "=", "0", ")", ",", "# [batch, 3, 32, 32]", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.ImageNet_Decoder_1152.forward": [[279, 282], ["cae.ImageNet_Decoder_1152.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "decoded", "=", "self", ".", "decoder", "(", "x", ")", "\n", "return", "decoded", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.ImageNet_Encoder_1728.__init__": [[285, 302], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ImageNet_Encoder_1728", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Input size: [batch, 3, 32, 32]  3072", "\n", "# Output size: [batch, 3, 32, 32]", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "36", ",", "8", ",", "stride", "=", "6", ",", "padding", "=", "0", ")", ",", "# [batch, 18, 55, 55]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "36", ",", "72", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "# [batch, 72, 13, 13]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "72", ",", "144", ",", "3", ",", "stride", "=", "3", ",", "padding", "=", "0", ")", ",", "# [batch, 144, 6, 6]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "144", ",", "288", ",", "2", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "# [batch, 288, 3, 3]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "288", ",", "576", ",", "2", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "# [batch, 864, 1, 1]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "576", ",", "1728", ",", "3", ",", "stride", "=", "3", ",", "padding", "=", "0", ")", ",", "# [batch, 864, 1, 1]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.ImageNet_Encoder_1728.forward": [[304, 307], ["cae.ImageNet_Encoder_1728.encoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "encoded", "=", "self", ".", "encoder", "(", "x", ")", "\n", "return", "encoded", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.ImageNet_Decoder_1728.__init__": [[310, 331], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ImageNet_Decoder_1728", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Input size: [batch, 3, 32, 32]", "\n", "# Output size: [batch, 3, 32, 32]", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "1728", ",", "576", ",", "3", ",", "stride", "=", "3", ",", "padding", "=", "0", ")", ",", "# [batch, 48, 4, 4]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "576", ",", "288", ",", "2", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "# [batch, 48, 4, 4]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "288", ",", "144", ",", "2", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "# [batch, 48, 4, 4]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "144", ",", "72", ",", "3", ",", "stride", "=", "3", ",", "padding", "=", "0", ")", ",", "# [batch, 48, 4, 4]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "72", ",", "36", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "# [batch, 48, 4, 4]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "# nn.ConvTranspose2d(48, 24, 4, stride=2, padding=1),  # [batch, 24, 8, 8]", "\n", "# nn.ReLU(),", "\n", "#nn.ConvTranspose2d(48, 32, 3, stride=3 , padding=2),  # [batch, 12, 16, 16]", "\n", "#nn.ReLU(),", "\n", "nn", ".", "ConvTranspose2d", "(", "36", ",", "3", ",", "8", ",", "stride", "=", "6", ",", "padding", "=", "0", ")", ",", "# [batch, 3, 32, 32]", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.ImageNet_Decoder_1728.forward": [[333, 336], ["cae.ImageNet_Decoder_1728.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "decoded", "=", "self", ".", "decoder", "(", "x", ")", "\n", "return", "decoded", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.ImageNet_Encoder_2304.__init__": [[339, 356], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ImageNet_Encoder_2304", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Input size: [batch, 3, 32, 32]  3072", "\n", "# Output size: [batch, 3, 32, 32]", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "48", ",", "8", ",", "stride", "=", "6", ",", "padding", "=", "0", ")", ",", "# [batch, 18, 55, 55]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "48", ",", "96", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "# [batch, 72, 13, 13]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "96", ",", "192", ",", "3", ",", "stride", "=", "3", ",", "padding", "=", "0", ")", ",", "# [batch, 144, 6, 6]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "192", ",", "384", ",", "2", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "# [batch, 288, 3, 3]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "384", ",", "768", ",", "2", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "# [batch, 864, 1, 1]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "768", ",", "2304", ",", "3", ",", "stride", "=", "3", ",", "padding", "=", "0", ")", ",", "# [batch, 864, 1, 1]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.ImageNet_Encoder_2304.forward": [[358, 361], ["cae.ImageNet_Encoder_2304.encoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "encoded", "=", "self", ".", "encoder", "(", "x", ")", "\n", "return", "encoded", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.ImageNet_Decoder_2304.__init__": [[364, 385], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ImageNet_Decoder_2304", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Input size: [batch, 3, 32, 32]", "\n", "# Output size: [batch, 3, 32, 32]", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "2304", ",", "768", ",", "3", ",", "stride", "=", "3", ",", "padding", "=", "0", ")", ",", "# [batch, 48, 4, 4]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "768", ",", "384", ",", "2", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "# [batch, 48, 4, 4]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "384", ",", "192", ",", "2", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "# [batch, 48, 4, 4]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "192", ",", "96", ",", "3", ",", "stride", "=", "3", ",", "padding", "=", "0", ")", ",", "# [batch, 48, 4, 4]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "96", ",", "48", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "# [batch, 48, 4, 4]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "# nn.ConvTranspose2d(48, 24, 4, stride=2, padding=1),  # [batch, 24, 8, 8]", "\n", "# nn.ReLU(),", "\n", "#nn.ConvTranspose2d(48, 32, 3, stride=3 , padding=2),  # [batch, 12, 16, 16]", "\n", "#nn.ReLU(),", "\n", "nn", ".", "ConvTranspose2d", "(", "48", ",", "3", ",", "8", ",", "stride", "=", "6", ",", "padding", "=", "0", ")", ",", "# [batch, 3, 32, 32]", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.ImageNet_Decoder_2304.forward": [[387, 390], ["cae.ImageNet_Decoder_2304.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "decoded", "=", "self", ".", "decoder", "(", "x", ")", "\n", "return", "decoded", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.ImageNet_Encoder_3456.__init__": [[393, 410], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ImageNet_Encoder_3456", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Input size: [batch, 3, 32, 32]  3072", "\n", "# Output size: [batch, 3, 32, 32]", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "48", ",", "8", ",", "stride", "=", "6", ",", "padding", "=", "0", ")", ",", "# [batch, 18, 55, 55]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "48", ",", "96", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "# [batch, 72, 13, 13]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "96", ",", "288", ",", "3", ",", "stride", "=", "3", ",", "padding", "=", "0", ")", ",", "# [batch, 144, 6, 6]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "288", ",", "576", ",", "2", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "# [batch, 288, 3, 3]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "576", ",", "1152", ",", "2", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "# [batch, 864, 1, 1]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "1152", ",", "3456", ",", "3", ",", "stride", "=", "3", ",", "padding", "=", "0", ")", ",", "# [batch, 864, 1, 1]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.ImageNet_Encoder_3456.forward": [[412, 415], ["cae.ImageNet_Encoder_3456.encoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "encoded", "=", "self", ".", "encoder", "(", "x", ")", "\n", "return", "encoded", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.ImageNet_Decoder_3456.__init__": [[418, 439], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ImageNet_Decoder_3456", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Input size: [batch, 3, 32, 32]", "\n", "# Output size: [batch, 3, 32, 32]", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "3456", ",", "1152", ",", "3", ",", "stride", "=", "3", ",", "padding", "=", "0", ")", ",", "# [batch, 48, 4, 4]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "1152", ",", "576", ",", "2", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "# [batch, 48, 4, 4]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "576", ",", "288", ",", "2", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "# [batch, 48, 4, 4]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "288", ",", "96", ",", "3", ",", "stride", "=", "3", ",", "padding", "=", "0", ")", ",", "# [batch, 48, 4, 4]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "96", ",", "48", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "# [batch, 48, 4, 4]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "# nn.ConvTranspose2d(48, 24, 4, stride=2, padding=1),  # [batch, 24, 8, 8]", "\n", "# nn.ReLU(),", "\n", "#nn.ConvTranspose2d(48, 32, 3, stride=3 , padding=2),  # [batch, 12, 16, 16]", "\n", "#nn.ReLU(),", "\n", "nn", ".", "ConvTranspose2d", "(", "48", ",", "3", ",", "8", ",", "stride", "=", "6", ",", "padding", "=", "0", ")", ",", "# [batch, 3, 32, 32]", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.ImageNet_Decoder_3456.forward": [[441, 444], ["cae.ImageNet_Decoder_3456.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "decoded", "=", "self", ".", "decoder", "(", "x", ")", "\n", "return", "decoded", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.TinyImageNet_Encoder.__init__": [[447, 461], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "TinyImageNet_Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Input size: [batch, 3, 64, 64]", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "6", ",", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "6", ",", "24", ",", "4", ",", "stride", "=", "4", ",", "padding", "=", "0", ")", ",", "# [batch, 12, 16, 16]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "24", ",", "48", ",", "3", ",", "stride", "=", "3", ",", "padding", "=", "2", ")", ",", "# [batch, 24, 8, 8]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "# nn.Conv2d(24, 48, 4, stride=2, padding=1),           # [batch, 48, 4, 4]", "\n", "# nn.ReLU(),", "\n", "nn", ".", "Conv2d", "(", "48", ",", "96", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "# [batch, 96, 2, 2]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.TinyImageNet_Encoder.forward": [[463, 466], ["cae.TinyImageNet_Encoder.encoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "encoded", "=", "self", ".", "encoder", "(", "x", ")", "# output size  [batch, 192, 1, 1]", "\n", "return", "encoded", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.TinyImageNet_Decoder.__init__": [[469, 484], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "TinyImageNet_Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Input size: [batch, 3, 32, 32]", "\n", "# Output size: [batch, 3, 32, 32]", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "96", ",", "48", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "# [batch, 48, 4, 4]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "# nn.ConvTranspose2d(48, 24, 4, stride=2, padding=1),  # [batch, 24, 8, 8]", "\n", "# nn.ReLU(),", "\n", "nn", ".", "ConvTranspose2d", "(", "48", ",", "24", ",", "3", ",", "stride", "=", "3", ",", "padding", "=", "2", ")", ",", "# [batch, 12, 16, 16]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "24", ",", "6", ",", "4", ",", "stride", "=", "4", ",", "padding", "=", "0", ")", ",", "# [batch, 3, 32, 32]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "6", ",", "3", ",", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.TinyImageNet_Decoder.forward": [[486, 489], ["cae.TinyImageNet_Decoder.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "decoded", "=", "self", ".", "decoder", "(", "x", ")", "\n", "return", "decoded", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.TinyImageNet_Encoder_768.__init__": [[491, 505], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "TinyImageNet_Encoder_768", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Input size: [batch, 3, 64, 64]", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "24", ",", "4", ",", "stride", "=", "4", ",", "padding", "=", "0", ")", ",", "# [batch, 24, 8, 8]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "24", ",", "48", ",", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "# [batch, 48, 4, 4]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "# nn.Conv2d(24, 48, 4, stride=2, padding=1),", "\n", "# nn.ReLU(),", "\n", "nn", ".", "Conv2d", "(", "48", ",", "96", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "# [batch, 96, 2, 2]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "96", ",", "192", ",", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "# [batch, 192, 1, 1]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.TinyImageNet_Encoder_768.forward": [[507, 510], ["cae.TinyImageNet_Encoder_768.encoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "encoded", "=", "self", ".", "encoder", "(", "x", ")", "# output size  [batch, 192, 1, 1]", "\n", "return", "encoded", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.TinyImageNet_Decoder_768.__init__": [[513, 528], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "TinyImageNet_Decoder_768", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Input size: [batch, 3, 32, 32]", "\n", "# Output size: [batch, 3, 32, 32]", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "192", ",", "96", ",", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "# [batch, 96, 2, 2]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "96", ",", "48", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "# [batch, 48, 4, 4]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "# nn.ConvTranspose2d(48, 24, 4, stride=2, padding=1),  # [batch, 24, 8, 8]", "\n", "# nn.ReLU(),", "\n", "nn", ".", "ConvTranspose2d", "(", "48", ",", "24", ",", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "# [batch, 12, 16, 16]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "24", ",", "3", ",", "4", ",", "stride", "=", "4", ",", "padding", "=", "0", ")", ",", "# [batch, 3, 32, 32]", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.TinyImageNet_Decoder_768.forward": [[530, 533], ["cae.TinyImageNet_Decoder_768.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "decoded", "=", "self", ".", "decoder", "(", "x", ")", "\n", "return", "decoded", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.Cifar_Encoder_48.__init__": [[537, 552], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Cifar_Encoder_48", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Input size: [batch, 3, 32, 32]", "\n", "# Output size: [batch, 3, 32, 32]", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "6", ",", "4", ",", "stride", "=", "4", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "6", ",", "12", ",", "3", ",", "stride", "=", "3", ",", "padding", "=", "2", ")", ",", "# [batch, 24, 8, 8]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "# nn.Conv2d(24, 48, 4, stride=2, padding=1),           # [batch, 48, 4, 4]", "\n", "# nn.ReLU(),", "\n", "nn", ".", "Conv2d", "(", "12", ",", "24", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "# [batch, 96, 2, 2]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "24", ",", "48", ",", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "# [batch, 192, 1, 1]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.Cifar_Encoder_48.forward": [[553, 556], ["cae.Cifar_Encoder_48.encoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "encoded", "=", "self", ".", "encoder", "(", "x", ")", "# output size  [batch, 192, 1, 1]", "\n", "return", "encoded", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.Cifar_Decoder_48.__init__": [[559, 574], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Cifar_Decoder_48", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Input size: [batch, 3, 32, 32]", "\n", "# Output size: [batch, 3, 32, 32]", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "48", ",", "24", ",", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "# [batch, 96, 2, 2]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "24", ",", "12", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "# [batch, 48, 4, 4]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "# nn.ConvTranspose2d(48, 24, 4, stride=2, padding=1),  # [batch, 24, 8, 8]", "\n", "# nn.ReLU(),", "\n", "nn", ".", "ConvTranspose2d", "(", "12", ",", "6", ",", "3", ",", "stride", "=", "3", ",", "padding", "=", "2", ")", ",", "# [batch, 12, 16, 16]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "6", ",", "3", ",", "4", ",", "stride", "=", "4", ",", "padding", "=", "0", ")", ",", "# [batch, 3, 32, 32]", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.Cifar_Decoder_48.forward": [[575, 578], ["cae.Cifar_Decoder_48.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "decoded", "=", "self", ".", "decoder", "(", "x", ")", "\n", "return", "decoded", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.Cifar_Encoder_96.__init__": [[583, 598], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Cifar_Encoder_96", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Input size: [batch, 3, 32, 32]", "\n", "# Output size: [batch, 3, 32, 32]", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "12", ",", "4", ",", "stride", "=", "4", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "12", ",", "24", ",", "3", ",", "stride", "=", "3", ",", "padding", "=", "2", ")", ",", "# [batch, 24, 8, 8]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "# nn.Conv2d(24, 48, 4, stride=2, padding=1),           # [batch, 48, 4, 4]", "\n", "# nn.ReLU(),", "\n", "nn", ".", "Conv2d", "(", "24", ",", "48", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "# [batch, 96, 2, 2]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "48", ",", "96", ",", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "# [batch, 192, 1, 1]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.Cifar_Encoder_96.forward": [[599, 602], ["cae.Cifar_Encoder_96.encoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "encoded", "=", "self", ".", "encoder", "(", "x", ")", "# output size  [batch, 192, 1, 1]", "\n", "return", "encoded", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.Cifar_Decoder_96.__init__": [[605, 620], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Cifar_Decoder_96", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Input size: [batch, 3, 32, 32]", "\n", "# Output size: [batch, 3, 32, 32]", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "96", ",", "48", ",", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "# [batch, 96, 2, 2]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "48", ",", "24", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "# [batch, 48, 4, 4]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "# nn.ConvTranspose2d(48, 24, 4, stride=2, padding=1),  # [batch, 24, 8, 8]", "\n", "# nn.ReLU(),", "\n", "nn", ".", "ConvTranspose2d", "(", "24", ",", "12", ",", "3", ",", "stride", "=", "3", ",", "padding", "=", "2", ")", ",", "# [batch, 12, 16, 16]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "12", ",", "3", ",", "4", ",", "stride", "=", "4", ",", "padding", "=", "0", ")", ",", "# [batch, 3, 32, 32]", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.Cifar_Decoder_96.forward": [[621, 624], ["cae.Cifar_Decoder_96.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "decoded", "=", "self", ".", "decoder", "(", "x", ")", "\n", "return", "decoded", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.Cifar_Encoder_192_24.__init__": [[629, 644], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Cifar_Encoder_192_24", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Input size: [batch, 3, 32, 32]", "\n", "# Output size: [batch, 3, 32, 32]", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "24", ",", "4", ",", "stride", "=", "4", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "24", ",", "48", ",", "3", ",", "stride", "=", "3", ",", "padding", "=", "2", ")", ",", "# [batch, 24, 8, 8]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "# nn.Conv2d(24, 48, 4, stride=2, padding=1),           # [batch, 48, 4, 4]", "\n", "# nn.ReLU(),", "\n", "nn", ".", "Conv2d", "(", "48", ",", "96", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "# [batch, 96, 2, 2]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "96", ",", "192", ",", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "# [batch, 192, 1, 1]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.Cifar_Encoder_192_24.forward": [[645, 648], ["cae.Cifar_Encoder_192_24.encoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "encoded", "=", "self", ".", "encoder", "(", "x", ")", "# output size  [batch, 192, 1, 1]", "\n", "return", "encoded", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.Cifar_Decoder_192_24.__init__": [[651, 666], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Cifar_Decoder_192_24", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Input size: [batch, 3, 32, 32]", "\n", "# Output size: [batch, 3, 32, 32]", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "192", ",", "96", ",", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "# [batch, 96, 2, 2]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "96", ",", "48", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "# [batch, 48, 4, 4]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "# nn.ConvTranspose2d(48, 24, 4, stride=2, padding=1),  # [batch, 24, 8, 8]", "\n", "# nn.ReLU(),", "\n", "nn", ".", "ConvTranspose2d", "(", "48", ",", "24", ",", "3", ",", "stride", "=", "3", ",", "padding", "=", "2", ")", ",", "# [batch, 12, 16, 16]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "24", ",", "3", ",", "4", ",", "stride", "=", "4", ",", "padding", "=", "0", ")", ",", "# [batch, 3, 32, 32]", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.Cifar_Decoder_192_24.forward": [[668, 671], ["cae.Cifar_Decoder_192_24.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "decoded", "=", "self", ".", "decoder", "(", "x", ")", "\n", "return", "decoded", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.Cifar_Encoder_192.__init__": [[676, 691], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Cifar_Encoder_192", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Input size: [batch, 3, 32, 32]", "\n", "# Output size: [batch, 3, 32, 32]", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "4", ",", "stride", "=", "4", ",", "padding", "=", "0", ")", ",", "# [batch, 12, 16, 16]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "48", ",", "3", ",", "stride", "=", "3", ",", "padding", "=", "2", ")", ",", "# [batch, 24, 8, 8]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "# nn.Conv2d(24, 48, 4, stride=2, padding=1),           # [batch, 48, 4, 4]", "\n", "# nn.ReLU(),", "\n", "nn", ".", "Conv2d", "(", "48", ",", "96", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "# [batch, 96, 2, 2]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "96", ",", "192", ",", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "# [batch, 192, 1, 1]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.Cifar_Encoder_192.forward": [[692, 695], ["cae.Cifar_Encoder_192.encoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "encoded", "=", "self", ".", "encoder", "(", "x", ")", "# output size  [batch, 192, 1, 1]", "\n", "return", "encoded", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.Cifar_Decoder_192.__init__": [[698, 713], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Cifar_Decoder_192", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Input size: [batch, 3, 32, 32]", "\n", "# Output size: [batch, 3, 32, 32]", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "192", ",", "96", ",", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "# [batch, 96, 2, 2]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "96", ",", "48", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "# [batch, 48, 4, 4]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "# nn.ConvTranspose2d(48, 24, 4, stride=2, padding=1),  # [batch, 24, 8, 8]", "\n", "# nn.ReLU(),", "\n", "nn", ".", "ConvTranspose2d", "(", "48", ",", "32", ",", "3", ",", "stride", "=", "3", ",", "padding", "=", "2", ")", ",", "# [batch, 12, 16, 16]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "32", ",", "3", ",", "4", ",", "stride", "=", "4", ",", "padding", "=", "0", ")", ",", "# [batch, 3, 32, 32]", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.Cifar_Decoder_192.forward": [[715, 718], ["cae.Cifar_Decoder_192.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "decoded", "=", "self", ".", "decoder", "(", "x", ")", "\n", "return", "decoded", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.Cifar_Encoder_384.__init__": [[722, 735], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Cifar_Encoder_384", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Input size: [batch, 3, 32, 32]", "\n", "# Output size: [batch, 3, 32, 32]", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "24", ",", "4", ",", "stride", "=", "4", ",", "padding", "=", "0", ")", ",", "# [batch, 12, 16, 16]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "24", ",", "48", ",", "3", ",", "stride", "=", "3", ",", "padding", "=", "2", ")", ",", "# [batch, 24, 8, 8]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "# nn.Conv2d(24, 48, 4, stride=2, padding=1),          # [batch, 48, 4, 4]", "\n", "# nn.ReLU(),", "\n", "nn", ".", "Conv2d", "(", "48", ",", "96", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "# [batch, 96, 2, 2]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.Cifar_Encoder_384.forward": [[736, 739], ["cae.Cifar_Encoder_384.encoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "encoded", "=", "self", ".", "encoder", "(", "x", ")", "# output size  [batch, 96, 2, 2]", "\n", "return", "encoded", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.Cifar_Decoder_384.__init__": [[742, 755], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Cifar_Decoder_384", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Input size: [batch, 3, 32, 32]", "\n", "# Output size: [batch, 3, 32, 32]", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "96", ",", "48", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "# [batch, 48, 4, 4]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "# nn.ConvTranspose2d(48, 24, 4, stride=2, padding=1),  # [batch, 24, 8, 8]", "\n", "# nn.ReLU(),", "\n", "nn", ".", "ConvTranspose2d", "(", "48", ",", "24", ",", "3", ",", "stride", "=", "3", ",", "padding", "=", "2", ")", ",", "# [batch, 12, 16, 16]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "24", ",", "3", ",", "4", ",", "stride", "=", "4", ",", "padding", "=", "0", ")", ",", "# [batch, 3, 32, 32]", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.Cifar_Decoder_384.forward": [[757, 760], ["cae.Cifar_Decoder_384.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "decoded", "=", "self", ".", "decoder", "(", "x", ")", "\n", "return", "decoded", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.Cifar_Encoder_768_32.__init__": [[763, 772], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Cifar_Encoder_768_32", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Input size: [batch, 3, 32, 32]", "\n", "# Output size: [batch, 3, 32, 32]", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "4", ",", "stride", "=", "4", ",", "padding", "=", "0", ")", ",", "# [batch, 12, 16, 16]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "48", ",", "3", ",", "stride", "=", "3", ",", "padding", "=", "2", ")", ",", "# [batch, 24, 8, 8]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "#nn.Conv2d(24, 48, 4, stride=2, padding=1),           # [batch, 48, 4, 4]", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.Cifar_Encoder_768_32.forward": [[777, 780], ["cae.Cifar_Encoder_768_32.encoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "encoded", "=", "self", ".", "encoder", "(", "x", ")", "# Output Size: [batch, 48, 4, 4]", "\n", "return", "encoded", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.Cifar_Decoder_768_32.__init__": [[783, 796], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Cifar_Decoder_768_32", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Input size: [batch, 3, 32, 32]", "\n", "# Output size: [batch, 3, 32, 32]", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "\n", "#nn.ConvTranspose2d(96, 48, 4, stride=2, padding=1),  # [batch, 48, 4, 4]", "\n", "#nn.ReLU(),", "\n", "#nn.ConvTranspose2d(48, 24, 4, stride=2, padding=1),  # [batch, 24, 8, 8]", "\n", "#nn.ReLU(),", "\n", "nn", ".", "ConvTranspose2d", "(", "48", ",", "32", ",", "3", ",", "stride", "=", "3", ",", "padding", "=", "2", ")", ",", "# [batch, 12, 16, 16]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "32", ",", "3", ",", "4", ",", "stride", "=", "4", ",", "padding", "=", "0", ")", ",", "# [batch, 3, 32, 32]", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.Cifar_Decoder_768_32.forward": [[798, 801], ["cae.Cifar_Decoder_768_32.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "decoded", "=", "self", ".", "decoder", "(", "x", ")", "\n", "return", "decoded", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.Cifar_Encoder_768_24.__init__": [[804, 815], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Cifar_Encoder_768_24", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Input size: [batch, 3, 32, 32]", "\n", "# Output size: [batch, 3, 32, 32]", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "24", ",", "4", ",", "stride", "=", "4", ",", "padding", "=", "0", ")", ",", "# [batch, 12, 16, 16]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "#nn.Conv2d(32, 48, 3, stride=3, padding=2),           # [batch, 24, 8, 8]", "\n", "#nn.ReLU(),", "\n", "nn", ".", "Conv2d", "(", "24", ",", "48", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "# [batch, 48, 4, 4]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "#nn.Conv2d(48, 96, 4, stride=2, padding=1),           # [batch, 96, 2, 2]", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.Cifar_Encoder_768_24.forward": [[818, 821], ["cae.Cifar_Encoder_768_24.encoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "encoded", "=", "self", ".", "encoder", "(", "x", ")", "# Output Size: [batch, 48, 4, 4]", "\n", "return", "encoded", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.Cifar_Decoder_768_24.__init__": [[824, 837], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Cifar_Decoder_768_24", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Input size: [batch, 3, 32, 32]", "\n", "# Output size: [batch, 3, 32, 32]", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "\n", "#nn.ConvTranspose2d(96, 48, 4, stride=2, padding=1),  # [batch, 48, 4, 4]", "\n", "#nn.ReLU(),", "\n", "nn", ".", "ConvTranspose2d", "(", "48", ",", "24", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "# [batch, 24, 8, 8]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "#nn.ConvTranspose2d(48, 32, 3, stride=3 , padding=2),  # [batch, 12, 16, 16]", "\n", "#nn.ReLU(),", "\n", "nn", ".", "ConvTranspose2d", "(", "24", ",", "3", ",", "4", ",", "stride", "=", "4", ",", "padding", "=", "0", ")", ",", "# [batch, 3, 32, 32]", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.Cifar_Decoder_768_24.forward": [[839, 842], ["cae.Cifar_Decoder_768_24.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "decoded", "=", "self", ".", "decoder", "(", "x", ")", "\n", "return", "decoded", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.Cifar_Encoder_1536.__init__": [[845, 852], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Cifar_Encoder_1536", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Input size: [batch, 3, 32, 32]  3072", "\n", "# Output size: [batch, 3, 32, 32]", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "24", ",", "4", ",", "stride", "=", "4", ",", "padding", "=", "0", ")", ",", "# [batch, 12, 16, 16]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "#nn.Conv2d(32, 48, 3, stride=3, padding=2),           # [batch, 24, 8, 8]", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.Cifar_Encoder_1536.forward": [[859, 862], ["cae.Cifar_Encoder_1536.encoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "encoded", "=", "self", ".", "encoder", "(", "x", ")", "\n", "return", "encoded", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.Cifar_Decoder_1536.__init__": [[865, 878], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.ConvTranspose2d", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Cifar_Decoder_1536", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Input size: [batch, 3, 32, 32]", "\n", "# Output size: [batch, 3, 32, 32]", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "\n", "#nn.ConvTranspose2d(96, 48, 4, stride=2, padding=1),  # [batch, 48, 4, 4]", "\n", "#nn.ReLU(),", "\n", "# nn.ConvTranspose2d(48, 24, 4, stride=2, padding=1),  # [batch, 24, 8, 8]", "\n", "# nn.ReLU(),", "\n", "#nn.ConvTranspose2d(48, 32, 3, stride=3 , padding=2),  # [batch, 12, 16, 16]", "\n", "#nn.ReLU(),", "\n", "nn", ".", "ConvTranspose2d", "(", "24", ",", "3", ",", "4", ",", "stride", "=", "4", ",", "padding", "=", "0", ")", ",", "# [batch, 3, 32, 32]", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.Cifar_Decoder_1536.forward": [[880, 883], ["cae.Cifar_Decoder_1536.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "decoded", "=", "self", ".", "decoder", "(", "x", ")", "\n", "return", "decoded", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.Cifar_Encoder_2048.__init__": [[886, 893], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Cifar_Encoder_2048", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Input size: [batch, 3, 32, 32]  3072", "\n", "# Output size: [batch, 3, 32, 32]", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "4", ",", "stride", "=", "4", ",", "padding", "=", "0", ")", ",", "# [batch, 12, 16, 16]", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "#nn.Conv2d(32, 48, 3, stride=3, padding=2),           # [batch, 24, 8, 8]", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.Cifar_Encoder_2048.forward": [[900, 903], ["cae.Cifar_Encoder_2048.encoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "encoded", "=", "self", ".", "encoder", "(", "x", ")", "\n", "return", "encoded", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.Cifar_Decoder_2048.__init__": [[906, 919], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.ConvTranspose2d", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Cifar_Decoder_2048", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Input size: [batch, 3, 32, 32]", "\n", "# Output size: [batch, 3, 32, 32]", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "\n", "#nn.ConvTranspose2d(96, 48, 4, stride=2, padding=1),  # [batch, 48, 4, 4]", "\n", "#nn.ReLU(),", "\n", "# nn.ConvTranspose2d(48, 24, 4, stride=2, padding=1),  # [batch, 24, 8, 8]", "\n", "# nn.ReLU(),", "\n", "#nn.ConvTranspose2d(48, 32, 3, stride=3 , padding=2),  # [batch, 12, 16, 16]", "\n", "#nn.ReLU(),", "\n", "nn", ".", "ConvTranspose2d", "(", "32", ",", "3", ",", "4", ",", "stride", "=", "4", ",", "padding", "=", "0", ")", ",", "# [batch, 3, 32, 32]", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.cae.Cifar_Decoder_2048.forward": [[921, 924], ["cae.Cifar_Decoder_2048.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "decoded", "=", "self", ".", "decoder", "(", "x", ")", "\n", "return", "decoded", "\n", "", "", ""]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.googlenet.Inception.__init__": [[8, 46], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "n1x1", ",", "n3x3red", ",", "n3x3", ",", "n5x5red", ",", "n5x5", ",", "pool_planes", ")", ":", "\n", "        ", "super", "(", "Inception", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# 1x1 conv branch", "\n", "self", ".", "b1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "n1x1", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n1x1", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "# 1x1 conv -> 3x3 conv branch", "\n", "self", ".", "b2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "n3x3red", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n3x3red", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "n3x3red", ",", "n3x3", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n3x3", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "# 1x1 conv -> 5x5 conv branch", "\n", "self", ".", "b3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "n5x5red", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n5x5red", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "n5x5red", ",", "n5x5", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n5x5", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "n5x5", ",", "n5x5", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n5x5", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "# 3x3 pool -> 1x1 conv branch", "\n", "self", ".", "b4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "pool_planes", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "pool_planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.googlenet.Inception.forward": [[48, 54], ["googlenet.Inception.b1", "googlenet.Inception.b2", "googlenet.Inception.b3", "googlenet.Inception.b4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y1", "=", "self", ".", "b1", "(", "x", ")", "\n", "y2", "=", "self", ".", "b2", "(", "x", ")", "\n", "y3", "=", "self", ".", "b3", "(", "x", ")", "\n", "y4", "=", "self", ".", "b4", "(", "x", ")", "\n", "return", "torch", ".", "cat", "(", "[", "y1", ",", "y2", ",", "y3", ",", "y4", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.googlenet.GoogLeNet.__init__": [[57, 81], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "googlenet.Inception", "googlenet.Inception", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GoogLeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pre_layers", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "192", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "192", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "self", ".", "a3", "=", "Inception", "(", "192", ",", "64", ",", "96", ",", "128", ",", "16", ",", "32", ",", "32", ")", "\n", "self", ".", "b3", "=", "Inception", "(", "256", ",", "128", ",", "128", ",", "192", ",", "32", ",", "96", ",", "64", ")", "\n", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "a4", "=", "Inception", "(", "480", ",", "192", ",", "96", ",", "208", ",", "16", ",", "48", ",", "64", ")", "\n", "self", ".", "b4", "=", "Inception", "(", "512", ",", "160", ",", "112", ",", "224", ",", "24", ",", "64", ",", "64", ")", "\n", "self", ".", "c4", "=", "Inception", "(", "512", ",", "128", ",", "128", ",", "256", ",", "24", ",", "64", ",", "64", ")", "\n", "self", ".", "d4", "=", "Inception", "(", "512", ",", "112", ",", "144", ",", "288", ",", "32", ",", "64", ",", "64", ")", "\n", "self", ".", "e4", "=", "Inception", "(", "528", ",", "256", ",", "160", ",", "320", ",", "32", ",", "128", ",", "128", ")", "\n", "\n", "self", ".", "a5", "=", "Inception", "(", "832", ",", "256", ",", "160", ",", "320", ",", "32", ",", "128", ",", "128", ")", "\n", "self", ".", "b5", "=", "Inception", "(", "832", ",", "384", ",", "192", ",", "384", ",", "48", ",", "128", ",", "128", ")", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ",", "stride", "=", "1", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "1024", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.googlenet.GoogLeNet.forward": [[82, 99], ["googlenet.GoogLeNet.pre_layers", "googlenet.GoogLeNet.a3", "googlenet.GoogLeNet.b3", "googlenet.GoogLeNet.maxpool", "googlenet.GoogLeNet.a4", "googlenet.GoogLeNet.b4", "googlenet.GoogLeNet.c4", "googlenet.GoogLeNet.d4", "googlenet.GoogLeNet.e4", "googlenet.GoogLeNet.maxpool", "googlenet.GoogLeNet.a5", "googlenet.GoogLeNet.b5", "googlenet.GoogLeNet.avgpool", "googlenet.GoogLeNet.view", "googlenet.GoogLeNet.linear", "googlenet.GoogLeNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "pre_layers", "(", "x", ")", "\n", "out", "=", "self", ".", "a3", "(", "out", ")", "\n", "out", "=", "self", ".", "b3", "(", "out", ")", "\n", "out", "=", "self", ".", "maxpool", "(", "out", ")", "\n", "out", "=", "self", ".", "a4", "(", "out", ")", "\n", "out", "=", "self", ".", "b4", "(", "out", ")", "\n", "out", "=", "self", ".", "c4", "(", "out", ")", "\n", "out", "=", "self", ".", "d4", "(", "out", ")", "\n", "out", "=", "self", ".", "e4", "(", "out", ")", "\n", "out", "=", "self", ".", "maxpool", "(", "out", ")", "\n", "out", "=", "self", ".", "a5", "(", "out", ")", "\n", "out", "=", "self", ".", "b5", "(", "out", ")", "\n", "out", "=", "self", ".", "avgpool", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.googlenet.test": [[101, 106], ["googlenet.GoogLeNet", "torch.randn", "torch.randn", "torch.randn", "GoogLeNet.", "print", "net.size"], "function", ["None"], ["", "", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "GoogLeNet", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.preact_resnet.PreActBlock.__init__": [[16, 26], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PreActBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.preact_resnet.PreActBlock.forward": [[28, 35], ["torch.relu", "torch.relu", "torch.relu", "preact_resnet.PreActBlock.conv1", "preact_resnet.PreActBlock.conv2", "preact_resnet.PreActBlock.bn1", "hasattr", "preact_resnet.PreActBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "preact_resnet.PreActBlock.bn2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "if", "hasattr", "(", "self", ",", "'shortcut'", ")", "else", "x", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.preact_resnet.PreActBottleneck.__init__": [[41, 53], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PreActBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.preact_resnet.PreActBottleneck.forward": [[55, 63], ["torch.relu", "torch.relu", "torch.relu", "preact_resnet.PreActBottleneck.conv1", "preact_resnet.PreActBottleneck.conv2", "preact_resnet.PreActBottleneck.conv3", "preact_resnet.PreActBottleneck.bn1", "hasattr", "preact_resnet.PreActBottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "preact_resnet.PreActBottleneck.bn2", "preact_resnet.PreActBottleneck.bn3"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "if", "hasattr", "(", "self", ",", "'shortcut'", ")", "else", "x", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "conv3", "(", "F", ".", "relu", "(", "self", ".", "bn3", "(", "out", ")", ")", ")", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.preact_resnet.PreActResNet.__init__": [[66, 76], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "preact_resnet.PreActResNet._make_layer", "preact_resnet.PreActResNet._make_layer", "preact_resnet.PreActResNet._make_layer", "preact_resnet.PreActResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.NetworkBlock._make_layer", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.NetworkBlock._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "PreActResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.preact_resnet.PreActResNet._make_layer": [[77, 84], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.preact_resnet.PreActResNet.forward": [[85, 95], ["preact_resnet.PreActResNet.conv1", "preact_resnet.PreActResNet.layer1", "preact_resnet.PreActResNet.layer2", "preact_resnet.PreActResNet.layer3", "preact_resnet.PreActResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "preact_resnet.PreActResNet.view", "preact_resnet.PreActResNet.linear", "preact_resnet.PreActResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.preact_resnet.PreActResNet18": [[97, 99], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "", "def", "PreActResNet18", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.preact_resnet.PreActResNet34": [[100, 102], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "def", "PreActResNet34", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.preact_resnet.PreActResNet50": [[103, 105], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "def", "PreActResNet50", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.preact_resnet.PreActResNet101": [[106, 108], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "def", "PreActResNet101", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.preact_resnet.PreActResNet152": [[109, 111], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "def", "PreActResNet152", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.preact_resnet.test": [[113, 117], ["preact_resnet.PreActResNet18", "PreActResNet18.", "print", "torch.randn", "torch.randn", "torch.randn", "net.size"], "function", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.preact_resnet.PreActResNet18"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "PreActResNet18", "(", ")", "\n", "y", "=", "net", "(", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.tiny_resnet.TinyResNet50.__init__": [[6, 18], ["torch.Module.__init__", "torchvision.resnet50", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Conv2d", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", "=", "1", ")", ":", "\n", "        ", "super", "(", "TinyResNet50", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Load a pretrained resnet model from torchvision.models in Pytorch", "\n", "self", ".", "model", "=", "models", ".", "resnet50", "(", "pretrained", "=", "True", ")", "\n", "\n", "self", ".", "model", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "num_ftrs", "=", "self", ".", "model", ".", "fc", ".", "in_features", "\n", "self", ".", "model", ".", "fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "200", ")", "\n", "\n", "self", ".", "model", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "model", ".", "maxpool", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.tiny_resnet.TinyResNet50.forward": [[19, 21], ["tiny_resnet.TinyResNet50.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.tiny_resnet.TinyResNet18.__init__": [[24, 36], ["torch.Module.__init__", "torchvision.resnet18", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Conv2d", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", "=", "1", ")", ":", "\n", "        ", "super", "(", "TinyResNet18", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Load a pretrained resnet model from torchvision.models", "\n", "self", ".", "model", "=", "models", ".", "resnet18", "(", "pretrained", "=", "True", ")", "\n", "\n", "self", ".", "model", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "num_ftrs", "=", "self", ".", "model", ".", "fc", ".", "in_features", "\n", "self", ".", "model", ".", "fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "200", ")", "\n", "\n", "self", ".", "model", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "model", ".", "maxpool", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.tiny_resnet.TinyResNet18.forward": [[37, 39], ["tiny_resnet.TinyResNet18.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.BasicBlock.__init__": [[8, 22], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "droprate", "=", "dropRate", "\n", "self", ".", "equalInOut", "=", "(", "in_planes", "==", "out_planes", ")", "\n", "self", ".", "convShortcut", "=", "(", "not", "self", ".", "equalInOut", ")", "and", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "bias", "=", "False", ")", "or", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.BasicBlock.forward": [[23, 39], ["wrn.BasicBlock.conv2", "wrn.BasicBlock.relu1", "wrn.BasicBlock.relu1", "wrn.BasicBlock.relu2", "wrn.BasicBlock.relu2", "torch.dropout", "torch.dropout", "torch.dropout", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "wrn.BasicBlock.bn1", "wrn.BasicBlock.bn1", "wrn.BasicBlock.bn2", "wrn.BasicBlock.bn2", "wrn.BasicBlock.convShortcut", "wrn.BasicBlock.conv1", "wrn.BasicBlock.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "equalInOut", ":", "\n", "            ", "x", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "if", "self", ".", "equalInOut", ":", "\n", "            ", "out", "=", "self", ".", "relu2", "(", "self", ".", "bn2", "(", "self", ".", "conv1", "(", "out", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "relu2", "(", "self", ".", "bn2", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "", "if", "self", ".", "droprate", ">", "0", ":", "\n", "            ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "droprate", ",", "training", "=", "self", ".", "training", ")", "\n", "", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "if", "not", "self", ".", "equalInOut", ":", "\n", "            ", "return", "torch", ".", "add", "(", "self", ".", "convShortcut", "(", "x", ")", ",", "out", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "add", "(", "x", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.NetworkBlock.__init__": [[42, 45], ["torch.Module.__init__", "wrn.NetworkBlock._make_layer"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__", "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.NetworkBlock._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "nb_layers", ",", "in_planes", ",", "out_planes", ",", "block", ",", "stride", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "NetworkBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer", "=", "self", ".", "_make_layer", "(", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.NetworkBlock._make_layer": [[46, 51], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nb_layers", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "i", "==", "0", "and", "in_planes", "or", "out_planes", ",", "out_planes", ",", "i", "==", "0", "and", "stride", "or", "1", ",", "dropRate", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.NetworkBlock.forward": [[52, 54], ["wrn.NetworkBlock.layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "layer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__": [[57, 87], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "wrn.NetworkBlock", "wrn.NetworkBlock", "wrn.NetworkBlock", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "wrn.WideResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "num_classes", ",", "widen_factor", "=", "1", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "WideResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nChannels", "=", "[", "16", ",", "16", "*", "widen_factor", ",", "32", "*", "widen_factor", ",", "64", "*", "widen_factor", "]", "\n", "assert", "(", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ")", "\n", "n", "=", "(", "depth", "-", "4", ")", "//", "6", "\n", "block", "=", "BasicBlock", "\n", "# 1st conv before any network block", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "nChannels", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "# 1st block", "\n", "self", ".", "block1", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "0", "]", ",", "nChannels", "[", "1", "]", ",", "block", ",", "1", ",", "dropRate", ")", "\n", "# 2nd block", "\n", "self", ".", "block2", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "1", "]", ",", "nChannels", "[", "2", "]", ",", "block", ",", "2", ",", "dropRate", ")", "\n", "# 3rd block", "\n", "self", ".", "block3", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "2", "]", ",", "nChannels", "[", "3", "]", ",", "block", ",", "2", ",", "dropRate", ")", "\n", "# global average pooling and classifier", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nChannels", "[", "3", "]", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "nChannels", "[", "3", "]", ",", "num_classes", ")", "\n", "self", ".", "nChannels", "=", "nChannels", "[", "3", "]", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.damon-demon_black-box-defense.archs.wrn.WideResNet.forward": [[88, 97], ["wrn.WideResNet.conv1", "wrn.WideResNet.block1", "wrn.WideResNet.block2", "wrn.WideResNet.block3", "wrn.WideResNet.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "out.view.view.view", "wrn.WideResNet.fc", "wrn.WideResNet.bn1"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "block1", "(", "out", ")", "\n", "out", "=", "self", ".", "block2", "(", "out", ")", "\n", "out", "=", "self", ".", "block3", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "self", ".", "nChannels", ")", "\n", "return", "self", ".", "fc", "(", "out", ")", "\n", "", "", ""]]}