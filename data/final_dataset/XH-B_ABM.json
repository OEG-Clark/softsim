{"home.repos.pwc.inspect_result.XH-B_ABM.None.encoder.SingleLayer.__init__": [[10, 16], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.XH-B_ABM.None.decoder.Gru_prob.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nChannels", ",", "growthRate", ",", "use_dropout", ")", ":", "\n", "        ", "super", "(", "SingleLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nChannels", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "nChannels", ",", "growthRate", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "use_dropout", "=", "use_dropout", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "0.2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XH-B_ABM.None.encoder.SingleLayer.forward": [[17, 23], ["encoder.SingleLayer.conv1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "encoder.SingleLayer.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", ")", "\n", "if", "self", ".", "use_dropout", ":", "\n", "            ", "out", "=", "self", ".", "dropout", "(", "out", ")", "\n", "", "out", "=", "torch", ".", "cat", "(", "(", "x", ",", "out", ")", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.XH-B_ABM.None.encoder.Transition.__init__": [[27, 33], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.XH-B_ABM.None.decoder.Gru_prob.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nChannels", ",", "nOutChannels", ",", "use_dropout", ")", ":", "\n", "        ", "super", "(", "Transition", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nOutChannels", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "nChannels", ",", "nOutChannels", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "use_dropout", "=", "use_dropout", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "0.2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XH-B_ABM.None.encoder.Transition.forward": [[34, 40], ["torch.relu", "torch.relu", "torch.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "encoder.Transition.bn1", "encoder.Transition.dropout", "encoder.Transition.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ",", "inplace", "=", "True", ")", "\n", "if", "self", ".", "use_dropout", ":", "\n", "            ", "out", "=", "self", ".", "dropout", "(", "out", ")", "\n", "", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "2", ",", "ceil_mode", "=", "True", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.XH-B_ABM.None.encoder.Bottleneck.__init__": [[46, 55], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.XH-B_ABM.None.decoder.Gru_prob.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nChannels", ",", "growthRate", ",", "use_dropout", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "interChannels", "=", "4", "*", "growthRate", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "interChannels", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "nChannels", ",", "interChannels", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "growthRate", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "interChannels", ",", "growthRate", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "use_dropout", "=", "use_dropout", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "0.2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XH-B_ABM.None.encoder.Bottleneck.forward": [[56, 65], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "encoder.Bottleneck.bn1", "encoder.Bottleneck.dropout", "encoder.Bottleneck.bn2", "encoder.Bottleneck.dropout", "encoder.Bottleneck.conv1", "encoder.Bottleneck.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ",", "inplace", "=", "True", ")", "\n", "if", "self", ".", "use_dropout", ":", "\n", "            ", "out", "=", "self", ".", "dropout", "(", "out", ")", "\n", "", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ",", "inplace", "=", "True", ")", "\n", "if", "self", ".", "use_dropout", ":", "\n", "            ", "out", "=", "self", ".", "dropout", "(", "out", ")", "\n", "", "out", "=", "torch", ".", "cat", "(", "(", "x", ",", "out", ")", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.XH-B_ABM.None.encoder.DenseNet.__init__": [[70, 88], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "encoder.DenseNet._make_dense", "int", "encoder.Transition", "encoder.DenseNet._make_dense", "int", "encoder.Transition", "encoder.DenseNet._make_dense", "math.floor", "math.floor"], "methods", ["home.repos.pwc.inspect_result.XH-B_ABM.None.decoder.Gru_prob.__init__", "home.repos.pwc.inspect_result.XH-B_ABM.None.encoder.DenseNet._make_dense", "home.repos.pwc.inspect_result.XH-B_ABM.None.encoder.DenseNet._make_dense", "home.repos.pwc.inspect_result.XH-B_ABM.None.encoder.DenseNet._make_dense"], ["    ", "def", "__init__", "(", "self", ",", "growthRate", ",", "reduction", ",", "bottleneck", ",", "use_dropout", ")", ":", "\n", "        ", "super", "(", "DenseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nDenseBlocks", "=", "16", "\n", "nChannels", "=", "2", "*", "growthRate", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "1", ",", "nChannels", ",", "kernel_size", "=", "7", ",", "padding", "=", "3", ",", "stride", "=", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "dense1", "=", "self", ".", "_make_dense", "(", "nChannels", ",", "growthRate", ",", "nDenseBlocks", ",", "bottleneck", ",", "use_dropout", ")", "\n", "nChannels", "+=", "nDenseBlocks", "*", "growthRate", "\n", "nOutChannels", "=", "int", "(", "math", ".", "floor", "(", "nChannels", "*", "reduction", ")", ")", "\n", "self", ".", "trans1", "=", "Transition", "(", "nChannels", ",", "nOutChannels", ",", "use_dropout", ")", "\n", "\n", "nChannels", "=", "nOutChannels", "\n", "self", ".", "dense2", "=", "self", ".", "_make_dense", "(", "nChannels", ",", "growthRate", ",", "nDenseBlocks", ",", "bottleneck", ",", "use_dropout", ")", "\n", "nChannels", "+=", "nDenseBlocks", "*", "growthRate", "\n", "nOutChannels", "=", "int", "(", "math", ".", "floor", "(", "nChannels", "*", "reduction", ")", ")", "\n", "self", ".", "trans2", "=", "Transition", "(", "nChannels", ",", "nOutChannels", ",", "use_dropout", ")", "\n", "\n", "nChannels", "=", "nOutChannels", "\n", "self", ".", "dense3", "=", "self", ".", "_make_dense", "(", "nChannels", ",", "growthRate", ",", "nDenseBlocks", ",", "bottleneck", ",", "use_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XH-B_ABM.None.encoder.DenseNet._make_dense": [[89, 98], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "layers.append", "layers.append", "encoder.Bottleneck", "encoder.SingleLayer"], "methods", ["None"], ["", "def", "_make_dense", "(", "self", ",", "nChannels", ",", "growthRate", ",", "nDenseBlocks", ",", "bottleneck", ",", "use_dropout", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "int", "(", "nDenseBlocks", ")", ")", ":", "\n", "            ", "if", "bottleneck", ":", "\n", "                ", "layers", ".", "append", "(", "Bottleneck", "(", "nChannels", ",", "growthRate", ",", "use_dropout", ")", ")", "\n", "", "else", ":", "\n", "                ", "layers", ".", "append", "(", "SingleLayer", "(", "nChannels", ",", "growthRate", ",", "use_dropout", ")", ")", "\n", "", "nChannels", "+=", "growthRate", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XH-B_ABM.None.encoder.DenseNet.forward": [[99, 113], ["encoder.DenseNet.conv1", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "encoder.DenseNet.dense1", "encoder.DenseNet.trans1", "encoder.DenseNet.dense2", "encoder.DenseNet.trans2", "encoder.DenseNet.dense3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "# out_mask = x_mask[:, 0::2, 0::2]", "\n", "out", "=", "F", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "out", "=", "F", ".", "max_pool2d", "(", "out", ",", "2", ",", "ceil_mode", "=", "True", ")", "\n", "# out_mask = out_mask[:, 0::2, 0::2]", "\n", "out", "=", "self", ".", "dense1", "(", "out", ")", "\n", "out", "=", "self", ".", "trans1", "(", "out", ")", "\n", "# out_mask = out_mask[:, 0::2, 0::2]", "\n", "out", "=", "self", ".", "dense2", "(", "out", ")", "\n", "out", "=", "self", ".", "trans2", "(", "out", ")", "\n", "# out_mask = out_mask[:, 0::2, 0::2]", "\n", "out", "=", "self", ".", "dense3", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.XH-B_ABM.None.compute-wer.cmp_result": [[5, 18], ["numpy.zeros", "range", "range", "range", "range", "len", "len", "len", "len", "min", "len", "len", "len", "len", "len"], "function", ["None"], ["def", "cmp_result", "(", "label", ",", "rec", ")", ":", "\n", "    ", "dist_mat", "=", "numpy", ".", "zeros", "(", "(", "len", "(", "label", ")", "+", "1", ",", "len", "(", "rec", ")", "+", "1", ")", ",", "dtype", "=", "'int32'", ")", "\n", "dist_mat", "[", "0", ",", ":", "]", "=", "range", "(", "len", "(", "rec", ")", "+", "1", ")", "\n", "dist_mat", "[", ":", ",", "0", "]", "=", "range", "(", "len", "(", "label", ")", "+", "1", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "label", ")", "+", "1", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "1", ",", "len", "(", "rec", ")", "+", "1", ")", ":", "\n", "            ", "hit_score", "=", "dist_mat", "[", "i", "-", "1", ",", "j", "-", "1", "]", "+", "(", "label", "[", "i", "-", "1", "]", "!=", "rec", "[", "j", "-", "1", "]", ")", "\n", "ins_score", "=", "dist_mat", "[", "i", ",", "j", "-", "1", "]", "+", "1", "\n", "del_score", "=", "dist_mat", "[", "i", "-", "1", ",", "j", "]", "+", "1", "\n", "dist_mat", "[", "i", ",", "j", "]", "=", "min", "(", "hit_score", ",", "ins_score", ",", "del_score", ")", "\n", "\n", "", "", "dist", "=", "dist_mat", "[", "len", "(", "label", ")", ",", "len", "(", "rec", ")", "]", "\n", "return", "dist", ",", "len", "(", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XH-B_ABM.None.compute-wer.process": [[21, 73], ["print", "open", "open.write", "open.write", "open.close", "open", "open", "compute-wer.cmp_result", "line.split", "line.split", "float", "float", "float", "float"], "function", ["home.repos.pwc.inspect_result.XH-B_ABM.None.compute-wer.cmp_result"], ["", "def", "process", "(", "recfile", ",", "labelfile", ",", "resultfile", ",", "direction", ")", ":", "\n", "    ", "total_dist", "=", "0", "\n", "total_label", "=", "0", "\n", "total_line", "=", "0", "\n", "total_line_rec", "=", "0", "\n", "total_line_error1", "=", "0", "\n", "total_line_error2", "=", "0", "\n", "rec_mat", "=", "{", "}", "\n", "label_mat", "=", "{", "}", "\n", "result", "=", "{", "}", "\n", "with", "open", "(", "recfile", ")", "as", "f_rec", ":", "\n", "        ", "for", "line", "in", "f_rec", ":", "\n", "            ", "tmp", "=", "line", ".", "split", "(", ")", "\n", "key", "=", "tmp", "[", "0", "]", "\n", "latex", "=", "tmp", "[", "1", ":", "]", "\n", "rec_mat", "[", "key", "]", "=", "latex", "\n", "", "", "with", "open", "(", "labelfile", ")", "as", "f_label", ":", "\n", "        ", "for", "line", "in", "f_label", ":", "\n", "            ", "tmp", "=", "line", ".", "split", "(", ")", "\n", "key", "=", "tmp", "[", "0", "]", "\n", "if", "direction", "==", "1", ":", "\n", "                ", "latex", "=", "tmp", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "                ", "latex", "=", "tmp", "[", "1", ":", "]", "[", ":", ":", "-", "1", "]", "\n", "", "label_mat", "[", "key", "]", "=", "latex", "\n", "", "", "for", "key_rec", "in", "rec_mat", ":", "\n", "        ", "label", "=", "label_mat", "[", "key_rec", "]", "\n", "rec", "=", "rec_mat", "[", "key_rec", "]", "\n", "dist", ",", "llen", "=", "cmp_result", "(", "label", ",", "rec", ")", "\n", "total_dist", "+=", "dist", "\n", "total_label", "+=", "llen", "\n", "total_line", "+=", "1", "\n", "if", "dist", "==", "0", ":", "\n", "            ", "total_line_rec", "+=", "1", "\n", "\n", "", "elif", "dist", "==", "1", ":", "\n", "            ", "total_line_error1", "+=", "1", "\n", "", "elif", "dist", "==", "2", ":", "\n", "            ", "total_line_error2", "+=", "1", "\n", "", "else", ":", "\n", "            ", "result", "[", "key_rec", "]", "=", "''", ".", "join", "(", "label", ")", "+", "'\\t'", "+", "''", ".", "join", "(", "rec", ")", "\n", "\n", "\n", "", "", "wer", "=", "float", "(", "total_dist", ")", "/", "total_label", "*", "100", "\n", "sacc", "=", "float", "(", "total_line_rec", ")", "/", "total_line", "*", "100", "\n", "sacc1", "=", "float", "(", "total_line_rec", "+", "total_line_error1", ")", "/", "total_line", "*", "100", "\n", "sacc2", "=", "float", "(", "total_line_rec", "+", "total_line_error1", "+", "total_line_error2", ")", "/", "total_line", "*", "100", "\n", "print", "(", "'valid WER {:.4f},ExpRate {:.4f},{:.4f},{:.4f}'", ".", "format", "(", "wer", ",", "sacc", ",", "sacc1", ",", "sacc2", ")", ")", "\n", "f_result", "=", "open", "(", "resultfile", ",", "'w'", ")", "\n", "f_result", ".", "write", "(", "'WER {}\\n'", ".", "format", "(", "wer", "/", "100", ")", ")", "\n", "f_result", ".", "write", "(", "'ExpRate {}\\n'", ".", "format", "(", "sacc", "/", "100", ")", ")", "\n", "f_result", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XH-B_ABM.None.encoder_decoder.FcLayer.__init__": [[10, 13], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.XH-B_ABM.None.decoder.Gru_prob.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nin", ",", "nout", ")", ":", "\n", "        ", "super", "(", "FcLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "nin", ",", "nout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XH-B_ABM.None.encoder_decoder.FcLayer.forward": [[14, 17], ["torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "encoder_decoder.FcLayer.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "torch", ".", "tanh", "(", "self", ".", "fc", "(", "x", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.XH-B_ABM.None.encoder_decoder.Embedding.__init__": [[21, 24], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding"], "methods", ["home.repos.pwc.inspect_result.XH-B_ABM.None.decoder.Gru_prob.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ")", ":", "\n", "        ", "super", "(", "Embedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "params", "[", "'K'", "]", ",", "params", "[", "'m'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XH-B_ABM.None.encoder_decoder.Embedding.forward": [[25, 28], ["encoder_decoder.Embedding.embedding"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "params", ",", "y", ")", ":", "\n", "        ", "emb", "=", "self", ".", "embedding", "(", "y", ")", "\n", "return", "emb", "\n", "\n"]], "home.repos.pwc.inspect_result.XH-B_ABM.None.encoder_decoder.Encoder_Decoder.__init__": [[33, 50], ["torch.Module.__init__", "encoder.DenseNet", "encoder_decoder.FcLayer", "encoder_decoder.Embedding", "decoder.Gru_cond_layer_aam", "decoder.Gru_prob", "encoder_decoder.FcLayer", "encoder_decoder.Embedding", "decoder.Gru_cond_layer_aam", "decoder.Gru_prob"], "methods", ["home.repos.pwc.inspect_result.XH-B_ABM.None.decoder.Gru_prob.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ")", ":", "\n", "        ", "super", "(", "Encoder_Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "encoder1", "=", "DenseNet", "(", "growthRate", "=", "params", "[", "'growthRate'", "]", ",", "reduction", "=", "params", "[", "'reduction'", "]", ",", "bottleneck", "=", "params", "[", "'bottleneck'", "]", ",", "use_dropout", "=", "params", "[", "'use_dropout'", "]", ")", "\n", "\n", "if", "params", "[", "'L2R'", "]", "==", "1", ":", "\n", "            ", "self", ".", "init_GRU_model", "=", "FcLayer", "(", "params", "[", "'D'", "]", ",", "params", "[", "'n'", "]", ")", "\n", "self", ".", "emb_model", "=", "Embedding", "(", "params", ")", "\n", "self", ".", "gru_model", "=", "Gru_cond_layer_aam", "(", "params", ")", "\n", "self", ".", "gru_prob_model", "=", "Gru_prob", "(", "params", ")", "\n", "\n", "", "if", "params", "[", "'R2L'", "]", "==", "1", ":", "\n", "            ", "params", "[", "'dim_attention'", "]", "=", "512", "\n", "self", ".", "init_GRU_model2", "=", "FcLayer", "(", "params", "[", "'D'", "]", ",", "params", "[", "'n'", "]", ")", "\n", "self", ".", "emb_model2", "=", "Embedding", "(", "params", ")", "\n", "self", ".", "gru_model2", "=", "Gru_cond_layer_aam", "(", "params", ")", "\n", "self", ".", "gru_prob_model2", "=", "Gru_prob", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XH-B_ABM.None.encoder_decoder.Encoder_Decoder.forward": [[52, 95], ["y.permute.permute.permute", "y_mask.permute.permute.permute", "y_reverse.permute.permute.permute", "y_mask_reverse.permute.permute.permute", "encoder_decoder.Encoder_Decoder.encoder1", "encoder_decoder.Encoder_Decoder.init_GRU_model", "encoder_decoder.Encoder_Decoder.emb_model", "encoder_decoder.Encoder_Decoder.gru_model", "encoder_decoder.Encoder_Decoder.gru_prob_model", "alphas1.permute.permute.permute", "scores1.permute.permute.permute", "encoder_decoder.Encoder_Decoder.init_GRU_model2", "encoder_decoder.Encoder_Decoder.emb_model2", "encoder_decoder.Encoder_Decoder.gru_model2", "encoder_decoder.Encoder_Decoder.gru_prob_model2", "alphas2.permute.permute.permute", "scores2.permute.permute.permute", "ctx_mask.sum().sum", "ctx_mask.sum().sum", "ctx_mask.sum", "ctx_mask.sum"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "params", ",", "x", ",", "x_mask", ",", "y", ",", "y_mask", ",", "y_reverse", ",", "y_mask_reverse", ",", "one_step", "=", "False", ")", ":", "\n", "# recover permute", "\n", "        ", "y", "=", "y", ".", "permute", "(", "1", ",", "0", ")", "\n", "y_mask", "=", "y_mask", ".", "permute", "(", "1", ",", "0", ")", "\n", "y_reverse", "=", "y_reverse", ".", "permute", "(", "1", ",", "0", ")", "\n", "y_mask_reverse", "=", "y_mask_reverse", ".", "permute", "(", "1", ",", "0", ")", "\n", "\n", "out_mask", "=", "x_mask", "[", ":", ",", "0", ":", ":", "2", ",", "0", ":", ":", "2", "]", "\n", "out_mask", "=", "out_mask", "[", ":", ",", "0", ":", ":", "2", ",", "0", ":", ":", "2", "]", "\n", "out_mask", "=", "out_mask", "[", ":", ",", "0", ":", ":", "2", ",", "0", ":", ":", "2", "]", "\n", "x_mask", "=", "out_mask", "[", ":", ",", "0", ":", ":", "2", ",", "0", ":", ":", "2", "]", "\n", "ctx_mask", "=", "x_mask", "\n", "ctx1", "=", "self", ".", "encoder1", "(", "x", ")", "\n", "\n", "if", "params", "[", "'L2R'", "]", "==", "1", ":", "\n", "            ", "ctx_mean1", "=", "(", "ctx1", "*", "ctx_mask", "[", ":", ",", "None", ",", ":", ",", ":", "]", ")", ".", "sum", "(", "3", ")", ".", "sum", "(", "2", ")", "/", "ctx_mask", ".", "sum", "(", "2", ")", ".", "sum", "(", "1", ")", "[", ":", ",", "None", "]", "\n", "init_state1", "=", "self", ".", "init_GRU_model", "(", "ctx_mean1", ")", "\n", "\n", "# two GRU layers", "\n", "emb1", "=", "self", ".", "emb_model", "(", "params", ",", "y", ")", "\n", "h2ts1", ",", "cts1", ",", "alphas1", ",", "_alpha_pasts", "=", "self", ".", "gru_model", "(", "params", ",", "emb1", ",", "y_mask", ",", "ctx1", ",", "ctx_mask", ",", "one_step", ",", "init_state1", ",", "alpha_past", "=", "None", ")", "\n", "scores1", "=", "self", ".", "gru_prob_model", "(", "cts1", ",", "h2ts1", ",", "emb1", ",", "use_dropout", "=", "params", "[", "'use_dropout'", "]", ")", "\n", "# permute for multi-GPU training", "\n", "alphas1", "=", "alphas1", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", "\n", "scores1", "=", "scores1", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "\n", "", "if", "params", "[", "'R2L'", "]", "==", "1", ":", "\n", "            ", "ctx_mean2", "=", "(", "ctx1", "*", "ctx_mask", "[", ":", ",", "None", ",", ":", ",", ":", "]", ")", ".", "sum", "(", "3", ")", ".", "sum", "(", "2", ")", "/", "ctx_mask", ".", "sum", "(", "2", ")", ".", "sum", "(", "1", ")", "[", ":", ",", "None", "]", "\n", "init_state2", "=", "self", ".", "init_GRU_model2", "(", "ctx_mean2", ")", "\n", "# # two GRU layers", "\n", "emb2", "=", "self", ".", "emb_model2", "(", "params", ",", "y_reverse", ")", "\n", "h2ts2", ",", "cts2", ",", "alphas2", ",", "_alpha_pasts", "=", "self", ".", "gru_model2", "(", "params", ",", "emb2", ",", "y_mask_reverse", ",", "ctx1", ",", "ctx_mask", ",", "one_step", ",", "init_state2", ",", "alpha_past", "=", "None", ")", "\n", "scores2", "=", "self", ".", "gru_prob_model2", "(", "cts2", ",", "h2ts2", ",", "emb2", ",", "use_dropout", "=", "params", "[", "'use_dropout'", "]", ")", "\n", "# permute for multi-GPU training", "\n", "alphas2", "=", "alphas2", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", "\n", "scores2", "=", "scores2", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "\n", "", "if", "params", "[", "'L2R'", "]", "==", "1", "and", "params", "[", "'R2L'", "]", "==", "1", ":", "\n", "            ", "return", "scores1", ",", "alphas1", ",", "scores2", ",", "alphas2", "\n", "", "if", "params", "[", "'L2R'", "]", "==", "1", "and", "params", "[", "'R2L'", "]", "==", "0", ":", "\n", "            ", "return", "scores1", ",", "alphas1", ",", "None", ",", "None", "\n", "", "if", "params", "[", "'L2R'", "]", "==", "0", "and", "params", "[", "'R2L'", "]", "==", "1", ":", "\n", "            ", "return", "None", ",", "None", ",", "scores2", ",", "alphas2", "\n", "\n"]], "home.repos.pwc.inspect_result.XH-B_ABM.None.encoder_decoder.Encoder_Decoder.f_init": [[98, 117], ["encoder_decoder.Encoder_Decoder.encoder1", "encoder_decoder.Encoder_Decoder.mean().mean", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "encoder_decoder.Encoder_Decoder.init_GRU_model", "encoder_decoder.Encoder_Decoder.mean", "encoder_decoder.Encoder_Decoder.init_GRU_model2", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "", "def", "f_init", "(", "self", ",", "x", ",", "x_mask", "=", "None", ",", "idx_decoder", "=", "1", ")", ":", "\n", "        ", "if", "x_mask", "is", "None", ":", "\n", "            ", "shape", "=", "x", ".", "shape", "\n", "x_mask", "=", "torch", ".", "ones", "(", "shape", ")", ".", "cuda", "(", ")", "\n", "\n", "", "out_mask", "=", "x_mask", "[", ":", ",", "0", ":", ":", "2", ",", "0", ":", ":", "2", "]", "\n", "out_mask", "=", "out_mask", "[", ":", ",", "0", ":", ":", "2", ",", "0", ":", ":", "2", "]", "\n", "out_mask", "=", "out_mask", "[", ":", ",", "0", ":", ":", "2", ",", "0", ":", ":", "2", "]", "\n", "x_mask", "=", "out_mask", "[", ":", ",", "0", ":", ":", "2", ",", "0", ":", ":", "2", "]", "\n", "ctx_mask", "=", "x_mask", "\n", "\n", "ctx1", "=", "self", ".", "encoder1", "(", "x", ")", "\n", "ctx_mean1", "=", "ctx1", ".", "mean", "(", "dim", "=", "3", ")", ".", "mean", "(", "dim", "=", "2", ")", "\n", "if", "idx_decoder", "==", "1", ":", "\n", "            ", "init_state1", "=", "self", ".", "init_GRU_model", "(", "ctx_mean1", ")", "\n", "", "elif", "idx_decoder", "==", "2", ":", "\n", "            ", "init_state1", "=", "self", ".", "init_GRU_model2", "(", "ctx_mean1", ")", "\n", "\n", "", "return", "init_state1", ",", "ctx1", "\n", "\n"]], "home.repos.pwc.inspect_result.XH-B_ABM.None.encoder_decoder.Encoder_Decoder.f_next": [[120, 153], ["encoder_decoder.Encoder_Decoder.emb_model", "encoder_decoder.Encoder_Decoder.gru_model", "next_state.view", "cts.view.view.view", "emb_beam.view.view.view", "encoder_decoder.Encoder_Decoder.gru_prob_model", "scores.view.view.view", "torch.softmax", "torch.softmax", "torch.softmax", "encoder_decoder.Encoder_Decoder.emb_model2", "encoder_decoder.Encoder_Decoder.gru_model2", "next_state.view", "cts.view.view.view", "emb_beam.view.view.view", "encoder_decoder.Encoder_Decoder.gru_prob_model2", "scores.view.view.view", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], ["", "def", "f_next", "(", "self", ",", "params", ",", "y", ",", "y_mask", ",", "ctx", ",", "ctx_mask", ",", "init_state", ",", "alpha_past", ",", "one_step", ",", "idx_decoder", "=", "1", ")", ":", "\n", "\n", "        ", "if", "idx_decoder", "==", "1", ":", "\n", "\n", "            ", "emb_beam", "=", "self", ".", "emb_model", "(", "params", ",", "y", ")", "\n", "\n", "# one step of two gru layers", "\n", "next_state", ",", "cts", ",", "_alpha", ",", "next_alpha_past", "=", "self", ".", "gru_model", "(", "params", ",", "emb_beam", ",", "y_mask", ",", "ctx", ",", "ctx_mask", ",", "one_step", ",", "init_state", ",", "alpha_past", ")", "\n", "# reshape to suit GRU step code", "\n", "next_state_", "=", "next_state", ".", "view", "(", "1", ",", "next_state", ".", "shape", "[", "0", "]", ",", "next_state", ".", "shape", "[", "1", "]", ")", "\n", "cts", "=", "cts", ".", "view", "(", "1", ",", "cts", ".", "shape", "[", "0", "]", ",", "cts", ".", "shape", "[", "1", "]", ")", "\n", "emb_beam", "=", "emb_beam", ".", "view", "(", "1", ",", "emb_beam", ".", "shape", "[", "0", "]", ",", "emb_beam", ".", "shape", "[", "1", "]", ")", "\n", "# calculate probabilities", "\n", "scores", "=", "self", ".", "gru_prob_model", "(", "cts", ",", "next_state_", ",", "emb_beam", ",", "use_dropout", "=", "params", "[", "'use_dropout'", "]", ")", "\n", "scores", "=", "scores", ".", "view", "(", "-", "1", ",", "scores", ".", "shape", "[", "2", "]", ")", "\n", "next_probs", "=", "F", ".", "softmax", "(", "scores", ",", "dim", "=", "1", ")", "\n", "\n", "", "elif", "idx_decoder", "==", "2", ":", "\n", "            ", "emb_beam", "=", "self", ".", "emb_model2", "(", "params", ",", "y", ")", "\n", "\n", "# one step of two gru layers", "\n", "next_state", ",", "cts", ",", "_alpha", ",", "next_alpha_past", "=", "self", ".", "gru_model2", "(", "params", ",", "emb_beam", ",", "y_mask", ",", "ctx", ",", "ctx_mask", ",", "one_step", ",", "init_state", ",", "alpha_past", ")", "\n", "# reshape to suit GRU step code", "\n", "next_state_", "=", "next_state", ".", "view", "(", "1", ",", "next_state", ".", "shape", "[", "0", "]", ",", "next_state", ".", "shape", "[", "1", "]", ")", "\n", "cts", "=", "cts", ".", "view", "(", "1", ",", "cts", ".", "shape", "[", "0", "]", ",", "cts", ".", "shape", "[", "1", "]", ")", "\n", "emb_beam", "=", "emb_beam", ".", "view", "(", "1", ",", "emb_beam", ".", "shape", "[", "0", "]", ",", "emb_beam", ".", "shape", "[", "1", "]", ")", "\n", "\n", "# calculate probabilities", "\n", "scores", "=", "self", ".", "gru_prob_model2", "(", "cts", ",", "next_state_", ",", "emb_beam", ",", "use_dropout", "=", "params", "[", "'use_dropout'", "]", ")", "\n", "scores", "=", "scores", ".", "view", "(", "-", "1", ",", "scores", ".", "shape", "[", "2", "]", ")", "\n", "next_probs", "=", "F", ".", "softmax", "(", "scores", ",", "dim", "=", "1", ")", "\n", "\n", "", "return", "next_probs", ",", "next_state", ",", "next_alpha_past", ",", "_alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.XH-B_ABM.None.decoder.Gru_cond_layer_aam.__init__": [[7, 41], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.XH-B_ABM.None.decoder.Gru_prob.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ")", ":", "\n", "        ", "super", "(", "Gru_cond_layer_aam", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# attention", "\n", "self", ".", "conv_Ua", "=", "nn", ".", "Conv2d", "(", "params", "[", "'D'", "]", ",", "params", "[", "'dim_attention'", "]", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "fc_Wa", "=", "nn", ".", "Linear", "(", "params", "[", "'n'", "]", ",", "params", "[", "'dim_attention'", "]", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv_Q", "=", "nn", ".", "Conv2d", "(", "1", ",", "512", ",", "kernel_size", "=", "11", ",", "bias", "=", "False", ",", "padding", "=", "5", ")", "\n", "\n", "#5x5", "\n", "self", ".", "conv_Q2", "=", "nn", ".", "Conv2d", "(", "1", ",", "512", ",", "kernel_size", "=", "5", ",", "bias", "=", "False", ",", "padding", "=", "2", ")", "\n", "\n", "\n", "self", ".", "fc_Uf", "=", "nn", ".", "Linear", "(", "512", ",", "params", "[", "'dim_attention'", "]", ")", "\n", "\n", "self", ".", "fc_Uf2", "=", "nn", ".", "Linear", "(", "512", ",", "params", "[", "'dim_attention'", "]", ")", "\n", "\n", "self", ".", "fc_va", "=", "nn", ".", "Linear", "(", "params", "[", "'dim_attention'", "]", ",", "1", ")", "\n", "\n", "# the first GRU layer", "\n", "self", ".", "fc_Wyz", "=", "nn", ".", "Linear", "(", "params", "[", "'m'", "]", ",", "params", "[", "'n'", "]", ")", "\n", "self", ".", "fc_Wyr", "=", "nn", ".", "Linear", "(", "params", "[", "'m'", "]", ",", "params", "[", "'n'", "]", ")", "\n", "self", ".", "fc_Wyh", "=", "nn", ".", "Linear", "(", "params", "[", "'m'", "]", ",", "params", "[", "'n'", "]", ")", "\n", "\n", "self", ".", "fc_Uhz", "=", "nn", ".", "Linear", "(", "params", "[", "'n'", "]", ",", "params", "[", "'n'", "]", ",", "bias", "=", "False", ")", "\n", "self", ".", "fc_Uhr", "=", "nn", ".", "Linear", "(", "params", "[", "'n'", "]", ",", "params", "[", "'n'", "]", ",", "bias", "=", "False", ")", "\n", "self", ".", "fc_Uhh", "=", "nn", ".", "Linear", "(", "params", "[", "'n'", "]", ",", "params", "[", "'n'", "]", ",", "bias", "=", "False", ")", "\n", "\n", "# the second GRU layer", "\n", "self", ".", "fc_Wcz", "=", "nn", ".", "Linear", "(", "params", "[", "'D'", "]", ",", "params", "[", "'n'", "]", ",", "bias", "=", "False", ")", "\n", "self", ".", "fc_Wcr", "=", "nn", ".", "Linear", "(", "params", "[", "'D'", "]", ",", "params", "[", "'n'", "]", ",", "bias", "=", "False", ")", "\n", "self", ".", "fc_Wch", "=", "nn", ".", "Linear", "(", "params", "[", "'D'", "]", ",", "params", "[", "'n'", "]", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "fc_Uhz2", "=", "nn", ".", "Linear", "(", "params", "[", "'n'", "]", ",", "params", "[", "'n'", "]", ")", "\n", "self", ".", "fc_Uhr2", "=", "nn", ".", "Linear", "(", "params", "[", "'n'", "]", ",", "params", "[", "'n'", "]", ")", "\n", "self", ".", "fc_Uhh2", "=", "nn", ".", "Linear", "(", "params", "[", "'n'", "]", ",", "params", "[", "'n'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XH-B_ABM.None.decoder.Gru_cond_layer_aam.forward": [[43, 75], ["decoder.Gru_cond_layer_aam.conv_Ua", "Ua_ctx.permute.permute.permute", "decoder.Gru_cond_layer_aam.fc_Wyz", "decoder.Gru_cond_layer_aam.fc_Wyr", "decoder.Gru_cond_layer_aam.fc_Wyh", "decoder.Gru_cond_layer_aam._step_slice", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "decoder.Gru_cond_layer_aam._step_slice", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.XH-B_ABM.None.decoder.Gru_cond_layer_aam._step_slice", "home.repos.pwc.inspect_result.XH-B_ABM.None.decoder.Gru_cond_layer_aam._step_slice"], ["", "def", "forward", "(", "self", ",", "params", ",", "embedding", ",", "mask", "=", "None", ",", "context", "=", "None", ",", "context_mask", "=", "None", ",", "one_step", "=", "False", ",", "init_state", "=", "None", ",", "\n", "alpha_past", "=", "None", ")", ":", "\n", "        ", "n_steps", "=", "embedding", ".", "shape", "[", "0", "]", "\n", "n_samples", "=", "embedding", ".", "shape", "[", "1", "]", "\n", "\n", "Ua_ctx", "=", "self", ".", "conv_Ua", "(", "context", ")", "\n", "Ua_ctx", "=", "Ua_ctx", ".", "permute", "(", "2", ",", "3", ",", "0", ",", "1", ")", "\n", "state_below_z", "=", "self", ".", "fc_Wyz", "(", "embedding", ")", "\n", "state_below_r", "=", "self", ".", "fc_Wyr", "(", "embedding", ")", "\n", "state_below_h", "=", "self", ".", "fc_Wyh", "(", "embedding", ")", "\n", "\n", "if", "one_step", ":", "\n", "            ", "if", "mask", "is", "None", ":", "\n", "                ", "mask", "=", "torch", ".", "ones", "(", "embedding", ".", "shape", "[", "0", "]", ")", ".", "cuda", "(", ")", "\n", "", "h2ts", ",", "cts", ",", "alphas", ",", "alpha_pasts", "=", "self", ".", "_step_slice", "(", "mask", ",", "state_below_r", ",", "state_below_z", ",", "state_below_h", ",", "\n", "init_state", ",", "context", ",", "context_mask", ",", "alpha_past", ",", "Ua_ctx", ")", "\n", "", "else", ":", "\n", "            ", "alpha_past", "=", "torch", ".", "zeros", "(", "n_samples", ",", "context", ".", "shape", "[", "2", "]", ",", "context", ".", "shape", "[", "3", "]", ")", ".", "cuda", "(", ")", "\n", "h2t", "=", "init_state", "\n", "h2ts", "=", "torch", ".", "zeros", "(", "n_steps", ",", "n_samples", ",", "params", "[", "'n'", "]", ")", ".", "cuda", "(", ")", "\n", "cts", "=", "torch", ".", "zeros", "(", "n_steps", ",", "n_samples", ",", "params", "[", "'D'", "]", ")", ".", "cuda", "(", ")", "\n", "alphas", "=", "(", "torch", ".", "zeros", "(", "n_steps", ",", "n_samples", ",", "context", ".", "shape", "[", "2", "]", ",", "context", ".", "shape", "[", "3", "]", ")", ")", ".", "cuda", "(", ")", "\n", "alpha_pasts", "=", "torch", ".", "zeros", "(", "n_steps", ",", "n_samples", ",", "context", ".", "shape", "[", "2", "]", ",", "context", ".", "shape", "[", "3", "]", ")", ".", "cuda", "(", ")", "\n", "for", "i", "in", "range", "(", "n_steps", ")", ":", "\n", "                ", "h2t", ",", "ct", ",", "alpha", ",", "alpha_past", "=", "self", ".", "_step_slice", "(", "mask", "[", "i", "]", ",", "state_below_r", "[", "i", "]", ",", "state_below_z", "[", "i", "]", ",", "\n", "state_below_h", "[", "i", "]", ",", "h2t", ",", "context", ",", "context_mask", ",", "alpha_past", ",", "\n", "Ua_ctx", ")", "\n", "h2ts", "[", "i", "]", "=", "h2t", "\n", "cts", "[", "i", "]", "=", "ct", "\n", "alphas", "[", "i", "]", "=", "alpha", "\n", "alpha_pasts", "[", "i", "]", "=", "alpha_past", "\n", "", "", "return", "h2ts", ",", "cts", ",", "alphas", ",", "alpha_pasts", "\n", "\n"]], "home.repos.pwc.inspect_result.XH-B_ABM.None.decoder.Gru_cond_layer_aam._step_slice": [[77, 115], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "decoder.Gru_cond_layer_aam.fc_Wa", "decoder.Gru_cond_layer_aam.conv_Q().permute", "decoder.Gru_cond_layer_aam.fc_Uf", "decoder.Gru_cond_layer_aam.conv_Q2().permute", "decoder.Gru_cond_layer_aam.fc_Uf2", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "decoder.Gru_cond_layer_aam.fc_va", "torch.exp.view", "torch.exp.view", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.exp.permute", "torch.exp.permute", "torch.exp.permute", "torch.exp.permute", "decoder.Gru_cond_layer_aam.fc_Uhz", "decoder.Gru_cond_layer_aam.fc_Uhr", "decoder.Gru_cond_layer_aam.conv_Q", "decoder.Gru_cond_layer_aam.conv_Q2", "ctx_mask.permute", "torch.exp.sum().sum", "torch.exp.sum().sum", "decoder.Gru_cond_layer_aam.fc_Wcz", "decoder.Gru_cond_layer_aam.fc_Uhz2", "decoder.Gru_cond_layer_aam.fc_Wcr", "decoder.Gru_cond_layer_aam.fc_Uhr2", "decoder.Gru_cond_layer_aam.fc_Wch", "decoder.Gru_cond_layer_aam.fc_Uhh", "decoder.Gru_cond_layer_aam.fc_Uhh2", "torch.exp.sum", "torch.exp.sum", "torch.exp.permute", "torch.exp.permute"], "methods", ["None"], ["", "def", "_step_slice", "(", "self", ",", "mask", ",", "state_below_r", ",", "state_below_z", ",", "state_below_h", ",", "h", ",", "ctx", ",", "ctx_mask", ",", "alpha_past", ",", "Ua_ctx", ")", ":", "\n", "# the first GRU layer", "\n", "        ", "z1", "=", "torch", ".", "sigmoid", "(", "self", ".", "fc_Uhz", "(", "h", ")", "+", "state_below_z", ")", "\n", "r1", "=", "torch", ".", "sigmoid", "(", "self", ".", "fc_Uhr", "(", "h", ")", "+", "state_below_r", ")", "\n", "h1_p", "=", "torch", ".", "tanh", "(", "self", ".", "fc_Uhh", "(", "h", ")", "*", "r1", "+", "state_below_h", ")", "\n", "h1", "=", "z1", "*", "h", "+", "(", "1.", "-", "z1", ")", "*", "h1_p", "\n", "h1", "=", "mask", "[", ":", ",", "None", "]", "*", "h1", "+", "(", "1.", "-", "mask", ")", "[", ":", ",", "None", "]", "*", "h", "\n", "\n", "# attention", "\n", "Wa_h1", "=", "self", ".", "fc_Wa", "(", "h1", ")", "\n", "alpha_past_", "=", "alpha_past", "[", ":", ",", "None", ",", ":", ",", ":", "]", "\n", "cover_F", "=", "self", ".", "conv_Q", "(", "alpha_past_", ")", ".", "permute", "(", "2", ",", "3", ",", "0", ",", "1", ")", "\n", "cover_vector", "=", "self", ".", "fc_Uf", "(", "cover_F", ")", "\n", "\n", "cover_F2", "=", "self", ".", "conv_Q2", "(", "alpha_past_", ")", ".", "permute", "(", "2", ",", "3", ",", "0", ",", "1", ")", "\n", "cover_vector2", "=", "self", ".", "fc_Uf2", "(", "cover_F2", ")", "\n", "\n", "attention_score", "=", "torch", ".", "tanh", "(", "Ua_ctx", "+", "Wa_h1", "[", "None", ",", "None", ",", ":", ",", ":", "]", "+", "cover_vector", "+", "cover_vector2", ")", "\n", "\n", "\n", "alpha", "=", "self", ".", "fc_va", "(", "attention_score", ")", "\n", "alpha", "=", "alpha", ".", "view", "(", "alpha", ".", "shape", "[", "0", "]", ",", "alpha", ".", "shape", "[", "1", "]", ",", "alpha", ".", "shape", "[", "2", "]", ")", "\n", "alpha", "=", "torch", ".", "exp", "(", "alpha", ")", "\n", "if", "(", "ctx_mask", "is", "not", "None", ")", ":", "\n", "            ", "alpha", "=", "alpha", "*", "ctx_mask", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "", "alpha", "=", "alpha", "/", "alpha", ".", "sum", "(", "1", ")", ".", "sum", "(", "0", ")", "[", "None", ",", "None", ",", ":", "]", "\n", "alpha_past", "=", "alpha_past", "+", "alpha", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "ct", "=", "(", "ctx", "*", "alpha", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "[", ":", ",", "None", ",", ":", ",", ":", "]", ")", ".", "sum", "(", "3", ")", ".", "sum", "(", "2", ")", "\n", "\n", "# the second GRU layer", "\n", "z2", "=", "torch", ".", "sigmoid", "(", "self", ".", "fc_Wcz", "(", "ct", ")", "+", "self", ".", "fc_Uhz2", "(", "h1", ")", ")", "\n", "r2", "=", "torch", ".", "sigmoid", "(", "self", ".", "fc_Wcr", "(", "ct", ")", "+", "self", ".", "fc_Uhr2", "(", "h1", ")", ")", "\n", "h2_p", "=", "torch", ".", "tanh", "(", "self", ".", "fc_Wch", "(", "ct", ")", "+", "self", ".", "fc_Uhh2", "(", "h1", ")", "*", "r2", ")", "\n", "h2", "=", "z2", "*", "h1", "+", "(", "1.", "-", "z2", ")", "*", "h2_p", "\n", "h2", "=", "mask", "[", ":", ",", "None", "]", "*", "h2", "+", "(", "1.", "-", "mask", ")", "[", ":", ",", "None", "]", "*", "h1", "\n", "\n", "\n", "return", "h2", ",", "ct", ",", "alpha", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ",", "alpha_past", "\n", "\n"]], "home.repos.pwc.inspect_result.XH-B_ABM.None.decoder.Gru_prob.__init__": [[120, 129], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "int"], "methods", ["home.repos.pwc.inspect_result.XH-B_ABM.None.decoder.Gru_prob.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ")", ":", "\n", "        ", "super", "(", "Gru_prob", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc_Wct", "=", "nn", ".", "Linear", "(", "params", "[", "'D'", "]", ",", "params", "[", "'m'", "]", ")", "\n", "self", ".", "fc_Wht", "=", "nn", ".", "Linear", "(", "params", "[", "'n'", "]", ",", "params", "[", "'m'", "]", ")", "\n", "self", ".", "fc_Wyt", "=", "nn", ".", "Linear", "(", "params", "[", "'m'", "]", ",", "params", "[", "'m'", "]", ")", "\n", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "0.2", ")", "\n", "self", ".", "fc_W0", "=", "nn", ".", "Linear", "(", "int", "(", "params", "[", "'m'", "]", "/", "2", ")", ",", "params", "[", "'K'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XH-B_ABM.None.decoder.Gru_prob.forward": [[130, 145], ["int", "decoder.Gru_prob.view", "decoder.Gru_prob.fc_W0", "decoder.Gru_prob.fc_Wyt", "decoder.Gru_prob.max", "decoder.Gru_prob.dropout", "decoder.Gru_prob.fc_Wct", "decoder.Gru_prob.fc_Wht"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "cts", ",", "hts", ",", "emb", ",", "use_dropout", ")", ":", "\n", "        ", "logit", "=", "self", ".", "fc_Wct", "(", "cts", ")", "+", "self", ".", "fc_Wht", "(", "hts", ")", "+", "self", ".", "fc_Wyt", "(", "emb", ")", "\n", "\n", "# maxout", "\n", "shape", "=", "logit", ".", "shape", "\n", "shape2", "=", "int", "(", "shape", "[", "2", "]", "/", "2", ")", "\n", "shape3", "=", "2", "\n", "logit", "=", "logit", ".", "view", "(", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ",", "shape2", ",", "shape3", ")", "\n", "logit", "=", "logit", ".", "max", "(", "3", ")", "[", "0", "]", "\n", "\n", "if", "use_dropout", ":", "\n", "            ", "logit", "=", "self", ".", "dropout", "(", "logit", ")", "\n", "\n", "", "out", "=", "self", ".", "fc_W0", "(", "logit", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.XH-B_ABM.None.test.main": [[10, 80], ["encoder_decoder.Encoder_Decoder", "utils.load_checkpoint_part_weight", "encoder_decoder.Encoder_Decoder.cuda", "encoder_decoder.Encoder_Decoder.eval", "utils.load_dict", "utils.load_dict.items", "utils.dataIterator", "open.close", "print", "os.system", "len", "torch.no_grad", "open", "str", "torch.from_numpy().cuda", "utils.gen_sample_bidirection", "open.write", "open.write", "print", "xx.astype", "numpy.array", "len", "open.write", "torch.from_numpy", "int", "score.argmin", "len"], "function", ["home.repos.pwc.inspect_result.XH-B_ABM.None.utils.load_checkpoint_part_weight", "home.repos.pwc.inspect_result.XH-B_ABM.None.utils.load_dict", "home.repos.pwc.inspect_result.XH-B_ABM.None.utils.dataIterator", "home.repos.pwc.inspect_result.XH-B_ABM.None.utils.gen_sample_bidirection"], ["def", "main", "(", "beam_k", ",", "model_path", ",", "dictionary_target", ",", "fea", ",", "latex", ",", "saveto", ",", "output", ",", "idx_decoder", ")", ":", "\n", "\n", "# model architecture", "\n", "    ", "params", "=", "{", "}", "\n", "params", "[", "'n'", "]", "=", "256", "\n", "params", "[", "'m'", "]", "=", "256", "\n", "params", "[", "'dim_attention'", "]", "=", "512", "\n", "params", "[", "'D'", "]", "=", "684", "\n", "params", "[", "'K'", "]", "=", "113", "\n", "params", "[", "'growthRate'", "]", "=", "24", "\n", "params", "[", "'reduction'", "]", "=", "0.5", "\n", "params", "[", "'bottleneck'", "]", "=", "True", "\n", "params", "[", "'use_dropout'", "]", "=", "True", "\n", "params", "[", "'input_channels'", "]", "=", "1", "\n", "\n", "params", "[", "'L2R'", "]", "=", "0", "\n", "params", "[", "'R2L'", "]", "=", "0", "\n", "\n", "if", "idx_decoder", "==", "1", ":", "\n", "        ", "params", "[", "'L2R'", "]", "=", "1", "\n", "end", "=", "1", "\n", "", "if", "idx_decoder", "==", "2", ":", "\n", "        ", "params", "[", "'R2L'", "]", "=", "1", "\n", "end", "=", "0", "\n", "\n", "# load model", "\n", "", "model", "=", "Encoder_Decoder", "(", "params", ")", "\n", "load_checkpoint_part_weight", "(", "model", ",", "model_path", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "# load dictionary", "\n", "worddicts", "=", "load_dict", "(", "dictionary_target", ")", "\n", "worddicts_r", "=", "[", "None", "]", "*", "len", "(", "worddicts", ")", "\n", "for", "kk", ",", "vv", "in", "worddicts", ".", "items", "(", ")", ":", "\n", "        ", "worddicts_r", "[", "vv", "]", "=", "kk", "\n", "\n", "# load data", "\n", "", "test", ",", "test_uid_list", "=", "dataIterator", "(", "fea", ",", "latex", ",", "worddicts", ",", "batch_size", "=", "8", ",", "batch_Imagesize", "=", "500000", ",", "maxlen", "=", "20000", ",", "maxImagesize", "=", "500000", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "fpp_sample", "=", "open", "(", "saveto", ",", "'w'", ")", "\n", "test_count_idx", "=", "0", "\n", "\n", "for", "x", ",", "y", "in", "test", ":", "\n", "            ", "for", "xx", "in", "x", ":", "\n", "                ", "xx_pad", "=", "xx", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.", "\n", "xx_pad", "=", "torch", ".", "from_numpy", "(", "xx_pad", "[", "None", ",", ":", ",", ":", ",", ":", "]", ")", ".", "cuda", "(", ")", "# (1,1,H,W)", "\n", "#direction", "\n", "sample", ",", "score", ",", "attn_weights", ",", "next_alpha_sum", "=", "gen_sample_bidirection", "(", "model", ",", "xx_pad", ",", "params", ",", "False", ",", "k", "=", "beam_k", ",", "maxlen", "=", "1000", ",", "idx_decoder", "=", "int", "(", "idx_decoder", ")", ")", "\n", "score", "=", "score", "/", "np", ".", "array", "(", "[", "len", "(", "s", ")", "for", "s", "in", "sample", "]", ")", "\n", "if", "len", "(", "score", ")", "==", "0", ":", "continue", "\n", "ss", "=", "sample", "[", "score", ".", "argmin", "(", ")", "]", "\n", "# write decoding results", "\n", "fpp_sample", ".", "write", "(", "test_uid_list", "[", "test_count_idx", "]", ")", "\n", "\n", "prd_strs", "=", "''", "\n", "for", "vv", "in", "ss", ":", "\n", "                    ", "if", "vv", "==", "end", ":", "# <eos>   # 'L2R' 1", "\n", "                        ", "break", "\n", "", "prd_strs", "+=", "worddicts_r", "[", "vv", "]", "+", "' '", "\n", "fpp_sample", ".", "write", "(", "' '", "+", "worddicts_r", "[", "vv", "]", ")", "\n", "", "fpp_sample", ".", "write", "(", "'\\n'", ")", "\n", "\n", "print", "(", "test_count_idx", ",", "prd_strs", ")", "\n", "test_count_idx", "+=", "1", "\n", "\n", "", "", "", "fpp_sample", ".", "close", "(", ")", "\n", "print", "(", "'test set decode done'", ")", "\n", "os", ".", "system", "(", "'python compute-wer.py '", "+", "saveto", "+", "' '", "+", "latex", "+", "' '", "+", "output", "+", "' '", "+", "str", "(", "idx_decoder", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XH-B_ABM.None.utils.dataIterator": [[20, 90], ["open", "pickle.load", "open.close", "open", "open.readlines", "open.close", "pkl.load.items", "sorted", "feature_total.append", "label_total.append", "print", "l.strip().split", "sorted.items", "len", "list", "dictionary.__contains__", "len", "print", "zip", "l.strip", "w_list.append", "print", "sys.exit", "print", "uidList.append", "feature_total.append", "label_total.append", "feature_batch.append", "label_batch.append", "feature_batch.append", "label_batch.append"], "function", ["None"], ["def", "dataIterator", "(", "feature_file", ",", "label_file", ",", "dictionary", ",", "batch_size", ",", "batch_Imagesize", ",", "maxlen", ",", "maxImagesize", ")", ":", "\n", "# offline-train.pkl", "\n", "    ", "fp", "=", "open", "(", "feature_file", ",", "'rb'", ")", "\n", "features", "=", "pkl", ".", "load", "(", "fp", ")", "\n", "fp", ".", "close", "(", ")", "\n", "\n", "# train_caption.txt", "\n", "fp2", "=", "open", "(", "label_file", ",", "'r'", ")", "\n", "labels", "=", "fp2", ".", "readlines", "(", ")", "\n", "fp2", ".", "close", "(", ")", "\n", "\n", "targets", "=", "{", "}", "\n", "for", "l", "in", "labels", ":", "\n", "        ", "tmp", "=", "l", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "uid", "=", "tmp", "[", "0", "]", "\n", "w_list", "=", "[", "]", "\n", "for", "w", "in", "tmp", "[", "1", ":", "]", ":", "\n", "            ", "if", "dictionary", ".", "__contains__", "(", "w", ")", ":", "\n", "                ", "w_list", ".", "append", "(", "dictionary", "[", "w", "]", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'a word not in the dictionary !! sentence '", ",", "uid", ",", "'word '", ",", "w", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "", "", "targets", "[", "uid", "]", "=", "w_list", "\n", "\n", "", "imageSize", "=", "{", "}", "\n", "for", "uid", ",", "fea", "in", "features", ".", "items", "(", ")", ":", "\n", "        ", "imageSize", "[", "uid", "]", "=", "fea", ".", "shape", "[", "1", "]", "*", "fea", ".", "shape", "[", "2", "]", "\n", "# sorted by sentence length, return a list with each triple element", "\n", "", "imageSize", "=", "sorted", "(", "imageSize", ".", "items", "(", ")", ",", "key", "=", "lambda", "d", ":", "d", "[", "1", "]", ")", "\n", "\n", "feature_batch", "=", "[", "]", "\n", "label_batch", "=", "[", "]", "\n", "feature_total", "=", "[", "]", "\n", "label_total", "=", "[", "]", "\n", "uidList", "=", "[", "]", "\n", "biggest_image_size", "=", "0", "\n", "\n", "i", "=", "0", "\n", "for", "uid", ",", "size", "in", "imageSize", ":", "\n", "        ", "if", "size", ">", "biggest_image_size", ":", "\n", "            ", "biggest_image_size", "=", "size", "\n", "", "fea", "=", "features", "[", "uid", "]", "\n", "lab", "=", "targets", "[", "uid", "]", "\n", "batch_image_size", "=", "biggest_image_size", "*", "(", "i", "+", "1", ")", "\n", "if", "len", "(", "lab", ")", ">", "maxlen", ":", "\n", "            ", "print", "(", "'sentence'", ",", "uid", ",", "'length bigger than'", ",", "maxlen", ",", "'ignore'", ")", "\n", "", "elif", "size", ">", "maxImagesize", ":", "\n", "            ", "print", "(", "'image'", ",", "uid", ",", "'size bigger than'", ",", "maxImagesize", ",", "'ignore'", ")", "\n", "", "else", ":", "\n", "            ", "uidList", ".", "append", "(", "uid", ")", "\n", "if", "batch_image_size", ">", "batch_Imagesize", "or", "i", "==", "batch_size", ":", "# a batch is full", "\n", "                ", "feature_total", ".", "append", "(", "feature_batch", ")", "\n", "label_total", ".", "append", "(", "label_batch", ")", "\n", "i", "=", "0", "\n", "biggest_image_size", "=", "size", "\n", "feature_batch", "=", "[", "]", "\n", "label_batch", "=", "[", "]", "\n", "feature_batch", ".", "append", "(", "fea", ")", "\n", "label_batch", ".", "append", "(", "lab", ")", "\n", "i", "+=", "1", "\n", "", "else", ":", "\n", "                ", "feature_batch", ".", "append", "(", "fea", ")", "\n", "label_batch", ".", "append", "(", "lab", ")", "\n", "i", "+=", "1", "\n", "\n", "# last batch", "\n", "", "", "", "feature_total", ".", "append", "(", "feature_batch", ")", "\n", "label_total", ".", "append", "(", "label_batch", ")", "\n", "print", "(", "'total '", ",", "len", "(", "feature_total", ")", ",", "'batch data loaded'", ")", "\n", "return", "list", "(", "zip", "(", "feature_total", ",", "label_total", ")", ")", ",", "uidList", "\n", "\n"]], "home.repos.pwc.inspect_result.XH-B_ABM.None.utils.load_dict": [[97, 107], ["open", "open.readlines", "open.close", "print", "l.strip().split", "int", "len", "l.strip"], "function", ["None"], ["", "def", "load_dict", "(", "dictFile", ")", ":", "\n", "    ", "fp", "=", "open", "(", "dictFile", ")", "\n", "stuff", "=", "fp", ".", "readlines", "(", ")", "\n", "fp", ".", "close", "(", ")", "\n", "lexicon", "=", "{", "}", "\n", "for", "l", "in", "stuff", ":", "\n", "        ", "w", "=", "l", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "lexicon", "[", "w", "[", "0", "]", "]", "=", "int", "(", "w", "[", "1", "]", ")", "\n", "", "print", "(", "'total Latex class: '", ",", "len", "(", "lexicon", ")", ")", "\n", "return", "lexicon", "\n", "\n"]], "home.repos.pwc.inspect_result.XH-B_ABM.None.utils.prepare_data_bidecoder": [[111, 157], ["len", "numpy.max", "numpy.max", "numpy.zeros().astype", "numpy.zeros().astype", "numpy.ones().astype", "numpy.zeros().astype", "numpy.zeros().astype", "enumerate", "numpy.ones().astype", "numpy.zeros().astype", "numpy.zeros().astype", "enumerate", "len", "numpy.max", "zip", "zip", "numpy.zeros", "numpy.zeros", "numpy.ones", "numpy.zeros", "numpy.zeros", "numpy.ones", "numpy.zeros", "numpy.zeros"], "function", ["None"], ["", "def", "prepare_data_bidecoder", "(", "options", ",", "images_x", ",", "seqs_y", ")", ":", "\n", "    ", "\"\"\"\n    \"\"\"", "\n", "\n", "\n", "heights_x", "=", "[", "s", ".", "shape", "[", "1", "]", "for", "s", "in", "images_x", "]", "\n", "widths_x", "=", "[", "s", ".", "shape", "[", "2", "]", "for", "s", "in", "images_x", "]", "\n", "lengths_y", "=", "[", "len", "(", "s", ")", "for", "s", "in", "seqs_y", "]", "\n", "n_samples", "=", "len", "(", "heights_x", ")", "\n", "max_height_x", "=", "np", ".", "max", "(", "heights_x", ")", "\n", "max_width_x", "=", "np", ".", "max", "(", "widths_x", ")", "\n", "maxlen_y", "=", "np", ".", "max", "(", "lengths_y", ")", "+", "1", "\n", "\n", "\n", "#L2R  y_in: <sos> y1, y2, ..., yn", "\n", "#L2R  y_out: y1, y2, ..., yn, <eos>", "\n", "x", "=", "np", ".", "zeros", "(", "(", "n_samples", ",", "options", "[", "'input_channels'", "]", ",", "max_height_x", ",", "max_width_x", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "y_in", "=", "np", ".", "zeros", "(", "(", "maxlen_y", ",", "n_samples", ")", ")", ".", "astype", "(", "np", ".", "int64", ")", "# <sos> must be 0 in the dict", "\n", "y_out", "=", "np", ".", "ones", "(", "(", "maxlen_y", ",", "n_samples", ")", ")", ".", "astype", "(", "np", ".", "int64", ")", "# <eos> must be 1 in the dict", "\n", "\n", "x_mask", "=", "np", ".", "zeros", "(", "(", "n_samples", ",", "max_height_x", ",", "max_width_x", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "y_mask", "=", "np", ".", "zeros", "(", "(", "maxlen_y", ",", "n_samples", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "\n", "for", "idx", ",", "[", "s_x", ",", "s_y", "]", "in", "enumerate", "(", "zip", "(", "images_x", ",", "seqs_y", ")", ")", ":", "\n", "        ", "x", "[", "idx", ",", ":", ",", ":", "heights_x", "[", "idx", "]", ",", ":", "widths_x", "[", "idx", "]", "]", "=", "s_x", "/", "255.", "\n", "x_mask", "[", "idx", ",", ":", "heights_x", "[", "idx", "]", ",", ":", "widths_x", "[", "idx", "]", "]", "=", "1.", "\n", "y_in", "[", "1", ":", "(", "lengths_y", "[", "idx", "]", "+", "1", ")", ",", "idx", "]", "=", "s_y", "\n", "y_out", "[", ":", "lengths_y", "[", "idx", "]", ",", "idx", "]", "=", "s_y", "\n", "y_mask", "[", ":", "lengths_y", "[", "idx", "]", "+", "1", ",", "idx", "]", "=", "1.", "\n", "\n", "\n", "#R2L: y_in:  <eos> yn, yn-1, ..., y3, y2, y1", "\n", "#R2L: y_out: yn, yn-1, ..., y2, y1, <sos>", "\n", "\n", "", "y_reverse_in", "=", "np", ".", "ones", "(", "(", "maxlen_y", ",", "n_samples", ")", ")", ".", "astype", "(", "np", ".", "int64", ")", "# <eos> must be 0 in the dict", "\n", "y_reverse_out", "=", "np", ".", "zeros", "(", "(", "maxlen_y", ",", "n_samples", ")", ")", ".", "astype", "(", "np", ".", "int64", ")", "# <eos> must be 0 in the dict", "\n", "y_reverse_mask", "=", "np", ".", "zeros", "(", "(", "maxlen_y", ",", "n_samples", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "for", "idx", ",", "[", "s_x", ",", "s_y", "]", "in", "enumerate", "(", "zip", "(", "images_x", ",", "seqs_y", ")", ")", ":", "\n", "        ", "y_reverse_in", "[", "1", ":", "(", "lengths_y", "[", "idx", "]", "+", "1", ")", ",", "idx", "]", "=", "s_y", "[", ":", ":", "-", "1", "]", "\n", "y_reverse_out", "[", ":", "lengths_y", "[", "idx", "]", ",", "idx", "]", "=", "s_y", "[", ":", ":", "-", "1", "]", "\n", "y_reverse_mask", "[", ":", "lengths_y", "[", "idx", "]", "+", "1", ",", "idx", "]", "=", "1.", "\n", "\n", "\n", "", "return", "x", ",", "x_mask", ",", "y_in", ",", "y_out", ",", "y_mask", ",", "y_reverse_in", ",", "y_reverse_out", ",", "y_reverse_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.XH-B_ABM.None.utils.gen_sample_bidirection": [[161, 266], ["numpy.zeros().astype", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "ctx0.cpu().numpy.cpu().numpy", "range", "model.module.f_init", "model.f_init", "numpy.zeros().astype", "numpy.ones().astype", "numpy.tile", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "next_alpha_sum.append", "next_p.cpu().numpy.cpu().numpy", "torch.from_numpy().cuda.cpu().numpy", "torch.from_numpy().cuda.cpu().numpy", "cand_scores.flatten", "alpha_sum.append", "numpy.zeros().astype", "enumerate", "range", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "numpy.zeros", "torch.from_numpy", "torch.from_numpy", "torch.zeros", "torch.zeros", "ctx0.cpu().numpy.cpu", "model.module.f_next", "model.f_next", "numpy.log", "cand_scores.flatten.argsort", "zip", "new_hyp_samples.append", "copy.copy", "new_hyp_states.append", "new_hyp_alpha_past.append", "len", "numpy.zeros", "numpy.ones", "torch.from_numpy", "torch.from_numpy", "next_p.cpu().numpy.cpu", "torch.from_numpy().cuda.cpu", "torch.from_numpy().cuda.cpu", "numpy.zeros", "copy.copy", "copy.copy", "sample.append", "sample_score.append", "hyp_samples.append", "np.array.append", "hyp_states.append", "hyp_alpha_past.append", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.XH-B_ABM.None.encoder_decoder.Encoder_Decoder.f_init", "home.repos.pwc.inspect_result.XH-B_ABM.None.encoder_decoder.Encoder_Decoder.f_init", "home.repos.pwc.inspect_result.XH-B_ABM.None.encoder_decoder.Encoder_Decoder.f_next", "home.repos.pwc.inspect_result.XH-B_ABM.None.encoder_decoder.Encoder_Decoder.f_next"], ["", "def", "gen_sample_bidirection", "(", "model", ",", "x", ",", "params", ",", "gpu_flag", ",", "k", "=", "1", ",", "maxlen", "=", "30", ",", "idx_decoder", "=", "1", ")", ":", "\n", "    ", "sample", "=", "[", "]", "\n", "sample_score", "=", "[", "]", "\n", "live_k", "=", "1", "\n", "dead_k", "=", "0", "\n", "\n", "hyp_samples", "=", "[", "[", "]", "]", "*", "live_k", "\n", "hyp_scores", "=", "np", ".", "zeros", "(", "live_k", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "if", "gpu_flag", ":", "\n", "        ", "next_state", ",", "ctx0", "=", "model", ".", "module", ".", "f_init", "(", "x", ",", "idx_decoder", "=", "idx_decoder", ")", "\n", "", "else", ":", "\n", "        ", "next_state", ",", "ctx0", "=", "model", ".", "f_init", "(", "x", ",", "idx_decoder", "=", "idx_decoder", ")", "\n", "\n", "\n", "", "if", "idx_decoder", "==", "1", ":", "#'1 denote L2R'", "\n", "        ", "next_w", "=", "np", ".", "zeros", "(", "(", "1", ",", ")", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "end", "=", "1", "\n", "", "else", ":", "\n", "        ", "next_w", "=", "np", ".", "ones", "(", "(", "1", ",", ")", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "end", "=", "0", "\n", "", "next_w", "=", "torch", ".", "from_numpy", "(", "next_w", ")", ".", "cuda", "(", ")", "\n", "next_alpha_past", "=", "torch", ".", "zeros", "(", "1", ",", "ctx0", ".", "shape", "[", "2", "]", ",", "ctx0", ".", "shape", "[", "3", "]", ")", ".", "cuda", "(", ")", "\n", "ctx0", "=", "ctx0", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "\n", "alpha_sum", "=", "[", "]", "\n", "next_alpha_sum", "=", "[", "]", "\n", "\n", "for", "ii", "in", "range", "(", "maxlen", ")", ":", "\n", "        ", "ctx", "=", "np", ".", "tile", "(", "ctx0", ",", "[", "live_k", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "ctx", "=", "torch", ".", "from_numpy", "(", "ctx", ")", ".", "cuda", "(", ")", "\n", "if", "gpu_flag", ":", "\n", "            ", "next_p", ",", "next_state", ",", "next_alpha_past", ",", "alpha", "=", "model", ".", "module", ".", "f_next", "(", "params", ",", "next_w", ",", "None", ",", "ctx", ",", "None", ",", "next_state", ",", "\n", "next_alpha_past", ",", "True", ",", "idx_decoder", "=", "idx_decoder", ")", "\n", "", "else", ":", "\n", "            ", "next_p", ",", "next_state", ",", "next_alpha_past", ",", "alpha", "=", "model", ".", "f_next", "(", "params", ",", "next_w", ",", "None", ",", "ctx", ",", "None", ",", "next_state", ",", "\n", "next_alpha_past", ",", "True", ",", "idx_decoder", "=", "idx_decoder", ")", "\n", "\n", "", "next_alpha_sum", ".", "append", "(", "next_alpha_past", ")", "\n", "\n", "\n", "next_p", "=", "next_p", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "next_state", "=", "next_state", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "next_alpha_past", "=", "next_alpha_past", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "cand_scores", "=", "hyp_scores", "[", ":", ",", "None", "]", "-", "np", ".", "log", "(", "next_p", ")", "\n", "cand_flat", "=", "cand_scores", ".", "flatten", "(", ")", "\n", "\n", "ranks_flat", "=", "cand_flat", ".", "argsort", "(", ")", "[", ":", "(", "k", "-", "dead_k", ")", "]", "\n", "voc_size", "=", "next_p", ".", "shape", "[", "1", "]", "\n", "trans_indices", "=", "ranks_flat", "//", "voc_size", "\n", "word_indices", "=", "ranks_flat", "%", "voc_size", "\n", "costs", "=", "cand_flat", "[", "ranks_flat", "]", "\n", "\n", "alpha_sum", ".", "append", "(", "alpha", ")", "\n", "\n", "\n", "new_hyp_samples", "=", "[", "]", "\n", "new_hyp_scores", "=", "np", ".", "zeros", "(", "k", "-", "dead_k", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "new_hyp_states", "=", "[", "]", "\n", "new_hyp_alpha_past", "=", "[", "]", "\n", "for", "idx", ",", "[", "ti", ",", "wi", "]", "in", "enumerate", "(", "zip", "(", "trans_indices", ",", "word_indices", ")", ")", ":", "\n", "            ", "new_hyp_samples", ".", "append", "(", "hyp_samples", "[", "ti", "]", "+", "[", "wi", "]", ")", "\n", "new_hyp_scores", "[", "idx", "]", "=", "copy", ".", "copy", "(", "costs", "[", "idx", "]", ")", "\n", "new_hyp_states", ".", "append", "(", "copy", ".", "copy", "(", "next_state", "[", "ti", "]", ")", ")", "\n", "new_hyp_alpha_past", ".", "append", "(", "copy", ".", "copy", "(", "next_alpha_past", "[", "ti", "]", ")", ")", "\n", "\n", "", "new_live_k", "=", "0", "\n", "hyp_samples", "=", "[", "]", "\n", "hyp_scores", "=", "[", "]", "\n", "hyp_states", "=", "[", "]", "\n", "hyp_alpha_past", "=", "[", "]", "\n", "\n", "\n", "\n", "for", "idx", "in", "range", "(", "len", "(", "new_hyp_samples", ")", ")", ":", "\n", "            ", "if", "new_hyp_samples", "[", "idx", "]", "[", "-", "1", "]", "==", "end", ":", "\n", "                ", "sample", ".", "append", "(", "new_hyp_samples", "[", "idx", "]", ")", "\n", "sample_score", ".", "append", "(", "new_hyp_scores", "[", "idx", "]", ")", "\n", "dead_k", "+=", "1", "\n", "", "else", ":", "\n", "                ", "new_live_k", "+=", "1", "\n", "hyp_samples", ".", "append", "(", "new_hyp_samples", "[", "idx", "]", ")", "\n", "hyp_scores", ".", "append", "(", "new_hyp_scores", "[", "idx", "]", ")", "\n", "hyp_states", ".", "append", "(", "new_hyp_states", "[", "idx", "]", ")", "\n", "hyp_alpha_past", ".", "append", "(", "new_hyp_alpha_past", "[", "idx", "]", ")", "\n", "", "", "hyp_scores", "=", "np", ".", "array", "(", "hyp_scores", ")", "\n", "live_k", "=", "new_live_k", "\n", "\n", "# whether finish beam search", "\n", "if", "new_live_k", "<", "1", ":", "\n", "            ", "break", "\n", "", "if", "dead_k", ">=", "k", ":", "\n", "            ", "break", "\n", "\n", "", "next_w", "=", "np", ".", "array", "(", "[", "w", "[", "-", "1", "]", "for", "w", "in", "hyp_samples", "]", ")", "\n", "next_state", "=", "np", ".", "array", "(", "hyp_states", ")", "\n", "next_alpha_past", "=", "np", ".", "array", "(", "hyp_alpha_past", ")", "\n", "next_w", "=", "torch", ".", "from_numpy", "(", "next_w", ")", ".", "cuda", "(", ")", "\n", "next_state", "=", "torch", ".", "from_numpy", "(", "next_state", ")", ".", "cuda", "(", ")", "\n", "next_alpha_past", "=", "torch", ".", "from_numpy", "(", "next_alpha_past", ")", ".", "cuda", "(", ")", "\n", "\n", "\n", "", "return", "sample", ",", "sample_score", ",", "alpha_sum", ",", "next_alpha_sum", "\n", "\n"]], "home.repos.pwc.inspect_result.XH-B_ABM.None.utils.weight_init": [[271, 285], ["isinstance", "isinstance", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "function", ["None"], ["", "def", "weight_init", "(", "m", ")", ":", "\n", "    ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ".", "data", ")", "\n", "try", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.", ")", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "\n", "", "", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ".", "data", ")", "\n", "try", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.", ")", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.XH-B_ABM.None.utils.weight_init_kaiming_uniform": [[288, 302], ["isinstance", "isinstance", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "function", ["None"], ["", "", "", "def", "weight_init_kaiming_uniform", "(", "m", ")", ":", "\n", "    ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "m", ".", "weight", ".", "data", ")", "\n", "try", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.", ")", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "\n", "", "", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "m", ".", "weight", ".", "data", ")", "\n", "try", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.", ")", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.XH-B_ABM.None.utils.load_checkpoint_part_weight": [[304, 325], ["print", "os.path.isfile", "torch.load", "torch.load", "model.state_dict", "collections.OrderedDict", "model.state_dict.items", "model.load_state_dict", "torch.load.keys", "checkpoint.keys", "print", "print"], "function", ["None"], ["", "", "", "def", "load_checkpoint_part_weight", "(", "model", ",", "checkpoint_path", ")", ":", "\n", "    ", "print", "(", "\"loadding model ...\"", ")", "\n", "\n", "if", "checkpoint_path", "and", "os", ".", "path", ".", "isfile", "(", "checkpoint_path", ")", ":", "\n", "        ", "checkpoints", "=", "torch", ".", "load", "(", "checkpoint_path", ",", "map_location", "=", "'cpu'", ")", "\n", "model_params", "=", "model", ".", "state_dict", "(", ")", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "checkpoint", "=", "checkpoints", "[", "'state_dict'", "]", "if", "'state_dict'", "in", "checkpoints", ".", "keys", "(", ")", "else", "checkpoints", "\n", "\n", "for", "k", ",", "v", "in", "model_params", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "in", "checkpoint", ".", "keys", "(", ")", ":", "\n", "                ", "v_checkpoint", "=", "checkpoint", "[", "k", "]", "\n", "if", "v_checkpoint", ".", "shape", "==", "v", ".", "shape", ":", "\n", "                    ", "new_state_dict", "[", "k", "]", "=", "checkpoint", "[", "k", "]", "\n", "", "else", ":", "\n", "                    ", "print", "(", "k", ")", "\n", "new_state_dict", "[", "k", "]", "=", "v", "\n", "", "", "else", ":", "\n", "                ", "print", "(", "\"intialize params: \"", ",", "k", ")", "\n", "new_state_dict", "[", "k", "]", "=", "v", "\n", "", "", "model", ".", "load_state_dict", "(", "new_state_dict", ")", "\n", "\n"]]}