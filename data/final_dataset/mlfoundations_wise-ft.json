{"home.repos.pwc.inspect_result.mlfoundations_wise-ft.src.scatter_plot.adjust_plot": [[10, 43], ["ax.set_xticks", "ax.set_xticklabels", "ax.set_yticks", "ax.set_yticklabels", "numpy.arange", "ax.set_ylim", "ax.set_xlim", "ax.grid", "type", "round", "scatter_plot.adjust_plot.transform"], "function", ["None"], ["def", "adjust_plot", "(", "ax", ",", "xrange", ",", "yrange", ",", "scaling", ",", "tick_freq", "=", "0.05", ")", ":", "\n", "\n", "    ", "if", "type", "(", "tick_freq", ")", "is", "tuple", ":", "\n", "        ", "xtick_freq", ",", "ytick_freq", "=", "tick_freq", "[", "0", "]", ",", "tick_freq", "[", "1", "]", "\n", "", "else", ":", "\n", "        ", "xtick_freq", ",", "ytick_freq", "=", "tick_freq", ",", "tick_freq", "\n", "\n", "", "if", "scaling", "==", "'probit'", ":", "\n", "        ", "h", "=", "scipy", ".", "stats", ".", "norm", ".", "ppf", "\n", "", "elif", "scaling", "==", "'logit'", ":", "\n", "        ", "h", "=", "lambda", "p", ":", "np", ".", "log", "(", "p", "/", "(", "1", "-", "p", ")", ")", "\n", "", "else", ":", "\n", "        ", "h", "=", "lambda", "p", ":", "p", "\n", "\n", "", "def", "transform", "(", "z", ")", ":", "\n", "        ", "return", "[", "h", "(", "p", ")", "for", "p", "in", "z", "]", "\n", "\n", "", "tick_loc_x", "=", "[", "round", "(", "z", ",", "2", ")", "for", "z", "in", "np", ".", "arange", "(", "xrange", "[", "0", "]", ",", "xrange", "[", "1", "]", ",", "xtick_freq", ")", "]", "\n", "ax", ".", "set_xticks", "(", "transform", "(", "tick_loc_x", ")", ")", "\n", "ax", ".", "set_xticklabels", "(", "[", "str", "(", "round", "(", "loc", "*", "100", ")", ")", "for", "loc", "in", "tick_loc_x", "]", ",", "fontsize", "=", "13", ")", "\n", "\n", "tick_loc_y", "=", "[", "round", "(", "z", ",", "2", ")", "for", "z", "in", "np", ".", "arange", "(", "yrange", "[", "0", "]", ",", "yrange", "[", "1", "]", ",", "ytick_freq", ")", "]", "\n", "ax", ".", "set_yticks", "(", "transform", "(", "tick_loc_y", ")", ")", "\n", "ax", ".", "set_yticklabels", "(", "[", "str", "(", "round", "(", "loc", "*", "100", ")", ")", "for", "loc", "in", "tick_loc_y", "]", ",", "fontsize", "=", "13", ")", "\n", "\n", "z", "=", "np", ".", "arange", "(", "min", "(", "xrange", "[", "0", "]", ",", "yrange", "[", "0", "]", ")", ",", "max", "(", "xrange", "[", "1", "]", ",", "yrange", "[", "1", "]", ")", ",", "0.01", ")", "\n", "\n", "ax", ".", "set_ylim", "(", "h", "(", "yrange", "[", "0", "]", ")", ",", "h", "(", "yrange", "[", "1", "]", ")", ")", "\n", "ax", ".", "set_xlim", "(", "h", "(", "xrange", "[", "0", "]", ")", ",", "h", "(", "xrange", "[", "1", "]", ")", ")", "\n", "\n", "ax", ".", "grid", "(", "linewidth", "=", "0.5", ")", "\n", "\n", "return", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.src.scatter_plot.plot": [[45, 87], ["matplotlib.subplots", "pandas.read_json", "scatter_plot.adjust_plot", "ax.scatter", "ax.scatter", "ax.scatter", "ax.set_xlabel", "ax.set_ylabel", "ax.legend", "matplotlib.savefig", "adjust_plot.", "adjust_plot.", "adjust_plot.", "adjust_plot.", "adjust_plot.", "adjust_plot.", "pd.read_json.alpha.apply", "min", "max", "min", "max", "isinstance"], "function", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.src.scatter_plot.adjust_plot"], ["", "def", "plot", "(", "results_db", ",", "eval_dataset", ",", "save_path", ")", ":", "\n", "    ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "\n", "df", "=", "pd", ".", "read_json", "(", "results_db", ",", "lines", "=", "True", ")", "\n", "df", "=", "df", "[", "df", ".", "alpha", ".", "apply", "(", "lambda", "x", ":", "isinstance", "(", "x", ",", "float", ")", ")", "]", "\n", "zeroshot", "=", "df", "[", "df", ".", "alpha", "==", "0", "]", "\n", "finetuned", "=", "df", "[", "df", ".", "alpha", "==", "1", "]", "\n", "wise_ft", "=", "df", "[", "(", "df", ".", "alpha", ">", "0", ")", "&", "(", "df", ".", "alpha", "<", "1", ")", "]", "\n", "\n", "x", "=", "'ImageNet:top1'", "\n", "y", "=", "f'{eval_dataset}:top1'", "\n", "\n", "x_range", "=", "(", "0.95", "*", "min", "(", "df", "[", "x", "]", ")", ",", "1.05", "*", "max", "(", "df", "[", "x", "]", ")", ")", "\n", "y_range", "=", "(", "0.95", "*", "min", "(", "df", "[", "y", "]", ")", ",", "1.05", "*", "max", "(", "df", "[", "y", "]", ")", ")", "\n", "\n", "transform", "=", "adjust_plot", "(", "ax", ",", "x_range", ",", "y_range", ",", "scaling", "=", "'logit'", ")", "\n", "\n", "# Add zero-shot", "\n", "ax", ".", "scatter", "(", "\n", "transform", "(", "zeroshot", "[", "x", "]", ")", ",", "transform", "(", "zeroshot", "[", "y", "]", ")", ",", "\n", "label", "=", "f\"CLIP zero-shot\"", ",", "marker", "=", "'*'", ",", "s", "=", "200", ",", "alpha", "=", "0.8", ",", "c", "=", "'C4'", ",", "\n", ")", "\n", "\n", "# Add fine-tuned", "\n", "ax", ".", "scatter", "(", "\n", "transform", "(", "finetuned", "[", "x", "]", ")", ",", "transform", "(", "finetuned", "[", "y", "]", ")", ",", "\n", "label", "=", "f\"CLIP fine-tuned\"", ",", "marker", "=", "'D'", ",", "s", "=", "100", ",", "alpha", "=", "0.8", ",", "c", "=", "'C1'", ",", "\n", ")", "\n", "\n", "# Add WiSE-FT", "\n", "ax", ".", "scatter", "(", "\n", "transform", "(", "wise_ft", "[", "x", "]", ")", ",", "transform", "(", "wise_ft", "[", "y", "]", ")", ",", "\n", "label", "=", "f\"WiSE-FT\"", ",", "marker", "=", "'d'", ",", "s", "=", "100", ",", "alpha", "=", "0.8", ",", "c", "=", "'C6'", ",", "\n", ")", "\n", "\n", "ax", ".", "set_xlabel", "(", "'In-distribution accuracy (ImageNet)'", ",", "fontsize", "=", "16", ")", "\n", "ax", ".", "set_ylabel", "(", "f'OOD accuracy ({eval_dataset})'", ",", "fontsize", "=", "16", ")", "\n", "ax", ".", "legend", "(", "\n", "loc", "=", "'upper center'", ",", "bbox_to_anchor", "=", "(", "0.5", ",", "1.13", ")", ",", "\n", "ncol", "=", "3", ",", "fancybox", "=", "True", "\n", ")", "\n", "plt", ".", "savefig", "(", "save_path", ",", "bbox_inches", "=", "'tight'", ",", "transparent", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.src.wise_ft._merge": [[15, 41], ["theta_0.keys", "torch.ones_like", "torch.maximum", "torch.maximum", "fisher_0.get", "fisher_1.get", "theta_0.keys"], "function", ["None"], ["def", "_merge", "(", "alpha", ",", "theta_0", ",", "theta_1", ",", "fishers", ",", "fisher_floor", ")", ":", "\n", "    ", "if", "fishers", "is", "None", ":", "\n", "# interpolate between all weights in the checkpoints", "\n", "        ", "return", "{", "\n", "key", ":", "(", "1", "-", "alpha", ")", "*", "theta_0", "[", "key", "]", "+", "alpha", "*", "theta_1", "[", "key", "]", "\n", "for", "key", "in", "theta_0", ".", "keys", "(", ")", "\n", "}", "\n", "\n", "", "fisher_0", ",", "fisher_1", "=", "fishers", "\n", "\n", "theta", "=", "{", "}", "\n", "for", "key", "in", "theta_0", ".", "keys", "(", ")", ":", "\n", "# Make sure that either we have a Fisher for this variable for", "\n", "# both checkpoints or none of the checkpoints. Default to regular", "\n", "# interpolation if no Fisher is found.", "\n", "        ", "assert", "(", "key", "in", "fisher_0", ")", "==", "(", "key", "in", "fisher_1", ")", "\n", "ones", "=", "torch", ".", "ones_like", "(", "theta_0", "[", "key", "]", ")", "\n", "f_0", "=", "torch", ".", "maximum", "(", "fisher_0", ".", "get", "(", "key", ",", "ones", ")", ",", "fisher_floor", "*", "ones", ")", "\n", "f_1", "=", "torch", ".", "maximum", "(", "fisher_1", ".", "get", "(", "key", ",", "ones", ")", ",", "fisher_floor", "*", "ones", ")", "\n", "\n", "c_0", "=", "(", "1", "-", "alpha", ")", "*", "f_0", "\n", "c_1", "=", "alpha", "*", "f_1", "\n", "\n", "theta", "[", "key", "]", "=", "(", "c_0", "*", "theta_0", "[", "key", "]", "+", "c_1", "*", "theta_1", "[", "key", "]", ")", "/", "(", "c_0", "+", "c_1", ")", "\n", "\n", "", "return", "theta", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.src.wise_ft.wise_ft": [[43, 96], ["src.models.modeling.ImageClassifier.load", "src.models.modeling.ImageClassifier.load", "src.models.modeling.ImageEncoder", "src.models.zeroshot.get_zeroshot_classifier", "delattr", "src.models.modeling.ImageClassifier", "os.path.join", "src.models.modeling.ImageClassifier.save", "os.path.join", "src.models.finetune.finetune", "v.clone", "v.clone", "src.models.utils.fisher_load", "src.models.utils.fisher_load", "set", "set", "wise_ft._merge", "ImageClassifier.load.load_state_dict", "ImageClassifier.load.save", "src.models.eval.evaluate", "len", "ImageClassifier.load.state_dict().items", "ImageClassifier.load.state_dict().items", "os.path.expanduser", "os.path.expanduser", "theta_0.keys", "theta_1.keys", "os.path.join", "ImageClassifier.load.state_dict", "ImageClassifier.load.state_dict"], "function", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.clip.load", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.clip.load", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.zeroshot.get_zeroshot_classifier", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.modeling.ImageClassifier.save", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.finetune.finetune", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.utils.fisher_load", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.utils.fisher_load", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.src.wise_ft._merge", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.modeling.ImageClassifier.save", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.eval.evaluate"], ["", "def", "wise_ft", "(", "args", ")", ":", "\n", "    ", "assert", "args", ".", "save", "is", "not", "None", ",", "'Please provide a path to store models'", "\n", "\n", "if", "args", ".", "load", "is", "None", ":", "\n", "# Build and save zero-shot model", "\n", "        ", "image_encoder", "=", "ImageEncoder", "(", "args", ",", "keep_lang", "=", "True", ")", "\n", "classification_head", "=", "get_zeroshot_classifier", "(", "args", ",", "image_encoder", ".", "model", ")", "\n", "delattr", "(", "image_encoder", ".", "model", ",", "'transformer'", ")", "\n", "classifier", "=", "ImageClassifier", "(", "image_encoder", ",", "classification_head", ",", "process_images", "=", "False", ")", "\n", "zeroshot_checkpoint", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "'zeroshot.pt'", ")", "\n", "classifier", ".", "save", "(", "zeroshot_checkpoint", ")", "\n", "\n", "# Standard fine-tuning", "\n", "args", ".", "load", "=", "zeroshot_checkpoint", "\n", "args", ".", "save", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "'finetuned'", ")", "\n", "finetuned_checkpoint", "=", "finetune", "(", "args", ")", "\n", "", "else", ":", "\n", "# No need to compute things from stratch", "\n", "        ", "assert", "len", "(", "args", ".", "load", ")", "==", "2", "\n", "zeroshot_checkpoint", ",", "finetuned_checkpoint", "=", "args", ".", "load", "\n", "\n", "# Load models", "\n", "", "zeroshot", "=", "ImageClassifier", ".", "load", "(", "zeroshot_checkpoint", ")", "\n", "finetuned", "=", "ImageClassifier", ".", "load", "(", "finetuned_checkpoint", ")", "\n", "theta_0", "=", "{", "k", ":", "v", ".", "clone", "(", ")", "for", "k", ",", "v", "in", "zeroshot", ".", "state_dict", "(", ")", ".", "items", "(", ")", "}", "\n", "theta_1", "=", "{", "k", ":", "v", ".", "clone", "(", ")", "for", "k", ",", "v", "in", "finetuned", ".", "state_dict", "(", ")", ".", "items", "(", ")", "}", "\n", "del", "zeroshot", "\n", "\n", "if", "args", ".", "fisher", "is", "None", ":", "\n", "        ", "fishers", "=", "None", "\n", "", "else", ":", "\n", "        ", "fisher_0_file", ",", "fisher_1_file", "=", "args", ".", "fisher", "\n", "fisher_0", "=", "fisher_load", "(", "os", ".", "path", ".", "expanduser", "(", "fisher_0_file", ")", ")", "\n", "fisher_1", "=", "fisher_load", "(", "os", ".", "path", ".", "expanduser", "(", "fisher_1_file", ")", ")", "\n", "fishers", "=", "fisher_0", ",", "fisher_1", "\n", "\n", "# make sure checkpoints are compatible", "\n", "", "assert", "set", "(", "theta_0", ".", "keys", "(", ")", ")", "==", "set", "(", "theta_1", ".", "keys", "(", ")", ")", "\n", "\n", "alphas", "=", "args", ".", "alpha", "\n", "for", "alpha", "in", "alphas", ":", "\n", "        ", "args", ".", "alpha", "=", "alpha", "\n", "\n", "theta", "=", "_merge", "(", "alpha", ",", "theta_0", ",", "theta_1", ",", "fishers", ",", "args", ".", "fisher_floor", ")", "\n", "\n", "# update the model (in-place) acccording to the new weights", "\n", "finetuned", ".", "load_state_dict", "(", "theta", ")", "\n", "\n", "# save model", "\n", "finetuned", ".", "save", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "f'wise_ft_alpha={alpha:.3f}.pt'", ")", ")", "\n", "\n", "# evaluate", "\n", "evaluate", "(", "finetuned", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.src.args.parse_arguments": [[6, 145], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.cuda.is_available", "os.path.expanduser", "len", "x.split", "x.split", "x.split"], "function", ["None"], ["def", "parse_arguments", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--data-location\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "os", ".", "path", ".", "expanduser", "(", "'~/data'", ")", ",", "\n", "help", "=", "\"The root directory for the datasets.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--eval-datasets\"", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "lambda", "x", ":", "x", ".", "split", "(", "\",\"", ")", ",", "\n", "help", "=", "\"Which datasets to use for evaluation. Split by comma, e.g. CIFAR101,CIFAR102.\"", "\n", "\" Note that same model used for all datasets, so much have same classnames\"", "\n", "\"for zero shot.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--train-dataset\"", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"For fine tuning or linear probe, which dataset to train on\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--template\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Which prompt template is used. Leave as None for linear probe, etc.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--classnames\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"openai\"", ",", "\n", "help", "=", "\"Which class names to use.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--alpha\"", ",", "\n", "default", "=", "[", "0.5", "]", ",", "\n", "nargs", "=", "'*'", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "(", "\n", "'Interpolation coefficient for ensembling. '", "\n", "'Users should specify N-1 values, where N is the number of '", "\n", "'models being ensembled. The specified numbers should sum to '", "\n", "'less than 1. Note that the order of these values matter, and '", "\n", "'should be the same as the order of the classifiers being ensembled.'", "\n", ")", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--exp_name\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Name of the experiment, for organization purposes only.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--results-db\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Where to store the results, else does not store\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--model\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"The type of model (e.g. RN50, ViT-B/32).\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--batch-size\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "128", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lr\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.001", ",", "\n", "help", "=", "\"Learning rate.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--wd\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.1", ",", "\n", "help", "=", "\"Weight decay\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--ls\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.0", ",", "\n", "help", "=", "\"Label smoothing.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--warmup_length\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "500", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--epochs\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "10", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--load\"", ",", "\n", "type", "=", "lambda", "x", ":", "x", ".", "split", "(", "\",\"", ")", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Optionally load _classifiers_, e.g. a zero shot classifier or probe or ensemble both.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--save\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Optionally save a _classifier_, e.g. a zero shot classifier or probe.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--freeze-encoder\"", ",", "\n", "default", "=", "False", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether or not to freeze the image encoder. Only relevant for fine-tuning.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--cache-dir\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Directory for caching features and encoder\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--fisher\"", ",", "\n", "type", "=", "lambda", "x", ":", "x", ".", "split", "(", "\",\"", ")", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"TODO\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--fisher_floor\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "1e-8", ",", "\n", "help", "=", "\"TODO\"", ",", "\n", ")", "\n", "parsed_args", "=", "parser", ".", "parse_args", "(", ")", "\n", "parsed_args", ".", "device", "=", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", "\n", "\n", "if", "parsed_args", ".", "load", "is", "not", "None", "and", "len", "(", "parsed_args", ".", "load", ")", "==", "1", ":", "\n", "        ", "parsed_args", ".", "load", "=", "parsed_args", ".", "load", "[", "0", "]", "\n", "", "return", "parsed_args", "\n", "", ""]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet_a.ImageNetAValClasses.get_class_sublist_and_mask": [[31, 33], ["None"], "methods", ["None"], ["    ", "def", "get_class_sublist_and_mask", "(", "self", ")", ":", "\n", "        ", "return", "CLASS_SUBLIST", ",", "CLASS_SUBLIST_MASK", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet_a.ImageNetA.get_class_sublist_and_mask": [[36, 38], ["None"], "methods", ["None"], ["    ", "def", "get_class_sublist_and_mask", "(", "self", ")", ":", "\n", "        ", "return", "CLASS_SUBLIST", ",", "CLASS_SUBLIST_MASK", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet_a.ImageNetA.get_test_path": [[39, 41], ["os.path.join"], "methods", ["None"], ["", "def", "get_test_path", "(", "self", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "location", ",", "'imagenet-a'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.cifar100.CIFAR100.__init__": [[6, 30], ["os.path.expanduser", "torchvision.datasets.CIFAR100", "torch.utils.data.DataLoader", "torchvision.datasets.CIFAR100", "torch.utils.data.DataLoader"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "preprocess", ",", "\n", "location", "=", "os", ".", "path", ".", "expanduser", "(", "'~/data'", ")", ",", "\n", "batch_size", "=", "128", ",", "\n", "num_workers", "=", "16", ",", "\n", "classnames", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "train_dataset", "=", "PyTorchCIFAR100", "(", "\n", "root", "=", "location", ",", "download", "=", "True", ",", "train", "=", "True", ",", "transform", "=", "preprocess", "\n", ")", "\n", "\n", "self", ".", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "self", ".", "train_dataset", ",", "batch_size", "=", "batch_size", ",", "num_workers", "=", "num_workers", "\n", ")", "\n", "\n", "self", ".", "test_dataset", "=", "PyTorchCIFAR100", "(", "\n", "root", "=", "location", ",", "download", "=", "True", ",", "train", "=", "False", ",", "transform", "=", "preprocess", "\n", ")", "\n", "\n", "self", ".", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "self", ".", "test_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "num_workers", "\n", ")", "\n", "\n", "self", ".", "classnames", "=", "self", ".", "test_dataset", ".", "classes", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenetv2.ImageNetV2DatasetWithPaths.__getitem__": [[8, 16], ["PIL.Image.open", "int", "imagenetv2.ImageNetV2DatasetWithPaths.transform", "str"], "methods", ["None"], ["    ", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "img", ",", "label", "=", "Image", ".", "open", "(", "self", ".", "fnames", "[", "i", "]", ")", ",", "int", "(", "self", ".", "fnames", "[", "i", "]", ".", "parent", ".", "name", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "return", "{", "\n", "'images'", ":", "img", ",", "\n", "'labels'", ":", "label", ",", "\n", "'image_paths'", ":", "str", "(", "self", ".", "fnames", "[", "i", "]", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenetv2.ImageNetV2.get_test_dataset": [[19, 21], ["imagenetv2.ImageNetV2DatasetWithPaths"], "methods", ["None"], ["    ", "def", "get_test_dataset", "(", "self", ")", ":", "\n", "        ", "return", "ImageNetV2DatasetWithPaths", "(", "transform", "=", "self", ".", "preprocess", ",", "location", "=", "self", ".", "location", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.common.SubsetSampler.__init__": [[17, 19], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "indices", ")", ":", "\n", "        ", "self", ".", "indices", "=", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.common.SubsetSampler.__iter__": [[20, 22], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "(", "i", "for", "i", "in", "self", ".", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.common.SubsetSampler.__len__": [[23, 25], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.common.ImageFolderWithPaths.__init__": [[27, 39], ["torchvision.ImageFolder.__init__", "print", "len", "range", "len", "random.random", "random.randint"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.CLIP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "transform", ",", "flip_label_prob", "=", "0.0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "path", ",", "transform", ")", "\n", "self", ".", "flip_label_prob", "=", "flip_label_prob", "\n", "if", "self", ".", "flip_label_prob", ">", "0", ":", "\n", "            ", "print", "(", "f'Flipping labels with probability {self.flip_label_prob}'", ")", "\n", "num_classes", "=", "len", "(", "self", ".", "classes", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "samples", ")", ")", ":", "\n", "                ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "flip_label_prob", ":", "\n", "                    ", "new_label", "=", "random", ".", "randint", "(", "0", ",", "num_classes", "-", "1", ")", "\n", "self", ".", "samples", "[", "i", "]", "=", "(", "\n", "self", ".", "samples", "[", "i", "]", "[", "0", "]", ",", "\n", "new_label", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.common.ImageFolderWithPaths.__getitem__": [[41, 47], ["torchvision.ImageFolder.__getitem__"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.objectnet.ObjectNetDataset.__getitem__"], ["", "", "", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "image", ",", "label", "=", "super", "(", "ImageFolderWithPaths", ",", "self", ")", ".", "__getitem__", "(", "index", ")", "\n", "return", "{", "\n", "'images'", ":", "image", ",", "\n", "'labels'", ":", "label", ",", "\n", "'image_paths'", ":", "self", ".", "samples", "[", "index", "]", "[", "0", "]", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.common.FeatureDataset.__init__": [[121, 123], ["common.get_features"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.common.get_features"], ["    ", "def", "__init__", "(", "self", ",", "is_train", ",", "image_encoder", ",", "dataset", ",", "device", ")", ":", "\n", "        ", "self", ".", "data", "=", "get_features", "(", "is_train", ",", "image_encoder", ",", "dataset", ",", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.common.FeatureDataset.__len__": [[124, 126], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", "[", "'features'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.common.FeatureDataset.__getitem__": [[127, 131], ["torch.from_numpy().float", "common.FeatureDataset.data.items", "torch.from_numpy"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "data", "=", "{", "k", ":", "v", "[", "idx", "]", "for", "k", ",", "v", "in", "self", ".", "data", ".", "items", "(", ")", "}", "\n", "data", "[", "'features'", "]", "=", "torch", ".", "from_numpy", "(", "data", "[", "'features'", "]", ")", ".", "float", "(", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.common.maybe_dictionarize": [[50, 62], ["isinstance", "len", "len", "ValueError", "len"], "function", ["None"], ["", "", "def", "maybe_dictionarize", "(", "batch", ")", ":", "\n", "    ", "if", "isinstance", "(", "batch", ",", "dict", ")", ":", "\n", "        ", "return", "batch", "\n", "\n", "", "if", "len", "(", "batch", ")", "==", "2", ":", "\n", "        ", "batch", "=", "{", "'images'", ":", "batch", "[", "0", "]", ",", "'labels'", ":", "batch", "[", "1", "]", "}", "\n", "", "elif", "len", "(", "batch", ")", "==", "3", ":", "\n", "        ", "batch", "=", "{", "'images'", ":", "batch", "[", "0", "]", ",", "'labels'", ":", "batch", "[", "1", "]", ",", "'metadata'", ":", "batch", "[", "2", "]", "}", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f'Unexpected number of elements: {len(batch)}'", ")", "\n", "\n", "", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.common.get_features_helper": [[64, 92], ["collections.defaultdict", "torch.nn.DataParallel.to", "torch.nn.DataParallel", "torch.nn.DataParallel.eval", "collections.defaultdict.items", "torch.no_grad", "tqdm.tqdm", "torch.is_tensor", "common.maybe_dictionarize", "torch.nn.DataParallel.", "all_data[].append", "maybe_dictionarize.items", "torch.cat().numpy", "batch[].cuda", "image_encoder.cpu", "hasattr", "range", "val.cpu.cpu", "all_data[].append", "all_data[].extend", "torch.cat", "torch.cuda.device_count"], "function", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.zeroshot.eval", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.common.maybe_dictionarize"], ["", "def", "get_features_helper", "(", "image_encoder", ",", "dataloader", ",", "device", ")", ":", "\n", "    ", "all_data", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "\n", "image_encoder", "=", "image_encoder", ".", "to", "(", "device", ")", "\n", "image_encoder", "=", "torch", ".", "nn", ".", "DataParallel", "(", "image_encoder", ",", "device_ids", "=", "[", "x", "for", "x", "in", "range", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", "]", ")", "\n", "image_encoder", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch", "in", "tqdm", "(", "dataloader", ")", ":", "\n", "            ", "batch", "=", "maybe_dictionarize", "(", "batch", ")", "\n", "features", "=", "image_encoder", "(", "batch", "[", "'images'", "]", ".", "cuda", "(", ")", ")", "\n", "\n", "all_data", "[", "'features'", "]", ".", "append", "(", "features", ".", "cpu", "(", ")", ")", "\n", "\n", "for", "key", ",", "val", "in", "batch", ".", "items", "(", ")", ":", "\n", "                ", "if", "key", "==", "'images'", ":", "\n", "                    ", "continue", "\n", "", "if", "hasattr", "(", "val", ",", "'cpu'", ")", ":", "\n", "                    ", "val", "=", "val", ".", "cpu", "(", ")", "\n", "all_data", "[", "key", "]", ".", "append", "(", "val", ")", "\n", "", "else", ":", "\n", "                    ", "all_data", "[", "key", "]", ".", "extend", "(", "val", ")", "\n", "\n", "", "", "", "", "for", "key", ",", "val", "in", "all_data", ".", "items", "(", ")", ":", "\n", "        ", "if", "torch", ".", "is_tensor", "(", "val", "[", "0", "]", ")", ":", "\n", "            ", "all_data", "[", "key", "]", "=", "torch", ".", "cat", "(", "val", ")", ".", "numpy", "(", ")", "\n", "\n", "", "", "return", "all_data", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.common.get_features": [[94, 118], ["type", "glob.glob", "print", "print", "common.get_features_helper", "len", "torch.load", "print", "os.makedirs", "print", "get_features_helper.items", "os.path.splitext", "torch.save", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.common.get_features_helper", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.clip.load", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.modeling.ImageClassifier.save"], ["", "def", "get_features", "(", "is_train", ",", "image_encoder", ",", "dataset", ",", "device", ")", ":", "\n", "    ", "split", "=", "'train'", "if", "is_train", "else", "'val'", "\n", "dname", "=", "type", "(", "dataset", ")", ".", "__name__", "\n", "if", "image_encoder", ".", "cache_dir", "is", "not", "None", ":", "\n", "        ", "cache_dir", "=", "f'{image_encoder.cache_dir}/{dname}/{split}'", "\n", "cached_files", "=", "glob", ".", "glob", "(", "f'{cache_dir}/*'", ")", "\n", "", "if", "image_encoder", ".", "cache_dir", "is", "not", "None", "and", "len", "(", "cached_files", ")", ">", "0", ":", "\n", "        ", "print", "(", "f'Getting features from {cache_dir}'", ")", "\n", "data", "=", "{", "}", "\n", "for", "cached_file", "in", "cached_files", ":", "\n", "            ", "name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "cached_file", ")", ")", "[", "0", "]", "\n", "data", "[", "name", "]", "=", "torch", ".", "load", "(", "cached_file", ")", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "f'Did not find cached features at {cache_dir}. Building from scratch.'", ")", "\n", "loader", "=", "dataset", ".", "train_loader", "if", "is_train", "else", "dataset", ".", "test_loader", "\n", "data", "=", "get_features_helper", "(", "image_encoder", ",", "loader", ",", "device", ")", "\n", "if", "image_encoder", ".", "cache_dir", "is", "None", ":", "\n", "            ", "print", "(", "'Not caching because no cache directory was passed.'", ")", "\n", "", "else", ":", "\n", "            ", "os", ".", "makedirs", "(", "cache_dir", ",", "exist_ok", "=", "True", ")", "\n", "print", "(", "f'Caching data at {cache_dir}'", ")", "\n", "for", "name", ",", "val", "in", "data", ".", "items", "(", ")", ":", "\n", "                ", "torch", ".", "save", "(", "val", ",", "f'{cache_dir}/{name}.pt'", ")", "\n", "", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.common.get_dataloader": [[133, 140], ["common.FeatureDataset", "torch.utils.data.DataLoader"], "function", ["None"], ["", "", "def", "get_dataloader", "(", "dataset", ",", "is_train", ",", "args", ",", "image_encoder", "=", "None", ")", ":", "\n", "    ", "if", "image_encoder", "is", "not", "None", ":", "\n", "        ", "feature_dataset", "=", "FeatureDataset", "(", "is_train", ",", "image_encoder", ",", "dataset", ",", "args", ".", "device", ")", "\n", "dataloader", "=", "DataLoader", "(", "feature_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "is_train", ")", "\n", "", "else", ":", "\n", "        ", "dataloader", "=", "dataset", ".", "train_loader", "if", "is_train", "else", "dataset", ".", "test_loader", "\n", "", "return", "dataloader", "", "", ""]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet_vid_robust.VidRobustDataset.__init__": [[14, 17], ["common.ImageFolderWithPaths.__init__"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.CLIP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "label_map", ",", "path", ",", "transform", ")", ":", "\n", "        ", "self", ".", "label_map", "=", "label_map", "\n", "super", "(", ")", ".", "__init__", "(", "path", ",", "transform", "=", "transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet_vid_robust.VidRobustDataset.__getitem__": [[18, 23], ["common.ImageFolderWithPaths.__getitem__", "data[].split"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.objectnet.ObjectNetDataset.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "data", "=", "super", "(", ")", ".", "__getitem__", "(", "index", ")", "\n", "label_key", "=", "'/'", ".", "join", "(", "data", "[", "'image_paths'", "]", ".", "split", "(", "'/'", ")", "[", "-", "3", ":", "]", ")", "\n", "data", "[", "'labels'", "]", "=", "self", ".", "label_map", "[", "label_key", "]", "[", "0", "]", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet_vid_robust.ImageNetVidRobustBase.__init__": [[25, 50], ["sorted", "imagenet.ImageNet.__init__", "pathlib.Path", "open", "json.load", "open", "json.load", "open", "json.load", "open", "json.load", "open", "json.load", "open", "json.load", "int", "int", "int", "kwargs.get", "imagenet_vid_robust.ImageNetVidRobustBase.imagenet_class_index.items", "imagenet_vid_robust.ImageNetVidRobustBase.imagenet_vid_class_index.items", "int", "imagenet_vid_robust.ImageNetVidRobustBase.wnid_map.items", "int", "imagenet_vid_robust.ImageNetVidRobustBase.rev_wnid_map.items", "range", "str"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.CLIP.__init__", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.clip.load", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.clip.load", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.clip.load", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.clip.load", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.clip.load", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.clip.load"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "data_loc", "=", "pathlib", ".", "Path", "(", "kwargs", ".", "get", "(", "'location'", ",", "'~'", ")", ")", "/", "'imagenet_vid_ytbb_robust/imagenet-vid-robust'", "\n", "with", "open", "(", "(", "data_loc", "/", "'misc/wnid_map.json'", ")", ".", "resolve", "(", ")", ")", "as", "f", ":", "\n", "            ", "self", ".", "wnid_map", "=", "json", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "(", "data_loc", "/", "'misc/rev_wnid_map.json'", ")", ".", "resolve", "(", ")", ")", "as", "f", ":", "\n", "            ", "self", ".", "rev_wnid_map", "=", "json", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "(", "data_loc", "/", "'misc/imagenet_class_index.json'", ")", ".", "resolve", "(", ")", ")", "as", "f", ":", "\n", "            ", "self", ".", "imagenet_class_index", "=", "json", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "(", "data_loc", "/", "'misc/imagenet_vid_class_index.json'", ")", ".", "resolve", "(", ")", ")", "as", "f", ":", "\n", "            ", "self", ".", "imagenet_vid_class_index", "=", "json", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "(", "data_loc", "/", "'metadata/labels.json'", ")", ".", "resolve", "(", ")", ")", "as", "f", ":", "\n", "            ", "self", ".", "label_map", "=", "json", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "(", "data_loc", "/", "'metadata/pmsets.json'", ")", ".", "resolve", "(", ")", ")", "as", "f", ":", "\n", "            ", "self", ".", "pmsets", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "rev_imagenet", "=", "{", "v", "[", "0", "]", ":", "k", "for", "k", ",", "v", "in", "self", ".", "imagenet_class_index", ".", "items", "(", ")", "}", "\n", "rev_vid", "=", "{", "v", "[", "0", "]", ":", "k", "for", "k", ",", "v", "in", "self", ".", "imagenet_vid_class_index", ".", "items", "(", ")", "}", "\n", "self", ".", "CLASS_IDX_LIST", "=", "sorted", "(", "[", "int", "(", "rev_imagenet", "[", "k", "]", ")", "for", "k", "in", "self", ".", "wnid_map", "]", ")", "\n", "self", ".", "CLASS_IDX_MAP", "=", "{", "int", "(", "rev_imagenet", "[", "k", "]", ")", ":", "int", "(", "rev_vid", "[", "v", "]", ")", "for", "k", ",", "v", "in", "self", ".", "wnid_map", ".", "items", "(", ")", "}", "\n", "self", ".", "rev_class_idx_map", "=", "{", "int", "(", "rev_vid", "[", "k", "]", ")", ":", "[", "int", "(", "rev_imagenet", "[", "elt", "]", ")", "for", "elt", "in", "v", "]", "for", "k", ",", "v", "in", "self", ".", "rev_wnid_map", ".", "items", "(", ")", "}", "\n", "self", ".", "merge_op", "=", "'max'", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "classnames", "=", "[", "self", ".", "imagenet_vid_class_index", "[", "str", "(", "i", ")", "]", "[", "1", "]", "for", "i", "in", "range", "(", "30", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet_vid_robust.ImageNetVidRobustBase.populate_train": [[51, 53], ["None"], "methods", ["None"], ["", "def", "populate_train", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet_vid_robust.ImageNetVidRobustBase.project_logits": [[54, 74], ["torch.is_tensor", "numpy.zeros", "imagenet_vid_robust.ImageNetVidRobustBase.rev_class_idx_map.items", "torch.tensor().to", "isinstance", "isinstance", "logits.cpu().numpy.cpu().numpy.cpu().numpy", "imagenet_vid_robust.ImageNetVidRobustBase.project_logits", "numpy.mean().squeeze", "torch.tensor", "logits.cpu().numpy.cpu().numpy.cpu", "numpy.median().squeeze", "numpy.mean", "numpy.max().squeeze", "numpy.median", "numpy.sum", "Exception", "numpy.max"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.objectnet.ObjectNetBase.project_logits"], ["", "def", "project_logits", "(", "self", ",", "logits", ",", "device", ")", ":", "\n", "        ", "if", "isinstance", "(", "logits", ",", "list", ")", "or", "isinstance", "(", "logits", ",", "tuple", ")", ":", "\n", "            ", "return", "[", "self", ".", "project_logits", "(", "l", ",", "device", ")", "for", "l", "in", "logits", "]", "\n", "", "if", "logits", ".", "shape", "[", "1", "]", "==", "30", ":", "\n", "            ", "return", "logits", "\n", "", "if", "torch", ".", "is_tensor", "(", "logits", ")", ":", "\n", "            ", "logits", "=", "logits", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "logits_projected", "=", "np", ".", "zeros", "(", "(", "logits", ".", "shape", "[", "0", "]", ",", "30", ")", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "rev_class_idx_map", ".", "items", "(", ")", ":", "\n", "            ", "if", "self", ".", "merge_op", "==", "'mean'", ":", "\n", "                ", "logits_projected", "[", ":", ",", "k", "]", "=", "np", ".", "mean", "(", "logits", "[", ":", ",", "v", "]", ",", "axis", "=", "1", ")", ".", "squeeze", "(", ")", "\n", "", "elif", "self", ".", "merge_op", "==", "'median'", ":", "\n", "                ", "logits_projected", "[", ":", ",", "k", "]", "=", "np", ".", "median", "(", "logits", "[", ":", ",", "v", "]", ",", "axis", "=", "1", ")", ".", "squeeze", "(", ")", "\n", "", "elif", "self", ".", "merge_op", "==", "'max'", ":", "\n", "                ", "logits_projected", "[", ":", ",", "k", "]", "=", "np", ".", "max", "(", "logits", "[", ":", ",", "v", "]", ",", "axis", "=", "1", ")", ".", "squeeze", "(", ")", "\n", "", "elif", "self", ".", "merge_op", "==", "'sum'", ":", "\n", "                ", "logits_projected", "[", ":", ",", "k", "]", "=", "np", ".", "sum", "(", "logits", "[", ":", ",", "v", "]", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "f'unsupported merge operation {merge_op} not allowed'", ")", "\n", "", "", "return", "torch", ".", "tensor", "(", "logits_projected", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet_vid_robust.ImageNetVidRobustBase.scatter_weights": [[75, 83], ["imagenet_vid_robust.ImageNetVidRobustBase.rev_class_idx_map.items", "weights.size", "torch.ones().to", "torch.ones", "weights.size"], "methods", ["None"], ["", "def", "scatter_weights", "(", "self", ",", "weights", ")", ":", "\n", "        ", "if", "weights", ".", "size", "(", "1", ")", "==", "1000", ":", "\n", "            ", "return", "weights", "\n", "", "new_weights", "=", "torch", ".", "ones", "(", "(", "weights", ".", "size", "(", "0", ")", ",", "1000", ")", ")", ".", "to", "(", "weights", ".", "device", ")", "*", "-", "10e10", "\n", "for", "k", ",", "v", "in", "self", ".", "rev_class_idx_map", ".", "items", "(", ")", ":", "\n", "            ", "for", "vv", "in", "v", ":", "\n", "                ", "new_weights", "[", ":", ",", "vv", "]", "=", "weights", "[", ":", ",", "k", "]", "\n", "", "", "return", "new_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet_vid_robust.ImageNetVidRobustValClasses.post_loop_metrics": [[87, 91], ["logits.numpy.numpy.numpy", "targets.numpy.numpy.numpy", "imagenet_vid_robust.ImageNetVidRobustValClasses.score_predictions"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.YTBBRobustValClasses.score_predictions"], ["    ", "def", "post_loop_metrics", "(", "self", ",", "targets", ",", "logits", ",", "image_paths", ",", "args", ")", ":", "\n", "        ", "logits", "=", "logits", ".", "numpy", "(", ")", "\n", "targets", "=", "targets", ".", "numpy", "(", ")", "\n", "return", "{", "'acc'", ":", "self", ".", "score_predictions", "(", "logits", ",", "targets", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet_vid_robust.ImageNetVidRobustValClasses.score_predictions": [[92, 97], ["logits_projected.argmax", "numpy.sum", "len", "numpy.equal"], "methods", ["None"], ["", "def", "score_predictions", "(", "self", ",", "logits_projected", ",", "targets", ")", ":", "\n", "        ", "preds", "=", "logits_projected", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "acc", "=", "np", ".", "sum", "(", "np", ".", "equal", "(", "preds", ",", "targets", ")", ")", "\n", "n", "=", "len", "(", "preds", ")", "\n", "return", "acc", "/", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet_vid_robust.ImageNetVidRobustValClasses.get_test_sampler": [[98, 104], ["sorted", "common.SubsetSampler", "range"], "methods", ["None"], ["", "def", "get_test_sampler", "(", "self", ")", ":", "\n", "        ", "idx_subsample_list", "=", "[", "range", "(", "x", "*", "50", ",", "(", "x", "+", "1", ")", "*", "50", ")", "for", "x", "in", "self", ".", "CLASS_IDX_LIST", "]", "\n", "idx_subsample_list", "=", "sorted", "(", "[", "item", "for", "sublist", "in", "idx_subsample_list", "for", "item", "in", "sublist", "]", ")", "\n", "\n", "sampler", "=", "SubsetSampler", "(", "idx_subsample_list", ")", "\n", "return", "sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet_vid_robust.ImageNetVidRobustValClasses.project_labels": [[105, 109], ["labels.cpu().numpy.cpu().numpy.cpu().numpy", "torch.tensor().to", "labels.cpu().numpy.cpu().numpy.cpu", "torch.tensor"], "methods", ["None"], ["", "def", "project_labels", "(", "self", ",", "labels", ",", "device", ")", ":", "\n", "        ", "labels", "=", "labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "labels_projected", "=", "torch", ".", "tensor", "(", "[", "self", ".", "CLASS_IDX_MAP", "[", "label", "]", "for", "label", "in", "labels", "]", ")", ".", "to", "(", "device", ")", "\n", "return", "labels_projected", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet_vid_robust.ImageNetVidRobust.score_predictions": [[113, 137], ["len", "pmsets.items", "numpy.argmax", "numpy.argmax", "wrongs.append", "len", "len"], "methods", ["None"], ["    ", "def", "score_predictions", "(", "self", ",", "preds", ",", "pmsets", ")", ":", "\n", "        ", "correct_anchor", "=", "0", "\n", "correct_pmk", "=", "0", "\n", "N", "=", "len", "(", "pmsets", ")", "\n", "wrong_map", "=", "{", "}", "\n", "for", "anchor", ",", "pmset", "in", "pmsets", ".", "items", "(", ")", ":", "\n", "            ", "pmset_correct", "=", "0", "\n", "wrongs", "=", "[", "]", "\n", "for", "elem", "in", "pmset", ":", "\n", "                ", "if", "np", ".", "argmax", "(", "preds", "[", "elem", "]", ")", "in", "self", ".", "label_map", "[", "elem", "]", ":", "\n", "                    ", "pmset_correct", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "wrongs", ".", "append", "(", "elem", ")", "\n", "\n", "", "", "if", "np", ".", "argmax", "(", "preds", "[", "anchor", "]", ")", "in", "self", ".", "label_map", "[", "anchor", "]", ":", "\n", "                ", "correct_anchor", "+=", "1", "\n", "pmset_correct", "+=", "1", "\n", "if", "len", "(", "wrongs", ")", ">", "0", ":", "\n", "                    ", "wrong_map", "[", "anchor", "]", "=", "wrongs", "[", "-", "1", "]", "\n", "\n", "", "", "if", "pmset_correct", "==", "len", "(", "pmset", ")", "+", "1", ":", "\n", "                ", "correct_pmk", "+=", "1", "\n", "\n", "", "", "return", "correct_anchor", "/", "N", ",", "correct_pmk", "/", "N", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet_vid_robust.ImageNetVidRobust.post_loop_metrics": [[138, 152], ["logits.numpy.numpy.numpy", "labels.numpy.numpy.numpy", "enumerate", "imagenet_vid_robust.ImageNetVidRobust.score_predictions", "img_name.split"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.YTBBRobustValClasses.score_predictions"], ["", "def", "post_loop_metrics", "(", "self", ",", "labels", ",", "logits", ",", "image_paths", ",", "args", ")", ":", "\n", "        ", "logits", "=", "logits", ".", "numpy", "(", ")", "\n", "labels", "=", "labels", ".", "numpy", "(", ")", "\n", "\n", "preds_dict", "=", "{", "}", "\n", "for", "i", ",", "img_name", "in", "enumerate", "(", "image_paths", ")", ":", "\n", "            ", "preds_dict", "[", "'val/'", "+", "img_name", ".", "split", "(", "'val/'", ")", "[", "1", "]", "]", "=", "logits", "[", "i", "]", "\n", "\n", "", "benign", ",", "pmk", "=", "self", ".", "score_predictions", "(", "preds_dict", ",", "self", ".", "pmsets", ")", "\n", "metrics_dict", "=", "{", "}", "\n", "metrics_dict", "[", "'pm0'", "]", "=", "benign", "\n", "metrics_dict", "[", "'pm10'", "]", "=", "pmk", "\n", "metrics_dict", "[", "'merge_op'", "]", "=", "self", ".", "merge_op", "\n", "return", "metrics_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet_vid_robust.ImageNetVidRobust.get_test_dataset": [[153, 156], ["os.path.join", "imagenet_vid_robust.VidRobustDataset"], "methods", ["None"], ["", "def", "get_test_dataset", "(", "self", ")", ":", "\n", "        ", "valdir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "location", ",", "'imagenet_vid_ytbb_robust/imagenet-vid-robust/val'", ")", "\n", "return", "VidRobustDataset", "(", "self", ".", "label_map", ",", "valdir", ",", "transform", "=", "self", ".", "preprocess", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet_classnames.get_classnames": [[200, 212], ["v.replace", "ValueError", "v.lower"], "function", ["None"], ["def", "get_classnames", "(", "source", ")", ":", "\n", "    ", "if", "source", "==", "'openai'", ":", "\n", "        ", "return", "openai_classnames", "\n", "", "elif", "source", "==", "'ytbb_robust_classnames'", ":", "\n", "        ", "return", "ytbb_robust_classnames", "\n", "", "elif", "source", "==", "'imagenet_vid_robust_classnames'", ":", "\n", "        ", "return", "[", "v", ".", "replace", "(", "'_'", ",", "' '", ")", "for", "v", "in", "imagenet_vid_robust_classnames", "]", "\n", "", "elif", "source", "==", "'objectnet_classnames'", ":", "\n", "        ", "return", "[", "v", ".", "lower", "(", ")", "for", "v", "in", "objectnet_classnames", "]", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f'Unknown classname source for imagenet: {source}'", ")", "\n", "", "return", "all_classnames", "\n", "", ""]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.iwildcam.IWildCam.__init__": [[42, 74], ["os.path.expanduser", "wilds.get_dataset", "iwildcam.IWildCam.dataset.get_subset", "wilds.common.data_loaders.get_train_loader", "wilds.common.data_loaders.get_eval_loader", "pandas.read_csv", "iwildcam.get_nonempty_subset", "iwildcam.IWildCam.dataset.get_subset", "iwildcam.get_nonempty_subset", "iwildcam.IWildCam.dataset.get_subset", "s.lower", "list", "pathlib.Path"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.iwildcam.get_nonempty_subset", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.iwildcam.get_nonempty_subset"], ["    ", "def", "__init__", "(", "self", ",", "\n", "preprocess", ",", "\n", "location", "=", "os", ".", "path", ".", "expanduser", "(", "'~/data'", ")", ",", "\n", "remove_non_empty", "=", "False", ",", "\n", "batch_size", "=", "128", ",", "\n", "num_workers", "=", "16", ",", "\n", "classnames", "=", "None", ",", "\n", "subset", "=", "'train'", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "wilds", ".", "get_dataset", "(", "dataset", "=", "'iwildcam'", ",", "root_dir", "=", "location", ")", "\n", "self", ".", "train_dataset", "=", "self", ".", "dataset", ".", "get_subset", "(", "'train'", ",", "transform", "=", "preprocess", ")", "\n", "self", ".", "train_loader", "=", "get_train_loader", "(", "\"standard\"", ",", "self", ".", "train_dataset", ",", "num_workers", "=", "num_workers", ",", "batch_size", "=", "batch_size", ")", "\n", "\n", "if", "remove_non_empty", ":", "\n", "            ", "self", ".", "train_dataset", "=", "get_nonempty_subset", "(", "self", ".", "dataset", ",", "'train'", ",", "transform", "=", "preprocess", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "train_dataset", "=", "self", ".", "dataset", ".", "get_subset", "(", "'train'", ",", "transform", "=", "preprocess", ")", "\n", "\n", "", "if", "remove_non_empty", ":", "\n", "            ", "self", ".", "test_dataset", "=", "get_nonempty_subset", "(", "self", ".", "dataset", ",", "subset", ",", "transform", "=", "preprocess", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "test_dataset", "=", "self", ".", "dataset", ".", "get_subset", "(", "subset", ",", "transform", "=", "preprocess", ")", "\n", "\n", "", "self", ".", "test_loader", "=", "get_eval_loader", "(", "\n", "\"standard\"", ",", "self", ".", "test_dataset", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "batch_size", "=", "batch_size", ")", "\n", "\n", "labels_csv", "=", "pathlib", ".", "Path", "(", "__file__", ")", ".", "parent", "/", "'iwildcam_metadata'", "/", "'labels.csv'", "\n", "df", "=", "pd", ".", "read_csv", "(", "labels_csv", ")", "\n", "df", "=", "df", "[", "df", "[", "'y'", "]", "<", "99999", "]", "\n", "\n", "self", ".", "classnames", "=", "[", "s", ".", "lower", "(", ")", "for", "s", "in", "list", "(", "df", "[", "'english'", "]", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.iwildcam.IWildCam.post_loop_metrics": [[75, 79], ["preds.argmax().view_as.argmax().view_as.argmax().view_as", "iwildcam.IWildCam.dataset.eval", "preds.argmax().view_as.argmax().view_as.argmax"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.zeroshot.eval"], ["", "def", "post_loop_metrics", "(", "self", ",", "labels", ",", "preds", ",", "metadata", ",", "args", ")", ":", "\n", "        ", "preds", "=", "preds", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "view_as", "(", "labels", ")", "\n", "results", "=", "self", ".", "dataset", ".", "eval", "(", "preds", ",", "labels", ",", "metadata", ")", "\n", "return", "results", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.iwildcam.IWildCamID.__init__": [[82, 85], ["iwildcam.IWildCam.__init__"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.CLIP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "kwargs", "[", "'subset'", "]", "=", "'id_test'", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.iwildcam.IWildCamOOD.__init__": [[88, 91], ["iwildcam.IWildCam.__init__"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.CLIP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "kwargs", "[", "'subset'", "]", "=", "'test'", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.iwildcam.IWildCamNonEmpty.__init__": [[94, 97], ["iwildcam.IWildCam.__init__"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.CLIP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "kwargs", "[", "'subset'", "]", "=", "'train'", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.iwildcam.IWildCamIDNonEmpty.__init__": [[100, 103], ["iwildcam.IWildCam.__init__"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.CLIP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "kwargs", "[", "'subset'", "]", "=", "'id_test'", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.iwildcam.IWildCamOODNonEmpty.__init__": [[106, 109], ["iwildcam.IWildCam.__init__"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.CLIP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "kwargs", "[", "'subset'", "]", "=", "'test'", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.iwildcam.get_mask_non_empty": [[12, 21], ["pandas.read_csv", "os.path.expanduser", "open", "json.load"], "function", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.clip.load"], ["def", "get_mask_non_empty", "(", "dataset", ")", ":", "\n", "    ", "metadf", "=", "pd", ".", "read_csv", "(", "dataset", ".", "_data_dir", "/", "'metadata.csv'", ")", "\n", "filename", "=", "os", ".", "path", ".", "expanduser", "(", "dataset", ".", "_data_dir", "/", "'iwildcam2020_megadetector_results.json'", ")", "\n", "with", "open", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "md_data", "=", "json", ".", "load", "(", "f", ")", "\n", "", "id_to_maxdet", "=", "{", "x", "[", "'id'", "]", ":", "x", "[", "'max_detection_conf'", "]", "for", "x", "in", "md_data", "[", "'images'", "]", "}", "\n", "threshold", "=", "0.95", "\n", "mask_non_empty", "=", "[", "id_to_maxdet", "[", "x", "]", ">=", "threshold", "for", "x", "in", "metadf", "[", "'image_id'", "]", "]", "\n", "return", "mask_non_empty", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.iwildcam.get_nonempty_subset": [[23, 39], ["iwildcam.get_mask_non_empty", "wilds.datasets.wilds_dataset.WILDSSubset", "ValueError", "numpy.where", "int", "numpy.sort", "numpy.round", "numpy.random.permutation", "float", "len"], "function", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.iwildcam.get_mask_non_empty"], ["", "def", "get_nonempty_subset", "(", "dataset", ",", "split", ",", "frac", "=", "1.0", ",", "transform", "=", "None", ")", ":", "\n", "    ", "if", "split", "not", "in", "dataset", ".", "split_dict", ":", "\n", "        ", "raise", "ValueError", "(", "f\"Split {split} not found in dataset's split_dict.\"", ")", "\n", "", "split_mask", "=", "dataset", ".", "split_array", "==", "dataset", ".", "split_dict", "[", "split", "]", "\n", "\n", "# intersect split mask with non_empty. here is the only place this fn differs", "\n", "# from https://github.com/p-lambda/wilds/blob/main/wilds/datasets/wilds_dataset.py#L56", "\n", "mask_non_empty", "=", "get_mask_non_empty", "(", "dataset", ")", "\n", "split_mask", "=", "split_mask", "&", "mask_non_empty", "\n", "\n", "split_idx", "=", "np", ".", "where", "(", "split_mask", ")", "[", "0", "]", "\n", "if", "frac", "<", "1.0", ":", "\n", "        ", "num_to_retain", "=", "int", "(", "np", ".", "round", "(", "float", "(", "len", "(", "split_idx", ")", ")", "*", "frac", ")", ")", "\n", "split_idx", "=", "np", ".", "sort", "(", "np", ".", "random", ".", "permutation", "(", "split_idx", ")", "[", ":", "num_to_retain", "]", ")", "\n", "", "subset", "=", "WILDSSubset", "(", "dataset", ",", "split_idx", ",", "transform", ")", "\n", "return", "subset", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet.ImageNet.__init__": [[9, 23], ["os.path.expanduser", "imagenet_classnames.get_classnames", "imagenet.ImageNet.populate_train", "imagenet.ImageNet.populate_test"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet_classnames.get_classnames", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet_sketch.ImageNetSketch.populate_train", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet.ImageNet.populate_test"], ["    ", "def", "__init__", "(", "self", ",", "\n", "preprocess", ",", "\n", "location", "=", "os", ".", "path", ".", "expanduser", "(", "'~/data'", ")", ",", "\n", "batch_size", "=", "32", ",", "\n", "num_workers", "=", "32", ",", "\n", "classnames", "=", "'openai'", ")", ":", "\n", "        ", "self", ".", "preprocess", "=", "preprocess", "\n", "self", ".", "location", "=", "location", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "num_workers", "=", "num_workers", "\n", "self", ".", "classnames", "=", "get_classnames", "(", "classnames", ")", "\n", "\n", "self", ".", "populate_train", "(", ")", "\n", "self", ".", "populate_test", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet.ImageNet.populate_train": [[24, 37], ["os.path.join", "common.ImageFolderWithPaths", "imagenet.ImageNet.get_train_sampler", "torch.utils.data.DataLoader", "imagenet.ImageNet.name"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet.ImageNetK.get_train_sampler", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet.ImageNet.name"], ["", "def", "populate_train", "(", "self", ")", ":", "\n", "        ", "traindir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "location", ",", "self", ".", "name", "(", ")", ",", "'train'", ")", "\n", "self", ".", "train_dataset", "=", "ImageFolderWithPaths", "(", "\n", "traindir", ",", "\n", "transform", "=", "self", ".", "preprocess", ")", "\n", "sampler", "=", "self", ".", "get_train_sampler", "(", ")", "\n", "kwargs", "=", "{", "'shuffle'", ":", "True", "}", "if", "sampler", "is", "None", "else", "{", "}", "\n", "self", ".", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "self", ".", "train_dataset", ",", "\n", "sampler", "=", "sampler", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "num_workers", "=", "self", ".", "num_workers", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet.ImageNet.populate_test": [[39, 46], ["imagenet.ImageNet.get_test_dataset", "torch.utils.data.DataLoader", "imagenet.ImageNet.get_test_sampler"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.objectnet.ObjectNetValClasses.get_test_dataset", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.objectnet.ObjectNetValClasses.get_test_sampler"], ["", "def", "populate_test", "(", "self", ")", ":", "\n", "        ", "self", ".", "test_dataset", "=", "self", ".", "get_test_dataset", "(", ")", "\n", "self", ".", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "self", ".", "test_dataset", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "num_workers", "=", "self", ".", "num_workers", ",", "\n", "sampler", "=", "self", ".", "get_test_sampler", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet.ImageNet.get_test_path": [[48, 53], ["os.path.join", "imagenet.ImageNet.name", "os.path.exists", "os.path.join", "imagenet.ImageNet.name"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet.ImageNet.name", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet.ImageNet.name"], ["", "def", "get_test_path", "(", "self", ")", ":", "\n", "        ", "test_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "location", ",", "self", ".", "name", "(", ")", ",", "'val_in_folder'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "test_path", ")", ":", "\n", "            ", "test_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "location", ",", "self", ".", "name", "(", ")", ",", "'val'", ")", "\n", "", "return", "test_path", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet.ImageNet.get_train_sampler": [[54, 56], ["None"], "methods", ["None"], ["", "def", "get_train_sampler", "(", "self", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet.ImageNet.get_test_sampler": [[57, 59], ["None"], "methods", ["None"], ["", "def", "get_test_sampler", "(", "self", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet.ImageNet.get_test_dataset": [[60, 62], ["common.ImageFolderWithPaths", "imagenet.ImageNet.get_test_path"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet_sketch.ImageNetSketch.get_test_path"], ["", "def", "get_test_dataset", "(", "self", ")", ":", "\n", "        ", "return", "ImageFolderWithPaths", "(", "self", ".", "get_test_path", "(", ")", ",", "transform", "=", "self", ".", "preprocess", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet.ImageNet.name": [[63, 65], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'imagenet'", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet.ImageNetTrain.get_test_dataset": [[68, 70], ["None"], "methods", ["None"], ["    ", "def", "get_test_dataset", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet.ImageNetK.get_train_sampler": [[73, 87], ["numpy.zeros", "numpy.array", "range", "idxs.astype.astype.astype", "common.SubsetSampler", "len", "len", "numpy.zeros", "numpy.random.shuffle", "numpy.where", "imagenet.ImageNetK.k"], "methods", ["None"], ["    ", "def", "get_train_sampler", "(", "self", ")", ":", "\n", "        ", "idxs", "=", "np", ".", "zeros", "(", "len", "(", "self", ".", "train_dataset", ".", "targets", ")", ")", "\n", "target_array", "=", "np", ".", "array", "(", "self", ".", "train_dataset", ".", "targets", ")", "\n", "for", "c", "in", "range", "(", "1000", ")", ":", "\n", "            ", "m", "=", "target_array", "==", "c", "\n", "n", "=", "len", "(", "idxs", "[", "m", "]", ")", "\n", "arr", "=", "np", ".", "zeros", "(", "n", ")", "\n", "arr", "[", ":", "self", ".", "k", "(", ")", "]", "=", "1", "\n", "np", ".", "random", ".", "shuffle", "(", "arr", ")", "\n", "idxs", "[", "m", "]", "=", "arr", "\n", "\n", "", "idxs", "=", "idxs", ".", "astype", "(", "'int'", ")", "\n", "sampler", "=", "SubsetSampler", "(", "np", ".", "where", "(", "idxs", ")", "[", "0", "]", ")", "\n", "return", "sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet.ImageNetSubsample.__init__": [[98, 102], ["imagenet.ImageNet.__init__", "imagenet.ImageNetSubsample.get_class_sublist_and_mask"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.CLIP.__init__", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet_r.ImageNetR.get_class_sublist_and_mask"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "class_sublist", ",", "self", ".", "class_sublist_mask", "=", "self", ".", "get_class_sublist_and_mask", "(", ")", "\n", "self", ".", "classnames", "=", "[", "self", ".", "classnames", "[", "i", "]", "for", "i", "in", "class_sublist", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet.ImageNetSubsample.get_class_sublist_and_mask": [[103, 105], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_class_sublist_and_mask", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet.ImageNetSubsample.populate_train": [[106, 108], ["None"], "methods", ["None"], ["", "def", "populate_train", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet.ImageNetSubsample.project_logits": [[109, 111], ["imagenet.ImageNetSubsample.project_logits"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.objectnet.ObjectNetBase.project_logits"], ["", "def", "project_logits", "(", "self", ",", "logits", ",", "device", ")", ":", "\n", "        ", "return", "project_logits", "(", "logits", ",", "self", ".", "class_sublist_mask", ",", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet.ImageNetSubsampleValClasses.get_class_sublist_and_mask": [[113, 115], ["NotImplementedError"], "methods", ["None"], ["    ", "def", "get_class_sublist_and_mask", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet.ImageNetSubsampleValClasses.populate_train": [[116, 118], ["None"], "methods", ["None"], ["", "def", "populate_train", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet.ImageNetSubsampleValClasses.get_test_sampler": [[119, 126], ["imagenet.ImageNetSubsampleValClasses.get_class_sublist_and_mask", "sorted", "common.SubsetSampler", "range"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet_r.ImageNetR.get_class_sublist_and_mask"], ["", "def", "get_test_sampler", "(", "self", ")", ":", "\n", "        ", "self", ".", "class_sublist", ",", "self", ".", "class_sublist_mask", "=", "self", ".", "get_class_sublist_and_mask", "(", ")", "\n", "idx_subsample_list", "=", "[", "range", "(", "x", "*", "50", ",", "(", "x", "+", "1", ")", "*", "50", ")", "for", "x", "in", "self", ".", "class_sublist", "]", "\n", "idx_subsample_list", "=", "sorted", "(", "[", "item", "for", "sublist", "in", "idx_subsample_list", "for", "item", "in", "sublist", "]", ")", "\n", "\n", "sampler", "=", "SubsetSampler", "(", "idx_subsample_list", ")", "\n", "return", "sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet.ImageNetSubsampleValClasses.project_labels": [[127, 130], ["torch.LongTensor().to", "imagenet.ImageNetSubsampleValClasses.class_sublist.index", "int", "torch.LongTensor"], "methods", ["None"], ["", "def", "project_labels", "(", "self", ",", "labels", ",", "device", ")", ":", "\n", "        ", "projected_labels", "=", "[", "self", ".", "class_sublist", ".", "index", "(", "int", "(", "label", ")", ")", "for", "label", "in", "labels", "]", "\n", "return", "torch", ".", "LongTensor", "(", "projected_labels", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet.ImageNetSubsampleValClasses.project_logits": [[131, 133], ["imagenet.ImageNetSubsampleValClasses.project_logits"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.objectnet.ObjectNetBase.project_logits"], ["", "def", "project_logits", "(", "self", ",", "logits", ",", "device", ")", ":", "\n", "        ", "return", "project_logits", "(", "logits", ",", "self", ".", "class_sublist_mask", ",", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet.project_logits": [[89, 96], ["isinstance", "logits.size", "sum", "logits[].to", "logits.to", "imagenet.project_logits"], "function", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.objectnet.ObjectNetBase.project_logits"], ["", "", "def", "project_logits", "(", "logits", ",", "class_sublist_mask", ",", "device", ")", ":", "\n", "    ", "if", "isinstance", "(", "logits", ",", "list", ")", ":", "\n", "        ", "return", "[", "project_logits", "(", "l", ",", "class_sublist_mask", ",", "device", ")", "for", "l", "in", "logits", "]", "\n", "", "if", "logits", ".", "size", "(", "1", ")", ">", "sum", "(", "class_sublist_mask", ")", ":", "\n", "        ", "return", "logits", "[", ":", ",", "class_sublist_mask", "]", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "        ", "return", "logits", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.fmow.FMOW.__init__": [[11, 41], ["os.path.expanduser", "wilds.get_dataset", "fmow.FMOW.dataset.get_subset", "wilds.common.data_loaders.get_train_loader", "fmow.FMOW.dataset.get_subset", "wilds.common.data_loaders.get_eval_loader"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "preprocess", ",", "\n", "location", "=", "os", ".", "path", ".", "expanduser", "(", "'~/data'", ")", ",", "\n", "batch_size", "=", "128", ",", "\n", "num_workers", "=", "16", ",", "\n", "subset", "=", "'test'", ",", "\n", "classnames", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "\n", "        ", "self", ".", "dataset", "=", "wilds", ".", "get_dataset", "(", "dataset", "=", "'fmow'", ",", "root_dir", "=", "location", ")", "\n", "\n", "self", ".", "train_dataset", "=", "self", ".", "dataset", ".", "get_subset", "(", "'train'", ",", "transform", "=", "preprocess", ")", "\n", "self", ".", "train_loader", "=", "get_train_loader", "(", "\"standard\"", ",", "self", ".", "train_dataset", ",", "num_workers", "=", "num_workers", ",", "batch_size", "=", "batch_size", ")", "\n", "\n", "self", ".", "test_dataset", "=", "self", ".", "dataset", ".", "get_subset", "(", "self", ".", "test_subset", ",", "transform", "=", "preprocess", ")", "\n", "self", ".", "test_loader", "=", "get_eval_loader", "(", "\"standard\"", ",", "self", ".", "test_dataset", ",", "num_workers", "=", "num_workers", ",", "batch_size", "=", "batch_size", ")", "\n", "\n", "self", ".", "classnames", "=", "[", "\n", "\"airport\"", ",", "\"airport_hangar\"", ",", "\"airport_terminal\"", ",", "\"amusement_park\"", ",", "\"aquaculture\"", ",", "\n", "\"archaeological_site\"", ",", "\"barn\"", ",", "\"border_checkpoint\"", ",", "\"burial_site\"", ",", "\"car_dealership\"", ",", "\n", "\"construction_site\"", ",", "\"crop_field\"", ",", "\"dam\"", ",", "\"debris_or_rubble\"", ",", "\"educational_institution\"", ",", "\n", "\"electric_substation\"", ",", "\"factory_or_powerplant\"", ",", "\"fire_station\"", ",", "\"flooded_road\"", ",", "\"fountain\"", ",", "\n", "\"gas_station\"", ",", "\"golf_course\"", ",", "\"ground_transportation_station\"", ",", "\"helipad\"", ",", "\"hospital\"", ",", "\n", "\"impoverished_settlement\"", ",", "\"interchange\"", ",", "\"lake_or_pond\"", ",", "\"lighthouse\"", ",", "\"military_facility\"", ",", "\n", "\"multi-unit_residential\"", ",", "\"nuclear_powerplant\"", ",", "\"office_building\"", ",", "\"oil_or_gas_facility\"", ",", "\"park\"", ",", "\n", "\"parking_lot_or_garage\"", ",", "\"place_of_worship\"", ",", "\"police_station\"", ",", "\"port\"", ",", "\"prison\"", ",", "\"race_track\"", ",", "\n", "\"railway_bridge\"", ",", "\"recreational_facility\"", ",", "\"road_bridge\"", ",", "\"runway\"", ",", "\"shipyard\"", ",", "\"shopping_mall\"", ",", "\n", "\"single-unit_residential\"", ",", "\"smokestack\"", ",", "\"solar_farm\"", ",", "\"space_facility\"", ",", "\"stadium\"", ",", "\"storage_tank\"", ",", "\n", "\"surface_mine\"", ",", "\"swimming_pool\"", ",", "\"toll_booth\"", ",", "\"tower\"", ",", "\"tunnel_opening\"", ",", "\"waste_disposal\"", ",", "\n", "\"water_treatment_facility\"", ",", "\"wind_farm\"", ",", "\"zoo\"", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.fmow.FMOW.post_loop_metrics": [[43, 48], ["torch.stack", "preds.argmax().view_as.argmax().view_as.argmax().view_as", "fmow.FMOW.dataset.eval", "preds.argmax().view_as.argmax().view_as.argmax"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.zeroshot.eval"], ["", "def", "post_loop_metrics", "(", "self", ",", "labels", ",", "preds", ",", "metadata", ",", "args", ")", ":", "\n", "        ", "metadata", "=", "torch", ".", "stack", "(", "metadata", ")", "\n", "preds", "=", "preds", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "view_as", "(", "labels", ")", "\n", "results", "=", "self", ".", "dataset", ".", "eval", "(", "preds", ",", "labels", ",", "metadata", ")", "\n", "return", "results", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.fmow.FMOWID.__init__": [[50, 53], ["fmow.FMOW.__init__"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.CLIP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "test_subset", "=", "'id_test'", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.fmow.FMOWOOD.__init__": [[55, 58], ["fmow.FMOW.__init__"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.CLIP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "test_subset", "=", "'test'", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.cifar10.CIFAR10.__init__": [[13, 37], ["os.path.expanduser", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "preprocess", ",", "\n", "location", "=", "os", ".", "path", ".", "expanduser", "(", "'~/data'", ")", ",", "\n", "batch_size", "=", "128", ",", "\n", "num_workers", "=", "16", ",", "\n", "classnames", "=", "None", ")", ":", "\n", "\n", "\n", "        ", "self", ".", "train_dataset", "=", "PyTorchCIFAR10", "(", "\n", "root", "=", "location", ",", "download", "=", "True", ",", "train", "=", "True", ",", "transform", "=", "preprocess", "\n", ")", "\n", "\n", "self", ".", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "self", ".", "train_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "num_workers", "\n", ")", "\n", "\n", "self", ".", "test_dataset", "=", "PyTorchCIFAR10", "(", "\n", "root", "=", "location", ",", "download", "=", "True", ",", "train", "=", "False", ",", "transform", "=", "preprocess", "\n", ")", "\n", "\n", "self", ".", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "self", ".", "test_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "num_workers", "\n", ")", "\n", "\n", "self", ".", "classnames", "=", "self", ".", "test_dataset", ".", "classes", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.cifar10.BasicVisionDataset.__init__": [[44, 52], ["torchvision.datasets.VisionDataset.__init__", "transform.transforms.insert", "len", "len"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.CLIP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "images", ",", "targets", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ")", ":", "\n", "        ", "if", "transform", "is", "not", "None", ":", "\n", "            ", "transform", ".", "transforms", ".", "insert", "(", "0", ",", "convert", ")", "\n", "", "super", "(", "BasicVisionDataset", ",", "self", ")", ".", "__init__", "(", "root", "=", "None", ",", "transform", "=", "transform", ",", "target_transform", "=", "target_transform", ")", "\n", "assert", "len", "(", "images", ")", "==", "len", "(", "targets", ")", "\n", "\n", "self", ".", "images", "=", "images", "\n", "self", ".", "targets", "=", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.cifar10.BasicVisionDataset.__getitem__": [[53, 55], ["cifar10.BasicVisionDataset.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "transform", "(", "self", ".", "images", "[", "index", "]", ")", ",", "self", ".", "targets", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.cifar10.BasicVisionDataset.__len__": [[56, 58], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "targets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.cifar10.CIFAR101.__init__": [[60, 88], ["os.path.expanduser", "os.path.join", "numpy.load", "numpy.load", "torch.cuda.is_available", "cifar10.BasicVisionDataset", "torch.utils.data.DataLoader", "os.path.join", "os.path.join", "torch.Tensor().long", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.clip.load", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.clip.load"], ["    ", "def", "__init__", "(", "self", ",", "\n", "preprocess", ",", "\n", "location", "=", "os", ".", "path", ".", "expanduser", "(", "'~/data'", ")", ",", "\n", "batch_size", "=", "128", ",", "\n", "num_workers", "=", "16", ",", "\n", "classnames", "=", "None", ")", ":", "\n", "\n", "        ", "data_root", "=", "os", ".", "path", ".", "join", "(", "location", ",", "\"CIFAR-10.1\"", ")", "\n", "data", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "'cifar10.1_v6_data.npy'", ")", ",", "allow_pickle", "=", "True", ")", "\n", "labels", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "'cifar10.1_v6_labels.npy'", ")", ",", "allow_pickle", "=", "True", ")", "\n", "\n", "use_cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n", "# Data loading code", "\n", "kwargs", "=", "{", "\"num_workers\"", ":", "num_workers", ",", "\"pin_memory\"", ":", "True", "}", "if", "use_cuda", "else", "{", "}", "\n", "\n", "self", ".", "train_loader", "=", "None", "\n", "\n", "self", ".", "test_dataset", "=", "BasicVisionDataset", "(", "\n", "images", "=", "data", ",", "targets", "=", "torch", ".", "Tensor", "(", "labels", ")", ".", "long", "(", ")", ",", "\n", "transform", "=", "preprocess", ",", "\n", ")", "\n", "\n", "self", ".", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "self", ".", "test_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "**", "kwargs", "\n", ")", "\n", "\n", "self", ".", "classnames", "=", "cifar_classnames", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.cifar10.CIFAR102.__init__": [[91, 123], ["os.path.expanduser", "numpy.load().item", "numpy.load().item", "torch.cuda.is_available", "cifar10.BasicVisionDataset", "torch.utils.data.DataLoader", "numpy.load", "numpy.load", "torch.Tensor().long", "os.path.join", "os.path.join", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.clip.load", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.clip.load"], ["    ", "def", "__init__", "(", "self", ",", "\n", "preprocess", ",", "\n", "location", "=", "os", ".", "path", ".", "expanduser", "(", "'~/data'", ")", ",", "\n", "batch_size", "=", "128", ",", "\n", "num_workers", "=", "16", ",", "\n", "classnames", "=", "None", ")", ":", "\n", "\n", "        ", "train_data", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "location", ",", "\"CIFAR-10.2\"", ",", "'cifar102_train.npy'", ")", ",", "allow_pickle", "=", "True", ")", ".", "item", "(", ")", "\n", "test_data", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "location", ",", "\"CIFAR-10.2\"", ",", "'cifar102_test.npy'", ")", ",", "allow_pickle", "=", "True", ")", ".", "item", "(", ")", "\n", "\n", "\n", "train_data_images", "=", "train_data", "[", "'images'", "]", "\n", "train_data_labels", "=", "train_data", "[", "'labels'", "]", "\n", "\n", "test_data_images", "=", "test_data", "[", "'images'", "]", "\n", "test_data_labels", "=", "test_data", "[", "'labels'", "]", "\n", "\n", "use_cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n", "# Data loading code", "\n", "kwargs", "=", "{", "\"num_workers\"", ":", "num_workers", ",", "\"pin_memory\"", ":", "True", "}", "if", "use_cuda", "else", "{", "}", "\n", "\n", "self", ".", "test_dataset", "=", "BasicVisionDataset", "(", "\n", "images", "=", "test_data_images", ",", "targets", "=", "torch", ".", "Tensor", "(", "test_data_labels", ")", ".", "long", "(", ")", ",", "\n", "transform", "=", "preprocess", ",", "\n", ")", "\n", "\n", "self", ".", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "self", ".", "test_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "**", "kwargs", "\n", ")", "\n", "\n", "self", ".", "classnames", "=", "cifar_classnames", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.cifar10.convert": [[38, 42], ["isinstance", "torchvision.transforms.functional.to_pil_image"], "function", ["None"], ["", "", "def", "convert", "(", "x", ")", ":", "\n", "    ", "if", "isinstance", "(", "x", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "torchvision", ".", "transforms", ".", "functional", ".", "to_pil_image", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.YtbbPmkDataset.__init__": [[270, 302], ["ytbb_robust.load_anchor_annotations", "ytbb_robust.load_pmk_annotations", "collections.defaultdict", "collections.defaultdict", "ytbb_robust.split_pmk_key", "ytbb_robust.YtbbPmkDataset.pmk_valid_keys[].add", "ytbb_robust.split_pmk_key", "ytbb_robust.YtbbPmkDataset.pmk_invalid_keys[].add"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.load_anchor_annotations", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.load_pmk_annotations", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.split_pmk_key", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.split_pmk_key"], ["    ", "def", "__init__", "(", "self", ",", "anchor_annotations", ",", "pmk_annotations", ")", ":", "\n", "# Split anchors into good and bad labels.", "\n", "        ", "anchors_good", ",", "anchors_bad", ",", "anchor_label_list", "=", "load_anchor_annotations", "(", "\n", "anchor_annotations", ")", "\n", "\n", "# Collect final anchor labels.", "\n", "self", ".", "anchor_valid_annotations", "=", "anchors_good", "\n", "self", ".", "anchor_invalid_annotations", "=", "anchors_bad", "\n", "self", ".", "anchor_label_list", "=", "anchor_label_list", "\n", "\n", "valid_pmk", ",", "invalid_pmk", ",", "bad_anchors", ",", "pmk_label_list", "=", "(", "\n", "load_pmk_annotations", "(", "pmk_annotations", ")", ")", "\n", "\n", "self", ".", "anchor_invalid_annotations", "+=", "[", "\n", "x", "for", "x", "in", "self", ".", "anchor_valid_annotations", "if", "x", "[", "'key'", "]", "in", "bad_anchors", "\n", "]", "\n", "self", ".", "anchor_valid_annotations", "=", "[", "\n", "x", "for", "x", "in", "self", ".", "anchor_valid_annotations", "\n", "if", "x", "[", "'key'", "]", "not", "in", "bad_anchors", "\n", "]", "\n", "\n", "self", ".", "pmk_valid_keys", "=", "defaultdict", "(", "set", ")", "\n", "for", "annotation", "in", "valid_pmk", ":", "\n", "            ", "anchor_key", ",", "pmk_key", "=", "split_pmk_key", "(", "annotation", "[", "'key'", "]", ")", "\n", "self", ".", "pmk_valid_keys", "[", "anchor_key", "]", ".", "add", "(", "annotation", "[", "'key'", "]", ")", "\n", "\n", "", "self", ".", "pmk_invalid_keys", "=", "defaultdict", "(", "set", ")", "\n", "for", "annotation", "in", "invalid_pmk", ":", "\n", "            ", "anchor_key", ",", "pmk_key", "=", "split_pmk_key", "(", "annotation", "[", "'key'", "]", ")", "\n", "self", ".", "pmk_invalid_keys", "[", "anchor_key", "]", ".", "add", "(", "annotation", "[", "'key'", "]", ")", "\n", "\n", "", "self", ".", "pmk_label_list", "=", "pmk_label_list", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.YtbbPmkDataset.get_anchor_labels": [[303, 340], ["ytbb_robust.annotations_to_ytbb_labels", "annotations_to_ytbb_labels.items", "open", "csv.DictReader", "isinstance", "labels.update", "int", "key.split", "pathlib.Path", "pathlib.Path", "pathlib.Path", "pathlib.Path"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.annotations_to_ytbb_labels"], ["", "def", "get_anchor_labels", "(", "self", ",", "\n", "reverse_ytbb_class_index", ",", "\n", "reviewed", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            initial_labels (Dict[str, Set[int]]): Initial YTBB labels. We\n                require these because the loaded annotations are only\n                guaranteed to contain labels that were _added_ to each\n                anchor.\n        Returns:\n            anchor_labels: Map anchor_key to list of YTBB labels.\n        \"\"\"", "\n", "initial_labels_csv", "=", "(", "pathlib", ".", "Path", "(", "\n", "__file__", ")", ".", "parent", "/", "'ytbb-robust_metadata/ytbb_robustness_test_anchors_full.csv'", ")", ".", "resolve", "(", ")", "\n", "\n", "with", "open", "(", "initial_labels_csv", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "reader", "=", "csv", ".", "DictReader", "(", "f", ")", "\n", "initial_labels", "=", "{", "}", "\n", "for", "row", "in", "reader", ":", "\n", "                ", "label", "=", "int", "(", "row", "[", "\"label\"", "]", ")", "\n", "if", "label", "==", "23", ":", "\n", "                    ", "label", "=", "22", "\n", "", "elif", "label", "==", "22", ":", "\n", "                    ", "label", "=", "23", "\n", "", "initial_labels", "[", "f'{row[\"ytid\"]}_{row[\"time_ms\"]}'", "]", "=", "{", "label", "}", "\n", "\n", "", "", "annotations", "=", "self", ".", "anchor_valid_annotations", "\n", "if", "not", "reviewed", ":", "\n", "            ", "annotations", "=", "annotations", "+", "self", ".", "anchor_invalid_annotations", "\n", "", "anchor_labels", "=", "annotations_to_ytbb_labels", "(", "annotations", ",", "\n", "self", ".", "anchor_label_list", ",", "\n", "reverse_ytbb_class_index", ")", "\n", "for", "key", ",", "labels", "in", "anchor_labels", ".", "items", "(", ")", ":", "\n", "            ", "anchor_label_key", "=", "key", ".", "split", "(", "'/'", ")", "[", "0", "]", "\n", "assert", "isinstance", "(", "initial_labels", "[", "anchor_label_key", "]", ",", "set", ")", "\n", "labels", ".", "update", "(", "initial_labels", "[", "anchor_label_key", "]", ")", "\n", "", "return", "anchor_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.YtbbPmkDataset.get_pmk": [[341, 365], ["ytbb_robust.parse_frame_key", "range", "ytbb_robust.get_pmk_key"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.parse_frame_key", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.get_pmk_key"], ["", "def", "get_pmk", "(", "self", ",", "k", "=", "10", ",", "reviewed", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Returns:\n            pmk_sets (Dict[str, Dict[int, str]]): Map anchor keys to dict\n                mapping offset to pmk frame key. If reviewed is True, then\n                the mapping will only contain valid (i.e., similar) pmk frames.\n        \"\"\"", "\n", "pmk_sets", "=", "{", "}", "\n", "for", "anchor", "in", "self", ".", "anchor_valid_annotations", ":", "\n", "            ", "anchor_key", "=", "anchor", "[", "'key'", "]", "\n", "video", ",", "anchor_index", ",", "anchor_ms", "=", "parse_frame_key", "(", "\n", "anchor_key", ")", "\n", "pmk_sets", "[", "anchor_key", "]", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "-", "k", ",", "k", "+", "1", ")", ":", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "pmk_index", "=", "anchor_index", "+", "i", "\n", "pmk_key", "=", "get_pmk_key", "(", "anchor_key", ",", "pmk_index", ")", "\n", "full_pmk_key", "=", "f'{anchor_key},{pmk_key}'", "\n", "if", "(", "reviewed", "and", "\n", "full_pmk_key", "not", "in", "self", ".", "pmk_valid_keys", "[", "anchor_key", "]", ")", ":", "\n", "                    ", "continue", "\n", "", "pmk_sets", "[", "anchor_key", "]", "[", "i", "]", "=", "pmk_key", "\n", "", "", "return", "pmk_sets", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.YtbbRobustDataset.__init__": [[434, 466], ["torchvision.ImageFolder.__init__", "pmk_dataset.get_anchor_labels", "pmk_dataset.get_pmk", "pmk_dataset.get_pmk", "set", "set", "range", "pmk_dataset.get_anchor_labels.keys", "len", "pmk_dataset.get_pmk.values", "x.values", "pmk_dataset.get_pmk.values", "x.values", "list", "set", "d[].split", "set.add", "enumerate", "set", "set", "pm0_frames[].values", "pm10_frames[].values"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.CLIP.__init__", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.YtbbPmkDataset.get_anchor_labels", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.YtbbPmkDataset.get_pmk", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.YtbbPmkDataset.get_pmk"], ["    ", "def", "__init__", "(", "self", ",", "pmk_dataset", ",", "rev_ytbb_class_index", ",", "path", ",", "transform", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "path", ",", "transform", "=", "transform", ")", "\n", "anchor_labels", "=", "pmk_dataset", ".", "get_anchor_labels", "(", "rev_ytbb_class_index", ",", "reviewed", "=", "True", ")", "\n", "pm10_frames", "=", "pmk_dataset", ".", "get_pmk", "(", "k", "=", "10", ",", "reviewed", "=", "True", ")", "\n", "pm0_frames", "=", "pmk_dataset", ".", "get_pmk", "(", "k", "=", "0", ",", "reviewed", "=", "True", ")", "\n", "# Collect predictions by key", "\n", "valid_pm10_keys", "=", "{", "key", "for", "x", "in", "pm10_frames", ".", "values", "(", ")", "for", "key", "in", "x", ".", "values", "(", ")", "}", "\n", "valid_pm0_keys", "=", "{", "key", "for", "x", "in", "pm0_frames", ".", "values", "(", ")", "for", "key", "in", "x", ".", "values", "(", ")", "}", "\n", "valid_anchor_keys", "=", "set", "(", "anchor_labels", ".", "keys", "(", ")", ")", "\n", "valid_keys", "=", "valid_pm0_keys", "|", "valid_pm10_keys", "|", "valid_anchor_keys", "\n", "\n", "self", ".", "labels", "=", "{", "}", "\n", "for", "anchor", "in", "valid_anchor_keys", ":", "\n", "# NOTE: This dataset uses muiltiple lables.", "\n", "# Here, we are using only the first one for compatibility", "\n", "# with other datasets.", "\n", "# This should *not* be used for computing metrics such", "\n", "# as accuracy, only for visualization / debugging purposes.", "\n", "            ", "label", "=", "list", "(", "anchor_labels", "[", "anchor", "]", ")", "[", "0", "]", "\n", "keys", "=", "(", "set", "(", "pm0_frames", "[", "anchor", "]", ".", "values", "(", ")", ")", "|", "set", "(", "pm10_frames", "[", "anchor", "]", ".", "values", "(", ")", ")", "|", "set", "(", "[", "anchor", "]", ")", ")", "\n", "for", "key", "in", "keys", ":", "\n", "                ", "self", ".", "labels", "[", "key", "]", "=", "label", "\n", "\n", "", "", "all_keys", "=", "[", "d", "[", "0", "]", ".", "split", "(", "'ytbb_videos/'", ")", "[", "1", "]", "for", "d", "in", "self", ".", "samples", "]", "\n", "filtered_indexes", "=", "set", "(", ")", "\n", "for", "idx", "in", "range", "(", "len", "(", "self", ".", "samples", ")", ")", ":", "\n", "            ", "if", "all_keys", "[", "idx", "]", "not", "in", "valid_keys", ":", "\n", "                ", "filtered_indexes", ".", "add", "(", "idx", ")", "\n", "\n", "", "", "self", ".", "samples", "=", "[", "\n", "d", "for", "idx", ",", "d", "in", "enumerate", "(", "self", ".", "samples", ")", "if", "idx", "not", "in", "filtered_indexes", "]", "\n", "self", ".", "imgs", "=", "self", ".", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.YtbbRobustDataset.__len__": [[467, 469], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.YtbbRobustDataset.__getitem__": [[470, 480], ["ytbb_robust.YtbbRobustDataset.loader", "ytbb_robust.YtbbRobustDataset.transform", "path.split"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path", ",", "target", "=", "self", ".", "samples", "[", "index", "]", "\n", "sample", "=", "self", ".", "loader", "(", "path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "", "label", "=", "self", ".", "labels", "[", "path", ".", "split", "(", "'ytbb_videos/'", ")", "[", "1", "]", "]", "\n", "return", "{", "\n", "'images'", ":", "sample", ",", "\n", "'labels'", ":", "label", ",", "\n", "'image_paths'", ":", "path", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.YTBBRobustBase.__init__": [[484, 508], ["ytbb_robust.YtbbPmkDataset", "dict", "imagenet.ImageNet.__init__", "open", "sorted", "open", "open", "open", "pathlib.Path", "pathlib.Path", "pathlib.Path", "pathlib.Path", "list", "int", "int", "int", "range", "map", "json.loads().items", "json.loads().items", "json.loads().items", "json.loads().items", "json.loads().items", "json.loads().items", "json.loads().items", "json.loads().items", "json.loads().items", "json.loads().items", "json.loads().items", "json.loads().items", "json.loads().items", "json.loads().items", "json.loads().items", "json.loads().items", "json.loads().items", "json.loads().items", "json.loads().items", "json.loads().items", "json.loads().items", "json.loads().items", "json.loads().items", "json.loads().items", "json.loads().items", "json.loads().items", "json.loads().items", "int", "ytbb_robust.YTBBRobustBase.ytbb_class_index.items", "json.loads().keys", "json.loads().keys", "json.loads().keys", "json.loads().keys", "json.loads().keys", "json.loads().keys", "json.loads().keys", "json.loads().keys", "json.loads().keys", "json.loads", "json.loads", "json.loads", "json.loads", "json.loads", "json.loads", "json.loads", "json.loads", "json.loads", "json.loads", "json.loads", "json.loads", "json.loads", "json.loads", "json.loads", "json.loads", "json.loads", "json.loads", "json.loads", "json.loads", "json.loads", "json.loads", "json.loads", "json.loads", "json.loads", "json.loads", "json.loads", "json.loads", "json.loads", "json.loads", "json.loads", "json.loads", "json.loads", "json.loads", "json.loads", "json.loads", "f.read", "f.read", "f.read", "f.read"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.CLIP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "loc", "=", "pathlib", ".", "Path", "(", "__file__", ")", ".", "parent", "/", "'ytbb-robust_metadata'", "\n", "with", "open", "(", "(", "loc", "/", "'class_idx_map.json'", ")", ".", "resolve", "(", ")", ")", "as", "f", ":", "\n", "            ", "self", ".", "CLASS_IDX_LIST", "=", "sorted", "(", "list", "(", "map", "(", "int", ",", "json", ".", "loads", "(", "f", ".", "read", "(", ")", ")", ".", "keys", "(", ")", ")", ")", ")", "\n", "", "with", "open", "(", "(", "loc", "/", "'class_idx_map.json'", ")", ".", "resolve", "(", ")", ")", "as", "f", ":", "\n", "            ", "self", ".", "CLASS_IDX_MAP", "=", "{", "int", "(", "k", ")", ":", "v", "for", "k", ",", "v", "in", "json", ".", "loads", "(", "f", ".", "read", "(", ")", ")", ".", "items", "(", ")", "}", "\n", "", "with", "open", "(", "(", "loc", "/", "'rev_class_idx_map.json'", ")", ".", "resolve", "(", ")", ")", "as", "f", ":", "\n", "            ", "self", ".", "rev_class_idx_map", "=", "{", "int", "(", "k", ")", ":", "v", "for", "k", ",", "v", "in", "json", ".", "loads", "(", "f", ".", "read", "(", ")", ")", ".", "items", "(", ")", "}", "\n", "\n", "", "self", ".", "anchor_annots", "=", "(", "loc", "/", "'anchor_labels.json'", ")", ".", "resolve", "(", ")", "\n", "self", ".", "pmk_annots", "=", "(", "loc", "/", "'pmk_labels.json'", ")", ".", "resolve", "(", ")", "\n", "self", ".", "pmk_dataset", "=", "YtbbPmkDataset", "(", "[", "self", ".", "anchor_annots", "]", ",", "self", ".", "pmk_annots", ")", "\n", "with", "open", "(", "(", "loc", "/", "'ytbb_class_index.json'", ")", ".", "resolve", "(", ")", ")", "as", "f", ":", "\n", "            ", "self", ".", "ytbb_class_index", "=", "{", "int", "(", "k", ")", ":", "v", "for", "k", ",", "v", "in", "json", ".", "loads", "(", "f", ".", "read", "(", ")", ")", ".", "items", "(", ")", "}", "\n", "\n", "", "self", ".", "rev_ytbb_class_index", "=", "dict", "(", "[", "(", "y", ",", "int", "(", "x", ")", ")", "for", "(", "x", ",", "y", ")", "in", "self", ".", "ytbb_class_index", ".", "items", "(", ")", "]", ")", "\n", "\n", "self", ".", "merge_op", "=", "'max'", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "classnames", "=", "[", "self", ".", "ytbb_class_index", "[", "i", "]", "for", "i", "in", "range", "(", "24", ")", "]", "\n", "\n", "self", ".", "scattered", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.YTBBRobustBase.populate_train": [[509, 511], ["None"], "methods", ["None"], ["", "def", "populate_train", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.YTBBRobustBase.project_logits": [[512, 539], ["torch.tensor.to", "isinstance", "isinstance", "torch.is_tensor", "numpy.zeros", "numpy.zeros", "ytbb_robust.YTBBRobustBase.rev_class_idx_map.items", "torch.tensor", "ytbb_robust.YTBBRobustBase.project_logits", "logits.cpu().numpy.cpu().numpy.cpu().numpy", "enumerate", "numpy.mean().squeeze", "numpy.mean().squeeze", "logits.cpu().numpy.cpu().numpy.cpu", "numpy.median().squeeze", "numpy.median().squeeze", "numpy.mean", "numpy.mean", "numpy.max().squeeze", "numpy.max().squeeze", "numpy.median", "numpy.median", "numpy.sum", "numpy.sum", "Exception", "numpy.max", "numpy.max"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.objectnet.ObjectNetBase.project_logits"], ["", "def", "project_logits", "(", "self", ",", "logits", ",", "device", ")", ":", "\n", "        ", "if", "isinstance", "(", "logits", ",", "list", ")", "or", "isinstance", "(", "logits", ",", "tuple", ")", ":", "\n", "            ", "return", "[", "self", ".", "project_logits", "(", "l", ",", "device", ")", "for", "l", "in", "logits", "]", "\n", "", "if", "logits", ".", "shape", "[", "1", "]", "==", "24", ":", "\n", "            ", "logits_projected", "=", "logits", "\n", "", "else", ":", "\n", "            ", "if", "torch", ".", "is_tensor", "(", "logits", ")", ":", "\n", "                ", "logits", "=", "logits", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "logits_projected", "=", "np", ".", "zeros", "(", "(", "logits", ".", "shape", "[", "0", "]", ",", "24", ")", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "rev_class_idx_map", ".", "items", "(", ")", ":", "\n", "                ", "if", "self", ".", "merge_op", "==", "'mean'", ":", "\n", "                    ", "logits_projected", "[", ":", ",", "k", "]", "=", "np", ".", "mean", "(", "logits", "[", ":", ",", "v", "]", ",", "axis", "=", "1", ")", ".", "squeeze", "(", ")", "\n", "", "elif", "self", ".", "merge_op", "==", "'median'", ":", "\n", "                    ", "logits_projected", "[", ":", ",", "k", "]", "=", "np", ".", "median", "(", "logits", "[", ":", ",", "v", "]", ",", "axis", "=", "1", ")", ".", "squeeze", "(", ")", "\n", "", "elif", "self", ".", "merge_op", "==", "'max'", ":", "\n", "                    ", "logits_projected", "[", ":", ",", "k", "]", "=", "np", ".", "max", "(", "logits", "[", ":", ",", "v", "]", ",", "axis", "=", "1", ")", ".", "squeeze", "(", ")", "\n", "", "elif", "self", ".", "merge_op", "==", "'sum'", ":", "\n", "                    ", "logits_projected", "[", ":", ",", "k", "]", "=", "np", ".", "sum", "(", "logits", "[", ":", ",", "v", "]", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "Exception", "(", "f'unsupported merge operation {merge_op} not allowed'", ")", "\n", "", "", "if", "self", ".", "scattered", ":", "\n", "                ", "for", "i", ",", "j", "in", "enumerate", "(", "[", "6", ",", "8", ",", "14", ",", "18", "]", ")", ":", "\n", "                    ", "logits_projected", "[", ":", ",", "j", "]", "=", "logits", "[", ":", ",", "i", "]", "\n", "", "", "logits_projected", "=", "torch", ".", "tensor", "(", "logits_projected", ")", "\n", "\n", "", "logits_projected", "[", ":", ",", "22", "]", "-=", "1.0e10", "\n", "return", "logits_projected", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.YTBBRobustBase.scatter_weights": [[540, 552], ["ytbb_robust.YTBBRobustBase.rev_class_idx_map.items", "enumerate", "weights.size", "torch.ones().to", "torch.ones", "weights.size"], "methods", ["None"], ["", "def", "scatter_weights", "(", "self", ",", "weights", ")", ":", "\n", "        ", "if", "weights", ".", "size", "(", "1", ")", "==", "1000", ":", "\n", "            ", "return", "weights", "\n", "", "new_weights", "=", "torch", ".", "ones", "(", "(", "weights", ".", "size", "(", "0", ")", ",", "1000", ")", ")", ".", "to", "(", "weights", ".", "device", ")", "*", "-", "10e10", "\n", "for", "k", ",", "v", "in", "self", ".", "rev_class_idx_map", ".", "items", "(", ")", ":", "\n", "            ", "for", "vv", "in", "v", ":", "\n", "                ", "new_weights", "[", ":", ",", "vv", "]", "=", "weights", "[", ":", ",", "k", "]", "\n", "", "", "for", "i", ",", "j", "in", "enumerate", "(", "[", "6", ",", "8", ",", "14", ",", "18", "]", ")", ":", "\n", "            ", "new_weights", "[", ":", ",", "i", "]", "=", "weights", "[", ":", ",", "j", "]", "\n", "", "self", ".", "scattered", "=", "True", "\n", "\n", "return", "new_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.YTBBRobustValClasses.post_loop_metrics": [[556, 560], ["logits.numpy.numpy.numpy", "targets.numpy.numpy.numpy", "ytbb_robust.YTBBRobustValClasses.score_predictions"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.YTBBRobustValClasses.score_predictions"], ["    ", "def", "post_loop_metrics", "(", "self", ",", "targets", ",", "logits", ",", "image_paths", ",", "args", ")", ":", "\n", "        ", "logits", "=", "logits", ".", "numpy", "(", ")", "\n", "targets", "=", "targets", ".", "numpy", "(", ")", "\n", "return", "{", "'acc'", ":", "self", ".", "score_predictions", "(", "logits", ",", "targets", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.YTBBRobustValClasses.score_predictions": [[561, 566], ["logits_projected.argmax", "numpy.sum", "numpy.sum", "len", "numpy.equal", "numpy.equal"], "methods", ["None"], ["", "def", "score_predictions", "(", "self", ",", "logits_projected", ",", "targets", ")", ":", "\n", "        ", "preds", "=", "logits_projected", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "acc", "=", "np", ".", "sum", "(", "np", ".", "equal", "(", "preds", ",", "targets", ")", ")", "\n", "n", "=", "len", "(", "preds", ")", "\n", "return", "acc", "/", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.YTBBRobustValClasses.get_test_dataset": [[567, 569], ["common.ImageFolderWithPaths", "ytbb_robust.YTBBRobustValClasses.get_test_path"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet_sketch.ImageNetSketch.get_test_path"], ["", "def", "get_test_dataset", "(", "self", ")", ":", "\n", "        ", "return", "ImageFolderWithPaths", "(", "self", ".", "get_test_path", "(", ")", ",", "transform", "=", "self", ".", "preprocess", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.YTBBRobustValClasses.get_test_sampler": [[570, 576], ["sorted", "common.SubsetSampler", "range"], "methods", ["None"], ["", "def", "get_test_sampler", "(", "self", ")", ":", "\n", "        ", "idx_subsample_list", "=", "[", "range", "(", "x", "*", "50", ",", "(", "x", "+", "1", ")", "*", "50", ")", "for", "x", "in", "self", ".", "CLASS_IDX_LIST", "]", "\n", "idx_subsample_list", "=", "sorted", "(", "[", "item", "for", "sublist", "in", "idx_subsample_list", "for", "item", "in", "sublist", "]", ")", "\n", "\n", "sampler", "=", "SubsetSampler", "(", "idx_subsample_list", ")", "\n", "return", "sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.YTBBRobustValClasses.project_labels": [[577, 581], ["labels.cpu().numpy.cpu().numpy.cpu().numpy", "torch.tensor().to", "labels.cpu().numpy.cpu().numpy.cpu", "torch.tensor"], "methods", ["None"], ["", "def", "project_labels", "(", "self", ",", "labels", ",", "device", ")", ":", "\n", "        ", "labels", "=", "labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "labels_projected", "=", "torch", ".", "tensor", "(", "[", "self", ".", "CLASS_IDX_MAP", "[", "label", "]", "for", "label", "in", "labels", "]", ")", ".", "to", "(", "device", ")", "\n", "return", "labels_projected", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.YTBBRobust.post_loop_metrics": [[585, 619], ["logits.numpy.numpy.numpy", "targets.numpy.numpy.numpy", "ytbb_robust.YTBBRobust.pmk_dataset.get_anchor_labels", "ytbb_robust.YTBBRobust.pmk_dataset.get_pmk", "set", "ytbb_robust.create_pmk_score", "ytbb_robust.YTBBRobust.pmk_dataset.get_pmk", "ytbb_robust.create_pmk_score", "ytbb_robust.YTBBRobust.keys", "ytbb_robust.YTBBRobust.values", "x.values", "d.split", "zip", "ytbb_robust.YTBBRobust.values", "x.values", "zip"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.YtbbPmkDataset.get_anchor_labels", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.YtbbPmkDataset.get_pmk", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.create_pmk_score", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.YtbbPmkDataset.get_pmk", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.create_pmk_score"], ["    ", "def", "post_loop_metrics", "(", "self", ",", "targets", ",", "logits", ",", "image_paths", ",", "args", ")", ":", "\n", "        ", "logits", "=", "logits", ".", "numpy", "(", ")", "\n", "targets", "=", "targets", ".", "numpy", "(", ")", "\n", "\n", "anchor_labels", "=", "self", ".", "pmk_dataset", ".", "get_anchor_labels", "(", "self", ".", "rev_ytbb_class_index", ",", "reviewed", "=", "True", ")", "\n", "pmk_frames", "=", "self", ".", "pmk_dataset", ".", "get_pmk", "(", "k", "=", "10", ",", "reviewed", "=", "True", ")", "\n", "# Collect predictions by key", "\n", "valid_pmk_keys", "=", "{", "key", "for", "x", "in", "pmk_frames", ".", "values", "(", ")", "for", "key", "in", "x", ".", "values", "(", ")", "}", "\n", "valid_anchor_keys", "=", "set", "(", "anchor_labels", ".", "keys", "(", ")", ")", "\n", "valid_keys", "=", "valid_pmk_keys", "|", "valid_anchor_keys", "\n", "image_paths", "=", "[", "d", ".", "split", "(", "'ytbb_videos/'", ")", "[", "1", "]", "for", "d", "in", "image_paths", "]", "\n", "predictions_by_key", "=", "{", "\n", "k", ":", "p", "\n", "for", "k", ",", "p", "in", "zip", "(", "image_paths", ",", "logits", ")", "if", "k", "in", "valid_keys", "\n", "}", "\n", "\n", "pmk_accuracy", ",", "score_info", "=", "create_pmk_score", "(", "\n", "predictions_by_key", ",", "anchor_labels", ",", "pmk_frames", ")", "\n", "\n", "pm0_frames", "=", "self", ".", "pmk_dataset", ".", "get_pmk", "(", "k", "=", "0", ",", "reviewed", "=", "True", ")", "\n", "valid_pm0_keys", "=", "{", "key", "for", "x", "in", "pm0_frames", ".", "values", "(", ")", "for", "key", "in", "x", ".", "values", "(", ")", "}", "\n", "valid_pm0_keys", "=", "valid_pm0_keys", "|", "valid_anchor_keys", "\n", "predictions_by_key_pm0", "=", "{", "\n", "k", ":", "p", "\n", "for", "k", ",", "p", "in", "zip", "(", "image_paths", ",", "logits", ")", "if", "k", "in", "valid_pm0_keys", "\n", "}", "\n", "pm0_accuracy", ",", "score_info_pm0", "=", "create_pmk_score", "(", "\n", "predictions_by_key_pm0", ",", "anchor_labels", ",", "pm0_frames", ")", "\n", "\n", "metrics_dict", "=", "{", "}", "\n", "metrics_dict", "[", "'pm0'", "]", "=", "pm0_accuracy", "\n", "metrics_dict", "[", "'pm10'", "]", "=", "pmk_accuracy", "\n", "metrics_dict", "[", "'merge_op'", "]", "=", "self", ".", "merge_op", "\n", "return", "metrics_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.YTBBRobust.get_test_dataset": [[620, 625], ["os.path.join", "ytbb_robust.YtbbRobustDataset"], "methods", ["None"], ["", "def", "get_test_dataset", "(", "self", ")", ":", "\n", "        ", "valdir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "location", ",", "'imagenet_vid_ytbb_robust/ytbb-robust/ytbb_videos/'", ")", "\n", "dataset", "=", "YtbbRobustDataset", "(", "\n", "self", ".", "pmk_dataset", ",", "self", ".", "rev_ytbb_class_index", ",", "valdir", ",", "transform", "=", "self", ".", "preprocess", ")", "\n", "return", "dataset", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.load_labels": [[25, 50], ["isinstance", "collections.defaultdict", "collections.defaultdict.items", "open", "json.load", "json.load", "json.load", "enumerate", "len", "logging.debug", "labels[].append"], "function", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.clip.load", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.clip.load", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.clip.load"], ["def", "load_labels", "(", "input_paths", ")", ":", "\n", "    ", "if", "isinstance", "(", "input_paths", ",", "(", "Path", ",", "str", ")", ")", ":", "\n", "        ", "input_paths", "=", "[", "input_paths", "]", "\n", "\n", "# Map data to list of (input_path, label) tuples.", "\n", "", "labels", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "labels_list", "=", "None", "\n", "for", "path", "in", "input_paths", ":", "\n", "        ", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "annotations", "=", "json", ".", "load", "(", "f", ")", "\n", "for", "i", ",", "row", "in", "enumerate", "(", "annotations", "[", "'annotations'", "]", ")", ":", "\n", "                ", "labels", "[", "row", "[", "'key'", "]", "]", ".", "append", "(", "(", "path", ",", "row", ")", ")", "\n", "", "if", "labels_list", "is", "None", ":", "\n", "                ", "labels_list", "=", "annotations", "[", "'labels'", "]", "\n", "", "else", ":", "\n", "                ", "assert", "labels_list", "==", "annotations", "[", "'labels'", "]", "\n", "\n", "", "", "", "for", "key", ",", "key_labels", "in", "labels", ".", "items", "(", ")", ":", "\n", "        ", "if", "len", "(", "key_labels", ")", ">", "1", ":", "\n", "            ", "paths", "=", "[", "x", "[", "0", "]", "for", "x", "in", "key_labels", "]", "\n", "logging", ".", "debug", "(", "\n", "f'{key} labeled multiple times in {paths}; using latest '", "\n", "f'label from {paths[-1]}.'", ")", "\n", "", "labels", "[", "key", "]", "=", "key_labels", "[", "-", "1", "]", "[", "1", "]", "\n", "", "return", "labels", ",", "labels_list", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.filter_labels": [[52, 142], ["enumerate", "set", "set", "set", "logging.info", "logging.info", "logging.info", "labels.items", "logging.getLogger", "set", "logging.info", "logging.info", "set", "valid_rows.append", "ValueError", "label_map.values", "ValueError", "logging.getLogger.info", "invalid_rows.append", "ytbb_robust.filter_labels.validate_label"], "function", ["None"], ["", "def", "filter_labels", "(", "labels", ",", "\n", "labels_list", ",", "\n", "file_logger", "=", "None", ",", "\n", "must_have", "=", "[", "]", ",", "\n", "must_not_have", "=", "[", "]", ",", "\n", "can_have", "=", "[", "]", ",", "\n", "must_have_one_of", "=", "False", ",", "\n", "unspecified_labels_policy", "=", "'error'", ",", "\n", "return_nonmatching", "=", "False", ")", ":", "\n", "    ", "if", "file_logger", "is", "None", ":", "\n", "        ", "file_logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "\n", "", "label_map", "=", "{", "}", "\n", "label_names", "=", "{", "}", "\n", "for", "i", ",", "label", "in", "enumerate", "(", "labels_list", ")", ":", "\n", "        ", "label_map", "[", "label", "]", "=", "i", "\n", "label_names", "[", "i", "]", "=", "label", "\n", "\n", "", "def", "validate_label", "(", "label", ")", ":", "\n", "        ", "if", "label", "not", "in", "label_map", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown label %s, valid labels: %s'", "%", "\n", "(", "label", ",", "label_map", ".", "keys", "(", ")", ")", ")", "\n", "", "return", "True", "\n", "\n", "", "must_have_labels", "=", "set", "(", "\n", "[", "label_map", "[", "x", "]", "for", "x", "in", "must_have", "if", "validate_label", "(", "x", ")", "]", ")", "\n", "must_not_have_labels", "=", "set", "(", "\n", "[", "label_map", "[", "x", "]", "for", "x", "in", "must_not_have", "if", "validate_label", "(", "x", ")", "]", ")", "\n", "can_have_labels", "=", "set", "(", "\n", "[", "label_map", "[", "x", "]", "for", "x", "in", "can_have", "if", "validate_label", "(", "x", ")", "]", ")", "\n", "\n", "unspecified_labels", "=", "(", "\n", "set", "(", "label_map", ".", "values", "(", ")", ")", "-", "\n", "(", "must_have_labels", "|", "must_not_have_labels", "|", "can_have_labels", ")", ")", "\n", "if", "unspecified_labels", ":", "\n", "        ", "if", "unspecified_labels_policy", "==", "'error'", ":", "\n", "            ", "raise", "ValueError", "(", "'Label(s): %s were not specified in any of '", "\n", "'--{must,must-not,can}-have.'", "%", "\n", "[", "label_names", "[", "x", "]", "for", "x", "in", "unspecified_labels", "]", ")", "\n", "", "elif", "unspecified_labels_policy", "==", "'can-have'", ":", "\n", "            ", "can_have_labels", "|=", "unspecified_labels", "\n", "", "elif", "unspecified_labels_policy", "==", "'must-have'", ":", "\n", "            ", "must_have_labels", "|=", "unspecified_labels", "\n", "", "elif", "unspecified_labels_policy", "==", "'must-not-have'", ":", "\n", "            ", "must_not_have_labels", "|=", "unspecified_labels", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown unspecified_labels_policy %s'", "%", "\n", "unspecified_labels_policy", ")", "\n", "\n", "", "", "logging", ".", "info", "(", "'Looking for rows that'", ")", "\n", "if", "must_have_one_of", ":", "\n", "        ", "logging", ".", "info", "(", "'MUST HAVE (one of): %s'", ",", "\n", "[", "label_names", "[", "x", "]", "for", "x", "in", "must_have_labels", "]", ")", "\n", "", "else", ":", "\n", "        ", "logging", ".", "info", "(", "'MUST HAVE: %s'", ",", "\n", "[", "label_names", "[", "x", "]", "for", "x", "in", "must_have_labels", "]", ")", "\n", "", "logging", ".", "info", "(", "'MUST NOT HAVE: %s'", ",", "\n", "[", "label_names", "[", "x", "]", "for", "x", "in", "must_not_have_labels", "]", ")", "\n", "logging", ".", "info", "(", "'CAN HAVE: %s'", ",", "[", "label_names", "[", "x", "]", "for", "x", "in", "can_have_labels", "]", ")", "\n", "\n", "valid_rows", "=", "[", "]", "\n", "invalid_rows", "=", "[", "]", "\n", "for", "key", ",", "row", "in", "labels", ".", "items", "(", ")", ":", "\n", "        ", "row_labels", "=", "set", "(", "row", "[", "'labels'", "]", ")", "\n", "missing_labels", "=", "must_have_labels", "-", "row_labels", "\n", "unwanted_labels", "=", "row_labels", "&", "must_not_have_labels", "\n", "if", "must_have_one_of", ":", "\n", "            ", "if", "missing_labels", "==", "must_have_labels", ":", "\n", "                ", "file_logger", ".", "info", "(", "'Label %s missing labels %s'", "%", "(", "pformat", "(", "\n", "dict", "(", "row", ")", ")", ",", "[", "label_names", "[", "x", "]", "for", "x", "in", "missing_labels", "]", ")", ")", "\n", "invalid_rows", ".", "append", "(", "row", ")", "\n", "continue", "\n", "", "", "elif", "missing_labels", ":", "\n", "            ", "file_logger", ".", "info", "(", "\n", "'Label %s missing labels %s'", "%", "\n", "(", "pformat", "(", "dict", "(", "row", ")", ")", ",", "[", "label_names", "[", "x", "]", "for", "x", "in", "missing_labels", "]", ")", ")", "\n", "invalid_rows", ".", "append", "(", "row", ")", "\n", "continue", "\n", "", "if", "unwanted_labels", ":", "\n", "            ", "file_logger", ".", "info", "(", "\n", "'Label %s has unwanted labels %s'", "%", "\n", "(", "pformat", "(", "dict", "(", "row", ")", ")", ",", "[", "label_names", "[", "x", "]", "\n", "for", "x", "in", "unwanted_labels", "]", ")", ")", "\n", "invalid_rows", ".", "append", "(", "row", ")", "\n", "continue", "\n", "", "valid_rows", ".", "append", "(", "row", ")", "\n", "", "if", "return_nonmatching", ":", "\n", "        ", "return", "valid_rows", ",", "invalid_rows", "\n", "", "else", ":", "\n", "        ", "return", "valid_rows", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.evaluate_pmk": [[144, 163], ["valid_pmk.items", "predictions[].argmax", "pmk_dict.items", "predictions[].argmax"], "function", ["None"], ["", "", "def", "evaluate_pmk", "(", "predictions", ",", "labels", ",", "valid_pmk", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        predictions (Dict[str, np.array])\n        labels (Dict[str, List[int]]): Labels for anchor frames.\n        valid_pmk (Dict[str, Dict[int, str]])\n    \"\"\"", "\n", "anchor_is_correct", "=", "{", "}", "\n", "pmk_is_correct", "=", "{", "}", "\n", "for", "anchor", ",", "pmk_dict", "in", "valid_pmk", ".", "items", "(", ")", ":", "\n", "        ", "anchor_labels", "=", "labels", "[", "anchor", "]", "\n", "anchor_prediction", "=", "predictions", "[", "anchor", "]", ".", "argmax", "(", ")", "\n", "anchor_is_correct", "[", "anchor", "]", "=", "anchor_prediction", "in", "anchor_labels", "\n", "\n", "pmk_is_correct", "[", "anchor", "]", "=", "{", "}", "\n", "for", "offset", ",", "pmk_key", "in", "pmk_dict", ".", "items", "(", ")", ":", "\n", "            ", "pmk_prediction", "=", "predictions", "[", "pmk_key", "]", ".", "argmax", "(", ")", "\n", "pmk_is_correct", "[", "anchor", "]", "[", "pmk_key", "]", "=", "pmk_prediction", "in", "anchor_labels", "\n", "", "", "return", "anchor_is_correct", ",", "pmk_is_correct", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.create_pmk_score": [[165, 232], ["pmk_frames.copy.copy", "ytbb_robust.evaluate_pmk", "len", "sorted", "sorted", "sorted", "max", "len", "max", "len", "max", "anchor_labels.keys", "anchor_is_correct.items", "anchor_is_correct.items", "len", "all", "len", "len", "enumerate", "set", "pmk_is_correct[].values", "random.choice", "pmk_frames[].items", "anchor_is_correct.keys", "len", "list", "correct_frames.append", "incorrect_frames.append", "pmk_is_correct[].values", "pmk_is_correct[].values"], "function", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.evaluate_pmk"], ["", "def", "create_pmk_score", "(", "predictions_by_key", ",", "anchor_labels", ",", "pmk_frames", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        predictions_by_key (Dict[str, np.array])\n        anchor_labels (Dict[str, List[int]]): Labels for anchor frames.\n        pmk_frames (Dict[str, Dict[int, str]]): Map anchor frame to dict\n            mapping valid pmk offset to pmk frame key.\n    \"\"\"", "\n", "pmk_frames", "=", "pmk_frames", ".", "copy", "(", ")", "\n", "for", "anchor", "in", "anchor_labels", ":", "\n", "        ", "if", "anchor", "not", "in", "pmk_frames", ":", "\n", "            ", "pmk_frames", "[", "anchor", "]", "=", "{", "}", "\n", "\n", "", "", "anchor_is_correct", ",", "pmk_is_correct", "=", "evaluate_pmk", "(", "predictions_by_key", ",", "\n", "anchor_labels", ",", "pmk_frames", ")", "\n", "\n", "correct_anchors", "=", "{", "\n", "k", "for", "k", ",", "correct", "in", "anchor_is_correct", ".", "items", "(", ")", "if", "correct", "\n", "}", "\n", "all_anchors", "=", "[", "k", "for", "k", ",", "correct", "in", "anchor_is_correct", ".", "items", "(", ")", "]", "\n", "num_anchor_correct", "=", "len", "(", "correct_anchors", ")", "\n", "anchor_accuracy", "=", "num_anchor_correct", "/", "max", "(", "len", "(", "anchor_is_correct", ")", ",", "1e-9", ")", "\n", "\n", "pmk_correct", "=", "[", "\n", "anchor", "for", "anchor", "in", "correct_anchors", "\n", "if", "all", "(", "pmk_is_correct", "[", "anchor", "]", ".", "values", "(", ")", ")", "\n", "]", "\n", "\n", "rand_correct", "=", "[", "\n", "anchor", "for", "anchor", "in", "all_anchors", "\n", "if", "(", "len", "(", "pmk_is_correct", "[", "anchor", "]", ".", "values", "(", ")", ")", "==", "0", ")", "or", "random", ".", "choice", "(", "list", "(", "pmk_is_correct", "[", "anchor", "]", ".", "values", "(", ")", ")", ")", "\n", "]", "\n", "pmk_accuracy", "=", "len", "(", "pmk_correct", ")", "/", "max", "(", "len", "(", "anchor_is_correct", ")", ",", "1e-9", ")", "\n", "rand_accuracy", "=", "len", "(", "rand_correct", ")", "/", "max", "(", "len", "(", "anchor_is_correct", ")", ",", "1e-9", ")", "\n", "\n", "# Collect auxiliary data.", "\n", "benign_frames", "=", "sorted", "(", "anchor_labels", ".", "keys", "(", ")", ")", "\n", "adversarial_pmk", "=", "{", "}", "# Map anchor to list of adversarial pmk offsets", "\n", "nonadversarial_pmk", "=", "{", "}", "# Map anchor to list of non-adv pmk offsets", "\n", "\n", "for", "anchor", "in", "benign_frames", ":", "\n", "        ", "if", "not", "anchor_is_correct", "[", "anchor", "]", ":", "\n", "            ", "adversarial_pmk", "[", "anchor", "]", "=", "None", "\n", "nonadversarial_pmk", "[", "anchor", "]", "=", "None", "\n", "", "else", ":", "\n", "            ", "incorrect_frames", "=", "[", "]", "\n", "correct_frames", "=", "[", "]", "\n", "for", "i", ",", "(", "offset", ",", "pmk_key", ")", "in", "enumerate", "(", "pmk_frames", "[", "anchor", "]", ".", "items", "(", ")", ")", ":", "\n", "                ", "if", "pmk_is_correct", "[", "anchor", "]", "[", "pmk_key", "]", ":", "\n", "                    ", "correct_frames", ".", "append", "(", "offset", ")", "\n", "", "else", ":", "\n", "                    ", "incorrect_frames", ".", "append", "(", "offset", ")", "\n", "", "", "adversarial_pmk", "[", "anchor", "]", "=", "incorrect_frames", "\n", "nonadversarial_pmk", "[", "anchor", "]", "=", "correct_frames", "\n", "\n", "", "", "score_info", "=", "{", "}", "\n", "score_info", "[", "\"benign_accuracy\"", "]", "=", "anchor_accuracy", "\n", "score_info", "[", "\"benign_frames\"", "]", "=", "benign_frames", "\n", "score_info", "[", "\"adversarial_pmk\"", "]", "=", "adversarial_pmk", "\n", "score_info", "[", "\"nonadversarial_pmk\"", "]", "=", "nonadversarial_pmk", "\n", "score_info", "[", "\"pmk_keys\"", "]", "=", "pmk_frames", "\n", "score_info", "[", "\"correct_anchors\"", "]", "=", "sorted", "(", "correct_anchors", ")", "\n", "score_info", "[", "\"incorrect_anchors\"", "]", "=", "sorted", "(", "\n", "set", "(", "anchor_is_correct", ".", "keys", "(", ")", ")", "-", "correct_anchors", ")", "\n", "\n", "score_info", "[", "\"l_infs\"", "]", "=", "[", "]", "# TODO", "\n", "return", "pmk_accuracy", ",", "score_info", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.ms_to_frame_15fps": [[234, 236], ["round"], "function", ["None"], ["", "def", "ms_to_frame_15fps", "(", "ms", ")", ":", "\n", "    ", "return", "round", "(", "ms", "/", "1000", "*", "15", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.path_to_key": [[238, 241], ["pathlib.Path", "pathlib.Path"], "function", ["None"], ["", "def", "path_to_key", "(", "path", ")", ":", "\n", "    ", "path", "=", "pathlib", ".", "Path", "(", "path", ")", "\n", "return", "f\"{path.parent.name}/{path.name}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.get_pmk_key": [[243, 249], ["ytbb_robust.parse_frame_key"], "function", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.parse_frame_key"], ["", "def", "get_pmk_key", "(", "anchor_key", ",", "pmk_index", ")", ":", "\n", "    ", "\"\"\"Returns pmk portion of pmk key.\n    The full pm-k key, as used in annotations, is '{anchor_key},{pmk_key}'.\"\"\"", "\n", "video", ",", "anchor_index", ",", "anchor_ms", "=", "parse_frame_key", "(", "anchor_key", ")", "\n", "prefix", "=", "f'{video}_{anchor_ms}'", "\n", "return", "f'{prefix}/frame-{pmk_index}.jpg'", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.split_pmk_key": [[251, 254], ["key.split", "ytbb_robust.path_to_key", "ytbb_robust.path_to_key"], "function", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.path_to_key", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.path_to_key"], ["", "def", "split_pmk_key", "(", "key", ")", ":", "\n", "    ", "anchor_path", ",", "pmk_path", "=", "key", ".", "split", "(", "\",\"", ")", "\n", "return", "path_to_key", "(", "anchor_path", ")", ",", "path_to_key", "(", "pmk_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.parse_frame_key": [[256, 267], ["ytbb_robust.path_to_key", "path_to_key.split", "parent.rsplit", "[].split", "int", "int", "int", "name.split"], "function", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.path_to_key"], ["", "def", "parse_frame_key", "(", "key", ",", "return_ms", "=", "True", ")", ":", "\n", "    ", "\"\"\"Parse key into video, frame index, and anchor ms.\"\"\"", "\n", "key", "=", "path_to_key", "(", "key", ")", "\n", "# Key format: <video>_<anchor_timestamp>/frame-<idx>.jpg", "\n", "parent", ",", "name", "=", "key", ".", "split", "(", "'/'", ")", "\n", "video", ",", "anchor_ms", "=", "parent", ".", "rsplit", "(", "'_'", ",", "1", ")", "\n", "frame_idx", "=", "name", ".", "split", "(", "'-'", ")", "[", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "if", "return_ms", ":", "\n", "        ", "return", "video", ",", "int", "(", "frame_idx", ")", ",", "int", "(", "anchor_ms", ")", "\n", "", "else", ":", "\n", "        ", "return", "video", ",", "int", "(", "frame_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.load_anchor_annotations": [[367, 381], ["ytbb_robust.load_labels", "labels.values", "ytbb_robust.filter_labels", "ytbb_robust.path_to_key"], "function", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.load_labels", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.filter_labels", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.path_to_key"], ["", "", "def", "load_anchor_annotations", "(", "anchor_paths", ")", ":", "\n", "    ", "labels", ",", "labels_list", "=", "load_labels", "(", "anchor_paths", ")", "\n", "\n", "for", "annotation", "in", "labels", ".", "values", "(", ")", ":", "\n", "        ", "annotation", "[", "'key'", "]", "=", "path_to_key", "(", "annotation", "[", "'key'", "]", ")", "\n", "\n", "", "good_anchors", ",", "other_anchors", "=", "filter_labels", "(", "\n", "labels", ",", "\n", "labels_list", ",", "\n", "must_have", "=", "[", "'good'", "]", ",", "\n", "must_not_have", "=", "[", "'bad'", ",", "'unsure'", "]", ",", "\n", "unspecified_labels_policy", "=", "'can-have'", ",", "\n", "return_nonmatching", "=", "True", ")", "\n", "return", "good_anchors", ",", "other_anchors", ",", "labels_list", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.annotations_to_ytbb_labels": [[383, 401], ["None"], "function", ["None"], ["", "def", "annotations_to_ytbb_labels", "(", "annotations", ",", "label_list", ",", "reverse_ytbb_map", ")", ":", "\n", "    ", "\"\"\"Convert annotations from labeling UI to match YTBB index labels.\n    Args:\n        annotations (List[Dict]): Contains list of annotation objects with keys\n            'key', 'notes', 'labels'.\n        label_list (List[str]): List of label names.\n        reverse_ytbb_map (Dict): Map YTBB label names to indices.\n    Returns:\n        labels (Dict[str, Set[int]]): Map keys to list of YTBB label indices.\n    \"\"\"", "\n", "labels", "=", "{", "}", "\n", "for", "ann", "in", "annotations", ":", "\n", "        ", "labels_str", "=", "[", "label_list", "[", "l", "]", "for", "l", "in", "ann", "[", "'labels'", "]", "]", "\n", "labels", "[", "ann", "[", "'key'", "]", "]", "=", "{", "\n", "reverse_ytbb_map", "[", "l", "]", "\n", "for", "l", "in", "labels_str", "if", "l", "in", "reverse_ytbb_map", "\n", "}", "\n", "", "return", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.load_pmk_annotations": [[403, 431], ["ytbb_robust.load_labels", "ytbb_robust.filter_labels", "ytbb_robust.filter_labels", "ytbb_robust.split_pmk_key", "ytbb_robust.split_pmk_key"], "function", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.load_labels", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.filter_labels", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.filter_labels", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.split_pmk_key", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.split_pmk_key"], ["", "def", "load_pmk_annotations", "(", "pmk_paths", ")", ":", "\n", "    ", "problematic_labels", "=", "[", "\n", "'dissimilar'", ",", "'problematic'", ",", "'incorrect'", ",", "'dont know'", ",", "'deformation'", ",", "\n", "'background-change'", ",", "'occlusion-increased'", ",", "'blur-increase'", ",", "\n", "'bad-anchor'", "\n", "]", "\n", "\n", "labels", ",", "labels_list", "=", "load_labels", "(", "pmk_paths", ")", "\n", "# Pairs that do not have a problematic label and are marked similar.", "\n", "valid_pmk", ",", "bad_pmk", "=", "filter_labels", "(", "labels", ",", "\n", "labels_list", ",", "\n", "must_not_have", "=", "problematic_labels", ",", "\n", "can_have", "=", "[", "'correct'", "]", ",", "\n", "must_have", "=", "[", "'similar'", "]", ",", "\n", "unspecified_labels_policy", "=", "'can-have'", ",", "\n", "return_nonmatching", "=", "True", ")", "\n", "# Choose bad anchors", "\n", "bad_anchors", "=", "filter_labels", "(", "labels", ",", "\n", "labels_list", ",", "\n", "must_have", "=", "[", "'bad-anchor'", "]", ",", "\n", "unspecified_labels_policy", "=", "'can-have'", ")", "\n", "bad_anchors", "=", "{", "split_pmk_key", "(", "x", "[", "'key'", "]", ")", "[", "0", "]", "for", "x", "in", "bad_anchors", "}", "\n", "valid_pmk", "=", "[", "\n", "x", "for", "x", "in", "valid_pmk", "\n", "if", "split_pmk_key", "(", "x", "[", "'key'", "]", ")", "[", "0", "]", "not", "in", "bad_anchors", "\n", "]", "\n", "\n", "return", "valid_pmk", ",", "bad_pmk", ",", "bad_anchors", ",", "labels_list", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.objectnet.ObjectNetDataset.__init__": [[55, 63], ["torchvision.datasets.ImageFolder.__init__", "os.path.basename", "os.path.dirname"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.CLIP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "label_map", ",", "path", ",", "transform", ")", ":", "\n", "        ", "self", ".", "label_map", "=", "label_map", "\n", "super", "(", ")", ".", "__init__", "(", "path", ",", "transform", "=", "transform", ")", "\n", "self", ".", "samples", "=", "[", "\n", "d", "for", "d", "in", "self", ".", "samples", "\n", "if", "os", ".", "path", ".", "basename", "(", "os", ".", "path", ".", "dirname", "(", "d", "[", "0", "]", ")", ")", "in", "self", ".", "label_map", "\n", "]", "\n", "self", ".", "imgs", "=", "self", ".", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.objectnet.ObjectNetDataset.__len__": [[64, 66], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.objectnet.ObjectNetDataset.__getitem__": [[67, 77], ["objectnet.ObjectNetDataset.loader", "os.path.basename", "objectnet.ObjectNetDataset.transform", "os.path.dirname"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path", ",", "target", "=", "self", ".", "samples", "[", "index", "]", "\n", "sample", "=", "self", ".", "loader", "(", "path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "", "label", "=", "os", ".", "path", ".", "basename", "(", "os", ".", "path", ".", "dirname", "(", "path", ")", ")", "\n", "return", "{", "\n", "'images'", ":", "sample", ",", "\n", "'labels'", ":", "self", ".", "label_map", "[", "label", "]", ",", "\n", "'image_paths'", ":", "path", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.objectnet.ObjectNetBase.__init__": [[81, 100], ["objectnet.get_metadata", "imagenet.ImageNet.__init__", "sorted", "enumerate", "torchvision.transforms.Compose", "list", "objectnet.ObjectNetBase.classname_map[].lower", "objectnet.ObjectNetBase.folders_to_ids.keys"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.objectnet.get_metadata", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.CLIP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "(", "self", ".", "_class_sublist", ",", "\n", "self", ".", "class_sublist_mask", ",", "\n", "self", ".", "folders_to_ids", ",", "\n", "self", ".", "classname_map", ")", "=", "get_metadata", "(", ")", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "classnames", "=", "sorted", "(", "list", "(", "self", ".", "folders_to_ids", ".", "keys", "(", ")", ")", ")", "\n", "self", ".", "rev_class_idx_map", "=", "{", "}", "\n", "self", ".", "class_idx_map", "=", "{", "}", "\n", "for", "idx", ",", "name", "in", "enumerate", "(", "self", ".", "classnames", ")", ":", "\n", "            ", "self", ".", "rev_class_idx_map", "[", "idx", "]", "=", "self", ".", "folders_to_ids", "[", "name", "]", "\n", "for", "imagenet_idx", "in", "self", ".", "rev_class_idx_map", "[", "idx", "]", ":", "\n", "                ", "self", ".", "class_idx_map", "[", "imagenet_idx", "]", "=", "idx", "\n", "\n", "", "", "self", ".", "crop", "=", "crop", "\n", "self", ".", "preprocess", "=", "Compose", "(", "[", "crop", ",", "self", ".", "preprocess", "]", ")", "\n", "self", ".", "classnames", "=", "[", "self", ".", "classname_map", "[", "c", "]", ".", "lower", "(", ")", "for", "c", "in", "self", ".", "classnames", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.objectnet.ObjectNetBase.populate_train": [[101, 103], ["None"], "methods", ["None"], ["", "def", "populate_train", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.objectnet.ObjectNetBase.get_test_dataset": [[104, 109], ["os.path.join", "objectnet.ObjectNetDataset", "enumerate", "sorted", "list", "objectnet.ObjectNetBase.folders_to_ids.keys"], "methods", ["None"], ["", "def", "get_test_dataset", "(", "self", ")", ":", "\n", "        ", "subdir", "=", "'objectnet-1.0/images'", "\n", "valdir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "location", ",", "subdir", ")", "\n", "label_map", "=", "{", "name", ":", "idx", "for", "idx", ",", "name", "in", "enumerate", "(", "sorted", "(", "list", "(", "self", ".", "folders_to_ids", ".", "keys", "(", ")", ")", ")", ")", "}", "\n", "return", "ObjectNetDataset", "(", "label_map", ",", "valdir", ",", "transform", "=", "self", ".", "preprocess", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.objectnet.ObjectNetBase.project_logits": [[110, 121], ["torch.is_tensor", "numpy.zeros", "objectnet.ObjectNetBase.rev_class_idx_map.items", "torch.tensor().to", "isinstance", "isinstance", "logits.cpu().numpy.cpu().numpy.cpu().numpy", "numpy.max().squeeze", "objectnet.ObjectNetBase.project_logits", "torch.tensor", "logits.cpu().numpy.cpu().numpy.cpu", "numpy.max"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.objectnet.ObjectNetBase.project_logits"], ["", "def", "project_logits", "(", "self", ",", "logits", ",", "device", ")", ":", "\n", "        ", "if", "isinstance", "(", "logits", ",", "list", ")", "or", "isinstance", "(", "logits", ",", "tuple", ")", ":", "\n", "            ", "return", "[", "self", ".", "project_logits", "(", "l", ",", "device", ")", "for", "l", "in", "logits", "]", "\n", "", "if", "logits", ".", "shape", "[", "1", "]", "==", "113", ":", "\n", "            ", "return", "logits", "\n", "", "if", "torch", ".", "is_tensor", "(", "logits", ")", ":", "\n", "            ", "logits", "=", "logits", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "logits_projected", "=", "np", ".", "zeros", "(", "(", "logits", ".", "shape", "[", "0", "]", ",", "113", ")", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "rev_class_idx_map", ".", "items", "(", ")", ":", "\n", "            ", "logits_projected", "[", ":", ",", "k", "]", "=", "np", ".", "max", "(", "logits", "[", ":", ",", "v", "]", ",", "axis", "=", "1", ")", ".", "squeeze", "(", ")", "\n", "", "return", "torch", ".", "tensor", "(", "logits_projected", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.objectnet.ObjectNetBase.scatter_weights": [[122, 130], ["objectnet.ObjectNetBase.rev_class_idx_map.items", "weights.size", "torch.ones().to", "torch.ones", "weights.size"], "methods", ["None"], ["", "def", "scatter_weights", "(", "self", ",", "weights", ")", ":", "\n", "        ", "if", "weights", ".", "size", "(", "1", ")", "==", "1000", ":", "\n", "            ", "return", "weights", "\n", "", "new_weights", "=", "torch", ".", "ones", "(", "(", "weights", ".", "size", "(", "0", ")", ",", "1000", ")", ")", ".", "to", "(", "weights", ".", "device", ")", "*", "-", "10e8", "\n", "for", "k", ",", "v", "in", "self", ".", "rev_class_idx_map", ".", "items", "(", ")", ":", "\n", "            ", "for", "vv", "in", "v", ":", "\n", "                ", "new_weights", "[", ":", ",", "vv", "]", "=", "weights", "[", ":", ",", "k", "]", "\n", "", "", "return", "new_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.objectnet.ObjectNetValClasses.get_test_sampler": [[145, 151], ["sorted", "common.SubsetSampler", "range"], "methods", ["None"], ["    ", "def", "get_test_sampler", "(", "self", ")", ":", "\n", "        ", "idx_subsample_list", "=", "[", "range", "(", "x", "*", "50", ",", "(", "x", "+", "1", ")", "*", "50", ")", "for", "x", "in", "self", ".", "_class_sublist", "]", "\n", "idx_subsample_list", "=", "sorted", "(", "[", "item", "for", "sublist", "in", "idx_subsample_list", "for", "item", "in", "sublist", "]", ")", "\n", "\n", "sampler", "=", "SubsetSampler", "(", "idx_subsample_list", ")", "\n", "return", "sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.objectnet.ObjectNetValClasses.get_test_dataset": [[152, 154], ["common.ImageFolderWithPaths", "objectnet.ObjectNetValClasses.get_test_path"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet_sketch.ImageNetSketch.get_test_path"], ["", "def", "get_test_dataset", "(", "self", ")", ":", "\n", "        ", "return", "ImageFolderWithPaths", "(", "self", ".", "get_test_path", "(", ")", ",", "transform", "=", "self", ".", "preprocess", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.objectnet.ObjectNetValClasses.project_labels": [[155, 158], ["torch.LongTensor().to", "torch.LongTensor", "int"], "methods", ["None"], ["", "def", "project_labels", "(", "self", ",", "labels", ",", "device", ")", ":", "\n", "        ", "projected_labels", "=", "[", "self", ".", "class_idx_map", "[", "int", "(", "label", ")", "]", "for", "label", "in", "labels", "]", "\n", "return", "torch", ".", "LongTensor", "(", "projected_labels", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.objectnet.ObjectNet.accuracy": [[162, 164], ["objectnet.ObjectNet.accuracy"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.utils.accuracy"], ["    ", "def", "accuracy", "(", "self", ",", "logits", ",", "targets", ",", "img_paths", ",", "args", ")", ":", "\n", "        ", "return", "accuracy", "(", "logits", ",", "targets", ",", "img_paths", ",", "args", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.objectnet.get_metadata": [[16, 44], ["json.load.items", "sorted", "open", "json.load", "open", "json.load", "open", "json.load", "open", "imagenet_names.split.split", "sorted.extend", "pathlib.Path", "v.strip", "str", "int", "range", "json.load.items", "json.load.items", "json.load.items", "enumerate"], "function", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.clip.load", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.clip.load", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.clip.load"], ["def", "get_metadata", "(", ")", ":", "\n", "    ", "metadata", "=", "Path", "(", "__file__", ")", ".", "parent", "/", "'objectnet_metadata'", "\n", "\n", "with", "open", "(", "metadata", "/", "'folder_to_objectnet_label.json'", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "folder_map", "=", "json", ".", "load", "(", "f", ")", "\n", "folder_map", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "folder_map", ".", "items", "(", ")", "}", "\n", "", "with", "open", "(", "metadata", "/", "'objectnet_to_imagenet_1k.json'", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "objectnet_map", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "with", "open", "(", "metadata", "/", "'pytorch_to_imagenet_2012_id.json'", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "pytorch_map", "=", "json", ".", "load", "(", "f", ")", "\n", "pytorch_map", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "pytorch_map", ".", "items", "(", ")", "}", "\n", "\n", "", "with", "open", "(", "metadata", "/", "'imagenet_to_label_2012_v2'", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "imagenet_map", "=", "{", "v", ".", "strip", "(", ")", ":", "str", "(", "pytorch_map", "[", "i", "]", ")", "for", "i", ",", "v", "in", "enumerate", "(", "f", ")", "}", "\n", "\n", "", "folder_to_ids", ",", "class_sublist", "=", "{", "}", ",", "[", "]", "\n", "classnames", "=", "[", "]", "\n", "for", "objectnet_name", ",", "imagenet_names", "in", "objectnet_map", ".", "items", "(", ")", ":", "\n", "        ", "imagenet_names", "=", "imagenet_names", ".", "split", "(", "'; '", ")", "\n", "imagenet_ids", "=", "[", "int", "(", "imagenet_map", "[", "imagenet_name", "]", ")", "for", "imagenet_name", "in", "imagenet_names", "]", "\n", "class_sublist", ".", "extend", "(", "imagenet_ids", ")", "\n", "folder_to_ids", "[", "folder_map", "[", "objectnet_name", "]", "]", "=", "imagenet_ids", "\n", "\n", "", "class_sublist", "=", "sorted", "(", "class_sublist", ")", "\n", "class_sublist_mask", "=", "[", "(", "i", "in", "class_sublist", ")", "for", "i", "in", "range", "(", "1000", ")", "]", "\n", "classname_map", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "folder_map", ".", "items", "(", ")", "}", "\n", "return", "class_sublist", ",", "class_sublist_mask", ",", "folder_to_ids", ",", "classname_map", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.objectnet.crop": [[46, 51], ["img.crop.crop"], "function", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.objectnet.crop"], ["", "def", "crop", "(", "img", ")", ":", "\n", "    ", "width", ",", "height", "=", "img", ".", "size", "\n", "cropArea", "=", "(", "2", ",", "2", ",", "width", "-", "2", ",", "height", "-", "2", ")", "\n", "img", "=", "img", ".", "crop", "(", "cropArea", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.objectnet.accuracy": [[133, 141], ["logits.argmax", "torch.is_tensor", "torch.is_tensor", "preds.cpu().numpy.cpu().numpy", "targets.cpu().numpy.cpu().numpy", "numpy.sum", "len", "preds.cpu().numpy.cpu", "targets.cpu().numpy.cpu"], "function", ["None"], ["", "", "def", "accuracy", "(", "logits", ",", "targets", ",", "img_paths", ",", "args", ")", ":", "\n", "    ", "assert", "logits", ".", "shape", "[", "1", "]", "==", "113", "\n", "preds", "=", "logits", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "if", "torch", ".", "is_tensor", "(", "preds", ")", ":", "\n", "        ", "preds", "=", "preds", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "if", "torch", ".", "is_tensor", "(", "targets", ")", ":", "\n", "        ", "targets", "=", "targets", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "return", "np", ".", "sum", "(", "preds", "==", "targets", ")", ",", "len", "(", "preds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet_r.ImageNetRValClasses.get_class_sublist_and_mask": [[31, 33], ["None"], "methods", ["None"], ["    ", "def", "get_class_sublist_and_mask", "(", "self", ")", ":", "\n", "        ", "return", "CLASS_SUBLIST", ",", "CLASS_SUBLIST_MASK", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet_r.ImageNetR.get_class_sublist_and_mask": [[35, 37], ["None"], "methods", ["None"], ["    ", "def", "get_class_sublist_and_mask", "(", "self", ")", ":", "\n", "        ", "return", "CLASS_SUBLIST", ",", "CLASS_SUBLIST_MASK", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet_r.ImageNetR.get_test_path": [[38, 40], ["os.path.join"], "methods", ["None"], ["", "def", "get_test_path", "(", "self", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "location", ",", "'imagenet-r'", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet_sketch.ImageNetSketch.populate_train": [[7, 9], ["None"], "methods", ["None"], ["    ", "def", "populate_train", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.imagenet_sketch.ImageNetSketch.get_test_path": [[10, 12], ["os.path.join"], "methods", ["None"], ["", "def", "get_test_path", "(", "self", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "location", ",", "'sketch'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.templates.utils.get_plural": [[2, 23], ["name.replace.replace"], "function", ["None"], ["def", "get_plural", "(", "name", ")", ":", "\n", "    ", "name", "=", "name", ".", "replace", "(", "'_'", ",", "' '", ")", "\n", "if", "name", "[", "-", "2", ":", "]", "==", "'sh'", ":", "\n", "        ", "name", "=", "name", "+", "'es'", "\n", "", "elif", "name", "[", "-", "2", ":", "]", "==", "'ch'", ":", "\n", "        ", "name", "=", "name", "+", "'es'", "\n", "", "elif", "name", "[", "-", "1", ":", "]", "==", "'y'", ":", "\n", "        ", "name", "=", "name", "[", ":", "-", "1", "]", "+", "'ies'", "\n", "", "elif", "name", "[", "-", "1", ":", "]", "==", "'s'", ":", "\n", "        ", "name", "=", "name", "+", "'es'", "\n", "", "elif", "name", "[", "-", "1", ":", "]", "==", "'x'", ":", "\n", "        ", "name", "=", "name", "+", "'es'", "\n", "", "elif", "name", "[", "-", "3", ":", "]", "==", "'man'", ":", "\n", "        ", "name", "=", "name", "[", ":", "-", "3", "]", "+", "'men'", "\n", "", "elif", "name", "==", "'mouse'", ":", "\n", "        ", "name", "=", "'mice'", "\n", "", "elif", "name", "[", "-", "1", ":", "]", "==", "'f'", ":", "\n", "        ", "name", "=", "name", "[", ":", "-", "1", "]", "+", "'ves'", "\n", "", "else", ":", "\n", "        ", "name", "=", "name", "+", "'s'", "\n", "", "return", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.templates.utils.append_proper_article": [[25, 30], ["name.replace.replace"], "function", ["None"], ["", "def", "append_proper_article", "(", "name", ")", ":", "\n", "    ", "name", "=", "name", ".", "replace", "(", "'_'", ",", "' '", ")", "\n", "if", "name", "[", "0", "]", "in", "'aeiou'", ":", "\n", "        ", "return", "'an '", "+", "name", "\n", "", "return", "'a '", "+", "name", "\n", "", ""]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.modeling.ImageEncoder.__init__": [[10, 20], ["super().__init__", "clip.load", "hasattr", "delattr"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.CLIP.__init__", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.clip.load"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "keep_lang", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "model", ",", "self", ".", "train_preprocess", ",", "self", ".", "val_preprocess", "=", "clip", ".", "load", "(", "\n", "args", ".", "model", ",", "args", ".", "device", ",", "jit", "=", "False", ")", "\n", "\n", "self", ".", "cache_dir", "=", "args", ".", "cache_dir", "\n", "\n", "if", "not", "keep_lang", "and", "hasattr", "(", "self", ".", "model", ",", "'transformer'", ")", ":", "\n", "            ", "delattr", "(", "self", ".", "model", ",", "'transformer'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.modeling.ImageEncoder.forward": [[21, 24], ["modeling.ImageEncoder.model.encode_image"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.CLIP.encode_image"], ["", "", "def", "forward", "(", "self", ",", "images", ")", ":", "\n", "        ", "assert", "self", ".", "model", "is", "not", "None", "\n", "return", "self", ".", "model", ".", "encode_image", "(", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.modeling.ImageEncoder.save": [[25, 28], ["print", "src.models.utils.torch_save"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.utils.torch_save"], ["", "def", "save", "(", "self", ",", "filename", ")", ":", "\n", "        ", "print", "(", "f'Saving image encoder to {filename}'", ")", "\n", "utils", ".", "torch_save", "(", "self", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.modeling.ImageEncoder.load": [[29, 33], ["print", "src.models.utils.torch_load"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.utils.torch_load"], ["", "@", "classmethod", "\n", "def", "load", "(", "cls", ",", "filename", ")", ":", "\n", "        ", "print", "(", "f'Loading image encoder from {filename}'", ")", "\n", "return", "utils", ".", "torch_load", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.modeling.ClassificationHead.__init__": [[36, 46], ["super().__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "weights.clone", "biases.clone", "torch.zeros_like"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.CLIP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "normalize", ",", "weights", ",", "biases", "=", "None", ")", ":", "\n", "        ", "output_size", ",", "input_size", "=", "weights", ".", "shape", "\n", "super", "(", ")", ".", "__init__", "(", "input_size", ",", "output_size", ")", "\n", "self", ".", "normalize", "=", "normalize", "\n", "if", "weights", "is", "not", "None", ":", "\n", "            ", "self", ".", "weight", "=", "torch", ".", "nn", ".", "Parameter", "(", "weights", ".", "clone", "(", ")", ")", "\n", "", "if", "biases", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", "=", "torch", ".", "nn", ".", "Parameter", "(", "biases", ".", "clone", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bias", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "zeros_like", "(", "self", ".", "bias", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.modeling.ClassificationHead.forward": [[47, 51], ["super().forward", "inputs.norm"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.CLIP.forward"], ["", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "self", ".", "normalize", ":", "\n", "            ", "inputs", "=", "inputs", "/", "inputs", ".", "norm", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "", "return", "super", "(", ")", ".", "forward", "(", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.modeling.ClassificationHead.save": [[52, 55], ["print", "src.models.utils.torch_save"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.utils.torch_save"], ["", "def", "save", "(", "self", ",", "filename", ")", ":", "\n", "        ", "print", "(", "f'Saving classification head to {filename}'", ")", "\n", "utils", ".", "torch_save", "(", "self", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.modeling.ClassificationHead.load": [[56, 60], ["print", "src.models.utils.torch_load"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.utils.torch_load"], ["", "@", "classmethod", "\n", "def", "load", "(", "cls", ",", "filename", ")", ":", "\n", "        ", "print", "(", "f'Loading classification head from {filename}'", ")", "\n", "return", "utils", ".", "torch_load", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.modeling.ImageClassifier.__init__": [[63, 71], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.CLIP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "image_encoder", ",", "classification_head", ",", "process_images", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "image_encoder", "=", "image_encoder", "\n", "self", ".", "classification_head", "=", "classification_head", "\n", "self", ".", "process_images", "=", "process_images", "\n", "if", "self", ".", "image_encoder", "is", "not", "None", ":", "\n", "            ", "self", ".", "train_preprocess", "=", "self", ".", "image_encoder", ".", "train_preprocess", "\n", "self", ".", "val_preprocess", "=", "self", ".", "image_encoder", ".", "val_preprocess", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.modeling.ImageClassifier.forward": [[72, 77], ["modeling.ImageClassifier.classification_head", "modeling.ImageClassifier.image_encoder"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "self", ".", "process_images", ":", "\n", "            ", "inputs", "=", "self", ".", "image_encoder", "(", "inputs", ")", "\n", "", "outputs", "=", "self", ".", "classification_head", "(", "inputs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.modeling.ImageClassifier.save": [[78, 81], ["print", "src.models.utils.torch_save"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.utils.torch_save"], ["", "def", "save", "(", "self", ",", "filename", ")", ":", "\n", "        ", "print", "(", "f'Saving image classifier to {filename}'", ")", "\n", "utils", ".", "torch_save", "(", "self", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.modeling.ImageClassifier.load": [[82, 86], ["print", "src.models.utils.torch_load"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.utils.torch_load"], ["", "@", "classmethod", "\n", "def", "load", "(", "cls", ",", "filename", ")", ":", "\n", "        ", "print", "(", "f'Loading image classifier from {filename}'", ")", "\n", "return", "utils", ".", "torch_load", "(", "filename", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.zeroshot.get_zeroshot_classifier": [[18, 61], ["getattr", "getattr", "getattr.", "clip_model.eval", "clip_model.to", "print", "src.models.modeling.ClassificationHead", "torch.no_grad", "tqdm.tqdm", "torch.stack().to", "torch.transpose", "logit_scale.exp", "torch.transpose.squeeze().float", "torch.transpose", "clip.tokenize().to", "clip_model.encode_text", "embeddings.mean.norm", "embeddings.mean.mean", "embeddings.mean.norm", "torch.transpose.append", "clip.tokenize().to.append", "torch.stack", "torch.transpose.squeeze", "t", "clip.tokenize"], "function", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.zeroshot.eval", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.CLIP.encode_text", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.clip.tokenize"], ["def", "get_zeroshot_classifier", "(", "args", ",", "clip_model", ")", ":", "\n", "    ", "assert", "args", ".", "template", "is", "not", "None", "\n", "assert", "args", ".", "train_dataset", "is", "not", "None", "\n", "template", "=", "getattr", "(", "templates", ",", "args", ".", "template", ")", "\n", "logit_scale", "=", "clip_model", ".", "logit_scale", "\n", "dataset_class", "=", "getattr", "(", "datasets", ",", "args", ".", "train_dataset", ")", "\n", "dataset", "=", "dataset_class", "(", "\n", "None", ",", "\n", "location", "=", "args", ".", "data_location", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "classnames", "=", "args", ".", "classnames", "\n", ")", "\n", "device", "=", "args", ".", "device", "\n", "clip_model", ".", "eval", "(", ")", "\n", "clip_model", ".", "to", "(", "device", ")", "\n", "\n", "print", "(", "'Getting zeroshot weights.'", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "zeroshot_weights", "=", "[", "]", "\n", "for", "classname", "in", "tqdm", "(", "dataset", ".", "classnames", ")", ":", "\n", "            ", "texts", "=", "[", "]", "\n", "for", "t", "in", "template", ":", "\n", "                ", "texts", ".", "append", "(", "t", "(", "classname", ")", ")", "\n", "", "texts", "=", "clip", ".", "tokenize", "(", "texts", ")", ".", "to", "(", "device", ")", "# tokenize", "\n", "embeddings", "=", "clip_model", ".", "encode_text", "(", "texts", ")", "# embed with text encoder", "\n", "embeddings", "/=", "embeddings", ".", "norm", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "embeddings", "=", "embeddings", ".", "mean", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "embeddings", "/=", "embeddings", ".", "norm", "(", ")", "\n", "\n", "zeroshot_weights", ".", "append", "(", "embeddings", ")", "\n", "\n", "", "zeroshot_weights", "=", "torch", ".", "stack", "(", "zeroshot_weights", ",", "dim", "=", "0", ")", ".", "to", "(", "device", ")", "\n", "zeroshot_weights", "=", "torch", ".", "transpose", "(", "zeroshot_weights", ",", "0", ",", "2", ")", "\n", "\n", "zeroshot_weights", "*=", "logit_scale", ".", "exp", "(", ")", "\n", "\n", "zeroshot_weights", "=", "zeroshot_weights", ".", "squeeze", "(", ")", ".", "float", "(", ")", "\n", "zeroshot_weights", "=", "torch", ".", "transpose", "(", "zeroshot_weights", ",", "0", ",", "1", ")", "\n", "\n", "", "classification_head", "=", "ClassificationHead", "(", "normalize", "=", "True", ",", "weights", "=", "zeroshot_weights", ")", "\n", "\n", "return", "classification_head", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.zeroshot.eval": [[63, 77], ["src.models.eval.evaluate", "src.models.modeling.ImageClassifier.load", "src.models.modeling.ImageEncoder", "zeroshot.get_zeroshot_classifier", "delattr", "src.models.modeling.ImageClassifier", "src.models.modeling.ImageClassifier.save"], "function", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.eval.evaluate", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.clip.load", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.zeroshot.get_zeroshot_classifier", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.modeling.ImageClassifier.save"], ["", "def", "eval", "(", "args", ")", ":", "\n", "    ", "args", ".", "freeze_encoder", "=", "True", "\n", "if", "args", ".", "load", "is", "not", "None", ":", "\n", "        ", "classifier", "=", "ImageClassifier", ".", "load", "(", "args", ".", "load", ")", "\n", "", "else", ":", "\n", "        ", "image_encoder", "=", "ImageEncoder", "(", "args", ",", "keep_lang", "=", "True", ")", "\n", "classification_head", "=", "get_zeroshot_classifier", "(", "args", ",", "image_encoder", ".", "model", ")", "\n", "delattr", "(", "image_encoder", ".", "model", ",", "'transformer'", ")", "\n", "classifier", "=", "ImageClassifier", "(", "image_encoder", ",", "classification_head", ",", "process_images", "=", "False", ")", "\n", "\n", "", "evaluate", "(", "classifier", ",", "args", ")", "\n", "\n", "if", "args", ".", "save", "is", "not", "None", ":", "\n", "        ", "classifier", ".", "save", "(", "args", ".", "save", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.eval.eval_single_dataset": [[13, 79], ["model.eval", "src.datasets.common.get_dataloader", "enumerate", "hasattr", "torch.no_grad", "hasattr", "src.datasets.common.maybe_dictionarize", "data[].to", "data[].to", "src.models.utils.get_logits", "getattr", "hasattr", "projection_fn.argmax().to", "hasattr", "hasattr", "torch.cat", "torch.cat", "dataset.post_loop_metrics", "getattr.", "dataset.project_labels", "dataset.accuracy", "logits.argmax().to.eq().sum().item", "dataset.project_labels.size", "torch.cat.append", "torch.cat.append", "all_metadata.extend", "projection_fn.argmax", "dataset.project_labels.cpu().clone().detach", "projection_fn.cpu().clone().detach", "logits.argmax().to.eq().sum", "dataset.project_labels.cpu().clone", "projection_fn.cpu().clone", "logits.argmax().to.eq", "dataset.project_labels.view_as", "dataset.project_labels.cpu", "projection_fn.cpu"], "function", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.zeroshot.eval", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.common.get_dataloader", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.common.maybe_dictionarize", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.utils.get_logits", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.ytbb_robust.YTBBRobust.post_loop_metrics", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.objectnet.ObjectNetValClasses.project_labels", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.utils.accuracy"], ["def", "eval_single_dataset", "(", "image_classifier", ",", "dataset", ",", "args", ")", ":", "\n", "    ", "if", "args", ".", "freeze_encoder", ":", "\n", "        ", "model", "=", "image_classifier", ".", "classification_head", "\n", "input_key", "=", "'features'", "\n", "image_enc", "=", "image_classifier", ".", "image_encoder", "\n", "", "else", ":", "\n", "        ", "model", "=", "image_classifier", "\n", "input_key", "=", "'images'", "\n", "image_enc", "=", "None", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "dataloader", "=", "get_dataloader", "(", "\n", "dataset", ",", "is_train", "=", "False", ",", "args", "=", "args", ",", "image_encoder", "=", "image_enc", ")", "\n", "batched_data", "=", "enumerate", "(", "dataloader", ")", "\n", "device", "=", "args", ".", "device", "\n", "\n", "if", "hasattr", "(", "dataset", ",", "'post_loop_metrics'", ")", ":", "\n", "# keep track of labels, predictions and metadata", "\n", "        ", "all_labels", ",", "all_preds", ",", "all_metadata", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "top1", ",", "correct", ",", "n", "=", "0.", ",", "0.", ",", "0.", "\n", "for", "i", ",", "data", "in", "batched_data", ":", "\n", "            ", "data", "=", "maybe_dictionarize", "(", "data", ")", "\n", "x", "=", "data", "[", "input_key", "]", ".", "to", "(", "device", ")", "\n", "y", "=", "data", "[", "'labels'", "]", ".", "to", "(", "device", ")", "\n", "\n", "if", "'image_paths'", "in", "data", ":", "\n", "                ", "image_paths", "=", "data", "[", "'image_paths'", "]", "\n", "\n", "", "logits", "=", "utils", ".", "get_logits", "(", "x", ",", "model", ")", "\n", "projection_fn", "=", "getattr", "(", "dataset", ",", "'project_logits'", ",", "None", ")", "\n", "if", "projection_fn", "is", "not", "None", ":", "\n", "                ", "logits", "=", "projection_fn", "(", "logits", ",", "device", ")", "\n", "\n", "", "if", "hasattr", "(", "dataset", ",", "'project_labels'", ")", ":", "\n", "                ", "y", "=", "dataset", ".", "project_labels", "(", "y", ",", "device", ")", "\n", "", "pred", "=", "logits", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "to", "(", "device", ")", "\n", "if", "hasattr", "(", "dataset", ",", "'accuracy'", ")", ":", "\n", "                ", "acc1", ",", "num_total", "=", "dataset", ".", "accuracy", "(", "logits", ",", "y", ",", "image_paths", ",", "args", ")", "\n", "correct", "+=", "acc1", "\n", "n", "+=", "num_total", "\n", "", "else", ":", "\n", "                ", "correct", "+=", "pred", ".", "eq", "(", "y", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "n", "+=", "y", ".", "size", "(", "0", ")", "\n", "\n", "", "if", "hasattr", "(", "dataset", ",", "'post_loop_metrics'", ")", ":", "\n", "                ", "all_labels", ".", "append", "(", "y", ".", "cpu", "(", ")", ".", "clone", "(", ")", ".", "detach", "(", ")", ")", "\n", "all_preds", ".", "append", "(", "logits", ".", "cpu", "(", ")", ".", "clone", "(", ")", ".", "detach", "(", ")", ")", "\n", "metadata", "=", "data", "[", "'metadata'", "]", "if", "'metadata'", "in", "data", "else", "image_paths", "\n", "all_metadata", ".", "extend", "(", "metadata", ")", "\n", "\n", "", "", "top1", "=", "correct", "/", "n", "\n", "\n", "if", "hasattr", "(", "dataset", ",", "'post_loop_metrics'", ")", ":", "\n", "            ", "all_labels", "=", "torch", ".", "cat", "(", "all_labels", ")", "\n", "all_preds", "=", "torch", ".", "cat", "(", "all_preds", ")", "\n", "metrics", "=", "dataset", ".", "post_loop_metrics", "(", "all_labels", ",", "all_preds", ",", "all_metadata", ",", "args", ")", "\n", "if", "'acc'", "in", "metrics", ":", "\n", "                ", "metrics", "[", "'top1'", "]", "=", "metrics", "[", "'acc'", "]", "\n", "", "", "else", ":", "\n", "            ", "metrics", "=", "{", "}", "\n", "", "", "if", "'top1'", "not", "in", "metrics", ":", "\n", "        ", "metrics", "[", "'top1'", "]", "=", "top1", "\n", "\n", "", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.eval.evaluate": [[80, 113], ["vars", "enumerate", "print", "getattr", "getattr.", "eval.eval_single_dataset", "eval_single_dataset.items", "os.path.dirname", "print", "print", "print", "os.makedirs", "open", "f.write", "print", "key.lower", "json.dumps"], "function", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.eval.eval_single_dataset"], ["", "def", "evaluate", "(", "image_classifier", ",", "args", ")", ":", "\n", "    ", "if", "args", ".", "eval_datasets", "is", "None", ":", "\n", "        ", "return", "\n", "", "info", "=", "vars", "(", "args", ")", "\n", "for", "i", ",", "dataset_name", "in", "enumerate", "(", "args", ".", "eval_datasets", ")", ":", "\n", "        ", "print", "(", "'Evaluating on'", ",", "dataset_name", ")", "\n", "dataset_class", "=", "getattr", "(", "datasets", ",", "dataset_name", ")", "\n", "dataset", "=", "dataset_class", "(", "\n", "image_classifier", ".", "val_preprocess", ",", "\n", "location", "=", "args", ".", "data_location", ",", "\n", "batch_size", "=", "args", ".", "batch_size", "\n", ")", "\n", "\n", "results", "=", "eval_single_dataset", "(", "image_classifier", ",", "dataset", ",", "args", ")", "\n", "\n", "if", "'top1'", "in", "results", ":", "\n", "            ", "print", "(", "f\"{dataset_name} Top-1 accuracy: {results['top1']:.4f}\"", ")", "\n", "", "for", "key", ",", "val", "in", "results", ".", "items", "(", ")", ":", "\n", "            ", "if", "'worst'", "in", "key", "or", "'f1'", "in", "key", ".", "lower", "(", ")", "or", "'pm0'", "in", "key", ":", "\n", "                ", "print", "(", "f\"{dataset_name} {key}: {val:.4f}\"", ")", "\n", "", "info", "[", "dataset_name", "+", "':'", "+", "key", "]", "=", "val", "\n", "\n", "", "", "if", "args", ".", "results_db", "is", "not", "None", ":", "\n", "        ", "dirname", "=", "os", ".", "path", ".", "dirname", "(", "args", ".", "results_db", ")", "\n", "if", "dirname", ":", "\n", "            ", "os", ".", "makedirs", "(", "dirname", ",", "exist_ok", "=", "True", ")", "\n", "", "with", "open", "(", "args", ".", "results_db", ",", "'a+'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "json", ".", "dumps", "(", "info", ")", "+", "'\\n'", ")", "\n", "", "print", "(", "f'Results saved to {args.results_db}.'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Results not saved (to do so, use --results_db to specify a path).'", ")", "\n", "\n", "", "return", "info", "", "", ""]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.finetune.finetune": [[19, 121], ["src.models.modeling.ImageClassifier.load", "getattr", "getattr.", "len", "torch.nn.DataParallel.cuda", "list", "print", "torch.nn.DataParallel", "torch.nn.DataParallel.train", "torch.optim.AdamW", "src.models.utils.cosine_lr", "range", "print", "print", "range", "src.models.utils.LabelSmoothing", "torch.nn.CrossEntropyLoss", "torch.nn.DataParallel.train", "src.datasets.common.get_dataloader", "enumerate", "src.models.eval.evaluate", "torch.cuda.device_count", "torch.nn.DataParallel.parameters", "time.time", "src.models.utils.cosine_lr.", "torch.optim.AdamW.zero_grad", "src.datasets.common.maybe_dictionarize", "batch[].cuda", "batch[].cuda", "torch.nn.DataParallel.", "torch.nn.CrossEntropyLoss.", "loss_fn.backward", "torch.nn.utils.clip_grad_norm_", "torch.optim.AdamW.step", "src.models.modeling.ImageClassifier", "os.makedirs", "os.path.join", "print", "src.models.modeling.ImageClassifier.save", "os.path.join", "torch.save", "time.time", "time.time", "print", "torch.optim.AdamW.state_dict", "len", "len", "loss_fn.item"], "function", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.clip.load", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.utils.cosine_lr", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.common.get_dataloader", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.eval.evaluate", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.common.maybe_dictionarize", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.modeling.ImageClassifier.save", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.modeling.ImageClassifier.save"], ["def", "finetune", "(", "args", ")", ":", "\n", "    ", "assert", "args", ".", "load", "is", "not", "None", ",", "\"Please provide the patch to a checkpoint through --load.\"", "\n", "assert", "args", ".", "train_dataset", "is", "not", "None", ",", "\"Please provide a training dataset.\"", "\n", "\n", "\n", "image_classifier", "=", "ImageClassifier", ".", "load", "(", "args", ".", "load", ")", "\n", "\n", "if", "args", ".", "freeze_encoder", ":", "\n", "        ", "print", "(", "'Fine-tuning a linear classifier'", ")", "\n", "model", "=", "image_classifier", ".", "classification_head", "\n", "input_key", "=", "'features'", "\n", "preprocess_fn", "=", "image_classifier", ".", "val_preprocess", "\n", "image_enc", "=", "image_classifier", ".", "image_encoder", "\n", "print_every", "=", "1000", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Fine-tuning end-to-end'", ")", "\n", "model", "=", "image_classifier", "\n", "input_key", "=", "'images'", "\n", "preprocess_fn", "=", "image_classifier", ".", "train_preprocess", "\n", "image_enc", "=", "None", "\n", "image_classifier", ".", "process_images", "=", "True", "\n", "print_every", "=", "100", "\n", "\n", "", "dataset_class", "=", "getattr", "(", "datasets", ",", "args", ".", "train_dataset", ")", "\n", "dataset", "=", "dataset_class", "(", "\n", "preprocess_fn", ",", "\n", "location", "=", "args", ".", "data_location", ",", "\n", "batch_size", "=", "args", ".", "batch_size", "\n", ")", "\n", "num_batches", "=", "len", "(", "dataset", ".", "train_loader", ")", "\n", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "devices", "=", "list", "(", "range", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "print", "(", "'Using devices'", ",", "devices", ")", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "devices", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "if", "args", ".", "ls", ">", "0", ":", "\n", "        ", "loss_fn", "=", "LabelSmoothing", "(", "args", ".", "ls", ")", "\n", "", "else", ":", "\n", "        ", "loss_fn", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "", "params", "=", "[", "p", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", "]", "\n", "optimizer", "=", "torch", ".", "optim", ".", "AdamW", "(", "params", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "wd", ")", "\n", "\n", "scheduler", "=", "cosine_lr", "(", "optimizer", ",", "args", ".", "lr", ",", "args", ".", "warmup_length", ",", "args", ".", "epochs", "*", "num_batches", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "data_loader", "=", "get_dataloader", "(", "\n", "dataset", ",", "is_train", "=", "True", ",", "args", "=", "args", ",", "image_encoder", "=", "image_enc", ")", "\n", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "step", "=", "i", "+", "epoch", "*", "num_batches", "\n", "scheduler", "(", "step", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "batch", "=", "maybe_dictionarize", "(", "batch", ")", "\n", "inputs", "=", "batch", "[", "input_key", "]", ".", "cuda", "(", ")", "\n", "labels", "=", "batch", "[", "'labels'", "]", ".", "cuda", "(", ")", "\n", "data_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "\n", "logits", "=", "model", "(", "inputs", ")", "\n", "\n", "loss", "=", "loss_fn", "(", "logits", ",", "labels", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "params", ",", "1.0", ")", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "batch_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "\n", "if", "i", "%", "print_every", "==", "0", ":", "\n", "                ", "percent_complete", "=", "100", "*", "i", "/", "len", "(", "data_loader", ")", "\n", "print", "(", "\n", "f\"Train Epoch: {epoch} [{percent_complete:.0f}% {i}/{len(dataset.train_loader)}]\\t\"", "\n", "f\"Loss: {loss.item():.6f}\\tData (t) {data_time:.3f}\\tBatch (t) {batch_time:.3f}\"", ",", "flush", "=", "True", "\n", ")", "\n", "\n", "", "", "if", "args", ".", "freeze_encoder", ":", "\n", "            ", "image_classifier", "=", "ImageClassifier", "(", "image_classifier", ".", "image_encoder", ",", "model", ".", "module", ")", "\n", "", "else", ":", "\n", "            ", "image_classifier", "=", "model", ".", "module", "\n", "\n", "# Saving model", "\n", "", "if", "args", ".", "save", "is", "not", "None", ":", "\n", "            ", "os", ".", "makedirs", "(", "args", ".", "save", ",", "exist_ok", "=", "True", ")", "\n", "model_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "f'checkpoint_{epoch+1}.pt'", ")", "\n", "print", "(", "'Saving model to'", ",", "model_path", ")", "\n", "image_classifier", ".", "save", "(", "model_path", ")", "\n", "optim_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "f'optim_{epoch+1}.pt'", ")", "\n", "torch", ".", "save", "(", "optimizer", ".", "state_dict", "(", ")", ",", "optim_path", ")", "\n", "\n", "# Evaluate", "\n", "", "args", ".", "current_epoch", "=", "epoch", "\n", "eval_results", "=", "evaluate", "(", "image_classifier", ",", "args", ")", "\n", "\n", "", "if", "args", ".", "save", "is", "not", "None", ":", "\n", "        ", "return", "model_path", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.fisher.compute_fisher": [[27, 115], ["os.path.expanduser", "copy.deepcopy", "src.models.modeling.ImageClassifier.load", "getattr", "getattr.", "torch.nn.DataParallel.cuda", "list", "print", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel.train", "torch.nn.DataParallel.parameters", "range", "torch.nn.DataParallel.named_parameters", "src.models.utils.fisher_save", "os.path.expanduser", "range", "src.models.utils.LabelSmoothing", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.zeros_like", "torch.zeros_like", "torch.nn.DataParallel.train", "src.datasets.common.get_dataloader", "enumerate", "name.startswith", "torch.cuda.device_count", "torch.cuda.device_count", "itertools.islice", "tqdm.auto.tqdm", "src.datasets.common.maybe_dictionarize", "batch[].cuda", "src.models.utils.get_logits", "torch.multinomial().detach().view", "torch.multinomial().detach().view", "torch.nn.CrossEntropyLoss.", "torch.nn.DataParallel.zero_grad", "loss_fn.backward", "torch.nn.DataParallel.parameters", "print", "torch.multinomial().detach", "torch.multinomial().detach", "len", "torch.multinomial", "torch.multinomial", "torch.softmax"], "function", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.clip.load", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.utils.fisher_save", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.common.get_dataloader", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.common.maybe_dictionarize", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.utils.get_logits"], ["def", "compute_fisher", "(", "args", ")", ":", "\n", "    ", "assert", "args", ".", "load", "is", "not", "None", ",", "\"Please provide the patch to a checkpoint through --load.\"", "\n", "assert", "args", ".", "train_dataset", "is", "not", "None", ",", "\"Please provide a training dataset.\"", "\n", "assert", "args", ".", "fisher", "is", "not", "None", ",", "\"Please provide a path to save the Fisher to through --fisher.\"", "\n", "\n", "save_path", ",", "=", "args", ".", "fisher", "\n", "save_path", "=", "os", ".", "path", ".", "expanduser", "(", "save_path", ")", "\n", "\n", "# Copy the args so we can force the batch size to be 1 without affecting", "\n", "# other parts of the code base.", "\n", "args", "=", "copy", ".", "deepcopy", "(", "args", ")", "\n", "args", ".", "batch_size", "=", "1", "\n", "\n", "model", "=", "ImageClassifier", ".", "load", "(", "os", ".", "path", ".", "expanduser", "(", "args", ".", "load", ")", ")", "\n", "model", ".", "process_images", "=", "True", "\n", "\n", "if", "_TRAIN_PREPROCESSING", ":", "\n", "        ", "preprocess_fn", "=", "model", ".", "train_preprocess", "\n", "", "else", ":", "\n", "        ", "preprocess_fn", "=", "model", ".", "val_preprocess", "\n", "\n", "", "input_key", "=", "'images'", "\n", "\n", "dataset_class", "=", "getattr", "(", "datasets", ",", "args", ".", "train_dataset", ")", "\n", "dataset", "=", "dataset_class", "(", "\n", "preprocess_fn", ",", "\n", "location", "=", "args", ".", "data_location", ",", "\n", "# TODO: See if this needs to be set to 1.", "\n", "batch_size", "=", "args", ".", "batch_size", "\n", ")", "\n", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "devices", "=", "list", "(", "range", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "print", "(", "'Using devices'", ",", "devices", ")", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "devices", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "# NOTE: Not sure if label smoothing makes sense for Fisher", "\n", "# computation.", "\n", "if", "args", ".", "ls", ">", "0", ":", "\n", "        ", "loss_fn", "=", "LabelSmoothing", "(", "args", ".", "ls", ")", "\n", "", "else", ":", "\n", "        ", "loss_fn", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "# Initialize the Fisher accumulators.", "\n", "", "for", "p", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "p", ".", "grad2_acc", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "p", ".", "grad_counter", "=", "0", "\n", "\n", "", "for", "k", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "\n", "        ", "model", ".", "train", "(", ")", "\n", "data_loader", "=", "get_dataloader", "(", "\n", "dataset", ",", "is_train", "=", "_TRAIN_PREPROCESSING", ",", "args", "=", "args", ",", "image_encoder", "=", "None", ")", "\n", "\n", "if", "_N_EXAMPLES_PER_EPOCH", "is", "not", "None", ":", "\n", "            ", "data_loader", "=", "itertools", ".", "islice", "(", "data_loader", ",", "100", ")", "\n", "\n", "", "for", "i", ",", "batch", "in", "enumerate", "(", "tqdm", "(", "data_loader", ",", "leave", "=", "False", ",", "desc", "=", "\"Computing Fisher\"", ")", ")", ":", "\n", "            ", "batch", "=", "maybe_dictionarize", "(", "batch", ")", "\n", "inputs", "=", "batch", "[", "input_key", "]", ".", "cuda", "(", ")", "\n", "\n", "logits", "=", "utils", ".", "get_logits", "(", "inputs", ",", "model", ")", "\n", "\n", "target", "=", "torch", ".", "multinomial", "(", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", ",", "1", ")", ".", "detach", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "loss", "=", "loss_fn", "(", "logits", ",", "target", ")", "\n", "\n", "model", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "for", "p", "in", "model", ".", "parameters", "(", ")", ":", "\n", "                ", "if", "p", ".", "grad", "is", "not", "None", ":", "\n", "                    ", "p", ".", "grad2_acc", "+=", "p", ".", "grad", ".", "data", "**", "2", "\n", "p", ".", "grad_counter", "+=", "1", "\n", "\n", "", "", "", "", "fisher", "=", "{", "}", "\n", "\n", "for", "name", ",", "p", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "name", ".", "startswith", "(", "'module.'", ")", ":", "\n", "            ", "name", "=", "name", "[", "len", "(", "'module.'", ")", ":", "]", "\n", "", "if", "p", ".", "grad_counter", "==", "0", ":", "\n", "            ", "print", "(", "f'No gradients found for parameter: {name}'", ")", "\n", "del", "p", ".", "grad2_acc", "\n", "", "else", ":", "\n", "            ", "p", ".", "grad2_acc", "/=", "p", ".", "grad_counter", "\n", "fisher", "[", "name", "]", "=", "p", ".", "grad2_acc", "\n", "\n", "", "", "fisher_save", "(", "fisher", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.utils.LabelSmoothing.__init__": [[88, 92], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.CLIP.__init__"], []], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.utils.LabelSmoothing.forward": [[93, 101], ["torch.nn.functional.log_softmax", "nll_loss.squeeze.squeeze.squeeze", "loss.mean", "torch.nn.functional.log_softmax.gather", "torch.nn.functional.log_softmax.mean", "target.unsqueeze"], "methods", ["None"], []], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.utils.assign_learning_rate": [[11, 13], ["None"], "function", ["None"], ["        ", "name", "=", "name", "+", "'es'", "\n", "", "elif", "name", "[", "-", "1", ":", "]", "==", "'x'", ":", "\n", "        ", "name", "=", "name", "+", "'es'", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.utils._warmup_lr": [[15, 17], ["None"], "function", ["None"], ["        ", "name", "=", "name", "[", ":", "-", "3", "]", "+", "'men'", "\n", "", "elif", "name", "==", "'mouse'", ":", "\n", "        ", "name", "=", "'mice'", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.utils.cosine_lr": [[19, 33], ["isinstance", "len", "len", "zip", "utils.assign_learning_rate", "utils._warmup_lr", "numpy.cos"], "function", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.utils.assign_learning_rate", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.utils._warmup_lr"], ["        ", "name", "=", "name", "[", ":", "-", "1", "]", "+", "'ves'", "\n", "", "else", ":", "\n", "        ", "name", "=", "name", "+", "'s'", "\n", "", "return", "name", "\n", "\n", "\n", "", "def", "append_proper_article", "(", "name", ")", ":", "\n", "    ", "name", "=", "name", ".", "replace", "(", "'_'", ",", "' '", ")", "\n", "if", "name", "[", "0", "]", "in", "'aeiou'", ":", "\n", "        ", "return", "'an '", "+", "name", "\n", "", "return", "'a '", "+", "name", "\n", "", ""]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.utils.accuracy": [[35, 39], ["[].t", "[].t.eq", "target.view().expand_as", "float", "correct[].reshape().float().sum().cpu().numpy", "output.topk", "target.view", "max", "correct[].reshape().float().sum().cpu", "correct[].reshape().float().sum", "correct[].reshape().float", "correct[].reshape"], "function", ["None"], []], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.utils.torch_save": [[41, 46], ["os.path.dirname", "os.makedirs", "open", "pickle.dump", "os.path.dirname", "classifier.cpu"], "function", ["None"], []], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.utils.torch_load": [[48, 54], ["open", "pickle.load", "classifier.to.to"], "function", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.clip.load"], []], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.utils.fisher_save": [[56, 62], ["os.path.dirname", "os.makedirs", "v.cpu", "open", "pickle.dump", "os.path.dirname", "fisher.items"], "function", ["None"], []], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.utils.fisher_load": [[64, 70], ["open", "pickle.load", "v.to", "pickle.load.items"], "function", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.clip.load"], []], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.utils.get_logits": [[72, 77], ["callable", "hasattr", "classifier.to.", "classifier.to.to"], "function", ["None"], []], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.utils.get_probs": [[79, 85], ["hasattr", "utils.get_logits", "get_logits.softmax", "classifier.predict_proba", "torch.from_numpy", "inputs.detach().cpu().numpy", "inputs.detach().cpu", "inputs.detach"], "function", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.utils.get_logits"], []], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.utils.download_wilds_datasets.main": [[5, 21], ["os.getenv", "print", "print", "wilds.get_dataset", "ValueError", "os.path.expanduser"], "function", ["None"], ["def", "main", "(", ")", ":", "\n", "\n", "    ", "config_datasets", "=", "[", "'fmow'", ",", "'iwildcam'", "]", "\n", "data_location", "=", "os", ".", "getenv", "(", "'DATA_LOCATION'", ")", "\n", "\n", "for", "dataset", "in", "config_datasets", ":", "\n", "        ", "if", "dataset", "not", "in", "wilds", ".", "supported_datasets", ":", "\n", "            ", "raise", "ValueError", "(", "f'{dataset} not recognized.'", ")", "\n", "\n", "", "", "print", "(", "f'Downloading the following datasets: {config_datasets}'", ")", "\n", "for", "dataset", "in", "config_datasets", ":", "\n", "        ", "print", "(", "f'=== {dataset} ==='", ")", "\n", "wilds", ".", "get_dataset", "(", "\n", "dataset", "=", "dataset", ",", "\n", "root_dir", "=", "os", ".", "path", ".", "expanduser", "(", "data_location", ")", ",", "\n", "download", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.tokenizer.SimpleTokenizer.__init__": [[63, 87], ["tokenizer.default_bpe", "tokenizer.bytes_to_unicode", "gzip.open().read().decode().split", "list", "list.extend", "dict", "dict", "regex.compile", "len", "tuple", "bytes_to_unicode().values", "list.append", "zip", "zip", "tokenizer.SimpleTokenizer.byte_encoder.items", "gzip.open().read().decode", "merge.split", "range", "tokenizer.SimpleTokenizer.encoder.items", "range", "tokenizer.bytes_to_unicode", "len", "len", "gzip.open().read", "gzip.open"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.tokenizer.default_bpe", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.tokenizer.bytes_to_unicode", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.tokenizer.SimpleTokenizer.decode", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.tokenizer.bytes_to_unicode"], ["    ", "def", "__init__", "(", "self", ",", "bpe_path", ":", "str", "=", "default_bpe", "(", ")", ",", "special_tokens", "=", "None", ")", ":", "\n", "        ", "self", ".", "byte_encoder", "=", "bytes_to_unicode", "(", ")", "\n", "self", ".", "byte_decoder", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "byte_encoder", ".", "items", "(", ")", "}", "\n", "merges", "=", "gzip", ".", "open", "(", "bpe_path", ")", ".", "read", "(", ")", ".", "decode", "(", "\"utf-8\"", ")", ".", "split", "(", "'\\n'", ")", "\n", "merges", "=", "merges", "[", "1", ":", "49152", "-", "256", "-", "2", "+", "1", "]", "\n", "merges", "=", "[", "tuple", "(", "merge", ".", "split", "(", ")", ")", "for", "merge", "in", "merges", "]", "\n", "vocab", "=", "list", "(", "bytes_to_unicode", "(", ")", ".", "values", "(", ")", ")", "\n", "vocab", "=", "vocab", "+", "[", "v", "+", "'</w>'", "for", "v", "in", "vocab", "]", "\n", "for", "merge", "in", "merges", ":", "\n", "            ", "vocab", ".", "append", "(", "''", ".", "join", "(", "merge", ")", ")", "\n", "", "if", "not", "special_tokens", ":", "\n", "            ", "special_tokens", "=", "[", "'<start_of_text>'", ",", "'<end_of_text>'", "]", "\n", "", "else", ":", "\n", "            ", "special_tokens", "=", "[", "'<start_of_text>'", ",", "'<end_of_text>'", "]", "+", "special_tokens", "\n", "", "vocab", ".", "extend", "(", "special_tokens", ")", "\n", "self", ".", "encoder", "=", "dict", "(", "zip", "(", "vocab", ",", "range", "(", "len", "(", "vocab", ")", ")", ")", ")", "\n", "self", ".", "decoder", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "encoder", ".", "items", "(", ")", "}", "\n", "self", ".", "bpe_ranks", "=", "dict", "(", "zip", "(", "merges", ",", "range", "(", "len", "(", "merges", ")", ")", ")", ")", "\n", "self", ".", "cache", "=", "{", "t", ":", "t", "for", "t", "in", "special_tokens", "}", "\n", "special", "=", "\"|\"", ".", "join", "(", "special_tokens", ")", "\n", "self", ".", "pat", "=", "re", ".", "compile", "(", "special", "+", "r\"\"\"|'s|'t|'re|'ve|'m|'ll|'d|[\\p{L}]+|[\\p{N}]|[^\\s\\p{L}\\p{N}]+\"\"\"", ",", "re", ".", "IGNORECASE", ")", "\n", "\n", "self", ".", "vocab_size", "=", "len", "(", "self", ".", "encoder", ")", "\n", "self", ".", "all_special_ids", "=", "[", "self", ".", "encoder", "[", "t", "]", "for", "t", "in", "special_tokens", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.tokenizer.SimpleTokenizer.bpe": [[88, 128], ["tokenizer.get_pairs", "tuple", "min", "tuple", "len", "len", "tokenizer.get_pairs", "word.index", "tuple.extend", "tuple.append", "tuple.append", "tokenizer.SimpleTokenizer.bpe_ranks.get", "tuple.extend", "float", "len"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.tokenizer.get_pairs", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.tokenizer.get_pairs"], ["", "def", "bpe", "(", "self", ",", "token", ")", ":", "\n", "        ", "if", "token", "in", "self", ".", "cache", ":", "\n", "            ", "return", "self", ".", "cache", "[", "token", "]", "\n", "", "word", "=", "tuple", "(", "token", "[", ":", "-", "1", "]", ")", "+", "(", "token", "[", "-", "1", "]", "+", "'</w>'", ",", ")", "\n", "pairs", "=", "get_pairs", "(", "word", ")", "\n", "\n", "if", "not", "pairs", ":", "\n", "            ", "return", "token", "+", "'</w>'", "\n", "\n", "", "while", "True", ":", "\n", "            ", "bigram", "=", "min", "(", "pairs", ",", "key", "=", "lambda", "pair", ":", "self", ".", "bpe_ranks", ".", "get", "(", "pair", ",", "float", "(", "'inf'", ")", ")", ")", "\n", "if", "bigram", "not", "in", "self", ".", "bpe_ranks", ":", "\n", "                ", "break", "\n", "", "first", ",", "second", "=", "bigram", "\n", "new_word", "=", "[", "]", "\n", "i", "=", "0", "\n", "while", "i", "<", "len", "(", "word", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "j", "=", "word", ".", "index", "(", "first", ",", "i", ")", "\n", "new_word", ".", "extend", "(", "word", "[", "i", ":", "j", "]", ")", "\n", "i", "=", "j", "\n", "", "except", ":", "\n", "                    ", "new_word", ".", "extend", "(", "word", "[", "i", ":", "]", ")", "\n", "break", "\n", "\n", "", "if", "word", "[", "i", "]", "==", "first", "and", "i", "<", "len", "(", "word", ")", "-", "1", "and", "word", "[", "i", "+", "1", "]", "==", "second", ":", "\n", "                    ", "new_word", ".", "append", "(", "first", "+", "second", ")", "\n", "i", "+=", "2", "\n", "", "else", ":", "\n", "                    ", "new_word", ".", "append", "(", "word", "[", "i", "]", ")", "\n", "i", "+=", "1", "\n", "", "", "new_word", "=", "tuple", "(", "new_word", ")", "\n", "word", "=", "new_word", "\n", "if", "len", "(", "word", ")", "==", "1", ":", "\n", "                ", "break", "\n", "", "else", ":", "\n", "                ", "pairs", "=", "get_pairs", "(", "word", ")", "\n", "", "", "word", "=", "' '", ".", "join", "(", "word", ")", "\n", "self", ".", "cache", "[", "token", "]", "=", "word", "\n", "return", "word", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.tokenizer.SimpleTokenizer.encode": [[129, 136], ["whitespace_clean().lower", "regex.findall", "bpe_tokens.extend", "tokenizer.whitespace_clean", "tokenizer.basic_clean", "token.encode", "tokenizer.SimpleTokenizer.bpe().split", "tokenizer.SimpleTokenizer.bpe"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.tokenizer.whitespace_clean", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.tokenizer.basic_clean", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.tokenizer.SimpleTokenizer.encode", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.tokenizer.SimpleTokenizer.bpe"], ["", "def", "encode", "(", "self", ",", "text", ")", ":", "\n", "        ", "bpe_tokens", "=", "[", "]", "\n", "text", "=", "whitespace_clean", "(", "basic_clean", "(", "text", ")", ")", ".", "lower", "(", ")", "\n", "for", "token", "in", "re", ".", "findall", "(", "self", ".", "pat", ",", "text", ")", ":", "\n", "            ", "token", "=", "''", ".", "join", "(", "self", ".", "byte_encoder", "[", "b", "]", "for", "b", "in", "token", ".", "encode", "(", "'utf-8'", ")", ")", "\n", "bpe_tokens", ".", "extend", "(", "self", ".", "encoder", "[", "bpe_token", "]", "for", "bpe_token", "in", "self", ".", "bpe", "(", "token", ")", ".", "split", "(", "' '", ")", ")", "\n", "", "return", "bpe_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.tokenizer.SimpleTokenizer.decode": [[137, 141], ["bytearray().decode().replace", "bytearray().decode", "bytearray"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.tokenizer.SimpleTokenizer.decode"], ["", "def", "decode", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "text", "=", "''", ".", "join", "(", "[", "self", ".", "decoder", "[", "token", "]", "for", "token", "in", "tokens", "]", ")", "\n", "text", "=", "bytearray", "(", "[", "self", ".", "byte_decoder", "[", "c", "]", "for", "c", "in", "text", "]", ")", ".", "decode", "(", "'utf-8'", ",", "errors", "=", "\"replace\"", ")", ".", "replace", "(", "'</w>'", ",", "' '", ")", "\n", "return", "text", "", "", "", ""]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.tokenizer.default_bpe": [[10, 13], ["functools.lru_cache", "os.path.join", "os.path.dirname", "os.path.abspath"], "function", ["None"], ["@", "lru_cache", "(", ")", "\n", "def", "default_bpe", "(", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", ",", "\"bpe_simple_vocab_16e6.txt.gz\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.tokenizer.bytes_to_unicode": [[15, 36], ["functools.lru_cache", "range", "dict", "list", "chr", "zip", "list", "list", "range", "bs.append", "cs.append", "range", "range", "ord", "ord", "ord", "ord", "ord", "ord"], "function", ["None"], ["", "@", "lru_cache", "(", ")", "\n", "def", "bytes_to_unicode", "(", ")", ":", "\n", "    ", "\"\"\"\n    Returns list of utf-8 byte and a corresponding list of unicode strings.\n    The reversible bpe codes work on unicode strings.\n    This means you need a large # of unicode characters in your vocab if you want to avoid UNKs.\n    When you're at something like a 10B token dataset you end up needing around 5K for decent coverage.\n    This is a signficant percentage of your normal, say, 32K bpe vocab.\n    To avoid that, we want lookup tables between utf-8 bytes and unicode strings.\n    And avoids mapping to whitespace/control characters the bpe code barfs on.\n    \"\"\"", "\n", "bs", "=", "list", "(", "range", "(", "ord", "(", "\"!\"", ")", ",", "ord", "(", "\"~\"", ")", "+", "1", ")", ")", "+", "list", "(", "range", "(", "ord", "(", "\"\u00a1\"", ")", ",", "ord", "(", "\"\u00ac\"", ")", "+", "1", ")", ")", "+", "list", "(", "range", "(", "ord", "(", "\"\u00ae\"", ")", ",", "ord", "(", "\"\u00ff\"", ")", "+", "1", ")", ")", "\n", "cs", "=", "bs", "[", ":", "]", "\n", "n", "=", "0", "\n", "for", "b", "in", "range", "(", "2", "**", "8", ")", ":", "\n", "        ", "if", "b", "not", "in", "bs", ":", "\n", "            ", "bs", ".", "append", "(", "b", ")", "\n", "cs", ".", "append", "(", "2", "**", "8", "+", "n", ")", "\n", "n", "+=", "1", "\n", "", "", "cs", "=", "[", "chr", "(", "n", ")", "for", "n", "in", "cs", "]", "\n", "return", "dict", "(", "zip", "(", "bs", ",", "cs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.tokenizer.get_pairs": [[38, 48], ["set", "set.add"], "function", ["None"], ["", "def", "get_pairs", "(", "word", ")", ":", "\n", "    ", "\"\"\"Return set of symbol pairs in a word.\n    Word is represented as tuple of symbols (symbols being variable-length strings).\n    \"\"\"", "\n", "pairs", "=", "set", "(", ")", "\n", "prev_char", "=", "word", "[", "0", "]", "\n", "for", "char", "in", "word", "[", "1", ":", "]", ":", "\n", "        ", "pairs", ".", "add", "(", "(", "prev_char", ",", "char", ")", ")", "\n", "prev_char", "=", "char", "\n", "", "return", "pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.tokenizer.basic_clean": [[50, 54], ["ftfy.fix_text", "html.unescape", "html.unescape.strip", "html.unescape"], "function", ["None"], ["", "def", "basic_clean", "(", "text", ")", ":", "\n", "    ", "text", "=", "ftfy", ".", "fix_text", "(", "text", ")", "\n", "text", "=", "html", ".", "unescape", "(", "html", ".", "unescape", "(", "text", ")", ")", "\n", "return", "text", ".", "strip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.tokenizer.whitespace_clean": [[56, 60], ["regex.sub", "text.strip.strip"], "function", ["None"], ["", "def", "whitespace_clean", "(", "text", ")", ":", "\n", "    ", "text", "=", "re", ".", "sub", "(", "r'\\s+'", ",", "' '", ",", "text", ")", "\n", "text", "=", "text", ".", "strip", "(", ")", "\n", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.clip._download": [[30, 60], ["os.path.expanduser", "os.makedirs", "os.path.basename", "os.path.join", "os.path.isfile", "url.split", "os.path.exists", "RuntimeError", "urllib.request.urlopen", "open", "hashlib.sha256().hexdigest", "RuntimeError", "os.path.isfile", "hashlib.sha256().hexdigest", "warnings.warn", "tqdm.tqdm", "source.read", "output.write", "loop.update", "hashlib.sha256", "hashlib.sha256", "int", "len", "open().read", "open().read", "source.info().get", "open", "open", "source.info"], "function", ["None"], ["def", "_download", "(", "url", ":", "str", ",", "root", ":", "str", "=", "os", ".", "path", ".", "expanduser", "(", "\"~/.cache/clip\"", ")", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "root", ",", "exist_ok", "=", "True", ")", "\n", "filename", "=", "os", ".", "path", ".", "basename", "(", "url", ")", "\n", "\n", "expected_sha256", "=", "url", ".", "split", "(", "\"/\"", ")", "[", "-", "2", "]", "\n", "download_target", "=", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "download_target", ")", "and", "not", "os", ".", "path", ".", "isfile", "(", "download_target", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "f\"{download_target} exists and is not a regular file\"", ")", "\n", "\n", "", "if", "os", ".", "path", ".", "isfile", "(", "download_target", ")", ":", "\n", "        ", "if", "hashlib", ".", "sha256", "(", "open", "(", "download_target", ",", "\"rb\"", ")", ".", "read", "(", ")", ")", ".", "hexdigest", "(", ")", "==", "expected_sha256", ":", "\n", "            ", "return", "download_target", "\n", "", "else", ":", "\n", "            ", "warnings", ".", "warn", "(", "f\"{download_target} exists, but the SHA256 checksum does not match; re-downloading the file\"", ")", "\n", "\n", "", "", "with", "urllib", ".", "request", ".", "urlopen", "(", "url", ")", "as", "source", ",", "open", "(", "download_target", ",", "\"wb\"", ")", "as", "output", ":", "\n", "        ", "with", "tqdm", "(", "total", "=", "int", "(", "source", ".", "info", "(", ")", ".", "get", "(", "\"Content-Length\"", ")", ")", ",", "ncols", "=", "80", ",", "unit", "=", "'iB'", ",", "unit_scale", "=", "True", ")", "as", "loop", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "buffer", "=", "source", ".", "read", "(", "8192", ")", "\n", "if", "not", "buffer", ":", "\n", "                    ", "break", "\n", "\n", "", "output", ".", "write", "(", "buffer", ")", "\n", "loop", ".", "update", "(", "len", "(", "buffer", ")", ")", "\n", "\n", "", "", "", "if", "hashlib", ".", "sha256", "(", "open", "(", "download_target", ",", "\"rb\"", ")", ".", "read", "(", ")", ")", ".", "hexdigest", "(", ")", "!=", "expected_sha256", ":", "\n", "        ", "raise", "RuntimeError", "(", "f\"Model has been downloaded but the SHA256 checksum does not not match\"", ")", "\n", "\n", "", "return", "download_target", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.clip._convert_to_rgb": [[61, 63], ["image.convert"], "function", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.datasets.cifar10.convert"], ["", "def", "_convert_to_rgb", "(", "image", ")", ":", "\n", "    ", "return", "image", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.clip._transform": [[64, 80], ["torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor"], "function", ["None"], ["", "def", "_transform", "(", "n_px", ":", "int", ",", "is_train", ":", "bool", ")", ":", "\n", "    ", "normalize", "=", "Normalize", "(", "(", "0.48145466", ",", "0.4578275", ",", "0.40821073", ")", ",", "(", "0.26862954", ",", "0.26130258", ",", "0.27577711", ")", ")", "\n", "if", "is_train", ":", "\n", "        ", "return", "Compose", "(", "[", "\n", "RandomResizedCrop", "(", "n_px", ",", "scale", "=", "(", "0.9", ",", "1.0", ")", ",", "interpolation", "=", "Image", ".", "BICUBIC", ")", ",", "\n", "_convert_to_rgb", ",", "\n", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "", "else", ":", "\n", "        ", "return", "Compose", "(", "[", "\n", "Resize", "(", "n_px", ",", "interpolation", "=", "Image", ".", "BICUBIC", ")", ",", "\n", "CenterCrop", "(", "n_px", ")", ",", "\n", "_convert_to_rgb", ",", "\n", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.clip.available_models": [[84, 87], ["list", "_MODELS.keys"], "function", ["None"], ["", "", "def", "available_models", "(", ")", "->", "List", "[", "str", "]", ":", "\n", "    ", "\"\"\"Returns the names of available CLIP models\"\"\"", "\n", "return", "list", "(", "_MODELS", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.clip.load": [[89, 182], ["torch.jit.trace", "build_model().to.apply", "clip.load.patch_device"], "function", ["None"], ["", "def", "load", "(", "name", ":", "str", ",", "device", ":", "Union", "[", "str", ",", "torch", ".", "device", "]", "=", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ",", "jit", "=", "True", ",", "is_train", "=", "False", ",", "pretrained", "=", "True", ")", ":", "\n", "    ", "\"\"\"Load a CLIP model\n    Parameters\n    ----------\n    name : str\n        A model name listed by `clip.available_models()`, or the path to a model checkpoint containing the state_dict\n    device : Union[str, torch.device]\n        The device to put the loaded model\n    jit : bool\n        Whether to load the optimized JIT model (default) or more hackable non-JIT model.\n    Returns\n    -------\n    model : torch.nn.Module\n        The CLIP model\n    preprocess : Callable[[PIL.Image], torch.Tensor]\n        A torchvision transform that converts a PIL image into a tensor that the returned model can take as its input\n    \"\"\"", "\n", "if", "name", "in", "_MODELS", ":", "\n", "        ", "model_path", "=", "_download", "(", "_MODELS", "[", "name", "]", ")", "\n", "", "elif", "os", ".", "path", ".", "isfile", "(", "name", ")", ":", "\n", "        ", "model_path", "=", "name", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "f\"Model {name} not found; available models = {available_models()}\"", ")", "\n", "\n", "", "try", ":", "\n", "# loading JIT archive", "\n", "        ", "model", "=", "torch", ".", "jit", ".", "load", "(", "model_path", ",", "map_location", "=", "device", "if", "jit", "else", "\"cpu\"", ")", ".", "eval", "(", ")", "\n", "state_dict", "=", "None", "\n", "", "except", "RuntimeError", ":", "\n", "# loading saved state dict", "\n", "        ", "if", "jit", ":", "\n", "            ", "warnings", ".", "warn", "(", "f\"File {model_path} is not a JIT archive. Loading as a state dict instead\"", ")", "\n", "jit", "=", "False", "\n", "", "state_dict", "=", "torch", ".", "load", "(", "model_path", ",", "map_location", "=", "\"cpu\"", ")", "\n", "\n", "", "if", "not", "jit", ":", "\n", "        ", "try", ":", "\n", "            ", "model", "=", "build_model", "(", "state_dict", "or", "model", ".", "state_dict", "(", ")", ")", ".", "to", "(", "device", ")", "\n", "", "except", "KeyError", ":", "\n", "            ", "sd", "=", "{", "k", "[", "7", ":", "]", ":", "v", "for", "k", ",", "v", "in", "state_dict", "[", "\"state_dict\"", "]", ".", "items", "(", ")", "}", "\n", "model", "=", "build_model", "(", "sd", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "if", "str", "(", "device", ")", "==", "\"cpu\"", ":", "\n", "            ", "model", ".", "float", "(", ")", "\n", "", "return", "model", ",", "_transform", "(", "model", ".", "visual", ".", "input_resolution", ",", "is_train", "=", "True", ")", ",", "_transform", "(", "model", ".", "visual", ".", "input_resolution", ",", "is_train", "=", "False", ")", "\n", "\n", "# patch the device names", "\n", "", "device_holder", "=", "torch", ".", "jit", ".", "trace", "(", "lambda", ":", "torch", ".", "ones", "(", "[", "]", ")", ".", "to", "(", "torch", ".", "device", "(", "device", ")", ")", ",", "example_inputs", "=", "[", "]", ")", "\n", "device_node", "=", "[", "n", "for", "n", "in", "device_holder", ".", "graph", ".", "findAllNodes", "(", "\"prim::Constant\"", ")", "if", "\"Device\"", "in", "repr", "(", "n", ")", "]", "[", "-", "1", "]", "\n", "\n", "def", "patch_device", "(", "module", ")", ":", "\n", "        ", "graphs", "=", "[", "module", ".", "graph", "]", "if", "hasattr", "(", "module", ",", "\"graph\"", ")", "else", "[", "]", "\n", "if", "hasattr", "(", "module", ",", "\"forward1\"", ")", ":", "\n", "            ", "graphs", ".", "append", "(", "module", ".", "forward1", ".", "graph", ")", "\n", "\n", "", "for", "graph", "in", "graphs", ":", "\n", "            ", "for", "node", "in", "graph", ".", "findAllNodes", "(", "\"prim::Constant\"", ")", ":", "\n", "                ", "if", "\"value\"", "in", "node", ".", "attributeNames", "(", ")", "and", "str", "(", "node", "[", "\"value\"", "]", ")", ".", "startswith", "(", "\"cuda\"", ")", ":", "\n", "                    ", "node", ".", "copyAttributes", "(", "device_node", ")", "\n", "\n", "", "", "", "", "model", ".", "apply", "(", "patch_device", ")", "\n", "patch_device", "(", "model", ".", "encode_image", ")", "\n", "patch_device", "(", "model", ".", "encode_text", ")", "\n", "\n", "# patch dtype to float32 on CPU", "\n", "if", "str", "(", "device", ")", "==", "\"cpu\"", ":", "\n", "        ", "float_holder", "=", "torch", ".", "jit", ".", "trace", "(", "lambda", ":", "torch", ".", "ones", "(", "[", "]", ")", ".", "float", "(", ")", ",", "example_inputs", "=", "[", "]", ")", "\n", "float_input", "=", "list", "(", "float_holder", ".", "graph", ".", "findNode", "(", "\"aten::to\"", ")", ".", "inputs", "(", ")", ")", "[", "1", "]", "\n", "float_node", "=", "float_input", ".", "node", "(", ")", "\n", "\n", "def", "patch_float", "(", "module", ")", ":", "\n", "            ", "graphs", "=", "[", "module", ".", "graph", "]", "if", "hasattr", "(", "module", ",", "\"graph\"", ")", "else", "[", "]", "\n", "if", "hasattr", "(", "module", ",", "\"forward1\"", ")", ":", "\n", "                ", "graphs", ".", "append", "(", "module", ".", "forward1", ".", "graph", ")", "\n", "\n", "", "for", "graph", "in", "graphs", ":", "\n", "                ", "for", "node", "in", "graph", ".", "findAllNodes", "(", "\"aten::to\"", ")", ":", "\n", "                    ", "inputs", "=", "list", "(", "node", ".", "inputs", "(", ")", ")", "\n", "for", "i", "in", "[", "1", ",", "2", "]", ":", "# dtype can be the second or third argument to aten::to()", "\n", "                        ", "if", "inputs", "[", "i", "]", ".", "node", "(", ")", "[", "\"value\"", "]", "==", "5", ":", "\n", "                            ", "inputs", "[", "i", "]", ".", "node", "(", ")", ".", "copyAttributes", "(", "float_node", ")", "\n", "\n", "", "", "", "", "", "model", ".", "apply", "(", "patch_float", ")", "\n", "patch_float", "(", "model", ".", "encode_image", ")", "\n", "patch_float", "(", "model", ".", "encode_text", ")", "\n", "\n", "model", ".", "float", "(", ")", "\n", "\n", "", "return", "model", ",", "_transform", "(", "model", ".", "input_resolution", ".", "item", "(", ")", ",", "is_train", "=", "True", ")", ",", "_transform", "(", "model", ".", "input_resolution", ".", "item", "(", ")", ",", "is_train", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.clip.tokenize": [[184, 211], ["isinstance", "torch.zeros", "enumerate", "len", "torch.tensor", "len", "_tokenizer.encode", "len"], "function", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.tokenizer.SimpleTokenizer.encode"], ["", "def", "tokenize", "(", "texts", ":", "Union", "[", "str", ",", "List", "[", "str", "]", "]", ",", "context_length", ":", "int", "=", "77", ")", "->", "torch", ".", "LongTensor", ":", "\n", "    ", "\"\"\"\n    Returns the tokenized representation of given input string(s)\n    Parameters\n    ----------\n    texts : Union[str, List[str]]\n        An input string or a list of input strings to tokenize\n    context_length : int\n        The context length to use; all CLIP models use 77 as the context length\n    Returns\n    -------\n    A two-dimensional tensor containing the resulting tokens, shape = [number of input strings, context_length]\n    \"\"\"", "\n", "if", "isinstance", "(", "texts", ",", "str", ")", ":", "\n", "        ", "texts", "=", "[", "texts", "]", "\n", "\n", "", "sot_token", "=", "_tokenizer", ".", "encoder", "[", "\"<start_of_text>\"", "]", "\n", "eot_token", "=", "_tokenizer", ".", "encoder", "[", "\"<end_of_text>\"", "]", "\n", "all_tokens", "=", "[", "[", "sot_token", "]", "+", "_tokenizer", ".", "encode", "(", "text", ")", "+", "[", "eot_token", "]", "for", "text", "in", "texts", "]", "\n", "result", "=", "torch", ".", "zeros", "(", "len", "(", "all_tokens", ")", ",", "context_length", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "for", "i", ",", "tokens", "in", "enumerate", "(", "all_tokens", ")", ":", "\n", "        ", "if", "len", "(", "tokens", ")", ">", "context_length", ":", "# Truncate", "\n", "            ", "tokens", "=", "tokens", "[", ":", "context_length", "]", "\n", "", "result", "[", "i", ",", ":", "len", "(", "tokens", ")", "]", "=", "torch", ".", "tensor", "(", "tokens", ")", "\n", "\n", "", "return", "result", "", "", ""]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.Bottleneck.__init__": [[15, 40], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Sequential", "torch.nn.Sequential", "collections.OrderedDict", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.CLIP.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# all conv layers have stride 1. an avgpool is performed after the second convolution when stride > 1", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "stride", ")", "if", "stride", ">", "1", "else", "nn", ".", "Identity", "(", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "None", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "if", "stride", ">", "1", "or", "inplanes", "!=", "planes", "*", "Bottleneck", ".", "expansion", ":", "\n", "# downsampling layer is prepended with an avgpool, and the subsequent convolution has stride 1", "\n", "            ", "self", ".", "downsample", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "\"-1\"", ",", "nn", ".", "AvgPool2d", "(", "stride", ")", ")", ",", "\n", "(", "\"0\"", ",", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", "*", "self", ".", "expansion", ",", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "\"1\"", ",", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", ")", "\n", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.Bottleneck.forward": [[42, 56], ["model.Bottleneck.relu", "model.Bottleneck.relu", "model.Bottleneck.avgpool", "model.Bottleneck.bn3", "model.Bottleneck.relu", "model.Bottleneck.bn1", "model.Bottleneck.bn2", "model.Bottleneck.conv3", "model.Bottleneck.downsample", "model.Bottleneck.conv1", "model.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "avgpool", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.AttentionPool2d.__init__": [[59, 67], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.CLIP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "spacial_dim", ":", "int", ",", "embed_dim", ":", "int", ",", "num_heads", ":", "int", ",", "output_dim", ":", "int", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "positional_embedding", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "spacial_dim", "**", "2", "+", "1", ",", "embed_dim", ")", "/", "embed_dim", "**", "0.5", ")", "\n", "self", ".", "k_proj", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "embed_dim", ")", "\n", "self", ".", "q_proj", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "embed_dim", ")", "\n", "self", ".", "v_proj", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "embed_dim", ")", "\n", "self", ".", "c_proj", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "output_dim", "or", "embed_dim", ")", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.AttentionPool2d.forward": [[68, 93], ["torch.cat.reshape().permute", "torch.cat.reshape().permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.multi_head_attention_forward", "torch.multi_head_attention_forward", "model.AttentionPool2d.positional_embedding[].to", "torch.cat.reshape", "torch.cat.reshape", "torch.cat.mean", "torch.cat.mean", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "reshape", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ",", "x", ".", "shape", "[", "2", "]", "*", "x", ".", "shape", "[", "3", "]", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "# NCHW -> (HW)NC", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ".", "mean", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", ",", "x", "]", ",", "dim", "=", "0", ")", "# (HW+1)NC", "\n", "x", "=", "x", "+", "self", ".", "positional_embedding", "[", ":", ",", "None", ",", ":", "]", ".", "to", "(", "x", ".", "dtype", ")", "# (HW+1)NC", "\n", "x", ",", "_", "=", "F", ".", "multi_head_attention_forward", "(", "\n", "query", "=", "x", ",", "key", "=", "x", ",", "value", "=", "x", ",", "\n", "embed_dim_to_check", "=", "x", ".", "shape", "[", "-", "1", "]", ",", "\n", "num_heads", "=", "self", ".", "num_heads", ",", "\n", "q_proj_weight", "=", "self", ".", "q_proj", ".", "weight", ",", "\n", "k_proj_weight", "=", "self", ".", "k_proj", ".", "weight", ",", "\n", "v_proj_weight", "=", "self", ".", "v_proj", ".", "weight", ",", "\n", "in_proj_weight", "=", "None", ",", "\n", "in_proj_bias", "=", "torch", ".", "cat", "(", "[", "self", ".", "q_proj", ".", "bias", ",", "self", ".", "k_proj", ".", "bias", ",", "self", ".", "v_proj", ".", "bias", "]", ")", ",", "\n", "bias_k", "=", "None", ",", "\n", "bias_v", "=", "None", ",", "\n", "add_zero_attn", "=", "False", ",", "\n", "dropout_p", "=", "0", ",", "\n", "out_proj_weight", "=", "self", ".", "c_proj", ".", "weight", ",", "\n", "out_proj_bias", "=", "self", ".", "c_proj", ".", "bias", ",", "\n", "use_separate_proj_weight", "=", "True", ",", "\n", "training", "=", "self", ".", "training", ",", "\n", "need_weights", "=", "False", "\n", ")", "\n", "\n", "return", "x", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.ModifiedResNet.__init__": [[103, 127], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.ReLU", "torch.nn.ReLU", "model.ModifiedResNet._make_layer", "model.ModifiedResNet._make_layer", "model.ModifiedResNet._make_layer", "model.ModifiedResNet._make_layer", "model.AttentionPool2d"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.CLIP.__init__", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.ModifiedResNet._make_layer", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.ModifiedResNet._make_layer", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.ModifiedResNet._make_layer", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.ModifiedResNet._make_layer"], ["def", "__init__", "(", "self", ",", "layers", ",", "output_dim", ",", "heads", ",", "input_resolution", "=", "224", ",", "width", "=", "64", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "input_resolution", "=", "input_resolution", "\n", "\n", "# the 3-layer stem", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "width", "//", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "width", "//", "2", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "width", "//", "2", ",", "width", "//", "2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "width", "//", "2", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "width", "//", "2", ",", "width", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "width", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "# residual layers", "\n", "self", ".", "_inplanes", "=", "width", "# this is a *mutable* variable used during construction", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "width", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "width", "*", "2", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "width", "*", "4", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "width", "*", "8", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "\n", "embed_dim", "=", "width", "*", "32", "# the ResNet feature dimension", "\n", "self", ".", "attnpool", "=", "AttentionPool2d", "(", "input_resolution", "//", "32", ",", "embed_dim", ",", "heads", ",", "output_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.ModifiedResNet._make_layer": [[128, 136], ["range", "torch.nn.Sequential", "torch.nn.Sequential", "model.Bottleneck", "layers.append", "model.Bottleneck"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "layers", "=", "[", "Bottleneck", "(", "self", ".", "_inplanes", ",", "planes", ",", "stride", ")", "]", "\n", "\n", "self", ".", "_inplanes", "=", "planes", "*", "Bottleneck", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "Bottleneck", "(", "self", ".", "_inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.ModifiedResNet.forward": [[137, 153], ["model.ModifiedResNet.type", "model.ModifiedResNet.forward.stem"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "def", "stem", "(", "x", ")", ":", "\n", "            ", "for", "conv", ",", "bn", "in", "[", "(", "self", ".", "conv1", ",", "self", ".", "bn1", ")", ",", "(", "self", ".", "conv2", ",", "self", ".", "bn2", ")", ",", "(", "self", ".", "conv3", ",", "self", ".", "bn3", ")", "]", ":", "\n", "                ", "x", "=", "self", ".", "relu", "(", "bn", "(", "conv", "(", "x", ")", ")", ")", "\n", "", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "return", "x", "\n", "\n", "", "x", "=", "x", ".", "type", "(", "self", ".", "conv1", ".", "weight", ".", "dtype", ")", "\n", "x", "=", "stem", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x", "=", "self", ".", "attnpool", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.LayerNorm.forward": [[158, 162], ["super().forward", "super().forward.type", "x.type"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.CLIP.forward"], ["def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "orig_type", "=", "x", ".", "dtype", "\n", "ret", "=", "super", "(", ")", ".", "forward", "(", "x", ".", "type", "(", "torch", ".", "float32", ")", ")", "\n", "return", "ret", ".", "type", "(", "orig_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.QuickGELU.forward": [[165, 167], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "x", "*", "torch", ".", "sigmoid", "(", "1.702", "*", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.ResidualAttentionBlock.__init__": [[170, 182], ["torch.nn.Module.__init__", "torch.nn.MultiheadAttention", "torch.nn.MultiheadAttention", "model.LayerNorm", "torch.nn.Sequential", "torch.nn.Sequential", "model.LayerNorm", "collections.OrderedDict", "torch.nn.Linear", "torch.nn.Linear", "model.QuickGELU", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.CLIP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ":", "int", ",", "n_head", ":", "int", ",", "attn_mask", ":", "torch", ".", "Tensor", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "attn", "=", "nn", ".", "MultiheadAttention", "(", "d_model", ",", "n_head", ")", "\n", "self", ".", "ln_1", "=", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "mlp", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "\"c_fc\"", ",", "nn", ".", "Linear", "(", "d_model", ",", "d_model", "*", "4", ")", ")", ",", "\n", "(", "\"gelu\"", ",", "QuickGELU", "(", ")", ")", ",", "\n", "(", "\"c_proj\"", ",", "nn", ".", "Linear", "(", "d_model", "*", "4", ",", "d_model", ")", ")", "\n", "]", ")", ")", "\n", "self", ".", "ln_2", "=", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "attn_mask", "=", "attn_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.ResidualAttentionBlock.attention": [[183, 186], ["model.ResidualAttentionBlock.attn_mask.to", "model.ResidualAttentionBlock.attn"], "methods", ["None"], ["", "def", "attention", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "self", ".", "attn_mask", "=", "self", ".", "attn_mask", ".", "to", "(", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "if", "self", ".", "attn_mask", "is", "not", "None", "else", "None", "\n", "return", "self", ".", "attn", "(", "x", ",", "x", ",", "x", ",", "need_weights", "=", "False", ",", "attn_mask", "=", "self", ".", "attn_mask", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.ResidualAttentionBlock.forward": [[187, 191], ["model.ResidualAttentionBlock.attention", "model.ResidualAttentionBlock.mlp", "model.ResidualAttentionBlock.ln_1", "model.ResidualAttentionBlock.ln_2"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.ResidualAttentionBlock.attention"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "x", "=", "x", "+", "self", ".", "attention", "(", "self", ".", "ln_1", "(", "x", ")", ")", "\n", "x", "=", "x", "+", "self", ".", "mlp", "(", "self", ".", "ln_2", "(", "x", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.Transformer.__init__": [[194, 199], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "model.ResidualAttentionBlock", "range"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.CLIP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "width", ":", "int", ",", "layers", ":", "int", ",", "heads", ":", "int", ",", "attn_mask", ":", "torch", ".", "Tensor", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "layers", "=", "layers", "\n", "self", ".", "resblocks", "=", "nn", ".", "Sequential", "(", "*", "[", "ResidualAttentionBlock", "(", "width", ",", "heads", ",", "attn_mask", ")", "for", "_", "in", "range", "(", "layers", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.Transformer.forward": [[200, 202], ["model.Transformer.resblocks"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "self", ".", "resblocks", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.VisualTransformer.__init__": [[205, 226], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "model.LayerNorm", "model.Transformer", "model.LayerNorm", "torch.nn.Parameter", "torch.nn.Parameter", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.CLIP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_resolution", ":", "int", ",", "patch_size", ":", "int", ",", "width", ":", "int", ",", "layers", ":", "int", ",", "heads", ":", "int", ",", "output_dim", ":", "int", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_resolution", "=", "input_resolution", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "# Added so this info is available. should not change anything.", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "layers", "=", "layers", "\n", "self", ".", "heads", "=", "heads", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "width", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ",", "bias", "=", "False", ")", "\n", "\n", "scale", "=", "width", "**", "-", "0.5", "\n", "self", ".", "class_embedding", "=", "nn", ".", "Parameter", "(", "scale", "*", "torch", ".", "randn", "(", "width", ")", ")", "\n", "self", ".", "positional_embedding", "=", "nn", ".", "Parameter", "(", "scale", "*", "torch", ".", "randn", "(", "(", "input_resolution", "//", "patch_size", ")", "**", "2", "+", "1", ",", "width", ")", ")", "\n", "self", ".", "ln_pre", "=", "LayerNorm", "(", "width", ")", "\n", "\n", "self", ".", "transformer", "=", "Transformer", "(", "width", ",", "layers", ",", "heads", ")", "\n", "\n", "self", ".", "ln_post", "=", "LayerNorm", "(", "width", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Parameter", "(", "scale", "*", "torch", ".", "randn", "(", "width", ",", "output_dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.VisualTransformer.forward": [[227, 245], ["model.VisualTransformer.conv1", "model.VisualTransformer.reshape", "model.VisualTransformer.permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.VisualTransformer.ln_pre", "model.VisualTransformer.permute", "model.VisualTransformer.transformer", "model.VisualTransformer.permute", "model.VisualTransformer.ln_post", "model.VisualTransformer.positional_embedding.to", "model.VisualTransformer.class_embedding.to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "# shape = [*, width, grid, grid]", "\n", "x", "=", "x", ".", "reshape", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "# shape = [*, width, grid ** 2]", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# shape = [*, grid ** 2, width]", "\n", "x", "=", "torch", ".", "cat", "(", "[", "self", ".", "class_embedding", ".", "to", "(", "x", ".", "dtype", ")", "+", "torch", ".", "zeros", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "x", ".", "shape", "[", "-", "1", "]", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", ",", "x", "]", ",", "dim", "=", "1", ")", "# shape = [*, grid ** 2 + 1, width]", "\n", "x", "=", "x", "+", "self", ".", "positional_embedding", ".", "to", "(", "x", ".", "dtype", ")", "\n", "x", "=", "self", ".", "ln_pre", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "# NLD -> LND", "\n", "x", "=", "self", ".", "transformer", "(", "x", ")", "\n", "x", "=", "x", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "# LND -> NLD", "\n", "\n", "x", "=", "self", ".", "ln_post", "(", "x", "[", ":", ",", "0", ",", ":", "]", ")", "\n", "\n", "if", "self", ".", "proj", "is", "not", "None", ":", "\n", "            ", "x", "=", "x", "@", "self", ".", "proj", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.CLIP.__init__": [[248, 302], ["torch.nn.Module.__init__", "isinstance", "model.Transformer", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Parameter", "torch.nn.Parameter", "model.LayerNorm", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "model.CLIP.initialize_parameters", "model.ModifiedResNet", "model.VisualTransformer", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "model.CLIP.build_attention_mask", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.CLIP.__init__", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.CLIP.initialize_parameters", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.CLIP.build_attention_mask"], ["    ", "def", "__init__", "(", "self", ",", "\n", "embed_dim", ":", "int", ",", "\n", "# vision", "\n", "image_resolution", ":", "int", ",", "\n", "vision_layers", ":", "Union", "[", "Tuple", "[", "int", ",", "int", ",", "int", ",", "int", "]", ",", "int", "]", ",", "\n", "vision_width", ":", "int", ",", "\n", "vision_patch_size", ":", "int", ",", "\n", "# text", "\n", "context_length", ":", "int", ",", "\n", "vocab_size", ":", "int", ",", "\n", "transformer_width", ":", "int", ",", "\n", "transformer_heads", ":", "int", ",", "\n", "transformer_layers", ":", "int", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "context_length", "=", "context_length", "\n", "\n", "if", "isinstance", "(", "vision_layers", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "vision_heads", "=", "vision_width", "*", "32", "//", "64", "\n", "self", ".", "visual", "=", "ModifiedResNet", "(", "\n", "layers", "=", "vision_layers", ",", "\n", "output_dim", "=", "embed_dim", ",", "\n", "heads", "=", "vision_heads", ",", "\n", "input_resolution", "=", "image_resolution", ",", "\n", "width", "=", "vision_width", "\n", ")", "\n", "", "else", ":", "\n", "            ", "vision_heads", "=", "vision_width", "//", "64", "\n", "self", ".", "visual", "=", "VisualTransformer", "(", "\n", "input_resolution", "=", "image_resolution", ",", "\n", "patch_size", "=", "vision_patch_size", ",", "\n", "width", "=", "vision_width", ",", "\n", "layers", "=", "vision_layers", ",", "\n", "heads", "=", "vision_heads", ",", "\n", "output_dim", "=", "embed_dim", "\n", ")", "\n", "\n", "", "self", ".", "transformer", "=", "Transformer", "(", "\n", "width", "=", "transformer_width", ",", "\n", "layers", "=", "transformer_layers", ",", "\n", "heads", "=", "transformer_heads", ",", "\n", "attn_mask", "=", "self", ".", "build_attention_mask", "(", ")", "\n", ")", "\n", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "token_embedding", "=", "nn", ".", "Embedding", "(", "vocab_size", ",", "transformer_width", ")", "\n", "self", ".", "positional_embedding", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "self", ".", "context_length", ",", "transformer_width", ")", ")", "\n", "self", ".", "ln_final", "=", "LayerNorm", "(", "transformer_width", ")", "\n", "\n", "self", ".", "text_projection", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "transformer_width", ",", "embed_dim", ")", ")", "\n", "self", ".", "logit_scale", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "[", "]", ")", "*", "np", ".", "log", "(", "1", "/", "0.07", ")", ")", "\n", "\n", "self", ".", "initialize_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.CLIP.initialize_parameters": [[303, 332], ["torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.Parameter", "torch.nn.Parameter", "isinstance", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "numpy.log", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "resnet_block.named_parameters", "name.endswith", "torch.nn.init.zeros_", "torch.nn.init.zeros_"], "methods", ["None"], ["", "def", "initialize_parameters", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "normal_", "(", "self", ".", "token_embedding", ".", "weight", ",", "std", "=", "0.02", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "positional_embedding", ",", "std", "=", "0.01", ")", "\n", "self", ".", "logit_scale", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "[", "]", ")", "*", "np", ".", "log", "(", "1", "/", "0.07", ")", ")", "\n", "\n", "if", "isinstance", "(", "self", ".", "visual", ",", "ModifiedResNet", ")", ":", "\n", "            ", "if", "self", ".", "visual", ".", "attnpool", "is", "not", "None", ":", "\n", "                ", "std", "=", "self", ".", "visual", ".", "attnpool", ".", "c_proj", ".", "in_features", "**", "-", "0.5", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "visual", ".", "attnpool", ".", "q_proj", ".", "weight", ",", "std", "=", "std", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "visual", ".", "attnpool", ".", "k_proj", ".", "weight", ",", "std", "=", "std", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "visual", ".", "attnpool", ".", "v_proj", ".", "weight", ",", "std", "=", "std", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "visual", ".", "attnpool", ".", "c_proj", ".", "weight", ",", "std", "=", "std", ")", "\n", "\n", "", "for", "resnet_block", "in", "[", "self", ".", "visual", ".", "layer1", ",", "self", ".", "visual", ".", "layer2", ",", "self", ".", "visual", ".", "layer3", ",", "self", ".", "visual", ".", "layer4", "]", ":", "\n", "                ", "for", "name", ",", "param", "in", "resnet_block", ".", "named_parameters", "(", ")", ":", "\n", "                    ", "if", "name", ".", "endswith", "(", "\"bn3.weight\"", ")", ":", "\n", "                        ", "nn", ".", "init", ".", "zeros_", "(", "param", ")", "\n", "\n", "", "", "", "", "proj_std", "=", "(", "self", ".", "transformer", ".", "width", "**", "-", "0.5", ")", "*", "(", "(", "2", "*", "self", ".", "transformer", ".", "layers", ")", "**", "-", "0.5", ")", "\n", "attn_std", "=", "self", ".", "transformer", ".", "width", "**", "-", "0.5", "\n", "fc_std", "=", "(", "2", "*", "self", ".", "transformer", ".", "width", ")", "**", "-", "0.5", "\n", "for", "block", "in", "self", ".", "transformer", ".", "resblocks", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "block", ".", "attn", ".", "in_proj_weight", ",", "std", "=", "attn_std", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "block", ".", "attn", ".", "out_proj", ".", "weight", ",", "std", "=", "proj_std", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "block", ".", "mlp", ".", "c_fc", ".", "weight", ",", "std", "=", "fc_std", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "block", ".", "mlp", ".", "c_proj", ".", "weight", ",", "std", "=", "proj_std", ")", "\n", "\n", "", "if", "self", ".", "text_projection", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "self", ".", "text_projection", ",", "std", "=", "self", ".", "transformer", ".", "width", "**", "-", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.CLIP.build_attention_mask": [[333, 340], ["torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty.fill_", "torch.empty.fill_", "torch.empty.triu_", "torch.empty.triu_", "float"], "methods", ["None"], ["", "", "def", "build_attention_mask", "(", "self", ")", ":", "\n", "# lazily create causal attention mask, with full attention between the vision tokens", "\n", "# pytorch uses additive attention mask; fill with -inf", "\n", "        ", "mask", "=", "torch", ".", "empty", "(", "self", ".", "context_length", ",", "self", ".", "context_length", ")", "\n", "mask", ".", "fill_", "(", "float", "(", "\"-inf\"", ")", ")", "\n", "mask", ".", "triu_", "(", "1", ")", "# zero out the lower diagonal", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.CLIP.dtype": [[341, 344], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dtype", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "visual", ".", "conv1", ".", "weight", ".", "dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.CLIP.encode_image": [[345, 347], ["model.CLIP.visual", "image.type"], "methods", ["None"], ["", "def", "encode_image", "(", "self", ",", "image", ")", ":", "\n", "        ", "return", "self", ".", "visual", "(", "image", ".", "type", "(", "self", ".", "dtype", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.CLIP.encode_text": [[348, 362], ["model.CLIP.token_embedding().type", "model.CLIP.permute", "model.CLIP.transformer", "model.CLIP.permute", "model.CLIP.ln_final().type", "model.CLIP.positional_embedding.type", "model.CLIP.token_embedding", "model.CLIP.ln_final", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "text.argmax"], "methods", ["None"], ["", "def", "encode_text", "(", "self", ",", "text", ")", ":", "\n", "        ", "x", "=", "self", ".", "token_embedding", "(", "text", ")", ".", "type", "(", "self", ".", "dtype", ")", "# [batch_size, n_ctx, d_model]", "\n", "\n", "x", "=", "x", "+", "self", ".", "positional_embedding", ".", "type", "(", "self", ".", "dtype", ")", "\n", "x", "=", "x", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "# NLD -> LND", "\n", "x", "=", "self", ".", "transformer", "(", "x", ")", "\n", "x", "=", "x", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "# LND -> NLD", "\n", "x", "=", "self", ".", "ln_final", "(", "x", ")", ".", "type", "(", "self", ".", "dtype", ")", "\n", "\n", "# x.shape = [batch_size, n_ctx, transformer.width]", "\n", "# take features from the eot embedding (eot_token is the highest number in each sequence)", "\n", "x", "=", "x", "[", "torch", ".", "arange", "(", "x", ".", "shape", "[", "0", "]", ")", ",", "text", ".", "argmax", "(", "dim", "=", "-", "1", ")", "]", "@", "self", ".", "text_projection", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.CLIP.forward": [[363, 375], ["model.CLIP.encode_image", "model.CLIP.encode_text", "model.CLIP.encode_text", "model.CLIP.norm", "model.CLIP.norm", "model.CLIP.logit_scale.exp", "model.CLIP.encode_image"], "methods", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.CLIP.encode_image", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.CLIP.encode_text", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.CLIP.encode_text", "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.CLIP.encode_image"], ["", "def", "forward", "(", "self", ",", "image", ",", "text", ")", ":", "\n", "        ", "if", "image", "is", "None", ":", "\n", "            ", "return", "self", ".", "encode_text", "(", "text", ")", "\n", "", "elif", "text", "is", "None", ":", "\n", "            ", "return", "self", ".", "encode_image", "(", "image", ")", "\n", "", "image_features", "=", "self", ".", "encode_image", "(", "image", ")", "\n", "text_features", "=", "self", ".", "encode_text", "(", "text", ")", "\n", "\n", "image_features", "=", "image_features", "/", "image_features", ".", "norm", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "text_features", "=", "text_features", "/", "text_features", ".", "norm", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "return", "image_features", ",", "text_features", ",", "self", ".", "logit_scale", ".", "exp", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.convert_weights": [[377, 399], ["model.apply", "isinstance", "isinstance", "l.weight.data.half", "hasattr", "l.bias.data.half", "getattr", "getattr", "getattr.data.half", "getattr.data.half"], "function", ["None"], ["", "", "def", "convert_weights", "(", "model", ":", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"Convert applicable model parameters to fp16\"\"\"", "\n", "\n", "def", "_convert_weights_to_fp16", "(", "l", ")", ":", "\n", "        ", "if", "isinstance", "(", "l", ",", "(", "nn", ".", "Conv1d", ",", "nn", ".", "Conv2d", ",", "nn", ".", "Linear", ")", ")", ":", "\n", "            ", "l", ".", "weight", ".", "data", "=", "l", ".", "weight", ".", "data", ".", "half", "(", ")", "\n", "if", "l", ".", "bias", "is", "not", "None", ":", "\n", "                ", "l", ".", "bias", ".", "data", "=", "l", ".", "bias", ".", "data", ".", "half", "(", ")", "\n", "\n", "", "", "if", "isinstance", "(", "l", ",", "nn", ".", "MultiheadAttention", ")", ":", "\n", "            ", "for", "attr", "in", "[", "*", "[", "f\"{s}_proj_weight\"", "for", "s", "in", "[", "\"in\"", ",", "\"q\"", ",", "\"k\"", ",", "\"v\"", "]", "]", ",", "\"in_proj_bias\"", ",", "\"bias_k\"", ",", "\"bias_v\"", "]", ":", "\n", "                ", "tensor", "=", "getattr", "(", "l", ",", "attr", ")", "\n", "if", "tensor", "is", "not", "None", ":", "\n", "                    ", "tensor", ".", "data", "=", "tensor", ".", "data", ".", "half", "(", ")", "\n", "\n", "", "", "", "for", "name", "in", "[", "\"text_projection\"", ",", "\"proj\"", "]", ":", "\n", "            ", "if", "hasattr", "(", "l", ",", "name", ")", ":", "\n", "                ", "attr", "=", "getattr", "(", "l", ",", "name", ")", "\n", "if", "attr", "is", "not", "None", ":", "\n", "                    ", "attr", ".", "data", "=", "attr", ".", "data", ".", "half", "(", ")", "\n", "\n", "", "", "", "", "model", ".", "apply", "(", "_convert_weights_to_fp16", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mlfoundations_wise-ft.clip.model.build_model": [[401, 440], ["len", "model.CLIP", "CLIP.load_state_dict", "CLIP.parameters", "CLIP.eval", "len", "round", "tuple", "round", "set", "p.data.float", "len", "set", "state_dict.keys", "k.split", "k.startswith", "k.startswith", "k.endswith", "k.split", "k.startswith"], "function", ["home.repos.pwc.inspect_result.mlfoundations_wise-ft.models.zeroshot.eval"], ["", "def", "build_model", "(", "state_dict", ":", "dict", ")", ":", "\n", "    ", "vit", "=", "\"visual.proj\"", "in", "state_dict", "\n", "\n", "if", "vit", ":", "\n", "        ", "vision_width", "=", "state_dict", "[", "\"visual.conv1.weight\"", "]", ".", "shape", "[", "0", "]", "\n", "vision_layers", "=", "len", "(", "[", "k", "for", "k", "in", "state_dict", ".", "keys", "(", ")", "if", "k", ".", "startswith", "(", "\"visual.\"", ")", "and", "k", ".", "endswith", "(", "\".attn.in_proj_weight\"", ")", "]", ")", "\n", "vision_patch_size", "=", "state_dict", "[", "\"visual.conv1.weight\"", "]", ".", "shape", "[", "-", "1", "]", "\n", "grid_size", "=", "round", "(", "(", "state_dict", "[", "\"visual.positional_embedding\"", "]", ".", "shape", "[", "0", "]", "-", "1", ")", "**", "0.5", ")", "\n", "image_resolution", "=", "vision_patch_size", "*", "grid_size", "\n", "", "else", ":", "\n", "        ", "counts", ":", "list", "=", "[", "len", "(", "set", "(", "k", ".", "split", "(", "\".\"", ")", "[", "2", "]", "for", "k", "in", "state_dict", "if", "k", ".", "startswith", "(", "f\"visual.layer{b}\"", ")", ")", ")", "for", "b", "in", "[", "1", ",", "2", ",", "3", ",", "4", "]", "]", "\n", "vision_layers", "=", "tuple", "(", "counts", ")", "\n", "vision_width", "=", "state_dict", "[", "\"visual.layer1.0.conv1.weight\"", "]", ".", "shape", "[", "0", "]", "\n", "output_width", "=", "round", "(", "(", "state_dict", "[", "\"visual.attnpool.positional_embedding\"", "]", ".", "shape", "[", "0", "]", "-", "1", ")", "**", "0.5", ")", "\n", "vision_patch_size", "=", "None", "\n", "assert", "output_width", "**", "2", "+", "1", "==", "state_dict", "[", "\"visual.attnpool.positional_embedding\"", "]", ".", "shape", "[", "0", "]", "\n", "image_resolution", "=", "output_width", "*", "32", "\n", "\n", "", "embed_dim", "=", "state_dict", "[", "\"text_projection\"", "]", ".", "shape", "[", "1", "]", "\n", "context_length", "=", "state_dict", "[", "\"positional_embedding\"", "]", ".", "shape", "[", "0", "]", "\n", "vocab_size", "=", "state_dict", "[", "\"token_embedding.weight\"", "]", ".", "shape", "[", "0", "]", "\n", "transformer_width", "=", "state_dict", "[", "\"ln_final.weight\"", "]", ".", "shape", "[", "0", "]", "\n", "transformer_heads", "=", "transformer_width", "//", "64", "\n", "transformer_layers", "=", "len", "(", "set", "(", "k", ".", "split", "(", "\".\"", ")", "[", "2", "]", "for", "k", "in", "state_dict", "if", "k", ".", "startswith", "(", "f\"transformer.resblocks\"", ")", ")", ")", "\n", "\n", "model", "=", "CLIP", "(", "\n", "embed_dim", ",", "\n", "image_resolution", ",", "vision_layers", ",", "vision_width", ",", "vision_patch_size", ",", "\n", "context_length", ",", "vocab_size", ",", "transformer_width", ",", "transformer_heads", ",", "transformer_layers", "\n", ")", "\n", "\n", "for", "key", "in", "[", "\"input_resolution\"", ",", "\"context_length\"", ",", "\"vocab_size\"", "]", ":", "\n", "        ", "if", "key", "in", "state_dict", ":", "\n", "            ", "del", "state_dict", "[", "key", "]", "\n", "\n", "", "", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "for", "p", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "p", ".", "data", "=", "p", ".", "data", ".", "float", "(", ")", "\n", "", "return", "model", ".", "eval", "(", ")", "", "", ""]]}