{"home.repos.pwc.inspect_result.polo5_fds.None.theorem4_checker_advanced.ProofChecker.__init__": [[13, 47], ["int", "numpy.full", "numpy.fill_diagonal", "numpy.random.uniform", "numpy.sqrt", "print", "print", "print", "print", "print", "numpy.outer", "numpy.sum", "numpy.mean", "numpy.mean"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "args", ".", "T", "=", "args", ".", "T", "-", "args", ".", "T", "%", "args", ".", "W", "# make sure we have a whole number of windows that fit inside horizon", "\n", "self", ".", "K", "=", "int", "(", "args", ".", "T", "/", "args", ".", "W", ")", "\n", "T", ",", "W", ",", "eps", ",", "c", "=", "args", ".", "T", ",", "args", ".", "W", ",", "args", ".", "epsilon", ",", "args", ".", "c", "\n", "# self.correlation_matrix = np.random.uniform(low=-args.c, high=args.c, size=(args.T, args.T))", "\n", "# np.fill_diagonal(self.correlation_matrix, 1)", "\n", "# self.sigmas = np.random.uniform(low=0, high=args.max_sigma, size=args.T)", "\n", "# self.covariance_matrix = np.diag(self.sigmas)@self.correlation_matrix@np.diag(self.sigmas)", "\n", "\n", "## Correlation matrix has lots of different values, maximum is c", "\n", "# self.covariance_matrix = make_spd_matrix(T)/10 #random positive definite symmetric matrix", "\n", "# np.fill_diagonal(self.covariance_matrix, np.random.uniform(1,args.max_var, T)) #increase var = lower maximum correlation", "\n", "# vars = np.diag(self.covariance_matrix)", "\n", "# stds = np.sqrt(vars)", "\n", "# self.correlation_matrix = self.covariance_matrix / np.outer(stds, stds)", "\n", "# np.fill_diagonal(self.correlation_matrix, 0)", "\n", "# c0 = np.max(np.abs(self.correlation_matrix)) #max correlation", "\n", "# assert c0 < 1", "\n", "\n", "## worst case correlation matrix has c for all it's non-diagonal entries", "\n", "# we still need the covariance to be positive semi definite. It can be shown that", "\n", "# if all off-diagonal entries of the TxT matrix are equal to c, then we need c >= -1/(T-1)", "\n", "self", ".", "correlation_matrix_worst_case", "=", "np", ".", "full", "(", "(", "T", ",", "T", ")", ",", "c", ")", "\n", "np", ".", "fill_diagonal", "(", "self", ".", "correlation_matrix_worst_case", ",", "1", ")", "\n", "vars", "=", "np", ".", "random", ".", "uniform", "(", "1", ",", "args", ".", "max_var", ",", "T", ")", "\n", "stds", "=", "np", ".", "sqrt", "(", "vars", ")", "\n", "self", ".", "covariance_matrix_worst_case", "=", "self", ".", "correlation_matrix_worst_case", "*", "np", ".", "outer", "(", "stds", ",", "stds", ")", "\n", "print", "(", "f'sum of covariance matrix: {np.sum(self.covariance_matrix_worst_case)}'", ")", "\n", "\n", "print", "(", "f'Running experiments for a total of T={self.args.T} while using {self.K} windows of W={W} steps, running {args.n_seeds} seeds'", ")", "\n", "print", "(", "f'max off diagonal correlation is c: {c:.3f}'", ")", "\n", "print", "(", "f'not sharing: expected MSE = {np.mean(vars)}'", ")", "\n", "print", "(", "f'sharing: expected MSE upper bound for max drift = (1+c(W-1))/W)*(1/T)*sum(D_tt) + eps^2(W^2-1)/12 = {((1+c*(W-1))/W) * np.mean(vars) + eps**2*(W**2 - 1)/12}'", ")", "\n", "# print(f'W* = best W when max drift = lower bound to optimal W otherwise = (6*sigma^2/esilon^2)^(1/3) = {(6*args.sigma**2/args.epsilon**2)**(1/3):.3f}')", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.None.theorem4_checker_advanced.ProofChecker.sample_max_drift": [[49, 58], ["numpy.array", "numpy.random.multivariate_normal", "range"], "methods", ["None"], ["", "def", "sample_max_drift", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        epsilon_t = epsilon for all time steps\n        \"\"\"", "\n", "hypergrad_means", "=", "np", ".", "array", "(", "[", "self", ".", "args", ".", "mu_0", "+", "n", "*", "self", ".", "args", ".", "epsilon", "for", "n", "in", "range", "(", "self", ".", "args", ".", "T", ")", "]", ")", "\n", "# hypergrads = np.random.multivariate_normal(hypergrad_means, self.covariance_matrix, size=(self.args.n_seeds))", "\n", "hypergrads", "=", "np", ".", "random", ".", "multivariate_normal", "(", "hypergrad_means", ",", "self", ".", "covariance_matrix_worst_case", ",", "size", "=", "(", "self", ".", "args", ".", "n_seeds", ")", ")", "\n", "optimal_hypergrads", "=", "hypergrad_means", "\n", "return", "hypergrads", ",", "optimal_hypergrads", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.None.theorem4_checker_advanced.ProofChecker.sample_min_drift": [[59, 68], ["numpy.array", "numpy.random.multivariate_normal", "range"], "methods", ["None"], ["", "def", "sample_min_drift", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        epsilon_t = 0 for all time steps\n        \"\"\"", "\n", "hypergrad_means", "=", "np", ".", "array", "(", "[", "self", ".", "args", ".", "mu_0", "for", "_", "in", "range", "(", "self", ".", "args", ".", "T", ")", "]", ")", "\n", "# hypergrads = np.random.multivariate_normal(hypergrad_means, self.covariance_matrix, size=(self.args.n_seeds))", "\n", "hypergrads", "=", "np", ".", "random", ".", "multivariate_normal", "(", "hypergrad_means", ",", "self", ".", "covariance_matrix_worst_case", ",", "size", "=", "(", "self", ".", "args", ".", "n_seeds", ")", ")", "\n", "optimal_hypergrads", "=", "hypergrad_means", "\n", "return", "hypergrads", ",", "optimal_hypergrads", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.None.theorem4_checker_advanced.ProofChecker.sample_random_drift": [[69, 79], ["numpy.random.uniform", "numpy.array", "numpy.random.multivariate_normal", "numpy.array.append"], "methods", ["None"], ["", "def", "sample_random_drift", "(", "self", ")", ":", "\n", "        ", "epsilons", "=", "np", ".", "random", ".", "uniform", "(", "-", "self", ".", "args", ".", "epsilon", ",", "self", ".", "args", ".", "epsilon", ",", "self", ".", "args", ".", "T", "-", "1", ")", "\n", "hypergrad_means", "=", "[", "self", ".", "args", ".", "mu_0", "]", "\n", "for", "eps", "in", "epsilons", ":", "\n", "            ", "hypergrad_means", ".", "append", "(", "hypergrad_means", "[", "-", "1", "]", "+", "eps", ")", "\n", "", "hypergrad_means", "=", "np", ".", "array", "(", "hypergrad_means", ")", "\n", "# hypergrads = np.random.multivariate_normal(hypergrad_means, self.covariance_matrix, size=(self.args.n_seeds))", "\n", "hypergrads", "=", "np", ".", "random", ".", "multivariate_normal", "(", "hypergrad_means", ",", "self", ".", "covariance_matrix_worst_case", ",", "size", "=", "(", "self", ".", "args", ".", "n_seeds", ")", ")", "\n", "optimal_hypergrads", "=", "hypergrad_means", "\n", "return", "hypergrads", ",", "optimal_hypergrads", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.None.theorem4_checker_advanced.ProofChecker.mse_not_sharing": [[80, 82], ["numpy.mean"], "methods", ["None"], ["", "def", "mse_not_sharing", "(", "self", ",", "hypergrads", ",", "optimal_hypergrads", ")", ":", "\n", "        ", "return", "np", ".", "mean", "(", "(", "hypergrads", "-", "optimal_hypergrads", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.None.theorem4_checker_advanced.ProofChecker.mse_sharing": [[83, 87], ["numpy.array", "numpy.mean", "numpy.mean().repeat", "numpy.mean", "h.reshape"], "methods", ["None"], ["", "def", "mse_sharing", "(", "self", ",", "hypergrads", ",", "optimal_hypergrads", ")", ":", "\n", "        ", "hypergrads_after_sharing", "=", "[", "np", ".", "mean", "(", "h", ".", "reshape", "(", "(", "self", ".", "K", ",", "self", ".", "args", ".", "W", ")", ")", ",", "axis", "=", "1", ")", ".", "repeat", "(", "self", ".", "args", ".", "W", ")", "for", "h", "in", "hypergrads", "]", "\n", "hypergrads_after_sharing", "=", "np", ".", "array", "(", "hypergrads_after_sharing", ")", "\n", "return", "np", ".", "mean", "(", "(", "hypergrads_after_sharing", "-", "optimal_hypergrads", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.None.theorem4_checker_advanced.ProofChecker.run": [[88, 103], ["print", "theorem4_checker_advanced.ProofChecker.sample_min_drift", "print", "print", "theorem4_checker_advanced.ProofChecker.sample_max_drift", "print", "print", "theorem4_checker_advanced.ProofChecker.sample_random_drift", "print", "theorem4_checker_advanced.ProofChecker.mse_not_sharing", "theorem4_checker_advanced.ProofChecker.mse_sharing", "theorem4_checker_advanced.ProofChecker.mse_not_sharing", "theorem4_checker_advanced.ProofChecker.mse_sharing", "theorem4_checker_advanced.ProofChecker.mse_not_sharing", "theorem4_checker_advanced.ProofChecker.mse_sharing"], "methods", ["home.repos.pwc.inspect_result.polo5_fds.None.theorem4_checker_simple.ProofChecker.sample_min_drift", "home.repos.pwc.inspect_result.polo5_fds.None.theorem4_checker_simple.ProofChecker.sample_max_drift", "home.repos.pwc.inspect_result.polo5_fds.None.theorem4_checker_simple.ProofChecker.sample_random_drift", "home.repos.pwc.inspect_result.polo5_fds.None.theorem4_checker_simple.ProofChecker.mse_not_sharing", "home.repos.pwc.inspect_result.polo5_fds.None.theorem4_checker_simple.ProofChecker.mse_sharing", "home.repos.pwc.inspect_result.polo5_fds.None.theorem4_checker_simple.ProofChecker.mse_not_sharing", "home.repos.pwc.inspect_result.polo5_fds.None.theorem4_checker_simple.ProofChecker.mse_sharing", "home.repos.pwc.inspect_result.polo5_fds.None.theorem4_checker_simple.ProofChecker.mse_not_sharing", "home.repos.pwc.inspect_result.polo5_fds.None.theorem4_checker_simple.ProofChecker.mse_sharing"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "print", "(", "'\\nMIN DRIFT:'", ")", "\n", "hypergrads", ",", "optimal_hypergrads", "=", "self", ".", "sample_min_drift", "(", ")", "\n", "mse_not_sharing", ",", "mse_sharing", "=", "self", ".", "mse_not_sharing", "(", "hypergrads", ",", "optimal_hypergrads", ")", ",", "self", ".", "mse_sharing", "(", "hypergrads", ",", "optimal_hypergrads", ")", "\n", "print", "(", "f'actual mse when not sharing = {mse_not_sharing:.5f} --- mse sharing = {mse_sharing:.5f}'", ")", "\n", "\n", "print", "(", "'\\nMAX DRIFT:'", ")", "\n", "hypergrads", ",", "optimal_hypergrads", "=", "self", ".", "sample_max_drift", "(", ")", "\n", "mse_not_sharing", ",", "mse_sharing", "=", "self", ".", "mse_not_sharing", "(", "hypergrads", ",", "optimal_hypergrads", ")", ",", "self", ".", "mse_sharing", "(", "hypergrads", ",", "optimal_hypergrads", ")", "\n", "print", "(", "f'actual mse not sharing = {mse_not_sharing:.5f} --- mse sharing = {mse_sharing:.5f}'", ")", "\n", "\n", "print", "(", "'\\nRANDOM DRIFT:'", ")", "\n", "hypergrads", ",", "optimal_hypergrads", "=", "self", ".", "sample_random_drift", "(", ")", "\n", "mse_not_sharing", ",", "mse_sharing", "=", "self", ".", "mse_not_sharing", "(", "hypergrads", ",", "optimal_hypergrads", ")", ",", "self", ".", "mse_sharing", "(", "hypergrads", ",", "optimal_hypergrads", ")", "\n", "print", "(", "f'actual mse not sharing = {mse_not_sharing:.5f} --- mse sharing = {mse_sharing:.5f}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.None.theorem4_checker_advanced.main": [[105, 113], ["numpy.random.seed", "random.seed", "time.time", "theorem4_checker_advanced.ProofChecker", "theorem4_checker_advanced.ProofChecker.run", "print", "utils.helpers.format_time", "time.time"], "function", ["home.repos.pwc.inspect_result.polo5_fds.None.theorem4_checker_simple.ProofChecker.run", "home.repos.pwc.inspect_result.polo5_fds.utils.helpers.format_time"], ["", "", "def", "main", "(", "args", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "\n", "t0", "=", "time", ".", "time", "(", ")", "\n", "proof", "=", "ProofChecker", "(", "args", ")", "\n", "proof", ".", "run", "(", ")", "\n", "print", "(", "f'\\nTotal time: {format_time(time.time() - t0)}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.None.main.MetaLearner.__init__": [[21, 57], ["main.MetaLearner.hypers_init", "nn.CrossEntropyLoss", "os.path.join", "os.path.join", "os.path.exists", "utils.helpers.copy_file", "utils.logger.Logger", "print", "print", "print", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "os.makedirs", "os.path.realpath", "open", "main.MetaLearner.args.__dict__.items", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "zip", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "zip", "os.path.isfile", "NotImplementedError", "shutil.rmtree", "os.makedirs", "os.path.join", "print", "f.write"], "methods", ["home.repos.pwc.inspect_result.polo5_fds.None.main.MetaLearner.hypers_init", "home.repos.pwc.inspect_result.polo5_fds.utils.helpers.copy_file", "home.repos.pwc.inspect_result.polo5_fds.utils.logger.Logger.write"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "\n", "## Optimization", "\n", "self", ".", "hypers_init", "(", ")", "\n", "self", ".", "cross_entropy", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "## Experiment Set Up", "\n", "self", ".", "best_outer_step", "=", "0", "\n", "self", ".", "best_validation_acc", "=", "0", "\n", "ns", ",", "learnables", "=", "(", "self", ".", "args", ".", "n_lrs", ",", "self", ".", "args", ".", "n_moms", ",", "self", ".", "args", ".", "n_wds", ")", ",", "(", "self", ".", "args", ".", "learn_lr", ",", "self", ".", "args", ".", "learn_mom", ",", "self", ".", "args", ".", "learn_wd", ")", "\n", "self", ".", "all_lr_schedules", ",", "self", ".", "all_mom_schedules", ",", "self", ".", "all_wd_schedules", "=", "[", "torch", ".", "zeros", "(", "(", "self", ".", "args", ".", "n_outer_steps", "+", "1", ",", "n", ")", ")", "for", "n", "in", "ns", "]", "#+1 since save init schedules and last schedule", "\n", "self", ".", "all_lr_raw_grads", ",", "self", ".", "all_mom_raw_grads", ",", "self", ".", "all_wd_raw_grads", "=", "[", "torch", ".", "zeros", "(", "(", "self", ".", "args", ".", "n_outer_steps", ",", "n", ")", ")", "if", "l", "else", "None", "for", "(", "n", ",", "l", ")", "in", "zip", "(", "ns", ",", "learnables", ")", "]", "\n", "self", ".", "all_lr_smooth_grads", ",", "self", ".", "all_mom_smooth_grads", ",", "self", ".", "all_wd_smooth_grads", "=", "[", "torch", ".", "zeros", "(", "(", "self", ".", "args", ".", "n_outer_steps", ",", "n", ")", ")", "if", "l", "else", "None", "for", "(", "n", ",", "l", ")", "in", "zip", "(", "ns", ",", "learnables", ")", "]", "\n", "\n", "self", ".", "experiment_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "log_directory_path", ",", "self", ".", "args", ".", "experiment_name", ")", "\n", "self", ".", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "experiment_path", ",", "'checkpoint.pth.tar'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "experiment_path", ")", ":", "\n", "            ", "if", "self", ".", "args", ".", "use_gpu", "and", "os", ".", "path", ".", "isfile", "(", "self", ".", "checkpoint_path", ")", ":", "\n", "                ", "raise", "NotImplementedError", "(", "f\"Experiment folder {self.experiment_path} already exists\"", ")", "#TODO: restore code from ckpt", "\n", "", "else", ":", "\n", "                ", "shutil", ".", "rmtree", "(", "self", ".", "experiment_path", ")", "# clear debug logs on cpu", "\n", "os", ".", "makedirs", "(", "self", ".", "experiment_path", ")", "\n", "", "", "else", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "experiment_path", ")", "\n", "", "copy_file", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ",", "self", ".", "experiment_path", ")", "# save this python file in logs folder", "\n", "self", ".", "logger", "=", "Logger", "(", "self", ".", "experiment_path", ",", "'run_results.csv'", ")", "\n", "\n", "## Save and Print Args", "\n", "print", "(", "'\\n---------'", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "experiment_path", ",", "'args.txt'", ")", ",", "'w+'", ")", "as", "f", ":", "\n", "            ", "for", "k", ",", "v", "in", "self", ".", "args", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "                ", "print", "(", "k", ",", "v", ")", "\n", "f", ".", "write", "(", "\"{} \\t {}\\n\"", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "", "", "print", "(", "'---------\\n'", ")", "\n", "print", "(", "'\\nLogging every {} outer_steps and every {} epochs per outer_step\\n'", ".", "format", "(", "self", ".", "args", ".", "outer_step_log_freq", ",", "self", ".", "args", ".", "epoch_log_freq", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.None.main.MetaLearner.hypers_init": [[58, 75], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "def", "hypers_init", "(", "self", ")", ":", "\n", "        ", "\"\"\" initialize hyperparameters \"\"\"", "\n", "\n", "self", ".", "inner_lrs", "=", "self", ".", "args", ".", "inner_lr_init", "*", "torch", ".", "ones", "(", "self", ".", "args", ".", "n_lrs", ",", "device", "=", "self", ".", "args", ".", "device", ")", "\n", "self", ".", "inner_lrs_grad", "=", "torch", ".", "zeros_like", "(", "self", ".", "inner_lrs", ")", "# lr hypergradient", "\n", "self", ".", "lr_hypersigns", "=", "torch", ".", "zeros", "(", "self", ".", "args", ".", "n_lrs", ",", "device", "=", "self", ".", "args", ".", "device", ")", "\n", "self", ".", "lr_step_sizes", "=", "self", ".", "args", ".", "lr_init_step_size", "*", "torch", ".", "ones", "(", "self", ".", "args", ".", "n_lrs", ",", "device", "=", "self", ".", "args", ".", "device", ")", "\n", "\n", "self", ".", "inner_moms", "=", "self", ".", "args", ".", "inner_mom_init", "*", "torch", ".", "ones", "(", "self", ".", "args", ".", "n_moms", ",", "device", "=", "self", ".", "args", ".", "device", ")", "\n", "self", ".", "inner_moms_grad", "=", "torch", ".", "zeros_like", "(", "self", ".", "inner_moms", ")", "\n", "self", ".", "mom_hypersigns", "=", "torch", ".", "zeros", "(", "self", ".", "args", ".", "n_moms", ",", "device", "=", "self", ".", "args", ".", "device", ")", "\n", "self", ".", "mom_step_sizes", "=", "self", ".", "args", ".", "mom_init_step_size", "*", "torch", ".", "ones", "(", "self", ".", "args", ".", "n_moms", ",", "device", "=", "self", ".", "args", ".", "device", ")", "\n", "\n", "self", ".", "inner_wds", "=", "self", ".", "args", ".", "inner_wd_init", "*", "torch", ".", "ones", "(", "self", ".", "args", ".", "n_wds", ",", "device", "=", "self", ".", "args", ".", "device", ")", "\n", "self", ".", "inner_wds_grad", "=", "torch", ".", "zeros_like", "(", "self", ".", "inner_wds", ")", "\n", "self", ".", "wd_hypersigns", "=", "torch", ".", "zeros", "(", "self", ".", "args", ".", "n_wds", ",", "device", "=", "self", ".", "args", ".", "device", ")", "\n", "self", ".", "wd_step_sizes", "=", "self", ".", "args", ".", "wd_init_step_size", "*", "torch", ".", "ones", "(", "self", ".", "args", ".", "n_wds", ",", "device", "=", "self", ".", "args", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.None.main.MetaLearner.get_hypers": [[76, 89], ["int", "float", "int", "float", "int", "float"], "methods", ["None"], ["", "def", "get_hypers", "(", "self", ",", "epoch", ",", "batch_idx", ")", ":", "\n", "        ", "\"\"\"return hyperparameters to be used for given batch\"\"\"", "\n", "\n", "lr_index", "=", "int", "(", "self", ".", "args", ".", "n_lrs", "*", "(", "epoch", "*", "self", ".", "n_batches_per_epoch", "+", "batch_idx", ")", "/", "self", ".", "n_total_batches_for_this_outer_step", ")", "\n", "lr", "=", "float", "(", "self", ".", "inner_lrs", "[", "lr_index", "]", ")", "\n", "\n", "mom_index", "=", "int", "(", "self", ".", "args", ".", "n_moms", "*", "(", "epoch", "*", "self", ".", "n_batches_per_epoch", "+", "batch_idx", ")", "/", "self", ".", "n_total_batches_for_this_outer_step", ")", "\n", "mom", "=", "float", "(", "self", ".", "inner_moms", "[", "mom_index", "]", ")", "\n", "\n", "wd_index", "=", "int", "(", "self", ".", "args", ".", "n_wds", "*", "(", "epoch", "*", "self", ".", "n_batches_per_epoch", "+", "batch_idx", ")", "/", "self", ".", "n_total_batches_for_this_outer_step", ")", "\n", "wd", "=", "float", "(", "self", ".", "inner_wds", "[", "wd_index", "]", ")", "\n", "\n", "return", "lr", ",", "mom", ",", "wd", ",", "lr_index", ",", "mom_index", ",", "wd_index", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.None.main.MetaLearner.to_prune": [[90, 112], ["int", "int", "int"], "methods", ["None"], ["", "def", "to_prune", "(", "self", ",", "epoch", ",", "batch_idx", ",", "n_hypers", ")", ":", "\n", "        ", "\"\"\" Do we skip calculation of Z for this batch?\"\"\"", "\n", "\n", "if", "self", ".", "args", ".", "pruning_ratio", "==", "0", ":", "\n", "            ", "to_prune", "=", "False", "\n", "", "else", ":", "\n", "            ", "n_batches_per_hyper", "=", "int", "(", "self", ".", "n_total_batches_for_this_outer_step", "/", "n_hypers", ")", "\n", "current_global_batch_idx", "=", "epoch", "*", "self", ".", "n_batches_per_epoch", "+", "batch_idx", "\n", "current_global_batch_idx_per_hyper", "=", "current_global_batch_idx", "%", "n_batches_per_hyper", "\n", "\n", "if", "self", ".", "args", ".", "pruning_mode", "==", "'alternate'", ":", "#rounded to nearest integer, so r=0.25 -> prune 1 in 4 but r=0.21 -> 1 in 4 also", "\n", "                ", "if", "self", ".", "args", ".", "pruning_ratio", ">=", "0.5", ":", "#at least 1 in 2 pruned", "\n", "                    ", "keep_freq", "=", "int", "(", "1", "/", "(", "1", "-", "self", ".", "args", ".", "pruning_ratio", ")", ")", "\n", "to_prune", "=", "(", "current_global_batch_idx_per_hyper", "%", "keep_freq", "!=", "0", ")", "\n", "", "else", ":", "\n", "                    ", "prune_freq", "=", "int", "(", "1", "/", "(", "self", ".", "args", ".", "pruning_ratio", ")", ")", "\n", "to_prune", "=", "(", "current_global_batch_idx_per_hyper", "%", "prune_freq", "==", "0", ")", "\n", "\n", "", "", "elif", "self", ".", "args", ".", "pruning_mode", "==", "'truncate'", ":", "\n", "                ", "to_prune", "=", "current_global_batch_idx_per_hyper", "<", "self", ".", "args", ".", "pruning_ratio", "*", "n_batches_per_hyper", "\n", "\n", "", "", "return", "to_prune", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.None.main.MetaLearner.inner_loop": [[113, 225], ["models.selector.select_model().to", "main.MetaLearner.classifier.train", "main.MetaLearner.classifier.get_param", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "main.MetaLearner.weights.numel", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "time.time", "enumerate", "print", "models.selector.select_model", "main.MetaLearner.get_hypers", "main.MetaLearner.classifier.forward_with_param", "main.MetaLearner.cross_entropy", "main.MetaLearner.weights.requires_grad_", "main.MetaLearner.weights.numel", "main.MetaLearner.weights.numel", "main.MetaLearner.weights.numel", "main.MetaLearner.weights.numel", "main.MetaLearner.weights.numel", "main.MetaLearner.weights.numel", "x_train.to", "y_train.to", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "grads.clamp_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "main.MetaLearner.weights.detach", "main.MetaLearner.weights.detach_", "grads.detach_", "main.MetaLearner.to_prune", "torch.zeros.clamp_", "torch.zeros.clamp_", "main.MetaLearner.to_prune", "torch.zeros.clamp_", "torch.zeros.clamp_", "main.MetaLearner.to_prune", "torch.zeros.clamp_", "torch.zeros.clamp_", "main.MetaLearner.weights.detach", "utils.helpers.format_time", "main.MetaLearner.weights.numel", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "grads.detach", "main.MetaLearner.weights.numel", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "main.MetaLearner.weights.numel", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "main.MetaLearner.weights.detach", "time.time"], "methods", ["home.repos.pwc.inspect_result.polo5_fds.None.main.BaseLearner.train", "home.repos.pwc.inspect_result.polo5_fds.models.meta_factory.ReparamModule.get_param", "home.repos.pwc.inspect_result.polo5_fds.models.selector.select_model", "home.repos.pwc.inspect_result.polo5_fds.None.main.BaseLearner.get_hypers", "home.repos.pwc.inspect_result.polo5_fds.models.meta_factory.ReparamModule.forward_with_param", "home.repos.pwc.inspect_result.polo5_fds.None.main.MetaLearner.to_prune", "home.repos.pwc.inspect_result.polo5_fds.None.main.MetaLearner.to_prune", "home.repos.pwc.inspect_result.polo5_fds.None.main.MetaLearner.to_prune", "home.repos.pwc.inspect_result.polo5_fds.utils.helpers.format_time"], ["", "def", "inner_loop", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Compute Z for each hyperparameter to learn over all epochs in the run\n        \"\"\"", "\n", "\n", "## Network", "\n", "self", ".", "classifier", "=", "select_model", "(", "True", ",", "self", ".", "args", ".", "dataset", ",", "self", ".", "args", ".", "architecture", ",", "\n", "self", ".", "args", ".", "init_type", ",", "self", ".", "args", ".", "init_param", ",", "\n", "self", ".", "args", ".", "device", ")", ".", "to", "(", "self", ".", "args", ".", "device", ")", "\n", "self", ".", "classifier", ".", "train", "(", ")", "\n", "self", ".", "weights", "=", "self", ".", "classifier", ".", "get_param", "(", ")", "\n", "velocity", "=", "torch", ".", "zeros", "(", "self", ".", "weights", ".", "numel", "(", ")", ",", "requires_grad", "=", "False", ",", "device", "=", "self", ".", "args", ".", "device", ")", "\n", "\n", "## Forward Mode Init", "\n", "if", "self", ".", "args", ".", "learn_lr", ":", "\n", "            ", "self", ".", "n_batches_per_lr", "=", "0", "\n", "Z_lr", "=", "torch", ".", "zeros", "(", "(", "self", ".", "weights", ".", "numel", "(", ")", ",", "self", ".", "args", ".", "n_lrs", ")", ",", "device", "=", "self", ".", "args", ".", "device", ")", "\n", "C_lr", "=", "torch", ".", "zeros", "(", "(", "self", ".", "weights", ".", "numel", "(", ")", ",", "self", ".", "args", ".", "n_lrs", ")", ",", "device", "=", "self", ".", "args", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "Z_lr", "=", "None", "\n", "\n", "", "if", "self", ".", "args", ".", "learn_mom", ":", "\n", "            ", "self", ".", "n_batches_per_mom", "=", "0", "\n", "Z_mom", "=", "torch", ".", "zeros", "(", "(", "self", ".", "weights", ".", "numel", "(", ")", ",", "self", ".", "args", ".", "n_moms", ")", ",", "device", "=", "self", ".", "args", ".", "device", ")", "\n", "C_mom", "=", "torch", ".", "zeros", "(", "(", "self", ".", "weights", ".", "numel", "(", ")", ",", "self", ".", "args", ".", "n_moms", ")", ",", "device", "=", "self", ".", "args", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "Z_mom", "=", "None", "\n", "\n", "", "if", "self", ".", "args", ".", "learn_wd", ":", "\n", "            ", "self", ".", "n_batches_per_wd", "=", "0", "\n", "Z_wd", "=", "torch", ".", "zeros", "(", "(", "self", ".", "weights", ".", "numel", "(", ")", ",", "self", ".", "args", ".", "n_wds", ")", ",", "device", "=", "self", ".", "args", ".", "device", ")", "\n", "C_wd", "=", "torch", ".", "zeros", "(", "(", "self", ".", "weights", ".", "numel", "(", ")", ",", "self", ".", "args", ".", "n_wds", ")", ",", "device", "=", "self", ".", "args", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "Z_wd", "=", "None", "\n", "\n", "## Inner Loop Over All Epochs", "\n", "", "for", "epoch", "in", "range", "(", "self", ".", "n_inner_epochs_for_this_outer_step", ")", ":", "\n", "            ", "t0_epoch", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "batch_idx", ",", "(", "x_train", ",", "y_train", ")", "in", "enumerate", "(", "self", ".", "train_loader", ")", ":", "\n", "                ", "lr", ",", "mom", ",", "wd", ",", "lr_index", ",", "mom_index", ",", "wd_index", "=", "self", ".", "get_hypers", "(", "epoch", ",", "batch_idx", ")", "\n", "#print(f'epoch {epoch} batch {batch_idx} -- lr idx {lr_index} -- mom idx {mom_index} -- wd index {wd_index}')", "\n", "x_train", ",", "y_train", "=", "x_train", ".", "to", "(", "device", "=", "self", ".", "args", ".", "device", ")", ",", "y_train", ".", "to", "(", "device", "=", "self", ".", "args", ".", "device", ")", "\n", "train_logits", "=", "self", ".", "classifier", ".", "forward_with_param", "(", "x_train", ",", "self", ".", "weights", ")", "\n", "train_loss", "=", "self", ".", "cross_entropy", "(", "train_logits", ",", "y_train", ")", "\n", "grads", "=", "torch", ".", "autograd", ".", "grad", "(", "train_loss", ",", "self", ".", "weights", ",", "create_graph", "=", "True", ")", "[", "0", "]", "\n", "if", "self", ".", "args", ".", "clamp_grads", ":", "grads", ".", "clamp_", "(", "-", "self", ".", "args", ".", "clamp_grads_range", ",", "self", ".", "args", ".", "clamp_grads_range", ")", "\n", "\n", "if", "self", ".", "args", ".", "learn_lr", "and", "not", "self", ".", "to_prune", "(", "epoch", ",", "batch_idx", ",", "self", ".", "args", ".", "n_lrs", ")", ":", "\n", "#print('update lr')", "\n", "                    ", "self", ".", "n_batches_per_lr", "+=", "1", "\n", "H_times_Z", "=", "torch", ".", "zeros", "(", "(", "self", ".", "weights", ".", "numel", "(", ")", ",", "self", ".", "args", ".", "n_lrs", ")", ",", "device", "=", "self", ".", "args", ".", "device", ")", "\n", "for", "j", "in", "range", "(", "lr_index", "+", "1", ")", ":", "\n", "                        ", "retain", "=", "(", "j", "!=", "lr_index", ")", "or", "self", ".", "args", ".", "learn_mom", "or", "self", ".", "args", ".", "learn_wd", "\n", "H_times_Z", "[", ":", ",", "j", "]", "=", "torch", ".", "autograd", ".", "grad", "(", "grads", "@", "Z_lr", "[", ":", ",", "j", "]", ",", "self", ".", "weights", ",", "retain_graph", "=", "retain", ")", "[", "0", "]", "\n", "\n", "", "if", "self", ".", "args", ".", "clamp_HZ", ":", "H_times_Z", ".", "clamp_", "(", "-", "self", ".", "args", ".", "clamp_HZ_range", ",", "self", ".", "args", ".", "clamp_HZ_range", ")", "\n", "A_times_Z", "=", "Z_lr", "*", "(", "1", "-", "lr", "*", "wd", ")", "-", "lr", "*", "H_times_Z", "\n", "B", "=", "-", "mom", "*", "lr", "*", "C_lr", "\n", "B", "[", ":", ",", "lr_index", "]", "-=", "grads", ".", "detach", "(", ")", "+", "wd", "*", "self", ".", "weights", ".", "detach", "(", ")", "+", "mom", "*", "velocity", "\n", "C_lr", "=", "mom", "*", "C_lr", "+", "H_times_Z", "+", "wd", "*", "Z_lr", "\n", "\n", "Z_lr", "=", "A_times_Z", "+", "B", "\n", "\n", "", "if", "self", ".", "args", ".", "learn_mom", "and", "not", "self", ".", "to_prune", "(", "epoch", ",", "batch_idx", ",", "self", ".", "args", ".", "n_moms", ")", ":", "\n", "#print('update mom')", "\n", "                    ", "self", ".", "n_batches_per_mom", "+=", "1", "\n", "H_times_Z", "=", "torch", ".", "zeros", "(", "(", "self", ".", "weights", ".", "numel", "(", ")", ",", "self", ".", "args", ".", "n_moms", ")", ",", "device", "=", "self", ".", "args", ".", "device", ")", "\n", "for", "j", "in", "range", "(", "mom_index", "+", "1", ")", ":", "\n", "                        ", "retain", "=", "(", "j", "!=", "mom_index", ")", "or", "self", ".", "args", ".", "learn_wd", "\n", "H_times_Z", "[", ":", ",", "j", "]", "=", "torch", ".", "autograd", ".", "grad", "(", "grads", "@", "Z_mom", "[", ":", ",", "j", "]", ",", "self", ".", "weights", ",", "retain_graph", "=", "retain", ")", "[", "0", "]", "\n", "\n", "", "if", "self", ".", "args", ".", "clamp_HZ", ":", "H_times_Z", ".", "clamp_", "(", "-", "self", ".", "args", ".", "clamp_HZ_range", ",", "self", ".", "args", ".", "clamp_HZ_range", ")", "\n", "A_times_Z", "=", "(", "1", "-", "lr", "*", "wd", ")", "*", "Z_mom", "-", "lr", "*", "H_times_Z", "\n", "B", "=", "-", "lr", "*", "mom", "*", "C_mom", "\n", "B", "[", ":", ",", "mom_index", "]", "-=", "lr", "*", "velocity", "\n", "C_mom", "=", "mom", "*", "C_mom", "+", "H_times_Z", "+", "wd", "*", "Z_mom", "\n", "C_mom", "[", ":", ",", "mom_index", "]", "+=", "velocity", "\n", "\n", "Z_mom", "=", "A_times_Z", "+", "B", "\n", "\n", "", "if", "self", ".", "args", ".", "learn_wd", "and", "not", "self", ".", "to_prune", "(", "epoch", ",", "batch_idx", ",", "self", ".", "args", ".", "n_wds", ")", ":", "\n", "#print('update wd')", "\n", "                    ", "self", ".", "n_batches_per_wd", "+=", "1", "\n", "H_times_Z", "=", "torch", ".", "zeros", "(", "(", "self", ".", "weights", ".", "numel", "(", ")", ",", "self", ".", "args", ".", "n_wds", ")", ",", "device", "=", "self", ".", "args", ".", "device", ")", "\n", "for", "j", "in", "range", "(", "wd_index", "+", "1", ")", ":", "\n", "                        ", "retain", "=", "(", "j", "!=", "wd_index", ")", "\n", "H_times_Z", "[", ":", ",", "j", "]", "=", "torch", ".", "autograd", ".", "grad", "(", "grads", "@", "Z_wd", "[", ":", ",", "j", "]", ",", "self", ".", "weights", ",", "retain_graph", "=", "retain", ")", "[", "0", "]", "\n", "\n", "", "if", "self", ".", "args", ".", "clamp_HZ", ":", "H_times_Z", ".", "clamp_", "(", "-", "self", ".", "args", ".", "clamp_HZ_range", ",", "self", ".", "args", ".", "clamp_HZ_range", ")", "\n", "A_times_Z", "=", "(", "1", "-", "lr", "*", "wd", ")", "*", "Z_wd", "-", "lr", "*", "H_times_Z", "\n", "B", "=", "-", "lr", "*", "mom", "*", "C_wd", "\n", "B", "[", ":", ",", "wd_index", "]", "-=", "lr", "*", "self", ".", "weights", ".", "detach", "(", ")", "\n", "C_wd", "=", "mom", "*", "C_wd", "+", "H_times_Z", "+", "wd", "*", "Z_wd", "\n", "C_wd", "[", ":", ",", "wd_index", "]", "+=", "self", ".", "weights", ".", "detach", "(", ")", "\n", "\n", "Z_wd", "=", "A_times_Z", "+", "B", "\n", "\n", "## SGD inner update", "\n", "", "self", ".", "weights", ".", "detach_", "(", ")", ",", "grads", ".", "detach_", "(", ")", "\n", "velocity", "=", "velocity", "*", "mom", "+", "(", "grads", "+", "wd", "*", "self", ".", "weights", ")", "\n", "self", ".", "weights", "=", "self", ".", "weights", "-", "lr", "*", "velocity", "\n", "self", ".", "weights", ".", "requires_grad_", "(", ")", "\n", "\n", "", "print", "(", "f'--- Ran epoch {epoch+1} in {format_time(time.time()-t0_epoch)} ---'", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "learn_lr", ":", "self", ".", "n_batches_per_lr", "/=", "self", ".", "args", ".", "n_lrs", "# each hyper gets same # of updates regardless of pruning mode", "\n", "if", "self", ".", "args", ".", "learn_mom", ":", "self", ".", "n_batches_per_mom", "/=", "self", ".", "args", ".", "n_moms", "\n", "if", "self", ".", "args", ".", "learn_wd", ":", "self", ".", "n_batches_per_wd", "/=", "self", ".", "args", ".", "n_wds", "\n", "\n", "\n", "return", "Z_lr", ",", "Z_mom", ",", "Z_wd", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.None.main.MetaLearner.outer_step": [[226, 289], ["utils.helpers.AggregateTensor", "enumerate", "print", "main.MetaLearner.classifier.forward_with_param", "main.MetaLearner.cross_entropy", "main.MetaLearner.running_val_grad.update", "main.MetaLearner.inner_lrs_grad.detach", "print", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "print", "main.MetaLearner.inner_moms_grad.detach", "print", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "print", "main.MetaLearner.inner_wds_grad.detach", "print", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "print", "x_val.to", "y_val.to", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "main.MetaLearner.running_val_grad.avg", "main.MetaLearner.running_val_grad.avg", "main.MetaLearner.running_val_grad.avg", "float", "float", "float", "float", "float", "float"], "methods", ["home.repos.pwc.inspect_result.polo5_fds.models.meta_factory.ReparamModule.forward_with_param", "home.repos.pwc.inspect_result.polo5_fds.utils.helpers.AggregateTensor.update", "home.repos.pwc.inspect_result.polo5_fds.utils.helpers.AggregateTensor.avg", "home.repos.pwc.inspect_result.polo5_fds.utils.helpers.AggregateTensor.avg", "home.repos.pwc.inspect_result.polo5_fds.utils.helpers.AggregateTensor.avg"], ["", "def", "outer_step", "(", "self", ",", "outer_step_idx", ",", "Z_lr_final", ",", "Z_mom_final", ",", "Z_wd_final", ")", ":", "\n", "        ", "\"\"\"\n        Calculate hypergradients and update hyperparameters accordingly.\n        \"\"\"", "\n", "\n", "## Calculate validation gradients with final weights of inner loop", "\n", "self", ".", "running_val_grad", "=", "AggregateTensor", "(", ")", "\n", "for", "batch_idx", ",", "(", "x_val", ",", "y_val", ")", "in", "enumerate", "(", "self", ".", "val_loader", ")", ":", "#need as big batches as train mode for BN train mode", "\n", "            ", "x_val", ",", "y_val", "=", "x_val", ".", "to", "(", "device", "=", "self", ".", "args", ".", "device", ")", ",", "y_val", ".", "to", "(", "device", "=", "self", ".", "args", ".", "device", ")", "\n", "val_logits", "=", "self", ".", "classifier", ".", "forward_with_param", "(", "x_val", ",", "self", ".", "weights", ")", "\n", "val_loss", "=", "self", ".", "cross_entropy", "(", "val_logits", ",", "y_val", ")", "\n", "dLval_dw", "=", "torch", ".", "autograd", ".", "grad", "(", "val_loss", ",", "self", ".", "weights", ")", "[", "0", "]", "\n", "self", ".", "running_val_grad", ".", "update", "(", "dLval_dw", ")", "\n", "\n", "## Update hyperparams", "\n", "", "print", "(", "''", ")", "\n", "if", "self", ".", "args", ".", "learn_lr", ":", "\n", "            ", "self", ".", "inner_lrs_grad", "=", "self", ".", "running_val_grad", ".", "avg", "(", ")", "@", "Z_lr_final", "/", "self", ".", "n_batches_per_lr", "\n", "self", ".", "all_lr_raw_grads", "[", "outer_step_idx", "]", "=", "self", ".", "inner_lrs_grad", ".", "detach", "(", ")", "\n", "print", "(", "'RAW LR GRADS: '", ",", "[", "\"{:.2E}\"", ".", "format", "(", "float", "(", "i", ")", ")", "for", "i", "in", "self", ".", "inner_lrs_grad", "]", ")", "\n", "new_hypersigns", "=", "torch", ".", "sign", "(", "self", ".", "inner_lrs_grad", ")", "#Nans and zero have sign 0", "\n", "flipped_signs", "=", "self", ".", "lr_hypersigns", "*", "new_hypersigns", "# 1, -1 or 0", "\n", "multipliers", "=", "torch", ".", "tensor", "(", "[", "self", ".", "args", ".", "lr_step_decay", "if", "f", "==", "-", "1.0", "else", "1.0", "for", "f", "in", "flipped_signs", "]", ",", "device", "=", "self", ".", "args", ".", "device", ")", "\n", "self", ".", "lr_step_sizes", "=", "multipliers", "*", "self", ".", "lr_step_sizes", "\n", "self", ".", "lr_hypersigns", "=", "new_hypersigns", "\n", "deltas", "=", "new_hypersigns", "*", "self", ".", "lr_step_sizes", "# how much to change hyperparameter by", "\n", "self", ".", "lr_converged", "=", "(", "(", "self", ".", "lr_step_sizes", "/", "self", ".", "inner_lrs", ")", "<", "self", ".", "args", ".", "converged_frac", ")", ".", "all", "(", ")", "\n", "self", ".", "inner_lrs", "=", "self", ".", "inner_lrs", "-", "deltas", "\n", "self", ".", "all_lr_smooth_grads", "[", "outer_step_idx", "]", "=", "deltas", "\n", "print", "(", "'SMOOTH LR DELTAS: '", ",", "[", "\"{:02.2f}\"", ".", "format", "(", "float", "(", "i", ")", ")", "for", "i", "in", "deltas", "]", ")", "\n", "\n", "\n", "", "if", "self", ".", "args", ".", "learn_mom", ":", "\n", "            ", "self", ".", "inner_moms_grad", "=", "self", ".", "running_val_grad", ".", "avg", "(", ")", "@", "Z_mom_final", "/", "self", ".", "n_batches_per_mom", "\n", "self", ".", "all_mom_raw_grads", "[", "outer_step_idx", "]", "=", "self", ".", "inner_moms_grad", ".", "detach", "(", ")", "\n", "print", "(", "'RAW MOM GRADS: '", ",", "[", "\"{:.2E}\"", ".", "format", "(", "float", "(", "i", ")", ")", "for", "i", "in", "self", ".", "inner_moms_grad", "]", ")", "\n", "new_hypersigns", "=", "torch", ".", "sign", "(", "self", ".", "inner_moms_grad", ")", "#Nans and zero have sign 0", "\n", "flipped_signs", "=", "self", ".", "mom_hypersigns", "*", "new_hypersigns", "# 1, -1 or 0", "\n", "multipliers", "=", "torch", ".", "tensor", "(", "[", "self", ".", "args", ".", "mom_step_decay", "if", "f", "==", "-", "1.0", "else", "1.0", "for", "f", "in", "flipped_signs", "]", ",", "device", "=", "self", ".", "args", ".", "device", ")", "\n", "self", ".", "mom_step_sizes", "=", "multipliers", "*", "self", ".", "mom_step_sizes", "\n", "self", ".", "mom_hypersigns", "=", "new_hypersigns", "\n", "deltas", "=", "new_hypersigns", "*", "self", ".", "mom_step_sizes", "# how much to change hyperparameter by", "\n", "self", ".", "mom_converged", "=", "(", "(", "self", ".", "mom_step_sizes", "/", "self", ".", "inner_moms", ")", "<", "self", ".", "args", ".", "converged_frac", ")", ".", "all", "(", ")", "\n", "self", ".", "inner_moms", "=", "self", ".", "inner_moms", "-", "deltas", "\n", "self", ".", "all_mom_smooth_grads", "[", "outer_step_idx", "]", "=", "deltas", "\n", "print", "(", "'SMOOTH MOM DELTAS: '", ",", "[", "\"{:02.2f}\"", ".", "format", "(", "float", "(", "i", ")", ")", "for", "i", "in", "deltas", "]", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "learn_wd", ":", "\n", "            ", "self", ".", "inner_wds_grad", "=", "self", ".", "running_val_grad", ".", "avg", "(", ")", "@", "Z_wd_final", "/", "self", ".", "n_batches_per_wd", "\n", "self", ".", "all_wd_raw_grads", "[", "outer_step_idx", "]", "=", "self", ".", "inner_wds_grad", ".", "detach", "(", ")", "\n", "print", "(", "'RAW WD GRADS: '", ",", "[", "\"{:.2E}\"", ".", "format", "(", "float", "(", "i", ")", ")", "for", "i", "in", "self", ".", "inner_wds_grad", "]", ")", "\n", "new_hypersigns", "=", "torch", ".", "sign", "(", "self", ".", "inner_wds_grad", ")", "#Nans and zero have sign 0", "\n", "flipped_signs", "=", "self", ".", "wd_hypersigns", "*", "new_hypersigns", "# 1, -1 or 0", "\n", "multipliers", "=", "torch", ".", "tensor", "(", "[", "self", ".", "args", ".", "wd_step_decay", "if", "f", "==", "-", "1.0", "else", "1.0", "for", "f", "in", "flipped_signs", "]", ",", "device", "=", "self", ".", "args", ".", "device", ")", "\n", "self", ".", "wd_step_sizes", "=", "multipliers", "*", "self", ".", "wd_step_sizes", "\n", "self", ".", "wd_hypersigns", "=", "new_hypersigns", "\n", "deltas", "=", "new_hypersigns", "*", "self", ".", "wd_step_sizes", "# how much to change hyperparameter by", "\n", "self", ".", "wd_converged", "=", "(", "(", "self", ".", "wd_step_sizes", "/", "self", ".", "inner_wds", ")", "<", "self", ".", "args", ".", "converged_frac", ")", ".", "all", "(", ")", "\n", "self", ".", "inner_wds", "=", "self", ".", "inner_wds", "-", "deltas", "\n", "self", ".", "all_wd_smooth_grads", "[", "outer_step_idx", "]", "=", "deltas", "\n", "print", "(", "'SMOOTH WD DELTAS: '", ",", "[", "\"{:02.2f}\"", ".", "format", "(", "float", "(", "i", ")", ")", "for", "i", "in", "deltas", "]", ")", "\n", "\n", "", "self", ".", "converged", "=", "(", "self", ".", "lr_converged", "if", "self", ".", "args", ".", "learn_lr", "else", "True", ")", "and", "(", "self", ".", "mom_converged", "if", "self", ".", "args", ".", "learn_mom", "else", "True", ")", "and", "(", "self", ".", "wd_converged", "if", "self", ".", "args", ".", "learn_wd", "else", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.None.main.MetaLearner.run": [[290, 353], ["time.time", "range", "print", "main.MetaLearner.save_state", "main.MetaLearner.test", "print", "print", "main.MetaLearner.save_state", "utils.datasets.get_loaders", "len", "main.MetaLearner.inner_loop", "main.MetaLearner.outer_step", "main.MetaLearner.validate", "main.MetaLearner.test", "main.MetaLearner.logger.write", "main.MetaLearner.inner_lrs.detach", "main.MetaLearner.inner_moms.detach", "main.MetaLearner.inner_wds.detach", "main.MetaLearner.inner_lrs.detach", "main.MetaLearner.inner_moms.detach", "main.MetaLearner.inner_wds.detach", "print", "time.time", "float", "float", "float"], "methods", ["home.repos.pwc.inspect_result.polo5_fds.None.main.MetaLearner.save_state", "home.repos.pwc.inspect_result.polo5_fds.None.main.BaseLearner.test", "home.repos.pwc.inspect_result.polo5_fds.None.main.MetaLearner.save_state", "home.repos.pwc.inspect_result.polo5_fds.utils.datasets.get_loaders", "home.repos.pwc.inspect_result.polo5_fds.None.main.MetaLearner.inner_loop", "home.repos.pwc.inspect_result.polo5_fds.None.main.MetaLearner.outer_step", "home.repos.pwc.inspect_result.polo5_fds.None.main.MetaLearner.validate", "home.repos.pwc.inspect_result.polo5_fds.None.main.BaseLearner.test", "home.repos.pwc.inspect_result.polo5_fds.utils.logger.Logger.write"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "\"\"\" Run meta learning experiment \"\"\"", "\n", "\n", "t0", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "outer_step_idx", "in", "range", "(", "self", ".", "args", ".", "n_outer_steps", ")", ":", "# number of outer steps", "\n", "\n", "## Set up", "\n", "            ", "self", ".", "n_inner_epochs_for_this_outer_step", "=", "self", ".", "args", ".", "n_inner_epochs_per_outer_steps", "[", "outer_step_idx", "]", "\n", "print", "(", "f'\\nOuter step {outer_step_idx+1}/{self.args.n_outer_steps} --- current budget of {self.n_inner_epochs_for_this_outer_step} epochs --- using:'", ")", "\n", "print", "(", "'lrs = '", ",", "[", "float", "(", "'{:02.2e}'", ".", "format", "(", "el", ")", ")", "for", "el", "in", "self", ".", "inner_lrs", "]", ",", "\n", "'moms = '", ",", "[", "float", "(", "'{:02.2e}'", ".", "format", "(", "el", ")", ")", "for", "el", "in", "self", ".", "inner_moms", "]", ",", "\n", "'wds = '", ",", "[", "float", "(", "'{:02.2e}'", ".", "format", "(", "el", ")", ")", "for", "el", "in", "self", ".", "inner_wds", "]", ")", "\n", "self", ".", "all_lr_schedules", "[", "outer_step_idx", "]", ",", "self", ".", "all_mom_schedules", "[", "outer_step_idx", "]", ",", "self", ".", "all_wd_schedules", "[", "outer_step_idx", "]", "=", "self", ".", "inner_lrs", ".", "detach", "(", ")", ",", "self", ".", "inner_moms", ".", "detach", "(", ")", ",", "self", ".", "inner_wds", ".", "detach", "(", ")", "\n", "self", ".", "save_state", "(", "outer_step_idx", ")", "# state and lrs saved correspond to those set at the beginning of the outer_step", "\n", "\n", "\n", "## New data split for each outer_step", "\n", "self", ".", "train_loader", ",", "self", ".", "val_loader", ",", "self", ".", "test_loader", "=", "get_loaders", "(", "datasets_path", "=", "self", ".", "args", ".", "datasets_path", ",", "\n", "dataset", "=", "self", ".", "args", ".", "dataset", ",", "\n", "train_batch_size", "=", "self", ".", "args", ".", "train_batch_size", ",", "\n", "val_batch_size", "=", "self", ".", "args", ".", "val_batch_size", ",", "\n", "val_source", "=", "'train'", ",", "\n", "val_train_fraction", "=", "self", ".", "args", ".", "val_train_fraction", ",", "\n", "val_train_overlap", "=", "self", ".", "args", ".", "val_train_overlap", ",", "\n", "workers", "=", "self", ".", "args", ".", "workers", ",", "\n", "train_infinite", "=", "False", ",", "\n", "val_infinite", "=", "False", ",", "\n", "cutout", "=", "self", ".", "args", ".", "cutout", ",", "\n", "cutout_length", "=", "self", ".", "args", ".", "cutout_length", ",", "\n", "cutout_prob", "=", "self", ".", "args", ".", "cutout_prob", ")", "\n", "\n", "self", ".", "n_batches_per_epoch", "=", "len", "(", "self", ".", "train_loader", ")", "\n", "self", ".", "n_total_batches_for_this_outer_step", "=", "self", ".", "n_inner_epochs_for_this_outer_step", "*", "self", ".", "n_batches_per_epoch", "\n", "## Update Hypers", "\n", "Z_lr_final", ",", "Z_mom_final", ",", "Z_wd_final", "=", "self", ".", "inner_loop", "(", ")", "\n", "self", ".", "outer_step", "(", "outer_step_idx", ",", "Z_lr_final", ",", "Z_mom_final", ",", "Z_wd_final", ")", "\n", "\n", "## See if schedule used for this outer_step led to best validation", "\n", "_", ",", "val_acc", "=", "self", ".", "validate", "(", "self", ".", "weights", ")", "\n", "_", ",", "test_acc", "=", "self", ".", "test", "(", "self", ".", "weights", ")", "\n", "if", "val_acc", ">", "self", ".", "best_validation_acc", ":", "\n", "                ", "self", ".", "best_validation_acc", "=", "val_acc", "\n", "self", ".", "best_outer_step", "=", "outer_step_idx", "\n", "#print(f'Best validation acc at outer_step idx {outer_step_idx}')", "\n", "\n", "## Break if all hyperparameters have converged", "\n", "", "if", "self", ".", "converged", ":", "\n", "                ", "print", "(", "'STOP HYPERTRAINING BECAUSE ALL HYPERPARAMETERS HAVE CONVERGED'", ")", "\n", "break", "\n", "\n", "## Time", "\n", "", "time_so_far", "=", "time", ".", "time", "(", ")", "-", "t0", "\n", "self", ".", "logger", ".", "write", "(", "{", "'budget'", ":", "self", ".", "n_inner_epochs_for_this_outer_step", ",", "'time'", ":", "time_so_far", ",", "\n", "'val_acc'", ":", "val_acc", ",", "'test_acc'", ":", "test_acc", "}", ")", "\n", "", "print", "(", "f'final val acc {100*val_acc:.2g} -- final test_acc: {100*test_acc:.2g}'", ")", "\n", "\n", "## Logging Final Metrics", "\n", "self", ".", "all_lr_schedules", "[", "outer_step_idx", "+", "1", "]", ",", "self", ".", "all_mom_schedules", "[", "outer_step_idx", "+", "1", "]", ",", "self", ".", "all_wd_schedules", "[", "outer_step_idx", "+", "1", "]", "=", "self", ".", "inner_lrs", ".", "detach", "(", ")", ",", "self", ".", "inner_moms", ".", "detach", "(", ")", ",", "self", ".", "inner_wds", ".", "detach", "(", ")", "#last schedule was never trained on", "\n", "self", ".", "save_state", "(", "outer_step_idx", "+", "1", ")", "\n", "avg_test_loss", ",", "avg_test_acc", "=", "self", ".", "test", "(", "self", ".", "weights", ")", "\n", "\n", "return", "avg_test_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.None.main.MetaLearner.validate": [[354, 371], ["main.MetaLearner.classifier.eval", "main.MetaLearner.classifier.train", "utils.helpers.AggregateTensor", "utils.helpers.AggregateTensor", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "float", "float", "main.MetaLearner.classifier.forward_with_param", "running_loss.update", "running_acc.update", "running_loss.avg", "running_acc.avg", "x.to", "y.to", "main.MetaLearner.cross_entropy", "utils.helpers.accuracy", "len"], "methods", ["home.repos.pwc.inspect_result.polo5_fds.None.main.BaseLearner.train", "home.repos.pwc.inspect_result.polo5_fds.models.meta_factory.ReparamModule.forward_with_param", "home.repos.pwc.inspect_result.polo5_fds.utils.helpers.AggregateTensor.update", "home.repos.pwc.inspect_result.polo5_fds.utils.helpers.AggregateTensor.update", "home.repos.pwc.inspect_result.polo5_fds.utils.helpers.AggregateTensor.avg", "home.repos.pwc.inspect_result.polo5_fds.utils.helpers.AggregateTensor.avg", "home.repos.pwc.inspect_result.polo5_fds.utils.helpers.accuracy"], ["", "def", "validate", "(", "self", ",", "weights", ",", "fraction", "=", "1.0", ")", ":", "\n", "        ", "\"\"\" Fraction allows trading accuracy for speed when logging many times\"\"\"", "\n", "self", ".", "classifier", ".", "eval", "(", ")", "\n", "running_acc", ",", "running_loss", "=", "AggregateTensor", "(", ")", ",", "AggregateTensor", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "            ", "for", "batch_idx", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "self", ".", "val_loader", ")", ":", "\n", "                ", "x", ",", "y", "=", "x", ".", "to", "(", "device", "=", "self", ".", "args", ".", "device", ")", ",", "y", ".", "to", "(", "device", "=", "self", ".", "args", ".", "device", ")", "\n", "logits", "=", "self", ".", "classifier", ".", "forward_with_param", "(", "x", ",", "weights", ")", "\n", "running_loss", ".", "update", "(", "self", ".", "cross_entropy", "(", "logits", ",", "y", ")", ",", "x", ".", "shape", "[", "0", "]", ")", "\n", "running_acc", ".", "update", "(", "accuracy", "(", "logits", ",", "y", ",", "topk", "=", "(", "1", ",", ")", ")", "[", "0", "]", ",", "x", ".", "shape", "[", "0", "]", ")", "\n", "if", "fraction", "<", "1", "and", "(", "batch_idx", "+", "1", ")", ">=", "fraction", "*", "len", "(", "self", ".", "val_loader", ")", ":", "\n", "                    ", "break", "\n", "\n", "", "", "", "self", ".", "classifier", ".", "train", "(", ")", "\n", "return", "float", "(", "running_loss", ".", "avg", "(", ")", ")", ",", "float", "(", "running_acc", ".", "avg", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.None.main.MetaLearner.test": [[372, 389], ["main.MetaLearner.classifier.eval", "main.MetaLearner.classifier.train", "utils.helpers.AggregateTensor", "utils.helpers.AggregateTensor", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "float", "float", "main.MetaLearner.classifier.forward_with_param", "running_loss.update", "running_acc.update", "running_loss.avg", "running_acc.avg", "x.to", "y.to", "main.MetaLearner.cross_entropy", "utils.helpers.accuracy", "len"], "methods", ["home.repos.pwc.inspect_result.polo5_fds.None.main.BaseLearner.train", "home.repos.pwc.inspect_result.polo5_fds.models.meta_factory.ReparamModule.forward_with_param", "home.repos.pwc.inspect_result.polo5_fds.utils.helpers.AggregateTensor.update", "home.repos.pwc.inspect_result.polo5_fds.utils.helpers.AggregateTensor.update", "home.repos.pwc.inspect_result.polo5_fds.utils.helpers.AggregateTensor.avg", "home.repos.pwc.inspect_result.polo5_fds.utils.helpers.AggregateTensor.avg", "home.repos.pwc.inspect_result.polo5_fds.utils.helpers.accuracy"], ["", "def", "test", "(", "self", ",", "weights", ",", "fraction", "=", "1.0", ")", ":", "\n", "        ", "\"\"\" Fraction allows trading accuracy for speed when logging many times\"\"\"", "\n", "self", ".", "classifier", ".", "eval", "(", ")", "\n", "running_acc", ",", "running_loss", "=", "AggregateTensor", "(", ")", ",", "AggregateTensor", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "            ", "for", "batch_idx", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "self", ".", "test_loader", ")", ":", "\n", "                ", "x", ",", "y", "=", "x", ".", "to", "(", "device", "=", "self", ".", "args", ".", "device", ")", ",", "y", ".", "to", "(", "device", "=", "self", ".", "args", ".", "device", ")", "\n", "logits", "=", "self", ".", "classifier", ".", "forward_with_param", "(", "x", ",", "weights", ")", "\n", "running_loss", ".", "update", "(", "self", ".", "cross_entropy", "(", "logits", ",", "y", ")", ",", "x", ".", "shape", "[", "0", "]", ")", "\n", "running_acc", ".", "update", "(", "accuracy", "(", "logits", ",", "y", ",", "topk", "=", "(", "1", ",", ")", ")", "[", "0", "]", ",", "x", ".", "shape", "[", "0", "]", ")", "\n", "if", "fraction", "<", "1", "and", "(", "batch_idx", "+", "1", ")", ">=", "fraction", "*", "len", "(", "self", ".", "test_loader", ")", ":", "\n", "                    ", "break", "\n", "\n", "", "", "", "self", ".", "classifier", ".", "train", "(", ")", "\n", "return", "float", "(", "running_loss", ".", "avg", "(", ")", ")", ",", "float", "(", "running_acc", ".", "avg", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.None.main.MetaLearner.save_state": [[390, 405], ["torch.save", "torch.save", "torch.save", "torch.save"], "methods", ["None"], ["", "def", "save_state", "(", "self", ",", "outer_step_idx", ")", ":", "\n", "\n", "        ", "torch", ".", "save", "(", "{", "'args'", ":", "self", ".", "args", ",", "\n", "'outer_step_idx'", ":", "outer_step_idx", ",", "\n", "'best_outer_step'", ":", "self", ".", "best_outer_step", ",", "\n", "'best_validation_acc'", ":", "self", ".", "best_validation_acc", ",", "\n", "'all_lr_schedules'", ":", "self", ".", "all_lr_schedules", ",", "\n", "'all_lr_raw_grads'", ":", "self", ".", "all_lr_raw_grads", ",", "\n", "'all_lr_smooth_grads'", ":", "self", ".", "all_lr_smooth_grads", ",", "\n", "'all_mom_schedules'", ":", "self", ".", "all_mom_schedules", ",", "\n", "'all_mom_raw_grads'", ":", "self", ".", "all_mom_raw_grads", ",", "\n", "'all_mom_smooth_grads'", ":", "self", ".", "all_mom_smooth_grads", ",", "\n", "'all_wd_schedules'", ":", "self", ".", "all_wd_schedules", ",", "\n", "'all_wd_raw_grads'", ":", "self", ".", "all_wd_raw_grads", ",", "\n", "'all_wd_smooth_grads'", ":", "self", ".", "all_wd_smooth_grads", "}", ",", "self", ".", "checkpoint_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.None.main.BaseLearner.__init__": [[412, 447], ["utils.datasets.get_loaders", "len", "models.selector.select_model().to", "torch.SGD", "torch.SGD", "nn.CrossEntropyLoss", "os.path.join", "utils.logger.Logger", "main.BaseLearner.classifier.parameters", "models.selector.select_model"], "methods", ["home.repos.pwc.inspect_result.polo5_fds.utils.datasets.get_loaders", "home.repos.pwc.inspect_result.polo5_fds.models.selector.select_model"], ["def", "__init__", "(", "self", ",", "args", ",", "lr_schedule", ",", "mom_schedule", ",", "wd_schedule", ",", "log_name", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "inner_lrs", "=", "lr_schedule", "\n", "self", ".", "inner_moms", "=", "mom_schedule", "\n", "self", ".", "inner_wds", "=", "wd_schedule", "\n", "\n", "## Loaders", "\n", "self", ".", "args", ".", "val_source", "=", "'test'", "# retrain on full train set from scratch", "\n", "self", ".", "train_loader", ",", "_", ",", "self", ".", "test_loader", "=", "get_loaders", "(", "datasets_path", "=", "self", ".", "args", ".", "datasets_path", ",", "\n", "dataset", "=", "self", ".", "args", ".", "dataset", ",", "\n", "train_batch_size", "=", "self", ".", "args", ".", "train_batch_size", ",", "\n", "val_batch_size", "=", "self", ".", "args", ".", "val_batch_size", ",", "\n", "val_source", "=", "self", ".", "args", ".", "val_source", ",", "\n", "val_train_fraction", "=", "self", ".", "args", ".", "val_train_fraction", ",", "\n", "val_train_overlap", "=", "self", ".", "args", ".", "val_train_overlap", ",", "\n", "workers", "=", "self", ".", "args", ".", "workers", ",", "\n", "train_infinite", "=", "False", ",", "\n", "val_infinite", "=", "False", ",", "\n", "cutout", "=", "self", ".", "args", ".", "cutout", ",", "\n", "cutout_length", "=", "self", ".", "args", ".", "cutout_length", ",", "\n", "cutout_prob", "=", "self", ".", "args", ".", "cutout_prob", ")", "\n", "\n", "self", ".", "n_batches_per_epoch", "=", "len", "(", "self", ".", "train_loader", ")", "\n", "self", ".", "n_total_batches", "=", "self", ".", "args", ".", "retrain_n_epochs", "*", "self", ".", "n_batches_per_epoch", "\n", "\n", "## Optimizer", "\n", "self", ".", "classifier", "=", "select_model", "(", "False", ",", "self", ".", "args", ".", "dataset", ",", "self", ".", "args", ".", "architecture", ",", "\n", "self", ".", "args", ".", "init_type", ",", "self", ".", "args", ".", "init_param", ",", "\n", "self", ".", "args", ".", "device", ")", ".", "to", "(", "self", ".", "args", ".", "device", ")", "\n", "self", ".", "optimizer", "=", "optim", ".", "SGD", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ",", "lr", "=", "0.0", ",", "momentum", "=", "0.0", ",", "weight_decay", "=", "0.0", ")", "#set hypers manually later", "\n", "self", ".", "cross_entropy", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "### Set up", "\n", "self", ".", "experiment_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "log_directory_path", ",", "args", ".", "experiment_name", ")", "\n", "self", ".", "logger", "=", "Logger", "(", "self", ".", "experiment_path", ",", "log_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.None.main.BaseLearner.log_init": [[448, 450], ["utils.helpers.AggregateTensor", "utils.helpers.AggregateTensor"], "methods", ["None"], ["", "def", "log_init", "(", "self", ")", ":", "\n", "        ", "self", ".", "running_train_loss", ",", "self", ".", "running_train_acc", "=", "AggregateTensor", "(", ")", ",", "AggregateTensor", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.None.main.BaseLearner.log": [[451, 456], ["main.BaseLearner.test", "print", "main.BaseLearner.logger.write", "main.BaseLearner.log_init"], "methods", ["home.repos.pwc.inspect_result.polo5_fds.None.main.BaseLearner.test", "home.repos.pwc.inspect_result.polo5_fds.utils.logger.Logger.write", "home.repos.pwc.inspect_result.polo5_fds.None.main.BaseLearner.log_init"], ["", "def", "log", "(", "self", ",", "epoch", ",", "avg_train_loss", ",", "avg_train_acc", ")", ":", "\n", "        ", "avg_test_loss", ",", "avg_test_acc", "=", "self", ".", "test", "(", "fraction", "=", "0.1", "if", "epoch", "!=", "self", ".", "args", ".", "retrain_n_epochs", "-", "1", "else", "1", ")", "\n", "print", "(", "'Retrain epoch {}/{} --- Train Acc: {:02.2f}% -- Test Acc: {:02.2f}%'", ".", "format", "(", "epoch", "+", "1", ",", "self", ".", "args", ".", "retrain_n_epochs", ",", "avg_train_acc", "*", "100", ",", "avg_test_acc", "*", "100", ")", ")", "\n", "self", ".", "logger", ".", "write", "(", "{", "'train_loss'", ":", "avg_train_loss", ",", "'train_acc'", ":", "avg_train_acc", ",", "'test_loss'", ":", "avg_test_loss", ",", "'test_acc'", ":", "avg_test_acc", "}", ")", "\n", "self", ".", "log_init", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.None.main.BaseLearner.get_hypers": [[457, 470], ["int", "float", "int", "float", "int", "float"], "methods", ["None"], ["", "def", "get_hypers", "(", "self", ",", "epoch", ",", "batch_idx", ")", ":", "\n", "        ", "\"\"\"return hyperparameters to be used for given batch\"\"\"", "\n", "\n", "lr_index", "=", "int", "(", "self", ".", "args", ".", "n_lrs", "*", "(", "epoch", "*", "self", ".", "n_batches_per_epoch", "+", "batch_idx", ")", "/", "self", ".", "n_total_batches", ")", "\n", "lr", "=", "float", "(", "self", ".", "inner_lrs", "[", "lr_index", "]", ")", "\n", "\n", "mom_index", "=", "int", "(", "self", ".", "args", ".", "n_moms", "*", "(", "epoch", "*", "self", ".", "n_batches_per_epoch", "+", "batch_idx", ")", "/", "self", ".", "n_total_batches", ")", "\n", "mom", "=", "float", "(", "self", ".", "inner_moms", "[", "mom_index", "]", ")", "\n", "\n", "wd_index", "=", "int", "(", "self", ".", "args", ".", "n_wds", "*", "(", "epoch", "*", "self", ".", "n_batches_per_epoch", "+", "batch_idx", ")", "/", "self", ".", "n_total_batches", ")", "\n", "wd", "=", "float", "(", "self", ".", "inner_wds", "[", "wd_index", "]", ")", "\n", "\n", "return", "lr", ",", "mom", ",", "wd", ",", "lr_index", ",", "mom_index", ",", "wd_index", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.None.main.BaseLearner.set_hypers": [[471, 477], ["main.BaseLearner.get_hypers"], "methods", ["home.repos.pwc.inspect_result.polo5_fds.None.main.BaseLearner.get_hypers"], ["", "def", "set_hypers", "(", "self", ",", "epoch", ",", "batch_idx", ")", ":", "\n", "        ", "lr", ",", "mom", ",", "wd", ",", "lr_index", ",", "mom_index", ",", "wd_index", "=", "self", ".", "get_hypers", "(", "epoch", ",", "batch_idx", ")", "\n", "for", "param_group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "param_group", "[", "'momentum'", "]", "=", "mom", "\n", "param_group", "[", "'weight_decay'", "]", "=", "wd", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.None.main.BaseLearner.run": [[480, 488], ["range", "main.BaseLearner.test", "main.BaseLearner.train", "main.BaseLearner.log"], "methods", ["home.repos.pwc.inspect_result.polo5_fds.None.main.BaseLearner.test", "home.repos.pwc.inspect_result.polo5_fds.None.main.BaseLearner.train", "home.repos.pwc.inspect_result.polo5_fds.None.main.BaseLearner.log"], ["", "", "def", "run", "(", "self", ")", ":", "\n", "\n", "        ", "for", "epoch", "in", "range", "(", "self", ".", "args", ".", "retrain_n_epochs", ")", ":", "\n", "            ", "avg_train_loss", ",", "avg_train_acc", "=", "self", ".", "train", "(", "epoch", ")", "\n", "self", ".", "log", "(", "epoch", ",", "avg_train_loss", ",", "avg_train_acc", ")", "\n", "\n", "", "test_loss", ",", "test_acc", "=", "self", ".", "test", "(", ")", "\n", "return", "test_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.None.main.BaseLearner.train": [[489, 507], ["main.BaseLearner.classifier.train", "enumerate", "utils.helpers.AggregateTensor", "utils.helpers.AggregateTensor", "main.BaseLearner.set_hypers", "main.BaseLearner.classifier", "main.BaseLearner.cross_entropy", "running_loss.update", "running_acc.update", "main.BaseLearner.optimizer.zero_grad", "main.BaseLearner.backward", "main.BaseLearner.optimizer.step", "float", "float", "x.to", "y.to", "utils.helpers.accuracy", "running_loss.avg", "running_acc.avg"], "methods", ["home.repos.pwc.inspect_result.polo5_fds.None.main.BaseLearner.train", "home.repos.pwc.inspect_result.polo5_fds.None.main.BaseLearner.set_hypers", "home.repos.pwc.inspect_result.polo5_fds.utils.helpers.AggregateTensor.update", "home.repos.pwc.inspect_result.polo5_fds.utils.helpers.AggregateTensor.update", "home.repos.pwc.inspect_result.polo5_fds.utils.helpers.accuracy", "home.repos.pwc.inspect_result.polo5_fds.utils.helpers.AggregateTensor.avg", "home.repos.pwc.inspect_result.polo5_fds.utils.helpers.AggregateTensor.avg"], ["", "def", "train", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "classifier", ".", "train", "(", ")", "\n", "running_acc", ",", "running_loss", "=", "AggregateTensor", "(", ")", ",", "AggregateTensor", "(", ")", "\n", "\n", "for", "batch_idx", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "self", ".", "train_loader", ")", ":", "\n", "            ", "self", ".", "set_hypers", "(", "epoch", ",", "batch_idx", ")", "\n", "x", ",", "y", "=", "x", ".", "to", "(", "device", "=", "self", ".", "args", ".", "device", ")", ",", "y", ".", "to", "(", "device", "=", "self", ".", "args", ".", "device", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "x", ")", "\n", "loss", "=", "self", ".", "cross_entropy", "(", "input", "=", "logits", ",", "target", "=", "y", ")", "\n", "acc1", "=", "accuracy", "(", "logits", ".", "data", ",", "y", ",", "topk", "=", "(", "1", ",", ")", ")", "[", "0", "]", "\n", "running_loss", ".", "update", "(", "loss", ",", "x", ".", "shape", "[", "0", "]", ")", "\n", "running_acc", ".", "update", "(", "acc1", ",", "x", ".", "shape", "[", "0", "]", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "return", "float", "(", "running_loss", ".", "avg", "(", ")", ")", ",", "float", "(", "running_acc", ".", "avg", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.None.main.BaseLearner.test": [[508, 524], ["main.BaseLearner.classifier.eval", "main.BaseLearner.classifier.train", "utils.helpers.AggregateTensor", "utils.helpers.AggregateTensor", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "float", "float", "main.BaseLearner.classifier", "running_loss.update", "running_acc.update", "running_loss.avg", "running_acc.avg", "x.to", "y.to", "main.BaseLearner.cross_entropy", "utils.helpers.accuracy", "len"], "methods", ["home.repos.pwc.inspect_result.polo5_fds.None.main.BaseLearner.train", "home.repos.pwc.inspect_result.polo5_fds.utils.helpers.AggregateTensor.update", "home.repos.pwc.inspect_result.polo5_fds.utils.helpers.AggregateTensor.update", "home.repos.pwc.inspect_result.polo5_fds.utils.helpers.AggregateTensor.avg", "home.repos.pwc.inspect_result.polo5_fds.utils.helpers.AggregateTensor.avg", "home.repos.pwc.inspect_result.polo5_fds.utils.helpers.accuracy"], ["", "def", "test", "(", "self", ",", "fraction", "=", "1.0", ")", ":", "\n", "        ", "\"\"\" fraction allows trading accuracy for speed when logging many times\"\"\"", "\n", "self", ".", "classifier", ".", "eval", "(", ")", "\n", "running_acc", ",", "running_loss", "=", "AggregateTensor", "(", ")", ",", "AggregateTensor", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "batch_idx", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "self", ".", "test_loader", ")", ":", "\n", "                ", "x", ",", "y", "=", "x", ".", "to", "(", "device", "=", "self", ".", "args", ".", "device", ")", ",", "y", ".", "to", "(", "device", "=", "self", ".", "args", ".", "device", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "x", ")", "\n", "running_loss", ".", "update", "(", "self", ".", "cross_entropy", "(", "logits", ",", "y", ")", ",", "x", ".", "shape", "[", "0", "]", ")", "\n", "running_acc", ".", "update", "(", "accuracy", "(", "logits", ",", "y", ",", "topk", "=", "(", "1", ",", ")", ")", "[", "0", "]", ",", "x", ".", "shape", "[", "0", "]", ")", "\n", "if", "fraction", "<", "1", "and", "(", "batch_idx", "+", "1", ")", ">=", "fraction", "*", "len", "(", "self", ".", "test_loader", ")", ":", "\n", "                    ", "break", "\n", "\n", "", "", "", "self", ".", "classifier", ".", "train", "(", ")", "\n", "return", "float", "(", "running_loss", ".", "avg", "(", ")", ")", ",", "float", "(", "running_acc", ".", "avg", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.None.main.make_experiment_name": [[530, 547], ["str"], "function", ["None"], ["", "", "def", "make_experiment_name", "(", "args", ")", ":", "\n", "    ", "\"\"\"\n    Warning: Windows can have a weird behaviour for long filenames.\n    Protip: switch to Ubuntu ;)\n    \"\"\"", "\n", "\n", "## Main", "\n", "nepr", "=", "''", ".", "join", "(", "[", "str", "(", "i", ")", "for", "i", "in", "args", ".", "n_inner_epochs_per_outer_steps", "]", ")", "\n", "experiment_name", "=", "f'FSL_{args.dataset}_{args.architecture}_nepr{nepr}'", "\n", "experiment_name", "+=", "f'_init{args.init_type}-{args.init_param}'", "\n", "experiment_name", "+=", "f'_tbs{args.train_batch_size}'", "\n", "if", "args", ".", "cutout", ":", "experiment_name", "+=", "f'_cutout-p{args.cutout_prob}'", "\n", "if", "args", ".", "clamp_HZ", ":", "experiment_name", "+=", "f'_HZclamp{args.clamp_HZ_range}'", "\n", "\n", "experiment_name", "+=", "f'_S{args.seed}'", "\n", "\n", "return", "experiment_name", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.None.main.main": [[549, 601], ["utils.helpers.set_torch_seeds", "time.time", "main.MetaLearner", "main.MetaLearner.run", "utils.helpers.create_empty_file", "print", "time.time", "utils.helpers.format_time", "os.path.join", "print", "print", "print", "print", "main.BaseLearner", "main.BaseLearner.run", "utils.helpers.create_empty_file", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "os.path.join", "final_lr_schedule.tolist", "final_mom_schedule.tolist", "final_wd_schedule.tolist"], "function", ["home.repos.pwc.inspect_result.polo5_fds.utils.helpers.set_torch_seeds", "home.repos.pwc.inspect_result.polo5_fds.None.theorem4_checker_simple.ProofChecker.run", "home.repos.pwc.inspect_result.polo5_fds.utils.helpers.create_empty_file", "home.repos.pwc.inspect_result.polo5_fds.utils.helpers.format_time", "home.repos.pwc.inspect_result.polo5_fds.None.theorem4_checker_simple.ProofChecker.run", "home.repos.pwc.inspect_result.polo5_fds.utils.helpers.create_empty_file"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "set_torch_seeds", "(", "args", ".", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "enabled", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "t0", "=", "time", ".", "time", "(", ")", "\n", "meta_learner", "=", "MetaLearner", "(", "args", ")", "\n", "meta_test_acc", "=", "meta_learner", ".", "run", "(", ")", "\n", "total_time", "=", "time", ".", "time", "(", ")", "-", "t0", "\n", "\n", "to_print", "=", "'\\n\\nMETA TEST ACC: {:02.2f}%'", ".", "format", "(", "meta_test_acc", "*", "100", ")", "\n", "file_name", "=", "\"final_meta_test_acc_{:02.2f}_total_time_{}\"", ".", "format", "(", "meta_test_acc", "*", "100", ",", "format_time", "(", "total_time", ")", ")", "\n", "create_empty_file", "(", "os", ".", "path", ".", "join", "(", "args", ".", "log_directory_path", ",", "args", ".", "experiment_name", ",", "file_name", ")", ")", "\n", "\n", "if", "args", ".", "retrain_from_scratch", ":", "\n", "## Fetch schedules", "\n", "# best_idx = meta_learner.best_outer_step", "\n", "        ", "final_lr_schedule", ",", "final_mom_schedule", ",", "final_wd_schedule", "=", "meta_learner", ".", "all_lr_schedules", "[", "-", "1", "]", ",", "meta_learner", ".", "all_mom_schedules", "[", "-", "1", "]", ",", "meta_learner", ".", "all_wd_schedules", "[", "-", "1", "]", "\n", "# best_lr_schedule, best_mom_schedule, best_wd_schedule = meta_learner.all_lr_schedules[best_idx], meta_learner.all_mom_schedules[best_idx], meta_learner.all_wd_schedules[best_idx]", "\n", "del", "meta_learner", "\n", "\n", "## Retrain Last", "\n", "print", "(", "f'\\n\\n\\n---------- RETRAINING FROM SCRATCH WITH LAST SCHEDULE (idx {args.n_outer_steps}) ----------'", ")", "\n", "print", "(", "f'lrs = {final_lr_schedule.tolist()}'", ")", "\n", "print", "(", "f'moms = {final_mom_schedule.tolist()}'", ")", "\n", "print", "(", "f'wds = {final_wd_schedule.tolist()}'", ")", "\n", "\n", "log_name", "=", "f'Rerun_last_outer_step.csv'", "\n", "base_learner", "=", "BaseLearner", "(", "args", ",", "final_lr_schedule", ",", "final_mom_schedule", ",", "final_wd_schedule", ",", "log_name", ")", "\n", "if", "args", ".", "use_gpu", ":", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "base_test_acc", "=", "base_learner", ".", "run", "(", ")", "\n", "to_print", "+=", "'\\nRE-RUN LAST SCHEDULE TEST ACC: {:02.2f}%'", ".", "format", "(", "base_test_acc", "*", "100", ")", "\n", "file_name", "=", "\"Rerun_last_test_acc_{:02.2f}\"", ".", "format", "(", "base_test_acc", "*", "100", ")", "\n", "create_empty_file", "(", "os", ".", "path", ".", "join", "(", "args", ".", "log_directory_path", ",", "args", ".", "experiment_name", ",", "file_name", ")", ")", "\n", "\n", "\n", "# ## Retrain Best Val", "\n", "# print(f'\\n\\n\\n---------- RETRAINING FROM SCRATCH WITH BEST VAL SCHEDULE (idx {best_idx}) ----------')", "\n", "# print(f'lrs = {best_lr_schedule.tolist()}')", "\n", "# print(f'moms = {best_mom_schedule.tolist()}')", "\n", "# print(f'wds = {best_wd_schedule.tolist()}')", "\n", "#", "\n", "# log_name = f'Rerun_best_outer_step_idx_{best_idx}.csv'", "\n", "# base_learner = BaseLearner(args, best_lr_schedule, best_mom_schedule, best_wd_schedule, log_name)", "\n", "# if args.use_gpu: torch.cuda.empty_cache()", "\n", "# base_test_acc = base_learner.run()", "\n", "# to_print += '\\nRE-RUN BEST SCHEDULE TEST ACC: {:02.2f}%'.format(base_test_acc*100)", "\n", "# file_name = \"Rerun_best_test_acc_{:02.2f}\".format(base_test_acc*100)", "\n", "# create_empty_file(os.path.join(args.log_directory_path, args.experiment_name, file_name))", "\n", "\n", "", "print", "(", "to_print", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.None.figure2_hypergradients_fluctuation.HyperGradFluctuation.__init__": [[25, 59], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "nn.CrossEntropyLoss", "figure2_hypergradients_fluctuation.HyperGradFluctuation.init_lr_schedule", "utils.datasets.get_loaders", "os.path.join", "os.path.isfile", "utils.helpers.copy_file", "print", "print", "os.path.join", "os.path.exists", "os.makedirs", "os.path.realpath", "open", "figure2_hypergradients_fluctuation.HyperGradFluctuation.args.__dict__.items", "x.to", "y.to", "FileExistsError", "shutil.rmtree", "os.path.join", "print", "f.write"], "methods", ["home.repos.pwc.inspect_result.polo5_fds.None.figure2_hypergradients_fluctuation.HyperGradFluctuation.init_lr_schedule", "home.repos.pwc.inspect_result.polo5_fds.utils.datasets.get_loaders", "home.repos.pwc.inspect_result.polo5_fds.utils.helpers.copy_file", "home.repos.pwc.inspect_result.polo5_fds.utils.logger.Logger.write"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "hypergrads_all", "=", "torch", ".", "zeros", "(", "(", "self", ".", "args", ".", "n_runs", ",", "self", ".", "args", ".", "T", ")", ")", "\n", "self", ".", "cross_entropy", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "init_lr_schedule", "(", ")", "\n", "\n", "## Loaders", "\n", "self", ".", "infinite_train_loader", ",", "self", ".", "val_loader", ",", "_", "=", "get_loaders", "(", "datasets_path", "=", "self", ".", "args", ".", "datasets_path", ",", "\n", "dataset", "=", "self", ".", "args", ".", "dataset", ",", "\n", "train_batch_size", "=", "self", ".", "args", ".", "train_batch_size", ",", "\n", "val_batch_size", "=", "self", ".", "args", ".", "n_val_images", ",", "\n", "val_source", "=", "'test'", ",", "\n", "workers", "=", "self", ".", "args", ".", "workers", ",", "\n", "train_infinite", "=", "True", ",", "\n", "val_infinite", "=", "False", ")", "\n", "for", "x", ",", "y", "in", "self", ".", "val_loader", ":", "self", ".", "X_val", ",", "self", ".", "Y_val", "=", "x", ".", "to", "(", "device", "=", "self", ".", "args", ".", "device", ")", ",", "y", ".", "to", "(", "device", "=", "self", ".", "args", ".", "device", ")", "\n", "\n", "## Set up experiment folder", "\n", "self", ".", "experiment_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "log_directory_path", ",", "self", ".", "args", ".", "experiment_name", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "self", ".", "experiment_path", ",", "'hypergrads.pth.tar'", ")", ")", ":", "\n", "            ", "if", "args", ".", "use_gpu", ":", "raise", "FileExistsError", "(", "f'Experiment already ran and exists at {self.experiment_path}. \\nStopping now'", ")", "\n", "", "else", ":", "\n", "            ", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "experiment_path", ")", ":", "\n", "                ", "shutil", ".", "rmtree", "(", "self", ".", "experiment_path", ")", "\n", "", "os", ".", "makedirs", "(", "self", ".", "experiment_path", ")", "\n", "\n", "## Save and Print Args", "\n", "", "copy_file", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ",", "self", ".", "experiment_path", ")", "# save this python file in logs folder", "\n", "print", "(", "'\\n---------'", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "experiment_path", ",", "'args.txt'", ")", ",", "'w+'", ")", "as", "f", ":", "\n", "            ", "for", "k", ",", "v", "in", "self", ".", "args", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "                ", "print", "(", "k", ",", "v", ")", "\n", "f", ".", "write", "(", "\"{} \\t {}\\n\"", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "", "", "print", "(", "'---------\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.None.figure2_hypergradients_fluctuation.HyperGradFluctuation.init_lr_schedule": [[60, 72], ["torch.SGD", "torch.SGD", "torch.SGD", "torch.SGD", "torch.lr_scheduler.CosineAnnealingLR", "torch.lr_scheduler.CosineAnnealingLR", "torch.lr_scheduler.CosineAnnealingLR", "torch.lr_scheduler.CosineAnnealingLR", "range", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "lrs.append", "torch.SGD.step", "torch.lr_scheduler.CosineAnnealingLR.step", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.lr_scheduler.CosineAnnealingLR.get_last_lr"], "methods", ["None"], ["", "def", "init_lr_schedule", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "inner_lr_cosine_anneal", ":", "\n", "            ", "dummy_opt", "=", "optim", ".", "SGD", "(", "[", "torch", ".", "ones", "(", "[", "1", "]", ",", "requires_grad", "=", "True", ")", "]", ",", "lr", "=", "self", ".", "args", ".", "inner_lr_init", ")", "\n", "dummy_scheduler", "=", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "dummy_opt", ",", "T_max", "=", "self", ".", "args", ".", "T", ")", "\n", "lrs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "args", ".", "T", ")", ":", "\n", "                ", "lrs", ".", "append", "(", "dummy_scheduler", ".", "get_last_lr", "(", ")", "[", "0", "]", ")", "\n", "dummy_opt", ".", "step", "(", ")", "\n", "dummy_scheduler", ".", "step", "(", ")", "\n", "", "self", ".", "inner_lrs", "=", "torch", ".", "tensor", "(", "lrs", ",", "requires_grad", "=", "True", ",", "device", "=", "self", ".", "args", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "inner_lrs", "=", "torch", ".", "full", "(", "(", "self", ".", "args", ".", "T", ",", ")", ",", "self", ".", "args", ".", "inner_lr_init", ",", "requires_grad", "=", "True", ",", "device", "=", "self", ".", "args", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.None.figure2_hypergradients_fluctuation.HyperGradFluctuation.inner_and_outer_loop": [[73, 92], ["enumerate", "figure2_hypergradients_fluctuation.HyperGradFluctuation.classifier.forward_with_param", "figure2_hypergradients_fluctuation.HyperGradFluctuation.cross_entropy", "figure2_hypergradients_fluctuation.HyperGradFluctuation.compute_hypergradients", "x_train.to", "y_train.to", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "grads.clamp_", "figure2_hypergradients_fluctuation.HyperGradFluctuation.compute_hypergradients", "figure2_hypergradients_fluctuation.HyperGradFluctuation.weights.detach_().requires_grad_", "figure2_hypergradients_fluctuation.HyperGradFluctuation.velocity.detach_().requires_grad_", "figure2_hypergradients_fluctuation.HyperGradFluctuation.weights.detach_", "figure2_hypergradients_fluctuation.HyperGradFluctuation.velocity.detach_"], "methods", ["home.repos.pwc.inspect_result.polo5_fds.models.meta_factory.ReparamModule.forward_with_param", "home.repos.pwc.inspect_result.polo5_fds.None.figure2_hypergradients_fluctuation.HyperGradFluctuation.compute_hypergradients", "home.repos.pwc.inspect_result.polo5_fds.None.figure2_hypergradients_fluctuation.HyperGradFluctuation.compute_hypergradients"], ["", "", "def", "inner_and_outer_loop", "(", "self", ")", ":", "\n", "        ", "for", "self", ".", "inner_step_idx", ",", "(", "x_train", ",", "y_train", ")", "in", "enumerate", "(", "self", ".", "infinite_train_loader", ")", ":", "\n", "            ", "x_train", ",", "y_train", "=", "x_train", ".", "to", "(", "self", ".", "args", ".", "device", ",", "self", ".", "args", ".", "dtype", ")", ",", "y_train", ".", "to", "(", "self", ".", "args", ".", "device", ")", "\n", "train_logits", "=", "self", ".", "classifier", ".", "forward_with_param", "(", "x_train", ",", "self", ".", "weights", ")", "\n", "train_loss", "=", "self", ".", "cross_entropy", "(", "train_logits", ",", "y_train", ")", "\n", "\n", "grads", "=", "torch", ".", "autograd", ".", "grad", "(", "train_loss", ",", "self", ".", "weights", ",", "create_graph", "=", "True", ")", "[", "0", "]", "\n", "if", "self", ".", "args", ".", "clamp_inner_grads", ":", "grads", ".", "clamp_", "(", "-", "self", ".", "args", ".", "clamp_inner_grads_range", ",", "self", ".", "args", ".", "clamp_inner_grads_range", ")", "\n", "self", ".", "velocity", "=", "self", ".", "args", ".", "inner_momentum", "*", "self", ".", "velocity", "+", "(", "grads", "+", "self", ".", "args", ".", "inner_weight_decay", "*", "self", ".", "weights", ")", "\n", "self", ".", "weights", "=", "self", ".", "weights", "-", "self", ".", "inner_lrs", "[", "self", ".", "inner_step_idx", "]", "*", "self", ".", "velocity", "\n", "\n", "if", "self", ".", "args", ".", "greedy", ":", "\n", "                ", "self", ".", "compute_hypergradients", "(", ")", "#only populates .grad of one item in self.inner_lrs", "\n", "self", ".", "weights", ".", "detach_", "(", ")", ".", "requires_grad_", "(", ")", "\n", "self", ".", "velocity", ".", "detach_", "(", ")", ".", "requires_grad_", "(", ")", "\n", "\n", "", "if", "self", ".", "inner_step_idx", "+", "1", "==", "self", ".", "args", ".", "T", ":", "break", "\n", "\n", "", "if", "not", "self", ".", "args", ".", "greedy", ":", "self", ".", "compute_hypergradients", "(", ")", "#populates .grad of all items in self.inner_lrs", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.None.figure2_hypergradients_fluctuation.HyperGradFluctuation.compute_hypergradients": [[93, 97], ["figure2_hypergradients_fluctuation.HyperGradFluctuation.classifier.forward_with_param", "figure2_hypergradients_fluctuation.HyperGradFluctuation.cross_entropy", "figure2_hypergradients_fluctuation.HyperGradFluctuation.backward"], "methods", ["home.repos.pwc.inspect_result.polo5_fds.models.meta_factory.ReparamModule.forward_with_param"], ["", "def", "compute_hypergradients", "(", "self", ")", ":", "\n", "        ", "val_logits", "=", "self", ".", "classifier", ".", "forward_with_param", "(", "self", ".", "X_val", ",", "self", ".", "weights", ")", "\n", "val_loss", "=", "self", ".", "cross_entropy", "(", "val_logits", ",", "self", ".", "Y_val", ")", "\n", "val_loss", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.None.figure2_hypergradients_fluctuation.HyperGradFluctuation.run": [[98, 110], ["range", "figure2_hypergradients_fluctuation.HyperGradFluctuation.save_final", "models.selector.select_model().to", "figure2_hypergradients_fluctuation.HyperGradFluctuation.classifier.get_param", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "figure2_hypergradients_fluctuation.HyperGradFluctuation.inner_and_outer_loop", "figure2_hypergradients_fluctuation.HyperGradFluctuation.inner_lrs.grad.detach", "figure2_hypergradients_fluctuation.HyperGradFluctuation.inner_lrs.grad.data.zero_", "figure2_hypergradients_fluctuation.HyperGradFluctuation.weights.numel", "models.selector.select_model"], "methods", ["home.repos.pwc.inspect_result.polo5_fds.None.figure2_hypergradients_fluctuation.HyperGradFluctuation.save_final", "home.repos.pwc.inspect_result.polo5_fds.models.meta_factory.ReparamModule.get_param", "home.repos.pwc.inspect_result.polo5_fds.None.figure2_hypergradients_fluctuation.HyperGradFluctuation.inner_and_outer_loop", "home.repos.pwc.inspect_result.polo5_fds.models.selector.select_model"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "for", "self", ".", "run_idx", "in", "range", "(", "self", ".", "args", ".", "n_runs", ")", ":", "\n", "            ", "self", ".", "classifier", "=", "select_model", "(", "True", ",", "self", ".", "args", ".", "dataset", ",", "self", ".", "args", ".", "architecture", ",", "\n", "self", ".", "args", ".", "init_type", ",", "self", ".", "args", ".", "init_param", ",", "\n", "self", ".", "args", ".", "device", ")", ".", "to", "(", "self", ".", "args", ".", "device", ")", "\n", "self", ".", "weights", "=", "self", ".", "classifier", ".", "get_param", "(", ")", "\n", "self", ".", "velocity", "=", "torch", ".", "zeros", "(", "self", ".", "weights", ".", "numel", "(", ")", ",", "device", "=", "self", ".", "args", ".", "device", ")", "\n", "self", ".", "inner_and_outer_loop", "(", ")", "\n", "self", ".", "hypergrads_all", "[", "self", ".", "run_idx", "]", "=", "self", ".", "inner_lrs", ".", "grad", ".", "detach", "(", ")", "\n", "self", ".", "inner_lrs", ".", "grad", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "self", ".", "save_final", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.None.figure2_hypergradients_fluctuation.HyperGradFluctuation.save_final": [[111, 116], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "print", "os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "save_final", "(", "self", ")", ":", "\n", "        ", "torch", ".", "save", "(", "{", "'args'", ":", "self", ".", "args", ",", "\n", "'hypergrads_all'", ":", "self", ".", "hypergrads_all", "}", ",", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "experiment_path", ",", "'hypergrads.pth.tar'", ")", ")", "\n", "print", "(", "f\"Saved hypergrads to {os.path.join(self.experiment_path, 'hypergrads.pth.tar')}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.None.figure2_hypergradients_fluctuation.make_experiment_name": [[123, 131], ["None"], "function", ["None"], ["", "", "def", "make_experiment_name", "(", "args", ")", ":", "\n", "    ", "experiment_name", "=", "f'Hg_{args.dataset}_{args.init_type}_T{args.T}_tbs{args.train_batch_size}_mom{args.inner_momentum}_wd{args.inner_weight_decay}_ilr{args.inner_lr_init}'", "\n", "if", "args", ".", "inner_lr_cosine_anneal", ":", "experiment_name", "+=", "f'cosine'", "\n", "if", "args", ".", "greedy", ":", "experiment_name", "+=", "f'_GREEDY'", "\n", "if", "args", ".", "dtype", "==", "torch", ".", "float64", ":", "experiment_name", "+=", "'_FL64'", "\n", "experiment_name", "+=", "f'_S{args.seed}'", "\n", "\n", "return", "experiment_name", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.None.figure2_hypergradients_fluctuation.main": [[133, 146], ["utils.helpers.set_torch_seeds", "time.time", "figure2_hypergradients_fluctuation.HyperGradFluctuation", "figure2_hypergradients_fluctuation.HyperGradFluctuation.run", "time.time", "open", "f.write", "os.path.join", "utils.helpers.format_time"], "function", ["home.repos.pwc.inspect_result.polo5_fds.utils.helpers.set_torch_seeds", "home.repos.pwc.inspect_result.polo5_fds.None.theorem4_checker_simple.ProofChecker.run", "home.repos.pwc.inspect_result.polo5_fds.utils.logger.Logger.write", "home.repos.pwc.inspect_result.polo5_fds.utils.helpers.format_time"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "set_torch_seeds", "(", "args", ".", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "enabled", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "t0", "=", "time", ".", "time", "(", ")", "\n", "hypervariance_learner", "=", "HyperGradFluctuation", "(", "args", ")", "\n", "hypervariance_learner", ".", "run", "(", ")", "\n", "total_time", "=", "time", ".", "time", "(", ")", "-", "t0", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "log_directory_path", ",", "args", ".", "experiment_name", ",", "'TOTAL_TIME_'", "+", "format_time", "(", "total_time", ")", ")", ",", "'w+'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "\"NA\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.None.theorem4_checker_simple.ProofChecker.__init__": [[12, 20], ["int", "print", "print", "print", "print"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "args", ".", "T", "=", "args", ".", "T", "-", "args", ".", "T", "%", "args", ".", "W", "# make sure we have a whole number of windows that fit inside horizon", "\n", "self", ".", "K", "=", "int", "(", "args", ".", "T", "/", "args", ".", "W", ")", "\n", "print", "(", "f'Running experiments for a total of T={self.args.T} while using {self.K} hyperparameters, each shared over W={args.W} contiguous steps'", ")", "\n", "print", "(", "f'not sharing: expected MSE = sigma^2 = {args.sigma**2}'", ")", "\n", "print", "(", "f'sharing: expected MSE for min drift = sigma^2/W = {args.sigma**2/args.W}'", ")", "\n", "print", "(", "f'sharing: expected MSE for max drift (upper bound) = sigma^2/W + eps^2(W^2-1)/12 = {args.sigma**2/args.W + args.epsilon**2*(args.W**2 - 1)/12}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.None.theorem4_checker_simple.ProofChecker.sample_min_drift": [[21, 29], ["numpy.array", "numpy.random.normal", "range"], "methods", ["None"], ["", "def", "sample_min_drift", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        epsilon_t = 0 for all time steps\n        \"\"\"", "\n", "hypergrad_means", "=", "np", ".", "array", "(", "[", "self", ".", "args", ".", "mu_0", "for", "_", "in", "range", "(", "self", ".", "args", ".", "T", ")", "]", ")", "\n", "hypergrads", "=", "np", ".", "random", ".", "normal", "(", "hypergrad_means", ",", "self", ".", "args", ".", "sigma", ",", "size", "=", "(", "self", ".", "args", ".", "n_seeds", ",", "self", ".", "args", ".", "T", ")", ")", "\n", "optimal_hypergrads", "=", "hypergrad_means", "\n", "return", "hypergrads", ",", "optimal_hypergrads", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.None.theorem4_checker_simple.ProofChecker.sample_max_drift": [[30, 38], ["numpy.array", "numpy.random.normal", "range"], "methods", ["None"], ["", "def", "sample_max_drift", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        epsilon_t = epsilon for all time steps\n        \"\"\"", "\n", "hypergrad_means", "=", "np", ".", "array", "(", "[", "self", ".", "args", ".", "mu_0", "+", "n", "*", "self", ".", "args", ".", "epsilon", "for", "n", "in", "range", "(", "self", ".", "args", ".", "T", ")", "]", ")", "\n", "hypergrads", "=", "np", ".", "random", ".", "normal", "(", "hypergrad_means", ",", "self", ".", "args", ".", "sigma", ",", "size", "=", "(", "self", ".", "args", ".", "n_seeds", ",", "self", ".", "args", ".", "T", ")", ")", "\n", "optimal_hypergrads", "=", "hypergrad_means", "\n", "return", "hypergrads", ",", "optimal_hypergrads", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.None.theorem4_checker_simple.ProofChecker.sample_random_drift": [[40, 49], ["numpy.random.uniform", "numpy.array", "numpy.random.normal", "numpy.array.append"], "methods", ["None"], ["", "def", "sample_random_drift", "(", "self", ")", ":", "\n", "        ", "epsilons", "=", "np", ".", "random", ".", "uniform", "(", "-", "self", ".", "args", ".", "epsilon", ",", "self", ".", "args", ".", "epsilon", ",", "self", ".", "args", ".", "T", "-", "1", ")", "\n", "hypergrad_means", "=", "[", "self", ".", "args", ".", "mu_0", "]", "\n", "for", "eps", "in", "epsilons", ":", "\n", "            ", "hypergrad_means", ".", "append", "(", "hypergrad_means", "[", "-", "1", "]", "+", "eps", ")", "\n", "", "hypergrad_means", "=", "np", ".", "array", "(", "hypergrad_means", ")", "\n", "hypergrads", "=", "np", ".", "random", ".", "normal", "(", "hypergrad_means", ",", "self", ".", "args", ".", "sigma", ",", "size", "=", "(", "self", ".", "args", ".", "n_seeds", ",", "self", ".", "args", ".", "T", ")", ")", "\n", "optimal_hypergrads", "=", "hypergrad_means", "\n", "return", "hypergrads", ",", "optimal_hypergrads", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.None.theorem4_checker_simple.ProofChecker.mse_not_sharing": [[50, 52], ["numpy.mean"], "methods", ["None"], ["", "def", "mse_not_sharing", "(", "self", ",", "hypergrads", ",", "optimal_hypergrads", ")", ":", "\n", "        ", "return", "np", ".", "mean", "(", "(", "hypergrads", "-", "optimal_hypergrads", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.None.theorem4_checker_simple.ProofChecker.mse_sharing": [[53, 57], ["numpy.array", "numpy.mean", "numpy.mean().repeat", "numpy.mean", "h.reshape"], "methods", ["None"], ["", "def", "mse_sharing", "(", "self", ",", "hypergrads", ",", "optimal_hypergrads", ")", ":", "\n", "        ", "hypergrads_after_sharing", "=", "[", "np", ".", "mean", "(", "h", ".", "reshape", "(", "(", "self", ".", "K", ",", "self", ".", "args", ".", "W", ")", ")", ",", "axis", "=", "1", ")", ".", "repeat", "(", "self", ".", "args", ".", "W", ")", "for", "h", "in", "hypergrads", "]", "\n", "hypergrads_after_sharing", "=", "np", ".", "array", "(", "hypergrads_after_sharing", ")", "\n", "return", "np", ".", "mean", "(", "(", "hypergrads_after_sharing", "-", "optimal_hypergrads", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.None.theorem4_checker_simple.ProofChecker.run": [[58, 73], ["print", "theorem4_checker_simple.ProofChecker.sample_min_drift", "print", "print", "theorem4_checker_simple.ProofChecker.sample_max_drift", "print", "print", "theorem4_checker_simple.ProofChecker.sample_random_drift", "print", "theorem4_checker_simple.ProofChecker.mse_not_sharing", "theorem4_checker_simple.ProofChecker.mse_sharing", "theorem4_checker_simple.ProofChecker.mse_not_sharing", "theorem4_checker_simple.ProofChecker.mse_sharing", "theorem4_checker_simple.ProofChecker.mse_not_sharing", "theorem4_checker_simple.ProofChecker.mse_sharing"], "methods", ["home.repos.pwc.inspect_result.polo5_fds.None.theorem4_checker_simple.ProofChecker.sample_min_drift", "home.repos.pwc.inspect_result.polo5_fds.None.theorem4_checker_simple.ProofChecker.sample_max_drift", "home.repos.pwc.inspect_result.polo5_fds.None.theorem4_checker_simple.ProofChecker.sample_random_drift", "home.repos.pwc.inspect_result.polo5_fds.None.theorem4_checker_simple.ProofChecker.mse_not_sharing", "home.repos.pwc.inspect_result.polo5_fds.None.theorem4_checker_simple.ProofChecker.mse_sharing", "home.repos.pwc.inspect_result.polo5_fds.None.theorem4_checker_simple.ProofChecker.mse_not_sharing", "home.repos.pwc.inspect_result.polo5_fds.None.theorem4_checker_simple.ProofChecker.mse_sharing", "home.repos.pwc.inspect_result.polo5_fds.None.theorem4_checker_simple.ProofChecker.mse_not_sharing", "home.repos.pwc.inspect_result.polo5_fds.None.theorem4_checker_simple.ProofChecker.mse_sharing"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "print", "(", "'\\nMIN DRIFT:'", ")", "\n", "hypergrads", ",", "optimal_hypergrads", "=", "self", ".", "sample_min_drift", "(", ")", "\n", "mse_not_sharing", ",", "mse_sharing", "=", "self", ".", "mse_not_sharing", "(", "hypergrads", ",", "optimal_hypergrads", ")", ",", "self", ".", "mse_sharing", "(", "hypergrads", ",", "optimal_hypergrads", ")", "\n", "print", "(", "f'actual mse when not sharing = {mse_not_sharing:.5f} --- mse sharing = {mse_sharing:.5f}'", ")", "\n", "\n", "print", "(", "'\\nMAX DRIFT:'", ")", "\n", "hypergrads", ",", "optimal_hypergrads", "=", "self", ".", "sample_max_drift", "(", ")", "\n", "mse_not_sharing", ",", "mse_sharing", "=", "self", ".", "mse_not_sharing", "(", "hypergrads", ",", "optimal_hypergrads", ")", ",", "self", ".", "mse_sharing", "(", "hypergrads", ",", "optimal_hypergrads", ")", "\n", "print", "(", "f'actual mse not sharing = {mse_not_sharing:.5f} --- mse sharing = {mse_sharing:.5f}'", ")", "\n", "\n", "print", "(", "'\\nRANDOM DRIFT:'", ")", "\n", "hypergrads", ",", "optimal_hypergrads", "=", "self", ".", "sample_random_drift", "(", ")", "\n", "mse_not_sharing", ",", "mse_sharing", "=", "self", ".", "mse_not_sharing", "(", "hypergrads", ",", "optimal_hypergrads", ")", ",", "self", ".", "mse_sharing", "(", "hypergrads", ",", "optimal_hypergrads", ")", "\n", "print", "(", "f'actual mse not sharing = {mse_not_sharing:.5f} --- mse sharing = {mse_sharing:.5f}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.None.theorem4_checker_simple.main": [[75, 82], ["numpy.random.seed", "time.time", "theorem4_checker_simple.ProofChecker", "theorem4_checker_simple.ProofChecker.run", "print", "utils.helpers.format_time", "time.time"], "function", ["home.repos.pwc.inspect_result.polo5_fds.None.theorem4_checker_simple.ProofChecker.run", "home.repos.pwc.inspect_result.polo5_fds.utils.helpers.format_time"], ["", "", "def", "main", "(", "args", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "\n", "t0", "=", "time", ".", "time", "(", ")", "\n", "proof", "=", "ProofChecker", "(", "args", ")", "\n", "proof", ".", "run", "(", ")", "\n", "print", "(", "f'\\nTotal time: {format_time(time.time() - t0)}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.utils.logger.Logger.__init__": [[5, 8], ["os.path.join", "os.path.exists", "os.makedirs"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "filepath", "=", "'./'", ",", "filename", "=", "'results.csv'", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "filepath", ")", ":", "os", ".", "makedirs", "(", "filepath", ")", "\n", "self", ".", "csv_file_path", "=", "os", ".", "path", ".", "join", "(", "filepath", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.utils.logger.Logger.write": [[9, 20], ["os.path.exists", "open", "csv.writer", "csv.writer.writerow", "open", "csv.writer", "csv.writer.writerow", "csv.writer.writerow", "list", "list", "list", "data_dict.values", "data_dict.keys", "data_dict.values"], "methods", ["None"], ["", "def", "write", "(", "self", ",", "data_dict", ")", ":", "\n", "        ", "\"\"\"warning: this allows for wrong keys to be passed\"\"\"", "\n", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "csv_file_path", ")", ":", "\n", "            ", "with", "open", "(", "self", ".", "csv_file_path", ",", "'a'", ",", "newline", "=", "''", ")", "as", "f", ":", "#newline='' is to make it windows compatible", "\n", "                ", "writer", "=", "csv", ".", "writer", "(", "f", ")", "\n", "writer", ".", "writerow", "(", "list", "(", "data_dict", ".", "values", "(", ")", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "with", "open", "(", "self", ".", "csv_file_path", ",", "'w'", ",", "newline", "=", "''", ")", "as", "f", ":", "\n", "                ", "writer", "=", "csv", ".", "writer", "(", "f", ")", "\n", "writer", ".", "writerow", "(", "list", "(", "data_dict", ".", "keys", "(", ")", ")", ")", "\n", "writer", ".", "writerow", "(", "list", "(", "data_dict", ".", "values", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.utils.helpers.AggregateTensor.__init__": [[31, 33], ["helpers.AggregateTensor.reset"], "methods", ["home.repos.pwc.inspect_result.polo5_fds.utils.helpers.AggregateTensor.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.utils.helpers.AggregateTensor.reset": [[34, 37], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "count", "=", "0.0001", "# DIV/0!", "\n", "self", ".", "sum", "=", "0", "\n", "#self.sum2 = 0", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.utils.helpers.AggregateTensor.update": [[39, 47], ["val.detach"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "w", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        :param val: new running value\n        :param w: weight, e.g batch size\n        Turn everything into floats so that we don't keep bits of the graph\n        \"\"\"", "\n", "self", ".", "sum", "+=", "w", "*", "val", ".", "detach", "(", ")", "\n", "self", ".", "count", "+=", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.utils.helpers.AggregateTensor.avg": [[49, 51], ["None"], "methods", ["None"], ["", "def", "avg", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.utils.helpers.accuracy": [[55, 69], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "1", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.utils.helpers.avg_entropy": [[70, 79], ["torch.mean", "torch.mean", "float", "float", "torch.log2", "torch.log2", "torch.min", "torch.min", "torch.max", "torch.max", "torch.clamp", "torch.clamp", "p_log_p.sum"], "function", ["None"], ["", "def", "avg_entropy", "(", "pmf", ")", ":", "\n", "    ", "\"\"\"\n    :param pmf: pytorch tensor pmf of shape [batch_size, n_classes]\n    :return: average entropy of pmf across entire batch\n    \"\"\"", "\n", "#assert", "\n", "assert", "(", "(", "pmf", ">=", "0", ")", "*", "(", "pmf", "<=", "1.00001", ")", ")", ".", "all", "(", ")", ",", "\"All inputs must be in range [0,1] but min/max is {}/{}\"", ".", "format", "(", "float", "(", "torch", ".", "min", "(", "pmf", ")", ")", ",", "float", "(", "torch", ".", "max", "(", "pmf", ")", ")", ")", "\n", "p_log_p", "=", "torch", ".", "log2", "(", "torch", ".", "clamp", "(", "pmf", ",", "min", "=", "0.0001", ",", "max", "=", "1.0", ")", ")", "*", "pmf", "#log(0) causes error", "\n", "return", "torch", ".", "mean", "(", "-", "p_log_p", ".", "sum", "(", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.utils.helpers.avg_max": [[80, 88], ["torch.mean", "torch.mean", "torch.max", "torch.max"], "function", ["None"], ["", "def", "avg_max", "(", "pmf", ")", ":", "\n", "    ", "\"\"\"\n    :param pmf: pytorch tensor pmf of shape [batch_size, n_classes]\n    when learned the pmf doesn't have to be within [0,1]\n    :return: average of max predictions of pmf across entire batch\n    \"\"\"", "\n", "assert", "(", "(", "pmf", ">=", "0", ")", "*", "(", "pmf", "<=", "1", ")", ")", ".", "all", "(", ")", ",", "\"All inputs must be in range [0,1]\"", "\n", "return", "torch", ".", "mean", "(", "torch", ".", "max", "(", "pmf", ",", "1", ")", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.utils.helpers.onehot": [[89, 99], ["torch.zeros().scatter", "torch.zeros().scatter", "targets.unsqueeze", "torch.zeros", "torch.zeros"], "function", ["None"], ["", "def", "onehot", "(", "targets", ",", "n_classes", ")", ":", "\n", "    ", "\"\"\"\n    Convert labels of form [[2], [7], ...] to\n    [0,0,1,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,1,0,0], ...]\n    :param targets:\n    :param n_classes:\n    :param device:\n    :return:\n    \"\"\"", "\n", "return", "torch", ".", "zeros", "(", "(", "targets", ".", "shape", "[", "0", "]", ",", "n_classes", ")", ",", "device", "=", "targets", ".", "device", ")", ".", "scatter", "(", "1", ",", "targets", ".", "unsqueeze", "(", "-", "1", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.utils.helpers.gc_tensor_view": [[100, 129], ["gc.get_objects", "print", "print", "sorted", "object_totals.items", "print", "torch.is_tensor", "torch.is_tensor", "object_MBs.keys", "hasattr", "torch.is_tensor", "torch.is_tensor", "str", "object_counts.get", "numpy.prod", "obj.size", "obj.size"], "function", ["None"], ["", "def", "gc_tensor_view", "(", "verbose", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Doesn't catch intermediate variables stored by Pytorch graph\n    if they are not in the Python scope.\n    assumes all tensors are torch.float() i.e. 32 bit (4MB)\n    \"\"\"", "\n", "total_MB_size", "=", "0", "\n", "object_counts", "=", "{", "}", "\n", "object_MBs", "=", "{", "}", "\n", "if", "verbose", ":", "print", "(", "'\\n------- TENSORS SEEN BY GARBAGE COLLECTOR -------'", ")", "\n", "\n", "for", "obj", "in", "gc", ".", "get_objects", "(", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "if", "torch", ".", "is_tensor", "(", "obj", ")", "or", "(", "hasattr", "(", "obj", ",", "'data'", ")", "and", "torch", ".", "is_tensor", "(", "obj", ".", "data", ")", ")", ":", "\n", "                ", "MB_size", "=", "np", ".", "prod", "(", "obj", ".", "size", "(", ")", ")", "*", "4", "/", "1024", "**", "2", "#assume float32", "\n", "total_MB_size", "+=", "MB_size", "#str(type(obj))", "\n", "key", "=", "str", "(", "obj", ".", "size", "(", ")", ")", "[", "10", ":", "]", "\n", "object_counts", "[", "key", "]", "=", "object_counts", ".", "get", "(", "key", ",", "0", ")", "+", "1", "\n", "object_MBs", "[", "key", "]", "=", "MB_size", "\n", "", "", "except", ":", "\n", "            ", "pass", "\n", "\n", "", "", "if", "verbose", ":", "\n", "        ", "object_totals", "=", "{", "k", ":", "object_counts", "[", "k", "]", "*", "object_MBs", "[", "k", "]", "for", "k", "in", "object_MBs", ".", "keys", "(", ")", "}", "\n", "for", "key", ",", "value", "in", "sorted", "(", "object_totals", ".", "items", "(", ")", ",", "key", "=", "lambda", "item", ":", "item", "[", "1", "]", ",", "reverse", "=", "True", ")", ":", "\n", "            ", "print", "(", "\"{}  x  {}  ({:.0f}MB) = {:.0f}MB\"", ".", "format", "(", "object_counts", "[", "key", "]", ",", "key", ",", "object_MBs", "[", "key", "]", ",", "object_counts", "[", "key", "]", "*", "object_MBs", "[", "key", "]", ")", ")", "\n", "\n", "\n", "", "", "print", "(", "\"TOTAL MEMORY USED BY PYTORCH TENSORS: {:.0f} MB\"", ".", "format", "(", "total_MB_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.utils.helpers.set_torch_seeds": [[130, 138], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed"], "function", ["None"], ["", "def", "set_torch_seeds", "(", "seed", ")", ":", "\n", "    ", "import", "random", "\n", "import", "numpy", "as", "np", "\n", "import", "torch", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.utils.helpers.timer": [[139, 153], ["functools.wraps", "time.perf_counter", "func", "time.perf_counter", "print", "helpers.format_time"], "function", ["home.repos.pwc.inspect_result.polo5_fds.utils.helpers.format_time"], ["", "def", "timer", "(", "func", ")", ":", "\n", "    ", "\"\"\"Print the runtime of the decorated function\"\"\"", "\n", "@", "functools", ".", "wraps", "(", "func", ")", "\n", "def", "wrapper_timer", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "start_time", "=", "time", ".", "perf_counter", "(", ")", "# 1", "\n", "value", "=", "func", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "end_time", "=", "time", ".", "perf_counter", "(", ")", "# 2", "\n", "run_time", "=", "end_time", "-", "start_time", "# 3", "\n", "#print('\\n------------------------------')", "\n", "print", "(", "f\"--- Ran func {func.__name__!r} in {format_time(run_time)} ---\"", ")", "\n", "#print('------------------------------\\n')", "\n", "\n", "return", "value", "\n", "", "return", "wrapper_timer", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.utils.helpers.unormalize_CIFAR10_image": [[156, 158], ["torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "function", ["None"], ["", "def", "unormalize_CIFAR10_image", "(", "image", ")", ":", "\n", "    ", "return", "image", "*", "torch", ".", "tensor", "(", "[", "0.2023", ",", "0.1994", ",", "0.2010", "]", ")", ".", "view", "(", "3", ",", "1", ",", "1", ")", "+", "torch", ".", "tensor", "(", "[", "0.4914", ",", "0.4822", ",", "0.4465", "]", ")", ".", "view", "(", "3", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.utils.helpers.str2bool": [[192, 201], ["v.lower", "v.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["", "def", "str2bool", "(", "v", ")", ":", "\n", "# codes from : https://stackoverflow.com/questions/15008758/parsing-boolean-values-with-argparse", "\n", "\n", "    ", "if", "v", ".", "lower", "(", ")", "in", "(", "'yes'", ",", "'true'", ",", "'t'", ",", "'y'", ",", "'1'", ")", ":", "\n", "        ", "return", "True", "\n", "", "elif", "v", ".", "lower", "(", ")", "in", "(", "'no'", ",", "'false'", ",", "'f'", ",", "'n'", ",", "'0'", ")", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "'Boolean value expected.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.utils.helpers.delete_files_from_name": [[202, 208], ["os.listdir", "os.remove", "os.path.join"], "function", ["None"], ["", "", "def", "delete_files_from_name", "(", "folder_path", ",", "file_name", ",", "type", "=", "'contains'", ")", ":", "\n", "\n", "    ", "assert", "type", "in", "[", "'is'", ",", "'contains'", "]", "\n", "for", "f", "in", "os", ".", "listdir", "(", "folder_path", ")", ":", "\n", "        ", "if", "(", "type", "==", "'is'", "and", "file_name", "==", "f", ")", "or", "(", "type", "==", "'contains'", "and", "file_name", "in", "f", ")", ":", "\n", "            ", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "folder_path", ",", "f", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.utils.helpers.copy_file": [[209, 212], ["os.path.join", "shutil.copyfile", "os.path.basename"], "function", ["None"], ["", "", "", "def", "copy_file", "(", "file_path", ",", "folder_path", ")", ":", "\n", "    ", "destination_path", "=", "os", ".", "path", ".", "join", "(", "folder_path", ",", "os", ".", "path", ".", "basename", "(", "file_path", ")", ")", "\n", "shutil", ".", "copyfile", "(", "file_path", ",", "destination_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.utils.helpers.format_time": [[213, 217], ["divmod", "divmod"], "function", ["None"], ["", "def", "format_time", "(", "seconds", ")", ":", "\n", "    ", "minutes", ",", "seconds", "=", "divmod", "(", "seconds", ",", "60", ")", "\n", "hours", ",", "minutes", "=", "divmod", "(", "minutes", ",", "60", ")", "\n", "return", "\"%dh%02dm%02ds\"", "%", "(", "hours", ",", "minutes", ",", "seconds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.utils.helpers.create_empty_file": [[218, 221], ["open", "f.write"], "function", ["home.repos.pwc.inspect_result.polo5_fds.utils.logger.Logger.write"], ["", "def", "create_empty_file", "(", "path", ")", ":", "\n", "    ", "\"\"\"Easy way to log final test accuracy in some experiment folder\"\"\"", "\n", "with", "open", "(", "path", ",", "'w+'", ")", "as", "f", ":", "f", ".", "write", "(", "\"NA\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.utils.datasets.Cutout.__init__": [[54, 58], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "length", ",", "prob", "=", "1.0", ")", ":", "\n", "      ", "self", ".", "length", "=", "length", "\n", "self", ".", "prob", "=", "prob", "\n", "assert", "prob", "<=", "1", ",", "f\"Cutout prob given ({prob}) must be <=1\"", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.utils.datasets.Cutout.__call__": [[59, 76], ["numpy.random.binomial", "numpy.ones", "numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "mask.expand_as.expand_as.expand_as", "img.size", "img.size"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "      ", "if", "np", ".", "random", ".", "binomial", "(", "1", ",", "self", ".", "prob", ")", ":", "\n", "        ", "h", ",", "w", "=", "img", ".", "size", "(", "1", ")", ",", "img", ".", "size", "(", "2", ")", "\n", "mask", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ",", "np", ".", "float32", ")", "\n", "y", "=", "np", ".", "random", ".", "randint", "(", "h", ")", "\n", "x", "=", "np", ".", "random", ".", "randint", "(", "w", ")", "\n", "\n", "y1", "=", "np", ".", "clip", "(", "y", "-", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "y2", "=", "np", ".", "clip", "(", "y", "+", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "x1", "=", "np", ".", "clip", "(", "x", "-", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "x2", "=", "np", ".", "clip", "(", "x", "+", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "\n", "mask", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "0.", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", "\n", "mask", "=", "mask", ".", "expand_as", "(", "img", ")", "\n", "img", "*=", "mask", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.utils.datasets.InfiniteDataLoader.__init__": [[78, 81], ["torch.utils.data.DataLoader.__init__", "torch.utils.data.DataLoader.__iter__"], "methods", ["home.repos.pwc.inspect_result.polo5_fds.models.wresnet.MetaWideResNet.__init__", "home.repos.pwc.inspect_result.polo5_fds.utils.datasets.InfiniteDataLoader.__iter__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "dataset_iterator", "=", "super", "(", ")", ".", "__iter__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.utils.datasets.InfiniteDataLoader.__iter__": [[82, 84], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.utils.datasets.InfiniteDataLoader.__next__": [[85, 92], ["next", "torch.utils.data.DataLoader.__iter__", "next"], "methods", ["home.repos.pwc.inspect_result.polo5_fds.utils.datasets.InfiniteDataLoader.__iter__"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "batch", "=", "next", "(", "self", ".", "dataset_iterator", ")", "\n", "", "except", "StopIteration", ":", "\n", "            ", "self", ".", "dataset_iterator", "=", "super", "(", ")", ".", "__iter__", "(", ")", "\n", "batch", "=", "next", "(", "self", ".", "dataset_iterator", ")", "\n", "", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.utils.datasets.unormalize_CIFAR10_image": [[17, 19], ["torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "function", ["None"], ["def", "unormalize_CIFAR10_image", "(", "image", ")", ":", "\n", "    ", "return", "image", "*", "torch", ".", "tensor", "(", "[", "0.2023", ",", "0.1994", ",", "0.2010", "]", ")", ".", "view", "(", "3", ",", "1", ",", "1", ")", "+", "torch", ".", "tensor", "(", "[", "0.4914", ",", "0.4822", ",", "0.4465", "]", ")", ".", "view", "(", "3", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.utils.datasets.plot_image": [[20, 41], ["input.numpy", "numpy.transpose", "matplotlib.figure", "plt.figure.add_subplot", "fig.add_subplot.axis", "fig.add_subplot.set_xticklabels", "fig.add_subplot.set_yticklabels", "fig.add_subplot.imshow", "matplotlib.show", "len", "print", "numpy.array().reshape", "numpy.array().reshape", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "plot_image", "(", "input", ",", "unormalize", "=", "True", ")", ":", "\n", "    ", "if", "len", "(", "input", ".", "shape", ")", ">", "3", ":", "\n", "        ", "print", "(", "\"Use plot_images function instead!\"", ")", "\n", "raise", "NotImplementedError", "\n", "", "npimg", "=", "input", ".", "numpy", "(", ")", "\n", "if", "unormalize", ":", "\n", "        ", "npimg", "=", "npimg", "*", "np", ".", "array", "(", "[", "0.2023", ",", "0.1994", ",", "0.2010", "]", ")", ".", "reshape", "(", "3", ",", "1", ",", "1", ")", "+", "np", ".", "array", "(", "[", "0.4914", ",", "0.4822", ",", "0.4465", "]", ")", ".", "reshape", "(", "3", ",", "1", ",", "1", ")", "\n", "", "npimg", "=", "np", ".", "transpose", "(", "npimg", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "if", "npimg", ".", "shape", "[", "-", "1", "]", "!=", "3", ":", "\n", "        ", "npimg", "=", "npimg", "[", ":", ",", ":", ",", "0", "]", "\n", "#print(npimg.shape)", "\n", "\n", "", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "20", ")", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ")", "\n", "ax", ".", "axis", "(", "'off'", ")", "\n", "ax", ".", "set_xticklabels", "(", "[", "]", ")", "\n", "ax", ".", "set_yticklabels", "(", "[", "]", ")", "\n", "\n", "ax", ".", "imshow", "(", "npimg", ",", "cmap", "=", "'gray'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.utils.datasets.plot_images": [[42, 52], ["len", "datasets.plot_image", "len", "datasets.plot_image", "torchvision.utils.make_grid", "torchvision.utils.make_grid", "datasets.plot_image", "int", "numpy.ceil", "numpy.sqrt"], "function", ["home.repos.pwc.inspect_result.polo5_fds.utils.datasets.plot_image", "home.repos.pwc.inspect_result.polo5_fds.utils.datasets.plot_image", "home.repos.pwc.inspect_result.polo5_fds.utils.datasets.plot_image"], ["", "def", "plot_images", "(", "batch", ",", "padding", "=", "2", ",", "unormalize", "=", "True", ")", ":", "\n", "    ", "if", "len", "(", "batch", ".", "shape", ")", "==", "3", ":", "\n", "        ", "plot_image", "(", "batch", ",", "unormalize", "=", "unormalize", ")", "\n", "", "elif", "len", "(", "batch", ".", "shape", ")", "==", "4", ":", "\n", "        ", "n_images", "=", "batch", ".", "shape", "[", "0", "]", "\n", "if", "n_images", "==", "1", ":", "\n", "            ", "plot_image", "(", "batch", "[", "0", "]", ",", "unormalize", "=", "unormalize", ")", "\n", "", "else", ":", "\n", "            ", "grid_img", "=", "torchvision", ".", "utils", ".", "make_grid", "(", "batch", ",", "nrow", "=", "int", "(", "np", ".", "ceil", "(", "np", ".", "sqrt", "(", "n_images", ")", ")", ")", ",", "padding", "=", "padding", ")", "\n", "plot_image", "(", "grid_img", ",", "unormalize", "=", "unormalize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.utils.datasets.get_loaders": [[93, 216], ["len", "torch.utils.data.DataLoader", "torchvision.Compose", "torchvision.Compose", "TrainLoader", "ValLoader", "transforms.Compose.transforms.append", "torchvision.MNIST", "torchvision.MNIST", "os.path.join", "torchvision.Compose", "torchvision.Compose", "torchvision.SVHN", "torchvision.SVHN", "list", "numpy.random.choice", "ValLoader", "torchvision.ToTensor", "torchvision.Normalize", "datasets.Cutout", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.MNIST", "torchvision.FashionMNIST", "torchvision.FashionMNIST", "transforms.Compose.transforms.append", "torchvision.SVHN", "torchvision.Compose", "torchvision.Compose", "print", "range", "TrainLoader", "list", "TrainLoader", "torchvision.FashionMNIST", "torchvision.ToTensor", "torchvision.Normalize", "datasets.Cutout", "torchvision.ToTensor", "torchvision.Normalize", "transforms.Compose.transforms.append", "os.path.join", "torchvision.CIFAR10", "torchvision.CIFAR10", "int", "torch.utils.data.sampler.SubsetRandomSampler", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "datasets.Cutout", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.CIFAR10", "os.path.join", "torchvision.CIFAR100", "torchvision.CIFAR100", "set", "set", "torch.utils.data.sampler.SubsetRandomSampler", "torchvision.CIFAR10"], "function", ["None"], ["", "", "def", "get_loaders", "(", "datasets_path", ",", "\n", "dataset", ",", "\n", "train_batch_size", "=", "128", ",", "\n", "val_batch_size", "=", "128", ",", "\n", "val_source", "=", "'train'", ",", "\n", "val_train_fraction", "=", "0.1", ",", "\n", "val_train_overlap", "=", "False", ",", "\n", "workers", "=", "0", ",", "\n", "train_infinite", "=", "False", ",", "\n", "val_infinite", "=", "False", ",", "\n", "cutout", "=", "False", ",", "\n", "cutout_length", "=", "16", ",", "\n", "cutout_prob", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    NB: val_train_fraction and val_train_overlap only used if val_source='train'\n    Note that infinite=True changes the seed/order of the batches\n    Validation is never augmented since validation stochasticity comes\n    from sampling different validation images anyways\n    \"\"\"", "\n", "assert", "val_source", "in", "[", "'test'", ",", "'train'", "]", "\n", "TrainLoader", "=", "InfiniteDataLoader", "if", "train_infinite", "else", "DataLoader", "\n", "ValLoader", "=", "InfiniteDataLoader", "if", "val_infinite", "else", "DataLoader", "\n", "\n", "## Select relevant dataset", "\n", "if", "dataset", "in", "[", "'MNIST'", ",", "'FashionMNIST'", "]", ":", "\n", "        ", "mean", ",", "std", "=", "(", "0.1307", ",", ")", ",", "(", "0.3081", ",", ")", "\n", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", "\n", "if", "cutout", ":", "transform_train", ".", "transforms", ".", "append", "(", "Cutout", "(", "length", "=", "cutout_length", ",", "prob", "=", "cutout_prob", ")", ")", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", "\n", "if", "dataset", "==", "'MNIST'", ":", "\n", "            ", "train_dataset", "=", "datasets", ".", "MNIST", "(", "datasets_path", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transform_train", ")", "\n", "test_dataset", "=", "datasets", ".", "MNIST", "(", "datasets_path", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "transform_test", ")", "\n", "val_dataset", "=", "test_dataset", "if", "val_source", "==", "'test'", "else", "datasets", ".", "MNIST", "(", "datasets_path", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transform_test", ")", "\n", "", "elif", "dataset", "==", "'FashionMNIST'", ":", "\n", "            ", "train_dataset", "=", "datasets", ".", "FashionMNIST", "(", "datasets_path", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transform_train", ")", "\n", "test_dataset", "=", "datasets", ".", "FashionMNIST", "(", "datasets_path", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "transform_test", ")", "\n", "val_dataset", "=", "test_dataset", "if", "val_source", "==", "'test'", "else", "datasets", ".", "FashionMNIST", "(", "datasets_path", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transform_test", ")", "\n", "\n", "", "", "elif", "dataset", "==", "'SVHN'", ":", "\n", "        ", "mean", "=", "(", "0.4377", ",", "0.4438", ",", "0.4728", ")", "\n", "std", "=", "(", "0.1980", ",", "0.2010", ",", "0.1970", ")", "\n", "dataset_path", "=", "os", ".", "path", ".", "join", "(", "datasets_path", ",", "'SVHN'", ")", "#Pytorch is inconsistent in folder structure", "\n", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", "\n", "if", "cutout", ":", "transform_train", ".", "transforms", ".", "append", "(", "Cutout", "(", "length", "=", "cutout_length", ",", "prob", "=", "cutout_prob", ")", ")", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", "\n", "train_dataset", "=", "datasets", ".", "SVHN", "(", "dataset_path", ",", "split", "=", "'train'", ",", "download", "=", "True", ",", "transform", "=", "transform_train", ")", "\n", "test_dataset", "=", "datasets", ".", "SVHN", "(", "dataset_path", ",", "split", "=", "'test'", ",", "download", "=", "True", ",", "transform", "=", "transform_test", ")", "\n", "val_dataset", "=", "test_dataset", "if", "val_source", "==", "'test'", "else", "datasets", ".", "SVHN", "(", "dataset_path", ",", "split", "=", "'train'", ",", "download", "=", "True", ",", "transform", "=", "transform_test", ")", "\n", "\n", "#print(len(train_dataset))", "\n", "\n", "", "elif", "dataset", "in", "[", "'CIFAR10'", ",", "'CIFAR100'", "]", ":", "\n", "# official CIFAR10 std seems to be wrong (actual is [0.2470, 0.2435, 0.2616])", "\n", "        ", "mean", "=", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", "if", "dataset", "==", "'CIFAR10'", "else", "(", "0.5071", ",", "0.4867", ",", "0.4408", ")", "\n", "std", "=", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", "if", "dataset", "==", "'CIFAR10'", "else", "(", "0.2675", ",", "0.2565", ",", "0.2761", ")", "\n", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", "\n", "if", "cutout", ":", "transform_train", ".", "transforms", ".", "append", "(", "Cutout", "(", "length", "=", "cutout_length", ",", "prob", "=", "cutout_prob", ")", ")", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", "\n", "if", "dataset", "==", "'CIFAR10'", ":", "\n", "            ", "dataset_path", "=", "os", ".", "path", ".", "join", "(", "datasets_path", ",", "'CIFAR10'", ")", "#Pytorch is inconsistent in folder structure", "\n", "train_dataset", "=", "datasets", ".", "CIFAR10", "(", "dataset_path", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transform_train", ")", "\n", "test_dataset", "=", "datasets", ".", "CIFAR10", "(", "dataset_path", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "transform_test", ")", "\n", "val_dataset", "=", "test_dataset", "if", "val_source", "==", "'test'", "else", "datasets", ".", "CIFAR10", "(", "datasets_path", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transform_test", ")", "\n", "", "elif", "dataset", "==", "'CIFAR100'", ":", "\n", "            ", "dataset_path", "=", "os", ".", "path", ".", "join", "(", "datasets_path", ",", "'CIFAR100'", ")", "\n", "train_dataset", "=", "datasets", ".", "CIFAR100", "(", "dataset_path", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transform_train", ")", "\n", "test_dataset", "=", "datasets", ".", "CIFAR100", "(", "dataset_path", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "transform_test", ")", "\n", "val_dataset", "=", "test_dataset", "if", "val_source", "==", "'test'", "else", "datasets", ".", "CIFAR10", "(", "datasets_path", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transform_test", ")", "\n", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "f'{dataset} is not implemented'", ")", "\n", "raise", "NotImplementedError", "\n", "\n", "## Create dataloaders", "\n", "", "n_train_images", "=", "len", "(", "train_dataset", ")", "\n", "#print(train_dataset)", "\n", "pin_memory", "=", "True", "if", "dataset", "==", "'ImageNet'", "else", "False", "\n", "\n", "if", "val_source", "==", "'test'", ":", "\n", "        ", "train_loader", "=", "TrainLoader", "(", "\n", "dataset", "=", "train_dataset", ",", "batch_size", "=", "train_batch_size", ",", "\n", "shuffle", "=", "True", ",", "drop_last", "=", "True", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "pin_memory", ")", "\n", "\n", "val_loader", "=", "ValLoader", "(", "\n", "dataset", "=", "val_dataset", ",", "batch_size", "=", "val_batch_size", ",", "\n", "shuffle", "=", "True", ",", "drop_last", "=", "True", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "pin_memory", ")", "\n", "\n", "", "elif", "val_source", "==", "'train'", ":", "\n", "        ", "all_indices", "=", "list", "(", "range", "(", "n_train_images", ")", ")", "\n", "val_indices", "=", "np", ".", "random", ".", "choice", "(", "all_indices", ",", "size", "=", "int", "(", "val_train_fraction", "*", "n_train_images", ")", ",", "replace", "=", "False", ")", "\n", "\n", "val_loader", "=", "ValLoader", "(", "\n", "dataset", "=", "val_dataset", ",", "batch_size", "=", "val_batch_size", ",", "\n", "sampler", "=", "SubsetRandomSampler", "(", "val_indices", ")", ",", "drop_last", "=", "True", ",", "\n", "num_workers", "=", "workers", ",", "pin_memory", "=", "pin_memory", ")", "\n", "\n", "if", "val_train_overlap", ":", "\n", "            ", "train_loader", "=", "TrainLoader", "(", "\n", "dataset", "=", "train_dataset", ",", "batch_size", "=", "train_batch_size", ",", "\n", "shuffle", "=", "True", ",", "drop_last", "=", "True", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "pin_memory", ")", "\n", "", "else", ":", "\n", "            ", "train_indices", "=", "list", "(", "set", "(", "all_indices", ")", "-", "set", "(", "val_indices", ")", ")", "\n", "train_loader", "=", "TrainLoader", "(", "\n", "dataset", "=", "train_dataset", ",", "batch_size", "=", "train_batch_size", ",", "\n", "sampler", "=", "SubsetRandomSampler", "(", "train_indices", ")", ",", "drop_last", "=", "True", ",", "\n", "num_workers", "=", "workers", ",", "pin_memory", "=", "pin_memory", ")", "\n", "\n", "", "", "test_loader", "=", "DataLoader", "(", "\n", "dataset", "=", "test_dataset", ",", "batch_size", "=", "val_batch_size", ",", "\n", "shuffle", "=", "True", ",", "drop_last", "=", "True", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "pin_memory", ")", "# test loader never infinite", "\n", "\n", "\n", "return", "train_loader", ",", "val_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.models.lenet.Flatten.__init__": [[11, 13], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.polo5_fds.models.wresnet.MetaWideResNet.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.models.lenet.Flatten.forward": [[14, 16], ["torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "torch", ".", "flatten", "(", "input", ",", "start_dim", "=", "1", ",", "end_dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.models.lenet.LeNet.__init__": [[18, 39], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "lenet.Flatten", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.polo5_fds.models.wresnet.MetaWideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_classes", ",", "n_channels", ",", "im_size", ")", ":", "\n", "        ", "super", "(", "LeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "im_size", "in", "[", "28", ",", "32", "]", "\n", "h", "=", "16", "*", "5", "*", "5", "if", "im_size", "==", "32", "else", "16", "*", "4", "*", "4", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "n_channels", "=", "n_channels", "\n", "self", ".", "im_size", "=", "im_size", "\n", "\n", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "n_channels", ",", "6", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "Conv2d", "(", "6", ",", "16", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "\n", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "h", ",", "120", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "120", ",", "84", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "84", ",", "n_classes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.models.lenet.LeNet.forward": [[41, 43], ["lenet.LeNet.layers"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "layers", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.models.lenet.MetaLeNet.__init__": [[45, 67], ["models.meta_factory.ReparamModule.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "lenet.Flatten", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.polo5_fds.models.wresnet.MetaWideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_classes", ",", "n_channels", ",", "im_size", ",", "device", "=", "'cpu'", ")", ":", "\n", "        ", "super", "(", "MetaLeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "im_size", "in", "[", "28", ",", "32", "]", "\n", "h", "=", "16", "*", "5", "*", "5", "if", "im_size", "==", "32", "else", "16", "*", "4", "*", "4", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "n_channels", "=", "n_channels", "\n", "self", ".", "im_size", "=", "im_size", "\n", "self", ".", "device", "=", "device", "# must be defined for parent class", "\n", "\n", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "n_channels", ",", "6", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "Conv2d", "(", "6", ",", "16", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "\n", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "h", ",", "120", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "120", ",", "84", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "84", ",", "n_classes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.models.lenet.MetaLeNet.forward": [[69, 71], ["lenet.MetaLeNet.layers"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "layers", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.models.helpers.initialize": [[4, 39], ["net.apply", "classname.startswith", "getattr", "torch.nn.init.constant_", "getattr", "torch.nn.init.normal_", "getattr", "m.weight.data.fill_", "getattr", "m.bias.data.zero_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_uniform_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.orthogonal_", "hasattr", "NotImplementedError", "m.reset_parameters"], "function", ["None"], ["from", "torchvision", "import", "datasets", ",", "transforms", "\n", "from", "torch", ".", "utils", ".", "data", "import", "Dataset", ",", "DataLoader", "\n", "import", "shutil", "\n", "import", "datetime", "\n", "import", "json", "\n", "import", "os", "\n", "import", "argparse", "\n", "import", "gc", "\n", "\n", "import", "numpy", "as", "np", "\n", "import", "torchvision", "\n", "import", "functools", "\n", "import", "time", "\n", "import", "warnings", "\n", "#warnings.simplefilter(\"ignore\", UserWarning)", "\n", "\n", "\n", "### Metrics", "\n", "\n", "\n", "class", "AggregateTensor", "(", "object", ")", ":", "\n", "    ", "\"\"\"\n    Computes and stores the average of stream.\n    Mostly used to average losses and accuracies.\n    Works for both scalars and vectors but input needs\n    to be a pytorch tensor.\n    \"\"\"", "\n", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "count", "=", "0.0001", "# DIV/0!", "\n", "self", ".", "sum", "=", "0", "\n", "#self.sum2 = 0", "\n", "\n", "", "def", "update", "(", "self", ",", "val", ",", "w", "=", "1", ")", ":", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.models.selector.select_model": [[4, 56], ["model.initialize", "initialize", "MetaLeNet", "LeNet", "MetaLeNetBN", "LeNetBN", "MetaLeNet", "LeNet", "MetaLeNetBN", "LeNetBN", "MetaWideResNet", "WideResNet", "MetaWideResNet", "WideResNet", "MetaWideResNet", "WideResNet"], "function", ["home.repos.pwc.inspect_result.polo5_fds.models.meta_factory.ReparamModule.initialize", "home.repos.pwc.inspect_result.polo5_fds.models.meta_factory.ReparamModule.initialize"], ["def", "select_model", "(", "meta", ",", "\n", "dataset", ",", "\n", "architecture", ",", "\n", "init_type", "=", "'xavier'", ",", "\n", "init_param", "=", "1", ",", "\n", "device", "=", "'cpu'", ")", ":", "\n", "    ", "\"\"\"\n    Meta models require device to be provided during init.\n    \"\"\"", "\n", "\n", "if", "dataset", "in", "[", "'MNIST'", ",", "'FashionMNIST'", "]", ":", "\n", "        ", "n_classes", ",", "n_channels", ",", "im_size", "=", "10", ",", "1", ",", "28", "\n", "kwargs0", "=", "{", "'n_classes'", ":", "n_classes", ",", "'n_channels'", ":", "n_channels", ",", "'im_size'", ":", "im_size", "}", "\n", "if", "architecture", "==", "'LeNet'", ":", "\n", "            ", "model", "=", "MetaLeNet", "(", "**", "kwargs0", ",", "device", "=", "device", ")", "if", "meta", "else", "LeNet", "(", "**", "kwargs0", ")", "\n", "", "elif", "architecture", "==", "'LeNet-BN'", ":", "#debug neg learning rates", "\n", "            ", "model", "=", "MetaLeNetBN", "(", "**", "kwargs0", ",", "device", "=", "device", ")", "if", "meta", "else", "LeNetBN", "(", "**", "kwargs0", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "", "elif", "dataset", "in", "[", "'SVHN'", ",", "'CIFAR10'", ",", "'CIFAR100'", "]", ":", "\n", "        ", "n_channels", ",", "im_size", "=", "3", ",", "32", "\n", "n_classes", "=", "100", "if", "dataset", "==", "'CIFAR100'", "else", "10", "\n", "kwargs0", "=", "{", "'n_classes'", ":", "n_classes", ",", "'n_channels'", ":", "n_channels", "}", "\n", "if", "architecture", "==", "'LeNet'", ":", "\n", "            ", "kwargs1", "=", "{", "'im_size'", ":", "im_size", "}", "\n", "model", "=", "MetaLeNet", "(", "**", "kwargs0", ",", "**", "kwargs1", ",", "device", "=", "device", ")", "if", "meta", "else", "LeNet", "(", "**", "kwargs0", ",", "**", "kwargs1", ")", "\n", "", "elif", "architecture", "==", "'LeNetBN'", ":", "\n", "            ", "kwargs1", "=", "{", "'im_size'", ":", "im_size", "}", "\n", "model", "=", "MetaLeNetBN", "(", "**", "kwargs0", ",", "**", "kwargs1", ",", "device", "=", "device", ")", "if", "meta", "else", "LeNetBN", "(", "**", "kwargs0", ",", "**", "kwargs1", ")", "\n", "", "elif", "architecture", "==", "'WRN-10-1'", ":", "\n", "            ", "kwargs1", "=", "{", "'depth'", ":", "10", ",", "'widen_factor'", ":", "1", ",", "'dropRate'", ":", "0.0", "}", "\n", "model", "=", "MetaWideResNet", "(", "**", "kwargs0", ",", "**", "kwargs1", ",", "device", "=", "device", ")", "if", "meta", "else", "WideResNet", "(", "**", "kwargs0", ",", "**", "kwargs1", ")", "\n", "", "elif", "architecture", "==", "'WRN-16-1'", ":", "\n", "            ", "kwargs1", "=", "{", "'depth'", ":", "16", ",", "'widen_factor'", ":", "1", ",", "'dropRate'", ":", "0.0", "}", "\n", "model", "=", "MetaWideResNet", "(", "**", "kwargs0", ",", "**", "kwargs1", ",", "device", "=", "device", ")", "if", "meta", "else", "WideResNet", "(", "**", "kwargs0", ",", "**", "kwargs1", ")", "\n", "", "elif", "architecture", "==", "'WRN-40-2'", ":", "\n", "            ", "kwargs1", "=", "{", "'depth'", ":", "40", ",", "'widen_factor'", ":", "2", ",", "'dropRate'", ":", "0.0", "}", "\n", "model", "=", "MetaWideResNet", "(", "**", "kwargs0", ",", "**", "kwargs1", ",", "device", "=", "device", ")", "if", "meta", "else", "WideResNet", "(", "**", "kwargs0", ",", "**", "kwargs1", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "## Initialization schemes", "\n", "", "if", "meta", ":", "\n", "        ", "model", ".", "initialize", "(", "init_type", "=", "init_type", ",", "init_param", "=", "init_param", ",", "init_norm_weights", "=", "1", ",", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "initialize", "(", "model", ",", "init_type", "=", "init_type", ",", "init_param", "=", "init_param", ",", "init_norm_weights", "=", "1", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.models.wresnet.BasicBlock.__init__": [[12, 26], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.polo5_fds.models.wresnet.MetaWideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", ",", "dropRate", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropRate", "=", "dropRate", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "equalInOut", "=", "(", "in_planes", "==", "out_planes", ")", "\n", "self", ".", "convShortcut", "=", "(", "not", "self", ".", "equalInOut", ")", "and", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "bias", "=", "False", ")", "or", "None", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.models.wresnet.BasicBlock.forward": [[26, 39], ["wresnet.BasicBlock.conv2", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "wresnet.BasicBlock.relu1", "wresnet.BasicBlock.relu2", "wresnet.BasicBlock.relu1", "wresnet.BasicBlock.relu2", "torch.dropout", "torch.dropout", "torch.dropout", "wresnet.BasicBlock.bn1", "wresnet.BasicBlock.bn2", "wresnet.BasicBlock.bn1", "wresnet.BasicBlock.bn2", "wresnet.BasicBlock.convShortcut", "wresnet.BasicBlock.conv1", "wresnet.BasicBlock.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "equalInOut", ":", "\n", "            ", "out", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "out", "=", "self", ".", "relu2", "(", "self", ".", "bn2", "(", "self", ".", "conv1", "(", "out", ")", ")", ")", "\n", "", "else", ":", "#keep x var so can add it in skip connection", "\n", "            ", "x", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "out", "=", "self", ".", "relu2", "(", "self", ".", "bn2", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "\n", "", "if", "self", ".", "dropRate", ">", "0", ":", "\n", "            ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "dropRate", ",", "training", "=", "self", ".", "training", ")", "\n", "", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "return", "torch", ".", "add", "(", "x", "if", "self", ".", "equalInOut", "else", "self", ".", "convShortcut", "(", "x", ")", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.models.wresnet.NetworkBlock.__init__": [[41, 44], ["torch.Module.__init__", "wresnet.NetworkBlock._make_layer"], "methods", ["home.repos.pwc.inspect_result.polo5_fds.models.wresnet.MetaWideResNet.__init__", "home.repos.pwc.inspect_result.polo5_fds.models.wresnet.NetworkBlock._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "nb_layers", ",", "in_planes", ",", "out_planes", ",", "block", ",", "stride", ",", "dropRate", ")", ":", "\n", "        ", "super", "(", "NetworkBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer", "=", "self", ".", "_make_layer", "(", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", "\n", "", "def", "_make_layer", "(", "self", ",", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", ":", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.models.wresnet.NetworkBlock._make_layer": [[44, 49], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "int", "(", "nb_layers", ")", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "i", "==", "0", "and", "in_planes", "or", "out_planes", ",", "out_planes", ",", "i", "==", "0", "and", "stride", "or", "1", ",", "dropRate", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.models.wresnet.NetworkBlock.forward": [[49, 51], ["wresnet.NetworkBlock.layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "layer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.models.wresnet.WideResNet.__init__": [[53, 74], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "wresnet.NetworkBlock", "wresnet.NetworkBlock", "wresnet.NetworkBlock", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.polo5_fds.models.wresnet.MetaWideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "n_classes", ",", "n_channels", ",", "widen_factor", "=", "1", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "WideResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nChannels", "=", "[", "16", ",", "16", "*", "widen_factor", ",", "32", "*", "widen_factor", ",", "64", "*", "widen_factor", "]", "\n", "assert", "(", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ")", "\n", "n", "=", "(", "depth", "-", "4", ")", "/", "6", "\n", "block", "=", "BasicBlock", "\n", "# 1st conv before any network block", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "n_channels", ",", "nChannels", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "# 1st block", "\n", "self", ".", "block1", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "0", "]", ",", "nChannels", "[", "1", "]", ",", "block", ",", "1", ",", "dropRate", ")", "\n", "# 2nd block", "\n", "self", ".", "block2", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "1", "]", ",", "nChannels", "[", "2", "]", ",", "block", ",", "2", ",", "dropRate", ")", "\n", "# 3rd block", "\n", "self", ".", "block3", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "2", "]", ",", "nChannels", "[", "3", "]", ",", "block", ",", "2", ",", "dropRate", ")", "\n", "\n", "# global average pooling and classifier", "\n", "self", ".", "final_bn", "=", "nn", ".", "BatchNorm2d", "(", "nChannels", "[", "3", "]", ",", "affine", "=", "True", ")", "\n", "self", ".", "final_relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "nChannels", "[", "3", "]", ",", "n_classes", ")", "\n", "self", ".", "nChannels", "=", "nChannels", "[", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.models.wresnet.WideResNet.forward": [[76, 85], ["wresnet.WideResNet.conv1", "wresnet.WideResNet.block1", "wresnet.WideResNet.block2", "wresnet.WideResNet.block3", "wresnet.WideResNet.final_relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "out.view.view.view", "wresnet.WideResNet.fc", "wresnet.WideResNet.final_bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "block1", "(", "out", ")", "\n", "out", "=", "self", ".", "block2", "(", "out", ")", "\n", "out", "=", "self", ".", "block3", "(", "out", ")", "\n", "out", "=", "self", ".", "final_relu", "(", "self", ".", "final_bn", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "self", ".", "nChannels", ")", "\n", "return", "self", ".", "fc", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.models.wresnet.MetaWideResNet.__init__": [[87, 109], ["models.meta_factory.ReparamModule.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "wresnet.NetworkBlock", "wresnet.NetworkBlock", "wresnet.NetworkBlock", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.polo5_fds.models.wresnet.MetaWideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "n_classes", ",", "n_channels", ",", "widen_factor", "=", "1", ",", "dropRate", "=", "0.0", ",", "device", "=", "'cpu'", ")", ":", "\n", "        ", "super", "(", "MetaWideResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "device", "=", "device", "\n", "nChannels", "=", "[", "16", ",", "16", "*", "widen_factor", ",", "32", "*", "widen_factor", ",", "64", "*", "widen_factor", "]", "\n", "assert", "(", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ")", "\n", "n", "=", "(", "depth", "-", "4", ")", "/", "6", "\n", "block", "=", "BasicBlock", "\n", "# 1st conv before any network block", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "n_channels", ",", "nChannels", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "# 1st block", "\n", "self", ".", "block1", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "0", "]", ",", "nChannels", "[", "1", "]", ",", "block", ",", "1", ",", "dropRate", ")", "\n", "# 2nd block", "\n", "self", ".", "block2", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "1", "]", ",", "nChannels", "[", "2", "]", ",", "block", ",", "2", ",", "dropRate", ")", "\n", "# 3rd block", "\n", "self", ".", "block3", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "2", "]", ",", "nChannels", "[", "3", "]", ",", "block", ",", "2", ",", "dropRate", ")", "\n", "\n", "# global average pooling and classifier", "\n", "self", ".", "final_bn", "=", "nn", ".", "BatchNorm2d", "(", "nChannels", "[", "3", "]", ",", "affine", "=", "True", ")", "\n", "self", ".", "final_relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "nChannels", "[", "3", "]", ",", "n_classes", ")", "\n", "self", ".", "nChannels", "=", "nChannels", "[", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.models.wresnet.MetaWideResNet.forward": [[110, 119], ["wresnet.MetaWideResNet.conv1", "wresnet.MetaWideResNet.block1", "wresnet.MetaWideResNet.block2", "wresnet.MetaWideResNet.block3", "wresnet.MetaWideResNet.final_relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "out.view.view.view", "wresnet.MetaWideResNet.fc", "wresnet.MetaWideResNet.final_bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "block1", "(", "out", ")", "\n", "out", "=", "self", ".", "block2", "(", "out", ")", "\n", "out", "=", "self", ".", "block3", "(", "out", ")", "\n", "out", "=", "self", ".", "final_relu", "(", "self", ".", "final_bn", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "self", ".", "nChannels", ")", "\n", "return", "self", ".", "fc", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.models.meta_factory.MetaFactory.__call__": [[22, 68], ["type.__call__", "type.__call__.modules", "tuple", "tuple", "tuple", "tuple", "type.__call__.register_parameter", "m.named_parameters", "m.named_buffers", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "delattr", "m.register_buffer", "torch.Parameter", "torch.Parameter", "torch.Parameter", "m._parameters[].detach", "set", "w.numel", "w_modules_names.append", "w.reshape"], "methods", ["home.repos.pwc.inspect_result.polo5_fds.models.meta_factory.ReparamModule.__call__"], ["    ", "def", "__call__", "(", "cls", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"Called when you call ReparamModule(...) \"\"\"", "\n", "net", "=", "type", ".", "__call__", "(", "cls", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "# collect weight (module, name) pairs", "\n", "# flatten weights", "\n", "w_modules_names", "=", "[", "]", "\n", "\n", "for", "m", "in", "net", ".", "modules", "(", ")", ":", "\n", "            ", "for", "n", ",", "p", "in", "m", ".", "named_parameters", "(", "recurse", "=", "False", ")", ":", "\n", "                ", "if", "p", "is", "not", "None", ":", "\n", "                    ", "w_modules_names", ".", "append", "(", "(", "m", ",", "n", ")", ")", "\n", "", "", "for", "n", ",", "b", "in", "m", ".", "named_buffers", "(", "recurse", "=", "False", ")", ":", "\n", "                ", "if", "b", "is", "not", "None", ":", "\n", "                    ", "pass", "\n", "# logging.warning((", "\n", "#     '{} contains buffer {}. The buffer will be treated as '", "\n", "#     'a constant and assumed not to change during gradient '", "\n", "#     'steps. If this assumption is violated (e.g., '", "\n", "#     'BatcHNorm*d\\' running_mean/var), the computation will '", "\n", "#     'be incorrect.').format(m.__class__.__name__, n))", "\n", "\n", "", "", "", "net", ".", "_weights_module_names", "=", "tuple", "(", "w_modules_names", ")", "\n", "\n", "# Put to correct device before we do stuff on parameters", "\n", "#net = net.to(device)", "\n", "\n", "ws", "=", "tuple", "(", "m", ".", "_parameters", "[", "n", "]", ".", "detach", "(", ")", "for", "m", ",", "n", "in", "w_modules_names", ")", "\n", "\n", "assert", "len", "(", "set", "(", "w", ".", "dtype", "for", "w", "in", "ws", ")", ")", "==", "1", "\n", "\n", "# reparam to a single flat parameter", "\n", "net", ".", "_weights_numels", "=", "tuple", "(", "w", ".", "numel", "(", ")", "for", "w", "in", "ws", ")", "\n", "net", ".", "_weights_shapes", "=", "tuple", "(", "w", ".", "shape", "for", "w", "in", "ws", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "flat_w", "=", "torch", ".", "cat", "(", "[", "w", ".", "reshape", "(", "-", "1", ")", "for", "w", "in", "ws", "]", ",", "0", ")", "\n", "\n", "# remove old parameters, assign the names as buffers", "\n", "", "for", "m", ",", "n", "in", "net", ".", "_weights_module_names", ":", "\n", "            ", "delattr", "(", "m", ",", "n", ")", "\n", "m", ".", "register_buffer", "(", "n", ",", "None", ")", "\n", "\n", "# register the flat one", "\n", "", "net", ".", "register_parameter", "(", "'flat_w'", ",", "nn", ".", "Parameter", "(", "flat_w", ",", "requires_grad", "=", "True", ")", ")", "\n", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.models.meta_factory.ReparamModule._apply": [[80, 83], ["super()._apply"], "methods", ["home.repos.pwc.inspect_result.polo5_fds.models.meta_factory.ReparamModule._apply"], ["def", "_apply", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "rv", "=", "super", "(", "ReparamModule", ",", "self", ")", ".", "_apply", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "return", "rv", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.models.meta_factory.ReparamModule.get_param": [[84, 88], ["meta_factory.ReparamModule.flat_w.to", "meta_factory.ReparamModule.flat_w.detach().clone().requires_grad_().to", "meta_factory.ReparamModule.flat_w.detach().clone().requires_grad_", "meta_factory.ReparamModule.flat_w.detach().clone", "meta_factory.ReparamModule.flat_w.detach"], "methods", ["None"], ["", "def", "get_param", "(", "self", ",", "clone", "=", "False", ")", ":", "\n", "        ", "if", "clone", ":", "\n", "            ", "return", "self", ".", "flat_w", ".", "detach", "(", ")", ".", "clone", "(", ")", ".", "requires_grad_", "(", "self", ".", "flat_w", ".", "requires_grad", ")", ".", "to", "(", "device", "=", "self", ".", "device", ")", "\n", "", "return", "self", ".", "flat_w", ".", "to", "(", "device", "=", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.models.meta_factory.ReparamModule.unflatten_weight": [[89, 108], ["zip", "t.view", "setattr", "setattr", "zip", "flat_w.split"], "methods", ["None"], ["", "@", "contextmanager", "\n", "def", "unflatten_weight", "(", "self", ",", "flat_w", ")", ":", "\n", "        ", "\"\"\"\n        This changes self.state_dict()\n        from -->  odict_keys(['flat_w'])\n        to   -->  odict_keys(['flat_w', 'layers.0.weight', 'layers.0.bias', ... ]\n\n        Somehow removes 'bias=False' in self._weights_module_names conv names, and\n        replaces 'bias=False' by 'bias=True' in linear layers.\n\n        type(self.state_dict()) = <class 'collections.OrderedDict'> before and after\n\n        \"\"\"", "\n", "ws", "=", "(", "t", ".", "view", "(", "s", ")", "for", "(", "t", ",", "s", ")", "in", "zip", "(", "flat_w", ".", "split", "(", "self", ".", "_weights_numels", ")", ",", "self", ".", "_weights_shapes", ")", ")", "\n", "for", "(", "m", ",", "n", ")", ",", "w", "in", "zip", "(", "self", ".", "_weights_module_names", ",", "ws", ")", ":", "\n", "            ", "setattr", "(", "m", ",", "n", ",", "w", ")", "\n", "", "yield", "\n", "for", "m", ",", "n", "in", "self", ".", "_weights_module_names", ":", "\n", "            ", "setattr", "(", "m", ",", "n", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.models.meta_factory.ReparamModule.forward_with_param": [[109, 116], ["meta_factory.ReparamModule.unflatten_weight", "torch.Module.__call__", "torch.Module.__call__", "torch.Module.__call__"], "methods", ["home.repos.pwc.inspect_result.polo5_fds.models.meta_factory.ReparamModule.unflatten_weight", "home.repos.pwc.inspect_result.polo5_fds.models.meta_factory.ReparamModule.__call__", "home.repos.pwc.inspect_result.polo5_fds.models.meta_factory.ReparamModule.__call__", "home.repos.pwc.inspect_result.polo5_fds.models.meta_factory.ReparamModule.__call__"], ["", "", "def", "forward_with_param", "(", "self", ",", "inp", ",", "new_w", ")", ":", "\n", "#print(type(self.state_dict()))", "\n", "        ", "with", "self", ".", "unflatten_weight", "(", "new_w", ")", ":", "\n", "# print('FLATTENED')", "\n", "# print('state_dict: ', type(self.state_dict()), [(k, v.shape) for k,v in self.state_dict().items()])", "\n", "# print('self._weights_module_names: ', self._weights_module_names)", "\n", "            ", "return", "nn", ".", "Module", ".", "__call__", "(", "self", ",", "inp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.models.meta_factory.ReparamModule.__call__": [[117, 119], ["meta_factory.ReparamModule.forward_with_param"], "methods", ["home.repos.pwc.inspect_result.polo5_fds.models.meta_factory.ReparamModule.forward_with_param"], ["", "", "def", "__call__", "(", "self", ",", "inp", ")", ":", "\n", "        ", "return", "self", ".", "forward_with_param", "(", "inp", ",", "self", ".", "flat_w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.models.meta_factory.ReparamModule.load_state_dict": [[120, 135], ["meta_factory.ReparamModule.register_parameter", "super().load_state_dict", "meta_factory.ReparamModule.unflatten_weight", "super().load_state_dict", "len"], "methods", ["home.repos.pwc.inspect_result.polo5_fds.models.meta_factory.ReparamModule.load_state_dict", "home.repos.pwc.inspect_result.polo5_fds.models.meta_factory.ReparamModule.unflatten_weight", "home.repos.pwc.inspect_result.polo5_fds.models.meta_factory.ReparamModule.load_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Make load_state_dict work on both singleton dicts\n        containing a flattened weight tensor and full dicts\n        containing unflattened weight tensors. Useful when loading\n        weights from non-meta architectures\n\n        \"\"\"", "\n", "if", "len", "(", "state_dict", ")", "==", "1", "and", "'flat_w'", "in", "state_dict", ":", "\n", "            ", "return", "super", "(", "ReparamModule", ",", "self", ")", ".", "load_state_dict", "(", "state_dict", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "with", "self", ".", "unflatten_weight", "(", "self", ".", "flat_w", ")", ":", "\n", "            ", "flat_w", "=", "self", ".", "flat_w", "\n", "del", "self", ".", "flat_w", "\n", "super", "(", "ReparamModule", ",", "self", ")", ".", "load_state_dict", "(", "state_dict", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "self", ".", "register_parameter", "(", "'flat_w'", ",", "flat_w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.models.meta_factory.ReparamModule.unflattened_weights": [[136, 144], ["meta_factory.ReparamModule.unflatten_weight", "copy.deepcopy", "meta_factory.ReparamModule.state_dict"], "methods", ["home.repos.pwc.inspect_result.polo5_fds.models.meta_factory.ReparamModule.unflatten_weight"], ["", "def", "unflattened_weights", "(", "self", ")", ":", "\n", "#print(float(torch.sum(self.state_dict()['flat_w'])))", "\n", "\n", "        ", "with", "self", ".", "unflatten_weight", "(", "self", ".", "flat_w", ")", ":", "\n", "            ", "state_dict", "=", "deepcopy", "(", "self", ".", "state_dict", "(", ")", ")", "\n", "del", "state_dict", "[", "'flat_w'", "]", "\n", "\n", "", "return", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.models.meta_factory.ReparamModule.layer_names": [[145, 173], ["zip", "isinstance", "layer_names.append", "isinstance", "layer_names.append", "isinstance", "layer_names.append", "isinstance", "layer_names.append", "isinstance", "layer_names.append", "isinstance", "layer_names.append", "ValueError"], "methods", ["None"], ["", "def", "layer_names", "(", "self", ")", ":", "\n", "        ", "layer_names", "=", "[", "]", "\n", "layer_count", "=", "0", "\n", "prev_layer", "=", "None", "\n", "\n", "for", "(", "name", ",", "n", ")", "in", "zip", "(", "self", ".", "_weights_module_names", ",", "self", ".", "_weights_numels", ")", ":", "\n", "\n", "            ", "if", "name", "[", "0", "]", "!=", "prev_layer", ":", "\n", "                ", "layer_count", "+=", "1", "\n", "prev_layer", "=", "name", "[", "0", "]", "\n", "\n", "", "if", "isinstance", "(", "name", "[", "0", "]", ",", "torch", ".", "nn", ".", "Conv2d", ")", "and", "name", "[", "1", "]", "==", "'weight'", ":", "\n", "                ", "layer_names", ".", "append", "(", "'L{}_conv_W_s{}'", ".", "format", "(", "layer_count", ",", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "name", "[", "0", "]", ",", "torch", ".", "nn", ".", "Conv2d", ")", "and", "name", "[", "1", "]", "==", "'bias'", ":", "\n", "                ", "layer_names", ".", "append", "(", "'L{}_conv_b_s{}'", ".", "format", "(", "layer_count", ",", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "name", "[", "0", "]", ",", "torch", ".", "nn", ".", "BatchNorm2d", ")", "and", "name", "[", "1", "]", "==", "'weight'", ":", "\n", "                ", "layer_names", ".", "append", "(", "'L{}_bn_W_s{}'", ".", "format", "(", "layer_count", ",", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "name", "[", "0", "]", ",", "torch", ".", "nn", ".", "BatchNorm2d", ")", "and", "name", "[", "1", "]", "==", "'bias'", ":", "\n", "                ", "layer_names", ".", "append", "(", "'L{}_bn_b_s{}'", ".", "format", "(", "layer_count", ",", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "name", "[", "0", "]", ",", "torch", ".", "nn", ".", "Linear", ")", "and", "name", "[", "1", "]", "==", "'weight'", ":", "\n", "                ", "layer_names", ".", "append", "(", "'L{}_fc_W_s{}'", ".", "format", "(", "layer_count", ",", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "name", "[", "0", "]", ",", "torch", ".", "nn", ".", "Linear", ")", "and", "name", "[", "1", "]", "==", "'bias'", ":", "\n", "                ", "layer_names", ".", "append", "(", "'L{}_fc_b_s{}'", ".", "format", "(", "layer_count", ",", "n", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Unknown layer type {}'", ".", "format", "(", "name", ")", ")", "\n", "\n", "\n", "", "", "return", "layer_names", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.models.meta_factory.ReparamModule.get_bn_masks": [[174, 194], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "zip", "isinstance", "isinstance"], "methods", ["None"], ["", "def", "get_bn_masks", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns 2 boolean masks of size n_weights,\n        where ones correspond to batchnorm gammas in first mask,\n        and batchnorm betas in second mask\n        \"\"\"", "\n", "\n", "gammas_mask", "=", "torch", ".", "zeros", "(", "self", ".", "flat_w", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "betas_mask", "=", "torch", ".", "zeros", "(", "self", ".", "flat_w", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "i", "=", "0", "\n", "\n", "for", "(", "name", ",", "n", ")", "in", "zip", "(", "self", ".", "_weights_module_names", ",", "self", ".", "_weights_numels", ")", ":", "\n", "            ", "is_BN", "=", "isinstance", "(", "name", "[", "0", "]", ",", "torch", ".", "nn", ".", "BatchNorm2d", ")", "or", "isinstance", "(", "name", "[", "0", "]", ",", "torch", ".", "nn", ".", "BatchNorm1d", ")", "\n", "if", "is_BN", "and", "name", "[", "1", "]", "==", "'weight'", ":", "\n", "                ", "gammas_mask", "[", "i", ":", "i", "+", "n", "]", "=", "1", "\n", "", "elif", "is_BN", "and", "name", "[", "1", "]", "==", "'bias'", ":", "\n", "                ", "betas_mask", "[", "i", ":", "i", "+", "n", "]", "=", "1", "\n", "", "i", "+=", "n", "\n", "\n", "", "return", "gammas_mask", ",", "betas_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.models.meta_factory.ReparamModule.flattened_unflattened_weights": [[195, 210], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "meta_factory.ReparamModule.unflatten_weight", "copy.deepcopy", "meta_factory.ReparamModule.state_dict", "w.reshape", "copy.deepcopy.values"], "methods", ["home.repos.pwc.inspect_result.polo5_fds.models.meta_factory.ReparamModule.unflatten_weight"], ["", "def", "flattened_unflattened_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        somehow unflattening weights changes the value of their sum.\n        This looks like it's because permutation matters in float 32 sum operation and\n        so different data structures give different results to the same operations\n        even though they contain the same values. Here unflattening and reflattening\n        recovers the sum value of the original self.get_param() method.\n        \"\"\"", "\n", "\n", "with", "self", ".", "unflatten_weight", "(", "self", ".", "flat_w", ")", ":", "\n", "            ", "state_dict", "=", "deepcopy", "(", "self", ".", "state_dict", "(", ")", ")", "\n", "del", "state_dict", "[", "'flat_w'", "]", "\n", "\n", "", "flat_w", "=", "torch", ".", "cat", "(", "[", "w", ".", "reshape", "(", "-", "1", ")", "for", "w", "in", "state_dict", ".", "values", "(", ")", "]", ",", "0", ")", "#.type(torch.DoubleTensor) doesn't change behaviour", "\n", "return", "flat_w", "\n", "\n"]], "home.repos.pwc.inspect_result.polo5_fds.models.meta_factory.ReparamModule.initialize": [[211, 222], ["torch.empty_like().requires_grad_", "torch.empty_like().requires_grad_", "torch.empty_like().requires_grad_", "torch.empty_like().requires_grad_", "torch.empty_like().requires_grad_", "torch.empty_like().requires_grad_", "torch.empty_like().requires_grad_", "torch.empty_like().requires_grad_", "torch.empty_like().requires_grad_", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "meta_factory.ReparamModule.unflatten_weight", "meta_factory.ReparamModule.initialize"], "methods", ["home.repos.pwc.inspect_result.polo5_fds.models.meta_factory.ReparamModule.unflatten_weight", "home.repos.pwc.inspect_result.polo5_fds.models.meta_factory.ReparamModule.initialize"], ["", "def", "initialize", "(", "self", ",", "init_type", "=", "'xavier'", ",", "init_param", "=", "1", ",", "init_norm_weights", "=", "1", ",", "inplace", "=", "True", ")", ":", "\n", "        ", "if", "inplace", ":", "\n", "            ", "flat_w", "=", "self", ".", "flat_w", "\n", "", "else", ":", "\n", "            ", "flat_w", "=", "torch", ".", "empty_like", "(", "self", ".", "flat_w", ")", ".", "requires_grad_", "(", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "with", "self", ".", "unflatten_weight", "(", "flat_w", ")", ":", "\n", "                ", "initialize", "(", "self", ",", "init_type", "=", "init_type", ",", "init_param", "=", "init_param", ",", "init_norm_weights", "=", "init_norm_weights", ")", "\n", "\n", "", "", "return", "flat_w", "\n", "\n"]]}