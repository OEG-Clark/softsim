{"home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing._init_binvox.add_path": [[12, 15], ["sys.path.insert"], "function", ["None"], ["def", "add_path", "(", "path", ")", ":", "\n", "    ", "if", "path", "not", "in", "sys", ".", "path", ":", "\n", "        ", "sys", ".", "path", ".", "insert", "(", "0", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.generate_example_data.copy_example": [[12, 61], ["os.join", "os.mkdir", "os.mkdir", "sorted", "os.join", "os.mkdir", "os.mkdir", "house2camera.keys", "open", "json.dump", "open", "json.dump", "house2camera[].append", "open", "json.load", "camera_params.append", "shutil.copy", "new_dataset.append", "os.join", "os.join", "os.join", "os.join", "os.join", "shutil.copy", "os.join", "os.join"], "function", ["None"], ["def", "copy_example", "(", "root_dir", ",", "result_dir", ",", "nbr_houses", ",", "dataset", ",", "img_modes", ")", ":", "\n", "    ", "house2camera", "=", "{", "}", "\n", "for", "cam", "in", "dataset", ":", "\n", "        ", "hid", "=", "cam", "[", "'house_id'", "]", "\n", "try", ":", "\n", "            ", "house2camera", "[", "hid", "]", ".", "append", "(", "cam", ")", "\n", "", "except", "KeyError", ":", "\n", "            ", "house2camera", "[", "hid", "]", "=", "[", "cam", "]", "\n", "\n", "", "", "vox_folder", "=", "osp", ".", "join", "(", "result_dir", ",", "'vox'", ")", "\n", "os", ".", "mkdir", "(", "vox_folder", ")", "\n", "\n", "for", "m", "in", "img_modes", ":", "\n", "        ", "mode_folder", "=", "osp", ".", "join", "(", "result_dir", ",", "m", ")", "\n", "os", ".", "mkdir", "(", "mode_folder", ")", "\n", "\n", "", "sorted_houses", "=", "sorted", "(", "house2camera", ".", "keys", "(", ")", ")", "\n", "idx", "=", "0", "\n", "new_dataset", "=", "[", "]", "\n", "camera_params", "=", "[", "]", "\n", "for", "hid", "in", "sorted_houses", "[", ":", "nbr_houses", "]", ":", "\n", "        ", "with", "open", "(", "osp", ".", "join", "(", "root_dir", ",", "hid", ",", "'camera_params.json'", ")", ")", "as", "f", ":", "\n", "            ", "cparam", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "for", "cam", "in", "house2camera", "[", "hid", "]", ":", "\n", "#Save camera params", "\n", "            ", "camera_params", ".", "append", "(", "cparam", "[", "cam", "[", "'idx'", "]", "]", ")", "\n", "\n", "#Copy GT voxels", "\n", "shutil", ".", "copy", "(", "\n", "osp", ".", "join", "(", "root_dir", ",", "cam", "[", "'house_id'", "]", ",", "'vox'", ",", "'{:04}.npz'", ".", "format", "(", "cam", "[", "'idx'", "]", ")", ")", ",", "\n", "osp", ".", "join", "(", "vox_folder", ",", "'{:04}.npz'", ".", "format", "(", "idx", ")", ")", "\n", ")", "\n", "#Copy image modes", "\n", "for", "m", "in", "img_modes", ":", "\n", "                ", "shutil", ".", "copy", "(", "\n", "osp", ".", "join", "(", "root_dir", ",", "cam", "[", "'house_id'", "]", ",", "m", ",", "'{:04}.png'", ".", "format", "(", "cam", "[", "'idx'", "]", ")", ")", ",", "\n", "osp", ".", "join", "(", "result_dir", ",", "m", ",", "'{:04}.png'", ".", "format", "(", "idx", ")", ")", ")", "\n", "\n", "", "cam", "[", "'idx'", "]", "=", "idx", "\n", "cam", "[", "'house_id'", "]", "=", "'.'", "\n", "new_dataset", ".", "append", "(", "cam", ")", "\n", "idx", "+=", "1", "\n", "\n", "", "", "with", "open", "(", "osp", ".", "join", "(", "result_dir", ",", "'dataset.json'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "new_dataset", ",", "f", ")", "\n", "\n", "", "with", "open", "(", "osp", ".", "join", "(", "result_dir", ",", "'camera_params.json'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "camera_params", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.rendering.SUNCGToolboxError.__init__": [[24, 27], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "returncode", ",", "message", ")", ":", "\n", "        ", "self", ".", "returncode", "=", "returncode", "\n", "self", ".", "message", "=", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.rendering.SUNCGToolboxError.__str__": [[28, 30], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.rendering.mode_str2map": [[32, 38], ["mode_str.lower"], "function", ["None"], ["", "", "def", "mode_str2map", "(", "str_list", ")", ":", "\n", "    ", "mode_map", "=", "{", "}", "\n", "for", "mode_str", "in", "str_list", ":", "\n", "        ", "m_lower", "=", "mode_str", ".", "lower", "(", ")", "\n", "mode_map", "[", "m_lower", "]", "=", "modes_str2obj", "[", "m_lower", "]", "\n", "", "return", "mode_map", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.rendering.glvec2np": [[39, 41], ["numpy.array"], "function", ["None"], ["", "def", "glvec2np", "(", "vec", ")", ":", "\n", "    ", "return", "np", ".", "array", "(", "[", "vec", ".", "x", ",", "vec", ".", "y", ",", "vec", ".", "z", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.rendering.render_images": [[42, 62], ["image_modes.items", "api.setMode", "numpy.array", "api.render", "os.join", "cv2.imwrite", "os.join", "cv2.imwrite", "os.join", "cv2.imwrite"], "function", ["None"], ["", "def", "render_images", "(", "api", ",", "prefix", ",", "res_dir", ",", "image_modes", ",", "return_copy", "=", "False", ")", ":", "\n", "    ", "imgs", "=", "{", "}", "\n", "for", "mode_str", ",", "mode", "in", "image_modes", ".", "items", "(", ")", ":", "\n", "        ", "api", ".", "setMode", "(", "mode", ")", "\n", "mat", "=", "np", ".", "array", "(", "api", ".", "render", "(", ")", ",", "copy", "=", "return_copy", ")", "\n", "if", "mode", "==", "RenderMode", ".", "DEPTH", ":", "\n", "            ", "img_basename", "=", "\"{}.png\"", ".", "format", "(", "prefix", ")", "\n", "res_path", "=", "osp", ".", "join", "(", "res_dir", ",", "mode_str", ",", "img_basename", ")", "\n", "cv2", ".", "imwrite", "(", "res_path", ",", "mat", "[", ":", ",", ":", ",", "0", "]", ")", "\n", "img_basename", "=", "\"{}_inf.png\"", ".", "format", "(", "prefix", ")", "\n", "res_path", "=", "osp", ".", "join", "(", "res_dir", ",", "mode_str", ",", "img_basename", ")", "\n", "cv2", ".", "imwrite", "(", "res_path", ",", "mat", "[", ":", ",", ":", ",", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "img_basename", "=", "\"{}.png\"", ".", "format", "(", "prefix", ")", "\n", "res_path", "=", "osp", ".", "join", "(", "res_dir", ",", "mode_str", ",", "img_basename", ")", "\n", "cv2", ".", "imwrite", "(", "res_path", ",", "mat", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "\n", "\n", "", "if", "return_copy", ":", "\n", "            ", "imgs", "[", "mode_str", "]", "=", "{", "'img'", ":", "mat", ",", "'name'", ":", "img_basename", "}", "\n", "", "", "return", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.rendering.gen_blacklist": [[63, 84], ["set", "set", "tempfile.NamedTemporaryFile", "tempfile.NamedTemporaryFile.write", "tempfile.NamedTemporaryFile.close", "open", "yaml.safe_load", "yaml.safe_load.get", "yaml.safe_load.get", "open", "csv.reader", "next", "sorted", "set.add", "set.add", "set.add"], "function", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHousesMemory.set", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHousesMemory.set", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.StreamToLogger.write", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHousesMemory.get", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHousesMemory.get", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.pr.PR.add", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.pr.PR.add", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.pr.PR.add"], ["", "def", "gen_blacklist", "(", "yaml_path", ",", "modelmapping_path", ")", ":", "\n", "    ", "with", "open", "(", "yaml_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "blk_cat_model", "=", "yaml", ".", "safe_load", "(", "f", ")", "\n", "\n", "\n", "", "blk_model", "=", "set", "(", "blk_cat_model", ".", "get", "(", "'models'", ",", "[", "]", ")", ")", "\n", "blk_cat", "=", "set", "(", "blk_cat_model", ".", "get", "(", "'categories'", ",", "[", "]", ")", ")", "\n", "with", "open", "(", "modelmapping_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "csvr", "=", "csv", ".", "reader", "(", "f", ")", "\n", "next", "(", "csvr", ")", "\n", "for", "r", "in", "csvr", ":", "\n", "            ", "if", "r", "[", "2", "]", "in", "blk_cat", "or", "r", "[", "3", "]", "in", "blk_cat", ":", "\n", "                ", "blk_model", ".", "add", "(", "r", "[", "1", "]", ")", "\n", "blk_cat", ".", "add", "(", "r", "[", "2", "]", ")", "\n", "blk_cat", ".", "add", "(", "r", "[", "3", "]", ")", "\n", "\n", "\n", "", "", "", "blk_file", "=", "tempfile", ".", "NamedTemporaryFile", "(", "mode", "=", "'w'", ",", "delete", "=", "False", ")", "\n", "blk_file", ".", "write", "(", "'\\n'", ".", "join", "(", "sorted", "(", "blk_model", ")", ")", ")", "\n", "blk_file", ".", "close", "(", ")", "\n", "return", "blk_file", ".", "name", ",", "blk_cat", ",", "blk_model", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.rendering.gen_house_obj_mtl": [[85, 90], ["subprocess.run", "os.abspath", "rendering.SUNCGToolboxError"], "function", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.LoggerProcess.run"], ["", "def", "gen_house_obj_mtl", "(", "house_dir", ")", ":", "\n", "    ", "c_str", "=", "'cd {} && {} house.json house.obj'", ".", "format", "(", "osp", ".", "abspath", "(", "house_dir", ")", ",", "suncgtb_scn2scn", ")", "\n", "r", "=", "subprocess", ".", "run", "(", "c_str", ",", "shell", "=", "True", ")", "\n", "if", "r", ".", "returncode", "!=", "0", ":", "\n", "        ", "raise", "SUNCGToolboxError", "(", "returncode", "=", "r", ",", "message", "=", "'SUNCGToolbox scn2scn exited with return code {}, make sure you have compiled SUNCGtoolbox'", ".", "format", "(", "r", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.rendering.rm_house_obj_mtl": [[91, 100], ["os.remove", "os.remove", "os.remove", "os.remove", "os.join", "os.join"], "function", ["None"], ["", "", "def", "rm_house_obj_mtl", "(", "house_dir", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "os", ".", "remove", "(", "osp", ".", "join", "(", "house_dir", ",", "'house.obj'", ")", ")", "\n", "", "except", "OSError", ":", "\n", "        ", "pass", "\n", "", "try", ":", "\n", "        ", "os", ".", "remove", "(", "osp", ".", "join", "(", "house_dir", ",", "'house.mtl'", ")", ")", "\n", "", "except", "OSError", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.get_data.convThread.__init__": [[61, 67], ["threading.Thread.__init__"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.Cauchy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c", ",", "house_dirs", ",", "exec_file", ",", "nbr_threads", ")", ":", "\n", "        ", "threading", ".", "Thread", ".", "__init__", "(", "self", ")", "\n", "self", ".", "c", "=", "c", "\n", "self", ".", "house_dirs", "=", "house_dirs", "\n", "self", ".", "exec_file", "=", "exec_file", "\n", "self", ".", "nbr_threads", "=", "nbr_threads", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.get_data.convThread.run": [[68, 74], ["os.system", "os.system", "os.system", "os.system", "os.isfile", "os.isfile", "os.isfile", "os.isfile", "os.join", "os.join", "os.join", "os.join"], "methods", ["None"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "for", "hd", "in", "self", ".", "house_dirs", "[", "self", ".", "c", ":", ":", "self", ".", "nbr_threads", "]", ":", "\n", "            ", "if", "not", "(", "osp", ".", "isfile", "(", "osp", ".", "join", "(", "hd", ",", "'house.obj'", ")", ")", "and", "\n", "osp", ".", "isfile", "(", "osp", ".", "join", "(", "hd", ",", "'house.mtl'", ")", ")", ")", ":", "\n", "# start_t = time.time()", "\n", "                ", "os", ".", "system", "(", "'cd {} && {} house.json house.obj'", ".", "format", "(", "hd", ",", "self", ".", "exec_file", ")", ")", "\n", "# print('House ID {} took {}s'.format(hd, time.time() - start_t))", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.get_data.dl_progress": [[13, 19], ["int", "sys.stdout.flush", "print"], "function", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.StreamToLogger.flush"], ["def", "dl_progress", "(", "count", ",", "blockSize", ",", "totalSize", ")", ":", "\n", "      ", "counts_freq", "=", "int", "(", "totalSize", "/", "(", "blockSize", "*", "100", ")", ")", "\n", "if", "count", "%", "counts_freq", "==", "0", ":", "\n", "          ", "percent", "=", "count", "*", "blockSize", "*", "100", "/", "totalSize", "\n", "print", "(", "'\\rDownloading...{:0.2f}%'", ".", "format", "(", "percent", ")", ")", "\n", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.get_data.get_suncg": [[20, 41], ["os.join", "os.exists", "os.join", "os.mkdir", "os.mkdir", "print", "os.exists", "print", "urllib.request.urlretrieve", "zipfile.ZipFile", "my_zip.infolist", "print", "io.BytesIO", "my_zip.read", "zipfile.ZipFile", "my_zip2.extractall"], "function", ["None"], ["", "def", "get_suncg", "(", "data_dir", ")", ":", "\n", "    ", "my_dir", "=", "osp", ".", "join", "(", "data_dir", ",", "'suncg'", ")", "\n", "if", "osp", ".", "exists", "(", "my_dir", ")", ":", "\n", "        ", "print", "(", "'SUNCG folder already exists, do nothing'", ")", "\n", "return", "\n", "\n", "# Download zipfile if we have not", "\n", "", "zip_target", "=", "osp", ".", "join", "(", "data_dir", ",", "'suncg_data.zip'", ")", "\n", "suncg_url", "=", "'http://suncg.cs.princeton.edu/data/suncg_data.zip'", "\n", "if", "not", "osp", ".", "exists", "(", "zip_target", ")", ":", "\n", "        ", "print", "(", "'Getting the SUNCG data'", ")", "\n", "urlretrieve", "(", "suncg_url", ",", "zip_target", ",", "reporthook", "=", "dl_progress", ")", "\n", "\n", "# Unzip nested", "\n", "", "os", ".", "mkdir", "(", "my_dir", ")", "\n", "with", "zipfile", ".", "ZipFile", "(", "zip_target", ",", "mode", "=", "'r'", ")", "as", "my_zip", ":", "\n", "        ", "for", "nested_zip_name", "in", "my_zip", ".", "infolist", "(", ")", ":", "\n", "            ", "print", "(", "'Extracting {}'", ".", "format", "(", "nested_zip_name", ".", "filename", ")", ")", "\n", "nested_zip", "=", "io", ".", "BytesIO", "(", "my_zip", ".", "read", "(", "nested_zip_name", ")", ")", "\n", "with", "zipfile", ".", "ZipFile", "(", "nested_zip", ",", "mode", "=", "'r'", ")", "as", "my_zip2", ":", "\n", "                ", "my_zip2", ".", "extractall", "(", "path", "=", "my_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.get_data.get_pbrs": [[42, 58], ["os.join", "os.exists", "os.join", "print", "print", "os.exists", "print", "urllib.request.urlretrieve", "zipfile.ZipFile", "my_zip.extractall"], "function", ["None"], ["", "", "", "", "def", "get_pbrs", "(", "data_dir", ")", ":", "\n", "    ", "my_dir", "=", "osp", ".", "join", "(", "data_dir", ",", "'suncg'", ",", "'camera'", ")", "\n", "if", "osp", ".", "exists", "(", "my_dir", ")", ":", "\n", "        ", "print", "(", "'PBRS camera folder already exists, do nothing'", ")", "\n", "return", "\n", "\n", "# Download zipfile if we have not", "\n", "", "zip_target", "=", "osp", ".", "join", "(", "data_dir", ",", "'camera_v2.zip'", ")", "\n", "pbrs_url", "=", "'http://pbrs.cs.princeton.edu/pbrs_release/data/camera_v2.zip'", "\n", "if", "not", "osp", ".", "exists", "(", "zip_target", ")", ":", "\n", "        ", "print", "(", "'Getting the PBRS camera data'", ")", "\n", "urlretrieve", "(", "pbrs_url", ",", "zip_target", ",", "reporthook", "=", "dl_progress", ")", "\n", "\n", "", "print", "(", "'Unzipping the PBRS camera data'", ")", "\n", "with", "zipfile", ".", "ZipFile", "(", "zip_target", ",", "mode", "=", "'r'", ")", "as", "my_zip", ":", "\n", "        ", "my_zip", ".", "extractall", "(", "path", "=", "my_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.get_data.parse_args": [[76, 85], ["os.dirname", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.realpath", "os.abspath", "os.join"], "function", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.get_data.parse_args"], ["", "", "", "", "def", "parse_args", "(", ")", ":", "\n", "    ", "script_dir", "=", "osp", ".", "dirname", "(", "osp", ".", "realpath", "(", "__file__", ")", ")", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Get data for AL'", ")", "\n", "parser", ".", "add_argument", "(", "'--data-dir'", ",", "type", "=", "str", ",", "default", "=", "osp", ".", "abspath", "(", "osp", ".", "join", "(", "script_dir", ",", "'..'", ",", "'data'", ")", ")", ",", "\n", "help", "=", "'Data folder. (default: %(default)s)'", ")", "\n", "parser", ".", "add_argument", "(", "'--suncg'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'Get the SunCG dataset'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing._init_house3d.add_path": [[12, 15], ["sys.path.insert"], "function", ["None"], ["def", "add_path", "(", "path", ")", ":", "\n", "    ", "if", "path", "not", "in", "sys", ".", "path", ":", "\n", "        ", "sys", ".", "path", ".", "insert", "(", "0", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.generate_grids.image_folder_is_complete": [[36, 44], ["range", "image_modes.keys", "os.isfile", "os.join"], "function", ["None"], ["def", "image_folder_is_complete", "(", "nbr_cameras", ",", "res_dir", ")", ":", "\n", "#Check for images", "\n", "    ", "for", "ci", "in", "range", "(", "nbr_cameras", ")", ":", "\n", "        ", "for", "mode_str", "in", "image_modes", ".", "keys", "(", ")", ":", "\n", "# logger.info('checking {}'.format(osp.join(res_dir, \"{:04}_{}.png\".format(ci, mode_str))))", "\n", "            ", "if", "not", "osp", ".", "isfile", "(", "osp", ".", "join", "(", "res_dir", ",", "mode_str", ",", "\"{:04}.png\"", ".", "format", "(", "ci", ")", ")", ")", ":", "\n", "                ", "return", "False", "\n", "", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.generate_grids.voxel_folder_is_complete": [[45, 51], ["range", "os.isfile", "os.join"], "function", ["None"], ["", "def", "voxel_folder_is_complete", "(", "nbr_cameras", ",", "res_dir", ")", ":", "\n", "#Check for voxels", "\n", "    ", "for", "ci", "in", "range", "(", "nbr_cameras", ")", ":", "\n", "        ", "if", "not", "osp", ".", "isfile", "(", "osp", ".", "join", "(", "res_dir", ",", "'vox'", ",", "\"{:04}.npz\"", ".", "format", "(", "ci", ")", ")", ")", ":", "\n", "            ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.generate_grids.render_scene_images": [[52, 100], ["cfg.get", "image_modes.keys", "os.join", "os.join", "api.getCamera", "voxel.constructK", "enumerate", "logger.info", "os.makedirs", "os.makedirs", "os.isfile", "logger.warning", "rendering.gen_house_obj_mtl", "api.loadSceneNoCache", "api.loadSceneNoCache", "voxel.SUNCGCamera", "camera_params.append", "House3D.objrender.Vec3", "House3D.objrender.Vec3", "House3D.objrender.Vec3", "api.getCamera.set", "rendering.render_images", "open", "json.dump", "rendering.rm_house_obj_mtl", "os.join", "os.join", "voxel.constructK.tolist", "voxel.SUNCGCamera.P.tolist"], "function", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHousesMemory.get", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.voxel.constructK", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.rendering.gen_house_obj_mtl", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHousesMemory.set", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.rendering.render_images", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.rendering.rm_house_obj_mtl"], ["", "def", "render_scene_images", "(", "cameras", ",", "api", ",", "suncg_dir", ",", "house_id", ",", "result_dir", ")", ":", "\n", "    ", "mappingFile", "=", "cfg", "[", "'modelCategoryFile'", "]", "\n", "colormapFile", "=", "cfg", "[", "'colorFile'", "]", "\n", "modelBlacklistFile", "=", "cfg", ".", "get", "(", "'modelBlacklistFile'", ",", "None", ")", "\n", "\n", "#Generate folders for image types", "\n", "for", "mode_str", "in", "image_modes", ".", "keys", "(", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "osp", ".", "join", "(", "result_dir", ",", "mode_str", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "#Load house", "\n", "", "house_dir", "=", "osp", ".", "join", "(", "suncg_dir", ",", "'house'", ",", "house_id", ")", "\n", "obj_path", "=", "osp", ".", "join", "(", "house_dir", ",", "'house.obj'", ")", "\n", "make_tmp_obj", "=", "not", "osp", ".", "isfile", "(", "obj_path", ")", "\n", "# Generate .obj and .mtl if not done already", "\n", "if", "make_tmp_obj", ":", "\n", "        ", "logger", ".", "warning", "(", "'Generating .mtl and .obj file, precompute with get_data.py for increased speed'", ")", "\n", "gen_house_obj_mtl", "(", "house_dir", ")", "\n", "\n", "", "if", "modelBlacklistFile", ":", "\n", "        ", "api", ".", "loadSceneNoCache", "(", "obj_path", ",", "mappingFile", ",", "colormapFile", ",", "modelBlacklistFile", ")", "\n", "", "else", ":", "\n", "        ", "api", ".", "loadSceneNoCache", "(", "obj_path", ",", "mappingFile", ",", "colormapFile", ")", "\n", "", "cam", "=", "api", ".", "getCamera", "(", ")", "\n", "# logger.debug('Setup  took: {}ms'.format(int(1e3*(time.time() - start))))", "\n", "# start = time.time()", "\n", "\n", "#Render Cameras", "\n", "camera_params", "=", "[", "]", "\n", "K", "=", "constructK", "(", ")", "\n", "for", "i", ",", "cr", "in", "enumerate", "(", "cameras", ")", ":", "\n", "# Parse camera position", "\n", "        ", "suncg_cam", "=", "SUNCGCamera", "(", "cr", ")", "\n", "camera_params", ".", "append", "(", "{", "'K'", ":", "K", ".", "tolist", "(", ")", ",", "'P'", ":", "suncg_cam", ".", "P", ".", "tolist", "(", ")", "}", ")", "\n", "\n", "pos", "=", "Vec3", "(", "*", "suncg_cam", ".", "pos", ")", "\n", "front", "=", "Vec3", "(", "*", "suncg_cam", ".", "front", ")", "\n", "up", "=", "Vec3", "(", "*", "suncg_cam", ".", "up", ")", "\n", "\n", "#Render", "\n", "cam", ".", "set", "(", "pos", ",", "front", ",", "up", ")", "\n", "imgs", "=", "render_images", "(", "api", ",", "'{:04}'", ".", "format", "(", "i", ")", ",", "result_dir", ",", "image_modes", ")", "\n", "\n", "", "with", "open", "(", "osp", ".", "join", "(", "result_dir", ",", "'camera_params.json'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "camera_params", ",", "f", ")", "\n", "\n", "", "if", "make_tmp_obj", ":", "\n", "        ", "rm_house_obj_mtl", "(", "house_dir", ")", "\n", "", "logger", ".", "info", "(", "'Done rendering {}'", ".", "format", "(", "house_id", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.generate_grids.generate_scene_voxel_grids": [[102, 422], ["os.join", "os.makedirs", "os.makedirs", "os.join", "numpy.array", "voxel.constructK", "enumerate", "logger.info", "shutil.rmtree", "os.makedirs", "os.makedirs", "open", "json.load", "voxel.SUNCGCamera", "numpy.linalg.norm", "numpy.array", "np.array.view().reshape", "numpy.zeros", "np.zeros.reshape", "numpy.savez_compressed", "os.join", "os.makedirs", "os.makedirs", "numpy.array", "numpy.meshgrid", "voxel.plotVoxelsList", "os.join", "np.array.view", "numpy.zeros_like", "node.get", "node[].lower", "numpy.array", "numpy.array", "voxel.boxOverlap", "voxel.sameFloor", "pywavefront.Wavefront", "os.join", "os.makedirs", "os.makedirs", "numpy.array", "voxel.inPolygon", "numpy.mean", "pywavefront.Wavefront", "numpy.array", "numpy.mean", "pywavefront.Wavefront", "os.join", "os.makedirs", "os.makedirs", "pywavefront.Wavefront.materials.items", "suncg_labels.getClassRoot", "time.time", "utils.getFigure", "plt.subplot", "ax_list.append", "plt.title", "plt.subplot.plot", "plt.subplot.plot", "plt.axis", "plt.subplot", "ax_list.append", "plt.title", "plt.subplot.plot", "plt.subplot.plot", "plt.axis", "plt.subplot", "ax_list.append", "plt.title", "plt.subplot.plot", "plt.subplot.plot", "plt.axis", "plt.subplot", "ax_list.append", "plt.title", "plt.subplot.plot", "plt.subplot.plot", "plt.axis", "matplotlib.animation.FuncAnimation", "matplotlib.animation.FuncAnimation.save", "plt.close", "print", "suncg_labels.getClassRoot", "numpy.all", "numpy.flatnonzero", "os.join", "numpy.vstack", "obj_cache.query", "os.join", "numpy.linspace", "os.join", "voxel.inPolygon.any", "suncg_labels.getClassRoot", "os.join", "suncg_labels.getClassRoot", "os.join", "numpy.array", "os.join", "obj_node[].replace", "numpy.array", "numpy.array", "np.all.any", "open", "binvox_rw.read_header", "numpy.linalg.inv", "range", "numpy.abs", "numpy.abs", "voxel.inPolygon", "numpy.arange", "time.time", "len", "numpy.array", "numpy.ones", "numpy.reshape", "logger.error", "float", "float", "float", "float", "plt.subplot.view_init", "set", "numpy.reshape", "range", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "len", "numpy.sqrt"], "function", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.voxel.constructK", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.voxel.plotVoxelsList", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHousesMemory.get", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.voxel.boxOverlap", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.voxel.sameFloor", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.voxel.inPolygon", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.data.suncg.SUNCGLabels.getClassRoot", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.voxel.getFigure", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.histogram.HistogramTpFn2D.plot", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.histogram.HistogramTpFn2D.plot", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.histogram.HistogramTpFn2D.plot", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.histogram.HistogramTpFn2D.plot", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.histogram.HistogramTpFn2D.plot", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.histogram.HistogramTpFn2D.plot", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.histogram.HistogramTpFn2D.plot", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.histogram.HistogramTpFn2D.plot", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.data.suncg.SUNCGLabels.getClassRoot", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.voxel.NNCache.query", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.data.suncg.SUNCGLabels.getClassRoot", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.data.suncg.SUNCGLabels.getClassRoot", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.voxel.inPolygon", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHousesMemory.set"], ["", "def", "generate_scene_voxel_grids", "(", "cameras", ",", "suncg_dir", ",", "house_id", ",", "result_dir", ",", "obj_cache", ")", ":", "\n", "# debug_dir = '/data/debug2/{}'.format(house_id)", "\n", "    ", "debug_dir", "=", "None", "\n", "if", "debug_dir", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "debug_dir", ",", "ignore_errors", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "debug_dir", ")", "\n", "\n", "#Generate result dir", "\n", "", "result_dir", "=", "osp", ".", "join", "(", "result_dir", ",", "'vox'", ")", "\n", "os", ".", "makedirs", "(", "result_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "#Load house", "\n", "house_json", "=", "osp", ".", "join", "(", "suncg_dir", ",", "'house'", ",", "house_id", ",", "'house.json'", ")", "\n", "\n", "with", "open", "(", "house_json", ")", "as", "f", ":", "\n", "        ", "house", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "#config Params", "\n", "# voxSize = np.array([20,10,20])", "\n", "# voxUnit = 0.3", "\n", "# voxSize = np.array([240,144,240])", "\n", "# voxUnit = 0.02", "\n", "# voxSize = np.array([120,72,120])", "\n", "# voxUnit = 0.04", "\n", "# voxSize = np.array([60,40,60])", "\n", "", "voxSize", "=", "np", ".", "array", "(", "[", "60", ",", "40", ",", "60", "]", ")", "\n", "voxUnit", "=", "0.08", "\n", "camK", "=", "constructK", "(", ")", "\n", "im_w", "=", "640", "\n", "im_h", "=", "480", "\n", "\n", "# Confusing facts:", "\n", "# Camera coordinate system has as usual Z forward and Y downward", "\n", "# SUNCG coordinate system has Y facing up", "\n", "# Output coordinate system has X facing up", "\n", "\n", "# Select grid based on camera location", "\n", "for", "camera_idx", ",", "cr", "in", "enumerate", "(", "cameras", ")", ":", "\n", "        ", "cam", "=", "SUNCGCamera", "(", "cr", ")", "\n", "\n", "if", "debug_dir", ":", "\n", "            ", "cam_debug_dir", "=", "osp", ".", "join", "(", "debug_dir", ",", "'camera{}'", ".", "format", "(", "camera_idx", ")", ")", "\n", "os", ".", "makedirs", "(", "cam_debug_dir", ",", "exist_ok", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "cam_debug_dir", "=", "None", "\n", "\n", "# Put grid center half the grid length in front of the camera, moving in the XZ-plane", "\n", "", "xz_front", "=", "cam", ".", "front", "*", "np", ".", "array", "(", "[", "1", ",", "0", ",", "1", "]", ")", "\n", "xz_front", "/=", "np", ".", "linalg", ".", "norm", "(", "xz_front", ")", "\n", "voxOriginWorld", "=", "cam", ".", "pos", "+", "xz_front", "*", "voxSize", "[", "0", "]", "*", "voxUnit", "/", "2", "\n", "\n", "#Correct box center so we always get some floor.", "\n", "if", "voxOriginWorld", "[", "1", "]", "+", "voxUnit", "/", "2", ">", "voxUnit", "*", "voxSize", "[", "1", "]", "/", "2", ":", "\n", "            ", "voxOriginWorld", "[", "1", "]", "=", "voxUnit", "*", "voxSize", "[", "1", "]", "/", "2", "-", "voxUnit", "/", "2", "\n", "\n", "", "voxWorldMin", "=", "voxOriginWorld", "-", "(", "voxSize", "*", "voxUnit", "/", "2", ")", "\n", "voxWorldMax", "=", "voxOriginWorld", "+", "(", "voxSize", "*", "voxUnit", "/", "2", ")", "\n", "\n", "\n", "gridPtsWorld", "=", "np", ".", "array", "(", "\n", "np", ".", "meshgrid", "(", "*", "[", "np", ".", "linspace", "(", "voxWorldMin", "[", "i", "]", ",", "voxWorldMax", "[", "i", "]", ",", "voxSize", "[", "i", "]", ")", "for", "i", "in", "range", "(", "3", ")", "]", ",", "indexing", "=", "'ij'", ")", ")", "\n", "\n", "gridPtsWorldList", "=", "gridPtsWorld", ".", "view", "(", ")", ".", "reshape", "(", "(", "3", ",", "-", "1", ")", ")", "\n", "\n", "# Create views", "\n", "gridPtsWorldXZ", "=", "gridPtsWorldList", "[", "[", "0", ",", "2", "]", ",", ":", "]", "\n", "gridPtsWorldXY", "=", "gridPtsWorldList", "[", ":", "2", ",", ":", "]", "\n", "gridPtsWorldYZ", "=", "gridPtsWorldList", "[", "1", ":", ",", ":", "]", "\n", "gridPtsWorldY", "=", "gridPtsWorldList", "[", "1", ",", ":", "]", "\n", "#Output", "\n", "gridPtsLabel", "=", "np", ".", "zeros", "(", "gridPtsWorldList", ".", "shape", "[", "1", "]", ",", "dtype", "=", "np", ".", "uint32", ")", "\n", "\n", "xz", "=", "[", "0", ",", "2", "]", "\n", "for", "houseLevel", "in", "house", "[", "'levels'", "]", ":", "\n", "            ", "for", "node", "in", "houseLevel", "[", "'nodes'", "]", ":", "\n", "                ", "if", "node", "[", "'type'", "]", ".", "lower", "(", ")", "!=", "'room'", ":", "\n", "                    ", "continue", "\n", "\n", "#Check if we need the room", "\n", "", "try", ":", "\n", "                    ", "bbox_min", "=", "np", ".", "array", "(", "node", "[", "'bbox'", "]", "[", "'min'", "]", ")", "\n", "bbox_max", "=", "np", ".", "array", "(", "node", "[", "'bbox'", "]", "[", "'max'", "]", ")", "\n", "", "except", "KeyError", ":", "\n", "                    ", "continue", "\n", "\n", "", "if", "not", "boxOverlap", "(", "voxWorldMin", "[", "xz", "]", ",", "voxWorldMax", "[", "xz", "]", ",", "bbox_min", "[", "xz", "]", ",", "bbox_max", "[", "xz", "]", ")", ":", "\n", "                    ", "continue", "\n", "\n", "", "if", "not", "sameFloor", "(", "voxOriginWorld", ",", "bbox_min", ",", "bbox_max", ")", ":", "\n", "                    ", "continue", "\n", "\n", "# Find grids in the room", "\n", "", "try", ":", "\n", "                    ", "floorObj", "=", "Wavefront", "(", "osp", ".", "join", "(", "suncg_dir", ",", "'room'", ",", "house_id", ",", "'{}f.obj'", ".", "format", "(", "node", "[", "'modelId'", "]", ")", ")", ")", "\n", "", "except", "IOError", "as", "e", ":", "\n", "                    ", "floorObj", "=", "None", "\n", "\n", "", "if", "False", "and", "debug_dir", ":", "\n", "                    ", "floor_debug_dir", "=", "osp", ".", "join", "(", "cam_debug_dir", ",", "'floor'", ")", "\n", "os", ".", "makedirs", "(", "floor_debug_dir", ",", "exist_ok", "=", "True", ")", "\n", "", "else", ":", "\n", "                    ", "floor_debug_dir", "=", "None", "\n", "\n", "", "if", "floorObj", ":", "\n", "                    ", "simple_vertices", "=", "np", ".", "array", "(", "floorObj", ".", "vertices", ")", "\n", "inRoom", "=", "inPolygon", "(", "gridPtsWorldXZ", ".", "T", ",", "simple_vertices", "[", ":", ",", "[", "0", ",", "2", "]", "]", ",", "floor_debug_dir", ")", "\n", "\n", "#Early exit if we are not actually in the room.", "\n", "if", "not", "inRoom", ".", "any", "(", ")", ":", "\n", "                        ", "continue", "\n", "\n", "#Find floor", "\n", "", "floorY", "=", "np", ".", "mean", "(", "simple_vertices", "[", ":", ",", "1", "]", ")", "\n", "floorMask", "=", "inRoom", "&", "(", "np", ".", "abs", "(", "gridPtsWorldY", "-", "floorY", ")", "<=", "voxUnit", "/", "2", ")", "\n", "if", "'floor'", "not", "in", "cfg", "[", "'catBlacklist'", "]", ":", "\n", "                        ", "classRootId", ",", "_", "=", "suncg_labels", ".", "getClassRoot", "(", "'floor'", ")", "\n", "gridPtsLabel", "[", "floorMask", "]", "=", "classRootId", "\n", "", "", "else", ":", "\n", "#Need floor object", "\n", "                    ", "continue", "\n", "\n", "\n", "# Find ceiling", "\n", "", "try", ":", "\n", "                    ", "ceilObj", "=", "Wavefront", "(", "osp", ".", "join", "(", "suncg_dir", ",", "'room'", ",", "house_id", ",", "'{}c.obj'", ".", "format", "(", "node", "[", "'modelId'", "]", ")", ")", ")", "\n", "", "except", "IOError", "as", "e", ":", "\n", "                    ", "ceilObj", "=", "None", "\n", "\n", "", "if", "ceilObj", ":", "\n", "                    ", "simple_vertices", "=", "np", ".", "array", "(", "ceilObj", ".", "vertices", ")", "\n", "ceilY", "=", "np", ".", "mean", "(", "simple_vertices", "[", ":", ",", "1", "]", ")", "\n", "ceilMask", "=", "inRoom", "&", "(", "np", ".", "abs", "(", "gridPtsWorldY", "-", "ceilY", ")", "<=", "voxUnit", "/", "2", ")", "\n", "if", "'ceiling'", "not", "in", "cfg", "[", "'catBlacklist'", "]", ":", "\n", "                        ", "classRootId", ",", "_", "=", "suncg_labels", ".", "getClassRoot", "(", "'ceiling'", ")", "\n", "gridPtsLabel", "[", "ceilMask", "]", "=", "classRootId", "\n", "\n", "# Find walls", "\n", "", "", "try", ":", "\n", "                    ", "wallObj", "=", "Wavefront", "(", "osp", ".", "join", "(", "suncg_dir", ",", "'room'", ",", "house_id", ",", "'{}w.obj'", ".", "format", "(", "node", "[", "'modelId'", "]", ")", ")", ")", "\n", "", "except", "IOError", "as", "e", ":", "\n", "                    ", "wallObj", "=", "None", "\n", "\n", "\n", "", "if", "False", "and", "debug_dir", ":", "\n", "                    ", "wall_debug_dir", "=", "osp", ".", "join", "(", "cam_debug_dir", ",", "'wall'", ")", "\n", "os", ".", "makedirs", "(", "wall_debug_dir", ",", "exist_ok", "=", "True", ")", "\n", "", "else", ":", "\n", "                    ", "wall_debug_dir", "=", "None", "\n", "\n", "", "wallMask", "=", "np", ".", "zeros_like", "(", "inRoom", ")", "\n", "if", "wallObj", "and", "ceilObj", "and", "floorObj", ":", "\n", "                    ", "for", "m_name", ",", "material", "in", "wallObj", ".", "materials", ".", "items", "(", ")", ":", "\n", "                        ", "vertices", "=", "np", ".", "array", "(", "[", "[", "material", ".", "vertices", "[", "i", "]", ",", "material", ".", "vertices", "[", "i", "+", "2", "]", "]", "for", "i", "in", "range", "(", "5", ",", "len", "(", "material", ".", "vertices", ")", ",", "material", ".", "vertex_size", ")", "]", ")", "\n", "if", "vertices", ".", "size", ">", "0", ":", "\n", "                            ", "wallMask", "|=", "inPolygon", "(", "gridPtsWorldXZ", ".", "T", ",", "vertices", ",", "wall_debug_dir", ",", "convex_hull", "=", "True", ")", "\n", "\n", "", "", "classRootId", ",", "_", "=", "suncg_labels", ".", "getClassRoot", "(", "'wall'", ")", "\n", "wallMask", "&=", "gridPtsWorldY", "<", "(", "ceilY", "-", "voxUnit", "/", "2", ")", "\n", "wallMask", "&=", "gridPtsWorldY", ">", "(", "floorY", "+", "voxUnit", "/", "2", ")", "\n", "if", "'wall'", "not", "in", "cfg", "[", "'catBlacklist'", "]", ":", "\n", "                        ", "gridPtsLabel", "[", "wallMask", "]", "=", "classRootId", "\n", "\n", "# Visualize", "\n", "", "", "if", "False", "and", "debug_dir", ":", "\n", "                    ", "t", "=", "time", ".", "time", "(", ")", "\n", "ax_list", "=", "[", "]", "\n", "fig", "=", "getFigure", "(", ")", "\n", "ax", "=", "plt", ".", "subplot", "(", "2", ",", "2", ",", "1", ",", "projection", "=", "'3d'", ")", "\n", "ax_list", ".", "append", "(", "ax", ")", "\n", "plt", ".", "title", "(", "'inRoom, {:0.2f}%'", ".", "format", "(", "100", "*", "np", ".", "sum", "(", "inRoom", ")", "/", "float", "(", "inRoom", ".", "size", ")", ")", ")", "\n", "ax", ".", "plot", "(", "gridPtsWorldList", "[", "0", ",", "inRoom", "]", ",", "gridPtsWorldList", "[", "1", ",", "inRoom", "]", ",", "gridPtsWorldList", "[", "2", ",", "inRoom", "]", ",", "'g.'", ",", "alpha", "=", "0.8", ")", "\n", "ax", ".", "plot", "(", "gridPtsWorldList", "[", "0", ",", "~", "inRoom", "]", ",", "gridPtsWorldList", "[", "1", ",", "~", "inRoom", "]", ",", "gridPtsWorldList", "[", "2", ",", "~", "inRoom", "]", ",", "'r.'", ",", "alpha", "=", "0.05", ")", "\n", "plt", ".", "axis", "(", "'equal'", ")", "\n", "ax", "=", "plt", ".", "subplot", "(", "2", ",", "2", ",", "2", ",", "projection", "=", "'3d'", ")", "\n", "ax_list", ".", "append", "(", "ax", ")", "\n", "plt", ".", "title", "(", "'Wall, {:0.2f}%'", ".", "format", "(", "100", "*", "np", ".", "sum", "(", "wallMask", ")", "/", "float", "(", "inRoom", ".", "size", ")", ")", ")", "\n", "ax", ".", "plot", "(", "gridPtsWorldList", "[", "0", ",", "wallMask", "]", ",", "gridPtsWorldList", "[", "1", ",", "wallMask", "]", ",", "gridPtsWorldList", "[", "2", ",", "wallMask", "]", ",", "'g.'", ",", "alpha", "=", "0.8", ")", "\n", "ax", ".", "plot", "(", "gridPtsWorldList", "[", "0", ",", "~", "wallMask", "]", ",", "gridPtsWorldList", "[", "1", ",", "~", "wallMask", "]", ",", "gridPtsWorldList", "[", "2", ",", "~", "wallMask", "]", ",", "'r.'", ",", "alpha", "=", "0.05", ")", "\n", "plt", ".", "axis", "(", "'equal'", ")", "\n", "ax", "=", "plt", ".", "subplot", "(", "2", ",", "2", ",", "3", ",", "projection", "=", "'3d'", ")", "\n", "ax_list", ".", "append", "(", "ax", ")", "\n", "plt", ".", "title", "(", "'Floor, {:0.2f}%'", ".", "format", "(", "100", "*", "np", ".", "sum", "(", "floorMask", ")", "/", "float", "(", "inRoom", ".", "size", ")", ")", ")", "\n", "ax", ".", "plot", "(", "gridPtsWorldList", "[", "0", ",", "floorMask", "]", ",", "gridPtsWorldList", "[", "1", ",", "floorMask", "]", ",", "gridPtsWorldList", "[", "2", ",", "floorMask", "]", ",", "'g.'", ",", "alpha", "=", "0.8", ")", "\n", "ax", ".", "plot", "(", "gridPtsWorldList", "[", "0", ",", "~", "floorMask", "]", ",", "gridPtsWorldList", "[", "1", ",", "~", "floorMask", "]", ",", "gridPtsWorldList", "[", "2", ",", "~", "floorMask", "]", ",", "'r.'", ",", "alpha", "=", "0.05", ")", "\n", "plt", ".", "axis", "(", "'equal'", ")", "\n", "ax", "=", "plt", ".", "subplot", "(", "2", ",", "2", ",", "4", ",", "projection", "=", "'3d'", ")", "\n", "ax_list", ".", "append", "(", "ax", ")", "\n", "plt", ".", "title", "(", "'Ceiling, {:0.2f}%'", ".", "format", "(", "100", "*", "np", ".", "sum", "(", "ceilMask", ")", "/", "float", "(", "inRoom", ".", "size", ")", ")", ")", "\n", "ax", ".", "plot", "(", "gridPtsWorldList", "[", "0", ",", "ceilMask", "]", ",", "gridPtsWorldList", "[", "1", ",", "ceilMask", "]", ",", "gridPtsWorldList", "[", "2", ",", "ceilMask", "]", ",", "'g.'", ",", "alpha", "=", "0.8", ")", "\n", "ax", ".", "plot", "(", "gridPtsWorldList", "[", "0", ",", "~", "ceilMask", "]", ",", "gridPtsWorldList", "[", "1", ",", "~", "ceilMask", "]", ",", "gridPtsWorldList", "[", "2", ",", "~", "ceilMask", "]", ",", "'r.'", ",", "alpha", "=", "0.05", ")", "\n", "plt", ".", "axis", "(", "'equal'", ")", "\n", "\n", "anim", "=", "FuncAnimation", "(", "fig", ",", "lambda", "i", ":", "[", "ax", ".", "view_init", "(", "30", ",", "i", "*", "30", ")", "for", "ax", "in", "ax_list", "]", ",", "frames", "=", "np", ".", "arange", "(", "0", ",", "12", ")", ",", "interval", "=", "1000", ")", "\n", "anim", ".", "save", "(", "osp", ".", "join", "(", "cam_debug_dir", ",", "'Room{}.gif'", ".", "format", "(", "node", "[", "'modelId'", "]", ")", ")", ",", "dpi", "=", "80", ",", "writer", "=", "'imagemagick'", ")", "\n", "# plt.savefig(osp.join(debug_dir, 'Room{}.png'.format(node['modelId'])))", "\n", "plt", ".", "close", "(", ")", "\n", "print", "(", "'Plots grid room'", ",", "time", ".", "time", "(", ")", "-", "t", ")", "\n", "\n", "#Check all objects", "\n", "", "for", "obj_idx", "in", "node", ".", "get", "(", "'nodeIndices'", ",", "[", "]", ")", ":", "\n", "                    ", "obj_node", "=", "houseLevel", "[", "'nodes'", "]", "[", "obj_idx", "]", "\n", "try", ":", "\n", "                        ", "model_id", "=", "obj_node", "[", "'modelId'", "]", ".", "replace", "(", "'/'", ",", "'__'", ")", "\n", "", "except", "KeyError", ":", "\n", "                        ", "continue", "\n", "\n", "", "if", "model_id", "in", "cfg", "[", "'modelBlacklist'", "]", ":", "\n", "                        ", "continue", "\n", "\n", "", "classRootId", ",", "classRoot", "=", "suncg_labels", ".", "getClassRoot", "(", "model_id", ")", "\n", "\n", "obj_bbox_max", "=", "np", ".", "array", "(", "[", "obj_node", "[", "'bbox'", "]", "[", "'max'", "]", "]", ")", ".", "T", "\n", "obj_bbox_min", "=", "np", ".", "array", "(", "[", "obj_node", "[", "'bbox'", "]", "[", "'min'", "]", "]", ")", ".", "T", "\n", "\n", "# Work with voxels around the object", "\n", "objMask", "=", "np", ".", "all", "(", "(", "obj_bbox_min", "-", "voxUnit", "/", "2", "<=", "gridPtsWorldList", ")", "&", "\n", "(", "gridPtsWorldList", "<=", "obj_bbox_max", "+", "voxUnit", "/", "2", ")", ",", "\n", "axis", "=", "0", ")", "\n", "\n", "if", "not", "objMask", ".", "any", "(", ")", ":", "\n", "                        ", "continue", "\n", "\n", "", "objMaskIdx", "=", "np", ".", "flatnonzero", "(", "objMask", ")", "\n", "gridPtsWorldNear", "=", "gridPtsWorldList", "[", ":", ",", "objMask", "]", "\n", "\n", "# Get voxels", "\n", "binvox_filename", "=", "osp", ".", "join", "(", "suncg_dir", ",", "'object_vox'", ",", "'object_vox_data'", ",", "model_id", ",", "'{}.binvox'", ".", "format", "(", "model_id", ")", ")", "\n", "with", "open", "(", "binvox_filename", ",", "'rb'", ")", "as", "f", ":", "\n", "                        ", "dims", ",", "translate", ",", "scale", "=", "binvox_rw", ".", "read_header", "(", "f", ")", "\n", "assert", "len", "(", "set", "(", "dims", ")", ")", "==", "1", ",", "\"Voxel grid assumed to be cube\"", "\n", "#Adjust t for the standard binvox order", "\n", "t", "=", "np", ".", "array", "(", "[", "[", "translate", "[", "0", "]", ",", "translate", "[", "2", "]", ",", "translate", "[", "1", "]", "]", "]", ")", ".", "T", "\n", "\n", "\n", "", "gridPtsWorldNear_h", "=", "np", ".", "vstack", "(", "[", "gridPtsWorldNear", ",", "np", ".", "ones", "(", "[", "1", ",", "gridPtsWorldNear", ".", "shape", "[", "1", "]", "]", ",", "dtype", "=", "gridPtsWorldNear", ".", "dtype", ")", "]", ")", "\n", "try", ":", "\n", "                        ", "T", "=", "np", ".", "linalg", ".", "inv", "(", "np", ".", "reshape", "(", "obj_node", "[", "'transform'", "]", ",", "[", "4", ",", "4", "]", ",", "order", "=", "'F'", ")", ")", "\n", "", "except", "TypeError", "as", "e", ":", "\n", "                        ", "logger", ".", "error", "(", "np", ".", "reshape", "(", "obj_node", "[", "'transform'", "]", ",", "[", "4", ",", "4", "]", ",", "order", "=", "'F'", ")", ")", "\n", "raise", "e", "\n", "", "obj_coords_h", "=", "T", "@", "gridPtsWorldNear_h", "\n", "obj_coords_h", "=", "obj_coords_h", "/", "obj_coords_h", "[", "-", "1", "]", "\n", "obj_coords", "=", "obj_coords_h", "[", ":", "3", "]", "\n", "\n", "#Transform world coordinates to voxel coords", "\n", "side_len", "=", "dims", "[", "0", "]", "\n", "obj_coords", "=", "side_len", "*", "(", "obj_coords", "-", "t", ")", "/", "scale", "\n", "\n", "# If object is a window or door, clear voxels classified as wall in bbox.", "\n", "if", "classRootId", "in", "(", "4", ",", "5", ")", ":", "\n", "                        ", "gridPtsLabel", "[", "wallMask", "&", "objMask", "]", "=", "0", "\n", "\n", "# t = time.time()", "\n", "", "obj_mask", "=", "obj_cache", ".", "query", "(", "obj_coords", ",", "model_id", ",", "(", "np", ".", "sqrt", "(", "3", ")", "/", "2", ")", "*", "side_len", "*", "voxUnit", "/", "scale", ")", "\n", "matched_indices", "=", "objMaskIdx", "[", "obj_mask", "]", "\n", "# print('Simple grid search for', gridPtsWorldNear.shape[1], 'world points:', time.time()-t)", "\n", "\n", "if", "matched_indices", ".", "size", "==", "0", ":", "\n", "                        ", "continue", "\n", "\n", "", "gridPtsLabel", "[", "matched_indices", "]", "=", "classRootId", "\n", "\n", "# if debug_dir and classRoot == 'chair':", "\n", "# rect = np.squeeze(np.array([vert for vert in itertools.product(*zip(obj_bbox_max, obj_bbox_min))]).T)", "\n", "# fig = getFigure()", "\n", "# ax = fig.gca(projection='3d')", "\n", "# ax.plot(rect[0], rect[1], rect[2], '*')", "\n", "# ax.plot(gridPtsWorldNear[0,match_mask], gridPtsWorldNear[1,match_mask], gridPtsWorldNear[2,match_mask], 'g.')", "\n", "# ax.plot(gridPtsWorldNear[0,~match_mask], gridPtsWorldNear[1,~match_mask], gridPtsWorldNear[2,~match_mask], 'r.')", "\n", "# # ax.plot(obj_world_coords[0], obj_world_coords[1], obj_world_coords[2], 'd', zorder=1)", "\n", "# plt.title('Class {}, nbr_matches {}'.format(classRoot, match_mask.sum()))", "\n", "#", "\n", "# anim = FuncAnimation(fig, lambda i: ax.view_init(30, i*30), frames=np.arange(0, 12), interval=2000)", "\n", "# anim.save(osp.join(cam_debug_dir, 'obj_vs_world{}.gif'.format(model_id)), dpi=fig.get_dpi(), writer='imagemagick')", "\n", "# # plt.savefig(osp.join(debug_dir, 'obj_vs_world{}.png'.format(model_id)))", "\n", "# plt.close()", "\n", "#", "\n", "# fig = getFigure()", "\n", "# ax = fig.gca(projection='3d')", "\n", "# vox_x, vox_y, vox_z = np.nonzero(obj_bv.data)", "\n", "# ax.plot(obj_coords[0,match_mask], obj_coords[1,match_mask], obj_coords[2,match_mask], '.b', alpha=0.5)", "\n", "# ax.plot(obj_coords[0,~match_mask], obj_coords[1,~match_mask], obj_coords[2,~match_mask], '.r', alpha=0.5)", "\n", "# ax.plot(vox_x, vox_y, vox_z, '.g', alpha=0.5)", "\n", "# plt.title('Class {}, nbr_matches {}'.format(classRoot, match_mask.sum()))", "\n", "# # plt.savefig(osp.join(cam_debug_dir, 'obj_vs_world_nnsearch{}.png'.format(model_id)))", "\n", "# anim = FuncAnimation(fig, lambda i: ax.view_init(30, i*30), frames=np.arange(0, 12), interval=2000)", "\n", "# anim.save(osp.join(cam_debug_dir, 'obj_vs_world_nnsearch{}.gif'.format(model_id)), dpi=fig.get_dpi(), writer='imagemagick')", "\n", "# plt.close()", "\n", "#", "\n", "# fig = getFigure()", "\n", "# ax = fig.gca(projection='3d')", "\n", "# ax.plot(gridPtsWorldList[0,objMask], gridPtsWorldList[1,objMask], gridPtsWorldList[2,objMask], '.g', alpha=0.5)", "\n", "# ax.plot(gridPtsWorldList[0,~objMask], gridPtsWorldList[1,~objMask], gridPtsWorldList[2,~objMask], '.r', alpha=0.5)", "\n", "# plt.title('Class {}, nbr_matches {}'.format(classRoot, match_mask.sum()))", "\n", "# # plt.savefig(osp.join(cam_debug_dir, 'obj_vs_world_nnsearch{}.png'.format(model_id)))", "\n", "# anim = FuncAnimation(fig, lambda i: ax.view_init(30, i*30), frames=np.arange(0, 12), interval=2000)", "\n", "# anim.save(osp.join(cam_debug_dir, 'obj_vs_world{}.gif'.format(model_id)), dpi=fig.get_dpi(), writer='imagemagick')", "\n", "# plt.close()", "\n", "\n", "# fig = getFigure()", "\n", "# plt.plot(nn_dist, '.-')", "\n", "# plt.title('Class {}, threshold {}'.format(classRoot, obj_bv.scale*np.sqrt(3)/2))", "\n", "# plt.savefig(osp.join(debug_dir, 'obj_vs_world_dist{}.png'.format(model_id)))", "\n", "# plt.close()", "\n", "\n", "# Change coordinate axis (assume Z up) XZY ->  YZX", "\n", "", "", "", "gridPtsLabel3D", "=", "gridPtsLabel", ".", "reshape", "(", "voxSize", ")", "\n", "\n", "if", "debug_dir", ":", "\n", "            ", "plotVoxelsList", "(", "gridPtsLabel", ",", "gridPtsWorldList", ",", "suncg_labels", ",", "save_path", "=", "osp", ".", "join", "(", "debug_dir", ",", "'camera{}.gif'", ".", "format", "(", "camera_idx", ")", ")", ")", "\n", "# plotVoxels(gridPtsLabelYZX, suncg_labels, save_path = osp.join(debug_dir, 'camera{}.gif'.format(camera_idx)))", "\n", "\n", "", "np", ".", "savez_compressed", "(", "osp", ".", "join", "(", "result_dir", ",", "'{:04}.npz'", ".", "format", "(", "camera_idx", ")", ")", ",", "\n", "voxels", "=", "gridPtsLabel3D", ",", "\n", "vox_center", "=", "voxOriginWorld", ",", "\n", "vox_unit", "=", "voxUnit", ",", "\n", "vox_min", "=", "voxWorldMin", ",", "\n", "vox_max", "=", "voxWorldMax", ")", "\n", "\n", "", "logger", ".", "info", "(", "'Done voxelizing {}'", ".", "format", "(", "house_id", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.generate_grids.worker": [[427, 471], ["House3D.objrender.RenderAPI", "os.join", "os.makedirs", "os.makedirs", "os.join", "voxel.NNCache", "os.isfile", "os.isfile", "os.join", "os.join", "os.makedirs", "os.makedirs", "generate_grids.image_folder_is_complete", "generate_grids.voxel_folder_is_complete", "invalid_houses.validate", "id_queue.get_nowait", "open", "csv.reader", "len", "logger.info", "invalid_houses.invalidate", "generate_grids.render_scene_images", "len", "logger.info", "invalid_houses.invalidate", "generate_grids.generate_scene_voxel_grids"], "function", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.generate_grids.image_folder_is_complete", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.generate_grids.voxel_folder_is_complete", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHouses.validate", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHouses.invalidate", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.generate_grids.render_scene_images", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHouses.invalidate", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.generate_grids.generate_scene_voxel_grids"], ["def", "worker", "(", "device", ",", "id_queue", ",", "suncg_dir", ",", "width", ",", "height", ",", "result_dir", ",", "invalid_houses", ")", ":", "\n", "    ", "assert", "osp", ".", "isfile", "(", "cfg", "[", "'modelCategoryFile'", "]", ")", "and", "osp", ".", "isfile", "(", "cfg", "[", "'colorFile'", "]", ")", "\n", "#Try allocating device", "\n", "api", "=", "objrender", ".", "RenderAPI", "(", "width", ",", "height", ",", "device", "=", "device", ")", "\n", "# api.printContextInfo()", "\n", "NN_cache_dir", "=", "osp", ".", "join", "(", "suncg_dir", ",", "'object_vox'", ",", "'object_vox_data'", ",", "'__cache__'", ")", "\n", "os", ".", "makedirs", "(", "NN_cache_dir", ",", "exist_ok", "=", "True", ")", "\n", "model_dir", "=", "osp", ".", "join", "(", "suncg_dir", ",", "'object_vox'", ",", "'object_vox_data'", ")", "\n", "obj_cache", "=", "NNCache", "(", "NN_cache_dir", ",", "model_dir", ")", "\n", "\n", "while", "True", ":", "\n", "# start = time.time()", "\n", "#Check if we have work to do", "\n", "        ", "try", ":", "\n", "            ", "house_id", "=", "id_queue", ".", "get_nowait", "(", ")", "\n", "", "except", "queue", ".", "Empty", ":", "\n", "            ", "return", "\n", "\n", "#Get Cameras", "\n", "", "cam_path", "=", "osp", ".", "join", "(", "suncg_dir", ",", "'camera'", ",", "house_id", ",", "'room_camera.txt'", ")", "\n", "with", "open", "(", "cam_path", ")", "as", "f", ":", "\n", "            ", "csvreader", "=", "csv", ".", "reader", "(", "f", ",", "delimiter", "=", "' '", ",", "quoting", "=", "csv", ".", "QUOTE_NONNUMERIC", ")", "\n", "cameras", "=", "[", "c", "for", "c", "in", "csvreader", "]", "\n", "\n", "#Create result dir", "\n", "", "id_result_dir", "=", "osp", ".", "join", "(", "result_dir", ",", "house_id", ")", "\n", "os", ".", "makedirs", "(", "id_result_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "#If already renderered, skip work", "\n", "if", "image_folder_is_complete", "(", "len", "(", "cameras", ")", ",", "id_result_dir", ")", ":", "\n", "            ", "logger", ".", "info", "(", "'Skipping images for {}'", ".", "format", "(", "house_id", ")", ")", "\n", "", "else", ":", "\n", "            ", "invalid_houses", ".", "invalidate", "(", "house_id", ")", "\n", "render_scene_images", "(", "cameras", ",", "api", ",", "suncg_dir", ",", "house_id", ",", "id_result_dir", ")", "\n", "\n", "", "if", "voxel_folder_is_complete", "(", "len", "(", "cameras", ")", ",", "id_result_dir", ")", ":", "\n", "            ", "logger", ".", "info", "(", "'Skipping voxels for {}'", ".", "format", "(", "house_id", ")", ")", "\n", "", "else", ":", "\n", "            ", "invalid_houses", ".", "invalidate", "(", "house_id", ")", "\n", "generate_scene_voxel_grids", "(", "cameras", ",", "suncg_dir", ",", "house_id", ",", "id_result_dir", ",", "obj_cache", ")", "\n", "\n", "", "invalid_houses", ".", "validate", "(", "house_id", ")", "\n", "#Free memory", "\n", "", "del", "api", "\n", "# logger.debug('Rendering took: {}ms'.format(int(1e3*(time.time() - start))))", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.generate_data_splits.read_cameras": [[15, 21], ["sorted", "multiprocessing.Pool().map", "os.listdir", "os.listdir", "functools.partial", "multiprocessing.Pool"], "function", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.data.suncg_mapping.SUNCGMapping.map"], ["def", "read_cameras", "(", "camera_folder", ")", ":", "\n", "    ", "house_list", "=", "sorted", "(", "os", ".", "listdir", "(", "camera_folder", ")", ")", "\n", "cameras_nested", "=", "mp", ".", "Pool", "(", "processes", "=", "10", ")", ".", "map", "(", "partial", "(", "_read_house_folder", ",", "camera_folder", ")", ",", "house_list", ")", "\n", "#unpack and concatenate", "\n", "cameras", "=", "[", "cam", "for", "house_cams", "in", "cameras_nested", "for", "cam", "in", "house_cams", "]", "\n", "return", "cameras", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.generate_data_splits._read_house_folder": [[22, 34], ["open", "csv.reader", "os.join", "enumerate"], "function", ["None"], ["", "def", "_read_house_folder", "(", "camera_folder", ",", "house_id", ")", ":", "\n", "    ", "with", "open", "(", "osp", ".", "join", "(", "camera_folder", ",", "house_id", ",", "'room_camera.txt'", ")", ")", "as", "f", ":", "\n", "        ", "csvreader", "=", "csv", ".", "reader", "(", "f", ",", "delimiter", "=", "' '", ",", "quoting", "=", "csv", ".", "QUOTE_NONNUMERIC", ")", "\n", "cameras", "=", "[", "\n", "{", "'idx'", ":", "idx", ",", "\n", "'house_id'", ":", "house_id", ",", "\n", "'pos'", ":", "cam", "[", ":", "3", "]", ",", "\n", "'front'", ":", "cam", "[", "4", ":", "7", "]", ",", "\n", "'up'", ":", "cam", "[", "8", ":", "11", "]", "}", "\n", "for", "idx", ",", "cam", "in", "enumerate", "(", "csvreader", ")", "]", "\n", "\n", "", "return", "cameras", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.generate_data_splits.write_dataset": [[35, 41], ["random.sample", "open", "json.dump", "open", "json.dump", "os.join", "os.join"], "function", ["None"], ["", "def", "write_dataset", "(", "result_dir", ",", "name", ",", "dset", ",", "nbr_mini", ")", ":", "\n", "    ", "with", "open", "(", "osp", ".", "join", "(", "result_dir", ",", "'{}.json'", ".", "format", "(", "name", ")", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "dset", ",", "f", ")", "\n", "", "dset_mini", "=", "random", ".", "sample", "(", "dset", ",", "nbr_mini", ")", "\n", "with", "open", "(", "osp", ".", "join", "(", "result_dir", ",", "'{}_mini.json'", ".", "format", "(", "name", ")", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "dset_mini", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.voxel.NNCache.__init__": [[25, 28], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cache_dir", ",", "model_dir", ")", ":", "\n", "        ", "self", ".", "cache_dir", "=", "cache_dir", "\n", "self", ".", "model_dir", "=", "model_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.voxel.NNCache.query": [[29, 46], ["os.join", "open", "pickle.load", "voxel.NNCache._get_NN_mask", "os.join", "sklearn.neighbors.NearestNeighbors().fit", "voxel.NNCache._get_NN_mask", "open", "binvox_rw.read_as_coord_array", "open", "pickle.dump", "sklearn.neighbors.NearestNeighbors"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.voxel.NNCache._get_NN_mask", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.voxel.NNCache._get_NN_mask"], ["", "def", "query", "(", "self", ",", "X", ",", "obj_id", ",", "radius", ")", ":", "\n", "        ", "picke_fname", "=", "osp", ".", "join", "(", "self", ".", "cache_dir", ",", "'{}.pickle'", ".", "format", "(", "obj_id", ")", ")", "\n", "try", ":", "\n", "            ", "with", "open", "(", "picke_fname", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "nbrs", "=", "pickle", ".", "load", "(", "f", ")", "\n", "mask", "=", "self", ".", "_get_NN_mask", "(", "nbrs", ",", "X", ",", "radius", ")", "\n", "", "", "except", "FileNotFoundError", ":", "\n", "            ", "binvox_filename", "=", "osp", ".", "join", "(", "self", ".", "model_dir", ",", "obj_id", ",", "'{}.binvox'", ".", "format", "(", "obj_id", ")", ")", "\n", "with", "open", "(", "binvox_filename", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "obj_bv", "=", "binvox_rw", ".", "read_as_coord_array", "(", "f", ",", "fix_coords", "=", "False", ")", "\n", "", "nbrs", "=", "NearestNeighbors", "(", "n_neighbors", "=", "1", ",", "algorithm", "=", "'ball_tree'", ")", ".", "fit", "(", "obj_bv", ".", "data", ".", "T", ")", "\n", "\n", "with", "open", "(", "picke_fname", ",", "'wb'", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "nbrs", ",", "f", ")", "\n", "", "mask", "=", "self", ".", "_get_NN_mask", "(", "nbrs", ",", "X", ",", "radius", ")", "\n", "\n", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.voxel.NNCache._get_NN_mask": [[47, 51], ["nbrs.kneighbors", "distances.ravel"], "methods", ["None"], ["", "def", "_get_NN_mask", "(", "self", ",", "nbrs", ",", "X", ",", "radius", ")", ":", "\n", "        ", "distances", ",", "indices", "=", "nbrs", ".", "kneighbors", "(", "X", ".", "T", ")", "\n", "matched", "=", "distances", ".", "ravel", "(", ")", "<", "radius", "\n", "return", "matched", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.voxel.VoxelSearch.__init__": [[54, 65], ["math.ceil", "numpy.full", "numpy.zeros", "enumerate", "numpy.unravel_index", "numpy.linalg.norm", "numpy.array", "tuple", "numpy.nonzero"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "voxels", ",", "radius", "=", "1.1", ")", ":", "\n", "        ", "assert", "radius", ">", "1", "\n", "self", ".", "occupied", "=", "voxels", "\n", "cube_side", "=", "math", ".", "ceil", "(", "2", "*", "radius", ")", "\n", "center", "=", "np", ".", "full", "(", "3", ",", "cube_side", "/", "2.0", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "3", "*", "[", "cube_side", "]", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "for", "i", ",", "m", "in", "enumerate", "(", "mask", ".", "flat", ")", ":", "\n", "            ", "multi_index", "=", "np", ".", "unravel_index", "(", "i", ",", "mask", ".", "shape", ")", "\n", "dist", "=", "np", ".", "linalg", ".", "norm", "(", "multi_index", "-", "center", "+", "0.5", ")", "\n", "mask", "[", "multi_index", "]", "=", "(", "dist", "<=", "radius", ")", "\n", "", "self", ".", "directions", "=", "np", ".", "array", "(", "tuple", "(", "np", ".", "nonzero", "(", "mask", ")", ")", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.voxel.VoxelSearch._single_nn": [[67, 98], ["set", "numpy.floor().astype", "tuple", "len", "voxel.VoxelSearch.queue.pop", "numpy.sum", "numpy.any", "numpy.any", "tuple", "numpy.floor", "tuple", "voxel.VoxelSearch.visited_and_queued.add", "voxel.VoxelSearch.queue.append"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHousesMemory.set", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.pr.PR.add"], ["", "def", "_single_nn", "(", "self", ",", "center", ")", ":", "\n", "        ", "self", ".", "center", "=", "center", "\n", "self", ".", "queue", "=", "[", "np", ".", "floor", "(", "center", ")", ".", "astype", "(", "np", ".", "int", ")", "]", "\n", "self", ".", "visited_and_queued", "=", "set", "(", "tuple", "(", "self", ".", "queue", "[", "0", "]", ")", ")", "\n", "\n", "while", "len", "(", "self", ".", "queue", ")", ">", "0", ":", "\n", "            ", "vox_idx", "=", "self", ".", "queue", ".", "pop", "(", ")", "\n", "\n", "#Within radius?", "\n", "# print('dist', (vox_idx + 0.5 - self.center), np.sqrt(np.sum((vox_idx + 0.5 - self.center)**2)))", "\n", "if", "np", ".", "sum", "(", "(", "vox_idx", "+", "0.5", "-", "self", ".", "center", ")", "**", "2", ")", ">", "self", ".", "radius2", ":", "\n", "                ", "continue", "\n", "\n", "#Only use valid index", "\n", "", "if", "np", ".", "any", "(", "vox_idx", "<", "0", ")", "or", "np", ".", "any", "(", "vox_idx", ">=", "self", ".", "occupied", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "continue", "\n", "\n", "#Is this our neighbour?", "\n", "", "if", "self", ".", "occupied", "[", "tuple", "(", "vox_idx", ")", "]", ":", "\n", "                ", "return", "True", "\n", "\n", "# Add neighbouring voxels for exploration", "\n", "", "new_idx", "=", "self", ".", "directions", "+", "vox_idx", "\n", "for", "idx", "in", "new_idx", ":", "\n", "                ", "idx_tuple", "=", "tuple", "(", "idx", ")", "\n", "if", "not", "idx_tuple", "in", "self", ".", "visited_and_queued", ":", "\n", "                    ", "self", ".", "visited_and_queued", ".", "add", "(", "idx_tuple", ")", "\n", "self", ".", "queue", ".", "append", "(", "idx", ")", "\n", "\n", "#Nothing found", "\n", "", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.voxel.VoxelSearch._single_nn_simple": [[99, 104], ["numpy.round().astype", "numpy.any", "numpy.all", "numpy.all", "numpy.round", "tuple"], "methods", ["None"], ["", "def", "_single_nn_simple", "(", "self", ",", "center", ")", ":", "\n", "        ", "center_idx", "=", "np", ".", "round", "(", "center", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "query_idx", "=", "self", ".", "directions", "+", "center_idx", "\n", "valid_mask", "=", "np", ".", "all", "(", "query_idx", ">", "0", ",", "axis", "=", "1", ")", "&", "np", ".", "all", "(", "query_idx", "<", "self", ".", "occupied", ".", "shape", "[", "0", "]", ",", "axis", "=", "1", ")", "\n", "return", "np", ".", "any", "(", "self", ".", "occupied", "[", "tuple", "(", "query_idx", "[", "valid_mask", "]", ".", "T", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.voxel.VoxelSearch.nn_search": [[106, 113], ["numpy.array", "numpy.array", "voxel.VoxelSearch._single_nn", "voxel.VoxelSearch._single_nn_simple"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.voxel.VoxelSearch._single_nn", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.voxel.VoxelSearch._single_nn_simple"], ["", "def", "nn_search", "(", "self", ",", "coords", ",", "radius", "=", "None", ")", ":", "\n", "        ", "assert", "coords", ".", "shape", "[", "1", "]", "==", "3", ",", "\"coords must be Nx3\"", "\n", "if", "radius", ":", "\n", "            ", "self", ".", "radius2", "=", "radius", "**", "2", "\n", "return", "np", ".", "array", "(", "[", "self", ".", "_single_nn", "(", "c", ")", "for", "c", "in", "coords", "]", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "", "else", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "self", ".", "_single_nn_simple", "(", "c", ")", "for", "c", "in", "coords", "]", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.voxel.SUNCGCamera.__init__": [[119, 124], ["numpy.array", "numpy.array", "numpy.array", "voxel.camera2P"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.voxel.camera2P"], ["    ", "def", "__init__", "(", "self", ",", "csvrow", ")", ":", "\n", "        ", "self", ".", "pos", "=", "np", ".", "array", "(", "csvrow", "[", ":", "3", "]", ",", "dtype", "=", "np", ".", "float", ")", "\n", "self", ".", "front", "=", "np", ".", "array", "(", "csvrow", "[", "4", ":", "7", "]", ",", "dtype", "=", "np", ".", "float", ")", "\n", "self", ".", "up", "=", "np", ".", "array", "(", "csvrow", "[", "8", ":", "11", "]", ",", "dtype", "=", "np", ".", "float", ")", "\n", "self", ".", "P", "=", "camera2P", "(", "self", ".", "pos", ",", "self", ".", "up", ",", "self", ".", "front", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.voxel.constructK": [[125, 136], ["numpy.zeros", "numpy.tan"], "function", ["None"], ["", "", "def", "constructK", "(", ")", ":", "\n", "    ", "cam_vertical_fov", "=", "60", "#Degrees", "\n", "im_height", "=", "480", "\n", "im_width", "=", "600", "\n", "focal_l", "=", "im_height", "/", "(", "2", "*", "np", ".", "tan", "(", "(", "cam_vertical_fov", "/", "2", ")", "*", "np", ".", "pi", "/", "180", ")", ")", "\n", "K", "=", "np", ".", "zeros", "(", "[", "3", ",", "3", "]", ")", "\n", "K", "[", "0", ",", "0", "]", "=", "K", "[", "1", ",", "1", "]", "=", "focal_l", "\n", "K", "[", "0", ",", "2", "]", "=", "im_width", "/", "2", "\n", "K", "[", "1", ",", "2", "]", "=", "im_height", "/", "2", "\n", "K", "[", "2", ",", "2", "]", "=", "1", "\n", "return", "K", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.voxel.boxOverlap": [[137, 143], ["range"], "function", ["None"], ["", "def", "boxOverlap", "(", "box1_min", ",", "box1_max", ",", "box2_min", ",", "box2_max", ")", ":", "\n", "    ", "overlap", "=", "True", "\n", "for", "i", "in", "range", "(", "box1_min", ".", "size", ")", ":", "\n", "        ", "overlap", "&=", "(", "box1_min", "[", "i", "]", "<", "box2_max", "[", "i", "]", "and", "\n", "box2_min", "[", "i", "]", "<", "box1_max", "[", "i", "]", ")", "\n", "", "return", "overlap", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.voxel.sameFloor": [[144, 147], ["None"], "function", ["None"], ["", "def", "sameFloor", "(", "voxOriginWorld", ",", "bbox_min", ",", "bbox_max", ")", ":", "\n", "    ", "return", "(", "bbox_min", "[", "1", "]", "<", "voxOriginWorld", "[", "1", "]", "and", "\n", "voxOriginWorld", "[", "1", "]", "<", "bbox_max", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.voxel._plotPoly": [[148, 178], ["matplotlib.figure", "matplotlib.subplot", "matplotlib.plot", "matplotlib.plot", "matplotlib.axis", "matplotlib.subplot", "matplotlib.plot", "matplotlib.axis", "matplotlib.savefig", "matplotlib.close", "iter", "matplotlib.plot", "os.join", "numpy.array", "matplotlib.plot", "list", "numpy.array", "list", "numpy.array", "uuid.uuid4", "list"], "function", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.histogram.HistogramTpFn2D.plot", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.histogram.HistogramTpFn2D.plot", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.histogram.HistogramTpFn2D.plot", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.histogram.HistogramTpFn2D.plot", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.histogram.HistogramTpFn2D.plot"], ["", "def", "_plotPoly", "(", "points", ",", "poly", ",", "s_poly", ",", "debug_dir", ")", ":", "\n", "    ", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "subplot", "(", "2", ",", "1", ",", "1", ")", "\n", "plt", ".", "plot", "(", "poly", "[", ":", ",", "0", "]", ",", "poly", "[", ":", ",", "1", "]", ")", "\n", "plt", ".", "plot", "(", "points", "[", ":", ",", "0", "]", ",", "points", "[", ":", ",", "1", "]", ",", "'.'", ")", "\n", "plt", ".", "axis", "(", "'equal'", ")", "\n", "plt", ".", "subplot", "(", "2", ",", "1", ",", "2", ")", "\n", "plt", ".", "plot", "(", "points", "[", ":", ",", "0", "]", ",", "points", "[", ":", ",", "1", "]", ",", "'.'", ")", "\n", "\n", "try", ":", "\n", "        ", "poly_iter", "=", "iter", "(", "s_poly", ")", "\n", "", "except", "TypeError", ":", "\n", "        ", "poly_iter", "=", "[", "s_poly", "]", "\n", "\n", "", "for", "clean_poly", "in", "poly_iter", ":", "\n", "        ", "try", ":", "\n", "            ", "poly_coords", "=", "np", ".", "array", "(", "list", "(", "clean_poly", ".", "exterior", ".", "coords", ")", ")", "\n", "", "except", "AttributeError", ":", "\n", "            ", "continue", "\n", "", "try", ":", "\n", "            ", "poly_coords2", "=", "[", "np", ".", "array", "(", "list", "(", "c", ".", "coords", ")", ")", "for", "c", "in", "clean_poly", ".", "interiors", "]", "\n", "", "except", "TypeError", ":", "\n", "            ", "poly_coords2", "=", "[", "np", ".", "array", "(", "list", "(", "clean_poly", ".", "interiors", ".", "coords", ")", ")", "]", "\n", "", "plt", ".", "plot", "(", "poly_coords", "[", ":", ",", "0", "]", ",", "poly_coords", "[", ":", ",", "1", "]", ")", "\n", "for", "c", "in", "poly_coords2", ":", "\n", "            ", "plt", ".", "plot", "(", "c", "[", ":", ",", "0", "]", ",", "c", "[", ":", ",", "1", "]", ",", "'--'", ")", "\n", "", "", "plt", ".", "axis", "(", "'equal'", ")", "\n", "import", "uuid", "\n", "plt", ".", "savefig", "(", "osp", ".", "join", "(", "debug_dir", ",", "'Multi{}.png'", ".", "format", "(", "uuid", ".", "uuid4", "(", ")", ".", "hex", ")", ")", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.voxel.inPolygon": [[179, 210], ["numpy.any", "numpy.zeros", "numpy.isnan", "numpy.zeros", "shapely.geometry.Polygon", "s_poly.buffer.buffer", "voxel._plotPoly", "iter", "voxel._inCleanPolygon", "shapely.geometry.MultiPoint", "voxel._inCleanPolygon"], "function", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.voxel._plotPoly", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.voxel._inCleanPolygon", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.voxel._inCleanPolygon"], ["", "def", "inPolygon", "(", "points", ",", "poly", ",", "debug_dir", "=", "None", ",", "convex_hull", "=", "False", ")", ":", "\n", "    ", "assert", "points", ".", "shape", "[", "1", "]", "==", "2", ",", "\"Only handles 2D!\"", "\n", "\n", "#Check that polygon is valid", "\n", "if", "np", ".", "any", "(", "np", ".", "isnan", "(", "poly", ")", ")", ":", "\n", "        ", "return", "np", ".", "zeros", "(", "points", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "\n", "", "if", "convex_hull", ":", "\n", "        ", "s_poly", "=", "MultiPoint", "(", "poly", ")", ".", "convex_hull", "\n", "", "else", ":", "\n", "        ", "s_poly", "=", "Polygon", "(", "poly", ")", "\n", "\n", "", "if", "not", "s_poly", ".", "is_valid", ":", "\n", "# Buffer is used to trim overlapping segments", "\n", "        ", "s_poly", "=", "s_poly", ".", "buffer", "(", "0", ")", "\n", "\n", "", "if", "debug_dir", ":", "\n", "        ", "_plotPoly", "(", "points", ",", "poly", ",", "s_poly", ",", "debug_dir", ")", "\n", "\n", "# Buffer will split into multiPoly if necessary", "\n", "", "try", ":", "\n", "        ", "poly_iterator", "=", "iter", "(", "s_poly", ")", "\n", "", "except", "TypeError", ":", "\n", "        ", "return", "_inCleanPolygon", "(", "points", ",", "s_poly", ")", "\n", "\n", "", "inside", "=", "np", ".", "zeros", "(", "points", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "\n", "for", "clean_poly", "in", "poly_iterator", ":", "\n", "        ", "inside", "|=", "_inCleanPolygon", "(", "points", ",", "clean_poly", ")", "\n", "\n", "", "return", "inside", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.voxel._inCleanPolygon": [[212, 226], ["matplotlib.path.Path", "path.Path.contains_points", "numpy.zeros", "list"], "function", ["None"], ["", "def", "_inCleanPolygon", "(", "points", ",", "s_poly", ")", ":", "\n", "    ", "if", "s_poly", ".", "exterior", "is", "None", ":", "\n", "        ", "return", "np", ".", "zeros", "(", "points", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "\n", "", "bounds", "=", "s_poly", ".", "bounds", "\n", "inside", "=", "(", "(", "bounds", "[", "0", "]", "<", "points", "[", ":", ",", "0", "]", ")", "&", "(", "points", "[", ":", ",", "0", "]", "<", "bounds", "[", "2", "]", ")", "&", "\n", "(", "bounds", "[", "1", "]", "<", "points", "[", ":", ",", "1", "]", ")", "&", "(", "points", "[", ":", ",", "1", "]", "<", "bounds", "[", "3", "]", ")", ")", "\n", "\n", "# The actual polygon check, Change to Shapely if not precise enough.", "\n", "# Though shapely takes a lot more time for computation", "\n", "poly_path", "=", "path", ".", "Path", "(", "list", "(", "s_poly", ".", "exterior", ".", "coords", ")", ")", "\n", "inside", "[", "inside", "]", "=", "poly_path", ".", "contains_points", "(", "points", "[", "inside", "]", ")", "\n", "\n", "return", "inside", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.voxel.camera2P": [[227, 253], ["numpy.cross", "numpy.linalg.norm", "numpy.vstack", "numpy.array().reshape", "numpy.linalg.solve", "R.reshape.reshape", "numpy.hstack", "R.reshape.dot", "numpy.abs", "numpy.linalg.norm", "numpy.linalg.norm", "scipy.linalg.block_diag", "scipy.linalg.block_diag", "scipy.linalg.block_diag", "numpy.array", "t.reshape", "numpy.linalg.det", "R.reshape.T.dot"], "function", ["None"], ["", "def", "camera2P", "(", "pos", ",", "up", ",", "front", ")", ":", "\n", "    ", "right", "=", "np", ".", "cross", "(", "front", ",", "up", ")", "\n", "right", "/=", "np", ".", "linalg", ".", "norm", "(", "right", ")", "\n", "\n", "#Solve for rotation matrix", "\n", "A", "=", "np", ".", "vstack", "(", "[", "\n", "block_diag", "(", "right", ",", "right", ",", "right", ")", ",", "\n", "block_diag", "(", "up", ",", "up", ",", "up", ")", ",", "\n", "block_diag", "(", "front", ",", "front", ",", "front", ")", "\n", "]", ")", "\n", "\n", "b", "=", "np", ".", "array", "(", "[", "\n", "1", ",", "0", ",", "0", ",", "#right ->  x", "\n", "0", ",", "-", "1", ",", "0", ",", "#up    -> -y", "\n", "0", ",", "0", ",", "1", "#front ->  z", "\n", "]", ")", ".", "reshape", "(", "[", "9", ",", "1", "]", ")", "\n", "\n", "R", "=", "np", ".", "linalg", ".", "solve", "(", "A", ",", "b", ")", "\n", "R", "=", "R", ".", "reshape", "(", "3", ",", "3", ")", "\n", "t", "=", "-", "R", ".", "dot", "(", "pos", ")", "\n", "\n", "assert", "np", ".", "abs", "(", "1", "-", "np", ".", "linalg", ".", "det", "(", "R", ")", ")", "<", "1e-3", "\n", "assert", "np", ".", "linalg", ".", "norm", "(", "R", "[", "2", ",", ":", "3", "]", "-", "front", ")", "<", "1e-3", "\n", "assert", "np", ".", "linalg", ".", "norm", "(", "-", "R", ".", "T", ".", "dot", "(", "t", ")", "-", "pos", ")", "<", "1e-3", "\n", "\n", "return", "np", ".", "hstack", "(", "[", "R", ",", "t", ".", "reshape", "(", "[", "3", ",", "1", "]", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.voxel._cuboid_data": [[256, 268], ["numpy.array().astype", "range", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "_cuboid_data", "(", "o", ",", "size", "=", "(", "1", ",", "1", ",", "1", ")", ")", ":", "\n", "    ", "X", "=", "[", "[", "[", "0", ",", "1", ",", "0", "]", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "0", ",", "0", "]", ",", "[", "1", ",", "1", ",", "0", "]", "]", ",", "\n", "[", "[", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", "]", ",", "[", "1", ",", "0", ",", "1", "]", ",", "[", "1", ",", "0", ",", "0", "]", "]", ",", "\n", "[", "[", "1", ",", "0", ",", "1", "]", ",", "[", "1", ",", "0", ",", "0", "]", ",", "[", "1", ",", "1", ",", "0", "]", ",", "[", "1", ",", "1", ",", "1", "]", "]", ",", "\n", "[", "[", "0", ",", "0", ",", "1", "]", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "1", ",", "0", "]", ",", "[", "0", ",", "1", ",", "1", "]", "]", ",", "\n", "[", "[", "0", ",", "1", ",", "0", "]", ",", "[", "0", ",", "1", ",", "1", "]", ",", "[", "1", ",", "1", ",", "1", "]", ",", "[", "1", ",", "1", ",", "0", "]", "]", ",", "\n", "[", "[", "0", ",", "1", ",", "1", "]", ",", "[", "0", ",", "0", ",", "1", "]", ",", "[", "1", ",", "0", ",", "1", "]", ",", "[", "1", ",", "1", ",", "1", "]", "]", "]", "\n", "X", "=", "np", ".", "array", "(", "X", ")", ".", "astype", "(", "float", ")", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "        ", "X", "[", ":", ",", ":", ",", "i", "]", "*=", "size", "[", "i", "]", "\n", "", "X", "+=", "np", ".", "array", "(", "o", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.voxel._plotCubeAt": [[269, 277], ["zip", "mpl_toolkits.mplot3d.art3d.Poly3DCollection", "isinstance", "isinstance", "g.append", "numpy.concatenate", "len", "len", "voxel._cuboid_data", "numpy.repeat"], "function", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.voxel._cuboid_data"], ["", "def", "_plotCubeAt", "(", "positions", ",", "sizes", "=", "None", ",", "colors", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "colors", ",", "(", "list", ",", "np", ".", "ndarray", ")", ")", ":", "colors", "=", "[", "\"C0\"", "]", "*", "len", "(", "positions", ")", "\n", "if", "not", "isinstance", "(", "sizes", ",", "(", "list", ",", "np", ".", "ndarray", ")", ")", ":", "sizes", "=", "[", "(", "1", ",", "1", ",", "1", ")", "]", "*", "len", "(", "positions", ")", "\n", "g", "=", "[", "]", "\n", "for", "p", ",", "s", ",", "c", "in", "zip", "(", "positions", ",", "sizes", ",", "colors", ")", ":", "\n", "        ", "g", ".", "append", "(", "_cuboid_data", "(", "p", ",", "size", "=", "s", ")", ")", "\n", "", "return", "Poly3DCollection", "(", "np", ".", "concatenate", "(", "g", ")", ",", "\n", "facecolors", "=", "np", ".", "repeat", "(", "colors", ",", "6", ",", "axis", "=", "0", ")", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.voxel.plotVoxelsList": [[279, 311], ["utils.getFigure", "utils.getFigure.gca", "fig.gca.set_aspect", "matplotlib.get_cmap", "plt.get_cmap.", "numpy.unique", "matplotlib.legend", "matplotlib.animation.FuncAnimation", "matplotlib.animation.FuncAnimation.save", "matplotlib.close", "numpy.mod", "suncg_labels.getClassRootFromRootID", "legend_entries.append", "fig.gca.scatter", "fig.gca.view_init", "numpy.arange", "utils.getFigure.get_dpi", "suncg_labels.getClassRootFromRootID.lower"], "function", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.voxel.getFigure", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.data.suncg.SUNCGLabels.getClassRootFromRootID"], ["", "def", "plotVoxelsList", "(", "gridLabels", ",", "gridCoords", ",", "suncg_labels", ",", "save_path", "=", "None", ")", ":", "\n", "\n", "    ", "fig", "=", "getFigure", "(", ")", "\n", "ax", "=", "fig", ".", "gca", "(", "projection", "=", "'3d'", ")", "\n", "ax", ".", "set_aspect", "(", "'equal'", ")", "\n", "\n", "cmap", "=", "plt", ".", "get_cmap", "(", "'tab20'", ")", "\n", "occMask", "=", "gridLabels", ">", "0", "\n", "\n", "gridLabelsMasked", "=", "gridLabels", "[", "occMask", "]", "\n", "gridCoordsMasked", "=", "gridCoords", "[", ":", ",", "occMask", "]", "\n", "\n", "colors", "=", "cmap", "(", "np", ".", "mod", "(", "gridLabelsMasked", ",", "20", ")", ")", "\n", "\n", "labels", "=", "np", ".", "unique", "(", "gridLabelsMasked", ")", "\n", "legend_entries", "=", "[", "]", "\n", "\n", "for", "l", "in", "labels", ":", "\n", "        ", "l_mask", "=", "gridLabelsMasked", "==", "l", "\n", "pos", "=", "gridCoordsMasked", "[", ":", ",", "l_mask", "]", "\n", "col", "=", "colors", "[", "l_mask", "]", "\n", "label_name", "=", "suncg_labels", ".", "getClassRootFromRootID", "(", "l", ")", "\n", "\n", "\n", "alpha", "=", "0.1", "if", "label_name", ".", "lower", "(", ")", "in", "(", "'floor'", ",", "'wall'", ",", "'ceiling'", ",", "'window'", ")", "else", "0.8", "\n", "legend_entries", ".", "append", "(", "label_name", ")", "\n", "ax", ".", "scatter", "(", "pos", "[", "0", "]", ",", "pos", "[", "2", "]", ",", "pos", "[", "1", "]", ",", "c", "=", "col", ",", "alpha", "=", "alpha", ",", "edgecolors", "=", "'k'", ")", "\n", "\n", "", "plt", ".", "legend", "(", "legend_entries", ",", "loc", "=", "'upper left'", ")", "\n", "anim", "=", "FuncAnimation", "(", "fig", ",", "lambda", "i", ":", "ax", ".", "view_init", "(", "30", ",", "i", "*", "50", ")", ",", "frames", "=", "np", ".", "arange", "(", "0", ",", "6", ")", ",", "interval", "=", "2000", ")", "\n", "anim", ".", "save", "(", "save_path", ",", "dpi", "=", "fig", ".", "get_dpi", "(", ")", ",", "writer", "=", "'imagemagick'", ")", "\n", "plt", ".", "close", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHousesMemory.__init__": [[15, 18], ["multiprocessing.Lock", "utils.InvalidHousesMemory.set"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHousesMemory.set"], ["    ", "def", "__init__", "(", "self", ",", "houses", "=", "None", ",", "logger", "=", "None", ")", ":", "\n", "        ", "self", ".", "houses", "=", "set", "(", "houses", ")", "if", "houses", "else", "set", "(", ")", "\n", "self", ".", "lock", "=", "mp", ".", "Lock", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHousesMemory.set": [[19, 21], ["utils.InvalidHousesMemory.set"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHousesMemory.set"], ["", "def", "set", "(", "self", ",", "houses", ")", ":", "\n", "        ", "self", ".", "houses", "=", "set", "(", "houses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHousesMemory.get": [[22, 24], ["None"], "methods", ["None"], ["", "def", "get", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "houses", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHousesMemory.invalidate": [[25, 28], ["utils.InvalidHousesMemory.houses.add"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.pr.PR.add"], ["", "def", "invalidate", "(", "self", ",", "house_id", ")", ":", "\n", "        ", "with", "self", ".", "lock", ":", "\n", "            ", "self", ".", "houses", ".", "add", "(", "house_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHousesMemory.validate": [[29, 32], ["utils.InvalidHousesMemory.houses.discard"], "methods", ["None"], ["", "", "def", "validate", "(", "self", ",", "house_id", ")", ":", "\n", "        ", "with", "self", ".", "lock", ":", "\n", "            ", "self", ".", "houses", ".", "discard", "(", "house_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHousesMemory.is_valid": [[33, 35], ["None"], "methods", ["None"], ["", "", "def", "is_valid", "(", "self", ",", "house_id", ")", ":", "\n", "        ", "return", "house_id", "not", "in", "self", ".", "houses", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHouses.__init__": [[38, 45], ["utils.InvalidHousesMemory", "utils.InvalidHouses._read_file"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHouses._read_file"], ["    ", "def", "__init__", "(", "self", ",", "filepath", ",", "logger", "=", "None", ")", ":", "\n", "        ", "self", ".", "houses", "=", "InvalidHousesMemory", "(", ")", "\n", "self", ".", "filepath", "=", "filepath", "\n", "try", ":", "\n", "            ", "self", ".", "_read_file", "(", ")", "\n", "", "except", "(", "FileNotFoundError", ",", "json", ".", "JSONDecodeError", ")", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHouses.get_proxy": [[46, 57], ["utils.RenderManager", "RenderManager.register", "RenderManager.start", "RenderManager.invalidhouses", "utils.InvalidHouses.houses.get"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHousesMemory.get"], ["", "", "def", "get_proxy", "(", "self", ")", ":", "\n", "        ", "'''\n        manager: A Multprocessing manager handling proxy object. mp.Manager\n        '''", "\n", "manager", "=", "RenderManager", "(", ")", "\n", "manager", ".", "register", "(", "'invalidhouses'", ",", "InvalidHousesMemory", ",", "exposed", "=", "[", "'invalidate'", ",", "'validate'", ",", "'get'", "]", ")", "\n", "manager", ".", "start", "(", ")", "\n", "\n", "ih_proxy", "=", "manager", ".", "invalidhouses", "(", "self", ".", "houses", ".", "get", "(", ")", ")", "\n", "self", ".", "houses", "=", "ih_proxy", "\n", "return", "manager", ",", "ih_proxy", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHouses._read_file": [[58, 61], ["open", "utils.InvalidHouses.houses.set", "json.load"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHousesMemory.set"], ["", "def", "_read_file", "(", "self", ")", ":", "\n", "        ", "with", "open", "(", "self", ".", "filepath", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "self", ".", "houses", ".", "set", "(", "json", ".", "load", "(", "f", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHouses._write_file": [[62, 65], ["open", "json.dump", "sorted", "utils.InvalidHouses.houses.get"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHousesMemory.get"], ["", "", "def", "_write_file", "(", "self", ")", ":", "\n", "        ", "with", "open", "(", "self", ".", "filepath", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "sorted", "(", "self", ".", "houses", ".", "get", "(", ")", ")", ",", "f", ",", "indent", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHouses.invalidate": [[66, 68], ["utils.InvalidHouses.houses.invalidate"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHouses.invalidate"], ["", "", "def", "invalidate", "(", "self", ",", "house_id", ")", ":", "\n", "        ", "self", ".", "houses", ".", "invalidate", "(", "house_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHouses.validate": [[69, 71], ["utils.InvalidHouses.houses.validate"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHouses.validate"], ["", "def", "validate", "(", "self", ",", "house_id", ")", ":", "\n", "        ", "self", ".", "houses", ".", "validate", "(", "house_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHouses.is_valid": [[72, 74], ["utils.InvalidHouses.houses.is_valid"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHouses.is_valid"], ["", "def", "is_valid", "(", "self", ",", "house_id", ")", ":", "\n", "        ", "return", "self", ".", "houses", ".", "is_valid", "(", "house_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHouses.store": [[75, 77], ["utils.InvalidHouses._write_file"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHouses._write_file"], ["", "def", "store", "(", "self", ")", ":", "\n", "        ", "self", ".", "_write_file", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.LoggerProcess.__init__": [[87, 95], ["multiprocessing.Process.__init__"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.Cauchy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "logger", ",", "id_queue", ",", "interval", ")", ":", "\n", "        ", "mp", ".", "Process", ".", "__init__", "(", "self", ")", "\n", "self", ".", "id_queue", "=", "id_queue", "\n", "self", ".", "interval", "=", "interval", "\n", "self", ".", "avg_rate", "=", "0", "\n", "self", ".", "alpha", "=", "0.3", "\n", "self", ".", "prev_queue_len", "=", "None", "\n", "self", ".", "logger", "=", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.LoggerProcess.run": [[96, 112], ["utils.LoggerProcess.id_queue.empty", "utils.LoggerProcess.id_queue.qsize", "time.sleep", "int", "utils.LoggerProcess.logger.info", "utils.LoggerProcess.id_queue.qsize", "int", "int"], "methods", ["None"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "while", "not", "self", ".", "id_queue", ".", "empty", "(", ")", ":", "\n", "            ", "if", "self", ".", "prev_queue_len", ":", "\n", "                ", "rate", "=", "(", "self", ".", "prev_queue_len", "-", "self", ".", "id_queue", ".", "qsize", "(", ")", ")", "/", "self", ".", "interval", "\n", "self", ".", "avg_rate", "=", "(", "1", "-", "self", ".", "alpha", ")", "*", "self", ".", "avg_rate", "+", "self", ".", "alpha", "*", "rate", "\n", "\n", "", "queue_len", "=", "self", ".", "id_queue", ".", "qsize", "(", ")", "\n", "avg_rate_min", "=", "self", ".", "avg_rate", "*", "60", "\n", "if", "avg_rate_min", ">", "0", ":", "\n", "                ", "rem_min", "=", "int", "(", "queue_len", "/", "avg_rate_min", ")", "\n", "self", ".", "logger", ".", "info", "(", "'{} House ids remaining. Rate: {} ids/min, Left: {} h, {} min'", ".", "format", "(", "queue_len", ",", "\n", "int", "(", "avg_rate_min", ")", ",", "\n", "int", "(", "rem_min", "/", "60", ")", ",", "\n", "rem_min", "%", "60", ")", ")", "\n", "", "self", ".", "prev_queue_len", "=", "queue_len", "\n", "time", ".", "sleep", "(", "self", ".", "interval", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.StreamToLogger.__init__": [[159, 163], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "logger", ",", "log_level", "=", "logging", ".", "INFO", ")", ":", "\n", "      ", "self", ".", "logger", "=", "logger", "\n", "self", ".", "log_level", "=", "log_level", "\n", "self", ".", "linebuf", "=", "''", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.StreamToLogger.write": [[164, 167], ["buf.rstrip().splitlines", "utils.StreamToLogger.logger.log", "buf.rstrip", "line.rstrip"], "methods", ["None"], ["", "def", "write", "(", "self", ",", "buf", ")", ":", "\n", "      ", "for", "line", "in", "buf", ".", "rstrip", "(", ")", ".", "splitlines", "(", ")", ":", "\n", "         ", "self", ".", "logger", ".", "log", "(", "self", ".", "log_level", ",", "line", ".", "rstrip", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.StreamToLogger.flush": [[168, 170], ["None"], "methods", ["None"], ["", "", "def", "flush", "(", "self", ")", ":", "\n", "       ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.getFigure": [[81, 85], ["numpy.array", "matplotlib.figure"], "function", ["None"], ["", "def", "getFigure", "(", ")", ":", "\n", "    ", "dpi", "=", "200.0", "\n", "resolution", "=", "np", ".", "array", "(", "[", "1920", ",", "1080", "]", ",", "dtype", "=", "np", ".", "float", ")", "\n", "return", "plt", ".", "figure", "(", "figsize", "=", "resolution", "/", "dpi", ",", "dpi", "=", "dpi", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.run_mp_house3d": [[115, 153], ["multiprocessing.Queue", "utils.LoggerProcess", "LoggerProcess.start", "time.sleep", "proc_map.items", "LoggerProcess.terminate", "mp.Queue.put", "multiprocessing.get_logger", "mp.Queue.empty", "proc_map.items", "time.sleep", "worker", "LoggerProcess.terminate", "mp.Process.join", "len", "range", "mp.Process.is_alive", "multiprocessing.Process", "alive_p.append", "mp.Process.start", "time.sleep", "len"], "function", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.generate_grids.worker"], ["", "", "", "def", "run_mp_house3d", "(", "devices", ",", "nbr_proc", ",", "work_list", ",", "worker", ",", "args", ")", ":", "\n", "\n", "    ", "work_queue", "=", "mp", ".", "Queue", "(", ")", "\n", "for", "w", "in", "work_list", ":", "\n", "        ", "work_queue", ".", "put", "(", "w", ")", "\n", "\n", "", "status_proc", "=", "LoggerProcess", "(", "mp", ".", "get_logger", "(", ")", ",", "work_queue", ",", "60", ")", "\n", "status_proc", ".", "start", "(", ")", "\n", "\n", "#No need for MP if one process only", "\n", "if", "nbr_proc", "==", "1", ":", "\n", "        ", "try", ":", "\n", "            ", "worker", "(", "*", "(", "(", "devices", "[", "0", "]", ",", "work_queue", ")", "+", "args", ")", ")", "\n", "", "finally", ":", "\n", "            ", "status_proc", ".", "terminate", "(", ")", "\n", "", "return", "\n", "\n", "", "proc_map", "=", "{", "d", ":", "[", "]", "for", "d", "in", "devices", "}", "\n", "time", ".", "sleep", "(", "0.1", ")", "#Give queue time to write", "\n", "while", "not", "work_queue", ".", "empty", "(", ")", ":", "\n", "        ", "for", "d", ",", "procs", "in", "proc_map", ".", "items", "(", ")", ":", "\n", "# Create new process list", "\n", "            ", "alive_p", "=", "[", "p", "for", "p", "in", "procs", "if", "p", ".", "is_alive", "(", ")", "]", "\n", "# Fill up with missing", "\n", "if", "len", "(", "alive_p", ")", "<", "nbr_proc", ":", "\n", "                ", "for", "new_i", "in", "range", "(", "nbr_proc", "-", "len", "(", "alive_p", ")", ")", ":", "\n", "                        ", "p", "=", "mp", ".", "Process", "(", "target", "=", "worker", ",", "args", "=", "(", "d", ",", "work_queue", ")", "+", "args", ")", "\n", "alive_p", ".", "append", "(", "p", ")", "\n", "p", ".", "start", "(", ")", "\n", "time", ".", "sleep", "(", "0.3", ")", "# Give it some time for GPU allocation", "\n", "", "proc_map", "[", "d", "]", "=", "alive_p", "\n", "", "", "time", ".", "sleep", "(", "1", ")", "\n", "\n", "#Wait for processes to terminate", "\n", "", "for", "d", ",", "procs", "in", "proc_map", ".", "items", "(", ")", ":", "\n", "        ", "for", "p", "in", "procs", ":", "\n", "            ", "p", ".", "join", "(", ")", "\n", "", "", "status_proc", ".", "terminate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.setup_mp_logger": [[172, 187], ["multiprocessing.get_logger", "mp.get_logger.setLevel", "logging.FileHandler", "logging.FileHandler.setFormatter", "mp.get_logger.addHandler", "utils.StreamToLogger", "utils.StreamToLogger", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "mp.get_logger.addHandler", "logging.Formatter", "logging.Formatter"], "function", ["None"], ["", "", "def", "setup_mp_logger", "(", "logfile", "=", "None", ")", ":", "\n", "    ", "logger", "=", "mp", ".", "get_logger", "(", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "if", "logfile", ":", "\n", "        ", "file_h", "=", "logging", ".", "FileHandler", "(", "logfile", ",", "mode", "=", "'w'", ")", "\n", "file_h", ".", "setFormatter", "(", "logging", ".", "Formatter", "(", "'[%(asctime)s][%(levelname)s/%(processName)s] %(message)s'", ")", ")", "\n", "logger", ".", "addHandler", "(", "file_h", ")", "\n", "sys", ".", "stdout", "=", "StreamToLogger", "(", "logger", ",", "logging", ".", "INFO", ")", "\n", "sys", ".", "stderr", "=", "StreamToLogger", "(", "logger", ",", "logging", ".", "ERROR", ")", "\n", "", "else", ":", "\n", "        ", "stream_h", "=", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", "\n", "stream_h", ".", "setFormatter", "(", "logging", ".", "Formatter", "(", "'[%(asctime)s][%(levelname)s/%(processName)s] %(message)s'", ")", ")", "\n", "logger", ".", "addHandler", "(", "stream_h", ")", "\n", "\n", "", "return", "logger", "\n", "", ""]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.utils.metrics.count_parameters": [[7, 9], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["def", "count_parameters", "(", "model", ")", ":", "\n", "    ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.utils.metrics.compute_confusion": [[11, 28], ["pred.view.view", "target.view.view", "torch.zeros", "range", "pred.view.numel", "torch.stack", "torch.ones", "torch.sparse.LongTensor", "torch.sparse.LongTensor.to_dense", "target_chunk.size"], "function", ["None"], ["def", "compute_confusion", "(", "pred", ",", "target", ",", "nbr_classes", ")", ":", "\n", "    ", "pred", "=", "pred", ".", "view", "(", "-", "1", ")", "\n", "target", "=", "target", ".", "view", "(", "-", "1", ")", "\n", "cm", "=", "torch", ".", "zeros", "(", "[", "nbr_classes", ",", "nbr_classes", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "target", ".", "device", ")", "\n", "for", "idx", "in", "range", "(", "0", ",", "pred", ".", "numel", "(", ")", ",", "chunk_size", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "target_chunk", "=", "target", "[", "idx", ":", "(", "idx", "+", "chunk_size", ")", "]", "\n", "pred_chunk", "=", "pred", "[", "idx", ":", "(", "idx", "+", "chunk_size", ")", "]", "\n", "", "except", "IndexError", ":", "\n", "            ", "target_chunk", "=", "target", "[", "idx", ":", "]", "\n", "pred_chunk", "=", "pred", "[", "idx", ":", "]", "\n", "", "i", "=", "torch", ".", "stack", "(", "[", "target_chunk", ",", "pred_chunk", "]", ")", "\n", "v", "=", "torch", ".", "ones", "(", "target_chunk", ".", "size", "(", ")", ",", "device", "=", "target_chunk", ".", "device", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "cm_chunk", "=", "torch", ".", "sparse", ".", "LongTensor", "(", "i", ",", "v", ",", "(", "nbr_classes", ",", "nbr_classes", ")", ")", "\n", "cm", "+=", "cm_chunk", ".", "to_dense", "(", ")", "\n", "\n", "", "return", "cm", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.utils.metrics.plot_confusion": [[29, 81], ["matplotlib.subplots", "ax.imshow", "ax.figure.colorbar", "ax.plot", "ax.set", "matplotlib.setp", "matplotlib.setp", "matplotlib.setp", "fig.tight_layout", "np.divide.astype", "np.divide.sum", "numpy.divide", "numpy.arange", "ax.get_xticklabels", "ax.get_xticklabels", "ax.get_yticklabels", "len", "numpy.arange", "numpy.arange", "numpy.zeros_like"], "function", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.histogram.HistogramTpFn2D.plot", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHousesMemory.set"], ["", "def", "plot_confusion", "(", "cm", ",", "classes", ",", "normalize", "=", "True", ",", "title", "=", "None", ",", "cmap", "=", "plt", ".", "cm", ".", "Blues", ")", ":", "\n", "\n", "    ", "if", "normalize", ":", "\n", "        ", "cm", "=", "cm", ".", "astype", "(", "'float'", ")", "\n", "cm_sum", "=", "cm", ".", "sum", "(", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "cm", "=", "np", ".", "divide", "(", "cm", ",", "cm_sum", ",", "out", "=", "np", ".", "zeros_like", "(", "cm", ")", ",", "where", "=", "(", "cm_sum", "!=", "0", ")", ")", "\n", "vmin", "=", "0", "\n", "vmax", "=", "1.0", "\n", "", "else", ":", "\n", "        ", "vmin", "=", "None", "\n", "vmax", "=", "None", "\n", "\n", "", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "im", "=", "ax", ".", "imshow", "(", "cm", ",", "interpolation", "=", "'nearest'", ",", "cmap", "=", "cmap", ",", "vmin", "=", "vmin", ",", "vmax", "=", "vmax", ")", "\n", "ax", ".", "figure", ".", "colorbar", "(", "im", ",", "ax", "=", "ax", ")", "\n", "\n", "#Mark diagonal", "\n", "ax", ".", "plot", "(", "np", ".", "arange", "(", "len", "(", "classes", ")", ")", ",", "'k.'", ",", "markersize", "=", "2", ")", "\n", "\n", "# We want to show all ticks...", "\n", "ax", ".", "set", "(", "xticks", "=", "np", ".", "arange", "(", "cm", ".", "shape", "[", "1", "]", ")", ",", "\n", "yticks", "=", "np", ".", "arange", "(", "cm", ".", "shape", "[", "0", "]", ")", ",", "\n", "# ... and label them with the respective list entries", "\n", "xticklabels", "=", "classes", ",", "yticklabels", "=", "classes", ",", "\n", "title", "=", "title", ",", "\n", "ylabel", "=", "'True label'", ",", "\n", "xlabel", "=", "'Predicted label'", ")", "\n", "\n", "# Rotate the tick labels and set their alignment.", "\n", "plt", ".", "setp", "(", "ax", ".", "get_xticklabels", "(", ")", ",", "rotation", "=", "45", ",", "ha", "=", "\"right\"", ",", "\n", "rotation_mode", "=", "\"anchor\"", ")", "\n", "\n", "#Reduce font size", "\n", "fontsize", "=", "6", "\n", "plt", ".", "setp", "(", "ax", ".", "get_xticklabels", "(", ")", ",", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "setp", "(", "ax", ".", "get_yticklabels", "(", ")", ",", "fontsize", "=", "fontsize", ")", "\n", "\n", "# Loop over data dimensions and create text annotations.", "\n", "# fmt = '.2f' if normalize else 'd'", "\n", "# thresh = cm.max() / 2.", "\n", "# for i in range(cm.shape[0]):", "\n", "#     for j in range(cm.shape[1]):", "\n", "#         ax.text(j, i, format(cm[i, j], fmt),", "\n", "#                 ha=\"center\", va=\"center\",", "\n", "#                 color=\"white\" if cm[i, j] > thresh else \"black\")", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "\n", "#DEBUG", "\n", "# plt.savefig('confusion.png')", "\n", "# sys.exit()", "\n", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.utils.metrics.compute_IoU": [[82, 87], ["numpy.diag().astype", "numpy.divide", "confusion_matrix.sum", "confusion_matrix.sum", "numpy.diag", "numpy.zeros_like"], "function", ["None"], ["", "def", "compute_IoU", "(", "confusion_matrix", ")", ":", "\n", "    ", "intersection", "=", "np", ".", "diag", "(", "confusion_matrix", ")", ".", "astype", "(", "'float'", ")", "\n", "union", "=", "confusion_matrix", ".", "sum", "(", "axis", "=", "0", ")", "+", "confusion_matrix", ".", "sum", "(", "axis", "=", "1", ")", "\n", "IoU", "=", "np", ".", "divide", "(", "intersection", ",", "union", ",", "out", "=", "np", ".", "zeros_like", "(", "intersection", ")", ",", "where", "=", "(", "union", "!=", "0", ")", ")", "\n", "return", "IoU", "\n", "", ""]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.histogram.HistogramGroup.__init__": [[18, 25], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "metrics", ",", "nbr_bins", "=", "10", ",", "metric_pairs", "=", "[", "]", ",", "make_pdf", "=", "False", ")", ":", "\n", "        ", "self", ".", "metrics", "=", "metrics", "\n", "self", ".", "metric_pairs", "=", "metric_pairs", "\n", "self", ".", "histograms", "=", "{", "}", "\n", "self", ".", "nbr_bins", "=", "nbr_bins", "\n", "self", ".", "make_pdf", "=", "make_pdf", "\n", "self", ".", "histograms_2d", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.histogram.HistogramGroup.add_type": [[26, 35], ["histogram.HistogramGroup.metrics.items", "histogram.HistogramTpFn", "histogram.HistogramTpFn2D"], "methods", ["None"], ["", "def", "add_type", "(", "self", ",", "name", ",", "classes", ")", ":", "\n", "        ", "self", ".", "histograms", "[", "name", "]", "=", "{", "}", "\n", "for", "metric", ",", "limits", "in", "self", ".", "metrics", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "histograms", "[", "name", "]", "[", "metric", "]", "=", "HistogramTpFn", "(", "classes", ",", "limits", ",", "self", ".", "nbr_bins", ")", "\n", "\n", "", "self", ".", "histograms_2d", "[", "name", "]", "=", "{", "}", "\n", "for", "xy_metric", "in", "self", ".", "metric_pairs", ":", "\n", "            ", "limits", "=", "[", "self", ".", "metrics", "[", "m", "]", "for", "m", "in", "xy_metric", "]", "\n", "self", ".", "histograms_2d", "[", "name", "]", "[", "xy_metric", "]", "=", "HistogramTpFn2D", "(", "classes", ",", "limits", ",", "2", "*", "[", "self", ".", "nbr_bins", "]", ",", "metric", "=", "xy_metric", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.histogram.HistogramGroup.add": [[37, 58], ["histogram.HistogramGroup.histograms.items", "histogram.HistogramGroup.histograms_2d.items", "masks_dict.get", "histograms[].add", "set().issubset", "masks_dict.get", "histograms[].add", "metric_dict.keys", "set"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHousesMemory.get", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.pr.PR.add", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHousesMemory.get", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.pr.PR.add", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHousesMemory.set"], ["", "", "def", "add", "(", "self", ",", "pred", ",", "target", ",", "metric_dict", ",", "masks_dict", "=", "{", "}", ")", ":", "\n", "        ", "'''\n        Assumes that metric_dict shares keys with self.metrics\n        Assumes that masks_dict shares keys with self.histograms\n        '''", "\n", "for", "metric", "in", "self", ".", "metrics", ":", "\n", "            ", "if", "metric", "not", "in", "metric_dict", ":", "\n", "                ", "continue", "\n", "", "values", "=", "metric_dict", "[", "metric", "]", "\n", "for", "type", ",", "histograms", "in", "self", ".", "histograms", ".", "items", "(", ")", ":", "\n", "                ", "mask", "=", "masks_dict", ".", "get", "(", "type", ",", "None", ")", "\n", "histograms", "[", "metric", "]", ".", "add", "(", "pred", ",", "target", ",", "values", ",", "mask", ")", "\n", "\n", "", "", "for", "xy_metric", "in", "self", ".", "metric_pairs", ":", "\n", "            ", "if", "not", "set", "(", "xy_metric", ")", ".", "issubset", "(", "metric_dict", ".", "keys", "(", ")", ")", ":", "\n", "                ", "continue", "\n", "", "x_values", "=", "metric_dict", "[", "xy_metric", "[", "0", "]", "]", "\n", "y_values", "=", "metric_dict", "[", "xy_metric", "[", "1", "]", "]", "\n", "for", "type", ",", "histograms", "in", "self", ".", "histograms_2d", ".", "items", "(", ")", ":", "\n", "                ", "mask", "=", "masks_dict", ".", "get", "(", "type", ",", "None", ")", "\n", "histograms", "[", "xy_metric", "]", ".", "add", "(", "pred", ",", "target", ",", "x_values", ",", "y_values", ",", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.histogram.HistogramGroup.reset": [[59, 66], ["histogram.HistogramGroup.histograms.items", "histogram.HistogramGroup.histograms_2d.items", "histograms.items", "histograms.items", "hist.reset", "hist.reset"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.pr.PR.reset", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.pr.PR.reset"], ["", "", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "for", "type", ",", "histograms", "in", "self", ".", "histograms", ".", "items", "(", ")", ":", "\n", "            ", "for", "metric", ",", "hist", "in", "histograms", ".", "items", "(", ")", ":", "\n", "                ", "hist", ".", "reset", "(", ")", "\n", "", "", "for", "type", ",", "histograms", "in", "self", ".", "histograms_2d", ".", "items", "(", ")", ":", "\n", "            ", "for", "xy_metric", ",", "hist", "in", "histograms", ".", "items", "(", ")", ":", "\n", "                ", "hist", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.histogram.HistogramGroup.plot_tb": [[67, 83], ["histogram.HistogramGroup.histograms.items", "histogram.HistogramGroup.histograms_2d.items", "histograms.items", "histograms.items", "hist.plot", "tblogger.add_figure", "hist.plot", "tblogger.add_figure", "hist.plot.savefig", "hist.plot.savefig", "os.join", "os.join"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.histogram.HistogramTpFn2D.plot", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.histogram.HistogramTpFn2D.plot"], ["", "", "", "def", "plot_tb", "(", "self", ",", "tblogger", ",", "epoch", ")", ":", "\n", "        ", "for", "type", ",", "histograms", "in", "self", ".", "histograms", ".", "items", "(", ")", ":", "\n", "            ", "for", "metric", ",", "hist", "in", "histograms", ".", "items", "(", ")", ":", "\n", "                ", "hist_fig", "=", "hist", ".", "plot", "(", ")", "\n", "if", "self", ".", "make_pdf", ":", "\n", "                    ", "fname", "=", "'hist_{}_{}_e{:03d}'", ".", "format", "(", "metric", ",", "type", ",", "epoch", ")", "\n", "hist_fig", ".", "savefig", "(", "osp", ".", "join", "(", "tblogger", ".", "log_dir", ",", "fname", ")", ")", "\n", "", "tblogger", ".", "add_figure", "(", "'hist_{}_{}'", ".", "format", "(", "metric", ",", "type", ")", ",", "hist_fig", ",", "global_step", "=", "epoch", ",", "close", "=", "True", ")", "\n", "\n", "", "", "for", "type", ",", "histograms", "in", "self", ".", "histograms_2d", ".", "items", "(", ")", ":", "\n", "            ", "for", "xy_metric", ",", "hist", "in", "histograms", ".", "items", "(", ")", ":", "\n", "                ", "hist_fig", "=", "hist", ".", "plot", "(", ")", "\n", "if", "self", ".", "make_pdf", ":", "\n", "                    ", "fname", "=", "'hist_{}_{}_{}_e{:03d}'", ".", "format", "(", "*", "xy_metric", ",", "type", ",", "epoch", ")", "\n", "hist_fig", ".", "savefig", "(", "osp", ".", "join", "(", "tblogger", ".", "log_dir", ",", "fname", ")", ")", "\n", "", "tblogger", ".", "add_figure", "(", "'hist_{}_{}_{}'", ".", "format", "(", "*", "xy_metric", ",", "type", ")", ",", "hist_fig", ",", "global_step", "=", "epoch", ",", "close", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.histogram.HistogramGroup.get_classes": [[85, 88], ["histogram.HistogramGroup.histograms[].items"], "methods", ["None"], ["", "", "", "def", "get_classes", "(", "self", ",", "type", ")", ":", "\n", "        ", "for", "_", ",", "hist", "in", "self", ".", "histograms", "[", "type", "]", ".", "items", "(", ")", ":", "\n", "            ", "return", "hist", ".", "classes", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.histogram.HistogramGroup.plot_bhattacharyya_tb": [[89, 100], ["histogram.HistogramGroup.histograms.items", "histogram.HistogramGroup.histograms_2d.items", "histograms.items", "histograms.items", "hist.bhattacharyya_coef", "tblogger.add_scalar", "hist.bhattacharyya_coef", "tblogger.add_scalar"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.histogram.HistogramTpFn.bhattacharyya_coef", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.histogram.HistogramTpFn.bhattacharyya_coef"], ["", "", "def", "plot_bhattacharyya_tb", "(", "self", ",", "tblogger", ",", "epoch", ")", ":", "\n", "# Calculate for first type of histogram, will be the same for all types", "\n", "        ", "for", "type", ",", "histograms", "in", "self", ".", "histograms", ".", "items", "(", ")", ":", "\n", "            ", "for", "metric", ",", "hist", "in", "histograms", ".", "items", "(", ")", ":", "\n", "                ", "bh_coef", "=", "hist", ".", "bhattacharyya_coef", "(", ")", "\n", "tblogger", ".", "add_scalar", "(", "'bhattacharyya_{}_{}'", ".", "format", "(", "metric", ",", "type", ")", ",", "bh_coef", ",", "global_step", "=", "epoch", ")", "\n", "\n", "", "", "for", "type", ",", "histograms", "in", "self", ".", "histograms_2d", ".", "items", "(", ")", ":", "\n", "            ", "for", "xy_metric", ",", "hist", "in", "histograms", ".", "items", "(", ")", ":", "\n", "                ", "bh_coef", "=", "hist", ".", "bhattacharyya_coef", "(", ")", "\n", "tblogger", ".", "add_scalar", "(", "'bhattacharyya_{}_{}_{}'", ".", "format", "(", "*", "xy_metric", ",", "type", ")", ",", "bh_coef", ",", "global_step", "=", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.histogram.HistogramTpFn.__init__": [[108, 119], ["range", "len", "numpy.linspace", "numpy.zeros"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "classes", "=", "range", "(", "10", ")", ",", "limits", "=", "[", "0", ",", "1", "]", ",", "nbr_bins", "=", "10", ")", ":", "\n", "        ", "self", ".", "nbr_bins", "=", "nbr_bins", "\n", "self", ".", "limits", "=", "limits", "\n", "self", ".", "classes", "=", "classes", "\n", "self", ".", "nbr_classes", "=", "len", "(", "classes", ")", "\n", "bin_edges", "=", "np", ".", "linspace", "(", "limits", "[", "0", "]", ",", "limits", "[", "1", "]", ",", "nbr_bins", "+", "1", ")", "\n", "self", ".", "left_edges", "=", "bin_edges", "[", ":", "-", "1", "]", "\n", "self", ".", "bin_width", "=", "bin_edges", "[", "1", "]", "-", "bin_edges", "[", "0", "]", "\n", "self", ".", "histograms", "=", "{", "}", "\n", "for", "l", "in", "[", "'tp'", ",", "'fn'", "]", ":", "\n", "            ", "self", ".", "histograms", "[", "l", "]", "=", "np", ".", "zeros", "(", "[", "self", ".", "nbr_classes", ",", "nbr_bins", "]", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.histogram.HistogramTpFn.add": [[120, 132], ["zip", "range", "mask.any", "torch.histc", "torch.histc.to().type().numpy", "torch.histc.to().type", "torch.histc.to"], "methods", ["None"], ["", "", "def", "add", "(", "self", ",", "pred", ",", "target", ",", "metric", ",", "class_masks", "=", "None", ")", ":", "\n", "        ", "'''\n        class_masks = [Batch x Masks x DataDim]\n        '''", "\n", "tp", "=", "(", "pred", "==", "target", ")", "\n", "for", "pl", ",", "p_mask", "in", "zip", "(", "[", "'tp'", ",", "'fn'", "]", ",", "[", "tp", ",", "~", "tp", "]", ")", ":", "\n", "            ", "for", "cl", "in", "range", "(", "self", ".", "nbr_classes", ")", ":", "\n", "                ", "class_mask", "=", "(", "target", "==", "cl", ")", "if", "class_masks", "is", "None", "else", "class_masks", "[", ":", ",", "cl", "]", "\n", "mask", "=", "p_mask", "&", "class_mask", "\n", "if", "mask", ".", "any", "(", ")", ":", "\n", "                    ", "hist", "=", "torch", ".", "histc", "(", "metric", "[", "mask", "]", ",", "self", ".", "nbr_bins", ",", "*", "self", ".", "limits", ")", "\n", "self", ".", "histograms", "[", "pl", "]", "[", "cl", "]", "+=", "hist", ".", "to", "(", "'cpu'", ")", ".", "type", "(", "torch", ".", "int64", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.histogram.HistogramTpFn.reset": [[133, 137], ["range", "[].fill"], "methods", ["None"], ["", "", "", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "for", "l", "in", "[", "'tp'", ",", "'fn'", "]", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "nbr_classes", ")", ":", "\n", "                ", "self", ".", "histograms", "[", "l", "]", "[", "i", "]", ".", "fill", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.histogram.HistogramTpFn.plot": [[138, 153], ["matplotlib.figure", "numpy.ceil", "numpy.ceil", "enumerate", "matplotlib.legend", "matplotlib.tight_layout", "numpy.sqrt", "matplotlib.subplot", "matplotlib.title", "matplotlib.bar", "matplotlib.bar"], "methods", ["None"], ["", "", "", "def", "plot", "(", "self", ")", ":", "\n", "        ", "fg", "=", "plt", ".", "figure", "(", ")", "\n", "nbr_rows", "=", "np", ".", "ceil", "(", "np", ".", "sqrt", "(", "10.0", "*", "self", ".", "nbr_classes", "/", "16.0", ")", ")", "\n", "nbr_cols", "=", "np", ".", "ceil", "(", "self", ".", "nbr_classes", "/", "nbr_rows", ")", "\n", "for", "ci", ",", "cl", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "            ", "plt", ".", "subplot", "(", "nbr_rows", ",", "nbr_cols", ",", "ci", "+", "1", ")", "\n", "plt", ".", "title", "(", "cl", ")", "\n", "plt", ".", "bar", "(", "self", ".", "left_edges", ",", "self", ".", "histograms", "[", "'tp'", "]", "[", "ci", "]", ",", "self", ".", "bin_width", ",", "\n", "align", "=", "'edge'", ")", "\n", "plt", ".", "bar", "(", "self", ".", "left_edges", ",", "self", ".", "histograms", "[", "'fn'", "]", "[", "ci", "]", ",", "self", ".", "bin_width", ",", "\n", "bottom", "=", "self", ".", "histograms", "[", "'tp'", "]", "[", "ci", "]", ",", "align", "=", "'edge'", ")", "\n", "", "plt", ".", "legend", "(", "[", "'tp'", ",", "'fn'", "]", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "\n", "return", "fg", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.histogram.HistogramTpFn.bhattacharyya_coef": [[154, 166], ["numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sqrt"], "methods", ["None"], ["", "def", "bhattacharyya_coef", "(", "self", ")", ":", "\n", "        ", "'''\n        Measure distance between the TP and FN distributions.\n        Normalize with total count.\n        Compute joint coef for all classes.\n        '''", "\n", "tp_count", "=", "np", ".", "sum", "(", "self", ".", "histograms", "[", "'tp'", "]", ",", "axis", "=", "0", ")", "\n", "fn_count", "=", "np", ".", "sum", "(", "self", ".", "histograms", "[", "'fn'", "]", ",", "axis", "=", "0", ")", "\n", "count", "=", "np", ".", "sum", "(", "tp_count", ")", "+", "np", ".", "sum", "(", "fn_count", ")", "\n", "\n", "bhattacharyya", "=", "np", ".", "sum", "(", "np", ".", "sqrt", "(", "tp_count", "*", "fn_count", ")", ")", "/", "count", "if", "count", ">", "0", "else", "np", ".", "NaN", "\n", "return", "bhattacharyya", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.histogram.HistogramTpFn2D.__init__": [[169, 179], ["range", "len", "numpy.linspace", "numpy.zeros", "zip"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "classes", "=", "range", "(", "10", ")", ",", "limits", "=", "(", "[", "0", ",", "1", "]", ",", "[", "0", ",", "1", "]", ")", ",", "nbr_bins", "=", "(", "10", ",", "10", ")", ",", "metric", "=", "[", "None", ",", "None", "]", ")", ":", "\n", "        ", "self", ".", "metric", "=", "metric", "\n", "self", ".", "nbr_bins", "=", "nbr_bins", "\n", "self", ".", "limits", "=", "limits", "\n", "self", ".", "classes", "=", "classes", "\n", "self", ".", "nbr_classes", "=", "len", "(", "classes", ")", "\n", "self", ".", "bin_edges", "=", "[", "np", ".", "linspace", "(", "l", "[", "0", "]", ",", "l", "[", "1", "]", ",", "nb", "+", "1", ")", "for", "l", ",", "nb", "in", "zip", "(", "limits", ",", "nbr_bins", ")", "]", "\n", "self", ".", "histograms", "=", "{", "}", "\n", "for", "l", "in", "[", "'tp'", ",", "'fn'", "]", ":", "\n", "            ", "self", ".", "histograms", "[", "l", "]", "=", "np", ".", "zeros", "(", "[", "self", ".", "nbr_classes", ",", "*", "nbr_bins", "]", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.histogram.HistogramTpFn2D.add": [[180, 192], ["zip", "range", "mask.any", "numpy.histogram2d", "hist.astype", "metric1[].to().numpy", "metric2[].to().numpy", "metric1[].to", "metric2[].to"], "methods", ["None"], ["", "", "def", "add", "(", "self", ",", "pred", ",", "target", ",", "metric1", ",", "metric2", ",", "class_masks", "=", "None", ")", ":", "\n", "        ", "'''\n        class_masks = [Batch x Masks x DataDim]\n        '''", "\n", "tp", "=", "(", "pred", "==", "target", ")", "\n", "for", "pl", ",", "p_mask", "in", "zip", "(", "[", "'tp'", ",", "'fn'", "]", ",", "[", "tp", ",", "~", "tp", "]", ")", ":", "\n", "            ", "for", "cl", "in", "range", "(", "self", ".", "nbr_classes", ")", ":", "\n", "                ", "class_mask", "=", "(", "target", "==", "cl", ")", "if", "class_masks", "is", "None", "else", "class_masks", "[", ":", ",", "cl", "]", "\n", "mask", "=", "p_mask", "&", "class_mask", "\n", "if", "mask", ".", "any", "(", ")", ":", "\n", "                    ", "hist", ",", "_", ",", "_", "=", "np", ".", "histogram2d", "(", "metric1", "[", "mask", "]", ".", "to", "(", "'cpu'", ")", ".", "numpy", "(", ")", ",", "metric2", "[", "mask", "]", ".", "to", "(", "'cpu'", ")", ".", "numpy", "(", ")", ",", "self", ".", "nbr_bins", ",", "range", "=", "self", ".", "limits", ")", "\n", "self", ".", "histograms", "[", "pl", "]", "[", "cl", "]", "+=", "hist", ".", "astype", "(", "np", ".", "int64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.histogram.HistogramTpFn2D.plot": [[193, 222], ["matplotlib.figure", "matplotlib.figure.suptitle", "numpy.ceil", "numpy.ceil", "enumerate", "matplotlib.tight_layout", "numpy.sqrt", "matplotlib.subplot", "matplotlib.title", "numpy.meshgrid", "matplotlib.subplot.pcolormesh", "numpy.meshgrid", "matplotlib.subplot.scatter", "numpy.errstate", "X_center.ravel", "Y_center.ravel", "matplotlib.ylabel", "matplotlib.xlabel", "recall.ravel"], "methods", ["None"], ["", "", "", "", "def", "plot", "(", "self", ")", ":", "\n", "        ", "fg", "=", "plt", ".", "figure", "(", ")", "\n", "# fg.suptitle('Recall [tp/(tp + fn)]')", "\n", "fg", ".", "suptitle", "(", "'Square: #Total, Circle: Recall'", ")", "\n", "nbr_rows", "=", "np", ".", "ceil", "(", "np", ".", "sqrt", "(", "10.0", "*", "self", ".", "nbr_classes", "/", "16.0", ")", ")", "\n", "nbr_cols", "=", "np", ".", "ceil", "(", "self", ".", "nbr_classes", "/", "nbr_rows", ")", "\n", "for", "ci", ",", "cl", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "            ", "ax", "=", "plt", ".", "subplot", "(", "nbr_rows", ",", "nbr_cols", ",", "ci", "+", "1", ")", "\n", "plt", ".", "title", "(", "cl", ")", "\n", "X", ",", "Y", "=", "np", ".", "meshgrid", "(", "*", "self", ".", "bin_edges", ")", "\n", "tp", "=", "self", ".", "histograms", "[", "'tp'", "]", "[", "ci", "]", ".", "T", "\n", "fn", "=", "self", ".", "histograms", "[", "'fn'", "]", "[", "ci", "]", ".", "T", "\n", "with", "np", ".", "errstate", "(", "invalid", "=", "'ignore'", ")", ":", "\n", "                ", "recall", "=", "tp", "/", "(", "tp", "+", "fn", ")", "\n", "# max_count = np.amax(tp+fn)", "\n", "# with np.errstate(invalid='ignore'):", "\n", "#     ax.pcolormesh(X, Y, np.transpose(tp / (tp + fn)))", "\n", "", "ax", ".", "pcolormesh", "(", "X", ",", "Y", ",", "tp", "+", "fn", ",", "vmin", "=", "0", ")", "\n", "bin_centers", "=", "[", "(", "be", "[", "1", ":", "]", "+", "be", "[", ":", "-", "1", "]", ")", "/", "2", "for", "be", "in", "self", ".", "bin_edges", "]", "\n", "X_center", ",", "Y_center", "=", "np", ".", "meshgrid", "(", "*", "bin_centers", ")", "\n", "ax", ".", "scatter", "(", "X_center", ".", "ravel", "(", ")", ",", "Y_center", ".", "ravel", "(", ")", ",", "c", "=", "recall", ".", "ravel", "(", ")", ",", "vmin", "=", "0", ",", "vmax", "=", "1.0", ",", "s", "=", "9", ")", "\n", "if", "self", ".", "metric", "[", "1", "]", "and", "ci", "%", "nbr_cols", "==", "0", ":", "\n", "                ", "plt", ".", "ylabel", "(", "self", ".", "metric", "[", "1", "]", ")", "\n", "", "if", "self", ".", "metric", "[", "0", "]", "and", "ci", ">=", "self", ".", "nbr_classes", "-", "nbr_cols", ":", "\n", "                ", "plt", ".", "xlabel", "(", "self", ".", "metric", "[", "0", "]", ")", "\n", "\n", "", "", "plt", ".", "tight_layout", "(", "rect", "=", "[", "0", ",", "0.03", ",", "1", ",", "0.95", "]", ")", "\n", "\n", "return", "fg", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.histogram.getFigure": [[7, 11], ["numpy.array", "matplotlib.figure"], "function", ["None"], ["def", "getFigure", "(", "resolution", "=", "[", "800", ",", "600", "]", ")", ":", "\n", "    ", "dpi", "=", "200.0", "\n", "resolution", "=", "np", ".", "array", "(", "resolution", ",", "dtype", "=", "np", ".", "float", ")", "\n", "return", "plt", ".", "figure", "(", "figsize", "=", "resolution", "/", "dpi", ",", "dpi", "=", "dpi", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.weight.plot_sample_net": [[6, 44], ["conv_mod.weight.data.to().numpy().squeeze", "len", "matplotlib.figure", "enumerate", "conv_mod.bias.data.to().numpy().squeeze", "matplotlib.figure", "matplotlib.bar", "weights.reshape.reshape", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.title", "matplotlib.colorbar", "conv_mod.weight.data.to().numpy", "numpy.append", "range", "conv_mod.bias.data.to().numpy", "conv_mod.weight.data.to", "conv_mod.bias.data.to"], "function", ["None"], ["def", "plot_sample_net", "(", "mod_name", ",", "conv_mod", ",", "net", ")", ":", "\n", "    ", "weights", "=", "conv_mod", ".", "weight", ".", "data", ".", "to", "(", "'cpu'", ")", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", "\n", "if", "conv_mod", ".", "bias", ":", "\n", "        ", "bias", "=", "conv_mod", ".", "bias", ".", "data", ".", "to", "(", "'cpu'", ")", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", "\n", "nbr_bias", "=", "bias", ".", "size", "\n", "", "else", ":", "\n", "        ", "nbr_bias", "=", "0", "\n", "", "metrics", "=", "net", ".", "metrics", "\n", "nbr_metrics", "=", "len", "(", "metrics", ")", "\n", "nbr_classes", "=", "weights", ".", "shape", "[", "0", "]", "\n", "\n", "if", "nbr_metrics", "==", "weights", ".", "size", ":", "\n", "        ", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "if", "nbr_bias", ">", "0", ":", "\n", "            ", "nbr_bars", "=", "nbr_metrics", "+", "nbr_bias", "\n", "bar_data", "=", "np", ".", "append", "(", "weights", ",", "bias", ")", "\n", "bar_labels", "=", "metrics", "+", "[", "'bias'", "]", "\n", "", "else", ":", "\n", "            ", "nbr_bars", "=", "nbr_metrics", "\n", "bar_data", "=", "weights", "\n", "bar_labels", "=", "metrics", "\n", "", "plt", ".", "bar", "(", "range", "(", "nbr_bars", ")", ",", "bar_data", ",", "tick_label", "=", "bar_labels", ")", "\n", "return", "fig", "\n", "\n", "\n", "", "try", ":", "\n", "        ", "weights", "=", "weights", ".", "reshape", "(", "[", "nbr_classes", ",", "nbr_metrics", ",", "nbr_classes", "]", ")", "\n", "", "except", "ValueError", ":", "\n", "        ", "return", "None", "\n", "\n", "", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "for", "i", ",", "m", "in", "enumerate", "(", "metrics", ")", ":", "\n", "        ", "plt", ".", "subplot", "(", "1", ",", "nbr_metrics", ",", "i", "+", "1", ")", "\n", "plt", ".", "imshow", "(", "weights", "[", ":", ",", "i", ",", ":", "]", ")", "\n", "plt", ".", "title", "(", "m", ")", "\n", "plt", ".", "colorbar", "(", ")", "\n", "\n", "", "return", "fig", "\n", "", ""]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.pr.PRGroup.__init__": [[25, 33], ["len", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "metrics", ",", "limits", "=", "[", "]", ",", "step_size", "=", "[", "]", ",", "direct_prop", "=", "[", "]", ",", "device", "=", "'cpu'", ",", "make_pdf", "=", "False", ")", ":", "\n", "        ", "self", ".", "metrics", "=", "metrics", "\n", "self", ".", "limits", "=", "limits", "if", "limits", "else", "len", "(", "metrics", ")", "*", "[", "0.05", ",", "0.95", "]", "\n", "self", ".", "step_size", "=", "step_size", "if", "step_size", "else", "len", "(", "metrics", ")", "*", "[", "0.05", "]", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "direct_prop", "=", "direct_prop", "\n", "self", ".", "make_pdf", "=", "make_pdf", "\n", "self", ".", "pr", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.pr.PRGroup.add_type": [[34, 38], ["zip", "pr.PR"], "methods", ["None"], ["", "def", "add_type", "(", "self", ",", "name", ",", "classes", ",", "mask_classes", "=", "None", ")", ":", "\n", "        ", "self", ".", "pr", "[", "name", "]", "=", "{", "}", "\n", "for", "metric", ",", "limits", ",", "step_size", ",", "direct_prop", "in", "zip", "(", "self", ".", "metrics", ",", "self", ".", "limits", ",", "self", ".", "step_size", ",", "self", ".", "direct_prop", ")", ":", "\n", "            ", "self", ".", "pr", "[", "name", "]", "[", "metric", "]", "=", "PR", "(", "classes", ",", "limits", ",", "step_size", ",", "mask_classes", "=", "mask_classes", ",", "direct_prop", "=", "direct_prop", ",", "device", "=", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.pr.PRGroup.add": [[39, 51], ["pr.PRGroup.pr.items", "masks_dict.get", "pr[].add"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHousesMemory.get", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.pr.PR.add"], ["", "", "def", "add", "(", "self", ",", "pred", ",", "target", ",", "metric_dict", ",", "masks_dict", "=", "{", "}", ")", ":", "\n", "        ", "'''\n        Assumes that metric_dict shares keys with self.metrics\n        Assumes that masks_dict shares keys with self.pr\n        '''", "\n", "for", "metric", "in", "self", ".", "metrics", ":", "\n", "            ", "if", "metric", "not", "in", "metric_dict", ":", "\n", "                ", "continue", "\n", "", "values", "=", "metric_dict", "[", "metric", "]", "\n", "for", "type", ",", "pr", "in", "self", ".", "pr", ".", "items", "(", ")", ":", "\n", "                ", "mask", "=", "masks_dict", ".", "get", "(", "type", ",", "None", ")", "\n", "pr", "[", "metric", "]", ".", "add", "(", "pred", ",", "target", ",", "values", ",", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.pr.PRGroup.reset": [[52, 56], ["pr.PRGroup.pr.items", "pr_type.items", "pr.reset"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.pr.PR.reset"], ["", "", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "for", "type", ",", "pr_type", "in", "self", ".", "pr", ".", "items", "(", ")", ":", "\n", "            ", "for", "metric", ",", "pr", "in", "pr_type", ".", "items", "(", ")", ":", "\n", "                ", "pr", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.pr.PRGroup._tb_table": [[57, 74], ["pr.PRGroup.pr.items", "tblogger.add_text", "pr_type.items", "numpy.any", "enumerate"], "methods", ["None"], ["", "", "", "def", "_tb_table", "(", "self", ",", "tblogger", ",", "epoch", ")", ":", "\n", "        ", "h_sem_classes", "=", "None", "\n", "table", "=", "''", "\n", "for", "type", ",", "pr_type", "in", "self", ".", "pr", ".", "items", "(", ")", ":", "\n", "            ", "for", "metric", ",", "pr", "in", "pr_type", ".", "items", "(", ")", ":", "\n", "#Check if new header is needed", "\n", "                ", "if", "np", ".", "any", "(", "pr", ".", "sem_classes", "!=", "h_sem_classes", ")", ":", "\n", "                    ", "table", "+=", "'|Type|Mask|Metric|mAP|wmAP|AP:|'", "+", "'|'", ".", "join", "(", "pr", ".", "sem_classes", ")", "+", "'|\\n'", "\n", "table", "+=", "'|'", "+", "'---|'", "*", "(", "6", "+", "pr", ".", "nbr_sem_classes", ")", "+", "'\\n'", "\n", "h_sem_classes", "=", "pr", ".", "sem_classes", "\n", "", "for", "mci", ",", "mc", "in", "enumerate", "(", "pr", ".", "mask_classes", ")", ":", "\n", "                    ", "table", "+=", "'|{}|{}|{}|{:.2f}|{:.2f}| |'", ".", "format", "(", "type", ",", "mc", ",", "metric", ",", "pr", ".", "PR", "[", "'mAP'", "]", "[", "mci", "]", ",", "pr", ".", "PR", "[", "'wmAP'", "]", "[", "mci", "]", ")", "\n", "for", "ap", "in", "pr", ".", "PR", "[", "'AP'", "]", "[", "mci", "]", ":", "\n", "                        ", "table", "+=", "'{:.2f}|'", ".", "format", "(", "ap", ")", "\n", "", "table", "+=", "'\\n'", "\n", "\n", "", "", "", "tblogger", ".", "add_text", "(", "'Precision Recall Stats'", ",", "table", ",", "global_step", "=", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.pr.PRGroup._tb_mAP": [[75, 81], ["pr.PRGroup.pr.items", "pr_type.items", "tblogger.add_scalar"], "methods", ["None"], ["", "def", "_tb_mAP", "(", "self", ",", "tblogger", ",", "epoch", ")", ":", "\n", "        ", "for", "type", ",", "pr_type", "in", "self", ".", "pr", ".", "items", "(", ")", ":", "\n", "            ", "for", "metric", ",", "pr", "in", "pr_type", ".", "items", "(", ")", ":", "\n", "                ", "for", "ap", "in", "[", "'mAP'", ",", "'wmAP'", "]", ":", "\n", "                    ", "if", "pr", ".", "nbr_mask_classes", "==", "1", ":", "\n", "                        ", "tblogger", ".", "add_scalar", "(", "'{}_{}_{}'", ".", "format", "(", "ap", ",", "metric", ",", "type", ")", ",", "pr", ".", "PR", "[", "ap", "]", "[", "0", "]", ",", "global_step", "=", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.pr.PRGroup._tb_mIoU_AuC": [[82, 87], ["pr.PRGroup.pr.items", "pr_type.items", "tblogger.add_scalar"], "methods", ["None"], ["", "", "", "", "", "def", "_tb_mIoU_AuC", "(", "self", ",", "tblogger", ",", "epoch", ")", ":", "\n", "        ", "for", "type", ",", "pr_type", "in", "self", ".", "pr", ".", "items", "(", ")", ":", "\n", "            ", "for", "metric", ",", "pr", "in", "pr_type", ".", "items", "(", ")", ":", "\n", "                ", "if", "pr", ".", "nbr_mask_classes", "==", "1", ":", "\n", "                    ", "tblogger", ".", "add_scalar", "(", "'{}_{}_{}'", ".", "format", "(", "'mIoU_AuC'", ",", "metric", ",", "type", ")", ",", "pr", ".", "IoU", "[", "'mIoU_AuC'", "]", "[", "0", "]", ",", "global_step", "=", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.pr.PRGroup.plot_tb": [[89, 106], ["pr.PRGroup.pr.items", "pr.PRGroup._tb_table", "pr.PRGroup._tb_mAP", "pr.PRGroup._tb_mIoU_AuC", "pr_type.items", "pr.compute_PR", "pr.plot_PR", "pr.plot_ROC", "tblogger.add_figure", "tblogger.add_figure", "pr.plot_PR.savefig", "pr.plot_ROC.savefig", "os.join", "os.join"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.pr.PRGroup._tb_table", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.pr.PRGroup._tb_mAP", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.pr.PRGroup._tb_mIoU_AuC", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.pr.PR.compute_PR", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.pr.PR.plot_PR", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.pr.PR.plot_ROC"], ["", "", "", "", "def", "plot_tb", "(", "self", ",", "tblogger", ",", "epoch", ")", ":", "\n", "        ", "for", "type", ",", "pr_type", "in", "self", ".", "pr", ".", "items", "(", ")", ":", "\n", "            ", "for", "metric", ",", "pr", "in", "pr_type", ".", "items", "(", ")", ":", "\n", "                ", "pr", ".", "compute_PR", "(", ")", "\n", "PR_fig", "=", "pr", ".", "plot_PR", "(", ")", "\n", "ROC_fig", "=", "pr", ".", "plot_ROC", "(", ")", "\n", "if", "self", ".", "make_pdf", ":", "\n", "                    ", "fname", "=", "'PR_{}_{}_{:03d}'", ".", "format", "(", "metric", ",", "type", ",", "epoch", ")", "\n", "PR_fig", ".", "savefig", "(", "osp", ".", "join", "(", "tblogger", ".", "log_dir", ",", "fname", ")", ")", "\n", "fname", "=", "'ROC_{}_{}_{:03d}'", ".", "format", "(", "metric", ",", "type", ",", "epoch", ")", "\n", "ROC_fig", ".", "savefig", "(", "osp", ".", "join", "(", "tblogger", ".", "log_dir", ",", "fname", ")", ")", "\n", "", "tblogger", ".", "add_figure", "(", "'PR_{}_{}'", ".", "format", "(", "metric", ",", "type", ")", ",", "PR_fig", ",", "global_step", "=", "epoch", ",", "close", "=", "True", ")", "\n", "tblogger", ".", "add_figure", "(", "'ROC_{}_{}'", ".", "format", "(", "metric", ",", "type", ")", ",", "ROC_fig", ",", "global_step", "=", "epoch", ",", "close", "=", "True", ")", "\n", "\n", "", "", "self", ".", "_tb_table", "(", "tblogger", ",", "epoch", ")", "\n", "self", ".", "_tb_mAP", "(", "tblogger", ",", "epoch", ")", "\n", "self", ".", "_tb_mIoU_AuC", "(", "tblogger", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.pr.PRGroup.get_sem_classes": [[107, 110], ["pr.PRGroup.pr[].items"], "methods", ["None"], ["", "def", "get_sem_classes", "(", "self", ")", ":", "\n", "        ", "for", "_", ",", "pr", "in", "self", ".", "pr", "[", "type", "]", ".", "items", "(", ")", ":", "\n", "            ", "return", "pr", ".", "sem_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.pr.PR.__init__": [[120, 140], ["range", "len", "len", "torch.linspace", "torch.zeros", "math.ceil", "pr.PR.thresholds.numel"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "classes", "=", "range", "(", "10", ")", ",", "limits", "=", "[", "0.0", ",", "1.0", "]", ",", "step_size", "=", "0.01", ",", "mask_classes", "=", "None", ",", "direct_prop", "=", "True", ",", "device", "=", "'cpu'", ")", ":", "\n", "        ", "self", ".", "limits", "=", "limits", "\n", "self", ".", "sem_classes", "=", "classes", "\n", "self", ".", "nbr_sem_classes", "=", "len", "(", "classes", ")", "\n", "self", ".", "mask_classes", "=", "mask_classes", "if", "mask_classes", "else", "[", "'semantic'", "]", "\n", "self", ".", "nbr_mask_classes", "=", "len", "(", "self", ".", "mask_classes", ")", "\n", "self", ".", "thresholds", "=", "torch", ".", "linspace", "(", "limits", "[", "1", "]", ",", "limits", "[", "0", "]", ",", "math", ".", "ceil", "(", "(", "limits", "[", "1", "]", "-", "limits", "[", "0", "]", ")", "/", "step_size", ")", "+", "1", ")", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "comparison", "=", "operator", ".", "gt", "if", "direct_prop", "else", "operator", ".", "lt", "\n", "\n", "\n", "self", ".", "labels", "=", "[", "'tp'", ",", "'pos'", ",", "'gt'", "]", "\n", "self", ".", "counts", "=", "{", "}", "\n", "for", "l", "in", "self", ".", "labels", ":", "\n", "            ", "dims", "=", "[", "self", ".", "nbr_mask_classes", ",", "self", ".", "nbr_sem_classes", "]", "\n", "if", "l", "==", "'gt'", ":", "\n", "                ", "dims", "+=", "[", "1", "]", "\n", "", "else", ":", "\n", "                ", "dims", "+=", "[", "self", ".", "thresholds", ".", "numel", "(", ")", "]", "\n", "", "self", ".", "counts", "[", "l", "]", "=", "torch", ".", "zeros", "(", "dims", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.pr.PR.add": [[142, 171], ["range", "torch.zeros", "torch.zeros", "torch.unique", "enumerate", "pr.PR.comparison", "ssc.utils.metrics.compute_confusion", "torch.diag", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.utils.metrics.compute_confusion"], ["", "", "def", "add", "(", "self", ",", "pred", ",", "target", ",", "metric", ",", "class_masks", "=", "None", ")", ":", "\n", "        ", "'''\n        class_masks = [Batch x Masks x DataDim]\n        '''", "\n", "for", "cl", "in", "range", "(", "self", ".", "nbr_mask_classes", ")", ":", "\n", "\n", "            ", "if", "class_masks", "is", "None", ":", "\n", "                ", "class_pred", "=", "pred", "\n", "class_target", "=", "target", "\n", "class_metric", "=", "metric", "\n", "", "else", ":", "\n", "                ", "class_pred", "=", "pred", "[", "class_masks", "[", ":", ",", "cl", "]", "]", "\n", "class_target", "=", "target", "[", "class_masks", "[", ":", ",", "cl", "]", "]", "\n", "class_metric", "=", "metric", "[", "class_masks", "[", ":", ",", "cl", "]", "]", "\n", "\n", "", "cm", "=", "torch", ".", "zeros", "(", "[", "self", ".", "nbr_sem_classes", ",", "self", ".", "nbr_sem_classes", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "self", ".", "device", ")", "\n", "gt", "=", "torch", ".", "zeros", "(", "self", ".", "nbr_sem_classes", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "self", ".", "device", ")", "\n", "gt_idx", ",", "gt_count", "=", "torch", ".", "unique", "(", "target", ",", "return_counts", "=", "True", ")", "\n", "gt", "[", "gt_idx", "]", "=", "gt_count", "\n", "self", ".", "counts", "[", "'gt'", "]", "[", "cl", ",", ":", ",", "0", "]", "+=", "gt", "\n", "\n", "for", "ti", ",", "t", "in", "enumerate", "(", "self", ".", "thresholds", ")", ":", "\n", "                ", "t_mask", "=", "self", ".", "comparison", "(", "class_metric", ",", "t", ")", "\n", "cm", "+=", "compute_confusion", "(", "class_pred", "[", "t_mask", "]", ",", "class_target", "[", "t_mask", "]", ",", "self", ".", "nbr_sem_classes", ")", "\n", "self", ".", "counts", "[", "'tp'", "]", "[", "cl", ",", ":", ",", "ti", "]", "+=", "torch", ".", "diag", "(", "cm", ")", "\n", "self", ".", "counts", "[", "'pos'", "]", "[", "cl", ",", ":", ",", "ti", "]", "+=", "torch", ".", "sum", "(", "cm", ",", "dim", "=", "0", ")", "\n", "class_pred", "=", "class_pred", "[", "~", "t_mask", "]", "\n", "class_target", "=", "class_target", "[", "~", "t_mask", "]", "\n", "class_metric", "=", "class_metric", "[", "~", "t_mask", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.pr.PR.reset": [[173, 176], ["pr.PR.counts[].fill_"], "methods", ["None"], ["", "", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "for", "l", "in", "self", ".", "labels", ":", "\n", "            ", "self", ".", "counts", "[", "l", "]", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.pr.PR.compute_PR": [[178, 245], ["pr.PR.counts[].to", "pr.PR.counts[].to", "pr.PR.counts[].to", "torch.zeros_like", "torch.ones_like", "torch.where", "torch.mean", "pr.PR.sum", "torch.where", "torch.sum", "torch.where", "torch.mean", "pr.PR.sum", "torch.sum", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "enumerate", "torch.roll", "torch.sum", "torch.roll", "torch.sum", "torch.roll", "torch.sum", "PR.items", "ROC.items", "torch.where", "torch.mean", "torch.zeros_like", "enumerate", "torch.sum", "IoU.items", "torch.max", "torch.max", "torch.max", "v.to().numpy", "v.to().numpy", "torch.max", "v.to().numpy", "v.to", "v.to", "v.to"], "methods", ["None"], ["", "", "def", "compute_PR", "(", "self", ")", ":", "\n", "        ", "tp", "=", "self", ".", "counts", "[", "'tp'", "]", ".", "to", "(", "dtype", "=", "torch", ".", "float", ")", "\n", "pos", "=", "self", ".", "counts", "[", "'pos'", "]", ".", "to", "(", "dtype", "=", "torch", ".", "float", ")", "\n", "gt", "=", "self", ".", "counts", "[", "'gt'", "]", ".", "to", "(", "dtype", "=", "torch", ".", "float", ")", "\n", "zero_mat", "=", "torch", ".", "zeros_like", "(", "tp", ",", "device", "=", "self", ".", "device", ")", "\n", "one_mat", "=", "torch", ".", "ones_like", "(", "tp", ",", "device", "=", "self", ".", "device", ")", "\n", "PR", "=", "{", "}", "\n", "PR", "[", "'P'", "]", "=", "P", "=", "torch", ".", "where", "(", "pos", "!=", "0", ",", "tp", "/", "pos", ",", "one_mat", ")", "\n", "PR", "[", "'mP'", "]", "=", "mP", "=", "torch", ".", "mean", "(", "P", ",", "dim", "=", "1", ")", "\n", "all_pos", "=", "pos", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "ratio_P", "=", "torch", ".", "where", "(", "all_pos", "!=", "0", ",", "pos", "/", "all_pos", ",", "one_mat", ")", "\n", "PR", "[", "'wmP'", "]", "=", "wmP", "=", "torch", ".", "sum", "(", "ratio_P", "*", "P", ",", "dim", "=", "1", ")", "\n", "PR", "[", "'R'", "]", "=", "R", "=", "torch", ".", "where", "(", "gt", "!=", "0", ",", "tp", "/", "gt", ",", "zero_mat", ")", "\n", "PR", "[", "'mR'", "]", "=", "mR", "=", "torch", ".", "mean", "(", "R", ",", "dim", "=", "1", ")", "\n", "all_gt", "=", "gt", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "ratio_R", "=", "gt", "/", "all_gt", "\n", "PR", "[", "'wmR'", "]", "=", "wmR", "=", "torch", ".", "sum", "(", "ratio_R", "*", "R", ",", "dim", "=", "1", ")", "\n", "\n", "# interp_P = P", "\n", "# interp_mP = mP", "\n", "# interp_wmP = wmP", "\n", "\n", "interp_P", "=", "torch", ".", "zeros_like", "(", "P", ",", "device", "=", "self", ".", "device", ")", "\n", "interp_mP", "=", "torch", ".", "zeros_like", "(", "mP", ",", "device", "=", "self", ".", "device", ")", "\n", "interp_wmP", "=", "torch", ".", "zeros_like", "(", "wmP", ",", "device", "=", "self", ".", "device", ")", "\n", "for", "ti", ",", "t", "in", "enumerate", "(", "self", ".", "thresholds", ")", ":", "\n", "            ", "interp_P", "[", ":", ",", ":", ",", "ti", "]", ",", "_", "=", "torch", ".", "max", "(", "P", "[", ":", ",", ":", ",", "ti", ":", "]", ",", "dim", "=", "2", ")", "\n", "interp_mP", "[", ":", ",", "ti", "]", ",", "_", "=", "torch", ".", "max", "(", "mP", "[", ":", ",", "ti", ":", "]", ",", "dim", "=", "1", ")", "\n", "interp_wmP", "[", ":", ",", "ti", "]", ",", "_", "=", "torch", ".", "max", "(", "wmP", "[", ":", ",", "ti", ":", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "left_R", "=", "torch", ".", "roll", "(", "R", ",", "1", ",", "dims", "=", "2", ")", "\n", "left_R", "[", ":", ",", ":", ",", "0", "]", "=", "0", "\n", "PR", "[", "'AP'", "]", "=", "torch", ".", "sum", "(", "interp_P", "*", "(", "R", "-", "left_R", ")", ",", "dim", "=", "2", ")", "\n", "left_mR", "=", "torch", ".", "roll", "(", "mR", ",", "1", ",", "dims", "=", "1", ")", "\n", "left_mR", "[", ":", ",", "0", "]", "=", "0", "\n", "PR", "[", "'mAP'", "]", "=", "torch", ".", "sum", "(", "interp_mP", "*", "(", "mR", "-", "left_mR", ")", ",", "dim", "=", "1", ")", "\n", "left_wmR", "=", "torch", ".", "roll", "(", "wmR", ",", "1", ",", "dims", "=", "1", ")", "\n", "left_wmR", "[", ":", ",", "0", "]", "=", "0", "\n", "PR", "[", "'wmAP'", "]", "=", "torch", ".", "sum", "(", "interp_wmP", "*", "(", "wmR", "-", "left_wmR", ")", ",", "dim", "=", "1", ")", "\n", "\n", "#Move to CPU and numpy for plotting", "\n", "self", ".", "PR", "=", "{", "}", "\n", "for", "m", ",", "v", "in", "PR", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "PR", "[", "m", "]", "=", "v", ".", "to", "(", "'cpu'", ")", ".", "numpy", "(", ")", "\n", "\n", "", "ROC", "=", "{", "}", "\n", "ROC", "[", "'tpr'", "]", "=", "P", "\n", "fp", "=", "pos", "-", "tp", "\n", "neg", "=", "all_pos", "-", "pos", "\n", "ROC", "[", "'fpr'", "]", "=", "fp", "/", "neg", "\n", "self", ".", "ROC", "=", "{", "}", "\n", "for", "m", ",", "v", "in", "ROC", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "ROC", "[", "m", "]", "=", "v", ".", "to", "(", "'cpu'", ")", ".", "numpy", "(", ")", "\n", "\n", "", "IoU", "=", "{", "}", "\n", "intersection", "=", "tp", "\n", "union", "=", "pos", "+", "gt", "\n", "IoU", "[", "'IoU'", "]", "=", "torch", ".", "where", "(", "union", "!=", "0", ",", "intersection", "/", "union", ",", "zero_mat", ")", "\n", "IoU", "[", "'mIoU'", "]", "=", "mIoU", "=", "torch", ".", "mean", "(", "IoU", "[", "'IoU'", "]", ",", "dim", "=", "1", ")", "\n", "interp_mIoU", "=", "torch", ".", "zeros_like", "(", "mIoU", ",", "device", "=", "self", ".", "device", ")", "\n", "for", "ti", ",", "t", "in", "enumerate", "(", "self", ".", "thresholds", ")", ":", "\n", "            ", "interp_mIoU", "[", ":", ",", "ti", "]", ",", "_", "=", "torch", ".", "max", "(", "mIoU", "[", ":", ",", "ti", ":", "]", ",", "dim", "=", "1", ")", "\n", "", "IoU", "[", "'mIoU_AuC'", "]", "=", "torch", ".", "sum", "(", "interp_mIoU", "*", "(", "mR", "-", "left_mR", ")", ",", "dim", "=", "1", ")", "\n", "\n", "self", ".", "IoU", "=", "{", "}", "\n", "for", "m", ",", "v", "in", "IoU", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "IoU", "[", "m", "]", "=", "v", ".", "to", "(", "'cpu'", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.pr.PR.plot_PR": [[248, 274], ["matplotlib.figure", "numpy.ceil", "numpy.ceil", "seaborn.color_palette", "enumerate", "matplotlib.tight_layout", "numpy.sqrt", "matplotlib.subplot", "enumerate", "matplotlib.title", "matplotlib.ylim", "matplotlib.xlim", "matplotlib.legend", "matplotlib.plot", "matplotlib.ylabel", "matplotlib.xlabel", "min", "min", "numpy.min", "numpy.min"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.histogram.HistogramTpFn2D.plot"], ["", "", "def", "plot_PR", "(", "self", ")", ":", "\n", "        ", "fg", "=", "plt", ".", "figure", "(", ")", "\n", "nbr_rows", "=", "np", ".", "ceil", "(", "np", ".", "sqrt", "(", "10.0", "*", "self", ".", "nbr_mask_classes", "/", "16.0", ")", ")", "\n", "nbr_cols", "=", "np", ".", "ceil", "(", "self", ".", "nbr_mask_classes", "/", "nbr_rows", ")", "\n", "\n", "colors", "=", "sns", ".", "color_palette", "(", "\"husl\"", ",", "self", ".", "nbr_sem_classes", ")", "\n", "\n", "for", "mci", ",", "mc", "in", "enumerate", "(", "self", ".", "mask_classes", ")", ":", "\n", "            ", "plt", ".", "subplot", "(", "nbr_rows", ",", "nbr_cols", ",", "mci", "+", "1", ")", "\n", "for", "(", "sci", ",", "scl", ")", "in", "enumerate", "(", "self", ".", "sem_classes", ")", ":", "\n", "                ", "plt", ".", "plot", "(", "self", ".", "PR", "[", "'R'", "]", "[", "mci", ",", "sci", "]", ",", "self", ".", "PR", "[", "'P'", "]", "[", "mci", ",", "sci", "]", ",", "color", "=", "colors", "[", "sci", "]", ",", "label", "=", "'{}, AP: {:.2f}'", ".", "format", "(", "scl", ",", "self", ".", "PR", "[", "'AP'", "]", "[", "mci", ",", "sci", "]", ")", ")", "\n", "\n", "", "plt", ".", "title", "(", "self", ".", "mask_classes", "[", "mci", "]", ")", "\n", "plt", ".", "ylim", "(", "[", "min", "(", "0.5", ",", "np", ".", "min", "(", "self", ".", "PR", "[", "'P'", "]", ")", ")", ",", "1", "]", ")", "\n", "plt", ".", "xlim", "(", "[", "min", "(", "0.5", ",", "np", ".", "min", "(", "self", ".", "PR", "[", "'R'", "]", ")", ")", ",", "1", "]", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'lower left'", ",", "ncol", "=", "2", ")", "\n", "\n", "if", "mci", "%", "nbr_cols", "==", "0", ":", "\n", "                ", "plt", ".", "ylabel", "(", "'Precision'", ")", "\n", "\n", "", "if", "nbr_rows", "==", "1", "or", "mci", ">", "self", ".", "nbr_mask_classes", "-", "nbr_cols", ":", "\n", "                ", "plt", ".", "xlabel", "(", "'Recall'", ")", "\n", "\n", "", "", "plt", ".", "tight_layout", "(", ")", "\n", "\n", "return", "fg", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.pr.PR.plot_ROC": [[275, 299], ["matplotlib.figure", "numpy.ceil", "numpy.ceil", "seaborn.color_palette", "enumerate", "matplotlib.tight_layout", "numpy.sqrt", "matplotlib.subplot", "enumerate", "matplotlib.title", "matplotlib.legend", "matplotlib.plot", "matplotlib.ylabel", "matplotlib.xlabel"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.histogram.HistogramTpFn2D.plot"], ["", "def", "plot_ROC", "(", "self", ")", ":", "\n", "        ", "fg", "=", "plt", ".", "figure", "(", ")", "\n", "nbr_rows", "=", "np", ".", "ceil", "(", "np", ".", "sqrt", "(", "10.0", "*", "self", ".", "nbr_mask_classes", "/", "16.0", ")", ")", "\n", "nbr_cols", "=", "np", ".", "ceil", "(", "self", ".", "nbr_mask_classes", "/", "nbr_rows", ")", "\n", "\n", "colors", "=", "sns", ".", "color_palette", "(", "\"husl\"", ",", "self", ".", "nbr_sem_classes", ")", "\n", "\n", "for", "mci", ",", "mc", "in", "enumerate", "(", "self", ".", "mask_classes", ")", ":", "\n", "            ", "plt", ".", "subplot", "(", "nbr_rows", ",", "nbr_cols", ",", "mci", "+", "1", ")", "\n", "for", "(", "sci", ",", "scl", ")", "in", "enumerate", "(", "self", ".", "sem_classes", ")", ":", "\n", "                ", "plt", ".", "plot", "(", "self", ".", "ROC", "[", "'fpr'", "]", "[", "mci", ",", "sci", "]", ",", "self", ".", "ROC", "[", "'tpr'", "]", "[", "mci", ",", "sci", "]", ",", "color", "=", "colors", "[", "sci", "]", ",", "label", "=", "scl", ")", "\n", "\n", "", "plt", ".", "title", "(", "self", ".", "mask_classes", "[", "mci", "]", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'lower right'", ",", "ncol", "=", "2", ")", "\n", "\n", "if", "mci", "%", "nbr_cols", "==", "0", ":", "\n", "                ", "plt", ".", "ylabel", "(", "'True Positive Rate'", ")", "\n", "\n", "", "if", "nbr_rows", "==", "1", "or", "mci", ">", "self", ".", "nbr_mask_classes", "-", "nbr_cols", ":", "\n", "                ", "plt", ".", "xlabel", "(", "'False Positive Rate'", ")", "\n", "\n", "", "", "plt", ".", "tight_layout", "(", ")", "\n", "\n", "return", "fg", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.pr.count_confusion": [[11, 17], ["torch.sum", "torch.diag", "torch.sum"], "function", ["None"], ["def", "count_confusion", "(", "cm", ")", ":", "\n", "    ", "all_positive", "=", "torch", ".", "sum", "(", "cm", ",", "dim", "=", "0", ")", "\n", "tp", "=", "torch", ".", "diag", "(", "cm", ")", "\n", "all_gt", "=", "torch", ".", "sum", "(", "cm", ",", "dim", "=", "1", ")", "\n", "\n", "return", "{", "'tp'", ":", "tp", ",", "'pos'", ":", "all_positive", ",", "'gt'", ":", "all_gt", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.mayavi_voxel.compare_voxels": [[13, 19], ["len", "numpy.zeros", "enumerate", "grid_dict.items", "mayavi_voxel.plot_voxels"], "function", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.vispy_voxel.plot_voxels"], ["def", "compare_voxels", "(", "grid_dict", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "dsize", "=", "len", "(", "grid_dict", ")", "\n", "img", "=", "np", ".", "zeros", "(", "(", "2", "*", "FIG_SIZE", "[", "1", "]", ",", "dsize", "*", "2", "*", "FIG_SIZE", "[", "0", "]", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "i", ",", "(", "name", ",", "grid", ")", "in", "enumerate", "(", "grid_dict", ".", "items", "(", ")", ")", ":", "\n", "        ", "img", "[", ":", ",", "i", "*", "2", "*", "FIG_SIZE", "[", "0", "]", ":", "(", "i", "+", "1", ")", "*", "2", "*", "FIG_SIZE", "[", "0", "]", "]", "=", "plot_voxels", "(", "grid", ",", "*", "args", ",", "title", "=", "name", ",", "**", "kwargs", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.mayavi_voxel.plot_voxels": [[20, 124], ["mayavi.mlab.figure", "numpy.ones", "numpy.nonzero", "mayavi.mlab.view", "numpy.zeros", "range", "mayavi.mlab.clf", "mayavi.mlab.close", "gridValues.astype.astype", "numpy.any", "mayavi.mlab.close", "numpy.zeros", "vox_min.reshape", "numpy.zeros_like", "mayavi.mlab.points3d", "mayavi.mlab.colorbar", "scipy.linalg.null_space", "numpy.linalg.norm", "mayavi.mlab.quiver3d", "mayavi.mlab.view", "range", "cv2.getTextSize", "cv2.putText", "cv2.imwrite", "numpy.vstack", "mayavi.mlab.points3d", "len", "mayavi.mlab.points3d", "mayavi.mlab.points3d", "seaborn.hls_palette", "mayavi.mlab.view", "mayavi.mlab.screenshot", "suncg_labels.index", "mayavi.mlab.points3d", "mayavi.mlab.points3d", "numpy.array", "math.atan2"], "function", ["None"], ["", "def", "plot_voxels", "(", "gridValues", ",", "vox_min", ",", "vox_unit", ",", "alpha", "=", "1.0", ",", "\n", "suncg_labels", "=", "None", ",", "title", "=", "'Title'", ",", "mask", "=", "None", ",", "save_path", "=", "None", ",", "\n", "camera_P", "=", "None", ",", "cmap", "=", "'jet'", ",", "scalar", "=", "False", ",", "vmax", "=", "None", ",", "vmin", "=", "None", ",", "\n", "crossection", "=", "False", ")", ":", "\n", "    ", "fig", "=", "mlab", ".", "figure", "(", "size", "=", "FIG_SIZE", ",", "bgcolor", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "\n", "#VTK cannot handle numpy bool", "\n", "if", "gridValues", ".", "dtype", "==", "np", ".", "bool", ":", "\n", "        ", "gridValues", "=", "gridValues", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "", "my_mask", "=", "np", ".", "ones", "(", "gridValues", ".", "shape", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "if", "not", "scalar", ":", "\n", "        ", "my_mask", "&=", "gridValues", ">", "0", "\n", "\n", "", "if", "mask", "is", "not", "None", ":", "\n", "        ", "my_mask", "&=", "mask", "\n", "", "elif", "suncg_labels", "and", "'ceiling'", "in", "suncg_labels", ":", "\n", "        ", "my_mask", "&=", "(", "gridValues", "!=", "suncg_labels", ".", "index", "(", "'ceiling'", ")", ")", "\n", "\n", "# Early abort", "\n", "", "if", "not", "np", ".", "any", "(", "my_mask", ")", ":", "\n", "        ", "mlab", ".", "close", "(", "fig", ")", "\n", "return", "np", ".", "zeros", "(", "(", "2", "*", "FIG_SIZE", "[", "1", "]", ",", "2", "*", "FIG_SIZE", "[", "0", "]", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "\n", "\n", "", "xyz", "=", "np", ".", "nonzero", "(", "my_mask", ")", "\n", "positions", "=", "np", ".", "vstack", "(", "[", "xyz", "[", "0", "]", ",", "xyz", "[", "1", "]", ",", "xyz", "[", "2", "]", "]", ")", "*", "vox_unit", "+", "vox_min", ".", "reshape", "(", "[", "3", ",", "1", "]", ")", "\n", "gridValuesMasked", "=", "gridValues", "[", "my_mask", "]", "\n", "\n", "if", "crossection", ":", "\n", "        ", "cs_mask", "=", "np", ".", "zeros_like", "(", "my_mask", ")", "\n", "cs_mask", "[", "my_mask", ".", "shape", "[", "0", "]", "//", "2", "]", "=", "1", "\n", "cs_mask", "[", ":", ",", "3", "]", "=", "1", "\n", "cs_mask", "[", ":", ",", ":", ",", "my_mask", ".", "shape", "[", "0", "]", "//", "2", "]", "=", "1", "\n", "non_cs_mask", "=", "(", "~", "cs_mask", ")", "[", "my_mask", "]", "\n", "cs_mask", "=", "cs_mask", "[", "my_mask", "]", "\n", "positions_opaque", "=", "positions", "[", ":", ",", "non_cs_mask", "]", "\n", "gridValuesMasked_opaque", "=", "gridValuesMasked", "[", "non_cs_mask", "]", "\n", "\n", "positions", "=", "positions", "[", ":", ",", "cs_mask", "]", "\n", "gridValuesMasked", "=", "gridValuesMasked", "[", "cs_mask", "]", "\n", "\n", "cs_alpha", "=", "0.05", "\n", "\n", "", "if", "scalar", ":", "\n", "        ", "mlab", ".", "points3d", "(", "*", "positions", "[", "PLOT_ORDER", "]", ",", "gridValuesMasked", ",", "mode", "=", "\"cube\"", ",", "colormap", "=", "cmap", ",", "scale_factor", "=", "0.07", ",", "scale_mode", "=", "'none'", ",", "vmax", "=", "vmax", ",", "vmin", "=", "vmin", ",", "opacity", "=", "alpha", ")", "\n", "if", "crossection", ":", "\n", "            ", "mlab", ".", "points3d", "(", "*", "positions_opaque", "[", "PLOT_ORDER", "]", ",", "gridValuesMasked_opaque", ",", "mode", "=", "\"cube\"", ",", "colormap", "=", "cmap", ",", "scale_factor", "=", "0.07", ",", "scale_mode", "=", "'none'", ",", "vmax", "=", "vmax", ",", "vmin", "=", "vmin", ",", "opacity", "=", "cs_alpha", ")", "\n", "", "lut_manager", "=", "mlab", ".", "colorbar", "(", "orientation", "=", "'vertical'", ")", "\n", "lut_manager", ".", "label_text_property", ".", "color", "=", "(", "0", ",", "0", ",", "0", ")", "\n", "lut_manager", ".", "title_text_property", ".", "color", "=", "(", "0", ",", "0", ",", "0", ")", "\n", "", "else", ":", "\n", "        ", "nbr_classes", "=", "len", "(", "suncg_labels", ")", "-", "1", "\n", "if", "nbr_classes", "==", "1", ":", "\n", "            ", "mlab", ".", "points3d", "(", "*", "positions", "[", "PLOT_ORDER", "]", ",", "mode", "=", "\"cube\"", ",", "color", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "scale_factor", "=", "0.07", ",", "scale_mode", "=", "'none'", ",", "opacity", "=", "alpha", ")", "\n", "if", "crossection", ":", "\n", "                ", "mlab", ".", "points3d", "(", "*", "positions_opaque", "[", "PLOT_ORDER", "]", ",", "mode", "=", "\"cube\"", ",", "color", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "scale_factor", "=", "0.07", ",", "scale_mode", "=", "'none'", ",", "opacity", "=", "cs_alpha", ")", "\n", "", "", "else", ":", "\n", "            ", "pplot", "=", "mlab", ".", "points3d", "(", "*", "positions", "[", "PLOT_ORDER", "]", ",", "gridValuesMasked", ",", "mode", "=", "\"cube\"", ",", "colormap", "=", "'jet'", ",", "scale_factor", "=", "0.07", ",", "scale_mode", "=", "'none'", ",", "vmax", "=", "nbr_classes", ",", "vmin", "=", "1", ",", "opacity", "=", "alpha", ")", "\n", "if", "crossection", ":", "\n", "                ", "pplot", "=", "mlab", ".", "points3d", "(", "*", "positions_opaque", "[", "PLOT_ORDER", "]", ",", "gridValuesMasked_opaque", ",", "mode", "=", "\"cube\"", ",", "colormap", "=", "'jet'", ",", "scale_factor", "=", "0.07", ",", "scale_mode", "=", "'none'", ",", "vmax", "=", "nbr_classes", ",", "vmin", "=", "1", ",", "opacity", "=", "cs_alpha", ")", "\n", "#Set custom colormap", "\n", "", "cmap", "=", "sns", ".", "hls_palette", "(", "nbr_classes", ")", "\n", "pplot", ".", "module_manager", ".", "scalar_lut_manager", ".", "lut", ".", "table", "=", "255", "*", "np", ".", "array", "(", "[", "(", "*", "rgb", ",", "1", ")", "for", "rgb", "in", "cmap", "]", ")", "\n", "\n", "\n", "", "", "if", "camera_P", "is", "not", "None", ":", "\n", "        ", "camera_pos", "=", "null_space", "(", "camera_P", ")", "\n", "camera_pos", "/=", "camera_pos", "[", "3", "]", "\n", "camera_pos", "=", "camera_pos", "[", "PLOT_ORDER", "]", "\n", "camera_front", "=", "camera_P", "[", "2", ",", ":", "3", "]", "\n", "camera_front", "=", "camera_front", "[", "PLOT_ORDER", "]", "\n", "camera_front", "/=", "np", ".", "linalg", ".", "norm", "(", "camera_front", ")", "\n", "mlab", ".", "quiver3d", "(", "*", "camera_pos", ",", "*", "camera_front", ")", "\n", "mlab", ".", "view", "(", "azimuth", "=", "atan2", "(", "camera_pos", "[", "1", "]", ",", "camera_pos", "[", "0", "]", ")", "*", "180", "/", "pi", ")", "\n", "\n", "", "azimuth", ",", "_", ",", "dist", ",", "_", "=", "mlab", ".", "view", "(", ")", "\n", "img", "=", "np", ".", "zeros", "(", "(", "2", "*", "FIG_SIZE", "[", "1", "]", ",", "2", "*", "FIG_SIZE", "[", "0", "]", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "r", "in", "range", "(", "2", ")", ":", "\n", "        ", "for", "c", "in", "range", "(", "2", ")", ":", "\n", "            ", "azimuth", "+=", "(", "2", "*", "r", "+", "c", ")", "*", "90", "\n", "mlab", ".", "view", "(", "azimuth", "=", "azimuth", ",", "distance", "=", "dist", "*", "0.9", ")", "\n", "img", "[", "r", "*", "FIG_SIZE", "[", "1", "]", ":", "(", "r", "+", "1", ")", "*", "FIG_SIZE", "[", "1", "]", ",", "\n", "c", "*", "FIG_SIZE", "[", "0", "]", ":", "(", "c", "+", "1", ")", "*", "FIG_SIZE", "[", "0", "]", "]", "=", "mlab", ".", "screenshot", "(", "figure", "=", "fig", ",", "mode", "=", "'rgb'", ",", "antialiased", "=", "False", ")", "\n", "if", "scalar", "and", "(", "c", "+", "r", ")", "==", "0", ":", "\n", "                ", "lut_manager", ".", "show_legend", "=", "False", "\n", "\n", "", "", "", "mlab", ".", "clf", "(", "fig", ")", "\n", "mlab", ".", "close", "(", "fig", ")", "\n", "\n", "if", "title", ":", "\n", "        ", "font", "=", "cv2", ".", "FONT_HERSHEY_SIMPLEX", "\n", "fontScale", "=", "1", "\n", "thickness", "=", "2", "\n", "text_size", ",", "_", "=", "cv2", ".", "getTextSize", "(", "title", ",", "font", ",", "fontScale", ",", "thickness", ")", "\n", "text_pos", "=", "(", "(", "img", ".", "shape", "[", "1", "]", "-", "text_size", "[", "0", "]", ")", "//", "2", ",", "\n", "(", "img", ".", "shape", "[", "0", "]", "+", "text_size", "[", "1", "]", ")", "//", "2", ")", "\n", "cv2", ".", "putText", "(", "img", ",", "title", ",", "text_pos", ",", "font", ",", "fontScale", ",", "(", "0", ",", "0", ",", "0", ")", ",", "thickness", "=", "thickness", ")", "\n", "\n", "", "if", "save_path", "is", "not", "None", ":", "\n", "        ", "cv2", ".", "imwrite", "(", "'{}.png'", ".", "format", "(", "save_path", ")", ",", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.vispy_voxel.AlphaAwareCM.__init__": [[14, 27], ["numpy.linspace", "enumerate", "BaseColormap.__init__", "zip", "len", "len"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.Cauchy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "color_list", ")", ":", "\n", "        ", "bins", "=", "np", ".", "linspace", "(", "0", ",", "1", ",", "len", "(", "color_list", ")", "+", "1", ")", "\n", "self", ".", "glsl_map", "=", "'vec4 translucent_grays(float t) {\\n'", "\n", "for", "c_idx", ",", "(", "i1", ",", "i2", ")", "in", "enumerate", "(", "zip", "(", "bins", "[", ":", "-", "1", "]", ",", "bins", "[", "1", ":", "]", ")", ")", ":", "\n", "            ", "return_vec", "=", "'return vec4({0[0]:.4},{0[1]:.4},{0[2]:.4},{0[3]:.4});'", ".", "format", "(", "color_list", "[", "c_idx", "]", ".", "rgba", ".", "flat", ")", "\n", "if", "c_idx", "==", "0", ":", "\n", "                ", "self", ".", "glsl_map", "+=", "'  if (t < {:.2}) {{\\n    {}\\n  }}'", ".", "format", "(", "i2", ",", "return_vec", ")", "\n", "", "elif", "c_idx", "==", "len", "(", "color_list", ")", ":", "\n", "                ", "self", ".", "glsl_map", "+=", "'  else {{}\\n    {}\\n  }}'", ".", "format", "(", "return_vec", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "glsl_map", "+=", "'  else if (({:.2} <= t) && (t < {:.2})) {{\\n    {}\\n  }}'", ".", "format", "(", "i1", ",", "i2", ",", "return_vec", ")", "\n", "", "", "self", ".", "glsl_map", "+=", "'\\n}'", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.vispy_voxel.plot_voxels": [[28, 68], ["len", "vispy.scene.SceneCanvas", "scene.SceneCanvas.central_widget.add_view", "vispy.scene.TurntableCamera", "get_colormap", "enumerate", "vispy_voxel.AlphaAwareCM", "vispy.scene.visuals.Volume", "vispy.scene.transforms.MatrixTransform", "scene.visuals.Volume.transform.scale", "scene.visuals.Volume.transform.translate", "zip", "cm_sampled.append", "canvas.central_widget.add_view.camera.set_state", "scene.SceneCanvas.render", "moviepy.editor.VideoClip", "moviepy.editor.VideoClip.write_gif", "scene.SceneCanvas.render", "cv2.imwrite", "numpy.linspace", "iclass.lower", "Color", "iclass.lower"], "function", ["None"], ["", "", "def", "plot_voxels", "(", "gridLabels", ",", "suncg_labels", ",", "vox_min", ",", "vox_unit", ",", "save_path", "=", "None", ",", "animate", "=", "False", ")", ":", "\n", "    ", "nbr_classes", "=", "len", "(", "suncg_labels", ")", "\n", "\n", "canvas", "=", "scene", ".", "SceneCanvas", "(", "keys", "=", "'interactive'", ",", "bgcolor", "=", "'w'", ",", "size", "=", "(", "1920", ",", "1080", ")", ")", "\n", "view", "=", "canvas", ".", "central_widget", ".", "add_view", "(", ")", "\n", "azimuth", "=", "30", "\n", "view", ".", "camera", "=", "scene", ".", "TurntableCamera", "(", "up", "=", "'y'", ",", "distance", "=", "4", ",", "fov", "=", "70", ",", "\n", "azimuth", "=", "azimuth", ",", "elevation", "=", "30.", ")", "\n", "\n", "# Sample colormap and adjust alpha", "\n", "colormap", "=", "get_colormap", "(", "'cubehelix'", ")", "\n", "cm_sampled", "=", "[", "]", "\n", "for", "i", ",", "(", "iclass", ",", "sample_f", ")", "in", "enumerate", "(", "zip", "(", "suncg_labels", ",", "np", ".", "linspace", "(", "0", ",", "1", ",", "nbr_classes", ")", ")", ")", ":", "\n", "        ", "if", "iclass", ".", "lower", "(", ")", "in", "(", "'free'", ",", "'ceiling'", ")", ":", "\n", "            ", "alpha", "=", "0", "\n", "", "elif", "iclass", ".", "lower", "(", ")", "in", "(", "'floor'", ",", "'wall'", ",", "'window'", ")", ":", "\n", "            ", "alpha", "=", "0.6", "\n", "", "else", ":", "\n", "            ", "alpha", "=", "1.0", "\n", "", "cm_sampled", ".", "append", "(", "Color", "(", "color", "=", "colormap", "[", "sample_f", "]", ".", "rgb", ",", "alpha", "=", "alpha", ")", ")", "\n", "", "my_cm", "=", "AlphaAwareCM", "(", "cm_sampled", ")", "\n", "\n", "volume", "=", "scene", ".", "visuals", ".", "Volume", "(", "gridLabels", ",", "relative_step_size", "=", "0.1", ",", "method", "=", "'mip'", ",", "parent", "=", "view", ".", "scene", ",", "cmap", "=", "my_cm", ",", "clim", "=", "[", "0", ",", "nbr_classes", "-", "1", "]", ",", "emulate_texture", "=", "False", ")", "\n", "volume", ".", "transform", "=", "scene", ".", "transforms", ".", "MatrixTransform", "(", ")", "\n", "volume", ".", "transform", ".", "scale", "(", "3", "*", "[", "vox_unit", "]", ")", "\n", "volume", ".", "transform", ".", "translate", "(", "3", "*", "[", "-", "vox_unit", "*", "gridLabels", ".", "shape", "[", "0", "]", "/", "2.0", "]", ")", "\n", "\n", "if", "save_path", "is", "None", ":", "\n", "        ", "return", "\n", "\n", "", "def", "make_frame", "(", "t", ")", ":", "\n", "        ", "view", ".", "camera", ".", "set_state", "(", "{", "'azimuth'", ":", "azimuth", "+", "t", "*", "90", "}", ")", "\n", "return", "canvas", ".", "render", "(", ")", "\n", "\n", "", "if", "animate", ":", "\n", "        ", "animation", "=", "VideoClip", "(", "make_frame", ",", "duration", "=", "3", ")", "\n", "animation", ".", "write_gif", "(", "'voxel.gif'", ",", "fps", "=", "8", ",", "opt", "=", "'OptimizePlus'", ")", "\n", "", "else", ":", "\n", "        ", "img", "=", "canvas", ".", "render", "(", ")", "\n", "cv2", ".", "imwrite", "(", "'voxel.png'", ",", "img", "[", ":", ":", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.vispy_voxel.scatter_plot_voxels": [[69, 121], ["len", "numpy.nonzero", "numpy.vstack", "vispy.scene.SceneCanvas", "scene.SceneCanvas.central_widget.add_view", "vispy.scene.TurntableCamera", "get_colormap", "numpy.zeros", "enumerate", "vispy.scene.visuals.create_visual_node", "scene.visuals.create_visual_node.", "Scatter3D.set_gl_state", "Scatter3D.set_data", "vispy.scene.transforms.MatrixTransform", "Scatter3D.transform.scale", "Scatter3D.transform.translate", "zip", "colormap[].rgba.flatten", "canvas.central_widget.add_view.camera.set_state", "scene.SceneCanvas.render", "moviepy.editor.VideoClip", "moviepy.editor.VideoClip.write_gif", "scene.SceneCanvas.render", "cv2.imwrite", "numpy.linspace", "iclass.lower", "iclass.lower"], "function", ["None"], ["", "", "def", "scatter_plot_voxels", "(", "gridLabels", ",", "suncg_labels", ",", "vox_min", ",", "vox_unit", ",", "save_path", "=", "None", ",", "animate", "=", "False", ")", ":", "\n", "    ", "nbr_classes", "=", "len", "(", "suncg_labels", ")", "\n", "\n", "occMask", "=", "gridLabels", ">", "0", "\n", "xyz", "=", "np", ".", "nonzero", "(", "occMask", ")", "\n", "positions", "=", "np", ".", "vstack", "(", "[", "xyz", "[", "0", "]", ",", "xyz", "[", "1", "]", ",", "xyz", "[", "2", "]", "]", ")", "\n", "gridLabelsMasked", "=", "gridLabels", "[", "occMask", "]", "\n", "\n", "canvas", "=", "scene", ".", "SceneCanvas", "(", "keys", "=", "'interactive'", ",", "bgcolor", "=", "'w'", ",", "size", "=", "(", "1920", ",", "1080", ")", ")", "\n", "view", "=", "canvas", ".", "central_widget", ".", "add_view", "(", ")", "\n", "azimuth", "=", "30", "\n", "view", ".", "camera", "=", "scene", ".", "TurntableCamera", "(", "up", "=", "'y'", ",", "distance", "=", "4", ",", "fov", "=", "70", ",", "\n", "azimuth", "=", "azimuth", ",", "elevation", "=", "30.", ")", "\n", "\n", "# Sample colormap and adjust alpha", "\n", "colormap", "=", "get_colormap", "(", "'hsl'", ",", "value", "=", "1.0", ",", "saturation", "=", "0.8", ",", "ncolors", "=", "nbr_classes", ")", "\n", "pos_color", "=", "np", ".", "zeros", "(", "(", "positions", ".", "shape", "[", "1", "]", ",", "4", ")", ")", "\n", "cm_sampled", "=", "[", "]", "\n", "for", "i", ",", "(", "iclass", ",", "sample_f", ")", "in", "enumerate", "(", "zip", "(", "suncg_labels", "[", "1", ":", "]", ",", "np", ".", "linspace", "(", "0", ",", "1", ",", "nbr_classes", "-", "1", ")", ")", ")", ":", "\n", "        ", "if", "iclass", ".", "lower", "(", ")", "in", "(", "'floor'", ",", "'wall'", ",", "'window'", ")", ":", "\n", "            ", "alpha", "=", "0.5", "\n", "", "elif", "iclass", ".", "lower", "(", ")", "==", "'ceiling'", ":", "\n", "            ", "alpha", "=", "0.0", "\n", "", "else", ":", "\n", "            ", "alpha", "=", "1.0", "\n", "", "base_color", "=", "colormap", "[", "sample_f", "]", ".", "rgba", ".", "flatten", "(", ")", "\n", "base_color", "[", "3", "]", "=", "alpha", "\n", "pos_color", "[", "i", "==", "gridLabelsMasked", "]", "=", "base_color", "\n", "\n", "", "Scatter3D", "=", "scene", ".", "visuals", ".", "create_visual_node", "(", "visuals", ".", "MarkersVisual", ")", "\n", "p1", "=", "Scatter3D", "(", "parent", "=", "view", ".", "scene", ")", "\n", "p1", ".", "set_gl_state", "(", "'translucent'", ",", "blend", "=", "True", ",", "depth_test", "=", "True", ")", "\n", "p1", ".", "set_data", "(", "positions", ".", "T", ",", "face_color", "=", "pos_color", ",", "symbol", "=", "'disc'", ",", "size", "=", "10", ",", "\n", "edge_width", "=", "0.5", ",", "edge_color", "=", "'k'", ")", "\n", "\n", "p1", ".", "transform", "=", "scene", ".", "transforms", ".", "MatrixTransform", "(", ")", "\n", "p1", ".", "transform", ".", "scale", "(", "3", "*", "[", "vox_unit", "]", ")", "\n", "p1", ".", "transform", ".", "translate", "(", "3", "*", "[", "-", "vox_unit", "*", "gridLabels", ".", "shape", "[", "0", "]", "/", "2.0", "]", ")", "\n", "\n", "if", "save_path", "is", "None", ":", "\n", "        ", "return", "\n", "\n", "", "def", "make_frame", "(", "t", ")", ":", "\n", "        ", "view", ".", "camera", ".", "set_state", "(", "{", "'azimuth'", ":", "azimuth", "+", "t", "*", "90", "}", ")", "\n", "return", "canvas", ".", "render", "(", ")", "\n", "\n", "", "if", "animate", ":", "\n", "        ", "animation", "=", "VideoClip", "(", "make_frame", ",", "duration", "=", "3", ")", "\n", "animation", ".", "write_gif", "(", "'voxel.gif'", ",", "fps", "=", "8", ",", "opt", "=", "'OptimizePlus'", ")", "\n", "", "else", ":", "\n", "        ", "img", "=", "canvas", ".", "render", "(", ")", "\n", "cv2", ".", "imwrite", "(", "'voxel.png'", ",", "img", "[", ":", ":", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.voxel.getFigure": [[11, 15], ["numpy.array", "matplotlib.figure"], "function", ["None"], ["from", "mpl_toolkits", ".", "mplot3d", ".", "art3d", "import", "Poly3DCollection", "\n", "# from matplotlib.patches import Polygon, Rectangle", "\n", "\n", "from", "shapely", ".", "geometry", "import", "Polygon", ",", "MultiPolygon", ",", "Point", ",", "MultiPoint", "\n", "from", "shapely", ".", "prepared", "import", "prep", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.voxel.compareVoxels": [[16, 24], ["len", "voxel.getFigure", "enumerate", "grid_dict.items", "matplotlib.subplot", "fcn", "matplotlib.title"], "function", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.voxel.getFigure"], ["from", "shapely", ".", "ops", "import", "polygonize", "\n", "import", "os", ".", "path", "as", "osp", "\n", "from", "utils", "import", "getFigure", "\n", "import", "math", "\n", "import", "pickle", "\n", "import", "binvox_rw", "\n", "from", "sklearn", ".", "neighbors", "import", "NearestNeighbors", "\n", "\n", "class", "NNCache", ":", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.voxel.plotVoxels": [[25, 87], ["matplotlib.get_cmap", "numpy.nonzero", "plt.get_cmap.", "numpy.unique", "fig.gca.legend", "matplotlib.close", "voxel.getFigure", "getFigure.gca", "vox_min.reshape", "numpy.mod", "legend_entries.append", "fig.gca.scatter", "scipy.linalg.null_space", "numpy.linalg.norm", "fig.gca.quiver", "fig.gca.view_init", "matplotlib.animation.FuncAnimation", "matplotlib.animation.FuncAnimation.save", "matplotlib.savefig", "voxel.getFigure", "matplotlib.scatter", "matplotlib.savefig", "matplotlib.close", "numpy.vstack", "numpy.vstack", "label_name.lower", "fig.gca.view_init", "numpy.arange", "math.atan2", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.voxel.getFigure", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.voxel.getFigure"], ["    ", "def", "__init__", "(", "self", ",", "cache_dir", ",", "model_dir", ")", ":", "\n", "        ", "self", ".", "cache_dir", "=", "cache_dir", "\n", "self", ".", "model_dir", "=", "model_dir", "\n", "\n", "", "def", "query", "(", "self", ",", "X", ",", "obj_id", ",", "radius", ")", ":", "\n", "        ", "picke_fname", "=", "osp", ".", "join", "(", "self", ".", "cache_dir", ",", "'{}.pickle'", ".", "format", "(", "obj_id", ")", ")", "\n", "try", ":", "\n", "            ", "with", "open", "(", "picke_fname", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "nbrs", "=", "pickle", ".", "load", "(", "f", ")", "\n", "mask", "=", "self", ".", "_get_NN_mask", "(", "nbrs", ",", "X", ",", "radius", ")", "\n", "", "", "except", "FileNotFoundError", ":", "\n", "            ", "binvox_filename", "=", "osp", ".", "join", "(", "self", ".", "model_dir", ",", "obj_id", ",", "'{}.binvox'", ".", "format", "(", "obj_id", ")", ")", "\n", "with", "open", "(", "binvox_filename", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "obj_bv", "=", "binvox_rw", ".", "read_as_coord_array", "(", "f", ",", "fix_coords", "=", "False", ")", "\n", "", "nbrs", "=", "NearestNeighbors", "(", "n_neighbors", "=", "1", ",", "algorithm", "=", "'ball_tree'", ")", ".", "fit", "(", "obj_bv", ".", "data", ".", "T", ")", "\n", "\n", "with", "open", "(", "picke_fname", ",", "'wb'", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "nbrs", ",", "f", ")", "\n", "", "mask", "=", "self", ".", "_get_NN_mask", "(", "nbrs", ",", "X", ",", "radius", ")", "\n", "\n", "", "return", "mask", "\n", "\n", "", "def", "_get_NN_mask", "(", "self", ",", "nbrs", ",", "X", ",", "radius", ")", ":", "\n", "        ", "distances", ",", "indices", "=", "nbrs", ".", "kneighbors", "(", "X", ".", "T", ")", "\n", "matched", "=", "distances", ".", "ravel", "(", ")", "<", "radius", "\n", "return", "matched", "\n", "\n", "\n", "", "", "class", "VoxelSearch", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "voxels", ",", "radius", "=", "1.1", ")", ":", "\n", "        ", "assert", "radius", ">", "1", "\n", "self", ".", "occupied", "=", "voxels", "\n", "cube_side", "=", "math", ".", "ceil", "(", "2", "*", "radius", ")", "\n", "center", "=", "np", ".", "full", "(", "3", ",", "cube_side", "/", "2.0", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "3", "*", "[", "cube_side", "]", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "for", "i", ",", "m", "in", "enumerate", "(", "mask", ".", "flat", ")", ":", "\n", "            ", "multi_index", "=", "np", ".", "unravel_index", "(", "i", ",", "mask", ".", "shape", ")", "\n", "dist", "=", "np", ".", "linalg", ".", "norm", "(", "multi_index", "-", "center", "+", "0.5", ")", "\n", "mask", "[", "multi_index", "]", "=", "(", "dist", "<=", "radius", ")", "\n", "", "self", ".", "directions", "=", "np", ".", "array", "(", "tuple", "(", "np", ".", "nonzero", "(", "mask", ")", ")", ")", ".", "T", "\n", "\n", "# Greedy NN", "\n", "", "def", "_single_nn", "(", "self", ",", "center", ")", ":", "\n", "        ", "self", ".", "center", "=", "center", "\n", "self", ".", "queue", "=", "[", "np", ".", "floor", "(", "center", ")", ".", "astype", "(", "np", ".", "int", ")", "]", "\n", "self", ".", "visited_and_queued", "=", "set", "(", "tuple", "(", "self", ".", "queue", "[", "0", "]", ")", ")", "\n", "\n", "while", "len", "(", "self", ".", "queue", ")", ">", "0", ":", "\n", "            ", "vox_idx", "=", "self", ".", "queue", ".", "pop", "(", ")", "\n", "\n", "#Within radius?", "\n", "# print('dist', (vox_idx + 0.5 - self.center), np.sqrt(np.sum((vox_idx + 0.5 - self.center)**2)))", "\n", "if", "np", ".", "sum", "(", "(", "vox_idx", "+", "0.5", "-", "self", ".", "center", ")", "**", "2", ")", ">", "self", ".", "radius2", ":", "\n", "                ", "continue", "\n", "\n", "#Only use valid index", "\n", "", "if", "np", ".", "any", "(", "vox_idx", "<", "0", ")", "or", "np", ".", "any", "(", "vox_idx", ">=", "self", ".", "occupied", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "continue", "\n", "\n", "#Is this our neighbour?", "\n", "", "if", "self", ".", "occupied", "[", "tuple", "(", "vox_idx", ")", "]", ":", "\n", "                ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.voxel.plotVoxelScalar": [[88, 122], ["numpy.nonzero", "fig.gca.scatter", "matplotlib.colorbar", "voxel.getFigure", "getFigure.gca", "numpy.ones", "vox_min.reshape", "scipy.linalg.null_space", "fig.gca.view_init", "matplotlib.close", "numpy.vstack", "matplotlib.animation.FuncAnimation", "matplotlib.animation.FuncAnimation.save", "matplotlib.savefig", "math.atan2", "fig.gca.view_init", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.voxel.getFigure"], ["# Add neighbouring voxels for exploration", "\n", "", "new_idx", "=", "self", ".", "directions", "+", "vox_idx", "\n", "for", "idx", "in", "new_idx", ":", "\n", "                ", "idx_tuple", "=", "tuple", "(", "idx", ")", "\n", "if", "not", "idx_tuple", "in", "self", ".", "visited_and_queued", ":", "\n", "                    ", "self", ".", "visited_and_queued", ".", "add", "(", "idx_tuple", ")", "\n", "self", ".", "queue", ".", "append", "(", "idx", ")", "\n", "\n", "#Nothing found", "\n", "", "", "", "return", "False", "\n", "\n", "", "def", "_single_nn_simple", "(", "self", ",", "center", ")", ":", "\n", "        ", "center_idx", "=", "np", ".", "round", "(", "center", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "query_idx", "=", "self", ".", "directions", "+", "center_idx", "\n", "valid_mask", "=", "np", ".", "all", "(", "query_idx", ">", "0", ",", "axis", "=", "1", ")", "&", "np", ".", "all", "(", "query_idx", "<", "self", ".", "occupied", ".", "shape", "[", "0", "]", ",", "axis", "=", "1", ")", "\n", "return", "np", ".", "any", "(", "self", ".", "occupied", "[", "tuple", "(", "query_idx", "[", "valid_mask", "]", ".", "T", ")", "]", ")", "\n", "\n", "\n", "", "def", "nn_search", "(", "self", ",", "coords", ",", "radius", "=", "None", ")", ":", "\n", "        ", "assert", "coords", ".", "shape", "[", "1", "]", "==", "3", ",", "\"coords must be Nx3\"", "\n", "if", "radius", ":", "\n", "            ", "self", ".", "radius2", "=", "radius", "**", "2", "\n", "return", "np", ".", "array", "(", "[", "self", ".", "_single_nn", "(", "c", ")", "for", "c", "in", "coords", "]", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "", "else", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "self", ".", "_single_nn_simple", "(", "c", ")", "for", "c", "in", "coords", "]", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "\n", "\n", "\n", "\n", "\n", "", "", "", "class", "SUNCGCamera", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "csvrow", ")", ":", "\n", "        ", "self", ".", "pos", "=", "np", ".", "array", "(", "csvrow", "[", ":", "3", "]", ",", "dtype", "=", "np", ".", "float", ")", "\n", "self", ".", "front", "=", "np", ".", "array", "(", "csvrow", "[", "4", ":", "7", "]", ",", "dtype", "=", "np", ".", "float", ")", "\n", "self", ".", "up", "=", "np", ".", "array", "(", "csvrow", "[", "8", ":", "11", "]", ",", "dtype", "=", "np", ".", "float", ")", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.voxel.plotTSDF": [[124, 155], ["numpy.nonzero", "voxel.getFigure", "getFigure.gca", "fig.gca.scatter", "matplotlib.colorbar", "matplotlib.close", "voxel.getFigure", "matplotlib.hist", "matplotlib.savefig", "matplotlib.close", "voxel.getFigure", "matplotlib.hist", "matplotlib.savefig", "matplotlib.close", "matplotlib.animation.FuncAnimation", "matplotlib.animation.FuncAnimation.save", "matplotlib.savefig", "numpy.abs", "numpy.abs", "fig.gca.view_init", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.voxel.getFigure", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.voxel.getFigure", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.voxel.getFigure"], ["\n", "", "", "def", "constructK", "(", ")", ":", "\n", "    ", "cam_vertical_fov", "=", "60", "#Degrees", "\n", "im_height", "=", "480", "\n", "im_width", "=", "600", "\n", "focal_l", "=", "im_height", "/", "(", "2", "*", "np", ".", "tan", "(", "(", "cam_vertical_fov", "/", "2", ")", "*", "np", ".", "pi", "/", "180", ")", ")", "\n", "K", "=", "np", ".", "zeros", "(", "[", "3", ",", "3", "]", ")", "\n", "K", "[", "0", ",", "0", "]", "=", "K", "[", "1", ",", "1", "]", "=", "focal_l", "\n", "K", "[", "0", ",", "2", "]", "=", "im_width", "/", "2", "\n", "K", "[", "1", ",", "2", "]", "=", "im_height", "/", "2", "\n", "K", "[", "2", ",", "2", "]", "=", "1", "\n", "return", "K", "\n", "\n", "", "def", "boxOverlap", "(", "box1_min", ",", "box1_max", ",", "box2_min", ",", "box2_max", ")", ":", "\n", "    ", "overlap", "=", "True", "\n", "for", "i", "in", "range", "(", "box1_min", ".", "size", ")", ":", "\n", "        ", "overlap", "&=", "(", "box1_min", "[", "i", "]", "<", "box2_max", "[", "i", "]", "and", "\n", "box2_min", "[", "i", "]", "<", "box1_max", "[", "i", "]", ")", "\n", "", "return", "overlap", "\n", "\n", "", "def", "sameFloor", "(", "voxOriginWorld", ",", "bbox_min", ",", "bbox_max", ")", ":", "\n", "    ", "return", "(", "bbox_min", "[", "1", "]", "<", "voxOriginWorld", "[", "1", "]", "and", "\n", "voxOriginWorld", "[", "1", "]", "<", "bbox_max", "[", "1", "]", ")", "\n", "\n", "", "def", "_plotPoly", "(", "points", ",", "poly", ",", "s_poly", ",", "debug_dir", ")", ":", "\n", "    ", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "subplot", "(", "2", ",", "1", ",", "1", ")", "\n", "plt", ".", "plot", "(", "poly", "[", ":", ",", "0", "]", ",", "poly", "[", ":", ",", "1", "]", ")", "\n", "plt", ".", "plot", "(", "points", "[", ":", ",", "0", "]", ",", "points", "[", ":", ",", "1", "]", ",", "'.'", ")", "\n", "plt", ".", "axis", "(", "'equal'", ")", "\n", "plt", ".", "subplot", "(", "2", ",", "1", ",", "2", ")", "\n", "plt", ".", "plot", "(", "points", "[", ":", ",", "0", "]", ",", "points", "[", ":", ",", "1", "]", ",", "'.'", ")", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.scripts.sweep_params.get_cfg": [[9, 18], ["sorted", "itertools.product", "sweep_cfg.keys", "enumerate", "desc.replace().replace", "desc.replace"], "function", ["None"], ["def", "get_cfg", "(", "sweep_cfg", ",", "cfg", ")", ":", "\n", "    ", "params", "=", "sorted", "(", "sweep_cfg", ".", "keys", "(", ")", ")", "\n", "sweep_values", "=", "[", "sweep_cfg", "[", "p", "]", "for", "p", "in", "params", "]", "\n", "for", "vals", "in", "itertools", ".", "product", "(", "*", "sweep_values", ")", ":", "\n", "        ", "desc", "=", "''", "\n", "for", "i", ",", "name", "in", "enumerate", "(", "params", ")", ":", "\n", "            ", "cfg", "[", "name", "]", "=", "vals", "[", "i", "]", "\n", "desc", "+=", "'{}:{}|'", ".", "format", "(", "name", ",", "vals", "[", "i", "]", ")", "\n", "", "yield", "cfg", ",", "desc", ".", "replace", "(", "\"'\"", ",", "\"\"", ")", ".", "replace", "(", "\" \"", ",", "\"\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.scripts.train_mnist.TrainOnMNIST.init_histograms": [[31, 43], ["ssc.visualization.histogram.HistogramGroup", "train_mnist.TrainOnMNIST.histograms.add_type", "train_mnist.TrainOnMNIST.cfg.get"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.pr.PRGroup.add_type", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHousesMemory.get"], ["    ", "def", "init_histograms", "(", "self", ")", ":", "\n", "        ", "self", ".", "histograms", "=", "HistogramGroup", "(", "{", "\n", "'avg_max_scores'", ":", "[", "0", ",", "1.0", "]", ",", "\n", "'entropy_top'", ":", "[", "0", ",", "0.3", "]", ",", "\n", "'var_e_top'", ":", "[", "0", ",", "0.2", "]", ",", "\n", "'var_a_top'", ":", "[", "0", ",", "0.2", "]", "\n", "}", ",", "\n", "metric_pairs", "=", "[", "\n", "(", "'avg_max_scores'", ",", "'entropy_top'", ")", "\n", "]", ",", "\n", "make_pdf", "=", "self", ".", "cfg", ".", "get", "(", "'make_pdf'", ",", "False", ")", ")", "\n", "self", ".", "histograms", ".", "add_type", "(", "'semantic'", ",", "self", ".", "val_dataloader", ".", "dataset", ".", "classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.scripts.train_mnist.TrainOnMNIST.init_prs": [[44, 51], ["ssc.visualization.pr.PRGroup", "train_mnist.TrainOnMNIST.prs.add_type", "train_mnist.TrainOnMNIST.cfg.get"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.pr.PRGroup.add_type", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHousesMemory.get"], ["", "def", "init_prs", "(", "self", ")", ":", "\n", "        ", "self", ".", "prs", "=", "PRGroup", "(", "[", "'avg_max_scores'", ",", "'entropy_top'", "]", ",", "\n", "[", "[", "0.5", ",", "0.95", "]", ",", "[", "0.05", ",", "0.5", "]", "]", ",", "\n", "[", "0.05", ",", "0.05", "]", ",", "[", "True", ",", "False", "]", ",", "device", "=", "self", ".", "device", ",", "\n", "make_pdf", "=", "self", ".", "cfg", ".", "get", "(", "'make_pdf'", ",", "False", ")", ")", "\n", "\n", "self", ".", "prs", ".", "add_type", "(", "'semantic'", ",", "self", ".", "val_dataloader", ".", "dataset", ".", "classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.scripts.train_mnist.TrainOnMNIST.run_epoch": [[52, 210], ["enumerate", "tblogger.add_scalar", "tblogger.add_scalar", "tblogger.add_scalar", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "train_mnist.TrainOnMNIST.init_histograms", "train_mnist.TrainOnMNIST.init_prs", "train_mnist.TrainOnMNIST.forward", "loss.item", "tblogger.add_scalar", "tblogger.add_scalar", "train_mnist.TrainOnMNIST.net.named_modules", "tblogger.add_histogram", "tblogger.add_scalar", "tblogger.add_scalar", "ssc.utils.metrics.plot_confusion", "tblogger.add_figure", "train_mnist.TrainOnMNIST.histograms.plot_tb", "train_mnist.TrainOnMNIST.histograms.plot_bhattacharyya_tb", "train_mnist.TrainOnMNIST.prs.plot_tb", "train_mnist.TrainOnMNIST.cfg.get", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "data.to", "target.to", "train_mnist.TrainOnMNIST.optimizer.zero_grad", "loss.backward", "train_mnist.TrainOnMNIST.optimizer.step", "loss.item", "train_mnist.TrainOnMNIST.histograms.add", "train_mnist.TrainOnMNIST.prs.add", "ssc.utils.metrics.compute_confusion", "score.exp.exp.sum", "range", "len", "len", "isinstance", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "tblogger.add_histogram", "tblogger.add_histogram", "len", "torch.zeros.to().numpy", "torch.zeros.to().numpy", "torch.zeros.to().numpy", "len", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "log_score.max", "score.exp.exp.exp", "min", "matplotlib.pyplot.figure", "matplotlib.pyplot.imshow", "matplotlib.pyplot.title", "tblogger.add_figure", "matplotlib.pyplot.figure", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "enumerate", "matplotlib.pyplot.tight_layout", "tblogger.add_figure", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "tblogger.add_histogram", "tblogger.add_histogram", "all_weights.append", "all_weights_mu.append", "all_weights_sigma.append", "isinstance", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "float", "len", "result[].max", "data[].cpu().numpy().squeeze", "result[].to().numpy", "matplotlib.pyplot.subplot", "plt_f", "plt_f", "matplotlib.pyplot.title", "m.sample_weights().data.reshape", "m.mu_weight.data.reshape", "torch.exp.reshape", "torch.exp.reshape", "torch.exp.reshape", "tblogger.add_histogram", "all_weights.append", "torch.trace", "torch.trace", "torch.trace", "torch.trace", "torch.trace", "torch.trace", "torch.trace", "torch.trace", "torch.trace", "torch.zeros.to", "torch.zeros.to", "torch.zeros.to", "result[].max", "matplotlib.pyplot.legend", "m.weight.data.reshape", "ssc.visualization.weight.plot_sample_net", "data[].cpu().numpy", "result[].to", "tblogger.add_figure", "m.sample_weights", "data[].cpu"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.scripts.train.TrainNet.init_histograms", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.scripts.train.TrainNet.init_prs", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.layers.BReduceToProb.forward", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.utils.metrics.plot_confusion", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.pr.PRGroup.plot_tb", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.histogram.HistogramGroup.plot_bhattacharyya_tb", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.pr.PRGroup.plot_tb", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHousesMemory.get", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.pr.PR.add", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.pr.PR.add", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.utils.metrics.compute_confusion", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.weight.plot_sample_net", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.layers.BConv.sample_weights"], ["", "def", "run_epoch", "(", "self", ")", ":", "\n", "        ", "train", "=", "self", ".", "net", ".", "training", "\n", "dataloader", "=", "self", ".", "train_dataloader", "if", "train", "else", "self", ".", "val_dataloader", "\n", "tblogger", "=", "self", ".", "tblogger", "[", "'train'", "]", "if", "train", "else", "self", ".", "tblogger", "[", "'val'", "]", "\n", "acc_loss", "=", "0", "\n", "acc_kl", "=", "0", "\n", "if", "not", "train", ":", "\n", "            ", "confusion", "=", "torch", ".", "zeros", "(", "[", "self", ".", "nclass", ",", "self", ".", "nclass", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "self", ".", "device", ")", "\n", "acc_score", "=", "0", "\n", "self", ".", "init_histograms", "(", ")", "\n", "self", ".", "init_prs", "(", ")", "\n", "\n", "", "for", "i_batch", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "\n", "            ", "batch_size", "=", "data", ".", "shape", "[", "0", "]", "\n", "first_val", "=", "(", "i_batch", "==", "0", ")", "and", "not", "train", "\n", "sample_output", "=", "(", "not", "train", ")", "\n", "\n", "if", "train", "and", "self", ".", "cfg", ".", "get", "(", "'excluded_labels'", ",", "[", "]", ")", ":", "\n", "                ", "l_mask", "=", "torch", ".", "ones", "(", "batch_size", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "for", "l", "in", "self", ".", "cfg", "[", "'excluded_labels'", "]", ":", "\n", "                    ", "l_mask", "&=", "(", "target", "!=", "l", ")", "\n", "", "target", "=", "target", "[", "l_mask", "]", "\n", "data", "=", "data", "[", "l_mask", "]", "\n", "batch_size", "=", "data", ".", "shape", "[", "0", "]", "\n", "\n", "", "data", ",", "target", "=", "data", ".", "to", "(", "self", ".", "device", ")", ",", "target", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# Forward pass", "\n", "result", "=", "self", ".", "forward", "(", "data", ",", "target", ",", "i_batch", ")", "\n", "loss", "=", "result", "[", "'loss'", "]", "\n", "kl", "=", "result", "[", "'kl'", "]", "\n", "log_score", "=", "result", "[", "'log_score'", "]", "\n", "\n", "# Zero gradients, perform a backward pass, and update the weights.", "\n", "if", "train", ":", "\n", "                ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "# Metrics", "\n", "", "batch_nbr", "=", "self", ".", "epoch", "*", "len", "(", "dataloader", ")", "+", "i_batch", "\n", "acc_loss", "+=", "loss", ".", "item", "(", ")", "\n", "acc_kl", "+=", "kl", "\n", "tblogger", ".", "add_scalar", "(", "'batch_loss'", ",", "loss", ".", "item", "(", ")", ",", "global_step", "=", "batch_nbr", ")", "\n", "tblogger", ".", "add_scalar", "(", "'batch_kl'", ",", "kl", ",", "global_step", "=", "batch_nbr", ")", "\n", "\n", "if", "not", "train", ":", "\n", "                ", "if", "'mean_score'", "in", "result", ":", "\n", "                    ", "try", ":", "\n", "                        ", "score", ",", "pred_batch", "=", "result", "[", "'fused_score'", "]", ".", "max", "(", "1", ")", "\n", "", "except", "KeyError", ":", "\n", "                        ", "score", ",", "pred_batch", "=", "result", "[", "'mean_score'", "]", ".", "max", "(", "1", ")", "\n", "", "b_idx", "=", "torch", ".", "arange", "(", "batch_size", ",", "dtype", "=", "int", ")", "\n", "result", "[", "'avg_max_scores'", "]", "=", "score", "\n", "result", "[", "'var_a_top'", "]", "=", "result", "[", "'var_aleatoric'", "]", "[", "b_idx", ",", "pred_batch", "]", "\n", "result", "[", "'var_e_top'", "]", "=", "result", "[", "'var_epistemic'", "]", "[", "b_idx", ",", "pred_batch", "]", "\n", "result", "[", "'var_top'", "]", "=", "result", "[", "'var_a_top'", "]", "+", "result", "[", "'var_e_top'", "]", "\n", "result", "[", "'entropy_top'", "]", "=", "result", "[", "'entropy'", "]", "[", "b_idx", ",", "pred_batch", "]", "\n", "\n", "", "else", ":", "\n", "                    ", "score", ",", "pred_batch", "=", "log_score", ".", "max", "(", "1", ")", "\n", "score", "=", "score", ".", "exp", "(", ")", "\n", "result", "[", "'avg_max_scores'", "]", "=", "score", "\n", "\n", "", "self", ".", "histograms", ".", "add", "(", "pred_batch", ",", "target", ",", "result", ")", "\n", "self", ".", "prs", ".", "add", "(", "pred_batch", ",", "target", ",", "result", ")", "\n", "\n", "batch_confusion", "=", "compute_confusion", "(", "pred_batch", ",", "target", ",", "self", ".", "nclass", ")", "\n", "confusion", "+=", "batch_confusion", "\n", "acc_score", "+=", "score", ".", "sum", "(", ")", "\n", "\n", "# Plot graph on first epoch and batch", "\n", "# if self.first_epoch and i_batch == 0:", "\n", "#     if self.bayesian and not self.net.fixed:", "\n", "#         self.net.fix_parameters()", "\n", "#         tblogger.add_graph(self.net.bnn, data)", "\n", "#         self.net.release_parameters()", "\n", "#     else:", "\n", "#         tblogger.add_graph(self.net, data)", "\n", "\n", "# Plot examples in first validation batch", "\n", "", "if", "first_val", ":", "\n", "                ", "for", "ex_idx", "in", "range", "(", "min", "(", "self", ".", "cfg", "[", "'nbr_examples'", "]", ",", "batch_size", ")", ")", ":", "\n", "                    ", "ex_fig", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "imshow", "(", "data", "[", "ex_idx", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", ")", "\n", "title_str", "=", "'Pred: {}, GT: {}'", ".", "format", "(", "\n", "dataloader", ".", "dataset", ".", "classes", "[", "pred_batch", "[", "ex_idx", "]", "]", ",", "\n", "dataloader", ".", "dataset", ".", "classes", "[", "target", "[", "ex_idx", "]", "]", "\n", ")", "\n", "if", "'mean_score'", "in", "result", ":", "\n", "                        ", "title_str", "+=", "'\\nscore: {:.2g}, var_a: {:.2g}, var_e: {:.2g}'", ".", "format", "(", "\n", "score", "[", "ex_idx", "]", ",", "\n", "result", "[", "'var_a_top'", "]", "[", "ex_idx", "]", ",", "\n", "result", "[", "'var_e_top'", "]", "[", "ex_idx", "]", "\n", ")", "\n", "", "else", ":", "\n", "                        ", "title_str", "+=", "'\\nscore: {:.2g}'", ".", "format", "(", "score", "[", "ex_idx", "]", ")", "\n", "", "plt", ".", "title", "(", "title_str", ")", "\n", "\n", "tblogger", ".", "add_figure", "(", "\"Example {}\"", ".", "format", "(", "ex_idx", ")", ",", "ex_fig", ",", "global_step", "=", "self", ".", "epoch", ",", "close", "=", "True", ")", "\n", "\n", "", "if", "'mean_score'", "in", "result", ":", "\n", "                    ", "corr_mask", "=", "(", "pred_batch", "==", "target", ")", ".", "to", "(", "'cpu'", ")", ".", "numpy", "(", ")", "\n", "var_fig", "=", "plt", ".", "figure", "(", ")", "\n", "r_idx", "=", "numpy", ".", "arange", "(", "batch_size", ")", "\n", "for", "ki", ",", "key", "in", "enumerate", "(", "[", "'avg_max_scores'", ",", "'var_a_top'", ",", "'var_e_top'", ",", "'var_top'", ",", "'entropy_top'", "]", ")", ":", "\n", "                        ", "r", "=", "result", "[", "key", "]", ".", "to", "(", "'cpu'", ")", ".", "numpy", "(", ")", "\n", "plt_f", "=", "plt", ".", "semilogy", "if", "'var'", "in", "key", "else", "plt", ".", "plot", "\n", "plt", ".", "subplot", "(", "2", ",", "3", ",", "ki", "+", "1", ")", "\n", "plt_f", "(", "r_idx", "[", "corr_mask", "]", ",", "r", "[", "corr_mask", "]", ".", "flat", ",", "'.'", ",", "label", "=", "'Correct'", ",", ")", "\n", "plt_f", "(", "r_idx", "[", "~", "corr_mask", "]", ",", "r", "[", "~", "corr_mask", "]", ".", "flat", ",", "'.'", ",", "label", "=", "'Incorrect'", ")", "\n", "plt", ".", "title", "(", "key", ")", "\n", "if", "ki", "==", "1", ":", "\n", "                            ", "plt", ".", "legend", "(", ")", "\n", "", "", "plt", ".", "tight_layout", "(", ")", "\n", "tblogger", ".", "add_figure", "(", "\"Variance\"", ",", "var_fig", ",", "global_step", "=", "self", ".", "epoch", ",", "close", "=", "True", ")", "\n", "\n", "\n", "#Accumulate metrics", "\n", "", "", "", "tblogger", ".", "add_scalar", "(", "'epoch_loss'", ",", "acc_loss", "/", "len", "(", "dataloader", ".", "dataset", ")", ",", "global_step", "=", "self", ".", "epoch", ")", "\n", "tblogger", ".", "add_scalar", "(", "'epoch_kl'", ",", "acc_kl", "/", "len", "(", "dataloader", ".", "dataset", ")", ",", "global_step", "=", "self", ".", "epoch", ")", "\n", "tblogger", ".", "add_scalar", "(", "'lr'", ",", "self", ".", "lr", ",", "global_step", "=", "self", ".", "epoch", ")", "\n", "if", "train", ":", "\n", "            ", "all_weights", "=", "[", "]", "\n", "all_weights_mu", "=", "[", "]", "\n", "all_weights_sigma", "=", "[", "]", "\n", "for", "m_name", ",", "m", "in", "self", ".", "net", ".", "named_modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "BConv", ")", ":", "\n", "                    ", "sigma", "=", "torch", ".", "exp", "(", "m", ".", "sigma_weight", ".", "data", ")", "\n", "tblogger", ".", "add_histogram", "(", "m_name", "+", "'_mu'", ",", "m", ".", "mu_weight", ".", "data", ",", "self", ".", "epoch", ")", "\n", "tblogger", ".", "add_histogram", "(", "m_name", "+", "'_sigma'", ",", "sigma", ",", "self", ".", "epoch", ")", "\n", "all_weights", ".", "append", "(", "m", ".", "sample_weights", "(", ")", ".", "data", ".", "reshape", "(", "-", "1", ")", ")", "\n", "all_weights_mu", ".", "append", "(", "m", ".", "mu_weight", ".", "data", ".", "reshape", "(", "-", "1", ")", ")", "\n", "all_weights_sigma", ".", "append", "(", "sigma", ".", "reshape", "(", "-", "1", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "Conv1d", ",", "nn", ".", "Conv2d", ",", "nn", ".", "Conv3d", ")", ")", ":", "\n", "                    ", "tblogger", ".", "add_histogram", "(", "m_name", ",", "m", ".", "weight", ".", "data", ",", "self", ".", "epoch", ")", "\n", "all_weights", ".", "append", "(", "m", ".", "weight", ".", "data", ".", "reshape", "(", "-", "1", ")", ")", "\n", "\n", "if", "'sample_net'", "in", "m_name", ":", "\n", "                        ", "sample_w_fig", "=", "plot_sample_net", "(", "m_name", ",", "m", ",", "self", ".", "net", ")", "\n", "if", "sample_w_fig", ":", "\n", "                            ", "tblogger", ".", "add_figure", "(", "\"Sample weights{}\"", ".", "format", "(", "m_name", ")", ",", "sample_w_fig", ",", "global_step", "=", "self", ".", "epoch", ",", "close", "=", "True", ")", "\n", "\n", "", "", "", "", "tblogger", ".", "add_histogram", "(", "'all_weights'", ",", "torch", ".", "cat", "(", "all_weights", ")", ",", "self", ".", "epoch", ")", "\n", "if", "all_weights_mu", ":", "\n", "                ", "tblogger", ".", "add_histogram", "(", "'all_weights_mu'", ",", "torch", ".", "cat", "(", "all_weights_mu", ")", ",", "self", ".", "epoch", ")", "\n", "tblogger", ".", "add_histogram", "(", "'all_weights_sigma'", ",", "torch", ".", "cat", "(", "all_weights_sigma", ")", ",", "self", ".", "epoch", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "accuracy", "=", "100.0", "*", "float", "(", "torch", ".", "trace", "(", "confusion", ")", ")", "/", "len", "(", "dataloader", ".", "dataset", ")", "\n", "tblogger", ".", "add_scalar", "(", "'accuracy'", ",", "accuracy", ",", "global_step", "=", "self", ".", "epoch", ")", "\n", "tblogger", ".", "add_scalar", "(", "'avg_score'", ",", "acc_score", "/", "len", "(", "dataloader", ".", "dataset", ")", ",", "global_step", "=", "self", ".", "epoch", ")", "\n", "conf_fig", "=", "plot_confusion", "(", "confusion", ".", "to", "(", "'cpu'", ")", ".", "numpy", "(", ")", ",", "dataloader", ".", "dataset", ".", "classes", ")", "\n", "tblogger", ".", "add_figure", "(", "\"Confusion Matrix\"", ",", "conf_fig", ",", "global_step", "=", "self", ".", "epoch", ",", "close", "=", "True", ")", "\n", "self", ".", "histograms", ".", "plot_tb", "(", "tblogger", ",", "self", ".", "epoch", ")", "\n", "self", ".", "histograms", ".", "plot_bhattacharyya_tb", "(", "tblogger", ",", "self", ".", "epoch", ")", "\n", "self", ".", "prs", ".", "plot_tb", "(", "tblogger", ",", "self", ".", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.scripts.train_mnist.main": [[212, 241], ["os.makedirs", "os.makedirs", "torch.device", "torch.device", "torch.device", "git.Repo", "ssc.scripts.train.seed", "torchvision.datasets.MNIST", "torchvision.datasets.MNIST", "train_mnist.TrainOnMNIST", "TrainOnMNIST.train", "git.Repo.git.diff", "len", "TrainOnMNIST.load_checkpoint", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.scripts.train.seed", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.SampleNet.train", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.scripts.train.TrainNet.load_checkpoint"], ["", "", "", "def", "main", "(", "cfg", ",", "result_dir", ",", "checkpoint", "=", "None", ",", "reset_epoch", "=", "False", ")", ":", "\n", "\n", "    ", "os", ".", "makedirs", "(", "result_dir", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:0'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "# Get git repo version", "\n", "meta_info", "=", "{", "'checkpoint'", ":", "checkpoint", "}", "\n", "repo", "=", "git", ".", "Repo", "(", "search_parent_directories", "=", "True", ")", "\n", "meta_info", "[", "'version'", "]", "=", "repo", ".", "head", ".", "object", ".", "hexsha", "\n", "meta_info", "[", "'git_diff'", "]", "=", "'<pre><code>{}</code></pre>'", ".", "format", "(", "repo", ".", "git", ".", "diff", "(", "'--ignore-submodules'", ")", ")", "\n", "del", "repo", "\n", "\n", "# Make sure results are reproducible", "\n", "seed", "(", ")", "\n", "train_data", "=", "datasets", ".", "MNIST", "(", "'../../data/MNIST'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.1307", ",", ")", ",", "(", "0.3081", ",", ")", ")", "\n", "]", ")", ")", "\n", "val_data", "=", "datasets", ".", "MNIST", "(", "'../../data/MNIST'", ",", "train", "=", "False", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.1307", ",", ")", ",", "(", "0.3081", ",", ")", ")", "\n", "]", ")", ")", "\n", "trainer", "=", "TrainOnMNIST", "(", "cfg", ",", "device", ",", "len", "(", "train_data", ".", "classes", ")", ",", "result_dir", ",", "train_dataset", "=", "train_data", ",", "val_dataset", "=", "val_data", ",", "meta", "=", "meta_info", ")", "\n", "\n", "if", "checkpoint", ":", "\n", "        ", "trainer", ".", "load_checkpoint", "(", "checkpoint", ",", "reset_epoch", "=", "reset_epoch", ")", "\n", "\n", "", "trainer", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.scripts.train.TrainNet.__init__": [[49, 115], ["cfg[].rpartition", "getattr", "getattr.", "getattr", "cfg.get", "max", "os.join", "os.join", "os.mkdir", "os.mkdir", "os.mkdir", "os.mkdir", "dict", "train.TrainNet.cfg.get", "count_parameters", "train.TrainNet.tblogger.items", "importlib.import_module", "ssc.net.bayesian.models.SampleNet().to", "getattr.to", "train.TrainNet.net.parameters", "cfg.get", "cfg.get", "train.TrainNet.net.fix_parameters", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "ssc.net.bayesian.layers.BNLLLoss", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "open", "yaml.dump", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "str", "tbl.add_text", "tbl.add_text", "train.TrainNet.append", "dataloader.dataset.get_class_id", "len", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "train.dict2md", "train.dict2md", "ssc.net.bayesian.models.SampleNet", "train.TrainNet.net.bnn.parameters", "train.TrainNet.net.sample_net.parameters", "cfg.get"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHousesMemory.get", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHousesMemory.get", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.utils.metrics.count_parameters", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHousesMemory.get", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHousesMemory.get", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.SampleNet.fix_parameters", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.data.loader.SUNCGDataset.get_class_id", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.scripts.train.dict2md", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.scripts.train.dict2md", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHousesMemory.get"], ["def", "__init__", "(", "self", ",", "cfg", ",", "device", ",", "nbr_classes", ",", "result_dir", ",", "train_dataset", "=", "None", ",", "val_dataset", "=", "None", ",", "meta", "=", "None", ")", ":", "\n", "        ", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "result_dir", "=", "result_dir", "\n", "#Load net", "\n", "module_name", ",", "_", ",", "class_name", "=", "cfg", "[", "'net'", "]", ".", "rpartition", "(", "'.'", ")", "\n", "net_class", "=", "getattr", "(", "import_module", "(", "module_name", ")", ",", "class_name", ")", "\n", "net", "=", "net_class", "(", "nbr_classes", ",", "cfg", ")", "\n", "self", ".", "bayesian", "=", "getattr", "(", "net", ",", "'bayesian'", ",", "False", ")", "\n", "\n", "if", "self", ".", "bayesian", ":", "\n", "            ", "self", ".", "net", "=", "SampleNet", "(", "net", ",", "cfg", ")", ".", "to", "(", "device", ")", "\n", "opt_params", "=", "[", "{", "'params'", ":", "self", ".", "net", ".", "bnn", ".", "parameters", "(", ")", "}", "]", "\n", "if", "self", ".", "net", ".", "metrics", ":", "\n", "                ", "opt_params", ".", "append", "(", "{", "'params'", ":", "self", ".", "net", ".", "sample_net", ".", "parameters", "(", ")", ",", "'weight_decay'", ":", "cfg", ".", "get", "(", "'sample_net_weight_decay'", ",", "0", ")", "}", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "net", "=", "net", ".", "to", "(", "device", ")", "\n", "opt_params", "=", "self", ".", "net", ".", "parameters", "(", ")", "\n", "\n", "", "self", ".", "nbr_tb_examples", "=", "cfg", ".", "get", "(", "'nbr_tb_examples'", ",", "0", ")", "\n", "self", ".", "nbr_examples", "=", "max", "(", "cfg", ".", "get", "(", "'nbr_examples'", ",", "0", ")", ",", "self", ".", "nbr_tb_examples", ")", "\n", "self", ".", "examples_dir", "=", "osp", ".", "join", "(", "self", ".", "result_dir", ",", "'examples'", ")", "\n", "os", ".", "mkdir", "(", "self", ".", "examples_dir", ")", "\n", "\n", "if", "self", ".", "bayesian", "and", "cfg", ".", "get", "(", "'fixed'", ",", "False", ")", ":", "\n", "            ", "self", ".", "net", ".", "fix_parameters", "(", ")", "\n", "\n", "# Training setup", "\n", "", "self", ".", "nclass", "=", "net", ".", "nbr_classes", "\n", "self", ".", "device", "=", "device", "\n", "loader_kwargs", "=", "dict", "(", "batch_size", "=", "self", ".", "cfg", "[", "'batch_size'", "]", ",", "shuffle", "=", "cfg", "[", "'shuffle'", "]", ",", "num_workers", "=", "self", ".", "cfg", "[", "'num_workers'", "]", ",", "pin_memory", "=", "True", ")", "\n", "self", ".", "train_dataloader", "=", "DataLoader", "(", "train_dataset", ",", "**", "loader_kwargs", ")", "if", "train_dataset", "else", "None", "\n", "self", ".", "val_dataloader", "=", "DataLoader", "(", "val_dataset", ",", "**", "loader_kwargs", ")", "if", "val_dataset", "else", "None", "\n", "self", ".", "train_mode", "=", "train_dataset", "is", "not", "None", "\n", "\n", "example_cat", "=", "self", ".", "cfg", ".", "get", "(", "'example_categories'", ",", "None", ")", "\n", "if", "example_cat", ":", "\n", "            ", "dataloader", "=", "self", ".", "train_dataloader", "if", "self", ".", "train_mode", "else", "self", ".", "val_dataloader", "\n", "self", ".", "example_cat_ids", "=", "[", "dataloader", ".", "dataset", ".", "get_class_id", "(", "e", ")", "for", "e", "in", "example_cat", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "example_cat_ids", "=", "None", "\n", "\n", "", "meta", "[", "'nbr_parameters'", "]", "=", "count_parameters", "(", "self", ".", "net", ")", "\n", "nbr_weights", "=", "meta", "[", "'nbr_parameters'", "]", "/", "2", "if", "self", ".", "bayesian", "else", "meta", "[", "'nbr_parameters'", "]", "\n", "self", ".", "epoch", "=", "0", "\n", "self", ".", "first_epoch", "=", "True", "\n", "\n", "if", "self", ".", "train_mode", ":", "\n", "            ", "self", ".", "criterion", "=", "BNLLLoss", "(", "cfg", "[", "'kl_beta'", "]", ",", "len", "(", "self", ".", "train_dataloader", ")", ",", "nbr_weights", ")", "\n", "self", ".", "optimizer", "=", "Adam", "(", "opt_params", ",", "lr", "=", "self", ".", "cfg", "[", "'learning_rate'", "]", ",", "weight_decay", "=", "cfg", "[", "'weight_decay'", "]", ")", "\n", "\n", "#Save config", "\n", "", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "result_dir", ",", "'config.yaml'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "yaml", ".", "dump", "(", "{", "'config'", ":", "self", ".", "cfg", ",", "'meta'", ":", "meta", "}", ",", "f", ",", "default_flow_style", "=", "False", ")", "\n", "\n", "#Setup tensorboard loggers", "\n", "", "self", ".", "tblogger", "=", "{", "}", "\n", "if", "train_dataset", ":", "\n", "            ", "self", ".", "tblogger", "[", "'train'", "]", "=", "SummaryWriter", "(", "osp", ".", "join", "(", "self", ".", "result_dir", ",", "'train'", ")", ")", "\n", "", "if", "val_dataset", ":", "\n", "            ", "self", ".", "tblogger", "[", "'val'", "]", "=", "SummaryWriter", "(", "osp", ".", "join", "(", "self", ".", "result_dir", ",", "'val'", ")", ")", "\n", "\n", "#Write config to tensorboard", "\n", "", "meta", "[", "'model'", "]", "=", "'<pre><code>{}</code></pre>'", ".", "format", "(", "str", "(", "self", ".", "net", ")", ")", "\n", "for", "_", ",", "tbl", "in", "self", ".", "tblogger", ".", "items", "(", ")", ":", "\n", "            ", "tbl", ".", "add_text", "(", "'Config'", ",", "dict2md", "(", "self", ".", "cfg", ")", ",", "global_step", "=", "0", ")", "\n", "tbl", ".", "add_text", "(", "'Meta'", ",", "dict2md", "(", "meta", ")", ",", "global_step", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.scripts.train.TrainNet.init_histograms": [[117, 134], ["train.TrainNet.histograms.add_type", "train.TrainNet.histograms.add_type", "ssc.visualization.histogram.HistogramGroup", "ssc.visualization.histogram.HistogramGroup", "train.TrainNet.val_dataloader.dataset.get_class_labels", "zip", "train.TrainNet.cfg.get", "train.TrainNet.cfg.get"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.pr.PRGroup.add_type", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.pr.PRGroup.add_type", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.data.loader.SUNCGDataset.get_class_labels", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHousesMemory.get", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHousesMemory.get"], ["", "", "def", "init_histograms", "(", "self", ",", "tsdf_bins", ")", ":", "\n", "        ", "if", "self", ".", "bayesian", ":", "\n", "            ", "self", ".", "histograms", "=", "HistogramGroup", "(", "{", "\n", "'avg_max_scores'", ":", "[", "0", ",", "1.0", "]", ",", "\n", "'entropy_top'", ":", "[", "0", ",", "0.4", "]", ",", "\n", "'var_e_top'", ":", "[", "0", ",", "0.3", "]", ",", "\n", "'var_a_top'", ":", "[", "0", ",", "0.3", "]", "\n", "}", ",", "\n", "metric_pairs", "=", "[", "(", "'avg_max_scores'", ",", "'entropy_top'", ")", "]", ",", "\n", "make_pdf", "=", "self", ".", "cfg", ".", "get", "(", "'make_pdf'", ",", "False", ")", "\n", ")", "\n", "", "else", ":", "\n", "             ", "self", ".", "histograms", "=", "HistogramGroup", "(", "{", "'avg_max_scores'", ":", "[", "0", ",", "1.0", "]", "}", ",", "make_pdf", "=", "self", ".", "cfg", ".", "get", "(", "'make_pdf'", ",", "False", ")", ")", "\n", "\n", "", "self", ".", "histograms", ".", "add_type", "(", "'semantic'", ",", "self", ".", "val_dataloader", ".", "dataset", ".", "get_class_labels", "(", ")", ")", "\n", "bins_str", "=", "[", "'[{:.2g}, {:.2g}]'", ".", "format", "(", "left", ",", "right", ")", "for", "left", ",", "right", "in", "zip", "(", "tsdf_bins", "[", ":", "-", "1", "]", ",", "tsdf_bins", "[", "1", ":", "]", ")", "]", "\n", "self", ".", "histograms", ".", "add_type", "(", "'tsdf'", ",", "bins_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.scripts.train.TrainNet.init_prs": [[135, 149], ["train.TrainNet.prs.add_type", "train.TrainNet.prs.add_type", "ssc.visualization.pr.PRGroup", "ssc.visualization.pr.PRGroup", "train.TrainNet.val_dataloader.dataset.get_class_labels", "train.TrainNet.val_dataloader.dataset.get_class_labels", "zip", "train.TrainNet.cfg.get", "train.TrainNet.cfg.get"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.pr.PRGroup.add_type", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.pr.PRGroup.add_type", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.data.loader.SUNCGDataset.get_class_labels", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.data.loader.SUNCGDataset.get_class_labels", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHousesMemory.get", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHousesMemory.get"], ["", "def", "init_prs", "(", "self", ",", "tsdf_bins", ")", ":", "\n", "        ", "if", "self", ".", "bayesian", ":", "\n", "            ", "self", ".", "prs", "=", "PRGroup", "(", "[", "'avg_max_scores'", ",", "'entropy_top'", "]", ",", "\n", "[", "[", "0.05", ",", "0.95", "]", ",", "[", "0.05", ",", "0.5", "]", "]", ",", "\n", "[", "0.05", ",", "0.05", "]", ",", "[", "True", ",", "False", "]", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", "make_pdf", "=", "self", ".", "cfg", ".", "get", "(", "'make_pdf'", ",", "False", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "prs", "=", "PRGroup", "(", "[", "'avg_max_scores'", "]", ",", "[", "[", "0.05", ",", "0.95", "]", "]", ",", "[", "0.05", "]", ",", "[", "True", "]", ",", "device", "=", "self", ".", "device", ",", "make_pdf", "=", "self", ".", "cfg", ".", "get", "(", "'make_pdf'", ",", "False", ")", ")", "\n", "\n", "\n", "", "self", ".", "prs", ".", "add_type", "(", "'semantic'", ",", "self", ".", "val_dataloader", ".", "dataset", ".", "get_class_labels", "(", ")", ")", "\n", "bins_str", "=", "[", "'[{:.2g}, {:.2g}]'", ".", "format", "(", "left", ",", "right", ")", "for", "left", ",", "right", "in", "zip", "(", "tsdf_bins", "[", ":", "-", "1", "]", ",", "tsdf_bins", "[", "1", ":", "]", ")", "]", "\n", "self", ".", "prs", ".", "add_type", "(", "'tsdf'", ",", "self", ".", "val_dataloader", ".", "dataset", ".", "get_class_labels", "(", ")", ",", "bins_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.scripts.train.TrainNet.train_loop": [[151, 173], ["train.TrainNet.net.train", "train.TrainNet.update_learning_rate", "train.TrainNet.run_epoch", "train.TrainNet.save_checkpoint", "train.TrainNet.net.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "train.TrainNet.run_epoch"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.SampleNet.train", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.scripts.train.TrainNet.update_learning_rate", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.scripts.train.TrainNet.run_epoch", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.scripts.train.TrainNet.save_checkpoint", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.scripts.train.TrainNet.run_epoch"], ["", "def", "train_loop", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "train_mode", ",", "'Training dataset must be supplied for training'", "\n", "\n", "while", "True", ":", "\n", "#Train", "\n", "            ", "self", ".", "net", ".", "train", "(", ")", "\n", "self", ".", "update_learning_rate", "(", ")", "\n", "self", ".", "run_epoch", "(", ")", "\n", "self", ".", "first_epoch", "=", "False", "\n", "\n", "if", "self", ".", "epoch", ">", "0", "and", "not", "(", "self", ".", "epoch", "%", "self", ".", "cfg", "[", "'save_interval'", "]", ")", ":", "\n", "                ", "self", ".", "save_checkpoint", "(", ")", "\n", "\n", "#Validation set", "\n", "", "if", "self", ".", "val_dataloader", "and", "self", ".", "epoch", ">", "0", "and", "not", "(", "self", ".", "epoch", "%", "self", ".", "cfg", "[", "'val_interval'", "]", ")", ":", "\n", "                ", "self", ".", "net", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "self", ".", "run_epoch", "(", ")", "\n", "\n", "", "", "self", ".", "epoch", "+=", "1", "\n", "if", "self", ".", "epoch", ">=", "self", ".", "cfg", "[", "'epochs'", "]", ":", "\n", "                ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.scripts.train.TrainNet.train": [[175, 185], ["train.TrainNet.train_loop", "train.TrainNet.save_checkpoint"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.scripts.train.TrainNet.train_loop", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.scripts.train.TrainNet.save_checkpoint"], ["", "", "", "def", "train", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "self", ".", "train_loop", "(", ")", "\n", "", "except", "KeyboardInterrupt", ":", "\n", "#To skip error output", "\n", "            ", "pass", "\n", "", "finally", ":", "\n", "#Always take a checkpoint when failing (unless we just started)", "\n", "            ", "if", "self", ".", "epoch", ">", "0", ":", "\n", "                ", "self", ".", "save_checkpoint", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.scripts.train.TrainNet.eval_weights": [[186, 195], ["train.TrainNet.load_checkpoint", "train.TrainNet.net.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "train.TrainNet.run_epoch"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.scripts.train.TrainNet.load_checkpoint", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.scripts.train.TrainNet.run_epoch"], ["", "", "", "def", "eval_weights", "(", "self", ",", "weights_path", ")", ":", "\n", "        ", "'''\n        Should be used when in test mode (no training data supplied) to evaluate a set of model weights on a dataset.\n        '''", "\n", "self", ".", "first_epoch", "=", "False", "\n", "self", ".", "load_checkpoint", "(", "weights_path", ")", "\n", "self", ".", "net", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "run_epoch", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.scripts.train.TrainNet.update_learning_rate": [[197, 201], ["None"], "methods", ["None"], ["", "", "def", "update_learning_rate", "(", "self", ")", ":", "\n", "        ", "self", ".", "lr", "=", "self", ".", "cfg", "[", "'learning_rate'", "]", "*", "(", "self", ".", "cfg", "[", "'lr_decay_factor'", "]", "**", "(", "self", ".", "epoch", "//", "self", ".", "cfg", "[", "'lr_decay_period'", "]", ")", ")", "\n", "for", "param_group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "self", ".", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.scripts.train.TrainNet.forward": [[203, 219], ["train.TrainNet.net.forward", "train.TrainNet.criterion", "train.TrainNet.criterion", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.layers.BReduceToProb.forward"], ["", "", "def", "forward", "(", "self", ",", "data", ",", "gt", ",", "batch_idx", ",", "mask", "=", "None", ")", ":", "\n", "        ", "result", "=", "self", ".", "net", ".", "forward", "(", "data", ")", "\n", "if", "not", "self", ".", "bayesian", ":", "\n", "            ", "result", "[", "'kl'", "]", "=", "0", "\n", "\n", "", "if", "self", ".", "train_mode", ":", "\n", "# Compute Loss", "\n", "            ", "if", "mask", "is", "None", ":", "\n", "                ", "self", ".", "criterion", ".", "reduction", "=", "'mean'", "\n", "result", "[", "'loss'", "]", "=", "self", ".", "criterion", "(", "result", "[", "'log_score'", "]", ",", "result", "[", "'kl'", "]", ",", "gt", ",", "batch_idx", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "criterion", ".", "reduction", "=", "'none'", "\n", "loss_seq", "=", "self", ".", "criterion", "(", "result", "[", "'log_score'", "]", ",", "result", "[", "'kl'", "]", ",", "gt", ",", "batch_idx", ")", "\n", "result", "[", "'loss'", "]", "=", "torch", ".", "mean", "(", "loss_seq", "[", "mask", "]", ")", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.scripts.train.TrainNet.run_epoch": [[220, 441], ["len", "enumerate", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "numpy.zeros", "tsdf_batch_cpu.to", "gt_batch_cpu.to", "sample_batched[].to", "sample_batched[].to", "sample_batched[].to", "sample_batched[].to", "train.TrainNet.forward", "tblogger.add_scalar", "tblogger.add_scalar", "tblogger.add_scalar", "train.TrainNet.net.named_modules", "tblogger.add_histogram", "torch.sum().to().numpy", "torch.sum().to().numpy", "torch.sum().to().numpy", "torch.sum().to().numpy", "torch.sum().to().numpy", "torch.sum().to().numpy", "torch.sum().to().numpy", "torch.sum().to().numpy", "torch.sum().to().numpy", "numpy.zeros.sum", "torch.sum().to().numpy.sum", "torch.sum().to().numpy.sum", "torch.sum().to().numpy.sum", "tblogger.add_scalar", "tblogger.add_scalar", "plot_confusion", "tblogger.add_figure", "compute_IoU", "tblogger.add_scalar", "tblogger.add_scalars", "train.TrainNet.histograms.plot_tb", "train.TrainNet.histograms.plot_bhattacharyya_tb", "train.TrainNet.prs.plot_tb", "train.TrainNet.init_histograms", "train.TrainNet.init_prs", "float", "float", "tblogger.add_scalar", "tblogger.add_scalar", "train.TrainNet.optimizer.zero_grad", "loss.backward", "train.TrainNet.optimizer.step", "log_score.max", "sample_batched[].to", "range", "train.TrainNet.histograms.add", "train.TrainNet.prs.add", "pred_batch.to", "range", "isinstance", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "tblogger.add_histogram", "tblogger.add_histogram", "float", "dataloader.dataset.get_class_labels", "numpy.mean", "numpy.mean", "loss.item", "loss.item", "compute_confusion", "score[].exp().sum", "result[].max", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "log_score[].exp", "score.exp", "min", "occluded_mask[].to().numpy", "[].numpy", "[].numpy", "[].numpy", "ssc.compare_voxels", "ssc.compare_voxels", "[].squeeze().numpy", "[].squeeze().numpy", "ssc.compare_voxels", "exp_img.items", "len", "len", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "tblogger.add_histogram", "tblogger.add_histogram", "all_weights.append", "all_weights_mu.append", "all_weights_sigma.append", "isinstance", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sum().to", "torch.sum().to", "torch.sum().to", "torch.sum().to", "torch.sum().to", "torch.sum().to", "torch.sum().to", "torch.sum().to", "torch.sum().to", "float", "float", "compute_IoU", "zip", "len", "tblogger.add_histogram", "tblogger.add_histogram", "[].numpy", "ssc.compare_voxels", "ssc.compare_voxels", "cv2.imwrite", "m.sample_weights().data.reshape", "m.mu_weight.data.reshape", "torch.exp.reshape", "torch.exp.reshape", "torch.exp.reshape", "tblogger.add_histogram", "all_weights.append", "numpy.trace", "train.TrainNet.histograms.get_classes", "torch.zeros.to().numpy", "torch.zeros.to().numpy", "torch.zeros.to().numpy", "score[].exp", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "numpy.any", "occluded_mask[].to", "pred_batch_cpu[].numpy", "gt_batch_cpu[].numpy", "dataloader.dataset.get_class_labels", "train.TrainNet.cfg.get", "avg_max_scores[].to().numpy", "free_score[].to().numpy", "train.TrainNet.cfg.get", "[].squeeze", "[].squeeze", "numpy.abs", "train.TrainNet.cfg.get", "os.join", "os.join", "tblogger.add_image", "m.weight.data.reshape", "ssc.visualization.weight.plot_sample_net", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "numpy.isin", "[].to().numpy", "free_entropy[].to().numpy", "train.TrainNet.cfg.get", "[].to().numpy", "free_variance[].to().numpy", "train.TrainNet.cfg.get", "tblogger.add_figure", "torch.zeros.to", "torch.zeros.to", "torch.zeros.to", "gt_batch_cpu[].numpy", "avg_max_scores[].to", "free_score[].to", "m.sample_weights", "[].to", "free_entropy[].to", "[].to", "free_variance[].to"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.layers.BReduceToProb.forward", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.utils.metrics.plot_confusion", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.utils.metrics.compute_IoU", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.pr.PRGroup.plot_tb", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.histogram.HistogramGroup.plot_bhattacharyya_tb", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.pr.PRGroup.plot_tb", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.scripts.train.TrainNet.init_histograms", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.scripts.train.TrainNet.init_prs", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.pr.PR.add", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.pr.PR.add", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.data.loader.SUNCGDataset.get_class_labels", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.utils.metrics.compute_confusion", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.mayavi_voxel.compare_voxels", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.mayavi_voxel.compare_voxels", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.mayavi_voxel.compare_voxels", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.utils.metrics.compute_IoU", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.mayavi_voxel.compare_voxels", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.mayavi_voxel.compare_voxels", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.data.suncg_mapping.SUNCGMapping.get_classes", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.data.loader.SUNCGDataset.get_class_labels", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHousesMemory.get", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHousesMemory.get", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHousesMemory.get", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.weight.plot_sample_net", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHousesMemory.get", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHousesMemory.get", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.layers.BConv.sample_weights"], ["", "def", "run_epoch", "(", "self", ")", ":", "\n", "        ", "train", "=", "self", ".", "net", ".", "training", "\n", "dataloader", "=", "self", ".", "train_dataloader", "if", "train", "else", "self", ".", "val_dataloader", "\n", "tblogger", "=", "self", ".", "tblogger", "[", "'train'", "]", "if", "train", "else", "self", ".", "tblogger", "[", "'val'", "]", "\n", "examples_count", "=", "0", "\n", "\n", "acc_loss", "=", "0", "\n", "acc_kl", "=", "0", "\n", "if", "not", "train", ":", "\n", "            ", "confusion", "=", "torch", ".", "zeros", "(", "[", "dataloader", ".", "dataset", ".", "nbr_tsdf_hist_bins", ",", "self", ".", "nclass", ",", "self", ".", "nclass", "]", ",", "device", "=", "self", ".", "device", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "acc_score", "=", "np", ".", "zeros", "(", "dataloader", ".", "dataset", ".", "nbr_tsdf_hist_bins", ")", "\n", "\n", "", "nbr_batches", "=", "len", "(", "dataloader", ")", "\n", "for", "i_batch", ",", "sample_batched", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "#Load data", "\n", "            ", "tsdf_batch_cpu", "=", "sample_batched", "[", "self", ".", "cfg", "[", "'tsdf_type'", "]", "]", "\n", "tsdf_batch", "=", "tsdf_batch_cpu", ".", "to", "(", "self", ".", "device", ")", "\n", "gt_batch_cpu", "=", "sample_batched", "[", "'gt'", "]", "\n", "gt_batch", "=", "gt_batch_cpu", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "#Load masks", "\n", "visible_free", "=", "sample_batched", "[", "'visible_free'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "frustum_mask", "=", "sample_batched", "[", "'frustum_mask'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "occluded_mask", "=", "sample_batched", "[", "'occluded_mask'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "loss_mask", "=", "sample_batched", "[", "'loss_mask'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "#Params", "\n", "batch_size", "=", "gt_batch", ".", "shape", "[", "0", "]", "\n", "first_val", "=", "(", "i_batch", "==", "0", ")", "and", "not", "train", "\n", "\n", "#Aassume TSDF volumes are generated the same way throughout the batch", "\n", "if", "first_val", ":", "\n", "                ", "self", ".", "init_histograms", "(", "sample_batched", "[", "'tsdf_hist_bins'", "]", "[", "0", "]", ")", "\n", "self", ".", "init_prs", "(", "sample_batched", "[", "'tsdf_hist_bins'", "]", "[", "0", "]", ")", "\n", "\n", "#Forward pass and loss calculation", "\n", "", "result", "=", "self", ".", "forward", "(", "tsdf_batch", ",", "gt_batch", ",", "i_batch", ",", "mask", "=", "loss_mask", ")", "\n", "\n", "log_score", "=", "result", "[", "'log_score'", "]", "\n", "\n", "# Batch Metrics", "\n", "if", "self", ".", "train_mode", ":", "\n", "                ", "loss", "=", "result", "[", "'loss'", "]", "\n", "kl", "=", "result", "[", "'kl'", "]", "\n", "batch_nbr", "=", "self", ".", "epoch", "*", "len", "(", "dataloader", ")", "+", "i_batch", "\n", "acc_loss", "+=", "float", "(", "loss", ".", "item", "(", ")", ")", "\n", "acc_kl", "+=", "float", "(", "kl", ")", "\n", "tblogger", ".", "add_scalar", "(", "'batch_loss'", ",", "loss", ".", "item", "(", ")", ",", "global_step", "=", "batch_nbr", ")", "\n", "tblogger", ".", "add_scalar", "(", "'batch_kl'", ",", "kl", ",", "global_step", "=", "batch_nbr", ")", "\n", "\n", "\n", "", "if", "train", ":", "\n", "# Zero gradients, perform a backward pass, and update the weights.", "\n", "                ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "#Validation metrics", "\n", "                ", "score", ",", "pred_batch", "=", "log_score", ".", "max", "(", "1", ")", "\n", "tsdf_hist_masks", "=", "sample_batched", "[", "'tsdf_hist_masks'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "#Set known freespace", "\n", "pred_batch", "[", "visible_free", "]", "=", "0", "\n", "score", "[", "visible_free", "]", "=", "0", "\n", "\n", "# Bin result according to TSDF input", "\n", "for", "i", "in", "range", "(", "tsdf_hist_masks", ".", "shape", "[", "1", "]", ")", ":", "\n", "                    ", "hmask", "=", "tsdf_hist_masks", "[", ":", ",", "i", "]", "\n", "masked_confusion", "=", "compute_confusion", "(", "pred_batch", "[", "hmask", "]", ",", "gt_batch", "[", "hmask", "]", ",", "self", ".", "nclass", ")", "\n", "confusion", "[", "i", "]", "+=", "masked_confusion", "\n", "acc_score", "[", "i", "]", "+=", "score", "[", "hmask", "]", ".", "exp", "(", ")", ".", "sum", "(", ")", "\n", "\n", "", "if", "'mean_score'", "in", "result", ":", "\n", "                    ", "avg_max_scores", ",", "max_idx", "=", "result", "[", "'mean_score'", "]", ".", "max", "(", "1", ")", "\n", "result", "[", "'avg_max_scores'", "]", "=", "avg_max_scores", "\n", "\n", "#Set known freespace", "\n", "max_idx", "[", "visible_free", "]", "=", "0", "\n", "avg_max_scores", "[", "visible_free", "]", "=", "1.0", "\n", "\n", "#Create occupied stats", "\n", "free_score", "=", "result", "[", "'mean_score'", "]", "[", ":", ",", "0", "]", "\n", "free_score", "[", "visible_free", "]", "=", "1.0", "\n", "free_entropy", "=", "result", "[", "'entropy'", "]", "[", ":", ",", "0", "]", "\n", "free_variance", "=", "result", "[", "'var'", "]", "[", ":", ",", "0", "]", "\n", "\n", "max_idx_gindex", "=", "max_idx", "[", ":", ",", "None", "]", "\n", "result", "[", "'var_a_top'", "]", "=", "torch", ".", "gather", "(", "result", "[", "'var_aleatoric'", "]", ",", "1", ",", "max_idx_gindex", ")", ".", "squeeze", "(", ")", "\n", "result", "[", "'var_e_top'", "]", "=", "torch", ".", "gather", "(", "result", "[", "'var_epistemic'", "]", ",", "1", ",", "max_idx_gindex", ")", ".", "squeeze", "(", ")", "\n", "result", "[", "'var_top'", "]", "=", "result", "[", "'var_a_top'", "]", "+", "result", "[", "'var_e_top'", "]", "\n", "result", "[", "'entropy_top'", "]", "=", "torch", ".", "gather", "(", "result", "[", "'entropy'", "]", ",", "1", ",", "max_idx_gindex", ")", ".", "squeeze", "(", ")", "\n", "\n", "corr_mask", "=", "(", "pred_batch", "==", "gt_batch", ")", "\n", "for", "key", "in", "[", "'var_a_top'", ",", "'var_e_top'", ",", "'var_top'", ",", "'entropy_top'", "]", ":", "\n", "                        ", "tblogger", ".", "add_histogram", "(", "'{} - Correct'", ".", "format", "(", "key", ")", ",", "result", "[", "key", "]", "[", "corr_mask", "]", ",", "self", ".", "epoch", ")", "\n", "tblogger", ".", "add_histogram", "(", "'{} - Incorrect'", ".", "format", "(", "key", ")", ",", "result", "[", "key", "]", "[", "~", "corr_mask", "]", ",", "self", ".", "epoch", ")", "\n", "\n", "", "", "else", ":", "\n", "                    ", "free_score", "=", "log_score", "[", ":", ",", "0", "]", ".", "exp", "(", ")", "\n", "result", "[", "'avg_max_scores'", "]", "=", "avg_max_scores", "=", "score", ".", "exp", "(", ")", "\n", "\n", "", "self", ".", "histograms", ".", "add", "(", "pred_batch", ",", "gt_batch", ",", "result", ",", "{", "'tsdf'", ":", "tsdf_hist_masks", "}", ")", "\n", "self", ".", "prs", ".", "add", "(", "pred_batch", ",", "gt_batch", ",", "result", ",", "{", "'tsdf'", ":", "tsdf_hist_masks", "}", ")", "\n", "\n", "# Plot graph on first epoch and batch", "\n", "# if self.first_epoch and i_batch == 0:", "\n", "#     if self.bayesian and not self.net.fixed:", "\n", "#         self.net.fix_parameters()", "\n", "#         tblogger.add_graph(self.net, tsdf_batch)", "\n", "#         self.net.release_parameters()", "\n", "#     else:", "\n", "#         tblogger.add_graph(self.net, tsdf_batch)", "\n", "\n", "# Plot examples", "\n", "", "if", "not", "train", "and", "examples_count", "<", "self", ".", "nbr_examples", ":", "\n", "#Remove data from GPU to make room for rendering", "\n", "                ", "pred_batch_cpu", "=", "pred_batch", ".", "to", "(", "'cpu'", ")", "\n", "del", "gt_batch", ",", "tsdf_batch", ",", "pred_batch", "\n", "exp_img", "=", "{", "}", "\n", "\n", "for", "ex_idx", "in", "range", "(", "min", "(", "self", ".", "nbr_examples", "-", "examples_count", ",", "batch_size", ")", ")", ":", "\n", "\n", "                    ", "if", "self", ".", "example_cat_ids", "and", "not", "np", ".", "any", "(", "np", ".", "isin", "(", "gt_batch_cpu", "[", "ex_idx", "]", ".", "numpy", "(", ")", ",", "self", ".", "example_cat_ids", ")", ")", ":", "\n", "                        ", "continue", "\n", "\n", "", "ex_mask", "=", "occluded_mask", "[", "ex_idx", "]", ".", "to", "(", "'cpu'", ")", ".", "numpy", "(", ")", "\n", "ex_vox_min", "=", "sample_batched", "[", "'vox_min'", "]", "[", "ex_idx", "]", ".", "numpy", "(", ")", "\n", "ex_vox_unit", "=", "sample_batched", "[", "'vox_unit'", "]", "[", "ex_idx", "]", ".", "numpy", "(", ")", "\n", "ex_cam_P", "=", "sample_batched", "[", "'cam_P'", "]", "[", "ex_idx", "]", ".", "numpy", "(", ")", "\n", "exp_img", "[", "'Semantic'", "]", "=", "mviz", ".", "compare_voxels", "(", "{", "'Predicted'", ":", "pred_batch_cpu", "[", "ex_idx", "]", ".", "numpy", "(", ")", ",", "\n", "'GT'", ":", "gt_batch_cpu", "[", "ex_idx", "]", ".", "numpy", "(", ")", "}", ",", "\n", "ex_vox_min", ",", "ex_vox_unit", ",", "mask", "=", "ex_mask", ",", "\n", "camera_P", "=", "ex_cam_P", ",", "suncg_labels", "=", "dataloader", ".", "dataset", ".", "get_class_labels", "(", ")", ",", "\n", "crossection", "=", "self", ".", "cfg", ".", "get", "(", "'crossection'", ",", "False", ")", ")", "\n", "\n", "exp_img", "[", "'Score'", "]", "=", "mviz", ".", "compare_voxels", "(", "{", "'Score'", ":", "avg_max_scores", "[", "ex_idx", "]", ".", "to", "(", "'cpu'", ")", ".", "numpy", "(", ")", ",", "\n", "'Free score'", ":", "free_score", "[", "ex_idx", "]", ".", "to", "(", "'cpu'", ")", ".", "numpy", "(", ")", "}", ",", "\n", "ex_vox_min", ",", "ex_vox_unit", ",", "mask", "=", "ex_mask", ",", "\n", "cmap", "=", "'gray'", ",", "camera_P", "=", "ex_cam_P", ",", "\n", "vmin", "=", "0", ",", "vmax", "=", "1", ",", "scalar", "=", "True", ",", "\n", "crossection", "=", "self", ".", "cfg", ".", "get", "(", "'crossection'", ",", "False", ")", ")", "\n", "\n", "tsdf_np", "=", "sample_batched", "[", "'tsdf'", "]", "[", "ex_idx", "]", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", "\n", "flipped_tsdf_np", "=", "sample_batched", "[", "'flipped_tsdf'", "]", "[", "ex_idx", "]", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", "\n", "# tsdf_mask = (np.abs(flipped_tsdf_np) > 0) & sample_batched['frustum_mask'][ex_idx].numpy()", "\n", "tsdf_mask", "=", "(", "np", ".", "abs", "(", "tsdf_np", ")", "<", "1", ")", "&", "sample_batched", "[", "'frustum_mask'", "]", "[", "ex_idx", "]", ".", "numpy", "(", ")", "\n", "# tsdf_mask = None", "\n", "exp_img", "[", "'TSDF'", "]", "=", "mviz", ".", "compare_voxels", "(", "{", "'TSDF'", ":", "tsdf_np", ",", "'Flipped TSDF'", ":", "flipped_tsdf_np", "}", ",", "\n", "ex_vox_min", ",", "ex_vox_unit", ",", "mask", "=", "tsdf_mask", ",", "\n", "cmap", "=", "'jet'", ",", "camera_P", "=", "ex_cam_P", ",", "scalar", "=", "True", ",", "vmin", "=", "-", "1", ",", "vmax", "=", "1", ",", "alpha", "=", "1.0", ",", "\n", "crossection", "=", "self", ".", "cfg", ".", "get", "(", "'crossection'", ",", "False", ")", ")", "\n", "\n", "if", "'mean_score'", "in", "result", ":", "\n", "                        ", "exp_img", "[", "'Entropy'", "]", "=", "mviz", ".", "compare_voxels", "(", "{", "'Entropy'", ":", "result", "[", "'entropy_top'", "]", "[", "ex_idx", "]", ".", "to", "(", "'cpu'", ")", ".", "numpy", "(", ")", ",", "\n", "'Free Entropy'", ":", "free_entropy", "[", "ex_idx", "]", ".", "to", "(", "'cpu'", ")", ".", "numpy", "(", ")", "}", ",", "\n", "ex_vox_min", ",", "ex_vox_unit", ",", "mask", "=", "ex_mask", ",", "\n", "cmap", "=", "'jet'", ",", "camera_P", "=", "ex_cam_P", ",", "scalar", "=", "True", ",", "\n", "crossection", "=", "self", ".", "cfg", ".", "get", "(", "'crossection'", ",", "False", ")", ")", "\n", "\n", "exp_img", "[", "'Variance'", "]", "=", "mviz", ".", "compare_voxels", "(", "{", "'Variance'", ":", "result", "[", "'var_top'", "]", "[", "ex_idx", "]", ".", "to", "(", "'cpu'", ")", ".", "numpy", "(", ")", ",", "\n", "'Free Variance'", ":", "free_variance", "[", "ex_idx", "]", ".", "to", "(", "'cpu'", ")", ".", "numpy", "(", ")", "}", ",", "\n", "ex_vox_min", ",", "ex_vox_unit", ",", "mask", "=", "ex_mask", ",", "\n", "cmap", "=", "'jet'", ",", "camera_P", "=", "ex_cam_P", ",", "scalar", "=", "True", ",", "\n", "crossection", "=", "self", ".", "cfg", ".", "get", "(", "'crossection'", ",", "False", ")", ")", "\n", "\n", "", "for", "desc", ",", "img", "in", "exp_img", ".", "items", "(", ")", ":", "\n", "                        ", "cv2", ".", "imwrite", "(", "osp", ".", "join", "(", "self", ".", "examples_dir", ",", "'{}_{}.png'", ".", "format", "(", "desc", ",", "examples_count", ")", ")", ",", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "\n", "if", "examples_count", "<", "self", ".", "nbr_tb_examples", ":", "\n", "                            ", "tblogger", ".", "add_image", "(", "\"Example {} - {}\"", ".", "format", "(", "examples_count", ",", "desc", ")", ",", "img", ",", "global_step", "=", "self", ".", "epoch", ",", "dataformats", "=", "'HWC'", ")", "\n", "", "", "examples_count", "+=", "1", "\n", "\n", "", "", "", "if", "self", ".", "train_mode", ":", "\n", "#Accumulate metrics", "\n", "            ", "tblogger", ".", "add_scalar", "(", "'epoch_loss'", ",", "acc_loss", "/", "len", "(", "dataloader", ".", "dataset", ")", ",", "global_step", "=", "self", ".", "epoch", ")", "\n", "tblogger", ".", "add_scalar", "(", "'epoch_kl'", ",", "acc_kl", "/", "len", "(", "dataloader", ".", "dataset", ")", ",", "global_step", "=", "self", ".", "epoch", ")", "\n", "tblogger", ".", "add_scalar", "(", "'lr'", ",", "self", ".", "lr", ",", "global_step", "=", "self", ".", "epoch", ")", "\n", "", "if", "train", ":", "\n", "            ", "all_weights", "=", "[", "]", "\n", "all_weights_mu", "=", "[", "]", "\n", "all_weights_sigma", "=", "[", "]", "\n", "for", "m_name", ",", "m", "in", "self", ".", "net", ".", "named_modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "BConv", ")", ":", "\n", "                    ", "sigma", "=", "torch", ".", "exp", "(", "m", ".", "sigma_weight", ".", "data", ")", "\n", "tblogger", ".", "add_histogram", "(", "m_name", "+", "'_mu'", ",", "m", ".", "mu_weight", ".", "data", ",", "self", ".", "epoch", ")", "\n", "tblogger", ".", "add_histogram", "(", "m_name", "+", "'_sigma'", ",", "sigma", ",", "self", ".", "epoch", ")", "\n", "all_weights", ".", "append", "(", "m", ".", "sample_weights", "(", ")", ".", "data", ".", "reshape", "(", "-", "1", ")", ")", "\n", "all_weights_mu", ".", "append", "(", "m", ".", "mu_weight", ".", "data", ".", "reshape", "(", "-", "1", ")", ")", "\n", "all_weights_sigma", ".", "append", "(", "sigma", ".", "reshape", "(", "-", "1", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "Conv1d", ",", "nn", ".", "Conv2d", ",", "nn", ".", "Conv3d", ")", ")", ":", "\n", "                    ", "tblogger", ".", "add_histogram", "(", "m_name", ",", "m", ".", "weight", ".", "data", ",", "self", ".", "epoch", ")", "\n", "all_weights", ".", "append", "(", "m", ".", "weight", ".", "data", ".", "reshape", "(", "-", "1", ")", ")", "\n", "if", "'sample_net'", "in", "m_name", ":", "\n", "                        ", "sample_w_fig", "=", "plot_sample_net", "(", "m_name", ",", "m", ",", "self", ".", "net", ")", "\n", "if", "sample_w_fig", ":", "\n", "                            ", "tblogger", ".", "add_figure", "(", "\"Sample weights - {}\"", ".", "format", "(", "m_name", ")", ",", "sample_w_fig", ",", "global_step", "=", "self", ".", "epoch", ",", "close", "=", "True", ")", "\n", "", "", "", "", "tblogger", ".", "add_histogram", "(", "'all_weights'", ",", "torch", ".", "cat", "(", "all_weights", ")", ",", "self", ".", "epoch", ")", "\n", "if", "all_weights_mu", ":", "\n", "                ", "tblogger", ".", "add_histogram", "(", "'all_weights_mu'", ",", "torch", ".", "cat", "(", "all_weights_mu", ")", ",", "self", ".", "epoch", ")", "\n", "tblogger", ".", "add_histogram", "(", "'all_weights_sigma'", ",", "torch", ".", "cat", "(", "all_weights_sigma", ")", ",", "self", ".", "epoch", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "all_confusion", "=", "torch", ".", "sum", "(", "confusion", ",", "dim", "=", "0", ")", ".", "to", "(", "'cpu'", ")", ".", "numpy", "(", ")", "\n", "\n", "all_score", "=", "acc_score", ".", "sum", "(", ")", "\n", "total_nbr_voxels", "=", "all_confusion", ".", "sum", "(", ")", "\n", "accuracy", "=", "100.0", "*", "float", "(", "np", ".", "trace", "(", "all_confusion", ")", ")", "/", "float", "(", "total_nbr_voxels", ")", "\n", "tblogger", ".", "add_scalar", "(", "'accuracy'", ",", "accuracy", ",", "global_step", "=", "self", ".", "epoch", ")", "\n", "tblogger", ".", "add_scalar", "(", "'avg_score'", ",", "all_score", "/", "float", "(", "total_nbr_voxels", ")", ",", "global_step", "=", "self", ".", "epoch", ")", "\n", "\n", "conf_fig", "=", "plot_confusion", "(", "all_confusion", ",", "dataloader", ".", "dataset", ".", "get_class_labels", "(", ")", ")", "\n", "tblogger", ".", "add_figure", "(", "\"Confusion Matrix\"", ",", "conf_fig", ",", "global_step", "=", "self", ".", "epoch", ",", "close", "=", "True", ")", "\n", "\n", "IoU", "=", "compute_IoU", "(", "all_confusion", ")", "\n", "tblogger", ".", "add_scalar", "(", "'mIoU'", ",", "np", ".", "mean", "(", "IoU", ")", ",", "global_step", "=", "self", ".", "epoch", ")", "\n", "iou_dict", "=", "{", "cls_name", ":", "np", ".", "mean", "(", "compute_IoU", "(", "conf", ")", ")", "for", "(", "cls_name", ",", "conf", ")", "in", "zip", "(", "self", ".", "histograms", ".", "get_classes", "(", "'tsdf'", ")", ",", "confusion", ".", "to", "(", "'cpu'", ")", ".", "numpy", "(", ")", ")", "}", "\n", "tblogger", ".", "add_scalars", "(", "'IoU_TDF'", ",", "iou_dict", ",", "global_step", "=", "self", ".", "epoch", ")", "\n", "\n", "self", ".", "histograms", ".", "plot_tb", "(", "tblogger", ",", "self", ".", "epoch", ")", "\n", "self", ".", "histograms", ".", "plot_bhattacharyya_tb", "(", "tblogger", ",", "self", ".", "epoch", ")", "\n", "\n", "self", ".", "prs", ".", "plot_tb", "(", "tblogger", ",", "self", ".", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.scripts.train.TrainNet.save_checkpoint": [[443, 450], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.join", "os.join", "train.TrainNet.net.state_dict", "train.TrainNet.optimizer.state_dict"], "methods", ["None"], ["", "", "def", "save_checkpoint", "(", "self", ")", ":", "\n", "        ", "torch", ".", "save", "(", "{", "\n", "'epoch'", ":", "self", ".", "epoch", ",", "\n", "'model_state_dict'", ":", "self", ".", "net", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_state_dict'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "\n", "}", ",", "osp", ".", "join", "(", "self", ".", "result_dir", ",", "'ckp_{:05d}.tar'", ".", "format", "(", "self", ".", "epoch", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.scripts.train.TrainNet.load_checkpoint": [[452, 463], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "train.TrainNet.net.load_state_dict", "train.TrainNet.optimizer.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.SampleNet.load_state_dict", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.SampleNet.load_state_dict"], ["", "def", "load_checkpoint", "(", "self", ",", "ckpt_path", ",", "transfer", "=", "False", ",", "reset_epoch", "=", "False", ")", ":", "\n", "        ", "ckpt", "=", "torch", ".", "load", "(", "ckpt_path", ")", "\n", "self", ".", "net", ".", "load_state_dict", "(", "ckpt", "[", "'model_state_dict'", "]", ",", "transfer", "=", "transfer", ")", "\n", "\n", "if", "not", "(", "transfer", "or", "reset_epoch", ")", ":", "\n", "            ", "self", ".", "epoch", "=", "ckpt", "[", "'epoch'", "]", "\n", "", "if", "self", ".", "train_mode", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "optimizer", ".", "load_state_dict", "(", "ckpt", "[", "'optimizer_state_dict'", "]", ")", "\n", "", "except", "ValueError", ":", "\n", "                ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.scripts.train.dict2md": [[31, 36], ["sorted"], "function", ["None"], ["def", "dict2md", "(", "my_dict", ")", ":", "\n", "    ", "table", "=", "'|Parameter|Value|\\n|---------|-----|'", "\n", "for", "param", "in", "sorted", "(", "my_dict", ")", ":", "\n", "        ", "table", "+=", "'\\n|{}|{}|'", ".", "format", "(", "param", ",", "my_dict", "[", "param", "]", ")", "\n", "", "return", "table", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.scripts.train.seed": [[38, 43], ["numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed"], "function", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.scripts.train.seed"], ["", "def", "seed", "(", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "torch", ".", "manual_seed", "(", "0", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.scripts.train.main": [[464, 491], ["os.makedirs", "os.makedirs", "locals", "git.Repo", "torch.device", "torch.device", "torch.device", "train.seed", "ssc.data.loader.SUNCGDataset", "train.TrainNet", "TrainNet.train", "git.Repo.git.diff", "cfg.get", "ssc.data.loader.SUNCGDataset", "ssc.data.loader.SUNCGDataset.get_nbr_classes", "train.TrainNet.load_checkpoint", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available"], "function", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.scripts.train.seed", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.SampleNet.train", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHousesMemory.get", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.data.loader.SUNCGDataset.get_nbr_classes", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.scripts.train.TrainNet.load_checkpoint"], ["", "", "", "", "def", "main", "(", "root_dir", ",", "json_file", ",", "cfg", ",", "result_dir", ",", "cache_dir", ",", "\n", "val", "=", "None", ",", "checkpoint", "=", "None", ",", "transfer", "=", "False", ",", "reset_epoch", "=", "False", ")", ":", "\n", "\n", "    ", "os", ".", "makedirs", "(", "result_dir", ")", "\n", "\n", "# Get git repo version", "\n", "meta_info", "=", "locals", "(", ")", "\n", "repo", "=", "git", ".", "Repo", "(", "search_parent_directories", "=", "True", ")", "\n", "meta_info", "[", "'version'", "]", "=", "repo", ".", "head", ".", "object", ".", "hexsha", "\n", "meta_info", "[", "'git_diff'", "]", "=", "'<pre><code>{}</code></pre>'", ".", "format", "(", "repo", ".", "git", ".", "diff", "(", "'--ignore-submodules'", ")", ")", "\n", "del", "repo", "\n", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:0'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "# Make sure results are reproducible", "\n", "seed", "(", ")", "\n", "dset_args", "=", "(", "root_dir", ",", "cache_dir", ")", "\n", "dset_kwargs", "=", "{", "k", ":", "cfg", ".", "get", "(", "k", ",", "None", ")", "for", "k", "in", "[", "'mapping'", "]", "}", "\n", "dset_kwargs", "[", "'mp_loader'", "]", "=", "cfg", "[", "'num_workers'", "]", ">", "0", "\n", "suncg_data", "=", "SUNCGDataset", "(", "json_file", ",", "*", "dset_args", ",", "**", "dset_kwargs", ")", "\n", "val_data", "=", "SUNCGDataset", "(", "val", ",", "*", "dset_args", ",", "**", "dset_kwargs", ",", "val", "=", "True", ")", "if", "val", "else", "None", "\n", "trainer", "=", "TrainNet", "(", "cfg", ",", "device", ",", "suncg_data", ".", "get_nbr_classes", "(", ")", ",", "result_dir", ",", "train_dataset", "=", "suncg_data", ",", "val_dataset", "=", "val_data", ",", "meta", "=", "meta_info", ")", "\n", "\n", "if", "checkpoint", ":", "\n", "        ", "trainer", ".", "load_checkpoint", "(", "checkpoint", ",", "transfer", ",", "reset_epoch", ")", "\n", "\n", "", "trainer", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.data.suncg_mapping.SUNCGMapping.__init__": [[18, 33], ["numpy.array", "numpy.array", "numpy.array", "ssc.SUNCGLabels().getClasses", "open", "yaml.safe_load", "os.join", "labels.index", "ssc.SUNCGLabels", "os.dirname"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.data.suncg.SUNCGLabels.getClasses"], ["    ", "def", "__init__", "(", "self", ",", "yaml_map", "=", "None", ")", ":", "\n", "        ", "self", ".", "all_labels", "=", "np", ".", "array", "(", "suncg", ".", "SUNCGLabels", "(", ")", ".", "getClasses", "(", ")", ")", "\n", "\n", "self", ".", "wrapper", "=", "yaml_map", "is", "None", "\n", "if", "self", ".", "wrapper", ":", "\n", "            ", "return", "\n", "\n", "", "with", "open", "(", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "suncg", ".", "__file__", ")", ",", "'mappings'", ",", "'{}.yaml'", ".", "format", "(", "yaml_map", ")", ")", ")", "as", "f", ":", "\n", "            ", "y", "=", "yaml", ".", "safe_load", "(", "f", ")", "\n", "labels", "=", "y", "[", "'labels'", "]", "\n", "mapping", "=", "y", "[", "'mapping'", "]", "\n", "\n", "\n", "", "self", ".", "labels", "=", "np", ".", "array", "(", "labels", ")", "\n", "self", ".", "int_mapping", "=", "np", ".", "array", "(", "[", "labels", ".", "index", "(", "mapping", "[", "suncg_label", "]", ")", "for", "suncg_label", "in", "self", ".", "all_labels", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.data.suncg_mapping.SUNCGMapping.create_proxy": [[35, 41], ["suncg_mapping.MappingManager", "MappingManager.register", "MappingManager.start", "MappingManager.SUNCGMapping"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "create_proxy", "(", "cls", ",", "yaml_map", "=", "None", ")", ":", "\n", "        ", "manager", "=", "MappingManager", "(", ")", "\n", "manager", ".", "register", "(", "'SUNCGMapping'", ",", "cls", ",", "exposed", "=", "[", "'map'", ",", "'get_nbr_classes'", ",", "'get_classes'", ",", "'get_class_id'", "]", ")", "\n", "manager", ".", "start", "(", ")", "\n", "return", "manager", ",", "manager", ".", "SUNCGMapping", "(", "yaml_map", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.data.suncg_mapping.SUNCGMapping.map": [[42, 51], ["numpy.zeros_like", "enumerate", "np_array.astype"], "methods", ["None"], ["", "def", "map", "(", "self", ",", "np_array", ",", "dtype", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "wrapper", ":", "\n", "            ", "return", "np_array", ".", "astype", "(", "dtype", ")", "if", "dtype", "else", "np_array", "\n", "\n", "", "new_array", "=", "np", ".", "zeros_like", "(", "np_array", ",", "dtype", "=", "dtype", ")", "\n", "for", "old_int", ",", "new_int", "in", "enumerate", "(", "self", ".", "int_mapping", ")", ":", "\n", "            ", "new_array", "[", "np_array", "==", "old_int", "]", "=", "new_int", "\n", "\n", "", "return", "new_array", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.data.suncg_mapping.SUNCGMapping.get_nbr_classes": [[52, 54], ["len", "suncg_mapping.SUNCGMapping.get_classes"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.data.suncg_mapping.SUNCGMapping.get_classes"], ["", "def", "get_nbr_classes", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "get_classes", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.data.suncg_mapping.SUNCGMapping.get_class_id": [[55, 60], ["numpy.flatnonzero", "numpy.flatnonzero"], "methods", ["None"], ["", "def", "get_class_id", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "self", ".", "wrapper", ":", "\n", "            ", "return", "np", ".", "flatnonzero", "(", "self", ".", "all_labels", "==", "name", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "return", "np", ".", "flatnonzero", "(", "self", ".", "labels", "==", "name", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.data.suncg_mapping.SUNCGMapping.get_classes": [[61, 66], ["None"], "methods", ["None"], ["", "", "def", "get_classes", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "wrapper", ":", "\n", "            ", "return", "self", ".", "all_labels", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.data.suncg_mapping.setup_yaml": [[8, 12], ["yaml.add_representer", "suncg_mapping..represent_mapping", "data.items"], "function", ["None"], ["def", "setup_yaml", "(", ")", ":", "\n", "  ", "\"\"\" https://stackoverflow.com/a/8661021 \"\"\"", "\n", "represent_dict_order", "=", "lambda", "self", ",", "data", ":", "self", ".", "represent_mapping", "(", "'tag:yaml.org,2002:map'", ",", "data", ".", "items", "(", ")", ")", "\n", "yaml", ".", "add_representer", "(", "OrderedDict", ",", "represent_dict_order", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.data._init_tsdf.add_path": [[12, 15], ["sys.path.insert"], "function", ["None"], ["def", "add_path", "(", "path", ")", ":", "\n", "    ", "if", "path", "not", "in", "sys", ".", "path", ":", "\n", "        ", "sys", ".", "path", ".", "insert", "(", "0", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.data.test_loader.plot_data": [[16, 31], ["os.join", "os.makedirs", "os.makedirs", "ssc.visualization.mayavi_voxel.plot_voxels", "ssc.visualization.mayavi_voxel.plot_voxels", "ssc.visualization.mayavi_voxel.plot_voxels", "sample[].numpy", "ssc.visualization.mayavi_voxel.plot_voxels", "ssc.visualization.mayavi_voxel.plot_voxels", "sample[].squeeze().numpy", "ssc.visualization.mayavi_voxel.plot_voxels", "sample[].squeeze().numpy", "ssc.visualization.mayavi_voxel.plot_voxels", "sample[].squeeze().numpy", "sample[].numpy", "sample[].numpy", "os.join", "os.join", "os.join", "os.join", "os.join", "sample[].squeeze", "os.join", "sample[].squeeze", "numpy.abs", "os.join", "sample[].squeeze", "sample[].numpy"], "function", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.vispy_voxel.plot_voxels", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.vispy_voxel.plot_voxels", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.vispy_voxel.plot_voxels", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.vispy_voxel.plot_voxels", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.vispy_voxel.plot_voxels", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.vispy_voxel.plot_voxels", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.visualization.vispy_voxel.plot_voxels"], ["def", "plot_data", "(", "sample", ",", "suncg_labels", ",", "plot_dir", ")", ":", "\n", "    ", "base_dir", "=", "osp", ".", "join", "(", "plot_dir", ",", "'{}_{}'", ".", "format", "(", "sample", "[", "'cam_house_id'", "]", ",", "sample", "[", "'cam_idx'", "]", ")", ")", "\n", "os", ".", "makedirs", "(", "base_dir", ",", "exist_ok", "=", "True", ")", "\n", "plot_voxels", "(", "sample", "[", "'gt'", "]", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", ",", "sample", "[", "'vox_min'", "]", ",", "sample", "[", "'vox_unit'", "]", ",", "save_path", "=", "osp", ".", "join", "(", "base_dir", ",", "'gt'", ")", ",", "suncg_labels", "=", "suncg_labels", ",", "camera_P", "=", "data", "[", "'cam_P'", "]", ")", "\n", "plot_voxels", "(", "sample", "[", "'visible_free'", "]", ".", "numpy", "(", ")", ",", "sample", "[", "'vox_min'", "]", ",", "sample", "[", "'vox_unit'", "]", ",", "save_path", "=", "osp", ".", "join", "(", "base_dir", ",", "'visible_free'", ")", ",", "suncg_labels", "=", "[", "'occluded'", ",", "'visible_free'", "]", ",", "camera_P", "=", "data", "[", "'cam_P'", "]", ")", "\n", "plot_voxels", "(", "sample", "[", "'loss_mask'", "]", ".", "numpy", "(", ")", ",", "sample", "[", "'vox_min'", "]", ",", "sample", "[", "'vox_unit'", "]", ",", "save_path", "=", "osp", ".", "join", "(", "base_dir", ",", "'loss_mask'", ")", ",", "suncg_labels", "=", "[", "'NA'", ",", "'loss'", "]", ",", "camera_P", "=", "data", "[", "'cam_P'", "]", ")", "\n", "frustum_np", "=", "sample", "[", "'frustum_mask'", "]", ".", "numpy", "(", ")", "\n", "plot_voxels", "(", "frustum_np", ",", "sample", "[", "'vox_min'", "]", ",", "sample", "[", "'vox_unit'", "]", ",", "save_path", "=", "osp", ".", "join", "(", "base_dir", ",", "'view_frustum'", ")", ",", "suncg_labels", "=", "[", "'outside'", ",", "'inside'", "]", ",", "camera_P", "=", "data", "[", "'cam_P'", "]", ")", "\n", "plot_voxels", "(", "frustum_np", "&", "~", "sample", "[", "'visible_free'", "]", ".", "numpy", "(", ")", ",", "sample", "[", "'vox_min'", "]", ",", "sample", "[", "'vox_unit'", "]", ",", "save_path", "=", "osp", ".", "join", "(", "base_dir", ",", "'occluded_frustum'", ")", ",", "suncg_labels", "=", "[", "''", ",", "'inside occluded'", "]", ",", "camera_P", "=", "data", "[", "'cam_P'", "]", ")", "\n", "tsdf_np", "=", "sample", "[", "'tsdf'", "]", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", "\n", "tsdf_mask", "=", "(", "tsdf_np", "<", "1", ")", "&", "frustum_np", "\n", "plot_voxels", "(", "tsdf_np", ",", "sample", "[", "'vox_min'", "]", ",", "sample", "[", "'vox_unit'", "]", ",", "mask", "=", "tsdf_mask", ",", "save_path", "=", "osp", ".", "join", "(", "base_dir", ",", "'tsdf'", ")", ",", "scalar", "=", "True", ",", "alpha", "=", "1.0", ",", "vmin", "=", "-", "1", ",", "vmax", "=", "1", ")", "\n", "flipped_tsdf_np", "=", "sample", "[", "'flipped_tsdf'", "]", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", "\n", "flipped_mask", "=", "(", "np", ".", "abs", "(", "flipped_tsdf_np", ")", ">", "0", ")", "&", "frustum_np", "\n", "plot_voxels", "(", "flipped_tsdf_np", ",", "sample", "[", "'vox_min'", "]", ",", "sample", "[", "'vox_unit'", "]", ",", "mask", "=", "flipped_mask", ",", "save_path", "=", "osp", ".", "join", "(", "base_dir", ",", "'flipped_tsdf'", ")", ",", "scalar", "=", "True", ",", "alpha", "=", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.data.suncg.SUNCGLabels.__init__": [[8, 45], ["scipy.io.loadmat", "objcategory[].item", "objcategory[].item", "objcategory[].item", "objcategory[].item", "enumerate", "os.join", "node[].item", "node[].item", "suncg.SUNCGLabels.class_root_id2class_root.append", "hasattr", "enumerate"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "index2name", "=", "[", "]", "\n", "self", ".", "name2index", "=", "{", "}", "\n", "\n", "# classMapping = loadmat(osp.join(script_dir, 'ClassMapping.mat'))", "\n", "objcategory_struct", "=", "loadmat", "(", "osp", ".", "join", "(", "script_dir", ",", "'suncgObjcategory.mat'", ")", ",", "squeeze_me", "=", "True", ")", "\n", "objcategory", "=", "objcategory_struct", "[", "'objcategory'", "]", "\n", "# self.class_root_id = objcategory['classRootId'].item()", "\n", "self", ".", "all_classes", "=", "objcategory", "[", "'allcategories'", "]", ".", "item", "(", ")", "\n", "self", ".", "all_labeled_obj", "=", "objcategory", "[", "'all_labeled_obj'", "]", ".", "item", "(", ")", "\n", "self", ".", "class_id", "=", "objcategory", "[", "'classid'", "]", ".", "item", "(", ")", "\n", "# self.class_root = objcategory['categoryRoot'].item()", "\n", "# self.class_NYU40 = objcategory['classNYU40'].item()", "\n", "\n", "#Setup subcategory mapping", "\n", "oh", "=", "objcategory", "[", "'object_hierarchical'", "]", ".", "item", "(", ")", "\n", "self", ".", "class2class_root_id", "=", "{", "}", "\n", "self", ".", "class2class_root", "=", "{", "}", "\n", "#ID 0 are free pixels", "\n", "self", ".", "class_root_id2class_root", "=", "[", "'free'", "]", "\n", "for", "cat_id", ",", "node", "in", "enumerate", "(", "oh", ")", ":", "\n", "\n", "            ", "cat", "=", "node", "[", "'categoryname'", "]", ".", "item", "(", ")", "\n", "children", "=", "node", "[", "'clidern'", "]", ".", "item", "(", ")", "\n", "\n", "self", ".", "class_root_id2class_root", ".", "append", "(", "cat", ")", "\n", "\n", "#Check if string", "\n", "if", "hasattr", "(", "children", ",", "'strip'", ")", ":", "\n", "                ", "children", "=", "[", "children", "]", "\n", "\n", "", "for", "c", "in", "children", ":", "\n", "                ", "self", ".", "class2class_root_id", "[", "c", "]", "=", "cat_id", "+", "1", "#Since we added background first", "\n", "self", ".", "class2class_root", "[", "c", "]", "=", "cat", "\n", "\n", "# Index mapping", "\n", "", "", "self", ".", "model2index", "=", "{", "model", ":", "idx", "for", "idx", ",", "model", "in", "enumerate", "(", "self", ".", "all_labeled_obj", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.data.suncg.SUNCGLabels.getClass": [[46, 56], ["None"], "methods", ["None"], ["", "def", "getClass", "(", "self", ",", "model_name", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "idx", "=", "self", ".", "model2index", "[", "model_name", "]", "\n", "class_id", "=", "self", ".", "class_id", "[", "idx", "]", "\n", "class_name", "=", "self", ".", "all_classes", "[", "class_id", "-", "1", "]", "#MATLAB indexing", "\n", "", "except", "KeyError", ":", "\n", "            ", "class_id", "=", "-", "1", "\n", "class_name", "=", "model_name", "\n", "\n", "", "return", "class_id", ",", "class_name", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.data.suncg.SUNCGLabels.getClassRootFromRootID": [[57, 59], ["None"], "methods", ["None"], ["", "def", "getClassRootFromRootID", "(", "self", ",", "class_id", ")", ":", "\n", "        ", "return", "self", ".", "class_root_id2class_root", "[", "class_id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.data.suncg.SUNCGLabels.getClassRootIDFromRoot": [[60, 62], ["suncg.SUNCGLabels.class_root_id2class_root.index"], "methods", ["None"], ["", "def", "getClassRootIDFromRoot", "(", "self", ",", "class_name", ")", ":", "\n", "        ", "return", "self", ".", "class_root_id2class_root", ".", "index", "(", "class_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.data.suncg.SUNCGLabels.getClassRoot": [[63, 72], ["suncg.SUNCGLabels.getClass", "len"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.data.suncg.SUNCGLabels.getClass"], ["", "def", "getClassRoot", "(", "self", ",", "model_name", ")", ":", "\n", "        ", "_", ",", "class_name", "=", "self", ".", "getClass", "(", "model_name", ")", "\n", "try", ":", "\n", "            ", "class_root_id", "=", "self", ".", "class2class_root_id", "[", "class_name", "]", "\n", "class_root", "=", "self", ".", "class2class_root", "[", "class_name", "]", "\n", "", "except", "KeyError", ":", "\n", "            ", "class_root_id", "=", "len", "(", "self", ".", "class_root_id2class_root", ")", "-", "1", "\n", "class_root", "=", "self", ".", "class_root_id2class_root", "[", "class_root_id", "]", "\n", "", "return", "class_root_id", ",", "class_root", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.data.suncg.SUNCGLabels.getClasses": [[73, 75], ["None"], "methods", ["None"], ["", "def", "getClasses", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "class_root_id2class_root", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.data.suncg.SUNCGLabels.getNbrClasses": [[76, 78], ["len"], "methods", ["None"], ["", "def", "getNbrClasses", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "class_root_id2class_root", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.data.suncg.SUNCGLabels.get_NYU_mapping": [[79, 83], ["scipy.io.loadmat", "print", "os.join", "scipy.io.loadmat.keys"], "methods", ["None"], ["", "def", "get_NYU_mapping", "(", "self", ")", ":", "\n", "        ", "mapping", "=", "loadmat", "(", "osp", ".", "join", "(", "script_dir", ",", "'ClassMapping.mat'", ")", ",", "squeeze_me", "=", "True", ")", "\n", "print", "(", "mapping", ".", "keys", "(", ")", ")", "\n", "return", "mapping", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.data.loader.HiddenPrints.__enter__": [[25, 28], ["open"], "methods", ["None"], ["    ", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_original_stdout", "=", "sys", ".", "stdout", "\n", "sys", ".", "stdout", "=", "open", "(", "os", ".", "devnull", ",", "'w'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.data.loader.HiddenPrints.__exit__": [[29, 32], ["sys.stdout.close"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_val", ",", "exc_tb", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "close", "(", ")", "\n", "sys", ".", "stdout", "=", "self", ".", "_original_stdout", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.data.loader.SUNCGDataset.__init__": [[49, 81], ["preprocessing.utils.InvalidHouses", "numpy.array", "os.abspath", "os.abspath", "os.join", "os.join", "os.join", "os.join", "open", "json.load", "ssc.data.suncg_mapping.SUNCGMapping.create_proxy", "multiprocessing.Manager", "loader.SUNCGDataset.camera_manager.list", "ssc.data.suncg_mapping.SUNCGMapping", "hashlib.sha1().hexdigest", "len", "preprocessing.utils.InvalidHouses.is_valid", "os.split", "os.split", "hashlib.sha1", "os.abspath.encode"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.data.suncg_mapping.SUNCGMapping.create_proxy", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHouses.is_valid"], ["def", "__init__", "(", "self", ",", "json_file", ",", "root_dir", ",", "cache_dir", ",", "mapping", "=", "None", ",", "val", "=", "False", ",", "nbr_samples", "=", "None", ",", "mp_loader", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            json_file (string): Path to the json file with cameras.\n            root_dir (string): Directory with all the data, so root_dir/house_id/[voxels,depth,rgb].\n            transform (callable, optional): Optional transform to be applied\n                on a sample.\n            mp_loader: If Loader will use multiprocessing.\n        \"\"\"", "\n", "invalid_houses", "=", "InvalidHouses", "(", "osp", ".", "join", "(", "root_dir", ",", "'invalid.json'", ")", ")", "\n", "with", "open", "(", "json_file", ")", "as", "f", ":", "\n", "            ", "cameras", "=", "json", ".", "load", "(", "f", ")", "\n", "", "cameras", "=", "np", ".", "array", "(", "[", "c", "for", "c", "in", "cameras", "if", "invalid_houses", ".", "is_valid", "(", "c", "[", "'house_id'", "]", ")", "]", ")", "\n", "if", "nbr_samples", "and", "nbr_samples", "<", "len", "(", "cameras", ")", ":", "\n", "            ", "cameras", "=", "cameras", "[", ":", "nbr_samples", "]", "\n", "\n", "", "if", "mp_loader", ":", "\n", "# Make cameras and mapping shared since they are large and accessed every iteration.", "\n", "            ", "self", ".", "mapping_manager", ",", "self", ".", "label_mapping", "=", "SUNCGMapping", ".", "create_proxy", "(", "mapping", ")", "\n", "self", ".", "camera_manager", "=", "mp", ".", "Manager", "(", ")", "\n", "self", ".", "cameras", "=", "self", ".", "camera_manager", ".", "list", "(", "cameras", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "label_mapping", "=", "SUNCGMapping", "(", "mapping", ")", "\n", "self", ".", "cameras", "=", "cameras", "\n", "\n", "", "self", ".", "root_dir", "=", "root_dir", "\n", "#Setup cache dir", "\n", "abs_root", "=", "osp", ".", "abspath", "(", "root_dir", ")", "\n", "cache_name", "=", "osp", ".", "split", "(", "abs_root", ")", "[", "-", "1", "]", "+", "'_'", "+", "hashlib", ".", "sha1", "(", "abs_root", ".", "encode", "(", "'utf-8'", ")", ")", ".", "hexdigest", "(", ")", "\n", "self", ".", "cache_dir", "=", "osp", ".", "join", "(", "cache_dir", ",", "cache_name", ")", "\n", "self", ".", "val", "=", "val", "\n", "self", ".", "nbr_tsdf_hist_bins", "=", "4", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.data.loader.SUNCGDataset.__len__": [[82, 84], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "cameras", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.data.loader.SUNCGDataset._generate_tsdf": [[85, 122], ["os.join", "os.join", "cv2.imread", "invdepth_img[].astype", "os.join", "os.join", "cv2.imread", "numpy.vstack", "fusion.TSDFVolume.integrate", "fusion.TSDFVolume.get_volume", "fusion.TSDFVolume.get_frustum_mask", "loader.HiddenPrints", "fusion.TSDFVolume", "numpy.iinfo", "idepth.astype", "numpy.linalg.inv", "numpy.sign", "numpy.array"], "methods", ["None"], ["", "def", "_generate_tsdf", "(", "self", ",", "camera", ",", "voxel_bounds", ",", "voxel_resolution", ")", ":", "\n", "# Initialize voxel volume", "\n", "        ", "with", "HiddenPrints", "(", ")", ":", "\n", "            ", "tsdf_vol", "=", "fusion", ".", "TSDFVolume", "(", "voxel_bounds", ",", "voxel_size", "=", "voxel_resolution", ",", "use_gpu", "=", "False", ")", "\n", "\n", "# Read depth image", "\n", "", "depth_name", "=", "osp", ".", "join", "(", "self", ".", "root_dir", ",", "camera", "[", "'house_id'", "]", ",", "'invdepth'", ",", "'{:04}.png'", ".", "format", "(", "camera", "[", "'idx'", "]", ")", ")", "\n", "invdepth_img", "=", "cv2", ".", "imread", "(", "depth_name", ",", "cv2", ".", "IMREAD_COLOR", ")", "\n", "invdepth_img", "=", "invdepth_img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "astype", "(", "np", ".", "uint16", ")", "\n", "idepth", "=", "invdepth_img", "[", ":", ",", ":", ",", "0", "]", "*", "256", "+", "invdepth_img", "[", ":", ",", ":", ",", "1", "]", "\n", "PIXEL_MAX", "=", "np", ".", "iinfo", "(", "np", ".", "uint16", ")", ".", "max", "\n", "minDepth", "=", "0.3", "\n", "depth", "=", "minDepth", "*", "PIXEL_MAX", "/", "idepth", ".", "astype", "(", "np", ".", "float", ")", "\n", "# Dont trust the extreme values", "\n", "valid_depth", "=", "(", "idepth", "!=", "PIXEL_MAX", ")", "&", "(", "idepth", "!=", "0", ")", "\n", "#Cap at 20 meters", "\n", "valid_depth", "&=", "depth", "<", "20", "\n", "#Set invalid depth to 0", "\n", "depth", "[", "~", "valid_depth", "]", "=", "0", "\n", "\n", "#Read RGB image", "\n", "rgb_name", "=", "osp", ".", "join", "(", "self", ".", "root_dir", ",", "camera", "[", "'house_id'", "]", ",", "'rgb'", ",", "'{:04}.png'", ".", "format", "(", "camera", "[", "'idx'", "]", ")", ")", "\n", "bgr_img", "=", "cv2", ".", "imread", "(", "rgb_name", ",", "cv2", ".", "IMREAD_COLOR", ")", "\n", "rgb_img", "=", "bgr_img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "\n", "# Integrate observation into voxel volume (assume color aligned with depth)", "\n", "P_4x4", "=", "np", ".", "vstack", "(", "[", "camera", "[", "'P'", "]", ",", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", ",", "1", "]", ")", "]", ")", "\n", "tsdf_vol", ".", "integrate", "(", "rgb_img", ",", "depth", ",", "camera", "[", "'K'", "]", ",", "np", ".", "linalg", ".", "inv", "(", "P_4x4", ")", ")", "\n", "result", "=", "{", "}", "\n", "result", "[", "'tsdf'", "]", ",", "_", "=", "tsdf_vol", ".", "get_volume", "(", ")", "\n", "result", "[", "'flipped_tsdf'", "]", "=", "np", ".", "sign", "(", "result", "[", "'tsdf'", "]", ")", "-", "result", "[", "'tsdf'", "]", "#dmax = 1", "\n", "result", "[", "'frustum_mask'", "]", "=", "tsdf_vol", ".", "get_frustum_mask", "(", ")", "\n", "result", "[", "'visible_free'", "]", "=", "result", "[", "'frustum_mask'", "]", "&", "(", "result", "[", "'tsdf'", "]", ">", "voxel_resolution", "/", "tsdf_vol", ".", "_trunc_margin", ")", "\n", "result", "[", "'occluded_mask'", "]", "=", "result", "[", "'frustum_mask'", "]", "&", "(", "result", "[", "'tsdf'", "]", "<=", "voxel_resolution", "/", "tsdf_vol", ".", "_trunc_margin", ")", "\n", "result", "[", "'tsdf_trunc_margin'", "]", "=", "tsdf_vol", ".", "_trunc_margin", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.data.loader.SUNCGDataset._get_voxel_params": [[124, 136], ["NotImplementedError", "numpy.vstack"], "methods", ["None"], ["", "def", "_get_voxel_params", "(", "self", ",", "camera", ",", "voxel_npz", "=", "None", ")", ":", "\n", "        ", "if", "not", "voxel_npz", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Relies on gt voxel size'", ")", "\n", "\n", "", "vox_dim", "=", "voxel_npz", "[", "'voxels'", "]", ".", "shape", "\n", "vox_resolution", "=", "voxel_npz", "[", "'vox_unit'", "]", "\n", "vox_world_min", "=", "voxel_npz", "[", "'vox_min'", "]", "\n", "vox_world_max", "=", "voxel_npz", "[", "'vox_max'", "]", "-", "vox_resolution", "/", "2.0", "#For ceil in tsdf", "\n", "\n", "vox_bounds", "=", "np", ".", "vstack", "(", "[", "vox_world_min", ",", "vox_world_max", "]", ")", ".", "T", "\n", "\n", "return", "vox_bounds", ",", "vox_resolution", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.data.loader.SUNCGDataset.__getitem__": [[138, 221], ["camera_params[].items", "os.join", "os.join", "os.join", "os.join", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "os.join", "os.join", "loader.SUNCGDataset.label_mapping.map", "torch.tensor", "loader.SUNCGDataset.items", "sample_mask.ravel", "sample_mask.sum", "numpy.flatnonzero", "torch.tensor", "numpy.array", "numpy.load", "numpy.load", "len", "numpy.random.choice", "numpy.linspace", "torch.tensor", "torch.abs().squeeze", "torch.zeros", "enumerate", "sample[].clone", "torch.ones_like", "open", "json.load", "logging.warning", "logging.warning", "len", "loader.SUNCGDataset._get_voxel_params", "loader.SUNCGDataset._generate_tsdf", "numpy.savez_compressed", "torch.tensor", "torch.tensor", "zip", "sample[].clone.any", "torch.ones_like.any", "os.join", "os.join", "float", "torch.abs"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.data.suncg_mapping.SUNCGMapping.map", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.data.loader.SUNCGDataset._get_voxel_params", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.data.loader.SUNCGDataset._generate_tsdf"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "camera", "=", "self", ".", "cameras", "[", "idx", "]", "\n", "\n", "#Get camera params", "\n", "try", ":", "\n", "            ", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "root_dir", ",", "camera", "[", "'house_id'", "]", ",", "'camera_params.json'", ")", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "camera_params", "=", "json", ".", "load", "(", "f", ")", "\n", "", "", "except", "FileNotFoundError", "as", "e", ":", "\n", "            ", "logging", ".", "warning", "(", "e", ")", "\n", "return", "None", "\n", "\n", "", "for", "param", ",", "value", "in", "camera_params", "[", "camera", "[", "'idx'", "]", "]", ".", "items", "(", ")", ":", "\n", "            ", "camera", "[", "param", "]", "=", "np", ".", "array", "(", "value", ")", "\n", "\n", "# Read GT voxel", "\n", "", "vox_name", "=", "osp", ".", "join", "(", "self", ".", "root_dir", ",", "camera", "[", "'house_id'", "]", ",", "'vox'", ",", "'{:04}.npz'", ".", "format", "(", "camera", "[", "'idx'", "]", ")", ")", "\n", "try", ":", "\n", "            ", "gt_npz", "=", "np", ".", "load", "(", "vox_name", ")", "\n", "", "except", "FileNotFoundError", "as", "e", ":", "\n", "            ", "logging", ".", "warning", "(", "e", ")", "\n", "return", "None", "\n", "\n", "", "tsdf_cache_dir", "=", "osp", ".", "join", "(", "self", ".", "cache_dir", ",", "'tsdf'", ",", "camera", "[", "'house_id'", "]", ")", "\n", "os", ".", "makedirs", "(", "tsdf_cache_dir", ",", "exist_ok", "=", "True", ")", "\n", "tsdf_cache_name", "=", "osp", ".", "join", "(", "tsdf_cache_dir", ",", "'{:04}.npz'", ".", "format", "(", "camera", "[", "'idx'", "]", ")", ")", "\n", "\n", "try", ":", "\n", "            ", "tsdf_result", "=", "np", ".", "load", "(", "tsdf_cache_name", ")", "\n", "if", "len", "(", "tsdf_result", ")", "<", "6", ":", "\n", "                ", "raise", "FileNotFoundError", "\n", "", "", "except", "(", "FileNotFoundError", ",", "BadZipFile", ")", ":", "\n", "#Make to voxel volume", "\n", "            ", "vox_bounds", ",", "vox_resolution", "=", "self", ".", "_get_voxel_params", "(", "camera", ",", "gt_npz", ")", "\n", "tsdf_result", "=", "self", ".", "_generate_tsdf", "(", "camera", ",", "vox_bounds", ",", "vox_resolution", ")", "\n", "np", ".", "savez_compressed", "(", "tsdf_cache_name", ",", "**", "tsdf_result", ")", "\n", "\n", "", "assert", "gt_npz", "[", "'voxels'", "]", ".", "shape", "==", "tsdf_result", "[", "'tsdf'", "]", ".", "shape", ",", "'Ground truth and generated tsdf dimensions does not match'", "\n", "\n", "sample", "=", "{", "}", "\n", "mapped_voxels", "=", "self", ".", "label_mapping", ".", "map", "(", "gt_npz", "[", "'voxels'", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "sample", "[", "'gt'", "]", "=", "torch", ".", "tensor", "(", "mapped_voxels", ",", "dtype", "=", "torch", ".", "long", ")", "#Add channel dimension", "\n", "for", "key", ",", "data", "in", "tsdf_result", ".", "items", "(", ")", ":", "\n", "            ", "sample", "[", "key", "]", "=", "torch", ".", "tensor", "(", "data", "[", "None", ",", "...", "]", ")", "if", "'tsdf'", "in", "key", "else", "torch", ".", "tensor", "(", "data", ")", "\n", "", "for", "key", "in", "[", "'pos'", ",", "'up'", ",", "'front'", ",", "'house_id'", ",", "'idx'", ",", "'P'", ",", "'K'", "]", ":", "\n", "            ", "sample", "[", "'cam_{}'", ".", "format", "(", "key", ")", "]", "=", "camera", "[", "key", "]", "\n", "", "for", "key", "in", "[", "'vox_center'", ",", "'vox_min'", ",", "'vox_max'", ",", "'vox_unit'", "]", ":", "\n", "            ", "sample", "[", "key", "]", "=", "gt_npz", "[", "key", "]", "\n", "\n", "#Create sampling mask for data balancing", "\n", "", "sample_mask", "=", "(", "mapped_voxels", ">", "0", ")", "&", "tsdf_result", "[", "'frustum_mask'", "]", "\n", "sample_mask_flat", "=", "sample_mask", ".", "ravel", "(", ")", "\n", "nbr_occupied", "=", "sample_mask", ".", "sum", "(", ")", "\n", "all_occluded_empty_index", "=", "np", ".", "flatnonzero", "(", "(", "mapped_voxels", "==", "0", ")", "&", "tsdf_result", "[", "'frustum_mask'", "]", "&", "~", "tsdf_result", "[", "'visible_free'", "]", ")", "\n", "if", "len", "(", "all_occluded_empty_index", ")", ">", "2", "*", "nbr_occupied", ":", "\n", "            ", "occluded_empty_index", "=", "np", ".", "random", ".", "choice", "(", "all_occluded_empty_index", ",", "size", "=", "2", "*", "nbr_occupied", ",", "replace", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "occluded_empty_index", "=", "all_occluded_empty_index", "\n", "", "sample_mask_flat", "[", "occluded_empty_index", "]", "=", "True", "\n", "sample", "[", "'loss_mask'", "]", "=", "torch", ".", "tensor", "(", "sample_mask", ")", "\n", "\n", "#Generate TSDF bins and corresponding masks", "\n", "if", "self", ".", "val", ":", "\n", "            ", "bins", "=", "np", ".", "linspace", "(", "0", ",", "1.0", ",", "self", ".", "nbr_tsdf_hist_bins", ")", "\n", "bins", "=", "torch", ".", "tensor", "(", "[", "*", "bins", ",", "float", "(", "'Inf'", ")", "]", ")", "\n", "abs_tsdf", "=", "torch", ".", "abs", "(", "sample", "[", "'tsdf'", "]", ")", ".", "squeeze", "(", ")", "\n", "hist_masks", "=", "torch", ".", "zeros", "(", "(", "self", ".", "nbr_tsdf_hist_bins", ",", "*", "abs_tsdf", ".", "shape", ")", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "for", "i", ",", "(", "lower_bound", ",", "upper_bound", ")", "in", "enumerate", "(", "zip", "(", "bins", "[", ":", "-", "1", "]", ",", "bins", "[", "1", ":", "]", ")", ")", ":", "\n", "                ", "hist_masks", "[", "i", "]", "=", "sample", "[", "'occluded_mask'", "]", "&", "(", "lower_bound", "<=", "abs_tsdf", ")", "&", "(", "abs_tsdf", "<", "upper_bound", ")", "\n", "", "sample", "[", "'tsdf_hist_bins'", "]", "=", "bins", "*", "sample", "[", "'tsdf_trunc_margin'", "]", "#Convert to actual distance", "\n", "sample", "[", "'tsdf_hist_masks'", "]", "=", "hist_masks", "\n", "\n", "\n", "#Verify mask", "\n", "test_coverage", "=", "sample", "[", "'occluded_mask'", "]", ".", "clone", "(", ")", "\n", "test_disjunct", "=", "torch", ".", "ones_like", "(", "test_coverage", ")", "\n", "for", "hm", "in", "hist_masks", ":", "\n", "                ", "test_coverage", "&=", "~", "hm", "\n", "test_disjunct", "&=", "hm", "\n", "", "assert", "not", "test_coverage", ".", "any", "(", ")", ",", "\"Hist masks does not cover occluded_mask\"", "\n", "assert", "not", "test_disjunct", ".", "any", "(", ")", ",", "\"Hist masks contains overlap\"", "\n", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.data.loader.SUNCGDataset.get_class_labels": [[222, 224], ["loader.SUNCGDataset.label_mapping.get_classes"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.data.suncg_mapping.SUNCGMapping.get_classes"], ["", "def", "get_class_labels", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "label_mapping", ".", "get_classes", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.data.loader.SUNCGDataset.get_class_id": [[225, 227], ["loader.SUNCGDataset.label_mapping.get_class_id"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.data.loader.SUNCGDataset.get_class_id"], ["", "def", "get_class_id", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "self", ".", "label_mapping", ".", "get_class_id", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.data.loader.SUNCGDataset.get_nbr_classes": [[228, 230], ["loader.SUNCGDataset.label_mapping.get_nbr_classes"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.data.loader.SUNCGDataset.get_nbr_classes"], ["", "def", "get_nbr_classes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "label_mapping", ".", "get_nbr_classes", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.data.loader.rotate_around_vector": [[34, 42], ["numpy.array", "numpy.eye", "numpy.sin", "numpy.sin"], "function", ["None"], ["", "", "def", "rotate_around_vector", "(", "v", ",", "phi", ")", ":", "\n", "    ", "W", "=", "np", ".", "array", "(", "[", "\n", "[", "0", ",", "-", "v", "[", "2", "]", ",", "v", "[", "1", "]", "]", ",", "\n", "[", "v", "[", "2", "]", ",", "0", ",", "-", "v", "[", "0", "]", "]", ",", "\n", "[", "-", "v", "[", "1", "]", ",", "v", "[", "0", "]", ",", "0", "]", ",", "\n", "]", ")", "\n", "R", "=", "np", ".", "eye", "(", "3", ")", "+", "np", ".", "sin", "(", "phi", ")", "*", "W", "+", "(", "2", "*", "np", ".", "sin", "(", "phi", "/", "2", ")", "**", "2", ")", "*", "W", "**", "2", "\n", "return", "R", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.net.deterministic.DetCNN.load_state_dict": [[7, 15], ["super().load_state_dict", "state_dict.items"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.SampleNet.load_state_dict"], ["    ", "def", "load_state_dict", "(", "self", ",", "state_dict", ",", "transfer", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "# Implement custom loader to make it possible to load a BNN checkpoint", "\n", "\n", "# Filter out the classification layers if transfer.", "\n", "        ", "if", "transfer", ":", "\n", "            ", "state_dict", "=", "{", "k", ":", "v", "for", "(", "k", ",", "v", ")", "in", "state_dict", ".", "items", "(", ")", "if", "'classify'", "not", "in", "k", "}", "\n", "\n", "", "return", "super", "(", ")", ".", "load_state_dict", "(", "state_dict", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.net.deterministic.View.__init__": [[17, 20], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.Cauchy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "shape", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "shape", "=", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.net.deterministic.View.forward": [[21, 24], ["x.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "new_shape", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "*", "self", ".", "shape", ")", "\n", "return", "x", ".", "view", "(", "new_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.net.deterministic.SimpleCNN.__init__": [[26, 31], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.Cauchy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nbr_classes", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SimpleCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nbr_classes", "=", "nbr_classes", "\n", "self", ".", "cnn1", "=", "nn", ".", "Conv3d", "(", "1", ",", "32", ",", "5", ",", "padding", "=", "2", ",", "stride", "=", "1", ")", "\n", "self", ".", "cnn2", "=", "nn", ".", "Conv3d", "(", "32", ",", "nbr_classes", ",", "1", ",", "padding", "=", "0", ",", "stride", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.net.deterministic.SimpleCNN.forward": [[32, 42], ["torch.Softplus", "torch.Softplus", "torch.Softplus", "deterministic.SimpleCNN.cnn2", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "deterministic.SimpleCNN.cnn1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        In the forward function we accept a Tensor of input data and we must return\n        a Tensor of output data. We can use Modules defined in the constructor as\n        well as arbitrary operators on Tensors.\n        \"\"\"", "\n", "x", "=", "F", ".", "Softplus", "(", "self", ".", "cnn1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "cnn2", "(", "x", ")", "\n", "x", "=", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "return", "{", "'log_score'", ":", "x", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.net.deterministic.ConvBlock.__init__": [[44, 53], ["torch.Module.__init__", "getattr", "getattr", "torch.Sequential", "torch.Sequential", "torch.Sequential", "getattr.", "torch.Softplus", "torch.Softplus", "torch.Softplus", "getattr."], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.Cauchy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_depth", ",", "out_depth", ",", "kernel_size", ",", "padding", "=", "0", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "dim", "=", "3", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "ConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "conv", "=", "getattr", "(", "nn", ",", "'Conv{}d'", ".", "format", "(", "dim", ")", ")", "\n", "bn", "=", "getattr", "(", "nn", ",", "'BatchNorm{}d'", ".", "format", "(", "dim", ")", ")", "\n", "\n", "blocks", "=", "[", "conv", "(", "in_depth", ",", "out_depth", ",", "kernel_size", ",", "padding", "=", "padding", ",", "stride", "=", "stride", ",", "dilation", "=", "dilation", ",", "bias", "=", "bias", ")", "]", "\n", "blocks", "+=", "[", "nn", ".", "Softplus", "(", ")", "]", "\n", "blocks", "+=", "[", "bn", "(", "out_depth", ")", "]", "\n", "self", ".", "block", "=", "nn", ".", "Sequential", "(", "*", "blocks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.net.deterministic.ConvBlock.forward": [[54, 56], ["deterministic.ConvBlock.block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "block", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.net.deterministic.SkipAddBlock.__init__": [[58, 78], ["torch.Module.__init__", "len", "getattr", "getattr", "deterministic.ConvBlock", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "getattr.", "getattr.", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Softplus", "torch.Softplus", "torch.Softplus", "getattr.", "int", "zip", "deterministic.ConvBlock"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.Cauchy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_depth", ",", "out_depths", ",", "kernel_sizes", ",", "dilations", ",", "reduce_skip", "=", "False", ",", "dim", "=", "3", ")", ":", "\n", "        ", "super", "(", "SkipAddBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nbr_layers", "=", "len", "(", "out_depths", ")", "\n", "conv", "=", "getattr", "(", "nn", ",", "'Conv{}d'", ".", "format", "(", "dim", ")", ")", "\n", "bn", "=", "getattr", "(", "nn", ",", "'BatchNorm{}d'", ".", "format", "(", "dim", ")", ")", "\n", "assert", "nbr_layers", ">", "1", "\n", "\n", "#Select paddings to keep output size equal to input size.", "\n", "paddings", "=", "[", "int", "(", "k_size", "/", "2", ")", "*", "dilation", "for", "k_size", ",", "dilation", "in", "zip", "(", "kernel_sizes", ",", "dilations", ")", "]", "\n", "\n", "self", ".", "first_pass", "=", "ConvBlock", "(", "in_depth", ",", "out_depths", "[", "0", "]", ",", "kernel_sizes", "[", "0", "]", ",", "padding", "=", "paddings", "[", "0", "]", ",", "dilation", "=", "dilations", "[", "0", "]", ",", "dim", "=", "dim", ")", "\n", "\n", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "nbr_layers", "-", "1", ")", ":", "\n", "            ", "layers", "+=", "[", "ConvBlock", "(", "out_depths", "[", "i", "-", "1", "]", ",", "out_depths", "[", "i", "]", ",", "kernel_sizes", "[", "i", "]", ",", "padding", "=", "paddings", "[", "i", "]", ",", "dilation", "=", "dilations", "[", "i", "]", ",", "dim", "=", "dim", ")", "]", "\n", "", "layers", "+=", "[", "conv", "(", "out_depths", "[", "-", "2", "]", ",", "out_depths", "[", "-", "1", "]", ",", "kernel_sizes", "[", "-", "1", "]", ",", "padding", "=", "paddings", "[", "-", "1", "]", ",", "dilation", "=", "dilations", "[", "-", "1", "]", ")", "]", "\n", "self", ".", "second_pass", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "self", ".", "skip_connection", "=", "conv", "(", "out_depths", "[", "0", "]", ",", "out_depths", "[", "-", "1", "]", ",", "1", ")", "if", "reduce_skip", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "activation", "=", "nn", ".", "Sequential", "(", "nn", ".", "Softplus", "(", ")", ",", "bn", "(", "out_depths", "[", "-", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.net.deterministic.SkipAddBlock.forward": [[79, 84], ["deterministic.SkipAddBlock.first_pass", "deterministic.SkipAddBlock.second_pass", "deterministic.SkipAddBlock.activation", "deterministic.SkipAddBlock.skip_connection"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y1", "=", "self", ".", "first_pass", "(", "x", ")", "\n", "y2", "=", "self", ".", "second_pass", "(", "y1", ")", "\n", "y", "=", "y2", "+", "self", ".", "skip_connection", "(", "y1", ")", "\n", "return", "self", ".", "activation", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.net.deterministic.ReduceToSoftmax.__init__": [[86, 96], ["torch.Module.__init__", "len", "getattr", "torch.Sequential", "torch.Sequential", "torch.Sequential", "deterministic.ConvBlock", "deterministic.ConvBlock", "getattr.", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax", "range"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.Cauchy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_depth", ",", "out_depths", ",", "dim", "=", "3", ")", ":", "\n", "        ", "super", "(", "ReduceToSoftmax", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nbr_layers", "=", "len", "(", "out_depths", ")", "\n", "conv", "=", "getattr", "(", "nn", ",", "'Conv{}d'", ".", "format", "(", "dim", ")", ")", "\n", "assert", "nbr_layers", ">", "1", "\n", "layers", "=", "[", "ConvBlock", "(", "in_depth", ",", "out_depths", "[", "0", "]", ",", "1", ",", "dim", "=", "dim", ")", "]", "\n", "layers", "+=", "[", "ConvBlock", "(", "out_depths", "[", "i", "-", "1", "]", ",", "out_depths", "[", "i", "]", ",", "1", ",", "dim", "=", "dim", ")", "for", "i", "in", "range", "(", "1", ",", "nbr_layers", "-", "1", ")", "]", "\n", "layers", "+=", "[", "conv", "(", "out_depths", "[", "-", "2", "]", ",", "out_depths", "[", "-", "1", "]", ",", "1", ")", "]", "\n", "layers", "+=", "[", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "]", "\n", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.net.deterministic.ReduceToSoftmax.forward": [[97, 99], ["deterministic.ReduceToSoftmax.layers"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "layers", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.net.deterministic.SSC_test.__init__": [[102, 114], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "deterministic.SkipAddBlock", "deterministic.ReduceToSoftmax"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.Cauchy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nbr_classes", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SSC_test", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nbr_classes", "=", "nbr_classes", "\n", "self", ".", "base_depth", "=", "8", "\n", "self", ".", "base_dilation", "=", "2", "\n", "\n", "layers", "=", "[", "SkipAddBlock", "(", "1", ",", "out_depths", "=", "[", "self", ".", "base_depth", ",", "self", ".", "base_depth", "*", "2", ",", "self", ".", "base_depth", "*", "4", "]", ",", "\n", "kernel_sizes", "=", "[", "5", ",", "3", ",", "3", "]", ",", "\n", "dilations", "=", "3", "*", "[", "self", ".", "base_dilation", "]", ",", "\n", "reduce_skip", "=", "True", ")", "]", "\n", "layers", "+=", "[", "ReduceToSoftmax", "(", "self", ".", "base_depth", "*", "4", ",", "out_depths", "=", "[", "self", ".", "base_depth", "*", "4", ",", "nbr_classes", "]", ")", "]", "\n", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.net.deterministic.SSC_test.forward": [[116, 119], ["deterministic.SSC_test.layers"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "layers", "(", "x", ")", "\n", "return", "{", "'log_score'", ":", "y", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.net.deterministic.SSC.__init__": [[123, 167], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "deterministic.ReduceToSoftmax", "deterministic.SkipAddBlock", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "deterministic.SkipAddBlock", "deterministic.SkipAddBlock", "deterministic.SkipAddBlock", "deterministic.SkipAddBlock", "len"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.Cauchy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nbr_classes", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "SSC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nbr_classes", "=", "nbr_classes", "\n", "self", ".", "base_depth", "=", "8", "\n", "self", ".", "base_dilation", "=", "1", "\n", "\n", "# Feature construction (green in article)", "\n", "layers", "=", "[", "SkipAddBlock", "(", "1", ",", "\n", "out_depths", "=", "[", "self", ".", "base_depth", ",", "self", ".", "base_depth", "*", "2", ",", "self", ".", "base_depth", "*", "2", "]", ",", "\n", "kernel_sizes", "=", "[", "7", ",", "3", ",", "3", "]", ",", "\n", "dilations", "=", "3", "*", "[", "1", "]", ",", "\n", "reduce_skip", "=", "True", ")", "]", "\n", "#Dilated convolution instead of max pooling", "\n", "layers", "+=", "[", "nn", ".", "Conv3d", "(", "self", ".", "base_depth", "*", "2", ",", "self", ".", "base_depth", "*", "2", ",", "3", ",", "\n", "dilation", "=", "2", "*", "self", ".", "base_dilation", ",", "\n", "padding", "=", "2", "*", "self", ".", "base_dilation", ")", "]", "\n", "layers", "+=", "[", "SkipAddBlock", "(", "self", ".", "base_depth", "*", "2", ",", "\n", "out_depths", "=", "[", "self", ".", "base_depth", "*", "4", ",", "self", ".", "base_depth", "*", "4", "]", ",", "\n", "kernel_sizes", "=", "[", "3", ",", "3", "]", ",", "\n", "dilations", "=", "2", "*", "[", "self", ".", "base_dilation", "]", ",", "\n", "reduce_skip", "=", "True", ")", "]", "\n", "layers", "+=", "[", "SkipAddBlock", "(", "self", ".", "base_depth", "*", "4", ",", "\n", "out_depths", "=", "[", "self", ".", "base_depth", "*", "4", ",", "self", ".", "base_depth", "*", "4", "]", ",", "\n", "kernel_sizes", "=", "[", "3", ",", "3", "]", ",", "\n", "dilations", "=", "2", "*", "[", "self", ".", "base_dilation", "]", ",", "\n", "reduce_skip", "=", "False", ")", "]", "\n", "self", ".", "base_features", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "# Scale combining (yellow in article)", "\n", "layers", "=", "[", "SkipAddBlock", "(", "self", ".", "base_depth", "*", "4", ",", "\n", "out_depths", "=", "[", "self", ".", "base_depth", "*", "4", ",", "self", ".", "base_depth", "*", "4", "]", ",", "\n", "kernel_sizes", "=", "[", "3", ",", "3", "]", ",", "\n", "dilations", "=", "2", "*", "[", "self", ".", "base_dilation", "*", "2", "]", ",", "\n", "reduce_skip", "=", "False", ")", "]", "\n", "layers", "+=", "[", "SkipAddBlock", "(", "self", ".", "base_depth", "*", "4", ",", "\n", "out_depths", "=", "[", "self", ".", "base_depth", "*", "4", ",", "self", ".", "base_depth", "*", "4", "]", ",", "\n", "kernel_sizes", "=", "[", "3", ",", "3", "]", ",", "\n", "dilations", "=", "2", "*", "[", "self", ".", "base_dilation", "*", "2", "]", ",", "\n", "reduce_skip", "=", "False", ")", "]", "\n", "self", ".", "scale_layers", "=", "nn", ".", "ModuleList", "(", "layers", ")", "\n", "\n", "# Classify (purple in article)", "\n", "input_depth", "=", "self", ".", "base_depth", "*", "4", "*", "(", "1", "+", "len", "(", "self", ".", "scale_layers", ")", ")", "\n", "self", ".", "classify", "=", "ReduceToSoftmax", "(", "input_depth", ",", "out_depths", "=", "[", "self", ".", "base_depth", "*", "8", ",", "self", ".", "base_depth", "*", "8", ",", "nbr_classes", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.net.deterministic.SSC.forward": [[169, 178], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "deterministic.SSC.classify", "deterministic.SSC.base_features", "y_scales.append", "layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y_scales", "=", "[", "self", ".", "base_features", "(", "x", ")", "]", "\n", "for", "layer", "in", "self", ".", "scale_layers", ":", "\n", "            ", "y_scales", ".", "append", "(", "layer", "(", "y_scales", "[", "-", "1", "]", ")", ")", "\n", "\n", "", "y_scales_cat", "=", "torch", ".", "cat", "(", "y_scales", ",", "dim", "=", "1", ")", "\n", "y", "=", "self", ".", "classify", "(", "y_scales_cat", ")", "\n", "\n", "return", "{", "'log_score'", ":", "y", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.net.deterministic.SSC.load_state_dict": [[179, 185], ["deterministic.DetCNN.load_state_dict", "state_dict.items"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.SampleNet.load_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ",", "transfer", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "# Filter out the classification layers if transfer.", "\n", "        ", "if", "transfer", ":", "\n", "            ", "state_dict", "=", "{", "k", ":", "v", "for", "(", "k", ",", "v", ")", "in", "state_dict", ".", "items", "(", ")", "if", "'classify'", "not", "in", "k", "}", "\n", "\n", "", "return", "super", "(", ")", ".", "load_state_dict", "(", "state_dict", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.net.deterministic.MNIST_CNN_simple.__init__": [[187, 197], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "deterministic.ConvBlock", "deterministic.View", "deterministic.ReduceToSoftmax", "deterministic.View"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.Cauchy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nbr_classes", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nbr_classes", "=", "nbr_classes", "\n", "self", ".", "img_size", "=", "(", "28", ",", "28", ")", "\n", "\n", "layers", "=", "[", "ConvBlock", "(", "1", ",", "10", ",", "3", ",", "padding", "=", "1", ",", "dim", "=", "2", ")", "]", "\n", "layers", "+=", "[", "View", "(", "[", "-", "1", ",", "1", "]", ")", "]", "\n", "layers", "+=", "[", "ReduceToSoftmax", "(", "self", ".", "img_size", "[", "0", "]", "*", "self", ".", "img_size", "[", "1", "]", "*", "10", ",", "out_depths", "=", "[", "nbr_classes", ",", "nbr_classes", "]", ",", "dim", "=", "1", ")", "]", "\n", "layers", "+=", "[", "View", "(", "[", "-", "1", "]", ")", "]", "\n", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.net.deterministic.MNIST_CNN_simple.forward": [[198, 201], ["deterministic.MNIST_CNN_simple.layers"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "layers", "(", "x", ")", "\n", "return", "{", "'log_score'", ":", "y", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.net.deterministic.UNet.__init__": [[205, 257], ["torch.Module.__init__", "deterministic.UNet.cfg.get", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "deterministic.ReduceToSoftmax", "list", "torch.ReplicationPad3d", "torch.ReplicationPad3d", "torch.ReplicationPad3d", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Identity", "deterministic.UNet._block", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "deterministic.UNet._block", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "deterministic.UNet._block", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "deterministic.UNet._block", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "deterministic.UNet._block", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "deterministic.UNet._block", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "deterministic.UNet._block", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "deterministic.UNet._block", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "deterministic.UNet._block", "torch.ReplicationPad3d", "torch.ReplicationPad3d", "torch.ReplicationPad3d", "torch.Identity", "torch.Identity", "torch.Identity", "itertools.chain"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.Cauchy.__init__", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHousesMemory.get", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.BSSC_UNet._block", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.BSSC_UNet._block", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.BSSC_UNet._block", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.BSSC_UNet._block", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.BSSC_UNet._block", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.BSSC_UNet._block", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.BSSC_UNet._block", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.BSSC_UNet._block", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.BSSC_UNet._block"], ["    ", "def", "__init__", "(", "self", ",", "nbr_classes", ",", "cfg", ",", "init_features", "=", "16", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "nbr_classes", "=", "nbr_classes", "\n", "self", ".", "cfg", "=", "cfg", "\n", "input_pad", "=", "self", ".", "cfg", ".", "get", "(", "'UNet_padding'", ",", "None", ")", "\n", "self", ".", "output_dim", "=", "3", "\n", "\n", "features", "=", "init_features", "\n", "if", "input_pad", ":", "\n", "            ", "repl_pad", "=", "list", "(", "itertools", ".", "chain", "(", "*", "[", "(", "ip", "//", "2", ",", "ip", "-", "(", "ip", "//", "2", ")", ")", "for", "ip", "in", "input_pad", "]", ")", ")", "\n", "self", ".", "pad_input", "=", "nn", ".", "ReplicationPad3d", "(", "repl_pad", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "pad_input", "=", "nn", ".", "Identity", "(", ")", "\n", "", "self", ".", "pools", "=", "[", "nn", ".", "Identity", "(", ")", "]", "\n", "self", ".", "encoders", "=", "[", "self", ".", "_block", "(", "1", ",", "features", ",", "name", "=", "\"enc1\"", ")", "]", "\n", "self", ".", "pools", "+=", "[", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "self", ".", "encoders", "+=", "[", "self", ".", "_block", "(", "features", ",", "features", "*", "2", ",", "name", "=", "\"enc2\"", ")", "]", "\n", "self", ".", "pools", "+=", "[", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "self", ".", "encoders", "+=", "[", "self", ".", "_block", "(", "features", "*", "2", ",", "features", "*", "4", ",", "name", "=", "\"enc3\"", ")", "]", "\n", "self", ".", "pools", "+=", "[", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "self", ".", "encoders", "+=", "[", "self", ".", "_block", "(", "features", "*", "4", ",", "features", "*", "8", ",", "name", "=", "\"enc4\"", ")", "]", "\n", "self", ".", "pools", "+=", "[", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "\n", "self", ".", "encoders", "+=", "[", "self", ".", "_block", "(", "features", "*", "8", ",", "features", "*", "16", ",", "name", "=", "\"bottleneck\"", ")", "]", "\n", "\n", "self", ".", "pools", "=", "nn", ".", "ModuleList", "(", "self", ".", "pools", ")", "\n", "self", ".", "encoders", "=", "nn", ".", "ModuleList", "(", "self", ".", "encoders", ")", "\n", "\n", "self", ".", "upconvs", "=", "[", "nn", ".", "ConvTranspose3d", "(", "\n", "features", "*", "16", ",", "features", "*", "8", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", "\n", ")", "]", "\n", "self", ".", "decoders", "=", "[", "self", ".", "_block", "(", "(", "features", "*", "8", ")", "*", "2", ",", "features", "*", "8", ",", "name", "=", "\"dec4\"", ")", "]", "\n", "self", ".", "upconvs", "+=", "[", "nn", ".", "ConvTranspose3d", "(", "\n", "features", "*", "8", ",", "features", "*", "4", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", "\n", ")", "]", "\n", "self", ".", "decoders", "+=", "[", "self", ".", "_block", "(", "(", "features", "*", "4", ")", "*", "2", ",", "features", "*", "4", ",", "name", "=", "\"dec3\"", ")", "]", "\n", "self", ".", "upconvs", "+=", "[", "nn", ".", "ConvTranspose3d", "(", "\n", "features", "*", "4", ",", "features", "*", "2", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", "\n", ")", "]", "\n", "self", ".", "decoders", "+=", "[", "self", ".", "_block", "(", "(", "features", "*", "2", ")", "*", "2", ",", "features", "*", "2", ",", "name", "=", "\"dec2\"", ")", "]", "\n", "self", ".", "upconvs", "+=", "[", "nn", ".", "ConvTranspose3d", "(", "\n", "features", "*", "2", ",", "features", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", "\n", ")", "]", "\n", "self", ".", "decoders", "+=", "[", "self", ".", "_block", "(", "features", "*", "2", ",", "features", ",", "name", "=", "\"dec1\"", ")", "]", "\n", "\n", "self", ".", "upconvs", "=", "nn", ".", "ModuleList", "(", "self", ".", "upconvs", ")", "\n", "self", ".", "decoders", "=", "nn", ".", "ModuleList", "(", "self", ".", "decoders", ")", "\n", "\n", "self", ".", "crop", "=", "nn", ".", "ReplicationPad3d", "(", "[", "-", "p", "for", "p", "in", "repl_pad", "]", ")", "if", "input_pad", "else", "nn", ".", "Identity", "(", ")", "\n", "\n", "self", ".", "classify", "=", "ReduceToSoftmax", "(", "features", ",", "out_depths", "=", "[", "self", ".", "nbr_classes", ",", "self", ".", "nbr_classes", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.net.deterministic.UNet.forward": [[258, 275], ["deterministic.UNet.pad_input", "enumerate", "encoded.pop", "zip", "deterministic.UNet.crop", "deterministic.UNet.classify", "zip", "encode", "encoded.append", "upconv", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "decode", "pool"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "pad_input", "(", "x", ")", "\n", "encoded", "=", "[", "]", "\n", "for", "i", ",", "(", "encode", ",", "pool", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "encoders", ",", "self", ".", "pools", ")", ")", ":", "\n", "            ", "input", "=", "x", "if", "i", "==", "0", "else", "encoded", "[", "-", "1", "]", "\n", "e", "=", "encode", "(", "pool", "(", "input", ")", ")", "\n", "encoded", ".", "append", "(", "e", ")", "\n", "\n", "", "d", "=", "encoded", ".", "pop", "(", ")", "#bottleneck", "\n", "for", "e", ",", "decode", ",", "upconv", "in", "zip", "(", "encoded", "[", ":", ":", "-", "1", "]", ",", "self", ".", "decoders", ",", "self", ".", "upconvs", ")", ":", "\n", "            ", "d", "=", "upconv", "(", "d", ")", "\n", "d", "=", "torch", ".", "cat", "(", "(", "d", ",", "e", ")", ",", "dim", "=", "1", ")", "\n", "d", "=", "decode", "(", "d", ")", "\n", "\n", "", "d", "=", "self", ".", "crop", "(", "d", ")", "\n", "y", "=", "self", ".", "classify", "(", "d", ")", "\n", "return", "{", "'log_score'", ":", "y", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.net.deterministic.UNet._block": [[276, 280], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "deterministic.ConvBlock", "deterministic.ConvBlock"], "methods", ["None"], ["", "def", "_block", "(", "self", ",", "in_channels", ",", "features", ",", "name", ")", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "ConvBlock", "(", "in_channels", ",", "features", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "ConvBlock", "(", "features", ",", "features", ",", "3", ",", "padding", "=", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.BNN.__init__": [[15, 25], ["torch.Module.__init__", "ssc.net.bayesian.prior.Prior.create_from_cfg"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.Cauchy.__init__", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.Prior.create_from_cfg"], ["    ", "def", "__init__", "(", "self", ",", "nbr_classes", ",", "cfg", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bayesian", "=", "True", "\n", "self", ".", "fixed", "=", "False", "\n", "self", ".", "nbr_classes", "=", "nbr_classes", "\n", "self", ".", "prior", "=", "Prior", ".", "create_from_cfg", "(", "cfg", ")", "\n", "self", ".", "var_init", "=", "cfg", "[", "'var_init'", "]", "\n", "self", ".", "batch_norm", "=", "cfg", "[", "'batch_norm'", "]", "\n", "self", ".", "activation", "=", "cfg", "[", "'activation'", "]", "\n", "self", ".", "cfg", "=", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.BNN.fix_parameters": [[26, 29], ["models.BNN.modules"], "methods", ["None"], ["", "def", "fix_parameters", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "m", ".", "fixed", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.BNN.release_parameters": [[30, 33], ["models.BNN.modules"], "methods", ["None"], ["", "", "def", "release_parameters", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "m", ".", "fixed", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.BNN.forward": [[34, 43], ["models.BNN.layers", "models.BNN.layers"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# Unless overriding this function the BNN needs to declare a BSequential module as self.layers.", "\n", "        ", "result", "=", "{", "}", "\n", "if", "self", ".", "fixed", ":", "\n", "            ", "result", "[", "'log_score'", "]", "=", "self", ".", "layers", "(", "x", ")", "\n", "result", "[", "'kl'", "]", "=", "0", "\n", "", "else", ":", "\n", "            ", "result", "[", "'log_score'", "]", ",", "result", "[", "'kl'", "]", "=", "self", ".", "layers", "(", "x", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.BSSC_test.__init__": [[47, 66], ["models.BNN.__init__", "ssc.net.bayesian.layers.BSequential", "models.BSSC_test.release_parameters", "ssc.net.bayesian.layers.BSkipAddBlock", "ssc.net.bayesian.layers.BReduceToProb"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.Cauchy.__init__", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.SampleNet.release_parameters"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ")", "\n", "self", ".", "base_depth", "=", "8", "\n", "self", ".", "base_dilation", "=", "2", "\n", "self", ".", "output_dim", "=", "3", "\n", "\n", "layers", "=", "[", "BSkipAddBlock", "(", "self", ".", "prior", ",", "self", ".", "var_init", ",", "1", ",", "out_depths", "=", "[", "self", ".", "base_depth", ",", "self", ".", "base_depth", "*", "2", ",", "self", ".", "base_depth", "*", "4", "]", ",", "\n", "kernel_sizes", "=", "[", "5", ",", "3", ",", "3", "]", ",", "\n", "dilations", "=", "3", "*", "[", "self", ".", "base_dilation", "]", ",", "\n", "reduce_skip", "=", "True", ",", "\n", "batch_norm", "=", "self", ".", "batch_norm", ",", "\n", "activation", "=", "self", ".", "activation", ")", "]", "\n", "layers", "+=", "[", "BReduceToProb", "(", "self", ".", "prior", ",", "self", ".", "var_init", ",", "self", ".", "base_depth", "*", "4", ",", "\n", "out_depths", "=", "[", "self", ".", "base_depth", "*", "4", ",", "self", ".", "nbr_classes", "]", ",", "\n", "batch_norm", "=", "self", ".", "batch_norm", ",", "\n", "activation", "=", "self", ".", "activation", ")", "]", "\n", "self", ".", "layers", "=", "BSequential", "(", "*", "layers", ")", "\n", "\n", "self", ".", "release_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.BSSC.__init__": [[72, 131], ["models.BNN.__init__", "ssc.net.bayesian.layers.BSequential", "torch.ModuleList", "torch.ModuleList", "ssc.net.bayesian.layers.BReduceToProb", "models.BSSC.release_parameters", "ssc.net.bayesian.layers.BSkipAddBlock", "ssc.net.bayesian.layers.BConv", "ssc.net.bayesian.layers.BSkipAddBlock", "ssc.net.bayesian.layers.BSkipAddBlock", "ssc.net.bayesian.layers.BSkipAddBlock", "ssc.net.bayesian.layers.BSkipAddBlock", "len"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.Cauchy.__init__", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.SampleNet.release_parameters"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ")", "\n", "self", ".", "base_depth", "=", "8", "# 16 in paper", "\n", "self", ".", "base_dilation", "=", "1", "\n", "self", ".", "output_dim", "=", "3", "\n", "\n", "# Feature construction (green in article)", "\n", "layers", "=", "[", "BSkipAddBlock", "(", "self", ".", "prior", ",", "self", ".", "var_init", ",", "1", ",", "\n", "out_depths", "=", "[", "self", ".", "base_depth", ",", "self", ".", "base_depth", "*", "2", ",", "self", ".", "base_depth", "*", "2", "]", ",", "\n", "kernel_sizes", "=", "[", "7", ",", "3", ",", "3", "]", ",", "\n", "dilations", "=", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "reduce_skip", "=", "True", ",", "\n", "batch_norm", "=", "self", ".", "batch_norm", ",", "\n", "activation", "=", "self", ".", "activation", ")", "]", "\n", "#Dilated convolution instead of max pooling", "\n", "layers", "+=", "[", "BConv", "(", "self", ".", "prior", ",", "self", ".", "var_init", ",", "self", ".", "base_depth", "*", "2", ",", "self", ".", "base_depth", "*", "2", ",", "3", ",", "\n", "dilation", "=", "2", "*", "self", ".", "base_dilation", ",", "\n", "padding", "=", "2", "*", "self", ".", "base_dilation", ")", "]", "\n", "layers", "+=", "[", "BSkipAddBlock", "(", "self", ".", "prior", ",", "self", ".", "var_init", ",", "self", ".", "base_depth", "*", "2", ",", "\n", "out_depths", "=", "[", "self", ".", "base_depth", "*", "4", ",", "self", ".", "base_depth", "*", "4", "]", ",", "\n", "kernel_sizes", "=", "[", "3", ",", "3", "]", ",", "\n", "dilations", "=", "2", "*", "[", "self", ".", "base_dilation", "]", ",", "\n", "reduce_skip", "=", "True", ",", "\n", "batch_norm", "=", "self", ".", "batch_norm", ",", "\n", "activation", "=", "self", ".", "activation", ")", "]", "\n", "layers", "+=", "[", "BSkipAddBlock", "(", "self", ".", "prior", ",", "self", ".", "var_init", ",", "self", ".", "base_depth", "*", "4", ",", "\n", "out_depths", "=", "[", "self", ".", "base_depth", "*", "4", ",", "self", ".", "base_depth", "*", "4", "]", ",", "\n", "kernel_sizes", "=", "[", "3", ",", "3", "]", ",", "\n", "dilations", "=", "2", "*", "[", "self", ".", "base_dilation", "]", ",", "\n", "reduce_skip", "=", "False", ",", "\n", "batch_norm", "=", "self", ".", "batch_norm", ",", "\n", "activation", "=", "self", ".", "activation", ")", "]", "\n", "self", ".", "base_features", "=", "BSequential", "(", "*", "layers", ")", "\n", "\n", "# Scale combining (yellow in article)", "\n", "layers", "=", "[", "BSkipAddBlock", "(", "self", ".", "prior", ",", "self", ".", "var_init", ",", "self", ".", "base_depth", "*", "4", ",", "\n", "out_depths", "=", "[", "self", ".", "base_depth", "*", "4", ",", "self", ".", "base_depth", "*", "4", "]", ",", "\n", "kernel_sizes", "=", "[", "3", ",", "3", "]", ",", "\n", "dilations", "=", "2", "*", "[", "self", ".", "base_dilation", "*", "2", "]", ",", "\n", "reduce_skip", "=", "False", ",", "\n", "batch_norm", "=", "self", ".", "batch_norm", ",", "\n", "activation", "=", "self", ".", "activation", ")", "]", "\n", "layers", "+=", "[", "BSkipAddBlock", "(", "self", ".", "prior", ",", "self", ".", "var_init", ",", "self", ".", "base_depth", "*", "4", ",", "\n", "out_depths", "=", "[", "self", ".", "base_depth", "*", "4", ",", "self", ".", "base_depth", "*", "4", "]", ",", "\n", "kernel_sizes", "=", "[", "3", ",", "3", "]", ",", "\n", "dilations", "=", "2", "*", "[", "self", ".", "base_dilation", "*", "2", "]", ",", "\n", "reduce_skip", "=", "False", ",", "\n", "batch_norm", "=", "self", ".", "batch_norm", ",", "\n", "activation", "=", "self", ".", "activation", ")", "]", "\n", "self", ".", "scale_layers", "=", "nn", ".", "ModuleList", "(", "layers", ")", "\n", "\n", "# Classify (purple in article)", "\n", "input_depth", "=", "self", ".", "base_depth", "*", "4", "*", "(", "1", "+", "len", "(", "self", ".", "scale_layers", ")", ")", "\n", "self", ".", "classify", "=", "BReduceToProb", "(", "self", ".", "prior", ",", "self", ".", "var_init", ",", "input_depth", ",", "\n", "out_depths", "=", "[", "self", ".", "base_depth", "*", "8", ",", "self", ".", "base_depth", "*", "8", ",", "self", ".", "nbr_classes", "]", ",", "\n", "batch_norm", "=", "self", ".", "batch_norm", ",", "\n", "activation", "=", "self", ".", "activation", ")", "\n", "\n", "self", ".", "release_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.BSSC.forward": [[133, 150], ["models.BSSC.base_features", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.BSSC.classify", "models.BSSC.fixed_forward", "layer", "y_scales.append"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.layers.BSkipAddBlock.fixed_forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "fixed", ":", "\n", "            ", "return", "self", ".", "fixed_forward", "(", "x", ")", "\n", "\n", "", "y", ",", "acc_kl", "=", "self", ".", "base_features", "(", "x", ")", "\n", "y_scales", "=", "[", "y", "]", "\n", "for", "layer", "in", "self", ".", "scale_layers", ":", "\n", "            ", "y", ",", "kl", "=", "layer", "(", "y_scales", "[", "-", "1", "]", ")", "\n", "acc_kl", "+=", "kl", "\n", "y_scales", ".", "append", "(", "y", ")", "\n", "\n", "", "y_scales_cat", "=", "torch", ".", "cat", "(", "y_scales", ",", "dim", "=", "1", ")", "\n", "y", ",", "kl", "=", "self", ".", "classify", "(", "y_scales_cat", ")", "\n", "\n", "acc_kl", "+=", "kl", "\n", "\n", "return", "{", "'log_score'", ":", "y", ",", "'kl'", ":", "acc_kl", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.BSSC.fixed_forward": [[151, 161], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.BSSC.classify", "models.BSSC.base_features", "y_scales.append", "layer"], "methods", ["None"], ["", "def", "fixed_forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "result", "=", "{", "}", "\n", "y_scales", "=", "[", "self", ".", "base_features", "(", "x", ")", "]", "\n", "for", "layer", "in", "self", ".", "scale_layers", ":", "\n", "            ", "y_scales", ".", "append", "(", "layer", "(", "y_scales", "[", "-", "1", "]", ")", ")", "\n", "\n", "", "y_scales_cat", "=", "torch", ".", "cat", "(", "y_scales", ",", "dim", "=", "1", ")", "\n", "y", "=", "self", ".", "classify", "(", "y_scales_cat", ")", "\n", "\n", "return", "{", "'log_score'", ":", "y", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.MNIST_BCNN.__init__": [[163, 187], ["models.BNN.__init__", "ssc.net.bayesian.layers.BSequential", "models.MNIST_BCNN.release_parameters", "ssc.net.bayesian.layers.BSkipAddBlock", "ssc.net.deterministic.View", "ssc.net.bayesian.layers.BReduceToProb", "ssc.net.deterministic.View"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.Cauchy.__init__", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.SampleNet.release_parameters"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ")", "\n", "self", ".", "base_depth", "=", "8", "\n", "self", ".", "base_dilation", "=", "2", "\n", "self", ".", "img_size", "=", "(", "28", ",", "28", ")", "\n", "self", ".", "output_dim", "=", "1", "\n", "\n", "layers", "=", "[", "BSkipAddBlock", "(", "self", ".", "prior", ",", "self", ".", "var_init", ",", "1", ",", "out_depths", "=", "[", "self", ".", "base_depth", ",", "self", ".", "base_depth", "*", "2", ",", "self", ".", "base_depth", "*", "4", "]", ",", "\n", "kernel_sizes", "=", "[", "5", ",", "3", ",", "3", "]", ",", "\n", "dilations", "=", "3", "*", "[", "self", ".", "base_dilation", "]", ",", "\n", "reduce_skip", "=", "True", ",", "\n", "batch_norm", "=", "self", ".", "batch_norm", ",", "\n", "dim", "=", "2", ",", "\n", "activation", "=", "self", ".", "activation", ")", "]", "\n", "layers", "+=", "[", "View", "(", "[", "-", "1", ",", "1", "]", ")", "]", "\n", "layers", "+=", "[", "BReduceToProb", "(", "self", ".", "prior", ",", "self", ".", "var_init", ",", "self", ".", "img_size", "[", "0", "]", "*", "self", ".", "img_size", "[", "1", "]", "*", "self", ".", "base_depth", "*", "4", ",", "\n", "out_depths", "=", "[", "self", ".", "base_depth", "*", "4", ",", "self", ".", "nbr_classes", "]", ",", "\n", "batch_norm", "=", "self", ".", "batch_norm", ",", "\n", "dim", "=", "self", ".", "output_dim", ",", "\n", "activation", "=", "self", ".", "activation", ")", "]", "\n", "layers", "+=", "[", "View", "(", "[", "-", "1", "]", ")", "]", "\n", "self", ".", "layers", "=", "BSequential", "(", "*", "layers", ")", "\n", "\n", "self", ".", "release_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.MNIST_BCNN_simple.__init__": [[190, 210], ["models.BNN.__init__", "ssc.net.bayesian.layers.BSequential", "models.MNIST_BCNN_simple.release_parameters", "ssc.net.bayesian.layers.BConvBlock", "ssc.net.deterministic.View", "ssc.net.bayesian.layers.BReduceToProb", "ssc.net.deterministic.View"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.Cauchy.__init__", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.SampleNet.release_parameters"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ")", "\n", "self", ".", "img_size", "=", "(", "28", ",", "28", ")", "\n", "self", ".", "output_dim", "=", "1", "\n", "\n", "layers", "=", "[", "BConvBlock", "(", "self", ".", "prior", ",", "self", ".", "var_init", ",", "1", ",", "10", ",", "3", ",", "\n", "padding", "=", "1", ",", "\n", "batch_norm", "=", "self", ".", "batch_norm", ",", "\n", "dim", "=", "2", ",", "\n", "activation", "=", "self", ".", "activation", ")", "]", "\n", "layers", "+=", "[", "View", "(", "[", "-", "1", ",", "1", "]", ")", "]", "\n", "layers", "+=", "[", "BReduceToProb", "(", "self", ".", "prior", ",", "self", ".", "var_init", ",", "self", ".", "img_size", "[", "0", "]", "*", "self", ".", "img_size", "[", "1", "]", "*", "10", ",", "\n", "out_depths", "=", "[", "self", ".", "nbr_classes", ",", "self", ".", "nbr_classes", "]", ",", "\n", "batch_norm", "=", "self", ".", "batch_norm", ",", "\n", "dim", "=", "self", ".", "output_dim", ",", "\n", "activation", "=", "self", ".", "activation", ")", "]", "\n", "layers", "+=", "[", "View", "(", "[", "-", "1", "]", ")", "]", "\n", "self", ".", "layers", "=", "BSequential", "(", "*", "layers", ")", "\n", "\n", "self", ".", "release_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.BSSC_UNet.__init__": [[213, 266], ["models.BNN.__init__", "models.BSSC_UNet.cfg.get", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "ssc.net.bayesian.layers.BReduceToProb", "list", "torch.ReplicationPad3d", "torch.ReplicationPad3d", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Identity", "models.BSSC_UNet._block", "torch.MaxPool3d", "torch.MaxPool3d", "models.BSSC_UNet._block", "torch.MaxPool3d", "torch.MaxPool3d", "models.BSSC_UNet._block", "torch.MaxPool3d", "torch.MaxPool3d", "models.BSSC_UNet._block", "torch.MaxPool3d", "torch.MaxPool3d", "models.BSSC_UNet._block", "ssc.net.bayesian.layers.BConvTranspose", "models.BSSC_UNet._block", "ssc.net.bayesian.layers.BConvTranspose", "models.BSSC_UNet._block", "ssc.net.bayesian.layers.BConvTranspose", "models.BSSC_UNet._block", "ssc.net.bayesian.layers.BConvTranspose", "models.BSSC_UNet._block", "torch.ReplicationPad3d", "torch.ReplicationPad3d", "torch.Identity", "torch.Identity", "itertools.chain"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.Cauchy.__init__", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHousesMemory.get", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.BSSC_UNet._block", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.BSSC_UNet._block", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.BSSC_UNet._block", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.BSSC_UNet._block", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.BSSC_UNet._block", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.BSSC_UNet._block", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.BSSC_UNet._block", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.BSSC_UNet._block", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.BSSC_UNet._block"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "init_features", "=", "16", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ")", "\n", "\n", "input_pad", "=", "self", ".", "cfg", ".", "get", "(", "'UNet_padding'", ",", "None", ")", "\n", "self", ".", "output_dim", "=", "3", "\n", "\n", "features", "=", "init_features", "\n", "if", "input_pad", ":", "\n", "            ", "repl_pad", "=", "list", "(", "itertools", ".", "chain", "(", "*", "[", "(", "ip", "//", "2", ",", "ip", "-", "(", "ip", "//", "2", ")", ")", "for", "ip", "in", "input_pad", "]", ")", ")", "\n", "self", ".", "pad_input", "=", "nn", ".", "ReplicationPad3d", "(", "repl_pad", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "pad_input", "=", "nn", ".", "Identity", "(", ")", "\n", "", "self", ".", "pools", "=", "[", "nn", ".", "Identity", "(", ")", "]", "\n", "self", ".", "encoders", "=", "[", "self", ".", "_block", "(", "1", ",", "features", ",", "name", "=", "\"enc1\"", ")", "]", "\n", "self", ".", "pools", "+=", "[", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "self", ".", "encoders", "+=", "[", "self", ".", "_block", "(", "features", ",", "features", "*", "2", ",", "name", "=", "\"enc2\"", ")", "]", "\n", "self", ".", "pools", "+=", "[", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "self", ".", "encoders", "+=", "[", "self", ".", "_block", "(", "features", "*", "2", ",", "features", "*", "4", ",", "name", "=", "\"enc3\"", ")", "]", "\n", "self", ".", "pools", "+=", "[", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "self", ".", "encoders", "+=", "[", "self", ".", "_block", "(", "features", "*", "4", ",", "features", "*", "8", ",", "name", "=", "\"enc4\"", ")", "]", "\n", "self", ".", "pools", "+=", "[", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "\n", "self", ".", "encoders", "+=", "[", "self", ".", "_block", "(", "features", "*", "8", ",", "features", "*", "16", ",", "name", "=", "\"bottleneck\"", ")", "]", "\n", "\n", "self", ".", "pools", "=", "nn", ".", "ModuleList", "(", "self", ".", "pools", ")", "\n", "self", ".", "encoders", "=", "nn", ".", "ModuleList", "(", "self", ".", "encoders", ")", "\n", "\n", "self", ".", "upconvs", "=", "[", "BConvTranspose", "(", "self", ".", "prior", ",", "self", ".", "var_init", ",", "\n", "features", "*", "16", ",", "features", "*", "8", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "dim", "=", "3", "\n", ")", "]", "\n", "self", ".", "decoders", "=", "[", "self", ".", "_block", "(", "(", "features", "*", "8", ")", "*", "2", ",", "features", "*", "8", ",", "name", "=", "\"dec4\"", ")", "]", "\n", "self", ".", "upconvs", "+=", "[", "BConvTranspose", "(", "self", ".", "prior", ",", "self", ".", "var_init", ",", "\n", "features", "*", "8", ",", "features", "*", "4", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "dim", "=", "3", "\n", ")", "]", "\n", "self", ".", "decoders", "+=", "[", "self", ".", "_block", "(", "(", "features", "*", "4", ")", "*", "2", ",", "features", "*", "4", ",", "name", "=", "\"dec3\"", ")", "]", "\n", "self", ".", "upconvs", "+=", "[", "BConvTranspose", "(", "self", ".", "prior", ",", "self", ".", "var_init", ",", "\n", "features", "*", "4", ",", "features", "*", "2", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "dim", "=", "3", "\n", ")", "]", "\n", "self", ".", "decoders", "+=", "[", "self", ".", "_block", "(", "(", "features", "*", "2", ")", "*", "2", ",", "features", "*", "2", ",", "name", "=", "\"dec2\"", ")", "]", "\n", "self", ".", "upconvs", "+=", "[", "BConvTranspose", "(", "self", ".", "prior", ",", "self", ".", "var_init", ",", "\n", "features", "*", "2", ",", "features", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "dim", "=", "3", "\n", ")", "]", "\n", "self", ".", "decoders", "+=", "[", "self", ".", "_block", "(", "features", "*", "2", ",", "features", ",", "name", "=", "\"dec1\"", ")", "]", "\n", "\n", "self", ".", "upconvs", "=", "nn", ".", "ModuleList", "(", "self", ".", "upconvs", ")", "\n", "self", ".", "decoders", "=", "nn", ".", "ModuleList", "(", "self", ".", "decoders", ")", "\n", "\n", "self", ".", "crop", "=", "nn", ".", "ReplicationPad3d", "(", "[", "-", "p", "for", "p", "in", "repl_pad", "]", ")", "if", "input_pad", "else", "nn", ".", "Identity", "(", ")", "\n", "\n", "self", ".", "classify", "=", "BReduceToProb", "(", "self", ".", "prior", ",", "self", ".", "var_init", ",", "features", ",", "\n", "out_depths", "=", "[", "self", ".", "nbr_classes", ",", "self", ".", "nbr_classes", "]", ",", "\n", "batch_norm", "=", "self", ".", "batch_norm", ",", "\n", "activation", "=", "self", ".", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.BSSC_UNet.forward": [[267, 289], ["models.BSSC_UNet.pad_input", "enumerate", "encoded.pop", "zip", "models.BSSC_UNet.crop", "models.BSSC_UNet.classify", "zip", "encode", "encoded.append", "upconv", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "decode", "pool"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "pad_input", "(", "x", ")", "\n", "encoded", "=", "[", "]", "\n", "acc_kl", "=", "0", "\n", "for", "i", ",", "(", "encode", ",", "pool", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "encoders", ",", "self", ".", "pools", ")", ")", ":", "\n", "            ", "input", "=", "x", "if", "i", "==", "0", "else", "encoded", "[", "-", "1", "]", "\n", "e", ",", "kl", "=", "encode", "(", "pool", "(", "input", ")", ")", "\n", "encoded", ".", "append", "(", "e", ")", "\n", "acc_kl", "+=", "kl", "\n", "\n", "", "d", "=", "encoded", ".", "pop", "(", ")", "#bottleneck", "\n", "for", "e", ",", "decode", ",", "upconv", "in", "zip", "(", "encoded", "[", ":", ":", "-", "1", "]", ",", "self", ".", "decoders", ",", "self", ".", "upconvs", ")", ":", "\n", "            ", "d", ",", "kl", "=", "upconv", "(", "d", ")", "\n", "acc_kl", "+=", "kl", "\n", "d", "=", "torch", ".", "cat", "(", "(", "d", ",", "e", ")", ",", "dim", "=", "1", ")", "\n", "d", ",", "kl", "=", "decode", "(", "d", ")", "\n", "acc_kl", "+=", "kl", "\n", "\n", "", "d", "=", "self", ".", "crop", "(", "d", ")", "\n", "y", ",", "kl", "=", "self", ".", "classify", "(", "d", ")", "\n", "acc_kl", "+=", "kl", "\n", "return", "{", "'log_score'", ":", "y", ",", "'kl'", ":", "acc_kl", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.BSSC_UNet._block": [[290, 294], ["ssc.net.bayesian.layers.BSequential", "ssc.net.bayesian.layers.BConvBlock", "ssc.net.bayesian.layers.BConvBlock"], "methods", ["None"], ["", "def", "_block", "(", "self", ",", "in_channels", ",", "features", ",", "name", ")", ":", "\n", "        ", "return", "BSequential", "(", "\n", "BConvBlock", "(", "self", ".", "prior", ",", "self", ".", "var_init", ",", "in_channels", ",", "features", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "BConvBlock", "(", "self", ".", "prior", ",", "self", ".", "var_init", ",", "features", ",", "features", ",", "3", ",", "padding", "=", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.MetricRegression.__init__": [[298, 310], ["torch.Module.__init__", "getattr", "getattr", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "ssc.net.deterministic.ConvBlock", "getattr.", "torch.LogSoftmax", "torch.LogSoftmax"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.Cauchy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nbr_metrics", ",", "dim", "=", "3", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "conv", "=", "getattr", "(", "nn", ",", "'Conv{}d'", ".", "format", "(", "dim", ")", ")", "\n", "bn", "=", "getattr", "(", "nn", ",", "'BatchNorm{}d'", ".", "format", "(", "dim", ")", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "ConvBlock", "(", "nbr_metrics", ",", "2", "*", "nbr_metrics", ",", "1", ",", "bias", "=", "False", ",", "dim", "=", "dim", ")", ",", "\n", "conv", "(", "2", "*", "nbr_metrics", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", ")", "\n", "self", ".", "activation", "=", "nn", ".", "Sequential", "(", "\n", "# bn(1),", "\n", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.MetricRegression.forward": [[312, 333], ["models.MetricRegression.view", "models.MetricRegression.conv", "models.MetricRegression.view", "models.MetricRegression.activation"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# Input (N, C, M, data_dim) where", "\n", "# N - Nbr Batches", "\n", "# C - Nbr Classes", "\n", "# M - Nbr Metrics", "\n", "\n", "        ", "N", "=", "x", ".", "shape", "[", "0", "]", "\n", "C", "=", "x", ".", "shape", "[", "1", "]", "\n", "M", "=", "x", ".", "shape", "[", "2", "]", "\n", "if", "x", ".", "ndim", ">", "3", ":", "\n", "            ", "data_in_dim", "=", "data_out_dim", "=", "x", ".", "shape", "[", "3", ":", "]", "\n", "", "else", ":", "\n", "            ", "data_in_dim", "=", "[", "1", "]", "\n", "data_out_dim", "=", "[", "]", "\n", "\n", "# Merge batch and class to one channel to enable 3D data input", "\n", "", "x", "=", "x", ".", "view", "(", "[", "N", "*", "C", ",", "M", ",", "*", "data_in_dim", "]", ")", "\n", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "[", "N", ",", "C", ",", "*", "data_out_dim", "]", ")", "\n", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.SampleNet.__init__": [[335, 354], ["torch.Module.__init__", "cfg.get", "cfg.get", "models.SampleNet.metrics.sort", "models.MetricRegression", "torch.any", "torch.any", "torch.any", "torch.any", "len", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.Cauchy.__init__", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHousesMemory.get", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHousesMemory.get"], ["    ", "def", "__init__", "(", "self", ",", "bnn", ",", "cfg", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "bnn", ".", "bayesian", "\n", "self", ".", "bayesian", "=", "True", "\n", "self", ".", "fixed", "=", "False", "\n", "self", ".", "bnn", "=", "bnn", "\n", "self", ".", "metrics", "=", "cfg", ".", "get", "(", "'fuse_metrics'", ",", "None", ")", "\n", "\n", "\n", "if", "self", ".", "metrics", ":", "\n", "            ", "self", ".", "metrics", ".", "sort", "(", ")", "\n", "self", ".", "sample_net", "=", "MetricRegression", "(", "len", "(", "self", ".", "metrics", ")", ",", "bnn", ".", "output_dim", ")", "\n", "self", ".", "var_in_metrics", "=", "torch", ".", "any", "(", "torch", ".", "tensor", "(", "[", "'var'", "in", "k", "for", "k", "in", "self", ".", "metrics", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "var_in_metrics", "=", "False", "\n", "\n", "#Cfg", "\n", "", "self", ".", "nbr_f_samples", "=", "cfg", "[", "'nbr_f_samples'", "]", "\n", "self", ".", "freeze_bnn", "=", "cfg", ".", "get", "(", "'freeze_bnn'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.SampleNet.train": [[355, 360], ["super().train", "models.SampleNet.bnn.eval"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.SampleNet.train"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "train", "(", "mode", ")", "\n", "\n", "if", "self", ".", "freeze_bnn", ":", "\n", "            ", "self", ".", "bnn", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.SampleNet.fix_parameters": [[361, 364], ["models.SampleNet.bnn.fix_parameters"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.SampleNet.fix_parameters"], ["", "", "def", "fix_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "fixed", "=", "True", "\n", "self", ".", "bnn", ".", "fix_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.SampleNet.release_parameters": [[365, 368], ["models.SampleNet.bnn.release_parameters"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.SampleNet.release_parameters"], ["", "def", "release_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "fixed", "=", "False", "\n", "self", ".", "bnn", ".", "release_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.SampleNet._forward_bnn": [[369, 377], ["models.SampleNet.bnn", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "models.SampleNet.bnn"], "methods", ["None"], ["", "def", "_forward_bnn", "(", "self", ",", "x", ",", "no_grad", "=", "False", ")", ":", "\n", "        ", "if", "no_grad", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "y", "=", "self", ".", "bnn", "(", "x", ")", "\n", "", "", "else", ":", "\n", "            ", "y", "=", "self", ".", "bnn", "(", "x", ")", "\n", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.SampleNet.forward": [[378, 402], ["models.SampleNet._forward_bnn", "models.SampleNet._sample_entropy", "models.SampleNet._sample_all", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.SampleNet.sample_net", "result[].exp", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.SampleNet._forward_bnn", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.SampleNet._sample_entropy", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.SampleNet._sample_all"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# torch.autograd.set_detect_anomaly(True)", "\n", "        ", "if", "(", "\n", "self", ".", "fixed", "\n", "or", "self", ".", "nbr_f_samples", "<", "2", "\n", "or", "(", "self", ".", "training", "and", "not", "self", ".", "metrics", ")", "\n", ")", ":", "\n", "            ", "return", "self", ".", "_forward_bnn", "(", "x", ",", "no_grad", "=", "self", ".", "freeze_bnn", "or", "not", "self", ".", "training", ")", "\n", "\n", "# ------ Calculate stats over multiple forward passes ---------", "\n", "", "if", "self", ".", "training", "and", "not", "self", ".", "var_in_metrics", ":", "\n", "            ", "result", "=", "self", ".", "_sample_entropy", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "result", "=", "self", ".", "_sample_all", "(", "x", ")", "\n", "\n", "#------- Combine metrics for refined score -------", "\n", "", "if", "self", ".", "metrics", ":", "\n", "            ", "metric_cat", "=", "torch", ".", "cat", "(", "[", "result", "[", "metric", "]", "[", ":", ",", ":", ",", "None", "]", "for", "metric", "in", "self", ".", "metrics", "]", ",", "dim", "=", "2", ")", "\n", "result", "[", "'log_score'", "]", "=", "self", ".", "sample_net", "(", "metric_cat", ")", "\n", "result", "[", "'fused_score'", "]", "=", "result", "[", "'log_score'", "]", ".", "exp", "(", ")", "\n", "", "else", ":", "\n", "            ", "result", "[", "'log_score'", "]", "=", "torch", ".", "log", "(", "result", "[", "'mean_score'", "]", ")", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.SampleNet._sample_entropy": [[403, 427], ["range", "log_score.exp", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "models.SampleNet._forward_bnn", "list", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.SampleNet._forward_bnn"], ["", "def", "_sample_entropy", "(", "self", ",", "x", ")", ":", "\n", "# Uses less memory if we don't need to compute the variance", "\n", "        ", "batchN", "=", "x", ".", "shape", "[", "0", "]", "\n", "data_dim", "=", "None", "\n", "bnn_no_grad", "=", "self", ".", "freeze_bnn", "or", "not", "self", ".", "training", "\n", "\n", "result", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "self", ".", "nbr_f_samples", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "bnn_result", "=", "self", ".", "_forward_bnn", "(", "x", ",", "no_grad", "=", "(", "i", "+", "1", "<", "self", ".", "nbr_f_samples", ")", "or", "bnn_no_grad", ")", "\n", "", "log_score", "=", "bnn_result", "[", "'log_score'", "]", "\n", "if", "not", "data_dim", ":", "\n", "                ", "data_dim", "=", "list", "(", "log_score", ".", "shape", "[", "1", ":", "]", ")", "\n", "result", "[", "'mean_score'", "]", "=", "mean_score", "=", "torch", ".", "zeros", "(", "[", "batchN", "]", "+", "data_dim", ",", "device", "=", "x", ".", "device", ")", "\n", "result", "[", "'entropy'", "]", "=", "entropy", "=", "torch", ".", "zeros", "(", "[", "batchN", "]", "+", "data_dim", ",", "device", "=", "x", ".", "device", ")", "\n", "", "score", "=", "log_score", ".", "exp", "(", ")", "\n", "mean_score", "+=", "score", "\n", "entropy", "-=", "score", "*", "log_score", "\n", "\n", "", "entropy", "/=", "self", ".", "nbr_f_samples", "\n", "mean_score", "/=", "self", ".", "nbr_f_samples", "\n", "result", "[", "'kl'", "]", "=", "bnn_result", "[", "'kl'", "]", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.SampleNet._sample_all": [[428, 477], ["range", "torch.zeros.mean", "torch.zeros.mean", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "models.SampleNet._forward_bnn", "log_score.exp", "list", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "p.pow", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.SampleNet._forward_bnn"], ["", "def", "_sample_all", "(", "self", ",", "x", ")", ":", "\n", "        ", "batchN", "=", "x", ".", "shape", "[", "0", "]", "\n", "data_dim", "=", "None", "\n", "bnn_no_grad", "=", "self", ".", "freeze_bnn", "or", "not", "self", ".", "training", "\n", "\n", "# Start with entropy and mean score", "\n", "result", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "self", ".", "nbr_f_samples", ")", ":", "\n", "            ", "bnn_result", "=", "self", ".", "_forward_bnn", "(", "x", ",", "no_grad", "=", "(", "i", "+", "1", "<", "self", ".", "nbr_f_samples", ")", "or", "bnn_no_grad", ")", "\n", "log_score", "=", "bnn_result", "[", "'log_score'", "]", "\n", "if", "not", "data_dim", ":", "\n", "                ", "data_dim", "=", "list", "(", "log_score", ".", "shape", "[", "1", ":", "]", ")", "\n", "scores", "=", "torch", ".", "zeros", "(", "[", "batchN", ",", "self", ".", "nbr_f_samples", "]", "+", "data_dim", ",", "device", "=", "x", ".", "device", ")", "\n", "result", "[", "'entropy'", "]", "=", "entropy", "=", "torch", ".", "zeros", "(", "[", "batchN", "]", "+", "data_dim", ",", "device", "=", "x", ".", "device", ")", "\n", "", "scores", "[", ":", ",", "i", "]", "=", "score", "=", "log_score", ".", "exp", "(", ")", "\n", "entropy", "-=", "score", "*", "log_score", "\n", "\n", "", "entropy", "/=", "self", ".", "nbr_f_samples", "\n", "result", "[", "'mean_score'", "]", "=", "scores", ".", "mean", "(", "dim", "=", "1", ")", "\n", "result", "[", "'kl'", "]", "=", "bnn_result", "[", "'kl'", "]", "\n", "\n", "# Calculate diagonal aleatoric and epistemic variances", "\n", "var_a", "=", "torch", ".", "zeros", "(", "[", "batchN", "]", "+", "data_dim", ",", "device", "=", "x", ".", "device", ")", "\n", "var_e", "=", "torch", ".", "zeros_like", "(", "var_a", ",", "device", "=", "x", ".", "device", ")", "\n", "\n", "for", "si", "in", "range", "(", "self", ".", "nbr_f_samples", ")", ":", "\n", "            ", "p", "=", "scores", "[", ":", ",", "si", "]", "\n", "var_a", "+=", "p", "-", "p", ".", "pow", "(", "2", ")", "\n", "var_e", "+=", "(", "p", "-", "result", "[", "'mean_score'", "]", ")", ".", "pow", "(", "2", ")", "\n", "\n", "# Free memory for later", "\n", "", "del", "scores", "\n", "\n", "# Form the average", "\n", "var_a", "/=", "self", ".", "nbr_f_samples", "\n", "var_e", "/=", "self", ".", "nbr_f_samples", "\n", "\n", "result", "[", "'var_aleatoric'", "]", "=", "var_a", "\n", "result", "[", "'var_epistemic'", "]", "=", "var_e", "\n", "result", "[", "'var'", "]", "=", "var_a", "+", "var_e", "\n", "\n", "if", "self", ".", "metrics", ":", "\n", "            ", "result", "[", "'snr'", "]", "=", "result", "[", "'mean_score'", "]", "/", "(", "result", "[", "'var'", "]", "+", "1e-10", ")", "\n", "result", "[", "'dispersion'", "]", "=", "result", "[", "'var'", "]", "/", "(", "result", "[", "'mean_score'", "]", "+", "1e-10", ")", "\n", "result", "[", "'coef_var'", "]", "=", "torch", ".", "sqrt", "(", "result", "[", "'var'", "]", "+", "1e-10", ")", "/", "(", "result", "[", "'mean_score'", "]", "+", "1e-10", ")", "\n", "result", "[", "'rel_entropy'", "]", "=", "result", "[", "'entropy'", "]", "/", "(", "result", "[", "'mean_score'", "]", "+", "1e-10", ")", "\n", "result", "[", "'rel_entropy_inv'", "]", "=", "result", "[", "'mean_score'", "]", "/", "(", "result", "[", "'entropy'", "]", "+", "1e-10", ")", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.SampleNet.load_state_dict": [[478, 502], ["state_dict.keys", "k.startswith", "super().load_state_dict", "models.SampleNet.bnn.load_state_dict", "TypeError", "TypeError", "state_dict.items", "state_dict.items"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.SampleNet.load_state_dict", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.models.SampleNet.load_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ",", "transfer", "=", "False", ")", ":", "\n", "# Implement custom loader to make it possible to load a BNN checkpoint", "\n", "        ", "is_sample_net", "=", "False", "\n", "for", "k", "in", "state_dict", ".", "keys", "(", ")", ":", "\n", "            ", "if", "k", ".", "startswith", "(", "'bnn'", ")", ":", "\n", "                ", "is_sample_net", "=", "True", "\n", "break", "\n", "\n", "# Filter out the classification layers if transfer.", "\n", "", "", "if", "transfer", ":", "\n", "            ", "state_dict", "=", "{", "k", ":", "v", "for", "(", "k", ",", "v", ")", "in", "state_dict", ".", "items", "(", ")", "if", "'classify'", "not", "in", "k", "}", "\n", "state_dict", "=", "{", "k", ":", "v", "for", "(", "k", ",", "v", ")", "in", "state_dict", ".", "items", "(", ")", "if", "'sample_net'", "not", "in", "k", "}", "\n", "\n", "", "if", "is_sample_net", ":", "\n", "            ", "incompatible", "=", "super", "(", ")", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "incompatible", "=", "self", ".", "bnn", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "\n", "", "if", "incompatible", ".", "unexpected_keys", ":", "\n", "            ", "raise", "TypeError", "(", "'Keys did not match, found unexpected keys: {}'", ".", "format", "(", "incompatible", "[", "'unexpected_keys'", "]", ")", ")", "\n", "\n", "", "for", "k", "in", "incompatible", ".", "missing_keys", ":", "\n", "            ", "if", "'sample_net'", "not", "in", "k", ":", "\n", "                ", "raise", "TypeError", "(", "'Keys did not match, found missing keys: {}'", ".", "format", "(", "incompatible", "[", "'missing_keys'", "]", ")", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.layers.LogNormalizedSoftPlus.__init__": [[26, 29], ["torch.Softplus.__init__"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.Cauchy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.layers.LogNormalizedSoftPlus.forward": [[30, 34], ["super().forward", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "super().forward.sum"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.layers.BReduceToProb.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "super", "(", ")", ".", "forward", "(", "x", ")", "\n", "x_n", "=", "torch", ".", "log", "(", "x", ")", "-", "torch", ".", "log", "(", "x", ".", "sum", "(", "dim", "=", "self", ".", "dim", ",", "keepdims", "=", "True", ")", ")", "\n", "return", "x_n", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.layers.BNLLLoss.__init__": [[36, 47], ["torch.NLLLoss.__init__", "float", "hasattr", "beta.lower", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.Cauchy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "beta", ",", "nbr_batches", ",", "nbr_weights", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "nbr_weights", "=", "float", "(", "nbr_weights", ")", "\n", "\n", "if", "not", "hasattr", "(", "beta", ",", "'strip'", ")", ":", "\n", "            ", "self", ".", "beta_f", "=", "lambda", "b_idx", ":", "beta", "\n", "", "elif", "beta", ".", "lower", "(", ")", "==", "'blundell'", ":", "\n", "            ", "M", "=", "nbr_batches", "\n", "self", ".", "beta_f", "=", "lambda", "b_idx", ":", "(", "2", "**", "(", "M", "-", "b_idx", ")", ")", "/", "(", "2", "**", "M", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'{} not supported'", ".", "format", "(", "beta", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.layers.BNLLLoss.forward": [[48, 51], ["torch.nll_loss", "torch.nll_loss", "torch.nll_loss", "layers.BNLLLoss.beta_f"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "scores", ",", "kl", ",", "target", ",", "batch_idx", ")", ":", "\n", "        ", "class_loss", "=", "F", ".", "nll_loss", "(", "scores", ",", "target", ",", "weight", "=", "self", ".", "weight", ",", "ignore_index", "=", "self", ".", "ignore_index", ",", "reduction", "=", "self", ".", "reduction", ")", "\n", "return", "class_loss", "+", "self", ".", "beta_f", "(", "batch_idx", ")", "*", "kl", "/", "self", ".", "nbr_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.layers.BSequential.__init__": [[54, 59], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.Cauchy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "modules", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "modules", ")", "\n", "self", ".", "bayesian", "=", "True", "\n", "self", ".", "fixed", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.layers.BSequential.forward": [[60, 76], ["getattr", "layer", "layer", "layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "fixed", ":", "\n", "            ", "for", "layer", "in", "self", ".", "layers", ":", "\n", "                ", "x", "=", "layer", "(", "x", ")", "\n", "", "return", "x", "\n", "\n", "", "kl", "=", "0", "\n", "\n", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "if", "getattr", "(", "layer", ",", "'bayesian'", ",", "False", ")", ":", "\n", "                ", "x", ",", "kl_", "=", "layer", "(", "x", ")", "\n", "kl", "+=", "kl_", "\n", "", "else", ":", "\n", "                ", "x", "=", "layer", "(", "x", ")", "\n", "\n", "", "", "return", "x", ",", "kl", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.layers.BMaxPool.__init__": [[78, 84], ["torch.Module.__init__", "getattr", "getattr."], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.Cauchy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "kernel_size", ",", "dim", "=", "3", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bayesian", "=", "True", "\n", "self", ".", "fixed", "=", "False", "\n", "mpool_mod", "=", "getattr", "(", "nn", ",", "'MaxPool{}d'", ".", "format", "(", "dim", ")", ")", "\n", "self", ".", "mpool", "=", "mpool_mod", "(", "kernel_size", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.layers.BMaxPool.forward": [[85, 88], ["layers.BMaxPool.mpool"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "mpool", "(", "x", ")", "\n", "return", "y", "if", "self", ".", "fixed", "else", "(", "y", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.layers.BConv.__init__": [[90, 127], ["torch.Module.__init__", "getattr", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "layers.BConv.register_buffer", "layers.BConv.reset_parameters", "ValueError", "ValueError", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "layers.BConv.register_buffer", "layers.BConv.register_parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.Cauchy.__init__", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.layers.BConv.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "prior", ",", "var_init", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "False", ",", "dim", "=", "3", ",", "transposed", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "in_channels", "%", "groups", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'in_channels must be divisible by groups'", ")", "\n", "", "if", "out_channels", "%", "groups", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'out_channels must be divisible by groups'", ")", "\n", "", "self", ".", "prior", "=", "prior", "\n", "self", ".", "var_init", "=", "var_init", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "bayesian", "=", "True", "\n", "self", ".", "fixed", "=", "False", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "transposed", "=", "transposed", "\n", "self", ".", "conv", "=", "getattr", "(", "F", ",", "'conv{}d'", ".", "format", "(", "dim", ")", ")", "\n", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "mu_bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ")", ")", "\n", "self", ".", "sigma_bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ")", ")", "\n", "self", ".", "register_buffer", "(", "'eps_bias'", ",", "torch", ".", "Tensor", "(", "out_channels", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'mu_bias'", ",", "None", ")", "\n", "\n", "", "if", "self", ".", "transposed", ":", "\n", "            ", "tensor_dim", "=", "[", "in_channels", ",", "out_channels", "//", "groups", "]", "+", "[", "kernel_size", "]", "*", "self", ".", "dim", "\n", "", "else", ":", "\n", "            ", "tensor_dim", "=", "[", "out_channels", ",", "in_channels", "//", "groups", "]", "+", "[", "kernel_size", "]", "*", "self", ".", "dim", "\n", "", "self", ".", "mu_weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "*", "tensor_dim", ")", ")", "\n", "self", ".", "sigma_weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "*", "tensor_dim", ")", ")", "\n", "self", ".", "register_buffer", "(", "'eps_weight'", ",", "torch", ".", "Tensor", "(", "*", "tensor_dim", ")", ")", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.layers.BConv.reset_parameters": [[128, 137], ["layers.BConv.mu_weight.data.uniform_", "layers.BConv.sigma_weight.data.fill_", "math.sqrt", "math.log", "layers.BConv.mu_bias.data.uniform_", "layers.BConv.sigma_bias.data.fill_", "math.log"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "n", "=", "self", ".", "in_channels", "\n", "n", "*=", "self", ".", "kernel_size", "**", "self", ".", "dim", "\n", "stdv", "=", "1.0", "/", "math", ".", "sqrt", "(", "n", ")", "\n", "self", ".", "mu_weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "self", ".", "sigma_weight", ".", "data", ".", "fill_", "(", "math", ".", "log", "(", "self", ".", "var_init", ")", ")", "\n", "if", "self", ".", "mu_bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "mu_bias", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "self", ".", "sigma_bias", ".", "data", ".", "fill_", "(", "math", ".", "log", "(", "self", ".", "var_init", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.layers.BConv._sample_w": [[138, 143], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "layers.BConv.prior.kl_div", "layers.BConv.eps_weight.normal_"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.Dummy.kl_div"], ["", "", "def", "_sample_w", "(", "self", ",", "calc_kl", "=", "True", ")", ":", "\n", "        ", "sig_weight", "=", "torch", ".", "exp", "(", "self", ".", "sigma_weight", ")", "\n", "weight", "=", "self", ".", "mu_weight", "+", "sig_weight", "*", "self", ".", "eps_weight", ".", "normal_", "(", ")", "\n", "kl", "=", "self", ".", "prior", ".", "kl_div", "(", "weight", ",", "self", ".", "mu_weight", ",", "sig_weight", ")", "if", "calc_kl", "else", "0", "\n", "return", "sig_weight", ",", "weight", ",", "kl", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.layers.BConv._sample_bias": [[144, 154], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "layers.BConv.prior.kl_div", "layers.BConv.eps_bias.normal_"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.Dummy.kl_div"], ["", "def", "_sample_bias", "(", "self", ",", "calc_kl", "=", "True", ")", ":", "\n", "        ", "if", "self", ".", "mu_bias", "is", "None", ":", "\n", "            ", "bias", "=", "None", "\n", "kl", "=", "0", "\n", "", "else", ":", "\n", "            ", "sig_bias", "=", "torch", ".", "exp", "(", "self", ".", "sigma_bias", ")", "\n", "bias", "=", "self", ".", "mu_bias", "+", "sig_bias", "*", "self", ".", "eps_bias", ".", "normal_", "(", ")", "\n", "kl", "=", "self", ".", "prior", ".", "kl_div", "(", "bias", ",", "self", ".", "mu_bias", ",", "sig_bias", ")", "if", "calc_kl", "else", "0", "\n", "\n", "", "return", "bias", ",", "kl", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.layers.BConv.sample_weights": [[155, 158], ["layers.BConv._sample_w"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.layers.BConv._sample_w"], ["", "def", "sample_weights", "(", "self", ")", ":", "\n", "        ", "sig_weight", ",", "weight", ",", "kl", "=", "self", ".", "_sample_w", "(", "calc_kl", "=", "False", ")", "\n", "return", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.layers.BConv.forward": [[159, 169], ["layers.BConv._sample_w", "layers.BConv._sample_bias", "layers.BConv.conv", "layers.BConv.conv"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.layers.BConv._sample_w", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.layers.BConv._sample_bias"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# Special case, used for tracing the graph", "\n", "        ", "if", "self", ".", "fixed", ":", "\n", "            ", "return", "self", ".", "conv", "(", "input", ",", "self", ".", "mu_weight", ",", "self", ".", "mu_bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "\n", "", "sig_weight", ",", "weight", ",", "kl", "=", "self", ".", "_sample_w", "(", ")", "\n", "bias", ",", "bias_kl", "=", "self", ".", "_sample_bias", "(", ")", "\n", "\n", "out", "=", "self", ".", "conv", "(", "input", ",", "weight", ",", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "return", "out", ",", "kl", "+", "bias_kl", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.layers.BConvTranspose.__init__": [[171, 175], ["layers.BConv.__init__", "getattr"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.Cauchy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "output_padding", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "transposed", "=", "True", ",", "**", "kwargs", ")", "\n", "self", ".", "output_padding", "=", "output_padding", "\n", "self", ".", "conv", "=", "getattr", "(", "F", ",", "'conv_transpose{}d'", ".", "format", "(", "self", ".", "dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.layers.BConvTranspose.forward": [[176, 188], ["torch.modules.utils._single", "torch.modules.utils._single", "torch.modules.utils._single", "layers.BConvTranspose._sample_w", "layers.BConvTranspose._sample_bias", "layers.BConvTranspose.conv", "layers.BConvTranspose.conv"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.layers.BConv._sample_w", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.layers.BConv._sample_bias"], ["", "def", "forward", "(", "self", ",", "x", ",", "output_size", "=", "None", ")", ":", "\n", "        ", "assert", "output_size", "is", "None", ",", "'output padding function not implemented'", "\n", "output_padding", "=", "nn", ".", "modules", ".", "utils", ".", "_single", "(", "self", ".", "output_padding", ")", "\n", "\n", "if", "self", ".", "fixed", ":", "\n", "            ", "return", "self", ".", "conv", "(", "x", ",", "self", ".", "mu_weight", ",", "self", ".", "mu_bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "output_padding", ",", "self", ".", "groups", ",", "self", ".", "dilation", ")", "\n", "\n", "", "sig_weight", ",", "weight", ",", "kl", "=", "self", ".", "_sample_w", "(", ")", "\n", "bias", ",", "bias_kl", "=", "self", ".", "_sample_bias", "(", ")", "\n", "\n", "out", "=", "self", ".", "conv", "(", "x", ",", "weight", ",", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "output_padding", ",", "self", ".", "groups", ",", "self", ".", "dilation", ")", "\n", "return", "out", ",", "kl", "+", "bias_kl", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.layers.BConvBlock.__init__": [[190, 200], ["torch.Module.__init__", "getattr", "layers.get_activation", "layers.BSequential", "layers.BConv", "get_activation.", "getattr."], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.Cauchy.__init__", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.layers.get_activation"], ["    ", "def", "__init__", "(", "self", ",", "prior", ",", "var_init", ",", "in_depth", ",", "out_depth", ",", "kernel_size", ",", "padding", "=", "0", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "batch_norm", "=", "True", ",", "dim", "=", "3", ",", "activation", "=", "'softplus'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "bn", "=", "getattr", "(", "nn", ",", "'BatchNorm{}d'", ".", "format", "(", "dim", ")", ")", "\n", "act_fn", "=", "get_activation", "(", "activation", ")", "\n", "self", ".", "bayesian", "=", "True", "\n", "blocks", "=", "[", "BConv", "(", "prior", ",", "var_init", ",", "in_depth", ",", "out_depth", ",", "kernel_size", ",", "padding", "=", "padding", ",", "stride", "=", "stride", ",", "dilation", "=", "dilation", ",", "dim", "=", "dim", ")", "]", "\n", "blocks", "+=", "[", "act_fn", "(", ")", "]", "\n", "if", "batch_norm", ":", "\n", "            ", "blocks", "+=", "[", "bn", "(", "out_depth", ")", "]", "\n", "", "self", ".", "block", "=", "BSequential", "(", "*", "blocks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.layers.BConvBlock.forward": [[201, 203], ["layers.BConvBlock.block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "block", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.layers.BIdentity.__init__": [[205, 209], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.Cauchy.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bayesian", "=", "True", "\n", "self", ".", "fixed", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.layers.BIdentity.forward": [[210, 212], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "if", "self", ".", "fixed", "else", "(", "x", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.layers.BSkipAddBlock.__init__": [[214, 239], ["torch.Module.__init__", "len", "getattr", "layers.get_activation", "layers.BConvBlock", "range", "layers.BSequential", "layers.BConv", "layers.BConv", "layers.BIdentity", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "zip", "layers.BConvBlock", "get_activation.", "getattr."], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.Cauchy.__init__", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.layers.get_activation"], ["    ", "def", "__init__", "(", "self", ",", "prior", ",", "var_init", ",", "in_depth", ",", "out_depths", ",", "kernel_sizes", ",", "dilations", ",", "reduce_skip", "=", "False", ",", "batch_norm", "=", "True", ",", "dim", "=", "3", ",", "activation", "=", "'softplus'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bayesian", "=", "True", "\n", "self", ".", "fixed", "=", "False", "\n", "nbr_layers", "=", "len", "(", "out_depths", ")", "\n", "bn", "=", "getattr", "(", "nn", ",", "'BatchNorm{}d'", ".", "format", "(", "dim", ")", ")", "\n", "act_fn", "=", "get_activation", "(", "activation", ")", "\n", "assert", "nbr_layers", ">", "1", "\n", "\n", "#Select paddings to keep output size equal to input size.", "\n", "paddings", "=", "[", "int", "(", "k_size", "/", "2", ")", "*", "dilation", "for", "k_size", ",", "dilation", "in", "zip", "(", "kernel_sizes", ",", "dilations", ")", "]", "\n", "\n", "self", ".", "first_pass", "=", "BConvBlock", "(", "prior", ",", "var_init", ",", "in_depth", ",", "out_depths", "[", "0", "]", ",", "kernel_sizes", "[", "0", "]", ",", "padding", "=", "paddings", "[", "0", "]", ",", "dilation", "=", "dilations", "[", "0", "]", ",", "batch_norm", "=", "batch_norm", ",", "dim", "=", "dim", ",", "activation", "=", "activation", ")", "\n", "\n", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "nbr_layers", "-", "1", ")", ":", "\n", "            ", "layers", "+=", "[", "BConvBlock", "(", "prior", ",", "var_init", ",", "out_depths", "[", "i", "-", "1", "]", ",", "out_depths", "[", "i", "]", ",", "kernel_sizes", "[", "i", "]", ",", "padding", "=", "paddings", "[", "i", "]", ",", "dilation", "=", "dilations", "[", "i", "]", ",", "batch_norm", "=", "batch_norm", ",", "dim", "=", "dim", ",", "activation", "=", "activation", ")", "]", "\n", "", "layers", "+=", "[", "BConv", "(", "prior", ",", "var_init", ",", "out_depths", "[", "-", "2", "]", ",", "out_depths", "[", "-", "1", "]", ",", "kernel_sizes", "[", "-", "1", "]", ",", "padding", "=", "paddings", "[", "-", "1", "]", ",", "dilation", "=", "dilations", "[", "-", "1", "]", ",", "dim", "=", "dim", ")", "]", "\n", "self", ".", "second_pass", "=", "BSequential", "(", "*", "layers", ")", "\n", "\n", "self", ".", "skip_connection", "=", "BConv", "(", "prior", ",", "var_init", ",", "out_depths", "[", "0", "]", ",", "out_depths", "[", "-", "1", "]", ",", "1", ",", "dim", "=", "dim", ")", "if", "reduce_skip", "else", "BIdentity", "(", ")", "\n", "if", "batch_norm", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "Sequential", "(", "act_fn", "(", ")", ",", "bn", "(", "out_depths", "[", "-", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "activation", "=", "act_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.layers.BSkipAddBlock.forward": [[240, 242], ["layers.BSkipAddBlock.fixed_forward", "layers.BSkipAddBlock.sampled_forward"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.layers.BSkipAddBlock.fixed_forward", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.layers.BSkipAddBlock.sampled_forward"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "fixed_forward", "(", "x", ")", "if", "self", ".", "fixed", "else", "self", ".", "sampled_forward", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.layers.BSkipAddBlock.sampled_forward": [[243, 250], ["layers.BSkipAddBlock.first_pass", "layers.BSkipAddBlock.second_pass", "layers.BSkipAddBlock.skip_connection", "layers.BSkipAddBlock.activation"], "methods", ["None"], ["", "def", "sampled_forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y1", ",", "kl1", "=", "self", ".", "first_pass", "(", "x", ")", "\n", "y2", ",", "kl2", "=", "self", ".", "second_pass", "(", "y1", ")", "\n", "y3", ",", "kl3", "=", "self", ".", "skip_connection", "(", "y1", ")", "\n", "y", "=", "y2", "+", "y3", "\n", "kl", "=", "kl1", "+", "kl2", "+", "kl3", "\n", "return", "self", ".", "activation", "(", "y", ")", ",", "kl", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.layers.BSkipAddBlock.fixed_forward": [[251, 257], ["layers.BSkipAddBlock.first_pass", "layers.BSkipAddBlock.second_pass", "layers.BSkipAddBlock.skip_connection", "layers.BSkipAddBlock.activation"], "methods", ["None"], ["", "def", "fixed_forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y1", "=", "self", ".", "first_pass", "(", "x", ")", "\n", "y2", "=", "self", ".", "second_pass", "(", "y1", ")", "\n", "y3", "=", "self", ".", "skip_connection", "(", "y1", ")", "\n", "y", "=", "y2", "+", "y3", "\n", "return", "self", ".", "activation", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.layers.BReduceToProb.__init__": [[259, 271], ["torch.Module.__init__", "len", "layers.get_final_activation", "layers.BSequential", "layers.BConvBlock", "layers.BConvBlock", "layers.BConv", "get_final_activation.", "range"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.Cauchy.__init__", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.layers.get_final_activation"], ["    ", "def", "__init__", "(", "self", ",", "prior", ",", "var_init", ",", "in_depth", ",", "out_depths", ",", "batch_norm", "=", "True", ",", "dim", "=", "3", ",", "activation", "=", "'softplus'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bayesian", "=", "True", "\n", "self", ".", "fixed", "=", "False", "\n", "nbr_layers", "=", "len", "(", "out_depths", ")", "\n", "final_act_fn", "=", "get_final_activation", "(", "activation", ")", "\n", "assert", "nbr_layers", ">", "1", "\n", "layers", "=", "[", "BConvBlock", "(", "prior", ",", "var_init", ",", "in_depth", ",", "out_depths", "[", "0", "]", ",", "1", ",", "batch_norm", "=", "batch_norm", ",", "dim", "=", "dim", ",", "activation", "=", "activation", ")", "]", "\n", "layers", "+=", "[", "BConvBlock", "(", "prior", ",", "var_init", ",", "out_depths", "[", "i", "-", "1", "]", ",", "out_depths", "[", "i", "]", ",", "1", ",", "batch_norm", "=", "batch_norm", ",", "dim", "=", "dim", ",", "activation", "=", "activation", ")", "for", "i", "in", "range", "(", "1", ",", "nbr_layers", "-", "1", ")", "]", "\n", "layers", "+=", "[", "BConv", "(", "prior", ",", "var_init", ",", "out_depths", "[", "-", "2", "]", ",", "out_depths", "[", "-", "1", "]", ",", "1", ",", "dim", "=", "dim", ")", "]", "\n", "layers", "+=", "[", "final_act_fn", "(", "dim", "=", "1", ")", "]", "\n", "self", ".", "layers", "=", "BSequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.layers.BReduceToProb.forward": [[272, 274], ["layers.BReduceToProb.layers"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "layers", "(", "input", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.layers.get_activation": [[8, 16], ["name.lower().split", "NameError", "name.lower"], "function", ["None"], ["def", "get_activation", "(", "name", ")", ":", "\n", "    ", "name", "=", "name", ".", "lower", "(", ")", ".", "split", "(", "'-'", ")", "[", "0", "]", "\n", "if", "name", "==", "'relu'", ":", "\n", "        ", "return", "nn", ".", "ReLU", "\n", "", "elif", "name", "==", "'softplus'", ":", "\n", "        ", "return", "nn", ".", "Softplus", "\n", "", "else", ":", "\n", "        ", "raise", "NameError", "(", "'No activation named {}'", ".", "format", "(", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.layers.get_final_activation": [[17, 23], ["name.lower().split", "name.lower"], "function", ["None"], ["", "", "def", "get_final_activation", "(", "name", ")", ":", "\n", "    ", "name", "=", "name", ".", "lower", "(", ")", ".", "split", "(", "'-'", ")", "[", "1", "]", "\n", "if", "name", "==", "'softmax'", ":", "\n", "        ", "return", "nn", ".", "LogSoftmax", "\n", "", "elif", "name", "==", "'softplus'", ":", "\n", "        ", "return", "LogNormalizedSoftPlus", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.Prior.__init_subclass__": [[15, 18], ["torch.Module.__init_subclass__", "cls.__name__.lower"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.Prior.__init_subclass__"], ["def", "__init_subclass__", "(", "cls", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init_subclass__", "(", "**", "kwargs", ")", "\n", "cls", ".", "subclasses", "[", "cls", ".", "__name__", ".", "lower", "(", ")", "]", "=", "cls", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.Prior.create": [[19, 25], ["ValueError"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "create", "(", "cls", ",", "prior_type", ",", "params", ")", ":", "\n", "        ", "if", "prior_type", "not", "in", "cls", ".", "subclasses", ":", "\n", "            ", "raise", "ValueError", "(", "'Bad prior type {}'", ".", "format", "(", "prior_type", ")", ")", "\n", "\n", "", "return", "cls", ".", "subclasses", "[", "prior_type", "]", "(", "**", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.Prior.create_from_cfg": [[26, 33], ["[].lower", "cls.create", "prior.Dummy", "cfg[].keys", "set"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.Prior.create", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.preprocessing.utils.InvalidHousesMemory.set"], ["", "@", "classmethod", "\n", "def", "create_from_cfg", "(", "cls", ",", "cfg", ")", ":", "\n", "        ", "if", "'prior'", "not", "in", "cfg", ":", "\n", "            ", "return", "Dummy", "(", ")", "\n", "", "class_name", "=", "cfg", "[", "'prior'", "]", "[", "'name'", "]", ".", "lower", "(", ")", "\n", "params", "=", "{", "p", ":", "cfg", "[", "'prior'", "]", "[", "p", "]", "for", "p", "in", "cfg", "[", "'prior'", "]", ".", "keys", "(", ")", "-", "set", "(", "[", "'name'", "]", ")", "}", "\n", "return", "cls", ".", "create", "(", "class_name", ",", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.Gaussian.__init__": [[35, 38], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.Cauchy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "sigma", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sigma", "=", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.Gaussian.kl_div": [[40, 43], ["kl.sum", "math.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["None"], ["", "def", "kl_div", "(", "self", ",", "w", ",", "g_mu", ",", "g_sigma", ")", ":", "\n", "        ", "kl", "=", "math", ".", "log", "(", "self", ".", "sigma", ")", "-", "torch", ".", "log", "(", "g_sigma", ")", "+", "(", "g_sigma", "**", "2", "+", "g_mu", "**", "2", ")", "/", "(", "eps", "+", "2", "*", "self", ".", "sigma", "**", "2", ")", "-", "0.5", "\n", "return", "kl", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.GaussianMixture.__init__": [[54, 57], ["torch.Module.__init__", "torch.log().sum", "torch.log().sum", "torch.log().sum", "torch.log().sum", "torch.log", "torch.log", "torch.log", "torch.log", "prior.gauss_single_p", "prior.gauss_single_p"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.Cauchy.__init__", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.gauss_single_p", "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.gauss_single_p"], ["    ", "def", "__init__", "(", "self", ",", "sigma0", "=", "1", ",", "sigma1", "=", "10", ",", "alpha", "=", "0.5", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "log_prob", "=", "lambda", "x", ":", "torch", ".", "log", "(", "alpha", "*", "gauss_single_p", "(", "x", ",", "sigma0", ")", "+", "(", "1.", "-", "alpha", ")", "*", "gauss_single_p", "(", "x", ",", "sigma1", ")", ")", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.GaussianMixture.kl_div": [[59, 63], ["prior.gauss_multi_logp", "prior.GaussianMixture.GaussianMixture.log_prob"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.gauss_multi_logp"], ["", "def", "kl_div", "(", "self", ",", "w", ",", "g_mu", ",", "g_sigma", ")", ":", "\n", "        ", "posterior", "=", "gauss_multi_logp", "(", "w", ",", "g_mu", ",", "g_sigma", ")", "\n", "prior", "=", "self", ".", "log_prob", "(", "w", ")", "\n", "return", "posterior", "-", "prior", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.Cauchy.__init__": [[65, 68], ["torch.Module.__init__", "torch.log().sum", "torch.log().sum", "torch.log().sum", "torch.log().sum", "math.log", "x.numel", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.Cauchy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gamma", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "log_prob", "=", "lambda", "x", ":", "-", "x", ".", "numel", "(", ")", "*", "math", ".", "log", "(", "math", ".", "pi", "*", "gamma", ")", "-", "torch", ".", "log", "(", "1", "+", "(", "x", "/", "gamma", ")", "**", "2", ")", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.Cauchy.kl_div": [[70, 74], ["prior.gauss_multi_logp", "prior.Cauchy.Cauchy.log_prob"], "methods", ["home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.gauss_multi_logp"], ["", "def", "kl_div", "(", "self", ",", "w", ",", "g_mu", ",", "g_sigma", ")", ":", "\n", "        ", "posterior", "=", "gauss_multi_logp", "(", "w", ",", "g_mu", ",", "g_sigma", ")", "\n", "prior", "=", "self", ".", "log_prob", "(", "w", ")", "\n", "return", "posterior", "-", "prior", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.Dummy.kl_div": [[77, 80], ["NotImplementedError"], "methods", ["None"], ["    ", "def", "kl_div", "(", "self", ",", "w", ",", "g_mu", ",", "g_sigma", ")", ":", "\n", "        ", "if", "self", ".", "train", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Prior must be set for training'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.gauss_single_logp": [[44, 46], ["torch.sum", "torch.sum", "x.numel", "math.log"], "function", ["None"], ["", "", "def", "gauss_single_logp", "(", "x", ",", "sigma", ")", ":", "\n", "    ", "return", "-", "0.5", "*", "(", "x", ".", "numel", "(", ")", "*", "math", ".", "log", "(", "2", "*", "math", ".", "pi", "*", "sigma", "**", "2", ")", "+", "torch", ".", "sum", "(", "(", "x", "/", "(", "eps", "+", "sigma", ")", ")", "**", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.gauss_single_p": [[47, 49], ["torch.exp", "torch.exp", "math.sqrt"], "function", ["None"], ["", "def", "gauss_single_p", "(", "x", ",", "sigma", ")", ":", "\n", "    ", "return", "torch", ".", "exp", "(", "-", ".5", "*", "(", "x", "/", "(", "eps", "+", "sigma", ")", ")", "**", "2", ")", "/", "math", ".", "sqrt", "(", "2", "*", "math", ".", "pi", "*", "sigma", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DavidGillsjo_bssc-net.bayesian.prior.gauss_multi_logp": [[50, 52], ["torch.sum", "torch.sum", "torch.log", "torch.log"], "function", ["None"], ["", "def", "gauss_multi_logp", "(", "x", ",", "mu", ",", "sigma", ")", ":", "\n", "    ", "return", "-", "0.5", "*", "torch", ".", "sum", "(", "torch", ".", "log", "(", "2", "*", "math", ".", "pi", "*", "sigma", "**", "2", ")", "+", "(", "(", "x", "-", "mu", ")", "/", "(", "eps", "+", "sigma", ")", ")", "**", "2", ")", "\n", "\n"]]}