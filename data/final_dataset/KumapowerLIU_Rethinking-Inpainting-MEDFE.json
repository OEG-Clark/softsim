{"home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.util.se_module.SELayer.__init__": [[6, 14], ["torch.nn.Module.__init__", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel", ",", "reduction", "=", "16", ")", ":", "\n", "        ", "super", "(", "SELayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "channel", ",", "channel", "//", "reduction", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "channel", "//", "reduction", ",", "channel", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.util.se_module.SELayer.forward": [[16, 21], ["x.size", "se_module.SELayer.avg_pool().view", "se_module.SELayer.fc", "se_module.SELayer.expand_as", "se_module.SELayer.avg_pool"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "b", ",", "c", ",", "_", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "y", "=", "self", ".", "avg_pool", "(", "x", ")", ".", "view", "(", "b", ",", "c", ",", "1", ",", "1", ")", "\n", "y", "=", "self", ".", "fc", "(", "y", ")", "\n", "return", "x", "*", "y", ".", "expand_as", "(", "x", ")", "\n", "# b, c, _, _ = x.size()", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.util.util.tensor2im": [[16, 22], ["image_tensor[].cpu().float().numpy", "np.tile.astype", "numpy.tile", "image_tensor[].cpu().float", "numpy.transpose", "image_tensor[].cpu"], "function", ["None"], ["def", "tensor2im", "(", "image_tensor", ",", "imtype", "=", "np", ".", "uint8", ")", ":", "\n", "    ", "image_numpy", "=", "image_tensor", "[", "0", "]", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "numpy", "(", ")", "\n", "if", "image_numpy", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "        ", "image_numpy", "=", "np", ".", "tile", "(", "image_numpy", ",", "(", "3", ",", "1", ",", "1", ")", ")", "\n", "", "image_numpy", "=", "(", "np", ".", "transpose", "(", "image_numpy", ",", "(", "1", ",", "2", ",", "0", ")", ")", "+", "1", ")", "/", "2.0", "*", "255.0", "\n", "return", "image_numpy", ".", "astype", "(", "imtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.util.util.diagnose_network": [[24, 35], ["net.parameters", "print", "print", "torch.mean", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs"], "function", ["None"], ["", "def", "diagnose_network", "(", "net", ",", "name", "=", "'network'", ")", ":", "\n", "    ", "mean", "=", "0.0", "\n", "count", "=", "0", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "if", "param", ".", "grad", "is", "not", "None", ":", "\n", "            ", "mean", "+=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "param", ".", "grad", ".", "data", ")", ")", "\n", "count", "+=", "1", "\n", "", "", "if", "count", ">", "0", ":", "\n", "        ", "mean", "=", "mean", "/", "count", "\n", "", "print", "(", "name", ")", "\n", "print", "(", "mean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.util.util.binary_mask": [[36, 43], ["torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "in_mask.dim", "in_mask.size"], "function", ["None"], ["", "def", "binary_mask", "(", "in_mask", ",", "threshold", ")", ":", "\n", "    ", "assert", "in_mask", ".", "dim", "(", ")", "==", "2", ",", "\"mask must be 2 dimensions\"", "\n", "\n", "output", "=", "torch", ".", "ByteTensor", "(", "in_mask", ".", "size", "(", ")", ")", "\n", "output", "=", "(", "output", ">", "threshold", ")", ".", "float", "(", ")", ".", "mul_", "(", "1", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.util.util.gussin": [[44, 75], ["range", "numpy.array", "np.array.sum().sum", "range", "numpy.array", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "range", "q.append", "range", "outk.append", "np.array.sum", "range", "np.array.append", "numpy.abs", "numpy.abs", "row.append", "math.exp"], "function", ["None"], ["", "def", "gussin", "(", "v", ")", ":", "\n", "    ", "outk", "=", "[", "]", "\n", "v", "=", "v", "\n", "for", "i", "in", "range", "(", "32", ")", ":", "\n", "        ", "for", "k", "in", "range", "(", "32", ")", ":", "\n", "\n", "            ", "out", "=", "[", "]", "\n", "for", "x", "in", "range", "(", "32", ")", ":", "\n", "                ", "row", "=", "[", "]", "\n", "for", "y", "in", "range", "(", "32", ")", ":", "\n", "                    ", "cord_x", "=", "i", "\n", "cord_y", "=", "k", "\n", "dis_x", "=", "np", ".", "abs", "(", "x", "-", "cord_x", ")", "\n", "dis_y", "=", "np", ".", "abs", "(", "y", "-", "cord_y", ")", "\n", "dis_add", "=", "-", "(", "dis_x", "*", "dis_x", "+", "dis_y", "*", "dis_y", ")", "\n", "dis_add", "=", "dis_add", "/", "(", "2", "*", "v", "*", "v", ")", "\n", "dis_add", "=", "math", ".", "exp", "(", "dis_add", ")", "/", "(", "2", "*", "math", ".", "pi", "*", "v", "*", "v", ")", "\n", "\n", "row", ".", "append", "(", "dis_add", ")", "\n", "", "out", ".", "append", "(", "row", ")", "\n", "\n", "", "outk", ".", "append", "(", "out", ")", "\n", "\n", "", "", "out", "=", "np", ".", "array", "(", "outk", ")", "\n", "f", "=", "out", ".", "sum", "(", "-", "1", ")", ".", "sum", "(", "-", "1", ")", "\n", "q", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1024", ")", ":", "\n", "        ", "g", "=", "out", "[", "i", "]", "/", "f", "[", "i", "]", "\n", "q", ".", "append", "(", "g", ")", "\n", "", "out", "=", "np", ".", "array", "(", "q", ")", "\n", "return", "torch", ".", "from_numpy", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.util.util.cal_feat_mask": [[76, 94], ["torch.autograd.Variable.float", "torch.autograd.Variable", "range", "torch.Sequential", "lnet.cuda.", "torch.autograd.Variable.dim", "torch.autograd.Variable.size", "torch.Conv2d", "nn.Conv2d.weight.data.fill_", "convs.append", "lnet.cuda.cuda"], "function", ["None"], ["", "def", "cal_feat_mask", "(", "inMask", ",", "conv_layers", ",", "threshold", ")", ":", "\n", "    ", "assert", "inMask", ".", "dim", "(", ")", "==", "4", ",", "\"mask must be 4 dimensions\"", "\n", "assert", "inMask", ".", "size", "(", "0", ")", "==", "1", ",", "\"the first dimension must be 1 for mask\"", "\n", "inMask", "=", "inMask", ".", "float", "(", ")", "\n", "convs", "=", "[", "]", "\n", "inMask", "=", "Variable", "(", "inMask", ",", "requires_grad", "=", "False", ")", "\n", "for", "id_net", "in", "range", "(", "conv_layers", ")", ":", "\n", "        ", "conv", "=", "nn", ".", "Conv2d", "(", "1", ",", "1", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", "\n", "conv", ".", "weight", ".", "data", ".", "fill_", "(", "1", "/", "16", ")", "\n", "convs", ".", "append", "(", "conv", ")", "\n", "", "lnet", "=", "nn", ".", "Sequential", "(", "*", "convs", ")", "\n", "if", "inMask", ".", "is_cuda", ":", "\n", "\n", "        ", "lnet", "=", "lnet", ".", "cuda", "(", ")", "\n", "", "output", "=", "lnet", "(", "inMask", ")", "\n", "output", "=", "(", "output", ">", "threshold", ")", ".", "float", "(", ")", ".", "mul_", "(", "1", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.util.util.cal_mask_given_mask_thred": [[95, 163], ["img.dim", "int", "int", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "range", "torch.zeros().long.narrow", "torch.zeros().long.narrow", "torch.LongTensor().zero_", "torch.LongTensor().zero_", "torch.LongTensor().zero_", "range", "torch.LongTensor().zero_.narrow", "img.dim", "mask.dim", "img.size", "img.size", "img.size", "math.floor", "math.floor", "int", "int", "torch.sum", "torch.sum", "torch.sum", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "math.floor", "math.floor", "torch.sum", "torch.sum", "torch.sum", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "function", ["None"], ["", "def", "cal_mask_given_mask_thred", "(", "img", ",", "mask", ",", "patch_size", ",", "stride", ",", "mask_thred", ")", ":", "\n", "    ", "assert", "img", ".", "dim", "(", ")", "==", "3", ",", "'img has to be 3 dimenison!'", "\n", "assert", "mask", ".", "dim", "(", ")", "==", "2", ",", "'mask has to be 2 dimenison!'", "\n", "dim", "=", "img", ".", "dim", "(", ")", "\n", "#math.floor \u662f\u5411\u4e0b\u53d6\u6574", "\n", "_", ",", "H", ",", "W", "=", "img", ".", "size", "(", "dim", "-", "3", ")", ",", "img", ".", "size", "(", "dim", "-", "2", ")", ",", "img", ".", "size", "(", "dim", "-", "1", ")", "\n", "nH", "=", "int", "(", "math", ".", "floor", "(", "(", "H", "-", "patch_size", ")", "/", "stride", "+", "1", ")", ")", "\n", "nW", "=", "int", "(", "math", ".", "floor", "(", "(", "W", "-", "patch_size", ")", "/", "stride", "+", "1", ")", ")", "\n", "N", "=", "nH", "*", "nW", "\n", "\n", "flag", "=", "torch", ".", "zeros", "(", "N", ")", ".", "long", "(", ")", "\n", "offsets_tmp_vec", "=", "torch", ".", "zeros", "(", "N", ")", ".", "long", "(", ")", "\n", "#\u8fd4\u56de\u7684\u662f\u4e00\u4e2alist\u7c7b\u578b\u7684\u6570\u636e", "\n", "\n", "nonmask_point_idx_all", "=", "torch", ".", "zeros", "(", "N", ")", ".", "long", "(", ")", "\n", "\n", "tmp_non_mask_idx", "=", "0", "\n", "\n", "\n", "mask_point_idx_all", "=", "torch", ".", "zeros", "(", "N", ")", ".", "long", "(", ")", "\n", "\n", "tmp_mask_idx", "=", "0", "\n", "#\u6240\u6709\u7684\u50cf\u7d20\u70b9\u90fd\u6d4f\u89c8\u4e00\u904d", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "h", "=", "int", "(", "math", ".", "floor", "(", "i", "/", "nW", ")", ")", "\n", "w", "=", "int", "(", "math", ".", "floor", "(", "i", "%", "nW", ")", ")", "\n", "# print(h, w)", "\n", "#\u622a\u53d6\u4e00\u4e2a\u4e2a1\u00d71\u7684\u5c0f\u65b9\u7247", "\n", "mask_tmp", "=", "mask", "[", "h", "*", "stride", ":", "h", "*", "stride", "+", "patch_size", ",", "\n", "w", "*", "stride", ":", "w", "*", "stride", "+", "patch_size", "]", "\n", "\n", "\n", "if", "torch", ".", "sum", "(", "mask_tmp", ")", "<", "mask_thred", ":", "\n", "            ", "nonmask_point_idx_all", "[", "tmp_non_mask_idx", "]", "=", "i", "\n", "tmp_non_mask_idx", "+=", "1", "\n", "", "else", ":", "\n", "            ", "mask_point_idx_all", "[", "tmp_mask_idx", "]", "=", "i", "\n", "tmp_mask_idx", "+=", "1", "\n", "flag", "[", "i", "]", "=", "1", "\n", "offsets_tmp_vec", "[", "i", "]", "=", "-", "1", "\n", "# print(flag)  #checked", "\n", "# print(offsets_tmp_vec) # checked", "\n", "\n", "", "", "non_mask_num", "=", "tmp_non_mask_idx", "\n", "mask_num", "=", "tmp_mask_idx", "\n", "\n", "nonmask_point_idx", "=", "nonmask_point_idx_all", ".", "narrow", "(", "0", ",", "0", ",", "non_mask_num", ")", "\n", "mask_point_idx", "=", "mask_point_idx_all", ".", "narrow", "(", "0", ",", "0", ",", "mask_num", ")", "\n", "\n", "# get flatten_offsets", "\n", "flatten_offsets_all", "=", "torch", ".", "LongTensor", "(", "N", ")", ".", "zero_", "(", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "offset_value", "=", "torch", ".", "sum", "(", "offsets_tmp_vec", "[", "0", ":", "i", "+", "1", "]", ")", "\n", "if", "flag", "[", "i", "]", "==", "1", ":", "\n", "            ", "offset_value", "=", "offset_value", "+", "1", "\n", "# print(i+offset_value)", "\n", "", "flatten_offsets_all", "[", "i", "+", "offset_value", "]", "=", "-", "offset_value", "\n", "\n", "", "flatten_offsets", "=", "flatten_offsets_all", ".", "narrow", "(", "0", ",", "0", ",", "non_mask_num", ")", "\n", "\n", "# print('flatten_offsets')", "\n", "# print(flatten_offsets)   # checked", "\n", "\n", "\n", "# print('nonmask_point_idx')", "\n", "# print(nonmask_point_idx)  #checked", "\n", "\n", "return", "flag", ",", "nonmask_point_idx", ",", "flatten_offsets", ",", "mask_point_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.util.util.cal_sps_for_Advanced_Indexing": [[167, 176], ["torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.cat", "torch.cat", "torch.cat", "range", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "lst.extend", "numpy.array", "torch.arange", "torch.arange", "torch.arange"], "function", ["None"], ["", "def", "cal_sps_for_Advanced_Indexing", "(", "h", ",", "w", ")", ":", "\n", "    ", "sp_y", "=", "torch", ".", "arange", "(", "0", ",", "w", ")", ".", "long", "(", ")", "\n", "sp_y", "=", "torch", ".", "cat", "(", "[", "sp_y", "]", "*", "h", ")", "\n", "\n", "lst", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "h", ")", ":", "\n", "        ", "lst", ".", "extend", "(", "[", "i", "]", "*", "w", ")", "\n", "", "sp_x", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "lst", ")", ")", "\n", "return", "sp_x", ",", "sp_y", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.util.util.save_image": [[178, 181], ["PIL.Image.fromarray", "Image.fromarray.save"], "function", ["home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.base_model.BaseModel.save"], ["", "def", "save_image", "(", "image_numpy", ",", "image_path", ")", ":", "\n", "    ", "image_pil", "=", "Image", ".", "fromarray", "(", "image_numpy", ")", "\n", "image_pil", ".", "save", "(", "image_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.util.util.info": [[182, 191], ["print", "dir", "isinstance", "getattr", "s.split", "method.ljust", "processFunc", "str", "getattr"], "function", ["None"], ["", "def", "info", "(", "object", ",", "spacing", "=", "10", ",", "collapse", "=", "1", ")", ":", "\n", "    ", "\"\"\"Print methods and doc strings.\n    Takes module, class, list, dictionary, or string.\"\"\"", "\n", "methodList", "=", "[", "e", "for", "e", "in", "dir", "(", "object", ")", "if", "isinstance", "(", "getattr", "(", "object", ",", "e", ")", ",", "collections", ".", "Callable", ")", "]", "\n", "processFunc", "=", "collapse", "and", "(", "lambda", "s", ":", "\" \"", ".", "join", "(", "s", ".", "split", "(", ")", ")", ")", "or", "(", "lambda", "s", ":", "s", ")", "\n", "print", "(", "\"\\n\"", ".", "join", "(", "[", "\"%s %s\"", "%", "\n", "(", "method", ".", "ljust", "(", "spacing", ")", ",", "\n", "processFunc", "(", "str", "(", "getattr", "(", "object", ",", "method", ")", ".", "__doc__", ")", ")", ")", "\n", "for", "method", "in", "methodList", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.util.util.varname": [[192, 197], ["inspect.getframeinfo", "re.search", "re.search.group", "inspect.currentframe"], "function", ["None"], ["", "def", "varname", "(", "p", ")", ":", "\n", "    ", "for", "line", "in", "inspect", ".", "getframeinfo", "(", "inspect", ".", "currentframe", "(", ")", ".", "f_back", ")", "[", "3", "]", ":", "\n", "        ", "m", "=", "re", ".", "search", "(", "r'\\bvarname\\s*\\(\\s*([A-Za-z_][A-Za-z0-9_]*)\\s*\\)'", ",", "line", ")", "\n", "if", "m", ":", "\n", "            ", "return", "m", ".", "group", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.util.util.print_numpy": [[198, 206], ["x.flatten.astype", "print", "x.flatten.flatten", "print", "numpy.mean", "numpy.min", "numpy.max", "numpy.median", "numpy.std"], "function", ["None"], ["", "", "", "def", "print_numpy", "(", "x", ",", "val", "=", "True", ",", "shp", "=", "False", ")", ":", "\n", "    ", "x", "=", "x", ".", "astype", "(", "np", ".", "float64", ")", "\n", "if", "shp", ":", "\n", "        ", "print", "(", "'shape,'", ",", "x", ".", "shape", ")", "\n", "", "if", "val", ":", "\n", "        ", "x", "=", "x", ".", "flatten", "(", ")", "\n", "print", "(", "'mean = %3.3f, min = %3.3f, max = %3.3f, median = %3.3f, std=%3.3f'", "%", "(", "\n", "np", ".", "mean", "(", "x", ")", ",", "np", ".", "min", "(", "x", ")", ",", "np", ".", "max", "(", "x", ")", ",", "np", ".", "median", "(", "x", ")", ",", "np", ".", "std", "(", "x", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.util.util.mkdirs": [[208, 214], ["isinstance", "util.mkdir", "isinstance", "util.mkdir"], "function", ["home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.util.util.mkdir", "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.util.util.mkdir"], ["", "", "def", "mkdirs", "(", "paths", ")", ":", "\n", "    ", "if", "isinstance", "(", "paths", ",", "list", ")", "and", "not", "isinstance", "(", "paths", ",", "str", ")", ":", "\n", "        ", "for", "path", "in", "paths", ":", "\n", "            ", "mkdir", "(", "path", ")", "\n", "", "", "else", ":", "\n", "        ", "mkdir", "(", "paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.util.util.mkdir": [[216, 219], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "", "def", "mkdir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.util.Selfpatch.Selfpatch.buildAutoencoder": [[6, 19], ["target_img.size", "Selfpatch.Selfpatch._extract_patches", "Selfpatch.Selfpatch._extract_patches", "Selfpatch.Selfpatch._extract_patches", "target_img.dim"], "methods", ["home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.util.Selfpatch.Selfpatch._extract_patches", "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.util.Selfpatch.Selfpatch._extract_patches", "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.util.Selfpatch.Selfpatch._extract_patches"], ["    ", "def", "buildAutoencoder", "(", "self", ",", "target_img", ",", "target_img_2", ",", "target_img_3", ",", "patch_size", "=", "1", ",", "stride", "=", "1", ")", ":", "\n", "        ", "nDim", "=", "3", "\n", "assert", "target_img", ".", "dim", "(", ")", "==", "nDim", ",", "'target image must be of dimension 3.'", "\n", "C", "=", "target_img", ".", "size", "(", "0", ")", "\n", "\n", "self", ".", "Tensor", "=", "torch", ".", "cuda", ".", "FloatTensor", "if", "torch", ".", "cuda", ".", "is_available", "else", "torch", ".", "Tensor", "\n", "\n", "patches_features", "=", "self", ".", "_extract_patches", "(", "target_img", ",", "patch_size", ",", "stride", ")", "\n", "patches_features_f", "=", "self", ".", "_extract_patches", "(", "target_img_3", ",", "patch_size", ",", "stride", ")", "\n", "\n", "patches_on", "=", "self", ".", "_extract_patches", "(", "target_img_2", ",", "1", ",", "stride", ")", "\n", "\n", "return", "patches_features_f", ",", "patches_features", ",", "patches_on", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.util.Selfpatch.Selfpatch.build": [[20, 30], ["target_img.size", "Selfpatch.Selfpatch._extract_patches", "target_img.dim"], "methods", ["home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.util.Selfpatch.Selfpatch._extract_patches"], ["", "def", "build", "(", "self", ",", "target_img", ",", "patch_size", "=", "5", ",", "stride", "=", "1", ")", ":", "\n", "        ", "nDim", "=", "3", "\n", "assert", "target_img", ".", "dim", "(", ")", "==", "nDim", ",", "'target image must be of dimension 3.'", "\n", "C", "=", "target_img", ".", "size", "(", "0", ")", "\n", "\n", "self", ".", "Tensor", "=", "torch", ".", "cuda", ".", "FloatTensor", "if", "torch", ".", "cuda", ".", "is_available", "else", "torch", ".", "Tensor", "\n", "\n", "patches_features", "=", "self", ".", "_extract_patches", "(", "target_img", ",", "patch_size", ",", "stride", ")", "\n", "\n", "return", "patches_features", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.util.Selfpatch.Selfpatch._build": [[31, 53], ["target_patches.clone", "range", "torch.Conv2d", "torch.Conv2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "enc_patches[].norm"], "methods", ["None"], ["", "def", "_build", "(", "self", ",", "patch_size", ",", "stride", ",", "C", ",", "target_patches", ",", "npatches", ",", "normalize", ",", "interpolate", ",", "type", ")", ":", "\n", "# for each patch, divide by its L2 norm.", "\n", "        ", "if", "type", "==", "1", ":", "\n", "            ", "enc_patches", "=", "target_patches", ".", "clone", "(", ")", "\n", "for", "i", "in", "range", "(", "npatches", ")", ":", "\n", "                ", "enc_patches", "[", "i", "]", "=", "enc_patches", "[", "i", "]", "*", "(", "1", "/", "(", "enc_patches", "[", "i", "]", ".", "norm", "(", "2", ")", "+", "1e-8", ")", ")", "\n", "\n", "", "conv_enc", "=", "nn", ".", "Conv2d", "(", "npatches", ",", "npatches", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ",", "groups", "=", "npatches", ")", "\n", "conv_enc", ".", "weight", ".", "data", "=", "enc_patches", "\n", "return", "conv_enc", "\n", "\n", "# normalize is not needed, it doesn't change the result!", "\n", "if", "normalize", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "", "if", "interpolate", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "", "else", ":", "\n", "\n", "            ", "conv_dec", "=", "nn", ".", "ConvTranspose2d", "(", "npatches", ",", "C", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "conv_dec", ".", "weight", ".", "data", "=", "target_patches", "\n", "return", "conv_dec", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.util.Selfpatch.Selfpatch._extract_patches": [[54, 64], ["img.unfold().unfold", "input_windows.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "img.dim", "input_windows.permute().contiguous().view.permute().contiguous().view.size", "input_windows.permute().contiguous().view.permute().contiguous().view.size", "input_windows.permute().contiguous().view.permute().contiguous().view.size", "input_windows.permute().contiguous().view.permute().contiguous().view.size", "input_windows.permute().contiguous().view.permute().contiguous().view.size", "img.unfold", "input_windows.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "input_windows.permute().contiguous().view.permute().contiguous().view.permute"], "methods", ["None"], ["", "", "def", "_extract_patches", "(", "self", ",", "img", ",", "patch_size", ",", "stride", ")", ":", "\n", "        ", "n_dim", "=", "3", "\n", "assert", "img", ".", "dim", "(", ")", "==", "n_dim", ",", "'image must be of dimension 3.'", "\n", "kH", ",", "kW", "=", "patch_size", ",", "patch_size", "\n", "dH", ",", "dW", "=", "stride", ",", "stride", "\n", "input_windows", "=", "img", ".", "unfold", "(", "1", ",", "kH", ",", "dH", ")", ".", "unfold", "(", "2", ",", "kW", ",", "dW", ")", "\n", "i_1", ",", "i_2", ",", "i_3", ",", "i_4", ",", "i_5", "=", "input_windows", ".", "size", "(", "0", ")", ",", "input_windows", ".", "size", "(", "1", ")", ",", "input_windows", ".", "size", "(", "2", ")", ",", "input_windows", ".", "size", "(", "3", ")", ",", "input_windows", ".", "size", "(", "4", ")", "\n", "input_windows", "=", "input_windows", ".", "permute", "(", "1", ",", "2", ",", "0", ",", "3", ",", "4", ")", ".", "contiguous", "(", ")", ".", "view", "(", "i_2", "*", "i_3", ",", "i_1", ",", "i_4", ",", "i_5", ")", "\n", "patches_all", "=", "input_windows", "\n", "return", "patches_all", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.models.create_model": [[2, 6], ["MEDFE.MEDFE", "print", "MEDFE.MEDFE.name"], "function", ["home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.base_model.BaseModel.name"], ["def", "create_model", "(", "opt", ")", ":", "\n", "    ", "model", "=", "MEDFE", "(", "opt", ")", "\n", "print", "(", "\"model [%s] was created\"", "%", "(", "model", ".", "name", "(", ")", ")", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.Decoder.UnetSkipConnectionDBlock.__init__": [[5, 26], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "norm_layer", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Sequential", "torch.Sequential", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inner_nc", ",", "outer_nc", ",", "outermost", "=", "False", ",", "innermost", "=", "False", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", "use_dropout", "=", "False", ")", ":", "\n", "        ", "super", "(", "UnetSkipConnectionDBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "uprelu", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "upnorm", "=", "norm_layer", "(", "outer_nc", ",", "affine", "=", "True", ")", "\n", "upconv", "=", "nn", ".", "ConvTranspose2d", "(", "inner_nc", ",", "outer_nc", ",", "\n", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ")", "\n", "up", "=", "[", "uprelu", ",", "upconv", ",", "upnorm", "]", "\n", "\n", "if", "outermost", ":", "\n", "            ", "up", "=", "[", "uprelu", ",", "upconv", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "model", "=", "up", "\n", "", "elif", "innermost", ":", "\n", "            ", "up", "=", "[", "uprelu", ",", "upconv", ",", "upnorm", "]", "\n", "model", "=", "up", "\n", "", "else", ":", "\n", "            ", "up", "=", "[", "uprelu", ",", "upconv", ",", "upnorm", "]", "\n", "model", "=", "up", "\n", "\n", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.Decoder.UnetSkipConnectionDBlock.forward": [[27, 29], ["Decoder.UnetSkipConnectionDBlock.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.Decoder.Decoder.__init__": [[32, 51], ["torch.Module.__init__", "Decoder.UnetSkipConnectionDBlock", "Decoder.UnetSkipConnectionDBlock", "Decoder.UnetSkipConnectionDBlock", "Decoder.UnetSkipConnectionDBlock", "Decoder.UnetSkipConnectionDBlock", "Decoder.UnetSkipConnectionDBlock"], "methods", ["home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "64", ",", "\n", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# construct unet structure", "\n", "Decoder_1", "=", "UnetSkipConnectionDBlock", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ",", "\n", "innermost", "=", "True", ")", "\n", "Decoder_2", "=", "UnetSkipConnectionDBlock", "(", "ngf", "*", "16", ",", "ngf", "*", "8", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ")", "\n", "Decoder_3", "=", "UnetSkipConnectionDBlock", "(", "ngf", "*", "16", ",", "ngf", "*", "4", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ")", "\n", "Decoder_4", "=", "UnetSkipConnectionDBlock", "(", "ngf", "*", "8", ",", "ngf", "*", "2", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ")", "\n", "Decoder_5", "=", "UnetSkipConnectionDBlock", "(", "ngf", "*", "4", ",", "ngf", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ")", "\n", "Decoder_6", "=", "UnetSkipConnectionDBlock", "(", "ngf", "*", "2", ",", "output_nc", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ",", "outermost", "=", "True", ")", "\n", "\n", "self", ".", "Decoder_1", "=", "Decoder_1", "\n", "self", ".", "Decoder_2", "=", "Decoder_2", "\n", "self", ".", "Decoder_3", "=", "Decoder_3", "\n", "self", ".", "Decoder_4", "=", "Decoder_4", "\n", "self", ".", "Decoder_5", "=", "Decoder_5", "\n", "self", ".", "Decoder_6", "=", "Decoder_6", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.Decoder.Decoder.forward": [[52, 62], ["Decoder.Decoder.Decoder_1", "Decoder.Decoder.Decoder_2", "Decoder.Decoder.Decoder_3", "Decoder.Decoder.Decoder_4", "Decoder.Decoder.Decoder_5", "Decoder.Decoder.Decoder_6", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_1", ",", "input_2", ",", "input_3", ",", "input_4", ",", "input_5", ",", "input_6", ")", ":", "\n", "        ", "y_1", "=", "self", ".", "Decoder_1", "(", "input_6", ")", "\n", "y_2", "=", "self", ".", "Decoder_2", "(", "torch", ".", "cat", "(", "[", "y_1", ",", "input_5", "]", ",", "1", ")", ")", "\n", "y_3", "=", "self", ".", "Decoder_3", "(", "torch", ".", "cat", "(", "[", "y_2", ",", "input_4", "]", ",", "1", ")", ")", "\n", "y_4", "=", "self", ".", "Decoder_4", "(", "torch", ".", "cat", "(", "[", "y_3", ",", "input_3", "]", ",", "1", ")", ")", "\n", "y_5", "=", "self", ".", "Decoder_5", "(", "torch", ".", "cat", "(", "[", "y_4", ",", "input_2", "]", ",", "1", ")", ")", "\n", "y_6", "=", "self", ".", "Decoder_6", "(", "torch", ".", "cat", "(", "[", "y_5", ",", "input_1", "]", ",", "1", ")", ")", "\n", "out", "=", "y_6", "\n", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.networks.PCblock.__init__": [[104, 111], ["torch.Module.__init__", "PCconv.PCconv.PCconv", "InnerCos.InnerCos.InnerCos", "stde_list.append", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "stde_list", ")", ":", "\n", "        ", "super", "(", "PCblock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pc_block", "=", "PCconv", "(", ")", "\n", "innerloss", "=", "InnerCos", "(", ")", "\n", "stde_list", ".", "append", "(", "innerloss", ")", "\n", "loss", "=", "[", "innerloss", "]", "\n", "self", ".", "loss", "=", "nn", ".", "Sequential", "(", "*", "loss", ")", "\n", "", "def", "forward", "(", "self", ",", "input", ",", "mask", ")", ":", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.networks.PCblock.forward": [[111, 115], ["networks.PCblock.pc_block", "networks.PCblock.loss"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "mask", ")", ":", "\n", "        ", "out", "=", "self", ".", "pc_block", "(", "input", ",", "mask", ")", "\n", "out", "=", "self", ".", "loss", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.networks.get_norm_layer": [[14, 24], ["functools.partial", "functools.partial", "NotImplementedError"], "function", ["None"], ["def", "get_norm_layer", "(", "norm_type", "=", "'instance'", ")", ":", "\n", "    ", "if", "norm_type", "==", "'batch'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "BatchNorm2d", ",", "affine", "=", "True", ")", "\n", "", "elif", "norm_type", "==", "'instance'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "True", ")", "\n", "", "elif", "norm_type", "==", "'none'", ":", "\n", "        ", "norm_layer", "=", "None", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'normalization layer [%s] is not found'", "%", "norm_type", ")", "\n", "", "return", "norm_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.networks.get_scheduler": [[25, 40], ["torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.ReduceLROnPlateau", "max", "float", "torch.optim.lr_scheduler.CosineAnnealingLR", "NotImplementedError"], "function", ["None"], ["", "def", "get_scheduler", "(", "optimizer", ",", "opt", ")", ":", "\n", "    ", "if", "opt", ".", "lr_policy", "==", "'lambda'", ":", "\n", "        ", "def", "lambda_rule", "(", "epoch", ")", ":", "\n", "            ", "lr_l", "=", "1.0", "-", "max", "(", "0", ",", "epoch", "+", "1", "+", "opt", ".", "epoch_count", "-", "opt", ".", "niter", ")", "/", "float", "(", "opt", ".", "niter_decay", "+", "1", ")", "\n", "return", "lr_l", "\n", "", "scheduler", "=", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "lr_lambda", "=", "lambda_rule", ")", "\n", "", "elif", "opt", ".", "lr_policy", "==", "'step'", ":", "\n", "        ", "scheduler", "=", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "step_size", "=", "opt", ".", "lr_decay_iters", ",", "gamma", "=", "0.1", ")", "\n", "", "elif", "opt", ".", "lr_policy", "==", "'plateau'", ":", "\n", "        ", "scheduler", "=", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "optimizer", ",", "mode", "=", "'min'", ",", "factor", "=", "0.2", ",", "threshold", "=", "0.01", ",", "patience", "=", "5", ")", "\n", "", "elif", "opt", ".", "lr_policy", "==", "'cosine'", ":", "\n", "        ", "scheduler", "=", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optimizer", ",", "T_max", "=", "opt", ".", "niter", ",", "eta_min", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "return", "NotImplementedError", "(", "'learning rate policy [%s] is not implemented'", ",", "opt", ".", "lr_policy", ")", "\n", "", "return", "scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.networks.init_weights": [[42, 64], ["print", "net.apply", "hasattr", "torch.nn.init.normal", "hasattr", "torch.nn.init.constant", "classname.find", "torch.nn.init.normal", "torch.nn.init.constant", "classname.find", "classname.find", "torch.nn.init.xavier_normal", "torch.nn.init.kaiming_normal", "torch.nn.init.orthogonal", "NotImplementedError"], "function", ["None"], ["", "def", "init_weights", "(", "net", ",", "init_type", "=", "'normal'", ",", "gain", "=", "0.02", ")", ":", "\n", "    ", "def", "init_func", "(", "m", ")", ":", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "hasattr", "(", "m", ",", "'weight'", ")", "and", "(", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ")", ":", "\n", "            ", "if", "init_type", "==", "'normal'", ":", "\n", "                ", "init", ".", "normal", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "gain", ")", "\n", "", "elif", "init_type", "==", "'xavier'", ":", "\n", "                ", "init", ".", "xavier_normal", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "", "elif", "init_type", "==", "'kaiming'", ":", "\n", "                ", "init", ".", "kaiming_normal", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "init_type", "==", "'orthogonal'", ":", "\n", "                ", "init", ".", "orthogonal", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'initialization method [%s] is not implemented'", "%", "init_type", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "init", ".", "constant", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "            ", "init", ".", "normal", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "gain", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n", "", "", "print", "(", "'initialize network with %s'", "%", "init_type", ")", "\n", "net", ".", "apply", "(", "init_func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.networks.init_net": [[66, 73], ["networks.init_weights", "len", "torch.cuda.is_available", "torch.cuda.is_available", "torch.nn.DataParallel.to", "torch.nn.DataParallel", "torch.nn.DataParallel"], "function", ["home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.networks.init_weights"], ["", "def", "init_net", "(", "net", ",", "init_type", "=", "'normal'", ",", "init_gain", "=", "0.02", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "net", ".", "to", "(", "gpu_ids", "[", "0", "]", ")", "\n", "net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "net", ",", "gpu_ids", ")", "\n", "", "init_weights", "(", "net", ",", "init_type", ",", "gain", "=", "init_gain", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.networks.define_G": [[75, 85], ["networks.get_norm_layer", "Encoder.Encoder", "Decoder.Decoder", "networks.PCblock", "networks.init_net", "networks.init_net", "networks.init_net"], "function", ["home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.networks.get_norm_layer", "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.networks.init_net", "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.networks.init_net", "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.networks.init_net"], ["", "def", "define_G", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "norm", "=", "'batch'", ",", "use_dropout", "=", "False", ",", "init_type", "=", "'normal'", ",", "gpu_ids", "=", "[", "]", ",", "init_gain", "=", "0.02", ")", ":", "\n", "\n", "    ", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "\n", "stde_list", "=", "[", "]", "\n", "netEN", "=", "Encoder", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ")", "\n", "netDE", "=", "Decoder", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ")", "\n", "PCBlock", "=", "PCblock", "(", "stde_list", ")", "\n", "\n", "return", "init_net", "(", "netEN", ",", "init_type", ",", "init_gain", ",", "gpu_ids", ")", ",", "init_net", "(", "netDE", ",", "init_type", ",", "init_gain", ",", "gpu_ids", ")", ",", "init_net", "(", "PCBlock", ",", "init_type", ",", "init_gain", ",", "gpu_ids", ")", ",", "stde_list", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.networks.define_D": [[87, 93], ["networks.get_norm_layer", "Discriminator.NLayerDiscriminator", "networks.init_net"], "function", ["home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.networks.get_norm_layer", "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.networks.init_net"], ["", "def", "define_D", "(", "input_nc", ",", "ndf", ",", "n_layers_D", "=", "3", ",", "norm", "=", "'batch'", ",", "init_type", "=", "'normal'", ",", "gpu_ids", "=", "[", "]", ",", "init_gain", "=", "0.02", ")", ":", "\n", "    ", "netD", "=", "None", "\n", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "netD", "=", "NLayerDiscriminator", "(", "input_nc", ",", "ndf", ",", "n_layers", "=", "n_layers_D", ",", "norm_layer", "=", "norm_layer", ",", "use_sigmoid", "=", "False", ")", "\n", "\n", "return", "init_net", "(", "netD", ",", "init_type", ",", "init_gain", ",", "gpu_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.networks.print_network": [[95, 101], ["net.parameters", "print", "print", "param.numel"], "function", ["None"], ["", "def", "print_network", "(", "net", ")", ":", "\n", "    ", "num_params", "=", "0", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "print", "(", "net", ")", "\n", "print", "(", "'Total number of parameters: %d'", "%", "num_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.MEDFE.MEDFE.__init__": [[14, 99], ["base_model.BaseModel.__init__", "torch.device", "torch.device", "torch.device", "torch.device", "loss.VGG16", "loss.PerceptualLoss", "loss.StyleLoss", "MEDFE.MEDFE.Tensor", "MEDFE.MEDFE.Tensor", "MEDFE.MEDFE.Tensor", "MEDFE.MEDFE.Tensor", "MEDFE.MEDFE.Tensor", "MEDFE.MEDFE.Tensor", "networks.define_G", "len", "MEDFE.MEDFE.vgg.to", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "networks.define_D", "networks.define_D", "MEDFE.MEDFE.model_names.append", "MEDFE.MEDFE.model_names.append", "loss.GANLoss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "MEDFE.MEDFE.optimizers.append", "MEDFE.MEDFE.optimizers.append", "MEDFE.MEDFE.optimizers.append", "MEDFE.MEDFE.optimizers.append", "MEDFE.MEDFE.optimizers.append", "print", "networks.print_network", "networks.print_network", "networks.print_network", "print", "MEDFE.MEDFE.netEN.parameters", "MEDFE.MEDFE.netDE.parameters", "MEDFE.MEDFE.netMEDFE.parameters", "MEDFE.MEDFE.netD.parameters", "MEDFE.MEDFE.netF.parameters", "MEDFE.MEDFE.schedulers.append", "networks.print_network", "networks.print_network", "print", "MEDFE.MEDFE.load_networks", "MEDFE.MEDFE.load_networks", "MEDFE.MEDFE.load_networks", "MEDFE.MEDFE.load_networks", "MEDFE.MEDFE.load_networks", "networks.get_scheduler"], "methods", ["home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.networks.define_G", "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.networks.define_D", "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.networks.define_D", "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.networks.print_network", "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.networks.print_network", "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.networks.print_network", "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.networks.print_network", "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.networks.print_network", "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.base_model.BaseModel.load_networks", "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.base_model.BaseModel.load_networks", "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.base_model.BaseModel.load_networks", "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.base_model.BaseModel.load_networks", "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.base_model.BaseModel.load_networks", "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.networks.get_scheduler"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "MEDFE", ",", "self", ")", ".", "__init__", "(", "opt", ")", "\n", "self", ".", "isTrain", "=", "opt", ".", "isTrain", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "# define tensors", "\n", "self", ".", "vgg", "=", "VGG16", "(", ")", "\n", "self", ".", "PerceptualLoss", "=", "PerceptualLoss", "(", ")", "\n", "self", ".", "StyleLoss", "=", "StyleLoss", "(", ")", "\n", "self", ".", "input_DE", "=", "self", ".", "Tensor", "(", "opt", ".", "batchSize", ",", "opt", ".", "input_nc", ",", "opt", ".", "fineSize", ",", "opt", ".", "fineSize", ")", "\n", "self", ".", "input_ST", "=", "self", ".", "Tensor", "(", "opt", ".", "batchSize", ",", "opt", ".", "output_nc", ",", "opt", ".", "fineSize", ",", "opt", ".", "fineSize", ")", "\n", "self", ".", "Gt_Local", "=", "self", ".", "Tensor", "(", "opt", ".", "batchSize", ",", "opt", ".", "output_nc", ",", "opt", ".", "fineSize", ",", "opt", ".", "fineSize", ")", "\n", "self", ".", "Gt_DE", "=", "self", ".", "Tensor", "(", "opt", ".", "batchSize", ",", "opt", ".", "output_nc", ",", "opt", ".", "fineSize", ",", "opt", ".", "fineSize", ")", "\n", "self", ".", "Gt_ST", "=", "self", ".", "Tensor", "(", "opt", ".", "batchSize", ",", "opt", ".", "output_nc", ",", "opt", ".", "fineSize", ",", "opt", ".", "fineSize", ")", "\n", "self", ".", "mask_global", "=", "self", ".", "Tensor", "(", "opt", ".", "batchSize", ",", "1", ",", "opt", ".", "fineSize", ",", "opt", ".", "fineSize", ")", "\n", "self", ".", "model_names", "=", "[", "]", "\n", "if", "len", "(", "opt", ".", "gpu_ids", ")", ">", "0", ":", "\n", "            ", "self", ".", "use_gpu", "=", "True", "\n", "self", ".", "vgg", "=", "self", ".", "vgg", ".", "to", "(", "self", ".", "gpu_ids", "[", "0", "]", ")", "\n", "self", ".", "vgg", "=", "torch", ".", "nn", ".", "DataParallel", "(", "self", ".", "vgg", ",", "self", ".", "gpu_ids", ")", "\n", "# load/define networks  EN:Encoder DE:Decoder  MEDFE: Mutual Encoder Decoder with Feature Equalizations", "\n", "", "self", ".", "netEN", ",", "self", ".", "netDE", ",", "self", ".", "netMEDFE", ",", "self", ".", "stde_loss", "=", "networks", ".", "define_G", "(", "opt", ".", "input_nc", ",", "opt", ".", "output_nc", ",", "opt", ".", "ngf", ",", "opt", ".", "norm", ",", "\n", "opt", ".", "use_dropout", ",", "opt", ".", "init_type", ",", "\n", "self", ".", "gpu_ids", ",", "\n", "opt", ".", "init_gain", ")", "\n", "self", ".", "model_names", "=", "[", "'EN'", ",", "'DE'", ",", "'MEDFE'", "]", "\n", "\n", "\n", "if", "self", ".", "isTrain", ":", "\n", "\n", "            ", "self", ".", "netD", "=", "networks", ".", "define_D", "(", "3", ",", "opt", ".", "ndf", ",", "\n", "opt", ".", "n_layers_D", ",", "opt", ".", "norm", ",", "opt", ".", "init_type", ",", "self", ".", "gpu_ids", ",", "opt", ".", "init_gain", ")", "\n", "self", ".", "netF", "=", "networks", ".", "define_D", "(", "3", ",", "opt", ".", "ndf", ",", "\n", "opt", ".", "n_layers_D", ",", "opt", ".", "norm", ",", "opt", ".", "init_type", ",", "self", ".", "gpu_ids", ",", "opt", ".", "init_gain", ")", "\n", "self", ".", "model_names", ".", "append", "(", "'D'", ")", "\n", "self", ".", "model_names", ".", "append", "(", "'F'", ")", "\n", "", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "old_lr", "=", "opt", ".", "lr", "\n", "# define loss functions", "\n", "self", ".", "criterionGAN", "=", "GANLoss", "(", "tensor", "=", "self", ".", "Tensor", ")", "\n", "self", ".", "criterionL1", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "criterionL2", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "# initialize optimizers", "\n", "self", ".", "schedulers", "=", "[", "]", "\n", "self", ".", "optimizers", "=", "[", "]", "\n", "\n", "self", ".", "optimizer_EN", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "netEN", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "self", ".", "optimizer_DE", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "netDE", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "\n", "self", ".", "optimizer_MEDFE", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "netMEDFE", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "\n", "self", ".", "optimizer_D", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "netD", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "self", ".", "optimizer_F", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "netF", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_EN", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_DE", ")", "\n", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_MEDFE", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_D", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_F", ")", "\n", "for", "optimizer", "in", "self", ".", "optimizers", ":", "\n", "                ", "self", ".", "schedulers", ".", "append", "(", "networks", ".", "get_scheduler", "(", "optimizer", ",", "opt", ")", ")", "\n", "\n", "", "print", "(", "'---------- Networks initialized -------------'", ")", "\n", "networks", ".", "print_network", "(", "self", ".", "netEN", ")", "\n", "networks", ".", "print_network", "(", "self", ".", "netDE", ")", "\n", "networks", ".", "print_network", "(", "self", ".", "netMEDFE", ")", "\n", "if", "self", ".", "isTrain", ":", "\n", "                ", "networks", ".", "print_network", "(", "self", ".", "netD", ")", "\n", "networks", ".", "print_network", "(", "self", ".", "netF", ")", "\n", "", "print", "(", "'-----------------------------------------------'", ")", "\n", "#####modified", "\n", "", "if", "self", ".", "isTrain", ":", "\n", "            ", "if", "opt", ".", "continue_train", ":", "\n", "                ", "print", "(", "'Loading pre-trained network!'", ")", "\n", "self", ".", "load_networks", "(", "self", ".", "netEN", ",", "'EN'", ",", "opt", ".", "which_epoch", ")", "\n", "self", ".", "load_networks", "(", "self", ".", "netDE", ",", "'DE'", ",", "opt", ".", "which_epoch", ")", "\n", "self", ".", "load_networks", "(", "self", ".", "netMEDFE", ",", "'MEDFE'", ",", "opt", ".", "which_epoch", ")", "\n", "self", ".", "load_networks", "(", "self", ".", "netD", ",", "'D'", ",", "opt", ".", "which_epoch", ")", "\n", "self", ".", "load_networks", "(", "self", ".", "netF", ",", "'F'", ",", "opt", ".", "which_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.MEDFE.MEDFE.name": [[100, 102], ["None"], "methods", ["None"], ["", "", "", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "modlename", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.MEDFE.MEDFE.mask_process": [[103, 109], ["torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "mask.byte.byte.byte"], "methods", ["None"], ["", "def", "mask_process", "(", "self", ",", "mask", ")", ":", "\n", "        ", "mask", "=", "mask", "[", "0", "]", "[", "0", "]", "\n", "mask", "=", "torch", ".", "unsqueeze", "(", "mask", ",", "0", ")", "\n", "mask", "=", "torch", ".", "unsqueeze", "(", "mask", ",", "1", ")", "\n", "mask", "=", "mask", ".", "byte", "(", ")", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.MEDFE.MEDFE.set_input": [[111, 132], ["input_De.to", "input_St.to", "input_De.to", "MEDFE.MEDFE.mask_process", "input_De.to", "random.randint", "random.randint", "MEDFE.MEDFE.mask_global.expand", "torch.add().float", "torch.add().float", "torch.add().float", "torch.add().float", "MEDFE.MEDFE.stde_loss[].set_target", "MEDFE.MEDFE.input_DE.narrow().masked_fill_", "MEDFE.MEDFE.input_DE.narrow().masked_fill_", "MEDFE.MEDFE.input_DE.narrow().masked_fill_", "mask.to", "MEDFE.MEDFE.mask_global.size", "MEDFE.MEDFE.mask_global.size", "MEDFE.MEDFE.mask_global.size", "MEDFE.MEDFE.mask_global.narrow().bool", "MEDFE.MEDFE.mask_global.narrow().bool", "MEDFE.MEDFE.mask_global.narrow().bool", "torch.add", "torch.add", "torch.add", "torch.add", "MEDFE.MEDFE.input_DE.narrow", "MEDFE.MEDFE.input_DE.narrow", "MEDFE.MEDFE.input_DE.narrow", "torch.neg", "torch.neg", "torch.neg", "torch.neg", "MEDFE.MEDFE.mask_global.narrow", "MEDFE.MEDFE.mask_global.narrow", "MEDFE.MEDFE.mask_global.narrow", "MEDFE.MEDFE.ex_mask.float"], "methods", ["home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.MEDFE.MEDFE.mask_process", "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.InnerCos.InnerCos.set_target"], ["", "def", "set_input", "(", "self", ",", "input_De", ",", "input_St", ",", "mask", ")", ":", "\n", "\n", "        ", "self", ".", "Gt_DE", "=", "input_De", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "Gt_ST", "=", "input_St", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "input_DE", "=", "input_De", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "mask_global", "=", "self", ".", "mask_process", "(", "mask", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "self", ".", "Gt_Local", "=", "input_De", ".", "to", "(", "self", ".", "device", ")", "\n", "# define local area which send to the local discriminator", "\n", "self", ".", "crop_x", "=", "random", ".", "randint", "(", "0", ",", "191", ")", "\n", "self", ".", "crop_y", "=", "random", ".", "randint", "(", "0", ",", "191", ")", "\n", "self", ".", "Gt_Local", "=", "self", ".", "Gt_Local", "[", ":", ",", ":", ",", "self", ".", "crop_x", ":", "self", ".", "crop_x", "+", "64", ",", "self", ".", "crop_y", ":", "self", ".", "crop_y", "+", "64", "]", "\n", "self", ".", "ex_mask", "=", "self", ".", "mask_global", ".", "expand", "(", "self", ".", "mask_global", ".", "size", "(", "0", ")", ",", "3", ",", "self", ".", "mask_global", ".", "size", "(", "2", ")", ",", "\n", "self", ".", "mask_global", ".", "size", "(", "3", ")", ")", "\n", "#  unpositve with original mask", "\n", "self", ".", "inv_ex_mask", "=", "torch", ".", "add", "(", "torch", ".", "neg", "(", "self", ".", "ex_mask", ".", "float", "(", ")", ")", ",", "1", ")", ".", "float", "(", ")", "\n", "# set loss groundtruth for two branch", "\n", "self", ".", "stde_loss", "[", "0", "]", ".", "set_target", "(", "self", ".", "Gt_DE", ",", "self", ".", "Gt_ST", ")", "\n", "# Do not set the mask regions as 0", "\n", "self", ".", "input_DE", ".", "narrow", "(", "1", ",", "0", ",", "1", ")", ".", "masked_fill_", "(", "self", ".", "mask_global", ".", "narrow", "(", "1", ",", "0", ",", "1", ")", ".", "bool", "(", ")", ",", "2", "*", "123.0", "/", "255.0", "-", "1.0", ")", "\n", "self", ".", "input_DE", ".", "narrow", "(", "1", ",", "1", ",", "1", ")", ".", "masked_fill_", "(", "self", ".", "mask_global", ".", "narrow", "(", "1", ",", "0", ",", "1", ")", ".", "bool", "(", ")", ",", "2", "*", "104.0", "/", "255.0", "-", "1.0", ")", "\n", "self", ".", "input_DE", ".", "narrow", "(", "1", ",", "2", ",", "1", ")", ".", "masked_fill_", "(", "self", ".", "mask_global", ".", "narrow", "(", "1", ",", "0", ",", "1", ")", ".", "bool", "(", ")", ",", "2", "*", "117.0", "/", "255.0", "-", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.MEDFE.MEDFE.forward": [[133, 140], ["MEDFE.MEDFE.netEN", "MEDFE.MEDFE.netMEDFE", "MEDFE.MEDFE.netDE", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "\n", "        ", "fake_p_1", ",", "fake_p_2", ",", "fake_p_3", ",", "fake_p_4", ",", "fake_p_5", ",", "fake_p_6", "=", "self", ".", "netEN", "(", "\n", "torch", ".", "cat", "(", "[", "self", ".", "input_DE", ",", "self", ".", "inv_ex_mask", "]", ",", "1", ")", ")", "\n", "De_in", "=", "[", "fake_p_1", ",", "fake_p_2", ",", "fake_p_3", ",", "fake_p_4", ",", "fake_p_5", ",", "fake_p_6", "]", "\n", "x_out", "=", "self", ".", "netMEDFE", "(", "De_in", ",", "self", ".", "mask_global", ")", "\n", "self", ".", "fake_out", "=", "self", ".", "netDE", "(", "x_out", "[", "0", "]", ",", "x_out", "[", "1", "]", ",", "x_out", "[", "2", "]", ",", "x_out", "[", "3", "]", ",", "x_out", "[", "4", "]", ",", "x_out", "[", "5", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.MEDFE.MEDFE.backward_D": [[141, 158], ["MEDFE.MEDFE.netD", "MEDFE.MEDFE.netD", "MEDFE.MEDFE.criterionGAN", "MEDFE.MEDFE.netF", "MEDFE.MEDFE.netF", "MEDFE.MEDFE.criterionGAN", "MEDFE.MEDFE.loss_D.backward", "fake_AB.detach", "fake_local.detach"], "methods", ["home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.InnerCos.InnerCos.backward"], ["", "def", "backward_D", "(", "self", ")", ":", "\n", "        ", "fake_AB", "=", "self", ".", "fake_out", "\n", "real_AB", "=", "self", ".", "Gt_DE", "# GroundTruth", "\n", "real_local", "=", "self", ".", "Gt_Local", "\n", "fake_local", "=", "self", ".", "fake_out", "[", ":", ",", ":", ",", "self", ".", "crop_x", ":", "self", ".", "crop_x", "+", "64", ",", "self", ".", "crop_y", ":", "self", ".", "crop_y", "+", "64", "]", "\n", "# Global Discriminator", "\n", "self", ".", "pred_fake", "=", "self", ".", "netD", "(", "fake_AB", ".", "detach", "(", ")", ")", "\n", "self", ".", "pred_real", "=", "self", ".", "netD", "(", "real_AB", ")", "\n", "self", ".", "loss_D_fake", "=", "self", ".", "criterionGAN", "(", "self", ".", "pred_fake", ",", "self", ".", "pred_real", ",", "True", ")", "\n", "\n", "# Local discriminator", "\n", "self", ".", "pred_fake_F", "=", "self", ".", "netF", "(", "fake_local", ".", "detach", "(", ")", ")", "\n", "self", ".", "pred_real_F", "=", "self", ".", "netF", "(", "real_local", ")", "\n", "self", ".", "loss_F_fake", "=", "self", ".", "criterionGAN", "(", "self", ".", "pred_fake_F", ",", "self", ".", "pred_real_F", ",", "True", ")", "\n", "\n", "self", ".", "loss_D", "=", "self", ".", "loss_D_fake", "+", "self", ".", "loss_F_fake", "\n", "self", ".", "loss_D", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.MEDFE.MEDFE.backward_G": [[159, 188], ["MEDFE.MEDFE.netD", "MEDFE.MEDFE.netD", "MEDFE.MEDFE.netF", "MEDFE.MEDFE.netF", "MEDFE.MEDFE.criterionL1", "MEDFE.MEDFE.PerceptualLoss", "MEDFE.MEDFE.StyleLoss", "MEDFE.MEDFE.loss_G.backward", "MEDFE.MEDFE.criterionGAN", "MEDFE.MEDFE.criterionGAN", "loss.backward"], "methods", ["home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.InnerCos.InnerCos.backward", "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.InnerCos.InnerCos.backward"], ["", "def", "backward_G", "(", "self", ")", ":", "\n", "# First, The generator should fake the discriminator", "\n", "        ", "real_AB", "=", "self", ".", "Gt_DE", "\n", "fake_AB", "=", "self", ".", "fake_out", "\n", "real_local", "=", "self", ".", "Gt_Local", "\n", "fake_local", "=", "self", ".", "fake_out", "[", ":", ",", ":", ",", "self", ".", "crop_x", ":", "self", ".", "crop_x", "+", "64", ",", "self", ".", "crop_y", ":", "self", ".", "crop_y", "+", "64", "]", "\n", "# Global discriminator", "\n", "pred_real", "=", "self", ".", "netD", "(", "real_AB", ")", "\n", "pred_fake", "=", "self", ".", "netD", "(", "fake_AB", ")", "\n", "# Local discriminator", "\n", "pred_real_F", "=", "self", ".", "netF", "(", "real_local", ")", "\n", "pred_fake_f", "=", "self", ".", "netF", "(", "fake_local", ")", "\n", "self", ".", "loss_G_GAN", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "pred_real", ",", "False", ")", "+", "self", ".", "criterionGAN", "(", "pred_fake_f", ",", "pred_real_F", ",", "\n", "False", ")", "\n", "# Second, Reconstruction loss", "\n", "self", ".", "loss_L1", "=", "self", ".", "criterionL1", "(", "self", ".", "fake_out", ",", "self", ".", "Gt_DE", ")", "\n", "self", ".", "Perceptual_loss", "=", "self", ".", "PerceptualLoss", "(", "self", ".", "fake_out", ",", "self", ".", "Gt_DE", ")", "\n", "self", ".", "Style_Loss", "=", "self", ".", "StyleLoss", "(", "self", ".", "fake_out", ",", "self", ".", "Gt_DE", ")", "\n", "\n", "# self.loss_G = self.loss_G_L1 + self.loss_G_GAN *0.2 + self.Perceptual_loss * 0.2 + self.Style_Loss *250", "\n", "self", ".", "loss_G", "=", "self", ".", "loss_L1", "*", "self", ".", "opt", ".", "lambda_L1", "+", "self", ".", "loss_G_GAN", "*", "self", ".", "opt", ".", "lambda_Gan", "+", "self", ".", "Perceptual_loss", "*", "self", ".", "opt", ".", "lambda_P", "+", "self", ".", "Style_Loss", "*", "self", ".", "opt", ".", "lambda_S", "\n", "\n", "self", ".", "stde_loss_value", "=", "0", "\n", "for", "loss", "in", "self", ".", "stde_loss", ":", "\n", "            ", "self", ".", "stde_loss_value", "+=", "loss", ".", "backward", "(", ")", "\n", "self", ".", "stde_loss_value", "+=", "loss", ".", "loss", "\n", "", "self", ".", "loss_G", "+=", "self", ".", "stde_loss_value", "\n", "self", ".", "loss_G", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.MEDFE.MEDFE.optimize_parameters": [[189, 216], ["MEDFE.MEDFE.forward", "MEDFE.MEDFE.set_requires_grad", "MEDFE.MEDFE.set_requires_grad", "MEDFE.MEDFE.set_requires_grad", "MEDFE.MEDFE.set_requires_grad", "MEDFE.MEDFE.set_requires_grad", "MEDFE.MEDFE.optimizer_D.zero_grad", "MEDFE.MEDFE.optimizer_F.zero_grad", "MEDFE.MEDFE.backward_D", "MEDFE.MEDFE.optimizer_D.step", "MEDFE.MEDFE.optimizer_F.step", "MEDFE.MEDFE.set_requires_grad", "MEDFE.MEDFE.set_requires_grad", "MEDFE.MEDFE.set_requires_grad", "MEDFE.MEDFE.set_requires_grad", "MEDFE.MEDFE.set_requires_grad", "MEDFE.MEDFE.optimizer_EN.zero_grad", "MEDFE.MEDFE.optimizer_DE.zero_grad", "MEDFE.MEDFE.optimizer_MEDFE.zero_grad", "MEDFE.MEDFE.backward_G", "MEDFE.MEDFE.optimizer_MEDFE.step", "MEDFE.MEDFE.optimizer_EN.step", "MEDFE.MEDFE.optimizer_DE.step"], "methods", ["home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.InnerCos.InnerCos.forward", "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.base_model.BaseModel.set_requires_grad", "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.base_model.BaseModel.set_requires_grad", "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.base_model.BaseModel.set_requires_grad", "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.base_model.BaseModel.set_requires_grad", "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.base_model.BaseModel.set_requires_grad", "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.MEDFE.MEDFE.backward_D", "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.base_model.BaseModel.set_requires_grad", "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.base_model.BaseModel.set_requires_grad", "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.base_model.BaseModel.set_requires_grad", "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.base_model.BaseModel.set_requires_grad", "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.base_model.BaseModel.set_requires_grad", "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.MEDFE.MEDFE.backward_G"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "forward", "(", ")", "\n", "# Optimize the D and F first", "\n", "self", ".", "set_requires_grad", "(", "self", ".", "netF", ",", "True", ")", "\n", "self", ".", "set_requires_grad", "(", "self", ".", "netD", ",", "True", ")", "\n", "self", ".", "set_requires_grad", "(", "self", ".", "netEN", ",", "False", ")", "\n", "self", ".", "set_requires_grad", "(", "self", ".", "netDE", ",", "False", ")", "\n", "self", ".", "set_requires_grad", "(", "self", ".", "netMEDFE", ",", "False", ")", "\n", "self", ".", "optimizer_D", ".", "zero_grad", "(", ")", "\n", "self", ".", "optimizer_F", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward_D", "(", ")", "\n", "self", ".", "optimizer_D", ".", "step", "(", ")", "\n", "self", ".", "optimizer_F", ".", "step", "(", ")", "\n", "\n", "# Optimize EN, DE, MEDEF", "\n", "self", ".", "set_requires_grad", "(", "self", ".", "netF", ",", "False", ")", "\n", "self", ".", "set_requires_grad", "(", "self", ".", "netD", ",", "False", ")", "\n", "self", ".", "set_requires_grad", "(", "self", ".", "netEN", ",", "True", ")", "\n", "self", ".", "set_requires_grad", "(", "self", ".", "netDE", ",", "True", ")", "\n", "self", ".", "set_requires_grad", "(", "self", ".", "netMEDFE", ",", "True", ")", "\n", "self", ".", "optimizer_EN", ".", "zero_grad", "(", ")", "\n", "self", ".", "optimizer_DE", ".", "zero_grad", "(", ")", "\n", "self", ".", "optimizer_MEDFE", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward_G", "(", ")", "\n", "self", ".", "optimizer_MEDFE", ".", "step", "(", ")", "\n", "self", ".", "optimizer_EN", ".", "step", "(", ")", "\n", "self", ".", "optimizer_DE", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.MEDFE.MEDFE.get_current_errors": [[217, 224], ["collections.OrderedDict"], "methods", ["None"], ["", "def", "get_current_errors", "(", "self", ")", ":", "\n", "# show the current loss", "\n", "        ", "return", "OrderedDict", "(", "[", "(", "'G_GAN'", ",", "self", ".", "loss_G_GAN", ".", "data", ")", ",", "\n", "(", "'G_L1'", ",", "self", ".", "loss_G", ".", "data", ")", ",", "\n", "(", "'G_stde'", ",", "self", ".", "stde_loss_value", ".", "data", ")", ",", "\n", "(", "'D'", ",", "self", ".", "loss_D_fake", ".", "data", ")", ",", "\n", "(", "'F'", ",", "self", ".", "loss_F_fake", ".", "data", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.MEDFE.MEDFE.get_current_visuals": [[227, 232], ["MEDFE.MEDFE.input_DE.data.cpu", "MEDFE.MEDFE.fake_out.data.cpu", "MEDFE.MEDFE.Gt_DE.data.cpu"], "methods", ["None"], ["", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "        ", "input_image", "=", "(", "self", ".", "input_DE", ".", "data", ".", "cpu", "(", ")", "+", "1", ")", "/", "2.0", "\n", "fake_image", "=", "(", "self", ".", "fake_out", ".", "data", ".", "cpu", "(", ")", "+", "1", ")", "/", "2.0", "\n", "real_gt", "=", "(", "self", ".", "Gt_DE", ".", "data", ".", "cpu", "(", ")", "+", "1", ")", "/", "2.0", "\n", "return", "input_image", ",", "fake_image", ",", "real_gt", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.Encoder.ResnetBlock.__init__": [[6, 16], ["torch.Module.__init__", "torch.Sequential", "torch.ReflectionPad2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReflectionPad2d", "torch.Conv2d", "torch.InstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", "ResnetBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReflectionPad2d", "(", "dilation", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "dim", ",", "out_channels", "=", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ",", "dilation", "=", "dilation", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "dim", ",", "track_running_stats", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "ReflectionPad2d", "(", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "dim", ",", "out_channels", "=", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "dim", ",", "track_running_stats", "=", "False", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.Encoder.ResnetBlock.forward": [[18, 21], ["Encoder.ResnetBlock.conv_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "x", "+", "self", ".", "conv_block", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.Encoder.UnetSkipConnectionEBlock.__init__": [[25, 47], ["torch.Module.__init__", "torch.Conv2d", "torch.LeakyReLU", "norm_layer", "torch.Sequential", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "outer_nc", ",", "inner_nc", ",", "outermost", "=", "False", ",", "innermost", "=", "False", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", "use_dropout", "=", "False", ")", ":", "\n", "        ", "super", "(", "UnetSkipConnectionEBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "downconv", "=", "nn", ".", "Conv2d", "(", "outer_nc", ",", "inner_nc", ",", "kernel_size", "=", "4", ",", "\n", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "downrelu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "\n", "downnorm", "=", "norm_layer", "(", "inner_nc", ",", "affine", "=", "True", ")", "\n", "if", "outermost", ":", "\n", "            ", "down", "=", "[", "downconv", "]", "\n", "model", "=", "down", "\n", "", "elif", "innermost", ":", "\n", "            ", "down", "=", "[", "downrelu", ",", "downconv", "]", "\n", "model", "=", "down", "\n", "", "else", ":", "\n", "            ", "down", "=", "[", "downrelu", ",", "downconv", ",", "downnorm", "]", "\n", "if", "use_dropout", ":", "\n", "                ", "model", "=", "down", "+", "[", "nn", ".", "Dropout", "(", "0.5", ")", "]", "\n", "", "else", ":", "\n", "                ", "model", "=", "down", "\n", "", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.Encoder.UnetSkipConnectionEBlock.forward": [[48, 50], ["Encoder.UnetSkipConnectionEBlock.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.Encoder.Encoder.__init__": [[53, 77], ["torch.Module.__init__", "Encoder.UnetSkipConnectionEBlock", "Encoder.UnetSkipConnectionEBlock", "Encoder.UnetSkipConnectionEBlock", "Encoder.UnetSkipConnectionEBlock", "Encoder.UnetSkipConnectionEBlock", "Encoder.UnetSkipConnectionEBlock", "range", "torch.Sequential", "Encoder.ResnetBlock", "blocks.append"], "methods", ["home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "64", ",", "res_num", "=", "4", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# construct unet structure", "\n", "Encoder_1", "=", "UnetSkipConnectionEBlock", "(", "input_nc", ",", "ngf", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ",", "outermost", "=", "True", ")", "\n", "Encoder_2", "=", "UnetSkipConnectionEBlock", "(", "ngf", ",", "ngf", "*", "2", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ")", "\n", "Encoder_3", "=", "UnetSkipConnectionEBlock", "(", "ngf", "*", "2", ",", "ngf", "*", "4", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ")", "\n", "Encoder_4", "=", "UnetSkipConnectionEBlock", "(", "ngf", "*", "4", ",", "ngf", "*", "8", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ")", "\n", "Encoder_5", "=", "UnetSkipConnectionEBlock", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ")", "\n", "Encoder_6", "=", "UnetSkipConnectionEBlock", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ",", "innermost", "=", "True", ")", "\n", "\n", "blocks", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "res_num", ")", ":", "\n", "            ", "block", "=", "ResnetBlock", "(", "ngf", "*", "8", ",", "2", ")", "\n", "blocks", ".", "append", "(", "block", ")", "\n", "\n", "", "self", ".", "middle", "=", "nn", ".", "Sequential", "(", "*", "blocks", ")", "\n", "\n", "self", ".", "Encoder_1", "=", "Encoder_1", "\n", "self", ".", "Encoder_2", "=", "Encoder_2", "\n", "self", ".", "Encoder_3", "=", "Encoder_3", "\n", "self", ".", "Encoder_4", "=", "Encoder_4", "\n", "self", ".", "Encoder_5", "=", "Encoder_5", "\n", "self", ".", "Encoder_6", "=", "Encoder_6", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.Encoder.Encoder.forward": [[78, 88], ["Encoder.Encoder.Encoder_1", "Encoder.Encoder.Encoder_2", "Encoder.Encoder.Encoder_3", "Encoder.Encoder.Encoder_4", "Encoder.Encoder.Encoder_5", "Encoder.Encoder.Encoder_6", "Encoder.Encoder.middle"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "y_1", "=", "self", ".", "Encoder_1", "(", "input", ")", "\n", "y_2", "=", "self", ".", "Encoder_2", "(", "y_1", ")", "\n", "y_3", "=", "self", ".", "Encoder_3", "(", "y_2", ")", "\n", "y_4", "=", "self", ".", "Encoder_4", "(", "y_3", ")", "\n", "y_5", "=", "self", ".", "Encoder_5", "(", "y_4", ")", "\n", "y_6", "=", "self", ".", "Encoder_6", "(", "y_5", ")", "\n", "y_7", "=", "self", ".", "middle", "(", "y_6", ")", "\n", "\n", "return", "y_1", ",", "y_2", ",", "y_3", ",", "y_4", ",", "y_5", ",", "y_7", "\n", "", "", ""]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.loss.VGG16.__init__": [[7, 76], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "loss.VGG16.parameters", "torchvision.vgg16", "loss.VGG16.relu1_1.add_module", "loss.VGG16.relu1_2.add_module", "loss.VGG16.relu2_1.add_module", "loss.VGG16.relu2_2.add_module", "loss.VGG16.relu3_1.add_module", "loss.VGG16.relu3_2.add_module", "loss.VGG16.relu3_3.add_module", "loss.VGG16.max3.add_module", "loss.VGG16.relu4_1.add_module", "loss.VGG16.relu4_2.add_module", "loss.VGG16.relu4_3.add_module", "loss.VGG16.relu5_1.add_module", "loss.VGG16.relu5_2.add_module", "loss.VGG16.relu5_3.add_module", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "VGG16", ",", "self", ")", ".", "__init__", "(", ")", "\n", "features", "=", "models", ".", "vgg16", "(", "pretrained", "=", "True", ")", ".", "features", "\n", "self", ".", "relu1_1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu1_2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "\n", "self", ".", "relu2_1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu2_2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "\n", "self", ".", "relu3_1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu3_2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu3_3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "max3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "\n", "\n", "self", ".", "relu4_1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu4_2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu4_3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "\n", "\n", "self", ".", "relu5_1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu5_2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu5_3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "\n", "for", "x", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "relu1_1", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "2", ",", "4", ")", ":", "\n", "            ", "self", ".", "relu1_2", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "4", ",", "7", ")", ":", "\n", "            ", "self", ".", "relu2_1", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "7", ",", "9", ")", ":", "\n", "            ", "self", ".", "relu2_2", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "9", ",", "12", ")", ":", "\n", "            ", "self", ".", "relu3_1", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "12", ",", "14", ")", ":", "\n", "            ", "self", ".", "relu3_2", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "14", ",", "16", ")", ":", "\n", "            ", "self", ".", "relu3_3", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "16", ",", "17", ")", ":", "\n", "            ", "self", ".", "max3", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "17", ",", "19", ")", ":", "\n", "            ", "self", ".", "relu4_1", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "19", ",", "21", ")", ":", "\n", "            ", "self", ".", "relu4_2", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "21", ",", "23", ")", ":", "\n", "            ", "self", ".", "relu4_3", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "23", ",", "26", ")", ":", "\n", "            ", "self", ".", "relu5_1", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "26", ",", "28", ")", ":", "\n", "            ", "self", ".", "relu5_2", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "28", ",", "30", ")", ":", "\n", "            ", "self", ".", "relu5_3", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "\n", "# don't need the gradients, just want the features", "\n", "", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.loss.VGG16.forward": [[77, 121], ["loss.VGG16.relu1_1", "loss.VGG16.relu1_2", "loss.VGG16.relu2_1", "loss.VGG16.relu2_2", "loss.VGG16.relu3_1", "loss.VGG16.relu3_2", "loss.VGG16.relu3_3", "loss.VGG16.max3", "loss.VGG16.relu4_1", "loss.VGG16.relu4_2", "loss.VGG16.relu4_3", "loss.VGG16.relu5_1", "loss.VGG16.relu5_1", "loss.VGG16.relu5_1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "relu1_1", "=", "self", ".", "relu1_1", "(", "x", ")", "\n", "relu1_2", "=", "self", ".", "relu1_2", "(", "relu1_1", ")", "\n", "\n", "relu2_1", "=", "self", ".", "relu2_1", "(", "relu1_2", ")", "\n", "relu2_2", "=", "self", ".", "relu2_2", "(", "relu2_1", ")", "\n", "\n", "relu3_1", "=", "self", ".", "relu3_1", "(", "relu2_2", ")", "\n", "relu3_2", "=", "self", ".", "relu3_2", "(", "relu3_1", ")", "\n", "relu3_3", "=", "self", ".", "relu3_3", "(", "relu3_2", ")", "\n", "max_3", "=", "self", ".", "max3", "(", "relu3_3", ")", "\n", "\n", "\n", "relu4_1", "=", "self", ".", "relu4_1", "(", "max_3", ")", "\n", "relu4_2", "=", "self", ".", "relu4_2", "(", "relu4_1", ")", "\n", "relu4_3", "=", "self", ".", "relu4_3", "(", "relu4_2", ")", "\n", "\n", "\n", "relu5_1", "=", "self", ".", "relu5_1", "(", "relu4_3", ")", "\n", "relu5_2", "=", "self", ".", "relu5_1", "(", "relu5_1", ")", "\n", "relu5_3", "=", "self", ".", "relu5_1", "(", "relu5_2", ")", "\n", "out", "=", "{", "\n", "'relu1_1'", ":", "relu1_1", ",", "\n", "'relu1_2'", ":", "relu1_2", ",", "\n", "\n", "'relu2_1'", ":", "relu2_1", ",", "\n", "'relu2_2'", ":", "relu2_2", ",", "\n", "\n", "'relu3_1'", ":", "relu3_1", ",", "\n", "'relu3_2'", ":", "relu3_2", ",", "\n", "'relu3_3'", ":", "relu3_3", ",", "\n", "'max_3'", ":", "max_3", ",", "\n", "\n", "\n", "'relu4_1'", ":", "relu4_1", ",", "\n", "'relu4_2'", ":", "relu4_2", ",", "\n", "'relu4_3'", ":", "relu4_3", ",", "\n", "\n", "\n", "'relu5_1'", ":", "relu5_1", ",", "\n", "'relu5_2'", ":", "relu5_2", ",", "\n", "'relu5_3'", ":", "relu5_3", ",", "\n", "}", "\n", "return", "out", "\n", "", "", "class", "StyleLoss", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.loss.StyleLoss.__init__": [[128, 132], ["torch.Module.__init__", "loss.StyleLoss.add_module", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "VGG16().cuda", "loss.VGG16"], "methods", ["home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "StyleLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_module", "(", "'vgg'", ",", "VGG16", "(", ")", ".", "cuda", "(", ")", ")", "\n", "self", ".", "criterion", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.loss.StyleLoss.compute_gram": [[133, 140], ["x.size", "x.view", "x.view.transpose", "x.view.bmm"], "methods", ["None"], ["", "def", "compute_gram", "(", "self", ",", "x", ")", ":", "\n", "        ", "b", ",", "ch", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "f", "=", "x", ".", "view", "(", "b", ",", "ch", ",", "w", "*", "h", ")", "\n", "f_T", "=", "f", ".", "transpose", "(", "1", ",", "2", ")", "\n", "G", "=", "f", ".", "bmm", "(", "f_T", ")", "/", "(", "h", "*", "w", "*", "ch", ")", "\n", "\n", "return", "G", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.loss.StyleLoss.__call__": [[141, 153], ["loss.StyleLoss.criterion", "loss.StyleLoss.criterion", "loss.StyleLoss.criterion", "loss.StyleLoss.criterion", "loss.StyleLoss.vgg", "loss.StyleLoss.vgg", "loss.StyleLoss.compute_gram", "loss.StyleLoss.compute_gram", "loss.StyleLoss.compute_gram", "loss.StyleLoss.compute_gram", "loss.StyleLoss.compute_gram", "loss.StyleLoss.compute_gram", "loss.StyleLoss.compute_gram", "loss.StyleLoss.compute_gram"], "methods", ["home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.loss.StyleLoss.compute_gram", "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.loss.StyleLoss.compute_gram", "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.loss.StyleLoss.compute_gram", "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.loss.StyleLoss.compute_gram", "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.loss.StyleLoss.compute_gram", "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.loss.StyleLoss.compute_gram", "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.loss.StyleLoss.compute_gram", "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.loss.StyleLoss.compute_gram"], ["", "def", "__call__", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "# Compute features", "\n", "        ", "x_vgg", ",", "y_vgg", "=", "self", ".", "vgg", "(", "x", ")", ",", "self", ".", "vgg", "(", "y", ")", "\n", "\n", "# Compute loss", "\n", "style_loss", "=", "0.0", "\n", "style_loss", "+=", "self", ".", "criterion", "(", "self", ".", "compute_gram", "(", "x_vgg", "[", "'relu2_2'", "]", ")", ",", "self", ".", "compute_gram", "(", "y_vgg", "[", "'relu2_2'", "]", ")", ")", "\n", "style_loss", "+=", "self", ".", "criterion", "(", "self", ".", "compute_gram", "(", "x_vgg", "[", "'relu3_3'", "]", ")", ",", "self", ".", "compute_gram", "(", "y_vgg", "[", "'relu3_3'", "]", ")", ")", "\n", "style_loss", "+=", "self", ".", "criterion", "(", "self", ".", "compute_gram", "(", "x_vgg", "[", "'relu4_3'", "]", ")", ",", "self", ".", "compute_gram", "(", "y_vgg", "[", "'relu4_3'", "]", ")", ")", "\n", "style_loss", "+=", "self", ".", "criterion", "(", "self", ".", "compute_gram", "(", "x_vgg", "[", "'relu5_2'", "]", ")", ",", "self", ".", "compute_gram", "(", "y_vgg", "[", "'relu5_2'", "]", ")", ")", "\n", "\n", "return", "style_loss", "\n", "", "", "class", "PerceptualLoss", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.loss.PerceptualLoss.__init__": [[160, 165], ["torch.Module.__init__", "loss.PerceptualLoss.add_module", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "VGG16().cuda", "loss.VGG16"], "methods", ["home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "weights", "=", "[", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", "]", ")", ":", "\n", "        ", "super", "(", "PerceptualLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_module", "(", "'vgg'", ",", "VGG16", "(", ")", ".", "cuda", "(", ")", ")", "\n", "self", ".", "criterion", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "weights", "=", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.loss.PerceptualLoss.__call__": [[166, 179], ["loss.PerceptualLoss.vgg", "loss.PerceptualLoss.vgg", "loss.PerceptualLoss.criterion", "loss.PerceptualLoss.criterion", "loss.PerceptualLoss.criterion", "loss.PerceptualLoss.criterion", "loss.PerceptualLoss.criterion"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "# Compute features", "\n", "        ", "x_vgg", ",", "y_vgg", "=", "self", ".", "vgg", "(", "x", ")", ",", "self", ".", "vgg", "(", "y", ")", "\n", "\n", "content_loss", "=", "0.0", "\n", "content_loss", "+=", "self", ".", "weights", "[", "0", "]", "*", "self", ".", "criterion", "(", "x_vgg", "[", "'relu1_1'", "]", ",", "y_vgg", "[", "'relu1_1'", "]", ")", "\n", "content_loss", "+=", "self", ".", "weights", "[", "1", "]", "*", "self", ".", "criterion", "(", "x_vgg", "[", "'relu2_1'", "]", ",", "y_vgg", "[", "'relu2_1'", "]", ")", "\n", "content_loss", "+=", "self", ".", "weights", "[", "2", "]", "*", "self", ".", "criterion", "(", "x_vgg", "[", "'relu3_1'", "]", ",", "y_vgg", "[", "'relu3_1'", "]", ")", "\n", "content_loss", "+=", "self", ".", "weights", "[", "3", "]", "*", "self", ".", "criterion", "(", "x_vgg", "[", "'relu4_1'", "]", ",", "y_vgg", "[", "'relu4_1'", "]", ")", "\n", "content_loss", "+=", "self", ".", "weights", "[", "4", "]", "*", "self", ".", "criterion", "(", "x_vgg", "[", "'relu5_1'", "]", ",", "y_vgg", "[", "'relu5_1'", "]", ")", "\n", "\n", "\n", "return", "content_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.loss.GANLoss.__init__": [[181, 189], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "target_real_label", "=", "1.0", ",", "target_fake_label", "=", "0.0", ",", "\n", "tensor", "=", "torch", ".", "FloatTensor", ")", ":", "\n", "        ", "super", "(", "GANLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "real_label", "=", "target_real_label", "\n", "self", ".", "fake_label", "=", "target_fake_label", "\n", "self", ".", "real_label_var", "=", "None", "\n", "self", ".", "fake_label_var", "=", "None", "\n", "self", ".", "Tensor", "=", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.loss.GANLoss.get_target_tensor": [[191, 206], ["loss.GANLoss.Tensor().fill_", "loss.GANLoss.Tensor().fill_", "loss.GANLoss.real_label_var.numel", "input.numel", "loss.GANLoss.fake_label_var.numel", "input.numel", "loss.GANLoss.Tensor", "loss.GANLoss.Tensor", "input.size", "input.size"], "methods", ["None"], ["", "def", "get_target_tensor", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "target_tensor", "=", "None", "\n", "if", "target_is_real", ":", "\n", "            ", "create_label", "=", "(", "(", "self", ".", "real_label_var", "is", "None", ")", "or", "\n", "(", "self", ".", "real_label_var", ".", "numel", "(", ")", "!=", "input", ".", "numel", "(", ")", ")", ")", "\n", "if", "create_label", ":", "\n", "                ", "self", ".", "real_label_var", "=", "self", ".", "Tensor", "(", "input", ".", "size", "(", ")", ")", ".", "fill_", "(", "self", ".", "real_label", ")", "\n", "", "target_tensor", "=", "self", ".", "real_label_var", "\n", "", "else", ":", "\n", "            ", "create_label", "=", "(", "(", "self", ".", "fake_label_var", "is", "None", ")", "or", "\n", "(", "self", ".", "fake_label_var", ".", "numel", "(", ")", "!=", "input", ".", "numel", "(", ")", ")", ")", "\n", "if", "create_label", ":", "\n", "                ", "self", ".", "fake_label_var", "=", "self", ".", "Tensor", "(", "input", ".", "size", "(", ")", ")", ".", "fill_", "(", "self", ".", "real_label", ")", "\n", "", "target_tensor", "=", "self", ".", "fake_label_var", "\n", "", "return", "target_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.loss.GANLoss.__call__": [[207, 217], ["loss.GANLoss.get_target_tensor", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.loss.GANLoss.get_target_tensor"], ["", "def", "__call__", "(", "self", ",", "y_pred_fake", ",", "y_pred", ",", "target_is_real", ")", ":", "\n", "        ", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "y_pred_fake", ",", "target_is_real", ")", "\n", "if", "target_is_real", ":", "\n", "            ", "errD", "=", "(", "torch", ".", "mean", "(", "(", "y_pred", "-", "torch", ".", "mean", "(", "y_pred_fake", ")", "-", "target_tensor", ")", "**", "2", ")", "+", "torch", ".", "mean", "(", "\n", "(", "y_pred_fake", "-", "torch", ".", "mean", "(", "y_pred", ")", "+", "target_tensor", ")", "**", "2", ")", ")", "/", "2", "\n", "return", "errD", "\n", "", "else", ":", "\n", "            ", "errG", "=", "(", "torch", ".", "mean", "(", "(", "y_pred", "-", "torch", ".", "mean", "(", "y_pred_fake", ")", "+", "target_tensor", ")", "**", "2", ")", "+", "torch", ".", "mean", "(", "\n", "(", "y_pred_fake", "-", "torch", ".", "mean", "(", "y_pred", ")", "-", "target_tensor", ")", "**", "2", ")", ")", "/", "2", "\n", "return", "errG", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.base_model.BaseModel.__init__": [[6, 14], ["os.path.join", "torch.device", "torch.device"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "gpu_ids", "=", "opt", ".", "gpu_ids", "\n", "self", ".", "isTrain", "=", "opt", ".", "isTrain", "\n", "self", ".", "Tensor", "=", "torch", ".", "cuda", ".", "FloatTensor", "if", "self", ".", "gpu_ids", "else", "torch", ".", "Tensor", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda:{}'", ".", "format", "(", "self", ".", "gpu_ids", "[", "0", "]", ")", ")", "if", "self", ".", "gpu_ids", "else", "torch", ".", "device", "(", "'cpu'", ")", "\n", "self", ".", "save_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ")", "\n", "self", ".", "modlename", "=", "opt", ".", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.base_model.BaseModel.name": [[15, 17], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'BaseModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.base_model.BaseModel.set_input": [[18, 20], ["None"], "methods", ["None"], ["", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "        ", "self", ".", "input", "=", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.base_model.BaseModel.forward": [[21, 23], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.base_model.BaseModel.test": [[24, 26], ["None"], "methods", ["None"], ["", "def", "test", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.base_model.BaseModel.get_image_paths": [[27, 29], ["None"], "methods", ["None"], ["", "def", "get_image_paths", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.base_model.BaseModel.optimize_parameters": [[30, 32], ["None"], "methods", ["None"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.base_model.BaseModel.get_current_visuals": [[33, 35], ["None"], "methods", ["None"], ["", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.base_model.BaseModel.get_current_errors": [[36, 38], ["None"], "methods", ["None"], ["", "def", "get_current_errors", "(", "self", ")", ":", "\n", "        ", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.base_model.BaseModel.save": [[39, 41], ["None"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "label", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.base_model.BaseModel.save_networks": [[45, 58], ["isinstance", "os.path.join().replace", "getattr", "getattr", "torch.cuda.is_available", "torch.save", "getattr.cuda", "torch.save", "os.path.join", "len", "getattr.cpu().state_dict", "getattr.module.cpu().state_dict", "getattr.state_dict", "getattr.cpu", "getattr.module.cpu"], "methods", ["home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.base_model.BaseModel.save"], ["", "def", "save_networks", "(", "self", ",", "which_epoch", ")", ":", "\n", "        ", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "save_filename", "=", "'%s_net_%s.pth'", "%", "(", "which_epoch", ",", "name", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "save_filename", ")", ".", "replace", "(", "'\\\\'", ",", "'/'", ")", "\n", "net", "=", "getattr", "(", "self", ",", "'net'", "+", "name", ")", "\n", "optimize", "=", "getattr", "(", "self", ",", "'optimizer_'", "+", "name", ")", "\n", "\n", "if", "len", "(", "self", ".", "gpu_ids", ")", ">", "0", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "torch", ".", "save", "(", "{", "'net'", ":", "net", ".", "module", ".", "cpu", "(", ")", ".", "state_dict", "(", ")", ",", "'optimize'", ":", "optimize", ".", "state_dict", "(", ")", "}", ",", "save_path", ")", "\n", "net", ".", "cuda", "(", "self", ".", "gpu_ids", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                    ", "torch", ".", "save", "(", "net", ".", "cpu", "(", ")", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.base_model.BaseModel.load_networks": [[60, 75], ["isinstance", "os.path.join", "getattr", "getattr", "isinstance", "torch.load", "getattr.load_state_dict", "getattr.load_state_dict", "os.path.join.replace", "str"], "methods", ["None"], ["", "", "", "", "def", "load_networks", "(", "self", ",", "which_epoch", ")", ":", "\n", "        ", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "load_filename", "=", "'%s_net_%s.pth'", "%", "(", "which_epoch", ",", "name", ")", "\n", "load_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "load_filename", ")", "\n", "\n", "net", "=", "getattr", "(", "self", ",", "'net'", "+", "name", ")", "\n", "optimize", "=", "getattr", "(", "self", ",", "'optimizer_'", "+", "name", ")", "\n", "if", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "                    ", "net", "=", "net", ".", "module", "\n", "# if you are using PyTorch newer than 0.4 (e.g., built from", "\n", "# GitHub source), you can remove str() on self.device", "\n", "", "state_dict", "=", "torch", ".", "load", "(", "load_path", ".", "replace", "(", "'\\\\'", ",", "'/'", ")", ",", "map_location", "=", "str", "(", "self", ".", "device", ")", ")", "\n", "optimize", ".", "load_state_dict", "(", "state_dict", "[", "'optimize'", "]", ")", "\n", "net", ".", "load_state_dict", "(", "state_dict", "[", "'net'", "]", ")", "\n", "# update learning rate (called once every epoch)", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.base_model.BaseModel.update_learning_rate": [[76, 81], ["print", "scheduler.step"], "methods", ["None"], ["", "", "", "def", "update_learning_rate", "(", "self", ")", ":", "\n", "        ", "for", "scheduler", "in", "self", ".", "schedulers", ":", "\n", "            ", "scheduler", ".", "step", "(", ")", "\n", "", "lr", "=", "self", ".", "optimizers", "[", "0", "]", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "print", "(", "'learning rate = %.7f'", "%", "lr", ")", "\n", "", "def", "set_requires_grad", "(", "self", ",", "nets", ",", "requires_grad", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.base_model.BaseModel.set_requires_grad": [[81, 93], ["isinstance", "net.parameters"], "methods", ["None"], ["", "def", "set_requires_grad", "(", "self", ",", "nets", ",", "requires_grad", "=", "False", ")", ":", "\n", "        ", "\"\"\"Set requies_grad=Fasle for all the networks to avoid unnecessary computations\n        Parameters:\n            nets (network list)   -- a list of networks\n            requires_grad (bool)  -- whether the networks require gradients or not\n        \"\"\"", "\n", "if", "not", "isinstance", "(", "nets", ",", "list", ")", ":", "\n", "            ", "nets", "=", "[", "nets", "]", "\n", "", "for", "net", "in", "nets", ":", "\n", "            ", "if", "net", "is", "not", "None", ":", "\n", "                ", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "                    ", "param", ".", "requires_grad", "=", "requires_grad", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.PCconv.SELayer.__init__": [[13, 21], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel", ",", "reduction", "=", "16", ")", ":", "\n", "        ", "super", "(", "SELayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "channel", ",", "channel", "//", "reduction", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "channel", "//", "reduction", ",", "channel", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.PCconv.SELayer.forward": [[23, 28], ["x.size", "PCconv.SELayer.avg_pool().view", "PCconv.SELayer.fc", "PCconv.SELayer.expand_as", "PCconv.SELayer.avg_pool"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "b", ",", "c", ",", "_", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "y", "=", "self", ".", "avg_pool", "(", "x", ")", ".", "view", "(", "b", ",", "c", ",", "1", ",", "1", ")", "\n", "y", "=", "self", ".", "fc", "(", "y", ")", "\n", "return", "x", "*", "y", ".", "expand_as", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.PCconv.Convnorm.__init__": [[31, 41], ["torch.Module.__init__", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "out_ch", ",", "sample", "=", "'none-3'", ",", "activ", "=", "'leaky'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn", "=", "nn", ".", "InstanceNorm2d", "(", "out_ch", ",", "affine", "=", "True", ")", "\n", "\n", "if", "sample", "==", "'down-3'", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_ch", ",", "out_ch", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_ch", ",", "out_ch", ",", "3", ",", "1", ")", "\n", "", "if", "activ", "==", "'leaky'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.PCconv.Convnorm.forward": [[42, 49], ["PCconv.Convnorm.conv", "PCconv.Convnorm.bn", "hasattr", "PCconv.Convnorm.activation"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "input", "\n", "out", "=", "self", ".", "conv", "(", "out", ")", "\n", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "if", "hasattr", "(", "self", ",", "'activation'", ")", ":", "\n", "            ", "out", "=", "self", ".", "activation", "(", "out", "[", "0", "]", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.PCconv.PCBActiv.__init__": [[52, 73], ["torch.Module.__init__", "PCconv.PartialConv", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "PCconv.PartialConv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "PCconv.PartialConv", "PCconv.PartialConv"], "methods", ["home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "out_ch", ",", "bn", "=", "True", ",", "sample", "=", "'none-3'", ",", "activ", "=", "'leaky'", ",", "\n", "conv_bias", "=", "False", ",", "innorm", "=", "False", ",", "inner", "=", "False", ",", "outer", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "sample", "==", "'same-5'", ":", "\n", "            ", "self", ".", "conv", "=", "PartialConv", "(", "in_ch", ",", "out_ch", ",", "5", ",", "1", ",", "2", ",", "bias", "=", "conv_bias", ")", "\n", "", "elif", "sample", "==", "'same-7'", ":", "\n", "            ", "self", ".", "conv", "=", "PartialConv", "(", "in_ch", ",", "out_ch", ",", "7", ",", "1", ",", "3", ",", "bias", "=", "conv_bias", ")", "\n", "", "elif", "sample", "==", "'down-3'", ":", "\n", "            ", "self", ".", "conv", "=", "PartialConv", "(", "in_ch", ",", "out_ch", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "conv_bias", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "PartialConv", "(", "in_ch", ",", "out_ch", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "conv_bias", ")", "\n", "\n", "", "if", "bn", ":", "\n", "            ", "self", ".", "bn", "=", "nn", ".", "InstanceNorm2d", "(", "out_ch", ",", "affine", "=", "True", ")", "\n", "", "if", "activ", "==", "'relu'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", ")", "\n", "", "elif", "activ", "==", "'leaky'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ")", "\n", "", "self", ".", "innorm", "=", "innorm", "\n", "self", ".", "inner", "=", "inner", "\n", "self", ".", "outer", "=", "outer", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.PCconv.PCBActiv.forward": [[74, 96], ["PCconv.PCBActiv.bn", "PCconv.PCBActiv.activation", "PCconv.PCBActiv.conv", "PCconv.PCBActiv.bn", "PCconv.PCBActiv.activation", "PCconv.PCBActiv.conv", "PCconv.PCBActiv.bn", "PCconv.PCBActiv.activation", "PCconv.PCBActiv.conv", "PCconv.PCBActiv.bn", "PCconv.PCBActiv.conv", "PCconv.PCBActiv.bn", "hasattr", "PCconv.PCBActiv.activation"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "input", "\n", "if", "self", ".", "inner", ":", "\n", "            ", "out", "[", "0", "]", "=", "self", ".", "bn", "(", "out", "[", "0", "]", ")", "\n", "out", "[", "0", "]", "=", "self", ".", "activation", "(", "out", "[", "0", "]", ")", "\n", "out", "=", "self", ".", "conv", "(", "out", ")", "\n", "out", "[", "0", "]", "=", "self", ".", "bn", "(", "out", "[", "0", "]", ")", "\n", "out", "[", "0", "]", "=", "self", ".", "activation", "(", "out", "[", "0", "]", ")", "\n", "\n", "", "elif", "self", ".", "innorm", ":", "\n", "            ", "out", "=", "self", ".", "conv", "(", "out", ")", "\n", "out", "[", "0", "]", "=", "self", ".", "bn", "(", "out", "[", "0", "]", ")", "\n", "out", "[", "0", "]", "=", "self", ".", "activation", "(", "out", "[", "0", "]", ")", "\n", "", "elif", "self", ".", "outer", ":", "\n", "            ", "out", "=", "self", ".", "conv", "(", "out", ")", "\n", "out", "[", "0", "]", "=", "self", ".", "bn", "(", "out", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "conv", "(", "out", ")", "\n", "out", "[", "0", "]", "=", "self", ".", "bn", "(", "out", "[", "0", "]", ")", "\n", "if", "hasattr", "(", "self", ",", "'activation'", ")", ":", "\n", "                ", "out", "[", "0", "]", "=", "self", ".", "activation", "(", "out", "[", "0", "]", ")", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.PCconv.ConvDown.__init__": [[99, 158], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "min", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_c", ",", "out_c", ",", "kernel", ",", "stride", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "False", ",", "layers", "=", "1", ",", "activ", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "nf_mult", "=", "1", "\n", "nums", "=", "out_c", "/", "64", "\n", "sequence", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "layers", "+", "1", ")", ":", "\n", "            ", "nf_mult_prev", "=", "nf_mult", "\n", "if", "nums", "==", "8", ":", "\n", "                ", "if", "in_c", "==", "512", ":", "\n", "\n", "                    ", "nfmult", "=", "1", "\n", "", "else", ":", "\n", "                    ", "nf_mult", "=", "2", "\n", "\n", "", "", "else", ":", "\n", "                ", "nf_mult", "=", "min", "(", "2", "**", "i", ",", "8", ")", "\n", "", "if", "kernel", "!=", "1", ":", "\n", "\n", "                ", "if", "activ", "==", "False", "and", "layers", "==", "1", ":", "\n", "                    ", "sequence", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "nf_mult_prev", "*", "in_c", ",", "nf_mult", "*", "in_c", ",", "\n", "kernel_size", "=", "kernel", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "nf_mult", "*", "in_c", ")", "\n", "]", "\n", "", "else", ":", "\n", "                    ", "sequence", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "nf_mult_prev", "*", "in_c", ",", "nf_mult", "*", "in_c", ",", "\n", "kernel_size", "=", "kernel", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "nf_mult", "*", "in_c", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "\n", "\n", "", "", "else", ":", "\n", "\n", "                ", "sequence", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "in_c", ",", "out_c", ",", "\n", "kernel_size", "=", "kernel", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "out_c", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "\n", "\n", "", "if", "activ", "==", "False", ":", "\n", "                ", "if", "i", "+", "1", "==", "layers", ":", "\n", "                    ", "if", "layers", "==", "2", ":", "\n", "                        ", "sequence", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "nf_mult", "*", "in_c", ",", "nf_mult", "*", "in_c", ",", "\n", "kernel_size", "=", "kernel", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "nf_mult", "*", "in_c", ")", "\n", "]", "\n", "", "else", ":", "\n", "                        ", "sequence", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "nf_mult_prev", "*", "in_c", ",", "nf_mult", "*", "in_c", ",", "\n", "kernel_size", "=", "kernel", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "nf_mult", "*", "in_c", ")", "\n", "]", "\n", "", "break", "\n", "\n", "", "", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "sequence", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.PCconv.ConvDown.forward": [[159, 161], ["PCconv.ConvDown.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.PCconv.ConvUp.__init__": [[164, 171], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_c", ",", "out_c", ",", "kernel", ",", "stride", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_c", ",", "out_c", ",", "kernel", ",", "\n", "stride", ",", "padding", ",", "dilation", ",", "groups", ",", "bias", ")", "\n", "self", ".", "bn", "=", "nn", ".", "InstanceNorm2d", "(", "out_c", ")", "\n", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.PCconv.ConvUp.forward": [[172, 178], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "PCconv.ConvUp.conv", "PCconv.ConvUp.bn", "PCconv.ConvUp.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "size", ")", ":", "\n", "        ", "out", "=", "F", ".", "interpolate", "(", "input", "=", "input", ",", "size", "=", "size", ",", "mode", "=", "'bilinear'", ")", "\n", "out", "=", "self", ".", "conv", "(", "out", ")", "\n", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.PCconv.BASE.__init__": [[181, 192], ["torch.Module.__init__", "PCconv.SELayer", "util.gussin().cuda", "torch.unsqueeze().double", "torch.unsqueeze().double", "torch.unsqueeze().double", "torch.unsqueeze().double", "torch.unsqueeze().double", "torch.unsqueeze().double", "torch.unsqueeze().double", "torch.unsqueeze().double", "torch.unsqueeze().double", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "util.gussin", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.util.util.gussin"], ["    ", "def", "__init__", "(", "self", ",", "inner_nc", ")", ":", "\n", "        ", "super", "(", "BASE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "se", "=", "SELayer", "(", "inner_nc", ",", "16", ")", "\n", "model", "=", "[", "se", "]", "\n", "gus", "=", "util", ".", "gussin", "(", "1.5", ")", ".", "cuda", "(", ")", "\n", "self", ".", "gus", "=", "torch", ".", "unsqueeze", "(", "gus", ",", "1", ")", ".", "double", "(", ")", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "self", ".", "down", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1024", ",", "512", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.PCconv.BASE.forward": [[194, 222], ["util.Selfpatch.Selfpatch", "PCconv.BASE.model", "PCconv.BASE.size", "PCconv.BASE.gus.float", "out_32[].expand", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "gus_out.contiguous().view.contiguous().view.contiguous().view", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.nn.functional.pad", "util.Selfpatch.Selfpatch.buildAutoencoder", "csa2_conv.expand_as.expand_as.expand_as", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "csa_a.contiguous().view.contiguous().view.size", "csa_a.contiguous().view.contiguous().view.contiguous().view", "torch.softmax", "torch.softmax", "torch.softmax", "csa_a.contiguous().view.contiguous().view.contiguous().view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum.contiguous().view", "torch.sum.contiguous().view", "torch.sum.contiguous().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "PCconv.BASE.down", "gus_out.contiguous().view.contiguous().view.contiguous", "csa_a.contiguous().view.contiguous().view.contiguous", "csa_a.contiguous().view.contiguous().view.contiguous", "torch.sum.contiguous", "torch.sum.contiguous", "torch.sum.contiguous"], "methods", ["home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.util.Selfpatch.Selfpatch.buildAutoencoder"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "Nonparm", "=", "Selfpatch", "(", ")", "\n", "out_32", "=", "self", ".", "model", "(", "x", ")", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "out_32", ".", "size", "(", ")", "\n", "gus", "=", "self", ".", "gus", ".", "float", "(", ")", "\n", "gus_out", "=", "out_32", "[", "0", "]", ".", "expand", "(", "h", "*", "w", ",", "c", ",", "h", ",", "w", ")", "\n", "gus_out", "=", "gus", "*", "gus_out", "\n", "gus_out", "=", "torch", ".", "sum", "(", "gus_out", ",", "-", "1", ")", "\n", "gus_out", "=", "torch", ".", "sum", "(", "gus_out", ",", "-", "1", ")", "\n", "gus_out", "=", "gus_out", ".", "contiguous", "(", ")", ".", "view", "(", "b", ",", "c", ",", "h", ",", "w", ")", "\n", "csa2_in", "=", "F", ".", "sigmoid", "(", "out_32", ")", "\n", "csa2_f", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "csa2_in", ",", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "csa2_ff", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "out_32", ",", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "csa2_fff", ",", "csa2_f", ",", "csa2_conv", "=", "Nonparm", ".", "buildAutoencoder", "(", "csa2_f", "[", "0", "]", ",", "csa2_in", "[", "0", "]", ",", "csa2_ff", "[", "0", "]", ",", "3", ",", "1", ")", "\n", "csa2_conv", "=", "csa2_conv", ".", "expand_as", "(", "csa2_f", ")", "\n", "csa_a", "=", "csa2_conv", "*", "csa2_f", "\n", "csa_a", "=", "torch", ".", "mean", "(", "csa_a", ",", "1", ")", "\n", "a_c", ",", "a_h", ",", "a_w", "=", "csa_a", ".", "size", "(", ")", "\n", "csa_a", "=", "csa_a", ".", "contiguous", "(", ")", ".", "view", "(", "a_c", ",", "-", "1", ")", "\n", "csa_a", "=", "F", ".", "softmax", "(", "csa_a", ",", "dim", "=", "1", ")", "\n", "csa_a", "=", "csa_a", ".", "contiguous", "(", ")", ".", "view", "(", "a_c", ",", "1", ",", "a_h", ",", "a_h", ")", "\n", "out", "=", "csa_a", "*", "csa2_fff", "\n", "out", "=", "torch", ".", "sum", "(", "out", ",", "-", "1", ")", "\n", "out", "=", "torch", ".", "sum", "(", "out", ",", "-", "1", ")", "\n", "out_csa", "=", "out", ".", "contiguous", "(", ")", ".", "view", "(", "b", ",", "c", ",", "h", ",", "w", ")", "\n", "out_32", "=", "torch", ".", "cat", "(", "[", "gus_out", ",", "out_csa", "]", ",", "1", ")", "\n", "out_32", "=", "self", ".", "down", "(", "out_32", ")", "\n", "return", "out_32", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.PCconv.PartialConv.__init__": [[225, 238], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "PCconv.PartialConv.mask_conv.parameters"], "methods", ["home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "\n", "stride", ",", "padding", ",", "dilation", ",", "groups", ",", "bias", ")", "\n", "self", ".", "mask_conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "\n", "stride", ",", "padding", ",", "dilation", ",", "groups", ",", "False", ")", "\n", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "self", ".", "mask_conv", ".", "weight", ",", "1.0", ")", "\n", "\n", "# mask is not updated", "\n", "for", "param", "in", "self", ".", "mask_conv", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.PCconv.PartialConv.forward": [[239, 267], ["inputt[].float().cuda", "PCconv.PartialConv.input_conv", "PCconv.PartialConv.masked_fill_", "output_pre.masked_fill_", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "new_mask.masked_fill_.masked_fill_.masked_fill_", "out.append", "out.append", "PCconv.PartialConv.input_conv.bias.view().expand_as", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "PCconv.PartialConv.mask_conv", "no_update_holes.bool", "no_update_holes.bool", "no_update_holes.bool", "inputt[].float", "PCconv.PartialConv.input_conv.bias.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "inputt", ")", ":", "\n", "# http://masc.cs.gmu.edu/wiki/partialconv", "\n", "# C(X) = W^T * X + b, C(0) = b, D(M) = 1 * M + 0 = sum(M)", "\n", "# W^T* (M .* X) / sum(M) + b = [C(M .* X) \u2013 C(0)] / D(M) + C(0)", "\n", "\n", "        ", "input", "=", "inputt", "[", "0", "]", "\n", "mask", "=", "inputt", "[", "1", "]", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "output", "=", "self", ".", "input_conv", "(", "input", "*", "mask", ")", "\n", "if", "self", ".", "input_conv", ".", "bias", "is", "not", "None", ":", "\n", "            ", "output_bias", "=", "self", ".", "input_conv", ".", "bias", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", ".", "expand_as", "(", "\n", "output", ")", "\n", "", "else", ":", "\n", "            ", "output_bias", "=", "torch", ".", "zeros_like", "(", "output", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output_mask", "=", "self", ".", "mask_conv", "(", "mask", ")", "\n", "\n", "", "no_update_holes", "=", "output_mask", "==", "0", "\n", "mask_sum", "=", "output_mask", ".", "masked_fill_", "(", "no_update_holes", ".", "bool", "(", ")", ",", "1.0", ")", "\n", "output_pre", "=", "(", "output", "-", "output_bias", ")", "/", "mask_sum", "+", "output_bias", "\n", "output", "=", "output_pre", ".", "masked_fill_", "(", "no_update_holes", ".", "bool", "(", ")", ",", "0.0", ")", "\n", "new_mask", "=", "torch", ".", "ones_like", "(", "output", ")", "\n", "new_mask", "=", "new_mask", ".", "masked_fill_", "(", "no_update_holes", ".", "bool", "(", ")", ",", "0.0", ")", "\n", "out", "=", "[", "]", "\n", "out", ".", "append", "(", "output", ")", "\n", "out", ".", "append", "(", "new_mask", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.PCconv.PCconv.__init__": [[270, 297], ["torch.Module.__init__", "PCconv.ConvDown", "PCconv.ConvDown", "PCconv.ConvDown", "PCconv.ConvDown", "PCconv.ConvDown", "PCconv.ConvDown", "PCconv.ConvDown", "PCconv.ConvDown", "PCconv.ConvUp", "PCconv.ConvUp", "PCconv.ConvUp", "PCconv.ConvUp", "PCconv.BASE", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "PCconv.PCBActiv", "PCconv.PCBActiv", "PCconv.PCBActiv"], "methods", ["home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "PCconv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "down_128", "=", "ConvDown", "(", "64", ",", "128", ",", "4", ",", "2", ",", "padding", "=", "1", ",", "layers", "=", "2", ")", "\n", "self", ".", "down_64", "=", "ConvDown", "(", "128", ",", "256", ",", "4", ",", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "down_32", "=", "ConvDown", "(", "256", ",", "256", ",", "1", ",", "1", ")", "\n", "self", ".", "down_16", "=", "ConvDown", "(", "512", ",", "512", ",", "4", ",", "2", ",", "padding", "=", "1", ",", "activ", "=", "False", ")", "\n", "self", ".", "down_8", "=", "ConvDown", "(", "512", ",", "512", ",", "4", ",", "2", ",", "padding", "=", "1", ",", "layers", "=", "2", ",", "activ", "=", "False", ")", "\n", "self", ".", "down_4", "=", "ConvDown", "(", "512", ",", "512", ",", "4", ",", "2", ",", "padding", "=", "1", ",", "layers", "=", "3", ",", "activ", "=", "False", ")", "\n", "self", ".", "down", "=", "ConvDown", "(", "768", ",", "256", ",", "1", ",", "1", ")", "\n", "self", ".", "fuse", "=", "ConvDown", "(", "512", ",", "512", ",", "1", ",", "1", ")", "\n", "self", ".", "up", "=", "ConvUp", "(", "512", ",", "256", ",", "1", ",", "1", ")", "\n", "self", ".", "up_128", "=", "ConvUp", "(", "512", ",", "64", ",", "1", ",", "1", ")", "\n", "self", ".", "up_64", "=", "ConvUp", "(", "512", ",", "128", ",", "1", ",", "1", ")", "\n", "self", ".", "up_32", "=", "ConvUp", "(", "512", ",", "256", ",", "1", ",", "1", ")", "\n", "self", ".", "base", "=", "BASE", "(", "512", ")", "\n", "seuqence_3", "=", "[", "]", "\n", "seuqence_5", "=", "[", "]", "\n", "seuqence_7", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "seuqence_3", "+=", "[", "PCBActiv", "(", "256", ",", "256", ",", "innorm", "=", "True", ")", "]", "\n", "seuqence_5", "+=", "[", "PCBActiv", "(", "256", ",", "256", ",", "sample", "=", "'same-5'", ",", "innorm", "=", "True", ")", "]", "\n", "seuqence_7", "+=", "[", "PCBActiv", "(", "256", ",", "256", ",", "sample", "=", "'same-7'", ",", "innorm", "=", "True", ")", "]", "\n", "\n", "", "self", ".", "cov_3", "=", "nn", ".", "Sequential", "(", "*", "seuqence_3", ")", "\n", "self", ".", "cov_5", "=", "nn", ".", "Sequential", "(", "*", "seuqence_5", ")", "\n", "self", ".", "cov_7", "=", "nn", ".", "Sequential", "(", "*", "seuqence_7", ")", "\n", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.PCconv.PCconv.forward": [[298, 363], ["util.cal_feat_mask", "input[].size", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "mask_1.expand.expand.expand", "PCconv.PCconv.activation", "PCconv.PCconv.activation", "PCconv.PCconv.activation", "PCconv.PCconv.activation", "PCconv.PCconv.activation", "PCconv.PCconv.activation", "PCconv.PCconv.down_128", "PCconv.PCconv.down_64", "PCconv.PCconv.down_32", "PCconv.PCconv.up", "PCconv.PCconv.up", "PCconv.PCconv.up", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "PCconv.PCconv.down", "PCconv.PCconv.down", "PCconv.PCconv.cov_3", "PCconv.PCconv.cov_5", "PCconv.PCconv.cov_7", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "PCconv.PCconv.down", "PCconv.PCconv.cov_3", "PCconv.PCconv.cov_5", "PCconv.PCconv.cov_7", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "PCconv.PCconv.down", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "PCconv.PCconv.fuse", "PCconv.PCconv.base", "torch.neg", "torch.neg", "torch.neg", "torch.neg", "torch.neg", "torch.neg", "torch.neg", "torch.neg", "torch.neg", "PCconv.PCconv.up_128", "PCconv.PCconv.up_64", "PCconv.PCconv.up_32", "PCconv.PCconv.down_16", "PCconv.PCconv.down_8", "PCconv.PCconv.down_4", "util.cal_feat_mask.float"], "methods", ["home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.util.util.cal_feat_mask"], ["", "def", "forward", "(", "self", ",", "input", ",", "mask", ")", ":", "\n", "        ", "mask", "=", "util", ".", "cal_feat_mask", "(", "mask", ",", "3", ",", "1", ")", "\n", "# input[2]:256 32 32", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "input", "[", "2", "]", ".", "size", "(", ")", "\n", "mask_1", "=", "torch", ".", "add", "(", "torch", ".", "neg", "(", "mask", ".", "float", "(", ")", ")", ",", "1", ")", "\n", "mask_1", "=", "mask_1", ".", "expand", "(", "b", ",", "c", ",", "h", ",", "w", ")", "\n", "\n", "x_1", "=", "self", ".", "activation", "(", "input", "[", "0", "]", ")", "\n", "x_2", "=", "self", ".", "activation", "(", "input", "[", "1", "]", ")", "\n", "x_3", "=", "self", ".", "activation", "(", "input", "[", "2", "]", ")", "\n", "x_4", "=", "self", ".", "activation", "(", "input", "[", "3", "]", ")", "\n", "x_5", "=", "self", ".", "activation", "(", "input", "[", "4", "]", ")", "\n", "x_6", "=", "self", ".", "activation", "(", "input", "[", "5", "]", ")", "\n", "# Change the shape of each layer and intergrate low-level/high-level features", "\n", "x_1", "=", "self", ".", "down_128", "(", "x_1", ")", "\n", "x_2", "=", "self", ".", "down_64", "(", "x_2", ")", "\n", "x_3", "=", "self", ".", "down_32", "(", "x_3", ")", "\n", "x_4", "=", "self", ".", "up", "(", "x_4", ",", "(", "32", ",", "32", ")", ")", "\n", "x_5", "=", "self", ".", "up", "(", "x_5", ",", "(", "32", ",", "32", ")", ")", "\n", "x_6", "=", "self", ".", "up", "(", "x_6", ",", "(", "32", ",", "32", ")", ")", "\n", "\n", "# The first three layers are Texture/detail", "\n", "# The last three layers are Structure", "\n", "x_DE", "=", "torch", ".", "cat", "(", "[", "x_1", ",", "x_2", ",", "x_3", "]", ",", "1", ")", "\n", "x_ST", "=", "torch", ".", "cat", "(", "[", "x_4", ",", "x_5", ",", "x_6", "]", ",", "1", ")", "\n", "\n", "x_ST", "=", "self", ".", "down", "(", "x_ST", ")", "\n", "x_DE", "=", "self", ".", "down", "(", "x_DE", ")", "\n", "x_ST", "=", "[", "x_ST", ",", "mask_1", "]", "\n", "x_DE", "=", "[", "x_DE", ",", "mask_1", "]", "\n", "\n", "# Multi Scale PConv fill the Details", "\n", "x_DE_3", "=", "self", ".", "cov_3", "(", "x_DE", ")", "\n", "x_DE_5", "=", "self", ".", "cov_5", "(", "x_DE", ")", "\n", "x_DE_7", "=", "self", ".", "cov_7", "(", "x_DE", ")", "\n", "x_DE_fuse", "=", "torch", ".", "cat", "(", "[", "x_DE_3", "[", "0", "]", ",", "x_DE_5", "[", "0", "]", ",", "x_DE_7", "[", "0", "]", "]", ",", "1", ")", "\n", "x_DE_fi", "=", "self", ".", "down", "(", "x_DE_fuse", ")", "\n", "\n", "# Multi Scale PConv fill the Structure", "\n", "x_ST_3", "=", "self", ".", "cov_3", "(", "x_ST", ")", "\n", "x_ST_5", "=", "self", ".", "cov_5", "(", "x_ST", ")", "\n", "x_ST_7", "=", "self", ".", "cov_7", "(", "x_ST", ")", "\n", "x_ST_fuse", "=", "torch", ".", "cat", "(", "[", "x_ST_3", "[", "0", "]", ",", "x_ST_5", "[", "0", "]", ",", "x_ST_7", "[", "0", "]", "]", ",", "1", ")", "\n", "x_ST_fi", "=", "self", ".", "down", "(", "x_ST_fuse", ")", "\n", "\n", "x_cat", "=", "torch", ".", "cat", "(", "[", "x_ST_fi", ",", "x_DE_fi", "]", ",", "1", ")", "\n", "x_cat_fuse", "=", "self", ".", "fuse", "(", "x_cat", ")", "\n", "\n", "# Feature equalizations", "\n", "x_final", "=", "self", ".", "base", "(", "x_cat_fuse", ")", "\n", "\n", "# Add back to the input", "\n", "x_ST", "=", "x_final", "\n", "x_DE", "=", "x_final", "\n", "x_1", "=", "self", ".", "up_128", "(", "x_DE", ",", "(", "128", ",", "128", ")", ")", "+", "input", "[", "0", "]", "\n", "x_2", "=", "self", ".", "up_64", "(", "x_DE", ",", "(", "64", ",", "64", ")", ")", "+", "input", "[", "1", "]", "\n", "x_3", "=", "self", ".", "up_32", "(", "x_DE", ",", "(", "32", ",", "32", ")", ")", "+", "input", "[", "2", "]", "\n", "x_4", "=", "self", ".", "down_16", "(", "x_ST", ")", "+", "input", "[", "3", "]", "\n", "x_5", "=", "self", ".", "down_8", "(", "x_ST", ")", "+", "input", "[", "4", "]", "\n", "x_6", "=", "self", ".", "down_4", "(", "x_ST", ")", "+", "input", "[", "5", "]", "\n", "\n", "out", "=", "[", "x_1", ",", "x_2", ",", "x_3", ",", "x_4", ",", "x_5", ",", "x_6", "]", "\n", "loss", "=", "[", "x_ST_fi", ",", "x_DE_fi", "]", "\n", "out_final", "=", "[", "out", ",", "loss", "]", "\n", "return", "out_final", "\n", "", "", ""]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.Discriminator.NLayerDiscriminator.__init__": [[10, 52], ["torch.Module.__init__", "range", "min", "torch.Sequential", "type", "Discriminator.spectral_norm", "torch.LeakyReLU", "min", "Discriminator.spectral_norm", "torch.LeakyReLU", "Discriminator.spectral_norm", "torch.Conv2d", "Discriminator.spectral_norm", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.Discriminator.spectral_norm", "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.Discriminator.spectral_norm", "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.Discriminator.spectral_norm", "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.Discriminator.spectral_norm"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_sigmoid", "=", "False", ")", ":", "\n", "        ", "super", "(", "NLayerDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "kw", "=", "4", "\n", "padw", "=", "1", "\n", "sequence", "=", "[", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "input_nc", ",", "ndf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "True", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "\n", "\n", "nf_mult", "=", "1", "\n", "nf_mult_prev", "=", "1", "\n", "for", "n", "in", "range", "(", "1", ",", "n_layers", ")", ":", "\n", "            ", "nf_mult_prev", "=", "nf_mult", "\n", "nf_mult", "=", "min", "(", "2", "**", "n", ",", "8", ")", "\n", "sequence", "+=", "[", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult_prev", ",", "ndf", "*", "nf_mult", ",", "\n", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ",", "bias", "=", "use_bias", ")", ",", "True", ")", ",", "\n", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "\n", "]", "\n", "\n", "", "nf_mult_prev", "=", "nf_mult", "\n", "nf_mult", "=", "min", "(", "2", "**", "n_layers", ",", "8", ")", "\n", "sequence", "+=", "[", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult_prev", ",", "ndf", "*", "nf_mult", ",", "\n", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ",", "bias", "=", "use_bias", ")", ",", "True", ")", ",", "\n", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "\n", "\n", "sequence", "+=", "[", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult", ",", "1", ",", "\n", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ",", "bias", "=", "use_bias", ")", ",", "True", ")", "]", "\n", "\n", "if", "use_sigmoid", ":", "\n", "            ", "sequence", "+=", "[", "nn", ".", "Sigmoid", "(", ")", "]", "\n", "\n", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "sequence", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.Discriminator.NLayerDiscriminator.forward": [[53, 55], ["Discriminator.NLayerDiscriminator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "input", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.Discriminator.spectral_norm": [[3, 8], ["torch.utils.spectral_norm"], "function", ["home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.Discriminator.spectral_norm"], ["def", "spectral_norm", "(", "module", ",", "mode", "=", "True", ")", ":", "\n", "    ", "if", "mode", ":", "\n", "        ", "return", "nn", ".", "utils", ".", "spectral_norm", "(", "module", ")", "\n", "\n", "", "return", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.InnerCos.InnerCos.__init__": [[7, 14], ["torch.Module.__init__", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "InnerCos", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "criterion", "=", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "target", "=", "None", "\n", "self", ".", "down_model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "256", ",", "3", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.InnerCos.InnerCos.set_target": [[16, 19], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["None"], ["", "def", "set_target", "(", "self", ",", "targetde", ",", "targetst", ")", ":", "\n", "        ", "self", ".", "targetst", "=", "F", ".", "interpolate", "(", "targetst", ",", "size", "=", "(", "32", ",", "32", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "self", ".", "targetde", "=", "F", ".", "interpolate", "(", "targetde", ",", "size", "=", "(", "32", ",", "32", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.InnerCos.InnerCos.get_target": [[20, 22], ["None"], "methods", ["None"], ["", "def", "get_target", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.InnerCos.InnerCos.forward": [[23, 30], ["InnerCos.InnerCos.down_model", "InnerCos.InnerCos.down_model", "InnerCos.InnerCos.criterion", "InnerCos.InnerCos.criterion"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "in_data", ")", ":", "\n", "        ", "loss_co", "=", "in_data", "[", "1", "]", "\n", "self", ".", "ST", "=", "self", ".", "down_model", "(", "loss_co", "[", "0", "]", ")", "\n", "self", ".", "DE", "=", "self", ".", "down_model", "(", "loss_co", "[", "1", "]", ")", "\n", "self", ".", "loss", "=", "self", ".", "criterion", "(", "self", ".", "ST", ",", "self", ".", "targetst", ")", "+", "self", ".", "criterion", "(", "self", ".", "DE", ",", "self", ".", "targetde", ")", "\n", "self", ".", "output", "=", "in_data", "[", "0", "]", "\n", "return", "self", ".", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.InnerCos.InnerCos.backward": [[31, 35], ["InnerCos.InnerCos.loss.backward"], "methods", ["home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.InnerCos.InnerCos.backward"], ["", "def", "backward", "(", "self", ",", "retain_graph", "=", "True", ")", ":", "\n", "\n", "        ", "self", ".", "loss", ".", "backward", "(", "retain_graph", "=", "retain_graph", ")", "\n", "return", "self", ".", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.models.InnerCos.InnerCos.__repr__": [[36, 39], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "", "", "", ""]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.data.dataprocess.DataProcess.__init__": [[10, 32], ["super().__init__", "torchvision.Compose", "torchvision.Compose", "len", "print", "sorted", "sorted", "sorted", "torchvision.Resize", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Resize", "torchvision.ToTensor", "glob.glob.glob", "glob.glob.glob", "glob.glob.glob"], "methods", ["home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "de_root", ",", "st_root", ",", "mask_root", ",", "opt", ",", "train", "=", "True", ")", ":", "\n", "        ", "super", "(", "DataProcess", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "img_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "opt", ".", "fineSize", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "\n", "]", ")", "\n", "# mask should not normalize, is just have 0 or 1", "\n", "self", ".", "mask_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "opt", ".", "fineSize", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "\n", "]", ")", "\n", "self", ".", "Train", "=", "False", "\n", "self", ".", "opt", "=", "opt", "\n", "\n", "if", "train", ":", "\n", "            ", "self", ".", "de_paths", "=", "sorted", "(", "glob", "(", "'{:s}/*'", ".", "format", "(", "de_root", ")", ",", "recursive", "=", "True", ")", ")", "\n", "self", ".", "st_paths", "=", "sorted", "(", "glob", "(", "'{:s}/*'", ".", "format", "(", "st_root", ")", ",", "recursive", "=", "True", ")", ")", "\n", "self", ".", "mask_paths", "=", "sorted", "(", "glob", "(", "'{:s}/*'", ".", "format", "(", "mask_root", ")", ",", "recursive", "=", "True", ")", ")", "\n", "self", ".", "Train", "=", "True", "\n", "", "self", ".", "N_mask", "=", "len", "(", "self", ".", "mask_paths", ")", "\n", "print", "(", "self", ".", "N_mask", ")", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.data.dataprocess.DataProcess.__getitem__": [[32, 41], ["PIL.Image.open", "PIL.Image.open", "PIL.Image.open", "dataprocess.DataProcess.img_transform", "dataprocess.DataProcess.img_transform", "dataprocess.DataProcess.mask_transform", "dataprocess.DataProcess.convert", "dataprocess.DataProcess.convert", "dataprocess.DataProcess.convert", "random.randint"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "de_img", "=", "Image", ".", "open", "(", "self", ".", "de_paths", "[", "index", "]", ")", "\n", "st_img", "=", "Image", ".", "open", "(", "self", ".", "st_paths", "[", "index", "]", ")", "\n", "mask_img", "=", "Image", ".", "open", "(", "self", ".", "mask_paths", "[", "random", ".", "randint", "(", "0", ",", "self", ".", "N_mask", "-", "1", ")", "]", ")", "\n", "de_img", "=", "self", ".", "img_transform", "(", "de_img", ".", "convert", "(", "'RGB'", ")", ")", "\n", "st_img", "=", "self", ".", "img_transform", "(", "st_img", ".", "convert", "(", "'RGB'", ")", ")", "\n", "mask_img", "=", "self", ".", "mask_transform", "(", "mask_img", ".", "convert", "(", "'RGB'", ")", ")", "\n", "return", "de_img", ",", "st_img", ",", "mask_img", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.data.dataprocess.DataProcess.__len__": [[42, 44], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "de_paths", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.options.test_options.TestOptions.initialize": [[5, 16], ["base_options.BaseOptions.initialize", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "float"], "methods", ["home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.options.base_options.BaseOptions.initialize"], ["    ", "def", "initialize", "(", "self", ",", "parser", ")", ":", "\n", "        ", "parser", "=", "BaseOptions", ".", "initialize", "(", "self", ",", "parser", ")", "\n", "parser", ".", "add_argument", "(", "'--ntest'", ",", "type", "=", "int", ",", "default", "=", "float", "(", "\"inf\"", ")", ",", "help", "=", "'# of test examples.'", ")", "\n", "parser", ".", "add_argument", "(", "'--results_dir'", ",", "type", "=", "str", ",", "default", "=", "'./results/'", ",", "help", "=", "'saves results here.'", ")", "\n", "parser", ".", "add_argument", "(", "'--aspect_ratio'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'aspect ratio of result images'", ")", "\n", "parser", ".", "add_argument", "(", "'--phase'", ",", "type", "=", "str", ",", "default", "=", "'paris_256'", ",", "help", "=", "'train, val, test, etc'", ")", "\n", "parser", ".", "add_argument", "(", "'--which_epoch'", ",", "type", "=", "str", ",", "default", "=", "'20'", ",", "help", "=", "'which epoch to load? set to latest to use latest cached model'", ")", "\n", "parser", ".", "add_argument", "(", "'--how_many'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'how many test images to run'", ")", "\n", "self", ".", "isTrain", "=", "False", "\n", "\n", "return", "parser", "\n", "", "", ""]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.options.train_options.TrainOptions.initialize": [[6, 26], ["base_options.BaseOptions.initialize", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument"], "methods", ["home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.options.base_options.BaseOptions.initialize"], ["    ", "def", "initialize", "(", "self", ",", "parser", ")", ":", "\n", "        ", "parser", "=", "BaseOptions", ".", "initialize", "(", "self", ",", "parser", ")", "\n", "parser", ".", "add_argument", "(", "'--log_dir'", ",", "type", "=", "str", ",", "default", "=", "'./logs'", ",", "help", "=", "'the path to record log'", ")", "\n", "parser", ".", "add_argument", "(", "'--display_freq'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'frequency of showing training results on screen'", ")", "\n", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'frequency of showing training results on console'", ")", "\n", "parser", ".", "add_argument", "(", "'--display_single_pane_ncols'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'if positive, display all images in a single visdom web panel with certain number of images per row.'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_latest_freq'", ",", "type", "=", "int", ",", "default", "=", "5000", ",", "help", "=", "'frequency of saving the latest results'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_epoch_freq'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'frequency of saving checkpoints at the end of epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'--continue_train'", ",", "action", "=", "'store_true'", ",", "help", "=", "'continue training: load the latest model'", ")", "\n", "parser", ".", "add_argument", "(", "'--epoch_count'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'the starting epoch count, we save the model by <epoch_count>, <epoch_count>+<save_latest_freq>, ...'", ")", "\n", "parser", ".", "add_argument", "(", "'--phase'", ",", "type", "=", "str", ",", "default", "=", "'train'", ",", "help", "=", "'train, val, test, etc'", ")", "\n", "parser", ".", "add_argument", "(", "'--which_epoch'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'which epoch to load? set to latest to use latest cached model'", ")", "\n", "parser", ".", "add_argument", "(", "'--niter'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "'# of iter at starting learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--niter_decay'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'# of iter to linearly decay learning rate to zero'", ")", "\n", "parser", ".", "add_argument", "(", "'--beta1'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'momentum term of adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.0002", ",", "help", "=", "'initial learning rate for adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_policy'", ",", "type", "=", "str", ",", "default", "=", "'lambda'", ",", "help", "=", "'learning rate policy: lambda|step|plateau|cosine'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_iters'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'multiply by a gamma every lr_decay_iters iterations'", ")", "\n", "self", ".", "isTrain", "=", "True", "\n", "return", "parser", "\n", "", "", ""]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.options.base_options.BaseOptions.__init__": [[7, 9], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "initialized", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.options.base_options.BaseOptions.initialize": [[10, 40], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "parser", ")", ":", "\n", "\n", "        ", "parser", ".", "add_argument", "(", "'--st_root'", ",", "type", "=", "str", ",", "default", "=", "r'./data/datasets/structure'", ",", "help", "=", "'path to structure images'", ")", "\n", "parser", ".", "add_argument", "(", "'--de_root'", ",", "type", "=", "str", ",", "default", "=", "r'./data/datasets/images'", ",", "help", "=", "'path to detail images (which are the groundtruth)'", ")", "\n", "parser", ".", "add_argument", "(", "'--mask_root'", ",", "type", "=", "str", ",", "default", "=", "r'./data/datasets/mask'", ",", "help", "=", "'path to mask, we use the datasetsets of partial conv hear'", ")", "\n", "parser", ".", "add_argument", "(", "'--batchSize'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'input batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'numbers of the core of CPU'", ")", "\n", "parser", ".", "add_argument", "(", "'--name'", ",", "type", "=", "str", ",", "default", "=", "'Mutual Encoder-Decoder'", ",", "\n", "help", "=", "'name of the experiment. It decides where to store samples and models'", ")", "\n", "parser", ".", "add_argument", "(", "'--fineSize'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'then crop to this size'", ")", "\n", "parser", ".", "add_argument", "(", "'--input_nc'", ",", "type", "=", "int", ",", "default", "=", "6", ",", "help", "=", "'# of input image channels'", ")", "\n", "parser", ".", "add_argument", "(", "'--output_nc'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'# of output image channels'", ")", "\n", "parser", ".", "add_argument", "(", "'--ngf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of gen filters in first conv layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--ndf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of discrim filters in first conv layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_layers_D'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'only used if which_model_netD==n_layers'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_ids'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "help", "=", "'gpu ids: e.g. 0  0,1,2, 0,2'", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'training1'", ",", "help", "=", "'set the names of current training process'", ")", "\n", "parser", ".", "add_argument", "(", "'--nThreads'", ",", "default", "=", "2", ",", "type", "=", "int", ",", "help", "=", "'# threads for loading data'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoints_dir'", ",", "type", "=", "str", ",", "default", "=", "'./checkpoints'", ",", "help", "=", "'models are saved here'", ")", "\n", "parser", ".", "add_argument", "(", "'--norm'", ",", "type", "=", "str", ",", "default", "=", "'instance'", ",", "help", "=", "'instance normalization or batch normalization'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_dropout'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use dropout for the generator'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_type'", ",", "type", "=", "str", ",", "default", "=", "'normal'", ",", "help", "=", "'network initialization [normal|xavier|kaiming|orthogonal]'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--lambda_L1'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'weight on L1 term in objective'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_S'", ",", "type", "=", "int", ",", "default", "=", "250", ",", "help", "=", "'weight on Style loss in objective'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_P'", ",", "type", "=", "int", ",", "default", "=", "0.2", ",", "help", "=", "'weight on Perceptual loss in objective'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_Gan'", ",", "type", "=", "int", ",", "default", "=", "0.2", ",", "help", "=", "'weight on GAN term in objective'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_gain'", ",", "type", "=", "float", ",", "default", "=", "0.02", ",", "help", "=", "'scaling factor for normal, xavier and orthogonal.'", ")", "\n", "self", ".", "initialized", "=", "True", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.options.base_options.BaseOptions.gather_options": [[41, 51], ["base_options.BaseOptions.parse_args", "argparse.ArgumentParser", "base_options.BaseOptions.initialize"], "methods", ["home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.options.base_options.BaseOptions.initialize"], ["", "def", "gather_options", "(", "self", ")", ":", "\n", "# initialize parser with basic options", "\n", "        ", "if", "not", "self", ".", "initialized", ":", "\n", "            ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", "=", "self", ".", "initialize", "(", "parser", ")", "\n", "\n", "\n", "", "self", ".", "parser", "=", "parser", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.options.base_options.BaseOptions.print_options": [[52, 71], ["sorted", "print", "os.path.join", "util.util.util.mkdirs", "os.path.join", "vars().items", "base_options.BaseOptions.parser.get_default", "open", "opt_file.write", "opt_file.write", "str", "str", "vars", "str"], "methods", ["home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.util.util.mkdirs"], ["", "def", "print_options", "(", "self", ",", "opt", ")", ":", "\n", "        ", "message", "=", "''", "\n", "message", "+=", "'----------------- Options ---------------\\n'", "\n", "for", "k", ",", "v", "in", "sorted", "(", "vars", "(", "opt", ")", ".", "items", "(", ")", ")", ":", "\n", "            ", "comment", "=", "''", "\n", "default", "=", "self", ".", "parser", ".", "get_default", "(", "k", ")", "\n", "if", "v", "!=", "default", ":", "\n", "                ", "comment", "=", "'\\t[default: %s]'", "%", "str", "(", "default", ")", "\n", "", "message", "+=", "'{:>25}: {:<30}{}\\n'", ".", "format", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ",", "comment", ")", "\n", "", "message", "+=", "'----------------- End -------------------'", "\n", "print", "(", "message", ")", "\n", "\n", "# save to the disk", "\n", "expr_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ")", "\n", "util", ".", "mkdirs", "(", "expr_dir", ")", "\n", "file_name", "=", "os", ".", "path", ".", "join", "(", "expr_dir", ",", "'opt.txt'", ")", "\n", "with", "open", "(", "file_name", ",", "'wt'", ")", "as", "opt_file", ":", "\n", "            ", "opt_file", ".", "write", "(", "message", ")", "\n", "opt_file", ".", "write", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.options.base_options.BaseOptions.parse": [[72, 93], ["base_options.BaseOptions.gather_options", "base_options.BaseOptions.print_options", "base_options.BaseOptions.gpu_ids.split", "int", "len", "torch.cuda.set_device", "base_options.BaseOptions.gpu_ids.append"], "methods", ["home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.options.base_options.BaseOptions.gather_options", "home.repos.pwc.inspect_result.KumapowerLIU_Rethinking-Inpainting-MEDFE.options.base_options.BaseOptions.print_options"], ["", "", "def", "parse", "(", "self", ")", ":", "\n", "\n", "        ", "opt", "=", "self", ".", "gather_options", "(", ")", "\n", "opt", ".", "isTrain", "=", "self", ".", "isTrain", "# train or test", "\n", "\n", "# process opt.suffix", "\n", "\n", "self", ".", "print_options", "(", "opt", ")", "\n", "\n", "# set gpu ids", "\n", "str_ids", "=", "opt", ".", "gpu_ids", ".", "split", "(", "','", ")", "\n", "opt", ".", "gpu_ids", "=", "[", "]", "\n", "for", "str_id", "in", "str_ids", ":", "\n", "            ", "id", "=", "int", "(", "str_id", ")", "\n", "if", "id", ">=", "0", ":", "\n", "                ", "opt", ".", "gpu_ids", ".", "append", "(", "id", ")", "\n", "", "", "if", "len", "(", "opt", ".", "gpu_ids", ")", ">", "0", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "opt", ".", "gpu_ids", "[", "0", "]", ")", "\n", "\n", "", "self", ".", "opt", "=", "opt", "\n", "return", "self", ".", "opt", "\n", "\n"]]}