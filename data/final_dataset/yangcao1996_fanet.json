{"home.repos.pwc.inspect_result.yangcao1996_fanet.None.setup.get_extensions": [[13, 61], ["os.path.dirname", "os.path.join", "os.path.join", "glob.glob", "os.path.abspath", "os.path.join", "glob.glob", "glob.glob", "os.environ.get", "os.path.join", "extension", "os.path.join", "os.path.join", "torch.cuda.is_available", "os.getenv", "extra_compile_args[].append"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.utils.score.SegmentationMetric.get"], ["def", "get_extensions", "(", ")", ":", "\n", "    ", "this_dir", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "extensions_dir", "=", "os", ".", "path", ".", "join", "(", "this_dir", ",", "\"segmentron\"", ",", "\"modules\"", ",", "\"csrc\"", ")", "\n", "\n", "main_source", "=", "os", ".", "path", ".", "join", "(", "extensions_dir", ",", "\"vision.cpp\"", ")", "\n", "sources", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "extensions_dir", ",", "\"**\"", ",", "\"*.cpp\"", ")", ")", "\n", "source_cuda", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "extensions_dir", ",", "\"**\"", ",", "\"*.cu\"", ")", ")", "+", "glob", ".", "glob", "(", "\n", "os", ".", "path", ".", "join", "(", "extensions_dir", ",", "\"*.cu\"", ")", "\n", ")", "\n", "\n", "sources", "=", "[", "main_source", "]", "+", "sources", "\n", "\n", "extension", "=", "CppExtension", "\n", "\n", "extra_compile_args", "=", "{", "\"cxx\"", ":", "[", "]", "}", "\n", "define_macros", "=", "[", "]", "\n", "\n", "if", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "CUDA_HOME", "is", "not", "None", ")", "or", "os", ".", "getenv", "(", "\"FORCE_CUDA\"", ",", "\"0\"", ")", "==", "\"1\"", ":", "\n", "        ", "extension", "=", "CUDAExtension", "\n", "sources", "+=", "source_cuda", "\n", "define_macros", "+=", "[", "(", "\"WITH_CUDA\"", ",", "None", ")", "]", "\n", "extra_compile_args", "[", "\"nvcc\"", "]", "=", "[", "\n", "\"-DCUDA_HAS_FP16=1\"", ",", "\n", "\"-D__CUDA_NO_HALF_OPERATORS__\"", ",", "\n", "\"-D__CUDA_NO_HALF_CONVERSIONS__\"", ",", "\n", "\"-D__CUDA_NO_HALF2_OPERATORS__\"", ",", "\n", "]", "\n", "\n", "# It's better if pytorch can do this by default ..", "\n", "CC", "=", "os", ".", "environ", ".", "get", "(", "\"CC\"", ",", "None", ")", "\n", "if", "CC", "is", "not", "None", ":", "\n", "            ", "extra_compile_args", "[", "\"nvcc\"", "]", ".", "append", "(", "\"-ccbin={}\"", ".", "format", "(", "CC", ")", ")", "\n", "\n", "", "", "sources", "=", "[", "os", ".", "path", ".", "join", "(", "extensions_dir", ",", "s", ")", "for", "s", "in", "sources", "]", "\n", "\n", "include_dirs", "=", "[", "extensions_dir", "]", "\n", "\n", "ext_modules", "=", "[", "\n", "extension", "(", "\n", "\"segmentron._C\"", ",", "\n", "sources", ",", "\n", "include_dirs", "=", "include_dirs", ",", "\n", "define_macros", "=", "define_macros", ",", "\n", "extra_compile_args", "=", "extra_compile_args", ",", "\n", ")", "\n", "]", "\n", "\n", "return", "ext_modules", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.test.heatmaps.colormap": [[14, 17], ["matplotlib.ListedColormap"], "function", ["None"], ["def", "colormap", "(", ")", ":", "\n", "  ", "cdict", "=", "[", "'#FFFFFF'", ",", "'#9ff113'", ",", "'#5fbb44'", ",", "'#f5f329'", ",", "'#e50b32'", "]", "\n", "return", "colors", ".", "ListedColormap", "(", "cdict", ",", "'indexed'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.test.heatmaps.show": [[18, 47], ["range", "seaborn.set", "pandas.DataFrame", "heatmaps.colormap", "matplotlib.figure", "seaborn.heatmap", "sns.heatmap.set_title", "matplotlib.yticks", "matplotlib.xlabel", "matplotlib.rc", "sns.heatmap.get_figure", "ax.get_figure.savefig", "range"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.test.heatmaps.colormap"], ["", "def", "show", "(", "score", ",", "nums", ",", "base_name", ")", ":", "\n", "    ", "stages", "=", "[", "'1'", ",", "'2'", ",", "'3'", ",", "'4'", "]", "\n", "mods", "=", "[", "'bod'", ",", "'seg'", "]", "\n", "dilation_rates", "=", "[", "\"pooling\"", ",", "\"1x1\"", ",", "\"3x3-6\"", ",", "\"3x3-12\"", ",", "\"3x3-18\"", ",", "\"3x3-24\"", ",", "\"3x3-36\"", "]", "\n", "xy", "=", "[", "dilation_rates", ",", "stages", "]", "\n", "\n", "data", "=", "{", "}", "\n", "mod", "=", "'bod'", "\n", "#     mod = 'seg'", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "tmp", "=", "{", "}", "\n", "for", "j", "in", "range", "(", "7", ")", ":", "\n", "            ", "tmp", "[", "dilation_rates", "[", "j", "]", "]", "=", "score", "[", "'stage'", "+", "stages", "[", "i", "]", "]", "[", "mod", "]", "[", "0", "]", "[", "j", "]", "\n", "", "data", "[", "stages", "[", "i", "]", "]", "=", "tmp", "\n", "\n", "", "sns", ".", "set", "(", "font_scale", "=", "2.3", ")", "\n", "pd_data", "=", "pd", ".", "DataFrame", "(", "data", ")", "\n", "my_cmap", "=", "colormap", "(", ")", "\n", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "10", ",", "9", ")", ")", "\n", "ax", "=", "sns", ".", "heatmap", "(", "pd_data", ",", "cmap", "=", "'YlGnBu'", ",", "annot", "=", "True", ",", "fmt", "=", "\".3f\"", ")", "#\"rainbow\" tab20c YlGnBu", "\n", "#ax.set_title('Boundary')#", "\n", "ax", ".", "set_title", "(", "'Segmentation'", ")", "\n", "plt", ".", "yticks", "(", "rotation", "=", "55", ")", "\n", "plt", ".", "xlabel", "(", "'Stage'", ")", "\n", "#plt.ylabel('Kernel Setting')", "\n", "plt", ".", "rc", "(", "'font'", ",", "family", "=", "'Times New Roman'", ")", "\n", "fig", "=", "ax", ".", "get_figure", "(", ")", "\n", "fig", ".", "savefig", "(", "\"{}_{}.pdf\"", ".", "format", "(", "base_name", ",", "mod", ")", ")", "\n", "#fig.savefig(\"try.pdf\")", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.test.heatmaps.find": [[49, 66], ["enumerate", "heatmaps.show", "numpy.load().item", "numpy.load"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.test.heatmaps.show"], ["", "def", "find", "(", "file_list", ",", "nums", ",", "base_name", ")", ":", "\n", "\n", "#print(file_list)", "\n", "    ", "for", "idx", ",", "i", "in", "enumerate", "(", "file_list", ")", ":", "\n", "        ", "score", "=", "np", ".", "load", "(", "i", ",", "allow_pickle", "=", "True", ")", ".", "item", "(", ")", "\n", "if", "(", "idx", "==", "0", ")", ":", "\n", "            ", "res", "=", "score", "\n", "", "else", ":", "\n", "            ", "for", "stage", "in", "stages", ":", "\n", "                ", "for", "mod", "in", "mods", ":", "\n", "                    ", "res", "[", "stage", "]", "[", "mod", "]", "=", "res", "[", "stage", "]", "[", "mod", "]", "+", "score", "[", "stage", "]", "[", "mod", "]", "\n", "\n", "", "", "", "", "for", "stage", "in", "stages", ":", "\n", "        ", "for", "mod", "in", "mods", ":", "\n", "            ", "res", "[", "stage", "]", "[", "mod", "]", "=", "(", "(", "res", "[", "stage", "]", "[", "mod", "]", "/", "nums", ")", ")", "#.round(3))", "\n", "\n", "", "", "show", "(", "res", ",", "nums", ",", "base_name", ")", "\n", "#print(res)", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.tools.test_translab.Evaluator.__init__": [[34, 84], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torchvision.transforms.Compose", "segmentron.data.dataloader.get_segmentation_dataset", "segmentron.utils.distributed.make_data_sampler", "segmentron.utils.distributed.make_batch_data_sampler", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "logging.info", "segmentron.models.model_zoo.get_segmentation_model().to", "test_translab.Evaluator.model.to", "segmentron.utils.score.SegmentationMetric", "segmentron.utils.score.SegmentationMetric", "segmentron.utils.score.SegmentationMetric", "hasattr", "logging.info", "test_translab.Evaluator.set_batch_norm_attr", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "len", "segmentron.models.model_zoo.get_segmentation_model", "test_translab.Evaluator.model.encoder.named_modules"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.__init__.get_segmentation_dataset", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.make_data_sampler", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.make_batch_data_sampler", "home.repos.pwc.inspect_result.yangcao1996_fanet.other_datasets.predicted.Evaluator.set_batch_norm_attr", "home.repos.pwc.inspect_result.yangcao1996_fanet.models.model_zoo.get_segmentation_model"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "args", ".", "device", ")", "\n", "\n", "# image transform", "\n", "input_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "cfg", ".", "DATASET", ".", "MEAN", ",", "cfg", ".", "DATASET", ".", "STD", ")", ",", "\n", "]", ")", "\n", "\n", "# test dataloader", "\n", "val_dataset", "=", "get_segmentation_dataset", "(", "cfg", ".", "DATASET", ".", "NAME", ",", "\n", "split", "=", "'test'", ",", "\n", "mode", "=", "'val'", ",", "\n", "transform", "=", "input_transform", ",", "\n", "base_size", "=", "cfg", ".", "TRAIN", ".", "BASE_SIZE", ")", "\n", "\n", "\n", "val_sampler", "=", "make_data_sampler", "(", "val_dataset", ",", "shuffle", "=", "False", ",", "distributed", "=", "args", ".", "distributed", ")", "\n", "val_batch_sampler", "=", "make_batch_data_sampler", "(", "val_sampler", ",", "images_per_batch", "=", "cfg", ".", "TEST", ".", "BATCH_SIZE", ",", "drop_last", "=", "False", ")", "\n", "\n", "self", ".", "val_loader", "=", "data", ".", "DataLoader", "(", "dataset", "=", "val_dataset", ",", "\n", "batch_sampler", "=", "val_batch_sampler", ",", "\n", "num_workers", "=", "cfg", ".", "DATASET", ".", "WORKERS", ",", "\n", "pin_memory", "=", "True", ")", "\n", "logging", ".", "info", "(", "'**** number of images: {}. ****'", ".", "format", "(", "len", "(", "self", ".", "val_loader", ")", ")", ")", "\n", "\n", "self", ".", "classes", "=", "val_dataset", ".", "classes", "\n", "# create network", "\n", "self", ".", "model", "=", "get_segmentation_model", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "if", "hasattr", "(", "self", ".", "model", ",", "'encoder'", ")", "and", "cfg", ".", "MODEL", ".", "BN_EPS_FOR_ENCODER", ":", "\n", "                ", "logging", ".", "info", "(", "'set bn custom eps for bn in encoder: {}'", ".", "format", "(", "cfg", ".", "MODEL", ".", "BN_EPS_FOR_ENCODER", ")", ")", "\n", "self", ".", "set_batch_norm_attr", "(", "self", ".", "model", ".", "encoder", ".", "named_modules", "(", ")", ",", "'eps'", ",", "cfg", ".", "MODEL", ".", "BN_EPS_FOR_ENCODER", ")", "\n", "\n", "", "if", "args", ".", "distributed", ":", "\n", "            ", "self", ".", "model", "=", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "self", ".", "model", ",", "\n", "device_ids", "=", "[", "args", ".", "local_rank", "]", ",", "output_device", "=", "args", ".", "local_rank", ",", "find_unused_parameters", "=", "True", ")", "\n", "\n", "", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "num_gpu", "=", "args", ".", "num_gpus", "\n", "\n", "# metric of easy and hard images", "\n", "self", ".", "metric", "=", "SegmentationMetric", "(", "val_dataset", ".", "num_class", ",", "args", ".", "distributed", ",", "num_gpu", ")", "\n", "self", ".", "metric_easy", "=", "SegmentationMetric", "(", "val_dataset", ".", "num_class", ",", "args", ".", "distributed", ",", "num_gpu", ")", "\n", "self", ".", "metric_hard", "=", "SegmentationMetric", "(", "val_dataset", ".", "num_class", ",", "args", ".", "distributed", ",", "num_gpu", ")", "\n", "\n", "# number of easy and hard images", "\n", "self", ".", "count_easy", "=", "0", "\n", "self", ".", "count_hard", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.tools.test_translab.Evaluator.set_batch_norm_attr": [[85, 89], ["isinstance", "isinstance", "setattr"], "methods", ["None"], ["", "def", "set_batch_norm_attr", "(", "self", ",", "named_modules", ",", "attr", ",", "value", ")", ":", "\n", "        ", "for", "m", "in", "named_modules", ":", "\n", "            ", "if", "isinstance", "(", "m", "[", "1", "]", ",", "nn", ".", "BatchNorm2d", ")", "or", "isinstance", "(", "m", "[", "1", "]", ",", "nn", ".", "SyncBatchNorm", ")", ":", "\n", "                ", "setattr", "(", "m", "[", "1", "]", ",", "attr", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.tools.test_translab.Evaluator.eval": [[90, 162], ["test_translab.Evaluator.metric.reset", "test_translab.Evaluator.model.eval", "logging.info", "time.time", "ProgressBar().start", "enumerate", "ProgressBar().start.finish", "segmentron.utils.distributed.synchronize", "test_translab.Evaluator.metric.get", "test_translab.Evaluator.metric_easy.get", "test_translab.Evaluator.metric_hard.get", "logging.info", "logging.info", "logging.info", "logging.info", "enumerate", "logging.info", "logging.info", "Percentage", "Bar", "Timer", "ETA", "FileTransferSpeed", "os.path.exists", "os.makedirs", "image.to.to.to", "target.to.to.to", "boundary.to.to.to", "test_translab.Evaluator.metric.update", "ProgressBar().start.update", "table.append", "len", "ProgressBar", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "test_translab.Evaluator.metric_hard.update", "tabulate.tabulate.tabulate", "model.evaluate", "numpy.save", "model.evaluate", "test_translab.Evaluator.metric_easy.update", "print", "time.time", "os.path.basename", "len"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.utils.score.SegmentationMetric.reset", "home.repos.pwc.inspect_result.yangcao1996_fanet.other_datasets.predicted.Evaluator.eval", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.synchronize", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.score.SegmentationMetric.get", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.score.SegmentationMetric.get", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.score.SegmentationMetric.get", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.filesystem.makedirs", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.score.SegmentationMetric.update", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.score.SegmentationMetric.update", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.score.SegmentationMetric.update", "home.repos.pwc.inspect_result.yangcao1996_fanet.models.translab.TransLab.evaluate", "home.repos.pwc.inspect_result.yangcao1996_fanet.models.translab.TransLab.evaluate", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.score.SegmentationMetric.update"], ["", "", "", "def", "eval", "(", "self", ",", "show_scores", "=", "False", ")", ":", "\n", "        ", "self", ".", "metric", ".", "reset", "(", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "if", "self", ".", "args", ".", "distributed", ":", "\n", "            ", "model", "=", "self", ".", "model", ".", "module", "\n", "", "else", ":", "\n", "            ", "model", "=", "self", ".", "model", "\n", "\n", "", "logging", ".", "info", "(", "\"Start validation, Total sample: {:d}\"", ".", "format", "(", "len", "(", "self", ".", "val_loader", ")", ")", ")", "\n", "import", "time", "\n", "time_start", "=", "time", ".", "time", "(", ")", "\n", "widgets", "=", "[", "'Inference: '", ",", "Percentage", "(", ")", ",", "' '", ",", "Bar", "(", "'#'", ")", ",", "' '", ",", "Timer", "(", ")", ",", "\n", "' '", ",", "ETA", "(", ")", ",", "' '", ",", "FileTransferSpeed", "(", ")", "]", "\n", "pbar", "=", "ProgressBar", "(", "widgets", "=", "widgets", ",", "maxval", "=", "10", "*", "len", "(", "self", ".", "val_loader", ")", ")", ".", "start", "(", ")", "\n", "\n", "scores_dir", "=", "root_path", "+", "'/demo/test/scores/'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "scores_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "scores_dir", ")", "\n", "\n", "", "for", "i", ",", "(", "image", ",", "target", ",", "boundary", ",", "filename", ",", "_", ",", "_", ")", "in", "enumerate", "(", "self", ".", "val_loader", ")", ":", "\n", "            ", "image", "=", "image", ".", "to", "(", "self", ".", "device", ")", "\n", "target", "=", "target", ".", "to", "(", "self", ".", "device", ")", "\n", "boundary", "=", "boundary", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "filename", "=", "filename", "[", "0", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "if", "(", "show_scores", ")", ":", "\n", "# if you need to save the score in AdaptiveASPP", "\n", "                    ", "output", "=", "model", ".", "evaluate", "(", "image", ",", "show_scores", "=", "True", ")", "\n", "middle_scores", "=", "output", "[", "2", "]", "\n", "basename", "=", "os", ".", "path", ".", "basename", "(", "filename", "[", ":", "-", "3", "]", ")", "+", "'npy'", "\n", "np", ".", "save", "(", "scores_dir", "+", "basename", ",", "middle_scores", ")", "\n", "", "else", ":", "\n", "                    ", "output", ",", "middle_scores", "=", "model", ".", "evaluate", "(", "image", ")", "\n", "\n", "", "", "if", "'hard'", "in", "filename", ":", "\n", "                ", "self", ".", "metric_hard", ".", "update", "(", "output", ",", "target", ")", "\n", "self", ".", "count_hard", "+=", "1", "\n", "", "elif", "'easy'", "in", "filename", ":", "\n", "                ", "self", ".", "metric_easy", ".", "update", "(", "output", ",", "target", ")", "\n", "self", ".", "count_easy", "+=", "1", "\n", "", "else", ":", "\n", "                ", "print", "(", "filename", ")", "\n", "continue", "\n", "\n", "", "tmp_iou", "=", "self", ".", "metric", ".", "update", "(", "output", ",", "target", ")", "\n", "pbar", ".", "update", "(", "10", "*", "i", "+", "1", ")", "\n", "\n", "", "pbar", ".", "finish", "(", ")", "\n", "synchronize", "(", ")", "\n", "pixAcc", ",", "mIoU", ",", "category_iou", ",", "mae", ",", "mBer", ",", "category_Ber", "=", "self", ".", "metric", ".", "get", "(", "return_category_iou", "=", "True", ")", "\n", "pixAcc_e", ",", "mIoU_e", ",", "category_iou_e", ",", "mae_e", ",", "mBer_e", ",", "category_Ber_e", "=", "self", ".", "metric_easy", ".", "get", "(", "return_category_iou", "=", "True", ")", "\n", "pixAcc_h", ",", "mIoU_h", ",", "category_iou_h", ",", "mae_h", ",", "mBer_h", ",", "category_Ber_h", "=", "self", ".", "metric_hard", ".", "get", "(", "return_category_iou", "=", "True", ")", "\n", "\n", "logging", ".", "info", "(", "'Eval use time: {:.3f} second'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "time_start", ")", ")", "\n", "logging", ".", "info", "(", "'End validation pixAcc: {:.2f}, mIoU: {:.2f}, mae: {:.3f}, mBer: {:.2f}'", ".", "format", "(", "\n", "pixAcc", "*", "100", ",", "mIoU", "*", "100", ",", "mae", ",", "mBer", ")", ")", "\n", "logging", ".", "info", "(", "'End validation easy pixAcc: {:.2f}, mIoU: {:.2f}, mae: {:.3f}, mBer: {:.2f}'", ".", "format", "(", "\n", "pixAcc_e", "*", "100", ",", "mIoU_e", "*", "100", ",", "mae_e", ",", "mBer_e", ")", ")", "\n", "logging", ".", "info", "(", "'End validation hard pixAcc: {:.2f}, mIoU: {:.2f}, mae: {:.3f}, mBer: {:.2f}'", ".", "format", "(", "\n", "pixAcc_h", "*", "100", ",", "mIoU_h", "*", "100", ",", "mae_h", ",", "mBer_h", ")", ")", "\n", "\n", "headers", "=", "[", "'class id'", ",", "'class name'", ",", "'iou'", ",", "'iou_easy'", ",", "'iou_hard'", ",", "'ber'", ",", "'ber_easy'", ",", "'ber_hard'", "]", "\n", "table", "=", "[", "]", "\n", "for", "i", ",", "cls_name", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "            ", "table", ".", "append", "(", "[", "\n", "cls_name", ",", "category_iou", "[", "i", "]", ",", "category_iou_e", "[", "i", "]", ",", "category_iou_h", "[", "i", "]", ",", "\n", "category_Ber", "[", "i", "]", ",", "category_Ber_e", "[", "i", "]", ",", "category_Ber_h", "[", "i", "]", "\n", "]", ")", "\n", "", "logging", ".", "info", "(", "'Category iou: \\n {}'", ".", "format", "(", "tabulate", "(", "table", ",", "headers", ",", "tablefmt", "=", "'grid'", ",", "showindex", "=", "\"always\"", ",", "\n", "numalign", "=", "'center'", ",", "stralign", "=", "'center'", ")", ")", ")", "\n", "logging", ".", "info", "(", "'easy images: {}, hard images: {}'", ".", "format", "(", "self", ".", "count_easy", ",", "self", ".", "count_hard", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.tools.train.Trainer.__init__": [[38, 132], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torchvision.transforms.Compose", "segmentron.data.dataloader.get_segmentation_dataset", "make_data_sampler", "make_batch_data_sampler", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "segmentron.models.model_zoo.get_segmentation_model().to", "segmentron.solver.loss.get_segmentation_loss().to", "segmentron.solver.loss.get_segmentation_loss().to", "segmentron.solver.optimizer.get_optimizer", "segmentron.solver.lr_scheduler.get_scheduler", "len", "logging.info", "os.path.isdir", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "segmentron.models.model_zoo.get_segmentation_model", "get_rank", "segmentron.utils.visualize.show_flops_params", "torch.SyncBatchNorm.convert_sync_batchnorm", "torch.SyncBatchNorm.convert_sync_batchnorm", "torch.SyncBatchNorm.convert_sync_batchnorm", "torch.SyncBatchNorm.convert_sync_batchnorm", "logging.info", "logging.info", "segmentron.solver.loss.get_segmentation_loss", "segmentron.solver.loss.get_segmentation_loss", "glob.glob", "os.path.isfile", "logging.info", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "train.Trainer.model.load_state_dict", "logging.info", "logging.warning", "os.path.join", "len", "os.path.getmtime", "os.path.splitext", "logging.info", "train.Trainer.optimizer.load_state_dict", "train.Trainer.lr_scheduler.load_state_dict", "os.path.getmtime", "os.path.getmtime"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.__init__.get_segmentation_dataset", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.make_data_sampler", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.make_batch_data_sampler", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.optimizer.get_optimizer", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.get_scheduler", "home.repos.pwc.inspect_result.yangcao1996_fanet.models.model_zoo.get_segmentation_model", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.get_rank", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.visualize.show_flops_params", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.get_segmentation_loss", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.get_segmentation_loss"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "args", ".", "device", ")", "\n", "\n", "# image transform", "\n", "input_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "cfg", ".", "DATASET", ".", "MEAN", ",", "cfg", ".", "DATASET", ".", "STD", ")", ",", "\n", "]", ")", "\n", "self", ".", "input_transform", "=", "input_transform", "\n", "\n", "# dataset and dataloader", "\n", "data_kwargs", "=", "{", "'transform'", ":", "input_transform", ",", "'base_size'", ":", "cfg", ".", "TRAIN", ".", "BASE_SIZE", ",", "\n", "'crop_size'", ":", "cfg", ".", "TRAIN", ".", "CROP_SIZE", "}", "\n", "train_dataset", "=", "get_segmentation_dataset", "(", "cfg", ".", "DATASET", ".", "NAME", ",", "split", "=", "'train'", ",", "mode", "=", "'train'", ",", "**", "data_kwargs", ")", "\n", "\n", "self", ".", "iters_per_epoch", "=", "len", "(", "train_dataset", ")", "//", "(", "args", ".", "num_gpus", "*", "cfg", ".", "TRAIN", ".", "BATCH_SIZE", ")", "\n", "self", ".", "max_iters", "=", "cfg", ".", "TRAIN", ".", "EPOCHS", "*", "self", ".", "iters_per_epoch", "\n", "\n", "train_sampler", "=", "make_data_sampler", "(", "train_dataset", ",", "shuffle", "=", "True", ",", "distributed", "=", "args", ".", "distributed", ")", "\n", "train_batch_sampler", "=", "make_batch_data_sampler", "(", "train_sampler", ",", "cfg", ".", "TRAIN", ".", "BATCH_SIZE", ",", "self", ".", "max_iters", ",", "drop_last", "=", "True", ")", "\n", "\n", "self", ".", "train_loader", "=", "data", ".", "DataLoader", "(", "dataset", "=", "train_dataset", ",", "\n", "batch_sampler", "=", "train_batch_sampler", ",", "\n", "collate_fn", "=", "self", ".", "collate_fn", ",", "\n", "num_workers", "=", "cfg", ".", "DATASET", ".", "WORKERS", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "# create network", "\n", "self", ".", "model", "=", "get_segmentation_model", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# print params and flops", "\n", "if", "args", ".", "num_gpus", "==", "1", "and", "get_rank", "(", ")", "==", "0", ":", "\n", "            ", "try", ":", "\n", "                ", "show_flops_params", "(", "self", ".", "model", ",", "args", ".", "device", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "logging", ".", "warning", "(", "'get flops and params error: {}'", ".", "format", "(", "e", ")", ")", "\n", "\n", "", "", "if", "cfg", ".", "MODEL", ".", "BN_TYPE", "not", "in", "[", "'BN'", "]", ":", "\n", "            ", "logging", ".", "info", "(", "'Batch norm type is {}, convert_sync_batchnorm is not effective'", ".", "format", "(", "cfg", ".", "MODEL", ".", "BN_TYPE", ")", ")", "\n", "", "elif", "args", ".", "distributed", "and", "cfg", ".", "TRAIN", ".", "SYNC_BATCH_NORM", ":", "\n", "            ", "self", ".", "model", "=", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "self", ".", "model", ")", "\n", "logging", ".", "info", "(", "'SyncBatchNorm is effective!'", ")", "\n", "", "else", ":", "\n", "            ", "logging", ".", "info", "(", "'Not use SyncBatchNorm!'", ")", "\n", "\n", "# create criterion", "\n", "", "self", ".", "criterion", "=", "get_segmentation_loss", "(", "cfg", ".", "MODEL", ".", "MODEL_NAME", ",", "use_ohem", "=", "cfg", ".", "SOLVER", ".", "OHEM", ",", "\n", "aux", "=", "cfg", ".", "SOLVER", ".", "AUX", ",", "aux_weight", "=", "cfg", ".", "SOLVER", ".", "AUX_WEIGHT", ",", "\n", "ignore_index", "=", "cfg", ".", "DATASET", ".", "IGNORE_INDEX", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "cfg", ".", "SOLVER", ".", "LOSS_NAME", "=", "'dice'", "\n", "self", ".", "criterion_b", "=", "get_segmentation_loss", "(", "cfg", ".", "MODEL", ".", "MODEL_NAME", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# optimizer, for model just includes encoder, decoder(head and auxlayer).", "\n", "self", ".", "optimizer", "=", "get_optimizer", "(", "self", ".", "model", ")", "\n", "\n", "# lr scheduling", "\n", "self", ".", "lr_scheduler", "=", "get_scheduler", "(", "self", ".", "optimizer", ",", "max_iters", "=", "self", ".", "max_iters", ",", "\n", "iters_per_epoch", "=", "self", ".", "iters_per_epoch", ")", "\n", "\n", "# resume checkpoint if needed", "\n", "self", ".", "start_epoch", "=", "0", "\n", "if", "args", ".", "resume", "is", "not", "None", ":", "\n", "            ", "loaded_path", "=", "None", "\n", "if", "os", ".", "path", ".", "isdir", "(", "args", ".", "resume", ")", ":", "\n", "                ", "resume_paths", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "args", ".", "resume", ",", "\"*.pth\"", ")", ")", "\n", "if", "len", "(", "resume_paths", ")", ">", "0", ":", "\n", "                    ", "loaded_path", "=", "resume_paths", "[", "0", "]", "\n", "mtime", "=", "os", ".", "path", ".", "getmtime", "(", "loaded_path", ")", "\n", "for", "resume_path", "in", "resume_paths", "[", "1", ":", "]", ":", "\n", "                        ", "if", "os", ".", "path", ".", "getmtime", "(", "resume_path", ")", ">", "mtime", ":", "\n", "                            ", "loaded_path", "=", "resume_path", "\n", "mtime", "=", "os", ".", "path", ".", "getmtime", "(", "loaded_path", ")", "\n", "", "", "", "", "elif", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "                ", "name", ",", "ext", "=", "os", ".", "path", ".", "splitext", "(", "args", ".", "resume", ")", "\n", "assert", "ext", "==", "'.pkl'", "or", "'.pth'", ",", "'Sorry only .pth and .pkl files supported.'", "\n", "loaded_path", "=", "args", ".", "resume", "\n", "\n", "", "if", "loaded_path", "is", "not", "None", ":", "\n", "                ", "logging", ".", "info", "(", "'Resuming training, loading {}...'", ".", "format", "(", "loaded_path", ")", ")", "\n", "resume_sate", "=", "torch", ".", "load", "(", "loaded_path", ")", "\n", "self", ".", "model", ".", "load_state_dict", "(", "resume_sate", "[", "'state_dict'", "]", ")", "\n", "self", ".", "start_epoch", "=", "resume_sate", "[", "'epoch'", "]", "\n", "logging", ".", "info", "(", "'resume train from epoch: {}'", ".", "format", "(", "self", ".", "start_epoch", ")", ")", "\n", "if", "resume_sate", "[", "'optimizer'", "]", "is", "not", "None", "and", "resume_sate", "[", "'lr_scheduler'", "]", "is", "not", "None", ":", "\n", "                    ", "logging", ".", "info", "(", "'resume optimizer and lr scheduler from resume state..'", ")", "\n", "self", ".", "optimizer", ".", "load_state_dict", "(", "resume_sate", "[", "'optimizer'", "]", ")", "\n", "self", ".", "lr_scheduler", ".", "load_state_dict", "(", "resume_sate", "[", "'lr_scheduler'", "]", ")", "\n", "\n", "", "", "", "if", "args", ".", "distributed", ":", "\n", "            ", "self", ".", "model", "=", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "self", ".", "model", ",", "device_ids", "=", "[", "args", ".", "local_rank", "]", ",", "\n", "output_device", "=", "args", ".", "local_rank", ",", "\n", "find_unused_parameters", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.tools.train.Trainer.collate_fn": [[134, 154], ["len", "zip", "list", "enumerate", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "train.Trainer.input_transform", "random.randint", "range", "random.randint"], "methods", ["None"], ["", "", "def", "collate_fn", "(", "self", ",", "batch", ")", ":", "\n", "        ", "'''\n        put fake boundaries cross images in a batch\n        '''", "\n", "bsize", "=", "len", "(", "batch", ")", "\n", "imgs", ",", "masks", ",", "bods", ",", "nams", ",", "bod_moves", ",", "bod_move_contents", "=", "zip", "(", "*", "batch", ")", "\n", "imgs", "=", "list", "(", "imgs", ")", "\n", "\n", "for", "idx", ",", "img", "in", "enumerate", "(", "imgs", ")", ":", "\n", "            ", "if", "(", "random", ".", "randint", "(", "0", ",", "1", ")", "==", "1", ")", ":", "\n", "                ", "for", "tims", "in", "range", "(", "cfg", ".", "TRAIN", ".", "FAKE_BOUNDARY_COUNT", ")", ":", "\n", "                    ", "fake_id", "=", "random", ".", "randint", "(", "0", ",", "bsize", "-", "1", ")", "\n", "img", "=", "img", "*", "(", "1", "-", "bod_moves", "[", "fake_id", "]", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ")", "+", "bod_move_contents", "[", "fake_id", "]", "\n", "imgs", "[", "idx", "]", "=", "img", "\n", "", "", "imgs", "[", "idx", "]", "=", "self", ".", "input_transform", "(", "imgs", "[", "idx", "]", ")", "\n", "\n", "", "imgs", "=", "torch", ".", "stack", "(", "imgs", ",", "dim", "=", "0", ")", "\n", "masks", "=", "torch", ".", "stack", "(", "masks", ",", "dim", "=", "0", ")", "\n", "bods", "=", "torch", ".", "stack", "(", "bods", ",", "dim", "=", "0", ")", "\n", "return", "imgs", ",", "masks", ",", "bods", ",", "nams", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.tools.train.Trainer.train": [[156, 222], ["time.time", "logging.info", "train.Trainer.model.train", "str", "logging.info", "get_rank", "images.to.to.to", "targets.to.to.to", "boundary.to", "train.Trainer.model", "train.Trainer.criterion", "boundarys.float.float.float", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "train.Trainer.criterion_b", "reduce_loss_dict", "sum", "reduce_loss_dict", "sum", "train.Trainer.optimizer.zero_grad", "losses.backward", "train.Trainer.optimizer.step", "train.Trainer.lr_scheduler.step", "str", "time.time", "datetime.timedelta", "sum", "sum", "datetime.timedelta", "logging.info", "segmentron.utils.filesystem.save_checkpoint", "reduce_loss_dict.values", "reduce_loss_dict.values", "time.time", "int", "sum.item", "sum.item", "str", "train.Trainer.values", "train.Trainer.values", "datetime.timedelta", "int", "time.time"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.tools.train.Trainer.train", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.get_rank", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.reduce_loss_dict", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.reduce_loss_dict", "home.repos.pwc.inspect_result.yangcao1996_fanet.modules.cc_attention._CAMap.backward", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.filesystem.save_checkpoint"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "self", ".", "save_to_disk", "=", "get_rank", "(", ")", "==", "0", "\n", "epochs", ",", "max_iters", ",", "iters_per_epoch", "=", "cfg", ".", "TRAIN", ".", "EPOCHS", ",", "self", ".", "max_iters", ",", "self", ".", "iters_per_epoch", "\n", "log_per_iters", ",", "val_per_iters", "=", "self", ".", "args", ".", "log_iter", ",", "self", ".", "args", ".", "val_epoch", "*", "self", ".", "iters_per_epoch", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "logging", ".", "info", "(", "'Start training, Total Epochs: {:d} = Total Iterations {:d}'", ".", "format", "(", "epochs", ",", "max_iters", ")", ")", "\n", "\n", "# train the model", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "iteration", "=", "self", ".", "start_epoch", "*", "iters_per_epoch", "if", "self", ".", "start_epoch", ">", "0", "else", "0", "\n", "for", "(", "images", ",", "targets", ",", "boundary", ",", "filenames", ")", "in", "self", ".", "train_loader", ":", "\n", "            ", "epoch", "=", "iteration", "//", "iters_per_epoch", "+", "1", "\n", "iteration", "+=", "1", "\n", "\n", "# put data on the device", "\n", "images", "=", "images", ".", "to", "(", "self", ".", "device", ")", "\n", "targets", "=", "targets", ".", "to", "(", "self", ".", "device", ")", "\n", "boundarys", "=", "boundary", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# forward", "\n", "outputs", ",", "outputs_boundary", "=", "self", ".", "model", "(", "images", ")", "\n", "\n", "loss_dict", "=", "self", ".", "criterion", "(", "outputs", ",", "targets", ")", "\n", "boundarys", "=", "boundarys", ".", "float", "(", ")", "\n", "valid", "=", "torch", ".", "ones_like", "(", "boundarys", ")", "\n", "lossb_dict", "=", "self", ".", "criterion_b", "(", "outputs_boundary", "[", "0", "]", ",", "boundarys", ",", "valid", ")", "\n", "\n", "weight_boundary", "=", "cfg", ".", "TRAIN", ".", "BLOSS_WEIGHT", "\n", "lossb_dict", "[", "'loss'", "]", "=", "weight_boundary", "*", "lossb_dict", "[", "'loss'", "]", "\n", "losses", "=", "sum", "(", "loss", "for", "loss", "in", "loss_dict", ".", "values", "(", ")", ")", "+", "sum", "(", "loss", "for", "loss", "in", "lossb_dict", ".", "values", "(", ")", ")", "\n", "\n", "# reduce losses over all GPUs for logging purposes", "\n", "loss_dict_reduced", "=", "reduce_loss_dict", "(", "loss_dict", ")", "\n", "losses_reduced", "=", "sum", "(", "loss", "for", "loss", "in", "loss_dict_reduced", ".", "values", "(", ")", ")", "\n", "\n", "lossb_dict_reduced", "=", "reduce_loss_dict", "(", "lossb_dict", ")", "\n", "lossesb_reduced", "=", "sum", "(", "loss", "for", "loss", "in", "lossb_dict_reduced", ".", "values", "(", ")", ")", "\n", "\n", "# backward and optimize", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "losses", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "eta_seconds", "=", "(", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "/", "iteration", ")", "*", "(", "max_iters", "-", "iteration", ")", "\n", "eta_string", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "eta_seconds", ")", ")", ")", "\n", "\n", "if", "iteration", "%", "log_per_iters", "==", "0", "and", "self", ".", "save_to_disk", ":", "\n", "                ", "logging", ".", "info", "(", "\n", "\"Epoch: {:d}/{:d} || Iters: {:d}/{:d} || Lr: {:.6f} || \"", "\n", "\"Loss: {:.4f} || Loss_b: {:.4f} || Cost Time: {} || Estimated Time: {}\"", ".", "format", "(", "\n", "epoch", ",", "epochs", ",", "iteration", "%", "iters_per_epoch", ",", "iters_per_epoch", ",", "\n", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "losses_reduced", ".", "item", "(", ")", ",", "lossesb_reduced", ".", "item", "(", ")", ",", "\n", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", ")", ",", "\n", "eta_string", ")", ")", "\n", "\n", "", "if", "iteration", "%", "self", ".", "iters_per_epoch", "==", "0", "and", "self", ".", "save_to_disk", ":", "\n", "                ", "save_checkpoint", "(", "self", ".", "model", ",", "epoch", ",", "self", ".", "optimizer", ",", "self", ".", "lr_scheduler", ",", "is_best", "=", "False", ")", "\n", "\n", "", "", "total_training_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "total_training_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "total_training_time", ")", ")", "\n", "logging", ".", "info", "(", "\n", "\"Total training time: {} ({:.4f}s / it)\"", ".", "format", "(", "\n", "total_training_str", ",", "total_training_time", "/", "max_iters", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.tools.test_demo.Evaluator.__init__": [[32, 72], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torchvision.transforms.Compose", "segmentron.data.dataloader.get_segmentation_dataset", "segmentron.utils.distributed.make_data_sampler", "segmentron.utils.distributed.make_batch_data_sampler", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "segmentron.models.model_zoo.get_segmentation_model().to", "test_demo.Evaluator.model.to", "hasattr", "logging.info", "test_demo.Evaluator.set_batch_norm_attr", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "segmentron.models.model_zoo.get_segmentation_model", "test_demo.Evaluator.model.encoder.named_modules"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.__init__.get_segmentation_dataset", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.make_data_sampler", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.make_batch_data_sampler", "home.repos.pwc.inspect_result.yangcao1996_fanet.other_datasets.predicted.Evaluator.set_batch_norm_attr", "home.repos.pwc.inspect_result.yangcao1996_fanet.models.model_zoo.get_segmentation_model"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "args", ".", "device", ")", "\n", "\n", "# image transform", "\n", "input_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "cfg", ".", "DATASET", ".", "MEAN", ",", "cfg", ".", "DATASET", ".", "STD", ")", ",", "\n", "]", ")", "\n", "\n", "# dataset and dataloader", "\n", "val_dataset", "=", "get_segmentation_dataset", "(", "cfg", ".", "DATASET", ".", "NAME", ",", "\n", "root", "=", "cfg", ".", "DEMO_DIR", ",", "\n", "split", "=", "'val'", ",", "\n", "mode", "=", "'val'", ",", "\n", "transform", "=", "input_transform", ",", "\n", "base_size", "=", "cfg", ".", "TRAIN", ".", "BASE_SIZE", ")", "\n", "\n", "val_sampler", "=", "make_data_sampler", "(", "val_dataset", ",", "shuffle", "=", "False", ",", "distributed", "=", "args", ".", "distributed", ")", "\n", "val_batch_sampler", "=", "make_batch_data_sampler", "(", "val_sampler", ",", "images_per_batch", "=", "cfg", ".", "TEST", ".", "BATCH_SIZE", ",", "drop_last", "=", "False", ")", "\n", "\n", "self", ".", "val_loader", "=", "data", ".", "DataLoader", "(", "dataset", "=", "val_dataset", ",", "\n", "batch_sampler", "=", "val_batch_sampler", ",", "\n", "num_workers", "=", "cfg", ".", "DATASET", ".", "WORKERS", ",", "\n", "pin_memory", "=", "True", ")", "\n", "self", ".", "classes", "=", "val_dataset", ".", "classes", "\n", "# create network", "\n", "self", ".", "model", "=", "get_segmentation_model", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "if", "hasattr", "(", "self", ".", "model", ",", "'encoder'", ")", "and", "cfg", ".", "MODEL", ".", "BN_EPS_FOR_ENCODER", ":", "\n", "                ", "logging", ".", "info", "(", "'set bn custom eps for bn in encoder: {}'", ".", "format", "(", "cfg", ".", "MODEL", ".", "BN_EPS_FOR_ENCODER", ")", ")", "\n", "self", ".", "set_batch_norm_attr", "(", "self", ".", "model", ".", "encoder", ".", "named_modules", "(", ")", ",", "'eps'", ",", "cfg", ".", "MODEL", ".", "BN_EPS_FOR_ENCODER", ")", "\n", "\n", "", "if", "args", ".", "distributed", ":", "\n", "            ", "self", ".", "model", "=", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "self", ".", "model", ",", "\n", "device_ids", "=", "[", "args", ".", "local_rank", "]", ",", "output_device", "=", "args", ".", "local_rank", ",", "find_unused_parameters", "=", "True", ")", "\n", "\n", "", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "count_easy", "=", "0", "\n", "self", ".", "count_hard", "=", "0", "\n", "", "def", "set_batch_norm_attr", "(", "self", ",", "named_modules", ",", "attr", ",", "value", ")", ":", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.tools.test_demo.Evaluator.set_batch_norm_attr": [[72, 76], ["isinstance", "isinstance", "setattr"], "methods", ["None"], ["", "def", "set_batch_norm_attr", "(", "self", ",", "named_modules", ",", "attr", ",", "value", ")", ":", "\n", "        ", "for", "m", "in", "named_modules", ":", "\n", "            ", "if", "isinstance", "(", "m", "[", "1", "]", ",", "nn", ".", "BatchNorm2d", ")", "or", "isinstance", "(", "m", "[", "1", "]", ",", "nn", ".", "SyncBatchNorm", ")", ":", "\n", "                ", "setattr", "(", "m", "[", "1", "]", ",", "attr", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.tools.test_demo.Evaluator.eval": [[77, 131], ["test_demo.Evaluator.model.eval", "enumerate", "image.to.to.to", "os.path.basename().replace().replace", "os.path.join", "cv2.imread", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "cv2.resize", "cv2.resize", "segmentron.utils.filesystem.makedirs", "cv2.imwrite", "cv2.imwrite", "print", "os.path.basename().replace", "model.evaluate", "model.evaluate", "[].data.cpu().numpy().astype", "output_boundary[].data.cpu().numpy().astype", "os.path.join", "os.path.join", "os.path.join", "segmentron.config.cfg.DEMO_DIR.split", "[].cpu().numpy", "numpy.mean", "numpy.max", "cv2.resize", "cv2.resize", "matplotlib.imsave", "os.path.basename", "os.path.join", "[].data.cpu().numpy", "output_boundary[].data.cpu().numpy", "[].cpu", "numpy.min", "numpy.max", "numpy.min", "numpy.min", "numpy.max", "numpy.min", "[].data.cpu", "output_boundary[].data.cpu", "output.argmax"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.other_datasets.predicted.Evaluator.eval", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.filesystem.makedirs", "home.repos.pwc.inspect_result.yangcao1996_fanet.models.translab.TransLab.evaluate", "home.repos.pwc.inspect_result.yangcao1996_fanet.models.translab.TransLab.evaluate", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean"], ["", "", "", "def", "eval", "(", "self", ",", "show_middle", "=", "False", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "if", "self", ".", "args", ".", "distributed", ":", "\n", "            ", "model", "=", "self", ".", "model", ".", "module", "\n", "", "else", ":", "\n", "            ", "model", "=", "self", ".", "model", "\n", "\n", "", "for", "i", ",", "(", "image", ",", "_", ",", "filename", ")", "in", "enumerate", "(", "self", ".", "val_loader", ")", ":", "\n", "            ", "image", "=", "image", ".", "to", "(", "self", ".", "device", ")", "\n", "filename", "=", "filename", "[", "0", "]", "\n", "save_name", "=", "os", ".", "path", ".", "basename", "(", "filename", ")", ".", "replace", "(", "'.jpg'", ",", "''", ")", ".", "replace", "(", "'.png'", ",", "''", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "'/'", ".", "join", "(", "cfg", ".", "DEMO_DIR", ".", "split", "(", "'/'", ")", "[", ":", "-", "2", "]", ")", ",", "'result'", ")", "\n", "\n", "ori_img", "=", "cv2", ".", "imread", "(", "filename", ")", "\n", "h", ",", "w", ",", "_", "=", "ori_img", ".", "shape", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "if", "(", "show_middle", ")", ":", "\n", "# if you need to visualize the middle features.", "\n", "                    ", "output", ",", "output_boundary", ",", "middle_before_aspp", ",", "middle_after_aspp", ",", "middle_fusion", "=", "model", ".", "evaluate", "(", "image", ",", "show_middle", "=", "True", ")", "\n", "\n", "stage_id", "=", "0", "\n", "middle_res", "=", "{", "'fusion_s'", ":", "middle_fusion", "[", "stage_id", "]", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "}", "\n", "#{'before_aspp': middle_before_aspp[stage_id].cpu().numpy(),", "\n", "#     'after_aspp_s': middle_after_aspp[stage_id][0].cpu().numpy(),", "\n", "#     'fusion_s': middle_fusion[stage_id][0].cpu().numpy(),", "\n", "#     'after_aspp_b': middle_after_aspp[stage_id][1].cpu().numpy(),", "\n", "#     'fusion_b': middle_fusion[stage_id][1].cpu().numpy()}", "\n", "\n", "for", "m_name", "in", "middle_res", ":", "\n", "                        ", "m_features", "=", "middle_res", "[", "m_name", "]", "[", "0", "]", "\n", "mean_m_features", "=", "np", ".", "mean", "(", "m_features", ",", "0", ",", "keepdims", "=", "False", ")", "\n", "mean_m_features", "=", "(", "mean_m_features", "-", "np", ".", "min", "(", "mean_m_features", ")", ")", "/", "(", "np", ".", "max", "(", "mean_m_features", ")", "-", "np", ".", "min", "(", "mean_m_features", ")", ")", "*", "255.0", "\n", "max_m_features", "=", "np", ".", "max", "(", "m_features", ",", "0", ",", "keepdims", "=", "False", ")", "\n", "max_m_features", "=", "(", "max_m_features", "-", "np", ".", "min", "(", "max_m_features", ")", ")", "/", "(", "np", ".", "max", "(", "max_m_features", ")", "-", "np", ".", "min", "(", "max_m_features", ")", ")", "*", "255.0", "\n", "\n", "mean_m_features", "=", "cv2", ".", "resize", "(", "mean_m_features", ",", "(", "w", ",", "h", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "max_m_features", "=", "cv2", ".", "resize", "(", "max_m_features", ",", "(", "w", ",", "h", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "\n", "plt", ".", "imsave", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'{}_stage{}_max_{}.png'", ".", "format", "(", "save_name", ",", "stage_id", ",", "m_name", ")", ")", ",", "max_m_features", ",", "cmap", "=", "plt", ".", "cm", ".", "viridis", ")", "\n", "\n", "", "", "else", ":", "\n", "                    ", "output", ",", "output_boundary", "=", "model", ".", "evaluate", "(", "image", ")", "\n", "\n", "# save the result", "\n", "", "glass_res", "=", "output", ".", "argmax", "(", "1", ")", "[", "0", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "'uint8'", ")", "*", "127", "\n", "boundary_res", "=", "output_boundary", "[", "0", ",", "0", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "'uint8'", ")", "*", "255", "\n", "glass_res", "=", "cv2", ".", "resize", "(", "glass_res", ",", "(", "w", ",", "h", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "boundary_res", "=", "cv2", ".", "resize", "(", "boundary_res", ",", "(", "w", ",", "h", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "\n", "makedirs", "(", "save_path", ")", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'{}_glass.png'", ".", "format", "(", "save_name", ")", ")", ",", "glass_res", ")", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'{}_boundary.png'", ".", "format", "(", "save_name", ")", ")", ",", "boundary_res", ")", "\n", "print", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'{}_glass.png'", ".", "format", "(", "save_name", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.other_datasets.predicted.Evaluator.__init__": [[31, 71], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torchvision.transforms.Compose", "segmentron.data.dataloader.get_segmentation_dataset", "segmentron.utils.distributed.make_data_sampler", "segmentron.utils.distributed.make_batch_data_sampler", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "logging.info", "segmentron.models.model_zoo.get_segmentation_model().to", "predicted.Evaluator.model.to", "hasattr", "logging.info", "predicted.Evaluator.set_batch_norm_attr", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "len", "segmentron.models.model_zoo.get_segmentation_model", "predicted.Evaluator.model.encoder.named_modules"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.__init__.get_segmentation_dataset", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.make_data_sampler", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.make_batch_data_sampler", "home.repos.pwc.inspect_result.yangcao1996_fanet.other_datasets.predicted.Evaluator.set_batch_norm_attr", "home.repos.pwc.inspect_result.yangcao1996_fanet.models.model_zoo.get_segmentation_model"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "args", ".", "device", ")", "\n", "\n", "# image transform", "\n", "input_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "cfg", ".", "DATASET", ".", "MEAN", ",", "cfg", ".", "DATASET", ".", "STD", ")", ",", "\n", "]", ")", "\n", "\n", "# test dataloader", "\n", "val_dataset", "=", "get_segmentation_dataset", "(", "cfg", ".", "DATASET", ".", "NAME", ",", "\n", "split", "=", "'test'", ",", "\n", "mode", "=", "'val'", ",", "\n", "transform", "=", "input_transform", ",", "\n", "base_size", "=", "cfg", ".", "TRAIN", ".", "BASE_SIZE", ")", "\n", "\n", "val_sampler", "=", "make_data_sampler", "(", "val_dataset", ",", "shuffle", "=", "False", ",", "distributed", "=", "args", ".", "distributed", ")", "\n", "val_batch_sampler", "=", "make_batch_data_sampler", "(", "val_sampler", ",", "images_per_batch", "=", "cfg", ".", "TEST", ".", "BATCH_SIZE", ",", "drop_last", "=", "False", ")", "\n", "\n", "self", ".", "val_loader", "=", "data", ".", "DataLoader", "(", "dataset", "=", "val_dataset", ",", "\n", "batch_sampler", "=", "val_batch_sampler", ",", "\n", "num_workers", "=", "cfg", ".", "DATASET", ".", "WORKERS", ",", "\n", "pin_memory", "=", "True", ")", "\n", "logging", ".", "info", "(", "'**** number of images: {}. ****'", ".", "format", "(", "len", "(", "self", ".", "val_loader", ")", ")", ")", "\n", "\n", "self", ".", "classes", "=", "val_dataset", ".", "classes", "\n", "# create network", "\n", "self", ".", "model", "=", "get_segmentation_model", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "if", "hasattr", "(", "self", ".", "model", ",", "'encoder'", ")", "and", "cfg", ".", "MODEL", ".", "BN_EPS_FOR_ENCODER", ":", "\n", "                ", "logging", ".", "info", "(", "'set bn custom eps for bn in encoder: {}'", ".", "format", "(", "cfg", ".", "MODEL", ".", "BN_EPS_FOR_ENCODER", ")", ")", "\n", "self", ".", "set_batch_norm_attr", "(", "self", ".", "model", ".", "encoder", ".", "named_modules", "(", ")", ",", "'eps'", ",", "cfg", ".", "MODEL", ".", "BN_EPS_FOR_ENCODER", ")", "\n", "\n", "", "if", "args", ".", "distributed", ":", "\n", "            ", "self", ".", "model", "=", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "self", ".", "model", ",", "\n", "device_ids", "=", "[", "args", ".", "local_rank", "]", ",", "output_device", "=", "args", ".", "local_rank", ",", "find_unused_parameters", "=", "True", ")", "\n", "\n", "", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "num_gpu", "=", "args", ".", "num_gpus", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.other_datasets.predicted.Evaluator.set_batch_norm_attr": [[72, 76], ["isinstance", "isinstance", "setattr"], "methods", ["None"], ["", "def", "set_batch_norm_attr", "(", "self", ",", "named_modules", ",", "attr", ",", "value", ")", ":", "\n", "        ", "for", "m", "in", "named_modules", ":", "\n", "            ", "if", "isinstance", "(", "m", "[", "1", "]", ",", "nn", ".", "BatchNorm2d", ")", "or", "isinstance", "(", "m", "[", "1", "]", ",", "nn", ".", "SyncBatchNorm", ")", ":", "\n", "                ", "setattr", "(", "m", "[", "1", "]", ",", "attr", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.other_datasets.predicted.Evaluator.eval": [[77, 112], ["predicted.Evaluator.model.eval", "logging.info", "ProgressBar().start", "time.time", "enumerate", "ProgressBar().start.finish", "segmentron.utils.distributed.synchronize", "os.path.basename", "os.path.exists", "os.makedirs", "Percentage", "Bar", "Timer", "ETA", "FileTransferSpeed", "image.to.to.to", "target.to.to.to", "boundary.to.to.to", "ProgressBar().start.update", "len", "ProgressBar", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.evaluate", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "cv2.imwrite", "torch.nn.functional.softmax.cpu().numpy", "torch.nn.functional.softmax.cpu().numpy", "torch.nn.functional.softmax.cpu().numpy", "torch.nn.functional.softmax.cpu().numpy", "os.path.join", "len", "torch.nn.functional.softmax.cpu", "torch.nn.functional.softmax.cpu", "torch.nn.functional.softmax.cpu", "torch.nn.functional.softmax.cpu", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.other_datasets.predicted.Evaluator.eval", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.synchronize", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.filesystem.makedirs", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.score.SegmentationMetric.update", "home.repos.pwc.inspect_result.yangcao1996_fanet.models.translab.TransLab.evaluate"], ["", "", "", "def", "eval", "(", "self", ",", "show_scores", "=", "False", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "if", "self", ".", "args", ".", "distributed", ":", "\n", "            ", "model", "=", "self", ".", "model", ".", "module", "\n", "", "else", ":", "\n", "            ", "model", "=", "self", ".", "model", "\n", "\n", "", "logging", ".", "info", "(", "\"Start validation, Total sample: {:d}\"", ".", "format", "(", "len", "(", "self", ".", "val_loader", ")", ")", ")", "\n", "\n", "experiment_id", "=", "os", ".", "path", ".", "basename", "(", "self", ".", "args", ".", "config_file", ")", "[", ":", "-", "5", "]", "\n", "output_dir", "=", "root_path", "+", "f'/result/{cfg.DATASET.NAME}/{experiment_id}/'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "\n", "", "widgets", "=", "[", "'Inference: '", ",", "Percentage", "(", ")", ",", "' '", ",", "Bar", "(", "'#'", ")", ",", "' '", ",", "Timer", "(", ")", ",", "\n", "' '", ",", "ETA", "(", ")", ",", "' '", ",", "FileTransferSpeed", "(", ")", "]", "\n", "pbar", "=", "ProgressBar", "(", "widgets", "=", "widgets", ",", "maxval", "=", "10", "*", "len", "(", "self", ".", "val_loader", ")", ")", ".", "start", "(", ")", "\n", "time_start", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "image", ",", "target", ",", "boundary", ",", "filename", ",", "_", ",", "_", ")", "in", "enumerate", "(", "self", ".", "val_loader", ")", ":", "\n", "            ", "image", "=", "image", ".", "to", "(", "self", ".", "device", ")", "\n", "target", "=", "target", ".", "to", "(", "self", ".", "device", ")", "\n", "boundary", "=", "boundary", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "filename", "=", "filename", "[", "0", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "output", ",", "_", "=", "model", ".", "evaluate", "(", "image", ")", "# [b,c,h,w]", "\n", "output_softmax", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "output", ",", "dim", "=", "1", ")", "# [b,c,h,w]", "\n", "saliency_map", "=", "output_softmax", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", ",", "1", "]", "# [h,w]", "\n", "saliency_map", "=", "(", "255", "*", "saliency_map", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "os", ".", "path", ".", "basename", "(", "filename", "[", ":", "-", "3", "]", ")", "+", "\"png\"", ")", ",", "saliency_map", ")", "\n", "\n", "", "pbar", ".", "update", "(", "10", "*", "i", "+", "1", ")", "\n", "\n", "", "pbar", ".", "finish", "(", ")", "\n", "synchronize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.options.parse_args": [[3, 30], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.utils.options.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Segmentron'", ")", "\n", "parser", ".", "add_argument", "(", "'--config-file'", ",", "metavar", "=", "\"FILE\"", ",", "\n", "help", "=", "'config file path'", ")", "\n", "# cuda setting", "\n", "parser", ".", "add_argument", "(", "'--no-cuda'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'disables CUDA training'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "# checkpoint and log", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'put the path to resuming file if needed'", ")", "\n", "parser", ".", "add_argument", "(", "'--log-iter'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "'print log every log-iter'", ")", "\n", "# for evaluation", "\n", "parser", ".", "add_argument", "(", "'--val-epoch'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'run validation every val-epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'--skip-val'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'skip validation during training'", ")", "\n", "# for visual", "\n", "parser", ".", "add_argument", "(", "'--input-img'", ",", "type", "=", "str", ",", "default", "=", "'tools/demo_vis.png'", ",", "\n", "help", "=", "'path to the input image or a directory of images'", ")", "\n", "# config options", "\n", "parser", ".", "add_argument", "(", "'opts'", ",", "help", "=", "'See config for all options'", ",", "\n", "default", "=", "None", ",", "nargs", "=", "argparse", ".", "REMAINDER", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "args", "", "", ""]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.filesystem.save_checkpoint": [[10, 44], ["os.path.expanduser", "os.path.join", "os.path.exists", "os.makedirs", "str", "os.path.join", "torch.save", "os.path.join", "hasattr", "model.module.state_dict", "model.state_dict", "optimizer.state_dict", "lr_scheduler.state_dict", "os.path.exists", "torch.save", "logging.info", "str", "os.path.exists", "os.remove", "logging.info"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.utils.filesystem.makedirs"], ["def", "save_checkpoint", "(", "model", ",", "epoch", ",", "optimizer", "=", "None", ",", "lr_scheduler", "=", "None", ",", "is_best", "=", "False", ")", ":", "\n", "    ", "\"\"\"Save Checkpoint\"\"\"", "\n", "directory", "=", "os", ".", "path", ".", "expanduser", "(", "cfg", ".", "TRAIN", ".", "MODEL_SAVE_DIR", ")", "\n", "# directory = os.path.join(directory, '{}_{}_{}_{}'.format(cfg.MODEL.MODEL_NAME, cfg.MODEL.BACKBONE,", "\n", "#                                                          cfg.DATASET.NAME, cfg.TIME_STAMP))", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "directory", ")", "\n", "", "filename", "=", "'{}.pth'", ".", "format", "(", "str", "(", "epoch", ")", ")", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "directory", ",", "filename", ")", "\n", "\n", "state_dict", "=", "{", "\n", "\"state_dict\"", ":", "model", ".", "module", ".", "state_dict", "(", ")", "if", "hasattr", "(", "model", ",", "'module'", ")", "else", "model", ".", "state_dict", "(", ")", ",", "\n", "\"epoch\"", ":", "epoch", ",", "\n", "\"optimizer\"", ":", "optimizer", ".", "state_dict", "(", ")", "if", "optimizer", "is", "not", "None", "else", "None", ",", "\n", "\"lr_scheduler\"", ":", "lr_scheduler", ".", "state_dict", "(", ")", "if", "lr_scheduler", "is", "not", "None", "else", "None", ",", "\n", "}", "\n", "\n", "if", "is_best", ":", "\n", "        ", "best_filename", "=", "'best_model.pth'", "\n", "best_filename", "=", "os", ".", "path", ".", "join", "(", "directory", ",", "best_filename", ")", "\n", "torch", ".", "save", "(", "state_dict", ",", "best_filename", ")", "\n", "", "else", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "filename", ")", ":", "\n", "            ", "torch", ".", "save", "(", "state_dict", ",", "filename", ")", "\n", "logging", ".", "info", "(", "'Epoch {} model saved in: {}'", ".", "format", "(", "epoch", ",", "filename", ")", ")", "\n", "\n", "# remove last epoch", "\n", "", "pre_filename", "=", "'{}.pth'", ".", "format", "(", "str", "(", "epoch", "-", "1", ")", ")", "\n", "pre_filename", "=", "os", ".", "path", ".", "join", "(", "directory", ",", "pre_filename", ")", "\n", "try", ":", "\n", "            ", "if", "os", ".", "path", ".", "exists", "(", "pre_filename", ")", ":", "\n", "                ", "os", ".", "remove", "(", "pre_filename", ")", "\n", "", "", "except", "OSError", "as", "e", ":", "\n", "            ", "logging", ".", "info", "(", "e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.filesystem.makedirs": [[45, 58], ["os.makedirs"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.utils.filesystem.makedirs"], ["", "", "", "def", "makedirs", "(", "path", ")", ":", "\n", "    ", "\"\"\"Create directory recursively if not exists.\n    Similar to `makedir -p`, you can skip checking existence before this function.\n    Parameters\n    ----------\n    path : str\n        Path of the desired dir\n    \"\"\"", "\n", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "except", "OSError", "as", "exc", ":", "\n", "        ", "if", "exc", ".", "errno", "!=", "errno", ".", "EEXIST", ":", "\n", "            ", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.DistributedSampler.__init__": [[181, 197], ["int", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size", "torch.get_rank", "torch.get_rank", "torch.get_rank", "math.ceil", "torch.is_available", "torch.is_available", "torch.is_available", "RuntimeError", "torch.is_available", "torch.is_available", "torch.is_available", "RuntimeError", "len"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.get_world_size", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.get_world_size", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.get_world_size", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.get_rank", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.get_rank", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.get_rank"], ["def", "__init__", "(", "self", ",", "dataset", ",", "num_replicas", "=", "None", ",", "rank", "=", "None", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "if", "num_replicas", "is", "None", ":", "\n", "            ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Requires distributed package to be available\"", ")", "\n", "", "num_replicas", "=", "dist", ".", "get_world_size", "(", ")", "\n", "", "if", "rank", "is", "None", ":", "\n", "            ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Requires distributed package to be available\"", ")", "\n", "", "rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "num_replicas", "=", "num_replicas", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "epoch", "=", "0", "\n", "self", ".", "num_samples", "=", "int", "(", "math", ".", "ceil", "(", "len", "(", "self", ".", "dataset", ")", "*", "1.0", "/", "self", ".", "num_replicas", ")", ")", "\n", "self", ".", "total_size", "=", "self", ".", "num_samples", "*", "self", ".", "num_replicas", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.DistributedSampler.__iter__": [[198, 217], ["iter", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator.manual_seed", "torch.Generator.manual_seed", "torch.Generator.manual_seed", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "torch.arange().tolist", "torch.arange().tolist", "torch.arange().tolist", "torch.arange().tolist", "torch.arange().tolist", "torch.arange().tolist", "torch.arange().tolist", "torch.arange().tolist", "torch.arange().tolist", "len", "len", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "len", "len", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "shuffle", ":", "\n", "# deterministically shuffle based on epoch", "\n", "            ", "g", "=", "torch", ".", "Generator", "(", ")", "\n", "g", ".", "manual_seed", "(", "self", ".", "epoch", ")", "\n", "indices", "=", "torch", ".", "randperm", "(", "len", "(", "self", ".", "dataset", ")", ",", "generator", "=", "g", ")", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "            ", "indices", "=", "torch", ".", "arange", "(", "len", "(", "self", ".", "dataset", ")", ")", ".", "tolist", "(", ")", "\n", "\n", "# add extra samples to make it evenly divisible", "\n", "", "indices", "+=", "indices", "[", ":", "(", "self", ".", "total_size", "-", "len", "(", "indices", ")", ")", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "total_size", "\n", "\n", "# subsample", "\n", "offset", "=", "self", ".", "num_samples", "*", "self", ".", "rank", "\n", "indices", "=", "indices", "[", "offset", ":", "offset", "+", "self", ".", "num_samples", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "num_samples", "\n", "\n", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.DistributedSampler.__len__": [[218, 220], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.DistributedSampler.set_epoch": [[221, 223], ["None"], "methods", ["None"], ["", "def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.IterationBasedBatchSampler.__init__": [[231, 235], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "batch_sampler", ",", "num_iterations", ",", "start_iter", "=", "0", ")", ":", "\n", "        ", "self", ".", "batch_sampler", "=", "batch_sampler", "\n", "self", ".", "num_iterations", "=", "num_iterations", "\n", "self", ".", "start_iter", "=", "start_iter", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.IterationBasedBatchSampler.__iter__": [[236, 249], ["hasattr", "distributed.IterationBasedBatchSampler.batch_sampler.sampler.set_epoch"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.DistributedSampler.set_epoch"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "iteration", "=", "self", ".", "start_iter", "\n", "while", "iteration", "<=", "self", ".", "num_iterations", ":", "\n", "# if the underlying sampler has a set_epoch method, like", "\n", "# DistributedSampler, used for making each process see", "\n", "# a different split of the dataset, then set it", "\n", "            ", "if", "hasattr", "(", "self", ".", "batch_sampler", ".", "sampler", ",", "\"set_epoch\"", ")", ":", "\n", "                ", "self", ".", "batch_sampler", ".", "sampler", ".", "set_epoch", "(", "iteration", ")", "\n", "", "for", "batch", "in", "self", ".", "batch_sampler", ":", "\n", "                ", "iteration", "+=", "1", "\n", "if", "iteration", ">", "self", ".", "num_iterations", ":", "\n", "                    ", "break", "\n", "", "yield", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.IterationBasedBatchSampler.__len__": [[250, 252], ["None"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_iterations", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.get_world_size": [[17, 23], ["torch.get_world_size", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.get_world_size"], ["def", "get_world_size", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "return", "dist", ".", "get_world_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.get_rank": [[25, 31], ["torch.get_rank", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.get_rank"], ["", "def", "get_rank", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "return", "dist", ".", "get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.is_main_process": [[33, 35], ["distributed.get_rank"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.get_rank"], ["", "def", "is_main_process", "(", ")", ":", "\n", "    ", "return", "get_rank", "(", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.synchronize": [[37, 50], ["torch.get_world_size", "torch.barrier", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.get_world_size"], ["", "def", "synchronize", "(", ")", ":", "\n", "    ", "\"\"\"\n    Helper function to synchronize (barrier) among all processes when\n    using distributed training\n    \"\"\"", "\n", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "\n", "", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.all_gather": [[52, 93], ["distributed.get_world_size", "pickle.dumps", "torch.ByteStorage.from_buffer", "torch.ByteStorage.from_buffer", "torch.ByteStorage.from_buffer", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.IntTensor().to", "torch.IntTensor().to", "torch.IntTensor().to", "torch.all_gather", "max", "torch.all_gather", "zip", "torch.IntTensor().to", "torch.IntTensor().to", "torch.IntTensor().to", "int", "tensor_list.append", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.cat", "torch.cat", "torch.cat", "data_list.append", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "range", "size.item", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.cat.cpu().numpy().tobytes", "pickle.loads", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.cat.numel", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.cat.cpu().numpy", "torch.cat.cpu"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.get_world_size", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.all_gather", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.all_gather"], ["", "def", "all_gather", "(", "data", ")", ":", "\n", "    ", "\"\"\"\n    Run all_gather on arbitrary picklable data (not necessarily tensors)\n    Args:\n        data: any picklable object\n    Returns:\n        list[data]: list of data gathered from each rank\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "[", "data", "]", "\n", "\n", "# serialized to a Tensor", "\n", "", "buffer", "=", "pickle", ".", "dumps", "(", "data", ")", "\n", "storage", "=", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "buffer", ")", "\n", "tensor", "=", "torch", ".", "ByteTensor", "(", "storage", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "\n", "# obtain Tensor size of each rank", "\n", "local_size", "=", "torch", ".", "IntTensor", "(", "[", "tensor", ".", "numel", "(", ")", "]", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "size_list", "=", "[", "torch", ".", "IntTensor", "(", "[", "0", "]", ")", ".", "to", "(", "\"cuda\"", ")", "for", "_", "in", "range", "(", "world_size", ")", "]", "\n", "dist", ".", "all_gather", "(", "size_list", ",", "local_size", ")", "\n", "size_list", "=", "[", "int", "(", "size", ".", "item", "(", ")", ")", "for", "size", "in", "size_list", "]", "\n", "max_size", "=", "max", "(", "size_list", ")", "\n", "\n", "# receiving Tensor from all ranks", "\n", "# we pad the tensor because torch all_gather does not support", "\n", "# gathering tensors of different shapes", "\n", "tensor_list", "=", "[", "]", "\n", "for", "_", "in", "size_list", ":", "\n", "        ", "tensor_list", ".", "append", "(", "torch", ".", "ByteTensor", "(", "size", "=", "(", "max_size", ",", ")", ")", ".", "to", "(", "\"cuda\"", ")", ")", "\n", "", "if", "local_size", "!=", "max_size", ":", "\n", "        ", "padding", "=", "torch", ".", "ByteTensor", "(", "size", "=", "(", "max_size", "-", "local_size", ",", ")", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "tensor", "=", "torch", ".", "cat", "(", "(", "tensor", ",", "padding", ")", ",", "dim", "=", "0", ")", "\n", "", "dist", ".", "all_gather", "(", "tensor_list", ",", "tensor", ")", "\n", "\n", "data_list", "=", "[", "]", "\n", "for", "size", ",", "tensor", "in", "zip", "(", "size_list", ",", "tensor_list", ")", ":", "\n", "        ", "buffer", "=", "tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", "[", ":", "size", "]", "\n", "data_list", ".", "append", "(", "pickle", ".", "loads", "(", "buffer", ")", ")", "\n", "\n", "", "return", "data_list", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.reduce_dict": [[95, 122], ["distributed.get_world_size", "torch.no_grad", "torch.no_grad", "torch.no_grad", "sorted", "torch.stack", "torch.stack", "torch.stack", "torch.reduce", "input_dict.keys", "names.append", "torch.stack.append", "torch.get_rank", "zip"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.get_world_size", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.get_rank"], ["", "def", "reduce_dict", "(", "input_dict", ",", "average", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        input_dict (dict): all the values will be reduced\n        average (bool): whether to do average or sum\n    Reduce the values in the dictionary from all processes so that process with rank\n    0 has the averaged results. Returns a dict with the same fields as\n    input_dict, after reduction.\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "<", "2", ":", "\n", "        ", "return", "input_dict", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "names", "=", "[", "]", "\n", "values", "=", "[", "]", "\n", "# sort the keys so that they are consistent across processes", "\n", "for", "k", "in", "sorted", "(", "input_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "names", ".", "append", "(", "k", ")", "\n", "values", ".", "append", "(", "input_dict", "[", "k", "]", ")", "\n", "", "values", "=", "torch", ".", "stack", "(", "values", ",", "dim", "=", "0", ")", "\n", "dist", ".", "reduce", "(", "values", ",", "dst", "=", "0", ")", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", "and", "average", ":", "\n", "# only main process gets accumulated, so only divide by", "\n", "# world_size in this case", "\n", "            ", "values", "/=", "world_size", "\n", "", "reduced_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "names", ",", "values", ")", "}", "\n", "", "return", "reduced_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.reduce_loss_dict": [[124, 147], ["distributed.get_world_size", "torch.no_grad", "torch.no_grad", "torch.no_grad", "sorted", "torch.stack", "torch.stack", "torch.stack", "torch.reduce", "loss_dict.keys", "loss_names.append", "torch.stack.append", "torch.get_rank", "zip"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.get_world_size", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.get_rank"], ["", "def", "reduce_loss_dict", "(", "loss_dict", ")", ":", "\n", "    ", "\"\"\"\n    Reduce the loss dictionary from all processes so that process with rank\n    0 has the averaged results. Returns a dict with the same fields as\n    loss_dict, after reduction.\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "<", "2", ":", "\n", "        ", "return", "loss_dict", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "loss_names", "=", "[", "]", "\n", "all_losses", "=", "[", "]", "\n", "for", "k", "in", "sorted", "(", "loss_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "loss_names", ".", "append", "(", "k", ")", "\n", "all_losses", ".", "append", "(", "loss_dict", "[", "k", "]", ")", "\n", "", "all_losses", "=", "torch", ".", "stack", "(", "all_losses", ",", "dim", "=", "0", ")", "\n", "dist", ".", "reduce", "(", "all_losses", ",", "dst", "=", "0", ")", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "# only main process gets accumulated, so only divide by", "\n", "# world_size in this case", "\n", "            ", "all_losses", "/=", "world_size", "\n", "", "reduced_losses", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "loss_names", ",", "all_losses", ")", "}", "\n", "", "return", "reduced_losses", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.make_data_sampler": [[149, 157], ["distributed.DistributedSampler", "torch.sampler.RandomSampler", "torch.sampler.SequentialSampler"], "function", ["None"], ["", "def", "make_data_sampler", "(", "dataset", ",", "shuffle", ",", "distributed", ")", ":", "\n", "    ", "if", "distributed", ":", "\n", "        ", "return", "DistributedSampler", "(", "dataset", ",", "shuffle", "=", "shuffle", ")", "\n", "", "if", "shuffle", ":", "\n", "        ", "sampler", "=", "data", ".", "sampler", ".", "RandomSampler", "(", "dataset", ")", "\n", "", "else", ":", "\n", "        ", "sampler", "=", "data", ".", "sampler", ".", "SequentialSampler", "(", "dataset", ")", "\n", "", "return", "sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.make_batch_data_sampler": [[159, 164], ["torch.sampler.BatchSampler", "distributed.IterationBasedBatchSampler"], "function", ["None"], ["", "def", "make_batch_data_sampler", "(", "sampler", ",", "images_per_batch", ",", "num_iters", "=", "None", ",", "start_iter", "=", "0", ",", "drop_last", "=", "True", ")", ":", "\n", "    ", "batch_sampler", "=", "data", ".", "sampler", ".", "BatchSampler", "(", "sampler", ",", "images_per_batch", ",", "drop_last", "=", "drop_last", ")", "\n", "if", "num_iters", "is", "not", "None", ":", "\n", "        ", "batch_sampler", "=", "IterationBasedBatchSampler", "(", "batch_sampler", ",", "num_iters", ",", "start_iter", ")", "\n", "", "return", "batch_sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.logger.setup_logger": [[8, 28], ["logging.root.setLevel", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.Formatter", "logging.StreamHandler.setFormatter", "logging.root.addHandler", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.root.addHandler", "os.path.exists", "os.makedirs", "os.path.join"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.utils.filesystem.makedirs"], ["def", "setup_logger", "(", "name", ",", "save_dir", ",", "distributed_rank", ",", "filename", "=", "\"log.txt\"", ",", "mode", "=", "'w'", ")", ":", "\n", "    ", "if", "distributed_rank", ">", "0", ":", "\n", "        ", "return", "\n", "\n", "", "logging", ".", "root", ".", "name", "=", "name", "\n", "logging", ".", "root", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "# don't log results for the non-master process", "\n", "ch", "=", "logging", ".", "StreamHandler", "(", "stream", "=", "sys", ".", "stdout", ")", "\n", "ch", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "\"%(asctime)s %(name)s %(levelname)s: %(message)s\"", ")", "\n", "ch", ".", "setFormatter", "(", "formatter", ")", "\n", "logging", ".", "root", ".", "addHandler", "(", "ch", ")", "\n", "\n", "if", "save_dir", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "", "fh", "=", "logging", ".", "FileHandler", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "filename", ")", ",", "mode", "=", "mode", ")", "# 'a+' for add, 'w' for overwrite", "\n", "fh", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "logging", ".", "root", ".", "addHandler", "(", "fh", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.registry.Registry.__init__": [[33, 41], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            name (str): the name of this registry\n        \"\"\"", "\n", "self", ".", "_name", "=", "name", "\n", "\n", "self", ".", "_obj_map", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.registry.Registry._do_register": [[42, 47], ["None"], "methods", ["None"], ["", "def", "_do_register", "(", "self", ",", "name", ",", "obj", ")", ":", "\n", "        ", "assert", "(", "\n", "name", "not", "in", "self", ".", "_obj_map", "\n", ")", ",", "\"An object named '{}' was already registered in '{}' registry!\"", ".", "format", "(", "name", ",", "self", ".", "_name", ")", "\n", "self", ".", "_obj_map", "[", "name", "]", "=", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.registry.Registry.register": [[48, 67], ["registry.Registry._do_register", "registry.Registry._do_register"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.utils.registry.Registry._do_register", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.registry.Registry._do_register"], ["", "def", "register", "(", "self", ",", "obj", "=", "None", ",", "name", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Register the given object under the the name `obj.__name__`.\n        Can be used as either a decorator or not. See docstring of this class for usage.\n        \"\"\"", "\n", "if", "obj", "is", "None", ":", "\n", "# used as a decorator", "\n", "            ", "def", "deco", "(", "func_or_class", ",", "name", "=", "name", ")", ":", "\n", "                ", "if", "name", "is", "None", ":", "\n", "                    ", "name", "=", "func_or_class", ".", "__name__", "\n", "", "self", ".", "_do_register", "(", "name", ",", "func_or_class", ")", "\n", "return", "func_or_class", "\n", "\n", "", "return", "deco", "\n", "\n", "# used as a function call", "\n", "", "if", "name", "is", "None", ":", "\n", "            ", "name", "=", "obj", ".", "__name__", "\n", "", "self", ".", "_do_register", "(", "name", ",", "obj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.registry.Registry.get": [[70, 76], ["registry.Registry._obj_map.get", "KeyError"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.utils.score.SegmentationMetric.get"], ["", "def", "get", "(", "self", ",", "name", ")", ":", "\n", "        ", "ret", "=", "self", ".", "_obj_map", ".", "get", "(", "name", ")", "\n", "if", "ret", "is", "None", ":", "\n", "            ", "raise", "KeyError", "(", "\"No object named '{}' found in '{}' registry!\"", ".", "format", "(", "name", ",", "self", ".", "_name", ")", ")", "\n", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.registry.Registry.get_list": [[77, 79], ["list", "registry.Registry._obj_map.keys"], "methods", ["None"], ["", "def", "get_list", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "_obj_map", ".", "keys", "(", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.parallel.Reduce.forward": [[13, 18], ["sorted", "torch.reduce_add", "torch.reduce_add", "inputs[].get_device", "range", "len", "i.get_device"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "*", "inputs", ")", ":", "\n", "        ", "ctx", ".", "target_gpus", "=", "[", "inputs", "[", "i", "]", ".", "get_device", "(", ")", "for", "i", "in", "range", "(", "len", "(", "inputs", ")", ")", "]", "\n", "inputs", "=", "sorted", "(", "inputs", ",", "key", "=", "lambda", "i", ":", "i", ".", "get_device", "(", ")", ")", "\n", "return", "comm", ".", "reduce_add", "(", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.parallel.Reduce.backward": [[19, 22], ["torch.nn.parallel._functions.Broadcast.apply", "torch.nn.parallel._functions.Broadcast.apply"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "gradOutputs", ")", ":", "\n", "        ", "return", "Broadcast", ".", "apply", "(", "ctx", ".", "target_gpus", ",", "gradOutputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.parallel.DataParallelModel.gather": [[49, 51], ["None"], "methods", ["None"], ["def", "gather", "(", "self", ",", "outputs", ",", "output_device", ")", ":", "\n", "        ", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.parallel.DataParallelModel.replicate": [[52, 55], ["super().replicate"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.utils.parallel.DataParallelModel.replicate"], ["", "def", "replicate", "(", "self", ",", "module", ",", "device_ids", ")", ":", "\n", "        ", "modules", "=", "super", "(", "DataParallelModel", ",", "self", ")", ".", "replicate", "(", "module", ",", "device_ids", ")", "\n", "return", "modules", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.parallel.DataParallelCriterion.forward": [[73, 83], ["parallel.DataParallelCriterion.scatter", "parallel.DataParallelCriterion.replicate", "parallel.criterion_parallel_apply", "parallel.DataParallelCriterion.module", "len", "parallel.DataParallelCriterion.module", "Reduce.apply", "len", "len"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.utils.parallel.DataParallelModel.replicate", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.parallel.criterion_parallel_apply"], ["def", "forward", "(", "self", ",", "inputs", ",", "*", "targets", ",", "**", "kwargs", ")", ":", "\n", "# the inputs should be the outputs of DataParallelModel", "\n", "        ", "if", "not", "self", ".", "device_ids", ":", "\n", "            ", "return", "self", ".", "module", "(", "inputs", ",", "*", "targets", ",", "**", "kwargs", ")", "\n", "", "targets", ",", "kwargs", "=", "self", ".", "scatter", "(", "targets", ",", "kwargs", ",", "self", ".", "device_ids", ")", "\n", "if", "len", "(", "self", ".", "device_ids", ")", "==", "1", ":", "\n", "            ", "return", "self", ".", "module", "(", "inputs", ",", "*", "targets", "[", "0", "]", ",", "**", "kwargs", "[", "0", "]", ")", "\n", "", "replicas", "=", "self", ".", "replicate", "(", "self", ".", "module", ",", "self", ".", "device_ids", "[", ":", "len", "(", "inputs", ")", "]", ")", "\n", "outputs", "=", "criterion_parallel_apply", "(", "replicas", ",", "inputs", ",", "targets", ",", "kwargs", ")", "\n", "return", "Reduce", ".", "apply", "(", "*", "outputs", ")", "/", "len", "(", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.parallel.get_a_var": [[85, 99], ["isinstance", "isinstance", "isinstance", "isinstance", "map", "map", "isinstance", "obj.items", "isinstance"], "function", ["None"], ["", "", "def", "get_a_var", "(", "obj", ")", ":", "\n", "    ", "if", "isinstance", "(", "obj", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "obj", "\n", "\n", "", "if", "isinstance", "(", "obj", ",", "list", ")", "or", "isinstance", "(", "obj", ",", "tuple", ")", ":", "\n", "        ", "for", "result", "in", "map", "(", "get_a_var", ",", "obj", ")", ":", "\n", "            ", "if", "isinstance", "(", "result", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "return", "result", "\n", "\n", "", "", "", "if", "isinstance", "(", "obj", ",", "dict", ")", ":", "\n", "        ", "for", "result", "in", "map", "(", "get_a_var", ",", "obj", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "isinstance", "(", "result", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "return", "result", "\n", "", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.parallel.criterion_parallel_apply": [[101, 163], ["threading.Lock", "torch.is_grad_enabled", "torch.is_grad_enabled", "range", "len", "len", "len", "len", "torch.set_grad_enabled", "torch.set_grad_enabled", "len", "parallel.criterion_parallel_apply._worker"], "function", ["None"], ["", "def", "criterion_parallel_apply", "(", "modules", ",", "inputs", ",", "targets", ",", "kwargs_tup", "=", "None", ",", "devices", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Applies each `module` in :attr:`modules` in parallel on arguments\n    contained in :attr:`inputs` (positional), attr:'targets' (positional) and :attr:`kwargs_tup` (keyword)\n    on each of :attr:`devices`.\n\n    Args:\n        modules (Module): modules to be parallelized\n        inputs (tensor): inputs to the modules\n        targets (tensor): targets to the modules\n        devices (list of int or torch.device): CUDA devices\n    :attr:`modules`, :attr:`inputs`, :attr:'targets' :attr:`kwargs_tup` (if given), and\n    :attr:`devices` (if given) should all have same length. Moreover, each\n    element of :attr:`inputs` can either be a single object as the only argument\n    to a module, or a collection of positional arguments.\n    \"\"\"", "\n", "assert", "len", "(", "modules", ")", "==", "len", "(", "inputs", ")", "\n", "assert", "len", "(", "targets", ")", "==", "len", "(", "inputs", ")", "\n", "if", "kwargs_tup", "is", "not", "None", ":", "\n", "        ", "assert", "len", "(", "modules", ")", "==", "len", "(", "kwargs_tup", ")", "\n", "", "else", ":", "\n", "        ", "kwargs_tup", "=", "(", "{", "}", ",", ")", "*", "len", "(", "modules", ")", "\n", "", "if", "devices", "is", "not", "None", ":", "\n", "        ", "assert", "len", "(", "modules", ")", "==", "len", "(", "devices", ")", "\n", "", "else", ":", "\n", "        ", "devices", "=", "[", "None", "]", "*", "len", "(", "modules", ")", "\n", "", "lock", "=", "threading", ".", "Lock", "(", ")", "\n", "results", "=", "{", "}", "\n", "grad_enabled", "=", "torch", ".", "is_grad_enabled", "(", ")", "\n", "\n", "def", "_worker", "(", "i", ",", "module", ",", "input", ",", "target", ",", "kwargs", ",", "device", "=", "None", ")", ":", "\n", "        ", "torch", ".", "set_grad_enabled", "(", "grad_enabled", ")", "\n", "if", "device", "is", "None", ":", "\n", "            ", "device", "=", "get_a_var", "(", "input", ")", ".", "get_device", "(", ")", "\n", "", "try", ":", "\n", "            ", "with", "torch", ".", "cuda", ".", "device", "(", "device", ")", ":", "\n", "                ", "output", "=", "module", "(", "*", "(", "list", "(", "input", ")", "+", "target", ")", ",", "**", "kwargs", ")", "\n", "", "with", "lock", ":", "\n", "                ", "results", "[", "i", "]", "=", "output", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "            ", "with", "lock", ":", "\n", "                ", "results", "[", "i", "]", "=", "e", "\n", "\n", "", "", "", "if", "len", "(", "modules", ")", ">", "1", ":", "\n", "        ", "threads", "=", "[", "threading", ".", "Thread", "(", "target", "=", "_worker", ",", "\n", "args", "=", "(", "i", ",", "module", ",", "input", ",", "target", ",", "kwargs", ",", "device", ")", ")", "\n", "for", "i", ",", "(", "module", ",", "input", ",", "target", ",", "kwargs", ",", "device", ")", "in", "\n", "enumerate", "(", "zip", "(", "modules", ",", "inputs", ",", "targets", ",", "kwargs_tup", ",", "devices", ")", ")", "]", "\n", "\n", "for", "thread", "in", "threads", ":", "\n", "            ", "thread", ".", "start", "(", ")", "\n", "", "for", "thread", "in", "threads", ":", "\n", "            ", "thread", ".", "join", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "_worker", "(", "0", ",", "modules", "[", "0", "]", ",", "inputs", "[", "0", "]", ",", "targets", "[", "0", "]", ",", "kwargs_tup", "[", "0", "]", ",", "devices", "[", "0", "]", ")", "\n", "\n", "", "outputs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "inputs", ")", ")", ":", "\n", "        ", "output", "=", "results", "[", "i", "]", "\n", "if", "isinstance", "(", "output", ",", "Exception", ")", ":", "\n", "            ", "raise", "output", "\n", "", "outputs", ".", "append", "(", "output", ")", "\n", "", "return", "outputs", "\n", "", ""]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.download.check_sha1": [[6, 30], ["hashlib.sha1", "hashlib.sha1.hexdigest", "min", "open", "len", "len", "f.read", "hashlib.sha1.update", "hashlib.sha1.hexdigest"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.utils.score.SegmentationMetric.update"], ["def", "check_sha1", "(", "filename", ",", "sha1_hash", ")", ":", "\n", "    ", "\"\"\"Check whether the sha1 hash of the file content matches the expected hash.\n    Parameters\n    ----------\n    filename : str\n        Path to the file.\n    sha1_hash : str\n        Expected sha1 hash in hexadecimal digits.\n    Returns\n    -------\n    bool\n        Whether the file content matches the expected hash.\n    \"\"\"", "\n", "sha1", "=", "hashlib", ".", "sha1", "(", ")", "\n", "with", "open", "(", "filename", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "data", "=", "f", ".", "read", "(", "1048576", ")", "\n", "if", "not", "data", ":", "\n", "                ", "break", "\n", "", "sha1", ".", "update", "(", "data", ")", "\n", "\n", "", "", "sha1_file", "=", "sha1", ".", "hexdigest", "(", ")", "\n", "l", "=", "min", "(", "len", "(", "sha1_file", ")", ",", "len", "(", "sha1_hash", ")", ")", "\n", "return", "sha1", ".", "hexdigest", "(", ")", "[", "0", ":", "l", "]", "==", "sha1_hash", "[", "0", ":", "l", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.download.download": [[31, 88], ["os.path.expanduser", "os.path.isdir", "os.path.dirname", "print", "requests.get", "requests.get.headers.get", "url.split", "os.path.join", "os.path.exists", "os.path.abspath", "os.path.exists", "os.makedirs", "RuntimeError", "open", "UserWarning", "download.check_sha1", "os.path.expanduser", "requests.get.iter_content", "int", "tqdm.tqdm", "download.check_sha1", "url.split", "requests.get.iter_content", "f.write", "f.write", "int"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.utils.score.SegmentationMetric.get", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.score.SegmentationMetric.get", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.filesystem.makedirs", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.download.check_sha1", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.download.check_sha1"], ["", "def", "download", "(", "url", ",", "path", "=", "None", ",", "overwrite", "=", "False", ",", "sha1_hash", "=", "None", ")", ":", "\n", "    ", "\"\"\"Download an given URL\n    Parameters\n    ----------\n    url : str\n        URL to download\n    path : str, optional\n        Destination path to store downloaded file. By default stores to the\n        current directory with same name as in url.\n    overwrite : bool, optional\n        Whether to overwrite destination file if already exists.\n    sha1_hash : str, optional\n        Expected sha1 hash in hexadecimal digits. Will ignore existing file when hash is specified\n        but doesn't match.\n    Returns\n    -------\n    str\n        The file path of the downloaded file.\n    \"\"\"", "\n", "if", "path", "is", "None", ":", "\n", "        ", "fname", "=", "url", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "expanduser", "(", "path", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "            ", "fname", "=", "os", ".", "path", ".", "join", "(", "path", ",", "url", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "fname", "=", "path", "\n", "\n", "", "", "if", "overwrite", "or", "not", "os", ".", "path", ".", "exists", "(", "fname", ")", "or", "(", "sha1_hash", "and", "not", "check_sha1", "(", "fname", ",", "sha1_hash", ")", ")", ":", "\n", "        ", "dirname", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "expanduser", "(", "fname", ")", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dirname", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "dirname", ")", "\n", "\n", "", "print", "(", "'Downloading %s from %s...'", "%", "(", "fname", ",", "url", ")", ")", "\n", "r", "=", "requests", ".", "get", "(", "url", ",", "stream", "=", "True", ")", "\n", "if", "r", ".", "status_code", "!=", "200", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Failed downloading url %s\"", "%", "url", ")", "\n", "", "total_length", "=", "r", ".", "headers", ".", "get", "(", "'content-length'", ")", "\n", "with", "open", "(", "fname", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "if", "total_length", "is", "None", ":", "# no content length header", "\n", "                ", "for", "chunk", "in", "r", ".", "iter_content", "(", "chunk_size", "=", "1024", ")", ":", "\n", "                    ", "if", "chunk", ":", "# filter out keep-alive new chunks", "\n", "                        ", "f", ".", "write", "(", "chunk", ")", "\n", "", "", "", "else", ":", "\n", "                ", "total_length", "=", "int", "(", "total_length", ")", "\n", "for", "chunk", "in", "tqdm", "(", "r", ".", "iter_content", "(", "chunk_size", "=", "1024", ")", ",", "\n", "total", "=", "int", "(", "total_length", "/", "1024.", "+", "0.5", ")", ",", "\n", "unit", "=", "'KB'", ",", "unit_scale", "=", "False", ",", "dynamic_ncols", "=", "True", ")", ":", "\n", "                    ", "f", ".", "write", "(", "chunk", ")", "\n", "\n", "", "", "", "if", "sha1_hash", "and", "not", "check_sha1", "(", "fname", ",", "sha1_hash", ")", ":", "\n", "            ", "raise", "UserWarning", "(", "'File {} is downloaded but the content hash does not match. '", "'The repo may be outdated or download may be incomplete. '", "'If the \"repo_url\" is overridden, consider switching to '", "'the default repo.'", ".", "format", "(", "fname", ")", ")", "\n", "\n", "", "", "return", "fname", "", "", ""]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.visualize.print_iou": [[14, 34], ["range", "numpy.nanmean", "numpy.nanmean", "lines.append", "print", "lines.append", "lines.append"], "function", ["None"], ["def", "print_iou", "(", "iu", ",", "mean_pixel_acc", ",", "class_names", "=", "None", ",", "show_no_back", "=", "False", ")", ":", "\n", "    ", "n", "=", "iu", ".", "size", "\n", "lines", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "if", "class_names", "is", "None", ":", "\n", "            ", "cls", "=", "'Class %d:'", "%", "(", "i", "+", "1", ")", "\n", "", "else", ":", "\n", "            ", "cls", "=", "'%d %s'", "%", "(", "i", "+", "1", ",", "class_names", "[", "i", "]", ")", "\n", "# lines.append('%-8s: %.3f%%' % (cls, iu[i] * 100))", "\n", "", "", "mean_IU", "=", "np", ".", "nanmean", "(", "iu", ")", "\n", "mean_IU_no_back", "=", "np", ".", "nanmean", "(", "iu", "[", "1", ":", "]", ")", "\n", "if", "show_no_back", ":", "\n", "        ", "lines", ".", "append", "(", "'mean_IU: %.3f%% || mean_IU_no_back: %.3f%% || mean_pixel_acc: %.3f%%'", "%", "(", "\n", "mean_IU", "*", "100", ",", "mean_IU_no_back", "*", "100", ",", "mean_pixel_acc", "*", "100", ")", ")", "\n", "", "else", ":", "\n", "        ", "lines", ".", "append", "(", "'mean_IU: %.3f%% || mean_pixel_acc: %.3f%%'", "%", "(", "mean_IU", "*", "100", ",", "mean_pixel_acc", "*", "100", ")", ")", "\n", "", "lines", ".", "append", "(", "'================================================='", ")", "\n", "line", "=", "\"\\n\"", ".", "join", "(", "lines", ")", "\n", "\n", "print", "(", "line", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.visualize.show_flops_params": [[36, 43], ["torch.randn().to", "thop.profile", "logging.info", "torch.device", "torch.randn"], "function", ["None"], ["", "def", "show_flops_params", "(", "model", ",", "device", ",", "input_shape", "=", "[", "1", ",", "3", ",", "512", ",", "512", "]", ")", ":", "\n", "#summary(model, tuple(input_shape[1:]), device=device)", "\n", "    ", "input", "=", "torch", ".", "randn", "(", "*", "input_shape", ")", ".", "to", "(", "torch", ".", "device", "(", "device", ")", ")", "\n", "flops", ",", "params", "=", "profile", "(", "model", ",", "inputs", "=", "(", "input", ",", ")", ",", "verbose", "=", "False", ")", "\n", "\n", "logging", ".", "info", "(", "'{} flops: {:.3f}G input shape is {}, params: {:.3f}M'", ".", "format", "(", "\n", "model", ".", "__class__", ".", "__name__", ",", "flops", "/", "1000000000", ",", "input_shape", "[", "1", ":", "]", ",", "params", "/", "1000000", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.visualize.set_img_color": [[45, 53], ["range", "len", "numpy.where", "numpy.where"], "function", ["None"], ["", "def", "set_img_color", "(", "img", ",", "label", ",", "colors", ",", "background", "=", "0", ",", "show255", "=", "False", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "len", "(", "colors", ")", ")", ":", "\n", "        ", "if", "i", "!=", "background", ":", "\n", "            ", "img", "[", "np", ".", "where", "(", "label", "==", "i", ")", "]", "=", "colors", "[", "i", "]", "\n", "", "", "if", "show255", ":", "\n", "        ", "img", "[", "np", ".", "where", "(", "label", "==", "255", ")", "]", "=", "255", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.visualize.show_prediction": [[55, 61], ["numpy.array", "visualize.set_img_color", "numpy.array"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.utils.visualize.set_img_color"], ["", "def", "show_prediction", "(", "img", ",", "pred", ",", "colors", ",", "background", "=", "0", ")", ":", "\n", "    ", "im", "=", "np", ".", "array", "(", "img", ",", "np", ".", "uint8", ")", "\n", "set_img_color", "(", "im", ",", "pred", ",", "colors", ",", "background", ")", "\n", "out", "=", "np", ".", "array", "(", "im", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.visualize.show_colorful_images": [[63, 66], ["PIL.Image.fromarray", "Image.fromarray.show", "prediction.astype().squeeze", "prediction.astype"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.test.heatmaps.show"], ["", "def", "show_colorful_images", "(", "prediction", ",", "palettes", ")", ":", "\n", "    ", "im", "=", "Image", ".", "fromarray", "(", "palettes", "[", "prediction", ".", "astype", "(", "'uint8'", ")", ".", "squeeze", "(", ")", "]", ")", "\n", "im", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.visualize.save_colorful_images": [[68, 78], ["PIL.Image.fromarray", "os.path.join", "Image.fromarray.save", "os.path.split", "os.path.exists", "os.mkdir", "prediction.astype().squeeze", "prediction.astype"], "function", ["None"], ["", "def", "save_colorful_images", "(", "prediction", ",", "filename", ",", "output_dir", ",", "palettes", ")", ":", "\n", "    ", "'''\n    :param prediction: [B, H, W, C]\n    '''", "\n", "im", "=", "Image", ".", "fromarray", "(", "palettes", "[", "prediction", ".", "astype", "(", "'uint8'", ")", ".", "squeeze", "(", ")", "]", ")", "\n", "fn", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "filename", ")", "\n", "out_dir", "=", "os", ".", "path", ".", "split", "(", "fn", ")", "[", "0", "]", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "out_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "out_dir", ")", "\n", "", "im", ".", "save", "(", "fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.visualize.get_color_pallete": [[80, 110], ["PIL.Image.fromarray", "Image.fromarray.putpalette", "PIL.Image.fromarray", "Image.fromarray.putpalette", "npimg.astype", "npimg.astype", "PIL.Image.fromarray", "Image.fromarray.putpalette", "npimg.astype"], "function", ["None"], ["", "def", "get_color_pallete", "(", "npimg", ",", "dataset", "=", "'cityscape'", ")", ":", "\n", "    ", "\"\"\"Visualize image.\n\n    Parameters\n    ----------\n    npimg : numpy.ndarray\n        Single channel image with shape `H, W, 1`.\n    dataset : str, default: 'pascal_voc'\n        The dataset that model pretrained on. ('pascal_voc', 'ade20k')\n    Returns\n    -------\n    out_img : PIL.Image\n        Image with color pallete\n    \"\"\"", "\n", "# recovery boundary", "\n", "if", "dataset", "in", "(", "'pascal_voc'", ",", "'pascal_aug'", ")", ":", "\n", "        ", "npimg", "[", "npimg", "==", "-", "1", "]", "=", "255", "\n", "# put colormap", "\n", "", "if", "dataset", "==", "'ade20k'", ":", "\n", "        ", "npimg", "=", "npimg", "+", "1", "\n", "out_img", "=", "Image", ".", "fromarray", "(", "npimg", ".", "astype", "(", "'uint8'", ")", ")", "\n", "out_img", ".", "putpalette", "(", "adepallete", ")", "\n", "return", "out_img", "\n", "", "elif", "dataset", "==", "'cityscape'", ":", "\n", "        ", "out_img", "=", "Image", ".", "fromarray", "(", "npimg", ".", "astype", "(", "'uint8'", ")", ")", "\n", "out_img", ".", "putpalette", "(", "cityscapepallete", ")", "\n", "return", "out_img", "\n", "", "out_img", "=", "Image", ".", "fromarray", "(", "npimg", ".", "astype", "(", "'uint8'", ")", ")", "\n", "out_img", ".", "putpalette", "(", "vocpallete", ")", "\n", "return", "out_img", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.visualize._getvocpallete": [[112, 128], ["range"], "function", ["None"], ["", "def", "_getvocpallete", "(", "num_cls", ")", ":", "\n", "    ", "n", "=", "num_cls", "\n", "pallete", "=", "[", "0", "]", "*", "(", "n", "*", "3", ")", "\n", "for", "j", "in", "range", "(", "0", ",", "n", ")", ":", "\n", "        ", "lab", "=", "j", "\n", "pallete", "[", "j", "*", "3", "+", "0", "]", "=", "0", "\n", "pallete", "[", "j", "*", "3", "+", "1", "]", "=", "0", "\n", "pallete", "[", "j", "*", "3", "+", "2", "]", "=", "0", "\n", "i", "=", "0", "\n", "while", "(", "lab", ">", "0", ")", ":", "\n", "            ", "pallete", "[", "j", "*", "3", "+", "0", "]", "|=", "(", "(", "(", "lab", ">>", "0", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "pallete", "[", "j", "*", "3", "+", "1", "]", "|=", "(", "(", "(", "lab", ">>", "1", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "pallete", "[", "j", "*", "3", "+", "2", "]", "|=", "(", "(", "(", "lab", ">>", "2", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "i", "=", "i", "+", "1", "\n", "lab", ">>=", "3", "\n", "", "", "return", "pallete", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.score.SegmentationMetric.__init__": [[16, 22], ["object.__init__", "score.SegmentationMetric.reset"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.score.SegmentationMetric.reset"], ["def", "__init__", "(", "self", ",", "nclass", ",", "distributed", ",", "num_gpu", ")", ":", "\n", "        ", "super", "(", "SegmentationMetric", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nclass", "=", "nclass", "\n", "self", ".", "distributed", "=", "distributed", "\n", "self", ".", "num_gpu", "=", "num_gpu", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.score.SegmentationMetric.update": [[23, 85], ["isinstance", "isinstance", "torch.distributed.all_reduce", "score.batch_pix_accuracy", "score.batch_intersection_union", "score.batch_mae", "score.batch_ber", "torch.cuda.synchronize", "reduce_tensor.item", "reduce_tensor.item", "score.SegmentationMetric.total_mae.append", "IoU.mean().item", "score.SegmentationMetric.update.evaluate_worker"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.utils.score.batch_pix_accuracy", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.score.batch_intersection_union", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.score.batch_mae", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.score.batch_ber", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.synchronize"], ["", "def", "update", "(", "self", ",", "preds", ",", "labels", ")", ":", "\n", "        ", "\"\"\"Updates the internal evaluation result.\n\n        Parameters\n        ----------\n        labels : 'NumpyArray' or list of `NumpyArray`\n            The labels of the data.\n        preds : 'NumpyArray' or list of `NumpyArray`\n            Predicted values.\n        \"\"\"", "\n", "\n", "def", "reduce_tensor", "(", "tensor", ")", ":", "\n", "            ", "if", "isinstance", "(", "tensor", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "rt", "=", "tensor", ".", "clone", "(", ")", "\n", "", "else", ":", "\n", "                ", "rt", "=", "copy", ".", "deepcopy", "(", "tensor", ")", "\n", "", "dist", ".", "all_reduce", "(", "rt", ",", "op", "=", "dist", ".", "ReduceOp", ".", "SUM", ")", "\n", "return", "rt", "\n", "\n", "", "def", "evaluate_worker", "(", "self", ",", "pred", ",", "label", ")", ":", "\n", "\n", "            ", "correct", ",", "labeled", "=", "batch_pix_accuracy", "(", "pred", ",", "label", ")", "\n", "inter", ",", "union", "=", "batch_intersection_union", "(", "pred", ",", "label", ",", "self", ".", "nclass", ")", "\n", "mae", "=", "batch_mae", "(", "pred", ",", "label", ")", "\n", "bers", ",", "bers_count", "=", "batch_ber", "(", "pred", ",", "label", ")", "\n", "\n", "if", "self", ".", "distributed", ":", "\n", "                ", "correct", "=", "reduce_tensor", "(", "correct", ")", "\n", "labeled", "=", "reduce_tensor", "(", "labeled", ")", "\n", "inter", "=", "reduce_tensor", "(", "inter", ".", "cuda", "(", ")", ")", "\n", "union", "=", "reduce_tensor", "(", "union", ".", "cuda", "(", ")", ")", "\n", "mae", "=", "reduce_tensor", "(", "mae", ".", "cuda", "(", ")", ")", "\n", "bers", "=", "reduce_tensor", "(", "bers", ".", "cuda", "(", ")", ")", "\n", "bers_count", "=", "reduce_tensor", "(", "(", "bers_count", ".", "cuda", "(", ")", ")", ")", "\n", "\n", "", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "self", ".", "total_correct", "+=", "correct", ".", "item", "(", ")", "\n", "self", ".", "total_label", "+=", "labeled", ".", "item", "(", ")", "\n", "\n", "if", "self", ".", "total_inter", ".", "device", "!=", "inter", ".", "device", ":", "\n", "                ", "self", ".", "total_inter", "=", "self", ".", "total_inter", ".", "to", "(", "inter", ".", "device", ")", "\n", "self", ".", "total_union", "=", "self", ".", "total_union", ".", "to", "(", "union", ".", "device", ")", "\n", "", "self", ".", "total_inter", "+=", "inter", "\n", "self", ".", "total_union", "+=", "union", "\n", "\n", "self", ".", "total_mae", ".", "append", "(", "mae", ")", "\n", "\n", "if", "self", ".", "total_bers", ".", "device", "!=", "bers", ".", "device", ":", "\n", "                ", "self", ".", "total_bers", "=", "self", ".", "total_bers", ".", "to", "(", "bers", ".", "device", ")", "\n", "self", ".", "total_bers_count", "=", "self", ".", "total_bers_count", ".", "to", "(", "bers_count", ".", "device", ")", "\n", "", "self", ".", "total_bers", "+=", "bers", "\n", "self", ".", "total_bers_count", "+=", "bers_count", "\n", "\n", "IoU", "=", "1.0", "*", "inter", "/", "(", "2.220446049250313e-16", "+", "union", ")", "\n", "\n", "return", "IoU", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "if", "isinstance", "(", "preds", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "return", "evaluate_worker", "(", "self", ",", "preds", ",", "labels", ")", "\n", "", "elif", "isinstance", "(", "preds", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "for", "(", "pred", ",", "label", ")", "in", "zip", "(", "preds", ",", "labels", ")", ":", "\n", "                ", "return", "evaluate_worker", "(", "self", ",", "pred", ",", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.score.SegmentationMetric.get": [[86, 106], ["IoU[].mean().item", "Ber[].mean().item", "IoU[].mean", "torch.Tensor().mean().item", "Ber[].mean", "IoU.cpu().numpy", "Ber.cpu().numpy", "torch.Tensor().mean", "IoU.cpu", "Ber.cpu", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean"], ["", "", "", "def", "get", "(", "self", ",", "return_category_iou", "=", "False", ")", ":", "\n", "        ", "\"\"\"Gets the current evaluation result.\n\n        Returns\n        -------\n        metrics : tuple of float\n            pixAcc and mIoU\n        \"\"\"", "\n", "pixAcc", "=", "1.0", "*", "self", ".", "total_correct", "/", "(", "2.220446049250313e-16", "+", "self", ".", "total_label", ")", "# remove np.spacing(1)", "\n", "IoU", "=", "1.0", "*", "self", ".", "total_inter", "/", "(", "2.220446049250313e-16", "+", "self", ".", "total_union", ")", "\n", "# mIoU = IoU.mean().item()", "\n", "mIoU", "=", "IoU", "[", "1", ":", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "mae", "=", "1.0", "*", "torch", ".", "Tensor", "(", "self", ".", "total_mae", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "/", "self", ".", "num_gpu", "\n", "\n", "Ber", "=", "1.0", "*", "self", ".", "total_bers", "/", "self", ".", "total_bers_count", "\n", "mBer", "=", "Ber", "[", "1", ":", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n", "if", "return_category_iou", ":", "\n", "            ", "return", "pixAcc", ",", "mIoU", ",", "IoU", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "mae", ",", "mBer", ",", "Ber", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "return", "pixAcc", ",", "mIoU", ",", "mae", ",", "mBer", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.score.SegmentationMetric.reset": [[107, 117], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Resets the internal evaluation result to initial state.\"\"\"", "\n", "self", ".", "total_inter", "=", "torch", ".", "zeros", "(", "self", ".", "nclass", ")", "\n", "self", ".", "total_union", "=", "torch", ".", "zeros", "(", "self", ".", "nclass", ")", "\n", "self", ".", "total_correct", "=", "0", "\n", "self", ".", "total_label", "=", "0", "\n", "self", ".", "total_mae", "=", "[", "]", "\n", "\n", "self", ".", "total_bers", "=", "torch", ".", "zeros", "(", "3", ")", "\n", "self", ".", "total_bers_count", "=", "torch", ".", "zeros", "(", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.score.batch_pix_accuracy": [[119, 133], ["torch.sum", "torch.sum", "torch.argmax", "target.long", "output.long"], "function", ["None"], ["", "", "def", "batch_pix_accuracy", "(", "output", ",", "target", ")", ":", "\n", "    ", "\"\"\"PixAcc\"\"\"", "\n", "# inputs are numpy array, output 4D, target 3D", "\n", "predict", "=", "torch", ".", "argmax", "(", "output", ".", "long", "(", ")", ",", "1", ")", "+", "1", "\n", "target", "=", "target", ".", "long", "(", ")", "+", "1", "\n", "\n", "'''do not care background'''", "\n", "# pixel_labeled = torch.sum(target > 0)", "\n", "# pixel_correct = torch.sum((predict == target) * (target > 0))", "\n", "\n", "pixel_labeled", "=", "torch", ".", "sum", "(", "target", ">", "1", ")", "\n", "pixel_correct", "=", "torch", ".", "sum", "(", "(", "predict", "==", "target", ")", "*", "(", "target", ">", "1", ")", ")", "\n", "assert", "pixel_correct", "<=", "pixel_labeled", ",", "\"Correct area should be smaller than Labeled\"", "\n", "return", "pixel_correct", ",", "pixel_labeled", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.score.batch_mae": [[134, 142], ["torch.argmax().float", "target.float.float", "torch.argmax"], "function", ["None"], ["", "def", "batch_mae", "(", "output", ",", "target", ")", ":", "\n", "    ", "\"\"\"Mean Average Error\"\"\"", "\n", "# inputs are numpy array, output 4D, target 3D", "\n", "predict", "=", "(", "torch", ".", "argmax", "(", "output", ",", "1", ")", ")", ".", "float", "(", ")", "\n", "target", "=", "target", ".", "float", "(", ")", "\n", "\n", "mae", "=", "(", "predict", "-", "target", ")", ".", "abs", "(", ")", ".", "mean", "(", ")", "\n", "return", "mae", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.score.batch_ber": [[143, 167], ["torch.argmax", "target.long.long", "torch.zeros", "torch.zeros", "output.long", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "N_p.float.float", "N_n.float.float", "TP.float.float", "TN.float.float", "valid.sum"], "function", ["None"], ["", "def", "batch_ber", "(", "output", ",", "target", ",", "class_ids", "=", "[", "1", ",", "2", "]", ")", ":", "\n", "    ", "predict", "=", "torch", ".", "argmax", "(", "output", ".", "long", "(", ")", ",", "1", ")", "\n", "target", "=", "target", ".", "long", "(", ")", "\n", "bers", "=", "torch", ".", "zeros", "(", "3", ")", "\n", "bers_count", "=", "torch", ".", "zeros", "(", "3", ")", "\n", "bers_count", "[", "0", "]", "=", "1", "\n", "\n", "for", "class_id", "in", "class_ids", ":", "\n", "        ", "valid", "=", "target", "==", "class_id", "\n", "if", "valid", ".", "sum", "(", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "N_p", "=", "torch", ".", "sum", "(", "target", "==", "class_id", ")", "\n", "N_n", "=", "torch", ".", "sum", "(", "target", "!=", "class_id", ")", "\n", "TP", "=", "torch", ".", "sum", "(", "(", "predict", "==", "target", ")", "*", "valid", ")", "\n", "TN", "=", "torch", ".", "sum", "(", "(", "predict", "==", "target", ")", "*", "(", "1", "-", "valid", ")", ")", "\n", "\n", "N_p", "=", "N_p", ".", "float", "(", ")", ";", "N_n", "=", "N_n", ".", "float", "(", ")", ";", "TP", "=", "TP", ".", "float", "(", ")", ";", "TN", "=", "TN", ".", "float", "(", ")", "\n", "ber", "=", "1", "-", "1", "/", "2", "*", "(", "TP", "/", "N_p", "+", "TN", "/", "N_n", ")", "\n", "ber", "=", "ber", "*", "100", "\n", "\n", "bers", "[", "class_id", "]", "=", "ber", "\n", "bers_count", "[", "class_id", "]", "=", "1.0", "\n", "\n", "", "return", "bers", ",", "bers_count", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.score.batch_intersection_union": [[168, 187], ["torch.histc", "torch.histc", "torch.histc", "torch.argmax", "target.float", "predict.float", "intersection.cpu", "predict.cpu", "target.cpu", "torch.sum().item", "torch.histc.float", "area_union.float", "torch.sum"], "function", ["None"], ["", "def", "batch_intersection_union", "(", "output", ",", "target", ",", "nclass", ")", ":", "\n", "    ", "\"\"\"mIoU\"\"\"", "\n", "# inputs are numpy array, output 4D, target 3D", "\n", "mini", "=", "1", "\n", "maxi", "=", "nclass", "\n", "nbins", "=", "nclass", "\n", "predict", "=", "torch", ".", "argmax", "(", "output", ",", "1", ")", "+", "1", "\n", "target", "=", "target", ".", "float", "(", ")", "+", "1", "\n", "\n", "predict", "=", "predict", ".", "float", "(", ")", "*", "(", "target", ">", "0", ")", ".", "float", "(", ")", "\n", "intersection", "=", "predict", "*", "(", "predict", "==", "target", ")", ".", "float", "(", ")", "\n", "# areas of intersection and union", "\n", "# element 0 in intersection occur the main difference from np.bincount. set boundary to -1 is necessary.", "\n", "area_inter", "=", "torch", ".", "histc", "(", "intersection", ".", "cpu", "(", ")", ",", "bins", "=", "nbins", ",", "min", "=", "mini", ",", "max", "=", "maxi", ")", "\n", "area_pred", "=", "torch", ".", "histc", "(", "predict", ".", "cpu", "(", ")", ",", "bins", "=", "nbins", ",", "min", "=", "mini", ",", "max", "=", "maxi", ")", "\n", "area_lab", "=", "torch", ".", "histc", "(", "target", ".", "cpu", "(", ")", ",", "bins", "=", "nbins", ",", "min", "=", "mini", ",", "max", "=", "maxi", ")", "\n", "area_union", "=", "area_pred", "+", "area_lab", "-", "area_inter", "\n", "assert", "torch", ".", "sum", "(", "area_inter", ">", "area_union", ")", ".", "item", "(", ")", "==", "0", ",", "\"Intersection area should be smaller than Union area\"", "\n", "return", "area_inter", ".", "float", "(", ")", ",", "area_union", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.score.pixelAccuracy": [[189, 208], ["numpy.sum", "numpy.sum"], "function", ["None"], ["", "def", "pixelAccuracy", "(", "imPred", ",", "imLab", ")", ":", "\n", "    ", "\"\"\"\n    This function takes the prediction and label of a single image, returns pixel-wise accuracy\n    To compute over many images do:\n    for i = range(Nimages):\n         (pixel_accuracy[i], pixel_correct[i], pixel_labeled[i]) = \\\n            pixelAccuracy(imPred[i], imLab[i])\n    mean_pixel_accuracy = 1.0 * np.sum(pixel_correct) / (np.spacing(1) + np.sum(pixel_labeled))\n    \"\"\"", "\n", "# Remove classes from unlabeled pixels in gt image.", "\n", "# We should not penalize detections in unlabeled portions of the image.", "\n", "# pixel_labeled = np.sum(imLab >= 0)", "\n", "# pixel_correct = np.sum((imPred == imLab) * (imLab >= 0))", "\n", "\n", "'''do not care background'''", "\n", "pixel_labeled", "=", "np", ".", "sum", "(", "imLab", ">", "0", ")", "\n", "pixel_correct", "=", "np", ".", "sum", "(", "(", "imPred", "==", "imLab", ")", "*", "(", "imLab", ">", "0", ")", ")", "\n", "pixel_accuracy", "=", "1.0", "*", "pixel_correct", "/", "pixel_labeled", "\n", "return", "(", "pixel_accuracy", ",", "pixel_correct", ",", "pixel_labeled", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.score.intersectionAndUnion": [[210, 232], ["numpy.histogram", "numpy.histogram", "numpy.histogram"], "function", ["None"], ["", "def", "intersectionAndUnion", "(", "imPred", ",", "imLab", ",", "numClass", ")", ":", "\n", "    ", "\"\"\"\n    This function takes the prediction and label of a single image,\n    returns intersection and union areas for each class\n    To compute over many images do:\n    for i in range(Nimages):\n        (area_intersection[:,i], area_union[:,i]) = intersectionAndUnion(imPred[i], imLab[i])\n    IoU = 1.0 * np.sum(area_intersection, axis=1) / np.sum(np.spacing(1)+area_union, axis=1)\n    \"\"\"", "\n", "# Remove classes from unlabeled pixels in gt image.", "\n", "# We should not penalize detections in unlabeled portions of the image.", "\n", "imPred", "=", "imPred", "*", "(", "imLab", ">=", "0", ")", "\n", "\n", "# Compute area intersection:", "\n", "intersection", "=", "imPred", "*", "(", "imPred", "==", "imLab", ")", "\n", "(", "area_intersection", ",", "_", ")", "=", "np", ".", "histogram", "(", "intersection", ",", "bins", "=", "numClass", ",", "range", "=", "(", "1", ",", "numClass", ")", ")", "\n", "\n", "# Compute area union:", "\n", "(", "area_pred", ",", "_", ")", "=", "np", ".", "histogram", "(", "imPred", ",", "bins", "=", "numClass", ",", "range", "=", "(", "1", ",", "numClass", ")", ")", "\n", "(", "area_lab", ",", "_", ")", "=", "np", ".", "histogram", "(", "imLab", ",", "bins", "=", "numClass", ",", "range", "=", "(", "1", ",", "numClass", ")", ")", "\n", "area_union", "=", "area_pred", "+", "area_lab", "-", "area_intersection", "\n", "return", "(", "area_intersection", ",", "area_union", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.score.hist_info": [[234, 242], ["numpy.sum", "numpy.sum", "numpy.bincount().reshape", "numpy.bincount", "label[].astype"], "function", ["None"], ["", "def", "hist_info", "(", "pred", ",", "label", ",", "num_cls", ")", ":", "\n", "    ", "assert", "pred", ".", "shape", "==", "label", ".", "shape", "\n", "k", "=", "(", "label", ">=", "0", ")", "&", "(", "label", "<", "num_cls", ")", "\n", "labeled", "=", "np", ".", "sum", "(", "k", ")", "\n", "correct", "=", "np", ".", "sum", "(", "(", "pred", "[", "k", "]", "==", "label", "[", "k", "]", ")", ")", "\n", "\n", "return", "np", ".", "bincount", "(", "num_cls", "*", "label", "[", "k", "]", ".", "astype", "(", "int", ")", "+", "pred", "[", "k", "]", ",", "minlength", "=", "num_cls", "**", "2", ")", ".", "reshape", "(", "num_cls", ",", "\n", "num_cls", ")", ",", "labeled", ",", "correct", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.score.compute_score": [[244, 253], ["numpy.nanmean", "numpy.nanmean", "numpy.diag", "hist.sum", "hist.sum", "numpy.diag", "hist.sum", "hist.sum"], "function", ["None"], ["", "def", "compute_score", "(", "hist", ",", "correct", ",", "labeled", ")", ":", "\n", "    ", "iu", "=", "np", ".", "diag", "(", "hist", ")", "/", "(", "hist", ".", "sum", "(", "1", ")", "+", "hist", ".", "sum", "(", "0", ")", "-", "np", ".", "diag", "(", "hist", ")", ")", "\n", "mean_IU", "=", "np", ".", "nanmean", "(", "iu", ")", "\n", "mean_IU_no_back", "=", "np", ".", "nanmean", "(", "iu", "[", "1", ":", "]", ")", "\n", "freq", "=", "hist", ".", "sum", "(", "1", ")", "/", "hist", ".", "sum", "(", ")", "\n", "# freq_IU = (iu[freq > 0] * freq[freq > 0]).sum()", "\n", "mean_pixel_acc", "=", "correct", "/", "labeled", "\n", "\n", "return", "iu", ",", "mean_IU", ",", "mean_IU_no_back", ",", "mean_pixel_acc", "\n", "", ""]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.default_setup.default_setup": [[11, 43], ["logger.setup_logger", "logging.info", "logging.info", "logging.info", "env.seed_all_rng", "int", "torch.cuda.is_available", "torch.cuda.set_device", "torch.distributed.init_process_group", "distributed.synchronize", "distributed.get_rank", "json.dumps", "distributed.get_rank"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.utils.logger.setup_logger", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.env.seed_all_rng", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.synchronize", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.get_rank", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.get_rank"], ["def", "default_setup", "(", "args", ")", ":", "\n", "    ", "num_gpus", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "if", "\"WORLD_SIZE\"", "in", "os", ".", "environ", "else", "1", "\n", "args", ".", "num_gpus", "=", "num_gpus", "\n", "args", ".", "distributed", "=", "num_gpus", ">", "1", "\n", "\n", "if", "not", "args", ".", "no_cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "# cudnn.deterministic = True", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "args", ".", "device", "=", "\"cuda\"", "\n", "", "else", ":", "\n", "        ", "args", ".", "distributed", "=", "False", "\n", "args", ".", "device", "=", "\"cpu\"", "\n", "", "if", "args", ".", "distributed", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "backend", "=", "\"nccl\"", ",", "init_method", "=", "\"env://\"", ")", "\n", "synchronize", "(", ")", "\n", "\n", "# TODO", "\n", "# if args.save_pred:", "\n", "#     outdir = '../runs/pred_pic/{}_{}_{}'.format(args.model, args.backbone, args.dataset)", "\n", "#     if not os.path.exists(outdir):", "\n", "#         os.makedirs(outdir)", "\n", "\n", "", "save_dir", "=", "cfg", ".", "TRAIN", ".", "MODEL_SAVE_DIR", "if", "cfg", ".", "PHASE", "==", "'train'", "else", "None", "\n", "setup_logger", "(", "\"Segmentron\"", ",", "save_dir", ",", "get_rank", "(", ")", ",", "filename", "=", "'{}_{}_{}_{}_log.txt'", ".", "format", "(", "\n", "cfg", ".", "MODEL", ".", "MODEL_NAME", ",", "cfg", ".", "MODEL", ".", "BACKBONE", ",", "cfg", ".", "DATASET", ".", "NAME", ",", "cfg", ".", "TIME_STAMP", ")", ")", "\n", "\n", "logging", ".", "info", "(", "\"Using {} GPUs\"", ".", "format", "(", "num_gpus", ")", ")", "\n", "logging", ".", "info", "(", "args", ")", "\n", "logging", ".", "info", "(", "json", ".", "dumps", "(", "cfg", ",", "indent", "=", "8", ")", ")", "\n", "\n", "seed_all_rng", "(", "None", "if", "cfg", ".", "SEED", "<", "0", "else", "cfg", ".", "SEED", "+", "get_rank", "(", ")", ")", "", "", ""]], "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.env.seed_all_rng": [[13, 31], ["numpy.random.seed", "torch.set_rng_state", "random.seed", "logging.getLogger", "logging.getLogger.info", "torch.manual_seed().get_state", "int.from_bytes", "os.getpid", "int", "os.urandom", "torch.manual_seed", "datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["None"], ["def", "seed_all_rng", "(", "seed", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Set the random seed for the RNG in torch, numpy and python.\n\n    Args:\n        seed (int): if None, will use a strong random seed.\n    \"\"\"", "\n", "if", "seed", "is", "None", ":", "\n", "        ", "seed", "=", "(", "\n", "os", ".", "getpid", "(", ")", "\n", "+", "int", "(", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%S%f\"", ")", ")", "\n", "+", "int", ".", "from_bytes", "(", "os", ".", "urandom", "(", "2", ")", ",", "\"big\"", ")", "\n", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "logger", ".", "info", "(", "\"Using a generated random seed {}\"", ".", "format", "(", "seed", ")", ")", "\n", "", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "set_rng_state", "(", "torch", ".", "manual_seed", "(", "seed", ")", ".", "get_state", "(", ")", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.yangcao1996_fanet.config.config.SegmentronConfig.__init__": [[14, 17], ["dict.__init__"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SegmentronConfig", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "immutable", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.config.config.SegmentronConfig.__setattr__": [[18, 30], ["key.split", "t.__getattr__.__getattr__.__getattr__", "t.__getattr__.__getattr__.__getattr__"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.config.config.SegmentronConfig.__getattr__", "home.repos.pwc.inspect_result.yangcao1996_fanet.config.config.SegmentronConfig.__getattr__"], ["", "def", "__setattr__", "(", "self", ",", "key", ",", "value", ",", "create_if_not_exist", "=", "True", ")", ":", "\n", "        ", "if", "key", "in", "[", "\"immutable\"", "]", ":", "\n", "            ", "self", ".", "__dict__", "[", "key", "]", "=", "value", "\n", "return", "\n", "\n", "", "t", "=", "self", "\n", "keylist", "=", "key", ".", "split", "(", "\".\"", ")", "\n", "for", "k", "in", "keylist", "[", ":", "-", "1", "]", ":", "\n", "            ", "t", "=", "t", ".", "__getattr__", "(", "k", ",", "create_if_not_exist", ")", "\n", "\n", "", "t", ".", "__getattr__", "(", "keylist", "[", "-", "1", "]", ",", "create_if_not_exist", ")", "\n", "t", "[", "keylist", "[", "-", "1", "]", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.config.config.SegmentronConfig.__getattr__": [[31, 42], ["config.SegmentronConfig"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "key", ",", "create_if_not_exist", "=", "True", ")", ":", "\n", "        ", "if", "key", "in", "[", "\"immutable\"", "]", ":", "\n", "            ", "if", "key", "not", "in", "self", ".", "__dict__", ":", "\n", "                ", "self", ".", "__dict__", "[", "key", "]", "=", "False", "\n", "", "return", "self", ".", "__dict__", "[", "key", "]", "\n", "\n", "", "if", "not", "key", "in", "self", ":", "\n", "            ", "if", "not", "create_if_not_exist", ":", "\n", "                ", "raise", "KeyError", "\n", "", "self", "[", "key", "]", "=", "SegmentronConfig", "(", ")", "\n", "", "return", "self", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.config.config.SegmentronConfig.__setitem__": [[43, 58], ["isinstance", "super().__setitem__", "AttributeError", "ast.literal_eval"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.config.config.SegmentronConfig.__setitem__"], ["", "def", "__setitem__", "(", "self", ",", "key", ",", "value", ")", ":", "\n", "#", "\n", "        ", "if", "self", ".", "immutable", ":", "\n", "            ", "raise", "AttributeError", "(", "\n", "'Attempted to set \"{}\" to \"{}\", but SegConfig is immutable'", ".", "\n", "format", "(", "key", ",", "value", ")", ")", "\n", "#", "\n", "", "if", "isinstance", "(", "value", ",", "six", ".", "string_types", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "value", "=", "literal_eval", "(", "value", ")", "\n", "", "except", "ValueError", ":", "\n", "                ", "pass", "\n", "", "except", "SyntaxError", ":", "\n", "                ", "pass", "\n", "", "", "super", "(", "SegmentronConfig", ",", "self", ")", ".", "__setitem__", "(", "key", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.config.config.SegmentronConfig.update_from_other_cfg": [[59, 76], ["isinstance", "isinstance", "len", "config.SegmentronConfig", "tdic.items", "isinstance", "cfg_list.append", "config.SegmentronConfig.__setattr__", "KeyError"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.config.config.SegmentronConfig.__setattr__"], ["", "def", "update_from_other_cfg", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "isinstance", "(", "other", ",", "dict", ")", ":", "\n", "            ", "other", "=", "SegmentronConfig", "(", "other", ")", "\n", "", "assert", "isinstance", "(", "other", ",", "SegmentronConfig", ")", "\n", "cfg_list", "=", "[", "(", "\"\"", ",", "other", ")", "]", "\n", "while", "len", "(", "cfg_list", ")", ":", "\n", "            ", "prefix", ",", "tdic", "=", "cfg_list", "[", "0", "]", "\n", "cfg_list", "=", "cfg_list", "[", "1", ":", "]", "\n", "for", "key", ",", "value", "in", "tdic", ".", "items", "(", ")", ":", "\n", "                ", "key", "=", "\"{}.{}\"", ".", "format", "(", "prefix", ",", "key", ")", "if", "prefix", "else", "key", "\n", "if", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                    ", "cfg_list", ".", "append", "(", "(", "key", ",", "value", ")", ")", "\n", "continue", "\n", "", "try", ":", "\n", "                    ", "self", ".", "__setattr__", "(", "key", ",", "value", ",", "create_if_not_exist", "=", "False", ")", "\n", "", "except", "KeyError", ":", "\n", "                    ", "raise", "KeyError", "(", "'Non-existent config key: {}'", ".", "format", "(", "key", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.config.config.SegmentronConfig.remove_irrelevant_cfg": [[77, 92], ["MODEL_REGISTRY.get_list", "config.SegmentronConfig.MODEL.keys", "x.lower", "model_name.lower", "config.SegmentronConfig.MODEL.pop", "pop_keys.append", "key.lower", "key.lower", "model_name.lower"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.utils.registry.Registry.get_list"], ["", "", "", "", "def", "remove_irrelevant_cfg", "(", "self", ")", ":", "\n", "        ", "model_name", "=", "self", ".", "MODEL", ".", "MODEL_NAME", "\n", "\n", "from", ".", ".", "models", ".", "model_zoo", "import", "MODEL_REGISTRY", "\n", "model_list", "=", "MODEL_REGISTRY", ".", "get_list", "(", ")", "\n", "model_list_lower", "=", "[", "x", ".", "lower", "(", ")", "for", "x", "in", "model_list", "]", "\n", "# print('model_list:', model_list)", "\n", "assert", "model_name", ".", "lower", "(", ")", "in", "model_list_lower", ",", "\"Expected model name in {}, but received {}\"", ".", "format", "(", "model_list", ",", "model_name", ")", "\n", "pop_keys", "=", "[", "]", "\n", "for", "key", "in", "self", ".", "MODEL", ".", "keys", "(", ")", ":", "\n", "            ", "if", "key", ".", "lower", "(", ")", "in", "model_list_lower", "and", "key", ".", "lower", "(", ")", "!=", "model_name", ".", "lower", "(", ")", ":", "\n", "                ", "pop_keys", ".", "append", "(", "key", ")", "\n", "", "", "for", "key", "in", "pop_keys", ":", "\n", "            ", "self", ".", "MODEL", ".", "pop", "(", "key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.config.config.SegmentronConfig.check_and_freeze": [[95, 100], ["time.strftime", "config.SegmentronConfig.remove_irrelevant_cfg", "time.localtime"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.config.config.SegmentronConfig.remove_irrelevant_cfg"], ["", "", "def", "check_and_freeze", "(", "self", ")", ":", "\n", "        ", "self", ".", "TIME_STAMP", "=", "time", ".", "strftime", "(", "'%Y-%m-%d-%H-%M'", ",", "time", ".", "localtime", "(", ")", ")", "\n", "# TODO: remove irrelevant config and then freeze", "\n", "self", ".", "remove_irrelevant_cfg", "(", ")", "\n", "self", ".", "immutable", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.config.config.SegmentronConfig.update_from_list": [[101, 111], ["zip", "ValueError", "len", "config.SegmentronConfig.__setattr__", "KeyError"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.config.config.SegmentronConfig.__setattr__"], ["", "def", "update_from_list", "(", "self", ",", "config_list", ")", ":", "\n", "        ", "if", "len", "(", "config_list", ")", "%", "2", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Command line options config format error! Please check it: {}\"", ".", "\n", "format", "(", "config_list", ")", ")", "\n", "", "for", "key", ",", "value", "in", "zip", "(", "config_list", "[", "0", ":", ":", "2", "]", ",", "config_list", "[", "1", ":", ":", "2", "]", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "__setattr__", "(", "key", ",", "value", ",", "create_if_not_exist", "=", "False", ")", "\n", "", "except", "KeyError", ":", "\n", "                ", "raise", "KeyError", "(", "'Non-existent config key: {}'", ".", "format", "(", "key", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.config.config.SegmentronConfig.update_from_file": [[112, 116], ["config.SegmentronConfig.update_from_other_cfg", "codecs.open", "yaml.load"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.config.config.SegmentronConfig.update_from_other_cfg"], ["", "", "", "def", "update_from_file", "(", "self", ",", "config_file", ")", ":", "\n", "        ", "with", "codecs", ".", "open", "(", "config_file", ",", "'r'", ",", "'utf-8'", ")", "as", "file", ":", "\n", "            ", "loaded_cfg", "=", "yaml", ".", "load", "(", "file", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "", "self", ".", "update_from_other_cfg", "(", "loaded_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.config.config.SegmentronConfig.set_immutable": [[117, 122], ["config.SegmentronConfig.values", "isinstance", "value.set_immutable"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.config.config.SegmentronConfig.set_immutable"], ["", "def", "set_immutable", "(", "self", ",", "immutable", ")", ":", "\n", "        ", "self", ".", "immutable", "=", "immutable", "\n", "for", "value", "in", "self", ".", "values", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "value", ",", "SegmentronConfig", ")", ":", "\n", "                ", "value", ".", "set_immutable", "(", "immutable", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.config.config.SegmentronConfig.is_immutable": [[123, 125], ["None"], "methods", ["None"], ["", "", "", "def", "is_immutable", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "immutable", "", "", "", ""]], "home.repos.pwc.inspect_result.yangcao1996_fanet.modules.module._FCNHead.__init__": [[15, 24], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "channels", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "_FCNHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "inter_channels", "=", "in_channels", "//", "4", "\n", "self", ".", "block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "inter_channels", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "inter_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "inter_channels", ",", "channels", ",", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.modules.module._FCNHead.forward": [[26, 28], ["module._FCNHead.block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "block", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.modules.module._A_ASPP.__init__": [[34, 79], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "basic.SeparableConv2d", "basic.SeparableConv2d", "basic.SeparableConv2d", "basic.SeparableConv2d", "basic.SeparableConv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", "=", "2048", ",", "out_channels", "=", "256", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "output_stride", "=", "cfg", ".", "MODEL", ".", "OUTPUT_STRIDE", "\n", "if", "output_stride", "==", "16", ":", "\n", "             ", "dilations", "=", "[", "6", ",", "12", ",", "18", ",", "24", ",", "36", "]", "# maybe this is useless", "\n", "", "elif", "output_stride", "==", "8", ":", "\n", "            ", "dilations", "=", "[", "12", ",", "24", ",", "36", "]", "\n", "", "elif", "output_stride", "==", "32", ":", "\n", "            ", "dilations", "=", "[", "6", ",", "12", ",", "18", "]", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "aspp0", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "'conv'", ",", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "'bn'", ",", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ")", ",", "\n", "(", "'relu'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "]", ")", ")", "\n", "\n", "self", ".", "aspp1", "=", "SeparableConv2d", "(", "in_channels", ",", "out_channels", ",", "dilation", "=", "dilations", "[", "0", "]", ",", "relu_first", "=", "False", ")", "\n", "self", ".", "aspp2", "=", "SeparableConv2d", "(", "in_channels", ",", "out_channels", ",", "dilation", "=", "dilations", "[", "1", "]", ",", "relu_first", "=", "False", ")", "\n", "self", ".", "aspp3", "=", "SeparableConv2d", "(", "in_channels", ",", "out_channels", ",", "dilation", "=", "dilations", "[", "2", "]", ",", "relu_first", "=", "False", ")", "\n", "self", ".", "aspp4", "=", "SeparableConv2d", "(", "in_channels", ",", "out_channels", ",", "dilation", "=", "dilations", "[", "3", "]", ",", "relu_first", "=", "False", ")", "\n", "self", ".", "aspp5", "=", "SeparableConv2d", "(", "in_channels", ",", "out_channels", ",", "dilation", "=", "dilations", "[", "4", "]", ",", "relu_first", "=", "False", ")", "\n", "\n", "self", ".", "image_pooling", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "'gap'", ",", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", ")", ",", "\n", "(", "'conv'", ",", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "'bn'", ",", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ")", ",", "\n", "(", "'relu'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "]", ")", ")", "\n", "\n", "self", ".", "D_avgP", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "D_fc_s", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "'fc0'", ",", "nn", ".", "Linear", "(", "7", ",", "7", ")", ")", ",", "\n", "(", "'relu'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'fc1'", ",", "nn", ".", "Linear", "(", "7", ",", "7", ")", ")", ",", "\n", "(", "'tanh'", ",", "nn", ".", "Tanh", "(", ")", ")", "]", ")", ")", "\n", "self", ".", "D_fc_b", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "'fc0'", ",", "nn", ".", "Linear", "(", "7", ",", "7", ")", ")", ",", "\n", "(", "'relu'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'fc1'", ",", "nn", ".", "Linear", "(", "7", ",", "7", ")", ")", ",", "\n", "(", "'tanh'", ",", "nn", ".", "Tanh", "(", ")", ")", "]", ")", ")", "\n", "self", ".", "D_conv_s", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "'conv'", ",", "nn", ".", "Conv2d", "(", "out_channels", "*", "7", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "'bn'", ",", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ")", ",", "\n", "(", "'relu'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'dropout'", ",", "nn", ".", "Dropout2d", "(", "p", "=", "0.1", ")", ")", "]", ")", ")", "\n", "\n", "self", ".", "D_conv_b", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "'conv'", ",", "nn", ".", "Conv2d", "(", "out_channels", "*", "7", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "'bn'", ",", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ")", ",", "\n", "(", "'relu'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'dropout'", ",", "nn", ".", "Dropout2d", "(", "p", "=", "0.1", ")", ")", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.modules.module._A_ASPP.stretch": [[84, 89], ["torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["None"], ["", "def", "stretch", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_min", ",", "_", "=", "(", "torch", ".", "min", "(", "x", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ")", "\n", "x_max", ",", "_", "=", "(", "torch", ".", "max", "(", "x", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ")", "\n", "y", "=", "(", "x", "-", "x_min", ")", "/", "(", "x_max", "-", "x_min", "+", "1e-32", ")", "*", "1.0", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.modules.module._A_ASPP.forward": [[90, 150], ["module._A_ASPP.image_pooling", "torch.interpolate", "torch.interpolate", "torch.interpolate", "module._A_ASPP.aspp0", "module._A_ASPP.aspp1", "module._A_ASPP.aspp2", "module._A_ASPP.aspp3", "module._A_ASPP.aspp4", "module._A_ASPP.aspp5", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "module._A_ASPP.stretch", "module._A_ASPP.stretch", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "module._A_ASPP.D_conv_s", "module._A_ASPP.D_conv_b", "module._A_ASPP.D_avgP", "module._A_ASPP.D_avgP", "module._A_ASPP.D_avgP", "module._A_ASPP.D_avgP", "module._A_ASPP.D_avgP", "module._A_ASPP.D_avgP", "module._A_ASPP.D_avgP", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "module._A_ASPP.D_fc_s", "module._A_ASPP.D_fc_b", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze.cpu().numpy", "torch.squeeze.cpu().numpy", "torch.squeeze.cpu().numpy", "torch.squeeze.cpu().numpy", "torch.squeeze.cpu().numpy", "torch.squeeze.cpu().numpy", "torch.squeeze.cpu", "torch.squeeze.cpu", "torch.squeeze.cpu", "torch.squeeze.cpu", "torch.squeeze.cpu", "torch.squeeze.cpu"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.modules.module._A_ASPP.stretch", "home.repos.pwc.inspect_result.yangcao1996_fanet.modules.module._A_ASPP.stretch"], ["", "def", "forward", "(", "self", ",", "x", ",", "show_scores", "=", "False", ")", ":", "\n", "        ", "pool", "=", "self", ".", "image_pooling", "(", "x", ")", "\n", "pool", "=", "F", ".", "interpolate", "(", "pool", ",", "size", "=", "x", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "x0", "=", "self", ".", "aspp0", "(", "x", ")", "\n", "x1", "=", "self", ".", "aspp1", "(", "x", ")", "\n", "x2", "=", "self", ".", "aspp2", "(", "x", ")", "\n", "x3", "=", "self", ".", "aspp3", "(", "x", ")", "\n", "x4", "=", "self", ".", "aspp4", "(", "x", ")", "\n", "x5", "=", "self", ".", "aspp5", "(", "x", ")", "\n", "\n", "\n", "pool_d0", "=", "torch", ".", "mean", "(", "self", ".", "D_avgP", "(", "pool", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "x0_d0", "=", "torch", ".", "mean", "(", "self", ".", "D_avgP", "(", "x0", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "x1_d0", "=", "torch", ".", "mean", "(", "self", ".", "D_avgP", "(", "x1", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "x2_d0", "=", "torch", ".", "mean", "(", "self", ".", "D_avgP", "(", "x2", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "x3_d0", "=", "torch", ".", "mean", "(", "self", ".", "D_avgP", "(", "x3", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "x4_d0", "=", "torch", ".", "mean", "(", "self", ".", "D_avgP", "(", "x4", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "x5_d0", "=", "torch", ".", "mean", "(", "self", ".", "D_avgP", "(", "x5", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "xall_d1", "=", "torch", ".", "squeeze", "(", "torch", ".", "squeeze", "(", "torch", ".", "cat", "(", "(", "pool_d0", ",", "x0_d0", ",", "x1_d0", ",", "x2_d0", ",", "x3_d0", ",", "x4_d0", ",", "x5_d0", ")", ",", "dim", "=", "1", ")", ",", "-", "1", ")", ",", "-", "1", ")", "# shape (batch_size, 7)", "\n", "\n", "xs_d2", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "unsqueeze", "(", "torch", ".", "unsqueeze", "(", "self", ".", "D_fc_s", "(", "xall_d1", ")", ",", "-", "1", ")", ",", "-", "1", ")", ",", "-", "1", ")", "\n", "xb_d2", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "unsqueeze", "(", "torch", ".", "unsqueeze", "(", "self", ".", "D_fc_b", "(", "xall_d1", ")", ",", "-", "1", ")", ",", "-", "1", ")", ",", "-", "1", ")", "\n", "#print('-------------------------------')", "\n", "#print(self.D_fc_s(xall_d1))", "\n", "#print(self.D_fc_b(xall_d1))", "\n", "#print(pool.shape) ", "\n", "\n", "\n", "zero_tensor", "=", "torch", ".", "zeros", "(", "1", ")", ".", "cuda", "(", ")", "\n", "xs_d2", "=", "torch", ".", "max", "(", "xs_d2", ",", "zero_tensor", ")", "\n", "xb_d2", "=", "torch", ".", "max", "(", "xb_d2", ",", "zero_tensor", ")", "\n", "\n", "#print('---------------------------')", "\n", "#print(xs_d2)", "\n", "#print(xb_d2)", "\n", "\n", "\n", "xs_d2", "=", "self", ".", "stretch", "(", "xs_d2", ")", "\n", "xb_d2", "=", "self", ".", "stretch", "(", "xb_d2", ")", "\n", "\n", "\n", "if", "(", "show_scores", ")", ":", "\n", "            ", "seg_scores", "=", "torch", ".", "squeeze", "(", "torch", ".", "squeeze", "(", "torch", ".", "squeeze", "(", "xs_d2", ",", "-", "1", ")", ",", "-", "1", ")", ",", "-", "1", ")", "\n", "bod_scores", "=", "torch", ".", "squeeze", "(", "torch", ".", "squeeze", "(", "torch", ".", "squeeze", "(", "xb_d2", ",", "-", "1", ")", ",", "-", "1", ")", ",", "-", "1", ")", "\n", "\n", "", "xs_d2", "=", "xs_d2", "+", "1.0", "\n", "xb_d2", "=", "xb_d2", "+", "1.0", "\n", "xs", "=", "torch", ".", "cat", "(", "(", "pool", "*", "xs_d2", "[", ":", ",", "0", "]", ",", "x0", "*", "xs_d2", "[", ":", ",", "1", "]", ",", "x1", "*", "xs_d2", "[", ":", ",", "2", "]", ",", "x2", "*", "xs_d2", "[", ":", ",", "3", "]", ",", "x3", "*", "xs_d2", "[", ":", ",", "4", "]", ",", "x4", "*", "xs_d2", "[", ":", ",", "5", "]", ",", "x5", "*", "xs_d2", "[", ":", ",", "6", "]", ")", ",", "dim", "=", "1", ")", "\n", "\n", "xb", "=", "torch", ".", "cat", "(", "(", "pool", "*", "xb_d2", "[", ":", ",", "0", "]", ",", "x0", "*", "xb_d2", "[", ":", ",", "1", "]", ",", "x1", "*", "xb_d2", "[", ":", ",", "2", "]", ",", "x2", "*", "xb_d2", "[", ":", ",", "3", "]", ",", "x3", "*", "xb_d2", "[", ":", ",", "4", "]", ",", "x4", "*", "xb_d2", "[", ":", ",", "5", "]", ",", "x5", "*", "xb_d2", "[", ":", ",", "6", "]", ")", ",", "dim", "=", "1", ")", "\n", "\n", "xs", "=", "self", ".", "D_conv_s", "(", "xs", ")", "\n", "xb", "=", "self", ".", "D_conv_b", "(", "xb", ")", "\n", "\n", "if", "(", "show_scores", ")", ":", "\n", "            ", "return", "xs", ",", "xb", ",", "{", "'seg'", ":", "seg_scores", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "'bod'", ":", "bod_scores", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "}", "\n", "", "else", ":", "\n", "            ", "return", "xs", ",", "xb", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.modules.module._ASPP.__init__": [[157, 185], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "basic.SeparableConv2d", "basic.SeparableConv2d", "basic.SeparableConv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "collections.OrderedDict", "collections.OrderedDict", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", "=", "2048", ",", "out_channels", "=", "256", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "output_stride", "=", "cfg", ".", "MODEL", ".", "OUTPUT_STRIDE", "\n", "if", "output_stride", "==", "16", ":", "\n", "            ", "dilations", "=", "[", "6", ",", "12", ",", "18", "]", "\n", "", "elif", "output_stride", "==", "8", ":", "\n", "            ", "dilations", "=", "[", "12", ",", "24", ",", "36", "]", "\n", "", "elif", "output_stride", "==", "32", ":", "\n", "            ", "dilations", "=", "[", "6", ",", "12", ",", "18", "]", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "aspp0", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "'conv'", ",", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "'bn'", ",", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ")", ",", "\n", "(", "'relu'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "]", ")", ")", "\n", "self", ".", "aspp1", "=", "SeparableConv2d", "(", "in_channels", ",", "out_channels", ",", "dilation", "=", "dilations", "[", "0", "]", ",", "relu_first", "=", "False", ")", "\n", "self", ".", "aspp2", "=", "SeparableConv2d", "(", "in_channels", ",", "out_channels", ",", "dilation", "=", "dilations", "[", "1", "]", ",", "relu_first", "=", "False", ")", "\n", "self", ".", "aspp3", "=", "SeparableConv2d", "(", "in_channels", ",", "out_channels", ",", "dilation", "=", "dilations", "[", "2", "]", ",", "relu_first", "=", "False", ")", "\n", "\n", "self", ".", "image_pooling", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "'gap'", ",", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", ")", ",", "\n", "(", "'conv'", ",", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "'bn'", ",", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ")", ",", "\n", "(", "'relu'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "]", ")", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "out_channels", "*", "5", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout2d", "(", "p", "=", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.modules.module._ASPP.forward": [[186, 202], ["module._ASPP.image_pooling", "torch.interpolate", "torch.interpolate", "torch.interpolate", "module._ASPP.aspp0", "module._ASPP.aspp1", "module._ASPP.aspp2", "module._ASPP.aspp3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "module._ASPP.conv", "module._ASPP.bn", "module._ASPP.relu", "module._ASPP.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "pool", "=", "self", ".", "image_pooling", "(", "x", ")", "\n", "pool", "=", "F", ".", "interpolate", "(", "pool", ",", "size", "=", "x", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "x0", "=", "self", ".", "aspp0", "(", "x", ")", "\n", "x1", "=", "self", ".", "aspp1", "(", "x", ")", "\n", "x2", "=", "self", ".", "aspp2", "(", "x", ")", "\n", "x3", "=", "self", ".", "aspp3", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "pool", ",", "x0", ",", "x1", ",", "x2", ",", "x3", ")", ",", "dim", "=", "1", ")", "\n", "\n", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.modules.module.PyramidPooling.__init__": [[207, 215], ["torch.Module.__init__", "int", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "module.PyramidPooling.avgpools.append", "module.PyramidPooling.convs.append", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "basic._ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "sizes", "=", "(", "1", ",", "2", ",", "3", ",", "6", ")", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "PyramidPooling", ",", "self", ")", ".", "__init__", "(", ")", "\n", "out_channels", "=", "int", "(", "in_channels", "/", "4", ")", "\n", "self", ".", "avgpools", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "size", "in", "sizes", ":", "\n", "            ", "self", ".", "avgpools", ".", "append", "(", "nn", ".", "AdaptiveAvgPool2d", "(", "size", ")", ")", "\n", "self", ".", "convs", ".", "append", "(", "_ConvBNReLU", "(", "in_channels", ",", "out_channels", ",", "1", ",", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.modules.module.PyramidPooling.forward": [[216, 222], ["zip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x.size", "feats.append", "torch.interpolate", "torch.interpolate", "torch.interpolate", "conv", "avgpool"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "size", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "feats", "=", "[", "x", "]", "\n", "for", "(", "avgpool", ",", "conv", ")", "in", "zip", "(", "self", ".", "avgpools", ",", "self", ".", "convs", ")", ":", "\n", "            ", "feats", ".", "append", "(", "F", ".", "interpolate", "(", "conv", "(", "avgpool", "(", "x", ")", ")", ",", "size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", ")", "\n", "", "return", "torch", ".", "cat", "(", "feats", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.modules.module.PAM_Module.__init__": [[226, 235], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["def", "__init__", "(", "self", ",", "in_dim", ")", ":", "\n", "        ", "super", "(", "PAM_Module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "chanel_in", "=", "in_dim", "\n", "\n", "self", ".", "query_conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_dim", ",", "out_channels", "=", "in_dim", "//", "8", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "key_conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_dim", ",", "out_channels", "=", "in_dim", "//", "8", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "value_conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_dim", ",", "out_channels", "=", "in_dim", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.modules.module.PAM_Module.forward": [[236, 256], ["x.size", "module.PAM_Module.query_conv().view().permute", "module.PAM_Module.key_conv().view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "module.PAM_Module.softmax", "module.PAM_Module.value_conv().view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "out.view.view.view", "module.PAM_Module.permute", "module.PAM_Module.query_conv().view", "module.PAM_Module.key_conv", "module.PAM_Module.value_conv", "module.PAM_Module.query_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n            inputs :\n                x : input feature maps( B X C X H X W)\n            returns :\n                out : attention value + input feature\n                attention: B X (HxW) X (HxW)\n        \"\"\"", "\n", "m_batchsize", ",", "C", ",", "height", ",", "width", "=", "x", ".", "size", "(", ")", "\n", "proj_query", "=", "self", ".", "query_conv", "(", "x", ")", ".", "view", "(", "m_batchsize", ",", "-", "1", ",", "width", "*", "height", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "proj_key", "=", "self", ".", "key_conv", "(", "x", ")", ".", "view", "(", "m_batchsize", ",", "-", "1", ",", "width", "*", "height", ")", "\n", "energy", "=", "torch", ".", "bmm", "(", "proj_query", ",", "proj_key", ")", "\n", "attention", "=", "self", ".", "softmax", "(", "energy", ")", "\n", "proj_value", "=", "self", ".", "value_conv", "(", "x", ")", ".", "view", "(", "m_batchsize", ",", "-", "1", ",", "width", "*", "height", ")", "\n", "\n", "out", "=", "torch", ".", "bmm", "(", "proj_value", ",", "attention", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "out", "=", "out", ".", "view", "(", "m_batchsize", ",", "C", ",", "height", ",", "width", ")", "\n", "\n", "out", "=", "self", ".", "gamma", "*", "out", "+", "x", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.modules.module.CAM_Module.__init__": [[260, 265], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["def", "__init__", "(", "self", ",", "in_dim", ")", ":", "\n", "        ", "super", "(", "CAM_Module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "chanel_in", "=", "in_dim", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.modules.module.CAM_Module.forward": [[266, 287], ["x.size", "x.view", "x.view().permute", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "module.CAM_Module.softmax", "x.view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "out.view.view.view", "[].expand_as", "x.view", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n            inputs :\n                x : input feature maps( B X C X H X W)\n            returns :\n                out : attention value + input feature\n                attention: B X C X C\n        \"\"\"", "\n", "m_batchsize", ",", "C", ",", "height", ",", "width", "=", "x", ".", "size", "(", ")", "\n", "proj_query", "=", "x", ".", "view", "(", "m_batchsize", ",", "C", ",", "-", "1", ")", "\n", "proj_key", "=", "x", ".", "view", "(", "m_batchsize", ",", "C", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "energy", "=", "torch", ".", "bmm", "(", "proj_query", ",", "proj_key", ")", "\n", "energy_new", "=", "torch", ".", "max", "(", "energy", ",", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", ".", "expand_as", "(", "energy", ")", "-", "energy", "\n", "attention", "=", "self", ".", "softmax", "(", "energy_new", ")", "\n", "proj_value", "=", "x", ".", "view", "(", "m_batchsize", ",", "C", ",", "-", "1", ")", "\n", "\n", "out", "=", "torch", ".", "bmm", "(", "attention", ",", "proj_value", ")", "\n", "out", "=", "out", ".", "view", "(", "m_batchsize", ",", "C", ",", "height", ",", "width", ")", "\n", "\n", "out", "=", "self", ".", "gamma", "*", "out", "+", "x", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.modules.module.EESP.__init__": [[291, 315], ["torch.Module.__init__", "int", "basic._ConvBNPReLU", "list", "range", "module.EESP.k_sizes.sort", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "basic._ConvBN", "basic._BNPReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU", "int", "module.EESP.k_sizes.append", "module.EESP.spp_dw.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "stride", "=", "1", ",", "k", "=", "4", ",", "r_lim", "=", "7", ",", "down_method", "=", "'esp'", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "EESP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "n", "=", "int", "(", "out_channels", "/", "k", ")", "\n", "n1", "=", "out_channels", "-", "(", "k", "-", "1", ")", "*", "n", "\n", "assert", "down_method", "in", "[", "'avg'", ",", "'esp'", "]", ",", "'One of these is suppported (avg or esp)'", "\n", "assert", "n", "==", "n1", ",", "\"n(={}) and n1(={}) should be equal for Depth-wise Convolution \"", ".", "format", "(", "n", ",", "n1", ")", "\n", "self", ".", "proj_1x1", "=", "_ConvBNPReLU", "(", "in_channels", ",", "n", ",", "1", ",", "stride", "=", "1", ",", "groups", "=", "k", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n", "map_receptive_ksize", "=", "{", "3", ":", "1", ",", "5", ":", "2", ",", "7", ":", "3", ",", "9", ":", "4", ",", "11", ":", "5", ",", "13", ":", "6", ",", "15", ":", "7", ",", "17", ":", "8", "}", "\n", "self", ".", "k_sizes", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "k", ")", ":", "\n", "            ", "ksize", "=", "int", "(", "3", "+", "2", "*", "i", ")", "\n", "ksize", "=", "ksize", "if", "ksize", "<=", "r_lim", "else", "3", "\n", "self", ".", "k_sizes", ".", "append", "(", "ksize", ")", "\n", "", "self", ".", "k_sizes", ".", "sort", "(", ")", "\n", "self", ".", "spp_dw", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "k", ")", ":", "\n", "            ", "dilation", "=", "map_receptive_ksize", "[", "self", ".", "k_sizes", "[", "i", "]", "]", "\n", "self", ".", "spp_dw", ".", "append", "(", "nn", ".", "Conv2d", "(", "n", ",", "n", ",", "3", ",", "stride", ",", "dilation", ",", "dilation", "=", "dilation", ",", "groups", "=", "n", ",", "bias", "=", "False", ")", ")", "\n", "", "self", ".", "conv_1x1_exp", "=", "_ConvBN", "(", "out_channels", ",", "out_channels", ",", "1", ",", "1", ",", "groups", "=", "k", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "br_after_cat", "=", "_BNPReLU", "(", "out_channels", ",", "norm_layer", ")", "\n", "self", ".", "module_act", "=", "nn", ".", "PReLU", "(", "out_channels", ")", "\n", "self", ".", "downAvg", "=", "True", "if", "down_method", "==", "'avg'", "else", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.modules.module.EESP.forward": [[316, 332], ["module.EESP.proj_1x1", "range", "module.EESP.conv_1x1_exp", "module.EESP.module_act", "len", "output.append", "module.EESP.br_after_cat", "module.EESP.size", "x.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "output1", "=", "self", ".", "proj_1x1", "(", "x", ")", "\n", "output", "=", "[", "self", ".", "spp_dw", "[", "0", "]", "(", "output1", ")", "]", "\n", "for", "k", "in", "range", "(", "1", ",", "len", "(", "self", ".", "spp_dw", ")", ")", ":", "\n", "            ", "out_k", "=", "self", ".", "spp_dw", "[", "k", "]", "(", "output1", ")", "\n", "out_k", "=", "out_k", "+", "output", "[", "k", "-", "1", "]", "\n", "output", ".", "append", "(", "out_k", ")", "\n", "", "expanded", "=", "self", ".", "conv_1x1_exp", "(", "self", ".", "br_after_cat", "(", "torch", ".", "cat", "(", "output", ",", "1", ")", ")", ")", "\n", "del", "output", "\n", "if", "self", ".", "stride", "==", "2", "and", "self", ".", "downAvg", ":", "\n", "            ", "return", "expanded", "\n", "\n", "", "if", "expanded", ".", "size", "(", ")", "==", "x", ".", "size", "(", ")", ":", "\n", "            ", "expanded", "=", "expanded", "+", "x", "\n", "\n", "", "return", "self", ".", "module_act", "(", "expanded", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yangcao1996_fanet.modules.batch_norm.FrozenBatchNorm2d.__init__": [[32, 40], ["torch.nn.Module.__init__", "batch_norm.FrozenBatchNorm2d.register_buffer", "batch_norm.FrozenBatchNorm2d.register_buffer", "batch_norm.FrozenBatchNorm2d.register_buffer", "batch_norm.FrozenBatchNorm2d.register_buffer", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "register_buffer", "(", "\"weight\"", ",", "torch", ".", "ones", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"bias\"", ",", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"running_mean\"", ",", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"running_var\"", ",", "torch", ".", "ones", "(", "num_features", ")", "-", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.modules.batch_norm.FrozenBatchNorm2d.forward": [[41, 47], ["scale.reshape.reshape.reshape", "bias.reshape.reshape.reshape"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "scale", "=", "self", ".", "weight", "*", "(", "self", ".", "running_var", "+", "self", ".", "eps", ")", ".", "rsqrt", "(", ")", "\n", "bias", "=", "self", ".", "bias", "-", "self", ".", "running_mean", "*", "scale", "\n", "scale", "=", "scale", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "bias", "=", "bias", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "return", "x", "*", "scale", "+", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.modules.batch_norm.FrozenBatchNorm2d._load_from_state_dict": [[48, 69], ["local_metadata.get", "super()._load_from_state_dict", "logging.info", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "prefix.rstrip"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.utils.score.SegmentationMetric.get", "home.repos.pwc.inspect_result.yangcao1996_fanet.modules.batch_norm.FrozenBatchNorm2d._load_from_state_dict"], ["", "def", "_load_from_state_dict", "(", "\n", "self", ",", "state_dict", ",", "prefix", ",", "local_metadata", ",", "strict", ",", "missing_keys", ",", "unexpected_keys", ",", "error_msgs", "\n", ")", ":", "\n", "        ", "version", "=", "local_metadata", ".", "get", "(", "\"version\"", ",", "None", ")", "\n", "\n", "if", "version", "is", "None", "or", "version", "<", "2", ":", "\n", "# No running_mean/var in early versions", "\n", "# This will silent the warnings", "\n", "            ", "if", "prefix", "+", "\"running_mean\"", "not", "in", "state_dict", ":", "\n", "                ", "state_dict", "[", "prefix", "+", "\"running_mean\"", "]", "=", "torch", ".", "zeros_like", "(", "self", ".", "running_mean", ")", "\n", "", "if", "prefix", "+", "\"running_var\"", "not", "in", "state_dict", ":", "\n", "                ", "state_dict", "[", "prefix", "+", "\"running_var\"", "]", "=", "torch", ".", "ones_like", "(", "self", ".", "running_var", ")", "\n", "\n", "", "", "if", "version", "is", "not", "None", "and", "version", "<", "3", ":", "\n", "# logger = logging.getLogger(__name__)", "\n", "            ", "logging", ".", "info", "(", "\"FrozenBatchNorm {} is upgraded to version 3.\"", ".", "format", "(", "prefix", ".", "rstrip", "(", "\".\"", ")", ")", ")", "\n", "# In version < 3, running_var are used without +eps.", "\n", "state_dict", "[", "prefix", "+", "\"running_var\"", "]", "-=", "self", ".", "eps", "\n", "\n", "", "super", "(", ")", ".", "_load_from_state_dict", "(", "\n", "state_dict", ",", "prefix", ",", "local_metadata", ",", "strict", ",", "missing_keys", ",", "unexpected_keys", ",", "error_msgs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.modules.batch_norm.FrozenBatchNorm2d.__repr__": [[71, 73], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"FrozenBatchNorm2d(num_features={}, eps={})\"", ".", "format", "(", "self", ".", "num_features", ",", "self", ".", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.modules.batch_norm.FrozenBatchNorm2d.convert_frozen_batchnorm": [[74, 105], ["isinstance", "cls", "module.named_children", "module.weight.data.clone().detach", "module.bias.data.clone().detach", "cls.convert_frozen_batchnorm", "cls.add_module", "module.weight.data.clone", "module.bias.data.clone"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.modules.batch_norm.FrozenBatchNorm2d.convert_frozen_batchnorm"], ["", "@", "classmethod", "\n", "def", "convert_frozen_batchnorm", "(", "cls", ",", "module", ")", ":", "\n", "        ", "\"\"\"\n        Convert BatchNorm/SyncBatchNorm in module into FrozenBatchNorm.\n\n        Args:\n            module (torch.nn.Module):\n\n        Returns:\n            If module is BatchNorm/SyncBatchNorm, returns a new module.\n            Otherwise, in-place convert module and return it.\n\n        Similar to convert_sync_batchnorm in\n        https://github.com/pytorch/pytorch/blob/master/torch/nn/modules/batchnorm.py\n        \"\"\"", "\n", "bn_module", "=", "nn", ".", "modules", ".", "batchnorm", "\n", "bn_module", "=", "(", "bn_module", ".", "BatchNorm2d", ",", "bn_module", ".", "SyncBatchNorm", ")", "\n", "res", "=", "module", "\n", "if", "isinstance", "(", "module", ",", "bn_module", ")", ":", "\n", "            ", "res", "=", "cls", "(", "module", ".", "num_features", ")", "\n", "if", "module", ".", "affine", ":", "\n", "                ", "res", ".", "weight", ".", "data", "=", "module", ".", "weight", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "res", ".", "bias", ".", "data", "=", "module", ".", "bias", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "", "res", ".", "running_mean", ".", "data", "=", "module", ".", "running_mean", ".", "data", "\n", "res", ".", "running_var", ".", "data", "=", "module", ".", "running_var", ".", "data", "+", "module", ".", "eps", "\n", "", "else", ":", "\n", "            ", "for", "name", ",", "child", "in", "module", ".", "named_children", "(", ")", ":", "\n", "                ", "new_child", "=", "cls", ".", "convert_frozen_batchnorm", "(", "child", ")", "\n", "if", "new_child", "is", "not", "child", ":", "\n", "                    ", "res", ".", "add_module", "(", "name", ",", "new_child", ")", "\n", "", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.modules.batch_norm.AllReduce.forward": [[136, 143], ["torch.all_gather", "torch.all_gather", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "torch.get_world_size", "torch.get_world_size"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.all_gather", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.all_gather", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.get_world_size", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.get_world_size"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ")", ":", "\n", "        ", "input_list", "=", "[", "torch", ".", "zeros_like", "(", "input", ")", "for", "k", "in", "range", "(", "dist", ".", "get_world_size", "(", ")", ")", "]", "\n", "# Use allgather instead of allreduce since I don't trust in-place operations ..", "\n", "dist", ".", "all_gather", "(", "input_list", ",", "input", ",", "async_op", "=", "False", ")", "\n", "inputs", "=", "torch", ".", "stack", "(", "input_list", ",", "dim", "=", "0", ")", "\n", "return", "torch", ".", "sum", "(", "inputs", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.modules.batch_norm.AllReduce.backward": [[144, 148], ["torch.all_reduce", "torch.all_reduce"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "dist", ".", "all_reduce", "(", "grad_output", ",", "async_op", "=", "False", ")", "\n", "return", "grad_output", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.modules.batch_norm.NaiveSyncBatchNorm.forward": [[161, 184], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.split", "torch.split", "torch.split", "torch.split", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "scale.reshape.reshape.reshape", "bias.reshape.reshape.reshape", "super().forward", "AllReduce.apply", "utils.distributed.get_world_size", "torch.get_world_size", "torch.get_world_size", "torch.mean.detach", "torch.mean.detach", "var.detach"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.DiceLoss.forward", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.get_world_size", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.get_world_size", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.distributed.get_world_size"], ["def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "get_world_size", "(", ")", "==", "1", "or", "not", "self", ".", "training", ":", "\n", "            ", "return", "super", "(", ")", ".", "forward", "(", "input", ")", "\n", "\n", "", "assert", "input", ".", "shape", "[", "0", "]", ">", "0", ",", "\"SyncBatchNorm does not support empty inputs\"", "\n", "C", "=", "input", ".", "shape", "[", "1", "]", "\n", "mean", "=", "torch", ".", "mean", "(", "input", ",", "dim", "=", "[", "0", ",", "2", ",", "3", "]", ")", "\n", "meansqr", "=", "torch", ".", "mean", "(", "input", "*", "input", ",", "dim", "=", "[", "0", ",", "2", ",", "3", "]", ")", "\n", "\n", "vec", "=", "torch", ".", "cat", "(", "[", "mean", ",", "meansqr", "]", ",", "dim", "=", "0", ")", "\n", "vec", "=", "AllReduce", ".", "apply", "(", "vec", ")", "*", "(", "1.0", "/", "dist", ".", "get_world_size", "(", ")", ")", "\n", "\n", "mean", ",", "meansqr", "=", "torch", ".", "split", "(", "vec", ",", "C", ")", "\n", "var", "=", "meansqr", "-", "mean", "*", "mean", "\n", "self", ".", "running_mean", "+=", "self", ".", "momentum", "*", "(", "mean", ".", "detach", "(", ")", "-", "self", ".", "running_mean", ")", "\n", "self", ".", "running_var", "+=", "self", ".", "momentum", "*", "(", "var", ".", "detach", "(", ")", "-", "self", ".", "running_var", ")", "\n", "\n", "invstd", "=", "torch", ".", "rsqrt", "(", "var", "+", "self", ".", "eps", ")", "\n", "scale", "=", "self", ".", "weight", "*", "invstd", "\n", "bias", "=", "self", ".", "bias", "-", "mean", "*", "scale", "\n", "scale", "=", "scale", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "bias", "=", "bias", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "return", "input", "*", "scale", "+", "bias", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yangcao1996_fanet.modules.batch_norm.groupNorm": [[107, 109], ["torch.nn.GroupNorm", "min"], "function", ["None"], ["", "", "def", "groupNorm", "(", "num_channels", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ")", ":", "\n", "    ", "return", "nn", ".", "GroupNorm", "(", "min", "(", "32", ",", "num_channels", ")", ",", "num_channels", ",", "eps", "=", "eps", ",", "affine", "=", "affine", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.modules.batch_norm.get_norm": [[111, 133], ["isinstance", "len"], "function", ["None"], ["", "def", "get_norm", "(", "norm", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        norm (str or callable):\n\n    Returns:\n        nn.Module or None: the normalization layer\n    \"\"\"", "\n", "support_norm_type", "=", "[", "'BN'", ",", "'SyncBN'", ",", "'FrozenBN'", ",", "'GN'", ",", "'nnSyncBN'", "]", "\n", "assert", "norm", "in", "support_norm_type", ",", "'Unknown norm type {}, support norm types are {}'", ".", "format", "(", "\n", "norm", ",", "support_norm_type", ")", "\n", "if", "isinstance", "(", "norm", ",", "str", ")", ":", "\n", "        ", "if", "len", "(", "norm", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "", "norm", "=", "{", "\n", "\"BN\"", ":", "nn", ".", "BatchNorm2d", ",", "\n", "\"SyncBN\"", ":", "NaiveSyncBatchNorm", ",", "\n", "\"FrozenBN\"", ":", "FrozenBatchNorm2d", ",", "\n", "\"GN\"", ":", "groupNorm", ",", "\n", "\"nnSyncBN\"", ":", "nn", ".", "SyncBatchNorm", ",", "# keep for debugging", "\n", "}", "[", "norm", "]", "\n", "", "return", "norm", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.modules.cc_attention._CAWeight.forward": [[12, 19], ["segmentron._C.ca_forward", "ctx.save_for_backward"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "t", ",", "f", ")", ":", "\n", "        ", "weight", "=", "_C", ".", "ca_forward", "(", "t", ",", "f", ")", "\n", "\n", "ctx", ".", "save_for_backward", "(", "t", ",", "f", ")", "\n", "\n", "return", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.modules.cc_attention._CAWeight.backward": [[20, 27], ["segmentron._C.ca_backward"], "methods", ["None"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "dw", ")", ":", "\n", "        ", "t", ",", "f", "=", "ctx", ".", "saved_tensors", "\n", "\n", "dt", ",", "df", "=", "_C", ".", "ca_backward", "(", "dw", ",", "t", ",", "f", ")", "\n", "return", "dt", ",", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.modules.cc_attention._CAMap.forward": [[30, 37], ["segmentron._C.ca_map_forward", "ctx.save_for_backward"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "weight", ",", "g", ")", ":", "\n", "        ", "out", "=", "_C", ".", "ca_map_forward", "(", "weight", ",", "g", ")", "\n", "\n", "ctx", ".", "save_for_backward", "(", "weight", ",", "g", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.modules.cc_attention._CAMap.backward": [[38, 46], ["segmentron._C.ca_map_backward"], "methods", ["None"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "dout", ")", ":", "\n", "        ", "weight", ",", "g", "=", "ctx", ".", "saved_tensors", "\n", "\n", "dw", ",", "dg", "=", "_C", ".", "ca_map_backward", "(", "dout", ",", "weight", ",", "g", ")", "\n", "\n", "return", "dw", ",", "dg", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.modules.cc_attention.CrissCrossAttention.__init__": [[55, 61], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "CrissCrossAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "query_conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", "//", "8", ",", "1", ")", "\n", "self", ".", "key_conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", "//", "8", ",", "1", ")", "\n", "self", ".", "value_conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", ",", "1", ")", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.modules.cc_attention.CrissCrossAttention.forward": [[62, 73], ["cc_attention.CrissCrossAttention.query_conv", "cc_attention.CrissCrossAttention.key_conv", "cc_attention.CrissCrossAttention.value_conv", "ca_weight", "torch.softmax", "torch.softmax", "torch.softmax", "ca_map"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "proj_query", "=", "self", ".", "query_conv", "(", "x", ")", "\n", "proj_key", "=", "self", ".", "key_conv", "(", "x", ")", "\n", "proj_value", "=", "self", ".", "value_conv", "(", "x", ")", "\n", "\n", "energy", "=", "ca_weight", "(", "proj_query", ",", "proj_key", ")", "\n", "attention", "=", "F", ".", "softmax", "(", "energy", ",", "1", ")", "\n", "out", "=", "ca_map", "(", "attention", ",", "proj_value", ")", "\n", "out", "=", "self", ".", "gamma", "*", "out", "+", "x", "\n", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yangcao1996_fanet.modules.basic.SeparableConv2d.__init__": [[35, 67], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Sequential", "torch.Sequential", "collections.OrderedDict", "torch.Sequential", "torch.Sequential", "collections.OrderedDict", "torch.Sequential", "torch.Sequential", "collections.OrderedDict", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "relu_first", "=", "True", ",", "\n", "bias", "=", "False", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "sigmoid_last", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "depthwise", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "inplanes", ",", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "dilation", ",", "\n", "dilation", "=", "dilation", ",", "groups", "=", "inplanes", ",", "bias", "=", "bias", ")", "\n", "bn_depth", "=", "norm_layer", "(", "inplanes", ")", "\n", "pointwise", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "1", ",", "bias", "=", "bias", ")", "\n", "bn_point", "=", "norm_layer", "(", "planes", ")", "\n", "\n", "if", "relu_first", ":", "\n", "            ", "self", ".", "block", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "'relu'", ",", "nn", ".", "ReLU", "(", ")", ")", ",", "\n", "(", "'depthwise'", ",", "depthwise", ")", ",", "\n", "(", "'bn_depth'", ",", "bn_depth", ")", ",", "\n", "(", "'pointwise'", ",", "pointwise", ")", ",", "\n", "(", "'bn_point'", ",", "bn_point", ")", "\n", "]", ")", ")", "\n", "", "elif", "(", "not", "relu_first", ")", "and", "(", "not", "sigmoid_last", ")", ":", "\n", "            ", "self", ".", "block", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "'depthwise'", ",", "depthwise", ")", ",", "\n", "(", "'bn_depth'", ",", "bn_depth", ")", ",", "\n", "(", "'relu1'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'pointwise'", ",", "pointwise", ")", ",", "\n", "(", "'bn_point'", ",", "bn_point", ")", ",", "\n", "(", "'relu2'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "]", ")", ")", "\n", "", "elif", "(", "not", "relu_first", ")", "and", "(", "sigmoid_last", ")", ":", "\n", "            ", "self", ".", "block", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "'depthwise'", ",", "depthwise", ")", ",", "\n", "(", "'bn_depth'", ",", "bn_depth", ")", ",", "\n", "(", "'relu1'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'pointwise'", ",", "pointwise", ")", ",", "\n", "(", "'bn_point'", ",", "bn_point", ")", ",", "\n", "(", "'sigmoid'", ",", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.modules.basic.SeparableConv2d.forward": [[69, 71], ["basic.SeparableConv2d.block"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "block", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.modules.basic._ConvBNReLU.__init__": [[74, 80], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU6", "torch.ReLU6", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "groups", "=", "1", ",", "relu6", "=", "False", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "_ConvBNReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "norm_layer", "(", "out_channels", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU6", "(", "True", ")", "if", "relu6", "else", "nn", ".", "ReLU", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.modules.basic._ConvBNReLU.forward": [[81, 86], ["basic._ConvBNReLU.conv", "basic._ConvBNReLU.bn", "basic._ConvBNReLU.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.modules.basic._ConvBNPReLU.__init__": [[89, 95], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.PReLU", "torch.PReLU"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "groups", "=", "1", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "_ConvBNPReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "norm_layer", "(", "out_channels", ")", "\n", "self", ".", "prelu", "=", "nn", ".", "PReLU", "(", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.modules.basic._ConvBNPReLU.forward": [[96, 101], ["basic._ConvBNPReLU.conv", "basic._ConvBNPReLU.bn", "basic._ConvBNPReLU.prelu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "prelu", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.modules.basic._ConvBN.__init__": [[104, 109], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "groups", "=", "1", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "_ConvBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "norm_layer", "(", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.modules.basic._ConvBN.forward": [[110, 114], ["basic._ConvBN.conv", "basic._ConvBN.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.modules.basic._BNPReLU.__init__": [[117, 121], ["torch.Module.__init__", "norm_layer", "torch.PReLU", "torch.PReLU"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "out_channels", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "_BNPReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn", "=", "norm_layer", "(", "out_channels", ")", "\n", "self", ".", "prelu", "=", "nn", ".", "PReLU", "(", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.modules.basic._BNPReLU.forward": [[122, 126], ["basic._BNPReLU.bn", "basic._BNPReLU.prelu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "prelu", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.modules.basic._DepthwiseConv.__init__": [[134, 139], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "basic._ConvBNReLU", "basic._ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "stride", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "_DepthwiseConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "_ConvBNReLU", "(", "in_channels", ",", "in_channels", ",", "3", ",", "stride", ",", "1", ",", "groups", "=", "in_channels", ",", "norm_layer", "=", "norm_layer", ")", ",", "\n", "_ConvBNReLU", "(", "in_channels", ",", "out_channels", ",", "1", ",", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.modules.basic._DepthwiseConv.forward": [[140, 142], ["basic._DepthwiseConv.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.modules.basic.InvertedResidual.__init__": [[148, 166], ["torch.Module.__init__", "list", "int", "list.extend", "torch.Sequential", "torch.Sequential", "round", "list.append", "basic._ConvBNReLU", "basic._ConvBNReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "stride", ",", "expand_ratio", ",", "dilation", "=", "1", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "InvertedResidual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "self", ".", "use_res_connect", "=", "stride", "==", "1", "and", "in_channels", "==", "out_channels", "\n", "\n", "layers", "=", "list", "(", ")", "\n", "inter_channels", "=", "int", "(", "round", "(", "in_channels", "*", "expand_ratio", ")", ")", "\n", "if", "expand_ratio", "!=", "1", ":", "\n", "# pw", "\n", "            ", "layers", ".", "append", "(", "_ConvBNReLU", "(", "in_channels", ",", "inter_channels", ",", "1", ",", "relu6", "=", "True", ",", "norm_layer", "=", "norm_layer", ")", ")", "\n", "", "layers", ".", "extend", "(", "[", "\n", "# dw", "\n", "_ConvBNReLU", "(", "inter_channels", ",", "inter_channels", ",", "3", ",", "stride", ",", "dilation", ",", "dilation", ",", "\n", "groups", "=", "inter_channels", ",", "relu6", "=", "True", ",", "norm_layer", "=", "norm_layer", ")", ",", "\n", "# pw-linear", "\n", "nn", ".", "Conv2d", "(", "inter_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "out_channels", ")", "]", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.modules.basic.InvertedResidual.forward": [[167, 172], ["basic.InvertedResidual.conv", "basic.InvertedResidual.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "use_res_connect", ":", "\n", "            ", "return", "x", "+", "self", ".", "conv", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.modules.basic._pytorch_padding": [[13, 24], ["basic._fixed_padding", "all"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.modules.basic._fixed_padding"], ["def", "_pytorch_padding", "(", "kernel_size", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "**", "_", ")", ":", "\n", "    ", "if", "_USE_FIXED_PAD", ":", "\n", "        ", "return", "0", "# FIXME remove once verified", "\n", "", "else", ":", "\n", "        ", "padding", "=", "(", "(", "stride", "-", "1", ")", "+", "dilation", "*", "(", "kernel_size", "-", "1", ")", ")", "//", "2", "\n", "\n", "# FIXME remove once verified", "\n", "fp", "=", "_fixed_padding", "(", "kernel_size", ",", "dilation", ")", "\n", "assert", "all", "(", "padding", "==", "p", "for", "p", "in", "fp", ")", "\n", "\n", "return", "padding", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.modules.basic._fixed_padding": [[26, 32], ["None"], "function", ["None"], ["", "", "def", "_fixed_padding", "(", "kernel_size", ",", "dilation", ")", ":", "\n", "    ", "kernel_size_effective", "=", "kernel_size", "+", "(", "kernel_size", "-", "1", ")", "*", "(", "dilation", "-", "1", ")", "\n", "pad_total", "=", "kernel_size_effective", "-", "1", "\n", "pad_beg", "=", "pad_total", "//", "2", "\n", "pad_end", "=", "pad_total", "-", "pad_beg", "\n", "return", "[", "pad_beg", ",", "pad_end", ",", "pad_beg", ",", "pad_end", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.sync_bn.syncbn.SyncBatchNorm.__init__": [[52, 63], ["torch.nn.modules.batchnorm._BatchNorm.__init__", "list", "queue.Queue", "range", "len", "queue.Queue", "torch.cuda.device_count", "len"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "sync", "=", "True", ",", "activation", "=", "'none'", ",", "slope", "=", "0.01", ",", "inplace", "=", "True", ")", ":", "\n", "        ", "super", "(", "SyncBatchNorm", ",", "self", ")", ".", "__init__", "(", "num_features", ",", "eps", "=", "eps", ",", "momentum", "=", "momentum", ",", "affine", "=", "True", ")", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "inplace", "=", "False", "if", "activation", "==", "'none'", "else", "inplace", "\n", "self", ".", "slope", "=", "slope", "\n", "self", ".", "devices", "=", "list", "(", "range", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "self", ".", "sync", "=", "sync", "if", "len", "(", "self", ".", "devices", ")", ">", "1", "else", "False", "\n", "# Initialize queues", "\n", "self", ".", "worker_ids", "=", "self", ".", "devices", "[", "1", ":", "]", "\n", "self", ".", "master_queue", "=", "Queue", "(", "len", "(", "self", ".", "worker_ids", ")", ")", "\n", "self", ".", "worker_queues", "=", "[", "Queue", "(", "1", ")", "for", "_", "in", "self", ".", "worker_ids", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.sync_bn.syncbn.SyncBatchNorm.forward": [[64, 91], ["x.view.view.size", "x.view.view.view", "x.view.view.get_device", "inp_syncbatchnorm().view", "syncbatchnorm().view", "inp_syncbatchnorm", "syncbatchnorm", "syncbn.SyncBatchNorm.worker_ids.index", "x.view.view.get_device"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# resize the input to (B, C, -1)", "\n", "        ", "input_shape", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "input_shape", "[", "0", "]", ",", "self", ".", "num_features", ",", "-", "1", ")", "\n", "if", "x", ".", "get_device", "(", ")", "==", "self", ".", "devices", "[", "0", "]", ":", "\n", "# Master mode", "\n", "            ", "extra", "=", "{", "\n", "\"is_master\"", ":", "True", ",", "\n", "\"master_queue\"", ":", "self", ".", "master_queue", ",", "\n", "\"worker_queues\"", ":", "self", ".", "worker_queues", ",", "\n", "\"worker_ids\"", ":", "self", ".", "worker_ids", "\n", "}", "\n", "", "else", ":", "\n", "# Worker mode", "\n", "            ", "extra", "=", "{", "\n", "\"is_master\"", ":", "False", ",", "\n", "\"master_queue\"", ":", "self", ".", "master_queue", ",", "\n", "\"worker_queue\"", ":", "self", ".", "worker_queues", "[", "self", ".", "worker_ids", ".", "index", "(", "x", ".", "get_device", "(", ")", ")", "]", "\n", "}", "\n", "", "if", "self", ".", "inplace", ":", "\n", "            ", "return", "inp_syncbatchnorm", "(", "x", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "\n", "extra", ",", "self", ".", "sync", ",", "self", ".", "training", ",", "self", ".", "momentum", ",", "self", ".", "eps", ",", "\n", "self", ".", "activation", ",", "self", ".", "slope", ")", ".", "view", "(", "input_shape", ")", "\n", "", "else", ":", "\n", "            ", "return", "syncbatchnorm", "(", "x", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "\n", "extra", ",", "self", ".", "sync", ",", "self", ".", "training", ",", "self", ".", "momentum", ",", "self", ".", "eps", ",", "\n", "self", ".", "activation", ",", "self", ".", "slope", ")", ".", "view", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.sync_bn.syncbn.SyncBatchNorm.extra_repr": [[92, 98], ["None"], "methods", ["None"], ["", "", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "activation", "==", "'none'", ":", "\n", "            ", "return", "'sync={}'", ".", "format", "(", "self", ".", "sync", ")", "\n", "", "else", ":", "\n", "            ", "return", "'sync={}, act={}, slope={}, inplace={}'", ".", "format", "(", "\n", "self", ".", "sync", ",", "self", ".", "activation", ",", "self", ".", "slope", ",", "self", ".", "inplace", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.sync_bn.syncbn.BatchNorm1d.__init__": [[103, 107], ["warnings.warn", "syncbn.SyncBatchNorm.__init__"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"core.nn.sync_bn.{} is now deprecated in favor of core.nn.sync_bn.{}.\"", "\n", ".", "format", "(", "'BatchNorm1d'", ",", "SyncBatchNorm", ".", "__name__", ")", ",", "DeprecationWarning", ")", "\n", "super", "(", "BatchNorm1d", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.sync_bn.syncbn.BatchNorm2d.__init__": [[112, 116], ["warnings.warn", "syncbn.SyncBatchNorm.__init__"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"core.nn.sync_bn.{} is now deprecated in favor of core.nn.sync_bn.{}.\"", "\n", ".", "format", "(", "'BatchNorm2d'", ",", "SyncBatchNorm", ".", "__name__", ")", ",", "DeprecationWarning", ")", "\n", "super", "(", "BatchNorm2d", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.sync_bn.syncbn.BatchNorm3d.__init__": [[121, 125], ["warnings.warn", "syncbn.SyncBatchNorm.__init__"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"core.nn.sync_bn.{} is now deprecated in favor of core.nn.sync_bn.{}.\"", "\n", ".", "format", "(", "'BatchNorm3d'", ",", "SyncBatchNorm", ".", "__name__", ")", ",", "DeprecationWarning", ")", "\n", "super", "(", "BatchNorm3d", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yangcao1996_fanet.models.fanet.FANet.__init__": [[21, 34], ["segbase.SegBaseModel.__init__", "fanet.FANet.backbone.startswith", "fanet._Decoder", "fanet.FANet.__setattr__"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__", "home.repos.pwc.inspect_result.yangcao1996_fanet.config.config.SegmentronConfig.__setattr__"], ["    ", "def", "__init__", "(", "self", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "FANet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "self", ".", "backbone", ".", "startswith", "(", "'mobilenet'", ")", ":", "\n", "            ", "c1_channels", "=", "24", "\n", "c4_channels", "=", "320", "\n", "", "else", ":", "\n", "            ", "c1_channels", "=", "256", "\n", "c4_channels", "=", "2048", "\n", "c2_channels", "=", "512", "\n", "c3_channels", "=", "1024", "\n", "\n", "", "self", ".", "fusion_head", "=", "_Decoder", "(", "c1_channels", ",", "c2_channels", ",", "c3_channels", ",", "c4_channels", ",", "self", ".", "nclass", ")", "\n", "self", ".", "__setattr__", "(", "'decoder'", ",", "[", "'fusion_head'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.models.fanet.FANet.forward": [[35, 55], ["fanet.FANet.encoder", "list", "list", "list.append", "list.append", "x.size", "fanet.FANet.fusion_head", "fanet.FANet.fusion_head", "fanet.FANet.fusion_head", "tuple", "tuple", "tuple", "tuple", "tuple", "tuple"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "show_middle", "=", "False", ",", "show_scores", "=", "False", ")", ":", "\n", "        ", "size", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "c1", ",", "c2", ",", "c3", ",", "c4", "=", "self", ".", "encoder", "(", "x", ")", "\n", "if", "(", "show_middle", ")", ":", "\n", "            ", "y_s", ",", "y_b", ",", "middle_before_aspp", ",", "middle_after_aspp", ",", "middle_fusion", "=", "self", ".", "fusion_head", "(", "c1", ",", "c2", ",", "c3", ",", "c4", ",", "size", ",", "show_middle", ")", "\n", "", "elif", "(", "show_scores", ")", ":", "\n", "            ", "y_s", ",", "y_b", ",", "middle_scores", "=", "self", ".", "fusion_head", "(", "c1", ",", "c2", ",", "c3", ",", "c4", ",", "size", ",", "show_scores", "=", "show_scores", ")", "\n", "", "else", ":", "\n", "            ", "y_s", ",", "y_b", "=", "self", ".", "fusion_head", "(", "c1", ",", "c2", ",", "c3", ",", "c4", ",", "size", ")", "\n", "", "outputs_s", "=", "list", "(", ")", "\n", "outputs_b", "=", "list", "(", ")", "\n", "outputs_s", ".", "append", "(", "y_s", ")", "\n", "outputs_b", ".", "append", "(", "y_b", ")", "#.sigmoid())", "\n", "\n", "if", "(", "show_middle", ")", ":", "\n", "            ", "return", "tuple", "(", "outputs_s", ")", ",", "tuple", "(", "outputs_b", ")", ",", "middle_before_aspp", ",", "middle_after_aspp", ",", "middle_fusion", "\n", "", "elif", "(", "show_scores", ")", ":", "\n", "            ", "return", "tuple", "(", "outputs_s", ")", ",", "tuple", "(", "outputs_b", ")", ",", "middle_scores", "\n", "", "else", ":", "\n", "            ", "return", "tuple", "(", "outputs_s", ")", ",", "tuple", "(", "outputs_b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.models.fanet.FANet.evaluate": [[57, 101], ["max", "int", "fanet._resize_image", "fanet._resize_image", "fanet._resize_image", "math.ceil", "int", "int", "fanet.FANet.forward", "fanet.FANet.forward", "fanet.FANet.forward"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.models.translab._resize_image", "home.repos.pwc.inspect_result.yangcao1996_fanet.models.translab._resize_image", "home.repos.pwc.inspect_result.yangcao1996_fanet.models.translab._resize_image", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.DiceLoss.forward", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.DiceLoss.forward", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.DiceLoss.forward"], ["", "", "def", "evaluate", "(", "self", ",", "image", ",", "show_middle", "=", "False", ",", "show_scores", "=", "False", ")", ":", "\n", "        ", "\"\"\"evaluating network with inputs and targets\"\"\"", "\n", "scales", "=", "cfg", ".", "TEST", ".", "SCALES", "\n", "batch", ",", "_", ",", "h", ",", "w", "=", "image", ".", "shape", "\n", "base_size", "=", "max", "(", "h", ",", "w", ")", "\n", "# scores = torch.zeros((batch, self.nclass, h, w)).to(image.device)", "\n", "scores", "=", "None", "\n", "scores_boundary", "=", "None", "\n", "for", "scale", "in", "scales", ":", "\n", "            ", "long_size", "=", "int", "(", "math", ".", "ceil", "(", "base_size", "*", "scale", ")", ")", "\n", "if", "h", ">", "w", ":", "\n", "                ", "height", "=", "long_size", "\n", "width", "=", "int", "(", "1.0", "*", "w", "*", "long_size", "/", "h", "+", "0.5", ")", "\n", "", "else", ":", "\n", "                ", "width", "=", "long_size", "\n", "height", "=", "int", "(", "1.0", "*", "h", "*", "long_size", "/", "w", "+", "0.5", ")", "\n", "\n", "# resize image to current size", "\n", "", "cur_img", "=", "_resize_image", "(", "image", ",", "height", ",", "width", ")", "\n", "if", "(", "show_middle", "==", "False", "and", "show_scores", "==", "False", ")", ":", "\n", "                ", "outputs", ",", "outputs_boundary", "=", "self", ".", "forward", "(", "cur_img", ")", "\n", "", "elif", "(", "show_middle", "==", "True", "and", "show_scores", "==", "False", ")", ":", "\n", "                ", "outputs", ",", "outputs_boundary", ",", "middle_before_aspp", ",", "middle_after_aspp", ",", "middle_fusion", "=", "self", ".", "forward", "(", "cur_img", ",", "show_middle", "=", "True", ")", "\n", "", "elif", "(", "show_middle", "==", "False", "and", "show_scores", "==", "True", ")", ":", "\n", "                ", "outputs", ",", "outputs_boundary", ",", "middle_scores", "=", "self", ".", "forward", "(", "cur_img", ",", "show_scores", "=", "True", ")", "\n", "#print(np.unique(outputs_boundary[0].cpu().numpy()))", "\n", "", "outputs", "=", "outputs", "[", "0", "]", "[", "...", ",", ":", "height", ",", ":", "width", "]", "\n", "outputs_boundary", "=", "outputs_boundary", "[", "0", "]", "[", "...", ",", ":", "height", ",", ":", "width", "]", "\n", "\n", "score", "=", "_resize_image", "(", "outputs", ",", "h", ",", "w", ")", "\n", "score_boundary", "=", "_resize_image", "(", "outputs_boundary", ",", "h", ",", "w", ")", "\n", "\n", "if", "scores", "is", "None", ":", "\n", "                ", "scores", "=", "score", "\n", "scores_boundary", "=", "score_boundary", "\n", "", "else", ":", "\n", "                ", "scores", "+=", "score", "\n", "scores_boundary", "+=", "score_boundary", "\n", "", "", "if", "(", "show_middle", ")", ":", "\n", "            ", "return", "scores", ",", "scores_boundary", ",", "middle_before_aspp", ",", "middle_after_aspp", ",", "middle_fusion", "\n", "", "elif", "(", "show_scores", ")", ":", "\n", "            ", "return", "scores", ",", "scores_boundary", ",", "middle_scores", "\n", "", "else", ":", "\n", "            ", "return", "scores", ",", "scores_boundary", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.models.fanet._Decoder.__init__": [[103, 173], ["torch.Module.__init__", "modules._A_ASPP", "modules._A_ASPP", "modules._A_ASPP", "modules._A_ASPP", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "modules.SeparableConv2d", "modules.SeparableConv2d", "modules.SeparableConv2d", "modules.SeparableConv2d", "modules.SeparableConv2d", "modules.SeparableConv2d", "modules.SeparableConv2d", "modules.SeparableConv2d", "modules.SeparableConv2d", "modules.SeparableConv2d", "modules.SeparableConv2d", "modules.SeparableConv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "modules.SeparableConv2d", "modules.SeparableConv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "modules.SeparableConv2d", "modules.SeparableConv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c1_channels", ",", "c2_channels", ",", "c3_channels", ",", "c4_channels", ",", "nclass", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "_Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "nclass", "=", "nclass", "\n", "self", ".", "daspp1", "=", "_A_ASPP", "(", "c1_channels", ",", "256", ")", "\n", "self", ".", "daspp2", "=", "_A_ASPP", "(", "c2_channels", ",", "256", ")", "\n", "self", ".", "daspp3", "=", "_A_ASPP", "(", "c3_channels", ",", "256", ")", "\n", "self", ".", "daspp4", "=", "_A_ASPP", "(", "c4_channels", ",", "256", ")", "\n", "\n", "self", ".", "activation_s", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "activation_b", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n", "#self.s_to_b_1 = nn.Sequential(OrderedDict([('conv', nn.Conv2d(256, 256, 1, bias=False)),", "\n", "#('bn', nn.BatchNorm2d(256)),", "\n", "#('relu', nn.ReLU())]))", "\n", "self", ".", "b_to_s_1", "=", "SeparableConv2d", "(", "256", ",", "256", ",", "3", ",", "norm_layer", "=", "norm_layer", ",", "relu_first", "=", "False", ",", "sigmoid_last", "=", "True", ")", "#nn.Sequential(OrderedDict([('conv', nn.Conv2d(256, 256, 1, bias=False)),", "\n", "#                        ('bn', nn.BatchNorm2d(256)),", "\n", "#                        ('sigmoid', self.activation_b)]))", "\n", "#self.s_to_b_2 = nn.Sequential(OrderedDict([('conv', nn.Conv2d(256, 256, 1, bias=False)),", "\n", "#('bn', nn.BatchNorm2d(256)),", "\n", "#('relu', nn.ReLU())]))", "\n", "self", ".", "b_to_s_2", "=", "SeparableConv2d", "(", "256", ",", "256", ",", "3", ",", "norm_layer", "=", "norm_layer", ",", "relu_first", "=", "False", ",", "sigmoid_last", "=", "True", ")", "#nn.Sequential(OrderedDict([('conv', nn.Conv2d(256, 256, 1, bias=False)),", "\n", "#                        ('bn', nn.BatchNorm2d(256)),", "\n", "#                        ('sigmoid', self.activation_b)]))", "\n", "#self.s_to_b_3 = nn.Sequential(OrderedDict([('conv', nn.Conv2d(256, 256, 1, bias=False)),", "\n", "#('bn', nn.BatchNorm2d(256)),", "\n", "#('relu', nn.ReLU())]))", "\n", "self", ".", "b_to_s_3", "=", "SeparableConv2d", "(", "256", ",", "256", ",", "3", ",", "norm_layer", "=", "norm_layer", ",", "relu_first", "=", "False", ",", "sigmoid_last", "=", "True", ")", "#nn.Sequential(OrderedDict([('conv', nn.Conv2d(256, 256, 1, bias=False)),", "\n", "#                        ('bn', nn.BatchNorm2d(256)),", "\n", "#                        ('sigmoid', self.activation_b)]))", "\n", "#self.s_to_b_4 = nn.Sequential(OrderedDict([('conv', nn.Conv2d(256, 256, 1, bias=False)),", "\n", "#('bn', nn.BatchNorm2d(256)),", "\n", "#('relu', nn.ReLU())]))", "\n", "self", ".", "b_to_s_4", "=", "SeparableConv2d", "(", "256", ",", "256", ",", "3", ",", "norm_layer", "=", "norm_layer", ",", "relu_first", "=", "False", ",", "sigmoid_last", "=", "True", ")", "#nn.Sequential(OrderedDict([('conv', nn.Conv2d(256, 256, 1, bias=False)),", "\n", "#                        ('bn', nn.BatchNorm2d(256)),", "\n", "#                        ('sigmoid', self.activation_b)]))", "\n", "\n", "self", ".", "conv_s_4", "=", "SeparableConv2d", "(", "256", ",", "256", ",", "3", ",", "norm_layer", "=", "norm_layer", ",", "relu_first", "=", "False", ")", "#nn.Sequential(OrderedDict([('conv', nn.Conv2d(256, 256, 3, bias=False)),", "\n", "#                        ('bn', nn.BatchNorm2d(256)),", "\n", "#                        ('relu', nn.ReLU())]))", "\n", "self", ".", "conv_s_3", "=", "SeparableConv2d", "(", "256", ",", "256", ",", "3", ",", "norm_layer", "=", "norm_layer", ",", "relu_first", "=", "False", ")", "#nn.Sequential(OrderedDict([('conv', nn.Conv2d(256, 256, 3, bias=False)),", "\n", "#                        ('bn', nn.BatchNorm2d(256)),", "\n", "#                        ('relu', nn.ReLU())]))", "\n", "self", ".", "conv_s_2", "=", "SeparableConv2d", "(", "256", ",", "256", ",", "3", ",", "norm_layer", "=", "norm_layer", ",", "relu_first", "=", "False", ")", "#nn.Sequential(OrderedDict([('conv', nn.Conv2d(256, 256, 3, bias=False)),", "\n", "#                        ('bn', nn.BatchNorm2d(256)),", "\n", "#                        ('relu', nn.ReLU())]))", "\n", "self", ".", "conv_s_1", "=", "SeparableConv2d", "(", "256", ",", "256", ",", "3", ",", "norm_layer", "=", "norm_layer", ",", "relu_first", "=", "False", ")", "#nn.Sequential(OrderedDict([('conv', nn.Conv2d(256, 256, 3, bias=False)),", "\n", "#                        ('bn', nn.BatchNorm2d(256)),", "\n", "#                        ('relu', nn.ReLU())]))", "\n", "\n", "self", ".", "conv_b_4", "=", "SeparableConv2d", "(", "256", ",", "256", ",", "3", ",", "norm_layer", "=", "norm_layer", ",", "relu_first", "=", "False", ")", "#nn.Sequential(OrderedDict([('conv', nn.Conv2d(256, 256, 3, bias=False)),", "\n", "#                        ('bn', nn.BatchNorm2d(256)),", "\n", "#                        ('relu', nn.ReLU())]))", "\n", "self", ".", "conv_b_3", "=", "SeparableConv2d", "(", "256", ",", "256", ",", "3", ",", "norm_layer", "=", "norm_layer", ",", "relu_first", "=", "False", ")", "#nn.Sequential(OrderedDict([('conv', nn.Conv2d(256, 256, 3, bias=False)),", "\n", "#                        ('bn', nn.BatchNorm2d(256)),", "\n", "#                        ('relu', nn.ReLU())]))", "\n", "self", ".", "conv_b_2", "=", "SeparableConv2d", "(", "256", ",", "256", ",", "3", ",", "norm_layer", "=", "norm_layer", ",", "relu_first", "=", "False", ")", "#nn.Sequential(OrderedDict([('conv', nn.Conv2d(256, 256, 3, bias=False)),", "\n", "#                        ('bn', nn.BatchNorm2d(256)),", "\n", "#                        ('relu', nn.ReLU())]))", "\n", "self", ".", "conv_b_1", "=", "SeparableConv2d", "(", "256", ",", "256", ",", "3", ",", "norm_layer", "=", "norm_layer", ",", "relu_first", "=", "False", ")", "#nn.Sequential(OrderedDict([('conv', nn.Conv2d(256, 256, 3, bias=False)),", "\n", "#                        ('bn', nn.BatchNorm2d(256)),", "\n", "#                        ('relu', nn.ReLU())]))", "\n", "self", ".", "block_s", "=", "nn", ".", "Sequential", "(", "\n", "SeparableConv2d", "(", "256", ",", "256", ",", "3", ",", "norm_layer", "=", "norm_layer", ",", "relu_first", "=", "False", ")", ",", "\n", "SeparableConv2d", "(", "256", ",", "256", ",", "norm_layer", "=", "norm_layer", ",", "relu_first", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "self", ".", "nclass", ",", "1", ")", ")", "\n", "self", ".", "block_b", "=", "nn", ".", "Sequential", "(", "\n", "SeparableConv2d", "(", "256", ",", "256", ",", "3", ",", "norm_layer", "=", "norm_layer", ",", "relu_first", "=", "False", ")", ",", "\n", "SeparableConv2d", "(", "256", ",", "256", ",", "3", ",", "norm_layer", "=", "norm_layer", ",", "relu_first", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.models.fanet._Decoder.forward": [[174, 256], ["fanet._Decoder.b_to_s_1", "fanet._Decoder.b_to_s_2", "fanet._Decoder.b_to_s_3", "fanet._Decoder.b_to_s_4", "fanet._Decoder.conv_s_4", "fanet._Decoder.conv_b_4", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "fanet._Decoder.conv_s_3", "fanet._Decoder.conv_b_3", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "fanet._Decoder.conv_s_2", "fanet._Decoder.conv_b_2", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "fanet._Decoder.conv_s_1", "fanet._Decoder.conv_b_1", "fanet._Decoder.block_s", "fanet._Decoder.block_b", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "c1.size", "c2.size", "c3.size", "c4.size", "fanet._Decoder.daspp1", "fanet._Decoder.daspp2", "fanet._Decoder.daspp3", "fanet._Decoder.daspp4", "fanet._Decoder.daspp1", "fanet._Decoder.daspp2", "fanet._Decoder.daspp3", "fanet._Decoder.daspp4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "c1", ",", "c2", ",", "c3", ",", "c4", ",", "size", ",", "show_middle", "=", "False", ",", "show_scores", "=", "False", ")", ":", "\n", "\n", "        ", "c1_size", "=", "c1", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "c2_size", "=", "c2", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "c3_size", "=", "c3", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "c4_size", "=", "c4", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "\n", "\n", "if", "(", "show_scores", ")", ":", "\n", "            ", "c1_s", ",", "c1_b", ",", "c1_middle_scores", "=", "self", ".", "daspp1", "(", "c1", ",", "show_scores", "=", "show_scores", ")", "\n", "c2_s", ",", "c2_b", ",", "c2_middle_scores", "=", "self", ".", "daspp2", "(", "c2", ",", "show_scores", "=", "show_scores", ")", "\n", "c3_s", ",", "c3_b", ",", "c3_middle_scores", "=", "self", ".", "daspp3", "(", "c3", ",", "show_scores", "=", "show_scores", ")", "\n", "c4_s", ",", "c4_b", ",", "c4_middle_scores", "=", "self", ".", "daspp4", "(", "c4", ",", "show_scores", "=", "show_scores", ")", "\n", "", "else", ":", "\n", "            ", "c1_s", ",", "c1_b", "=", "self", ".", "daspp1", "(", "c1", ")", "\n", "c2_s", ",", "c2_b", "=", "self", ".", "daspp2", "(", "c2", ")", "\n", "c3_s", ",", "c3_b", "=", "self", ".", "daspp3", "(", "c3", ")", "\n", "c4_s", ",", "c4_b", "=", "self", ".", "daspp4", "(", "c4", ")", "\n", "\n", "\n", "", "if", "(", "show_middle", ")", ":", "\n", "            ", "middle_features_before_daspp", "=", "[", "c1", ",", "c2", ",", "c3", ",", "c4", "]", "\n", "middle_features_after_daspp", "=", "[", "(", "c1_s", ",", "c1_b", ")", ",", "(", "c2_s", ",", "c2_b", ")", ",", "(", "c3_s", ",", "c3_b", ")", ",", "(", "c4_s", ",", "c4_b", ")", "]", "\n", "\n", "#c1_s_to_b = self.s_to_b_1(c1_s)", "\n", "#c2_s_to_b = self.s_to_b_2(c2_s)", "\n", "#c3_s_to_b = self.s_to_b_3(c3_s)", "\n", "#c4_s_to_b = self.s_to_b_4(c4_s)", "\n", "\n", "\n", "", "c1_b_to_s", "=", "self", ".", "b_to_s_1", "(", "c1_b", ")", "\n", "c2_b_to_s", "=", "self", ".", "b_to_s_2", "(", "c2_b", ")", "\n", "c3_b_to_s", "=", "self", ".", "b_to_s_3", "(", "c3_b", ")", "\n", "c4_b_to_s", "=", "self", ".", "b_to_s_4", "(", "c4_b", ")", "\n", "\n", "#print(torch.max(c1_b_to_s))", "\n", "#print(torch.min(c1_b_to_s))", "\n", "\n", "c4_s_fused", "=", "self", ".", "conv_s_4", "(", "c4_s", "+", "c4_s", "*", "c4_b_to_s", ")", "\n", "c4_b_fused", "=", "self", ".", "conv_b_4", "(", "c4_b", ")", "\n", "#print(torch.max(c4_b_fused))", "\n", "#print(torch.min(c4_b_fused))", "\n", "\n", "c4_s_fused_up", "=", "F", ".", "interpolate", "(", "c4_s_fused", ",", "c3_size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "c4_b_fused_up", "=", "F", ".", "interpolate", "(", "c4_b_fused", ",", "c3_size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "\n", "c3_s_fused", "=", "self", ".", "conv_s_3", "(", "c3_s", "+", "c3_s", "*", "c3_b_to_s", "+", "c4_s_fused_up", ")", "\n", "c3_b_fused", "=", "self", ".", "conv_b_3", "(", "c3_b", "+", "c4_b_fused_up", ")", "\n", "\n", "\n", "c3_s_fused_up", "=", "F", ".", "interpolate", "(", "c3_s_fused", ",", "c2_size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "c3_b_fused_up", "=", "F", ".", "interpolate", "(", "c3_b_fused", ",", "c2_size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "c2_s_fused", "=", "self", ".", "conv_s_2", "(", "c2_s", "+", "c2_s", "*", "c2_b_to_s", "+", "c3_s_fused_up", ")", "\n", "c2_b_fused", "=", "self", ".", "conv_b_2", "(", "c2_b", "+", "c3_b_fused_up", ")", "\n", "\n", "\n", "c2_s_fused_up", "=", "F", ".", "interpolate", "(", "c2_s_fused", ",", "c1_size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "c2_b_fused_up", "=", "F", ".", "interpolate", "(", "c2_b_fused", ",", "c1_size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "c1_s_fused", "=", "self", ".", "conv_s_1", "(", "c1_s", "+", "c1_s", "*", "c1_b_to_s", "+", "c2_s_fused_up", ")", "\n", "c1_b_fused", "=", "self", ".", "conv_b_1", "(", "c1_b", "+", "c2_b_fused_up", ")", "\n", "\n", "\n", "if", "(", "show_middle", ")", ":", "\n", "            ", "middle_features_after_fusion", "=", "[", "(", "c1_s_fused", ",", "c1_b_fused", ")", ",", "(", "c2_s_fused", ",", "c2_b_fused", ")", ",", "(", "c3_s_fused", ",", "c3_b_fused", ")", ",", "(", "c4_s_fused", ",", "c4_b_fused", ")", "]", "\n", "\n", "", "y_s", "=", "self", ".", "block_s", "(", "c1_s_fused", ")", "\n", "y_b", "=", "self", ".", "block_b", "(", "c1_b_fused", ")", "\n", "y_s", "=", "F", ".", "interpolate", "(", "y_s", ",", "size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "y_b", "=", "F", ".", "interpolate", "(", "y_b", ",", "size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "if", "(", "show_middle", ")", ":", "\n", "            ", "return", "y_s", ",", "y_b", ",", "middle_features_before_daspp", ",", "middle_features_after_daspp", ",", "middle_features_after_fusion", "\n", "\n", "\n", "", "elif", "(", "show_scores", ")", ":", "\n", "            ", "return", "y_s", ",", "y_b", ",", "{", "'stage1'", ":", "c1_middle_scores", ",", "'stage2'", ":", "c2_middle_scores", ",", "'stage3'", ":", "c3_middle_scores", ",", "'stage4'", ":", "c4_middle_scores", "}", "\n", "\n", "", "else", ":", "\n", "            ", "return", "y_s", ",", "y_b", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.yangcao1996_fanet.models.fanet._resize_image": [[15, 17], ["torch.interpolate"], "function", ["None"], ["def", "_resize_image", "(", "img", ",", "h", ",", "w", ")", ":", "\n", "    ", "return", "F", ".", "interpolate", "(", "img", ",", "size", "=", "[", "h", ",", "w", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.models.segbase.SegBaseModel.__init__": [[19, 28], ["torch.Module.__init__", "modules.get_norm", "segbase.SegBaseModel.get_backbone"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__", "home.repos.pwc.inspect_result.yangcao1996_fanet.modules.batch_norm.get_norm", "home.repos.pwc.inspect_result.yangcao1996_fanet.models.segbase.SegBaseModel.get_backbone"], ["def", "__init__", "(", "self", ",", "need_backbone", "=", "True", ")", ":", "\n", "        ", "super", "(", "SegBaseModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nclass", "=", "datasets", "[", "cfg", ".", "DATASET", ".", "NAME", "]", ".", "NUM_CLASS", "\n", "self", ".", "aux", "=", "cfg", ".", "SOLVER", ".", "AUX", "\n", "self", ".", "norm_layer", "=", "get_norm", "(", "cfg", ".", "MODEL", ".", "BN_TYPE", ")", "\n", "self", ".", "backbone", "=", "None", "\n", "self", ".", "encoder", "=", "None", "\n", "if", "need_backbone", ":", "\n", "            ", "self", ".", "get_backbone", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.models.segbase.SegBaseModel.get_backbone": [[29, 32], ["config.cfg.MODEL.BACKBONE.lower", "backbones.get_segmentation_backbone"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.build.get_segmentation_backbone"], ["", "", "def", "get_backbone", "(", "self", ")", ":", "\n", "        ", "self", ".", "backbone", "=", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "lower", "(", ")", "\n", "self", ".", "encoder", "=", "get_segmentation_backbone", "(", "self", ".", "backbone", ",", "self", ".", "norm_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.models.segbase.SegBaseModel.base_forward": [[33, 37], ["segbase.SegBaseModel.encoder"], "methods", ["None"], ["", "def", "base_forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"forwarding backbone network\"\"\"", "\n", "c1", ",", "c2", ",", "c3", ",", "c4", "=", "self", ".", "encoder", "(", "x", ")", "\n", "return", "c1", ",", "c2", ",", "c3", ",", "c4", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.models.segbase.SegBaseModel.demo": [[38, 43], ["segbase.SegBaseModel.forward"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.DiceLoss.forward"], ["", "def", "demo", "(", "self", ",", "x", ")", ":", "\n", "        ", "pred", "=", "self", ".", "forward", "(", "x", ")", "\n", "if", "self", ".", "aux", ":", "\n", "            ", "pred", "=", "pred", "[", "0", "]", "\n", "", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.models.segbase.SegBaseModel.evaluate": [[44, 71], ["max", "int", "segbase._resize_image", "segbase._resize_image", "math.ceil", "int", "int", "segbase.SegBaseModel.forward"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.models.translab._resize_image", "home.repos.pwc.inspect_result.yangcao1996_fanet.models.translab._resize_image", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.DiceLoss.forward"], ["", "def", "evaluate", "(", "self", ",", "image", ")", ":", "\n", "        ", "\"\"\"evaluating network with inputs and targets\"\"\"", "\n", "scales", "=", "cfg", ".", "TEST", ".", "SCALES", "\n", "batch", ",", "_", ",", "h", ",", "w", "=", "image", ".", "shape", "\n", "base_size", "=", "max", "(", "h", ",", "w", ")", "\n", "# scores = torch.zeros((batch, self.nclass, h, w)).to(image.device)", "\n", "scores", "=", "None", "\n", "for", "scale", "in", "scales", ":", "\n", "            ", "long_size", "=", "int", "(", "math", ".", "ceil", "(", "base_size", "*", "scale", ")", ")", "\n", "if", "h", ">", "w", ":", "\n", "                ", "height", "=", "long_size", "\n", "width", "=", "int", "(", "1.0", "*", "w", "*", "long_size", "/", "h", "+", "0.5", ")", "\n", "", "else", ":", "\n", "                ", "width", "=", "long_size", "\n", "height", "=", "int", "(", "1.0", "*", "h", "*", "long_size", "/", "w", "+", "0.5", ")", "\n", "\n", "# resize image to current size", "\n", "", "cur_img", "=", "_resize_image", "(", "image", ",", "height", ",", "width", ")", "\n", "outputs", "=", "self", ".", "forward", "(", "cur_img", ")", "[", "0", "]", "[", "...", ",", ":", "height", ",", ":", "width", "]", "\n", "\n", "score", "=", "_resize_image", "(", "outputs", ",", "h", ",", "w", ")", "\n", "\n", "if", "scores", "is", "None", ":", "\n", "                ", "scores", "=", "score", "\n", "", "else", ":", "\n", "                ", "scores", "+=", "score", "\n", "", "", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.models.segbase._resize_image": [[73, 75], ["torch.interpolate"], "function", ["None"], ["", "", "def", "_resize_image", "(", "img", ",", "h", ",", "w", ")", ":", "\n", "    ", "return", "F", ".", "interpolate", "(", "img", ",", "size", "=", "[", "h", ",", "w", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.models.segbase._pad_image": [[77, 99], ["torch.pad"], "function", ["None"], ["", "def", "_pad_image", "(", "img", ",", "crop_size", ")", ":", "\n", "    ", "b", ",", "c", ",", "h", ",", "w", "=", "img", ".", "shape", "\n", "assert", "(", "c", "==", "3", ")", "\n", "padh", "=", "crop_size", "[", "0", "]", "-", "h", "if", "h", "<", "crop_size", "[", "0", "]", "else", "0", "\n", "padw", "=", "crop_size", "[", "1", "]", "-", "w", "if", "w", "<", "crop_size", "[", "1", "]", "else", "0", "\n", "if", "padh", "==", "0", "and", "padw", "==", "0", ":", "\n", "        ", "return", "img", "\n", "", "img_pad", "=", "F", ".", "pad", "(", "img", ",", "(", "0", ",", "padh", ",", "0", ",", "padw", ")", ")", "\n", "\n", "# TODO clean this code", "\n", "# mean = cfg.DATASET.MEAN", "\n", "# std = cfg.DATASET.STD", "\n", "# pad_values = -np.array(mean) / np.array(std)", "\n", "# img_pad = torch.zeros((b, c, h + padh, w + padw)).to(img.device)", "\n", "# for i in range(c):", "\n", "#     # print(img[:, i, :, :].unsqueeze(1).shape)", "\n", "#     img_pad[:, i, :, :] = torch.squeeze(", "\n", "#         F.pad(img[:, i, :, :].unsqueeze(1), (0, padh, 0, padw),", "\n", "#               'constant', value=pad_values[i]), 1)", "\n", "# assert(img_pad.shape[2] >= crop_size[0] and img_pad.shape[3] >= crop_size[1])", "\n", "\n", "return", "img_pad", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.models.segbase._crop_image": [[101, 103], ["None"], "function", ["None"], ["", "def", "_crop_image", "(", "img", ",", "h0", ",", "h1", ",", "w0", ",", "w1", ")", ":", "\n", "    ", "return", "img", "[", ":", ",", ":", ",", "h0", ":", "h1", ",", "w0", ":", "w1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.models.segbase._flip_image": [[105, 108], ["img.flip"], "function", ["None"], ["", "def", "_flip_image", "(", "img", ")", ":", "\n", "    ", "assert", "(", "img", ".", "ndim", "==", "4", ")", "\n", "return", "img", ".", "flip", "(", "(", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.models.segbase._to_tuple": [[110, 119], ["isinstance", "len", "tuple", "isinstance", "len", "tuple", "ValueError", "type"], "function", ["None"], ["", "def", "_to_tuple", "(", "size", ")", ":", "\n", "    ", "if", "isinstance", "(", "size", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "assert", "len", "(", "size", ")", ",", "'Expect eval crop size contains two element, '", "'but received {}'", ".", "format", "(", "len", "(", "size", ")", ")", "\n", "return", "tuple", "(", "size", ")", "\n", "", "elif", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "        ", "return", "tuple", "(", "(", "size", ",", "size", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unsupport datatype: {}'", ".", "format", "(", "type", "(", "size", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yangcao1996_fanet.models.translab.TransLab.__init__": [[19, 39], ["segbase.SegBaseModel.__init__", "translab.TransLab.backbone.startswith", "translab._DeepLabHead_attention", "translab._DeepLabHead", "translab.FusHead", "translab.FusHead", "translab.FusHead", "translab.TransLab.__setattr__", "modules._FCNHead"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__", "home.repos.pwc.inspect_result.yangcao1996_fanet.config.config.SegmentronConfig.__setattr__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "TransLab", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "self", ".", "backbone", ".", "startswith", "(", "'mobilenet'", ")", ":", "\n", "            ", "c1_channels", "=", "24", "\n", "c4_channels", "=", "320", "\n", "", "else", ":", "\n", "            ", "c1_channels", "=", "256", "\n", "c4_channels", "=", "2048", "\n", "c2_channel", "=", "512", "\n", "\n", "", "self", ".", "head", "=", "_DeepLabHead_attention", "(", "self", ".", "nclass", ",", "c1_channels", "=", "c1_channels", ",", "c4_channels", "=", "c4_channels", ",", "c2_channel", "=", "c2_channel", ")", "\n", "self", ".", "head_b", "=", "_DeepLabHead", "(", "1", ",", "c1_channels", "=", "c1_channels", ",", "c4_channels", "=", "c4_channels", ")", "\n", "\n", "self", ".", "fus_head1", "=", "FusHead", "(", ")", "\n", "self", ".", "fus_head2", "=", "FusHead", "(", "inplane", "=", "2048", ")", "\n", "self", ".", "fus_head3", "=", "FusHead", "(", "inplane", "=", "512", ")", "\n", "\n", "if", "self", ".", "aux", ":", "\n", "            ", "self", ".", "auxlayer", "=", "_FCNHead", "(", "728", ",", "self", ".", "nclass", ")", "\n", "", "self", ".", "__setattr__", "(", "'decoder'", ",", "[", "'head'", ",", "'auxlayer'", "]", "if", "self", ".", "aux", "else", "[", "'head'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.models.translab.TransLab.forward": [[40, 64], ["translab.TransLab.encoder", "list", "list", "translab.TransLab.head_b", "torch.interpolate.sigmoid", "translab.TransLab.fus_head1", "translab.TransLab.fus_head2", "translab.TransLab.fus_head3", "translab.TransLab.head", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "list.append", "list.append", "torch.interpolate.size", "tuple", "tuple"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "size", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "c1", ",", "c2", ",", "c3", ",", "c4", "=", "self", ".", "encoder", "(", "x", ")", "\n", "outputs", "=", "list", "(", ")", "\n", "outputs_b", "=", "list", "(", ")", "\n", "\n", "x_b", "=", "self", ".", "head_b", "(", "c4", ",", "c1", ")", "\n", "\n", "#attention c1 c4", "\n", "attention_map", "=", "x_b", ".", "sigmoid", "(", ")", "\n", "\n", "c1", "=", "self", ".", "fus_head1", "(", "c1", ",", "attention_map", ")", "\n", "c4", "=", "self", ".", "fus_head2", "(", "c4", ",", "attention_map", ")", "\n", "c2", "=", "self", ".", "fus_head3", "(", "c2", ",", "attention_map", ")", "\n", "\n", "x", "=", "self", ".", "head", "(", "c4", ",", "c2", ",", "c1", ",", "attention_map", ")", "\n", "\n", "x", "=", "F", ".", "interpolate", "(", "x", ",", "size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "x_b", "=", "F", ".", "interpolate", "(", "x_b", ",", "size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "outputs", ".", "append", "(", "x", ")", "\n", "outputs_b", ".", "append", "(", "x_b", ")", "#.sigmoid())", "\n", "\n", "return", "tuple", "(", "outputs", ")", ",", "tuple", "(", "outputs_b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.models.translab.TransLab.evaluate": [[65, 98], ["max", "int", "translab._resize_image", "translab.TransLab.forward", "translab._resize_image", "translab._resize_image", "math.ceil", "int", "int"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.models.translab._resize_image", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.DiceLoss.forward", "home.repos.pwc.inspect_result.yangcao1996_fanet.models.translab._resize_image", "home.repos.pwc.inspect_result.yangcao1996_fanet.models.translab._resize_image"], ["", "def", "evaluate", "(", "self", ",", "image", ")", ":", "\n", "        ", "\"\"\"evaluating network with inputs and targets\"\"\"", "\n", "scales", "=", "cfg", ".", "TEST", ".", "SCALES", "\n", "batch", ",", "_", ",", "h", ",", "w", "=", "image", ".", "shape", "\n", "base_size", "=", "max", "(", "h", ",", "w", ")", "\n", "# scores = torch.zeros((batch, self.nclass, h, w)).to(image.device)", "\n", "scores", "=", "None", "\n", "scores_boundary", "=", "None", "\n", "for", "scale", "in", "scales", ":", "\n", "            ", "long_size", "=", "int", "(", "math", ".", "ceil", "(", "base_size", "*", "scale", ")", ")", "\n", "if", "h", ">", "w", ":", "\n", "                ", "height", "=", "long_size", "\n", "width", "=", "int", "(", "1.0", "*", "w", "*", "long_size", "/", "h", "+", "0.5", ")", "\n", "", "else", ":", "\n", "                ", "width", "=", "long_size", "\n", "height", "=", "int", "(", "1.0", "*", "h", "*", "long_size", "/", "w", "+", "0.5", ")", "\n", "\n", "# resize image to current size", "\n", "", "cur_img", "=", "_resize_image", "(", "image", ",", "height", ",", "width", ")", "\n", "outputs", ",", "outputs_boundary", "=", "self", ".", "forward", "(", "cur_img", ")", "\n", "outputs", "=", "outputs", "[", "0", "]", "[", "...", ",", ":", "height", ",", ":", "width", "]", "\n", "outputs_boundary", "=", "outputs_boundary", "[", "0", "]", "[", "...", ",", ":", "height", ",", ":", "width", "]", "\n", "\n", "score", "=", "_resize_image", "(", "outputs", ",", "h", ",", "w", ")", "\n", "score_boundary", "=", "_resize_image", "(", "outputs_boundary", ",", "h", ",", "w", ")", "\n", "\n", "if", "scores", "is", "None", ":", "\n", "                ", "scores", "=", "score", "\n", "scores_boundary", "=", "score_boundary", "\n", "", "else", ":", "\n", "                ", "scores", "+=", "score", "\n", "scores_boundary", "+=", "score_boundary", "\n", "", "", "return", "scores", ",", "scores_boundary", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.models.translab._DeepLabHead.__init__": [[101, 118], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "modules._ASPP", "modules._ConvBNReLU", "modules.SeparableConv2d", "modules.SeparableConv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nclass", ",", "c1_channels", "=", "256", ",", "c4_channels", "=", "2048", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "_DeepLabHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.use_aspp = cfg.MODEL.DEEPLABV3_PLUS.USE_ASPP", "\n", "# self.use_decoder = cfg.MODEL.DEEPLABV3_PLUS.ENABLE_DECODER", "\n", "self", ".", "use_aspp", "=", "True", "\n", "self", ".", "use_decoder", "=", "True", "\n", "last_channels", "=", "c4_channels", "\n", "if", "self", ".", "use_aspp", ":", "\n", "            ", "self", ".", "aspp", "=", "_ASPP", "(", "c4_channels", ",", "256", ")", "\n", "last_channels", "=", "256", "\n", "", "if", "self", ".", "use_decoder", ":", "\n", "            ", "self", ".", "c1_block", "=", "_ConvBNReLU", "(", "c1_channels", ",", "48", ",", "1", ",", "norm_layer", "=", "norm_layer", ")", "\n", "last_channels", "+=", "48", "\n", "", "self", ".", "block", "=", "nn", ".", "Sequential", "(", "\n", "SeparableConv2d", "(", "last_channels", ",", "256", ",", "3", ",", "norm_layer", "=", "norm_layer", ",", "relu_first", "=", "False", ")", ",", "\n", "SeparableConv2d", "(", "256", ",", "256", ",", "3", ",", "norm_layer", "=", "norm_layer", ",", "relu_first", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "nclass", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.models.translab._DeepLabHead.forward": [[119, 130], ["translab._DeepLabHead.block", "translab._DeepLabHead.size", "translab._DeepLabHead.aspp", "torch.interpolate", "torch.interpolate", "torch.interpolate", "translab._DeepLabHead.c1_block", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "translab._DeepLabHead.block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "c1", ")", ":", "\n", "        ", "size", "=", "c1", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "if", "self", ".", "use_aspp", ":", "\n", "            ", "x", "=", "self", ".", "aspp", "(", "x", ")", "\n", "", "if", "self", ".", "use_decoder", ":", "\n", "            ", "x", "=", "F", ".", "interpolate", "(", "x", ",", "size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "c1", "=", "self", ".", "c1_block", "(", "c1", ")", "\n", "cat_fmap", "=", "torch", ".", "cat", "(", "[", "x", ",", "c1", "]", ",", "dim", "=", "1", ")", "\n", "return", "self", ".", "block", "(", "cat_fmap", ")", "\n", "\n", "", "return", "self", ".", "block", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.models.translab._DeepLabHead_attention.__init__": [[133, 162], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "translab.FusHead", "translab.FusHead", "modules._ASPP", "modules._ConvBNReLU", "modules._ConvBNReLU", "modules.SeparableConv2d", "modules.SeparableConv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "modules.SeparableConv2d", "modules.SeparableConv2d"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nclass", ",", "c1_channels", "=", "256", ",", "c4_channels", "=", "2048", ",", "c2_channel", "=", "512", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "_DeepLabHead_attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.use_aspp = cfg.MODEL.DEEPLABV3_PLUS.USE_ASPP", "\n", "# self.use_decoder = cfg.MODEL.DEEPLABV3_PLUS.ENABLE_DECODER", "\n", "self", ".", "use_aspp", "=", "True", "\n", "self", ".", "use_decoder", "=", "True", "\n", "last_channels", "=", "c4_channels", "\n", "if", "self", ".", "use_aspp", ":", "\n", "            ", "self", ".", "aspp", "=", "_ASPP", "(", "c4_channels", ",", "256", ")", "\n", "last_channels", "=", "256", "\n", "", "if", "self", ".", "use_decoder", ":", "\n", "            ", "self", ".", "c1_block", "=", "_ConvBNReLU", "(", "c1_channels", ",", "48", ",", "1", ",", "norm_layer", "=", "norm_layer", ")", "\n", "last_channels", "+=", "48", "\n", "\n", "self", ".", "c2_block", "=", "_ConvBNReLU", "(", "c2_channel", ",", "24", ",", "1", ",", "norm_layer", "=", "norm_layer", ")", "\n", "last_channels", "+=", "24", "\n", "\n", "", "self", ".", "block", "=", "nn", ".", "Sequential", "(", "\n", "SeparableConv2d", "(", "256", "+", "24", "+", "48", ",", "256", ",", "3", ",", "norm_layer", "=", "norm_layer", ",", "relu_first", "=", "False", ")", ",", "\n", "SeparableConv2d", "(", "256", ",", "256", ",", "3", ",", "norm_layer", "=", "norm_layer", ",", "relu_first", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "nclass", ",", "1", ")", ")", "\n", "\n", "self", ".", "block_c2", "=", "nn", ".", "Sequential", "(", "\n", "SeparableConv2d", "(", "256", "+", "24", ",", "256", "+", "24", ",", "3", ",", "norm_layer", "=", "norm_layer", ",", "relu_first", "=", "False", ")", ",", "\n", "SeparableConv2d", "(", "256", "+", "24", ",", "256", "+", "24", ",", "3", ",", "norm_layer", "=", "norm_layer", ",", "relu_first", "=", "False", ")", ")", "\n", "\n", "\n", "self", ".", "fus_head_c2", "=", "FusHead", "(", "inplane", "=", "256", "+", "24", ")", "\n", "self", ".", "fus_head_c1", "=", "FusHead", "(", "inplane", "=", "256", "+", "24", "+", "48", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.models.translab._DeepLabHead_attention.forward": [[164, 185], ["translab._DeepLabHead_attention.block", "translab._DeepLabHead_attention.size", "translab._DeepLabHead_attention.size", "translab._DeepLabHead_attention.aspp", "torch.interpolate", "torch.interpolate", "torch.interpolate", "translab._DeepLabHead_attention.c2_block", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "translab._DeepLabHead_attention.fus_head_c2", "translab._DeepLabHead_attention.block_c2", "torch.interpolate", "torch.interpolate", "torch.interpolate", "translab._DeepLabHead_attention.c1_block", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "translab._DeepLabHead_attention.fus_head_c1", "translab._DeepLabHead_attention.block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "c2", ",", "c1", ",", "attention_map", ")", ":", "\n", "        ", "c1_size", "=", "c1", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "c2_size", "=", "c2", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "if", "self", ".", "use_aspp", ":", "\n", "            ", "x", "=", "self", ".", "aspp", "(", "x", ")", "\n", "\n", "\n", "", "if", "self", ".", "use_decoder", ":", "\n", "            ", "x", "=", "F", ".", "interpolate", "(", "x", ",", "c2_size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "c2", "=", "self", ".", "c2_block", "(", "c2", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "c2", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "fus_head_c2", "(", "x", ",", "attention_map", ")", "\n", "x", "=", "self", ".", "block_c2", "(", "x", ")", "\n", "\n", "x", "=", "F", ".", "interpolate", "(", "x", ",", "c1_size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "c1", "=", "self", ".", "c1_block", "(", "c1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "c1", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "fus_head_c1", "(", "x", ",", "attention_map", ")", "\n", "return", "self", ".", "block", "(", "x", ")", "\n", "\n", "", "return", "self", ".", "block", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.models.translab.FusHead.__init__": [[188, 193], ["torch.Module.__init__", "modules.SeparableConv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "inplane", "=", "256", ")", ":", "\n", "        ", "super", "(", "FusHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "SeparableConv2d", "(", "inplane", "*", "2", ",", "inplane", ",", "3", ",", "norm_layer", "=", "norm_layer", ",", "relu_first", "=", "False", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "inplane", ",", "inplane", "//", "16", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "inplane", "//", "16", ",", "inplane", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.models.translab.FusHead.forward": [[194, 207], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "translab.FusHead.conv1", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "c.size", "torch.interpolate.size", "torch.interpolate", "torch.interpolate", "torch.interpolate", "translab.FusHead.size", "translab.FusHead.fc1", "translab.FusHead.fc2", "c.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "c", ",", "att_map", ")", ":", "\n", "        ", "if", "c", ".", "size", "(", ")", "!=", "att_map", ".", "size", "(", ")", ":", "\n", "            ", "att_map", "=", "F", ".", "interpolate", "(", "att_map", ",", "c", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "", "atted_c", "=", "c", "*", "att_map", "\n", "x", "=", "torch", ".", "cat", "(", "[", "c", ",", "atted_c", "]", ",", "1", ")", "#512", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "#256", "\n", "\n", "weight", "=", "F", ".", "avg_pool2d", "(", "x", ",", "x", ".", "size", "(", "2", ")", ")", "\n", "weight", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "weight", ")", ")", "\n", "weight", "=", "torch", ".", "sigmoid", "(", "self", ".", "fc2", "(", "weight", ")", ")", "\n", "x", "=", "x", "*", "weight", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yangcao1996_fanet.models.translab._resize_image": [[14, 16], ["torch.interpolate"], "function", ["None"], ["def", "_resize_image", "(", "img", ",", "h", ",", "w", ")", ":", "\n", "    ", "return", "F", ".", "interpolate", "(", "img", ",", "size", "=", "[", "h", ",", "w", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.models.model_zoo.get_segmentation_model": [[17, 25], ["model_zoo.load_model_pretrain", "MODEL_REGISTRY.get"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.models.model_zoo.load_model_pretrain", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.score.SegmentationMetric.get"], ["def", "get_segmentation_model", "(", ")", ":", "\n", "    ", "\"\"\"\n    Built the whole model, defined by `cfg.MODEL.META_ARCHITECTURE`.\n    \"\"\"", "\n", "model_name", "=", "cfg", ".", "MODEL", ".", "MODEL_NAME", "\n", "model", "=", "MODEL_REGISTRY", ".", "get", "(", "model_name", ")", "(", ")", "\n", "load_model_pretrain", "(", "model", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.models.model_zoo.load_model_pretrain": [[27, 53], ["logging.info", "torch.load", "collections.OrderedDict", "model.state_dict", "torch.load.items", "logging.info", "model.load_state_dict", "logging.info", "logging.info", "torch.load", "logging.info", "model.load_state_dict", "model.load_state_dict", "keys_wrong_shape.append"], "function", ["None"], ["", "def", "load_model_pretrain", "(", "model", ")", ":", "\n", "    ", "if", "cfg", ".", "PHASE", "==", "'train'", ":", "\n", "        ", "if", "cfg", ".", "TRAIN", ".", "PRETRAINED_MODEL_PATH", ":", "\n", "            ", "logging", ".", "info", "(", "'load pretrained model from {}'", ".", "format", "(", "cfg", ".", "TRAIN", ".", "PRETRAINED_MODEL_PATH", ")", ")", "\n", "state_dict_to_load", "=", "torch", ".", "load", "(", "cfg", ".", "TRAIN", ".", "PRETRAINED_MODEL_PATH", ")", "\n", "keys_wrong_shape", "=", "[", "]", "\n", "state_dict_suitable", "=", "OrderedDict", "(", ")", "\n", "state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict_to_load", ".", "items", "(", ")", ":", "\n", "                ", "if", "v", ".", "shape", "==", "state_dict", "[", "k", "]", ".", "shape", ":", "\n", "                    ", "state_dict_suitable", "[", "k", "]", "=", "v", "\n", "", "else", ":", "\n", "                    ", "keys_wrong_shape", ".", "append", "(", "k", ")", "\n", "", "", "logging", ".", "info", "(", "'Shape unmatched weights: {}'", ".", "format", "(", "keys_wrong_shape", ")", ")", "\n", "msg", "=", "model", ".", "load_state_dict", "(", "state_dict_suitable", ",", "strict", "=", "False", ")", "\n", "logging", ".", "info", "(", "msg", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "cfg", ".", "TEST", ".", "TEST_MODEL_PATH", ":", "\n", "            ", "logging", ".", "info", "(", "'load test model from {}'", ".", "format", "(", "cfg", ".", "TEST", ".", "TEST_MODEL_PATH", ")", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "cfg", ".", "TEST", ".", "TEST_MODEL_PATH", ")", "\n", "if", "\"state_dict\"", "in", "state_dict", ":", "\n", "                ", "msg", "=", "model", ".", "load_state_dict", "(", "state_dict", "[", "\"state_dict\"", "]", ",", "strict", "=", "False", ")", "\n", "", "else", ":", "\n", "                ", "msg", "=", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "# msg = model.load_state_dict(torch.load(cfg.TEST.TEST_MODEL_PATH), strict=False)", "\n", "", "logging", ".", "info", "(", "msg", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.mobilenet.MobileNet.__init__": [[12, 48], ["torch.Module.__init__", "int", "features.append", "torch.Sequential", "torch.Linear", "mobilenet.MobileNet.modules", "int", "modules._ConvBNReLU", "int", "range", "torch.AdaptiveAvgPool2d", "int", "isinstance", "features.append", "torch.init.kaiming_normal_", "isinstance", "modules._DepthwiseConv", "torch.init.zeros_", "torch.init.ones_", "torch.init.zeros_", "isinstance", "torch.init.normal_", "torch.init.zeros_"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "1000", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "MobileNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "multiplier", "=", "cfg", ".", "MODEL", ".", "BACKBONE_SCALE", "\n", "conv_dw_setting", "=", "[", "\n", "[", "64", ",", "1", ",", "1", "]", ",", "\n", "[", "128", ",", "2", ",", "2", "]", ",", "\n", "[", "256", ",", "2", ",", "2", "]", ",", "\n", "[", "512", ",", "6", ",", "2", "]", ",", "\n", "[", "1024", ",", "2", ",", "2", "]", "]", "\n", "input_channels", "=", "int", "(", "32", "*", "multiplier", ")", "if", "multiplier", ">", "1.0", "else", "32", "\n", "features", "=", "[", "_ConvBNReLU", "(", "3", ",", "input_channels", ",", "3", ",", "2", ",", "1", ",", "norm_layer", "=", "norm_layer", ")", "]", "\n", "\n", "for", "c", ",", "n", ",", "s", "in", "conv_dw_setting", ":", "\n", "            ", "out_channels", "=", "int", "(", "c", "*", "multiplier", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                ", "stride", "=", "s", "if", "i", "==", "0", "else", "1", "\n", "features", ".", "append", "(", "_DepthwiseConv", "(", "input_channels", ",", "out_channels", ",", "stride", ",", "norm_layer", ")", ")", "\n", "input_channels", "=", "out_channels", "\n", "", "", "self", ".", "last_inp_channels", "=", "int", "(", "1024", "*", "multiplier", ")", "\n", "features", ".", "append", "(", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", ")", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "*", "features", ")", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "int", "(", "1024", "*", "multiplier", ")", ",", "num_classes", ")", "\n", "\n", "# weight initialization", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "ones_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "0.01", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.mobilenet.MobileNet.forward": [[49, 53], ["mobilenet.MobileNet.features", "mobilenet.MobileNet.classifier", "mobilenet.MobileNet.view", "mobilenet.MobileNet.size", "mobilenet.MobileNet.size"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.mobilenet.MobileNetV2.__init__": [[56, 119], ["torch.Module.__init__", "modules._ConvBNReLU", "mobilenet.MobileNetV2._make_layer", "mobilenet.MobileNetV2._make_layer", "mobilenet.MobileNetV2._make_layer", "mobilenet.MobileNetV2._make_layer", "mobilenet.MobileNetV2._make_layer", "mobilenet.MobileNetV2.modules", "int", "isinstance", "torch.init.kaiming_normal_", "isinstance", "torch.init.zeros_", "torch.init.ones_", "torch.init.zeros_", "isinstance", "torch.init.normal_", "torch.init.zeros_"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__", "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet.GluonResNet._make_layer", "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet.GluonResNet._make_layer", "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet.GluonResNet._make_layer", "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet.GluonResNet._make_layer", "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet.GluonResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "1000", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "MobileNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "output_stride", "=", "cfg", ".", "MODEL", ".", "OUTPUT_STRIDE", "\n", "self", ".", "multiplier", "=", "cfg", ".", "MODEL", ".", "BACKBONE_SCALE", "\n", "if", "output_stride", "==", "32", ":", "\n", "            ", "dilations", "=", "[", "1", ",", "1", "]", "\n", "", "elif", "output_stride", "==", "16", ":", "\n", "            ", "dilations", "=", "[", "1", ",", "2", "]", "\n", "", "elif", "output_stride", "==", "8", ":", "\n", "            ", "dilations", "=", "[", "2", ",", "4", "]", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "inverted_residual_setting", "=", "[", "\n", "# t, c, n, s", "\n", "[", "1", ",", "16", ",", "1", ",", "1", "]", ",", "\n", "[", "6", ",", "24", ",", "2", ",", "2", "]", ",", "\n", "[", "6", ",", "32", ",", "3", ",", "2", "]", ",", "\n", "[", "6", ",", "64", ",", "4", ",", "2", "]", ",", "\n", "[", "6", ",", "96", ",", "3", ",", "1", "]", ",", "\n", "[", "6", ",", "160", ",", "3", ",", "2", "]", ",", "\n", "[", "6", ",", "320", ",", "1", ",", "1", "]", "]", "\n", "# building first layer", "\n", "input_channels", "=", "int", "(", "32", "*", "self", ".", "multiplier", ")", "if", "self", ".", "multiplier", ">", "1.0", "else", "32", "\n", "# last_channels = int(1280 * multiplier) if multiplier > 1.0 else 1280", "\n", "self", ".", "conv1", "=", "_ConvBNReLU", "(", "3", ",", "input_channels", ",", "3", ",", "2", ",", "1", ",", "relu6", "=", "True", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n", "# building inverted residual blocks", "\n", "self", ".", "planes", "=", "input_channels", "\n", "self", ".", "block1", "=", "self", ".", "_make_layer", "(", "InvertedResidual", ",", "self", ".", "planes", ",", "inverted_residual_setting", "[", "0", ":", "1", "]", ",", "\n", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block2", "=", "self", ".", "_make_layer", "(", "InvertedResidual", ",", "self", ".", "planes", ",", "inverted_residual_setting", "[", "1", ":", "2", "]", ",", "\n", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block3", "=", "self", ".", "_make_layer", "(", "InvertedResidual", ",", "self", ".", "planes", ",", "inverted_residual_setting", "[", "2", ":", "3", "]", ",", "\n", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block4", "=", "self", ".", "_make_layer", "(", "InvertedResidual", ",", "self", ".", "planes", ",", "inverted_residual_setting", "[", "3", ":", "5", "]", ",", "\n", "dilations", "[", "0", "]", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block5", "=", "self", ".", "_make_layer", "(", "InvertedResidual", ",", "self", ".", "planes", ",", "inverted_residual_setting", "[", "5", ":", "]", ",", "\n", "dilations", "[", "1", "]", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "last_inp_channels", "=", "self", ".", "planes", "\n", "\n", "# building last several layers", "\n", "# features = list()", "\n", "# features.append(_ConvBNReLU(input_channels, last_channels, 1, relu6=True, norm_layer=norm_layer))", "\n", "# features.append(nn.AdaptiveAvgPool2d(1))", "\n", "# self.features = nn.Sequential(*features)", "\n", "#", "\n", "# self.classifier = nn.Sequential(", "\n", "#     nn.Dropout2d(0.2),", "\n", "#     nn.Linear(last_channels, num_classes))", "\n", "\n", "# weight initialization", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "ones_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "0.01", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.mobilenet.MobileNetV2._make_layer": [[120, 132], ["list", "torch.Sequential", "int", "list.append", "range", "block", "list.append", "block"], "methods", ["None"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "inverted_residual_setting", ",", "dilation", "=", "1", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "features", "=", "list", "(", ")", "\n", "for", "t", ",", "c", ",", "n", ",", "s", "in", "inverted_residual_setting", ":", "\n", "            ", "out_channels", "=", "int", "(", "c", "*", "self", ".", "multiplier", ")", "\n", "stride", "=", "s", "if", "dilation", "==", "1", "else", "1", "\n", "features", ".", "append", "(", "block", "(", "planes", ",", "out_channels", ",", "stride", ",", "t", ",", "dilation", ",", "norm_layer", ")", ")", "\n", "planes", "=", "out_channels", "\n", "for", "i", "in", "range", "(", "n", "-", "1", ")", ":", "\n", "                ", "features", ".", "append", "(", "block", "(", "planes", ",", "out_channels", ",", "1", ",", "t", ",", "norm_layer", "=", "norm_layer", ")", ")", "\n", "planes", "=", "out_channels", "\n", "", "", "self", ".", "planes", "=", "planes", "\n", "return", "nn", ".", "Sequential", "(", "*", "features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.mobilenet.MobileNetV2.forward": [[133, 144], ["mobilenet.MobileNetV2.conv1", "mobilenet.MobileNetV2.block1", "mobilenet.MobileNetV2.block2", "mobilenet.MobileNetV2.block3", "mobilenet.MobileNetV2.block4", "mobilenet.MobileNetV2.block5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "block1", "(", "x", ")", "\n", "c1", "=", "self", ".", "block2", "(", "x", ")", "\n", "c2", "=", "self", ".", "block3", "(", "c1", ")", "\n", "c3", "=", "self", ".", "block4", "(", "c2", ")", "\n", "c4", "=", "self", ".", "block5", "(", "c3", ")", "\n", "\n", "# x = self.features(x)", "\n", "# x = self.classifier(x.view(x.size(0), x.size(1)))", "\n", "return", "c1", ",", "c2", ",", "c3", ",", "c4", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.mobilenet.mobilenet_v1": [[146, 149], ["build.BACKBONE_REGISTRY.register", "mobilenet.MobileNet"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.utils.registry.Registry.register"], ["", "", "@", "BACKBONE_REGISTRY", ".", "register", "(", ")", "\n", "def", "mobilenet_v1", "(", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "    ", "return", "MobileNet", "(", "norm_layer", "=", "norm_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.mobilenet.mobilenet_v2": [[151, 154], ["build.BACKBONE_REGISTRY.register", "mobilenet.MobileNetV2"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.utils.registry.Registry.register"], ["", "@", "BACKBONE_REGISTRY", ".", "register", "(", ")", "\n", "def", "mobilenet_v2", "(", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "    ", "return", "MobileNetV2", "(", "norm_layer", "=", "norm_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.build.load_backbone_pretrained": [[35, 50], ["os.path.isfile", "logging.info", "model.load_state_dict", "logging.info", "torch.load", "torch.load", "logging.info", "logging.info", "model.load_state_dict", "logging.info", "torch.load_url"], "function", ["None"], ["def", "load_backbone_pretrained", "(", "model", ",", "backbone", ")", ":", "\n", "    ", "if", "cfg", ".", "PHASE", "==", "'train'", "and", "cfg", ".", "TRAIN", ".", "BACKBONE_PRETRAINED", "and", "(", "not", "cfg", ".", "TRAIN", ".", "PRETRAINED_MODEL_PATH", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "cfg", ".", "TRAIN", ".", "BACKBONE_PRETRAINED_PATH", ")", ":", "\n", "            ", "logging", ".", "info", "(", "'Load backbone pretrained model from {}'", ".", "format", "(", "\n", "cfg", ".", "TRAIN", ".", "BACKBONE_PRETRAINED_PATH", "\n", ")", ")", "\n", "msg", "=", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "cfg", ".", "TRAIN", ".", "BACKBONE_PRETRAINED_PATH", ")", ",", "strict", "=", "False", ")", "\n", "logging", ".", "info", "(", "msg", ")", "\n", "", "elif", "backbone", "not", "in", "model_urls", ":", "\n", "            ", "logging", ".", "info", "(", "'{} has no pretrained model'", ".", "format", "(", "backbone", ")", ")", "\n", "return", "\n", "", "else", ":", "\n", "            ", "logging", ".", "info", "(", "'load backbone pretrained model from url..'", ")", "\n", "msg", "=", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "backbone", "]", ")", ",", "strict", "=", "False", ")", "\n", "logging", ".", "info", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.build.get_segmentation_backbone": [[52, 62], ["gluon_resnet.gluon_resnext101_32x4d", "build.load_backbone_pretrained", "BACKBONE_REGISTRY.get"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet.gluon_resnext101_32x4d", "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.build.load_backbone_pretrained", "home.repos.pwc.inspect_result.yangcao1996_fanet.utils.score.SegmentationMetric.get"], ["", "", "", "def", "get_segmentation_backbone", "(", "backbone", ",", "norm_layer", "=", "torch", ".", "nn", ".", "BatchNorm2d", ")", ":", "\n", "    ", "\"\"\"\n    Built the backbone model, defined by `cfg.MODEL.BACKBONE`.\n    \"\"\"", "\n", "if", "backbone", "in", "[", "\"gluon_resnext101_32x4d\"", "]", ":", "\n", "        ", "model", "=", "gluon_resnext101_32x4d", "(", "pretrained", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "BACKBONE_REGISTRY", ".", "get", "(", "backbone", ")", "(", "norm_layer", ")", "\n", "load_backbone_pretrained", "(", "model", ",", "backbone", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.hrnet.BasicBlock.__init__": [[28, 37], ["torch.Module.__init__", "hrnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "hrnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__", "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.hrnet.conv3x3", "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.hrnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.hrnet.BasicBlock.forward": [[38, 55], ["hrnet.BasicBlock.conv1", "hrnet.BasicBlock.bn1", "hrnet.BasicBlock.relu", "hrnet.BasicBlock.conv2", "hrnet.BasicBlock.bn2", "hrnet.BasicBlock.relu", "hrnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.hrnet.Bottleneck.__init__": [[60, 73], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.hrnet.Bottleneck.forward": [[74, 95], ["hrnet.Bottleneck.conv1", "hrnet.Bottleneck.bn1", "hrnet.Bottleneck.relu", "hrnet.Bottleneck.conv2", "hrnet.Bottleneck.bn2", "hrnet.Bottleneck.relu", "hrnet.Bottleneck.conv3", "hrnet.Bottleneck.bn3", "hrnet.Bottleneck.relu", "hrnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.hrnet.HighResolutionModule.__init__": [[98, 114], ["torch.Module.__init__", "hrnet.HighResolutionModule._check_branches", "hrnet.HighResolutionModule._make_branches", "hrnet.HighResolutionModule._make_fuse_layers", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__", "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.hrnet.HighResolutionModule._check_branches", "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.hrnet.HighResolutionModule._make_branches", "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.hrnet.HighResolutionModule._make_fuse_layers"], ["    ", "def", "__init__", "(", "self", ",", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_inchannels", ",", "\n", "num_channels", ",", "fuse_method", ",", "multi_scale_output", "=", "True", ")", ":", "\n", "        ", "super", "(", "HighResolutionModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_check_branches", "(", "\n", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_inchannels", ",", "num_channels", ")", "\n", "\n", "self", ".", "num_inchannels", "=", "num_inchannels", "\n", "self", ".", "fuse_method", "=", "fuse_method", "\n", "self", ".", "num_branches", "=", "num_branches", "\n", "\n", "self", ".", "multi_scale_output", "=", "multi_scale_output", "\n", "\n", "self", ".", "branches", "=", "self", ".", "_make_branches", "(", "\n", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_channels", ")", "\n", "self", ".", "fuse_layers", "=", "self", ".", "_make_fuse_layers", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.hrnet.HighResolutionModule._check_branches": [[115, 134], ["len", "logging.error", "ValueError", "len", "logging.error", "ValueError", "len", "logging.error", "ValueError", "len", "len", "len"], "methods", ["None"], ["", "def", "_check_branches", "(", "self", ",", "num_branches", ",", "blocks", ",", "num_blocks", ",", "\n", "num_inchannels", ",", "num_channels", ")", ":", "\n", "        ", "if", "num_branches", "!=", "len", "(", "num_blocks", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_BLOCKS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_blocks", ")", ")", "\n", "logging", ".", "error", "(", "error_msg", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n", "", "if", "num_branches", "!=", "len", "(", "num_channels", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_CHANNELS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_channels", ")", ")", "\n", "logging", ".", "error", "(", "error_msg", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n", "", "if", "num_branches", "!=", "len", "(", "num_inchannels", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_INCHANNELS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_inchannels", ")", ")", "\n", "logging", ".", "error", "(", "error_msg", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.hrnet.HighResolutionModule._make_one_branch": [[135, 157], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "def", "_make_one_branch", "(", "self", ",", "branch_index", ",", "block", ",", "num_blocks", ",", "num_channels", ",", "\n", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "num_inchannels", "[", "branch_index", "]", "!=", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "num_inchannels", "[", "branch_index", "]", "=", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "num_blocks", "[", "branch_index", "]", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.hrnet.HighResolutionModule._make_branches": [[158, 166], ["range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "branches.append", "hrnet.HighResolutionModule._make_one_branch"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.hrnet.HighResolutionModule._make_one_branch"], ["", "def", "_make_branches", "(", "self", ",", "num_branches", ",", "block", ",", "num_blocks", ",", "num_channels", ")", ":", "\n", "        ", "branches", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_branches", ")", ":", "\n", "            ", "branches", ".", "append", "(", "\n", "self", ".", "_make_one_branch", "(", "i", ",", "block", ",", "num_blocks", ",", "num_channels", ")", ")", "\n", "\n", "", "return", "nn", ".", "ModuleList", "(", "branches", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.hrnet.HighResolutionModule._make_fuse_layers": [[167, 211], ["range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "fuse_layers.append", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "fuse_layer.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "fuse_layer.append", "range", "fuse_layer.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Sequential", "torch.Sequential", "torch.Sequential", "conv3x3s.append", "conv3x3s.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_fuse_layers", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "num_branches", "==", "1", ":", "\n", "            ", "return", "None", "\n", "\n", "", "num_branches", "=", "self", ".", "num_branches", "\n", "num_inchannels", "=", "self", ".", "num_inchannels", "\n", "fuse_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_branches", "if", "self", ".", "multi_scale_output", "else", "1", ")", ":", "\n", "            ", "fuse_layer", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_branches", ")", ":", "\n", "                ", "if", "j", ">", "i", ":", "\n", "                    ", "fuse_layer", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_inchannels", "[", "j", "]", ",", "\n", "num_inchannels", "[", "i", "]", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_inchannels", "[", "i", "]", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", "**", "(", "j", "-", "i", ")", ",", "mode", "=", "'nearest'", ")", ")", ")", "\n", "", "elif", "j", "==", "i", ":", "\n", "                    ", "fuse_layer", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "                    ", "conv3x3s", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "i", "-", "j", ")", ":", "\n", "                        ", "if", "k", "==", "i", "-", "j", "-", "1", ":", "\n", "                            ", "num_outchannels_conv3x3", "=", "num_inchannels", "[", "i", "]", "\n", "conv3x3s", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_inchannels", "[", "j", "]", ",", "\n", "num_outchannels_conv3x3", ",", "\n", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_outchannels_conv3x3", ")", ")", ")", "\n", "", "else", ":", "\n", "                            ", "num_outchannels_conv3x3", "=", "num_inchannels", "[", "j", "]", "\n", "conv3x3s", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_inchannels", "[", "j", "]", ",", "\n", "num_outchannels_conv3x3", ",", "\n", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_outchannels_conv3x3", ")", ",", "\n", "nn", ".", "ReLU", "(", "False", ")", ")", ")", "\n", "", "", "fuse_layer", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "conv3x3s", ")", ")", "\n", "", "", "fuse_layers", ".", "append", "(", "nn", ".", "ModuleList", "(", "fuse_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "ModuleList", "(", "fuse_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.hrnet.HighResolutionModule.get_num_inchannels": [[212, 214], ["None"], "methods", ["None"], ["", "def", "get_num_inchannels", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_inchannels", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.hrnet.HighResolutionModule.forward": [[215, 233], ["range", "range", "len", "range", "x_fuse.append", "hrnet.HighResolutionModule.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "num_branches", "==", "1", ":", "\n", "            ", "return", "[", "self", ".", "branches", "[", "0", "]", "(", "x", "[", "0", "]", ")", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_branches", ")", ":", "\n", "            ", "x", "[", "i", "]", "=", "self", ".", "branches", "[", "i", "]", "(", "x", "[", "i", "]", ")", "\n", "\n", "", "x_fuse", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "fuse_layers", ")", ")", ":", "\n", "            ", "y", "=", "x", "[", "0", "]", "if", "i", "==", "0", "else", "self", ".", "fuse_layers", "[", "i", "]", "[", "0", "]", "(", "x", "[", "0", "]", ")", "\n", "for", "j", "in", "range", "(", "1", ",", "self", ".", "num_branches", ")", ":", "\n", "                ", "if", "i", "==", "j", ":", "\n", "                    ", "y", "=", "y", "+", "x", "[", "j", "]", "\n", "", "else", ":", "\n", "                    ", "y", "=", "y", "+", "self", ".", "fuse_layers", "[", "i", "]", "[", "j", "]", "(", "x", "[", "j", "]", ")", "\n", "", "", "x_fuse", ".", "append", "(", "self", ".", "relu", "(", "y", ")", ")", "\n", "\n", "", "return", "x_fuse", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.hrnet.HighResolutionNet.__init__": [[243, 292], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "hrnet.HighResolutionNet._make_layer", "hrnet.HighResolutionNet._make_transition_layer", "hrnet.HighResolutionNet._make_stage", "hrnet.HighResolutionNet._make_transition_layer", "hrnet.HighResolutionNet._make_stage", "hrnet.HighResolutionNet._make_transition_layer", "hrnet.HighResolutionNet._make_stage", "numpy.int", "numpy.sum", "range", "range", "range", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__", "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet.GluonResNet._make_layer", "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.hrnet.HighResolutionNet._make_transition_layer", "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.hrnet.HighResolutionNet._make_stage", "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.hrnet.HighResolutionNet._make_transition_layer", "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.hrnet.HighResolutionNet._make_stage", "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.hrnet.HighResolutionNet._make_transition_layer", "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.hrnet.HighResolutionNet._make_stage"], ["    ", "def", "__init__", "(", "self", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "HighResolutionNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "64", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "stage1_cfg", "=", "cfg", ".", "MODEL", ".", "HRNET", ".", "STAGE1", "\n", "num_channels", "=", "self", ".", "stage1_cfg", "[", "'NUM_CHANNELS'", "]", "[", "0", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage1_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_blocks", "=", "self", ".", "stage1_cfg", "[", "'NUM_BLOCKS'", "]", "[", "0", "]", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_channels", ",", "num_blocks", ",", "norm_layer", "=", "norm_layer", ")", "\n", "stage1_out_channel", "=", "block", ".", "expansion", "*", "num_channels", "\n", "\n", "self", ".", "stage2_cfg", "=", "cfg", ".", "MODEL", ".", "HRNET", ".", "STAGE2", "\n", "num_channels", "=", "self", ".", "stage2_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage2_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "]", "\n", "self", ".", "transition1", "=", "self", ".", "_make_transition_layer", "(", "\n", "[", "stage1_out_channel", "]", ",", "num_channels", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "stage2", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage2_cfg", ",", "num_channels", ")", "\n", "\n", "self", ".", "stage3_cfg", "=", "cfg", ".", "MODEL", ".", "HRNET", ".", "STAGE3", "\n", "num_channels", "=", "self", ".", "stage3_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage3_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "]", "\n", "self", ".", "transition2", "=", "self", ".", "_make_transition_layer", "(", "\n", "pre_stage_channels", ",", "num_channels", ")", "\n", "self", ".", "stage3", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage3_cfg", ",", "num_channels", ")", "\n", "\n", "self", ".", "stage4_cfg", "=", "cfg", ".", "MODEL", ".", "HRNET", ".", "STAGE4", "\n", "num_channels", "=", "self", ".", "stage4_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage4_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "]", "\n", "self", ".", "transition3", "=", "self", ".", "_make_transition_layer", "(", "\n", "pre_stage_channels", ",", "num_channels", ")", "\n", "self", ".", "stage4", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage4_cfg", ",", "num_channels", ",", "multi_scale_output", "=", "True", ")", "\n", "\n", "self", ".", "last_inp_channels", "=", "np", ".", "int", "(", "np", ".", "sum", "(", "pre_stage_channels", ")", ")", "\n", "# Classification Head", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.hrnet.HighResolutionNet._make_head": [[298, 346], ["enumerate", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "hrnet.HighResolutionNet._make_layer", "torch.ModuleList.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "len", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet.GluonResNet._make_layer"], ["", "def", "_make_head", "(", "self", ",", "pre_stage_channels", ")", ":", "\n", "        ", "head_block", "=", "Bottleneck", "\n", "head_channels", "=", "[", "32", ",", "64", ",", "128", ",", "256", "]", "\n", "\n", "# Increasing the #channels on each resolution", "\n", "# from C, 2C, 4C, 8C to 128, 256, 512, 1024", "\n", "incre_modules", "=", "[", "]", "\n", "for", "i", ",", "channels", "in", "enumerate", "(", "pre_stage_channels", ")", ":", "\n", "            ", "incre_module", "=", "self", ".", "_make_layer", "(", "head_block", ",", "\n", "channels", ",", "\n", "head_channels", "[", "i", "]", ",", "\n", "1", ",", "\n", "stride", "=", "1", ")", "\n", "incre_modules", ".", "append", "(", "incre_module", ")", "\n", "", "incre_modules", "=", "nn", ".", "ModuleList", "(", "incre_modules", ")", "\n", "\n", "# downsampling modules", "\n", "downsamp_modules", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "pre_stage_channels", ")", "-", "1", ")", ":", "\n", "            ", "in_channels", "=", "head_channels", "[", "i", "]", "*", "head_block", ".", "expansion", "\n", "out_channels", "=", "head_channels", "[", "i", "+", "1", "]", "*", "head_block", ".", "expansion", "\n", "\n", "downsamp_module", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "downsamp_modules", ".", "append", "(", "downsamp_module", ")", "\n", "", "downsamp_modules", "=", "nn", ".", "ModuleList", "(", "downsamp_modules", ")", "\n", "\n", "final_layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "head_channels", "[", "3", "]", "*", "head_block", ".", "expansion", ",", "\n", "out_channels", "=", "2048", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "2048", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "return", "incre_modules", ",", "downsamp_modules", ",", "final_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.hrnet.HighResolutionNet._make_transition_layer": [[347, 382], ["len", "len", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "transition_layers.append", "transition_layers.append", "transition_layers.append", "conv3x3s.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_transition_layer", "(", "self", ",", "num_channels_pre_layer", ",", "num_channels_cur_layer", ",", "\n", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "num_branches_cur", "=", "len", "(", "num_channels_cur_layer", ")", "\n", "num_branches_pre", "=", "len", "(", "num_channels_pre_layer", ")", "\n", "\n", "transition_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_branches_cur", ")", ":", "\n", "            ", "if", "i", "<", "num_branches_pre", ":", "\n", "                ", "if", "num_channels_cur_layer", "[", "i", "]", "!=", "num_channels_pre_layer", "[", "i", "]", ":", "\n", "                    ", "transition_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_channels_pre_layer", "[", "i", "]", ",", "\n", "num_channels_cur_layer", "[", "i", "]", ",", "\n", "3", ",", "\n", "1", ",", "\n", "1", ",", "\n", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "\n", "num_channels_cur_layer", "[", "i", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "", "else", ":", "\n", "                    ", "transition_layers", ".", "append", "(", "None", ")", "\n", "", "", "else", ":", "\n", "                ", "conv3x3s", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", "+", "1", "-", "num_branches_pre", ")", ":", "\n", "                    ", "inchannels", "=", "num_channels_pre_layer", "[", "-", "1", "]", "\n", "outchannels", "=", "num_channels_cur_layer", "[", "i", "]", "if", "j", "==", "i", "-", "num_branches_pre", "else", "inchannels", "\n", "conv3x3s", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "inchannels", ",", "outchannels", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "outchannels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "", "transition_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "conv3x3s", ")", ")", "\n", "\n", "", "", "return", "nn", ".", "ModuleList", "(", "transition_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.hrnet.HighResolutionNet._make_layer": [[383, 399], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "inplanes", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.hrnet.HighResolutionNet._make_stage": [[400, 429], ["range", "modules.append", "modules[].get_num_inchannels", "torch.Sequential", "torch.Sequential", "torch.Sequential", "hrnet.HighResolutionModule"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.hrnet.HighResolutionModule.get_num_inchannels"], ["", "def", "_make_stage", "(", "self", ",", "layer_config", ",", "num_inchannels", ",", "\n", "multi_scale_output", "=", "True", ")", ":", "\n", "        ", "num_modules", "=", "layer_config", "[", "'NUM_MODULES'", "]", "\n", "num_branches", "=", "layer_config", "[", "'NUM_BRANCHES'", "]", "\n", "num_blocks", "=", "layer_config", "[", "'NUM_BLOCKS'", "]", "\n", "num_channels", "=", "layer_config", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "layer_config", "[", "'BLOCK'", "]", "]", "\n", "fuse_method", "=", "layer_config", "[", "'FUSE_METHOD'", "]", "\n", "\n", "modules", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_modules", ")", ":", "\n", "# multi_scale_output is only used last module", "\n", "            ", "if", "not", "multi_scale_output", "and", "i", "==", "num_modules", "-", "1", ":", "\n", "                ", "reset_multi_scale_output", "=", "False", "\n", "", "else", ":", "\n", "                ", "reset_multi_scale_output", "=", "True", "\n", "\n", "", "modules", ".", "append", "(", "\n", "HighResolutionModule", "(", "num_branches", ",", "\n", "block", ",", "\n", "num_blocks", ",", "\n", "num_inchannels", ",", "\n", "num_channels", ",", "\n", "fuse_method", ",", "\n", "reset_multi_scale_output", ")", "\n", ")", "\n", "num_inchannels", "=", "modules", "[", "-", "1", "]", ".", "get_num_inchannels", "(", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "modules", ")", ",", "num_inchannels", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.hrnet.HighResolutionNet.forward": [[430, 480], ["hrnet.HighResolutionNet.conv1", "hrnet.HighResolutionNet.bn1", "hrnet.HighResolutionNet.relu", "hrnet.HighResolutionNet.conv2", "hrnet.HighResolutionNet.bn2", "hrnet.HighResolutionNet.relu", "hrnet.HighResolutionNet.layer1", "range", "hrnet.HighResolutionNet.stage2", "range", "hrnet.HighResolutionNet.stage3", "range", "hrnet.HighResolutionNet.stage4", "tuple", "x_list.append", "x_list.append", "x_list.append", "x_list.append", "x_list.append", "x_list.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage2_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition1", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition1", "[", "i", "]", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "x", ")", "\n", "", "", "y_list", "=", "self", ".", "stage2", "(", "x_list", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage3_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition2", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition2", "[", "i", "]", "(", "y_list", "[", "-", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "y_list", "[", "i", "]", ")", "\n", "", "", "y_list", "=", "self", ".", "stage3", "(", "x_list", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage4_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition3", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition3", "[", "i", "]", "(", "y_list", "[", "-", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "y_list", "[", "i", "]", ")", "\n", "", "", "y_list", "=", "self", ".", "stage4", "(", "x_list", ")", "\n", "\n", "# Classification Head", "\n", "# y = self.incre_modules[0](y_list[0])", "\n", "# for i in range(len(self.downsamp_modules)):", "\n", "#     y = self.incre_modules[i + 1](y_list[i + 1]) + \\", "\n", "#         self.downsamp_modules[i](y)", "\n", "#", "\n", "# y = self.final_layer(y)", "\n", "#", "\n", "# if torch._C._get_tracing_state():", "\n", "#     y = y.flatten(start_dim=2).mean(dim=2)", "\n", "# else:", "\n", "#     y = F.avg_pool2d(y, kernel_size=y.size()", "\n", "#     [2:]).view(y.size(0), -1)", "\n", "#", "\n", "# y = self.classifier(y)", "\n", "\n", "return", "tuple", "(", "y_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.hrnet.HighResolutionNet.init_weights": [[481, 501], ["logging.info", "hrnet.HighResolutionNet.modules", "os.path.isfile", "isinstance", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "logging.info", "hrnet.HighResolutionNet.state_dict", "torch.load.items", "torch.load.items", "torch.load.items", "hrnet.HighResolutionNet.update", "hrnet.HighResolutionNet.load_state_dict", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "logging.info", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.load.items", "torch.load.items", "torch.load.items", "hrnet.HighResolutionNet.keys"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.utils.score.SegmentationMetric.update"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "''", ",", ")", ":", "\n", "        ", "logging", ".", "info", "(", "'=> init weights from normal distribution'", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "\n", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "if", "os", ".", "path", ".", "isfile", "(", "pretrained", ")", ":", "\n", "            ", "pretrained_dict", "=", "torch", ".", "load", "(", "pretrained", ")", "\n", "logging", ".", "info", "(", "'=> loading pretrained model {}'", ".", "format", "(", "pretrained", ")", ")", "\n", "model_dict", "=", "self", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "\n", "if", "k", "in", "model_dict", ".", "keys", "(", ")", "}", "\n", "for", "k", ",", "_", "in", "pretrained_dict", ".", "items", "(", ")", ":", "\n", "                ", "logging", ".", "info", "(", "\n", "'=> loading {} pretrained model {}'", ".", "format", "(", "k", ",", "pretrained", ")", ")", "\n", "", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "self", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.hrnet.conv3x3": [[19, 23], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.hrnet.hrnet_w18_small_v1": [[503, 506], ["build.BACKBONE_REGISTRY.register", "hrnet.HighResolutionNet"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.utils.registry.Registry.register"], ["", "", "", "@", "BACKBONE_REGISTRY", ".", "register", "(", ")", "\n", "def", "hrnet_w18_small_v1", "(", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "    ", "return", "HighResolutionNet", "(", "norm_layer", "=", "norm_layer", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.resnet.BasicBlockV1b.__init__": [[12, 24], ["torch.Module.__init__", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.Conv2d", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "downsample", "=", "None", ",", "\n", "previous_dilation", "=", "1", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "BasicBlockV1b", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "3", ",", "stride", ",", "\n", "dilation", ",", "dilation", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "3", ",", "1", ",", "previous_dilation", ",", "\n", "dilation", "=", "previous_dilation", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.resnet.BasicBlockV1b.forward": [[25, 42], ["resnet.BasicBlockV1b.conv1", "resnet.BasicBlockV1b.bn1", "resnet.BasicBlockV1b.relu", "resnet.BasicBlockV1b.conv2", "resnet.BasicBlockV1b.bn2", "resnet.BasicBlockV1b.relu", "resnet.BasicBlockV1b.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.resnet.BottleneckV1b.__init__": [[47, 63], ["torch.Module.__init__", "torch.Conv2d", "norm_layer", "torch.Conv2d", "norm_layer", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "downsample", "=", "None", ",", "\n", "previous_dilation", "=", "1", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "BottleneckV1b", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "3", ",", "stride", ",", "\n", "dilation", ",", "dilation", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu0", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "#self.relu = nn.ReLU(True)", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.resnet.BottleneckV1b.forward": [[64, 85], ["resnet.BottleneckV1b.conv1", "resnet.BottleneckV1b.bn1", "resnet.BottleneckV1b.relu0", "resnet.BottleneckV1b.conv2", "resnet.BottleneckV1b.bn2", "resnet.BottleneckV1b.relu1", "resnet.BottleneckV1b.conv3", "resnet.BottleneckV1b.bn3", "resnet.BottleneckV1b.relu2", "resnet.BottleneckV1b.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu0", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu1", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu2", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.resnet.ResNetV1.__init__": [[89, 149], ["int", "torch.Module.__init__", "norm_layer", "torch.ReLU", "torch.MaxPool2d", "resnet.ResNetV1._make_layer", "resnet.ResNetV1._make_layer", "resnet.ResNetV1._make_layer", "resnet.ResNetV1._make_layer", "int", "torch.AdaptiveAvgPool2d", "torch.Linear", "resnet.ResNetV1.modules", "int", "torch.Sequential", "torch.Conv2d", "int", "int", "int", "int", "int", "isinstance", "resnet.ResNetV1.modules", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.Conv2d", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__", "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet.GluonResNet._make_layer", "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet.GluonResNet._make_layer", "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet.GluonResNet._make_layer", "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet.GluonResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "deep_stem", "=", "False", ",", "\n", "zero_init_residual", "=", "False", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "output_stride", "=", "cfg", ".", "MODEL", ".", "OUTPUT_STRIDE", "\n", "scale", "=", "cfg", ".", "MODEL", ".", "BACKBONE_SCALE", "\n", "if", "output_stride", "==", "32", ":", "\n", "            ", "dilations", "=", "[", "1", ",", "1", "]", "\n", "strides", "=", "[", "2", ",", "2", "]", "\n", "", "elif", "output_stride", "==", "16", ":", "\n", "            ", "dilations", "=", "[", "1", ",", "2", "]", "\n", "strides", "=", "[", "2", ",", "1", "]", "\n", "", "elif", "output_stride", "==", "8", ":", "\n", "            ", "dilations", "=", "[", "2", ",", "4", "]", "\n", "strides", "=", "[", "1", ",", "1", "]", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "self", ".", "inplanes", "=", "int", "(", "(", "128", "if", "deep_stem", "else", "64", ")", "*", "scale", ")", "\n", "super", "(", "ResNetV1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "deep_stem", ":", "\n", "# resnet vc", "\n", "            ", "mid_channel", "=", "int", "(", "64", "*", "scale", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "mid_channel", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "mid_channel", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "mid_channel", ",", "mid_channel", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "mid_channel", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "mid_channel", ",", "self", ".", "inplanes", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "7", ",", "2", ",", "3", ",", "bias", "=", "False", ")", "\n", "", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "3", ",", "2", ",", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "int", "(", "64", "*", "scale", ")", ",", "layers", "[", "0", "]", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "int", "(", "128", "*", "scale", ")", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "int", "(", "256", "*", "scale", ")", ",", "layers", "[", "2", "]", ",", "stride", "=", "strides", "[", "0", "]", ",", "dilation", "=", "dilations", "[", "0", "]", ",", "\n", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "int", "(", "512", "*", "scale", ")", ",", "layers", "[", "3", "]", ",", "stride", "=", "strides", "[", "1", "]", ",", "dilation", "=", "dilations", "[", "1", "]", ",", "\n", "norm_layer", "=", "norm_layer", ",", "multi_grid", "=", "cfg", ".", "MODEL", ".", "DANET", ".", "MULTI_GRID", ",", "\n", "multi_dilation", "=", "cfg", ".", "MODEL", ".", "DANET", ".", "MULTI_DILATION", ")", "\n", "\n", "self", ".", "last_inp_channels", "=", "int", "(", "512", "*", "block", ".", "expansion", "*", "scale", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "int", "(", "512", "*", "block", ".", "expansion", "*", "scale", ")", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "BottleneckV1b", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlockV1b", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.resnet.ResNetV1._make_layer": [[150, 185], ["torch.Sequential", "torch.Sequential", "layers.append", "len", "range", "range", "torch.Conv2d", "norm_layer", "layers.append", "block", "layers.append", "layers.append", "block", "layers.append", "RuntimeError", "block", "block", "block"], "methods", ["None"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", "multi_grid", "=", "False", ",", "multi_dilation", "=", "None", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "1", ",", "stride", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "if", "not", "multi_grid", ":", "\n", "            ", "if", "dilation", "in", "(", "1", ",", "2", ")", ":", "\n", "                ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "1", ",", "downsample", "=", "downsample", ",", "\n", "previous_dilation", "=", "dilation", ",", "norm_layer", "=", "norm_layer", ")", ")", "\n", "", "elif", "dilation", "==", "4", ":", "\n", "                ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "2", ",", "downsample", "=", "downsample", ",", "\n", "previous_dilation", "=", "dilation", ",", "norm_layer", "=", "norm_layer", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"=> unknown dilation size: {}\"", ".", "format", "(", "dilation", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "multi_dilation", "[", "0", "]", ",", "\n", "downsample", "=", "downsample", ",", "previous_dilation", "=", "dilation", ",", "norm_layer", "=", "norm_layer", ")", ")", "\n", "", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "\n", "if", "multi_grid", ":", "\n", "            ", "div", "=", "len", "(", "multi_dilation", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "                ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "multi_dilation", "[", "i", "%", "div", "]", ",", "\n", "previous_dilation", "=", "dilation", ",", "norm_layer", "=", "norm_layer", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "                ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ",", "\n", "previous_dilation", "=", "dilation", ",", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.resnet.ResNetV1.forward": [[186, 203], ["resnet.ResNetV1.conv1", "resnet.ResNetV1.bn1", "resnet.ResNetV1.relu", "resnet.ResNetV1.maxpool", "resnet.ResNetV1.layer1", "resnet.ResNetV1.layer2", "resnet.ResNetV1.layer3", "resnet.ResNetV1.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "c1", "=", "self", ".", "layer1", "(", "x", ")", "\n", "c2", "=", "self", ".", "layer2", "(", "c1", ")", "\n", "c3", "=", "self", ".", "layer3", "(", "c2", ")", "\n", "c4", "=", "self", ".", "layer4", "(", "c3", ")", "\n", "\n", "# for classification", "\n", "# x = self.avgpool(c4)", "\n", "# x = x.view(x.size(0), -1)", "\n", "# x = self.fc(x)", "\n", "\n", "return", "c1", ",", "c2", ",", "c3", ",", "c4", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.resnet.resnet18": [[205, 209], ["build.BACKBONE_REGISTRY.register", "resnet.ResNetV1"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.utils.registry.Registry.register"], ["", "", "@", "BACKBONE_REGISTRY", ".", "register", "(", ")", "\n", "def", "resnet18", "(", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "    ", "num_block", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", "\n", "return", "ResNetV1", "(", "BasicBlockV1b", ",", "num_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.resnet.resnet34": [[211, 215], ["build.BACKBONE_REGISTRY.register", "resnet.ResNetV1"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.utils.registry.Registry.register"], ["", "@", "BACKBONE_REGISTRY", ".", "register", "(", ")", "\n", "def", "resnet34", "(", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "    ", "num_block", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", "\n", "return", "ResNetV1", "(", "BasicBlockV1b", ",", "num_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.resnet.resnet50": [[217, 221], ["build.BACKBONE_REGISTRY.register", "resnet.ResNetV1"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.utils.registry.Registry.register"], ["", "@", "BACKBONE_REGISTRY", ".", "register", "(", ")", "\n", "def", "resnet50", "(", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "    ", "num_block", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", "\n", "return", "ResNetV1", "(", "BottleneckV1b", ",", "num_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.resnet.resnet101": [[223, 227], ["build.BACKBONE_REGISTRY.register", "resnet.ResNetV1"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.utils.registry.Registry.register"], ["", "@", "BACKBONE_REGISTRY", ".", "register", "(", ")", "\n", "def", "resnet101", "(", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "    ", "num_block", "=", "[", "3", ",", "4", ",", "23", ",", "3", "]", "\n", "return", "ResNetV1", "(", "BottleneckV1b", ",", "num_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.resnet.resnet152": [[229, 233], ["build.BACKBONE_REGISTRY.register", "resnet.ResNetV1"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.utils.registry.Registry.register"], ["", "@", "BACKBONE_REGISTRY", ".", "register", "(", ")", "\n", "def", "resnet152", "(", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "    ", "num_block", "=", "[", "3", ",", "8", ",", "36", ",", "3", "]", "\n", "return", "ResNetV1", "(", "BottleneckV1b", ",", "num_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.resnet.resnet50c": [[235, 239], ["build.BACKBONE_REGISTRY.register", "resnet.ResNetV1"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.utils.registry.Registry.register"], ["", "@", "BACKBONE_REGISTRY", ".", "register", "(", ")", "\n", "def", "resnet50c", "(", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "    ", "num_block", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", "\n", "return", "ResNetV1", "(", "BottleneckV1b", ",", "num_block", ",", "norm_layer", "=", "norm_layer", ",", "deep_stem", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.resnet.resnet101c": [[241, 245], ["build.BACKBONE_REGISTRY.register", "resnet.ResNetV1"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.utils.registry.Registry.register"], ["", "@", "BACKBONE_REGISTRY", ".", "register", "(", ")", "\n", "def", "resnet101c", "(", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "    ", "num_block", "=", "[", "3", ",", "4", ",", "23", ",", "3", "]", "\n", "return", "ResNetV1", "(", "BottleneckV1b", ",", "num_block", ",", "norm_layer", "=", "norm_layer", ",", "deep_stem", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.resnet.resnet152c": [[247, 251], ["build.BACKBONE_REGISTRY.register", "resnet.ResNetV1"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.utils.registry.Registry.register"], ["", "@", "BACKBONE_REGISTRY", ".", "register", "(", ")", "\n", "def", "resnet152c", "(", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "    ", "num_block", "=", "[", "3", ",", "8", ",", "36", ",", "3", "]", "\n", "return", "ResNetV1", "(", "BottleneckV1b", ",", "num_block", ",", "norm_layer", "=", "norm_layer", ",", "deep_stem", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.eespnet.DownSampler.__init__": [[15, 26], ["torch.Module.__init__", "modules.EESP", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "modules._ConvBNPReLU", "modules._ConvBN"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "k", "=", "4", ",", "r_lim", "=", "9", ",", "reinf", "=", "True", ",", "inp_reinf", "=", "3", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "DownSampler", ",", "self", ")", ".", "__init__", "(", ")", "\n", "channels_diff", "=", "out_channels", "-", "in_channels", "\n", "self", ".", "eesp", "=", "EESP", "(", "in_channels", ",", "channels_diff", ",", "stride", "=", "2", ",", "k", "=", "k", ",", "\n", "r_lim", "=", "r_lim", ",", "down_method", "=", "'avg'", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "avg", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "2", ")", "\n", "if", "reinf", ":", "\n", "            ", "self", ".", "inp_reinf", "=", "nn", ".", "Sequential", "(", "\n", "_ConvBNPReLU", "(", "inp_reinf", ",", "inp_reinf", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "_ConvBN", "(", "inp_reinf", ",", "out_channels", ",", "1", ",", "1", ")", ")", "\n", "", "self", ".", "act", "=", "nn", ".", "PReLU", "(", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.eespnet.DownSampler.forward": [[27, 41], ["eespnet.DownSampler.avg", "eespnet.DownSampler.eesp", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "eespnet.DownSampler.act", "eespnet.DownSampler.size", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d.size", "eespnet.DownSampler.inp_reinf"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "x2", "=", "None", ")", ":", "\n", "        ", "avg_out", "=", "self", ".", "avg", "(", "x", ")", "\n", "eesp_out", "=", "self", ".", "eesp", "(", "x", ")", "\n", "output", "=", "torch", ".", "cat", "(", "[", "avg_out", ",", "eesp_out", "]", ",", "1", ")", "\n", "if", "x2", "is", "not", "None", ":", "\n", "            ", "w1", "=", "avg_out", ".", "size", "(", "2", ")", "\n", "while", "True", ":", "\n", "                ", "x2", "=", "F", ".", "avg_pool2d", "(", "x2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "2", ")", "\n", "w2", "=", "x2", ".", "size", "(", "2", ")", "\n", "if", "w2", "==", "w1", ":", "\n", "                    ", "break", "\n", "", "", "output", "=", "output", "+", "self", ".", "inp_reinf", "(", "x2", ")", "\n", "\n", "", "return", "self", ".", "act", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.eespnet.EESPNet.__init__": [[44, 113], ["torch.Module.__init__", "range", "modules._ConvBNPReLU", "eespnet.DownSampler", "eespnet.DownSampler", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "eespnet.DownSampler", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "eespnet.DownSampler", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "eespnet.EESPNet.level5.append", "eespnet.EESPNet.level5.append", "torch.Linear", "torch.Linear", "torch.Linear", "eespnet.EESPNet.modules", "len", "out_channels.append", "eespnet.EESPNet.level3.append", "eespnet.EESPNet.level4.append", "eespnet.EESPNet.level5.append", "modules._ConvBNPReLU", "modules._ConvBNPReLU", "isinstance", "int", "out_channels.append", "ValueError", "modules.EESP", "modules.EESP", "modules.EESP", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "math.ceil", "pow", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "1000", ",", "scale", "=", "1", ",", "reinf", "=", "True", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "EESPNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "inp_reinf", "=", "3", "if", "reinf", "else", "None", "\n", "reps", "=", "[", "0", ",", "3", ",", "7", ",", "3", "]", "\n", "r_lim", "=", "[", "13", ",", "11", ",", "9", ",", "7", ",", "5", "]", "\n", "K", "=", "[", "4", "]", "*", "len", "(", "r_lim", ")", "\n", "\n", "# set out_channels", "\n", "base", ",", "levels", ",", "base_s", "=", "32", ",", "5", ",", "0", "\n", "out_channels", "=", "[", "base", "]", "*", "levels", "\n", "for", "i", "in", "range", "(", "levels", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "base_s", "=", "int", "(", "base", "*", "scale", ")", "\n", "base_s", "=", "math", ".", "ceil", "(", "base_s", "/", "K", "[", "0", "]", ")", "*", "K", "[", "0", "]", "\n", "out_channels", "[", "i", "]", "=", "base", "if", "base_s", ">", "base", "else", "base_s", "\n", "", "else", ":", "\n", "                ", "out_channels", "[", "i", "]", "=", "base_s", "*", "pow", "(", "2", ",", "i", ")", "\n", "", "", "if", "scale", "<=", "1.5", ":", "\n", "            ", "out_channels", ".", "append", "(", "1024", ")", "\n", "", "elif", "scale", "in", "[", "1.5", ",", "2", "]", ":", "\n", "            ", "out_channels", ".", "append", "(", "1280", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown scale value.\"", ")", "\n", "\n", "", "self", ".", "level1", "=", "_ConvBNPReLU", "(", "3", ",", "out_channels", "[", "0", "]", ",", "3", ",", "2", ",", "1", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n", "self", ".", "level2_0", "=", "DownSampler", "(", "out_channels", "[", "0", "]", ",", "out_channels", "[", "1", "]", ",", "k", "=", "K", "[", "0", "]", ",", "r_lim", "=", "r_lim", "[", "0", "]", ",", "\n", "reinf", "=", "reinf", ",", "inp_reinf", "=", "inp_reinf", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n", "self", ".", "level3_0", "=", "DownSampler", "(", "out_channels", "[", "1", "]", ",", "out_channels", "[", "2", "]", ",", "k", "=", "K", "[", "1", "]", ",", "r_lim", "=", "r_lim", "[", "1", "]", ",", "\n", "reinf", "=", "reinf", ",", "inp_reinf", "=", "inp_reinf", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "level3", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "reps", "[", "1", "]", ")", ":", "\n", "            ", "self", ".", "level3", ".", "append", "(", "EESP", "(", "out_channels", "[", "2", "]", ",", "out_channels", "[", "2", "]", ",", "k", "=", "K", "[", "2", "]", ",", "r_lim", "=", "r_lim", "[", "2", "]", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "self", ".", "level4_0", "=", "DownSampler", "(", "out_channels", "[", "2", "]", ",", "out_channels", "[", "3", "]", ",", "k", "=", "K", "[", "2", "]", ",", "r_lim", "=", "r_lim", "[", "2", "]", ",", "\n", "reinf", "=", "reinf", ",", "inp_reinf", "=", "inp_reinf", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "level4", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "reps", "[", "2", "]", ")", ":", "\n", "            ", "self", ".", "level4", ".", "append", "(", "EESP", "(", "out_channels", "[", "3", "]", ",", "out_channels", "[", "3", "]", ",", "k", "=", "K", "[", "3", "]", ",", "r_lim", "=", "r_lim", "[", "3", "]", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "self", ".", "level5_0", "=", "DownSampler", "(", "out_channels", "[", "3", "]", ",", "out_channels", "[", "4", "]", ",", "k", "=", "K", "[", "3", "]", ",", "r_lim", "=", "r_lim", "[", "3", "]", ",", "\n", "reinf", "=", "reinf", ",", "inp_reinf", "=", "inp_reinf", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "level5", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "reps", "[", "2", "]", ")", ":", "\n", "            ", "self", ".", "level5", ".", "append", "(", "EESP", "(", "out_channels", "[", "4", "]", ",", "out_channels", "[", "4", "]", ",", "k", "=", "K", "[", "4", "]", ",", "r_lim", "=", "r_lim", "[", "4", "]", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "self", ".", "level5", ".", "append", "(", "_ConvBNPReLU", "(", "out_channels", "[", "4", "]", ",", "out_channels", "[", "4", "]", ",", "3", ",", "1", ",", "1", ",", "\n", "groups", "=", "out_channels", "[", "4", "]", ",", "norm_layer", "=", "norm_layer", ")", ")", "\n", "self", ".", "level5", ".", "append", "(", "_ConvBNPReLU", "(", "out_channels", "[", "4", "]", ",", "out_channels", "[", "5", "]", ",", "1", ",", "1", ",", "0", ",", "\n", "groups", "=", "K", "[", "4", "]", ",", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "out_channels", "[", "5", "]", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.eespnet.EESPNet.forward": [[114, 147], ["eespnet.EESPNet.level1", "eespnet.EESPNet.level2_0", "eespnet.EESPNet.level3_0", "enumerate", "eespnet.EESPNet.level4_0", "enumerate", "eespnet.EESPNet.level5_0", "enumerate", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout.view", "eespnet.EESPNet.fc", "layer", "layer", "layer", "layer", "torch.dropout.size", "layer", "layer"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ",", "seg", "=", "True", ")", ":", "\n", "        ", "out_l1", "=", "self", ".", "level1", "(", "x", ")", "\n", "\n", "out_l2", "=", "self", ".", "level2_0", "(", "out_l1", ",", "x", ")", "\n", "\n", "out_l3_0", "=", "self", ".", "level3_0", "(", "out_l2", ",", "x", ")", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "level3", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "out_l3", "=", "layer", "(", "out_l3_0", ")", "\n", "", "else", ":", "\n", "                ", "out_l3", "=", "layer", "(", "out_l3", ")", "\n", "\n", "", "", "out_l4_0", "=", "self", ".", "level4_0", "(", "out_l3", ",", "x", ")", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "level4", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "out_l4", "=", "layer", "(", "out_l4_0", ")", "\n", "", "else", ":", "\n", "                ", "out_l4", "=", "layer", "(", "out_l4", ")", "\n", "\n", "", "", "if", "not", "seg", ":", "\n", "            ", "out_l5_0", "=", "self", ".", "level5_0", "(", "out_l4", ")", "# down-sampled", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "level5", ")", ":", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "out_l5", "=", "layer", "(", "out_l5_0", ")", "\n", "", "else", ":", "\n", "                    ", "out_l5", "=", "layer", "(", "out_l5", ")", "\n", "\n", "", "", "output_g", "=", "F", ".", "adaptive_avg_pool2d", "(", "out_l5", ",", "output_size", "=", "1", ")", "\n", "output_g", "=", "F", ".", "dropout", "(", "output_g", ",", "p", "=", "0.2", ",", "training", "=", "self", ".", "training", ")", "\n", "output_1x1", "=", "output_g", ".", "view", "(", "output_g", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "return", "self", ".", "fc", "(", "output_1x1", ")", "\n", "", "return", "out_l1", ",", "out_l2", ",", "out_l3", ",", "out_l4", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.eespnet.eespnet": [[149, 152], ["build.BACKBONE_REGISTRY.register", "eespnet.EESPNet"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.utils.registry.Registry.register"], ["", "", "@", "BACKBONE_REGISTRY", ".", "register", "(", ")", "\n", "def", "eespnet", "(", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "    ", "return", "EESPNet", "(", "norm_layer", "=", "norm_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.adaptive_avgmax_pool.AdaptiveAvgMaxPool2d.__init__": [[53, 56], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_size", "=", "1", ")", ":", "\n", "        ", "super", "(", "AdaptiveAvgMaxPool2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_size", "=", "output_size", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.adaptive_avgmax_pool.AdaptiveAvgMaxPool2d.forward": [[57, 59], ["adaptive_avgmax_pool.adaptive_avgmax_pool2d"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.adaptive_avgmax_pool.adaptive_avgmax_pool2d"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "adaptive_avgmax_pool2d", "(", "x", ",", "self", ".", "output_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.adaptive_avgmax_pool.AdaptiveCatAvgMaxPool2d.__init__": [[62, 65], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_size", "=", "1", ")", ":", "\n", "        ", "super", "(", "AdaptiveCatAvgMaxPool2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_size", "=", "output_size", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.adaptive_avgmax_pool.AdaptiveCatAvgMaxPool2d.forward": [[66, 68], ["adaptive_avgmax_pool.adaptive_catavgmax_pool2d"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.adaptive_avgmax_pool.adaptive_catavgmax_pool2d"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "adaptive_catavgmax_pool2d", "(", "x", ",", "self", ".", "output_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.adaptive_avgmax_pool.SelectAdaptivePool2d.__init__": [[73, 87], ["torch.Module.__init__", "adaptive_avgmax_pool.AdaptiveAvgMaxPool2d", "adaptive_avgmax_pool.AdaptiveCatAvgMaxPool2d", "torch.AdaptiveMaxPool2d", "torch.AdaptiveMaxPool2d", "torch.AdaptiveMaxPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["def", "__init__", "(", "self", ",", "output_size", "=", "1", ",", "pool_type", "=", "'avg'", ")", ":", "\n", "        ", "super", "(", "SelectAdaptivePool2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_size", "=", "output_size", "\n", "self", ".", "pool_type", "=", "pool_type", "\n", "if", "pool_type", "==", "'avgmax'", ":", "\n", "            ", "self", ".", "pool", "=", "AdaptiveAvgMaxPool2d", "(", "output_size", ")", "\n", "", "elif", "pool_type", "==", "'catavgmax'", ":", "\n", "            ", "self", ".", "pool", "=", "AdaptiveCatAvgMaxPool2d", "(", "output_size", ")", "\n", "", "elif", "pool_type", "==", "'max'", ":", "\n", "            ", "self", ".", "pool", "=", "nn", ".", "AdaptiveMaxPool2d", "(", "output_size", ")", "\n", "", "else", ":", "\n", "            ", "if", "pool_type", "!=", "'avg'", ":", "\n", "                ", "assert", "False", ",", "'Invalid pool type: %s'", "%", "pool_type", "\n", "", "self", ".", "pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "output_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.adaptive_avgmax_pool.SelectAdaptivePool2d.forward": [[88, 90], ["adaptive_avgmax_pool.SelectAdaptivePool2d.pool"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "pool", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.adaptive_avgmax_pool.SelectAdaptivePool2d.feat_mult": [[91, 93], ["adaptive_avgmax_pool.adaptive_pool_feat_mult"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.adaptive_avgmax_pool.adaptive_pool_feat_mult"], ["", "def", "feat_mult", "(", "self", ")", ":", "\n", "        ", "return", "adaptive_pool_feat_mult", "(", "self", ".", "pool_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.adaptive_avgmax_pool.SelectAdaptivePool2d.__repr__": [[94, 98], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "' ('", "+", "'output_size='", "+", "str", "(", "self", ".", "output_size", ")", "+", "', pool_type='", "+", "self", ".", "pool_type", "+", "')'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.adaptive_avgmax_pool.adaptive_pool_feat_mult": [[17, 22], ["None"], "function", ["None"], ["def", "adaptive_pool_feat_mult", "(", "pool_type", "=", "'avg'", ")", ":", "\n", "    ", "if", "pool_type", "==", "'catavgmax'", ":", "\n", "        ", "return", "2", "\n", "", "else", ":", "\n", "        ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.adaptive_avgmax_pool.adaptive_avgmax_pool2d": [[24, 28], ["torch.adaptive_avg_pool2d", "torch.adaptive_max_pool2d"], "function", ["None"], ["", "", "def", "adaptive_avgmax_pool2d", "(", "x", ",", "output_size", "=", "1", ")", ":", "\n", "    ", "x_avg", "=", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "output_size", ")", "\n", "x_max", "=", "F", ".", "adaptive_max_pool2d", "(", "x", ",", "output_size", ")", "\n", "return", "0.5", "*", "(", "x_avg", "+", "x_max", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.adaptive_avgmax_pool.adaptive_catavgmax_pool2d": [[30, 34], ["torch.adaptive_avg_pool2d", "torch.adaptive_max_pool2d", "torch.cat", "torch.cat", "torch.cat"], "function", ["None"], ["", "def", "adaptive_catavgmax_pool2d", "(", "x", ",", "output_size", "=", "1", ")", ":", "\n", "    ", "x_avg", "=", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "output_size", ")", "\n", "x_max", "=", "F", ".", "adaptive_max_pool2d", "(", "x", ",", "output_size", ")", "\n", "return", "torch", ".", "cat", "(", "(", "x_avg", ",", "x_max", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.adaptive_avgmax_pool.select_adaptive_pool2d": [[36, 50], ["torch.adaptive_avg_pool2d", "adaptive_avgmax_pool.adaptive_avgmax_pool2d", "adaptive_avgmax_pool.adaptive_catavgmax_pool2d", "torch.adaptive_max_pool2d"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.adaptive_avgmax_pool.adaptive_avgmax_pool2d", "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.adaptive_avgmax_pool.adaptive_catavgmax_pool2d"], ["", "def", "select_adaptive_pool2d", "(", "x", ",", "pool_type", "=", "'avg'", ",", "output_size", "=", "1", ")", ":", "\n", "    ", "\"\"\"Selectable global pooling function with dynamic input kernel size\n    \"\"\"", "\n", "if", "pool_type", "==", "'avg'", ":", "\n", "        ", "x", "=", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "output_size", ")", "\n", "", "elif", "pool_type", "==", "'avgmax'", ":", "\n", "        ", "x", "=", "adaptive_avgmax_pool2d", "(", "x", ",", "output_size", ")", "\n", "", "elif", "pool_type", "==", "'catavgmax'", ":", "\n", "        ", "x", "=", "adaptive_catavgmax_pool2d", "(", "x", ",", "output_size", ")", "\n", "", "elif", "pool_type", "==", "'max'", ":", "\n", "        ", "x", "=", "F", ".", "adaptive_max_pool2d", "(", "x", ",", "output_size", ")", "\n", "", "else", ":", "\n", "        ", "assert", "False", ",", "'Invalid pool type: %s'", "%", "pool_type", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.helpers.load_checkpoint": [[8, 29], ["os.path.isfile", "torch.load", "torch.load", "isinstance", "logging.info", "logging.error", "FileNotFoundError", "collections.OrderedDict", "checkpoint[].items", "model.load_state_dict", "model.load_state_dict", "k.startswith"], "function", ["None"], ["def", "load_checkpoint", "(", "model", ",", "checkpoint_path", ",", "use_ema", "=", "False", ")", ":", "\n", "    ", "if", "checkpoint_path", "and", "os", ".", "path", ".", "isfile", "(", "checkpoint_path", ")", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "checkpoint_path", ")", "\n", "state_dict_key", "=", "''", "\n", "if", "isinstance", "(", "checkpoint", ",", "dict", ")", ":", "\n", "            ", "state_dict_key", "=", "'state_dict'", "\n", "if", "use_ema", "and", "'state_dict_ema'", "in", "checkpoint", ":", "\n", "                ", "state_dict_key", "=", "'state_dict_ema'", "\n", "", "", "if", "state_dict_key", "and", "state_dict_key", "in", "checkpoint", ":", "\n", "            ", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "checkpoint", "[", "state_dict_key", "]", ".", "items", "(", ")", ":", "\n", "# strip `module.` prefix", "\n", "                ", "name", "=", "k", "[", "7", ":", "]", "if", "k", ".", "startswith", "(", "'module'", ")", "else", "k", "\n", "new_state_dict", "[", "name", "]", "=", "v", "\n", "", "model", ".", "load_state_dict", "(", "new_state_dict", ")", "\n", "", "else", ":", "\n", "            ", "model", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "", "logging", ".", "info", "(", "\"Loaded {} from checkpoint '{}'\"", ".", "format", "(", "state_dict_key", "or", "'weights'", ",", "checkpoint_path", ")", ")", "\n", "", "else", ":", "\n", "        ", "logging", ".", "error", "(", "\"No checkpoint found at '{}'\"", ".", "format", "(", "checkpoint_path", ")", ")", "\n", "raise", "FileNotFoundError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.helpers.resume_checkpoint": [[31, 53], ["os.path.isfile", "torch.load", "torch.load", "logging.error", "FileNotFoundError", "isinstance", "collections.OrderedDict", "checkpoint[].items", "model.load_state_dict", "logging.info", "model.load_state_dict", "logging.info", "k.startswith"], "function", ["None"], ["", "", "def", "resume_checkpoint", "(", "model", ",", "checkpoint_path", ",", "start_epoch", "=", "None", ")", ":", "\n", "    ", "optimizer_state", "=", "None", "\n", "if", "os", ".", "path", ".", "isfile", "(", "checkpoint_path", ")", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "checkpoint_path", ")", "\n", "if", "isinstance", "(", "checkpoint", ",", "dict", ")", "and", "'state_dict'", "in", "checkpoint", ":", "\n", "            ", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "checkpoint", "[", "'state_dict'", "]", ".", "items", "(", ")", ":", "\n", "                ", "name", "=", "k", "[", "7", ":", "]", "if", "k", ".", "startswith", "(", "'module'", ")", "else", "k", "\n", "new_state_dict", "[", "name", "]", "=", "v", "\n", "", "model", ".", "load_state_dict", "(", "new_state_dict", ")", "\n", "if", "'optimizer'", "in", "checkpoint", ":", "\n", "                ", "optimizer_state", "=", "checkpoint", "[", "'optimizer'", "]", "\n", "", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "if", "start_epoch", "is", "None", "else", "start_epoch", "\n", "logging", ".", "info", "(", "\"Loaded checkpoint '{}' (epoch {})\"", ".", "format", "(", "checkpoint_path", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "model", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "start_epoch", "=", "0", "if", "start_epoch", "is", "None", "else", "start_epoch", "\n", "logging", ".", "info", "(", "\"Loaded checkpoint '{}'\"", ".", "format", "(", "checkpoint_path", ")", ")", "\n", "", "return", "optimizer_state", ",", "start_epoch", "\n", "", "else", ":", "\n", "        ", "logging", ".", "error", "(", "\"No checkpoint found at '{}'\"", ".", "format", "(", "checkpoint_path", ")", ")", "\n", "raise", "FileNotFoundError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.helpers.load_pretrained": [[55, 88], ["torch.load_url", "model.load_state_dict", "logging.warning", "logging.info", "conv1_weight.sum", "filter_fn"], "function", ["None"], ["", "", "def", "load_pretrained", "(", "model", ",", "default_cfg", ",", "num_classes", "=", "1000", ",", "in_chans", "=", "3", ",", "filter_fn", "=", "None", ")", ":", "\n", "    ", "if", "'url'", "not", "in", "default_cfg", "or", "not", "default_cfg", "[", "'url'", "]", ":", "\n", "        ", "logging", ".", "warning", "(", "\"Pretrained model URL is invalid, using random initialization.\"", ")", "\n", "return", "\n", "\n", "", "state_dict", "=", "model_zoo", ".", "load_url", "(", "default_cfg", "[", "'url'", "]", ")", "\n", "\n", "if", "in_chans", "==", "1", ":", "\n", "        ", "conv1_name", "=", "default_cfg", "[", "'first_conv'", "]", "\n", "logging", ".", "info", "(", "'Converting first conv (%s) from 3 to 1 channel'", "%", "conv1_name", ")", "\n", "conv1_weight", "=", "state_dict", "[", "conv1_name", "+", "'.weight'", "]", "\n", "state_dict", "[", "conv1_name", "+", "'.weight'", "]", "=", "conv1_weight", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "", "elif", "in_chans", "!=", "3", ":", "\n", "        ", "assert", "False", ",", "\"Invalid in_chans for pretrained weights\"", "\n", "\n", "", "strict", "=", "True", "\n", "classifier_name", "=", "default_cfg", "[", "'classifier'", "]", "\n", "if", "num_classes", "==", "1000", "and", "default_cfg", "[", "'num_classes'", "]", "==", "1001", ":", "\n", "# special case for imagenet trained models with extra background class in pretrained weights", "\n", "        ", "classifier_weight", "=", "state_dict", "[", "classifier_name", "+", "'.weight'", "]", "\n", "state_dict", "[", "classifier_name", "+", "'.weight'", "]", "=", "classifier_weight", "[", "1", ":", "]", "\n", "classifier_bias", "=", "state_dict", "[", "classifier_name", "+", "'.bias'", "]", "\n", "state_dict", "[", "classifier_name", "+", "'.bias'", "]", "=", "classifier_bias", "[", "1", ":", "]", "\n", "", "elif", "num_classes", "!=", "default_cfg", "[", "'num_classes'", "]", ":", "\n", "# completely discard fully connected for all other differences between pretrained and created model", "\n", "        ", "del", "state_dict", "[", "classifier_name", "+", "'.weight'", "]", "\n", "del", "state_dict", "[", "classifier_name", "+", "'.bias'", "]", "\n", "strict", "=", "False", "\n", "\n", "", "if", "filter_fn", "is", "not", "None", ":", "\n", "        ", "state_dict", "=", "filter_fn", "(", "state_dict", ")", "\n", "\n", "", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "strict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet.SEModule.__init__": [[72, 81], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", ",", "reduction_channels", ")", ":", "\n", "        ", "super", "(", "SEModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#self.avg_pool = nn.AdaptiveAvgPool2d(1)", "\n", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "\n", "channels", ",", "reduction_channels", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "\n", "reduction_channels", ",", "channels", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet.SEModule.forward": [[82, 91], ["gluon_resnet.SEModule.view().mean().view", "gluon_resnet.SEModule.fc1", "gluon_resnet.SEModule.relu", "gluon_resnet.SEModule.fc2", "gluon_resnet.SEModule.sigmoid", "gluon_resnet.SEModule.size", "gluon_resnet.SEModule.size", "gluon_resnet.SEModule.view().mean", "gluon_resnet.SEModule.view", "gluon_resnet.SEModule.size", "gluon_resnet.SEModule.size"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "module_input", "=", "x", "\n", "#x = self.avg_pool(x)", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ",", "-", "1", ")", ".", "mean", "(", "-", "1", ")", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ",", "1", ",", "1", ")", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "sigmoid", "(", "x", ")", "\n", "return", "module_input", "*", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet.BasicBlockGl.__init__": [[96, 119], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "gluon_resnet.SEModule"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "\n", "cardinality", "=", "1", ",", "base_width", "=", "64", ",", "use_se", "=", "False", ",", "\n", "reduce_first", "=", "1", ",", "dilation", "=", "1", ",", "previous_dilation", "=", "1", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "BasicBlockGl", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "cardinality", "==", "1", ",", "'BasicBlock only supports cardinality of 1'", "\n", "assert", "base_width", "==", "64", ",", "'BasicBlock doest not support changing base width'", "\n", "first_planes", "=", "planes", "//", "reduce_first", "\n", "outplanes", "=", "planes", "*", "self", ".", "expansion", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "inplanes", ",", "first_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "dilation", ",", "\n", "dilation", "=", "dilation", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "first_planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "first_planes", ",", "outplanes", ",", "kernel_size", "=", "3", ",", "padding", "=", "previous_dilation", ",", "\n", "dilation", "=", "previous_dilation", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "outplanes", ")", "\n", "self", ".", "se", "=", "SEModule", "(", "outplanes", ",", "planes", "//", "4", ")", "if", "use_se", "else", "None", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "dilation", "=", "dilation", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet.BasicBlockGl.forward": [[120, 139], ["gluon_resnet.BasicBlockGl.conv1", "gluon_resnet.BasicBlockGl.bn1", "gluon_resnet.BasicBlockGl.relu", "gluon_resnet.BasicBlockGl.conv2", "gluon_resnet.BasicBlockGl.bn2", "gluon_resnet.BasicBlockGl.relu", "gluon_resnet.BasicBlockGl.se", "gluon_resnet.BasicBlockGl.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "se", "is", "not", "None", ":", "\n", "            ", "out", "=", "self", ".", "se", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet.BottleneckGl.__init__": [[144, 166], ["torch.Module.__init__", "int", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "gluon_resnet.SEModule", "math.floor"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "\n", "cardinality", "=", "1", ",", "base_width", "=", "64", ",", "use_se", "=", "False", ",", "\n", "reduce_first", "=", "1", ",", "dilation", "=", "1", ",", "previous_dilation", "=", "1", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "BottleneckGl", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "width", "=", "int", "(", "math", ".", "floor", "(", "planes", "*", "(", "base_width", "/", "64", ")", ")", "*", "cardinality", ")", "\n", "first_planes", "=", "width", "//", "reduce_first", "\n", "outplanes", "=", "planes", "*", "self", ".", "expansion", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "first_planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "first_planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "first_planes", ",", "width", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "groups", "=", "cardinality", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "width", ",", "outplanes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "outplanes", ")", "\n", "self", ".", "se", "=", "SEModule", "(", "outplanes", ",", "planes", "//", "4", ")", "if", "use_se", "else", "None", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "dilation", "=", "dilation", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet.BottleneckGl.forward": [[167, 191], ["gluon_resnet.BottleneckGl.conv1", "gluon_resnet.BottleneckGl.bn1", "gluon_resnet.BottleneckGl.relu", "gluon_resnet.BottleneckGl.conv2", "gluon_resnet.BottleneckGl.bn2", "gluon_resnet.BottleneckGl.relu", "gluon_resnet.BottleneckGl.conv3", "gluon_resnet.BottleneckGl.bn3", "gluon_resnet.BottleneckGl.relu", "gluon_resnet.BottleneckGl.se", "gluon_resnet.BottleneckGl.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "se", "is", "not", "None", ":", "\n", "            ", "out", "=", "self", ".", "se", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet.GluonResNet.__init__": [[239, 293], ["torch.Module.__init__", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "gluon_resnet.GluonResNet._make_layer", "gluon_resnet.GluonResNet._make_layer", "gluon_resnet.GluonResNet._make_layer", "gluon_resnet.GluonResNet._make_layer", "adaptive_avgmax_pool.SelectAdaptivePool2d", "torch.Linear", "torch.Linear", "gluon_resnet.GluonResNet.modules", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "isinstance", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "gluon_resnet.GluonResNet.global_pool.feat_mult", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__", "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet.GluonResNet._make_layer", "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet.GluonResNet._make_layer", "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet.GluonResNet._make_layer", "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet.GluonResNet._make_layer", "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.adaptive_avgmax_pool.SelectAdaptivePool2d.feat_mult"], ["def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "in_chans", "=", "3", ",", "use_se", "=", "False", ",", "\n", "cardinality", "=", "1", ",", "base_width", "=", "64", ",", "stem_width", "=", "64", ",", "deep_stem", "=", "False", ",", "\n", "block_reduce_first", "=", "1", ",", "down_kernel_size", "=", "1", ",", "avg_down", "=", "False", ",", "dilated", "=", "False", ",", "\n", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "drop_rate", "=", "0.0", ",", "global_pool", "=", "'avg'", ")", ":", "\n", "        ", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "inplanes", "=", "stem_width", "*", "2", "if", "deep_stem", "else", "64", "\n", "self", ".", "cardinality", "=", "cardinality", "\n", "self", ".", "base_width", "=", "base_width", "\n", "self", ".", "drop_rate", "=", "drop_rate", "\n", "self", ".", "expansion", "=", "block", ".", "expansion", "\n", "self", ".", "dilated", "=", "dilated", "\n", "super", "(", "GluonResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "not", "deep_stem", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_chans", ",", "stem_width", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "conv1_modules", "=", "[", "\n", "nn", ".", "Conv2d", "(", "in_chans", ",", "stem_width", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "stem_width", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "stem_width", ",", "stem_width", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "stem_width", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "stem_width", ",", "self", ".", "inplanes", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "]", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "*", "conv1_modules", ")", "\n", "", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "stride_3_4", "=", "1", "if", "self", ".", "dilated", "else", "2", "\n", "dilation_3", "=", "2", "if", "self", ".", "dilated", "else", "1", "\n", "dilation_4", "=", "4", "if", "self", ".", "dilated", "else", "1", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "stride", "=", "1", ",", "reduce_first", "=", "block_reduce_first", ",", "\n", "use_se", "=", "use_se", ",", "avg_down", "=", "avg_down", ",", "down_kernel_size", "=", "1", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "reduce_first", "=", "block_reduce_first", ",", "\n", "use_se", "=", "use_se", ",", "avg_down", "=", "avg_down", ",", "down_kernel_size", "=", "down_kernel_size", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "stride_3_4", ",", "dilation", "=", "dilation_3", ",", "reduce_first", "=", "block_reduce_first", ",", "\n", "use_se", "=", "use_se", ",", "avg_down", "=", "avg_down", ",", "down_kernel_size", "=", "down_kernel_size", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "stride_3_4", ",", "dilation", "=", "dilation_4", ",", "reduce_first", "=", "block_reduce_first", ",", "\n", "use_se", "=", "use_se", ",", "avg_down", "=", "avg_down", ",", "down_kernel_size", "=", "down_kernel_size", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "global_pool", "=", "SelectAdaptivePool2d", "(", "pool_type", "=", "global_pool", ")", "\n", "self", ".", "num_features", "=", "512", "*", "block", ".", "expansion", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "self", ".", "num_features", "*", "self", ".", "global_pool", ".", "feat_mult", "(", ")", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet.GluonResNet._make_layer": [[294, 328], ["range", "torch.Sequential", "torch.Sequential", "gluon_resnet._get_padding", "torch.Sequential", "torch.Sequential", "block", "layers.append", "block", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Conv2d", "torch.Conv2d", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet._get_padding"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "reduce_first", "=", "1", ",", "\n", "use_se", "=", "False", ",", "avg_down", "=", "False", ",", "down_kernel_size", "=", "1", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample_padding", "=", "_get_padding", "(", "down_kernel_size", ",", "stride", ")", "\n", "if", "avg_down", ":", "\n", "                ", "avg_stride", "=", "stride", "if", "dilation", "==", "1", "else", "1", "\n", "downsample_layers", "=", "[", "\n", "nn", ".", "AvgPool2d", "(", "avg_stride", ",", "avg_stride", ",", "ceil_mode", "=", "True", ",", "count_include_pad", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "down_kernel_size", ",", "\n", "stride", "=", "1", ",", "padding", "=", "downsample_padding", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", "]", "\n", "", "else", ":", "\n", "                ", "downsample_layers", "=", "[", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "down_kernel_size", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "downsample_padding", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", "]", "\n", "", "downsample", "=", "nn", ".", "Sequential", "(", "*", "downsample_layers", ")", "\n", "\n", "", "first_dilation", "=", "1", "if", "dilation", "in", "(", "1", ",", "2", ")", "else", "2", "\n", "layers", "=", "[", "block", "(", "\n", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "\n", "cardinality", "=", "self", ".", "cardinality", ",", "base_width", "=", "self", ".", "base_width", ",", "reduce_first", "=", "reduce_first", ",", "\n", "use_se", "=", "use_se", ",", "dilation", "=", "first_dilation", ",", "previous_dilation", "=", "dilation", ",", "norm_layer", "=", "norm_layer", ")", "]", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "\n", "self", ".", "inplanes", ",", "planes", ",", "\n", "cardinality", "=", "self", ".", "cardinality", ",", "base_width", "=", "self", ".", "base_width", ",", "reduce_first", "=", "reduce_first", ",", "\n", "use_se", "=", "use_se", ",", "dilation", "=", "dilation", ",", "previous_dilation", "=", "dilation", ",", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet.GluonResNet.get_classifier": [[329, 331], ["None"], "methods", ["None"], ["", "def", "get_classifier", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fc", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet.GluonResNet.reset_classifier": [[332, 340], ["adaptive_avgmax_pool.SelectAdaptivePool2d", "torch.Linear", "torch.Linear", "gluon_resnet.GluonResNet.global_pool.feat_mult"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.adaptive_avgmax_pool.SelectAdaptivePool2d.feat_mult"], ["", "def", "reset_classifier", "(", "self", ",", "num_classes", ",", "global_pool", "=", "'avg'", ")", ":", "\n", "        ", "self", ".", "global_pool", "=", "SelectAdaptivePool2d", "(", "pool_type", "=", "global_pool", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "del", "self", ".", "fc", "\n", "if", "num_classes", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "self", ".", "num_features", "*", "self", ".", "global_pool", ".", "feat_mult", "(", ")", ",", "num_classes", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet.GluonResNet.forward": [[342, 357], ["gluon_resnet.GluonResNet.conv1", "gluon_resnet.GluonResNet.bn1", "gluon_resnet.GluonResNet.relu", "gluon_resnet.GluonResNet.maxpool", "gluon_resnet.GluonResNet.layer1", "gluon_resnet.GluonResNet.layer2", "gluon_resnet.GluonResNet.layer3", "gluon_resnet.GluonResNet.layer4"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x1", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x2", "=", "self", ".", "layer2", "(", "x1", ")", "\n", "x3", "=", "self", ".", "layer3", "(", "x2", ")", "\n", "x4", "=", "self", ".", "layer4", "(", "x3", ")", "\n", "\n", "#if pool:", "\n", "#    x = self.global_pool(x)", "\n", "#    x = x.view(x.size(0), -1)", "\n", "return", "[", "x1", ",", "x2", ",", "x3", ",", "x4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet._cfg": [[24, 32], ["None"], "function", ["None"], ["def", "_cfg", "(", "url", "=", "''", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "{", "\n", "'url'", ":", "url", ",", "\n", "'num_classes'", ":", "1000", ",", "'input_size'", ":", "(", "3", ",", "cfg", ".", "TRAIN", ".", "BASE_SIZE", ",", "cfg", ".", "TRAIN", ".", "BASE_SIZE", ")", ",", "'pool_size'", ":", "(", "7", ",", "7", ")", ",", "\n", "'crop_pct'", ":", "0.875", ",", "'interpolation'", ":", "'bicubic'", ",", "\n", "'mean'", ":", "cfg", ".", "DATASET", ".", "MEAN", ",", "'std'", ":", "cfg", ".", "DATASET", ".", "STD", ",", "\n", "'first_conv'", ":", "'conv1'", ",", "'classifier'", ":", "'fc'", ",", "\n", "**", "kwargs", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet._get_padding": [[65, 68], ["None"], "function", ["None"], ["def", "_get_padding", "(", "kernel_size", ",", "stride", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "padding", "=", "(", "(", "stride", "-", "1", ")", "+", "dilation", "*", "(", "kernel_size", "-", "1", ")", ")", "//", "2", "\n", "return", "padding", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet.gluon_resnet18_v1b": [[366, 375], ["gluon_resnet.GluonResNet", "helpers.load_pretrained"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.helpers.load_pretrained"], ["", "", "def", "gluon_resnet18_v1b", "(", "pretrained", "=", "False", ",", "num_classes", "=", "1000", ",", "in_chans", "=", "3", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n    \"\"\"", "\n", "default_cfg", "=", "default_cfgs", "[", "'gluon_resnet18_v1b'", "]", "\n", "model", "=", "GluonResNet", "(", "BasicBlockGl", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "num_classes", "=", "num_classes", ",", "in_chans", "=", "in_chans", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "default_cfg", "\n", "if", "pretrained", ":", "\n", "        ", "load_pretrained", "(", "model", ",", "default_cfg", ",", "num_classes", ",", "in_chans", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet.gluon_resnet34_v1b": [[377, 386], ["gluon_resnet.GluonResNet", "helpers.load_pretrained"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.helpers.load_pretrained"], ["", "def", "gluon_resnet34_v1b", "(", "pretrained", "=", "False", ",", "num_classes", "=", "1000", ",", "in_chans", "=", "3", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n    \"\"\"", "\n", "default_cfg", "=", "default_cfgs", "[", "'gluon_resnet34_v1b'", "]", "\n", "model", "=", "GluonResNet", "(", "BasicBlockGl", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "num_classes", ",", "in_chans", "=", "in_chans", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "default_cfg", "\n", "if", "pretrained", ":", "\n", "        ", "load_pretrained", "(", "model", ",", "default_cfg", ",", "num_classes", ",", "in_chans", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet.gluon_resnet50_v1b": [[388, 397], ["gluon_resnet.GluonResNet", "helpers.load_pretrained"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.helpers.load_pretrained"], ["", "def", "gluon_resnet50_v1b", "(", "pretrained", "=", "False", ",", "num_classes", "=", "1000", ",", "in_chans", "=", "3", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    \"\"\"", "\n", "default_cfg", "=", "default_cfgs", "[", "'gluon_resnet50_v1b'", "]", "\n", "model", "=", "GluonResNet", "(", "BottleneckGl", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "num_classes", ",", "in_chans", "=", "in_chans", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "default_cfg", "\n", "if", "pretrained", ":", "\n", "        ", "load_pretrained", "(", "model", ",", "default_cfg", ",", "num_classes", ",", "in_chans", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet.gluon_resnet101_v1b": [[399, 408], ["gluon_resnet.GluonResNet", "helpers.load_pretrained"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.helpers.load_pretrained"], ["", "def", "gluon_resnet101_v1b", "(", "pretrained", "=", "False", ",", "num_classes", "=", "1000", ",", "in_chans", "=", "3", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    \"\"\"", "\n", "default_cfg", "=", "default_cfgs", "[", "'gluon_resnet101_v1b'", "]", "\n", "model", "=", "GluonResNet", "(", "BottleneckGl", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", "=", "num_classes", ",", "in_chans", "=", "in_chans", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "default_cfg", "\n", "if", "pretrained", ":", "\n", "        ", "load_pretrained", "(", "model", ",", "default_cfg", ",", "num_classes", ",", "in_chans", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet.gluon_resnet152_v1b": [[410, 419], ["gluon_resnet.GluonResNet", "helpers.load_pretrained"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.helpers.load_pretrained"], ["", "def", "gluon_resnet152_v1b", "(", "pretrained", "=", "False", ",", "num_classes", "=", "1000", ",", "in_chans", "=", "3", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n    \"\"\"", "\n", "default_cfg", "=", "default_cfgs", "[", "'gluon_resnet152_v1b'", "]", "\n", "model", "=", "GluonResNet", "(", "BottleneckGl", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "num_classes", "=", "num_classes", ",", "in_chans", "=", "in_chans", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "default_cfg", "\n", "if", "pretrained", ":", "\n", "        ", "load_pretrained", "(", "model", ",", "default_cfg", ",", "num_classes", ",", "in_chans", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet.gluon_resnet50_v1c": [[421, 431], ["gluon_resnet.GluonResNet", "helpers.load_pretrained"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.helpers.load_pretrained"], ["", "def", "gluon_resnet50_v1c", "(", "pretrained", "=", "False", ",", "num_classes", "=", "1000", ",", "in_chans", "=", "3", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    \"\"\"", "\n", "default_cfg", "=", "default_cfgs", "[", "'gluon_resnet50_v1c'", "]", "\n", "model", "=", "GluonResNet", "(", "BottleneckGl", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "num_classes", ",", "in_chans", "=", "in_chans", ",", "\n", "stem_width", "=", "32", ",", "deep_stem", "=", "True", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "default_cfg", "\n", "if", "pretrained", ":", "\n", "        ", "load_pretrained", "(", "model", ",", "default_cfg", ",", "num_classes", ",", "in_chans", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet.gluon_resnet101_v1c": [[433, 443], ["gluon_resnet.GluonResNet", "helpers.load_pretrained"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.helpers.load_pretrained"], ["", "def", "gluon_resnet101_v1c", "(", "pretrained", "=", "False", ",", "num_classes", "=", "1000", ",", "in_chans", "=", "3", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    \"\"\"", "\n", "default_cfg", "=", "default_cfgs", "[", "'gluon_resnet101_v1c'", "]", "\n", "model", "=", "GluonResNet", "(", "BottleneckGl", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", "=", "num_classes", ",", "in_chans", "=", "in_chans", ",", "\n", "stem_width", "=", "32", ",", "deep_stem", "=", "True", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "default_cfg", "\n", "if", "pretrained", ":", "\n", "        ", "load_pretrained", "(", "model", ",", "default_cfg", ",", "num_classes", ",", "in_chans", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet.gluon_resnet152_v1c": [[445, 455], ["gluon_resnet.GluonResNet", "helpers.load_pretrained"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.helpers.load_pretrained"], ["", "def", "gluon_resnet152_v1c", "(", "pretrained", "=", "False", ",", "num_classes", "=", "1000", ",", "in_chans", "=", "3", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n    \"\"\"", "\n", "default_cfg", "=", "default_cfgs", "[", "'gluon_resnet152_v1c'", "]", "\n", "model", "=", "GluonResNet", "(", "BottleneckGl", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "num_classes", "=", "num_classes", ",", "in_chans", "=", "in_chans", ",", "\n", "stem_width", "=", "32", ",", "deep_stem", "=", "True", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "default_cfg", "\n", "if", "pretrained", ":", "\n", "        ", "load_pretrained", "(", "model", ",", "default_cfg", ",", "num_classes", ",", "in_chans", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet.gluon_resnet50_v1d": [[457, 467], ["gluon_resnet.GluonResNet", "helpers.load_pretrained"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.helpers.load_pretrained"], ["", "def", "gluon_resnet50_v1d", "(", "pretrained", "=", "False", ",", "num_classes", "=", "1000", ",", "in_chans", "=", "3", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    \"\"\"", "\n", "default_cfg", "=", "default_cfgs", "[", "'gluon_resnet50_v1d'", "]", "\n", "model", "=", "GluonResNet", "(", "BottleneckGl", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "num_classes", ",", "in_chans", "=", "in_chans", ",", "\n", "stem_width", "=", "32", ",", "deep_stem", "=", "True", ",", "avg_down", "=", "True", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "default_cfg", "\n", "if", "pretrained", ":", "\n", "        ", "load_pretrained", "(", "model", ",", "default_cfg", ",", "num_classes", ",", "in_chans", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet.gluon_resnet101_v1d": [[469, 479], ["gluon_resnet.GluonResNet", "helpers.load_pretrained"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.helpers.load_pretrained"], ["", "def", "gluon_resnet101_v1d", "(", "pretrained", "=", "False", ",", "num_classes", "=", "1000", ",", "in_chans", "=", "3", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    \"\"\"", "\n", "default_cfg", "=", "default_cfgs", "[", "'gluon_resnet101_v1d'", "]", "\n", "model", "=", "GluonResNet", "(", "BottleneckGl", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", "=", "num_classes", ",", "in_chans", "=", "in_chans", ",", "\n", "stem_width", "=", "32", ",", "deep_stem", "=", "True", ",", "avg_down", "=", "True", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "default_cfg", "\n", "if", "pretrained", ":", "\n", "        ", "load_pretrained", "(", "model", ",", "default_cfg", ",", "num_classes", ",", "in_chans", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet.gluon_resnet152_v1d": [[481, 491], ["gluon_resnet.GluonResNet", "helpers.load_pretrained"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.helpers.load_pretrained"], ["", "def", "gluon_resnet152_v1d", "(", "pretrained", "=", "False", ",", "num_classes", "=", "1000", ",", "in_chans", "=", "3", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n    \"\"\"", "\n", "default_cfg", "=", "default_cfgs", "[", "'gluon_resnet152_v1d'", "]", "\n", "model", "=", "GluonResNet", "(", "BottleneckGl", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "num_classes", "=", "num_classes", ",", "in_chans", "=", "in_chans", ",", "\n", "stem_width", "=", "32", ",", "deep_stem", "=", "True", ",", "avg_down", "=", "True", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "default_cfg", "\n", "if", "pretrained", ":", "\n", "        ", "load_pretrained", "(", "model", ",", "default_cfg", ",", "num_classes", ",", "in_chans", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet.gluon_resnet50_v1e": [[493, 503], ["gluon_resnet.GluonResNet"], "function", ["None"], ["", "def", "gluon_resnet50_v1e", "(", "pretrained", "=", "False", ",", "num_classes", "=", "1000", ",", "in_chans", "=", "3", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50-V1e model. No pretrained weights for any 'e' variants\n    \"\"\"", "\n", "default_cfg", "=", "default_cfgs", "[", "'gluon_resnet50_v1e'", "]", "\n", "model", "=", "GluonResNet", "(", "BottleneckGl", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "num_classes", ",", "in_chans", "=", "in_chans", ",", "\n", "stem_width", "=", "64", ",", "deep_stem", "=", "True", ",", "avg_down", "=", "True", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "default_cfg", "\n", "#if pretrained:", "\n", "#    load_pretrained(model, default_cfg, num_classes, in_chans)", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet.gluon_resnet101_v1e": [[505, 515], ["gluon_resnet.GluonResNet", "helpers.load_pretrained"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.helpers.load_pretrained"], ["", "def", "gluon_resnet101_v1e", "(", "pretrained", "=", "False", ",", "num_classes", "=", "1000", ",", "in_chans", "=", "3", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    \"\"\"", "\n", "default_cfg", "=", "default_cfgs", "[", "'gluon_resnet101_v1e'", "]", "\n", "model", "=", "GluonResNet", "(", "BottleneckGl", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", "=", "num_classes", ",", "in_chans", "=", "in_chans", ",", "\n", "stem_width", "=", "64", ",", "deep_stem", "=", "True", ",", "avg_down", "=", "True", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "default_cfg", "\n", "if", "pretrained", ":", "\n", "        ", "load_pretrained", "(", "model", ",", "default_cfg", ",", "num_classes", ",", "in_chans", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet.gluon_resnet152_v1e": [[517, 527], ["gluon_resnet.GluonResNet", "helpers.load_pretrained"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.helpers.load_pretrained"], ["", "def", "gluon_resnet152_v1e", "(", "pretrained", "=", "False", ",", "num_classes", "=", "1000", ",", "in_chans", "=", "3", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n    \"\"\"", "\n", "default_cfg", "=", "default_cfgs", "[", "'gluon_resnet152_v1e'", "]", "\n", "model", "=", "GluonResNet", "(", "BottleneckGl", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "num_classes", "=", "num_classes", ",", "in_chans", "=", "in_chans", ",", "\n", "stem_width", "=", "64", ",", "deep_stem", "=", "True", ",", "avg_down", "=", "True", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "default_cfg", "\n", "if", "pretrained", ":", "\n", "        ", "load_pretrained", "(", "model", ",", "default_cfg", ",", "num_classes", ",", "in_chans", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet.gluon_resnet50_v1s": [[529, 539], ["gluon_resnet.GluonResNet", "helpers.load_pretrained"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.helpers.load_pretrained"], ["", "def", "gluon_resnet50_v1s", "(", "pretrained", "=", "False", ",", "num_classes", "=", "1000", ",", "in_chans", "=", "3", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    \"\"\"", "\n", "default_cfg", "=", "default_cfgs", "[", "'gluon_resnet50_v1s'", "]", "\n", "model", "=", "GluonResNet", "(", "BottleneckGl", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "num_classes", ",", "in_chans", "=", "in_chans", ",", "\n", "stem_width", "=", "64", ",", "deep_stem", "=", "True", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "default_cfg", "\n", "if", "pretrained", ":", "\n", "        ", "load_pretrained", "(", "model", ",", "default_cfg", ",", "num_classes", ",", "in_chans", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet.gluon_resnet101_v1s": [[541, 551], ["gluon_resnet.GluonResNet", "helpers.load_pretrained"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.helpers.load_pretrained"], ["", "def", "gluon_resnet101_v1s", "(", "pretrained", "=", "False", ",", "num_classes", "=", "1000", ",", "in_chans", "=", "3", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    \"\"\"", "\n", "default_cfg", "=", "default_cfgs", "[", "'gluon_resnet101_v1s'", "]", "\n", "model", "=", "GluonResNet", "(", "BottleneckGl", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", "=", "num_classes", ",", "in_chans", "=", "in_chans", ",", "\n", "stem_width", "=", "64", ",", "deep_stem", "=", "True", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "default_cfg", "\n", "if", "pretrained", ":", "\n", "        ", "load_pretrained", "(", "model", ",", "default_cfg", ",", "num_classes", ",", "in_chans", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet.gluon_resnet152_v1s": [[553, 563], ["gluon_resnet.GluonResNet", "helpers.load_pretrained"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.helpers.load_pretrained"], ["", "def", "gluon_resnet152_v1s", "(", "pretrained", "=", "False", ",", "num_classes", "=", "1000", ",", "in_chans", "=", "3", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n    \"\"\"", "\n", "default_cfg", "=", "default_cfgs", "[", "'gluon_resnet152_v1s'", "]", "\n", "model", "=", "GluonResNet", "(", "BottleneckGl", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "num_classes", "=", "num_classes", ",", "in_chans", "=", "in_chans", ",", "\n", "stem_width", "=", "64", ",", "deep_stem", "=", "True", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "default_cfg", "\n", "if", "pretrained", ":", "\n", "        ", "load_pretrained", "(", "model", ",", "default_cfg", ",", "num_classes", ",", "in_chans", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet.gluon_resnext50_32x4d": [[565, 576], ["gluon_resnet.GluonResNet", "helpers.load_pretrained"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.helpers.load_pretrained"], ["", "def", "gluon_resnext50_32x4d", "(", "pretrained", "=", "False", ",", "num_classes", "=", "1000", ",", "in_chans", "=", "3", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNeXt50-32x4d model.\n    \"\"\"", "\n", "default_cfg", "=", "default_cfgs", "[", "'gluon_resnext50_32x4d'", "]", "\n", "model", "=", "GluonResNet", "(", "\n", "BottleneckGl", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "cardinality", "=", "32", ",", "base_width", "=", "4", ",", "\n", "num_classes", "=", "num_classes", ",", "in_chans", "=", "in_chans", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "default_cfg", "\n", "if", "pretrained", ":", "\n", "        ", "load_pretrained", "(", "model", ",", "default_cfg", ",", "num_classes", ",", "in_chans", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet.gluon_resnext101_32x4d": [[578, 589], ["gluon_resnet.GluonResNet", "helpers.load_pretrained"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.helpers.load_pretrained"], ["", "def", "gluon_resnext101_32x4d", "(", "pretrained", "=", "False", ",", "num_classes", "=", "1000", ",", "in_chans", "=", "3", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNeXt-101 model.\n    \"\"\"", "\n", "default_cfg", "=", "default_cfgs", "[", "'gluon_resnext101_32x4d'", "]", "\n", "model", "=", "GluonResNet", "(", "\n", "BottleneckGl", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "cardinality", "=", "32", ",", "base_width", "=", "4", ",", "\n", "num_classes", "=", "num_classes", ",", "in_chans", "=", "in_chans", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "default_cfg", "\n", "if", "pretrained", ":", "\n", "        ", "load_pretrained", "(", "model", ",", "default_cfg", ",", "num_classes", ",", "in_chans", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet.gluon_resnext101_64x4d": [[591, 602], ["gluon_resnet.GluonResNet", "helpers.load_pretrained"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.helpers.load_pretrained"], ["", "def", "gluon_resnext101_64x4d", "(", "pretrained", "=", "False", ",", "num_classes", "=", "1000", ",", "in_chans", "=", "3", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNeXt-101 model.\n    \"\"\"", "\n", "default_cfg", "=", "default_cfgs", "[", "'gluon_resnext101_64x4d'", "]", "\n", "model", "=", "GluonResNet", "(", "\n", "BottleneckGl", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "cardinality", "=", "64", ",", "base_width", "=", "4", ",", "\n", "num_classes", "=", "num_classes", ",", "in_chans", "=", "in_chans", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "default_cfg", "\n", "if", "pretrained", ":", "\n", "        ", "load_pretrained", "(", "model", ",", "default_cfg", ",", "num_classes", ",", "in_chans", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet.gluon_resnext152_32x4d": [[604, 615], ["gluon_resnet.GluonResNet", "helpers.load_pretrained"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.helpers.load_pretrained"], ["", "def", "gluon_resnext152_32x4d", "(", "pretrained", "=", "False", ",", "num_classes", "=", "1000", ",", "in_chans", "=", "3", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNeXt152-32x4d model.\n    \"\"\"", "\n", "default_cfg", "=", "default_cfgs", "[", "'gluon_resnext152_32x4d'", "]", "\n", "model", "=", "GluonResNet", "(", "\n", "BottleneckGl", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "cardinality", "=", "32", ",", "base_width", "=", "4", ",", "\n", "num_classes", "=", "num_classes", ",", "in_chans", "=", "in_chans", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "default_cfg", "\n", "if", "pretrained", ":", "\n", "        ", "load_pretrained", "(", "model", ",", "default_cfg", ",", "num_classes", ",", "in_chans", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet.gluon_seresnext50_32x4d": [[617, 628], ["gluon_resnet.GluonResNet", "helpers.load_pretrained"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.helpers.load_pretrained"], ["", "def", "gluon_seresnext50_32x4d", "(", "pretrained", "=", "False", ",", "num_classes", "=", "1000", ",", "in_chans", "=", "3", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a SEResNeXt50-32x4d model.\n    \"\"\"", "\n", "default_cfg", "=", "default_cfgs", "[", "'gluon_seresnext50_32x4d'", "]", "\n", "model", "=", "GluonResNet", "(", "\n", "BottleneckGl", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "cardinality", "=", "32", ",", "base_width", "=", "4", ",", "use_se", "=", "True", ",", "\n", "num_classes", "=", "num_classes", ",", "in_chans", "=", "in_chans", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "default_cfg", "\n", "if", "pretrained", ":", "\n", "        ", "load_pretrained", "(", "model", ",", "default_cfg", ",", "num_classes", ",", "in_chans", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet.gluon_seresnext101_32x4d": [[630, 641], ["gluon_resnet.GluonResNet", "helpers.load_pretrained"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.helpers.load_pretrained"], ["", "def", "gluon_seresnext101_32x4d", "(", "pretrained", "=", "False", ",", "num_classes", "=", "1000", ",", "in_chans", "=", "3", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a SEResNeXt-101-32x4d model.\n    \"\"\"", "\n", "default_cfg", "=", "default_cfgs", "[", "'gluon_seresnext101_32x4d'", "]", "\n", "model", "=", "GluonResNet", "(", "\n", "BottleneckGl", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "cardinality", "=", "32", ",", "base_width", "=", "4", ",", "use_se", "=", "True", ",", "\n", "num_classes", "=", "num_classes", ",", "in_chans", "=", "in_chans", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "default_cfg", "\n", "if", "pretrained", ":", "\n", "        ", "load_pretrained", "(", "model", ",", "default_cfg", ",", "num_classes", ",", "in_chans", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet.gluon_seresnext101_64x4d": [[643, 654], ["gluon_resnet.GluonResNet", "helpers.load_pretrained"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.helpers.load_pretrained"], ["", "def", "gluon_seresnext101_64x4d", "(", "pretrained", "=", "False", ",", "num_classes", "=", "1000", ",", "in_chans", "=", "3", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a SEResNeXt-101-64x4d model.\n    \"\"\"", "\n", "default_cfg", "=", "default_cfgs", "[", "'gluon_seresnext101_64x4d'", "]", "\n", "model", "=", "GluonResNet", "(", "\n", "BottleneckGl", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "cardinality", "=", "64", ",", "base_width", "=", "4", ",", "use_se", "=", "True", ",", "\n", "num_classes", "=", "num_classes", ",", "in_chans", "=", "in_chans", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "default_cfg", "\n", "if", "pretrained", ":", "\n", "        ", "load_pretrained", "(", "model", ",", "default_cfg", ",", "num_classes", ",", "in_chans", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet.gluon_seresnext152_32x4d": [[656, 667], ["gluon_resnet.GluonResNet"], "function", ["None"], ["", "def", "gluon_seresnext152_32x4d", "(", "pretrained", "=", "False", ",", "num_classes", "=", "1000", ",", "in_chans", "=", "3", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a SEResNeXt152-32x4d model.\n    \"\"\"", "\n", "default_cfg", "=", "default_cfgs", "[", "'gluon_seresnext152_32x4d'", "]", "\n", "model", "=", "GluonResNet", "(", "\n", "BottleneckGl", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "cardinality", "=", "32", ",", "base_width", "=", "4", ",", "use_se", "=", "True", ",", "\n", "num_classes", "=", "num_classes", ",", "in_chans", "=", "in_chans", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "default_cfg", "\n", "#if pretrained:", "\n", "#    load_pretrained(model, default_cfg, num_classes, in_chans)", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.gluon_resnet.gluon_senet154": [[669, 681], ["gluon_resnet.GluonResNet", "helpers.load_pretrained"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.helpers.load_pretrained"], ["", "def", "gluon_senet154", "(", "pretrained", "=", "False", ",", "num_classes", "=", "1000", ",", "in_chans", "=", "3", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs an SENet-154 model.\n    \"\"\"", "\n", "default_cfg", "=", "default_cfgs", "[", "'gluon_senet154'", "]", "\n", "model", "=", "GluonResNet", "(", "\n", "BottleneckGl", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "cardinality", "=", "64", ",", "base_width", "=", "4", ",", "use_se", "=", "True", ",", "\n", "deep_stem", "=", "True", ",", "down_kernel_size", "=", "3", ",", "block_reduce_first", "=", "2", ",", "\n", "num_classes", "=", "num_classes", ",", "in_chans", "=", "in_chans", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "default_cfg", "\n", "if", "pretrained", ":", "\n", "        ", "load_pretrained", "(", "model", ",", "default_cfg", ",", "num_classes", ",", "in_chans", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.xception.XceptionBlock.__init__": [[11, 31], ["torch.Module.__init__", "modules.SeparableConv2d", "modules.SeparableConv2d", "modules.SeparableConv2d", "len", "torch.Conv2d", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel_list", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "skip_connection_type", "=", "'conv'", ",", "relu_first", "=", "True", ",", "\n", "low_feat", "=", "False", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "len", "(", "channel_list", ")", "==", "4", "\n", "self", ".", "skip_connection_type", "=", "skip_connection_type", "\n", "self", ".", "relu_first", "=", "relu_first", "\n", "self", ".", "low_feat", "=", "low_feat", "\n", "\n", "if", "self", ".", "skip_connection_type", "==", "'conv'", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "channel_list", "[", "0", "]", ",", "channel_list", "[", "-", "1", "]", ",", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "norm_layer", "(", "channel_list", "[", "-", "1", "]", ")", "\n", "\n", "", "self", ".", "sep_conv1", "=", "SeparableConv2d", "(", "channel_list", "[", "0", "]", ",", "channel_list", "[", "1", "]", ",", "dilation", "=", "dilation", ",", "\n", "relu_first", "=", "relu_first", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "sep_conv2", "=", "SeparableConv2d", "(", "channel_list", "[", "1", "]", ",", "channel_list", "[", "2", "]", ",", "dilation", "=", "dilation", ",", "\n", "relu_first", "=", "relu_first", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "sep_conv3", "=", "SeparableConv2d", "(", "channel_list", "[", "2", "]", ",", "channel_list", "[", "3", "]", ",", "dilation", "=", "dilation", ",", "\n", "relu_first", "=", "relu_first", ",", "stride", "=", "stride", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "last_inp_channels", "=", "channel_list", "[", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.xception.XceptionBlock.forward": [[32, 52], ["xception.XceptionBlock.sep_conv1", "xception.XceptionBlock.sep_conv2", "xception.XceptionBlock.sep_conv3", "xception.XceptionBlock.conv", "xception.XceptionBlock.bn", "ValueError"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "sc1", "=", "self", ".", "sep_conv1", "(", "inputs", ")", "\n", "sc2", "=", "self", ".", "sep_conv2", "(", "sc1", ")", "\n", "residual", "=", "self", ".", "sep_conv3", "(", "sc2", ")", "\n", "\n", "if", "self", ".", "skip_connection_type", "==", "'conv'", ":", "\n", "            ", "shortcut", "=", "self", ".", "conv", "(", "inputs", ")", "\n", "shortcut", "=", "self", ".", "bn", "(", "shortcut", ")", "\n", "outputs", "=", "residual", "+", "shortcut", "\n", "", "elif", "self", ".", "skip_connection_type", "==", "'sum'", ":", "\n", "            ", "outputs", "=", "residual", "+", "inputs", "\n", "", "elif", "self", ".", "skip_connection_type", "==", "'none'", ":", "\n", "            ", "outputs", "=", "residual", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unsupported skip connection type.'", ")", "\n", "\n", "", "if", "self", ".", "low_feat", ":", "\n", "            ", "return", "outputs", ",", "sc2", "\n", "", "else", ":", "\n", "            ", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.xception.Xception65.__init__": [[55, 128], ["torch.Module.__init__", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.Conv2d", "norm_layer", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "output_stride", "=", "cfg", ".", "MODEL", ".", "OUTPUT_STRIDE", "\n", "if", "output_stride", "==", "32", ":", "\n", "            ", "entry_block3_stride", "=", "2", "\n", "middle_block_dilation", "=", "1", "\n", "exit_block_dilations", "=", "(", "1", ",", "1", ")", "\n", "exit_block_stride", "=", "2", "\n", "", "elif", "output_stride", "==", "16", ":", "\n", "            ", "entry_block3_stride", "=", "2", "\n", "middle_block_dilation", "=", "1", "\n", "exit_block_dilations", "=", "(", "1", ",", "2", ")", "\n", "exit_block_stride", "=", "1", "\n", "", "elif", "output_stride", "==", "8", ":", "\n", "            ", "entry_block3_stride", "=", "1", "\n", "middle_block_dilation", "=", "2", "\n", "exit_block_dilations", "=", "(", "2", ",", "4", ")", "\n", "exit_block_stride", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "# Entry flow", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "32", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "64", ")", "\n", "\n", "self", ".", "block1", "=", "XceptionBlock", "(", "[", "64", ",", "128", ",", "128", ",", "128", "]", ",", "stride", "=", "2", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block2", "=", "XceptionBlock", "(", "[", "128", ",", "256", ",", "256", ",", "256", "]", ",", "stride", "=", "2", ",", "low_feat", "=", "True", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block3", "=", "XceptionBlock", "(", "[", "256", ",", "728", ",", "728", ",", "728", "]", ",", "stride", "=", "entry_block3_stride", ",", "low_feat", "=", "True", ",", "\n", "norm_layer", "=", "norm_layer", ")", "\n", "\n", "# Middle flow (16 units)", "\n", "self", ".", "block4", "=", "XceptionBlock", "(", "[", "728", ",", "728", ",", "728", ",", "728", "]", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "skip_connection_type", "=", "'sum'", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block5", "=", "XceptionBlock", "(", "[", "728", ",", "728", ",", "728", ",", "728", "]", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "skip_connection_type", "=", "'sum'", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block6", "=", "XceptionBlock", "(", "[", "728", ",", "728", ",", "728", ",", "728", "]", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "skip_connection_type", "=", "'sum'", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block7", "=", "XceptionBlock", "(", "[", "728", ",", "728", ",", "728", ",", "728", "]", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "skip_connection_type", "=", "'sum'", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block8", "=", "XceptionBlock", "(", "[", "728", ",", "728", ",", "728", ",", "728", "]", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "skip_connection_type", "=", "'sum'", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block9", "=", "XceptionBlock", "(", "[", "728", ",", "728", ",", "728", ",", "728", "]", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "skip_connection_type", "=", "'sum'", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block10", "=", "XceptionBlock", "(", "[", "728", ",", "728", ",", "728", ",", "728", "]", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "skip_connection_type", "=", "'sum'", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block11", "=", "XceptionBlock", "(", "[", "728", ",", "728", ",", "728", ",", "728", "]", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "skip_connection_type", "=", "'sum'", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block12", "=", "XceptionBlock", "(", "[", "728", ",", "728", ",", "728", ",", "728", "]", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "skip_connection_type", "=", "'sum'", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block13", "=", "XceptionBlock", "(", "[", "728", ",", "728", ",", "728", ",", "728", "]", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "skip_connection_type", "=", "'sum'", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block14", "=", "XceptionBlock", "(", "[", "728", ",", "728", ",", "728", ",", "728", "]", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "skip_connection_type", "=", "'sum'", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block15", "=", "XceptionBlock", "(", "[", "728", ",", "728", ",", "728", ",", "728", "]", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "skip_connection_type", "=", "'sum'", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block16", "=", "XceptionBlock", "(", "[", "728", ",", "728", ",", "728", ",", "728", "]", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "skip_connection_type", "=", "'sum'", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block17", "=", "XceptionBlock", "(", "[", "728", ",", "728", ",", "728", ",", "728", "]", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "skip_connection_type", "=", "'sum'", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block18", "=", "XceptionBlock", "(", "[", "728", ",", "728", ",", "728", ",", "728", "]", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "skip_connection_type", "=", "'sum'", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block19", "=", "XceptionBlock", "(", "[", "728", ",", "728", ",", "728", ",", "728", "]", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "skip_connection_type", "=", "'sum'", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n", "# Exit flow", "\n", "self", ".", "block20", "=", "XceptionBlock", "(", "[", "728", ",", "728", ",", "1024", ",", "1024", "]", ",", "stride", "=", "exit_block_stride", ",", "\n", "dilation", "=", "exit_block_dilations", "[", "0", "]", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block21", "=", "XceptionBlock", "(", "[", "1024", ",", "1536", ",", "1536", ",", "2048", "]", ",", "dilation", "=", "exit_block_dilations", "[", "1", "]", ",", "\n", "skip_connection_type", "=", "'none'", ",", "relu_first", "=", "False", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.xception.Xception65.forward": [[129, 166], ["xception.Xception65.conv1", "xception.Xception65.bn1", "xception.Xception65.relu", "xception.Xception65.conv2", "xception.Xception65.bn2", "xception.Xception65.relu", "xception.Xception65.block1", "xception.Xception65.block2", "xception.Xception65.block3", "xception.Xception65.block4", "xception.Xception65.block5", "xception.Xception65.block6", "xception.Xception65.block7", "xception.Xception65.block8", "xception.Xception65.block9", "xception.Xception65.block10", "xception.Xception65.block11", "xception.Xception65.block12", "xception.Xception65.block13", "xception.Xception65.block14", "xception.Xception65.block15", "xception.Xception65.block16", "xception.Xception65.block17", "xception.Xception65.block18", "xception.Xception65.block19", "xception.Xception65.block20", "xception.Xception65.block21"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# Entry flow", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "block1", "(", "x", ")", "\n", "x", ",", "c1", "=", "self", ".", "block2", "(", "x", ")", "# b, h//4, w//4, 256", "\n", "x", ",", "c2", "=", "self", ".", "block3", "(", "x", ")", "# b, h//8, w//8, 728", "\n", "\n", "# Middle flow", "\n", "x", "=", "self", ".", "block4", "(", "x", ")", "\n", "x", "=", "self", ".", "block5", "(", "x", ")", "\n", "x", "=", "self", ".", "block6", "(", "x", ")", "\n", "x", "=", "self", ".", "block7", "(", "x", ")", "\n", "x", "=", "self", ".", "block8", "(", "x", ")", "\n", "x", "=", "self", ".", "block9", "(", "x", ")", "\n", "x", "=", "self", ".", "block10", "(", "x", ")", "\n", "x", "=", "self", ".", "block11", "(", "x", ")", "\n", "x", "=", "self", ".", "block12", "(", "x", ")", "\n", "x", "=", "self", ".", "block13", "(", "x", ")", "\n", "x", "=", "self", ".", "block14", "(", "x", ")", "\n", "x", "=", "self", ".", "block15", "(", "x", ")", "\n", "x", "=", "self", ".", "block16", "(", "x", ")", "\n", "x", "=", "self", ".", "block17", "(", "x", ")", "\n", "x", "=", "self", ".", "block18", "(", "x", ")", "\n", "c3", "=", "self", ".", "block19", "(", "x", ")", "\n", "\n", "# Exit flow", "\n", "x", "=", "self", ".", "block20", "(", "c3", ")", "\n", "c4", "=", "self", ".", "block21", "(", "x", ")", "\n", "\n", "return", "c1", ",", "c2", ",", "c3", ",", "c4", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.xception.BlockA.__init__": [[172, 201], ["torch.Module.__init__", "torch.ReLU", "list", "list.append", "list.append", "list.append", "list.append", "list.append", "torch.Sequential", "torch.Conv2d", "norm_layer", "list.append", "modules.SeparableConv2d", "norm_layer", "modules.SeparableConv2d", "norm_layer", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "modules.SeparableConv2d", "norm_layer", "modules.SeparableConv2d", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ",", "start_with_relu", "=", "True", ")", ":", "\n", "        ", "super", "(", "BlockA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "out_channels", "!=", "in_channels", "or", "stride", "!=", "1", ":", "\n", "            ", "self", ".", "skip", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "stride", ",", "bias", "=", "False", ")", "\n", "self", ".", "skipbn", "=", "norm_layer", "(", "out_channels", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "skip", "=", "None", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "rep", "=", "list", "(", ")", "\n", "inter_channels", "=", "out_channels", "//", "4", "\n", "\n", "if", "start_with_relu", ":", "\n", "            ", "rep", ".", "append", "(", "self", ".", "relu", ")", "\n", "", "rep", ".", "append", "(", "SeparableConv2d", "(", "in_channels", ",", "inter_channels", ",", "3", ",", "1", ",", "dilation", ",", "norm_layer", "=", "norm_layer", ")", ")", "\n", "rep", ".", "append", "(", "norm_layer", "(", "inter_channels", ")", ")", "\n", "\n", "rep", ".", "append", "(", "self", ".", "relu", ")", "\n", "rep", ".", "append", "(", "SeparableConv2d", "(", "inter_channels", ",", "inter_channels", ",", "3", ",", "1", ",", "dilation", ",", "norm_layer", "=", "norm_layer", ")", ")", "\n", "rep", ".", "append", "(", "norm_layer", "(", "inter_channels", ")", ")", "\n", "\n", "if", "stride", "!=", "1", ":", "\n", "            ", "rep", ".", "append", "(", "self", ".", "relu", ")", "\n", "rep", ".", "append", "(", "SeparableConv2d", "(", "inter_channels", ",", "out_channels", ",", "3", ",", "stride", ",", "norm_layer", "=", "norm_layer", ")", ")", "\n", "rep", ".", "append", "(", "norm_layer", "(", "out_channels", ")", ")", "\n", "", "else", ":", "\n", "            ", "rep", ".", "append", "(", "self", ".", "relu", ")", "\n", "rep", ".", "append", "(", "SeparableConv2d", "(", "inter_channels", ",", "out_channels", ",", "3", ",", "1", ",", "norm_layer", "=", "norm_layer", ")", ")", "\n", "rep", ".", "append", "(", "norm_layer", "(", "out_channels", ")", ")", "\n", "", "self", ".", "rep", "=", "nn", ".", "Sequential", "(", "*", "rep", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.xception.BlockA.forward": [[202, 210], ["xception.BlockA.rep", "xception.BlockA.skipbn", "xception.BlockA.skip"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "rep", "(", "x", ")", "\n", "if", "self", ".", "skip", "is", "not", "None", ":", "\n", "            ", "skip", "=", "self", ".", "skipbn", "(", "self", ".", "skip", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "skip", "=", "x", "\n", "", "out", "=", "out", "+", "skip", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.xception.Enc.__init__": [[213, 220], ["torch.Module.__init__", "list", "list.append", "range", "torch.Sequential", "xception.BlockA", "list.append", "xception.BlockA"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "blocks", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "Enc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "block", "=", "list", "(", ")", "\n", "block", ".", "append", "(", "BlockA", "(", "in_channels", ",", "out_channels", ",", "2", ",", "norm_layer", "=", "norm_layer", ")", ")", "\n", "for", "i", "in", "range", "(", "blocks", "-", "1", ")", ":", "\n", "            ", "block", ".", "append", "(", "BlockA", "(", "out_channels", ",", "out_channels", ",", "1", ",", "norm_layer", "=", "norm_layer", ")", ")", "\n", "", "self", ".", "block", "=", "nn", ".", "Sequential", "(", "*", "block", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.xception.Enc.forward": [[221, 223], ["xception.Enc.block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "block", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.xception.FCAttention.__init__": [[226, 234], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Sequential", "torch.Conv2d", "norm_layer", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "FCAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "in_channels", ",", "1000", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1000", ",", "in_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "in_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.xception.FCAttention.forward": [[235, 241], ["x.size", "xception.FCAttention.avgpool().view", "xception.FCAttention.fc().view", "xception.FCAttention.conv", "xception.FCAttention.expand_as", "xception.FCAttention.avgpool", "xception.FCAttention.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "n", ",", "c", ",", "_", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "att", "=", "self", ".", "avgpool", "(", "x", ")", ".", "view", "(", "n", ",", "c", ")", "\n", "att", "=", "self", ".", "fc", "(", "att", ")", ".", "view", "(", "n", ",", "1000", ",", "1", ",", "1", ")", "\n", "att", "=", "self", ".", "conv", "(", "att", ")", "\n", "return", "x", "*", "att", ".", "expand_as", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.xception.XceptionA.__init__": [[244, 257], ["torch.Module.__init__", "torch.Sequential", "xception.Enc", "xception.Enc", "xception.Enc", "xception.FCAttention", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Conv2d", "norm_layer", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "1000", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "XceptionA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "3", ",", "8", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "self", ".", "enc2", "=", "Enc", "(", "8", ",", "48", ",", "4", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "enc3", "=", "Enc", "(", "48", ",", "96", ",", "6", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "enc4", "=", "Enc", "(", "96", ",", "192", ",", "4", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n", "self", ".", "fca", "=", "FCAttention", "(", "192", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "192", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.xception.XceptionA.forward": [[258, 271], ["xception.XceptionA.conv1", "xception.XceptionA.enc2", "xception.XceptionA.enc3", "xception.XceptionA.enc4", "xception.XceptionA.fca", "xception.XceptionA.avgpool", "xception.XceptionA.view", "xception.XceptionA.fc", "xception.XceptionA.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "enc2", "(", "x", ")", "\n", "x", "=", "self", ".", "enc3", "(", "x", ")", "\n", "x", "=", "self", ".", "enc4", "(", "x", ")", "\n", "x", "=", "self", ".", "fca", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.xception.xception_a": [[273, 277], ["build.BACKBONE_REGISTRY.register", "xception.XceptionA"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.utils.registry.Registry.register"], ["", "", "@", "BACKBONE_REGISTRY", ".", "register", "(", ")", "\n", "def", "xception_a", "(", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "    ", "model", "=", "XceptionA", "(", "norm_layer", "=", "norm_layer", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.xception.xception65": [[279, 283], ["build.BACKBONE_REGISTRY.register", "xception.Xception65"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.utils.registry.Registry.register"], ["", "@", "BACKBONE_REGISTRY", ".", "register", "(", ")", "\n", "def", "xception65", "(", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "    ", "model", "=", "Xception65", "(", "norm_layer", "=", "norm_layer", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.resnext_101_32x4d.LambdaBase.__init__": [[7, 10], ["torch.Sequential.__init__"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "fn", ",", "*", "args", ")", ":", "\n", "        ", "super", "(", "LambdaBase", ",", "self", ")", ".", "__init__", "(", "*", "args", ")", "\n", "self", ".", "lambda_func", "=", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.resnext_101_32x4d.LambdaBase.forward_prepare": [[11, 16], ["resnext_101_32x4d.LambdaBase._modules.values", "output.append", "module"], "methods", ["None"], ["", "def", "forward_prepare", "(", "self", ",", "input", ")", ":", "\n", "        ", "output", "=", "[", "]", "\n", "for", "module", "in", "self", ".", "_modules", ".", "values", "(", ")", ":", "\n", "            ", "output", ".", "append", "(", "module", "(", "input", ")", ")", "\n", "", "return", "output", "if", "output", "else", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.resnext_101_32x4d.Lambda.forward": [[19, 21], ["resnext_101_32x4d.Lambda.lambda_func", "resnext_101_32x4d.Lambda.forward_prepare"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.resnext_101_32x4d.LambdaBase.forward_prepare"], ["    ", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "lambda_func", "(", "self", ".", "forward_prepare", "(", "input", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.resnext_101_32x4d.LambdaMap.forward": [[24, 26], ["list", "map", "resnext_101_32x4d.LambdaMap.forward_prepare"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.resnext_101_32x4d.LambdaBase.forward_prepare"], ["    ", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "list", "(", "map", "(", "self", ".", "lambda_func", ",", "self", ".", "forward_prepare", "(", "input", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.resnext_101_32x4d.LambdaReduce.forward": [[29, 31], ["functools.reduce", "resnext_101_32x4d.LambdaReduce.forward_prepare"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.backbones.resnext_101_32x4d.LambdaBase.forward_prepare"], ["    ", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "reduce", "(", "self", ".", "lambda_func", ",", "self", ".", "forward_prepare", "(", "input", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.glass_with_fakemix.GLASSWithFakeMix.get_pairs": [[19, 28], ["glob.glob", "print", "os.path.join", "mask_paths.append", "os.path.split", "os.path.join", "imgname.replace", "len"], "methods", ["None"], ["def", "get_pairs", "(", "self", ",", "img_folder", ",", "split", "=", "'train'", ")", ":", "\n", "        ", "img_paths", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "img_folder", ",", "split", ",", "\"image\"", ",", "\"*.jpg\"", ")", ")", "\n", "mask_paths", "=", "[", "]", "\n", "for", "single_image_path", "in", "img_paths", ":", "\n", "            ", "imgname", "=", "os", ".", "path", ".", "split", "(", "single_image_path", ")", "[", "1", "]", "\n", "mask_paths", ".", "append", "(", "os", ".", "path", ".", "join", "(", "img_folder", ",", "split", ",", "\"mask\"", ",", "imgname", ".", "replace", "(", "'.jpg'", ",", "'.png'", ")", ")", ")", "\n", "\n", "", "print", "(", "f\"datset lenghts for {split} in {img_folder}:{len(img_paths)}\"", ")", "\n", "return", "img_paths", ",", "mask_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.glass_with_fakemix.GLASSWithFakeMix.classes": [[29, 33], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "classes", "(", "self", ")", ":", "\n", "        ", "\"\"\"Category names.\"\"\"", "\n", "return", "(", "'background'", ",", "'glass'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.trans10k_with_imagesmix.TransSegmentationWithImagesMix._gen_fake_bound": [[9, 22], ["random.randint", "random.randint", "numpy.float32", "cv2.warpAffine", "random.randint", "random.randint", "numpy.float32", "cv2.warpAffine"], "methods", ["None"], ["    ", "def", "_gen_fake_bound", "(", "self", ",", "img", ",", "boundary", ")", ":", "\n", "        ", "boundary", "=", "boundary", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "\n", "dx", "=", "random", ".", "randint", "(", "-", "1", "*", "self", ".", "base_size", "*", "cfg", ".", "TRAIN", ".", "FAKE_BOUNDARY_DISTANCE_ALPHA", "//", "cfg", ".", "TRAIN", ".", "FAKE_BOUNDARY_DISTANCE_BETA", ",", "self", ".", "base_size", "*", "cfg", ".", "TRAIN", ".", "FAKE_BOUNDARY_DISTANCE_ALPHA", "//", "cfg", ".", "TRAIN", ".", "FAKE_BOUNDARY_DISTANCE_BETA", ")", "\n", "dy", "=", "random", ".", "randint", "(", "-", "1", "*", "self", ".", "base_size", "*", "cfg", ".", "TRAIN", ".", "FAKE_BOUNDARY_DISTANCE_ALPHA", "//", "cfg", ".", "TRAIN", ".", "FAKE_BOUNDARY_DISTANCE_BETA", ",", "self", ".", "base_size", "*", "cfg", ".", "TRAIN", ".", "FAKE_BOUNDARY_DISTANCE_ALPHA", "//", "cfg", ".", "TRAIN", ".", "FAKE_BOUNDARY_DISTANCE_BETA", ")", "\n", "move_matrix", "=", "np", ".", "float32", "(", "[", "[", "1", ",", "0", ",", "dx", "]", ",", "[", "0", ",", "1", ",", "dy", "]", "]", ")", "\n", "boundary_move", "=", "cv2", ".", "warpAffine", "(", "boundary", ",", "move_matrix", ",", "(", "self", ".", "base_size", ",", "self", ".", "base_size", ")", ")", "\n", "dx", "=", "random", ".", "randint", "(", "-", "1", "*", "self", ".", "base_size", "*", "cfg", ".", "TRAIN", ".", "FAKE_BOUNDARY_DISTANCE_ALPHA", "//", "cfg", ".", "TRAIN", ".", "FAKE_BOUNDARY_DISTANCE_BETA", ",", "self", ".", "base_size", "*", "cfg", ".", "TRAIN", ".", "FAKE_BOUNDARY_DISTANCE_ALPHA", "//", "cfg", ".", "TRAIN", ".", "FAKE_BOUNDARY_DISTANCE_BETA", ")", "\n", "dy", "=", "random", ".", "randint", "(", "-", "1", "*", "self", ".", "base_size", "*", "cfg", ".", "TRAIN", ".", "FAKE_BOUNDARY_DISTANCE_ALPHA", "//", "cfg", ".", "TRAIN", ".", "FAKE_BOUNDARY_DISTANCE_BETA", ",", "self", ".", "base_size", "*", "cfg", ".", "TRAIN", ".", "FAKE_BOUNDARY_DISTANCE_ALPHA", "//", "cfg", ".", "TRAIN", ".", "FAKE_BOUNDARY_DISTANCE_BETA", ")", "\n", "move_matrix", "=", "np", ".", "float32", "(", "[", "[", "1", ",", "0", ",", "dx", "]", ",", "[", "0", ",", "1", ",", "dy", "]", "]", ")", "\n", "img_move", "=", "cv2", ".", "warpAffine", "(", "img", ",", "move_matrix", ",", "(", "self", ".", "base_size", ",", "self", ".", "base_size", ")", ")", "\n", "boundary_content_move", "=", "boundary_move", "[", "...", ",", "np", ".", "newaxis", "]", "*", "img_move", "\n", "return", "boundary_move", ",", "boundary_content_move", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.camouflage_with_fakemix.CAMOUFLAGEWithFakeMix.get_pairs": [[20, 35], ["split.capitalize.capitalize.capitalize", "glob.glob", "print", "os.path.join", "os.path.join", "os.path.split", "imgname.replace", "os.path.exists", "img_paths.append", "mask_paths.append", "len"], "methods", ["None"], ["def", "get_pairs", "(", "self", ",", "img_folder", ",", "split", "=", "'train'", ")", ":", "\n", "        ", "split", "=", "split", ".", "capitalize", "(", ")", "\n", "paths", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "img_folder", ",", "split", ",", "\"Image\"", ",", "\"*.jpg\"", ")", ")", "\n", "img_paths", "=", "[", "]", "\n", "mask_paths", "=", "[", "]", "\n", "for", "single_path", "in", "paths", ":", "\n", "            ", "if", "\"NonCAM\"", "in", "single_path", ":", "continue", "\n", "imgname", "=", "os", ".", "path", ".", "split", "(", "single_path", ")", "[", "1", "]", "\n", "mask_path", "=", "os", ".", "path", ".", "join", "(", "img_folder", ",", "split", ",", "\"GT_Object\"", ",", "imgname", ".", "replace", "(", "'.jpg'", ",", "'.png'", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "mask_path", ")", "is", "True", ":", "\n", "                ", "img_paths", ".", "append", "(", "single_path", ")", "\n", "mask_paths", ".", "append", "(", "mask_path", ")", "\n", "\n", "", "", "print", "(", "f\"datset lenghts for {split} in {img_folder}:{len(img_paths)}\"", ")", "\n", "return", "img_paths", ",", "mask_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.camouflage_with_fakemix.CAMOUFLAGEWithFakeMix.classes": [[36, 40], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "classes", "(", "self", ")", ":", "\n", "        ", "\"\"\"Category names.\"\"\"", "\n", "return", "(", "'background'", ",", "'camouflage'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.msd_with_fakemix.MSDWithFakeMix.get_pairs": [[20, 29], ["glob.glob", "print", "os.path.join", "mask_paths.append", "os.path.split", "os.path.join", "imgname.replace", "len"], "methods", ["None"], ["def", "get_pairs", "(", "self", ",", "img_folder", ",", "split", "=", "'train'", ")", ":", "\n", "        ", "img_paths", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "img_folder", ",", "split", ",", "\"image\"", ",", "\"*.jpg\"", ")", ")", "\n", "mask_paths", "=", "[", "]", "\n", "for", "single_image_path", "in", "img_paths", ":", "\n", "            ", "imgname", "=", "os", ".", "path", ".", "split", "(", "single_image_path", ")", "[", "1", "]", "\n", "mask_paths", ".", "append", "(", "os", ".", "path", ".", "join", "(", "img_folder", ",", "split", ",", "\"mask\"", ",", "imgname", ".", "replace", "(", "'.jpg'", ",", "'.png'", ")", ")", ")", "\n", "\n", "", "print", "(", "f\"datset lenghts for {split} in {img_folder}:{len(img_paths)}\"", ")", "\n", "return", "img_paths", ",", "mask_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.msd_with_fakemix.MSDWithFakeMix._class_to_index": [[30, 38], ["numpy.array", "PIL.Image.fromarray", "len", "PIL.Image.fromarray.max", "numpy.uinque"], "methods", ["None"], ["", "def", "_class_to_index", "(", "self", ",", "mask", ")", ":", "\n", "        ", "mask", "=", "np", ".", "array", "(", "mask", ")", "\n", "if", "len", "(", "mask", ".", "shape", ")", ">", "2", ":", "\n", "            ", "mask", "=", "mask", "[", ":", ",", ":", ",", "0", "]", "\n", "", "mask", "[", "mask", "==", "255", "]", "=", "1", "\n", "assert", "mask", ".", "max", "(", ")", "<=", "1", ",", "f\"error, undefined values in mask: {np.uinque(mask)}\"", "\n", "mask", "=", "Image", ".", "fromarray", "(", "mask", ")", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.msd_with_fakemix.MSDWithFakeMix.classes": [[39, 43], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "classes", "(", "self", ")", ":", "\n", "        ", "\"\"\"Category names.\"\"\"", "\n", "return", "(", "'background'", ",", "'mirror'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.trans10k_with_zerosmix.TransSegmentationWithZerosMix._gen_fake_bound": [[8, 18], ["random.randint", "random.randint", "numpy.float32", "cv2.warpAffine", "numpy.zeros_like"], "methods", ["None"], ["    ", "def", "_gen_fake_bound", "(", "self", ",", "img", ",", "boundary", ")", ":", "\n", "        ", "boundary", "=", "boundary", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "boundary_content", "=", "boundary", "*", "img", "\n", "\n", "dx", "=", "random", ".", "randint", "(", "-", "1", "*", "self", ".", "base_size", "*", "cfg", ".", "TRAIN", ".", "FAKE_BOUNDARY_DISTANCE_ALPHA", "//", "cfg", ".", "TRAIN", ".", "FAKE_BOUNDARY_DISTANCE_BETA", ",", "self", ".", "base_size", "*", "cfg", ".", "TRAIN", ".", "FAKE_BOUNDARY_DISTANCE_ALPHA", "//", "cfg", ".", "TRAIN", ".", "FAKE_BOUNDARY_DISTANCE_BETA", ")", "\n", "dy", "=", "random", ".", "randint", "(", "-", "1", "*", "self", ".", "base_size", "*", "cfg", ".", "TRAIN", ".", "FAKE_BOUNDARY_DISTANCE_ALPHA", "//", "cfg", ".", "TRAIN", ".", "FAKE_BOUNDARY_DISTANCE_BETA", ",", "self", ".", "base_size", "*", "cfg", ".", "TRAIN", ".", "FAKE_BOUNDARY_DISTANCE_ALPHA", "//", "cfg", ".", "TRAIN", ".", "FAKE_BOUNDARY_DISTANCE_BETA", ")", "\n", "move_matrix", "=", "np", ".", "float32", "(", "[", "[", "1", ",", "0", ",", "dx", "]", ",", "[", "0", ",", "1", ",", "dy", "]", "]", ")", "\n", "boundary_move", "=", "cv2", ".", "warpAffine", "(", "boundary", ",", "move_matrix", ",", "(", "self", ".", "base_size", ",", "self", ".", "base_size", ")", ")", "\n", "boundary_content_move", "=", "np", ".", "zeros_like", "(", "boundary_content", ")", "\n", "return", "boundary_move", ",", "boundary_content_move", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.trans10k_with_meansmix.TransSegmentationWithMeansMix.__init__": [[9, 13], ["trans10k_with_fakemix.TransSegmentationWithFakeMix.__init__", "numpy.reshape", "numpy.reshape", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "image_means", "=", "np", ".", "reshape", "(", "np", ".", "array", "(", "cfg", ".", "DATASET", ".", "MEAN", ")", ",", "[", "1", ",", "1", ",", "-", "1", "]", ")", "\n", "self", ".", "image_stds", "=", "np", ".", "reshape", "(", "np", ".", "array", "(", "cfg", ".", "DATASET", ".", "STD", ")", ",", "[", "1", ",", "1", ",", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.trans10k_with_meansmix.TransSegmentationWithMeansMix._gen_fake_bound": [[14, 24], ["random.randint", "random.randint", "numpy.float32", "cv2.warpAffine", "cv2.warpAffine", "numpy.ones_like"], "methods", ["None"], ["", "def", "_gen_fake_bound", "(", "self", ",", "img", ",", "boundary", ")", ":", "\n", "        ", "boundary", "=", "boundary", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "boundary_content", "=", "boundary", "*", "(", "255", "*", "np", ".", "ones_like", "(", "img", ")", "*", "self", ".", "image_means", ")", ".", "astype", "(", "img", ".", "dtype", ")", "\n", "\n", "dx", "=", "random", ".", "randint", "(", "-", "1", "*", "self", ".", "base_size", "*", "cfg", ".", "TRAIN", ".", "FAKE_BOUNDARY_DISTANCE_ALPHA", "//", "cfg", ".", "TRAIN", ".", "FAKE_BOUNDARY_DISTANCE_BETA", ",", "self", ".", "base_size", "*", "cfg", ".", "TRAIN", ".", "FAKE_BOUNDARY_DISTANCE_ALPHA", "//", "cfg", ".", "TRAIN", ".", "FAKE_BOUNDARY_DISTANCE_BETA", ")", "\n", "dy", "=", "random", ".", "randint", "(", "-", "1", "*", "self", ".", "base_size", "*", "cfg", ".", "TRAIN", ".", "FAKE_BOUNDARY_DISTANCE_ALPHA", "//", "cfg", ".", "TRAIN", ".", "FAKE_BOUNDARY_DISTANCE_BETA", ",", "self", ".", "base_size", "*", "cfg", ".", "TRAIN", ".", "FAKE_BOUNDARY_DISTANCE_ALPHA", "//", "cfg", ".", "TRAIN", ".", "FAKE_BOUNDARY_DISTANCE_BETA", ")", "\n", "move_matrix", "=", "np", ".", "float32", "(", "[", "[", "1", ",", "0", ",", "dx", "]", ",", "[", "0", ",", "1", ",", "dy", "]", "]", ")", "\n", "boundary_move", "=", "cv2", ".", "warpAffine", "(", "boundary", ",", "move_matrix", ",", "(", "self", ".", "base_size", ",", "self", ".", "base_size", ")", ")", "\n", "boundary_content_move", "=", "cv2", ".", "warpAffine", "(", "boundary_content", ",", "move_matrix", ",", "(", "self", ".", "base_size", ",", "self", ".", "base_size", ")", ")", "\n", "return", "boundary_move", ",", "boundary_content_move", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.seg_data_base.SegmentationDataset.__init__": [[16, 26], ["object.__init__", "os.path.join", "seg_data_base.SegmentationDataset.to_tuple", "seg_data_base.SegmentationDataset._get_color_jitter"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__", "home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.seg_data_base.SegmentationDataset.to_tuple", "home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.seg_data_base.SegmentationDataset._get_color_jitter"], ["def", "__init__", "(", "self", ",", "root", ",", "split", ",", "mode", ",", "transform", ",", "base_size", "=", "520", ",", "crop_size", "=", "480", ")", ":", "\n", "        ", "super", "(", "SegmentationDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "root", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "ROOT_PATH", ",", "root", ")", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "mode", "=", "mode", "if", "mode", "is", "not", "None", "else", "split", "\n", "if", "(", "self", ".", "mode", "==", "'val'", "or", "self", ".", "mode", "==", "\"test\"", ")", ":", "\n", "            ", "self", ".", "transform", "=", "transform", "\n", "", "self", ".", "base_size", "=", "base_size", "\n", "self", ".", "crop_size", "=", "self", ".", "to_tuple", "(", "crop_size", ")", "\n", "self", ".", "color_jitter", "=", "self", ".", "_get_color_jitter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.seg_data_base.SegmentationDataset.to_tuple": [[27, 34], ["isinstance", "tuple", "isinstance", "tuple", "ValueError", "type"], "methods", ["None"], ["", "def", "to_tuple", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "return", "tuple", "(", "size", ")", "\n", "", "elif", "isinstance", "(", "size", ",", "(", "int", ",", "float", ")", ")", ":", "\n", "            ", "return", "tuple", "(", "(", "size", ",", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unsupport datatype: {}'", ".", "format", "(", "type", "(", "size", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.seg_data_base.SegmentationDataset._get_color_jitter": [[35, 47], ["isinstance", "torchvision.transforms.ColorJitter", "len", "float"], "methods", ["None"], ["", "", "def", "_get_color_jitter", "(", "self", ")", ":", "\n", "        ", "color_jitter", "=", "cfg", ".", "AUG", ".", "COLOR_JITTER", "\n", "if", "color_jitter", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "if", "isinstance", "(", "color_jitter", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "# color jitter should be a 3-tuple/list if spec brightness/contrast/saturation", "\n", "# or 4 if also augmenting hue", "\n", "            ", "assert", "len", "(", "color_jitter", ")", "in", "(", "3", ",", "4", ")", "\n", "", "else", ":", "\n", "# if it's a scalar, duplicate for brightness, contrast, and saturation, no hue", "\n", "            ", "color_jitter", "=", "(", "float", "(", "color_jitter", ")", ",", ")", "*", "3", "\n", "", "return", "torchvision", ".", "transforms", ".", "ColorJitter", "(", "*", "color_jitter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.seg_data_base.SegmentationDataset._val_sync_transform": [[48, 56], ["img.resize.resize.resize", "mask.resize.resize.resize", "seg_data_base.SegmentationDataset._img_transform", "seg_data_base.SegmentationDataset._mask_transform"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.seg_data_base.SegmentationDataset._img_transform", "home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.trans10k_with_fakemix.TransSegmentationWithFakeMix._mask_transform"], ["", "def", "_val_sync_transform", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "short_size", "=", "self", ".", "base_size", "\n", "img", "=", "img", ".", "resize", "(", "(", "short_size", ",", "short_size", ")", ",", "Image", ".", "BILINEAR", ")", "\n", "mask", "=", "mask", ".", "resize", "(", "(", "short_size", ",", "short_size", ")", ",", "Image", ".", "NEAREST", ")", "\n", "\n", "# final transform", "\n", "img", ",", "mask", "=", "self", ".", "_img_transform", "(", "img", ")", ",", "self", ".", "_mask_transform", "(", "mask", ")", "\n", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.seg_data_base.SegmentationDataset._sync_transform": [[57, 76], ["numpy.rot90.resize", "numpy.rot90.resize", "numpy.array", "numpy.array().astype", "numpy.random.random", "numpy.random.randint", "numpy.rot90", "numpy.rot90", "seg_data_base.SegmentationDataset._img_transform", "seg_data_base.SegmentationDataset._mask_transform", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.seg_data_base.SegmentationDataset._img_transform", "home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.trans10k_with_fakemix.TransSegmentationWithFakeMix._mask_transform"], ["", "def", "_sync_transform", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "short_size", "=", "self", ".", "base_size", "\n", "img", "=", "img", ".", "resize", "(", "(", "short_size", ",", "short_size", ")", ",", "Image", ".", "BILINEAR", ")", "\n", "mask", "=", "mask", ".", "resize", "(", "(", "short_size", ",", "short_size", ")", ",", "Image", ".", "NEAREST", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "mask", "=", "np", ".", "array", "(", "mask", ")", ".", "astype", "(", "'int32'", ")", "\n", "\n", "if", "np", ".", "random", ".", "random", "(", ")", "<", "cfg", ".", "AUG", ".", "FLIP_PROB", ":", "\n", "            ", "img", "=", "img", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "mask", "=", "mask", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "\n", "", "if", "cfg", ".", "AUG", ".", "ROTATE", "is", "True", ":", "\n", "            ", "rotate_count", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "3", ")", "\n", "img", "=", "np", ".", "rot90", "(", "img", ",", "k", "=", "rotate_count", ",", "axes", "=", "(", "0", ",", "1", ")", ")", "\n", "mask", "=", "np", ".", "rot90", "(", "mask", ",", "k", "=", "rotate_count", ",", "axes", "=", "(", "0", ",", "1", ")", ")", "\n", "\n", "# final transform", "\n", "", "img", ",", "mask", "=", "self", ".", "_img_transform", "(", "img", ")", ",", "self", ".", "_mask_transform", "(", "mask", ")", "\n", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.seg_data_base.SegmentationDataset._img_transform": [[77, 79], ["numpy.array"], "methods", ["None"], ["", "def", "_img_transform", "(", "self", ",", "img", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.seg_data_base.SegmentationDataset._mask_transform": [[80, 82], ["numpy.array().astype", "numpy.array"], "methods", ["None"], ["", "def", "_mask_transform", "(", "self", ",", "mask", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "mask", ")", ".", "astype", "(", "'int32'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.seg_data_base.SegmentationDataset.num_class": [[83, 87], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_class", "(", "self", ")", ":", "\n", "        ", "\"\"\"Number of categories.\"\"\"", "\n", "return", "self", ".", "NUM_CLASS", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.seg_data_base.SegmentationDataset.pred_offset": [[88, 91], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "pred_offset", "(", "self", ")", ":", "\n", "        ", "return", "0", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.trans10k_with_fakemix.TransSegmentationWithFakeMix.__init__": [[18, 23], ["seg_data_base.SegmentationDataset.__init__", "os.path.exists", "trans10k_with_fakemix.TransSegmentationWithFakeMix.get_pairs"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__", "home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.trans10k_extra.TransExtraSegmentation.get_pairs"], ["def", "__init__", "(", "self", ",", "root", "=", "None", ",", "split", "=", "'train'", ",", "mode", "=", "None", ",", "transform", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "root", "=", "cfg", ".", "DATASET", ".", "PATH", "if", "root", "is", "None", "else", "root", "\n", "super", "(", ")", ".", "__init__", "(", "root", ",", "split", ",", "mode", ",", "transform", ",", "**", "kwargs", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "self", ".", "root", ")", ",", "f\"Please put dataset in {self.root}\"", "\n", "self", ".", "image_paths", ",", "self", ".", "mask_paths", "=", "self", ".", "get_pairs", "(", "self", ".", "root", ",", "self", ".", "split", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.trans10k_with_fakemix.TransSegmentationWithFakeMix._class_to_index": [[24, 31], ["[].mean", "PIL.Image.fromarray", "PIL.Image.fromarray.max", "numpy.uinque", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean"], ["", "def", "_class_to_index", "(", "self", ",", "mask", ")", ":", "\n", "        ", "mask", "=", "np", ".", "array", "(", "mask", ")", "[", ":", ",", ":", ",", ":", "3", "]", ".", "mean", "(", "-", "1", ")", "# in case channel of mask is bigger than 1", "\n", "mask", "[", "mask", "==", "85.0", "]", "=", "1", "\n", "mask", "[", "mask", "==", "255.0", "]", "=", "2", "\n", "assert", "mask", ".", "max", "(", ")", "<=", "2", ",", "f\"error, undefined values in mask: {np.uinque(mask)}\"", "\n", "mask", "=", "Image", ".", "fromarray", "(", "mask", ")", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.trans10k_with_fakemix.TransSegmentationWithFakeMix.get_pairs": [[32, 69], ["os.listdir", "logging.info", "os.path.join", "os.path.join", "trans10k_with_fakemix.TransSegmentationWithFakeMix.get_pairs.get_path_pairs"], "methods", ["None"], ["", "def", "get_pairs", "(", "self", ",", "folder", ",", "split", "=", "'train'", ")", ":", "\n", "        ", "def", "get_path_pairs", "(", "img_folder", ",", "mask_folder", ")", ":", "\n", "            ", "img_paths", "=", "[", "]", "\n", "mask_paths", "=", "[", "]", "\n", "imgs", "=", "os", ".", "listdir", "(", "img_folder", ")", "\n", "\n", "for", "imgname", "in", "imgs", ":", "\n", "                ", "imgpath", "=", "os", ".", "path", ".", "join", "(", "img_folder", ",", "imgname", ")", "\n", "maskname", "=", "imgname", ".", "replace", "(", "'.jpg'", ",", "'_mask.png'", ")", "\n", "maskpath", "=", "os", ".", "path", ".", "join", "(", "mask_folder", ",", "maskname", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "imgpath", ")", "and", "os", ".", "path", ".", "isfile", "(", "maskpath", ")", ":", "\n", "                    ", "img_paths", ".", "append", "(", "imgpath", ")", "\n", "mask_paths", ".", "append", "(", "maskpath", ")", "\n", "", "else", ":", "\n", "                    ", "logging", ".", "info", "(", "'cannot find the mask or image:'", ",", "imgpath", ",", "maskpath", ")", "\n", "", "", "logging", ".", "info", "(", "'Found {} images in the folder {}'", ".", "format", "(", "len", "(", "img_paths", ")", ",", "img_folder", ")", ")", "\n", "return", "img_paths", ",", "mask_paths", "\n", "\n", "", "if", "split", "==", "'train'", ":", "\n", "            ", "img_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "split", ",", "'images'", ")", "\n", "mask_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "split", ",", "'masks'", ")", "\n", "img_paths", ",", "mask_paths", "=", "get_path_pairs", "(", "img_folder", ",", "mask_folder", ")", "\n", "", "else", ":", "\n", "            ", "assert", "split", "==", "'validation'", "or", "split", "==", "'test'", "\n", "easy_img_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "split", ",", "'easy'", ",", "'images'", ")", "\n", "easy_mask_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "split", ",", "'easy'", ",", "'masks'", ")", "\n", "hard_img_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "split", ",", "'hard'", ",", "'images'", ")", "\n", "hard_mask_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "split", ",", "'hard'", ",", "'masks'", ")", "\n", "easy_img_paths", ",", "easy_mask_paths", "=", "get_path_pairs", "(", "easy_img_folder", ",", "easy_mask_folder", ")", "\n", "hard_img_paths", ",", "hard_mask_paths", "=", "get_path_pairs", "(", "hard_img_folder", ",", "hard_mask_folder", ")", "\n", "easy_img_paths", ".", "extend", "(", "hard_img_paths", ")", "\n", "easy_mask_paths", ".", "extend", "(", "hard_mask_paths", ")", "\n", "img_paths", "=", "easy_img_paths", "\n", "mask_paths", "=", "easy_mask_paths", "\n", "", "assert", "len", "(", "img_paths", ")", "==", "len", "(", "mask_paths", ")", ",", "\"error, the count of images and the count of masks does not match!\"", "\n", "assert", "len", "(", "img_paths", ")", ">", "0", ",", "\"error, the count of images is 0\"", "\n", "return", "img_paths", ",", "mask_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.trans10k_with_fakemix.TransSegmentationWithFakeMix.__getitem__": [[70, 100], ["PIL.Image.open().convert", "PIL.Image.open", "trans10k_with_fakemix.TransSegmentationWithFakeMix._class_to_index", "trans10k_with_fakemix.TransSegmentationWithFakeMix.get_boundary", "trans10k_with_fakemix.TransSegmentationWithFakeMix._gen_fake_bound", "torch.LongTensor", "trans10k_with_fakemix.TransSegmentationWithFakeMix._sync_transform", "numpy.array().astype", "PIL.Image.open", "trans10k_with_fakemix.TransSegmentationWithFakeMix.transform", "os.path.basename", "trans10k_with_fakemix.TransSegmentationWithFakeMix._val_sync_transform", "trans10k_with_fakemix.TransSegmentationWithFakeMix.transform", "trans10k_with_fakemix.TransSegmentationWithFakeMix._img_transform", "trans10k_with_fakemix.TransSegmentationWithFakeMix._mask_transform", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.trans10k_with_fakemix.TransSegmentationWithFakeMix._class_to_index", "home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.trans10k_with_fakemix.TransSegmentationWithFakeMix.get_boundary", "home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.trans10k_with_fakemix.TransSegmentationWithFakeMix._gen_fake_bound", "home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.seg_data_base.SegmentationDataset._sync_transform", "home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.seg_data_base.SegmentationDataset._val_sync_transform", "home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.seg_data_base.SegmentationDataset._img_transform", "home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.trans10k_with_fakemix.TransSegmentationWithFakeMix._mask_transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "self", ".", "image_paths", "[", "index", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "if", "self", ".", "mode", "==", "'test'", ":", "\n", "            ", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "                ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "return", "img", ",", "os", ".", "path", ".", "basename", "(", "self", ".", "image_paths", "[", "index", "]", ")", "\n", "\n", "", "mask", "=", "Image", ".", "open", "(", "self", ".", "mask_paths", "[", "index", "]", ")", "\n", "mask", "=", "self", ".", "_class_to_index", "(", "mask", ")", "\n", "\n", "# synchrosized transform", "\n", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "img", ",", "mask", "=", "self", ".", "_sync_transform", "(", "img", ",", "mask", ")", "\n", "", "elif", "self", ".", "mode", "==", "'val'", ":", "\n", "            ", "img", ",", "mask", "=", "self", ".", "_val_sync_transform", "(", "img", ",", "mask", ")", "\n", "", "else", ":", "\n", "            ", "assert", "self", ".", "mode", "==", "'testval'", "\n", "img", ",", "mask", "=", "self", ".", "_img_transform", "(", "img", ")", ",", "self", ".", "_mask_transform", "(", "mask", ")", "\n", "\n", "", "boundary", "=", "self", ".", "get_boundary", "(", "mask", ")", "\n", "boundary_move", ",", "boundary_content_move", "=", "self", ".", "_gen_fake_bound", "(", "img", ",", "boundary", ")", "\n", "boundary", "=", "torch", ".", "LongTensor", "(", "np", ".", "array", "(", "boundary", ")", ".", "astype", "(", "'int32'", ")", ")", "\n", "\n", "# general resize, normalize and toTensor", "\n", "if", "(", "self", ".", "mode", "==", "'val'", ")", ":", "\n", "            ", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "                ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "", "return", "img", ",", "mask", ",", "boundary", ",", "self", ".", "image_paths", "[", "index", "]", ",", "boundary_move", ",", "boundary_content_move", "# img:un_transformed, array. mask: tensor. boundary:tensor. boundary_move:array, boundary_content_move:array", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.trans10k_with_fakemix.TransSegmentationWithFakeMix._mask_transform": [[101, 103], ["torch.LongTensor", "numpy.array().astype", "numpy.array"], "methods", ["None"], ["", "def", "_mask_transform", "(", "self", ",", "mask", ")", ":", "\n", "        ", "return", "torch", ".", "LongTensor", "(", "np", ".", "array", "(", "mask", ")", ".", "astype", "(", "'int32'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.trans10k_with_fakemix.TransSegmentationWithFakeMix._gen_fake_bound": [[104, 123], ["random.randint", "random.randint", "numpy.float32", "cv2.warpAffine", "cv2.warpAffine"], "methods", ["None"], ["", "def", "_gen_fake_bound", "(", "self", ",", "img", ",", "boundary", ")", ":", "\n", "        ", "'''\n        Input shape:\n                   img: [512, 512, 3]\n                   boundary: [512, 512]\n        Input values:\n                   img: [0, 255]\n                   boundary: {0, 1} \n        '''", "\n", "boundary", "=", "boundary", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "boundary_content", "=", "boundary", "*", "img", "\n", "\n", "dx", "=", "random", ".", "randint", "(", "-", "1", "*", "self", ".", "base_size", "*", "cfg", ".", "TRAIN", ".", "FAKE_BOUNDARY_DISTANCE_ALPHA", "//", "cfg", ".", "TRAIN", ".", "FAKE_BOUNDARY_DISTANCE_BETA", ",", "self", ".", "base_size", "*", "cfg", ".", "TRAIN", ".", "FAKE_BOUNDARY_DISTANCE_ALPHA", "//", "cfg", ".", "TRAIN", ".", "FAKE_BOUNDARY_DISTANCE_BETA", ")", "\n", "dy", "=", "random", ".", "randint", "(", "-", "1", "*", "self", ".", "base_size", "*", "cfg", ".", "TRAIN", ".", "FAKE_BOUNDARY_DISTANCE_ALPHA", "//", "cfg", ".", "TRAIN", ".", "FAKE_BOUNDARY_DISTANCE_BETA", ",", "self", ".", "base_size", "*", "cfg", ".", "TRAIN", ".", "FAKE_BOUNDARY_DISTANCE_ALPHA", "//", "cfg", ".", "TRAIN", ".", "FAKE_BOUNDARY_DISTANCE_BETA", ")", "\n", "move_matrix", "=", "np", ".", "float32", "(", "[", "[", "1", ",", "0", ",", "dx", "]", ",", "[", "0", ",", "1", ",", "dy", "]", "]", ")", "\n", "\n", "boundary_move", "=", "cv2", ".", "warpAffine", "(", "boundary", ",", "move_matrix", ",", "(", "self", ".", "base_size", ",", "self", ".", "base_size", ")", ")", "\n", "boundary_content_move", "=", "cv2", ".", "warpAffine", "(", "boundary_content", ",", "move_matrix", ",", "(", "self", ".", "base_size", ",", "self", ".", "base_size", ")", ")", "\n", "return", "boundary_move", ",", "boundary_content_move", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.trans10k_with_fakemix.TransSegmentationWithFakeMix.__len__": [[124, 126], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "image_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.trans10k_with_fakemix.TransSegmentationWithFakeMix.get_boundary": [[127, 133], ["mask.data.numpy().astype", "cv2.findContours", "numpy.zeros_like", "cv2.drawContours", "mask.data.numpy"], "methods", ["None"], ["", "def", "get_boundary", "(", "self", ",", "mask", ",", "thicky", "=", "8", ")", ":", "\n", "        ", "tmp", "=", "mask", ".", "data", ".", "numpy", "(", ")", ".", "astype", "(", "'uint8'", ")", "\n", "contour", ",", "_", "=", "cv2", ".", "findContours", "(", "tmp", ",", "cv2", ".", "RETR_TREE", ",", "cv2", ".", "CHAIN_APPROX_SIMPLE", ")", "\n", "boundary", "=", "np", ".", "zeros_like", "(", "tmp", ")", "\n", "boundary", "=", "cv2", ".", "drawContours", "(", "boundary", ",", "contour", ",", "-", "1", ",", "1", ",", "thicky", ")", "\n", "return", "boundary", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.trans10k_with_fakemix.TransSegmentationWithFakeMix.pred_offset": [[134, 137], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "pred_offset", "(", "self", ")", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.trans10k_with_fakemix.TransSegmentationWithFakeMix.classes": [[138, 142], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "classes", "(", "self", ")", ":", "\n", "        ", "\"\"\"Category names.\"\"\"", "\n", "return", "(", "'background'", ",", "'things'", ",", "'stuff'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.__init__.get_segmentation_dataset": [[25, 28], ["name.lower"], "function", ["None"], []], "home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.utils.gen_bar_updater": [[8, 18], ["torch.utils.model_zoo.tqdm", "torch.utils.model_zoo.tqdm.update"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.utils.score.SegmentationMetric.update"], ["def", "gen_bar_updater", "(", ")", ":", "\n", "    ", "pbar", "=", "tqdm", "(", "total", "=", "None", ")", "\n", "\n", "def", "bar_update", "(", "count", ",", "block_size", ",", "total_size", ")", ":", "\n", "        ", "if", "pbar", ".", "total", "is", "None", "and", "total_size", ":", "\n", "            ", "pbar", ".", "total", "=", "total_size", "\n", "", "progress_bytes", "=", "count", "*", "block_size", "\n", "pbar", ".", "update", "(", "progress_bytes", "-", "pbar", ".", "n", ")", "\n", "\n", "", "return", "bar_update", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.utils.check_integrity": [[19, 33], ["hashlib.md5", "hashlib.md5.hexdigest", "os.path.isfile", "open", "iter", "hashlib.md5.update", "f.read"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.utils.score.SegmentationMetric.update"], ["", "def", "check_integrity", "(", "fpath", ",", "md5", "=", "None", ")", ":", "\n", "    ", "if", "md5", "is", "None", ":", "\n", "        ", "return", "True", "\n", "", "if", "not", "os", ".", "path", ".", "isfile", "(", "fpath", ")", ":", "\n", "        ", "return", "False", "\n", "", "md5o", "=", "hashlib", ".", "md5", "(", ")", "\n", "with", "open", "(", "fpath", ",", "'rb'", ")", "as", "f", ":", "\n", "# read in 1MB chunks", "\n", "        ", "for", "chunk", "in", "iter", "(", "lambda", ":", "f", ".", "read", "(", "1024", "*", "1024", ")", ",", "b''", ")", ":", "\n", "            ", "md5o", ".", "update", "(", "chunk", ")", "\n", "", "", "md5c", "=", "md5o", ".", "hexdigest", "(", ")", "\n", "if", "md5c", "!=", "md5", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.utils.makedir_exist_ok": [[34, 42], ["os.makedirs"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.utils.filesystem.makedirs"], ["", "def", "makedir_exist_ok", "(", "dirpath", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "dirpath", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "        ", "if", "e", ".", "errno", "==", "errno", ".", "EEXIST", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.utils.download_url": [[43, 65], ["os.path.expanduser", "os.path.join", "utils.makedir_exist_ok", "os.path.basename", "os.path.isfile", "utils.check_integrity", "print", "print", "six.moves.urllib.request.urlretrieve", "utils.gen_bar_updater", "url.replace.replace", "print", "six.moves.urllib.request.urlretrieve", "utils.gen_bar_updater"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.utils.makedir_exist_ok", "home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.utils.check_integrity", "home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.utils.gen_bar_updater", "home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.utils.gen_bar_updater"], ["", "", "", "def", "download_url", "(", "url", ",", "root", ",", "filename", "=", "None", ",", "md5", "=", "None", ")", ":", "\n", "    ", "\"\"\"Download a file from a url and place it in root.\"\"\"", "\n", "root", "=", "os", ".", "path", ".", "expanduser", "(", "root", ")", "\n", "if", "not", "filename", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "basename", "(", "url", ")", "\n", "", "fpath", "=", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", "\n", "\n", "makedir_exist_ok", "(", "root", ")", "\n", "\n", "# downloads file", "\n", "if", "os", ".", "path", ".", "isfile", "(", "fpath", ")", "and", "check_integrity", "(", "fpath", ",", "md5", ")", ":", "\n", "        ", "print", "(", "'Using downloaded and verified file: '", "+", "fpath", ")", "\n", "", "else", ":", "\n", "        ", "try", ":", "\n", "            ", "print", "(", "'Downloading '", "+", "url", "+", "' to '", "+", "fpath", ")", "\n", "urllib", ".", "request", ".", "urlretrieve", "(", "url", ",", "fpath", ",", "reporthook", "=", "gen_bar_updater", "(", ")", ")", "\n", "", "except", "OSError", ":", "\n", "            ", "if", "url", "[", ":", "5", "]", "==", "'https'", ":", "\n", "                ", "url", "=", "url", ".", "replace", "(", "'https:'", ",", "'http:'", ")", "\n", "print", "(", "'Failed download. Trying https -> http instead.'", "\n", "' Downloading '", "+", "url", "+", "' to '", "+", "fpath", ")", "\n", "urllib", ".", "request", ".", "urlretrieve", "(", "url", ",", "fpath", ",", "reporthook", "=", "gen_bar_updater", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.utils.download_extract": [[66, 70], ["utils.download_url", "tarfile.open", "tar.extractall", "os.path.join"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.utils.download_url"], ["", "", "", "", "def", "download_extract", "(", "url", ",", "root", ",", "filename", ",", "md5", ")", ":", "\n", "    ", "download_url", "(", "url", ",", "root", ",", "filename", ",", "md5", ")", "\n", "with", "tarfile", ".", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", ",", "\"r\"", ")", "as", "tar", ":", "\n", "        ", "tar", ".", "extractall", "(", "path", "=", "root", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.trans10k_extra.TransExtraSegmentation.get_pairs": [[15, 33], ["trans10k_extra.TransExtraSegmentation.get_pairs.get_path_pairs"], "methods", ["None"], ["    ", "def", "get_pairs", "(", "self", ",", "folder", ",", "split", ")", ":", "\n", "        ", "def", "get_path_pairs", "(", "image_folder", ")", ":", "\n", "            ", "image_paths", "=", "[", "]", "\n", "images", "=", "os", ".", "listdir", "(", "image_folder", ")", "\n", "for", "imagename", "in", "images", ":", "\n", "                ", "imagepath", "=", "os", ".", "path", ".", "join", "(", "image_folder", ",", "imagename", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "imagepath", ")", ":", "\n", "                    ", "image_paths", ".", "append", "(", "imagepath", ")", "\n", "", "else", ":", "\n", "                    ", "logging", ".", "info", "(", "'cannot find the image:'", ",", "imagepath", ")", "\n", "\n", "", "", "logging", ".", "info", "(", "'Found {} images in the folder {}'", ".", "format", "(", "len", "(", "image_paths", ")", ",", "image_folder", ")", ")", "\n", "return", "image_paths", "\n", "\n", "", "image_folder", "=", "folder", "\n", "image_paths", "=", "get_path_pairs", "(", "image_folder", ")", "\n", "\n", "return", "image_paths", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.trans10k_extra.TransExtraSegmentation.__getitem__": [[35, 49], ["PIL.Image.open().convert", "PIL.Image.fromarray.max", "PIL.Image.fromarray", "trans10k_extra.TransExtraSegmentation._val_sync_transform", "numpy.zeros_like", "PIL.Image.fromarray.max", "trans10k_extra.TransExtraSegmentation.transform", "PIL.Image.open", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.dataloader.seg_data_base.SegmentationDataset._val_sync_transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "self", ".", "image_paths", "[", "index", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "mask", "=", "np", ".", "zeros_like", "(", "np", ".", "array", "(", "img", ")", ")", "[", ":", ",", ":", ",", "0", "]", "\n", "assert", "mask", ".", "max", "(", ")", "<=", "2", ",", "mask", ".", "max", "(", ")", "\n", "mask", "=", "Image", ".", "fromarray", "(", "mask", ")", "\n", "\n", "# synchrosized transform", "\n", "img", ",", "mask", "=", "self", ".", "_val_sync_transform", "(", "img", ",", "mask", ")", "\n", "\n", "# general resize, normalize and toTensor", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "return", "img", ",", "mask", ",", "self", ".", "image_paths", "[", "index", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.StableBCELoss.__init__": [[131, 133], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "StableBCELoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.StableBCELoss.forward": [[134, 138], ["loss.mean", "input.abs", "input.clamp", "neg_abs.exp"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "neg_abs", "=", "-", "input", ".", "abs", "(", ")", "\n", "loss", "=", "input", ".", "clamp", "(", "min", "=", "0", ")", "-", "input", "*", "target", "+", "(", "1", "+", "neg_abs", ".", "exp", "(", ")", ")", ".", "log", "(", ")", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.lovasz_grad": [[20, 33], ["len", "gt_sorted.sum", "gt_sorted.float().cumsum", "gt_sorted.float"], "function", ["None"], ["", "def", "lovasz_grad", "(", "gt_sorted", ")", ":", "\n", "    ", "\"\"\"\n    Computes gradient of the Lovasz extension w.r.t sorted errors\n    See Alg. 1 in paper\n    \"\"\"", "\n", "p", "=", "len", "(", "gt_sorted", ")", "\n", "gts", "=", "gt_sorted", ".", "sum", "(", ")", "\n", "intersection", "=", "gts", "-", "gt_sorted", ".", "float", "(", ")", ".", "cumsum", "(", "0", ")", "\n", "union", "=", "gts", "+", "(", "1", "-", "gt_sorted", ")", ".", "float", "(", ")", ".", "cumsum", "(", "0", ")", "\n", "jaccard", "=", "1.", "-", "intersection", "/", "union", "\n", "if", "p", ">", "1", ":", "# cover 1-pixel case", "\n", "        ", "jaccard", "[", "1", ":", "p", "]", "=", "jaccard", "[", "1", ":", "p", "]", "-", "jaccard", "[", "0", ":", "-", "1", "]", "\n", "", "return", "jaccard", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.iou_binary": [[35, 53], ["zip", "lovasz_losses.mean", "ious.append", "float", "float"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean"], ["", "def", "iou_binary", "(", "preds", ",", "labels", ",", "EMPTY", "=", "1.", ",", "ignore", "=", "None", ",", "per_image", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    IoU for foreground class\n    binary: 1 foreground, 0 background\n    \"\"\"", "\n", "if", "not", "per_image", ":", "\n", "        ", "preds", ",", "labels", "=", "(", "preds", ",", ")", ",", "(", "labels", ",", ")", "\n", "", "ious", "=", "[", "]", "\n", "for", "pred", ",", "label", "in", "zip", "(", "preds", ",", "labels", ")", ":", "\n", "        ", "intersection", "=", "(", "(", "label", "==", "1", ")", "&", "(", "pred", "==", "1", ")", ")", ".", "sum", "(", ")", "\n", "union", "=", "(", "(", "label", "==", "1", ")", "|", "(", "(", "pred", "==", "1", ")", "&", "(", "label", "!=", "ignore", ")", ")", ")", ".", "sum", "(", ")", "\n", "if", "not", "union", ":", "\n", "            ", "iou", "=", "EMPTY", "\n", "", "else", ":", "\n", "            ", "iou", "=", "float", "(", "intersection", ")", "/", "float", "(", "union", ")", "\n", "", "ious", ".", "append", "(", "iou", ")", "\n", "", "iou", "=", "mean", "(", "ious", ")", "# mean accross images if per_image", "\n", "return", "100", "*", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.iou": [[55, 75], ["zip", "range", "ious.append", "lovasz_losses.mean", "numpy.array", "zip", "iou.append", "iou.append", "float", "float"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean"], ["", "def", "iou", "(", "preds", ",", "labels", ",", "C", ",", "EMPTY", "=", "1.", ",", "ignore", "=", "None", ",", "per_image", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Array of IoU for each (non ignored) class\n    \"\"\"", "\n", "if", "not", "per_image", ":", "\n", "        ", "preds", ",", "labels", "=", "(", "preds", ",", ")", ",", "(", "labels", ",", ")", "\n", "", "ious", "=", "[", "]", "\n", "for", "pred", ",", "label", "in", "zip", "(", "preds", ",", "labels", ")", ":", "\n", "        ", "iou", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "C", ")", ":", "\n", "            ", "if", "i", "!=", "ignore", ":", "# The ignored label is sometimes among predicted classes (ENet - CityScapes)", "\n", "                ", "intersection", "=", "(", "(", "label", "==", "i", ")", "&", "(", "pred", "==", "i", ")", ")", ".", "sum", "(", ")", "\n", "union", "=", "(", "(", "label", "==", "i", ")", "|", "(", "(", "pred", "==", "i", ")", "&", "(", "label", "!=", "ignore", ")", ")", ")", ".", "sum", "(", ")", "\n", "if", "not", "union", ":", "\n", "                    ", "iou", ".", "append", "(", "EMPTY", ")", "\n", "", "else", ":", "\n", "                    ", "iou", ".", "append", "(", "float", "(", "intersection", ")", "/", "float", "(", "union", ")", ")", "\n", "", "", "", "ious", ".", "append", "(", "iou", ")", "\n", "", "ious", "=", "[", "mean", "(", "iou", ")", "for", "iou", "in", "zip", "(", "*", "ious", ")", "]", "# mean accross images if per_image", "\n", "return", "100", "*", "np", ".", "array", "(", "ious", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.lovasz_hinge": [[79, 93], ["lovasz_losses.mean", "lovasz_losses.lovasz_hinge_flat", "lovasz_losses.lovasz_hinge_flat", "lovasz_losses.flatten_binary_scores", "zip", "lovasz_losses.flatten_binary_scores", "log.unsqueeze", "lab.unsqueeze"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.lovasz_hinge_flat", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.lovasz_hinge_flat", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.flatten_binary_scores", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.flatten_binary_scores"], ["", "def", "lovasz_hinge", "(", "logits", ",", "labels", ",", "per_image", "=", "True", ",", "ignore", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Binary Lovasz hinge loss\n      logits: [B, H, W] Variable, logits at each pixel (between -\\infty and +\\infty)\n      labels: [B, H, W] Tensor, binary ground truth masks (0 or 1)\n      per_image: compute the loss per image instead of per batch\n      ignore: void class id\n    \"\"\"", "\n", "if", "per_image", ":", "\n", "        ", "loss", "=", "mean", "(", "lovasz_hinge_flat", "(", "*", "flatten_binary_scores", "(", "log", ".", "unsqueeze", "(", "0", ")", ",", "lab", ".", "unsqueeze", "(", "0", ")", ",", "ignore", ")", ")", "\n", "for", "log", ",", "lab", "in", "zip", "(", "logits", ",", "labels", ")", ")", "\n", "", "else", ":", "\n", "        ", "loss", "=", "lovasz_hinge_flat", "(", "*", "flatten_binary_scores", "(", "logits", ",", "labels", ",", "ignore", ")", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.lovasz_hinge_flat": [[95, 113], ["torch.sort", "torch.sort", "lovasz_losses.lovasz_grad", "torch.dot", "torch.dot", "len", "torch.relu", "torch.autograd.Variable", "logits.sum", "labels.float", "torch.autograd.Variable"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.lovasz_grad"], ["", "def", "lovasz_hinge_flat", "(", "logits", ",", "labels", ")", ":", "\n", "    ", "\"\"\"\n    Binary Lovasz hinge loss\n      logits: [P] Variable, logits at each prediction (between -\\infty and +\\infty)\n      labels: [P] Tensor, binary ground truth labels (0 or 1)\n      ignore: label to ignore\n    \"\"\"", "\n", "if", "len", "(", "labels", ")", "==", "0", ":", "\n", "# only void pixels, the gradients should be 0", "\n", "        ", "return", "logits", ".", "sum", "(", ")", "*", "0.", "\n", "", "signs", "=", "2.", "*", "labels", ".", "float", "(", ")", "-", "1.", "\n", "errors", "=", "(", "1.", "-", "logits", "*", "Variable", "(", "signs", ")", ")", "\n", "errors_sorted", ",", "perm", "=", "torch", ".", "sort", "(", "errors", ",", "dim", "=", "0", ",", "descending", "=", "True", ")", "\n", "perm", "=", "perm", ".", "data", "\n", "gt_sorted", "=", "labels", "[", "perm", "]", "\n", "grad", "=", "lovasz_grad", "(", "gt_sorted", ")", "\n", "loss", "=", "torch", ".", "dot", "(", "F", ".", "relu", "(", "errors_sorted", ")", ",", "Variable", "(", "grad", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.flatten_binary_scores": [[115, 128], ["scores.view.view", "labels.view.view"], "function", ["None"], ["", "def", "flatten_binary_scores", "(", "scores", ",", "labels", ",", "ignore", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Flattens predictions in the batch (binary case)\n    Remove labels equal to 'ignore'\n    \"\"\"", "\n", "scores", "=", "scores", ".", "view", "(", "-", "1", ")", "\n", "labels", "=", "labels", ".", "view", "(", "-", "1", ")", "\n", "if", "ignore", "is", "None", ":", "\n", "        ", "return", "scores", ",", "labels", "\n", "", "valid", "=", "(", "labels", "!=", "ignore", ")", "\n", "vscores", "=", "scores", "[", "valid", "]", "\n", "vlabels", "=", "labels", "[", "valid", "]", "\n", "return", "vscores", ",", "vlabels", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.binary_xloss": [[140, 150], ["lovasz_losses.flatten_binary_scores", "lovasz_losses.StableBCELoss", "torch.autograd.Variable", "labels.float"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.flatten_binary_scores"], ["", "", "def", "binary_xloss", "(", "logits", ",", "labels", ",", "ignore", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Binary Cross entropy loss\n      logits: [B, H, W] Variable, logits at each pixel (between -\\infty and +\\infty)\n      labels: [B, H, W] Tensor, binary ground truth masks (0 or 1)\n      ignore: void class id\n    \"\"\"", "\n", "logits", ",", "labels", "=", "flatten_binary_scores", "(", "logits", ",", "labels", ",", "ignore", ")", "\n", "loss", "=", "StableBCELoss", "(", ")", "(", "logits", ",", "Variable", "(", "labels", ".", "float", "(", ")", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.lovasz_softmax": [[155, 171], ["lovasz_losses.mean", "lovasz_losses.lovasz_softmax_flat", "lovasz_losses.lovasz_softmax_flat", "lovasz_losses.flatten_probas", "zip", "lovasz_losses.flatten_probas", "prob.unsqueeze", "lab.unsqueeze"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.lovasz_softmax_flat", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.lovasz_softmax_flat", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.flatten_probas", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.flatten_probas"], ["", "def", "lovasz_softmax", "(", "probas", ",", "labels", ",", "classes", "=", "'present'", ",", "per_image", "=", "False", ",", "ignore", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Multi-class Lovasz-Softmax loss\n      probas: [B, C, H, W] Variable, class probabilities at each prediction (between 0 and 1).\n              Interpreted as binary (sigmoid) output with outputs of size [B, H, W].\n      labels: [B, H, W] Tensor, ground truth labels (between 0 and C - 1)\n      classes: 'all' for all, 'present' for classes present in labels, or a list of classes to average.\n      per_image: compute the loss per image instead of per batch\n      ignore: void class labels\n    \"\"\"", "\n", "if", "per_image", ":", "\n", "        ", "loss", "=", "mean", "(", "lovasz_softmax_flat", "(", "*", "flatten_probas", "(", "prob", ".", "unsqueeze", "(", "0", ")", ",", "lab", ".", "unsqueeze", "(", "0", ")", ",", "ignore", ")", ",", "classes", "=", "classes", ")", "\n", "for", "prob", ",", "lab", "in", "zip", "(", "probas", ",", "labels", ")", ")", "\n", "", "else", ":", "\n", "        ", "loss", "=", "lovasz_softmax_flat", "(", "*", "flatten_probas", "(", "probas", ",", "labels", ",", "ignore", ")", ",", "classes", "=", "classes", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.lovasz_softmax_flat": [[173, 202], ["probas.size", "lovasz_losses.mean", "probas.numel", "list", "torch.sort", "torch.sort", "losses.append", "range", "torch.dot", "torch.dot", "fg.sum", "len", "ValueError", "torch.autograd.Variable", "torch.autograd.Variable", "lovasz_losses.lovasz_grad"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.lovasz_grad"], ["", "def", "lovasz_softmax_flat", "(", "probas", ",", "labels", ",", "classes", "=", "'present'", ")", ":", "\n", "    ", "\"\"\"\n    Multi-class Lovasz-Softmax loss\n      probas: [P, C] Variable, class probabilities at each prediction (between 0 and 1)\n      labels: [P] Tensor, ground truth labels (between 0 and C - 1)\n      classes: 'all' for all, 'present' for classes present in labels, or a list of classes to average.\n    \"\"\"", "\n", "if", "probas", ".", "numel", "(", ")", "==", "0", ":", "\n", "# only void pixels, the gradients should be 0", "\n", "        ", "return", "probas", "*", "0.", "\n", "", "C", "=", "probas", ".", "size", "(", "1", ")", "\n", "losses", "=", "[", "]", "\n", "class_to_sum", "=", "list", "(", "range", "(", "C", ")", ")", "if", "classes", "in", "[", "'all'", ",", "'present'", "]", "else", "classes", "\n", "for", "c", "in", "class_to_sum", ":", "\n", "        ", "fg", "=", "(", "labels", "==", "c", ")", ".", "float", "(", ")", "# foreground for class c", "\n", "if", "classes", "==", "'present'", "and", "fg", ".", "sum", "(", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "if", "C", "==", "1", ":", "\n", "            ", "if", "len", "(", "classes", ")", ">", "1", ":", "\n", "                ", "raise", "ValueError", "(", "'Sigmoid output possible only with 1 class'", ")", "\n", "", "class_pred", "=", "probas", "[", ":", ",", "0", "]", "\n", "", "else", ":", "\n", "            ", "class_pred", "=", "probas", "[", ":", ",", "c", "]", "\n", "", "errors", "=", "(", "Variable", "(", "fg", ")", "-", "class_pred", ")", ".", "abs", "(", ")", "\n", "errors_sorted", ",", "perm", "=", "torch", ".", "sort", "(", "errors", ",", "0", ",", "descending", "=", "True", ")", "\n", "perm", "=", "perm", ".", "data", "\n", "fg_sorted", "=", "fg", "[", "perm", "]", "\n", "losses", ".", "append", "(", "torch", ".", "dot", "(", "errors_sorted", ",", "Variable", "(", "lovasz_grad", "(", "fg_sorted", ")", ")", ")", ")", "\n", "", "return", "mean", "(", "losses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.flatten_probas": [[204, 221], ["probas.view.size", "probas.view.permute().contiguous().view", "labels.view.view", "probas.view.dim", "probas.view.size", "probas.view.view", "probas.view.permute().contiguous", "valid.nonzero().squeeze", "probas.view.permute", "valid.nonzero"], "function", ["None"], ["", "def", "flatten_probas", "(", "probas", ",", "labels", ",", "ignore", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Flattens predictions in the batch\n    \"\"\"", "\n", "if", "probas", ".", "dim", "(", ")", "==", "3", ":", "\n", "# assumes output of a sigmoid layer", "\n", "        ", "B", ",", "H", ",", "W", "=", "probas", ".", "size", "(", ")", "\n", "probas", "=", "probas", ".", "view", "(", "B", ",", "1", ",", "H", ",", "W", ")", "\n", "", "B", ",", "C", ",", "H", ",", "W", "=", "probas", ".", "size", "(", ")", "\n", "probas", "=", "probas", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "C", ")", "# B * H * W, C = P, C", "\n", "labels", "=", "labels", ".", "view", "(", "-", "1", ")", "\n", "if", "ignore", "is", "None", ":", "\n", "        ", "return", "probas", ",", "labels", "\n", "", "valid", "=", "(", "labels", "!=", "ignore", ")", "\n", "vprobas", "=", "probas", "[", "valid", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "]", "\n", "vlabels", "=", "labels", "[", "valid", "]", "\n", "return", "vprobas", ",", "vlabels", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.xloss": [[223, 228], ["torch.cross_entropy", "torch.autograd.Variable"], "function", ["None"], ["", "def", "xloss", "(", "logits", ",", "labels", ",", "ignore", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Cross entropy loss\n    \"\"\"", "\n", "return", "F", ".", "cross_entropy", "(", "logits", ",", "Variable", "(", "labels", ")", ",", "ignore_index", "=", "255", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.isnan": [[231, 233], ["None"], "function", ["None"], ["", "def", "isnan", "(", "x", ")", ":", "\n", "    ", "return", "x", "!=", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean": [[235, 254], ["iter", "enumerate", "ifilterfalse", "next", "ValueError", "lovasz_losses.iou"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.iou"], ["", "def", "mean", "(", "l", ",", "ignore_nan", "=", "False", ",", "empty", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    nanmean compatible with generators.\n    \"\"\"", "\n", "l", "=", "iter", "(", "l", ")", "\n", "if", "ignore_nan", ":", "\n", "        ", "l", "=", "ifilterfalse", "(", "isnan", ",", "l", ")", "\n", "", "try", ":", "\n", "        ", "n", "=", "1", "\n", "acc", "=", "next", "(", "l", ")", "\n", "", "except", "StopIteration", ":", "\n", "        ", "if", "empty", "==", "'raise'", ":", "\n", "            ", "raise", "ValueError", "(", "'Empty mean'", ")", "\n", "", "return", "empty", "\n", "", "for", "n", ",", "v", "in", "enumerate", "(", "l", ",", "2", ")", ":", "\n", "        ", "acc", "+=", "v", "\n", "", "if", "n", "==", "1", ":", "\n", "        ", "return", "acc", "\n", "", "return", "acc", "/", "n", "\n", "", ""]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.TranslabLoss.__init__": [[19, 23], ["torch.CrossEntropyLoss.__init__"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "aux", "=", "True", ",", "aux_weight", "=", "0.2", ",", "ignore_index", "=", "-", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TranslabLoss", ",", "self", ")", ".", "__init__", "(", "ignore_index", "=", "ignore_index", ")", "\n", "self", ".", "aux", "=", "aux", "\n", "self", ".", "aux_weight", "=", "aux_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.TranslabLoss._aux_forward": [[24, 32], ["tuple", "super().forward", "range", "len", "super().forward"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.DiceLoss.forward", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.DiceLoss.forward"], ["", "def", "_aux_forward", "(", "self", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "*", "preds", ",", "target", "=", "tuple", "(", "inputs", ")", "\n", "\n", "loss", "=", "super", "(", "TranslabLoss", ",", "self", ")", ".", "forward", "(", "preds", "[", "0", "]", ",", "target", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "preds", ")", ")", ":", "\n", "            ", "aux_loss", "=", "super", "(", "TranslabLoss", ",", "self", ")", ".", "forward", "(", "preds", "[", "i", "]", ",", "target", ")", "\n", "loss", "+=", "self", ".", "aux_weight", "*", "aux_loss", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.TranslabLoss._multiple_forward": [[33, 39], ["tuple", "super().forward", "range", "len", "super().forward"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.DiceLoss.forward", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.DiceLoss.forward"], ["", "def", "_multiple_forward", "(", "self", ",", "*", "inputs", ")", ":", "\n", "        ", "*", "preds", ",", "target", "=", "tuple", "(", "inputs", ")", "\n", "loss", "=", "super", "(", "TranslabLoss", ",", "self", ")", ".", "forward", "(", "preds", "[", "0", "]", ",", "target", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "preds", ")", ")", ":", "\n", "            ", "loss", "+=", "super", "(", "TranslabLoss", ",", "self", ")", ".", "forward", "(", "preds", "[", "i", "]", ",", "target", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.TranslabLoss.forward": [[40, 46], ["tuple", "tuple", "dict", "list", "super().forward"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.DiceLoss.forward"], ["", "def", "forward", "(", "self", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "preds", ",", "target", "=", "tuple", "(", "inputs", ")", "\n", "inputs", "=", "tuple", "(", "list", "(", "preds", ")", "+", "[", "target", "]", ")", "\n", "\n", "loss", "=", "dict", "(", "loss", "=", "super", "(", "TranslabLoss", ",", "self", ")", ".", "forward", "(", "*", "inputs", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.MixSoftmaxCrossEntropyLoss.__init__": [[48, 52], ["torch.CrossEntropyLoss.__init__"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "aux", "=", "True", ",", "aux_weight", "=", "0.2", ",", "ignore_index", "=", "-", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MixSoftmaxCrossEntropyLoss", ",", "self", ")", ".", "__init__", "(", "ignore_index", "=", "ignore_index", ")", "\n", "self", ".", "aux", "=", "aux", "\n", "self", ".", "aux_weight", "=", "aux_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.MixSoftmaxCrossEntropyLoss._aux_forward": [[53, 61], ["tuple", "super().forward", "range", "len", "super().forward"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.DiceLoss.forward", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.DiceLoss.forward"], ["", "def", "_aux_forward", "(", "self", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "*", "preds", ",", "target", "=", "tuple", "(", "inputs", ")", "\n", "\n", "loss", "=", "super", "(", "MixSoftmaxCrossEntropyLoss", ",", "self", ")", ".", "forward", "(", "preds", "[", "0", "]", ",", "target", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "preds", ")", ")", ":", "\n", "            ", "aux_loss", "=", "super", "(", "MixSoftmaxCrossEntropyLoss", ",", "self", ")", ".", "forward", "(", "preds", "[", "i", "]", ",", "target", ")", "\n", "loss", "+=", "self", ".", "aux_weight", "*", "aux_loss", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.MixSoftmaxCrossEntropyLoss._multiple_forward": [[62, 68], ["tuple", "super().forward", "range", "len", "super().forward"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.DiceLoss.forward", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.DiceLoss.forward"], ["", "def", "_multiple_forward", "(", "self", ",", "*", "inputs", ")", ":", "\n", "        ", "*", "preds", ",", "target", "=", "tuple", "(", "inputs", ")", "\n", "loss", "=", "super", "(", "MixSoftmaxCrossEntropyLoss", ",", "self", ")", ".", "forward", "(", "preds", "[", "0", "]", ",", "target", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "preds", ")", ")", ":", "\n", "            ", "loss", "+=", "super", "(", "MixSoftmaxCrossEntropyLoss", ",", "self", ")", ".", "forward", "(", "preds", "[", "i", "]", ",", "target", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.MixSoftmaxCrossEntropyLoss.forward": [[69, 78], ["tuple", "tuple", "dict", "list", "len", "dict", "dict", "loss.MixSoftmaxCrossEntropyLoss._aux_forward", "loss.MixSoftmaxCrossEntropyLoss._multiple_forward", "super().forward"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.DiceLoss._aux_forward", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.LovaszSoftmax._multiple_forward", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.DiceLoss.forward"], ["", "def", "forward", "(", "self", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "preds", ",", "target", "=", "tuple", "(", "inputs", ")", "\n", "inputs", "=", "tuple", "(", "list", "(", "preds", ")", "+", "[", "target", "]", ")", "\n", "if", "self", ".", "aux", ":", "\n", "            ", "return", "dict", "(", "loss", "=", "self", ".", "_aux_forward", "(", "*", "inputs", ")", ")", "\n", "", "elif", "len", "(", "preds", ")", ">", "1", ":", "\n", "            ", "return", "dict", "(", "loss", "=", "self", ".", "_multiple_forward", "(", "*", "inputs", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "dict", "(", "loss", "=", "super", "(", "MixSoftmaxCrossEntropyLoss", ",", "self", ")", ".", "forward", "(", "*", "inputs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.ICNetLoss.__init__": [[82, 85], ["torch.CrossEntropyLoss.__init__"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["def", "__init__", "(", "self", ",", "aux_weight", "=", "0.4", ",", "ignore_index", "=", "-", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ICNetLoss", ",", "self", ")", ".", "__init__", "(", "ignore_index", "=", "ignore_index", ")", "\n", "self", ".", "aux_weight", "=", "aux_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.ICNetLoss.forward": [[86, 101], ["tuple", "tuple", "tuple", "target.unsqueeze().float.unsqueeze().float.unsqueeze().float", "torch.interpolate().squeeze().long", "torch.interpolate().squeeze().long", "torch.interpolate().squeeze().long", "torch.interpolate().squeeze().long", "torch.interpolate().squeeze().long", "torch.interpolate().squeeze().long", "torch.interpolate().squeeze().long", "torch.interpolate().squeeze().long", "torch.interpolate().squeeze().long", "super().forward", "super().forward", "super().forward", "dict", "list", "target.unsqueeze().float.unsqueeze().float.unsqueeze", "torch.interpolate().squeeze", "torch.interpolate().squeeze", "torch.interpolate().squeeze", "torch.interpolate().squeeze", "torch.interpolate().squeeze", "torch.interpolate().squeeze", "torch.interpolate().squeeze", "torch.interpolate().squeeze", "torch.interpolate().squeeze", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "pred_sub4.size", "pred_sub8.size", "pred_sub16.size"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.DiceLoss.forward", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.DiceLoss.forward", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.DiceLoss.forward"], ["", "def", "forward", "(", "self", ",", "*", "inputs", ")", ":", "\n", "        ", "preds", ",", "target", "=", "tuple", "(", "inputs", ")", "\n", "inputs", "=", "tuple", "(", "list", "(", "preds", ")", "+", "[", "target", "]", ")", "\n", "\n", "pred", ",", "pred_sub4", ",", "pred_sub8", ",", "pred_sub16", ",", "target", "=", "tuple", "(", "inputs", ")", "\n", "# [batch, W, H] -> [batch, 1, W, H]", "\n", "target", "=", "target", ".", "unsqueeze", "(", "1", ")", ".", "float", "(", ")", "\n", "target_sub4", "=", "F", ".", "interpolate", "(", "target", ",", "pred_sub4", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", ".", "squeeze", "(", "1", ")", ".", "long", "(", ")", "\n", "target_sub8", "=", "F", ".", "interpolate", "(", "target", ",", "pred_sub8", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", ".", "squeeze", "(", "1", ")", ".", "long", "(", ")", "\n", "target_sub16", "=", "F", ".", "interpolate", "(", "target", ",", "pred_sub16", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", ".", "squeeze", "(", "\n", "1", ")", ".", "long", "(", ")", "\n", "loss1", "=", "super", "(", "ICNetLoss", ",", "self", ")", ".", "forward", "(", "pred_sub4", ",", "target_sub4", ")", "\n", "loss2", "=", "super", "(", "ICNetLoss", ",", "self", ")", ".", "forward", "(", "pred_sub8", ",", "target_sub8", ")", "\n", "loss3", "=", "super", "(", "ICNetLoss", ",", "self", ")", ".", "forward", "(", "pred_sub16", ",", "target_sub16", ")", "\n", "return", "dict", "(", "loss", "=", "loss1", "+", "loss2", "*", "self", ".", "aux_weight", "+", "loss3", "*", "self", ".", "aux_weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.OhemCrossEntropy2d.__init__": [[104, 116], ["torch.Module.__init__", "float", "int", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ignore_index", "=", "-", "1", ",", "thresh", "=", "0.7", ",", "min_kept", "=", "100000", ",", "use_weight", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "OhemCrossEntropy2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "self", ".", "thresh", "=", "float", "(", "thresh", ")", "\n", "self", ".", "min_kept", "=", "int", "(", "min_kept", ")", "\n", "if", "use_weight", ":", "\n", "            ", "weight", "=", "torch", ".", "FloatTensor", "(", "[", "0.8373", ",", "0.918", ",", "0.866", ",", "1.0345", ",", "1.0166", ",", "0.9969", ",", "0.9754", ",", "\n", "1.0489", ",", "0.8786", ",", "1.0023", ",", "0.9539", ",", "0.9843", ",", "1.1116", ",", "0.9037", ",", "1.0865", ",", "1.0955", ",", "\n", "1.0865", ",", "1.1529", ",", "1.0507", "]", ")", "\n", "self", ".", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "weight", "=", "weight", ",", "ignore_index", "=", "ignore_index", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "ignore_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.OhemCrossEntropy2d.forward": [[117, 148], ["pred.size", "target.view.view.view", "target.view.view.ne", "target.view.ne.sum", "torch.softmax", "torch.softmax", "torch.softmax", "prob.masked_fill_.masked_fill_.transpose().reshape", "target.view.view.masked_fill_", "target.view.view.view", "loss.OhemCrossEntropy2d.criterion", "target.view.ne.long", "print", "prob.masked_fill_.masked_fill_.transpose", "prob.masked_fill_.masked_fill_.masked_fill_", "mask_prob.le", "mask_prob.argsort", "mask_prob.le.long", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "len", "min", "len"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "n", ",", "c", ",", "h", ",", "w", "=", "pred", ".", "size", "(", ")", "\n", "target", "=", "target", ".", "view", "(", "-", "1", ")", "\n", "valid_mask", "=", "target", ".", "ne", "(", "self", ".", "ignore_index", ")", "\n", "target", "=", "target", "*", "valid_mask", ".", "long", "(", ")", "\n", "num_valid", "=", "valid_mask", ".", "sum", "(", ")", "\n", "\n", "prob", "=", "F", ".", "softmax", "(", "pred", ",", "dim", "=", "1", ")", "\n", "prob", "=", "prob", ".", "transpose", "(", "0", ",", "1", ")", ".", "reshape", "(", "c", ",", "-", "1", ")", "\n", "\n", "if", "self", ".", "min_kept", ">", "num_valid", ":", "\n", "            ", "print", "(", "\"Lables: {}\"", ".", "format", "(", "num_valid", ")", ")", "\n", "", "elif", "num_valid", ">", "0", ":", "\n", "# prob = prob.masked_fill_(1 - valid_mask, 1)", "\n", "            ", "prob", "=", "prob", ".", "masked_fill_", "(", "~", "valid_mask", ",", "1", ")", "\n", "mask_prob", "=", "prob", "[", "target", ",", "torch", ".", "arange", "(", "len", "(", "target", ")", ",", "dtype", "=", "torch", ".", "long", ")", "]", "\n", "threshold", "=", "self", ".", "thresh", "\n", "if", "self", ".", "min_kept", ">", "0", ":", "\n", "                ", "index", "=", "mask_prob", ".", "argsort", "(", ")", "\n", "threshold_index", "=", "index", "[", "min", "(", "len", "(", "index", ")", ",", "self", ".", "min_kept", ")", "-", "1", "]", "\n", "if", "mask_prob", "[", "threshold_index", "]", ">", "self", ".", "thresh", ":", "\n", "                    ", "threshold", "=", "mask_prob", "[", "threshold_index", "]", "\n", "", "", "kept_mask", "=", "mask_prob", ".", "le", "(", "threshold", ")", "\n", "valid_mask", "=", "valid_mask", "*", "kept_mask", "\n", "target", "=", "target", "*", "kept_mask", ".", "long", "(", ")", "\n", "\n", "# target = target.masked_fill_(1 - valid_mask, self.ignore_index)", "\n", "", "target", "=", "target", ".", "masked_fill_", "(", "~", "valid_mask", ",", "self", ".", "ignore_index", ")", "\n", "target", "=", "target", ".", "view", "(", "n", ",", "h", ",", "w", ")", "\n", "\n", "return", "self", ".", "criterion", "(", "pred", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.EncNetLoss.__init__": [[153, 161], ["torch.CrossEntropyLoss.__init__", "torch.BCELoss", "torch.BCELoss", "torch.BCELoss"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["def", "__init__", "(", "self", ",", "aux", "=", "False", ",", "aux_weight", "=", "0.4", ",", "weight", "=", "None", ",", "ignore_index", "=", "-", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "EncNetLoss", ",", "self", ")", ".", "__init__", "(", "weight", ",", "None", ",", "ignore_index", ")", "\n", "self", ".", "se_loss", "=", "cfg", ".", "MODEL", ".", "ENCNET", ".", "SE_LOSS", "\n", "self", ".", "se_weight", "=", "cfg", ".", "MODEL", ".", "ENCNET", ".", "SE_WEIGHT", "\n", "self", ".", "nclass", "=", "datasets", "[", "cfg", ".", "DATASET", ".", "NAME", "]", ".", "NUM_CLASS", "\n", "self", ".", "aux", "=", "aux", "\n", "self", ".", "aux_weight", "=", "aux_weight", "\n", "self", ".", "bceloss", "=", "nn", ".", "BCELoss", "(", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.EncNetLoss.forward": [[162, 185], ["tuple", "tuple", "super().forward", "list", "tuple", "super().forward", "super().forward", "dict", "tuple", "loss.EncNetLoss._get_batch_label_vector().type_as", "super().forward", "loss.EncNetLoss.bceloss", "dict", "tuple", "loss.EncNetLoss._get_batch_label_vector().type_as", "super().forward", "super().forward", "loss.EncNetLoss.bceloss", "dict", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "loss.EncNetLoss._get_batch_label_vector", "loss.EncNetLoss._get_batch_label_vector"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.DiceLoss.forward", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.DiceLoss.forward", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.DiceLoss.forward", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.DiceLoss.forward", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.DiceLoss.forward", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.DiceLoss.forward", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.EncNetLoss._get_batch_label_vector", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.EncNetLoss._get_batch_label_vector"], ["", "def", "forward", "(", "self", ",", "*", "inputs", ")", ":", "\n", "        ", "preds", ",", "target", "=", "tuple", "(", "inputs", ")", "\n", "inputs", "=", "tuple", "(", "list", "(", "preds", ")", "+", "[", "target", "]", ")", "\n", "if", "not", "self", ".", "se_loss", "and", "not", "self", ".", "aux", ":", "\n", "            ", "return", "super", "(", "EncNetLoss", ",", "self", ")", ".", "forward", "(", "*", "inputs", ")", "\n", "", "elif", "not", "self", ".", "se_loss", ":", "\n", "            ", "pred1", ",", "pred2", ",", "target", "=", "tuple", "(", "inputs", ")", "\n", "loss1", "=", "super", "(", "EncNetLoss", ",", "self", ")", ".", "forward", "(", "pred1", ",", "target", ")", "\n", "loss2", "=", "super", "(", "EncNetLoss", ",", "self", ")", ".", "forward", "(", "pred2", ",", "target", ")", "\n", "return", "dict", "(", "loss", "=", "loss1", "+", "self", ".", "aux_weight", "*", "loss2", ")", "\n", "", "elif", "not", "self", ".", "aux", ":", "\n", "            ", "pred", ",", "se_pred", ",", "target", "=", "tuple", "(", "inputs", ")", "\n", "se_target", "=", "self", ".", "_get_batch_label_vector", "(", "target", ",", "nclass", "=", "self", ".", "nclass", ")", ".", "type_as", "(", "pred", ")", "\n", "loss1", "=", "super", "(", "EncNetLoss", ",", "self", ")", ".", "forward", "(", "pred", ",", "target", ")", "\n", "loss2", "=", "self", ".", "bceloss", "(", "torch", ".", "sigmoid", "(", "se_pred", ")", ",", "se_target", ")", "\n", "return", "dict", "(", "loss", "=", "loss1", "+", "self", ".", "se_weight", "*", "loss2", ")", "\n", "", "else", ":", "\n", "            ", "pred1", ",", "se_pred", ",", "pred2", ",", "target", "=", "tuple", "(", "inputs", ")", "\n", "se_target", "=", "self", ".", "_get_batch_label_vector", "(", "target", ",", "nclass", "=", "self", ".", "nclass", ")", ".", "type_as", "(", "pred1", ")", "\n", "loss1", "=", "super", "(", "EncNetLoss", ",", "self", ")", ".", "forward", "(", "pred1", ",", "target", ")", "\n", "loss2", "=", "super", "(", "EncNetLoss", ",", "self", ")", ".", "forward", "(", "pred2", ",", "target", ")", "\n", "loss3", "=", "self", ".", "bceloss", "(", "torch", ".", "sigmoid", "(", "se_pred", ")", ",", "se_target", ")", "\n", "return", "dict", "(", "loss", "=", "loss1", "+", "self", ".", "aux_weight", "*", "loss2", "+", "self", ".", "se_weight", "*", "loss3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.EncNetLoss._get_batch_label_vector": [[186, 198], ["target.size", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "range", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "target[].cpu().data.float", "target[].cpu"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_get_batch_label_vector", "(", "target", ",", "nclass", ")", ":", "\n", "# target is a 3D Variable BxHxW, output is 2D BxnClass", "\n", "        ", "batch", "=", "target", ".", "size", "(", "0", ")", "\n", "tvect", "=", "Variable", "(", "torch", ".", "zeros", "(", "batch", ",", "nclass", ")", ")", "\n", "for", "i", "in", "range", "(", "batch", ")", ":", "\n", "            ", "hist", "=", "torch", ".", "histc", "(", "target", "[", "i", "]", ".", "cpu", "(", ")", ".", "data", ".", "float", "(", ")", ",", "\n", "bins", "=", "nclass", ",", "min", "=", "0", ",", "\n", "max", "=", "nclass", "-", "1", ")", "\n", "vect", "=", "hist", ">", "0", "\n", "tvect", "[", "i", "]", "=", "vect", "\n", "", "return", "tvect", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.MixSoftmaxCrossEntropyOHEMLoss.__init__": [[201, 206], ["loss.OhemCrossEntropy2d.__init__", "torch.BCELoss", "torch.BCELoss", "torch.BCELoss"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "aux", "=", "False", ",", "aux_weight", "=", "0.4", ",", "weight", "=", "None", ",", "ignore_index", "=", "-", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MixSoftmaxCrossEntropyOHEMLoss", ",", "self", ")", ".", "__init__", "(", "ignore_index", "=", "ignore_index", ")", "\n", "self", ".", "aux", "=", "aux", "\n", "self", ".", "aux_weight", "=", "aux_weight", "\n", "self", ".", "bceloss", "=", "nn", ".", "BCELoss", "(", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.MixSoftmaxCrossEntropyOHEMLoss._aux_forward": [[207, 215], ["tuple", "super().forward.OhemCrossEntropy2d.forward", "range", "len", "super().forward.OhemCrossEntropy2d.forward"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.DiceLoss.forward", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.DiceLoss.forward"], ["", "def", "_aux_forward", "(", "self", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "*", "preds", ",", "target", "=", "tuple", "(", "inputs", ")", "\n", "\n", "loss", "=", "super", "(", "MixSoftmaxCrossEntropyOHEMLoss", ",", "self", ")", ".", "forward", "(", "preds", "[", "0", "]", ",", "target", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "preds", ")", ")", ":", "\n", "            ", "aux_loss", "=", "super", "(", "MixSoftmaxCrossEntropyOHEMLoss", ",", "self", ")", ".", "forward", "(", "preds", "[", "i", "]", ",", "target", ")", "\n", "loss", "+=", "self", ".", "aux_weight", "*", "aux_loss", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.MixSoftmaxCrossEntropyOHEMLoss.forward": [[216, 223], ["tuple", "tuple", "dict", "dict", "list", "loss.MixSoftmaxCrossEntropyOHEMLoss._aux_forward", "loss.OhemCrossEntropy2d.forward"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.DiceLoss._aux_forward", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.DiceLoss.forward"], ["", "def", "forward", "(", "self", ",", "*", "inputs", ")", ":", "\n", "        ", "preds", ",", "target", "=", "tuple", "(", "inputs", ")", "\n", "inputs", "=", "tuple", "(", "list", "(", "preds", ")", "+", "[", "target", "]", ")", "\n", "if", "self", ".", "aux", ":", "\n", "            ", "return", "dict", "(", "loss", "=", "self", ".", "_aux_forward", "(", "*", "inputs", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "dict", "(", "loss", "=", "super", "(", "MixSoftmaxCrossEntropyOHEMLoss", ",", "self", ")", ".", "forward", "(", "*", "inputs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.LovaszSoftmax.__init__": [[226, 231], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "aux", "=", "True", ",", "aux_weight", "=", "0.2", ",", "ignore_index", "=", "-", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "LovaszSoftmax", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "aux", "=", "aux", "\n", "self", ".", "aux_weight", "=", "aux_weight", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.LovaszSoftmax._aux_forward": [[232, 240], ["tuple", "lovasz_losses.lovasz_softmax", "range", "torch.softmax", "torch.softmax", "torch.softmax", "len", "lovasz_losses.lovasz_softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.lovasz_softmax", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.lovasz_softmax"], ["", "def", "_aux_forward", "(", "self", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "*", "preds", ",", "target", "=", "tuple", "(", "inputs", ")", "\n", "\n", "loss", "=", "lovasz_softmax", "(", "F", ".", "softmax", "(", "preds", "[", "0", "]", ",", "dim", "=", "1", ")", ",", "target", ",", "ignore", "=", "self", ".", "ignore_index", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "preds", ")", ")", ":", "\n", "            ", "aux_loss", "=", "lovasz_softmax", "(", "F", ".", "softmax", "(", "preds", "[", "i", "]", ",", "dim", "=", "1", ")", ",", "target", ",", "ignore", "=", "self", ".", "ignore_index", ")", "\n", "loss", "+=", "self", ".", "aux_weight", "*", "aux_loss", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.LovaszSoftmax._multiple_forward": [[241, 247], ["tuple", "super().forward", "range", "len", "super().forward"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.DiceLoss.forward", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.DiceLoss.forward"], ["", "def", "_multiple_forward", "(", "self", ",", "*", "inputs", ")", ":", "\n", "        ", "*", "preds", ",", "target", "=", "tuple", "(", "inputs", ")", "\n", "loss", "=", "super", "(", "MixSoftmaxCrossEntropyLoss", ",", "self", ")", ".", "forward", "(", "preds", "[", "0", "]", ",", "target", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "preds", ")", ")", ":", "\n", "            ", "loss", "+=", "super", "(", "MixSoftmaxCrossEntropyLoss", ",", "self", ")", ".", "forward", "(", "preds", "[", "i", "]", ",", "target", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.LovaszSoftmax.forward": [[248, 257], ["tuple", "tuple", "dict", "list", "len", "dict", "dict", "loss.LovaszSoftmax._aux_forward", "loss.LovaszSoftmax._multiple_forward", "super().forward"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.DiceLoss._aux_forward", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.LovaszSoftmax._multiple_forward", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.DiceLoss.forward"], ["", "def", "forward", "(", "self", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "preds", ",", "target", "=", "tuple", "(", "inputs", ")", "\n", "inputs", "=", "tuple", "(", "list", "(", "preds", ")", "+", "[", "target", "]", ")", "\n", "if", "self", ".", "aux", ":", "\n", "            ", "return", "dict", "(", "loss", "=", "self", ".", "_aux_forward", "(", "*", "inputs", ")", ")", "\n", "", "elif", "len", "(", "preds", ")", ">", "1", ":", "\n", "            ", "return", "dict", "(", "loss", "=", "self", ".", "_multiple_forward", "(", "*", "inputs", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "dict", "(", "loss", "=", "super", "(", "MixSoftmaxCrossEntropyLoss", ",", "self", ")", ".", "forward", "(", "*", "inputs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.FocalLoss.__init__": [[260, 271], ["torch.Module.__init__", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "alpha", "=", "0.5", ",", "gamma", "=", "2", ",", "weight", "=", "None", ",", "aux", "=", "True", ",", "aux_weight", "=", "0.2", ",", "ignore_index", "=", "-", "1", ",", "\n", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "weight", "=", "weight", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "self", ".", "aux", "=", "aux", "\n", "self", ".", "aux_weight", "=", "aux_weight", "\n", "self", ".", "size_average", "=", "size_average", "\n", "self", ".", "ce_fn", "=", "nn", ".", "CrossEntropyLoss", "(", "weight", "=", "self", ".", "weight", ",", "ignore_index", "=", "self", ".", "ignore_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.FocalLoss._aux_forward": [[272, 280], ["tuple", "loss.FocalLoss.FocalLoss._base_forward", "range", "len", "loss.FocalLoss.FocalLoss._base_forward"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.DiceLoss._base_forward", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.DiceLoss._base_forward"], ["", "def", "_aux_forward", "(", "self", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "*", "preds", ",", "target", "=", "tuple", "(", "inputs", ")", "\n", "\n", "loss", "=", "self", ".", "_base_forward", "(", "preds", "[", "0", "]", ",", "target", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "preds", ")", ")", ":", "\n", "            ", "aux_loss", "=", "self", ".", "_base_forward", "(", "preds", "[", "i", "]", ",", "target", ")", "\n", "loss", "+=", "self", ".", "aux_weight", "*", "aux_loss", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.FocalLoss._base_forward": [[281, 303], ["loss.FocalLoss.ce_fn", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "output.contiguous().view().squeeze.contiguous().view().squeeze.dim", "output.contiguous().view().squeeze.contiguous().view().squeeze.contiguous().view", "output.contiguous().view().squeeze.contiguous().view().squeeze.transpose", "output.contiguous().view().squeeze.contiguous().view().squeeze.contiguous().view().squeeze", "target.view.view.dim", "target.view.view.contiguous().view", "target.view.view.transpose", "target.view.view.contiguous().view().squeeze", "loss.mean", "loss.sum", "output.contiguous().view().squeeze.contiguous().view().squeeze.size", "output.contiguous().view().squeeze.contiguous().view().squeeze.size", "target.view.view.size", "target.view.view.size", "target.view.view.dim", "target.view.view.view", "target.view.view.view", "output.contiguous().view().squeeze.contiguous().view().squeeze.contiguous", "output.contiguous().view().squeeze.contiguous().view().squeeze.contiguous().view", "target.view.view.contiguous", "target.view.view.contiguous().view", "output.contiguous().view().squeeze.contiguous().view().squeeze.size", "target.view.view.size", "output.contiguous().view().squeeze.contiguous().view().squeeze.contiguous", "target.view.view.contiguous"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean"], ["", "def", "_base_forward", "(", "self", ",", "output", ",", "target", ")", ":", "\n", "\n", "        ", "if", "output", ".", "dim", "(", ")", ">", "2", ":", "\n", "            ", "output", "=", "output", ".", "contiguous", "(", ")", ".", "view", "(", "output", ".", "size", "(", "0", ")", ",", "output", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "output", "=", "output", ".", "transpose", "(", "1", ",", "2", ")", "\n", "output", "=", "output", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "output", ".", "size", "(", "2", ")", ")", ".", "squeeze", "(", ")", "\n", "", "if", "target", ".", "dim", "(", ")", "==", "4", ":", "\n", "            ", "target", "=", "target", ".", "contiguous", "(", ")", ".", "view", "(", "target", ".", "size", "(", "0", ")", ",", "target", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "target", "=", "target", ".", "transpose", "(", "1", ",", "2", ")", "\n", "target", "=", "target", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "target", ".", "size", "(", "2", ")", ")", ".", "squeeze", "(", ")", "\n", "", "elif", "target", ".", "dim", "(", ")", "==", "3", ":", "\n", "            ", "target", "=", "target", ".", "view", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "target", "=", "target", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n", "", "logpt", "=", "self", ".", "ce_fn", "(", "output", ",", "target", ")", "\n", "pt", "=", "torch", ".", "exp", "(", "-", "logpt", ")", "\n", "loss", "=", "(", "(", "1", "-", "pt", ")", "**", "self", ".", "gamma", ")", "*", "self", ".", "alpha", "*", "logpt", "\n", "if", "self", ".", "size_average", ":", "\n", "            ", "return", "loss", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "loss", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.FocalLoss.forward": [[304, 308], ["tuple", "tuple", "dict", "list", "loss.FocalLoss._aux_forward"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.DiceLoss._aux_forward"], ["", "", "def", "forward", "(", "self", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "preds", ",", "target", "=", "tuple", "(", "inputs", ")", "\n", "inputs", "=", "tuple", "(", "list", "(", "preds", ")", "+", "[", "target", "]", ")", "\n", "return", "dict", "(", "loss", "=", "self", ".", "_aux_forward", "(", "*", "inputs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.BinaryDiceLoss.__init__": [[324, 329], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["def", "__init__", "(", "self", ",", "smooth", "=", "1", ",", "p", "=", "2", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "super", "(", "BinaryDiceLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "smooth", "=", "smooth", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "reduction", "=", "reduction", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.BinaryDiceLoss.forward": [[330, 349], ["predict.contiguous().view.contiguous().view.contiguous().view", "target.contiguous().view.contiguous().view.contiguous().view", "valid_mask.contiguous().view.contiguous().view.contiguous().view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "dict", "predict.contiguous().view.contiguous().view.contiguous", "target.contiguous().view.contiguous().view.contiguous", "valid_mask.contiguous().view.contiguous().view.contiguous", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "loss.sum", "loss.mean", "Exception", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "predict.contiguous().view.contiguous().view.pow", "target.contiguous().view.contiguous().view.pow"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lovasz_losses.mean"], ["", "def", "forward", "(", "self", ",", "predict", ",", "target", ",", "valid_mask", ")", ":", "\n", "        ", "assert", "predict", ".", "shape", "[", "0", "]", "==", "target", ".", "shape", "[", "0", "]", ",", "\"predict & target batch size don't match\"", "\n", "predict", "=", "predict", ".", "contiguous", "(", ")", ".", "view", "(", "predict", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "target", "=", "target", ".", "contiguous", "(", ")", ".", "view", "(", "target", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "valid_mask", "=", "valid_mask", ".", "contiguous", "(", ")", ".", "view", "(", "valid_mask", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "num", "=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "predict", ",", "target", ")", "*", "valid_mask", ",", "dim", "=", "1", ")", "*", "2", "+", "self", ".", "smooth", "\n", "den", "=", "torch", ".", "sum", "(", "(", "predict", ".", "pow", "(", "self", ".", "p", ")", "+", "target", ".", "pow", "(", "self", ".", "p", ")", ")", "*", "valid_mask", ",", "dim", "=", "1", ")", "+", "self", ".", "smooth", "\n", "\n", "loss", "=", "1", "-", "num", "/", "den", "\n", "\n", "if", "self", ".", "reduction", "==", "'mean'", ":", "\n", "            ", "return", "dict", "(", "loss", "=", "loss", ".", "mean", "(", ")", ")", "\n", "", "elif", "self", ".", "reduction", "==", "'sum'", ":", "\n", "            ", "return", "loss", ".", "sum", "(", ")", "\n", "", "elif", "self", ".", "reduction", "==", "'none'", ":", "\n", "            ", "return", "loss", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Unexpected reduction {}'", ".", "format", "(", "self", ".", "reduction", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.DiceLoss.__init__": [[354, 361], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["def", "__init__", "(", "self", ",", "weight", "=", "None", ",", "aux", "=", "True", ",", "aux_weight", "=", "0.4", ",", "ignore_index", "=", "-", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DiceLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "kwargs", "=", "kwargs", "\n", "self", ".", "weight", "=", "weight", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "self", ".", "aux", "=", "aux", "\n", "self", ".", "aux_weight", "=", "aux_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.DiceLoss._base_forward": [[362, 378], ["loss.BinaryDiceLoss", "torch.softmax", "torch.softmax", "torch.softmax", "range", "BinaryDiceLoss."], "methods", ["None"], ["", "def", "_base_forward", "(", "self", ",", "predict", ",", "target", ",", "valid_mask", ")", ":", "\n", "\n", "        ", "dice", "=", "BinaryDiceLoss", "(", "**", "self", ".", "kwargs", ")", "\n", "total_loss", "=", "0", "\n", "predict", "=", "F", ".", "softmax", "(", "predict", ",", "dim", "=", "1", ")", "\n", "\n", "for", "i", "in", "range", "(", "target", ".", "shape", "[", "-", "1", "]", ")", ":", "\n", "            ", "if", "i", "!=", "self", ".", "ignore_index", ":", "\n", "                ", "dice_loss", "=", "dice", "(", "predict", "[", ":", ",", "i", "]", ",", "target", "[", "...", ",", "i", "]", ",", "valid_mask", ")", "\n", "if", "self", ".", "weight", "is", "not", "None", ":", "\n", "                    ", "assert", "self", ".", "weight", ".", "shape", "[", "0", "]", "==", "target", ".", "shape", "[", "1", "]", ",", "'Expect weight shape [{}], get[{}]'", ".", "format", "(", "target", ".", "shape", "[", "1", "]", ",", "self", ".", "weight", ".", "shape", "[", "0", "]", ")", "\n", "dice_loss", "*=", "self", ".", "weights", "[", "i", "]", "\n", "", "total_loss", "+=", "dice_loss", "\n", "\n", "", "", "return", "total_loss", "/", "target", ".", "shape", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.DiceLoss._aux_forward": [[379, 388], ["tuple", "torch.one_hot", "torch.one_hot", "torch.one_hot", "loss.DiceLoss.DiceLoss._base_forward", "range", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "len", "loss.DiceLoss.DiceLoss._base_forward"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.DiceLoss._base_forward", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.DiceLoss._base_forward"], ["", "def", "_aux_forward", "(", "self", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "*", "preds", ",", "target", "=", "tuple", "(", "inputs", ")", "\n", "valid_mask", "=", "(", "target", "!=", "self", ".", "ignore_index", ")", ".", "long", "(", ")", "\n", "target_one_hot", "=", "F", ".", "one_hot", "(", "torch", ".", "clamp_min", "(", "target", ",", "0", ")", ")", "\n", "loss", "=", "self", ".", "_base_forward", "(", "preds", "[", "0", "]", ",", "target_one_hot", ",", "valid_mask", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "preds", ")", ")", ":", "\n", "            ", "aux_loss", "=", "self", ".", "_base_forward", "(", "preds", "[", "i", "]", ",", "target_one_hot", ",", "valid_mask", ")", "\n", "loss", "+=", "self", ".", "aux_weight", "*", "aux_loss", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.DiceLoss.forward": [[389, 393], ["tuple", "tuple", "dict", "list", "loss.DiceLoss._aux_forward"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.DiceLoss._aux_forward"], ["", "def", "forward", "(", "self", ",", "*", "inputs", ")", ":", "\n", "        ", "preds", ",", "target", "=", "tuple", "(", "inputs", ")", "\n", "inputs", "=", "tuple", "(", "list", "(", "preds", ")", "+", "[", "target", "]", ")", "\n", "return", "dict", "(", "loss", "=", "self", ".", "_aux_forward", "(", "*", "inputs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.loss.get_segmentation_loss": [[395, 420], ["model.lower.lower", "loss.MixSoftmaxCrossEntropyOHEMLoss", "loss.ICNetLoss", "logging.info", "loss.LovaszSoftmax", "loss.EncNetLoss", "logging.info", "loss.FocalLoss", "loss.TranslabLoss", "loss.MixSoftmaxCrossEntropyLoss", "logging.info", "loss.BinaryDiceLoss"], "function", ["None"], ["", "", "def", "get_segmentation_loss", "(", "model", ",", "use_ohem", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "use_ohem", ":", "\n", "        ", "return", "MixSoftmaxCrossEntropyOHEMLoss", "(", "**", "kwargs", ")", "\n", "", "elif", "cfg", ".", "SOLVER", ".", "LOSS_NAME", "==", "'lovasz'", ":", "\n", "        ", "logging", ".", "info", "(", "'Use lovasz loss!'", ")", "\n", "return", "LovaszSoftmax", "(", "**", "kwargs", ")", "\n", "", "elif", "cfg", ".", "SOLVER", ".", "LOSS_NAME", "==", "'focal'", ":", "\n", "        ", "logging", ".", "info", "(", "'Use focal loss!'", ")", "\n", "return", "FocalLoss", "(", "**", "kwargs", ")", "\n", "", "elif", "cfg", ".", "SOLVER", ".", "LOSS_NAME", "==", "'dice'", ":", "\n", "        ", "logging", ".", "info", "(", "'Use dice loss!'", ")", "\n", "# return DiceLoss(**kwargs)", "\n", "return", "BinaryDiceLoss", "(", "**", "kwargs", ")", "\n", "\n", "\n", "", "model", "=", "model", ".", "lower", "(", ")", "\n", "if", "model", "==", "'icnet'", ":", "\n", "        ", "return", "ICNetLoss", "(", "**", "kwargs", ")", "\n", "", "elif", "model", "==", "'encnet'", ":", "\n", "        ", "return", "EncNetLoss", "(", "**", "kwargs", ")", "\n", "\n", "", "elif", "model", "==", "'translab'", ":", "\n", "        ", "return", "TranslabLoss", "(", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "        ", "return", "MixSoftmaxCrossEntropyLoss", "(", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupPolyLR.__init__": [[14, 29], ["super().__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "target_lr", "=", "0", ",", "max_iters", "=", "0", ",", "power", "=", "0.9", ",", "warmup_factor", "=", "1.0", "/", "3", ",", "\n", "warmup_iters", "=", "500", ",", "warmup_method", "=", "'linear'", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "if", "warmup_method", "not", "in", "(", "\"constant\"", ",", "\"linear\"", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Only 'constant' or 'linear' warmup_method accepted \"", "\n", "\"got {}\"", ".", "format", "(", "warmup_method", ")", ")", "\n", "\n", "", "self", ".", "target_lr", "=", "target_lr", "\n", "self", ".", "max_iters", "=", "max_iters", "\n", "self", ".", "power", "=", "power", "\n", "self", ".", "warmup_factor", "=", "warmup_factor", "\n", "self", ".", "warmup_iters", "=", "warmup_iters", "\n", "self", ".", "warmup_method", "=", "warmup_method", "\n", "\n", "super", "(", "WarmupPolyLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupPolyLR.get_lr": [[30, 44], ["pow", "ValueError", "float"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "N", "=", "self", ".", "max_iters", "-", "self", ".", "warmup_iters", "\n", "T", "=", "self", ".", "last_epoch", "-", "self", ".", "warmup_iters", "\n", "if", "self", ".", "last_epoch", "<", "self", ".", "warmup_iters", ":", "\n", "            ", "if", "self", ".", "warmup_method", "==", "'constant'", ":", "\n", "                ", "warmup_factor", "=", "self", ".", "warmup_factor", "\n", "", "elif", "self", ".", "warmup_method", "==", "'linear'", ":", "\n", "                ", "alpha", "=", "float", "(", "self", ".", "last_epoch", ")", "/", "self", ".", "warmup_iters", "\n", "warmup_factor", "=", "self", ".", "warmup_factor", "*", "(", "1", "-", "alpha", ")", "+", "alpha", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Unknown warmup type.\"", ")", "\n", "", "return", "[", "self", ".", "target_lr", "+", "(", "base_lr", "-", "self", ".", "target_lr", ")", "*", "warmup_factor", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "", "factor", "=", "pow", "(", "1", "-", "T", "/", "N", ",", "self", ".", "power", ")", "\n", "return", "[", "self", ".", "target_lr", "+", "(", "base_lr", "-", "self", ".", "target_lr", ")", "*", "factor", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupMultiStepLR.__init__": [[47, 67], ["super().__init__", "ValueError", "list", "sorted"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "optimizer", ":", "torch", ".", "optim", ".", "Optimizer", ",", "\n", "milestones", ":", "List", "[", "int", "]", ",", "\n", "gamma", ":", "float", "=", "0.1", ",", "\n", "warmup_factor", ":", "float", "=", "0.001", ",", "\n", "warmup_iters", ":", "int", "=", "1000", ",", "\n", "warmup_method", ":", "str", "=", "\"linear\"", ",", "\n", "last_epoch", ":", "int", "=", "-", "1", ",", "\n", ")", ":", "\n", "        ", "if", "not", "list", "(", "milestones", ")", "==", "sorted", "(", "milestones", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Milestones should be a list of\"", "\" increasing integers. Got {}\"", ",", "milestones", "\n", ")", "\n", "", "self", ".", "milestones", "=", "milestones", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "warmup_factor", "=", "warmup_factor", "\n", "self", ".", "warmup_iters", "=", "warmup_iters", "\n", "self", ".", "warmup_method", "=", "warmup_method", "\n", "super", "(", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupMultiStepLR.get_lr": [[68, 75], ["lr_scheduler._get_warmup_factor_at_iter", "bisect.bisect_right"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler._get_warmup_factor_at_iter"], ["", "def", "get_lr", "(", "self", ")", "->", "List", "[", "float", "]", ":", "\n", "        ", "warmup_factor", "=", "_get_warmup_factor_at_iter", "(", "\n", "self", ".", "warmup_method", ",", "self", ".", "last_epoch", ",", "self", ".", "warmup_iters", ",", "self", ".", "warmup_factor", "\n", ")", "\n", "return", "[", "\n", "base_lr", "*", "warmup_factor", "*", "self", ".", "gamma", "**", "bisect_right", "(", "self", ".", "milestones", ",", "self", ".", "last_epoch", ")", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupMultiStepLR._compute_values": [[77, 80], ["lr_scheduler.WarmupMultiStepLR.get_lr"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.get_lr"], ["", "def", "_compute_values", "(", "self", ")", "->", "List", "[", "float", "]", ":", "\n", "# The new interface", "\n", "        ", "return", "self", ".", "get_lr", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__": [[83, 97], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "optimizer", ":", "torch", ".", "optim", ".", "Optimizer", ",", "\n", "max_iters", ":", "int", ",", "\n", "warmup_factor", ":", "float", "=", "0.001", ",", "\n", "warmup_iters", ":", "int", "=", "1000", ",", "\n", "warmup_method", ":", "str", "=", "\"linear\"", ",", "\n", "last_epoch", ":", "int", "=", "-", "1", ",", "\n", ")", ":", "\n", "        ", "self", ".", "max_iters", "=", "max_iters", "\n", "self", ".", "warmup_factor", "=", "warmup_factor", "\n", "self", ".", "warmup_iters", "=", "warmup_iters", "\n", "self", ".", "warmup_method", "=", "warmup_method", "\n", "super", "(", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.get_lr": [[98, 113], ["lr_scheduler._get_warmup_factor_at_iter", "math.cos"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler._get_warmup_factor_at_iter"], ["", "def", "get_lr", "(", "self", ")", "->", "List", "[", "float", "]", ":", "\n", "        ", "warmup_factor", "=", "_get_warmup_factor_at_iter", "(", "\n", "self", ".", "warmup_method", ",", "self", ".", "last_epoch", ",", "self", ".", "warmup_iters", ",", "self", ".", "warmup_factor", "\n", ")", "\n", "# Different definitions of half-cosine with warmup are possible. For", "\n", "# simplicity we multiply the standard half-cosine schedule by the warmup", "\n", "# factor. An alternative is to start the period of the cosine at warmup_iters", "\n", "# instead of at 0. In the case that warmup_iters << max_iters the two are", "\n", "# very close to each other.", "\n", "return", "[", "\n", "base_lr", "\n", "*", "warmup_factor", "\n", "*", "0.5", "\n", "*", "(", "1.0", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "self", ".", "last_epoch", "/", "self", ".", "max_iters", ")", ")", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR._compute_values": [[115, 118], ["lr_scheduler.WarmupCosineLR.get_lr"], "methods", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.WarmupCosineLR.get_lr"], ["", "def", "_compute_values", "(", "self", ")", "->", "List", "[", "float", "]", ":", "\n", "# The new interface", "\n", "        ", "return", "self", ".", "get_lr", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler._get_warmup_factor_at_iter": [[120, 147], ["ValueError"], "function", ["None"], ["", "", "def", "_get_warmup_factor_at_iter", "(", "\n", "method", ":", "str", ",", "iter", ":", "int", ",", "warmup_iters", ":", "int", ",", "warmup_factor", ":", "float", "\n", ")", "->", "float", ":", "\n", "    ", "\"\"\"\n    Return the learning rate warmup factor at a specific iteration.\n    See https://arxiv.org/abs/1706.02677 for more details.\n\n    Args:\n        method (str): warmup method; either \"constant\" or \"linear\".\n        iter (int): iteration at which to calculate the warmup factor.\n        warmup_iters (int): the number of warmup iterations.\n        warmup_factor (float): the base warmup factor (the meaning changes according\n            to the method used).\n\n    Returns:\n        float: the effective warmup factor at the given iteration.\n    \"\"\"", "\n", "if", "iter", ">=", "warmup_iters", ":", "\n", "        ", "return", "1.0", "\n", "\n", "", "if", "method", "==", "\"constant\"", ":", "\n", "        ", "return", "warmup_factor", "\n", "", "elif", "method", "==", "\"linear\"", ":", "\n", "        ", "alpha", "=", "iter", "/", "warmup_iters", "\n", "return", "warmup_factor", "*", "(", "1", "-", "alpha", ")", "+", "alpha", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unknown warmup method: {}\"", ".", "format", "(", "method", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.lr_scheduler.get_scheduler": [[149, 166], ["segmentron.config.cfg.SOLVER.LR_SCHEDULER.lower", "lr_scheduler.WarmupPolyLR", "lr_scheduler.WarmupCosineLR", "lr_scheduler.WarmupMultiStepLR", "ValueError"], "function", ["None"], ["", "", "def", "get_scheduler", "(", "optimizer", ",", "max_iters", ",", "iters_per_epoch", ")", ":", "\n", "    ", "mode", "=", "cfg", ".", "SOLVER", ".", "LR_SCHEDULER", ".", "lower", "(", ")", "\n", "warm_up_iters", "=", "iters_per_epoch", "*", "cfg", ".", "SOLVER", ".", "WARMUP", ".", "EPOCHS", "\n", "if", "mode", "==", "'poly'", ":", "\n", "        ", "return", "WarmupPolyLR", "(", "optimizer", ",", "max_iters", "=", "max_iters", ",", "power", "=", "cfg", ".", "SOLVER", ".", "POLY", ".", "POWER", ",", "\n", "warmup_factor", "=", "cfg", ".", "SOLVER", ".", "WARMUP", ".", "FACTOR", ",", "warmup_iters", "=", "warm_up_iters", ",", "\n", "warmup_method", "=", "cfg", ".", "SOLVER", ".", "WARMUP", ".", "METHOD", ")", "\n", "", "elif", "mode", "==", "'cosine'", ":", "\n", "        ", "return", "WarmupCosineLR", "(", "optimizer", ",", "max_iters", "=", "max_iters", ",", "warmup_factor", "=", "cfg", ".", "SOLVER", ".", "WARMUP", ".", "FACTOR", ",", "\n", "warmup_iters", "=", "warm_up_iters", ",", "warmup_method", "=", "cfg", ".", "SOLVER", ".", "WARMUP", ".", "METHOD", ")", "\n", "", "elif", "mode", "==", "'step'", ":", "\n", "        ", "milestones", "=", "[", "x", "*", "iters_per_epoch", "for", "x", "in", "cfg", ".", "SOLVER", ".", "STEP", ".", "DECAY_EPOCH", "]", "\n", "return", "WarmupMultiStepLR", "(", "optimizer", ",", "milestones", "=", "milestones", ",", "gamma", "=", "cfg", ".", "SOLVER", ".", "STEP", ".", "GAMMA", ",", "\n", "warmup_factor", "=", "cfg", ".", "SOLVER", ".", "WARMUP", ".", "FACTOR", ",", "warmup_iters", "=", "warm_up_iters", ",", "\n", "warmup_method", "=", "cfg", ".", "SOLVER", ".", "WARMUP", ".", "METHOD", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"not support lr scheduler method!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.optimizer._set_batch_norm_attr": [[8, 12], ["isinstance", "setattr", "segmentron.config.cfg.MODEL.BN_MOMENTUM", "segmentron.config.cfg.MODEL.BN_EPS_FOR_ENCODER", "segmentron.config.cfg.MODEL.BN_EPS_FOR_DECODER"], "function", ["None"], ["def", "_set_batch_norm_attr", "(", "named_modules", ",", "attr", ",", "value", ")", ":", "\n", "    ", "for", "m", "in", "named_modules", ":", "\n", "        ", "if", "isinstance", "(", "m", "[", "1", "]", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "SyncBatchNorm", ")", ")", ":", "\n", "            ", "setattr", "(", "m", "[", "1", "]", ",", "attr", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.optimizer._get_paramters": [[14, 43], ["list", "hasattr", "hasattr", "model.parameters.append", "logging.info", "model.parameters", "logging.info", "optimizer._set_batch_norm_attr", "logging.info", "optimizer._set_batch_norm_attr", "model.parameters.append", "logging.info", "model.named_modules", "logging.info", "model.encoder.parameters", "model.encoder.named_modules", "optimizer._set_batch_norm_attr", "getattr().parameters", "getattr().named_modules", "getattr", "getattr"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.optimizer._set_batch_norm_attr", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.optimizer._set_batch_norm_attr", "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.optimizer._set_batch_norm_attr"], ["", "", "", "def", "_get_paramters", "(", "model", ")", ":", "\n", "    ", "params_list", "=", "list", "(", ")", "\n", "if", "hasattr", "(", "model", ",", "'encoder'", ")", "and", "model", ".", "encoder", "is", "not", "None", "and", "hasattr", "(", "model", ",", "'decoder'", ")", ":", "\n", "        ", "params_list", ".", "append", "(", "{", "'params'", ":", "model", ".", "encoder", ".", "parameters", "(", ")", ",", "'lr'", ":", "cfg", ".", "SOLVER", ".", "LR", "}", ")", "\n", "if", "cfg", ".", "MODEL", ".", "BN_EPS_FOR_ENCODER", ":", "\n", "            ", "logging", ".", "info", "(", "'Set bn custom eps for bn in encoder: {}'", ".", "format", "(", "cfg", ".", "MODEL", ".", "BN_EPS_FOR_ENCODER", ")", ")", "\n", "_set_batch_norm_attr", "(", "model", ".", "encoder", ".", "named_modules", "(", ")", ",", "'eps'", ",", "cfg", ".", "MODEL", ".", "BN_EPS_FOR_ENCODER", ")", "\n", "\n", "", "for", "module", "in", "model", ".", "decoder", ":", "\n", "            ", "params_list", ".", "append", "(", "{", "'params'", ":", "getattr", "(", "model", ",", "module", ")", ".", "parameters", "(", ")", ",", "\n", "'lr'", ":", "cfg", ".", "SOLVER", ".", "LR", "*", "cfg", ".", "SOLVER", ".", "DECODER_LR_FACTOR", "}", ")", "\n", "\n", "", "if", "cfg", ".", "MODEL", ".", "BN_EPS_FOR_DECODER", ":", "\n", "            ", "logging", ".", "info", "(", "'Set bn custom eps for bn in decoder: {}'", ".", "format", "(", "cfg", ".", "MODEL", ".", "BN_EPS_FOR_DECODER", ")", ")", "\n", "for", "module", "in", "model", ".", "decoder", ":", "\n", "                ", "_set_batch_norm_attr", "(", "getattr", "(", "model", ",", "module", ")", ".", "named_modules", "(", ")", ",", "'eps'", ",", "\n", "cfg", ".", "MODEL", ".", "BN_EPS_FOR_DECODER", ")", "\n", "", "", "", "else", ":", "\n", "        ", "logging", ".", "info", "(", "'Model do not have encoder or decoder, params list was from model.parameters(), '", "\n", "'and arguments BN_EPS_FOR_ENCODER, BN_EPS_FOR_DECODER, DECODER_LR_FACTOR not used!'", ")", "\n", "params_list", "=", "model", ".", "parameters", "(", ")", "\n", "\n", "", "if", "cfg", ".", "MODEL", ".", "BN_MOMENTUM", "and", "cfg", ".", "MODEL", ".", "BN_TYPE", "in", "[", "'BN'", "]", ":", "\n", "        ", "logging", ".", "info", "(", "'Set bn custom momentum: {}'", ".", "format", "(", "cfg", ".", "MODEL", ".", "BN_MOMENTUM", ")", ")", "\n", "_set_batch_norm_attr", "(", "model", ".", "named_modules", "(", ")", ",", "'momentum'", ",", "cfg", ".", "MODEL", ".", "BN_MOMENTUM", ")", "\n", "", "elif", "cfg", ".", "MODEL", ".", "BN_MOMENTUM", "and", "cfg", ".", "MODEL", ".", "BN_TYPE", "not", "in", "[", "'BN'", "]", ":", "\n", "        ", "logging", ".", "info", "(", "'Batch norm type is {}, custom bn momentum is not effective!'", ".", "format", "(", "cfg", ".", "MODEL", ".", "BN_TYPE", ")", ")", "\n", "\n", "", "return", "params_list", "\n", "\n"]], "home.repos.pwc.inspect_result.yangcao1996_fanet.solver.optimizer.get_optimizer": [[45, 67], ["optimizer._get_paramters", "segmentron.config.cfg.SOLVER.OPTIMIZER.lower", "torch.optim.SGD", "torch.optim.Adam", "torch.optim.Adadelta", "torch.optim.RMSprop", "ValueError"], "function", ["home.repos.pwc.inspect_result.yangcao1996_fanet.solver.optimizer._get_paramters"], ["", "def", "get_optimizer", "(", "model", ")", ":", "\n", "    ", "parameters", "=", "_get_paramters", "(", "model", ")", "\n", "opt_lower", "=", "cfg", ".", "SOLVER", ".", "OPTIMIZER", ".", "lower", "(", ")", "\n", "\n", "if", "opt_lower", "==", "'sgd'", ":", "\n", "        ", "optimizer", "=", "optim", ".", "SGD", "(", "\n", "parameters", ",", "lr", "=", "cfg", ".", "SOLVER", ".", "LR", ",", "momentum", "=", "cfg", ".", "SOLVER", ".", "MOMENTUM", ",", "weight_decay", "=", "cfg", ".", "SOLVER", ".", "WEIGHT_DECAY", ")", "\n", "", "elif", "opt_lower", "==", "'adam'", ":", "\n", "        ", "optimizer", "=", "optim", ".", "Adam", "(", "\n", "parameters", ",", "lr", "=", "cfg", ".", "SOLVER", ".", "LR", ",", "eps", "=", "cfg", ".", "SOLVER", ".", "EPSILON", ",", "weight_decay", "=", "cfg", ".", "SOLVER", ".", "WEIGHT_DECAY", ")", "\n", "", "elif", "opt_lower", "==", "'adadelta'", ":", "\n", "        ", "optimizer", "=", "optim", ".", "Adadelta", "(", "\n", "parameters", ",", "lr", "=", "cfg", ".", "SOLVER", ".", "LR", ",", "eps", "=", "cfg", ".", "SOLVER", ".", "EPSILON", ",", "weight_decay", "=", "cfg", ".", "SOLVER", ".", "WEIGHT_DECAY", ")", "\n", "", "elif", "opt_lower", "==", "'rmsprop'", ":", "\n", "        ", "optimizer", "=", "optim", ".", "RMSprop", "(", "\n", "parameters", ",", "lr", "=", "cfg", ".", "SOLVER", ".", "LR", ",", "alpha", "=", "0.9", ",", "eps", "=", "cfg", ".", "SOLVER", ".", "EPSILON", ",", "\n", "momentum", "=", "cfg", ".", "SOLVER", ".", "MOMENTUM", ",", "weight_decay", "=", "cfg", ".", "SOLVER", ".", "WEIGHT_DECAY", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Expected optimizer method in [sgd, adam, adadelta, rmsprop], but received \"", "\n", "\"{}\"", ".", "format", "(", "opt_lower", ")", ")", "\n", "\n", "", "return", "optimizer", "\n", "", ""]]}