{"home.repos.pwc.inspect_result.DyGRec_ASReP.None.main.str2bool": [[13, 17], ["ValueError"], "function", ["None"], ["def", "str2bool", "(", "s", ")", ":", "\n", "    ", "if", "s", "not", "in", "{", "'False'", ",", "'True'", "}", ":", "\n", "        ", "raise", "ValueError", "(", "'Not a valid boolean string'", ")", "\n", "", "return", "s", "==", "'True'", "\n", "\n"]], "home.repos.pwc.inspect_result.DyGRec_ASReP.None.modules.normalize": [[15, 35], ["tensorflow.variable_scope", "inputs.get_shape", "tensorflow.nn.moments", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.zeros_initializer", "tensorflow.ones_initializer"], "function", ["None"], ["def", "normalize", "(", "inputs", ",", "epsilon", "=", "1e-8", ",", "scope", "=", "\"ln\"", ")", ":", "\n", "    ", "'''Applies layer normalization. See https://arxiv.org/abs/1607.06450.\n    inputs: A tensor with 2 or more dimensions, where the first dimension has `batch_size`.\n    epsilon: A floating number. A very small number for preventing ZeroDivision Error.\n    scope: Optional scope for `variable_scope`.\n\n    Returns:\n      A tensor with the same shape and data dtype as `inputs`.\n    '''", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "        ", "inputs_shape", "=", "inputs", ".", "get_shape", "(", ")", "\n", "params_shape", "=", "inputs_shape", "[", "-", "1", ":", "]", "\n", "\n", "mean", ",", "variance", "=", "tf", ".", "nn", ".", "moments", "(", "inputs", ",", "[", "-", "1", "]", ",", "keep_dims", "=", "True", ")", "\n", "beta", "=", "tf", ".", "get_variable", "(", "\"beta\"", ",", "params_shape", ",", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", "\n", "gamma", "=", "tf", ".", "get_variable", "(", "\"gamma\"", ",", "params_shape", ",", "initializer", "=", "tf", ".", "ones_initializer", "(", ")", ")", "\n", "normalized", "=", "(", "inputs", "-", "mean", ")", "/", "(", "(", "variance", "+", "epsilon", ")", "**", "(", ".5", ")", ")", "\n", "outputs", "=", "gamma", "*", "normalized", "+", "beta", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.DyGRec_ASReP.None.modules.embedding": [[37, 65], ["tensorflow.set_random_seed", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.nn.embedding_lookup", "tensorflow.concat", "tensorflow.truncated_normal_initializer", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.zeros"], "function", ["None"], ["", "def", "embedding", "(", "inputs", ",", "\n", "vocab_size", ",", "\n", "num_units", ",", "\n", "zero_pad", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "l2_reg", "=", "0.0", ",", "\n", "scope", "=", "\"embedding\"", ",", "\n", "with_t", "=", "False", ",", "\n", "reuse", "=", "None", ",", "\n", ")", ":", "\n", "    ", "tf", ".", "set_random_seed", "(", "0", ")", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "lookup_table", "=", "tf", ".", "get_variable", "(", "name", "=", "'lookup_table'", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "shape", "=", "[", "vocab_size", ",", "num_units", "]", ",", "\n", "initializer", "=", "tf", ".", "truncated_normal_initializer", "(", "mean", "=", "0.01", ",", "stddev", "=", "0.02", ")", ",", "\n", "regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "l2_reg", ")", ")", "\n", "if", "zero_pad", ":", "\n", "            ", "lookup_table", "=", "tf", ".", "concat", "(", "(", "tf", ".", "zeros", "(", "shape", "=", "[", "1", ",", "num_units", "]", ")", ",", "\n", "lookup_table", "[", "1", ":", ",", ":", "]", ")", ",", "0", ")", "\n", "", "outputs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "lookup_table", ",", "inputs", ")", "\n", "\n", "if", "scale", ":", "\n", "            ", "outputs", "=", "outputs", "*", "(", "num_units", "**", "0.5", ")", "\n", "", "", "if", "with_t", ":", "\n", "        ", "return", "outputs", ",", "lookup_table", "\n", "", "else", ":", "\n", "        ", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.DyGRec_ASReP.None.modules.get_token_embeddings": [[66, 86], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.concat", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.zeros"], "function", ["None"], ["", "", "def", "get_token_embeddings", "(", "vocab_size", ",", "num_units", ",", "zero_pad", "=", "True", ")", ":", "\n", "    ", "'''Constructs token embedding matrix.\n    Note that the column of index 0's are set to zeros.\n    vocab_size: scalar. V.\n    num_units: embedding dimensionalty. E.\n    zero_pad: Boolean. If True, all the values of the first row (id = 0) should be constant zero\n    To apply query/key masks easily, zero pad is turned on.\n\n    Returns\n    weight variable: (V, E)\n    '''", "\n", "with", "tf", ".", "variable_scope", "(", "\"shared_weight_matrix\"", ")", ":", "\n", "        ", "embeddings", "=", "tf", ".", "get_variable", "(", "'weight_mat'", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "shape", "=", "(", "vocab_size", ",", "num_units", ")", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "if", "zero_pad", ":", "\n", "            ", "embeddings", "=", "tf", ".", "concat", "(", "(", "tf", ".", "zeros", "(", "shape", "=", "[", "1", ",", "num_units", "]", ")", ",", "\n", "embeddings", "[", "1", ":", ",", ":", "]", ")", ",", "0", ")", "\n", "", "", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.DyGRec_ASReP.None.modules.scaled_dot_product_attention": [[88, 133], ["tensorflow.variable_scope", "tensorflow.matmul", "modules.mask", "tensorflow.nn.softmax", "tensorflow.transpose", "tensorflow.summary.image", "tensorflow.layers.dropout", "tensorflow.matmul", "Q.get_shape().as_list", "tensorflow.transpose", "modules.mask", "tensorflow.expand_dims", "Q.get_shape"], "function", ["home.repos.pwc.inspect_result.DyGRec_ASReP.None.modules.mask", "home.repos.pwc.inspect_result.DyGRec_ASReP.None.modules.mask"], ["", "def", "scaled_dot_product_attention", "(", "Q", ",", "K", ",", "V", ",", "key_masks", ",", "\n", "causality", "=", "False", ",", "dropout_rate", "=", "0.", ",", "\n", "training", "=", "True", ",", "\n", "scope", "=", "\"scaled_dot_product_attention\"", ")", ":", "\n", "    ", "'''See 3.2.1.\n    Q: Packed queries. 3d tensor. [N, T_q, d_k].\n    K: Packed keys. 3d tensor. [N, T_k, d_k].\n    V: Packed values. 3d tensor. [N, T_k, d_v].\n    key_masks: A 2d tensor with shape of [N, key_seqlen]\n    causality: If True, applies masking for future blinding\n    dropout_rate: A floating point number of [0, 1].\n    training: boolean for controlling droput\n    scope: Optional scope for `variable_scope`.\n    '''", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "        ", "d_k", "=", "Q", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "\n", "# dot product", "\n", "outputs", "=", "tf", ".", "matmul", "(", "Q", ",", "tf", ".", "transpose", "(", "K", ",", "[", "0", ",", "2", ",", "1", "]", ")", ")", "# (N, T_q, T_k)", "\n", "\n", "# scale", "\n", "outputs", "/=", "d_k", "**", "0.5", "\n", "\n", "# key masking", "\n", "outputs", "=", "mask", "(", "outputs", ",", "key_masks", "=", "key_masks", ",", "type", "=", "\"key\"", ")", "\n", "\n", "# causality or future blinding masking", "\n", "if", "causality", ":", "\n", "            ", "outputs", "=", "mask", "(", "outputs", ",", "type", "=", "\"future\"", ")", "\n", "\n", "# softmax", "\n", "", "outputs", "=", "tf", ".", "nn", ".", "softmax", "(", "outputs", ")", "\n", "attention", "=", "tf", ".", "transpose", "(", "outputs", ",", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "tf", ".", "summary", ".", "image", "(", "\"attention\"", ",", "tf", ".", "expand_dims", "(", "attention", "[", ":", "1", "]", ",", "-", "1", ")", ")", "\n", "\n", "# # query masking", "\n", "# outputs = mask(outputs, Q, K, type=\"query\")", "\n", "\n", "# dropout", "\n", "outputs", "=", "tf", ".", "layers", ".", "dropout", "(", "outputs", ",", "rate", "=", "dropout_rate", ",", "training", "=", "training", ")", "\n", "\n", "# weighted sum (context vectors)", "\n", "outputs", "=", "tf", ".", "matmul", "(", "outputs", ",", "V", ")", "# (N, T_q, d_v)", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.DyGRec_ASReP.None.modules.mask": [[135, 183], ["tensorflow.to_float", "tensorflow.tile", "tensorflow.expand_dims", "tensorflow.ones_like", "tensorflow.linalg.LinearOperatorLowerTriangular().to_dense", "tensorflow.tile", "tensorflow.where", "print", "tensorflow.expand_dims", "tensorflow.ones_like", "tensorflow.equal", "tensorflow.linalg.LinearOperatorLowerTriangular", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape"], "function", ["None"], ["", "def", "mask", "(", "inputs", ",", "key_masks", "=", "None", ",", "type", "=", "None", ")", ":", "\n", "    ", "\"\"\"Masks paddings on keys or queries to inputs\n    inputs: 3d tensor. (h*N, T_q, T_k)\n    key_masks: 3d tensor. (N, 1, T_k)\n    type: string. \"key\" | \"future\"\n\n    e.g.,\n    >> inputs = tf.zeros([2, 2, 3], dtype=tf.float32)\n    >> key_masks = tf.constant([[0., 0., 1.],\n                                [0., 1., 1.]])\n    >> mask(inputs, key_masks=key_masks, type=\"key\")\n    array([[[ 0.0000000e+00,  0.0000000e+00, -4.2949673e+09],\n        [ 0.0000000e+00,  0.0000000e+00, -4.2949673e+09]],\n\n       [[ 0.0000000e+00, -4.2949673e+09, -4.2949673e+09],\n        [ 0.0000000e+00, -4.2949673e+09, -4.2949673e+09]],\n\n       [[ 0.0000000e+00,  0.0000000e+00, -4.2949673e+09],\n        [ 0.0000000e+00,  0.0000000e+00, -4.2949673e+09]],\n\n       [[ 0.0000000e+00, -4.2949673e+09, -4.2949673e+09],\n        [ 0.0000000e+00, -4.2949673e+09, -4.2949673e+09]]], dtype=float32)\n    \"\"\"", "\n", "padding_num", "=", "-", "2", "**", "32", "+", "1", "\n", "if", "type", "in", "(", "\"k\"", ",", "\"key\"", ",", "\"keys\"", ")", ":", "\n", "        ", "key_masks", "=", "tf", ".", "to_float", "(", "key_masks", ")", "\n", "key_masks", "=", "tf", ".", "tile", "(", "key_masks", ",", "[", "tf", ".", "shape", "(", "inputs", ")", "[", "0", "]", "//", "tf", ".", "shape", "(", "key_masks", ")", "[", "0", "]", ",", "1", "]", ")", "# (h*N, seqlen)", "\n", "key_masks", "=", "tf", ".", "expand_dims", "(", "key_masks", ",", "1", ")", "# (h*N, 1, seqlen)", "\n", "outputs", "=", "inputs", "+", "key_masks", "*", "padding_num", "\n", "# elif type in (\"q\", \"query\", \"queries\"):", "\n", "#     # Generate masks", "\n", "#     masks = tf.sign(tf.reduce_sum(tf.abs(queries), axis=-1))  # (N, T_q)", "\n", "#     masks = tf.expand_dims(masks, -1)  # (N, T_q, 1)", "\n", "#     masks = tf.tile(masks, [1, 1, tf.shape(keys)[1]])  # (N, T_q, T_k)", "\n", "#", "\n", "#     # Apply masks to inputs", "\n", "#     outputs = inputs*masks", "\n", "", "elif", "type", "in", "(", "\"f\"", ",", "\"future\"", ",", "\"right\"", ")", ":", "\n", "        ", "diag_vals", "=", "tf", ".", "ones_like", "(", "inputs", "[", "0", ",", ":", ",", ":", "]", ")", "# (T_q, T_k)", "\n", "tril", "=", "tf", ".", "linalg", ".", "LinearOperatorLowerTriangular", "(", "diag_vals", ")", ".", "to_dense", "(", ")", "# (T_q, T_k)", "\n", "future_masks", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "tril", ",", "0", ")", ",", "[", "tf", ".", "shape", "(", "inputs", ")", "[", "0", "]", ",", "1", ",", "1", "]", ")", "# (N, T_q, T_k)", "\n", "\n", "paddings", "=", "tf", ".", "ones_like", "(", "future_masks", ")", "*", "padding_num", "\n", "outputs", "=", "tf", ".", "where", "(", "tf", ".", "equal", "(", "future_masks", ",", "0", ")", ",", "paddings", ",", "inputs", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Check if you entered type correctly!\"", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.DyGRec_ASReP.None.modules.multihead_attention": [[185, 230], ["queries.get_shape().as_list", "tensorflow.variable_scope", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "modules.scaled_dot_product_attention", "tensorflow.concat", "modules.normalize", "tensorflow.split", "tensorflow.split", "tensorflow.split", "tensorflow.split", "queries.get_shape"], "function", ["home.repos.pwc.inspect_result.DyGRec_ASReP.None.modules.scaled_dot_product_attention", "home.repos.pwc.inspect_result.DyGRec_ASReP.None.modules.normalize"], ["", "def", "multihead_attention", "(", "queries", ",", "keys", ",", "values", ",", "key_masks", ",", "\n", "num_heads", "=", "8", ",", "\n", "dropout_rate", "=", "0", ",", "\n", "training", "=", "True", ",", "\n", "causality", "=", "False", ",", "\n", "scope", "=", "\"multihead_attention\"", ")", ":", "\n", "    ", "'''Applies multihead attention. See 3.2.2\n    queries: A 3d tensor with shape of [N, T_q, d_model].\n    keys: A 3d tensor with shape of [N, T_k, d_model].\n    values: A 3d tensor with shape of [N, T_k, d_model].\n    key_masks: A 2d tensor with shape of [N, key_seqlen]\n    num_heads: An int. Number of heads.\n    dropout_rate: A floating point number.\n    training: Boolean. Controller of mechanism for dropout.\n    causality: Boolean. If true, units that reference the future are masked.\n    scope: Optional scope for `variable_scope`.\n\n    Returns\n      A 3d tensor with shape of (N, T_q, C)\n    '''", "\n", "d_model", "=", "queries", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "# Linear projections", "\n", "        ", "Q", "=", "tf", ".", "layers", ".", "dense", "(", "queries", ",", "d_model", ",", "use_bias", "=", "True", ")", "# (N, T_q, d_model)", "\n", "K", "=", "tf", ".", "layers", ".", "dense", "(", "keys", ",", "d_model", ",", "use_bias", "=", "True", ")", "# (N, T_k, d_model)", "\n", "V", "=", "tf", ".", "layers", ".", "dense", "(", "values", ",", "d_model", ",", "use_bias", "=", "True", ")", "# (N, T_k, d_model)", "\n", "\n", "# Split and concat", "\n", "Q_", "=", "tf", ".", "concat", "(", "tf", ".", "split", "(", "Q", ",", "num_heads", ",", "axis", "=", "2", ")", ",", "axis", "=", "0", ")", "# (h*N, T_q, d_model/h)", "\n", "K_", "=", "tf", ".", "concat", "(", "tf", ".", "split", "(", "K", ",", "num_heads", ",", "axis", "=", "2", ")", ",", "axis", "=", "0", ")", "# (h*N, T_k, d_model/h)", "\n", "V_", "=", "tf", ".", "concat", "(", "tf", ".", "split", "(", "V", ",", "num_heads", ",", "axis", "=", "2", ")", ",", "axis", "=", "0", ")", "# (h*N, T_k, d_model/h)", "\n", "\n", "# Attention", "\n", "outputs", "=", "scaled_dot_product_attention", "(", "Q_", ",", "K_", ",", "V_", ",", "key_masks", ",", "causality", ",", "dropout_rate", ",", "training", ")", "\n", "\n", "# Restore shape", "\n", "outputs", "=", "tf", ".", "concat", "(", "tf", ".", "split", "(", "outputs", ",", "num_heads", ",", "axis", "=", "0", ")", ",", "axis", "=", "2", ")", "# (N, T_q, d_model)", "\n", "\n", "# Residual connection", "\n", "outputs", "+=", "queries", "\n", "\n", "# Normalize", "\n", "outputs", "=", "normalize", "(", "outputs", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.DyGRec_ASReP.None.modules.feedforward": [[232, 256], ["tensorflow.variable_scope", "tensorflow.layers.dense", "tensorflow.layers.dense", "modules.normalize"], "function", ["home.repos.pwc.inspect_result.DyGRec_ASReP.None.modules.normalize"], ["", "def", "feedforward", "(", "inputs", ",", "num_units", ",", "scope", "=", "\"positionwise_feedforward\"", ")", ":", "\n", "    ", "'''position-wise feed forward net. See 3.3\n\n    inputs: A 3d tensor with shape of [N, T, C].\n    num_units: A list of two integers.\n    scope: Optional scope for `variable_scope`.\n\n    Returns:\n      A 3d tensor with the same shape and dtype as inputs\n    '''", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "# Inner layer", "\n", "        ", "outputs", "=", "tf", ".", "layers", ".", "dense", "(", "inputs", ",", "num_units", "[", "0", "]", ",", "activation", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "\n", "# Outer layer", "\n", "outputs", "=", "tf", ".", "layers", ".", "dense", "(", "outputs", ",", "num_units", "[", "1", "]", ")", "\n", "\n", "# Residual connection", "\n", "outputs", "+=", "inputs", "\n", "\n", "# Normalize", "\n", "outputs", "=", "normalize", "(", "outputs", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.DyGRec_ASReP.None.modules.label_smoothing": [[258, 292], ["inputs.get_shape().as_list", "inputs.get_shape"], "function", ["None"], ["", "def", "label_smoothing", "(", "inputs", ",", "epsilon", "=", "0.1", ")", ":", "\n", "    ", "'''Applies label smoothing. See 5.4 and https://arxiv.org/abs/1512.00567.\n    inputs: 3d tensor. [N, T, V], where V is the number of vocabulary.\n    epsilon: Smoothing rate.\n\n    For example,\n\n    ```\n    import tensorflow as tf\n    inputs = tf.convert_to_tensor([[[0, 0, 1],\n       [0, 1, 0],\n       [1, 0, 0]],\n\n      [[1, 0, 0],\n       [1, 0, 0],\n       [0, 1, 0]]], tf.float32)\n\n    outputs = label_smoothing(inputs)\n\n    with tf.Session() as sess:\n        print(sess.run([outputs]))\n\n    >>\n    [array([[[ 0.03333334,  0.03333334,  0.93333334],\n        [ 0.03333334,  0.93333334,  0.03333334],\n        [ 0.93333334,  0.03333334,  0.03333334]],\n\n       [[ 0.93333334,  0.03333334,  0.03333334],\n        [ 0.93333334,  0.03333334,  0.03333334],\n        [ 0.03333334,  0.93333334,  0.03333334]]], dtype=float32)]\n    ```\n    '''", "\n", "V", "=", "inputs", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "# number of channels", "\n", "return", "(", "(", "1", "-", "epsilon", ")", "*", "inputs", ")", "+", "(", "epsilon", "/", "V", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DyGRec_ASReP.None.modules.positional_encoding": [[294, 332], ["inputs.get_shape().as_list", "tensorflow.variable_scope", "tensorflow.tile", "numpy.array", "numpy.sin", "numpy.cos", "tensorflow.convert_to_tensor", "tensorflow.nn.embedding_lookup", "tensorflow.to_float", "tensorflow.shape", "tensorflow.shape", "tensorflow.expand_dims", "tensorflow.where", "inputs.get_shape", "tensorflow.range", "tensorflow.equal", "range", "numpy.power", "range"], "function", ["None"], ["", "def", "positional_encoding", "(", "inputs", ",", "\n", "maxlen", ",", "\n", "masking", "=", "True", ",", "\n", "scope", "=", "\"positional_encoding\"", ")", ":", "\n", "    ", "'''Sinusoidal Positional_Encoding. See 3.5\n    inputs: 3d tensor. (N, T, E)\n    maxlen: scalar. Must be >= T\n    masking: Boolean. If True, padding positions are set to zeros.\n    scope: Optional scope for `variable_scope`.\n\n    returns\n    3d tensor that has the same shape as inputs.\n    '''", "\n", "\n", "E", "=", "inputs", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "# static", "\n", "N", ",", "T", "=", "tf", ".", "shape", "(", "inputs", ")", "[", "0", "]", ",", "tf", ".", "shape", "(", "inputs", ")", "[", "1", "]", "# dynamic", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "# position indices", "\n", "        ", "position_ind", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "tf", ".", "range", "(", "T", ")", ",", "0", ")", ",", "[", "N", ",", "1", "]", ")", "# (N, T)", "\n", "\n", "# First part of the PE function: sin and cos argument", "\n", "position_enc", "=", "np", ".", "array", "(", "[", "\n", "[", "pos", "/", "np", ".", "power", "(", "10000", ",", "(", "i", "-", "i", "%", "2", ")", "/", "E", ")", "for", "i", "in", "range", "(", "E", ")", "]", "\n", "for", "pos", "in", "range", "(", "maxlen", ")", "]", ")", "\n", "\n", "# Second part, apply the cosine to even columns and sin to odds.", "\n", "position_enc", "[", ":", ",", "0", ":", ":", "2", "]", "=", "np", ".", "sin", "(", "position_enc", "[", ":", ",", "0", ":", ":", "2", "]", ")", "# dim 2i", "\n", "position_enc", "[", ":", ",", "1", ":", ":", "2", "]", "=", "np", ".", "cos", "(", "position_enc", "[", ":", ",", "1", ":", ":", "2", "]", ")", "# dim 2i+1", "\n", "position_enc", "=", "tf", ".", "convert_to_tensor", "(", "position_enc", ",", "tf", ".", "float32", ")", "# (maxlen, E)", "\n", "\n", "# lookup", "\n", "outputs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "position_enc", ",", "position_ind", ")", "\n", "\n", "# masks", "\n", "if", "masking", ":", "\n", "            ", "outputs", "=", "tf", ".", "where", "(", "tf", ".", "equal", "(", "inputs", ",", "0", ")", ",", "inputs", ",", "outputs", ")", "\n", "\n", "", "return", "tf", ".", "to_float", "(", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DyGRec_ASReP.None.modules.noam_scheme": [[334, 343], ["tensorflow.cast", "tensorflow.minimum"], "function", ["None"], ["", "", "def", "noam_scheme", "(", "init_lr", ",", "global_step", ",", "warmup_steps", "=", "4000.", ")", ":", "\n", "    ", "'''Noam scheme learning rate decay\n    init_lr: initial learning rate. scalar.\n    global_step: scalar.\n    warmup_steps: scalar. During warmup_steps, learning rate increases\n        until it reaches init_lr.\n    '''", "\n", "step", "=", "tf", ".", "cast", "(", "global_step", "+", "1", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "return", "init_lr", "*", "warmup_steps", "**", "0.5", "*", "tf", ".", "minimum", "(", "step", "*", "warmup_steps", "**", "-", "1.5", ",", "step", "**", "-", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DyGRec_ASReP.None.modules.reshape_to_matrix": [[346, 358], ["tensorflow.reshape", "ValueError"], "function", ["None"], ["", "def", "reshape_to_matrix", "(", "input_tensor", ")", ":", "\n", "    ", "\"\"\"Reshapes a >= rank 2 tensor to a rank 2 tensor (i.e., a matrix).\"\"\"", "\n", "ndims", "=", "input_tensor", ".", "shape", ".", "ndims", "\n", "if", "ndims", "<", "2", ":", "\n", "      ", "raise", "ValueError", "(", "\"Input tensor must have at least rank 2. Shape = %s\"", "%", "\n", "(", "input_tensor", ".", "shape", ")", ")", "\n", "", "if", "ndims", "==", "2", ":", "\n", "      ", "return", "input_tensor", "\n", "\n", "", "width", "=", "input_tensor", ".", "shape", "[", "-", "1", "]", "\n", "output_tensor", "=", "tf", ".", "reshape", "(", "input_tensor", ",", "[", "-", "1", ",", "width", "]", ")", "\n", "return", "output_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.DyGRec_ASReP.None.modules.reshape_from_matrix": [[359, 370], ["modules.get_shape_list", "tensorflow.reshape", "len"], "function", ["home.repos.pwc.inspect_result.DyGRec_ASReP.None.modules.get_shape_list"], ["", "def", "reshape_from_matrix", "(", "output_tensor", ",", "orig_shape_list", ")", ":", "\n", "    ", "\"\"\"Reshapes a rank 2 tensor back to its original rank >= 2 tensor.\"\"\"", "\n", "if", "len", "(", "orig_shape_list", ")", "==", "2", ":", "\n", "      ", "return", "output_tensor", "\n", "\n", "", "output_shape", "=", "get_shape_list", "(", "output_tensor", ")", "\n", "\n", "orig_dims", "=", "orig_shape_list", "[", "0", ":", "-", "1", "]", "\n", "width", "=", "output_shape", "[", "-", "1", "]", "\n", "\n", "return", "tf", ".", "reshape", "(", "output_tensor", ",", "orig_dims", "+", "[", "width", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DyGRec_ASReP.None.modules.get_shape_list": [[372, 407], ["tensor.shape.as_list", "enumerate", "tensorflow.shape", "assert_rank", "non_static_indexes.append"], "function", ["None"], ["", "def", "get_shape_list", "(", "tensor", ",", "expected_rank", "=", "None", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Returns a list of the shape of tensor, preferring static dimensions.\n\n    Args:\n      tensor: A tf.Tensor object to find the shape of.\n      expected_rank: (optional) int. The expected rank of `tensor`. If this is\n        specified and the `tensor` has a different rank, and exception will be\n        thrown.\n      name: Optional name of the tensor for the error message.\n\n    Returns:\n      A list of dimensions of the shape of tensor. All static dimensions will\n      be returned as python integers, and dynamic dimensions will be returned\n      as tf.Tensor scalars.\n    \"\"\"", "\n", "if", "name", "is", "None", ":", "\n", "      ", "name", "=", "tensor", ".", "name", "\n", "\n", "", "if", "expected_rank", "is", "not", "None", ":", "\n", "      ", "assert_rank", "(", "tensor", ",", "expected_rank", ",", "name", ")", "\n", "\n", "", "shape", "=", "tensor", ".", "shape", ".", "as_list", "(", ")", "\n", "\n", "non_static_indexes", "=", "[", "]", "\n", "for", "(", "index", ",", "dim", ")", "in", "enumerate", "(", "shape", ")", ":", "\n", "      ", "if", "dim", "is", "None", ":", "\n", "        ", "non_static_indexes", ".", "append", "(", "index", ")", "\n", "\n", "", "", "if", "not", "non_static_indexes", ":", "\n", "      ", "return", "shape", "\n", "\n", "", "dyn_shape", "=", "tf", ".", "shape", "(", "tensor", ")", "\n", "for", "index", "in", "non_static_indexes", ":", "\n", "      ", "shape", "[", "index", "]", "=", "dyn_shape", "[", "index", "]", "\n", "", "return", "shape", "\n", "", ""]], "home.repos.pwc.inspect_result.DyGRec_ASReP.None.metrics.recall": [[4, 6], ["len", "float", "len", "set", "set", "set"], "function", ["None"], ["def", "recall", "(", "rank", ",", "ground_truth", ",", "N", ")", ":", "\n", "    ", "return", "len", "(", "set", "(", "rank", "[", ":", "N", "]", ")", "&", "set", "(", "ground_truth", ")", ")", "/", "float", "(", "len", "(", "set", "(", "ground_truth", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DyGRec_ASReP.None.metrics.precision_at_k": [[8, 19], ["numpy.mean", "numpy.asarray"], "function", ["None"], ["", "def", "precision_at_k", "(", "r", ",", "k", ")", ":", "\n", "    ", "\"\"\"Score is precision @ k\n    Relevance is binary (nonzero is relevant).\n    Returns:\n        Precision @ k\n    Raises:\n        ValueError: len(r) must be >= k\n    \"\"\"", "\n", "assert", "k", ">=", "1", "\n", "r", "=", "np", ".", "asarray", "(", "r", ")", "[", ":", "k", "]", "\n", "return", "np", ".", "mean", "(", "r", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DyGRec_ASReP.None.metrics.average_precision": [[21, 32], ["numpy.asarray", "metrics.precision_at_k", "numpy.sum", "float", "range", "min", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.DyGRec_ASReP.None.metrics.precision_at_k"], ["", "def", "average_precision", "(", "r", ",", "cut", ")", ":", "\n", "    ", "\"\"\"Score is average precision (area under PR curve)\n    Relevance is binary (nonzero is relevant).\n    Returns:\n        Average precision\n    \"\"\"", "\n", "r", "=", "np", ".", "asarray", "(", "r", ")", "\n", "out", "=", "[", "precision_at_k", "(", "r", ",", "k", "+", "1", ")", "for", "k", "in", "range", "(", "cut", ")", "if", "r", "[", "k", "]", "]", "\n", "if", "not", "out", ":", "\n", "        ", "return", "0.", "\n", "", "return", "np", ".", "sum", "(", "out", ")", "/", "float", "(", "min", "(", "cut", ",", "np", ".", "sum", "(", "r", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DyGRec_ASReP.None.metrics.mean_average_precision": [[34, 41], ["numpy.mean", "metrics.average_precision"], "function", ["home.repos.pwc.inspect_result.DyGRec_ASReP.None.metrics.average_precision"], ["", "def", "mean_average_precision", "(", "rs", ")", ":", "\n", "    ", "\"\"\"Score is mean average precision\n    Relevance is binary (nonzero is relevant).\n    Returns:\n        Mean average precision\n    \"\"\"", "\n", "return", "np", ".", "mean", "(", "[", "average_precision", "(", "r", ")", "for", "r", "in", "rs", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DyGRec_ASReP.None.metrics.dcg_at_k": [[43, 59], ["numpy.asfarray", "numpy.sum", "numpy.sum", "ValueError", "numpy.log2", "numpy.log2", "numpy.arange", "numpy.arange"], "function", ["None"], ["", "def", "dcg_at_k", "(", "r", ",", "k", ",", "method", "=", "1", ")", ":", "\n", "    ", "\"\"\"Score is discounted cumulative gain (dcg)\n    Relevance is positive real values.  Can use binary\n    as the previous methods.\n    Returns:\n        Discounted cumulative gain\n    \"\"\"", "\n", "r", "=", "np", ".", "asfarray", "(", "r", ")", "[", ":", "k", "]", "\n", "if", "r", ".", "size", ":", "\n", "        ", "if", "method", "==", "0", ":", "\n", "            ", "return", "r", "[", "0", "]", "+", "np", ".", "sum", "(", "r", "[", "1", ":", "]", "/", "np", ".", "log2", "(", "np", ".", "arange", "(", "2", ",", "r", ".", "size", "+", "1", ")", ")", ")", "\n", "", "elif", "method", "==", "1", ":", "\n", "            ", "return", "np", ".", "sum", "(", "r", "/", "np", ".", "log2", "(", "np", ".", "arange", "(", "2", ",", "r", ".", "size", "+", "2", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'method must be 0 or 1.'", ")", "\n", "", "", "return", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.DyGRec_ASReP.None.metrics.ndcg_at_k": [[61, 72], ["metrics.dcg_at_k", "sorted", "metrics.dcg_at_k"], "function", ["home.repos.pwc.inspect_result.DyGRec_ASReP.None.metrics.dcg_at_k", "home.repos.pwc.inspect_result.DyGRec_ASReP.None.metrics.dcg_at_k"], ["", "def", "ndcg_at_k", "(", "r", ",", "k", ",", "method", "=", "1", ")", ":", "\n", "    ", "\"\"\"Score is normalized discounted cumulative gain (ndcg)\n    Relevance is positive real values.  Can use binary\n    as the previous methods.\n    Returns:\n        Normalized discounted cumulative gain\n    \"\"\"", "\n", "dcg_max", "=", "dcg_at_k", "(", "sorted", "(", "r", ",", "reverse", "=", "True", ")", ",", "k", ",", "method", ")", "\n", "if", "not", "dcg_max", ":", "\n", "        ", "return", "0.", "\n", "", "return", "dcg_at_k", "(", "r", ",", "k", ",", "method", ")", "/", "dcg_max", "\n", "\n"]], "home.repos.pwc.inspect_result.DyGRec_ASReP.None.metrics.recall_at_k": [[74, 77], ["numpy.asfarray", "numpy.sum"], "function", ["None"], ["", "def", "recall_at_k", "(", "r", ",", "k", ",", "all_pos_num", ")", ":", "\n", "    ", "r", "=", "np", ".", "asfarray", "(", "r", ")", "[", ":", "k", "]", "\n", "return", "np", ".", "sum", "(", "r", ")", "/", "all_pos_num", "\n", "\n"]], "home.repos.pwc.inspect_result.DyGRec_ASReP.None.metrics.hit_at_k": [[79, 85], ["numpy.array", "numpy.sum"], "function", ["None"], ["", "def", "hit_at_k", "(", "r", ",", "k", ")", ":", "\n", "    ", "r", "=", "np", ".", "array", "(", "r", ")", "[", ":", "k", "]", "\n", "if", "np", ".", "sum", "(", "r", ")", ">", "0", ":", "\n", "        ", "return", "1.", "\n", "", "else", ":", "\n", "        ", "return", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.DyGRec_ASReP.None.metrics.F1": [[86, 91], ["None"], "function", ["None"], ["", "", "def", "F1", "(", "pre", ",", "rec", ")", ":", "\n", "    ", "if", "pre", "+", "rec", ">", "0", ":", "\n", "        ", "return", "(", "2.0", "*", "pre", "*", "rec", ")", "/", "(", "pre", "+", "rec", ")", "\n", "", "else", ":", "\n", "        ", "return", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.DyGRec_ASReP.None.metrics.auc": [[92, 98], ["sklearn.metrics.roc_auc_score"], "function", ["None"], ["", "", "def", "auc", "(", "ground_truth", ",", "prediction", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "res", "=", "roc_auc_score", "(", "y_true", "=", "ground_truth", ",", "y_score", "=", "prediction", ")", "\n", "", "except", "Exception", ":", "\n", "        ", "res", "=", "0.", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.DyGRec_ASReP.None.metrics.mrr": [[99, 105], ["numpy.array", "numpy.sum", "numpy.reciprocal", "numpy.where"], "function", ["None"], ["", "def", "mrr", "(", "r", ")", ":", "\n", "    ", "r", "=", "np", ".", "array", "(", "r", ")", "\n", "if", "np", ".", "sum", "(", "r", ")", "==", "0.", ":", "\n", "        ", "return", "0.", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "reciprocal", "(", "np", ".", "where", "(", "r", "==", "1", ")", "[", "0", "]", "+", "1", ",", "dtype", "=", "np", ".", "float", ")", "[", "0", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DyGRec_ASReP.None.sampler.WarpSampler.__init__": [[45, 60], ["multiprocessing.Queue", "range", "sampler.WarpSampler.processors.append", "sampler.WarpSampler.processors[].start", "multiprocessing.Process", "numpy.random.randint"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "User", ",", "usernum", ",", "itemnum", ",", "batch_size", "=", "64", ",", "maxlen", "=", "10", ",", "n_workers", "=", "1", ")", ":", "\n", "        ", "self", ".", "result_queue", "=", "Queue", "(", "maxsize", "=", "n_workers", "*", "10", ")", "\n", "self", ".", "processors", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_workers", ")", ":", "\n", "            ", "self", ".", "processors", ".", "append", "(", "\n", "Process", "(", "target", "=", "sample_function", ",", "args", "=", "(", "User", ",", "\n", "usernum", ",", "\n", "itemnum", ",", "\n", "batch_size", ",", "\n", "maxlen", ",", "\n", "self", ".", "result_queue", ",", "\n", "np", ".", "random", ".", "randint", "(", "2e9", ")", "\n", ")", ")", ")", "\n", "self", ".", "processors", "[", "-", "1", "]", ".", "daemon", "=", "True", "\n", "self", ".", "processors", "[", "-", "1", "]", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DyGRec_ASReP.None.sampler.WarpSampler.next_batch": [[61, 63], ["sampler.WarpSampler.result_queue.get"], "methods", ["None"], ["", "", "def", "next_batch", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "result_queue", ".", "get", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DyGRec_ASReP.None.sampler.WarpSampler.close": [[64, 68], ["p.terminate", "p.join"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "processors", ":", "\n", "            ", "p", ".", "terminate", "(", ")", "\n", "p", ".", "join", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.DyGRec_ASReP.None.sampler.random_neq": [[5, 10], ["numpy.random.randint", "numpy.random.randint"], "function", ["None"], ["def", "random_neq", "(", "l", ",", "r", ",", "s", ")", ":", "\n", "    ", "t", "=", "np", ".", "random", ".", "randint", "(", "l", ",", "r", ")", "\n", "while", "t", "in", "s", ":", "\n", "        ", "t", "=", "np", ".", "random", ".", "randint", "(", "l", ",", "r", ")", "\n", "", "return", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.DyGRec_ASReP.None.sampler.sample_function": [[12, 42], ["numpy.random.seed", "numpy.random.randint", "numpy.zeros", "numpy.zeros", "numpy.zeros", "set", "reversed", "range", "result_queue.put", "len", "numpy.random.randint", "one_batch.append", "zip", "sampler.random_neq", "sampler.sample_function.sample"], "function", ["home.repos.pwc.inspect_result.DyGRec_ASReP.None.sampler.random_neq"], ["", "def", "sample_function", "(", "user_train", ",", "usernum", ",", "itemnum", ",", "batch_size", ",", "maxlen", ",", "result_queue", ",", "SEED", ")", ":", "\n", "    ", "def", "sample", "(", ")", ":", "\n", "\n", "        ", "user", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "usernum", "+", "1", ")", "\n", "while", "len", "(", "user_train", "[", "user", "]", ")", "<=", "1", ":", "user", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "usernum", "+", "1", ")", "\n", "\n", "seq", "=", "np", ".", "zeros", "(", "[", "maxlen", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "pos", "=", "np", ".", "zeros", "(", "[", "maxlen", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "neg", "=", "np", ".", "zeros", "(", "[", "maxlen", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "nxt", "=", "user_train", "[", "user", "]", "[", "-", "1", "]", "\n", "idx", "=", "maxlen", "-", "1", "\n", "\n", "ts", "=", "set", "(", "user_train", "[", "user", "]", ")", "\n", "for", "i", "in", "reversed", "(", "user_train", "[", "user", "]", "[", ":", "-", "1", "]", ")", ":", "\n", "            ", "seq", "[", "idx", "]", "=", "i", "\n", "pos", "[", "idx", "]", "=", "nxt", "\n", "if", "nxt", "!=", "0", ":", "neg", "[", "idx", "]", "=", "random_neq", "(", "1", ",", "itemnum", "+", "1", ",", "ts", ")", "\n", "nxt", "=", "i", "\n", "idx", "-=", "1", "\n", "if", "idx", "==", "-", "1", ":", "break", "\n", "\n", "", "return", "(", "user", ",", "seq", ",", "pos", ",", "neg", ")", "\n", "\n", "", "np", ".", "random", ".", "seed", "(", "SEED", ")", "\n", "while", "True", ":", "\n", "        ", "one_batch", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "one_batch", ".", "append", "(", "sample", "(", ")", ")", "\n", "\n", "", "result_queue", ".", "put", "(", "zip", "(", "*", "one_batch", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DyGRec_ASReP.None.model.Model.__init__": [[5, 112], ["tf.placeholder", "tf.placeholder", "tf.placeholder", "tf.placeholder", "tf.placeholder", "tf.expand_dims", "tf.math.equal", "tf.reshape", "tf.reshape", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.reshape", "tf.matmul", "tf.reshape", "tf.reduce_sum", "tf.reduce_sum", "tf.reshape", "tf.get_collection", "sum", "tf.summary.scalar", "tf.summary.merge_all", "tf.to_float", "tf.variable_scope", "modules.embedding", "modules.embedding", "tf.layers.dropout", "range", "modules.normalize", "tf.transpose", "tf.to_float", "tf.reduce_sum", "tf.reduce_sum", "tf.reduce_sum", "tf.reduce_sum", "tf.summary.scalar", "tf.Variable", "tf.train.AdamOptimizer", "model.Model.optimizer.minimize", "tf.summary.scalar", "tf.not_equal", "tf.tile", "tf.not_equal", "tf.expand_dims", "tf.convert_to_tensor", "tf.variable_scope", "modules.multihead_attention", "modules.feedforward", "tf.shape", "tf.range", "modules.normalize", "tf.shape", "tf.shape", "tf.shape", "tf.shape", "tf.log", "tf.shape", "modules.normalize", "tf.log", "tf.sign", "tf.shape", "tf.sigmoid", "tf.sigmoid"], "methods", ["home.repos.pwc.inspect_result.DyGRec_ASReP.None.modules.embedding", "home.repos.pwc.inspect_result.DyGRec_ASReP.None.modules.embedding", "home.repos.pwc.inspect_result.DyGRec_ASReP.None.modules.normalize", "home.repos.pwc.inspect_result.DyGRec_ASReP.None.modules.multihead_attention", "home.repos.pwc.inspect_result.DyGRec_ASReP.None.modules.feedforward", "home.repos.pwc.inspect_result.DyGRec_ASReP.None.modules.normalize", "home.repos.pwc.inspect_result.DyGRec_ASReP.None.modules.normalize"], ["    ", "def", "__init__", "(", "self", ",", "usernum", ",", "itemnum", ",", "args", ",", "reuse", "=", "None", ")", ":", "\n", "        ", "self", ".", "is_training", "=", "tf", ".", "placeholder", "(", "tf", ".", "bool", ",", "shape", "=", "(", ")", ")", "\n", "self", ".", "u", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ")", ")", "\n", "self", ".", "input_seq", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", "args", ".", "maxlen", ")", ")", "\n", "self", ".", "pos", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", "args", ".", "maxlen", ")", ")", "\n", "self", ".", "neg", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", "args", ".", "maxlen", ")", ")", "\n", "pos", "=", "self", ".", "pos", "\n", "neg", "=", "self", ".", "neg", "\n", "mask", "=", "tf", ".", "expand_dims", "(", "tf", ".", "to_float", "(", "tf", ".", "not_equal", "(", "self", ".", "input_seq", ",", "0", ")", ")", ",", "-", "1", ")", "\n", "\n", "src_masks", "=", "tf", ".", "math", ".", "equal", "(", "self", ".", "input_seq", ",", "0", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"SASRec\"", ",", "reuse", "=", "reuse", ")", ":", "\n", "# sequence embedding, item embedding table", "\n", "            ", "self", ".", "seq", ",", "item_emb_table", "=", "embedding", "(", "self", ".", "input_seq", ",", "\n", "vocab_size", "=", "itemnum", "+", "1", ",", "\n", "num_units", "=", "args", ".", "hidden_units", ",", "\n", "zero_pad", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "l2_reg", "=", "args", ".", "l2_emb", ",", "\n", "scope", "=", "\"input_embeddings\"", ",", "\n", "with_t", "=", "True", ",", "\n", "reuse", "=", "reuse", "\n", ")", "\n", "\n", "# Positional Encoding", "\n", "t", ",", "pos_emb_table", "=", "embedding", "(", "\n", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "tf", ".", "range", "(", "tf", ".", "shape", "(", "self", ".", "input_seq", ")", "[", "1", "]", ")", ",", "0", ")", ",", "[", "tf", ".", "shape", "(", "self", ".", "input_seq", ")", "[", "0", "]", ",", "1", "]", ")", ",", "\n", "vocab_size", "=", "args", ".", "maxlen", ",", "\n", "num_units", "=", "args", ".", "hidden_units", ",", "\n", "zero_pad", "=", "False", ",", "\n", "scale", "=", "False", ",", "\n", "l2_reg", "=", "args", ".", "l2_emb", ",", "\n", "scope", "=", "\"dec_pos\"", ",", "\n", "reuse", "=", "reuse", ",", "\n", "with_t", "=", "True", "\n", ")", "\n", "self", ".", "seq", "+=", "t", "\n", "\n", "# Dropout", "\n", "self", ".", "seq", "=", "tf", ".", "layers", ".", "dropout", "(", "self", ".", "seq", ",", "\n", "rate", "=", "args", ".", "dropout_rate", ",", "\n", "training", "=", "tf", ".", "convert_to_tensor", "(", "self", ".", "is_training", ")", ")", "\n", "self", ".", "seq", "*=", "mask", "\n", "\n", "# Build blocks", "\n", "\n", "for", "i", "in", "range", "(", "args", ".", "num_blocks", ")", ":", "\n", "                ", "with", "tf", ".", "variable_scope", "(", "\"num_blocks_%d\"", "%", "i", ")", ":", "\n", "\n", "# Self-attention", "\n", "                    ", "self", ".", "seq", "=", "multihead_attention", "(", "queries", "=", "normalize", "(", "self", ".", "seq", ")", ",", "\n", "keys", "=", "self", ".", "seq", ",", "\n", "values", "=", "self", ".", "seq", ",", "\n", "key_masks", "=", "src_masks", ",", "\n", "num_heads", "=", "args", ".", "num_heads", ",", "\n", "dropout_rate", "=", "args", ".", "dropout_rate", ",", "\n", "training", "=", "self", ".", "is_training", ",", "\n", "causality", "=", "True", ",", "\n", "scope", "=", "\"self_attention\"", ")", "\n", "\n", "# Feed forward", "\n", "self", ".", "seq", "=", "feedforward", "(", "normalize", "(", "self", ".", "seq", ")", ",", "num_units", "=", "[", "args", ".", "hidden_units", ",", "args", ".", "hidden_units", "]", ")", "\n", "self", ".", "seq", "*=", "mask", "\n", "\n", "", "", "self", ".", "seq", "=", "normalize", "(", "self", ".", "seq", ")", "\n", "\n", "", "pos", "=", "tf", ".", "reshape", "(", "pos", ",", "[", "tf", ".", "shape", "(", "self", ".", "input_seq", ")", "[", "0", "]", "*", "args", ".", "maxlen", "]", ")", "\n", "neg", "=", "tf", ".", "reshape", "(", "neg", ",", "[", "tf", ".", "shape", "(", "self", ".", "input_seq", ")", "[", "0", "]", "*", "args", ".", "maxlen", "]", ")", "\n", "pos_emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "item_emb_table", ",", "pos", ")", "\n", "neg_emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "item_emb_table", ",", "neg", ")", "\n", "seq_emb", "=", "tf", ".", "reshape", "(", "self", ".", "seq", ",", "[", "tf", ".", "shape", "(", "self", ".", "input_seq", ")", "[", "0", "]", "*", "args", ".", "maxlen", ",", "args", ".", "hidden_units", "]", ")", "\n", "\n", "#self.test_item = tf.placeholder(tf.int32, shape=(101))", "\n", "#test_item_emb = tf.nn.embedding_lookup(item_emb_table, self.test_item)", "\n", "test_item_emb", "=", "item_emb_table", "\n", "self", ".", "test_logits", "=", "tf", ".", "matmul", "(", "seq_emb", ",", "tf", ".", "transpose", "(", "test_item_emb", ")", ")", "\n", "self", ".", "test_logits", "=", "tf", ".", "reshape", "(", "self", ".", "test_logits", ",", "[", "tf", ".", "shape", "(", "self", ".", "input_seq", ")", "[", "0", "]", ",", "args", ".", "maxlen", ",", "itemnum", "+", "1", "]", ")", "\n", "self", ".", "test_logits", "=", "self", ".", "test_logits", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "\n", "# prediction layer", "\n", "self", ".", "pos_logits", "=", "tf", ".", "reduce_sum", "(", "pos_emb", "*", "seq_emb", ",", "-", "1", ")", "\n", "self", ".", "neg_logits", "=", "tf", ".", "reduce_sum", "(", "neg_emb", "*", "seq_emb", ",", "-", "1", ")", "\n", "\n", "# ignore padding items (0)", "\n", "istarget", "=", "tf", ".", "reshape", "(", "tf", ".", "to_float", "(", "tf", ".", "not_equal", "(", "pos", ",", "0", ")", ")", ",", "[", "tf", ".", "shape", "(", "self", ".", "input_seq", ")", "[", "0", "]", "*", "args", ".", "maxlen", "]", ")", "\n", "self", ".", "loss", "=", "tf", ".", "reduce_sum", "(", "\n", "-", "tf", ".", "log", "(", "tf", ".", "sigmoid", "(", "self", ".", "pos_logits", ")", "+", "1e-24", ")", "*", "istarget", "-", "\n", "tf", ".", "log", "(", "1", "-", "tf", ".", "sigmoid", "(", "self", ".", "neg_logits", ")", "+", "1e-24", ")", "*", "istarget", "\n", ")", "/", "tf", ".", "reduce_sum", "(", "istarget", ")", "\n", "reg_losses", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "REGULARIZATION_LOSSES", ")", "\n", "self", ".", "loss", "+=", "sum", "(", "reg_losses", ")", "\n", "\n", "tf", ".", "summary", ".", "scalar", "(", "'loss'", ",", "self", ".", "loss", ")", "\n", "self", ".", "auc", "=", "tf", ".", "reduce_sum", "(", "\n", "(", "(", "tf", ".", "sign", "(", "self", ".", "pos_logits", "-", "self", ".", "neg_logits", ")", "+", "1", ")", "/", "2", ")", "*", "istarget", "\n", ")", "/", "tf", ".", "reduce_sum", "(", "istarget", ")", "\n", "\n", "if", "reuse", "is", "None", ":", "\n", "            ", "tf", ".", "summary", ".", "scalar", "(", "'auc'", ",", "self", ".", "auc", ")", "\n", "self", ".", "global_step", "=", "tf", ".", "Variable", "(", "0", ",", "name", "=", "'global_step'", ",", "trainable", "=", "False", ")", "\n", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "args", ".", "lr", ",", "beta2", "=", "0.98", ")", "\n", "self", ".", "train_op", "=", "self", ".", "optimizer", ".", "minimize", "(", "self", ".", "loss", ",", "global_step", "=", "self", ".", "global_step", ")", "\n", "", "else", ":", "\n", "            ", "tf", ".", "summary", ".", "scalar", "(", "'test_auc'", ",", "self", ".", "auc", ")", "\n", "\n", "", "self", ".", "merged", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DyGRec_ASReP.None.model.Model.predict": [[113, 116], ["sess.run"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "sess", ",", "u", ",", "seq", ")", ":", "\n", "        ", "return", "sess", ".", "run", "(", "self", ".", "test_logits", ",", "\n", "{", "self", ".", "u", ":", "u", ",", "self", ".", "input_seq", ":", "seq", ",", "self", ".", "is_training", ":", "False", "}", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DyGRec_ASReP.None.util.load_file_and_sort": [[20, 57], ["collections.defaultdict", "print", "print", "print", "collections.defaultdict.items", "open", "sum", "augdata.items", "print", "print", "print", "print", "line.rstrip().split", "max", "max", "float", "data[].append", "sorted", "range", "sum", "sorted", "sorted", "int", "int", "len", "min", "data[].append", "line.rstrip", "collections.defaultdict.items", "len", "len", "len", "collections.defaultdict.items"], "function", ["None"], ["def", "load_file_and_sort", "(", "filename", ",", "reverse", "=", "False", ",", "augdata", "=", "None", ",", "aug_num", "=", "0", ",", "M", "=", "10", ")", ":", "\n", "    ", "data", "=", "defaultdict", "(", "list", ")", "\n", "max_uind", "=", "0", "\n", "max_iind", "=", "0", "\n", "with", "open", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "one_interaction", "=", "line", ".", "rstrip", "(", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "uind", "=", "int", "(", "one_interaction", "[", "0", "]", ")", "+", "1", "\n", "iind", "=", "int", "(", "one_interaction", "[", "1", "]", ")", "+", "1", "\n", "max_uind", "=", "max", "(", "max_uind", ",", "uind", ")", "\n", "max_iind", "=", "max", "(", "max_iind", ",", "iind", ")", "\n", "t", "=", "float", "(", "one_interaction", "[", "2", "]", ")", "\n", "data", "[", "uind", "]", ".", "append", "(", "(", "iind", ",", "t", ")", ")", "\n", "", "", "print", "(", "'data users: '", ",", "max_uind", ")", "\n", "print", "(", "'data items: '", ",", "max_iind", ")", "\n", "print", "(", "'data instances: '", ",", "sum", "(", "[", "len", "(", "ilist", ")", "for", "_", ",", "ilist", "in", "data", ".", "items", "(", ")", "]", ")", ")", "\n", "if", "augdata", ":", "\n", "        ", "for", "u", ",", "ilist", "in", "augdata", ".", "items", "(", ")", ":", "\n", "            ", "sorted_interactions", "=", "sorted", "(", "ilist", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "for", "i", "in", "range", "(", "min", "(", "aug_num", ",", "len", "(", "sorted_interactions", ")", ")", ")", ":", "\n", "                ", "if", "len", "(", "data", "[", "u", "]", ")", ">=", "M", ":", "continue", "\n", "data", "[", "u", "]", ".", "append", "(", "(", "sorted_interactions", "[", "i", "]", ")", ")", "\n", "", "", "print", "(", "'After augmentation:'", ")", "\n", "print", "(", "'data users: '", ",", "max_uind", ")", "\n", "print", "(", "'data items: '", ",", "max_iind", ")", "\n", "print", "(", "'data instances: '", ",", "sum", "(", "[", "len", "(", "ilist", ")", "for", "user", ",", "ilist", "in", "data", ".", "items", "(", ")", "]", ")", ")", "\n", "\n", "", "sorted_data", "=", "{", "}", "\n", "for", "u", ",", "i_list", "in", "data", ".", "items", "(", ")", ":", "\n", "        ", "if", "not", "reverse", ":", "\n", "            ", "sorted_interactions", "=", "sorted", "(", "i_list", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "sorted_interactions", "=", "sorted", "(", "i_list", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "", "seq", "=", "[", "interaction", "[", "0", "]", "for", "interaction", "in", "sorted_interactions", "]", "\n", "sorted_data", "[", "u", "]", "=", "seq", "\n", "\n", "", "return", "sorted_data", ",", "max_uind", ",", "max_iind", "\n", "\n"]], "home.repos.pwc.inspect_result.DyGRec_ASReP.None.util.augdata_load": [[59, 70], ["collections.defaultdict", "open", "line.rstrip().split", "float", "augdata[].append", "int", "int", "line.rstrip"], "function", ["None"], ["", "def", "augdata_load", "(", "aug_filename", ")", ":", "\n", "    ", "augdata", "=", "defaultdict", "(", "list", ")", "\n", "with", "open", "(", "aug_filename", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "one_interaction", "=", "line", ".", "rstrip", "(", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "uind", "=", "int", "(", "one_interaction", "[", "0", "]", ")", "+", "1", "\n", "iind", "=", "int", "(", "one_interaction", "[", "1", "]", ")", "+", "1", "\n", "t", "=", "float", "(", "one_interaction", "[", "2", "]", ")", "\n", "augdata", "[", "uind", "]", ".", "append", "(", "(", "iind", ",", "t", ")", ")", "\n", "\n", "", "", "return", "augdata", "\n", "\n"]], "home.repos.pwc.inspect_result.DyGRec_ASReP.None.util.data_load": [[73, 118], ["util.load_file_and_sort", "util.load_file_and_sort", "max", "max", "print", "util.load_file_and_sort", "util.load_file_and_sort", "os.path.exists", "util.load_file_and_sort", "util.load_file_and_sort", "len", "len", "data_name.split", "util.augdata_load", "print", "util.augdata_load", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.DyGRec_ASReP.None.util.load_file_and_sort", "home.repos.pwc.inspect_result.DyGRec_ASReP.None.util.load_file_and_sort", "home.repos.pwc.inspect_result.DyGRec_ASReP.None.util.load_file_and_sort", "home.repos.pwc.inspect_result.DyGRec_ASReP.None.util.load_file_and_sort", "home.repos.pwc.inspect_result.DyGRec_ASReP.None.util.load_file_and_sort", "home.repos.pwc.inspect_result.DyGRec_ASReP.None.util.load_file_and_sort", "home.repos.pwc.inspect_result.DyGRec_ASReP.None.util.augdata_load", "home.repos.pwc.inspect_result.DyGRec_ASReP.None.util.augdata_load"], ["", "def", "data_load", "(", "data_name", ",", "args", ")", ":", "\n", "    ", "reverseornot", "=", "args", ".", "reversed", "==", "1", "\n", "if", "not", "reverseornot", ":", "\n", "        ", "train_file", "=", "f\"./data/{data_name}/train.txt\"", "\n", "valid_file", "=", "f\"./data/{data_name}/valid.txt\"", "\n", "test_file", "=", "f\"./data/{data_name}/test.txt\"", "\n", "", "else", ":", "\n", "        ", "train_file", "=", "f\"./data/{data_name}/train_reverse.txt\"", "\n", "valid_file", "=", "f\"./data/{data_name}/valid_reverse.txt\"", "\n", "test_file", "=", "f\"./data/{data_name}/test_reverse.txt\"", "\n", "\n", "", "original_train", "=", "None", "\n", "augdata", "=", "None", "\n", "if", "'aug'", "in", "data_name", "or", "'itemcor'", "in", "data_name", ":", "\n", "        ", "original_dataname", "=", "''", "\n", "for", "substr", "in", "data_name", ".", "split", "(", "'_'", ")", "[", ":", "-", "1", "]", ":", "\n", "            ", "original_dataname", "+=", "substr", "+", "'_'", "\n", "", "original_dataname", "=", "original_dataname", "[", ":", "-", "1", "]", "\n", "original_train_file", "=", "f\"./data/{original_dataname}/train.txt\"", "\n", "original_train", ",", "_", ",", "_", "=", "load_file_and_sort", "(", "original_train_file", ")", "\n", "", "if", "args", ".", "aug_traindata", ">", "0", ":", "\n", "        ", "original_train_file", "=", "f\"./data/{data_name}/train.txt\"", "\n", "original_train", ",", "_", ",", "_", "=", "load_file_and_sort", "(", "original_train_file", ")", "\n", "aug_data_signature", "=", "'./aug_data/{}/lr_{}_maxlen_{}_hsize_{}_nblocks_{}_drate_{}_l2_{}_nheads_{}_gen_num_'", ".", "format", "(", "args", ".", "dataset", ",", "args", ".", "lr", ",", "args", ".", "maxlen", ",", "args", ".", "hidden_units", ",", "args", ".", "num_blocks", ",", "args", ".", "dropout_rate", ",", "args", ".", "l2_emb", ",", "args", ".", "num_heads", ")", "\n", "gen_num_max", "=", "20", "\n", "if", "os", ".", "path", ".", "exists", "(", "aug_data_signature", "+", "str", "(", "gen_num_max", ")", "+", "'_M_20.txt'", ")", ":", "\n", "            ", "augdata", "=", "augdata_load", "(", "aug_data_signature", "+", "str", "(", "gen_num_max", ")", "+", "'_M_20.txt'", ")", "\n", "print", "(", "'load '", ",", "aug_data_signature", "+", "str", "(", "gen_num_max", ")", "+", "'_M_20.txt'", ")", "\n", "", "else", ":", "\n", "            ", "gen_num_max", "=", "10", "\n", "augdata", "=", "augdata_load", "(", "aug_data_signature", "+", "'10_M_20.txt'", ")", "\n", "\n", "", "", "if", "args", ".", "aug_traindata", ">", "0", ":", "\n", "        ", "user_train", ",", "train_usernum", ",", "train_itemnum", "=", "load_file_and_sort", "(", "train_file", ",", "reverse", "=", "reverseornot", ",", "augdata", "=", "augdata", ",", "aug_num", "=", "args", ".", "aug_traindata", ",", "M", "=", "args", ".", "M", ")", "\n", "", "else", ":", "\n", "        ", "user_train", ",", "train_usernum", ",", "train_itemnum", "=", "load_file_and_sort", "(", "train_file", ",", "reverse", "=", "reverseornot", ")", "\n", "", "user_valid", ",", "valid_usernum", ",", "valid_itemnum", "=", "load_file_and_sort", "(", "valid_file", ",", "reverse", "=", "reverseornot", ")", "\n", "user_test", ",", "test_usernum", ",", "test_itemnum", "=", "load_file_and_sort", "(", "test_file", ",", "reverse", "=", "reverseornot", ")", "\n", "\n", "usernum", "=", "max", "(", "[", "train_usernum", ",", "valid_usernum", ",", "test_usernum", "]", ")", "\n", "itemnum", "=", "max", "(", "[", "train_itemnum", ",", "valid_itemnum", ",", "test_itemnum", "]", ")", "\n", "\n", "print", "(", "\"num: \"", ",", "len", "(", "user_valid", ")", ",", "len", "(", "user_test", ")", ",", "usernum", ",", "itemnum", ")", "\n", "\n", "return", "[", "user_train", ",", "user_valid", ",", "user_test", ",", "original_train", ",", "usernum", ",", "itemnum", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DyGRec_ASReP.None.util.data_augment": [[120, 165], ["copy.deepcopy", "copy.deepcopy", "list", "collections.defaultdict", "range", "train.keys", "enumerate", "numpy.zeros", "reversed", "set", "list", "batch_seq.append", "batch_item_idx.append", "batch_u.append", "collections.defaultdict.get", "model.predict", "range", "test.get", "len", "len", "set", "len", "len", "list", "cumulative_preds[].append", "train.get", "valid.get", "int", "int", "range", "numpy.array"], "function", ["home.repos.pwc.inspect_result.DyGRec_ASReP.None.model.Model.predict"], ["", "def", "data_augment", "(", "model", ",", "dataset", ",", "args", ",", "sess", ",", "gen_num", ")", ":", "\n", "    ", "[", "train", ",", "valid", ",", "test", ",", "original_train", ",", "usernum", ",", "itemnum", "]", "=", "copy", ".", "deepcopy", "(", "dataset", ")", "\n", "all_users", "=", "list", "(", "train", ".", "keys", "(", ")", ")", "\n", "\n", "cumulative_preds", "=", "defaultdict", "(", "list", ")", "\n", "for", "num_ind", "in", "range", "(", "gen_num", ")", ":", "\n", "        ", "batch_seq", "=", "[", "]", "\n", "batch_u", "=", "[", "]", "\n", "batch_item_idx", "=", "[", "]", "\n", "\n", "for", "u_ind", ",", "u", "in", "enumerate", "(", "all_users", ")", ":", "\n", "            ", "u_data", "=", "train", ".", "get", "(", "u", ",", "[", "]", ")", "+", "valid", ".", "get", "(", "u", ",", "[", "]", ")", "+", "test", ".", "get", "(", "u", ",", "[", "]", ")", "+", "cumulative_preds", ".", "get", "(", "u", ",", "[", "]", ")", "\n", "\n", "if", "len", "(", "u_data", ")", "==", "0", "or", "len", "(", "u_data", ")", ">=", "args", ".", "M", ":", "continue", "\n", "\n", "seq", "=", "np", ".", "zeros", "(", "[", "args", ".", "maxlen", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "idx", "=", "args", ".", "maxlen", "-", "1", "\n", "for", "i", "in", "reversed", "(", "u_data", ")", ":", "\n", "                ", "if", "idx", "==", "-", "1", ":", "break", "\n", "seq", "[", "idx", "]", "=", "i", "\n", "idx", "-=", "1", "\n", "", "rated", "=", "set", "(", "u_data", ")", "\n", "item_idx", "=", "list", "(", "set", "(", "[", "i", "for", "i", "in", "range", "(", "itemnum", ")", "]", ")", "-", "rated", ")", "\n", "\n", "batch_seq", ".", "append", "(", "seq", ")", "\n", "batch_item_idx", ".", "append", "(", "item_idx", ")", "\n", "batch_u", ".", "append", "(", "u", ")", "\n", "\n", "if", "(", "u_ind", "+", "1", ")", "%", "int", "(", "args", ".", "batch_size", "/", "16", ")", "==", "0", "or", "u_ind", "+", "1", "==", "len", "(", "all_users", ")", ":", "\n", "                ", "predictions", "=", "model", ".", "predict", "(", "sess", ",", "batch_u", ",", "batch_seq", ")", "\n", "for", "batch_ind", "in", "range", "(", "len", "(", "batch_item_idx", ")", ")", ":", "\n", "                    ", "test_item_idx", "=", "batch_item_idx", "[", "batch_ind", "]", "\n", "test_predictions", "=", "predictions", "[", "batch_ind", "]", "[", "test_item_idx", "]", "\n", "\n", "ranked_items_ind", "=", "list", "(", "(", "-", "1", "*", "np", ".", "array", "(", "test_predictions", ")", ")", ".", "argsort", "(", ")", ")", "\n", "rankeditem_oneuserids", "=", "[", "int", "(", "test_item_idx", "[", "i", "]", ")", "for", "i", "in", "ranked_items_ind", "]", "\n", "\n", "u_batch_ind", "=", "batch_u", "[", "batch_ind", "]", "\n", "cumulative_preds", "[", "u_batch_ind", "]", ".", "append", "(", "rankeditem_oneuserids", "[", "0", "]", ")", "\n", "\n", "", "batch_seq", "=", "[", "]", "\n", "batch_item_idx", "=", "[", "]", "\n", "batch_u", "=", "[", "]", "\n", "\n", "", "", "", "return", "cumulative_preds", "\n", "\n"]], "home.repos.pwc.inspect_result.DyGRec_ASReP.None.util.eval_one_interaction": [[168, 197], ["numpy.array", "numpy.zeros_like", "numpy.zeros_like", "range", "metrics.auc", "metrics.mrr", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "len", "len", "util.rank_corrected", "len", "metrics.precision_at_k", "metrics.recall", "metrics.ndcg_at_k", "metrics.hit_at_k", "len", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.DyGRec_ASReP.None.metrics.auc", "home.repos.pwc.inspect_result.DyGRec_ASReP.None.metrics.mrr", "home.repos.pwc.inspect_result.DyGRec_ASReP.None.util.rank_corrected", "home.repos.pwc.inspect_result.DyGRec_ASReP.None.metrics.precision_at_k", "home.repos.pwc.inspect_result.DyGRec_ASReP.None.metrics.recall", "home.repos.pwc.inspect_result.DyGRec_ASReP.None.metrics.ndcg_at_k", "home.repos.pwc.inspect_result.DyGRec_ASReP.None.metrics.hit_at_k"], ["", "def", "eval_one_interaction", "(", "x", ")", ":", "\n", "    ", "results", "=", "{", "\n", "\"precision\"", ":", "np", ".", "zeros", "(", "len", "(", "Ks", ")", ")", ",", "\n", "\"recall\"", ":", "np", ".", "zeros", "(", "len", "(", "Ks", ")", ")", ",", "\n", "\"ndcg\"", ":", "np", ".", "zeros", "(", "len", "(", "Ks", ")", ")", ",", "\n", "\"hit_ratio\"", ":", "np", ".", "zeros", "(", "len", "(", "Ks", ")", ")", ",", "\n", "\"auc\"", ":", "0.", ",", "\n", "\"mrr\"", ":", "0.", ",", "\n", "}", "\n", "rankeditems", "=", "np", ".", "array", "(", "x", "[", "0", "]", ")", "\n", "test_ind", "=", "x", "[", "1", "]", "\n", "scale_pred", "=", "x", "[", "2", "]", "\n", "test_item", "=", "x", "[", "3", "]", "\n", "r", "=", "np", ".", "zeros_like", "(", "rankeditems", ")", "\n", "r", "[", "rankeditems", "==", "test_ind", "]", "=", "1", "\n", "if", "len", "(", "r", ")", "!=", "len", "(", "scale_pred", ")", ":", "\n", "        ", "r", "=", "rank_corrected", "(", "r", ",", "len", "(", "r", ")", "-", "1", ",", "len", "(", "scale_pred", ")", ")", "\n", "", "gd_prob", "=", "np", ".", "zeros_like", "(", "rankeditems", ")", "\n", "gd_prob", "[", "test_ind", "]", "=", "1", "\n", "\n", "for", "ind_k", "in", "range", "(", "len", "(", "Ks", ")", ")", ":", "\n", "        ", "results", "[", "\"precision\"", "]", "[", "ind_k", "]", "+=", "precision_at_k", "(", "r", ",", "Ks", "[", "ind_k", "]", ")", "\n", "results", "[", "\"recall\"", "]", "[", "ind_k", "]", "+=", "recall", "(", "rankeditems", ",", "[", "test_ind", "]", ",", "Ks", "[", "ind_k", "]", ")", "\n", "results", "[", "\"ndcg\"", "]", "[", "ind_k", "]", "+=", "ndcg_at_k", "(", "r", ",", "Ks", "[", "ind_k", "]", ",", "1", ")", "\n", "results", "[", "\"hit_ratio\"", "]", "[", "ind_k", "]", "+=", "hit_at_k", "(", "r", ",", "Ks", "[", "ind_k", "]", ")", "\n", "", "results", "[", "\"auc\"", "]", "+=", "auc", "(", "gd_prob", ",", "scale_pred", ")", "\n", "results", "[", "\"mrr\"", "]", "+=", "mrr", "(", "r", ")", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.DyGRec_ASReP.None.util.rank_corrected": [[199, 209], ["numpy.zeros_like", "list", "numpy.argwhere", "int", "numpy.sum", "numpy.floor", "len"], "function", ["None"], ["", "def", "rank_corrected", "(", "r", ",", "m", ",", "n", ")", ":", "\n", "    ", "pos_ranks", "=", "np", ".", "argwhere", "(", "r", "==", "1", ")", "[", ":", ",", "0", "]", "\n", "corrected_r", "=", "np", ".", "zeros_like", "(", "r", ")", "\n", "for", "each_sample_rank", "in", "list", "(", "pos_ranks", ")", ":", "\n", "        ", "corrected_rank", "=", "int", "(", "np", ".", "floor", "(", "(", "(", "n", "-", "1", ")", "*", "each_sample_rank", ")", "/", "m", ")", ")", "\n", "if", "corrected_rank", ">=", "len", "(", "corrected_r", ")", "-", "1", ":", "\n", "            ", "continue", "\n", "", "corrected_r", "[", "corrected_rank", "]", "=", "1", "\n", "", "assert", "np", ".", "sum", "(", "corrected_r", ")", "<=", "1", "\n", "return", "corrected_r", "\n", "\n"]], "home.repos.pwc.inspect_result.DyGRec_ASReP.None.util.evaluate": [[211, 578], ["copy.deepcopy", "copy.deepcopy", "multiprocessing.Pool", "eval_data.items", "range", "zip", "multiprocessing.Pool.map", "len", "len", "len", "len", "len", "len", "print", "zip", "multiprocessing.Pool.map", "len", "len", "len", "len", "len", "len", "print", "zip", "multiprocessing.Pool.map", "len", "len", "len", "len", "len", "len", "print", "zip", "multiprocessing.Pool.map", "len", "len", "len", "len", "len", "len", "print", "zip", "multiprocessing.Pool.map", "len", "len", "len", "len", "len", "len", "print", "zip", "multiprocessing.Pool.map", "len", "len", "len", "len", "len", "len", "print", "zip", "multiprocessing.Pool.map", "len", "len", "len", "len", "len", "len", "print", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "set", "set.add", "numpy.zeros", "reversed", "batch_seq.append", "batch_item_idx.append", "batch_u.append", "len", "sklearn.preprocessing.MinMaxScaler", "list", "rankeditems_list.append", "test_indices.append", "test_allitems.append", "scale_pred_list.append", "list", "all_predictions_results_output.append", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "set", "list", "list", "model.predict", "range", "list", "len", "short_seq_rankeditems_list.append", "short_seq_test_indices.append", "short_seq_scale_pred_list.append", "short_seq_test_allitems.append", "len", "short7_seq_rankeditems_list.append", "short7_seq_test_indices.append", "short7_seq_scale_pred_list.append", "short7_seq_test_allitems.append", "short37_seq_rankeditems_list.append", "short37_seq_test_indices.append", "short37_seq_scale_pred_list.append", "short37_seq_test_allitems.append", "medium3_seq_rankeditems_list.append", "medium3_seq_test_indices.append", "medium3_seq_scale_pred_list.append", "medium3_seq_test_allitems.append", "medium7_seq_rankeditems_list.append", "medium7_seq_test_indices.append", "medium7_seq_scale_pred_list.append", "medium7_seq_test_allitems.append", "len", "long_seq_rankeditems_list.append", "long_seq_test_indices.append", "long_seq_scale_pred_list.append", "long_seq_test_allitems.append", "int", "int", "int", "int", "len", "len", "valid.get", "reversed", "len", "list", "len", "all_predictions_results.append", "all_item_idx.append", "all_u.append", "numpy.transpose", "len", "len", "len", "len", "len", "len", "list", "list", "len", "len", "len", "len", "len", "len", "len", "set", "set", "numpy.random.choice", "len", "int", "sklearn.preprocessing.MinMaxScaler.fit_transform", "set", "set", "numpy.transpose", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "range", "range"], "function", ["home.repos.pwc.inspect_result.DyGRec_ASReP.None.model.Model.predict"], ["", "def", "evaluate", "(", "model", ",", "dataset", ",", "args", ",", "sess", ",", "testorvalid", ")", ":", "\n", "    ", "[", "train", ",", "valid", ",", "test", ",", "original_train", ",", "usernum", ",", "itemnum", "]", "=", "copy", ".", "deepcopy", "(", "dataset", ")", "\n", "results", "=", "{", "\n", "\"precision\"", ":", "np", ".", "zeros", "(", "len", "(", "Ks", ")", ")", ",", "\n", "\"recall\"", ":", "np", ".", "zeros", "(", "len", "(", "Ks", ")", ")", ",", "\n", "\"ndcg\"", ":", "np", ".", "zeros", "(", "len", "(", "Ks", ")", ")", ",", "\n", "\"hit_ratio\"", ":", "np", ".", "zeros", "(", "len", "(", "Ks", ")", ")", ",", "\n", "\"auc\"", ":", "0.", ",", "\n", "\"mrr\"", ":", "0.", ",", "\n", "}", "\n", "\n", "short_seq_results", "=", "{", "\n", "\"precision\"", ":", "np", ".", "zeros", "(", "len", "(", "Ks", ")", ")", ",", "\n", "\"recall\"", ":", "np", ".", "zeros", "(", "len", "(", "Ks", ")", ")", ",", "\n", "\"ndcg\"", ":", "np", ".", "zeros", "(", "len", "(", "Ks", ")", ")", ",", "\n", "\"hit_ratio\"", ":", "np", ".", "zeros", "(", "len", "(", "Ks", ")", ")", ",", "\n", "\"auc\"", ":", "0.", ",", "\n", "\"mrr\"", ":", "0.", ",", "\n", "}", "\n", "\n", "long_seq_results", "=", "{", "\n", "\"precision\"", ":", "np", ".", "zeros", "(", "len", "(", "Ks", ")", ")", ",", "\n", "\"recall\"", ":", "np", ".", "zeros", "(", "len", "(", "Ks", ")", ")", ",", "\n", "\"ndcg\"", ":", "np", ".", "zeros", "(", "len", "(", "Ks", ")", ")", ",", "\n", "\"hit_ratio\"", ":", "np", ".", "zeros", "(", "len", "(", "Ks", ")", ")", ",", "\n", "\"auc\"", ":", "0.", ",", "\n", "\"mrr\"", ":", "0.", ",", "\n", "}", "\n", "\n", "short7_seq_results", "=", "{", "\n", "\"precision\"", ":", "np", ".", "zeros", "(", "len", "(", "Ks", ")", ")", ",", "\n", "\"recall\"", ":", "np", ".", "zeros", "(", "len", "(", "Ks", ")", ")", ",", "\n", "\"ndcg\"", ":", "np", ".", "zeros", "(", "len", "(", "Ks", ")", ")", ",", "\n", "\"hit_ratio\"", ":", "np", ".", "zeros", "(", "len", "(", "Ks", ")", ")", ",", "\n", "\"auc\"", ":", "0.", ",", "\n", "\"mrr\"", ":", "0.", ",", "\n", "}", "\n", "\n", "short37_seq_results", "=", "{", "\n", "\"precision\"", ":", "np", ".", "zeros", "(", "len", "(", "Ks", ")", ")", ",", "\n", "\"recall\"", ":", "np", ".", "zeros", "(", "len", "(", "Ks", ")", ")", ",", "\n", "\"ndcg\"", ":", "np", ".", "zeros", "(", "len", "(", "Ks", ")", ")", ",", "\n", "\"hit_ratio\"", ":", "np", ".", "zeros", "(", "len", "(", "Ks", ")", ")", ",", "\n", "\"auc\"", ":", "0.", ",", "\n", "\"mrr\"", ":", "0.", ",", "\n", "}", "\n", "\n", "medium3_seq_results", "=", "{", "\n", "\"precision\"", ":", "np", ".", "zeros", "(", "len", "(", "Ks", ")", ")", ",", "\n", "\"recall\"", ":", "np", ".", "zeros", "(", "len", "(", "Ks", ")", ")", ",", "\n", "\"ndcg\"", ":", "np", ".", "zeros", "(", "len", "(", "Ks", ")", ")", ",", "\n", "\"hit_ratio\"", ":", "np", ".", "zeros", "(", "len", "(", "Ks", ")", ")", ",", "\n", "\"auc\"", ":", "0.", ",", "\n", "\"mrr\"", ":", "0.", ",", "\n", "}", "\n", "\n", "medium7_seq_results", "=", "{", "\n", "\"precision\"", ":", "np", ".", "zeros", "(", "len", "(", "Ks", ")", ")", ",", "\n", "\"recall\"", ":", "np", ".", "zeros", "(", "len", "(", "Ks", ")", ")", ",", "\n", "\"ndcg\"", ":", "np", ".", "zeros", "(", "len", "(", "Ks", ")", ")", ",", "\n", "\"hit_ratio\"", ":", "np", ".", "zeros", "(", "len", "(", "Ks", ")", ")", ",", "\n", "\"auc\"", ":", "0.", ",", "\n", "\"mrr\"", ":", "0.", ",", "\n", "}", "\n", "rs", "=", "[", "]", "\n", "\n", "if", "testorvalid", "==", "\"test\"", ":", "\n", "        ", "eval_data", "=", "test", "\n", "", "else", ":", "\n", "        ", "eval_data", "=", "valid", "\n", "", "num_valid_interactions", "=", "0", "\n", "pool", "=", "multiprocessing", ".", "Pool", "(", "cores", ")", "\n", "\n", "all_predictions_results", "=", "[", "]", "\n", "all_item_idx", "=", "[", "]", "\n", "all_u", "=", "[", "]", "\n", "\n", "batch_seq", "=", "[", "]", "\n", "batch_u", "=", "[", "]", "\n", "batch_item_idx", "=", "[", "]", "\n", "\n", "\n", "u_ind", "=", "0", "\n", "for", "u", ",", "i_list", "in", "eval_data", ".", "items", "(", ")", ":", "\n", "        ", "u_ind", "+=", "1", "\n", "if", "len", "(", "train", "[", "u", "]", ")", "<", "1", "or", "len", "(", "eval_data", "[", "u", "]", ")", "<", "1", ":", "continue", "\n", "\n", "\n", "rated", "=", "set", "(", "train", "[", "u", "]", ")", "\n", "rated", ".", "add", "(", "0", ")", "\n", "if", "testorvalid", "==", "\"test\"", ":", "\n", "            ", "valid_set", "=", "set", "(", "valid", ".", "get", "(", "u", ",", "[", "]", ")", ")", "\n", "rated", "=", "rated", "|", "valid_set", "\n", "\n", "", "seq", "=", "np", ".", "zeros", "(", "[", "args", ".", "maxlen", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "idx", "=", "args", ".", "maxlen", "-", "1", "\n", "if", "testorvalid", "==", "\"test\"", ":", "\n", "            ", "if", "u", "in", "valid", ":", "\n", "                ", "for", "i", "in", "reversed", "(", "valid", "[", "u", "]", ")", ":", "\n", "                    ", "if", "idx", "==", "-", "1", ":", "break", "\n", "seq", "[", "idx", "]", "=", "i", "\n", "idx", "-=", "1", "\n", "", "", "", "for", "i", "in", "reversed", "(", "train", "[", "u", "]", ")", ":", "\n", "            ", "if", "idx", "==", "-", "1", ":", "break", "\n", "seq", "[", "idx", "]", "=", "i", "\n", "idx", "-=", "1", "\n", "", "item_idx", "=", "[", "i_list", "[", "0", "]", "]", "\n", "if", "args", ".", "evalnegsample", "==", "-", "1", ":", "\n", "            ", "item_idx", "+=", "list", "(", "set", "(", "[", "i", "for", "i", "in", "range", "(", "1", ",", "itemnum", "+", "1", ")", "]", ")", "-", "rated", "-", "set", "(", "[", "i_list", "[", "0", "]", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "item_candiates", "=", "list", "(", "set", "(", "[", "i", "for", "i", "in", "range", "(", "1", ",", "itemnum", "+", "1", ")", "]", ")", "-", "rated", "-", "set", "(", "[", "i_list", "[", "0", "]", "]", ")", ")", "\n", "if", "args", ".", "evalnegsample", ">=", "len", "(", "item_candiates", ")", ":", "\n", "                ", "item_idx", "+=", "item_candiates", "\n", "", "else", ":", "\n", "                ", "item_idx", "+=", "list", "(", "np", ".", "random", ".", "choice", "(", "item_candiates", ",", "size", "=", "args", ".", "evalnegsample", ",", "replace", "=", "False", ")", ")", "\n", "\n", "", "", "batch_seq", ".", "append", "(", "seq", ")", "\n", "batch_item_idx", ".", "append", "(", "item_idx", ")", "\n", "batch_u", ".", "append", "(", "u", ")", "\n", "\n", "if", "len", "(", "batch_u", ")", "%", "int", "(", "args", ".", "batch_size", "/", "8", ")", "==", "0", "or", "u_ind", "==", "len", "(", "eval_data", ")", ":", "\n", "            ", "predictions", "=", "model", ".", "predict", "(", "sess", ",", "batch_u", ",", "batch_seq", ")", "\n", "for", "pred_ind", "in", "range", "(", "predictions", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "all_predictions_results", ".", "append", "(", "predictions", "[", "pred_ind", "]", ")", "\n", "all_item_idx", ".", "append", "(", "batch_item_idx", "[", "pred_ind", "]", ")", "\n", "all_u", ".", "append", "(", "batch_u", "[", "pred_ind", "]", ")", "\n", "\n", "", "batch_seq", "=", "[", "]", "\n", "batch_item_idx", "=", "[", "]", "\n", "batch_u", "=", "[", "]", "\n", "\n", "\n", "", "", "rankeditems_list", "=", "[", "]", "\n", "test_indices", "=", "[", "]", "\n", "scale_pred_list", "=", "[", "]", "\n", "test_allitems", "=", "[", "]", "\n", "\n", "short_seq_rankeditems_list", "=", "[", "]", "\n", "short_seq_test_indices", "=", "[", "]", "\n", "short_seq_scale_pred_list", "=", "[", "]", "\n", "short_seq_test_allitems", "=", "[", "]", "\n", "\n", "short7_seq_rankeditems_list", "=", "[", "]", "\n", "short7_seq_test_indices", "=", "[", "]", "\n", "short7_seq_scale_pred_list", "=", "[", "]", "\n", "short7_seq_test_allitems", "=", "[", "]", "\n", "\n", "short37_seq_rankeditems_list", "=", "[", "]", "\n", "short37_seq_test_indices", "=", "[", "]", "\n", "short37_seq_scale_pred_list", "=", "[", "]", "\n", "short37_seq_test_allitems", "=", "[", "]", "\n", "\n", "medium3_seq_rankeditems_list", "=", "[", "]", "\n", "medium3_seq_test_indices", "=", "[", "]", "\n", "medium3_seq_scale_pred_list", "=", "[", "]", "\n", "medium3_seq_test_allitems", "=", "[", "]", "\n", "\n", "medium7_seq_rankeditems_list", "=", "[", "]", "\n", "medium7_seq_test_indices", "=", "[", "]", "\n", "medium7_seq_scale_pred_list", "=", "[", "]", "\n", "medium7_seq_test_allitems", "=", "[", "]", "\n", "\n", "\n", "long_seq_rankeditems_list", "=", "[", "]", "\n", "long_seq_test_indices", "=", "[", "]", "\n", "long_seq_scale_pred_list", "=", "[", "]", "\n", "long_seq_test_allitems", "=", "[", "]", "\n", "\n", "rankeditemid_list", "=", "[", "]", "\n", "rankeditemid_scores", "=", "[", "]", "\n", "\n", "all_predictions_results_output", "=", "[", "]", "\n", "\n", "for", "ind", "in", "range", "(", "len", "(", "all_predictions_results", ")", ")", ":", "\n", "        ", "test_item_idx", "=", "all_item_idx", "[", "ind", "]", "\n", "unk_predictions", "=", "all_predictions_results", "[", "ind", "]", "[", "test_item_idx", "]", "\n", "\n", "scaler", "=", "MinMaxScaler", "(", ")", "\n", "scale_pred", "=", "list", "(", "np", ".", "transpose", "(", "scaler", ".", "fit_transform", "(", "np", ".", "transpose", "(", "np", ".", "array", "(", "[", "unk_predictions", "]", ")", ")", ")", ")", "[", "0", "]", ")", "\n", "\n", "rankeditems_list", ".", "append", "(", "list", "(", "(", "-", "1", "*", "np", ".", "array", "(", "unk_predictions", ")", ")", ".", "argsort", "(", ")", ")", ")", "\n", "test_indices", ".", "append", "(", "0", ")", "\n", "test_allitems", ".", "append", "(", "test_item_idx", "[", "0", "]", ")", "\n", "scale_pred_list", ".", "append", "(", "scale_pred", ")", "\n", "\n", "if", "'aug'", "in", "args", ".", "dataset", "or", "'itemco'", "in", "args", ".", "dataset", "or", "args", ".", "aug_traindata", ">", "0", ":", "\n", "            ", "real_train", "=", "original_train", "\n", "", "else", ":", "\n", "            ", "real_train", "=", "train", "\n", "\n", "", "sorted_ind", "=", "list", "(", "(", "-", "1", "*", "np", ".", "array", "(", "unk_predictions", ")", ")", ".", "argsort", "(", ")", ")", "\n", "if", "len", "(", "real_train", "[", "all_u", "[", "ind", "]", "]", ")", "<=", "3", ":", "\n", "            ", "short_seq_rankeditems_list", ".", "append", "(", "sorted_ind", ")", "\n", "short_seq_test_indices", ".", "append", "(", "0", ")", "\n", "short_seq_scale_pred_list", ".", "append", "(", "scale_pred", ")", "\n", "short_seq_test_allitems", ".", "append", "(", "test_item_idx", "[", "0", "]", ")", "\n", "\n", "", "if", "len", "(", "real_train", "[", "all_u", "[", "ind", "]", "]", ")", "<=", "7", ":", "\n", "            ", "short7_seq_rankeditems_list", ".", "append", "(", "sorted_ind", ")", "\n", "short7_seq_test_indices", ".", "append", "(", "0", ")", "\n", "short7_seq_scale_pred_list", ".", "append", "(", "scale_pred", ")", "\n", "short7_seq_test_allitems", ".", "append", "(", "test_item_idx", "[", "0", "]", ")", "\n", "\n", "", "if", "len", "(", "real_train", "[", "all_u", "[", "ind", "]", "]", ")", ">", "3", "and", "len", "(", "real_train", "[", "all_u", "[", "ind", "]", "]", ")", "<=", "7", ":", "\n", "            ", "short37_seq_rankeditems_list", ".", "append", "(", "sorted_ind", ")", "\n", "short37_seq_test_indices", ".", "append", "(", "0", ")", "\n", "short37_seq_scale_pred_list", ".", "append", "(", "scale_pred", ")", "\n", "short37_seq_test_allitems", ".", "append", "(", "test_item_idx", "[", "0", "]", ")", "\n", "\n", "", "if", "len", "(", "real_train", "[", "all_u", "[", "ind", "]", "]", ")", ">", "3", "and", "len", "(", "real_train", "[", "all_u", "[", "ind", "]", "]", ")", "<", "20", ":", "\n", "            ", "medium3_seq_rankeditems_list", ".", "append", "(", "sorted_ind", ")", "\n", "medium3_seq_test_indices", ".", "append", "(", "0", ")", "\n", "medium3_seq_scale_pred_list", ".", "append", "(", "scale_pred", ")", "\n", "medium3_seq_test_allitems", ".", "append", "(", "test_item_idx", "[", "0", "]", ")", "\n", "\n", "", "if", "len", "(", "real_train", "[", "all_u", "[", "ind", "]", "]", ")", ">", "7", "and", "len", "(", "real_train", "[", "all_u", "[", "ind", "]", "]", ")", "<", "20", ":", "\n", "            ", "medium7_seq_rankeditems_list", ".", "append", "(", "sorted_ind", ")", "\n", "medium7_seq_test_indices", ".", "append", "(", "0", ")", "\n", "medium7_seq_scale_pred_list", ".", "append", "(", "scale_pred", ")", "\n", "medium7_seq_test_allitems", ".", "append", "(", "test_item_idx", "[", "0", "]", ")", "\n", "\n", "", "if", "len", "(", "real_train", "[", "all_u", "[", "ind", "]", "]", ")", ">=", "20", ":", "\n", "            ", "long_seq_rankeditems_list", ".", "append", "(", "sorted_ind", ")", "\n", "long_seq_test_indices", ".", "append", "(", "0", ")", "\n", "long_seq_scale_pred_list", ".", "append", "(", "scale_pred", ")", "\n", "long_seq_test_allitems", ".", "append", "(", "test_item_idx", "[", "0", "]", ")", "\n", "\n", "\n", "", "rankeditem_oneuserids", "=", "[", "int", "(", "test_item_idx", "[", "i", "]", ")", "for", "i", "in", "list", "(", "(", "-", "1", "*", "np", ".", "array", "(", "unk_predictions", ")", ")", ".", "argsort", "(", ")", ")", "]", "\n", "rankeditem_scores", "=", "[", "unk_predictions", "[", "i", "]", "for", "i", "in", "list", "(", "(", "-", "1", "*", "np", ".", "array", "(", "unk_predictions", ")", ")", ".", "argsort", "(", ")", ")", "]", "\n", "\n", "one_pred_result", "=", "{", "\"u_ind\"", ":", "int", "(", "all_u", "[", "ind", "]", ")", ",", "\"u_pos_gd\"", ":", "int", "(", "test_item_idx", "[", "0", "]", ")", "}", "\n", "one_pred_result", "[", "\"predicted\"", "]", "=", "[", "int", "(", "item_id_pred", ")", "for", "item_id_pred", "in", "rankeditem_oneuserids", "[", ":", "100", "]", "]", "\n", "all_predictions_results_output", ".", "append", "(", "one_pred_result", ")", "\n", "\n", "\n", "", "batch_data", "=", "zip", "(", "rankeditems_list", ",", "test_indices", ",", "scale_pred_list", ",", "test_allitems", ")", "\n", "batch_result", "=", "pool", ".", "map", "(", "eval_one_interaction", ",", "batch_data", ")", "\n", "for", "re", "in", "batch_result", ":", "\n", "        ", "results", "[", "\"precision\"", "]", "+=", "re", "[", "\"precision\"", "]", "\n", "results", "[", "\"recall\"", "]", "+=", "re", "[", "\"recall\"", "]", "\n", "results", "[", "\"ndcg\"", "]", "+=", "re", "[", "\"ndcg\"", "]", "\n", "results", "[", "\"hit_ratio\"", "]", "+=", "re", "[", "\"hit_ratio\"", "]", "\n", "results", "[", "\"auc\"", "]", "+=", "re", "[", "\"auc\"", "]", "\n", "results", "[", "\"mrr\"", "]", "+=", "re", "[", "\"mrr\"", "]", "\n", "", "results", "[", "\"precision\"", "]", "/=", "len", "(", "eval_data", ")", "\n", "results", "[", "\"recall\"", "]", "/=", "len", "(", "eval_data", ")", "\n", "results", "[", "\"ndcg\"", "]", "/=", "len", "(", "eval_data", ")", "\n", "results", "[", "\"hit_ratio\"", "]", "/=", "len", "(", "eval_data", ")", "\n", "results", "[", "\"auc\"", "]", "/=", "len", "(", "eval_data", ")", "\n", "results", "[", "\"mrr\"", "]", "/=", "len", "(", "eval_data", ")", "\n", "print", "(", "f\"testing #of users: {len(eval_data)}\"", ")", "\n", "\n", "\n", "\n", "short_seq_batch_data", "=", "zip", "(", "short_seq_rankeditems_list", ",", "short_seq_test_indices", ",", "short_seq_scale_pred_list", ",", "short_seq_test_allitems", ")", "\n", "short_seq_batch_result", "=", "pool", ".", "map", "(", "eval_one_interaction", ",", "short_seq_batch_data", ")", "\n", "for", "re", "in", "short_seq_batch_result", ":", "\n", "        ", "short_seq_results", "[", "\"precision\"", "]", "+=", "re", "[", "\"precision\"", "]", "\n", "short_seq_results", "[", "\"recall\"", "]", "+=", "re", "[", "\"recall\"", "]", "\n", "short_seq_results", "[", "\"ndcg\"", "]", "+=", "re", "[", "\"ndcg\"", "]", "\n", "short_seq_results", "[", "\"hit_ratio\"", "]", "+=", "re", "[", "\"hit_ratio\"", "]", "\n", "short_seq_results", "[", "\"auc\"", "]", "+=", "re", "[", "\"auc\"", "]", "\n", "short_seq_results", "[", "\"mrr\"", "]", "+=", "re", "[", "\"mrr\"", "]", "\n", "", "short_seq_results", "[", "\"precision\"", "]", "/=", "len", "(", "short_seq_test_indices", ")", "\n", "short_seq_results", "[", "\"recall\"", "]", "/=", "len", "(", "short_seq_test_indices", ")", "\n", "short_seq_results", "[", "\"ndcg\"", "]", "/=", "len", "(", "short_seq_test_indices", ")", "\n", "short_seq_results", "[", "\"hit_ratio\"", "]", "/=", "len", "(", "short_seq_test_indices", ")", "\n", "short_seq_results", "[", "\"auc\"", "]", "/=", "len", "(", "short_seq_test_indices", ")", "\n", "short_seq_results", "[", "\"mrr\"", "]", "/=", "len", "(", "short_seq_test_indices", ")", "\n", "\n", "print", "(", "f\"testing #of short seq users with less than 3 training points: {len(short_seq_test_indices)}\"", ")", "\n", "\n", "\n", "\n", "short7_seq_batch_data", "=", "zip", "(", "short7_seq_rankeditems_list", ",", "short7_seq_test_indices", ",", "short7_seq_scale_pred_list", ",", "short7_seq_test_allitems", ")", "\n", "short7_seq_batch_result", "=", "pool", ".", "map", "(", "eval_one_interaction", ",", "short7_seq_batch_data", ")", "\n", "for", "re", "in", "short7_seq_batch_result", ":", "\n", "        ", "short7_seq_results", "[", "\"precision\"", "]", "+=", "re", "[", "\"precision\"", "]", "\n", "short7_seq_results", "[", "\"recall\"", "]", "+=", "re", "[", "\"recall\"", "]", "\n", "short7_seq_results", "[", "\"ndcg\"", "]", "+=", "re", "[", "\"ndcg\"", "]", "\n", "short7_seq_results", "[", "\"hit_ratio\"", "]", "+=", "re", "[", "\"hit_ratio\"", "]", "\n", "short7_seq_results", "[", "\"auc\"", "]", "+=", "re", "[", "\"auc\"", "]", "\n", "short7_seq_results", "[", "\"mrr\"", "]", "+=", "re", "[", "\"mrr\"", "]", "\n", "", "short7_seq_results", "[", "\"precision\"", "]", "/=", "len", "(", "short7_seq_test_indices", ")", "\n", "short7_seq_results", "[", "\"recall\"", "]", "/=", "len", "(", "short7_seq_test_indices", ")", "\n", "short7_seq_results", "[", "\"ndcg\"", "]", "/=", "len", "(", "short7_seq_test_indices", ")", "\n", "short7_seq_results", "[", "\"hit_ratio\"", "]", "/=", "len", "(", "short7_seq_test_indices", ")", "\n", "short7_seq_results", "[", "\"auc\"", "]", "/=", "len", "(", "short7_seq_test_indices", ")", "\n", "short7_seq_results", "[", "\"mrr\"", "]", "/=", "len", "(", "short7_seq_test_indices", ")", "\n", "print", "(", "f\"testing #of short seq users with less than 7 training points: {len(short7_seq_test_indices)}\"", ")", "\n", "\n", "\n", "short37_seq_batch_data", "=", "zip", "(", "short37_seq_rankeditems_list", ",", "short37_seq_test_indices", ",", "short37_seq_scale_pred_list", ",", "short37_seq_test_allitems", ")", "\n", "short37_seq_batch_result", "=", "pool", ".", "map", "(", "eval_one_interaction", ",", "short37_seq_batch_data", ")", "\n", "for", "re", "in", "short37_seq_batch_result", ":", "\n", "        ", "short37_seq_results", "[", "\"precision\"", "]", "+=", "re", "[", "\"precision\"", "]", "\n", "short37_seq_results", "[", "\"recall\"", "]", "+=", "re", "[", "\"recall\"", "]", "\n", "short37_seq_results", "[", "\"ndcg\"", "]", "+=", "re", "[", "\"ndcg\"", "]", "\n", "short37_seq_results", "[", "\"hit_ratio\"", "]", "+=", "re", "[", "\"hit_ratio\"", "]", "\n", "short37_seq_results", "[", "\"auc\"", "]", "+=", "re", "[", "\"auc\"", "]", "\n", "short37_seq_results", "[", "\"mrr\"", "]", "+=", "re", "[", "\"mrr\"", "]", "\n", "", "short37_seq_results", "[", "\"precision\"", "]", "/=", "len", "(", "short37_seq_test_indices", ")", "\n", "short37_seq_results", "[", "\"recall\"", "]", "/=", "len", "(", "short37_seq_test_indices", ")", "\n", "short37_seq_results", "[", "\"ndcg\"", "]", "/=", "len", "(", "short37_seq_test_indices", ")", "\n", "short37_seq_results", "[", "\"hit_ratio\"", "]", "/=", "len", "(", "short37_seq_test_indices", ")", "\n", "short37_seq_results", "[", "\"auc\"", "]", "/=", "len", "(", "short37_seq_test_indices", ")", "\n", "short37_seq_results", "[", "\"mrr\"", "]", "/=", "len", "(", "short37_seq_test_indices", ")", "\n", "print", "(", "f\"testing #of short seq users with 3 - 7 training points: {len(short37_seq_test_indices)}\"", ")", "\n", "\n", "\n", "\n", "medium3_seq_batch_data", "=", "zip", "(", "medium3_seq_rankeditems_list", ",", "medium3_seq_test_indices", ",", "medium3_seq_scale_pred_list", ",", "medium3_seq_test_allitems", ")", "\n", "medium3_seq_batch_result", "=", "pool", ".", "map", "(", "eval_one_interaction", ",", "medium3_seq_batch_data", ")", "\n", "for", "re", "in", "medium3_seq_batch_result", ":", "\n", "        ", "medium3_seq_results", "[", "\"precision\"", "]", "+=", "re", "[", "\"precision\"", "]", "\n", "medium3_seq_results", "[", "\"recall\"", "]", "+=", "re", "[", "\"recall\"", "]", "\n", "medium3_seq_results", "[", "\"ndcg\"", "]", "+=", "re", "[", "\"ndcg\"", "]", "\n", "medium3_seq_results", "[", "\"hit_ratio\"", "]", "+=", "re", "[", "\"hit_ratio\"", "]", "\n", "medium3_seq_results", "[", "\"auc\"", "]", "+=", "re", "[", "\"auc\"", "]", "\n", "medium3_seq_results", "[", "\"mrr\"", "]", "+=", "re", "[", "\"mrr\"", "]", "\n", "", "medium3_seq_results", "[", "\"precision\"", "]", "/=", "len", "(", "medium3_seq_test_indices", ")", "\n", "medium3_seq_results", "[", "\"recall\"", "]", "/=", "len", "(", "medium3_seq_test_indices", ")", "\n", "medium3_seq_results", "[", "\"ndcg\"", "]", "/=", "len", "(", "medium3_seq_test_indices", ")", "\n", "medium3_seq_results", "[", "\"hit_ratio\"", "]", "/=", "len", "(", "medium3_seq_test_indices", ")", "\n", "medium3_seq_results", "[", "\"auc\"", "]", "/=", "len", "(", "medium3_seq_test_indices", ")", "\n", "medium3_seq_results", "[", "\"mrr\"", "]", "/=", "len", "(", "medium3_seq_test_indices", ")", "\n", "print", "(", "f\"testing #of short seq users with medium3 training points: {len(medium3_seq_test_indices)}\"", ")", "\n", "\n", "\n", "\n", "medium7_seq_batch_data", "=", "zip", "(", "medium7_seq_rankeditems_list", ",", "medium7_seq_test_indices", ",", "medium7_seq_scale_pred_list", ",", "medium7_seq_test_allitems", ")", "\n", "medium7_seq_batch_result", "=", "pool", ".", "map", "(", "eval_one_interaction", ",", "medium7_seq_batch_data", ")", "\n", "for", "re", "in", "medium7_seq_batch_result", ":", "\n", "        ", "medium7_seq_results", "[", "\"precision\"", "]", "+=", "re", "[", "\"precision\"", "]", "\n", "medium7_seq_results", "[", "\"recall\"", "]", "+=", "re", "[", "\"recall\"", "]", "\n", "medium7_seq_results", "[", "\"ndcg\"", "]", "+=", "re", "[", "\"ndcg\"", "]", "\n", "medium7_seq_results", "[", "\"hit_ratio\"", "]", "+=", "re", "[", "\"hit_ratio\"", "]", "\n", "medium7_seq_results", "[", "\"auc\"", "]", "+=", "re", "[", "\"auc\"", "]", "\n", "medium7_seq_results", "[", "\"mrr\"", "]", "+=", "re", "[", "\"mrr\"", "]", "\n", "", "medium7_seq_results", "[", "\"precision\"", "]", "/=", "len", "(", "medium7_seq_test_indices", ")", "\n", "medium7_seq_results", "[", "\"recall\"", "]", "/=", "len", "(", "medium7_seq_test_indices", ")", "\n", "medium7_seq_results", "[", "\"ndcg\"", "]", "/=", "len", "(", "medium7_seq_test_indices", ")", "\n", "medium7_seq_results", "[", "\"hit_ratio\"", "]", "/=", "len", "(", "medium7_seq_test_indices", ")", "\n", "medium7_seq_results", "[", "\"auc\"", "]", "/=", "len", "(", "medium7_seq_test_indices", ")", "\n", "medium7_seq_results", "[", "\"mrr\"", "]", "/=", "len", "(", "medium7_seq_test_indices", ")", "\n", "print", "(", "f\"testing #of short seq users with medium7 training points: {len(medium7_seq_test_indices)}\"", ")", "\n", "\n", "\n", "long_seq_batch_data", "=", "zip", "(", "long_seq_rankeditems_list", ",", "long_seq_test_indices", ",", "long_seq_scale_pred_list", ",", "long_seq_test_allitems", ")", "\n", "long_seq_batch_result", "=", "pool", ".", "map", "(", "eval_one_interaction", ",", "long_seq_batch_data", ")", "\n", "for", "re", "in", "long_seq_batch_result", ":", "\n", "        ", "long_seq_results", "[", "\"precision\"", "]", "+=", "re", "[", "\"precision\"", "]", "\n", "long_seq_results", "[", "\"recall\"", "]", "+=", "re", "[", "\"recall\"", "]", "\n", "long_seq_results", "[", "\"ndcg\"", "]", "+=", "re", "[", "\"ndcg\"", "]", "\n", "long_seq_results", "[", "\"hit_ratio\"", "]", "+=", "re", "[", "\"hit_ratio\"", "]", "\n", "long_seq_results", "[", "\"auc\"", "]", "+=", "re", "[", "\"auc\"", "]", "\n", "long_seq_results", "[", "\"mrr\"", "]", "+=", "re", "[", "\"mrr\"", "]", "\n", "", "long_seq_results", "[", "\"precision\"", "]", "/=", "len", "(", "long_seq_test_indices", ")", "\n", "long_seq_results", "[", "\"recall\"", "]", "/=", "len", "(", "long_seq_test_indices", ")", "\n", "long_seq_results", "[", "\"ndcg\"", "]", "/=", "len", "(", "long_seq_test_indices", ")", "\n", "long_seq_results", "[", "\"hit_ratio\"", "]", "/=", "len", "(", "long_seq_test_indices", ")", "\n", "long_seq_results", "[", "\"auc\"", "]", "/=", "len", "(", "long_seq_test_indices", ")", "\n", "long_seq_results", "[", "\"mrr\"", "]", "/=", "len", "(", "long_seq_test_indices", ")", "\n", "\n", "print", "(", "f\"testing #of short seq users with >= 20 training points: {len(long_seq_test_indices)}\"", ")", "\n", "return", "results", ",", "short_seq_results", ",", "short7_seq_results", ",", "short37_seq_results", ",", "medium3_seq_results", ",", "medium7_seq_results", ",", "long_seq_results", ",", "all_predictions_results_output", "\n", "\n"]], "home.repos.pwc.inspect_result.DyGRec_ASReP.data.DataProcessing.parse": [[9, 13], ["gzip.open", "eval"], "function", ["None"], ["def", "parse", "(", "path", ")", ":", "\n", "    ", "g", "=", "gzip", ".", "open", "(", "path", ",", "'r'", ")", "\n", "for", "l", "in", "g", ":", "\n", "        ", "yield", "eval", "(", "l", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DyGRec_ASReP.data.DataProcessing.writetofile": [[122, 127], ["open", "sorted", "data.items", "f.write", "str", "str", "str"], "function", ["None"], ["def", "writetofile", "(", "data", ",", "dfile", ")", ":", "\n", "    ", "with", "open", "(", "dfile", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "u", ",", "ilist", "in", "sorted", "(", "data", ".", "items", "(", ")", ")", ":", "\n", "            ", "for", "i", ",", "t", "in", "ilist", ":", "\n", "                ", "f", ".", "write", "(", "str", "(", "u", ")", "+", "'\\t'", "+", "str", "(", "i", ")", "+", "'\\t'", "+", "str", "(", "t", ")", "+", "\"\\n\"", ")", "\n", "\n"]]}