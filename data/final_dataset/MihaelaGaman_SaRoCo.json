{"home.repos.pwc.inspect_result.MihaelaGaman_SaRoCo.charcnn.metrics.Metrics.__init__": [[29, 32], ["tensorflow.keras.callbacks.Callback.__init__"], "methods", ["home.repos.pwc.inspect_result.MihaelaGaman_SaRoCo.charcnn.model.CharCNN.__init__"], ["def", "__init__", "(", "self", ",", "val_data", ",", "batch_size", "=", "128", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "validation_data", "=", "val_data", "\n", "\n"]], "home.repos.pwc.inspect_result.MihaelaGaman_SaRoCo.charcnn.metrics.Metrics.on_train_begin": [[33, 41], ["None"], "methods", ["None"], ["", "def", "on_train_begin", "(", "self", ",", "logs", "=", "{", "}", ")", ":", "\n", "        ", "self", ".", "val_f1s_weighted", "=", "[", "]", "\n", "self", ".", "val_recalls_weighted", "=", "[", "]", "\n", "self", ".", "val_precisions_weighted", "=", "[", "]", "\n", "\n", "self", ".", "val_f1s_macro", "=", "[", "]", "\n", "self", ".", "val_recalls_macro", "=", "[", "]", "\n", "self", ".", "val_precisions_macro", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.MihaelaGaman_SaRoCo.charcnn.metrics.Metrics.evaluate_f1s": [[42, 60], ["sklearn.metrics.f1_score", "sklearn.metrics.recall_score", "sklearn.metrics.precision_score", "metrics.Metrics.val_f1s_weighted.append", "metrics.Metrics.val_recalls_weighted.append", "metrics.Metrics.val_precisions_weighted.append", "sklearn.metrics.f1_score", "sklearn.metrics.recall_score", "sklearn.metrics.precision_score", "metrics.Metrics.val_f1s_macro.append", "metrics.Metrics.val_recalls_macro.append", "metrics.Metrics.val_precisions_macro.append", "print", "print"], "methods", ["None"], ["", "def", "evaluate_f1s", "(", "self", ",", "val_predict", ",", "val_targ", ")", ":", "\n", "        ", "_val_f1_weighted", "=", "f1_score", "(", "val_targ", ",", "val_predict", ",", "average", "=", "'weighted'", ")", "\n", "_val_recall_weighted", "=", "recall_score", "(", "val_targ", ",", "val_predict", ",", "average", "=", "'weighted'", ")", "\n", "_val_precision_weighted", "=", "precision_score", "(", "val_targ", ",", "val_predict", ",", "average", "=", "'weighted'", ")", "\n", "self", ".", "val_f1s_weighted", ".", "append", "(", "_val_f1_weighted", ")", "\n", "self", ".", "val_recalls_weighted", ".", "append", "(", "_val_recall_weighted", ")", "\n", "self", ".", "val_precisions_weighted", ".", "append", "(", "_val_precision_weighted", ")", "\n", "\n", "_val_f1_macro", "=", "f1_score", "(", "val_targ", ",", "val_predict", ",", "average", "=", "'macro'", ")", "\n", "_val_recall_macro", "=", "recall_score", "(", "val_targ", ",", "val_predict", ",", "average", "=", "'macro'", ")", "\n", "_val_precision_macro", "=", "precision_score", "(", "val_targ", ",", "val_predict", ",", "average", "=", "'macro'", ")", "\n", "self", ".", "val_f1s_macro", ".", "append", "(", "_val_f1_macro", ")", "\n", "self", ".", "val_recalls_macro", ".", "append", "(", "_val_recall_macro", ")", "\n", "self", ".", "val_precisions_macro", ".", "append", "(", "_val_precision_macro", ")", "\n", "\n", "print", "(", "\"[weighted] val_f1: %f val_precision: %f  val_recall %f\"", "%", "(", "_val_f1_weighted", ",", "_val_precision_weighted", ",", "_val_recall_weighted", ")", ")", "\n", "print", "(", "\"[MACRO] val_f1: %f val_precision: %f  val_recall %f\"", "%", "(", "_val_f1_macro", ",", "_val_precision_macro", ",", "_val_recall_macro", ")", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.MihaelaGaman_SaRoCo.charcnn.metrics.Metrics.on_epoch_end": [[61, 67], ["numpy.asarray().round", "metrics.Metrics.evaluate_f1s", "numpy.asarray", "metrics.Metrics.model.predict"], "methods", ["home.repos.pwc.inspect_result.MihaelaGaman_SaRoCo.charcnn.metrics.Metrics.evaluate_f1s"], ["", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "logs", "=", "{", "}", ")", ":", "\n", "        ", "val_predict", "=", "(", "np", ".", "asarray", "(", "self", ".", "model", ".", "predict", "(", "self", ".", "validation_data", "[", "0", "]", ")", ")", ")", ".", "round", "(", ")", "\n", "val_targ", "=", "self", ".", "validation_data", "[", "1", "]", "\n", "\n", "self", ".", "evaluate_f1s", "(", "val_predict", ",", "val_targ", ")", "\n", "return", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MihaelaGaman_SaRoCo.charcnn.metrics.compute_print_f1": [[6, 23], ["sklearn.metrics.f1_score", "sklearn.metrics.recall_score", "sklearn.metrics.precision_score", "print"], "function", ["None"], ["def", "compute_print_f1", "(", "predict", ",", "targ", ",", "average", ")", ":", "\n", "    ", "\"\"\"\n    Compute the F1 score achieved at prediction, given the target labels and\n    the averaging scheme preferred (i.e. macro or weighted).\n    :param predict:\n    :param targ:\n    :param average:\n    :return:\n    \"\"\"", "\n", "f1", "=", "f1_score", "(", "targ", ",", "predict", ",", "average", "=", "average", ")", "\n", "recall", "=", "recall_score", "(", "targ", ",", "predict", ",", "average", "=", "average", ")", "\n", "precision", "=", "precision_score", "(", "targ", ",", "predict", ",", "average", "=", "average", ")", "\n", "\n", "print", "(", "\"[%s] test_f1: %f \\t test_precision: %f \\t test_recall %f\"", "\n", "%", "(", "average", ",", "f1", ",", "precision", ",", "recall", ")", ")", "\n", "\n", "return", "f1", ",", "recall", ",", "precision", "\n", "\n"]], "home.repos.pwc.inspect_result.MihaelaGaman_SaRoCo.charcnn.data.Data.__init__": [[8, 28], ["enumerate"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataset", ",", "alphabet", ",", "input_size", ")", ":", "\n", "        ", "\"\"\"\n        Initialize a Data object.\n        :param dataset: Raw dataset.\n        :param alphabet: Alphabet to be used.\n        :param input_size: Input window considered.\n        \"\"\"", "\n", "# Initialize the alphabet", "\n", "self", ".", "alphabet", "=", "alphabet", "\n", "# Number of classes", "\n", "self", ".", "no_of_classes", "=", "2", "\n", "# Input size", "\n", "self", ".", "length", "=", "input_size", "\n", "# Data set initialization", "\n", "self", ".", "dataset", "=", "dataset", "\n", "\n", "# Map each character to an integer", "\n", "self", ".", "dict", "=", "{", "}", "\n", "for", "idx", ",", "char", "in", "enumerate", "(", "alphabet", ")", ":", "\n", "            ", "self", ".", "dict", "[", "char", "]", "=", "idx", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.MihaelaGaman_SaRoCo.charcnn.data.Data.convert_data": [[29, 41], ["numpy.eye", "batch_indices.append", "classes.append", "numpy.asarray", "numpy.asarray", "data.Data.str_to_indexes", "int"], "methods", ["home.repos.pwc.inspect_result.MihaelaGaman_SaRoCo.charcnn.data.Data.str_to_indexes"], ["", "", "def", "convert_data", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Convert the inputs in numeric format and the labels into one-hot encoding.\n        :return: Data transformed from raw to indexed form with associated one-hot label.\n        \"\"\"", "\n", "one_hot", "=", "np", ".", "eye", "(", "self", ".", "no_of_classes", ",", "dtype", "=", "'int16'", ")", "\n", "classes", "=", "[", "]", "\n", "batch_indices", "=", "[", "]", "\n", "for", "text", ",", "label", "in", "self", ".", "dataset", ":", "\n", "            ", "batch_indices", ".", "append", "(", "self", ".", "str_to_indexes", "(", "text", ")", ")", "\n", "classes", ".", "append", "(", "one_hot", "[", "int", "(", "label", ")", "]", ")", "\n", "", "return", "np", ".", "asarray", "(", "batch_indices", ",", "dtype", "=", "\"int16\"", ")", ",", "np", ".", "asarray", "(", "classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MihaelaGaman_SaRoCo.charcnn.data.Data.str_to_indexes": [[42, 55], ["min", "numpy.zeros", "range", "len"], "methods", ["None"], ["", "def", "str_to_indexes", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"\n        Convert a string to character indexes based on character dictionary.\n        :param text: String to be converted to indexes.\n        :return: Np array of indexes of the characters in text.\n        \"\"\"", "\n", "max_length", "=", "min", "(", "len", "(", "text", ")", ",", "self", ".", "length", ")", "\n", "str2idx", "=", "np", ".", "zeros", "(", "self", ".", "length", ",", "dtype", "=", "\"int16\"", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "max_length", "+", "1", ")", ":", "\n", "            ", "char", "=", "text", "[", "-", "i", "]", "\n", "if", "char", "in", "self", ".", "dict", ":", "\n", "                ", "str2idx", "[", "i", "-", "1", "]", "=", "self", ".", "dict", "[", "char", "]", "\n", "", "", "return", "str2idx", "\n", "\n"]], "home.repos.pwc.inspect_result.MihaelaGaman_SaRoCo.charcnn.model.CharCNN.__init__": [[19, 48], ["model.CharCNN._build_model"], "methods", ["home.repos.pwc.inspect_result.MihaelaGaman_SaRoCo.charcnn.model.CharCNN._build_model"], ["def", "__init__", "(", "self", ",", "input_sz", ",", "alphabet_sz", ",", "emb_sz", ",", "\n", "conv_layers", ",", "fc_layers", ",", "\n", "threshold", ",", "dropout_p", ",", "\n", "optimizer", "=", "'adam'", ",", "loss", "=", "'categorical_crossentropy'", ")", ":", "\n", "        ", "\"\"\"\n        Initialize the Character Level CNN model.\n        :param input_sz: Input window considered.\n        :param alphabet_sz: Alphabet size.\n        :param emb_sz: Embedding vector sizes.\n        :param conv_layers: The list of convolutional layers properties.\n        :param fc_layers: The list of fully connected layers to be used.\n        :param threshold: Threshold for the Thresholded ReLU activation function.\n        :param dropout_p: Dropout rate.\n        :param optimizer: Optimization algorithm.\n        :param loss: Loss function.\n        \"\"\"", "\n", "# Initialize the parameters", "\n", "self", ".", "input_sz", "=", "input_sz", "\n", "self", ".", "alphabet_sz", "=", "alphabet_sz", "\n", "self", ".", "emb_sz", "=", "emb_sz", "\n", "self", ".", "conv_layers", "=", "conv_layers", "\n", "self", ".", "fc_layers", "=", "fc_layers", "\n", "self", ".", "num_of_classes", "=", "2", "\n", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "dropout_p", "=", "dropout_p", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "loss", "=", "loss", "\n", "# Build and compile the model", "\n", "self", ".", "_build_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MihaelaGaman_SaRoCo.charcnn.model.CharCNN._squeeze_and_excitation_block": [[49, 80], ["int", "tensorflow.keras.layers.GlobalAveragePooling1D", "tensorflow.keras.layers.Reshape", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Multiply", "int"], "methods", ["None"], ["", "def", "_squeeze_and_excitation_block", "(", "self", ",", "input_data", ":", "np", ".", "ndarray", ",", "ratio", ":", "int", ")", "->", "Layer", ":", "\n", "        ", "\"\"\"\n        Squeeze and excitation block implementation.\n        :param input_data: Input data.\n        :param ratio: Squeeze ratio.\n        :return: \n        \"\"\"", "\n", "out_dim", "=", "int", "(", "input_data", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "# Squeeze step", "\n", "squeeze", "=", "GlobalAveragePooling1D", "(", ")", "(", "input_data", ")", "\n", "squeeze", "=", "Reshape", "(", "(", "-", "1", ",", "out_dim", ")", ")", "(", "squeeze", ")", "\n", "\n", "# Excitation", "\n", "excitation", "=", "Dense", "(", "\n", "int", "(", "out_dim", "/", "ratio", ")", ",", "\n", "activation", "=", "\"relu\"", ",", "\n", "kernel_initializer", "=", "\"he_normal\"", ",", "\n", "use_bias", "=", "False", "\n", ")", "(", "squeeze", ")", "\n", "excitation", "=", "Dense", "(", "\n", "out_dim", ",", "\n", "activation", "=", "\"sigmoid\"", ",", "\n", "kernel_initializer", "=", "\"he_normal\"", ",", "\n", "use_bias", "=", "False", "\n", ")", "(", "excitation", ")", "\n", "\n", "# Scale", "\n", "scale", "=", "Multiply", "(", ")", "(", "[", "input_data", ",", "excitation", "]", ")", "\n", "\n", "return", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.MihaelaGaman_SaRoCo.charcnn.model.CharCNN._build_model": [[81, 124], ["tensorflow.keras.layers.Input", "tensorflow.keras.models.Model", "tensorflow.keras.models.Model.compile", "tensorflow.keras.models.Model.CharCNN.model.summary", "tensorflow.keras.layers.Embedding", "tensorflow.keras.layers.Reshape", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Conv1D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.AlphaDropout", "tensorflow.keras.models.Model.CharCNN._squeeze_and_excitation_block", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.ThresholdedReLU", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.MaxPooling1D"], "methods", ["home.repos.pwc.inspect_result.MihaelaGaman_SaRoCo.charcnn.model.CharCNN._squeeze_and_excitation_block"], ["", "def", "_build_model", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Build and compile the Character Level CNN model\n        :return: None\n        \"\"\"", "\n", "# Input layer", "\n", "inputs", "=", "Input", "(", "shape", "=", "(", "self", ".", "input_sz", ",", ")", ",", "name", "=", "'sent_input'", ",", "dtype", "=", "'int16'", ")", "\n", "\n", "# Embedding layers", "\n", "x", "=", "Embedding", "(", "self", ".", "alphabet_sz", "+", "1", ",", "self", ".", "emb_sz", ",", "input_length", "=", "self", ".", "input_sz", ")", "(", "inputs", ")", "\n", "x", "=", "Reshape", "(", "(", "self", ".", "input_sz", ",", "self", ".", "emb_sz", ")", ")", "(", "x", ")", "\n", "\n", "# Convolutional layers", "\n", "for", "cl", "in", "self", ".", "conv_layers", ":", "\n", "            ", "x", "=", "Conv1D", "(", "cl", "[", "0", "]", ",", "cl", "[", "1", "]", ",", "kernel_initializer", "=", "\"lecun_normal\"", ",", "padding", "=", "\"causal\"", ",", "use_bias", "=", "False", ")", "(", "x", ")", "\n", "x", "=", "BatchNormalization", "(", "scale", "=", "False", ")", "(", "x", ")", "\n", "x", "=", "Activation", "(", "'selu'", ")", "(", "x", ")", "\n", "x", "=", "AlphaDropout", "(", "0.5", ")", "(", "x", ")", "\n", "\n", "if", "cl", "[", "2", "]", "!=", "-", "1", ":", "\n", "                ", "x", "=", "MaxPooling1D", "(", "cl", "[", "2", "]", ",", "cl", "[", "3", "]", ")", "(", "x", ")", "\n", "", "if", "cl", "[", "4", "]", "!=", "-", "1", ":", "\n", "                ", "x", "=", "self", ".", "_squeeze_and_excitation_block", "(", "input_data", "=", "x", ",", "ratio", "=", "cl", "[", "4", "]", ")", "\n", "\n", "# Flatten the features", "\n", "", "", "x", "=", "Flatten", "(", ")", "(", "x", ")", "\n", "\n", "# Fully connected layers", "\n", "for", "fl", "in", "self", ".", "fc_layers", ":", "\n", "            ", "x", "=", "Dense", "(", "fl", ")", "(", "x", ")", "\n", "x", "=", "ThresholdedReLU", "(", "self", ".", "threshold", ")", "(", "x", ")", "\n", "x", "=", "Dropout", "(", "self", ".", "dropout_p", ")", "(", "x", ")", "\n", "\n", "# Output layer", "\n", "", "predictions", "=", "Dense", "(", "self", ".", "num_of_classes", ",", "activation", "=", "\"softmax\"", ")", "(", "x", ")", "\n", "\n", "# Build and coompile the model", "\n", "model", "=", "Model", "(", "inputs", ",", "predictions", ")", "\n", "\n", "# Compile", "\n", "model", ".", "compile", "(", "optimizer", "=", "'nadam'", ",", "loss", "=", "self", ".", "loss", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "model", ".", "summary", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MihaelaGaman_SaRoCo.charcnn.model.CharCNN.train": [[125, 152], ["tensorflow.keras.callbacks.ModelCheckpoint", "metrics.Metrics.Metrics", "tensorflow.keras.callbacks.EarlyStopping", "model.CharCNN.model.fit"], "methods", ["None"], ["", "def", "train", "(", "self", ",", "train_inputs", ",", "train_labels", ",", "val_inputs", ",", "val_labels", ",", "epochs", ",", "bs", ")", ":", "\n", "        ", "\"\"\"\n        Train the model.\n        :param train_inputs: Training data.\n        :param train_labels: Training labels.\n        :param val_inputs: Validation data.\n        :param val_labels: Validation labels.\n        :param epochs: Epochs.\n        :param bs: Batch size.\n        :return: None\n        \"\"\"", "\n", "# Create callbacks", "\n", "filepath", "=", "\"checkpoints/weights-improvement-{epoch:02d}-acc-{val_accuracy:.2f}-loss-{val_loss:.2f}.hdf5\"", "\n", "checkpoint", "=", "ModelCheckpoint", "(", "filepath", ",", "monitor", "=", "'val_accuracy'", ",", "verbose", "=", "1", ",", "save_best_only", "=", "True", ",", "mode", "=", "'max'", ")", "\n", "\n", "metrics", "=", "Metrics", "(", "(", "val_inputs", ",", "val_labels", ")", ")", "\n", "es", "=", "EarlyStopping", "(", "monitor", "=", "'val_accuracy'", ",", "mode", "=", "'max'", ",", "verbose", "=", "1", ",", "patience", "=", "5", ")", "\n", "\n", "callbacks_list", "=", "[", "checkpoint", ",", "metrics", ",", "es", "]", "\n", "\n", "self", ".", "model", ".", "fit", "(", "\n", "train_inputs", ",", "train_labels", ",", "\n", "validation_data", "=", "(", "val_inputs", ",", "val_labels", ")", ",", "\n", "epochs", "=", "epochs", ",", "\n", "batch_size", "=", "bs", ",", "\n", "verbose", "=", "1", ",", "\n", "callbacks", "=", "callbacks_list", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.MihaelaGaman_SaRoCo.charcnn.model.CharCNN.test": [[154, 165], ["model.CharCNN.model.evaluate"], "methods", ["None"], ["", "def", "test", "(", "self", ",", "test_inputs", ",", "test_labels", ",", "bs", ")", ":", "\n", "        ", "\"\"\"\n        Evaluate the model.\n        :param test_inputs: Test data.\n        :param test_labels: Test labels.\n        :param bs: Batch size.\n        :return: Results / Metrics.\n        \"\"\"", "\n", "# Evaluate inputs", "\n", "results", "=", "self", ".", "model", ".", "evaluate", "(", "test_inputs", ",", "test_labels", ",", "batch_size", "=", "bs", ",", "verbose", "=", "1", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.MihaelaGaman_SaRoCo.charcnn.model.CharCNN.test_model": [[166, 198], ["metrics.Metrics.Metrics", "model.CharCNN.model.evaluate", "print", "model.CharCNN.model.predict", "numpy.argmax", "metrics.Metrics.compute_print_f1", "metrics.Metrics.compute_print_f1", "range", "numpy.asarray", "numpy.asarray", "len", "labels.append"], "methods", ["home.repos.pwc.inspect_result.MihaelaGaman_SaRoCo.charcnn.metrics.compute_print_f1", "home.repos.pwc.inspect_result.MihaelaGaman_SaRoCo.charcnn.metrics.compute_print_f1"], ["", "def", "test_model", "(", "self", ",", "test_inputs", ",", "test_labels", ",", "bs", ")", ":", "\n", "        ", "\"\"\"\n        Evaluate the model and display results.\n        :param test_inputs: Test data.\n        :param test_labels: Test labels.\n        :param bs: Batch size.\n        :return: None\n        \"\"\"", "\n", "# Use callbacks", "\n", "metrics", "=", "Metrics", "(", "(", "test_inputs", ",", "test_labels", ")", ")", "\n", "\n", "# Evaluate inputs", "\n", "eval_res", "=", "self", ".", "model", ".", "evaluate", "(", "test_inputs", ",", "test_labels", ",", "\n", "batch_size", "=", "bs", ",", "\n", "callbacks", "=", "[", "metrics", "]", ")", "\n", "print", "(", "eval_res", ")", "\n", "\n", "labels", "=", "[", "]", "\n", "for", "labels_arr", "in", "test_labels", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "labels_arr", ")", ")", ":", "\n", "                ", "if", "labels_arr", "[", "i", "]", "==", "1", ":", "\n", "                    ", "labels", ".", "append", "(", "i", ")", "\n", "\n", "# Predict", "\n", "", "", "", "predicts", "=", "self", ".", "model", ".", "predict", "(", "test_inputs", ",", "batch_size", "=", "bs", ",", "verbose", "=", "1", ")", "\n", "pred_arr", "=", "np", ".", "argmax", "(", "predicts", ",", "axis", "=", "1", ")", "\n", "\n", "# F1 score weighted", "\n", "compute_print_f1", "(", "pred_arr", ",", "np", ".", "asarray", "(", "labels", ")", ",", "\"weighted\"", ")", "\n", "\n", "# F1 score macro", "\n", "compute_print_f1", "(", "pred_arr", ",", "np", ".", "asarray", "(", "labels", ")", ",", "\"macro\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MihaelaGaman_SaRoCo.charcnn.model.CharCNN.save": [[199, 206], ["model.CharCNN.model.save"], "methods", ["home.repos.pwc.inspect_result.MihaelaGaman_SaRoCo.charcnn.model.CharCNN.save"], ["", "def", "save", "(", "self", ",", "file_path", ")", ":", "\n", "        ", "\"\"\"\n        Save the model\n        :param file_path: Path where the model will be saved.\n        :return: None\n        \"\"\"", "\n", "self", ".", "model", ".", "save", "(", "file_path", ")", "\n", "\n"]]}