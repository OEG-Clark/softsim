{"home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.random_agent.Agent.__init__": [[7, 25], ["car_racing.CarRacing", "open", "random_agent.Agent.record.write", "random_agent.Agent.record.write", "datetime.datetime.now"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "device", "=", "'cpu'", ")", ":", "\n", "\n", "        ", "self", ".", "device", "=", "device", "\n", "self", ".", "env", "=", "cr", ".", "CarRacing", "(", ")", "\n", "self", ".", "render_view", "=", "False", "# Set to True if you want to see what it is doing", "\n", "self", ".", "print_timer", "=", "10", "# Print average result of Agent every '...' episodes", "\n", "\n", "self", ".", "n_episodes", "=", "1000", "# number of episodes", "\n", "self", ".", "max_length_episode", "=", "1000", "# steps per episode", "\n", "\n", "self", ".", "run_id", "=", "1", "\n", "self", ".", "save_results", "=", "True", "\n", "self", ".", "results_path", "=", "\"results/random/random_results_r{}.npz\"", ".", "format", "(", "self", ".", "run_id", ")", "\n", "\n", "self", ".", "log_path", "=", "\"logs/random_log_r{}.txt\"", ".", "format", "(", "self", ".", "run_id", ")", "\n", "self", ".", "record", "=", "open", "(", "self", ".", "log_path", ",", "\"a\"", ")", "\n", "self", ".", "record", ".", "write", "(", "\"\\n\\n-----------------------------------------------------------------\\n\"", ")", "\n", "self", ".", "record", ".", "write", "(", "\"File opened at {}\\n\"", ".", "format", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.random_agent.Agent.train": [[27, 86], ["print", "random_agent.Agent.record.write", "range", "random_agent.Agent.env.close", "print", "random_agent.Agent.record.write", "random_agent.Agent.record.close", "datetime.datetime.now", "random_agent.Agent.env.reset", "results.append", "numpy.savez", "datetime.datetime.now", "random_agent.Agent.env.action_space.sample", "random_agent.Agent.env.step", "numpy.mean", "numpy.mean", "print", "random_agent.Agent.record.write", "random_agent.Agent.record.close", "open", "numpy.array", "random_agent.Agent.env.render"], "methods", ["home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.close", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.close", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.reset", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.replay_memory.ReplayMemory.sample", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.step", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.close", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.render"], ["", "def", "train", "(", "self", ")", ":", "\n", "\n", "        ", "msg", "=", "\"Environment is: {}\\nTraining started at {}\"", ".", "format", "(", "\"CarRacing-v0\"", ",", "datetime", ".", "datetime", ".", "now", "(", ")", ")", "\n", "print", "(", "msg", ")", "\n", "self", ".", "record", ".", "write", "(", "msg", "+", "\"\\n\"", ")", "\n", "\n", "results", "=", "[", "]", "\n", "for", "ith_episode", "in", "range", "(", "self", ".", "n_episodes", ")", ":", "\n", "\n", "# initialize variables", "\n", "            ", "self", ".", "env", ".", "reset", "(", ")", "\n", "total_reward", "=", "0", "\n", "reward", "=", "0", "\n", "nr_steps", "=", "0", "\n", "done", "=", "False", "\n", "\n", "while", "not", "done", "and", "nr_steps", "<=", "self", ".", "max_length_episode", ":", "\n", "\n", "# select random action", "\n", "                ", "action", "=", "self", ".", "env", ".", "action_space", ".", "sample", "(", ")", "\n", "\n", "#take step", "\n", "_", ",", "reward", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "nr_steps", "=", "nr_steps", "+", "1", "\n", "\n", "# render for human if True", "\n", "if", "self", ".", "render_view", ":", "\n", "                    ", "self", ".", "env", ".", "render", "(", "'human'", ")", "\n", "\n", "# add reward to total", "\n", "", "total_reward", "+=", "reward", "\n", "\n", "", "results", ".", "append", "(", "total_reward", ")", "\n", "\n", "# Print and keep a (.txt) record of stuff", "\n", "if", "ith_episode", ">", "0", "and", "ith_episode", "%", "self", ".", "print_timer", "==", "0", ":", "\n", "                ", "avg_reward", "=", "np", ".", "mean", "(", "results", ")", "\n", "last_x", "=", "np", ".", "mean", "(", "results", "[", "-", "self", ".", "print_timer", ":", "]", ")", "\n", "msg", "=", "\"Episodes: {:4d}, avg score: {:3.2f}, over last {:d}: {:3.2f}\"", ".", "format", "(", "ith_episode", ",", "avg_reward", ",", "self", ".", "print_timer", ",", "last_x", ")", "\n", "print", "(", "msg", ")", "\n", "\n", "# write to log", "\n", "self", ".", "record", ".", "write", "(", "msg", "+", "\"\\n\"", ")", "\n", "\n", "# save log", "\n", "self", ".", "record", ".", "close", "(", ")", "\n", "self", ".", "record", "=", "open", "(", "self", ".", "log_path", ",", "\"a\"", ")", "\n", "\n", "", "", "self", ".", "env", ".", "close", "(", ")", "\n", "\n", "# If enabled, save the results and the network (state_dict)", "\n", "if", "self", ".", "save_results", ":", "\n", "            ", "np", ".", "savez", "(", "self", ".", "results_path", ",", "np", ".", "array", "(", "results", ")", ")", "\n", "\n", "# Print and keep a (.txt) record of stuff", "\n", "", "msg", "=", "\"Training finished at {}\"", ".", "format", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", "\n", "print", "(", "msg", ")", "\n", "self", ".", "record", ".", "write", "(", "msg", ")", "\n", "self", ".", "record", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.FrictionDetector.__init__": [[85, 88], ["Box2D.b2.contactListener.__init__"], "methods", ["home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.dq_cnn_CarRacing.Agent.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "contactListener", ".", "__init__", "(", "self", ")", "\n", "self", ".", "env", "=", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.FrictionDetector.BeginContact": [[89, 91], ["car_racing.FrictionDetector._contact"], "methods", ["home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.FrictionDetector._contact"], ["", "def", "BeginContact", "(", "self", ",", "contact", ")", ":", "\n", "        ", "self", ".", "_contact", "(", "contact", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.FrictionDetector.EndContact": [[92, 94], ["car_racing.FrictionDetector._contact"], "methods", ["home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.FrictionDetector._contact"], ["", "def", "EndContact", "(", "self", ",", "contact", ")", ":", "\n", "        ", "self", ".", "_contact", "(", "contact", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.FrictionDetector._contact": [[95, 122], ["obj.tiles.add", "obj.tiles.remove", "len"], "methods", ["None"], ["", "def", "_contact", "(", "self", ",", "contact", ",", "begin", ")", ":", "\n", "        ", "tile", "=", "None", "\n", "obj", "=", "None", "\n", "u1", "=", "contact", ".", "fixtureA", ".", "body", ".", "userData", "\n", "u2", "=", "contact", ".", "fixtureB", ".", "body", ".", "userData", "\n", "if", "u1", "and", "\"road_friction\"", "in", "u1", ".", "__dict__", ":", "\n", "            ", "tile", "=", "u1", "\n", "obj", "=", "u2", "\n", "", "if", "u2", "and", "\"road_friction\"", "in", "u2", ".", "__dict__", ":", "\n", "            ", "tile", "=", "u2", "\n", "obj", "=", "u1", "\n", "", "if", "not", "tile", ":", "\n", "            ", "return", "\n", "\n", "", "tile", ".", "color", "[", "0", "]", "=", "ROAD_COLOR", "[", "0", "]", "\n", "tile", ".", "color", "[", "1", "]", "=", "ROAD_COLOR", "[", "1", "]", "\n", "tile", ".", "color", "[", "2", "]", "=", "ROAD_COLOR", "[", "2", "]", "\n", "if", "not", "obj", "or", "\"tiles\"", "not", "in", "obj", ".", "__dict__", ":", "\n", "            ", "return", "\n", "", "if", "begin", ":", "\n", "            ", "obj", ".", "tiles", ".", "add", "(", "tile", ")", "\n", "if", "not", "tile", ".", "road_visited", ":", "\n", "                ", "tile", ".", "road_visited", "=", "True", "\n", "self", ".", "env", ".", "reward", "+=", "1000.0", "/", "len", "(", "self", ".", "env", ".", "track", ")", "\n", "self", ".", "env", ".", "tile_visited_count", "+=", "1", "\n", "", "", "else", ":", "\n", "            ", "obj", ".", "tiles", ".", "remove", "(", "tile", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.__init__": [[130, 153], ["gym.utils.EzPickle.__init__", "car_racing.CarRacing.seed", "car_racing.FrictionDetector", "Box2D.b2World", "Box2D.b2.fixtureDef", "gym.spaces.Box", "gym.spaces.Box", "numpy.array", "numpy.array", "Box2D.b2.polygonShape"], "methods", ["home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.dq_cnn_CarRacing.Agent.__init__", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.seed"], ["def", "__init__", "(", "self", ",", "verbose", "=", "1", ")", ":", "\n", "        ", "EzPickle", ".", "__init__", "(", "self", ")", "\n", "self", ".", "seed", "(", ")", "\n", "self", ".", "contactListener_keepref", "=", "FrictionDetector", "(", "self", ")", "\n", "self", ".", "world", "=", "Box2D", ".", "b2World", "(", "(", "0", ",", "0", ")", ",", "contactListener", "=", "self", ".", "contactListener_keepref", ")", "\n", "self", ".", "viewer", "=", "None", "\n", "self", ".", "invisible_state_window", "=", "None", "\n", "self", ".", "invisible_video_window", "=", "None", "\n", "self", ".", "road", "=", "None", "\n", "self", ".", "car", "=", "None", "\n", "self", ".", "reward", "=", "0.0", "\n", "self", ".", "prev_reward", "=", "0.0", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "fd_tile", "=", "fixtureDef", "(", "\n", "shape", "=", "polygonShape", "(", "vertices", "=", "[", "(", "0", ",", "0", ")", ",", "(", "1", ",", "0", ")", ",", "(", "1", ",", "-", "1", ")", ",", "(", "0", ",", "-", "1", ")", "]", ")", "\n", ")", "\n", "\n", "self", ".", "action_space", "=", "spaces", ".", "Box", "(", "\n", "np", ".", "array", "(", "[", "-", "1", ",", "0", ",", "0", "]", ")", ",", "np", ".", "array", "(", "[", "+", "1", ",", "+", "1", ",", "+", "1", "]", ")", ",", "dtype", "=", "np", ".", "float32", "\n", ")", "# steer, gas, brake", "\n", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "\n", "low", "=", "0", ",", "high", "=", "255", ",", "shape", "=", "(", "STATE_H", ",", "STATE_W", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.seed": [[155, 158], ["gym.utils.seeding.np_random"], "methods", ["None"], ["", "def", "seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "np_random", ",", "seed", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "return", "[", "seed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing._destroy": [[159, 166], ["car_racing.CarRacing.car.destroy", "car_racing.CarRacing.world.DestroyBody"], "methods", ["None"], ["", "def", "_destroy", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "road", ":", "\n", "            ", "return", "\n", "", "for", "t", "in", "self", ".", "road", ":", "\n", "            ", "self", ".", "world", ".", "DestroyBody", "(", "t", ")", "\n", "", "self", ".", "road", "=", "[", "]", "\n", "self", ".", "car", ".", "destroy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing._create_track": [[167, 352], ["range", "len", "math.cos", "math.sin", "numpy.sqrt", "range", "range", "range", "car_racing.CarRacing.np_random.uniform", "car_racing.CarRacing.np_random.uniform", "checkpoints.append", "math.atan2", "math.cos", "math.sin", "track.append", "print", "len", "len", "range", "len", "range", "len", "car_racing.CarRacing.world.CreateStaticBody", "car_racing.CarRacing.road_poly.append", "car_racing.CarRacing.road.append", "min", "min", "numpy.square", "numpy.square", "numpy.sign", "abs", "numpy.sign", "car_racing.CarRacing.road_poly.append", "abs", "abs", "abs", "math.cos", "math.sin", "math.cos", "math.sin", "math.cos", "math.sin", "math.cos", "math.sin", "math.cos", "math.sin", "len", "math.cos", "math.sin", "math.cos", "math.sin", "math.cos", "math.sin", "math.cos", "math.sin", "len"], "methods", ["None"], ["", "def", "_create_track", "(", "self", ")", ":", "\n", "        ", "CHECKPOINTS", "=", "12", "\n", "\n", "# Create checkpoints", "\n", "checkpoints", "=", "[", "]", "\n", "for", "c", "in", "range", "(", "CHECKPOINTS", ")", ":", "\n", "            ", "noise", "=", "self", ".", "np_random", ".", "uniform", "(", "0", ",", "2", "*", "math", ".", "pi", "*", "1", "/", "CHECKPOINTS", ")", "\n", "alpha", "=", "2", "*", "math", ".", "pi", "*", "c", "/", "CHECKPOINTS", "+", "noise", "\n", "rad", "=", "self", ".", "np_random", ".", "uniform", "(", "TRACK_RAD", "/", "3", ",", "TRACK_RAD", ")", "\n", "\n", "if", "c", "==", "0", ":", "\n", "                ", "alpha", "=", "0", "\n", "rad", "=", "1.5", "*", "TRACK_RAD", "\n", "", "if", "c", "==", "CHECKPOINTS", "-", "1", ":", "\n", "                ", "alpha", "=", "2", "*", "math", ".", "pi", "*", "c", "/", "CHECKPOINTS", "\n", "self", ".", "start_alpha", "=", "2", "*", "math", ".", "pi", "*", "(", "-", "0.5", ")", "/", "CHECKPOINTS", "\n", "rad", "=", "1.5", "*", "TRACK_RAD", "\n", "\n", "", "checkpoints", ".", "append", "(", "(", "alpha", ",", "rad", "*", "math", ".", "cos", "(", "alpha", ")", ",", "rad", "*", "math", ".", "sin", "(", "alpha", ")", ")", ")", "\n", "", "self", ".", "road", "=", "[", "]", "\n", "\n", "# Go from one checkpoint to another to create track", "\n", "x", ",", "y", ",", "beta", "=", "1.5", "*", "TRACK_RAD", ",", "0", ",", "0", "\n", "dest_i", "=", "0", "\n", "laps", "=", "0", "\n", "track", "=", "[", "]", "\n", "no_freeze", "=", "2500", "\n", "visited_other_side", "=", "False", "\n", "while", "True", ":", "\n", "            ", "alpha", "=", "math", ".", "atan2", "(", "y", ",", "x", ")", "\n", "if", "visited_other_side", "and", "alpha", ">", "0", ":", "\n", "                ", "laps", "+=", "1", "\n", "visited_other_side", "=", "False", "\n", "", "if", "alpha", "<", "0", ":", "\n", "                ", "visited_other_side", "=", "True", "\n", "alpha", "+=", "2", "*", "math", ".", "pi", "\n", "\n", "", "while", "True", ":", "# Find destination from checkpoints", "\n", "                ", "failed", "=", "True", "\n", "\n", "while", "True", ":", "\n", "                    ", "dest_alpha", ",", "dest_x", ",", "dest_y", "=", "checkpoints", "[", "dest_i", "%", "len", "(", "checkpoints", ")", "]", "\n", "if", "alpha", "<=", "dest_alpha", ":", "\n", "                        ", "failed", "=", "False", "\n", "break", "\n", "", "dest_i", "+=", "1", "\n", "if", "dest_i", "%", "len", "(", "checkpoints", ")", "==", "0", ":", "\n", "                        ", "break", "\n", "\n", "", "", "if", "not", "failed", ":", "\n", "                    ", "break", "\n", "\n", "", "alpha", "-=", "2", "*", "math", ".", "pi", "\n", "continue", "\n", "\n", "", "r1x", "=", "math", ".", "cos", "(", "beta", ")", "\n", "r1y", "=", "math", ".", "sin", "(", "beta", ")", "\n", "p1x", "=", "-", "r1y", "\n", "p1y", "=", "r1x", "\n", "dest_dx", "=", "dest_x", "-", "x", "# vector towards destination", "\n", "dest_dy", "=", "dest_y", "-", "y", "\n", "# destination vector projected on rad:", "\n", "proj", "=", "r1x", "*", "dest_dx", "+", "r1y", "*", "dest_dy", "\n", "while", "beta", "-", "alpha", ">", "1.5", "*", "math", ".", "pi", ":", "\n", "                ", "beta", "-=", "2", "*", "math", ".", "pi", "\n", "", "while", "beta", "-", "alpha", "<", "-", "1.5", "*", "math", ".", "pi", ":", "\n", "                ", "beta", "+=", "2", "*", "math", ".", "pi", "\n", "", "prev_beta", "=", "beta", "\n", "proj", "*=", "SCALE", "\n", "if", "proj", ">", "0.3", ":", "\n", "                ", "beta", "-=", "min", "(", "TRACK_TURN_RATE", ",", "abs", "(", "0.001", "*", "proj", ")", ")", "\n", "", "if", "proj", "<", "-", "0.3", ":", "\n", "                ", "beta", "+=", "min", "(", "TRACK_TURN_RATE", ",", "abs", "(", "0.001", "*", "proj", ")", ")", "\n", "", "x", "+=", "p1x", "*", "TRACK_DETAIL_STEP", "\n", "y", "+=", "p1y", "*", "TRACK_DETAIL_STEP", "\n", "track", ".", "append", "(", "(", "alpha", ",", "prev_beta", "*", "0.5", "+", "beta", "*", "0.5", ",", "x", ",", "y", ")", ")", "\n", "if", "laps", ">", "4", ":", "\n", "                ", "break", "\n", "", "no_freeze", "-=", "1", "\n", "if", "no_freeze", "==", "0", ":", "\n", "                ", "break", "\n", "\n", "# Find closed loop range i1..i2, first loop should be ignored, second is OK", "\n", "", "", "i1", ",", "i2", "=", "-", "1", ",", "-", "1", "\n", "i", "=", "len", "(", "track", ")", "\n", "while", "True", ":", "\n", "            ", "i", "-=", "1", "\n", "if", "i", "==", "0", ":", "\n", "                ", "return", "False", "# Failed", "\n", "", "pass_through_start", "=", "(", "\n", "track", "[", "i", "]", "[", "0", "]", ">", "self", ".", "start_alpha", "and", "track", "[", "i", "-", "1", "]", "[", "0", "]", "<=", "self", ".", "start_alpha", "\n", ")", "\n", "if", "pass_through_start", "and", "i2", "==", "-", "1", ":", "\n", "                ", "i2", "=", "i", "\n", "", "elif", "pass_through_start", "and", "i1", "==", "-", "1", ":", "\n", "                ", "i1", "=", "i", "\n", "break", "\n", "", "", "if", "self", ".", "verbose", "==", "1", ":", "\n", "            ", "print", "(", "\"Track generation: %i..%i -> %i-tiles track\"", "%", "(", "i1", ",", "i2", ",", "i2", "-", "i1", ")", ")", "\n", "", "assert", "i1", "!=", "-", "1", "\n", "assert", "i2", "!=", "-", "1", "\n", "\n", "track", "=", "track", "[", "i1", ":", "i2", "-", "1", "]", "\n", "\n", "first_beta", "=", "track", "[", "0", "]", "[", "1", "]", "\n", "first_perp_x", "=", "math", ".", "cos", "(", "first_beta", ")", "\n", "first_perp_y", "=", "math", ".", "sin", "(", "first_beta", ")", "\n", "# Length of perpendicular jump to put together head and tail", "\n", "well_glued_together", "=", "np", ".", "sqrt", "(", "\n", "np", ".", "square", "(", "first_perp_x", "*", "(", "track", "[", "0", "]", "[", "2", "]", "-", "track", "[", "-", "1", "]", "[", "2", "]", ")", ")", "\n", "+", "np", ".", "square", "(", "first_perp_y", "*", "(", "track", "[", "0", "]", "[", "3", "]", "-", "track", "[", "-", "1", "]", "[", "3", "]", ")", ")", "\n", ")", "\n", "if", "well_glued_together", ">", "TRACK_DETAIL_STEP", ":", "\n", "            ", "return", "False", "\n", "\n", "# Red-white border on hard turns", "\n", "", "border", "=", "[", "False", "]", "*", "len", "(", "track", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "track", ")", ")", ":", "\n", "            ", "good", "=", "True", "\n", "oneside", "=", "0", "\n", "for", "neg", "in", "range", "(", "BORDER_MIN_COUNT", ")", ":", "\n", "                ", "beta1", "=", "track", "[", "i", "-", "neg", "-", "0", "]", "[", "1", "]", "\n", "beta2", "=", "track", "[", "i", "-", "neg", "-", "1", "]", "[", "1", "]", "\n", "good", "&=", "abs", "(", "beta1", "-", "beta2", ")", ">", "TRACK_TURN_RATE", "*", "0.2", "\n", "oneside", "+=", "np", ".", "sign", "(", "beta1", "-", "beta2", ")", "\n", "", "good", "&=", "abs", "(", "oneside", ")", "==", "BORDER_MIN_COUNT", "\n", "border", "[", "i", "]", "=", "good", "\n", "", "for", "i", "in", "range", "(", "len", "(", "track", ")", ")", ":", "\n", "            ", "for", "neg", "in", "range", "(", "BORDER_MIN_COUNT", ")", ":", "\n", "                ", "border", "[", "i", "-", "neg", "]", "|=", "border", "[", "i", "]", "\n", "\n", "# Create tiles", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "track", ")", ")", ":", "\n", "            ", "alpha1", ",", "beta1", ",", "x1", ",", "y1", "=", "track", "[", "i", "]", "\n", "alpha2", ",", "beta2", ",", "x2", ",", "y2", "=", "track", "[", "i", "-", "1", "]", "\n", "road1_l", "=", "(", "\n", "x1", "-", "TRACK_WIDTH", "*", "math", ".", "cos", "(", "beta1", ")", ",", "\n", "y1", "-", "TRACK_WIDTH", "*", "math", ".", "sin", "(", "beta1", ")", ",", "\n", ")", "\n", "road1_r", "=", "(", "\n", "x1", "+", "TRACK_WIDTH", "*", "math", ".", "cos", "(", "beta1", ")", ",", "\n", "y1", "+", "TRACK_WIDTH", "*", "math", ".", "sin", "(", "beta1", ")", ",", "\n", ")", "\n", "road2_l", "=", "(", "\n", "x2", "-", "TRACK_WIDTH", "*", "math", ".", "cos", "(", "beta2", ")", ",", "\n", "y2", "-", "TRACK_WIDTH", "*", "math", ".", "sin", "(", "beta2", ")", ",", "\n", ")", "\n", "road2_r", "=", "(", "\n", "x2", "+", "TRACK_WIDTH", "*", "math", ".", "cos", "(", "beta2", ")", ",", "\n", "y2", "+", "TRACK_WIDTH", "*", "math", ".", "sin", "(", "beta2", ")", ",", "\n", ")", "\n", "vertices", "=", "[", "road1_l", ",", "road1_r", ",", "road2_r", ",", "road2_l", "]", "\n", "self", ".", "fd_tile", ".", "shape", ".", "vertices", "=", "vertices", "\n", "t", "=", "self", ".", "world", ".", "CreateStaticBody", "(", "fixtures", "=", "self", ".", "fd_tile", ")", "\n", "t", ".", "userData", "=", "t", "\n", "c", "=", "0.01", "*", "(", "i", "%", "3", ")", "\n", "t", ".", "color", "=", "[", "ROAD_COLOR", "[", "0", "]", "+", "c", ",", "ROAD_COLOR", "[", "1", "]", "+", "c", ",", "ROAD_COLOR", "[", "2", "]", "+", "c", "]", "\n", "t", ".", "road_visited", "=", "False", "\n", "t", ".", "road_friction", "=", "1.0", "\n", "t", ".", "fixtures", "[", "0", "]", ".", "sensor", "=", "True", "\n", "self", ".", "road_poly", ".", "append", "(", "(", "[", "road1_l", ",", "road1_r", ",", "road2_r", ",", "road2_l", "]", ",", "t", ".", "color", ")", ")", "\n", "self", ".", "road", ".", "append", "(", "t", ")", "\n", "if", "border", "[", "i", "]", ":", "\n", "                ", "side", "=", "np", ".", "sign", "(", "beta2", "-", "beta1", ")", "\n", "b1_l", "=", "(", "\n", "x1", "+", "side", "*", "TRACK_WIDTH", "*", "math", ".", "cos", "(", "beta1", ")", ",", "\n", "y1", "+", "side", "*", "TRACK_WIDTH", "*", "math", ".", "sin", "(", "beta1", ")", ",", "\n", ")", "\n", "b1_r", "=", "(", "\n", "x1", "+", "side", "*", "(", "TRACK_WIDTH", "+", "BORDER", ")", "*", "math", ".", "cos", "(", "beta1", ")", ",", "\n", "y1", "+", "side", "*", "(", "TRACK_WIDTH", "+", "BORDER", ")", "*", "math", ".", "sin", "(", "beta1", ")", ",", "\n", ")", "\n", "b2_l", "=", "(", "\n", "x2", "+", "side", "*", "TRACK_WIDTH", "*", "math", ".", "cos", "(", "beta2", ")", ",", "\n", "y2", "+", "side", "*", "TRACK_WIDTH", "*", "math", ".", "sin", "(", "beta2", ")", ",", "\n", ")", "\n", "b2_r", "=", "(", "\n", "x2", "+", "side", "*", "(", "TRACK_WIDTH", "+", "BORDER", ")", "*", "math", ".", "cos", "(", "beta2", ")", ",", "\n", "y2", "+", "side", "*", "(", "TRACK_WIDTH", "+", "BORDER", ")", "*", "math", ".", "sin", "(", "beta2", ")", ",", "\n", ")", "\n", "self", ".", "road_poly", ".", "append", "(", "\n", "(", "[", "b1_l", ",", "b1_r", ",", "b2_r", ",", "b2_l", "]", ",", "(", "1", ",", "1", ",", "1", ")", "if", "i", "%", "2", "==", "0", "else", "(", "1", ",", "0", ",", "0", ")", ")", "\n", ")", "\n", "", "", "self", ".", "track", "=", "track", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.reset": [[353, 373], ["car_racing.CarRacing._destroy", "gym.envs.box2d.car_dynamics.Car", "car_racing.CarRacing._create_track", "car_racing.CarRacing.step", "print"], "methods", ["home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing._destroy", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing._create_track", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.step"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_destroy", "(", ")", "\n", "self", ".", "reward", "=", "0.0", "\n", "self", ".", "prev_reward", "=", "0.0", "\n", "self", ".", "tile_visited_count", "=", "0", "\n", "self", ".", "t", "=", "0.0", "\n", "self", ".", "road_poly", "=", "[", "]", "\n", "\n", "while", "True", ":", "\n", "            ", "success", "=", "self", ".", "_create_track", "(", ")", "\n", "if", "success", ":", "\n", "                ", "break", "\n", "", "if", "self", ".", "verbose", "==", "1", ":", "\n", "                ", "print", "(", "\n", "\"retry to generate track (normal if there are not many\"", "\n", "\"instances of this message)\"", "\n", ")", "\n", "", "", "self", ".", "car", "=", "Car", "(", "self", ".", "world", ",", "*", "self", ".", "track", "[", "0", "]", "[", "1", ":", "4", "]", ")", "\n", "\n", "return", "self", ".", "step", "(", "None", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.step": [[374, 403], ["car_racing.CarRacing.car.step", "car_racing.CarRacing.world.Step", "car_racing.CarRacing.render", "car_racing.CarRacing.car.steer", "car_racing.CarRacing.car.gas", "car_racing.CarRacing.car.brake", "len", "abs", "abs"], "methods", ["home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.step", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.render"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "if", "action", "is", "not", "None", ":", "\n", "            ", "self", ".", "car", ".", "steer", "(", "-", "action", "[", "0", "]", ")", "\n", "self", ".", "car", ".", "gas", "(", "action", "[", "1", "]", ")", "\n", "self", ".", "car", ".", "brake", "(", "action", "[", "2", "]", ")", "\n", "\n", "", "self", ".", "car", ".", "step", "(", "1.0", "/", "FPS", ")", "\n", "self", ".", "world", ".", "Step", "(", "1.0", "/", "FPS", ",", "6", "*", "30", ",", "2", "*", "30", ")", "\n", "self", ".", "t", "+=", "1.0", "/", "FPS", "\n", "\n", "self", ".", "state", "=", "self", ".", "render", "(", "\"state_pixels\"", ")", "\n", "\n", "step_reward", "=", "0", "\n", "done", "=", "False", "\n", "if", "action", "is", "not", "None", ":", "# First step without action, called from reset()", "\n", "            ", "self", ".", "reward", "-=", "0.1", "\n", "# We actually don't want to count fuel spent, we want car to be faster.", "\n", "# self.reward -=  10 * self.car.fuel_spent / ENGINE_POWER", "\n", "self", ".", "car", ".", "fuel_spent", "=", "0.0", "\n", "step_reward", "=", "self", ".", "reward", "-", "self", ".", "prev_reward", "\n", "self", ".", "prev_reward", "=", "self", ".", "reward", "\n", "if", "self", ".", "tile_visited_count", "==", "len", "(", "self", ".", "track", ")", ":", "\n", "                ", "done", "=", "True", "\n", "", "x", ",", "y", "=", "self", ".", "car", ".", "hull", ".", "position", "\n", "if", "abs", "(", "x", ")", ">", "PLAYFIELD", "or", "abs", "(", "y", ")", ">", "PLAYFIELD", ":", "\n", "                ", "done", "=", "True", "\n", "step_reward", "=", "-", "100", "\n", "\n", "", "", "return", "self", ".", "state", ",", "step_reward", ",", "done", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.render": [[404, 486], ["car_racing.CarRacing.transform.set_scale", "car_racing.CarRacing.transform.set_translation", "car_racing.CarRacing.transform.set_rotation", "car_racing.CarRacing.car.draw", "win.switch_to", "win.dispatch_events", "win.clear", "pyglet.gl.glViewport", "t.enable", "car_racing.CarRacing.render_road", "t.disable", "car_racing.CarRacing.render_indicators", "pyglet.image.get_buffer_manager().get_color_buffer().get_image_data", "numpy.fromstring", "arr.reshape.reshape.reshape", "rendering.Viewer", "pyglet.text.Label", "rendering.Transform", "numpy.linalg.norm", "math.atan2", "geom.render", "win.flip", "pyglet.image.get_buffer_manager().get_color_buffer().get_image_data.get_data", "max", "min", "hasattr", "int", "int", "pyglet.image.get_buffer_manager().get_color_buffer", "win.context._nscontext.view().backingScaleFactor", "math.cos", "math.sin", "math.sin", "math.cos", "pyglet.image.get_buffer_manager", "win.context._nscontext.view"], "methods", ["home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.render_road", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.render_indicators", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.render"], ["", "def", "render", "(", "self", ",", "mode", "=", "\"human\"", ")", ":", "\n", "        ", "assert", "mode", "in", "[", "\"human\"", ",", "\"state_pixels\"", ",", "\"rgb_array\"", "]", "\n", "if", "self", ".", "viewer", "is", "None", ":", "\n", "            ", "from", "gym", ".", "envs", ".", "classic_control", "import", "rendering", "\n", "\n", "self", ".", "viewer", "=", "rendering", ".", "Viewer", "(", "WINDOW_W", ",", "WINDOW_H", ")", "\n", "self", ".", "score_label", "=", "pyglet", ".", "text", ".", "Label", "(", "\n", "\"0000\"", ",", "\n", "font_size", "=", "36", ",", "\n", "x", "=", "20", ",", "\n", "y", "=", "WINDOW_H", "*", "2.5", "/", "40.00", ",", "\n", "anchor_x", "=", "\"left\"", ",", "\n", "anchor_y", "=", "\"center\"", ",", "\n", "color", "=", "(", "255", ",", "255", ",", "255", ",", "255", ")", ",", "\n", ")", "\n", "self", ".", "transform", "=", "rendering", ".", "Transform", "(", ")", "\n", "\n", "", "if", "\"t\"", "not", "in", "self", ".", "__dict__", ":", "\n", "            ", "return", "# reset() not called yet", "\n", "\n", "# Animate zoom first second:", "\n", "", "zoom", "=", "0.1", "*", "SCALE", "*", "max", "(", "1", "-", "self", ".", "t", ",", "0", ")", "+", "ZOOM", "*", "SCALE", "*", "min", "(", "self", ".", "t", ",", "1", ")", "\n", "scroll_x", "=", "self", ".", "car", ".", "hull", ".", "position", "[", "0", "]", "\n", "scroll_y", "=", "self", ".", "car", ".", "hull", ".", "position", "[", "1", "]", "\n", "angle", "=", "-", "self", ".", "car", ".", "hull", ".", "angle", "\n", "vel", "=", "self", ".", "car", ".", "hull", ".", "linearVelocity", "\n", "if", "np", ".", "linalg", ".", "norm", "(", "vel", ")", ">", "0.5", ":", "\n", "            ", "angle", "=", "math", ".", "atan2", "(", "vel", "[", "0", "]", ",", "vel", "[", "1", "]", ")", "\n", "", "self", ".", "transform", ".", "set_scale", "(", "zoom", ",", "zoom", ")", "\n", "self", ".", "transform", ".", "set_translation", "(", "\n", "WINDOW_W", "/", "2", "\n", "-", "(", "scroll_x", "*", "zoom", "*", "math", ".", "cos", "(", "angle", ")", "-", "scroll_y", "*", "zoom", "*", "math", ".", "sin", "(", "angle", ")", ")", ",", "\n", "WINDOW_H", "/", "4", "\n", "-", "(", "scroll_x", "*", "zoom", "*", "math", ".", "sin", "(", "angle", ")", "+", "scroll_y", "*", "zoom", "*", "math", ".", "cos", "(", "angle", ")", ")", ",", "\n", ")", "\n", "self", ".", "transform", ".", "set_rotation", "(", "angle", ")", "\n", "\n", "self", ".", "car", ".", "draw", "(", "self", ".", "viewer", ",", "mode", "!=", "\"state_pixels\"", ")", "\n", "\n", "arr", "=", "None", "\n", "win", "=", "self", ".", "viewer", ".", "window", "\n", "win", ".", "switch_to", "(", ")", "\n", "win", ".", "dispatch_events", "(", ")", "\n", "\n", "win", ".", "clear", "(", ")", "\n", "t", "=", "self", ".", "transform", "\n", "if", "mode", "==", "\"rgb_array\"", ":", "\n", "            ", "VP_W", "=", "VIDEO_W", "\n", "VP_H", "=", "VIDEO_H", "\n", "", "elif", "mode", "==", "\"state_pixels\"", ":", "\n", "            ", "VP_W", "=", "STATE_W", "\n", "VP_H", "=", "STATE_H", "\n", "", "else", ":", "\n", "            ", "pixel_scale", "=", "1", "\n", "if", "hasattr", "(", "win", ".", "context", ",", "\"_nscontext\"", ")", ":", "\n", "                ", "pixel_scale", "=", "(", "\n", "win", ".", "context", ".", "_nscontext", ".", "view", "(", ")", ".", "backingScaleFactor", "(", ")", "\n", ")", "# pylint: disable=protected-access", "\n", "", "VP_W", "=", "int", "(", "pixel_scale", "*", "WINDOW_W", ")", "\n", "VP_H", "=", "int", "(", "pixel_scale", "*", "WINDOW_H", ")", "\n", "\n", "", "gl", ".", "glViewport", "(", "0", ",", "0", ",", "VP_W", ",", "VP_H", ")", "\n", "t", ".", "enable", "(", ")", "\n", "self", ".", "render_road", "(", ")", "\n", "for", "geom", "in", "self", ".", "viewer", ".", "onetime_geoms", ":", "\n", "            ", "geom", ".", "render", "(", ")", "\n", "", "self", ".", "viewer", ".", "onetime_geoms", "=", "[", "]", "\n", "t", ".", "disable", "(", ")", "\n", "self", ".", "render_indicators", "(", "WINDOW_W", ",", "WINDOW_H", ")", "\n", "\n", "if", "mode", "==", "\"human\"", ":", "\n", "            ", "win", ".", "flip", "(", ")", "\n", "return", "self", ".", "viewer", ".", "isopen", "\n", "\n", "", "image_data", "=", "(", "\n", "pyglet", ".", "image", ".", "get_buffer_manager", "(", ")", ".", "get_color_buffer", "(", ")", ".", "get_image_data", "(", ")", "\n", ")", "\n", "arr", "=", "np", ".", "fromstring", "(", "image_data", ".", "get_data", "(", ")", ",", "dtype", "=", "np", ".", "uint8", ",", "sep", "=", "\"\"", ")", "\n", "arr", "=", "arr", ".", "reshape", "(", "VP_H", ",", "VP_W", ",", "4", ")", "\n", "arr", "=", "arr", "[", ":", ":", "-", "1", ",", ":", ",", "0", ":", "3", "]", "\n", "\n", "return", "arr", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.close": [[487, 491], ["car_racing.CarRacing.viewer.close"], "methods", ["home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "viewer", "is", "not", "None", ":", "\n", "            ", "self", ".", "viewer", ".", "close", "(", ")", "\n", "self", ".", "viewer", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.render_road": [[492, 540], ["colors.extend", "range", "pyglet.graphics.vertex_list", "pyglet.graphics.vertex_list.draw", "pyglet.graphics.vertex_list.delete", "range", "colors.extend", "polygons_.extend", "polygons_.extend", "len", "len"], "methods", ["None"], ["", "", "def", "render_road", "(", "self", ")", ":", "\n", "        ", "colors", "=", "[", "0.4", ",", "0.8", ",", "0.4", ",", "1.0", "]", "*", "4", "\n", "polygons_", "=", "[", "\n", "+", "PLAYFIELD", ",", "\n", "+", "PLAYFIELD", ",", "\n", "0", ",", "\n", "+", "PLAYFIELD", ",", "\n", "-", "PLAYFIELD", ",", "\n", "0", ",", "\n", "-", "PLAYFIELD", ",", "\n", "-", "PLAYFIELD", ",", "\n", "0", ",", "\n", "-", "PLAYFIELD", ",", "\n", "+", "PLAYFIELD", ",", "\n", "0", ",", "\n", "]", "\n", "\n", "k", "=", "PLAYFIELD", "/", "20.0", "\n", "colors", ".", "extend", "(", "[", "0.4", ",", "0.9", ",", "0.4", ",", "1.0", "]", "*", "4", "*", "20", "*", "20", ")", "\n", "for", "x", "in", "range", "(", "-", "20", ",", "20", ",", "2", ")", ":", "\n", "            ", "for", "y", "in", "range", "(", "-", "20", ",", "20", ",", "2", ")", ":", "\n", "                ", "polygons_", ".", "extend", "(", "\n", "[", "\n", "k", "*", "x", "+", "k", ",", "\n", "k", "*", "y", "+", "0", ",", "\n", "0", ",", "\n", "k", "*", "x", "+", "0", ",", "\n", "k", "*", "y", "+", "0", ",", "\n", "0", ",", "\n", "k", "*", "x", "+", "0", ",", "\n", "k", "*", "y", "+", "k", ",", "\n", "0", ",", "\n", "k", "*", "x", "+", "k", ",", "\n", "k", "*", "y", "+", "k", ",", "\n", "0", ",", "\n", "]", "\n", ")", "\n", "\n", "", "", "for", "poly", ",", "color", "in", "self", ".", "road_poly", ":", "\n", "            ", "colors", ".", "extend", "(", "[", "color", "[", "0", "]", ",", "color", "[", "1", "]", ",", "color", "[", "2", "]", ",", "1", "]", "*", "len", "(", "poly", ")", ")", "\n", "for", "p", "in", "poly", ":", "\n", "                ", "polygons_", ".", "extend", "(", "[", "p", "[", "0", "]", ",", "p", "[", "1", "]", ",", "0", "]", ")", "\n", "\n", "", "", "vl", "=", "pyglet", ".", "graphics", ".", "vertex_list", "(", "\n", "len", "(", "polygons_", ")", "//", "3", ",", "(", "\"v3f\"", ",", "polygons_", ")", ",", "(", "\"c4f\"", ",", "colors", ")", "# gl.GL_QUADS,", "\n", ")", "\n", "vl", ".", "draw", "(", "gl", ".", "GL_QUADS", ")", "\n", "vl", ".", "delete", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.render_indicators": [[541, 604], ["numpy.sqrt", "car_racing.CarRacing.render_indicators.vertical_ind"], "methods", ["None"], ["", "def", "render_indicators", "(", "self", ",", "W", ",", "H", ")", ":", "\n", "        ", "s", "=", "W", "/", "40.0", "\n", "h", "=", "H", "/", "40.0", "\n", "colors", "=", "[", "0", ",", "0", ",", "0", ",", "1", "]", "*", "4", "\n", "polygons", "=", "[", "W", ",", "0", ",", "0", ",", "W", ",", "5", "*", "h", ",", "0", ",", "0", ",", "5", "*", "h", ",", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "\n", "def", "vertical_ind", "(", "place", ",", "val", ",", "color", ")", ":", "\n", "            ", "colors", ".", "extend", "(", "[", "color", "[", "0", "]", ",", "color", "[", "1", "]", ",", "color", "[", "2", "]", ",", "1", "]", "*", "4", ")", "\n", "polygons", ".", "extend", "(", "\n", "[", "\n", "place", "*", "s", ",", "\n", "h", "+", "h", "*", "val", ",", "\n", "0", ",", "\n", "(", "place", "+", "1", ")", "*", "s", ",", "\n", "h", "+", "h", "*", "val", ",", "\n", "0", ",", "\n", "(", "place", "+", "1", ")", "*", "s", ",", "\n", "h", ",", "\n", "0", ",", "\n", "(", "place", "+", "0", ")", "*", "s", ",", "\n", "h", ",", "\n", "0", ",", "\n", "]", "\n", ")", "\n", "\n", "", "def", "horiz_ind", "(", "place", ",", "val", ",", "color", ")", ":", "\n", "            ", "colors", ".", "extend", "(", "[", "color", "[", "0", "]", ",", "color", "[", "1", "]", ",", "color", "[", "2", "]", ",", "1", "]", "*", "4", ")", "\n", "polygons", ".", "extend", "(", "\n", "[", "\n", "(", "place", "+", "0", ")", "*", "s", ",", "\n", "4", "*", "h", ",", "\n", "0", ",", "\n", "(", "place", "+", "val", ")", "*", "s", ",", "\n", "4", "*", "h", ",", "\n", "0", ",", "\n", "(", "place", "+", "val", ")", "*", "s", ",", "\n", "2", "*", "h", ",", "\n", "0", ",", "\n", "(", "place", "+", "0", ")", "*", "s", ",", "\n", "2", "*", "h", ",", "\n", "0", ",", "\n", "]", "\n", ")", "\n", "\n", "", "true_speed", "=", "np", ".", "sqrt", "(", "\n", "np", ".", "square", "(", "self", ".", "car", ".", "hull", ".", "linearVelocity", "[", "0", "]", ")", "\n", "+", "np", ".", "square", "(", "self", ".", "car", ".", "hull", ".", "linearVelocity", "[", "1", "]", ")", "\n", ")", "\n", "\n", "vertical_ind", "(", "5", ",", "0.02", "*", "true_speed", ",", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "vertical_ind", "(", "7", ",", "0.01", "*", "self", ".", "car", ".", "wheels", "[", "0", "]", ".", "omega", ",", "(", "0.0", ",", "0", ",", "1", ")", ")", "# ABS sensors", "\n", "vertical_ind", "(", "8", ",", "0.01", "*", "self", ".", "car", ".", "wheels", "[", "1", "]", ".", "omega", ",", "(", "0.0", ",", "0", ",", "1", ")", ")", "\n", "vertical_ind", "(", "9", ",", "0.01", "*", "self", ".", "car", ".", "wheels", "[", "2", "]", ".", "omega", ",", "(", "0.2", ",", "0", ",", "1", ")", ")", "\n", "vertical_ind", "(", "10", ",", "0.01", "*", "self", ".", "car", ".", "wheels", "[", "3", "]", ".", "omega", ",", "(", "0.2", ",", "0", ",", "1", ")", ")", "\n", "horiz_ind", "(", "20", ",", "-", "10.0", "*", "self", ".", "car", ".", "wheels", "[", "0", "]", ".", "joint", ".", "angle", ",", "(", "0", ",", "1", ",", "0", ")", ")", "\n", "horiz_ind", "(", "30", ",", "-", "0.8", "*", "self", ".", "car", ".", "hull", ".", "angularVelocity", ",", "(", "1", ",", "0", ",", "0", ")", ")", "\n", "vl", "=", "pyglet", ".", "graphics", ".", "vertex_list", "(", "\n", "len", "(", "polygons", ")", "//", "3", ",", "(", "\"v3f\"", ",", "polygons", ")", ",", "(", "\"c4f\"", ",", "colors", ")", "# gl.GL_QUADS,", "\n", ")", "\n", "vl", ".", "draw", "(", "gl", ".", "GL_QUADS", ")", "\n", "vl", ".", "delete", "(", ")", "\n", "self", ".", "score_label", ".", "text", "=", "\"%04i\"", "%", "self", ".", "reward", "\n", "self", ".", "score_label", ".", "draw", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.replay_memory.ReplayMemory.__init__": [[6, 22], ["torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "capacity", ",", "obs_shape", ",", "obs_size", ",", "linear", "=", "False", ",", "device", "=", "'cpu'", ")", ":", "\n", "\n", "        ", "self", ".", "device", "=", "device", "\n", "\n", "self", ".", "capacity", "=", "capacity", "# The maximum number of items to be stored in memory", "\n", "\n", "# Initialize (empty) memory tensors", "\n", "if", "linear", ":", "\n", "            ", "self", ".", "obs_mem", "=", "torch", ".", "empty", "(", "[", "capacity", "]", "+", "[", "obs_size", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "obs_mem", "=", "torch", ".", "empty", "(", "[", "capacity", "]", "+", "[", "dim", "for", "dim", "in", "obs_shape", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "self", ".", "device", ")", "\n", "", "self", ".", "action_mem", "=", "torch", ".", "empty", "(", "capacity", ",", "dtype", "=", "torch", ".", "int64", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "reward_mem", "=", "torch", ".", "empty", "(", "capacity", ",", "dtype", "=", "torch", ".", "int16", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "done_mem", "=", "torch", ".", "empty", "(", "capacity", ",", "dtype", "=", "torch", ".", "int8", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "self", ".", "push_count", "=", "0", "# The number of times new data has been pushed to memory", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.replay_memory.ReplayMemory.push": [[23, 32], ["replay_memory.ReplayMemory.position", "replay_memory.ReplayMemory.position", "replay_memory.ReplayMemory.position", "replay_memory.ReplayMemory.position"], "methods", ["home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.data_collector.DataCollector.position", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.data_collector.DataCollector.position", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.data_collector.DataCollector.position", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.data_collector.DataCollector.position"], ["", "def", "push", "(", "self", ",", "obs", ",", "action", ",", "reward", ",", "done", ")", ":", "\n", "\n", "# Store data to memory", "\n", "        ", "self", ".", "obs_mem", "[", "self", ".", "position", "(", ")", "]", "=", "obs", "\n", "self", ".", "action_mem", "[", "self", ".", "position", "(", ")", "]", "=", "action", "\n", "self", ".", "reward_mem", "[", "self", ".", "position", "(", ")", "]", "=", "reward", "\n", "self", ".", "done_mem", "[", "self", ".", "position", "(", ")", "]", "=", "done", "\n", "\n", "self", ".", "push_count", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.replay_memory.ReplayMemory.position": [[33, 36], ["None"], "methods", ["None"], ["", "def", "position", "(", "self", ")", ":", "\n", "# Returns the next position (index) to which data is pushed", "\n", "        ", "return", "self", ".", "push_count", "%", "self", ".", "capacity", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.replay_memory.ReplayMemory.sample": [[38, 73], ["range", "range", "numpy.random.choice", "len", "len", "range", "range", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "min", "replay_memory.ReplayMemory.position", "range", "range", "range", "range", "replay_memory.ReplayMemory.position", "len", "len", "len", "len", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.data_collector.DataCollector.position", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.data_collector.DataCollector.position"], ["", "def", "sample", "(", "self", ",", "obs_indices", ",", "action_indices", ",", "reward_indices", ",", "done_indices", ",", "max_n_indices", ",", "batch_size", ")", ":", "\n", "# Pick indices at random", "\n", "        ", "end_indices", "=", "np", ".", "random", ".", "choice", "(", "min", "(", "self", ".", "push_count", ",", "self", ".", "capacity", ")", "-", "max_n_indices", "*", "2", ",", "batch_size", ",", "replace", "=", "False", ")", "+", "max_n_indices", "\n", "\n", "# Correct for sampling near the position where data was last pushed", "\n", "for", "i", "in", "range", "(", "len", "(", "end_indices", ")", ")", ":", "\n", "            ", "if", "end_indices", "[", "i", "]", "in", "range", "(", "self", ".", "position", "(", ")", ",", "self", ".", "position", "(", ")", "+", "max_n_indices", ")", ":", "\n", "                ", "end_indices", "[", "i", "]", "+=", "max_n_indices", "\n", "\n", "# Retrieve the specified indices that come before the end_indices", "\n", "", "", "obs_batch", "=", "self", ".", "obs_mem", "[", "np", ".", "array", "(", "[", "index", "-", "obs_indices", "for", "index", "in", "end_indices", "]", ")", "]", "\n", "action_batch", "=", "self", ".", "action_mem", "[", "np", ".", "array", "(", "[", "index", "-", "action_indices", "for", "index", "in", "end_indices", "]", ")", "]", "\n", "reward_batch", "=", "self", ".", "reward_mem", "[", "np", ".", "array", "(", "[", "index", "-", "reward_indices", "for", "index", "in", "end_indices", "]", ")", "]", "\n", "done_batch", "=", "self", ".", "done_mem", "[", "np", ".", "array", "(", "[", "index", "-", "done_indices", "for", "index", "in", "end_indices", "]", ")", "]", "\n", "\n", "# Correct for sampling over multiple episodes (change some values when a sample has done = True)", "\n", "for", "i", "in", "range", "(", "len", "(", "end_indices", ")", ")", ":", "\n", "            ", "index", "=", "end_indices", "[", "i", "]", "\n", "for", "j", "in", "range", "(", "1", ",", "max_n_indices", ")", ":", "\n", "                ", "if", "self", ".", "done_mem", "[", "index", "-", "j", "]", ":", "\n", "                    ", "for", "k", "in", "range", "(", "len", "(", "obs_indices", ")", ")", ":", "\n", "                        ", "if", "obs_indices", "[", "k", "]", ">=", "j", ":", "\n", "                            ", "obs_batch", "[", "i", ",", "k", "]", "=", "torch", ".", "zeros_like", "(", "self", ".", "obs_mem", "[", "0", "]", ")", "\n", "", "", "for", "k", "in", "range", "(", "len", "(", "action_indices", ")", ")", ":", "\n", "                        ", "if", "action_indices", "[", "k", "]", ">=", "j", ":", "\n", "                            ", "action_batch", "[", "i", ",", "k", "]", "=", "torch", ".", "zeros_like", "(", "self", ".", "action_mem", "[", "0", "]", ")", "# Assigning action '0' might not be the best solution, perhaps as assigning at random, or adding an action for this specific case would be better", "\n", "", "", "for", "k", "in", "range", "(", "len", "(", "reward_indices", ")", ")", ":", "\n", "                        ", "if", "reward_indices", "[", "k", "]", ">=", "j", ":", "\n", "                            ", "reward_batch", "[", "i", ",", "k", "]", "=", "torch", ".", "zeros_like", "(", "self", ".", "reward_mem", "[", "0", "]", ")", "# Reward of 0 will probably not make sense for every environment", "\n", "", "", "for", "k", "in", "range", "(", "len", "(", "done_indices", ")", ")", ":", "\n", "                        ", "if", "done_indices", "[", "k", "]", ">=", "j", ":", "\n", "                            ", "done_batch", "[", "i", ",", "k", "]", "=", "torch", ".", "zeros_like", "(", "self", ".", "done_mem", "[", "0", "]", ")", "\n", "", "", "break", "\n", "\n", "", "", "", "return", "obs_batch", ",", "action_batch", ",", "reward_batch", ",", "done_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.replay_memory.ReplayMemory.get_last_n_obs": [[74, 90], ["torch.zeros", "min", "range", "replay_memory.ReplayMemory.position", "replay_memory.ReplayMemory.position", "replay_memory.ReplayMemory.position", "replay_memory.ReplayMemory.position", "replay_memory.ReplayMemory.position"], "methods", ["home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.data_collector.DataCollector.position", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.data_collector.DataCollector.position", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.data_collector.DataCollector.position", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.data_collector.DataCollector.position", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.data_collector.DataCollector.position"], ["", "def", "get_last_n_obs", "(", "self", ",", "n", ",", "obs_shape", ")", ":", "\n", "        ", "\"\"\" Get the last n observations stored in memory (of a single episode) \"\"\"", "\n", "last_n_obs", "=", "torch", ".", "zeros", "(", "[", "n", "]", "+", "[", "dim", "for", "dim", "in", "obs_shape", "]", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "n", "=", "min", "(", "n", ",", "self", ".", "push_count", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "n", "+", "1", ")", ":", "\n", "            ", "if", "self", ".", "position", "(", ")", ">=", "i", ":", "\n", "                ", "if", "self", ".", "done_mem", "[", "self", ".", "position", "(", ")", "-", "i", "]", ":", "\n", "                    ", "return", "last_n_obs", "\n", "", "last_n_obs", "[", "-", "i", "]", "=", "self", ".", "obs_mem", "[", "self", ".", "position", "(", ")", "-", "i", "]", "\n", "", "else", ":", "\n", "                ", "if", "self", ".", "done_mem", "[", "-", "i", "+", "self", ".", "position", "(", ")", "]", ":", "\n", "                    ", "return", "last_n_obs", "\n", "", "last_n_obs", "[", "-", "i", "]", "=", "self", ".", "obs_mem", "[", "-", "i", "+", "self", ".", "position", "(", ")", "]", "\n", "\n", "", "", "return", "last_n_obs", "", "", "", ""]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.daif_CarRacing.VAE.__init__": [[18, 82], ["torch.Module.__init__", "torch.Sequential().to", "torch.Sequential().to", "torch.Sequential().to", "torch.Sequential().to", "numpy.prod", "torch.Sequential().to", "torch.Sequential().to", "torch.Sequential().to", "torch.Sequential().to", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "daif_CarRacing.VAE.to", "daif_CarRacing.VAE.parameters", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.dq_cnn_CarRacing.Agent.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_screens", ",", "n_latent_states", ",", "lr", "=", "1e-5", ",", "device", "=", "'cpu'", ")", ":", "\n", "        ", "super", "(", "VAE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "device", "=", "device", "\n", "\n", "self", ".", "n_screens", "=", "n_screens", "\n", "self", ".", "n_latent_states", "=", "n_latent_states", "\n", "\n", "# The convolutional encoder", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "n_screens", ",", "32", ",", "4", ",", "2", ")", ",", "# (1, 8, 42, 42) --> (1, 32, 20, 20)", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "4", ",", "2", ")", ",", "# (1, 32, 20, 20) --> (1, 64, 9, 9)", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "5", ",", "2", ")", ",", "# (1, 64, 9, 9) --> (1, 128, 3, 3)", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "3", ",", "2", ")", ",", "# (1, 128, 3, 3) --> (1, 256, 1, 1)", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# The size of the encoder output", "\n", "self", ".", "encoder_output_shape", "=", "(", "256", ",", "1", ",", "1", ")", "\n", "self", ".", "encoder_output_size", "=", "np", ".", "prod", "(", "self", ".", "encoder_output_shape", ")", "\n", "\n", "# The convolutional decoder", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "256", ",", "128", ",", "3", ",", "2", ")", ",", "# (1, 256, 1, 1) --> (1, 128, 3, 3)", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "ConvTranspose2d", "(", "128", ",", "64", ",", "5", ",", "2", ")", ",", "# (1, 128, 3, 3) --> (1, 64, 9, 9)", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "ConvTranspose2d", "(", "64", ",", "32", ",", "4", ",", "2", ")", ",", "# (1, 64, 9, 9) --> (1, 32, 20, 20)", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "ConvTranspose2d", "(", "32", ",", "self", ".", "n_screens", ",", "4", ",", "2", ")", ",", "# (1, 32, 20, 20) --> (1, n_screens, 42, 42)", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "n_screens", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# Fully connected layers connected to encoder", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "self", ".", "encoder_output_size", ",", "self", ".", "encoder_output_size", "//", "2", ")", "# 1024 --> 512", "\n", "self", ".", "fc2_mu", "=", "nn", ".", "Linear", "(", "self", ".", "encoder_output_size", "//", "2", ",", "self", ".", "n_latent_states", ")", "# 512 --> 128", "\n", "self", ".", "fc2_logvar", "=", "nn", ".", "Linear", "(", "self", ".", "encoder_output_size", "//", "2", ",", "self", ".", "n_latent_states", ")", "# 512 --> 128", "\n", "\n", "# Fully connected layers connected to decoder", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "self", ".", "n_latent_states", ",", "self", ".", "encoder_output_size", "//", "2", ")", "# 128 --> 512", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "self", ".", "encoder_output_size", "//", "2", ",", "self", ".", "encoder_output_size", ")", "# 512 --> 1024", "\n", "\n", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "parameters", "(", ")", ",", "lr", ")", "\n", "\n", "self", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.daif_CarRacing.VAE.encode": [[83, 89], ["daif_CarRacing.VAE.encoder", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "daif_CarRacing.VAE.fc1", "daif_CarRacing.VAE.fc2_mu", "daif_CarRacing.VAE.fc2_logvar", "daif_CarRacing.VAE.view", "daif_CarRacing.VAE.size"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ")", ":", "\n", "# Deconstruct input x into a distribution over latent states", "\n", "        ", "conv", "=", "self", ".", "encoder", "(", "x", ")", "\n", "h1", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "conv", ".", "view", "(", "conv", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", ")", "\n", "mu", ",", "logvar", "=", "self", ".", "fc2_mu", "(", "h1", ")", ",", "self", ".", "fc2_logvar", "(", "h1", ")", "\n", "return", "mu", ",", "logvar", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.daif_CarRacing.VAE.reparameterize": [[90, 95], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like"], "methods", ["None"], ["", "def", "reparameterize", "(", "self", ",", "mu", ",", "logvar", ")", ":", "\n", "# Apply reparameterization trick", "\n", "        ", "std", "=", "torch", ".", "exp", "(", "0.5", "*", "logvar", ")", "\n", "eps", "=", "torch", ".", "randn_like", "(", "std", ")", "\n", "return", "mu", "+", "eps", "*", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.daif_CarRacing.VAE.decode": [[96, 103], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "daif_CarRacing.VAE.fc4", "deconv_input.view.view.view", "daif_CarRacing.VAE.decoder", "daif_CarRacing.VAE.fc3"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "z", ",", "batch_size", "=", "1", ")", ":", "\n", "# Reconstruct original input x from the (reparameterized) latent states", "\n", "        ", "h3", "=", "F", ".", "relu", "(", "self", ".", "fc3", "(", "z", ")", ")", "\n", "deconv_input", "=", "self", ".", "fc4", "(", "h3", ")", "\n", "deconv_input", "=", "deconv_input", ".", "view", "(", "[", "batch_size", "]", "+", "[", "dim", "for", "dim", "in", "self", ".", "encoder_output_shape", "]", ")", "\n", "y", "=", "self", ".", "decoder", "(", "deconv_input", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.daif_CarRacing.VAE.forward": [[104, 110], ["daif_CarRacing.VAE.encode", "daif_CarRacing.VAE.reparameterize", "daif_CarRacing.VAE.decode"], "methods", ["home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.daif_CarRacing.VAE.encode", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.daif_CarRacing.VAE.reparameterize", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.daif_CarRacing.VAE.decode"], ["", "def", "forward", "(", "self", ",", "x", ",", "batch_size", "=", "1", ")", ":", "\n", "# Deconstruct and then reconstruct input x", "\n", "        ", "mu", ",", "logvar", "=", "self", ".", "encode", "(", "x", ")", "\n", "z", "=", "self", ".", "reparameterize", "(", "mu", ",", "logvar", ")", "\n", "recon", "=", "self", ".", "decode", "(", "z", ",", "batch_size", ")", "\n", "return", "recon", ",", "mu", ",", "logvar", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.daif_CarRacing.VAE.loss_function": [[112, 127], ["torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "logvar.exp", "logvar.exp", "mu.pow", "mu.pow"], "methods", ["None"], ["", "def", "loss_function", "(", "self", ",", "recon_x", ",", "x", ",", "mu", ",", "logvar", ",", "batch", "=", "True", ")", ":", "\n", "        ", "if", "batch", ":", "\n", "            ", "BCE", "=", "F", ".", "binary_cross_entropy", "(", "recon_x", ",", "x", ",", "reduction", "=", "'none'", ")", "\n", "BCE", "=", "torch", ".", "sum", "(", "BCE", ",", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "\n", "KLD", "=", "-", "0.5", "*", "torch", ".", "sum", "(", "1", "+", "logvar", "-", "mu", ".", "pow", "(", "2", ")", "-", "logvar", ".", "exp", "(", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "BCE", "=", "F", ".", "binary_cross_entropy", "(", "recon_x", ",", "x", ",", "reduction", "=", "'sum'", ")", "\n", "# see Appendix B from VAE paper:", "\n", "# Kingma and Welling. Auto-Encoding Variational Bayes. ICLR, 2014", "\n", "# https://arxiv.org/abs/1312.6114", "\n", "# 0.5 * sum(1 + log(sigma^2) - mu^2 - sigma^2)", "\n", "KLD", "=", "-", "0.5", "*", "torch", ".", "sum", "(", "1", "+", "logvar", "-", "mu", ".", "pow", "(", "2", ")", "-", "logvar", ".", "exp", "(", ")", ")", "\n", "\n", "", "return", "BCE", "+", "KLD", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.daif_CarRacing.Model.__init__": [[130, 145], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "daif_CarRacing.Model.to", "daif_CarRacing.Model.parameters"], "methods", ["home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.dq_cnn_CarRacing.Agent.__init__"], ["   ", "def", "__init__", "(", "self", ",", "n_inputs", ",", "n_outputs", ",", "n_hidden", "=", "64", ",", "lr", "=", "1e-3", ",", "softmax", "=", "False", ",", "device", "=", "'cpu'", ")", ":", "\n", "        ", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_inputs", "=", "n_inputs", "# Number of inputs", "\n", "self", ".", "n_hidden", "=", "n_hidden", "# Number of hidden units", "\n", "self", ".", "n_outputs", "=", "n_outputs", "# Number of outputs", "\n", "self", ".", "softmax", "=", "softmax", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "self", ".", "n_inputs", ",", "self", ".", "n_hidden", ")", "# Hidden layer", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "self", ".", "n_hidden", ",", "self", ".", "n_outputs", ")", "# Output layer", "\n", "\n", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "parameters", "(", ")", ",", "lr", ")", "# Adam optimizer", "\n", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.daif_CarRacing.Model.forward": [[146, 157], ["x.to.to.to", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "daif_CarRacing.Model.fc1", "torch.softmax().clamp", "torch.softmax().clamp", "torch.softmax().clamp", "torch.softmax().clamp", "daif_CarRacing.Model.fc2", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "daif_CarRacing.Model.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# Define the forward pass:", "\n", "        ", "x", "=", "x", ".", "to", "(", "self", ".", "device", ")", "\n", "h1", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "\n", "if", "self", ".", "softmax", ":", "# If true apply a softmax function to the output", "\n", "            ", "y", "=", "F", ".", "softmax", "(", "self", ".", "fc2", "(", "h1", ")", ",", "dim", "=", "-", "1", ")", ".", "clamp", "(", "min", "=", "1e-9", ",", "max", "=", "1", "-", "1e-9", ")", "# This is used to get a proper distribution over all actions with a sum of 1.", "\n", "", "else", ":", "\n", "            ", "y", "=", "self", ".", "fc2", "(", "h1", ")", "\n", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.daif_CarRacing.Agent.__init__": [[160, 284], ["car_racing.CarRacing", "int", "numpy.array", "len", "daif_CarRacing.VAE", "daif_CarRacing.Model", "daif_CarRacing.Model", "daif_CarRacing.Model", "daif_CarRacing.Model", "daif_CarRacing.Agent.target_net.load_state_dict", "replay_memory.ReplayMemory", "torchvision.Compose", "open", "daif_CarRacing.Agent.record.write", "daif_CarRacing.Agent.record.write", "numpy.prod", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "daif_CarRacing.Agent.value_net.state_dict", "daif_CarRacing.Agent.vae.load_state_dict", "daif_CarRacing.Agent.vae.eval", "print", "daif_CarRacing.Agent.vae.load_state_dict", "daif_CarRacing.Agent.vae.eval", "daif_CarRacing.Agent.transition_net.load_state_dict", "daif_CarRacing.Agent.transition_net.eval", "daif_CarRacing.Agent.policy_net.load_state_dict", "daif_CarRacing.Agent.policy_net.eval", "daif_CarRacing.Agent.value_net.load_state_dict", "daif_CarRacing.Agent.value_net.eval", "print", "replay_memory.ReplayMemory", "max", "numpy.zeros", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "range", "max", "torchvision.ToPILImage", "torchvision.Grayscale", "torchvision.Resize", "torchvision.ToTensor", "datetime.datetime.now", "range", "daif_CarRacing.Agent.network_load_path.format", "daif_CarRacing.Agent.network_load_path.format", "daif_CarRacing.Agent.network_load_path.format", "daif_CarRacing.Agent.network_load_path.format"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "device", "=", "'cuda'", ")", ":", "\n", "\n", "        ", "self", ".", "run_id", "=", "1", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "env", "=", "cr", ".", "CarRacing", "(", ")", "\n", "self", ".", "render_view", "=", "False", "# Set to True if you want to see what it is doing", "\n", "self", ".", "print_timer", "=", "10", "# Print average result of Agent every '...' episodes", "\n", "\n", "self", ".", "height", "=", "self", ".", "width", "=", "42", "# observation size (height and width)", "\n", "self", ".", "color", "=", "1", "# number of colors", "\n", "self", ".", "n_screens", "=", "8", "# number of observations stacked", "\n", "\n", "self", ".", "obs_shape", "=", "(", "self", ".", "height", ",", "self", ".", "width", ")", "\n", "self", ".", "obs_size", "=", "int", "(", "np", ".", "prod", "(", "self", ".", "obs_shape", ")", ")", "# The size of the observation", "\n", "self", ".", "linear", "=", "False", "# True if the input is a vector", "\n", "\n", "# Initialize last observations array", "\n", "self", ".", "obs_batch", "=", "np", ".", "array", "(", "[", "np", ".", "zeros", "(", "(", "self", ".", "height", ",", "self", ".", "width", ")", ",", "dtype", "=", "'float32'", ")", "for", "i", "in", "range", "(", "self", ".", "n_screens", ")", "]", ")", "\n", "\n", "# Discretization of continuous action space for CarRacing-v0", "\n", "# [0] = steering, [1] = accelerating, [2] = braking", "\n", "self", ".", "discrete_actions", "=", "{", "0", ":", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", "]", ")", ",", "# do nothing", "\n", "1", ":", "np", ".", "array", "(", "[", "-", "1", ",", "0", ",", "0", "]", ")", ",", "# steer sharp left", "\n", "2", ":", "np", ".", "array", "(", "[", "1", ",", "0", ",", "0", "]", ")", ",", "# steer sharp right", "\n", "3", ":", "np", ".", "array", "(", "[", "-", "0.5", ",", "0", ",", "0", "]", ")", ",", "# steer left", "\n", "4", ":", "np", ".", "array", "(", "[", "0.5", ",", "0", ",", "0", "]", ")", ",", "# steer right", "\n", "5", ":", "np", ".", "array", "(", "[", "0", ",", "1", ",", "0", "]", ")", ",", "# accelerate 100%", "\n", "6", ":", "np", ".", "array", "(", "[", "0", ",", "0.5", ",", "0", "]", ")", ",", "# accelerate 50%", "\n", "7", ":", "np", ".", "array", "(", "[", "0", ",", "0.25", ",", "0", "]", ")", ",", "# accelerate 25%", "\n", "8", ":", "np", ".", "array", "(", "[", "0", ",", "0", ",", "1", "]", ")", ",", "# brake 100%", "\n", "9", ":", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0.5", "]", ")", ",", "# brake 50%", "\n", "10", ":", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0.25", "]", ")", "}", "# brake 25%", "\n", "\n", "# The number of actions available to the agent", "\n", "self", ".", "n_actions", "=", "len", "(", "self", ".", "discrete_actions", ")", "\n", "\n", "\n", "self", ".", "freeze_cntr", "=", "0", "# Keeps track of when to (un)freeze the target network", "\n", "self", ".", "freeze_period", "=", "50", "# How long the network is frozen", "\n", "self", ".", "batch_size", "=", "250", "\n", "self", ".", "freeze_vae", "=", "True", "\n", "\n", "self", ".", "memory_capacity", "=", "100000", "# memory size", "\n", "self", ".", "VAE_memory_capacity", "=", "10000", "# VAE pre-train memory size", "\n", "self", ".", "n_episodes", "=", "1000", "# number of episodes", "\n", "self", ".", "n_play_episodes", "=", "150", "# number of episodes used for average reward test", "\n", "self", ".", "max_length_episode", "=", "1000", "# max number of steps a episode of the CarRacing environment lasts", "\n", "\n", "self", ".", "gamma", "=", "12", "# Precision parameter", "\n", "self", ".", "Beta", "=", "0.99", "# Discount factor", "\n", "self", ".", "alpha", "=", "18000", "# VAE loss scaler", "\n", "\n", "self", ".", "n_hidden_trans", "=", "512", "# number of hidden units transition network", "\n", "self", ".", "lr_trans", "=", "1e-3", "# learning rate transition network", "\n", "self", ".", "n_hidden_pol", "=", "512", "# number of hidden units policy network", "\n", "self", ".", "lr_pol", "=", "1e-4", "# learning rate policy network", "\n", "self", ".", "n_hidden_val", "=", "512", "# number of hidden units value network", "\n", "self", ".", "lr_val", "=", "1e-5", "# learning rate value network", "\n", "\n", "self", ".", "n_latent_states", "=", "128", "# size latent space", "\n", "self", ".", "lr_vae", "=", "5e-6", "# learning rate VAE", "\n", "self", ".", "vae_data", "=", "'pre_train_data/vae_data_10000.pt'", "\n", "self", ".", "vae_plot", "=", "False", "\n", "self", ".", "pre_train_vae", "=", "True", "# if True pre-trains the VAE", "\n", "\n", "self", ".", "load_pre_trained_vae", "=", "True", "\n", "self", ".", "pt_vae_load_path", "=", "\"networks/pre_trained_vae/vae_daif_CarRacing_{}_end.pth\"", ".", "format", "(", "self", ".", "n_latent_states", ")", "\n", "\n", "self", ".", "load_network", "=", "True", "\n", "self", ".", "network_load_path", "=", "\"networks/daif/daif_CarRacing_{}net_r{}.pth\"", ".", "format", "(", "\"{}\"", ",", "self", ".", "run_id", ")", "\n", "\n", "# Initialize the networks:", "\n", "self", ".", "vae", "=", "VAE", "(", "self", ".", "n_screens", ",", "self", ".", "n_latent_states", ",", "lr", "=", "self", ".", "lr_vae", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "transition_net", "=", "Model", "(", "self", ".", "n_latent_states", "*", "2", "+", "1", ",", "self", ".", "n_latent_states", ",", "self", ".", "n_hidden_trans", ",", "lr", "=", "self", ".", "lr_trans", ",", "device", "=", "self", ".", "device", ")", "# + 1, for 1 action", "\n", "self", ".", "policy_net", "=", "Model", "(", "self", ".", "n_latent_states", "*", "2", ",", "self", ".", "n_actions", ",", "self", ".", "n_hidden_pol", ",", "lr", "=", "self", ".", "lr_pol", ",", "softmax", "=", "True", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "value_net", "=", "Model", "(", "self", ".", "n_latent_states", "*", "2", ",", "self", ".", "n_actions", ",", "self", ".", "n_hidden_val", ",", "lr", "=", "self", ".", "lr_val", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "target_net", "=", "Model", "(", "self", ".", "n_latent_states", "*", "2", ",", "self", ".", "n_actions", ",", "self", ".", "n_hidden_val", ",", "lr", "=", "self", ".", "lr_val", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "target_net", ".", "load_state_dict", "(", "self", ".", "value_net", ".", "state_dict", "(", ")", ")", "\n", "\n", "if", "self", ".", "load_pre_trained_vae", ":", "# If true: load a pre-trained VAE", "\n", "            ", "self", ".", "vae", ".", "load_state_dict", "(", "torch", ".", "load", "(", "self", ".", "pt_vae_load_path", ",", "map_location", "=", "self", ".", "device", ")", ")", "\n", "self", ".", "vae", ".", "eval", "(", ")", "\n", "print", "(", "\"Succesfully loaded a pre-trained VAE\"", ")", "\n", "\n", "", "if", "self", ".", "load_network", ":", "# If true: load the networks given paths", "\n", "            ", "self", ".", "vae", ".", "load_state_dict", "(", "torch", ".", "load", "(", "self", ".", "network_load_path", ".", "format", "(", "\"vae\"", ")", ",", "map_location", "=", "self", ".", "device", ")", ")", "\n", "self", ".", "vae", ".", "eval", "(", ")", "\n", "self", ".", "transition_net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "self", ".", "network_load_path", ".", "format", "(", "\"trans\"", ")", ",", "map_location", "=", "self", ".", "device", ")", ")", "\n", "self", ".", "transition_net", ".", "eval", "(", ")", "\n", "self", ".", "policy_net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "self", ".", "network_load_path", ".", "format", "(", "\"pol\"", ")", ",", "map_location", "=", "self", ".", "device", ")", ")", "\n", "self", ".", "policy_net", ".", "eval", "(", ")", "\n", "self", ".", "value_net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "self", ".", "network_load_path", ".", "format", "(", "\"val\"", ")", ",", "map_location", "=", "self", ".", "device", ")", ")", "\n", "self", ".", "value_net", ".", "eval", "(", ")", "\n", "print", "(", "\"Succesfully loaded networks\"", ")", "\n", "\n", "\n", "# Initialize the replay memory", "\n", "", "self", ".", "memory", "=", "rm", ".", "ReplayMemory", "(", "self", ".", "memory_capacity", ",", "self", ".", "obs_shape", ",", "self", ".", "obs_size", ",", "self", ".", "linear", ",", "device", "=", "self", ".", "device", ")", "\n", "if", "self", ".", "pre_train_vae", ":", "\n", "            ", "self", ".", "VAE_memory", "=", "rm", ".", "ReplayMemory", "(", "self", ".", "VAE_memory_capacity", ",", "self", ".", "obs_shape", ",", "self", ".", "obs_size", ",", "self", ".", "linear", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "# When sampling from memory at index i, obs_indices indicates that we want observations with indices i-obs_indices, works the same for the others", "\n", "", "self", ".", "obs_indices", "=", "[", "(", "self", ".", "n_screens", "+", "1", ")", "-", "i", "for", "i", "in", "range", "(", "self", ".", "n_screens", "+", "2", ")", "]", "\n", "self", ".", "action_indices", "=", "[", "2", ",", "1", "]", "\n", "self", ".", "reward_indices", "=", "[", "1", "]", "\n", "self", ".", "done_indices", "=", "[", "0", "]", "\n", "self", ".", "max_n_indices", "=", "max", "(", "max", "(", "self", ".", "obs_indices", ",", "self", ".", "action_indices", ",", "self", ".", "reward_indices", ",", "self", ".", "done_indices", ")", ")", "+", "1", "\n", "\n", "# Used to pre-process the observations (screens)        ", "\n", "self", ".", "preprocess", "=", "T", ".", "Compose", "(", "[", "T", ".", "ToPILImage", "(", ")", ",", "\n", "T", ".", "Grayscale", "(", "num_output_channels", "=", "1", ")", ",", "\n", "T", ".", "Resize", "(", "(", "self", ".", "height", ",", "self", ".", "width", ")", ")", ",", "\n", "T", ".", "ToTensor", "(", ")", "]", ")", "\n", "\n", "self", ".", "save_results", "=", "True", "\n", "self", ".", "save_network", "=", "True", "\n", "self", ".", "results_path", "=", "\"results/daif/daif_CarRacing_results_r{}.npz\"", ".", "format", "(", "self", ".", "run_id", ")", "\n", "self", ".", "network_save_path", "=", "\"networks/daif/daif_CarRacing_{}net_r{}.pth\"", ".", "format", "(", "\"{}\"", ",", "self", ".", "run_id", ")", "\n", "\n", "\n", "self", ".", "log_path", "=", "\"logs/daif_CarRacing_log_r{}.txt\"", ".", "format", "(", "self", ".", "run_id", ")", "\n", "self", ".", "record", "=", "open", "(", "self", ".", "log_path", ",", "\"a\"", ")", "\n", "self", ".", "record", ".", "write", "(", "\"\\n\\n-----------------------------------------------------------------\\n\"", ")", "\n", "self", ".", "record", ".", "write", "(", "\"File opened at {}\\n\"", ".", "format", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.daif_CarRacing.Agent.get_screen": [[286, 302], ["daif_CarRacing.Agent.env.render", "daif_CarRacing.Agent.reshape", "daif_CarRacing.Agent.transpose", "daif_CarRacing.Agent.preprocess", "numpy.ascontiguousarray", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.flip().copy", "int", "int", "numpy.flip"], "methods", ["home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.render"], ["", "def", "get_screen", "(", "self", ",", "device", "=", "'cuda'", ")", ":", "\n", "# Get observation, reshape and but in right order.", "\n", "        ", "screen", "=", "self", ".", "env", ".", "render", "(", "mode", "=", "'state_pixels'", ")", "\n", "screen", "=", "screen", ".", "reshape", "(", "96", ",", "96", ",", "3", ")", "\n", "screen", "=", "screen", ".", "transpose", "(", "(", "2", ",", "1", ",", "0", ")", ")", "\n", "\n", "# stips of bottom part of the image which contains a black bar with the accumulated reward and control value bars, and makes sure the width is equal size as height", "\n", "screen", "=", "screen", "[", ":", ",", "6", ":", "90", ",", "int", "(", "96", "*", "0", ")", ":", "int", "(", "96", "*", "0.875", ")", "]", "\n", "\n", "# Convert to to float and normalize", "\n", "screen", "=", "np", ".", "ascontiguousarray", "(", "screen", ",", "dtype", "=", "np", ".", "float32", ")", "/", "255", "\n", "\n", "# Add resize", "\n", "screen", "=", "self", ".", "preprocess", "(", "torch", ".", "from_numpy", "(", "np", ".", "flip", "(", "screen", ",", "axis", "=", "0", ")", ".", "copy", "(", ")", ")", ")", "\n", "\n", "return", "screen", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.daif_CarRacing.Agent.get_obs_batch": [[304, 312], ["numpy.concatenate", "torch.from_numpy().unsqueeze().to", "torch.from_numpy().unsqueeze().to", "torch.from_numpy().unsqueeze().to", "torch.from_numpy().unsqueeze().to", "torch.from_numpy().unsqueeze().to", "torch.from_numpy().unsqueeze().to", "torch.from_numpy().unsqueeze().to", "torch.from_numpy().unsqueeze().to", "torch.from_numpy().unsqueeze().to", "torch.from_numpy().unsqueeze().to", "torch.from_numpy().unsqueeze().to", "torch.from_numpy().unsqueeze().to", "torch.from_numpy().unsqueeze().to", "torch.from_numpy().unsqueeze().to", "torch.from_numpy().unsqueeze().to", "torch.from_numpy().unsqueeze().to", "obs.numpy", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.flip().copy", "numpy.flip"], "methods", ["None"], ["def", "get_obs_batch", "(", "self", ",", "obs", ")", ":", "\n", "# add new observation to obs_batch, remove oldest.", "\n", "        ", "self", ".", "obs_batch", "=", "np", ".", "concatenate", "(", "(", "obs", ".", "numpy", "(", ")", ",", "self", ".", "obs_batch", "[", "0", ":", "self", ".", "n_screens", "-", "1", "]", ")", ",", "axis", "=", "0", ")", "\n", "\n", "# resize to (1, self.n_screens, 84, 84) and convert to torch", "\n", "obs_batch2", "=", "torch", ".", "from_numpy", "(", "np", ".", "flip", "(", "self", ".", "obs_batch", ",", "axis", "=", "0", ")", ".", "copy", "(", ")", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "return", "obs_batch2", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.daif_CarRacing.Agent.select_action": [[313, 328], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "random.randint", "daif_CarRacing.Agent.get_obs_batch", "daif_CarRacing.Agent.vae.encode", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "daif_CarRacing.Agent.policy_net", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial"], "methods", ["home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.dq_cnn_CarRacing.Agent.get_obs_batch", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.daif_CarRacing.VAE.encode"], ["", "def", "select_action", "(", "self", ",", "obs", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "action_index", "=", "0", "\n", "\n", "if", "self", ".", "memory", ".", "push_count", "<", "self", ".", "batch_size", "+", "self", ".", "n_screens", ":", "\n", "                ", "action_index", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "n_actions", "-", "1", ")", "\n", "", "else", ":", "\n", "# Derive a distribution over states state from the last n observations (screens):", "\n", "                ", "prev_n_obs", "=", "self", ".", "get_obs_batch", "(", "obs", ")", "\n", "state_mu", ",", "state_logvar", "=", "self", ".", "vae", ".", "encode", "(", "prev_n_obs", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "state_mu", ",", "torch", ".", "exp", "(", "state_logvar", ")", ")", ",", "dim", "=", "1", ")", "# does not work?", "\n", "policy", "=", "self", ".", "policy_net", "(", "x", ")", "\n", "action_index", "=", "torch", ".", "multinomial", "(", "policy", ",", "1", ")", ".", "item", "(", ")", "\n", "\n", "", "return", "action_index", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.daif_CarRacing.Agent.get_mini_batches": [[329, 369], ["daif_CarRacing.Agent.memory.sample", "daif_CarRacing.Agent.vae.encode", "daif_CarRacing.Agent.vae.encode", "daif_CarRacing.Agent.vae.encode", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "daif_CarRacing.Agent.vae.reparameterize", "all_actions_batch[].unsqueeze", "all_actions_batch[].unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "daif_CarRacing.Agent.transition_net", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.cat.detach", "torch.cat.detach", "torch.cat.detach", "torch.cat.detach", "all_actions_batch[].unsqueeze.float", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss"], "methods", ["home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.replay_memory.ReplayMemory.sample", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.daif_CarRacing.VAE.encode", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.daif_CarRacing.VAE.encode", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.daif_CarRacing.VAE.encode", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.daif_CarRacing.VAE.reparameterize"], ["", "", "def", "get_mini_batches", "(", "self", ")", ":", "\n", "# Retrieve transition data in mini batches", "\n", "        ", "all_obs_batch", ",", "all_actions_batch", ",", "reward_batch_t1", ",", "done_batch_t2", "=", "self", ".", "memory", ".", "sample", "(", "\n", "self", ".", "obs_indices", ",", "self", ".", "action_indices", ",", "self", ".", "reward_indices", ",", "\n", "self", ".", "done_indices", ",", "self", ".", "max_n_indices", ",", "self", ".", "batch_size", ")", "\n", "\n", "# Retrieve a batch of observations for 3 consecutive points in time", "\n", "obs_batch_t0", "=", "all_obs_batch", "[", ":", ",", "0", ":", "self", ".", "n_screens", ",", ":", ",", ":", "]", "\n", "obs_batch_t1", "=", "all_obs_batch", "[", ":", ",", "1", ":", "self", ".", "n_screens", "+", "1", ",", ":", ",", ":", "]", "\n", "obs_batch_t2", "=", "all_obs_batch", "[", ":", ",", "2", ":", "self", ".", "n_screens", "+", "2", ",", ":", ",", ":", "]", "\n", "\n", "# Retrieve a batch of distributions over states for 3 consecutive points in time", "\n", "state_mu_batch_t0", ",", "state_logvar_batch_t0", "=", "self", ".", "vae", ".", "encode", "(", "obs_batch_t0", ")", "\n", "state_mu_batch_t1", ",", "state_logvar_batch_t1", "=", "self", ".", "vae", ".", "encode", "(", "obs_batch_t1", ")", "\n", "state_mu_batch_t2", ",", "state_logvar_batch_t2", "=", "self", ".", "vae", ".", "encode", "(", "obs_batch_t2", ")", "\n", "\n", "# Combine the sufficient statistics (mean and variance) into a single vector", "\n", "state_batch_t0", "=", "torch", ".", "cat", "(", "(", "state_mu_batch_t0", ",", "torch", ".", "exp", "(", "state_logvar_batch_t0", ")", ")", ",", "dim", "=", "1", ")", "\n", "state_batch_t1", "=", "torch", ".", "cat", "(", "(", "state_mu_batch_t1", ",", "torch", ".", "exp", "(", "state_logvar_batch_t1", ")", ")", ",", "dim", "=", "1", ")", "\n", "state_batch_t2", "=", "torch", ".", "cat", "(", "(", "state_mu_batch_t2", ",", "torch", ".", "exp", "(", "state_logvar_batch_t2", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# Reparameterize the distribution over states for time t1", "\n", "z_batch_t1", "=", "self", ".", "vae", ".", "reparameterize", "(", "state_mu_batch_t1", ",", "state_logvar_batch_t1", ")", "\n", "\n", "# Retrieve the agent's action history for time t0 and time t1", "\n", "action_batch_t0", "=", "all_actions_batch", "[", ":", ",", "0", "]", ".", "unsqueeze", "(", "1", ")", "\n", "action_batch_t1", "=", "all_actions_batch", "[", ":", ",", "1", "]", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "# At time t0 predict the state at time t1:", "\n", "X", "=", "torch", ".", "cat", "(", "(", "state_batch_t0", ".", "detach", "(", ")", ",", "action_batch_t0", ".", "float", "(", ")", ")", ",", "dim", "=", "1", ")", "\n", "pred_batch_t0t1", "=", "self", ".", "transition_net", "(", "X", ")", "\n", "\n", "# Determine the prediction error wrt time t0-t1:", "\n", "pred_error_batch_t0t1", "=", "torch", ".", "mean", "(", "F", ".", "mse_loss", "(", "\n", "pred_batch_t0t1", ",", "state_mu_batch_t1", ",", "reduction", "=", "'none'", ")", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "return", "(", "state_batch_t1", ",", "state_batch_t2", ",", "action_batch_t1", ",", "\n", "reward_batch_t1", ",", "done_batch_t2", ",", "pred_error_batch_t0t1", ",", "\n", "obs_batch_t1", ",", "state_mu_batch_t1", ",", "\n", "state_logvar_batch_t1", ",", "z_batch_t1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.daif_CarRacing.Agent.compute_value_net_loss": [[370, 395], ["daif_CarRacing.Agent.value_net().gather", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "daif_CarRacing.Agent.policy_net", "daif_CarRacing.Agent.target_net", "daif_CarRacing.Agent.value_net"], "methods", ["None"], ["", "def", "compute_value_net_loss", "(", "self", ",", "state_batch_t1", ",", "state_batch_t2", ",", "\n", "action_batch_t1", ",", "reward_batch_t1", ",", "\n", "done_batch_t2", ",", "pred_error_batch_t0t1", ")", ":", "\n", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Determine the action distribution for time t2:", "\n", "            ", "policy_batch_t2", "=", "self", ".", "policy_net", "(", "state_batch_t2", ")", "\n", "\n", "# Determine the target EFEs for time t2:", "\n", "target_EFEs_batch_t2", "=", "self", ".", "target_net", "(", "state_batch_t2", ")", "\n", "\n", "# Weigh the target EFEs according to the action distribution:", "\n", "weighted_targets", "=", "(", "(", "1", "-", "done_batch_t2", ")", "*", "policy_batch_t2", "*", "\n", "target_EFEs_batch_t2", ")", ".", "sum", "(", "-", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "# Determine the batch of bootstrapped estimates of the EFEs:", "\n", "EFE_estimate_batch", "=", "-", "reward_batch_t1", "+", "pred_error_batch_t0t1", "+", "self", ".", "Beta", "*", "weighted_targets", "\n", "\n", "# Determine the EFE at time t1 according to the value network:", "\n", "", "EFE_batch_t1", "=", "self", ".", "value_net", "(", "state_batch_t1", ")", ".", "gather", "(", "1", ",", "action_batch_t1", ")", "\n", "\n", "# Determine the MSE loss between the EFE estimates and the value network output:", "\n", "value_net_loss", "=", "F", ".", "mse_loss", "(", "EFE_estimate_batch", ",", "EFE_batch_t1", ")", "\n", "\n", "return", "value_net_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.daif_CarRacing.Agent.compute_VFE": [[396, 417], ["daif_CarRacing.Agent.policy_net", "daif_CarRacing.Agent.value_net", "torch.softmax().clamp", "torch.softmax().clamp", "torch.softmax().clamp", "torch.softmax().clamp", "torch.softmax().clamp", "torch.softmax().clamp", "torch.softmax().clamp", "torch.softmax().clamp", "torch.softmax().clamp", "torch.softmax().clamp", "torch.softmax().clamp", "torch.softmax().clamp", "torch.softmax().clamp", "torch.softmax().clamp", "torch.softmax().clamp", "torch.softmax().clamp", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["None"], ["", "def", "compute_VFE", "(", "self", ",", "vae_loss", ",", "state_batch_t1", ",", "pred_error_batch_t0t1", ")", ":", "\n", "# Determine the action distribution for time t1:", "\n", "        ", "policy_batch_t1", "=", "self", ".", "policy_net", "(", "state_batch_t1", ")", "\n", "\n", "# Determine the EFEs for time t1:", "\n", "EFEs_batch_t1", "=", "self", ".", "value_net", "(", "state_batch_t1", ")", "\n", "\n", "# Take a gamma-weighted Boltzmann distribution over the EFEs:", "\n", "boltzmann_EFEs_batch_t1", "=", "torch", ".", "softmax", "(", "-", "self", ".", "gamma", "*", "EFEs_batch_t1", ",", "dim", "=", "1", ")", ".", "clamp", "(", "min", "=", "1e-9", ",", "max", "=", "1", "-", "1e-9", ")", "\n", "\n", "# Weigh them according to the action distribution:", "\n", "energy_term_batch", "=", "-", "(", "policy_batch_t1", "*", "torch", ".", "log", "(", "boltzmann_EFEs_batch_t1", ")", ")", ".", "sum", "(", "-", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "# Determine the entropy of the action distribution", "\n", "entropy_batch", "=", "-", "(", "policy_batch_t1", "*", "torch", ".", "log", "(", "policy_batch_t1", ")", ")", ".", "sum", "(", "-", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "# Determine the VFE, then take the mean over all batch samples:", "\n", "VFE_batch", "=", "vae_loss", "+", "pred_error_batch_t0t1", "+", "(", "energy_term_batch", "-", "entropy_batch", ")", "\n", "VFE", "=", "torch", ".", "mean", "(", "VFE_batch", ")", "\n", "\n", "return", "VFE", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.daif_CarRacing.Agent.learn": [[418, 466], ["daif_CarRacing.Agent.get_mini_batches", "daif_CarRacing.Agent.vae.decode", "daif_CarRacing.Agent.compute_value_net_loss", "daif_CarRacing.Agent.compute_VFE", "daif_CarRacing.Agent.policy_net.optimizer.zero_grad", "daif_CarRacing.Agent.transition_net.optimizer.zero_grad", "daif_CarRacing.Agent.value_net.optimizer.zero_grad", "daif_CarRacing.Agent.backward", "daif_CarRacing.Agent.backward", "daif_CarRacing.Agent.policy_net.optimizer.step", "daif_CarRacing.Agent.transition_net.optimizer.step", "daif_CarRacing.Agent.value_net.optimizer.step", "daif_CarRacing.Agent.target_net.load_state_dict", "daif_CarRacing.Agent.vae.loss_function", "state_batch_t1.detach", "daif_CarRacing.Agent.vae.optimizer.zero_grad", "daif_CarRacing.Agent.vae.optimizer.step", "daif_CarRacing.Agent.value_net.state_dict"], "methods", ["home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.daif_CarRacing.Agent.get_mini_batches", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.daif_CarRacing.VAE.decode", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.daif_CarRacing.Agent.compute_value_net_loss", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.daif_CarRacing.Agent.compute_VFE", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.step", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.step", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.step", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.daif_CarRacing.VAE.loss_function", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.step"], ["", "def", "learn", "(", "self", ",", "ith_episode", ")", ":", "\n", "\n", "# If there are not enough transitions stored in memory, return", "\n", "        ", "if", "self", ".", "memory", ".", "push_count", "-", "self", ".", "max_n_indices", "*", "2", "<", "self", ".", "batch_size", ":", "\n", "            ", "return", "\n", "\n", "# After every freeze_period time steps, update the target network", "\n", "", "if", "self", ".", "freeze_cntr", "%", "self", ".", "freeze_period", "==", "0", ":", "\n", "            ", "self", ".", "target_net", ".", "load_state_dict", "(", "self", ".", "value_net", ".", "state_dict", "(", ")", ")", "\n", "", "self", ".", "freeze_cntr", "+=", "1", "\n", "\n", "# Retrieve mini-batches of data from memory", "\n", "(", "state_batch_t1", ",", "state_batch_t2", ",", "action_batch_t1", ",", "\n", "reward_batch_t1", ",", "done_batch_t2", ",", "pred_error_batch_t0t1", ",", "\n", "obs_batch_t1", ",", "state_mu_batch_t1", ",", "\n", "state_logvar_batch_t1", ",", "z_batch_t1", ")", "=", "self", ".", "get_mini_batches", "(", ")", "\n", "\n", "# Determine the reconstruction loss for time t1        ", "\n", "recon_batch", "=", "self", ".", "vae", ".", "decode", "(", "z_batch_t1", ",", "self", ".", "batch_size", ")", "\n", "\n", "# Determine the VAE loss for time t1", "\n", "vae_loss", "=", "self", ".", "vae", ".", "loss_function", "(", "recon_batch", ",", "obs_batch_t1", ",", "state_mu_batch_t1", ",", "state_logvar_batch_t1", ",", "batch", "=", "True", ")", "/", "self", ".", "alpha", "\n", "\n", "# Compute the value network loss:", "\n", "value_net_loss", "=", "self", ".", "compute_value_net_loss", "(", "state_batch_t1", ",", "state_batch_t2", ",", "\n", "action_batch_t1", ",", "reward_batch_t1", ",", "\n", "done_batch_t2", ",", "pred_error_batch_t0t1", ")", "\n", "\n", "# Compute the variational free energy:", "\n", "VFE", "=", "self", ".", "compute_VFE", "(", "vae_loss", ",", "state_batch_t1", ".", "detach", "(", ")", ",", "pred_error_batch_t0t1", ")", "\n", "\n", "# Reset the gradients:", "\n", "if", "not", "self", ".", "freeze_vae", ":", "\n", "            ", "self", ".", "vae", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "", "self", ".", "policy_net", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "self", ".", "transition_net", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "self", ".", "value_net", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# Compute the gradients:", "\n", "VFE", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "value_net_loss", ".", "backward", "(", ")", "\n", "\n", "# Perform gradient descent:", "\n", "if", "not", "self", ".", "freeze_vae", ":", "\n", "            ", "self", ".", "vae", ".", "optimizer", ".", "step", "(", ")", "\n", "", "self", ".", "policy_net", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "transition_net", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "value_net", ".", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.daif_CarRacing.Agent.play": [[468, 509], ["range", "daif_CarRacing.Agent.env.close", "numpy.savez", "daif_CarRacing.Agent.env.reset", "daif_CarRacing.Agent.get_screen", "rewards.append", "print", "numpy.array", "daif_CarRacing.Agent.select_action", "daif_CarRacing.Agent.discrete_actions.get", "daif_CarRacing.Agent.env.step", "daif_CarRacing.Agent.get_screen", "int", "daif_CarRacing.Agent.env.render"], "methods", ["home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.close", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.reset", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.daif_CarRacing.Agent.get_screen", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.dq_cnn_CarRacing.Agent.select_action", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.step", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.daif_CarRacing.Agent.get_screen", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.render"], ["def", "play", "(", "self", ")", ":", "\n", "\n", "        ", "rewards", "=", "[", "]", "\n", "\n", "self", ".", "memory", ".", "push_count", "=", "self", ".", "memory_capacity", "-", "1", "\n", "\n", "for", "ith_episode", "in", "range", "(", "self", ".", "n_play_episodes", ")", ":", "\n", "\n", "            ", "total_reward", "=", "0", "\n", "nr_steps", "=", "0", "\n", "obs", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "obs", "=", "self", ".", "get_screen", "(", "self", ".", "device", ")", "\n", "done", "=", "False", "\n", "\n", "while", "not", "done", "and", "nr_steps", "<=", "self", ".", "max_length_episode", ":", "\n", "\n", "# get action", "\n", "                ", "action", "=", "self", ".", "select_action", "(", "obs", ")", "\n", "\n", "# get actual action from discrete actions dictionary", "\n", "action_todo", "=", "self", ".", "discrete_actions", ".", "get", "(", "int", "(", "action", ")", ")", "\n", "\n", "# take step", "\n", "obs", ",", "reward", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "[", "action_todo", "[", "0", "]", ",", "action_todo", "[", "1", "]", ",", "action_todo", "[", "2", "]", "]", ")", "\n", "nr_steps", "=", "nr_steps", "+", "1", "\n", "obs", "=", "self", ".", "get_screen", "(", "self", ".", "device", ")", "\n", "\n", "# render in visible window if True", "\n", "if", "self", ".", "render_view", ":", "\n", "                    ", "self", ".", "env", ".", "render", "(", "'human'", ")", "\n", "\n", "# add reward to total", "\n", "", "total_reward", "+=", "reward", "\n", "\n", "", "rewards", ".", "append", "(", "total_reward", ")", "\n", "print", "(", "\"Reward for this episode:\"", ",", "total_reward", ")", "\n", "total_reward", "=", "0", "\n", "\n", "", "self", ".", "env", ".", "close", "(", ")", "\n", "\n", "np", ".", "savez", "(", "\"rewards/daif_CarRacing_rewards\"", ",", "np", ".", "array", "(", "rewards", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.daif_CarRacing.Agent.train_vae": [[511, 559], ["range", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "len", "daif_CarRacing.Agent.VAE_memory.sample", "obs_batch.view.view.view", "daif_CarRacing.Agent.vae.forward", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "daif_CarRacing.Agent.vae.optimizer.zero_grad", "torch.mean.backward", "torch.mean.backward", "torch.mean.backward", "torch.mean.backward", "daif_CarRacing.Agent.vae.optimizer.step", "losses.append", "daif_CarRacing.Agent.vae.state_dict", "range", "print", "dc.DataCollector.DataCollector", "data_collector.DataCollector.generate_data", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "len", "daif_CarRacing.Agent.vae.loss_function", "print", "matplotlib.plot", "matplotlib.show", "matplotlib.plot", "matplotlib.show", "range", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "matplotlib.imsave", "matplotlib.imsave", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "obs_batch[].detach().cpu().squeeze().permute().numpy", "recon[].detach().cpu().squeeze().permute().numpy", "torch.mean.item", "torch.mean.item", "torch.mean.item", "torch.mean.item", "obs_batch[].detach().cpu().squeeze().permute", "recon[].detach().cpu().squeeze().permute", "obs_batch[].detach().cpu().squeeze", "recon[].detach().cpu().squeeze", "obs_batch[].detach().cpu", "recon[].detach().cpu", "obs_batch[].detach", "recon[].detach"], "methods", ["home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.replay_memory.ReplayMemory.sample", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.dq_cnn_CarRacing.DQN.forward", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.step", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.data_collector.DataCollector.generate_data", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.daif_CarRacing.VAE.loss_function"], ["", "def", "train_vae", "(", "self", ")", ":", "\n", "        ", "\"\"\" Train the VAE using data collected via user play. \"\"\"", "\n", "vae_batch_size", "=", "256", "\n", "vae_obs_indices", "=", "[", "self", ".", "n_screens", "-", "i", "for", "i", "in", "range", "(", "self", ".", "n_screens", ")", "]", "\n", "\n", "self", ".", "VAE_memory", ".", "push_count", "=", "vae_batch_size", "+", "self", ".", "n_screens", "*", "2", "\n", "\n", "try", ":", "\n", "# Load the pre-collected data into device", "\n", "            ", "self", ".", "VAE_memory", ".", "obs_mem", "=", "torch", ".", "load", "(", "self", ".", "vae_data", ",", "map_location", "=", "torch", ".", "device", "(", "self", ".", "device", ")", ")", "\n", "", "except", ":", "\n", "# Generate data to train VAE on ", "\n", "            ", "print", "(", "\"No data found to train the vae on.\"", ")", "\n", "data_collector", "=", "dc", ".", "DataCollector", "(", "self", ".", "VAE_memory_capacity", ",", "self", ".", "n_screens", ",", "self", ".", "height", ",", "self", ".", "width", ",", "device", "=", "self", ".", "device", ")", "\n", "data_collector", ".", "generate_data", "(", ")", "\n", "self", ".", "VAE_memory", ".", "obs_mem", "=", "torch", ".", "load", "(", "data_collector", ".", "obs_data_path", ",", "map_location", "=", "torch", ".", "device", "(", "self", ".", "device", ")", ")", "\n", "\n", "", "losses", "=", "[", "]", "\n", "\n", "for", "data_point", "in", "range", "(", "0", ",", "len", "(", "self", ".", "VAE_memory", ".", "obs_mem", ")", ")", ":", "\n", "            ", "self", ".", "VAE_memory", ".", "push_count", "=", "self", ".", "VAE_memory", ".", "push_count", "+", "1", "\n", "\n", "obs_batch", ",", "_", ",", "_", ",", "_", "=", "self", ".", "VAE_memory", ".", "sample", "(", "vae_obs_indices", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "len", "(", "vae_obs_indices", ")", ",", "vae_batch_size", ")", "\n", "obs_batch", "=", "obs_batch", ".", "view", "(", "vae_batch_size", ",", "self", ".", "n_screens", ",", "self", ".", "height", ",", "self", ".", "width", ")", "\n", "\n", "recon", ",", "mu", ",", "logvar", "=", "self", ".", "vae", ".", "forward", "(", "obs_batch", ",", "vae_batch_size", ")", "\n", "loss", "=", "torch", ".", "mean", "(", "self", ".", "vae", ".", "loss_function", "(", "recon", ",", "obs_batch", ",", "mu", ",", "logvar", ")", ")", "\n", "\n", "self", ".", "vae", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "vae", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "losses", ".", "append", "(", "loss", ")", "\n", "if", "data_point", "%", "50", "==", "0", ":", "\n", "                ", "print", "(", "\"obs: %2f vae loss=%5.2f\"", "%", "(", "data_point", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "\n", "", "if", "data_point", "%", "1000", "==", "0", "and", "data_point", ">", "0", "and", "self", ".", "vae_plot", ":", "\n", "                ", "plt", ".", "plot", "(", "losses", ")", "\n", "plt", ".", "show", "(", ")", "\n", "plt", ".", "plot", "(", "losses", "[", "-", "1000", ":", "]", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "n_screens", ")", ":", "\n", "                    ", "plt", ".", "imsave", "(", "\"vae_images/obs/vae_obs_CarRacing_ep_{}_{}.png\"", ".", "format", "(", "data_point", ",", "i", ")", ",", "obs_batch", "[", "0", ",", "i", ",", ":", ",", ":", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "squeeze", "(", "0", ")", ".", "permute", "(", "1", ",", "0", ")", ".", "numpy", "(", ")", ",", "cmap", "=", "'gray'", ")", "\n", "plt", ".", "imsave", "(", "\"vae_images/recon/vae_recon_CarRacin_ep_{}_{}.png\"", ".", "format", "(", "data_point", ",", "i", ")", ",", "recon", "[", "0", ",", "i", ",", ":", ",", ":", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "squeeze", "(", "0", ")", ".", "permute", "(", "1", ",", "0", ")", ".", "numpy", "(", ")", ",", "cmap", "=", "'gray'", ")", "\n", "\n", "", "", "", "self", ".", "VAE_memory", ".", "push_count", "=", "0", "\n", "torch", ".", "save", "(", "self", ".", "vae", ".", "state_dict", "(", ")", ",", "\"networks/pre_trained_vae/vae_daif_CarRacing_{}_test_end.pth\"", ".", "format", "(", "self", ".", "n_latent_states", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.daif_CarRacing.Agent.train": [[561, 647], ["print", "daif_CarRacing.Agent.record.write", "range", "daif_CarRacing.Agent.env.close", "print", "daif_CarRacing.Agent.record.write", "daif_CarRacing.Agent.record.close", "print", "daif_CarRacing.Agent.record.write", "daif_CarRacing.Agent.train_vae", "datetime.datetime.now", "daif_CarRacing.Agent.env.reset", "daif_CarRacing.Agent.get_screen", "daif_CarRacing.Agent.env.render", "results.append", "numpy.savez", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "datetime.datetime.now", "datetime.datetime.now", "daif_CarRacing.Agent.select_action", "daif_CarRacing.Agent.memory.push", "daif_CarRacing.Agent.discrete_actions.get", "daif_CarRacing.Agent.env.step", "daif_CarRacing.Agent.get_screen", "daif_CarRacing.Agent.learn", "numpy.mean", "numpy.mean", "print", "daif_CarRacing.Agent.record.write", "daif_CarRacing.Agent.record.close", "open", "numpy.array", "daif_CarRacing.Agent.transition_net.state_dict", "daif_CarRacing.Agent.network_save_path.format", "daif_CarRacing.Agent.policy_net.state_dict", "daif_CarRacing.Agent.network_save_path.format", "daif_CarRacing.Agent.value_net.state_dict", "daif_CarRacing.Agent.network_save_path.format", "daif_CarRacing.Agent.VAE.state_dict", "daif_CarRacing.Agent.network_save_path.format", "int", "daif_CarRacing.Agent.env.render", "daif_CarRacing.Agent.memory.push"], "methods", ["home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.close", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.close", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.daif_CarRacing.Agent.train_vae", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.reset", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.daif_CarRacing.Agent.get_screen", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.render", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.dq_cnn_CarRacing.Agent.select_action", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.replay_memory.ReplayMemory.push", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.step", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.daif_CarRacing.Agent.get_screen", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.dq_cnn_CarRacing.Agent.learn", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.close", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.render", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.replay_memory.ReplayMemory.push"], ["", "def", "train", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "pre_train_vae", "and", "not", "self", ".", "load_pre_trained_vae", ":", "# If True: pre-train the VAE", "\n", "            ", "msg", "=", "\"Environment is: {}\\nPre-training vae. Starting at {}\"", ".", "format", "(", "\"CarRacing-v0\"", ",", "datetime", ".", "datetime", ".", "now", "(", ")", ")", "\n", "print", "(", "msg", ")", "\n", "self", ".", "record", ".", "write", "(", "msg", "+", "\"\\n\"", ")", "\n", "self", ".", "train_vae", "(", ")", "\n", "\n", "\n", "", "msg", "=", "\"Environment is: {}\\nTraining started at {}\"", ".", "format", "(", "\"CarRacing-v0\"", ",", "datetime", ".", "datetime", ".", "now", "(", ")", ")", "\n", "print", "(", "msg", ")", "\n", "self", ".", "record", ".", "write", "(", "msg", "+", "\"\\n\"", ")", "\n", "\n", "results", "=", "[", "]", "\n", "for", "ith_episode", "in", "range", "(", "self", ".", "n_episodes", ")", ":", "\n", "\n", "            ", "total_reward", "=", "0", "\n", "self", ".", "env", ".", "reset", "(", ")", "\n", "obs", "=", "self", ".", "get_screen", "(", "self", ".", "device", ")", "\n", "done", "=", "False", "\n", "reward", "=", "0", "\n", "nr_steps", "=", "0", "\n", "\n", "self", ".", "prev_screen", "=", "self", ".", "env", ".", "render", "(", "'rgb_array'", ")", "\n", "\n", "while", "not", "done", "and", "nr_steps", "<=", "self", ".", "max_length_episode", ":", "\n", "\n", "# get action", "\n", "                ", "action", "=", "self", ".", "select_action", "(", "obs", ")", "\n", "\n", "# push to memory", "\n", "self", ".", "memory", ".", "push", "(", "obs", ",", "action", ",", "reward", ",", "done", ")", "\n", "\n", "# get actual action input", "\n", "action_real", "=", "self", ".", "discrete_actions", ".", "get", "(", "int", "(", "action", ")", ")", "\n", "\n", "# take step", "\n", "obs", ",", "reward", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "[", "action_real", "[", "0", "]", ",", "action_real", "[", "1", "]", ",", "action_real", "[", "2", "]", "]", ")", "\n", "obs", "=", "self", ".", "get_screen", "(", "self", ".", "device", ")", "\n", "nr_steps", "=", "nr_steps", "+", "1", "\n", "\n", "# render in visible window if True", "\n", "if", "self", ".", "render_view", ":", "\n", "                    ", "self", ".", "env", ".", "render", "(", "'human'", ")", "\n", "\n", "# add reward to total", "\n", "", "total_reward", "+=", "reward", "\n", "\n", "# have the networks learn", "\n", "self", ".", "learn", "(", "ith_episode", ")", "\n", "\n", "if", "done", "or", "nr_steps", "==", "self", ".", "max_length_episode", ":", "\n", "                    ", "self", ".", "memory", ".", "push", "(", "obs", ",", "-", "99", ",", "-", "99", ",", "True", ")", "\n", "\n", "", "", "results", ".", "append", "(", "total_reward", ")", "\n", "\n", "# Print and keep a (.txt) record of stuff", "\n", "if", "ith_episode", ">", "0", "and", "ith_episode", "%", "self", ".", "print_timer", "==", "0", ":", "\n", "                ", "avg_reward", "=", "np", ".", "mean", "(", "results", ")", "\n", "last_x", "=", "np", ".", "mean", "(", "results", "[", "-", "self", ".", "print_timer", ":", "]", ")", "\n", "msg", "=", "\"Episodes: {:4d}, avg score: {:3.2f}, over last {:d}: {:3.2f}\"", ".", "format", "(", "ith_episode", ",", "avg_reward", ",", "self", ".", "print_timer", ",", "last_x", ")", "\n", "print", "(", "msg", ")", "\n", "\n", "# write to log", "\n", "self", ".", "record", ".", "write", "(", "msg", "+", "\"\\n\"", ")", "\n", "\n", "# save log", "\n", "self", ".", "record", ".", "close", "(", ")", "\n", "self", ".", "record", "=", "open", "(", "self", ".", "log_path", ",", "\"a\"", ")", "\n", "\n", "", "", "self", ".", "env", ".", "close", "(", ")", "\n", "\n", "# If enabled, save the results and the network (state_dict)", "\n", "if", "self", ".", "save_results", ":", "\n", "            ", "np", ".", "savez", "(", "self", ".", "results_path", ",", "np", ".", "array", "(", "results", ")", ")", "\n", "", "if", "self", ".", "save_network", ":", "\n", "            ", "torch", ".", "save", "(", "self", ".", "transition_net", ".", "state_dict", "(", ")", ",", "self", ".", "network_save_path", ".", "format", "(", "\"trans\"", ")", ")", "\n", "torch", ".", "save", "(", "self", ".", "policy_net", ".", "state_dict", "(", ")", ",", "self", ".", "network_save_path", ".", "format", "(", "\"pol\"", ")", ")", "\n", "torch", ".", "save", "(", "self", ".", "value_net", ".", "state_dict", "(", ")", ",", "self", ".", "network_save_path", ".", "format", "(", "\"val\"", ")", ")", "\n", "torch", ".", "save", "(", "self", ".", "VAE", ".", "state_dict", "(", ")", ",", "self", ".", "network_save_path", ".", "format", "(", "\"VAE\"", ")", ")", "\n", "\n", "# Print and keep a (.txt) record of stuff", "\n", "", "msg", "=", "\"Training finished at {}\"", ".", "format", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", "\n", "print", "(", "msg", ")", "\n", "self", ".", "record", ".", "write", "(", "msg", ")", "\n", "self", ".", "record", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.data_collector.DataCollector.__init__": [[11, 41], ["torch.empty", "torchvision.Compose", "torchvision.ToPILImage", "torchvision.Grayscale", "torchvision.Resize", "torchvision.ToTensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "max_nr_observations", ",", "n_screens", ",", "height", ",", "width", ",", "device", "=", "'cpu'", ")", ":", "\n", "\n", "        ", "self", ".", "device", "=", "device", "\n", "\n", "# The maximum amount of observations", "\n", "self", ".", "max_nr_observations", "=", "max_nr_observations", "\n", "\n", "# The maximum number of items to be stored in memory", "\n", "self", ".", "capacity", "=", "self", ".", "max_nr_observations", "\n", "\n", "# Observation format", "\n", "self", ".", "n_screens", "=", "n_screens", "\n", "self", ".", "height", "=", "height", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "obs_shape", "=", "(", "self", ".", "height", ",", "self", ".", "width", ")", "\n", "\n", "# Data paths", "\n", "self", ".", "obs_data_path", "=", "'pre_train_data/vae_data_{}.pt'", ".", "format", "(", "self", ".", "max_nr_observations", ")", "\n", "\n", "# Initialize (empty) memory tensors", "\n", "self", ".", "obs_mem", "=", "torch", ".", "empty", "(", "[", "self", ".", "capacity", "]", "+", "[", "dim", "for", "dim", "in", "self", ".", "obs_shape", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "# The number of times new data has been pushed to memory", "\n", "self", ".", "push_count", "=", "0", "\n", "\n", "# Preprocessing", "\n", "self", ".", "preprocess_bw", "=", "T", ".", "Compose", "(", "[", "T", ".", "ToPILImage", "(", ")", ",", "\n", "T", ".", "Grayscale", "(", "num_output_channels", "=", "1", ")", ",", "\n", "T", ".", "Resize", "(", "(", "self", ".", "height", ",", "self", ".", "width", ")", ")", ",", "\n", "T", ".", "ToTensor", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.data_collector.DataCollector.convert_obs_bw": [[44, 60], ["data_collector.DataCollector.reshape", "data_collector.DataCollector.transpose", "torch.from_numpy", "data_collector.DataCollector.preprocess_bw", "numpy.ascontiguousarray", "numpy.flip().copy", "int", "int", "numpy.flip"], "methods", ["None"], ["def", "convert_obs_bw", "(", "self", ",", "obs", ")", ":", "\n", "# shape observation to original size 96x96 with 3 rgb channels", "\n", "        ", "obs", "=", "obs", ".", "reshape", "(", "96", ",", "96", ",", "3", ")", "\n", "obs", "=", "obs", ".", "transpose", "(", "(", "2", ",", "1", ",", "0", ")", ")", "\n", "\n", "# stips of bottom part of the image which contains a black bar with the accumulated reward and control value bars, and makes sure the width is equal size as height", "\n", "obs", "=", "obs", "[", ":", ",", "6", ":", "90", ",", "int", "(", "96", "*", "0", ")", ":", "int", "(", "96", "*", "0.875", ")", "]", "\n", "\n", "# Convert to to float and normalize", "\n", "obs", "=", "np", ".", "ascontiguousarray", "(", "obs", ",", "dtype", "=", "np", ".", "float32", ")", "/", "255", "\n", "\n", "obs", "=", "torch", ".", "from_numpy", "(", "np", ".", "flip", "(", "obs", ",", "axis", "=", "0", ")", ".", "copy", "(", ")", ")", "\n", "\n", "obs", "=", "self", ".", "preprocess_bw", "(", "obs", ")", "\n", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.data_collector.DataCollector.add_to_mem": [[62, 68], ["data_collector.DataCollector.position"], "methods", ["home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.data_collector.DataCollector.position"], ["", "def", "add_to_mem", "(", "self", ",", "obs", ")", ":", "\n", "# add to tensor", "\n", "        ", "self", ".", "obs_mem", "[", "self", ".", "position", "(", ")", "]", "=", "obs", "\n", "\n", "# increment push count", "\n", "self", ".", "push_count", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.data_collector.DataCollector.position": [[70, 73], ["None"], "methods", ["None"], ["", "def", "position", "(", "self", ")", ":", "\n", "# Returns the next position (index) to which data is pushed", "\n", "        ", "return", "self", ".", "push_count", "%", "self", ".", "capacity", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.data_collector.DataCollector.saveTorch": [[75, 78], ["torch.save"], "methods", ["None"], ["", "def", "saveTorch", "(", "self", ")", ":", "\n", "# Save the torch with the observations", "\n", "        ", "torch", ".", "save", "(", "self", ".", "obs_mem", ",", "self", ".", "obs_data_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.data_collector.DataCollector.max_observations": [[80, 83], ["None"], "methods", ["None"], ["", "def", "max_observations", "(", "self", ")", ":", "\n", "# returns False if the max amount of observations has been made.", "\n", "        ", "return", "not", "self", ".", "push_count", "==", "self", ".", "max_nr_observations", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.data_collector.DataCollector.generate_data": [[85, 144], ["print", "numpy.array", "car_racing.CarRacing", "Monitor.render", "Monitor.close", "Monitor", "data_collector.DataCollector.max_observations", "Monitor.reset", "print", "data_collector.DataCollector.max_observations", "Monitor.render", "data_collector.DataCollector.convert_obs_bw", "data_collector.DataCollector.add_to_mem", "Monitor.step", "Monitor.render", "data_collector.DataCollector.max_observations", "data_collector.DataCollector.saveTorch", "print"], "methods", ["home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.render", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.close", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.data_collector.DataCollector.max_observations", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.reset", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.data_collector.DataCollector.max_observations", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.render", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.data_collector.DataCollector.convert_obs_bw", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.data_collector.DataCollector.add_to_mem", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.step", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.render", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.data_collector.DataCollector.max_observations", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.data_collector.DataCollector.saveTorch"], ["", "def", "generate_data", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"Generating data by having the user play:\"", ")", "\n", "\n", "a", "=", "np", ".", "array", "(", "[", "0.0", ",", "0.0", ",", "0.0", "]", ")", "\n", "\n", "def", "key_press", "(", "k", ",", "mod", ")", ":", "\n", "            ", "global", "restart", "\n", "if", "k", "==", "0xFF0D", ":", "\n", "                ", "restart", "=", "True", "\n", "", "if", "k", "==", "key", ".", "LEFT", ":", "\n", "                ", "a", "[", "0", "]", "=", "-", "1.0", "\n", "", "if", "k", "==", "key", ".", "RIGHT", ":", "\n", "                ", "a", "[", "0", "]", "=", "+", "1.0", "\n", "", "if", "k", "==", "key", ".", "UP", ":", "\n", "                ", "a", "[", "1", "]", "=", "+", "1.0", "\n", "", "if", "k", "==", "key", ".", "DOWN", ":", "\n", "                ", "a", "[", "2", "]", "=", "+", "0.8", "# set 1.0 for wheels to block to zero rotation", "\n", "\n", "", "", "def", "key_release", "(", "k", ",", "mod", ")", ":", "\n", "            ", "if", "k", "==", "key", ".", "LEFT", "and", "a", "[", "0", "]", "==", "-", "1.0", ":", "\n", "                ", "a", "[", "0", "]", "=", "0", "\n", "", "if", "k", "==", "key", ".", "RIGHT", "and", "a", "[", "0", "]", "==", "+", "1.0", ":", "\n", "                ", "a", "[", "0", "]", "=", "0", "\n", "", "if", "k", "==", "key", ".", "UP", ":", "\n", "                ", "a", "[", "1", "]", "=", "0", "\n", "", "if", "k", "==", "key", ".", "DOWN", ":", "\n", "                ", "a", "[", "2", "]", "=", "0", "\n", "\n", "", "", "env", "=", "cr", ".", "CarRacing", "(", ")", "\n", "env", ".", "render", "(", ")", "\n", "env", ".", "viewer", ".", "window", ".", "on_key_press", "=", "key_press", "\n", "env", ".", "viewer", ".", "window", ".", "on_key_release", "=", "key_release", "\n", "record_video", "=", "False", "\n", "if", "record_video", ":", "\n", "            ", "from", "gym", ".", "wrappers", ".", "monitor", "import", "Monitor", "\n", "\n", "env", "=", "Monitor", "(", "env", ",", "\"/tmp/video-test\"", ",", "force", "=", "True", ")", "\n", "", "isopen", "=", "True", "\n", "while", "isopen", "and", "self", ".", "max_observations", "(", ")", ":", "\n", "            ", "env", ".", "reset", "(", ")", "\n", "total_reward", "=", "0.0", "\n", "steps", "=", "0", "\n", "restart", "=", "False", "\n", "while", "True", "and", "self", ".", "max_observations", "(", ")", ":", "\n", "                ", "obs", "=", "env", ".", "render", "(", "mode", "=", "'state_pixels'", ")", "\n", "obs", "=", "self", ".", "convert_obs_bw", "(", "obs", ")", "\n", "self", ".", "add_to_mem", "(", "obs", ")", "\n", "s", ",", "r", ",", "done", ",", "info", "=", "env", ".", "step", "(", "[", "a", "[", "0", "]", ",", "a", "[", "1", "]", ",", "a", "[", "2", "]", "]", ")", "\n", "total_reward", "+=", "r", "\n", "if", "self", ".", "push_count", "%", "200", "==", "0", "or", "done", ":", "\n", "                    ", "print", "(", "\"Percent of data recorded: {}% ({} / {})\"", ".", "format", "(", "(", "self", ".", "push_count", "/", "self", ".", "max_nr_observations", ")", "*", "100", ",", "self", ".", "push_count", ",", "self", ".", "max_nr_observations", ")", ")", "\n", "", "steps", "+=", "1", "\n", "isopen", "=", "env", ".", "render", "(", ")", "\n", "if", "done", "or", "restart", "or", "isopen", "==", "False", ":", "\n", "                    ", "break", "\n", "", "", "print", "(", "\"Data points recorded so far:\"", ",", "self", ".", "push_count", ")", "\n", "if", "not", "self", ".", "max_observations", "(", ")", ":", "\n", "                ", "self", ".", "saveTorch", "(", ")", "\n", "", "", "env", ".", "close", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.dq_cnn_CarRacing.DQN.__init__": [[13, 49], ["torch.Module.__init__", "torch.Sequential().to", "torch.Sequential().to", "torch.Sequential().to", "torch.Sequential().to", "numpy.prod", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "dq_cnn_CarRacing.DQN.to", "dq_cnn_CarRacing.DQN.parameters", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.dq_cnn_CarRacing.Agent.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_screens", ",", "n_hidden", ",", "n_outputs", ",", "lr", "=", "0.001", ",", "device", "=", "'cpu'", ")", ":", "\n", "        ", "super", "(", "DQN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_screens", "=", "n_screens", "# Number of stacked observations", "\n", "self", ".", "n_hidden", "=", "n_hidden", "# Number of hidden units", "\n", "self", ".", "n_outputs", "=", "n_outputs", "# Number of outputs", "\n", "\n", "self", ".", "device", "=", "device", "\n", "\n", "# The convolutional encoder", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "n_screens", ",", "64", ",", "4", ",", "stride", "=", "2", ")", ",", "# (1, n_screens, 42, 42) --> (1, 64, 20, 20)", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "2", ")", ",", "# (1, 64, 20, 20) --> (1, 64, 10, 10)", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "4", ",", "stride", "=", "2", ")", ",", "# (1, 64, 10, 10) --> (1, 128, 4, 4)", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "2", ")", ",", "# (1, 128, 4, 4) --> (1, 128, 2, 2)", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "2", ",", "stride", "=", "2", ")", ",", "# (1, 128, 2, 2) --> (1, 256, 1, 1)", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "\n", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# The size of the encoder output", "\n", "self", ".", "encoder_output_shape", "=", "(", "256", ",", "1", ",", "1", ")", "\n", "self", ".", "encoder_output_size", "=", "np", ".", "prod", "(", "self", ".", "encoder_output_shape", ")", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "self", ".", "encoder_output_size", ",", "self", ".", "n_hidden", ")", "# Hidden layer", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "self", ".", "n_hidden", ",", "self", ".", "n_outputs", ")", "# Output layer", "\n", "\n", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "parameters", "(", ")", ",", "lr", ")", "# Adam optimizer", "\n", "\n", "self", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.dq_cnn_CarRacing.DQN.forward": [[50, 61], ["x.to.to.to", "dq_cnn_CarRacing.DQN.encoder", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "dq_cnn_CarRacing.DQN.fc2", "dq_cnn_CarRacing.DQN.fc1", "dq_cnn_CarRacing.DQN.view", "dq_cnn_CarRacing.DQN.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# cast to device", "\n", "        ", "x", "=", "x", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "h1", "=", "self", ".", "encoder", "(", "x", ")", "\n", "\n", "h2", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "h1", ".", "view", "(", "h1", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", ")", "\n", "\n", "y", "=", "self", ".", "fc2", "(", "h2", ")", "\n", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.dq_cnn_CarRacing.Agent.__init__": [[65, 165], ["car_racing.CarRacing", "int", "len", "dq_cnn_CarRacing.DQN", "dq_cnn_CarRacing.DQN", "dq_cnn_CarRacing.Agent.target_net.load_state_dict", "replay_memory.ReplayMemory", "numpy.array", "torchvision.Compose", "open", "dq_cnn_CarRacing.Agent.record.write", "dq_cnn_CarRacing.Agent.record.write", "numpy.prod", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "dq_cnn_CarRacing.Agent.policy_net.load_state_dict", "dq_cnn_CarRacing.Agent.policy_net.eval", "print", "dq_cnn_CarRacing.Agent.policy_net.state_dict", "max", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "numpy.zeros", "range", "max", "torchvision.ToPILImage", "torchvision.Grayscale", "torchvision.Resize", "torchvision.ToTensor", "datetime.datetime.now", "range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "device", "=", "'cuda'", ")", ":", "\n", "\n", "        ", "self", ".", "device", "=", "device", "\n", "self", ".", "env", "=", "cr", ".", "CarRacing", "(", ")", "\n", "self", ".", "render_view", "=", "False", "# Set to True if you want to see what it is doing", "\n", "self", ".", "print_timer", "=", "10", "# Print average result of Agent every '...' episodes", "\n", "\n", "# Size of observation", "\n", "self", ".", "height", "=", "self", ".", "width", "=", "42", "# observation size (height and width)", "\n", "self", ".", "color", "=", "1", "# number of colors", "\n", "self", ".", "n_screens", "=", "8", "# number of observations stacked", "\n", "\n", "self", ".", "obs_shape", "=", "(", "self", ".", "height", ",", "self", ".", "width", ")", "\n", "self", ".", "obs_size", "=", "int", "(", "np", ".", "prod", "(", "self", ".", "obs_shape", ")", ")", "# The size of the observation", "\n", "self", ".", "linear", "=", "False", "# True if the input is a vector", "\n", "\n", "# Discretization of continuous action space for CarRacing-v0", "\n", "# [0] = steering, [1] = accelerating, [2] = braking", "\n", "self", ".", "discrete_actions", "=", "{", "0", ":", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", "]", ")", ",", "# do nothing", "\n", "1", ":", "np", ".", "array", "(", "[", "-", "1", ",", "0", ",", "0", "]", ")", ",", "# steer sharp left", "\n", "2", ":", "np", ".", "array", "(", "[", "1", ",", "0", ",", "0", "]", ")", ",", "# steer sharp right", "\n", "3", ":", "np", ".", "array", "(", "[", "-", "0.5", ",", "0", ",", "0", "]", ")", ",", "# steer left", "\n", "4", ":", "np", ".", "array", "(", "[", "0.5", ",", "0", ",", "0", "]", ")", ",", "# steer right", "\n", "5", ":", "np", ".", "array", "(", "[", "0", ",", "1", ",", "0", "]", ")", ",", "# accelerate 100%", "\n", "6", ":", "np", ".", "array", "(", "[", "0", ",", "0.5", ",", "0", "]", ")", ",", "# accelerate 50%", "\n", "7", ":", "np", ".", "array", "(", "[", "0", ",", "0.25", ",", "0", "]", ")", ",", "# accelerate 25%", "\n", "8", ":", "np", ".", "array", "(", "[", "0", ",", "0", ",", "1", "]", ")", ",", "# brake 100%", "\n", "9", ":", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0.5", "]", ")", ",", "# brake 50%", "\n", "10", ":", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0.25", "]", ")", "}", "# brake 25%", "\n", "\n", "# The number of actions available to the agent", "\n", "self", ".", "n_actions", "=", "len", "(", "self", ".", "discrete_actions", ")", "\n", "\n", "\n", "# Determines how much the agent explores, decreases linearly over time depending eps_decay to the value of eps_min", "\n", "self", ".", "eps_max", "=", "0.15", "\n", "self", ".", "eps_min", "=", "0.05", "\n", "self", ".", "eps", "=", "self", ".", "eps_max", "\n", "self", ".", "eps_decay", "=", "0.00015", "\n", "\n", "\n", "self", ".", "freeze_cntr", "=", "0", "# Keeps track of when to (un)freeze the target network", "\n", "self", ".", "freeze_period", "=", "50", "# How long the network is frozen", "\n", "self", ".", "batch_size", "=", "250", "\n", "\n", "self", ".", "n_hidden", "=", "512", "# number of hidden units in the model", "\n", "self", ".", "lr", "=", "1e-5", "# learning rate", "\n", "self", ".", "gamma", "=", "0.99", "# Discount rate", "\n", "self", ".", "memory_capacity", "=", "300000", "# memory size", "\n", "self", ".", "n_episodes", "=", "1000", "# number of episodes", "\n", "self", ".", "n_play_episodes", "=", "150", "# number of episodes used for average reward test", "\n", "self", ".", "max_length_episode", "=", "1000", "# max number of steps a episode of the CarRacing environment lasts", "\n", "\n", "# Load settings", "\n", "self", ".", "load_network", "=", "False", "\n", "self", ".", "network_load_path", "=", "'networks/dqn/dq_cnn_CarRacing_policynet_r{}.pth'", ".", "format", "(", "self", ".", "run_id", ")", "\n", "\n", "# Create networks", "\n", "self", ".", "policy_net", "=", "DQN", "(", "n_screens", "=", "self", ".", "n_screens", ",", "n_hidden", "=", "self", ".", "n_hidden", ",", "n_outputs", "=", "self", ".", "n_actions", ",", "lr", "=", "self", ".", "lr", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "target_net", "=", "DQN", "(", "n_screens", "=", "self", ".", "n_screens", ",", "n_hidden", "=", "self", ".", "n_hidden", ",", "n_outputs", "=", "self", ".", "n_actions", ",", "lr", "=", "self", ".", "lr", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "if", "self", ".", "load_network", ":", "# If true: load policy network given a path", "\n", "            ", "self", ".", "policy_net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "self", ".", "network_load_path", ",", "map_location", "=", "self", ".", "device", ")", ")", "\n", "self", ".", "policy_net", ".", "eval", "(", ")", "\n", "self", ".", "eps", "=", "self", ".", "eps_min", "# If we load a model, epsilon is set to its minimum", "\n", "print", "(", "\"Succesfully loaded the network\"", ")", "\n", "\n", "# Make the target network a copy of the policy network", "\n", "", "self", ".", "target_net", ".", "load_state_dict", "(", "self", ".", "policy_net", ".", "state_dict", "(", ")", ")", "\n", "\n", "# Initialize the replay memory", "\n", "self", ".", "memory", "=", "rm", ".", "ReplayMemory", "(", "self", ".", "memory_capacity", ",", "self", ".", "obs_shape", ",", "self", ".", "obs_size", ",", "self", ".", "linear", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "# Initialize last observations array", "\n", "self", ".", "obs_batch", "=", "np", ".", "array", "(", "[", "np", ".", "zeros", "(", "(", "self", ".", "height", ",", "self", ".", "width", ")", ",", "dtype", "=", "'float32'", ")", "for", "i", "in", "range", "(", "self", ".", "n_screens", ")", "]", ")", "\n", "\n", "# When sampling from memory at index i, obs_indices indicates that we want observations with indices i-obs_indices, works the same for the others", "\n", "self", ".", "obs_indices", "=", "[", "(", "self", ".", "n_screens", "+", "1", ")", "-", "i", "for", "i", "in", "range", "(", "self", ".", "n_screens", "+", "2", ")", "]", "\n", "self", ".", "action_indices", "=", "[", "1", "]", "\n", "self", ".", "reward_indices", "=", "[", "1", "]", "\n", "self", ".", "done_indices", "=", "[", "0", "]", "\n", "self", ".", "max_n_indices", "=", "max", "(", "max", "(", "self", ".", "obs_indices", ",", "self", ".", "action_indices", ",", "self", ".", "reward_indices", ",", "self", ".", "done_indices", ")", ")", "+", "1", "\n", "\n", "# Used to pre-process the observations (screens)        ", "\n", "self", ".", "preprocess", "=", "T", ".", "Compose", "(", "[", "T", ".", "ToPILImage", "(", ")", ",", "\n", "T", ".", "Grayscale", "(", "num_output_channels", "=", "1", ")", ",", "\n", "T", ".", "Resize", "(", "(", "self", ".", "height", ",", "self", ".", "width", ")", ")", ",", "\n", "T", ".", "ToTensor", "(", ")", "]", ")", "\n", "\n", "# Training settings", "\n", "self", ".", "run_id", "=", "1", "\n", "self", ".", "save_results", "=", "True", "\n", "self", ".", "save_network", "=", "True", "\n", "self", ".", "results_path", "=", "\"results/dqn/dq_cnn_CarRacing_results_r{}.npz\"", ".", "format", "(", "self", ".", "run_id", ")", "\n", "self", ".", "network_save_path", "=", "\"networks/dqn/dq_cnn_CarRacing_policynet_r{}.pth\"", ".", "format", "(", "self", ".", "run_id", ")", "\n", "\n", "self", ".", "log_path", "=", "\"logs/dq_cnn_CarRacing_log_r{}.txt\"", ".", "format", "(", "self", ".", "run_id", ")", "\n", "self", ".", "record", "=", "open", "(", "self", ".", "log_path", ",", "\"a\"", ")", "\n", "self", ".", "record", ".", "write", "(", "\"\\n\\n-----------------------------------------------------------------\\n\"", ")", "\n", "self", ".", "record", ".", "write", "(", "\"File opened at {}\\n\"", ".", "format", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.dq_cnn_CarRacing.Agent.select_action": [[167, 176], ["numpy.random.rand", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "dq_cnn_CarRacing.Agent.policy_net().to", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "dq_cnn_CarRacing.Agent.policy_net", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax"], "methods", ["None"], ["", "def", "select_action", "(", "self", ",", "obs", ")", ":", "\n", "# exploration", "\n", "        ", "if", "np", ".", "random", ".", "rand", "(", ")", "<=", "self", ".", "eps", ":", "\n", "            ", "return", "torch", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "self", ".", "n_actions", ",", "size", "=", "(", "1", ",", ")", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "# exploitation", "\n", "", "else", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "action_values", "=", "self", ".", "policy_net", "(", "obs", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "return", "torch", ".", "tensor", "(", "[", "torch", ".", "argmax", "(", "action_values", ")", "]", ",", "dtype", "=", "torch", ".", "int64", ",", "device", "=", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.dq_cnn_CarRacing.Agent.convert_observation": [[178, 190], ["dq_cnn_CarRacing.Agent.reshape", "dq_cnn_CarRacing.Agent.transpose", "dq_cnn_CarRacing.Agent.preprocess", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.flip().copy", "int", "int", "numpy.flip"], "methods", ["None"], ["", "", "", "def", "convert_observation", "(", "self", ",", "obs", ")", ":", "\n", "# shape observation to original size 96x96 with 3 rgb channels", "\n", "        ", "obs", "=", "obs", ".", "reshape", "(", "96", ",", "96", ",", "3", ")", "\n", "obs", "=", "obs", ".", "transpose", "(", "(", "2", ",", "1", ",", "0", ")", ")", "\n", "\n", "# stips of bottom part of the image which contains a black bar with the accumulated reward and control value bars, and makes sure width is equal to height", "\n", "obs", "=", "obs", "[", ":", ",", "6", ":", "90", ",", "int", "(", "96", "*", "0", ")", ":", "int", "(", "96", "*", "0.875", ")", "]", "\n", "\n", "# grayscale and resize", "\n", "obs", "=", "self", ".", "preprocess", "(", "torch", ".", "from_numpy", "(", "np", ".", "flip", "(", "obs", ",", "axis", "=", "0", ")", ".", "copy", "(", ")", ")", ")", "\n", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.dq_cnn_CarRacing.Agent.get_obs_batch": [[193, 201], ["numpy.concatenate", "torch.from_numpy().unsqueeze().to", "torch.from_numpy().unsqueeze().to", "torch.from_numpy().unsqueeze().to", "torch.from_numpy().unsqueeze().to", "torch.from_numpy().unsqueeze().to", "torch.from_numpy().unsqueeze().to", "torch.from_numpy().unsqueeze().to", "torch.from_numpy().unsqueeze().to", "torch.from_numpy().unsqueeze().to", "torch.from_numpy().unsqueeze().to", "torch.from_numpy().unsqueeze().to", "torch.from_numpy().unsqueeze().to", "torch.from_numpy().unsqueeze().to", "torch.from_numpy().unsqueeze().to", "torch.from_numpy().unsqueeze().to", "torch.from_numpy().unsqueeze().to", "obs.numpy", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.flip().copy", "numpy.flip"], "methods", ["None"], ["def", "get_obs_batch", "(", "self", ",", "obs", ")", ":", "\n", "# add new observation to obs_batch, remove oldest.", "\n", "        ", "self", ".", "obs_batch", "=", "np", ".", "concatenate", "(", "(", "obs", ".", "numpy", "(", ")", ",", "self", ".", "obs_batch", "[", "0", ":", "self", ".", "n_screens", "-", "1", "]", ")", ",", "axis", "=", "0", ")", "\n", "\n", "# resize to (1, self.n_screens, 84, 84) and convert to torch", "\n", "obs_batch2", "=", "torch", ".", "from_numpy", "(", "np", ".", "flip", "(", "self", ".", "obs_batch", ",", "axis", "=", "0", ")", ".", "copy", "(", ")", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "return", "obs_batch2", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.dq_cnn_CarRacing.Agent.learn": [[203, 231], ["dq_cnn_CarRacing.Agent.memory.sample", "all_obs_batch[].view", "all_obs_batch[].view", "dq_cnn_CarRacing.Agent.policy_net().gather().to", "dq_cnn_CarRacing.Agent.target_net().to", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "dq_cnn_CarRacing.Agent.policy_net.optimizer.zero_grad", "torch.mse_loss.backward", "dq_cnn_CarRacing.Agent.policy_net.optimizer.step", "dq_cnn_CarRacing.Agent.target_net.load_state_dict", "dq_cnn_CarRacing.Agent.policy_net.state_dict", "dq_cnn_CarRacing.Agent.policy_net().gather", "dq_cnn_CarRacing.Agent.target_net", "[].view", "dq_cnn_CarRacing.Agent.policy_net", "dq_cnn_CarRacing.Agent.max"], "methods", ["home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.replay_memory.ReplayMemory.sample", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.step"], ["", "def", "learn", "(", "self", ")", ":", "\n", "\n", "# If there are not enough transitions stored in memory, return", "\n", "        ", "if", "self", ".", "memory", ".", "push_count", "-", "self", ".", "max_n_indices", "*", "2", "<", "self", ".", "batch_size", ":", "\n", "            ", "return", "\n", "\n", "# After every freeze_period time steps, update the target network", "\n", "", "if", "self", ".", "freeze_cntr", "%", "self", ".", "freeze_period", "==", "0", ":", "\n", "            ", "self", ".", "target_net", ".", "load_state_dict", "(", "self", ".", "policy_net", ".", "state_dict", "(", ")", ")", "\n", "", "self", ".", "freeze_cntr", "+=", "1", "\n", "\n", "# Retrieve transition data in batches", "\n", "all_obs_batch", ",", "action_batch", ",", "reward_batch", ",", "done_batch", "=", "self", ".", "memory", ".", "sample", "(", "\n", "self", ".", "obs_indices", ",", "self", ".", "action_indices", ",", "self", ".", "reward_indices", ",", "self", ".", "done_indices", ",", "self", ".", "max_n_indices", ",", "self", ".", "batch_size", ")", "\n", "\n", "# Retrieve a batch of observations for 2 consecutive points in tim", "\n", "obs_batch", "=", "all_obs_batch", "[", ":", ",", "0", ":", "self", ".", "n_screens", ",", ":", ",", ":", "]", ".", "view", "(", "self", ".", "batch_size", ",", "self", ".", "n_screens", ",", "self", ".", "height", ",", "self", ".", "width", ")", "\n", "next_obs_batch", "=", "all_obs_batch", "[", ":", ",", "1", ":", "self", ".", "n_screens", "+", "1", ",", ":", ",", ":", "]", ".", "view", "(", "self", ".", "batch_size", ",", "self", ".", "n_screens", ",", "self", ".", "height", ",", "self", ".", "width", ")", "\n", "\n", "# Get the q values and the target values, then determine the loss", "\n", "value_batch", "=", "self", ".", "policy_net", "(", "obs_batch", ")", ".", "gather", "(", "1", ",", "action_batch", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "target_out", "=", "self", ".", "target_net", "(", "next_obs_batch", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "target_batch", "=", "reward_batch", "+", "(", "1", "-", "done_batch", ")", "*", "self", ".", "gamma", "*", "target_out", ".", "max", "(", "1", ")", "[", "0", "]", ".", "view", "(", "self", ".", "batch_size", ",", "1", ")", "# (1-done_batch) is used to remove the samples which were gathered when the episode was done", "\n", "loss", "=", "F", ".", "mse_loss", "(", "target_batch", ",", "value_batch", ")", "\n", "\n", "self", ".", "policy_net", ".", "optimizer", ".", "zero_grad", "(", ")", "# Reset the gradient", "\n", "loss", ".", "backward", "(", ")", "# Compute the gradient", "\n", "self", ".", "policy_net", ".", "optimizer", ".", "step", "(", ")", "# Perform gradient descent", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.dq_cnn_CarRacing.Agent.play": [[234, 275], ["range", "dq_cnn_CarRacing.Agent.env.close", "numpy.savez", "dq_cnn_CarRacing.Agent.env.reset", "dq_cnn_CarRacing.Agent.convert_observation", "dq_cnn_CarRacing.Agent.get_obs_batch", "rewards.append", "print", "numpy.array", "dq_cnn_CarRacing.Agent.select_action", "dq_cnn_CarRacing.Agent.discrete_actions.get", "dq_cnn_CarRacing.Agent.env.step", "dq_cnn_CarRacing.Agent.convert_observation", "dq_cnn_CarRacing.Agent.get_obs_batch", "int", "dq_cnn_CarRacing.Agent.env.render"], "methods", ["home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.close", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.reset", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.dq_cnn_CarRacing.Agent.convert_observation", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.dq_cnn_CarRacing.Agent.get_obs_batch", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.dq_cnn_CarRacing.Agent.select_action", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.step", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.dq_cnn_CarRacing.Agent.convert_observation", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.dq_cnn_CarRacing.Agent.get_obs_batch", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.render"], ["def", "play", "(", "self", ")", ":", "\n", "\n", "        ", "rewards", "=", "[", "]", "\n", "\n", "for", "ith_episode", "in", "range", "(", "self", ".", "n_play_episodes", ")", ":", "\n", "\n", "            ", "total_reward", "=", "0", "\n", "nr_steps", "=", "0", "\n", "obs", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "obs", "=", "self", ".", "convert_observation", "(", "obs", ")", "\n", "obs_batch", "=", "self", ".", "get_obs_batch", "(", "obs", ")", "\n", "done", "=", "False", "\n", "\n", "while", "not", "done", "and", "nr_steps", "<=", "self", ".", "max_length_episode", ":", "\n", "\n", "# get action", "\n", "                ", "action", "=", "self", ".", "select_action", "(", "obs_batch", ")", "\n", "\n", "# get actual action from discrete actions dictionary", "\n", "action_todo", "=", "self", ".", "discrete_actions", ".", "get", "(", "int", "(", "action", "[", "0", "]", ")", ")", "\n", "\n", "# take step", "\n", "obs", ",", "reward", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "[", "action_todo", "[", "0", "]", ",", "action_todo", "[", "1", "]", ",", "action_todo", "[", "2", "]", "]", ")", "\n", "nr_steps", "=", "nr_steps", "+", "1", "\n", "obs", "=", "self", ".", "convert_observation", "(", "obs", ")", "\n", "obs_batch", "=", "self", ".", "get_obs_batch", "(", "obs", ")", "\n", "\n", "# render in visible window if True", "\n", "if", "self", ".", "render_view", ":", "\n", "                    ", "self", ".", "env", ".", "render", "(", "'human'", ")", "\n", "\n", "# add reward to total", "\n", "", "total_reward", "+=", "reward", "\n", "\n", "", "rewards", ".", "append", "(", "total_reward", ")", "\n", "print", "(", "\"Reward for this episode:\"", ",", "total_reward", ")", "\n", "total_reward", "=", "0", "\n", "\n", "", "self", ".", "env", ".", "close", "(", ")", "\n", "\n", "np", ".", "savez", "(", "\"rewards/dqn_cnn_CarRacing_rewards\"", ",", "np", ".", "array", "(", "rewards", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.dq_cnn_CarRacing.Agent.train": [[277, 366], ["print", "dq_cnn_CarRacing.Agent.record.write", "range", "dq_cnn_CarRacing.Agent.env.close", "print", "dq_cnn_CarRacing.Agent.record.write", "dq_cnn_CarRacing.Agent.record.close", "datetime.datetime.now", "dq_cnn_CarRacing.Agent.env.reset", "dq_cnn_CarRacing.Agent.convert_observation", "dq_cnn_CarRacing.Agent.get_obs_batch", "results.append", "numpy.savez", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "datetime.datetime.now", "dq_cnn_CarRacing.Agent.select_action", "dq_cnn_CarRacing.Agent.memory.push", "dq_cnn_CarRacing.Agent.discrete_actions.get", "dq_cnn_CarRacing.Agent.env.step", "dq_cnn_CarRacing.Agent.convert_observation", "dq_cnn_CarRacing.Agent.get_obs_batch", "dq_cnn_CarRacing.Agent.learn", "numpy.mean", "numpy.mean", "print", "dq_cnn_CarRacing.Agent.record.write", "dq_cnn_CarRacing.Agent.record.close", "open", "numpy.array", "dq_cnn_CarRacing.Agent.policy_net.state_dict", "int", "dq_cnn_CarRacing.Agent.env.render", "dq_cnn_CarRacing.Agent.memory.push"], "methods", ["home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.close", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.close", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.reset", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.dq_cnn_CarRacing.Agent.convert_observation", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.dq_cnn_CarRacing.Agent.get_obs_batch", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.dq_cnn_CarRacing.Agent.select_action", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.replay_memory.ReplayMemory.push", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.step", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.dq_cnn_CarRacing.Agent.convert_observation", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.dq_cnn_CarRacing.Agent.get_obs_batch", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.dq_cnn_CarRacing.Agent.learn", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.close", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.car_racing.CarRacing.render", "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.replay_memory.ReplayMemory.push"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "msg", "=", "\"Environment is: {}\\nTraining started at {}\"", ".", "format", "(", "\"CarRacing-v0\"", ",", "datetime", ".", "datetime", ".", "now", "(", ")", ")", "\n", "print", "(", "msg", ")", "\n", "self", ".", "record", ".", "write", "(", "msg", "+", "\"\\n\"", ")", "\n", "\n", "results", "=", "[", "]", "\n", "\n", "for", "ith_episode", "in", "range", "(", "self", ".", "n_episodes", ")", ":", "\n", "\n", "# initialize training variables", "\n", "            ", "total_reward", "=", "0", "\n", "reward", "=", "0", "\n", "nr_steps", "=", "0", "\n", "done", "=", "False", "\n", "\n", "# get first observation", "\n", "obs", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "obs", "=", "self", ".", "convert_observation", "(", "obs", ")", "\n", "obs_batch", "=", "self", ".", "get_obs_batch", "(", "obs", ")", "\n", "\n", "while", "not", "done", "and", "nr_steps", "<=", "self", ".", "max_length_episode", ":", "\n", "\n", "# get action", "\n", "                ", "action", "=", "self", ".", "select_action", "(", "obs_batch", ")", "\n", "\n", "# push to memory", "\n", "self", ".", "memory", ".", "push", "(", "obs", ",", "action", ",", "reward", ",", "done", ")", "\n", "\n", "# get actual action from discrete actions dictionary", "\n", "action_todo", "=", "self", ".", "discrete_actions", ".", "get", "(", "int", "(", "action", "[", "0", "]", ")", ")", "\n", "\n", "# take step", "\n", "obs", ",", "reward", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "[", "action_todo", "[", "0", "]", ",", "action_todo", "[", "1", "]", ",", "action_todo", "[", "2", "]", "]", ")", "\n", "nr_steps", "=", "nr_steps", "+", "1", "\n", "\n", "# get new observation", "\n", "obs", "=", "self", ".", "convert_observation", "(", "obs", ")", "\n", "obs_batch", "=", "self", ".", "get_obs_batch", "(", "obs", ")", "\n", "\n", "# render in visible window if True", "\n", "if", "self", ".", "render_view", ":", "\n", "                    ", "self", ".", "env", ".", "render", "(", "'human'", ")", "\n", "\n", "# add reward to total", "\n", "", "total_reward", "+=", "reward", "\n", "\n", "# have the networks learn", "\n", "self", ".", "learn", "(", ")", "\n", "\n", "# check if episode is done", "\n", "if", "done", "or", "nr_steps", "==", "self", ".", "max_length_episode", ":", "\n", "                    ", "self", ".", "memory", ".", "push", "(", "obs", ",", "-", "99", ",", "-", "99", ",", "True", ")", "\n", "\n", "# save result", "\n", "", "", "results", ".", "append", "(", "total_reward", ")", "\n", "\n", "# Update epsilon after each episode", "\n", "if", "self", ".", "eps", ">", "self", ".", "eps_min", ":", "\n", "                ", "self", ".", "eps", "=", "self", ".", "eps_max", "-", "(", "ith_episode", "*", "self", ".", "eps_decay", ")", "\n", "\n", "\n", "# Print and keep a (.txt) record of stuff", "\n", "", "if", "ith_episode", ">", "0", "and", "ith_episode", "%", "self", ".", "print_timer", "==", "0", ":", "\n", "                ", "avg_reward", "=", "np", ".", "mean", "(", "results", ")", "\n", "last_x", "=", "np", ".", "mean", "(", "results", "[", "-", "self", ".", "print_timer", ":", "]", ")", "\n", "msg", "=", "\"Episodes: {:4d}, eps={:3f}, avg score: {:3.2f}, over last {:d}: {:3.2f}\"", ".", "format", "(", "ith_episode", ",", "self", ".", "eps", ",", "avg_reward", ",", "self", ".", "print_timer", ",", "last_x", ")", "\n", "print", "(", "msg", ")", "\n", "\n", "# write to log", "\n", "self", ".", "record", ".", "write", "(", "msg", "+", "\"\\n\"", ")", "\n", "\n", "# save log", "\n", "self", ".", "record", ".", "close", "(", ")", "\n", "self", ".", "record", "=", "open", "(", "self", ".", "log_path", ",", "\"a\"", ")", "\n", "\n", "# close environment after training", "\n", "", "", "self", ".", "env", ".", "close", "(", ")", "\n", "\n", "# If enabled, save the results and the network (state_dict)", "\n", "if", "self", ".", "save_results", ":", "\n", "            ", "np", ".", "savez", "(", "self", ".", "results_path", ",", "np", ".", "array", "(", "results", ")", ")", "\n", "", "if", "self", ".", "save_network", ":", "\n", "            ", "torch", ".", "save", "(", "self", ".", "policy_net", ".", "state_dict", "(", ")", ",", "self", ".", "network_save_path", ")", "\n", "\n", "# Print and keep a (.txt) record of stuff", "\n", "", "msg", "=", "\"Training finished at {}\"", ".", "format", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", "\n", "print", "(", "msg", ")", "\n", "self", ".", "record", ".", "write", "(", "msg", ")", "\n", "self", ".", "record", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.results_plot.plot_average_reward": [[68, 92], ["results_plot.plot_average_reward.mean"], "function", ["None"], ["def", "plot_average_reward", "(", ")", ":", "\n", "\n", "    ", "def", "mean", "(", "data", ")", ":", "\n", "        ", "mean_data", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "data", "[", "'arr_0'", "]", ")", ")", ":", "\n", "            ", "mean_data", ".", "append", "(", "data", "[", "'arr_0'", "]", "[", "0", ":", "i", "+", "1", "]", ".", "mean", "(", ")", ")", "\n", "", "return", "mean_data", "\n", "\n", "", "mean_data", "=", "mean", "(", "dqn_avg_rew", ")", "\n", "mean_data2", "=", "mean", "(", "daif_avg_rew", ")", "\n", "\n", "\n", "# plot mean reward", "\n", "plt", ".", "title", "(", "\"Average reward over episodes\"", ")", "\n", "plt", ".", "ylabel", "(", "\"average reward\"", ")", "\n", "plt", ".", "xlabel", "(", "\"episode\"", ")", "\n", "plt", ".", "plot", "(", "mean_data", ",", "'#1592e2'", ",", "alpha", "=", "1", ",", "label", "=", "'DQN: {:.2f} +- {:.2f}'", ".", "format", "(", "np", ".", "mean", "(", "dqn_avg_rew", "[", "'arr_0'", "]", "[", "0", ":", "100", "]", ")", ",", "np", ".", "std", "(", "dqn_avg_rew", "[", "'arr_0'", "]", "[", "0", ":", "100", "]", ")", ")", ")", "\n", "plt", ".", "plot", "(", "dqn_avg_rew", "[", "'arr_0'", "]", ",", "'#1592e2'", ",", "alpha", "=", "0.3", ")", "\n", "plt", ".", "plot", "(", "mean_data2", ",", "'#E59400'", ",", "alpha", "=", "1", ",", "label", "=", "'dAIF: {:.2f} +- {:.2f}'", ".", "format", "(", "np", ".", "mean", "(", "daif_avg_rew", "[", "'arr_0'", "]", "[", "0", ":", "100", "]", ")", ",", "np", ".", "std", "(", "daif_avg_rew", "[", "'arr_0'", "]", "[", "0", ":", "100", "]", ")", ")", ")", "\n", "plt", ".", "plot", "(", "daif_avg_rew", "[", "'arr_0'", "]", ",", "'#E59400'", ",", "alpha", "=", "0.3", ")", "\n", "plt", ".", "axvline", "(", "x", "=", "100", ",", "c", "=", "\"r\"", ")", "\n", "plt", ".", "grid", "(", "True", ",", "linewidth", "=", "0.1", ",", "color", "=", "'black'", ",", "linestyle", "=", "'-'", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ntavanhoeffelen_daif_carracing.None.results_plot.plot_moving_avg": [[94, 147], ["results_plot.plot_average_reward.mean"], "function", ["None"], ["", "def", "plot_moving_avg", "(", ")", ":", "\n", "    ", "def", "mean", "(", "data", ")", ":", "\n", "        ", "mean_data", "=", "[", "]", "\n", "for", "series", "in", "data", ":", "\n", "            ", "mean_temp", "=", "[", "]", "\n", "mean_temp", ".", "append", "(", "series", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "series", ")", ")", ":", "\n", "                ", "mean_temp", ".", "append", "(", "(", "series", "[", "i", "]", "*", "0.1", ")", "+", "(", "mean_temp", "[", "i", "-", "1", "]", "*", "0.9", ")", ")", "\n", "", "mean_data", ".", "append", "(", "mean_temp", ")", "\n", "", "return", "mean_data", "\n", "\n", "", "dqn_mean_data", "=", "mean", "(", "dqn_data", ")", "\n", "dqn_mean", "=", "np", ".", "mean", "(", "dqn_mean_data", ",", "axis", "=", "0", ")", "\n", "dqn_std", "=", "np", ".", "std", "(", "dqn_mean_data", ",", "axis", "=", "0", ")", "\n", "\n", "daif_mean_data", "=", "mean", "(", "daif_data", ")", "\n", "daif_mean", "=", "np", ".", "mean", "(", "daif_mean_data", ",", "axis", "=", "0", ")", "\n", "daif_std", "=", "np", ".", "std", "(", "daif_mean_data", ",", "axis", "=", "0", ")", "\n", "\n", "daif2_mean_data", "=", "mean", "(", "daif_data_2", ")", "\n", "daif2_mean", "=", "np", ".", "mean", "(", "daif2_mean_data", ",", "axis", "=", "0", ")", "\n", "daif2_std", "=", "np", ".", "std", "(", "daif2_mean_data", ",", "axis", "=", "0", ")", "\n", "\n", "rand_mean_data", "=", "mean", "(", "rand_data", ")", "\n", "rand_mean", "=", "np", ".", "mean", "(", "rand_mean_data", ",", "axis", "=", "0", ")", "\n", "rand_std", "=", "np", ".", "std", "(", "rand_mean_data", ",", "axis", "=", "0", ")", "\n", "\n", "\n", "# plot mean reward", "\n", "plt", ".", "title", "(", "\"Moving Average Reward over episodes\"", ")", "\n", "plt", ".", "ylabel", "(", "\"Average reward\"", ")", "\n", "plt", ".", "xlabel", "(", "\"Episode\"", ")", "\n", "plt", ".", "plot", "(", "dqn_mean", ",", "\"#1f77b4\"", ",", "label", "=", "dqn_label", ",", "alpha", "=", "1", ")", "# DQN Mean", "\n", "plt", ".", "fill_between", "(", "range", "(", "0", ",", "dqn_mean", ".", "shape", "[", "0", "]", ")", ",", "dqn_mean", "-", "dqn_std", ",", "dqn_mean", "+", "dqn_std", ",", "alpha", "=", "0.4", ")", "# DQN Stdev", "\n", "\n", "\n", "plt", ".", "plot", "(", "daif_mean", ",", "c", "=", "\"#ff7f0e\"", ",", "label", "=", "daif_label", ",", "alpha", "=", "1", ")", "# dAIF Mean", "\n", "plt", ".", "fill_between", "(", "range", "(", "0", ",", "daif_mean", ".", "shape", "[", "0", "]", ")", ",", "daif_mean", "-", "daif_std", ",", "daif_mean", "+", "daif_std", ",", "alpha", "=", "0.4", ")", "# dAIF Stdev", "\n", "#plt.plot(mean2(daif_data1), '-', label = \"best dAIF\", alpha = 0.6)", "\n", "\n", "plt", ".", "plot", "(", "daif2_mean", ",", "c", "=", "\"#2CA02C\"", ",", "label", "=", "daif_label2", ",", "alpha", "=", "1", ")", "# dAIF Mean", "\n", "plt", ".", "fill_between", "(", "range", "(", "0", ",", "daif2_mean", ".", "shape", "[", "0", "]", ")", ",", "daif2_mean", "-", "daif2_std", ",", "daif2_mean", "+", "daif2_std", ",", "alpha", "=", "0.4", ")", "# dAIF Stdev", "\n", "\n", "\n", "plt", ".", "plot", "(", "rand_mean", ",", "c", "=", "\"r\"", ",", "label", "=", "rand_label", ",", "alpha", "=", "1", ")", "# rand Mean", "\n", "plt", ".", "fill_between", "(", "range", "(", "0", ",", "rand_mean", ".", "shape", "[", "0", "]", ")", ",", "rand_mean", "-", "rand_std", ",", "rand_mean", "+", "rand_std", ",", "alpha", "=", "0.4", ")", "# rand Stdev", "\n", "\n", "plt", ".", "plot", "(", "mean2", "(", "dqn_data8", ")", ",", "'--'", ",", "label", "=", "\"best DQN\"", ",", "alpha", "=", "0.6", ")", "\n", "plt", ".", "plot", "(", "mean2", "(", "daif_data1", ")", ",", "'--'", ",", "label", "=", "\"best dAIF\"", ",", "alpha", "=", "0.6", ")", "\n", "\n", "plt", ".", "grid", "(", "True", ",", "linewidth", "=", "0.1", ",", "color", "=", "'black'", ",", "linestyle", "=", "'-'", ",", "alpha", "=", "1", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]]}