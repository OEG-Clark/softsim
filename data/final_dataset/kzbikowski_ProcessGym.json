{"home.repos.pwc.inspect_result.kzbikowski_ProcessGym.None.dqn_learning.training_step": [[60, 78], ["dqn_learning.sample_experiences", "model", "numpy.argmax", "tensorflow.one_hot", "target_Q_values.reshape.reshape", "tensorflow.one_hot", "tape.gradient", "optimizer.apply_gradients", "tf.reduce_mean.numpy", "tensorflow.GradientTape", "model", "tensorflow.reduce_sum", "tensorflow.reduce_mean", "zip", "loss_fn", "target_model().numpy", "tf.one_hot.numpy", "target_model"], "function", ["home.repos.pwc.inspect_result.kzbikowski_ProcessGym.None.dqn_learning.sample_experiences"], ["", "def", "training_step", "(", "training_batch_size", ")", ":", "\n", "    ", "experiences", "=", "sample_experiences", "(", "training_batch_size", ")", "\n", "states", ",", "actions", ",", "rewards", ",", "next_states", "=", "experiences", "\n", "\n", "next_Q_values", "=", "model", "(", "next_states", ")", "\n", "best_next_actions", "=", "np", ".", "argmax", "(", "next_Q_values", ",", "axis", "=", "1", ")", "\n", "next_mask", "=", "tf", ".", "one_hot", "(", "best_next_actions", ",", "nmb_of_outputs", ")", "\n", "next_best_Q_values", "=", "(", "target_model", "(", "next_states", ")", ".", "numpy", "(", ")", "*", "next_mask", ".", "numpy", "(", ")", ")", ".", "sum", "(", "axis", "=", "1", ")", "\n", "target_Q_values", "=", "(", "rewards", "+", "discount_rate", "*", "next_best_Q_values", ")", "\n", "target_Q_values", "=", "target_Q_values", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "mask", "=", "tf", ".", "one_hot", "(", "actions", ",", "nmb_of_outputs", ")", "\n", "with", "tf", ".", "GradientTape", "(", ")", "as", "tape", ":", "\n", "        ", "all_Q_values", "=", "model", "(", "states", ")", "\n", "Q_values", "=", "tf", ".", "reduce_sum", "(", "all_Q_values", "*", "mask", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "loss_fn", "(", "target_Q_values", ",", "Q_values", ")", ")", "\n", "", "grads", "=", "tape", ".", "gradient", "(", "loss", ",", "model", ".", "trainable_variables", ")", "\n", "optimizer", ".", "apply_gradients", "(", "zip", "(", "grads", ",", "model", ".", "trainable_variables", ")", ")", "\n", "return", "loss", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.None.dqn_learning.sample_experiences": [[80, 87], ["numpy.random.randint", "len", "numpy.array", "range"], "function", ["None"], ["", "def", "sample_experiences", "(", "batch_size", ")", ":", "\n", "    ", "indices", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "replay_memory", ")", ",", "size", "=", "batch_size", ")", "\n", "batch", "=", "[", "replay_memory", "[", "index", "]", "for", "index", "in", "indices", "]", "\n", "states", ",", "actions", ",", "rewards", ",", "next_states", "=", "[", "\n", "np", ".", "array", "(", "[", "experience", "[", "field_index", "]", "for", "experience", "in", "batch", "]", ")", "\n", "for", "field_index", "in", "range", "(", "4", ")", "]", "\n", "return", "states", ",", "actions", ",", "rewards", ",", "next_states", "\n", "\n"]], "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.None.dqn_learning.epsilon_greedy_policy": [[89, 120], ["numpy.random.rand", "prediction_model", "numpy.mean", "numpy.argmax", "dqn_learning.get_action_from_int", "dqn_learning.env_state_mask", "numpy.random.randint", "dqn_learning.get_action_from_int", "dqn_learning.env_state_mask", "environment.step", "environment.step", "dqn_learning.env_state_mask", "environment.step_fifo", "dqn_learning.get_int_from_sim_action"], "function", ["home.repos.pwc.inspect_result.kzbikowski_ProcessGym.None.test.get_action_from_int", "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.None.dqn_learning.env_state_mask", "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.None.test.get_action_from_int", "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.None.dqn_learning.env_state_mask", "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Simulation.step", "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Simulation.step", "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.None.dqn_learning.env_state_mask", "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Simulation.step_fifo", "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.None.dqn_learning.get_int_from_sim_action"], ["", "def", "epsilon_greedy_policy", "(", "prediction_model", ",", "environment", ",", "state", ",", "nmb_of_tasks", ",", "epsilon", "=", "0", ",", "type_of_epsilon_exp", "=", "\"random\"", ")", ":", "\n", "    ", "\"\"\"\n\n    :param prediction_model:\n    :param environment:\n    :param state:\n    :param nmb_of_tasks:\n    :param epsilon:\n    :param type_of_epsilon_exp: IMPORTANT - using anything besides random here may result in learning policy that is\n                dependent on particular (in this case fifo) strategy present with epsilon probability\n    :return:\n    \"\"\"", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "epsilon", ":", "\n", "        ", "if", "type_of_epsilon_exp", "==", "\"random\"", ":", "\n", "            ", "action", "=", "np", ".", "random", ".", "randint", "(", "nmb_of_outputs", ")", "\n", "sim_action", "=", "get_action_from_int", "(", "action", ",", "nmb_of_tasks", ")", "\n", "next_state", ",", "reward", "=", "env_state_mask", "(", "environment", ".", "step", "(", "sim_action", ")", ")", "\n", "return", "next_state", ",", "reward", ",", "action", ",", "\"r\"", "\n", "", "elif", "type_of_epsilon_exp", "==", "\"fifo\"", ":", "\n", "            ", "next_state", ",", "reward", ",", "action", "=", "env_state_mask", "(", "environment", ".", "step_fifo", "(", ")", ")", "\n", "return", "next_state", ",", "reward", ",", "get_int_from_sim_action", "(", "action", ")", ",", "\"r\"", "\n", "", "", "else", ":", "\n", "        ", "Q_values", "=", "prediction_model", "(", "state", "[", "np", ".", "newaxis", "]", ",", "training", "=", "False", ")", "\n", "global", "q_values_mean", "\n", "global", "q_values_counter", "\n", "q_values_mean", "+=", "np", ".", "mean", "(", "Q_values", "[", "0", "]", ")", "\n", "q_values_counter", "+=", "1", "\n", "action", "=", "np", ".", "argmax", "(", "Q_values", "[", "0", "]", ")", "\n", "sim_action", "=", "get_action_from_int", "(", "action", ",", "nmb_of_tasks", ")", "\n", "next_state", ",", "reward", "=", "env_state_mask", "(", "environment", ".", "step", "(", "sim_action", ")", ")", "\n", "return", "next_state", ",", "reward", ",", "action", ",", "\"q\"", "\n", "\n"]], "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.None.dqn_learning.get_action_from_int": [[122, 136], ["math.floor"], "function", ["None"], ["", "", "def", "get_action_from_int", "(", "int_action_value", ",", "nmb_of_tasks", ")", ":", "\n", "    ", "\"\"\"\n    :param nmb_of_tasks: number of tasks\n    :param nmb_of_resources: number of resources\n    :param int_action_value: action value from the range NxM where N - nmb_of_resources, M - nmb_of_tasks\n    :return: [resource, task] Vector of length 2 of actions to be taken by the environment\n    \"\"\"", "\n", "if", "int_action_value", "==", "0", ":", "\n", "        ", "return", "[", "-", "1", ",", "-", "1", "]", "\n", "", "else", ":", "\n", "        ", "action_coded_value", "=", "int_action_value", "-", "1", "\n", "resource", "=", "math", ".", "floor", "(", "action_coded_value", "/", "nmb_of_tasks", ")", "\n", "task", "=", "action_coded_value", "%", "nmb_of_tasks", "\n", "return", "[", "resource", ",", "task", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.None.dqn_learning.get_int_from_sim_action": [[138, 140], ["None"], "function", ["None"], ["", "", "def", "get_int_from_sim_action", "(", "sim_action", ")", ":", "\n", "    ", "return", "sim_action", "[", "0", "]", "*", "sim_action", "[", "1", "]", "+", "sim_action", "[", "1", "]", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.None.dqn_learning.play_one_step_and_collect_memory": [[142, 147], ["dqn_learning.epsilon_greedy_policy", "replay_memory.append"], "function", ["home.repos.pwc.inspect_result.kzbikowski_ProcessGym.None.dqn_learning.epsilon_greedy_policy"], ["", "def", "play_one_step_and_collect_memory", "(", "env", ",", "state", ",", "epsilon", ",", "type_of_epsilon_exp", "=", "\"random\"", ")", ":", "\n", "    ", "next_state", ",", "reward", ",", "action", ",", "action_type", "=", "epsilon_greedy_policy", "(", "model", ",", "env", ",", "state", ",", "action_space", "[", "1", "]", ",", "\n", "epsilon", ",", "type_of_epsilon_exp", ")", "\n", "replay_memory", ".", "append", "(", "(", "state", ",", "action", ",", "reward", ",", "next_state", ")", ")", "\n", "return", "next_state", ",", "reward", ",", "action", ",", "action_type", "\n", "\n"]], "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.None.dqn_learning.env_state_mask": [[149, 154], ["None"], "function", ["None"], ["", "def", "env_state_mask", "(", "env_step_return_tuple", ")", ":", "\n", "# loc_list = list(env_step_return_tuple)", "\n", "# loc_list[0] = loc_list[0][0:action_space[0], ]", "\n", "# return tuple(loc_list)", "\n", "    ", "return", "env_step_return_tuple", "\n", "\n"]], "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.None.dqn_learning.main": [[155, 300], ["time.time", "print", "print", "model.summary", "range", "print", "tensorflow.keras.models.clone_model", "keras.models.clone_model.set_weights", "range", "print", "range", "print", "model.set_weights", "str", "dqn_learning.save_model", "print", "env.reset().to_numpy", "time.time", "range", "train_rewards.append", "train_episodes_actions_average.append", "print", "train_loss.append", "print", "sum", "len", "env.reset().to_numpy", "range", "test_rewards.append", "print", "sum", "len", "env.reset().to_numpy", "range", "test_last_model_rewards.append", "print", "sum", "len", "max", "dqn_learning.play_one_step_and_collect_memory", "obs.to_numpy.to_numpy", "model.get_weights", "dqn_learning.epsilon_greedy_policy", "state.to_numpy.to_numpy", "dqn_learning.epsilon_greedy_policy", "state.to_numpy.to_numpy", "time.time", "env.reset", "dqn_learning.training_step", "print", "target_model.set_weights", "env.reset", "env.reset", "model.get_weights", "time.time"], "function", ["home.repos.pwc.inspect_result.kzbikowski_ProcessGym.None.dqn_learning.save_model", "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.None.dqn_learning.play_one_step_and_collect_memory", "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.None.dqn_learning.epsilon_greedy_policy", "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.None.dqn_learning.epsilon_greedy_policy", "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Simulation.reset", "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.None.dqn_learning.training_step", "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Simulation.reset", "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Simulation.reset"], ["", "def", "main", "(", ")", ":", "\n", "\n", "    ", "train_rewards", "=", "[", "]", "\n", "train_loss", "=", "[", "]", "\n", "train_episodes_actions_average", "=", "[", "]", "\n", "nmb_of_train_episodes", "=", "600", "\n", "nmb_of_test_episodes", "=", "100", "\n", "nmb_of_iterations_per_episode", "=", "400", "\n", "nmb_of_episodes_before_training", "=", "50", "\n", "type_of_epsilon_exp", "=", "\"random\"", "\n", "# 1 - epsilon decreases to 0.1 over nmb_of_train_episodes", "\n", "# 0.5 - epsilon decreases to 0.1 over nmb_of_train_episodes * 0.5 etc.", "\n", "epsilon_decreasing_factor", "=", "0.09", "\n", "nmb_of_episodes_for_e_to_anneal", "=", "nmb_of_train_episodes", "*", "epsilon_decreasing_factor", "\n", "\n", "results", "=", "{", "}", "\n", "\n", "start_time_all", "=", "time", ".", "time", "(", ")", "\n", "\n", "print", "(", "\"Action-space: {}\"", ".", "format", "(", "env", ".", "action_space", ")", ")", "\n", "print", "(", "\"Number of inputs: {} and outputs: {}\"", ".", "format", "(", "nmb_of_inputs", ",", "nmb_of_outputs", ")", ")", "\n", "\n", "model", ".", "summary", "(", ")", "\n", "\n", "best_episode_reward_sum", "=", "0", "\n", "\n", "for", "episode_nmb", "in", "range", "(", "nmb_of_train_episodes", ")", ":", "\n", "        ", "obs", "=", "env", ".", "reset", "(", ")", ".", "to_numpy", "(", ")", "\n", "train_episode_reward_sum", "=", "0", "\n", "train_episode_action_sum", "=", "0", "\n", "global", "q_values_mean", "\n", "global", "q_values_counter", "\n", "q_values_mean", "=", "0", "\n", "q_values_counter", "=", "0.0001", "\n", "train_episode_model_actions_count", "=", "{", "}", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "episode_loss", "=", "0", "\n", "for", "step", "in", "range", "(", "nmb_of_iterations_per_episode", ")", ":", "\n", "            ", "epsilon", "=", "max", "(", "1", "-", "episode_nmb", "/", "nmb_of_episodes_for_e_to_anneal", ",", "0.1", ")", "\n", "obs", ",", "reward", ",", "action", ",", "action_type", "=", "play_one_step_and_collect_memory", "(", "env", ",", "obs", ",", "epsilon", ",", "type_of_epsilon_exp", ")", "\n", "\n", "obs", "=", "obs", ".", "to_numpy", "(", ")", "\n", "if", "episode_nmb", ">", "nmb_of_episodes_before_training", ":", "\n", "                ", "episode_loss", "+=", "training_step", "(", "batch_size", ")", "\n", "", "if", "episode_nmb", ">", "nmb_of_episodes_before_training", "and", "(", "episode_nmb", "*", "nmb_of_iterations_per_episode", "+", "step", ")", "%", "10000", "==", "0", ":", "\n", "                ", "print", "(", "\"target_model.set_weights(model.get_weights())\"", ")", "\n", "target_model", ".", "set_weights", "(", "model", ".", "get_weights", "(", ")", ")", "\n", "\n", "# statistics", "\n", "", "if", "action_type", "==", "\"q\"", ":", "\n", "                ", "if", "action", "in", "train_episode_model_actions_count", ":", "\n", "                    ", "train_episode_model_actions_count", "[", "action", "]", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "train_episode_model_actions_count", "[", "action", "]", "=", "1", "\n", "", "", "train_episode_reward_sum", "+=", "reward", "\n", "train_episode_action_sum", "+=", "action", "\n", "\n", "", "train_rewards", ".", "append", "(", "train_episode_reward_sum", ")", "\n", "train_episode_action_average", "=", "train_episode_action_sum", "/", "nmb_of_iterations_per_episode", "\n", "train_episodes_actions_average", ".", "append", "(", "train_episode_action_average", ")", "\n", "if", "best_episode_reward_sum", "<", "train_episode_reward_sum", "and", "episode_nmb", ">", "nmb_of_episodes_for_e_to_anneal", ":", "\n", "            ", "best_weights", "=", "model", ".", "get_weights", "(", ")", "\n", "best_episode_reward_sum", "=", "train_episode_reward_sum", "\n", "\n", "results", "[", "\"best_train_episode_reward_sum\"", "]", "=", "train_episode_reward_sum", "\n", "results", "[", "\"best_train_episode_reward_sum_episode_nmb\"", "]", "=", "episode_nmb", "\n", "", "print", "(", "\"Episode: {}, loss: {}, rewards: {}, q_value_mean: {} actions: {} eps: {:.3f} time: {}\"", ".", "format", "(", "episode_nmb", ",", "\n", "episode_loss", "/", "nmb_of_iterations_per_episode", ",", "\n", "train_episode_reward_sum", ",", "\n", "q_values_mean", "/", "q_values_counter", ",", "\n", "train_episode_action_average", ",", "\n", "epsilon", ",", "\n", "time", ".", "time", "(", ")", "-", "start_time", ")", ",", "end", "=", "\"\\n\"", ")", "\n", "train_loss", ".", "append", "(", "episode_loss", "/", "nmb_of_iterations_per_episode", ")", "\n", "print", "(", "train_episode_model_actions_count", ",", "end", "=", "\"\\n\"", ")", "\n", "\n", "", "train_avg_rewards", "=", "sum", "(", "train_rewards", ")", "/", "len", "(", "train_rewards", ")", "\n", "\n", "print", "(", "\"average sum for training is: {}\"", ".", "format", "(", "train_avg_rewards", ")", ")", "\n", "\n", "### TEST for best model", "\n", "best_score_model", "=", "keras", ".", "models", ".", "clone_model", "(", "model", ")", "\n", "best_score_model", ".", "set_weights", "(", "best_weights", ")", "\n", "test_rewards", "=", "[", "]", "\n", "for", "e", "in", "range", "(", "nmb_of_test_episodes", ")", ":", "\n", "        ", "state", "=", "env", ".", "reset", "(", ")", ".", "to_numpy", "(", ")", "\n", "test_episode_reward_sum", "=", "0", "\n", "for", "step", "in", "range", "(", "nmb_of_iterations_per_episode", ")", ":", "\n", "            ", "state", ",", "reward", ",", "action", ",", "action_type", "=", "epsilon_greedy_policy", "(", "best_score_model", ",", "env", ",", "state", ",", "action_space", "[", "1", "]", ")", "\n", "state", "=", "state", ".", "to_numpy", "(", ")", "\n", "test_episode_reward_sum", "+=", "reward", "\n", "", "test_rewards", ".", "append", "(", "test_episode_reward_sum", ")", "\n", "print", "(", "\"Episode test for best: {}, rewards: {}, eps: {:.3f}\"", ".", "format", "(", "e", ",", "test_episode_reward_sum", ",", "epsilon", ")", ",", "end", "=", "\"\\n\"", ")", "\n", "\n", "", "test_best_avg_rewards", "=", "sum", "(", "test_rewards", ")", "/", "len", "(", "test_rewards", ")", "\n", "\n", "print", "(", "\"Average reward on BEST from best model on 100 runs {}\"", ".", "format", "(", "test_best_avg_rewards", ")", ")", "\n", "\n", "### Test for last model", "\n", "test_last_model_rewards", "=", "[", "]", "\n", "\n", "for", "e", "in", "range", "(", "nmb_of_test_episodes", ")", ":", "\n", "        ", "state", "=", "env", ".", "reset", "(", ")", ".", "to_numpy", "(", ")", "\n", "test_episode_reward_sum", "=", "0", "\n", "for", "step", "in", "range", "(", "nmb_of_iterations_per_episode", ")", ":", "\n", "            ", "state", ",", "reward", ",", "action", ",", "action_type", "=", "epsilon_greedy_policy", "(", "model", ",", "env", ",", "state", ",", "action_space", "[", "1", "]", ")", "\n", "state", "=", "state", ".", "to_numpy", "(", ")", "\n", "test_episode_reward_sum", "+=", "reward", "\n", "", "test_last_model_rewards", ".", "append", "(", "test_episode_reward_sum", ")", "\n", "print", "(", "\"Episode test for last: {}, rewards: {}, eps: {:.3f}\"", ".", "format", "(", "e", ",", "test_episode_reward_sum", ",", "epsilon", ")", ",", "end", "=", "\"\\n\"", ")", "\n", "\n", "", "test_last_model_avg_rewards", "=", "sum", "(", "test_last_model_rewards", ")", "/", "len", "(", "test_last_model_rewards", ")", "\n", "\n", "print", "(", "\"Average reward on final LAST MODEL from best model on 100 runs {}\"", ".", "format", "(", "test_last_model_avg_rewards", ")", ")", "\n", "\n", "model", ".", "set_weights", "(", "best_weights", ")", "\n", "\n", "results", "[", "'nmb_of_train_episodes'", "]", "=", "nmb_of_train_episodes", "\n", "results", "[", "'nmb_of_iterations_per_episode'", "]", "=", "nmb_of_iterations_per_episode", "\n", "results", "[", "'nmb_of_episodes_before_training'", "]", "=", "nmb_of_episodes_before_training", "\n", "results", "[", "'nmb_of_episodes_for_e_to_anneal'", "]", "=", "nmb_of_episodes_for_e_to_anneal", "\n", "results", "[", "'memory_length'", "]", "=", "memory_length", "\n", "results", "[", "'batch_size'", "]", "=", "batch_size", "\n", "results", "[", "'type_of_epsilon_exp'", "]", "=", "type_of_epsilon_exp", "\n", "results", "[", "'discount_rate'", "]", "=", "discount_rate", "\n", "results", "[", "'nmb_of_test_episodes'", "]", "=", "nmb_of_test_episodes", "\n", "results", "[", "'loss_function'", "]", "=", "loss_fn", ".", "__name__", "\n", "\n", "results", "[", "'action_space'", "]", "=", "str", "(", "env", ".", "action_space", ")", "\n", "\n", "results", "[", "'train_avg_reward'", "]", "=", "train_avg_rewards", "\n", "results", "[", "'test_last_model_avg_rewards'", "]", "=", "test_last_model_avg_rewards", "\n", "results", "[", "'test_best_avg_reward'", "]", "=", "test_best_avg_rewards", "\n", "\n", "results", "[", "'train_episodes_actions_average'", "]", "=", "train_episodes_actions_average", "\n", "\n", "results", "[", "'train_rewards'", "]", "=", "train_rewards", "\n", "results", "[", "'train_loss'", "]", "=", "train_loss", "\n", "results", "[", "'test_rewards'", "]", "=", "test_rewards", "\n", "results", "[", "'test_last_model_rewards'", "]", "=", "test_last_model_rewards", "\n", "\n", "save_model", "(", "best_score_model", ",", "model", ",", "results", ")", "\n", "\n", "print", "(", "\"Whole process took: {}\"", ",", "time", ".", "time", "(", ")", "-", "start_time_all", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.None.dqn_learning.save_model": [[301, 351], ["os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "best_score_model.save", "last_model.save", "best_score_model.save_weights", "last_model.save_weights", "matplotlib.figure", "matplotlib.plot", "matplotlib.ylim", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.savefig", "matplotlib.figure", "matplotlib.plot", "matplotlib.ylim", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.savefig", "matplotlib.figure", "matplotlib.plot", "matplotlib.ylim", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.savefig", "matplotlib.figure", "matplotlib.plot", "matplotlib.ylim", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.savefig", "shutil.copytree", "datetime.datetime.now().strftime", "open", "file.write", "open", "file.write", "open", "file.write", "json.dumps", "best_score_model.to_json", "last_model.to_json", "datetime.datetime.now"], "function", ["None"], ["", "def", "save_model", "(", "best_score_model", ",", "last_model", ",", "parameters_dict", ")", ":", "\n", "    ", "path", "=", "\"results_\"", "+", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y%m%d_%H_%M\"", ")", "\n", "os", ".", "makedirs", "(", "path", ")", "\n", "os", ".", "makedirs", "(", "path", "+", "\"/conf\"", ")", "\n", "os", ".", "makedirs", "(", "path", "+", "\"/json_models\"", ")", "\n", "os", ".", "makedirs", "(", "path", "+", "\"/weights\"", ")", "\n", "\n", "best_score_model", ".", "save", "(", "path", "+", "\"/best_model\"", ")", "\n", "last_model", ".", "save", "(", "path", "+", "\"/last_model\"", ")", "\n", "\n", "with", "open", "(", "path", "+", "'/report.txt'", ",", "'w'", ")", "as", "file", ":", "\n", "        ", "file", ".", "write", "(", "json", ".", "dumps", "(", "parameters_dict", ")", ")", "\n", "\n", "", "best_score_model", ".", "save_weights", "(", "path", "+", "'/weights/best_weights.h5'", ")", "\n", "last_model", ".", "save_weights", "(", "path", "+", "'/weights/last_weights.h5'", ")", "\n", "\n", "with", "open", "(", "path", "+", "'/json_models/model_json.json'", ",", "'w'", ")", "as", "file", ":", "\n", "        ", "file", ".", "write", "(", "best_score_model", ".", "to_json", "(", ")", ")", "\n", "", "with", "open", "(", "path", "+", "'/json_models/last_model_json.json'", ",", "'w'", ")", "as", "file", ":", "\n", "        ", "file", ".", "write", "(", "last_model", ".", "to_json", "(", ")", ")", "\n", "\n", "", "plt", ".", "figure", "(", "figsize", "=", "(", "8", ",", "4", ")", ")", "\n", "plt", ".", "plot", "(", "parameters_dict", "[", "'train_rewards'", "]", ")", "\n", "plt", ".", "ylim", "(", "ymin", "=", "0", ")", "\n", "plt", ".", "xlabel", "(", "\"Episode\"", ",", "fontsize", "=", "14", ")", "\n", "plt", ".", "ylabel", "(", "\"Sum of rewards\"", ",", "fontsize", "=", "14", ")", "\n", "plt", ".", "savefig", "(", "path", "+", "\"/dqn_rewards_plot_train.png\"", ",", "format", "=", "\"png\"", ",", "dpi", "=", "300", ")", "\n", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "8", ",", "4", ")", ")", "\n", "plt", ".", "plot", "(", "parameters_dict", "[", "'test_rewards'", "]", ")", "\n", "plt", ".", "ylim", "(", "ymin", "=", "0", ")", "\n", "plt", ".", "xlabel", "(", "\"Episode\"", ",", "fontsize", "=", "14", ")", "\n", "plt", ".", "ylabel", "(", "\"Sum of TEST rewards\"", ",", "fontsize", "=", "14", ")", "\n", "plt", ".", "savefig", "(", "path", "+", "\"/dqn_rewards_plot_test_best.png\"", ",", "format", "=", "\"png\"", ",", "dpi", "=", "300", ")", "\n", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "8", ",", "4", ")", ")", "\n", "plt", ".", "plot", "(", "parameters_dict", "[", "'test_last_model_rewards'", "]", ")", "\n", "plt", ".", "ylim", "(", "ymin", "=", "0", ")", "\n", "plt", ".", "xlabel", "(", "\"Episode\"", ",", "fontsize", "=", "14", ")", "\n", "plt", ".", "ylabel", "(", "\"Sum of LAST MODEL rewards\"", ",", "fontsize", "=", "14", ")", "\n", "plt", ".", "savefig", "(", "path", "+", "\"/dqn_rewards_plot_test_last.png\"", ",", "format", "=", "\"png\"", ",", "dpi", "=", "300", ")", "\n", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "8", ",", "4", ")", ")", "\n", "plt", ".", "plot", "(", "parameters_dict", "[", "'train_loss'", "]", ")", "\n", "plt", ".", "ylim", "(", "ymin", "=", "0", ")", "\n", "plt", ".", "xlabel", "(", "\"Episode\"", ",", "fontsize", "=", "14", ")", "\n", "plt", ".", "ylabel", "(", "\"Train loss\"", ",", "fontsize", "=", "14", ")", "\n", "plt", ".", "savefig", "(", "path", "+", "\"/dqn_rewards_plot_training_loss.png\"", ",", "format", "=", "\"png\"", ",", "dpi", "=", "300", ")", "\n", "\n", "shutil", ".", "copytree", "(", "'./conf'", ",", "path", "+", "\"/conf\"", ",", "dirs_exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.None.test.get_action_from_int": [[7, 21], ["math.floor"], "function", ["None"], ["def", "get_action_from_int", "(", "int_action_value", ",", "nmb_of_tasks", ")", ":", "\n", "    ", "\"\"\"\n    :param nmb_of_tasks: number of tasks\n    :param nmb_of_resources: number of resources\n    :param int_action_value: action value from the range NxM where N - nmb_of_resources, M - nmb_of_tasks\n    :return: [resource, task] Vector of length 2 of actions to be taken by the environment\n    \"\"\"", "\n", "if", "int_action_value", "==", "0", ":", "\n", "        ", "return", "[", "-", "1", ",", "-", "1", "]", "\n", "", "else", ":", "\n", "        ", "action_coded_value", "=", "int_action_value", "-", "1", "\n", "resource", "=", "math", ".", "floor", "(", "action_coded_value", "/", "nmb_of_tasks", ")", "\n", "task", "=", "action_coded_value", "%", "nmb_of_tasks", "\n", "return", "[", "resource", ",", "task", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.None.test.main": [[23, 50], ["simprocess.ProcessDataLoader", "simprocess.ProcessDataLoader.load_process_data", "simprocess.ProcessDataLoader.load_available_resources", "simprocess.ProcessDataLoader.load_process_case_probability", "simprocess.ProcessDataLoader.load_queue_capacity_modifier", "simprocess.Simulation", "range", "print", "time.time", "simprocess.Simulation.reset", "range", "print", "rewards.append", "simprocess.Simulation.step_fifo", "sum", "len", "time.time"], "function", ["home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.ProcessDataLoader.load_process_data", "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.ProcessDataLoader.load_available_resources", "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.ProcessDataLoader.load_process_case_probability", "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.ProcessDataLoader.load_queue_capacity_modifier", "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Simulation.reset", "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Simulation.step_fifo"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "loader", "=", "ProcessDataLoader", "(", "\"./conf/simulation_config.json\"", ",", "\"./conf/resource_eligibility.json\"", ")", "\n", "processes", "=", "loader", ".", "load_process_data", "(", ")", "\n", "available_resources", "=", "loader", ".", "load_available_resources", "(", ")", "\n", "process_case_probability", "=", "loader", ".", "load_process_case_probability", "(", ")", "\n", "queue_duration_limit", "=", "loader", ".", "load_queue_capacity_modifier", "(", ")", "\n", "simulation", "=", "Simulation", "(", "available_resources", ",", "processes", ",", "process_case_probability", ",", "1", ",", "queue_duration_limit", ",", "\"a2\"", ")", "\n", "action_space", "=", "simulation", ".", "action_space", "\n", "nmb_of_episodes", "=", "100", "\n", "nmb_of_steps_per_episode", "=", "1500", "\n", "\n", "\n", "rewards", "=", "[", "]", "\n", "for", "episode", "in", "range", "(", "nmb_of_episodes", ")", ":", "\n", "        ", "reward_sum", "=", "0", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "state", "=", "simulation", ".", "reset", "(", ")", "\n", "for", "step", "in", "range", "(", "nmb_of_steps_per_episode", ")", ":", "\n", "# action = np.random.randint(action_space[0] * action_space[1] + 1)", "\n", "# action = get_action_from_int(action, action_space[1])", "\n", "# next_state, reward = simulation.step(action)", "\n", "            ", "next_state", ",", "reward", ",", "action", "=", "simulation", ".", "step_fifo", "(", ")", "\n", "reward_sum", "+=", "reward", "\n", "", "print", "(", "\"Episode: {}, rewards: {}, time: {}\"", ".", "format", "(", "episode", ",", "reward_sum", ",", "time", ".", "time", "(", ")", "-", "start_time", ")", ",", "end", "=", "\"\\n\"", ")", "\n", "rewards", ".", "append", "(", "reward_sum", ")", "\n", "\n", "", "print", "(", "\"reward: {}\"", ".", "format", "(", "sum", "(", "rewards", ")", "/", "len", "(", "rewards", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.ProcessDataLoader.__init__": [[10, 15], ["open", "json.load", "open", "json.load"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "simulation_config_filename", ",", "resource_eligibility_filename", ")", ":", "\n", "        ", "with", "open", "(", "simulation_config_filename", ",", "\"r\"", ")", "as", "read_file", ":", "\n", "            ", "self", ".", "simulation_config_data", "=", "json", ".", "load", "(", "read_file", ")", "\n", "", "with", "open", "(", "resource_eligibility_filename", ",", "\"r\"", ")", "as", "read_file", ":", "\n", "            ", "self", ".", "resource_eligibility", "=", "json", ".", "load", "(", "read_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.ProcessDataLoader.load_config_file": [[16, 19], ["open", "json.load"], "methods", ["None"], ["", "", "def", "load_config_file", "(", "self", ",", "filename", ")", ":", "\n", "        ", "with", "open", "(", "filename", ",", "\"r\"", ")", "as", "read_file", ":", "\n", "            ", "self", ".", "simulation_config_data", "=", "json", ".", "load", "(", "read_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.ProcessDataLoader.load_resource_eligibility": [[20, 23], ["open", "json.load"], "methods", ["None"], ["", "", "def", "load_resource_eligibility", "(", "self", ",", "filename", ")", ":", "\n", "        ", "with", "open", "(", "filename", ",", "\"r\"", ")", "as", "read_file", ":", "\n", "            ", "self", ".", "simulation_config_data", "=", "json", ".", "load", "(", "read_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.ProcessDataLoader.load_max_time": [[24, 26], ["None"], "methods", ["None"], ["", "", "def", "load_max_time", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "simulation_config_data", "[", "\"max_simulation_time\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.ProcessDataLoader.load_available_resources": [[27, 29], ["None"], "methods", ["None"], ["", "def", "load_available_resources", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "simulation_config_data", "[", "\"available_resources\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.ProcessDataLoader.load_process_case_probability": [[30, 32], ["None"], "methods", ["None"], ["", "def", "load_process_case_probability", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "simulation_config_data", "[", "\"process_case_probability\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.ProcessDataLoader.load_queue_capacity_modifier": [[33, 35], ["None"], "methods", ["None"], ["", "def", "load_queue_capacity_modifier", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "simulation_config_data", "[", "\"queue_capacity_modifier\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.ProcessDataLoader.load_process_data": [[36, 43], ["open", "json.load", "processes.append", "simprocess.ProcessDataLoader.transform_data"], "methods", ["home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.ProcessDataLoader.transform_data"], ["", "def", "load_process_data", "(", "self", ")", ":", "\n", "        ", "processes", "=", "[", "]", "\n", "for", "process", "in", "self", ".", "simulation_config_data", "[", "\"loaded_processes\"", "]", ":", "\n", "            ", "with", "open", "(", "process", "[", "\"filename\"", "]", ",", "\"r\"", ")", "as", "read_file", ":", "\n", "                ", "data", "=", "json", ".", "load", "(", "read_file", ")", "\n", "processes", ".", "append", "(", "self", ".", "transform_data", "(", "data", ",", "process", "[", "\"frequency\"", "]", ",", "process", "[", "\"reward\"", "]", ")", ")", "\n", "", "", "return", "processes", "\n", "\n"]], "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.ProcessDataLoader.transform_data": [[44, 58], ["simprocess.Process", "simprocess.Task", "tasks.append", "simprocess.Transition", "simprocess.ProcessDataLoader._find_eligible_resources", "x.values"], "methods", ["home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.ProcessDataLoader._find_eligible_resources"], ["", "def", "transform_data", "(", "self", ",", "data", ",", "frequency", ",", "reward", ")", ":", "\n", "        ", "process_id", "=", "data", "[", "\"process_id\"", "]", "\n", "tasks", "=", "[", "]", "\n", "for", "task", "in", "data", "[", "\"tasks\"", "]", ":", "\n", "            ", "transitions", "=", "[", "Transition", "(", "*", "x", ".", "values", "(", ")", ")", "for", "x", "in", "task", "[", "\"transitions\"", "]", "]", "\n", "new_task", "=", "Task", "(", "task", "[", "\"id\"", "]", ",", "\n", "process_id", ",", "\n", "transitions", ",", "\n", "task", "[", "\"duration\"", "]", ",", "\n", "task", "[", "\"duration_SD\"", "]", ",", "\n", "self", ".", "_find_eligible_resources", "(", "task", ",", "process_id", ")", ",", "\n", "task", "[", "\"start\"", "]", ")", "\n", "tasks", ".", "append", "(", "new_task", ")", "\n", "", "return", "Process", "(", "process_id", ",", "tasks", ",", "frequency", ",", "reward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.ProcessDataLoader._find_eligible_resources": [[59, 65], ["None"], "methods", ["None"], ["", "def", "_find_eligible_resources", "(", "self", ",", "task", ",", "process_id", ")", ":", "\n", "        ", "for", "x", "in", "self", ".", "resource_eligibility", ":", "\n", "            ", "if", "x", "[", "\"process_id\"", "]", "==", "process_id", ":", "\n", "                ", "for", "y", "in", "x", "[", "\"resource_eligibility\"", "]", ":", "\n", "                    ", "if", "y", "[", "\"task_id\"", "]", "==", "task", "[", "\"id\"", "]", ":", "\n", "                        ", "return", "y", "[", "\"eligible_resources\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Transition.__init__": [[68, 71], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "task_id", ",", "probability", ")", ":", "\n", "        ", "self", ".", "task_id", "=", "task_id", "\n", "self", ".", "probability", "=", "probability", "\n", "\n"]], "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Transition.__repr__": [[72, 74], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "f\"Transition(task_id={self.task_id},probability={self.probability})\"", "\n", "\n"]], "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Process.__init__": [[77, 82], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "id", ",", "tasks", ",", "frequency", "=", "0", ",", "reward", "=", "0", ")", ":", "\n", "        ", "self", ".", "id", "=", "id", "\n", "self", ".", "frequency", "=", "frequency", "\n", "self", ".", "reward", "=", "reward", "\n", "self", ".", "tasks", "=", "tasks", "\n", "\n"]], "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Process.pick_next_task": [[83, 92], ["simprocess.Process.get_task_by_id", "simprocess.Process.initialize_duration", "random.choices", "tuple"], "methods", ["home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Process.get_task_by_id", "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Task.initialize_duration"], ["", "def", "pick_next_task", "(", "self", ",", "task", ")", ":", "\n", "        ", "if", "not", "task", ".", "transitions", ":", "\n", "            ", "return", "\n", "", "next_transition", "=", "random", ".", "choices", "(", "task", ".", "transitions", ",", "weights", "=", "tuple", "(", "x", ".", "probability", "for", "x", "in", "task", ".", "transitions", ")", ",", "k", "=", "1", ")", "[", "0", "]", "\n", "next_task", "=", "self", ".", "get_task_by_id", "(", "next_transition", ".", "task_id", ")", "\n", "next_task", ".", "initialize_duration", "(", ")", "\n", "next_task", ".", "start", "=", "False", "\n", "next_task", ".", "start_step", "=", "task", ".", "start_step", "\n", "return", "next_task", "\n", "\n"]], "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Process.get_task_by_id": [[93, 97], ["copy.copy"], "methods", ["None"], ["", "def", "get_task_by_id", "(", "self", ",", "task_id", ")", ":", "\n", "        ", "for", "task", "in", "self", ".", "tasks", ":", "\n", "            ", "if", "task", ".", "id", "==", "task_id", ":", "\n", "                ", "return", "copy", ".", "copy", "(", "task", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Process.initialize_process_case": [[98, 104], ["task.initialize_duration", "copy.copy"], "methods", ["home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Task.initialize_duration"], ["", "", "", "def", "initialize_process_case", "(", "self", ",", "step", ")", ":", "\n", "        ", "for", "task", "in", "self", ".", "tasks", ":", "\n", "            ", "if", "task", ".", "start", ":", "\n", "                ", "task", ".", "start_step", "=", "step", "\n", "task", ".", "initialize_duration", "(", ")", "\n", "return", "copy", ".", "copy", "(", "task", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Process.__repr__": [[105, 107], ["None"], "methods", ["None"], ["", "", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "f\"Process(id={self.id}, tasks={self.tasks}, frequency={self.frequency}, reward={self.reward})\"", "\n", "\n"]], "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Task.__init__": [[110, 121], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "id", ",", "process_id", ",", "transitions", ",", "duration_mean", ",", "duration_sd", ",", "eligible_resources", ",", "start", "=", "False", ")", ":", "\n", "        ", "self", ".", "id", "=", "id", "\n", "self", ".", "transitions", "=", "transitions", "\n", "self", ".", "duration_mean", "=", "duration_mean", "\n", "self", ".", "duration_sd", "=", "duration_sd", "\n", "self", ".", "eligible_resources", "=", "eligible_resources", "\n", "self", ".", "start", "=", "start", "\n", "self", ".", "process_id", "=", "process_id", "\n", "self", ".", "duration", "=", "None", "\n", "self", ".", "allocated_resource", "=", "None", "\n", "self", ".", "start_step", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Task.initialize_duration": [[122, 124], ["round", "scipy.stats.truncnorm.rvs"], "methods", ["None"], ["", "def", "initialize_duration", "(", "self", ")", ":", "\n", "        ", "self", ".", "duration", "=", "round", "(", "stats", ".", "truncnorm", ".", "rvs", "(", "-", "1", ",", "1", ",", "loc", "=", "self", ".", "duration_mean", ",", "scale", "=", "self", ".", "duration_sd", ",", "size", "=", "1", ")", "[", "0", "]", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Task.__repr__": [[125, 127], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "f\"Task(id={self.id}, process_id={self.process_id} transitions={self.transitions}, duration_mean={self.duration_mean}, duration_sd={self.duration_sd}, eligible_resources={self.eligible_resources}, start={self.start}) \"", "\n", "\n"]], "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Simulation.__init__": [[130, 157], ["list", "list", "sum", "sorted", "range", "len", "len", "list", "sorted", "simprocess.Simulation.resource_eligibility.extend", "random.choice", "simprocess.Simulation.enabled_tasks.append", "len", "random.choice.initialize_process_case", "list.append", "list.append", "str", "task.eligible_resources.keys"], "methods", ["home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Process.initialize_process_case"], ["    ", "def", "__init__", "(", "self", ",", "available_resources", ",", "processes", ",", "process_case_probability", ",", "num_of_initial_process_cases", ",", "queue_capacity_modifier", ",", "state_repr", ")", ":", "\n", "        ", "self", ".", "processes", "=", "processes", "\n", "self", ".", "processes_frequency", "=", "{", "x", ".", "id", ":", "x", ".", "frequency", "for", "x", "in", "processes", "}", "\n", "self", ".", "processes_rewards", "=", "{", "x", ".", "id", ":", "x", ".", "reward", "for", "x", "in", "processes", "}", "\n", "self", ".", "process_case_probability", "=", "process_case_probability", "\n", "self", ".", "enabled_tasks", "=", "[", "]", "\n", "self", ".", "current_tasks", "=", "[", "]", "\n", "self", ".", "resource_eligibility", "=", "[", "]", "\n", "self", ".", "state_repr", "=", "state_repr", "\n", "self", ".", "all_resources", "=", "list", "(", "available_resources", ")", "\n", "self", ".", "available_resources", "=", "list", "(", "available_resources", ")", "\n", "self", ".", "completed_counter", "=", "self", ".", "step_counter", "=", "0", "\n", "self", ".", "task_count", "=", "sum", "(", "len", "(", "process", ".", "tasks", ")", "for", "process", "in", "self", ".", "processes", ")", "\n", "self", ".", "action_space", "=", "[", "len", "(", "self", ".", "all_resources", ")", ",", "self", ".", "task_count", "]", "\n", "self", ".", "all_tasks", "=", "[", "task", "for", "process", "in", "self", ".", "processes", "for", "task", "in", "process", ".", "tasks", "]", "\n", "\n", "self", ".", "queue_capacity", "=", "queue_capacity_modifier", "*", "60", "*", "len", "(", "self", ".", "all_resources", ")", "\n", "\n", "for", "resource", "in", "sorted", "(", "self", ".", "all_resources", ")", ":", "\n", "            ", "temp", "=", "list", "(", ")", "\n", "for", "task", "in", "sorted", "(", "self", ".", "all_tasks", ",", "key", "=", "id", ")", ":", "\n", "                ", "temp", ".", "append", "(", "1", ")", "if", "str", "(", "resource", ")", "in", "task", ".", "eligible_resources", ".", "keys", "(", ")", "else", "temp", ".", "append", "(", "-", "1", ")", "\n", "", "self", ".", "resource_eligibility", ".", "extend", "(", "temp", ")", "\n", "\n", "", "for", "_", "in", "range", "(", "num_of_initial_process_cases", ")", ":", "\n", "            ", "process_choice", "=", "random", ".", "choice", "(", "self", ".", "processes", ")", "\n", "self", ".", "enabled_tasks", ".", "append", "(", "process_choice", ".", "initialize_process_case", "(", "self", ".", "step_counter", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Simulation.step": [[158, 174], ["next", "simprocess.Simulation._handle_completed_tasks", "simprocess.Simulation._pick_and_initialize_new_process_case", "filter", "simprocess.Simulation._assign_resource", "random.random", "simprocess.Simulation._number_of_enabled_tasks", "str", "next.eligible_resources.keys"], "methods", ["home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Simulation._handle_completed_tasks", "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Simulation._pick_and_initialize_new_process_case", "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Simulation._assign_resource", "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Simulation._number_of_enabled_tasks"], ["", "", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "reward", "=", "0", "\n", "[", "resource", ",", "task_id", "]", "=", "action", "\n", "is_enabled", "=", "False", "\n", "\n", "if", "random", ".", "random", "(", ")", "<", "self", ".", "process_case_probability", "and", "not", "self", ".", "_is_queue_full", ":", "\n", "            ", "self", ".", "_pick_and_initialize_new_process_case", "(", ")", "\n", "\n", "", "chosen_task", "=", "next", "(", "filter", "(", "lambda", "t", ":", "t", ".", "id", "==", "task_id", ",", "self", ".", "enabled_tasks", ")", ",", "None", ")", "\n", "if", "not", "action", "==", "[", "-", "1", ",", "-", "1", "]", ":", "\n", "            ", "is_enabled", "=", "(", "self", ".", "_number_of_enabled_tasks", "(", "task_id", ")", ">", "0", ")", "\n", "", "if", "is_enabled", "and", "(", "resource", "in", "self", ".", "available_resources", ")", "and", "(", "str", "(", "resource", ")", "in", "chosen_task", ".", "eligible_resources", ".", "keys", "(", ")", ")", ":", "\n", "            ", "reward", "=", "self", ".", "_assign_resource", "(", "chosen_task", ",", "resource", ")", "\n", "\n", "", "self", ".", "_handle_completed_tasks", "(", ")", "\n", "return", "self", ".", "state", ",", "reward", "\n", "\n"]], "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Simulation.step_fifo": [[175, 177], ["simprocess.Simulation._step_heuristic"], "methods", ["home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Simulation._step_heuristic"], ["", "def", "step_fifo", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_step_heuristic", "(", "\"fifo\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Simulation.step_spt": [[178, 180], ["simprocess.Simulation._step_heuristic"], "methods", ["home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Simulation._step_heuristic"], ["", "def", "step_spt", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_step_heuristic", "(", "\"spt\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Simulation.reset": [[181, 188], ["simprocess.Simulation.enabled_tasks.clear", "simprocess.Simulation.current_tasks.clear", "list"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "enabled_tasks", ".", "clear", "(", ")", "\n", "self", ".", "current_tasks", ".", "clear", "(", ")", "\n", "self", ".", "available_resources", "=", "list", "(", "self", ".", "all_resources", ")", "\n", "self", ".", "completed_counter", "=", "0", "\n", "self", ".", "step_counter", "=", "0", "\n", "return", "self", ".", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Simulation.state": [[189, 199], ["simprocess.Simulation._state_std", "simprocess.Simulation._state_a1", "simprocess.Simulation._state_a2", "simprocess.Simulation._state_a10"], "methods", ["home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Simulation._state_std", "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Simulation._state_a1", "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Simulation._state_a2", "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Simulation._state_a10"], ["", "@", "property", "\n", "def", "state", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "state_repr", "==", "\"std\"", ":", "\n", "            ", "return", "self", ".", "_state_std", "(", ")", "\n", "", "elif", "self", ".", "state_repr", "==", "\"a1\"", ":", "\n", "            ", "return", "self", ".", "_state_a1", "(", ")", "\n", "", "elif", "self", ".", "state_repr", "==", "\"a2\"", ":", "\n", "            ", "return", "self", ".", "_state_a2", "(", ")", "\n", "", "elif", "self", ".", "state_repr", "==", "\"a10\"", ":", "\n", "            ", "return", "self", ".", "_state_a10", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Simulation._state_std": [[200, 214], ["pandas.DataFrame", "range", "next", "str", "task.eligible_resources.keys"], "methods", ["None"], ["", "", "def", "_state_std", "(", "self", ")", ":", "\n", "        ", "state", "=", "pd", ".", "DataFrame", "(", "-", "1", ",", "index", "=", "self", ".", "all_resources", ",", "columns", "=", "range", "(", "0", ",", "self", ".", "task_count", ")", ")", "\n", "for", "task", "in", "self", ".", "current_tasks", ":", "\n", "            ", "state", ".", "loc", "[", "task", ".", "allocated_resource", ",", ":", "]", "=", "-", "1", "\n", "state", ".", "loc", "[", "task", ".", "allocated_resource", ",", "task", ".", "id", "]", "=", "1", "\n", "", "for", "resource", "in", "self", ".", "available_resources", ":", "\n", "            ", "for", "process", "in", "self", ".", "processes", ":", "\n", "                ", "for", "task", "in", "process", ".", "tasks", ":", "\n", "                    ", "if", "str", "(", "resource", ")", "in", "task", ".", "eligible_resources", ".", "keys", "(", ")", "and", "next", "(", "\n", "(", "x", "for", "x", "in", "self", ".", "enabled_tasks", "if", "x", ".", "id", "==", "task", ".", "id", ")", ",", "None", ")", ":", "\n", "                        ", "state", ".", "loc", "[", "resource", ",", "task", ".", "id", "]", "=", "0", "\n", "", "else", ":", "\n", "                        ", "state", ".", "loc", "[", "resource", ",", "task", ".", "id", "]", "=", "-", "1", "\n", "", "", "", "", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Simulation._state_a1": [[215, 224], ["len", "range", "pandas.Series", "len"], "methods", ["None"], ["", "def", "_state_a1", "(", "self", ")", ":", "\n", "        ", "num_of_resources", "=", "len", "(", "self", ".", "all_resources", ")", "\n", "state_resource_list", "=", "[", "-", "1", "]", "*", "num_of_resources", "\n", "state_task_list", "=", "[", "0", "]", "*", "self", ".", "task_count", "\n", "for", "task", "in", "self", ".", "current_tasks", ":", "\n", "            ", "state_resource_list", "[", "task", ".", "allocated_resource", "]", "=", "task", ".", "id", "\n", "", "for", "i", "in", "range", "(", "self", ".", "task_count", ")", ":", "\n", "            ", "state_task_list", "[", "i", "]", "=", "len", "(", "[", "x", "for", "x", "in", "self", ".", "enabled_tasks", "if", "x", ".", "id", "==", "i", "]", ")", "\n", "", "return", "pd", ".", "Series", "(", "state_resource_list", "+", "state_task_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Simulation._state_a2": [[225, 235], ["len", "range", "pandas.Series", "len"], "methods", ["None"], ["", "def", "_state_a2", "(", "self", ")", ":", "\n", "        ", "num_of_resources", "=", "len", "(", "self", ".", "all_resources", ")", "\n", "state_resource_list", "=", "[", "-", "1", "]", "*", "num_of_resources", "\n", "state_task_list", "=", "[", "0", "]", "*", "self", ".", "task_count", "\n", "state_eligibility_list", "=", "[", "]", "\n", "for", "task", "in", "self", ".", "current_tasks", ":", "\n", "            ", "state_resource_list", "[", "task", ".", "allocated_resource", "]", "=", "task", ".", "id", "\n", "", "for", "i", "in", "range", "(", "self", ".", "task_count", ")", ":", "\n", "            ", "state_task_list", "[", "i", "]", "=", "len", "(", "[", "x", "for", "x", "in", "self", ".", "enabled_tasks", "if", "x", ".", "id", "==", "i", "]", ")", "\n", "", "return", "pd", ".", "Series", "(", "state_resource_list", "+", "state_task_list", "+", "self", ".", "resource_eligibility", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Simulation._state_a10": [[236, 246], ["len", "range", "pandas.Series", "round", "len", "len"], "methods", ["None"], ["", "def", "_state_a10", "(", "self", ")", ":", "\n", "        ", "num_of_resources", "=", "len", "(", "self", ".", "all_resources", ")", "\n", "state_resource_list", "=", "[", "-", "1", "]", "*", "num_of_resources", "\n", "state_task_list", "=", "[", "0", "]", "*", "self", ".", "task_count", "\n", "for", "task", "in", "self", ".", "current_tasks", ":", "\n", "            ", "state_resource_list", "[", "task", ".", "allocated_resource", "]", "=", "task", ".", "id", "\n", "", "for", "i", "in", "range", "(", "self", ".", "task_count", ")", ":", "\n", "            ", "state_task_list", "[", "i", "]", "=", "round", "(", "len", "(", "[", "x", "for", "x", "in", "self", ".", "enabled_tasks", "if", "x", ".", "id", "==", "i", "]", ")", "/", "len", "(", "self", ".", "enabled_tasks", ")", ",", "\n", "4", ")", "if", "self", ".", "enabled_tasks", "else", "0", "\n", "", "return", "pd", ".", "Series", "(", "state_resource_list", "+", "state_task_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Simulation._step_heuristic": [[247, 277], ["simprocess.Simulation._handle_completed_tasks", "simprocess.Simulation._pick_and_initialize_new_process_case", "sorted", "random.random", "getattr", "str", "simprocess.Simulation._assign_resource"], "methods", ["home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Simulation._handle_completed_tasks", "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Simulation._pick_and_initialize_new_process_case", "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Simulation._assign_resource"], ["", "def", "_step_heuristic", "(", "self", ",", "heuristic_name", ")", ":", "\n", "            ", "sort_attr", "=", "\"\"", "\n", "if", "heuristic_name", "==", "\"fifo\"", ":", "\n", "                ", "sort_attr", "=", "\"start_step\"", "\n", "", "elif", "heuristic_name", "==", "\"spt\"", ":", "\n", "                ", "sort_attr", "=", "\"duration\"", "\n", "\n", "", "reward", "=", "0", "\n", "action", "=", "[", "]", "\n", "\n", "if", "random", ".", "random", "(", ")", "<", "self", ".", "process_case_probability", "and", "not", "self", ".", "_is_queue_full", ":", "\n", "                ", "self", ".", "_pick_and_initialize_new_process_case", "(", ")", "\n", "\n", "", "is_looping", "=", "True", "\n", "if", "self", ".", "enabled_tasks", ":", "\n", "                ", "for", "task", "in", "sorted", "(", "self", ".", "enabled_tasks", ",", "key", "=", "lambda", "x", ":", "getattr", "(", "x", ",", "sort_attr", ")", ")", ":", "\n", "                    ", "for", "resource", "in", "self", ".", "available_resources", ":", "\n", "                        ", "if", "str", "(", "resource", ")", "in", "task", ".", "eligible_resources", ":", "\n", "                            ", "action", "=", "[", "resource", ",", "task", ".", "id", "]", "\n", "reward", "=", "self", ".", "_assign_resource", "(", "task", ",", "resource", ")", "\n", "is_looping", "=", "False", "\n", "break", "\n", "", "", "if", "not", "is_looping", ":", "\n", "                        ", "break", "\n", "\n", "", "", "", "self", ".", "_handle_completed_tasks", "(", ")", "\n", "self", ".", "step_counter", "+=", "1", "\n", "if", "not", "action", ":", "\n", "                ", "action", "=", "[", "-", "1", ",", "-", "1", "]", "\n", "", "return", "self", ".", "state", ",", "reward", ",", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Simulation._pick_and_initialize_new_process_case": [[278, 281], ["simprocess.Simulation.enabled_tasks.append", "random.choices", "process_choice.initialize_process_case"], "methods", ["home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Process.initialize_process_case"], ["", "def", "_pick_and_initialize_new_process_case", "(", "self", ")", ":", "\n", "        ", "process_choice", "=", "random", ".", "choices", "(", "self", ".", "processes", ",", "[", "x", ".", "frequency", "for", "x", "in", "self", ".", "processes", "]", ",", "k", "=", "1", ")", "[", "0", "]", "\n", "self", ".", "enabled_tasks", ".", "append", "(", "process_choice", ".", "initialize_process_case", "(", "self", ".", "step_counter", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Simulation._handle_completed_tasks": [[282, 293], ["simprocess.Simulation.available_resources.append", "simprocess.Simulation.current_tasks.remove", "simprocess.Simulation._find_process_by_id", "simprocess.Simulation.enabled_tasks.append", "simprocess.Simulation.pick_next_task"], "methods", ["home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Simulation._find_process_by_id", "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Process.pick_next_task"], ["", "def", "_handle_completed_tasks", "(", "self", ")", ":", "\n", "        ", "for", "task", "in", "self", ".", "current_tasks", ":", "\n", "            ", "task", ".", "duration", "-=", "1", "\n", "if", "task", ".", "duration", "==", "0", ":", "\n", "                ", "self", ".", "available_resources", ".", "append", "(", "task", ".", "allocated_resource", ")", "\n", "if", "not", "task", ".", "transitions", ":", "\n", "                    ", "self", ".", "completed_counter", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "process", "=", "self", ".", "_find_process_by_id", "(", "task", ".", "process_id", ")", "\n", "self", ".", "enabled_tasks", ".", "append", "(", "process", ".", "pick_next_task", "(", "task", ")", ")", "\n", "", "self", ".", "current_tasks", ".", "remove", "(", "task", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Simulation._find_process_by_id": [[294, 298], ["None"], "methods", ["None"], ["", "", "", "def", "_find_process_by_id", "(", "self", ",", "id", ")", ":", "\n", "        ", "for", "process", "in", "self", ".", "processes", ":", "\n", "            ", "if", "process", ".", "id", "==", "id", ":", "\n", "                ", "return", "process", "\n", "\n"]], "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Simulation._assign_resource": [[299, 306], ["simprocess.Simulation.available_resources.remove", "simprocess.Simulation.enabled_tasks.remove", "round", "simprocess.Simulation.current_tasks.append", "str"], "methods", ["None"], ["", "", "", "def", "_assign_resource", "(", "self", ",", "task", ",", "resource", ")", ":", "\n", "        ", "self", ".", "available_resources", ".", "remove", "(", "resource", ")", "\n", "self", ".", "enabled_tasks", ".", "remove", "(", "task", ")", "\n", "task", ".", "allocated_resource", "=", "resource", "\n", "task", ".", "duration", "=", "round", "(", "task", ".", "duration", "*", "task", ".", "eligible_resources", "[", "str", "(", "resource", ")", "]", ")", "\n", "self", ".", "current_tasks", ".", "append", "(", "task", ")", "\n", "return", "self", ".", "processes_rewards", "[", "task", ".", "process_id", "]", "if", "not", "task", ".", "transitions", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Simulation._number_of_enabled_tasks": [[307, 309], ["len"], "methods", ["None"], ["", "def", "_number_of_enabled_tasks", "(", "self", ",", "task_id", ")", ":", "\n", "        ", "return", "self", ".", "state", ".", "iloc", "[", "len", "(", "self", ".", "all_resources", ")", "+", "task_id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kzbikowski_ProcessGym.simprocess.simprocess.Simulation._is_queue_full": [[310, 313], ["sum"], "methods", ["None"], ["", "@", "property", "\n", "def", "_is_queue_full", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "queue_capacity", "<=", "sum", "(", "[", "x", ".", "duration", "for", "x", "in", "self", ".", "enabled_tasks", "]", ")", "\n", "\n"]]}