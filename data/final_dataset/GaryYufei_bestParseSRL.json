{"home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.config.Config.add_config": [[7, 10], ["value_dict.items", "setattr"], "methods", ["None"], ["\t", "def", "add_config", "(", "self", ",", "value_dict", ")", ":", "\n", "\t\t", "for", "k", ",", "v", "in", "value_dict", ".", "items", "(", ")", ":", "\n", "\t\t\t", "setattr", "(", "self", ",", "k", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.config.Config.print_all_parameters": [[11, 19], ["vars", "print", "vars.items", "print", "print", "type", "type", "str"], "methods", ["None"], ["", "", "def", "print_all_parameters", "(", "self", ")", ":", "\n", "\t\t", "attrs", "=", "vars", "(", "self", ")", "\n", "print", "(", "\"---------------------------------\"", ")", "\n", "for", "k", ",", "v", "in", "attrs", ".", "items", "(", ")", ":", "\n", "\t\t\t", "if", "type", "(", "v", ")", "is", "dict", "or", "type", "(", "v", ")", ".", "__module__", "==", "np", ".", "__name__", ":", "\n", "\t\t\t\t", "continue", "\n", "", "print", "(", "\"%s : %s\"", "%", "(", "k", ",", "str", "(", "v", ")", ")", ")", "\n", "", "print", "(", "\"---------------------------------\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.config.Config.load_all_data_file": [[20, 38], ["io_utils.read_item_file", "io_utils.read_item_file", "io_utils.read_item_file", "io_utils.read_item_file", "io_utils.read_item_file", "io_utils.read_item_file", "io_utils.create_word_embedding", "len", "len", "len", "len", "len", "len", "len", "len", "io_utils.read_item_file"], "methods", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.read_item_file", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.read_item_file", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.read_item_file", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.read_item_file", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.read_item_file", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.read_item_file", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.create_word_embedding", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.read_item_file"], ["", "def", "load_all_data_file", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "tag_dict", "=", "read_item_file", "(", "self", ".", "tag_file", ",", "add_pad", "=", "False", ")", "\n", "self", ".", "char_dict", "=", "read_item_file", "(", "self", ".", "char_set_file", ",", "add_pad", "=", "False", ")", "\n", "self", ".", "pos_dict", "=", "read_item_file", "(", "self", ".", "pos_set_file", ",", "add_pad", "=", "False", ")", "\n", "self", ".", "span_label_dict", "=", "read_item_file", "(", "self", ".", "span_label_file", ",", "add_pad", "=", "False", ")", "if", "self", ".", "use_span_label", "else", "constraint_index_mapping", "\n", "self", ".", "relative_layer_dict", "=", "read_item_file", "(", "self", ".", "relative_layer_file", ",", "add_pad", "=", "False", ")", "\n", "self", ".", "ancestors_label_dict", "=", "read_item_file", "(", "self", ".", "ancestors_label_file", ",", "add_pad", "=", "False", ")", "\n", "self", ".", "dp_label_dict", "=", "read_item_file", "(", "self", ".", "dp_label_file", ",", "add_pad", "=", "False", ")", "\n", "self", ".", "word_embedding", ",", "self", ".", "word_dict", "=", "create_word_embedding", "(", "self", ".", "embedding_file", ",", "self", ".", "word_embeds_dim", ")", "\n", "\n", "self", ".", "nchars", "=", "len", "(", "self", ".", "char_dict", ")", "\n", "self", ".", "ntags", "=", "len", "(", "self", ".", "tag_dict", ")", "\n", "self", ".", "nwords", "=", "len", "(", "self", ".", "word_dict", ")", "\n", "self", ".", "npos", "=", "len", "(", "self", ".", "pos_dict", ")", "\n", "self", ".", "nspan", "=", "len", "(", "self", ".", "span_label_dict", ")", "\n", "self", ".", "n_rel_label", "=", "len", "(", "self", ".", "relative_layer_dict", ")", "\n", "self", ".", "n_ancestors_label", "=", "len", "(", "self", ".", "ancestors_label_dict", ")", "\n", "self", ".", "n_dp_label", "=", "len", "(", "self", ".", "dp_label_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.config.Config.read_dataset": [[39, 43], ["io_utils.DataReader", "io_utils.DataReader.load_data"], "methods", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.DataReader.load_data"], ["", "def", "read_dataset", "(", "self", ",", "srl", ",", "parse", ",", "dp", ",", "pred_parse", ",", "pred_dp", ",", "data_type", ")", ":", "\n", "\t\t", "data_set", "=", "DataReader", "(", "self", ",", "self", ".", "word_dict", ",", "self", ".", "tag_dict", ",", "self", ".", "char_dict", ",", "self", ".", "pos_dict", ",", "self", ".", "span_label_dict", ",", "self", ".", "relative_layer_dict", ",", "self", ".", "ancestors_label_dict", ",", "self", ".", "dp_label_dict", ",", "data_type", ")", "\n", "data_set", ".", "load_data", "(", "srl", ",", "parse", ",", "dp", ",", "pred_parse", ",", "pred_dp", ")", "\n", "return", "data_set", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.config.load_json": [[44, 48], ["open", "json.loads", "input_json.read"], "function", ["None"], ["", "", "def", "load_json", "(", "path", ")", ":", "\n", "\t", "with", "open", "(", "path", ")", "as", "input_json", ":", "\n", "\t\t", "_config", "=", "json", ".", "loads", "(", "input_json", ".", "read", "(", ")", ")", "\n", "", "return", "_config", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.config.make_config": [[49, 79], ["config.load_json", "config.Config", "config.load_json", "Config.add_config", "config.load_json", "load_json.items", "load_json.items", "Config.add_config", "type", "type", "data_info.items", "type", "v.items", "ValueError", "data_dict[].append", "str"], "function", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.config.load_json", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.config.load_json", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.config.Config.add_config", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.config.load_json", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.config.Config.add_config"], ["", "def", "make_config", "(", "config_path", ")", ":", "\n", "\t", "overall_config", "=", "load_json", "(", "config_path", ")", "\n", "config", "=", "Config", "(", ")", "\n", "\n", "model_config", "=", "load_json", "(", "overall_config", "[", "'model'", "]", ")", "\n", "\n", "config", ".", "add_config", "(", "model_config", ")", "\n", "data_dict", "=", "{", "}", "\n", "data_config", "=", "load_json", "(", "overall_config", "[", "'data'", "]", ")", "\n", "for", "k", ",", "v", "in", "data_config", ".", "items", "(", ")", ":", "\n", "\t\t", "if", "type", "(", "v", ")", "is", "str", ":", "\n", "\t\t\t", "data_dict", "[", "k", "]", "=", "v", "\n", "", "elif", "type", "(", "v", ")", "is", "list", ":", "\n", "\t\t\t", "for", "data_info", "in", "v", ":", "\n", "\t\t\t\t", "for", "sub_k", ",", "sub_v", "in", "data_info", ".", "items", "(", ")", ":", "\n", "\t\t\t\t\t", "key_info", "=", "k", "+", "\"_\"", "+", "sub_k", "\n", "if", "key_info", "not", "in", "data_dict", ":", "\n", "\t\t\t\t\t\t", "data_dict", "[", "key_info", "]", "=", "[", "]", "\n", "", "data_dict", "[", "key_info", "]", ".", "append", "(", "sub_v", ")", "\n", "", "", "", "elif", "type", "(", "v", ")", "is", "dict", ":", "\n", "\t\t\t", "for", "sub_k", ",", "sub_v", "in", "v", ".", "items", "(", ")", ":", "\n", "\t\t\t\t", "data_dict", "[", "k", "+", "\"_\"", "+", "sub_k", "]", "=", "sub_v", "\n", "", "", "else", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "'Invalid '", "+", "str", "(", "v", ")", ")", "\n", "", "", "for", "k", ",", "v", "in", "overall_config", ".", "items", "(", ")", ":", "\n", "\t\t", "if", "k", "in", "[", "'model'", ",", "'data'", "]", ":", "\n", "\t\t\t", "continue", "\n", "", "data_dict", "[", "k", "]", "=", "v", "\n", "", "config", ".", "add_config", "(", "data_dict", ")", "\n", "return", "config", "\n", "", ""]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.annotation.process_word": [[28, 45], ["w.replace.replace", "w.replace.replace", "w.replace.replace", "w.replace.replace", "w.replace.replace", "w.replace.replace", "w.replace.replace", "w.replace.replace", "w.replace.replace", "w.replace.replace", "w.replace.replace"], "function", ["None"], ["def", "process_word", "(", "token", ")", ":", "\n", "\t", "if", "token", "in", "[", "'-RRB-'", ",", "'-LRB-'", ",", "'-RCB-'", ",", "'-LCB-'", ",", "'&lt;'", ",", "'&gt;'", "]", ":", "\n", "\t\t", "w", "=", "token", "\n", "w", "=", "w", ".", "replace", "(", "'-RRB-'", ",", "')'", ")", "\n", "w", "=", "w", ".", "replace", "(", "'-LRB-'", ",", "'('", ")", "\n", "w", "=", "w", ".", "replace", "(", "'-RCB-'", ",", "')'", ")", "\n", "w", "=", "w", ".", "replace", "(", "'-LCB-'", ",", "'('", ")", "\n", "w", "=", "w", ".", "replace", "(", "'&lt;'", ",", "'<'", ")", "\n", "w", "=", "w", ".", "replace", "(", "'&gt;'", ",", "'>'", ")", "\n", "", "else", ":", "\n", "\t\t", "w", "=", "token", "\n", "w", "=", "w", ".", "replace", "(", "'{'", ",", "'('", ")", "\n", "w", "=", "w", ".", "replace", "(", "'}'", ",", "')'", ")", "\n", "w", "=", "w", ".", "replace", "(", "'\\\\'", ",", "''", ")", "\n", "w", "=", "w", ".", "replace", "(", "'\\/'", ",", "'/'", ")", "\n", "w", "=", "w", ".", "replace", "(", "'\\*'", ",", "'*'", ")", "\n", "", "return", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.annotation.read_srl_annotation": [[46, 56], ["open", "line.strip().split", "verb_idx_list.append", "sen_list.append", "tag_list.append", "annotation.process_word", "line.strip", "items[].split", "items[].split", "int", "items[].split"], "function", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.annotation.process_word"], ["", "def", "read_srl_annotation", "(", "file_name", ")", ":", "\n", "\t", "verb_idx_list", ",", "sen_list", ",", "tag_list", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "with", "open", "(", "file_name", ")", "as", "file_reader", ":", "\n", "\t\t", "for", "line", "in", "file_reader", ":", "\n", "\t\t\t", "items", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "verb_idx_list", ".", "append", "(", "[", "0", "]", "+", "[", "int", "(", "d", ")", "for", "d", "in", "items", "[", "0", "]", ".", "split", "(", ")", "]", ")", "\n", "sen", "=", "[", "process_word", "(", "w", ")", "for", "w", "in", "items", "[", "1", "]", ".", "split", "(", ")", "]", "\n", "sen_list", ".", "append", "(", "[", "ROOT", "]", "+", "sen", ")", "\n", "tag_list", ".", "append", "(", "[", "'O'", "]", "+", "items", "[", "2", "]", ".", "split", "(", ")", ")", "\n", "", "", "return", "verb_idx_list", ",", "sen_list", ",", "tag_list", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.annotation.read_dp_annotation": [[57, 74], ["open", "line.strip.strip", "len", "line.strip.split", "annotation.process_word", "words.append", "heads.append", "g_label.append", "int"], "function", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.annotation.process_word"], ["", "def", "read_dp_annotation", "(", "file_name", ")", ":", "\n", "\t", "mapping", "=", "{", "}", "\n", "with", "open", "(", "file_name", ")", "as", "dp", ":", "\n", "\t\t", "words", ",", "heads", ",", "g_label", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "line", "in", "dp", ":", "\n", "\t\t\t", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "len", "(", "line", ")", "==", "0", ":", "\n", "\t\t\t\t", "mapping", "[", "' '", ".", "join", "(", "words", ")", "]", "=", "(", "heads", ",", "g_label", ")", "\n", "words", ",", "heads", ",", "g_label", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "", "else", ":", "\n", "\t\t\t\t", "items", "=", "line", ".", "split", "(", ")", "\n", "w", "=", "process_word", "(", "items", "[", "1", "]", ")", "\n", "words", ".", "append", "(", "w", ")", "\n", "heads", ".", "append", "(", "int", "(", "items", "[", "6", "]", ")", ")", "\n", "g_label", ".", "append", "(", "items", "[", "7", "]", ")", "\n", "\n", "", "", "", "return", "mapping", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.annotation.clip_value": [[75, 82], ["None"], "function", ["None"], ["", "def", "clip_value", "(", "value_to_clip", ",", "_max", "=", "RELATIVE_POSITION_RANGE", "-", "1", ",", "_min", "=", "-", "1", "*", "RELATIVE_POSITION_RANGE", ")", ":", "\n", "\t", "if", "value_to_clip", ">", "_max", ":", "\n", "\t\t", "value_to_clip", "=", "_max", "\n", "", "elif", "value_to_clip", "<", "_min", ":", "\n", "\t\t", "value_to_clip", "=", "_min", "\n", "", "value_to_clip", "-=", "_min", "\n", "return", "value_to_clip", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.annotation.extract_dependency_feature": [[83, 121], ["range", "annotation.clip_value", "annotation.clip_value", "annotation.clip_value", "range", "reversed", "len", "list", "range", "len"], "function", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.annotation.clip_value", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.annotation.clip_value", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.annotation.clip_value"], ["", "def", "extract_dependency_feature", "(", "predicate_index", ",", "word_index", ",", "parent_list", ")", ":", "\n", "\t", "left_children_num", "=", "0", "\n", "right_children_num", "=", "0", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "parent_list", ")", ")", ":", "\n", "\t\t", "if", "parent_list", "[", "i", "]", "==", "word_index", ":", "\n", "\t\t\t", "if", "i", "<", "word_index", ":", "\n", "\t\t\t\t", "left_children_num", "+=", "1", "\n", "", "elif", "i", ">", "word_index", ":", "\n", "\t\t\t\t", "right_children_num", "+=", "1", "\n", "\n", "", "", "", "left_children_num", "=", "clip_value", "(", "left_children_num", ")", "\n", "right_children_num", "=", "clip_value", "(", "right_children_num", ")", "\n", "relative_governor_position", "=", "clip_value", "(", "parent_list", "[", "word_index", "]", "-", "word_index", ")", "\n", "has_predicate_as_parent", "=", "1", "if", "parent_list", "[", "word_index", "]", "==", "predicate_index", "else", "0", "\n", "\n", "# left most child?", "\n", "left_most_children", "=", "True", "\n", "for", "i", "in", "range", "(", "0", ",", "word_index", ")", ":", "\n", "\t\t", "if", "parent_list", "[", "i", "]", "==", "parent_list", "[", "word_index", "]", ":", "\n", "\t\t\t", "left_most_children", "=", "False", "\n", "\n", "# right most child?", "\n", "", "", "right_most_children", "=", "True", "\n", "for", "i", "in", "reversed", "(", "list", "(", "range", "(", "word_index", "+", "1", ",", "len", "(", "parent_list", ")", ")", ")", ")", ":", "\n", "\t\t", "if", "parent_list", "[", "i", "]", "==", "parent_list", "[", "word_index", "]", ":", "\n", "\t\t\t", "right_most_children", "=", "False", "\n", "\n", "", "", "child_type", "=", "0", "\n", "if", "left_most_children", ":", "\n", "\t\t", "child_type", "=", "1", "\n", "", "elif", "right_most_children", ":", "\n", "\t\t", "child_type", "=", "2", "\n", "\n", "", "assert", "left_children_num", ">=", "0", "and", "left_children_num", "<", "RELATIVE_POSITION_RANGE", "*", "2", ",", "\"%d is not good left children num\"", "%", "left_children_num", "\n", "assert", "right_children_num", ">=", "0", "and", "right_children_num", "<", "RELATIVE_POSITION_RANGE", "*", "2", ",", "\"%d is not good right children num\"", "%", "left_children_num", "\n", "assert", "relative_governor_position", ">=", "0", "and", "relative_governor_position", "<", "RELATIVE_POSITION_RANGE", "*", "2", ",", "\"%d is not good relative gov position\"", "%", "relative_governor_position", "\n", "\n", "return", "left_children_num", ",", "right_children_num", ",", "relative_governor_position", ",", "has_predicate_as_parent", ",", "child_type", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.annotation.old_extract_dependency_feature": [[122, 160], ["range", "reversed", "list", "range", "len"], "function", ["None"], ["", "def", "old_extract_dependency_feature", "(", "predicate_index", ",", "word_index", ",", "parent_list", ")", ":", "\n", "# left most child?", "\n", "\t", "left_most_children", "=", "True", "\n", "has_left_children", "=", "False", "\n", "for", "i", "in", "range", "(", "0", ",", "word_index", ")", ":", "\n", "\t\t", "if", "parent_list", "[", "i", "]", "==", "parent_list", "[", "word_index", "]", ":", "\n", "\t\t\t", "left_most_children", "=", "False", "\n", "\n", "", "if", "parent_list", "[", "i", "]", "==", "word_index", ":", "\n", "\t\t\t", "has_left_children", "=", "True", "\n", "\n", "# right most child?", "\n", "", "", "right_most_children", "=", "True", "\n", "has_right_children", "=", "False", "\n", "for", "i", "in", "reversed", "(", "list", "(", "range", "(", "word_index", "+", "1", ",", "len", "(", "parent_list", ")", ")", ")", ")", ":", "\n", "\t\t", "if", "parent_list", "[", "i", "]", "==", "parent_list", "[", "word_index", "]", ":", "\n", "\t\t\t", "right_most_children", "=", "False", "\n", "\n", "", "if", "parent_list", "[", "i", "]", "==", "word_index", ":", "\n", "\t\t\t", "has_right_children", "=", "True", "\n", "\n", "", "", "has_predicate_as_parent", "=", "1", "if", "parent_list", "[", "word_index", "]", "==", "predicate_index", "else", "0", "\n", "\n", "child_type", "=", "0", "\n", "if", "left_most_children", ":", "\n", "\t\t", "child_type", "=", "1", "\n", "", "elif", "right_most_children", ":", "\n", "\t\t", "child_type", "=", "2", "\n", "\n", "", "parent_type", "=", "0", "\n", "if", "has_left_children", "and", "has_right_children", ":", "\n", "\t\t", "parent_type", "=", "1", "\n", "", "elif", "has_right_children", ":", "\n", "\t\t", "parent_type", "=", "2", "\n", "", "elif", "has_left_children", ":", "\n", "\t\t", "parent_type", "=", "3", "\n", "\n", "", "return", "has_predicate_as_parent", ",", "child_type", ",", "parent_type", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.annotation.get_child_absolution_position": [[161, 165], ["tree.treepositions", "tree.treeposition"], "function", ["None"], ["", "def", "get_child_absolution_position", "(", "tree", ")", ":", "\n", "\t", "childpos", "=", "tree", ".", "treepositions", "(", "\"leaves\"", ")", "\n", "tree_pos", "=", "tree", ".", "treeposition", "(", ")", "\n", "return", "[", "tree_pos", "+", "p", "[", ":", "-", "1", "]", "for", "p", "in", "childpos", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.annotation.get_constrain_seq": [[166, 233], ["tree.treepositions", "len", "tree.root", "current_node.parent.right_sibling", "current_node.parent.left_sibling", "current_node.parent.parent", "tree.subtrees", "right_sibling.right_sibling.right_sibling", "left_sibling.left_sibling.left_sibling", "right_sibling.right_sibling.right_sibling", "right_sibling.right_sibling.label().startswith", "left_sibling.left_sibling.left_sibling", "left_sibling.left_sibling.label().startswith", "right_sibling.right_sibling.right_sibling", "right_sibling.right_sibling.label", "right_sibling.right_sibling.right_sibling().label", "current_node.parent.label", "right_sibling.right_sibling.label", "annotation.get_child_absolution_position", "enumerate", "annotation.get_child_absolution_position", "enumerate", "left_sibling.left_sibling.left_sibling", "left_sibling.left_sibling.label", "left_sibling.left_sibling.left_sibling().label", "current_node.parent.label", "left_sibling.left_sibling.label", "annotation.get_child_absolution_position", "enumerate", "annotation.get_child_absolution_position", "enumerate", "t.height", "right_sibling.right_sibling.label", "right_sibling.right_sibling.label", "left_sibling.left_sibling.label", "left_sibling.left_sibling.label", "right_sibling.right_sibling.right_sibling", "range", "right_sibling.right_sibling.height", "range", "left_sibling.left_sibling.left_sibling", "range", "left_sibling.left_sibling.height", "range", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.annotation.get_child_absolution_position", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.annotation.get_child_absolution_position", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.annotation.get_child_absolution_position", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.annotation.get_child_absolution_position"], ["", "def", "get_constrain_seq", "(", "tree", ",", "predicate_index", ")", ":", "\n", "\t", "list_subtree", "=", "[", "ch", "for", "ch", "in", "tree", ".", "subtrees", "(", "lambda", "t", ":", "t", ".", "height", "(", ")", "==", "2", ")", "]", "\n", "predicate", "=", "list_subtree", "[", "predicate_index", "]", "\n", "leaves_list", "=", "tree", ".", "treepositions", "(", "'leaves'", ")", "\n", "bio_ann", "=", "[", "'O'", "]", "*", "len", "(", "leaves_list", ")", "\n", "current_node", "=", "predicate", "\n", "while", "current_node", "is", "not", "tree", ".", "root", "(", ")", ":", "\n", "\t\t", "right_sibling", "=", "current_node", ".", "right_sibling", "(", ")", "\n", "while", "right_sibling", "is", "not", "None", ":", "\n", "\t\t\t", "add", "=", "True", "\n", "conj", "=", "right_sibling", ".", "right_sibling", "(", ")", "is", "not", "None", "and", "right_sibling", ".", "label", "(", ")", "==", "'CC'", "and", "right_sibling", ".", "right_sibling", "(", ")", ".", "label", "(", ")", "==", "current_node", ".", "label", "(", ")", "\n", "if", "conj", ":", "\n", "\t\t\t\t", "right_sibling", "=", "right_sibling", ".", "right_sibling", "(", ")", "\n", "add", "=", "False", "\n", "", "elif", "right_sibling", ".", "label", "(", ")", "in", "list_for_punctuation", ":", "\n", "\t\t\t\t", "add", "=", "False", "\n", "\n", "", "if", "add", ":", "\n", "\t\t\t\t", "if", "right_sibling", ".", "label", "(", ")", ".", "startswith", "(", "'PP'", ")", ":", "\n", "\t\t\t\t\t", "candidate", "=", "get_child_absolution_position", "(", "right_sibling", ")", "\n", "for", "j", ",", "tree_position", "in", "enumerate", "(", "leaves_list", ")", ":", "\n", "\t\t\t\t\t\t", "if", "tree_position", "[", ":", "-", "1", "]", "==", "candidate", "[", "0", "]", ":", "\n", "\t\t\t\t\t\t\t", "for", "x", "in", "range", "(", "j", ",", "j", "+", "len", "(", "candidate", ")", ")", ":", "\n", "\t\t\t\t\t\t\t\t", "bio_ann", "[", "x", "]", "=", "'R-PP'", "\n", "", "break", "\n", "", "", "", "else", ":", "\n", "\t\t\t\t\t", "l", "=", "right_sibling", ".", "label", "(", ")", "if", "right_sibling", ".", "height", "(", ")", ">", "2", "else", "'POS'", "\n", "candidate", "=", "get_child_absolution_position", "(", "right_sibling", ")", "\n", "for", "j", ",", "tree_position", "in", "enumerate", "(", "leaves_list", ")", ":", "\n", "\t\t\t\t\t\t", "if", "tree_position", "[", ":", "-", "1", "]", "==", "candidate", "[", "0", "]", ":", "\n", "\t\t\t\t\t\t\t", "bio_ann", "[", "j", "]", "=", "'B-%s'", "%", "l", "\n", "for", "x", "in", "range", "(", "j", "+", "1", ",", "j", "+", "len", "(", "candidate", ")", ")", ":", "\n", "\t\t\t\t\t\t\t\t", "bio_ann", "[", "x", "]", "=", "'I-%s'", "%", "l", "\n", "", "break", "\n", "", "", "", "", "right_sibling", "=", "right_sibling", ".", "right_sibling", "(", ")", "\n", "\n", "", "left_sibling", "=", "current_node", ".", "left_sibling", "(", ")", "\n", "while", "left_sibling", "is", "not", "None", ":", "\n", "\t\t\t", "add", "=", "True", "\n", "conj", "=", "left_sibling", ".", "left_sibling", "(", ")", "is", "not", "None", "and", "left_sibling", ".", "label", "(", ")", "==", "'CC'", "and", "left_sibling", ".", "left_sibling", "(", ")", ".", "label", "(", ")", "==", "current_node", ".", "label", "(", ")", "\n", "if", "conj", ":", "\n", "\t\t\t\t", "left_sibling", "=", "left_sibling", ".", "left_sibling", "(", ")", "\n", "add", "=", "False", "\n", "", "elif", "left_sibling", ".", "label", "(", ")", "in", "list_for_punctuation", ":", "\n", "\t\t\t\t", "add", "=", "False", "\n", "\n", "", "if", "add", ":", "\n", "\t\t\t\t", "if", "left_sibling", ".", "label", "(", ")", ".", "startswith", "(", "'PP'", ")", ":", "\n", "\t\t\t\t\t", "candidate", "=", "get_child_absolution_position", "(", "left_sibling", ")", "\n", "for", "j", ",", "tree_position", "in", "enumerate", "(", "leaves_list", ")", ":", "\n", "\t\t\t\t\t\t", "if", "tree_position", "[", ":", "-", "1", "]", "==", "candidate", "[", "0", "]", ":", "\n", "\t\t\t\t\t\t\t", "for", "x", "in", "range", "(", "j", ",", "j", "+", "len", "(", "candidate", ")", ")", ":", "\n", "\t\t\t\t\t\t\t\t", "bio_ann", "[", "x", "]", "=", "'R-PP'", "\n", "", "break", "\n", "", "", "", "else", ":", "\n", "\t\t\t\t\t", "l", "=", "left_sibling", ".", "label", "(", ")", "if", "left_sibling", ".", "height", "(", ")", ">", "2", "else", "'POS'", "\n", "candidate", "=", "get_child_absolution_position", "(", "left_sibling", ")", "\n", "for", "j", ",", "tree_position", "in", "enumerate", "(", "leaves_list", ")", ":", "\n", "\t\t\t\t\t\t", "if", "tree_position", "[", ":", "-", "1", "]", "==", "candidate", "[", "0", "]", ":", "\n", "\t\t\t\t\t\t\t", "bio_ann", "[", "j", "]", "=", "'B-%s'", "%", "l", "\n", "for", "x", "in", "range", "(", "j", "+", "1", ",", "j", "+", "len", "(", "candidate", ")", ")", ":", "\n", "\t\t\t\t\t\t\t\t", "bio_ann", "[", "x", "]", "=", "'I-%s'", "%", "l", "\n", "", "break", "\n", "", "", "", "", "left_sibling", "=", "left_sibling", ".", "left_sibling", "(", ")", "\n", "", "current_node", "=", "current_node", ".", "parent", "(", ")", "\n", "\n", "", "return", "bio_ann", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.annotation.read_parse_annotation": [[234, 246], ["open", "line.strip.strip", "nltk.tree.ParentedTree.fromstring", "annotation.get_trans_tree", "annotation.get_tree_encode_feature", "annotation.process_word", "len", "ParentedTree.fromstring.leaves", "ParentedTree.fromstring.leaves"], "function", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.annotation.get_trans_tree", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.annotation.get_tree_encode_feature", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.annotation.process_word"], ["", "def", "read_parse_annotation", "(", "filename", ")", ":", "\n", "\t", "mapping", "=", "{", "}", "\n", "mapping_feature", "=", "{", "}", "\n", "with", "open", "(", "filename", ")", "as", "parse", ":", "\n", "\t\t", "for", "line", "in", "parse", ":", "\n", "\t\t\t", "line", "=", "line", ".", "strip", "(", ")", "\n", "ptree", "=", "ParentedTree", ".", "fromstring", "(", "line", ")", "\n", "text", "=", "' '", ".", "join", "(", "[", "process_word", "(", "t", ")", "for", "t", "in", "ptree", ".", "leaves", "(", ")", "]", ")", "\n", "trans_operation", "=", "get_trans_tree", "(", "line", ")", "if", "len", "(", "ptree", ".", "leaves", "(", ")", ")", ">", "1", "else", "[", "'['", "]", "\n", "mapping", "[", "text", "]", "=", "(", "ptree", ",", "get_tree_encode_feature", "(", "line", ")", ",", "trans_operation", ")", "\n", "\n", "", "", "return", "mapping", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.annotation.get_trans_tree": [[247, 252], ["tb.string_trees", "tb.prune", "lc.tree_labels"], "function", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.string_trees", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.prune", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.lc.tree_labels"], ["", "def", "get_trans_tree", "(", "tree_str", ")", ":", "\n", "\t", "tree", "=", "string_trees", "(", "tree_str", ")", "\n", "tree", "=", "prune", "(", "tree", "[", "0", "]", ",", "True", ",", "True", ",", "True", ",", "binlabelf", "=", "lambda", "_", ":", "'*'", ")", "\n", "labels", "=", "tree_labels", "(", "tree", ")", "\n", "return", "[", "l", "[", "0", "]", "for", "l", "in", "labels", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.annotation.get_tree_encode_feature": [[253, 269], ["tree.SeqTree.fromstring", "SeqTree.fromstring.set_encoding", "SeqTree.fromstring.to_maxincommon_sequence", "tree.RelativeLevelTreeEncoder", "tl.split", "len", "label.append", "relative_layer.append", "label.append", "relative_layer.append"], "function", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tree.SeqTree.set_encoding", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tree.RelativeLevelTreeEncoder.to_maxincommon_sequence"], ["", "def", "get_tree_encode_feature", "(", "tree_str", ")", ":", "\n", "\t", "tree", "=", "SeqTree", ".", "fromstring", "(", "tree_str", ",", "remove_empty_top_bracketing", "=", "True", ")", "\n", "tree", ".", "set_encoding", "(", "RelativeLevelTreeEncoder", "(", ")", ")", "\n", "tree_labels", "=", "tree", ".", "to_maxincommon_sequence", "(", "root_label", "=", "True", ",", "encode_unary_leaf", "=", "False", ")", "\n", "label", ",", "relative_layer", "=", "[", "]", ",", "[", "]", "\n", "current_height", "=", "0", "\n", "for", "tl", "in", "tree_labels", ":", "\n", "\t\t", "items", "=", "tl", ".", "split", "(", "'_'", ")", "\n", "if", "len", "(", "items", ")", "==", "2", ":", "\n", "\t\t\t", "label", ".", "append", "(", "items", "[", "1", "]", ")", "\n", "relative_layer", ".", "append", "(", "items", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "\t\t\t", "label", ".", "append", "(", "'NONE'", ")", "\n", "relative_layer", ".", "append", "(", "'NONE'", ")", "\n", "\n", "", "", "return", "label", ",", "relative_layer", "", "", ""]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.structure.viterbi_decode": [[3, 24], ["numpy.zeros_like", "numpy.zeros_like", "range", "reversed", "viterbi.reverse", "numpy.max", "numpy.argmax", "numpy.argmax", "viterbi.append", "numpy.expand_dims", "numpy.max"], "function", ["None"], ["def", "viterbi_decode", "(", "score", ",", "transition_params", ",", "trans_mask", ",", "unary_mask", ")", ":", "\n", "  ", "trellis", "=", "np", ".", "zeros_like", "(", "score", ")", "\n", "backpointers", "=", "np", ".", "zeros_like", "(", "score", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "trellis", "[", "0", "]", "=", "score", "[", "0", "]", "\n", "\n", "for", "t", "in", "range", "(", "1", ",", "score", ".", "shape", "[", "0", "]", ")", ":", "\n", "    ", "mask", "=", "(", "trans_mask", "[", "t", "]", "==", "1", ")", ".", "astype", "(", "float", ")", "\n", "masked_trans_params", "=", "transition_params", "*", "mask", "+", "(", "1", "-", "mask", ")", "*", "trans_mask", "[", "t", "]", "\n", "v", "=", "np", ".", "expand_dims", "(", "trellis", "[", "t", "-", "1", "]", ",", "1", ")", "+", "masked_trans_params", "\n", "mask", "=", "(", "unary_mask", "[", "t", "]", "==", "1", ")", ".", "astype", "(", "float", ")", "\n", "unary_score", "=", "score", "[", "t", "]", "*", "mask", "+", "(", "1", "-", "mask", ")", "*", "unary_mask", "[", "t", "]", "\n", "trellis", "[", "t", "]", "=", "unary_score", "+", "np", ".", "max", "(", "v", ",", "0", ")", "\n", "backpointers", "[", "t", "]", "=", "np", ".", "argmax", "(", "v", ",", "0", ")", "\n", "\n", "", "viterbi", "=", "[", "np", ".", "argmax", "(", "trellis", "[", "-", "1", "]", ")", "]", "\n", "for", "bp", "in", "reversed", "(", "backpointers", "[", "1", ":", "]", ")", ":", "\n", "    ", "viterbi", ".", "append", "(", "bp", "[", "viterbi", "[", "-", "1", "]", "]", ")", "\n", "", "viterbi", ".", "reverse", "(", ")", "\n", "\n", "viterbi_score", "=", "np", ".", "max", "(", "trellis", "[", "-", "1", "]", ")", "\n", "return", "viterbi", ",", "viterbi_score", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.structure.viterbi_decode_nbest": [[25, 64], ["list", "list", "score.reshape.reshape", "list.append", "enumerate", "nbest_scores_t_history[].reshape", "reversed", "viterbi.tolist.reverse", "numpy.concatenate", "viterbi.tolist.transpose", "viterbi.tolist.tolist", "transition_params.reshape", "numpy.tile", "nbest_scores_t.transpose.transpose", "cur_bp.transpose.transpose", "list.append", "list.append", "bp.reshape.reshape", "viterbi.tolist.append", "nbest_scores_t.transpose.reshape", "scores_t.reshape.reshape", "numpy.sort", "nbest_scores_t.transpose.reshape", "numpy.tile", "numpy.tile", "numpy.argsort", "numpy.argsort", "scores_t.reshape.reshape", "nbest_scores_t.transpose.reshape", "numpy.tile", "numpy.arange().reshape", "numpy.expand_dims", "numpy.arange"], "function", ["None"], ["", "def", "viterbi_decode_nbest", "(", "score", ",", "transition_params", ",", "nbest", "=", "3", ")", ":", "\n", "  ", "back_points", "=", "list", "(", ")", "\n", "nbest_scores_t_history", "=", "list", "(", ")", "\n", "\n", "(", "seq_len", ",", "tag_size", ")", "=", "score", ".", "shape", "\n", "score", "=", "score", ".", "reshape", "(", "seq_len", ",", "1", ",", "tag_size", ")", "\n", "trans_scores", "=", "score", "[", "1", ":", ",", ":", ",", ":", "]", "+", "transition_params", ".", "reshape", "(", "[", "1", ",", "tag_size", ",", "tag_size", "]", ")", "\n", "\n", "nbest_scores_t", "=", "score", "[", "0", "]", "\n", "nbest_scores_t_history", ".", "append", "(", "np", ".", "tile", "(", "nbest_scores_t", ".", "reshape", "(", "[", "tag_size", ",", "1", "]", ")", ",", "[", "1", ",", "nbest", "]", ")", ")", "\n", "\n", "for", "t", ",", "scores_t", "in", "enumerate", "(", "trans_scores", ")", ":", "\n", "    ", "if", "t", "==", "0", ":", "\n", "      ", "scores_t", "=", "scores_t", "+", "nbest_scores_t", ".", "reshape", "(", "[", "tag_size", ",", "1", "]", ")", "\n", "", "else", ":", "\n", "      ", "scores_t", "=", "np", ".", "tile", "(", "scores_t", ".", "reshape", "(", "[", "tag_size", ",", "1", ",", "tag_size", "]", ")", ",", "[", "1", ",", "nbest", ",", "1", "]", ")", "+", "np", ".", "tile", "(", "nbest_scores_t", ".", "reshape", "(", "[", "tag_size", ",", "nbest", ",", "1", "]", ")", ",", "[", "1", ",", "1", ",", "tag_size", "]", ")", "\n", "scores_t", "=", "scores_t", ".", "reshape", "(", "[", "tag_size", "*", "nbest", ",", "tag_size", "]", ")", "\n", "", "cur_bp", "=", "np", ".", "argsort", "(", "scores_t", ",", "axis", "=", "0", ")", "[", "-", "nbest", ":", "]", "[", ":", ":", "-", "1", ",", ":", "]", "\n", "nbest_scores_t", "=", "scores_t", "[", "cur_bp", ",", "np", ".", "tile", "(", "np", ".", "arange", "(", "0", ",", "tag_size", ")", ".", "reshape", "(", "[", "1", ",", "tag_size", "]", ")", ",", "[", "nbest", ",", "1", "]", ")", "]", "\n", "if", "t", "==", "0", ":", "cur_bp", "=", "cur_bp", "*", "nbest", "\n", "nbest_scores_t", "=", "nbest_scores_t", ".", "transpose", "(", "[", "1", ",", "0", "]", ")", "\n", "cur_bp", "=", "cur_bp", ".", "transpose", "(", "[", "1", ",", "0", "]", ")", "\n", "nbest_scores_t_history", ".", "append", "(", "nbest_scores_t", ")", "\n", "back_points", ".", "append", "(", "cur_bp", ")", "\n", "\n", "", "seq_score", "=", "nbest_scores_t_history", "[", "-", "1", "]", ".", "reshape", "(", "(", "tag_size", "*", "nbest", ")", ")", "\n", "viterbi_score", "=", "np", ".", "sort", "(", "seq_score", ")", "[", "-", "nbest", ":", "]", "[", ":", ":", "-", "1", "]", "\n", "\n", "viterbi", "=", "[", "np", ".", "argsort", "(", "seq_score", ",", "axis", "=", "0", ")", "[", "-", "nbest", ":", "]", "[", ":", ":", "-", "1", "]", "]", "\n", "for", "bp", "in", "reversed", "(", "back_points", ")", ":", "\n", "    ", "bp", "=", "bp", ".", "reshape", "(", "(", "tag_size", "*", "nbest", ")", ")", "\n", "viterbi", ".", "append", "(", "bp", "[", "viterbi", "[", "-", "1", "]", "]", ")", "\n", "", "viterbi", ".", "reverse", "(", ")", "\n", "viterbi", "=", "np", ".", "concatenate", "(", "[", "(", "np", ".", "expand_dims", "(", "v", ",", "0", ")", "/", "nbest", ")", ".", "astype", "(", "np", ".", "int32", ")", "for", "v", "in", "viterbi", "]", ",", "axis", "=", "0", ")", "\n", "viterbi", "=", "viterbi", ".", "transpose", "(", "[", "1", ",", "0", "]", ")", "\n", "viterbi", "=", "viterbi", ".", "tolist", "(", ")", "\n", "\n", "return", "viterbi", ",", "viterbi_score", "\n", "", ""]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.lc.make_pair": [[24, 27], ["None"], "function", ["None"], ["def", "make_pair", "(", "a", ",", "b", ")", ":", "\n", "    ", "\"\"\"Constructor for left-corner pair categories.\"\"\"", "\n", "return", "a", "+", "'_'", "+", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.lc.pair_categories": [[28, 31], ["p.split"], "function", ["None"], ["", "def", "pair_categories", "(", "p", ")", ":", "\n", "    ", "\"\"\"Accessor for left-corner pair categories.\"\"\"", "\n", "return", "p", ".", "split", "(", "'_'", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.lc.is_pair": [[32, 35], ["None"], "function", ["None"], ["", "def", "is_pair", "(", "p", ")", ":", "\n", "    ", "\"\"\"True iff this is a pair category.\"\"\"", "\n", "return", "'_'", "in", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.lc.flag": [[36, 38], ["None"], "function", ["None"], ["", "def", "flag", "(", "tree", ")", ":", "\n", "    ", "return", "[", "tree", "[", "0", "]", "+", "'+'", "]", "+", "tree", "[", "1", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.lc.is_flagged": [[39, 42], ["None"], "function", ["None"], ["", "def", "is_flagged", "(", "tree", ")", ":", "\n", "    ", "if", "tree", "[", "0", "]", "[", "-", "1", "]", "==", "'+'", ":", "\n", "        ", "return", "tree", "[", "0", "]", "[", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.lc.unflag": [[43, 45], ["None"], "function", ["None"], ["", "", "def", "unflag", "(", "tree", ")", ":", "\n", "    ", "return", "[", "tree", "[", "0", "]", "[", ":", "-", "1", "]", "]", "+", "tree", "[", "1", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.lc.cat_a": [[47, 49], ["None"], "function", ["None"], ["", "def", "cat_a", "(", "S", ",", "a", ")", ":", "\n", "    ", "return", "(", "'['", ",", "S", ",", "a", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.lc.cat_b": [[50, 52], ["None"], "function", ["None"], ["", "def", "cat_b", "(", "A", ",", "X", ",", "B", ",", "a", ")", ":", "\n", "    ", "return", "(", "'><'", ",", "X", ",", "a", "[", "0", "]", ",", "a", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.lc.cat_c": [[53, 55], ["None"], "function", ["None"], ["", "def", "cat_c", "(", "A", ",", "X", ",", "a", ")", ":", "\n", "    ", "return", "(", "'><]'", ",", "X", ",", "a", "[", "0", "]", ",", "a", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.lc.cat_d": [[56, 58], ["None"], "function", ["None"], ["", "def", "cat_d", "(", "A", ",", "X", ",", "B", ",", "C", ",", "a", ")", ":", "\n", "    ", "return", "(", "'>['", ",", "X", ",", "C", ",", "a", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.lc.cat_e": [[59, 62], ["None"], "function", ["None"], ["", "def", "cat_e", "(", "A", ",", "X", ",", "C", ",", "a", ")", ":", "\n", "    ", "\"\"\"Note: we use '(' instead of '<<'\"\"\"", "\n", "return", "(", "'>('", ",", "X", ",", "C", ",", "a", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.lc.lcx2": [[63, 104], ["tb.is_preterminal", "tb.is_preterminal", "tb.make_nonterminal", "tb.is_preterminal", "tb.tree_label", "tb.tree_children", "leftbranch"], "function", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.is_preterminal", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.is_preterminal", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.make_nonterminal", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.is_preterminal", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.tree_label", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.tree_children"], ["", "def", "lcx2", "(", "root", ")", ":", "\n", "\n", "    ", "\"\"\"\n    lcx2() maps a binary tree into the left-corner transform of my 1996 paper.\n    Preterminals that are right children, i.e., generated under schema (11b) and (11c),\n    are flagged.  This permits us to distinguish schema (11b) and (11e).\n    \"\"\"", "\n", "\n", "def", "rightbranch", "(", "tree", ")", ":", "\n", "\n", "        ", "\"\"\"\n        Transform a subtree lying on a right branch.\n        \"\"\"", "\n", "\n", "def", "leftbranch", "(", "subtree", ",", "transformed_right", ")", ":", "\n", "            ", "\"\"\"\n            Transform a subtree lying on a left branch.\n            transformed_right is transformed right material between this node and Anc.\n            \"\"\"", "\n", "if", "tb", ".", "is_preterminal", "(", "subtree", ")", ":", "\n", "                ", "return", "[", "subtree", ",", "transformed_right", "]", "\n", "", "else", ":", "\n", "                ", "left", ",", "right", "=", "tb", ".", "tree_children", "(", "subtree", ")", "\n", "return", "leftbranch", "(", "left", ",", "\n", "tb", ".", "make_nonterminal", "(", "make_pair", "(", "Anc", ",", "tb", ".", "tree_label", "(", "left", ")", ")", ",", "\n", "rightbranch", "(", "right", ")", "+", "[", "transformed_right", "]", ")", ")", "\n", "\n", "", "", "if", "tb", ".", "is_preterminal", "(", "tree", ")", ":", "\n", "            ", "return", "[", "flag", "(", "tree", ")", "]", "\n", "", "else", ":", "\n", "            ", "Anc", "=", "tb", ".", "tree_label", "(", "tree", ")", "\n", "left", ",", "right", "=", "tb", ".", "tree_children", "(", "tree", ")", "\n", "return", "leftbranch", "(", "left", ",", "\n", "tb", ".", "make_nonterminal", "(", "make_pair", "(", "Anc", ",", "tb", ".", "tree_label", "(", "left", ")", ")", ",", "\n", "rightbranch", "(", "right", ")", ")", ")", "\n", "\n", "", "", "if", "tb", ".", "is_preterminal", "(", "root", ")", ":", "\n", "        ", "return", "root", "\n", "", "else", ":", "\n", "        ", "return", "tb", ".", "make_nonterminal", "(", "tb", ".", "tree_label", "(", "root", ")", ",", "\n", "rightbranch", "(", "root", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.lc.lcx2tree_labels0": [[106, 149], ["tb.tree_label", "tb.tree_children", "lc.lcx2tree_labels0.visit"], "function", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.tree_label", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.tree_children"], ["", "", "def", "lcx2tree_labels0", "(", "xtree", ")", ":", "\n", "    ", "\"\"\"\n    Maps an lcx2 tree to the corresponding labels, as in my 1996 paper.\n    \"\"\"", "\n", "def", "visit", "(", "node", ",", "sofar", ")", ":", "\n", "        ", "assert", "tb", ".", "is_phrasal", "(", "node", ")", "\n", "label", "=", "tb", ".", "tree_label", "(", "node", ")", "\n", "assert", "is_pair", "(", "label", ")", "\n", "A", ",", "X", "=", "pair_categories", "(", "label", ")", "\n", "children", "=", "tb", ".", "tree_children", "(", "node", ")", "\n", "assert", "len", "(", "children", ")", ">", "0", "\n", "assert", "tb", ".", "is_preterminal", "(", "children", "[", "0", "]", ")", "\n", "if", "len", "(", "children", ")", "==", "1", ":", "\n", "            ", "assert", "is_flagged", "(", "children", "[", "0", "]", ")", "\n", "xf", "=", "cat_c", "(", "A", ",", "X", ",", "unflag", "(", "children", "[", "0", "]", ")", ")", "\n", "", "elif", "len", "(", "children", ")", "==", "2", ":", "\n", "            ", "if", "is_flagged", "(", "children", "[", "0", "]", ")", ":", "\n", "                ", "A1", ",", "B", "=", "pair_categories", "(", "tb", ".", "tree_label", "(", "children", "[", "1", "]", ")", ")", "\n", "assert", "A1", "==", "A", "\n", "xf", "=", "cat_b", "(", "A", ",", "X", ",", "B", ",", "unflag", "(", "children", "[", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "C", ",", "a", "=", "pair_categories", "(", "tb", ".", "tree_label", "(", "children", "[", "1", "]", ")", ")", "\n", "assert", "a", "==", "tb", ".", "tree_label", "(", "children", "[", "0", "]", ")", ",", "\"error in label of node.children[1] a = {}, node = {}\"", ".", "format", "(", "a", ",", "node", ")", "\n", "xf", "=", "cat_e", "(", "A", ",", "X", ",", "C", ",", "children", "[", "0", "]", ")", "\n", "", "", "elif", "len", "(", "children", ")", "==", "3", ":", "\n", "            ", "assert", "not", "is_flagged", "(", "children", "[", "0", "]", ")", "\n", "C", ",", "a", "=", "pair_categories", "(", "tb", ".", "tree_label", "(", "children", "[", "1", "]", ")", ")", "\n", "A1", ",", "B", "=", "pair_categories", "(", "tb", ".", "tree_label", "(", "children", "[", "2", "]", ")", ")", "\n", "assert", "A", "==", "A1", "\n", "xf", "=", "cat_d", "(", "A", ",", "X", ",", "B", ",", "C", ",", "children", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "sys", ".", "exit", "(", "\"error: ill-formed subtree {}\\n in tree {}\"", ".", "format", "(", "node", ",", "xtree", ")", ")", "\n", "", "sofar", ".", "append", "(", "xf", ")", "\n", "for", "child", "in", "children", "[", "1", ":", "]", ":", "\n", "            ", "sofar", "=", "visit", "(", "child", ",", "sofar", ")", "\n", "", "return", "sofar", "\n", "\n", "", "root", "=", "tb", ".", "tree_label", "(", "xtree", ")", "\n", "rchildren", "=", "tb", ".", "tree_children", "(", "xtree", ")", "\n", "assert", "len", "(", "rchildren", ")", "==", "2", ",", "\"nonbinary xtree = {}\"", ".", "format", "(", "xtree", ")", "\n", "sofar", "=", "[", "cat_a", "(", "root", ",", "rchildren", "[", "0", "]", ")", "]", "\n", "return", "visit", "(", "rchildren", "[", "1", "]", ",", "sofar", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.lc.tree_labels": [[152, 154], ["lc.lcx2tree_labels0", "lc.lcx2"], "function", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.lc.lcx2tree_labels0", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.lc.lcx2"], ["", "def", "tree_labels", "(", "tree", ")", ":", "\n", "    ", "return", "lcx2tree_labels0", "(", "lcx2", "(", "tree", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.lc.labels_tree": [[155, 177], ["lc.lcx2tree_labels0.visit"], "function", ["None"], ["", "def", "labels_tree", "(", "labels", ")", ":", "\n", "\n", "    ", "def", "visit", "(", "ls", ",", "subtree", ")", ":", "\n", "        ", "L", ",", "X", ",", "B", ",", "w", "=", "ls", "[", "0", "]", "\n", "ls", "=", "ls", "[", "1", ":", "]", "\n", "if", "L", "==", "'><'", ":", "\n", "            ", "return", "visit", "(", "ls", ",", "[", "[", "X", "]", "+", "subtree", ",", "[", "B", ",", "w", "]", "]", ")", "\n", "", "elif", "L", "==", "'><]'", ":", "\n", "            ", "return", "ls", ",", "[", "[", "X", "]", "+", "subtree", ",", "[", "B", ",", "w", "]", "]", "\n", "", "elif", "L", "==", "'>['", ":", "\n", "            ", "ls1", ",", "subtree1", "=", "visit", "(", "ls", ",", "[", "w", "]", ")", "\n", "return", "visit", "(", "ls1", ",", "[", "[", "X", "]", "+", "subtree", ",", "[", "B", "]", "+", "subtree1", "]", ")", "\n", "", "elif", "L", "==", "'>('", ":", "\n", "            ", "ls1", ",", "subtree1", "=", "visit", "(", "ls", ",", "[", "w", "]", ")", "\n", "return", "ls1", ",", "[", "[", "X", "]", "+", "subtree", ",", "[", "B", "]", "+", "subtree1", "]", "\n", "", "assert", "False", "\n", "\n", "", "L0", ",", "S", ",", "w", "=", "labels", "[", "0", "]", "\n", "assert", "L0", "==", "'['", "\n", "labels1", ",", "tree", "=", "visit", "(", "labels", "[", "1", ":", "]", ",", "[", "w", "]", ")", "\n", "assert", "labels1", "==", "[", "]", "\n", "return", "[", "S", "]", "+", "tree", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.lc.lcx0": [[180, 197], ["tb.is_preterminal", "tb.is_preterminal", "lc.lcx0._lcx"], "function", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.is_preterminal", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.is_preterminal"], ["", "def", "lcx0", "(", "t", ")", ":", "\n", "\n", "    ", "\"\"\"\n    lcx0() maps a binary tree into its left-corner transform as in my 1996 paper.\n    \"\"\"", "\n", "\n", "def", "_lcx", "(", "s", ",", "cont", ")", ":", "\n", "        ", "if", "tb", ".", "is_preterminal", "(", "s", ")", ":", "\n", "            ", "return", "[", "A", ",", "s", "]", "+", "cont", "\n", "", "else", ":", "\n", "            ", "return", "_lcx", "(", "s", "[", "1", "]", ",", "[", "[", "make_pair", "(", "A", ",", "s", "[", "1", "]", "[", "0", "]", ")", ",", "lcx0", "(", "s", "[", "2", "]", ")", "]", "+", "cont", "]", ")", "\n", "\n", "", "", "if", "tb", ".", "is_preterminal", "(", "t", ")", ":", "\n", "        ", "return", "t", "\n", "", "else", ":", "\n", "        ", "A", "=", "t", "[", "0", "]", "\n", "return", "_lcx", "(", "t", ",", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.lc.lcx": [[199, 222], ["tb.is_preterminal", "tb.tree_label", "leftbranch"], "function", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.is_preterminal", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.tree_label"], ["", "", "def", "lcx", "(", "root", ")", ":", "\n", "\n", "    ", "\"\"\"lcx() maps a binary tree into the left-corner transform of my 1996 paper.\"\"\"", "\n", "\n", "def", "rightbranch", "(", "tree", ")", ":", "\n", "\n", "        ", "def", "leftbranch", "(", "subtree", ",", "continuation", ")", ":", "\n", "            ", "if", "tb", ".", "is_preterminal", "(", "subtree", ")", ":", "\n", "                ", "return", "[", "subtree", "]", "+", "continuation", "\n", "", "else", ":", "\n", "                ", "left", ",", "right", "=", "tb", ".", "tree_children", "(", "subtree", ")", "\n", "return", "leftbranch", "(", "left", ",", "\n", "[", "tb", ".", "make_nonterminal", "(", "make_pair", "(", "Anc", ",", "tb", ".", "tree_label", "(", "left", ")", ")", ",", "\n", "rightbranch", "(", "right", ")", "+", "continuation", ")", "]", ")", "\n", "\n", "", "", "Anc", "=", "tb", ".", "tree_label", "(", "tree", ")", "\n", "return", "leftbranch", "(", "tree", ",", "[", "]", ")", "\n", "\n", "", "if", "tb", ".", "is_preterminal", "(", "root", ")", ":", "\n", "        ", "return", "root", "\n", "", "else", ":", "\n", "        ", "return", "tb", ".", "make_nonterminal", "(", "tb", ".", "tree_label", "(", "root", ")", ",", "\n", "rightbranch", "(", "root", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.lc.lct": [[224, 267], ["tb.is_preterminal", "tb.make_nonterminal", "tb.is_preterminal", "tb.make_nonterminal", "tb.tree_children", "tb.is_preterminal", "tb.tree_label", "tb.tree_children", "leftbranch"], "function", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.is_preterminal", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.make_nonterminal", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.is_preterminal", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.make_nonterminal", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.tree_children", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.is_preterminal", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.tree_label", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.tree_children"], ["", "", "def", "lct", "(", "root", ")", ":", "\n", "\n", "    ", "\"\"\"\n    lct() implements the same transform as lcx(), but it also relabels\n    the preterminal labels to implement the transduction in my 1996\n    paper.\n    \n    It isn't complete, i.e., it doesn't implement the relabelling.\n\n    \"\"\"", "\n", "\n", "def", "relabel", "(", "tree", ",", "label", ")", ":", "\n", "        ", "return", "tb", ".", "make_nonterminal", "(", "tree", "[", "0", "]", "+", "' '", "+", "label", ",", "tb", ".", "tree_children", "(", "tree", ")", ")", "\n", "\n", "", "def", "rightbranch", "(", "tree", ",", "X0", ")", ":", "\n", "\n", "        ", "def", "leftbranch", "(", "subtree", ",", "continuation", ",", "X1", ")", ":", "\n", "            ", "if", "tb", ".", "is_preterminal", "(", "subtree", ")", ":", "\n", "                ", "return", "[", "relabel", "(", "subtree", ",", "X1", ")", "]", "+", "continuation", "\n", "", "else", ":", "\n", "                ", "left", ",", "right", "=", "tb", ".", "tree_children", "(", "subtree", ")", "\n", "X2", "=", "tb", ".", "tree_label", "(", "left", ")", "+", "'>'", "\n", "return", "leftbranch", "(", "left", ",", "\n", "[", "tb", ".", "make_nonterminal", "(", "make_pair", "(", "Anc", ",", "tb", ".", "tree_label", "(", "left", ")", ")", ",", "\n", "rightbranch", "(", "right", ",", "X2", ")", "+", "continuation", ")", "]", ",", "\n", "X1", ")", "\n", "\n", "", "", "if", "tb", ".", "is_preterminal", "(", "tree", ")", ":", "\n", "            ", "return", "[", "relabel", "(", "tree", ",", "X0", "+", "'<'", "+", "tb", ".", "tree_label", "(", "tree", ")", "+", "']'", ")", "]", "\n", "", "else", ":", "\n", "            ", "Anc", "=", "tb", ".", "tree_label", "(", "tree", ")", "\n", "left", ",", "right", "=", "tb", ".", "tree_children", "(", "tree", ")", "\n", "X2", "=", "tb", ".", "tree_label", "(", "left", ")", "+", "'>'", "\n", "return", "leftbranch", "(", "left", ",", "\n", "[", "tb", ".", "make_nonterminal", "(", "make_pair", "(", "Anc", ",", "tb", ".", "tree_label", "(", "left", ")", ")", ",", "\n", "rightbranch", "(", "right", ",", "X2", ")", ")", "]", ",", "\n", "X0", ")", "\n", "\n", "", "", "if", "tb", ".", "is_preterminal", "(", "root", ")", ":", "\n", "        ", "return", "root", "\n", "", "else", ":", "\n", "        ", "return", "tb", ".", "make_nonterminal", "(", "tb", ".", "tree_label", "(", "root", ")", ",", "\n", "rightbranch", "(", "root", ",", "''", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.lc.make_binary_tree": [[270, 278], ["tb.make_preterminal", "tb.make_nonterminal", "lc.make_binary_tree", "lc.make_binary_tree"], "function", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.make_preterminal", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.make_nonterminal", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.lc.make_binary_tree", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.lc.make_binary_tree"], ["", "", "def", "make_binary_tree", "(", "depth", ",", "context", "=", "''", ")", ":", "\n", "    ", "\"\"\"this produces trees for testing the left-corner transform\"\"\"", "\n", "if", "depth", "<=", "0", ":", "\n", "        ", "return", "tb", ".", "make_preterminal", "(", "'n'", "+", "context", ",", "'w'", "+", "context", ")", "\n", "", "else", ":", "\n", "        ", "return", "tb", ".", "make_nonterminal", "(", "'n'", "+", "context", ",", "\n", "[", "make_binary_tree", "(", "depth", "-", "1", ",", "context", "+", "'1'", ")", ",", "\n", "make_binary_tree", "(", "depth", "-", "1", ",", "context", "+", "'2'", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.lc.make_leftbranching_tree": [[279, 287], ["tb.make_preterminal", "tb.make_nonterminal", "lc.make_leftbranching_tree", "lc.make_leftbranching_tree"], "function", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.make_preterminal", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.make_nonterminal", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.lc.make_leftbranching_tree", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.lc.make_leftbranching_tree"], ["", "", "def", "make_leftbranching_tree", "(", "depth", ",", "context", "=", "''", ")", ":", "\n", "    ", "\"\"\"this produces trees for testing the left-corner transform\"\"\"", "\n", "if", "depth", "<=", "0", ":", "\n", "        ", "return", "tb", ".", "make_preterminal", "(", "'n'", "+", "context", ",", "'w'", "+", "context", ")", "\n", "", "else", ":", "\n", "        ", "return", "tb", ".", "make_nonterminal", "(", "'n'", "+", "context", ",", "\n", "[", "make_leftbranching_tree", "(", "depth", "-", "1", ",", "context", "+", "'1'", ")", ",", "\n", "make_leftbranching_tree", "(", "0", ",", "context", "+", "'2'", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.lc.make_rightbranching_tree": [[288, 296], ["tb.make_preterminal", "tb.make_nonterminal", "lc.make_rightbranching_tree", "lc.make_rightbranching_tree"], "function", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.make_preterminal", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.make_nonterminal", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.lc.make_rightbranching_tree", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.lc.make_rightbranching_tree"], ["", "", "def", "make_rightbranching_tree", "(", "depth", ",", "context", "=", "''", ")", ":", "\n", "    ", "\"\"\"this produces trees for testing the left-corner transform\"\"\"", "\n", "if", "depth", "<=", "0", ":", "\n", "        ", "return", "tb", ".", "make_preterminal", "(", "'n'", "+", "context", ",", "'w'", "+", "context", ")", "\n", "", "else", ":", "\n", "        ", "return", "tb", ".", "make_nonterminal", "(", "'n'", "+", "context", ",", "\n", "[", "make_rightbranching_tree", "(", "0", ",", "context", "+", "'1'", ")", ",", "\n", "make_rightbranching_tree", "(", "depth", "-", "1", ",", "context", "+", "'2'", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.model_task.SRL_LSTM.__init__": [[145, 203], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "io_utils.create_trans_mask", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "model_task.SRL_LSTM.config.tag_dict.items"], "methods", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.create_trans_mask"], ["\t", "def", "__init__", "(", "self", ",", "config", ",", "nbest", ")", ":", "\n", "\t\t", "self", ".", "config", "=", "config", "\n", "self", ".", "use_parse", "=", "self", ".", "config", ".", "parse", "or", "self", ".", "config", ".", "use_dp_loss", "\n", "self", ".", "m_saver", "=", "None", "\n", "self", ".", "use_elmo", "=", "self", ".", "config", ".", "elmo", "\n", "self", ".", "constrain", "=", "self", ".", "config", ".", "soft_dp", "\n", "self", ".", "use_hard_dp", "=", "self", ".", "config", ".", "hard_dp", "\n", "self", ".", "nbest", "=", "nbest", "\n", "self", ".", "graph_decoding", "=", "not", "(", "nbest", ">", "1", "or", "self", ".", "config", ".", "hard_dp", ")", "\n", "self", ".", "reversed_tag_dict", "=", "{", "v", ":", "k", "for", "(", "k", ",", "v", ")", "in", "self", ".", "config", ".", "tag_dict", ".", "items", "(", ")", "}", "\n", "self", ".", "tag_dict", "=", "self", ".", "config", ".", "tag_dict", "\n", "self", ".", "use_tree_encode", "=", "self", ".", "config", ".", "use_tree_encode", "\n", "self", ".", "use_dp_tree_feature", "=", "self", ".", "config", ".", "use_dp_tree_feature", "\n", "\n", "if", "self", ".", "use_hard_dp", ":", "\n", "\t\t\t", "self", ".", "trans_mask_array", ",", "self", ".", "unary_mask_array", "=", "create_trans_mask", "(", "self", ".", "reversed_tag_dict", ")", "\n", "\n", "", "if", "not", "self", ".", "use_elmo", ":", "\n", "\t\t\t", "self", ".", "input", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "None", "]", ",", "\n", "name", "=", "\"input_sentence\"", ")", "\n", "assert", "self", ".", "config", ".", "word_embedding", ".", "shape", "[", "1", "]", "==", "config", ".", "word_embeds_dim", "\n", "self", ".", "pretrain_embedds", "=", "self", ".", "config", ".", "word_embedding", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "input", "=", "tf", ".", "placeholder", "(", "tf", ".", "string", ",", "shape", "=", "[", "None", ",", "None", "]", ",", "\n", "name", "=", "\"input_sentence\"", ")", "\n", "\n", "", "self", ".", "verb_pos", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "None", "]", ",", "\n", "name", "=", "\"verb_pos\"", ")", "\n", "self", ".", "labels", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "None", "]", ",", "\n", "name", "=", "\"labels\"", ")", "\n", "self", ".", "part_of_speech", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "None", "]", ",", "\n", "name", "=", "\"part_of_speech\"", ")", "\n", "self", ".", "chars", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "None", ",", "None", "]", ",", "\n", "name", "=", "\"chars\"", ")", "\n", "self", ".", "sequence_lengths", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ",", "\n", "name", "=", "\"sequence_lengths\"", ")", "\n", "\n", "self", ".", "dropout", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "]", ",", "name", "=", "\"dropout\"", ")", "\n", "#if self.use_elmo:", "\n", "self", ".", "input_dropout", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "]", ",", "name", "=", "\"input_dropout\"", ")", "\n", "\n", "if", "self", ".", "constrain", "or", "self", ".", "config", ".", "feature_loss", ":", "\n", "\t\t\t", "self", ".", "constrain_index", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "None", "]", ",", "name", "=", "\"constrain_index\"", ")", "\n", "\n", "", "if", "self", ".", "use_parse", ":", "\n", "\t\t\t", "self", ".", "dep_labels", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "None", "]", ",", "name", "=", "\"dep_labels\"", ")", "\n", "\n", "", "if", "self", ".", "use_tree_encode", "or", "self", ".", "config", ".", "tree_encode_loss", ":", "\n", "\t\t\t", "self", ".", "relative_layer", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "None", "]", ",", "name", "=", "\"relative_layer\"", ")", "\n", "self", ".", "ancestors_label", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "None", "]", ",", "name", "=", "\"ancestors_label\"", ")", "\n", "\n", "", "if", "self", ".", "use_dp_tree_feature", "or", "self", ".", "config", ".", "use_dp_tree_feature_loss", ":", "\n", "\t\t\t", "self", ".", "c_type", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "None", "]", ",", "name", "=", "\"c_type\"", ")", "\n", "self", ".", "left_ch_num", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "None", "]", ",", "name", "=", "\"left_ch_num\"", ")", "\n", "self", ".", "right_ch_num", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "None", "]", ",", "name", "=", "\"right_ch_num\"", ")", "\n", "self", ".", "rel_parent_pos", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "None", "]", ",", "name", "=", "\"rel_parent_pos\"", ")", "\n", "self", ".", "pp_type", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "None", "]", ",", "name", "=", "\"pp_type\"", ")", "\n", "self", ".", "dp_labels", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "None", "]", ",", "name", "=", "\"dp_label\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.model_task.SRL_LSTM.get_feed_dict": [[204, 238], ["dict"], "methods", ["None"], ["", "", "def", "get_feed_dict", "(", "self", ",", "seq_len", ",", "verb_pos", ",", "batch_sen", ",", "batch_char", ",", "batch_pos", ",", "constrain_idx", ",", "relative_layer", ",", "ancestors_label", ",", "batch_dep_ct", ",", "batch_left_ch_num", ",", "batch_right_ch_num", ",", "batch_dep_ppt", ",", "batch_rel_parent_pos", ",", "batch_dp_labels", ",", "\n", "batch_y", "=", "None", ",", "dep_label", "=", "None", ",", "dropout", "=", "0.0", ",", "input_dropout", "=", "0.0", ")", ":", "\n", "\t\t", "feed", "=", "dict", "(", ")", "\n", "\n", "feed", "[", "self", ".", "input", "]", "=", "batch_sen", "\n", "feed", "[", "self", ".", "verb_pos", "]", "=", "verb_pos", "\n", "feed", "[", "self", ".", "sequence_lengths", "]", "=", "seq_len", "\n", "feed", "[", "self", ".", "chars", "]", "=", "batch_char", "\n", "feed", "[", "self", ".", "part_of_speech", "]", "=", "batch_pos", "\n", "\n", "if", "self", ".", "constrain", "or", "self", ".", "config", ".", "feature_loss", ":", "\n", "\t\t\t", "feed", "[", "self", ".", "constrain_index", "]", "=", "constrain_idx", "\n", "\n", "", "if", "batch_y", "is", "not", "None", ":", "\n", "\t\t\t", "feed", "[", "self", ".", "labels", "]", "=", "batch_y", "\n", "", "if", "self", ".", "use_parse", ":", "\n", "\t\t\t", "feed", "[", "self", ".", "dep_labels", "]", "=", "dep_label", "\n", "\n", "", "feed", "[", "self", ".", "dropout", "]", "=", "dropout", "\n", "feed", "[", "self", ".", "input_dropout", "]", "=", "input_dropout", "\n", "\n", "if", "self", ".", "use_tree_encode", "or", "self", ".", "config", ".", "tree_encode_loss", ":", "\n", "\t\t\t", "feed", "[", "self", ".", "relative_layer", "]", "=", "relative_layer", "\n", "feed", "[", "self", ".", "ancestors_label", "]", "=", "ancestors_label", "\n", "\n", "", "if", "self", ".", "use_dp_tree_feature", "or", "self", ".", "config", ".", "use_dp_tree_feature_loss", ":", "\n", "\t\t\t", "feed", "[", "self", ".", "c_type", "]", "=", "batch_dep_ct", "\n", "feed", "[", "self", ".", "left_ch_num", "]", "=", "batch_left_ch_num", "\n", "feed", "[", "self", ".", "right_ch_num", "]", "=", "batch_right_ch_num", "\n", "feed", "[", "self", ".", "rel_parent_pos", "]", "=", "batch_rel_parent_pos", "\n", "feed", "[", "self", ".", "pp_type", "]", "=", "batch_dep_ppt", "\n", "feed", "[", "self", ".", "dp_labels", "]", "=", "batch_dp_labels", "\n", "\n", "", "return", "feed", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.model_task.SRL_LSTM.train": [[239, 256], ["range", "print", "model_task.SRL_LSTM.task_eval", "model_task.SRL_LSTM.m_saver.save", "model_task.SRL_LSTM.m_saver.output_best_performance", "tqdm.tqdm.tqdm", "model_task.SRL_LSTM.get_feed_dict", "pbar.set_description", "pbar.update", "len", "sess.run", "sess.run"], "methods", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.model_task.SRL_LSTM.task_eval", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.ModelSaver.save", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.ModelSaver.output_best_performance", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.model_task.SRL_LSTM.get_feed_dict"], ["", "def", "train", "(", "self", ",", "sess", ",", "train_data", ",", "dev_data", ")", ":", "\n", "\t\t", "for", "epoch", "in", "range", "(", "1", ",", "self", ".", "config", ".", "nepoch", "+", "1", ")", ":", "\n", "\t\t\t", "print", "(", "\"Epoch %d\"", "%", "epoch", ")", "\n", "with", "tqdm", "(", "total", "=", "len", "(", "train_data", ")", ",", "file", "=", "sys", ".", "stdout", ")", "as", "pbar", ":", "\n", "\t\t\t\t", "for", "(", "batch_len", ",", "batch_position", ",", "batch_sen", ",", "batch_tag", ",", "barch_char", ",", "batch_pos", ",", "batch_dep_heads", ",", "batch_trans_mask", ",", "batch_relative_layer", ",", "batch_ancestors_label", ",", "batch_dep_ct", ",", "batch_left_ch_num", ",", "batch_right_ch_num", ",", "batch_dep_ppt", ",", "batch_rel_parent_pos", ",", "batch_dp_labels", ")", "in", "train_data", ":", "\n", "\t\t\t\t\t", "fd", "=", "self", ".", "get_feed_dict", "(", "batch_len", ",", "batch_position", ",", "batch_sen", ",", "barch_char", ",", "batch_pos", ",", "\n", "batch_trans_mask", ",", "batch_relative_layer", ",", "batch_ancestors_label", ",", "batch_dep_ct", ",", "batch_left_ch_num", ",", "batch_right_ch_num", ",", "batch_dep_ppt", ",", "batch_rel_parent_pos", ",", "batch_dp_labels", ",", "batch_y", "=", "batch_tag", ",", "dep_label", "=", "batch_dep_heads", ",", "dropout", "=", "self", ".", "config", ".", "dropout", ",", "input_dropout", "=", "self", ".", "config", ".", "elmo_dropout", ")", "\n", "if", "epoch", "<", "self", ".", "config", ".", "change_opt_epoch", ":", "\n", "\t\t\t\t\t\t", "[", "_", ",", "train_loss", "]", "=", "sess", ".", "run", "(", "[", "self", ".", "adaedelta_train_op", ",", "self", ".", "loss", "]", ",", "feed_dict", "=", "fd", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t", "[", "_", ",", "train_loss", "]", "=", "sess", ".", "run", "(", "[", "self", ".", "sgd_train_op", ",", "self", ".", "loss", "]", ",", "feed_dict", "=", "fd", ")", "\n", "", "pbar", ".", "set_description", "(", "'loss %.4f'", "%", "(", "train_loss", ")", ")", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "", "", "new_ep", "=", "self", ".", "task_eval", "(", "sess", ",", "dev_data", ",", "self", ".", "config", ".", "dev_eval", ")", "\n", "self", ".", "m_saver", ".", "save", "(", "new_ep", ".", "F1", ",", "sess", ",", "epoch", ")", "\n", "self", ".", "m_saver", ".", "output_best_performance", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.model_task.SRL_LSTM.task_eval": [[257, 273], ["model_task.SRL_LSTM.prediction", "io_utils.print_srl_eval", "io_utils.print_srl_eval", "enumerate", "viterbi_sequences.append", "io_utils.select_oracle"], "methods", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.model_task.SRL_LSTM.prediction", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.print_srl_eval", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.print_srl_eval", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.select_oracle"], ["", "", "def", "task_eval", "(", "self", ",", "sess", ",", "data", ",", "golden_file", ",", "output_file", "=", "None", ")", ":", "\n", "\t\t", "new_viterbi_sequences", "=", "self", ".", "prediction", "(", "sess", ",", "data", ")", "\n", "if", "self", ".", "nbest", "==", "1", ":", "\n", "\t\t\t", "f1", "=", "print_srl_eval", "(", "new_viterbi_sequences", ",", "golden_file", ",", "self", ".", "config", ".", "eval_script", ",", "output_file", ")", "\n", "", "else", ":", "\n", "\t\t\t", "viterbi_sequences", "=", "[", "]", "\n", "for", "nbest_seq", ",", "_", ",", "g_seq", "in", "new_viterbi_sequences", ":", "\n", "\t\t\t\t", "max_f1", ",", "max_seq", "=", "0", ",", "None", "\n", "for", "i", ",", "q_seq", "in", "enumerate", "(", "nbest_seq", ")", ":", "\n", "\t\t\t\t\t", "f1", "=", "select_oracle", "(", "g_seq", ",", "q_seq", ",", "self", ".", "tag_dict", ")", "\n", "if", "f1", ">", "max_f1", ":", "\n", "\t\t\t\t\t\t", "max_f1", "=", "f1", "\n", "max_seq", "=", "q_seq", "\n", "", "", "viterbi_sequences", ".", "append", "(", "[", "self", ".", "reversed_tag_dict", "[", "c", "]", "for", "c", "in", "max_seq", "[", "1", ":", "]", "]", ")", "\n", "", "f1", "=", "print_srl_eval", "(", "viterbi_sequences", ",", "golden_file", ",", "self", ".", "config", ".", "eval_script", ",", "output_file", ")", "\n", "", "return", "f1", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.model_task.SRL_LSTM.prediction": [[274, 305], ["zip", "tqdm.tqdm.tqdm", "model_task.SRL_LSTM.get_feed_dict", "pbar.update", "range", "len", "sess.run", "zip", "sess.run", "zip", "len", "viterbi_sequences.append", "structure.viterbi_decode", "viterbi_sequences.append", "structure.viterbi_decode_nbest", "viterbi_sequences.append", "ValueError"], "methods", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.model_task.SRL_LSTM.get_feed_dict", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.structure.viterbi_decode", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.structure.viterbi_decode_nbest"], ["", "def", "prediction", "(", "self", ",", "sess", ",", "data", ")", ":", "\n", "\t\t", "viterbi_sequences", "=", "[", "]", "\n", "with", "tqdm", "(", "total", "=", "len", "(", "data", ")", ",", "file", "=", "sys", ".", "stdout", ")", "as", "pbar", ":", "\n", "\t\t\t", "for", "batch_len", ",", "batch_position", ",", "batch_sen", ",", "batch_tag", ",", "barch_char", ",", "batch_pos", ",", "batch_dep_heads", ",", "batch_trans_mask", ",", "batch_relative_layer", ",", "batch_ancestors_label", ",", "batch_dep_ct", ",", "batch_left_ch_num", ",", "batch_right_ch_num", ",", "batch_dep_ppt", ",", "batch_rel_parent_pos", ",", "batch_dp_labels", "in", "data", ":", "\n", "\t\t\t\t", "fd", "=", "self", ".", "get_feed_dict", "(", "batch_len", ",", "batch_position", ",", "batch_sen", ",", "\n", "barch_char", ",", "batch_pos", ",", "batch_trans_mask", ",", "batch_relative_layer", ",", "batch_ancestors_label", ",", "\n", "batch_dep_ct", ",", "batch_left_ch_num", ",", "batch_right_ch_num", ",", "batch_dep_ppt", ",", "batch_rel_parent_pos", ",", "batch_dp_labels", ",", "dep_label", "=", "batch_dep_heads", ")", "\n", "if", "not", "self", ".", "graph_decoding", ":", "\n", "\t\t\t\t\t", "srl_logits", ",", "srl_tp", "=", "sess", ".", "run", "(", "[", "self", ".", "srl_logits", ",", "self", ".", "transition_params", "]", ",", "feed_dict", "=", "fd", ")", "\n", "# iterate over the sentences", "\n", "for", "ground_tag", ",", "mask_index", ",", "srl_logit", ",", "sequence_length", "in", "zip", "(", "batch_tag", ",", "batch_trans_mask", ",", "srl_logits", ",", "batch_len", ")", ":", "\n", "# SRL eval", "\n", "\t\t\t\t\t\t", "if", "self", ".", "use_hard_dp", ":", "\n", "\t\t\t\t\t\t\t", "trans_mask", "=", "[", "self", ".", "trans_mask_array", "[", "v", "]", "for", "v", "in", "mask_index", "[", ":", "sequence_length", "]", "]", "\n", "unary_mask", "=", "[", "self", ".", "unary_mask_array", "[", "v", "]", "for", "v", "in", "mask_index", "[", ":", "sequence_length", "]", "]", "\n", "srl_viterbi_", ",", "_", "=", "viterbi_decode", "(", "srl_logit", "[", ":", "sequence_length", "]", ",", "srl_tp", ",", "trans_mask", ",", "unary_mask", ")", "\n", "viterbi_sequences", ".", "append", "(", "[", "self", ".", "reversed_tag_dict", "[", "c", "]", "for", "c", "in", "srl_viterbi_", "[", "1", ":", "]", "]", ")", "\n", "", "elif", "self", ".", "nbest", ">", "1", ":", "\n", "\t\t\t\t\t\t\t", "srl_viterbi_nbest", ",", "seq_score", "=", "viterbi_decode_nbest", "(", "srl_logit", "[", ":", "sequence_length", "]", ",", "srl_tp", ",", "self", ".", "nbest", ")", "\n", "viterbi_sequences", ".", "append", "(", "(", "srl_viterbi_nbest", ",", "seq_score", ",", "ground_tag", "[", ":", "sequence_length", "]", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t\t", "raise", "ValueError", "(", "'decoding method not supported'", ")", "\n", "", "", "", "else", ":", "\n", "\t\t\t\t\t", "[", "srl_prediction", "]", "=", "sess", ".", "run", "(", "[", "self", ".", "decode_tags", "]", ",", "feed_dict", "=", "fd", ")", "\n", "for", "srl_p", ",", "sequence_length", "in", "zip", "(", "srl_prediction", ",", "batch_len", ")", ":", "\n", "\t\t\t\t\t\t", "viterbi_sequences", ".", "append", "(", "[", "self", ".", "reversed_tag_dict", "[", "c", "]", "for", "c", "in", "srl_p", "[", "1", ":", "sequence_length", "]", "]", ")", "\n", "", "", "pbar", ".", "update", "(", "1", ")", "\n", "", "", "new_viterbi_sequences", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "viterbi_sequences", ")", ")", "]", "\n", "for", "seq", ",", "k", "in", "zip", "(", "viterbi_sequences", ",", "data", ".", "sorted_order", ")", ":", "\n", "\t\t\t", "new_viterbi_sequences", "[", "k", "]", "=", "seq", "\n", "", "return", "new_viterbi_sequences", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.model_task.SRL_LSTM.build_graph": [[306, 421], ["tensorflow.global_variables_initializer", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.nn.embedding_lookup", "model_task.char_cnn", "tensorflow.concat", "tensorflow.variable_scope", "stack_LSTM.deep_biLSTM", "model_task.srl_loss_predict", "tensorflow.train.GradientDescentOptimizer", "tensorflow.train.GradientDescentOptimizer.compute_gradients", "enumerate", "tensorflow.train.GradientDescentOptimizer.apply_gradients", "tensorflow.train.AdadeltaOptimizer", "tensorflow.train.AdadeltaOptimizer.compute_gradients", "enumerate", "tensorflow.train.AdadeltaOptimizer.apply_gradients", "tensorflow.Variable", "tensorflow.nn.embedding_lookup", "model_task.setup_elmo", "tensorflow.nn.dropout", "tensorflow.get_variable", "tensorflow.nn.embedding_lookup", "tensorflow.get_variable", "tensorflow.nn.embedding_lookup", "zip", "tensorflow.concat", "model_task.calculate_feature_loss", "model_task.calculate_feature_loss", "model_task.calculate_feature_loss", "model_task.calculate_feature_loss", "zip", "model_task.dp_loss", "tensorflow.contrib.crf.crf_decode", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.get_variable", "tensorflow.nn.embedding_lookup", "tensorflow.concat", "tensorflow.get_variable", "tensorflow.nn.embedding_lookup", "tensorflow.concat", "all_embeddings_list.append", "tensorflow.contrib.layers.xavier_initializer", "model_task.calculate_feature_loss", "model_task.get_embedding_operation", "model_task.SRL_LSTM.input_representation.get_shape().as_list", "tensorflow.clip_by_norm", "tensorflow.clip_by_norm", "model_task.SRL_LSTM.input_representation.get_shape"], "methods", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.model_task.char_cnn", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.stack_LSTM.deep_biLSTM", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.model_task.srl_loss_predict", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.model_task.setup_elmo", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.model_task.calculate_feature_loss", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.model_task.calculate_feature_loss", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.model_task.calculate_feature_loss", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.model_task.calculate_feature_loss", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.model_task.dp_loss", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.model_task.calculate_feature_loss", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.model_task.get_embedding_operation"], ["", "def", "build_graph", "(", "self", ")", ":", "\n", "\t\t", "if", "self", ".", "use_dp_tree_feature", "or", "self", ".", "config", ".", "use_dp_tree_feature_loss", ":", "\n", "\t\t\t", "input_list", "=", "[", "self", ".", "left_ch_num", ",", "self", ".", "right_ch_num", ",", "self", ".", "c_type", ",", "self", ".", "rel_parent_pos", ",", "self", ".", "dp_labels", "]", "\n", "nspan_list", "=", "[", "RELATIVE_POSITION_RANGE", "*", "2", ",", "RELATIVE_POSITION_RANGE", "*", "2", ",", "3", ",", "RELATIVE_POSITION_RANGE", "*", "2", ",", "self", ".", "config", ".", "n_dp_label", "]", "\n", "name_list", "=", "[", "'left_children'", ",", "'right_children'", ",", "'child_type'", ",", "'rel_parent_distance'", ",", "'dep_label'", "]", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"input\"", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", ":", "\n", "\t\t\t", "if", "not", "self", ".", "use_elmo", ":", "\n", "# word level information", "\n", "\t\t\t\t", "word_params", "=", "tf", ".", "Variable", "(", "self", ".", "pretrain_embedds", ",", "dtype", "=", "tf", ".", "float32", ",", "name", "=", "\"SRL_embeddings\"", ")", "\n", "word_representation", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "word_params", ",", "self", ".", "input", ",", "name", "=", "\"word_embeddings\"", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "word_representation", "=", "setup_elmo", "(", "self", ".", "input", ",", "self", ".", "sequence_lengths", ",", "self", ".", "config", ".", "elmo_path", ")", "\n", "word_representation", "=", "tf", ".", "nn", ".", "dropout", "(", "word_representation", ",", "1", "-", "self", ".", "input_dropout", ")", "\n", "\n", "#char embedding", "\n", "", "_char_embeddings", "=", "tf", ".", "get_variable", "(", "\"_char_embeddings\"", ",", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "self", ".", "config", ".", "nchars", ",", "self", ".", "config", ".", "char_embeds_dim", "]", ")", "\n", "char_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "_char_embeddings", ",", "self", ".", "chars", ",", "name", "=", "\"char_embeddings\"", ")", "\n", "final_char_embeddings", "=", "char_cnn", "(", "char_embeddings", ",", "[", "25", ",", "25", ",", "25", ",", "25", "]", ",", "[", "2", ",", "3", ",", "4", ",", "5", "]", ",", "\"VALID\"", ")", "\n", "\n", "#part of speech", "\n", "# _pos_embeddings = tf.get_variable(\"_pos_embeddings\", dtype=tf.float32, ", "\n", "# \tshape=[self.config.npos, self.config.pos_embeds_dim])", "\n", "# pos_embeddings = tf.nn.embedding_lookup(_pos_embeddings, self.part_of_speech, name=\"pos_embeddings\")", "\n", "\n", "if", "not", "self", ".", "constrain", ":", "\n", "# position embedding", "\n", "\t\t\t\t", "_position_embeddings", "=", "tf", ".", "get_variable", "(", "\"_position_embeddings\"", ",", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "2", ",", "self", ".", "config", ".", "position_embeds_dim", "]", ")", "\n", "constrain_embeds", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "_position_embeddings", ",", "self", ".", "verb_pos", ",", "name", "=", "\"position_embeddings\"", ")", "\n", "", "else", ":", "\n", "# constrain embedding", "\n", "\t\t\t\t", "_constrain_embeddings", "=", "tf", ".", "get_variable", "(", "\"_constrain_embeddings\"", ",", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "self", ".", "config", ".", "nspan", ",", "self", ".", "config", ".", "position_embeds_dim", "]", ")", "\n", "constrain_embeds", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "_constrain_embeddings", ",", "self", ".", "verb_pos", ",", "name", "=", "\"_constrain_embeds\"", ")", "\n", "\n", "# final combination", "\n", "", "self", ".", "input_representation", "=", "tf", ".", "concat", "(", "[", "word_representation", ",", "final_char_embeddings", ",", "constrain_embeds", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "if", "self", ".", "use_tree_encode", ":", "\n", "\n", "\t\t\t\t", "if", "self", ".", "config", ".", "enable_relative_layer", ":", "\n", "\t\t\t\t\t", "_relative_layer_embeddings", "=", "tf", ".", "get_variable", "(", "\"_relative_layer_embeddings\"", ",", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "self", ".", "config", ".", "n_rel_label", ",", "self", ".", "config", ".", "pos_embeds_dim", "]", ")", "\n", "relative_layer_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "_relative_layer_embeddings", ",", "self", ".", "relative_layer", ",", "name", "=", "\"pos_embeddings\"", ")", "\n", "self", ".", "input_representation", "=", "tf", ".", "concat", "(", "[", "self", ".", "input_representation", ",", "relative_layer_embeddings", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "if", "self", ".", "config", ".", "enable_ancestor_label", ":", "\n", "\t\t\t\t\t", "_ancestors_label_embeddings", "=", "tf", ".", "get_variable", "(", "\"_ancestors_label_embeddings\"", ",", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "self", ".", "config", ".", "n_ancestors_label", ",", "self", ".", "config", ".", "pos_embeds_dim", "]", ")", "\n", "ancestors_label_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "_ancestors_label_embeddings", ",", "self", ".", "ancestors_label", ",", "name", "=", "\"pos_embeddings\"", ")", "\n", "self", ".", "input_representation", "=", "tf", ".", "concat", "(", "[", "self", ".", "input_representation", ",", "ancestors_label_embeddings", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "", "if", "self", ".", "use_dp_tree_feature", ":", "\n", "\t\t\t\t", "all_embeddings_list", "=", "[", "self", ".", "input_representation", "]", "\n", "for", "input_index", ",", "num_embedding", ",", "embedding_name", "in", "zip", "(", "input_list", ",", "nspan_list", ",", "name_list", ")", ":", "\n", "\t\t\t\t\t", "all_embeddings_list", ".", "append", "(", "get_embedding_operation", "(", "input_index", ",", "num_embedding", ",", "self", ".", "config", ".", "dp_embeds_dim", ",", "embedding_name", ")", ")", "\n", "\n", "", "self", ".", "input_representation", "=", "tf", ".", "concat", "(", "all_embeddings_list", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "", "with", "tf", ".", "variable_scope", "(", "\"SRL_LSTM\"", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", ":", "\n", "\t\t\t", "input_size", "=", "[", "self", ".", "input_representation", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "]", "+", "[", "self", ".", "config", ".", "hidden_size", "]", "*", "(", "self", ".", "config", ".", "layer_size", "-", "1", ")", "\n", "output_rep_list", ",", "_", "=", "deep_biLSTM", "(", "self", ".", "config", ".", "hidden_size", ",", "self", ".", "input_representation", ",", "self", ".", "sequence_lengths", ",", "\n", "self", ".", "dropout", ",", "input_size", ")", "\n", "srl_model_output", "=", "output_rep_list", "[", "-", "1", "]", "\n", "\n", "dependency", "=", "self", ".", "dep_labels", "if", "self", ".", "config", ".", "parse", "else", "None", "\n", "srl_loss", ",", "self", ".", "srl_logits", ",", "self", ".", "transition_params", "=", "srl_loss_predict", "(", "srl_model_output", ",", "self", ".", "labels", ",", "self", ".", "sequence_lengths", ",", "\n", "self", ".", "config", ".", "ntags", ",", "dep_heads", "=", "dependency", ")", "\n", "self", ".", "loss", "=", "srl_loss", "\n", "\n", "if", "self", ".", "config", ".", "pos_multi_task", ":", "\n", "\t\t\t\t", "task_loss", ",", "pred", "=", "calculate_feature_loss", "(", "srl_model_output", ",", "self", ".", "part_of_speech", ",", "\n", "self", ".", "sequence_lengths", ",", "self", ".", "config", ".", "npos", ",", "\"pos_feature\"", ")", "\n", "self", ".", "loss", "+=", "task_loss", "\n", "\n", "", "if", "self", ".", "config", ".", "feature_loss", ":", "\n", "\t\t\t\t", "task_loss", ",", "pred", "=", "calculate_feature_loss", "(", "srl_model_output", ",", "self", ".", "constrain_index", ",", "\n", "self", ".", "sequence_lengths", ",", "self", ".", "config", ".", "nspan", ",", "\"span_feature\"", ")", "\n", "self", ".", "loss", "+=", "task_loss", "\n", "\n", "", "if", "self", ".", "config", ".", "tree_encode_loss", ":", "\n", "\t\t\t\t", "task_loss", ",", "pred", "=", "calculate_feature_loss", "(", "srl_model_output", ",", "self", ".", "relative_layer", ",", "\n", "self", ".", "sequence_lengths", ",", "self", ".", "config", ".", "n_rel_label", ",", "\"relative_layer\"", ")", "\n", "self", ".", "loss", "+=", "task_loss", "\n", "\n", "task_loss", ",", "pred", "=", "calculate_feature_loss", "(", "srl_model_output", ",", "self", ".", "ancestors_label", ",", "\n", "self", ".", "sequence_lengths", ",", "self", ".", "config", ".", "n_ancestors_label", ",", "\"ancestors_label\"", ")", "\n", "self", ".", "loss", "+=", "task_loss", "\n", "\n", "", "if", "self", ".", "config", ".", "use_dp_tree_feature_loss", ":", "\n", "\t\t\t\t", "for", "input_idx", ",", "nspan", ",", "name", "in", "zip", "(", "input_list", ",", "nspan_list", ",", "name_list", ")", ":", "\n", "\t\t\t\t\t", "task_loss", ",", "pred", "=", "calculate_feature_loss", "(", "srl_model_output", ",", "input_idx", ",", "self", ".", "sequence_lengths", ",", "nspan", ",", "name", ")", "\n", "self", ".", "loss", "+=", "task_loss", "\n", "\n", "", "", "if", "self", ".", "config", ".", "use_dp_loss", ":", "\n", "\t\t\t\t", "mst_loss", "=", "dp_loss", "(", "srl_model_output", ",", "self", ".", "dep_labels", ",", "self", ".", "sequence_lengths", ",", "self", ".", "config", ".", "hidden_size", "*", "2", ")", "\n", "self", ".", "loss", "+=", "mst_loss", "\n", "\n", "", "if", "self", ".", "graph_decoding", ":", "\n", "\t\t\t\t", "self", ".", "decode_tags", ",", "_", "=", "tf", ".", "contrib", ".", "crf", ".", "crf_decode", "(", "self", ".", "srl_logits", ",", "self", ".", "transition_params", ",", "self", ".", "sequence_lengths", ")", "\n", "\n", "", "sgd_optimizer", "=", "tf", ".", "train", ".", "GradientDescentOptimizer", "(", "learning_rate", "=", "self", ".", "config", ".", "SGD_lr", ")", "\n", "grads", "=", "sgd_optimizer", ".", "compute_gradients", "(", "self", ".", "loss", ")", "\n", "for", "i", ",", "(", "g", ",", "v", ")", "in", "enumerate", "(", "grads", ")", ":", "\n", "\t\t\t\t", "if", "g", "is", "not", "None", ":", "\n", "\t\t\t\t\t", "grads", "[", "i", "]", "=", "(", "tf", ".", "clip_by_norm", "(", "g", ",", "self", ".", "config", ".", "clip_norm", ")", ",", "v", ")", "\n", "", "", "self", ".", "sgd_train_op", "=", "sgd_optimizer", ".", "apply_gradients", "(", "grads", ")", "\n", "\n", "# Adam delta for SRL", "\n", "adaedelta_optimizer", "=", "tf", ".", "train", ".", "AdadeltaOptimizer", "(", "learning_rate", "=", "self", ".", "config", ".", "adam_delta_lr", ",", "\n", "epsilon", "=", "self", ".", "config", ".", "epsilon", ")", "\n", "grads", "=", "adaedelta_optimizer", ".", "compute_gradients", "(", "self", ".", "loss", ")", "\n", "for", "i", ",", "(", "g", ",", "v", ")", "in", "enumerate", "(", "grads", ")", ":", "\n", "\t\t\t\t", "if", "g", "is", "not", "None", ":", "\n", "\t\t\t\t\t", "grads", "[", "i", "]", "=", "(", "tf", ".", "clip_by_norm", "(", "g", ",", "self", ".", "config", ".", "clip_norm", ")", ",", "v", ")", "\n", "", "", "self", ".", "adaedelta_train_op", "=", "adaedelta_optimizer", ".", "apply_gradients", "(", "grads", ")", "\n", "\n", "", "self", ".", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.model_task.conv1d": [[13, 23], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.dropout", "tensorflow.reduce_max", "tf.nn.dropout.get_shape", "tensorflow.nn.conv2d", "tensorflow.nn.relu"], "function", ["None"], ["def", "conv1d", "(", "in_", ",", "filter_size", ",", "height", ",", "padding", ",", "keep_prob", "=", "1.0", ",", "scope", "=", "None", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "scope", "or", "\"conv1d\"", ")", ":", "\n", "        ", "num_channels", "=", "in_", ".", "get_shape", "(", ")", "[", "-", "1", "]", "\n", "filter_", "=", "tf", ".", "get_variable", "(", "\"filter\"", ",", "shape", "=", "[", "1", ",", "height", ",", "num_channels", ",", "filter_size", "]", ",", "dtype", "=", "'float'", ")", "\n", "bias", "=", "tf", ".", "get_variable", "(", "\"bias\"", ",", "shape", "=", "[", "filter_size", "]", ",", "dtype", "=", "'float'", ")", "\n", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "in_", "=", "tf", ".", "nn", ".", "dropout", "(", "in_", ",", "keep_prob", ")", "\n", "xxc", "=", "tf", ".", "nn", ".", "conv2d", "(", "in_", ",", "filter_", ",", "strides", ",", "padding", ")", "+", "bias", "# [N*M, JX, W/filter_stride, d]", "\n", "out", "=", "tf", ".", "reduce_max", "(", "tf", ".", "nn", ".", "relu", "(", "xxc", ")", ",", "2", ")", "# [-1, JX, d]", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.model_task.char_cnn": [[24, 30], ["zip", "tensorflow.concat", "model_task.conv1d", "outs.append"], "function", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.model_task.conv1d"], ["", "", "def", "char_cnn", "(", "in_", ",", "size_list", ",", "height_list", ",", "padding", ",", "keep_prob", "=", "1.0", ")", ":", "\n", "\t", "outs", "=", "[", "]", "\n", "for", "filter_size", ",", "height", "in", "zip", "(", "size_list", ",", "height_list", ")", ":", "\n", "\t\t", "out", "=", "conv1d", "(", "in_", ",", "filter_size", ",", "height", ",", "padding", ",", "keep_prob", "=", "keep_prob", ",", "scope", "=", "\"char_{}\"", ".", "format", "(", "height", ")", ")", "\n", "outs", ".", "append", "(", "out", ")", "\n", "", "return", "tf", ".", "concat", "(", "outs", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.model_task.setup_elmo": [[31, 41], ["hub.Module", "hub.Module."], "function", ["None"], ["", "def", "setup_elmo", "(", "sentences", ",", "text_len", ",", "elmo_path", ")", ":", "\n", "\t", "import", "tensorflow_hub", "as", "hub", "\n", "elmo", "=", "hub", ".", "Module", "(", "elmo_path", ",", "trainable", "=", "True", ")", "\n", "return", "elmo", "(", "\n", "inputs", "=", "{", "\n", "\"tokens\"", ":", "sentences", ",", "\n", "\"sequence_len\"", ":", "text_len", "\n", "}", ",", "\n", "signature", "=", "\"tokens\"", ",", "\n", "as_dict", "=", "True", ")", "[", "\"elmo\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.model_task.calculate_feature_loss": [[42, 55], ["tensorflow.variable_scope", "tensorflow.layers.dense", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.sequence_mask", "tensorflow.dynamic_partition", "tensorflow.reduce_mean", "tensorflow.argmax", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer"], "function", ["None"], ["", "def", "calculate_feature_loss", "(", "network_final_rep", ",", "labels", ",", "sequence_lengths", ",", "ntags", ",", "name", ")", ":", "\n", "\t", "with", "tf", ".", "variable_scope", "(", "'%s_loss'", "%", "name", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", ":", "\n", "\t\t", "logits", "=", "tf", ".", "layers", ".", "dense", "(", "\n", "network_final_rep", ",", "ntags", ",", "\n", "kernel_initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", ")", "\n", "losses", "=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "labels", "=", "labels", ",", "logits", "=", "logits", ")", "\n", "mask", "=", "tf", ".", "sequence_mask", "(", "sequence_lengths", ",", "name", "=", "\"seq_mask\"", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "split_output", "=", "tf", ".", "dynamic_partition", "(", "losses", ",", "mask", ",", "2", ")", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "split_output", "[", "1", "]", ")", "\n", "prediction", "=", "tf", ".", "argmax", "(", "logits", ",", "axis", "=", "-", "1", ")", "\n", "\n", "return", "loss", ",", "prediction", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.model_task.get_embedding_operation": [[56, 59], ["tensorflow.get_variable", "tensorflow.nn.embedding_lookup"], "function", ["None"], ["", "", "def", "get_embedding_operation", "(", "labels", ",", "n_embedding", ",", "embedding_dim", ",", "name", ")", ":", "\n", "\t", "_all_embeddings", "=", "tf", ".", "get_variable", "(", "\"_%s_embeddings\"", "%", "name", ",", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "n_embedding", ",", "embedding_dim", "]", ")", "\n", "return", "tf", ".", "nn", ".", "embedding_lookup", "(", "_all_embeddings", ",", "labels", ",", "name", "=", "\"%s_embeddings\"", "%", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.model_task.GCN": [[60, 74], ["tensorflow.one_hot", "tensorflow.transpose", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.concat", "tensorflow.nn.relu", "tf.layers.dense.get_shape().as_list", "tensorflow.shape", "tf.layers.dense.get_shape"], "function", ["None"], ["", "def", "GCN", "(", "input_vec", ",", "dep_heads", ")", ":", "\n", "\t", "hidden_size", "=", "input_vec", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "2", "]", "\n", "parent_onehot", "=", "tf", ".", "one_hot", "(", "dep_heads", ",", "tf", ".", "shape", "(", "input_vec", ")", "[", "1", "]", ")", "\n", "children_onehot", "=", "tf", ".", "transpose", "(", "parent_onehot", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "\n", "parent_vec", "=", "tf", ".", "matmul", "(", "parent_onehot", ",", "input_vec", ")", "\n", "children_vec", "=", "tf", ".", "matmul", "(", "children_onehot", ",", "input_vec", ")", "\n", "\n", "input_vec", "=", "tf", ".", "layers", ".", "dense", "(", "input_vec", ",", "hidden_size", ",", "name", "=", "\"self_dense\"", ")", "\n", "children_vec", "=", "tf", ".", "layers", ".", "dense", "(", "children_vec", ",", "hidden_size", ",", "name", "=", "\"children_dense\"", ")", "\n", "parent_vec", "=", "tf", ".", "layers", ".", "dense", "(", "parent_vec", ",", "hidden_size", ",", "name", "=", "\"parent_dense\"", ")", "\n", "final_rep", "=", "tf", ".", "concat", "(", "[", "input_vec", ",", "children_vec", ",", "parent_vec", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "return", "tf", ".", "nn", ".", "relu", "(", "final_rep", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.model_task.srl_loss_predict": [[75, 96], ["tensorflow.layers.dense", "tensorflow.contrib.crf.crf_log_likelihood", "tensorflow.reduce_mean", "tensorflow.expand_dims", "tensorflow.concat", "tensorflow.gather_nd", "tensorflow.concat", "tensorflow.tile", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.shape", "tensorflow.shape", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.range"], "function", ["None"], ["", "def", "srl_loss_predict", "(", "in_", ",", "labels", ",", "sequence_lengths", ",", "ntags", ",", "dep_heads", "=", "None", ")", ":", "\n", "\t", "if", "dep_heads", "is", "not", "None", ":", "\n", "\t\t", "batch_size", ",", "length", "=", "tf", ".", "shape", "(", "in_", ")", "[", "0", "]", ",", "tf", ".", "shape", "(", "in_", ")", "[", "1", "]", "\n", "batch_idx", "=", "tf", ".", "expand_dims", "(", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "tf", ".", "range", "(", "batch_size", ")", ",", "axis", "=", "1", ")", ",", "[", "1", ",", "length", "]", ")", ",", "axis", "=", "-", "1", ")", "\n", "head_idx", "=", "tf", ".", "concat", "(", "[", "batch_idx", ",", "tf", ".", "expand_dims", "(", "dep_heads", ",", "axis", "=", "-", "1", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "selected_head_rep", "=", "tf", ".", "gather_nd", "(", "in_", ",", "head_idx", ")", "\n", "sytactic_attention", "=", "tf", ".", "concat", "(", "[", "in_", ",", "selected_head_rep", "]", ",", "axis", "=", "-", "1", ")", "\n", "# sytactic_attention = GCN(in_, dep_heads)", "\n", "", "else", ":", "\n", "\t\t", "sytactic_attention", "=", "in_", "\n", "\n", "", "logits", "=", "tf", ".", "layers", ".", "dense", "(", "\n", "sytactic_attention", ",", "ntags", ",", "\n", "kernel_initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", ")", "\n", "\n", "log_likelihood", ",", "transition_params", "=", "tf", ".", "contrib", ".", "crf", ".", "crf_log_likelihood", "(", "logits", ",", "labels", ",", "sequence_lengths", ")", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "-", "log_likelihood", ")", "\n", "\n", "return", "loss", ",", "logits", ",", "transition_params", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.model_task.dp_loss": [[97, 142], ["tensorflow.variable_scope", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.split", "tensorflow.split", "tensorflow.shape", "tensorflow.shape", "tensorflow.variable_scope", "tensorflow.tile", "tensorflow.tile", "tensorflow.tanh", "tensorflow.layers.dense", "tensorflow.reshape", "tensorflow.logical_not", "tensorflow.sequence_mask", "tensorflow.logical_and", "tensorflow.nn.softmax", "tensorflow.one_hot", "tensorflow.sequence_mask", "tensorflow.sequence_mask", "tensorflow.cast", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.eye", "tensorflow.tile", "tensorflow.cast", "tensorflow.constant", "tensorflow.ones", "tensorflow.logical_and", "tensorflow.log", "tensorflow.reduce_mean", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.expand_dims", "tensorflow.logical_not", "tensorflow.shape", "tensorflow.logical_not", "tensorflow.reduce_sum", "tensorflow.cast", "tensorflow.reduce_sum", "tensorflow.cast"], "function", ["None"], ["", "def", "dp_loss", "(", "network_final_rep", ",", "dep_heads", ",", "sequence_lengths", ",", "dp_hidden_size", ")", ":", "\n", "\t", "with", "tf", ".", "variable_scope", "(", "\"network_rep\"", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", ":", "\n", "\t\t", "head_rep", "=", "tf", ".", "layers", ".", "dense", "(", "\n", "network_final_rep", ",", "dp_hidden_size", ",", "\n", "kernel_initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ",", "\n", "name", "=", "'head_dense'", "\n", ")", "\n", "tail_rep", "=", "tf", ".", "layers", ".", "dense", "(", "\n", "network_final_rep", ",", "dp_hidden_size", ",", "\n", "kernel_initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ",", "\n", "name", "=", "'tail_dense'", "\n", ")", "\n", "head_rep_label", ",", "head_rep_dep", "=", "tf", ".", "split", "(", "head_rep", ",", "2", ",", "axis", "=", "-", "1", ")", "\n", "tail_rep_label", ",", "tail_rep_dep", "=", "tf", ".", "split", "(", "tail_rep", ",", "2", ",", "axis", "=", "-", "1", ")", "\n", "\n", "\n", "", "length", "=", "tf", ".", "shape", "(", "head_rep_dep", ")", "[", "1", "]", "\n", "batch_size", "=", "tf", ".", "shape", "(", "head_rep_dep", ")", "[", "0", "]", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"MST_loss\"", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", ":", "\n", "\n", "\t\t", "head_dense", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "head_rep_dep", ",", "2", ")", ",", "[", "1", ",", "1", ",", "length", ",", "1", "]", ")", "\n", "tail_dense", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "tail_rep_dep", ",", "1", ")", ",", "[", "1", ",", "length", ",", "1", ",", "1", "]", ")", "\n", "\n", "input_for_score", "=", "tf", ".", "tanh", "(", "head_dense", "+", "tail_dense", ")", "\n", "arc_score", "=", "tf", ".", "layers", ".", "dense", "(", "\n", "input_for_score", ",", "1", ",", "kernel_initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ",", "\n", "name", "=", "'MLP_score'", "\n", ")", "\n", "arc_score", "=", "tf", ".", "reshape", "(", "arc_score", ",", "shape", "=", "(", "-", "1", ",", "length", ",", "length", ")", ")", "\n", "\n", "self_mask", "=", "tf", ".", "logical_not", "(", "tf", ".", "eye", "(", "length", ",", "dtype", "=", "tf", ".", "bool", ")", ")", "\n", "head_mask", "=", "tf", ".", "sequence_mask", "(", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "sequence_lengths", ",", "1", ")", ",", "[", "1", ",", "length", "]", ")", ")", "\n", "zero_mask", "=", "tf", ".", "logical_and", "(", "head_mask", ",", "self_mask", ")", "\n", "softmax_mask", "=", "tf", ".", "cast", "(", "tf", ".", "logical_not", "(", "zero_mask", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "*", "tf", ".", "constant", "(", "-", "1", "*", "1e30", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "mst_score", "=", "tf", ".", "nn", ".", "softmax", "(", "arc_score", "*", "tf", ".", "cast", "(", "zero_mask", ",", "dtype", "=", "tf", ".", "float32", ")", "+", "softmax_mask", ")", "\n", "\n", "head_one_hot", "=", "tf", ".", "one_hot", "(", "dep_heads", ",", "length", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "mask", "=", "tf", ".", "sequence_mask", "(", "sequence_lengths", ")", "\n", "root_mask", "=", "tf", ".", "sequence_mask", "(", "tf", ".", "ones", "(", "tf", ".", "shape", "(", "sequence_lengths", ")", ")", ",", "maxlen", "=", "length", ")", "\n", "mask", "=", "tf", ".", "cast", "(", "tf", ".", "logical_and", "(", "tf", ".", "logical_not", "(", "root_mask", ")", ",", "mask", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "target_mst_score", "=", "tf", ".", "log", "(", "tf", ".", "reduce_sum", "(", "mst_score", "*", "head_one_hot", ",", "axis", "=", "-", "1", ")", "+", "tf", ".", "cast", "(", "root_mask", ",", "dtype", "=", "tf", ".", "float32", ")", ")", "*", "mask", "\n", "mst_loss", "=", "-", "1.0", "*", "tf", ".", "reduce_mean", "(", "tf", ".", "reduce_sum", "(", "target_mst_score", ",", "axis", "=", "-", "1", ")", ")", "\n", "\n", "", "return", "mst_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tree.SeqTree.__init__": [[17, 21], ["nltk.tree.Tree.__init__"], "methods", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.ModelSaver.__init__"], ["def", "__init__", "(", "self", ",", "label", ",", "children", ")", ":", "\n", "\n", "        ", "self", ".", "encoding", "=", "None", "\n", "super", "(", "SeqTree", ",", "self", ")", ".", "__init__", "(", "label", ",", "children", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tree.SeqTree.set_encoding": [[23, 25], ["None"], "methods", ["None"], ["", "def", "set_encoding", "(", "self", ",", "encoding", ")", ":", "\n", "        ", "self", ".", "encoding", "=", "encoding", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tree.SeqTree.to_maxincommon_sequence": [[33, 43], ["tree.SeqTree.path_to_leaves", "tree.SeqTree.leaves", "tree.SeqTree.encoding.to_maxincommon_sequence", "ValueError", "s.label", "tree.SeqTree.label", "tree.SeqTree.subtrees", "t.height"], "methods", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tree.SeqTree.path_to_leaves", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tree.RelativeLevelTreeEncoder.to_maxincommon_sequence"], ["def", "to_maxincommon_sequence", "(", "self", ",", "is_binary", "=", "False", ",", "root_label", "=", "False", ",", "encode_unary_leaf", "=", "False", ")", ":", "\n", "\n", "        ", "if", "self", ".", "encoding", "is", "None", ":", "raise", "ValueError", "(", "\"encoding attribute is None\"", ")", "\n", "leaves_paths", "=", "[", "]", "\n", "self", ".", "path_to_leaves", "(", "[", "self", ".", "label", "(", ")", "]", ",", "leaves_paths", ")", "\n", "leaves", "=", "self", ".", "leaves", "(", ")", "\n", "unary_sequence", "=", "[", "s", ".", "label", "(", ")", "for", "s", "in", "self", ".", "subtrees", "(", "lambda", "t", ":", "t", ".", "height", "(", ")", "==", "2", ")", "]", "#.split(\"+\")", "\n", "return", "self", ".", "encoding", ".", "to_maxincommon_sequence", "(", "leaves", ",", "leaves_paths", ",", "unary_sequence", ",", "binarized", "=", "is_binary", ",", "\n", "root_label", "=", "root_label", ",", "\n", "encode_unary_leaf", "=", "encode_unary_leaf", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tree.SeqTree.maxincommon_to_tree": [[51, 55], ["encoding.maxincommon_to_tree", "ValueError"], "methods", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tree.RelativeLevelTreeEncoder.maxincommon_to_tree"], ["@", "classmethod", "\n", "def", "maxincommon_to_tree", "(", "cls", ",", "sequence", ",", "sentence", ",", "encoding", ")", ":", "\n", "        ", "if", "encoding", "is", "None", ":", "raise", "ValueError", "(", "\"encoding parameter is None\"", ")", "\n", "return", "encoding", ".", "maxincommon_to_tree", "(", "sequence", ",", "sentence", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tree.SeqTree.path_to_leaves": [[62, 79], ["enumerate", "isinstance", "copy.deepcopy", "copy.deepcopy.append", "child.path_to_leaves", "pathi.append", "paths.append", "pathi.append", "str", "child.label"], "methods", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tree.SeqTree.path_to_leaves"], ["def", "path_to_leaves", "(", "self", ",", "current_path", ",", "paths", ")", ":", "\n", "\n", "        ", "for", "i", ",", "child", "in", "enumerate", "(", "self", ")", ":", "\n", "\n", "            ", "pathi", "=", "[", "]", "\n", "if", "isinstance", "(", "child", ",", "Tree", ")", ":", "\n", "                ", "common_path", "=", "copy", ".", "deepcopy", "(", "current_path", ")", "\n", "\n", "common_path", ".", "append", "(", "child", ".", "label", "(", ")", "+", "\"-\"", "+", "str", "(", "i", ")", ")", "\n", "child", ".", "path_to_leaves", "(", "common_path", ",", "paths", ")", "\n", "", "else", ":", "\n", "                ", "for", "element", "in", "current_path", ":", "\n", "                    ", "pathi", ".", "append", "(", "element", ")", "\n", "", "pathi", ".", "append", "(", "child", ")", "\n", "paths", ".", "append", "(", "pathi", ")", "\n", "\n", "", "", "return", "paths", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tree.RelativeLevelTreeEncoder.to_maxincommon_sequence": [[103, 158], ["enumerate", "range", "min", "len", "sequence.append", "sequence.append", "len", "len", "len", "sequence.append", "sequence.append", "unary_sequence[].split", "tree.RelativeLevelTreeEncoder._tag", "unary_sequence[].split"], "methods", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tree.RelativeLevelTreeEncoder._tag"], ["def", "to_maxincommon_sequence", "(", "self", ",", "leaves", ",", "leaves_paths", ",", "unary_sequence", ",", "\n", "binarized", ",", "root_label", ",", "encode_unary_leaf", "=", "False", ")", ":", "\n", "\n", "        ", "sequence", "=", "[", "]", "\n", "previous_ni", "=", "0", "\n", "ni", "=", "0", "\n", "relative_ni", "=", "0", "\n", "\n", "for", "j", ",", "leaf", "in", "enumerate", "(", "leaves", ")", ":", "\n", "\n", "#It is the last real word of the sentence", "\n", "            ", "if", "j", "==", "len", "(", "leaves", ")", "-", "1", ":", "\n", "\n", "                ", "if", "encode_unary_leaf", "and", "\"+\"", "in", "unary_sequence", "[", "j", "]", ":", "\n", "                    ", "encoded_unary_leaf", "=", "\"_\"", "+", "\"+\"", ".", "join", "(", "unary_sequence", "[", "j", "]", ".", "split", "(", "\"+\"", ")", "[", ":", "-", "1", "]", ")", "#The PoS tags is not encoded", "\n", "", "else", ":", "\n", "                    ", "encoded_unary_leaf", "=", "\"\"", "\n", "\n", "#               #This corresponds to the implementation without the computation trick", "\n", "#                sequence.append((self.NONE_LABEL+encoded_unary_leaf))", "\n", "#                break", "\n", "\n", "#TODO: This is a computation trick that seemed to work better in the dev set", "\n", "#Sentences of length on are annotated with ROOT_UNARYCHAIN instead NONE_UNARYCHAIN                 ", "\n", "", "if", "(", "root_label", "and", "len", "(", "leaves", ")", "==", "1", ")", ":", "\n", "                    ", "sequence", ".", "append", "(", "self", ".", "ROOT_LABEL", "+", "encoded_unary_leaf", ")", "\n", "", "else", ":", "\n", "                    ", "sequence", ".", "append", "(", "(", "self", ".", "NONE_LABEL", "+", "encoded_unary_leaf", ")", ")", "\n", "", "break", "\n", "\n", "", "explore_up_to", "=", "min", "(", "len", "(", "leaves_paths", "[", "j", "]", ")", ",", "len", "(", "leaves_paths", "[", "j", "+", "1", "]", ")", ")", "+", "1", "\n", "ni", "=", "0", "\n", "for", "i", "in", "range", "(", "explore_up_to", ")", ":", "\n", "\n", "                ", "if", "leaves_paths", "[", "j", "]", "[", "i", "]", "==", "leaves_paths", "[", "j", "+", "1", "]", "[", "i", "]", ":", "\n", "                    ", "ni", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "relative_ni", "=", "ni", "-", "previous_ni", "\n", "if", "binarized", ":", "\n", "                        ", "relative_ni", "=", "relative_ni", "if", "relative_ni", ">=", "0", "else", "-", "1", "\n", "\n", "", "if", "encode_unary_leaf", "and", "\"+\"", "in", "unary_sequence", "[", "j", "]", ":", "\n", "                        ", "encoded_unary_leaf", "=", "\"_\"", "+", "\"+\"", ".", "join", "(", "unary_sequence", "[", "j", "]", ".", "split", "(", "\"+\"", ")", "[", ":", "-", "1", "]", ")", "#The PoS tags is not encoded", "\n", "", "else", ":", "\n", "                        ", "encoded_unary_leaf", "=", "\"\"", "\n", "\n", "", "if", "root_label", "and", "ni", "==", "1", ":", "\n", "                        ", "sequence", ".", "append", "(", "self", ".", "ROOT_LABEL", "+", "\"_\"", "+", "leaves_paths", "[", "j", "]", "[", "ni", "-", "1", "]", "+", "encoded_unary_leaf", ")", "\n", "", "else", ":", "\n", "                        ", "sequence", ".", "append", "(", "self", ".", "_tag", "(", "relative_ni", ",", "leaves_paths", "[", "j", "]", "[", "ni", "-", "1", "]", ")", "+", "encoded_unary_leaf", ")", "\n", "\n", "", "previous_ni", "=", "ni", "\n", "break", "\n", "\n", "", "", "", "return", "sequence", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tree.RelativeLevelTreeEncoder.uncollapse": [[167, 197], ["nltk.tree.Tree", "nltk.tree.Tree.label", "uncollapsed.append", "child.label", "type", "type", "type", "type", "child.label.split", "nltk.tree.Tree", "last_swap_level.extend", "uncollapsed.append", "uncollapsed.append", "child.label", "len", "last_swap_level.append", "nltk.tree.Tree.RelativeLevelTreeEncoder.uncollapse", "nltk.tree.Tree.RelativeLevelTreeEncoder.uncollapse", "nltk.tree.Tree"], "methods", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tree.RelativeLevelTreeEncoder.uncollapse", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tree.RelativeLevelTreeEncoder.uncollapse"], ["def", "uncollapse", "(", "self", ",", "tree", ")", ":", "\n", "\n", "        ", "uncollapsed", "=", "[", "]", "\n", "for", "child", "in", "tree", ":", "\n", "\n", "            ", "if", "type", "(", "child", ")", "==", "type", "(", "u''", ")", "or", "type", "(", "child", ")", "==", "type", "(", "\"\"", ")", ":", "\n", "                ", "uncollapsed", ".", "append", "(", "child", ")", "\n", "", "else", ":", "\n", "#It also removes EMPTY nodes", "\n", "                ", "while", "child", ".", "label", "(", ")", "==", "SeqTree", ".", "EMPTY_LABEL", "and", "len", "(", "child", ")", "!=", "0", ":", "\n", "                    ", "child", "=", "child", "[", "-", "1", "]", "\n", "\n", "", "label", "=", "child", ".", "label", "(", ")", "\n", "if", "'+'", "in", "label", ":", "\n", "\n", "                    ", "label_split", "=", "label", ".", "split", "(", "'+'", ")", "\n", "swap", "=", "Tree", "(", "label_split", "[", "0", "]", ",", "[", "]", ")", "\n", "\n", "last_swap_level", "=", "swap", "\n", "for", "unary", "in", "label_split", "[", "1", ":", "]", ":", "\n", "                        ", "last_swap_level", ".", "append", "(", "Tree", "(", "unary", ",", "[", "]", ")", ")", "\n", "last_swap_level", "=", "last_swap_level", "[", "-", "1", "]", "\n", "", "last_swap_level", ".", "extend", "(", "child", ")", "\n", "uncollapsed", ".", "append", "(", "self", ".", "uncollapse", "(", "swap", ")", ")", "\n", "#We are uncollapsing the child node", "\n", "", "else", ":", "\n", "                    ", "uncollapsed", ".", "append", "(", "self", ".", "uncollapse", "(", "child", ")", ")", "\n", "\n", "", "", "", "tree", "=", "Tree", "(", "tree", ".", "label", "(", ")", ",", "uncollapsed", ")", "\n", "return", "tree", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tree.RelativeLevelTreeEncoder.get_postag_trees": [[203, 215], ["enumerate", "postags.append", "postags.extend", "len", "type", "type", "tree.RelativeLevelTreeEncoder.get_postag_trees"], "methods", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tree.RelativeLevelTreeEncoder.get_postag_trees"], ["def", "get_postag_trees", "(", "self", ",", "tree", ")", ":", "\n", "\n", "        ", "postags", "=", "[", "]", "\n", "\n", "for", "nchild", ",", "child", "in", "enumerate", "(", "tree", ")", ":", "\n", "\n", "            ", "if", "len", "(", "child", ")", "==", "1", "and", "type", "(", "child", "[", "-", "1", "]", ")", "==", "type", "(", "\"\"", ")", ":", "\n", "                ", "postags", ".", "append", "(", "child", ")", "\n", "", "else", ":", "\n", "                ", "postags", ".", "extend", "(", "self", ".", "get_postag_trees", "(", "child", ")", ")", "\n", "\n", "", "", "return", "postags", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tree.RelativeLevelTreeEncoder.preprocess_tags": [[225, 243], ["pred.split", "int", "pred.rsplit"], "methods", ["None"], ["def", "preprocess_tags", "(", "self", ",", "pred", ")", ":", "\n", "\n", "        ", "try", ":", "\n", "            ", "label", "=", "pred", ".", "split", "(", "\"_\"", ")", "\n", "level", ",", "label", "=", "label", "[", "0", "]", ",", "label", "[", "1", "]", "\n", "try", ":", "\n", "                ", "return", "(", "int", "(", "level", ")", ",", "label", ")", "\n", "", "except", "ValueError", ":", "\n", "\n", "#It is a NONE label with a leaf unary chain", "\n", "                ", "if", "level", "==", "self", ".", "NONE_LABEL", ":", "#or level == self.ROOT:", "\n", "                    ", "return", "(", "None", ",", "pred", ".", "rsplit", "(", "\"_\"", ",", "1", ")", "[", "1", "]", ")", "\n", "\n", "", "return", "(", "level", ",", "label", ")", "\n", "\n", "", "", "except", "IndexError", ":", "\n", "#It is a NONE label (without any leaf unary chains)", "\n", "            ", "return", "(", "None", ",", "pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tree.RelativeLevelTreeEncoder.maxincommon_to_tree": [[253, 311], ["SeqTree.SeqTree", "map", "SeqTree.RelativeLevelTreeEncoder._to_absolute_encoding", "enumerate", "xrange", "current_level.label", "current_level.set_label", "previous_at.append", "previous_at.append", "previous_at.append", "nltk.tree.Tree", "current_level.append", "nltk.tree.Tree", "current_level.append", "previous_at.append", "nltk.tree.Tree", "nltk.tree.Tree", "len", "nltk.tree.Tree", "nltk.tree.Tree"], "methods", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tree.RelativeLevelTreeEncoder._to_absolute_encoding"], ["def", "maxincommon_to_tree", "(", "self", ",", "sequence", ",", "sentence", ")", ":", "\n", "\n", "        ", "tree", "=", "SeqTree", "(", "SeqTree", ".", "EMPTY_LABEL", ",", "[", "]", ")", "\n", "current_level", "=", "tree", "\n", "previous_at", "=", "None", "\n", "first", "=", "True", "\n", "\n", "sequence", "=", "map", "(", "self", ".", "preprocess_tags", ",", "sequence", ")", "\n", "sequence", "=", "self", ".", "_to_absolute_encoding", "(", "sequence", ")", "\n", "\n", "for", "j", ",", "(", "level", ",", "label", ")", "in", "enumerate", "(", "sequence", ")", ":", "\n", "\n", "            ", "if", "level", "is", "None", ":", "\n", "                ", "prev_level", ",", "_", "=", "sequence", "[", "j", "-", "1", "]", "\n", "previous_at", "=", "tree", "\n", "while", "prev_level", ">", "1", ":", "\n", "                    ", "previous_at", "=", "previous_at", "[", "-", "1", "]", "\n", "prev_level", "-=", "1", "\n", "\n", "#TODO: Trying optimitization", "\n", "#It is a NONE label", "\n", "", "if", "self", ".", "NONE_LABEL", "==", "label", ":", "#or self.ROOT_LABEL:", "\n", "#if \"NONE\" == label:", "\n", "                    ", "previous_at", ".", "append", "(", "Tree", "(", "sentence", "[", "j", "]", "[", "1", "]", ",", "[", "sentence", "[", "j", "]", "[", "0", "]", "]", ")", ")", "\n", "#It is a leaf unary chain", "\n", "", "else", ":", "\n", "                    ", "previous_at", ".", "append", "(", "Tree", "(", "label", "+", "\"+\"", "+", "sentence", "[", "j", "]", "[", "1", "]", ",", "[", "sentence", "[", "j", "]", "[", "0", "]", "]", ")", ")", "\n", "", "return", "tree", "\n", "continue", "\n", "\n", "", "i", "=", "0", "\n", "for", "i", "in", "xrange", "(", "level", "-", "1", ")", ":", "\n", "                ", "if", "len", "(", "current_level", ")", "==", "0", "or", "i", ">=", "sequence", "[", "j", "-", "1", "]", "[", "0", "]", "-", "1", ":", "\n", "                    ", "child_tree", "=", "Tree", "(", "SeqTree", ".", "EMPTY_LABEL", ",", "[", "]", ")", "\n", "current_level", ".", "append", "(", "child_tree", ")", "\n", "current_level", "=", "child_tree", "\n", "\n", "", "else", ":", "\n", "                    ", "current_level", "=", "current_level", "[", "-", "1", "]", "\n", "\n", "", "", "if", "current_level", ".", "label", "(", ")", "==", "SeqTree", ".", "EMPTY_LABEL", ":", "\n", "                ", "current_level", ".", "set_label", "(", "label", ")", "\n", "\n", "", "if", "first", ":", "\n", "                ", "previous_at", "=", "current_level", "\n", "previous_at", ".", "append", "(", "Tree", "(", "sentence", "[", "j", "]", "[", "1", "]", ",", "[", "sentence", "[", "j", "]", "[", "0", "]", "]", ")", ")", "\n", "first", "=", "False", "\n", "", "else", ":", "\n", "#If we are at the same or deeper level than in the previous step", "\n", "                ", "if", "i", ">=", "sequence", "[", "j", "-", "1", "]", "[", "0", "]", "-", "1", ":", "\n", "                    ", "current_level", ".", "append", "(", "Tree", "(", "sentence", "[", "j", "]", "[", "1", "]", ",", "[", "sentence", "[", "j", "]", "[", "0", "]", "]", ")", ")", "\n", "", "else", ":", "\n", "                    ", "previous_at", ".", "append", "(", "Tree", "(", "sentence", "[", "j", "]", "[", "1", "]", ",", "[", "sentence", "[", "j", "]", "[", "0", "]", "]", ")", ")", "\n", "", "previous_at", "=", "current_level", "\n", "\n", "", "current_level", "=", "tree", "\n", "\n", "", "return", "tree", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tree.RelativeLevelTreeEncoder._to_absolute_encoding": [[318, 333], ["enumerate", "len"], "methods", ["None"], ["def", "_to_absolute_encoding", "(", "self", ",", "relative_sequence", ")", ":", "\n", "\n", "        ", "absolute_sequence", "=", "[", "0", "]", "*", "len", "(", "relative_sequence", ")", "\n", "current_level", "=", "0", "\n", "for", "j", ",", "(", "level", ",", "phrase", ")", "in", "enumerate", "(", "relative_sequence", ")", ":", "\n", "\n", "            ", "if", "level", "is", "None", ":", "\n", "                ", "absolute_sequence", "[", "j", "]", "=", "(", "level", ",", "phrase", ")", "\n", "", "elif", "level", "==", "self", ".", "ROOT_LABEL", ":", "\n", "                ", "absolute_sequence", "[", "j", "]", "=", "(", "1", ",", "phrase", ")", "\n", "current_level", "+=", "1", "\n", "", "else", ":", "\n", "                ", "current_level", "+=", "level", "\n", "absolute_sequence", "[", "j", "]", "=", "(", "current_level", ",", "phrase", ")", "\n", "", "", "return", "absolute_sequence", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tree.RelativeLevelTreeEncoder._tag": [[335, 337], ["str", "tag.rsplit"], "methods", ["None"], ["", "def", "_tag", "(", "self", ",", "level", ",", "tag", ")", ":", "\n", "        ", "return", "str", "(", "level", ")", "+", "\"_\"", "+", "tag", ".", "rsplit", "(", "\"-\"", ",", "1", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.stack_LSTM.get_LSTM_cell": [[3, 11], ["tensorflow.contrib.rnn.LSTMCell", "tensorflow.contrib.rnn.DropoutWrapper", "tensorflow.contrib.rnn.ResidualWrapper"], "function", ["None"], ["def", "get_LSTM_cell", "(", "hidden_size", ",", "dropout", ",", "input_size", ",", "with_connection", ")", ":", "\n", "\t", "cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "LSTMCell", "(", "hidden_size", ")", "\n", "if", "with_connection", ":", "cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "ResidualWrapper", "(", "cell", ")", "\n", "cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "DropoutWrapper", "(", "cell", ",", "\n", "state_keep_prob", "=", "1.0", "-", "dropout", ",", "\n", "input_keep_prob", "=", "1.0", "-", "dropout", ",", "\n", "variational_recurrent", "=", "True", ",", "dtype", "=", "tf", ".", "float32", ",", "input_size", "=", "input_size", ")", "\n", "return", "cell", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.stack_LSTM.word_biLSTM": [[12, 21], ["tensorflow.contrib.rnn.stack_bidirectional_dynamic_rnn", "stack_LSTM.get_LSTM_cell", "stack_LSTM.get_LSTM_cell"], "function", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.stack_LSTM.get_LSTM_cell", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.stack_LSTM.get_LSTM_cell"], ["", "def", "word_biLSTM", "(", "hidden_size", ",", "input_vec", ",", "sequence_lengths", ",", "dropout", ",", "input_size_list", ")", ":", "\n", "\t", "forward_cell_list", "=", "[", "get_LSTM_cell", "(", "hidden_size", ",", "dropout", ",", "input_size", ",", "False", ")", "for", "input_size", "in", "input_size_list", "]", "\n", "backward_cell_list", "=", "[", "get_LSTM_cell", "(", "hidden_size", ",", "dropout", ",", "input_size", ",", "False", ")", "for", "input_size", "in", "input_size_list", "]", "\n", "\n", "(", "outputs", ",", "_", ",", "_", ")", "=", "tf", ".", "contrib", ".", "rnn", ".", "stack_bidirectional_dynamic_rnn", "(", "\n", "forward_cell_list", ",", "backward_cell_list", ",", "input_vec", ",", "\n", "sequence_length", "=", "sequence_lengths", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.stack_LSTM.deep_biLSTM": [[22, 36], ["enumerate", "stack_LSTM.get_LSTM_cell", "tensorflow.nn.dynamic_rnn", "tensorflow.reverse_sequence", "output_list.append"], "function", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.stack_LSTM.get_LSTM_cell"], ["", "def", "deep_biLSTM", "(", "hidden_size", ",", "input_vec", ",", "sequence_lengths", ",", "dropout", ",", "input_size_list", ")", ":", "\n", "\t", "layer_input", "=", "input_vec", "\n", "output_list", "=", "[", "]", "\n", "output_state_list", "=", "[", "]", "\n", "\n", "for", "i", ",", "input_size", "in", "enumerate", "(", "input_size_list", ")", ":", "\n", "\t\t", "LSTM_cell", "=", "get_LSTM_cell", "(", "hidden_size", ",", "dropout", ",", "input_size", ",", "i", ">", "0", ")", "\n", "(", "layer_out", ",", "layer_state", ")", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "LSTM_cell", ",", "layer_input", ",", "\n", "sequence_length", "=", "sequence_lengths", ",", "scope", "=", "\"rnn_layer_%d\"", "%", "i", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "layer_input", "=", "tf", ".", "reverse_sequence", "(", "layer_out", ",", "sequence_lengths", ",", "\n", "seq_axis", "=", "1", ",", "name", "=", "'seq_reverse_%d'", "%", "i", ")", "\n", "output_list", ".", "append", "(", "layer_input", ")", "\n", "\n", "", "return", "output_list", ",", "output_state_list", "", "", ""]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.EvaluationPerformance.__init__": [[209, 214], ["None"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "f1", ",", "recall", ",", "precision", ",", "comp", ")", ":", "\n", "\t\t", "self", ".", "F1", "=", "f1", "\n", "self", ".", "Recall", "=", "recall", "\n", "self", ".", "Precision", "=", "precision", "\n", "self", ".", "Comp", "=", "comp", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.EvaluationPerformance.toDict": [[215, 217], ["None"], "methods", ["None"], ["", "def", "toDict", "(", "self", ")", ":", "\n", "\t\t", "return", "{", "'f1'", ":", "self", ".", "F1", ",", "'recall'", ":", "self", ".", "Recall", ",", "'precision'", ":", "self", ".", "Precision", ",", "'comp'", ":", "self", ".", "Comp", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.DataReader.__init__": [[219, 238], ["None"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "config", ",", "input_word_dict", ",", "output_tag_dict", ",", "char_dict", ",", "pos_dict", ",", "span_label_dict", ",", "relative_level_dict", ",", "ancestors_label_dict", ",", "dep_label_dict", ",", "what_to_use", ",", "is_train", "=", "True", ")", ":", "\n", "\t\t", "self", ".", "config", "=", "config", "\n", "self", ".", "input_word_dict", "=", "input_word_dict", "\n", "self", ".", "output_tag_dict", "=", "output_tag_dict", "\n", "self", ".", "oov_count", "=", "{", "'total'", ":", "0", ",", "'oov'", ":", "0", "}", "\n", "self", ".", "batch_size", "=", "config", ".", "batch_size", "\n", "self", ".", "char_dict", "=", "char_dict", "\n", "self", ".", "pos_dict", "=", "pos_dict", "\n", "self", ".", "use_elmo", "=", "config", ".", "elmo", "\n", "self", ".", "pad_sen_func", "=", "tf", ".", "keras", ".", "preprocessing", ".", "sequence", ".", "pad_sequences", "\n", "self", ".", "large_batch_split", "=", "config", ".", "large_batch_split", "\n", "self", ".", "large_batch_size", "=", "30", "\n", "self", ".", "span_label_dict", "=", "span_label_dict", "\n", "self", ".", "what_to_use", "=", "what_to_use", "\n", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "relative_level_dict", "=", "relative_level_dict", "\n", "self", ".", "ancestors_label_dict", "=", "ancestors_label_dict", "\n", "self", ".", "dep_label_dict", "=", "dep_label_dict", "\n", "self", ".", "batch_list", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.DataReader.load_data": [[239, 265], ["io_utils.DataReader.read_data", "list", "io_utils.DataReader.read_data", "zip", "print", "zip", "print", "list", "zip", "zip", "zip", "zip"], "methods", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.DataReader.read_data", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.DataReader.read_data"], ["", "def", "load_data", "(", "self", ",", "srl", ",", "parse", ",", "dp", ",", "pred_parse", ",", "pred_dp", ")", ":", "\n", "# read golden", "\n", "\t\t", "verb_idx_list", ",", "idx_sen_list", ",", "tag_list", ",", "char_list", ",", "g_part_of_speech", ",", "dep_heads", ",", "g_trans_mask", ",", "g_relative_layer", ",", "ancestors_label", ",", "dep_child_type", ",", "dep_left_ch_num", ",", "dep_right_ch_num", ",", "dep_predicate_parent", ",", "dep_rel_gov_pos", ",", "batch_dp_labels", "=", "self", ".", "read_data", "(", "srl", ",", "parse", ",", "dp", ")", "\n", "self", ".", "golden_data", "=", "list", "(", "zip", "(", "verb_idx_list", ",", "idx_sen_list", ",", "tag_list", ",", "char_list", ",", "g_part_of_speech", ",", "dep_heads", ",", "g_trans_mask", ",", "g_relative_layer", ",", "ancestors_label", ",", "dep_child_type", ",", "dep_left_ch_num", ",", "dep_right_ch_num", ",", "dep_predicate_parent", ",", "dep_rel_gov_pos", ",", "batch_dp_labels", ")", ")", "\n", "# read pred", "\n", "verb_idx_list", ",", "idx_sen_list", ",", "tag_list", ",", "char_list", ",", "part_of_speech", ",", "dep_heads", ",", "trans_mask", ",", "relative_layer", ",", "ancestors_label", ",", "dep_child_type", ",", "dep_left_ch_num", ",", "dep_right_ch_num", ",", "dep_predicate_parent", ",", "dep_rel_gov_pos", ",", "batch_dp_labels", "=", "self", ".", "read_data", "(", "srl", ",", "pred_parse", ",", "pred_dp", ")", "\n", "total", ",", "same", "=", "0", ",", "0", "\n", "for", "g", ",", "p", "in", "zip", "(", "g_trans_mask", ",", "trans_mask", ")", ":", "\n", "\t\t\t", "for", "g_w", ",", "p_w", "in", "zip", "(", "g", "[", "1", ":", "]", ",", "p", "[", "1", ":", "]", ")", ":", "\n", "\t\t\t\t", "total", "+=", "1", "\n", "same", "+=", "1", "if", "g_w", "==", "p_w", "else", "0", "\n", "", "", "print", "(", "\"srl-cons %d / %d = %.2f\"", "%", "(", "same", ",", "total", ",", "same", "*", "100", "/", "total", ")", ")", "\n", "\n", "total", ",", "same", "=", "0", ",", "0", "\n", "for", "g", ",", "p", "in", "zip", "(", "g_relative_layer", ",", "relative_layer", ")", ":", "\n", "\t\t\t", "for", "g_w", ",", "p_w", "in", "zip", "(", "g", "[", "1", ":", "]", ",", "p", "[", "1", ":", "]", ")", ":", "\n", "\t\t\t\t", "total", "+=", "1", "\n", "same", "+=", "1", "if", "g_w", "==", "p_w", "else", "0", "\n", "", "", "print", "(", "\"full-cons %d / %d = %.2f\"", "%", "(", "same", ",", "total", ",", "same", "*", "100", "/", "total", ")", ")", "\n", "\n", "\n", "if", "self", ".", "config", ".", "pos_multi_task", ":", "\n", "\t\t\t", "part_of_speech", "=", "g_part_of_speech", "\n", "", "if", "self", ".", "config", ".", "feature_loss", ":", "\n", "\t\t\t", "trans_mask", "=", "g_trans_mask", "\n", "", "self", ".", "pred_data", "=", "list", "(", "zip", "(", "verb_idx_list", ",", "idx_sen_list", ",", "tag_list", ",", "char_list", ",", "part_of_speech", ",", "dep_heads", ",", "trans_mask", ",", "relative_layer", ",", "ancestors_label", ",", "dep_child_type", ",", "dep_left_ch_num", ",", "dep_right_ch_num", ",", "dep_predicate_parent", ",", "dep_rel_gov_pos", ",", "batch_dp_labels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.DataReader.to_word_ids": [[268, 275], ["w.lower"], "methods", ["None"], ["", "def", "to_word_ids", "(", "self", ",", "w", ")", ":", "\n", "\t\t", "word", "=", "w", ".", "lower", "(", ")", "\n", "self", ".", "oov_count", "[", "'total'", "]", "+=", "1", "\n", "if", "word", "in", "self", ".", "input_word_dict", ":", "\n", "\t\t\t", "return", "self", ".", "input_word_dict", "[", "word", "]", "\n", "", "self", ".", "oov_count", "[", "'oov'", "]", "+=", "1", "\n", "return", "self", ".", "input_word_dict", "[", "UNKNOWN_WORD", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.DataReader.get_OOV_ratio": [[276, 278], ["None"], "methods", ["None"], ["", "def", "get_OOV_ratio", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "oov_count", "[", "'oov'", "]", "/", "self", ".", "oov_count", "[", "'total'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.DataReader.get_sen_key": [[279, 281], ["None"], "methods", ["None"], ["", "def", "get_sen_key", "(", "self", ",", "sen", ")", ":", "\n", "\t\t", "return", "' '", ".", "join", "(", "sen", "[", "1", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.DataReader.read_data": [[282, 365], ["annotation.read_srl_annotation", "annotation.read_dp_annotation", "print", "annotation.read_parse_annotation", "print", "print", "print", "tqdm.tqdm.tqdm", "zip", "tqdm.tqdm.tqdm", "zip", "io_utils.DataReader.get_sen_key", "tag.index", "range", "dep_left_ch_num.append", "dep_right_ch_num.append", "dep_child_type.append", "dep_predicate_parent.append", "dep_rel_gov_pos.append", "dep_heads.append", "dep_labels.append", "pbar.update", "io_utils.DataReader.get_sen_key", "part_of_speech.append", "trans_mask.append", "relative_layer.append", "ancestors_label.append", "pbar.update", "len", "len", "len", "len", "io_utils.DataReader.to_word_ids", "len", "len", "annotation.extract_dependency_feature", "left_ch_n.append", "right_ch_n.append", "rel_f_pos.append", "c_type.append", "pp_type.append", "len", "tag.index", "annotation.get_constrain_seq", "zip", "parse_tree.pos"], "methods", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.annotation.read_srl_annotation", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.annotation.read_dp_annotation", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.annotation.read_parse_annotation", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.DataReader.get_sen_key", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.DataReader.get_sen_key", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.DataReader.to_word_ids", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.annotation.extract_dependency_feature", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.annotation.get_constrain_seq"], ["", "def", "read_data", "(", "self", ",", "srl_filename", ",", "parse_filename", ",", "dp_filename", ")", ":", "\n", "\t\t", "verb_idx_list", ",", "sen_list", ",", "tag_list", "=", "read_srl_annotation", "(", "srl_filename", ")", "\n", "dp_mapping", "=", "read_dp_annotation", "(", "dp_filename", ")", "\n", "dep_heads", "=", "[", "]", "\n", "dep_labels", "=", "[", "]", "\n", "dep_child_type", "=", "[", "]", "\n", "dep_left_ch_num", "=", "[", "]", "\n", "dep_right_ch_num", "=", "[", "]", "\n", "dep_predicate_parent", "=", "[", "]", "\n", "dep_rel_gov_pos", "=", "[", "]", "\n", "with", "tqdm", "(", "total", "=", "len", "(", "sen_list", ")", ")", "as", "pbar", ":", "\n", "\t\t\t", "for", "tag", ",", "sen", "in", "zip", "(", "tag_list", ",", "sen_list", ")", ":", "\n", "\t\t\t\t", "key", "=", "self", ".", "get_sen_key", "(", "sen", ")", "\n", "predicate_index", "=", "tag", ".", "index", "(", "'B-V'", ")", "\n", "head", ",", "g_label", "=", "dp_mapping", "[", "key", "]", "\n", "dp_head", "=", "[", "0", "]", "+", "head", "\n", "dp_label", "=", "[", "'ROOT'", "]", "+", "g_label", "\n", "left_ch_n", ",", "right_ch_n", ",", "rel_f_pos", ",", "c_type", ",", "pp_type", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "sen", ")", ")", ":", "\n", "\t\t\t\t\t", "num_left_ch", ",", "num_right_ch", ",", "relative_f_pos", ",", "predicate_as_parent", ",", "child_type", "=", "extract_dependency_feature", "(", "predicate_index", ",", "i", ",", "dp_head", ")", "\n", "left_ch_n", ".", "append", "(", "num_left_ch", ")", "\n", "right_ch_n", ".", "append", "(", "num_right_ch", ")", "\n", "rel_f_pos", ".", "append", "(", "relative_f_pos", ")", "\n", "c_type", ".", "append", "(", "child_type", ")", "\n", "pp_type", ".", "append", "(", "predicate_as_parent", ")", "\n", "", "dep_left_ch_num", ".", "append", "(", "left_ch_n", ")", "\n", "dep_right_ch_num", ".", "append", "(", "right_ch_n", ")", "\n", "dep_child_type", ".", "append", "(", "c_type", ")", "\n", "dep_predicate_parent", ".", "append", "(", "pp_type", ")", "\n", "dep_rel_gov_pos", ".", "append", "(", "rel_f_pos", ")", "\n", "dep_heads", ".", "append", "(", "dp_head", ")", "\n", "dep_labels", ".", "append", "(", "dp_label", ")", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "", "", "print", "(", "\"dep done\"", ")", "\n", "\n", "parse_mapping", "=", "read_parse_annotation", "(", "parse_filename", ")", "\n", "trans_mask", "=", "[", "]", "\n", "part_of_speech", "=", "[", "]", "\n", "relative_layer", "=", "[", "]", "\n", "ancestors_label", "=", "[", "]", "\n", "with", "tqdm", "(", "total", "=", "len", "(", "sen_list", ")", ")", "as", "pbar", ":", "\n", "\t\t\t", "for", "tag", ",", "sen", "in", "zip", "(", "tag_list", ",", "sen_list", ")", ":", "\n", "\t\t\t\t", "key", "=", "self", ".", "get_sen_key", "(", "sen", ")", "\n", "predicate_index", "=", "tag", ".", "index", "(", "'B-V'", ")", "-", "1", "\n", "(", "parse_tree", ",", "(", "label", ",", "relative_l", ")", ",", "transition_operations", ")", "=", "parse_mapping", "[", "key", "]", "\n", "constrains", "=", "[", "'R-PP'", "if", "self", ".", "config", ".", "use_span_label", "else", "'R'", "]", "+", "get_constrain_seq", "(", "parse_tree", ",", "predicate_index", ")", "\n", "constrains", "=", "[", "t", "if", "t", "in", "[", "'B-V'", ",", "'I-V'", "]", "else", "c", "for", "(", "t", ",", "c", ")", "in", "zip", "(", "tag", ",", "constrains", ")", "]", "\n", "constrains", "=", "constrains", "if", "self", ".", "config", ".", "use_span_label", "else", "[", "t", "if", "t", "in", "[", "'B-V'", ",", "'I-V'", "]", "else", "t", "[", "0", "]", "for", "t", "in", "constrains", "]", "\n", "part_of_speech", ".", "append", "(", "[", "'NN'", "]", "+", "[", "pos", "for", "(", "_", ",", "pos", ")", "in", "parse_tree", ".", "pos", "(", ")", "]", ")", "\n", "trans_mask", ".", "append", "(", "constrains", ")", "\n", "relative_layer", ".", "append", "(", "[", "'NONE'", "]", "+", "relative_l", ")", "\n", "ancestors_label", ".", "append", "(", "[", "'NONE'", "]", "+", "label", ")", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "\n", "", "", "assert", "len", "(", "verb_idx_list", ")", "==", "len", "(", "sen_list", ")", "and", "len", "(", "tag_list", ")", "==", "len", "(", "sen_list", ")", "\n", "idx_sen_list", "=", "[", "[", "self", ".", "to_word_ids", "(", "w", ")", "for", "w", "in", "sen", "]", "for", "sen", "in", "sen_list", "]", "\n", "if", "self", ".", "use_elmo", ":", "idx_sen_list", "=", "sen_list", "\n", "tag_list", "=", "[", "[", "self", ".", "output_tag_dict", "[", "t", "]", "for", "t", "in", "tag", "]", "for", "tag", "in", "tag_list", "]", "\n", "char_list", "=", "[", "[", "[", "self", ".", "char_dict", "[", "c", "]", "for", "c", "in", "w", "]", "for", "w", "in", "sen", "]", "for", "sen", "in", "sen_list", "]", "\n", "part_of_speech", "=", "[", "[", "self", ".", "pos_dict", "[", "c", "]", "for", "c", "in", "sen", "]", "for", "sen", "in", "part_of_speech", "]", "\n", "dep_labels", "=", "[", "[", "self", ".", "dep_label_dict", "[", "c", "]", "for", "c", "in", "sen", "]", "for", "sen", "in", "dep_labels", "]", "\n", "trans_mask", "=", "[", "[", "self", ".", "span_label_dict", "[", "c", "]", "for", "c", "in", "sen", "]", "for", "sen", "in", "trans_mask", "]", "\n", "\n", "if", "self", ".", "config", ".", "soft_dp", ":", "\n", "\t\t\t", "verb_idx_list", "=", "trans_mask", "\n", "", "print", "(", "\"parse done\"", ")", "\n", "\n", "count", "=", "0", "\n", "for", "sen", "in", "relative_layer", ":", "\n", "\t\t\t", "for", "c", "in", "sen", ":", "\n", "\t\t\t\t", "if", "c", "not", "in", "self", ".", "relative_level_dict", ":", "\n", "\t\t\t\t\t", "count", "+=", "1", "\n", "", "", "", "print", "(", "\"RELATIVE LAYER MISSING: %d\"", "%", "count", ")", "\n", "\n", "count", "=", "0", "\n", "for", "sen", "in", "ancestors_label", ":", "\n", "\t\t\t", "for", "c", "in", "sen", ":", "\n", "\t\t\t\t", "if", "c", "not", "in", "self", ".", "ancestors_label_dict", ":", "\n", "\t\t\t\t\t", "count", "+=", "1", "\n", "", "", "", "print", "(", "\"ANCESTORS LAYER MISSING: %d\"", "%", "count", ")", "\n", "relative_layer", "=", "[", "[", "self", ".", "relative_level_dict", "[", "c", "]", "if", "c", "in", "self", ".", "relative_level_dict", "else", "self", ".", "relative_level_dict", "[", "'NONE'", "]", "for", "c", "in", "sen", "]", "for", "sen", "in", "relative_layer", "]", "\n", "ancestors_label", "=", "[", "[", "self", ".", "ancestors_label_dict", "[", "c", "]", "if", "c", "in", "self", ".", "ancestors_label_dict", "else", "self", ".", "ancestors_label_dict", "[", "'NONE'", "]", "for", "c", "in", "sen", "]", "for", "sen", "in", "ancestors_label", "]", "\n", "return", "verb_idx_list", ",", "idx_sen_list", ",", "tag_list", ",", "char_list", ",", "part_of_speech", ",", "dep_heads", ",", "trans_mask", ",", "relative_layer", ",", "ancestors_label", ",", "dep_child_type", ",", "dep_left_ch_num", ",", "dep_right_ch_num", ",", "dep_predicate_parent", ",", "dep_rel_gov_pos", ",", "dep_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.DataReader.has_next": [[366, 368], ["len"], "methods", ["None"], ["", "def", "has_next", "(", "self", ")", ":", "\n", "\t\t", "return", "len", "(", "self", ".", "batch_list", ")", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.DataReader.__iter__": [[369, 371], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "\t\t", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.DataReader.choose_data": [[372, 381], ["ValueError", "zip", "random.random"], "methods", ["None"], ["", "def", "choose_data", "(", "self", ")", ":", "\n", "\t\t", "if", "self", ".", "what_to_use", "==", "'gold'", ":", "\n", "\t\t\t", "return", "self", ".", "golden_data", "\n", "", "elif", "self", ".", "what_to_use", "==", "'pred'", ":", "\n", "\t\t\t", "return", "self", ".", "pred_data", "\n", "", "elif", "self", ".", "what_to_use", "==", "'mix'", ":", "\n", "\t\t\t", "return", "[", "g", "if", "random", ".", "random", "(", ")", ">", "0.5", "else", "p", "for", "(", "g", ",", "p", ")", "in", "zip", "(", "self", ".", "golden_data", ",", "self", ".", "pred_data", ")", "]", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "'Unknown Data Type: {}'", ".", "format", "(", "self", ".", "what_to_use", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.DataReader.compute_batch": [[382, 401], ["io_utils.DataReader.choose_data", "sorted", "range", "range", "len", "indexed_batch_list.append", "len", "indexed_batch_list.append", "io_utils.DataReader.batch_list.append", "enumerate", "new_batch.append", "io_utils.DataReader.sorted_order.append", "len", "len", "len", "random.random"], "methods", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.DataReader.choose_data"], ["", "", "def", "compute_batch", "(", "self", ")", ":", "\n", "\t\t", "combined_data", "=", "self", ".", "choose_data", "(", ")", "\n", "current_data", "=", "[", "(", "i", ",", "data", ")", "for", "i", ",", "data", "in", "enumerate", "(", "combined_data", ")", "]", "\n", "current_data", "=", "sorted", "(", "current_data", ",", "key", "=", "lambda", "x", ":", "(", "len", "(", "x", "[", "1", "]", "[", "1", "]", ")", ",", "random", ".", "random", "(", ")", ")", ")", "\n", "large_batch", "=", "[", "x", "for", "x", "in", "current_data", "if", "len", "(", "x", "[", "1", "]", "[", "1", "]", ")", ">=", "self", ".", "large_batch_split", "]", "\n", "small_batch", "=", "[", "x", "for", "x", "in", "current_data", "if", "len", "(", "x", "[", "1", "]", "[", "1", "]", ")", "<", "self", ".", "large_batch_split", "]", "\n", "indexed_batch_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "small_batch", ")", ",", "self", ".", "batch_size", ")", ":", "\n", "\t\t\t", "indexed_batch_list", ".", "append", "(", "small_batch", "[", "i", ":", "i", "+", "self", ".", "batch_size", "]", ")", "\n", "", "for", "i", "in", "range", "(", "0", ",", "len", "(", "large_batch", ")", ",", "self", ".", "large_batch_size", ")", ":", "\n", "\t\t\t", "indexed_batch_list", ".", "append", "(", "large_batch", "[", "i", ":", "i", "+", "self", ".", "large_batch_size", "]", ")", "\n", "", "self", ".", "sorted_order", "=", "[", "]", "\n", "self", ".", "batch_list", "=", "[", "]", "\n", "for", "batch", "in", "indexed_batch_list", ":", "\n", "\t\t\t", "new_batch", "=", "[", "]", "\n", "for", "x", "in", "batch", ":", "\n", "\t\t\t\t", "new_batch", ".", "append", "(", "x", "[", "1", "]", ")", "\n", "self", ".", "sorted_order", ".", "append", "(", "x", "[", "0", "]", ")", "\n", "", "self", ".", "batch_list", ".", "append", "(", "new_batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.DataReader.__next__": [[402, 437], ["io_utils.DataReader.batch_list.pop", "list", "numpy.array", "io_utils.DataReader.pad_sen_func", "io_utils.DataReader.pad_sen_func", "io_utils.DataReader.pad_sen_func", "io_utils.DataReader.pad_sen_func", "io_utils.DataReader.pad_sen_func", "io_utils.DataReader.pad_sen_func", "io_utils.DataReader.pad_sen_func", "io_utils.DataReader.pad_sen_func", "io_utils.DataReader.pad_sen_func", "io_utils.DataReader.pad_sen_func", "io_utils.DataReader.pad_sen_func", "io_utils.DataReader.pad_sen_func", "io_utils.DataReader.pad_sen_func", "io_utils.DataReader.has_next", "StopIteration", "len", "io_utils.DataReader.compute_batch", "zip", "numpy.max", "io_utils.DataReader.pad_sen_func", "numpy.max", "io_utils.DataReader.pad_sen_func", "len", "min", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.DataReader.has_next", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.DataReader.compute_batch"], ["", "", "def", "__next__", "(", "self", ")", ":", "\n", "\t\t", "if", "not", "self", ".", "has_next", "(", ")", ":", "\n", "\t\t\t", "raise", "StopIteration", "(", ")", "\n", "\n", "", "if", "len", "(", "self", ".", "batch_list", ")", "==", "0", ":", "\n", "\t\t\t", "self", ".", "compute_batch", "(", ")", "\n", "\n", "", "data_step", "=", "self", ".", "batch_list", ".", "pop", "(", "0", ")", "\n", "[", "batch_verb_id", ",", "batch_sen_list", ",", "batch_tag_list", ",", "batch_char_list", ",", "batch_pos_list", ",", "batch_dep_heads", ",", "batch_trans_mask", ",", "batch_relative_layer", ",", "batch_ancestors_label", ",", "batch_child_type", ",", "batch_left_ch_num", ",", "batch_right_ch_num", ",", "batch_ppt", ",", "batch_rel_gov_pos", ",", "batch_dp_labels", "]", "=", "list", "(", "zip", "(", "*", "data_step", ")", ")", "\n", "batch_len", "=", "np", ".", "array", "(", "[", "len", "(", "x", ")", "for", "x", "in", "batch_sen_list", "]", ")", "\n", "batch_size", ",", "max_len", "=", "batch_len", ".", "shape", "[", "0", "]", ",", "np", ".", "max", "(", "batch_len", ")", "\n", "if", "not", "self", ".", "use_elmo", ":", "\n", "\t\t\t", "batch_sen", "=", "self", ".", "pad_sen_func", "(", "batch_sen_list", ",", "padding", "=", "'post'", ",", "truncating", "=", "'post'", ")", "\n", "", "else", ":", "\n", "\t\t\t", "max_len", "=", "np", ".", "max", "(", "batch_len", ")", "\n", "batch_sen", "=", "[", "x", "+", "[", "\"\"", "]", "*", "(", "max_len", "-", "len", "(", "x", ")", ")", "for", "x", "in", "batch_sen_list", "]", "\n", "", "batch_tag", "=", "self", ".", "pad_sen_func", "(", "batch_tag_list", ",", "padding", "=", "'post'", ",", "truncating", "=", "'post'", ")", "\n", "batch_pos", "=", "self", ".", "pad_sen_func", "(", "batch_pos_list", ",", "padding", "=", "'post'", ",", "truncating", "=", "'post'", ")", "\n", "batch_trans_mask", "=", "self", ".", "pad_sen_func", "(", "batch_trans_mask", ",", "padding", "=", "'post'", ",", "truncating", "=", "'post'", ")", "\n", "batch_char_list", "=", "[", "bc", "+", "[", "[", "0", "]", "]", "*", "(", "len", "(", "batch_sen", "[", "0", "]", ")", "-", "len", "(", "bc", ")", ")", "for", "bc", "in", "batch_char_list", "]", "\n", "batch_char_lens", "=", "[", "[", "min", "(", "len", "(", "c", ")", ",", "self", ".", "config", ".", "word_max_length", ")", "for", "c", "in", "bc", "]", "for", "bc", "in", "batch_char_list", "]", "\n", "batch_char", "=", "[", "self", ".", "pad_sen_func", "(", "bc", ",", "padding", "=", "'post'", ",", "truncating", "=", "'post'", ",", "maxlen", "=", "self", ".", "config", ".", "word_max_length", ")", "for", "bc", "in", "batch_char_list", "]", "\n", "batch_position", "=", "self", ".", "pad_sen_func", "(", "batch_verb_id", ",", "padding", "=", "'post'", ",", "truncating", "=", "'post'", ")", "\n", "batch_dep_heads", "=", "self", ".", "pad_sen_func", "(", "batch_dep_heads", ",", "padding", "=", "'post'", ",", "truncating", "=", "'post'", ")", "\n", "batch_relative_layer", "=", "self", ".", "pad_sen_func", "(", "batch_relative_layer", ",", "padding", "=", "'post'", ",", "truncating", "=", "'post'", ")", "\n", "batch_ancestors_label", "=", "self", ".", "pad_sen_func", "(", "batch_ancestors_label", ",", "padding", "=", "'post'", ",", "truncating", "=", "'post'", ")", "\n", "\n", "batch_child_type", "=", "self", ".", "pad_sen_func", "(", "batch_child_type", ",", "padding", "=", "'post'", ",", "truncating", "=", "'post'", ")", "\n", "batch_left_ch_num", "=", "self", ".", "pad_sen_func", "(", "batch_left_ch_num", ",", "padding", "=", "'post'", ",", "truncating", "=", "'post'", ")", "\n", "batch_right_ch_num", "=", "self", ".", "pad_sen_func", "(", "batch_right_ch_num", ",", "padding", "=", "'post'", ",", "truncating", "=", "'post'", ")", "\n", "batch_ppt", "=", "self", ".", "pad_sen_func", "(", "batch_ppt", ",", "padding", "=", "'post'", ",", "truncating", "=", "'post'", ")", "\n", "batch_rel_gov_pos", "=", "self", ".", "pad_sen_func", "(", "batch_rel_gov_pos", ",", "padding", "=", "'post'", ",", "truncating", "=", "'post'", ")", "\n", "batch_dp_labels", "=", "self", ".", "pad_sen_func", "(", "batch_dp_labels", ",", "padding", "=", "'post'", ",", "truncating", "=", "'post'", ")", "\n", "\n", "return", "batch_len", ",", "batch_position", ",", "batch_sen", ",", "batch_tag", ",", "batch_char", ",", "batch_pos", ",", "batch_dep_heads", ",", "batch_trans_mask", ",", "batch_relative_layer", ",", "batch_ancestors_label", ",", "batch_child_type", ",", "batch_left_ch_num", ",", "batch_right_ch_num", ",", "batch_ppt", ",", "batch_rel_gov_pos", ",", "batch_dp_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.DataReader.__len__": [[438, 441], ["len", "len", "io_utils.DataReader.compute_batch"], "methods", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.DataReader.compute_batch"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "if", "len", "(", "self", ".", "batch_list", ")", "==", "0", ":", "self", ".", "compute_batch", "(", ")", "\n", "return", "len", "(", "self", ".", "batch_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.ModelSaver.__init__": [[444, 461], ["tensorflow.train.Saver", "os.path.join", "open", "os.path.exists", "os.makedirs", "ValueError"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "model_dir", ",", "debug", ",", "is_dev", ")", ":", "\n", "\t\t", "self", ".", "serialization_dir", "=", "model_dir", "\n", "self", ".", "debug", "=", "debug", "or", "is_dev", "\n", "\n", "if", "not", "self", ".", "debug", ":", "\n", "\t\t\t", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "serialization_dir", ")", ":", "\n", "\t\t\t\t", "os", ".", "makedirs", "(", "self", ".", "serialization_dir", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "raise", "ValueError", "(", "'model dict should be empty'", ")", "\n", "\n", "", "", "if", "not", "self", ".", "debug", ":", "\n", "\t\t\t", "self", ".", "running_out", "=", "os", ".", "path", ".", "join", "(", "self", ".", "serialization_dir", ",", "'running_output.txt'", ")", "\n", "sys", ".", "stdout", "=", "open", "(", "self", ".", "running_out", ",", "'w'", ")", "\n", "\n", "", "self", ".", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "max_to_keep", "=", "1", ")", "\n", "self", ".", "best_metrics", "=", "0", "\n", "self", ".", "iteration", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.ModelSaver.save": [[462, 473], ["print", "os.path.join", "io_utils.ModelSaver.saver.save"], "methods", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.ModelSaver.save"], ["", "def", "save", "(", "self", ",", "dev_metrics", ",", "sess", ",", "epoch", ")", ":", "\n", "\t\t", "if", "dev_metrics", ">=", "self", ".", "best_metrics", ":", "\n", "\t\t\t", "print", "(", "\"best model ever\"", ")", "\n", "self", ".", "best_metrics", "=", "dev_metrics", "\n", "self", ".", "iteration", "=", "epoch", "\n", "if", "self", ".", "debug", ":", "return", "True", "\n", "model_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "serialization_dir", ",", "'model'", ")", "\n", "self", ".", "saver", ".", "save", "(", "sess", ",", "model_path", ",", "global_step", "=", "epoch", ")", "\n", "return", "True", "\n", "", "else", ":", "\n", "\t\t\t", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.ModelSaver.load_model": [[474, 477], ["tensorflow.train.latest_checkpoint", "io_utils.ModelSaver.saver.restore"], "methods", ["None"], ["", "", "def", "load_model", "(", "self", ",", "sess", ")", ":", "\n", "\t\t", "file_to_load", "=", "tf", ".", "train", ".", "latest_checkpoint", "(", "self", ".", "serialization_dir", ")", "\n", "self", ".", "saver", ".", "restore", "(", "sess", ",", "file_to_load", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.ModelSaver.output_best_performance": [[478, 480], ["print"], "methods", ["None"], ["", "def", "output_best_performance", "(", "self", ")", ":", "\n", "\t\t", "print", "(", "\"Best model: dev %.2f in iteration %d\"", "%", "(", "self", ".", "best_metrics", ",", "self", ".", "iteration", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.create_trans_mask": [[14, 47], ["len", "numpy.ones", "numpy.ones", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "reversed_tag[].startswith", "reversed_tag[].startswith", "reversed_tag[].startswith", "reversed_tag[].startswith"], "function", ["None"], ["def", "create_trans_mask", "(", "reversed_tag", ")", ":", "\n", "\t", "ntags", "=", "len", "(", "reversed_tag", ")", "\n", "trans_mask", "=", "np", ".", "ones", "(", "(", "6", ",", "ntags", ",", "ntags", ")", ")", "\n", "unary_mask", "=", "np", ".", "ones", "(", "(", "6", ",", "ntags", ")", ")", "\n", "Inf", "=", "1e10", "\n", "for", "i", "in", "range", "(", "ntags", ")", ":", "\n", "\t\t", "for", "j", "in", "range", "(", "ntags", ")", ":", "\n", "\t\t\t", "if", "reversed_tag", "[", "j", "]", ".", "startswith", "(", "'B'", ")", "or", "reversed_tag", "[", "j", "]", ".", "startswith", "(", "'I'", ")", "or", "reversed_tag", "[", "j", "]", "in", "[", "'B-V'", ",", "'I-V'", "]", ":", "\n", "\t\t\t\t", "trans_mask", "[", "0", ",", "i", ",", "j", "]", "=", "-", "1", "*", "Inf", "\n", "unary_mask", "[", "0", ",", "j", "]", "=", "-", "1", "*", "Inf", "\n", "", "", "", "for", "i", "in", "range", "(", "ntags", ")", ":", "\n", "\t\t", "for", "j", "in", "range", "(", "ntags", ")", ":", "\n", "\t\t\t", "if", "reversed_tag", "[", "j", "]", ".", "startswith", "(", "'I'", ")", "or", "reversed_tag", "[", "j", "]", "in", "[", "'B-V'", ",", "'I-V'", "]", ":", "\n", "\t\t\t\t", "trans_mask", "[", "1", ",", "i", ",", "j", "]", "=", "-", "1", "*", "Inf", "\n", "unary_mask", "[", "1", ",", "j", "]", "=", "-", "1", "*", "Inf", "\n", "", "", "", "for", "i", "in", "range", "(", "ntags", ")", ":", "\n", "\t\t", "for", "j", "in", "range", "(", "ntags", ")", ":", "\n", "\t\t\t", "if", "reversed_tag", "[", "j", "]", ".", "startswith", "(", "'B'", ")", "or", "reversed_tag", "[", "j", "]", "in", "[", "'B-V'", ",", "'I-V'", "]", ":", "\n", "\t\t\t\t", "trans_mask", "[", "2", ",", "i", ",", "j", "]", "=", "-", "1", "*", "Inf", "\n", "unary_mask", "[", "2", ",", "j", "]", "=", "-", "1", "*", "Inf", "\n", "", "", "", "for", "i", "in", "range", "(", "ntags", ")", ":", "\n", "\t\t", "for", "j", "in", "range", "(", "ntags", ")", ":", "\n", "\t\t\t", "if", "reversed_tag", "[", "j", "]", "==", "'B-V'", ":", "\n", "\t\t\t\t", "continue", "\n", "", "trans_mask", "[", "4", ",", "i", ",", "j", "]", "=", "-", "1", "*", "Inf", "\n", "unary_mask", "[", "4", ",", "j", "]", "=", "-", "1", "*", "Inf", "\n", "", "", "for", "i", "in", "range", "(", "ntags", ")", ":", "\n", "\t\t", "for", "j", "in", "range", "(", "ntags", ")", ":", "\n", "\t\t\t", "if", "reversed_tag", "[", "j", "]", "==", "'I-V'", ":", "\n", "\t\t\t\t", "continue", "\n", "", "trans_mask", "[", "5", ",", "i", ",", "j", "]", "=", "-", "1", "*", "Inf", "\n", "unary_mask", "[", "5", ",", "j", "]", "=", "-", "1", "*", "Inf", "\n", "", "", "return", "trans_mask", ",", "unary_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.get_chunks": [[48, 85], ["enumerate", "chunks.append", "tag_name.split", "tag_name.split", "tags.items", "chunks.append", "len", "io_utils.get_chunks.get_chunk_type"], "function", ["None"], ["", "def", "get_chunks", "(", "seq", ",", "tags", ",", "default_tag", ")", ":", "\n", "\n", "    ", "def", "get_chunk_type", "(", "tok", ",", "idx_to_tag", ")", ":", "\n", "        ", "tag_name", "=", "idx_to_tag", "[", "tok", "]", "\n", "tag_class", "=", "tag_name", ".", "split", "(", "'-'", ")", "[", "0", "]", "\n", "tag_type", "=", "tag_name", ".", "split", "(", "'-'", ")", "[", "-", "1", "]", "\n", "return", "tag_class", ",", "tag_type", "\n", "\n", "", "default", "=", "tags", "[", "default_tag", "]", "\n", "idx_to_tag", "=", "{", "idx", ":", "tag", "for", "tag", ",", "idx", "in", "tags", ".", "items", "(", ")", "}", "\n", "chunks", "=", "[", "]", "\n", "chunk_type", ",", "chunk_start", "=", "None", ",", "None", "\n", "for", "i", ",", "tok", "in", "enumerate", "(", "seq", ")", ":", "\n", "# End of a chunk 1", "\n", "        ", "if", "tok", "==", "default", "and", "chunk_type", "is", "not", "None", ":", "\n", "# Add a chunk.", "\n", "            ", "chunk", "=", "(", "chunk_type", ",", "chunk_start", ",", "i", ")", "\n", "chunks", ".", "append", "(", "chunk", ")", "\n", "chunk_type", ",", "chunk_start", "=", "None", ",", "None", "\n", "\n", "# End of a chunk + start of a chunk!", "\n", "", "elif", "tok", "!=", "default", ":", "\n", "            ", "tok_chunk_class", ",", "tok_chunk_type", "=", "get_chunk_type", "(", "tok", ",", "idx_to_tag", ")", "\n", "if", "chunk_type", "is", "None", ":", "\n", "                ", "chunk_type", ",", "chunk_start", "=", "tok_chunk_type", ",", "i", "\n", "", "elif", "tok_chunk_type", "!=", "chunk_type", "or", "tok_chunk_class", "==", "\"B\"", ":", "\n", "                ", "chunk", "=", "(", "chunk_type", ",", "chunk_start", ",", "i", ")", "\n", "chunks", ".", "append", "(", "chunk", ")", "\n", "chunk_type", ",", "chunk_start", "=", "tok_chunk_type", ",", "i", "\n", "", "", "else", ":", "\n", "            ", "pass", "\n", "# end condition", "\n", "", "", "if", "chunk_type", "is", "not", "None", ":", "\n", "        ", "chunk", "=", "(", "chunk_type", ",", "chunk_start", ",", "len", "(", "seq", ")", ")", "\n", "chunks", ".", "append", "(", "chunk", ")", "\n", "\n", "", "return", "chunks", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.select_oracle": [[86, 103], ["io_utils.get_chunks", "io_utils.get_chunks", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.get_chunks", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.get_chunks"], ["", "def", "select_oracle", "(", "golden", ",", "prediction", ",", "tag_dict", ",", "default_tag", "=", "'O'", ")", ":", "\n", "\t", "gold_arguments", "=", "get_chunks", "(", "golden", ",", "tag_dict", ",", "default_tag", ")", "\n", "pred_arguments", "=", "get_chunks", "(", "prediction", ",", "tag_dict", ",", "default_tag", ")", "\n", "\n", "if", "len", "(", "pred_arguments", ")", "==", "0", "or", "len", "(", "gold_arguments", ")", "==", "0", ":", "\n", "\t\t", "return", "0.0", "\n", "\n", "", "correct", "=", "0", "\n", "for", "p", "in", "pred_arguments", ":", "\n", "\t\t", "for", "g", "in", "gold_arguments", ":", "\n", "\t\t\t", "if", "p", "[", "0", "]", "==", "g", "[", "0", "]", "and", "p", "[", "1", "]", "==", "g", "[", "1", "]", "and", "p", "[", "2", "]", "==", "g", "[", "2", "]", ":", "\n", "\t\t\t\t", "correct", "+=", "1", "\n", "break", "\n", "", "", "", "precision", "=", "correct", "/", "len", "(", "pred_arguments", ")", "\n", "recall", "=", "correct", "/", "len", "(", "gold_arguments", ")", "\n", "\n", "return", "2", "*", "precision", "*", "recall", "/", "(", "recall", "+", "precision", ")", "if", "correct", ">", "0", "else", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.read_item_file": [[104, 114], ["open", "line.strip.strip", "len"], "function", ["None"], ["", "def", "read_item_file", "(", "file_name", ",", "add_pad", "=", "True", ")", ":", "\n", "\t", "tag_dict", "=", "{", "}", "\n", "if", "add_pad", ":", "\n", "\t\t", "tag_dict", "[", "'<PAD>'", "]", "=", "0", "\n", "", "with", "open", "(", "file_name", ")", "as", "tag_f", ":", "\n", "\t\t", "for", "line", "in", "tag_f", ":", "\n", "\t\t\t", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", "not", "in", "tag_dict", ":", "\n", "\t\t\t\t", "tag_dict", "[", "line", "]", "=", "len", "(", "tag_dict", ")", "\n", "", "", "", "return", "tag_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.read_word_embedding": [[115, 125], ["open", "line.strip.strip", "word_embedding_word.append", "line.strip.split", "line.strip.split"], "function", ["None"], ["", "def", "read_word_embedding", "(", "file_name", ")", ":", "\n", "\t", "word_embedding_word", "=", "[", "]", "\n", "word_embedding_dict", "=", "{", "}", "\n", "with", "open", "(", "file_name", ")", "as", "word_embedding", ":", "\n", "\t\t", "for", "line", "in", "word_embedding", ":", "\n", "\t\t\t", "line", "=", "line", ".", "strip", "(", ")", "\n", "current_word", "=", "line", ".", "split", "(", ")", "[", "0", "]", "\n", "word_embedding_word", ".", "append", "(", "current_word", ")", "\n", "word_embedding_dict", "[", "current_word", "]", "=", "line", ".", "split", "(", ")", "[", "1", ":", "]", "\n", "", "", "return", "word_embedding_word", ",", "word_embedding_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.create_word_embedding": [[126, 135], ["io_utils.read_word_embedding", "numpy.random.normal", "len", "numpy.asarray", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.read_word_embedding"], ["", "def", "create_word_embedding", "(", "embedding_file", ",", "embeds_dim", ")", ":", "\n", "\t", "word_list", ",", "word_dict", "=", "read_word_embedding", "(", "embedding_file", ")", "\n", "word_index_dict", "=", "{", "UNKNOWN_WORD", ":", "1", ",", "PAD", ":", "0", ",", "ROOT", ":", "2", "}", "\n", "word_embedding", "=", "np", ".", "random", ".", "normal", "(", "scale", "=", "0.01", ",", "size", "=", "(", "len", "(", "word_dict", ")", "+", "len", "(", "word_index_dict", ")", ",", "embeds_dim", ")", ")", "\n", "for", "w", "in", "word_list", ":", "\n", "\t\t", "word_index_dict", "[", "w", "]", "=", "len", "(", "word_index_dict", ")", "\n", "assert", "len", "(", "word_dict", "[", "w", "]", ")", "==", "embeds_dim", "\n", "word_embedding", "[", "word_index_dict", "[", "w", "]", ",", ":", "]", "=", "np", ".", "asarray", "(", "word_dict", "[", "w", "]", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "", "return", "word_embedding", ",", "word_index_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.bio_to_se": [[136, 150], ["len", "enumerate", "new_labels.append", "new_labels.append"], "function", ["None"], ["", "def", "bio_to_se", "(", "labels", ")", ":", "\n", "\t", "slen", "=", "len", "(", "labels", ")", "\n", "new_labels", "=", "[", "]", "\n", "for", "i", ",", "label", "in", "enumerate", "(", "labels", ")", ":", "\n", "\t\t", "if", "label", "==", "'O'", ":", "\n", "\t\t\t", "new_labels", ".", "append", "(", "'*'", ")", "\n", "continue", "\n", "", "new_label", "=", "'*'", "\n", "if", "label", "[", "0", "]", "==", "'B'", "or", "i", "==", "0", "or", "label", "[", "1", ":", "]", "!=", "labels", "[", "i", "-", "1", "]", "[", "1", ":", "]", ":", "\n", "\t\t\t", "new_label", "=", "'('", "+", "label", "[", "2", ":", "]", "+", "new_label", "\n", "", "if", "i", "==", "slen", "-", "1", "or", "labels", "[", "i", "+", "1", "]", "[", "0", "]", "==", "'B'", "or", "label", "[", "1", ":", "]", "!=", "labels", "[", "i", "+", "1", "]", "[", "1", ":", "]", ":", "\n", "\t\t\t", "new_label", "=", "new_label", "+", "')'", "\n", "", "new_labels", ".", "append", "(", "new_label", ")", "\n", "", "return", "new_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.print_sentence_to_conll": [[151, 160], ["range", "fout.write", "len", "fout.write", "fout.write", "len", "len", "tokens[].ljust", "fout.write", "label_column[].rjust"], "function", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.write", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.write", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.write", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.write"], ["", "def", "print_sentence_to_conll", "(", "fout", ",", "tokens", ",", "labels", ")", ":", "\n", "\t", "for", "label_column", "in", "labels", ":", "\n", "\t\t", "assert", "len", "(", "label_column", ")", "==", "len", "(", "tokens", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "tokens", ")", ")", ":", "\n", "\t\t", "fout", ".", "write", "(", "tokens", "[", "i", "]", ".", "ljust", "(", "15", ")", ")", "\n", "for", "label_column", "in", "labels", ":", "\n", "\t\t\t", "fout", ".", "write", "(", "label_column", "[", "i", "]", ".", "rjust", "(", "15", ")", ")", "\n", "", "fout", ".", "write", "(", "\"\\n\"", ")", "\n", "", "fout", ".", "write", "(", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.print_to_conll": [[161, 186], ["open", "open", "line.strip.strip", "len", "io_utils.print_sentence_to_conll", "io_utils.print_sentence_to_conll", "line.strip.split", "tokens_buf.append", "len", "len"], "function", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.print_sentence_to_conll", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.print_sentence_to_conll"], ["", "def", "print_to_conll", "(", "pred_labels", ",", "gold_props_file", ",", "output_filename", ")", ":", "\n", "\n", "\t", "seq_ptr", "=", "0", "\n", "num_props_for_sentence", "=", "0", "\n", "tokens_buf", "=", "[", "]", "\n", "\n", "with", "open", "(", "output_filename", ",", "'w'", ")", "as", "fout", ":", "\n", "\t\t", "with", "open", "(", "gold_props_file", ")", "as", "gold_file", ":", "\n", "\t\t\t", "for", "line", "in", "gold_file", ":", "\n", "\t\t\t\t", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", "==", "\"\"", "and", "len", "(", "tokens_buf", ")", ">", "0", ":", "\n", "\t\t\t\t\t", "pred_output", "=", "pred_labels", "[", "seq_ptr", ":", "seq_ptr", "+", "num_props_for_sentence", "]", "\n", "print_sentence_to_conll", "(", "fout", ",", "tokens_buf", ",", "pred_output", ")", "\n", "seq_ptr", "+=", "num_props_for_sentence", "\n", "tokens_buf", "=", "[", "]", "\n", "num_props_for_sentence", "=", "0", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "info", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "num_props_for_sentence", "=", "len", "(", "info", ")", "-", "1", "\n", "tokens_buf", ".", "append", "(", "info", "[", "0", "]", ")", "\n", "\n", "# Output last sentence. ", "\n", "", "", "if", "len", "(", "tokens_buf", ")", ">", "0", ":", "\n", "\t\t\t\t", "pred_output", "=", "pred_labels", "[", "seq_ptr", ":", "seq_ptr", "+", "num_props_for_sentence", "]", "\n", "print_sentence_to_conll", "(", "fout", ",", "tokens_buf", ",", "pred_output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.print_srl_eval": [[187, 206], ["io_utils.print_to_conll", "subprocess.Popen", "[].decode", "print", "float", "float", "float", "float", "io_utils.EvaluationPerformance", "tempfile.TemporaryDirectory", "os.path.join", "io_utils.bio_to_se", "tempfile.TemporaryDirectory.cleanup", "[].strip().split", "[].strip().split", "[].strip().split", "[].strip().split", "subprocess.Popen.communicate", "[].strip", "[].strip", "[].strip", "[].strip", "[].decode.strip().split", "[].decode.strip().split", "[].decode.strip().split", "[].decode.strip().split", "[].decode.strip", "[].decode.strip", "[].decode.strip", "[].decode.strip"], "function", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.print_to_conll", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.io_utils.bio_to_se"], ["", "", "", "", "def", "print_srl_eval", "(", "srl_predictions", ",", "gold_props", ",", "eval_script", ",", "output_file", "=", "None", ")", ":", "\n", "\t", "temp_dir", "=", "None", "\n", "if", "output_file", "is", "None", ":", "\n", "\t\t", "temp_dir", "=", "tempfile", ".", "TemporaryDirectory", "(", "prefix", "=", "\"srl_eval-\"", ")", "\n", "output_file", "=", "os", ".", "path", ".", "join", "(", "temp_dir", ".", "name", ",", "'out.txt'", ")", "\n", "", "viterbi_sequences", "=", "[", "bio_to_se", "(", "srl_prediction", ")", "for", "srl_prediction", "in", "srl_predictions", "]", "\n", "print_to_conll", "(", "viterbi_sequences", ",", "gold_props", ",", "output_file", ")", "\n", "child", "=", "subprocess", ".", "Popen", "(", "'perl {} {} {}'", ".", "format", "(", "eval_script", ",", "gold_props", ",", "output_file", ")", ",", "\n", "shell", "=", "True", ",", "stdout", "=", "subprocess", ".", "PIPE", ")", "\n", "eval_output", "=", "child", ".", "communicate", "(", ")", "[", "0", "]", ".", "decode", "(", "\"utf-8\"", ")", "\n", "print", "(", "eval_output", ")", "\n", "if", "temp_dir", "is", "not", "None", ":", "\n", "\t\t", "temp_dir", ".", "cleanup", "(", ")", "\n", "", "f1", "=", "float", "(", "eval_output", ".", "strip", "(", ")", ".", "split", "(", "\"\\n\"", ")", "[", "6", "]", ".", "strip", "(", ")", ".", "split", "(", ")", "[", "6", "]", ")", "\n", "recall", "=", "float", "(", "eval_output", ".", "strip", "(", ")", ".", "split", "(", "\"\\n\"", ")", "[", "6", "]", ".", "strip", "(", ")", ".", "split", "(", ")", "[", "5", "]", ")", "\n", "precision", "=", "float", "(", "eval_output", ".", "strip", "(", ")", ".", "split", "(", "\"\\n\"", ")", "[", "6", "]", ".", "strip", "(", ")", ".", "split", "(", ")", "[", "4", "]", ")", "\n", "comp", "=", "float", "(", "eval_output", ".", "strip", "(", ")", ".", "split", "(", "\"\\n\"", ")", "[", "2", "]", ".", "strip", "(", ")", ".", "split", "(", ")", "[", "5", "]", ")", "\n", "ep", "=", "EvaluationPerformance", "(", "f1", ",", "recall", ",", "precision", ",", "comp", ")", "\n", "return", "ep", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.read_file": [[51, 60], ["open().read", "_header_re.match().end", "tb._string_trees", "open", "_header_re.match"], "function", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb._string_trees"], ["def", "read_file", "(", "filename", ")", ":", "\n", "\n", "    ", "\"\"\"Returns the trees in the PTB file filename.\"\"\"", "\n", "\n", "filecontents", "=", "open", "(", "filename", ",", "\"rU\"", ")", ".", "read", "(", ")", "\n", "pos", "=", "_header_re", ".", "match", "(", "filecontents", ")", ".", "end", "(", ")", "\n", "trees", "=", "[", "]", "\n", "_string_trees", "(", "trees", ",", "filecontents", ",", "pos", ")", "\n", "return", "trees", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.string_trees": [[61, 68], ["tb._string_trees"], "function", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb._string_trees"], ["", "def", "string_trees", "(", "s", ")", ":", "\n", "\n", "    ", "\"\"\"Returns a list of the trees in PTB-format string s\"\"\"", "\n", "\n", "trees", "=", "[", "]", "\n", "_string_trees", "(", "trees", ",", "s", ")", "\n", "return", "trees", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb._string_trees": [[69, 89], ["len", "_closepar_re.match", "_openpar_re.match", "_closepar_re.match.end", "trees.append", "tb._string_trees", "_terminal_re.match", "trees.append", "_terminal_re.match.end", "_openpar_re.match.group", "_openpar_re.match.end", "_terminal_re.match.group"], "function", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb._string_trees"], ["", "def", "_string_trees", "(", "trees", ",", "s", ",", "pos", "=", "0", ")", ":", "\n", "\n", "    ", "\"\"\"Reads a sequence of trees in string s[pos:].\n    Appends the trees to the argument trees.\n    Returns the ending position of those trees in s.\"\"\"", "\n", "\n", "while", "pos", "<", "len", "(", "s", ")", ":", "\n", "        ", "closepar_mo", "=", "_closepar_re", ".", "match", "(", "s", ",", "pos", ")", "\n", "if", "closepar_mo", ":", "\n", "            ", "return", "closepar_mo", ".", "end", "(", ")", "\n", "", "openpar_mo", "=", "_openpar_re", ".", "match", "(", "s", ",", "pos", ")", "\n", "if", "openpar_mo", ":", "\n", "            ", "tree", "=", "[", "openpar_mo", ".", "group", "(", "1", ")", "]", "\n", "trees", ".", "append", "(", "tree", ")", "\n", "pos", "=", "_string_trees", "(", "tree", ",", "s", ",", "openpar_mo", ".", "end", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "terminal_mo", "=", "_terminal_re", ".", "match", "(", "s", ",", "pos", ")", "\n", "trees", ".", "append", "(", "terminal_mo", ".", "group", "(", "1", ")", ")", "\n", "pos", "=", "terminal_mo", ".", "end", "(", ")", "\n", "", "", "return", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.make_nonterminal": [[91, 96], ["None"], "function", ["None"], ["", "def", "make_nonterminal", "(", "label", ",", "children", ")", ":", "\n", "\n", "    ", "\"\"\"returns a tree node with root node label and children\"\"\"", "\n", "\n", "return", "[", "label", "]", "+", "children", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.make_terminal": [[98, 103], ["None"], "function", ["None"], ["", "def", "make_terminal", "(", "word", ")", ":", "\n", "\n", "    ", "\"\"\"returns a terminal tree node with label word\"\"\"", "\n", "\n", "return", "word", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.make_preterminal": [[104, 109], ["None"], "function", ["None"], ["", "def", "make_preterminal", "(", "label", ",", "word", ")", ":", "\n", "\n", "    ", "\"\"\"returns a preterminal node with label for word\"\"\"", "\n", "\n", "return", "[", "label", ",", "word", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.is_terminal": [[111, 117], ["isinstance"], "function", ["None"], ["", "def", "is_terminal", "(", "subtree", ")", ":", "\n", "\n", "    ", "\"\"\"True if this subtree consists of a single terminal node\n    (i.e., a word or an empty node).\"\"\"", "\n", "\n", "return", "not", "isinstance", "(", "subtree", ",", "list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.is_nonterminal": [[119, 125], ["isinstance"], "function", ["None"], ["", "def", "is_nonterminal", "(", "subtree", ")", ":", "\n", "\n", "    ", "\"\"\"True if this subtree does not consist of a single terminal node\n    (i.e., a word or an empty node).\"\"\"", "\n", "\n", "return", "isinstance", "(", "subtree", ",", "list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.is_preterminal": [[127, 133], ["isinstance", "tb.is_terminal", "len"], "function", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.is_terminal"], ["", "def", "is_preterminal", "(", "subtree", ")", ":", "\n", "\n", "    ", "\"\"\"True if the treebank subtree is rooted in a preterminal node\n    (i.e., is an empty node or dominates a word).\"\"\"", "\n", "\n", "return", "isinstance", "(", "subtree", ",", "list", ")", "and", "len", "(", "subtree", ")", "==", "2", "and", "is_terminal", "(", "subtree", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.is_phrasal": [[135, 141], ["isinstance", "isinstance", "len"], "function", ["None"], ["", "def", "is_phrasal", "(", "subtree", ")", ":", "\n", "\n", "    ", "\"\"\"True if this treebank subtree is not a terminal or a preterminal node.\"\"\"", "\n", "\n", "return", "isinstance", "(", "subtree", ",", "list", ")", "and", "(", "len", "(", "subtree", ")", "==", "1", "or", "isinstance", "(", "subtree", "[", "1", "]", ",", "list", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.is_punctuation": [[143, 150], ["tb.is_preterminal", "tb.tree_category"], "function", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.is_preterminal", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.tree_category"], ["", "def", "is_punctuation", "(", "subtree", ")", ":", "\n", "\n", "    ", "\"\"\"True if this subtree is a preterminal node dominating a punctuation or \n    empty node.\"\"\"", "\n", "\n", "return", "is_preterminal", "(", "subtree", ")", "and", "tree_category", "(", "subtree", ")", "in", "(", "\"''\"", ",", "\":\"", ",", "\"#\"", ",", "\",\"", ",", "\".\"", ",", "\"``\"", ",", "\"-LRB-\"", ",", "\"-RRB-\"", ",", "\"-NONE-\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.tree_children": [[215, 223], ["isinstance"], "function", ["None"], ["", "def", "tree_children", "(", "tree", ")", ":", "\n", "\n", "    ", "\"\"\"Returns a list of the subtrees of tree.\"\"\"", "\n", "\n", "if", "isinstance", "(", "tree", ",", "list", ")", ":", "\n", "        ", "return", "tree", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "        ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.tree_label": [[162, 170], ["isinstance"], "function", ["None"], ["", "", "def", "tree_label", "(", "tree", ")", ":", "\n", "\n", "    ", "\"\"\"Returns the label on the root node of tree.\"\"\"", "\n", "\n", "if", "isinstance", "(", "tree", ",", "list", ")", ":", "\n", "        ", "return", "tree", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "return", "tree", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.label_category": [[172, 181], ["nonterm_rex.match", "nonterm_rex.match.group"], "function", ["None"], ["", "", "def", "label_category", "(", "label", ")", ":", "\n", "\n", "    ", "\"\"\"Returns the category part of a label.\"\"\"", "\n", "\n", "nonterm_mo", "=", "nonterm_rex", ".", "match", "(", "label", ")", "\n", "if", "nonterm_mo", ":", "\n", "        ", "return", "nonterm_mo", ".", "group", "(", "'CAT'", ")", "\n", "", "else", ":", "\n", "        ", "return", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.tree_category": [[183, 191], ["isinstance", "tb.label_category"], "function", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.label_category"], ["", "", "def", "tree_category", "(", "tree", ")", ":", "\n", "\n", "    ", "\"\"\"Returns the category of the root node of tree.\"\"\"", "\n", "\n", "if", "isinstance", "(", "tree", ",", "list", ")", ":", "\n", "        ", "return", "label_category", "(", "tree", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "        ", "return", "tree", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.map_labels": [[193, 201], ["isinstance", "fn", "tb.map_labels"], "function", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.map_labels"], ["", "", "def", "map_labels", "(", "tree", ",", "fn", ")", ":", "\n", "\n", "    ", "\"\"\"Returns a tree in which every node's label is mapped by fn\"\"\"", "\n", "\n", "if", "isinstance", "(", "tree", ",", "list", ")", ":", "\n", "        ", "return", "[", "fn", "(", "tree", "[", "0", "]", ")", "]", "+", "[", "map_labels", "(", "child", ",", "fn", ")", "for", "child", "in", "tree", "[", "1", ":", "]", "]", "\n", "", "else", ":", "\n", "        ", "return", "tree", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.label_noindices": [[203, 213], ["nonterm_rex.match", "max", "nonterm_rex.match.end", "nonterm_rex.match.end"], "function", ["None"], ["", "", "def", "label_noindices", "(", "label", ")", ":", "\n", "\n", "    ", "\"\"\"Removes indices in label if present\"\"\"", "\n", "\n", "label_mo", "=", "nonterm_rex", ".", "match", "(", "label", ")", "\n", "if", "label_mo", ":", "\n", "        ", "start", "=", "max", "(", "label_mo", ".", "end", "(", "'INDEX'", ")", ",", "label_mo", ".", "end", "(", "'EQINDEX'", ")", ")", "\n", "if", "start", ">", "1", ":", "\n", "            ", "return", "label", "[", ":", "start", "-", "2", "]", "\n", "", "", "return", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.tree_copy": [[225, 233], ["isinstance", "tb.tree_copy"], "function", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.tree_copy"], ["", "", "def", "tree_copy", "(", "tree", ")", ":", "\n", "\n", "    ", "\"\"\"Returns a deep copy of tree\"\"\"", "\n", "\n", "if", "isinstance", "(", "tree", ",", "list", ")", ":", "\n", "        ", "return", "[", "tree_copy", "(", "child", ")", "for", "child", "in", "tree", "]", "\n", "", "else", ":", "\n", "        ", "return", "tree", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.prune": [[235, 291], ["tb.tree_label", "tb.is_phrasal", "binlabelf", "binlabelf", "tb.is_preterminal", "tb.make_nonterminal", "tb.make_nonterminal", "tb.make_nonterminal", "tb.make_nonterminal", "tb.prune", "len", "tb.tree_label", "tb.tree_label", "tb.tree_children", "tb.make_nonterminal", "tb.make_nonterminal", "range", "tb.prune.left_binarise"], "function", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.tree_label", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.is_phrasal", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.is_preterminal", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.make_nonterminal", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.make_nonterminal", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.make_nonterminal", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.make_nonterminal", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.prune", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.tree_label", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.tree_label", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.tree_children", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.make_nonterminal", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.make_nonterminal"], ["", "", "def", "prune", "(", "tree", ",", "remove_empty", "=", "False", ",", "collapse_unary", "=", "False", ",", "binarise", "=", "False", ",", "\n", "relabel", "=", "lambda", "x", ":", "x", ",", "\n", "binlabelf", "=", "lambda", "labels", ":", "'+'", ".", "join", "(", "labels", ")", ")", ":", "\n", "\n", "    ", "\"\"\"Returns a copy of tree without empty nodes, unary nodes or node indices.\n\n    If binarise=='right' then right-binarise nodes, otherwise \n    if binarise is not False then left-binarise nodes.\n\n    binlabelf() maps a sequence of child node labels to the label for \n    a new binarised node.\n    \"\"\"", "\n", "\n", "def", "left_binarise", "(", "cs", ",", "rightpos", ")", ":", "\n", "        ", "label", "=", "binlabelf", "(", "tree_label", "(", "cs", "[", "i", "]", ")", "for", "i", "in", "range", "(", "rightpos", ")", ")", "\n", "if", "rightpos", "<=", "2", ":", "\n", "            ", "return", "make_nonterminal", "(", "label", ",", "cs", "[", ":", "rightpos", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "make_nonterminal", "(", "label", ",", "[", "left_binarise", "(", "cs", ",", "rightpos", "-", "1", ")", ",", "cs", "[", "rightpos", "-", "1", "]", "]", ")", "\n", "\n", "", "", "def", "right_binarise", "(", "cs", ",", "leftpos", ",", "len_cs", ")", ":", "\n", "        ", "label", "=", "binlabelf", "(", "tree_label", "(", "c", ")", "for", "c", "in", "cs", "[", "leftpos", ":", "]", ")", "\n", "if", "leftpos", "+", "2", ">=", "len_cs", ":", "\n", "            ", "return", "make_nonterminal", "(", "label", ",", "cs", "[", "leftpos", ":", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "make_nonterminal", "(", "label", ",", "[", "cs", "[", "leftpos", "]", ",", "right_binarise", "(", "cs", ",", "leftpos", "+", "1", ",", "len_cs", ")", "]", ")", "\n", "\n", "", "", "label", "=", "tree_label", "(", "tree", ")", "\n", "if", "is_phrasal", "(", "tree", ")", ":", "\n", "        ", "cs", "=", "(", "prune", "(", "c", ",", "remove_empty", ",", "collapse_unary", ",", "binarise", ",", "relabel", ",", "binlabelf", ")", "\n", "for", "c", "in", "tree_children", "(", "tree", ")", ")", "\n", "cs", "=", "[", "c", "for", "c", "in", "cs", "if", "c", "]", "\n", "if", "cs", "or", "not", "remove_empty", ":", "\n", "            ", "len_cs", "=", "len", "(", "cs", ")", "\n", "if", "collapse_unary", "and", "len_cs", "==", "1", ":", "\n", "                ", "return", "make_nonterminal", "(", "relabel", "(", "label", ")", ",", "\n", "tree_children", "(", "cs", "[", "0", "]", ")", ")", "\n", "", "elif", "binarise", "and", "len_cs", ">", "2", ":", "\n", "                ", "if", "binarise", "==", "'right'", ":", "\n", "                    ", "return", "make_nonterminal", "(", "relabel", "(", "label", ")", ",", "\n", "[", "cs", "[", "0", "]", ",", "right_binarise", "(", "cs", ",", "1", ",", "len_cs", ")", "]", ")", "\n", "", "else", ":", "\n", "                    ", "return", "make_nonterminal", "(", "relabel", "(", "label", ")", ",", "\n", "[", "left_binarise", "(", "cs", ",", "len_cs", "-", "1", ")", ",", "cs", "[", "-", "1", "]", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "return", "make_nonterminal", "(", "relabel", "(", "label", ")", ",", "\n", "cs", ")", "\n", "", "", "else", ":", "\n", "            ", "return", "None", "\n", "", "", "elif", "is_preterminal", "(", "tree", ")", ":", "\n", "        ", "if", "remove_empty", "and", "label", "==", "'-NONE-'", ":", "\n", "            ", "return", "None", "\n", "", "else", ":", "\n", "            ", "return", "make_nonterminal", "(", "relabel", "(", "label", ")", ",", "tree_children", "(", "tree", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "return", "tree", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.tree_nodes": [[293, 304], ["isinstance", "tb.tree_nodes.visit"], "function", ["None"], ["", "", "def", "tree_nodes", "(", "tree", ")", ":", "\n", "\n", "    ", "\"\"\"Yields the nodes in tree\"\"\"", "\n", "\n", "def", "visit", "(", "node", ")", ":", "\n", "        ", "yield", "node", "\n", "if", "isinstance", "(", "node", ",", "list", ")", ":", "\n", "            ", "for", "child", "in", "node", "[", "1", ":", "]", ":", "\n", "                ", "yield", "from", "visit", "(", "child", ")", "\n", "\n", "", "", "", "yield", "from", "visit", "(", "tree", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.tree_terminals": [[306, 318], ["isinstance", "tb.tree_nodes.visit"], "function", ["None"], ["", "def", "tree_terminals", "(", "tree", ")", ":", "\n", "\n", "    ", "\"\"\"Yields the terminal leaves of tree\"\"\"", "\n", "\n", "def", "visit", "(", "node", ")", ":", "\n", "        ", "if", "isinstance", "(", "node", ",", "list", ")", ":", "\n", "            ", "for", "child", "in", "node", "[", "1", ":", "]", ":", "\n", "                ", "yield", "from", "visit", "(", "child", ")", "\n", "", "", "else", ":", "\n", "            ", "yield", "node", "\n", "\n", "", "", "yield", "from", "visit", "(", "tree", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.tree_preterminals": [[320, 332], ["tb.is_preterminal", "tb.tree_nodes.visit"], "function", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.is_preterminal"], ["", "def", "tree_preterminals", "(", "tree", ")", ":", "\n", "\n", "    ", "\"\"\"Yields the preterminal nodes of tree\"\"\"", "\n", "\n", "def", "visit", "(", "node", ")", ":", "\n", "        ", "if", "is_preterminal", "(", "node", ")", ":", "\n", "            ", "yield", "node", "\n", "", "else", ":", "\n", "            ", "for", "child", "in", "node", "[", "1", ":", "]", ":", "\n", "                ", "yield", "from", "visit", "(", "child", ")", "\n", "\n", "", "", "", "yield", "from", "visit", "(", "tree", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.tree_phrasalnodes": [[334, 345], ["tb.is_phrasal", "tb.tree_nodes.visit"], "function", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.is_phrasal"], ["", "def", "tree_phrasalnodes", "(", "tree", ")", ":", "\n", "\n", "    ", "\"\"\"Yields the phrasal (i.e., nonterminal and non-preterminal) nodes of tree\"\"\"", "\n", "\n", "def", "visit", "(", "node", ")", ":", "\n", "        ", "if", "is_phrasal", "(", "node", ")", ":", "\n", "            ", "yield", "node", "\n", "for", "child", "in", "node", "[", "1", ":", "]", ":", "\n", "                ", "yield", "from", "visit", "(", "child", ")", "\n", "\n", "", "", "", "yield", "from", "visit", "(", "tree", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.tree_constituents": [[347, 389], ["tb.is_terminal", "tb.tree_constituents.visitor"], "function", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.is_terminal"], ["", "def", "tree_constituents", "(", "tree", ",", "collect_root", "=", "False", ",", "collect_terminals", "=", "False", ",", "\n", "collect_preterminals", "=", "False", ",", "ignore_punctuation", "=", "False", ")", ":", "\n", "\n", "    ", "\"\"\"maps a tree to a list of tuples (category,left,right) that\n    correspond to constituents of the tree.\n\n    If collect_root==True, then the list of tuples includes a tuple\n    for the root node of the tree.\n\n    If collect_terminals==True, then the list of tuples includes tuples\n    for the terminal nodes of the tree.\n\n    If collect_preterminals==True, then the list of tuples includes tuples\n    for the preterminal nodes of the tree.\n\n    If ignore_punctuation==True, then the left and right positions ignore\n    punctuation.\n    \"\"\"", "\n", "\n", "def", "visitor", "(", "node", ",", "left", ",", "constituents", ")", ":", "\n", "        ", "if", "ignore_punctuation", "and", "is_punctuation", "(", "node", ")", ":", "\n", "            ", "return", "left", "\n", "", "if", "is_terminal", "(", "node", ")", ":", "\n", "            ", "if", "collect_terminals", ":", "\n", "                ", "constituents", ".", "append", "(", "(", "tree_category", "(", "node", ")", ",", "left", ",", "left", "+", "1", ")", ")", "\n", "", "return", "left", "+", "1", "\n", "", "else", ":", "\n", "            ", "right", "=", "left", "\n", "for", "child", "in", "tree_subtrees", "(", "node", ")", ":", "\n", "                ", "right", "=", "visitor", "(", "child", ",", "right", ",", "constituents", ")", "\n", "", "if", "collect_preterminals", "or", "is_phrasal", "(", "node", ")", ":", "\n", "                ", "constituents", ".", "append", "(", "(", "tree_category", "(", "node", ")", ",", "left", ",", "right", ")", ")", "\n", "", "return", "right", "\n", "\n", "", "", "constituents", "=", "[", "]", "\n", "if", "collect_root", ":", "\n", "        ", "visitor", "(", "tree", ",", "0", ",", "constituents", ")", "\n", "", "else", ":", "\n", "        ", "right", "=", "0", "\n", "for", "child", "in", "tree_subtrees", "(", "tree", ")", ":", "\n", "            ", "right", "=", "visitor", "(", "child", ",", "right", ",", "constituents", ")", "\n", "", "", "return", "constituents", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.write": [[391, 402], ["tb.is_nonterminal", "outf.write", "range", "outf.write", "outf.write", "len", "tb.write", "outf.write"], "function", ["home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.is_nonterminal", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.write", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.write", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.write", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.write", "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.write"], ["", "def", "write", "(", "tree", ",", "outf", "=", "sys", ".", "stdout", ")", ":", "\n", "    ", "\"\"\"Write a tree to outf\"\"\"", "\n", "if", "is_nonterminal", "(", "tree", ")", ":", "\n", "        ", "outf", ".", "write", "(", "'('", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "tree", ")", ")", ":", "\n", "            ", "if", "i", ">", "0", ":", "\n", "                ", "outf", ".", "write", "(", "' '", ")", "\n", "", "write", "(", "tree", "[", "i", "]", ",", "outf", ")", "\n", "", "outf", ".", "write", "(", "')'", ")", "\n", "", "else", ":", "\n", "        ", "outf", ".", "write", "(", "tree", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaryYufei_bestParseSRL.None.tb.read_ptb": [[405, 423], ["collections.namedtuple", "collections.namedtuple.", "sorted", "tb.read_ptb._read_ptb"], "function", ["None"], ["", "", "def", "read_ptb", "(", "basedir", "=", "\"/usr/local/data/LDC/LDC2015T13_eng_news_txt_tbnk-ptb_revised/\"", ",", "\n", "remove_empty", "=", "True", ",", "collapse_unary", "=", "False", ",", "binarise", "=", "False", ",", "relabel", "=", "label_category", ")", ":", "\n", "\n", "    ", "\"\"\"Returns a tuple (train,dev,test) of the trees in 2015 PTB.  train, dev and test are generators\n    that enumerate the trees in each section\"\"\"", "\n", "\n", "def", "_read_ptb", "(", "dirs", ")", ":", "\n", "        ", "for", "p", "in", "dirs", ":", "\n", "            ", "for", "fname", "in", "sorted", "(", "glob", ".", "glob", "(", "basedir", "+", "p", ")", ")", ":", "\n", "                ", "for", "tree", "in", "read_file", "(", "fname", ")", ":", "\n", "                    ", "yield", "prune", "(", "tree", "[", "1", "]", ",", "remove_empty", ",", "collapse_unary", ",", "binarise", ",", "relabel", ")", "\n", "\n", "", "", "", "", "ptb", "=", "collections", ".", "namedtuple", "(", "'ptb'", ",", "'train dev test'", ")", "\n", "return", "ptb", "(", "train", "=", "_read_ptb", "(", "(", "\"data/penntree/0[2-9]/wsj*.tree\"", ",", "\n", "\"data/penntree/1[2-9]/wsj*.tree\"", ",", "\n", "\"data/penntree/2[01]/wsj*.tree\"", ")", ")", ",", "\n", "dev", "=", "_read_ptb", "(", "(", "\"data/penntree/24/wsj*.tree\"", ",", ")", ")", ",", "\n", "test", "=", "_read_ptb", "(", "(", "\"data/penntree/23/wsj*.tree\"", ",", ")", ")", ")", "\n", "\n"]]}