{"home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.language-model.train_1bw.evaluate": [[32, 55], ["print", "lm_model.eval", "data_loader.get_tqdm", "lm_model.init_hidden", "math.exp", "print", "label_t.view.view", "label_t.view.size", "lm_model.log_prob", "model_word_ada.to_scalar", "str", "criterion", "torch.Variable"], "function", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.dataset.LargeDataset.get_tqdm", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.basic.BasicRNN.init_hidden", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.LM.LM.log_prob", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.utils.to_scalar"], ["def", "evaluate", "(", "data_loader", ",", "lm_model", ",", "criterion", ",", "limited", "=", "76800", ")", ":", "\n", "    ", "print", "(", "'evaluating'", ")", "\n", "lm_model", ".", "eval", "(", ")", "\n", "\n", "iterator", "=", "data_loader", ".", "get_tqdm", "(", ")", "\n", "\n", "lm_model", ".", "init_hidden", "(", ")", "\n", "total_loss", "=", "0", "\n", "total_len", "=", "0", "\n", "for", "word_t", ",", "label_t", "in", "iterator", ":", "\n", "        ", "label_t", "=", "label_t", ".", "view", "(", "-", "1", ")", "\n", "tmp_len", "=", "label_t", ".", "size", "(", "0", ")", "\n", "output", "=", "lm_model", ".", "log_prob", "(", "word_t", ")", "\n", "total_loss", "+=", "tmp_len", "*", "utils", ".", "to_scalar", "(", "criterion", "(", "autograd", ".", "Variable", "(", "output", ")", ",", "label_t", ")", ")", "\n", "total_len", "+=", "tmp_len", "\n", "\n", "if", "limited", ">=", "0", "and", "total_len", ">", "limited", ":", "\n", "            ", "break", "\n", "\n", "", "", "ppl", "=", "math", ".", "exp", "(", "total_loss", "/", "total_len", ")", "\n", "print", "(", "'PPL: '", "+", "str", "(", "ppl", ")", ")", "\n", "\n", "return", "ppl", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.adaptive.AdaptiveSoftmax.__init__": [[8, 32], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.ModuleList", "torch.nn.CrossEntropyLoss", "range", "torch.nn.Sequential", "adaptive.AdaptiveSoftmax.tail.append", "len", "len", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.__init__", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.logger.Logger.append"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "cutoff", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "cutoff", "=", "cutoff", "\n", "self", ".", "output_size", "=", "cutoff", "[", "0", "]", "+", "len", "(", "cutoff", ")", "-", "1", "\n", "\n", "self", ".", "head", "=", "nn", ".", "Linear", "(", "input_size", ",", "self", ".", "output_size", ")", "\n", "self", ".", "tail", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "self", ".", "cross_entropy", "=", "nn", ".", "CrossEntropyLoss", "(", "size_average", "=", "False", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cutoff", ")", "-", "1", ")", ":", "\n", "# seq = nn.Sequential(", "\n", "#     nn.Linear(input_size, input_size // 4 ** i, False),", "\n", "#     nn.Linear(input_size // 4 ** i, cutoff[i + 1] - cutoff[i], False)", "\n", "# )", "\n", "\n", "            ", "seq", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "input_size", ",", "input_size", "//", "4", "**", "(", "i", "+", "1", ")", ",", "False", ")", ",", "\n", "nn", ".", "Linear", "(", "input_size", "//", "4", "**", "(", "i", "+", "1", ")", ",", "cutoff", "[", "i", "+", "1", "]", "-", "cutoff", "[", "i", "]", ",", "False", ")", "\n", ")", "\n", "\n", "self", ".", "tail", ".", "append", "(", "seq", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.adaptive.AdaptiveSoftmax.rand_ini": [[33, 40], ["torch.nn.init.xavier_normal", "torch.nn.init.xavier_normal", "torch.nn.init.xavier_normal"], "methods", ["None"], ["", "", "def", "rand_ini", "(", "self", ")", ":", "\n", "\n", "        ", "nn", ".", "init", ".", "xavier_normal", "(", "self", ".", "head", ".", "weight", ")", "\n", "\n", "for", "tail", "in", "self", ".", "tail", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_normal", "(", "tail", "[", "0", "]", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_normal", "(", "tail", "[", "1", "]", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.adaptive.AdaptiveSoftmax.log_prob": [[41, 61], ["torch.nn.LogSoftmax().cuda", "adaptive.AdaptiveSoftmax.head", "adaptive.AdaptiveSoftmax.size", "torch.zeros().cuda", "torch.nn.LogSoftmax().cuda.", "torch.zeros().cuda.narrow().add_", "range", "len", "nn.LogSoftmax().cuda.narrow", "buffer.expand.expand.expand", "torch.nn.LogSoftmax().cuda.", "torch.zeros().cuda.narrow().copy_().add_", "torch.nn.LogSoftmax", "torch.zeros", "torch.zeros().cuda.narrow", "nn.LogSoftmax().cuda.narrow", "torch.zeros().cuda.narrow().copy_", "torch.zeros().cuda.narrow"], "methods", ["None"], ["", "", "def", "log_prob", "(", "self", ",", "w_in", ")", ":", "\n", "        ", "lsm", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", ".", "cuda", "(", ")", "\n", "\n", "head_out", "=", "self", ".", "head", "(", "w_in", ")", "\n", "\n", "batch_size", "=", "head_out", ".", "size", "(", "0", ")", "\n", "prob", "=", "torch", ".", "zeros", "(", "batch_size", ",", "self", ".", "cutoff", "[", "-", "1", "]", ")", ".", "cuda", "(", ")", "\n", "\n", "lsm_head", "=", "lsm", "(", "head_out", ")", "\n", "prob", ".", "narrow", "(", "1", ",", "0", ",", "self", ".", "output_size", ")", ".", "add_", "(", "lsm_head", ".", "narrow", "(", "1", ",", "0", ",", "self", ".", "output_size", ")", ".", "data", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "tail", ")", ")", ":", "\n", "            ", "pos", "=", "self", ".", "cutoff", "[", "i", "]", "\n", "i_size", "=", "self", ".", "cutoff", "[", "i", "+", "1", "]", "-", "pos", "\n", "buffer", "=", "lsm_head", ".", "narrow", "(", "1", ",", "self", ".", "cutoff", "[", "0", "]", "+", "i", ",", "1", ")", "\n", "buffer", "=", "buffer", ".", "expand", "(", "batch_size", ",", "i_size", ")", "\n", "lsm_tail", "=", "lsm", "(", "self", ".", "tail", "[", "i", "]", "(", "w_in", ")", ")", "\n", "prob", ".", "narrow", "(", "1", ",", "pos", ",", "i_size", ")", ".", "copy_", "(", "buffer", ".", "data", ")", ".", "add_", "(", "lsm_tail", ".", "data", ")", "\n", "\n", "", "return", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.adaptive.AdaptiveSoftmax.forward": [[62, 87], ["w_in.size", "target.clone", "range", "adaptive.AdaptiveSoftmax.cross_entropy", "target.ge().mul", "adaptive.AdaptiveSoftmax.head", "torch.autograd.Variable", "len", "target.lt", "target.ge().mul.sum", "torch.autograd.Variable", "w_in.index_select", "adaptive.AdaptiveSoftmax.cross_entropy", "target.ge", "target[].add", "torch.autograd.Variable", "target.ge().mul.nonzero().squeeze", "target.ge().mul.nonzero"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "w_in", ",", "target", ")", ":", "\n", "\n", "        ", "batch_size", "=", "w_in", ".", "size", "(", "0", ")", "\n", "output", "=", "0.0", "\n", "\n", "first_target", "=", "target", ".", "clone", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cutoff", ")", "-", "1", ")", ":", "\n", "\n", "            ", "mask", "=", "target", ".", "ge", "(", "self", ".", "cutoff", "[", "i", "]", ")", ".", "mul", "(", "target", ".", "lt", "(", "self", ".", "cutoff", "[", "i", "+", "1", "]", ")", ")", "\n", "\n", "if", "mask", ".", "sum", "(", ")", ">", "0", ":", "\n", "\n", "                ", "first_target", "[", "mask", "]", "=", "self", ".", "cutoff", "[", "0", "]", "+", "i", "\n", "\n", "second_target", "=", "Variable", "(", "target", "[", "mask", "]", ".", "add", "(", "-", "self", ".", "cutoff", "[", "i", "]", ")", ")", "\n", "second_input", "=", "w_in", ".", "index_select", "(", "0", ",", "Variable", "(", "mask", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", ")", ")", "\n", "\n", "second_output", "=", "self", ".", "tail", "[", "i", "]", "(", "second_input", ")", "\n", "\n", "output", "+=", "self", ".", "cross_entropy", "(", "second_output", ",", "second_target", ")", "\n", "\n", "", "", "output", "+=", "self", ".", "cross_entropy", "(", "self", ".", "head", "(", "w_in", ")", ",", "Variable", "(", "first_target", ")", ")", "\n", "output", "/=", "batch_size", "\n", "return", "output", "", "", "", ""]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.ddnet.BasicUnit.__init__": [[8, 28], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "ddnet.BasicUnit.unit_list.append", "ddnet.BasicUnit.init_hidden", "ddnet.BasicUnit.unit_list.extend", "range"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.__init__", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.logger.Logger.append", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.basic.BasicRNN.init_hidden"], ["    ", "def", "__init__", "(", "self", ",", "unit", ",", "unit_number", ",", "emb_dim", ",", "hid_dim", ",", "droprate", ")", ":", "\n", "        ", "super", "(", "BasicUnit", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "rnnunit_map", "=", "{", "'rnn'", ":", "nn", ".", "RNN", ",", "'lstm'", ":", "nn", ".", "LSTM", ",", "'gru'", ":", "nn", ".", "GRU", ",", "'bnlstm'", ":", "BNLSTM", "}", "\n", "\n", "self", ".", "batch_norm", "=", "(", "unit", "==", "'bnlstm'", ")", "\n", "\n", "self", ".", "unit_number", "=", "unit_number", "\n", "# self.unit_weight = nn.Parameter(torch.FloatTensor([1] * unit_number))", "\n", "\n", "self", ".", "unit_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "unit_list", ".", "append", "(", "rnnunit_map", "[", "unit", "]", "(", "emb_dim", ",", "hid_dim", ",", "1", ")", ")", "\n", "if", "unit_number", ">", "1", ":", "\n", "            ", "self", ".", "unit_list", ".", "extend", "(", "[", "rnnunit_map", "[", "unit", "]", "(", "hid_dim", ",", "hid_dim", ",", "1", ")", "for", "ind", "in", "range", "(", "unit_number", "-", "1", ")", "]", ")", "\n", "\n", "", "self", ".", "droprate", "=", "droprate", "\n", "\n", "self", ".", "output_dim", "=", "emb_dim", "+", "hid_dim", "*", "unit_number", "\n", "\n", "self", ".", "init_hidden", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.ddnet.BasicUnit.init_hidden": [[29, 32], ["range"], "methods", ["None"], ["", "def", "init_hidden", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "hidden_list", "=", "[", "None", "for", "i", "in", "range", "(", "self", ".", "unit_number", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.ddnet.BasicUnit.rand_ini": [[33, 38], ["model_word_ada.init_lstm"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.utils.init_lstm"], ["", "def", "rand_ini", "(", "self", ")", ":", "\n", "\n", "        ", "if", "not", "self", ".", "batch_norm", ":", "\n", "            ", "for", "cur_lstm", "in", "self", ".", "unit_list", ":", "\n", "                ", "utils", ".", "init_lstm", "(", "cur_lstm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.ddnet.BasicUnit.forward": [[39, 55], ["range", "x.append", "model_word_ada.repackage_hidden", "torch.dropout", "torch.dropout", "torch.dropout"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.logger.Logger.append", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.utils.repackage_hidden"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "out", "=", "0", "\n", "# n_w = F.softmax(self.unit_weight, dim=0)", "\n", "for", "ind", "in", "range", "(", "self", ".", "unit_number", ")", ":", "\n", "            ", "nout", ",", "new_hidden", "=", "self", ".", "unit_list", "[", "ind", "]", "(", "x", "[", "ind", "]", ",", "self", ".", "hidden_list", "[", "ind", "]", ")", "\n", "self", ".", "hidden_list", "[", "ind", "]", "=", "utils", ".", "repackage_hidden", "(", "new_hidden", ")", "\n", "out", "=", "out", "+", "nout", "\n", "# out = out + n_w[ind] * self.unit_number * nout", "\n", "\n", "", "if", "self", ".", "droprate", ">", "0", ":", "\n", "            ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "droprate", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "", "x", ".", "append", "(", "out", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.ddnet.DDRNN.__init__": [[57, 65], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "ddnet.DDRNN.init_hidden", "ddnet.BasicUnit", "range"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.__init__", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.basic.BasicRNN.init_hidden"], ["    ", "def", "__init__", "(", "self", ",", "layer_num", ",", "unit", ",", "emb_dim", ",", "hid_dim", ",", "droprate", ")", ":", "\n", "        ", "super", "(", "DDRNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "layer_list", "=", "[", "BasicUnit", "(", "unit", ",", "i", "+", "1", ",", "emb_dim", ",", "hid_dim", ",", "droprate", ")", "for", "i", "in", "range", "(", "layer_num", ")", "]", "\n", "self", ".", "layer", "=", "nn", ".", "Sequential", "(", "*", "layer_list", ")", "\n", "self", ".", "output_dim", "=", "layer_list", "[", "-", "1", "]", ".", "output_dim", "\n", "\n", "self", ".", "init_hidden", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.ddnet.DDRNN.init_hidden": [[66, 70], ["ddnet.DDRNN.layer.children", "tup.init_hidden"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.basic.BasicRNN.init_hidden"], ["", "def", "init_hidden", "(", "self", ")", ":", "\n", "\n", "        ", "for", "tup", "in", "self", ".", "layer", ".", "children", "(", ")", ":", "\n", "            ", "tup", ".", "init_hidden", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.ddnet.DDRNN.rand_ini": [[71, 75], ["ddnet.DDRNN.layer.children", "tup.rand_ini"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.basic.BasicRNN.rand_ini"], ["", "", "def", "rand_ini", "(", "self", ")", ":", "\n", "\n", "        ", "for", "tup", "in", "self", ".", "layer", ".", "children", "(", ")", ":", "\n", "            ", "tup", ".", "rand_ini", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.ddnet.DDRNN.forward": [[76, 79], ["ddnet.DDRNN.layer", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "layer", "(", "[", "x", "]", ")", "\n", "return", "torch", ".", "cat", "(", "out", ",", "2", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.LM.LM.__init__": [[8, 34], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.__init__"], ["    ", "def", "__init__", "(", "self", ",", "rnn", ",", "soft_max", ",", "w_num", ",", "w_dim", ",", "droprate", ",", "label_dim", "=", "-", "1", ",", "add_relu", "=", "False", ")", ":", "\n", "        ", "super", "(", "LM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "rnn", "=", "rnn", "\n", "self", ".", "soft_max", "=", "soft_max", "\n", "\n", "if", "soft_max", ":", "\n", "            ", "self", ".", "forward", "=", "self", ".", "softmax_forward", "\n", "", "else", ":", "\n", "            ", "self", ".", "forward", "=", "self", ".", "embed_forward", "\n", "\n", "", "self", ".", "w_num", "=", "w_num", "\n", "self", ".", "w_dim", "=", "w_dim", "\n", "self", ".", "word_embed", "=", "nn", ".", "Embedding", "(", "w_num", ",", "w_dim", ")", "\n", "\n", "self", ".", "rnn_output", "=", "self", ".", "rnn", ".", "output_dim", "\n", "\n", "self", ".", "add_proj", "=", "label_dim", ">", "0", "\n", "if", "self", ".", "add_proj", ":", "\n", "            ", "self", ".", "project", "=", "nn", ".", "Linear", "(", "self", ".", "rnn_output", ",", "label_dim", ")", "\n", "if", "add_relu", ":", "\n", "                ", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "relu", "=", "lambda", "x", ":", "x", "\n", "\n", "", "", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "p", "=", "droprate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.LM.LM.load_embed": [[35, 38], ["None"], "methods", ["None"], ["", "def", "load_embed", "(", "self", ",", "origin_lm", ")", ":", "\n", "        ", "self", ".", "word_embed", "=", "origin_lm", ".", "word_embed", "\n", "self", ".", "soft_max", "=", "origin_lm", ".", "soft_max", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.LM.LM.rand_ini": [[39, 49], ["LM.LM.rnn.rand_ini", "LM.LM.soft_max.rand_ini", "model_word_ada.init_embedding", "model_word_ada.init_linear"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.basic.BasicRNN.rand_ini", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.basic.BasicRNN.rand_ini", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.utils.init_embedding", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.utils.init_linear"], ["", "def", "rand_ini", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "rnn", ".", "rand_ini", "(", ")", "\n", "# utils.init_linear(self.project)", "\n", "self", ".", "soft_max", ".", "rand_ini", "(", ")", "\n", "# if not self.tied_weight:", "\n", "utils", ".", "init_embedding", "(", "self", ".", "word_embed", ".", "weight", ")", "\n", "\n", "if", "self", ".", "add_proj", ":", "\n", "            ", "utils", ".", "init_linear", "(", "self", ".", "project", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.LM.LM.init_hidden": [[50, 52], ["LM.LM.rnn.init_hidden"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.basic.BasicRNN.init_hidden"], ["", "", "def", "init_hidden", "(", "self", ")", ":", "\n", "        ", "self", ".", "rnn", ".", "init_hidden", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.LM.LM.softmax_forward": [[53, 68], ["LM.LM.word_embed", "LM.LM.drop", "LM.LM.rnn().contiguous().view", "LM.LM.soft_max", "LM.LM.drop", "LM.LM.rnn().contiguous", "LM.LM.relu", "LM.LM.project", "LM.LM.rnn"], "methods", ["None"], ["", "def", "softmax_forward", "(", "self", ",", "w_in", ",", "target", ")", ":", "\n", "\n", "        ", "w_emb", "=", "self", ".", "word_embed", "(", "w_in", ")", "\n", "\n", "w_emb", "=", "self", ".", "drop", "(", "w_emb", ")", "\n", "\n", "out", "=", "self", ".", "rnn", "(", "w_emb", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "self", ".", "rnn_output", ")", "\n", "\n", "if", "self", ".", "add_proj", ":", "\n", "            ", "out", "=", "self", ".", "drop", "(", "self", ".", "relu", "(", "self", ".", "project", "(", "out", ")", ")", ")", "\n", "# out = self.drop(self.project(out))", "\n", "\n", "", "out", "=", "self", ".", "soft_max", "(", "out", ",", "target", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.LM.LM.embed_forward": [[69, 84], ["LM.LM.word_embed", "LM.LM.drop", "LM.LM.rnn().contiguous().view", "LM.LM.soft_max", "LM.LM.drop", "LM.LM.rnn().contiguous", "LM.LM.relu", "LM.LM.project", "LM.LM.rnn"], "methods", ["None"], ["", "def", "embed_forward", "(", "self", ",", "w_in", ",", "target", ")", ":", "\n", "\n", "        ", "w_emb", "=", "self", ".", "word_embed", "(", "w_in", ")", "\n", "\n", "w_emb", "=", "self", ".", "drop", "(", "w_emb", ")", "\n", "\n", "out", "=", "self", ".", "rnn", "(", "w_emb", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "self", ".", "rnn_output", ")", "\n", "\n", "if", "self", ".", "add_proj", ":", "\n", "            ", "out", "=", "self", ".", "drop", "(", "self", ".", "relu", "(", "self", ".", "project", "(", "out", ")", ")", ")", "\n", "# out = self.drop(self.project(out))", "\n", "\n", "", "out", "=", "self", ".", "soft_max", "(", "out", ",", "target", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.LM.LM.log_prob": [[85, 97], ["LM.LM.word_embed", "LM.LM.rnn().contiguous().view", "LM.LM.soft_max.log_prob", "LM.LM.relu", "LM.LM.rnn().contiguous", "LM.LM.project", "LM.LM.rnn"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.LM.LM.log_prob"], ["", "def", "log_prob", "(", "self", ",", "w_in", ")", ":", "\n", "\n", "        ", "w_emb", "=", "self", ".", "word_embed", "(", "w_in", ")", "\n", "\n", "out", "=", "self", ".", "rnn", "(", "w_emb", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "self", ".", "rnn_output", ")", "\n", "\n", "if", "self", ".", "add_proj", ":", "\n", "            ", "out", "=", "self", ".", "relu", "(", "self", ".", "project", "(", "out", ")", ")", "\n", "\n", "", "out", "=", "self", ".", "soft_max", ".", "log_prob", "(", "out", ")", "\n", "\n", "return", "out", "", "", "", ""]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.dataset.EvalDataset.__init__": [[15, 22], ["object.__init__", "dataset.EvalDataset.construct_index"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.__init__", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.dataset.EvalDataset.construct_index"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "sequence_length", ")", ":", "\n", "        ", "super", "(", "EvalDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "\n", "self", ".", "sequence_length", "=", "sequence_length", "\n", "\n", "self", ".", "construct_index", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.dataset.EvalDataset.get_tqdm": [[23, 25], ["tqdm.tqdm.tqdm"], "methods", ["None"], ["", "def", "get_tqdm", "(", "self", ")", ":", "\n", "        ", "return", "tqdm", "(", "self", ",", "mininterval", "=", "2", ",", "total", "=", "self", ".", "index_length", ",", "leave", "=", "False", ",", "file", "=", "sys", ".", "stdout", ",", "ncols", "=", "80", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.dataset.EvalDataset.construct_index": [[26, 39], ["list", "list", "dataset.EvalDataset.x.append", "dataset.EvalDataset.y.append", "len", "len", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.logger.Logger.append", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.logger.Logger.append"], ["", "def", "construct_index", "(", "self", ")", ":", "\n", "        ", "token_per_batch", "=", "self", ".", "sequence_length", "\n", "tot_num", "=", "len", "(", "self", ".", "dataset", ")", "-", "1", "\n", "res_num", "=", "tot_num", "-", "tot_num", "%", "token_per_batch", "\n", "\n", "self", ".", "x", "=", "list", "(", "torch", ".", "unbind", "(", "torch", ".", "LongTensor", "(", "self", ".", "dataset", "[", "0", ":", "res_num", "]", ")", ".", "view", "(", "-", "1", ",", "self", ".", "sequence_length", ")", ",", "0", ")", ")", "\n", "self", ".", "y", "=", "list", "(", "torch", ".", "unbind", "(", "torch", ".", "LongTensor", "(", "self", ".", "dataset", "[", "1", ":", "res_num", "+", "1", "]", ")", ".", "view", "(", "-", "1", ",", "self", ".", "sequence_length", ")", ",", "0", ")", ")", "\n", "\n", "self", ".", "x", ".", "append", "(", "torch", ".", "LongTensor", "(", "self", ".", "dataset", "[", "res_num", ":", "tot_num", "]", ")", ")", "\n", "self", ".", "y", ".", "append", "(", "torch", ".", "LongTensor", "(", "self", ".", "dataset", "[", "res_num", "+", "1", ":", "tot_num", "+", "1", "]", ")", ")", "\n", "\n", "self", ".", "index_length", "=", "len", "(", "self", ".", "x", ")", "\n", "self", ".", "cur_idx", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.dataset.EvalDataset.__iter__": [[40, 42], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.dataset.EvalDataset.__next__": [[43, 54], ["torch.Variable().cuda().view", "torch.Variable().cuda().view", "torch.Variable().cuda().view", "torch.Variable().cuda().view", "torch.Variable().cuda().view", "torch.Variable().cuda().view", "torch.Variable().cuda().view", "torch.Variable().cuda().view", "torch.Variable().cuda", "torch.Variable().cuda", "torch.Variable().cuda", "torch.Variable().cuda", "torch.Variable().cuda", "torch.Variable().cuda", "torch.Variable().cuda", "torch.Variable().cuda", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable"], "methods", ["None"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "cur_idx", "==", "self", ".", "index_length", ":", "\n", "            ", "self", ".", "cur_idx", "=", "0", "\n", "raise", "StopIteration", "\n", "\n", "", "word_t", "=", "autograd", ".", "Variable", "(", "self", ".", "x", "[", "self", ".", "cur_idx", "]", ")", ".", "cuda", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "label_t", "=", "autograd", ".", "Variable", "(", "self", ".", "y", "[", "self", ".", "cur_idx", "]", ")", ".", "cuda", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n", "self", ".", "cur_idx", "+=", "1", "\n", "\n", "return", "word_t", ",", "label_t", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.dataset.LargeDataset.__init__": [[97, 109], ["object.__init__", "list", "dataset.LargeDataset.shuffle", "range"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.__init__", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.dataset.LargeDataset.shuffle"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "range_idx", ",", "batch_size", ",", "sequence_length", ")", ":", "\n", "        ", "super", "(", "LargeDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "range_idx", "=", "range_idx", "\n", "self", ".", "shuffle_list", "=", "list", "(", "range", "(", "0", ",", "range_idx", ")", ")", "\n", "self", ".", "shuffle", "(", ")", "\n", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "sequence_length", "=", "sequence_length", "\n", "self", ".", "token_per_batch", "=", "self", ".", "batch_size", "*", "self", ".", "sequence_length", "\n", "\n", "self", ".", "total_batch_num", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.dataset.LargeDataset.shuffle": [[110, 112], ["random.shuffle"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.dataset.LargeDataset.shuffle"], ["", "def", "shuffle", "(", "self", ")", ":", "\n", "        ", "random", ".", "shuffle", "(", "self", ".", "shuffle_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.dataset.LargeDataset.get_tqdm": [[113, 120], ["tqdm.tqdm.tqdm().__iter__", "tqdm.tqdm.tqdm().__iter__", "tqdm.tqdm.tqdm", "tqdm.tqdm.tqdm"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.dataset.LargeDataset.__iter__", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.dataset.LargeDataset.__iter__"], ["", "def", "get_tqdm", "(", "self", ")", ":", "\n", "        ", "self", ".", "batch_count", "=", "0", "\n", "\n", "if", "self", ".", "total_batch_num", "<=", "0", ":", "\n", "            ", "return", "tqdm", "(", "self", ",", "mininterval", "=", "2", ",", "leave", "=", "False", ",", "file", "=", "sys", ".", "stdout", ")", ".", "__iter__", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "tqdm", "(", "self", ",", "mininterval", "=", "2", ",", "total", "=", "self", ".", "total_batch_num", ",", "leave", "=", "False", ",", "file", "=", "sys", ".", "stdout", ",", "ncols", "=", "80", ")", ".", "__iter__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.dataset.LargeDataset.__iter__": [[121, 126], ["None"], "methods", ["None"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "cur_idx", "=", "0", "\n", "self", ".", "file_idx", "=", "0", "\n", "self", ".", "index_length", "=", "0", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.dataset.LargeDataset.__next__": [[127, 138], ["torch.Variable().cuda", "torch.Variable().cuda", "torch.Variable().cuda", "torch.Variable().cuda", "dataset.LargeDataset.y[].cuda", "dataset.LargeDataset.open_next", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.dataset.LargeDataset.open_next"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "cur_idx", ">=", "self", ".", "index_length", ":", "\n", "            ", "self", ".", "open_next", "(", ")", "\n", "\n", "", "word_t", "=", "autograd", ".", "Variable", "(", "self", ".", "x", "[", "self", ".", "cur_idx", "]", ")", ".", "cuda", "(", ")", "\n", "# label_t = autograd.Variable(self.y[self.cur_idx]).cuda()", "\n", "label_t", "=", "self", ".", "y", "[", "self", ".", "cur_idx", "]", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "cur_idx", "+=", "1", "\n", "\n", "return", "word_t", ",", "label_t", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.dataset.LargeDataset.open_next": [[139, 158], ["pickle.load", "torch.LongTensor().view().transpose_().transpose_().contiguous", "torch.LongTensor().view().transpose_().transpose_().contiguous", "torch.LongTensor().view().transpose_().transpose_().contiguous", "torch.LongTensor().view().transpose_().transpose_().contiguous", "torch.LongTensor().view().transpose_().transpose_().contiguous", "torch.LongTensor().view().transpose_().transpose_().contiguous", "torch.LongTensor().view().transpose_().transpose_().contiguous", "torch.LongTensor().view().transpose_().transpose_().contiguous", "torch.LongTensor().view().transpose_().transpose_().contiguous", "torch.LongTensor().view().transpose_().transpose_().contiguous", "torch.LongTensor().view().transpose_().transpose_().contiguous", "torch.LongTensor().view().transpose_().transpose_().contiguous", "torch.LongTensor().view().transpose_().transpose_().contiguous", "torch.LongTensor().view().transpose_().transpose_().contiguous", "torch.LongTensor().view().transpose_().transpose_().contiguous", "torch.LongTensor().view().transpose_().transpose_().contiguous", "torch.LongTensor().view().transpose_().transpose_().contiguous", "torch.LongTensor().view().transpose_().transpose_().contiguous", "torch.LongTensor().view().transpose_().transpose_().contiguous", "torch.LongTensor().view().transpose_().transpose_().contiguous", "torch.LongTensor().view().transpose_().transpose_().contiguous", "torch.LongTensor().view().transpose_().transpose_().contiguous", "torch.LongTensor().view().transpose_().transpose_().contiguous", "torch.LongTensor().view().transpose_().transpose_().contiguous", "torch.LongTensor().view().transpose_().transpose_().contiguous", "torch.LongTensor().view().transpose_().transpose_().contiguous", "torch.LongTensor().view().transpose_().transpose_().contiguous", "torch.LongTensor().view().transpose_().transpose_().contiguous", "torch.LongTensor().view().transpose_().transpose_().contiguous", "torch.LongTensor().view().transpose_().transpose_().contiguous", "torch.LongTensor().view().transpose_().transpose_().contiguous", "torch.LongTensor().view().transpose_().transpose_().contiguous", "dataset.LargeDataset.x.size", "dataset.LargeDataset.shuffle", "open", "len", "torch.LongTensor().view().transpose_().transpose_", "torch.LongTensor().view().transpose_().transpose_", "torch.LongTensor().view().transpose_().transpose_", "torch.LongTensor().view().transpose_().transpose_", "torch.LongTensor().view().transpose_().transpose_", "torch.LongTensor().view().transpose_().transpose_", "torch.LongTensor().view().transpose_().transpose_", "torch.LongTensor().view().transpose_().transpose_", "torch.LongTensor().view().transpose_().transpose_", "torch.LongTensor().view().transpose_().transpose_", "torch.LongTensor().view().transpose_().transpose_", "torch.LongTensor().view().transpose_().transpose_", "torch.LongTensor().view().transpose_().transpose_", "torch.LongTensor().view().transpose_().transpose_", "torch.LongTensor().view().transpose_().transpose_", "torch.LongTensor().view().transpose_().transpose_", "torch.LongTensor().view().transpose_().transpose_", "torch.LongTensor().view().transpose_().transpose_", "torch.LongTensor().view().transpose_().transpose_", "torch.LongTensor().view().transpose_().transpose_", "torch.LongTensor().view().transpose_().transpose_", "torch.LongTensor().view().transpose_().transpose_", "torch.LongTensor().view().transpose_().transpose_", "torch.LongTensor().view().transpose_().transpose_", "torch.LongTensor().view().transpose_().transpose_", "torch.LongTensor().view().transpose_().transpose_", "torch.LongTensor().view().transpose_().transpose_", "torch.LongTensor().view().transpose_().transpose_", "torch.LongTensor().view().transpose_().transpose_", "torch.LongTensor().view().transpose_().transpose_", "torch.LongTensor().view().transpose_().transpose_", "torch.LongTensor().view().transpose_().transpose_", "str", "torch.LongTensor().view().transpose_", "torch.LongTensor().view().transpose_", "torch.LongTensor().view().transpose_", "torch.LongTensor().view().transpose_", "torch.LongTensor().view().transpose_", "torch.LongTensor().view().transpose_", "torch.LongTensor().view().transpose_", "torch.LongTensor().view().transpose_", "torch.LongTensor().view().transpose_", "torch.LongTensor().view().transpose_", "torch.LongTensor().view().transpose_", "torch.LongTensor().view().transpose_", "torch.LongTensor().view().transpose_", "torch.LongTensor().view().transpose_", "torch.LongTensor().view().transpose_", "torch.LongTensor().view().transpose_", "torch.LongTensor().view().transpose_", "torch.LongTensor().view().transpose_", "torch.LongTensor().view().transpose_", "torch.LongTensor().view().transpose_", "torch.LongTensor().view().transpose_", "torch.LongTensor().view().transpose_", "torch.LongTensor().view().transpose_", "torch.LongTensor().view().transpose_", "torch.LongTensor().view().transpose_", "torch.LongTensor().view().transpose_", "torch.LongTensor().view().transpose_", "torch.LongTensor().view().transpose_", "torch.LongTensor().view().transpose_", "torch.LongTensor().view().transpose_", "torch.LongTensor().view().transpose_", "torch.LongTensor().view().transpose_", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.dataset.LargeDataset.shuffle"], ["", "def", "open_next", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "file_idx", ">=", "self", ".", "range_idx", ":", "\n", "            ", "self", ".", "total_batch_num", "=", "self", ".", "batch_count", "\n", "self", ".", "shuffle", "(", ")", "\n", "raise", "StopIteration", "\n", "\n", "", "self", ".", "dataset", "=", "pickle", ".", "load", "(", "open", "(", "self", ".", "root", "+", "'train_'", "+", "str", "(", "self", ".", "shuffle_list", "[", "self", ".", "file_idx", "]", ")", "+", "'.pk'", ",", "'rb'", ")", ")", "\n", "\n", "res_num", "=", "len", "(", "self", ".", "dataset", ")", "-", "1", "\n", "res_num", "=", "res_num", "-", "res_num", "%", "self", ".", "token_per_batch", "\n", "\n", "self", ".", "x", "=", "torch", ".", "LongTensor", "(", "self", ".", "dataset", "[", "0", ":", "res_num", "]", ")", ".", "view", "(", "self", ".", "batch_size", ",", "-", "1", ",", "self", ".", "sequence_length", ")", ".", "transpose_", "(", "0", ",", "1", ")", ".", "transpose_", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "self", ".", "y", "=", "torch", ".", "LongTensor", "(", "self", ".", "dataset", "[", "1", ":", "res_num", "+", "1", "]", ")", ".", "view", "(", "self", ".", "batch_size", ",", "-", "1", ",", "self", ".", "sequence_length", ")", ".", "transpose_", "(", "0", ",", "1", ")", ".", "transpose_", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "self", ".", "index_length", "=", "self", ".", "x", ".", "size", "(", "0", ")", "\n", "self", ".", "cur_idx", "=", "0", "\n", "\n", "self", ".", "batch_count", "+=", "self", ".", "index_length", "\n", "self", ".", "file_idx", "+=", "1", "", "", "", ""]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.ldnet.BasicUnit.__init__": [[14, 35], ["torch.Module.__init__", "ldnet.BasicUnit.init_hidden", "model_word_ada.init_lstm"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.__init__", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.basic.BasicRNN.init_hidden", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.utils.init_lstm"], ["    ", "def", "__init__", "(", "self", ",", "unit", ",", "input_dim", ",", "increase_rate", ",", "droprate", ",", "layer_drop", "=", "0", ")", ":", "\n", "        ", "super", "(", "BasicUnit", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "rnnunit_map", "=", "{", "'rnn'", ":", "nn", ".", "RNN", ",", "'lstm'", ":", "nn", ".", "LSTM", ",", "'gru'", ":", "nn", ".", "GRU", "}", "\n", "\n", "self", ".", "unit", "=", "unit", "\n", "\n", "self", ".", "layer", "=", "rnnunit_map", "[", "unit", "]", "(", "input_dim", ",", "increase_rate", ",", "1", ")", "\n", "\n", "if", "'lstm'", "==", "self", ".", "unit", ":", "\n", "            ", "utils", ".", "init_lstm", "(", "self", ".", "layer", ")", "\n", "\n", "", "self", ".", "layer_drop", "=", "layer_drop", "\n", "\n", "self", ".", "droprate", "=", "droprate", "\n", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "increase_rate", "=", "increase_rate", "\n", "self", ".", "output_dim", "=", "input_dim", "+", "increase_rate", "\n", "\n", "self", ".", "init_hidden", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.ldnet.BasicUnit.init_hidden": [[36, 39], ["None"], "methods", ["None"], ["", "def", "init_hidden", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "hidden_state", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.ldnet.BasicUnit.rand_ini": [[40, 42], ["None"], "methods", ["None"], ["", "def", "rand_ini", "(", "self", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.ldnet.BasicUnit.forward": [[43, 64], ["ldnet.BasicUnit.layer", "model_word_ada.repackage_hidden", "out.contiguous.contiguous.contiguous", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.dropout", "torch.dropout", "torch.dropout", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "random.uniform", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.size", "x.size"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.utils.repackage_hidden"], ["", "def", "forward", "(", "self", ",", "x", ",", "p_out", ")", ":", "\n", "\n", "        ", "if", "self", ".", "droprate", ">", "0", ":", "\n", "            ", "new_x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "droprate", ",", "training", "=", "self", ".", "training", ")", "\n", "", "else", ":", "\n", "            ", "new_x", "=", "x", "\n", "\n", "", "out", ",", "new_hidden", "=", "self", ".", "layer", "(", "new_x", ",", "self", ".", "hidden_state", ")", "\n", "\n", "self", ".", "hidden_state", "=", "utils", ".", "repackage_hidden", "(", "new_hidden", ")", "\n", "\n", "out", "=", "out", ".", "contiguous", "(", ")", "\n", "\n", "if", "self", ".", "training", "and", "random", ".", "uniform", "(", "0", ",", "1", ")", "<", "self", ".", "layer_drop", ":", "\n", "            ", "deep_out", "=", "torch", ".", "autograd", ".", "Variable", "(", "torch", ".", "zeros", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ",", "self", ".", "increase_rate", ")", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "deep_out", "=", "out", "\n", "\n", "", "o_out", "=", "torch", ".", "cat", "(", "[", "p_out", ",", "out", "]", ",", "2", ")", "\n", "d_out", "=", "torch", ".", "cat", "(", "[", "x", ",", "deep_out", "]", ",", "2", ")", "\n", "return", "d_out", ",", "o_out", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.ldnet.LDRNN.__init__": [[66, 76], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "ldnet.LDRNN.init_hidden", "ldnet.BasicUnit", "range"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.__init__", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.basic.BasicRNN.init_hidden"], ["    ", "def", "__init__", "(", "self", ",", "layer_num", ",", "unit", ",", "emb_dim", ",", "hid_dim", ",", "droprate", ",", "layer_drop", ")", ":", "\n", "        ", "super", "(", "LDRNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "layer_list", "=", "[", "BasicUnit", "(", "unit", ",", "emb_dim", "+", "i", "*", "hid_dim", ",", "hid_dim", ",", "droprate", ",", "layer_drop", ")", "for", "i", "in", "range", "(", "layer_num", ")", "]", "\n", "\n", "self", ".", "layer_num", "=", "layer_num", "\n", "self", ".", "layer", "=", "nn", ".", "ModuleList", "(", "self", ".", "layer_list", ")", "\n", "self", ".", "output_dim", "=", "self", ".", "layer_list", "[", "-", "1", "]", ".", "output_dim", "\n", "\n", "self", ".", "init_hidden", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.ldnet.LDRNN.init_hidden": [[77, 81], ["tup.init_hidden"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.basic.BasicRNN.init_hidden"], ["", "def", "init_hidden", "(", "self", ")", ":", "\n", "\n", "        ", "for", "tup", "in", "self", ".", "layer_list", ":", "\n", "            ", "tup", ".", "init_hidden", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.ldnet.LDRNN.rand_ini": [[82, 86], ["tup.rand_ini"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.basic.BasicRNN.rand_ini"], ["", "", "def", "rand_ini", "(", "self", ")", ":", "\n", "\n", "        ", "for", "tup", "in", "self", ".", "layer_list", ":", "\n", "            ", "tup", ".", "rand_ini", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.ldnet.LDRNN.forward": [[87, 92], ["range"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "output", "=", "x", "\n", "for", "ind", "in", "range", "(", "self", ".", "layer_num", ")", ":", "\n", "            ", "x", ",", "output", "=", "self", ".", "layer_list", "[", "ind", "]", "(", "x", ",", "output", ")", "\n", "", "return", "output", "", "", "", ""]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.densenet.BasicUnit.__init__": [[13, 32], ["torch.Module.__init__", "densenet.BasicUnit.init_hidden", "model_word_ada.init_lstm"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.__init__", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.basic.BasicRNN.init_hidden", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.utils.init_lstm"], ["    ", "def", "__init__", "(", "self", ",", "unit", ",", "input_dim", ",", "increase_rate", ",", "droprate", ")", ":", "\n", "        ", "super", "(", "BasicUnit", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "rnnunit_map", "=", "{", "'rnn'", ":", "nn", ".", "RNN", ",", "'lstm'", ":", "nn", ".", "LSTM", ",", "'gru'", ":", "nn", ".", "GRU", "}", "\n", "\n", "self", ".", "unit", "=", "unit", "\n", "\n", "self", ".", "layer", "=", "rnnunit_map", "[", "unit", "]", "(", "input_dim", ",", "increase_rate", ",", "1", ")", "\n", "\n", "if", "'lstm'", "==", "self", ".", "unit", ":", "\n", "            ", "utils", ".", "init_lstm", "(", "self", ".", "layer", ")", "\n", "\n", "", "self", ".", "droprate", "=", "droprate", "\n", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "increase_rate", "=", "increase_rate", "\n", "self", ".", "output_dim", "=", "input_dim", "+", "increase_rate", "\n", "\n", "self", ".", "init_hidden", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.densenet.BasicUnit.init_hidden": [[33, 36], ["None"], "methods", ["None"], ["", "def", "init_hidden", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "hidden_state", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.densenet.BasicUnit.rand_ini": [[37, 39], ["None"], "methods", ["None"], ["", "def", "rand_ini", "(", "self", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.densenet.BasicUnit.forward": [[40, 54], ["densenet.BasicUnit.layer", "model_word_ada.repackage_hidden", "out.contiguous.contiguous.contiguous", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.dropout", "torch.dropout", "torch.dropout"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.utils.repackage_hidden"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "if", "self", ".", "droprate", ">", "0", ":", "\n", "            ", "new_x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "droprate", ",", "training", "=", "self", ".", "training", ")", "\n", "", "else", ":", "\n", "            ", "new_x", "=", "x", "\n", "\n", "", "out", ",", "new_hidden", "=", "self", ".", "layer", "(", "new_x", ",", "self", ".", "hidden_state", ")", "\n", "\n", "self", ".", "hidden_state", "=", "utils", ".", "repackage_hidden", "(", "new_hidden", ")", "\n", "\n", "out", "=", "out", ".", "contiguous", "(", ")", "\n", "\n", "return", "torch", ".", "cat", "(", "[", "x", ",", "out", "]", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.densenet.DenseRNN.__init__": [[56, 64], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "densenet.DenseRNN.init_hidden", "densenet.BasicUnit", "range"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.__init__", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.basic.BasicRNN.init_hidden"], ["    ", "def", "__init__", "(", "self", ",", "layer_num", ",", "unit", ",", "emb_dim", ",", "hid_dim", ",", "droprate", ")", ":", "\n", "        ", "super", "(", "DenseRNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "layer_list", "=", "[", "BasicUnit", "(", "unit", ",", "emb_dim", "+", "i", "*", "hid_dim", ",", "hid_dim", ",", "droprate", ")", "for", "i", "in", "range", "(", "layer_num", ")", "]", "\n", "self", ".", "layer", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "layer_list", ")", "\n", "self", ".", "output_dim", "=", "self", ".", "layer_list", "[", "-", "1", "]", ".", "output_dim", "\n", "\n", "self", ".", "init_hidden", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.densenet.DenseRNN.init_hidden": [[65, 69], ["tup.init_hidden"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.basic.BasicRNN.init_hidden"], ["", "def", "init_hidden", "(", "self", ")", ":", "\n", "\n", "        ", "for", "tup", "in", "self", ".", "layer_list", ":", "\n", "            ", "tup", ".", "init_hidden", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.densenet.DenseRNN.rand_ini": [[70, 74], ["tup.rand_ini"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.basic.BasicRNN.rand_ini"], ["", "", "def", "rand_ini", "(", "self", ")", ":", "\n", "\n", "        ", "for", "tup", "in", "self", ".", "layer_list", ":", "\n", "            ", "tup", ".", "rand_ini", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.densenet.DenseRNN.forward": [[75, 77], ["densenet.DenseRNN.layer"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "layer", "(", "x", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.bnlstm.SeparatedBatchNorm1d.__init__": [[17, 42], ["torch.nn.Module.__init__", "range", "bnlstm.SeparatedBatchNorm1d.reset_parameters", "torch.nn.Parameter", "torch.nn.Parameter", "bnlstm.SeparatedBatchNorm1d.register_parameter", "bnlstm.SeparatedBatchNorm1d.register_parameter", "bnlstm.SeparatedBatchNorm1d.register_buffer", "bnlstm.SeparatedBatchNorm1d.register_buffer", "torch.FloatTensor", "torch.FloatTensor", "torch.zeros", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.__init__", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.bnlstm.BNLSTM.reset_parameters"], ["def", "__init__", "(", "self", ",", "num_features", ",", "max_length", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "\n", "affine", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Most parts are copied from\n        torch.nn.modules.batchnorm._BatchNorm.\n        \"\"\"", "\n", "\n", "super", "(", "SeparatedBatchNorm1d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "max_length", "=", "max_length", "\n", "self", ".", "affine", "=", "affine", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "momentum", "=", "momentum", "\n", "if", "self", ".", "affine", ":", "\n", "            ", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "num_features", ")", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "num_features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'weight'", ",", "None", ")", "\n", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "for", "i", "in", "range", "(", "max_length", ")", ":", "\n", "            ", "self", ".", "register_buffer", "(", "\n", "'running_mean_{}'", ".", "format", "(", "i", ")", ",", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "\n", "'running_var_{}'", ".", "format", "(", "i", ")", ",", "torch", ".", "ones", "(", "num_features", ")", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.bnlstm.SeparatedBatchNorm1d.reset_parameters": [[43, 52], ["range", "getattr", "getattr", "getattr.zero_", "getattr.fill_", "bnlstm.SeparatedBatchNorm1d.weight.data.uniform_", "bnlstm.SeparatedBatchNorm1d.bias.data.zero_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "max_length", ")", ":", "\n", "            ", "running_mean_i", "=", "getattr", "(", "self", ",", "'running_mean_{}'", ".", "format", "(", "i", ")", ")", "\n", "running_var_i", "=", "getattr", "(", "self", ",", "'running_var_{}'", ".", "format", "(", "i", ")", ")", "\n", "running_mean_i", ".", "zero_", "(", ")", "\n", "running_var_i", ".", "fill_", "(", "1", ")", "\n", "", "if", "self", ".", "affine", ":", "\n", "            ", "self", ".", "weight", ".", "data", ".", "uniform_", "(", ")", "\n", "self", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.bnlstm.SeparatedBatchNorm1d._check_input_dim": [[53, 57], ["input_.size", "bnlstm.SeparatedBatchNorm1d.running_mean_0.nelement", "ValueError", "input_.size"], "methods", ["None"], ["", "", "def", "_check_input_dim", "(", "self", ",", "input_", ")", ":", "\n", "        ", "if", "input_", ".", "size", "(", "1", ")", "!=", "self", ".", "running_mean_0", ".", "nelement", "(", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'got {}-feature tensor, expected {}'", "\n", ".", "format", "(", "input_", ".", "size", "(", "1", ")", ",", "self", ".", "num_features", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.bnlstm.SeparatedBatchNorm1d.forward": [[58, 68], ["bnlstm.SeparatedBatchNorm1d._check_input_dim", "getattr", "getattr", "torch.nn.functional.batch_norm"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.bnlstm.SeparatedBatchNorm1d._check_input_dim"], ["", "", "def", "forward", "(", "self", ",", "input_", ",", "time", ")", ":", "\n", "        ", "self", ".", "_check_input_dim", "(", "input_", ")", "\n", "if", "time", ">=", "self", ".", "max_length", ":", "\n", "            ", "time", "=", "self", ".", "max_length", "-", "1", "\n", "", "running_mean", "=", "getattr", "(", "self", ",", "'running_mean_{}'", ".", "format", "(", "time", ")", ")", "\n", "running_var", "=", "getattr", "(", "self", ",", "'running_var_{}'", ".", "format", "(", "time", ")", ")", "\n", "return", "functional", ".", "batch_norm", "(", "\n", "input", "=", "input_", ",", "running_mean", "=", "running_mean", ",", "running_var", "=", "running_var", ",", "\n", "weight", "=", "self", ".", "weight", ",", "bias", "=", "self", ".", "bias", ",", "training", "=", "self", ".", "training", ",", "\n", "momentum", "=", "self", ".", "momentum", ",", "eps", "=", "self", ".", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.bnlstm.SeparatedBatchNorm1d.__repr__": [[69, 73], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "'{name}({num_features}, eps={eps}, momentum={momentum},'", "\n", "' max_length={max_length}, affine={affine})'", "\n", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.bnlstm.BNLSTMCell.__init__": [[78, 101], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "bnlstm.SeparatedBatchNorm1d", "bnlstm.SeparatedBatchNorm1d", "bnlstm.SeparatedBatchNorm1d", "bnlstm.BNLSTMCell.reset_parameters", "torch.FloatTensor", "torch.FloatTensor", "torch.nn.Parameter", "bnlstm.BNLSTMCell.register_parameter", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.__init__", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.bnlstm.BNLSTM.reset_parameters"], ["def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "max_length", "=", "784", ",", "use_bias", "=", "True", ")", ":", "\n", "\n", "        ", "super", "(", "BNLSTMCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "max_length", "=", "max_length", "\n", "self", ".", "use_bias", "=", "use_bias", "\n", "self", ".", "weight_ih", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "FloatTensor", "(", "input_size", ",", "4", "*", "hidden_size", ")", ")", "\n", "self", ".", "weight_hh", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "FloatTensor", "(", "hidden_size", ",", "4", "*", "hidden_size", ")", ")", "\n", "if", "use_bias", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "4", "*", "hidden_size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "# BN parameters", "\n", "", "self", ".", "bn_ih", "=", "SeparatedBatchNorm1d", "(", "\n", "num_features", "=", "4", "*", "hidden_size", ",", "max_length", "=", "max_length", ")", "\n", "self", ".", "bn_hh", "=", "SeparatedBatchNorm1d", "(", "\n", "num_features", "=", "4", "*", "hidden_size", ",", "max_length", "=", "max_length", ")", "\n", "self", ".", "bn_c", "=", "SeparatedBatchNorm1d", "(", "\n", "num_features", "=", "hidden_size", ",", "max_length", "=", "max_length", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.bnlstm.BNLSTMCell.reset_parameters": [[102, 125], ["torch.nn.init.orthogonal", "torch.eye", "weight_hh_data.repeat.repeat.repeat", "bnlstm.BNLSTMCell.weight_hh.data.set_", "torch.nn.init.constant", "bnlstm.BNLSTMCell.bn_ih.reset_parameters", "bnlstm.BNLSTMCell.bn_hh.reset_parameters", "bnlstm.BNLSTMCell.bn_c.reset_parameters", "bnlstm.BNLSTMCell.bn_ih.bias.data.fill_", "bnlstm.BNLSTMCell.bn_hh.bias.data.fill_", "bnlstm.BNLSTMCell.bn_ih.weight.data.fill_", "bnlstm.BNLSTMCell.bn_hh.weight.data.fill_", "bnlstm.BNLSTMCell.bn_c.weight.data.fill_"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.bnlstm.BNLSTM.reset_parameters", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.bnlstm.BNLSTM.reset_parameters", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.bnlstm.BNLSTM.reset_parameters"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Initialize parameters following the way proposed in the paper.\n        \"\"\"", "\n", "\n", "# The input-to-hidden weight matrix is initialized orthogonally.", "\n", "init", ".", "orthogonal", "(", "self", ".", "weight_ih", ".", "data", ")", "\n", "# The hidden-to-hidden weight matrix is initialized as an identity", "\n", "# matrix.", "\n", "weight_hh_data", "=", "torch", ".", "eye", "(", "self", ".", "hidden_size", ")", "\n", "weight_hh_data", "=", "weight_hh_data", ".", "repeat", "(", "1", ",", "4", ")", "\n", "self", ".", "weight_hh", ".", "data", ".", "set_", "(", "weight_hh_data", ")", "\n", "# The bias is just set to zero vectors.", "\n", "init", ".", "constant", "(", "self", ".", "bias", ".", "data", ",", "val", "=", "0", ")", "\n", "# Initialization of BN parameters.", "\n", "self", ".", "bn_ih", ".", "reset_parameters", "(", ")", "\n", "self", ".", "bn_hh", ".", "reset_parameters", "(", ")", "\n", "self", ".", "bn_c", ".", "reset_parameters", "(", ")", "\n", "self", ".", "bn_ih", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "self", ".", "bn_hh", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "self", ".", "bn_ih", ".", "weight", ".", "data", ".", "fill_", "(", "0.1", ")", "\n", "self", ".", "bn_hh", ".", "weight", ".", "data", ".", "fill_", "(", "0.1", ")", "\n", "self", ".", "bn_c", ".", "weight", ".", "data", ".", "fill_", "(", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.bnlstm.BNLSTMCell.forward": [[126, 154], ["h_0.size", "bnlstm.BNLSTMCell.bias.unsqueeze().expand", "torch.mm", "torch.mm", "bnlstm.BNLSTMCell.bn_hh", "bnlstm.BNLSTMCell.bn_ih", "torch.split", "torch.sigmoid", "torch.tanh", "bnlstm.BNLSTMCell.bias.unsqueeze", "bnlstm.BNLSTMCell.bias.size", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "bnlstm.BNLSTMCell.bn_c"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_", ",", "hx", ",", "time", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            input_: A (batch, input_size) tensor containing input\n                features.\n            hx: A tuple (h_0, c_0), which contains the initial hidden\n                and cell state, where the size of both states is\n                (batch, hidden_size).\n            time: The current timestep value, which is used to\n                get appropriate running statistics.\n\n        Returns:\n            h_1, c_1: Tensors containing the next hidden and cell state.\n        \"\"\"", "\n", "\n", "h_0", ",", "c_0", "=", "hx", "\n", "batch_size", "=", "h_0", ".", "size", "(", "0", ")", "\n", "bias_batch", "=", "(", "self", ".", "bias", ".", "unsqueeze", "(", "0", ")", "\n", ".", "expand", "(", "batch_size", ",", "*", "self", ".", "bias", ".", "size", "(", ")", ")", ")", "\n", "wh", "=", "torch", ".", "mm", "(", "h_0", ",", "self", ".", "weight_hh", ")", "\n", "wi", "=", "torch", ".", "mm", "(", "input_", ",", "self", ".", "weight_ih", ")", "\n", "bn_wh", "=", "self", ".", "bn_hh", "(", "wh", ",", "time", "=", "time", ")", "\n", "bn_wi", "=", "self", ".", "bn_ih", "(", "wi", ",", "time", "=", "time", ")", "\n", "f", ",", "i", ",", "o", ",", "g", "=", "torch", ".", "split", "(", "bn_wh", "+", "bn_wi", "+", "bias_batch", ",", "\n", "split_size", "=", "self", ".", "hidden_size", ",", "dim", "=", "1", ")", "\n", "c_1", "=", "torch", ".", "sigmoid", "(", "f", ")", "*", "c_0", "+", "torch", ".", "sigmoid", "(", "i", ")", "*", "torch", ".", "tanh", "(", "g", ")", "\n", "h_1", "=", "torch", ".", "sigmoid", "(", "o", ")", "*", "torch", ".", "tanh", "(", "self", ".", "bn_c", "(", "c_1", ",", "time", "=", "time", ")", ")", "\n", "return", "h_1", ",", "c_1", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.bnlstm.BNLSTM.__init__": [[160, 178], ["torch.nn.Module.__init__", "range", "torch.nn.Dropout", "bnlstm.BNLSTM.reset_parameters", "bnlstm.BNLSTMCell", "setattr"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.__init__", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.bnlstm.BNLSTM.reset_parameters"], ["def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "num_layers", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "batch_first", "=", "False", ",", "dropout", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BNLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "use_bias", "=", "use_bias", "\n", "self", ".", "batch_first", "=", "batch_first", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "for", "layer", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "layer_input_size", "=", "input_size", "if", "layer", "==", "0", "else", "hidden_size", "\n", "cell", "=", "BNLSTMCell", "(", "input_size", "=", "layer_input_size", ",", "\n", "hidden_size", "=", "hidden_size", ",", "\n", "**", "kwargs", ")", "\n", "setattr", "(", "self", ",", "'cell_{}'", ".", "format", "(", "layer", ")", ",", "cell", ")", "\n", "", "self", ".", "dropout_layer", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.bnlstm.BNLSTM.get_cell": [[179, 181], ["getattr"], "methods", ["None"], ["", "def", "get_cell", "(", "self", ",", "layer", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "'cell_{}'", ".", "format", "(", "layer", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.bnlstm.BNLSTM.reset_parameters": [[182, 186], ["range", "bnlstm.BNLSTM.get_cell", "bnlstm.BNLSTM.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.bnlstm.BNLSTM.get_cell", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.bnlstm.BNLSTM.reset_parameters"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "for", "layer", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "cell", "=", "self", ".", "get_cell", "(", "layer", ")", "\n", "cell", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.bnlstm.BNLSTM._forward_rnn": [[187, 201], ["input_.size", "range", "torch.stack", "cell", "torch.stack.append"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.logger.Logger.append"], ["", "", "@", "staticmethod", "\n", "def", "_forward_rnn", "(", "cell", ",", "input_", ",", "hx", ")", ":", "\n", "        ", "max_time", "=", "input_", ".", "size", "(", "0", ")", "\n", "output", "=", "[", "]", "\n", "for", "time", "in", "range", "(", "max_time", ")", ":", "\n", "            ", "h_next", ",", "c_next", "=", "cell", "(", "input_", "=", "input_", "[", "time", "]", ",", "hx", "=", "hx", ",", "time", "=", "time", ")", "\n", "# # mask = (time < length).float().unsqueeze(1).expand_as(h_next)", "\n", "# h_next = h_next*mask + hx[0]*(1 - mask)", "\n", "# c_next = c_next*mask + hx[1]*(1 - mask)", "\n", "hx_next", "=", "(", "h_next", ",", "c_next", ")", "\n", "output", ".", "append", "(", "h_next", ")", "\n", "hx", "=", "hx_next", "\n", "", "output", "=", "torch", ".", "stack", "(", "output", ",", "0", ")", "\n", "return", "output", ",", "hx", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.bnlstm.BNLSTM.forward": [[202, 228], ["bnlstm.BNLSTM.size", "range", "torch.stack", "torch.stack", "bnlstm.BNLSTM.transpose", "torch.autograd.Variable", "bnlstm.BNLSTM.get_cell", "bnlstm.BNLSTM._forward_rnn", "bnlstm.BNLSTM.dropout_layer", "torch.stack.append", "torch.stack.append", "bnlstm.BNLSTM.data.new().zero_", "bnlstm.BNLSTM.data.new"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.bnlstm.BNLSTM.get_cell", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.bnlstm.BNLSTM._forward_rnn", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.logger.Logger.append", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.logger.Logger.append"], ["", "def", "forward", "(", "self", ",", "input_", ",", "length", "=", "None", ",", "hx", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "batch_first", ":", "\n", "            ", "input_", "=", "input_", ".", "transpose", "(", "0", ",", "1", ")", "\n", "", "max_time", ",", "batch_size", ",", "_", "=", "input_", ".", "size", "(", ")", "\n", "# if length is None:", "\n", "#     length = Variable(torch.LongTensor([max_time] * batch_size))", "\n", "#     if input_.is_cuda:", "\n", "#         device = input_.get_device()", "\n", "#         length = length.cuda(device)", "\n", "if", "hx", "is", "None", ":", "\n", "            ", "hx", "=", "Variable", "(", "input_", ".", "data", ".", "new", "(", "batch_size", ",", "self", ".", "hidden_size", ")", ".", "zero_", "(", ")", ")", "\n", "hx", "=", "(", "hx", ",", "hx", ")", "\n", "", "h_n", "=", "[", "]", "\n", "c_n", "=", "[", "]", "\n", "layer_output", "=", "None", "\n", "for", "layer", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "cell", "=", "self", ".", "get_cell", "(", "layer", ")", "\n", "layer_output", ",", "(", "layer_h_n", ",", "layer_c_n", ")", "=", "BNLSTM", ".", "_forward_rnn", "(", "\n", "cell", "=", "cell", ",", "input_", "=", "input_", ",", "hx", "=", "hx", ")", "\n", "input_", "=", "self", ".", "dropout_layer", "(", "layer_output", ")", "\n", "h_n", ".", "append", "(", "layer_h_n", ")", "\n", "c_n", ".", "append", "(", "layer_c_n", ")", "\n", "", "output", "=", "layer_output", "\n", "h_n", "=", "torch", ".", "stack", "(", "h_n", ",", "0", ")", "\n", "c_n", "=", "torch", ".", "stack", "(", "c_n", ",", "0", ")", "\n", "return", "output", ",", "(", "h_n", ",", "c_n", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.basic.BasicUnit.__init__": [[8, 21], ["torch.Module.__init__", "basic.BasicUnit.init_hidden"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.__init__", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.basic.BasicRNN.init_hidden"], ["    ", "def", "__init__", "(", "self", ",", "unit", ",", "input_dim", ",", "hid_dim", ",", "droprate", ")", ":", "\n", "        ", "super", "(", "BasicUnit", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "rnnunit_map", "=", "{", "'rnn'", ":", "nn", ".", "RNN", ",", "'lstm'", ":", "nn", ".", "LSTM", ",", "'gru'", ":", "nn", ".", "GRU", ",", "'bnlstm'", ":", "BNLSTM", "}", "\n", "\n", "self", ".", "batch_norm", "=", "(", "unit", "==", "'bnlstm'", ")", "\n", "\n", "self", ".", "layer", "=", "rnnunit_map", "[", "unit", "]", "(", "input_dim", ",", "hid_dim", ",", "1", ")", "\n", "self", ".", "droprate", "=", "droprate", "\n", "\n", "self", ".", "output_dim", "=", "hid_dim", "\n", "\n", "self", ".", "init_hidden", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.basic.BasicUnit.init_hidden": [[22, 25], ["None"], "methods", ["None"], ["", "def", "init_hidden", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "hidden_state", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.basic.BasicUnit.rand_ini": [[26, 30], ["model_word_ada.init_lstm"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.utils.init_lstm"], ["", "def", "rand_ini", "(", "self", ")", ":", "\n", "\n", "        ", "if", "not", "self", ".", "batch_norm", ":", "\n", "            ", "utils", ".", "init_lstm", "(", "self", ".", "layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.basic.BasicUnit.forward": [[31, 41], ["basic.BasicUnit.layer", "model_word_ada.repackage_hidden", "torch.dropout", "torch.dropout", "torch.dropout"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.utils.repackage_hidden"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# set_trace()", "\n", "        ", "out", ",", "new_hidden", "=", "self", ".", "layer", "(", "x", ",", "self", ".", "hidden_state", ")", "\n", "\n", "self", ".", "hidden_state", "=", "utils", ".", "repackage_hidden", "(", "new_hidden", ")", "\n", "\n", "if", "self", ".", "droprate", ">", "0", ":", "\n", "            ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "droprate", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.basic.BasicRNN.__init__": [[43, 51], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "basic.BasicRNN.init_hidden", "basic.BasicUnit", "basic.BasicUnit", "range"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.__init__", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.basic.BasicRNN.init_hidden"], ["    ", "def", "__init__", "(", "self", ",", "layer_num", ",", "unit", ",", "emb_dim", ",", "hid_dim", ",", "droprate", ")", ":", "\n", "        ", "super", "(", "BasicRNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "layer_list", "=", "[", "BasicUnit", "(", "unit", ",", "emb_dim", ",", "hid_dim", ",", "droprate", ")", "]", "+", "[", "BasicUnit", "(", "unit", ",", "hid_dim", ",", "hid_dim", ",", "droprate", ")", "for", "i", "in", "range", "(", "layer_num", "-", "1", ")", "]", "\n", "self", ".", "layer", "=", "nn", ".", "Sequential", "(", "*", "layer_list", ")", "\n", "self", ".", "output_dim", "=", "layer_list", "[", "-", "1", "]", ".", "output_dim", "\n", "\n", "self", ".", "init_hidden", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.basic.BasicRNN.init_hidden": [[52, 56], ["basic.BasicRNN.layer.children", "tup.init_hidden"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.basic.BasicRNN.init_hidden"], ["", "def", "init_hidden", "(", "self", ")", ":", "\n", "\n", "        ", "for", "tup", "in", "self", ".", "layer", ".", "children", "(", ")", ":", "\n", "            ", "tup", ".", "init_hidden", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.basic.BasicRNN.rand_ini": [[57, 61], ["basic.BasicRNN.layer.children", "tup.rand_ini"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.basic.BasicRNN.rand_ini"], ["", "", "def", "rand_ini", "(", "self", ")", ":", "\n", "\n", "        ", "for", "tup", "in", "self", ".", "layer", ".", "children", "(", ")", ":", "\n", "            ", "tup", ".", "rand_ini", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.basic.BasicRNN.forward": [[62, 64], ["basic.BasicRNN.layer"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "layer", "(", "x", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.radam.RAdam.__init__": [[14, 20], ["dict", "torch.optim.optimizer.Optimizer.__init__"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ",", "\n", "weight_decay", "=", "0", ")", ":", "\n", "        ", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "\n", "weight_decay", "=", "weight_decay", ")", "\n", "\n", "super", "(", "RAdam", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.radam.RAdam.__setstate__": [[21, 23], ["super().__setstate__"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.radam.AdamW.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "RAdam", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.radam.RAdam.step": [[24, 85], ["closure", "p.grad.data.float", "p.data.float", "exp_avg_sq.mul_().addcmul_", "exp_avg.mul_().add_", "p.data.copy_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "state[].type_as", "state[].type_as", "p.data.float.add_", "exp_avg_sq.sqrt().add_", "p.data.float.addcdiv_", "p.data.float.add_", "exp_avg_sq.mul_", "exp_avg.mul_", "math.sqrt", "exp_avg_sq.sqrt"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "loss", "=", "None", "\n", "beta2_t", "=", "None", "\n", "ratio", "=", "None", "\n", "N_sma_max", "=", "None", "\n", "N_sma", "=", "None", "\n", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", ".", "float", "(", ")", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'Adam does not support sparse gradients, please consider SparseAdam instead'", ")", "\n", "\n", "", "p_data_fp32", "=", "p", ".", "data", ".", "float", "(", ")", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "", "else", ":", "\n", "                    ", "state", "[", "'exp_avg'", "]", "=", "state", "[", "'exp_avg'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "state", "[", "'exp_avg_sq'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "\n", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "if", "beta2_t", "is", "None", ":", "\n", "                    ", "beta2_t", "=", "beta2", "**", "state", "[", "'step'", "]", "\n", "N_sma_max", "=", "2", "/", "(", "1", "-", "beta2", ")", "-", "1", "\n", "N_sma", "=", "N_sma_max", "-", "2", "*", "state", "[", "'step'", "]", "*", "beta2_t", "/", "(", "1", "-", "beta2_t", ")", "\n", "beta1_t", "=", "1", "-", "beta1", "**", "state", "[", "'step'", "]", "\n", "if", "N_sma", ">=", "5", ":", "\n", "                        ", "ratio", "=", "math", ".", "sqrt", "(", "(", "1", "-", "beta2_t", ")", "*", "(", "N_sma", "-", "4", ")", "/", "(", "N_sma_max", "-", "4", ")", "*", "(", "N_sma", "-", "2", ")", "/", "N_sma", "*", "N_sma_max", "/", "(", "N_sma_max", "-", "2", ")", ")", "/", "beta1_t", "\n", "\n", "", "", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                    ", "p_data_fp32", ".", "add_", "(", "-", "group", "[", "'weight_decay'", "]", "*", "group", "[", "'lr'", "]", ",", "p_data_fp32", ")", "\n", "\n", "# more conservative since it's an approximated value", "\n", "", "if", "N_sma", ">=", "5", ":", "\n", "                    ", "step_size", "=", "group", "[", "'lr'", "]", "*", "ratio", "\n", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "p_data_fp32", ".", "addcdiv_", "(", "-", "step_size", ",", "exp_avg", ",", "denom", ")", "\n", "", "else", ":", "\n", "                    ", "step_size", "=", "group", "[", "'lr'", "]", "/", "beta1_t", "\n", "p_data_fp32", ".", "add_", "(", "-", "step_size", ",", "exp_avg", ")", "\n", "\n", "", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "\n", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.radam.AdamW.__init__": [[89, 95], ["dict", "torch.optim.optimizer.Optimizer.__init__"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ",", "\n", "weight_decay", "=", "0", ")", ":", "\n", "        ", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "\n", "weight_decay", "=", "weight_decay", ")", "\n", "\n", "super", "(", "AdamW", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.radam.AdamW.__setstate__": [[96, 98], ["super().__setstate__"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.radam.AdamW.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "AdamW", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.radam.AdamW.step": [[99, 152], ["list", "list", "list", "closure", "p.grad.data.float", "p.data.float", "exp_avg_sq.mul_().addcmul_", "exp_avg.mul_().add_", "exp_avg_sq.sqrt().add_", "p.data.float.addcdiv_", "p.data.copy_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "state[].type_as", "state[].type_as", "p.data.float.add_", "exp_avg_sq.mul_", "exp_avg.mul_", "exp_avg_sq.sqrt", "math.sqrt"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "global", "iter_idx", "\n", "iter_idx", "+=", "1", "\n", "grad_list", "=", "list", "(", ")", "\n", "mom_list", "=", "list", "(", ")", "\n", "mom_2rd_list", "=", "list", "(", ")", "\n", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", ".", "float", "(", ")", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'Adam does not support sparse gradients, please consider SparseAdam instead'", ")", "\n", "\n", "", "p_data_fp32", "=", "p", ".", "data", ".", "float", "(", ")", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "", "else", ":", "\n", "                    ", "state", "[", "'exp_avg'", "]", "=", "state", "[", "'exp_avg'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "state", "[", "'exp_avg_sq'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "\n", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "\n", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "bias_correction1", "=", "1", "-", "beta1", "**", "state", "[", "'step'", "]", "\n", "bias_correction2", "=", "1", "-", "beta2", "**", "state", "[", "'step'", "]", "\n", "step_size", "=", "group", "[", "'lr'", "]", "*", "math", ".", "sqrt", "(", "bias_correction2", ")", "/", "bias_correction1", "\n", "\n", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                    ", "p_data_fp32", ".", "add_", "(", "-", "group", "[", "'weight_decay'", "]", "*", "group", "[", "'lr'", "]", ",", "p_data_fp32", ")", "\n", "\n", "", "p_data_fp32", ".", "addcdiv_", "(", "-", "step_size", ",", "exp_avg", ",", "denom", ")", "\n", "\n", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "\n", "", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.utils.repackage_hidden": [[11, 17], ["type", "tuple", "utils.repackage_hidden"], "function", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.utils.repackage_hidden"], ["def", "repackage_hidden", "(", "h", ")", ":", "\n", "    ", "\"\"\"Wraps hidden states in new Variables, to detach them from their history.\"\"\"", "\n", "if", "type", "(", "h", ")", "==", "torch", ".", "Tensor", ":", "\n", "        ", "return", "h", ".", "data", "\n", "", "else", ":", "\n", "        ", "return", "tuple", "(", "repackage_hidden", "(", "v", ")", "for", "v", "in", "h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.utils.to_scalar": [[18, 22], ["var.view().data.tolist", "var.view"], "function", ["None"], ["", "", "def", "to_scalar", "(", "var", ")", ":", "\n", "    ", "\"\"\"change the first element of a tensor to scalar\n    \"\"\"", "\n", "return", "var", ".", "view", "(", "-", "1", ")", ".", "data", ".", "tolist", "(", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.utils.init_embedding": [[23, 29], ["numpy.sqrt", "torch.init.uniform", "input_embedding.size"], "function", ["None"], ["", "def", "init_embedding", "(", "input_embedding", ")", ":", "\n", "    ", "\"\"\"\n    Initialize embedding\n    \"\"\"", "\n", "bias", "=", "np", ".", "sqrt", "(", "3.0", "/", "input_embedding", ".", "size", "(", "1", ")", ")", "\n", "nn", ".", "init", ".", "uniform", "(", "input_embedding", ",", "-", "bias", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.utils.init_linear": [[30, 38], ["numpy.sqrt", "torch.init.uniform", "input_linear.bias.data.zero_", "input_linear.weight.size", "input_linear.weight.size"], "function", ["None"], ["", "def", "init_linear", "(", "input_linear", ")", ":", "\n", "    ", "\"\"\"\n    Initialize linear transformation\n    \"\"\"", "\n", "bias", "=", "np", ".", "sqrt", "(", "6.0", "/", "(", "input_linear", ".", "weight", ".", "size", "(", "0", ")", "+", "input_linear", ".", "weight", ".", "size", "(", "1", ")", ")", ")", "\n", "nn", ".", "init", ".", "uniform", "(", "input_linear", ".", "weight", ",", "-", "bias", ",", "bias", ")", "\n", "if", "input_linear", ".", "bias", "is", "not", "None", ":", "\n", "        ", "input_linear", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.utils.adjust_learning_rate": [[39, 45], ["None"], "function", ["None"], ["", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "lr", ")", ":", "\n", "    ", "\"\"\"\n    shrink learning rate for pytorch\n    \"\"\"", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.model_word_ada.utils.init_lstm": [[46, 66], ["range", "eval", "numpy.sqrt", "torch.init.uniform", "eval", "numpy.sqrt", "torch.init.uniform", "range", "eval", "eval.data.zero_", "eval", "eval.data.zero_", "str", "str", "eval.size", "eval.size", "str", "str", "eval.size", "eval.size"], "function", ["None"], ["", "", "def", "init_lstm", "(", "input_lstm", ")", ":", "\n", "    ", "\"\"\"\n    Initialize lstm\n    \"\"\"", "\n", "for", "ind", "in", "range", "(", "0", ",", "input_lstm", ".", "num_layers", ")", ":", "\n", "        ", "weight", "=", "eval", "(", "'input_lstm.weight_ih_l'", "+", "str", "(", "ind", ")", ")", "\n", "bias", "=", "np", ".", "sqrt", "(", "6.0", "/", "(", "weight", ".", "size", "(", "0", ")", "/", "4", "+", "weight", ".", "size", "(", "1", ")", ")", ")", "\n", "nn", ".", "init", ".", "uniform", "(", "weight", ",", "-", "bias", ",", "bias", ")", "\n", "weight", "=", "eval", "(", "'input_lstm.weight_hh_l'", "+", "str", "(", "ind", ")", ")", "\n", "bias", "=", "np", ".", "sqrt", "(", "6.0", "/", "(", "weight", ".", "size", "(", "0", ")", "/", "4", "+", "weight", ".", "size", "(", "1", ")", ")", ")", "\n", "nn", ".", "init", ".", "uniform", "(", "weight", ",", "-", "bias", ",", "bias", ")", "\n", "\n", "", "if", "input_lstm", ".", "bias", ":", "\n", "        ", "for", "ind", "in", "range", "(", "0", ",", "input_lstm", ".", "num_layers", ")", ":", "\n", "            ", "weight", "=", "eval", "(", "'input_lstm.bias_ih_l'", "+", "str", "(", "ind", ")", ")", "\n", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "weight", ".", "data", "[", "input_lstm", ".", "hidden_size", ":", "2", "*", "input_lstm", ".", "hidden_size", "]", "=", "1", "\n", "weight", "=", "eval", "(", "'input_lstm.bias_hh_l'", "+", "str", "(", "ind", ")", ")", "\n", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "weight", ".", "data", "[", "input_lstm", ".", "hidden_size", ":", "2", "*", "input_lstm", ".", "hidden_size", "]", "=", "1", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.pre_word_ada.encode_data2folder.encode_dataset": [[13, 35], ["os.walk", "list", "list", "tqdm.tqdm", "list", "codecs.open", "map", "os.path.join", "list", "line.split", "filter", "w_map.get", "fin.readlines", "t.isspace"], "function", ["None"], ["def", "encode_dataset", "(", "input_folder", ",", "w_map", ",", "reverse", ")", ":", "\n", "\n", "    ", "w_eof", "=", "w_map", "[", "'\\n'", "]", "\n", "w_unk", "=", "w_map", "[", "'<unk>'", "]", "\n", "\n", "list_dirs", "=", "os", ".", "walk", "(", "input_folder", ")", "\n", "\n", "lines", "=", "list", "(", ")", "\n", "\n", "for", "root", ",", "dirs", ",", "files", "in", "list_dirs", ":", "\n", "        ", "for", "file", "in", "tqdm", "(", "files", ")", ":", "\n", "            ", "with", "codecs", ".", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "file", ")", ",", "'r'", ",", "'utf-8'", ")", "as", "fin", ":", "\n", "                ", "lines", "=", "lines", "+", "list", "(", "filter", "(", "lambda", "t", ":", "t", "and", "not", "t", ".", "isspace", "(", ")", ",", "fin", ".", "readlines", "(", ")", ")", ")", "\n", "\n", "", "", "", "dataset", "=", "list", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "dataset", "+=", "list", "(", "map", "(", "lambda", "t", ":", "w_map", ".", "get", "(", "t", ",", "w_unk", ")", ",", "line", ".", "split", "(", ")", ")", ")", "+", "[", "w_eof", "]", "\n", "\n", "", "if", "reverse", ":", "\n", "        ", "dataset", "=", "dataset", "[", ":", ":", "-", "1", "]", "\n", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.pre_word_ada.encode_data2folder.encode_dataset2file": [[36, 63], ["os.walk", "tqdm.tqdm", "list", "codecs.open", "list", "open", "pickle.dump", "os.path.join", "filter", "list", "fin.readlines", "map", "line.split", "str", "w_map.get", "t.isspace"], "function", ["None"], ["", "def", "encode_dataset2file", "(", "input_folder", ",", "output_folder", ",", "w_map", ",", "reverse", ")", ":", "\n", "\n", "    ", "w_eof", "=", "w_map", "[", "'\\n'", "]", "\n", "w_unk", "=", "w_map", "[", "'<unk>'", "]", "\n", "\n", "list_dirs", "=", "os", ".", "walk", "(", "input_folder", ")", "\n", "\n", "range_ind", "=", "0", "\n", "\n", "for", "root", ",", "dirs", ",", "files", "in", "list_dirs", ":", "\n", "        ", "for", "file", "in", "tqdm", "(", "files", ")", ":", "\n", "            ", "with", "codecs", ".", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "file", ")", ",", "'r'", ",", "'utf-8'", ")", "as", "fin", ":", "\n", "                ", "lines", "=", "list", "(", "filter", "(", "lambda", "t", ":", "t", "and", "not", "t", ".", "isspace", "(", ")", ",", "fin", ".", "readlines", "(", ")", ")", ")", "\n", "\n", "", "dataset", "=", "list", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "                ", "dataset", "+=", "list", "(", "map", "(", "lambda", "t", ":", "w_map", ".", "get", "(", "t", ",", "w_unk", ")", ",", "line", ".", "split", "(", ")", ")", ")", "+", "[", "w_eof", "]", "\n", "\n", "", "if", "reverse", ":", "\n", "                ", "dataset", "=", "dataset", "[", ":", ":", "-", "1", "]", "\n", "\n", "", "with", "open", "(", "output_folder", "+", "'train_'", "+", "str", "(", "range_ind", ")", "+", "'.pk'", ",", "'wb'", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "dataset", ",", "f", ")", "\n", "\n", "", "range_ind", "+=", "1", "\n", "\n", "", "", "return", "range_ind", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.radam.radam.RAdam.__init__": [[7, 24], ["dict", "torch.optim.optimizer.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError", "isinstance", "isinstance", "len", "range", "range"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.__init__"], ["# iter_idx = 0", "\n", "\n", "# from ipdb import set_trace", "\n", "import", "torch", ".", "optim", "\n", "\n", "class", "RAdam", "(", "Optimizer", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ",", "\n", "weight_decay", "=", "0", ")", ":", "\n", "        ", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "\n", "weight_decay", "=", "weight_decay", ")", "\n", "\n", "super", "(", "RAdam", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n", "", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "RAdam", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "\n", "", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.radam.radam.RAdam.__setstate__": [[25, 27], ["super().__setstate__"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.radam.AdamW.__setstate__"], ["        ", "loss", "=", "None", "\n", "beta2_t", "=", "None", "\n", "ratio", "=", "None", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.radam.radam.RAdam.step": [[28, 95], ["closure", "p.grad.data.float", "p.data.float", "exp_avg_sq.mul_().addcmul_", "exp_avg.mul_().add_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "state[].type_as", "state[].type_as", "exp_avg_sq.sqrt().add_", "p.data.float.addcdiv_", "p.data.copy_", "exp_avg_sq.mul_", "exp_avg.mul_", "int", "p.data.float.add_", "p.data.float.add_", "p.data.copy_", "math.sqrt", "exp_avg_sq.sqrt", "p.data.float.add_"], "methods", ["None"], ["N_sma_max", "=", "None", "\n", "N_sma", "=", "None", "\n", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", ".", "float", "(", ")", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'Adam does not support sparse gradients, please consider SparseAdam instead'", ")", "\n", "\n", "", "p_data_fp32", "=", "p", ".", "data", ".", "float", "(", ")", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "", "else", ":", "\n", "                    ", "state", "[", "'exp_avg'", "]", "=", "state", "[", "'exp_avg'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "state", "[", "'exp_avg_sq'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "\n", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "if", "beta2_t", "is", "None", ":", "\n", "                    ", "beta2_t", "=", "beta2", "**", "state", "[", "'step'", "]", "\n", "N_sma_max", "=", "2", "/", "(", "1", "-", "beta2", ")", "-", "1", "\n", "N_sma", "=", "N_sma_max", "-", "2", "*", "state", "[", "'step'", "]", "*", "beta2_t", "/", "(", "1", "-", "beta2_t", ")", "\n", "beta1_t", "=", "1", "-", "beta1", "**", "state", "[", "'step'", "]", "\n", "if", "N_sma", ">=", "5", ":", "\n", "                        ", "ratio", "=", "math", ".", "sqrt", "(", "(", "1", "-", "beta2_t", ")", "*", "(", "N_sma", "-", "4", ")", "/", "(", "N_sma_max", "-", "4", ")", "*", "(", "N_sma", "-", "2", ")", "/", "N_sma", "*", "N_sma_max", "/", "(", "N_sma_max", "-", "2", ")", ")", "/", "beta1_t", "\n", "\n", "", "", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                    ", "p_data_fp32", ".", "add_", "(", "-", "group", "[", "'weight_decay'", "]", "*", "group", "[", "'lr'", "]", ",", "p_data_fp32", ")", "\n", "\n", "# more conservative since it's an approximated value", "\n", "", "if", "N_sma", ">=", "5", ":", "\n", "                    ", "step_size", "=", "group", "[", "'lr'", "]", "*", "ratio", "\n", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "p_data_fp32", ".", "addcdiv_", "(", "-", "step_size", ",", "exp_avg", ",", "denom", ")", "\n", "", "else", ":", "\n", "                    ", "step_size", "=", "group", "[", "'lr'", "]", "/", "beta1_t", "\n", "p_data_fp32", ".", "add_", "(", "-", "step_size", ",", "exp_avg", ")", "\n", "\n", "", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "\n", "", "", "return", "loss", "\n", "\n", "\n", "", "", "class", "AdamW", "(", "Optimizer", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ",", "\n", "weight_decay", "=", "0", ")", ":", "\n", "        ", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "\n", "weight_decay", "=", "weight_decay", ")", "\n", "\n", "super", "(", "AdamW", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.radam.radam.PlainRAdam.__init__": [[98, 112], ["dict", "torch.optim.optimizer.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.__init__"], ["\n", "", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "global", "iter_idx", "\n", "iter_idx", "+=", "1", "\n", "grad_list", "=", "list", "(", ")", "\n", "mom_list", "=", "list", "(", ")", "\n", "mom_2rd_list", "=", "list", "(", ")", "\n", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.radam.radam.PlainRAdam.__setstate__": [[113, 115], ["super().__setstate__"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.radam.AdamW.__setstate__"], ["                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", ".", "float", "(", ")", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.radam.radam.PlainRAdam.step": [[116, 171], ["closure", "p.grad.data.float", "p.data.float", "exp_avg_sq.mul_().addcmul_", "exp_avg.mul_().add_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "state[].type_as", "state[].type_as", "exp_avg_sq.sqrt().add_", "p.data.float.addcdiv_", "p.data.copy_", "exp_avg_sq.mul_", "exp_avg.mul_", "p.data.float.add_", "p.data.float.add_", "p.data.copy_", "math.sqrt", "exp_avg_sq.sqrt", "p.data.float.add_"], "methods", ["None"], ["if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'Adam does not support sparse gradients, please consider SparseAdam instead'", ")", "\n", "\n", "", "p_data_fp32", "=", "p", ".", "data", ".", "float", "(", ")", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "", "else", ":", "\n", "                    ", "state", "[", "'exp_avg'", "]", "=", "state", "[", "'exp_avg'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "state", "[", "'exp_avg_sq'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "\n", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "\n", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "bias_correction1", "=", "1", "-", "beta1", "**", "state", "[", "'step'", "]", "\n", "bias_correction2", "=", "1", "-", "beta2", "**", "state", "[", "'step'", "]", "\n", "step_size", "=", "group", "[", "'lr'", "]", "*", "math", ".", "sqrt", "(", "bias_correction2", ")", "/", "bias_correction1", "\n", "\n", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                    ", "p_data_fp32", ".", "add_", "(", "-", "group", "[", "'weight_decay'", "]", "*", "group", "[", "'lr'", "]", ",", "p_data_fp32", ")", "\n", "\n", "", "p_data_fp32", ".", "addcdiv_", "(", "-", "step_size", ",", "exp_avg", ",", "denom", ")", "\n", "\n", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "\n", "", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.radam.radam.AdamW.__init__": [[175, 188], ["dict", "torch.optim.optimizer.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.__init__"], []], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.radam.radam.AdamW.__setstate__": [[189, 191], ["super().__setstate__"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.radam.AdamW.__setstate__"], []], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.radam.radam.AdamW.step": [[192, 245], ["closure", "p.grad.data.float", "p.data.float", "exp_avg_sq.mul_().addcmul_", "exp_avg.mul_().add_", "exp_avg_sq.sqrt().add_", "p.data.float.addcdiv_", "p.data.copy_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "state[].type_as", "state[].type_as", "p.data.float.add_", "exp_avg_sq.mul_", "exp_avg.mul_", "exp_avg_sq.sqrt", "math.sqrt"], "methods", ["None"], []], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar_imagenet.cifar.main": [[117, 256], ["print", "torchvision.Compose", "torchvision.Compose", "dataloader", "torch.DataLoader", "dataloader", "torch.DataLoader", "print", "args.arch.startswith", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "print", "torch.CrossEntropyLoss", "utils.Logger", "utils.Logger.set_names", "range", "utils.Logger.close", "utils.Logger.plot", "utils.savefig", "print", "print", "os.path.isdir", "utils.mkdir_p", "args.arch.startswith", "args.optimizer.lower", "torch.SGD", "os.path.join", "print", "cifar.test", "print", "cifar.adjust_learning_rate", "print", "cifar.train", "cifar.test", "utils.Logger.append", "max", "cifar.save_checkpoint", "os.path.join", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.ToTensor", "torchvision.Normalize", "args.arch.startswith", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel().cuda.parameters", "args.optimizer.lower", "utils.radam.RAdam", "args.arch.endswith", "sum", "torch.nn.DataParallel().cuda.parameters", "args.optimizer.lower", "utils.radam.RAdam_4step", "torch.nn.DataParallel().cuda.state_dict", "utils.radam.AdamW.state_dict", "torch.nn.DataParallel().cuda.parameters", "args.optimizer.lower", "utils.radam.AdamW", "p.numel", "torch.nn.DataParallel().cuda.parameters", "torch.nn.DataParallel().cuda.parameters"], "function", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.logger.Logger.set_names", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.logger.Logger.close", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.logger.LoggerMonitor.plot", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.logger.savefig", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.misc.mkdir_p", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar_imagenet.imagenet.test", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar_imagenet.imagenet.adjust_learning_rate", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar_imagenet.imagenet.train", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar_imagenet.imagenet.test", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.logger.Logger.append", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar_imagenet.imagenet.save_checkpoint"], ["def", "main", "(", ")", ":", "\n", "    ", "global", "best_acc", "\n", "start_epoch", "=", "args", ".", "start_epoch", "# start from epoch 0 or last checkpoint epoch", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "args", ".", "checkpoint", ")", ":", "\n", "        ", "mkdir_p", "(", "args", ".", "checkpoint", ")", "\n", "\n", "# Data", "\n", "", "print", "(", "'==> Preparing dataset %s'", "%", "args", ".", "dataset", ")", "\n", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", ",", "\n", "]", ")", "\n", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", ",", "\n", "]", ")", "\n", "if", "args", ".", "dataset", "==", "'cifar10'", ":", "\n", "        ", "dataloader", "=", "datasets", ".", "CIFAR10", "\n", "num_classes", "=", "10", "\n", "", "else", ":", "\n", "        ", "dataloader", "=", "datasets", ".", "CIFAR100", "\n", "num_classes", "=", "100", "\n", "\n", "\n", "", "trainset", "=", "dataloader", "(", "root", "=", "'./data'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transform_train", ")", "\n", "trainloader", "=", "data", ".", "DataLoader", "(", "trainset", ",", "batch_size", "=", "args", ".", "train_batch", ",", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "workers", ")", "\n", "\n", "testset", "=", "dataloader", "(", "root", "=", "'./data'", ",", "train", "=", "False", ",", "download", "=", "False", ",", "transform", "=", "transform_test", ")", "\n", "testloader", "=", "data", ".", "DataLoader", "(", "testset", ",", "batch_size", "=", "args", ".", "test_batch", ",", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "workers", ")", "\n", "\n", "# Model", "\n", "print", "(", "\"==> creating model '{}'\"", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "if", "args", ".", "arch", ".", "startswith", "(", "'resnext'", ")", ":", "\n", "        ", "model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", "\n", "cardinality", "=", "args", ".", "cardinality", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", "depth", "=", "args", ".", "depth", ",", "\n", "widen_factor", "=", "args", ".", "widen_factor", ",", "\n", "dropRate", "=", "args", ".", "drop", ",", "\n", ")", "\n", "", "elif", "args", ".", "arch", ".", "startswith", "(", "'densenet'", ")", ":", "\n", "        ", "model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", "\n", "num_classes", "=", "num_classes", ",", "\n", "depth", "=", "args", ".", "depth", ",", "\n", "growthRate", "=", "args", ".", "growthRate", ",", "\n", "compressionRate", "=", "args", ".", "compressionRate", ",", "\n", "dropRate", "=", "args", ".", "drop", ",", "\n", ")", "\n", "", "elif", "args", ".", "arch", ".", "startswith", "(", "'wrn'", ")", ":", "\n", "        ", "model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", "\n", "num_classes", "=", "num_classes", ",", "\n", "depth", "=", "args", ".", "depth", ",", "\n", "widen_factor", "=", "args", ".", "widen_factor", ",", "\n", "dropRate", "=", "args", ".", "drop", ",", "\n", ")", "\n", "", "elif", "args", ".", "arch", ".", "endswith", "(", "'resnet'", ")", ":", "\n", "        ", "model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", "\n", "num_classes", "=", "num_classes", ",", "\n", "depth", "=", "args", ".", "depth", ",", "\n", "block_name", "=", "args", ".", "block_name", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", "num_classes", "=", "num_classes", ")", "\n", "\n", "", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "print", "(", "'    Total params: %.2fM'", "%", "(", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", ")", "/", "1000000.0", ")", ")", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "if", "args", ".", "optimizer", ".", "lower", "(", ")", "==", "'sgd'", ":", "\n", "        ", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "# elif args.optimizer.lower() == 'adam':", "\n", "#     optimizer = optim.Adam(model.parameters(), lr=args.lr, betas=(args.beta1, args.beta2), weight_decay=args.weight_decay)", "\n", "", "elif", "args", ".", "optimizer", ".", "lower", "(", ")", "==", "'radam'", ":", "\n", "        ", "optimizer", "=", "RAdam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "betas", "=", "(", "args", ".", "beta1", ",", "args", ".", "beta2", ")", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "", "elif", "args", ".", "optimizer", ".", "lower", "(", ")", "==", "'radam4s'", ":", "\n", "        ", "optimizer", "=", "RAdam_4step", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "betas", "=", "(", "args", ".", "beta1", ",", "args", ".", "beta2", ")", ",", "weight_decay", "=", "args", ".", "weight_decay", ",", "update_all", "=", "args", ".", "update_all", ",", "additional_four", "=", "args", ".", "additional_four", ")", "\n", "", "elif", "args", ".", "optimizer", ".", "lower", "(", ")", "==", "'adamw'", ":", "\n", "        ", "optimizer", "=", "AdamW", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "betas", "=", "(", "args", ".", "beta1", ",", "args", ".", "beta2", ")", ",", "weight_decay", "=", "args", ".", "weight_decay", ",", "warmup", "=", "args", ".", "warmup", ")", "\n", "# Resume", "\n", "", "title", "=", "'cifar-10-'", "+", "args", ".", "arch", "\n", "# if args.resume:", "\n", "#     # Load checkpoint.", "\n", "#     print('==> Resuming from checkpoint..')", "\n", "#     assert os.path.isfile(args.resume), 'Error: no checkpoint directory found!'", "\n", "#     args.checkpoint = os.path.dirname(args.resume)", "\n", "#     checkpoint = torch.load(args.resume)", "\n", "#     best_acc = checkpoint['best_acc']", "\n", "#     start_epoch = checkpoint['epoch']", "\n", "#     model.load_state_dict(checkpoint['state_dict'])", "\n", "#     optimizer.load_state_dict(checkpoint['optimizer'])", "\n", "#     logger = Logger(os.path.join(args.checkpoint, 'log.txt'), title=title, resume=True)", "\n", "# else:", "\n", "logger", "=", "Logger", "(", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoint", ",", "'log.txt'", ")", ",", "title", "=", "title", ")", "\n", "logger", ".", "set_names", "(", "[", "'Learning Rate'", ",", "'Train Loss'", ",", "'Valid Loss'", ",", "'Train Acc.'", ",", "'Valid Acc.'", "]", ")", "\n", "\n", "\n", "if", "args", ".", "evaluate", ":", "\n", "        ", "print", "(", "'\\nEvaluation only'", ")", "\n", "test_loss", ",", "test_acc", "=", "test", "(", "testloader", ",", "model", ",", "criterion", ",", "start_epoch", ",", "use_cuda", ")", "\n", "print", "(", "' Test Loss:  %.8f, Test Acc:  %.2f'", "%", "(", "test_loss", ",", "test_acc", ")", ")", "\n", "return", "\n", "\n", "# Train and val", "\n", "", "for", "epoch", "in", "range", "(", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", "\n", "\n", "print", "(", "'\\nEpoch: [%d | %d] LR: %f'", "%", "(", "epoch", "+", "1", ",", "args", ".", "epochs", ",", "state", "[", "'lr'", "]", ")", ")", "\n", "\n", "train_loss", ",", "train_acc", "=", "train", "(", "trainloader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "use_cuda", ")", "\n", "test_loss", ",", "test_acc", "=", "test", "(", "testloader", ",", "model", ",", "criterion", ",", "epoch", ",", "use_cuda", ")", "\n", "\n", "# append logger file", "\n", "logger", ".", "append", "(", "[", "state", "[", "'lr'", "]", ",", "train_loss", ",", "test_loss", ",", "train_acc", ",", "test_acc", "]", ")", "\n", "# writer.add_scalars('loss_tracking/train_loss', {args.model_name: train_loss}, epoch)", "\n", "# writer.add_scalars('loss_tracking/test_loss', {args.model_name: test_loss}, epoch)", "\n", "# writer.add_scalars('loss_tracking/train_acc', {args.model_name: train_acc}, epoch)", "\n", "# writer.add_scalars('loss_tracking/test_acc', {args.model_name: test_acc}, epoch)", "\n", "\n", "# save model", "\n", "is_best", "=", "test_acc", ">", "best_acc", "\n", "best_acc", "=", "max", "(", "test_acc", ",", "best_acc", ")", "\n", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'acc'", ":", "test_acc", ",", "\n", "'best_acc'", ":", "best_acc", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "is_best", ",", "checkpoint", "=", "args", ".", "checkpoint", ")", "\n", "\n", "", "logger", ".", "close", "(", ")", "\n", "logger", ".", "plot", "(", ")", "\n", "savefig", "(", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoint", ",", "'log.eps'", ")", ")", "\n", "\n", "print", "(", "'Best acc:'", ")", "\n", "print", "(", "best_acc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar_imagenet.cifar.train": [[257, 311], ["model.train", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "time.time", "utils.Bar", "enumerate", "utils.Bar.finish", "utils.AverageMeter.update", "model", "criterion", "utils.accuracy", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "utils.AverageMeter.update", "time.time", "utils.Bar.next", "len", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "criterion.item", "inputs.size", "prec1.item", "inputs.size", "prec5.item", "inputs.size", "time.time", "inputs.cuda", "targets.cuda", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar_imagenet.imagenet.train", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.eval.accuracy", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.step", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.misc.AverageMeter.update"], ["", "def", "train", "(", "trainloader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "use_cuda", ")", ":", "\n", "# switch to train mode", "\n", "    ", "model", ".", "train", "(", ")", "\n", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "bar", "=", "Bar", "(", "'Processing'", ",", "max", "=", "len", "(", "trainloader", ")", ")", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "            ", "inputs", ",", "targets", "=", "inputs", ".", "cuda", "(", ")", ",", "targets", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "", "inputs", ",", "targets", "=", "torch", ".", "autograd", ".", "Variable", "(", "inputs", ")", ",", "torch", ".", "autograd", ".", "Variable", "(", "targets", ")", "\n", "\n", "# compute output", "\n", "outputs", "=", "model", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "outputs", ".", "data", ",", "targets", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "# plot progress", "\n", "bar", ".", "suffix", "=", "'({batch}/{size}) Data: {data:.3f}s | Batch: {bt:.3f}s | Total: {total:} | ETA: {eta:} | Loss: {loss:.4f} | top1: {top1: .4f} | top5: {top5: .4f}'", ".", "format", "(", "\n", "batch", "=", "batch_idx", "+", "1", ",", "\n", "size", "=", "len", "(", "trainloader", ")", ",", "\n", "data", "=", "data_time", ".", "avg", ",", "\n", "bt", "=", "batch_time", ".", "avg", ",", "\n", "total", "=", "bar", ".", "elapsed_td", ",", "\n", "eta", "=", "bar", ".", "eta_td", ",", "\n", "loss", "=", "losses", ".", "avg", ",", "\n", "top1", "=", "top1", ".", "avg", ",", "\n", "top5", "=", "top5", ".", "avg", ",", "\n", ")", "\n", "bar", ".", "next", "(", ")", "\n", "", "bar", ".", "finish", "(", ")", "\n", "return", "(", "losses", ".", "avg", ",", "top1", ".", "avg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar_imagenet.cifar.test": [[312, 363], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "model.eval", "time.time", "utils.Bar", "enumerate", "utils.Bar.finish", "utils.AverageMeter.update", "model", "criterion", "utils.accuracy", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "time.time", "utils.Bar.next", "len", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "criterion.item", "inputs.size", "prec1.item", "inputs.size", "prec5.item", "inputs.size", "time.time", "inputs.cuda", "targets.cuda", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.eval.accuracy", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.misc.AverageMeter.update"], ["", "def", "test", "(", "testloader", ",", "model", ",", "criterion", ",", "epoch", ",", "use_cuda", ")", ":", "\n", "    ", "global", "best_acc", "\n", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "bar", "=", "Bar", "(", "'Processing'", ",", "max", "=", "len", "(", "testloader", ")", ")", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "            ", "inputs", ",", "targets", "=", "inputs", ".", "cuda", "(", ")", ",", "targets", ".", "cuda", "(", ")", "\n", "", "inputs", ",", "targets", "=", "torch", ".", "autograd", ".", "Variable", "(", "inputs", ",", "volatile", "=", "True", ")", ",", "torch", ".", "autograd", ".", "Variable", "(", "targets", ")", "\n", "\n", "# compute output", "\n", "outputs", "=", "model", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "outputs", ".", "data", ",", "targets", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "# plot progress", "\n", "bar", ".", "suffix", "=", "'({batch}/{size}) Data: {data:.3f}s | Batch: {bt:.3f}s | Total: {total:} | ETA: {eta:} | Loss: {loss:.4f} | top1: {top1: .4f} | top5: {top5: .4f}'", ".", "format", "(", "\n", "batch", "=", "batch_idx", "+", "1", ",", "\n", "size", "=", "len", "(", "testloader", ")", ",", "\n", "data", "=", "data_time", ".", "avg", ",", "\n", "bt", "=", "batch_time", ".", "avg", ",", "\n", "total", "=", "bar", ".", "elapsed_td", ",", "\n", "eta", "=", "bar", ".", "eta_td", ",", "\n", "loss", "=", "losses", ".", "avg", ",", "\n", "top1", "=", "top1", ".", "avg", ",", "\n", "top5", "=", "top5", ".", "avg", ",", "\n", ")", "\n", "bar", ".", "next", "(", ")", "\n", "", "bar", ".", "finish", "(", ")", "\n", "return", "(", "losses", ".", "avg", ",", "top1", ".", "avg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar_imagenet.cifar.save_checkpoint": [[364, 369], ["os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "shutil.copyfile", "os.path.join"], "function", ["None"], ["", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "checkpoint", "=", "'checkpoint'", ",", "filename", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "    ", "filepath", "=", "os", ".", "path", ".", "join", "(", "checkpoint", ",", "filename", ")", "\n", "torch", ".", "save", "(", "state", ",", "filepath", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "filepath", ",", "os", ".", "path", ".", "join", "(", "checkpoint", ",", "'model_best.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar_imagenet.cifar.adjust_learning_rate": [[370, 376], ["None"], "function", ["None"], ["", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "global", "state", "\n", "if", "epoch", "in", "args", ".", "schedule", ":", "\n", "        ", "state", "[", "'lr'", "]", "*=", "args", ".", "gamma", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "state", "[", "'lr'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar_imagenet.imagenet.main": [[121, 243], ["os.path.join", "os.path.join", "torchvision.Normalize", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "torch.CrossEntropyLoss().cuda", "range", "utils.Logger.close", "utils.Logger.plot", "utils.savefig", "print", "print", "os.path.isdir", "utils.mkdir_p", "torchvision.ImageFolder", "torchvision.ImageFolder", "print", "args.arch.startswith", "args.arch.startswith", "args.arch.startswith", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel().cuda.cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "args.optimizer.lower", "torch.SGD", "print", "os.path.isfile", "os.path.dirname", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.DataParallel().cuda.load_state_dict", "utils.radam.RAdam.load_state_dict", "utils.Logger", "utils.Logger", "utils.Logger.set_names", "print", "imagenet.test", "print", "imagenet.adjust_learning_rate", "print", "imagenet.train", "imagenet.test", "utils.Logger.append", "max", "imagenet.save_checkpoint", "os.path.join", "torchvision.Compose", "torchvision.Compose", "print", "torch.CrossEntropyLoss", "torch.nn.DataParallel().cuda.parameters", "args.optimizer.lower", "utils.radam.AdamW", "os.path.join", "os.path.join", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "sum", "torch.nn.DataParallel().cuda.parameters", "args.optimizer.lower", "utils.radam.RAdam", "torch.nn.DataParallel().cuda.state_dict", "utils.radam.RAdam.state_dict", "torchvision.RandomSizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Scale", "torchvision.CenterCrop", "torchvision.ToTensor", "torch.nn.DataParallel().cuda.parameters", "p.numel", "torch.nn.DataParallel().cuda.parameters"], "function", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.logger.Logger.close", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.logger.LoggerMonitor.plot", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.logger.savefig", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.misc.mkdir_p", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.logger.Logger.set_names", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar_imagenet.imagenet.test", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar_imagenet.imagenet.adjust_learning_rate", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar_imagenet.imagenet.train", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar_imagenet.imagenet.test", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.logger.Logger.append", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar_imagenet.imagenet.save_checkpoint"], ["def", "main", "(", ")", ":", "\n", "    ", "global", "best_acc", "\n", "start_epoch", "=", "args", ".", "start_epoch", "# start from epoch 0 or last checkpoint epoch", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "args", ".", "checkpoint", ")", ":", "\n", "        ", "mkdir_p", "(", "args", ".", "checkpoint", ")", "\n", "\n", "# Data loading code", "\n", "", "traindir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'train'", ")", "\n", "valdir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'val'", ")", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "ImageFolder", "(", "traindir", ",", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomSizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", ",", "\n", "batch_size", "=", "args", ".", "train_batch", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "ImageFolder", "(", "valdir", ",", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Scale", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", ",", "\n", "batch_size", "=", "args", ".", "test_batch", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "# create model", "\n", "if", "args", ".", "pretrained", ":", "\n", "        ", "print", "(", "\"=> using pre-trained model '{}'\"", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", "pretrained", "=", "True", ")", "\n", "", "elif", "args", ".", "arch", ".", "startswith", "(", "'resnext'", ")", ":", "\n", "        ", "model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", "\n", "baseWidth", "=", "args", ".", "base_width", ",", "\n", "cardinality", "=", "args", ".", "cardinality", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"=> creating model '{}'\"", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", ")", "\n", "\n", "", "if", "args", ".", "arch", ".", "startswith", "(", "'alexnet'", ")", "or", "args", ".", "arch", ".", "startswith", "(", "'vgg'", ")", ":", "\n", "        ", "model", ".", "features", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ".", "features", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "\n", "", "cudnn", ".", "benchmark", "=", "True", "\n", "print", "(", "'    Total params: %.2fM'", "%", "(", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", ")", "/", "1000000.0", ")", ")", "\n", "\n", "# define loss function (criterion) and optimizer", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "if", "args", ".", "optimizer", ".", "lower", "(", ")", "==", "'sgd'", ":", "\n", "        ", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "", "elif", "args", ".", "optimizer", ".", "lower", "(", ")", "==", "'adam'", ":", "\n", "        ", "optimizer", "=", "AdamW", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "betas", "=", "(", "args", ".", "beta1", ",", "args", ".", "beta2", ")", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "", "elif", "args", ".", "optimizer", ".", "lower", "(", ")", "==", "'radam'", ":", "\n", "        ", "optimizer", "=", "RAdam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "betas", "=", "(", "args", ".", "beta1", ",", "args", ".", "beta2", ")", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "# Resume", "\n", "", "title", "=", "'ImageNet-'", "+", "args", ".", "arch", "\n", "if", "args", ".", "resume", ":", "\n", "# Load checkpoint.", "\n", "        ", "print", "(", "'==> Resuming from checkpoint..'", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ",", "'Error: no checkpoint directory found!'", "\n", "args", ".", "checkpoint", "=", "os", ".", "path", ".", "dirname", "(", "args", ".", "resume", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "best_acc", "=", "checkpoint", "[", "'best_acc'", "]", "\n", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "logger", "=", "Logger", "(", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoint", ",", "'log.txt'", ")", ",", "title", "=", "title", ",", "resume", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "logger", "=", "Logger", "(", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoint", ",", "'log.txt'", ")", ",", "title", "=", "title", ")", "\n", "logger", ".", "set_names", "(", "[", "'Learning Rate'", ",", "'Train Loss'", ",", "'Valid Loss'", ",", "'Train Acc.'", ",", "'Valid Acc.'", "]", ")", "\n", "\n", "\n", "", "if", "args", ".", "evaluate", ":", "\n", "        ", "print", "(", "'\\nEvaluation only'", ")", "\n", "test_loss", ",", "test_acc", "=", "test", "(", "val_loader", ",", "model", ",", "criterion", ",", "start_epoch", ",", "use_cuda", ")", "\n", "print", "(", "' Test Loss:  %.8f, Test Acc:  %.2f'", "%", "(", "test_loss", ",", "test_acc", ")", ")", "\n", "return", "\n", "\n", "# Train and val", "\n", "", "for", "epoch", "in", "range", "(", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", "\n", "\n", "print", "(", "'\\nEpoch: [%d | %d] LR: %f'", "%", "(", "epoch", "+", "1", ",", "args", ".", "epochs", ",", "state", "[", "'lr'", "]", ")", ")", "\n", "\n", "train_loss", ",", "train_acc", "=", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "use_cuda", ")", "\n", "test_loss", ",", "test_acc", "=", "test", "(", "val_loader", ",", "model", ",", "criterion", ",", "epoch", ",", "use_cuda", ")", "\n", "\n", "# append logger file", "\n", "logger", ".", "append", "(", "[", "state", "[", "'lr'", "]", ",", "train_loss", ",", "test_loss", ",", "train_acc", ",", "test_acc", "]", ")", "\n", "\n", "# writer.add_scalars('loss_tracking/train_loss', {args.model_name: train_loss}, epoch)", "\n", "# writer.add_scalars('loss_tracking/test_loss', {args.model_name: test_loss}, epoch)", "\n", "# writer.add_scalars('loss_tracking/train_acc', {args.model_name: train_acc}, epoch)", "\n", "# writer.add_scalars('loss_tracking/test_acc', {args.model_name: test_acc}, epoch)", "\n", "\n", "# save model", "\n", "is_best", "=", "test_acc", ">", "best_acc", "\n", "best_acc", "=", "max", "(", "test_acc", ",", "best_acc", ")", "\n", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'acc'", ":", "test_acc", ",", "\n", "'best_acc'", ":", "best_acc", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "is_best", ",", "checkpoint", "=", "args", ".", "checkpoint", ")", "\n", "\n", "", "logger", ".", "close", "(", ")", "\n", "logger", ".", "plot", "(", ")", "\n", "savefig", "(", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoint", ",", "'log.eps'", ")", ")", "\n", "\n", "print", "(", "'Best acc:'", ")", "\n", "print", "(", "best_acc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar_imagenet.imagenet.train": [[244, 298], ["model.train", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "time.time", "utils.Bar", "enumerate", "utils.Bar.finish", "utils.AverageMeter.update", "model", "criterion", "utils.accuracy", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "utils.AverageMeter.update", "time.time", "utils.Bar.next", "len", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "inputs.size", "inputs.size", "inputs.size", "time.time", "inputs.cuda", "targets.cuda", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar_imagenet.imagenet.train", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.eval.accuracy", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.step", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.misc.AverageMeter.update"], ["", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "use_cuda", ")", ":", "\n", "# switch to train mode", "\n", "    ", "model", ".", "train", "(", ")", "\n", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "bar", "=", "Bar", "(", "'Processing'", ",", "max", "=", "len", "(", "train_loader", ")", ")", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "            ", "inputs", ",", "targets", "=", "inputs", ".", "cuda", "(", ")", ",", "targets", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "", "inputs", ",", "targets", "=", "torch", ".", "autograd", ".", "Variable", "(", "inputs", ")", ",", "torch", ".", "autograd", ".", "Variable", "(", "targets", ")", "\n", "\n", "# compute output", "\n", "outputs", "=", "model", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "outputs", ".", "data", ",", "targets", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "data", "[", "0", "]", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", "[", "0", "]", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "prec5", "[", "0", "]", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "# plot progress", "\n", "bar", ".", "suffix", "=", "'({batch}/{size}) Data: {data:.3f}s | Batch: {bt:.3f}s | Total: {total:} | ETA: {eta:} | Loss: {loss:.4f} | top1: {top1: .4f} | top5: {top5: .4f}'", ".", "format", "(", "\n", "batch", "=", "batch_idx", "+", "1", ",", "\n", "size", "=", "len", "(", "train_loader", ")", ",", "\n", "data", "=", "data_time", ".", "val", ",", "\n", "bt", "=", "batch_time", ".", "val", ",", "\n", "total", "=", "bar", ".", "elapsed_td", ",", "\n", "eta", "=", "bar", ".", "eta_td", ",", "\n", "loss", "=", "losses", ".", "avg", ",", "\n", "top1", "=", "top1", ".", "avg", ",", "\n", "top5", "=", "top5", ".", "avg", ",", "\n", ")", "\n", "bar", ".", "next", "(", ")", "\n", "", "bar", ".", "finish", "(", ")", "\n", "return", "(", "losses", ".", "avg", ",", "top1", ".", "avg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar_imagenet.imagenet.test": [[299, 350], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "model.eval", "time.time", "utils.Bar", "enumerate", "utils.Bar.finish", "utils.AverageMeter.update", "model", "criterion", "utils.accuracy", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "time.time", "utils.Bar.next", "len", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "inputs.size", "inputs.size", "inputs.size", "time.time", "inputs.cuda", "targets.cuda", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.eval.accuracy", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.misc.AverageMeter.update"], ["", "def", "test", "(", "val_loader", ",", "model", ",", "criterion", ",", "epoch", ",", "use_cuda", ")", ":", "\n", "    ", "global", "best_acc", "\n", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "bar", "=", "Bar", "(", "'Processing'", ",", "max", "=", "len", "(", "val_loader", ")", ")", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "            ", "inputs", ",", "targets", "=", "inputs", ".", "cuda", "(", ")", ",", "targets", ".", "cuda", "(", ")", "\n", "", "inputs", ",", "targets", "=", "torch", ".", "autograd", ".", "Variable", "(", "inputs", ",", "volatile", "=", "True", ")", ",", "torch", ".", "autograd", ".", "Variable", "(", "targets", ")", "\n", "\n", "# compute output", "\n", "outputs", "=", "model", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "outputs", ".", "data", ",", "targets", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "data", "[", "0", "]", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", "[", "0", "]", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "prec5", "[", "0", "]", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "# plot progress", "\n", "bar", ".", "suffix", "=", "'({batch}/{size}) Data: {data:.3f}s | Batch: {bt:.3f}s | Total: {total:} | ETA: {eta:} | Loss: {loss:.4f} | top1: {top1: .4f} | top5: {top5: .4f}'", ".", "format", "(", "\n", "batch", "=", "batch_idx", "+", "1", ",", "\n", "size", "=", "len", "(", "val_loader", ")", ",", "\n", "data", "=", "data_time", ".", "avg", ",", "\n", "bt", "=", "batch_time", ".", "avg", ",", "\n", "total", "=", "bar", ".", "elapsed_td", ",", "\n", "eta", "=", "bar", ".", "eta_td", ",", "\n", "loss", "=", "losses", ".", "avg", ",", "\n", "top1", "=", "top1", ".", "avg", ",", "\n", "top5", "=", "top5", ".", "avg", ",", "\n", ")", "\n", "bar", ".", "next", "(", ")", "\n", "", "bar", ".", "finish", "(", ")", "\n", "return", "(", "losses", ".", "avg", ",", "top1", ".", "avg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar_imagenet.imagenet.save_checkpoint": [[351, 356], ["os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "shutil.copyfile", "os.path.join"], "function", ["None"], ["", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "checkpoint", "=", "'checkpoint'", ",", "filename", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "    ", "filepath", "=", "os", ".", "path", ".", "join", "(", "checkpoint", ",", "filename", ")", "\n", "torch", ".", "save", "(", "state", ",", "filepath", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "filepath", ",", "os", ".", "path", ".", "join", "(", "checkpoint", ",", "'model_best.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar_imagenet.imagenet.adjust_learning_rate": [[357, 363], ["None"], "function", ["None"], ["", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "global", "state", "\n", "if", "epoch", "in", "args", ".", "schedule", ":", "\n", "        ", "state", "[", "'lr'", "]", "*=", "args", ".", "gamma", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "state", "[", "'lr'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.eval.accuracy": [[5, 19], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.logger.Logger.append"], ["def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "", "", ""]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.logger.Logger.__init__": [[28, 49], ["open", "logger.Logger.file.readline", "logger.Logger.rstrip().split", "enumerate", "logger.Logger.file.close", "open", "open", "numbers.rstrip().split.rstrip().split.rstrip().split", "range", "logger.Logger.rstrip", "len", "logger.Logger.numbers[].append", "numbers.rstrip().split.rstrip().split.rstrip"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.logger.Logger.close", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.logger.Logger.append"], ["def", "__init__", "(", "self", ",", "fpath", ",", "title", "=", "None", ",", "resume", "=", "False", ")", ":", "\n", "        ", "self", ".", "file", "=", "None", "\n", "self", ".", "resume", "=", "resume", "\n", "self", ".", "title", "=", "''", "if", "title", "==", "None", "else", "title", "\n", "if", "fpath", "is", "not", "None", ":", "\n", "            ", "if", "resume", ":", "\n", "                ", "self", ".", "file", "=", "open", "(", "fpath", ",", "'r'", ")", "\n", "name", "=", "self", ".", "file", ".", "readline", "(", ")", "\n", "self", ".", "names", "=", "name", ".", "rstrip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "self", ".", "numbers", "=", "{", "}", "\n", "for", "_", ",", "name", "in", "enumerate", "(", "self", ".", "names", ")", ":", "\n", "                    ", "self", ".", "numbers", "[", "name", "]", "=", "[", "]", "\n", "\n", "", "for", "numbers", "in", "self", ".", "file", ":", "\n", "                    ", "numbers", "=", "numbers", ".", "rstrip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "numbers", ")", ")", ":", "\n", "                        ", "self", ".", "numbers", "[", "self", ".", "names", "[", "i", "]", "]", ".", "append", "(", "numbers", "[", "i", "]", ")", "\n", "", "", "self", ".", "file", ".", "close", "(", ")", "\n", "self", ".", "file", "=", "open", "(", "fpath", ",", "'a'", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "file", "=", "open", "(", "fpath", ",", "'w'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.logger.Logger.set_names": [[50, 62], ["enumerate", "logger.Logger.file.write", "logger.Logger.file.flush", "logger.Logger.file.write", "logger.Logger.file.write"], "methods", ["None"], ["", "", "", "def", "set_names", "(", "self", ",", "names", ")", ":", "\n", "        ", "if", "self", ".", "resume", ":", "\n", "            ", "pass", "\n", "# initialize numbers as empty list", "\n", "", "self", ".", "numbers", "=", "{", "}", "\n", "self", ".", "names", "=", "names", "\n", "for", "_", ",", "name", "in", "enumerate", "(", "self", ".", "names", ")", ":", "\n", "            ", "self", ".", "file", ".", "write", "(", "name", ")", "\n", "self", ".", "file", ".", "write", "(", "'\\t'", ")", "\n", "self", ".", "numbers", "[", "name", "]", "=", "[", "]", "\n", "", "self", ".", "file", ".", "write", "(", "'\\n'", ")", "\n", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.logger.Logger.append": [[64, 72], ["enumerate", "logger.Logger.file.write", "logger.Logger.file.flush", "len", "len", "logger.Logger.file.write", "logger.Logger.file.write", "logger.Logger.numbers[].append"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.logger.Logger.append"], ["", "def", "append", "(", "self", ",", "numbers", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "names", ")", "==", "len", "(", "numbers", ")", ",", "'Numbers do not match names'", "\n", "for", "index", ",", "num", "in", "enumerate", "(", "numbers", ")", ":", "\n", "            ", "self", ".", "file", ".", "write", "(", "\"{0:.6f}\"", ".", "format", "(", "num", ")", ")", "\n", "self", ".", "file", ".", "write", "(", "'\\t'", ")", "\n", "self", ".", "numbers", "[", "self", ".", "names", "[", "index", "]", "]", ".", "append", "(", "num", ")", "\n", "", "self", ".", "file", ".", "write", "(", "'\\n'", ")", "\n", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.logger.Logger.plot": [[73, 81], ["enumerate", "matplotlib.legend", "matplotlib.legend", "matplotlib.grid", "matplotlib.grid", "numpy.arange", "matplotlib.plot", "matplotlib.plot", "len", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.logger.LoggerMonitor.plot", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.logger.LoggerMonitor.plot"], ["", "def", "plot", "(", "self", ",", "names", "=", "None", ")", ":", "\n", "        ", "names", "=", "self", ".", "names", "if", "names", "==", "None", "else", "names", "\n", "numbers", "=", "self", ".", "numbers", "\n", "for", "_", ",", "name", "in", "enumerate", "(", "names", ")", ":", "\n", "            ", "x", "=", "np", ".", "arange", "(", "len", "(", "numbers", "[", "name", "]", ")", ")", "\n", "plt", ".", "plot", "(", "x", ",", "np", ".", "asarray", "(", "numbers", "[", "name", "]", ")", ")", "\n", "", "plt", ".", "legend", "(", "[", "self", ".", "title", "+", "'('", "+", "name", "+", "')'", "for", "name", "in", "names", "]", ")", "\n", "plt", ".", "grid", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.logger.Logger.close": [[82, 85], ["logger.Logger.file.close"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.logger.Logger.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.logger.LoggerMonitor.__init__": [[88, 94], ["paths.items", "Logger.Logger", "Logger.LoggerMonitor.loggers.append"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.logger.Logger.append"], ["def", "__init__", "(", "self", ",", "paths", ")", ":", "\n", "        ", "'''paths is a distionary with {name:filepath} pair'''", "\n", "self", ".", "loggers", "=", "[", "]", "\n", "for", "title", ",", "path", "in", "paths", ".", "items", "(", ")", ":", "\n", "            ", "logger", "=", "Logger", "(", "path", ",", "title", "=", "title", ",", "resume", "=", "True", ")", "\n", "self", ".", "loggers", ".", "append", "(", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.logger.LoggerMonitor.plot": [[95, 103], ["matplotlib.figure", "matplotlib.figure", "matplotlib.subplot", "matplotlib.subplot", "matplotlib.legend", "matplotlib.legend", "matplotlib.grid", "matplotlib.grid", "logger.plot_overlap"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.logger.plot_overlap"], ["", "", "def", "plot", "(", "self", ",", "names", "=", "None", ")", ":", "\n", "        ", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "subplot", "(", "121", ")", "\n", "legend_text", "=", "[", "]", "\n", "for", "logger", "in", "self", ".", "loggers", ":", "\n", "            ", "legend_text", "+=", "plot_overlap", "(", "logger", ",", "names", ")", "\n", "", "plt", ".", "legend", "(", "legend_text", ",", "bbox_to_anchor", "=", "(", "1.05", ",", "1", ")", ",", "loc", "=", "2", ",", "borderaxespad", "=", "0.", ")", "\n", "plt", ".", "grid", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.logger.savefig": [[14, 17], ["matplotlib.savefig"], "function", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.logger.savefig"], ["def", "savefig", "(", "fname", ",", "dpi", "=", "None", ")", ":", "\n", "    ", "dpi", "=", "150", "if", "dpi", "==", "None", "else", "dpi", "\n", "plt", ".", "savefig", "(", "fname", ",", "dpi", "=", "dpi", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.logger.plot_overlap": [[18, 25], ["enumerate", "numpy.arange", "matplotlib.plot", "len", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.logger.LoggerMonitor.plot"], ["", "def", "plot_overlap", "(", "logger", ",", "names", "=", "None", ")", ":", "\n", "    ", "names", "=", "logger", ".", "names", "if", "names", "==", "None", "else", "names", "\n", "numbers", "=", "logger", ".", "numbers", "\n", "for", "_", ",", "name", "in", "enumerate", "(", "names", ")", ":", "\n", "        ", "x", "=", "np", ".", "arange", "(", "len", "(", "numbers", "[", "name", "]", ")", ")", "\n", "plt", ".", "plot", "(", "x", ",", "np", ".", "asarray", "(", "numbers", "[", "name", "]", ")", ")", "\n", "", "return", "[", "logger", ".", "title", "+", "'('", "+", "name", "+", "')'", "for", "name", "in", "names", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.misc.AverageMeter.__init__": [[64, 66], ["misc.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.misc.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.misc.AverageMeter.reset": [[67, 72], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.misc.AverageMeter.update": [[73, 78], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "", "", "", ""]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.misc.get_mean_and_std": [[20, 34], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "print", "torch.zeros.div_", "torch.zeros.div_", "range", "len", "len", "inputs[].mean", "inputs[].std"], "function", ["None"], ["def", "get_mean_and_std", "(", "dataset", ")", ":", "\n", "    ", "'''Compute the mean and std value of dataset.'''", "\n", "dataloader", "=", "trainloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "\n", "mean", "=", "torch", ".", "zeros", "(", "3", ")", "\n", "std", "=", "torch", ".", "zeros", "(", "3", ")", "\n", "print", "(", "'==> Computing mean and std..'", ")", "\n", "for", "inputs", ",", "targets", "in", "dataloader", ":", "\n", "        ", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "mean", "[", "i", "]", "+=", "inputs", "[", ":", ",", "i", ",", ":", ",", ":", "]", ".", "mean", "(", ")", "\n", "std", "[", "i", "]", "+=", "inputs", "[", ":", ",", "i", ",", ":", ",", ":", "]", ".", "std", "(", ")", "\n", "", "", "mean", ".", "div_", "(", "len", "(", "dataset", ")", ")", "\n", "std", ".", "div_", "(", "len", "(", "dataset", ")", ")", "\n", "return", "mean", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.misc.init_params": [[35, 49], ["net.modules", "isinstance", "torch.kaiming_normal", "isinstance", "torch.constant", "torch.constant", "torch.constant", "isinstance", "torch.normal", "torch.constant"], "function", ["None"], ["", "def", "init_params", "(", "net", ")", ":", "\n", "    ", "'''Init layer parameters.'''", "\n", "for", "m", "in", "net", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "init", ".", "kaiming_normal", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "if", "m", ".", "bias", ":", "\n", "                ", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "init", ".", "constant", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "init", ".", "normal", "(", "m", ".", "weight", ",", "std", "=", "1e-3", ")", "\n", "if", "m", ".", "bias", ":", "\n", "                ", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.misc.mkdir_p": [[50, 59], ["os.makedirs", "os.path.isdir"], "function", ["None"], ["", "", "", "", "def", "mkdir_p", "(", "path", ")", ":", "\n", "    ", "'''make dir if not exist'''", "\n", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "except", "OSError", "as", "exc", ":", "# Python >2.5", "\n", "        ", "if", "exc", ".", "errno", "==", "errno", ".", "EEXIST", "and", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.visualize.make_image": [[12, 17], ["range", "img.numpy", "numpy.transpose"], "function", ["None"], ["def", "make_image", "(", "img", ",", "mean", "=", "(", "0", ",", "0", ",", "0", ")", ",", "std", "=", "(", "1", ",", "1", ",", "1", ")", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "0", ",", "3", ")", ":", "\n", "        ", "img", "[", "i", "]", "=", "img", "[", "i", "]", "*", "std", "[", "i", "]", "+", "mean", "[", "i", "]", "# unnormalize", "\n", "", "npimg", "=", "img", ".", "numpy", "(", ")", "\n", "return", "np", ".", "transpose", "(", "npimg", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.visualize.gauss": [[18, 20], ["torch.exp().mul", "torch.exp().mul", "torch.exp", "torch.exp", "torch.pow().div", "torch.pow().div", "torch.pow", "torch.pow", "torch.add", "torch.add"], "function", ["None"], ["", "def", "gauss", "(", "x", ",", "a", ",", "b", ",", "c", ")", ":", "\n", "    ", "return", "torch", ".", "exp", "(", "-", "torch", ".", "pow", "(", "torch", ".", "add", "(", "x", ",", "-", "b", ")", ",", "2", ")", ".", "div", "(", "2", "*", "c", "*", "c", ")", ")", ".", "mul", "(", "a", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.visualize.colorize": [[21, 37], ["x.dim", "torch.unsqueeze", "torch.unsqueeze", "x.dim", "torch.zeros", "torch.zeros", "visualize.gauss", "visualize.gauss", "visualize.gauss", "visualize.gauss", "x.dim", "torch.zeros", "torch.zeros", "visualize.gauss", "visualize.gauss", "x.size", "x.size", "torch.zeros.gt", "visualize.gauss", "visualize.gauss", "x.size", "x.size", "x.size"], "function", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.visualize.gauss", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.visualize.gauss", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.visualize.gauss", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.visualize.gauss", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.visualize.gauss", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.visualize.gauss", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.visualize.gauss", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.visualize.gauss"], ["", "def", "colorize", "(", "x", ")", ":", "\n", "    ", "''' Converts a one-channel grayscale image to a color heatmap image '''", "\n", "if", "x", ".", "dim", "(", ")", "==", "2", ":", "\n", "        ", "torch", ".", "unsqueeze", "(", "x", ",", "0", ",", "out", "=", "x", ")", "\n", "", "if", "x", ".", "dim", "(", ")", "==", "3", ":", "\n", "        ", "cl", "=", "torch", ".", "zeros", "(", "[", "3", ",", "x", ".", "size", "(", "1", ")", ",", "x", ".", "size", "(", "2", ")", "]", ")", "\n", "cl", "[", "0", "]", "=", "gauss", "(", "x", ",", ".5", ",", ".6", ",", ".2", ")", "+", "gauss", "(", "x", ",", "1", ",", ".8", ",", ".3", ")", "\n", "cl", "[", "1", "]", "=", "gauss", "(", "x", ",", "1", ",", ".5", ",", ".3", ")", "\n", "cl", "[", "2", "]", "=", "gauss", "(", "x", ",", "1", ",", ".2", ",", ".3", ")", "\n", "cl", "[", "cl", ".", "gt", "(", "1", ")", "]", "=", "1", "\n", "", "elif", "x", ".", "dim", "(", ")", "==", "4", ":", "\n", "        ", "cl", "=", "torch", ".", "zeros", "(", "[", "x", ".", "size", "(", "0", ")", ",", "3", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", "]", ")", "\n", "cl", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "gauss", "(", "x", ",", ".5", ",", ".6", ",", ".2", ")", "+", "gauss", "(", "x", ",", "1", ",", ".8", ",", ".3", ")", "\n", "cl", "[", ":", ",", "1", ",", ":", ",", ":", "]", "=", "gauss", "(", "x", ",", "1", ",", ".5", ",", ".3", ")", "\n", "cl", "[", ":", ",", "2", ",", ":", ",", ":", "]", "=", "gauss", "(", "x", ",", "1", ",", ".2", ",", ".3", ")", "\n", "", "return", "cl", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.visualize.show_batch": [[38, 42], ["visualize.make_image", "matplotlib.imshow", "matplotlib.show", "torchvision.utils.make_grid", "torchvision.utils.make_grid"], "function", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.visualize.make_image"], ["", "def", "show_batch", "(", "images", ",", "Mean", "=", "(", "2", ",", "2", ",", "2", ")", ",", "Std", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", ":", "\n", "    ", "images", "=", "make_image", "(", "torchvision", ".", "utils", ".", "make_grid", "(", "images", ")", ",", "Mean", ",", "Std", ")", "\n", "plt", ".", "imshow", "(", "images", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.visualize.show_mask_single": [[44, 72], ["make_image.size", "make_image.clone", "range", "visualize.make_image", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.axis", "make_image.size", "upsampling", "visualize.make_image", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.axis", "torchvision.utils.make_grid", "torchvision.utils.make_grid", "torchvision.utils.make_grid", "torchvision.utils.make_grid", "make_image.expand_as"], "function", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.visualize.make_image", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.visualize.make_image"], ["", "def", "show_mask_single", "(", "images", ",", "mask", ",", "Mean", "=", "(", "2", ",", "2", ",", "2", ")", ",", "Std", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", ":", "\n", "    ", "im_size", "=", "images", ".", "size", "(", "2", ")", "\n", "\n", "# save for adding mask", "\n", "im_data", "=", "images", ".", "clone", "(", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "3", ")", ":", "\n", "        ", "im_data", "[", ":", ",", "i", ",", ":", ",", ":", "]", "=", "im_data", "[", ":", ",", "i", ",", ":", ",", ":", "]", "*", "Std", "[", "i", "]", "+", "Mean", "[", "i", "]", "# unnormalize", "\n", "\n", "", "images", "=", "make_image", "(", "torchvision", ".", "utils", ".", "make_grid", "(", "images", ")", ",", "Mean", ",", "Std", ")", "\n", "plt", ".", "subplot", "(", "2", ",", "1", ",", "1", ")", "\n", "plt", ".", "imshow", "(", "images", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "\n", "# for b in range(mask.size(0)):", "\n", "#     mask[b] = (mask[b] - mask[b].min())/(mask[b].max() - mask[b].min())", "\n", "mask_size", "=", "mask", ".", "size", "(", "2", ")", "\n", "# print('Max %f Min %f' % (mask.max(), mask.min()))", "\n", "mask", "=", "(", "upsampling", "(", "mask", ",", "scale_factor", "=", "im_size", "/", "mask_size", ")", ")", "\n", "# mask = colorize(upsampling(mask, scale_factor=im_size/mask_size))", "\n", "# for c in range(3):", "\n", "#     mask[:,c,:,:] = (mask[:,c,:,:] - Mean[c])/Std[c]", "\n", "\n", "# print(mask.size())", "\n", "mask", "=", "make_image", "(", "torchvision", ".", "utils", ".", "make_grid", "(", "0.3", "*", "im_data", "+", "0.7", "*", "mask", ".", "expand_as", "(", "im_data", ")", ")", ")", "\n", "# mask = make_image(torchvision.utils.make_grid(0.3*im_data+0.7*mask), Mean, Std)", "\n", "plt", ".", "subplot", "(", "2", ",", "1", ",", "2", ")", "\n", "plt", ".", "imshow", "(", "mask", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.visualize.show_mask": [[73, 103], ["make_image.size", "make_image.clone", "range", "visualize.make_image", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.axis", "range", "torchvision.utils.make_grid", "torchvision.utils.make_grid", "len", "masklist[].data.cpu", "make_image.size", "upsampling", "visualize.make_image", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.axis", "len", "torchvision.utils.make_grid", "torchvision.utils.make_grid", "len", "make_image.expand_as"], "function", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.visualize.make_image", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.visualize.make_image"], ["", "def", "show_mask", "(", "images", ",", "masklist", ",", "Mean", "=", "(", "2", ",", "2", ",", "2", ")", ",", "Std", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", ":", "\n", "    ", "im_size", "=", "images", ".", "size", "(", "2", ")", "\n", "\n", "# save for adding mask", "\n", "im_data", "=", "images", ".", "clone", "(", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "3", ")", ":", "\n", "        ", "im_data", "[", ":", ",", "i", ",", ":", ",", ":", "]", "=", "im_data", "[", ":", ",", "i", ",", ":", ",", ":", "]", "*", "Std", "[", "i", "]", "+", "Mean", "[", "i", "]", "# unnormalize", "\n", "\n", "", "images", "=", "make_image", "(", "torchvision", ".", "utils", ".", "make_grid", "(", "images", ")", ",", "Mean", ",", "Std", ")", "\n", "plt", ".", "subplot", "(", "1", "+", "len", "(", "masklist", ")", ",", "1", ",", "1", ")", "\n", "plt", ".", "imshow", "(", "images", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "masklist", ")", ")", ":", "\n", "        ", "mask", "=", "masklist", "[", "i", "]", ".", "data", ".", "cpu", "(", ")", "\n", "# for b in range(mask.size(0)):", "\n", "#     mask[b] = (mask[b] - mask[b].min())/(mask[b].max() - mask[b].min())", "\n", "mask_size", "=", "mask", ".", "size", "(", "2", ")", "\n", "# print('Max %f Min %f' % (mask.max(), mask.min()))", "\n", "mask", "=", "(", "upsampling", "(", "mask", ",", "scale_factor", "=", "im_size", "/", "mask_size", ")", ")", "\n", "# mask = colorize(upsampling(mask, scale_factor=im_size/mask_size))", "\n", "# for c in range(3):", "\n", "#     mask[:,c,:,:] = (mask[:,c,:,:] - Mean[c])/Std[c]", "\n", "\n", "# print(mask.size())", "\n", "mask", "=", "make_image", "(", "torchvision", ".", "utils", ".", "make_grid", "(", "0.3", "*", "im_data", "+", "0.7", "*", "mask", ".", "expand_as", "(", "im_data", ")", ")", ")", "\n", "# mask = make_image(torchvision.utils.make_grid(0.3*im_data+0.7*mask), Mean, Std)", "\n", "plt", ".", "subplot", "(", "1", "+", "len", "(", "masklist", ")", ",", "1", ",", "i", "+", "2", ")", "\n", "plt", ".", "imshow", "(", "mask", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.radam.RAdam.__init__": [[7, 11], ["dict", "torch.optim.optimizer.Optimizer.__init__", "range"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.__init__"], ["# iter_idx = 0", "\n", "\n", "# from ipdb import set_trace", "\n", "import", "torch", ".", "optim", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.radam.RAdam.__setstate__": [[12, 14], ["super().__setstate__"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.radam.AdamW.__setstate__"], ["class", "RAdam", "(", "Optimizer", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ",", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.radam.RAdam.step": [[15, 79], ["closure", "p.grad.data.float", "p.data.float", "exp_avg_sq.mul_().addcmul_", "exp_avg.mul_().add_", "p.data.copy_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "state[].type_as", "state[].type_as", "p.data.float.add_", "exp_avg_sq.sqrt().add_", "p.data.float.addcdiv_", "p.data.float.add_", "exp_avg_sq.mul_", "exp_avg.mul_", "int", "exp_avg_sq.sqrt", "math.sqrt"], "methods", ["None"], ["weight_decay", "=", "0", ")", ":", "\n", "        ", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "\n", "weight_decay", "=", "weight_decay", ")", "\n", "\n", "super", "(", "RAdam", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n", "", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "RAdam", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "\n", "", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "loss", "=", "None", "\n", "beta2_t", "=", "None", "\n", "ratio", "=", "None", "\n", "N_sma_max", "=", "None", "\n", "N_sma", "=", "None", "\n", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", ".", "float", "(", ")", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'Adam does not support sparse gradients, please consider SparseAdam instead'", ")", "\n", "\n", "", "p_data_fp32", "=", "p", ".", "data", ".", "float", "(", ")", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "", "else", ":", "\n", "                    ", "state", "[", "'exp_avg'", "]", "=", "state", "[", "'exp_avg'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "state", "[", "'exp_avg_sq'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "\n", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "if", "beta2_t", "is", "None", ":", "\n", "                    ", "beta2_t", "=", "beta2", "**", "state", "[", "'step'", "]", "\n", "N_sma_max", "=", "2", "/", "(", "1", "-", "beta2", ")", "-", "1", "\n", "N_sma", "=", "N_sma_max", "-", "2", "*", "state", "[", "'step'", "]", "*", "beta2_t", "/", "(", "1", "-", "beta2_t", ")", "\n", "beta1_t", "=", "1", "-", "beta1", "**", "state", "[", "'step'", "]", "\n", "if", "N_sma", ">=", "5", ":", "\n", "                        ", "ratio", "=", "math", ".", "sqrt", "(", "(", "1", "-", "beta2_t", ")", "*", "(", "N_sma", "-", "4", ")", "/", "(", "N_sma_max", "-", "4", ")", "*", "(", "N_sma", "-", "2", ")", "/", "N_sma", "*", "N_sma_max", "/", "(", "N_sma_max", "-", "2", ")", ")", "/", "beta1_t", "\n", "\n", "", "", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                    ", "p_data_fp32", ".", "add_", "(", "-", "group", "[", "'weight_decay'", "]", "*", "group", "[", "'lr'", "]", ",", "p_data_fp32", ")", "\n", "\n", "# more conservative since it's an approximated value", "\n", "", "if", "N_sma", ">=", "5", ":", "\n", "                    ", "step_size", "=", "group", "[", "'lr'", "]", "*", "ratio", "\n", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "p_data_fp32", ".", "addcdiv_", "(", "-", "step_size", ",", "exp_avg", ",", "denom", ")", "\n", "", "else", ":", "\n", "                    ", "step_size", "=", "group", "[", "'lr'", "]", "/", "beta1_t", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.radam.RAdam_4step.__init__": [[82, 88], ["dict", "torch.optim.optimizer.Optimizer.__init__", "range"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.__init__"], ["", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "\n", "", "", "return", "loss", "\n", "\n", "\n", "", "", "class", "AdamW", "(", "Optimizer", ")", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.radam.RAdam_4step.__setstate__": [[89, 91], ["super().__setstate__"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.radam.AdamW.__setstate__"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ",", "\n", "weight_decay", "=", "0", ")", ":", "\n", "        ", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.radam.RAdam_4step.step": [[92, 171], ["closure", "p.grad.data.float", "p.data.float", "exp_avg_sq.mul_().addcmul_", "exp_avg.mul_().add_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "state[].type_as", "state[].type_as", "p.data.float.add_", "p.data.copy_", "exp_avg_sq.mul_", "exp_avg.mul_", "p.data.float.addcdiv_", "p.data.copy_", "p.data.float.add_", "int", "p.data.float.add_", "p.data.float.addcdiv_", "p.data.copy_", "p.data.float.add_", "exp_avg_sq.sqrt", "math.sqrt", "math.sqrt", "exp_avg_sq.sqrt", "math.sqrt"], "methods", ["None"], ["weight_decay", "=", "weight_decay", ")", "\n", "\n", "super", "(", "AdamW", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n", "", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "AdamW", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "\n", "", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "global", "iter_idx", "\n", "iter_idx", "+=", "1", "\n", "grad_list", "=", "list", "(", ")", "\n", "mom_list", "=", "list", "(", ")", "\n", "mom_2rd_list", "=", "list", "(", ")", "\n", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", ".", "float", "(", ")", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'Adam does not support sparse gradients, please consider SparseAdam instead'", ")", "\n", "\n", "", "p_data_fp32", "=", "p", ".", "data", ".", "float", "(", ")", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "", "else", ":", "\n", "                    ", "state", "[", "'exp_avg'", "]", "=", "state", "[", "'exp_avg'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "state", "[", "'exp_avg_sq'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "\n", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "\n", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "bias_correction1", "=", "1", "-", "beta1", "**", "state", "[", "'step'", "]", "\n", "bias_correction2", "=", "1", "-", "beta2", "**", "state", "[", "'step'", "]", "\n", "step_size", "=", "group", "[", "'lr'", "]", "*", "math", ".", "sqrt", "(", "bias_correction2", ")", "/", "bias_correction1", "\n", "\n", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                    ", "p_data_fp32", ".", "add_", "(", "-", "group", "[", "'weight_decay'", "]", "*", "group", "[", "'lr'", "]", ",", "p_data_fp32", ")", "\n", "\n", "", "p_data_fp32", ".", "addcdiv_", "(", "-", "step_size", ",", "exp_avg", ",", "denom", ")", "\n", "\n", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "\n", "", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.radam.AdamW.__init__": [[174, 180], ["dict", "print", "torch.optim.optimizer.Optimizer.__init__"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.__init__"], []], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.radam.AdamW.__setstate__": [[181, 183], ["super().__setstate__"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.radam.AdamW.__setstate__"], []], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.radam.AdamW.step": [[184, 242], ["list", "list", "list", "closure", "p.grad.data.float", "p.data.float", "exp_avg_sq.mul_().addcmul_", "exp_avg.mul_().add_", "exp_avg_sq.sqrt().add_", "p.data.float.addcdiv_", "p.data.copy_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "state[].type_as", "state[].type_as", "p.data.float.add_", "exp_avg_sq.mul_", "exp_avg.mul_", "exp_avg_sq.sqrt", "math.sqrt"], "methods", ["None"], []], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.vgg.VGG.__init__": [[25, 30], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "vgg.VGG._initialize_weights"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.__init__", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.vgg.VGG._initialize_weights"], ["    ", "def", "__init__", "(", "self", ",", "features", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "features", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", "\n", "self", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.vgg.VGG.forward": [[31, 36], ["vgg.VGG.features", "vgg.VGG.view", "vgg.VGG.classifier", "vgg.VGG.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.vgg.VGG._initialize_weights": [[37, 51], ["vgg.VGG.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.size", "m.weight.data.normal_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "n", "=", "m", ".", "weight", ".", "size", "(", "1", ")", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.vgg.make_layers": [[53, 67], ["torch.Sequential", "torch.Conv2d", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "function", ["None"], ["", "", "", "", "def", "make_layers", "(", "cfg", ",", "batch_norm", "=", "False", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "in_channels", "=", "3", "\n", "for", "v", "in", "cfg", ":", "\n", "        ", "if", "v", "==", "'M'", ":", "\n", "            ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "", "else", ":", "\n", "            ", "conv2d", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "v", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "if", "batch_norm", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "BatchNorm2d", "(", "v", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "else", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "in_channels", "=", "v", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.vgg.vgg11": [[77, 85], ["vgg.VGG", "vgg.make_layers"], "function", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.vgg.make_layers"], ["def", "vgg11", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"VGG 11-layer model (configuration \"A\")\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "VGG", "(", "make_layers", "(", "cfg", "[", "'A'", "]", ")", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.vgg.vgg11_bn": [[87, 91], ["vgg.VGG", "vgg.make_layers"], "function", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.vgg.make_layers"], ["", "def", "vgg11_bn", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"VGG 11-layer model (configuration \"A\") with batch normalization\"\"\"", "\n", "model", "=", "VGG", "(", "make_layers", "(", "cfg", "[", "'A'", "]", ",", "batch_norm", "=", "True", ")", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.vgg.vgg13": [[93, 101], ["vgg.VGG", "vgg.make_layers"], "function", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.vgg.make_layers"], ["", "def", "vgg13", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"VGG 13-layer model (configuration \"B\")\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "VGG", "(", "make_layers", "(", "cfg", "[", "'B'", "]", ")", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.vgg.vgg13_bn": [[103, 107], ["vgg.VGG", "vgg.make_layers"], "function", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.vgg.make_layers"], ["", "def", "vgg13_bn", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"VGG 13-layer model (configuration \"B\") with batch normalization\"\"\"", "\n", "model", "=", "VGG", "(", "make_layers", "(", "cfg", "[", "'B'", "]", ",", "batch_norm", "=", "True", ")", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.vgg.vgg16": [[109, 117], ["vgg.VGG", "vgg.make_layers"], "function", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.vgg.make_layers"], ["", "def", "vgg16", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\")\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "VGG", "(", "make_layers", "(", "cfg", "[", "'D'", "]", ")", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.vgg.vgg16_bn": [[119, 123], ["vgg.VGG", "vgg.make_layers"], "function", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.vgg.make_layers"], ["", "def", "vgg16_bn", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\") with batch normalization\"\"\"", "\n", "model", "=", "VGG", "(", "make_layers", "(", "cfg", "[", "'D'", "]", ",", "batch_norm", "=", "True", ")", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.vgg.vgg19": [[125, 133], ["vgg.VGG", "vgg.make_layers"], "function", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.vgg.make_layers"], ["", "def", "vgg19", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"VGG 19-layer model (configuration \"E\")\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "VGG", "(", "make_layers", "(", "cfg", "[", "'E'", "]", ")", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.vgg.vgg19_bn": [[135, 139], ["vgg.VGG", "vgg.make_layers"], "function", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.vgg.make_layers"], ["", "def", "vgg19_bn", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"VGG 19-layer model (configuration 'E') with batch normalization\"\"\"", "\n", "model", "=", "VGG", "(", "make_layers", "(", "cfg", "[", "'E'", "]", ",", "batch_norm", "=", "True", ")", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.resnet.BasicBlock.__init__": [[25, 34], ["torch.Module.__init__", "resnet.conv3x3", "torch.BatchNorm2d", "torch.ReLU", "resnet.conv3x3", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.__init__", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.preresnet.conv3x3", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.preresnet.conv3x3"], ["#     def rand_ini(self):", "\n", "\n", "#         for cur_lstm in self.unit_list:", "\n", "#             utils.init_lstm(cur_lstm)", "\n", "\n", "#     def forward(self, x):", "\n", "\n", "#         out, _ = self.layer(x)", "\n", "\n", "#         if self.droprate > 0:", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.resnet.BasicBlock.forward": [[35, 52], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["#             out = F.dropout(out, p=self.droprate, training=self.training)", "\n", "\n", "#         return toch.cat([x, out], 2)", "\n", "\n", "# class DenseRNN(nn.Module):", "\n", "#     def __init__(self, layer_num, unit, emb_dim, hid_dim, droprate):", "\n", "#         super(DenseRNN, self).__init__()", "\n", "\n", "#         self.layer = nn.Sequential([BasicUnit(unit, emb_dim + i * hid_dim, hid_dim, droprate) for i in range(layer_num) ])", "\n", "\n", "#         self.output_dim = self.layer[-1].output_dim", "\n", "\n", "#         self.init_hidden()", "\n", "\n", "#     def init_hidden(self):", "\n", "#         self.layer.apply(lambda t: t.init_hidden())", "\n", "\n", "#     def rand_ini(self):", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.resnet.Bottleneck.__init__": [[57, 69], ["torch.Module.__init__", "torch.Conv2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.__init__"], [""]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.resnet.Bottleneck.forward": [[70, 91], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], []], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.resnet.ResNet.__init__": [[95, 128], ["torch.Module.__init__", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AvgPool2d", "torch.Linear", "resnet.ResNet.modules", "block_name.lower", "isinstance", "block_name.lower", "ValueError", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.__init__", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.imagenet.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.imagenet.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.imagenet.resnext.ResNeXt._make_layer"], []], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.resnet.ResNet._make_layer": [[129, 145], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.logger.Logger.append", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.resnext.CifarResNeXt.block", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.logger.Logger.append", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.resnext.CifarResNeXt.block"], []], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.resnet.ResNet.forward": [[146, 160], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.avgpool", "resnet.ResNet.view", "resnet.ResNet.fc", "resnet.ResNet.size"], "methods", ["None"], []], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.resnet.conv3x3": [[16, 20], ["torch.Conv2d"], "function", ["None"], ["\n", "#         self.output_dim = input_dim + hid_dim", "\n", "\n", "#         self.init_hidden()", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.resnet.resnet": [[162, 167], ["resnet.ResNet"], "function", ["None"], []], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.densenet.Bottleneck.__init__": [[13, 23], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.__init__"], ["    ", "def", "__init__", "(", "self", ",", "unit", ",", "input_dim", ",", "increase_rate", ",", "droprate", ")", ":", "\n", "        ", "super", "(", "BasicUnit", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "rnnunit_map", "=", "{", "'rnn'", ":", "nn", ".", "RNN", ",", "'lstm'", ":", "nn", ".", "LSTM", ",", "'gru'", ":", "nn", ".", "GRU", "}", "\n", "\n", "self", ".", "unit", "=", "unit", "\n", "\n", "self", ".", "layer", "=", "rnnunit_map", "[", "unit", "]", "(", "input_dim", ",", "increase_rate", ",", "1", ")", "\n", "\n", "if", "'lstm'", "==", "self", ".", "unit", ":", "\n", "            ", "utils", ".", "init_lstm", "(", "self", ".", "layer", ")", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.densenet.Bottleneck.forward": [[24, 37], ["densenet.Bottleneck.bn1", "densenet.Bottleneck.relu", "densenet.Bottleneck.conv1", "densenet.Bottleneck.bn2", "densenet.Bottleneck.relu", "densenet.Bottleneck.conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.dropout", "torch.dropout", "torch.dropout"], "methods", ["None"], ["\n", "", "self", ".", "droprate", "=", "droprate", "\n", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "increase_rate", "=", "increase_rate", "\n", "self", ".", "output_dim", "=", "input_dim", "+", "increase_rate", "\n", "\n", "self", ".", "init_hidden", "(", ")", "\n", "\n", "", "def", "init_hidden", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "hidden_state", "=", "None", "\n", "\n", "", "def", "rand_ini", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.densenet.BasicBlock.__init__": [[40, 48], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.__init__"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "if", "self", ".", "droprate", ">", "0", ":", "\n", "            ", "new_x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "droprate", ",", "training", "=", "self", ".", "training", ")", "\n", "", "else", ":", "\n", "            ", "new_x", "=", "x", "\n", "\n", "", "out", ",", "new_hidden", "=", "self", ".", "layer", "(", "new_x", ",", "self", ".", "hidden_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.densenet.BasicBlock.forward": [[49, 59], ["densenet.BasicBlock.bn1", "densenet.BasicBlock.relu", "densenet.BasicBlock.conv1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.dropout", "torch.dropout", "torch.dropout"], "methods", ["None"], ["self", ".", "hidden_state", "=", "utils", ".", "repackage_hidden", "(", "new_hidden", ")", "\n", "\n", "out", "=", "out", ".", "contiguous", "(", ")", "\n", "\n", "return", "torch", ".", "cat", "(", "[", "x", ",", "out", "]", ",", "2", ")", "\n", "\n", "", "", "class", "DenseRNN", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "layer_num", ",", "unit", ",", "emb_dim", ",", "hid_dim", ",", "droprate", ")", ":", "\n", "        ", "super", "(", "DenseRNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "layer_list", "=", "[", "BasicUnit", "(", "unit", ",", "emb_dim", "+", "i", "*", "hid_dim", ",", "hid_dim", ",", "droprate", ")", "for", "i", "in", "range", "(", "layer_num", ")", "]", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.densenet.Transition.__init__": [[62, 68], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.__init__"], ["\n", "self", ".", "init_hidden", "(", ")", "\n", "\n", "", "def", "init_hidden", "(", "self", ")", ":", "\n", "\n", "        ", "for", "tup", "in", "self", ".", "layer_list", ":", "\n", "            ", "tup", ".", "init_hidden", "(", ")", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.densenet.Transition.forward": [[69, 75], ["densenet.Transition.bn1", "densenet.Transition.relu", "densenet.Transition.conv1", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d"], "methods", ["None"], ["\n", "", "", "def", "rand_ini", "(", "self", ")", ":", "\n", "\n", "        ", "for", "tup", "in", "self", ".", "layer_list", ":", "\n", "            ", "tup", ".", "rand_ini", "(", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.densenet.DenseNet.__init__": [[79, 112], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "densenet.DenseNet._make_denseblock", "densenet.DenseNet._make_transition", "densenet.DenseNet._make_denseblock", "densenet.DenseNet._make_transition", "densenet.DenseNet._make_denseblock", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "densenet.DenseNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.__init__", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.densenet.DenseNet._make_denseblock", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.densenet.DenseNet._make_transition", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.densenet.DenseNet._make_denseblock", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.densenet.DenseNet._make_transition", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.densenet.DenseNet._make_denseblock"], []], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.densenet.DenseNet._make_denseblock": [[113, 121], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.logger.Logger.append", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.resnext.CifarResNeXt.block"], []], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.densenet.DenseNet._make_transition": [[122, 127], ["int", "densenet.Transition", "math.floor"], "methods", ["None"], []], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.densenet.DenseNet.forward": [[129, 143], ["densenet.DenseNet.conv1", "densenet.DenseNet.trans1", "densenet.DenseNet.trans2", "densenet.DenseNet.dense3", "densenet.DenseNet.bn", "densenet.DenseNet.relu", "densenet.DenseNet.avgpool", "densenet.DenseNet.view", "densenet.DenseNet.fc", "densenet.DenseNet.dense1", "densenet.DenseNet.dense2", "densenet.DenseNet.size"], "methods", ["None"], []], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.densenet.densenet": [[145, 150], ["densenet.DenseNet"], "function", ["None"], []], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.preresnet.BasicBlock.__init__": [[25, 34], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.ReLU", "preresnet.conv3x3", "torch.BatchNorm2d", "preresnet.conv3x3"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.__init__", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.preresnet.conv3x3", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.preresnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.preresnet.BasicBlock.forward": [[35, 52], ["preresnet.BasicBlock.bn1", "preresnet.BasicBlock.relu", "preresnet.BasicBlock.conv1", "preresnet.BasicBlock.bn2", "preresnet.BasicBlock.relu", "preresnet.BasicBlock.conv2", "preresnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "bn1", "(", "x", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.preresnet.Bottleneck.__init__": [[57, 69], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "inplanes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.preresnet.Bottleneck.forward": [[70, 91], ["preresnet.Bottleneck.bn1", "preresnet.Bottleneck.relu", "preresnet.Bottleneck.conv1", "preresnet.Bottleneck.bn2", "preresnet.Bottleneck.relu", "preresnet.Bottleneck.conv2", "preresnet.Bottleneck.bn3", "preresnet.Bottleneck.relu", "preresnet.Bottleneck.conv3", "preresnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "bn1", "(", "x", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.preresnet.PreResNet.__init__": [[95, 127], ["torch.Module.__init__", "torch.Conv2d", "preresnet.PreResNet._make_layer", "preresnet.PreResNet._make_layer", "preresnet.PreResNet._make_layer", "torch.BatchNorm2d", "torch.ReLU", "torch.AvgPool2d", "torch.Linear", "preresnet.PreResNet.modules", "block_name.lower", "isinstance", "block_name.lower", "ValueError", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.__init__", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.imagenet.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.imagenet.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.imagenet.resnext.ResNeXt._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "num_classes", "=", "1000", ",", "block_name", "=", "'BasicBlock'", ")", ":", "\n", "        ", "super", "(", "PreResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Model type specifies number of layers for CIFAR-10 model", "\n", "if", "block_name", ".", "lower", "(", ")", "==", "'basicblock'", ":", "\n", "            ", "assert", "(", "depth", "-", "2", ")", "%", "6", "==", "0", ",", "'When use basicblock, depth should be 6n+2, e.g. 20, 32, 44, 56, 110, 1202'", "\n", "n", "=", "(", "depth", "-", "2", ")", "//", "6", "\n", "block", "=", "BasicBlock", "\n", "", "elif", "block_name", ".", "lower", "(", ")", "==", "'bottleneck'", ":", "\n", "            ", "assert", "(", "depth", "-", "2", ")", "%", "9", "==", "0", ",", "'When use bottleneck, depth should be 9n+2, e.g. 20, 29, 47, 56, 110, 1199'", "\n", "n", "=", "(", "depth", "-", "2", ")", "//", "9", "\n", "block", "=", "Bottleneck", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'block_name shoule be Basicblock or Bottleneck'", ")", "\n", "\n", "", "self", ".", "inplanes", "=", "16", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "n", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "n", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "n", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "64", "*", "block", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "64", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.preresnet.PreResNet._make_layer": [[128, 143], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "block"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.logger.Logger.append", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.resnext.CifarResNeXt.block", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.logger.Logger.append", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.resnext.CifarResNeXt.block"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.preresnet.PreResNet.forward": [[144, 158], ["preresnet.PreResNet.conv1", "preresnet.PreResNet.layer1", "preresnet.PreResNet.layer2", "preresnet.PreResNet.layer3", "preresnet.PreResNet.bn", "preresnet.PreResNet.relu", "preresnet.PreResNet.avgpool", "preresnet.PreResNet.view", "preresnet.PreResNet.fc", "preresnet.PreResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "# 32x32", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "# 16x16", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "# 8x8", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.preresnet.conv3x3": [[16, 20], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.preresnet.preresnet": [[160, 165], ["preresnet.PreResNet"], "function", ["None"], ["", "", "def", "preresnet", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Constructs a ResNet model.\n    \"\"\"", "\n", "return", "PreResNet", "(", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.alexnet.AlexNet.__init__": [[13, 31], ["torch.Module.__init__", "torch.Sequential", "torch.Linear", "torch.Conv2d", "torch.ReLU", "torch.MaxPool2d", "torch.Conv2d", "torch.ReLU", "torch.MaxPool2d", "torch.Conv2d", "torch.ReLU", "torch.Conv2d", "torch.ReLU", "torch.Conv2d", "torch.ReLU", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "AlexNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "11", ",", "stride", "=", "4", ",", "padding", "=", "5", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "192", ",", "kernel_size", "=", "5", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "192", ",", "384", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "384", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "256", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.alexnet.AlexNet.forward": [[32, 37], ["alexnet.AlexNet.features", "alexnet.AlexNet.view", "alexnet.AlexNet.classifier", "alexnet.AlexNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.alexnet.alexnet": [[39, 45], ["alexnet.AlexNet"], "function", ["None"], ["", "", "def", "alexnet", "(", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"AlexNet model architecture from the\n    `\"One weird trick...\" <https://arxiv.org/abs/1404.5997>`_ paper.\n    \"\"\"", "\n", "model", "=", "AlexNet", "(", "**", "kwargs", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.resnext.ResNeXtBottleneck.__init__": [[19, 41], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "resnext.ResNeXtBottleneck.shortcut.add_module", "resnext.ResNeXtBottleneck.shortcut.add_module", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "stride", ",", "cardinality", ",", "widen_factor", ")", ":", "\n", "        ", "\"\"\" Constructor\n        Args:\n            in_channels: input channel dimensionality\n            out_channels: output channel dimensionality\n            stride: conv stride. Replaces pooling layer.\n            cardinality: num of convolution groups.\n            widen_factor: factor to reduce the input dimensionality before convolution.\n        \"\"\"", "\n", "super", "(", "ResNeXtBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "D", "=", "cardinality", "*", "out_channels", "//", "widen_factor", "\n", "self", ".", "conv_reduce", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "D", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn_reduce", "=", "nn", ".", "BatchNorm2d", "(", "D", ")", "\n", "self", ".", "conv_conv", "=", "nn", ".", "Conv2d", "(", "D", ",", "D", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "cardinality", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "D", ")", "\n", "self", ".", "conv_expand", "=", "nn", ".", "Conv2d", "(", "D", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn_expand", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "in_channels", "!=", "out_channels", ":", "\n", "            ", "self", ".", "shortcut", ".", "add_module", "(", "'shortcut_conv'", ",", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "shortcut", ".", "add_module", "(", "'shortcut_bn'", ",", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.resnext.ResNeXtBottleneck.forward": [[42, 51], ["resnext.ResNeXtBottleneck.conv_reduce.forward", "torch.relu", "torch.relu", "resnext.ResNeXtBottleneck.conv_conv.forward", "torch.relu", "torch.relu", "resnext.ResNeXtBottleneck.conv_expand.forward", "resnext.ResNeXtBottleneck.bn_expand.forward", "resnext.ResNeXtBottleneck.shortcut.forward", "torch.relu", "torch.relu", "resnext.ResNeXtBottleneck.bn_reduce.forward", "resnext.ResNeXtBottleneck.bn.forward"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.imagenet.resnext.ResNeXt.forward", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.imagenet.resnext.ResNeXt.forward", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.imagenet.resnext.ResNeXt.forward", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.imagenet.resnext.ResNeXt.forward", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.imagenet.resnext.ResNeXt.forward", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.imagenet.resnext.ResNeXt.forward", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.imagenet.resnext.ResNeXt.forward"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "bottleneck", "=", "self", ".", "conv_reduce", ".", "forward", "(", "x", ")", "\n", "bottleneck", "=", "F", ".", "relu", "(", "self", ".", "bn_reduce", ".", "forward", "(", "bottleneck", ")", ",", "inplace", "=", "True", ")", "\n", "bottleneck", "=", "self", ".", "conv_conv", ".", "forward", "(", "bottleneck", ")", "\n", "bottleneck", "=", "F", ".", "relu", "(", "self", ".", "bn", ".", "forward", "(", "bottleneck", ")", ",", "inplace", "=", "True", ")", "\n", "bottleneck", "=", "self", ".", "conv_expand", ".", "forward", "(", "bottleneck", ")", "\n", "bottleneck", "=", "self", ".", "bn_expand", ".", "forward", "(", "bottleneck", ")", "\n", "residual", "=", "self", ".", "shortcut", ".", "forward", "(", "x", ")", "\n", "return", "F", ".", "relu", "(", "residual", "+", "bottleneck", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.resnext.CifarResNeXt.__init__": [[58, 91], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnext.CifarResNeXt.block", "resnext.CifarResNeXt.block", "resnext.CifarResNeXt.block", "torch.Linear", "torch.Linear", "torch.nn.init.kaiming_normal", "torch.nn.init.kaiming_normal", "resnext.CifarResNeXt.state_dict", "key.split", "torch.nn.init.kaiming_normal", "torch.nn.init.kaiming_normal", "key.split", "resnext.CifarResNeXt.state_dict", "resnext.CifarResNeXt.state_dict", "resnext.CifarResNeXt.state_dict"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.__init__", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.resnext.CifarResNeXt.block", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.resnext.CifarResNeXt.block", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.resnext.CifarResNeXt.block"], ["def", "__init__", "(", "self", ",", "cardinality", ",", "depth", ",", "num_classes", ",", "widen_factor", "=", "4", ",", "dropRate", "=", "0", ")", ":", "\n", "        ", "\"\"\" Constructor\n        Args:\n            cardinality: number of convolution groups.\n            depth: number of layers.\n            num_classes: number of classes\n            widen_factor: factor to adjust the channel dimensionality\n        \"\"\"", "\n", "super", "(", "CifarResNeXt", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cardinality", "=", "cardinality", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "block_depth", "=", "(", "self", ".", "depth", "-", "2", ")", "//", "9", "\n", "self", ".", "widen_factor", "=", "widen_factor", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "output_size", "=", "64", "\n", "self", ".", "stages", "=", "[", "64", ",", "64", "*", "self", ".", "widen_factor", ",", "128", "*", "self", ".", "widen_factor", ",", "256", "*", "self", ".", "widen_factor", "]", "\n", "\n", "self", ".", "conv_1_3x3", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn_1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "stage_1", "=", "self", ".", "block", "(", "'stage_1'", ",", "self", ".", "stages", "[", "0", "]", ",", "self", ".", "stages", "[", "1", "]", ",", "1", ")", "\n", "self", ".", "stage_2", "=", "self", ".", "block", "(", "'stage_2'", ",", "self", ".", "stages", "[", "1", "]", ",", "self", ".", "stages", "[", "2", "]", ",", "2", ")", "\n", "self", ".", "stage_3", "=", "self", ".", "block", "(", "'stage_3'", ",", "self", ".", "stages", "[", "2", "]", ",", "self", ".", "stages", "[", "3", "]", ",", "2", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "1024", ",", "num_classes", ")", "\n", "init", ".", "kaiming_normal", "(", "self", ".", "classifier", ".", "weight", ")", "\n", "\n", "for", "key", "in", "self", ".", "state_dict", "(", ")", ":", "\n", "            ", "if", "key", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "==", "'weight'", ":", "\n", "                ", "if", "'conv'", "in", "key", ":", "\n", "                    ", "init", ".", "kaiming_normal", "(", "self", ".", "state_dict", "(", ")", "[", "key", "]", ",", "mode", "=", "'fan_out'", ")", "\n", "", "if", "'bn'", "in", "key", ":", "\n", "                    ", "self", ".", "state_dict", "(", ")", "[", "key", "]", "[", "...", "]", "=", "1", "\n", "", "", "elif", "key", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "==", "'bias'", ":", "\n", "                ", "self", ".", "state_dict", "(", ")", "[", "key", "]", "[", "...", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.resnext.CifarResNeXt.block": [[92, 111], ["torch.Sequential", "torch.Sequential", "range", "torch.Sequential.add_module", "torch.Sequential.add_module", "resnext.ResNeXtBottleneck", "resnext.ResNeXtBottleneck"], "methods", ["None"], ["", "", "", "def", "block", "(", "self", ",", "name", ",", "in_channels", ",", "out_channels", ",", "pool_stride", "=", "2", ")", ":", "\n", "        ", "\"\"\" Stack n bottleneck modules where n is inferred from the depth of the network.\n        Args:\n            name: string name of the current block.\n            in_channels: number of input channels\n            out_channels: number of output channels\n            pool_stride: factor to reduce the spatial dimensionality in the first bottleneck of the block.\n        Returns: a Module consisting of n sequential bottlenecks.\n        \"\"\"", "\n", "block", "=", "nn", ".", "Sequential", "(", ")", "\n", "for", "bottleneck", "in", "range", "(", "self", ".", "block_depth", ")", ":", "\n", "            ", "name_", "=", "'%s_bottleneck_%d'", "%", "(", "name", ",", "bottleneck", ")", "\n", "if", "bottleneck", "==", "0", ":", "\n", "                ", "block", ".", "add_module", "(", "name_", ",", "ResNeXtBottleneck", "(", "in_channels", ",", "out_channels", ",", "pool_stride", ",", "self", ".", "cardinality", ",", "\n", "self", ".", "widen_factor", ")", ")", "\n", "", "else", ":", "\n", "                ", "block", ".", "add_module", "(", "name_", ",", "\n", "ResNeXtBottleneck", "(", "out_channels", ",", "out_channels", ",", "1", ",", "self", ".", "cardinality", ",", "self", ".", "widen_factor", ")", ")", "\n", "", "", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.resnext.CifarResNeXt.forward": [[112, 121], ["resnext.CifarResNeXt.conv_1_3x3.forward", "torch.relu", "torch.relu", "resnext.CifarResNeXt.stage_1.forward", "resnext.CifarResNeXt.stage_2.forward", "resnext.CifarResNeXt.stage_3.forward", "torch.avg_pool2d", "torch.avg_pool2d", "x.view.view.view", "resnext.CifarResNeXt.classifier", "resnext.CifarResNeXt.bn_1.forward"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.imagenet.resnext.ResNeXt.forward", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.imagenet.resnext.ResNeXt.forward", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.imagenet.resnext.ResNeXt.forward", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.imagenet.resnext.ResNeXt.forward", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.imagenet.resnext.ResNeXt.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv_1_3x3", ".", "forward", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn_1", ".", "forward", "(", "x", ")", ",", "inplace", "=", "True", ")", "\n", "x", "=", "self", ".", "stage_1", ".", "forward", "(", "x", ")", "\n", "x", "=", "self", ".", "stage_2", ".", "forward", "(", "x", ")", "\n", "x", "=", "self", ".", "stage_3", ".", "forward", "(", "x", ")", "\n", "x", "=", "F", ".", "avg_pool2d", "(", "x", ",", "8", ",", "1", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "1024", ")", "\n", "return", "self", ".", "classifier", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.resnext.resnext": [[122, 127], ["resnext.CifarResNeXt"], "function", ["None"], ["", "", "def", "resnext", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNeXt.\n    \"\"\"", "\n", "model", "=", "CifarResNeXt", "(", "**", "kwargs", ")", "\n", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.wrn.BasicBlock.__init__": [[9, 23], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "droprate", "=", "dropRate", "\n", "self", ".", "equalInOut", "=", "(", "in_planes", "==", "out_planes", ")", "\n", "self", ".", "convShortcut", "=", "(", "not", "self", ".", "equalInOut", ")", "and", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "bias", "=", "False", ")", "or", "None", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.wrn.BasicBlock.forward": [[23, 33], ["wrn.BasicBlock.relu2", "wrn.BasicBlock.conv2", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "wrn.BasicBlock.relu1", "wrn.BasicBlock.relu1", "wrn.BasicBlock.bn2", "torch.dropout", "torch.dropout", "torch.dropout", "wrn.BasicBlock.bn1", "wrn.BasicBlock.bn1", "wrn.BasicBlock.conv1", "wrn.BasicBlock.convShortcut"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "equalInOut", ":", "\n", "            ", "x", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "out", "=", "self", ".", "relu2", "(", "self", ".", "bn2", "(", "self", ".", "conv1", "(", "out", "if", "self", ".", "equalInOut", "else", "x", ")", ")", ")", "\n", "if", "self", ".", "droprate", ">", "0", ":", "\n", "            ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "droprate", ",", "training", "=", "self", ".", "training", ")", "\n", "", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "return", "torch", ".", "add", "(", "x", "if", "self", ".", "equalInOut", "else", "self", ".", "convShortcut", "(", "x", ")", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.wrn.NetworkBlock.__init__": [[35, 38], ["torch.Module.__init__", "wrn.NetworkBlock._make_layer"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.__init__", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.imagenet.resnext.ResNeXt._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "nb_layers", ",", "in_planes", ",", "out_planes", ",", "block", ",", "stride", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "NetworkBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer", "=", "self", ".", "_make_layer", "(", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", "\n", "", "def", "_make_layer", "(", "self", ",", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", ":", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.wrn.NetworkBlock._make_layer": [[38, 43], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.logger.Logger.append", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.resnext.CifarResNeXt.block"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nb_layers", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "i", "==", "0", "and", "in_planes", "or", "out_planes", ",", "out_planes", ",", "i", "==", "0", "and", "stride", "or", "1", ",", "dropRate", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.wrn.NetworkBlock.forward": [[43, 45], ["wrn.NetworkBlock.layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "layer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.wrn.WideResNet.__init__": [[47, 77], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "wrn.NetworkBlock", "wrn.NetworkBlock", "wrn.NetworkBlock", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "wrn.WideResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "num_classes", ",", "widen_factor", "=", "1", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "WideResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nChannels", "=", "[", "16", ",", "16", "*", "widen_factor", ",", "32", "*", "widen_factor", ",", "64", "*", "widen_factor", "]", "\n", "assert", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ",", "'depth should be 6n+4'", "\n", "n", "=", "(", "depth", "-", "4", ")", "//", "6", "\n", "block", "=", "BasicBlock", "\n", "# 1st conv before any network block", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "nChannels", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "# 1st block", "\n", "self", ".", "block1", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "0", "]", ",", "nChannels", "[", "1", "]", ",", "block", ",", "1", ",", "dropRate", ")", "\n", "# 2nd block", "\n", "self", ".", "block2", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "1", "]", ",", "nChannels", "[", "2", "]", ",", "block", ",", "2", ",", "dropRate", ")", "\n", "# 3rd block", "\n", "self", ".", "block3", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "2", "]", ",", "nChannels", "[", "3", "]", ",", "block", ",", "2", ",", "dropRate", ")", "\n", "# global average pooling and classifier", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nChannels", "[", "3", "]", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "nChannels", "[", "3", "]", ",", "num_classes", ")", "\n", "self", ".", "nChannels", "=", "nChannels", "[", "3", "]", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.wrn.WideResNet.forward": [[78, 87], ["wrn.WideResNet.conv1", "wrn.WideResNet.block1", "wrn.WideResNet.block2", "wrn.WideResNet.block3", "wrn.WideResNet.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "out.view.view.view", "wrn.WideResNet.fc", "wrn.WideResNet.bn1"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "block1", "(", "out", ")", "\n", "out", "=", "self", ".", "block2", "(", "out", ")", "\n", "out", "=", "self", ".", "block3", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "self", ".", "nChannels", ")", "\n", "return", "self", ".", "fc", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.wrn.wrn": [[88, 94], ["wrn.WideResNet"], "function", ["None"], ["", "", "def", "wrn", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Constructs a Wide Residual Networks.\n    \"\"\"", "\n", "model", "=", "WideResNet", "(", "**", "kwargs", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.imagenet.resnext.Bottleneck.__init__": [[23, 46], ["torch.Module.__init__", "int", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "math.floor"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.__init__"], ["\n", "super", "(", "ResNeXtBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "D", "=", "cardinality", "*", "out_channels", "//", "widen_factor", "\n", "self", ".", "conv_reduce", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "D", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn_reduce", "=", "nn", ".", "BatchNorm2d", "(", "D", ")", "\n", "self", ".", "conv_conv", "=", "nn", ".", "Conv2d", "(", "D", ",", "D", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "cardinality", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "D", ")", "\n", "self", ".", "conv_expand", "=", "nn", ".", "Conv2d", "(", "D", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn_expand", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "in_channels", "!=", "out_channels", ":", "\n", "            ", "self", ".", "shortcut", ".", "add_module", "(", "'shortcut_conv'", ",", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "shortcut", ".", "add_module", "(", "'shortcut_bn'", ",", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "bottleneck", "=", "self", ".", "conv_reduce", ".", "forward", "(", "x", ")", "\n", "bottleneck", "=", "F", ".", "relu", "(", "self", ".", "bn_reduce", ".", "forward", "(", "bottleneck", ")", ",", "inplace", "=", "True", ")", "\n", "bottleneck", "=", "self", ".", "conv_conv", ".", "forward", "(", "bottleneck", ")", "\n", "bottleneck", "=", "F", ".", "relu", "(", "self", ".", "bn", ".", "forward", "(", "bottleneck", ")", ",", "inplace", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.imagenet.resnext.Bottleneck.forward": [[47, 68], ["resnext.Bottleneck.conv1", "resnext.Bottleneck.bn1", "resnext.Bottleneck.relu", "resnext.Bottleneck.conv2", "resnext.Bottleneck.bn2", "resnext.Bottleneck.relu", "resnext.Bottleneck.conv3", "resnext.Bottleneck.bn3", "resnext.Bottleneck.relu", "resnext.Bottleneck.downsample"], "methods", ["None"], ["bottleneck", "=", "self", ".", "conv_expand", ".", "forward", "(", "bottleneck", ")", "\n", "bottleneck", "=", "self", ".", "bn_expand", ".", "forward", "(", "bottleneck", ")", "\n", "residual", "=", "self", ".", "shortcut", ".", "forward", "(", "x", ")", "\n", "return", "F", ".", "relu", "(", "residual", "+", "bottleneck", ",", "inplace", "=", "True", ")", "\n", "\n", "\n", "", "", "class", "CifarResNeXt", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"\n    ResNext optimized for the Cifar dataset, as specified in\n    https://arxiv.org/pdf/1611.05431.pdf\n    \"\"\"", "\n", "def", "__init__", "(", "self", ",", "cardinality", ",", "depth", ",", "num_classes", ",", "widen_factor", "=", "4", ",", "dropRate", "=", "0", ")", ":", "\n", "        ", "\"\"\" Constructor\n        Args:\n            cardinality: number of convolution groups.\n            depth: number of layers.\n            num_classes: number of classes\n            widen_factor: factor to adjust the channel dimensionality\n        \"\"\"", "\n", "super", "(", "CifarResNeXt", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cardinality", "=", "cardinality", "\n", "self", ".", "depth", "=", "depth", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.imagenet.resnext.ResNeXt.__init__": [[75, 110], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnext.ResNeXt._make_layer", "resnext.ResNeXt._make_layer", "resnext.ResNeXt._make_layer", "resnext.ResNeXt._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "resnext.ResNeXt.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.__init__", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.imagenet.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.imagenet.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.imagenet.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.imagenet.resnext.ResNeXt._make_layer"], ["self", ".", "conv_1_3x3", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn_1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "stage_1", "=", "self", ".", "block", "(", "'stage_1'", ",", "self", ".", "stages", "[", "0", "]", ",", "self", ".", "stages", "[", "1", "]", ",", "1", ")", "\n", "self", ".", "stage_2", "=", "self", ".", "block", "(", "'stage_2'", ",", "self", ".", "stages", "[", "1", "]", ",", "self", ".", "stages", "[", "2", "]", ",", "2", ")", "\n", "self", ".", "stage_3", "=", "self", ".", "block", "(", "'stage_3'", ",", "self", ".", "stages", "[", "2", "]", ",", "self", ".", "stages", "[", "3", "]", ",", "2", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "1024", ",", "num_classes", ")", "\n", "init", ".", "kaiming_normal", "(", "self", ".", "classifier", ".", "weight", ")", "\n", "\n", "for", "key", "in", "self", ".", "state_dict", "(", ")", ":", "\n", "            ", "if", "key", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "==", "'weight'", ":", "\n", "                ", "if", "'conv'", "in", "key", ":", "\n", "                    ", "init", ".", "kaiming_normal", "(", "self", ".", "state_dict", "(", ")", "[", "key", "]", ",", "mode", "=", "'fan_out'", ")", "\n", "", "if", "'bn'", "in", "key", ":", "\n", "                    ", "self", ".", "state_dict", "(", ")", "[", "key", "]", "[", "...", "]", "=", "1", "\n", "", "", "elif", "key", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "==", "'bias'", ":", "\n", "                ", "self", ".", "state_dict", "(", ")", "[", "key", "]", "[", "...", "]", "=", "0", "\n", "\n", "", "", "", "def", "block", "(", "self", ",", "name", ",", "in_channels", ",", "out_channels", ",", "pool_stride", "=", "2", ")", ":", "\n", "        ", "\"\"\" Stack n bottleneck modules where n is inferred from the depth of the network.\n        Args:\n            name: string name of the current block.\n            in_channels: number of input channels\n            out_channels: number of output channels\n            pool_stride: factor to reduce the spatial dimensionality in the first bottleneck of the block.\n        Returns: a Module consisting of n sequential bottlenecks.\n        \"\"\"", "\n", "block", "=", "nn", ".", "Sequential", "(", ")", "\n", "for", "bottleneck", "in", "range", "(", "self", ".", "block_depth", ")", ":", "\n", "            ", "name_", "=", "'%s_bottleneck_%d'", "%", "(", "name", ",", "bottleneck", ")", "\n", "if", "bottleneck", "==", "0", ":", "\n", "                ", "block", ".", "add_module", "(", "name_", ",", "ResNeXtBottleneck", "(", "in_channels", ",", "out_channels", ",", "pool_stride", ",", "self", ".", "cardinality", ",", "\n", "self", ".", "widen_factor", ")", ")", "\n", "", "else", ":", "\n", "                ", "block", ".", "add_module", "(", "name_", ",", "\n", "ResNeXtBottleneck", "(", "out_channels", ",", "out_channels", ",", "1", ",", "self", ".", "cardinality", ",", "self", ".", "widen_factor", ")", ")", "\n", "", "", "return", "block", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.imagenet.resnext.ResNeXt._make_layer": [[111, 135], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.logger.Logger.append", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.resnext.CifarResNeXt.block", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.logger.Logger.append", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.cifar.resnext.CifarResNeXt.block"], ["\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv_1_3x3", ".", "forward", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn_1", ".", "forward", "(", "x", ")", ",", "inplace", "=", "True", ")", "\n", "x", "=", "self", ".", "stage_1", ".", "forward", "(", "x", ")", "\n", "x", "=", "self", ".", "stage_2", ".", "forward", "(", "x", ")", "\n", "x", "=", "self", ".", "stage_3", ".", "forward", "(", "x", ")", "\n", "x", "=", "F", ".", "avg_pool2d", "(", "x", ",", "8", ",", "1", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "1024", ")", "\n", "return", "self", ".", "classifier", "(", "x", ")", "\n", "\n", "", "", "def", "resnext", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNeXt.\n    \"\"\"", "\n", "model", "=", "CifarResNeXt", "(", "**", "kwargs", ")", "\n", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.imagenet.resnext.ResNeXt.forward": [[136, 150], ["resnext.ResNeXt.conv1", "resnext.ResNeXt.bn1", "resnext.ResNeXt.relu", "resnext.ResNeXt.maxpool1", "resnext.ResNeXt.layer1", "resnext.ResNeXt.layer2", "resnext.ResNeXt.layer3", "resnext.ResNeXt.layer4", "resnext.ResNeXt.avgpool", "resnext.ResNeXt.view", "resnext.ResNeXt.fc", "resnext.ResNeXt.size"], "methods", ["None"], []], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.imagenet.resnext.resnext50": [[152, 158], ["resnext.ResNeXt"], "function", ["None"], []], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.imagenet.resnext.resnext101": [[160, 166], ["resnext.ResNeXt"], "function", ["None"], []], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.imagenet.resnext.resnext152": [[168, 174], ["resnext.ResNeXt"], "function", ["None"], []], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.nmt.average_checkpoints.average_checkpoints": [[16, 70], ["collections.OrderedDict", "len", "collections.OrderedDict", "collections.OrderedDict.items", "torch.load", "list", "averaged_params[].div_", "model_params.keys", "isinstance", "KeyError", "p.float.float", "p.float.clone", "torch.serialization.default_restore_location"], "function", ["None"], ["def", "average_checkpoints", "(", "inputs", ")", ":", "\n", "    ", "\"\"\"Loads checkpoints from inputs and returns a model with averaged weights.\n\n    Args:\n      inputs: An iterable of string paths of checkpoints to load from.\n\n    Returns:\n      A dict of string keys mapping to various values. The 'model' key\n      from the returned dict should correspond to an OrderedDict mapping\n      string parameter names to torch Tensors.\n    \"\"\"", "\n", "params_dict", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "params_keys", "=", "None", "\n", "new_state", "=", "None", "\n", "num_models", "=", "len", "(", "inputs", ")", "\n", "\n", "for", "f", "in", "inputs", ":", "\n", "        ", "state", "=", "torch", ".", "load", "(", "\n", "f", ",", "\n", "map_location", "=", "(", "\n", "lambda", "s", ",", "_", ":", "torch", ".", "serialization", ".", "default_restore_location", "(", "s", ",", "'cpu'", ")", "\n", ")", ",", "\n", ")", "\n", "# Copies over the settings from the first checkpoint", "\n", "if", "new_state", "is", "None", ":", "\n", "            ", "new_state", "=", "state", "\n", "\n", "", "model_params", "=", "state", "[", "'model'", "]", "\n", "\n", "model_params_keys", "=", "list", "(", "model_params", ".", "keys", "(", ")", ")", "\n", "if", "params_keys", "is", "None", ":", "\n", "            ", "params_keys", "=", "model_params_keys", "\n", "", "elif", "params_keys", "!=", "model_params_keys", ":", "\n", "            ", "raise", "KeyError", "(", "\n", "'For checkpoint {}, expected list of params: {}, '", "\n", "'but found: {}'", ".", "format", "(", "f", ",", "params_keys", ",", "model_params_keys", ")", "\n", ")", "\n", "\n", "", "for", "k", "in", "params_keys", ":", "\n", "            ", "p", "=", "model_params", "[", "k", "]", "\n", "if", "isinstance", "(", "p", ",", "torch", ".", "HalfTensor", ")", ":", "\n", "                ", "p", "=", "p", ".", "float", "(", ")", "\n", "", "if", "k", "not", "in", "params_dict", ":", "\n", "                ", "params_dict", "[", "k", "]", "=", "p", ".", "clone", "(", ")", "\n", "# NOTE: clone() is needed in case of p is a shared parameter", "\n", "", "else", ":", "\n", "                ", "params_dict", "[", "k", "]", "+=", "p", "\n", "\n", "", "", "", "averaged_params", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "params_dict", ".", "items", "(", ")", ":", "\n", "        ", "averaged_params", "[", "k", "]", "=", "v", "\n", "averaged_params", "[", "k", "]", ".", "div_", "(", "num_models", ")", "\n", "", "new_state", "[", "'model'", "]", "=", "averaged_params", "\n", "return", "new_state", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.nmt.average_checkpoints.last_n_checkpoints": [[72, 91], ["os.listdir", "len", "re.compile", "re.compile", "re.compile.fullmatch", "len", "Exception", "os.path.join", "int", "len", "pt_regexp.fullmatch.group", "entries.append", "sorted", "pt_regexp.fullmatch.group"], "function", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.utils.logger.Logger.append"], ["", "def", "last_n_checkpoints", "(", "paths", ",", "n", ",", "update_based", ",", "upper_bound", "=", "None", ")", ":", "\n", "    ", "assert", "len", "(", "paths", ")", "==", "1", "\n", "path", "=", "paths", "[", "0", "]", "\n", "if", "update_based", ":", "\n", "        ", "pt_regexp", "=", "re", ".", "compile", "(", "r'checkpoint_\\d+_(\\d+)\\.pt'", ")", "\n", "", "else", ":", "\n", "        ", "pt_regexp", "=", "re", ".", "compile", "(", "r'checkpoint(\\d+)\\.pt'", ")", "\n", "", "files", "=", "os", ".", "listdir", "(", "path", ")", "\n", "\n", "entries", "=", "[", "]", "\n", "for", "f", "in", "files", ":", "\n", "        ", "m", "=", "pt_regexp", ".", "fullmatch", "(", "f", ")", "\n", "if", "m", "is", "not", "None", ":", "\n", "            ", "sort_key", "=", "int", "(", "m", ".", "group", "(", "1", ")", ")", "\n", "if", "upper_bound", "is", "None", "or", "sort_key", "<=", "upper_bound", ":", "\n", "                ", "entries", ".", "append", "(", "(", "sort_key", ",", "m", ".", "group", "(", "0", ")", ")", ")", "\n", "", "", "", "if", "len", "(", "entries", ")", "<", "n", ":", "\n", "        ", "raise", "Exception", "(", "'Found {} checkpoint files but need at least {}'", ",", "len", "(", "entries", ")", ",", "n", ")", "\n", "", "return", "[", "os", ".", "path", ".", "join", "(", "path", ",", "x", "[", "1", "]", ")", "for", "x", "in", "sorted", "(", "entries", ",", "reverse", "=", "True", ")", "[", ":", "n", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.nmt.average_checkpoints.main": [[93, 139], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_mutually_exclusive_group", "parser.add_mutually_exclusive_group.add_argument", "parser.add_mutually_exclusive_group.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "average_checkpoints.average_checkpoints", "torch.save", "print", "average_checkpoints.last_n_checkpoints", "print"], "function", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.nmt.average_checkpoints.average_checkpoints", "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.nmt.average_checkpoints.last_n_checkpoints"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'Tool to average the params of input checkpoints to '", "\n", "'produce a new checkpoint'", ",", "\n", ")", "\n", "# fmt: off", "\n", "parser", ".", "add_argument", "(", "'--inputs'", ",", "required", "=", "True", ",", "nargs", "=", "'+'", ",", "\n", "help", "=", "'Input checkpoint file paths.'", ")", "\n", "parser", ".", "add_argument", "(", "'--output'", ",", "required", "=", "True", ",", "metavar", "=", "'FILE'", ",", "\n", "help", "=", "'Write the new checkpoint containing the averaged weights to this path.'", ")", "\n", "num_group", "=", "parser", ".", "add_mutually_exclusive_group", "(", ")", "\n", "num_group", ".", "add_argument", "(", "'--num-epoch-checkpoints'", ",", "type", "=", "int", ",", "\n", "help", "=", "'if set, will try to find checkpoints with names checkpoint_xx.pt in the path specified by input, '", "\n", "'and average last this many of them.'", ")", "\n", "num_group", ".", "add_argument", "(", "'--num-update-checkpoints'", ",", "type", "=", "int", ",", "\n", "help", "=", "'if set, will try to find checkpoints with names checkpoint_ee_xx.pt in the path specified by input, '", "\n", "'and average last this many of them.'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint-upper-bound'", ",", "type", "=", "int", ",", "\n", "help", "=", "'when using --num-epoch-checkpoints, this will set an upper bound on which checkpoint to use, '", "\n", "'e.g., with --num-epoch-checkpoints=10 --checkpoint-upper-bound=50, checkpoints 41-50 would be averaged.'", ")", "\n", "# fmt: on", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "print", "(", "args", ")", "\n", "\n", "num", "=", "None", "\n", "is_update_based", "=", "False", "\n", "if", "args", ".", "num_update_checkpoints", "is", "not", "None", ":", "\n", "        ", "num", "=", "args", ".", "num_update_checkpoints", "\n", "is_update_based", "=", "True", "\n", "", "elif", "args", ".", "num_epoch_checkpoints", "is", "not", "None", ":", "\n", "        ", "num", "=", "args", ".", "num_epoch_checkpoints", "\n", "\n", "", "assert", "args", ".", "checkpoint_upper_bound", "is", "None", "or", "args", ".", "num_epoch_checkpoints", "is", "not", "None", ",", "'--checkpoint-upper-bound requires --num-epoch-checkpoints'", "\n", "assert", "args", ".", "num_epoch_checkpoints", "is", "None", "or", "args", ".", "num_update_checkpoints", "is", "None", ",", "'Cannot combine --num-epoch-checkpoints and --num-update-checkpoints'", "\n", "\n", "if", "num", "is", "not", "None", ":", "\n", "        ", "args", ".", "inputs", "=", "last_n_checkpoints", "(", "\n", "args", ".", "inputs", ",", "num", ",", "is_update_based", ",", "upper_bound", "=", "args", ".", "checkpoint_upper_bound", ",", "\n", ")", "\n", "print", "(", "'averaging checkpoints: '", ",", "args", ".", "inputs", ")", "\n", "\n", "", "new_state", "=", "average_checkpoints", "(", "args", ".", "inputs", ")", "\n", "torch", ".", "save", "(", "new_state", ",", "args", ".", "output", ")", "\n", "print", "(", "'Finished writing averaged checkpoint to {}.'", ".", "format", "(", "args", ".", "output", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.poly_schedule.PolySchedule.__init__": [[31, 48], ["fairseq.optim.lr_scheduler.FairseqLRScheduler.__init__", "poly_schedule.PolySchedule.optimizer.set_lr", "len", "ValueError"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.__init__"], ["def", "__init__", "(", "self", ",", "args", ",", "optimizer", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "optimizer", ")", "\n", "if", "len", "(", "args", ".", "lr", ")", ">", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Cannot use a fixed learning rate schedule with inverse_sqrt.'", "\n", "' Consider --lr-scheduler=fixed instead.'", "\n", ")", "\n", "\n", "# then, decay prop. to the inverse square root of the update number", "\n", "# self.warmup_end_lr = warmup_end_lr * args.warmup_updates**0.5", "\n", "", "self", ".", "min_lr", "=", "args", ".", "min_lr", "\n", "\n", "# initial learning rate", "\n", "self", ".", "lr", "=", "args", ".", "lr", "[", "0", "]", "\n", "self", ".", "optimizer", ".", "set_lr", "(", "self", ".", "lr", ")", "\n", "\n", "self", ".", "max_update", "=", "args", ".", "max_update", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.poly_schedule.PolySchedule.add_args": [[49, 55], ["parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add arguments to the parser for this LR scheduler.\"\"\"", "\n", "# fmt: off", "\n", "parser", ".", "add_argument", "(", "'--poly-pow'", ",", "default", "=", "2", ",", "type", "=", "float", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'ploy power'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.poly_schedule.PolySchedule.step": [[56, 61], ["super().step", "poly_schedule.PolySchedule.optimizer.get_lr"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.step"], ["", "def", "step", "(", "self", ",", "epoch", ",", "val_loss", "=", "None", ")", ":", "\n", "        ", "\"\"\"Update the learning rate at the end of the given epoch.\"\"\"", "\n", "super", "(", ")", ".", "step", "(", "epoch", ",", "val_loss", ")", "\n", "# we don't change the learning rate at epoch boundaries", "\n", "return", "self", ".", "optimizer", ".", "get_lr", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.poly_schedule.PolySchedule.step_update": [[62, 67], ["poly_schedule.PolySchedule.optimizer.set_lr"], "methods", ["None"], ["", "def", "step_update", "(", "self", ",", "num_updates", ")", ":", "\n", "        ", "\"\"\"Update the learning rate after each update.\"\"\"", "\n", "self", ".", "lr", "=", "(", "self", ".", "args", ".", "lr", "[", "0", "]", "-", "self", ".", "min_lr", ")", "*", "(", "1", "-", "num_updates", "/", "self", ".", "max_update", ")", "**", "self", ".", "args", ".", "poly_pow", "+", "self", ".", "min_lr", "\n", "self", ".", "optimizer", ".", "set_lr", "(", "self", ".", "lr", ")", "\n", "return", "self", ".", "lr", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.adam2.FairseqAdam2.__init__": [[25, 30], ["fairseq.optim.FairseqOptimizer.__init__", "adam2.Adam2"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "params", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "params", ")", "\n", "\n", "self", ".", "_optimizer", "=", "Adam2", "(", "params", ",", "**", "self", ".", "optimizer_config", ")", "\n", "self", ".", "_optimizer", ".", "name", "=", "args", ".", "tb_tag", "+", "'_'", "+", "self", ".", "_optimizer", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.adam2.FairseqAdam2.add_args": [[31, 46], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add optimizer-specific arguments to the parser.\"\"\"", "\n", "# fmt: off", "\n", "parser", ".", "add_argument", "(", "'--adam-betas'", ",", "default", "=", "'(0.9, 0.999)'", ",", "metavar", "=", "'B'", ",", "\n", "help", "=", "'betas for Adam optimizer'", ")", "\n", "parser", ".", "add_argument", "(", "'--adam-eps'", ",", "type", "=", "float", ",", "default", "=", "1e-8", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'epsilon for Adam optimizer'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight-decay'", ",", "'--wd'", ",", "default", "=", "0.0", ",", "type", "=", "float", ",", "metavar", "=", "'WD'", ",", "\n", "help", "=", "'weight decay'", ")", "\n", "parser", ".", "add_argument", "(", "'--tb-tag'", ",", "default", "=", "\"\"", ",", "type", "=", "str", ",", "\n", "help", "=", "'tb tag'", ")", "\n", "parser", ".", "add_argument", "(", "'--amsgrad'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--adam-freeze'", ",", "default", "=", "5000", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--adam-no-correction1'", ",", "action", "=", "'store_true'", ")", "\n", "# fmt: on", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.adam2.FairseqAdam2.optimizer_config": [[48, 64], ["eval"], "methods", ["None"], ["", "@", "property", "\n", "def", "optimizer_config", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return a kwarg dictionary that will be used to override optimizer\n        args stored in checkpoints. This allows us to load a checkpoint and\n        resume training using a different set of optimizer args, e.g., with a\n        different learning rate.\n        \"\"\"", "\n", "return", "{", "\n", "'lr'", ":", "self", ".", "args", ".", "lr", "[", "0", "]", ",", "\n", "'betas'", ":", "eval", "(", "self", ".", "args", ".", "adam_betas", ")", ",", "\n", "'eps'", ":", "self", ".", "args", ".", "adam_eps", ",", "\n", "'weight_decay'", ":", "self", ".", "args", ".", "weight_decay", ",", "\n", "'amsgrad'", ":", "self", ".", "args", ".", "amsgrad", ",", "\n", "'adam_freeze'", ":", "self", ".", "args", ".", "adam_freeze", ",", "\n", "'adam_no_correction1'", ":", "self", ".", "args", ".", "adam_no_correction1", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.adam2.Adam2.__init__": [[69, 75], ["dict", "super().__init__"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ",", "\n", "weight_decay", "=", "0", ",", "amsgrad", "=", "False", ",", "adam_freeze", "=", "5000", ",", "adam_no_correction1", "=", "False", ")", ":", "\n", "        ", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "\n", "weight_decay", "=", "weight_decay", ",", "amsgrad", "=", "amsgrad", ",", "adam_freeze", "=", "adam_freeze", ",", "adam_no_correction1", "=", "adam_no_correction1", ")", "\n", "self", ".", "name", "=", "'{}_{}_{}'", ".", "format", "(", "lr", ",", "betas", "[", "0", "]", ",", "betas", "[", "1", "]", ")", "\n", "super", "(", "Adam2", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.adam2.Adam2.supports_memory_efficient_fp16": [[76, 79], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "supports_memory_efficient_fp16", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.adam2.Adam2.step": [[80, 165], ["list", "list", "list", "closure", "p.grad.data.float", "p.data.float", "exp_avg_sq.mul_().addcmul_", "exp_avg_sq.sqrt().add_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "state[].type_as", "state[].type_as", "exp_avg.mul_().add_", "p.data.float.addcdiv_", "p.data.copy_", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "state[].type_as", "exp_avg_sq.mul_", "exp_avg_sq.sqrt", "p.data.float.add_", "exp_avg.mul_"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "global", "iter_idx", "\n", "iter_idx", "+=", "1", "\n", "grad_list", "=", "list", "(", ")", "\n", "mom_list", "=", "list", "(", ")", "\n", "mom_2rd_list", "=", "list", "(", ")", "\n", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "\n", "# if 'adam_1k' in self.name:", "\n", "#     writer_iter = iter_idx - group['adam_freeze']", "\n", "# else:", "\n", "#     writer_iter = iter_idx", "\n", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", ".", "float", "(", ")", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'Adam does not support sparse gradients, please consider SparseAdam instead'", ")", "\n", "", "amsgrad", "=", "group", "[", "'amsgrad'", "]", "\n", "\n", "p_data_fp32", "=", "p", ".", "data", ".", "float", "(", ")", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "if", "amsgrad", ":", "\n", "                        ", "state", "[", "'max_exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "", "", "else", ":", "\n", "                    ", "state", "[", "'exp_avg'", "]", "=", "state", "[", "'exp_avg'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "state", "[", "'exp_avg_sq'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "if", "amsgrad", ":", "\n", "                        ", "state", "[", "'max_exp_avg_sq'", "]", "=", "state", "[", "'max_exp_avg_sq'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "\n", "", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "if", "amsgrad", ":", "\n", "                    ", "max_exp_avg_sq", "=", "state", "[", "'max_exp_avg_sq'", "]", "\n", "", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "\n", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "\n", "if", "group", "[", "'adam_no_correction1'", "]", ":", "\n", "                    ", "bias_correction1", "=", "1", "\n", "", "else", ":", "\n", "                    ", "bias_correction1", "=", "(", "1", "-", "beta1", "**", "state", "[", "'step'", "]", ")", "\n", "\n", "", "bias_correction2", "=", "(", "1", "-", "beta2", "**", "state", "[", "'step'", "]", ")", "**", "0.5", "\n", "step_size", "=", "group", "[", "'lr'", "]", "*", "bias_correction2", "/", "bias_correction1", "\n", "\n", "\n", "if", "'adam_1k'", "not", "in", "self", ".", "name", "or", "state", "[", "'step'", "]", ">", "group", "[", "'adam_freeze'", "]", ":", "\n", "                    ", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                        ", "p_data_fp32", ".", "add_", "(", "-", "group", "[", "'weight_decay'", "]", "*", "group", "[", "'lr'", "]", ",", "p_data_fp32", ")", "\n", "", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "p_data_fp32", ".", "addcdiv_", "(", "-", "step_size", ",", "exp_avg", ",", "denom", ")", "\n", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "\n", "#         if writer_iter > 0 and writer_iter % 300 == 0 or writer_iter in [1, 5, 10, 25, 50, 75, 100, 150, 200]:", "\n", "#             grad_list.extend( grad.abs().add_(1e-9).log().view(-1).tolist()  )", "\n", "#             mom_list.extend( exp_avg.abs().add_(1e-9).log().view(-1).tolist() )", "\n", "#             mom_2rd_list.extend( exp_avg_sq.abs().add_(1e-9).log().view(-1).tolist() )", "\n", "\n", "# if writer_iter > 0 and writer_iter % 300 == 0 or writer_iter in [1, 5, 10, 25, 50, 75, 100, 150, 200]:", "\n", "#     writer.add_histogram('grad/{}'.format(self.name), grad_list, writer_iter)", "\n", "#     writer.add_histogram('mom/{}'.format(self.name), mom_list, writer_iter)", "\n", "#     writer.add_histogram('mom_sq/{}'.format(self.name), mom_2rd_list, writer_iter)", "\n", "\n", "", "", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.radam.FairseqRAdam.__init__": [[24, 29], ["fairseq.optim.FairseqOptimizer.__init__", "radam.RAdam"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.__init__"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "loss", "=", "None", "\n", "beta2_t", "=", "None", "\n", "ratio", "=", "None", "\n", "N_sma_max", "=", "None", "\n", "N_sma", "=", "None", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.radam.FairseqRAdam.add_args": [[30, 42], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", ".", "float", "(", ")", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'Adam does not support sparse gradients, please consider SparseAdam instead'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.radam.FairseqRAdam.optimizer_config": [[44, 57], ["eval"], "methods", ["None"], ["\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "", "else", ":", "\n", "                    ", "state", "[", "'exp_avg'", "]", "=", "state", "[", "'exp_avg'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "state", "[", "'exp_avg_sq'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "\n", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.radam.RAdam.__init__": [[61, 68], ["dict", "super().__init__"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.__init__"], ["state", "[", "'step'", "]", "+=", "1", "\n", "if", "beta2_t", "is", "None", ":", "\n", "                    ", "beta2_t", "=", "beta2", "**", "state", "[", "'step'", "]", "\n", "N_sma_max", "=", "2", "/", "(", "1", "-", "beta2", ")", "-", "1", "\n", "N_sma", "=", "N_sma_max", "-", "2", "*", "state", "[", "'step'", "]", "*", "beta2_t", "/", "(", "1", "-", "beta2_t", ")", "\n", "beta1_t", "=", "1", "-", "beta1", "**", "state", "[", "'step'", "]", "\n", "if", "N_sma", ">=", "5", ":", "\n", "                        ", "ratio", "=", "math", ".", "sqrt", "(", "(", "1", "-", "beta2_t", ")", "*", "(", "N_sma", "-", "4", ")", "/", "(", "N_sma_max", "-", "4", ")", "*", "(", "N_sma", "-", "2", ")", "/", "N_sma", "*", "N_sma_max", "/", "(", "N_sma_max", "-", "2", ")", ")", "/", "beta1_t", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.radam.RAdam.supports_memory_efficient_fp16": [[69, 72], ["None"], "methods", ["None"], ["\n", "", "", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                    ", "p_data_fp32", ".", "add_", "(", "-", "group", "[", "'weight_decay'", "]", "*", "group", "[", "'lr'", "]", ",", "p_data_fp32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.radam.RAdam.step": [[73, 151], ["list", "list", "list", "closure", "p.grad.data.float", "p.data.float", "exp_avg_sq.mul_().addcmul_", "exp_avg.mul_().add_", "p.data.copy_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "state[].type_as", "state[].type_as", "p.data.float.add_", "exp_avg_sq.sqrt().add_", "p.data.float.addcdiv_", "p.data.float.add_", "exp_avg_sq.mul_", "exp_avg.mul_", "math.sqrt", "exp_avg_sq.sqrt"], "methods", ["None"], ["# more conservative since it's an approximated value", "\n", "", "if", "N_sma", ">=", "5", ":", "\n", "                    ", "step_size", "=", "group", "[", "'lr'", "]", "*", "ratio", "\n", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "p_data_fp32", ".", "addcdiv_", "(", "-", "step_size", ",", "exp_avg", ",", "denom", ")", "\n", "", "else", ":", "\n", "                    ", "step_size", "=", "group", "[", "'lr'", "]", "/", "beta1_t", "\n", "p_data_fp32", ".", "add_", "(", "-", "step_size", ",", "exp_avg", ")", "\n", "\n", "", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "\n", "", "", "return", "loss", "\n", "\n", "\n", "", "", "class", "AdamW", "(", "Optimizer", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ",", "\n", "weight_decay", "=", "0", ")", ":", "\n", "        ", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "\n", "weight_decay", "=", "weight_decay", ")", "\n", "\n", "super", "(", "AdamW", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n", "", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "AdamW", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "\n", "", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "global", "iter_idx", "\n", "iter_idx", "+=", "1", "\n", "grad_list", "=", "list", "(", ")", "\n", "mom_list", "=", "list", "(", ")", "\n", "mom_2rd_list", "=", "list", "(", ")", "\n", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", ".", "float", "(", ")", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'Adam does not support sparse gradients, please consider SparseAdam instead'", ")", "\n", "\n", "", "p_data_fp32", "=", "p", ".", "data", ".", "float", "(", ")", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "", "else", ":", "\n", "                    ", "state", "[", "'exp_avg'", "]", "=", "state", "[", "'exp_avg'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "state", "[", "'exp_avg_sq'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "\n", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "\n", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "bias_correction1", "=", "1", "-", "beta1", "**", "state", "[", "'step'", "]", "\n", "bias_correction2", "=", "1", "-", "beta2", "**", "state", "[", "'step'", "]", "\n", "step_size", "=", "group", "[", "'lr'", "]", "*", "math", ".", "sqrt", "(", "bias_correction2", ")", "/", "bias_correction1", "\n", "\n", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                    ", "p_data_fp32", ".", "add_", "(", "-", "group", "[", "'weight_decay'", "]", "*", "group", "[", "'lr'", "]", ",", "p_data_fp32", ")", "\n", "\n", "", "p_data_fp32", ".", "addcdiv_", "(", "-", "step_size", ",", "exp_avg", ",", "denom", ")", "\n", "\n", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "\n", "", "", "return", "loss", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.linear_schedule.LinearSchedule.__init__": [[31, 55], ["fairseq.optim.lr_scheduler.FairseqLRScheduler.__init__", "linear_schedule.LinearSchedule.optimizer.set_lr", "len", "ValueError"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.__init__"], ["def", "__init__", "(", "self", ",", "args", ",", "optimizer", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "optimizer", ")", "\n", "if", "len", "(", "args", ".", "lr", ")", ">", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Cannot use a fixed learning rate schedule with inverse_sqrt.'", "\n", "' Consider --lr-scheduler=fixed instead.'", "\n", ")", "\n", "", "warmup_end_lr", "=", "args", ".", "lr", "[", "0", "]", "\n", "if", "args", ".", "warmup_init_lr", "<", "0", ":", "\n", "            ", "args", ".", "warmup_init_lr", "=", "warmup_end_lr", "\n", "\n", "# linearly warmup for the first args.warmup_updates", "\n", "", "self", ".", "lr_step", "=", "(", "warmup_end_lr", "-", "args", ".", "warmup_init_lr", ")", "/", "args", ".", "warmup_updates", "\n", "\n", "# then, decay prop. to the inverse square root of the update number", "\n", "# self.warmup_end_lr = warmup_end_lr * args.warmup_updates**0.5", "\n", "self", ".", "min_lr", "=", "args", ".", "min_lr", "\n", "self", ".", "warmup_end_lr", "=", "warmup_end_lr", "-", "self", ".", "min_lr", "\n", "\n", "# initial learning rate", "\n", "self", ".", "lr", "=", "args", ".", "warmup_init_lr", "\n", "self", ".", "optimizer", ".", "set_lr", "(", "self", ".", "lr", ")", "\n", "\n", "self", ".", "max_update", "=", "args", ".", "max_update", "-", "args", ".", "warmup_updates", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.linear_schedule.LinearSchedule.add_args": [[56, 64], ["parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add arguments to the parser for this LR scheduler.\"\"\"", "\n", "# fmt: off", "\n", "parser", ".", "add_argument", "(", "'--warmup-updates'", ",", "default", "=", "4000", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'warmup the learning rate linearly for the first N updates'", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup-init-lr'", ",", "default", "=", "-", "1", ",", "type", "=", "float", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'initial learning rate during warmup phase; default is args.lr'", ")", "\n", "# fmt: on", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.linear_schedule.LinearSchedule.step": [[66, 71], ["super().step", "linear_schedule.LinearSchedule.optimizer.get_lr"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.step"], ["", "def", "step", "(", "self", ",", "epoch", ",", "val_loss", "=", "None", ")", ":", "\n", "        ", "\"\"\"Update the learning rate at the end of the given epoch.\"\"\"", "\n", "super", "(", ")", ".", "step", "(", "epoch", ",", "val_loss", ")", "\n", "# we don't change the learning rate at epoch boundaries", "\n", "return", "self", ".", "optimizer", ".", "get_lr", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.linear_schedule.LinearSchedule.step_update": [[72, 80], ["linear_schedule.LinearSchedule.optimizer.set_lr"], "methods", ["None"], ["", "def", "step_update", "(", "self", ",", "num_updates", ")", ":", "\n", "        ", "\"\"\"Update the learning rate after each update.\"\"\"", "\n", "if", "num_updates", "<", "self", ".", "args", ".", "warmup_updates", ":", "\n", "            ", "self", ".", "lr", "=", "self", ".", "args", ".", "warmup_init_lr", "+", "num_updates", "*", "self", ".", "lr_step", "\n", "", "else", ":", "\n", "            ", "self", ".", "lr", "=", "self", ".", "warmup_end_lr", "*", "(", "1", "-", "(", "num_updates", "-", "self", ".", "args", ".", "warmup_updates", ")", "/", "self", ".", "max_update", ")", "+", "self", ".", "min_lr", "\n", "", "self", ".", "optimizer", ".", "set_lr", "(", "self", ".", "lr", ")", "\n", "return", "self", ".", "lr", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.FairseqNovograd.__init__": [[22, 27], ["fairseq.optim.FairseqOptimizer.__init__", "novograd.Novograd"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "params", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "params", ")", "\n", "\n", "self", ".", "_optimizer", "=", "Novograd", "(", "params", ",", "**", "self", ".", "optimizer_config", ")", "\n", "self", ".", "_optimizer", ".", "name", "=", "args", ".", "tb_tag", "+", "'_'", "+", "self", ".", "_optimizer", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.FairseqNovograd.add_args": [[28, 43], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add optimizer-specific arguments to the parser.\"\"\"", "\n", "# fmt: off", "\n", "parser", ".", "add_argument", "(", "'--adam-betas'", ",", "default", "=", "'(0.9, 0.999)'", ",", "metavar", "=", "'B'", ",", "\n", "help", "=", "'betas for Adam optimizer'", ")", "\n", "parser", ".", "add_argument", "(", "'--adam-eps'", ",", "type", "=", "float", ",", "default", "=", "1e-8", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'epsilon for Adam optimizer'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight-decay'", ",", "'--wd'", ",", "default", "=", "0.0", ",", "type", "=", "float", ",", "metavar", "=", "'WD'", ",", "\n", "help", "=", "'weight decay'", ")", "\n", "parser", ".", "add_argument", "(", "'--tb-tag'", ",", "default", "=", "\"\"", ",", "type", "=", "str", ",", "\n", "help", "=", "'tb tag'", ")", "\n", "parser", ".", "add_argument", "(", "'--amsgrad'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--adam-freeze'", ",", "default", "=", "5000", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--adam-no-correction1'", ",", "action", "=", "'store_true'", ")", "\n", "# fmt: on", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.FairseqNovograd.optimizer_config": [[45, 61], ["eval"], "methods", ["None"], ["", "@", "property", "\n", "def", "optimizer_config", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return a kwarg dictionary that will be used to override optimizer\n        args stored in checkpoints. This allows us to load a checkpoint and\n        resume training using a different set of optimizer args, e.g., with a\n        different learning rate.\n        \"\"\"", "\n", "return", "{", "\n", "'lr'", ":", "self", ".", "args", ".", "lr", "[", "0", "]", ",", "\n", "'betas'", ":", "eval", "(", "self", ".", "args", ".", "adam_betas", ")", ",", "\n", "'eps'", ":", "self", ".", "args", ".", "adam_eps", ",", "\n", "'weight_decay'", ":", "self", ".", "args", ".", "weight_decay", ",", "\n", "'amsgrad'", ":", "self", ".", "args", ".", "amsgrad", ",", "\n", "'adam_freeze'", ":", "self", ".", "args", ".", "adam_freeze", ",", "\n", "'adam_no_correction1'", ":", "self", ".", "args", ".", "adam_no_correction1", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.__init__": [[66, 72], ["dict", "super().__init__"], "methods", ["home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ",", "\n", "weight_decay", "=", "0", ",", "amsgrad", "=", "False", ",", "adam_freeze", "=", "5000", ",", "adam_no_correction1", "=", "False", ")", ":", "\n", "        ", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "\n", "weight_decay", "=", "weight_decay", ",", "amsgrad", "=", "amsgrad", ",", "adam_freeze", "=", "adam_freeze", ",", "adam_no_correction1", "=", "adam_no_correction1", ")", "\n", "self", ".", "name", "=", "'{}_{}_{}'", ".", "format", "(", "lr", ",", "betas", "[", "0", "]", ",", "betas", "[", "1", "]", ")", "\n", "super", "(", "Novograd", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.supports_memory_efficient_fp16": [[73, 76], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "supports_memory_efficient_fp16", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.LiyuanLucasLiu_RAdam.my_module.novograd.Novograd.step": [[77, 140], ["list", "list", "list", "closure", "p.grad.data.float", "p.data.float", "exp_avg.mul_().add_", "p.data.float.add_", "p.data.copy_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "state[].type_as", "exp_avg.add_", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "state[].type_as", "exp_avg.mul_", "p.grad.data.float.norm().item", "p.grad.data.float.norm"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "global", "iter_idx", "\n", "iter_idx", "+=", "1", "\n", "grad_list", "=", "list", "(", ")", "\n", "mom_list", "=", "list", "(", ")", "\n", "mom_2rd_list", "=", "list", "(", ")", "\n", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "\n", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", ".", "float", "(", ")", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'Adam does not support sparse gradients, please consider SparseAdam instead'", ")", "\n", "", "amsgrad", "=", "group", "[", "'amsgrad'", "]", "\n", "\n", "p_data_fp32", "=", "p", ".", "data", ".", "float", "(", ")", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "0", "\n", "if", "amsgrad", ":", "\n", "                        ", "state", "[", "'max_exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "", "", "else", ":", "\n", "                    ", "state", "[", "'exp_avg'", "]", "=", "state", "[", "'exp_avg'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "if", "amsgrad", ":", "\n", "                        ", "state", "[", "'max_exp_avg_sq'", "]", "=", "state", "[", "'max_exp_avg_sq'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "\n", "", "", "exp_avg", "=", "state", "[", "'exp_avg'", "]", "\n", "if", "amsgrad", ":", "\n", "                    ", "max_exp_avg_sq", "=", "state", "[", "'max_exp_avg_sq'", "]", "\n", "", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "state", "[", "'exp_avg_sq'", "]", "*", "beta2", "+", "(", "1", "-", "beta2", ")", "*", "grad", ".", "norm", "(", ")", ".", "item", "(", ")", "**", "2", "\n", "\n", "denom", "=", "state", "[", "'exp_avg_sq'", "]", "**", "0.5", "+", "group", "[", "'eps'", "]", "\n", "\n", "step_size", "=", "group", "[", "'lr'", "]", "\n", "\n", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "grad", "/", "denom", ")", "\n", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                    ", "exp_avg", ".", "add_", "(", "group", "[", "'weight_decay'", "]", ",", "p_data_fp32", ")", "\n", "", "p_data_fp32", ".", "add_", "(", "-", "step_size", ",", "exp_avg", ")", "\n", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "\n", "", "", "return", "loss", "\n", "", "", ""]]}