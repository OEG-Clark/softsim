{"home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.config.Config.__init__": [[8, 10], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "cfg", "=", "{", "'_save_dir'", ":", "None", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.config.Config.load_config": [[11, 13], ["config.Config.cfg.update", "json.load", "open"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.utils.AverageMeter.update"], ["", "def", "load_config", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "cfg", ".", "update", "(", "json", ".", "load", "(", "open", "(", "path", ",", "'r'", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.config.Config.save_config": [[14, 16], ["json.dump", "open"], "methods", ["None"], ["", "def", "save_config", "(", "self", ",", "path", ")", ":", "\n", "        ", "json", ".", "dump", "(", "self", ".", "cfg", ",", "open", "(", "path", ",", "'w'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.config.Config.update_config": [[17, 20], ["vars", "getattr"], "methods", ["None"], ["", "def", "update_config", "(", "self", ",", "args", ")", ":", "\n", "        ", "for", "arg", "in", "vars", "(", "args", ")", ":", "\n", "            ", "self", ".", "cfg", "[", "arg", "]", "=", "getattr", "(", "args", ",", "arg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.config.Config.__getattr__": [[21, 23], ["None"], "methods", ["None"], ["", "", "def", "__getattr__", "(", "self", ",", "item", ")", ":", "\n", "        ", "return", "self", ".", "cfg", "[", "item", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.config.Config.__str__": [[24, 30], ["config.Config.cfg.items"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "msg", "=", "'(Arguments: '", "\n", "for", "key", ",", "value", "in", "self", ".", "cfg", ".", "items", "(", ")", ":", "\n", "            ", "msg", "+=", "'  {}={}'", ".", "format", "(", "key", ",", "value", ")", "\n", "", "msg", "+=", "')'", "\n", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.config.Config.save_dir": [[31, 46], ["config.make_if_not_exist", "os.path.join", "config.make_if_not_exist", "datetime.datetime.datetime.now", "datetime.datetime.now.strftime", "os.path.join", "config.make_if_not_exist"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.config.make_if_not_exist", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.config.make_if_not_exist", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.config.make_if_not_exist"], ["", "@", "property", "\n", "def", "save_dir", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_save_dir", ":", "\n", "            ", "return", "self", ".", "_save_dir", "\n", "", "else", ":", "\n", "            ", "path", "=", "self", ".", "checkpoint_dir", "\n", "make_if_not_exist", "(", "path", ")", "\n", "exp_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "self", ".", "model_name", ")", "\n", "make_if_not_exist", "(", "exp_path", ")", "\n", "now", "=", "datetime", ".", "now", "(", ")", "\n", "time_stamp", "=", "now", ".", "strftime", "(", "\"%b-%d-%H_%M_%S\"", ")", "\n", "final_path", "=", "os", ".", "path", ".", "join", "(", "exp_path", ",", "time_stamp", ")", "\n", "make_if_not_exist", "(", "final_path", ")", "\n", "self", ".", "_save_dir", "=", "final_path", "\n", "return", "final_path", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.config.Config.device": [[47, 50], ["torch.device"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.config.Config.device"], ["", "", "@", "property", "\n", "def", "device", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "device", "(", "self", ".", "_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.config.make_if_not_exist": [[52, 55], ["os.path.exists", "os.mkdir"], "function", ["None"], ["", "", "def", "make_if_not_exist", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "path", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.train.compute_knn": [[66, 80], ["len", "numpy.arange", "range", "np.arange.astype", "numpy.random.choice", "numpy.argpartition"], "function", ["None"], ["def", "compute_knn", "(", "dist_feat", ",", "targets", ",", "knn", "=", "5", ")", ":", "\n", "    ", "'''\n    compute the knn according to instance id/ class id\n    '''", "\n", "ndata", "=", "len", "(", "targets", ")", "\n", "nnIndex", "=", "np", ".", "arange", "(", "ndata", ")", "\n", "# compute the instance knn", "\n", "for", "i", "in", "range", "(", "ndata", ")", ":", "\n", "        ", "dist_feat", "[", "i", ",", "i", "]", "=", "-", "1000", "\n", "dist_tmp", "=", "dist_feat", "[", "i", ",", ":", "]", "\n", "ind", "=", "np", ".", "argpartition", "(", "dist_tmp", ",", "-", "knn", ")", "[", "-", "knn", ":", "]", "\n", "# random 1nn and augmented sample for positive", "\n", "nnIndex", "[", "i", "]", "=", "np", ".", "random", ".", "choice", "(", "[", "ind", "[", "0", "]", ",", "i", "]", ")", "\n", "", "return", "nnIndex", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.train.extract_features": [[81, 102], ["len", "torch.utils.data.DataLoader", "model.eval", "torch.zeros", "model.train", "torch.no_grad", "enumerate", "inputs.to.size", "min", "inputs.to.to", "model", "repr.cpu"], "function", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.auto_enc_trainer.AutoEncocderTrainer.eval", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.BaseCriterion.to"], ["", "def", "extract_features", "(", "model", ",", "dataset", ")", ":", "\n", "    ", "n_data", "=", "len", "(", "dataset", ")", "\n", "feat_dim", "=", "cfg", ".", "low_dim", "\n", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "cfg", ".", "test_batch", ",", "shuffle", "=", "False", ",", "num_workers", "=", "4", ")", "\n", "model", ".", "eval", "(", ")", "\n", "model", ".", "mode", "=", "'pool'", "\n", "# Extract features", "\n", "features", "=", "torch", ".", "zeros", "(", "n_data", ",", "feat_dim", ")", "\n", "targets", "=", "dataset", ".", "targets", "\n", "ptr", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "inputs", ",", "_", ",", "_", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "batch_size", "=", "inputs", ".", "size", "(", "0", ")", "\n", "real_size", "=", "min", "(", "batch_size", ",", "args", ".", "test_batch", ")", "\n", "inputs", "=", "inputs", ".", "to", "(", "cfg", ".", "device", ")", "\n", "repr", ",", "_", ",", "_", "=", "model", "(", "inputs", ")", "\n", "features", "[", "ptr", ":", "ptr", "+", "real_size", ",", ":", "]", "=", "repr", ".", "cpu", "(", ")", "\n", "ptr", "+=", "cfg", ".", "test_batch", "\n", "", "", "model", ".", "mode", "=", "'normal'", "\n", "model", ".", "train", "(", ")", "\n", "return", "features", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.train.get_nearest_idex": [[104, 131], ["len", "torch.utils.data.DataLoader", "model.eval", "print", "torch.zeros", "torch.zeros", "model.train", "numpy.array", "train.compute_knn", "torch.no_grad", "enumerate", "torch.mm", "inputs.to.size", "min", "inputs.to.to", "model", "emb.cpu", "torch.zeros.t"], "function", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.auto_enc_trainer.AutoEncocderTrainer.eval", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.trainer.compute_knn", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.BaseCriterion.to"], ["", "def", "get_nearest_idex", "(", "model", ",", "dataset", ")", ":", "\n", "    ", "n_data", "=", "len", "(", "dataset", ")", "\n", "feat_dim", "=", "1024", "\n", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "cfg", ".", "test_batch", ",", "shuffle", "=", "False", ",", "num_workers", "=", "4", ")", "\n", "model", ".", "eval", "(", ")", "\n", "model", ".", "mode", "=", "'pool'", "\n", "dataset", ".", "transform", "=", "transform_test", "\n", "# Extract features", "\n", "print", "(", "'Extracting features ...'", ")", "\n", "features", "=", "torch", ".", "zeros", "(", "n_data", ",", "feat_dim", ")", "\n", "targets", "=", "torch", ".", "zeros", "(", "n_data", ")", "\n", "ptr", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "inputs", ",", "_", ",", "_", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "batch_size", "=", "inputs", ".", "size", "(", "0", ")", "\n", "real_size", "=", "min", "(", "batch_size", ",", "args", ".", "test_batch", ")", "\n", "inputs", "=", "inputs", ".", "to", "(", "cfg", ".", "device", ")", "\n", "_", ",", "emb", ",", "_", "=", "model", "(", "inputs", ")", "\n", "features", "[", "ptr", ":", "ptr", "+", "real_size", ",", ":", "]", "=", "emb", ".", "cpu", "(", ")", "\n", "ptr", "+=", "cfg", ".", "test_batch", "\n", "", "", "model", ".", "mode", "=", "'normal'", "\n", "model", ".", "train", "(", ")", "\n", "dataset", ".", "transform", "=", "transform_train", "\n", "# select nn Index", "\n", "dist_feat", "=", "np", ".", "array", "(", "torch", ".", "mm", "(", "features", ",", "features", ".", "t", "(", ")", ")", ")", "\n", "nn_index", "=", "compute_knn", "(", "dist_feat", ",", "targets", ",", "knn", "=", "1", ")", "\n", "return", "nn_index", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.train.create_mask": [[133, 141], ["torch.unique", "len", "len", "torch.ones", "torch.unique.expand", "pred_cluster.view"], "function", ["None"], ["", "def", "create_mask", "(", "pred_cluster", ")", ":", "\n", "    ", "unique_cluster", "=", "torch", ".", "unique", "(", "pred_cluster", ")", "\n", "n", "=", "len", "(", "pred_cluster", ")", "\n", "m", "=", "len", "(", "unique_cluster", ")", "\n", "mask", "=", "torch", ".", "ones", "(", "n", ",", "m", ")", "\n", "exp_cluster", "=", "unique_cluster", ".", "expand", "(", "n", ",", "m", ")", "\n", "mask", "[", "exp_cluster", "==", "pred_cluster", ".", "view", "(", "n", ",", "1", ")", "]", "=", "0", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.train.rim_criterion": [[143, 149], ["torch.softmax", "utils.entropy", "utils.entropy", "torch.sum", "inp.size"], "function", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.utils.entropy", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.utils.entropy"], ["", "def", "rim_criterion", "(", "inp", ")", ":", "\n", "    ", "p", "=", "torch", ".", "softmax", "(", "inp", ",", "dim", "=", "1", ")", "\n", "p_ave", "=", "torch", ".", "sum", "(", "p", ",", "dim", "=", "0", ")", "/", "inp", ".", "size", "(", "0", ")", "\n", "avg_entropy", "=", "entropy", "(", "p", ")", "\n", "entropy_avg", "=", "entropy", "(", "p_ave", ")", "\n", "return", "avg_entropy", "+", "(", "1", "-", "cfg", ".", "mu", "*", "entropy_avg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.train.center_batch_criterion": [[151, 189], ["x.size", "torch.cat", "create_mask().to", "torch.mm().div_().exp_", "torch.div", "all_prob.sum.repeat", "torch.div", "torch.div.log_", "torch.div.log_", "torch.div.sum", "torch.div.sum", "torch.mm().div_().exp_.sum", "centers.size", "all_div.repeat.t", "torch.div.add", "torch.div.sum", "_lnPon.log_", "x.narrow", "x.narrow", "train.create_mask", "torch.mm().div_", "torch.mm", "torch.mm().div_().exp_.sum", "centers.t"], "function", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.BaseCriterion.to", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.create_mask"], ["", "def", "center_batch_criterion", "(", "x", ",", "centers", ",", "targets", ")", ":", "\n", "    ", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "\n", "reordered_x", "=", "torch", ".", "cat", "(", "(", "x", ".", "narrow", "(", "0", ",", "batch_size", "//", "2", ",", "batch_size", "//", "2", ")", ",", "\n", "x", ".", "narrow", "(", "0", ",", "0", ",", "batch_size", "//", "2", ")", ")", ",", "0", ")", "\n", "\n", "pos", "=", "(", "x", "*", "reordered_x", ".", "data", ")", ".", "sum", "(", "1", ")", ".", "div_", "(", "cfg", ".", "t", ")", ".", "exp_", "(", ")", "\n", "\n", "same_cluster_mask", "=", "create_mask", "(", "targets", ")", ".", "to", "(", "cfg", ".", "device", ")", "\n", "\n", "all_prob", "=", "torch", ".", "mm", "(", "x", ",", "centers", ".", "t", "(", ")", ".", "data", ")", ".", "div_", "(", "cfg", ".", "t", ")", ".", "exp_", "(", ")", "\n", "\n", "if", "cfg", ".", "neg_m", "==", "1", ":", "\n", "        ", "all_div", "=", "all_prob", ".", "sum", "(", "1", ")", "\n", "all_div_pos", "=", "(", "all_prob", "*", "same_cluster_mask", ")", ".", "sum", "(", "1", ")", "\n", "", "else", ":", "\n", "        ", "all_div", "=", "(", "all_prob", ".", "sum", "(", "1", ")", "-", "pos", ")", "*", "cfg", ".", "neg_m", "+", "pos", "\n", "\n", "", "lnPmt", "=", "torch", ".", "div", "(", "pos", ",", "all_div_pos", ")", "\n", "# negative probability", "\n", "Pon_div", "=", "all_div", ".", "repeat", "(", "centers", ".", "size", "(", "0", ")", ",", "1", ")", "\n", "lnPon", "=", "torch", ".", "div", "(", "all_prob", ",", "Pon_div", ".", "t", "(", ")", ")", "\n", "lnPon", "=", "-", "lnPon", ".", "add", "(", "-", "1", ")", "\n", "# prob of image and its centroid", "\n", "_lnPon", "=", "lnPon", "[", "same_cluster_mask", "==", "0", "]", "\n", "# equation 7 in ref. A (NCE paper)", "\n", "lnPon", ".", "log_", "(", ")", "\n", "# also remove the pos term", "\n", "lnPon", "=", "lnPon", ".", "sum", "(", "1", ")", "-", "_lnPon", ".", "log_", "(", ")", "\n", "lnPmt", ".", "log_", "(", ")", "\n", "\n", "lnPmtsum", "=", "lnPmt", ".", "sum", "(", "0", ")", "\n", "lnPonsum", "=", "lnPon", ".", "sum", "(", "0", ")", "\n", "\n", "# negative multiply m", "\n", "lnPonsum", "=", "lnPonsum", "*", "cfg", ".", "neg_m", "\n", "loss", "=", "-", "(", "lnPmtsum", "+", "cfg", ".", "alpha", "*", "lnPonsum", ")", "/", "batch_size", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.train.recon_criterion": [[191, 193], ["torch.nn.functional.mse_loss"], "function", ["None"], ["", "def", "recon_criterion", "(", "target", ",", "gt", ")", ":", "\n", "    ", "return", "functional", ".", "mse_loss", "(", "target", ",", "gt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.dataset.CUB200_2011Dataset.__init__": [[12, 25], ["os.path.join", "dataset.CUB200_2011Dataset.get_processed_data"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.dataset.CUB200_2011Dataset.get_processed_data"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "train", "=", "True", ",", "transform", "=", "transform_train", ",", "nnIndex", "=", "None", ",", "augment", "=", "transform_train", ",", "target_transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "dataset_dir", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "self", ".", "__class__", ".", "__name__", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "augment", "=", "augment", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "ae", "=", "False", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "loader", "=", "default_loader", "\n", "self", ".", "cls_to_idx", "=", "{", "}", "\n", "self", ".", "ps_label", "=", "[", "]", "\n", "self", ".", "_paths", ",", "self", ".", "_targets", "=", "self", ".", "get_processed_data", "(", ")", "\n", "self", ".", "nnIndex", "=", "nnIndex", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.dataset.CUB200_2011Dataset.__repr__": [[26, 35], ["dataset.CUB200_2011Dataset.__len__", "dataset.CUB200_2011Dataset.transform.__repr__().replace", "dataset.CUB200_2011Dataset.transform.__repr__", "len"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.dataset.MLDataInstance.__len__", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.dataset.CUB200_2011Dataset.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "fmt_str", "=", "'Dataset '", "+", "self", ".", "__class__", ".", "__name__", "+", "'\\n'", "\n", "fmt_str", "+=", "'    Number of datapoints: {}\\n'", ".", "format", "(", "self", ".", "__len__", "(", ")", ")", "\n", "tmp", "=", "'train'", "if", "self", ".", "train", "is", "True", "else", "'test'", "\n", "fmt_str", "+=", "'    Split: {}\\n'", ".", "format", "(", "tmp", ")", "\n", "fmt_str", "+=", "'    Root Location: {}\\n'", ".", "format", "(", "self", ".", "root", ")", "\n", "tmp", "=", "'    Transforms (if any): '", "\n", "fmt_str", "+=", "'{0}{1}\\n'", ".", "format", "(", "tmp", ",", "self", ".", "transform", ".", "__repr__", "(", ")", ".", "replace", "(", "'\\n'", ",", "'\\n'", "+", "' '", "*", "len", "(", "tmp", ")", ")", ")", "\n", "return", "fmt_str", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.dataset.CUB200_2011Dataset.__len__": [[36, 38], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.dataset.CUB200_2011Dataset.get_processed_data": [[39, 55], ["dataset.CUB200_2011Dataset.gen_cls2idx", "open", "os.path.join", "line.strip", "os.path.join", "paths.append", "targets.append", "os.path.split"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.dataset.CUB200_2011Dataset.gen_cls2idx"], ["", "def", "get_processed_data", "(", "self", ")", ":", "\n", "        ", "self", ".", "gen_cls2idx", "(", ")", "\n", "if", "self", ".", "train", ":", "\n", "            ", "data_file", "=", "'train.txt'", "\n", "", "else", ":", "\n", "            ", "data_file", "=", "'test.txt'", "\n", "", "paths", "=", "[", "]", "\n", "targets", "=", "[", "]", "\n", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "data_file", ")", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "filename", "=", "line", ".", "strip", "(", ")", "\n", "target", "=", "self", ".", "cls_to_idx", "[", "osp", ".", "split", "(", "filename", ")", "[", "0", "]", "]", "\n", "filepath", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'images'", ",", "filename", ")", "\n", "paths", ".", "append", "(", "filepath", ")", "\n", "targets", ".", "append", "(", "target", ")", "\n", "", "", "return", "paths", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.dataset.CUB200_2011Dataset.gen_cls2idx": [[56, 65], ["os.path.exists", "os.path.join", "pickle.load", "pickle.dump", "open", "open", "open", "os.path.join", "os.path.join", "len", "os.path.join", "line.strip"], "methods", ["None"], ["", "def", "gen_cls2idx", "(", "self", ")", ":", "\n", "        ", "if", "osp", ".", "exists", "(", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'cls2idx.dict'", ")", ")", ":", "\n", "            ", "self", ".", "cls_to_idx", "=", "pickle", ".", "load", "(", "open", "(", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'cls2idx.dict'", ")", ",", "'rb'", ")", ")", "\n", "", "else", ":", "\n", "\n", "            ", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'classes.txt'", ")", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "for", "line", "in", "f", ":", "\n", "                    ", "self", ".", "cls_to_idx", "[", "line", ".", "strip", "(", ")", "]", "=", "len", "(", "self", ".", "cls_to_idx", ")", "\n", "", "", "pickle", ".", "dump", "(", "self", ".", "cls_to_idx", ",", "open", "(", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'cls2idx.dict'", ")", ",", "'wb'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.dataset.CUB200_2011Dataset.__getitem__": [[66, 86], ["torchvision.datasets.folder.default_loader", "dataset.CUB200_2011Dataset.augment", "dataset.CUB200_2011Dataset.transform", "dataset.CUB200_2011Dataset.target_transform", "torchvision.datasets.folder.default_loader", "torchvision.datasets.folder.default_loader", "dataset.CUB200_2011Dataset.transform", "dataset.CUB200_2011Dataset.augment", "torchvision.datasets.folder.default_loader", "dataset.CUB200_2011Dataset.transform"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "ae", ":", "\n", "            ", "img", "=", "default_loader", "(", "self", ".", "paths", "[", "idx", "]", ")", "\n", "img", "=", "self", ".", "augment", "(", "img", ")", "\n", "train_img", "=", "self", ".", "transform", "(", "img", ")", "\n", "target_img", "=", "self", ".", "target_transform", "(", "img", ")", "\n", "target", "=", "self", ".", "targets", "[", "idx", "]", "\n", "return", "target_img", ",", "train_img", ",", "target", ",", "idx", "\n", "", "if", "self", ".", "nnIndex", "is", "not", "None", ":", "\n", "            ", "img1", "=", "default_loader", "(", "self", ".", "paths", "[", "idx", "]", ")", "\n", "img2", "=", "default_loader", "(", "self", ".", "paths", "[", "self", ".", "nnIndex", "[", "idx", "]", "]", ")", "\n", "target", "=", "self", ".", "targets", "[", "idx", "]", "\n", "img1", "=", "self", ".", "transform", "(", "img1", ")", "\n", "img2", "=", "self", ".", "augment", "(", "img2", ")", "\n", "return", "img1", ",", "img2", ",", "target", ",", "idx", "\n", "", "else", ":", "\n", "            ", "img", "=", "default_loader", "(", "self", ".", "paths", "[", "idx", "]", ")", "\n", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "target", "=", "self", ".", "targets", "[", "idx", "]", "\n", "return", "img", ",", "target", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.dataset.CUB200_2011Dataset.update_ps_label": [[87, 89], ["None"], "methods", ["None"], ["", "", "def", "update_ps_label", "(", "self", ",", "labels", ")", ":", "\n", "        ", "self", ".", "ps_label", "+=", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.dataset.CUB200_2011Dataset.paths": [[90, 93], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "paths", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.dataset.CUB200_2011Dataset.targets": [[94, 97], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "targets", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.dataset.MetricLearningDataset.__init__": [[131, 140], ["torch.utils.data.Dataset.__init__", "dataset.handle_dataset_alpha", "numpy.arange", "len"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.auto_enc_trainer.AutoEncocderTrainer.__init__", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.dataset.handle_dataset_alpha"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "train", "=", "True", ",", "dataset_name", "=", "'cub200'", ",", "transform", "=", "transform_train", ",", "augmentation", "=", "transform_train", ",", "nn_index", "=", "None", ")", ":", "\n", "        ", "super", "(", "MetricLearningDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data", ",", "self", ".", "targets", "=", "handle_dataset_alpha", "(", "root", ",", "train", ",", "dataset_name", ")", "\n", "# nearest neighbor index", "\n", "self", ".", "nnIndex", "=", "nn_index", "\n", "if", "not", "self", ".", "nnIndex", ":", "\n", "            ", "self", ".", "nnIndex", "=", "np", ".", "arange", "(", "len", "(", "self", ".", "data", ")", ")", "\n", "", "self", ".", "transform", "=", "transform", "\n", "self", ".", "augment", "=", "augmentation", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.dataset.MetricLearningDataset.__len__": [[141, 143], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.dataset.MetricLearningDataset.__getitem__": [[144, 151], ["dataset.MetricLearningDataset.transform", "dataset.MetricLearningDataset.augment"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img1", "=", "self", ".", "data", "[", "idx", "]", "\n", "img2", "=", "self", ".", "data", "[", "self", ".", "nnIndex", "[", "idx", "]", "]", "\n", "target", "=", "self", ".", "targets", "[", "idx", "]", "\n", "img1", "=", "self", ".", "transform", "(", "img1", ")", "\n", "img2", "=", "self", ".", "augment", "(", "img2", ")", "\n", "return", "img1", ",", "img2", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.dataset.AutoencoderDataset.__init__": [[154, 187], ["dataset.handle_dataset_alpha", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Lambda", "torchvision.transforms.Normalize", "torchvision.transforms.Lambda", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "torchvision.transforms.Lambda", "torchvision.transforms.ToPILImage", "torchvision.transforms.Resize", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.RandomRotation", "torchvision.transforms.ToPILImage", "torchvision.transforms.Resize", "torch.zeros().normal_", "torch.zeros", "x.size"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.dataset.handle_dataset_alpha"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "train", "=", "True", ",", "dataset_name", "=", "'cub200'", ",", "input_sie", "=", "224", ",", "target_size", "=", "224", ")", ":", "\n", "        ", "self", ".", "data", ",", "self", ".", "targets", "=", "handle_dataset_alpha", "(", "root", ",", "train", ",", "dataset_name", ")", "\n", "\n", "normalize", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Lambda", "(", "lambda", "x", ":", "x", "*", "255.0", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "122.7717", ",", "115.9465", ",", "102.9801", "]", ",", "std", "=", "[", "1", ",", "1", ",", "1", "]", ")", ",", "\n", "transforms", ".", "Lambda", "(", "lambda", "x", ":", "x", "[", "[", "2", ",", "1", ",", "0", "]", ",", "...", "]", ")", ",", "\n", "# transforms.Lambda(lambda x: x / 255.0),", "\n", "\n", "]", ")", "\n", "if", "train", ":", "\n", "            ", "self", ".", "augment", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "Resize", "(", "(", "input_sie", ",", "input_sie", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "RandomRotation", "(", "30", ")", ",", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "augment", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "Resize", "(", "(", "input_sie", ",", "input_sie", ")", ")", ",", "\n", "]", ")", "\n", "\n", "", "self", ".", "transform_target", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "target_size", ",", "target_size", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "\n", "self", ".", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Lambda", "(", "lambda", "x", ":", "x", "+", "torch", ".", "zeros", "(", "x", ".", "size", "(", ")", ")", ".", "normal_", "(", "0", ",", "0.09", ")", ")", ",", "\n", "normalize", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.dataset.AutoencoderDataset.__len__": [[189, 191], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.dataset.AutoencoderDataset.__getitem__": [[192, 198], ["dataset.AutoencoderDataset.augment", "dataset.AutoencoderDataset.transform_train", "dataset.AutoencoderDataset.transform_target"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img", "=", "self", ".", "data", "[", "idx", "]", "\n", "img", "=", "self", ".", "augment", "(", "img", ")", "\n", "train_img", "=", "self", ".", "transform_train", "(", "img", ")", "\n", "target_img", "=", "self", ".", "transform_target", "(", "img", ")", "\n", "return", "train_img", ",", "target_img", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.dataset.MLDataInstance.__init__": [[204, 221], ["numpy.load", "numpy.load", "numpy.load", "numpy.load"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "src_dir", ",", "dataset_name", ",", "train", "=", "True", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "nnIndex", "=", "None", ",", "\n", "augmenter", "=", "None", ")", ":", "\n", "\n", "        ", "data_dir", "=", "src_dir", "+", "'/'", "+", "dataset_name", "+", "'/'", "\n", "if", "train", ":", "\n", "            ", "img_data", "=", "np", ".", "load", "(", "data_dir", "+", "'{}_{}_256resized_img.npy'", ".", "format", "(", "'training'", ",", "dataset_name", ")", ")", "\n", "img_label", "=", "np", ".", "load", "(", "data_dir", "+", "'{}_{}_256resized_label.npy'", ".", "format", "(", "'training'", ",", "dataset_name", ")", ")", "\n", "", "else", ":", "\n", "            ", "img_data", "=", "np", ".", "load", "(", "data_dir", "+", "'{}_{}_256resized_img.npy'", ".", "format", "(", "'validation'", ",", "dataset_name", ")", ")", "\n", "img_label", "=", "np", ".", "load", "(", "data_dir", "+", "'{}_{}_256resized_label.npy'", ".", "format", "(", "'validation'", ",", "dataset_name", ")", ")", "\n", "\n", "", "self", ".", "img_data", "=", "img_data", "\n", "self", ".", "targets", "=", "img_label", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "nnIndex", "=", "nnIndex", "\n", "self", ".", "augmenter", "=", "augmenter", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.dataset.MLDataInstance.__getitem__": [[222, 243], ["dataset.MLDataInstance.transform", "dataset.MLDataInstance.transform", "dataset.MLDataInstance.augmenter", "dataset.MLDataInstance.transform", "dataset.MLDataInstance.target_transform", "dataset.MLDataInstance.target_transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "if", "self", ".", "nnIndex", "is", "not", "None", ":", "\n", "\n", "            ", "img1", ",", "img2", ",", "target", "=", "self", ".", "img_data", "[", "index", "]", ",", "self", ".", "img_data", "[", "self", ".", "nnIndex", "[", "index", "]", "]", ",", "self", ".", "targets", "[", "index", "]", "\n", "\n", "img1", "=", "self", ".", "transform", "(", "img1", ")", "\n", "if", "self", ".", "augmenter", ":", "\n", "                ", "img2", "=", "self", ".", "augmenter", "(", "img2", ")", "\n", "", "else", ":", "\n", "                ", "img2", "=", "self", ".", "transform", "(", "img2", ")", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "                ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "", "return", "img1", ",", "img2", ",", "target", "\n", "\n", "", "else", ":", "\n", "            ", "img", ",", "target", "=", "self", ".", "img_data", "[", "index", "]", ",", "self", ".", "targets", "[", "index", "]", "\n", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "                ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "", "return", "img", ",", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.dataset.MLDataInstance.__len__": [[244, 246], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_data", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.dataset.handle_cub200": [[99, 116], ["os.path.join", "pickle.load", "open", "open", "os.path.join", "os.path.join", "line.strip", "os.path.join", "paths.append", "targets.append", "os.path.split"], "function", ["None"], ["", "", "def", "handle_cub200", "(", "root", ",", "train", "=", "True", ")", ":", "\n", "    ", "data_dir", "=", "osp", ".", "join", "(", "root", ",", "'CUB200_2011Dataset'", ")", "\n", "cls2idx", "=", "pickle", ".", "load", "(", "open", "(", "osp", ".", "join", "(", "data_dir", ",", "'cls2idx.dict'", ")", ",", "'rb'", ")", ")", "\n", "if", "train", ":", "\n", "        ", "data_file", "=", "'train.txt'", "\n", "", "else", ":", "\n", "        ", "data_file", "=", "'test.txt'", "\n", "", "paths", "=", "[", "]", "\n", "targets", "=", "[", "]", "\n", "with", "open", "(", "osp", ".", "join", "(", "data_dir", ",", "data_file", ")", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "filename", "=", "line", ".", "strip", "(", ")", "\n", "target", "=", "cls2idx", "[", "osp", ".", "split", "(", "filename", ")", "[", "0", "]", "]", "\n", "filepath", "=", "osp", ".", "join", "(", "data_dir", ",", "'images'", ",", "filename", ")", "\n", "paths", ".", "append", "(", "filepath", ")", "\n", "targets", ".", "append", "(", "target", ")", "\n", "", "", "return", "paths", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.dataset.handle_dataset_alpha": [[118, 128], ["print", "os.path.join", "numpy.load", "numpy.load", "numpy.load", "numpy.load"], "function", ["None"], ["", "def", "handle_dataset_alpha", "(", "root", ",", "train", "=", "True", ",", "dataset_name", "=", "'cub200'", ")", ":", "\n", "    ", "print", "(", "\"Loading\"", ",", "dataset_name", ")", "\n", "data_dir", "=", "osp", ".", "join", "(", "root", ",", "dataset_name", ")", "\n", "if", "train", ":", "\n", "        ", "img_data", "=", "np", ".", "load", "(", "data_dir", "+", "'/{}_{}_256resized_img.npy'", ".", "format", "(", "'training'", ",", "dataset_name", ")", ")", "\n", "img_label", "=", "np", ".", "load", "(", "data_dir", "+", "'/{}_{}_256resized_label.npy'", ".", "format", "(", "'training'", ",", "dataset_name", ")", ")", "\n", "", "else", ":", "\n", "        ", "img_data", "=", "np", ".", "load", "(", "data_dir", "+", "'/{}_{}_256resized_img.npy'", ".", "format", "(", "'validation'", ",", "dataset_name", ")", ")", "\n", "img_label", "=", "np", ".", "load", "(", "data_dir", "+", "'/{}_{}_256resized_label.npy'", ".", "format", "(", "'validation'", ",", "dataset_name", ")", ")", "\n", "", "return", "img_data", ",", "img_label", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.find_lr.find_lr": [[37, 125], ["len", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "numpy.zeros", "torch.zeros", "torch.zeros", "torch.Tensor", "torch.Tensor", "numpy.array", "trainer.trainer.compute_knn", "len", "torch.no_grad", "torch.no_grad", "enumerate", "torch.mm", "torch.mm", "targets.repeat.repeat", "torch.cat", "torch.cat", "optimizer.zero_grad", "model", "rim_criterion", "torch.argmax", "torch.argmax", "torch.unique", "torch.unique", "torch.zeros().to", "torch.zeros().to", "range", "torch.argmax", "torch.argmax", "model.feat_ext.eval", "model.flatten", "model.feat_ext", "model.l2norm", "model.feat_ext.train", "ml_criterion", "losses.append", "log_lrs.append", "loss.backward", "optimizer.step", "inputs.to.size", "min", "inputs.to.to", "batch_feat.cpu", "torch.zeros.t", "inputs1.to", "inputs2.to", "targets.repeat.to", "torch.softmax", "torch.softmax", "torch.unique.view", "len", "torch.mean", "torch.mean", "torch.zeros().to.detach().to", "math.log10", "model", "torch.zeros", "torch.zeros", "torch.argmax.view", "loss.item", "len", "torch.zeros().to.detach"], "function", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.trainer.compute_knn", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.train.rim_criterion", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.BaseCriterion.to", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.BaseCriterion.to", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.auto_enc_trainer.AutoEncocderTrainer.eval", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.utils.l2norm", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.auto_enc_trainer.AutoEncocderTrainer.step", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.BaseCriterion.to", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.BaseCriterion.to", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.BaseCriterion.to", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.BaseCriterion.to", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.BaseCriterion.to"], ["def", "find_lr", "(", "init_value", "=", "1e-8", ",", "final_value", "=", "1e-1", ",", "beta", "=", "0.98", ")", ":", "\n", "    ", "num", "=", "len", "(", "trn_loader", ")", "-", "1", "\n", "mult", "=", "(", "final_value", "/", "init_value", ")", "**", "(", "1", "/", "num", ")", "\n", "lr", "=", "init_value", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "lr", "\n", "avg_loss", "=", "0.", "\n", "best_loss", "=", "0.", "\n", "batch_num", "=", "0", "\n", "losses", "=", "[", "]", "\n", "log_lrs", "=", "[", "]", "\n", "\n", "# generate positive index", "\n", "train_set", "=", "trn_loader", ".", "dataset", "\n", "n_data", "=", "len", "(", "train_set", ")", "\n", "temp_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_set", ",", "batch_size", "=", "100", ",", "shuffle", "=", "False", ",", "num_workers", "=", "4", ")", "\n", "train_set", ".", "transform", "=", "transform_test", "\n", "labels", "=", "np", ".", "zeros", "(", "n_data", ")", "\n", "model", ".", "mode", "=", "'pool'", "\n", "out_index", "=", "1", "\n", "feat_dim", "=", "1024", "\n", "\n", "features", "=", "torch", ".", "zeros", "(", "n_data", ",", "feat_dim", ")", "\n", "labels", "=", "torch", ".", "Tensor", "(", "labels", ")", "\n", "ptr", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "inputs", ",", "_", ",", "_", ")", "in", "enumerate", "(", "temp_loader", ")", ":", "\n", "            ", "batch_size", "=", "inputs", ".", "size", "(", "0", ")", "\n", "real_size", "=", "min", "(", "batch_size", ",", "100", ")", "\n", "inputs", "=", "inputs", ".", "to", "(", "'cuda:0'", ")", "\n", "batch_feat", "=", "model", "(", "inputs", ")", "[", "out_index", "]", "\n", "features", "[", "ptr", ":", "ptr", "+", "real_size", ",", ":", "]", "=", "batch_feat", ".", "cpu", "(", ")", "\n", "ptr", "+=", "100", "\n", "\n", "", "", "train_set", ".", "transform", "=", "transform_train", "\n", "model", ".", "mode", "=", "'normal'", "\n", "\n", "# select nn Index", "\n", "dist_feat", "=", "np", ".", "array", "(", "torch", ".", "mm", "(", "features", ",", "features", ".", "t", "(", ")", ")", ")", "\n", "nn_index", "=", "compute_knn", "(", "dist_feat", ",", "labels", ",", "knn", "=", "1", ",", "epoch", "=", "1", ")", "\n", "train_set", ".", "nnIndex", "=", "nn_index", "\n", "\n", "for", "inputs1", ",", "inputs2", ",", "targets", "in", "trn_loader", ":", "\n", "        ", "batch_num", "+=", "1", "\n", "#As before, get the loss for this mini-batch of inputs/outputs", "\n", "inputs1", ",", "inputs2", ",", "targets", "=", "inputs1", ".", "to", "(", "device", ")", ",", "inputs2", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "targets", "=", "targets", ".", "repeat", "(", "2", ")", "\n", "inputs", "=", "torch", ".", "cat", "(", "(", "inputs1", ",", "inputs2", ")", ",", "0", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "repr", ",", "cluster", ",", "emb", "=", "model", "(", "inputs", ")", "\n", "# Total loss", "\n", "rim_loss", "=", "rim_criterion", "(", "cluster", ")", "\n", "pred_cluster", "=", "torch", ".", "argmax", "(", "torch", ".", "softmax", "(", "cluster", ",", "dim", "=", "1", ")", ",", "dim", "=", "1", ")", "\n", "\n", "unique_cluster", "=", "torch", ".", "unique", "(", "pred_cluster", ")", "\n", "centroid_embedding", "=", "torch", ".", "zeros", "(", "len", "(", "unique_cluster", ")", ",", "1024", ",", "7", ",", "7", ")", ".", "to", "(", "device", ")", "\n", "index", "=", "pred_cluster", "==", "unique_cluster", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "index", ")", ")", ":", "\n", "            ", "centroid_embedding", "[", "i", "]", "=", "torch", ".", "mean", "(", "emb", "[", "index", "[", "i", "]", "]", ",", "dim", "=", "0", ")", "\n", "\n", "", "emb_index", "=", "torch", ".", "argmax", "(", "unique_cluster", "==", "pred_cluster", ".", "view", "(", "-", "1", ",", "1", ")", ",", "dim", "=", "1", ")", "\n", "model", ".", "feat_ext", ".", "eval", "(", ")", "\n", "x", "=", "model", ".", "flatten", "(", "centroid_embedding", ".", "detach", "(", ")", ".", "to", "(", "device", ")", ")", "\n", "x", "=", "model", ".", "feat_ext", "(", "x", ")", "\n", "centroid_repr", "=", "model", ".", "l2norm", "(", "x", ")", "\n", "model", ".", "feat_ext", ".", "train", "(", ")", "\n", "ml_loss", "=", "ml_criterion", "(", "repr", ",", "centroid_repr", ",", "pred_cluster", ")", "\n", "# metric_loss = self.ml_criterion(repr)", "\n", "loss", "=", "ml_loss", "+", "0.1", "*", "rim_loss", "\n", "# loss = recon_loss + ml_loss + rim_loss", "\n", "#Compute the smoothed loss", "\n", "avg_loss", "=", "beta", "*", "avg_loss", "+", "(", "1", "-", "beta", ")", "*", "loss", ".", "item", "(", ")", "\n", "smoothed_loss", "=", "avg_loss", "/", "(", "1", "-", "beta", "**", "batch_num", ")", "\n", "#Stop if the loss is exploding", "\n", "if", "batch_num", ">", "1", "and", "smoothed_loss", ">", "4", "*", "best_loss", ":", "\n", "            ", "return", "log_lrs", ",", "losses", "\n", "#Record the best loss", "\n", "", "if", "smoothed_loss", "<", "best_loss", "or", "batch_num", "==", "1", ":", "\n", "            ", "best_loss", "=", "smoothed_loss", "\n", "#Store the values", "\n", "", "losses", ".", "append", "(", "smoothed_loss", ")", "\n", "log_lrs", ".", "append", "(", "math", ".", "log10", "(", "lr", ")", ")", "\n", "#Do the SGD step", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "#Update the lr for the next step", "\n", "lr", "*=", "mult", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "lr", "\n", "", "return", "log_lrs", ",", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.BaseCriterion.__init__": [[11, 15], ["torch.Module.__init__", "utils.AverageMeter"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.auto_enc_trainer.AutoEncocderTrainer.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BaseCriterion", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "device", "=", "None", "\n", "self", ".", "monitor", "=", "AverageMeter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.BaseCriterion.to": [[16, 19], ["super().to"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.BaseCriterion.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "super", "(", "BaseCriterion", ",", "self", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.BaseCriterion.forward": [[20, 22], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "input", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.BaseCriterion.update": [[23, 25], ["loss.BaseCriterion.monitor.update"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.utils.AverageMeter.update"], ["", "def", "update", "(", "self", ",", "value", ",", "size", ")", ":", "\n", "        ", "self", ".", "monitor", ".", "update", "(", "value", ",", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.BaseCriterion.name": [[26, 29], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "'_name'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.BaseCriterion.val": [[30, 33], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "val", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "monitor", ".", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.BaseCriterion.avg": [[34, 37], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "avg", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "monitor", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.BaseCriterion.clear_monitor": [[38, 40], ["utils.AverageMeter"], "methods", ["None"], ["", "def", "clear_monitor", "(", "self", ")", ":", "\n", "        ", "self", ".", "monitor", "=", "AverageMeter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.ClusterCriterion.__init__": [[45, 48], ["loss.BaseCriterion.__init__"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.auto_enc_trainer.AutoEncocderTrainer.__init__"], ["def", "__init__", "(", "self", ",", "mu", "=", "1", ")", ":", "\n", "        ", "super", "(", "ClusterCriterion", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mu", "=", "mu", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.ClusterCriterion.forward": [[49, 55], ["torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "utils.entropy", "utils.entropy", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "inp.size"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.utils.entropy", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.utils.entropy"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "p", "=", "torch", ".", "softmax", "(", "inp", ",", "dim", "=", "1", ")", "\n", "p_ave", "=", "torch", ".", "sum", "(", "p", ",", "dim", "=", "0", ")", "/", "inp", ".", "size", "(", "0", ")", "\n", "avg_entropy", "=", "entropy", "(", "p", ")", "\n", "entropy_avg", "=", "entropy", "(", "p_ave", ")", "\n", "return", "avg_entropy", "+", "(", "1", "-", "self", ".", "mu", "*", "entropy_avg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.BatchCriterion.__init__": [[63, 68], ["loss.BaseCriterion.__init__", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.auto_enc_trainer.AutoEncocderTrainer.__init__"], ["def", "__init__", "(", "self", ",", "neg_m", ",", "t", ",", "batch_size", ")", ":", "\n", "        ", "super", "(", "BatchCriterion", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "neg_m", "=", "neg_m", "\n", "self", ".", "t", "=", "t", "\n", "self", ".", "diag_mat", "=", "1", "-", "torch", ".", "eye", "(", "batch_size", "*", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.BatchCriterion.forward": [[69, 106], ["x.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.div", "torch.div", "torch.div", "torch.div", "all_prob.sum.repeat", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div.log_", "torch.div.log_", "torch.div.log_", "torch.div.log_", "torch.div.sum", "torch.div.sum", "torch.div.sum", "torch.div.sum", "torch.mm().div_().exp_", "torch.mm().div_().exp_", "torch.mm().div_().exp_", "torch.mm().div_().exp_", "loss.BatchCriterion.diag_mat.to", "all_prob.sum", "all_prob.sum.repeat.t", "torch.div.add", "torch.div.add", "torch.div.sum", "torch.div.sum", "x.narrow", "x.narrow", "torch.mm().div_", "torch.mm().div_", "torch.mm().div_", "torch.mm().div_", "all_prob.sum", "torch.div.add", "torch.div.add", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "x.t"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.BaseCriterion.to"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "\n", "# get positive innerproduct", "\n", "reordered_x", "=", "torch", ".", "cat", "(", "(", "x", ".", "narrow", "(", "0", ",", "batch_size", "//", "2", ",", "batch_size", "//", "2", ")", ",", "x", ".", "narrow", "(", "0", ",", "0", ",", "batch_size", "//", "2", ")", ")", ",", "0", ")", "\n", "# reordered_x = reordered_x.data", "\n", "pos", "=", "(", "x", "*", "reordered_x", ".", "data", ")", ".", "sum", "(", "1", ")", ".", "div_", "(", "self", ".", "t", ")", ".", "exp_", "(", ")", "\n", "\n", "# get all innerproduct, remove diag", "\n", "all_prob", "=", "torch", ".", "mm", "(", "x", ",", "x", ".", "t", "(", ")", ".", "data", ")", ".", "div_", "(", "self", ".", "t", ")", ".", "exp_", "(", ")", "*", "self", ".", "diag_mat", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "self", ".", "neg_m", "==", "1", ":", "\n", "            ", "all_div", "=", "all_prob", ".", "sum", "(", "1", ")", "\n", "", "else", ":", "\n", "# remove pos for neg", "\n", "            ", "all_div", "=", "(", "all_prob", ".", "sum", "(", "1", ")", "-", "pos", ")", "*", "self", ".", "neg_m", "+", "pos", "\n", "\n", "", "lnPmt", "=", "torch", ".", "div", "(", "pos", ",", "all_div", ")", "\n", "\n", "# negative probability", "\n", "Pon_div", "=", "all_div", ".", "repeat", "(", "batch_size", ",", "1", ")", "\n", "lnPon", "=", "torch", ".", "div", "(", "all_prob", ",", "Pon_div", ".", "t", "(", ")", ")", "\n", "lnPon", "=", "-", "lnPon", ".", "add", "(", "-", "1", ")", "\n", "\n", "# equation 7 in ref. A (NCE paper)", "\n", "lnPon", ".", "log_", "(", ")", "\n", "# also remove the pos term", "\n", "lnPon", "=", "lnPon", ".", "sum", "(", "1", ")", "-", "(", "-", "lnPmt", ".", "add", "(", "-", "1", ")", ")", ".", "log_", "(", ")", "\n", "lnPmt", ".", "log_", "(", ")", "\n", "\n", "lnPmtsum", "=", "lnPmt", ".", "sum", "(", "0", ")", "\n", "lnPonsum", "=", "lnPon", ".", "sum", "(", "0", ")", "\n", "\n", "# negative multiply m", "\n", "lnPonsum", "=", "lnPonsum", "*", "self", ".", "neg_m", "\n", "loss", "=", "-", "(", "lnPmtsum", "+", "lnPonsum", ")", "/", "batch_size", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.LossMonitor.__init__": [[109, 111], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "losses", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.LossMonitor.add_loss": [[112, 115], ["isinstance", "loss.LossMonitor.losses.append"], "methods", ["None"], ["", "def", "add_loss", "(", "self", ",", "loss", ")", ":", "\n", "        ", "assert", "isinstance", "(", "loss", ",", "BaseCriterion", ")", ",", "\"Not proper loss\"", "\n", "self", ".", "losses", ".", "append", "(", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.LossMonitor.summary": [[116, 121], ["None"], "methods", ["None"], ["", "def", "summary", "(", "self", ")", ":", "\n", "        ", "msg", "=", "''", "\n", "for", "loss", "in", "self", ".", "losses", ":", "\n", "            ", "msg", "+=", "'{loss.name} Loss: {loss.val:.4f} ({loss.avg:.4f})\\t'", ".", "format", "(", "loss", "=", "loss", ")", "\n", "", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.LossMonitor.clear": [[122, 125], ["loss.clear_monitor"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.BaseCriterion.clear_monitor"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "for", "loss", "in", "self", ".", "losses", ":", "\n", "            ", "loss", ".", "clear_monitor", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.LossMonitor.results": [[126, 132], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "results", "(", "self", ")", ":", "\n", "        ", "results", "=", "{", "}", "\n", "for", "loss", "in", "self", ".", "losses", ":", "\n", "            ", "results", "[", "loss", ".", "name", "]", "=", "loss", ".", "avg", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.CenterBatchCriterion.__init__": [[150, 156], ["loss.BaseCriterion.__init__", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.auto_enc_trainer.AutoEncocderTrainer.__init__"], ["def", "__init__", "(", "self", ",", "neg_m", ",", "t", ",", "batch_size", ",", "alpha", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "CenterBatchCriterion", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "neg_m", "=", "neg_m", "\n", "self", ".", "t", "=", "t", "\n", "self", ".", "diag_mat", "=", "1", "-", "torch", ".", "eye", "(", "batch_size", "*", "2", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.CenterBatchCriterion.forward": [[157, 204], ["x.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "create_mask().to", "torch.mm().div_().exp_", "torch.mm().div_().exp_", "torch.mm().div_().exp_", "torch.mm().div_().exp_", "torch.div", "torch.div", "torch.div", "torch.div", "torch.mm().div_().exp_.sum.repeat", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div.log_", "torch.div.log_", "torch.div.log_", "torch.div.log_", "torch.div.sum", "torch.div.sum", "torch.div.sum", "torch.div.sum", "torch.mm().div_().exp_.sum", "torch.mm().div_().exp_.sum", "centers.size", "all_prob.sum.repeat.t", "torch.div.add", "torch.div.add", "torch.div.sum", "torch.div.sum", "_lnPon.log_", "x.narrow", "x.narrow", "loss.create_mask", "torch.mm().div_", "torch.mm().div_", "torch.mm().div_", "torch.mm().div_", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm().div_().exp_.sum", "torch.mm().div_().exp_.sum", "centers.t"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.BaseCriterion.to", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.create_mask"], ["", "def", "forward", "(", "self", ",", "x", ",", "centers", ",", "targets", ")", ":", "\n", "        ", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "\n", "# get positive innerproduct", "\n", "reordered_x", "=", "torch", ".", "cat", "(", "(", "x", ".", "narrow", "(", "0", ",", "batch_size", "//", "2", ",", "batch_size", "//", "2", ")", ",", "\n", "x", ".", "narrow", "(", "0", ",", "0", ",", "batch_size", "//", "2", ")", ")", ",", "0", ")", "\n", "# reordered_x = reordered_x.data", "\n", "\n", "pos", "=", "(", "x", "*", "reordered_x", ".", "data", ")", ".", "sum", "(", "1", ")", ".", "div_", "(", "self", ".", "t", ")", ".", "exp_", "(", ")", "\n", "\n", "# reordered_x = reordered_x.data", "\n", "# pos = (x * reordered_x.data).sum(1).div_(self.t).exp_()", "\n", "\n", "# get all innerproduct, remove diag", "\n", "same_cluster_mask", "=", "create_mask", "(", "targets", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# all_prob_pos = torch.mm(x, x.t().data).div_(self.t).exp_() * self.diag_mat.to(self.device)", "\n", "all_prob", "=", "torch", ".", "mm", "(", "x", ",", "centers", ".", "t", "(", ")", ".", "data", ")", ".", "div_", "(", "self", ".", "t", ")", ".", "exp_", "(", ")", "\n", "\n", "if", "self", ".", "neg_m", "==", "1", ":", "\n", "# all_div_pos = all_prob_pos.sum(1)", "\n", "            ", "all_div", "=", "all_prob", ".", "sum", "(", "1", ")", "\n", "", "else", ":", "\n", "# remove pos for neg", "\n", "# all_div_pos = (all_prob_pos.sum(1) - pos) * self.neg_m + pos", "\n", "            ", "all_div", "=", "(", "all_prob", ".", "sum", "(", "1", ")", "-", "pos", ")", "*", "self", ".", "neg_m", "+", "pos", "\n", "\n", "", "lnPmt", "=", "torch", ".", "div", "(", "pos", ",", "all_div", ")", "\n", "# negative probability", "\n", "Pon_div", "=", "all_div", ".", "repeat", "(", "centers", ".", "size", "(", "0", ")", ",", "1", ")", "\n", "lnPon", "=", "torch", ".", "div", "(", "all_prob", ",", "Pon_div", ".", "t", "(", ")", ")", "\n", "lnPon", "=", "-", "lnPon", ".", "add", "(", "-", "1", ")", "\n", "# prob of image and its centroid", "\n", "_lnPon", "=", "lnPon", "[", "same_cluster_mask", "==", "0", "]", "\n", "# equation 7 in ref. A (NCE paper)", "\n", "lnPon", ".", "log_", "(", ")", "\n", "# also remove the pos term", "\n", "lnPon", "=", "lnPon", ".", "sum", "(", "1", ")", "-", "_lnPon", ".", "log_", "(", ")", "\n", "lnPmt", ".", "log_", "(", ")", "\n", "\n", "lnPmtsum", "=", "lnPmt", ".", "sum", "(", "0", ")", "\n", "lnPonsum", "=", "lnPon", ".", "sum", "(", "0", ")", "\n", "\n", "# negative multiply m", "\n", "lnPonsum", "=", "lnPonsum", "*", "self", ".", "neg_m", "\n", "loss", "=", "-", "(", "lnPmtsum", "+", "self", ".", "alpha", "*", "lnPonsum", ")", "/", "batch_size", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.ReconstructCriterion.__init__": [[209, 212], ["loss.BaseCriterion.__init__", "torch.MSELoss", "torch.MSELoss"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.auto_enc_trainer.AutoEncocderTrainer.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ReconstructCriterion", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "criterion", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.ReconstructCriterion.forward": [[213, 215], ["loss.ReconstructCriterion.criterion"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "return", "self", ".", "criterion", "(", "inputs", ",", "targets", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.create_mask": [[134, 142], ["torch.unique", "torch.unique", "len", "len", "torch.ones", "torch.ones", "torch.unique.expand", "pred_cluster.view"], "function", ["None"], ["", "", "def", "create_mask", "(", "pred_cluster", ")", ":", "\n", "    ", "unique_cluster", "=", "torch", ".", "unique", "(", "pred_cluster", ")", "\n", "n", "=", "len", "(", "pred_cluster", ")", "\n", "m", "=", "len", "(", "unique_cluster", ")", "\n", "mask", "=", "torch", ".", "ones", "(", "n", ",", "m", ")", "\n", "exp_cluster", "=", "unique_cluster", ".", "expand", "(", "n", ",", "m", ")", "\n", "mask", "[", "exp_cluster", "==", "pred_cluster", ".", "view", "(", "n", ",", "1", ")", "]", "=", "0", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.autoencoder.NormalizeInverse.__init__": [[22, 28], ["torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torchvision.transforms.Normalize.__init__"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.auto_enc_trainer.AutoEncocderTrainer.__init__"], ["def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "mean", "=", "torch", ".", "as_tensor", "(", "mean", ")", "\n", "std", "=", "torch", ".", "as_tensor", "(", "std", ")", "\n", "std_inv", "=", "1", "/", "(", "std", "+", "1e-7", ")", "\n", "mean_inv", "=", "-", "mean", "*", "std_inv", "\n", "super", "(", ")", ".", "__init__", "(", "mean", "=", "mean_inv", ",", "std", "=", "std_inv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.autoencoder.NormalizeInverse.__call__": [[29, 31], ["super().__call__", "tensor.clone"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.augmentation.auto_augment.Cutout.__call__"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "return", "super", "(", ")", ".", "__call__", "(", "tensor", ".", "clone", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.utils.AverageMeter.__init__": [[38, 40], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.utils.AverageMeter.reset": [[41, 46], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.utils.AverageMeter.update": [[47, 52], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.utils.LossLogger.__init__": [[174, 177], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "iter", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.utils.LossLogger.add_scalar": [[178, 181], ["writer.add_scalar"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.utils.LossLogger.add_scalar"], ["", "def", "add_scalar", "(", "self", ",", "writer", ",", "value", ")", ":", "\n", "        ", "writer", ".", "add_scalar", "(", "self", ".", "name", ",", "value", ",", "self", ".", "iter", ")", "\n", "self", ".", "iter", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.utils.NormalizeInverse.__init__": [[203, 209], ["torch.as_tensor", "torch.as_tensor", "torchvision.transforms.Normalize.__init__"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.auto_enc_trainer.AutoEncocderTrainer.__init__"], ["def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "mean", "=", "torch", ".", "as_tensor", "(", "mean", ")", "\n", "std", "=", "torch", ".", "as_tensor", "(", "std", ")", "\n", "std_inv", "=", "1", "/", "(", "std", "+", "1e-7", ")", "\n", "mean_inv", "=", "-", "mean", "*", "std_inv", "\n", "super", "(", ")", ".", "__init__", "(", "mean", "=", "mean_inv", ",", "std", "=", "std_inv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.utils.NormalizeInverse.__call__": [[210, 212], ["super().__call__", "tensor.clone"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.augmentation.auto_augment.Cutout.__call__"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "return", "super", "(", ")", ".", "__call__", "(", "tensor", ".", "clone", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.utils.get_data": [[11, 33], ["os.path.join", "open", "os.path.join", "imgs.append", "labels.append", "line.strip", "os.path.split", "cls_to_id.index", "len", "cls_to_id.append"], "function", ["None"], ["def", "get_data", "(", "root", ",", "train", "=", "True", ")", ":", "\n", "    ", "if", "train", ":", "\n", "        ", "split", "=", "'train.txt'", "\n", "", "else", ":", "\n", "        ", "split", "=", "'test.txt'", "\n", "\n", "", "split_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "split", ")", "\n", "imgs", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "cls_to_id", "=", "[", "]", "\n", "with", "open", "(", "split_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "img_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'images'", ",", "line", ".", "strip", "(", ")", ")", "\n", "cls_name", "=", "os", ".", "path", ".", "split", "(", "line", ")", "[", "0", "]", "\n", "if", "cls_name", "in", "cls_to_id", ":", "\n", "                ", "target", "=", "cls_to_id", ".", "index", "(", "cls_name", ")", "\n", "", "else", ":", "\n", "                ", "target", "=", "len", "(", "cls_to_id", ")", "\n", "cls_to_id", ".", "append", "(", "cls_name", ")", "\n", "", "imgs", ".", "append", "(", "img_path", ")", "\n", "labels", ".", "append", "(", "target", ")", "\n", "", "", "return", "imgs", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.utils.eval_recall_numpy": [[53, 66], ["numpy.asarray", "numpy.asarray", "numpy.sum", "range", "numpy.argmin", "float", "float", "numpy.squeeze", "numpy.matmul"], "function", ["None"], ["", "", "def", "eval_recall_numpy", "(", "embedding", ",", "label", ")", ":", "\n", "    ", "embedding", "=", "np", ".", "asarray", "(", "embedding", ")", "\n", "label", "=", "np", ".", "asarray", "(", "label", ")", "\n", "norm", "=", "np", ".", "sum", "(", "embedding", "*", "embedding", ",", "axis", "=", "1", ")", "\n", "right_num", "=", "0", "\n", "for", "i", "in", "range", "(", "embedding", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "dis", "=", "norm", "[", "i", "]", "+", "norm", "-", "2", "*", "np", ".", "squeeze", "(", "np", ".", "matmul", "(", "embedding", "[", "i", "]", ",", "embedding", ".", "T", ")", ")", "\n", "dis", "[", "i", "]", "=", "1e10", "\n", "pred", "=", "np", ".", "argmin", "(", "dis", ")", "\n", "if", "label", "[", "i", "]", "==", "label", "[", "pred", "]", ":", "\n", "            ", "right_num", "=", "right_num", "+", "1", "\n", "", "", "recall", "=", "float", "(", "right_num", ")", "/", "float", "(", "embedding", ".", "shape", "[", "0", "]", ")", "\n", "return", "recall", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.utils.eval_recall": [[67, 78], ["torch.sum", "range", "embedding.size", "torch.argmin", "float", "float", "embedding.size", "numpy.squeeze", "numpy.matmul", "embedding.t"], "function", ["None"], ["", "def", "eval_recall", "(", "embedding", ",", "label", ")", ":", "\n", "    ", "norm", "=", "torch", ".", "sum", "(", "embedding", "*", "embedding", ",", "dim", "=", "1", ")", "\n", "right_num", "=", "0", "\n", "for", "i", "in", "range", "(", "embedding", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "dis", "=", "norm", "[", "i", "]", "+", "norm", "-", "2", "*", "np", ".", "squeeze", "(", "np", ".", "matmul", "(", "embedding", "[", "i", "]", ",", "embedding", ".", "t", "(", ")", ")", ")", "\n", "dis", "[", "i", "]", "=", "1e10", "\n", "pred", "=", "torch", ".", "argmin", "(", "dis", ")", "\n", "if", "label", "[", "i", "]", "==", "label", "[", "pred", "]", ":", "\n", "            ", "right_num", "=", "right_num", "+", "1", "\n", "", "", "recall", "=", "float", "(", "right_num", ")", "/", "float", "(", "embedding", ".", "size", "(", "0", ")", ")", "\n", "return", "recall", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.utils.eval_nmi": [[93, 109], ["numpy.unique", "len", "numpy.array", "sklearn.cluster.KMeans.fit", "sklearn.cluster.KMeans.predict", "sklearn.metrics.cluster.normalized_mutual_info_score", "range", "sklearn.cluster.KMeans", "sklearn.cluster.KMeans", "numpy.sqrt", "numpy.sum"], "function", ["None"], ["", "def", "eval_nmi", "(", "embedding", ",", "label", ",", "normed_flag", "=", "False", ",", "fast_kmeans", "=", "False", ")", ":", "\n", "    ", "unique_id", "=", "np", ".", "unique", "(", "label", ")", "\n", "num_category", "=", "len", "(", "unique_id", ")", "\n", "if", "normed_flag", ":", "\n", "        ", "for", "i", "in", "range", "(", "embedding", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "embedding", "[", "i", ",", ":", "]", "=", "embedding", "[", "i", ",", ":", "]", "/", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "embedding", "[", "i", ",", ":", "]", "**", "2", ")", "+", "1e-4", ")", "\n", "", "", "if", "fast_kmeans", ":", "\n", "        ", "kmeans", "=", "KMeans", "(", "n_clusters", "=", "num_category", ",", "n_init", "=", "1", ",", "n_jobs", "=", "8", ")", "\n", "", "else", ":", "\n", "        ", "kmeans", "=", "KMeans", "(", "n_clusters", "=", "num_category", ",", "n_jobs", "=", "8", ")", "\n", "\n", "", "embedding", "=", "np", ".", "array", "(", "embedding", ")", "\n", "kmeans", ".", "fit", "(", "embedding", ")", "\n", "y_kmeans_pred", "=", "kmeans", ".", "predict", "(", "embedding", ")", "\n", "nmi", "=", "normalized_mutual_info_score", "(", "label", ",", "y_kmeans_pred", ",", "average_method", "=", "'arithmetic'", ")", "\n", "return", "nmi", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.utils.eval_recall_K": [[111, 136], ["numpy.sum", "numpy.zeros", "range", "range", "len", "numpy.argsort", "range", "float", "numpy.max", "numpy.squeeze", "numpy.matmul"], "function", ["None"], ["", "def", "eval_recall_K", "(", "embedding", ",", "label", ",", "K_list", "=", "None", ")", ":", "\n", "    ", "if", "K_list", "is", "None", ":", "\n", "        ", "K_list", "=", "[", "1", ",", "2", ",", "4", ",", "8", "]", "\n", "", "norm", "=", "np", ".", "sum", "(", "embedding", "*", "embedding", ",", "axis", "=", "1", ")", "\n", "right_num", "=", "0", "\n", "\n", "recall_list", "=", "np", ".", "zeros", "(", "len", "(", "K_list", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "embedding", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "dis", "=", "norm", "[", "i", "]", "+", "norm", "-", "2", "*", "np", ".", "squeeze", "(", "np", ".", "matmul", "(", "embedding", "[", "i", "]", ",", "embedding", ".", "T", ")", ")", "\n", "dis", "[", "i", "]", "=", "1e10", "\n", "index", "=", "np", ".", "argsort", "(", "dis", ")", "\n", "list_index", "=", "0", "\n", "for", "k", "in", "range", "(", "np", ".", "max", "(", "K_list", ")", ")", ":", "\n", "            ", "if", "label", "[", "i", "]", "==", "label", "[", "index", "[", "k", "]", "]", ":", "\n", "                ", "recall_list", "[", "list_index", "]", "=", "recall_list", "[", "list_index", "]", "+", "1", "\n", "break", "\n", "", "if", "k", ">=", "K_list", "[", "list_index", "]", "-", "1", ":", "\n", "                ", "list_index", "=", "list_index", "+", "1", "\n", "", "", "", "recall_list", "=", "recall_list", "/", "float", "(", "embedding", ".", "shape", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "recall_list", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "if", "i", "==", "0", ":", "\n", "            ", "continue", "\n", "", "recall_list", "[", "i", "]", "=", "recall_list", "[", "i", "]", "+", "recall_list", "[", "i", "-", "1", "]", "\n", "", "return", "recall_list", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.utils.bestMap": [[141, 165], ["numpy.array", "numpy.array", "numpy.unique", "np.unique.__len__", "numpy.unique", "np.unique.__len__", "max", "numpy.zeros", "range", "numpy.zeros", "range", "sklearn.metrics.accuracy_score", "np.array.__len__", "np.array.__len__", "print", "range", "sklearn.utils.linear_assignment_.linear_assignment", "np.array.__len__", "[].__len__", "numpy.nonzero", "len", "numpy.nonzero"], "function", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.dataset.MLDataInstance.__len__", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.dataset.MLDataInstance.__len__", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.dataset.MLDataInstance.__len__", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.dataset.MLDataInstance.__len__", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.dataset.MLDataInstance.__len__", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.dataset.MLDataInstance.__len__"], ["def", "bestMap", "(", "L1", ",", "L2", ")", ":", "\n", "# compute the accuracy", "\n", "    ", "if", "L1", ".", "__len__", "(", ")", "!=", "L2", ".", "__len__", "(", ")", ":", "\n", "        ", "print", "(", "'size(L1) must == size(L2)'", ")", "\n", "", "L1", "=", "np", ".", "array", "(", "L1", ")", "\n", "L2", "=", "np", ".", "array", "(", "L2", ")", "\n", "Label1", "=", "np", ".", "unique", "(", "L1", ")", "\n", "nClass1", "=", "Label1", ".", "__len__", "(", ")", "\n", "Label2", "=", "np", ".", "unique", "(", "L2", ")", "\n", "nClass2", "=", "Label2", ".", "__len__", "(", ")", "\n", "nClass", "=", "max", "(", "nClass1", ",", "nClass2", ")", "\n", "G", "=", "np", ".", "zeros", "(", "(", "nClass", ",", "nClass", ")", ")", "\n", "for", "i", "in", "range", "(", "nClass1", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "nClass2", ")", ":", "\n", "            ", "G", "[", "i", "]", "[", "j", "]", "=", "np", ".", "nonzero", "(", "(", "L1", "==", "Label1", "[", "i", "]", ")", "*", "(", "L2", "==", "Label2", "[", "j", "]", ")", ")", "[", "0", "]", ".", "__len__", "(", ")", "\n", "\n", "", "", "c", "=", "linear_assignment_", ".", "linear_assignment", "(", "-", "G", ".", "T", ")", "[", ":", ",", "1", "]", "\n", "newL2", "=", "np", ".", "zeros", "(", "L2", ".", "__len__", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "nClass2", ")", ":", "\n", "        ", "for", "j", "in", "np", ".", "nonzero", "(", "L2", "==", "Label2", "[", "i", "]", ")", "[", "0", "]", ":", "\n", "            ", "if", "len", "(", "Label1", ")", ">", "c", "[", "i", "]", ":", "\n", "                ", "newL2", "[", "j", "]", "=", "Label1", "[", "c", "[", "i", "]", "]", "\n", "\n", "", "", "", "return", "accuracy_score", "(", "L1", ",", "newL2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.utils.l2norm": [[167, 171], ["x.div.pow().sum().pow", "x.div.div", "x.div.pow().sum", "x.div.pow"], "function", ["None"], ["", "def", "l2norm", "(", "x", ")", ":", "\n", "    ", "out", "=", "x", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "pow", "(", "1", "/", "2", ")", "\n", "x", "=", "x", ".", "div", "(", "out", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.utils.entropy": [[183, 191], ["len", "p.size", "float", "len", "numpy.log", "len", "p.size", "numpy.log", "torch.sum", "len", "torch.sum", "len", "torch.log", "torch.log"], "function", ["None"], ["", "", "def", "entropy", "(", "p", ")", ":", "\n", "# compute entropy", "\n", "    ", "if", "(", "len", "(", "p", ".", "size", "(", ")", ")", ")", "==", "2", ":", "\n", "        ", "return", "-", "torch", ".", "sum", "(", "p", "*", "torch", ".", "log", "(", "p", "+", "1e-18", ")", ")", "/", "np", ".", "log", "(", "len", "(", "p", ")", ")", "/", "float", "(", "len", "(", "p", ")", ")", "\n", "", "elif", "(", "len", "(", "p", ".", "size", "(", ")", ")", ")", "==", "1", ":", "\n", "        ", "return", "-", "torch", ".", "sum", "(", "p", "*", "torch", ".", "log", "(", "p", "+", "1e-18", ")", ")", "/", "np", ".", "log", "(", "len", "(", "p", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.utils.freeze_module": [[193, 196], ["module.parameters"], "function", ["None"], ["", "", "def", "freeze_module", "(", "module", ")", ":", "\n", "    ", "for", "param", "in", "module", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.augmentation.iaa_augment.sometimes": [[7, 9], ["imgaug.augmenters.Sometimes"], "function", ["None"], ["def", "sometimes", "(", "aug", ")", ":", "\n", "    ", "return", "iaa", ".", "Sometimes", "(", "0.5", ",", "aug", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.augmentation.iaa_augment.get_policy": [[11, 16], ["augmentation.auto_augment.AutoAugment"], "function", ["None"], ["", "def", "get_policy", "(", "name", ")", ":", "\n", "    ", "if", "name", "==", "'auto'", ":", "\n", "        ", "return", "AutoAugment", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "iaa_augment", ".", "augment_image", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.augmentation.auto_augment.AutoAugment.__init__": [[9, 25], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "policies", "=", "[", "\n", "# ['Invert', 0.1, 7, 'Contrast', 0.2, 6],", "\n", "[", "'Rotate'", ",", "0.7", ",", "2", ",", "'TranslateX'", ",", "0.3", ",", "9", "]", ",", "\n", "[", "'Sharpness'", ",", "0.8", ",", "1", ",", "'Sharpness'", ",", "0.9", ",", "3", "]", ",", "\n", "[", "'ShearY'", ",", "0.5", ",", "8", ",", "'TranslateY'", ",", "0.7", ",", "9", "]", ",", "\n", "# ['AutoContrast', 0.5, 8, 'Equalize', 0.9, 2],", "\n", "# ['ShearY', 0.2, 7, 'Posterize', 0.3, 7],", "\n", "[", "'Color'", ",", "0.4", ",", "3", ",", "'Brightness'", ",", "0.6", ",", "7", "]", ",", "\n", "[", "'Sharpness'", ",", "0.3", ",", "9", ",", "'Brightness'", ",", "0.7", ",", "9", "]", ",", "\n", "# ['Equalize', 0.6, 5, 'Equalize', 0.5, 1],", "\n", "[", "'Contrast'", ",", "0.6", ",", "7", ",", "'Sharpness'", ",", "0.6", ",", "5", "]", ",", "\n", "[", "'Color'", ",", "0.7", ",", "7", ",", "'TranslateX'", ",", "0.5", ",", "8", "]", ",", "\n", "[", "'Equalize'", ",", "0.3", ",", "7", ",", "'AutoContrast'", ",", "0.4", ",", "8", "]", ",", "\n", "[", "'TranslateY'", ",", "0.4", ",", "3", ",", "'Sharpness'", ",", "0.2", ",", "6", "]", ",", "\n", "[", "'Brightness'", ",", "0.9", ",", "6", ",", "'Color'", ",", "0.2", ",", "8", "]", ",", "\n", "# ['Solarize', 0.5, 2, 'Invert', 0, 0.3],", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.augmentation.auto_augment.AutoAugment.__call__": [[38, 41], ["auto_augment.apply_policy", "random.randrange", "len"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.augmentation.auto_augment.apply_policy"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "apply_policy", "(", "img", ",", "self", ".", "policies", "[", "random", ".", "randrange", "(", "len", "(", "self", ".", "policies", ")", ")", "]", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.augmentation.auto_augment.Cutout.__init__": [[252, 254], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "length", "=", "16", ")", ":", "\n", "        ", "self", ".", "length", "=", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.augmentation.auto_augment.Cutout.__call__": [[255, 273], ["numpy.array", "PIL.Image.fromarray.mean", "numpy.random.randint", "numpy.random.randint", "PIL.Image.fromarray"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "\n", "mask_val", "=", "img", ".", "mean", "(", ")", "\n", "\n", "top", "=", "np", ".", "random", ".", "randint", "(", "0", "-", "self", ".", "length", "//", "2", ",", "img", ".", "shape", "[", "0", "]", "-", "self", ".", "length", ")", "\n", "left", "=", "np", ".", "random", ".", "randint", "(", "0", "-", "self", ".", "length", "//", "2", ",", "img", ".", "shape", "[", "1", "]", "-", "self", ".", "length", ")", "\n", "bottom", "=", "top", "+", "self", ".", "length", "\n", "right", "=", "left", "+", "self", ".", "length", "\n", "\n", "top", "=", "0", "if", "top", "<", "0", "else", "top", "\n", "left", "=", "0", "if", "left", "<", "0", "else", "top", "\n", "\n", "img", "[", "top", ":", "bottom", ",", "left", ":", "right", ",", ":", "]", "=", "mask_val", "\n", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "\n", "return", "img", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.augmentation.auto_augment.apply_policy": [[62, 69], ["random.random", "random.random"], "function", ["None"], ["def", "apply_policy", "(", "img", ",", "policy", ")", ":", "\n", "    ", "if", "random", ".", "random", "(", ")", "<", "policy", "[", "1", "]", ":", "\n", "        ", "img", "=", "operations", "[", "policy", "[", "0", "]", "]", "(", "img", ",", "policy", "[", "2", "]", ")", "\n", "", "if", "random", ".", "random", "(", ")", "<", "policy", "[", "4", "]", ":", "\n", "        ", "img", "=", "operations", "[", "policy", "[", "3", "]", "]", "(", "img", ",", "policy", "[", "5", "]", ")", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.augmentation.auto_augment.transform_matrix_offset_center": [[71, 78], ["numpy.array", "numpy.array", "float", "float"], "function", ["None"], ["", "def", "transform_matrix_offset_center", "(", "matrix", ",", "x", ",", "y", ")", ":", "\n", "    ", "o_x", "=", "float", "(", "x", ")", "/", "2", "+", "0.5", "\n", "o_y", "=", "float", "(", "y", ")", "/", "2", "+", "0.5", "\n", "offset_matrix", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "o_x", "]", ",", "[", "0", ",", "1", ",", "o_y", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "reset_matrix", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "-", "o_x", "]", ",", "[", "0", ",", "1", ",", "-", "o_y", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "transform_matrix", "=", "offset_matrix", "@", "matrix", "@", "reset_matrix", "\n", "return", "transform_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.augmentation.auto_augment.shear_x": [[80, 96], ["numpy.array", "numpy.linspace", "numpy.array", "auto_augment.transform_matrix_offset_center", "numpy.stack", "PIL.Image.fromarray", "scipy.ndimage.interpolation.affine_transform", "random.uniform", "range"], "function", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.augmentation.auto_augment.transform_matrix_offset_center"], ["", "def", "shear_x", "(", "img", ",", "magnitude", ")", ":", "\n", "    ", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "magnitudes", "=", "np", ".", "linspace", "(", "-", "0.3", ",", "0.3", ",", "11", ")", "\n", "\n", "transform_matrix", "=", "np", ".", "array", "(", "[", "[", "1", ",", "random", ".", "uniform", "(", "magnitudes", "[", "magnitude", "]", ",", "magnitudes", "[", "magnitude", "+", "1", "]", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "transform_matrix", "=", "transform_matrix_offset_center", "(", "transform_matrix", ",", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", ")", "\n", "affine_matrix", "=", "transform_matrix", "[", ":", "2", ",", ":", "2", "]", "\n", "offset", "=", "transform_matrix", "[", ":", "2", ",", "2", "]", "\n", "img", "=", "np", ".", "stack", "(", "[", "ndimage", ".", "interpolation", ".", "affine_transform", "(", "\n", "img", "[", ":", ",", ":", ",", "c", "]", ",", "\n", "affine_matrix", ",", "\n", "offset", ")", "for", "c", "in", "range", "(", "img", ".", "shape", "[", "2", "]", ")", "]", ",", "axis", "=", "2", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.augmentation.auto_augment.shear_y": [[98, 114], ["numpy.array", "numpy.linspace", "numpy.array", "auto_augment.transform_matrix_offset_center", "numpy.stack", "PIL.Image.fromarray", "scipy.ndimage.interpolation.affine_transform", "random.uniform", "range"], "function", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.augmentation.auto_augment.transform_matrix_offset_center"], ["", "def", "shear_y", "(", "img", ",", "magnitude", ")", ":", "\n", "    ", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "magnitudes", "=", "np", ".", "linspace", "(", "-", "0.3", ",", "0.3", ",", "11", ")", "\n", "\n", "transform_matrix", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "random", ".", "uniform", "(", "magnitudes", "[", "magnitude", "]", ",", "magnitudes", "[", "magnitude", "+", "1", "]", ")", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "transform_matrix", "=", "transform_matrix_offset_center", "(", "transform_matrix", ",", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", ")", "\n", "affine_matrix", "=", "transform_matrix", "[", ":", "2", ",", ":", "2", "]", "\n", "offset", "=", "transform_matrix", "[", ":", "2", ",", "2", "]", "\n", "img", "=", "np", ".", "stack", "(", "[", "ndimage", ".", "interpolation", ".", "affine_transform", "(", "\n", "img", "[", ":", ",", ":", ",", "c", "]", ",", "\n", "affine_matrix", ",", "\n", "offset", ")", "for", "c", "in", "range", "(", "img", ".", "shape", "[", "2", "]", ")", "]", ",", "axis", "=", "2", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.augmentation.auto_augment.translate_x": [[116, 132], ["numpy.array", "numpy.linspace", "numpy.array", "auto_augment.transform_matrix_offset_center", "numpy.stack", "PIL.Image.fromarray", "scipy.ndimage.interpolation.affine_transform", "range", "random.uniform"], "function", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.augmentation.auto_augment.transform_matrix_offset_center"], ["", "def", "translate_x", "(", "img", ",", "magnitude", ")", ":", "\n", "    ", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "magnitudes", "=", "np", ".", "linspace", "(", "-", "150", "/", "331", ",", "150", "/", "331", ",", "11", ")", "\n", "\n", "transform_matrix", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "img", ".", "shape", "[", "1", "]", "*", "random", ".", "uniform", "(", "magnitudes", "[", "magnitude", "]", ",", "magnitudes", "[", "magnitude", "+", "1", "]", ")", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "transform_matrix", "=", "transform_matrix_offset_center", "(", "transform_matrix", ",", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", ")", "\n", "affine_matrix", "=", "transform_matrix", "[", ":", "2", ",", ":", "2", "]", "\n", "offset", "=", "transform_matrix", "[", ":", "2", ",", "2", "]", "\n", "img", "=", "np", ".", "stack", "(", "[", "ndimage", ".", "interpolation", ".", "affine_transform", "(", "\n", "img", "[", ":", ",", ":", ",", "c", "]", ",", "\n", "affine_matrix", ",", "\n", "offset", ")", "for", "c", "in", "range", "(", "img", ".", "shape", "[", "2", "]", ")", "]", ",", "axis", "=", "2", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.augmentation.auto_augment.translate_y": [[134, 150], ["numpy.array", "numpy.linspace", "numpy.array", "auto_augment.transform_matrix_offset_center", "numpy.stack", "PIL.Image.fromarray", "scipy.ndimage.interpolation.affine_transform", "range", "random.uniform"], "function", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.augmentation.auto_augment.transform_matrix_offset_center"], ["", "def", "translate_y", "(", "img", ",", "magnitude", ")", ":", "\n", "    ", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "magnitudes", "=", "np", ".", "linspace", "(", "-", "150", "/", "331", ",", "150", "/", "331", ",", "11", ")", "\n", "\n", "transform_matrix", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "img", ".", "shape", "[", "0", "]", "*", "random", ".", "uniform", "(", "magnitudes", "[", "magnitude", "]", ",", "magnitudes", "[", "magnitude", "+", "1", "]", ")", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "transform_matrix", "=", "transform_matrix_offset_center", "(", "transform_matrix", ",", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", ")", "\n", "affine_matrix", "=", "transform_matrix", "[", ":", "2", ",", ":", "2", "]", "\n", "offset", "=", "transform_matrix", "[", ":", "2", ",", "2", "]", "\n", "img", "=", "np", ".", "stack", "(", "[", "ndimage", ".", "interpolation", ".", "affine_transform", "(", "\n", "img", "[", ":", ",", ":", ",", "c", "]", ",", "\n", "affine_matrix", ",", "\n", "offset", ")", "for", "c", "in", "range", "(", "img", ".", "shape", "[", "2", "]", ")", "]", ",", "axis", "=", "2", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.augmentation.auto_augment.rotate": [[152, 168], ["numpy.array", "numpy.linspace", "numpy.deg2rad", "numpy.array", "auto_augment.transform_matrix_offset_center", "numpy.stack", "PIL.Image.fromarray", "random.uniform", "scipy.ndimage.interpolation.affine_transform", "numpy.cos", "numpy.sin", "numpy.cos", "range", "numpy.sin"], "function", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.augmentation.auto_augment.transform_matrix_offset_center"], ["", "def", "rotate", "(", "img", ",", "magnitude", ")", ":", "\n", "    ", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "magnitudes", "=", "np", ".", "linspace", "(", "-", "30", ",", "30", ",", "11", ")", "\n", "theta", "=", "np", ".", "deg2rad", "(", "random", ".", "uniform", "(", "magnitudes", "[", "magnitude", "]", ",", "magnitudes", "[", "magnitude", "+", "1", "]", ")", ")", "\n", "transform_matrix", "=", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "theta", ")", ",", "-", "np", ".", "sin", "(", "theta", ")", ",", "0", "]", ",", "\n", "[", "np", ".", "sin", "(", "theta", ")", ",", "np", ".", "cos", "(", "theta", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "transform_matrix", "=", "transform_matrix_offset_center", "(", "transform_matrix", ",", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", ")", "\n", "affine_matrix", "=", "transform_matrix", "[", ":", "2", ",", ":", "2", "]", "\n", "offset", "=", "transform_matrix", "[", ":", "2", ",", "2", "]", "\n", "img", "=", "np", ".", "stack", "(", "[", "ndimage", ".", "interpolation", ".", "affine_transform", "(", "\n", "img", "[", ":", ",", ":", ",", "c", "]", ",", "\n", "affine_matrix", ",", "\n", "offset", ")", "for", "c", "in", "range", "(", "img", ".", "shape", "[", "2", "]", ")", "]", ",", "axis", "=", "2", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.augmentation.auto_augment.auto_contrast": [[170, 173], ["PIL.ImageOps.autocontrast"], "function", ["None"], ["", "def", "auto_contrast", "(", "img", ",", "magnitude", ")", ":", "\n", "    ", "img", "=", "ImageOps", ".", "autocontrast", "(", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.augmentation.auto_augment.invert": [[175, 178], ["PIL.ImageOps.invert"], "function", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.augmentation.auto_augment.invert"], ["", "def", "invert", "(", "img", ",", "magnitude", ")", ":", "\n", "    ", "img", "=", "ImageOps", ".", "invert", "(", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.augmentation.auto_augment.equalize": [[180, 183], ["PIL.ImageOps.equalize"], "function", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.augmentation.auto_augment.equalize"], ["", "def", "equalize", "(", "img", ",", "magnitude", ")", ":", "\n", "    ", "img", "=", "ImageOps", ".", "equalize", "(", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.augmentation.auto_augment.solarize": [[185, 189], ["numpy.linspace", "PIL.ImageOps.solarize", "random.uniform"], "function", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.augmentation.auto_augment.solarize"], ["", "def", "solarize", "(", "img", ",", "magnitude", ")", ":", "\n", "    ", "magnitudes", "=", "np", ".", "linspace", "(", "0", ",", "256", ",", "11", ")", "\n", "img", "=", "ImageOps", ".", "solarize", "(", "img", ",", "random", ".", "uniform", "(", "magnitudes", "[", "magnitude", "]", ",", "magnitudes", "[", "magnitude", "+", "1", "]", ")", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.augmentation.auto_augment.posterize": [[191, 195], ["numpy.linspace", "PIL.ImageOps.posterize", "int", "round", "random.uniform"], "function", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.augmentation.auto_augment.posterize"], ["", "def", "posterize", "(", "img", ",", "magnitude", ")", ":", "\n", "    ", "magnitudes", "=", "np", ".", "linspace", "(", "4", ",", "8", ",", "11", ")", "\n", "img", "=", "ImageOps", ".", "posterize", "(", "img", ",", "int", "(", "round", "(", "random", ".", "uniform", "(", "magnitudes", "[", "magnitude", "]", ",", "magnitudes", "[", "magnitude", "+", "1", "]", ")", ")", ")", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.augmentation.auto_augment.contrast": [[197, 201], ["numpy.linspace", "PIL.ImageEnhance.Contrast().enhance", "random.uniform", "PIL.ImageEnhance.Contrast"], "function", ["None"], ["", "def", "contrast", "(", "img", ",", "magnitude", ")", ":", "\n", "    ", "magnitudes", "=", "np", ".", "linspace", "(", "0.1", ",", "1.9", ",", "11", ")", "\n", "img", "=", "ImageEnhance", ".", "Contrast", "(", "img", ")", ".", "enhance", "(", "random", ".", "uniform", "(", "magnitudes", "[", "magnitude", "]", ",", "magnitudes", "[", "magnitude", "+", "1", "]", ")", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.augmentation.auto_augment.color": [[203, 207], ["numpy.linspace", "PIL.ImageEnhance.Color().enhance", "random.uniform", "PIL.ImageEnhance.Color"], "function", ["None"], ["", "def", "color", "(", "img", ",", "magnitude", ")", ":", "\n", "    ", "magnitudes", "=", "np", ".", "linspace", "(", "0.1", ",", "1.9", ",", "11", ")", "\n", "img", "=", "ImageEnhance", ".", "Color", "(", "img", ")", ".", "enhance", "(", "random", ".", "uniform", "(", "magnitudes", "[", "magnitude", "]", ",", "magnitudes", "[", "magnitude", "+", "1", "]", ")", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.augmentation.auto_augment.brightness": [[209, 213], ["numpy.linspace", "PIL.ImageEnhance.Brightness().enhance", "random.uniform", "PIL.ImageEnhance.Brightness"], "function", ["None"], ["", "def", "brightness", "(", "img", ",", "magnitude", ")", ":", "\n", "    ", "magnitudes", "=", "np", ".", "linspace", "(", "0.1", ",", "1.9", ",", "11", ")", "\n", "img", "=", "ImageEnhance", ".", "Brightness", "(", "img", ")", ".", "enhance", "(", "random", ".", "uniform", "(", "magnitudes", "[", "magnitude", "]", ",", "magnitudes", "[", "magnitude", "+", "1", "]", ")", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.augmentation.auto_augment.sharpness": [[215, 219], ["numpy.linspace", "PIL.ImageEnhance.Sharpness().enhance", "random.uniform", "PIL.ImageEnhance.Sharpness"], "function", ["None"], ["", "def", "sharpness", "(", "img", ",", "magnitude", ")", ":", "\n", "    ", "magnitudes", "=", "np", ".", "linspace", "(", "0.1", ",", "1.9", ",", "11", ")", "\n", "img", "=", "ImageEnhance", ".", "Sharpness", "(", "img", ")", ".", "enhance", "(", "random", ".", "uniform", "(", "magnitudes", "[", "magnitude", "]", ",", "magnitudes", "[", "magnitude", "+", "1", "]", ")", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.augmentation.auto_augment.cutout": [[221, 248], ["numpy.array", "numpy.linspace", "numpy.copy", "Image.fromarray.mean", "numpy.random.randint", "numpy.random.randint", "img[].fill", "PIL.Image.fromarray", "int", "round", "random.uniform"], "function", ["None"], ["", "def", "cutout", "(", "org_img", ",", "magnitude", "=", "None", ")", ":", "\n", "    ", "img", "=", "np", ".", "array", "(", "org_img", ")", "\n", "\n", "magnitudes", "=", "np", ".", "linspace", "(", "0", ",", "60", "/", "331", ",", "11", ")", "\n", "\n", "img", "=", "np", ".", "copy", "(", "org_img", ")", "\n", "mask_val", "=", "img", ".", "mean", "(", ")", "\n", "\n", "if", "magnitude", "is", "None", ":", "\n", "        ", "mask_size", "=", "16", "\n", "", "else", ":", "\n", "        ", "mask_size", "=", "int", "(", "round", "(", "img", ".", "shape", "[", "0", "]", "*", "random", ".", "uniform", "(", "magnitudes", "[", "magnitude", "]", ",", "magnitudes", "[", "magnitude", "+", "1", "]", ")", ")", ")", "\n", "", "top", "=", "np", ".", "random", ".", "randint", "(", "0", "-", "mask_size", "//", "2", ",", "img", ".", "shape", "[", "0", "]", "-", "mask_size", ")", "\n", "left", "=", "np", ".", "random", ".", "randint", "(", "0", "-", "mask_size", "//", "2", ",", "img", ".", "shape", "[", "1", "]", "-", "mask_size", ")", "\n", "bottom", "=", "top", "+", "mask_size", "\n", "right", "=", "left", "+", "mask_size", "\n", "\n", "if", "top", "<", "0", ":", "\n", "        ", "top", "=", "0", "\n", "", "if", "left", "<", "0", ":", "\n", "        ", "left", "=", "0", "\n", "\n", "", "img", "[", "top", ":", "bottom", ",", "left", ":", "right", ",", ":", "]", ".", "fill", "(", "mask_val", ")", "\n", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.resnet_cifar.BasicBlock.__init__": [[20, 32], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.auto_enc_trainer.AutoEncocderTrainer.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.resnet_cifar.BasicBlock.forward": [[34, 40], ["torch.relu", "torch.relu", "torch.relu", "resnet_cifar.BasicBlock.bn2", "resnet_cifar.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar.BasicBlock.bn1", "resnet_cifar.BasicBlock.conv2", "resnet_cifar.BasicBlock.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.resnet_cifar.Bottleneck.__init__": [[45, 59], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.auto_enc_trainer.AutoEncocderTrainer.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.resnet_cifar.Bottleneck.forward": [[61, 68], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar.Bottleneck.bn3", "resnet_cifar.Bottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar.Bottleneck.bn1", "resnet_cifar.Bottleneck.bn2", "resnet_cifar.Bottleneck.conv3", "resnet_cifar.Bottleneck.conv1", "resnet_cifar.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.resnet_cifar.ResNet.__init__": [[71, 84], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet_cifar.ResNet._make_layer", "resnet_cifar.ResNet._make_layer", "resnet_cifar.ResNet._make_layer", "resnet_cifar.ResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear", "models.util_layers.Normalize"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.auto_enc_trainer.AutoEncocderTrainer.__init__", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "pool_len", "=", "4", ",", "low_dim", "=", "128", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "low_dim", ")", "\n", "self", ".", "l2norm", "=", "Normalize", "(", "2", ")", "\n", "self", ".", "pool_len", "=", "pool_len", "\n", "# for m in self.modules():", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.resnet_cifar.ResNet._make_layer": [[93, 100], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.resnet_cifar.ResNet.forward": [[101, 112], ["torch.relu", "torch.relu", "torch.relu", "resnet_cifar.ResNet.layer1", "resnet_cifar.ResNet.layer2", "resnet_cifar.ResNet.layer3", "resnet_cifar.ResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet_cifar.ResNet.view", "resnet_cifar.ResNet.linear", "resnet_cifar.ResNet.l2norm", "resnet_cifar.ResNet.bn1", "resnet_cifar.ResNet.size", "resnet_cifar.ResNet.conv1"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.utils.l2norm"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "self", ".", "pool_len", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "out", "=", "self", ".", "l2norm", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.resnet_cifar.ResNet18": [[114, 116], ["resnet_cifar.ResNet"], "function", ["None"], ["", "", "def", "ResNet18", "(", "pool_len", "=", "4", ",", "low_dim", "=", "128", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "pool_len", ",", "low_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.resnet_cifar.ResNet34": [[117, 119], ["resnet_cifar.ResNet"], "function", ["None"], ["", "def", "ResNet34", "(", "pool_len", "=", "4", ",", "low_dim", "=", "128", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pool_len", ",", "low_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.resnet_cifar.ResNet50": [[120, 122], ["resnet_cifar.ResNet"], "function", ["None"], ["", "def", "ResNet50", "(", "pool_len", "=", "4", ",", "low_dim", "=", "128", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pool_len", ",", "low_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.resnet_cifar.ResNet101": [[123, 125], ["resnet_cifar.ResNet"], "function", ["None"], ["", "def", "ResNet101", "(", "pool_len", "=", "4", ",", "low_dim", "=", "128", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "pool_len", ",", "low_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.resnet_cifar.ResNet152": [[126, 128], ["resnet_cifar.ResNet"], "function", ["None"], ["", "def", "ResNet152", "(", "pool_len", "=", "4", ",", "low_dim", "=", "128", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "pool_len", ",", "low_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.resnet_cifar.test": [[130, 137], ["resnet_cifar.ResNet18", "ResNet18.", "print", "torch.autograd.Variable", "net.size", "torch.randn", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.resnet_cifar.ResNet18"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "ResNet18", "(", ")", "\n", "# y = net(Variable(torch.randn(1,3,32,32)))", "\n", "# pdb.set_trace()", "\n", "y", "=", "net", "(", "Variable", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "96", ",", "96", ")", ")", ")", "\n", "# pdb.set_trace()", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.util_layers.Flatten.forward": [[5, 7], ["x.view", "x.size"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.util_layers.Normalize.__init__": [[11, 14], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.auto_enc_trainer.AutoEncocderTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "power", "=", "2", ")", ":", "\n", "        ", "super", "(", "Normalize", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "power", "=", "power", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.util_layers.Normalize.forward": [[15, 19], ["x.pow().sum().pow", "x.div", "x.pow().sum", "x.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "norm", "=", "x", ".", "pow", "(", "self", ".", "power", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "pow", "(", "1.", "/", "self", ".", "power", ")", "\n", "out", "=", "x", ".", "div", "(", "norm", ")", "\n", "return", "out", "", "", "", ""]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.dual_model.DualModel.__init__": [[18, 34], ["torch.nn.Module.__init__", "torch.nn.Sequential", "dual_model.get_feature_block", "models.util_layers.Normalize", "dual_model.get_cluster_block", "torch.nn.AvgPool2d", "models.util_layers.Flatten", "utils.freeze_module"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.auto_enc_trainer.AutoEncocderTrainer.__init__", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.dual_model.get_feature_block", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.dual_model.get_cluster_block", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.utils.freeze_module"], ["def", "__init__", "(", "self", ",", "base_model", ",", "decoder", ",", "low_dim", ",", "n_cluster", ",", "freeze", "=", "False", ")", ":", "\n", "        ", "super", "(", "DualModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Backbone model", "\n", "self", ".", "base_model", "=", "base_model", "\n", "self", ".", "flatten", "=", "nn", ".", "Sequential", "(", "nn", ".", "AvgPool2d", "(", "(", "7", ",", "7", ")", ",", "(", "1", ",", "1", ")", ",", "ceil_mode", "=", "True", ")", ",", "Flatten", "(", ")", ")", "\n", "# Reconstruction", "\n", "self", ".", "decoder", "=", "decoder", "\n", "# Feature extractor", "\n", "self", ".", "feat_ext", "=", "get_feature_block", "(", "1024", ",", "low_dim", ")", "\n", "# Metric learning branch", "\n", "self", ".", "l2norm", "=", "Normalize", "(", "2", ")", "\n", "# Clustering branch", "\n", "self", ".", "clustering", "=", "get_cluster_block", "(", "low_dim", ",", "n_cluster", ")", "\n", "if", "freeze", ":", "\n", "            ", "freeze_module", "(", "self", ".", "decoder", ")", "\n", "", "self", ".", "mode", "=", "'normal'", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.dual_model.DualModel.forward": [[35, 45], ["dual_model.DualModel._forward_pooling", "dual_model.DualModel._forward_normal"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.dual_model.DualModel._forward_pooling", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.dual_model.DualModel._forward_normal"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"\n        input --> emb --> feats --->  l2norm --> metric_out\n                                          `.\n                                            `-->  cluster_out\n        \"\"\"", "\n", "if", "self", ".", "mode", "==", "'pool'", ":", "\n", "            ", "return", "self", ".", "_forward_pooling", "(", "input", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_forward_normal", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.dual_model.DualModel._forward_pooling": [[46, 54], ["dual_model.DualModel.base_model", "dual_model.DualModel.flatten", "dual_model.DualModel.feat_ext", "dual_model.DualModel.l2norm", "dual_model.DualModel.clustering", "dual_model.DualModel.l2norm", "dual_model.DualModel.l2norm"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.utils.l2norm", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.utils.l2norm", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.utils.l2norm"], ["", "", "def", "_forward_pooling", "(", "self", ",", "input", ")", ":", "\n", "        ", "emb7x7", "=", "self", ".", "base_model", "(", "input", ")", "\n", "emb", "=", "self", ".", "flatten", "(", "emb7x7", ")", "\n", "feats", "=", "self", ".", "feat_ext", "(", "emb", ")", "\n", "metric_out", "=", "self", ".", "l2norm", "(", "feats", ")", "\n", "# cluster_out = self.clustering(self.l2norm(emb))", "\n", "cluster_out", "=", "self", ".", "clustering", "(", "metric_out", ")", "\n", "return", "metric_out", ",", "self", ".", "l2norm", "(", "emb", ")", ",", "self", ".", "l2norm", "(", "cluster_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.dual_model.DualModel._forward_normal": [[55, 63], ["dual_model.DualModel.base_model", "dual_model.DualModel.flatten", "dual_model.DualModel.feat_ext", "dual_model.DualModel.l2norm", "dual_model.DualModel.clustering", "dual_model.DualModel.l2norm"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.utils.l2norm", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.utils.l2norm"], ["", "def", "_forward_normal", "(", "self", ",", "input", ")", ":", "\n", "        ", "emb7x7", "=", "self", ".", "base_model", "(", "input", ")", "\n", "emb", "=", "self", ".", "flatten", "(", "emb7x7", ")", "\n", "feats", "=", "self", ".", "feat_ext", "(", "emb", ")", "\n", "metric_out", "=", "self", ".", "l2norm", "(", "feats", ")", "\n", "cluster_out", "=", "self", ".", "clustering", "(", "metric_out", ")", "\n", "# cluster_out = self.clustering(self.l2norm(emb))", "\n", "return", "metric_out", ",", "self", ".", "l2norm", "(", "cluster_out", ")", ",", "emb7x7", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.dual_model.DualModel.metric_repr": [[64, 66], ["dual_model.DualModel.l2norm"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.utils.l2norm"], ["", "def", "metric_repr", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "l2norm", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.dual_model.build_dual_model": [[68, 84], ["models.decoder.Decoder", "dual_model.DualModel", "torchvision.models.googlenet", "torch.nn.Sequential", "models.inception_v1_encoder", "os.path.exists", "torch.nn.Sequential", "nn.Sequential.load_state_dict", "list", "nn.Sequential.children", "torch.from_numpy().cuda", "list", "hickle.load().items", "nn.Sequential.children", "torch.from_numpy", "hickle.load"], "function", ["None"], ["", "", "def", "build_dual_model", "(", "model_type", "=", "'vision'", ",", "pretrained", "=", "True", ",", "low_dim", "=", "128", ",", "n_cluster", "=", "100", ",", "freeze", "=", "True", ")", ":", "\n", "    ", "if", "model_type", "==", "'vision'", ":", "\n", "        ", "encoder", "=", "torchvision", ".", "models", ".", "googlenet", "(", "pretrained", ")", "\n", "encoder", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "encoder", ".", "children", "(", ")", ")", "[", ":", "-", "2", "]", ")", "\n", "", "else", ":", "\n", "        ", "encoder", "=", "inception_v1_encoder", "(", ")", "\n", "if", "pretrained", ":", "\n", "            ", "base_model_weights_path", "=", "'models/googlenet.h5'", "\n", "if", "os", ".", "path", ".", "exists", "(", "base_model_weights_path", ")", ":", "\n", "                ", "encoder", ".", "load_state_dict", "(", "\n", "{", "k", ":", "torch", ".", "from_numpy", "(", "v", ")", ".", "cuda", "(", ")", "for", "k", ",", "v", "in", "hickle", ".", "load", "(", "base_model_weights_path", ")", ".", "items", "(", ")", "}", ")", "\n", "", "encoder", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "encoder", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ")", "\n", "# decoder = inception_v1_decoder()", "\n", "", "", "decoder", "=", "Decoder", "(", ")", "\n", "model", "=", "DualModel", "(", "encoder", ",", "decoder", ",", "low_dim", ",", "n_cluster", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.dual_model.get_feature_block": [[86, 94], ["torch.nn.Sequential", "torch.nn.Linear"], "function", ["None"], ["", "def", "get_feature_block", "(", "input_size", ",", "output_size", ")", ":", "\n", "    ", "block", "=", "[", "\n", "# nn.BatchNorm1d(1024),", "\n", "# nn.Dropout(0.6),", "\n", "nn", ".", "Linear", "(", "input_size", ",", "output_size", ")", "\n", "]", "\n", "block", "=", "nn", ".", "Sequential", "(", "*", "block", ")", "\n", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.dual_model.get_cluster_block": [[96, 106], ["torch.nn.Sequential", "torch.nn.BatchNorm1d", "torch.nn.Dropout", "torch.nn.Linear"], "function", ["None"], ["", "def", "get_cluster_block", "(", "input_size", ",", "output_size", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "# nn.ReLU(),", "\n", "nn", ".", "BatchNorm1d", "(", "input_size", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.6", ")", ",", "\n", "# nn.Linear(input_size, 512, bias=False),", "\n", "# nn.ReLU(),", "\n", "# nn.Dropout(),", "\n", "# nn.BatchNorm1d(512),", "\n", "nn", ".", "Linear", "(", "input_size", ",", "output_size", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.decoder.Decoder.__init__": [[5, 30], ["torch.Module.__init__", "torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.Upsample", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.Upsample", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.Upsample", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.Upsample", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.Upsample", "torch.Conv2d", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.auto_enc_trainer.AutoEncocderTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1024", ",", "128", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Upsample", "(", "14", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Upsample", "(", "28", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "32", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Upsample", "(", "56", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "16", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "16", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Upsample", "(", "112", ")", ",", "\n", "nn", ".", "Conv2d", "(", "16", ",", "16", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "16", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Upsample", "(", "224", ")", ",", "\n", "nn", ".", "Conv2d", "(", "16", ",", "3", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.decoder.Decoder.forward": [[32, 34], ["decoder.Decoder.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "decoder", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.resnet.BasicBlock.__init__": [[28, 37], ["torch.Module.__init__", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.auto_enc_trainer.AutoEncocderTrainer.__init__", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.resnet.conv3x3", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.resnet.BasicBlock.forward": [[38, 55], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.resnet.Bottleneck.__init__": [[60, 72], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.auto_enc_trainer.AutoEncocderTrainer.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.resnet.Bottleneck.forward": [[73, 94], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.resnet.ResNet.__init__": [[98, 122], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "models.util_layers.Normalize", "torch.Dropout", "torch.Dropout", "torch.Dropout", "resnet.ResNet.modules", "isinstance", "m.weight.paths.normal_", "isinstance", "math.sqrt", "m.weight.paths.fill_", "m.bias.paths.zero_"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.auto_enc_trainer.AutoEncocderTrainer.__init__", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "low_dim", "=", "1000", ",", "is_feature", "=", "None", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "low_dim", ")", "\n", "self", ".", "l2norm", "=", "Normalize", "(", "2", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "paths", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "paths", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "paths", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.resnet.ResNet._make_layer": [[124, 140], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.resnet.ResNet.forward": [[141, 157], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.avgpool", "resnet.ResNet.view", "resnet.ResNet.fc", "resnet.ResNet.l2norm", "resnet.ResNet.size"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.utils.l2norm"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "x", "=", "self", ".", "l2norm", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.resnet.conv3x3": [[19, 23], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.resnet.resnet18": [[159, 190], ["resnet.ResNet", "ResNet.state_dict", "torch.load_url", "model.state_dict.update", "ResNet.load_state_dict", "torch.Linear", "torch.init.orthogonal_", "ResNet.fc.bias.paths.zero_", "model_zoo.load_url.items"], "function", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.utils.AverageMeter.update"], ["", "", "def", "resnet18", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet18'", "]", ")", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", "}", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n", "# for param in model.parameters():", "\n", "# param.requires_grad = False", "\n", "# W = model.fc.weight.data.t()", "\n", "\n", "# U,S,V = torch.svd(W,some=False)", "\n", "# S_ = torch.zeros(U.size(0),V.size(0))", "\n", "# S = torch.diag(S)", "\n", "# S_[:S.size(0),:S.size(1)] = S", "\n", "# W = torch.mm(U,S_)", "\n", "# model.fc.weight.data = W.t()", "\n", "fc_features", "=", "model", ".", "fc", ".", "in_features", "\n", "model", ".", "fc", "=", "nn", ".", "Linear", "(", "fc_features", ",", "128", ")", "\n", "nn", ".", "init", ".", "orthogonal_", "(", "model", ".", "fc", ".", "weight", ")", "\n", "# model.fc.weight.data.normal_(0, math.sqrt(2. / 128))", "\n", "model", ".", "fc", ".", "bias", ".", "paths", ".", "zero_", "(", ")", "\n", "# model.load_state_dict(model_zoo.load_url(model_urls['resnet18']))", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.resnet.resnet34": [[192, 202], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet34'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.resnet.resnet50": [[204, 214], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.resnet.resnet101": [[216, 226], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet101'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.resnet.resnet152": [[228, 238], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet152'", "]", ")", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.auto_enc_model.AutoEncoderModel.__init__": [[11, 16], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.auto_enc_trainer.AutoEncocderTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "encoder", ",", "decoder", ")", ":", "\n", "        ", "super", "(", "AutoEncoderModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "encoder", "\n", "# freeze_module(self.encoder)", "\n", "self", ".", "decoder", "=", "decoder", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.auto_enc_model.AutoEncoderModel.forward": [[17, 21], ["auto_enc_model.AutoEncoderModel.encoder", "auto_enc_model.AutoEncoderModel.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "latent", "=", "self", ".", "encoder", "(", "inp", ")", "\n", "recon", "=", "self", ".", "decoder", "(", "latent", ")", "\n", "return", "recon", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.auto_enc_model.build_auto_enc_model": [[23, 38], ["inception_v1.inception_v1_decoder", "auto_enc_model.AutoEncoderModel", "torchvision.googlenet", "torch.Sequential", "inception_v1.inception_v1_encoder", "os.path.exists", "torch.Sequential", "nn.Sequential.load_state_dict", "list", "nn.Sequential.children", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "list", "hickle.load().items", "nn.Sequential.children", "torch.from_numpy", "torch.from_numpy", "hickle.load"], "function", ["None"], ["", "", "def", "build_auto_enc_model", "(", "model_type", ",", "pretrained", "=", "True", ")", ":", "\n", "    ", "if", "model_type", "==", "'vision'", ":", "\n", "        ", "encoder", "=", "models", ".", "googlenet", "(", "pretrained", ")", "\n", "encoder", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "encoder", ".", "children", "(", ")", ")", "[", ":", "-", "2", "]", ")", "\n", "", "else", ":", "\n", "        ", "encoder", "=", "inception_v1_encoder", "(", ")", "\n", "if", "pretrained", ":", "\n", "            ", "base_model_weights_path", "=", "'models/googlenet.h5'", "\n", "if", "os", ".", "path", ".", "exists", "(", "base_model_weights_path", ")", ":", "\n", "                ", "encoder", ".", "load_state_dict", "(", "\n", "{", "k", ":", "torch", ".", "from_numpy", "(", "v", ")", ".", "cuda", "(", ")", "for", "k", ",", "v", "in", "hickle", ".", "load", "(", "base_model_weights_path", ")", ".", "items", "(", ")", "}", ")", "\n", "", "encoder", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "encoder", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ")", "\n", "", "", "decoder", "=", "inception_v1_decoder", "(", ")", "\n", "model", "=", "AutoEncoderModel", "(", "encoder", ",", "decoder", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.inception_v1.inception_v1_encoder.__init__": [[17, 52], ["torch.Sequential.__init__", "collections.OrderedDict", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "inception_v1.InceptionModule", "inception_v1.InceptionModule", "torch.MaxPool2d", "torch.MaxPool2d", "inception_v1.InceptionModule", "inception_v1.InceptionModule", "inception_v1.InceptionModule", "inception_v1.InceptionModule", "inception_v1.InceptionModule", "torch.MaxPool2d", "torch.MaxPool2d", "inception_v1.InceptionModule", "inception_v1.InceptionModule", "torch.AvgPool2d", "torch.AvgPool2d", "collections.OrderedDict", "collections.OrderedDict", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.CrossMapLRN2d", "torch.CrossMapLRN2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.CrossMapLRN2d", "torch.CrossMapLRN2d", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.auto_enc_trainer.AutoEncocderTrainer.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "inception_v1_encoder", ",", "self", ")", ".", "__init__", "(", "OrderedDict", "(", "[", "\n", "(", "'conv1'", ",", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'7x7_s2'", ",", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "(", "7", ",", "7", ")", ",", "(", "2", ",", "2", ")", ",", "(", "3", ",", "3", ")", ")", ")", ",", "\n", "(", "'relu1'", ",", "nn", ".", "ReLU", "(", "True", ")", ")", ",", "\n", "(", "'pool1'", ",", "nn", ".", "MaxPool2d", "(", "(", "3", ",", "3", ")", ",", "(", "2", ",", "2", ")", ",", "ceil_mode", "=", "True", ")", ")", ",", "\n", "(", "'lrn1'", ",", "nn", ".", "CrossMapLRN2d", "(", "5", ",", "0.0001", ",", "0.75", ",", "1", ")", ")", "\n", "]", ")", ")", ")", ",", "\n", "\n", "(", "'conv2'", ",", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'3x3_reduce'", ",", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ")", ")", ",", "\n", "(", "'relu1'", ",", "nn", ".", "ReLU", "(", "True", ")", ")", ",", "\n", "(", "'3x3'", ",", "nn", ".", "Conv2d", "(", "64", ",", "192", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ")", ")", ",", "\n", "(", "'relu2'", ",", "nn", ".", "ReLU", "(", "True", ")", ")", ",", "\n", "(", "'lrn2'", ",", "nn", ".", "CrossMapLRN2d", "(", "5", ",", "0.0001", ",", "0.75", ",", "1", ")", ")", ",", "\n", "(", "'pool2'", ",", "nn", ".", "MaxPool2d", "(", "(", "3", ",", "3", ")", ",", "(", "2", ",", "2", ")", ",", "ceil_mode", "=", "True", ")", ")", "\n", "]", ")", ")", ")", ",", "\n", "\n", "(", "'inception_3a'", ",", "InceptionModule", "(", "192", ",", "64", ",", "96", ",", "128", ",", "16", ",", "32", ",", "32", ")", ")", ",", "\n", "(", "'inception_3b'", ",", "InceptionModule", "(", "256", ",", "128", ",", "128", ",", "192", ",", "32", ",", "96", ",", "64", ")", ")", ",", "\n", "\n", "(", "'pool3'", ",", "nn", ".", "MaxPool2d", "(", "(", "3", ",", "3", ")", ",", "(", "2", ",", "2", ")", ",", "ceil_mode", "=", "True", ")", ")", ",", "\n", "\n", "(", "'inception_4a'", ",", "InceptionModule", "(", "480", ",", "192", ",", "96", ",", "208", ",", "16", ",", "48", ",", "64", ")", ")", ",", "\n", "(", "'inception_4b'", ",", "InceptionModule", "(", "512", ",", "160", ",", "112", ",", "224", ",", "24", ",", "64", ",", "64", ")", ")", ",", "\n", "(", "'inception_4c'", ",", "InceptionModule", "(", "512", ",", "128", ",", "128", ",", "256", ",", "24", ",", "64", ",", "64", ")", ")", ",", "\n", "(", "'inception_4d'", ",", "InceptionModule", "(", "512", ",", "112", ",", "144", ",", "288", ",", "32", ",", "64", ",", "64", ")", ")", ",", "\n", "(", "'inception_4e'", ",", "InceptionModule", "(", "528", ",", "256", ",", "160", ",", "320", ",", "32", ",", "128", ",", "128", ")", ")", ",", "\n", "\n", "(", "'pool4'", ",", "nn", ".", "MaxPool2d", "(", "(", "3", ",", "3", ")", ",", "(", "2", ",", "2", ")", ",", "ceil_mode", "=", "True", ")", ")", ",", "\n", "\n", "(", "'inception_5a'", ",", "InceptionModule", "(", "832", ",", "256", ",", "160", ",", "320", ",", "32", ",", "128", ",", "128", ")", ")", ",", "\n", "(", "'inception_5b'", ",", "InceptionModule", "(", "832", ",", "384", ",", "192", ",", "384", ",", "48", ",", "128", ",", "128", ")", ")", ",", "\n", "\n", "(", "'pool5'", ",", "nn", ".", "AvgPool2d", "(", "(", "7", ",", "7", ")", ",", "(", "1", ",", "1", ")", ",", "ceil_mode", "=", "True", ")", ")", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.inception_v1.inception_v1_decoder.__init__": [[75, 107], ["torch.Sequential.__init__", "collections.OrderedDict", "inception_v1.InceptionModule", "inception_v1.InceptionModule", "torch.Upsample", "torch.Upsample", "inception_v1.InceptionModule", "inception_v1.InceptionModule", "inception_v1.InceptionModule", "inception_v1.InceptionModule", "inception_v1.InceptionModule", "torch.Upsample", "torch.Upsample", "inception_v1.InceptionModule", "torch.Upsample", "torch.Upsample", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "collections.OrderedDict", "collections.OrderedDict", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.CrossMapLRN2d", "torch.CrossMapLRN2d", "torch.Upsample", "torch.Upsample", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.auto_enc_trainer.AutoEncocderTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "inception_v1_decoder", ",", "self", ")", ".", "__init__", "(", "OrderedDict", "(", "[", "\n", "# ('upsample7', nn.Upsample(scale_factor=7)),", "\n", "# ('deconv1', nn.ConvTranspose2d(1024, 1024, 7, 3, 1, 2)),", "\n", "(", "'inception_5b'", ",", "InceptionModule", "(", "1024", ",", "256", ",", "160", ",", "320", ",", "32", ",", "128", ",", "128", ")", ")", ",", "\n", "(", "'inception_5a'", ",", "InceptionModule", "(", "832", ",", "256", ",", "160", ",", "320", ",", "32", ",", "128", ",", "128", ")", ")", ",", "\n", "(", "'upsample14x14'", ",", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", ")", ",", "\n", "(", "'inception_4e'", ",", "InceptionModule", "(", "832", ",", "112", ",", "144", ",", "288", ",", "32", ",", "64", ",", "64", ")", ")", ",", "\n", "(", "'inception_4d'", ",", "InceptionModule", "(", "528", ",", "128", ",", "128", ",", "256", ",", "24", ",", "64", ",", "64", ")", ")", ",", "\n", "(", "'inception_4c'", ",", "InceptionModule", "(", "512", ",", "160", ",", "112", ",", "224", ",", "24", ",", "64", ",", "64", ")", ")", ",", "\n", "(", "'inception_4b'", ",", "InceptionModule", "(", "512", ",", "192", ",", "96", ",", "208", ",", "16", ",", "48", ",", "64", ")", ")", ",", "\n", "(", "'inception_4a'", ",", "InceptionModule", "(", "512", ",", "128", ",", "128", ",", "192", ",", "32", ",", "96", ",", "64", ")", ")", ",", "\n", "(", "'upsample28x28'", ",", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", ")", ",", "\n", "(", "'inception_3b'", ",", "InceptionModule", "(", "480", ",", "64", ",", "96", ",", "128", ",", "16", ",", "32", ",", "32", ")", ")", ",", "\n", "(", "'upsample28x28'", ",", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", ")", ",", "\n", "\n", "(", "'conv2'", ",", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'3x3'", ",", "nn", ".", "Conv2d", "(", "256", ",", "192", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ")", ")", ",", "\n", "(", "'relu2'", ",", "nn", ".", "ReLU", "(", "True", ")", ")", ",", "\n", "(", "'bn2'", ",", "nn", ".", "BatchNorm2d", "(", "192", ")", ")", ",", "\n", "(", "'3x3_reduce'", ",", "nn", ".", "Conv2d", "(", "192", ",", "64", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ")", ")", ",", "\n", "(", "'relu1'", ",", "nn", ".", "ReLU", "(", "True", ")", ")", ",", "\n", "(", "'lrn2'", ",", "nn", ".", "CrossMapLRN2d", "(", "5", ",", "0.0001", ",", "0.75", ",", "1", ")", ")", ",", "\n", "]", ")", ")", ")", ",", "\n", "\n", "(", "'conv1'", ",", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'upsample56x56'", ",", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", ")", ",", "\n", "(", "'deconv2'", ",", "nn", ".", "ConvTranspose2d", "(", "64", ",", "64", ",", "7", ",", "2", ",", "3", ",", "1", ")", ")", ",", "\n", "(", "'relu'", ",", "nn", ".", "ReLU", "(", "True", ")", ")", ",", "\n", "(", "'bn'", ",", "nn", ".", "BatchNorm2d", "(", "64", ")", ")", ",", "\n", "(", "'deconv3'", ",", "nn", ".", "ConvTranspose2d", "(", "64", ",", "3", ",", "7", ",", "2", ",", "3", ",", "1", ")", ")", ",", "\n", "(", "'tanh'", ",", "nn", ".", "Tanh", "(", ")", ")", "\n", "]", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.inception_v1.InceptionModule.__init__": [[112, 145], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "container.named_children", "inception_v1.InceptionModule.add_module", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.auto_enc_trainer.AutoEncocderTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplane", ",", "outplane_a1x1", ",", "outplane_b3x3_reduce", ",", "outplane_b3x3", ",", "outplane_c5x5_reduce", ",", "outplane_c5x5", ",", "\n", "outplane_pool_proj", ")", ":", "\n", "        ", "super", "(", "InceptionModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "a", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'1x1'", ",", "nn", ".", "Conv2d", "(", "inplane", ",", "outplane_a1x1", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ")", ")", ",", "\n", "(", "'1x1_relu'", ",", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "]", ")", ")", "\n", "\n", "b", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'3x3_reduce'", ",", "nn", ".", "Conv2d", "(", "inplane", ",", "outplane_b3x3_reduce", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ")", ")", ",", "\n", "(", "'3x3_relu1'", ",", "nn", ".", "ReLU", "(", "True", ")", ")", ",", "\n", "(", "'3x3'", ",", "nn", ".", "Conv2d", "(", "outplane_b3x3_reduce", ",", "outplane_b3x3", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ")", ")", ",", "\n", "(", "'3x3_relu2'", ",", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "]", ")", ")", "\n", "\n", "c", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'5x5_reduce'", ",", "nn", ".", "Conv2d", "(", "inplane", ",", "outplane_c5x5_reduce", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ")", ")", ",", "\n", "(", "'5x5_relu1'", ",", "nn", ".", "ReLU", "(", "True", ")", ")", ",", "\n", "(", "'5x5'", ",", "nn", ".", "Conv2d", "(", "outplane_c5x5_reduce", ",", "outplane_c5x5", ",", "(", "5", ",", "5", ")", ",", "(", "1", ",", "1", ")", ",", "(", "2", ",", "2", ")", ")", ")", ",", "\n", "(", "'5x5_relu2'", ",", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "]", ")", ")", "\n", "\n", "d", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'pool_pool'", ",", "nn", ".", "MaxPool2d", "(", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ")", ")", ",", "\n", "(", "'pool_proj'", ",", "nn", ".", "Conv2d", "(", "inplane", ",", "outplane_pool_proj", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ")", ")", ",", "\n", "(", "'pool_relu'", ",", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "]", ")", ")", "\n", "\n", "for", "container", "in", "[", "a", ",", "b", ",", "c", ",", "d", "]", ":", "\n", "            ", "for", "name", ",", "module", "in", "container", ".", "named_children", "(", ")", ":", "\n", "                ", "self", ".", "add_module", "(", "name", ",", "module", ")", "\n", "\n", "", "", "self", ".", "branches", "=", "[", "a", ",", "b", ",", "c", ",", "d", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.inception_v1.InceptionModule.forward": [[146, 148], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "branch"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "torch", ".", "cat", "(", "[", "branch", "(", "input", ")", "for", "branch", "in", "self", ".", "branches", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.inception_v1.Model.__init__": [[151, 156], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "util_layers.Normalize"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.auto_enc_trainer.AutoEncocderTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "base_model", ",", "low_dim", "=", "128", ")", ":", "\n", "        ", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "base_model", "=", "base_model", "\n", "self", ".", "embedder", "=", "nn", ".", "Linear", "(", "base_model", ".", "output_size", ",", "low_dim", ")", "\n", "self", ".", "l2norm", "=", "Normalize", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.inception_v1.Model.forward": [[159, 167], ["inception_v1.Model.base_model().view", "inception_v1.Model.embedder", "inception_v1.Model.l2norm", "len", "inception_v1.Model.base_model", "inception_v1.Model.l2norm"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.utils.l2norm", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.utils.l2norm"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "pool5", "=", "self", ".", "base_model", "(", "input", ")", ".", "view", "(", "len", "(", "input", ")", ",", "-", "1", ")", "\n", "embed", "=", "self", ".", "embedder", "(", "pool5", ")", "\n", "embed", "=", "self", ".", "l2norm", "(", "embed", ")", "\n", "if", "self", ".", "training", ":", "\n", "            ", "return", "embed", "\n", "", "else", ":", "\n", "            ", "return", "embed", ",", "self", ".", "l2norm", "(", "pool5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.models.inception_v1.inception_v1_ml": [[169, 179], ["inception_v1.inception_v1_encoder", "os.path.exists", "inception_v1.Model", "inception_v1_encoder.load_state_dict", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "hickle.load().items", "torch.from_numpy", "torch.from_numpy", "hickle.load"], "function", ["None"], ["", "", "", "def", "inception_v1_ml", "(", "pretrained", "=", "False", ",", "low_dim", "=", "128", ")", ":", "\n", "    ", "base_model", "=", "inception_v1_encoder", "(", ")", "\n", "base_model_weights_path", "=", "'models/googlenet.h5'", "\n", "if", "os", ".", "path", ".", "exists", "(", "base_model_weights_path", ")", ":", "\n", "        ", "base_model", ".", "load_state_dict", "(", "\n", "{", "k", ":", "torch", ".", "from_numpy", "(", "v", ")", ".", "cuda", "(", ")", "for", "k", ",", "v", "in", "hickle", ".", "load", "(", "base_model_weights_path", ")", ".", "items", "(", ")", "}", ")", "\n", "# base_model = models.googlenet(pretrained=True)", "\n", "# base_model = torch.nn.Sequential(*list(base_model.children())[:-2])", "\n", "", "net", "=", "Model", "(", "base_model", ",", "low_dim", ")", "\n", "return", "net", "\n", "", ""]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.logger.logger.get_logger": [[4, 12], ["logging.getLogger", "logging.basicConfig"], "function", ["None"], ["def", "get_logger", "(", "name", ",", "log_file", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "# Setup logging", "\n", "logging", ".", "basicConfig", "(", "filename", "=", "log_file", ",", "\n", "level", "=", "logging", ".", "DEBUG", ",", "\n", "format", "=", "\"%(message)s\"", ",", "\n", "filemode", "=", "'w'", ")", "\n", "return", "logger", "\n", "", ""]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.trainer.Trainer.__init__": [[16, 50], ["trainer.base_trainer.BaseTrainer.__init__", "trainer.Trainer.logger.info", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "loss.ReconstructCriterion", "trainer.Trainer.recon_criterion.to", "trainer.Trainer.loss_monitor.add_loss", "loss.ClusterCriterion", "trainer.Trainer.rim_criterion.to", "trainer.Trainer.loss_monitor.add_loss", "loss.CenterBatchCriterion", "trainer.Trainer.ml_criterion.to", "trainer.Trainer.loss_monitor.add_loss"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.auto_enc_trainer.AutoEncocderTrainer.__init__", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.BaseCriterion.to", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.LossMonitor.add_loss", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.BaseCriterion.to", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.LossMonitor.add_loss", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.BaseCriterion.to", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.LossMonitor.add_loss"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "optimizer", ",", "cfg", ",", "train_loader", ",", "val_loader", ",", "scheduler", ")", ":", "\n", "        ", "super", "(", "Trainer", ",", "self", ")", ".", "__init__", "(", "model", ",", "optimizer", ",", "cfg", ")", "\n", "self", ".", "train_loader", "=", "train_loader", "\n", "self", ".", "val_loader", "=", "val_loader", "\n", "self", ".", "main_metric", "=", "'Recall'", "\n", "\n", "# Reconstruction loss", "\n", "self", ".", "recon", "=", "cfg", ".", "recon", "\n", "if", "self", ".", "recon", ":", "\n", "            ", "self", ".", "recon_criterion", "=", "ReconstructCriterion", "(", ")", "\n", "self", ".", "recon_criterion", ".", "to", "(", "cfg", ".", "device", ")", "\n", "self", ".", "loss_monitor", ".", "add_loss", "(", "self", ".", "recon_criterion", ")", "\n", "\n", "# RIM setup", "\n", "", "self", ".", "rim", "=", "cfg", ".", "rim", "\n", "if", "self", ".", "rim", ":", "\n", "            ", "self", ".", "rim_criterion", "=", "ClusterCriterion", "(", "cfg", ".", "mu", ")", "\n", "self", ".", "rim_criterion", ".", "to", "(", "cfg", ".", "device", ")", "\n", "self", ".", "loss_monitor", ".", "add_loss", "(", "self", ".", "rim_criterion", ")", "\n", "\n", "# Metric setup", "\n", "", "self", ".", "ml", "=", "cfg", ".", "ml", "\n", "if", "self", ".", "ml", ":", "\n", "            ", "self", ".", "ml_criterion", "=", "CenterBatchCriterion", "(", "1", ",", "0.1", ",", "cfg", ".", "batch_size", ",", "cfg", ".", "alpha", ")", "\n", "# self.ml_criterion = BatchCriterion(1, 0.1, args.batch_size)", "\n", "self", ".", "ml_criterion", ".", "to", "(", "cfg", ".", "device", ")", "\n", "self", ".", "loss_monitor", ".", "add_loss", "(", "self", ".", "ml_criterion", ")", "\n", "\n", "", "self", ".", "device", "=", "cfg", ".", "device", "\n", "self", ".", "args", "=", "cfg", "\n", "self", ".", "logger", ".", "info", "(", "cfg", ")", "\n", "self", ".", "train_writer", "=", "SummaryWriter", "(", ")", "\n", "self", ".", "val_writer", "=", "SummaryWriter", "(", ")", "\n", "self", ".", "scheduler", "=", "scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.trainer.Trainer.step": [[51, 126], ["trainer.Trainer.model.train", "trainer.adjust_learning_rate", "trainer.Trainer.loss_monitor.clear", "trainer.extract_features", "numpy.array", "trainer.compute_knn", "enumerate", "trainer.Trainer.train_writer.add_scalar", "torch.mm", "targets.repeat.repeat.repeat", "torch.cat", "trainer.Trainer.optimizer.zero_grad", "trainer.Trainer.model", "loss.backward", "trainer.Trainer.optimizer.step", "trainer.Trainer.train_writer.add_scalar", "trainer.Trainer.train_writer.add_scalar", "trainer.Trainer.train_writer.add_scalar", "train_features.t", "inputs1.to", "inputs2.to", "targets.repeat.repeat.to", "trainer.Trainer.rim_criterion", "trainer.Trainer.rim_criterion.update", "torch.argmax", "torch.unique", "torch.zeros().to", "range", "print", "print", "trainer.Trainer.item", "torch.cat.size", "torch.softmax", "torch.unique.view", "len", "torch.mean", "trainer.Trainer.model.flatten", "trainer.Trainer.model.feat_ext", "trainer.Trainer.model.l2norm", "trainer.Trainer.ml_criterion", "trainer.Trainer.ml_criterion.update", "torch.argmax", "trainer.Trainer.model.decoder", "trainer.Trainer.recon_criterion", "trainer.Trainer.recon_criterion.update", "trainer.Trainer.loss_monitor.summary", "torch.zeros", "torch.zeros().to.detach().to", "trainer.Trainer.item", "torch.cat.size", "trainer.Trainer.item", "torch.cat.size", "len", "len", "len", "torch.argmax.view", "torch.zeros().to.detach"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.trainer.adjust_learning_rate", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.LossMonitor.clear", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.trainer.extract_features", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.trainer.compute_knn", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.utils.LossLogger.add_scalar", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.auto_enc_trainer.AutoEncocderTrainer.step", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.utils.LossLogger.add_scalar", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.utils.LossLogger.add_scalar", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.utils.LossLogger.add_scalar", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.BaseCriterion.to", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.BaseCriterion.to", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.BaseCriterion.to", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.train.rim_criterion", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.BaseCriterion.to", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.utils.l2norm", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.train.recon_criterion", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.LossMonitor.summary", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.BaseCriterion.to"], ["", "def", "step", "(", "self", ",", "epoch", ")", ":", "\n", "# if epoch > 2:", "\n", "#     self.rim = 0", "\n", "        ", "self", ".", "model", ".", "train", "(", ")", "\n", "adjust_learning_rate", "(", "self", ".", "optimizer", ",", "epoch", ",", "self", ".", "args", ")", "\n", "self", ".", "loss_monitor", ".", "clear", "(", ")", "\n", "# generate positive index", "\n", "train_set", "=", "self", ".", "train_loader", ".", "dataset", "\n", "train_features", ",", "train_targets", "=", "extract_features", "(", "train_set", ",", "self", ".", "model", ",", "self", ".", "args", ",", "'train'", ")", "\n", "# select nn Index", "\n", "dist_feat", "=", "np", ".", "array", "(", "torch", ".", "mm", "(", "train_features", ",", "train_features", ".", "t", "(", ")", ")", ")", "\n", "nn_index", "=", "compute_knn", "(", "dist_feat", ",", "train_targets", ",", "knn", "=", "1", ",", "epoch", "=", "epoch", ")", "\n", "train_set", ".", "nnIndex", "=", "nn_index", "\n", "\n", "for", "batch_idx", ",", "(", "inputs1", ",", "inputs2", ",", "targets", ")", "in", "enumerate", "(", "self", ".", "train_loader", ")", ":", "\n", "            ", "inputs1", ",", "inputs2", ",", "targets", "=", "inputs1", ".", "to", "(", "self", ".", "device", ")", ",", "inputs2", ".", "to", "(", "self", ".", "device", ")", ",", "targets", ".", "to", "(", "self", ".", "device", ")", "\n", "targets", "=", "targets", ".", "repeat", "(", "2", ")", "\n", "inputs", "=", "torch", ".", "cat", "(", "(", "inputs1", ",", "inputs2", ")", ",", "0", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "repr", ",", "cluster", ",", "emb", "=", "self", ".", "model", "(", "inputs", ")", "\n", "# Total loss", "\n", "loss", "=", "0", "\n", "\n", "# Compute RIM loss", "\n", "if", "self", ".", "rim", ":", "\n", "                ", "rim_loss", "=", "self", ".", "rim_criterion", "(", "cluster", ")", "\n", "self", ".", "rim_criterion", ".", "update", "(", "rim_loss", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "loss", "+=", "self", ".", "rim", "*", "rim_loss", "\n", "\n", "", "if", "self", ".", "ml", "or", "self", ".", "recon", ":", "\n", "                ", "pred_cluster", "=", "torch", ".", "argmax", "(", "torch", ".", "softmax", "(", "cluster", ",", "dim", "=", "1", ")", ",", "dim", "=", "1", ")", "\n", "unique_cluster", "=", "torch", ".", "unique", "(", "pred_cluster", ")", "\n", "centroid_embedding", "=", "torch", ".", "zeros", "(", "len", "(", "unique_cluster", ")", ",", "1024", ",", "7", ",", "7", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "index", "=", "pred_cluster", "==", "unique_cluster", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "index", ")", ")", ":", "\n", "                    ", "centroid_embedding", "[", "i", "]", "=", "torch", ".", "mean", "(", "emb", "[", "index", "[", "i", "]", "]", ",", "dim", "=", "0", ")", "\n", "\n", "", "if", "self", ".", "ml", ":", "\n", "                    ", "x", "=", "self", ".", "model", ".", "flatten", "(", "centroid_embedding", ".", "detach", "(", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "x", "=", "self", ".", "model", ".", "feat_ext", "(", "x", ")", "\n", "centroid_repr", "=", "self", ".", "model", ".", "l2norm", "(", "x", ")", "\n", "metric_loss", "=", "self", ".", "ml_criterion", "(", "repr", ",", "centroid_repr", ",", "pred_cluster", ")", "\n", "# metric_loss = self.ml_criterion(repr)", "\n", "self", ".", "ml_criterion", ".", "update", "(", "metric_loss", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "loss", "+=", "self", ".", "ml", "*", "metric_loss", "\n", "\n", "", "if", "self", ".", "recon", ":", "\n", "                    ", "emb_index", "=", "torch", ".", "argmax", "(", "unique_cluster", "==", "pred_cluster", ".", "view", "(", "-", "1", ",", "1", ")", ",", "dim", "=", "1", ")", "\n", "centroid_latent", "=", "centroid_embedding", "[", "emb_index", "]", "\n", "recon", "=", "self", ".", "model", ".", "decoder", "(", "centroid_latent", ")", "\n", "recon_loss", "=", "self", ".", "recon_criterion", "(", "recon", ",", "inputs", "/", "255.", ")", "\n", "loss", "+=", "self", ".", "recon", "*", "recon_loss", "\n", "self", ".", "recon_criterion", ".", "update", "(", "recon_loss", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "# Compute norm loss", "\n", "", "", "loss", ".", "backward", "(", ")", "\n", "# self.scheduler.step()", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "# if epoch >= 3 and epoch % 3 == 0:", "\n", "#     self.optimizer.update_swa()", "\n", "#     if epoch >= 6:", "\n", "#         self.optimizer.swap_swa_sgd()", "\n", "\n", "\n", "self", ".", "train_writer", ".", "add_scalar", "(", "'lr'", ",", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "epoch", "*", "len", "(", "self", ".", "train_loader", ")", "+", "batch_idx", ")", "\n", "if", "batch_idx", "%", "20", "==", "0", ":", "\n", "                ", "print", "(", "'Epoch: [{}][{}/{}]\\t'", ".", "format", "(", "epoch", ",", "batch_idx", ",", "len", "(", "self", ".", "train_loader", ")", ")", ",", "end", "=", "''", ")", "\n", "print", "(", "self", ".", "loss_monitor", ".", "summary", "(", ")", ")", "\n", "\n", "", "", "self", ".", "train_writer", ".", "add_scalar", "(", "'ml_loss'", ",", "self", ".", "ml_criterion", ".", "avg", ",", "epoch", ")", "\n", "if", "self", ".", "recon", ":", "\n", "            ", "self", ".", "train_writer", ".", "add_scalar", "(", "'recon'", ",", "self", ".", "recon_criterion", ".", "avg", ",", "epoch", ")", "\n", "", "if", "self", ".", "rim", ":", "\n", "            ", "self", ".", "train_writer", ".", "add_scalar", "(", "'rim'", ",", "self", ".", "rim_criterion", ".", "avg", ",", "epoch", ")", "\n", "", "return", "self", ".", "loss_monitor", ".", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.trainer.Trainer.eval": [[127, 186], ["print", "trainer.extract_features", "trainer.extract_features", "utils.eval_recall", "utils.eval_recall", "utils.eval_nmi"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.trainer.extract_features", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.trainer.extract_features", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.utils.eval_recall", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.utils.eval_recall", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.utils.eval_nmi"], ["", "def", "eval", "(", "self", ",", "epoch", ")", ":", "\n", "# with torch.no_grad():", "\n", "#     self.model.eval()", "\n", "#     rim_loss = AverageMeter()", "\n", "#     metric_loss = AverageMeter()", "\n", "#     recon_loss = AverageMeter()", "\n", "#     val_set = self.val_loader.dataset.transform = transform_train", "\n", "#     val_loader = DataLoader(self.val_loader.dataset, shuffle=True, batch_size=64, num_workers=4, drop_last=True)", "\n", "#", "\n", "#     for batch_idx, (inputs1, inputs2, targets) in enumerate(val_loader):", "\n", "#         inputs1, inputs2, targets = inputs1.to(self.device), inputs2.to(self.device), targets.to(self.device)", "\n", "#         targets = targets.repeat(2)", "\n", "#         inputs = torch.cat((inputs1, inputs2), 0)", "\n", "#         repr, cluster, emb = self.model(inputs)", "\n", "#         # Total loss", "\n", "#         loss = 0", "\n", "#", "\n", "#         # Compute RIM loss", "\n", "#         if self.rim:", "\n", "#             rim_loss.update(self.rim_criterion(cluster).item(), inputs.size(0))", "\n", "#", "\n", "#         if self.ml or self.recon:", "\n", "#             pred_cluster = torch.argmax(torch.softmax(cluster, dim=1), dim=1)", "\n", "#             unique_cluster = torch.unique(pred_cluster)", "\n", "#             centroid_embedding = torch.zeros(len(unique_cluster), 1024, 7, 7).to(self.device)", "\n", "#             index = pred_cluster == unique_cluster.view(-1, 1)", "\n", "#             for i in range(len(index)):", "\n", "#                 centroid_embedding[i] = torch.mean(emb[index[i]], dim=0)", "\n", "#", "\n", "#             if self.ml:", "\n", "#                 x = self.model.flatten(centroid_embedding.detach().to(self.device))", "\n", "#                 x = self.model.feat_ext(x)", "\n", "#                 centroid_repr = self.model.l2norm(x)", "\n", "#                 metric_loss.update(self.ml_criterion(repr, centroid_repr, pred_cluster).item(), inputs.size(0))", "\n", "#", "\n", "#             if self.recon:", "\n", "#                 emb_index = torch.argmax(unique_cluster == pred_cluster.view(-1, 1), dim=1)", "\n", "#                 centroid_latent = centroid_embedding[emb_index]", "\n", "#                 recon = self.model.decoder(centroid_latent)", "\n", "#                 recon_loss.update(self.recon_criterion(recon, inputs/255.).item(), inputs.size(0))", "\n", "#", "\n", "#     self.val_writer.add_scalar('ml_loss', metric_loss.avg, epoch)", "\n", "#     self.val_writer.add_scalar('recon', recon_loss.avg, epoch)", "\n", "#     self.val_writer.add_scalar('rim', rim_loss.avg, epoch)", "\n", "#     print('Val loss - Metric: {metric.avg:4f} RIM: {rim.avg:4f} Recon: {recon.avg:4f}'.format(metric=metric_loss, rim=rim_loss, recon=recon_loss))", "\n", "#     val_set.transform = transform_test", "\n", "# testing performance", "\n", "        ", "print", "(", "'Extracting features...'", ")", "\n", "test_set", "=", "self", ".", "val_loader", ".", "dataset", "\n", "test_features", ",", "test_targets", "=", "extract_features", "(", "test_set", ",", "self", ".", "model", ",", "self", ".", "args", ",", "mode", "=", "'eval'", ")", "\n", "\n", "train_set", "=", "self", ".", "train_loader", ".", "dataset", "\n", "train_features", ",", "train_targets", "=", "extract_features", "(", "train_set", ",", "self", ".", "model", ",", "self", ".", "args", ",", "mode", "=", "'eval'", ")", "\n", "recal_train", "=", "eval_recall", "(", "train_features", ",", "train_targets", ")", "\n", "recal", "=", "eval_recall", "(", "test_features", ",", "test_targets", ")", "\n", "nmi", "=", "eval_nmi", "(", "test_features", ",", "test_targets", ")", "\n", "return", "{", "'Recall'", ":", "recal", ",", "\n", "'NMI'", ":", "nmi", ",", "\n", "'Recall train'", ":", "recal_train", "\n", "# 'Cluster acc': cluster_acc", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.trainer.adjust_learning_rate": [[190, 204], ["None"], "function", ["None"], ["", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 10 every 30 epochs\"\"\"", "\n", "# if epoch < 10:", "\n", "#     lr = args.lr", "\n", "# elif epoch >= 10 and epoch < 20:", "\n", "#     lr = args.lr * 0.1", "\n", "# else:", "\n", "#     lr = args.lr * 0.01", "\n", "# for param_group in optimizer.param_groups:", "\n", "#     param_group['lr'] = lr", "\n", "current_lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "if", "epoch", "==", "7", ":", "\n", "        ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "current_lr", "*", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.trainer.compute_knn": [[206, 222], ["len", "numpy.arange", "range", "np.arange.astype", "numpy.random.choice", "numpy.argpartition"], "function", ["None"], ["", "", "", "def", "compute_knn", "(", "dist_feat", ",", "targets", ",", "knn", "=", "5", ",", "epoch", "=", "8", ")", ":", "\n", "    ", "'''\n    compute the knn according to instance id/ class id\n    '''", "\n", "ndata", "=", "len", "(", "targets", ")", "\n", "nnIndex", "=", "np", ".", "arange", "(", "ndata", ")", "\n", "\n", "top_acc", "=", "0.", "\n", "# compute the instance knn", "\n", "for", "i", "in", "range", "(", "ndata", ")", ":", "\n", "        ", "dist_feat", "[", "i", ",", "i", "]", "=", "-", "1000", "\n", "dist_tmp", "=", "dist_feat", "[", "i", ",", ":", "]", "\n", "ind", "=", "np", ".", "argpartition", "(", "dist_tmp", ",", "-", "knn", ")", "[", "-", "knn", ":", "]", "\n", "# random 1nn and augmented sample for positive", "\n", "nnIndex", "[", "i", "]", "=", "np", ".", "random", ".", "choice", "(", "[", "ind", "[", "0", "]", ",", "i", "]", ")", "\n", "", "return", "nnIndex", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.trainer.set_bn_to_eval": [[224, 230], ["classname.find", "m.eval"], "function", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.auto_enc_trainer.AutoEncocderTrainer.eval"], ["", "def", "set_bn_to_eval", "(", "m", ")", ":", "\n", "# 1. no update for running mean and var", "\n", "# 2. scale and shift parameters are still trainable", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.trainer.extract_features": [[232, 268], ["model.eval", "len", "torch.utils.data.DataLoader", "torch.zeros", "torch.Tensor", "model.train", "numpy.zeros", "torch.no_grad", "enumerate", "inputs.to.size", "min", "inputs.to.to", "batch_feat.cpu", "model"], "function", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.auto_enc_trainer.AutoEncocderTrainer.eval", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.BaseCriterion.to"], ["", "", "def", "extract_features", "(", "dataset", ",", "model", ",", "args", ",", "mode", "=", "'train'", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "model", ".", "mode", "=", "'pool'", "\n", "n_data", "=", "len", "(", "dataset", ")", "\n", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "args", ".", "test_batch", ",", "shuffle", "=", "False", ",", "num_workers", "=", "4", ")", "\n", "if", "mode", "==", "'train'", ":", "\n", "        ", "dataset", ".", "transform", "=", "transform_test", "\n", "labels", "=", "np", ".", "zeros", "(", "n_data", ")", "\n", "out_index", "=", "1", "\n", "feat_dim", "=", "1024", "\n", "", "elif", "mode", "==", "'eval'", ":", "\n", "        ", "labels", "=", "dataset", ".", "targets", "\n", "out_index", "=", "0", "\n", "feat_dim", "=", "args", ".", "low_dim", "\n", "", "else", ":", "\n", "        ", "labels", "=", "dataset", ".", "targets", "\n", "out_index", "=", "2", "\n", "feat_dim", "=", "args", ".", "n_cluster", "\n", "\n", "", "features", "=", "torch", ".", "zeros", "(", "n_data", ",", "feat_dim", ")", "\n", "labels", "=", "torch", ".", "Tensor", "(", "labels", ")", "\n", "ptr", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "inputs", ",", "_", ",", "_", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "batch_size", "=", "inputs", ".", "size", "(", "0", ")", "\n", "real_size", "=", "min", "(", "batch_size", ",", "args", ".", "test_batch", ")", "\n", "inputs", "=", "inputs", ".", "to", "(", "args", ".", "device", ")", "\n", "batch_feat", "=", "model", "(", "inputs", ")", "[", "out_index", "]", "\n", "features", "[", "ptr", ":", "ptr", "+", "real_size", ",", ":", "]", "=", "batch_feat", ".", "cpu", "(", ")", "\n", "ptr", "+=", "args", ".", "test_batch", "\n", "\n", "", "", "if", "mode", "==", "'train'", "or", "mode", "==", "'cluster'", ":", "\n", "        ", "dataset", ".", "transform", "=", "transform_train", "\n", "", "model", ".", "train", "(", ")", "\n", "model", ".", "mode", "=", "'normal'", "\n", "return", "features", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.base_trainer.BaseTrainer.__init__": [[11, 23], ["loss.LossMonitor", "base_trainer.BaseTrainer.get_suffix", "base_trainer.BaseTrainer.get_logger", "cfg.save_config", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.base_trainer.BaseTrainer.get_suffix", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.base_trainer.BaseTrainer.get_logger", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.config.Config.save_config"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "optimizer", ",", "cfg", ")", ":", "\n", "        ", "self", ".", "name", "=", "cfg", ".", "model_name", "\n", "self", ".", "n_epoch", "=", "cfg", ".", "n_epoch", "\n", "self", ".", "save_dir", "=", "cfg", ".", "save_dir", "\n", "self", ".", "start_epoch", "=", "1", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "loss_monitor", "=", "LossMonitor", "(", ")", "\n", "self", ".", "suffix", "=", "self", ".", "get_suffix", "(", ")", "\n", "self", ".", "logger", "=", "self", ".", "get_logger", "(", ")", "\n", "self", ".", "main_metric", "=", "'accuracy'", "\n", "cfg", ".", "save_config", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "'config.json'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.base_trainer.BaseTrainer.get_suffix": [[24, 28], ["datetime.datetime.datetime.now", "datetime.datetime.now.strftime"], "methods", ["None"], ["", "def", "get_suffix", "(", "self", ")", ":", "\n", "        ", "time_stamp", "=", "datetime", ".", "now", "(", ")", "\n", "suffix", "=", "\"{}_{}\"", ".", "format", "(", "self", ".", "name", ",", "time_stamp", ".", "strftime", "(", "\"%b-%d-%H_%M_%S\"", ")", ")", "\n", "return", "suffix", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.base_trainer.BaseTrainer.step": [[29, 31], ["None"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.base_trainer.BaseTrainer.eval": [[32, 34], ["None"], "methods", ["None"], ["", "def", "eval", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.base_trainer.BaseTrainer.train": [[35, 55], ["range", "base_trainer.BaseTrainer.step", "base_trainer.BaseTrainer.eval", "base_trainer.update_best_results", "base_trainer.BaseTrainer.logger.info", "base_trainer.BaseTrainer.log_results", "base_trainer.BaseTrainer.log_results", "base_trainer.BaseTrainer.log_results", "print", "base_trainer.BaseTrainer.get_state_for_save", "base_trainer.BaseTrainer.update", "base_trainer.BaseTrainer.update", "base_trainer.BaseTrainer.save_checkpoint"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.auto_enc_trainer.AutoEncocderTrainer.step", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.auto_enc_trainer.AutoEncocderTrainer.eval", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.base_trainer.update_best_results", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.base_trainer.BaseTrainer.log_results", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.base_trainer.BaseTrainer.log_results", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.base_trainer.BaseTrainer.log_results", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.auto_enc_trainer.AutoEncocderTrainer.get_state_for_save", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.base_trainer.BaseTrainer.save_checkpoint"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "best_results", "=", "{", "}", "\n", "best_acc", "=", "-", "1e10", "\n", "for", "epoch", "in", "range", "(", "self", ".", "start_epoch", ",", "self", ".", "n_epoch", "+", "1", ")", ":", "\n", "            ", "results", "=", "self", ".", "step", "(", "epoch", ")", "\n", "val_results", "=", "self", ".", "eval", "(", "epoch", ")", "\n", "update_best_results", "(", "best_results", ",", "val_results", ")", "\n", "\n", "self", ".", "logger", ".", "info", "(", "'[Epoch] {}'", ".", "format", "(", "epoch", ")", ")", "\n", "self", ".", "log_results", "(", "'Train'", ",", "results", ")", "\n", "self", ".", "log_results", "(", "'Eval'", ",", "val_results", ")", "\n", "self", ".", "log_results", "(", "'Best'", ",", "best_results", ")", "\n", "\n", "if", "val_results", "[", "self", ".", "main_metric", "]", ">", "best_acc", ":", "\n", "                ", "best_acc", "=", "val_results", "[", "self", ".", "main_metric", "]", "\n", "print", "(", "'Saving..'", ")", "\n", "state", "=", "self", ".", "get_state_for_save", "(", "epoch", ")", "\n", "state", ".", "update", "(", "results", ")", "\n", "state", ".", "update", "(", "val_results", ")", "\n", "self", ".", "save_checkpoint", "(", "state", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.base_trainer.BaseTrainer.save_checkpoint": [[56, 59], ["torch.save", "os.path.join"], "methods", ["None"], ["", "", "", "def", "save_checkpoint", "(", "self", ",", "state", ",", "epoch", ")", ":", "\n", "        ", "checkpoint_file", "=", "\"model_best.{}.pth\"", ".", "format", "(", "epoch", ")", "\n", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "checkpoint_file", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.base_trainer.BaseTrainer.get_logger": [[60, 69], ["logging.StreamHandler", "os.path.join", "logger.get_logger.get_logger", "logger.get_logger.get_logger.addHandler", "os.path.exists", "os.mkdir", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.base_trainer.BaseTrainer.get_logger"], ["", "def", "get_logger", "(", "self", ")", ":", "\n", "        ", "handler", "=", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", "\n", "log_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "'logs'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "log_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "log_dir", ")", "\n", "# log_file = \"{}.txt\".format(self.suffix)", "\n", "", "logger", "=", "get_logger", "(", "'train'", ",", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'info.log'", ")", ")", "\n", "logger", ".", "addHandler", "(", "handler", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.base_trainer.BaseTrainer.log_results": [[70, 75], ["results.items", "base_trainer.BaseTrainer.logger.info"], "methods", ["None"], ["", "def", "log_results", "(", "self", ",", "prefix", ",", "results", ")", ":", "\n", "        ", "msg", "=", "'{} results: '", ".", "format", "(", "prefix", ")", "\n", "for", "name", ",", "value", "in", "results", ".", "items", "(", ")", ":", "\n", "            ", "msg", "+=", "'\\t{}: {:.4f}'", ".", "format", "(", "name", ",", "value", ")", "\n", "", "self", ".", "logger", ".", "info", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.base_trainer.BaseTrainer.get_state_for_save": [[76, 83], ["base_trainer.BaseTrainer.model.state_dict", "base_trainer.BaseTrainer.optimizer.state_dict"], "methods", ["None"], ["", "def", "get_state_for_save", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "state", "=", "{", "\n", "'model'", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'optimizer'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.base_trainer.update_best_results": [[86, 93], ["current.keys"], "function", ["None"], ["", "", "def", "update_best_results", "(", "best", ",", "current", ")", ":", "\n", "    ", "for", "key", "in", "current", ".", "keys", "(", ")", ":", "\n", "        ", "if", "key", "in", "best", ":", "\n", "            ", "if", "current", "[", "key", "]", ">", "best", "[", "key", "]", ":", "\n", "                ", "best", "[", "key", "]", "=", "current", "[", "key", "]", "\n", "", "", "else", ":", "\n", "            ", "best", "[", "key", "]", "=", "current", "[", "key", "]", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.auto_enc_trainer.AutoEncocderTrainer.__init__": [[10, 20], ["base_trainer.BaseTrainer.__init__", "auto_enc_trainer.AutoEncocderTrainer.logger.info", "loss.ReconstructCriterion", "auto_enc_trainer.AutoEncocderTrainer.loss_monitor.add_loss"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.auto_enc_trainer.AutoEncocderTrainer.__init__", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.LossMonitor.add_loss"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "optimizer", ",", "cfg", ",", "train_loader", ",", "val_loader", ")", ":", "\n", "        ", "super", "(", "AutoEncocderTrainer", ",", "self", ")", ".", "__init__", "(", "model", ",", "optimizer", ",", "cfg", ")", "\n", "self", ".", "train_loader", "=", "train_loader", "\n", "self", ".", "val_loader", "=", "val_loader", "\n", "self", ".", "main_metric", "=", "'MSE'", "\n", "self", ".", "device", "=", "cfg", ".", "device", "\n", "self", ".", "args", "=", "cfg", "\n", "self", ".", "logger", ".", "info", "(", "cfg", ")", "\n", "self", ".", "criterion", "=", "ReconstructCriterion", "(", ")", "\n", "self", ".", "loss_monitor", ".", "add_loss", "(", "self", ".", "criterion", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.auto_enc_trainer.AutoEncocderTrainer.step": [[21, 38], ["auto_enc_trainer.AutoEncocderTrainer.model.train", "enumerate", "auto_enc_trainer.AutoEncocderTrainer.optimizer.zero_grad", "auto_enc_trainer.AutoEncocderTrainer.model", "auto_enc_trainer.AutoEncocderTrainer.model.decoder", "auto_enc_trainer.AutoEncocderTrainer.criterion", "auto_enc_trainer.AutoEncocderTrainer.criterion.update", "auto_enc_trainer.AutoEncocderTrainer.backward", "auto_enc_trainer.AutoEncocderTrainer.optimizer.step", "img.to", "target.to", "auto_enc_trainer.AutoEncocderTrainer.item", "img.size", "print", "print", "auto_enc_trainer.AutoEncocderTrainer.loss_monitor.summary", "len"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.auto_enc_trainer.AutoEncocderTrainer.step", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.BaseCriterion.to", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.BaseCriterion.to", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.LossMonitor.summary"], ["", "def", "step", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "model", ".", "train", "(", ")", "\n", "for", "batch_idx", ",", "(", "img", ",", "target", ")", "in", "enumerate", "(", "self", ".", "train_loader", ")", ":", "\n", "            ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "img", ",", "target", "=", "img", ".", "to", "(", "self", ".", "device", ")", ",", "target", ".", "to", "(", "self", ".", "device", ")", "\n", "_", ",", "_", ",", "emb", "=", "self", ".", "model", "(", "img", ")", "\n", "recon", "=", "self", ".", "model", ".", "decoder", "(", "emb", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "recon", ",", "target", "/", "255.", ")", "\n", "self", ".", "criterion", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "img", ".", "size", "(", "0", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "# self.scheduler.step()", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "batch_idx", "%", "20", "==", "0", ":", "\n", "                ", "print", "(", "'Epoch: [{}][{}/{}]\\t'", ".", "format", "(", "epoch", ",", "batch_idx", ",", "len", "(", "self", ".", "train_loader", ")", ")", ",", "end", "=", "''", ")", "\n", "print", "(", "self", ".", "loss_monitor", ".", "summary", "(", ")", ")", "\n", "", "", "return", "self", ".", "loss_monitor", ".", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.auto_enc_trainer.AutoEncocderTrainer.eval": [[39, 59], ["auto_enc_trainer.AutoEncocderTrainer.model.eval", "enumerate", "img.to", "target.to", "torch.no_grad", "auto_enc_trainer.AutoEncocderTrainer.model", "auto_enc_trainer.AutoEncocderTrainer.eval.eval_mean_square"], "methods", ["home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.auto_enc_trainer.AutoEncocderTrainer.eval", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.BaseCriterion.to", "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.None.loss.BaseCriterion.to"], ["", "def", "eval", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "def", "eval_mean_square", "(", "input", ",", "target", ")", ":", "\n", "            ", "return", "(", "(", "input", "-", "target", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "", "metric", "=", "[", "]", "\n", "for", "batch_idx", ",", "(", "img", ",", "target", ")", "in", "enumerate", "(", "self", ".", "val_loader", ")", ":", "\n", "            ", "img", ",", "target", "=", "img", ".", "to", "(", "self", ".", "device", ")", ",", "target", ".", "to", "(", "self", ".", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "_", ",", "_", ",", "emb", "=", "self", ".", "model", "(", "img", ")", "\n", "recon", "=", "self", ".", "model", ".", "decoder", "(", "emb", ")", "*", "255", "\n", "score", "=", "eval_mean_square", "(", "recon", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "target", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "metric", ".", "append", "(", "score", ")", "\n", "\n", "", "if", "batch_idx", "==", "0", ":", "\n", "                ", "recon", "=", "recon", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "for", "i", "in", "range", "(", "recon", ".", "size", "(", "0", ")", ")", ":", "\n", "                    ", "recon", "[", "i", "]", "=", "inv_tra", "(", "recon", "[", "i", "]", ")", "\n", "", "grid", "=", "make_grid", "(", "recon", ",", "nrow", "=", "10", ")", "\n", "save_image", "(", "grid", ",", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "'recon_epoch_{}.jpg'", ".", "format", "(", "epoch", ")", ")", ")", "\n", "", "", "return", "{", "'MSE'", ":", "-", "sum", "(", "metric", ")", "/", "len", "(", "metric", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.trainer.auto_enc_trainer.AutoEncocderTrainer.get_state_for_save": [[60, 67], ["auto_enc_trainer.AutoEncocderTrainer.model.state_dict", "auto_enc_trainer.AutoEncocderTrainer.optimizer.state_dict"], "methods", ["None"], ["", "def", "get_state_for_save", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "state", "=", "{", "\n", "'encoder'", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'optimizer'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.pre_process.pre_process_cub200.trim": [[9, 22], ["PIL.Image.new", "PIL.ImageChops.difference", "PIL.ImageChops.add", "ImageChops.add.getbbox", "max", "max", "min", "min", "im.crop"], "function", ["None"], ["def", "trim", "(", "im", ")", ":", "\n", "    ", "bg", "=", "Image", ".", "new", "(", "im", ".", "mode", ",", "im", ".", "size", ",", "'white'", ")", "\n", "diff", "=", "ImageChops", ".", "difference", "(", "im", ",", "bg", ")", "\n", "diff", "=", "ImageChops", ".", "add", "(", "diff", ",", "diff", ",", "2.0", ",", "-", "55", ")", "\n", "bbox", "=", "diff", ".", "getbbox", "(", ")", "\n", "if", "bbox", ":", "\n", "        ", "a", "=", "max", "(", "0", ",", "bbox", "[", "0", "]", "-", "20", ")", "\n", "b", "=", "max", "(", "0", ",", "bbox", "[", "1", "]", "-", "20", ")", "\n", "c", "=", "min", "(", "im", ".", "size", "[", "0", "]", ",", "bbox", "[", "2", "]", "+", "20", ")", "\n", "d", "=", "min", "(", "im", ".", "size", "[", "1", "]", ",", "bbox", "[", "3", "]", "+", "20", ")", "\n", "bbox", "=", "(", "a", ",", "b", ",", "c", ",", "d", ")", "\n", "return", "im", ".", "crop", "(", "bbox", ")", "\n", "", "return", "im", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.pre_process.pre_process_cub200.pad": [[23, 36], ["PIL.Image.new", "Image.new.paste", "im.resize.resize", "im.resize.resize", "im.resize.resize"], "function", ["None"], ["", "def", "pad", "(", "im", ")", ":", "\n", "    ", "if", "im", ".", "size", "[", "0", "]", ">", "im", ".", "size", "[", "1", "]", ":", "\n", "        ", "im", "=", "im", ".", "resize", "(", "(", "fix_image_width", ",", "fix_image_height", "*", "im", ".", "size", "[", "1", "]", "/", "im", ".", "size", "[", "0", "]", ")", ",", "Image", ".", "ANTIALIAS", ")", "\n", "", "elif", "im", ".", "size", "[", "1", "]", ">", "im", ".", "size", "[", "0", "]", ":", "\n", "        ", "im", "=", "im", ".", "resize", "(", "(", "fix_image_width", "*", "im", ".", "size", "[", "0", "]", "/", "im", ".", "size", "[", "1", "]", ",", "fix_image_height", ")", ",", "Image", ".", "ANTIALIAS", ")", "\n", "", "else", ":", "\n", "        ", "im", "=", "im", ".", "resize", "(", "(", "fix_image_width", ",", "fix_image_height", ")", ",", "Image", ".", "ANTIALIAS", ")", "\n", "\n", "", "new_im", "=", "Image", ".", "new", "(", "im", ".", "mode", ",", "(", "fix_image_width", ",", "fix_image_height", ")", ",", "'white'", ")", "\n", "\n", "new_im", ".", "paste", "(", "im", ",", "(", "(", "fix_image_width", "-", "im", ".", "size", "[", "0", "]", ")", "/", "2", ",", "\n", "(", "fix_image_height", "-", "im", ".", "size", "[", "1", "]", ")", "/", "2", ")", ")", "\n", "return", "new_im", "\n", "\n"]], "home.repos.pwc.inspect_result.aioz-ai_BMVC20_CBSwR.pre_process.pre_process_car196.trim": [[12, 19], ["PIL.Image.new", "PIL.ImageChops.difference", "PIL.ImageChops.add", "ImageChops.add.getbbox", "im.crop"], "function", ["None"], ["def", "trim", "(", "im", ")", ":", "\n", "    ", "bg", "=", "Image", ".", "new", "(", "im", ".", "mode", ",", "im", ".", "size", ",", "'white'", ")", "\n", "diff", "=", "ImageChops", ".", "difference", "(", "im", ",", "bg", ")", "\n", "diff", "=", "ImageChops", ".", "add", "(", "diff", ",", "diff", ",", "2.0", ",", "-", "55", ")", "\n", "bbox", "=", "diff", ".", "getbbox", "(", ")", "\n", "if", "bbox", ":", "\n", "        ", "return", "im", ".", "crop", "(", "bbox", ")", "\n", "\n"]]}