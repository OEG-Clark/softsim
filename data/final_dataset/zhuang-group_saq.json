{"home.repos.pwc.inspect_result.zhuang-group_saq.None.qconfig.get_qparser": [[6, 116], ["core.config.get_parser", "core.config.get_parser.add_argument", "core.config.get_parser.add_argument", "core.config.get_parser.add_argument", "core.config.get_parser.add_argument", "core.config.get_parser.add_argument", "core.config.get_parser.add_argument", "core.config.get_parser.add_argument", "core.config.get_parser.add_argument", "core.config.get_parser.add_argument", "core.config.get_parser.add_argument", "core.config.get_parser.add_argument", "core.config.get_parser.add_argument", "core.config.get_parser.add_argument", "core.config.get_parser.add_argument", "core.config.get_parser.add_argument", "core.config.get_parser.add_argument", "core.config.get_parser.add_argument", "core.config.get_parser.add_argument", "core.config.get_parser.add_argument", "core.config.get_parser.add_argument", "core.config.get_parser.add_argument", "core.config.get_parser.add_argument", "core.config.get_parser.add_argument", "core.config.get_parser.add_argument", "core.config.get_parser.add_argument", "core.config.get_parser.add_argument", "core.config.get_parser.add_argument", "core.config.get_parser.add_argument", "len", "float", "len", "float", "s.split", "s.split"], "function", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.config.get_parser"], ["def", "get_qparser", "(", ")", ":", "\n", "    ", "parser", "=", "get_parser", "(", ")", "\n", "# general", "\n", "parser", ".", "add_argument", "(", "\n", "\"--quantize_first_last\"", ",", "\n", "type", "=", "bool", ",", "\n", "default", "=", "True", ",", "\n", "help", "=", "\"whether to quantize the first and last layer\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--quan_type\"", ",", "type", "=", "str", ",", "default", "=", "\"LIQ_wn\"", ",", "help", "=", "\"type of quantization function\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--clip_lr\"", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "help", "=", "\"learning rate of clip value\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--qw\"", ",", "type", "=", "float", ",", "default", "=", "8.0", ",", "help", "=", "\"weight bit\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--qa\"", ",", "type", "=", "float", ",", "default", "=", "8.0", ",", "help", "=", "\"activation bit\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--rho\"", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "\"rho in SAM\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--eta\"", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "help", "=", "\"eta in ASAM\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--include_wclip\"", ",", "\n", "type", "=", "bool", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"whether to include clip of weight in SAM\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--include_aclip\"", ",", "\n", "type", "=", "bool", ",", "\n", "default", "=", "True", ",", "\n", "help", "=", "\"whether to include clip of activation in SAM\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--include_bn\"", ",", "\n", "type", "=", "bool", ",", "\n", "default", "=", "True", ",", "\n", "help", "=", "\"whether to include bn parameters in SAM\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--grad_clip\"", ",", "type", "=", "float", ",", "default", "=", "5.0", ",", "help", "=", "\"maximum norm of gradient\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--hidden_size\"", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "\"hidden dimension of controller\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--train_ratio\"", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "\"ratio of training set\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--val_num\"", ",", "type", "=", "int", ",", "default", "=", "10000", ",", "help", "=", "\"number of validation samples\"", "\n", ")", "\n", "\n", "# controller", "\n", "parser", ".", "add_argument", "(", "\n", "\"--c_lr\"", ",", "type", "=", "float", ",", "default", "=", "0.001", ",", "help", "=", "\"initial learning rate of controller\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--c_n_epochs\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "90", ",", "\n", "help", "=", "\"number of training epochs of controller\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--c_weight_decay\"", ",", "type", "=", "float", ",", "default", "=", "5e-4", ",", "help", "=", "\"weight decay of controller\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--c_pretrained\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "\"path of pretrained controller\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--c_resume\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "\"path of resume controller\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--loss_lambda\"", ",", "type", "=", "float", ",", "default", "=", "1e-4", ",", "help", "=", "\"lambda coefficient\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--entropy_coeff\"", ",", "type", "=", "float", ",", "default", "=", "5e-4", ",", "help", "=", "\"coefficient of entropy term\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--target_bops\"", ",", "type", "=", "float", ",", "default", "=", "648", ",", "help", "=", "\"target bops\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--share_clip\"", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "\"whether to share clip value\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--bit_warmup_epochs\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "0", ",", "\n", "help", "=", "\"number of epochs to warmup sam\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--arch_bits\"", ",", "\n", "type", "=", "lambda", "s", ":", "[", "float", "(", "item", ")", "for", "item", "in", "s", ".", "split", "(", "\",\"", ")", "]", "if", "len", "(", "s", ")", "!=", "0", "else", "\"\"", ",", "\n", "default", "=", "\"\"", ",", "\n", "help", "=", "\"bits configuration of each layer\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--bits_choice\"", ",", "\n", "type", "=", "lambda", "s", ":", "[", "float", "(", "item", ")", "for", "item", "in", "s", ".", "split", "(", "\",\"", ")", "]", "if", "len", "(", "s", ")", "!=", "0", "else", "\"\"", ",", "\n", "default", "=", "\"2,3,4,5\"", ",", "\n", "help", "=", "\"bits configuration of each layer\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--wa_same_bit\"", ",", "\n", "type", "=", "bool", ",", "\n", "default", "=", "True", ",", "\n", "help", "=", "\"whether to set the same bit to weights and activations\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--search_w_bit\"", ",", "\n", "type", "=", "bool", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"whether to set the same bit to weights and activations\"", ",", "\n", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.None.qconfig.set_save_path": [[118, 148], ["os.path.join", "core.config.create_dir", "len"], "function", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.config.create_dir"], ["", "def", "set_save_path", "(", "args", ")", ":", "\n", "    ", "if", "len", "(", "args", ".", "suffix", ")", "==", "0", ":", "\n", "        ", "suffix", "=", "\"log_{}_{}_bs{:d}_e{:d}_lr{:.5f}_cliplr{}_{}_w{}a{}_qfl{}_opt{}_rho{}_eta{}_iwc{}_iac{}_ib{}_lambda{}_target{}_{}_{}/\"", ".", "format", "(", "\n", "args", ".", "network", ",", "\n", "args", ".", "dataset", ",", "\n", "args", ".", "batch_size", ",", "\n", "args", ".", "n_epochs", ",", "\n", "args", ".", "lr", ",", "\n", "args", ".", "clip_lr", ",", "\n", "args", ".", "quan_type", ",", "\n", "args", ".", "qw", ",", "\n", "args", ".", "qa", ",", "\n", "1", "if", "args", ".", "quantize_first_last", "else", "0", ",", "\n", "args", ".", "opt_type", ",", "\n", "args", ".", "rho", ",", "\n", "args", ".", "eta", ",", "\n", "args", ".", "include_wclip", ",", "\n", "args", ".", "include_aclip", ",", "\n", "args", ".", "include_bn", ",", "\n", "args", ".", "loss_lambda", ",", "\n", "args", ".", "target_bops", ",", "\n", "args", ".", "date", ",", "\n", "args", ".", "experiment_id", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "suffix", "=", "args", ".", "suffix", "\n", "\n", "", "args", ".", "save_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "suffix", ")", "\n", "\n", "create_dir", "(", "args", ".", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.None.qconfig.get_args": [[150, 155], ["qconfig.get_qparser", "get_qparser.parse_args", "core.config.params_check"], "function", ["home.repos.pwc.inspect_result.zhuang-group_saq.None.qconfig.get_qparser", "home.repos.pwc.inspect_result.zhuang-group_saq.core.config.params_check"], ["", "def", "get_args", "(", ")", ":", "\n", "    ", "parser", "=", "get_qparser", "(", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "params_check", "(", "args", ")", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.zhuang-group_saq.None.link_imagenet.link_imagenet": [[4, 23], ["print", "open", "f.readlines", "os.path.join", "os.path.join", "line.strip.strip", "classname_list.append", "os.path.join", "os.path.join", "print", "os.symlink"], "function", ["None"], ["def", "link_imagenet", "(", "src_data_path", ",", "dst_data_path", ",", "sample_path", ")", ":", "\n", "    ", "classname_list", "=", "[", "]", "\n", "with", "open", "(", "sample_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", "\n", "classname_list", ".", "append", "(", "line", ")", "\n", "", "", "print", "(", "classname_list", ")", "\n", "\n", "for", "dataset", "in", "[", "\"train\"", ",", "\"val\"", "]", ":", "\n", "        ", "src_path", "=", "os", ".", "path", ".", "join", "(", "src_data_path", ",", "dataset", ")", "\n", "dst_path", "=", "os", ".", "path", ".", "join", "(", "dst_data_path", ",", "\"{}100\"", ".", "format", "(", "dataset", ")", ")", "\n", "\n", "for", "classname", "in", "classname_list", ":", "\n", "            ", "src_dir", "=", "os", ".", "path", ".", "join", "(", "src_path", ",", "classname", ")", "\n", "dst_dir", "=", "os", ".", "path", ".", "join", "(", "dst_path", ",", "classname", ")", "\n", "\n", "print", "(", "\"Link {} to {}\"", ".", "format", "(", "src_dir", ",", "dst_dir", ")", ")", "\n", "\n", "os", ".", "symlink", "(", "src_dir", ",", "dst_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.None.engine.set_first_forward": [[9, 13], ["model.named_modules", "isinstance", "m.set_first_forward"], "function", ["home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQLinear.set_first_forward"], ["def", "set_first_forward", "(", "model", ")", ":", "\n", "    ", "for", "n", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "(", "LIQ_wn_qsam", ".", "QConv2d", ",", "LIQ_wn_qsam", ".", "QLinear", ",", ")", ",", ")", ":", "\n", "            ", "m", ".", "set_first_forward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.None.engine.set_layer_first_forward": [[15, 22], ["model.named_modules", "isinstance", "m.set_first_forward"], "function", ["home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQLinear.set_first_forward"], ["", "", "", "def", "set_layer_first_forward", "(", "model", ",", "layer_name", ")", ":", "\n", "    ", "for", "n", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "(", "\n", "isinstance", "(", "m", ",", "(", "LIQ_wn_qsam", ".", "QConv2d", ",", "LIQ_wn_qsam", ".", "QLinear", ",", ")", ",", ")", "\n", "and", "n", "in", "layer_name", "\n", ")", ":", "\n", "            ", "m", ".", "set_first_forward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.None.engine.set_second_forward": [[24, 28], ["model.named_modules", "isinstance", "m.set_second_forward"], "function", ["home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQLinear.set_second_forward"], ["", "", "", "def", "set_second_forward", "(", "model", ")", ":", "\n", "    ", "for", "n", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "(", "LIQ_wn_qsam", ".", "QConv2d", ",", "LIQ_wn_qsam", ".", "QLinear", ",", ")", ",", ")", ":", "\n", "            ", "m", ".", "set_second_forward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.None.engine.set_layer_second_forward": [[30, 37], ["model.named_modules", "isinstance", "m.set_second_forward"], "function", ["home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQLinear.set_second_forward"], ["", "", "", "def", "set_layer_second_forward", "(", "model", ",", "layer_name", ")", ":", "\n", "    ", "for", "n", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "(", "\n", "isinstance", "(", "m", ",", "(", "LIQ_wn_qsam", ".", "QConv2d", ",", "LIQ_wn_qsam", ".", "QLinear", ",", ")", ",", ")", "\n", "and", "n", "in", "layer_name", "\n", ")", ":", "\n", "            ", "m", ".", "set_second_forward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.None.engine.train": [[39, 185], ["core.utils.MetricLogger", "core.utils.MetricLogger.add_meter", "core.utils.MetricLogger.add_meter", "model.train", "core.utils.MetricLogger.log_every", "core.utils.MetricLogger.synchronize_between_processes", "scheduler.step", "core.engine.get_lr", "logger.info", "logger.info", "core.utils.SmoothedValue", "core.utils.SmoothedValue", "time.time", "model", "criterion", "criterion.backward", "minimizer.ascent_step", "criterion().backward", "minimizer.descent_step", "core.utils.accuracy", "core.utils.MetricLogger.update", "core.utils.MetricLogger.meters[].update", "core.utils.MetricLogger.meters[].update", "core.utils.MetricLogger.meters[].update", "tensorboard_logger.add_scalar", "tensorboard_logger.add_scalar", "tensorboard_logger.add_scalar", "tensorboard_logger.add_scalar", "model.named_modules", "image.to", "target.to", "engine.set_second_forward", "engine.set_first_forward", "acc1.item", "acc5.item", "isinstance", "criterion", "criterion.item", "hasattr", "hasattr", "isinstance", "model", "time.time", "tensorboard_logger.add_scalar", "tensorboard_logger.add_scalar", "hasattr", "getattr", "hasattr", "getattr.numel", "tensorboard_logger.add_scalar", "tensorboard_logger.add_histogram", "getattr", "tensorboard_logger.add_histogram", "getattr.numel", "tensorboard_logger.add_scalar", "tensorboard_logger.add_histogram"], "function", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.add_meter", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.add_meter", "home.repos.pwc.inspect_result.zhuang-group_saq.core.trainer.Trainer.train", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.log_every", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.synchronize_between_processes", "home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.get_lr", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.AllReduce.backward", "home.repos.pwc.inspect_result.zhuang-group_saq.utils.qsam.QSAM.ascent_step", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.AllReduce.backward", "home.repos.pwc.inspect_result.zhuang-group_saq.utils.qsam.QSAM.descent_step", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.accuracy", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.update", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.update", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.update", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.update", "home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQLinear.set_second_forward", "home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQLinear.set_first_forward"], ["", "", "", "def", "train", "(", "\n", "model", ",", "\n", "train_loader", ",", "\n", "criterion", ",", "\n", "optimizer", ",", "\n", "minimizer", ",", "\n", "scheduler", ",", "\n", "device", ",", "\n", "logger", ",", "\n", "tensorboard_logger", ",", "\n", "epoch", ",", "\n", "args", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n        Train one epoch\n        :param epoch: index of epoch\n        \"\"\"", "\n", "\n", "metric_logger", "=", "MetricLogger", "(", "logger", "=", "logger", ",", "delimiter", "=", "\"  \"", ")", "\n", "metric_logger", ".", "add_meter", "(", "\"lr\"", ",", "SmoothedValue", "(", "window_size", "=", "1", ",", "fmt", "=", "\"{value}\"", ")", ")", "\n", "metric_logger", ".", "add_meter", "(", "\"img/s\"", ",", "SmoothedValue", "(", "window_size", "=", "10", ",", "fmt", "=", "\"{value}\"", ")", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "\n", "header", "=", "\"Epoch: [{}]\"", ".", "format", "(", "epoch", ")", "\n", "for", "image", ",", "target", "in", "metric_logger", ".", "log_every", "(", "\n", "train_loader", ",", "args", ".", "print_frequency", ",", "header", "\n", ")", ":", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "image", ",", "target", "=", "image", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "\n", "# Ascent Step", "\n", "model", ".", "require_backward_grad_sync", "=", "False", "\n", "model", ".", "require_forward_param_sync", "=", "True", "\n", "# enable_running_stats(model)", "\n", "output", "=", "model", "(", "image", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "minimizer", ".", "ascent_step", "(", ")", "\n", "\n", "# descent step", "\n", "model", ".", "require_backward_grad_sync", "=", "True", "\n", "model", ".", "require_forward_param_sync", "=", "False", "\n", "if", "\"QSAM\"", "in", "args", ".", "opt_type", "or", "\"QASAM\"", "in", "args", ".", "opt_type", ":", "\n", "            ", "set_second_forward", "(", "model", ")", "\n", "# disable_running_stats(model)", "\n", "", "criterion", "(", "model", "(", "image", ")", ",", "target", ")", ".", "backward", "(", ")", "\n", "# torch.nn.utils.clip_grad_norm_(model.parameters(), args.grad_clip)", "\n", "minimizer", ".", "descent_step", "(", ")", "\n", "if", "\"QSAM\"", "in", "args", ".", "opt_type", "or", "\"QASAM\"", "in", "args", ".", "opt_type", ":", "\n", "            ", "set_first_forward", "(", "model", ")", "\n", "\n", "", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "batch_size", "=", "image", ".", "shape", "[", "0", "]", "\n", "metric_logger", ".", "update", "(", "loss", "=", "loss", ".", "item", "(", ")", ",", "lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", ")", "\n", "metric_logger", ".", "meters", "[", "\"acc1\"", "]", ".", "update", "(", "acc1", ".", "item", "(", ")", ",", "n", "=", "batch_size", ")", "\n", "metric_logger", ".", "meters", "[", "\"acc5\"", "]", ".", "update", "(", "acc5", ".", "item", "(", ")", ",", "n", "=", "batch_size", ")", "\n", "metric_logger", ".", "meters", "[", "\"img/s\"", "]", ".", "update", "(", "\n", "batch_size", "*", "args", ".", "world_size", "/", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "\n", ")", "\n", "\n", "# gather the stats from all processes", "\n", "", "metric_logger", ".", "synchronize_between_processes", "(", ")", "\n", "\n", "scheduler", ".", "step", "(", ")", "\n", "lr", "=", "get_lr", "(", "optimizer", ")", "\n", "logger", ".", "info", "(", "\"Change Learning rate: {}\"", ".", "format", "(", "lr", ")", ")", "\n", "\n", "train_error", "=", "100", "-", "metric_logger", ".", "acc1", ".", "global_avg", "\n", "train_loss", "=", "metric_logger", ".", "loss", ".", "global_avg", "\n", "train5_error", "=", "100", "-", "metric_logger", ".", "acc5", ".", "global_avg", "\n", "if", "tensorboard_logger", "is", "not", "None", ":", "\n", "        ", "tensorboard_logger", ".", "add_scalar", "(", "\"train_top1_error\"", ",", "train_error", ",", "epoch", ")", "\n", "tensorboard_logger", ".", "add_scalar", "(", "\"train_top5_error\"", ",", "train5_error", ",", "epoch", ")", "\n", "tensorboard_logger", ".", "add_scalar", "(", "\"train_loss\"", ",", "train_loss", ",", "epoch", ")", "\n", "tensorboard_logger", ".", "add_scalar", "(", "\"lr\"", ",", "lr", ",", "epoch", ")", "\n", "weight_eps_names", "=", "[", "\n", "\"epsilon\"", ",", "\n", "\"tw_epsilon_norm\"", ",", "\n", "\"normalized_tw_epsilon_norm\"", ",", "\n", "\"weight_clip_value_epsilon\"", ",", "\n", "\"weight_clip_value_tw_epsilon_norm\"", ",", "\n", "\"weight_clip_value_normalized_tw_epsilon_norm\"", ",", "\n", "\"activation_clip_value_epsilon\"", ",", "\n", "\"activation_clip_value_tw_epsilon_norm\"", ",", "\n", "\"activation_clip_value_normalized_tw_epsilon_norm\"", ",", "\n", "\"bias_epsilon\"", ",", "\n", "\"bias_epsilon_norm\"", ",", "\n", "\"bias_normalized_epsilon_norm\"", ",", "\n", "]", "\n", "bn_eps_names", "=", "[", "\n", "\"weight_epsilon\"", ",", "\n", "\"weight_epsilon_norm\"", ",", "\n", "\"weight_normalized_epsilon_norm\"", ",", "\n", "\"bias_epsilon\"", ",", "\n", "\"bias_epsilon_norm\"", ",", "\n", "\"bias_normalized_epsilon_norm\"", ",", "\n", "]", "\n", "for", "name", ",", "module", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "(", "args", ".", "conv_type", ",", "args", ".", "fc_type", ")", ")", ":", "\n", "                ", "if", "hasattr", "(", "module", ",", "\"weight_clip_value\"", ")", ":", "\n", "                    ", "tensorboard_logger", ".", "add_scalar", "(", "\n", "\"{}_{}\"", ".", "format", "(", "name", ",", "\"weight_clip_value\"", ")", ",", "\n", "module", ".", "weight_clip_value", ",", "\n", "epoch", ",", "\n", ")", "\n", "", "if", "hasattr", "(", "module", ",", "\"activation_clip_value\"", ")", ":", "\n", "                    ", "tensorboard_logger", ".", "add_scalar", "(", "\n", "\"{}_{}\"", ".", "format", "(", "name", ",", "\"activation_clip_value\"", ")", ",", "\n", "module", ".", "activation_clip_value", ",", "\n", "epoch", ",", "\n", ")", "\n", "\n", "", "for", "weight_eps_name", "in", "weight_eps_names", ":", "\n", "                    ", "if", "hasattr", "(", "module", ",", "weight_eps_name", ")", ":", "\n", "                        ", "eps", "=", "getattr", "(", "module", ",", "weight_eps_name", ")", "\n", "if", "eps", ".", "numel", "(", ")", "==", "1", ":", "\n", "                            ", "tensorboard_logger", ".", "add_scalar", "(", "\n", "\"{}_{}\"", ".", "format", "(", "name", ",", "weight_eps_name", ")", ",", "eps", ",", "epoch", ",", "\n", ")", "\n", "", "else", ":", "\n", "                            ", "tensorboard_logger", ".", "add_histogram", "(", "\n", "\"{}_{}\"", ".", "format", "(", "name", ",", "weight_eps_name", ")", ",", "eps", ",", "epoch", ",", "\n", ")", "\n", "", "", "", "", "elif", "isinstance", "(", "module", ",", "(", "nn", ".", "BatchNorm2d", ")", ")", ":", "\n", "                ", "for", "bn_eps_name", "in", "bn_eps_names", ":", "\n", "                    ", "if", "hasattr", "(", "module", ",", "bn_eps_name", ")", ":", "\n", "                        ", "eps", "=", "getattr", "(", "module", ",", "bn_eps_name", ")", "\n", "if", "eps", ".", "numel", "(", ")", "==", "1", ":", "\n", "                            ", "tensorboard_logger", ".", "add_scalar", "(", "\n", "\"{}_{}\"", ".", "format", "(", "name", ",", "weight_eps_name", ")", ",", "eps", ",", "epoch", ",", "\n", ")", "\n", "", "else", ":", "\n", "                            ", "tensorboard_logger", ".", "add_histogram", "(", "\n", "\"{}_{}\"", ".", "format", "(", "name", ",", "weight_eps_name", ")", ",", "eps", ",", "epoch", ",", "\n", ")", "\n", "", "tensorboard_logger", ".", "add_histogram", "(", "\n", "\"{}_{}\"", ".", "format", "(", "name", ",", "bn_eps_name", ")", ",", "eps", ",", "epoch", ",", "\n", ")", "\n", "\n", "", "", "", "", "", "logger", ".", "info", "(", "\n", "\"|===>Training Error: {:.4f} Loss: {:.4f}, Top5 Error: {:.4f}\"", ".", "format", "(", "\n", "train_error", ",", "train_loss", ",", "train5_error", "\n", ")", "\n", ")", "\n", "return", "train_error", ",", "train_loss", ",", "train5_error", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.None.c_engine.set_bits": [[16, 45], ["model.named_modules", "model.named_modules", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance"], "function", ["None"], ["def", "set_bits", "(", "model", ",", "bits_seq", ")", ":", "\n", "    ", "layer_idx", "=", "0", "\n", "for", "name", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "(", "nn", ".", "Conv2d", ")", ")", "and", "\"downsample\"", "not", "in", "name", ":", "\n", "            ", "layer_idx", "+=", "1", "\n", "if", "layer_idx", "==", "1", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "weight_bit", "=", "bits_seq", "[", "(", "layer_idx", "-", "2", ")", "*", "2", "]", "\n", "activation_bit", "=", "bits_seq", "[", "(", "layer_idx", "-", "2", ")", "*", "2", "+", "1", "]", "\n", "m", ".", "current_bit_weights", "=", "weight_bit", "\n", "m", ".", "current_bit_activations", "=", "activation_bit", "\n", "# set bits of downsampling layer to the same bit of conv2", "\n", "", "", "", "for", "name", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "(", "QSAMSPreBasicBlock", ",", "QSAMPreBasicBlock", ")", ")", "and", "m", ".", "downsample", ":", "\n", "            ", "m", ".", "downsample", ".", "current_bit_weights", "=", "m", ".", "conv2", ".", "current_bit_weights", "\n", "m", ".", "downsample", ".", "current_bit_activations", "=", "m", ".", "conv2", ".", "current_bit_activations", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "QSAMSBasicBlock", ",", "QSAMBasicBlock", ")", ")", "and", "m", ".", "downsample", ":", "\n", "            ", "m", ".", "downsample", "[", "0", "]", ".", "current_bit_weights", "=", "m", ".", "conv2", ".", "current_bit_weights", "\n", "m", ".", "downsample", "[", "0", "]", ".", "current_bit_activations", "=", "m", ".", "conv2", ".", "current_bit_activations", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "QSAMSBottleneck", ",", "QSAMBottleneck", ")", ")", "and", "m", ".", "downsample", ":", "\n", "            ", "m", ".", "downsample", "[", "0", "]", ".", "current_bit_weights", "=", "m", ".", "conv3", ".", "current_bit_weights", "\n", "m", ".", "downsample", "[", "0", "]", ".", "current_bit_activations", "=", "m", ".", "conv3", ".", "current_bit_activations", "\n", "", "elif", "(", "\n", "isinstance", "(", "m", ",", "(", "QSAMMobileNetV2CifarBlock", ",", "QSAMSMobileNetV2CifarBlock", ")", ")", "\n", "and", "m", ".", "shortcut", "\n", ")", ":", "\n", "            ", "m", ".", "shortcut", "[", "0", "]", ".", "current_bit_weights", "=", "m", ".", "conv3", ".", "current_bit_weights", "\n", "m", ".", "shortcut", "[", "0", "]", ".", "current_bit_activations", "=", "m", ".", "conv3", ".", "current_bit_activations", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.None.c_engine.set_wae_bits": [[47, 75], ["model.named_modules", "model.named_modules", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance"], "function", ["None"], ["", "", "", "def", "set_wae_bits", "(", "model", ",", "bits_seq", ")", ":", "\n", "    ", "layer_idx", "=", "0", "\n", "for", "name", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "(", "nn", ".", "Conv2d", ")", ")", "and", "\"downsample\"", "not", "in", "name", ":", "\n", "            ", "layer_idx", "+=", "1", "\n", "if", "layer_idx", "==", "1", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "weight_bit", "=", "bits_seq", "[", "layer_idx", "-", "2", "]", "\n", "m", ".", "current_bit_weights", "=", "weight_bit", "\n", "m", ".", "current_bit_activations", "=", "weight_bit", "\n", "# set bits of downsampling layer to the same bit of conv2", "\n", "", "", "", "for", "name", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "(", "QSAMSPreBasicBlock", ",", "QSAMPreBasicBlock", ")", ")", "and", "m", ".", "downsample", ":", "\n", "            ", "m", ".", "downsample", ".", "current_bit_weights", "=", "m", ".", "conv2", ".", "current_bit_weights", "\n", "m", ".", "downsample", ".", "current_bit_activations", "=", "m", ".", "conv2", ".", "current_bit_activations", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "QSAMSBasicBlock", ",", "QSAMBasicBlock", ")", ")", "and", "m", ".", "downsample", ":", "\n", "            ", "m", ".", "downsample", "[", "0", "]", ".", "current_bit_weights", "=", "m", ".", "conv2", ".", "current_bit_weights", "\n", "m", ".", "downsample", "[", "0", "]", ".", "current_bit_activations", "=", "m", ".", "conv2", ".", "current_bit_activations", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "QSAMSBottleneck", ",", "QSAMBottleneck", ")", ")", "and", "m", ".", "downsample", ":", "\n", "            ", "m", ".", "downsample", "[", "0", "]", ".", "current_bit_weights", "=", "m", ".", "conv3", ".", "current_bit_weights", "\n", "m", ".", "downsample", "[", "0", "]", ".", "current_bit_activations", "=", "m", ".", "conv3", ".", "current_bit_activations", "\n", "", "elif", "(", "\n", "isinstance", "(", "m", ",", "(", "QSAMMobileNetV2CifarBlock", ",", "QSAMSMobileNetV2CifarBlock", ")", ")", "\n", "and", "m", ".", "shortcut", "\n", ")", ":", "\n", "            ", "m", ".", "shortcut", "[", "0", "]", ".", "current_bit_weights", "=", "m", ".", "conv3", ".", "current_bit_weights", "\n", "m", ".", "shortcut", "[", "0", "]", ".", "current_bit_activations", "=", "m", ".", "conv3", ".", "current_bit_activations", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.None.c_engine.show_bits": [[77, 90], ["model.named_modules", "isinstance", "hasattr", "print", "print"], "function", ["None"], ["", "", "", "def", "show_bits", "(", "model", ")", ":", "\n", "    ", "for", "name", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "\"current_bit_weights\"", ")", ":", "\n", "                ", "print", "(", "\n", "\"Layer: {}, Bits W: {}, Bits A: {}\"", ".", "format", "(", "\n", "name", ",", "m", ".", "current_bit_weights", ",", "m", ".", "current_bit_activations", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\n", "\"Layer: {}, Bits W: {}, Bits A: {}\"", ".", "format", "(", "\n", "name", ",", "m", ".", "bits_weights", ",", "m", ".", "bits_activations", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.None.c_engine.set_w_bits": [[94, 122], ["model.named_modules", "model.named_modules", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance"], "function", ["None"], ["", "", "", "", "def", "set_w_bits", "(", "model", ",", "bits_seq", ")", ":", "\n", "    ", "layer_idx", "=", "0", "\n", "for", "name", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "(", "nn", ".", "Conv2d", ")", ")", "and", "\"downsample\"", "not", "in", "name", ":", "\n", "            ", "layer_idx", "+=", "1", "\n", "if", "layer_idx", "==", "1", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "weight_bit", "=", "bits_seq", "[", "layer_idx", "-", "2", "]", "\n", "m", ".", "current_bit_weights", "=", "weight_bit", "\n", "m", ".", "current_bit_activations", "=", "4.0", "\n", "# set bits of downsampling layer to the same bit of conv2", "\n", "", "", "", "for", "name", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "(", "QSAMSPreBasicBlock", ",", "QSAMPreBasicBlock", ")", ")", "and", "m", ".", "downsample", ":", "\n", "            ", "m", ".", "downsample", ".", "current_bit_weights", "=", "m", ".", "conv2", ".", "current_bit_weights", "\n", "m", ".", "downsample", ".", "current_bit_activations", "=", "m", ".", "conv2", ".", "current_bit_activations", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "QSAMSBasicBlock", ",", "QSAMBasicBlock", ")", ")", "and", "m", ".", "downsample", ":", "\n", "            ", "m", ".", "downsample", "[", "0", "]", ".", "current_bit_weights", "=", "m", ".", "conv2", ".", "current_bit_weights", "\n", "m", ".", "downsample", "[", "0", "]", ".", "current_bit_activations", "=", "m", ".", "conv2", ".", "current_bit_activations", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "QSAMSBottleneck", ",", "QSAMBottleneck", ")", ")", "and", "m", ".", "downsample", ":", "\n", "            ", "m", ".", "downsample", "[", "0", "]", ".", "current_bit_weights", "=", "m", ".", "conv3", ".", "current_bit_weights", "\n", "m", ".", "downsample", "[", "0", "]", ".", "current_bit_activations", "=", "m", ".", "conv3", ".", "current_bit_activations", "\n", "", "elif", "(", "\n", "isinstance", "(", "m", ",", "(", "QSAMMobileNetV2CifarBlock", ",", "QSAMSMobileNetV2CifarBlock", ")", ")", "\n", "and", "m", ".", "shortcut", "\n", ")", ":", "\n", "            ", "m", ".", "shortcut", "[", "0", "]", ".", "current_bit_weights", "=", "m", ".", "conv3", ".", "current_bit_weights", "\n", "m", ".", "shortcut", "[", "0", "]", ".", "current_bit_activations", "=", "m", ".", "conv3", ".", "current_bit_activations", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.None.c_engine.get_loss": [[124, 144], ["model", "criterion", "criterion.backward", "minimizer.ascent_step", "criterion", "minimizer.restore_step", "engine.set_second_forward", "model", "engine.set_first_forward"], "function", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.AllReduce.backward", "home.repos.pwc.inspect_result.zhuang-group_saq.utils.qsam.QSAM.ascent_step", "home.repos.pwc.inspect_result.zhuang-group_saq.utils.qsam.QSAM.restore_step", "home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQLinear.set_second_forward", "home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQLinear.set_first_forward"], ["", "", "", "def", "get_loss", "(", "image", ",", "target", ",", "model", ",", "criterion", ",", "minimizer", ",", "args", ")", ":", "\n", "# Ascent Step", "\n", "    ", "model", ".", "require_backward_grad_sync", "=", "False", "\n", "model", ".", "require_forward_param_sync", "=", "True", "\n", "output", "=", "model", "(", "image", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "minimizer", ".", "ascent_step", "(", ")", "\n", "\n", "# descent step", "\n", "model", ".", "require_backward_grad_sync", "=", "True", "\n", "model", ".", "require_forward_param_sync", "=", "False", "\n", "if", "\"QSAM\"", "in", "args", ".", "opt_type", "or", "\"QASAM\"", "in", "args", ".", "opt_type", ":", "\n", "        ", "set_second_forward", "(", "model", ")", "\n", "", "loss", "=", "criterion", "(", "model", "(", "image", ")", ",", "target", ")", "\n", "\n", "if", "\"QSAM\"", "in", "args", ".", "opt_type", "or", "\"QASAM\"", "in", "args", ".", "opt_type", ":", "\n", "        ", "set_first_forward", "(", "model", ")", "\n", "", "minimizer", ".", "restore_step", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.None.c_engine.get_reward": [[146, 164], ["c_engine.get_loss", "qmodel_analyse.compute_network_bops", "c_engine.set_wae_bits", "c_engine.set_w_bits", "c_engine.set_bits"], "function", ["home.repos.pwc.inspect_result.zhuang-group_saq.None.c_engine.get_loss", "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qmodel_analyse.QModelAnalyse.compute_network_bops", "home.repos.pwc.inspect_result.zhuang-group_saq.None.c_engine.set_wae_bits", "home.repos.pwc.inspect_result.zhuang-group_saq.None.c_engine.set_w_bits", "home.repos.pwc.inspect_result.zhuang-group_saq.None.c_engine.set_bits"], ["", "def", "get_reward", "(", "\n", "image", ",", "target", ",", "model", ",", "criterion", ",", "minimizer", ",", "qmodel_analyse", ",", "bits_seq", ",", "args", "\n", ")", ":", "\n", "    ", "if", "args", ".", "wa_same_bit", ":", "\n", "        ", "set_wae_bits", "(", "model", ",", "bits_seq", ")", "\n", "", "elif", "args", ".", "search_w_bit", ":", "\n", "        ", "set_w_bits", "(", "model", ",", "bits_seq", ")", "\n", "", "else", ":", "\n", "        ", "set_bits", "(", "model", ",", "bits_seq", ")", "\n", "# model.eval()", "\n", "", "loss", "=", "get_loss", "(", "image", ",", "target", ",", "model", ",", "criterion", ",", "minimizer", ",", "args", ")", "\n", "bops", "=", "qmodel_analyse", ".", "compute_network_bops", "(", ")", "\n", "if", "\"imagenet\"", "in", "args", ".", "dataset", ":", "\n", "        ", "computation_loss", "=", "(", "bops", "/", "1e9", "-", "args", ".", "target_bops", ")", "**", "2", "\n", "", "else", ":", "\n", "        ", "computation_loss", "=", "(", "bops", "/", "1e6", "-", "args", ".", "target_bops", ")", "**", "2", "\n", "", "reward", "=", "loss", "+", "args", ".", "loss_lambda", "*", "computation_loss", "\n", "return", "(", "reward", ",", "bops", ",", "loss", ",", "computation_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.None.c_engine.controller_step": [[166, 201], ["next", "controller.forward", "c_engine.get_reward", "controller_optimizer.zero_grad", "policy_loss.backward", "controller_optimizer.step", "image.to", "target.to"], "function", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.AllReduce.forward", "home.repos.pwc.inspect_result.zhuang-group_saq.None.c_engine.get_reward", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.AllReduce.backward", "home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.step"], ["", "def", "controller_step", "(", "\n", "model", ",", "\n", "controller", ",", "\n", "qmodel_analyse", ",", "\n", "val_iter", ",", "\n", "criterion", ",", "\n", "controller_optimizer", ",", "\n", "minimizer", ",", "\n", "device", ",", "\n", "args", ",", "\n", ")", ":", "\n", "    ", "image", ",", "target", "=", "next", "(", "val_iter", ")", "\n", "image", ",", "target", "=", "image", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "\n", "bits_seq", ",", "probs", ",", "logp", ",", "entropy", "=", "controller", ".", "forward", "(", ")", "\n", "reward", ",", "bops", ",", "loss", ",", "computation_loss", "=", "get_reward", "(", "\n", "image", ",", "target", ",", "model", ",", "criterion", ",", "minimizer", ",", "qmodel_analyse", ",", "bits_seq", ",", "args", "\n", ")", "\n", "policy_loss", "=", "logp", "*", "reward", "\n", "controller_loss", "=", "logp", "*", "reward", "-", "args", ".", "entropy_coeff", "*", "entropy", "\n", "\n", "controller_optimizer", ".", "zero_grad", "(", ")", "\n", "policy_loss", ".", "backward", "(", ")", "\n", "controller_optimizer", ".", "step", "(", ")", "\n", "return", "(", "\n", "controller_loss", ",", "\n", "policy_loss", ",", "\n", "entropy", ",", "\n", "probs", ",", "\n", "logp", ",", "\n", "reward", ",", "\n", "bops", ",", "\n", "loss", ",", "\n", "computation_loss", ",", "\n", "bits_seq", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.None.c_engine.controller_train": [[204, 313], ["core.utils.MetricLogger", "core.utils.MetricLogger.add_meter", "controller.train", "model.eval", "core.utils.MetricLogger.log_every", "logger.info", "core.utils.SmoothedValue", "time.time", "controller.forward", "core.utils.is_dist_avail_and_initialized", "c_engine.get_reward", "controller_optimizer.zero_grad", "controller_loss.backward", "controller_optimizer.step", "core.utils.MetricLogger.meters[].update", "core.utils.MetricLogger.update", "tensorboard_logger.add_scalar", "tensorboard_logger.add_scalar", "tensorboard_logger.add_scalar", "tensorboard_logger.add_scalar", "tensorboard_logger.add_scalar", "tensorboard_logger.add_scalar", "tensorboard_logger.add_scalar", "tensorboard_logger.add_scalar", "model.named_modules", "logger.info", "logger.info", "image.to", "target.to", "dist.broadcast", "dist.broadcast", "isinstance", "controller_loss.item", "policy_loss.item", "entropy.item", "logp.item", "reward.item", "loss.item", "logger.info", "logger.info", "enumerate", "time.time", "tensorboard_logger.add_scalar", "tensorboard_logger.add_scalar", "len", "[].item", "[].item"], "function", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.add_meter", "home.repos.pwc.inspect_result.zhuang-group_saq.core.trainer.Trainer.train", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.log_every", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.AllReduce.forward", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.is_dist_avail_and_initialized", "home.repos.pwc.inspect_result.zhuang-group_saq.None.c_engine.get_reward", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.AllReduce.backward", "home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.update", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.update"], ["", "def", "controller_train", "(", "\n", "model", ",", "\n", "controller", ",", "\n", "val_loader", ",", "\n", "criterion", ",", "\n", "controller_optimizer", ",", "\n", "minimizer", ",", "\n", "device", ",", "\n", "logger", ",", "\n", "tensorboard_logger", ",", "\n", "qmodel_analyse", ",", "\n", "epoch", ",", "\n", "args", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n        Train one epoch\n        :param epoch: index of epoch\n        \"\"\"", "\n", "\n", "metric_logger", "=", "MetricLogger", "(", "logger", "=", "logger", ",", "delimiter", "=", "\"  \"", ")", "\n", "metric_logger", ".", "add_meter", "(", "\"img/s\"", ",", "SmoothedValue", "(", "window_size", "=", "10", ",", "fmt", "=", "\"{value}\"", ")", ")", "\n", "\n", "controller", ".", "train", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "header", "=", "\"Controller Epoch: [{}]\"", ".", "format", "(", "epoch", ")", "\n", "for", "image", ",", "target", "in", "metric_logger", ".", "log_every", "(", "\n", "val_loader", ",", "args", ".", "print_frequency", ",", "header", "\n", ")", ":", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "image", ",", "target", "=", "image", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "\n", "bits_seq", ",", "probs", ",", "logp", ",", "entropy", "=", "controller", ".", "forward", "(", ")", "\n", "if", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "            ", "dist", ".", "broadcast", "(", "logp", ",", "src", "=", "0", ")", "\n", "dist", ".", "broadcast", "(", "entropy", ",", "src", "=", "0", ")", "\n", "", "reward", ",", "bops", ",", "loss", ",", "computation_loss", "=", "get_reward", "(", "\n", "image", ",", "target", ",", "model", ",", "criterion", ",", "minimizer", ",", "qmodel_analyse", ",", "bits_seq", ",", "args", "\n", ")", "\n", "policy_loss", "=", "logp", "*", "reward", "\n", "controller_loss", "=", "logp", "*", "reward", "-", "args", ".", "entropy_coeff", "*", "entropy", "\n", "\n", "controller_optimizer", ".", "zero_grad", "(", ")", "\n", "controller_loss", ".", "backward", "(", ")", "\n", "controller_optimizer", ".", "step", "(", ")", "\n", "\n", "batch_size", "=", "image", ".", "shape", "[", "0", "]", "\n", "metric_logger", ".", "meters", "[", "\"img/s\"", "]", ".", "update", "(", "batch_size", "/", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "metric_logger", ".", "update", "(", "\n", "controller_loss", "=", "controller_loss", ".", "item", "(", ")", ",", "\n", "policy_loss", "=", "policy_loss", ".", "item", "(", ")", ",", "\n", "entropy", "=", "entropy", ".", "item", "(", ")", ",", "\n", "logp", "=", "logp", ".", "item", "(", ")", ",", "\n", "reward", "=", "reward", ".", "item", "(", ")", ",", "\n", "bops", "=", "(", "bops", "/", "1e9", ")", "if", "\"imagenet\"", "in", "args", ".", "dataset", "else", "(", "bops", "/", "1e6", ")", ",", "\n", "c_ce_loss", "=", "loss", ".", "item", "(", ")", ",", "\n", "c_comp_loss", "=", "computation_loss", ",", "\n", ")", "\n", "\n", "", "if", "tensorboard_logger", "is", "not", "None", ":", "\n", "        ", "tensorboard_logger", ".", "add_scalar", "(", "\n", "\"policy_loss\"", ",", "metric_logger", ".", "policy_loss", ".", "global_avg", ",", "epoch", "\n", ")", "\n", "tensorboard_logger", ".", "add_scalar", "(", "\n", "\"controller_loss\"", ",", "metric_logger", ".", "controller_loss", ".", "global_avg", ",", "epoch", "\n", ")", "\n", "tensorboard_logger", ".", "add_scalar", "(", "\n", "\"entropy\"", ",", "metric_logger", ".", "entropy", ".", "global_avg", ",", "epoch", "\n", ")", "\n", "tensorboard_logger", ".", "add_scalar", "(", "\"logp\"", ",", "metric_logger", ".", "logp", ".", "global_avg", ",", "epoch", ")", "\n", "tensorboard_logger", ".", "add_scalar", "(", "\"reward\"", ",", "metric_logger", ".", "reward", ".", "global_avg", ",", "epoch", ")", "\n", "tensorboard_logger", ".", "add_scalar", "(", "\"bops\"", ",", "metric_logger", ".", "bops", ".", "global_avg", ",", "epoch", ")", "\n", "tensorboard_logger", ".", "add_scalar", "(", "\n", "\"c_ce_loss\"", ",", "metric_logger", ".", "c_ce_loss", ".", "global_avg", ",", "epoch", "\n", ")", "\n", "tensorboard_logger", ".", "add_scalar", "(", "\n", "\"c_comp_loss\"", ",", "metric_logger", ".", "c_comp_loss", ".", "global_avg", ",", "epoch", "\n", ")", "\n", "\n", "layer_idx", "=", "0", "\n", "for", "name", ",", "module", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Conv2d", ",", "nn", ".", "Linear", ")", ")", ":", "\n", "                ", "layer_idx", "+=", "1", "\n", "if", "layer_idx", "==", "1", "or", "(", "layer_idx", "-", "2", ")", "*", "2", ">=", "len", "(", "probs", ")", ":", "\n", "                    ", "continue", "\n", "", "if", "args", ".", "wa_same_bit", "or", "args", ".", "search_w_bit", ":", "\n", "                    ", "layer_weight_probs", "=", "probs", "[", "layer_idx", "]", "\n", "layer_activation_probs", "=", "probs", "[", "layer_idx", "]", "\n", "", "else", ":", "\n", "                    ", "layer_weight_probs", "=", "probs", "[", "(", "layer_idx", "-", "2", ")", "*", "2", "]", "\n", "layer_activation_probs", "=", "probs", "[", "(", "layer_idx", "-", "2", ")", "*", "2", "+", "1", "]", "\n", "", "logger", ".", "info", "(", "layer_weight_probs", ")", "\n", "logger", ".", "info", "(", "layer_activation_probs", ")", "\n", "for", "bit_idx", ",", "bit", "in", "enumerate", "(", "args", ".", "bits_choice", ")", ":", "\n", "                    ", "tensorboard_logger", ".", "add_scalar", "(", "\n", "\"{}_weight_bit{}_probs\"", ".", "format", "(", "name", ",", "bit", ")", ",", "\n", "layer_weight_probs", "[", "0", "]", "[", "bit_idx", "]", ".", "item", "(", ")", ",", "\n", "epoch", ",", "\n", ")", "\n", "\n", "tensorboard_logger", ".", "add_scalar", "(", "\n", "\"{}_activation_bit{}_probs\"", ".", "format", "(", "name", ",", "bit", ")", ",", "\n", "layer_activation_probs", "[", "0", "]", "[", "bit_idx", "]", ".", "item", "(", ")", ",", "\n", "epoch", ",", "\n", ")", "\n", "", "", "", "", "logger", ".", "info", "(", "\"Bits seq: {}\"", ".", "format", "(", "bits_seq", ")", ")", "\n", "if", "not", "args", ".", "wa_same_bit", "and", "not", "args", ".", "search_w_bit", ":", "\n", "        ", "logger", ".", "info", "(", "\"Weight Bits: {}\"", ".", "format", "(", "bits_seq", "[", ":", ":", "2", "]", ")", ")", "\n", "logger", ".", "info", "(", "\"Activation Bits: {}\"", ".", "format", "(", "bits_seq", "[", "1", ":", ":", "2", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.None.c_engine.model_train": [[315, 472], ["core.utils.MetricLogger", "core.utils.MetricLogger.add_meter", "core.utils.MetricLogger.add_meter", "model.train", "controller.eval", "core.utils.MetricLogger.log_every", "core.utils.MetricLogger.synchronize_between_processes", "scheduler.step", "core.engine.get_lr", "logger.info", "logger.info", "core.utils.SmoothedValue", "core.utils.SmoothedValue", "time.time", "optimizer.zero_grad", "model", "criterion", "criterion.backward", "minimizer.ascent_step", "criterion().backward", "minimizer.descent_step", "core.utils.accuracy", "core.utils.MetricLogger.update", "core.utils.MetricLogger.meters[].update", "core.utils.MetricLogger.meters[].update", "core.utils.MetricLogger.meters[].update", "tensorboard_logger.add_scalar", "tensorboard_logger.add_scalar", "tensorboard_logger.add_scalar", "tensorboard_logger.add_scalar", "model.named_modules", "image.to", "target.to", "core.utils.unwrap_model().random_sample", "controller.forward", "c_engine.set_wae_bits", "engine.set_second_forward", "engine.set_first_forward", "acc1.item", "acc5.item", "isinstance", "c_engine.set_w_bits", "c_engine.set_bits", "criterion", "criterion.item", "hasattr", "hasattr", "isinstance", "core.utils.unwrap_model", "model", "time.time", "range", "range", "len", "tensorboard_logger.add_scalar", "len", "tensorboard_logger.add_scalar", "hasattr", "getattr", "hasattr", "getattr", "getattr.numel", "tensorboard_logger.add_scalar", "tensorboard_logger.add_histogram", "getattr", "tensorboard_logger.add_histogram", "getattr.numel", "tensorboard_logger.add_scalar", "tensorboard_logger.add_histogram"], "function", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.add_meter", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.add_meter", "home.repos.pwc.inspect_result.zhuang-group_saq.core.trainer.Trainer.train", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.log_every", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.synchronize_between_processes", "home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.get_lr", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.AllReduce.backward", "home.repos.pwc.inspect_result.zhuang-group_saq.utils.qsam.QSAM.ascent_step", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.AllReduce.backward", "home.repos.pwc.inspect_result.zhuang-group_saq.utils.qsam.QSAM.descent_step", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.accuracy", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.update", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.update", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.update", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.update", "home.repos.pwc.inspect_result.zhuang-group_saq.utils.controller.WABEControllerDist.random_sample", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.AllReduce.forward", "home.repos.pwc.inspect_result.zhuang-group_saq.None.c_engine.set_wae_bits", "home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQLinear.set_second_forward", "home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQLinear.set_first_forward", "home.repos.pwc.inspect_result.zhuang-group_saq.None.c_engine.set_w_bits", "home.repos.pwc.inspect_result.zhuang-group_saq.None.c_engine.set_bits", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.unwrap_model"], ["", "", "def", "model_train", "(", "\n", "model", ",", "\n", "controller", ",", "\n", "train_loader", ",", "\n", "criterion", ",", "\n", "optimizer", ",", "\n", "minimizer", ",", "\n", "scheduler", ",", "\n", "device", ",", "\n", "logger", ",", "\n", "tensorboard_logger", ",", "\n", "epoch", ",", "\n", "args", ",", "\n", ")", ":", "\n", "    ", "metric_logger", "=", "MetricLogger", "(", "logger", "=", "logger", ",", "delimiter", "=", "\"  \"", ")", "\n", "metric_logger", ".", "add_meter", "(", "\"lr\"", ",", "SmoothedValue", "(", "window_size", "=", "1", ",", "fmt", "=", "\"{value}\"", ")", ")", "\n", "metric_logger", ".", "add_meter", "(", "\"img/s\"", ",", "SmoothedValue", "(", "window_size", "=", "10", ",", "fmt", "=", "\"{value}\"", ")", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "controller", ".", "eval", "(", ")", "\n", "\n", "header", "=", "\"Model Epoch: [{}]\"", ".", "format", "(", "epoch", ")", "\n", "for", "image", ",", "target", "in", "metric_logger", ".", "log_every", "(", "\n", "train_loader", ",", "args", ".", "print_frequency", ",", "header", "\n", ")", ":", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "image", ",", "target", "=", "image", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "\n", "# sample arch", "\n", "if", "epoch", "<", "args", ".", "bit_warmup_epochs", ":", "\n", "            ", "bits_seq", "=", "unwrap_model", "(", "controller", ")", ".", "random_sample", "(", ")", "\n", "", "else", ":", "\n", "            ", "bits_seq", ",", "probs", ",", "logp", ",", "entropy", "=", "controller", ".", "forward", "(", ")", "\n", "", "if", "args", ".", "wa_same_bit", ":", "\n", "            ", "set_wae_bits", "(", "model", ",", "bits_seq", ")", "\n", "", "elif", "args", ".", "search_w_bit", ":", "\n", "            ", "set_w_bits", "(", "model", ",", "bits_seq", ")", "\n", "", "else", ":", "\n", "            ", "set_bits", "(", "model", ",", "bits_seq", ")", "\n", "\n", "# Ascent Step", "\n", "", "model", ".", "require_backward_grad_sync", "=", "False", "\n", "model", ".", "require_forward_param_sync", "=", "True", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "image", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "minimizer", ".", "ascent_step", "(", ")", "\n", "\n", "# descent step", "\n", "model", ".", "require_backward_grad_sync", "=", "True", "\n", "model", ".", "require_forward_param_sync", "=", "False", "\n", "if", "\"QSAM\"", "in", "args", ".", "opt_type", "or", "\"QASAM\"", "in", "args", ".", "opt_type", ":", "\n", "            ", "set_second_forward", "(", "model", ")", "\n", "", "criterion", "(", "model", "(", "image", ")", ",", "target", ")", ".", "backward", "(", ")", "\n", "minimizer", ".", "descent_step", "(", ")", "\n", "if", "\"QSAM\"", "in", "args", ".", "opt_type", "or", "\"QASAM\"", "in", "args", ".", "opt_type", ":", "\n", "            ", "set_first_forward", "(", "model", ")", "\n", "\n", "", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "batch_size", "=", "image", ".", "shape", "[", "0", "]", "\n", "metric_logger", ".", "update", "(", "loss", "=", "loss", ".", "item", "(", ")", ",", "lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", ")", "\n", "metric_logger", ".", "meters", "[", "\"acc1\"", "]", ".", "update", "(", "acc1", ".", "item", "(", ")", ",", "n", "=", "batch_size", ")", "\n", "metric_logger", ".", "meters", "[", "\"acc5\"", "]", ".", "update", "(", "acc5", ".", "item", "(", ")", ",", "n", "=", "batch_size", ")", "\n", "metric_logger", ".", "meters", "[", "\"img/s\"", "]", ".", "update", "(", "batch_size", "/", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "\n", "# gather the stats from all processes", "\n", "", "metric_logger", ".", "synchronize_between_processes", "(", ")", "\n", "\n", "scheduler", ".", "step", "(", ")", "\n", "lr", "=", "get_lr", "(", "optimizer", ")", "\n", "logger", ".", "info", "(", "\"Change Learning rate: {}\"", ".", "format", "(", "lr", ")", ")", "\n", "\n", "train_error", "=", "100", "-", "metric_logger", ".", "acc1", ".", "global_avg", "\n", "train_loss", "=", "metric_logger", ".", "loss", ".", "global_avg", "\n", "train5_error", "=", "100", "-", "metric_logger", ".", "acc5", ".", "global_avg", "\n", "if", "tensorboard_logger", "is", "not", "None", ":", "\n", "        ", "tensorboard_logger", ".", "add_scalar", "(", "\"train_top1_error\"", ",", "train_error", ",", "epoch", ")", "\n", "tensorboard_logger", ".", "add_scalar", "(", "\"train_top5_error\"", ",", "train5_error", ",", "epoch", ")", "\n", "tensorboard_logger", ".", "add_scalar", "(", "\"train_loss\"", ",", "train_loss", ",", "epoch", ")", "\n", "tensorboard_logger", ".", "add_scalar", "(", "\"lr\"", ",", "lr", ",", "epoch", ")", "\n", "\n", "weight_eps_names", "=", "[", "\n", "\"epsilon\"", ",", "\n", "\"tw_epsilon_norm\"", ",", "\n", "\"normalized_tw_epsilon_norm\"", ",", "\n", "\"weight_clip_value_epsilon\"", ",", "\n", "\"weight_clip_value_tw_epsilon_norm\"", ",", "\n", "\"weight_clip_value_normalized_tw_epsilon_norm\"", ",", "\n", "\"activation_clip_value_epsilon\"", ",", "\n", "\"activation_clip_value_tw_epsilon_norm\"", ",", "\n", "\"activation_clip_value_normalized_tw_epsilon_norm\"", ",", "\n", "\"bias_epsilon\"", ",", "\n", "\"bias_epsilon_norm\"", ",", "\n", "\"bias_normalized_epsilon_norm\"", ",", "\n", "]", "\n", "bn_eps_names", "=", "[", "\n", "\"weight_epsilon\"", ",", "\n", "\"weight_epsilon_norm\"", ",", "\n", "\"weight_normalized_epsilon_norm\"", ",", "\n", "\"bias_epsilon\"", ",", "\n", "\"bias_epsilon_norm\"", ",", "\n", "\"bias_normalized_epsilon_norm\"", ",", "\n", "]", "\n", "for", "name", ",", "module", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "(", "args", ".", "conv_type", ",", "args", ".", "fc_type", ")", ")", ":", "\n", "                ", "if", "hasattr", "(", "module", ",", "\"weight_clip_value\"", ")", ":", "\n", "                    ", "for", "wc_idx", "in", "range", "(", "len", "(", "module", ".", "weight_clip_value", ")", ")", ":", "\n", "                        ", "tensorboard_logger", ".", "add_scalar", "(", "\n", "\"{}_{}_{}\"", ".", "format", "(", "name", ",", "\"weight_clip_value\"", ",", "wc_idx", ")", ",", "\n", "module", ".", "weight_clip_value", "[", "wc_idx", "]", ",", "\n", "epoch", ",", "\n", ")", "\n", "", "", "if", "hasattr", "(", "module", ",", "\"activation_clip_value\"", ")", ":", "\n", "                    ", "for", "ac_idx", "in", "range", "(", "len", "(", "module", ".", "activation_clip_value", ")", ")", ":", "\n", "                        ", "tensorboard_logger", ".", "add_scalar", "(", "\n", "\"{}_{}_{}\"", ".", "format", "(", "name", ",", "\"activation_clip_value\"", ",", "ac_idx", ")", ",", "\n", "module", ".", "activation_clip_value", "[", "ac_idx", "]", ",", "\n", "epoch", ",", "\n", ")", "\n", "\n", "", "", "for", "weight_eps_name", "in", "weight_eps_names", ":", "\n", "                    ", "if", "(", "\n", "hasattr", "(", "module", ",", "weight_eps_name", ")", "\n", "and", "getattr", "(", "module", ",", "weight_eps_name", ")", "is", "not", "None", "\n", ")", ":", "\n", "                        ", "eps", "=", "getattr", "(", "module", ",", "weight_eps_name", ")", "\n", "if", "eps", ".", "numel", "(", ")", "==", "1", ":", "\n", "                            ", "tensorboard_logger", ".", "add_scalar", "(", "\n", "\"{}_{}\"", ".", "format", "(", "name", ",", "weight_eps_name", ")", ",", "eps", ",", "epoch", ",", "\n", ")", "\n", "", "else", ":", "\n", "                            ", "tensorboard_logger", ".", "add_histogram", "(", "\n", "\"{}_{}\"", ".", "format", "(", "name", ",", "weight_eps_name", ")", ",", "eps", ",", "epoch", ",", "\n", ")", "\n", "", "", "", "", "elif", "isinstance", "(", "module", ",", "(", "nn", ".", "BatchNorm2d", ")", ")", ":", "\n", "                ", "for", "bn_eps_name", "in", "bn_eps_names", ":", "\n", "                    ", "if", "hasattr", "(", "module", ",", "bn_eps_name", ")", ":", "\n", "                        ", "eps", "=", "getattr", "(", "module", ",", "bn_eps_name", ")", "\n", "if", "eps", ".", "numel", "(", ")", "==", "1", ":", "\n", "                            ", "tensorboard_logger", ".", "add_scalar", "(", "\n", "\"{}_{}\"", ".", "format", "(", "name", ",", "weight_eps_name", ")", ",", "eps", ",", "epoch", ",", "\n", ")", "\n", "", "else", ":", "\n", "                            ", "tensorboard_logger", ".", "add_histogram", "(", "\n", "\"{}_{}\"", ".", "format", "(", "name", ",", "weight_eps_name", ")", ",", "eps", ",", "epoch", ",", "\n", ")", "\n", "", "tensorboard_logger", ".", "add_histogram", "(", "\n", "\"{}_{}\"", ".", "format", "(", "name", ",", "bn_eps_name", ")", ",", "eps", ",", "epoch", ",", "\n", ")", "\n", "\n", "", "", "", "", "", "logger", ".", "info", "(", "\n", "\"|===>Training Error: {:.4f} Loss: {:.4f}, Top5 Error: {:.4f}\"", ".", "format", "(", "\n", "train_error", ",", "train_loss", ",", "train5_error", "\n", ")", "\n", ")", "\n", "return", "train_error", ",", "train_loss", ",", "train5_error", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.None.c_engine.train": [[474, 695], ["core.utils.MetricLogger", "core.utils.MetricLogger.add_meter", "core.utils.MetricLogger.add_meter", "model.train", "controller.train", "iter", "core.utils.MetricLogger.log_every", "core.utils.MetricLogger.synchronize_between_processes", "scheduler.step", "core.engine.get_lr", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "core.utils.SmoothedValue", "core.utils.SmoothedValue", "time.time", "c_engine.controller_step", "optimizer.zero_grad", "model", "criterion", "criterion.backward", "minimizer.ascent_step", "criterion().backward", "minimizer.descent_step", "core.utils.accuracy", "core.utils.MetricLogger.update", "core.utils.MetricLogger.update", "core.utils.MetricLogger.meters[].update", "core.utils.MetricLogger.meters[].update", "core.utils.MetricLogger.meters[].update", "tensorboard_logger.add_scalar", "tensorboard_logger.add_scalar", "tensorboard_logger.add_scalar", "tensorboard_logger.add_scalar", "tensorboard_logger.add_scalar", "tensorboard_logger.add_scalar", "tensorboard_logger.add_scalar", "tensorboard_logger.add_scalar", "tensorboard_logger.add_scalar", "tensorboard_logger.add_scalar", "tensorboard_logger.add_scalar", "model.named_modules", "model.named_modules", "image.to", "target.to", "engine.set_second_forward", "engine.set_first_forward", "acc1.item", "acc5.item", "isinstance", "isinstance", "criterion", "criterion.item", "policy_loss.item", "entropy.item", "logp.item", "reward.item", "ce_loss.item", "logger.info", "logger.info", "enumerate", "hasattr", "hasattr", "isinstance", "model", "time.time", "tensorboard_logger.add_scalar", "tensorboard_logger.add_scalar", "range", "range", "hasattr", "len", "[].item", "[].item", "len", "tensorboard_logger.add_scalar", "len", "tensorboard_logger.add_scalar", "getattr", "hasattr", "getattr.numel", "tensorboard_logger.add_scalar", "tensorboard_logger.add_histogram", "getattr", "tensorboard_logger.add_histogram", "getattr.numel", "tensorboard_logger.add_scalar", "tensorboard_logger.add_histogram"], "function", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.add_meter", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.add_meter", "home.repos.pwc.inspect_result.zhuang-group_saq.core.trainer.Trainer.train", "home.repos.pwc.inspect_result.zhuang-group_saq.core.trainer.Trainer.train", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.log_every", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.synchronize_between_processes", "home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.get_lr", "home.repos.pwc.inspect_result.zhuang-group_saq.None.c_engine.controller_step", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.AllReduce.backward", "home.repos.pwc.inspect_result.zhuang-group_saq.utils.qsam.QSAM.ascent_step", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.AllReduce.backward", "home.repos.pwc.inspect_result.zhuang-group_saq.utils.qsam.QSAM.descent_step", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.accuracy", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.update", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.update", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.update", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.update", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.update", "home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQLinear.set_second_forward", "home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQLinear.set_first_forward"], ["", "def", "train", "(", "\n", "model", ",", "\n", "controller", ",", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "criterion", ",", "\n", "optimizer", ",", "\n", "controller_optimizer", ",", "\n", "minimizer", ",", "\n", "scheduler", ",", "\n", "device", ",", "\n", "logger", ",", "\n", "tensorboard_logger", ",", "\n", "qmodel_analyse", ",", "\n", "epoch", ",", "\n", "args", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n        Train one epoch\n        :param epoch: index of epoch\n        \"\"\"", "\n", "\n", "metric_logger", "=", "MetricLogger", "(", "logger", "=", "logger", ",", "delimiter", "=", "\"  \"", ")", "\n", "metric_logger", ".", "add_meter", "(", "\"lr\"", ",", "SmoothedValue", "(", "window_size", "=", "1", ",", "fmt", "=", "\"{value}\"", ")", ")", "\n", "metric_logger", ".", "add_meter", "(", "\"img/s\"", ",", "SmoothedValue", "(", "window_size", "=", "10", ",", "fmt", "=", "\"{value}\"", ")", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "controller", ".", "train", "(", ")", "\n", "\n", "header", "=", "\"Epoch: [{}]\"", ".", "format", "(", "epoch", ")", "\n", "val_iter", "=", "iter", "(", "val_loader", ")", "\n", "for", "image", ",", "target", "in", "metric_logger", ".", "log_every", "(", "\n", "train_loader", ",", "args", ".", "print_frequency", ",", "header", "\n", ")", ":", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "image", ",", "target", "=", "image", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "\n", "# architecture step", "\n", "(", "\n", "controller_loss", ",", "\n", "policy_loss", ",", "\n", "entropy", ",", "\n", "probs", ",", "\n", "logp", ",", "\n", "reward", ",", "\n", "bops", ",", "\n", "ce_loss", ",", "\n", "computation_loss", ",", "\n", "bits_seq", ",", "\n", ")", "=", "controller_step", "(", "\n", "model", ",", "\n", "controller", ",", "\n", "qmodel_analyse", ",", "\n", "val_iter", ",", "\n", "criterion", ",", "\n", "controller_optimizer", ",", "\n", "minimizer", ",", "\n", "device", ",", "\n", "args", ",", "\n", ")", "\n", "\n", "# Ascent Step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "image", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "minimizer", ".", "ascent_step", "(", ")", "\n", "\n", "# descent step", "\n", "if", "\"QSAM\"", "in", "args", ".", "opt_type", "or", "\"QASAM\"", "in", "args", ".", "opt_type", ":", "\n", "            ", "set_second_forward", "(", "model", ")", "\n", "", "criterion", "(", "model", "(", "image", ")", ",", "target", ")", ".", "backward", "(", ")", "\n", "minimizer", ".", "descent_step", "(", ")", "\n", "if", "\"QSAM\"", "in", "args", ".", "opt_type", "or", "\"QASAM\"", "in", "args", ".", "opt_type", ":", "\n", "            ", "set_first_forward", "(", "model", ")", "\n", "\n", "", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "batch_size", "=", "image", ".", "shape", "[", "0", "]", "\n", "metric_logger", ".", "update", "(", "loss", "=", "loss", ".", "item", "(", ")", ",", "lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", ")", "\n", "metric_logger", ".", "update", "(", "\n", "policy_loss", "=", "policy_loss", ".", "item", "(", ")", ",", "\n", "entropy", "=", "entropy", ".", "item", "(", ")", ",", "\n", "logp", "=", "logp", ".", "item", "(", ")", ",", "\n", "reward", "=", "reward", ".", "item", "(", ")", ",", "\n", "bops", "=", "bops", "/", "1e6", ",", "\n", "c_ce_loss", "=", "ce_loss", ".", "item", "(", ")", ",", "\n", "c_comp_loss", "=", "computation_loss", ",", "\n", ")", "\n", "metric_logger", ".", "meters", "[", "\"acc1\"", "]", ".", "update", "(", "acc1", ".", "item", "(", ")", ",", "n", "=", "batch_size", ")", "\n", "metric_logger", ".", "meters", "[", "\"acc5\"", "]", ".", "update", "(", "acc5", ".", "item", "(", ")", ",", "n", "=", "batch_size", ")", "\n", "metric_logger", ".", "meters", "[", "\"img/s\"", "]", ".", "update", "(", "batch_size", "/", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "\n", "# gather the stats from all processes", "\n", "", "metric_logger", ".", "synchronize_between_processes", "(", ")", "\n", "\n", "scheduler", ".", "step", "(", ")", "\n", "lr", "=", "get_lr", "(", "optimizer", ")", "\n", "logger", ".", "info", "(", "\"Change Learning rate: {}\"", ".", "format", "(", "lr", ")", ")", "\n", "\n", "train_error", "=", "100", "-", "metric_logger", ".", "acc1", ".", "global_avg", "\n", "train_loss", "=", "metric_logger", ".", "loss", ".", "global_avg", "\n", "train5_error", "=", "100", "-", "metric_logger", ".", "acc5", ".", "global_avg", "\n", "if", "tensorboard_logger", "is", "not", "None", ":", "\n", "        ", "tensorboard_logger", ".", "add_scalar", "(", "\"train_top1_error\"", ",", "train_error", ",", "epoch", ")", "\n", "tensorboard_logger", ".", "add_scalar", "(", "\"train_top5_error\"", ",", "train5_error", ",", "epoch", ")", "\n", "tensorboard_logger", ".", "add_scalar", "(", "\"train_loss\"", ",", "train_loss", ",", "epoch", ")", "\n", "tensorboard_logger", ".", "add_scalar", "(", "\"lr\"", ",", "lr", ",", "epoch", ")", "\n", "tensorboard_logger", ".", "add_scalar", "(", "\n", "\"policy_loss\"", ",", "metric_logger", ".", "policy_loss", ".", "global_avg", ",", "epoch", "\n", ")", "\n", "tensorboard_logger", ".", "add_scalar", "(", "\n", "\"entropy\"", ",", "metric_logger", ".", "entropy", ".", "global_avg", ",", "epoch", "\n", ")", "\n", "tensorboard_logger", ".", "add_scalar", "(", "\"logp\"", ",", "metric_logger", ".", "logp", ".", "global_avg", ",", "epoch", ")", "\n", "tensorboard_logger", ".", "add_scalar", "(", "\"reward\"", ",", "metric_logger", ".", "reward", ".", "global_avg", ",", "epoch", ")", "\n", "tensorboard_logger", ".", "add_scalar", "(", "\"bops\"", ",", "metric_logger", ".", "bops", ".", "global_avg", ",", "epoch", ")", "\n", "tensorboard_logger", ".", "add_scalar", "(", "\n", "\"c_ce_loss\"", ",", "metric_logger", ".", "c_ce_loss", ".", "global_avg", ",", "epoch", "\n", ")", "\n", "tensorboard_logger", ".", "add_scalar", "(", "\n", "\"c_comp_loss\"", ",", "metric_logger", ".", "c_comp_loss", ".", "global_avg", ",", "epoch", "\n", ")", "\n", "\n", "layer_idx", "=", "0", "\n", "for", "name", ",", "module", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Conv2d", ",", "nn", ".", "Linear", ")", ")", ":", "\n", "                ", "layer_idx", "+=", "1", "\n", "if", "layer_idx", "==", "1", "or", "(", "layer_idx", "-", "2", ")", "*", "2", ">=", "len", "(", "probs", ")", ":", "\n", "                    ", "continue", "\n", "", "layer_weight_probs", "=", "probs", "[", "(", "layer_idx", "-", "2", ")", "*", "2", "]", "\n", "layer_activation_probs", "=", "probs", "[", "(", "layer_idx", "-", "2", ")", "*", "2", "+", "1", "]", "\n", "logger", ".", "info", "(", "layer_weight_probs", ")", "\n", "logger", ".", "info", "(", "layer_activation_probs", ")", "\n", "for", "bit_idx", ",", "bit", "in", "enumerate", "(", "args", ".", "bits_choice", ")", ":", "\n", "                    ", "tensorboard_logger", ".", "add_scalar", "(", "\n", "\"{}_weight_bit{}_probs\"", ".", "format", "(", "name", ",", "bit", ")", ",", "\n", "layer_weight_probs", "[", "0", "]", "[", "bit_idx", "]", ".", "item", "(", ")", ",", "\n", "epoch", ",", "\n", ")", "\n", "\n", "tensorboard_logger", ".", "add_scalar", "(", "\n", "\"{}_activation_bit{}_probs\"", ".", "format", "(", "name", ",", "bit", ")", ",", "\n", "layer_activation_probs", "[", "0", "]", "[", "bit_idx", "]", ".", "item", "(", ")", ",", "\n", "epoch", ",", "\n", ")", "\n", "\n", "", "", "", "weight_eps_names", "=", "[", "\n", "\"epsilon\"", ",", "\n", "\"tw_epsilon_norm\"", ",", "\n", "\"normalized_tw_epsilon_norm\"", ",", "\n", "\"weight_clip_value_epsilon\"", ",", "\n", "\"weight_clip_value_tw_epsilon_norm\"", ",", "\n", "\"weight_clip_value_normalized_tw_epsilon_norm\"", ",", "\n", "\"activation_clip_value_epsilon\"", ",", "\n", "\"activation_clip_value_tw_epsilon_norm\"", ",", "\n", "\"activation_clip_value_normalized_tw_epsilon_norm\"", ",", "\n", "\"bias_epsilon\"", ",", "\n", "\"bias_epsilon_norm\"", ",", "\n", "\"bias_normalized_epsilon_norm\"", ",", "\n", "]", "\n", "bn_eps_names", "=", "[", "\n", "\"weight_epsilon\"", ",", "\n", "\"weight_epsilon_norm\"", ",", "\n", "\"weight_normalized_epsilon_norm\"", ",", "\n", "\"bias_epsilon\"", ",", "\n", "\"bias_epsilon_norm\"", ",", "\n", "\"bias_normalized_epsilon_norm\"", ",", "\n", "]", "\n", "for", "name", ",", "module", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "(", "args", ".", "conv_type", ",", "args", ".", "fc_type", ")", ")", ":", "\n", "                ", "if", "hasattr", "(", "module", ",", "\"weight_clip_value\"", ")", ":", "\n", "                    ", "for", "wc_idx", "in", "range", "(", "len", "(", "module", ".", "weight_clip_value", ")", ")", ":", "\n", "                        ", "tensorboard_logger", ".", "add_scalar", "(", "\n", "\"{}_{}_{}\"", ".", "format", "(", "name", ",", "\"weight_clip_value\"", ",", "wc_idx", ")", ",", "\n", "module", ".", "weight_clip_value", "[", "wc_idx", "]", ",", "\n", "epoch", ",", "\n", ")", "\n", "", "", "if", "hasattr", "(", "module", ",", "\"activation_clip_value\"", ")", ":", "\n", "                    ", "for", "ac_idx", "in", "range", "(", "len", "(", "module", ".", "activation_clip_value", ")", ")", ":", "\n", "                        ", "tensorboard_logger", ".", "add_scalar", "(", "\n", "\"{}_{}_{}\"", ".", "format", "(", "name", ",", "\"activation_clip_value\"", ",", "ac_idx", ")", ",", "\n", "module", ".", "activation_clip_value", "[", "ac_idx", "]", ",", "\n", "epoch", ",", "\n", ")", "\n", "\n", "", "", "for", "weight_eps_name", "in", "weight_eps_names", ":", "\n", "                    ", "if", "hasattr", "(", "module", ",", "weight_eps_name", ")", ":", "\n", "                        ", "eps", "=", "getattr", "(", "module", ",", "weight_eps_name", ")", "\n", "if", "eps", ".", "numel", "(", ")", "==", "1", ":", "\n", "                            ", "tensorboard_logger", ".", "add_scalar", "(", "\n", "\"{}_{}\"", ".", "format", "(", "name", ",", "weight_eps_name", ")", ",", "eps", ",", "epoch", ",", "\n", ")", "\n", "", "else", ":", "\n", "                            ", "tensorboard_logger", ".", "add_histogram", "(", "\n", "\"{}_{}\"", ".", "format", "(", "name", ",", "weight_eps_name", ")", ",", "eps", ",", "epoch", ",", "\n", ")", "\n", "", "", "", "", "elif", "isinstance", "(", "module", ",", "(", "nn", ".", "BatchNorm2d", ")", ")", ":", "\n", "                ", "for", "bn_eps_name", "in", "bn_eps_names", ":", "\n", "                    ", "if", "hasattr", "(", "module", ",", "bn_eps_name", ")", ":", "\n", "                        ", "eps", "=", "getattr", "(", "module", ",", "bn_eps_name", ")", "\n", "if", "eps", ".", "numel", "(", ")", "==", "1", ":", "\n", "                            ", "tensorboard_logger", ".", "add_scalar", "(", "\n", "\"{}_{}\"", ".", "format", "(", "name", ",", "weight_eps_name", ")", ",", "eps", ",", "epoch", ",", "\n", ")", "\n", "", "else", ":", "\n", "                            ", "tensorboard_logger", ".", "add_histogram", "(", "\n", "\"{}_{}\"", ".", "format", "(", "name", ",", "weight_eps_name", ")", ",", "eps", ",", "epoch", ",", "\n", ")", "\n", "", "tensorboard_logger", ".", "add_histogram", "(", "\n", "\"{}_{}\"", ".", "format", "(", "name", ",", "bn_eps_name", ")", ",", "eps", ",", "epoch", ",", "\n", ")", "\n", "\n", "", "", "", "", "", "logger", ".", "info", "(", "\n", "\"|===>Training Error: {:.4f} Loss: {:.4f}, Top5 Error: {:.4f}\"", ".", "format", "(", "\n", "train_error", ",", "train_loss", ",", "train5_error", "\n", ")", "\n", ")", "\n", "logger", ".", "info", "(", "\"Bits seq: {}\"", ".", "format", "(", "bits_seq", ")", ")", "\n", "logger", ".", "info", "(", "\"Weight Bits: {}\"", ".", "format", "(", "bits_seq", "[", ":", ":", "2", "]", ")", ")", "\n", "logger", ".", "info", "(", "\"Activation Bits: {}\"", ".", "format", "(", "bits_seq", "[", "1", ":", ":", "2", "]", ")", ")", "\n", "return", "train_error", ",", "train_loss", ",", "train5_error", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.None.c_engine.compute_sharpness": [[697, 745], ["core.utils.MetricLogger", "model.eval", "core.utils.MetricLogger.log_every", "model", "criterion", "criterion.backward", "core.utils.MetricLogger.update", "minimizer.ascent_step", "core.utils.MetricLogger.log_every", "minimizer.restore_step", "image.to", "target.to", "engine.set_second_forward", "model", "criterion", "core.utils.MetricLogger.update", "engine.set_first_forward", "criterion.item", "image.to", "target.to", "criterion.item"], "function", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.log_every", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.AllReduce.backward", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.update", "home.repos.pwc.inspect_result.zhuang-group_saq.utils.qsam.QSAM.ascent_step", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.log_every", "home.repos.pwc.inspect_result.zhuang-group_saq.utils.qsam.QSAM.restore_step", "home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQLinear.set_second_forward", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.update", "home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQLinear.set_first_forward"], ["", "def", "compute_sharpness", "(", "\n", "model", ",", "train_loader", ",", "criterion", ",", "minimizer", ",", "device", ",", "logger", ",", "args", ",", "\n", ")", ":", "\n", "    ", "metric_logger", "=", "MetricLogger", "(", "logger", "=", "logger", ",", "delimiter", "=", "\"  \"", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "header", "=", "\"Epoch: [{}]\"", ".", "format", "(", "0", ")", "\n", "# accumulate gradient for all data", "\n", "for", "image", ",", "target", "in", "metric_logger", ".", "log_every", "(", "\n", "train_loader", ",", "args", ".", "print_frequency", ",", "header", "\n", ")", ":", "\n", "        ", "image", ",", "target", "=", "image", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "\n", "# Ascent Step", "\n", "model", ".", "require_backward_grad_sync", "=", "False", "\n", "model", ".", "require_forward_param_sync", "=", "True", "\n", "output", "=", "model", "(", "image", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "metric_logger", ".", "update", "(", "loss", "=", "loss", ".", "item", "(", ")", ")", "\n", "\n", "", "if", "args", ".", "rho", "==", "0", ":", "\n", "        ", "sharpness", "=", "metric_logger", ".", "loss", ".", "global_avg", "\n", "", "else", ":", "\n", "        ", "minimizer", ".", "ascent_step", "(", ")", "\n", "# descent step", "\n", "model", ".", "require_backward_grad_sync", "=", "True", "\n", "model", ".", "require_forward_param_sync", "=", "False", "\n", "if", "\"QSAM\"", "in", "args", ".", "opt_type", "or", "\"QASAM\"", "in", "args", ".", "opt_type", ":", "\n", "            ", "set_second_forward", "(", "model", ")", "\n", "\n", "", "for", "image", ",", "target", "in", "metric_logger", ".", "log_every", "(", "\n", "train_loader", ",", "args", ".", "print_frequency", ",", "header", "\n", ")", ":", "\n", "            ", "image", ",", "target", "=", "image", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "\n", "output", "=", "model", "(", "image", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "metric_logger", ".", "update", "(", "loss_w_epsilon", "=", "loss", ".", "item", "(", ")", ")", "\n", "", "sharpness", "=", "(", "\n", "metric_logger", ".", "loss_w_epsilon", ".", "global_avg", "-", "metric_logger", ".", "loss", ".", "global_avg", "\n", ")", "\n", "minimizer", ".", "restore_step", "(", ")", "\n", "\n", "if", "\"QSAM\"", "in", "args", ".", "opt_type", "or", "\"QASAM\"", "in", "args", ".", "opt_type", ":", "\n", "            ", "set_first_forward", "(", "model", ")", "\n", "", "", "return", "sharpness", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.None.c_engine.compute_layer_weight_sharpness": [[747, 816], ["model.eval", "model.named_modules", "isinstance", "logger.info", "core.utils.MetricLogger", "module.named_parameters", "logger.info", "core.utils.MetricLogger.log_every", "logger.info", "minimizer.ascent_step_param", "core.utils.MetricLogger", "core.utils.MetricLogger.log_every", "logger.info", "minimizer.restore_step_param", "sharpness_list.append", "name_list.append", "model", "criterion", "criterion.backward", "core.utils.MetricLogger.update", "engine.set_layer_second_forward", "model", "criterion", "core.utils.MetricLogger.update", "engine.set_layer_first_forward", "param_name_list.append", "image.to", "target.to", "image.to", "target.to", "criterion.item", "criterion.item"], "function", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.log_every", "home.repos.pwc.inspect_result.zhuang-group_saq.utils.asam.ASAM.ascent_step_param", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.log_every", "home.repos.pwc.inspect_result.zhuang-group_saq.utils.asam.ASAM.restore_step_param", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.AllReduce.backward", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.update", "home.repos.pwc.inspect_result.zhuang-group_saq.None.engine.set_layer_second_forward", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.update", "home.repos.pwc.inspect_result.zhuang-group_saq.None.engine.set_layer_first_forward"], ["", "def", "compute_layer_weight_sharpness", "(", "\n", "model", ",", "train_loader", ",", "criterion", ",", "minimizer", ",", "device", ",", "logger", ",", "args", ",", "\n", ")", ":", "\n", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "sharpness_list", "=", "[", "]", "\n", "name_list", "=", "[", "]", "\n", "for", "module_n", ",", "module", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "module", ",", "(", "nn", ".", "Conv2d", ",", "nn", ".", "Linear", ")", ")", ":", "\n", "            ", "continue", "\n", "\n", "# for _ in [\"weight\", \"activation\"]:", "\n", "", "for", "_", "in", "[", "\"weight\"", "]", ":", "\n", "            ", "logger", ".", "info", "(", "\n", "\"Processing layer: {}, weight/activation: {}\"", ".", "format", "(", "module_n", ",", "_", ")", "\n", ")", "\n", "metric_logger", "=", "MetricLogger", "(", "logger", "=", "logger", ",", "delimiter", "=", "\"  \"", ")", "\n", "\n", "param_name_list", "=", "[", "]", "\n", "for", "param_n", ",", "param", "in", "module", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "_", "in", "param_n", ":", "\n", "                    ", "param_name_list", ".", "append", "(", "\"{}.{}\"", ".", "format", "(", "module_n", ",", "param_n", ")", ")", "\n", "\n", "", "", "logger", ".", "info", "(", "param_name_list", ")", "\n", "\n", "header", "=", "\"Epoch: [{}]\"", ".", "format", "(", "0", ")", "\n", "# accumulate gradient for all data", "\n", "for", "image", ",", "target", "in", "metric_logger", ".", "log_every", "(", "\n", "train_loader", ",", "args", ".", "print_frequency", ",", "header", "\n", ")", ":", "\n", "                ", "image", ",", "target", "=", "image", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "\n", "# Ascent Step", "\n", "output", "=", "model", "(", "image", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "metric_logger", ".", "update", "(", "loss", "=", "loss", ".", "item", "(", ")", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Loss: {}\"", ".", "format", "(", "metric_logger", ".", "loss", ".", "global_avg", ")", ")", "\n", "\n", "minimizer", ".", "ascent_step_param", "(", "param_name_list", ")", "\n", "\n", "# descent step", "\n", "if", "\"QSAM\"", "in", "args", ".", "opt_type", "or", "\"QASAM\"", "in", "args", ".", "opt_type", ":", "\n", "                ", "set_layer_second_forward", "(", "model", ",", "module_n", ")", "\n", "\n", "", "metric_logger_loss_w_epsilon", "=", "MetricLogger", "(", "logger", "=", "logger", ",", "delimiter", "=", "\"  \"", ")", "\n", "for", "image", ",", "target", "in", "metric_logger_loss_w_epsilon", ".", "log_every", "(", "\n", "train_loader", ",", "args", ".", "print_frequency", ",", "header", "\n", ")", ":", "\n", "                ", "image", ",", "target", "=", "image", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "\n", "output", "=", "model", "(", "image", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "metric_logger_loss_w_epsilon", ".", "update", "(", "loss", "=", "loss", ".", "item", "(", ")", ")", "\n", "", "sharpness", "=", "(", "\n", "metric_logger_loss_w_epsilon", ".", "loss", ".", "global_avg", "\n", "-", "metric_logger", ".", "loss", ".", "global_avg", "\n", ")", "\n", "logger", ".", "info", "(", "\"Layer: {}, Sharpness: {}\"", ".", "format", "(", "module_n", ",", "sharpness", ")", ")", "\n", "minimizer", ".", "restore_step_param", "(", "param_name_list", ")", "\n", "\n", "if", "\"QSAM\"", "in", "args", ".", "opt_type", "or", "\"QASAM\"", "in", "args", ".", "opt_type", ":", "\n", "                ", "set_layer_first_forward", "(", "model", ",", "module_n", ")", "\n", "", "sharpness_list", ".", "append", "(", "sharpness", ")", "\n", "name_list", ".", "append", "(", "\"{}.{}\"", ".", "format", "(", "module_n", ",", "_", ")", ")", "\n", "\n", "", "", "return", "sharpness_list", ",", "name_list", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.None.c_engine.compute_layer_activation_sharpness": [[818, 916], ["model.eval", "model.named_modules", "logger.info", "core.utils.MetricLogger", "zip", "logger.info", "core.utils.MetricLogger.log_every", "logger.info", "model.named_parameters", "minimizer.ascent_step_param", "core.utils.MetricLogger", "core.utils.MetricLogger.log_every", "logger.info", "logger.info", "minimizer.restore_step_param", "model.named_parameters", "before_step.items", "sharpness_list.append", "sharpness_delta_list.append", "name_list.append", "module_name_list_before_this_layer.append", "module_list_before_this_layer.append", "isinstance", "len", "module_name_list_before_this_layer.append", "module_list_before_this_layer.append", "sub_module.named_parameters", "model", "criterion", "criterion.backward", "core.utils.MetricLogger.update", "sub_param.clone", "engine.set_layer_second_forward", "model", "criterion", "core.utils.MetricLogger.update", "abs", "sub_param.clone", "torch.isclose().sum", "engine.set_layer_first_forward", "image.to", "target.to", "image.to", "target.to", "len", "before_step[].nelement", "logger.info", "param_name_list.append", "criterion.item", "criterion.item", "torch.isclose"], "function", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.log_every", "home.repos.pwc.inspect_result.zhuang-group_saq.utils.asam.ASAM.ascent_step_param", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.log_every", "home.repos.pwc.inspect_result.zhuang-group_saq.utils.asam.ASAM.restore_step_param", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.AllReduce.backward", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.update", "home.repos.pwc.inspect_result.zhuang-group_saq.None.engine.set_layer_second_forward", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.update", "home.repos.pwc.inspect_result.zhuang-group_saq.None.engine.set_layer_first_forward"], ["", "def", "compute_layer_activation_sharpness", "(", "\n", "model", ",", "train_loader", ",", "criterion", ",", "minimizer", ",", "device", ",", "logger", ",", "args", ",", "\n", ")", ":", "\n", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "sharpness_list", "=", "[", "]", "\n", "sharpness_delta_list", "=", "[", "]", "\n", "name_list", "=", "[", "]", "\n", "module_name_list_before_this_layer", "=", "[", "]", "\n", "module_list_before_this_layer", "=", "[", "]", "\n", "for", "module_n", ",", "module", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "module", ",", "(", "nn", ".", "Conv2d", ",", "nn", ".", "Linear", ")", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "if", "len", "(", "module_list_before_this_layer", ")", "==", "0", ":", "\n", "            ", "module_name_list_before_this_layer", ".", "append", "(", "module_n", ")", "\n", "module_list_before_this_layer", ".", "append", "(", "module", ")", "\n", "continue", "\n", "\n", "", "logger", ".", "info", "(", "\"Processing layer: {}\"", ".", "format", "(", "module_n", ")", ")", "\n", "metric_logger", "=", "MetricLogger", "(", "logger", "=", "logger", ",", "delimiter", "=", "\"  \"", ")", "\n", "\n", "param_name_list", "=", "[", "]", "\n", "for", "sub_module_n", ",", "sub_module", "in", "zip", "(", "\n", "module_name_list_before_this_layer", ",", "module_list_before_this_layer", "\n", ")", ":", "\n", "            ", "for", "param_n", ",", "param", "in", "sub_module", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "\"weight\"", "in", "param_n", ":", "\n", "                    ", "param_name_list", ".", "append", "(", "\"{}.{}\"", ".", "format", "(", "sub_module_n", ",", "param_n", ")", ")", "\n", "\n", "", "", "", "logger", ".", "info", "(", "param_name_list", ")", "\n", "\n", "header", "=", "\"Epoch: [{}]\"", ".", "format", "(", "0", ")", "\n", "# accumulate gradient for all data", "\n", "for", "image", ",", "target", "in", "metric_logger", ".", "log_every", "(", "\n", "train_loader", ",", "args", ".", "print_frequency", ",", "header", "\n", ")", ":", "\n", "            ", "image", ",", "target", "=", "image", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "\n", "# Ascent Step", "\n", "output", "=", "model", "(", "image", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "metric_logger", ".", "update", "(", "loss", "=", "loss", ".", "item", "(", ")", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Loss: {}\"", ".", "format", "(", "metric_logger", ".", "loss", ".", "global_avg", ")", ")", "\n", "\n", "before_step", "=", "{", "}", "\n", "for", "sub_param_n", ",", "sub_param", ",", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "before_step", "[", "sub_param_n", "]", "=", "sub_param", ".", "clone", "(", ")", "\n", "\n", "", "minimizer", ".", "ascent_step_param", "(", "param_name_list", ")", "\n", "\n", "# descent step", "\n", "if", "\"QSAM\"", "in", "args", ".", "opt_type", "or", "\"QASAM\"", "in", "args", ".", "opt_type", ":", "\n", "            ", "set_layer_second_forward", "(", "model", ",", "module_name_list_before_this_layer", ")", "\n", "\n", "", "metric_logger_loss_w_epsilon", "=", "MetricLogger", "(", "logger", "=", "logger", ",", "delimiter", "=", "\"  \"", ")", "\n", "for", "image", ",", "target", "in", "metric_logger_loss_w_epsilon", ".", "log_every", "(", "\n", "train_loader", ",", "args", ".", "print_frequency", ",", "header", "\n", ")", ":", "\n", "            ", "image", ",", "target", "=", "image", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "\n", "output", "=", "model", "(", "image", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "metric_logger_loss_w_epsilon", ".", "update", "(", "loss", "=", "loss", ".", "item", "(", ")", ")", "\n", "", "sharpness", "=", "(", "\n", "metric_logger_loss_w_epsilon", ".", "loss", ".", "global_avg", "-", "metric_logger", ".", "loss", ".", "global_avg", "\n", ")", "\n", "sharpness_delta", "=", "(", "\n", "abs", "(", "sharpness", "-", "sharpness_list", "[", "-", "1", "]", ")", "\n", "if", "len", "(", "sharpness_delta_list", ")", ">", "0", "\n", "else", "sharpness", "\n", ")", "\n", "logger", ".", "info", "(", "\"Loss: {}\"", ".", "format", "(", "metric_logger_loss_w_epsilon", ".", "loss", ".", "global_avg", ")", ")", "\n", "logger", ".", "info", "(", "\"Layer: {}, Sharpness: {}\"", ".", "format", "(", "module_n", ",", "sharpness", ")", ")", "\n", "minimizer", ".", "restore_step_param", "(", "param_name_list", ")", "\n", "\n", "after_step", "=", "{", "}", "\n", "for", "sub_param_n", ",", "sub_param", ",", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "after_step", "[", "sub_param_n", "]", "=", "sub_param", ".", "clone", "(", ")", "\n", "\n", "", "for", "k", ",", "v", "in", "before_step", ".", "items", "(", ")", ":", "\n", "            ", "close_num", "=", "torch", ".", "isclose", "(", "before_step", "[", "k", "]", ",", "after_step", "[", "k", "]", ")", ".", "sum", "(", ")", "\n", "if", "close_num", "!=", "before_step", "[", "k", "]", ".", "nelement", "(", ")", ":", "\n", "                ", "logger", ".", "info", "(", "\"Param {} changed!!!\"", ".", "format", "(", "k", ")", ")", "\n", "assert", "False", "\n", "\n", "", "", "if", "\"QSAM\"", "in", "args", ".", "opt_type", "or", "\"QASAM\"", "in", "args", ".", "opt_type", ":", "\n", "            ", "set_layer_first_forward", "(", "model", ",", "module_name_list_before_this_layer", ")", "\n", "", "sharpness_list", ".", "append", "(", "sharpness", ")", "\n", "sharpness_delta_list", ".", "append", "(", "sharpness_delta", ")", "\n", "name_list", ".", "append", "(", "\"{}.{}\"", ".", "format", "(", "module_n", ",", "\"activation\"", ")", ")", "\n", "module_name_list_before_this_layer", ".", "append", "(", "module_n", ")", "\n", "module_list_before_this_layer", ".", "append", "(", "module", ")", "\n", "\n", "", "return", "sharpness_list", ",", "sharpness_delta_list", ",", "name_list", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.None.c_engine.derive_arch": [[918, 978], ["controller.eval", "model.eval", "controller.forward", "core.utils.is_dist_avail_and_initialized", "logger.info", "c_engine.show_bits", "c_engine.compute_sharpness", "core.engine.val", "sharpness_list.append", "val_error_list.append", "bops_list.append", "bits_seq_list.append", "entropy_list.append", "dist.broadcast", "dist.broadcast", "c_engine.set_wae_bits", "c_engine.set_w_bits", "c_engine.set_bits", "qmodel_analyse.compute_network_bops", "qmodel_analyse.compute_network_bops"], "function", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.AllReduce.forward", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.is_dist_avail_and_initialized", "home.repos.pwc.inspect_result.zhuang-group_saq.None.c_engine.show_bits", "home.repos.pwc.inspect_result.zhuang-group_saq.None.c_engine.compute_sharpness", "home.repos.pwc.inspect_result.zhuang-group_saq.core.trainer.Trainer.val", "home.repos.pwc.inspect_result.zhuang-group_saq.None.c_engine.set_wae_bits", "home.repos.pwc.inspect_result.zhuang-group_saq.None.c_engine.set_w_bits", "home.repos.pwc.inspect_result.zhuang-group_saq.None.c_engine.set_bits", "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qmodel_analyse.QModelAnalyse.compute_network_bops", "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qmodel_analyse.QModelAnalyse.compute_network_bops"], ["", "def", "derive_arch", "(", "\n", "model", ",", "\n", "controller", ",", "\n", "val_loader", ",", "\n", "criterion", ",", "\n", "minimizer", ",", "\n", "device", ",", "\n", "logger", ",", "\n", "qmodel_analyse", ",", "\n", "args", ",", "\n", ")", ":", "\n", "    ", "i", "=", "0", "\n", "sharpness_list", "=", "[", "]", "\n", "val_error_list", "=", "[", "]", "\n", "bops_list", "=", "[", "]", "\n", "bits_seq_list", "=", "[", "]", "\n", "entropy_list", "=", "[", "]", "\n", "controller", ".", "eval", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "while", "i", "!=", "20", ":", "\n", "        ", "bits_seq", ",", "probs", ",", "logp", ",", "entropy", "=", "controller", ".", "forward", "(", ")", "\n", "if", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "            ", "dist", ".", "broadcast", "(", "logp", ",", "src", "=", "0", ")", "\n", "dist", ".", "broadcast", "(", "entropy", ",", "src", "=", "0", ")", "\n", "", "if", "args", ".", "wa_same_bit", ":", "\n", "            ", "set_wae_bits", "(", "model", ",", "bits_seq", ")", "\n", "", "elif", "args", ".", "search_w_bit", ":", "\n", "            ", "set_w_bits", "(", "model", ",", "bits_seq", ")", "\n", "", "else", ":", "\n", "            ", "set_bits", "(", "model", ",", "bits_seq", ")", "\n", "", "if", "\"imagenet\"", "in", "args", ".", "dataset", ":", "\n", "            ", "bops", "=", "qmodel_analyse", ".", "compute_network_bops", "(", ")", "/", "1e9", "\n", "", "else", ":", "\n", "            ", "bops", "=", "qmodel_analyse", ".", "compute_network_bops", "(", ")", "/", "1e6", "\n", "", "logger", ".", "info", "(", "\"Generate arch with bops {} and entropy {}\"", ".", "format", "(", "bops", ",", "entropy", ")", ")", "\n", "if", "\"imagenet\"", "in", "args", ".", "dataset", ":", "\n", "            ", "if", "\"mobilenetv2\"", "in", "args", ".", "network", ":", "\n", "                ", "if", "bops", ">", "args", ".", "target_bops", "or", "bops", "<", "args", ".", "target_bops", "-", "0.1", ":", "\n", "                    ", "continue", "\n", "", "", "else", ":", "\n", "                ", "if", "bops", ">", "args", ".", "target_bops", "or", "bops", "<", "args", ".", "target_bops", "-", "0.2", ":", "\n", "                    ", "continue", "\n", "", "", "", "else", ":", "\n", "            ", "if", "bops", ">", "args", ".", "target_bops", "or", "bops", "<", "args", ".", "target_bops", "-", "10", ":", "\n", "                ", "continue", "\n", "", "", "show_bits", "(", "model", ")", "\n", "sharpness", "=", "compute_sharpness", "(", "\n", "model", ",", "val_loader", ",", "criterion", ",", "minimizer", ",", "device", ",", "logger", ",", "args", ",", "\n", ")", "\n", "val_error", ",", "val_loss", ",", "val5_error", "=", "val", "(", "\n", "model", ",", "val_loader", ",", "criterion", ",", "device", ",", "logger", ",", "None", ",", "0", ",", "args", ",", "\n", ")", "\n", "\n", "sharpness_list", ".", "append", "(", "sharpness", ")", "\n", "val_error_list", ".", "append", "(", "val_error", ")", "\n", "bops_list", ".", "append", "(", "bops", ")", "\n", "bits_seq_list", ".", "append", "(", "bits_seq", ")", "\n", "entropy_list", ".", "append", "(", "entropy", ")", "\n", "i", "+=", "1", "\n", "", "return", "sharpness_list", ",", "val_error_list", ",", "bops_list", ",", "bits_seq_list", ",", "entropy_list", "\n", "", ""]], "home.repos.pwc.inspect_result.zhuang-group_saq.None.train_sam.get_optimizer": [[43, 88], ["model.named_parameters", "params.append", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.Adam", "torch.optim.Adam"], "function", ["None"], ["", "", "def", "get_optimizer", "(", "model", ",", "args", ")", ":", "\n", "    ", "params", "=", "[", "]", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "\"clip_value\"", "in", "name", ":", "\n", "            ", "lr", "=", "args", ".", "clip_lr", "\n", "", "else", ":", "\n", "            ", "lr", "=", "args", ".", "lr", "\n", "", "params", ".", "append", "(", "\n", "{", "\"params\"", ":", "param", ",", "\"lr\"", ":", "lr", ",", "\"weight_decay\"", ":", "args", ".", "weight_decay", ",", "}", "\n", ")", "\n", "", "if", "\"SGDM\"", "in", "args", ".", "opt_type", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "params", "=", "params", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ",", "\n", ")", "\n", "", "elif", "\"SGD\"", "in", "args", ".", "opt_type", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "params", "=", "params", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ",", "\n", "nesterov", "=", "True", ",", "\n", ")", "\n", "", "elif", "\"RMSProp\"", "in", "args", ".", "opt_type", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "RMSprop", "(", "\n", "params", "=", "params", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "alpha", "=", "args", ".", "alpha", ",", "\n", "eps", "=", "args", ".", "eps", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", ")", "\n", "", "elif", "\"AdamW\"", "in", "args", ".", "opt_type", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "AdamW", "(", "\n", "params", "=", "params", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "weight_decay", ",", "\n", ")", "\n", "", "elif", "\"Adam\"", "in", "args", ".", "opt_type", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "params", "=", "params", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "weight_decay", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplemented", "\n", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.utils.controller.Controller.__init__": [[10, 31], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "controller.Controller.reset_parameters", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.__init__", "home.repos.pwc.inspect_result.zhuang-group_saq.utils.controller.WABEControllerDist.reset_parameters"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "n_layers", ",", "\n", "bits", "=", "[", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", "]", ",", "\n", "hidden_size", "=", "64", ",", "\n", "batch_size", "=", "1", ",", "\n", "device", "=", "\"cpu\"", ",", "\n", ")", ":", "\n", "        ", "super", "(", "Controller", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "bits", "=", "bits", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "\n", "self", ".", "bit_embedding", "=", "nn", ".", "Embedding", "(", "len", "(", "self", ".", "bits", ")", ",", "self", ".", "hidden_size", ")", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTMCell", "(", "self", ".", "hidden_size", ",", "self", ".", "hidden_size", ")", "\n", "self", ".", "weight_bits_linear", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_size", ",", "len", "(", "self", ".", "bits", ")", ")", "\n", "self", ".", "activation_bits_linear", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_size", ",", "len", "(", "self", ".", "bits", ")", ")", "\n", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.utils.controller.Controller.reset_parameters": [[32, 35], ["controller.Controller.parameters", "param.data.uniform_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ",", "init_range", "=", "0.1", ")", ":", "\n", "        ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "data", ".", "uniform_", "(", "-", "init_range", ",", "init_range", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.utils.controller.Controller._zeros": [[36, 40], ["functools.lru_cache", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "", "@", "functools", ".", "lru_cache", "(", "maxsize", "=", "128", ")", "\n", "def", "_zeros", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "return", "torch", ".", "zeros", "(", "\n", "(", "batch_size", ",", "self", ".", "hidden_size", ")", ",", "device", "=", "self", ".", "device", ",", "requires_grad", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.utils.controller.Controller._impl": [[42, 48], ["torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical.sample().view", "torch.distributions.Categorical.sample().view", "torch.distributions.Categorical.sample().view", "torch.distributions.Categorical.log_prob", "torch.distributions.Categorical.log_prob", "torch.distributions.Categorical.log_prob", "torch.distributions.Categorical.entropy", "torch.distributions.Categorical.entropy", "torch.distributions.Categorical.entropy", "torch.distributions.Categorical.sample", "torch.distributions.Categorical.sample", "torch.distributions.Categorical.sample"], "methods", ["None"], ["", "def", "_impl", "(", "self", ",", "probs", ")", ":", "\n", "        ", "m", "=", "torch", ".", "distributions", ".", "Categorical", "(", "probs", "=", "probs", ")", "\n", "action", "=", "m", ".", "sample", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "select_log_p", "=", "m", ".", "log_prob", "(", "action", ")", "\n", "entropy", "=", "m", ".", "entropy", "(", ")", "\n", "return", "action", ",", "select_log_p", ",", "entropy", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.utils.controller.Controller.random_sample": [[49, 55], ["range", "bits_seq.append", "random.choice"], "methods", ["None"], ["", "def", "random_sample", "(", "self", ")", ":", "\n", "        ", "bits_seq", "=", "[", "]", "\n", "for", "layer_index", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "for", "_", "in", "[", "\"weight\"", ",", "\"activation\"", "]", ":", "\n", "                ", "bits_seq", ".", "append", "(", "random", ".", "choice", "(", "self", ".", "bits", ")", ")", "\n", "", "", "return", "bits_seq", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.utils.controller.Controller.forward": [[56, 97], ["controller.Controller._zeros", "range", "controller.Controller._zeros", "controller.Controller._zeros", "controller.Controller.lstm", "controller.Controller.weight_bits_linear", "torch.softmax", "torch.softmax", "torch.softmax", "controller.Controller._impl", "logp_buf.append", "entropy_buf.append", "bits_seq.append", "probs_buf.append", "controller.Controller.bit_embedding", "controller.Controller.lstm", "controller.Controller.activation_bits_linear", "torch.softmax", "torch.softmax", "torch.softmax", "controller.Controller._impl", "logp_buf.append", "entropy_buf.append", "bits_seq.append", "probs_buf.append", "controller.Controller.bit_embedding", "sum", "sum", "action.item", "action.item"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.utils.controller.WABEControllerDist._zeros", "home.repos.pwc.inspect_result.zhuang-group_saq.utils.controller.WABEControllerDist._zeros", "home.repos.pwc.inspect_result.zhuang-group_saq.utils.controller.WABEControllerDist._zeros", "home.repos.pwc.inspect_result.zhuang-group_saq.utils.controller.WABEControllerDist._impl", "home.repos.pwc.inspect_result.zhuang-group_saq.utils.controller.WABEControllerDist._impl"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "hidden", "=", "self", ".", "_zeros", "(", "self", ".", "batch_size", ")", ",", "self", ".", "_zeros", "(", "self", ".", "batch_size", ")", "\n", "embed", "=", "self", ".", "_zeros", "(", "self", ".", "batch_size", ")", "\n", "\n", "bits_seq", "=", "[", "]", "\n", "probs_buf", "=", "[", "]", "\n", "logp_buf", "=", "[", "]", "\n", "entropy_buf", "=", "[", "]", "\n", "\n", "for", "layer_index", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "# get weight bit", "\n", "            ", "hx", ",", "cx", "=", "self", ".", "lstm", "(", "embed", ",", "hidden", ")", "\n", "hidden", "=", "(", "hx", ",", "cx", ")", "\n", "logits", "=", "self", ".", "weight_bits_linear", "(", "hx", ")", "\n", "probs", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "action", ",", "select_log_p", ",", "entropy", "=", "self", ".", "_impl", "(", "probs", ")", "\n", "\n", "r", "=", "self", ".", "bits", "[", "action", ".", "item", "(", ")", "]", "\n", "logp_buf", ".", "append", "(", "select_log_p", ")", "\n", "entropy_buf", ".", "append", "(", "entropy", ")", "\n", "bits_seq", ".", "append", "(", "r", ")", "\n", "probs_buf", ".", "append", "(", "probs", ")", "\n", "\n", "embed", "=", "self", ".", "bit_embedding", "(", "action", ")", "\n", "\n", "# get activation bit", "\n", "hx", ",", "cx", "=", "self", ".", "lstm", "(", "embed", ",", "hidden", ")", "\n", "hidden", "=", "(", "hx", ",", "cx", ")", "\n", "logits", "=", "self", ".", "activation_bits_linear", "(", "hx", ")", "\n", "probs", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "action", ",", "select_log_p", ",", "entropy", "=", "self", ".", "_impl", "(", "probs", ")", "\n", "\n", "r", "=", "self", ".", "bits", "[", "action", ".", "item", "(", ")", "]", "\n", "logp_buf", ".", "append", "(", "select_log_p", ")", "\n", "entropy_buf", ".", "append", "(", "entropy", ")", "\n", "bits_seq", ".", "append", "(", "r", ")", "\n", "probs_buf", ".", "append", "(", "probs", ")", "\n", "\n", "embed", "=", "self", ".", "bit_embedding", "(", "action", ")", "\n", "\n", "", "return", "bits_seq", ",", "probs_buf", ",", "sum", "(", "logp_buf", ")", ",", "sum", "(", "entropy_buf", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.utils.controller.WABEController.__init__": [[100, 120], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "torch.Linear", "torch.Linear", "torch.Linear", "controller.WABEController.reset_parameters", "len", "len"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.__init__", "home.repos.pwc.inspect_result.zhuang-group_saq.utils.controller.WABEControllerDist.reset_parameters"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "n_layers", ",", "\n", "bits", "=", "[", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", "]", ",", "\n", "hidden_size", "=", "64", ",", "\n", "batch_size", "=", "1", ",", "\n", "device", "=", "\"cpu\"", ",", "\n", ")", ":", "\n", "        ", "super", "(", "WABEController", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "bits", "=", "bits", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "\n", "self", ".", "bit_embedding", "=", "nn", ".", "Embedding", "(", "len", "(", "self", ".", "bits", ")", ",", "self", ".", "hidden_size", ")", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTMCell", "(", "self", ".", "hidden_size", ",", "self", ".", "hidden_size", ")", "\n", "self", ".", "weight_bits_linear", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_size", ",", "len", "(", "self", ".", "bits", ")", ")", "\n", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.utils.controller.WABEController.reset_parameters": [[121, 124], ["controller.WABEController.parameters", "param.data.uniform_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ",", "init_range", "=", "0.1", ")", ":", "\n", "        ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "data", ".", "uniform_", "(", "-", "init_range", ",", "init_range", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.utils.controller.WABEController._zeros": [[125, 129], ["functools.lru_cache", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "", "@", "functools", ".", "lru_cache", "(", "maxsize", "=", "128", ")", "\n", "def", "_zeros", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "return", "torch", ".", "zeros", "(", "\n", "(", "batch_size", ",", "self", ".", "hidden_size", ")", ",", "device", "=", "self", ".", "device", ",", "requires_grad", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.utils.controller.WABEController._impl": [[131, 137], ["torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical.sample().view", "torch.distributions.Categorical.sample().view", "torch.distributions.Categorical.sample().view", "torch.distributions.Categorical.log_prob", "torch.distributions.Categorical.log_prob", "torch.distributions.Categorical.log_prob", "torch.distributions.Categorical.entropy", "torch.distributions.Categorical.entropy", "torch.distributions.Categorical.entropy", "torch.distributions.Categorical.sample", "torch.distributions.Categorical.sample", "torch.distributions.Categorical.sample"], "methods", ["None"], ["", "def", "_impl", "(", "self", ",", "probs", ")", ":", "\n", "        ", "m", "=", "torch", ".", "distributions", ".", "Categorical", "(", "probs", "=", "probs", ")", "\n", "action", "=", "m", ".", "sample", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "select_log_p", "=", "m", ".", "log_prob", "(", "action", ")", "\n", "entropy", "=", "m", ".", "entropy", "(", ")", "\n", "return", "action", ",", "select_log_p", ",", "entropy", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.utils.controller.WABEController.random_sample": [[138, 143], ["range", "bits_seq.append", "random.choice"], "methods", ["None"], ["", "def", "random_sample", "(", "self", ")", ":", "\n", "        ", "bits_seq", "=", "[", "]", "\n", "for", "layer_index", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "bits_seq", ".", "append", "(", "random", ".", "choice", "(", "self", ".", "bits", ")", ")", "\n", "", "return", "bits_seq", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.utils.controller.WABEController.forward": [[144, 170], ["controller.WABEController._zeros", "range", "controller.WABEController._zeros", "controller.WABEController._zeros", "controller.WABEController.lstm", "controller.WABEController.weight_bits_linear", "torch.softmax", "torch.softmax", "torch.softmax", "controller.WABEController._impl", "logp_buf.append", "entropy_buf.append", "bits_seq.append", "probs_buf.append", "controller.WABEController.bit_embedding", "sum", "sum", "action.item"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.utils.controller.WABEControllerDist._zeros", "home.repos.pwc.inspect_result.zhuang-group_saq.utils.controller.WABEControllerDist._zeros", "home.repos.pwc.inspect_result.zhuang-group_saq.utils.controller.WABEControllerDist._zeros", "home.repos.pwc.inspect_result.zhuang-group_saq.utils.controller.WABEControllerDist._impl"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "hidden", "=", "self", ".", "_zeros", "(", "self", ".", "batch_size", ")", ",", "self", ".", "_zeros", "(", "self", ".", "batch_size", ")", "\n", "embed", "=", "self", ".", "_zeros", "(", "self", ".", "batch_size", ")", "\n", "\n", "bits_seq", "=", "[", "]", "\n", "probs_buf", "=", "[", "]", "\n", "logp_buf", "=", "[", "]", "\n", "entropy_buf", "=", "[", "]", "\n", "\n", "for", "layer_index", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "# get weight bit", "\n", "            ", "hx", ",", "cx", "=", "self", ".", "lstm", "(", "embed", ",", "hidden", ")", "\n", "hidden", "=", "(", "hx", ",", "cx", ")", "\n", "logits", "=", "self", ".", "weight_bits_linear", "(", "hx", ")", "\n", "probs", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "action", ",", "select_log_p", ",", "entropy", "=", "self", ".", "_impl", "(", "probs", ")", "\n", "\n", "r", "=", "self", ".", "bits", "[", "action", ".", "item", "(", ")", "]", "\n", "logp_buf", ".", "append", "(", "select_log_p", ")", "\n", "entropy_buf", ".", "append", "(", "entropy", ")", "\n", "bits_seq", ".", "append", "(", "r", ")", "\n", "probs_buf", ".", "append", "(", "probs", ")", "\n", "\n", "embed", "=", "self", ".", "bit_embedding", "(", "action", ")", "\n", "\n", "", "return", "bits_seq", ",", "probs_buf", ",", "sum", "(", "logp_buf", ")", ",", "sum", "(", "entropy_buf", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.utils.controller.WABEControllerDist.__init__": [[173, 193], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "torch.Linear", "torch.Linear", "torch.Linear", "controller.WABEControllerDist.reset_parameters", "len", "len"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.__init__", "home.repos.pwc.inspect_result.zhuang-group_saq.utils.controller.WABEControllerDist.reset_parameters"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "n_layers", ",", "\n", "bits", "=", "[", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", "]", ",", "\n", "hidden_size", "=", "64", ",", "\n", "batch_size", "=", "1", ",", "\n", "device", "=", "\"cpu\"", ",", "\n", ")", ":", "\n", "        ", "super", "(", "WABEControllerDist", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "bits", "=", "bits", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "\n", "self", ".", "bit_embedding", "=", "nn", ".", "Embedding", "(", "len", "(", "self", ".", "bits", ")", ",", "self", ".", "hidden_size", ")", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTMCell", "(", "self", ".", "hidden_size", ",", "self", ".", "hidden_size", ")", "\n", "self", ".", "weight_bits_linear", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_size", ",", "len", "(", "self", ".", "bits", ")", ")", "\n", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.utils.controller.WABEControllerDist.reset_parameters": [[194, 197], ["controller.WABEControllerDist.parameters", "param.data.uniform_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ",", "init_range", "=", "0.1", ")", ":", "\n", "        ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "data", ".", "uniform_", "(", "-", "init_range", ",", "init_range", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.utils.controller.WABEControllerDist._zeros": [[198, 202], ["functools.lru_cache", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "", "@", "functools", ".", "lru_cache", "(", "maxsize", "=", "128", ")", "\n", "def", "_zeros", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "return", "torch", ".", "zeros", "(", "\n", "(", "batch_size", ",", "self", ".", "hidden_size", ")", ",", "device", "=", "self", ".", "device", ",", "requires_grad", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.utils.controller.WABEControllerDist._impl": [[204, 210], ["torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical.sample().view", "torch.distributions.Categorical.sample().view", "torch.distributions.Categorical.sample().view", "torch.distributions.Categorical.log_prob", "torch.distributions.Categorical.log_prob", "torch.distributions.Categorical.log_prob", "torch.distributions.Categorical.entropy", "torch.distributions.Categorical.entropy", "torch.distributions.Categorical.entropy", "torch.distributions.Categorical.sample", "torch.distributions.Categorical.sample", "torch.distributions.Categorical.sample"], "methods", ["None"], ["", "def", "_impl", "(", "self", ",", "probs", ")", ":", "\n", "        ", "m", "=", "torch", ".", "distributions", ".", "Categorical", "(", "probs", "=", "probs", ")", "\n", "action", "=", "m", ".", "sample", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "select_log_p", "=", "m", ".", "log_prob", "(", "action", ")", "\n", "entropy", "=", "m", ".", "entropy", "(", ")", "\n", "return", "action", ",", "select_log_p", ",", "entropy", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.utils.controller.WABEControllerDist.random_sample": [[211, 216], ["range", "bits_seq.append", "random.choice"], "methods", ["None"], ["", "def", "random_sample", "(", "self", ")", ":", "\n", "        ", "bits_seq", "=", "[", "]", "\n", "for", "layer_index", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "bits_seq", ".", "append", "(", "random", ".", "choice", "(", "self", ".", "bits", ")", ")", "\n", "", "return", "bits_seq", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.utils.controller.WABEControllerDist.get_action_list": [[217, 219], ["action.item"], "methods", ["None"], ["", "def", "get_action_list", "(", "self", ",", "actions", ")", ":", "\n", "        ", "return", "[", "self", ".", "bits", "[", "action", ".", "item", "(", ")", "]", "for", "action", "in", "actions", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.utils.controller.WABEControllerDist.forward": [[220, 262], ["controller.WABEControllerDist._zeros", "range", "controller.WABEControllerDist._zeros", "controller.WABEControllerDist._zeros", "controller.WABEControllerDist.lstm", "controller.WABEControllerDist.weight_bits_linear", "torch.softmax", "torch.softmax", "torch.softmax", "controller.WABEControllerDist._impl", "controller.WABEControllerDist.get_action_list", "logp_buf.append", "entropy_buf.append", "bits_seq.append", "probs_buf.append", "controller.WABEControllerDist.bit_embedding", "sum", "sum"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.utils.controller.WABEControllerDist._zeros", "home.repos.pwc.inspect_result.zhuang-group_saq.utils.controller.WABEControllerDist._zeros", "home.repos.pwc.inspect_result.zhuang-group_saq.utils.controller.WABEControllerDist._zeros", "home.repos.pwc.inspect_result.zhuang-group_saq.utils.controller.WABEControllerDist._impl", "home.repos.pwc.inspect_result.zhuang-group_saq.utils.controller.WABEControllerDist.get_action_list"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "hidden", "=", "self", ".", "_zeros", "(", "self", ".", "batch_size", ")", ",", "self", ".", "_zeros", "(", "self", ".", "batch_size", ")", "\n", "embed", "=", "self", ".", "_zeros", "(", "self", ".", "batch_size", ")", "\n", "\n", "bits_seq", "=", "[", "]", "\n", "probs_buf", "=", "[", "]", "\n", "logp_buf", "=", "[", "]", "\n", "entropy_buf", "=", "[", "]", "\n", "\n", "for", "layer_index", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "# get weight bit", "\n", "            ", "hx", ",", "cx", "=", "self", ".", "lstm", "(", "embed", ",", "hidden", ")", "\n", "hidden", "=", "(", "hx", ",", "cx", ")", "\n", "logits", "=", "self", ".", "weight_bits_linear", "(", "hx", ")", "\n", "probs", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "actions", ",", "select_log_p", ",", "entropy", "=", "self", ".", "_impl", "(", "probs", ")", "\n", "\n", "r", "=", "self", ".", "get_action_list", "(", "actions", ")", "\n", "logp_buf", ".", "append", "(", "select_log_p", ")", "\n", "entropy_buf", ".", "append", "(", "entropy", ")", "\n", "bits_seq", ".", "append", "(", "r", ")", "\n", "probs_buf", ".", "append", "(", "probs", ")", "\n", "\n", "embed", "=", "self", ".", "bit_embedding", "(", "actions", ")", "\n", "\n", "# only use the first element", "\n", "# only_first_bits_seq = []", "\n", "# only_first_probs_buf = []", "\n", "# only_first_logp_buf = []", "\n", "# only_first_entropy_buf = []", "\n", "# for layer_index in range(len(bits_seq)):", "\n", "#     only_first_bits_seq.append(bits_seq[layer_index][0])", "\n", "#     only_first_probs_buf.append(probs_buf[layer_index][0])", "\n", "#     only_first_logp_buf.append(logp_buf[layer_index][0])", "\n", "#     only_first_entropy_buf.append(entropy_buf[layer_index][0])", "\n", "# return (", "\n", "#     only_first_bits_seq,", "\n", "#     only_first_probs_buf,", "\n", "#     sum(only_first_logp_buf),", "\n", "#     sum(only_first_entropy_buf),", "\n", "# )", "\n", "", "return", "bits_seq", ",", "probs_buf", ",", "sum", "(", "logp_buf", ")", ",", "sum", "(", "entropy_buf", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.utils.qasam.QASAM.__init__": [[9, 27], ["collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "optimizer", ",", "\n", "model", ",", "\n", "rho", "=", "0.5", ",", "\n", "eta", "=", "0.01", ",", "\n", "include_wclip", "=", "False", ",", "\n", "include_aclip", "=", "False", ",", "\n", "include_bn", "=", "True", ",", "\n", ")", ":", "\n", "        ", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "rho", "=", "rho", "\n", "self", ".", "eta", "=", "eta", "\n", "self", ".", "include_wclip", "=", "include_wclip", "\n", "self", ".", "include_aclip", "=", "include_aclip", "\n", "self", ".", "include_bn", "=", "include_bn", "\n", "self", ".", "state", "=", "defaultdict", "(", "dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.utils.qasam.QASAM._grad_norm": [[28, 70], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "qasam.QASAM.model.named_modules", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "isinstance", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "wgrads.append", "isinstance", "torch.norm().to", "torch.norm().to", "torch.norm().to", "torch.norm().to", "wgrads.append", "wgrads.append", "hasattr", "wgrads.append", "wgrads.append", "wgrads.append", "torch.norm().to", "torch.norm().to", "torch.norm().to", "torch.norm().to", "torch.norm().to", "torch.norm().to", "torch.norm().to", "torch.norm().to", "torch.norm().to", "torch.norm().to", "torch.norm().to", "torch.norm().to", "torch.norm().to", "torch.norm().to", "torch.norm().to", "torch.norm().to", "torch.norm().to", "torch.norm().to", "torch.norm().to", "torch.norm().to", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "m.x.abs", "m.weight_clip_value.abs", "m.activation_clip_value.abs", "m.weight.abs"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_grad_norm", "(", "self", ")", ":", "\n", "# put everything on the same device, in case of model parallelism", "\n", "        ", "shared_device", "=", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "\"params\"", "]", "[", "0", "]", ".", "device", "\n", "wgrads", "=", "[", "]", "\n", "for", "n", ",", "m", "in", "self", ".", "model", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "(", "QConv2d", ",", "QLinear", ")", ")", ":", "\n", "                ", "wgrads", ".", "append", "(", "\n", "torch", ".", "norm", "(", "m", ".", "x", ".", "grad", "*", "(", "m", ".", "x", ".", "abs", "(", ")", "+", "self", ".", "eta", ")", ",", "p", "=", "2", ")", ".", "to", "(", "shared_device", ")", "\n", ")", "\n", "\n", "if", "self", ".", "include_wclip", ":", "\n", "                    ", "wgrads", ".", "append", "(", "\n", "torch", ".", "norm", "(", "\n", "m", ".", "weight_clip_value", ".", "grad", "\n", "*", "(", "m", ".", "weight_clip_value", ".", "abs", "(", ")", "+", "self", ".", "eta", ")", ",", "\n", "p", "=", "2", ",", "\n", ")", ".", "to", "(", "shared_device", ")", "\n", ")", "\n", "", "if", "self", ".", "include_aclip", "and", "m", ".", "activation_clip_value", ".", "grad", ":", "\n", "                    ", "wgrads", ".", "append", "(", "\n", "torch", ".", "norm", "(", "\n", "m", ".", "activation_clip_value", ".", "grad", "\n", "*", "(", "m", ".", "activation_clip_value", ".", "abs", "(", ")", "+", "self", ".", "eta", ")", ",", "\n", "p", "=", "2", ",", "\n", ")", ".", "to", "(", "shared_device", ")", "\n", ")", "\n", "\n", "", "if", "hasattr", "(", "m", ",", "\"bias\"", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "wgrads", ".", "append", "(", "torch", ".", "norm", "(", "m", ".", "bias", ".", "grad", ",", "p", "=", "2", ")", ".", "to", "(", "shared_device", ")", ")", "\n", "", "", "if", "self", ".", "include_bn", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "if", "m", ".", "weight", ".", "grad", "is", "None", ":", "\n", "                        ", "continue", "\n", "", "wgrads", ".", "append", "(", "\n", "torch", ".", "norm", "(", "m", ".", "weight", ".", "grad", "*", "(", "m", ".", "weight", ".", "abs", "(", ")", "+", "self", ".", "eta", ")", ",", "p", "=", "2", ")", ".", "to", "(", "\n", "shared_device", "\n", ")", "\n", ")", "\n", "wgrads", ".", "append", "(", "torch", ".", "norm", "(", "m", ".", "bias", ".", "grad", ",", "p", "=", "2", ")", ".", "to", "(", "shared_device", ")", ")", "\n", "", "", "", "wgrad_norm", "=", "torch", ".", "norm", "(", "torch", ".", "stack", "(", "wgrads", ")", ",", "p", "=", "2", ")", "\n", "return", "wgrad_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.utils.qasam.QASAM.ascent_step": [[71, 113], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "qasam.QASAM._grad_norm", "qasam.QASAM.model.named_modules", "qasam.QASAM.optimizer.zero_grad", "isinstance", "p.data.clone", "isinstance", "scale.to", "p.data.clone", "p.add_", "p.data.clone", "p.add_", "hasattr", "p.data.clone", "p.add_", "p.data.clone", "p.add_", "p.data.clone", "p.add_", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "scale.to", "scale.to", "scale.to", "scale.to", "scale.to", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.sam.SAM._grad_norm"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "ascent_step", "(", "self", ")", ":", "\n", "        ", "grad_norm", "=", "self", ".", "_grad_norm", "(", ")", "\n", "scale", "=", "self", ".", "rho", "/", "(", "grad_norm", "+", "1e-12", ")", "\n", "for", "n", ",", "m", "in", "self", ".", "model", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "(", "QConv2d", ",", "QLinear", ")", ")", ":", "\n", "                ", "p", "=", "m", ".", "x", "\n", "self", ".", "state", "[", "m", "]", "[", "\"old_p\"", "]", "=", "p", ".", "data", ".", "clone", "(", ")", "\n", "e_w", "=", "torch", ".", "pow", "(", "p", ",", "2", ")", "*", "p", ".", "grad", "*", "scale", ".", "to", "(", "p", ")", "\n", "m", ".", "epsilon", "=", "e_w", "\n", "\n", "if", "self", ".", "include_wclip", ":", "\n", "                    ", "p", "=", "m", ".", "weight_clip_value", "\n", "self", ".", "state", "[", "p", "]", "[", "\"old_p\"", "]", "=", "p", ".", "data", ".", "clone", "(", ")", "\n", "e_w", "=", "torch", ".", "pow", "(", "p", ",", "2", ")", "*", "p", ".", "grad", "*", "scale", ".", "to", "(", "p", ")", "\n", "p", ".", "add_", "(", "e_w", ")", "\n", "\n", "", "if", "self", ".", "include_aclip", "and", "m", ".", "activation_clip_value", ".", "grad", ":", "\n", "                    ", "p", "=", "m", ".", "activation_clip_value", "\n", "self", ".", "state", "[", "p", "]", "[", "\"old_p\"", "]", "=", "p", ".", "data", ".", "clone", "(", ")", "\n", "e_w", "=", "torch", ".", "pow", "(", "p", ",", "2", ")", "*", "p", ".", "grad", "*", "scale", ".", "to", "(", "p", ")", "\n", "p", ".", "add_", "(", "e_w", ")", "\n", "\n", "", "if", "hasattr", "(", "m", ",", "\"bias\"", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "p", "=", "m", ".", "bias", "\n", "self", ".", "state", "[", "p", "]", "[", "\"old_p\"", "]", "=", "p", ".", "data", ".", "clone", "(", ")", "\n", "e_w", "=", "p", ".", "grad", "*", "scale", ".", "to", "(", "p", ")", "\n", "p", ".", "add_", "(", "e_w", ")", "\n", "", "", "if", "self", ".", "include_bn", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "if", "m", ".", "weight", ".", "grad", "is", "None", ":", "\n", "                        ", "continue", "\n", "", "p", "=", "m", ".", "weight", "\n", "self", ".", "state", "[", "p", "]", "[", "\"old_p\"", "]", "=", "p", ".", "data", ".", "clone", "(", ")", "\n", "e_w", "=", "torch", ".", "pow", "(", "p", ",", "2", ")", "*", "p", ".", "grad", "*", "scale", ".", "to", "(", "p", ")", "\n", "p", ".", "add_", "(", "e_w", ")", "\n", "\n", "p", "=", "m", ".", "bias", "\n", "self", ".", "state", "[", "p", "]", "[", "\"old_p\"", "]", "=", "p", ".", "data", ".", "clone", "(", ")", "\n", "e_w", "=", "p", ".", "grad", "*", "scale", ".", "to", "(", "p", ")", "\n", "p", ".", "add_", "(", "e_w", ")", "\n", "", "", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.utils.qasam.QASAM.descent_step": [[114, 140], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "qasam.QASAM.model.named_modules", "qasam.QASAM.optimizer.step", "qasam.QASAM.optimizer.zero_grad", "isinstance", "isinstance", "hasattr"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.step"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "descent_step", "(", "self", ")", ":", "\n", "        ", "for", "n", ",", "m", "in", "self", ".", "model", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "(", "QConv2d", ",", "QLinear", ")", ")", ":", "\n", "                ", "if", "self", ".", "include_wclip", ":", "\n", "                    ", "p", "=", "m", ".", "weight_clip_value", "\n", "p", ".", "data", "=", "self", ".", "state", "[", "p", "]", "[", "\"old_p\"", "]", "\n", "# m.weight_clip_value.sub_(self.state[m][\"weight_clip_eps\"])", "\n", "", "if", "self", ".", "include_aclip", "and", "m", ".", "activation_clip_value", ".", "grad", ":", "\n", "                    ", "p", "=", "m", ".", "activation_clip_value", "\n", "p", ".", "data", "=", "self", ".", "state", "[", "p", "]", "[", "\"old_p\"", "]", "\n", "\n", "", "if", "hasattr", "(", "m", ",", "\"bias\"", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "p", "=", "m", ".", "bias", "\n", "p", ".", "data", "=", "self", ".", "state", "[", "p", "]", "[", "\"old_p\"", "]", "\n", "", "", "if", "self", ".", "include_bn", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "if", "m", ".", "weight", ".", "grad", "is", "None", ":", "\n", "                        ", "continue", "\n", "", "p", "=", "m", ".", "weight", "\n", "p", ".", "data", "=", "self", ".", "state", "[", "p", "]", "[", "\"old_p\"", "]", "\n", "\n", "p", "=", "m", ".", "bias", "\n", "p", ".", "data", "=", "self", ".", "state", "[", "p", "]", "[", "\"old_p\"", "]", "\n", "", "", "", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.utils.qasam.QASAM.restore_step": [[141, 166], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "qasam.QASAM.model.named_modules", "qasam.QASAM.optimizer.zero_grad", "isinstance", "isinstance", "hasattr"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "restore_step", "(", "self", ")", ":", "\n", "        ", "for", "n", ",", "m", "in", "self", ".", "model", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "(", "QConv2d", ",", "QLinear", ")", ")", ":", "\n", "                ", "if", "self", ".", "include_wclip", ":", "\n", "                    ", "p", "=", "m", ".", "weight_clip_value", "\n", "p", ".", "data", "=", "self", ".", "state", "[", "p", "]", "[", "\"old_p\"", "]", "\n", "# m.weight_clip_value.sub_(self.state[m][\"weight_clip_eps\"])", "\n", "", "if", "self", ".", "include_aclip", "and", "m", ".", "activation_clip_value", ".", "grad", ":", "\n", "                    ", "p", "=", "m", ".", "activation_clip_value", "\n", "p", ".", "data", "=", "self", ".", "state", "[", "p", "]", "[", "\"old_p\"", "]", "\n", "\n", "", "if", "hasattr", "(", "m", ",", "\"bias\"", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "p", "=", "m", ".", "bias", "\n", "p", ".", "data", "=", "self", ".", "state", "[", "p", "]", "[", "\"old_p\"", "]", "\n", "", "", "if", "self", ".", "include_bn", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "if", "m", ".", "weight", ".", "grad", "is", "None", ":", "\n", "                        ", "continue", "\n", "", "p", "=", "m", ".", "weight", "\n", "p", ".", "data", "=", "self", ".", "state", "[", "p", "]", "[", "\"old_p\"", "]", "\n", "\n", "p", "=", "m", ".", "bias", "\n", "p", ".", "data", "=", "self", ".", "state", "[", "p", "]", "[", "\"old_p\"", "]", "\n", "", "", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhuang-group_saq.utils.bypass_bn.disable_running_stats": [[5, 12], ["model.apply", "isinstance"], "function", ["None"], ["def", "disable_running_stats", "(", "model", ")", ":", "\n", "    ", "def", "_disable", "(", "module", ")", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "module", ".", "backup_momentum", "=", "module", ".", "momentum", "\n", "module", ".", "momentum", "=", "0", "\n", "\n", "", "", "model", ".", "apply", "(", "_disable", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.utils.bypass_bn.enable_running_stats": [[14, 20], ["model.apply", "isinstance", "hasattr"], "function", ["None"], ["", "def", "enable_running_stats", "(", "model", ")", ":", "\n", "    ", "def", "_enable", "(", "module", ")", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", "and", "hasattr", "(", "module", ",", "\"backup_momentum\"", ")", ":", "\n", "            ", "module", ".", "momentum", "=", "module", ".", "backup_momentum", "\n", "\n", "", "", "model", ".", "apply", "(", "_enable", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.zhuang-group_saq.utils.asam.ASAM.__init__": [[7, 13], ["collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "model", ",", "rho", "=", "0.5", ",", "eta", "=", "0.01", ")", ":", "\n", "        ", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "rho", "=", "rho", "\n", "self", ".", "eta", "=", "eta", "\n", "self", ".", "state", "=", "defaultdict", "(", "dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.utils.asam.ASAM._grad_norm": [[14, 29], ["torch.no_grad", "asam.ASAM.model.named_parameters", "torch.norm", "wgrads.append", "torch.stack", "torch.norm().to", "torch.abs", "torch.norm"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_grad_norm", "(", "self", ")", ":", "\n", "# put everything on the same device, in case of model parallelism", "\n", "        ", "shared_device", "=", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "\"params\"", "]", "[", "0", "]", ".", "device", "\n", "wgrads", "=", "[", "]", "\n", "for", "n", ",", "p", "in", "self", ".", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                ", "continue", "\n", "", "if", "\"weight\"", "in", "n", "or", "\"clip_value\"", "in", "n", ":", "\n", "                ", "grad", "=", "(", "torch", ".", "abs", "(", "p", ")", "+", "self", ".", "eta", ")", "*", "p", ".", "grad", "\n", "", "else", ":", "\n", "                ", "grad", "=", "p", ".", "grad", "\n", "", "wgrads", ".", "append", "(", "torch", ".", "norm", "(", "grad", ",", "p", "=", "2", ")", ".", "to", "(", "shared_device", ")", ")", "\n", "", "wgrad_norm", "=", "torch", ".", "norm", "(", "torch", ".", "stack", "(", "wgrads", ")", ",", "p", "=", "2", ")", "\n", "return", "wgrad_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.utils.asam.ASAM.ascent_step": [[30, 44], ["torch.no_grad", "asam.ASAM._grad_norm", "asam.ASAM.model.named_parameters", "asam.ASAM.optimizer.zero_grad", "p.data.clone", "p.add_", "scale.to", "scale.to", "torch.pow"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.sam.SAM._grad_norm"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "ascent_step", "(", "self", ")", ":", "\n", "        ", "grad_norm", "=", "self", ".", "_grad_norm", "(", ")", "\n", "scale", "=", "self", ".", "rho", "/", "(", "grad_norm", "+", "1e-12", ")", "\n", "for", "n", ",", "p", "in", "self", ".", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                ", "continue", "\n", "", "self", ".", "state", "[", "p", "]", "[", "\"old_p\"", "]", "=", "p", ".", "data", ".", "clone", "(", ")", "\n", "if", "\"weight\"", "in", "n", "or", "\"clip_value\"", "in", "n", ":", "\n", "                ", "e_w", "=", "torch", ".", "pow", "(", "p", ",", "2", ")", "*", "p", ".", "grad", "*", "scale", ".", "to", "(", "p", ")", "\n", "", "else", ":", "\n", "                ", "e_w", "=", "p", ".", "grad", "*", "scale", ".", "to", "(", "p", ")", "\n", "", "p", ".", "add_", "(", "e_w", ")", "\n", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.utils.asam.ASAM.descent_step": [[45, 54], ["torch.no_grad", "asam.ASAM.model.named_parameters", "asam.ASAM.optimizer.step", "asam.ASAM.optimizer.zero_grad"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.step"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "descent_step", "(", "self", ")", ":", "\n", "        ", "for", "n", ",", "p", "in", "self", ".", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                ", "continue", "\n", "# get back to \"w\" from \"w + e(w)\"", "\n", "", "p", ".", "data", "=", "self", ".", "state", "[", "p", "]", "[", "\"old_p\"", "]", "\n", "", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.utils.asam.ASAM.ascent_step_param": [[55, 85], ["torch.no_grad", "asam.ASAM.model.named_parameters", "asam.ASAM.model.named_parameters", "asam.ASAM.optimizer.zero_grad", "asam.ASAM.state[].get", "wgrads.append", "torch.norm", "asam.ASAM.state[].get", "eps.mul_", "p.add_", "torch.clone().detach", "torch.clone().detach.abs_().add_", "p.grad.mul_", "torch.norm", "torch.stack", "p.grad.mul_", "torch.clone", "torch.clone().detach.abs_"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "ascent_step_param", "(", "self", ",", "param_name", ")", ":", "\n", "        ", "wgrads", "=", "[", "]", "\n", "for", "n", ",", "p", "in", "self", ".", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "grad", "is", "None", "or", "n", "not", "in", "param_name", ":", "\n", "                ", "continue", "\n", "", "t_w", "=", "self", ".", "state", "[", "p", "]", ".", "get", "(", "\"eps\"", ")", "\n", "if", "t_w", "is", "None", ":", "\n", "                ", "t_w", "=", "torch", ".", "clone", "(", "p", ")", ".", "detach", "(", ")", "\n", "self", ".", "state", "[", "p", "]", "[", "\"eps\"", "]", "=", "t_w", "\n", "", "if", "\"weight\"", "in", "n", "or", "\"clip_value\"", "in", "n", ":", "\n", "                ", "t_w", "[", "...", "]", "=", "p", "[", "...", "]", "\n", "# t_w + eta", "\n", "t_w", ".", "abs_", "(", ")", ".", "add_", "(", "self", ".", "eta", ")", "\n", "# t_w * grad", "\n", "p", ".", "grad", ".", "mul_", "(", "t_w", ")", "\n", "", "wgrads", ".", "append", "(", "torch", ".", "norm", "(", "p", ".", "grad", ",", "p", "=", "2", ")", ")", "\n", "", "wgrad_norm", "=", "torch", ".", "norm", "(", "torch", ".", "stack", "(", "wgrads", ")", ",", "p", "=", "2", ")", "+", "1.0e-16", "\n", "for", "n", ",", "p", "in", "self", ".", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "grad", "is", "None", "or", "n", "not", "in", "param_name", ":", "\n", "                ", "continue", "\n", "", "t_w", "=", "self", ".", "state", "[", "p", "]", ".", "get", "(", "\"eps\"", ")", "\n", "if", "\"weight\"", "in", "n", "or", "\"clip_value\"", "in", "n", ":", "\n", "# t_w * t_w * grad", "\n", "                ", "p", ".", "grad", ".", "mul_", "(", "t_w", ")", "\n", "", "eps", "=", "t_w", "\n", "eps", "[", "...", "]", "=", "p", ".", "grad", "[", "...", "]", "\n", "eps", ".", "mul_", "(", "self", ".", "rho", "/", "wgrad_norm", ")", "\n", "p", ".", "add_", "(", "eps", ")", "\n", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.utils.asam.ASAM.restore_step_param": [[86, 93], ["torch.no_grad", "asam.ASAM.model.named_parameters", "asam.ASAM.optimizer.zero_grad", "p.sub_"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "restore_step_param", "(", "self", ",", "param_name", ")", ":", "\n", "        ", "for", "n", ",", "p", "in", "self", ".", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "grad", "is", "None", "or", "n", "not", "in", "param_name", ":", "\n", "                ", "continue", "\n", "", "p", ".", "sub_", "(", "self", ".", "state", "[", "p", "]", "[", "\"eps\"", "]", ")", "\n", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhuang-group_saq.utils.sam.SAM.__init__": [[7, 13], ["collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "model", ",", "rho", "=", "0.5", ",", "eta", "=", "0.01", ")", ":", "\n", "        ", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "rho", "=", "rho", "\n", "self", ".", "eta", "=", "eta", "\n", "self", ".", "state", "=", "defaultdict", "(", "dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.utils.sam.SAM._grad_norm": [[14, 25], ["torch.no_grad", "sam.SAM.model.named_parameters", "torch.norm", "wgrads.append", "torch.stack", "torch.norm().to", "torch.norm"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_grad_norm", "(", "self", ")", ":", "\n", "# put everything on the same device, in case of model parallelism", "\n", "        ", "shared_device", "=", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "\"params\"", "]", "[", "0", "]", ".", "device", "\n", "wgrads", "=", "[", "]", "\n", "for", "n", ",", "p", "in", "self", ".", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                ", "continue", "\n", "", "wgrads", ".", "append", "(", "torch", ".", "norm", "(", "p", ".", "grad", ",", "p", "=", "2", ")", ".", "to", "(", "shared_device", ")", ")", "\n", "", "wgrad_norm", "=", "torch", ".", "norm", "(", "torch", ".", "stack", "(", "wgrads", ")", ",", "p", "=", "2", ")", "\n", "return", "wgrad_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.utils.sam.SAM.ascent_step": [[26, 37], ["torch.no_grad", "sam.SAM._grad_norm", "sam.SAM.model.named_parameters", "sam.SAM.optimizer.zero_grad", "p.data.clone", "p.add_", "scale.to"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.sam.SAM._grad_norm"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "ascent_step", "(", "self", ")", ":", "\n", "        ", "grad_norm", "=", "self", ".", "_grad_norm", "(", ")", "\n", "scale", "=", "self", ".", "rho", "/", "(", "grad_norm", "+", "1e-12", ")", "\n", "for", "n", ",", "p", "in", "self", ".", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                ", "continue", "\n", "", "self", ".", "state", "[", "p", "]", "[", "\"old_p\"", "]", "=", "p", ".", "data", ".", "clone", "(", ")", "\n", "e_w", "=", "p", ".", "grad", "*", "scale", ".", "to", "(", "p", ")", "\n", "p", ".", "add_", "(", "e_w", ")", "\n", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.utils.sam.SAM.descent_step": [[38, 47], ["torch.no_grad", "sam.SAM.model.named_parameters", "sam.SAM.optimizer.step", "sam.SAM.optimizer.zero_grad"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.step"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "descent_step", "(", "self", ")", ":", "\n", "        ", "for", "n", ",", "p", "in", "self", ".", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                ", "continue", "\n", "# get back to \"w\" from \"w + e(w)\"", "\n", "", "p", ".", "data", "=", "self", ".", "state", "[", "p", "]", "[", "\"old_p\"", "]", "\n", "", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.utils.sam.SAM.restore_step": [[48, 54], ["torch.no_grad", "sam.SAM.model.named_parameters", "p.sub_"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "restore_step", "(", "self", ")", ":", "\n", "        ", "for", "n", ",", "p", "in", "self", ".", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "grad", "is", "None", "or", "\"clip_value\"", "in", "n", ":", "\n", "                ", "continue", "\n", "", "p", ".", "sub_", "(", "self", ".", "state", "[", "p", "]", "[", "\"eps\"", "]", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.zhuang-group_saq.utils.qsam.QSAM.__init__": [[9, 25], ["collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "optimizer", ",", "\n", "model", ",", "\n", "rho", "=", "0.5", ",", "\n", "include_wclip", "=", "False", ",", "\n", "include_aclip", "=", "False", ",", "\n", "include_bn", "=", "True", ",", "\n", ")", ":", "\n", "        ", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "rho", "=", "rho", "\n", "self", ".", "include_wclip", "=", "include_wclip", "\n", "self", ".", "include_aclip", "=", "include_aclip", "\n", "self", ".", "include_bn", "=", "include_bn", "\n", "self", ".", "state", "=", "defaultdict", "(", "dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.utils.qsam.QSAM._grad_norm": [[26, 54], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "qsam.QSAM.model.named_modules", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "isinstance", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "wgrads.append", "isinstance", "torch.norm().to", "torch.norm().to", "torch.norm().to", "torch.norm().to", "wgrads.append", "wgrads.append", "hasattr", "wgrads.append", "wgrads.append", "wgrads.append", "torch.norm().to", "torch.norm().to", "torch.norm().to", "torch.norm().to", "torch.norm().to", "torch.norm().to", "torch.norm().to", "torch.norm().to", "torch.norm().to", "torch.norm().to", "torch.norm().to", "torch.norm().to", "torch.norm().to", "torch.norm().to", "torch.norm().to", "torch.norm().to", "torch.norm().to", "torch.norm().to", "torch.norm().to", "torch.norm().to", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_grad_norm", "(", "self", ")", ":", "\n", "# put everything on the same device, in case of model parallelism", "\n", "        ", "shared_device", "=", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "\"params\"", "]", "[", "0", "]", ".", "device", "\n", "wgrads", "=", "[", "]", "\n", "for", "n", ",", "m", "in", "self", ".", "model", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "(", "QConv2d", ",", "QLinear", ")", ")", ":", "\n", "                ", "wgrads", ".", "append", "(", "torch", ".", "norm", "(", "m", ".", "x", ".", "grad", ",", "p", "=", "2", ")", ".", "to", "(", "shared_device", ")", ")", "\n", "\n", "if", "self", ".", "include_wclip", ":", "\n", "                    ", "wgrads", ".", "append", "(", "\n", "torch", ".", "norm", "(", "m", ".", "weight_clip_value", ".", "grad", ",", "p", "=", "2", ")", ".", "to", "(", "shared_device", ")", "\n", ")", "\n", "", "if", "self", ".", "include_aclip", "and", "m", ".", "activation_clip_value", ".", "grad", ":", "\n", "                    ", "wgrads", ".", "append", "(", "\n", "torch", ".", "norm", "(", "m", ".", "activation_clip_value", ".", "grad", ",", "p", "=", "2", ")", ".", "to", "(", "shared_device", ")", "\n", ")", "\n", "\n", "", "if", "hasattr", "(", "m", ",", "\"bias\"", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "wgrads", ".", "append", "(", "torch", ".", "norm", "(", "m", ".", "bias", ".", "grad", ",", "p", "=", "2", ")", ".", "to", "(", "shared_device", ")", ")", "\n", "", "", "if", "self", ".", "include_bn", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "if", "m", ".", "weight", ".", "grad", "is", "None", ":", "\n", "                        ", "continue", "\n", "", "wgrads", ".", "append", "(", "torch", ".", "norm", "(", "m", ".", "weight", ".", "grad", ",", "p", "=", "2", ")", ".", "to", "(", "shared_device", ")", ")", "\n", "wgrads", ".", "append", "(", "torch", ".", "norm", "(", "m", ".", "bias", ".", "grad", ",", "p", "=", "2", ")", ".", "to", "(", "shared_device", ")", ")", "\n", "", "", "", "wgrad_norm", "=", "torch", ".", "norm", "(", "torch", ".", "stack", "(", "wgrads", ")", ",", "p", "=", "2", ")", "\n", "return", "wgrad_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.utils.qsam.QSAM.ascent_step": [[55, 97], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "qsam.QSAM._grad_norm", "qsam.QSAM.model.named_modules", "qsam.QSAM.optimizer.zero_grad", "isinstance", "p.data.clone", "isinstance", "scale.to", "p.data.clone", "p.add_", "p.data.clone", "p.add_", "hasattr", "p.data.clone", "p.add_", "p.data.clone", "p.add_", "p.data.clone", "p.add_", "scale.to", "scale.to", "scale.to", "scale.to", "scale.to"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.sam.SAM._grad_norm"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "ascent_step", "(", "self", ")", ":", "\n", "        ", "grad_norm", "=", "self", ".", "_grad_norm", "(", ")", "\n", "scale", "=", "self", ".", "rho", "/", "(", "grad_norm", "+", "1e-12", ")", "\n", "for", "n", ",", "m", "in", "self", ".", "model", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "(", "QConv2d", ",", "QLinear", ")", ")", ":", "\n", "                ", "p", "=", "m", ".", "x", "\n", "self", ".", "state", "[", "m", "]", "[", "\"old_p\"", "]", "=", "p", ".", "data", ".", "clone", "(", ")", "\n", "e_w", "=", "p", ".", "grad", "*", "scale", ".", "to", "(", "p", ")", "\n", "m", ".", "epsilon", "=", "e_w", "\n", "\n", "if", "self", ".", "include_wclip", ":", "\n", "                    ", "p", "=", "m", ".", "weight_clip_value", "\n", "self", ".", "state", "[", "p", "]", "[", "\"old_p\"", "]", "=", "p", ".", "data", ".", "clone", "(", ")", "\n", "e_w", "=", "p", ".", "grad", "*", "scale", ".", "to", "(", "p", ")", "\n", "p", ".", "add_", "(", "e_w", ")", "\n", "\n", "", "if", "self", ".", "include_aclip", "and", "m", ".", "activation_clip_value", ".", "grad", ":", "\n", "                    ", "p", "=", "m", ".", "activation_clip_value", "\n", "self", ".", "state", "[", "p", "]", "[", "\"old_p\"", "]", "=", "p", ".", "data", ".", "clone", "(", ")", "\n", "e_w", "=", "p", ".", "grad", "*", "scale", ".", "to", "(", "p", ")", "\n", "p", ".", "add_", "(", "e_w", ")", "\n", "\n", "", "if", "hasattr", "(", "m", ",", "\"bias\"", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "p", "=", "m", ".", "bias", "\n", "self", ".", "state", "[", "p", "]", "[", "\"old_p\"", "]", "=", "p", ".", "data", ".", "clone", "(", ")", "\n", "e_w", "=", "p", ".", "grad", "*", "scale", ".", "to", "(", "p", ")", "\n", "p", ".", "add_", "(", "e_w", ")", "\n", "", "", "if", "self", ".", "include_bn", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "if", "m", ".", "weight", ".", "grad", "is", "None", ":", "\n", "                        ", "continue", "\n", "", "p", "=", "m", ".", "weight", "\n", "self", ".", "state", "[", "p", "]", "[", "\"old_p\"", "]", "=", "p", ".", "data", ".", "clone", "(", ")", "\n", "e_w", "=", "p", ".", "grad", "*", "scale", ".", "to", "(", "p", ")", "\n", "p", ".", "add_", "(", "e_w", ")", "\n", "\n", "p", "=", "m", ".", "bias", "\n", "self", ".", "state", "[", "p", "]", "[", "\"old_p\"", "]", "=", "p", ".", "data", ".", "clone", "(", ")", "\n", "e_w", "=", "p", ".", "grad", "*", "scale", ".", "to", "(", "p", ")", "\n", "p", ".", "add_", "(", "e_w", ")", "\n", "", "", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.utils.qsam.QSAM.descent_step": [[173, 199], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "qsam.QSAM.model.named_modules", "qsam.QSAM.optimizer.step", "qsam.QSAM.optimizer.zero_grad", "isinstance", "isinstance", "hasattr"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.step"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "descent_step", "(", "self", ")", ":", "\n", "        ", "for", "n", ",", "m", "in", "self", ".", "model", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "(", "QConv2d", ",", "QLinear", ")", ")", ":", "\n", "                ", "if", "self", ".", "include_wclip", ":", "\n", "                    ", "p", "=", "m", ".", "weight_clip_value", "\n", "p", ".", "data", "=", "self", ".", "state", "[", "p", "]", "[", "\"old_p\"", "]", "\n", "# m.weight_clip_value.sub_(self.state[m][\"weight_clip_eps\"])", "\n", "", "if", "self", ".", "include_aclip", "and", "m", ".", "activation_clip_value", ".", "grad", ":", "\n", "                    ", "p", "=", "m", ".", "activation_clip_value", "\n", "p", ".", "data", "=", "self", ".", "state", "[", "p", "]", "[", "\"old_p\"", "]", "\n", "\n", "", "if", "hasattr", "(", "m", ",", "\"bias\"", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "p", "=", "m", ".", "bias", "\n", "p", ".", "data", "=", "self", ".", "state", "[", "p", "]", "[", "\"old_p\"", "]", "\n", "", "", "if", "self", ".", "include_bn", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "if", "m", ".", "weight", ".", "grad", "is", "None", ":", "\n", "                        ", "continue", "\n", "", "p", "=", "m", ".", "weight", "\n", "p", ".", "data", "=", "self", ".", "state", "[", "p", "]", "[", "\"old_p\"", "]", "\n", "\n", "p", "=", "m", ".", "bias", "\n", "p", ".", "data", "=", "self", ".", "state", "[", "p", "]", "[", "\"old_p\"", "]", "\n", "", "", "", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.utils.qsam.QSAM.restore_step": [[218, 243], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "qsam.QSAM.model.named_modules", "qsam.QSAM.optimizer.zero_grad", "isinstance", "isinstance", "hasattr"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "restore_step", "(", "self", ")", ":", "\n", "        ", "for", "n", ",", "m", "in", "self", ".", "model", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "(", "QConv2d", ",", "QLinear", ")", ")", ":", "\n", "                ", "if", "self", ".", "include_wclip", ":", "\n", "                    ", "p", "=", "m", ".", "weight_clip_value", "\n", "p", ".", "data", "=", "self", ".", "state", "[", "p", "]", "[", "\"old_p\"", "]", "\n", "# m.weight_clip_value.sub_(self.state[m][\"weight_clip_eps\"])", "\n", "", "if", "self", ".", "include_aclip", "and", "m", ".", "activation_clip_value", ".", "grad", ":", "\n", "                    ", "p", "=", "m", ".", "activation_clip_value", "\n", "p", ".", "data", "=", "self", ".", "state", "[", "p", "]", "[", "\"old_p\"", "]", "\n", "\n", "", "if", "hasattr", "(", "m", ",", "\"bias\"", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "p", "=", "m", ".", "bias", "\n", "p", ".", "data", "=", "self", ".", "state", "[", "p", "]", "[", "\"old_p\"", "]", "\n", "", "", "if", "self", ".", "include_bn", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "if", "m", ".", "weight", ".", "grad", "is", "None", ":", "\n", "                        ", "continue", "\n", "", "p", "=", "m", ".", "weight", "\n", "p", ".", "data", "=", "self", ".", "state", "[", "p", "]", "[", "\"old_p\"", "]", "\n", "\n", "p", "=", "m", ".", "bias", "\n", "p", ".", "data", "=", "self", ".", "state", "[", "p", "]", "[", "\"old_p\"", "]", "\n", "", "", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhuang-group_saq.utils.optim.get_minimizer": [[9, 38], ["utils.QSAM", "utils.QASAM", "utils.ASAM", "SAM"], "function", ["None"], ["def", "get_minimizer", "(", "model", ",", "optimizer", ",", "args", ")", ":", "\n", "    ", "if", "\"QSAM\"", "in", "args", ".", "opt_type", ":", "\n", "        ", "minimizer", "=", "qsam", ".", "QSAM", "(", "\n", "optimizer", ",", "\n", "model", ",", "\n", "rho", "=", "args", ".", "rho", ",", "\n", "include_wclip", "=", "args", ".", "include_wclip", ",", "\n", "include_aclip", "=", "args", ".", "include_aclip", ",", "\n", "include_bn", "=", "args", ".", "include_bn", ",", "\n", ")", "\n", "", "elif", "\"QASAM\"", "in", "args", ".", "opt_type", ":", "\n", "        ", "minimizer", "=", "qasam", ".", "QASAM", "(", "\n", "optimizer", ",", "\n", "model", ",", "\n", "rho", "=", "args", ".", "rho", ",", "\n", "eta", "=", "args", ".", "eta", ",", "\n", "include_wclip", "=", "args", ".", "include_wclip", ",", "\n", "include_aclip", "=", "args", ".", "include_aclip", ",", "\n", "include_bn", "=", "args", ".", "include_bn", ",", "\n", ")", "\n", "", "elif", "\"ASAM\"", "in", "args", ".", "opt_type", ":", "\n", "        ", "minimizer", "=", "asam", ".", "ASAM", "(", "optimizer", ",", "model", ",", "rho", "=", "args", ".", "rho", ",", "eta", "=", "args", ".", "eta", ")", "\n", "", "elif", "\"SAM\"", "in", "args", ".", "opt_type", ":", "\n", "        ", "SAM", "=", "sam", ".", "SAM", "\n", "minimizer", "=", "SAM", "(", "optimizer", ",", "model", ",", "rho", "=", "args", ".", "rho", ",", "eta", "=", "args", ".", "eta", ",", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplemented", "\n", "\n", "", "return", "minimizer", "\n", "", ""]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qpreresnet.QPreBasicBlock.__init__": [[94, 140], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.ReLU", "qpreresnet.qconv3x3", "torch.BatchNorm2d", "torch.ReLU", "qpreresnet.qconv3x3"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.__init__", "home.repos.pwc.inspect_result.zhuang-group_saq.models.qmobilenetv2.qconv3x3", "home.repos.pwc.inspect_result.zhuang-group_saq.models.qmobilenetv2.qconv3x3"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_plane", ",", "\n", "out_plane", ",", "\n", "stride", "=", "1", ",", "\n", "downsample", "=", "None", ",", "\n", "block_type", "=", "\"both_preact\"", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "conv_type", "=", "LIQ", ".", "QConv2d", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        init module and weights\n        :param in_plane: size of input plane\n        :param out_plane: size of output plane\n        :param stride: stride of convolutional layers, default 1\n        :param downsample: down sample type for expand dimension of input feature maps, default None\n        :param block_type: type of blocks, decide position of short cut, both-preact: short cut start from beginning\n        of the first segment, half-preact: short cut start from the position between the first segment and the second\n        one. default: both-preact\n        \"\"\"", "\n", "super", "(", "QPreBasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "block_type", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_plane", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "conv1", "=", "qconv3x3", "(", "\n", "in_plane", ",", "\n", "out_plane", ",", "\n", "stride", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_plane", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "qconv3x3", "(", "\n", "out_plane", ",", "\n", "out_plane", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", "self", ".", "block_index", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qpreresnet.QPreBasicBlock.forward": [[141, 169], ["qpreresnet.QPreBasicBlock.bn1", "qpreresnet.QPreBasicBlock.relu1", "qpreresnet.QPreBasicBlock.conv1", "qpreresnet.QPreBasicBlock.bn2", "qpreresnet.QPreBasicBlock.relu2", "qpreresnet.QPreBasicBlock.conv2", "qpreresnet.QPreBasicBlock.downsample", "qpreresnet.QPreBasicBlock.bn1", "qpreresnet.QPreBasicBlock.relu1", "qpreresnet.QPreBasicBlock.conv1", "qpreresnet.QPreBasicBlock.bn2", "qpreresnet.QPreBasicBlock.relu2", "qpreresnet.QPreBasicBlock.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        forward procedure of residual module\n        :param x: input feature maps\n        :return: output feature maps\n        \"\"\"", "\n", "if", "self", ".", "name", "==", "\"half_preact\"", ":", "\n", "            ", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu1", "(", "x", ")", "\n", "residual", "=", "x", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu2", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "", "elif", "self", ".", "name", "==", "\"both_preact\"", ":", "\n", "            ", "residual", "=", "x", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu2", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "downsample", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "residual", ")", "\n", "\n", "", "out", "=", "x", "+", "residual", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qpreresnet.QPreResNet.__init__": [[176, 247], ["torch.Module.__init__", "tools.get_conv_fc_quan_type", "qpreresnet.QPreResNet._make_layer", "qpreresnet.QPreResNet._make_layer", "qpreresnet.QPreResNet._make_layer", "torch.BatchNorm2d", "torch.ReLU", "torch.AvgPool2d", "qpreresnet.QPreResNet._init_weight", "qpreresnet.qconv3x3", "qpreresnet.conv3x3", "fc_type", "qpreresnet.linear"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.__init__", "home.repos.pwc.inspect_result.zhuang-group_saq.models.tools.get_conv_fc_quan_type", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._make_layer", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._make_layer", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._make_layer", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._init_weight", "home.repos.pwc.inspect_result.zhuang-group_saq.models.qmobilenetv2.qconv3x3", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.conv3x3", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.linear"], ["def", "__init__", "(", "\n", "self", ",", "\n", "depth", ",", "\n", "quantize_first_last", "=", "False", ",", "\n", "wide_factor", "=", "1", ",", "\n", "num_classes", "=", "10", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "quan_type", "=", "\"LIQ\"", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        init model and weights\n        :param depth: depth of network\n        :param wide_factor: wide factor for deciding width of network, default is 1\n        :param num_classes: number of classes, related to labels. default 10\n        \"\"\"", "\n", "super", "(", "QPreResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_plane", "=", "16", "*", "wide_factor", "\n", "self", ".", "depth", "=", "depth", "\n", "n", "=", "(", "depth", "-", "2", ")", "/", "6", "\n", "\n", "conv_type", ",", "fc_type", "=", "get_conv_fc_quan_type", "(", "quan_type", ")", "\n", "\n", "if", "quantize_first_last", ":", "\n", "            ", "self", ".", "conv", "=", "qconv3x3", "(", "\n", "3", ",", "\n", "16", "*", "wide_factor", ",", "\n", "bits_weights", "=", "8", ",", "\n", "bits_activations", "=", "32", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "conv3x3", "(", "3", ",", "16", "*", "wide_factor", ")", "\n", "", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "\n", "QPreBasicBlock", ",", "\n", "16", "*", "wide_factor", ",", "\n", "n", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "\n", "QPreBasicBlock", ",", "\n", "32", "*", "wide_factor", ",", "\n", "n", ",", "\n", "stride", "=", "2", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "\n", "QPreBasicBlock", ",", "\n", "64", "*", "wide_factor", ",", "\n", "n", ",", "\n", "stride", "=", "2", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "64", "*", "wide_factor", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AvgPool2d", "(", "8", ")", "\n", "if", "quantize_first_last", ":", "\n", "            ", "self", ".", "fc", "=", "fc_type", "(", "\n", "64", "*", "wide_factor", ",", "num_classes", ",", "bits_weights", "=", "8", ",", "bits_activations", "=", "8", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", "=", "linear", "(", "64", "*", "wide_factor", ",", "num_classes", ")", "\n", "\n", "", "self", ".", "_init_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qpreresnet.QPreResNet._init_weight": [[248, 257], ["qpreresnet.QPreResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_init_weight", "(", "self", ")", ":", "\n", "# init layer parameters", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "# elif isinstance(m, nn.Linear):", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qpreresnet.QPreResNet._make_layer": [[260, 314], ["layers.append", "range", "torch.Sequential", "qpreresnet.qconv1x1", "block", "int", "layers.append", "block"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.models.qmobilenetv2.qconv1x1"], ["", "", "", "def", "_make_layer", "(", "\n", "self", ",", "\n", "block", ",", "\n", "out_plane", ",", "\n", "n_blocks", ",", "\n", "stride", "=", "1", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "conv_type", "=", "LIQ", ".", "QConv2d", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        make residual blocks, including short cut and residual function\n        :param block: type of basic block to build network\n        :param out_plane: size of output plane\n        :param n_blocks: number of blocks on every segment\n        :param stride: stride of convolutional neural network, default 1\n        :return: residual blocks\n        \"\"\"", "\n", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "in_plane", "!=", "out_plane", ":", "\n", "            ", "downsample", "=", "qconv1x1", "(", "\n", "self", ".", "in_plane", ",", "\n", "out_plane", ",", "\n", "stride", "=", "stride", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "\n", "self", ".", "in_plane", ",", "\n", "out_plane", ",", "\n", "stride", ",", "\n", "downsample", ",", "\n", "block_type", "=", "\"half_preact\"", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", ")", "\n", "self", ".", "in_plane", "=", "out_plane", "\n", "for", "i", "in", "range", "(", "1", ",", "int", "(", "n_blocks", ")", ")", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "block", "(", "\n", "self", ".", "in_plane", ",", "\n", "out_plane", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qpreresnet.QPreResNet.forward": [[315, 331], ["qpreresnet.QPreResNet.conv", "qpreresnet.QPreResNet.layer1", "qpreresnet.QPreResNet.layer2", "qpreresnet.QPreResNet.layer3", "qpreresnet.QPreResNet.bn", "qpreresnet.QPreResNet.relu", "qpreresnet.QPreResNet.avg_pool", "qpreresnet.QPreResNet.view", "qpreresnet.QPreResNet.fc", "qpreresnet.QPreResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        forward procedure of model\n        :param x: input feature maps\n        :return: output feature maps\n        \"\"\"", "\n", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "avg_pool", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qpreresnet.conv1x1": [[22, 28], ["torch.Conv2d"], "function", ["None"], ["def", "conv1x1", "(", "in_plane", ",", "out_plane", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    1x1 convolutional layer\n    \"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_plane", ",", "out_plane", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qpreresnet.qconv1x1": [[31, 51], ["conv_type"], "function", ["None"], ["", "def", "qconv1x1", "(", "\n", "in_plane", ",", "\n", "out_plane", ",", "\n", "stride", "=", "1", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "conv_type", "=", "LIQ", ".", "QConv2d", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n    1x1 quantized convolutional layer\n    \"\"\"", "\n", "return", "conv_type", "(", "\n", "in_plane", ",", "\n", "out_plane", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qpreresnet.conv3x3": [[54, 58], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qpreresnet.qconv3x3": [[61, 79], ["conv_type"], "function", ["None"], ["", "def", "qconv3x3", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "stride", "=", "1", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "conv_type", "=", "LIQ", ".", "QConv2d", ",", "\n", ")", ":", "\n", "    ", "\"3x3 quantized convolution with padding\"", "\n", "return", "conv_type", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qpreresnet.linear": [[82, 84], ["torch.Linear"], "function", ["None"], ["", "def", "linear", "(", "in_features", ",", "out_features", ")", ":", "\n", "    ", "return", "nn", ".", "Linear", "(", "in_features", ",", "out_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qpreresnet.qpreresnet20": [[333, 338], ["qpreresnet.QPreResNet"], "function", ["None"], ["", "", "def", "qpreresnet20", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a QPreResNet-20 model.\n    \"\"\"", "\n", "model", "=", "QPreResNet", "(", "depth", "=", "20", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qpreresnet.qpreresnet32": [[340, 345], ["qpreresnet.QPreResNet"], "function", ["None"], ["", "def", "qpreresnet32", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a QPreResNet-32 model.\n    \"\"\"", "\n", "model", "=", "QPreResNet", "(", "depth", "=", "32", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qpreresnet.qpreresnet44": [[347, 352], ["qpreresnet.QPreResNet"], "function", ["None"], ["", "def", "qpreresnet44", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a QPreResNet-44 model.\n    \"\"\"", "\n", "model", "=", "QPreResNet", "(", "depth", "=", "44", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qpreresnet.qpreresnet56": [[354, 359], ["qpreresnet.QPreResNet"], "function", ["None"], ["", "def", "qpreresnet56", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a QPreResNet-56 model.\n    \"\"\"", "\n", "model", "=", "QPreResNet", "(", "depth", "=", "56", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qpreresnet.qpreresnet110": [[361, 366], ["qpreresnet.QPreResNet"], "function", ["None"], ["", "def", "qpreresnet110", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a QPreResNet-110 model.\n    \"\"\"", "\n", "model", "=", "QPreResNet", "(", "depth", "=", "110", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qresnet.QBasicBlock.__init__": [[59, 92], ["torch.Module.__init__", "qresnet.qconv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "qresnet.qconv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.__init__", "home.repos.pwc.inspect_result.zhuang-group_saq.models.qmobilenetv2.qconv3x3", "home.repos.pwc.inspect_result.zhuang-group_saq.models.qmobilenetv2.qconv3x3"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stride", "=", "1", ",", "\n", "downsample", "=", "None", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "conv_type", "=", "LIQ", ".", "QConv2d", ",", "\n", ")", ":", "\n", "        ", "super", "(", "QBasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "\"resnet-basic\"", "\n", "self", ".", "conv1", "=", "qconv3x3", "(", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stride", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "qconv3x3", "(", "\n", "planes", ",", "\n", "planes", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "block_index", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qresnet.QBasicBlock.forward": [[93, 110], ["qresnet.QBasicBlock.conv1", "qresnet.QBasicBlock.bn1", "qresnet.QBasicBlock.relu", "qresnet.QBasicBlock.conv2", "qresnet.QBasicBlock.bn2", "qresnet.QBasicBlock.relu", "qresnet.QBasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qresnet.QBottleneck.__init__": [[115, 160], ["torch.Module.__init__", "conv_type", "torch.BatchNorm2d", "torch.BatchNorm2d", "conv_type", "torch.BatchNorm2d", "torch.BatchNorm2d", "conv_type", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stride", "=", "1", ",", "\n", "downsample", "=", "None", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "conv_type", "=", "LIQ", ".", "QConv2d", ",", "\n", ")", ":", "\n", "        ", "super", "(", "QBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "\"resnet-bottleneck\"", "\n", "self", ".", "conv1", "=", "conv_type", "(", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv_type", "(", "\n", "planes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "conv_type", "(", "\n", "planes", ",", "\n", "planes", "*", "4", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "block_index", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qresnet.QBottleneck.forward": [[161, 183], ["qresnet.QBottleneck.conv1", "qresnet.QBottleneck.bn1", "qresnet.QBottleneck.relu", "qresnet.QBottleneck.conv2", "qresnet.QBottleneck.bn2", "qresnet.QBottleneck.relu", "qresnet.QBottleneck.conv3", "qresnet.QBottleneck.bn3", "qresnet.QBottleneck.relu", "qresnet.QBottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qresnet.QResNet.__init__": [[186, 282], ["torch.Module.__init__", "tools.get_conv_fc_quan_type", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "qresnet.QResNet._make_layer", "qresnet.QResNet._make_layer", "qresnet.QResNet._make_layer", "qresnet.QResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "qresnet.QResNet.modules", "torch.Conv2d", "torch.Conv2d", "conv_type", "torch.Linear", "torch.Linear", "fc_type", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.__init__", "home.repos.pwc.inspect_result.zhuang-group_saq.models.tools.get_conv_fc_quan_type", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._make_layer", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._make_layer", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._make_layer", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._make_layer"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "depth", ",", "\n", "num_classes", "=", "1000", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "quantize_first_last", "=", "False", ",", "\n", "quan_type", "=", "\"LIQ\"", ",", "\n", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "QResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "depth", "<", "50", ":", "\n", "            ", "block", "=", "QBasicBlock", "\n", "", "else", ":", "\n", "            ", "block", "=", "QBottleneck", "\n", "\n", "", "if", "depth", "==", "18", ":", "\n", "            ", "layers", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", "\n", "", "elif", "depth", "==", "34", ":", "\n", "            ", "layers", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", "\n", "", "elif", "depth", "==", "50", ":", "\n", "            ", "layers", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", "\n", "", "elif", "depth", "==", "101", ":", "\n", "            ", "layers", "=", "[", "3", ",", "4", ",", "23", ",", "3", "]", "\n", "", "elif", "depth", "==", "152", ":", "\n", "            ", "layers", "=", "[", "3", ",", "8", ",", "36", ",", "3", "]", "\n", "\n", "", "conv_type", ",", "fc_type", "=", "get_conv_fc_quan_type", "(", "quan_type", ")", "\n", "\n", "if", "not", "quantize_first_last", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "conv_type", "(", "\n", "3", ",", "\n", "64", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "3", ",", "\n", "bias", "=", "False", ",", "\n", "bits_weights", "=", "8", ",", "\n", "bits_activations", "=", "32", ",", "\n", ")", "\n", "", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "64", ",", "\n", "layers", "[", "0", "]", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "128", ",", "\n", "layers", "[", "1", "]", ",", "\n", "stride", "=", "2", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "256", ",", "\n", "layers", "[", "2", "]", ",", "\n", "stride", "=", "2", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "512", ",", "\n", "layers", "[", "3", "]", ",", "\n", "stride", "=", "2", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "if", "not", "quantize_first_last", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", "=", "fc_type", "(", "\n", "512", "*", "block", ".", "expansion", ",", "num_classes", ",", "bits_weights", "=", "8", ",", "bits_activations", "=", "8", "\n", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qresnet.QResNet._make_layer": [[283, 333], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "conv_type", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "\n", "self", ",", "\n", "block", ",", "\n", "planes", ",", "\n", "blocks", ",", "\n", "stride", "=", "1", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "conv_type", "=", "LIQ", ".", "QConv2d", ",", "\n", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv_type", "(", "\n", "self", ".", "inplanes", ",", "\n", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "\n", "self", ".", "inplanes", ",", "\n", "planes", ",", "\n", "stride", ",", "\n", "downsample", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "block", "(", "\n", "self", ".", "inplanes", ",", "\n", "planes", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qresnet.QResNet.forward": [[334, 350], ["qresnet.QResNet.conv1", "qresnet.QResNet.bn1", "qresnet.QResNet.relu", "qresnet.QResNet.maxpool", "qresnet.QResNet.layer1", "qresnet.QResNet.layer2", "qresnet.QResNet.layer3", "qresnet.QResNet.layer4", "qresnet.QResNet.avgpool", "qresnet.QResNet.view", "qresnet.QResNet.fc", "qresnet.QResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qresnet.conv3x3": [[28, 32], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qresnet.qconv3x3": [[35, 53], ["conv_type"], "function", ["None"], ["", "def", "qconv3x3", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "stride", "=", "1", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "conv_type", "=", "LIQ", ".", "QConv2d", ",", "\n", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "conv_type", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qresnet.qresnet18": [[352, 359], ["qresnet.QResNet", "QResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "def", "qresnet18", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a QResNet-18 model.\n    \"\"\"", "\n", "model", "=", "QResNet", "(", "depth", "=", "18", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet18\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qresnet.qresnet34": [[361, 368], ["qresnet.QResNet", "QResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "qresnet34", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a QResNet-34 model.\n    \"\"\"", "\n", "model", "=", "QResNet", "(", "depth", "=", "34", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet34\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qresnet.qresnet50": [[370, 377], ["qresnet.QResNet", "QResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "qresnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a QResNet-50 model.\n    \"\"\"", "\n", "model", "=", "QResNet", "(", "depth", "=", "50", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet50\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qresnet.qresnet101": [[379, 386], ["qresnet.QResNet", "QResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "qresnet101", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a QResNet-101 model.\n    \"\"\"", "\n", "model", "=", "QResNet", "(", "depth", "=", "101", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet101\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qresnet.qresnet152": [[388, 395], ["qresnet.QResNet", "QResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "qresnet152", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a QResNet-152 model.\n    \"\"\"", "\n", "model", "=", "QResNet", "(", "depth", "=", "152", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet152\"", "]", ")", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.LIQ_wn.QConv2d.__init__": [[12, 39], ["LIQ.QConv2d.__init__"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "True", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", "QConv2d", ",", "self", ")", ".", "__init__", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "dilation", ",", "\n", "groups", ",", "\n", "bias", ",", "\n", "bits_weights", ",", "\n", "bits_activations", ",", "\n", ")", "\n", "self", ".", "init_state", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.LIQ_wn.QConv2d.forward": [[40, 65], ["LIQ.quantize_activation", "LIQ_wn.QConv2d.weight.data.mean", "LIQ_wn.QConv2d.weight.data.std", "LIQ_wn.QConv2d.weight.add().div", "LIQ.quantize_weight", "torch.nn.functional.conv2d", "LIQ_wn.QConv2d.activation_clip_value.abs", "LIQ_wn.QConv2d.weight_clip_value.abs", "LIQ_wn.QConv2d.weight.add"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.dorefa.quantize_activation", "home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQLinear.quantize_weight"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# if not self.init_state:", "\n", "#     self.init_state = True", "\n", "#     self.init_weight_clip_val()", "\n", "#     self.init_activation_clip_val(input)", "\n", "        ", "quantized_input", "=", "quantize_activation", "(", "\n", "input", ",", "self", ".", "bits_activations", ",", "self", ".", "activation_clip_value", ".", "abs", "(", ")", "\n", ")", "\n", "weight_mean", "=", "self", ".", "weight", ".", "data", ".", "mean", "(", ")", "\n", "weight_std", "=", "self", ".", "weight", ".", "data", ".", "std", "(", ")", "\n", "normalized_weight", "=", "self", ".", "weight", ".", "add", "(", "-", "weight_mean", ")", ".", "div", "(", "weight_std", ")", "\n", "quantized_weight", "=", "quantize_weight", "(", "\n", "normalized_weight", ",", "self", ".", "bits_weights", ",", "self", ".", "weight_clip_value", ".", "abs", "(", ")", "\n", ")", "\n", "output", "=", "F", ".", "conv2d", "(", "\n", "quantized_input", ",", "\n", "quantized_weight", ",", "\n", "self", ".", "bias", ",", "\n", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "\n", "self", ".", "dilation", ",", "\n", "self", ".", "groups", ",", "\n", ")", "\n", "self", ".", "output_shape", "=", "output", ".", "shape", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.LIQ_wn.QConv2d.init_weight_clip_val": [[66, 73], ["LIQ_wn.QConv2d.weight.data.mean", "LIQ_wn.QConv2d.weight.data.std", "LIQ_wn.QConv2d.weight.add().div", "LIQ_wn.QConv2d.weight_clip_value.data.fill_", "print", "LIQ_wn.QConv2d.abs().max", "LIQ_wn.QConv2d.weight.add", "LIQ_wn.QConv2d.abs"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.SmoothedValue.max"], ["", "def", "init_weight_clip_val", "(", "self", ")", ":", "\n", "        ", "weight_mean", "=", "self", ".", "weight", ".", "data", ".", "mean", "(", ")", "\n", "weight_std", "=", "self", ".", "weight", ".", "data", ".", "std", "(", ")", "\n", "normalized_weight", "=", "self", ".", "weight", ".", "add", "(", "-", "weight_mean", ")", ".", "div", "(", "weight_std", ")", "\n", "max_weight_val", "=", "normalized_weight", ".", "abs", "(", ")", ".", "max", "(", ")", "*", "0.8", "\n", "self", ".", "weight_clip_value", ".", "data", ".", "fill_", "(", "max_weight_val", ")", "\n", "print", "(", "\"Init weight clip: {}\"", ".", "format", "(", "self", ".", "weight_clip_value", ".", "data", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.LIQ_wn.QConv2d.init_activation_clip_val": [[74, 78], ["LIQ_wn.QConv2d.activation_clip_value.data.fill_", "print", "input.abs().max", "input.abs"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.SmoothedValue.max"], ["", "def", "init_activation_clip_val", "(", "self", ",", "input", ")", ":", "\n", "        ", "max_activation_val", "=", "input", ".", "abs", "(", ")", ".", "max", "(", ")", "*", "0.8", "\n", "self", ".", "activation_clip_value", ".", "data", ".", "fill_", "(", "max_activation_val", ")", "\n", "print", "(", "\"Init activation clip: {}\"", ".", "format", "(", "self", ".", "activation_clip_value", ".", "data", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.LIQ_wn.QConv2d.extra_repr": [[79, 83], ["super().extra_repr", "s.replace.replace.replace"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQLinear.extra_repr"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "s", "=", "super", "(", ")", ".", "extra_repr", "(", ")", "\n", "s", "=", "s", ".", "replace", "(", "\"LIQ_conv2d\"", ",", "\"LIQ_wn_conv2d\"", ")", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.tools.get_conv_fc_quan_type": [[6, 23], ["None"], "function", ["None"], ["def", "get_conv_fc_quan_type", "(", "quan_type", ")", ":", "\n", "    ", "if", "quan_type", "==", "\"LIQ\"", ":", "\n", "        ", "conv_type", "=", "LIQ", ".", "QConv2d", "\n", "fc_type", "=", "LIQ", ".", "QLinear", "\n", "", "elif", "quan_type", "==", "\"LIQ_wn\"", ":", "\n", "        ", "conv_type", "=", "LIQ_wn", ".", "QConv2d", "\n", "fc_type", "=", "LIQ", ".", "QLinear", "\n", "", "elif", "quan_type", "==", "\"pact\"", ":", "\n", "        ", "conv_type", "=", "pact", ".", "QConv2d", "\n", "fc_type", "=", "pact", ".", "QLinear", "\n", "", "elif", "quan_type", "==", "\"dorefa\"", ":", "\n", "        ", "conv_type", "=", "dorefa", ".", "QConv2d", "\n", "fc_type", "=", "dorefa", ".", "QLinear", "\n", "", "else", ":", "\n", "        ", "conv_type", "=", "nn", ".", "Conv2d", "\n", "fc_type", "=", "nn", ".", "Linear", "\n", "", "return", "conv_type", ",", "fc_type", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.tools.compute_bops": [[25, 35], ["None"], "function", ["None"], ["", "def", "compute_bops", "(", "\n", "kernel_size", ",", "in_channels", ",", "filter_per_channel", ",", "h", ",", "w", ",", "bits_w", "=", "32", ",", "bits_a", "=", "32", "\n", ")", ":", "\n", "    ", "conv_per_position_flops", "=", "(", "\n", "kernel_size", "*", "kernel_size", "*", "in_channels", "*", "filter_per_channel", "\n", ")", "\n", "active_elements_count", "=", "h", "*", "w", "\n", "overall_conv_flops", "=", "conv_per_position_flops", "*", "active_elements_count", "\n", "bops", "=", "overall_conv_flops", "*", "bits_w", "*", "bits_a", "\n", "return", "bops", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.tools.compute_memory_footprint": [[37, 39], ["None"], "function", ["None"], ["", "def", "compute_memory_footprint", "(", "n", ",", "c", ",", "h", ",", "w", ",", "bitwidth", "=", "32", ")", ":", "\n", "    ", "return", "n", "*", "c", "*", "h", "*", "w", "*", "bitwidth", "\n", "", ""]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.common.RoundFunction.forward": [[11, 14], ["torch.round"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ",", "n", ")", ":", "\n", "        ", "return", "torch", ".", "round", "(", "x", "*", "n", ")", "/", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.common.RoundFunction.backward": [[15, 18], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "return", "grad_output", ",", "None", ",", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.common.quantization": [[5, 8], ["RoundFunction.apply"], "function", ["None"], ["def", "quantization", "(", "x", ",", "k", ")", ":", "\n", "    ", "n", "=", "2", "**", "k", "-", "1", "\n", "return", "RoundFunction", ".", "apply", "(", "x", ",", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.LIQ.QConv2d.__init__": [[45, 75], ["torch.Conv2d.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "True", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", "QConv2d", ",", "self", ")", ".", "__init__", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "dilation", ",", "\n", "groups", ",", "\n", "bias", ",", "\n", ")", "\n", "# self.eps = 1e-5", "\n", "self", ".", "init_state", "=", "False", "\n", "self", ".", "weight_clip_value", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "[", "1.0", "]", ")", ")", "\n", "self", ".", "activation_clip_value", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "[", "1.0", "]", ")", ")", "\n", "self", ".", "bits_weights", "=", "bits_weights", "\n", "self", ".", "bits_activations", "=", "bits_activations", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.LIQ.QConv2d.forward": [[76, 98], ["LIQ.quantize_activation", "LIQ.quantize_weight", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "LIQ.QConv2d.init_weight_clip_val", "LIQ.QConv2d.init_activation_clip_val", "LIQ.QConv2d.activation_clip_value.abs", "LIQ.QConv2d.weight_clip_value.abs"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.dorefa.quantize_activation", "home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQLinear.quantize_weight", "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.LIQ.QLinear.init_weight_clip_val", "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.LIQ.QLinear.init_activation_clip_val"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "not", "self", ".", "init_state", ":", "\n", "            ", "self", ".", "init_state", "=", "True", "\n", "self", ".", "init_weight_clip_val", "(", ")", "\n", "self", ".", "init_activation_clip_val", "(", "input", ")", "\n", "", "quantized_input", "=", "quantize_activation", "(", "\n", "input", ",", "self", ".", "bits_activations", ",", "self", ".", "activation_clip_value", ".", "abs", "(", ")", "\n", ")", "\n", "quantized_weight", "=", "quantize_weight", "(", "\n", "self", ".", "weight", ",", "self", ".", "bits_weights", ",", "self", ".", "weight_clip_value", ".", "abs", "(", ")", "\n", ")", "\n", "output", "=", "F", ".", "conv2d", "(", "\n", "quantized_input", ",", "\n", "quantized_weight", ",", "\n", "self", ".", "bias", ",", "\n", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "\n", "self", ".", "dilation", ",", "\n", "self", ".", "groups", ",", "\n", ")", "\n", "self", ".", "output_shape", "=", "output", ".", "shape", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.LIQ.QConv2d.init_weight_clip_val": [[99, 103], ["LIQ.QConv2d.weight_clip_value.data.fill_", "print", "LIQ.QConv2d.weight.abs().max", "LIQ.QConv2d.weight.abs"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.SmoothedValue.max"], ["", "def", "init_weight_clip_val", "(", "self", ")", ":", "\n", "        ", "max_weight_val", "=", "self", ".", "weight", ".", "abs", "(", ")", ".", "max", "(", ")", "*", "0.8", "\n", "self", ".", "weight_clip_value", ".", "data", ".", "fill_", "(", "max_weight_val", ")", "\n", "print", "(", "\"Init weight clip: {}\"", ".", "format", "(", "self", ".", "weight_clip_value", ".", "data", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.LIQ.QConv2d.init_activation_clip_val": [[104, 108], ["LIQ.QConv2d.activation_clip_value.data.fill_", "print", "input.abs().max", "input.abs"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.SmoothedValue.max"], ["", "def", "init_activation_clip_val", "(", "self", ",", "input", ")", ":", "\n", "        ", "max_activation_val", "=", "input", ".", "abs", "(", ")", ".", "max", "(", ")", "*", "0.8", "\n", "self", ".", "activation_clip_value", ".", "data", ".", "fill_", "(", "max_activation_val", ")", "\n", "print", "(", "\"Init activation clip: {}\"", ".", "format", "(", "self", ".", "activation_clip_value", ".", "data", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.LIQ.QConv2d.extra_repr": [[109, 115], ["super().extra_repr"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQLinear.extra_repr"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "s", "=", "super", "(", ")", ".", "extra_repr", "(", ")", "\n", "s", "+=", "\", bits_weights={}\"", ".", "format", "(", "self", ".", "bits_weights", ")", "\n", "s", "+=", "\", bits_activations={}\"", ".", "format", "(", "self", ".", "bits_activations", ")", "\n", "s", "+=", "\", method={}\"", ".", "format", "(", "\"LIQ_conv2d\"", ")", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.LIQ.QLinear.__init__": [[122, 138], ["torch.Linear.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_features", ",", "\n", "out_features", ",", "\n", "bias", "=", "True", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", "QLinear", ",", "self", ")", ".", "__init__", "(", "in_features", ",", "out_features", ",", "bias", "=", "bias", ")", "\n", "# self.eps = 1e-5", "\n", "self", ".", "init_state", "=", "False", "\n", "self", ".", "weight_clip_value", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "[", "2.0", "]", ")", ")", "\n", "self", ".", "activation_clip_value", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "[", "2.0", "]", ")", ")", "\n", "self", ".", "bits_weights", "=", "bits_weights", "\n", "self", ".", "bits_activations", "=", "bits_activations", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.LIQ.QLinear.forward": [[139, 153], ["LIQ.quantize_activation", "LIQ.quantize_weight", "torch.nn.functional.linear", "torch.nn.functional.linear", "LIQ.QLinear.init_weight_clip_val", "LIQ.QLinear.init_activation_clip_val", "LIQ.QLinear.activation_clip_value.abs", "LIQ.QLinear.weight_clip_value.abs"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.dorefa.quantize_activation", "home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQLinear.quantize_weight", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.linear", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.linear", "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.LIQ.QLinear.init_weight_clip_val", "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.LIQ.QLinear.init_activation_clip_val"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "not", "self", ".", "init_state", ":", "\n", "            ", "self", ".", "init_state", "=", "True", "\n", "self", ".", "init_weight_clip_val", "(", ")", "\n", "self", ".", "init_activation_clip_val", "(", "input", ")", "\n", "", "quantized_input", "=", "quantize_activation", "(", "\n", "input", ",", "self", ".", "bits_activations", ",", "self", ".", "activation_clip_value", ".", "abs", "(", ")", "\n", ")", "\n", "quantized_weight", "=", "quantize_weight", "(", "\n", "self", ".", "weight", ",", "self", ".", "bits_weights", ",", "self", ".", "weight_clip_value", ".", "abs", "(", ")", "\n", ")", "\n", "output", "=", "F", ".", "linear", "(", "quantized_input", ",", "quantized_weight", ",", "self", ".", "bias", ")", "\n", "self", ".", "output_shape", "=", "output", ".", "shape", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.LIQ.QLinear.init_weight_clip_val": [[154, 158], ["LIQ.QLinear.weight_clip_value.data.fill_", "print", "LIQ.QLinear.weight.abs().max", "LIQ.QLinear.weight.abs"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.SmoothedValue.max"], ["", "def", "init_weight_clip_val", "(", "self", ")", ":", "\n", "        ", "max_weight_val", "=", "self", ".", "weight", ".", "abs", "(", ")", ".", "max", "(", ")", "*", "0.8", "\n", "self", ".", "weight_clip_value", ".", "data", ".", "fill_", "(", "max_weight_val", ")", "\n", "print", "(", "\"FC Init weight clip: {}\"", ".", "format", "(", "self", ".", "weight_clip_value", ".", "data", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.LIQ.QLinear.init_activation_clip_val": [[159, 163], ["LIQ.QLinear.activation_clip_value.data.fill_", "print", "input.abs().max", "input.abs"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.SmoothedValue.max"], ["", "def", "init_activation_clip_val", "(", "self", ",", "input", ")", ":", "\n", "        ", "max_activation_val", "=", "input", ".", "abs", "(", ")", ".", "max", "(", ")", "*", "0.8", "\n", "self", ".", "activation_clip_value", ".", "data", ".", "fill_", "(", "max_activation_val", ")", "\n", "print", "(", "\"FC Init activation clip: {}\"", ".", "format", "(", "self", ".", "activation_clip_value", ".", "data", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.LIQ.QLinear.extra_repr": [[164, 170], ["super().extra_repr"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQLinear.extra_repr"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "s", "=", "super", "(", ")", ".", "extra_repr", "(", ")", "\n", "s", "+=", "\", bits_weights={}\"", ".", "format", "(", "self", ".", "bits_weights", ")", "\n", "s", "+=", "\", bits_activations={}\"", ".", "format", "(", "self", ".", "bits_activations", ")", "\n", "s", "+=", "\", method={}\"", ".", "format", "(", "\"LIQ_linear\"", ")", "\n", "return", "s", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.LIQ.normalization_on_weights": [[8, 12], ["torch.clamp", "torch.clamp"], "function", ["None"], ["def", "normalization_on_weights", "(", "x", ",", "clip_value", ")", ":", "\n", "    ", "x", "=", "x", "/", "clip_value", "\n", "x", "=", "torch", ".", "clamp", "(", "x", ",", "min", "=", "-", "1", ",", "max", "=", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.LIQ.normalization_on_activations": [[14, 18], ["torch.clamp", "torch.clamp"], "function", ["None"], ["", "def", "normalization_on_activations", "(", "x", ",", "clip_value", ")", ":", "\n", "    ", "x", "=", "x", "/", "clip_value", "\n", "x", "=", "torch", ".", "clamp", "(", "x", ",", "min", "=", "0", ",", "max", "=", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.LIQ.quantize_activation": [[20, 27], ["LIQ.normalization_on_activations", "common.quantization"], "function", ["home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.dorefa.normalization_on_activations", "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.dorefa.quantization"], ["", "def", "quantize_activation", "(", "x", ",", "k", ",", "clip_value", ")", ":", "\n", "    ", "if", "k", "==", "32", ":", "\n", "        ", "return", "x", "\n", "", "x", "=", "normalization_on_activations", "(", "x", ",", "clip_value", ")", "\n", "x", "=", "quantization", "(", "x", ",", "k", ")", "\n", "x", "=", "x", "*", "clip_value", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.LIQ.quantize_weight": [[29, 38], ["LIQ.normalization_on_weights", "common.quantization"], "function", ["home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.dorefa.normalization_on_weights", "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.dorefa.quantization"], ["", "def", "quantize_weight", "(", "x", ",", "k", ",", "clip_value", ")", ":", "\n", "    ", "if", "k", "==", "32", ":", "\n", "        ", "return", "x", "\n", "", "x", "=", "normalization_on_weights", "(", "x", ",", "clip_value", ")", "\n", "x", "=", "(", "x", "+", "1.0", ")", "/", "2.0", "\n", "x", "=", "quantization", "(", "x", ",", "k", ")", "\n", "x", "=", "x", "*", "2.0", "-", "1.0", "\n", "x", "=", "x", "*", "clip_value", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.pact.RoundFunction.forward": [[42, 45], ["torch.round", "torch.round", "torch.round", "torch.round"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ",", "n", ")", ":", "\n", "        ", "return", "torch", ".", "round", "(", "x", "*", "n", ")", "/", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.pact.RoundFunction.backward": [[46, 49], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "return", "grad_output", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.pact.QConv2d.__init__": [[56, 83], ["torch.Conv2d.__init__", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "True", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", "QConv2d", ",", "self", ")", ".", "__init__", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "dilation", ",", "\n", "groups", ",", "\n", "bias", ",", "\n", ")", "\n", "self", ".", "clip_value", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "[", "1", "]", ")", ")", "\n", "self", ".", "bits_weights", "=", "bits_weights", "\n", "self", ".", "bits_activations", "=", "bits_activations", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.pact.QConv2d.forward": [[84, 99], ["pact.quantize_activation", "pact.quantize_weight", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.dorefa.quantize_activation", "home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQLinear.quantize_weight"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "quantized_input", "=", "quantize_activation", "(", "\n", "input", ",", "self", ".", "bits_activations", ",", "self", ".", "clip_value", "\n", ")", "\n", "quantized_weight", "=", "quantize_weight", "(", "self", ".", "weight", ",", "self", ".", "bits_weights", ")", "\n", "output", "=", "F", ".", "conv2d", "(", "\n", "quantized_input", ",", "\n", "quantized_weight", ",", "\n", "self", ".", "bias", ",", "\n", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "\n", "self", ".", "dilation", ",", "\n", "self", ".", "groups", ",", "\n", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.pact.QConv2d.extra_repr": [[100, 106], ["super().extra_repr"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQLinear.extra_repr"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "s", "=", "super", "(", ")", ".", "extra_repr", "(", ")", "\n", "s", "+=", "\", bits_weights={}\"", ".", "format", "(", "self", ".", "bits_weights", ")", "\n", "s", "+=", "\", bits_activations={}\"", ".", "format", "(", "self", ".", "bits_activations", ")", "\n", "s", "+=", "\", method={}\"", ".", "format", "(", "\"pact_conv\"", ")", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.pact.QLinear.__init__": [[113, 126], ["torch.Linear.__init__", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_features", ",", "\n", "out_features", ",", "\n", "bias", "=", "True", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", "QLinear", ",", "self", ")", ".", "__init__", "(", "in_features", ",", "out_features", ",", "bias", "=", "bias", ")", "\n", "self", ".", "clip_value", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "[", "1", "]", ")", ")", "\n", "self", ".", "bits_weights", "=", "bits_weights", "\n", "self", ".", "bits_activations", "=", "bits_activations", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.pact.QLinear.forward": [[127, 134], ["pact.quantize_activation", "pact.quantize_weight", "torch.nn.functional.linear", "torch.nn.functional.linear", "pact.QLinear.clip_value.abs"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.dorefa.quantize_activation", "home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQLinear.quantize_weight", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.linear", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.linear"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "quantized_input", "=", "quantize_activation", "(", "\n", "input", ",", "self", ".", "bits_activations", ",", "self", ".", "clip_value", ".", "abs", "(", ")", "\n", ")", "\n", "quantized_weight", "=", "quantize_weight", "(", "self", ".", "weight", ",", "self", ".", "bits_weights", ")", "\n", "output", "=", "F", ".", "linear", "(", "quantized_input", ",", "quantized_weight", ",", "self", ".", "bias", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.pact.QLinear.extra_repr": [[135, 141], ["super().extra_repr"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQLinear.extra_repr"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "s", "=", "super", "(", ")", ".", "extra_repr", "(", ")", "\n", "s", "+=", "\", bits_weights={}\"", ".", "format", "(", "self", ".", "bits_weights", ")", "\n", "s", "+=", "\", bits_activations={}\"", ".", "format", "(", "self", ".", "bits_activations", ")", "\n", "s", "+=", "\", method={}\"", ".", "format", "(", "\"pact_linear\"", ")", "\n", "return", "s", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.pact.quantization": [[7, 10], ["RoundFunction.apply"], "function", ["None"], ["def", "quantization", "(", "x", ",", "k", ")", ":", "\n", "    ", "n", "=", "2", "**", "k", "-", "1", "\n", "return", "RoundFunction", ".", "apply", "(", "x", ",", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.pact.normalization_on_weights": [[12, 16], ["torch.tanh", "torch.tanh", "torch.max", "torch.max", "torch.abs", "torch.abs"], "function", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.SmoothedValue.max"], ["", "def", "normalization_on_weights", "(", "x", ")", ":", "\n", "    ", "x", "=", "torch", ".", "tanh", "(", "x", ")", "\n", "x", "=", "x", "/", "torch", ".", "max", "(", "torch", ".", "abs", "(", "x", ")", ")", "*", "0.5", "+", "0.5", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.pact.normalization_on_activations": [[18, 23], ["torch.nn.functional.relu", "torch.where", "torch.where"], "function", ["None"], ["", "def", "normalization_on_activations", "(", "x", ",", "clip_value", ")", ":", "\n", "    ", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "torch", ".", "where", "(", "x", "<", "clip_value", ",", "x", ",", "clip_value", ")", "\n", "# y = torch.clamp(x, max=clip_value)", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.pact.quantize_activation": [[25, 31], ["pact.normalization_on_activations", "pact.quantization"], "function", ["home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.dorefa.normalization_on_activations", "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.dorefa.quantization"], ["", "def", "quantize_activation", "(", "x", ",", "k", ",", "clip_value", ")", ":", "\n", "    ", "if", "k", "==", "32", ":", "\n", "        ", "return", "x", "\n", "", "x", "=", "normalization_on_activations", "(", "x", ",", "clip_value", ")", "\n", "x", "=", "quantization", "(", "x", ",", "k", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.pact.quantize_weight": [[33, 39], ["pact.normalization_on_weights", "pact.quantization"], "function", ["home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.dorefa.normalization_on_weights", "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.dorefa.quantization"], ["", "def", "quantize_weight", "(", "x", ",", "k", ")", ":", "\n", "    ", "if", "k", "==", "32", ":", "\n", "        ", "return", "x", "\n", "", "x", "=", "normalization_on_weights", "(", "x", ")", "\n", "x", "=", "2", "*", "quantization", "(", "x", ",", "k", ")", "-", "1", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qmodel_analyse.QModelAnalyse.__init__": [[12, 27], ["core.model_transform.list2sequential"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.model_transform.list2sequential"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "logger", ")", ":", "\n", "        ", "self", ".", "model", "=", "mt", ".", "list2sequential", "(", "model", ")", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "weight_memory_footprint", "=", "[", "]", "\n", "self", ".", "activation_memory_footprint", "=", "[", "]", "\n", "self", ".", "memory_footprint", "=", "[", "]", "\n", "self", ".", "bops", "=", "[", "]", "\n", "self", ".", "weight_shapes", "=", "[", "]", "\n", "self", ".", "layer_names", "=", "[", "]", "\n", "self", ".", "filter_nums", "=", "[", "]", "\n", "self", ".", "bias_shapes", "=", "[", "]", "\n", "self", ".", "input_shapes", "=", "[", "]", "\n", "self", ".", "output_shapes", "=", "[", "]", "\n", "self", ".", "bits_weights", "=", "[", "]", "\n", "self", ".", "bits_activations", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qmodel_analyse.QModelAnalyse._qconv_hook": [[28, 34], ["isinstance"], "methods", ["None"], ["", "def", "_qconv_hook", "(", "self", ",", "layer", ",", "x", ",", "out", ")", ":", "\n", "        ", "if", "isinstance", "(", "out", ",", "tuple", ")", ":", "\n", "            ", "layer", ".", "out_shape", "=", "out", "[", "0", "]", ".", "shape", "\n", "", "else", ":", "\n", "            ", "layer", ".", "out_shape", "=", "out", ".", "shape", "\n", "", "layer", ".", "in_shape", "=", "x", "[", "0", "]", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qmodel_analyse.QModelAnalyse._qconv_compute_bops": [[35, 78], ["hasattr", "hasattr", "layer_name.replace.replace.replace", "tools.compute_bops", "qmodel_analyse.QModelAnalyse.layer_names.append", "qmodel_analyse.QModelAnalyse.weight_shapes.append", "qmodel_analyse.QModelAnalyse.output_shapes.append", "qmodel_analyse.QModelAnalyse.filter_nums.append", "qmodel_analyse.QModelAnalyse.bits_weights.append", "qmodel_analyse.QModelAnalyse.bits_activations.append", "qmodel_analyse.QModelAnalyse.bops.append", "hasattr", "hasattr", "list", "list", "qmodel_analyse.QModelAnalyse.bias_shapes.append", "qmodel_analyse.QModelAnalyse.bias_shapes.append", "list"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.tools.compute_bops"], ["", "def", "_qconv_compute_bops", "(", "self", ",", "layer", ")", ":", "\n", "        ", "_", ",", "_", ",", "h", ",", "w", "=", "layer", ".", "out_shape", "\n", "\n", "bits_weight", "=", "32", "\n", "bits_activation", "=", "32", "\n", "if", "hasattr", "(", "layer", ",", "\"current_bit_weights\"", ")", ":", "\n", "            ", "bits_weight", "=", "layer", ".", "current_bit_weights", "\n", "", "elif", "hasattr", "(", "layer", ",", "\"bits_weights\"", ")", ":", "\n", "            ", "bits_weight", "=", "layer", ".", "bits_weights", "\n", "\n", "", "if", "hasattr", "(", "layer", ",", "\"current_bit_activations\"", ")", ":", "\n", "            ", "bits_activation", "=", "layer", ".", "current_bit_activations", "\n", "", "elif", "hasattr", "(", "layer", ",", "\"bits_activations\"", ")", ":", "\n", "            ", "bits_activation", "=", "layer", ".", "bits_activations", "\n", "\n", "", "layer_name", "=", "layer", ".", "layer_name", "\n", "layer_name", "=", "layer_name", ".", "replace", "(", "\"module.\"", ",", "\"\"", ")", "\n", "if", "layer_name", "==", "\"conv\"", "or", "layer_name", "==", "\"conv1\"", ":", "\n", "            ", "if", "bits_weight", "!=", "32", ":", "\n", "                ", "bits_activation", "=", "8", "\n", "\n", "", "", "bop", "=", "compute_bops", "(", "\n", "layer", ".", "kernel_size", "[", "0", "]", ",", "\n", "layer", ".", "in_channels", ",", "\n", "layer", ".", "out_channels", "//", "layer", ".", "groups", ",", "\n", "h", ",", "\n", "w", ",", "\n", "bits_weight", ",", "\n", "bits_activation", ",", "\n", ")", "\n", "\n", "layer_name", "=", "layer", ".", "layer_name", "\n", "self", ".", "layer_names", ".", "append", "(", "layer_name", ")", "\n", "self", ".", "weight_shapes", ".", "append", "(", "list", "(", "layer", ".", "weight", ".", "shape", ")", ")", "\n", "self", ".", "output_shapes", ".", "append", "(", "list", "(", "layer", ".", "out_shape", ")", ")", "\n", "self", ".", "filter_nums", ".", "append", "(", "layer", ".", "out_channels", ")", "\n", "self", ".", "bits_weights", ".", "append", "(", "bits_weight", ")", "\n", "self", ".", "bits_activations", ".", "append", "(", "bits_activation", ")", "\n", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias_shapes", ".", "append", "(", "list", "(", "layer", ".", "bias", ".", "shape", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bias_shapes", ".", "append", "(", "[", "0", "]", ")", "\n", "", "self", ".", "bops", ".", "append", "(", "bop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qmodel_analyse.QModelAnalyse._qconv_compute_memory_footprint": [[79, 126], ["hasattr", "hasattr", "tools.compute_memory_footprint", "tools.compute_memory_footprint", "qmodel_analyse.QModelAnalyse.layer_names.append", "qmodel_analyse.QModelAnalyse.weight_shapes.append", "qmodel_analyse.QModelAnalyse.input_shapes.append", "qmodel_analyse.QModelAnalyse.output_shapes.append", "qmodel_analyse.QModelAnalyse.filter_nums.append", "qmodel_analyse.QModelAnalyse.bits_weights.append", "qmodel_analyse.QModelAnalyse.bits_activations.append", "qmodel_analyse.QModelAnalyse.activation_memory_footprint.append", "qmodel_analyse.QModelAnalyse.weight_memory_footprint.append", "qmodel_analyse.QModelAnalyse.memory_footprint.append", "hasattr", "hasattr", "list", "list", "list", "qmodel_analyse.QModelAnalyse.bias_shapes.append", "qmodel_analyse.QModelAnalyse.bias_shapes.append", "list"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.tools.compute_memory_footprint", "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.tools.compute_memory_footprint"], ["", "def", "_qconv_compute_memory_footprint", "(", "self", ",", "layer", ")", ":", "\n", "        ", "n", ",", "c", ",", "h", ",", "w", "=", "layer", ".", "in_shape", "\n", "\n", "bits_weight", "=", "32", "\n", "bits_activation", "=", "32", "\n", "if", "hasattr", "(", "layer", ",", "\"current_bit_weights\"", ")", ":", "\n", "            ", "bits_weight", "=", "layer", ".", "current_bit_weights", "\n", "", "elif", "hasattr", "(", "layer", ",", "\"bits_weights\"", ")", ":", "\n", "            ", "bits_weight", "=", "layer", ".", "bits_weights", "\n", "\n", "", "if", "hasattr", "(", "layer", ",", "\"current_bit_activations\"", ")", ":", "\n", "            ", "bits_activation", "=", "layer", ".", "current_bit_activations", "\n", "", "elif", "hasattr", "(", "layer", ",", "\"bits_activations\"", ")", ":", "\n", "            ", "bits_activation", "=", "layer", ".", "bits_activations", "\n", "\n", "", "if", "layer", ".", "layer_name", "==", "\"conv\"", "or", "layer", ".", "layer_name", "==", "\"conv1\"", ":", "\n", "            ", "if", "bits_weight", "!=", "32", ":", "\n", "                ", "bits_activation", "=", "8", "\n", "\n", "", "", "activation_memory_footprint", "=", "compute_memory_footprint", "(", "\n", "n", ",", "c", ",", "h", ",", "w", ",", "bits_activation", "\n", ")", "\n", "weight_memory_footprint", "=", "compute_memory_footprint", "(", "\n", "layer", ".", "weight", ".", "shape", "[", "0", "]", ",", "\n", "layer", ".", "weight", ".", "shape", "[", "1", "]", ",", "\n", "layer", ".", "weight", ".", "shape", "[", "2", "]", ",", "\n", "layer", ".", "weight", ".", "shape", "[", "3", "]", ",", "\n", "bits_weight", ",", "\n", ")", "\n", "\n", "memory_footprint", "=", "activation_memory_footprint", "+", "weight_memory_footprint", "\n", "\n", "layer_name", "=", "layer", ".", "layer_name", "\n", "self", ".", "layer_names", ".", "append", "(", "layer_name", ")", "\n", "self", ".", "weight_shapes", ".", "append", "(", "list", "(", "layer", ".", "weight", ".", "shape", ")", ")", "\n", "self", ".", "input_shapes", ".", "append", "(", "list", "(", "layer", ".", "in_shape", ")", ")", "\n", "self", ".", "output_shapes", ".", "append", "(", "list", "(", "layer", ".", "out_shape", ")", ")", "\n", "self", ".", "filter_nums", ".", "append", "(", "layer", ".", "out_channels", ")", "\n", "self", ".", "bits_weights", ".", "append", "(", "bits_weight", ")", "\n", "self", ".", "bits_activations", ".", "append", "(", "bits_activation", ")", "\n", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias_shapes", ".", "append", "(", "list", "(", "layer", ".", "bias", ".", "shape", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bias_shapes", ".", "append", "(", "[", "0", "]", ")", "\n", "", "self", ".", "activation_memory_footprint", ".", "append", "(", "activation_memory_footprint", ")", "\n", "self", ".", "weight_memory_footprint", ".", "append", "(", "weight_memory_footprint", ")", "\n", "self", ".", "memory_footprint", ".", "append", "(", "memory_footprint", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qmodel_analyse.QModelAnalyse._qlinear_hook": [[127, 130], ["None"], "methods", ["None"], ["", "def", "_qlinear_hook", "(", "self", ",", "layer", ",", "x", ",", "out", ")", ":", "\n", "        ", "layer", ".", "in_shape", "=", "x", "[", "0", "]", ".", "shape", "\n", "layer", ".", "out_shape", "=", "out", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qmodel_analyse.QModelAnalyse._qlinear_compute_bops": [[131, 160], ["hasattr", "hasattr", "tools.compute_bops", "qmodel_analyse.QModelAnalyse.layer_names.append", "qmodel_analyse.QModelAnalyse.weight_shapes.append", "qmodel_analyse.QModelAnalyse.output_shapes.append", "qmodel_analyse.QModelAnalyse.filter_nums.append", "qmodel_analyse.QModelAnalyse.bits_weights.append", "qmodel_analyse.QModelAnalyse.bits_activations.append", "qmodel_analyse.QModelAnalyse.bops.append", "hasattr", "hasattr", "list", "list", "qmodel_analyse.QModelAnalyse.bias_shapes.append", "qmodel_analyse.QModelAnalyse.bias_shapes.append", "list"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.tools.compute_bops"], ["", "def", "_qlinear_compute_bops", "(", "self", ",", "layer", ")", ":", "\n", "        ", "bits_weight", "=", "32", "\n", "bits_activation", "=", "32", "\n", "if", "hasattr", "(", "layer", ",", "\"current_bit_weights\"", ")", ":", "\n", "            ", "bits_weight", "=", "layer", ".", "current_bit_weights", "\n", "", "elif", "hasattr", "(", "layer", ",", "\"bits_weights\"", ")", ":", "\n", "            ", "bits_weight", "=", "layer", ".", "bits_weights", "\n", "\n", "", "if", "hasattr", "(", "layer", ",", "\"current_bit_activations\"", ")", ":", "\n", "            ", "bits_activation", "=", "layer", ".", "current_bit_activations", "\n", "", "elif", "hasattr", "(", "layer", ",", "\"bits_activations\"", ")", ":", "\n", "            ", "bits_activation", "=", "layer", ".", "bits_activations", "\n", "\n", "", "bop", "=", "compute_bops", "(", "\n", "1", ",", "layer", ".", "in_features", ",", "layer", ".", "out_features", ",", "1", ",", "1", ",", "bits_weight", ",", "bits_activation", "\n", ")", "\n", "\n", "layer_name", "=", "layer", ".", "layer_name", "\n", "self", ".", "layer_names", ".", "append", "(", "layer_name", ")", "\n", "self", ".", "weight_shapes", ".", "append", "(", "list", "(", "layer", ".", "weight", ".", "shape", ")", ")", "\n", "self", ".", "output_shapes", ".", "append", "(", "list", "(", "layer", ".", "out_shape", ")", ")", "\n", "self", ".", "filter_nums", ".", "append", "(", "layer", ".", "out_shape", "[", "0", "]", ")", "\n", "self", ".", "bits_weights", ".", "append", "(", "bits_weight", ")", "\n", "self", ".", "bits_activations", ".", "append", "(", "bits_activation", ")", "\n", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias_shapes", ".", "append", "(", "list", "(", "layer", ".", "bias", ".", "shape", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bias_shapes", ".", "append", "(", "[", "0", "]", ")", "\n", "", "self", ".", "bops", ".", "append", "(", "bop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qmodel_analyse.QModelAnalyse._qlinear_compute_memory_footprint": [[161, 199], ["hasattr", "hasattr", "tools.compute_memory_footprint", "tools.compute_memory_footprint", "qmodel_analyse.QModelAnalyse.layer_names.append", "qmodel_analyse.QModelAnalyse.weight_shapes.append", "qmodel_analyse.QModelAnalyse.input_shapes.append", "qmodel_analyse.QModelAnalyse.output_shapes.append", "qmodel_analyse.QModelAnalyse.filter_nums.append", "qmodel_analyse.QModelAnalyse.bits_weights.append", "qmodel_analyse.QModelAnalyse.bits_activations.append", "qmodel_analyse.QModelAnalyse.activation_memory_footprint.append", "qmodel_analyse.QModelAnalyse.weight_memory_footprint.append", "qmodel_analyse.QModelAnalyse.memory_footprint.append", "hasattr", "hasattr", "list", "list", "list", "qmodel_analyse.QModelAnalyse.bias_shapes.append", "qmodel_analyse.QModelAnalyse.bias_shapes.append", "list"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.tools.compute_memory_footprint", "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.tools.compute_memory_footprint"], ["", "def", "_qlinear_compute_memory_footprint", "(", "self", ",", "layer", ")", ":", "\n", "        ", "n", ",", "c", "=", "layer", ".", "in_shape", "\n", "\n", "bits_weight", "=", "32", "\n", "bits_activation", "=", "32", "\n", "if", "hasattr", "(", "layer", ",", "\"current_bit_weights\"", ")", ":", "\n", "            ", "bits_weight", "=", "layer", ".", "current_bit_weights", "\n", "", "elif", "hasattr", "(", "layer", ",", "\"bits_weights\"", ")", ":", "\n", "            ", "bits_weight", "=", "layer", ".", "bits_weights", "\n", "\n", "", "if", "hasattr", "(", "layer", ",", "\"current_bit_activations\"", ")", ":", "\n", "            ", "bits_activation", "=", "layer", ".", "current_bit_activations", "\n", "", "elif", "hasattr", "(", "layer", ",", "\"bits_activations\"", ")", ":", "\n", "            ", "bits_activation", "=", "layer", ".", "bits_activations", "\n", "\n", "", "activation_memory_footprint", "=", "compute_memory_footprint", "(", "\n", "n", ",", "c", ",", "1", ",", "1", ",", "bits_activation", "\n", ")", "\n", "weight_memory_footprint", "=", "compute_memory_footprint", "(", "\n", "layer", ".", "weight", ".", "shape", "[", "0", "]", ",", "layer", ".", "weight", ".", "shape", "[", "1", "]", ",", "1", ",", "1", ",", "bits_weight", "\n", ")", "\n", "memory_footprint", "=", "activation_memory_footprint", "+", "weight_memory_footprint", "\n", "\n", "layer_name", "=", "layer", ".", "layer_name", "\n", "self", ".", "layer_names", ".", "append", "(", "layer_name", ")", "\n", "self", ".", "weight_shapes", ".", "append", "(", "list", "(", "layer", ".", "weight", ".", "shape", ")", ")", "\n", "self", ".", "input_shapes", ".", "append", "(", "list", "(", "layer", ".", "in_shape", ")", ")", "\n", "self", ".", "output_shapes", ".", "append", "(", "list", "(", "layer", ".", "out_shape", ")", ")", "\n", "self", ".", "filter_nums", ".", "append", "(", "layer", ".", "out_shape", "[", "0", "]", ")", "\n", "self", ".", "bits_weights", ".", "append", "(", "bits_weight", ")", "\n", "self", ".", "bits_activations", ".", "append", "(", "bits_activation", ")", "\n", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias_shapes", ".", "append", "(", "list", "(", "layer", ".", "bias", ".", "shape", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bias_shapes", ".", "append", "(", "[", "0", "]", ")", "\n", "", "self", ".", "activation_memory_footprint", ".", "append", "(", "activation_memory_footprint", ")", "\n", "self", ".", "weight_memory_footprint", ".", "append", "(", "weight_memory_footprint", ")", "\n", "self", ".", "memory_footprint", ".", "append", "(", "memory_footprint", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qmodel_analyse.QModelAnalyse.register_hook": [[200, 207], ["qmodel_analyse.QModelAnalyse.model.named_modules", "isinstance", "hook_list.append", "isinstance", "layer.register_forward_hook", "hook_list.append", "layer.register_forward_hook"], "methods", ["None"], ["", "def", "register_hook", "(", "self", ",", "hook_list", ")", ":", "\n", "        ", "for", "layer_name", ",", "layer", "in", "self", ".", "model", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "hook_list", ".", "append", "(", "layer", ".", "register_forward_hook", "(", "self", ".", "_qconv_hook", ")", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "hook_list", ".", "append", "(", "layer", ".", "register_forward_hook", "(", "self", ".", "_qlinear_hook", ")", ")", "\n", "", "layer", ".", "layer_name", "=", "layer_name", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qmodel_analyse.QModelAnalyse.reset": [[208, 221], ["None"], "methods", ["None"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "weight_memory_footprint", "=", "[", "]", "\n", "self", ".", "activation_memory_footprint", "=", "[", "]", "\n", "self", ".", "memory_footprint", "=", "[", "]", "\n", "self", ".", "bops", "=", "[", "]", "\n", "self", ".", "weight_shapes", "=", "[", "]", "\n", "self", ".", "layer_names", "=", "[", "]", "\n", "self", ".", "filter_nums", "=", "[", "]", "\n", "self", ".", "bias_shapes", "=", "[", "]", "\n", "self", ".", "input_shapes", "=", "[", "]", "\n", "self", ".", "output_shapes", "=", "[", "]", "\n", "self", ".", "bits_weights", "=", "[", "]", "\n", "self", ".", "bits_activations", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qmodel_analyse.QModelAnalyse.compute_network_bops": [[222, 235], ["qmodel_analyse.QModelAnalyse.reset", "qmodel_analyse.QModelAnalyse.model.modules", "numpy.array", "float", "isinstance", "numpy.array.sum", "qmodel_analyse.QModelAnalyse._qconv_compute_bops", "isinstance", "qmodel_analyse.QModelAnalyse._qlinear_compute_bops"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qmodel_analyse.QModelAnalyse.reset", "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qmodel_analyse.QModelAnalyse._qconv_compute_bops", "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qmodel_analyse.QModelAnalyse._qlinear_compute_bops"], ["", "def", "compute_network_bops", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n", "# compute bops", "\n", "for", "layer", "in", "self", ".", "model", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "self", ".", "_qconv_compute_bops", "(", "layer", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "self", ".", "_qlinear_compute_bops", "(", "layer", ")", "\n", "\n", "", "", "bops_np", "=", "np", ".", "array", "(", "self", ".", "bops", ")", "\n", "bops_sum", "=", "float", "(", "bops_np", ".", "sum", "(", ")", ")", "\n", "return", "bops_sum", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qmodel_analyse.QModelAnalyse.bops_compute": [[236, 248], ["qmodel_analyse.QModelAnalyse.register_hook", "qmodel_analyse.QModelAnalyse.model.eval", "qmodel_analyse.QModelAnalyse.model", "qmodel_analyse.QModelAnalyse.compute_network_bops", "hook.remove"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qmodel_analyse.QModelAnalyse.register_hook", "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qmodel_analyse.QModelAnalyse.compute_network_bops"], ["", "def", "bops_compute", "(", "self", ",", "x", ")", ":", "\n", "        ", "hook_list", "=", "[", "]", "\n", "self", ".", "register_hook", "(", "hook_list", ")", "\n", "\n", "# run forward for computing BOPs", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "model", "(", "x", ")", "\n", "\n", "bops_sum", "=", "self", ".", "compute_network_bops", "(", ")", "\n", "for", "hook", "in", "hook_list", ":", "\n", "            ", "hook", ".", "remove", "(", ")", "\n", "", "return", "bops_sum", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qmodel_analyse.QModelAnalyse.bops_compute_logger": [[249, 296], ["qmodel_analyse.QModelAnalyse.register_hook", "qmodel_analyse.QModelAnalyse.model.eval", "qmodel_analyse.QModelAnalyse.model", "qmodel_analyse.QModelAnalyse.compute_network_bops", "numpy.array", "float", "prettytable.PrettyTable", "qmodel_analyse.QModelAnalyse.logger.info", "range", "qmodel_analyse.QModelAnalyse.logger.info", "qmodel_analyse.QModelAnalyse.logger.info", "numpy.array.sum", "len", "prettytable.PrettyTable.add_row", "hook.remove"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qmodel_analyse.QModelAnalyse.register_hook", "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qmodel_analyse.QModelAnalyse.compute_network_bops"], ["", "def", "bops_compute_logger", "(", "self", ",", "x", ")", ":", "\n", "        ", "hook_list", "=", "[", "]", "\n", "self", ".", "register_hook", "(", "hook_list", ")", "\n", "\n", "# run forward for computing BOPs", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "model", "(", "x", ")", "\n", "\n", "self", ".", "compute_network_bops", "(", ")", "\n", "bops_np", "=", "np", ".", "array", "(", "self", ".", "bops", ")", "\n", "bops_sum", "=", "float", "(", "bops_np", ".", "sum", "(", ")", ")", "\n", "percentage", "=", "bops_np", "/", "bops_sum", "\n", "\n", "output", "=", "PrettyTable", "(", ")", "\n", "output", ".", "field_names", "=", "[", "\n", "\"Layer\"", ",", "\n", "\"Weight Shape\"", ",", "\n", "\"#Filters\"", ",", "\n", "\"Bias Shape\"", ",", "\n", "\"Output Shape\"", ",", "\n", "\"BOPs\"", ",", "\n", "\"Percentage\"", ",", "\n", "\"BitW\"", ",", "\n", "\"BitA\"", ",", "\n", "]", "\n", "\n", "self", ".", "logger", ".", "info", "(", "\"------------------------BOPs------------------------\\n\"", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "bops", ")", ")", ":", "\n", "            ", "output", ".", "add_row", "(", "\n", "[", "\n", "self", ".", "layer_names", "[", "i", "]", ",", "\n", "self", ".", "weight_shapes", "[", "i", "]", ",", "\n", "self", ".", "filter_nums", "[", "i", "]", ",", "\n", "self", ".", "bias_shapes", "[", "i", "]", ",", "\n", "self", ".", "output_shapes", "[", "i", "]", ",", "\n", "bops_np", "[", "i", "]", ",", "\n", "percentage", "[", "i", "]", ",", "\n", "self", ".", "bits_weights", "[", "i", "]", ",", "\n", "self", ".", "bits_activations", "[", "i", "]", ",", "\n", "]", "\n", ")", "\n", "", "self", ".", "logger", ".", "info", "(", "output", ")", "\n", "repo_str", "=", "\"|===>Total BOPs: {:f} MBOPs\"", ".", "format", "(", "bops_sum", "/", "1e6", ")", "\n", "self", ".", "logger", ".", "info", "(", "repo_str", ")", "\n", "\n", "for", "hook", "in", "hook_list", ":", "\n", "            ", "hook", ".", "remove", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qmodel_analyse.QModelAnalyse.compute_network_memory_footprint": [[297, 315], ["qmodel_analyse.QModelAnalyse.reset", "qmodel_analyse.QModelAnalyse.model.modules", "numpy.array", "float", "numpy.array", "float", "float", "isinstance", "numpy.array.sum", "numpy.array.sum", "numpy.array.max", "qmodel_analyse.QModelAnalyse._qconv_compute_memory_footprint", "isinstance", "qmodel_analyse.QModelAnalyse._qlinear_compute_memory_footprint"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qmodel_analyse.QModelAnalyse.reset", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qmodel_analyse.QModelAnalyse._qconv_compute_memory_footprint", "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qmodel_analyse.QModelAnalyse._qlinear_compute_memory_footprint"], ["", "", "def", "compute_network_memory_footprint", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n", "# compute bops", "\n", "for", "layer", "in", "self", ".", "model", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "self", ".", "_qconv_compute_memory_footprint", "(", "layer", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "self", ".", "_qlinear_compute_memory_footprint", "(", "layer", ")", "\n", "\n", "", "", "weight_footprint", "=", "np", ".", "array", "(", "self", ".", "weight_memory_footprint", ")", "\n", "weight_footprint_sum", "=", "float", "(", "weight_footprint", ".", "sum", "(", ")", ")", "\n", "activation_footprint", "=", "np", ".", "array", "(", "self", ".", "activation_memory_footprint", ")", "\n", "activation_footprint_sum", "=", "float", "(", "activation_footprint", ".", "sum", "(", ")", ")", "\n", "activation_footprint_max", "=", "float", "(", "activation_footprint", ".", "max", "(", ")", ")", "\n", "total_footprint", "=", "weight_footprint_sum", "+", "activation_footprint_sum", "\n", "total_footprint_max", "=", "weight_footprint_sum", "+", "activation_footprint_max", "\n", "return", "total_footprint", ",", "total_footprint_max", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qmodel_analyse.QModelAnalyse.memory_footprint_compute": [[316, 328], ["qmodel_analyse.QModelAnalyse.register_hook", "qmodel_analyse.QModelAnalyse.model.eval", "qmodel_analyse.QModelAnalyse.model", "qmodel_analyse.QModelAnalyse.compute_network_memory_footprint", "hook.remove"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qmodel_analyse.QModelAnalyse.register_hook", "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qmodel_analyse.QModelAnalyse.compute_network_memory_footprint"], ["", "def", "memory_footprint_compute", "(", "self", ",", "x", ")", ":", "\n", "        ", "hook_list", "=", "[", "]", "\n", "self", ".", "register_hook", "(", "hook_list", ")", "\n", "\n", "# run forward for computing BOPs", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "model", "(", "x", ")", "\n", "\n", "total_footprint", ",", "total_footprint_max", "=", "self", ".", "compute_network_memory_footprint", "(", ")", "\n", "for", "hook", "in", "hook_list", ":", "\n", "            ", "hook", ".", "remove", "(", ")", "\n", "", "return", "total_footprint", ",", "total_footprint_max", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qmodel_analyse.QModelAnalyse.memory_footprint_compute_logger": [[329, 396], ["qmodel_analyse.QModelAnalyse.register_hook", "qmodel_analyse.QModelAnalyse.model.eval", "qmodel_analyse.QModelAnalyse.model", "qmodel_analyse.QModelAnalyse.compute_network_memory_footprint", "numpy.array", "float", "numpy.array", "float", "float", "prettytable.PrettyTable", "qmodel_analyse.QModelAnalyse.logger.info", "range", "qmodel_analyse.QModelAnalyse.logger.info", "qmodel_analyse.QModelAnalyse.logger.info", "qmodel_analyse.QModelAnalyse.logger.info", "qmodel_analyse.QModelAnalyse.logger.info", "qmodel_analyse.QModelAnalyse.logger.info", "qmodel_analyse.QModelAnalyse.logger.info", "numpy.array.sum", "numpy.array.sum", "numpy.array.max", "len", "prettytable.PrettyTable.add_row", "hook.remove"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qmodel_analyse.QModelAnalyse.register_hook", "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qmodel_analyse.QModelAnalyse.compute_network_memory_footprint", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.SmoothedValue.max"], ["", "def", "memory_footprint_compute_logger", "(", "self", ",", "x", ")", ":", "\n", "        ", "hook_list", "=", "[", "]", "\n", "self", ".", "register_hook", "(", "hook_list", ")", "\n", "\n", "# run forward for computing BOPs", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "model", "(", "x", ")", "\n", "\n", "self", ".", "compute_network_memory_footprint", "(", ")", "\n", "weight_footprint", "=", "np", ".", "array", "(", "self", ".", "weight_memory_footprint", ")", "\n", "weight_footprint_sum", "=", "float", "(", "weight_footprint", ".", "sum", "(", ")", ")", "\n", "activation_footprint", "=", "np", ".", "array", "(", "self", ".", "activation_memory_footprint", ")", "\n", "activation_footprint_sum", "=", "float", "(", "activation_footprint", ".", "sum", "(", ")", ")", "\n", "activation_footprint_max", "=", "float", "(", "activation_footprint", ".", "max", "(", ")", ")", "\n", "total_footprint", "=", "weight_footprint_sum", "+", "activation_footprint_sum", "\n", "total_footprint_max", "=", "weight_footprint_sum", "+", "activation_footprint_max", "\n", "\n", "output", "=", "PrettyTable", "(", ")", "\n", "output", ".", "field_names", "=", "[", "\n", "\"Layer\"", ",", "\n", "\"Weight Shape\"", ",", "\n", "\"#Filters\"", ",", "\n", "\"Bias Shape\"", ",", "\n", "\"Input Shape\"", ",", "\n", "\"Weight Footprint\"", ",", "\n", "\"Activation Footprint\"", ",", "\n", "\"BitW\"", ",", "\n", "\"BitA\"", ",", "\n", "]", "\n", "\n", "self", ".", "logger", ".", "info", "(", "\"------------------------BOPs------------------------\\n\"", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "weight_memory_footprint", ")", ")", ":", "\n", "            ", "output", ".", "add_row", "(", "\n", "[", "\n", "self", ".", "layer_names", "[", "i", "]", ",", "\n", "self", ".", "weight_shapes", "[", "i", "]", ",", "\n", "self", ".", "filter_nums", "[", "i", "]", ",", "\n", "self", ".", "bias_shapes", "[", "i", "]", ",", "\n", "self", ".", "input_shapes", "[", "i", "]", ",", "\n", "weight_footprint", "[", "i", "]", ",", "\n", "activation_footprint", "[", "i", "]", ",", "\n", "self", ".", "bits_weights", "[", "i", "]", ",", "\n", "self", ".", "bits_activations", "[", "i", "]", ",", "\n", "]", "\n", ")", "\n", "", "self", ".", "logger", ".", "info", "(", "output", ")", "\n", "repo_str", "=", "\"|===>Total Weight Footprint: {:f} KB\"", ".", "format", "(", "\n", "weight_footprint_sum", "/", "8", "/", "1e3", "\n", ")", "\n", "self", ".", "logger", ".", "info", "(", "repo_str", ")", "\n", "repo_str", "=", "\"|===>Total Activation Footprint: {:f} KB\"", ".", "format", "(", "\n", "activation_footprint_sum", "/", "8", "/", "1e3", "\n", ")", "\n", "self", ".", "logger", ".", "info", "(", "repo_str", ")", "\n", "repo_str", "=", "\"|===>Total Activation Max Footprint: {:f} KB\"", ".", "format", "(", "\n", "activation_footprint_max", "/", "8", "/", "1e3", "\n", ")", "\n", "self", ".", "logger", ".", "info", "(", "repo_str", ")", "\n", "repo_str", "=", "\"|===>Total Footprint: {:f} KB\"", ".", "format", "(", "total_footprint", "/", "8", "/", "1e3", ")", "\n", "self", ".", "logger", ".", "info", "(", "repo_str", ")", "\n", "repo_str", "=", "\"|===>Total Footprint Max: {:f} KB\"", ".", "format", "(", "\n", "total_footprint_max", "/", "8", "/", "1e3", "\n", ")", "\n", "self", ".", "logger", ".", "info", "(", "repo_str", ")", "\n", "\n", "for", "hook", "in", "hook_list", ":", "\n", "            ", "hook", ".", "remove", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qmobilenetv2_cifar.QMobileNetV2CifarBlock.__init__": [[21, 84], ["torch.Module.__init__", "conv_type", "torch.BatchNorm2d", "torch.BatchNorm2d", "conv_type", "torch.BatchNorm2d", "torch.BatchNorm2d", "conv_type", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "conv_type", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "expansion", ",", "\n", "stride", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "conv_type", "=", "LIQ", ".", "QConv2d", ",", "\n", ")", ":", "\n", "        ", "super", "(", "QMobileNetV2CifarBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "planes", "=", "expansion", "*", "in_planes", "\n", "self", ".", "conv1", "=", "conv_type", "(", "\n", "in_planes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv_type", "(", "\n", "planes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "groups", "=", "planes", ",", "\n", "bias", "=", "False", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "conv_type", "(", "\n", "planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "==", "1", "and", "in_planes", "!=", "out_planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "conv_type", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qmobilenetv2_cifar.QMobileNetV2CifarBlock.forward": [[86, 92], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "qmobilenetv2_cifar.QMobileNetV2CifarBlock.bn3", "qmobilenetv2_cifar.QMobileNetV2CifarBlock.bn1", "qmobilenetv2_cifar.QMobileNetV2CifarBlock.bn2", "qmobilenetv2_cifar.QMobileNetV2CifarBlock.conv3", "qmobilenetv2_cifar.QMobileNetV2CifarBlock.conv1", "qmobilenetv2_cifar.QMobileNetV2CifarBlock.conv2", "qmobilenetv2_cifar.QMobileNetV2CifarBlock.shortcut"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "=", "out", "+", "self", ".", "shortcut", "(", "x", ")", "if", "self", ".", "stride", "==", "1", "else", "out", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qmobilenetv2_cifar.QMobileNetV2Cifar.__init__": [[106, 155], ["torch.Module.__init__", "tools.get_conv_fc_quan_type", "torch.BatchNorm2d", "torch.BatchNorm2d", "qmobilenetv2_cifar.QMobileNetV2Cifar._make_layers", "conv_type", "torch.BatchNorm2d", "torch.BatchNorm2d", "conv_type", "torch.Conv2d", "torch.Conv2d", "fc_type", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.__init__", "home.repos.pwc.inspect_result.zhuang-group_saq.models.tools.get_conv_fc_quan_type", "home.repos.pwc.inspect_result.zhuang-group_saq.models.mobilenetv2_cifar.MobileNetV2Cifar._make_layers"], ["def", "__init__", "(", "\n", "self", ",", "\n", "num_classes", "=", "10", ",", "\n", "quantize_first_last", "=", "False", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "quan_type", "=", "\"LIQ\"", ",", "\n", ")", ":", "\n", "        ", "super", "(", "QMobileNetV2Cifar", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# NOTE: change conv1 stride 2 -> 1 for CIFAR10", "\n", "\n", "conv_type", ",", "fc_type", "=", "get_conv_fc_quan_type", "(", "quan_type", ")", "\n", "if", "quantize_first_last", ":", "\n", "            ", "self", ".", "conv1", "=", "conv_type", "(", "\n", "3", ",", "\n", "32", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "bits_weights", "=", "8", ",", "\n", "bits_activations", "=", "32", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "3", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "layers", "=", "self", ".", "_make_layers", "(", "\n", "in_planes", "=", "32", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", "self", ".", "conv2", "=", "conv_type", "(", "\n", "320", ",", "\n", "1280", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "1280", ")", "\n", "if", "quantize_first_last", ":", "\n", "            ", "self", ".", "linear", "=", "fc_type", "(", "1280", ",", "num_classes", ",", "bits_weights", "=", "8", ",", "bits_activations", "=", "8", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "1280", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qmobilenetv2_cifar.QMobileNetV2Cifar._make_layers": [[156, 176], ["torch.Sequential", "torch.Sequential", "layers.append", "qmobilenetv2_cifar.QMobileNetV2CifarBlock"], "methods", ["None"], ["", "", "def", "_make_layers", "(", "\n", "self", ",", "in_planes", ",", "bits_weights", "=", "32", ",", "bits_activations", "=", "32", ",", "conv_type", "=", "LIQ", ".", "QConv2d", ",", "\n", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "expansion", ",", "out_planes", ",", "num_blocks", ",", "stride", "in", "self", ".", "cfg", ":", "\n", "            ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "for", "stride", "in", "strides", ":", "\n", "                ", "layers", ".", "append", "(", "\n", "QMobileNetV2CifarBlock", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "expansion", ",", "\n", "stride", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", ")", "\n", "in_planes", "=", "out_planes", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qmobilenetv2_cifar.QMobileNetV2Cifar.forward": [[177, 186], ["torch.relu", "torch.relu", "qmobilenetv2_cifar.QMobileNetV2Cifar.layers", "torch.relu", "torch.relu", "torch.avg_pool2d", "torch.avg_pool2d", "qmobilenetv2_cifar.QMobileNetV2Cifar.view", "qmobilenetv2_cifar.QMobileNetV2Cifar.linear", "qmobilenetv2_cifar.QMobileNetV2Cifar.bn1", "qmobilenetv2_cifar.QMobileNetV2Cifar.bn2", "qmobilenetv2_cifar.QMobileNetV2Cifar.size", "qmobilenetv2_cifar.QMobileNetV2Cifar.conv1", "qmobilenetv2_cifar.QMobileNetV2Cifar.conv2"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.linear"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layers", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "# NOTE: change pooling kernel_size 7 -> 4 for CIFAR10", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qmobilenetv2_cifar.qmobilenetv2_cifar": [[188, 193], ["qmobilenetv2_cifar.QMobileNetV2Cifar"], "function", ["None"], ["", "", "def", "qmobilenetv2_cifar", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a QMobileNetV2 Cifar model.\n    \"\"\"", "\n", "model", "=", "QMobileNetV2Cifar", "(", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.dorefa.RoundFunction.forward": [[42, 45], ["torch.round", "torch.round", "torch.round", "torch.round"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ",", "n", ")", ":", "\n", "        ", "return", "torch", ".", "round", "(", "x", "*", "n", ")", "/", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.dorefa.RoundFunction.backward": [[46, 49], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "return", "grad_output", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.dorefa.QConv2d.__init__": [[56, 82], ["torch.Conv2d.__init__"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "True", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", "QConv2d", ",", "self", ")", ".", "__init__", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "dilation", ",", "\n", "groups", ",", "\n", "bias", ",", "\n", ")", "\n", "self", ".", "bits_weights", "=", "bits_weights", "\n", "self", ".", "bits_activations", "=", "bits_activations", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.dorefa.QConv2d.forward": [[83, 96], ["dorefa.quantize_activation", "dorefa.quantize_weight", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.dorefa.quantize_activation", "home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQLinear.quantize_weight"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "quantized_input", "=", "quantize_activation", "(", "input", ",", "self", ".", "bits_activations", ",", "1.0", ")", "\n", "quantized_weight", "=", "quantize_weight", "(", "self", ".", "weight", ",", "self", ".", "bits_weights", ")", "\n", "output", "=", "F", ".", "conv2d", "(", "\n", "quantized_input", ",", "\n", "quantized_weight", ",", "\n", "self", ".", "bias", ",", "\n", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "\n", "self", ".", "dilation", ",", "\n", "self", ".", "groups", ",", "\n", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.dorefa.QConv2d.extra_repr": [[97, 103], ["super().extra_repr"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQLinear.extra_repr"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "s", "=", "super", "(", ")", ".", "extra_repr", "(", ")", "\n", "s", "+=", "\", bits_weights={}\"", ".", "format", "(", "self", ".", "bits_weights", ")", "\n", "s", "+=", "\", bits_activations={}\"", ".", "format", "(", "self", ".", "bits_activations", ")", "\n", "s", "+=", "\", method={}\"", ".", "format", "(", "\"pact_conv\"", ")", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.dorefa.QLinear.__init__": [[110, 122], ["torch.Linear.__init__"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_features", ",", "\n", "out_features", ",", "\n", "bias", "=", "True", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", "QLinear", ",", "self", ")", ".", "__init__", "(", "in_features", ",", "out_features", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bits_weights", "=", "bits_weights", "\n", "self", ".", "bits_activations", "=", "bits_activations", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.dorefa.QLinear.forward": [[123, 128], ["dorefa.quantize_activation", "dorefa.quantize_weight", "torch.nn.functional.linear", "torch.nn.functional.linear"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.dorefa.quantize_activation", "home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQLinear.quantize_weight", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.linear", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.linear"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "quantized_input", "=", "quantize_activation", "(", "input", ",", "self", ".", "bits_activations", ",", "1.0", ")", "\n", "quantized_weight", "=", "quantize_weight", "(", "self", ".", "weight", ",", "self", ".", "bits_weights", ")", "\n", "output", "=", "F", ".", "linear", "(", "quantized_input", ",", "quantized_weight", ",", "self", ".", "bias", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.dorefa.QLinear.extra_repr": [[129, 135], ["super().extra_repr"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQLinear.extra_repr"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "s", "=", "super", "(", ")", ".", "extra_repr", "(", ")", "\n", "s", "+=", "\", bits_weights={}\"", ".", "format", "(", "self", ".", "bits_weights", ")", "\n", "s", "+=", "\", bits_activations={}\"", ".", "format", "(", "self", ".", "bits_activations", ")", "\n", "s", "+=", "\", method={}\"", ".", "format", "(", "\"pact_linear\"", ")", "\n", "return", "s", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.dorefa.quantization": [[7, 10], ["RoundFunction.apply"], "function", ["None"], ["def", "quantization", "(", "x", ",", "k", ")", ":", "\n", "    ", "n", "=", "2", "**", "k", "-", "1", "\n", "return", "RoundFunction", ".", "apply", "(", "x", ",", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.dorefa.normalization_on_weights": [[12, 16], ["torch.tanh", "torch.tanh", "torch.max", "torch.max", "torch.abs", "torch.abs"], "function", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.SmoothedValue.max"], ["", "def", "normalization_on_weights", "(", "x", ")", ":", "\n", "    ", "x", "=", "torch", ".", "tanh", "(", "x", ")", "\n", "x", "=", "x", "/", "torch", ".", "max", "(", "torch", ".", "abs", "(", "x", ")", ")", "*", "0.5", "+", "0.5", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.dorefa.normalization_on_activations": [[18, 23], ["torch.nn.functional.relu", "torch.clamp", "torch.clamp"], "function", ["None"], ["", "def", "normalization_on_activations", "(", "x", ",", "clip_value", ")", ":", "\n", "    ", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "# x = torch.where(x < clip_value, x, clip_value)", "\n", "x", "=", "torch", ".", "clamp", "(", "x", ",", "max", "=", "clip_value", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.dorefa.quantize_activation": [[25, 31], ["dorefa.normalization_on_activations", "dorefa.quantization"], "function", ["home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.dorefa.normalization_on_activations", "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.dorefa.quantization"], ["", "def", "quantize_activation", "(", "x", ",", "k", ",", "clip_value", ")", ":", "\n", "    ", "if", "k", "==", "32", ":", "\n", "        ", "return", "x", "\n", "", "x", "=", "normalization_on_activations", "(", "x", ",", "clip_value", ")", "\n", "x", "=", "quantization", "(", "x", ",", "k", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.dorefa.quantize_weight": [[33, 39], ["dorefa.normalization_on_weights", "dorefa.quantization"], "function", ["home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.dorefa.normalization_on_weights", "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.dorefa.quantization"], ["", "def", "quantize_weight", "(", "x", ",", "k", ")", ":", "\n", "    ", "if", "k", "==", "32", ":", "\n", "        ", "return", "x", "\n", "", "x", "=", "normalization_on_weights", "(", "x", ")", "\n", "x", "=", "2", "*", "quantization", "(", "x", ",", "k", ")", "-", "1", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qmobilenetv2.QMobileBottleneck.__init__": [[95, 143], ["torch.Module.__init__", "qmobilenetv2.qdwconv3x3", "torch.BatchNorm2d", "torch.ReLU6", "qmobilenetv2.qconv1x1", "torch.BatchNorm2d", "qmobilenetv2.qconv1x1", "torch.BatchNorm2d", "torch.ReLU6"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.__init__", "home.repos.pwc.inspect_result.zhuang-group_saq.models.qmobilenetv2.qdwconv3x3", "home.repos.pwc.inspect_result.zhuang-group_saq.models.qmobilenetv2.qconv1x1", "home.repos.pwc.inspect_result.zhuang-group_saq.models.qmobilenetv2.qconv1x1"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "expand", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "conv_type", "=", "LIQ", ".", "QConv2d", ",", "\n", ")", ":", "\n", "        ", "super", "(", "QMobileBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "\"mobile-bottleneck\"", "\n", "self", ".", "expand", "=", "expand", "\n", "\n", "intermedia_planes", "=", "in_planes", "*", "expand", "\n", "if", "self", ".", "expand", "!=", "1", ":", "\n", "            ", "self", ".", "conv1", "=", "qconv1x1", "(", "\n", "in_planes", ",", "\n", "intermedia_planes", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "intermedia_planes", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", "\n", "\n", "", "self", ".", "conv2", "=", "qdwconv3x3", "(", "\n", "intermedia_planes", ",", "\n", "intermedia_planes", ",", "\n", "stride", "=", "stride", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "intermedia_planes", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "conv3", "=", "qconv1x1", "(", "\n", "intermedia_planes", ",", "\n", "out_planes", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "stride", "==", "1", "and", "in_planes", "==", "out_planes", "\n", "self", ".", "block_index", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qmobilenetv2.QMobileBottleneck.forward": [[144, 165], ["qmobilenetv2.QMobileBottleneck.conv2", "qmobilenetv2.QMobileBottleneck.bn2", "qmobilenetv2.QMobileBottleneck.relu2", "qmobilenetv2.QMobileBottleneck.conv3", "qmobilenetv2.QMobileBottleneck.bn3", "qmobilenetv2.QMobileBottleneck.conv1", "qmobilenetv2.QMobileBottleneck.bn1", "qmobilenetv2.QMobileBottleneck.relu1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "shortcut", ":", "\n", "            ", "residual", "=", "x", "\n", "\n", "", "out", "=", "x", "\n", "if", "self", ".", "expand", "!=", "1", ":", "\n", "            ", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu1", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu2", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "shortcut", ":", "\n", "            ", "out", "+=", "residual", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qmobilenetv2.QMobileNetV2.__init__": [[172, 299], ["torch.Module.__init__", "numpy.array", "numpy.around", "qmobilenetv2.QMobileNetV2.layer_width.astype", "qmobilenetv2.QMobileNetV2.layer_width[].item", "tools.get_conv_fc_quan_type", "torch.BatchNorm2d", "torch.ReLU6", "qmobilenetv2.QMobileNetV2._make_layer", "qmobilenetv2.QMobileNetV2._make_layer", "qmobilenetv2.QMobileNetV2._make_layer", "qmobilenetv2.QMobileNetV2._make_layer", "qmobilenetv2.QMobileNetV2._make_layer", "qmobilenetv2.QMobileNetV2._make_layer", "qmobilenetv2.QMobileNetV2._make_layer", "qmobilenetv2.qconv1x1", "torch.BatchNorm2d", "torch.ReLU6", "torch.Dropout", "qmobilenetv2.QMobileNetV2.modules", "qmobilenetv2.qconv3x3", "qmobilenetv2.conv3x3", "qmobilenetv2.QMobileNetV2.layer_width[].item", "qmobilenetv2.QMobileNetV2.layer_width[].item", "qmobilenetv2.QMobileNetV2.layer_width[].item", "qmobilenetv2.QMobileNetV2.layer_width[].item", "qmobilenetv2.QMobileNetV2.layer_width[].item", "qmobilenetv2.QMobileNetV2.layer_width[].item", "qmobilenetv2.QMobileNetV2.layer_width[].item", "fc_type", "torch.Linear", "isinstance", "qmobilenetv2.QMobileNetV2.layer_width[].item", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.__init__", "home.repos.pwc.inspect_result.zhuang-group_saq.models.tools.get_conv_fc_quan_type", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._make_layer", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._make_layer", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._make_layer", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._make_layer", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._make_layer", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._make_layer", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._make_layer", "home.repos.pwc.inspect_result.zhuang-group_saq.models.qmobilenetv2.qconv1x1", "home.repos.pwc.inspect_result.zhuang-group_saq.models.qmobilenetv2.qconv3x3", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.conv3x3"], ["def", "__init__", "(", "\n", "self", ",", "\n", "num_classes", "=", "1000", ",", "\n", "wide_scale", "=", "1.0", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "quantize_first_last", "=", "False", ",", "\n", "quan_type", "=", "\"LIQ\"", ",", "\n", ")", ":", "\n", "        ", "super", "(", "QMobileNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "block", "=", "QMobileBottleneck", "\n", "# define network structure", "\n", "self", ".", "layer_width", "=", "np", ".", "array", "(", "[", "32", ",", "16", ",", "24", ",", "32", ",", "64", ",", "96", ",", "160", ",", "320", "]", ")", "\n", "self", ".", "layer_width", "=", "np", ".", "around", "(", "self", ".", "layer_width", "*", "wide_scale", ")", "\n", "self", ".", "layer_width", "=", "self", ".", "layer_width", ".", "astype", "(", "int", ")", "\n", "\n", "self", ".", "in_planes", "=", "self", ".", "layer_width", "[", "0", "]", ".", "item", "(", ")", "\n", "\n", "conv_type", ",", "fc_type", "=", "get_conv_fc_quan_type", "(", "quan_type", ")", "\n", "if", "quantize_first_last", ":", "\n", "            ", "self", ".", "conv1", "=", "qconv3x3", "(", "\n", "3", ",", "\n", "self", ".", "in_planes", ",", "\n", "stride", "=", "2", ",", "\n", "bits_weights", "=", "8", ",", "\n", "bits_activations", "=", "32", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "conv3x3", "(", "3", ",", "self", ".", "in_planes", ",", "stride", "=", "2", ")", "\n", "", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "in_planes", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "self", ".", "layer_width", "[", "1", "]", ".", "item", "(", ")", ",", "\n", "blocks", "=", "1", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "self", ".", "layer_width", "[", "2", "]", ".", "item", "(", ")", ",", "\n", "blocks", "=", "2", ",", "\n", "expand", "=", "6", ",", "\n", "stride", "=", "2", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "self", ".", "layer_width", "[", "3", "]", ".", "item", "(", ")", ",", "\n", "blocks", "=", "3", ",", "\n", "expand", "=", "6", ",", "\n", "stride", "=", "2", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "self", ".", "layer_width", "[", "4", "]", ".", "item", "(", ")", ",", "\n", "blocks", "=", "4", ",", "\n", "expand", "=", "6", ",", "\n", "stride", "=", "2", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", "self", ".", "layer5", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "self", ".", "layer_width", "[", "5", "]", ".", "item", "(", ")", ",", "\n", "blocks", "=", "3", ",", "\n", "expand", "=", "6", ",", "\n", "stride", "=", "1", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", "self", ".", "layer6", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "self", ".", "layer_width", "[", "6", "]", ".", "item", "(", ")", ",", "\n", "blocks", "=", "3", ",", "\n", "expand", "=", "6", ",", "\n", "stride", "=", "2", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", "self", ".", "layer7", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "self", ".", "layer_width", "[", "7", "]", ".", "item", "(", ")", ",", "\n", "blocks", "=", "1", ",", "\n", "expand", "=", "6", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", "self", ".", "conv2", "=", "qconv1x1", "(", "\n", "in_planes", "=", "self", ".", "layer_width", "[", "7", "]", ".", "item", "(", ")", ",", "\n", "out_planes", "=", "1280", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "1280", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", "\n", "# self.avgpool = nn.AvgPool2d(7)", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "0", ")", "\n", "\n", "if", "quantize_first_last", ":", "\n", "            ", "self", ".", "fc", "=", "fc_type", "(", "1280", ",", "num_classes", ",", "bits_weights", "=", "8", ",", "bits_activations", "=", "8", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "1280", ",", "num_classes", ")", "\n", "# self.conv3 = conv1x1(1280, num_classes)", "\n", "# self.relu3 = nn.ReLU6(inplace=True)", "\n", "# self.fc = nn.Linear(self.layer_width[8], num_classes)", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qmobilenetv2.QMobileNetV2._make_layer": [[300, 337], ["layers.append", "range", "torch.Sequential", "block", "layers.append", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "\n", "self", ",", "\n", "block", ",", "\n", "out_planes", ",", "\n", "blocks", ",", "\n", "expand", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "conv_type", "=", "LIQ", ".", "QConv2d", ",", "\n", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "\n", "self", ".", "in_planes", ",", "\n", "out_planes", ",", "\n", "expand", "=", "expand", ",", "\n", "stride", "=", "stride", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", ")", "\n", "self", ".", "in_planes", "=", "out_planes", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "block", "(", "\n", "self", ".", "in_planes", ",", "\n", "out_planes", ",", "\n", "expand", "=", "expand", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", ")", "\n", "self", ".", "in_planes", "=", "out_planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qmobilenetv2.QMobileNetV2.forward": [[338, 364], ["qmobilenetv2.QMobileNetV2.conv1", "qmobilenetv2.QMobileNetV2.bn1", "qmobilenetv2.QMobileNetV2.relu1", "qmobilenetv2.QMobileNetV2.layer1", "qmobilenetv2.QMobileNetV2.layer2", "qmobilenetv2.QMobileNetV2.layer3", "qmobilenetv2.QMobileNetV2.layer4", "qmobilenetv2.QMobileNetV2.layer5", "qmobilenetv2.QMobileNetV2.layer6", "qmobilenetv2.QMobileNetV2.layer7", "qmobilenetv2.QMobileNetV2.conv2", "qmobilenetv2.QMobileNetV2.bn2", "qmobilenetv2.QMobileNetV2.relu2", "qmobilenetv2.QMobileNetV2.mean", "qmobilenetv2.QMobileNetV2.dropout", "qmobilenetv2.QMobileNetV2.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        forward propagation\n        \"\"\"", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x", "=", "self", ".", "layer5", "(", "x", ")", "\n", "x", "=", "self", ".", "layer6", "(", "x", ")", "\n", "x", "=", "self", ".", "layer7", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu2", "(", "x", ")", "\n", "# x = self.avgpool(x)", "\n", "# # x = self.conv3(x)", "\n", "x", "=", "x", ".", "mean", "(", "[", "2", ",", "3", "]", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qmobilenetv2.conv3x3": [[12, 16], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qmobilenetv2.qconv3x3": [[19, 37], ["conv_type"], "function", ["None"], ["", "def", "qconv3x3", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "stride", "=", "1", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "conv_type", "=", "LIQ", ".", "QConv2d", ",", "\n", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "conv_type", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qmobilenetv2.conv1x1": [[40, 43], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "\"1x1 convolution\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qmobilenetv2.qconv1x1": [[45, 56], ["conv_type"], "function", ["None"], ["", "def", "qconv1x1", "(", "\n", "in_planes", ",", "out_planes", ",", "bits_weights", "=", "32", ",", "bits_activations", "=", "32", ",", "conv_type", "=", "LIQ", ".", "QConv2d", ",", "\n", ")", ":", "\n", "    ", "\"1x1 convolution\"", "\n", "return", "conv_type", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qmobilenetv2.dwconv3x3": [[59, 69], ["torch.Conv2d"], "function", ["None"], ["", "def", "dwconv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 depth wise convolution\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "groups", "=", "in_planes", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qmobilenetv2.qdwconv3x3": [[72, 91], ["conv_type"], "function", ["None"], ["", "def", "qdwconv3x3", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "stride", "=", "1", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "conv_type", "=", "LIQ", ".", "QConv2d", ",", "\n", ")", ":", "\n", "    ", "\"3x3 depth wise convolution\"", "\n", "return", "conv_type", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "groups", "=", "in_planes", ",", "\n", "bias", "=", "False", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.qmobilenetv2.qmobilenetv2": [[366, 371], ["qmobilenetv2.QMobileNetV2"], "function", ["None"], ["", "", "def", "qmobilenetv2", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a QMobileNetv2 model.\n    \"\"\"", "\n", "model", "=", "QMobileNetV2", "(", "**", "kwargs", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qpreresnet.QSAMPreBasicBlock.__init__": [[104, 157], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.ReLU", "qpreresnet.qconv3x3", "torch.BatchNorm2d", "torch.ReLU", "qpreresnet.qconv3x3"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.__init__", "home.repos.pwc.inspect_result.zhuang-group_saq.models.qmobilenetv2.qconv3x3", "home.repos.pwc.inspect_result.zhuang-group_saq.models.qmobilenetv2.qconv3x3"], [")", ":", "\n", "        ", "\"\"\"\n        init module and weights\n        :param in_plane: size of input plane\n        :param out_plane: size of output plane\n        :param stride: stride of convolutional layers, default 1\n        :param downsample: down sample type for expand dimension of input feature maps, default None\n        :param block_type: type of blocks, decide position of short cut, both-preact: short cut start from beginning\n        of the first segment, half-preact: short cut start from the position between the first segment and the second\n        one. default: both-preact\n        \"\"\"", "\n", "super", "(", "QPreBasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "block_type", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_plane", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "conv1", "=", "qconv3x3", "(", "\n", "in_plane", ",", "\n", "out_plane", ",", "\n", "stride", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_plane", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "qconv3x3", "(", "\n", "out_plane", ",", "\n", "out_plane", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", "self", ".", "block_index", "=", "0", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        forward procedure of residual module\n        :param x: input feature maps\n        :return: output feature maps\n        \"\"\"", "\n", "if", "self", ".", "name", "==", "\"half_preact\"", ":", "\n", "            ", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu1", "(", "x", ")", "\n", "residual", "=", "x", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu2", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "", "elif", "self", ".", "name", "==", "\"both_preact\"", ":", "\n", "            ", "residual", "=", "x", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qpreresnet.QSAMPreBasicBlock.forward": [[158, 186], ["qpreresnet.QSAMPreBasicBlock.bn1", "qpreresnet.QSAMPreBasicBlock.relu1", "qpreresnet.QSAMPreBasicBlock.conv1", "qpreresnet.QSAMPreBasicBlock.bn2", "qpreresnet.QSAMPreBasicBlock.relu2", "qpreresnet.QSAMPreBasicBlock.conv2", "qpreresnet.QSAMPreBasicBlock.downsample", "qpreresnet.QSAMPreBasicBlock.bn1", "qpreresnet.QSAMPreBasicBlock.relu1", "qpreresnet.QSAMPreBasicBlock.conv1", "qpreresnet.QSAMPreBasicBlock.bn2", "qpreresnet.QSAMPreBasicBlock.relu2", "qpreresnet.QSAMPreBasicBlock.conv2"], "methods", ["None"], ["x", "=", "self", ".", "relu1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu2", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "downsample", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "residual", ")", "\n", "\n", "", "out", "=", "x", "+", "residual", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "QPreResNet", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"\n    define QPreResNet on small data sets\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "\n", "self", ",", "\n", "depth", ",", "\n", "quantize_first_last", "=", "False", ",", "\n", "wide_factor", "=", "1", ",", "\n", "num_classes", "=", "10", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "quan_type", "=", "\"LIQ\"", ",", "\n", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qpreresnet.QSAMPreResNet.__init__": [[193, 273], ["torch.Module.__init__", "tools.get_conv_fc_quan_type", "tools.get_conv_fc_quan_type", "qpreresnet.QSAMPreResNet._make_layer", "qpreresnet.QSAMPreResNet._make_layer", "qpreresnet.QSAMPreResNet._make_layer", "torch.BatchNorm2d", "torch.ReLU", "torch.AvgPool2d", "qpreresnet.QSAMPreResNet._init_weight", "qpreresnet.qconv3x3", "qpreresnet.conv3x3", "fc_type", "qpreresnet.linear"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.__init__", "home.repos.pwc.inspect_result.zhuang-group_saq.models.tools.get_conv_fc_quan_type", "home.repos.pwc.inspect_result.zhuang-group_saq.models.tools.get_conv_fc_quan_type", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._make_layer", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._make_layer", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._make_layer", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._init_weight", "home.repos.pwc.inspect_result.zhuang-group_saq.models.qmobilenetv2.qconv3x3", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.conv3x3", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.linear"], ["\n", "self", ".", "in_plane", "=", "16", "*", "wide_factor", "\n", "self", ".", "depth", "=", "depth", "\n", "n", "=", "(", "depth", "-", "2", ")", "/", "6", "\n", "\n", "conv_type", ",", "fc_type", "=", "get_conv_fc_quan_type", "(", "quan_type", ")", "\n", "\n", "if", "quantize_first_last", ":", "\n", "            ", "self", ".", "conv", "=", "qconv3x3", "(", "\n", "3", ",", "\n", "16", "*", "wide_factor", ",", "\n", "bits_weights", "=", "8", ",", "\n", "bits_activations", "=", "32", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "conv3x3", "(", "3", ",", "16", "*", "wide_factor", ")", "\n", "", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "\n", "QPreBasicBlock", ",", "\n", "16", "*", "wide_factor", ",", "\n", "n", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "\n", "QPreBasicBlock", ",", "\n", "32", "*", "wide_factor", ",", "\n", "n", ",", "\n", "stride", "=", "2", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "\n", "QPreBasicBlock", ",", "\n", "64", "*", "wide_factor", ",", "\n", "n", ",", "\n", "stride", "=", "2", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "64", "*", "wide_factor", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AvgPool2d", "(", "8", ")", "\n", "if", "quantize_first_last", ":", "\n", "            ", "self", ".", "fc", "=", "fc_type", "(", "\n", "64", "*", "wide_factor", ",", "num_classes", ",", "bits_weights", "=", "8", ",", "bits_activations", "=", "8", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", "=", "linear", "(", "64", "*", "wide_factor", ",", "num_classes", ")", "\n", "\n", "", "self", ".", "_init_weight", "(", ")", "\n", "\n", "", "def", "_init_weight", "(", "self", ")", ":", "\n", "# init layer parameters", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "# elif isinstance(m, nn.Linear):", "\n", "#     m.bias.data.zero_()", "\n", "\n", "", "", "", "def", "_make_layer", "(", "\n", "self", ",", "\n", "block", ",", "\n", "out_plane", ",", "\n", "n_blocks", ",", "\n", "stride", "=", "1", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "conv_type", "=", "LIQ", ".", "QConv2d", ",", "\n", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qpreresnet.QSAMPreResNet._init_weight": [[274, 283], ["qpreresnet.QSAMPreResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["None"], ["\n", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "in_plane", "!=", "out_plane", ":", "\n", "            ", "downsample", "=", "qconv1x1", "(", "\n", "self", ".", "in_plane", ",", "\n", "out_plane", ",", "\n", "stride", "=", "stride", ",", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qpreresnet.QSAMPreResNet._make_layer": [[286, 348], ["layers.append", "range", "torch.Sequential", "qpreresnet.qconv1x1", "block", "int", "layers.append", "block"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.models.qmobilenetv2.qconv1x1"], ["conv_type", "=", "conv_type", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "\n", "self", ".", "in_plane", ",", "\n", "out_plane", ",", "\n", "stride", ",", "\n", "downsample", ",", "\n", "block_type", "=", "\"half_preact\"", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", ")", "\n", "self", ".", "in_plane", "=", "out_plane", "\n", "for", "i", "in", "range", "(", "1", ",", "int", "(", "n_blocks", ")", ")", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "block", "(", "\n", "self", ".", "in_plane", ",", "\n", "out_plane", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        forward procedure of model\n        :param x: input feature maps\n        :return: output feature maps\n        \"\"\"", "\n", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "avg_pool", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "return", "out", "\n", "\n", "\n", "", "", "def", "qpreresnet20", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a QPreResNet-20 model.\n    \"\"\"", "\n", "model", "=", "QPreResNet", "(", "depth", "=", "20", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n", "\n", "", "def", "qpreresnet32", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a QPreResNet-32 model.\n    \"\"\"", "\n", "model", "=", "QPreResNet", "(", "depth", "=", "32", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n", "\n", "", "def", "qpreresnet44", "(", "**", "kwargs", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qpreresnet.QSAMPreResNet.forward": [[349, 365], ["qpreresnet.QSAMPreResNet.conv", "qpreresnet.QSAMPreResNet.layer1", "qpreresnet.QSAMPreResNet.layer2", "qpreresnet.QSAMPreResNet.layer3", "qpreresnet.QSAMPreResNet.bn", "qpreresnet.QSAMPreResNet.relu", "qpreresnet.QSAMPreResNet.avg_pool", "qpreresnet.QSAMPreResNet.view", "qpreresnet.QSAMPreResNet.fc", "qpreresnet.QSAMPreResNet.size"], "methods", ["None"], ["\n", "model", "=", "QPreResNet", "(", "depth", "=", "44", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n", "\n", "", "def", "qpreresnet56", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a QPreResNet-56 model.\n    \"\"\"", "\n", "model", "=", "QPreResNet", "(", "depth", "=", "56", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n", "\n", "", "def", "qpreresnet110", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a QPreResNet-110 model.\n    \"\"\"", "\n", "model", "=", "QPreResNet", "(", "depth", "=", "110", ",", "**", "kwargs", ")", "\n", "return", "model", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qpreresnet.conv1x1": [[22, 28], ["torch.Conv2d"], "function", ["None"], ["def", "conv1x1", "(", "in_plane", ",", "out_plane", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    1x1 convolutional layer\n    \"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_plane", ",", "out_plane", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qpreresnet.qconv1x1": [[31, 56], ["conv_type"], "function", ["None"], ["", "def", "qconv1x1", "(", "\n", "in_plane", ",", "\n", "out_plane", ",", "\n", "stride", "=", "1", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "conv_type", "=", "LIQ", ".", "QConv2d", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n    1x1 quantized convolutional layer\n    \"\"\"", "\n", "return", "conv_type", "(", "\n", "in_plane", ",", "\n", "out_plane", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", ")", "\n", "\n", "\n", "", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qpreresnet.conv3x3": [[59, 63], ["torch.Conv2d"], "function", ["None"], ["\n", "\n", "", "def", "qconv3x3", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qpreresnet.qconv3x3": [[66, 89], ["conv_type"], "function", ["None"], ["bits_activations", "=", "32", ",", "\n", "conv_type", "=", "LIQ", ".", "QConv2d", ",", "\n", ")", ":", "\n", "    ", "\"3x3 quantized convolution with padding\"", "\n", "return", "conv_type", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", ")", "\n", "\n", "\n", "", "def", "linear", "(", "in_features", ",", "out_features", ")", ":", "\n", "    ", "return", "nn", ".", "Linear", "(", "in_features", ",", "out_features", ")", "\n", "\n", "\n", "# both-preact | half-preact", "\n", "\n", "\n", "", "class", "QPreBasicBlock", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qpreresnet.linear": [[92, 94], ["torch.Linear"], "function", ["None"], ["\n", "\n", "def", "__init__", "(", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qpreresnet.qsampreresnet20": [[367, 372], ["qpreresnet.QSAMPreResNet"], "function", ["None"], []], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qpreresnet.qsampreresnet32": [[374, 379], ["qpreresnet.QSAMPreResNet"], "function", ["None"], []], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qpreresnet.qsampreresnet44": [[381, 386], ["qpreresnet.QSAMPreResNet"], "function", ["None"], []], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qpreresnet.qsampreresnet56": [[388, 393], ["qpreresnet.QSAMPreResNet"], "function", ["None"], []], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qpreresnet.qsampreresnet110": [[395, 400], ["qpreresnet.QSAMPreResNet"], "function", ["None"], []], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qresnet.QSAMBasicBlock.__init__": [[61, 97], ["torch.Module.__init__", "qresnet.qconv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "qresnet.qconv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.__init__", "home.repos.pwc.inspect_result.zhuang-group_saq.models.qmobilenetv2.qconv3x3", "home.repos.pwc.inspect_result.zhuang-group_saq.models.qmobilenetv2.qconv3x3"], ["inplanes", ",", "\n", "planes", ",", "\n", "stride", "=", "1", ",", "\n", "downsample", "=", "None", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "conv_type", "=", "LIQ", ".", "QConv2d", ",", "\n", ")", ":", "\n", "        ", "super", "(", "QBasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "\"resnet-basic\"", "\n", "self", ".", "conv1", "=", "qconv3x3", "(", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stride", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "qconv3x3", "(", "\n", "planes", ",", "\n", "planes", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "block_index", "=", "0", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qresnet.QSAMBasicBlock.forward": [[98, 115], ["qresnet.QSAMBasicBlock.conv1", "qresnet.QSAMBasicBlock.bn1", "qresnet.QSAMBasicBlock.relu", "qresnet.QSAMBasicBlock.conv2", "qresnet.QSAMBasicBlock.bn2", "qresnet.QSAMBasicBlock.relu", "qresnet.QSAMBasicBlock.downsample"], "methods", ["None"], ["out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "QBottleneck", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "4", "\n", "\n", "def", "__init__", "(", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qresnet.QSAMBottleneck.__init__": [[120, 169], ["torch.Module.__init__", "conv_type", "torch.BatchNorm2d", "torch.BatchNorm2d", "conv_type", "torch.BatchNorm2d", "torch.BatchNorm2d", "conv_type", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.__init__"], ["downsample", "=", "None", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "conv_type", "=", "LIQ", ".", "QConv2d", ",", "\n", ")", ":", "\n", "        ", "super", "(", "QBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "\"resnet-bottleneck\"", "\n", "self", ".", "conv1", "=", "conv_type", "(", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv_type", "(", "\n", "planes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "conv_type", "(", "\n", "planes", ",", "\n", "planes", "*", "4", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "block_index", "=", "0", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qresnet.QSAMBottleneck.forward": [[170, 192], ["qresnet.QSAMBottleneck.conv1", "qresnet.QSAMBottleneck.bn1", "qresnet.QSAMBottleneck.relu", "qresnet.QSAMBottleneck.conv2", "qresnet.QSAMBottleneck.bn2", "qresnet.QSAMBottleneck.relu", "qresnet.QSAMBottleneck.conv3", "qresnet.QSAMBottleneck.bn3", "qresnet.QSAMBottleneck.relu", "qresnet.QSAMBottleneck.downsample"], "methods", ["None"], ["out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "QResNet", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "\n", "self", ",", "\n", "depth", ",", "\n", "num_classes", "=", "1000", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "quantize_first_last", "=", "False", ",", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qresnet.QSAMResNet.__init__": [[195, 297], ["torch.Module.__init__", "tools.get_conv_fc_quan_type", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "qresnet.QSAMResNet._make_layer", "qresnet.QSAMResNet._make_layer", "qresnet.QSAMResNet._make_layer", "qresnet.QSAMResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "qresnet.QSAMResNet.modules", "torch.Conv2d", "torch.Conv2d", "conv_type", "torch.Linear", "torch.Linear", "fc_type", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.__init__", "home.repos.pwc.inspect_result.zhuang-group_saq.models.tools.get_conv_fc_quan_type", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._make_layer", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._make_layer", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._make_layer", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._make_layer"], ["        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "QResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "depth", "<", "50", ":", "\n", "            ", "block", "=", "QBasicBlock", "\n", "", "else", ":", "\n", "            ", "block", "=", "QBottleneck", "\n", "\n", "", "if", "depth", "==", "18", ":", "\n", "            ", "layers", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", "\n", "", "elif", "depth", "==", "34", ":", "\n", "            ", "layers", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", "\n", "", "elif", "depth", "==", "50", ":", "\n", "            ", "layers", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", "\n", "", "elif", "depth", "==", "101", ":", "\n", "            ", "layers", "=", "[", "3", ",", "4", ",", "23", ",", "3", "]", "\n", "", "elif", "depth", "==", "152", ":", "\n", "            ", "layers", "=", "[", "3", ",", "8", ",", "36", ",", "3", "]", "\n", "\n", "", "conv_type", ",", "fc_type", "=", "get_conv_fc_quan_type", "(", "quan_type", ")", "\n", "\n", "if", "not", "quantize_first_last", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "conv_type", "(", "\n", "3", ",", "\n", "64", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "3", ",", "\n", "bias", "=", "False", ",", "\n", "bits_weights", "=", "8", ",", "\n", "bits_activations", "=", "32", ",", "\n", ")", "\n", "", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "64", ",", "\n", "layers", "[", "0", "]", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "128", ",", "\n", "layers", "[", "1", "]", ",", "\n", "stride", "=", "2", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "256", ",", "\n", "layers", "[", "2", "]", ",", "\n", "stride", "=", "2", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "512", ",", "\n", "layers", "[", "3", "]", ",", "\n", "stride", "=", "2", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "if", "not", "quantize_first_last", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", "=", "fc_type", "(", "\n", "512", "*", "block", ".", "expansion", ",", "num_classes", ",", "bits_weights", "=", "8", ",", "bits_activations", "=", "8", "\n", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "", "def", "_make_layer", "(", "\n", "self", ",", "\n", "block", ",", "\n", "planes", ",", "\n", "blocks", ",", "\n", "stride", "=", "1", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "conv_type", "=", "LIQ", ".", "QConv2d", ",", "\n", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv_type", "(", "\n", "self", ".", "inplanes", ",", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qresnet.QSAMResNet._make_layer": [[298, 352], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "conv_type", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "\n", "self", ".", "inplanes", ",", "\n", "planes", ",", "\n", "stride", ",", "\n", "downsample", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "block", "(", "\n", "self", ".", "inplanes", ",", "\n", "planes", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n", "\n", "", "", "def", "qresnet18", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qresnet.QSAMResNet.forward": [[353, 369], ["qresnet.QSAMResNet.conv1", "qresnet.QSAMResNet.bn1", "qresnet.QSAMResNet.relu", "qresnet.QSAMResNet.maxpool", "qresnet.QSAMResNet.layer1", "qresnet.QSAMResNet.layer2", "qresnet.QSAMResNet.layer3", "qresnet.QSAMResNet.layer4", "qresnet.QSAMResNet.avgpool", "qresnet.QSAMResNet.view", "qresnet.QSAMResNet.fc", "qresnet.QSAMResNet.size"], "methods", ["None"], ["    ", "\"\"\"Constructs a QResNet-18 model.\n    \"\"\"", "\n", "model", "=", "QResNet", "(", "depth", "=", "18", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet18\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n", "\n", "", "def", "qresnet34", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a QResNet-34 model.\n    \"\"\"", "\n", "model", "=", "QResNet", "(", "depth", "=", "34", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet34\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qresnet.conv3x3": [[28, 32], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qresnet.qconv3x3": [[35, 55], ["conv_type"], "function", ["None"], ["", "def", "qconv3x3", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "stride", "=", "1", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "conv_type", "=", "LIQ", ".", "QConv2d", ",", "\n", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "conv_type", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qresnet.qsamresnet18": [[371, 378], ["qresnet.QSAMResNet", "QSAMResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["    ", "\"\"\"Constructs a QResNet-50 model.\n    \"\"\"", "\n", "model", "=", "QResNet", "(", "depth", "=", "50", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet50\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qresnet.qsamresnet34": [[380, 387], ["qresnet.QSAMResNet", "QSAMResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["    ", "\"\"\"Constructs a QResNet-101 model.\n    \"\"\"", "\n", "model", "=", "QResNet", "(", "depth", "=", "101", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet101\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qresnet.qsamresnet50": [[389, 396], ["qresnet.QSAMResNet", "QSAMResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["    ", "\"\"\"Constructs a QResNet-152 model.\n    \"\"\"", "\n", "model", "=", "QResNet", "(", "depth", "=", "152", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet152\"", "]", ")", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qresnet.qsamresnet101": [[398, 405], ["qresnet.QSAMResNet", "QSAMResNet.load_state_dict", "torch.load_url"], "function", ["None"], []], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qresnet.qsamresnet152": [[407, 414], ["qresnet.QSAMResNet", "QSAMResNet.load_state_dict", "torch.load_url"], "function", ["None"], []], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qsmobilenetv2.QSAMSMobileBottleneck.__init__": [[114, 180], ["torch.Module.__init__", "qsmobilenetv2.qdwconv3x3", "torch.ModuleList", "torch.ReLU6", "qsmobilenetv2.qconv1x1", "torch.ModuleList", "qsmobilenetv2.qconv1x1", "torch.ModuleList", "torch.ReLU6", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.__init__", "home.repos.pwc.inspect_result.zhuang-group_saq.models.qmobilenetv2.qdwconv3x3", "home.repos.pwc.inspect_result.zhuang-group_saq.models.qmobilenetv2.qconv1x1", "home.repos.pwc.inspect_result.zhuang-group_saq.models.qmobilenetv2.qconv1x1"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "expand", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "conv_type", "=", "LIQ_wn_qsam", ".", "QConv2d", ",", "\n", "share_clip", "=", "False", ",", "\n", "bits_choice", "=", "[", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", "]", ",", "\n", ")", ":", "\n", "        ", "super", "(", "QSAMSMobileBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "\"mobile-bottleneck\"", "\n", "self", ".", "expand", "=", "expand", "\n", "self", ".", "bits_choice", "=", "bits_choice", "\n", "\n", "intermedia_planes", "=", "in_planes", "*", "expand", "\n", "if", "self", ".", "expand", "!=", "1", ":", "\n", "            ", "self", ".", "conv1", "=", "qconv1x1", "(", "\n", "in_planes", ",", "\n", "intermedia_planes", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", "share_clip", "=", "share_clip", ",", "\n", "bits_choice", "=", "bits_choice", ",", "\n", ")", "\n", "# self.bn1 = nn.BatchNorm2d(intermedia_planes)", "\n", "self", ".", "bn1", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "BatchNorm2d", "(", "intermedia_planes", ")", "for", "i", "in", "bits_choice", "for", "j", "in", "bits_choice", "]", "\n", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", "\n", "\n", "", "self", ".", "conv2", "=", "qdwconv3x3", "(", "\n", "intermedia_planes", ",", "\n", "intermedia_planes", ",", "\n", "stride", "=", "stride", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", "share_clip", "=", "share_clip", ",", "\n", "bits_choice", "=", "bits_choice", ",", "\n", ")", "\n", "# self.bn2 = nn.BatchNorm2d(intermedia_planes)", "\n", "self", ".", "bn2", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "BatchNorm2d", "(", "intermedia_planes", ")", "for", "i", "in", "bits_choice", "for", "j", "in", "bits_choice", "]", "\n", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "conv3", "=", "qconv1x1", "(", "\n", "intermedia_planes", ",", "\n", "out_planes", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", "share_clip", "=", "share_clip", ",", "\n", "bits_choice", "=", "bits_choice", ",", "\n", ")", "\n", "# self.bn3 = nn.BatchNorm2d(out_planes)", "\n", "self", ".", "bn3", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "for", "i", "in", "bits_choice", "for", "j", "in", "bits_choice", "]", "\n", ")", "\n", "\n", "self", ".", "shortcut", "=", "stride", "==", "1", "and", "in_planes", "==", "out_planes", "\n", "self", ".", "block_index", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qsmobilenetv2.QSAMSMobileBottleneck.forward": [[181, 217], ["qsmobilenetv2.QSAMSMobileBottleneck.conv2", "qsmobilenetv2.QSAMSMobileBottleneck.relu2", "qsmobilenetv2.QSAMSMobileBottleneck.conv3", "qsmobilenetv2.QSAMSMobileBottleneck.conv1", "qsmobilenetv2.QSAMSMobileBottleneck.relu1", "qsmobilenetv2.QSAMSMobileBottleneck.bits_choice.index", "qsmobilenetv2.QSAMSMobileBottleneck.bits_choice.index", "qsmobilenetv2.QSAMSMobileBottleneck.bits_choice.index", "qsmobilenetv2.QSAMSMobileBottleneck.bits_choice.index", "len", "qsmobilenetv2.QSAMSMobileBottleneck.bits_choice.index", "len", "qsmobilenetv2.QSAMSMobileBottleneck.bits_choice.index", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "shortcut", ":", "\n", "            ", "residual", "=", "x", "\n", "\n", "", "out", "=", "x", "\n", "if", "self", ".", "expand", "!=", "1", ":", "\n", "            ", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "# out = self.bn1(out)", "\n", "out", "=", "self", ".", "bn1", "[", "\n", "self", ".", "bits_choice", ".", "index", "(", "self", ".", "conv1", ".", "current_bit_weights", ")", "\n", "*", "len", "(", "self", ".", "bits_choice", ")", "\n", "+", "self", ".", "bits_choice", ".", "index", "(", "self", ".", "conv1", ".", "current_bit_activations", ")", "\n", "]", "(", "out", ")", "\n", "out", "=", "self", ".", "relu1", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "# out = self.bn2(out)", "\n", "out", "=", "self", ".", "bn2", "[", "\n", "self", ".", "bits_choice", ".", "index", "(", "self", ".", "conv2", ".", "current_bit_weights", ")", "\n", "*", "len", "(", "self", ".", "bits_choice", ")", "\n", "+", "self", ".", "bits_choice", ".", "index", "(", "self", ".", "conv2", ".", "current_bit_activations", ")", "\n", "]", "(", "out", ")", "\n", "out", "=", "self", ".", "relu2", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "# out = self.bn3(out)", "\n", "out", "=", "self", ".", "bn3", "[", "\n", "self", ".", "bits_choice", ".", "index", "(", "self", ".", "conv3", ".", "current_bit_weights", ")", "\n", "*", "len", "(", "self", ".", "bits_choice", ")", "\n", "+", "self", ".", "bits_choice", ".", "index", "(", "self", ".", "conv3", ".", "current_bit_activations", ")", "\n", "]", "(", "out", ")", "\n", "\n", "if", "self", ".", "shortcut", ":", "\n", "            ", "out", "+=", "residual", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qsmobilenetv2.QSAMSMobileNetV2.__init__": [[224, 370], ["torch.Module.__init__", "numpy.array", "numpy.around", "qsmobilenetv2.QSAMSMobileNetV2.layer_width.astype", "qsmobilenetv2.QSAMSMobileNetV2.layer_width[].item", "tools.get_conv_fc_quan_type", "tools.get_conv_fc_quan_type", "torch.BatchNorm2d", "torch.ReLU6", "qsmobilenetv2.QSAMSMobileNetV2._make_layer", "qsmobilenetv2.QSAMSMobileNetV2._make_layer", "qsmobilenetv2.QSAMSMobileNetV2._make_layer", "qsmobilenetv2.QSAMSMobileNetV2._make_layer", "qsmobilenetv2.QSAMSMobileNetV2._make_layer", "qsmobilenetv2.QSAMSMobileNetV2._make_layer", "qsmobilenetv2.QSAMSMobileNetV2._make_layer", "qsmobilenetv2.qconv1x1", "torch.BatchNorm2d", "torch.ReLU6", "torch.Dropout", "qsmobilenetv2.QSAMSMobileNetV2.modules", "qsmobilenetv2.qconv3x3", "qsmobilenetv2.conv3x3", "qsmobilenetv2.QSAMSMobileNetV2.layer_width[].item", "qsmobilenetv2.QSAMSMobileNetV2.layer_width[].item", "qsmobilenetv2.QSAMSMobileNetV2.layer_width[].item", "qsmobilenetv2.QSAMSMobileNetV2.layer_width[].item", "qsmobilenetv2.QSAMSMobileNetV2.layer_width[].item", "qsmobilenetv2.QSAMSMobileNetV2.layer_width[].item", "qsmobilenetv2.QSAMSMobileNetV2.layer_width[].item", "fc_type", "torch.Linear", "isinstance", "qsmobilenetv2.QSAMSMobileNetV2.layer_width[].item", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.__init__", "home.repos.pwc.inspect_result.zhuang-group_saq.models.tools.get_conv_fc_quan_type", "home.repos.pwc.inspect_result.zhuang-group_saq.models.tools.get_conv_fc_quan_type", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._make_layer", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._make_layer", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._make_layer", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._make_layer", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._make_layer", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._make_layer", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._make_layer", "home.repos.pwc.inspect_result.zhuang-group_saq.models.qmobilenetv2.qconv1x1", "home.repos.pwc.inspect_result.zhuang-group_saq.models.qmobilenetv2.qconv3x3", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.conv3x3"], ["def", "__init__", "(", "\n", "self", ",", "\n", "num_classes", "=", "1000", ",", "\n", "wide_scale", "=", "1.0", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "quantize_first_last", "=", "False", ",", "\n", "quan_type", "=", "\"LIQ_wn_qsam\"", ",", "\n", "share_clip", "=", "False", ",", "\n", "bits_choice", "=", "[", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", "]", ",", "\n", ")", ":", "\n", "        ", "super", "(", "QSAMSMobileNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "block", "=", "QSAMSMobileBottleneck", "\n", "# define network structure", "\n", "self", ".", "layer_width", "=", "np", ".", "array", "(", "[", "32", ",", "16", ",", "24", ",", "32", ",", "64", ",", "96", ",", "160", ",", "320", "]", ")", "\n", "self", ".", "layer_width", "=", "np", ".", "around", "(", "self", ".", "layer_width", "*", "wide_scale", ")", "\n", "self", ".", "layer_width", "=", "self", ".", "layer_width", ".", "astype", "(", "int", ")", "\n", "\n", "self", ".", "in_planes", "=", "self", ".", "layer_width", "[", "0", "]", ".", "item", "(", ")", "\n", "\n", "conv_type", ",", "_", "=", "get_conv_fc_quan_type", "(", "quan_type", ")", "\n", "first_conv_type", ",", "fc_type", "=", "get_conv_fc_quan_type", "(", "\"LIQ_wn_qsam\"", ")", "\n", "if", "quantize_first_last", ":", "\n", "            ", "self", ".", "conv1", "=", "qconv3x3", "(", "\n", "3", ",", "\n", "self", ".", "in_planes", ",", "\n", "stride", "=", "2", ",", "\n", "bits_weights", "=", "8", ",", "\n", "bits_activations", "=", "32", ",", "\n", "conv_type", "=", "first_conv_type", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "conv3x3", "(", "3", ",", "self", ".", "in_planes", ",", "stride", "=", "2", ")", "\n", "", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "in_planes", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "self", ".", "layer_width", "[", "1", "]", ".", "item", "(", ")", ",", "\n", "blocks", "=", "1", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", "share_clip", "=", "share_clip", ",", "\n", "bits_choice", "=", "bits_choice", ",", "\n", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "self", ".", "layer_width", "[", "2", "]", ".", "item", "(", ")", ",", "\n", "blocks", "=", "2", ",", "\n", "expand", "=", "6", ",", "\n", "stride", "=", "2", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", "share_clip", "=", "share_clip", ",", "\n", "bits_choice", "=", "bits_choice", ",", "\n", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "self", ".", "layer_width", "[", "3", "]", ".", "item", "(", ")", ",", "\n", "blocks", "=", "3", ",", "\n", "expand", "=", "6", ",", "\n", "stride", "=", "2", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", "share_clip", "=", "share_clip", ",", "\n", "bits_choice", "=", "bits_choice", ",", "\n", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "self", ".", "layer_width", "[", "4", "]", ".", "item", "(", ")", ",", "\n", "blocks", "=", "4", ",", "\n", "expand", "=", "6", ",", "\n", "stride", "=", "2", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", "share_clip", "=", "share_clip", ",", "\n", "bits_choice", "=", "bits_choice", ",", "\n", ")", "\n", "self", ".", "layer5", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "self", ".", "layer_width", "[", "5", "]", ".", "item", "(", ")", ",", "\n", "blocks", "=", "3", ",", "\n", "expand", "=", "6", ",", "\n", "stride", "=", "1", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", "share_clip", "=", "share_clip", ",", "\n", "bits_choice", "=", "bits_choice", ",", "\n", ")", "\n", "self", ".", "layer6", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "self", ".", "layer_width", "[", "6", "]", ".", "item", "(", ")", ",", "\n", "blocks", "=", "3", ",", "\n", "expand", "=", "6", ",", "\n", "stride", "=", "2", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", "share_clip", "=", "share_clip", ",", "\n", "bits_choice", "=", "bits_choice", ",", "\n", ")", "\n", "self", ".", "layer7", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "self", ".", "layer_width", "[", "7", "]", ".", "item", "(", ")", ",", "\n", "blocks", "=", "1", ",", "\n", "expand", "=", "6", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", "share_clip", "=", "share_clip", ",", "\n", "bits_choice", "=", "bits_choice", ",", "\n", ")", "\n", "self", ".", "conv2", "=", "qconv1x1", "(", "\n", "in_planes", "=", "self", ".", "layer_width", "[", "7", "]", ".", "item", "(", ")", ",", "\n", "out_planes", "=", "1280", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", "share_clip", "=", "share_clip", ",", "\n", "bits_choice", "=", "bits_choice", ",", "\n", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "1280", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", "\n", "# self.avgpool = nn.AvgPool2d(7)", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "0", ")", "\n", "\n", "if", "quantize_first_last", ":", "\n", "            ", "self", ".", "fc", "=", "fc_type", "(", "1280", ",", "num_classes", ",", "bits_weights", "=", "8", ",", "bits_activations", "=", "8", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "1280", ",", "num_classes", ")", "\n", "# self.conv3 = conv1x1(1280, num_classes)", "\n", "# self.relu3 = nn.ReLU6(inplace=True)", "\n", "# self.fc = nn.Linear(self.layer_width[8], num_classes)", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qsmobilenetv2.QSAMSMobileNetV2._make_layer": [[371, 414], ["layers.append", "range", "torch.Sequential", "block", "layers.append", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "\n", "self", ",", "\n", "block", ",", "\n", "out_planes", ",", "\n", "blocks", ",", "\n", "expand", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "conv_type", "=", "LIQ_wn_qsam", ".", "QConv2d", ",", "\n", "share_clip", "=", "False", ",", "\n", "bits_choice", "=", "[", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", "]", ",", "\n", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "\n", "self", ".", "in_planes", ",", "\n", "out_planes", ",", "\n", "expand", "=", "expand", ",", "\n", "stride", "=", "stride", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", "share_clip", "=", "share_clip", ",", "\n", "bits_choice", "=", "bits_choice", ",", "\n", ")", "\n", ")", "\n", "self", ".", "in_planes", "=", "out_planes", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "block", "(", "\n", "self", ".", "in_planes", ",", "\n", "out_planes", ",", "\n", "expand", "=", "expand", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", "share_clip", "=", "share_clip", ",", "\n", "bits_choice", "=", "bits_choice", ",", "\n", ")", "\n", ")", "\n", "self", ".", "in_planes", "=", "out_planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qsmobilenetv2.QSAMSMobileNetV2.forward": [[415, 441], ["qsmobilenetv2.QSAMSMobileNetV2.conv1", "qsmobilenetv2.QSAMSMobileNetV2.bn1", "qsmobilenetv2.QSAMSMobileNetV2.relu1", "qsmobilenetv2.QSAMSMobileNetV2.layer1", "qsmobilenetv2.QSAMSMobileNetV2.layer2", "qsmobilenetv2.QSAMSMobileNetV2.layer3", "qsmobilenetv2.QSAMSMobileNetV2.layer4", "qsmobilenetv2.QSAMSMobileNetV2.layer5", "qsmobilenetv2.QSAMSMobileNetV2.layer6", "qsmobilenetv2.QSAMSMobileNetV2.layer7", "qsmobilenetv2.QSAMSMobileNetV2.conv2", "qsmobilenetv2.QSAMSMobileNetV2.bn2", "qsmobilenetv2.QSAMSMobileNetV2.relu2", "qsmobilenetv2.QSAMSMobileNetV2.mean", "qsmobilenetv2.QSAMSMobileNetV2.dropout", "qsmobilenetv2.QSAMSMobileNetV2.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        forward propagation\n        \"\"\"", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x", "=", "self", ".", "layer5", "(", "x", ")", "\n", "x", "=", "self", ".", "layer6", "(", "x", ")", "\n", "x", "=", "self", ".", "layer7", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu2", "(", "x", ")", "\n", "# x = self.avgpool(x)", "\n", "# # x = self.conv3(x)", "\n", "x", "=", "x", ".", "mean", "(", "[", "2", ",", "3", "]", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qsmobilenetv2.conv3x3": [[12, 16], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qsmobilenetv2.qconv3x3": [[19, 42], ["conv_type"], "function", ["None"], ["", "def", "qconv3x3", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "stride", "=", "1", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "conv_type", "=", "LIQ_wn_qsam", ".", "QConv2d", ",", "\n", "share_clip", "=", "False", ",", "\n", "bits_choice", "=", "[", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", "]", ",", "\n", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "conv_type", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "share_clip", "=", "share_clip", ",", "\n", "bits_weights_list", "=", "bits_choice", ",", "\n", "bits_activations_list", "=", "bits_choice", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qsmobilenetv2.conv1x1": [[45, 48], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "\"1x1 convolution\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qsmobilenetv2.qconv1x1": [[50, 70], ["conv_type"], "function", ["None"], ["", "def", "qconv1x1", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "conv_type", "=", "LIQ_wn_qsam", ".", "QConv2d", ",", "\n", "share_clip", "=", "False", ",", "\n", "bits_choice", "=", "[", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", "]", ",", "\n", ")", ":", "\n", "    ", "\"1x1 convolution\"", "\n", "return", "conv_type", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "share_clip", "=", "share_clip", ",", "\n", "bits_weights_list", "=", "bits_choice", ",", "\n", "bits_activations_list", "=", "bits_choice", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qsmobilenetv2.dwconv3x3": [[73, 83], ["torch.Conv2d"], "function", ["None"], ["", "def", "dwconv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 depth wise convolution\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "groups", "=", "in_planes", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qsmobilenetv2.qdwconv3x3": [[86, 110], ["conv_type"], "function", ["None"], ["", "def", "qdwconv3x3", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "stride", "=", "1", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "conv_type", "=", "LIQ_wn_qsam", ".", "QConv2d", ",", "\n", "share_clip", "=", "False", ",", "\n", "bits_choice", "=", "[", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", "]", ",", "\n", ")", ":", "\n", "    ", "\"3x3 depth wise convolution\"", "\n", "return", "conv_type", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "groups", "=", "in_planes", ",", "\n", "bias", "=", "False", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "share_clip", "=", "share_clip", ",", "\n", "bits_weights_list", "=", "bits_choice", ",", "\n", "bits_activations_list", "=", "bits_choice", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qsmobilenetv2.qsamsmobilenetv2": [[443, 448], ["qsmobilenetv2.QSAMSMobileNetV2"], "function", ["None"], ["", "", "def", "qsamsmobilenetv2", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a QSAMSMobileNetv2 model.\n    \"\"\"", "\n", "model", "=", "QSAMSMobileNetV2", "(", "**", "kwargs", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.tools.get_conv_fc_quan_type": [[7, 18], ["None"], "function", ["None"], ["    ", "if", "quan_type", "==", "\"LIQ\"", ":", "\n", "        ", "conv_type", "=", "LIQ", ".", "QConv2d", "\n", "fc_type", "=", "LIQ", ".", "QLinear", "\n", "", "elif", "quan_type", "==", "\"LIQ_wn\"", ":", "\n", "        ", "conv_type", "=", "LIQ_wn", ".", "QConv2d", "\n", "fc_type", "=", "LIQ", ".", "QLinear", "\n", "", "elif", "quan_type", "==", "\"pact\"", ":", "\n", "        ", "conv_type", "=", "pact", ".", "QConv2d", "\n", "fc_type", "=", "pact", ".", "QLinear", "\n", "", "elif", "quan_type", "==", "\"dorefa\"", ":", "\n", "        ", "conv_type", "=", "dorefa", ".", "QConv2d", "\n", "fc_type", "=", "dorefa", ".", "QLinear", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qsmobilenetv2_cifar.QSAMSMobileNetV2CifarBlock.__init__": [[21, 108], ["torch.Module.__init__", "conv_type", "torch.ModuleList", "torch.ModuleList", "conv_type", "torch.ModuleList", "torch.ModuleList", "conv_type", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "conv_type", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "expansion", ",", "\n", "stride", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "conv_type", "=", "LIQ_wn_qsam", ".", "QConv2d", ",", "\n", "share_clip", "=", "False", ",", "\n", "bits_choice", "=", "[", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", "]", ",", "\n", ")", ":", "\n", "        ", "super", "(", "QSAMSMobileNetV2CifarBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "bits_choice", "=", "bits_choice", "\n", "\n", "planes", "=", "expansion", "*", "in_planes", "\n", "self", ".", "conv1", "=", "conv_type", "(", "\n", "in_planes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "share_clip", "=", "share_clip", ",", "\n", "bits_weights_list", "=", "bits_choice", ",", "\n", "bits_activations_list", "=", "bits_choice", ",", "\n", ")", "\n", "# self.bn1 = nn.BatchNorm2d(planes)", "\n", "self", ".", "bn1", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "BatchNorm2d", "(", "planes", ")", "for", "i", "in", "bits_choice", "for", "j", "in", "bits_choice", "]", "\n", ")", "\n", "self", ".", "conv2", "=", "conv_type", "(", "\n", "planes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "groups", "=", "planes", ",", "\n", "bias", "=", "False", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "share_clip", "=", "share_clip", ",", "\n", "bits_weights_list", "=", "bits_choice", ",", "\n", "bits_activations_list", "=", "bits_choice", ",", "\n", ")", "\n", "# self.bn2 = nn.BatchNorm2d(planes)", "\n", "self", ".", "bn2", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "BatchNorm2d", "(", "planes", ")", "for", "i", "in", "bits_choice", "for", "j", "in", "bits_choice", "]", "\n", ")", "\n", "self", ".", "conv3", "=", "conv_type", "(", "\n", "planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "share_clip", "=", "share_clip", ",", "\n", "bits_weights_list", "=", "bits_choice", ",", "\n", "bits_activations_list", "=", "bits_choice", ",", "\n", ")", "\n", "# self.bn3 = nn.BatchNorm2d(out_planes)", "\n", "self", ".", "bn3", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "for", "i", "in", "bits_choice", "for", "j", "in", "bits_choice", "]", "\n", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "==", "1", "and", "in_planes", "!=", "out_planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "conv_type", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "share_clip", "=", "share_clip", ",", "\n", "bits_weights_list", "=", "bits_choice", ",", "\n", "bits_activations_list", "=", "bits_choice", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qsmobilenetv2_cifar.QSAMSMobileNetV2CifarBlock.forward": [[110, 132], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "qsmobilenetv2_cifar.QSAMSMobileNetV2CifarBlock.conv3", "qsmobilenetv2_cifar.QSAMSMobileNetV2CifarBlock.conv1", "qsmobilenetv2_cifar.QSAMSMobileNetV2CifarBlock.conv2", "qsmobilenetv2_cifar.QSAMSMobileNetV2CifarBlock.shortcut", "qsmobilenetv2_cifar.QSAMSMobileNetV2CifarBlock.bits_choice.index", "qsmobilenetv2_cifar.QSAMSMobileNetV2CifarBlock.bits_choice.index", "qsmobilenetv2_cifar.QSAMSMobileNetV2CifarBlock.bits_choice.index", "qsmobilenetv2_cifar.QSAMSMobileNetV2CifarBlock.bits_choice.index", "len", "qsmobilenetv2_cifar.QSAMSMobileNetV2CifarBlock.bits_choice.index", "len", "qsmobilenetv2_cifar.QSAMSMobileNetV2CifarBlock.bits_choice.index", "len"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "\n", "self", ".", "bn1", "[", "\n", "self", ".", "bits_choice", ".", "index", "(", "self", ".", "conv1", ".", "current_bit_weights", ")", "\n", "*", "len", "(", "self", ".", "bits_choice", ")", "\n", "+", "self", ".", "bits_choice", ".", "index", "(", "self", ".", "conv1", ".", "current_bit_activations", ")", "\n", "]", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", ")", "\n", "out", "=", "F", ".", "relu", "(", "\n", "self", ".", "bn2", "[", "\n", "self", ".", "bits_choice", ".", "index", "(", "self", ".", "conv2", ".", "current_bit_weights", ")", "\n", "*", "len", "(", "self", ".", "bits_choice", ")", "\n", "+", "self", ".", "bits_choice", ".", "index", "(", "self", ".", "conv2", ".", "current_bit_activations", ")", "\n", "]", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", ")", "\n", "out", "=", "self", ".", "bn3", "[", "\n", "self", ".", "bits_choice", ".", "index", "(", "self", ".", "conv3", ".", "current_bit_weights", ")", "\n", "*", "len", "(", "self", ".", "bits_choice", ")", "\n", "+", "self", ".", "bits_choice", ".", "index", "(", "self", ".", "conv3", ".", "current_bit_activations", ")", "\n", "]", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "=", "out", "+", "self", ".", "shortcut", "(", "x", ")", "if", "self", ".", "stride", "==", "1", "else", "out", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qsmobilenetv2_cifar.QSAMSMobileNetV2Cifar.__init__": [[146, 210], ["torch.Module.__init__", "tools.get_conv_fc_quan_type", "tools.get_conv_fc_quan_type", "torch.BatchNorm2d", "torch.BatchNorm2d", "qsmobilenetv2_cifar.QSAMSMobileNetV2Cifar._make_layers", "conv_type", "torch.ModuleList", "torch.ModuleList", "first_conv_type", "torch.Conv2d", "torch.Conv2d", "fc_type", "torch.Linear", "torch.Linear", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.__init__", "home.repos.pwc.inspect_result.zhuang-group_saq.models.tools.get_conv_fc_quan_type", "home.repos.pwc.inspect_result.zhuang-group_saq.models.tools.get_conv_fc_quan_type", "home.repos.pwc.inspect_result.zhuang-group_saq.models.mobilenetv2_cifar.MobileNetV2Cifar._make_layers"], ["def", "__init__", "(", "\n", "self", ",", "\n", "num_classes", "=", "10", ",", "\n", "quantize_first_last", "=", "False", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "quan_type", "=", "\"LIQ_wn_qsam\"", ",", "\n", "share_clip", "=", "False", ",", "\n", "bits_choice", "=", "[", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", "]", ",", "\n", ")", ":", "\n", "        ", "super", "(", "QSAMSMobileNetV2Cifar", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# NOTE: change conv1 stride 2 -> 1 for CIFAR10", "\n", "\n", "self", ".", "bits_choice", "=", "bits_choice", "\n", "conv_type", ",", "_", "=", "get_conv_fc_quan_type", "(", "quan_type", ")", "\n", "first_conv_type", ",", "fc_type", "=", "get_conv_fc_quan_type", "(", "\"LIQ_wn_qsam\"", ")", "\n", "if", "quantize_first_last", ":", "\n", "            ", "self", ".", "conv1", "=", "first_conv_type", "(", "\n", "3", ",", "\n", "32", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "bits_weights", "=", "8", ",", "\n", "bits_activations", "=", "32", ",", "\n", "share_clip", "=", "share_clip", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "3", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "layers", "=", "self", ".", "_make_layers", "(", "\n", "in_planes", "=", "32", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", "share_clip", "=", "share_clip", ",", "\n", "bits_choice", "=", "bits_choice", ",", "\n", ")", "\n", "self", ".", "conv2", "=", "conv_type", "(", "\n", "320", ",", "\n", "1280", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "share_clip", "=", "share_clip", ",", "\n", "bits_weights_list", "=", "bits_choice", ",", "\n", "bits_activations_list", "=", "bits_choice", ",", "\n", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "BatchNorm2d", "(", "1280", ")", "for", "i", "in", "bits_choice", "for", "j", "in", "bits_choice", "]", "\n", ")", "\n", "# nn.BatchNorm2d(1280)", "\n", "if", "quantize_first_last", ":", "\n", "            ", "self", ".", "linear", "=", "fc_type", "(", "\n", "1280", ",", "num_classes", ",", "bits_weights", "=", "8", ",", "bits_activations", "=", "8", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "1280", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qsmobilenetv2_cifar.QSAMSMobileNetV2Cifar._make_layers": [[211, 239], ["torch.Sequential", "torch.Sequential", "layers.append", "qsmobilenetv2_cifar.QSAMSMobileNetV2CifarBlock"], "methods", ["None"], ["", "", "def", "_make_layers", "(", "\n", "self", ",", "\n", "in_planes", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "conv_type", "=", "LIQ_wn_qsam", ".", "QConv2d", ",", "\n", "share_clip", "=", "False", ",", "\n", "bits_choice", "=", "[", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", "]", ",", "\n", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "expansion", ",", "out_planes", ",", "num_blocks", ",", "stride", "in", "self", ".", "cfg", ":", "\n", "            ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "for", "stride", "in", "strides", ":", "\n", "                ", "layers", ".", "append", "(", "\n", "QSAMSMobileNetV2CifarBlock", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "expansion", ",", "\n", "stride", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", "share_clip", "=", "share_clip", ",", "\n", "bits_choice", "=", "bits_choice", ",", "\n", ")", "\n", ")", "\n", "in_planes", "=", "out_planes", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qsmobilenetv2_cifar.QSAMSMobileNetV2Cifar.forward": [[240, 255], ["torch.relu", "torch.relu", "qsmobilenetv2_cifar.QSAMSMobileNetV2Cifar.layers", "torch.relu", "torch.relu", "torch.avg_pool2d", "torch.avg_pool2d", "qsmobilenetv2_cifar.QSAMSMobileNetV2Cifar.view", "qsmobilenetv2_cifar.QSAMSMobileNetV2Cifar.linear", "qsmobilenetv2_cifar.QSAMSMobileNetV2Cifar.bn1", "qsmobilenetv2_cifar.QSAMSMobileNetV2Cifar.size", "qsmobilenetv2_cifar.QSAMSMobileNetV2Cifar.conv1", "qsmobilenetv2_cifar.QSAMSMobileNetV2Cifar.conv2", "qsmobilenetv2_cifar.QSAMSMobileNetV2Cifar.bits_choice.index", "qsmobilenetv2_cifar.QSAMSMobileNetV2Cifar.bits_choice.index", "len"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.linear"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layers", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "\n", "self", ".", "bn2", "[", "\n", "self", ".", "bits_choice", ".", "index", "(", "self", ".", "conv2", ".", "current_bit_weights", ")", "\n", "*", "len", "(", "self", ".", "bits_choice", ")", "\n", "+", "self", ".", "bits_choice", ".", "index", "(", "self", ".", "conv2", ".", "current_bit_activations", ")", "\n", "]", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", ")", "\n", "# NOTE: change pooling kernel_size 7 -> 4 for CIFAR10", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qsmobilenetv2_cifar.qsamsmobilenetv2_cifar": [[257, 262], ["qsmobilenetv2_cifar.QSAMSMobileNetV2Cifar"], "function", ["None"], ["", "", "def", "qsamsmobilenetv2_cifar", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a QSAMSMobileNetV2CIFAR model.\n    \"\"\"", "\n", "model", "=", "QSAMSMobileNetV2Cifar", "(", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qspreresnet.QSAMSPreBasicBlock.__init__": [[104, 163], ["torch.Module.__init__", "torch.ModuleList", "torch.ReLU", "qspreresnet.qconv3x3", "torch.ModuleList", "torch.ReLU", "qspreresnet.qconv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.__init__", "home.repos.pwc.inspect_result.zhuang-group_saq.models.qmobilenetv2.qconv3x3", "home.repos.pwc.inspect_result.zhuang-group_saq.models.qmobilenetv2.qconv3x3"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_plane", ",", "\n", "out_plane", ",", "\n", "stride", "=", "1", ",", "\n", "downsample", "=", "None", ",", "\n", "block_type", "=", "\"both_preact\"", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "conv_type", "=", "LIQ_wn_qsam", ".", "QConv2d", ",", "\n", "share_clip", "=", "False", ",", "\n", "bits_choice", "=", "[", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", "]", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        init module and weights\n        :param in_plane: size of input plane\n        :param out_plane: size of output plane\n        :param stride: stride of convolutional layers, default 1\n        :param downsample: down sample type for expand dimension of input feature maps, default None\n        :param block_type: type of blocks, decide position of short cut, both-preact: short cut start from beginning\n        of the first segment, half-preact: short cut start from the position between the first segment and the second\n        one. default: both-preact\n        \"\"\"", "\n", "super", "(", "QSAMSPreBasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "block_type", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "bits_choice", "=", "bits_choice", "\n", "\n", "# self.bn1 = nn.BatchNorm2d(in_plane)", "\n", "self", ".", "bn1", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "BatchNorm2d", "(", "in_plane", ")", "for", "i", "in", "bits_choice", "for", "j", "in", "bits_choice", "]", "\n", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "conv1", "=", "qconv3x3", "(", "\n", "in_plane", ",", "\n", "out_plane", ",", "\n", "stride", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", "share_clip", "=", "share_clip", ",", "\n", "bits_choice", "=", "bits_choice", ",", "\n", ")", "\n", "# self.bn2 = nn.BatchNorm2d(out_plane)", "\n", "self", ".", "bn2", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "BatchNorm2d", "(", "out_plane", ")", "for", "i", "in", "bits_choice", "for", "j", "in", "bits_choice", "]", "\n", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "qconv3x3", "(", "\n", "out_plane", ",", "\n", "out_plane", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", "share_clip", "=", "share_clip", ",", "\n", "bits_choice", "=", "bits_choice", ",", "\n", ")", "\n", "self", ".", "block_index", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qspreresnet.QSAMSPreBasicBlock.forward": [[164, 207], ["qspreresnet.QSAMSPreBasicBlock.relu1", "qspreresnet.QSAMSPreBasicBlock.conv1", "qspreresnet.QSAMSPreBasicBlock.relu2", "qspreresnet.QSAMSPreBasicBlock.conv2", "qspreresnet.QSAMSPreBasicBlock.downsample", "qspreresnet.QSAMSPreBasicBlock.relu1", "qspreresnet.QSAMSPreBasicBlock.conv1", "qspreresnet.QSAMSPreBasicBlock.relu2", "qspreresnet.QSAMSPreBasicBlock.conv2", "qspreresnet.QSAMSPreBasicBlock.bits_choice.index", "qspreresnet.QSAMSPreBasicBlock.bits_choice.index", "qspreresnet.QSAMSPreBasicBlock.bits_choice.index", "len", "qspreresnet.QSAMSPreBasicBlock.bits_choice.index", "len", "qspreresnet.QSAMSPreBasicBlock.bits_choice.index", "qspreresnet.QSAMSPreBasicBlock.bits_choice.index", "qspreresnet.QSAMSPreBasicBlock.bits_choice.index", "len", "qspreresnet.QSAMSPreBasicBlock.bits_choice.index", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        forward procedure of residual module\n        :param x: input feature maps\n        :return: output feature maps\n        \"\"\"", "\n", "x", ",", "previous_wbit", ",", "previous_abit", "=", "x", "\n", "if", "self", ".", "name", "==", "\"half_preact\"", ":", "\n", "            ", "x", "=", "self", ".", "bn1", "[", "\n", "self", ".", "bits_choice", ".", "index", "(", "previous_wbit", ")", "*", "len", "(", "self", ".", "bits_choice", ")", "\n", "+", "self", ".", "bits_choice", ".", "index", "(", "previous_abit", ")", "\n", "]", "(", "x", ")", "\n", "x", "=", "self", ".", "relu1", "(", "x", ")", "\n", "residual", "=", "x", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "[", "\n", "self", ".", "bits_choice", ".", "index", "(", "self", ".", "conv1", ".", "current_bit_weights", ")", "\n", "*", "len", "(", "self", ".", "bits_choice", ")", "\n", "+", "self", ".", "bits_choice", ".", "index", "(", "self", ".", "conv1", ".", "current_bit_activations", ")", "\n", "]", "(", "x", ")", "\n", "x", "=", "self", ".", "relu2", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "", "elif", "self", ".", "name", "==", "\"both_preact\"", ":", "\n", "            ", "residual", "=", "x", "\n", "x", "=", "self", ".", "bn1", "[", "\n", "self", ".", "bits_choice", ".", "index", "(", "previous_wbit", ")", "*", "len", "(", "self", ".", "bits_choice", ")", "\n", "+", "self", ".", "bits_choice", ".", "index", "(", "previous_abit", ")", "\n", "]", "(", "x", ")", "\n", "x", "=", "self", ".", "relu1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "[", "\n", "self", ".", "bits_choice", ".", "index", "(", "self", ".", "conv1", ".", "current_bit_weights", ")", "\n", "*", "len", "(", "self", ".", "bits_choice", ")", "\n", "+", "self", ".", "bits_choice", ".", "index", "(", "self", ".", "conv1", ".", "current_bit_activations", ")", "\n", "]", "(", "x", ")", "\n", "x", "=", "self", ".", "relu2", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "downsample", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "residual", ")", "\n", "\n", "", "out", "=", "x", "+", "residual", "\n", "return", "[", "out", ",", "self", ".", "conv2", ".", "current_bit_weights", ",", "self", ".", "conv2", ".", "current_bit_activations", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qspreresnet.QSAMSPreResNet.__init__": [[214, 294], ["torch.Module.__init__", "tools.get_conv_fc_quan_type", "tools.get_conv_fc_quan_type", "qspreresnet.QSAMSPreResNet._make_layer", "qspreresnet.QSAMSPreResNet._make_layer", "qspreresnet.QSAMSPreResNet._make_layer", "torch.BatchNorm2d", "torch.ReLU", "torch.AvgPool2d", "qspreresnet.QSAMSPreResNet._init_weight", "qspreresnet.qconv3x3", "qspreresnet.conv3x3", "fc_type", "qspreresnet.linear"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.__init__", "home.repos.pwc.inspect_result.zhuang-group_saq.models.tools.get_conv_fc_quan_type", "home.repos.pwc.inspect_result.zhuang-group_saq.models.tools.get_conv_fc_quan_type", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._make_layer", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._make_layer", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._make_layer", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._init_weight", "home.repos.pwc.inspect_result.zhuang-group_saq.models.qmobilenetv2.qconv3x3", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.conv3x3", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.linear"], ["def", "__init__", "(", "\n", "self", ",", "\n", "depth", ",", "\n", "quantize_first_last", "=", "False", ",", "\n", "wide_factor", "=", "1", ",", "\n", "num_classes", "=", "10", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "quan_type", "=", "\"LIQ_wn_qsam\"", ",", "\n", "share_clip", "=", "False", ",", "\n", "bits_choice", "=", "[", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", "]", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        init model and weights\n        :param depth: depth of network\n        :param wide_factor: wide factor for deciding width of network, default is 1\n        :param num_classes: number of classes, related to labels. default 10\n        \"\"\"", "\n", "super", "(", "QSAMSPreResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_plane", "=", "16", "*", "wide_factor", "\n", "self", ".", "depth", "=", "depth", "\n", "n", "=", "(", "depth", "-", "2", ")", "/", "6", "\n", "\n", "conv_type", ",", "_", "=", "get_conv_fc_quan_type", "(", "quan_type", ")", "\n", "first_conv_type", ",", "fc_type", "=", "get_conv_fc_quan_type", "(", "\"LIQ_wn_qsam\"", ")", "\n", "\n", "if", "quantize_first_last", ":", "\n", "            ", "self", ".", "conv", "=", "qconv3x3", "(", "\n", "3", ",", "\n", "16", "*", "wide_factor", ",", "\n", "bits_weights", "=", "8", ",", "\n", "bits_activations", "=", "32", ",", "\n", "conv_type", "=", "first_conv_type", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "conv3x3", "(", "3", ",", "16", "*", "wide_factor", ")", "\n", "", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "\n", "QSAMSPreBasicBlock", ",", "\n", "16", "*", "wide_factor", ",", "\n", "n", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", "share_clip", "=", "share_clip", ",", "\n", "bits_choice", "=", "bits_choice", ",", "\n", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "\n", "QSAMSPreBasicBlock", ",", "\n", "32", "*", "wide_factor", ",", "\n", "n", ",", "\n", "stride", "=", "2", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", "share_clip", "=", "share_clip", ",", "\n", "bits_choice", "=", "bits_choice", ",", "\n", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "\n", "QSAMSPreBasicBlock", ",", "\n", "64", "*", "wide_factor", ",", "\n", "n", ",", "\n", "stride", "=", "2", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", "share_clip", "=", "share_clip", ",", "\n", "bits_choice", "=", "bits_choice", ",", "\n", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "64", "*", "wide_factor", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AvgPool2d", "(", "8", ")", "\n", "if", "quantize_first_last", ":", "\n", "            ", "self", ".", "fc", "=", "fc_type", "(", "\n", "64", "*", "wide_factor", ",", "num_classes", ",", "bits_weights", "=", "8", ",", "bits_activations", "=", "8", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", "=", "linear", "(", "64", "*", "wide_factor", ",", "num_classes", ")", "\n", "\n", "", "self", ".", "_init_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qspreresnet.QSAMSPreResNet._init_weight": [[295, 304], ["qspreresnet.QSAMSPreResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_init_weight", "(", "self", ")", ":", "\n", "# init layer parameters", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "# elif isinstance(m, nn.Linear):", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qspreresnet.QSAMSPreResNet._make_layer": [[307, 369], ["layers.append", "range", "torch.Sequential", "qspreresnet.qconv1x1", "block", "int", "layers.append", "block"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.models.qmobilenetv2.qconv1x1"], ["", "", "", "def", "_make_layer", "(", "\n", "self", ",", "\n", "block", ",", "\n", "out_plane", ",", "\n", "n_blocks", ",", "\n", "stride", "=", "1", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "conv_type", "=", "LIQ_wn_qsam", ".", "QConv2d", ",", "\n", "share_clip", "=", "False", ",", "\n", "bits_choice", "=", "[", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", "]", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        make residual blocks, including short cut and residual function\n        :param block: type of basic block to build network\n        :param out_plane: size of output plane\n        :param n_blocks: number of blocks on every segment\n        :param stride: stride of convolutional neural network, default 1\n        :return: residual blocks\n        \"\"\"", "\n", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "in_plane", "!=", "out_plane", ":", "\n", "            ", "downsample", "=", "qconv1x1", "(", "\n", "self", ".", "in_plane", ",", "\n", "out_plane", ",", "\n", "stride", "=", "stride", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", "share_clip", "=", "share_clip", ",", "\n", "bits_choice", "=", "bits_choice", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "\n", "self", ".", "in_plane", ",", "\n", "out_plane", ",", "\n", "stride", ",", "\n", "downsample", ",", "\n", "block_type", "=", "\"half_preact\"", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", "share_clip", "=", "share_clip", ",", "\n", "bits_choice", "=", "bits_choice", ",", "\n", ")", "\n", ")", "\n", "self", ".", "in_plane", "=", "out_plane", "\n", "for", "i", "in", "range", "(", "1", ",", "int", "(", "n_blocks", ")", ")", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "block", "(", "\n", "self", ".", "in_plane", ",", "\n", "out_plane", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", "share_clip", "=", "share_clip", ",", "\n", "bits_choice", "=", "bits_choice", ",", "\n", ")", "\n", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qspreresnet.QSAMSPreResNet.forward": [[370, 387], ["qspreresnet.QSAMSPreResNet.conv", "qspreresnet.QSAMSPreResNet.layer1", "qspreresnet.QSAMSPreResNet.layer2", "qspreresnet.QSAMSPreResNet.layer3", "qspreresnet.QSAMSPreResNet.bn", "qspreresnet.QSAMSPreResNet.relu", "qspreresnet.QSAMSPreResNet.avg_pool", "qspreresnet.QSAMSPreResNet.view", "qspreresnet.QSAMSPreResNet.fc", "qspreresnet.QSAMSPreResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        forward procedure of model\n        :param x: input feature maps\n        :return: output feature maps\n        \"\"\"", "\n", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "out", "=", "self", ".", "layer1", "(", "[", "out", ",", "4", ",", "4", "]", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", ",", "bitw", ",", "bita", "=", "out", "\n", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "avg_pool", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qspreresnet.conv1x1": [[22, 28], ["torch.Conv2d"], "function", ["None"], ["def", "conv1x1", "(", "in_plane", ",", "out_plane", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    1x1 convolutional layer\n    \"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_plane", ",", "out_plane", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qspreresnet.qconv1x1": [[31, 56], ["conv_type"], "function", ["None"], ["", "def", "qconv1x1", "(", "\n", "in_plane", ",", "\n", "out_plane", ",", "\n", "stride", "=", "1", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "conv_type", "=", "LIQ_wn_qsam", ".", "QConv2d", ",", "\n", "share_clip", "=", "False", ",", "\n", "bits_choice", "=", "[", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", "]", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n    1x1 quantized convolutional layer\n    \"\"\"", "\n", "return", "conv_type", "(", "\n", "in_plane", ",", "\n", "out_plane", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "share_clip", "=", "share_clip", ",", "\n", "bits_weights_list", "=", "bits_choice", ",", "\n", "bits_activations_list", "=", "bits_choice", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qspreresnet.conv3x3": [[59, 63], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qspreresnet.qconv3x3": [[66, 89], ["conv_type"], "function", ["None"], ["", "def", "qconv3x3", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "stride", "=", "1", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "conv_type", "=", "LIQ_wn_qsam", ".", "QConv2d", ",", "\n", "share_clip", "=", "False", ",", "\n", "bits_choice", "=", "[", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", "]", ",", "\n", ")", ":", "\n", "    ", "\"3x3 quantized convolution with padding\"", "\n", "return", "conv_type", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "share_clip", "=", "share_clip", ",", "\n", "bits_weights_list", "=", "bits_choice", ",", "\n", "bits_activations_list", "=", "bits_choice", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qspreresnet.linear": [[92, 94], ["torch.Linear"], "function", ["None"], ["", "def", "linear", "(", "in_features", ",", "out_features", ")", ":", "\n", "    ", "return", "nn", ".", "Linear", "(", "in_features", ",", "out_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qspreresnet.qsamspreresnet20": [[389, 394], ["qspreresnet.QSAMSPreResNet"], "function", ["None"], ["", "", "def", "qsamspreresnet20", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a QSAMSPreResNet-20 model.\n    \"\"\"", "\n", "model", "=", "QSAMSPreResNet", "(", "depth", "=", "20", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qspreresnet.qsamspreresnet32": [[396, 401], ["qspreresnet.QSAMSPreResNet"], "function", ["None"], ["", "def", "qsamspreresnet32", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a QSAMSPreResNet-32 model.\n    \"\"\"", "\n", "model", "=", "QSAMSPreResNet", "(", "depth", "=", "32", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qspreresnet.qsamspreresnet44": [[403, 408], ["qspreresnet.QSAMSPreResNet"], "function", ["None"], ["", "def", "qsamspreresnet44", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a QSAMSPreResNet-44 model.\n    \"\"\"", "\n", "model", "=", "QSAMSPreResNet", "(", "depth", "=", "44", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qspreresnet.qsamspreresnet56": [[410, 415], ["qspreresnet.QSAMSPreResNet"], "function", ["None"], ["", "def", "qsamspreresnet56", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a QSAMSPreResNet-56 model.\n    \"\"\"", "\n", "model", "=", "QSAMSPreResNet", "(", "depth", "=", "56", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qspreresnet.qsamspreresnet110": [[417, 422], ["qspreresnet.QSAMSPreResNet"], "function", ["None"], ["", "def", "qsamspreresnet110", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a QSAMSPreResNet-110 model.\n    \"\"\"", "\n", "model", "=", "QSAMSPreResNet", "(", "depth", "=", "110", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.LIQ_wn_qsam.QConv2d.__init__": [[12, 40], ["quan_models.LIQ.QConv2d.__init__"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "True", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "**", "args", "\n", ")", ":", "\n", "        ", "super", "(", "QConv2d", ",", "self", ")", ".", "__init__", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "dilation", ",", "\n", "groups", ",", "\n", "bias", ",", "\n", "bits_weights", ",", "\n", "bits_activations", ",", "\n", ")", "\n", "self", ".", "is_second", "=", "False", "\n", "self", ".", "epsilon", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.LIQ_wn_qsam.QConv2d.quantize_weight": [[41, 53], ["quan_models.LIQ.normalization_on_weights", "quan_models.LIQ.quantization", "LIQ_wn_qsam.QConv2d.x.retain_grad"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.dorefa.normalization_on_weights", "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.dorefa.quantization"], ["", "def", "quantize_weight", "(", "self", ",", "x", ",", "k", ",", "clip_value", ")", ":", "\n", "        ", "if", "k", "==", "32", ":", "\n", "            ", "return", "x", "\n", "", "x", "=", "normalization_on_weights", "(", "x", ",", "clip_value", ")", "\n", "x", "=", "(", "x", "+", "1.0", ")", "/", "2.0", "\n", "x", "=", "quantization", "(", "x", ",", "k", ")", "\n", "x", "=", "x", "*", "2.0", "-", "1.0", "\n", "x", "=", "x", "*", "clip_value", "\n", "self", ".", "x", "=", "x", "\n", "if", "self", ".", "x", ".", "requires_grad", ":", "\n", "            ", "self", ".", "x", ".", "retain_grad", "(", ")", "\n", "", "return", "self", ".", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.LIQ_wn_qsam.QConv2d.quantize_weight_add_epsilon": [[54, 66], ["quan_models.LIQ.normalization_on_weights", "quan_models.LIQ.quantization", "LIQ_wn_qsam.QConv2d.x.retain_grad"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.dorefa.normalization_on_weights", "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.dorefa.quantization"], ["", "def", "quantize_weight_add_epsilon", "(", "self", ",", "x", ",", "k", ",", "clip_value", ",", "epsilon", ")", ":", "\n", "        ", "if", "k", "==", "32", ":", "\n", "            ", "return", "x", "\n", "", "x", "=", "normalization_on_weights", "(", "x", ",", "clip_value", ")", "\n", "x", "=", "(", "x", "+", "1.0", ")", "/", "2.0", "\n", "x", "=", "quantization", "(", "x", ",", "k", ")", "\n", "x", "=", "x", "*", "2.0", "-", "1.0", "\n", "x", "=", "x", "*", "clip_value", "\n", "self", ".", "x", "=", "x", "\n", "if", "self", ".", "x", ".", "requires_grad", ":", "\n", "            ", "self", ".", "x", ".", "retain_grad", "(", ")", "\n", "", "return", "self", ".", "x", "+", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.LIQ_wn_qsam.QConv2d.forward": [[67, 97], ["quan_models.LIQ.quantize_activation", "LIQ_wn_qsam.QConv2d.weight.data.mean", "LIQ_wn_qsam.QConv2d.weight.data.std", "LIQ_wn_qsam.QConv2d.weight.add().div", "torch.nn.functional.conv2d", "LIQ_wn_qsam.QConv2d.activation_clip_value.abs", "LIQ_wn_qsam.QConv2d.quantize_weight", "LIQ_wn_qsam.QConv2d.quantize_weight_add_epsilon", "LIQ_wn_qsam.QConv2d.weight.add", "LIQ_wn_qsam.QConv2d.weight_clip_value.abs", "LIQ_wn_qsam.QConv2d.weight_clip_value.abs"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.dorefa.quantize_activation", "home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQLinear.quantize_weight", "home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQLinear.quantize_weight_add_epsilon"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "quantized_input", "=", "quantize_activation", "(", "\n", "input", ",", "self", ".", "bits_activations", ",", "self", ".", "activation_clip_value", ".", "abs", "(", ")", "\n", ")", "\n", "weight_mean", "=", "self", ".", "weight", ".", "data", ".", "mean", "(", ")", "\n", "weight_std", "=", "self", ".", "weight", ".", "data", ".", "std", "(", ")", "\n", "normalized_weight", "=", "self", ".", "weight", ".", "add", "(", "-", "weight_mean", ")", ".", "div", "(", "weight_std", ")", "\n", "if", "not", "self", ".", "is_second", ":", "\n", "            ", "quantized_weight", "=", "self", ".", "quantize_weight", "(", "\n", "normalized_weight", ",", "self", ".", "bits_weights", ",", "self", ".", "weight_clip_value", ".", "abs", "(", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "quantized_weight", "=", "self", ".", "quantize_weight_add_epsilon", "(", "\n", "normalized_weight", ",", "\n", "self", ".", "bits_weights", ",", "\n", "self", ".", "weight_clip_value", ".", "abs", "(", ")", ",", "\n", "self", ".", "epsilon", ",", "\n", ")", "\n", "\n", "", "output", "=", "F", ".", "conv2d", "(", "\n", "quantized_input", ",", "\n", "quantized_weight", ",", "\n", "self", ".", "bias", ",", "\n", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "\n", "self", ".", "dilation", ",", "\n", "self", ".", "groups", ",", "\n", ")", "\n", "self", ".", "output_shape", "=", "output", ".", "shape", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.LIQ_wn_qsam.QConv2d.set_first_forward": [[98, 100], ["None"], "methods", ["None"], ["", "def", "set_first_forward", "(", "self", ")", ":", "\n", "        ", "self", ".", "is_second", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.LIQ_wn_qsam.QConv2d.set_second_forward": [[101, 103], ["None"], "methods", ["None"], ["", "def", "set_second_forward", "(", "self", ")", ":", "\n", "        ", "self", ".", "is_second", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.LIQ_wn_qsam.QConv2d.extra_repr": [[104, 108], ["super().extra_repr", "s.replace.replace.replace"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQLinear.extra_repr"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "s", "=", "super", "(", ")", ".", "extra_repr", "(", ")", "\n", "s", "=", "s", ".", "replace", "(", "\"LIQ_conv2d\"", ",", "\"LIQ_wn_qsam_conv2d\"", ")", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.LIQ_wn_qsam.QLinear.__init__": [[115, 127], ["quan_models.LIQ.QLinear.__init__"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.__init__"], ["def", "__init__", "(", "\n", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ",", "bits_weights", "=", "32", ",", "bits_activations", "=", "32", "\n", ")", ":", "\n", "        ", "super", "(", "QLinear", ",", "self", ")", ".", "__init__", "(", "\n", "in_features", ",", "\n", "out_features", ",", "\n", "bias", "=", "bias", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", ")", "\n", "self", ".", "is_second", "=", "False", "\n", "self", ".", "epsilon", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.LIQ_wn_qsam.QLinear.quantize_weight": [[128, 140], ["quan_models.LIQ.normalization_on_weights", "quan_models.LIQ.quantization", "LIQ_wn_qsam.QLinear.x.retain_grad"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.dorefa.normalization_on_weights", "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.dorefa.quantization"], ["", "def", "quantize_weight", "(", "self", ",", "x", ",", "k", ",", "clip_value", ")", ":", "\n", "        ", "if", "k", "==", "32", ":", "\n", "            ", "return", "x", "\n", "", "x", "=", "normalization_on_weights", "(", "x", ",", "clip_value", ")", "\n", "x", "=", "(", "x", "+", "1.0", ")", "/", "2.0", "\n", "x", "=", "quantization", "(", "x", ",", "k", ")", "\n", "x", "=", "x", "*", "2.0", "-", "1.0", "\n", "x", "=", "x", "*", "clip_value", "\n", "self", ".", "x", "=", "x", "\n", "if", "self", ".", "x", ".", "requires_grad", ":", "\n", "            ", "self", ".", "x", ".", "retain_grad", "(", ")", "\n", "", "return", "self", ".", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.LIQ_wn_qsam.QLinear.quantize_weight_add_epsilon": [[141, 153], ["quan_models.LIQ.normalization_on_weights", "quan_models.LIQ.quantization", "LIQ_wn_qsam.QLinear.x.retain_grad"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.dorefa.normalization_on_weights", "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.dorefa.quantization"], ["", "def", "quantize_weight_add_epsilon", "(", "self", ",", "x", ",", "k", ",", "clip_value", ",", "epsilon", ")", ":", "\n", "        ", "if", "k", "==", "32", ":", "\n", "            ", "return", "x", "\n", "", "x", "=", "normalization_on_weights", "(", "x", ",", "clip_value", ")", "\n", "x", "=", "(", "x", "+", "1.0", ")", "/", "2.0", "\n", "x", "=", "quantization", "(", "x", ",", "k", ")", "\n", "x", "=", "x", "*", "2.0", "-", "1.0", "\n", "x", "=", "x", "*", "clip_value", "\n", "self", ".", "x", "=", "x", "\n", "if", "self", ".", "x", ".", "requires_grad", ":", "\n", "            ", "self", ".", "x", ".", "retain_grad", "(", ")", "\n", "", "return", "self", ".", "x", "+", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.LIQ_wn_qsam.QLinear.forward": [[154, 176], ["quan_models.LIQ.quantize_activation", "torch.nn.functional.linear", "LIQ_wn_qsam.QLinear.init_weight_clip_val", "LIQ_wn_qsam.QLinear.init_activation_clip_val", "LIQ_wn_qsam.QLinear.activation_clip_value.abs", "LIQ_wn_qsam.QLinear.quantize_weight", "LIQ_wn_qsam.QLinear.quantize_weight_add_epsilon", "LIQ_wn_qsam.QLinear.weight_clip_value.abs", "LIQ_wn_qsam.QLinear.weight_clip_value.abs"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.dorefa.quantize_activation", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.linear", "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.LIQ.QLinear.init_weight_clip_val", "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.LIQ.QLinear.init_activation_clip_val", "home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQLinear.quantize_weight", "home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQLinear.quantize_weight_add_epsilon"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "not", "self", ".", "init_state", ":", "\n", "            ", "self", ".", "init_state", "=", "True", "\n", "self", ".", "init_weight_clip_val", "(", ")", "\n", "self", ".", "init_activation_clip_val", "(", "input", ")", "\n", "", "quantized_input", "=", "quantize_activation", "(", "\n", "input", ",", "self", ".", "bits_activations", ",", "self", ".", "activation_clip_value", ".", "abs", "(", ")", "\n", ")", "\n", "if", "not", "self", ".", "is_second", ":", "\n", "            ", "quantized_weight", "=", "self", ".", "quantize_weight", "(", "\n", "self", ".", "weight", ",", "self", ".", "bits_weights", ",", "self", ".", "weight_clip_value", ".", "abs", "(", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "quantized_weight", "=", "self", ".", "quantize_weight_add_epsilon", "(", "\n", "self", ".", "weight", ",", "\n", "self", ".", "bits_weights", ",", "\n", "self", ".", "weight_clip_value", ".", "abs", "(", ")", ",", "\n", "self", ".", "epsilon", ",", "\n", ")", "\n", "", "output", "=", "F", ".", "linear", "(", "quantized_input", ",", "quantized_weight", ",", "self", ".", "bias", ")", "\n", "self", ".", "output_shape", "=", "output", ".", "shape", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.LIQ_wn_qsam.QLinear.set_first_forward": [[177, 179], ["None"], "methods", ["None"], ["", "def", "set_first_forward", "(", "self", ")", ":", "\n", "        ", "self", ".", "is_second", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.LIQ_wn_qsam.QLinear.set_second_forward": [[180, 182], ["None"], "methods", ["None"], ["", "def", "set_second_forward", "(", "self", ")", ":", "\n", "        ", "self", ".", "is_second", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.LIQ_wn_qsam.QLinear.extra_repr": [[183, 189], ["super().extra_repr"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQLinear.extra_repr"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "s", "=", "super", "(", ")", ".", "extra_repr", "(", ")", "\n", "s", "+=", "\", bits_weights={}\"", ".", "format", "(", "self", ".", "bits_weights", ")", "\n", "s", "+=", "\", bits_activations={}\"", ".", "format", "(", "self", ".", "bits_activations", ")", "\n", "s", "+=", "\", method={}\"", ".", "format", "(", "\"LIQ_qsam_linear\"", ")", "\n", "return", "s", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qsresnet.QSAMSBasicBlock.__init__": [[64, 110], ["torch.Module.__init__", "qsresnet.qconv3x3", "torch.ModuleList", "torch.ModuleList", "torch.ReLU", "torch.ReLU", "qsresnet.qconv3x3", "torch.ModuleList", "torch.ModuleList", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.__init__", "home.repos.pwc.inspect_result.zhuang-group_saq.models.qmobilenetv2.qconv3x3", "home.repos.pwc.inspect_result.zhuang-group_saq.models.qmobilenetv2.qconv3x3"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stride", "=", "1", ",", "\n", "downsample", "=", "None", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "conv_type", "=", "LIQ_wn_qsam", ".", "QConv2d", ",", "\n", "share_clip", "=", "False", ",", "\n", "bits_choice", "=", "[", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", "]", ",", "\n", ")", ":", "\n", "        ", "super", "(", "QSAMSBasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "\"resnet-basic\"", "\n", "self", ".", "bits_choice", "=", "bits_choice", "\n", "self", ".", "conv1", "=", "qconv3x3", "(", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stride", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", "share_clip", "=", "share_clip", ",", "\n", "bits_choice", "=", "bits_choice", ",", "\n", ")", "\n", "# self.bn1 = nn.BatchNorm2d(planes)", "\n", "self", ".", "bn1", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "BatchNorm2d", "(", "planes", ")", "for", "i", "in", "bits_choice", "for", "j", "in", "bits_choice", "]", "\n", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "qconv3x3", "(", "\n", "planes", ",", "\n", "planes", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", "share_clip", "=", "share_clip", ",", "\n", "bits_choice", "=", "bits_choice", ",", "\n", ")", "\n", "# self.bn2 = nn.BatchNorm2d(planes)", "\n", "self", ".", "bn2", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "BatchNorm2d", "(", "planes", ")", "for", "i", "in", "bits_choice", "for", "j", "in", "bits_choice", "]", "\n", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "block_index", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qsresnet.QSAMSBasicBlock.forward": [[111, 144], ["qsresnet.QSAMSBasicBlock.conv1", "qsresnet.QSAMSBasicBlock.relu", "qsresnet.QSAMSBasicBlock.conv2", "qsresnet.QSAMSBasicBlock.relu", "qsresnet.QSAMSBasicBlock.bits_choice.index", "qsresnet.QSAMSBasicBlock.bits_choice.index", "qsresnet.QSAMSBasicBlock.bits_choice.index", "len", "qsresnet.QSAMSBasicBlock.bits_choice.index", "len", "qsresnet.QSAMSBasicBlock.bits_choice.index", "qsresnet.QSAMSBasicBlock.bits_choice.index", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "# out = self.bn1(out)", "\n", "out", "=", "self", ".", "bn1", "[", "\n", "self", ".", "bits_choice", ".", "index", "(", "self", ".", "conv1", ".", "current_bit_weights", ")", "\n", "*", "len", "(", "self", ".", "bits_choice", ")", "\n", "+", "self", ".", "bits_choice", ".", "index", "(", "self", ".", "conv1", ".", "current_bit_activations", ")", "\n", "]", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "# out = self.bn2(out)", "\n", "out", "=", "self", ".", "bn2", "[", "\n", "self", ".", "bits_choice", ".", "index", "(", "self", ".", "conv2", ".", "current_bit_weights", ")", "\n", "*", "len", "(", "self", ".", "bits_choice", ")", "\n", "+", "self", ".", "bits_choice", ".", "index", "(", "self", ".", "conv2", ".", "current_bit_activations", ")", "\n", "]", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "# residual = self.downsample(x)", "\n", "            ", "residual", "=", "self", ".", "downsample", "[", "0", "]", "(", "x", ")", "\n", "residual", "=", "self", ".", "downsample", "[", "1", "]", "[", "\n", "self", ".", "bits_choice", ".", "index", "(", "self", ".", "conv2", ".", "current_bit_weights", ")", "\n", "*", "len", "(", "self", ".", "bits_choice", ")", "\n", "+", "self", ".", "bits_choice", ".", "index", "(", "self", ".", "conv2", ".", "current_bit_activations", ")", "\n", "]", "(", "residual", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qsresnet.QSAMSBottleneck.__init__": [[149, 215], ["torch.Module.__init__", "conv_type", "torch.ModuleList", "torch.ModuleList", "conv_type", "torch.ModuleList", "torch.ModuleList", "conv_type", "torch.ModuleList", "torch.ModuleList", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stride", "=", "1", ",", "\n", "downsample", "=", "None", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "conv_type", "=", "LIQ_wn_qsam", ".", "QConv2d", ",", "\n", "share_clip", "=", "False", ",", "\n", "bits_choice", "=", "[", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", "]", ",", "\n", ")", ":", "\n", "        ", "super", "(", "QSAMSBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "\"resnet-bottleneck\"", "\n", "self", ".", "bits_choice", "=", "bits_choice", "\n", "self", ".", "conv1", "=", "conv_type", "(", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "share_clip", "=", "share_clip", ",", "\n", "bits_weights_list", "=", "bits_choice", ",", "\n", "bits_activations_list", "=", "bits_choice", ",", "\n", ")", "\n", "# self.bn1 = nn.BatchNorm2d(planes)", "\n", "self", ".", "bn1", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "BatchNorm2d", "(", "planes", ")", "for", "i", "in", "bits_choice", "for", "j", "in", "bits_choice", "]", "\n", ")", "\n", "self", ".", "conv2", "=", "conv_type", "(", "\n", "planes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "share_clip", "=", "share_clip", ",", "\n", "bits_weights_list", "=", "bits_choice", ",", "\n", "bits_activations_list", "=", "bits_choice", ",", "\n", ")", "\n", "# self.bn2 = nn.BatchNorm2d(planes)", "\n", "self", ".", "bn2", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "BatchNorm2d", "(", "planes", ")", "for", "i", "in", "bits_choice", "for", "j", "in", "bits_choice", "]", "\n", ")", "\n", "self", ".", "conv3", "=", "conv_type", "(", "\n", "planes", ",", "\n", "planes", "*", "4", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "share_clip", "=", "share_clip", ",", "\n", "bits_weights_list", "=", "bits_choice", ",", "\n", "bits_activations_list", "=", "bits_choice", ",", "\n", ")", "\n", "# self.bn3 = nn.BatchNorm2d(planes * 4)", "\n", "self", ".", "bn3", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "for", "i", "in", "bits_choice", "for", "j", "in", "bits_choice", "]", "\n", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "block_index", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qsresnet.QSAMSBottleneck.forward": [[216, 258], ["qsresnet.QSAMSBottleneck.conv1", "qsresnet.QSAMSBottleneck.relu", "qsresnet.QSAMSBottleneck.conv2", "qsresnet.QSAMSBottleneck.relu", "qsresnet.QSAMSBottleneck.conv3", "qsresnet.QSAMSBottleneck.relu", "qsresnet.QSAMSBottleneck.bits_choice.index", "qsresnet.QSAMSBottleneck.bits_choice.index", "qsresnet.QSAMSBottleneck.bits_choice.index", "qsresnet.QSAMSBottleneck.bits_choice.index", "len", "qsresnet.QSAMSBottleneck.bits_choice.index", "len", "qsresnet.QSAMSBottleneck.bits_choice.index", "len", "qsresnet.QSAMSBottleneck.bits_choice.index", "qsresnet.QSAMSBottleneck.bits_choice.index", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "# out = self.bn1(out)", "\n", "out", "=", "self", ".", "bn1", "[", "\n", "self", ".", "bits_choice", ".", "index", "(", "self", ".", "conv1", ".", "current_bit_weights", ")", "\n", "*", "len", "(", "self", ".", "bits_choice", ")", "\n", "+", "self", ".", "bits_choice", ".", "index", "(", "self", ".", "conv1", ".", "current_bit_activations", ")", "\n", "]", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "# out = self.bn2(out)", "\n", "out", "=", "self", ".", "bn2", "[", "\n", "self", ".", "bits_choice", ".", "index", "(", "self", ".", "conv2", ".", "current_bit_weights", ")", "\n", "*", "len", "(", "self", ".", "bits_choice", ")", "\n", "+", "self", ".", "bits_choice", ".", "index", "(", "self", ".", "conv2", ".", "current_bit_activations", ")", "\n", "]", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "# out = self.bn3(out)", "\n", "out", "=", "self", ".", "bn3", "[", "\n", "self", ".", "bits_choice", ".", "index", "(", "self", ".", "conv3", ".", "current_bit_weights", ")", "\n", "*", "len", "(", "self", ".", "bits_choice", ")", "\n", "+", "self", ".", "bits_choice", ".", "index", "(", "self", ".", "conv3", ".", "current_bit_activations", ")", "\n", "]", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "[", "0", "]", "(", "x", ")", "\n", "residual", "=", "self", ".", "downsample", "[", "1", "]", "[", "\n", "self", ".", "bits_choice", ".", "index", "(", "self", ".", "conv3", ".", "current_bit_weights", ")", "\n", "*", "len", "(", "self", ".", "bits_choice", ")", "\n", "+", "self", ".", "bits_choice", ".", "index", "(", "self", ".", "conv3", ".", "current_bit_activations", ")", "\n", "]", "(", "residual", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qsresnet.QSAMSResNet.__init__": [[261, 369], ["torch.Module.__init__", "tools.get_conv_fc_quan_type", "tools.get_conv_fc_quan_type", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "qsresnet.QSAMSResNet._make_layer", "qsresnet.QSAMSResNet._make_layer", "qsresnet.QSAMSResNet._make_layer", "qsresnet.QSAMSResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "qsresnet.QSAMSResNet.modules", "torch.Conv2d", "torch.Conv2d", "first_conv_type", "torch.Linear", "torch.Linear", "fc_type", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.__init__", "home.repos.pwc.inspect_result.zhuang-group_saq.models.tools.get_conv_fc_quan_type", "home.repos.pwc.inspect_result.zhuang-group_saq.models.tools.get_conv_fc_quan_type", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._make_layer", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._make_layer", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._make_layer", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._make_layer"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "depth", ",", "\n", "num_classes", "=", "1000", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "quantize_first_last", "=", "False", ",", "\n", "quan_type", "=", "\"LIQ_wn_qsam\"", ",", "\n", "share_clip", "=", "False", ",", "\n", "bits_choice", "=", "[", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", "]", ",", "\n", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "QSAMSResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "depth", "<", "50", ":", "\n", "            ", "block", "=", "QSAMSBasicBlock", "\n", "", "else", ":", "\n", "            ", "block", "=", "QSAMSBottleneck", "\n", "\n", "", "if", "depth", "==", "18", ":", "\n", "            ", "layers", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", "\n", "", "elif", "depth", "==", "34", ":", "\n", "            ", "layers", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", "\n", "", "elif", "depth", "==", "50", ":", "\n", "            ", "layers", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", "\n", "", "elif", "depth", "==", "101", ":", "\n", "            ", "layers", "=", "[", "3", ",", "4", ",", "23", ",", "3", "]", "\n", "", "elif", "depth", "==", "152", ":", "\n", "            ", "layers", "=", "[", "3", ",", "8", ",", "36", ",", "3", "]", "\n", "\n", "", "conv_type", ",", "_", "=", "get_conv_fc_quan_type", "(", "quan_type", ")", "\n", "first_conv_type", ",", "fc_type", "=", "get_conv_fc_quan_type", "(", "\"LIQ_wn_qsam\"", ")", "\n", "\n", "if", "not", "quantize_first_last", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "first_conv_type", "(", "\n", "3", ",", "\n", "64", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "3", ",", "\n", "bias", "=", "False", ",", "\n", "bits_weights", "=", "8", ",", "\n", "bits_activations", "=", "32", ",", "\n", "share_clip", "=", "share_clip", ",", "\n", ")", "\n", "", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "64", ",", "\n", "layers", "[", "0", "]", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", "share_clip", "=", "share_clip", ",", "\n", "bits_choice", "=", "bits_choice", ",", "\n", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "128", ",", "\n", "layers", "[", "1", "]", ",", "\n", "stride", "=", "2", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", "share_clip", "=", "share_clip", ",", "\n", "bits_choice", "=", "bits_choice", ",", "\n", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "256", ",", "\n", "layers", "[", "2", "]", ",", "\n", "stride", "=", "2", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", "share_clip", "=", "share_clip", ",", "\n", "bits_choice", "=", "bits_choice", ",", "\n", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "512", ",", "\n", "layers", "[", "3", "]", ",", "\n", "stride", "=", "2", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", "share_clip", "=", "share_clip", ",", "\n", "bits_choice", "=", "bits_choice", ",", "\n", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "if", "not", "quantize_first_last", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", "=", "fc_type", "(", "\n", "512", "*", "block", ".", "expansion", ",", "num_classes", ",", "bits_weights", "=", "8", ",", "bits_activations", "=", "8", "\n", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qsresnet.QSAMSResNet._make_layer": [[370, 436], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "conv_type", "torch.ModuleList", "torch.ModuleList", "block", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "\n", "self", ",", "\n", "block", ",", "\n", "planes", ",", "\n", "blocks", ",", "\n", "stride", "=", "1", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "conv_type", "=", "LIQ_wn_qsam", ".", "QConv2d", ",", "\n", "share_clip", "=", "False", ",", "\n", "bits_choice", "=", "[", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", "]", ",", "\n", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv_type", "(", "\n", "self", ".", "inplanes", ",", "\n", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "share_clip", "=", "share_clip", ",", "\n", "bits_weights_list", "=", "bits_choice", ",", "\n", "bits_activations_list", "=", "bits_choice", ",", "\n", ")", ",", "\n", "# nn.BatchNorm2d(planes * block.expansion),", "\n", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", "\n", "for", "i", "in", "bits_choice", "\n", "for", "j", "in", "bits_choice", "\n", "]", "\n", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "\n", "self", ".", "inplanes", ",", "\n", "planes", ",", "\n", "stride", ",", "\n", "downsample", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", "share_clip", "=", "share_clip", ",", "\n", "bits_choice", "=", "bits_choice", ",", "\n", ")", "\n", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "block", "(", "\n", "self", ".", "inplanes", ",", "\n", "planes", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", "share_clip", "=", "share_clip", ",", "\n", "bits_choice", "=", "bits_choice", ",", "\n", ")", "\n", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qsresnet.QSAMSResNet.forward": [[437, 453], ["qsresnet.QSAMSResNet.conv1", "qsresnet.QSAMSResNet.bn1", "qsresnet.QSAMSResNet.relu", "qsresnet.QSAMSResNet.maxpool", "qsresnet.QSAMSResNet.layer1", "qsresnet.QSAMSResNet.layer2", "qsresnet.QSAMSResNet.layer3", "qsresnet.QSAMSResNet.layer4", "qsresnet.QSAMSResNet.avgpool", "qsresnet.QSAMSResNet.view", "qsresnet.QSAMSResNet.fc", "qsresnet.QSAMSResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qsresnet.conv3x3": [[28, 32], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qsresnet.qconv3x3": [[35, 58], ["conv_type"], "function", ["None"], ["", "def", "qconv3x3", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "stride", "=", "1", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "conv_type", "=", "LIQ_wn_qsam", ".", "QConv2d", ",", "\n", "share_clip", "=", "False", ",", "\n", "bits_choice", "=", "[", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", "]", ",", "\n", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "conv_type", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "share_clip", "=", "share_clip", ",", "\n", "bits_weights_list", "=", "bits_choice", ",", "\n", "bits_activations_list", "=", "bits_choice", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qsresnet.qsamsresnet18": [[455, 462], ["qsresnet.QSAMSResNet", "QSAMSResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "def", "qsamsresnet18", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a QSAMSResNet-18 model.\n    \"\"\"", "\n", "model", "=", "QSAMSResNet", "(", "depth", "=", "18", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet18\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qsresnet.qsamsresnet34": [[464, 471], ["qsresnet.QSAMSResNet", "QSAMSResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "qsamsresnet34", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a QSAMSResNet-34 model.\n    \"\"\"", "\n", "model", "=", "QSAMSResNet", "(", "depth", "=", "34", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet34\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qsresnet.qsamsresnet50": [[473, 480], ["qsresnet.QSAMSResNet", "QSAMSResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "qsamsresnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a QSAMSResNet-50 model.\n    \"\"\"", "\n", "model", "=", "QSAMSResNet", "(", "depth", "=", "50", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet50\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qsresnet.qsamsresnet101": [[482, 489], ["qsresnet.QSAMSResNet", "QSAMSResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "qsamsresnet101", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a QSAMSResNet-101 model.\n    \"\"\"", "\n", "model", "=", "QSAMSResNet", "(", "depth", "=", "101", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet101\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qsresnet.qsamsresnet152": [[491, 498], ["qsresnet.QSAMSResNet", "QSAMSResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "qsamsresnet152", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a QSAMSResNet-152 model.\n    \"\"\"", "\n", "model", "=", "QSAMSResNet", "(", "depth", "=", "152", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet152\"", "]", ")", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qmobilenetv2_cifar.QSAMMobileNetV2CifarBlock.__init__": [[21, 89], ["torch.Module.__init__", "conv_type", "torch.BatchNorm2d", "torch.BatchNorm2d", "conv_type", "torch.BatchNorm2d", "torch.BatchNorm2d", "conv_type", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "conv_type", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "expansion", ",", "\n", "stride", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "conv_type", "=", "LIQ", ".", "QConv2d", ",", "\n", ")", ":", "\n", "        ", "super", "(", "QMobileNetV2CifarBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "planes", "=", "expansion", "*", "in_planes", "\n", "self", ".", "conv1", "=", "conv_type", "(", "\n", "in_planes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv_type", "(", "\n", "planes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "groups", "=", "planes", ",", "\n", "bias", "=", "False", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "conv_type", "(", "\n", "planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "==", "1", "and", "in_planes", "!=", "out_planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "conv_type", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qmobilenetv2_cifar.QSAMMobileNetV2CifarBlock.forward": [[91, 97], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "qmobilenetv2_cifar.QSAMMobileNetV2CifarBlock.bn3", "qmobilenetv2_cifar.QSAMMobileNetV2CifarBlock.bn1", "qmobilenetv2_cifar.QSAMMobileNetV2CifarBlock.bn2", "qmobilenetv2_cifar.QSAMMobileNetV2CifarBlock.conv3", "qmobilenetv2_cifar.QSAMMobileNetV2CifarBlock.conv1", "qmobilenetv2_cifar.QSAMMobileNetV2CifarBlock.conv2", "qmobilenetv2_cifar.QSAMMobileNetV2CifarBlock.shortcut"], "methods", ["None"], ["return", "out", "\n", "\n", "\n", "", "", "class", "QMobileNetV2Cifar", "(", "nn", ".", "Module", ")", ":", "\n", "# (expansion, out_planes, num_blocks, stride)", "\n", "    ", "cfg", "=", "[", "\n", "(", "1", ",", "16", ",", "1", ",", "1", ")", ",", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qmobilenetv2_cifar.QSAMMobileNetV2Cifar.__init__": [[111, 166], ["torch.Module.__init__", "tools.get_conv_fc_quan_type", "torch.BatchNorm2d", "torch.BatchNorm2d", "qmobilenetv2_cifar.QSAMMobileNetV2Cifar._make_layers", "conv_type", "torch.BatchNorm2d", "torch.BatchNorm2d", "conv_type", "torch.Conv2d", "torch.Conv2d", "fc_type", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.__init__", "home.repos.pwc.inspect_result.zhuang-group_saq.models.tools.get_conv_fc_quan_type", "home.repos.pwc.inspect_result.zhuang-group_saq.models.mobilenetv2_cifar.MobileNetV2Cifar._make_layers"], ["bits_activations", "=", "32", ",", "\n", "quan_type", "=", "\"LIQ\"", ",", "\n", ")", ":", "\n", "        ", "super", "(", "QMobileNetV2Cifar", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# NOTE: change conv1 stride 2 -> 1 for CIFAR10", "\n", "\n", "conv_type", ",", "fc_type", "=", "get_conv_fc_quan_type", "(", "quan_type", ")", "\n", "if", "quantize_first_last", ":", "\n", "            ", "self", ".", "conv1", "=", "conv_type", "(", "\n", "3", ",", "\n", "32", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "bits_weights", "=", "8", ",", "\n", "bits_activations", "=", "32", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "3", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "layers", "=", "self", ".", "_make_layers", "(", "\n", "in_planes", "=", "32", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", "self", ".", "conv2", "=", "conv_type", "(", "\n", "320", ",", "\n", "1280", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "1280", ")", "\n", "if", "quantize_first_last", ":", "\n", "            ", "self", ".", "linear", "=", "fc_type", "(", "1280", ",", "num_classes", ",", "bits_weights", "=", "8", ",", "bits_activations", "=", "8", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "1280", ",", "num_classes", ")", "\n", "\n", "", "", "def", "_make_layers", "(", "\n", "self", ",", "in_planes", ",", "bits_weights", "=", "32", ",", "bits_activations", "=", "32", ",", "conv_type", "=", "LIQ", ".", "QConv2d", ",", "\n", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "expansion", ",", "out_planes", ",", "num_blocks", ",", "stride", "in", "self", ".", "cfg", ":", "\n", "            ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "for", "stride", "in", "strides", ":", "\n", "                ", "layers", ".", "append", "(", "\n", "QMobileNetV2CifarBlock", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qmobilenetv2_cifar.QSAMMobileNetV2Cifar._make_layers": [[167, 193], ["torch.Sequential", "torch.Sequential", "layers.append", "qmobilenetv2_cifar.QSAMMobileNetV2CifarBlock"], "methods", ["None"], ["expansion", ",", "\n", "stride", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", ")", "\n", "in_planes", "=", "out_planes", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layers", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "# NOTE: change pooling kernel_size 7 -> 4 for CIFAR10", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n", "\n", "", "", "def", "qmobilenetv2_cifar", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a QMobileNetV2 Cifar model.\n    \"\"\"", "\n", "model", "=", "QMobileNetV2Cifar", "(", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qmobilenetv2_cifar.QSAMMobileNetV2Cifar.forward": [[194, 203], ["torch.relu", "torch.relu", "qmobilenetv2_cifar.QSAMMobileNetV2Cifar.layers", "torch.relu", "torch.relu", "torch.avg_pool2d", "torch.avg_pool2d", "qmobilenetv2_cifar.QSAMMobileNetV2Cifar.view", "qmobilenetv2_cifar.QSAMMobileNetV2Cifar.linear", "qmobilenetv2_cifar.QSAMMobileNetV2Cifar.bn1", "qmobilenetv2_cifar.QSAMMobileNetV2Cifar.bn2", "qmobilenetv2_cifar.QSAMMobileNetV2Cifar.size", "qmobilenetv2_cifar.QSAMMobileNetV2Cifar.conv1", "qmobilenetv2_cifar.QSAMMobileNetV2Cifar.conv2"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.linear"], ["", ""]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qmobilenetv2_cifar.qsammobilenetv2_cifar": [[205, 210], ["qmobilenetv2_cifar.QSAMMobileNetV2Cifar"], "function", ["None"], []], "home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQConv2d.__init__": [[12, 50], ["torch.Conv2d.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "len", "len"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "True", ",", "\n", "bits_weights_list", "=", "[", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", "]", ",", "\n", "bits_activations_list", "=", "[", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", "]", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", "SwitchableQConv2d", ",", "self", ")", ".", "__init__", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "dilation", ",", "\n", "groups", ",", "\n", "bias", ",", "\n", ")", "\n", "\n", "self", ".", "share_clip", "=", "kwargs", "[", "\"share_clip\"", "]", "\n", "self", ".", "weight_clip_value", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "Tensor", "(", "[", "1", "]", "if", "self", ".", "share_clip", "else", "[", "1", "]", "*", "len", "(", "bits_weights_list", ")", ")", "\n", ")", "\n", "self", ".", "activation_clip_value", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "Tensor", "(", "[", "1", "]", "if", "self", ".", "share_clip", "else", "[", "1", "]", "*", "len", "(", "bits_weights_list", ")", ")", "\n", ")", "\n", "self", ".", "bits_weights", "=", "bits_weights_list", "\n", "self", ".", "bits_activations", "=", "bits_activations_list", "\n", "self", ".", "current_bit_weights", "=", "4.0", "\n", "self", ".", "current_bit_activations", "=", "4.0", "\n", "self", ".", "is_second", "=", "False", "\n", "self", ".", "epsilon", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQConv2d.quantize_weight": [[51, 63], ["quan_models.LIQ.normalization_on_weights", "quan_models.LIQ.quantization", "switchable_LIQ_wn_qsam.SwitchableQConv2d.x.retain_grad"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.dorefa.normalization_on_weights", "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.dorefa.quantization"], ["", "def", "quantize_weight", "(", "self", ",", "x", ",", "k", ",", "clip_value", ")", ":", "\n", "        ", "if", "k", "==", "32", ":", "\n", "            ", "return", "x", "\n", "", "x", "=", "normalization_on_weights", "(", "x", ",", "clip_value", ")", "\n", "x", "=", "(", "x", "+", "1.0", ")", "/", "2.0", "\n", "x", "=", "quantization", "(", "x", ",", "k", ")", "\n", "x", "=", "x", "*", "2.0", "-", "1.0", "\n", "x", "=", "x", "*", "clip_value", "\n", "self", ".", "x", "=", "x", "\n", "if", "self", ".", "x", ".", "requires_grad", ":", "\n", "            ", "self", ".", "x", ".", "retain_grad", "(", ")", "\n", "", "return", "self", ".", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQConv2d.quantize_weight_add_epsilon": [[64, 76], ["quan_models.LIQ.normalization_on_weights", "quan_models.LIQ.quantization", "switchable_LIQ_wn_qsam.SwitchableQConv2d.x.retain_grad"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.dorefa.normalization_on_weights", "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.dorefa.quantization"], ["", "def", "quantize_weight_add_epsilon", "(", "self", ",", "x", ",", "k", ",", "clip_value", ",", "epsilon", ")", ":", "\n", "        ", "if", "k", "==", "32", ":", "\n", "            ", "return", "x", "\n", "", "x", "=", "normalization_on_weights", "(", "x", ",", "clip_value", ")", "\n", "x", "=", "(", "x", "+", "1.0", ")", "/", "2.0", "\n", "x", "=", "quantization", "(", "x", ",", "k", ")", "\n", "x", "=", "x", "*", "2.0", "-", "1.0", "\n", "x", "=", "x", "*", "clip_value", "\n", "self", ".", "x", "=", "x", "\n", "if", "self", ".", "x", ".", "requires_grad", ":", "\n", "            ", "self", ".", "x", ".", "retain_grad", "(", ")", "\n", "", "return", "self", ".", "x", "+", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQConv2d.forward": [[77, 123], ["quan_models.LIQ.quantize_activation", "switchable_LIQ_wn_qsam.SwitchableQConv2d.weight.data.mean", "switchable_LIQ_wn_qsam.SwitchableQConv2d.weight.data.std", "switchable_LIQ_wn_qsam.SwitchableQConv2d.weight.add().div", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "switchable_LIQ_wn_qsam.SwitchableQConv2d.quantize_weight", "switchable_LIQ_wn_qsam.SwitchableQConv2d.quantize_weight_add_epsilon", "switchable_LIQ_wn_qsam.SwitchableQConv2d.activation_clip_value.abs", "switchable_LIQ_wn_qsam.SwitchableQConv2d.activation_clip_value[].abs", "switchable_LIQ_wn_qsam.SwitchableQConv2d.weight.add", "switchable_LIQ_wn_qsam.SwitchableQConv2d.weight_clip_value.abs", "switchable_LIQ_wn_qsam.SwitchableQConv2d.weight_clip_value[].abs", "switchable_LIQ_wn_qsam.SwitchableQConv2d.weight_clip_value.abs", "switchable_LIQ_wn_qsam.SwitchableQConv2d.weight_clip_value[].abs", "switchable_LIQ_wn_qsam.SwitchableQConv2d.bits_activations.index", "switchable_LIQ_wn_qsam.SwitchableQConv2d.bits_weights.index", "switchable_LIQ_wn_qsam.SwitchableQConv2d.bits_weights.index"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.dorefa.quantize_activation", "home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQLinear.quantize_weight", "home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQLinear.quantize_weight_add_epsilon"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "quantized_input", "=", "quantize_activation", "(", "\n", "input", ",", "\n", "self", ".", "current_bit_activations", ",", "\n", "self", ".", "activation_clip_value", ".", "abs", "(", ")", "\n", "if", "self", ".", "share_clip", "\n", "else", "self", ".", "activation_clip_value", "[", "\n", "self", ".", "bits_activations", ".", "index", "(", "self", ".", "current_bit_activations", ")", "\n", "]", ".", "abs", "(", ")", ",", "\n", ")", "\n", "weight_mean", "=", "self", ".", "weight", ".", "data", ".", "mean", "(", ")", "\n", "weight_std", "=", "self", ".", "weight", ".", "data", ".", "std", "(", ")", "\n", "normalized_weight", "=", "self", ".", "weight", ".", "add", "(", "-", "weight_mean", ")", ".", "div", "(", "weight_std", ")", "\n", "if", "not", "self", ".", "is_second", ":", "\n", "            ", "quantized_weight", "=", "self", ".", "quantize_weight", "(", "\n", "normalized_weight", ",", "\n", "self", ".", "current_bit_weights", ",", "\n", "self", ".", "weight_clip_value", ".", "abs", "(", ")", "\n", "if", "self", ".", "share_clip", "\n", "else", "self", ".", "weight_clip_value", "[", "\n", "self", ".", "bits_weights", ".", "index", "(", "self", ".", "current_bit_weights", ")", "\n", "]", ".", "abs", "(", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "quantized_weight", "=", "self", ".", "quantize_weight_add_epsilon", "(", "\n", "normalized_weight", ",", "\n", "self", ".", "current_bit_weights", ",", "\n", "self", ".", "weight_clip_value", ".", "abs", "(", ")", "\n", "if", "self", ".", "share_clip", "\n", "else", "self", ".", "weight_clip_value", "[", "\n", "self", ".", "bits_weights", ".", "index", "(", "self", ".", "current_bit_weights", ")", "\n", "]", ".", "abs", "(", ")", ",", "\n", "self", ".", "epsilon", ",", "\n", ")", "\n", "\n", "", "output", "=", "F", ".", "conv2d", "(", "\n", "quantized_input", ",", "\n", "quantized_weight", ",", "\n", "self", ".", "bias", ",", "\n", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "\n", "self", ".", "dilation", ",", "\n", "self", ".", "groups", ",", "\n", ")", "\n", "self", ".", "output_shape", "=", "output", ".", "shape", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQConv2d.set_first_forward": [[124, 126], ["None"], "methods", ["None"], ["", "def", "set_first_forward", "(", "self", ")", ":", "\n", "        ", "self", ".", "is_second", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQConv2d.set_second_forward": [[127, 129], ["None"], "methods", ["None"], ["", "def", "set_second_forward", "(", "self", ")", ":", "\n", "        ", "self", ".", "is_second", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQConv2d.extra_repr": [[130, 138], ["super().extra_repr", "s.replace.replace.replace"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQLinear.extra_repr"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "s", "=", "super", "(", ")", ".", "extra_repr", "(", ")", "\n", "s", "+=", "\", current bits_weights={}\"", ".", "format", "(", "self", ".", "current_bit_weights", ")", "\n", "s", "+=", "\", current bits_activations={}\"", ".", "format", "(", "self", ".", "current_bit_activations", ")", "\n", "s", "+=", "\", share clip={}\"", ".", "format", "(", "self", ".", "share_clip", ")", "\n", "s", "+=", "\", bits_choices={}\"", ".", "format", "(", "self", ".", "bits_weights", ")", "\n", "s", "=", "s", ".", "replace", "(", "\"LIQ_conv2d\"", ",", "\"LIQ_wn_qsam_switchable_conv2d\"", ")", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQLinear.__init__": [[145, 168], ["torch.Linear.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "len", "len"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_features", ",", "\n", "out_features", ",", "\n", "bias", "=", "True", ",", "\n", "bits_weights_list", "=", "[", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", "]", ",", "\n", "bits_activations_list", "=", "[", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", "]", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", "SwitchableQLinear", ",", "self", ")", ".", "__init__", "(", "in_features", ",", "out_features", ",", "bias", "=", "bias", ")", "\n", "self", ".", "share_clip", "=", "kwargs", "[", "\"share_clip\"", "]", "\n", "self", ".", "weight_clip_value", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "Tensor", "(", "[", "1", "]", "if", "self", ".", "share_clip", "else", "[", "1", "]", "*", "len", "(", "bits_weights_list", ")", ")", "\n", ")", "\n", "self", ".", "activation_clip_value", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "Tensor", "(", "[", "1", "]", "if", "self", ".", "share_clip", "else", "[", "1", "]", "*", "len", "(", "bits_weights_list", ")", ")", "\n", ")", "\n", "self", ".", "bits_weights", "=", "bits_weights_list", "\n", "self", ".", "bits_activations", "=", "bits_activations_list", "\n", "self", ".", "current_bit_weights", "=", "4.0", "\n", "self", ".", "current_bit_activations", "=", "4.0", "\n", "self", ".", "is_second", "=", "False", "\n", "self", ".", "epsilon", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQLinear.quantize_weight": [[169, 181], ["quan_models.LIQ.normalization_on_weights", "quan_models.LIQ.quantization", "switchable_LIQ_wn_qsam.SwitchableQLinear.x.retain_grad"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.dorefa.normalization_on_weights", "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.dorefa.quantization"], ["", "def", "quantize_weight", "(", "self", ",", "x", ",", "k", ",", "clip_value", ")", ":", "\n", "        ", "if", "k", "==", "32", ":", "\n", "            ", "return", "x", "\n", "", "x", "=", "normalization_on_weights", "(", "x", ",", "clip_value", ")", "\n", "x", "=", "(", "x", "+", "1.0", ")", "/", "2.0", "\n", "x", "=", "quantization", "(", "x", ",", "k", ")", "\n", "x", "=", "x", "*", "2.0", "-", "1.0", "\n", "x", "=", "x", "*", "clip_value", "\n", "self", ".", "x", "=", "x", "\n", "if", "self", ".", "x", ".", "requires_grad", ":", "\n", "            ", "self", ".", "x", ".", "retain_grad", "(", ")", "\n", "", "return", "self", ".", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQLinear.quantize_weight_add_epsilon": [[182, 194], ["quan_models.LIQ.normalization_on_weights", "quan_models.LIQ.quantization", "switchable_LIQ_wn_qsam.SwitchableQLinear.x.retain_grad"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.dorefa.normalization_on_weights", "home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.dorefa.quantization"], ["", "def", "quantize_weight_add_epsilon", "(", "self", ",", "x", ",", "k", ",", "clip_value", ",", "epsilon", ")", ":", "\n", "        ", "if", "k", "==", "32", ":", "\n", "            ", "return", "x", "\n", "", "x", "=", "normalization_on_weights", "(", "x", ",", "clip_value", ")", "\n", "x", "=", "(", "x", "+", "1.0", ")", "/", "2.0", "\n", "x", "=", "quantization", "(", "x", ",", "k", ")", "\n", "x", "=", "x", "*", "2.0", "-", "1.0", "\n", "x", "=", "x", "*", "clip_value", "\n", "self", ".", "x", "=", "x", "\n", "if", "self", ".", "x", ".", "requires_grad", ":", "\n", "            ", "self", ".", "x", ".", "retain_grad", "(", ")", "\n", "", "return", "self", ".", "x", "+", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQLinear.forward": [[195, 229], ["quan_models.LIQ.quantize_activation", "torch.nn.functional.linear", "torch.nn.functional.linear", "switchable_LIQ_wn_qsam.SwitchableQLinear.quantize_weight", "switchable_LIQ_wn_qsam.SwitchableQLinear.quantize_weight_add_epsilon", "switchable_LIQ_wn_qsam.SwitchableQLinear.activation_clip_value.abs", "switchable_LIQ_wn_qsam.SwitchableQLinear.activation_clip_value[].abs", "switchable_LIQ_wn_qsam.SwitchableQLinear.weight_clip_value.abs", "switchable_LIQ_wn_qsam.SwitchableQLinear.weight_clip_value[].abs", "switchable_LIQ_wn_qsam.SwitchableQLinear.weight_clip_value.abs", "switchable_LIQ_wn_qsam.SwitchableQLinear.weight_clip_value[].abs", "switchable_LIQ_wn_qsam.SwitchableQLinear.bits_activations.index", "switchable_LIQ_wn_qsam.SwitchableQLinear.bits_weights.index", "switchable_LIQ_wn_qsam.SwitchableQLinear.bits_weights.index"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.quan_models.dorefa.quantize_activation", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.linear", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.linear", "home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQLinear.quantize_weight", "home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQLinear.quantize_weight_add_epsilon"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "quantized_input", "=", "quantize_activation", "(", "\n", "input", ",", "\n", "self", ".", "current_bit_activations", ",", "\n", "self", ".", "activation_clip_value", ".", "abs", "(", ")", "\n", "if", "self", ".", "share_clip", "\n", "else", "self", ".", "activation_clip_value", "[", "\n", "self", ".", "bits_activations", ".", "index", "(", "self", ".", "current_bit_activations", ")", "\n", "]", ".", "abs", "(", ")", ",", "\n", ")", "\n", "if", "not", "self", ".", "is_second", ":", "\n", "            ", "quantized_weight", "=", "self", ".", "quantize_weight", "(", "\n", "self", ".", "weight", ",", "\n", "self", ".", "current_bit_weights", ",", "\n", "self", ".", "weight_clip_value", ".", "abs", "(", ")", "\n", "if", "self", ".", "share_clip", "\n", "else", "self", ".", "weight_clip_value", "[", "\n", "self", ".", "bits_weights", ".", "index", "(", "self", ".", "current_bit_weights", ")", "\n", "]", ".", "abs", "(", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "quantized_weight", "=", "self", ".", "quantize_weight_add_epsilon", "(", "\n", "self", ".", "weight", ",", "\n", "self", ".", "current_bit_weights", ",", "\n", "self", ".", "weight_clip_value", ".", "abs", "(", ")", "\n", "if", "self", ".", "share_clip", "\n", "else", "self", ".", "weight_clip_value", "[", "\n", "self", ".", "bits_weights", ".", "index", "(", "self", ".", "current_bit_weights", ")", "\n", "]", ".", "abs", "(", ")", ",", "\n", "self", ".", "epsilon", ",", "\n", ")", "\n", "", "output", "=", "F", ".", "linear", "(", "quantized_input", ",", "quantized_weight", ",", "self", ".", "bias", ")", "\n", "self", ".", "output_shape", "=", "output", ".", "shape", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQLinear.set_first_forward": [[230, 232], ["None"], "methods", ["None"], ["", "def", "set_first_forward", "(", "self", ")", ":", "\n", "        ", "self", ".", "is_second", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQLinear.set_second_forward": [[233, 235], ["None"], "methods", ["None"], ["", "def", "set_second_forward", "(", "self", ")", ":", "\n", "        ", "self", ".", "is_second", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQLinear.extra_repr": [[236, 244], ["super().extra_repr"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.models.switchable_LIQ_wn_qsam.SwitchableQLinear.extra_repr"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "s", "=", "super", "(", ")", ".", "extra_repr", "(", ")", "\n", "s", "+=", "\", current bits_weights={}\"", ".", "format", "(", "self", ".", "current_bit_weights", ")", "\n", "s", "+=", "\", current bits_activations={}\"", ".", "format", "(", "self", ".", "current_bit_activations", ")", "\n", "s", "+=", "\", share clip={}\"", ".", "format", "(", "self", ".", "share_clip", ")", "\n", "s", "+=", "\", bits_choices={}\"", ".", "format", "(", "self", ".", "bits_weights", ")", "\n", "s", "+=", "\", method={}\"", ".", "format", "(", "\"LIQ_qsam_switchable_linear\"", ")", "\n", "return", "s", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qmobilenetv2.QSAMMobileBottleneck.__init__": [[99, 147], ["torch.Module.__init__", "qmobilenetv2.qdwconv3x3", "torch.BatchNorm2d", "torch.ReLU6", "qmobilenetv2.qconv1x1", "torch.BatchNorm2d", "qmobilenetv2.qconv1x1", "torch.BatchNorm2d", "torch.ReLU6"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.__init__", "home.repos.pwc.inspect_result.zhuang-group_saq.models.qmobilenetv2.qdwconv3x3", "home.repos.pwc.inspect_result.zhuang-group_saq.models.qmobilenetv2.qconv1x1", "home.repos.pwc.inspect_result.zhuang-group_saq.models.qmobilenetv2.qconv1x1"], ["expand", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "conv_type", "=", "LIQ", ".", "QConv2d", ",", "\n", ")", ":", "\n", "        ", "super", "(", "QMobileBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "\"mobile-bottleneck\"", "\n", "self", ".", "expand", "=", "expand", "\n", "\n", "intermedia_planes", "=", "in_planes", "*", "expand", "\n", "if", "self", ".", "expand", "!=", "1", ":", "\n", "            ", "self", ".", "conv1", "=", "qconv1x1", "(", "\n", "in_planes", ",", "\n", "intermedia_planes", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "intermedia_planes", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", "\n", "\n", "", "self", ".", "conv2", "=", "qdwconv3x3", "(", "\n", "intermedia_planes", ",", "\n", "intermedia_planes", ",", "\n", "stride", "=", "stride", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "intermedia_planes", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "conv3", "=", "qconv1x1", "(", "\n", "intermedia_planes", ",", "\n", "out_planes", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "stride", "==", "1", "and", "in_planes", "==", "out_planes", "\n", "self", ".", "block_index", "=", "0", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "shortcut", ":", "\n", "            ", "residual", "=", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qmobilenetv2.QSAMMobileBottleneck.forward": [[148, 169], ["qmobilenetv2.QSAMMobileBottleneck.conv2", "qmobilenetv2.QSAMMobileBottleneck.bn2", "qmobilenetv2.QSAMMobileBottleneck.relu2", "qmobilenetv2.QSAMMobileBottleneck.conv3", "qmobilenetv2.QSAMMobileBottleneck.bn3", "qmobilenetv2.QSAMMobileBottleneck.conv1", "qmobilenetv2.QSAMMobileBottleneck.bn1", "qmobilenetv2.QSAMMobileBottleneck.relu1"], "methods", ["None"], ["", "out", "=", "x", "\n", "if", "self", ".", "expand", "!=", "1", ":", "\n", "            ", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu1", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu2", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "shortcut", ":", "\n", "            ", "out", "+=", "residual", "\n", "\n", "", "return", "out", "\n", "\n", "\n", "", "", "class", "QMobileNetV2", "(", "nn", ".", "Module", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qmobilenetv2.QSAMMobileNetV2.__init__": [[176, 303], ["torch.Module.__init__", "numpy.array", "numpy.around", "qmobilenetv2.QSAMMobileNetV2.layer_width.astype", "qmobilenetv2.QSAMMobileNetV2.layer_width[].item", "tools.get_conv_fc_quan_type", "torch.BatchNorm2d", "torch.ReLU6", "qmobilenetv2.QSAMMobileNetV2._make_layer", "qmobilenetv2.QSAMMobileNetV2._make_layer", "qmobilenetv2.QSAMMobileNetV2._make_layer", "qmobilenetv2.QSAMMobileNetV2._make_layer", "qmobilenetv2.QSAMMobileNetV2._make_layer", "qmobilenetv2.QSAMMobileNetV2._make_layer", "qmobilenetv2.QSAMMobileNetV2._make_layer", "qmobilenetv2.qconv1x1", "torch.BatchNorm2d", "torch.ReLU6", "torch.Dropout", "qmobilenetv2.QSAMMobileNetV2.modules", "qmobilenetv2.qconv3x3", "qmobilenetv2.conv3x3", "qmobilenetv2.QSAMMobileNetV2.layer_width[].item", "qmobilenetv2.QSAMMobileNetV2.layer_width[].item", "qmobilenetv2.QSAMMobileNetV2.layer_width[].item", "qmobilenetv2.QSAMMobileNetV2.layer_width[].item", "qmobilenetv2.QSAMMobileNetV2.layer_width[].item", "qmobilenetv2.QSAMMobileNetV2.layer_width[].item", "qmobilenetv2.QSAMMobileNetV2.layer_width[].item", "fc_type", "torch.Linear", "isinstance", "qmobilenetv2.QSAMMobileNetV2.layer_width[].item", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.__init__", "home.repos.pwc.inspect_result.zhuang-group_saq.models.tools.get_conv_fc_quan_type", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._make_layer", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._make_layer", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._make_layer", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._make_layer", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._make_layer", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._make_layer", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._make_layer", "home.repos.pwc.inspect_result.zhuang-group_saq.models.qmobilenetv2.qconv1x1", "home.repos.pwc.inspect_result.zhuang-group_saq.models.qmobilenetv2.qconv3x3", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.conv3x3"], ["bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "quantize_first_last", "=", "False", ",", "\n", "quan_type", "=", "\"LIQ\"", ",", "\n", ")", ":", "\n", "        ", "super", "(", "QMobileNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "block", "=", "QMobileBottleneck", "\n", "# define network structure", "\n", "self", ".", "layer_width", "=", "np", ".", "array", "(", "[", "32", ",", "16", ",", "24", ",", "32", ",", "64", ",", "96", ",", "160", ",", "320", "]", ")", "\n", "self", ".", "layer_width", "=", "np", ".", "around", "(", "self", ".", "layer_width", "*", "wide_scale", ")", "\n", "self", ".", "layer_width", "=", "self", ".", "layer_width", ".", "astype", "(", "int", ")", "\n", "\n", "self", ".", "in_planes", "=", "self", ".", "layer_width", "[", "0", "]", ".", "item", "(", ")", "\n", "\n", "conv_type", ",", "fc_type", "=", "get_conv_fc_quan_type", "(", "quan_type", ")", "\n", "if", "quantize_first_last", ":", "\n", "            ", "self", ".", "conv1", "=", "qconv3x3", "(", "\n", "3", ",", "\n", "self", ".", "in_planes", ",", "\n", "stride", "=", "2", ",", "\n", "bits_weights", "=", "8", ",", "\n", "bits_activations", "=", "32", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "conv3x3", "(", "3", ",", "self", ".", "in_planes", ",", "stride", "=", "2", ")", "\n", "", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "in_planes", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "self", ".", "layer_width", "[", "1", "]", ".", "item", "(", ")", ",", "\n", "blocks", "=", "1", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "self", ".", "layer_width", "[", "2", "]", ".", "item", "(", ")", ",", "\n", "blocks", "=", "2", ",", "\n", "expand", "=", "6", ",", "\n", "stride", "=", "2", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "self", ".", "layer_width", "[", "3", "]", ".", "item", "(", ")", ",", "\n", "blocks", "=", "3", ",", "\n", "expand", "=", "6", ",", "\n", "stride", "=", "2", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "self", ".", "layer_width", "[", "4", "]", ".", "item", "(", ")", ",", "\n", "blocks", "=", "4", ",", "\n", "expand", "=", "6", ",", "\n", "stride", "=", "2", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", "self", ".", "layer5", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "self", ".", "layer_width", "[", "5", "]", ".", "item", "(", ")", ",", "\n", "blocks", "=", "3", ",", "\n", "expand", "=", "6", ",", "\n", "stride", "=", "1", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", "self", ".", "layer6", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "self", ".", "layer_width", "[", "6", "]", ".", "item", "(", ")", ",", "\n", "blocks", "=", "3", ",", "\n", "expand", "=", "6", ",", "\n", "stride", "=", "2", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", "self", ".", "layer7", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "self", ".", "layer_width", "[", "7", "]", ".", "item", "(", ")", ",", "\n", "blocks", "=", "1", ",", "\n", "expand", "=", "6", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", "self", ".", "conv2", "=", "qconv1x1", "(", "\n", "in_planes", "=", "self", ".", "layer_width", "[", "7", "]", ".", "item", "(", ")", ",", "\n", "out_planes", "=", "1280", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "1280", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", "\n", "# self.avgpool = nn.AvgPool2d(7)", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "0", ")", "\n", "\n", "if", "quantize_first_last", ":", "\n", "            ", "self", ".", "fc", "=", "fc_type", "(", "1280", ",", "num_classes", ",", "bits_weights", "=", "8", ",", "bits_activations", "=", "8", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "1280", ",", "num_classes", ")", "\n", "# self.conv3 = conv1x1(1280, num_classes)", "\n", "# self.relu3 = nn.ReLU6(inplace=True)", "\n", "# self.fc = nn.Linear(self.layer_width[8], num_classes)", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "", "", "def", "_make_layer", "(", "\n", "self", ",", "\n", "block", ",", "\n", "out_planes", ",", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qmobilenetv2.QSAMMobileNetV2._make_layer": [[304, 341], ["layers.append", "range", "torch.Sequential", "block", "layers.append", "block"], "methods", ["None"], ["blocks", ",", "\n", "expand", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "conv_type", "=", "LIQ", ".", "QConv2d", ",", "\n", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "\n", "self", ".", "in_planes", ",", "\n", "out_planes", ",", "\n", "expand", "=", "expand", ",", "\n", "stride", "=", "stride", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", ")", "\n", "self", ".", "in_planes", "=", "out_planes", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "block", "(", "\n", "self", ".", "in_planes", ",", "\n", "out_planes", ",", "\n", "expand", "=", "expand", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", ")", "\n", ")", "\n", "self", ".", "in_planes", "=", "out_planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        forward propagation\n        \"\"\"", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qmobilenetv2.QSAMMobileNetV2.forward": [[342, 368], ["qmobilenetv2.QSAMMobileNetV2.conv1", "qmobilenetv2.QSAMMobileNetV2.bn1", "qmobilenetv2.QSAMMobileNetV2.relu1", "qmobilenetv2.QSAMMobileNetV2.layer1", "qmobilenetv2.QSAMMobileNetV2.layer2", "qmobilenetv2.QSAMMobileNetV2.layer3", "qmobilenetv2.QSAMMobileNetV2.layer4", "qmobilenetv2.QSAMMobileNetV2.layer5", "qmobilenetv2.QSAMMobileNetV2.layer6", "qmobilenetv2.QSAMMobileNetV2.layer7", "qmobilenetv2.QSAMMobileNetV2.conv2", "qmobilenetv2.QSAMMobileNetV2.bn2", "qmobilenetv2.QSAMMobileNetV2.relu2", "qmobilenetv2.QSAMMobileNetV2.mean", "qmobilenetv2.QSAMMobileNetV2.dropout", "qmobilenetv2.QSAMMobileNetV2.fc"], "methods", ["None"], ["x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x", "=", "self", ".", "layer5", "(", "x", ")", "\n", "x", "=", "self", ".", "layer6", "(", "x", ")", "\n", "x", "=", "self", ".", "layer7", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu2", "(", "x", ")", "\n", "# x = self.avgpool(x)", "\n", "# # x = self.conv3(x)", "\n", "x", "=", "x", ".", "mean", "(", "[", "2", ",", "3", "]", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n", "\n", "", "", "def", "qmobilenetv2", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a QMobileNetv2 model.\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qmobilenetv2.conv3x3": [[12, 16], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qmobilenetv2.qconv3x3": [[19, 37], ["conv_type"], "function", ["None"], ["", "def", "qconv3x3", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "stride", "=", "1", ",", "\n", "bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "conv_type", "=", "LIQ", ".", "QConv2d", ",", "\n", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "conv_type", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qmobilenetv2.conv1x1": [[40, 43], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "\"1x1 convolution\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qmobilenetv2.qconv1x1": [[45, 60], ["conv_type"], "function", ["None"], ["", "def", "qconv1x1", "(", "\n", "in_planes", ",", "out_planes", ",", "bits_weights", "=", "32", ",", "bits_activations", "=", "32", ",", "conv_type", "=", "LIQ", ".", "QConv2d", ",", "\n", ")", ":", "\n", "    ", "\"1x1 convolution\"", "\n", "return", "conv_type", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", ")", "\n", "\n", "\n", "", "def", "dwconv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 depth wise convolution\"", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qmobilenetv2.dwconv3x3": [[63, 73], ["torch.Conv2d"], "function", ["None"], ["out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "groups", "=", "in_planes", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "\n", "\n", "", "def", "qdwconv3x3", "(", "\n", "in_planes", ",", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qmobilenetv2.qdwconv3x3": [[76, 95], ["conv_type"], "function", ["None"], ["bits_weights", "=", "32", ",", "\n", "bits_activations", "=", "32", ",", "\n", "conv_type", "=", "LIQ", ".", "QConv2d", ",", "\n", ")", ":", "\n", "    ", "\"3x3 depth wise convolution\"", "\n", "return", "conv_type", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "groups", "=", "in_planes", ",", "\n", "bias", "=", "False", ",", "\n", "bits_weights", "=", "bits_weights", ",", "\n", "bits_activations", "=", "bits_activations", ",", "\n", ")", "\n", "\n", "\n", "", "class", "QMobileBottleneck", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.qmobilenetv2.qsammobilenetv2": [[370, 375], ["qmobilenetv2.QSAMMobileNetV2"], "function", ["None"], ["return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.mobilenetv2_cifar.MobileNetV2CifarBlock.__init__": [[18, 54], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "expansion", ",", "stride", ")", ":", "\n", "        ", "super", "(", "MobileNetV2CifarBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "planes", "=", "expansion", "*", "in_planes", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "planes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "groups", "=", "planes", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "\n", "planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "==", "1", "and", "in_planes", "!=", "out_planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.mobilenetv2_cifar.MobileNetV2CifarBlock.forward": [[56, 62], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "mobilenetv2_cifar.MobileNetV2CifarBlock.bn3", "mobilenetv2_cifar.MobileNetV2CifarBlock.bn1", "mobilenetv2_cifar.MobileNetV2CifarBlock.bn2", "mobilenetv2_cifar.MobileNetV2CifarBlock.conv3", "mobilenetv2_cifar.MobileNetV2CifarBlock.conv1", "mobilenetv2_cifar.MobileNetV2CifarBlock.conv2", "mobilenetv2_cifar.MobileNetV2CifarBlock.shortcut"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "=", "out", "+", "self", ".", "shortcut", "(", "x", ")", "if", "self", ".", "stride", "==", "1", "else", "out", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.mobilenetv2_cifar.MobileNetV2Cifar.__init__": [[76, 87], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "mobilenetv2_cifar.MobileNetV2Cifar._make_layers", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.__init__", "home.repos.pwc.inspect_result.zhuang-group_saq.models.mobilenetv2_cifar.MobileNetV2Cifar._make_layers"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "MobileNetV2Cifar", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# NOTE: change conv1 stride 2 -> 1 for CIFAR10", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "layers", "=", "self", ".", "_make_layers", "(", "in_planes", "=", "32", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "320", ",", "1280", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "1280", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "1280", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.mobilenetv2_cifar.MobileNetV2Cifar._make_layers": [[88, 98], ["torch.Sequential", "torch.Sequential", "layers.append", "mobilenetv2_cifar.MobileNetV2CifarBlock"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "in_planes", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "expansion", ",", "out_planes", ",", "num_blocks", ",", "stride", "in", "self", ".", "cfg", ":", "\n", "            ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "for", "stride", "in", "strides", ":", "\n", "                ", "layers", ".", "append", "(", "\n", "MobileNetV2CifarBlock", "(", "in_planes", ",", "out_planes", ",", "expansion", ",", "stride", ")", "\n", ")", "\n", "in_planes", "=", "out_planes", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.mobilenetv2_cifar.MobileNetV2Cifar.forward": [[99, 108], ["torch.relu", "torch.relu", "mobilenetv2_cifar.MobileNetV2Cifar.layers", "torch.relu", "torch.relu", "torch.avg_pool2d", "torch.avg_pool2d", "mobilenetv2_cifar.MobileNetV2Cifar.view", "mobilenetv2_cifar.MobileNetV2Cifar.linear", "mobilenetv2_cifar.MobileNetV2Cifar.bn1", "mobilenetv2_cifar.MobileNetV2Cifar.bn2", "mobilenetv2_cifar.MobileNetV2Cifar.size", "mobilenetv2_cifar.MobileNetV2Cifar.conv1", "mobilenetv2_cifar.MobileNetV2Cifar.conv2"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.linear"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layers", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "# NOTE: change pooling kernel_size 7 -> 4 for CIFAR10", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.mobilenetv2_cifar.mobilenetv2_cifar": [[110, 115], ["mobilenetv2_cifar.MobileNetV2Cifar"], "function", ["None"], ["", "", "def", "mobilenetv2_cifar", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a MobileNetV2 CIFAR model.\n    \"\"\"", "\n", "model", "=", "MobileNetV2Cifar", "(", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.resnet.BasicBlock.__init__": [[35, 46], ["torch.Module.__init__", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.__init__", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.conv3x3", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "\"resnet-basic\"", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "block_index", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.resnet.BasicBlock.forward": [[47, 64], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.resnet.Bottleneck.__init__": [[69, 84], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "\"resnet-bottleneck\"", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "block_index", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.resnet.Bottleneck.forward": [[85, 107], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.resnet.ResNet.__init__": [[110, 146], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "resnet.ResNet.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.__init__", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._make_layer", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._make_layer", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._make_layer", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "num_classes", "=", "1000", ",", "**", "args", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "depth", "<", "50", ":", "\n", "            ", "block", "=", "BasicBlock", "\n", "", "else", ":", "\n", "            ", "block", "=", "Bottleneck", "\n", "\n", "", "if", "depth", "==", "18", ":", "\n", "            ", "layers", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", "\n", "", "elif", "depth", "==", "34", ":", "\n", "            ", "layers", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", "\n", "", "elif", "depth", "==", "50", ":", "\n", "            ", "layers", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", "\n", "", "elif", "depth", "==", "101", ":", "\n", "            ", "layers", "=", "[", "3", ",", "4", ",", "23", ",", "3", "]", "\n", "", "elif", "depth", "==", "152", ":", "\n", "            ", "layers", "=", "[", "3", ",", "8", ",", "36", ",", "3", "]", "\n", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.resnet.ResNet._make_layer": [[147, 168], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "self", ".", "inplanes", ",", "\n", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.resnet.ResNet.forward": [[169, 185], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.avgpool", "resnet.ResNet.view", "resnet.ResNet.fc", "resnet.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.resnet.conv3x3": [[25, 29], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.resnet.resnet18": [[187, 195], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "def", "resnet18", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n    Args:\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "depth", "=", "18", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet18\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.resnet.resnet34": [[197, 205], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n    Args:\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "depth", "=", "34", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet34\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.resnet.resnet50": [[207, 215], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    Args:\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "depth", "=", "50", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet50\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.resnet.resnet101": [[217, 225], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    Args:\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "depth", "=", "101", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet101\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.resnet.resnet152": [[227, 235], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n    Args:\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "depth", "=", "152", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet152\"", "]", ")", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreBasicBlock.__init__": [[47, 78], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.ReLU", "preresnet.conv3x3", "torch.BatchNorm2d", "torch.ReLU", "preresnet.conv3x3"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.__init__", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.conv3x3", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.conv3x3"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_plane", ",", "\n", "out_plane", ",", "\n", "stride", "=", "1", ",", "\n", "downsample", "=", "None", ",", "\n", "block_type", "=", "\"both_preact\"", ",", "\n", "**", "kwarg", "\n", ")", ":", "\n", "        ", "\"\"\"\n        init module and weights\n        :param in_plane: size of input plane\n        :param out_plane: size of output plane\n        :param stride: stride of convolutional layers, default 1\n        :param downsample: down sample type for expand dimension of input feature maps, default None\n        :param block_type: type of blocks, decide position of short cut, both-preact: short cut start from beginning\n        of the first segment, half-preact: short cut start from the position between the first segment and the second\n        one. default: both-preact\n        \"\"\"", "\n", "super", "(", "PreBasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "block_type", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_plane", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "in_plane", ",", "out_plane", ",", "stride", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_plane", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "out_plane", ",", "out_plane", ")", "\n", "self", ".", "block_index", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreBasicBlock.forward": [[79, 107], ["preresnet.PreBasicBlock.bn1", "preresnet.PreBasicBlock.relu1", "preresnet.PreBasicBlock.conv1", "preresnet.PreBasicBlock.bn2", "preresnet.PreBasicBlock.relu2", "preresnet.PreBasicBlock.conv2", "preresnet.PreBasicBlock.downsample", "preresnet.PreBasicBlock.bn1", "preresnet.PreBasicBlock.relu1", "preresnet.PreBasicBlock.conv1", "preresnet.PreBasicBlock.bn2", "preresnet.PreBasicBlock.relu2", "preresnet.PreBasicBlock.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        forward procedure of residual module\n        :param x: input feature maps\n        :return: output feature maps\n        \"\"\"", "\n", "if", "self", ".", "name", "==", "\"half_preact\"", ":", "\n", "            ", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu1", "(", "x", ")", "\n", "residual", "=", "x", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu2", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "", "elif", "self", ".", "name", "==", "\"both_preact\"", ":", "\n", "            ", "residual", "=", "x", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu2", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "downsample", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "residual", ")", "\n", "\n", "", "out", "=", "x", "+", "residual", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet.__init__": [[114, 140], ["torch.Module.__init__", "int", "preresnet.conv3x3", "preresnet.PreResNet._make_layer", "preresnet.PreResNet._make_layer", "preresnet.PreResNet._make_layer", "torch.BatchNorm2d", "torch.ReLU", "torch.AvgPool2d", "preresnet.linear", "preresnet.PreResNet._init_weight", "int", "int", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.__init__", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.conv3x3", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._make_layer", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._make_layer", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._make_layer", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.linear", "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._init_weight"], ["def", "__init__", "(", "self", ",", "depth", ",", "wide_factor", "=", "1", ",", "num_classes", "=", "10", ",", "**", "kwarg", ")", ":", "\n", "        ", "\"\"\"\n        init model and weights\n        :param depth: depth of network\n        :param wide_factor: wide factor for deciding width of network, default is 1\n        :param num_classes: number of classes, related to labels. default 10\n        \"\"\"", "\n", "super", "(", "PreResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_plane", "=", "int", "(", "16", "*", "wide_factor", ")", "\n", "self", ".", "depth", "=", "depth", "\n", "n", "=", "(", "depth", "-", "2", ")", "/", "6", "\n", "self", ".", "conv", "=", "conv3x3", "(", "3", ",", "int", "(", "16", "*", "wide_factor", ")", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "PreBasicBlock", ",", "int", "(", "16", "*", "wide_factor", ")", ",", "n", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "\n", "PreBasicBlock", ",", "int", "(", "32", "*", "wide_factor", ")", ",", "n", ",", "stride", "=", "2", "\n", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "\n", "PreBasicBlock", ",", "int", "(", "64", "*", "wide_factor", ")", ",", "n", ",", "stride", "=", "2", "\n", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "int", "(", "64", "*", "wide_factor", ")", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AvgPool2d", "(", "8", ")", "\n", "self", ".", "fc", "=", "linear", "(", "int", "(", "64", "*", "wide_factor", ")", ",", "num_classes", ")", "\n", "\n", "self", ".", "_init_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._init_weight": [[141, 150], ["preresnet.PreResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_init_weight", "(", "self", ")", ":", "\n", "# init layer parameters", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "# elif isinstance(m, nn.Linear):", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet._make_layer": [[153, 176], ["layers.append", "range", "torch.Sequential", "preresnet.conv1x1", "block", "int", "layers.append", "block"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.conv1x1"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "out_plane", ",", "n_blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        make residual blocks, including short cut and residual function\n        :param block: type of basic block to build network\n        :param out_plane: size of output plane\n        :param n_blocks: number of blocks on every segment\n        :param stride: stride of convolutional neural network, default 1\n        :return: residual blocks\n        \"\"\"", "\n", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "in_plane", "!=", "out_plane", ":", "\n", "            ", "downsample", "=", "conv1x1", "(", "self", ".", "in_plane", ",", "out_plane", ",", "stride", "=", "stride", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "\n", "self", ".", "in_plane", ",", "out_plane", ",", "stride", ",", "downsample", ",", "block_type", "=", "\"half_preact\"", "\n", ")", "\n", ")", "\n", "self", ".", "in_plane", "=", "out_plane", "\n", "for", "i", "in", "range", "(", "1", ",", "int", "(", "n_blocks", ")", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_plane", ",", "out_plane", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.PreResNet.forward": [[177, 193], ["preresnet.PreResNet.conv", "preresnet.PreResNet.layer1", "preresnet.PreResNet.layer2", "preresnet.PreResNet.layer3", "preresnet.PreResNet.bn", "preresnet.PreResNet.relu", "preresnet.PreResNet.avg_pool", "preresnet.PreResNet.view", "preresnet.PreResNet.fc", "preresnet.PreResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        forward procedure of model\n        :param x: input feature maps\n        :return: output feature maps\n        \"\"\"", "\n", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "avg_pool", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.conv1x1": [[19, 25], ["torch.Conv2d"], "function", ["None"], ["def", "conv1x1", "(", "in_plane", ",", "out_plane", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    1x1 convolutional layer\n    \"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_plane", ",", "out_plane", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.conv3x3": [[28, 32], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.linear": [[35, 37], ["torch.Linear"], "function", ["None"], ["", "def", "linear", "(", "in_features", ",", "out_features", ")", ":", "\n", "    ", "return", "nn", ".", "Linear", "(", "in_features", ",", "out_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.preresnet20": [[195, 200], ["preresnet.PreResNet"], "function", ["None"], ["", "", "def", "preresnet20", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a PreResNet-20 model.\n    \"\"\"", "\n", "model", "=", "PreResNet", "(", "depth", "=", "20", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.preresnet32": [[202, 207], ["preresnet.PreResNet"], "function", ["None"], ["", "def", "preresnet32", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a PreResNet-32 model.\n    \"\"\"", "\n", "model", "=", "PreResNet", "(", "depth", "=", "32", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.preresnet44": [[209, 214], ["preresnet.PreResNet"], "function", ["None"], ["", "def", "preresnet44", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a PreResNet-44 model.\n    \"\"\"", "\n", "model", "=", "PreResNet", "(", "depth", "=", "44", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.preresnet56": [[216, 221], ["preresnet.PreResNet"], "function", ["None"], ["", "def", "preresnet56", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a PreResNet-56 model.\n    \"\"\"", "\n", "model", "=", "PreResNet", "(", "depth", "=", "56", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.models.preresnet.preresnet110": [[223, 228], ["preresnet.PreResNet"], "function", ["None"], ["", "def", "preresnet110", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a PreResNet-110 model.\n    \"\"\"", "\n", "model", "=", "PreResNet", "(", "depth", "=", "110", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.config.get_parser": [[9, 101], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "datetime.datetime.today().strftime", "datetime.datetime.today", "int", "s.split", "len", "s.split"], "function", ["None"], ["def", "get_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\"classification\"", ")", "\n", "\n", "# general", "\n", "parser", ".", "add_argument", "(", "\"--save_path\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "help", "=", "\"output directory\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--suffix\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "help", "=", "\"suffix of save dir name\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"seed\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--gpu\"", ",", "type", "=", "str", ",", "default", "=", "\"0\"", ",", "help", "=", "\"GPU id to use, e.g. 0,1,2,3\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--print_frequency\"", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "\"print frequency\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--dist_url\"", ",", "type", "=", "str", ",", "default", "=", "\"env://\"", ",", "help", "=", "\"distributed URL\"", "\n", ")", "\n", "\n", "# data", "\n", "parser", ".", "add_argument", "(", "\"--data_path\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "help", "=", "\"path of dataset\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--dataset\"", ",", "type", "=", "str", ",", "default", "=", "\"cifar100\"", ",", "help", "=", "\"imagenet | cifar10 | cifar100\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--n_threads\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "\"4\"", ",", "\n", "help", "=", "\"number of threads used for data loading\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--date\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "datetime", ".", "today", "(", ")", ".", "strftime", "(", "\"%Y%m%d\"", ")", ",", "\n", "help", "=", "\"date of experiment\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--experiment_id\"", ",", "type", "=", "str", ",", "default", "=", "\"01\"", ",", "help", "=", "\"Id of experiment\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--use_dali_cpu\"", ",", "\n", "type", "=", "bool", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"whether to use cpu in data loading\"", ",", "\n", ")", "\n", "\n", "# optimization", "\n", "parser", ".", "add_argument", "(", "\"--batch_size\"", ",", "type", "=", "int", ",", "default", "=", "128", ",", "help", "=", "\"mini-batch size\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--momentum\"", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "\"momentum term\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--weight_decay\"", ",", "type", "=", "float", ",", "default", "=", "1e-4", ",", "help", "=", "\"weight decay\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr\"", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "\"initial learning rate\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--min_lr\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.0", ",", "\n", "help", "=", "\"minimum learning rate of cosine scheduler\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--n_epochs\"", ",", "type", "=", "int", ",", "default", "=", "200", ",", "help", "=", "\"number of training epochs\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--step\"", ",", "\n", "type", "=", "lambda", "s", ":", "[", "int", "(", "item", ")", "for", "item", "in", "s", ".", "split", "(", "\",\"", ")", "]", ",", "\n", "default", "=", "\"80, 120\"", ",", "\n", "help", "=", "\"multi-step for linear learning rate\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lr_scheduler_type\"", ",", "type", "=", "str", ",", "default", "=", "\"multi_step\"", ",", "help", "=", "\"multi_step\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--opt_type\"", ",", "type", "=", "str", ",", "default", "=", "\"SGD\"", ",", "help", "=", "\"optimizer\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--warmup_n_epochs\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"number of warmup epoch\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--label_smooth\"", ",", "type", "=", "float", ",", "default", "=", "0", ",", "help", "=", "\"ratio of label smooth\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--no_decay_keys\"", ",", "\n", "type", "=", "lambda", "s", ":", "[", "item", "for", "item", "in", "s", ".", "split", "(", "\",\"", ")", "]", "if", "len", "(", "s", ")", "!=", "0", "else", "\"\"", ",", "\n", "default", "=", "\"\"", ",", "\n", "help", "=", "\"key name that does not apply weight decay\"", ",", "\n", ")", "\n", "\n", "# model", "\n", "parser", ".", "add_argument", "(", "\n", "\"--network\"", ",", "type", "=", "str", ",", "default", "=", "\"preresnet20\"", ",", "help", "=", "\"network name\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--pretrained\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "\"path of pretrained model\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--resume\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "\"path of resume model\"", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.config.params_check": [[103, 110], ["None"], "function", ["None"], ["", "def", "params_check", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "dataset", "in", "[", "\"cifar10\"", "]", ":", "\n", "        ", "args", ".", "n_classes", "=", "10", "\n", "", "elif", "args", ".", "dataset", "in", "[", "\"cifar100\"", "]", ":", "\n", "        ", "args", ".", "n_classes", "=", "100", "\n", "", "elif", "\"imagenet\"", "in", "args", ".", "dataset", ":", "\n", "        ", "args", ".", "n_classes", "=", "1000", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.config.create_dir": [[112, 125], ["core.utils.is_main_process", "os.path.exists", "print", "input().lower().strip", "os.path.exists", "os.makedirs", "shutil.rmtree", "OSError", "input().lower", "input"], "function", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.is_main_process"], ["", "", "def", "create_dir", "(", "save_path", ")", ":", "\n", "    ", "if", "is_main_process", "(", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "            ", "print", "(", "\"{} file exist!\"", ".", "format", "(", "save_path", ")", ")", "\n", "action", "=", "input", "(", "\"Select Action: d (delete) / q (quit):\"", ")", ".", "lower", "(", ")", ".", "strip", "(", ")", "\n", "act", "=", "action", "\n", "if", "act", "==", "\"d\"", ":", "\n", "                ", "shutil", ".", "rmtree", "(", "save_path", ")", "\n", "", "else", ":", "\n", "                ", "raise", "OSError", "(", "\"Directory {} exits!\"", ".", "format", "(", "save_path", ")", ")", "\n", "\n", "", "", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.config.set_save_path": [[127, 144], ["os.path.join", "config.create_dir", "len"], "function", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.config.create_dir"], ["", "", "", "def", "set_save_path", "(", "args", ")", ":", "\n", "    ", "if", "len", "(", "args", ".", "suffix", ")", "==", "0", ":", "\n", "        ", "suffix", "=", "\"log_{}_{}_bs{:d}_e{:d}_lr{:.5f}_step{}_{}_{}/\"", ".", "format", "(", "\n", "args", ".", "network", ",", "\n", "args", ".", "dataset", ",", "\n", "args", ".", "batch_size", ",", "\n", "args", ".", "n_epochs", ",", "\n", "args", ".", "lr", ",", "\n", "args", ".", "step", ",", "\n", "args", ".", "date", ",", "\n", "args", ".", "experiment_id", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "suffix", "=", "args", ".", "suffix", "\n", "", "args", ".", "save_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "suffix", ")", "\n", "\n", "create_dir", "(", "args", ".", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.config.copy_code": [[146, 170], ["os.path.abspath", "core.utils.is_main_process", "os.listdir", "os.path.join", "f.split", "os.path.join", "os.path.isdir", "len", "os.path.isdir", "os.makedirs", "shutil.copyfile", "os.path.join", "config.copy_code", "logger.errro"], "function", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.is_main_process", "home.repos.pwc.inspect_result.zhuang-group_saq.core.config.copy_code"], ["", "def", "copy_code", "(", "logger", ",", "src", "=", "os", ".", "path", ".", "abspath", "(", "\"./\"", ")", ",", "dst", "=", "\"./code/\"", ")", ":", "\n", "    ", "\"\"\"\n        copy code in current path to a folder\n        \"\"\"", "\n", "\n", "if", "is_main_process", "(", ")", ":", "\n", "        ", "for", "f", "in", "os", ".", "listdir", "(", "src", ")", ":", "\n", "            ", "if", "\"output\"", "in", "f", "or", "\"log\"", "in", "f", ":", "\n", "                ", "continue", "\n", "", "src_file", "=", "os", ".", "path", ".", "join", "(", "src", ",", "f", ")", "\n", "file_split", "=", "f", ".", "split", "(", "\".\"", ")", "\n", "if", "len", "(", "file_split", ")", ">=", "2", "and", "file_split", "[", "1", "]", "==", "\"py\"", ":", "\n", "                ", "if", "not", "os", ".", "path", ".", "isdir", "(", "dst", ")", ":", "\n", "                    ", "os", ".", "makedirs", "(", "dst", ")", "\n", "", "dst_file", "=", "os", ".", "path", ".", "join", "(", "dst", ",", "f", ")", "\n", "try", ":", "\n", "                    ", "shutil", ".", "copyfile", "(", "src", "=", "src_file", ",", "dst", "=", "dst_file", ")", "\n", "", "except", ":", "\n", "                    ", "logger", ".", "errro", "(", "\n", "\"copy file error! src: {}, dst: {}\"", ".", "format", "(", "src_file", ",", "dst_file", ")", "\n", ")", "\n", "", "", "elif", "os", ".", "path", ".", "isdir", "(", "src_file", ")", ":", "\n", "                ", "deeper_dst", "=", "os", ".", "path", ".", "join", "(", "dst", ",", "f", ")", "\n", "copy_code", "(", "logger", ",", "src", "=", "src_file", ",", "dst", "=", "deeper_dst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.config.get_args": [[172, 177], ["config.get_parser", "get_parser.parse_args", "config.params_check"], "function", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.config.get_parser", "home.repos.pwc.inspect_result.zhuang-group_saq.core.config.params_check"], ["", "", "", "", "def", "get_args", "(", ")", ":", "\n", "    ", "parser", "=", "get_parser", "(", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "params_check", "(", "args", ")", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.engine.get_lr": [[4, 10], ["None"], "function", ["None"], ["from", "core", ".", "utils", "import", "*", "\n", "from", "models", "import", "LIQ_wn_qsam", "\n", "from", "utils", ".", "bypass_bn", "import", "disable_running_stats", ",", "enable_running_stats", "\n", "\n", "\n", "def", "set_first_forward", "(", "model", ")", ":", "\n", "    ", "for", "n", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.engine.train": [[12, 82], ["MetricLogger", "MetricLogger.add_meter", "MetricLogger.add_meter", "model.train", "MetricLogger.log_every", "MetricLogger.synchronize_between_processes", "scheduler.step", "engine.get_lr", "logger.info", "logger.info", "SmoothedValue", "SmoothedValue", "time.time", "model", "criterion", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "accuracy", "MetricLogger.update", "MetricLogger.meters[].update", "MetricLogger.meters[].update", "MetricLogger.meters[].update", "tensorboard_logger.add_scalar", "tensorboard_logger.add_scalar", "tensorboard_logger.add_scalar", "tensorboard_logger.add_scalar", "image.to", "target.to", "acc1.item", "acc5.item", "criterion.item", "time.time"], "function", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.add_meter", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.add_meter", "home.repos.pwc.inspect_result.zhuang-group_saq.core.trainer.Trainer.train", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.log_every", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.synchronize_between_processes", "home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.get_lr", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.AllReduce.backward", "home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.accuracy", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.update", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.update", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.update", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.update"], ["            ", "m", ".", "set_first_forward", "(", ")", "\n", "\n", "\n", "", "", "", "def", "set_layer_first_forward", "(", "model", ",", "layer_name", ")", ":", "\n", "    ", "for", "n", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "(", "\n", "isinstance", "(", "m", ",", "(", "LIQ_wn_qsam", ".", "QConv2d", ",", "LIQ_wn_qsam", ".", "QLinear", ",", ")", ",", ")", "\n", "and", "n", "in", "layer_name", "\n", ")", ":", "\n", "            ", "m", ".", "set_first_forward", "(", ")", "\n", "\n", "\n", "", "", "", "def", "set_second_forward", "(", "model", ")", ":", "\n", "    ", "for", "n", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "(", "LIQ_wn_qsam", ".", "QConv2d", ",", "LIQ_wn_qsam", ".", "QLinear", ",", ")", ",", ")", ":", "\n", "            ", "m", ".", "set_second_forward", "(", ")", "\n", "\n", "\n", "", "", "", "def", "set_layer_second_forward", "(", "model", ",", "layer_name", ")", ":", "\n", "    ", "for", "n", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "(", "\n", "isinstance", "(", "m", ",", "(", "LIQ_wn_qsam", ".", "QConv2d", ",", "LIQ_wn_qsam", ".", "QLinear", ",", ")", ",", ")", "\n", "and", "n", "in", "layer_name", "\n", ")", ":", "\n", "            ", "m", ".", "set_second_forward", "(", ")", "\n", "\n", "\n", "", "", "", "def", "train", "(", "\n", "model", ",", "\n", "train_loader", ",", "\n", "criterion", ",", "\n", "optimizer", ",", "\n", "minimizer", ",", "\n", "scheduler", ",", "\n", "device", ",", "\n", "logger", ",", "\n", "tensorboard_logger", ",", "\n", "epoch", ",", "\n", "args", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n        Train one epoch\n        :param epoch: index of epoch\n        \"\"\"", "\n", "\n", "metric_logger", "=", "MetricLogger", "(", "logger", "=", "logger", ",", "delimiter", "=", "\"  \"", ")", "\n", "metric_logger", ".", "add_meter", "(", "\"lr\"", ",", "SmoothedValue", "(", "window_size", "=", "1", ",", "fmt", "=", "\"{value}\"", ")", ")", "\n", "metric_logger", ".", "add_meter", "(", "\"img/s\"", ",", "SmoothedValue", "(", "window_size", "=", "10", ",", "fmt", "=", "\"{value}\"", ")", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "\n", "header", "=", "\"Epoch: [{}]\"", ".", "format", "(", "epoch", ")", "\n", "for", "image", ",", "target", "in", "metric_logger", ".", "log_every", "(", "\n", "train_loader", ",", "args", ".", "print_frequency", ",", "header", "\n", ")", ":", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "image", ",", "target", "=", "image", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "\n", "# Ascent Step", "\n", "model", ".", "require_backward_grad_sync", "=", "False", "\n", "model", ".", "require_forward_param_sync", "=", "True", "\n", "# enable_running_stats(model)", "\n", "output", "=", "model", "(", "image", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "minimizer", ".", "ascent_step", "(", ")", "\n", "\n", "# descent step", "\n", "model", ".", "require_backward_grad_sync", "=", "True", "\n", "model", ".", "require_forward_param_sync", "=", "False", "\n", "if", "\"QSAM\"", "in", "args", ".", "opt_type", "or", "\"QASAM\"", "in", "args", ".", "opt_type", ":", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.engine.val": [[84, 128], ["model.eval", "MetricLogger", "MetricLogger.synchronize_between_processes", "logger.info", "torch.no_grad", "MetricLogger.log_every", "tensorboard_logger.add_scalar", "tensorboard_logger.add_scalar", "tensorboard_logger.add_scalar", "image.to.to", "target.to.to", "model", "criterion", "accuracy", "MetricLogger.update", "MetricLogger.meters[].update", "MetricLogger.meters[].update", "acc1.item", "acc5.item", "criterion.item"], "function", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.synchronize_between_processes", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.log_every", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.accuracy", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.update", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.update", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.update"], ["# disable_running_stats(model)", "\n", "", "criterion", "(", "model", "(", "image", ")", ",", "target", ")", ".", "backward", "(", ")", "\n", "# torch.nn.utils.clip_grad_norm_(model.parameters(), args.grad_clip)", "\n", "minimizer", ".", "descent_step", "(", ")", "\n", "if", "\"QSAM\"", "in", "args", ".", "opt_type", "or", "\"QASAM\"", "in", "args", ".", "opt_type", ":", "\n", "            ", "set_first_forward", "(", "model", ")", "\n", "\n", "", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "batch_size", "=", "image", ".", "shape", "[", "0", "]", "\n", "metric_logger", ".", "update", "(", "loss", "=", "loss", ".", "item", "(", ")", ",", "lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", ")", "\n", "metric_logger", ".", "meters", "[", "\"acc1\"", "]", ".", "update", "(", "acc1", ".", "item", "(", ")", ",", "n", "=", "batch_size", ")", "\n", "metric_logger", ".", "meters", "[", "\"acc5\"", "]", ".", "update", "(", "acc5", ".", "item", "(", ")", ",", "n", "=", "batch_size", ")", "\n", "metric_logger", ".", "meters", "[", "\"img/s\"", "]", ".", "update", "(", "\n", "batch_size", "*", "args", ".", "world_size", "/", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "\n", ")", "\n", "\n", "# gather the stats from all processes", "\n", "", "metric_logger", ".", "synchronize_between_processes", "(", ")", "\n", "\n", "scheduler", ".", "step", "(", ")", "\n", "lr", "=", "get_lr", "(", "optimizer", ")", "\n", "logger", ".", "info", "(", "\"Change Learning rate: {}\"", ".", "format", "(", "lr", ")", ")", "\n", "\n", "train_error", "=", "100", "-", "metric_logger", ".", "acc1", ".", "global_avg", "\n", "train_loss", "=", "metric_logger", ".", "loss", ".", "global_avg", "\n", "train5_error", "=", "100", "-", "metric_logger", ".", "acc5", ".", "global_avg", "\n", "if", "tensorboard_logger", "is", "not", "None", ":", "\n", "        ", "tensorboard_logger", ".", "add_scalar", "(", "\"train_top1_error\"", ",", "train_error", ",", "epoch", ")", "\n", "tensorboard_logger", ".", "add_scalar", "(", "\"train_top5_error\"", ",", "train5_error", ",", "epoch", ")", "\n", "tensorboard_logger", ".", "add_scalar", "(", "\"train_loss\"", ",", "train_loss", ",", "epoch", ")", "\n", "tensorboard_logger", ".", "add_scalar", "(", "\"lr\"", ",", "lr", ",", "epoch", ")", "\n", "weight_eps_names", "=", "[", "\n", "\"epsilon\"", ",", "\n", "\"tw_epsilon_norm\"", ",", "\n", "\"normalized_tw_epsilon_norm\"", ",", "\n", "\"weight_clip_value_epsilon\"", ",", "\n", "\"weight_clip_value_tw_epsilon_norm\"", ",", "\n", "\"weight_clip_value_normalized_tw_epsilon_norm\"", ",", "\n", "\"activation_clip_value_epsilon\"", ",", "\n", "\"activation_clip_value_tw_epsilon_norm\"", ",", "\n", "\"activation_clip_value_normalized_tw_epsilon_norm\"", ",", "\n", "\"bias_epsilon\"", ",", "\n", "\"bias_epsilon_norm\"", ",", "\n", "\"bias_normalized_epsilon_norm\"", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.model_analyse.ModelAnalyse.__init__": [[11, 21], ["model_transform.list2sequential"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.model_transform.list2sequential"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "logger", ")", ":", "\n", "        ", "self", ".", "model", "=", "mt", ".", "list2sequential", "(", "model", ")", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "madds", "=", "[", "]", "\n", "self", ".", "weight_shapes", "=", "[", "]", "\n", "self", ".", "layer_names", "=", "[", "]", "\n", "self", ".", "filter_nums", "=", "[", "]", "\n", "self", ".", "channel_nums", "=", "[", "]", "\n", "self", ".", "bias_shapes", "=", "[", "]", "\n", "self", ".", "output_shapes", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.model_analyse.ModelAnalyse._madds_conv_hook": [[22, 56], ["model_analyse.ModelAnalyse.layer_names.append", "model_analyse.ModelAnalyse.weight_shapes.append", "model_analyse.ModelAnalyse.output_shapes.append", "model_analyse.ModelAnalyse.channel_nums.append", "model_analyse.ModelAnalyse.madds.append", "list", "list", "model_analyse.ModelAnalyse.bias_shapes.append", "model_analyse.ModelAnalyse.bias_shapes.append", "list"], "methods", ["None"], ["", "def", "_madds_conv_hook", "(", "self", ",", "layer", ",", "x", ",", "out", ")", ":", "\n", "        ", "input", "=", "x", "[", "0", "]", "\n", "batch_size", "=", "input", ".", "shape", "[", "0", "]", "\n", "output_height", ",", "output_width", "=", "out", ".", "shape", "[", "2", ":", "]", "\n", "\n", "kernel_height", ",", "kernel_width", "=", "layer", ".", "kernel_size", "\n", "in_channels", "=", "layer", ".", "in_channels", "\n", "out_channels", "=", "layer", ".", "out_channels", "\n", "groups", "=", "layer", ".", "groups", "\n", "\n", "filters_per_channel", "=", "out_channels", "//", "groups", "\n", "conv_per_position_flops", "=", "(", "\n", "kernel_height", "*", "kernel_width", "*", "in_channels", "*", "filters_per_channel", "\n", ")", "\n", "\n", "active_elements_count", "=", "batch_size", "*", "output_height", "*", "output_width", "\n", "\n", "overall_conv_flops", "=", "conv_per_position_flops", "*", "active_elements_count", "\n", "\n", "bias_flops", "=", "0", "\n", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "            ", "bias_flops", "=", "out_channels", "*", "active_elements_count", "\n", "\n", "", "overall_flops", "=", "overall_conv_flops", "+", "bias_flops", "\n", "layer_name", "=", "layer", ".", "layer_name", "\n", "self", ".", "layer_names", ".", "append", "(", "layer_name", ")", "\n", "self", ".", "weight_shapes", ".", "append", "(", "list", "(", "layer", ".", "weight", ".", "shape", ")", ")", "\n", "self", ".", "output_shapes", ".", "append", "(", "list", "(", "out", ".", "shape", ")", ")", "\n", "self", ".", "channel_nums", ".", "append", "(", "in_channels", ")", "\n", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias_shapes", ".", "append", "(", "list", "(", "layer", ".", "bias", ".", "shape", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bias_shapes", ".", "append", "(", "[", "0", "]", ")", "\n", "", "self", ".", "madds", ".", "append", "(", "overall_flops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.model_analyse.ModelAnalyse._madds_linear_hook": [[57, 80], ["int", "model_analyse.ModelAnalyse.layer_names.append", "model_analyse.ModelAnalyse.weight_shapes.append", "model_analyse.ModelAnalyse.channel_nums.append", "model_analyse.ModelAnalyse.output_shapes.append", "model_analyse.ModelAnalyse.madds.append", "list", "list", "model_analyse.ModelAnalyse.bias_shapes.append", "model_analyse.ModelAnalyse.bias_shapes.append", "list"], "methods", ["None"], ["", "def", "_madds_linear_hook", "(", "self", ",", "layer", ",", "x", ",", "out", ")", ":", "\n", "# compute number of multiply-add", "\n", "# layer_madds = layer.weight.size(0) * layer.weight.size(1)", "\n", "# if layer.bias is not None:", "\n", "#     layer_madds += layer.weight.size(0)", "\n", "        ", "input", "=", "x", "[", "0", "]", "\n", "batch_size", "=", "input", ".", "shape", "[", "0", "]", "\n", "overall_flops", "=", "int", "(", "batch_size", "*", "input", ".", "shape", "[", "1", "]", "*", "out", ".", "shape", "[", "1", "]", ")", "\n", "\n", "bias_flops", "=", "0", "\n", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "            ", "bias_flops", "=", "out", ".", "shape", "[", "1", "]", "\n", "", "overall_flops", "=", "overall_flops", "+", "bias_flops", "\n", "layer_name", "=", "layer", ".", "layer_name", "\n", "self", ".", "layer_names", ".", "append", "(", "layer_name", ")", "\n", "self", ".", "weight_shapes", ".", "append", "(", "list", "(", "layer", ".", "weight", ".", "shape", ")", ")", "\n", "self", ".", "channel_nums", ".", "append", "(", "input", ".", "shape", "[", "1", "]", ")", "\n", "self", ".", "output_shapes", ".", "append", "(", "list", "(", "out", ".", "shape", ")", ")", "\n", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias_shapes", ".", "append", "(", "list", "(", "layer", ".", "bias", ".", "shape", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bias_shapes", ".", "append", "(", "[", "0", "]", ")", "\n", "", "self", ".", "madds", ".", "append", "(", "overall_flops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.model_analyse.ModelAnalyse.params_count": [[81, 105], ["prettytable.PrettyTable", "model_analyse.ModelAnalyse.logger.info", "model_analyse.ModelAnalyse.model.named_parameters", "model_analyse.ModelAnalyse.logger.info", "numpy.array", "numpy.array.sum", "model_analyse.ModelAnalyse.logger.info", "param.numel", "numpy.array.append", "prettytable.PrettyTable.add_row"], "methods", ["None"], ["", "def", "params_count", "(", "self", ")", ":", "\n", "        ", "params_num_list", "=", "[", "]", "\n", "\n", "output", "=", "PrettyTable", "(", ")", "\n", "output", ".", "field_names", "=", "[", "\"Param name\"", ",", "\"Shape\"", ",", "\"Dim\"", "]", "\n", "\n", "self", ".", "logger", ".", "info", "(", "\n", "\"------------------------number of parameters------------------------\\n\"", "\n", ")", "\n", "for", "name", ",", "param", "in", "self", ".", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "param_num", "=", "param", ".", "numel", "(", ")", "\n", "param_shape", "=", "[", "shape", "for", "shape", "in", "param", ".", "shape", "]", "\n", "params_num_list", ".", "append", "(", "param_num", ")", "\n", "output", ".", "add_row", "(", "[", "name", ",", "param_shape", ",", "param_num", "]", ")", "\n", "", "self", ".", "logger", ".", "info", "(", "output", ")", "\n", "\n", "params_num_list", "=", "np", ".", "array", "(", "params_num_list", ")", "\n", "params_num", "=", "params_num_list", ".", "sum", "(", ")", "\n", "self", ".", "logger", ".", "info", "(", "\n", "\"|===>Number of parameters is: {:}, {:f} M\"", ".", "format", "(", "\n", "params_num", ",", "params_num", "/", "1e6", "\n", ")", "\n", ")", "\n", "return", "params_num", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.model_analyse.ModelAnalyse.madds_compute": [[106, 162], ["model_analyse.ModelAnalyse.model.named_modules", "model_analyse.ModelAnalyse.model.eval", "model_analyse.ModelAnalyse.model", "numpy.array", "float", "prettytable.PrettyTable", "model_analyse.ModelAnalyse.logger.info", "range", "model_analyse.ModelAnalyse.logger.info", "model_analyse.ModelAnalyse.logger.info", "isinstance", "numpy.array.sum", "len", "prettytable.PrettyTable.add_row", "hook.remove", "hook_list.append", "isinstance", "layer.register_forward_hook", "hook_list.append", "layer.register_forward_hook"], "methods", ["None"], ["", "def", "madds_compute", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Compute number of multiply-adds of the model\n        \"\"\"", "\n", "\n", "hook_list", "=", "[", "]", "\n", "self", ".", "madds", "=", "[", "]", "\n", "for", "layer_name", ",", "layer", "in", "self", ".", "model", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "hook_list", ".", "append", "(", "layer", ".", "register_forward_hook", "(", "self", ".", "_madds_conv_hook", ")", ")", "\n", "layer", ".", "layer_name", "=", "layer_name", "\n", "# self.layer_names.append(layer_name)", "\n", "", "elif", "isinstance", "(", "layer", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "hook_list", ".", "append", "(", "layer", ".", "register_forward_hook", "(", "self", ".", "_madds_linear_hook", ")", ")", "\n", "layer", ".", "layer_name", "=", "layer_name", "\n", "# self.layer_names.append(layer_name)", "\n", "# run forward for computing FLOPs", "\n", "", "", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "model", "(", "x", ")", "\n", "\n", "madds_np", "=", "np", ".", "array", "(", "self", ".", "madds", ")", "\n", "madds_sum", "=", "float", "(", "madds_np", ".", "sum", "(", ")", ")", "\n", "percentage", "=", "madds_np", "/", "madds_sum", "\n", "\n", "output", "=", "PrettyTable", "(", ")", "\n", "output", ".", "field_names", "=", "[", "\n", "\"Layer\"", ",", "\n", "\"Weight Shape\"", ",", "\n", "\"#Channels\"", ",", "\n", "\"Bias Shape\"", ",", "\n", "\"Output Shape\"", ",", "\n", "\"Madds\"", ",", "\n", "\"Percentage\"", ",", "\n", "]", "\n", "\n", "self", ".", "logger", ".", "info", "(", "\"------------------------Madds------------------------\\n\"", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "madds", ")", ")", ":", "\n", "            ", "output", ".", "add_row", "(", "\n", "[", "\n", "self", ".", "layer_names", "[", "i", "]", ",", "\n", "self", ".", "weight_shapes", "[", "i", "]", ",", "\n", "self", ".", "channel_nums", "[", "i", "]", ",", "\n", "self", ".", "bias_shapes", "[", "i", "]", ",", "\n", "self", ".", "output_shapes", "[", "i", "]", ",", "\n", "madds_np", "[", "i", "]", ",", "\n", "percentage", "[", "i", "]", ",", "\n", "]", "\n", ")", "\n", "", "self", ".", "logger", ".", "info", "(", "output", ")", "\n", "repo_str", "=", "\"|===>Total MAdds: {:f} M\"", ".", "format", "(", "madds_sum", "/", "1e6", ")", "\n", "self", ".", "logger", ".", "info", "(", "repo_str", ")", "\n", "\n", "for", "hook", "in", "hook_list", ":", "\n", "            ", "hook", ".", "remove", "(", ")", "\n", "\n", "", "return", "madds_np", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.model_transform.data_parallel": [[7, 33], ["list", "isinstance", "range", "torch.cuda.device_count", "torch.cuda.device_count", "range", "len", "torch.nn.DataParallel().cuda.cuda", "model[].cuda", "isinstance", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "isinstance", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel"], "function", ["None"], ["def", "data_parallel", "(", "model", ",", "n_gpus", ",", "gpu0", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    assign model to multi-gpu mode\n    :params model: target model\n    :params n_gpus: number of gpus to use\n    :params gpu0: id of the master gpu\n    :return: model, type is Module or Sequantial or DataParallel\n    \"\"\"", "\n", "if", "n_gpus", "==", "0", ":", "\n", "        ", "assert", "False", ",", "\"only support gpu mode\"", "\n", "", "gpu_list", "=", "list", "(", "range", "(", "gpu0", ",", "gpu0", "+", "n_gpus", ")", ")", "\n", "assert", "torch", ".", "cuda", ".", "device_count", "(", ")", ">=", "gpu0", "+", "n_gpus", ",", "\"Invalid Number of GPUs\"", "\n", "if", "isinstance", "(", "model", ",", "list", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "model", ")", ")", ":", "\n", "            ", "if", "n_gpus", ">=", "2", ":", "\n", "                ", "if", "not", "isinstance", "(", "model", "[", "i", "]", ",", "nn", ".", "DataParallel", ")", ":", "\n", "                    ", "model", "[", "i", "]", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", "[", "i", "]", ",", "gpu_list", ")", ".", "cuda", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "model", "[", "i", "]", "=", "model", "[", "i", "]", ".", "cuda", "(", ")", "\n", "", "", "", "else", ":", "\n", "        ", "if", "n_gpus", ">=", "2", ":", "\n", "            ", "if", "not", "isinstance", "(", "model", ",", "nn", ".", "DataParallel", ")", ":", "\n", "                ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ",", "gpu_list", ")", ".", "cuda", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "model", "=", "model", ".", "cuda", "(", ")", "\n", "", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.model_transform.model2list": [[35, 46], ["isinstance", "list", "isinstance", "list"], "function", ["None"], ["", "def", "model2list", "(", "model", ")", ":", "\n", "    ", "\"\"\"\n    convert model to list type\n    :param model: should be type of list or nn.DataParallel or nn.Sequential\n    :return: no return params\n    \"\"\"", "\n", "if", "isinstance", "(", "model", ",", "nn", ".", "DataParallel", ")", ":", "\n", "        ", "model", "=", "list", "(", "model", ".", "module", ")", "\n", "", "elif", "isinstance", "(", "model", ",", "nn", ".", "Sequential", ")", ":", "\n", "        ", "model", "=", "list", "(", "model", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.model_transform.list2sequential": [[48, 52], ["isinstance", "torch.Sequential"], "function", ["None"], ["", "def", "list2sequential", "(", "model", ")", ":", "\n", "    ", "if", "isinstance", "(", "model", ",", "list", ")", ":", "\n", "        ", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.model_transform.model2state_dict": [[54, 64], ["torch.load", "torch.load", "model[].state_dict", "torch.save", "torch.save", "print", "print", "print", "file_path.replace", "type"], "function", ["None"], ["", "def", "model2state_dict", "(", "file_path", ")", ":", "\n", "    ", "model", "=", "torch", ".", "load", "(", "file_path", ")", "\n", "if", "model", "[", "\"model\"", "]", "is", "not", "None", ":", "\n", "        ", "model_state_dict", "=", "model", "[", "\"model\"", "]", ".", "state_dict", "(", ")", "\n", "torch", ".", "save", "(", "model_state_dict", ",", "file_path", ".", "replace", "(", "\".pth\"", ",", "\"state_dict.pth\"", ")", ")", "\n", "\n", "", "else", ":", "\n", "        ", "print", "(", "(", "type", "(", "model", ")", ")", ")", "\n", "print", "(", "model", ")", "\n", "print", "(", "\"skip\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.write_log.write_log": [[4, 16], ["os.path.isdir", "os.mkdir", "open", "f.write", "os.path.join"], "function", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.mkdir"], ["def", "write_log", "(", "dir_name", ",", "file_name", ",", "log_str", ")", ":", "\n", "    ", "\"\"\"\n    Write log to file\n    :param dir_name:  the path of directory\n    :param file_name: the name of the saved file\n    :param log_str: the string that need to be saved\n    \"\"\"", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "dir_name", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "dir_name", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "dir_name", ",", "file_name", ")", ",", "\"a+\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "log_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.write_log.write_settings": [[18, 27], ["open", "settings.__dict__.items", "os.path.join", "f.write", "str", "str"], "function", ["None"], ["", "", "def", "write_settings", "(", "settings", ")", ":", "\n", "    ", "\"\"\"\n    Save expriment settings to a file\n    :param settings: the instance of option\n    \"\"\"", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "settings", ".", "save_path", ",", "\"settings.log\"", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "for", "k", ",", "v", "in", "settings", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "            ", "f", ".", "write", "(", "str", "(", "k", ")", "+", "\": \"", "+", "str", "(", "v", ")", "+", "\"\\n\"", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.trainer.View.forward": [[16, 25], ["x.dim", "x.dim", "x.view", "x.dim", "x.dim", "x.size"], "methods", ["None"], ["def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "x", ".", "dim", "(", ")", "==", "2", "or", "x", ".", "dim", "(", ")", "==", "4", ",", "\"invalid dimension of input {:d}\"", ".", "format", "(", "\n", "x", ".", "dim", "(", ")", "\n", ")", "\n", "if", "x", ".", "dim", "(", ")", "==", "4", ":", "\n", "            ", "out", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "x", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.trainer.Trainer.__init__": [[32, 155], ["trainer.Trainer.model.to", "trainer.Trainer.model.parameters", "trainer.Trainer.logger.info", "trainer.Trainer.logger.info", "core.label_smooth.LabelSmoothCrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "len", "trainer.Trainer.model.named_parameters", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "trainer.Trainer.logger.info", "trainer.Trainer.optimizer.load_state_dict", "trainer.Trainer.logger.info", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "core.warmup_scheduler.GradualWarmupScheduler", "trainer.Trainer.logger.info", "trainer.Trainer.logger.info", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "trainer.Trainer.append", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "trainer.Trainer.logger.info", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "trainer.Trainer.logger.info", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "trainer.Trainer.scheduler.step", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.step"], ["def", "__init__", "(", "\n", "self", ",", "\n", "model", ",", "\n", "device", ",", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "settings", ",", "\n", "logger", ",", "\n", "tensorboard_logger", ",", "\n", "optimizer_state", "=", "None", ",", "\n", "lr_scheduler_state", "=", "None", ",", "\n", "run_count", "=", "0", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "self", ".", "settings", "=", "settings", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "model", "=", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "train_loader", "=", "train_loader", "\n", "self", ".", "val_loader", "=", "val_loader", "\n", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "tensorboard_logger", "=", "tensorboard_logger", "\n", "self", ".", "run_count", "=", "run_count", "\n", "\n", "if", "self", ".", "settings", ".", "label_smooth", ">", "0", ":", "\n", "            ", "self", ".", "criterion", "=", "LabelSmoothCrossEntropyLoss", "(", "\n", "num_classes", "=", "self", ".", "settings", ".", "n_classes", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "", "self", ".", "lr", "=", "self", ".", "settings", ".", "lr", "\n", "params", "=", "self", ".", "model", ".", "parameters", "(", ")", "\n", "if", "len", "(", "self", ".", "settings", ".", "no_decay_keys", ")", "!=", "0", ":", "\n", "            ", "params", "=", "[", "]", "\n", "for", "name", ",", "param", "in", "self", ".", "model", ".", "named_parameters", "(", ")", ":", "\n", "                ", "flag", "=", "False", "\n", "for", "key", "in", "self", ".", "settings", ".", "no_decay_keys", ":", "\n", "                    ", "if", "key", "in", "name", ":", "\n", "                        ", "flag", "=", "True", "\n", "break", "\n", "", "", "if", "flag", ":", "\n", "                    ", "weight_decay", "=", "0", "\n", "", "else", ":", "\n", "                    ", "weight_decay", "=", "self", ".", "settings", ".", "weight_decay", "\n", "", "params", ".", "append", "(", "\n", "{", "\n", "\"params\"", ":", "param", ",", "\n", "\"lr\"", ":", "self", ".", "settings", ".", "lr", ",", "\n", "\"weight_decay\"", ":", "weight_decay", ",", "\n", "}", "\n", ")", "\n", "", "", "if", "\"SGD\"", "in", "self", ".", "settings", ".", "opt_type", ":", "\n", "            ", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "params", "=", "params", ",", "\n", "lr", "=", "self", ".", "settings", ".", "lr", ",", "\n", "momentum", "=", "self", ".", "settings", ".", "momentum", ",", "\n", "weight_decay", "=", "self", ".", "settings", ".", "weight_decay", ",", "\n", "nesterov", "=", "True", ",", "\n", ")", "\n", "", "elif", "\"RMSProp\"", "in", "self", ".", "settings", ".", "opt_type", ":", "\n", "            ", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "RMSprop", "(", "\n", "params", "=", "params", ",", "\n", "lr", "=", "self", ".", "settings", ".", "lr", ",", "\n", "alpha", "=", "self", ".", "settings", ".", "alpha", ",", "\n", "eps", "=", "self", ".", "settings", ".", "eps", ",", "\n", "weight_decay", "=", "self", ".", "settings", ".", "weight_decay", ",", "\n", "momentum", "=", "self", ".", "settings", ".", "momentum", ",", "\n", ")", "\n", "", "elif", "\"AdamW\"", "in", "self", ".", "settings", ".", "opt_type", ":", "\n", "            ", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "AdamW", "(", "\n", "params", "=", "params", ",", "\n", "lr", "=", "self", ".", "settings", ".", "lr", ",", "\n", "weight_decay", "=", "self", ".", "settings", ".", "weight_decay", ",", "\n", ")", "\n", "", "elif", "\"Adam\"", "in", "self", ".", "settings", ".", "opt_type", ":", "\n", "            ", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "params", "=", "params", ",", "\n", "lr", "=", "self", ".", "settings", ".", "lr", ",", "\n", "weight_decay", "=", "self", ".", "settings", ".", "weight_decay", ",", "\n", ")", "\n", "\n", "", "self", ".", "logger", ".", "info", "(", "self", ".", "optimizer", ")", "\n", "self", ".", "logger", ".", "info", "(", "self", ".", "criterion", ")", "\n", "\n", "if", "optimizer_state", "is", "not", "None", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"Load optimizer state!\"", ")", "\n", "self", ".", "optimizer", ".", "load_state_dict", "(", "optimizer_state", ")", "\n", "\n", "", "if", "\"cosine_warmup\"", "in", "self", ".", "settings", ".", "lr_scheduler_type", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"Cosine Annealing Warmup LR!\"", ")", "\n", "self", ".", "after_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "\n", "self", ".", "optimizer", ",", "self", ".", "settings", ".", "n_epochs", "-", "self", ".", "settings", ".", "warmup_n_epochs", "\n", ")", "\n", "self", ".", "scheduler", "=", "GradualWarmupScheduler", "(", "\n", "self", ".", "optimizer", ",", "1", ",", "self", ".", "settings", ".", "warmup_n_epochs", ",", "self", ".", "after_scheduler", "\n", ")", "\n", "", "elif", "\"cosine\"", "in", "self", ".", "settings", ".", "lr_scheduler_type", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"Cosine Annealing LR!\"", ")", "\n", "self", ".", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "\n", "self", ".", "optimizer", ",", "self", ".", "settings", ".", "n_epochs", "\n", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"MultiStep LR!\"", ")", "\n", "self", ".", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "\n", "self", ".", "optimizer", ",", "milestones", "=", "self", ".", "settings", ".", "step", ",", "gamma", "=", "0.1", "\n", ")", "\n", "\n", "", "if", "lr_scheduler_state", "is", "not", "None", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"Load lr state\"", ")", "\n", "last_epoch", "=", "lr_scheduler_state", "[", "\"last_epoch\"", "]", "\n", "self", ".", "logger", ".", "info", "(", "self", ".", "scheduler", ".", "last_epoch", ")", "\n", "while", "self", ".", "scheduler", ".", "last_epoch", "<", "last_epoch", ":", "\n", "                ", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "\n", "", "", "model_without_ddp", "=", "self", ".", "model", "\n", "if", "self", ".", "settings", ".", "distributed", ":", "\n", "            ", "self", ".", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "\n", "model", ",", "device_ids", "=", "[", "self", ".", "settings", ".", "gpu", "]", ",", "find_unused_parameters", "=", "True", "\n", ")", "\n", "self", ".", "model_without_ddp", "=", "self", ".", "model", ".", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.trainer.Trainer.backward": [[156, 163], ["trainer.Trainer.optimizer.zero_grad", "loss.backward", "trainer.Trainer.optimizer.step"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.AllReduce.backward", "home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.step"], ["", "", "def", "backward", "(", "self", ",", "loss", ")", ":", "\n", "        ", "\"\"\"\n        backward propagation\n        \"\"\"", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.trainer.Trainer.get_lr": [[164, 168], ["None"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "for", "param_group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "            ", "self", ".", "lr", "=", "param_group", "[", "\"lr\"", "]", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.trainer.Trainer.train": [[169, 232], ["MetricLogger", "MetricLogger.add_meter", "MetricLogger.add_meter", "trainer.Trainer.model.train", "MetricLogger.log_every", "MetricLogger.synchronize_between_processes", "trainer.Trainer.scheduler.step", "trainer.Trainer.get_lr", "trainer.Trainer.logger.info", "trainer.Trainer.logger.info", "SmoothedValue", "SmoothedValue", "time.time", "trainer.Trainer.model", "trainer.Trainer.criterion", "trainer.Trainer.backward", "accuracy", "MetricLogger.update", "MetricLogger.meters[].update", "MetricLogger.meters[].update", "MetricLogger.meters[].update", "trainer.Trainer.tensorboard_logger.add_scalar", "trainer.Trainer.tensorboard_logger.add_scalar", "trainer.Trainer.tensorboard_logger.add_scalar", "trainer.Trainer.tensorboard_logger.add_scalar", "image.to", "target.to", "acc1.item", "acc5.item", "trainer.Trainer.item", "time.time"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.add_meter", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.add_meter", "home.repos.pwc.inspect_result.zhuang-group_saq.core.trainer.Trainer.train", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.log_every", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.synchronize_between_processes", "home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.get_lr", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.AllReduce.backward", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.accuracy", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.update", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.update", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.update", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.update"], ["", "", "def", "train", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"\n        Train one epoch\n        :param epoch: index of epoch\n        \"\"\"", "\n", "\n", "metric_logger", "=", "MetricLogger", "(", "logger", "=", "self", ".", "logger", ",", "delimiter", "=", "\"  \"", ")", "\n", "metric_logger", ".", "add_meter", "(", "\"lr\"", ",", "SmoothedValue", "(", "window_size", "=", "1", ",", "fmt", "=", "\"{value}\"", ")", ")", "\n", "metric_logger", ".", "add_meter", "(", "\"img/s\"", ",", "SmoothedValue", "(", "window_size", "=", "10", ",", "fmt", "=", "\"{value}\"", ")", ")", "\n", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "header", "=", "\"Epoch: [{}]\"", ".", "format", "(", "epoch", ")", "\n", "for", "image", ",", "target", "in", "metric_logger", ".", "log_every", "(", "\n", "self", ".", "train_loader", ",", "self", ".", "settings", ".", "print_frequency", ",", "header", "\n", ")", ":", "\n", "            ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "image", ",", "target", "=", "image", ".", "to", "(", "self", ".", "device", ")", ",", "target", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# forward", "\n", "output", "=", "self", ".", "model", "(", "image", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# backward", "\n", "self", ".", "backward", "(", "loss", ")", "\n", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "batch_size", "=", "image", ".", "shape", "[", "0", "]", "\n", "metric_logger", ".", "update", "(", "\n", "loss", "=", "loss", ".", "item", "(", ")", ",", "lr", "=", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", "\n", ")", "\n", "metric_logger", ".", "meters", "[", "\"acc1\"", "]", ".", "update", "(", "acc1", ".", "item", "(", ")", ",", "n", "=", "batch_size", ")", "\n", "metric_logger", ".", "meters", "[", "\"acc5\"", "]", ".", "update", "(", "acc5", ".", "item", "(", ")", ",", "n", "=", "batch_size", ")", "\n", "metric_logger", ".", "meters", "[", "\"img/s\"", "]", ".", "update", "(", "\n", "batch_size", "/", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "\n", ")", "\n", "\n", "# gather the stats from all processes", "\n", "", "metric_logger", ".", "synchronize_between_processes", "(", ")", "\n", "\n", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "self", ".", "get_lr", "(", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Change Learning rate: {}\"", ".", "format", "(", "self", ".", "lr", ")", ")", "\n", "\n", "train_error", "=", "100", "-", "metric_logger", ".", "acc1", ".", "global_avg", "\n", "train_loss", "=", "metric_logger", ".", "loss", ".", "global_avg", "\n", "train5_error", "=", "100", "-", "metric_logger", ".", "acc5", ".", "global_avg", "\n", "if", "self", ".", "tensorboard_logger", "is", "not", "None", ":", "\n", "            ", "self", ".", "tensorboard_logger", ".", "add_scalar", "(", "\n", "\"train_top1_error\"", ",", "train_error", ",", "self", ".", "run_count", "\n", ")", "\n", "self", ".", "tensorboard_logger", ".", "add_scalar", "(", "\n", "\"train_top5_error\"", ",", "train5_error", ",", "self", ".", "run_count", "\n", ")", "\n", "self", ".", "tensorboard_logger", ".", "add_scalar", "(", "\"train_loss\"", ",", "train_loss", ",", "self", ".", "run_count", ")", "\n", "self", ".", "tensorboard_logger", ".", "add_scalar", "(", "\"lr\"", ",", "self", ".", "lr", ",", "self", ".", "run_count", ")", "\n", "\n", "", "self", ".", "logger", ".", "info", "(", "\n", "\"|===>Training Error: {:.4f} Loss: {:.4f}, Top5 Error: {:.4f}\"", ".", "format", "(", "\n", "train_error", ",", "train_loss", ",", "train5_error", "\n", ")", "\n", ")", "\n", "return", "train_error", ",", "train_loss", ",", "train5_error", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.trainer.Trainer.val": [[233, 282], ["trainer.Trainer.model.eval", "MetricLogger", "MetricLogger.synchronize_between_processes", "trainer.Trainer.logger.info", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "MetricLogger.log_every", "trainer.Trainer.tensorboard_logger.add_scalar", "trainer.Trainer.tensorboard_logger.add_scalar", "trainer.Trainer.tensorboard_logger.add_scalar", "image.to.to.to", "target.to.to.to", "trainer.Trainer.model", "trainer.Trainer.criterion", "accuracy", "MetricLogger.update", "MetricLogger.meters[].update", "MetricLogger.meters[].update", "acc1.item", "acc5.item", "trainer.Trainer.item"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.synchronize_between_processes", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.log_every", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.accuracy", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.update", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.update", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.update"], ["", "def", "val", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"\n        Validation\n        :param epoch: index of epoch\n        \"\"\"", "\n", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "metric_logger", "=", "MetricLogger", "(", "logger", "=", "self", ".", "logger", ",", "delimiter", "=", "\"  \"", ")", "\n", "header", "=", "\"Test:\"", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "image", ",", "target", "in", "metric_logger", ".", "log_every", "(", "\n", "self", ".", "val_loader", ",", "self", ".", "settings", ".", "print_frequency", ",", "header", "\n", ")", ":", "\n", "                ", "image", "=", "image", ".", "to", "(", "self", ".", "device", ",", "non_blocking", "=", "True", ")", "\n", "target", "=", "target", ".", "to", "(", "self", ".", "device", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# forward", "\n", "output", "=", "self", ".", "model", "(", "image", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "\n", "batch_size", "=", "image", ".", "shape", "[", "0", "]", "\n", "metric_logger", ".", "update", "(", "loss", "=", "loss", ".", "item", "(", ")", ")", "\n", "metric_logger", ".", "meters", "[", "\"acc1\"", "]", ".", "update", "(", "acc1", ".", "item", "(", ")", ",", "n", "=", "batch_size", ")", "\n", "metric_logger", ".", "meters", "[", "\"acc5\"", "]", ".", "update", "(", "acc5", ".", "item", "(", ")", ",", "n", "=", "batch_size", ")", "\n", "# gather the stats from all processes", "\n", "", "", "metric_logger", ".", "synchronize_between_processes", "(", ")", "\n", "\n", "val_error", "=", "100", "-", "metric_logger", ".", "acc1", ".", "global_avg", "\n", "val_loss", "=", "metric_logger", ".", "loss", ".", "global_avg", "\n", "val5_error", "=", "100", "-", "metric_logger", ".", "acc5", ".", "global_avg", "\n", "if", "self", ".", "tensorboard_logger", "is", "not", "None", ":", "\n", "            ", "self", ".", "tensorboard_logger", ".", "add_scalar", "(", "\n", "\"val_top1_error\"", ",", "val_error", ",", "self", ".", "run_count", "\n", ")", "\n", "self", ".", "tensorboard_logger", ".", "add_scalar", "(", "\n", "\"val_top5_error\"", ",", "val5_error", ",", "self", ".", "run_count", "\n", ")", "\n", "self", ".", "tensorboard_logger", ".", "add_scalar", "(", "\"val_loss\"", ",", "val_loss", ",", "self", ".", "run_count", ")", "\n", "\n", "", "self", ".", "run_count", "+=", "1", "\n", "self", ".", "logger", ".", "info", "(", "\n", "\"|===>Testing Error: {:.4f} Loss: {:.4f}, Top5 Error: {:.4f}\"", ".", "format", "(", "\n", "val_error", ",", "val_loss", ",", "val5_error", "\n", ")", "\n", ")", "\n", "return", "val_error", ",", "val_loss", ",", "val5_error", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.trainer.Trainer.val_without_tb": [[283, 322], ["trainer.Trainer.model.eval", "MetricLogger", "MetricLogger.synchronize_between_processes", "trainer.Trainer.logger.info", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "MetricLogger.log_every", "image.to.to.to", "target.to.to.to", "trainer.Trainer.model", "trainer.Trainer.criterion", "accuracy", "MetricLogger.update", "MetricLogger.meters[].update", "MetricLogger.meters[].update", "acc1.item", "acc5.item", "trainer.Trainer.item"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.synchronize_between_processes", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.log_every", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.accuracy", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.update", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.update", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.update"], ["", "def", "val_without_tb", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"\n        Validation\n        :param epoch: index of epoch\n        \"\"\"", "\n", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "metric_logger", "=", "MetricLogger", "(", "logger", "=", "self", ".", "logger", ",", "delimiter", "=", "\"  \"", ")", "\n", "header", "=", "\"Test:\"", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "image", ",", "target", "in", "metric_logger", ".", "log_every", "(", "\n", "self", ".", "val_loader", ",", "self", ".", "settings", ".", "print_frequency", ",", "header", "\n", ")", ":", "\n", "                ", "image", "=", "image", ".", "to", "(", "self", ".", "device", ",", "non_blocking", "=", "True", ")", "\n", "target", "=", "target", ".", "to", "(", "self", ".", "device", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# forward", "\n", "output", "=", "self", ".", "model", "(", "image", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "\n", "batch_size", "=", "image", ".", "shape", "[", "0", "]", "\n", "metric_logger", ".", "update", "(", "loss", "=", "loss", ".", "item", "(", ")", ")", "\n", "metric_logger", ".", "meters", "[", "\"acc1\"", "]", ".", "update", "(", "acc1", ".", "item", "(", ")", ",", "n", "=", "batch_size", ")", "\n", "metric_logger", ".", "meters", "[", "\"acc5\"", "]", ".", "update", "(", "acc5", ".", "item", "(", ")", ",", "n", "=", "batch_size", ")", "\n", "# gather the stats from all processes", "\n", "", "", "metric_logger", ".", "synchronize_between_processes", "(", ")", "\n", "\n", "val_error", "=", "100", "-", "metric_logger", ".", "acc1", ".", "global_avg", "\n", "val_loss", "=", "metric_logger", ".", "loss", ".", "global_avg", "\n", "val5_error", "=", "100", "-", "metric_logger", ".", "acc5", ".", "global_avg", "\n", "self", ".", "logger", ".", "info", "(", "\n", "\"|===>Testing Error: {:.4f} Loss: {:.4f}, Top5 Error: {:.4f}\"", ".", "format", "(", "\n", "val_error", ",", "val_loss", ",", "val5_error", "\n", ")", "\n", ")", "\n", "return", "val_error", ",", "val_loss", ",", "val5_error", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.logger.get_logger": [[6, 29], ["logging.getLogger", "logging.Formatter", "logging.Formatter", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.getLogger.addHandler", "logging.getLogger.setLevel", "os.path.join"], "function", ["None"], ["def", "get_logger", "(", "save_path", ",", "logger_name", ")", ":", "\n", "    ", "\"\"\"\n    Initialize logger\n    \"\"\"", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", "logger_name", ")", "\n", "logger", ".", "propagate", "=", "False", "\n", "file_formatter", "=", "logging", ".", "Formatter", "(", "\"%(asctime)s %(levelname)s: %(message)s\"", ")", "\n", "console_formatter", "=", "logging", ".", "Formatter", "(", "\"%(message)s\"", ")", "\n", "\n", "# file log", "\n", "file_handler", "=", "logging", ".", "FileHandler", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"experiment.log\"", ")", ")", "\n", "file_handler", ".", "setFormatter", "(", "file_formatter", ")", "\n", "\n", "# console log", "\n", "console_handler", "=", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", "\n", "console_handler", ".", "setFormatter", "(", "console_formatter", ")", "\n", "\n", "logger", ".", "addHandler", "(", "file_handler", ")", "\n", "logger", ".", "addHandler", "(", "console_handler", ")", "\n", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "return", "logger", "\n", "", ""]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.sam.SAM.__init__": [[5, 13], ["dict", "super().__init__", "base_optimizer"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.__init__"], ["\n", "class", "SAM", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "model", ",", "rho", "=", "0.5", ",", "eta", "=", "0.01", ")", ":", "\n", "        ", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "rho", "=", "rho", "\n", "self", ".", "eta", "=", "eta", "\n", "self", ".", "state", "=", "defaultdict", "(", "dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.sam.SAM.first_step": [[14, 33], ["torch.no_grad", "sam.SAM._grad_norm", "sam.SAM.zero_grad", "p.add_", "scale.to", "torch.pow"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.sam.SAM._grad_norm"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_grad_norm", "(", "self", ")", ":", "\n", "# put everything on the same device, in case of model parallelism", "\n", "        ", "shared_device", "=", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "\"params\"", "]", "[", "0", "]", ".", "device", "\n", "wgrads", "=", "[", "]", "\n", "for", "n", ",", "p", "in", "self", ".", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                ", "continue", "\n", "", "wgrads", ".", "append", "(", "torch", ".", "norm", "(", "p", ".", "grad", ",", "p", "=", "2", ")", ".", "to", "(", "shared_device", ")", ")", "\n", "", "wgrad_norm", "=", "torch", ".", "norm", "(", "torch", ".", "stack", "(", "wgrads", ")", ",", "p", "=", "2", ")", "\n", "return", "wgrad_norm", "\n", "\n", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "ascent_step", "(", "self", ")", ":", "\n", "        ", "grad_norm", "=", "self", ".", "_grad_norm", "(", ")", "\n", "scale", "=", "self", ".", "rho", "/", "(", "grad_norm", "+", "1e-12", ")", "\n", "for", "n", ",", "p", "in", "self", ".", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                ", "continue", "\n", "", "self", ".", "state", "[", "p", "]", "[", "\"old_p\"", "]", "=", "p", ".", "data", ".", "clone", "(", ")", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.sam.SAM.second_step": [[34, 46], ["torch.no_grad", "sam.SAM.base_optimizer.step", "sam.SAM.zero_grad", "p.sub_"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.step"], ["e_w", "=", "p", ".", "grad", "*", "scale", ".", "to", "(", "p", ")", "\n", "p", ".", "add_", "(", "e_w", ")", "\n", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "descent_step", "(", "self", ")", ":", "\n", "        ", "for", "n", ",", "p", "in", "self", ".", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                ", "continue", "\n", "# get back to \"w\" from \"w + e(w)\"", "\n", "", "p", ".", "data", "=", "self", ".", "state", "[", "p", "]", "[", "\"old_p\"", "]", "\n", "", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.sam.SAM.step": [[47, 59], ["torch.no_grad", "sam.SAM.first_step", "closure", "sam.SAM.second_step", "torch.enable_grad"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.sam.SAM.first_step", "home.repos.pwc.inspect_result.zhuang-group_saq.core.sam.SAM.second_step"], ["\n", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "restore_step", "(", "self", ")", ":", "\n", "        ", "for", "n", ",", "p", "in", "self", ".", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "grad", "is", "None", "or", "\"clip_value\"", "in", "n", ":", "\n", "                ", "continue", "\n", "", "p", ".", "sub_", "(", "self", ".", "state", "[", "p", "]", "[", "\"eps\"", "]", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.sam.SAM._grad_norm": [[60, 78], ["torch.norm", "torch.stack", "torch.abs"], "methods", ["None"], []], "home.repos.pwc.inspect_result.zhuang-group_saq.core.loss.CrossEntropyLossSoft.forward": [[7, 13], ["torch.nn.functional.log_softmax", "target.unsqueeze.unsqueeze.unsqueeze", "output_log_prob.unsqueeze.unsqueeze.unsqueeze", "torch.bmm"], "methods", ["None"], ["def", "forward", "(", "self", ",", "output", ",", "target", ")", ":", "\n", "        ", "output_log_prob", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "target", "=", "target", ".", "unsqueeze", "(", "1", ")", "\n", "output_log_prob", "=", "output_log_prob", ".", "unsqueeze", "(", "2", ")", "\n", "cross_entropy_loss", "=", "-", "torch", ".", "bmm", "(", "target", ",", "output_log_prob", ")", "\n", "return", "cross_entropy_loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.label_smooth.LabelSmoothCrossEntropyLoss.__init__": [[7, 21], ["torch.nn.modules.loss._WeightedLoss.__init__"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "num_classes", ",", "\n", "epsilon", "=", "0.1", ",", "\n", "weight", "=", "None", ",", "\n", "size_average", "=", "None", ",", "\n", "reduce", "=", "None", ",", "\n", "reduction", "=", "\"mean\"", ",", "\n", ")", ":", "\n", "        ", "super", "(", "LabelSmoothCrossEntropyLoss", ",", "self", ")", ".", "__init__", "(", "\n", "weight", ",", "size_average", ",", "reduce", ",", "reduction", "\n", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.label_smooth.LabelSmoothCrossEntropyLoss.forward": [[22, 44], ["torch.log_softmax", "torch.log_softmax", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like.scatter_", "torch.full_like.scatter_", "losses.sum", "target.unsqueeze", "losses.mean", "ValueError"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "logprobs", "=", "F", ".", "log_softmax", "(", "input", ",", "dim", "=", "-", "1", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "target_probs", "=", "torch", ".", "full_like", "(", "\n", "logprobs", ",", "self", ".", "epsilon", "/", "(", "self", ".", "num_classes", "-", "1", ")", "\n", ")", "\n", "target_probs", ".", "scatter_", "(", "\n", "dim", "=", "-", "1", ",", "index", "=", "target", ".", "unsqueeze", "(", "1", ")", ",", "value", "=", "1.0", "-", "self", ".", "epsilon", "\n", ")", "\n", "\n", "", "losses", "=", "-", "(", "target_probs", "*", "logprobs", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "if", "self", ".", "weight", "is", "not", "None", ":", "\n", "            ", "losses", "=", "losses", "*", "self", ".", "weight", "\n", "", "if", "self", ".", "reduction", "==", "\"none\"", ":", "\n", "            ", "return", "losses", "\n", "", "elif", "self", ".", "reduction", "==", "\"sum\"", ":", "\n", "            ", "return", "losses", ".", "sum", "(", ")", "\n", "", "elif", "self", ".", "reduction", "==", "\"mean\"", ":", "\n", "            ", "return", "losses", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "f\"The parameter 'reduction' must be in ['none','mean','sum'], bot got {self.redcution}\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.dataloader.DistributedIndicesWrapper.__init__": [[13, 16], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataset", ":", "torch", ".", "utils", ".", "data", ".", "Dataset", ",", "indices", ":", "list", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "indices", "=", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.dataloader.DistributedIndicesWrapper.__len__": [[17, 19], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.dataloader.DistributedIndicesWrapper.__getitem__": [[20, 24], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "# TODO: do the sampling here ?", "\n", "        ", "idx", "=", "self", ".", "indices", "[", "item", "]", "\n", "return", "self", ".", "dataset", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.dataloader.get_cifar_dataloader": [[26, 107], ["logger.info", "os.path.join", "torchvision.Compose", "torchvision.Compose", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.CIFAR10", "torchvision.CIFAR10", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.RandomSampler", "torch.utils.data.SequentialSampler", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.CIFAR100", "torchvision.CIFAR100", "logger.info"], "function", ["None"], ["", "", "def", "get_cifar_dataloader", "(", "\n", "dataset", ",", "\n", "batch_size", ",", "\n", "n_threads", "=", "4", ",", "\n", "data_path", "=", "\"/home/dataset/\"", ",", "\n", "distributed", "=", "False", ",", "\n", "logger", "=", "None", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Get dataloader for cifar10/cifar100\n    :param dataset: the name of the dataset\n    :param batch_size: how many samples per batch to load\n    :param n_threads:  how many subprocesses to use for data loading.\n    :param data_path: the path of dataset\n    :param logger: logger for logging\n    \"\"\"", "\n", "\n", "logger", ".", "info", "(", "\"|===>Get datalaoder for \"", "+", "dataset", ")", "\n", "\n", "if", "dataset", "==", "\"cifar10\"", ":", "\n", "        ", "norm_mean", "=", "[", "0.49139968", ",", "0.48215827", ",", "0.44653124", "]", "\n", "norm_std", "=", "[", "0.24703233", ",", "0.24348505", ",", "0.26158768", "]", "\n", "# data_root = os.path.join(data_path, \"cifar\")", "\n", "", "elif", "dataset", "==", "\"cifar100\"", ":", "\n", "        ", "norm_mean", "=", "[", "0.50705882", ",", "0.48666667", ",", "0.44078431", "]", "\n", "norm_std", "=", "[", "0.26745098", ",", "0.25568627", ",", "0.27607843", "]", "\n", "# data_root = os.path.join(data_path, \"cifar100\")", "\n", "", "data_root", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "\"cifar\"", ")", "\n", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "norm_mean", ",", "norm_std", ")", ",", "\n", "]", "\n", ")", "\n", "val_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "norm_mean", ",", "norm_std", ")", "]", "\n", ")", "\n", "\n", "if", "dataset", "==", "\"cifar10\"", ":", "\n", "        ", "train_dataset", "=", "datasets", ".", "CIFAR10", "(", "\n", "root", "=", "data_root", ",", "train", "=", "True", ",", "transform", "=", "train_transform", ",", "download", "=", "True", "\n", ")", "\n", "val_dataset", "=", "datasets", ".", "CIFAR10", "(", "\n", "root", "=", "data_root", ",", "train", "=", "False", ",", "transform", "=", "val_transform", "\n", ")", "\n", "", "elif", "dataset", "==", "\"cifar100\"", ":", "\n", "        ", "train_dataset", "=", "datasets", ".", "CIFAR100", "(", "\n", "root", "=", "data_root", ",", "train", "=", "True", ",", "transform", "=", "train_transform", ",", "download", "=", "True", "\n", ")", "\n", "val_dataset", "=", "datasets", ".", "CIFAR100", "(", "\n", "root", "=", "data_root", ",", "train", "=", "False", ",", "transform", "=", "val_transform", "\n", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "info", "(", "\"invalid data set\"", ")", "\n", "assert", "False", ",", "\"invalid data set\"", "\n", "\n", "", "if", "distributed", ":", "\n", "        ", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "val_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "val_dataset", ")", "\n", "", "else", ":", "\n", "        ", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "RandomSampler", "(", "train_dataset", ")", "\n", "val_sampler", "=", "torch", ".", "utils", ".", "data", ".", "SequentialSampler", "(", "val_dataset", ")", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", "=", "train_dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "sampler", "=", "train_sampler", ",", "\n", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "n_threads", ",", "\n", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", "=", "val_dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "sampler", "=", "val_sampler", ",", "\n", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "n_threads", ",", "\n", ")", "\n", "return", "train_loader", ",", "val_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.dataloader.get_cifar_train_val_test_dataloader": [[109, 221], ["logger.info", "os.path.join", "torchvision.Compose", "torchvision.Compose", "len", "list", "int", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.CIFAR100", "torchvision.CIFAR100", "range", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.SequentialSampler", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.CIFAR10", "torchvision.CIFAR10", "logger.info", "dataloader.DistributedIndicesWrapper", "dataloader.DistributedIndicesWrapper"], "function", ["None"], ["", "def", "get_cifar_train_val_test_dataloader", "(", "\n", "dataset", ",", "\n", "batch_size", ",", "\n", "n_threads", "=", "4", ",", "\n", "data_path", "=", "\"/home/dataset/\"", ",", "\n", "train_ratio", "=", "0.5", ",", "\n", "distributed", "=", "False", ",", "\n", "logger", "=", "None", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Get dataloader for cifar10/cifar100\n    :param dataset: the name of the dataset\n    :param batch_size: how many samples per batch to load\n    :param n_threads:  how many subprocesses to use for data loading.\n    :param data_path: the path of dataset\n    :param train_ratio: the ratio of training data\n    :param distributed: whether to use distributed training\n    :param logger: logger for logging\n    \"\"\"", "\n", "\n", "logger", ".", "info", "(", "\"|===>Get datalaoder for \"", "+", "dataset", ")", "\n", "\n", "if", "dataset", "==", "\"cifar10\"", ":", "\n", "        ", "norm_mean", "=", "[", "0.49139968", ",", "0.48215827", ",", "0.44653124", "]", "\n", "norm_std", "=", "[", "0.24703233", ",", "0.24348505", ",", "0.26158768", "]", "\n", "", "elif", "dataset", "==", "\"cifar100\"", ":", "\n", "        ", "norm_mean", "=", "[", "0.50705882", ",", "0.48666667", ",", "0.44078431", "]", "\n", "norm_std", "=", "[", "0.26745098", ",", "0.25568627", ",", "0.27607843", "]", "\n", "", "data_root", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "\"cifar\"", ")", "\n", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "norm_mean", ",", "norm_std", ")", ",", "\n", "]", "\n", ")", "\n", "val_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "norm_mean", ",", "norm_std", ")", "]", "\n", ")", "\n", "\n", "if", "\"cifar100\"", "in", "dataset", ":", "\n", "        ", "train_dataset", "=", "datasets", ".", "CIFAR100", "(", "\n", "root", "=", "data_root", ",", "train", "=", "True", ",", "transform", "=", "train_transform", ",", "download", "=", "True", "\n", ")", "\n", "test_dataset", "=", "datasets", ".", "CIFAR100", "(", "\n", "root", "=", "data_root", ",", "train", "=", "False", ",", "transform", "=", "val_transform", "\n", ")", "\n", "", "elif", "\"cifar10\"", "in", "dataset", ":", "\n", "        ", "train_dataset", "=", "datasets", ".", "CIFAR10", "(", "\n", "root", "=", "data_root", ",", "train", "=", "True", ",", "transform", "=", "train_transform", ",", "download", "=", "True", "\n", ")", "\n", "test_dataset", "=", "datasets", ".", "CIFAR10", "(", "\n", "root", "=", "data_root", ",", "train", "=", "False", ",", "transform", "=", "val_transform", "\n", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "info", "(", "\"invalid data set\"", ")", "\n", "assert", "False", ",", "\"invalid data set\"", "\n", "\n", "", "num_train", "=", "len", "(", "train_dataset", ")", "\n", "indices", "=", "list", "(", "range", "(", "num_train", ")", ")", "\n", "ratio", "=", "train_ratio", "\n", "split", "=", "int", "(", "num_train", "*", "ratio", ")", "\n", "# split = int(25000)", "\n", "\n", "# train_sampler = torch.utils.data.RandomSampler(train_dataset)", "\n", "# val_sampler = torch.utils.data.SequentialSampler(val_dataset)", "\n", "\n", "if", "distributed", ":", "\n", "        ", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "\n", "DistributedIndicesWrapper", "(", "train_dataset", ",", "indices", "[", ":", "split", "]", ")", "\n", ")", "\n", "val_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "\n", "DistributedIndicesWrapper", "(", "train_dataset", ",", "indices", "[", "split", ":", "num_train", "]", ")", "\n", ")", "\n", "test_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "test_dataset", ")", "\n", "", "else", ":", "\n", "        ", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "indices", "[", ":", "split", "]", ")", "\n", "val_sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "\n", "indices", "[", "split", ":", "num_train", "]", "\n", ")", "\n", "test_sampler", "=", "torch", ".", "utils", ".", "data", ".", "SequentialSampler", "(", "test_dataset", ")", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", "=", "train_dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "sampler", "=", "train_sampler", ",", "\n", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "n_threads", ",", "\n", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", "=", "train_dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "sampler", "=", "val_sampler", ",", "\n", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "n_threads", ",", "\n", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", "=", "test_dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "sampler", "=", "test_sampler", ",", "\n", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "n_threads", ",", "\n", ")", "\n", "return", "(", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "test_loader", ",", "\n", "train_sampler", ",", "\n", "val_sampler", ",", "\n", "test_sampler", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.dataloader.get_imagenet_dataloader": [[224, 350], ["logger.info", "os.path.join", "torchvision.Normalize", "torchvision.Compose", "torchvision.ImageFolder", "torchvision.ImageFolder", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "dataset.replace.replace", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torchvision.Compose", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.RandomSampler", "torch.utils.data.SequentialSampler", "torchvision.Compose", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Compose", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Compose", "NotImplementedError", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ColorJitter", "torchvision.ToTensor", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ColorJitter", "torchvision.ToTensor"], "function", ["None"], ["", "def", "get_imagenet_dataloader", "(", "\n", "dataset", ",", "\n", "batch_size", ",", "\n", "n_threads", "=", "4", ",", "\n", "data_path", "=", "\"/home/dataset/\"", ",", "\n", "transfroms_name", "=", "\"default\"", ",", "\n", "distributed", "=", "False", ",", "\n", "logger", "=", "None", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Get dataloader for imagenet\n    :param dataset: the name of the dataset\n    :param batch_size: how many samples per batch to load\n    :param n_threads:  how many subprocesses to use for data loading.\n    :param data_path: the path of dataset\n    :param transfroms_name: the name of data transformation, default | mobilenet | mobilenetv3 | mobilenet_nas\n    :param distributed: whether to use distributed training\n    :param logger: logger for logging\n    \"\"\"", "\n", "\n", "logger", ".", "info", "(", "\n", "\"|===>Get datalaoder for {}, transfrom: {}\"", ".", "format", "(", "dataset", ",", "transfroms_name", ")", "\n", ")", "\n", "\n", "is_imagenet100", "=", "\"100\"", "in", "dataset", "\n", "if", "is_imagenet100", ":", "\n", "        ", "dataset", "=", "dataset", ".", "replace", "(", "\"100\"", ",", "\"\"", ")", "\n", "", "dataset_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "dataset", ")", "\n", "if", "is_imagenet100", ":", "\n", "        ", "traindir", "=", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "\"train100\"", ")", "\n", "valdir", "=", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "\"val100\"", ")", "\n", "", "else", ":", "\n", "        ", "traindir", "=", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "\"train\"", ")", "\n", "valdir", "=", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "\"val\"", ")", "\n", "", "normalize", "=", "transforms", ".", "Normalize", "(", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", ")", "\n", "\n", "if", "transfroms_name", "in", "[", "\"default\"", "]", ":", "\n", "        ", "train_transforms", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", "\n", ")", "\n", "\n", "", "elif", "transfroms_name", "in", "[", "\"mobilenet\"", "]", ":", "\n", "        ", "crop_scale", "=", "0.20", "\n", "\n", "train_transforms", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ",", "scale", "=", "(", "crop_scale", ",", "1.0", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", "\n", ")", "\n", "\n", "", "elif", "transfroms_name", "in", "[", "\"mobilenetv3\"", "]", ":", "\n", "        ", "crop_scale", "=", "0.08", "\n", "\n", "train_transforms", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ",", "scale", "=", "(", "crop_scale", ",", "1.0", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "brightness", "=", "32.0", "/", "255.0", ",", "saturation", "=", "0.5", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", "\n", ")", "\n", "\n", "", "elif", "transfroms_name", "in", "[", "\"mobilenet_nas\"", "]", ":", "\n", "        ", "train_transforms", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "\n", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ",", "hue", "=", "0.2", "\n", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", "\n", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "\"Data transform {} is not yet implemented.\"", ".", "format", "(", "transfroms_name", ")", "\n", ")", "\n", "\n", "", "val_transforms", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", "\n", ")", "\n", "\n", "train_dataset", "=", "datasets", ".", "ImageFolder", "(", "traindir", ",", "train_transforms", ")", "\n", "val_dataset", "=", "datasets", ".", "ImageFolder", "(", "valdir", ",", "val_transforms", ")", "\n", "\n", "if", "distributed", ":", "\n", "        ", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "val_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "val_dataset", ")", "\n", "", "else", ":", "\n", "        ", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "RandomSampler", "(", "train_dataset", ")", "\n", "val_sampler", "=", "torch", ".", "utils", ".", "data", ".", "SequentialSampler", "(", "val_dataset", ")", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "sampler", "=", "train_sampler", ",", "\n", "num_workers", "=", "n_threads", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "val_dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "sampler", "=", "val_sampler", ",", "\n", "num_workers", "=", "n_threads", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "\n", "return", "train_loader", ",", "val_loader", ",", "train_sampler", ",", "val_sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.dataloader.get_imagenet_train_val_test_dataloader": [[352, 498], ["logger.info", "os.path.join", "torchvision.Normalize", "torchvision.Compose", "torchvision.ImageFolder", "torchvision.ImageFolder", "torch.Generator", "torch.Generator.manual_seed", "torch.randperm().tolist", "torch.utils.data.dataset.Subset", "torch.utils.data.dataset.Subset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "dataset.replace.replace", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torchvision.Compose", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.RandomSampler", "torch.utils.data.RandomSampler", "torch.utils.data.SequentialSampler", "torchvision.Compose", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "torch.randperm", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Compose", "NotImplementedError", "len", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ColorJitter", "torchvision.ToTensor"], "function", ["None"], ["", "def", "get_imagenet_train_val_test_dataloader", "(", "\n", "dataset", ",", "\n", "batch_size", ",", "\n", "n_threads", "=", "4", ",", "\n", "data_path", "=", "\"/home/dataset/\"", ",", "\n", "transfroms_name", "=", "\"default\"", ",", "\n", "val_num", "=", "10000", ",", "\n", "distributed", "=", "False", ",", "\n", "logger", "=", "None", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Get dataloader for imagenet\n    :param dataset: the name of the dataset\n    :param batch_size: how many samples per batch to load\n    :param n_threads:  how many subprocesses to use for data loading.\n    :param data_path: the path of dataset\n    :param transfroms_name: the name of data transformation, default | mobilenet | mobilenetv3 | mobilenet_nas\n    :param val_num: the number of validation samples\n    :param distributed: whether to use distributed training\n    :param logger: logger for logging\n    \"\"\"", "\n", "\n", "logger", ".", "info", "(", "\n", "\"|===>Get datalaoder for {}, transfrom: {}\"", ".", "format", "(", "dataset", ",", "transfroms_name", ")", "\n", ")", "\n", "\n", "is_imagenet100", "=", "\"100\"", "in", "dataset", "\n", "if", "is_imagenet100", ":", "\n", "        ", "dataset", "=", "dataset", ".", "replace", "(", "\"100\"", ",", "\"\"", ")", "\n", "", "dataset_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "dataset", ")", "\n", "if", "is_imagenet100", ":", "\n", "        ", "traindir", "=", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "\"train100\"", ")", "\n", "valdir", "=", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "\"val100\"", ")", "\n", "testdir", "=", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "\"val100\"", ")", "\n", "", "else", ":", "\n", "        ", "traindir", "=", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "\"train\"", ")", "\n", "valdir", "=", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "\"val\"", ")", "\n", "testdir", "=", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "\"val\"", ")", "\n", "", "normalize", "=", "transforms", ".", "Normalize", "(", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", ")", "\n", "\n", "if", "transfroms_name", "in", "[", "\"default\"", "]", ":", "\n", "        ", "train_transforms", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", "\n", ")", "\n", "\n", "", "elif", "transfroms_name", "in", "[", "\"mobilenet\"", "]", ":", "\n", "        ", "crop_scale", "=", "0.20", "\n", "\n", "train_transforms", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ",", "scale", "=", "(", "crop_scale", ",", "1.0", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", "\n", ")", "\n", "\n", "", "elif", "transfroms_name", "in", "[", "\"mobilenet_nas\"", "]", ":", "\n", "        ", "train_transforms", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "\n", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ",", "hue", "=", "0.2", "\n", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", "\n", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "\"Data transform {} is not yet implemented.\"", ".", "format", "(", "transfroms_name", ")", "\n", ")", "\n", "\n", "", "test_transforms", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", "\n", ")", "\n", "\n", "train_dataset", "=", "datasets", ".", "ImageFolder", "(", "traindir", ",", "train_transforms", ")", "\n", "test_dataset", "=", "datasets", ".", "ImageFolder", "(", "testdir", ",", "test_transforms", ")", "\n", "\n", "g", "=", "torch", ".", "Generator", "(", ")", "\n", "g", ".", "manual_seed", "(", "0", ")", "\n", "indices", "=", "torch", ".", "randperm", "(", "len", "(", "train_dataset", ")", ",", "generator", "=", "g", ")", ".", "tolist", "(", ")", "\n", "train_split", "=", "indices", "[", ":", "-", "val_num", "]", "\n", "val_split", "=", "indices", "[", "-", "val_num", ":", "]", "\n", "train_subdataset", "=", "torch", ".", "utils", ".", "data", ".", "dataset", ".", "Subset", "(", "train_dataset", ",", "train_split", ")", "\n", "val_subdataset", "=", "torch", ".", "utils", ".", "data", ".", "dataset", ".", "Subset", "(", "train_dataset", ",", "val_split", ")", "\n", "# ratio = 0.8", "\n", "# split = int(num_train * ratio)", "\n", "\n", "if", "distributed", ":", "\n", "        ", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "\n", "train_subdataset", "\n", ")", "\n", "val_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "val_subdataset", ")", "\n", "test_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "\n", "test_dataset", ",", "shuffle", "=", "False", "\n", ")", "\n", "", "else", ":", "\n", "        ", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "RandomSampler", "(", "train_dataset", ")", "\n", "val_sampler", "=", "torch", ".", "utils", ".", "data", ".", "RandomSampler", "(", "val_subdataset", ")", "\n", "test_sampler", "=", "torch", ".", "utils", ".", "data", ".", "SequentialSampler", "(", "test_dataset", ")", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_subdataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "sampler", "=", "train_sampler", ",", "\n", "num_workers", "=", "n_threads", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "val_subdataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "sampler", "=", "val_sampler", ",", "\n", "num_workers", "=", "n_threads", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "test_dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "sampler", "=", "test_sampler", ",", "\n", "num_workers", "=", "n_threads", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "\n", "return", "(", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "test_loader", ",", "\n", "train_sampler", ",", "\n", "val_sampler", ",", "\n", "test_sampler", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.dataloader.get_dataloader": [[501, 541], ["dataloader.get_cifar_dataloader", "dataloader.get_imagenet_dataloader"], "function", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.dataloader.get_cifar_dataloader", "home.repos.pwc.inspect_result.zhuang-group_saq.core.dataloader.get_imagenet_dataloader"], ["", "def", "get_dataloader", "(", "args", ",", "logger", ")", ":", "\n", "    ", "\"\"\"\n    Get train loader and validation loader\n    \"\"\"", "\n", "train_sampler", "=", "None", "\n", "val_sampler", "=", "None", "\n", "if", "\"cifar\"", "in", "args", ".", "dataset", ":", "\n", "        ", "train_loader", ",", "val_loader", "=", "get_cifar_dataloader", "(", "\n", "args", ".", "dataset", ",", "\n", "args", ".", "batch_size", ",", "\n", "args", ".", "n_threads", ",", "\n", "args", ".", "data_path", ",", "\n", "args", ".", "distributed", ",", "\n", "logger", ",", "\n", ")", "\n", "\n", "", "elif", "\"imagenet\"", "in", "args", ".", "dataset", ":", "\n", "        ", "transfroms_name", "=", "\"default\"", "\n", "if", "\"mobilenetv3\"", "in", "args", ".", "network", ":", "\n", "            ", "transfroms_name", "=", "\"mobilenetv3\"", "\n", "", "elif", "\"mobilenet\"", "in", "args", ".", "network", ":", "\n", "            ", "transfroms_name", "=", "\"mobilenet\"", "\n", "\n", "", "(", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "train_sampler", ",", "\n", "val_sampler", ",", "\n", ")", "=", "get_imagenet_dataloader", "(", "\n", "args", ".", "dataset", ",", "\n", "args", ".", "batch_size", ",", "\n", "args", ".", "n_threads", ",", "\n", "args", ".", "data_path", ",", "\n", "transfroms_name", ",", "\n", "args", ".", "distributed", ",", "\n", "logger", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "assert", "NotImplemented", "\n", "", "return", "train_loader", ",", "val_loader", ",", "train_sampler", ",", "val_sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.dataloader.get_train_val_test_loader": [[543, 594], ["dataloader.get_cifar_train_val_test_dataloader", "dataloader.get_imagenet_train_val_test_dataloader"], "function", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.dataloader.get_cifar_train_val_test_dataloader", "home.repos.pwc.inspect_result.zhuang-group_saq.core.dataloader.get_imagenet_train_val_test_dataloader"], ["", "def", "get_train_val_test_loader", "(", "args", ",", "logger", ")", ":", "\n", "    ", "if", "\"cifar\"", "in", "args", ".", "dataset", ":", "\n", "        ", "(", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "test_loader", ",", "\n", "train_sampler", ",", "\n", "val_sampler", ",", "\n", "test_sampler", ",", "\n", ")", "=", "get_cifar_train_val_test_dataloader", "(", "\n", "args", ".", "dataset", ",", "\n", "args", ".", "batch_size", ",", "\n", "args", ".", "n_threads", ",", "\n", "args", ".", "data_path", ",", "\n", "args", ".", "train_ratio", ",", "\n", "args", ".", "distributed", ",", "\n", "logger", ",", "\n", ")", "\n", "", "elif", "\"imagenet\"", "in", "args", ".", "dataset", ":", "\n", "        ", "transfroms_name", "=", "\"default\"", "\n", "if", "\"mobilenetv3\"", "in", "args", ".", "network", ":", "\n", "            ", "transfroms_name", "=", "\"mobilenetv3\"", "\n", "", "elif", "\"mobilenet\"", "in", "args", ".", "network", ":", "\n", "            ", "transfroms_name", "=", "\"mobilenet\"", "\n", "\n", "", "(", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "test_loader", ",", "\n", "train_sampler", ",", "\n", "val_sampler", ",", "\n", "test_sampler", ",", "\n", ")", "=", "get_imagenet_train_val_test_dataloader", "(", "\n", "args", ".", "dataset", ",", "\n", "args", ".", "batch_size", ",", "\n", "args", ".", "n_threads", ",", "\n", "args", ".", "data_path", ",", "\n", "transfroms_name", ",", "\n", "args", ".", "val_num", ",", "\n", "args", ".", "distributed", ",", "\n", "logger", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "return", "(", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "test_loader", ",", "\n", "train_sampler", ",", "\n", "val_sampler", ",", "\n", "test_sampler", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.dataloader.get_random_input": [[597, 605], ["torch.randn", "torch.randn"], "function", ["None"], ["", "def", "get_random_input", "(", "args", ")", ":", "\n", "    ", "if", "\"cifar\"", "in", "args", ".", "dataset", ":", "\n", "        ", "random_input", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "", "elif", "\"imagenet\"", "in", "args", ".", "dataset", ":", "\n", "        ", "random_input", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "224", ",", "224", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "return", "random_input", "\n", "", ""]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.optim.get_optimizer": [[6, 58], ["model.parameters", "len", "model.named_parameters", "torch.optim.SGD", "model.parameters.append", "torch.optim.SGD", "torch.optim.RMSprop", "torch.optim.AdamW", "torch.optim.Adam"], "function", ["None"], ["import", "utils", ".", "sam", "as", "sam", "\n", "\n", "\n", "def", "get_minimizer", "(", "model", ",", "optimizer", ",", "args", ")", ":", "\n", "    ", "if", "\"QSAM\"", "in", "args", ".", "opt_type", ":", "\n", "        ", "minimizer", "=", "qsam", ".", "QSAM", "(", "\n", "optimizer", ",", "\n", "model", ",", "\n", "rho", "=", "args", ".", "rho", ",", "\n", "include_wclip", "=", "args", ".", "include_wclip", ",", "\n", "include_aclip", "=", "args", ".", "include_aclip", ",", "\n", "include_bn", "=", "args", ".", "include_bn", ",", "\n", ")", "\n", "", "elif", "\"QASAM\"", "in", "args", ".", "opt_type", ":", "\n", "        ", "minimizer", "=", "qasam", ".", "QASAM", "(", "\n", "optimizer", ",", "\n", "model", ",", "\n", "rho", "=", "args", ".", "rho", ",", "\n", "eta", "=", "args", ".", "eta", ",", "\n", "include_wclip", "=", "args", ".", "include_wclip", ",", "\n", "include_aclip", "=", "args", ".", "include_aclip", ",", "\n", "include_bn", "=", "args", ".", "include_bn", ",", "\n", ")", "\n", "", "elif", "\"ASAM\"", "in", "args", ".", "opt_type", ":", "\n", "        ", "minimizer", "=", "asam", ".", "ASAM", "(", "optimizer", ",", "model", ",", "rho", "=", "args", ".", "rho", ",", "eta", "=", "args", ".", "eta", ")", "\n", "", "elif", "\"SAM\"", "in", "args", ".", "opt_type", ":", "\n", "        ", "SAM", "=", "sam", ".", "SAM", "\n", "minimizer", "=", "SAM", "(", "optimizer", ",", "model", ",", "rho", "=", "args", ".", "rho", ",", "eta", "=", "args", ".", "eta", ",", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplemented", "\n", "\n", "", "return", "minimizer", "\n", "", ""]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.optim.get_scheduler": [[60, 90], ["logger.info", "torch.optim.lr_scheduler.CosineAnnealingLR", "core.warmup_scheduler.GradualWarmupScheduler", "logger.info", "torch.optim.lr_scheduler.CosineAnnealingLR", "logger.info", "torch.optim.lr_scheduler.MultiStepLR", "core.warmup_scheduler.GradualWarmupScheduler", "logger.info", "torch.optim.lr_scheduler.MultiStepLR"], "function", ["None"], []], "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.SmoothedValue.__init__": [[21, 28], ["collections.deque"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "window_size", "=", "20", ",", "fmt", "=", "None", ")", ":", "\n", "        ", "if", "fmt", "is", "None", ":", "\n", "            ", "fmt", "=", "\"{median:.4f} ({global_avg:.4f})\"", "\n", "", "self", ".", "deque", "=", "deque", "(", "maxlen", "=", "window_size", ")", "\n", "self", ".", "total", "=", "0.0", "\n", "self", ".", "count", "=", "0", "\n", "self", ".", "fmt", "=", "fmt", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.SmoothedValue.update": [[29, 33], ["utils.SmoothedValue.deque.append"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "value", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "deque", ".", "append", "(", "value", ")", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "total", "+=", "value", "*", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.SmoothedValue.synchronize_between_processes": [[34, 46], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.barrier", "torch.barrier", "torch.all_reduce", "torch.all_reduce", "t.tolist.tolist.tolist", "int", "utils.is_dist_avail_and_initialized"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.is_dist_avail_and_initialized"], ["", "def", "synchronize_between_processes", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Warning: does not synchronize the deque!\n        \"\"\"", "\n", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "            ", "return", "\n", "", "t", "=", "torch", ".", "tensor", "(", "[", "self", ".", "count", ",", "self", ".", "total", "]", ",", "dtype", "=", "torch", ".", "float64", ",", "device", "=", "\"cuda\"", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "dist", ".", "all_reduce", "(", "t", ")", "\n", "t", "=", "t", ".", "tolist", "(", ")", "\n", "self", ".", "count", "=", "int", "(", "t", "[", "0", "]", ")", "\n", "self", ".", "total", "=", "t", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.SmoothedValue.median": [[47, 51], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.median().item", "torch.tensor.median().item", "list", "torch.tensor.median", "torch.tensor.median"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.SmoothedValue.median", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.SmoothedValue.median"], ["", "@", "property", "\n", "def", "median", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ")", "\n", "return", "d", ".", "median", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.SmoothedValue.avg": [[52, 56], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.mean().item", "torch.tensor.mean().item", "list", "torch.tensor.mean", "torch.tensor.mean"], "methods", ["None"], ["", "@", "property", "\n", "def", "avg", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "return", "d", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.SmoothedValue.global_avg": [[57, 60], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "global_avg", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.SmoothedValue.max": [[61, 64], ["utils.SmoothedValue.max"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.SmoothedValue.max"], ["", "@", "property", "\n", "def", "max", "(", "self", ")", ":", "\n", "        ", "return", "max", "(", "self", ".", "deque", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.SmoothedValue.value": [[65, 68], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "value", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "deque", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.SmoothedValue.__str__": [[69, 76], ["utils.SmoothedValue.fmt.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fmt", ".", "format", "(", "\n", "median", "=", "self", ".", "median", ",", "\n", "avg", "=", "self", ".", "avg", ",", "\n", "global_avg", "=", "self", ".", "global_avg", ",", "\n", "max", "=", "self", ".", "max", ",", "\n", "value", "=", "self", ".", "value", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.__init__": [[80, 84], ["collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "logger", ",", "delimiter", "=", "\"\\t\"", ")", ":", "\n", "        ", "self", ".", "logger", "=", "logger", "\n", "self", ".", "meters", "=", "defaultdict", "(", "SmoothedValue", ")", "\n", "self", ".", "delimiter", "=", "delimiter", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.update": [[85, 91], ["kwargs.items", "isinstance", "isinstance", "utils.MetricLogger.meters[].update", "v.item.item.item"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.update"], ["", "def", "update", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "v", "=", "v", ".", "item", "(", ")", "\n", "", "assert", "isinstance", "(", "v", ",", "(", "float", ",", "int", ")", ")", "\n", "self", ".", "meters", "[", "k", "]", ".", "update", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.__getattr__": [[92, 99], ["AttributeError", "type"], "methods", ["None"], ["", "", "def", "__getattr__", "(", "self", ",", "attr", ")", ":", "\n", "        ", "if", "attr", "in", "self", ".", "meters", ":", "\n", "            ", "return", "self", ".", "meters", "[", "attr", "]", "\n", "", "if", "attr", "in", "self", ".", "__dict__", ":", "\n", "            ", "return", "self", ".", "__dict__", "[", "attr", "]", "\n", "", "raise", "AttributeError", "(", "\n", "\"'{}' object has no attribute '{}'\"", ".", "format", "(", "type", "(", "self", ")", ".", "__name__", ",", "attr", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.__str__": [[101, 106], ["utils.MetricLogger.meters.items", "utils.MetricLogger.delimiter.join", "loss_str.append", "str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "loss_str", "=", "[", "]", "\n", "for", "name", ",", "meter", "in", "self", ".", "meters", ".", "items", "(", ")", ":", "\n", "            ", "loss_str", ".", "append", "(", "\"{}: {}\"", ".", "format", "(", "name", ",", "str", "(", "meter", ")", ")", ")", "\n", "", "return", "self", ".", "delimiter", ".", "join", "(", "loss_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.synchronize_between_processes": [[107, 110], ["utils.MetricLogger.meters.values", "meter.synchronize_between_processes"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.synchronize_between_processes"], ["", "def", "synchronize_between_processes", "(", "self", ")", ":", "\n", "        ", "for", "meter", "in", "self", ".", "meters", ".", "values", "(", ")", ":", "\n", "            ", "meter", ".", "synchronize_between_processes", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.add_meter": [[111, 113], ["None"], "methods", ["None"], ["", "", "def", "add_meter", "(", "self", ",", "name", ",", "meter", ")", ":", "\n", "        ", "self", ".", "meters", "[", "name", "]", "=", "meter", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.log_every": [[114, 182], ["time.time", "time.time", "utils.SmoothedValue", "utils.SmoothedValue", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "str", "utils.MetricLogger.logger.info", "utils.MetricLogger.delimiter.join", "utils.MetricLogger.delimiter.join", "utils.SmoothedValue.update", "utils.SmoothedValue.update", "time.time", "time.time", "datetime.timedelta", "str", "str", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "len", "time.time", "time.time", "datetime.timedelta", "utils.MetricLogger.logger.info", "utils.MetricLogger.logger.info", "int", "str", "len", "utils.MetricLogger.format", "utils.MetricLogger.format", "len", "int", "len", "len", "str", "str", "str", "str", "str", "str", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.update", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.MetricLogger.update"], ["", "def", "log_every", "(", "self", ",", "iterable", ",", "print_freq", ",", "header", "=", "None", ")", ":", "\n", "        ", "i", "=", "0", "\n", "if", "not", "header", ":", "\n", "            ", "header", "=", "\"\"", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "iter_time", "=", "SmoothedValue", "(", "fmt", "=", "\"{avg:.4f}\"", ")", "\n", "data_time", "=", "SmoothedValue", "(", "fmt", "=", "\"{avg:.4f}\"", ")", "\n", "space_fmt", "=", "\":\"", "+", "str", "(", "len", "(", "str", "(", "len", "(", "iterable", ")", ")", ")", ")", "+", "\"d\"", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "log_msg", "=", "self", ".", "delimiter", ".", "join", "(", "\n", "[", "\n", "header", ",", "\n", "\"[{0\"", "+", "space_fmt", "+", "\"}/{1}]\"", ",", "\n", "\"eta: {eta}\"", ",", "\n", "\"{meters}\"", ",", "\n", "\"time: {time}\"", ",", "\n", "\"data: {data}\"", ",", "\n", "\"max mem: {memory:.0f}\"", ",", "\n", "]", "\n", ")", "\n", "", "else", ":", "\n", "            ", "log_msg", "=", "self", ".", "delimiter", ".", "join", "(", "\n", "[", "\n", "header", ",", "\n", "\"[{0\"", "+", "space_fmt", "+", "\"}/{1}]\"", ",", "\n", "\"eta: {eta}\"", ",", "\n", "\"{meters}\"", ",", "\n", "\"time: {time}\"", ",", "\n", "\"data: {data}\"", ",", "\n", "]", "\n", ")", "\n", "", "MB", "=", "1024.0", "*", "1024.0", "\n", "for", "obj", "in", "iterable", ":", "\n", "            ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "yield", "obj", "\n", "iter_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "if", "i", "%", "print_freq", "==", "0", ":", "\n", "                ", "eta_seconds", "=", "iter_time", ".", "global_avg", "*", "(", "len", "(", "iterable", ")", "-", "i", ")", "\n", "eta_string", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "eta_seconds", ")", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "self", ".", "logger", ".", "info", "(", "\n", "log_msg", ".", "format", "(", "\n", "i", ",", "\n", "len", "(", "iterable", ")", ",", "\n", "eta", "=", "eta_string", ",", "\n", "meters", "=", "str", "(", "self", ")", ",", "\n", "time", "=", "str", "(", "iter_time", ")", ",", "\n", "data", "=", "str", "(", "data_time", ")", ",", "\n", "memory", "=", "torch", ".", "cuda", ".", "max_memory_allocated", "(", ")", "/", "MB", ",", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "logger", ".", "info", "(", "\n", "log_msg", ".", "format", "(", "\n", "i", ",", "\n", "len", "(", "iterable", ")", ",", "\n", "eta", "=", "eta_string", ",", "\n", "meters", "=", "str", "(", "self", ")", ",", "\n", "time", "=", "str", "(", "iter_time", ")", ",", "\n", "data", "=", "str", "(", "data_time", ")", ",", "\n", ")", "\n", ")", "\n", "", "", "i", "+=", "1", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "", "total_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "total_time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "total_time", ")", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"{} Total time: {}\"", ".", "format", "(", "header", ",", "total_time_str", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.AllReduce.forward": [[347, 354], ["torch.all_gather", "torch.all_gather", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "torch.get_world_size", "torch.get_world_size"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.get_world_size", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.get_world_size"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ")", ":", "\n", "        ", "input_list", "=", "[", "torch", ".", "zeros_like", "(", "input", ")", "for", "k", "in", "range", "(", "dist", ".", "get_world_size", "(", ")", ")", "]", "\n", "# Use allgather instead of allreduce since I don't trust in-place operations ..", "\n", "dist", ".", "all_gather", "(", "input_list", ",", "input", ",", "async_op", "=", "False", ")", "\n", "inputs", "=", "torch", ".", "stack", "(", "input_list", ",", "dim", "=", "0", ")", "\n", "return", "torch", ".", "sum", "(", "inputs", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.AllReduce.backward": [[355, 359], ["torch.all_reduce", "torch.all_reduce"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "dist", ".", "all_reduce", "(", "grad_output", ",", "async_op", "=", "False", ")", "\n", "return", "grad_output", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.Dict.__getattr__": [[362, 364], ["None"], "methods", ["None"], ["    ", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "self", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.Dict.__setattr__": [[365, 367], ["None"], "methods", ["None"], ["", "def", "__setattr__", "(", "self", ",", "name", ",", "value", ")", ":", "\n", "        ", "self", "[", "name", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.Dict.__delattr__": [[368, 370], ["None"], "methods", ["None"], ["", "def", "__delattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "del", "self", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.accuracy": [[184, 199], ["torch.no_grad", "torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "correct[].flatten().sum", "res.append", "correct[].flatten"], "function", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.SmoothedValue.max"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", "[", "None", "]", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "flatten", "(", ")", ".", "sum", "(", "dtype", "=", "torch", ".", "float32", ")", "\n", "res", ".", "append", "(", "correct_k", "*", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.mkdir": [[201, 207], ["os.makedirs"], "function", ["None"], ["", "", "def", "mkdir", "(", "path", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "        ", "if", "e", ".", "errno", "!=", "errno", ".", "EEXIST", ":", "\n", "            ", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.setup_for_distributed": [[209, 223], ["kwargs.pop", "builtin_print"], "function", ["None"], ["", "", "", "def", "setup_for_distributed", "(", "is_master", ")", ":", "\n", "    ", "\"\"\"\n    This function disables printing when not in master process\n    \"\"\"", "\n", "import", "builtins", "as", "__builtin__", "\n", "\n", "builtin_print", "=", "__builtin__", ".", "print", "\n", "\n", "def", "print", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "force", "=", "kwargs", ".", "pop", "(", "\"force\"", ",", "False", ")", "\n", "if", "is_master", "or", "force", ":", "\n", "            ", "builtin_print", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "", "__builtin__", ".", "print", "=", "print", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.setup_logger_for_distributed": [[225, 238], ["kwargs.pop", "logger_info"], "function", ["None"], ["", "def", "setup_logger_for_distributed", "(", "is_master", ",", "logger", ")", ":", "\n", "    ", "\"\"\"\n    This function disables printing when not in master process\n    \"\"\"", "\n", "\n", "logger_info", "=", "logger", ".", "info", "\n", "\n", "def", "info", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "force", "=", "kwargs", ".", "pop", "(", "\"force\"", ",", "False", ")", "\n", "if", "is_master", "or", "force", ":", "\n", "            ", "logger_info", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "", "logger", ".", "info", "=", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.setup_tensorboard_logger_for_distributed": [[240, 260], ["kwargs.pop", "kwargs.pop", "tensorboard_logger_add_scalar", "tensorboard_logger_add_histogram"], "function", ["None"], ["", "def", "setup_tensorboard_logger_for_distributed", "(", "is_master", ",", "tensorboard_logger", ")", ":", "\n", "    ", "\"\"\"\n    This function disables printing when not in master process\n    \"\"\"", "\n", "\n", "tensorboard_logger_add_scalar", "=", "tensorboard_logger", ".", "add_scalar", "\n", "tensorboard_logger_add_histogram", "=", "tensorboard_logger", ".", "add_histogram", "\n", "\n", "def", "add_scalar", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "force", "=", "kwargs", ".", "pop", "(", "\"force\"", ",", "False", ")", "\n", "if", "is_master", "or", "force", ":", "\n", "            ", "tensorboard_logger_add_scalar", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "", "def", "add_histogram", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "force", "=", "kwargs", ".", "pop", "(", "\"force\"", ",", "False", ")", "\n", "if", "is_master", "or", "force", ":", "\n", "            ", "tensorboard_logger_add_histogram", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "", "tensorboard_logger", ".", "add_scalar", "=", "add_scalar", "\n", "tensorboard_logger", ".", "add_histogram", "=", "add_histogram", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.is_dist_avail_and_initialized": [[262, 268], ["torch.is_available", "torch.is_initialized"], "function", ["None"], ["", "def", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "False", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.get_world_size": [[270, 274], ["torch.get_world_size", "utils.is_dist_avail_and_initialized"], "function", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.get_world_size", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.is_dist_avail_and_initialized"], ["", "def", "get_world_size", "(", ")", ":", "\n", "    ", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "return", "dist", ".", "get_world_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.get_rank": [[276, 280], ["torch.get_rank", "utils.is_dist_avail_and_initialized"], "function", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.get_rank", "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.is_dist_avail_and_initialized"], ["", "def", "get_rank", "(", ")", ":", "\n", "    ", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "return", "dist", ".", "get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.is_main_process": [[282, 284], ["utils.get_rank"], "function", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.get_rank"], ["", "def", "is_main_process", "(", ")", ":", "\n", "    ", "return", "get_rank", "(", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.save_on_master": [[286, 289], ["utils.is_main_process", "torch.save", "torch.save"], "function", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.is_main_process"], ["", "def", "save_on_master", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "is_main_process", "(", ")", ":", "\n", "        ", "torch", ".", "save", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.init_distributed_mode": [[291, 319], ["torch.cuda.set_device", "torch.cuda.set_device", "utils.setup_for_distributed.print", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "int", "int", "int", "hasattr", "utils.setup_for_distributed.print"], "function", ["None"], ["", "", "def", "init_distributed_mode", "(", "args", ")", ":", "\n", "    ", "if", "\"RANK\"", "in", "os", ".", "environ", "and", "\"WORLD_SIZE\"", "in", "os", ".", "environ", ":", "\n", "        ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "\"RANK\"", "]", ")", "\n", "args", ".", "world_size", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "\n", "args", ".", "gpu", "=", "int", "(", "os", ".", "environ", "[", "\"LOCAL_RANK\"", "]", ")", "\n", "# elif \"SLURM_PROCID\" in os.environ:", "\n", "#     args.rank = int(os.environ[\"SLURM_PROCID\"])", "\n", "#     args.gpu = args.rank % torch.cuda.device_count()", "\n", "", "elif", "hasattr", "(", "args", ",", "\"rank\"", ")", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Not using distributed mode\"", ")", "\n", "args", ".", "distributed", "=", "False", "\n", "args", ".", "rank", "=", "0", "\n", "return", "\n", "\n", "", "args", ".", "distributed", "=", "True", "\n", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "args", ".", "dist_backend", "=", "\"nccl\"", "\n", "print", "(", "\n", "\"| distributed init (rank {}): {}\"", ".", "format", "(", "args", ".", "rank", ",", "args", ".", "dist_url", ")", ",", "flush", "=", "True", "\n", ")", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "\n", "backend", "=", "args", ".", "dist_backend", ",", "\n", "init_method", "=", "args", ".", "dist_url", ",", "\n", "world_size", "=", "args", ".", "world_size", ",", "\n", "rank", "=", "args", ".", "rank", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.set_gpu": [[323, 326], ["None"], "function", ["None"], ["", "def", "set_gpu", "(", "args", ")", ":", "\n", "    ", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "args", ".", "gpu", "\n", "args", ".", "gpu", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.set_reproducible": [[328, 338], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed"], "function", ["None"], ["", "def", "set_reproducible", "(", "seed", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    To ensure the reproducibility, refer to https://pytorch.org/docs/stable/notes/randomness.html.\n    Note that completely reproducible results are not guaranteed.\n    \"\"\"", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.unwrap_model": [[340, 344], ["isinstance"], "function", ["None"], ["", "def", "unwrap_model", "(", "model", ")", ":", "\n", "    ", "if", "isinstance", "(", "model", ",", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", ")", ":", "\n", "        ", "model", "=", "model", ".", "module", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.checkpoint.CheckPoint.__init__": [[18, 33], ["os.path.join", "core.utils.is_main_process", "os.path.isdir", "os.makedirs"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.utils.is_main_process"], ["def", "__init__", "(", "self", ",", "save_path", ",", "logger", ")", ":", "\n", "\n", "        ", "self", ".", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"check_point\"", ")", "\n", "self", ".", "check_point_params", "=", "{", "\n", "\"model\"", ":", "None", ",", "\n", "\"optimizer\"", ":", "None", ",", "\n", "\"lr_scheduler\"", ":", "None", ",", "\n", "\"epoch\"", ":", "None", ",", "\n", "}", "\n", "self", ".", "logger", "=", "logger", "\n", "\n", "# make directory", "\n", "if", "is_main_process", "(", ")", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "isdir", "(", "self", ".", "save_path", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "self", ".", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.checkpoint.CheckPoint.load_state": [[34, 53], ["model.eval", "model.state_dict", "list", "model.load_state_dict", "state_dict.items", "list", "model.state_dict.keys", "checkpoint.CheckPoint.logger.error"], "methods", ["None"], ["", "", "", "def", "load_state", "(", "self", ",", "model", ",", "state_dict", ")", ":", "\n", "        ", "\"\"\"\n        load state_dict to model\n        :params model:\n        :params state_dict:\n        :return: model\n        \"\"\"", "\n", "model", ".", "eval", "(", ")", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "\n", "for", "key", ",", "value", "in", "list", "(", "state_dict", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "key", "in", "list", "(", "model_dict", ".", "keys", "(", ")", ")", ":", "\n", "                ", "model_dict", "[", "key", "]", "=", "value", "\n", "", "else", ":", "\n", "                ", "if", "self", ".", "logger", ":", "\n", "                    ", "self", ".", "logger", ".", "error", "(", "\"key error: {}\"", ".", "format", "(", "key", ")", ")", "\n", "# assert False", "\n", "", "", "", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.checkpoint.CheckPoint.load_model": [[54, 67], ["os.path.isfile", "torch.load", "torch.load", "torch.load", "torch.load", "checkpoint.CheckPoint.logger.info"], "methods", ["None"], ["", "def", "load_model", "(", "self", ",", "model_path", ")", ":", "\n", "        ", "\"\"\"\n        load model\n        :params model_path: path to the model\n        :return: model_state_dict\n        \"\"\"", "\n", "if", "os", ".", "path", ".", "isfile", "(", "model_path", ")", ":", "\n", "            ", "if", "self", ".", "logger", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "\"|===>Load retrain model from: {}\"", ".", "format", "(", "model_path", ")", ")", "\n", "", "model_state_dict", "=", "torch", ".", "load", "(", "model_path", ",", "map_location", "=", "{", "\"cpu\"", "}", ")", "\n", "return", "model_state_dict", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "\"file not exits, model path: \"", "+", "model_path", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.checkpoint.CheckPoint.load_checkpoint": [[68, 87], ["os.path.isfile", "torch.load", "torch.load", "torch.load", "torch.load", "checkpoint.CheckPoint.logger.info"], "methods", ["None"], ["", "", "def", "load_checkpoint", "(", "self", ",", "checkpoint_path", ")", ":", "\n", "        ", "\"\"\"\n        load checkpoint file\n        :params checkpoint_path: path to the checkpoint file\n        :return: model_state_dict, optimizer_state_dict, epoch\n        \"\"\"", "\n", "if", "os", ".", "path", ".", "isfile", "(", "checkpoint_path", ")", ":", "\n", "            ", "if", "self", ".", "logger", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "\n", "\"|===>Load resume check-point from: {}\"", ".", "format", "(", "checkpoint_path", ")", "\n", ")", "\n", "", "self", ".", "check_point_params", "=", "torch", ".", "load", "(", "checkpoint_path", ",", "map_location", "=", "\"cpu\"", ")", "\n", "model_state_dict", "=", "self", ".", "check_point_params", "[", "\"model\"", "]", "\n", "optimizer_state_dict", "=", "self", ".", "check_point_params", "[", "\"optimizer\"", "]", "\n", "lr_scheduler", "=", "self", ".", "check_point_params", "[", "\"lr_scheduler\"", "]", "\n", "epoch", "=", "self", ".", "check_point_params", "[", "\"epoch\"", "]", "\n", "return", "model_state_dict", ",", "optimizer_state_dict", ",", "epoch", ",", "lr_scheduler", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "\"file not exits\"", "+", "checkpoint_path", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.checkpoint.CheckPoint.save_checkpoint": [[88, 119], ["list2sequential", "isinstance", "model.state_dict.state_dict.state_dict", "optimizer.state_dict.state_dict.state_dict", "lr_scheduler.state_dict.state_dict.state_dict", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.model_transform.list2sequential"], ["", "", "def", "save_checkpoint", "(", "self", ",", "model", ",", "optimizer", ",", "lr_scheduler", ",", "epoch", ",", "index", "=", "0", ")", ":", "\n", "        ", "\"\"\"\n        :params model: model\n        :params optimizer: optimizer\n        :params epoch: training epoch\n        :params index: index of saved file, default: 0\n        Note: if we add hook to the grad by using register_hook(hook), then the hook function\n        can not be saved so we need to save state_dict() only. Although save state dictionary\n        is recommended, some times we still need to save the whole model as it can save all\n        the information of the trained model, and we do not need to create a new network in\n        next time. However, the GPU information will be saved too, which leads to some issues\n        when we use the model on different machine\n        \"\"\"", "\n", "# get state_dict from model and optimizer", "\n", "model", "=", "list2sequential", "(", "model", ")", "\n", "if", "isinstance", "(", "model", ",", "nn", ".", "DataParallel", ")", ":", "\n", "            ", "model", "=", "model", ".", "module", "\n", "", "model", "=", "model", ".", "state_dict", "(", ")", "\n", "optimizer", "=", "optimizer", ".", "state_dict", "(", ")", "\n", "lr_scheduler", "=", "lr_scheduler", ".", "state_dict", "(", ")", "\n", "\n", "# save information to a dict", "\n", "self", ".", "check_point_params", "[", "\"model\"", "]", "=", "model", "\n", "self", ".", "check_point_params", "[", "\"optimizer\"", "]", "=", "optimizer", "\n", "self", ".", "check_point_params", "[", "\"lr_scheduler\"", "]", "=", "lr_scheduler", "\n", "self", ".", "check_point_params", "[", "\"epoch\"", "]", "=", "epoch", "\n", "\n", "# save to file", "\n", "torch", ".", "save", "(", "\n", "self", ".", "check_point_params", ",", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "save_path", ",", "\"checkpoint_{:0>3d}.pth\"", ".", "format", "(", "index", ")", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.checkpoint.CheckPoint.save_model": [[121, 150], ["list2sequential", "isinstance", "model.state_dict.state_dict.state_dict", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.model_transform.list2sequential"], ["", "def", "save_model", "(", "self", ",", "model", ",", "best_flag", "=", "False", ",", "index", "=", "0", ",", "tag", "=", "\"\"", ")", ":", "\n", "        ", "\"\"\"\n        :params model: model to save\n        :params best_flag: if True, the saved model is the one that gets best performance\n        \"\"\"", "\n", "# get state dict", "\n", "model", "=", "list2sequential", "(", "model", ")", "\n", "if", "isinstance", "(", "model", ",", "nn", ".", "DataParallel", ")", ":", "\n", "            ", "model", "=", "model", ".", "module", "\n", "", "model", "=", "model", ".", "state_dict", "(", ")", "\n", "if", "best_flag", ":", "\n", "            ", "if", "tag", "!=", "\"\"", ":", "\n", "                ", "torch", ".", "save", "(", "\n", "model", ",", "os", ".", "path", ".", "join", "(", "self", ".", "save_path", ",", "\"{}_best_model.pth\"", ".", "format", "(", "tag", ")", ")", "\n", ")", "\n", "", "else", ":", "\n", "                ", "torch", ".", "save", "(", "model", ",", "os", ".", "path", ".", "join", "(", "self", ".", "save_path", ",", "\"best_model.pth\"", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "tag", "!=", "\"\"", ":", "\n", "                ", "torch", ".", "save", "(", "\n", "model", ",", "\n", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "save_path", ",", "\"{}_model_{:0>3d}.pth\"", ".", "format", "(", "tag", ",", "index", ")", "\n", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "torch", ".", "save", "(", "\n", "model", ",", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "save_path", ",", "\"model_{:0>3d}.pth\"", ".", "format", "(", "index", ")", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.__init__": [[15, 23], ["torch.optim.lr_scheduler._LRScheduler.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.__init__"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "multiplier", ",", "total_epoch", ",", "after_scheduler", "=", "None", ")", ":", "\n", "        ", "self", ".", "multiplier", "=", "multiplier", "\n", "if", "self", ".", "multiplier", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"multiplier should be greater thant or equal to 1.\"", ")", "\n", "", "self", ".", "total_epoch", "=", "total_epoch", "\n", "self", ".", "after_scheduler", "=", "after_scheduler", "\n", "self", ".", "finished", "=", "False", "\n", "super", "(", "GradualWarmupScheduler", ",", "self", ")", ".", "__init__", "(", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.get_lr": [[24, 48], ["warmup_scheduler.GradualWarmupScheduler.after_scheduler.get_last_lr", "float"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "last_epoch", "+", "1", ">", "self", ".", "total_epoch", ":", "\n", "            ", "if", "self", ".", "after_scheduler", ":", "\n", "                ", "if", "not", "self", ".", "finished", ":", "\n", "                    ", "self", ".", "after_scheduler", ".", "base_lrs", "=", "[", "\n", "base_lr", "*", "self", ".", "multiplier", "for", "base_lr", "in", "self", ".", "base_lrs", "\n", "]", "\n", "self", ".", "finished", "=", "True", "\n", "", "return", "self", ".", "after_scheduler", ".", "get_last_lr", "(", ")", "\n", "", "return", "[", "base_lr", "*", "self", ".", "multiplier", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n", "", "if", "self", ".", "multiplier", "==", "1.0", ":", "\n", "            ", "return", "[", "\n", "base_lr", "*", "(", "float", "(", "self", ".", "last_epoch", "+", "1", ")", "/", "self", ".", "total_epoch", ")", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "\n", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "\n", "base_lr", "\n", "*", "(", "\n", "(", "self", ".", "multiplier", "-", "1.0", ")", "*", "(", "self", ".", "last_epoch", "+", "1", ")", "/", "self", ".", "total_epoch", "\n", "+", "1.0", "\n", ")", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.step_ReduceLROnPlateau": [[50, 69], ["zip", "warmup_scheduler.GradualWarmupScheduler.after_scheduler.step", "warmup_scheduler.GradualWarmupScheduler.after_scheduler.step"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.step"], ["", "", "def", "step_ReduceLROnPlateau", "(", "self", ",", "metrics", ",", "epoch", "=", "None", ")", ":", "\n", "        ", "if", "epoch", "is", "None", ":", "\n", "            ", "epoch", "=", "self", ".", "last_epoch", "+", "1", "\n", "", "self", ".", "last_epoch", "=", "(", "\n", "epoch", "if", "epoch", "!=", "0", "else", "1", "\n", ")", "# ReduceLROnPlateau is called at the end of epoch, whereas others are called at beginning", "\n", "if", "self", ".", "last_epoch", "<=", "self", ".", "total_epoch", ":", "\n", "            ", "warmup_lr", "=", "[", "\n", "base_lr", "\n", "*", "(", "(", "self", ".", "multiplier", "-", "1.0", ")", "*", "self", ".", "last_epoch", "/", "self", ".", "total_epoch", "+", "1.0", ")", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "\n", "]", "\n", "for", "param_group", ",", "lr", "in", "zip", "(", "self", ".", "optimizer", ".", "param_groups", ",", "warmup_lr", ")", ":", "\n", "                ", "param_group", "[", "\"lr\"", "]", "=", "lr", "\n", "", "", "else", ":", "\n", "            ", "if", "epoch", "is", "None", ":", "\n", "                ", "self", ".", "after_scheduler", ".", "step", "(", "metrics", ",", "None", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "after_scheduler", ".", "step", "(", "metrics", ",", "epoch", "-", "self", ".", "total_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.step": [[70, 82], ["type", "warmup_scheduler.GradualWarmupScheduler.step_ReduceLROnPlateau", "warmup_scheduler.GradualWarmupScheduler.after_scheduler.get_last_lr", "super().step", "warmup_scheduler.GradualWarmupScheduler.after_scheduler.step", "warmup_scheduler.GradualWarmupScheduler.after_scheduler.step"], "methods", ["home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.step_ReduceLROnPlateau", "home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.zhuang-group_saq.core.warmup_scheduler.GradualWarmupScheduler.step"], ["", "", "", "def", "step", "(", "self", ",", "epoch", "=", "None", ",", "metrics", "=", "None", ")", ":", "\n", "        ", "if", "type", "(", "self", ".", "after_scheduler", ")", "!=", "ReduceLROnPlateau", ":", "\n", "            ", "if", "self", ".", "finished", "and", "self", ".", "after_scheduler", ":", "\n", "                ", "if", "epoch", "is", "None", ":", "\n", "                    ", "self", ".", "after_scheduler", ".", "step", "(", "None", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "after_scheduler", ".", "step", "(", "epoch", "-", "self", ".", "total_epoch", ")", "\n", "", "self", ".", "_last_lr", "=", "self", ".", "after_scheduler", ".", "get_last_lr", "(", ")", "\n", "", "else", ":", "\n", "                ", "return", "super", "(", "GradualWarmupScheduler", ",", "self", ")", ".", "step", "(", "epoch", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "step_ReduceLROnPlateau", "(", "metrics", ",", "epoch", ")", "\n", "", "", "", ""]]}