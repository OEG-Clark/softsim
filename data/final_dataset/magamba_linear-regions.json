{"home.repos.pwc.inspect_result.magamba_linear-regions.None.aggregate_stats.NumpyEncoder.default": [[18, 26], ["isinstance", "json.JSONEncoder.default", "int", "isinstance", "float", "isinstance", "obj.tolist"], "methods", ["home.repos.pwc.inspect_result.magamba_linear-regions.None.aggregate_stats.TensorEncoder.default"], ["def", "default", "(", "self", ",", "obj", ")", ":", "\n", "        ", "if", "isinstance", "(", "obj", ",", "np", ".", "integer", ")", ":", "\n", "            ", "return", "int", "(", "obj", ")", "\n", "", "elif", "isinstance", "(", "obj", ",", "np", ".", "floating", ")", ":", "\n", "            ", "return", "float", "(", "obj", ")", "\n", "", "elif", "isinstance", "(", "obj", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "return", "obj", ".", "tolist", "(", ")", "\n", "", "return", "json", ".", "JSONEncoder", ".", "default", "(", "self", ",", "obj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.None.aggregate_stats.TensorEncoder.default": [[31, 35], ["isinstance", "json.JSONEncoder.default", "obj.to().tolist", "obj.to"], "methods", ["home.repos.pwc.inspect_result.magamba_linear-regions.None.aggregate_stats.TensorEncoder.default"], ["def", "default", "(", "self", ",", "obj", ")", ":", "\n", "        ", "if", "isinstance", "(", "obj", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "return", "obj", ".", "to", "(", "\"cpu\"", ")", ".", "tolist", "(", ")", "\n", "", "return", "json", ".", "JSONEncoder", ".", "default", "(", "self", ",", "obj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.None.aggregate_stats.init_buffers": [[37, 66], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "function", ["None"], ["", "", "def", "init_buffers", "(", "npaths", ",", "nclasses", ",", "nlines", ")", ":", "\n", "    ", "aggregated_stats", "=", "{", "\n", "\"labels\"", ":", "torch", ".", "zeros", "(", "npaths", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "\"cpu\"", ")", ",", "\n", "\n", "\"item_ids\"", ":", "torch", ".", "zeros", "(", "npaths", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "\"cpu\"", ")", ",", "\n", "\n", "\"line_stats\"", ":", "{", "\n", "\"absolute_deviation\"", ":", "torch", ".", "zeros", "(", "(", "npaths", ",", "nclasses", ",", "nlines", ")", ",", "device", "=", "device", ")", ",", "\n", "\"variation_interpolated\"", ":", "torch", ".", "zeros", "(", "(", "npaths", ",", "nclasses", ",", "nlines", ")", ",", "device", "=", "device", ")", ",", "\n", "\"variation\"", ":", "torch", ".", "zeros", "(", "(", "npaths", ",", "nclasses", ",", "nlines", ")", ",", "device", "=", "device", ")", ",", "\n", "\"density\"", ":", "torch", ".", "zeros", "(", "(", "npaths", ",", "nlines", ")", ",", "device", "=", "device", ")", ",", "\n", "}", ",", "\n", "\n", "\"cumulative_path_stats\"", ":", "{", "\n", "\"absolute_deviation\"", ":", "torch", ".", "zeros", "(", "(", "npaths", ",", "nclasses", ")", ",", "device", "=", "device", ")", ",", "\n", "\"variation_interpolated\"", ":", "torch", ".", "zeros", "(", "(", "npaths", ",", "nclasses", ")", ",", "device", "=", "device", ")", ",", "\n", "\"variation\"", ":", "torch", ".", "zeros", "(", "(", "npaths", ",", "nclasses", ")", ",", "device", "=", "device", ")", ",", "\n", "\"density\"", ":", "torch", ".", "zeros", "(", "(", "npaths", ")", ",", "device", "=", "device", ")", ",", "\n", "}", ",", "\n", "\n", "\"average_stats\"", ":", "{", "\n", "\"absolute_deviation\"", ":", "torch", ".", "zeros", "(", "(", "nclasses", ",", "2", ")", ",", "device", "=", "device", ")", ",", "\n", "\"variation_interpolated\"", ":", "torch", ".", "zeros", "(", "(", "nclasses", ",", "2", ")", ",", "device", "=", "device", ")", ",", "\n", "\"variation\"", ":", "torch", ".", "zeros", "(", "(", "nclasses", ",", "2", ")", ",", "device", "=", "device", ")", ",", "\n", "\"density\"", ":", "torch", ".", "zeros", "(", "2", ",", "device", "=", "device", ")", ",", "\n", "}", "\n", "}", "\n", "\n", "return", "aggregated_stats", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.None.aggregate_stats.aggregate_statistics": [[68, 131], ["enumerate", "enumerate", "len", "logger.info", "logger.info", "aggregate_stats.init_buffers", "logger.info", "[].view().mean", "[].view().std", "[].transpose().reshape().mean", "[].transpose().reshape().std", "len", "[].sum", "[].sum", "path.keys", "torch.as_tensor", "[].view", "[].view", "[].transpose().reshape", "[].transpose().reshape", "torch.as_tensor", "torch.as_tensor().sum", "[].transpose", "[].transpose", "torch.as_tensor"], "function", ["home.repos.pwc.inspect_result.magamba_linear-regions.None.aggregate_stats.init_buffers"], ["", "def", "aggregate_statistics", "(", "batches", ",", "npaths", ")", ":", "\n", "    ", "\"\"\"Aggregate per-path statistics:\n           - cumulative absolute deviation over lines (N, K, L)\n           - cumulative variation interpolated over lines (N, K, L)\n           - cumulative directional variation over lines (N, K, L)\n           - cumulative density over lines (N,L)\n    \"\"\"", "\n", "for", "path_id", ",", "path", "in", "enumerate", "(", "batches", ")", ":", "\n", "        ", "if", "path_id", "==", "0", ":", "\n", "            ", "nlines", "=", "len", "(", "path", ".", "keys", "(", ")", ")", "-", "2", "# ignore 2 metadata keys", "\n", "nclasses", "=", "len", "(", "path", "[", "\"0\"", "]", "[", "\"logits\"", "]", ")", "\n", "logger", ".", "info", "(", "\"Found {} classes, {} lines\"", ".", "format", "(", "nclasses", ",", "nlines", ")", ")", "\n", "\n", "logger", ".", "info", "(", "\"Populating buffers\"", ")", "\n", "aggregated_stats", "=", "init_buffers", "(", "npaths", ",", "nclasses", ",", "nlines", ")", "\n", "\n", "", "for", "line_id", ",", "line", "in", "enumerate", "(", "path", ")", ":", "\n", "            ", "if", "line", "==", "\"label\"", ":", "\n", "                ", "aggregated_stats", "[", "\"labels\"", "]", "[", "path_id", "]", "=", "path", "[", "line", "]", "\n", "continue", "\n", "", "if", "line", "==", "\"item_idx\"", ":", "\n", "                ", "aggregated_stats", "[", "\"item_ids\"", "]", "[", "path_id", "]", "=", "path", "[", "line", "]", "\n", "continue", "\n", "\n", "", "for", "key", "in", "aggregated_stats", "[", "\"line_stats\"", "]", ":", "\n", "                ", "if", "key", "==", "\"density\"", ":", "\n", "                    ", "aggregated_stats", "[", "\"line_stats\"", "]", "[", "key", "]", "[", "path_id", ",", "line_id", "]", "=", "torch", ".", "as_tensor", "(", "path", "[", "line", "]", "[", "key", "]", ",", "device", "=", "device", ")", "\n", "", "elif", "key", "==", "\"variation_interpolated\"", ":", "\n", "                    ", "aggregated_stats", "[", "\"line_stats\"", "]", "[", "key", "]", "[", "path_id", ",", ":", ",", "line_id", "]", "=", "torch", ".", "as_tensor", "(", "path", "[", "line", "]", "[", "key", "]", ",", "device", "=", "device", ")", "\n", "", "else", ":", "\n", "# sum over activation regions", "\n", "                    ", "aggregated_stats", "[", "\"line_stats\"", "]", "[", "key", "]", "[", "path_id", ",", ":", ",", "line_id", "]", "=", "torch", ".", "as_tensor", "(", "path", "[", "line", "]", "[", "key", "]", ",", "device", "=", "device", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "\n", "", "", "", "for", "key", "in", "aggregated_stats", "[", "\"cumulative_path_stats\"", "]", ":", "\n", "# cumulative sum over lines", "\n", "            ", "if", "key", "==", "\"density\"", ":", "\n", "                ", "aggregated_stats", "[", "\"cumulative_path_stats\"", "]", "[", "key", "]", "[", "path_id", "]", "=", "aggregated_stats", "[", "\"line_stats\"", "]", "[", "key", "]", "[", "path_id", ",", ":", "]", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "                ", "aggregated_stats", "[", "\"cumulative_path_stats\"", "]", "[", "key", "]", "[", "path_id", ",", ":", "]", "=", "aggregated_stats", "[", "\"line_stats\"", "]", "[", "key", "]", "[", "path_id", ",", ":", ",", ":", "]", ".", "sum", "(", "dim", "=", "1", ")", "\n", "\n", "", "", "if", "path_id", ">", "0", "and", "(", "path_id", "+", "1", ")", "%", "64", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\"Processed {} paths\"", ".", "format", "(", "path_id", "+", "1", ")", ")", "\n", "\n", "", "", "for", "key", "in", "aggregated_stats", "[", "\"average_stats\"", "]", ":", "\n", "# average over all paths of cumulatives along each line", "\n", "        ", "if", "key", "==", "\"density\"", ":", "\n", "            ", "aggregated_stats", "[", "\"average_stats\"", "]", "[", "key", "]", "[", "0", "]", "=", "aggregated_stats", "[", "\"line_stats\"", "]", "[", "key", "]", ".", "view", "(", "-", "1", ")", ".", "mean", "(", ")", "\n", "aggregated_stats", "[", "\"average_stats\"", "]", "[", "key", "]", "[", "1", "]", "=", "aggregated_stats", "[", "\"line_stats\"", "]", "[", "key", "]", ".", "view", "(", "-", "1", ")", ".", "std", "(", ")", "\n", "", "else", ":", "\n", "# average over all lines and paths", "\n", "            ", "aggregated_stats", "[", "\"average_stats\"", "]", "[", "key", "]", "[", ":", ",", "0", "]", "=", "aggregated_stats", "[", "\"line_stats\"", "]", "[", "key", "]", ".", "transpose", "(", "1", ",", "0", ")", ".", "reshape", "(", "(", "nclasses", ",", "-", "1", ")", ")", ".", "mean", "(", "dim", "=", "1", ")", "\n", "aggregated_stats", "[", "\"average_stats\"", "]", "[", "key", "]", "[", ":", ",", "1", "]", "=", "aggregated_stats", "[", "\"line_stats\"", "]", "[", "key", "]", ".", "transpose", "(", "1", ",", "0", ")", ".", "reshape", "(", "(", "nclasses", ",", "-", "1", ")", ")", ".", "std", "(", "dim", "=", "1", ")", "\n", "\n", "", "", "return", "aggregated_stats", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.None.aggregate_stats.add_metadata": [[133, 152], ["None"], "function", ["None"], ["", "def", "add_metadata", "(", "results", ",", "args", ")", ":", "\n", "    ", "\"\"\"Add metadata to the results dictionary to make the experiment self contained\n    \"\"\"", "\n", "metadata", "=", "{", "\n", "\"model\"", ":", "args", ".", "model", ",", "\n", "\"dataset\"", ":", "args", ".", "data", ",", "\n", "\"split\"", ":", "args", ".", "dataset_split", ",", "\n", "\"seed\"", ":", "args", ".", "seed", ",", "\n", "\"label-noise\"", ":", "args", ".", "label_noise", ",", "\n", "\"augmentation\"", ":", "args", ".", "augmentation", ",", "\n", "\"checkpoint\"", ":", "args", ".", "checkpoint_id", ",", "\n", "\"npaths\"", ":", "args", ".", "npaths", ",", "\n", "\"label-noise-seed\"", ":", "args", ".", "label_seed", ",", "\n", "\"data-split-seed\"", ":", "args", ".", "data_split_seed", ",", "\n", "\"path-sample-seed\"", ":", "args", ".", "path_sample_seed", ",", "\n", "}", "\n", "results", "[", "\"metadata\"", "]", "=", "metadata", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.None.aggregate_stats.parse_results": [[154, 168], ["line.strip.strip", "os.path.exists", "logger.info", "logger.info", "open", "ijson.items"], "function", ["None"], ["", "def", "parse_results", "(", "fp", ")", ":", "\n", "    ", "\"\"\"Parse the list of pickle files speficied \n       by file pointer @fp, and yields each entry\n    \"\"\"", "\n", "for", "line", "in", "fp", ":", "\n", "        ", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "line", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"Loading {}\"", ".", "format", "(", "line", ")", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"Skipping {}: file not found.\"", ".", "format", "(", "line", ")", ")", "\n", "", "with", "open", "(", "line", ",", "'rb'", ")", "as", "path_batch_results", ":", "\n", "            ", "batches", "=", "ijson", ".", "items", "(", "path_batch_results", ",", "\"item\"", ",", "use_float", "=", "True", ")", "\n", "for", "batch", "in", "batches", ":", "\n", "                ", "yield", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.None.aggregate_stats.main": [[170, 211], ["core.utils.prepare_dirs", "logging.getLogger", "torch.set_default_dtype", "logging.getLogger.info", "aggregate_stats.add_metadata", "os.path.join", "logging.getLogger.info", "json.dumps", "torch.cuda.is_available", "logging.getLogger.info", "torch.device", "logging.getLogger.info", "torch.device", "os.path.exists", "IOError", "open", "aggregate_stats.parse_results", "logging.getLogger.info", "str", "open", "json.dump", "torch.no_grad", "aggregate_stats.aggregate_statistics"], "function", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.utils.prepare_dirs", "home.repos.pwc.inspect_result.magamba_linear-regions.None.aggregate_stats.add_metadata", "home.repos.pwc.inspect_result.magamba_linear-regions.None.aggregate_stats.parse_results", "home.repos.pwc.inspect_result.magamba_linear-regions.None.aggregate_stats.aggregate_statistics"], ["", "", "", "", "def", "main", "(", "args", ")", ":", "\n", "    ", "\"\"\"Main\"\"\"", "\n", "\n", "save_path", "=", "prepare_dirs", "(", "args", ")", "\n", "global", "logger", "\n", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "torch", ".", "set_default_dtype", "(", "torch", ".", "float64", ")", "\n", "\n", "global", "device", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "args", ".", "e_device", "==", "\"cuda\"", ":", "\n", "        ", "logger", ".", "info", "(", "\"Using cuda\"", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "info", "(", "\"Using cpu\"", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "load_from", ")", ":", "\n", "        ", "raise", "IOError", "(", "\"File not found: {}\"", ".", "format", "(", "args", ".", "load_from", ")", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Loading results from {}\"", ".", "format", "(", "args", ".", "load_from", ")", ")", "\n", "\n", "with", "open", "(", "args", ".", "load_from", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "results_gen", "=", "parse_results", "(", "fp", ")", "\n", "logger", ".", "info", "(", "\"Aggregating statistics\"", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "path_stats", "=", "aggregate_statistics", "(", "results_gen", ",", "args", ".", "npaths", ")", "\n", "\n", "", "", "add_metadata", "(", "path_stats", ",", "args", ")", "\n", "\n", "results_filename", "=", "args", ".", "output", "+", "'_'", "+", "args", ".", "dataset_split", "+", "'_checkpoint-'", "+", "str", "(", "args", ".", "checkpoint_id", ")", "\n", "results_filename", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "results_filename", ")", "\n", "results_filename", "+=", "\".json\"", "\n", "logger", ".", "info", "(", "\"Saving results to {}\"", ".", "format", "(", "results_filename", ")", ")", "\n", "\n", "# move all tensors to cpu and serialize", "\n", "json_dict", "=", "json", ".", "dumps", "(", "path_stats", ",", "cls", "=", "TensorEncoder", ",", "allow_nan", "=", "False", ")", "\n", "\n", "with", "open", "(", "\n", "results_filename", ",", "\"w\"", "\n", ")", "as", "write_stats", ":", "\n", "        ", "json", ".", "dump", "(", "json_dict", ",", "write_stats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.None.aggregate_stats.add_local_args": [[213, 228], ["parser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument"], "function", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.add_argument", "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.add_argument", "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.add_argument", "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.add_argument", "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.add_argument", "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.add_argument"], ["", "", "def", "add_local_args", "(", "parser", ")", ":", "\n", "    ", "\"\"\"Parse command line arguments\n    \"\"\"", "\n", "args_group", "=", "parser", ".", "add_argument_group", "(", "\"Aggregates statistics of path-based activation region analysis.\"", ")", "\n", "args_group", ".", "add_argument", "(", "\"--npaths\"", ",", "type", "=", "int", ",", "default", "=", "1024", ",", "help", "=", "\"Total number of paths.\"", ")", "\n", "\n", "# paths to saved json results", "\n", "args_group", ".", "add_argument", "(", "\"--load-from\"", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "\"File with the list of saved results, one for each line.\"", ")", "\n", "args_group", ".", "add_argument", "(", "\"--output\"", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "\"Output filename.\"", ")", "\n", "\n", "args_group", ".", "add_argument", "(", "\"--checkpoint-id\"", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "\"Checkpoint id. Used to add metadata to the results dictionary.\"", ")", "\n", "\n", "args_group", ".", "add_argument", "(", "\"--dataset-split\"", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "\"Dataset split used to compute the statistics being aggregated. Used to add metadata to the results dictionary.\"", ")", "\n", "\n", "args_group", ".", "add_argument", "(", "\"--path-sample-seed\"", ",", "type", "=", "int", ",", "default", "=", "4321", ",", "help", "=", "\"The seed that was used to sample the paths used to compute the statistics. Used to add metadata to the results dictionary.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.None.aggregate_stats.get_arg_parser": [[230, 234], ["core.cmd.create_default_args", "aggregate_stats.add_local_args", "core.cmd.create_default_args.parse_args"], "function", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.create_default_args", "home.repos.pwc.inspect_result.magamba_linear-regions.None.train.add_local_args", "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.parse_args"], ["", "def", "get_arg_parser", "(", ")", ":", "\n", "    ", "parser", "=", "create_default_args", "(", ")", "\n", "add_local_args", "(", "parser", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.None.train.setup_tb_logger": [[48, 122], ["ignite.contrib.handlers.tensorboard_logger.TensorboardLogger", "ignite.contrib.handlers.tensorboard_logger.TensorboardLogger.attach", "ignite.contrib.handlers.tensorboard_logger.TensorboardLogger.attach", "ignite.contrib.handlers.tensorboard_logger.TensorboardLogger.attach", "ignite.contrib.handlers.tensorboard_logger.TensorboardLogger.attach", "torch.utils.tensorboard.SummaryWriter", "writer.add_text", "writer.add_text", "writer.add_text", "writer.add_text", "writer.add_text", "writer.add_text", "writer.add_text", "writer.add_text", "writer.add_text", "writer.add_text", "writer.add_text", "writer.add_text", "writer.add_text", "writer.add_text", "writer.add_text", "writer.add_text", "writer.add_text", "writer.add_text", "writer.add_text", "writer.add_text", "ignite.contrib.handlers.tensorboard_logger.TensorboardLogger.attach", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "core.utils.all_log_dir", "ignite.contrib.handlers.tensorboard_logger.OutputHandler", "ignite.engine.Events.ITERATION_COMPLETED", "ignite.contrib.handlers.tensorboard_logger.OutputHandler", "ignite.contrib.handlers.tensorboard_logger.OutputHandler", "ignite.contrib.handlers.tensorboard_logger.OptimizerParamsHandler", "core.utils.all_log_dir", "ignite.contrib.handlers.tensorboard_logger.OutputHandler", "core.utils.global_iteration_from_engine", "core.utils.global_iteration_from_engine", "core.utils.global_iteration_from_engine"], "function", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.utils.all_log_dir", "home.repos.pwc.inspect_result.magamba_linear-regions.core.utils.all_log_dir", "home.repos.pwc.inspect_result.magamba_linear-regions.core.utils.global_iteration_from_engine", "home.repos.pwc.inspect_result.magamba_linear-regions.core.utils.global_iteration_from_engine", "home.repos.pwc.inspect_result.magamba_linear-regions.core.utils.global_iteration_from_engine"], ["def", "setup_tb_logger", "(", "\n", "args", ",", "trainer", ",", "evaluator", ",", "test_evaluator", ",", "val_evaluator", ",", "optimizer", "\n", ")", ":", "\n", "    ", "with", "SummaryWriter", "(", "log_dir", "=", "all_log_dir", "(", "args", ")", ")", "as", "writer", ":", "\n", "        ", "writer", ".", "add_text", "(", "\"data\"", ",", "args", ".", "data", ")", "\n", "writer", ".", "add_text", "(", "\"model\"", ",", "args", ".", "model", ")", "\n", "writer", ".", "add_text", "(", "\"model_additions\"", ",", "\",\"", ".", "join", "(", "args", ".", "model_additions", ")", ")", "\n", "writer", ".", "add_text", "(", "\"learning_rate\"", ",", "str", "(", "args", ".", "learning_rate", ")", ")", "\n", "writer", ".", "add_text", "(", "\"batch_size\"", ",", "str", "(", "args", ".", "batch_size", ")", ")", "\n", "writer", ".", "add_text", "(", "\"epochs\"", ",", "str", "(", "args", ".", "epochs", ")", ")", "\n", "writer", ".", "add_text", "(", "\"seed\"", ",", "str", "(", "args", ".", "seed", ")", ")", "\n", "writer", ".", "add_text", "(", "\"optimizer\"", ",", "args", ".", "optimizer", ")", "\n", "writer", ".", "add_text", "(", "\"early_exit_accuracy\"", ",", "str", "(", "args", ".", "early_exit_accuracy", ")", ")", "\n", "writer", ".", "add_text", "(", "\"dropout\"", ",", "str", "(", "args", ".", "dropout", ")", ")", "\n", "writer", ".", "add_text", "(", "\"early_exit_loss\"", ",", "str", "(", "args", ".", "early_exit_loss", ")", ")", "\n", "writer", ".", "add_text", "(", "\"lr_decay_rate\"", ",", "str", "(", "args", ".", "lr_decay_rate", ")", ")", "\n", "writer", ".", "add_text", "(", "\"lr_step\"", ",", "str", "(", "args", ".", "lr_step", ")", ")", "\n", "writer", ".", "add_text", "(", "\"stop_by_loss_threshold\"", ",", "str", "(", "args", ".", "stop_by_loss_threshold", ")", ")", "\n", "writer", ".", "add_text", "(", "\n", "\"stop_by_accuracy_threshold\"", ",", "str", "(", "args", ".", "stop_by_accuracy_threshold", ")", "\n", ")", "\n", "\n", "writer", ".", "add_text", "(", "\"E_DEVICE\"", ",", "args", ".", "e_device", ")", "\n", "writer", ".", "add_text", "(", "\"E_NAME\"", ",", "args", ".", "e_name", ")", "\n", "writer", ".", "add_text", "(", "\"E_SAVE_DIR\"", ",", "args", ".", "e_save_dir", ")", "\n", "writer", ".", "add_text", "(", "\"E_DATA_DIR\"", ",", "args", ".", "e_data_dir", ")", "\n", "writer", ".", "add_text", "(", "\"E_WORKERS\"", ",", "str", "(", "args", ".", "e_workers", ")", ")", "\n", "\n", "", "logger", "=", "TensorboardLogger", "(", "log_dir", "=", "all_log_dir", "(", "args", ")", ")", "\n", "logger", ".", "attach", "(", "\n", "trainer", ",", "\n", "log_handler", "=", "OutputHandler", "(", "\n", "tag", "=", "\"train\"", ",", "\n", "output_transform", "=", "lambda", "loss", ":", "{", "\"batch_loss\"", ":", "loss", "}", ",", "\n", "metric_names", "=", "\"all\"", ",", "\n", ")", ",", "\n", "event_name", "=", "Events", ".", "ITERATION_COMPLETED", "(", "every", "=", "args", ".", "l_loss_checkpoint", ")", ",", "\n", ")", "\n", "\n", "logger", ".", "attach", "(", "\n", "evaluator", ",", "\n", "log_handler", "=", "OutputHandler", "(", "\n", "tag", "=", "\"train\"", ",", "\n", "metric_names", "=", "[", "\"loss\"", ",", "\"accuracy\"", "]", ",", "\n", "global_step_transform", "=", "global_iteration_from_engine", "(", "trainer", ")", ",", "\n", ")", ",", "\n", "event_name", "=", "Events", ".", "COMPLETED", ",", "\n", ")", "\n", "logger", ".", "attach", "(", "\n", "test_evaluator", ",", "\n", "log_handler", "=", "OutputHandler", "(", "\n", "tag", "=", "\"test\"", ",", "\n", "metric_names", "=", "[", "\"loss\"", ",", "\"accuracy\"", "]", ",", "\n", "global_step_transform", "=", "global_iteration_from_engine", "(", "trainer", ")", ",", "\n", ")", ",", "\n", "event_name", "=", "Events", ".", "COMPLETED", ",", "\n", ")", "\n", "if", "val_evaluator", "is", "not", "None", ":", "\n", "        ", "logger", ".", "attach", "(", "\n", "val_evaluator", ",", "\n", "log_handler", "=", "OutputHandler", "(", "\n", "tag", "=", "\"validation\"", ",", "\n", "metric_names", "=", "[", "\"loss\"", ",", "\"accuracy\"", "]", ",", "\n", "global_step_transform", "=", "global_iteration_from_engine", "(", "trainer", ")", ",", "\n", ")", ",", "\n", "event_name", "=", "Events", ".", "COMPLETED", ",", "\n", ")", "\n", "", "logger", ".", "attach", "(", "\n", "trainer", ",", "\n", "log_handler", "=", "OptimizerParamsHandler", "(", "optimizer", ")", ",", "\n", "event_name", "=", "Events", ".", "ITERATION_STARTED", ",", "\n", ")", "\n", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.None.train.every_and_n_times": [[124, 139], ["float"], "function", ["None"], ["", "def", "every_and_n_times", "(", "every", ",", "n", ")", ":", "\n", "    ", "if", "every", "is", "None", ":", "\n", "        ", "every", "=", "1", "\n", "", "if", "n", "is", "None", ":", "\n", "        ", "n", "=", "float", "(", "\"inf\"", ")", "\n", "\n", "", "def", "wrap_every_and_n_times", "(", "engine_", ",", "event_num", ")", ":", "\n", "        ", "times_called", "=", "wrap_every_and_n_times", ".", "times_called", "\n", "wrap_every_and_n_times", ".", "times_called", "+=", "1", "\n", "if", "event_num", "%", "every", "==", "0", "and", "times_called", "<", "n", ":", "\n", "            ", "return", "True", "\n", "", "return", "False", "\n", "\n", "", "wrap_every_and_n_times", ".", "times_called", "=", "0", "\n", "return", "wrap_every_and_n_times", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.None.train._every_or_specified": [[141, 161], ["type", "len", "len"], "function", ["None"], ["", "def", "_every_or_specified", "(", "save_checkpoints", ":", "Union", "[", "List", ",", "Tuple", "]", ")", "->", "Callable", ":", "\n", "    ", "def", "_never_event_filter", "(", "engine_", ",", "step", ")", ":", "\n", "        ", "return", "False", "\n", "\n", "", "def", "_every_event_filter", "(", "engine_", ",", "step", ")", ":", "\n", "        ", "return", "step", "%", "save_checkpoints", "[", "0", "]", "==", "0", "\n", "\n", "", "def", "_specified_event_filter", "(", "engine_", ",", "step", ")", ":", "\n", "        ", "if", "step", "in", "save_checkpoints", ":", "\n", "            ", "return", "True", "\n", "", "return", "False", "\n", "\n", "", "if", "type", "(", "save_checkpoints", ")", "==", "int", ":", "\n", "        ", "save_checkpoints", "=", "(", "save_checkpoints", ",", ")", "\n", "\n", "", "if", "len", "(", "save_checkpoints", ")", "==", "0", ":", "\n", "        ", "return", "_never_event_filter", "\n", "", "elif", "len", "(", "save_checkpoints", ")", "==", "1", ":", "\n", "        ", "return", "_never_event_filter", "if", "save_checkpoints", "[", "0", "]", "==", "0", "else", "_every_event_filter", "\n", "", "return", "_specified_event_filter", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.None.train.run": [[163, 279], ["len", "torch.optim.SGD", "torch.nn.CrossEntropyLoss().to", "ignite.engine.create_supervised_trainer", "ignite.engine.create_supervised_evaluator", "ignite.engine.create_supervised_evaluator", "ignite.utils.setup_logger", "ignite.engine.create_supervised_trainer.add_event_handler", "ignite.engine.create_supervised_trainer.add_event_handler", "ignite.contrib.handlers.param_scheduler.LRScheduler", "ignite.engine.create_supervised_trainer.add_event_handler", "train.setup_tb_logger", "ignite.handlers.Checkpoint", "ignite.engine.create_supervised_trainer.add_event_handler", "logger.info", "ignite.engine.create_supervised_trainer.add_event_handler", "logger.info", "ignite.engine.create_supervised_trainer.run", "logger.info", "ignite.handlers.Checkpoint.", "setup_tb_logger.close", "model.parameters", "loss_fn_with_regularization", "loss_fn_with_regularization", "ignite.engine.create_supervised_evaluator", "ignite.engine.create_supervised_evaluator.run", "ignite.engine.create_supervised_evaluator.run", "ignite.engine.Events.ITERATION_COMPLETED", "ignite.engine.create_supervised_evaluator.add_event_handler", "torch.optim.lr_scheduler.MultiplicativeLR", "ignite.engine.Events.ITERATION_COMPLETED", "logger.info", "core.utils.checkpoint_dir", "os.path.isfile", "ignite.engine.Events.EPOCH_STARTED", "torch.nn.CrossEntropyLoss", "ignite.engine.create_supervised_evaluator.run", "interface.handlers.StopOnInterpolateByAccuracy", "ignite.engine.create_supervised_evaluator.add_event_handler", "ignite.handlers.DiskSaver", "train.load_from_zipped_checkpoint", "train.load_from_checkpoint", "ignite.metrics.Accuracy", "ignite.metrics.Loss", "ignite.metrics.Accuracy", "ignite.metrics.Loss", "interface.handlers.StopOnInterpolateByLoss", "core.utils.checkpoint_dir", "train._every_or_specified", "ignite.metrics.Accuracy", "ignite.metrics.Loss", "int", "tuple"], "function", ["home.repos.pwc.inspect_result.magamba_linear-regions.None.train.setup_tb_logger", "home.repos.pwc.inspect_result.magamba_linear-regions.None.train.run", "home.repos.pwc.inspect_result.magamba_linear-regions.None.train.run", "home.repos.pwc.inspect_result.magamba_linear-regions.None.train.run", "home.repos.pwc.inspect_result.magamba_linear-regions.core.utils.checkpoint_dir", "home.repos.pwc.inspect_result.magamba_linear-regions.None.train.run", "home.repos.pwc.inspect_result.magamba_linear-regions.None.train.load_from_zipped_checkpoint", "home.repos.pwc.inspect_result.magamba_linear-regions.None.train.load_from_checkpoint", "home.repos.pwc.inspect_result.magamba_linear-regions.core.utils.checkpoint_dir", "home.repos.pwc.inspect_result.magamba_linear-regions.None.train._every_or_specified"], ["", "def", "run", "(", "args", ",", "data_manager", ",", "model", ",", "device", ")", ":", "\n", "    ", "data_loader", "=", "data_manager", ".", "dloader", "\n", "num_iterations", "=", "len", "(", "data_loader", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "learning_rate", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", ")", "\n", "\n", "loss_fn", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "to", "(", "device", ")", "\n", "if", "args", ".", "l1_regularization", ":", "\n", "        ", "loss_fn", "=", "loss_fn_with_regularization", "(", "\n", "loss_fn", ",", "model", ",", "args", ".", "l1_regularization", ",", "1", "\n", ")", "\n", "", "if", "args", ".", "l2_regularization", ":", "\n", "        ", "loss_fn", "=", "loss_fn_with_regularization", "(", "\n", "loss_fn", ",", "model", ",", "args", ".", "l2_regularization", ",", "2", "\n", ")", "\n", "", "trainer", "=", "create_supervised_trainer", "(", "model", ",", "optimizer", ",", "loss_fn", ",", "device", "=", "device", ")", "\n", "evaluator", "=", "create_supervised_evaluator", "(", "\n", "model", ",", "metrics", "=", "{", "\"accuracy\"", ":", "Accuracy", "(", ")", ",", "\"loss\"", ":", "Loss", "(", "loss_fn", ")", "}", ",", "device", "=", "device", "\n", ")", "\n", "test_evaluator", "=", "create_supervised_evaluator", "(", "\n", "model", ",", "metrics", "=", "{", "\"accuracy\"", ":", "Accuracy", "(", ")", ",", "\"loss\"", ":", "Loss", "(", "loss_fn", ")", "}", ",", "device", "=", "device", "\n", ")", "\n", "val_evaluator", "=", "None", "\n", "if", "data_manager", ".", "vloader", "is", "not", "None", ":", "\n", "        ", "val_evaluator", "=", "create_supervised_evaluator", "(", "\n", "model", ",", "\n", "metrics", "=", "{", "\"accuracy\"", ":", "Accuracy", "(", ")", ",", "\"loss\"", ":", "Loss", "(", "loss_fn", ")", "}", ",", "\n", "device", "=", "device", ",", "\n", ")", "\n", "", "trainer", ".", "logger", "=", "setup_logger", "(", "\"trainer\"", ",", "level", "=", "logging", ".", "INFO", ")", "\n", "\n", "def", "compute_metrics", "(", "engine_", ")", ":", "\n", "        ", "evaluator", ".", "run", "(", "data_loader", ")", "\n", "test_evaluator", ".", "run", "(", "data_manager", ".", "tloader", ")", "\n", "if", "data_manager", ".", "vloader", "is", "not", "None", ":", "\n", "            ", "val_evaluator", ".", "run", "(", "data_manager", ".", "vloader", ")", "\n", "\n", "", "", "trainer", ".", "add_event_handler", "(", "\n", "Events", ".", "ITERATION_COMPLETED", "(", "every", "=", "args", ".", "eval_every", "*", "num_iterations", ")", ",", "compute_metrics", "\n", ")", "\n", "trainer", ".", "add_event_handler", "(", "Events", ".", "COMPLETED", ",", "compute_metrics", ")", "\n", "\n", "if", "args", ".", "early_exit_accuracy", ":", "\n", "        ", "evaluator", ".", "add_event_handler", "(", "\n", "Events", ".", "COMPLETED", ",", "\n", "StopOnInterpolateByAccuracy", "(", "threshold", "=", "args", ".", "stop_by_accuracy_threshold", ")", ",", "\n", "trainer", ",", "\n", ")", "\n", "", "elif", "args", ".", "early_exit_loss", ":", "\n", "        ", "evaluator", ".", "add_event_handler", "(", "\n", "Events", ".", "COMPLETED", ",", "\n", "StopOnInterpolateByLoss", "(", "threshold", "=", "args", ".", "stop_by_loss_threshold", ")", ",", "\n", "trainer", ",", "\n", ")", "\n", "", "lr_scheduler", "=", "None", "\n", "\n", "def", "_lr_mult", "(", "epoch", ")", ":", "\n", "        ", "if", "args", ".", "lr_step", "==", "0", ":", "\n", "            ", "return", "1", "# constant lr", "\n", "", "if", "(", "epoch", "%", "args", ".", "lr_step", "==", "0", ")", "or", "(", "\n", "epoch", "%", "int", "(", "args", ".", "epochs", "*", "0.75", ")", "==", "0", "\n", ")", ":", "\n", "            ", "return", "args", ".", "lr_decay_rate", "\n", "", "return", "1", "\n", "\n", "", "lr_scheduler", "=", "LRScheduler", "(", "MultiplicativeLR", "(", "optimizer", ",", "lr_lambda", "=", "_lr_mult", ")", ")", "\n", "trainer", ".", "add_event_handler", "(", "Events", ".", "EPOCH_COMPLETED", ",", "lr_scheduler", ")", "\n", "\n", "tb_logger", "=", "setup_tb_logger", "(", "\n", "args", ",", "trainer", ",", "evaluator", ",", "test_evaluator", ",", "val_evaluator", ",", "optimizer", "\n", ")", "\n", "\n", "objects_to_checkpoint", "=", "{", "\"trainer\"", ":", "trainer", ",", "\"model\"", ":", "model", ",", "\"optimizer\"", ":", "optimizer", "}", "\n", "if", "lr_scheduler", ":", "\n", "        ", "objects_to_checkpoint", "[", "\"lr_scheduler\"", "]", "=", "lr_scheduler", "\n", "", "training_checkpoint", "=", "Checkpoint", "(", "\n", "to_save", "=", "objects_to_checkpoint", ",", "\n", "save_handler", "=", "DiskSaver", "(", "checkpoint_dir", "(", "args", ")", ",", "require_empty", "=", "False", ")", ",", "\n", "n_saved", "=", "None", ",", "\n", ")", "\n", "\n", "trainer", ".", "add_event_handler", "(", "\n", "Events", ".", "ITERATION_COMPLETED", "(", "\n", "event_filter", "=", "_every_or_specified", "(", "\n", "tuple", "(", "it", "*", "num_iterations", "for", "it", "in", "args", ".", "l_save_checkpoint", ")", "\n", ")", "\n", ")", ",", "\n", "training_checkpoint", ",", "\n", ")", "\n", "\n", "if", "args", ".", "l_resume_from", "is", "not", "None", ":", "\n", "        ", "logger", ".", "info", "(", "\"Starting from previous checkpoint\"", ")", "\n", "chkpt_dir", "=", "checkpoint_dir", "(", "args", ")", "\n", "chkpt_zip", "=", "\"{}.zip\"", ".", "format", "(", "chkpt_dir", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "chkpt_zip", ")", ":", "\n", "            ", "load_from_zipped_checkpoint", "(", "\n", "objects_to_checkpoint", ",", "chkpt_zip", ",", "args", ".", "l_resume_from", "\n", ")", "\n", "", "else", ":", "\n", "            ", "load_from_checkpoint", "(", "\n", "objects_to_checkpoint", ",", "chkpt_dir", ",", "args", ".", "l_resume_from", "\n", ")", "\n", "", "", "logger", ".", "info", "(", "\"Running\"", ")", "\n", "trainer", ".", "add_event_handler", "(", "Events", ".", "EPOCH_STARTED", "(", "once", "=", "1", ")", ",", "training_checkpoint", ")", "\n", "logger", ".", "info", "(", "\"Starting training\"", ")", "\n", "trainer", ".", "run", "(", "data_loader", ",", "max_epochs", "=", "args", ".", "epochs", ")", "\n", "# save a checkpoint at the end. if the accuracy is 100%, @run will be stopped", "\n", "# and the current model may or may not be saved", "\n", "logger", ".", "info", "(", "\"Stopped training\"", ")", "\n", "training_checkpoint", "(", "trainer", ")", "\n", "\n", "tb_logger", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.None.train.load_from_checkpoint": [[281, 284], ["torch.load", "ignite.handlers.Checkpoint.load_objects"], "function", ["None"], ["", "def", "load_from_checkpoint", "(", "objects_to_checkpoint", ",", "chkpt_dir", ",", "resume_from", ")", ":", "\n", "    ", "checkpoint", "=", "torch", ".", "load", "(", "\"{}/checkpoint_{}.pth\"", ".", "format", "(", "chkpt_dir", ",", "resume_from", ")", ")", "\n", "Checkpoint", ".", "load_objects", "(", "to_load", "=", "objects_to_checkpoint", ",", "checkpoint", "=", "checkpoint", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.None.train.load_from_zipped_checkpoint": [[286, 292], ["zipfile.ZipFile", "zdir.open", "torch.load", "ignite.handlers.Checkpoint.load_objects"], "function", ["None"], ["", "def", "load_from_zipped_checkpoint", "(", "objects_to_checkpoint", ",", "chkpt_zip", ",", "resume_from", ")", ":", "\n", "    ", "with", "zipfile", ".", "ZipFile", "(", "chkpt_zip", ",", "\"r\"", ")", "as", "zdir", ":", "\n", "        ", "with", "zdir", ".", "open", "(", "\"checkpoint_{}.pth\"", ".", "format", "(", "resume_from", ")", ")", "as", "chkpt", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "chkpt", ")", "\n", "Checkpoint", ".", "load_objects", "(", "\n", "to_load", "=", "objects_to_checkpoint", ",", "checkpoint", "=", "checkpoint", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.None.train.compress_checkpoints": [[295, 299], ["core.utils.checkpoint_dir", "shutil.make_archive", "shutil.rmtree"], "function", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.utils.checkpoint_dir"], ["", "", "", "def", "compress_checkpoints", "(", "args", ")", ":", "\n", "    ", "compress_dir", "=", "checkpoint_dir", "(", "args", ")", "\n", "make_archive", "(", "compress_dir", ",", "\"zip\"", ",", "compress_dir", ")", "\n", "rmtree", "(", "compress_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.None.train.add_local_args": [[301, 327], ["parser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument"], "function", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.add_argument", "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.add_argument", "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.add_argument", "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.add_argument", "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.add_argument"], ["", "def", "add_local_args", "(", "parser", ")", ":", "\n", "    ", "opt_group", "=", "parser", ".", "add_argument_group", "(", "\"train local\"", ")", "\n", "opt_group", ".", "add_argument", "(", "\n", "\"--l_resume-from\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Checkpoint to resume training from, if interrupted previously.\"", ",", "\n", ")", "\n", "opt_group", ".", "add_argument", "(", "\n", "\"--l_save-checkpoint\"", ",", "\n", "nargs", "=", "\"*\"", ",", "\n", "default", "=", "(", "0", ",", ")", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"When to save model checkpoints to disk, expressed in epochs. By default a checkpoint of the model at initialization and at convergence are saved. If one value is specified, it denotes the checkpoint frequency. If multiple values are given, they are used as explicit checkpoints.\"", ",", "\n", ")", "\n", "# @deprecate", "\n", "opt_group", ".", "add_argument", "(", "\"--l_accuracy-threshold\"", ",", "type", "=", "float", ",", "default", "=", "1.0", ")", "\n", "opt_group", ".", "add_argument", "(", "\n", "\"--l_loss-checkpoint\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "382", ",", "\n", "help", "=", "\"Report/save the batch loss every L_LOSS-CHECKPOINT iterations.\"", ",", "\n", ")", "\n", "opt_group", ".", "add_argument", "(", "\n", "\"--l_raw-checkpoints\"", ",", "\n", "help", "=", "\"If true, do not zip the model checkpoints into one zip file.\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.None.train.main": [[330, 365], ["logging.getLogger", "logging.getLogger.info", "core.utils.init_torch", "core.utils.init_prngs", "models.factory.create_model", "model_factory.create_model.train", "model_factory.create_model.to", "logging.getLogger.info", "train.run", "torch.cuda.is_available", "torch.device", "torch.device", "core.data.create_data_manager", "train.compress_checkpoints"], "function", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.utils.init_torch", "home.repos.pwc.inspect_result.magamba_linear-regions.core.utils.init_prngs", "home.repos.pwc.inspect_result.magamba_linear-regions.models.factory.create_model", "home.repos.pwc.inspect_result.magamba_linear-regions.None.train.run", "home.repos.pwc.inspect_result.magamba_linear-regions.core.data.create_data_manager", "home.repos.pwc.inspect_result.magamba_linear-regions.None.train.compress_checkpoints"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n", "logger", ".", "info", "(", "args", ")", "\n", "init_torch", "(", "cmd_args", "=", "args", ",", "double_precision", "=", "False", ")", "\n", "init_prngs", "(", "args", ")", "\n", "model", "=", "model_factory", ".", "create_model", "(", "\n", "args", ".", "model", ",", "args", ".", "data", ",", "additions", "=", "args", ".", "model_additions", ",", "dropout_rate", "=", "args", ".", "dropout", "\n", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "args", ".", "e_device", "==", "\"cuda\"", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "\n", "", "model", ".", "train", "(", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "tv_split", "=", "(", "None", ",", "None", ")", "\n", "if", "args", ".", "train_split", "and", "args", ".", "val_split", ":", "\n", "        ", "tv_split", "=", "(", "args", ".", "train_split", ",", "args", ".", "val_split", ")", "\n", "", "logger", ".", "info", "(", "\"Train val split {}\"", ".", "format", "(", "tv_split", ")", ")", "\n", "run", "(", "\n", "args", ",", "\n", "create_data_manager", "(", "\n", "args", ",", "\n", "args", ".", "label_noise", ",", "\n", "augment", "=", "args", ".", "augmentation", ",", "\n", "seed", "=", "args", ".", "label_seed", ",", "\n", "train_validation_split", "=", "tv_split", ",", "\n", ")", ",", "\n", "model", ",", "\n", "device", "\n", ")", "\n", "if", "not", "args", ".", "l_raw_checkpoints", ":", "\n", "        ", "compress_checkpoints", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.None.train.get_args": [[367, 371], ["core.cmd.create_default_args", "train.add_local_args", "core.cmd.create_default_args.parse_args"], "function", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.create_default_args", "home.repos.pwc.inspect_result.magamba_linear-regions.None.train.add_local_args", "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.parse_args"], ["", "", "def", "get_args", "(", ")", ":", "\n", "    ", "parser", "=", "create_default_args", "(", ")", "\n", "add_local_args", "(", "parser", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.interface.handlers._BaseActOnInterpolateByMetric.__init__": [[15, 19], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "comp", ",", "metric_name", ",", "threshold", ")", ":", "\n", "        ", "self", ".", "_comp", "=", "comp", "\n", "self", ".", "_metric_name", "=", "metric_name", "\n", "self", ".", "_threshold", "=", "threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.interface.handlers._BaseActOnInterpolateByMetric.act_on_interpolate": [[20, 23], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "act_on_interpolate", "(", "self", ",", "evaluator", ",", "trainer", ")", ":", "\n", "        ", "\"\"\"Do some action once the trainer has gotten to a certain accuracy\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.interface.handlers._BaseActOnInterpolateByMetric.__call__": [[24, 32], ["print", "print", "handlers._BaseActOnInterpolateByMetric.act_on_interpolate", "handlers._BaseActOnInterpolateByMetric.act_on_interpolate"], "methods", ["home.repos.pwc.inspect_result.magamba_linear-regions.interface.handlers.ContinueOnInterpolateByAccuracy.act_on_interpolate", "home.repos.pwc.inspect_result.magamba_linear-regions.interface.handlers.ContinueOnInterpolateByAccuracy.act_on_interpolate"], ["", "def", "__call__", "(", "self", ",", "evaluator", ",", "trainer", ")", ":", "\n", "        ", "metric_val", "=", "evaluator", ".", "state", ".", "metrics", "[", "self", ".", "_metric_name", "]", "\n", "print", "(", "\"metric_val: \"", ",", "self", ".", "_metric_name", ",", "metric_val", ")", "\n", "if", "self", ".", "_comp", "==", "_Comparison", ".", "GT", "and", "metric_val", ">=", "self", ".", "_threshold", ":", "\n", "            ", "print", "(", "\"metric criterion met - stopping training\"", ")", "\n", "self", ".", "act_on_interpolate", "(", "evaluator", ",", "trainer", ")", "\n", "", "elif", "self", ".", "_comp", "==", "_Comparison", ".", "LT", "and", "metric_val", "<=", "self", ".", "_threshold", ":", "\n", "            ", "self", ".", "act_on_interpolate", "(", "evaluator", ",", "trainer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.interface.handlers.StopOnInterpolateByAccuracy.__init__": [[35, 37], ["handlers._BaseActOnInterpolateByMetric.__init__"], "methods", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.counting.ActivationRegion.__init__"], ["    ", "def", "__init__", "(", "self", ",", "acc_name", "=", "\"accuracy\"", ",", "threshold", "=", "1.0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "_Comparison", ".", "GT", ",", "acc_name", ",", "threshold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.interface.handlers.StopOnInterpolateByAccuracy.act_on_interpolate": [[38, 41], ["print", "trainer.terminate"], "methods", ["None"], ["", "def", "act_on_interpolate", "(", "self", ",", "evaluator", ",", "trainer", ")", ":", "\n", "        ", "print", "(", "\"Accuracy is greater than threshold, terminating engine\"", ")", "\n", "trainer", ".", "terminate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.interface.handlers.StopOnInterpolateByLoss.__init__": [[44, 46], ["handlers._BaseActOnInterpolateByMetric.__init__"], "methods", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.counting.ActivationRegion.__init__"], ["    ", "def", "__init__", "(", "self", ",", "loss_name", "=", "\"loss\"", ",", "threshold", "=", "0.0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "_Comparison", ".", "LT", ",", "loss_name", ",", "threshold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.interface.handlers.StopOnInterpolateByLoss.act_on_interpolate": [[47, 50], ["print", "trainer.terminate"], "methods", ["None"], ["", "def", "act_on_interpolate", "(", "self", ",", "evaluator", ",", "trainer", ")", ":", "\n", "        ", "print", "(", "\"Loss is less than threshold, terminating engine\"", ")", "\n", "trainer", ".", "terminate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.interface.handlers.ContinueOnInterpolateByAccuracy.__init__": [[53, 57], ["handlers._BaseActOnInterpolateByMetric.__init__"], "methods", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.counting.ActivationRegion.__init__"], ["    ", "def", "__init__", "(", "self", ",", "extra_epochs", ",", "acc_name", "=", "\"accuracy\"", ",", "threshold", "=", "1.0", ")", ":", "\n", "        ", "self", ".", "_extra_epochs", "=", "extra_epochs", "\n", "self", ".", "_in_extra_epochs", "=", "False", "\n", "super", "(", ")", ".", "__init__", "(", "_Comparison", ".", "GT", ",", "acc_name", ",", "threshold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.interface.handlers.ContinueOnInterpolateByAccuracy.act_on_interpolate": [[58, 64], ["None"], "methods", ["None"], ["", "def", "act_on_interpolate", "(", "self", ",", "evaluator", ",", "trainer", ")", ":", "\n", "        ", "if", "self", ".", "_in_extra_epochs", ":", "\n", "            ", "return", "\n", "\n", "", "trainer", ".", "state", ".", "max_epochs", "+=", "trainer", ".", "state", ".", "epoch", "+", "self", ".", "_extra_epochs", "\n", "self", ".", "_in_extra_epochs", "=", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.magamba_linear-regions.models.concepts.NetworkBuilder.__init__": [[19, 21], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset_info", ")", ":", "\n", "        ", "self", ".", "_dataset_info", "=", "dataset_info", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.models.concepts.NetworkBuilder.add": [[22, 25], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "add", "(", "self", ",", "addition", ":", "NetworkAddition", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Add the network component addition, to the network\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.models.concepts.NetworkBuilder.build_net": [[26, 32], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "build_net", "(", "self", ")", "->", "nn", ".", "Module", ":", "\n", "        ", "\"\"\"\n        Take whatever internal state this keeps and convert it into a module\n        object to be consumed metrics\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.models.concepts.AffineLayer.__init__": [[43, 67], ["torch.Module.__init__", "concepts.AffineLayer._is_supported_module", "concepts.AffineLayer.register_parameter", "concepts.AffineLayer.init_bias", "concepts.AffineLayer.linear.bias.clone", "torch.Parameter", "torch.Parameter", "torch.Parameter.reshape", "len", "isinstance"], "methods", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.counting.ActivationRegion.__init__", "home.repos.pwc.inspect_result.magamba_linear-regions.models.concepts.AffineLayer._is_supported_module", "home.repos.pwc.inspect_result.magamba_linear-regions.models.concepts.AffineLayer.init_bias"], ["def", "__init__", "(", "self", ",", "linear_module", ",", "batch_size", ")", ":", "\n", "        ", "\"\"\"@param linear_module: nn.Module linear module to wrap\n           @param batch_size: int supported batch_size\t       \n        \"\"\"", "\n", "super", "(", "AffineLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_is_supported_module", "(", "linear_module", ")", "\n", "self", ".", "linear", "=", "linear_module", "\n", "self", ".", "bias", "=", "None", "\n", "self", ".", "_retain_bias", "=", "False", "\n", "self", ".", "batch_size", "=", "batch_size", "*", "2", "\n", "self", ".", "half_batch", "=", "batch_size", "\n", "bias_orig", "=", "self", ".", "linear", ".", "bias", ".", "clone", "(", ")", "if", "self", ".", "linear", ".", "bias", "is", "not", "None", "else", "None", "\n", "if", "bias_orig", "is", "not", "None", ":", "\n", "            ", "try", ":", "\n", "                ", "weight_size", "=", "len", "(", "self", ".", "linear", ".", "weight", ".", "shape", ")", "-", "2", "\n", "", "except", "AttributeError", ":", "\n", "                ", "if", "isinstance", "(", "self", ".", "linear", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "weight_size", "=", "2", "# assuming batch norm is always used after convolution", "\n", "", "else", ":", "\n", "                    ", "weight_size", "=", "0", "\n", "", "", "shape", "=", "(", "1", ",", "-", "1", ",", ")", "+", "(", "1", ",", ")", "*", "weight_size", "\n", "bias_orig", "=", "nn", ".", "Parameter", "(", "bias_orig", ".", "reshape", "(", "shape", ")", ",", "requires_grad", "=", "False", ")", "\n", "", "self", ".", "register_parameter", "(", "'bias_orig'", ",", "bias_orig", ")", "\n", "self", ".", "init_bias", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.models.concepts.AffineLayer._is_supported_module": [[68, 73], ["concepts.is_supported_", "ValueError"], "methods", ["home.repos.pwc.inspect_result.magamba_linear-regions.models.concepts.is_supported_"], ["", "@", "staticmethod", "\n", "def", "_is_supported_module", "(", "module", ")", ":", "\n", "        ", "if", "not", "is_supported_", "(", "module", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Expected linear_module of type torch.nn.Linear, \\\n                              torch.nn.BatchNorm2d, or torch.nn.Conv2d\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.models.concepts.AffineLayer.retain_bias_": [[74, 76], ["None"], "methods", ["None"], ["", "", "def", "retain_bias_", "(", "self", ",", "retain", "=", "False", ")", ":", "\n", "        ", "self", ".", "_retain_bias", "=", "retain", "and", "(", "self", ".", "bias_orig", "is", "not", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.models.concepts.AffineLayer.weight": [[77, 82], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "weight", "(", "self", ")", "->", "nn", ".", "Parameter", "or", "None", ":", "\n", "        ", "if", "self", ".", "linear", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "return", "self", ".", "linear", ".", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.models.concepts.AffineLayer.init_bias": [[83, 96], ["isinstance", "concepts.AffineLayer._zero_bias", "concepts.AffineLayer._copy_bias_bn", "concepts.AffineLayer._copy_bias"], "methods", ["home.repos.pwc.inspect_result.magamba_linear-regions.models.concepts.AffineLayer._zero_bias", "home.repos.pwc.inspect_result.magamba_linear-regions.models.concepts.AffineLayer._copy_bias_bn", "home.repos.pwc.inspect_result.magamba_linear-regions.models.concepts.AffineLayer._copy_bias"], ["", "def", "init_bias", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\" Copy the bias parameter (if defined) from @self.linear_layer\n            and then disables bias computation in @self.linear_layer,\n            effectively decomposing the layer-wise forward pass into a linear\n            transformation (performed by @self.linear_layer), followed by a \n            translation (specified by @self.bias).\n        \"\"\"", "\n", "if", "self", ".", "linear", "is", "not", "None", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "linear", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "self", ".", "bias", "=", "self", ".", "_copy_bias_bn", "(", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "bias", "=", "self", ".", "_copy_bias", "(", ")", "\n", "", "self", ".", "_zero_bias", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.models.concepts.AffineLayer._copy_bias_bn": [[97, 120], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "int", "bias.reshape", "torch.Parameter", "torch.Parameter", "len", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "methods", ["None"], ["", "", "def", "_copy_bias_bn", "(", "self", ")", "->", "nn", ".", "Parameter", "or", "None", ":", "\n", "        ", "bias", "=", "self", ".", "linear", ".", "bias", "\n", "mean", "=", "self", ".", "linear", ".", "running_mean", "\n", "var", "=", "self", ".", "linear", ".", "running_var", "\n", "eps", "=", "self", ".", "linear", ".", "eps", "\n", "\n", "if", "bias", "is", "not", "None", ":", "\n", "            ", "output_shape", "=", "(", "self", ".", "batch_size", ",", "bias", ".", "shape", "[", "0", "]", ")", "+", "(", "1", ",", "1", ")", "\n", "bias_shape", "=", "(", "1", ",", "output_shape", "[", "1", "]", ")", "+", "(", "1", ",", ")", "*", "(", "len", "(", "output_shape", ")", "-", "2", ")", "\n", "bias_broadcast", "=", "torch", ".", "zeros", "(", "\n", "output_shape", ",", "\n", "dtype", "=", "self", ".", "linear", ".", "weight", ".", "dtype", ",", "\n", "layout", "=", "self", ".", "linear", ".", "weight", ".", "layout", ",", "\n", "device", "=", "self", ".", "linear", ".", "weight", ".", "device", "\n", ")", "\n", "half_batch", "=", "int", "(", "self", ".", "batch_size", "//", "2", ")", "\n", "bias_broadcast", "[", ":", "half_batch", "]", "+=", "bias", ".", "reshape", "(", "bias_shape", ")", "\n", "bias_broadcast", "[", "half_batch", ":", "]", "+=", "(", "(", "mean", "/", "torch", ".", "sqrt", "(", "var", "+", "eps", ")", ")", "*", "self", ".", "linear", ".", "weight", ")", ".", "reshape", "(", "bias_shape", ")", "\n", "\n", "return", "nn", ".", "Parameter", "(", "bias_broadcast", ",", "requires_grad", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "return", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.models.concepts.AffineLayer._copy_bias": [[121, 143], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "bias.reshape", "torch.Parameter", "torch.Parameter", "int", "len", "len"], "methods", ["None"], ["", "", "def", "_copy_bias", "(", "self", ")", "->", "nn", ".", "Parameter", "or", "None", ":", "\n", "        ", "\"\"\" Copy the bias parameter from @self.linear and broadcast it to\n            the batch dimension @self.batch_size, so that self.bias[:b] \n            is a copy of the bias parameter @self.linear.bias, while\n            self.bias[b:] is all zeros, where b = batch_size // 2\n        \"\"\"", "\n", "bias", "=", "self", ".", "linear", ".", "bias", "\n", "\n", "if", "bias", "is", "not", "None", ":", "\n", "            ", "output_shape", "=", "(", "self", ".", "batch_size", ",", "self", ".", "linear", ".", "weight", ".", "shape", "[", "0", "]", ")", "+", "(", "1", ",", ")", "*", "(", "len", "(", "self", ".", "linear", ".", "weight", ".", "shape", ")", "-", "2", ")", "\n", "bias_shape", "=", "(", "1", ",", "output_shape", "[", "1", "]", ")", "+", "(", "1", ",", ")", "*", "(", "len", "(", "output_shape", ")", "-", "2", ")", "\n", "bias_broadcast", "=", "torch", ".", "zeros", "(", "\n", "output_shape", ",", "\n", "dtype", "=", "self", ".", "linear", ".", "weight", ".", "dtype", ",", "\n", "layout", "=", "self", ".", "linear", ".", "weight", ".", "layout", ",", "\n", "device", "=", "self", ".", "linear", ".", "weight", ".", "device", "\n", ")", "\n", "bias_broadcast", "[", ":", "int", "(", "self", ".", "batch_size", "//", "2", ")", "]", "+=", "bias", ".", "reshape", "(", "bias_shape", ")", "\n", "return", "nn", ".", "Parameter", "(", "bias_broadcast", ",", "requires_grad", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "return", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.models.concepts.AffineLayer._zero_bias": [[144, 150], ["None"], "methods", ["None"], ["", "", "def", "_zero_bias", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\" Reset the bias parameter of @self.linear, so that\n            the module effectively computes a linear transformation\n        \"\"\"", "\n", "if", "self", ".", "linear", "is", "not", "None", ":", "\n", "            ", "self", ".", "linear", ".", "bias", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.models.concepts.AffineLayer.extra_repr": [[151, 156], ["torch.all", "torch.all", "torch.all", "torch.all", "range", "str", "concepts.AffineLayer.bias.view"], "methods", ["None"], ["", "", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "zero_rows_idx", "=", "[", "torch", ".", "all", "(", "self", ".", "bias", ".", "view", "(", "self", ".", "batch_size", ",", "-", "1", ")", "[", "i", "]", "==", "0", ")", "for", "i", "in", "range", "(", "self", ".", "batch_size", ")", "]", "\n", "zero_rows", "=", "self", ".", "bias", "[", "zero_rows_idx", ",", "]", ".", "shape", "[", "0", "]", "\n", "repr", "=", "'(bias): '", "+", "str", "(", "self", ".", "bias", ".", "shape", ")", "+", "'\\n'", "+", "\"{}/{} zero rows.\"", ".", "format", "(", "zero_rows", ",", "self", ".", "bias", ".", "shape", "[", "0", "]", ")", "\n", "return", "repr", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.models.concepts.AffineLayer.forward": [[157, 175], ["concepts.AffineLayer.linear", "int"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        For an input tensor @x with batch dimension B, to speed up \n        region counting, the forward pass of AffineLayer, for \n        @self.batch_size = 2 * B, applies an affine transformation\n        linear(x) + self.bias to @x[:B], while only a linear\n        transformation linear(x) to @x[B:].\n        \n        Can take input of arbitrary even batch size b = 2k < B.\n        \"\"\"", "\n", "x", "=", "self", ".", "linear", "(", "x", ")", "\n", "\n", "if", "self", ".", "_retain_bias", ":", "\n", "            ", "x", "+=", "self", ".", "bias_orig", "\n", "", "elif", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "b", "=", "int", "(", "x", ".", "shape", "[", "0", "]", "//", "2", ")", "\n", "x", "+=", "self", ".", "bias", "[", "self", ".", "half_batch", "-", "b", ":", "self", ".", "half_batch", "+", "b", "]", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.models.concepts.is_supported_": [[177, 186], ["isinstance", "isinstance", "isinstance"], "function", ["None"], ["", "", "def", "is_supported_", "(", "module", ":", "nn", ".", "Module", ")", "->", "bool", ":", "\n", "    ", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "return", "True", "\n", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "return", "True", "\n", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "return", "True", "\n", "", "else", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.models.concepts.wrap_affine_layers": [[187, 196], ["concepts.is_supported_", "module.named_children", "concepts.AffineLayer", "concepts.wrap_affine_layers", "isinstance"], "function", ["home.repos.pwc.inspect_result.magamba_linear-regions.models.concepts.is_supported_", "home.repos.pwc.inspect_result.magamba_linear-regions.models.concepts.wrap_affine_layers"], ["", "", "def", "wrap_affine_layers", "(", "module", ":", "nn", ".", "Module", ",", "name", ":", "str", ",", "batch_size", ":", "int", ",", "parent", ":", "nn", ".", "Module", "or", "None", ")", "->", "None", ":", "\n", "    ", "\"\"\"Wrap every instance of @module with AffineLayer, recursively for @module and its children.\n    \"\"\"", "\n", "if", "is_supported_", "(", "module", ")", ":", "\n", "        ", "parent", ".", "_modules", "[", "name", "]", "=", "AffineLayer", "(", "module", ",", "batch_size", ")", "\n", "", "for", "name", ",", "child", "in", "module", ".", "named_children", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "AffineLayer", ")", "and", "name", "==", "'linear'", ":", "\n", "            ", "continue", "\n", "", "wrap_affine_layers", "(", "child", ",", "name", ",", "batch_size", ",", "parent", "=", "module", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.magamba_linear-regions.models.conv.VGG.__init__": [[48, 53], ["torch.Module.__init__", "conv.vgg_layers", "conv.VGG._initialize_weights"], "methods", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.counting.ActivationRegion.__init__", "home.repos.pwc.inspect_result.magamba_linear-regions.models.conv.vgg_layers", "home.repos.pwc.inspect_result.magamba_linear-regions.models.conv.VGG._initialize_weights"], ["    ", "def", "__init__", "(", "self", ",", "blocks", ",", "num_classes", "=", "100", ",", "in_channels", "=", "3", ",", "init_weights", "=", "True", ")", ":", "\n", "        ", "super", "(", "VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_layers", "=", "vgg_layers", "(", "blocks", ",", "in_channels", ",", "num_classes", ")", "\n", "if", "init_weights", ":", "\n", "            ", "self", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.models.conv.VGG._initialize_weights": [[54, 66], ["conv.VGG.modules", "isinstance", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.normal_", "torch.init.constant_"], "methods", ["None"], ["", "", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "0.01", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.models.conv.VGG.use_batch_norm": [[67, 70], ["None"], "methods", ["None"], ["", "", "", "@", "property", "\n", "def", "use_batch_norm", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_use_batch_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.models.conv.VGG.forward": [[71, 73], ["conv.VGG._layers"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "_layers", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.models.conv.VGGBuilder.__init__": [[76, 85], ["vgg_cls", "models.concepts.NetworkBuilder.__init__"], "methods", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.counting.ActivationRegion.__init__"], ["    ", "def", "__init__", "(", "self", ",", "vgg_cls", ",", "blocks", ",", "dataset_info", ")", ":", "\n", "        ", "self", ".", "blocks", "=", "blocks", "\n", "self", ".", "_model", "=", "vgg_cls", "(", "\n", "blocks", ",", "\n", "num_classes", "=", "dataset_info", ".", "output_dimension", ",", "\n", "in_channels", "=", "dataset_info", ".", "input_shape", "[", "0", "]", ",", "\n", "init_weights", "=", "True", "\n", ")", "\n", "super", "(", ")", ".", "__init__", "(", "dataset_info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.models.conv.VGGBuilder.add": [[86, 92], ["kwargs.pop", "conv.VGGBuilder.add_batch_norm", "conv.VGGBuilder.add_dropout"], "methods", ["home.repos.pwc.inspect_result.magamba_linear-regions.models.resnet.ResNetBuilder.add_batch_norm", "home.repos.pwc.inspect_result.magamba_linear-regions.models.resnet.ResNetBuilder.add_dropout"], ["", "def", "add", "(", "self", ",", "addition", ":", "NetworkAddition", ",", "**", "kwargs", ")", ":", "\n", "        ", "dropout_rate", "=", "kwargs", ".", "pop", "(", "\"dropout_rate\"", ",", "0.", ")", "\n", "if", "addition", "==", "NetworkAddition", ".", "BATCH_NORM", ":", "\n", "            ", "self", ".", "add_batch_norm", "(", ")", "\n", "", "if", "addition", "==", "NetworkAddition", ".", "DROPOUT", ":", "\n", "            ", "self", ".", "add_dropout", "(", "dropout_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.models.conv.VGGBuilder.add_batch_norm": [[93, 101], ["layers_with_batch_norm.append", "isinstance", "layers_with_batch_norm.append", "torch.BatchNorm2d"], "methods", ["None"], ["", "", "def", "add_batch_norm", "(", "self", ")", ":", "\n", "        ", "self", ".", "_model", ".", "use_batch_norm", "=", "True", "\n", "layers_with_batch_norm", "=", "[", "]", "\n", "for", "layer", "in", "self", ".", "_layers", ":", "\n", "            ", "layers_with_batch_norm", ".", "append", "(", "layer", ")", "\n", "if", "isinstance", "(", "layer", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "layers_with_batch_norm", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "layer", ".", "out_channels", ")", ")", "\n", "", "", "self", ".", "_layers", "=", "layers_with_batch_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.models.conv.VGGBuilder.add_dropout": [[102, 109], ["enumerate", "layers_with_drop.append", "isinstance", "layers_with_drop.append", "torch.Dropout", "len"], "methods", ["None"], ["", "def", "add_dropout", "(", "self", ",", "dropout_rate", "=", "0.", ")", ":", "\n", "        ", "layers_with_drop", "=", "[", "]", "\n", "for", "idx", ",", "layer", "in", "enumerate", "(", "self", ".", "_layers", ")", ":", "\n", "            ", "layers_with_drop", ".", "append", "(", "layer", ")", "\n", "if", "idx", "!=", "len", "(", "self", ".", "_layers", ")", "-", "1", "and", "isinstance", "(", "layer", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "layers_with_drop", ".", "append", "(", "nn", ".", "Dropout", "(", "p", "=", "droput_rate", ")", ")", "\n", "", "", "self", ".", "_layers", "=", "layers_with_drop", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.models.conv.VGGBuilder.build_net": [[110, 112], ["None"], "methods", ["None"], ["", "def", "build_net", "(", "self", ")", "->", "nn", ".", "Module", ":", "\n", "        ", "return", "self", ".", "_model", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.models.conv.vgg_layers": [[9, 45], ["torch.Sequential", "len", "layers.extend", "torch.Conv2d", "torch.AdaptiveAvgPool2d", "torch.Flatten", "torch.Linear", "torch.ReLU", "torch.Linear", "torch.ReLU", "torch.Linear", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Flatten", "torch.Linear", "torch.ReLU", "torch.Linear", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "function", ["None"], ["def", "vgg_layers", "(", "blocks", ",", "in_channels", ",", "num_classes", ",", "batch_norm", "=", "False", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "for", "v", "in", "blocks", ":", "\n", "        ", "if", "v", "==", "'A'", ":", "\n", "            ", "layers", "+=", "[", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "", "else", ":", "\n", "            ", "conv2d", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "v", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "if", "batch_norm", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "BatchNorm2d", "(", "v", ")", ",", "nn", ".", "ReLU", "(", ")", "]", "\n", "", "else", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "ReLU", "(", ")", "]", "\n", "", "in_channels", "=", "v", "\n", "\n", "", "", "if", "len", "(", "blocks", ")", "<", "12", ":", "# vgg8", "\n", "        ", "spatial_res", "=", "4", "*", "4", "\n", "layers", ".", "extend", "(", "\n", "[", "\n", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "64", "*", "spatial_res", ",", "120", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "120", ",", "num_classes", ")", ",", "\n", "]", "\n", ")", "\n", "", "else", ":", "\n", "        ", "avgpool_spatial_res", "=", "1", "*", "1", "\n", "layers", "+=", "[", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "avgpool_spatial_res", ")", ",", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", "*", "spatial_res", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "num_classes", ")", ",", "\n", "]", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.models.resnet.BasicBlock.__init__": [[27, 57], ["torch.Module.__init__", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.counting.ActivationRegion.__init__", "home.repos.pwc.inspect_result.magamba_linear-regions.models.resnet.conv3x3", "home.repos.pwc.inspect_result.magamba_linear-regions.models.resnet.conv3x3"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stride", "=", "1", ",", "\n", "downsample", "=", "None", ",", "\n", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "\n", "dilation", "=", "1", ",", "\n", "use_batch_norm", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "\"BasicBlock only supports groups=1 and base_width=64\"", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ",", "bias", "=", "not", "use_batch_norm", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "bias", "=", "not", "use_batch_norm", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "use_batch_norm", "=", "use_batch_norm", "\n", "if", "not", "use_batch_norm", ":", "\n", "# disable batch norm at this stage to ensure reproducibility with prev", "\n", "# versions of the code, which always initialized batch norm layers", "\n", "            ", "self", ".", "bn1", ",", "self", ".", "bn2", "=", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.models.resnet.BasicBlock.forward": [[58, 77], ["torchvision.models.resnet.BasicBlock.conv1", "torchvision.models.resnet.BasicBlock.relu1", "torchvision.models.resnet.BasicBlock.conv2", "torchvision.models.resnet.BasicBlock.relu2", "torchvision.models.resnet.BasicBlock.bn1", "torchvision.models.resnet.BasicBlock.bn2", "torchvision.models.resnet.BasicBlock.downsample"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "if", "self", ".", "use_batch_norm", ":", "\n", "            ", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "", "out", "=", "self", ".", "relu1", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "if", "self", ".", "use_batch_norm", ":", "\n", "            ", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu2", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.models.resnet.ResNetNoBN.__init__": [[80, 169], ["torch.Module.__init__", "sum", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torchvision.models.resnet.ResNetNoBN._make_layer", "torchvision.models.resnet.ResNetNoBN._make_layer", "torchvision.models.resnet.ResNetNoBN._make_layer", "torchvision.models.resnet.ResNetNoBN._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torchvision.models.resnet.ResNetNoBN.modules", "len", "ValueError", "isinstance", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.normal_", "torch.init.normal_", "numpy.sqrt", "torch.init.constant_", "torch.init.constant_", "numpy.prod"], "methods", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.counting.ActivationRegion.__init__", "home.repos.pwc.inspect_result.magamba_linear-regions.models.resnet.ResNetNoBN._make_layer", "home.repos.pwc.inspect_result.magamba_linear-regions.models.resnet.ResNetNoBN._make_layer", "home.repos.pwc.inspect_result.magamba_linear-regions.models.resnet.ResNetNoBN._make_layer", "home.repos.pwc.inspect_result.magamba_linear-regions.models.resnet.ResNetNoBN._make_layer"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "block", ",", "\n", "layers", ",", "\n", "num_classes", "=", "1000", ",", "\n", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "\n", "width_per_group", "=", "64", ",", "\n", "replace_stride_with_dilation", "=", "None", ",", "\n", "use_batch_norm", "=", "False", ",", "\n", "in_channels", "=", "3", ",", "\n", "inplanes", "=", "64", ",", "\n", "channels", "=", "(", "128", ",", "256", ",", "512", ")", ",", "\n", ")", ":", "\n", "        ", "super", "(", "ResNetNoBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "num_layers", "=", "sum", "(", "layers", ")", "# used for Fixup init", "\n", "self", ".", "inplanes", "=", "inplanes", "\n", "self", ".", "dilation", "=", "1", "\n", "self", ".", "_use_batch_norm", "=", "use_batch_norm", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", "\n", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "not", "use_batch_norm", "\n", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "inplanes", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "channels", "[", "0", "]", ",", "\n", "layers", "[", "1", "]", ",", "\n", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ",", "\n", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "channels", "[", "1", "]", ",", "\n", "layers", "[", "2", "]", ",", "\n", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ",", "\n", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "channels", "[", "2", "]", ",", "\n", "layers", "[", "3", "]", ",", "\n", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ",", "\n", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "channels", "[", "2", "]", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "\n", "m", ".", "conv1", ".", "weight", ",", "\n", "mean", "=", "0", ",", "\n", "std", "=", "np", ".", "sqrt", "(", "\n", "2.0", "\n", "/", "(", "m", ".", "conv1", ".", "weight", ".", "shape", "[", "0", "]", "*", "np", ".", "prod", "(", "m", ".", "conv1", ".", "weight", ".", "shape", "[", "2", ":", "]", ")", ")", "\n", ")", "\n", "*", "num_layers", "**", "(", "-", "0.5", ")", ",", "\n", ")", "\n", "#nn.init.constant_(m.conv2.weight, 0)", "\n", "nn", ".", "init", ".", "normal_", "(", "m", ".", "conv2", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "1e-6", ")", "\n", "if", "m", ".", "conv1", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "conv1", ".", "bias", ",", "0", ")", "\n", "", "if", "m", ".", "conv2", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "conv2", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "#nn.init.constant_(m.weight, 0)", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "1e-6", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "if", "not", "use_batch_norm", ":", "\n", "                ", "self", ".", "bn1", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.models.resnet.ResNetNoBN._make_layer": [[170, 207], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torchvision.models.resnet.conv1x1", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "torch_resnet", ".", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "\n", "block", "(", "\n", "self", ".", "inplanes", ",", "\n", "planes", ",", "\n", "stride", ",", "\n", "downsample", ",", "\n", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "\n", "previous_dilation", ",", "\n", "use_batch_norm", "=", "self", ".", "use_batch_norm", ",", "\n", ")", "\n", "]", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "block", "(", "\n", "self", ".", "inplanes", ",", "\n", "planes", ",", "\n", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "\n", "dilation", "=", "self", ".", "dilation", ",", "\n", "use_batch_norm", "=", "self", ".", "use_batch_norm", ",", "\n", ")", "\n", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.models.resnet.ResNetNoBN._forward_impl": [[208, 225], ["torchvision.models.resnet.ResNetNoBN.conv1", "torchvision.models.resnet.ResNetNoBN.relu", "torchvision.models.resnet.ResNetNoBN.layer1", "torchvision.models.resnet.ResNetNoBN.layer2", "torchvision.models.resnet.ResNetNoBN.layer3", "torchvision.models.resnet.ResNetNoBN.layer4", "torchvision.models.resnet.ResNetNoBN.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torchvision.models.resnet.ResNetNoBN.fc", "torchvision.models.resnet.ResNetNoBN.bn1"], "methods", ["None"], ["", "def", "_forward_impl", "(", "self", ",", "x", ")", ":", "\n", "# See note [TorchScript super()]", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "if", "self", ".", "use_batch_norm", ":", "\n", "            ", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.models.resnet.ResNetNoBN.forward": [[226, 228], ["torchvision.models.resnet.ResNetNoBN._forward_impl"], "methods", ["home.repos.pwc.inspect_result.magamba_linear-regions.models.resnet.ResNetNoBN._forward_impl"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "_forward_impl", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.models.resnet.ResNetNoBN.use_batch_norm": [[237, 244], ["torchvision.models.resnet.ResNetNoBN._set_use_batch_norm_layer", "torchvision.models.resnet.ResNetNoBN._set_use_batch_norm_layer", "torchvision.models.resnet.ResNetNoBN._set_use_batch_norm_layer", "torchvision.models.resnet.ResNetNoBN._set_use_batch_norm_layer"], "methods", ["home.repos.pwc.inspect_result.magamba_linear-regions.models.resnet.ResNetNoBN._set_use_batch_norm_layer", "home.repos.pwc.inspect_result.magamba_linear-regions.models.resnet.ResNetNoBN._set_use_batch_norm_layer", "home.repos.pwc.inspect_result.magamba_linear-regions.models.resnet.ResNetNoBN._set_use_batch_norm_layer", "home.repos.pwc.inspect_result.magamba_linear-regions.models.resnet.ResNetNoBN._set_use_batch_norm_layer"], ["", "", "@", "use_batch_norm", ".", "setter", "\n", "def", "use_batch_norm", "(", "self", ",", "truth_value", ")", ":", "\n", "        ", "self", ".", "_use_batch_norm", "=", "truth_value", "\n", "self", ".", "_set_use_batch_norm_layer", "(", "self", ".", "layer1", ")", "\n", "self", ".", "_set_use_batch_norm_layer", "(", "self", ".", "layer2", ")", "\n", "self", ".", "_set_use_batch_norm_layer", "(", "self", ".", "layer3", ")", "\n", "self", ".", "_set_use_batch_norm_layer", "(", "self", ".", "layer4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.models.resnet.ResNetNoBN._set_use_batch_norm_layer": [[233, 236], ["None"], "methods", ["None"], ["", "def", "_set_use_batch_norm_layer", "(", "self", ",", "seq_layer", ")", ":", "\n", "        ", "for", "block", "in", "seq_layer", ":", "\n", "            ", "block", ".", "use_batch_norm", "=", "self", ".", "use_batch_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.models.resnet.ResNetNoBNSmall.__init__": [[247, 273], ["torchvision.models.resnet.ResNetNoBN.__init__"], "methods", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.counting.ActivationRegion.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "block", ",", "\n", "layers", ",", "\n", "num_classes", "=", "1000", ",", "\n", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "\n", "width_per_group", "=", "64", ",", "\n", "replace_stride_with_dilation", "=", "None", ",", "\n", "use_batch_norm", "=", "False", ",", "\n", "in_channels", "=", "3", ",", "\n", "inplanes", "=", "16", ",", "\n", "channels", "=", "(", "32", ",", "64", ",", "128", ")", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "block", ",", "\n", "layers", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", "zero_init_residual", "=", "zero_init_residual", ",", "\n", "groups", "=", "groups", ",", "\n", "width_per_group", "=", "width_per_group", ",", "\n", "replace_stride_with_dilation", "=", "replace_stride_with_dilation", ",", "\n", "use_batch_norm", "=", "use_batch_norm", ",", "\n", "in_channels", "=", "in_channels", ",", "\n", "inplanes", "=", "inplanes", ",", "\n", "channels", "=", "channels", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.models.resnet.ResNetBuilder.__init__": [[277, 286], ["resnet_cls", "models.concepts.NetworkBuilder.__init__"], "methods", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.counting.ActivationRegion.__init__"], ["    ", "def", "__init__", "(", "self", ",", "resnet_cls", ",", "block_cls", ",", "arch", ",", "dataset_info", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_model", "=", "resnet_cls", "(", "\n", "block_cls", ",", "\n", "arch", ",", "\n", "num_classes", "=", "dataset_info", ".", "output_dimension", ",", "\n", "in_channels", "=", "dataset_info", ".", "input_shape", "[", "0", "]", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "super", "(", ")", ".", "__init__", "(", "dataset_info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.models.resnet.ResNetBuilder.add": [[287, 292], ["torchvision.models.resnet.ResNetBuilder.add_batch_norm", "torchvision.models.resnet.ResNetBuilder.add_dropout"], "methods", ["home.repos.pwc.inspect_result.magamba_linear-regions.models.resnet.ResNetBuilder.add_batch_norm", "home.repos.pwc.inspect_result.magamba_linear-regions.models.resnet.ResNetBuilder.add_dropout"], ["", "def", "add", "(", "self", ",", "addition", ":", "NetworkAddition", ")", ":", "\n", "        ", "if", "addition", "==", "NetworkAddition", ".", "BATCH_NORM", ":", "\n", "            ", "self", ".", "add_batch_norm", "(", ")", "\n", "", "if", "addition", "==", "NetworkAddition", ".", "DROPOUT", ":", "\n", "            ", "self", ".", "add_dropout", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.models.resnet.ResNetBuilder.add_batch_norm": [[293, 295], ["None"], "methods", ["None"], ["", "", "def", "add_batch_norm", "(", "self", ")", ":", "\n", "        ", "self", ".", "_model", ".", "use_batch_norm", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.models.resnet.ResNetBuilder.add_dropout": [[296, 298], ["NotImplementedError"], "methods", ["None"], ["", "def", "add_dropout", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Dropout for ResNet not supported yet\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.models.resnet.ResNetBuilder.build_net": [[299, 301], ["None"], "methods", ["None"], ["", "def", "build_net", "(", "self", ")", "->", "nn", ".", "Module", ":", "\n", "        ", "return", "self", ".", "_model", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.models.resnet.conv3x3": [[15, 19], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "True", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "bias", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.models.factory.create_model": [[14, 26], ["kwargs.pop", "network_builder.build_net", "KeyError", "KeyError", "network_builder.add", "models.concepts.NetworkAddition"], "function", ["home.repos.pwc.inspect_result.magamba_linear-regions.models.resnet.ResNetBuilder.build_net", "home.repos.pwc.inspect_result.magamba_linear-regions.models.resnet.ResNetBuilder.add"], ["def", "create_model", "(", "model_name", ",", "data_name", ",", "additions", "=", "(", ")", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "model_name", "not", "in", "MODEL_FACTORY_MAP", ":", "\n", "        ", "raise", "KeyError", "(", "\"{} is not in MODELS_MAP\"", ".", "format", "(", "model_name", ")", ")", "\n", "", "if", "data_name", "not", "in", "DATASET_INFO_MAP", ":", "\n", "        ", "raise", "KeyError", "(", "\"{} is not in ALL_DATASETS\"", ".", "format", "(", "data_name", ")", ")", "\n", "", "dropout_rate", "=", "kwargs", ".", "pop", "(", "\"dropout_rate\"", ",", "0.", ")", "\n", "network_builder", "=", "MODEL_FACTORY_MAP", "[", "model_name", "]", "(", "\n", "DATASET_INFO_MAP", "[", "data_name", "]", ",", "*", "args", ",", "**", "kwargs", "\n", ")", "\n", "for", "addition", "in", "additions", ":", "\n", "        ", "network_builder", ".", "add", "(", "NetworkAddition", "(", "addition", ")", ",", "dropout_rate", "=", "dropout_rate", ")", "\n", "", "return", "network_builder", ".", "build_net", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.__init__": [[44, 50], ["argparse.ArgumentParser.__init__"], "methods", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.counting.ActivationRegion.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "opts_to_acts", "=", "{", "}", "\n", "self", ".", "injections", "=", "{", "}", "\n", "self", ".", "conditional_injections", "=", "{", "}", "\n", "self", ".", "set_op_to_require_op", "=", "{", "}", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.add_argument": [[51, 55], ["super().add_argument"], "methods", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.add_argument"], ["", "def", "add_argument", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "opt_action", "=", "super", "(", ")", ".", "add_argument", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "opts_to_acts", "[", "opt_action", ".", "dest", "]", "=", "opt_action", "\n", "return", "opt_action", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.parse_args": [[56, 74], ["super().parse_args", "cmd.ReusableArgumentParser._set_opts_after_parsed", "cmd.ReusableArgumentParser.set_op_to_require_op.items", "getattr", "getattr", "is_set_func", "getattr", "cmd.ReusableArgumentParser._set_opts_after_parsed", "ValueError"], "methods", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.parse_args", "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser._set_opts_after_parsed", "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser._set_opts_after_parsed"], ["", "def", "parse_args", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "parsed_args", "=", "super", "(", ")", ".", "parse_args", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "_set_opts_after_parsed", "(", "parsed_args", ",", "self", ".", "injections", ")", "\n", "\n", "for", "cond_injection_key", "in", "self", ".", "conditional_injections", ":", "\n", "            ", "cond_val", ",", "injections", "=", "self", ".", "conditional_injections", "[", "cond_injection_key", "]", "\n", "if", "getattr", "(", "parsed_args", ",", "cond_injection_key", ")", "==", "cond_val", ":", "\n", "                ", "self", ".", "_set_opts_after_parsed", "(", "parsed_args", ",", "injections", ")", "\n", "", "", "for", "set_op", ",", "(", "is_set_func", ",", "require_op", ")", "in", "self", ".", "set_op_to_require_op", ".", "items", "(", ")", ":", "\n", "            ", "set_val", "=", "getattr", "(", "parsed_args", ",", "set_op", ")", "\n", "require_val", "=", "getattr", "(", "parsed_args", ",", "require_op", ")", "\n", "if", "is_set_func", "(", "set_val", ",", "require_val", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"Under {}, {}={} but {}={}\"", ".", "format", "(", "\n", "is_set_func", ",", "set_op", ",", "set_val", ",", "require_op", ",", "require_val", "\n", ")", "\n", ")", "\n", "", "", "return", "parsed_args", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser._set_opts_after_parsed": [[75, 79], ["setattr"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_set_opts_after_parsed", "(", "parsed_args", ",", "injections", ")", ":", "\n", "        ", "for", "injection_key", "in", "injections", ":", "\n", "            ", "setattr", "(", "parsed_args", ",", "injection_key", ",", "injections", "[", "injection_key", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser._require_opt_in_parser": [[80, 84], ["ValueError"], "methods", ["None"], ["", "", "def", "_require_opt_in_parser", "(", "self", ",", "opt_names", ")", ":", "\n", "        ", "for", "opt_name", "in", "opt_names", ":", "\n", "            ", "if", "opt_name", "not", "in", "self", ".", "opts_to_acts", ":", "\n", "                ", "raise", "ValueError", "(", "\"{} is not in parser\"", ".", "format", "(", "opt_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.set_required": [[85, 88], ["cmd.ensure"], "methods", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ensure"], ["", "", "", "@", "ensure", "(", "_require_opt_in_parser", ")", "\n", "def", "set_required", "(", "self", ",", "opt_name", ",", "required", ")", ":", "\n", "        ", "self", ".", "opts_to_acts", "[", "opt_name", "]", ".", "required", "=", "required", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.inject_opt": [[89, 93], ["cmd.ensure", "cmd.ReusableArgumentParser.set_required"], "methods", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ensure", "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.set_required"], ["", "@", "ensure", "(", "_require_opt_in_parser", ")", "\n", "def", "inject_opt", "(", "self", ",", "opt_name", ",", "opt_value", ")", ":", "\n", "        ", "self", ".", "set_required", "(", "opt_name", ",", "False", ")", "\n", "self", ".", "injections", "[", "opt_name", "]", "=", "opt_value", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.if_set": [[94, 97], ["cmd.ensure"], "methods", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ensure"], ["", "@", "ensure", "(", "_require_opt_in_parser", ")", "\n", "def", "if_set", "(", "self", ",", "opt_name", ",", "opt_val", ",", "injections", ")", ":", "\n", "        ", "self", ".", "conditional_injections", "[", "opt_name", "]", "=", "(", "opt_val", ",", "injections", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.if_set_require": [[98, 101], ["cmd.ensure", "cmd.ReusableArgumentParser.if_set_require_under"], "methods", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ensure", "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.if_set_require_under"], ["", "@", "ensure", "(", "_require_opt_in_parser", ",", "2", ")", "\n", "def", "if_set_require", "(", "self", ",", "set_opt", ",", "required_opt", ")", ":", "\n", "        ", "self", ".", "if_set_require_under", "(", "set_opt", ",", "required_opt", ",", "lambda", "s", ",", "r", ":", "s", "and", "not", "r", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.if_set_require_under": [[102, 107], ["cmd.ensure", "callable", "ValueError"], "methods", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ensure"], ["", "@", "ensure", "(", "_require_opt_in_parser", ",", "2", ")", "\n", "def", "if_set_require_under", "(", "self", ",", "set_opt", ",", "required_opt", ",", "is_set_func", ")", ":", "\n", "        ", "if", "not", "callable", "(", "is_set_func", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"{} is not a function\"", ".", "format", "(", "is_set_func", ")", ")", "\n", "", "self", ".", "set_op_to_require_op", "[", "set_opt", "]", "=", "(", "is_set_func", ",", "required_opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.DefaultToEnvOpt.__init__": [[110, 142], ["argparse.Action.__init__", "dest.upper", "os.environ.get", "type"], "methods", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.counting.ActivationRegion.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "option_strings", ",", "\n", "dest", ",", "\n", "const", "=", "None", ",", "\n", "required", "=", "False", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "env_name", "=", "const", "if", "const", "else", "dest", ".", "upper", "(", ")", "\n", "# First check ENV, then can overwrite with command line, fallback is the default", "\n", "old_default", "=", "default", "\n", "default", "=", "environ", ".", "get", "(", "env_name", ")", "or", "old_default", "\n", "if", "type", ":", "\n", "            ", "default", "=", "type", "(", "default", ")", "\n", "# if the opt is required, but we found it in environ, then the user doesn't", "\n", "# have to specify it", "\n", "", "if", "required", "and", "default", "is", "not", "None", ":", "\n", "            ", "required", "=", "False", "\n", "\n", "", "if", "default", "is", "None", ":", "\n", "            ", "default", "=", "old_default", "\n", "\n", "", "super", "(", ")", ".", "__init__", "(", "\n", "option_strings", ",", "\n", "dest", ",", "\n", "const", "=", "const", ",", "\n", "default", "=", "default", ",", "\n", "required", "=", "required", ",", "\n", "type", "=", "type", ",", "\n", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.DefaultToEnvOpt.__call__": [[144, 146], ["setattr"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "parser", ",", "namespace", ",", "values", ",", "option_string", "=", "None", ")", ":", "\n", "        ", "setattr", "(", "namespace", ",", "self", ".", "dest", ",", "values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.DefaultToEnvFlag.__init__": [[149, 154], ["cmd.DefaultToEnvOpt.__init__"], "methods", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.counting.ActivationRegion.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "option_strings", ",", "dest", ",", "nargs", "=", "None", ",", "type", "=", "None", ",", "required", "=", "None", ",", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "option_strings", ",", "dest", ",", "nargs", "=", "0", ",", "type", "=", "bool", ",", "required", "=", "False", ",", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.DefaultToEnvFlag.__call__": [[156, 158], ["setattr"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "parser", ",", "namespace", ",", "values", ",", "option_string", "=", "None", ")", ":", "\n", "        ", "setattr", "(", "namespace", ",", "self", ".", "dest", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ensure": [[31, 41], ["functools.wraps", "ensure_func", "func"], "function", ["None"], ["def", "ensure", "(", "ensure_func", ",", "n", "=", "1", ")", ":", "\n", "    ", "def", "decorator_ensure", "(", "func", ")", ":", "\n", "        ", "@", "wraps", "(", "func", ")", "\n", "def", "wrapper_ensure", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "            ", "ensure_func", "(", "self", ",", "args", "[", ":", "n", "]", ")", "\n", "return", "func", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "return", "wrapper_ensure", "\n", "\n", "", "return", "decorator_ensure", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.add_env_opts": [[160, 190], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "function", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.add_argument", "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.add_argument", "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.add_argument", "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.add_argument", "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.add_argument"], ["", "", "def", "add_env_opts", "(", "parser", ")", ":", "\n", "    ", "parser", ".", "add_argument", "(", "\n", "\"--e_device\"", ",", "\n", "action", "=", "DefaultToEnvOpt", ",", "\n", "default", "=", "\"cpu\"", ",", "\n", "help", "=", "\"Should follow PyTorch standards (i.e. cpu, cuda, cuda:1, etc.)\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--e_name\"", ",", "\n", "help", "=", "\"the name of this experimental run, a subdirectory under --e_save-dir\"", ",", "\n", "action", "=", "DefaultToEnvOpt", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--e_save-dir\"", ",", "\n", "default", "=", "\"./\"", ",", "\n", "help", "=", "\"the top level directory to save all logs to\"", ",", "\n", "action", "=", "DefaultToEnvOpt", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--e_data-dir\"", ",", "\n", "default", "=", "\"\"", ",", "\n", "action", "=", "DefaultToEnvOpt", ",", "\n", "help", "=", "\"the top level directory where datasets are loaded from\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--e_workers\"", ",", "\n", "type", "=", "int", ",", "\n", "action", "=", "DefaultToEnvOpt", ",", "\n", "default", "=", "1", ",", "\n", "help", "=", "\"If running on CPU, how many process level threads to use\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.add_default_opts": [[193, 374], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.if_set_require", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "models.factory.MODEL_FACTORY_MAP.keys"], "function", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.add_argument", "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.add_argument", "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.add_argument", "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.add_argument", "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.add_argument", "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.add_argument", "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.add_argument", "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.add_argument", "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.add_argument", "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.add_argument", "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.add_argument", "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.add_argument", "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.add_argument", "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.add_argument", "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.add_argument", "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.add_argument", "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.add_argument", "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.add_argument", "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.add_argument", "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.if_set_require", "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.add_argument", "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.add_argument", "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.add_argument", "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.add_argument", "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.add_argument", "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.add_argument", "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.add_argument", "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.add_argument", "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.add_argument", "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.ReusableArgumentParser.add_argument"], ["", "def", "add_default_opts", "(", "parser", ")", ":", "\n", "    ", "parser", ".", "add_argument", "(", "\n", "\"--data\"", ",", "\n", "choices", "=", "dsets", ".", "DATASETS", ",", "\n", "help", "=", "\"which data set to use\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--model\"", ",", "\n", "choices", "=", "MODEL_FACTORY_MAP", ".", "keys", "(", ")", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"the model to use, see models/factory.py#MODEL_FACTORY_MAP for options\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--model-additions\"", ",", "\n", "choices", "=", "ALL_ADDITIONS", ",", "\n", "nargs", "=", "\"*\"", ",", "\n", "default", "=", "(", ")", ",", "\n", "help", "=", "\"network architecture additions, e.g. batch_norm and dropout\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-e\"", ",", "\n", "\"--epochs\"", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"max number of epochs to train for\"", ",", "\n", "default", "=", "300", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-l\"", ",", "\n", "\"--learning-rate\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.1", ",", "\n", "help", "=", "\"learning rate for training\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lr-step\"", ",", "\n", "\"--learning-rate-step\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "150", ",", "\n", "help", "=", "\"Every --lr-step, modify the learning rate\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--l1-regularization\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"L1-regularization coefficient, may use in conjunction \"", "\n", "\"with --l2-regularization for elastic net regularization\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--l2-regularization\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"L2-regularization coefficient, may use in conjunction \"", "\n", "\"with --l1-regularization for elastic net regularization\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-o\"", ",", "\n", "\"--optimizer\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"sgd\"", ",", "\n", "choices", "=", "[", "\"sgd\"", ",", "\"adam\"", "]", ",", "\n", "help", "=", "\"optimizer to use for training\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-b\"", ",", "\n", "\"--batch-size\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "128", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--eval-every\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ",", "\n", "help", "=", "\"compute metrics (loss, accuracy) every EVAL_EVERY epochs\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--augmentation\"", ",", "\n", "default", "=", "False", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"enable data augmentation\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--label-noise\"", ",", "\n", "default", "=", "0.", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "\"the fration of corrupted training labels\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "None", ",", "help", "=", "\"seed used to control weight initialization and shuffling of batches\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--label_seed\"", ",", "type", "=", "int", ",", "default", "=", "None", ",", "help", "=", "\"seed used for corrupting labels\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--data-split-seed\"", ",", "type", "=", "int", ",", "default", "=", "\"42\"", ",", "help", "=", "\"seed used for making a validation split out of the train set\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--early-exit-accuracy\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"true to stop training once accuracy is 1.0\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--train-split\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"the number of samples in the train set. the sum of this\"", "\n", "\"and --val-split should equal the length of the true\"", "\n", "\"train set. If setting, --val-split must also be set.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--val-split\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"the number of samples in the validation set. the sum of\"", "\n", "\"this and --train-split should equal the length of the \"", "\n", "\"true train set. Must provide in conjunction with \"", "\n", "\"--train-split\"", ",", "\n", ")", "\n", "parser", ".", "if_set_require", "(", "\"train_split\"", ",", "\"val_split\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--start-method\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"forkserver\"", ",", "\n", "choices", "=", "(", "\"spawn\"", ",", "\"forkserver\"", ",", "\"fork\"", ")", ",", "\n", "help", "=", "\"if using CUDA/GPUs you must choose spawn or forkserver, of which the \"", "\n", "\"latter is preferable since it should be faster. if using CPU only, \"", "\n", "\"fork may be preferable.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--log-level\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"info\"", ",", "\n", "help", "=", "\"log level\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--logfile\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"linear_regions.log\"", ",", "\n", "help", "=", "\"file name to save logs to\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--early-exit-loss\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"stop training based on training loss threshold\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lr-decay-rate\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.2", ",", "\n", "help", "=", "\"the value to use for multiplicative learning reate \"", "\n", "\"decay. set to 1.0 for no lr decay\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--stop-by-loss-threshold\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.19", ",", "\n", "help", "=", "\"the training loss to stop training at. must set \"", "\n", "\"--early-exit-loss as well to true in conjunction\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--stop-by-accuracy-threshold\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.0", ",", "\n", "help", "=", "\"the training accuracy to stop training at. must set \"", "\n", "\"--early-exit-accuracy to true in conjunction\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--weight-decay\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.", ",", "\n", "help", "=", "\"value for L2 weight decay in conjunction with SGD\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--dropout\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.", ",", "\n", "help", "=", "\"dropout rate\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--momentum\"", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "\"momentum coefficient for SGD\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.create_default_args": [[377, 382], ["cmd.ReusableArgumentParser", "cmd.add_env_opts", "cmd.add_default_opts"], "function", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.add_env_opts", "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.add_default_opts"], ["", "def", "create_default_args", "(", ")", ":", "\n", "    ", "parser", "=", "ReusableArgumentParser", "(", ")", "\n", "add_env_opts", "(", "parser", ")", "\n", "add_default_opts", "(", "parser", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.create_env_args": [[384, 388], ["cmd.ReusableArgumentParser", "cmd.add_env_opts"], "function", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.cmd.add_env_opts"], ["", "def", "create_env_args", "(", ")", ":", "\n", "    ", "parser", "=", "ReusableArgumentParser", "(", ")", "\n", "add_env_opts", "(", "parser", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.module_counter.ModuleCounter.__init__": [[31, 49], ["module_counter.ModuleCounter.check_countable", "models.concepts.wrap_affine_layers", "module_counter.ModuleCounter._model.eval", "module_counter.ModuleCounter._model.requires_grad_", "module_counter.ModuleCounter._get_num_relus", "module_counter.ModuleCounter._ActivationRegionState", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.finfo", "torch.finfo", "torch.finfo", "torch.finfo", "torch.finfo", "torch.finfo", "torch.finfo", "torch.finfo", "torch.finfo", "torch.finfo", "torch.finfo", "torch.finfo", "torch.finfo", "torch.finfo", "torch.finfo", "torch.finfo"], "methods", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.module_counter.ModuleCounter.check_countable", "home.repos.pwc.inspect_result.magamba_linear-regions.models.concepts.wrap_affine_layers", "home.repos.pwc.inspect_result.magamba_linear-regions.core.module_counter.ModuleCounter._get_num_relus"], ["def", "__init__", "(", "self", ",", "model", ",", "input_shape", "=", "None", ",", "batch_size", "=", "None", ",", "buff_size", "=", "30000", ",", "device", "=", "\"cpu\"", ")", ":", "\n", "        ", "ModuleCounter", ".", "check_countable", "(", "model", ")", "\n", "self", ".", "_model", "=", "model", "\n", "wrap_affine_layers", "(", "self", ".", "_model", ",", "'model'", ",", "batch_size", ",", "None", ")", "\n", "self", ".", "_model", ".", "eval", "(", ")", "\n", "self", ".", "_model", ".", "requires_grad_", "(", "False", ")", "\n", "self", ".", "_input_shape", "=", "input_shape", "\n", "self", ".", "_device", "=", "device", "\n", "if", "input_shape", "is", "None", ":", "\n", "            ", "self", ".", "_input_shape", "=", "model", ".", "input_shape", "\n", "", "self", ".", "_num_relus", ",", "self", ".", "_relu_modules", "=", "self", ".", "_get_num_relus", "(", "self", ".", "_model", ")", "\n", "self", ".", "_act_reg_state", "=", "self", ".", "_ActivationRegionState", "(", "self", ".", "_num_relus", ")", "\n", "self", ".", "_model_handles", "=", "None", "\n", "self", ".", "_epsilon", "=", "torch", ".", "tensor", "(", "[", "counting", ".", "EPSILON", "]", ",", "dtype", "=", "torch", ".", "float64", ",", "device", "=", "device", ")", "\n", "self", ".", "_machine_eps", "=", "torch", ".", "tensor", "(", "[", "torch", ".", "finfo", "(", "torch", ".", "float64", ")", ".", "eps", "]", ",", "dtype", "=", "torch", ".", "float64", ",", "device", "=", "device", ")", "\n", "self", ".", "_inf", "=", "torch", ".", "tensor", "(", "[", "np", ".", "inf", "]", ",", "dtype", "=", "torch", ".", "float64", ",", "device", "=", "device", ")", "\n", "self", ".", "_retain_bias", "=", "False", "# appy bias to second half of batch size for AffineLayers", "\n", "self", ".", "_buff_size", "=", "buff_size", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.module_counter.ModuleCounter.input_shape": [[50, 53], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "input_shape", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_input_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.module_counter.ModuleCounter.model": [[54, 57], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "model", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_model", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.module_counter.ModuleCounter.check_countable": [[58, 66], ["model.modules", "ValueError", "module.children", "type"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "check_countable", "(", "model", ")", ":", "\n", "        ", "for", "module", "in", "model", ".", "modules", "(", ")", ":", "\n", "            ", "if", "(", "\n", "module", ".", "children", "(", ")", "==", "[", "]", "\n", "and", "type", "(", "module", ")", "not", "in", "ModuleCounter", ".", "SUPPORTED_MODULES", "\n", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"{} not in list of supported modules\"", ".", "format", "(", "model", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.module_counter.ModuleCounter._get_num_relus": [[67, 91], ["model.modules", "module_counter.ModuleCounter.model"], "methods", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.module_counter.ModuleCounter.model"], ["", "", "", "def", "_get_num_relus", "(", "self", ",", "model", ",", "ret_bn_modules", "=", "False", ")", ":", "\n", "        ", "if", "self", ".", "_input_shape", "is", "None", ":", "\n", "            ", "return", "self", ".", "_get_num_relu_modules", "(", "model", ")", "\n", "\n", "", "def", "count_callbacks", "(", "relu_mod", ",", "inp_", ",", "outp_", ")", ":", "\n", "            ", "count_callbacks", ".", "relus", "+=", "1", "\n", "count_callbacks", ".", "relu_modules", ".", "append", "(", "relu_mod", ")", "\n", "\n", "", "count_callbacks", ".", "relus", "=", "0", "\n", "count_callbacks", ".", "relu_modules", "=", "[", "]", "\n", "\n", "hooks", "=", "[", "]", "\n", "for", "module", "in", "model", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "nn", ".", "ReLU", ")", ":", "\n", "                ", "hooks", ".", "append", "(", "module", ".", "register_forward_hook", "(", "count_callbacks", ")", ")", "\n", "\n", "", "", "model", "(", "torch", ".", "ones", "(", "(", "2", ",", ")", "+", "self", ".", "_input_shape", ",", "device", "=", "self", ".", "_device", ")", ")", "\n", "for", "hook", "in", "hooks", ":", "\n", "            ", "hook", ".", "remove", "(", ")", "\n", "", "for", "idx", "in", "range", "(", "len", "(", "count_callbacks", ".", "relu_modules", ")", ")", ":", "\n", "            ", "count_callbacks", ".", "relu_modules", "[", "idx", "]", ".", "register_buffer", "(", "\n", "\"index\"", ",", "torch", ".", "tensor", "(", "idx", ")", "\n", ")", "\n", "", "return", "count_callbacks", ".", "relus", ",", "count_callbacks", ".", "relu_modules", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.module_counter.ModuleCounter._get_num_relu_modules": [[92, 100], ["model.modules", "isinstance", "relu_modules.append"], "methods", ["None"], ["", "def", "_get_num_relu_modules", "(", "self", ",", "model", ")", ":", "\n", "        ", "relus", "=", "0", "\n", "relu_modules", "=", "[", "]", "\n", "for", "module", "in", "model", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "nn", ".", "ReLU", ")", ":", "\n", "                ", "relus", "+=", "1", "\n", "relu_modules", ".", "append", "(", "module", ")", "\n", "", "", "return", "relus", ",", "relu_modules", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.module_counter.ModuleCounter.num_relus": [[101, 104], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_relus", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_num_relus", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.module_counter.ModuleCounter._model_fwd": [[105, 114], ["int", "module_counter.ModuleCounter._act_reg_state.reset", "module_counter.ModuleCounter._model", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min"], "methods", ["None"], ["", "def", "_model_fwd", "(", "self", ",", "x", ",", "retain_bias", "=", "False", ")", ":", "\n", "        ", "self", ".", "_retain_bias", "=", "retain_bias", "\n", "batch_size", "=", "int", "(", "x", ".", "shape", "[", "0", "]", "//", "2", ")", "\n", "self", ".", "_act_reg_state", ".", "reset", "(", "batch_size", ",", "device", "=", "x", ".", "device", ")", "\n", "# logits are correctly computed only for the first half of a batch", "\n", "output", "=", "self", ".", "_model", "(", "x", ")", "\n", "lambdas", ",", "self", ".", "_act_reg_state", ".", "boundary_layer_ids", "=", "torch", ".", "min", "(", "self", ".", "_act_reg_state", ".", "lambdas_to_cross", ",", "dim", "=", "1", ")", "\n", "self", ".", "_act_reg_state", ".", "best_lambdas_to_cross", "=", "lambdas", "\n", "return", "output", "[", ":", "batch_size", "]", ",", "output", "[", "batch_size", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.module_counter.ModuleCounter._retain_bias_pre_fwd_hook": [[136, 143], ["module.retain_bias_"], "methods", ["home.repos.pwc.inspect_result.magamba_linear-regions.models.concepts.AffineLayer.retain_bias_"], ["", "", "def", "_retain_bias_pre_fwd_hook", "(", "self", ",", "module", ",", "input", ")", ":", "\n", "        ", "\"\"\" To be used on concepts.AffineLayer, to instruct\n            the module to execute a forward pass retaining the full bias\n            parameter.\n        \"\"\"", "\n", "module", ".", "retain_bias_", "(", "retain", "=", "self", ".", "_retain_bias", ")", "\n", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.module_counter.ModuleCounter._reset_retain_bias_hook": [[145, 148], ["module.retain_bias_"], "methods", ["home.repos.pwc.inspect_result.magamba_linear-regions.models.concepts.AffineLayer.retain_bias_"], ["", "def", "_reset_retain_bias_hook", "(", "self", ",", "module", ",", "input", ",", "output", ")", ":", "\n", "        ", "module", ".", "retain_bias_", "(", "retain", "=", "False", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.module_counter.ModuleCounter._record_act_pattern_hook": [[150, 184], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "module.index.item", "int", "module_counter.ModuleCounter.find_lambdas_to_cross", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min"], "methods", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.module_counter.ModuleCounter.find_lambdas_to_cross"], ["", "def", "_record_act_pattern_hook", "(", "self", ",", "module", ",", "input", ",", "output", ")", ":", "\n", "        ", "\"\"\" Record several statistics for @module and store\n            them in the corresponding entry of @self._act_reg_state.\n            \n            @param module: instance of torch.nn.ReLU\n            @param input: torch.tensor of shape (2N, *), where input[:N] corresponds\n                          to input data, while input[N:] are the respective \n                          directions in the input space.\n            @param output: torch.tensor of shape (2N, *) Module's output\n            \n            Stats reported:\n                act_pattern: torch.tensor of bool Activation pattern of output[:N]\n                pre_activations: module's pre-activation for input[:N]\n                dir_pre_activations: preactivations of directions, input[N:]\n                lambdas_to_cross: tensor of size (N, *), whose entry represent \n                                  the values of lambda required to move along\n                                  direction input[N:] in order to cross the current\n                                  linear region boundary.\n            @return\n                output: torch.tensor the output of the module, with the directions\n                        stored in output[half_batch:] transformed according to the\n                        activation pattern of output[:half_batch].\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "relu_counter", "=", "module", ".", "index", ".", "item", "(", ")", "\n", "half_batch", "=", "int", "(", "output", ".", "shape", "[", "0", "]", "//", "2", ")", "\n", "\n", "act_pattern", "=", "output", "[", ":", "half_batch", "]", ">", "0", "\n", "self", ".", "_act_reg_state", ".", "act_region", ".", "act_pattern", "[", "relu_counter", "+", "1", "]", "=", "act_pattern", "\n", "output", ",", "lambdas", "=", "self", ".", "find_lambdas_to_cross", "(", "\n", "input", ",", "output", ",", "act_pattern", ",", "half_batch", ",", "relu_counter", ",", "self", ".", "_epsilon", ",", "self", ".", "_inf", ",", "self", ".", "_machine_eps", "\n", ")", "\n", "self", ".", "_act_reg_state", ".", "lambdas_to_cross", "[", ":", ",", "relu_counter", "]", ",", "_", "=", "torch", ".", "min", "(", "lambdas", ",", "dim", "=", "1", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.module_counter.ModuleCounter.find_lambdas_to_cross": [[185, 195], ["torch.div().view", "torch.div().view", "torch.div().view", "torch.div().view", "torch.div().view", "torch.div().view", "torch.div().view", "torch.div().view", "torch.div().view", "torch.div().view", "torch.div().view", "torch.div().view", "torch.div().view", "torch.div().view", "torch.div().view", "torch.div().view", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div"], "methods", ["None"], ["", "@", "staticmethod", "\n", "@", "torch", ".", "jit", ".", "script", "\n", "def", "find_lambdas_to_cross", "(", "\n", "preact", ":", "Tuple", "[", "torch", ".", "Tensor", "]", ",", "activation", ":", "torch", ".", "Tensor", ",", "act_pattern", ":", "torch", ".", "Tensor", ",", "half_batch_size", ":", "int", ",", "relu_counter", ":", "int", ",", "epsilon", ":", "torch", ".", "Tensor", ",", "inf", ":", "torch", ".", "Tensor", ",", "eps", ":", "torch", ".", "Tensor", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "activation", "[", "half_batch_size", ":", "]", "=", "preact", "[", "0", "]", "[", "half_batch_size", ":", "]", "*", "act_pattern", "\n", "lambdas", "=", "torch", ".", "div", "(", "-", "preact", "[", "0", "]", "[", ":", "half_batch_size", "]", ",", "preact", "[", "0", "]", "[", "half_batch_size", ":", "]", "+", "eps", ")", ".", "view", "(", "half_batch_size", ",", "-", "1", ")", "\n", "lambdas", "[", "lambdas", "<=", "epsilon", "]", "=", "inf", "\n", "\n", "return", "(", "activation", ",", "lambdas", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.module_counter.ModuleCounter._idx_in_relu_range": [[196, 199], ["None"], "methods", ["None"], ["", "def", "_idx_in_relu_range", "(", "self", ",", "idx", ")", ":", "\n", "        ", "relu_range", "=", "self", ".", "_act_reg_state", ".", "relu_range", "\n", "return", "relu_range", "[", "0", "]", "<=", "idx", "<", "relu_range", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.module_counter.ModuleCounter._attach_hooks_to_relus": [[200, 206], ["range", "len", "module_counter.ModuleCounter._idx_in_relu_range", "handles.append", "relu_modules[].register_forward_hook"], "methods", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.module_counter.ModuleCounter._idx_in_relu_range"], ["", "def", "_attach_hooks_to_relus", "(", "self", ",", "relu_modules", ",", "callback", ")", ":", "\n", "        ", "handles", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "relu_modules", ")", ")", ":", "\n", "            ", "if", "self", ".", "_idx_in_relu_range", "(", "idx", ")", ":", "\n", "                ", "handles", ".", "append", "(", "relu_modules", "[", "idx", "]", ".", "register_forward_hook", "(", "callback", ")", ")", "\n", "", "", "return", "handles", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.module_counter.ModuleCounter._attach_hooks_to_affine_layers": [[207, 214], ["isinstance", "handles.append", "handles.append", "module.register_forward_pre_hook", "module.register_forward_hook"], "methods", ["None"], ["", "def", "_attach_hooks_to_affine_layers", "(", "self", ",", "modules", ",", "pre_fwd_hook", ",", "fwd_hook", ")", ":", "\n", "        ", "handles", "=", "[", "]", "\n", "for", "module", "in", "modules", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "AffineLayer", ")", ":", "\n", "                ", "handles", ".", "append", "(", "module", ".", "register_forward_pre_hook", "(", "pre_fwd_hook", ")", ")", "\n", "handles", ".", "append", "(", "module", ".", "register_forward_hook", "(", "fwd_hook", ")", ")", "\n", "", "", "return", "handles", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.module_counter.ModuleCounter._attach_hooks_to_layers": [[215, 220], ["handles.append", "module.register_forward_hook"], "methods", ["None"], ["", "def", "_attach_hooks_to_layers", "(", "self", ",", "modules", ",", "callback", ")", ":", "\n", "        ", "handles", "=", "[", "]", "\n", "for", "module", "in", "modules", ":", "\n", "            ", "handles", ".", "append", "(", "module", ".", "register_forward_hook", "(", "callback", ")", ")", "\n", "", "return", "handles", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.module_counter.ModuleCounter.get_activation_region_state": [[221, 234], ["module_counter.ModuleCounter._model_fwd", "module_counter.ModuleCounter._attach_hooks_to_relus", "module_counter.ModuleCounter._attach_hooks_to_affine_layers", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "module_counter.ModuleCounter._model.modules", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.module_counter.ModuleCounter._model_fwd", "home.repos.pwc.inspect_result.magamba_linear-regions.core.module_counter.ModuleCounter._attach_hooks_to_relus", "home.repos.pwc.inspect_result.magamba_linear-regions.core.module_counter.ModuleCounter._attach_hooks_to_affine_layers"], ["", "def", "get_activation_region_state", "(", "self", ",", "x", ",", "d", "=", "None", ",", "retain_bias", "=", "False", ")", ":", "\n", "        ", "if", "self", ".", "_model_handles", "is", "None", ":", "\n", "            ", "self", ".", "_model_handles", "=", "self", ".", "_attach_hooks_to_relus", "(", "\n", "self", ".", "_relu_modules", ",", "self", ".", "_record_act_pattern_hook", "\n", ")", "\n", "self", ".", "_model_handles", "+=", "self", ".", "_attach_hooks_to_affine_layers", "(", "\n", "self", ".", "_model", ".", "modules", "(", ")", ",", "self", ".", "_retain_bias_pre_fwd_hook", ",", "self", ".", "_reset_retain_bias_hook", "\n", ")", "\n", "\n", "", "if", "d", "is", "not", "None", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "d", ")", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "", "logits", ",", "directions", "=", "self", ".", "_model_fwd", "(", "x", ",", "retain_bias", ")", "\n", "return", "self", ".", "_act_reg_state", ",", "logits", ",", "directions", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.module_counter.ModuleCounter.remove_model_handles": [[235, 241], ["handle.remove"], "methods", ["None"], ["", "def", "remove_model_handles", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_model_handles", "is", "None", ":", "\n", "            ", "return", "\n", "", "for", "handle", "in", "self", ".", "_model_handles", ":", "\n", "            ", "handle", ".", "remove", "(", ")", "\n", "", "self", ".", "_model_handles", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.module_counter.ModuleCounter.remove_all_handles": [[243, 245], ["module_counter.ModuleCounter.remove_model_handles"], "methods", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.module_counter.ModuleCounter.remove_model_handles"], ["", "def", "remove_all_handles", "(", "self", ")", ":", "\n", "        ", "self", ".", "remove_model_handles", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.module_counter.ModuleCounter.count": [[247, 267], ["core.counting.find_act_patterns_between_points", "module_counter.ModuleCounter.remove_all_handles", "module_counter.ModuleCounter.get_activation_region_state"], "methods", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.counting.find_act_patterns_between_points", "home.repos.pwc.inspect_result.magamba_linear-regions.core.module_counter.ModuleCounter.remove_all_handles", "home.repos.pwc.inspect_result.magamba_linear-regions.core.module_counter.ModuleCounter.get_activation_region_state"], ["", "def", "count", "(", "self", ",", "x", ",", "d", ",", "device", "=", "\"cpu\"", ")", ":", "\n", "        ", "def", "act_reg_callback_closure", "(", "x0s", ",", "directions", "=", "None", ",", "retain_bias", "=", "False", ")", ":", "\n", "            ", "reg_state", ",", "logits", ",", "directions", "=", "self", ".", "get_activation_region_state", "(", "x0s", ",", "directions", ",", "retain_bias", ")", "\n", "return", "(", "\n", "reg_state", ".", "best_lambdas_to_cross", ",", "\n", "reg_state", ".", "boundary_layer_ids", ",", "\n", "reg_state", ".", "act_region", ",", "\n", "logits", ",", "\n", "directions", "\n", ")", "\n", "\n", "", "ret_vals", "=", "counting", ".", "find_act_patterns_between_points", "(", "\n", "act_reg_callback_closure", ",", "\n", "x", ",", "\n", "d", ",", "\n", "device", "=", "device", ",", "\n", "buff_size", "=", "self", ".", "_buff_size", "\n", ")", "\n", "self", ".", "remove_all_handles", "(", ")", "\n", "return", "ret_vals", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.metrics.Metric.__init__": [[29, 36], ["metrics.Metric._init_opts", "isinstance", "ValueError"], "methods", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.metrics.LineCounts._init_opts"], ["    ", "def", "__init__", "(", "self", ",", "data_sources", ",", "opts", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "data_sources", ",", "dict", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"data_sources must be a dict\"", ")", "\n", "", "self", ".", "data_sources", "=", "data_sources", "\n", "self", ".", "_data_sources_keys", "=", "[", "source", "for", "source", "in", "data_sources", "]", "\n", "self", ".", "results", "=", "{", "key", ":", "{", "}", "for", "key", "in", "data_sources", "}", "\n", "self", ".", "_init_opts", "(", "opts", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.metrics.Metric._init_opts": [[37, 39], ["None"], "methods", ["None"], ["", "def", "_init_opts", "(", "self", ",", "opts", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.metrics.Metric.name": [[40, 46], ["None"], "methods", ["None"], ["", "@", "property", "\n", "@", "abc", ".", "abstractmethod", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the metric name from Metrics\n        Useful for logging\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.metrics.Metric.__call__": [[47, 73], ["kwargs.pop", "[].append", "[].append", "metrics.Metric.compute", "metrics.Metric.compute"], "methods", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.metrics.PointMetric.compute", "home.repos.pwc.inspect_result.magamba_linear-regions.core.metrics.PointMetric.compute"], ["", "def", "__call__", "(", "self", ",", "model", ",", "key", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        @param model (torch.nn.Module): the network on which to compute the metric.\n        @param key (str): primary key to index the results. Each entry results[key]\n                          is represented by a matrix, implemented as a list of\n                          same-length lists.\n        @param index_sec (str or None): secondary key to index the results.\n        \"\"\"", "\n", "index_sec", "=", "kwargs", ".", "pop", "(", "\"index_sec\"", ",", "None", ")", "\n", "for", "data_source", "in", "self", ".", "data_sources", ":", "\n", "            ", "try", ":", "\n", "                ", "_", "=", "self", ".", "results", "[", "data_source", "]", "[", "key", "]", "\n", "", "except", "KeyError", ":", "\n", "                ", "self", ".", "results", "[", "data_source", "]", "[", "key", "]", "=", "[", "]", "if", "index_sec", "is", "None", "else", "{", "}", "\n", "\n", "", "if", "index_sec", "is", "not", "None", ":", "\n", "                ", "try", ":", "\n", "                    ", "_", "=", "self", ".", "results", "[", "data_source", "]", "[", "key", "]", "[", "index_sec", "]", "\n", "", "except", "KeyError", ":", "\n", "                    ", "self", ".", "results", "[", "data_source", "]", "[", "key", "]", "[", "index_sec", "]", "=", "[", "]", "\n", "\n", "", "self", ".", "results", "[", "data_source", "]", "[", "key", "]", "[", "index_sec", "]", ".", "append", "(", "\n", "self", ".", "compute", "(", "model", ",", "data_source", ")", "\n", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "results", "[", "data_source", "]", "[", "key", "]", ".", "append", "(", "self", ".", "compute", "(", "model", ",", "data_source", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.metrics.Metric.__getstate__": [[74, 84], ["metrics.Metric.__dict__.copy"], "methods", ["None"], ["", "", "", "def", "__getstate__", "(", "self", ")", ":", "\n", "# data_sources may contain pointers to PyTorch datasets, and pickling these", "\n", "# could quickly lead to serialized objects becoming too large and taking up", "\n", "# too much space", "\n", "        ", "state", "=", "self", ".", "__dict__", ".", "copy", "(", ")", "\n", "try", ":", "\n", "            ", "del", "state", "[", "\"data_sources\"", "]", "\n", "", "except", "KeyError", ":", "\n", "            ", "pass", "\n", "", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.metrics.Metric.__repr__": [[85, 87], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ".", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.metrics.Metric.compute": [[88, 91], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "compute", "(", "self", ",", "model", ",", "data_source", ")", ":", "\n", "        ", "\"\"\"Compute the metric \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.metrics.PointMetric._init_opts": [[99, 114], ["any", "ValueError", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "logger.info"], "methods", ["None"], ["def", "_init_opts", "(", "self", ",", "opts", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_workers", "=", "opts", ".", "e_workers", "\n", "self", ".", "e_device", "=", "opts", ".", "e_device", "\n", "self", ".", "_seed", "=", "opts", ".", "seed", "\n", "self", ".", "_skip_paths", "=", "opts", ".", "l_skip_paths", "\n", "self", ".", "_path_sample_seed", "=", "opts", ".", "l_path_sample_seed", "\n", "if", "any", "(", "[", "'closed-path'", "in", "_", "for", "_", "in", "opts", ".", "l_gen_strategy", "]", ")", ":", "\n", "            ", "if", "opts", ".", "e_device", "!=", "\"cpu\"", ":", "\n", "                ", "self", ".", "_workers", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "logger", ".", "info", "(", "\n", "\"Path-based counting with multiprocessing. Setting GPU workers to {}\"", ".", "format", "(", "self", ".", "_workers", ")", "\n", ")", "\n", "", "self", ".", "_num_paths", "=", "opts", ".", "l_num_paths", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid path generation strategy.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.metrics.PointMetric.compute": [[115, 128], ["isinstance", "maybe_iterable.", "metrics.PointMetric._sync_compute", "metrics.PointMetric._thread_pool_compute", "isinstance", "TypeError"], "methods", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.metrics.PointMetric._sync_compute", "home.repos.pwc.inspect_result.magamba_linear-regions.core.metrics.PointMetric._thread_pool_compute"], ["", "", "def", "compute", "(", "self", ",", "model", ",", "data_source", ")", ":", "\n", "# if it's not iterable, then we assume it's a callable, and when given the", "\n", "# model, it can construct an iterable.", "\n", "        ", "maybe_iterable", "=", "self", ".", "data_sources", "[", "data_source", "]", "\n", "if", "not", "isinstance", "(", "maybe_iterable", ",", "Iterable", ")", ":", "\n", "            ", "maybe_iterable", "=", "maybe_iterable", "(", "model", ")", "\n", "if", "not", "isinstance", "(", "maybe_iterable", ",", "Iterable", ")", ":", "\n", "                ", "raise", "TypeError", "(", "\"Tried to create iterable but still is not iterable\"", ")", "\n", "\n", "", "", "if", "self", ".", "_workers", "<=", "1", ":", "\n", "            ", "self", ".", "_sync_compute", "(", "model", ",", "maybe_iterable", ",", "data_source", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_thread_pool_compute", "(", "model", ",", "maybe_iterable", ",", "data_source", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.metrics.PointMetric._do_compute": [[129, 149], ["range", "args[].to", "data.to.to.to", "labels.to.to.to", "metrics.PointMetric.compute_one", "gpu_locks[].release", "len", "gpu_locks[].acquire", "Exception"], "methods", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.metrics.LineMetric.compute_one"], ["", "", "def", "_do_compute", "(", "self", ",", "args", ")", ":", "\n", "        ", "\"\"\" Parallel function\n        \"\"\"", "\n", "rank", "=", "-", "1", "\n", "for", "idx", "in", "range", "(", "len", "(", "gpu_locks", ")", ")", ":", "\n", "            ", "if", "gpu_locks", "[", "idx", "]", ".", "acquire", "(", "block", "=", "False", ")", ":", "\n", "                ", "rank", "=", "idx", "\n", "break", "\n", "", "", "if", "rank", "==", "-", "1", ":", "\n", "            ", "raise", "Exception", "(", "\"Unable to acquire GPU lock\"", ")", "\n", "\n", "", "p_model", "=", "args", "[", "0", "]", ".", "to", "(", "rank", ",", "non_blocking", "=", "True", ")", "\n", "data", ",", "labels", ",", "data_indices", "=", "args", "[", "3", "]", "\n", "data", "=", "data", ".", "to", "(", "rank", ",", "non_blocking", "=", "True", ")", "\n", "labels", "=", "labels", ".", "to", "(", "rank", ",", "non_blocking", "=", "True", ")", "\n", "kwargs", "=", "{", "\"rank\"", ":", "rank", "}", "\n", "self", ".", "compute_one", "(", "\n", "p_model", ",", "(", "data", ",", "labels", ",", "data_indices", ")", ",", "args", "[", "2", "]", ",", "seed", "=", "args", "[", "4", "]", ",", "uid", "=", "args", "[", "1", "]", ",", "**", "kwargs", "\n", ")", "\n", "gpu_locks", "[", "rank", "]", ".", "release", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.metrics.PointMetric._sync_compute": [[150, 187], ["torch.get_rng_state", "torch.get_rng_state", "torch.get_rng_state", "torch.get_rng_state", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "iter", "torch.set_rng_state", "torch.set_rng_state", "torch.set_rng_state", "torch.set_rng_state", "logger.info", "model.to", "random.Random", "zip", "int", "range", "data.to.to.to", "labels.to.to.to", "metrics.PointMetric.compute_one", "next", "next", "random.Random.randint", "range"], "methods", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.metrics.LineMetric.compute_one"], ["", "def", "_sync_compute", "(", "self", ",", "model", ",", "data_iterable", ",", "data_source", ")", ":", "\n", "# seeding torch to ensure paths are visited always in the same order", "\n", "        ", "rng_state", "=", "torch", ".", "get_rng_state", "(", ")", "\n", "torch", ".", "manual_seed", "(", "self", ".", "_path_sample_seed", ")", "\n", "\n", "data_iter_iter", "=", "iter", "(", "data_iterable", ")", "\n", "torch", ".", "set_rng_state", "(", "rng_state", ")", "\n", "\n", "logger", ".", "info", "(", "\"Initializing data_loader with seed {} to ensure reproducibility.\"", ".", "format", "(", "self", ".", "_path_sample_seed", ")", ")", "\n", "\n", "if", "self", ".", "_skip_paths", "is", "not", "None", ":", "\n", "            ", "batch_size", "=", "1", "\n", "index", "=", "0", "\n", "while", "index", "<", "self", ".", "_skip_paths", ":", "\n", "                ", "batch", "=", "next", "(", "data_iter_iter", ")", "\n", "batch_size", "=", "batch", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "index", "+=", "batch_size", "\n", "\n", "", "", "model", ".", "to", "(", "self", ".", "_device", ",", "non_blocking", "=", "True", ")", "\n", "\n", "ind_random", "=", "random", ".", "Random", "(", "self", ".", "_path_sample_seed", ")", "\n", "\n", "def", "_infinite_prng_seed", "(", ")", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "yield", "ind_random", ".", "randint", "(", "0", ",", "2", "**", "20", ")", "\n", "\n", "", "", "uid_offset", "=", "int", "(", "self", ".", "_skip_paths", "//", "batch_size", ")", "if", "self", ".", "_skip_paths", "is", "not", "None", "else", "0", "\n", "for", "datum", ",", "uid", "in", "zip", "(", "\n", "[", "next", "(", "data_iter_iter", ")", "for", "i", "in", "range", "(", "self", ".", "_num_paths", ")", "]", ",", "\n", "range", "(", "uid_offset", ",", "self", ".", "_num_paths", "+", "uid_offset", ")", ",", "\n", ")", ":", "\n", "            ", "data", ",", "labels", ",", "data_indices", "=", "datum", "\n", "data", "=", "data", ".", "to", "(", "self", ".", "_device", ",", "non_blocking", "=", "True", ")", "\n", "labels", "=", "labels", ".", "to", "(", "self", ".", "_device", ",", "non_blocking", "=", "True", ")", "\n", "\n", "self", ".", "compute_one", "(", "\n", "model", ",", "(", "data", ",", "labels", ",", "data_indices", ")", ",", "data_source", ",", "uid", "=", "uid", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.metrics.PointMetric._thread_pool_compute": [[190, 258], ["logger.info", "random.Random", "torch.get_rng_state", "torch.get_rng_state", "torch.get_rng_state", "torch.get_rng_state", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "iter", "torch.set_rng_state", "torch.set_rng_state", "torch.set_rng_state", "torch.set_rng_state", "logger.info", "model.cpu.cpu.cpu", "zip", "logger.info", "logger.info", "logger.info", "int", "metrics.PointMetric._thread_pool_compute._infinite_copy"], "methods", ["None"], ["", "", "def", "_thread_pool_compute", "(", "self", ",", "model", ",", "data_iterable", ",", "data_source", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"Creating process pool service\"", ")", "\n", "if", "self", ".", "e_device", "==", "\"cuda\"", ":", "\n", "            ", "logger", ".", "info", "(", "\"CUDA wanted/detected, using torch.multiprocessing\"", ")", "\n", "proc_pool", "=", "torch", ".", "multiprocessing", ".", "Pool", "\n", "lock_cls", "=", "torch", ".", "multiprocessing", ".", "Lock", "\n", "", "else", ":", "\n", "            ", "proc_pool", "=", "MPPool", "\n", "lock_cls", "=", "MPLock", "\n", "\n", "", "def", "_infinite_copy", "(", "to_copy", ",", "deep", "=", "False", ")", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "if", "deep", ":", "\n", "                    ", "cpy", "=", "deepcopy", "(", "to_copy", ")", "\n", "", "else", ":", "\n", "                    ", "cpy", "=", "to_copy", "\n", "", "yield", "cpy", "\n", "\n", "", "", "ind_random", "=", "random", ".", "Random", "(", "self", ".", "_path_sample_seed", ")", "\n", "\n", "def", "_infinite_prng_seed", "(", ")", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "yield", "ind_random", ".", "randint", "(", "0", ",", "2", "**", "20", ")", "\n", "\n", "", "", "def", "_to_cpu", "(", "sample", ",", "label", ",", "indices", ")", ":", "\n", "            ", "return", "sample", ".", "cpu", "(", ")", ".", "share_memory_", "(", ")", ",", "label", ".", "cpu", "(", ")", ".", "share_memory_", "(", ")", ",", "indices", ".", "cpu", "(", ")", ".", "share_memory_", "(", ")", "\n", "\n", "# seeding torch to ensure paths are visited always in the same order", "\n", "", "rng_state", "=", "torch", ".", "get_rng_state", "(", ")", "\n", "torch", ".", "manual_seed", "(", "self", ".", "_path_sample_seed", ")", "\n", "\n", "data_iter_iter", "=", "iter", "(", "data_iterable", ")", "\n", "torch", ".", "set_rng_state", "(", "rng_state", ")", "\n", "\n", "logger", ".", "info", "(", "\"Initializing data_loader with seed {} to ensure reproducibility.\"", ".", "format", "(", "self", ".", "_path_sample_seed", ")", ")", "\n", "\n", "if", "self", ".", "_skip_paths", "is", "not", "None", ":", "\n", "            ", "batch_size", "=", "1", "\n", "index", "=", "0", "\n", "while", "index", "<", "self", ".", "_skip_paths", ":", "\n", "                ", "batch", "=", "next", "(", "data_iter_iter", ")", "\n", "batch_size", "=", "batch", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "index", "+=", "batch_size", "\n", "\n", "", "", "model", "=", "model", ".", "cpu", "(", ")", "\n", "\n", "uid_offset", "=", "int", "(", "self", ".", "_skip_paths", "//", "batch_size", ")", "if", "self", ".", "_skip_paths", "is", "not", "None", "else", "0", "\n", "model_and_data_iterable", "=", "zip", "(", "\n", "_infinite_copy", "(", "model", ",", "deep", "=", "True", ")", ",", "\n", "range", "(", "uid_offset", ",", "self", ".", "_num_paths", "+", "uid_offset", ")", ",", "\n", "_infinite_copy", "(", "data_source", ")", ",", "\n", "[", "_to_cpu", "(", "*", "next", "(", "data_iter_iter", ")", ")", "for", "i", "in", "range", "(", "self", ".", "_num_paths", ")", "]", ",", "\n", "_infinite_prng_seed", "(", ")", ",", "\n", ")", "\n", "logger", ".", "info", "(", "\"Starting proc pool\"", ")", "\n", "locks", "=", "[", "lock_cls", "(", ")", "for", "_", "in", "range", "(", "self", ".", "_workers", ")", "]", "\n", "with", "proc_pool", "(", "\n", "self", ".", "_workers", ",", "initializer", "=", "_init_pool", ",", "initargs", "=", "(", "locks", ",", ")", "\n", ")", "as", "executor", ":", "\n", "            ", "logger", ".", "info", "(", "\"Submitting to proc pool\"", ")", "\n", "executor", ".", "imap", "(", "\n", "self", ".", "_do_compute", ",", "\n", "model_and_data_iterable", ",", "\n", ")", "\n", "\n", "executor", ".", "close", "(", ")", "\n", "executor", ".", "join", "(", ")", "\n", "", "logger", ".", "info", "(", "\"Thread pool service exiting\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.metrics.PointMetric.compute_one": [[259, 262], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "compute_one", "(", "self", ",", "model", ",", "datum", ",", "data_source", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Compute the metric here\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.metrics.LineMetric._init_opts": [[271, 304], ["core.utils.all_log_dir", "metrics.PointMetric._init_opts", "metrics.LineMetric.data_sources.keys", "len", "logger.info"], "methods", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.utils.all_log_dir", "home.repos.pwc.inspect_result.magamba_linear-regions.core.metrics.LineCounts._init_opts"], ["    ", "def", "_init_opts", "(", "self", ",", "opts", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_device", "=", "opts", ".", "e_device", "\n", "self", ".", "_save_dir", "=", "all_log_dir", "(", "opts", ")", "\n", "self", ".", "_split", "=", "None", "\n", "self", ".", "_buff_size", "=", "opts", ".", "l_buff_size", "\n", "if", "opts", ".", "l_load_checkpoints", "is", "not", "None", ":", "\n", "            ", "self", ".", "_checkpoint", "=", "opts", ".", "l_load_checkpoints", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "_checkpoint", "=", "None", "\n", "", "super", "(", ")", ".", "_init_opts", "(", "opts", ",", "**", "kwargs", ")", "\n", "self", ".", "_batch_size", "=", "opts", ".", "batch_size", "\n", "rescale_num_paths_by_batch_size", "=", "True", "\n", "for", "gen_strategy", "in", "self", ".", "data_sources", ".", "keys", "(", ")", ":", "\n", "            ", "split", "=", "gen_strategy", "\n", "self", ".", "_split", "=", "split", "\n", "avail_points", "=", "len", "(", "self", ".", "data_sources", "[", "gen_strategy", "]", ")", "*", "opts", ".", "batch_size", "\n", "assert", "self", ".", "_num_paths", "<=", "avail_points", ",", "\"Error:\"", "+", "\"requested {} paths, but the {} split of dataset contains only {} points.\"", ".", "format", "(", "\n", "self", ".", "_num_paths", ",", "\n", "split", ",", "\n", "avail_points", "\n", ")", "\n", "assert", "(", "self", ".", "_num_paths", "%", "opts", ".", "batch_size", "==", "0", ")", ",", "\"Error: BATCH_SIZE: {} must divide L_NUM_PATHS: {}\"", ".", "format", "(", "opts", ".", "batch_size", ",", "self", ".", "_num_paths", ")", "\n", "if", "rescale_num_paths_by_batch_size", ":", "\n", "                ", "self", ".", "_num_paths", "//=", "opts", ".", "batch_size", "\n", "self", ".", "_batch_size", "*=", "opts", ".", "l_num_anchors", "\n", "rescale_num_paths_by_batch_size", "=", "False", "\n", "logger", ".", "info", "(", "\n", "\"Path-based counting on {} batches of size {} for the {} split. Effective batch size is {}\"", ".", "format", "(", "\n", "self", ".", "_num_paths", ",", "\n", "opts", ".", "batch_size", ",", "\n", "split", ",", "\n", "self", ".", "_batch_size", "*", "2", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.metrics.LineMetric.compute_one": [[307, 333], ["kwargs.pop", "torch.set_default_dtype", "torch.set_default_dtype", "torch.set_default_dtype", "torch.set_default_dtype", "isinstance", "metrics.convert_maybe_model_to_countable", "metrics.LineMetric.closed_path_compute", "os.path.join", "logger.info", "open", "json.dump", "str"], "methods", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.metrics.convert_maybe_model_to_countable", "home.repos.pwc.inspect_result.magamba_linear-regions.core.metrics.LineCounts.closed_path_compute"], ["", "", "", "def", "compute_one", "(", "self", ",", "model", ",", "datum", ",", "data_key", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "dev", "=", "\"cpu\"", "if", "self", ".", "_device", "==", "\"cpu\"", "else", "\"cuda:0\"", "\n", "device", "=", "kwargs", ".", "pop", "(", "\"rank\"", ",", "dev", ")", "\n", "torch", ".", "set_default_dtype", "(", "torch", ".", "float64", ")", "\n", "real_data", "=", "datum", "\n", "if", "isinstance", "(", "datum", ",", "tuple", ")", ":", "\n", "            ", "real_data", ",", "labels", ",", "data_indices", "=", "datum", "\n", "", "countable_obj", "=", "convert_maybe_model_to_countable", "(", "\n", "model", ",", "\n", "real_data", "[", "0", "]", "[", "0", "]", ".", "shape", ",", "\n", "device", "=", "device", ",", "\n", "batch_size", "=", "self", ".", "_batch_size", ",", "\n", "buff_size", "=", "self", ".", "_buff_size", "\n", ")", "\n", "self", ".", "_device", "=", "device", "\n", "stats", "=", "self", ".", "closed_path_compute", "(", "countable_obj", ",", "datum", ")", "\n", "fname", "=", "'path-counting'", "\n", "fname", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_save_dir", ",", "fname", ")", "\n", "if", "self", ".", "_split", "is", "not", "None", ":", "\n", "            ", "fname", "+=", "'-'", "+", "str", "(", "self", ".", "_split", ")", "\n", "", "if", "self", ".", "_checkpoint", "is", "not", "None", ":", "\n", "            ", "fname", "=", "\"{}-checkpoint-{}\"", ".", "format", "(", "fname", ",", "self", ".", "_checkpoint", ")", "\n", "", "fname", "=", "\"{}-id-{}.json\"", ".", "format", "(", "fname", ",", "kwargs", "[", "\"uid\"", "]", ")", "\n", "logger", ".", "info", "(", "\"Saving results to {}\"", ".", "format", "(", "fname", ")", ")", "\n", "with", "open", "(", "fname", ",", "\"w\"", ")", "as", "intermediate_result_file", ":", "\n", "            ", "json", ".", "dump", "(", "stats", ",", "intermediate_result_file", ",", "allow_nan", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.metrics.LineMetric.closed_path_compute": [[334, 337], ["None"], "methods", ["None"], ["", "", "@", "abc", ".", "abstractmethod", "\n", "def", "closed_path_compute", "(", "self", ",", "countable_obj", ",", "data", ")", ":", "\n", "        ", "\"\"\"\"data is a list of lists. The last list level is a single path\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.metrics.LineCounts._init_opts": [[341, 343], ["metrics.LineMetric._init_opts"], "methods", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.metrics.LineCounts._init_opts"], ["    ", "def", "_init_opts", "(", "self", ",", "opts", ")", ":", "\n", "        ", "super", "(", ")", ".", "_init_opts", "(", "opts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.metrics.LineCounts.name": [[344, 346], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "Metrics", ".", "LINE_COUNTS", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.metrics.LineCounts.closed_path_compute": [[347, 396], ["logger.info", "paths.reshape", "paths.reshape.roll", "countable_obj.count", "range", "isinstance", "len", "int", "density[].item", "logits[].reshape().tolist", "pts[].reshape().tolist", "tot_vars[].reshape().tolist", "variation_interpolated[].tolist", "abs_deviation[].reshape().tolist", "countable_obj.remove_all_handles", "tuple", "range", "labels[].to().item", "data_indices[].to().item", "range", "logits[].reshape", "pts[].reshape", "tot_vars[].reshape", "abs_deviation[].reshape", "labels[].to", "data_indices[].to"], "methods", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.counting.Countable.count", "home.repos.pwc.inspect_result.magamba_linear-regions.core.module_counter.ModuleCounter.remove_all_handles"], ["", "def", "closed_path_compute", "(", "self", ",", "countable_obj", ",", "data", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"Computing statistics over closed paths\"", ")", "\n", "paths", ",", "labels", ",", "data_indices", "=", "data", "\n", "\n", "local_batch_size", ",", "num_anchors", "=", "paths", ".", "shape", "[", ":", "2", "]", "\n", "from_pts", "=", "paths", ".", "reshape", "(", "\n", "(", "local_batch_size", "*", "num_anchors", ",", ")", "+", "tuple", "(", "paths", ".", "shape", "[", "2", ":", "]", ")", "\n", ")", "\n", "to_pts", "=", "from_pts", ".", "roll", "(", "shifts", "=", "-", "1", ",", "dims", "=", "0", ")", "\n", "\n", "pts", ",", "logits", ",", "density", ",", "tot_vars", ",", "abs_deviation", ",", "variation_interpolated", "=", "countable_obj", ".", "count", "(", "\n", "from_pts", ",", "\n", "to_pts", ",", "\n", "device", "=", "self", ".", "_device", ",", "\n", ")", "\n", "\n", "results", "=", "[", "\n", "{", "\n", "k", ":", "{", "\n", "\"density\"", ":", "0", ",", "\n", "\"logits\"", ":", "[", "]", ",", "\n", "\"points\"", ":", "[", "]", ",", "\n", "\"variation\"", ":", "[", "]", ",", "\n", "\"variation_interpolated\"", ":", "[", "]", ",", "\n", "\"absolute_deviation\"", ":", "[", "]", ",", "\n", "}", "for", "k", "in", "range", "(", "num_anchors", ")", "\n", "}", "for", "_", "in", "range", "(", "local_batch_size", ")", "\n", "]", "\n", "\n", "nclasses", "=", "logits", ".", "shape", "[", "1", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "logits", ")", ")", ":", "# batch size", "\n", "            ", "l", "=", "int", "(", "i", "//", "num_anchors", ")", "# batch_idx", "\n", "k", "=", "i", "%", "num_anchors", "# line_idx", "\n", "\n", "# trim buffers, convert to nested lists", "\n", "results", "[", "l", "]", "[", "k", "]", "[", "\"density\"", "]", "=", "density", "[", "i", "]", ".", "item", "(", ")", "\n", "results", "[", "l", "]", "[", "k", "]", "[", "\"logits\"", "]", "=", "logits", "[", "i", ",", ":", ",", ":", "density", "[", "i", "]", ",", ":", "]", ".", "reshape", "(", "nclasses", ",", "-", "1", ",", "2", ")", ".", "tolist", "(", ")", "\n", "results", "[", "l", "]", "[", "k", "]", "[", "\"points\"", "]", "=", "pts", "[", "i", ",", ":", "density", "[", "i", "]", ",", ":", "]", ".", "reshape", "(", "-", "1", ",", "2", ")", ".", "tolist", "(", ")", "\n", "results", "[", "l", "]", "[", "k", "]", "[", "\"variation\"", "]", "=", "tot_vars", "[", "i", ",", ":", ",", ":", "density", "[", "i", "]", "]", ".", "reshape", "(", "nclasses", ",", "-", "1", ")", ".", "tolist", "(", ")", "\n", "results", "[", "l", "]", "[", "k", "]", "[", "\"variation_interpolated\"", "]", "=", "variation_interpolated", "[", "i", "]", ".", "tolist", "(", ")", "\n", "results", "[", "l", "]", "[", "k", "]", "[", "\"absolute_deviation\"", "]", "=", "abs_deviation", "[", "i", ",", ":", ",", ":", "density", "[", "i", "]", "]", ".", "reshape", "(", "nclasses", ",", "-", "1", ")", ".", "tolist", "(", ")", "\n", "\n", "if", "k", "==", "0", ":", "\n", "                ", "results", "[", "l", "]", "[", "\"label\"", "]", "=", "labels", "[", "l", "]", ".", "to", "(", "\"cpu\"", ",", "non_blocking", "=", "True", ")", ".", "item", "(", ")", "\n", "results", "[", "l", "]", "[", "\"item_idx\"", "]", "=", "data_indices", "[", "l", "]", ".", "to", "(", "\"cpu\"", ",", "non_blocking", "=", "True", ")", ".", "item", "(", ")", "\n", "\n", "", "", "if", "isinstance", "(", "countable_obj", ",", "ModuleCounter", ")", ":", "\n", "            ", "countable_obj", ".", "remove_all_handles", "(", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.metrics._init_pool": [[23, 26], ["None"], "function", ["None"], ["def", "_init_pool", "(", "inner_locks", ")", ":", "\n", "    ", "global", "gpu_locks", "\n", "gpu_locks", "=", "inner_locks", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.metrics.convert_maybe_model_to_countable": [[264, 268], ["core.module_counter.ModuleCounter", "isinstance", "isinstance"], "function", ["None"], ["", "", "def", "convert_maybe_model_to_countable", "(", "maybe_model", ",", "shape", ",", "batch_size", ",", "buff_size", "=", "None", ",", "device", "=", "\"cpu\"", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "maybe_model", ",", "counting", ".", "Countable", ")", "or", "not", "isinstance", "(", "maybe_model", ",", "ModuleCounter", ")", ":", "\n", "        ", "return", "ModuleCounter", "(", "maybe_model", ",", "input_shape", "=", "shape", ",", "device", "=", "device", ",", "batch_size", "=", "batch_size", ",", "buff_size", "=", "buff_size", ")", "\n", "", "return", "maybe_model", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.metrics.create_metric": [[407, 410], ["metric_factory"], "function", ["None"], ["def", "create_metric", "(", "metric_name", ",", "data_sources", ",", "opts", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "metric_factory", "=", "METRICS", "[", "metric_name", "]", "\n", "return", "metric_factory", "(", "data_sources", ",", "opts", "=", "opts", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.data.PathTransform.__init__": [[69, 86], ["torch.Size", "numpy.linspace"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "input_shape", ",", "mean", "=", "None", ",", "std", "=", "None", ",", "num_anchor", "=", "10", ",", "radius", "=", "4", ")", ":", "\n", "        ", "\"\"\"Set up path generation\n        @param input_shape: tuple shape input images (C, H, W)\n        @param mean: list list of per-channel means\n        @param std: list of per-channel stds\n        @param num_anchor: int number of anchor points to be generated for each path\n        @param radius: float radius of the rotation used to generate the anchor points\n        Note: the affine translation used on PIL images by default aligns the translation\n              to the nearest pixel\n        \"\"\"", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "self", ".", "normalize", "=", "mean", "is", "not", "None", "and", "std", "is", "not", "None", "\n", "self", ".", "num_anchor", "=", "num_anchor", "\n", "self", ".", "radius", "=", "radius", "\n", "self", ".", "output_shape", "=", "torch", ".", "Size", "(", "[", "num_anchor", "]", "+", "[", "_", "for", "_", "in", "input_shape", "]", ")", "\n", "self", ".", "ts", "=", "np", ".", "linspace", "(", "0", ",", "2", "*", "np", ".", "pi", ",", "num_anchor", ",", "endpoint", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.data.PathTransform.__call__": [[87, 112], ["torch.zeros", "torchvision.transforms.functional.pad", "enumerate", "core.utils.normalize.type", "torchvision.transforms.functional.affine", "torchvision.transforms.functional.center_crop", "torchvision.transforms.functional.to_tensor", "core.utils.normalize", "list", "numpy.cos", "numpy.sin"], "methods", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.utils.normalize"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        @param x: PIL Image to be transformed\n        @return torch.Tensor : of shape [K, C, H, W], where K=@self.num_points\n                               is the number of anchor points in each path\n        \"\"\"", "\n", "output", "=", "torch", ".", "zeros", "(", "self", ".", "output_shape", ")", "\n", "x", "=", "tx", ".", "functional", ".", "pad", "(", "x", ",", "padding", "=", "2", "*", "self", ".", "radius", ",", "padding_mode", "=", "\"edge\"", ")", "\n", "\n", "for", "k", ",", "t", "in", "enumerate", "(", "self", ".", "ts", ")", ":", "\n", "            ", "translated_x", "=", "tx", ".", "functional", ".", "affine", "(", "\n", "x", ",", "\n", "angle", "=", "0", ",", "\n", "translate", "=", "(", "self", ".", "radius", "*", "np", ".", "cos", "(", "t", ")", ",", "self", ".", "radius", "*", "np", ".", "sin", "(", "t", ")", ")", ",", "\n", "scale", "=", "1", ",", "\n", "shear", "=", "0", ",", "\n", ")", "\n", "translated_x", "=", "tx", ".", "functional", ".", "center_crop", "(", "\n", "translated_x", ",", "output_size", "=", "list", "(", "self", ".", "output_shape", "[", "2", ":", "]", ")", "\n", ")", "\n", "output", "[", "k", "]", "=", "tx", ".", "functional", ".", "to_tensor", "(", "translated_x", ")", "\n", "\n", "if", "self", ".", "normalize", ":", "\n", "                ", "output", "=", "utils", ".", "normalize", "(", "output", ",", "mean", "=", "self", ".", "mean", ",", "std", "=", "self", ".", "std", ")", "\n", "", "", "return", "output", ".", "type", "(", "torch", ".", "float64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.data.PathTransformOpen.__init__": [[116, 125], ["data.PathTransform.__init__", "numpy.linspace"], "methods", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.counting.ActivationRegion.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_shape", ",", "mean", "=", "None", ",", "std", "=", "None", ",", "num_anchor", "=", "10", ",", "radius", "=", "4", ")", ":", "\n", "        ", "super", "(", "PathTransformOpen", ",", "self", ")", ".", "__init__", "(", "\n", "input_shape", "=", "input_shape", ",", "\n", "mean", "=", "mean", ",", "\n", "std", "=", "std", ",", "\n", "num_anchor", "=", "num_anchor", ",", "\n", "radius", "=", "radius", "\n", ")", "\n", "self", ".", "ts", "=", "np", ".", "linspace", "(", "0", ",", "1", ",", "num_anchor", ",", "endpoint", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.data.PathTransformOpen.__call__": [[126, 152], ["torch.zeros", "torchvision.transforms.functional.pad", "enumerate", "core.utils.normalize.type", "torchvision.transforms.functional.affine", "torchvision.transforms.functional.center_crop", "torchvision.transforms.functional.to_tensor", "get_default_dtype", "core.utils.normalize", "list", "numpy.sin"], "methods", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.utils.normalize"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        @param x: PIL Image to be transformed\n        @return torch.Tensor : of shape [K, C, H, W], where K=@self.num_points\n                               is the number of anchor points in each path\n        \"\"\"", "\n", "output", "=", "torch", ".", "zeros", "(", "self", ".", "output_shape", ")", "\n", "x", "=", "tx", ".", "functional", ".", "pad", "(", "x", ",", "padding", "=", "2", "*", "self", ".", "radius", ",", "padding_mode", "=", "\"edge\"", ")", "\n", "\n", "for", "k", ",", "t", "in", "enumerate", "(", "self", ".", "ts", ")", ":", "\n", "            ", "s", "=", "0.5", "*", "np", ".", "pi", "*", "t", "+", "(", "1.", "-", "t", ")", "*", "1.5", "*", "np", ".", "pi", "\n", "translated_x", "=", "tx", ".", "functional", ".", "affine", "(", "\n", "x", ",", "\n", "angle", "=", "0", ",", "\n", "translate", "=", "(", "self", ".", "output_shape", "[", "-", "1", "]", "/", "self", ".", "num_anchor", ",", "self", ".", "radius", "*", "np", ".", "sin", "(", "s", ")", ")", ",", "\n", "scale", "=", "1", ",", "\n", "shear", "=", "0", ",", "\n", ")", "\n", "translated_x", "=", "tx", ".", "functional", ".", "center_crop", "(", "\n", "translated_x", ",", "output_size", "=", "list", "(", "self", ".", "output_shape", "[", "2", ":", "]", ")", "\n", ")", "\n", "output", "[", "k", "]", "=", "tx", ".", "functional", ".", "to_tensor", "(", "translated_x", ")", "\n", "\n", "if", "self", ".", "normalize", ":", "\n", "                ", "output", "=", "utils", ".", "normalize", "(", "output", ",", "mean", "=", "self", ".", "mean", ",", "std", "=", "self", ".", "std", ")", "\n", "", "", "return", "output", ".", "type", "(", "get_default_dtype", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.data.with_indices": [[27, 37], ["type", "datasetclass.__getitem__"], "function", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.random_dataset.RandomDataset.__getitem__"], ["def", "with_indices", "(", "datasetclass", ")", ":", "\n", "    ", "\"\"\"\n        Wraps a DataSet class, so that it returns (data, target, index).\n    \"\"\"", "\n", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "data", ",", "target", "=", "datasetclass", ".", "__getitem__", "(", "self", ",", "index", ")", "\n", "return", "data", ",", "target", ",", "index", "\n", "\n", "", "return", "type", "(", "datasetclass", ".", "__name__", ",", "(", "datasetclass", ",", ")", ",", "{", "\n", "'__getitem__'", ":", "__getitem__", ",", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.data.corrupt_labels": [[154, 192], ["default_rng", "int", "isinstance", "torch.zeros_like", "torch.from_numpy", "isinstance", "round", "dset.dataset.targets.copy", "isinstance", "dset.targets.copy", "isinstance", "torch.from_numpy", "default_rng.permutation", "isinstance", "torch.tensor", "torch.tensor", "torch.tensor.unique", "default_rng.integers", "enumerate", "len", "all_noisy_targets.tolist"], "function", ["None"], ["", "", "def", "corrupt_labels", "(", "dset", ",", "noise_percent", ",", "seed", "=", "None", ")", ":", "\n", "    ", "from", "numpy", ".", "random", "import", "default_rng", "\n", "rng", "=", "default_rng", "(", "seed", ")", "\n", "num_labels_to_corrupt", "=", "int", "(", "round", "(", "len", "(", "dset", ")", "*", "noise_percent", ")", ")", "\n", "if", "num_labels_to_corrupt", "==", "0", ":", "\n", "        ", "return", "\n", "", "if", "isinstance", "(", "dset", ",", "Subset", ")", ":", "\n", "        ", "all_targets", "=", "dset", ".", "dataset", ".", "targets", "\n", "dset", ".", "dataset", ".", "_targets_orig", "=", "dset", ".", "dataset", ".", "targets", ".", "copy", "(", ")", "\n", "if", "isinstance", "(", "all_targets", ",", "list", ")", ":", "\n", "            ", "all_targets", "=", "torch", ".", "tensor", "(", "all_targets", ")", "\n", "", "targets", "=", "all_targets", "[", "dset", ".", "indices", "]", "\n", "", "else", ":", "\n", "        ", "targets", "=", "dset", ".", "targets", "\n", "dset", ".", "_targets_orig", "=", "dset", ".", "targets", ".", "copy", "(", ")", "\n", "if", "isinstance", "(", "targets", ",", "list", ")", ":", "\n", "            ", "targets", "=", "torch", ".", "tensor", "(", "targets", ")", "\n", "\n", "", "", "num_classes", "=", "targets", ".", "unique", "(", ")", ".", "shape", "[", "0", "]", "\n", "\n", "noise", "=", "torch", ".", "zeros_like", "(", "targets", ")", "\n", "if", "num_classes", "==", "2", ":", "\n", "        ", "noise", "[", "0", ":", "num_labels_to_corrupt", "]", "=", "1", "\n", "", "else", ":", "\n", "        ", "noise", "[", "0", ":", "num_labels_to_corrupt", "]", "=", "torch", ".", "from_numpy", "(", "\n", "rng", ".", "integers", "(", "1", ",", "num_classes", ",", "(", "num_labels_to_corrupt", ",", ")", ")", "\n", ")", "\n", "", "shuffle", "=", "torch", ".", "from_numpy", "(", "rng", ".", "permutation", "(", "noise", ".", "shape", "[", "0", "]", ")", ")", "\n", "noise", "=", "noise", "[", "shuffle", "]", "\n", "if", "isinstance", "(", "dset", ",", "Subset", ")", ":", "\n", "        ", "all_noisy_targets", "=", "(", "targets", "+", "noise", ")", "%", "num_classes", "\n", "if", "isinstance", "(", "dset", ".", "dataset", ".", "targets", ",", "list", ")", ":", "\n", "            ", "for", "idx", ",", "noisy_label", "in", "enumerate", "(", "all_noisy_targets", ".", "tolist", "(", ")", ")", ":", "\n", "                ", "dset", ".", "dataset", ".", "targets", "[", "dset", ".", "indices", "[", "idx", "]", "]", "=", "noisy_label", "\n", "", "", "else", ":", "\n", "            ", "dset", ".", "dataset", ".", "targets", "[", "dset", ".", "indices", "]", "=", "all_noisy_targets", "\n", "", "", "else", ":", "\n", "        ", "dset", ".", "targets", "=", "(", "targets", "+", "noise", ")", "%", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.data._create_transforms": [[194, 208], ["kwargs.pop", "kwargs.pop", "transform_funcs.append", "torchvision.transforms.Compose", "transform_funcs.append", "transform_funcs.append", "torchvision.transforms.ToTensor", "transform_funcs.append", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.Normalize"], "function", ["None"], ["", "", "def", "_create_transforms", "(", "normalize", ",", "mean", ",", "std", ",", "**", "kwargs", ")", ":", "\n", "    ", "crop_size", "=", "kwargs", ".", "pop", "(", "\"crop_size\"", ",", "0", ")", "\n", "hflip", "=", "kwargs", ".", "pop", "(", "\"hflip\"", ",", "False", ")", "\n", "\n", "transform_funcs", "=", "[", "]", "\n", "if", "crop_size", ">", "0", ":", "\n", "        ", "transform_funcs", ".", "append", "(", "tx", ".", "RandomCrop", "(", "crop_size", ",", "padding", "=", "4", ")", ")", "\n", "", "if", "hflip", ":", "\n", "        ", "transform_funcs", ".", "append", "(", "tx", ".", "RandomHorizontalFlip", "(", ")", ")", "\n", "\n", "", "transform_funcs", ".", "append", "(", "tx", ".", "ToTensor", "(", ")", ")", "\n", "if", "normalize", ":", "\n", "        ", "transform_funcs", ".", "append", "(", "tx", ".", "Normalize", "(", "mean", ",", "std", ")", ")", "\n", "", "return", "tx", ".", "Compose", "(", "transform_funcs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.data.create_dataset": [[210, 316], ["ValueError", "with_indices.", "numpy.random.default_rng", "np.random.default_rng.permutation", "int", "torch.utils.data.Subset", "override_dset_class", "PathTransformCls", "data.with_indices", "with_indices.", "len", "data._create_transforms", "data._create_transforms", "override_dset_class", "PathTransformCls", "data.with_indices", "len", "torch.from_numpy", "torch.from_numpy", "data._create_transforms", "data._create_transforms", "str", "str"], "function", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.data.with_indices", "home.repos.pwc.inspect_result.magamba_linear-regions.core.data._create_transforms", "home.repos.pwc.inspect_result.magamba_linear-regions.core.data._create_transforms", "home.repos.pwc.inspect_result.magamba_linear-regions.core.data.with_indices", "home.repos.pwc.inspect_result.magamba_linear-regions.core.data._create_transforms", "home.repos.pwc.inspect_result.magamba_linear-regions.core.data._create_transforms"], ["", "def", "create_dataset", "(", "\n", "args", ",", "\n", "train", "=", "True", ",", "\n", "normalize", "=", "False", ",", "\n", "augment", "=", "False", ",", "\n", "subset_pct", "=", "None", ",", "\n", "gen_paths", "=", "False", ",", "\n", "validation", "=", "False", ",", "\n", "override_dset_class", "=", "None", "\n", ")", ":", "\n", "    ", "if", "args", ".", "data", "not", "in", "DATASETS", ":", "\n", "        ", "raise", "ValueError", "(", "\"{} is not a valid dataset\"", ".", "format", "(", "args", ".", "data", ")", ")", "\n", "\n", "", "dset", "=", "None", "\n", "if", "args", ".", "data", "==", "Datasets", ".", "cifar10", ":", "\n", "        ", "if", "args", ".", "l_random_dataset", ":", "\n", "            ", "dclass", "=", "RANDOM_DATASETS_MAP", "[", "\"random_\"", "+", "str", "(", "args", ".", "data", ")", "]", "\n", "", "else", ":", "\n", "            ", "CIFAR10", "=", "torch_dsets", ".", "CIFAR10", "\n", "\n", "", "if", "override_dset_class", "is", "not", "None", ":", "\n", "            ", "CIFAR10", "=", "override_dset_class", "(", "dclass", ")", "\n", "", "else", ":", "\n", "            ", "CIFAR10", "=", "dclass", "\n", "\n", "", "if", "gen_paths", ":", "\n", "            ", "if", "args", ".", "l_open_path", ":", "\n", "                ", "PathTransformCls", "=", "PathTransformOpen", "\n", "", "else", ":", "\n", "                ", "PathTransformCls", "=", "PathTransform", "\n", "", "transforms", "=", "PathTransformCls", "(", "\n", "DatasetInfos", ".", "cifar10", ".", "input_shape", ",", "\n", "mean", "=", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", "if", "normalize", "else", "None", ",", "\n", "std", "=", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", "if", "normalize", "else", "None", ",", "\n", "num_anchor", "=", "args", ".", "l_num_anchors", ",", "\n", "radius", "=", "args", ".", "l_closed_path_radius", ",", "\n", ")", "\n", "CIFAR10", "=", "with_indices", "(", "CIFAR10", ")", "\n", "", "elif", "train", "and", "augment", ":", "\n", "            ", "transforms", "=", "_create_transforms", "(", "\n", "normalize", "=", "normalize", ",", "\n", "mean", "=", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "\n", "std", "=", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ",", "\n", "crop_size", "=", "32", ",", "\n", "hflip", "=", "True", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "transforms", "=", "_create_transforms", "(", "\n", "normalize", ",", "\n", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "\n", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ",", "\n", ")", "\n", "", "dset", "=", "CIFAR10", "(", "\n", "args", ".", "e_data_dir", ",", "transform", "=", "transforms", ",", "train", "=", "train", ",", "download", "=", "False", "\n", ")", "\n", "", "elif", "args", ".", "data", "==", "Datasets", ".", "cifar100", ":", "\n", "        ", "if", "args", ".", "l_random_dataset", ":", "\n", "            ", "dclass", "=", "RANDOM_DATASETS_MAP", "[", "\"random_\"", "+", "str", "(", "args", ".", "data", ")", "]", "\n", "", "else", ":", "\n", "            ", "CIFAR100", "=", "torch_dsets", ".", "CIFAR100", "\n", "\n", "", "if", "override_dset_class", "is", "not", "None", ":", "\n", "            ", "CIFAR100", "=", "override_dset_class", "(", "dclass", ")", "\n", "", "else", ":", "\n", "            ", "CIFAR100", "=", "dclass", "\n", "\n", "", "if", "gen_paths", ":", "\n", "            ", "if", "args", ".", "l_open_path", ":", "\n", "                ", "PathTransformCls", "=", "PathTransformOpen", "\n", "", "else", ":", "\n", "                ", "PathTransformCls", "=", "PathTransform", "\n", "", "transforms", "=", "PathTransformCls", "(", "\n", "DatasetInfos", ".", "cifar100", ".", "input_shape", ",", "\n", "mean", "=", "(", "0.5071", ",", "0.4865", ",", "0.4409", ")", "if", "normalize", "else", "None", ",", "\n", "std", "=", "(", "0.2009", ",", "0.1984", ",", "0.2023", ")", "if", "normalize", "else", "None", ",", "\n", "num_anchor", "=", "args", ".", "l_num_anchors", ",", "\n", "radius", "=", "args", ".", "l_closed_path_radius", ",", "\n", ")", "\n", "CIFAR100", "=", "with_indices", "(", "CIFAR100", ")", "\n", "", "elif", "train", "and", "augment", ":", "\n", "            ", "transforms", "=", "_create_transforms", "(", "\n", "normalize", "=", "normalize", ",", "\n", "mean", "=", "(", "0.5071", ",", "0.4865", ",", "0.4409", ")", ",", "\n", "std", "=", "(", "0.2009", ",", "0.1984", ",", "0.2023", ")", ",", "\n", "crop_size", "=", "32", ",", "\n", "hflip", "=", "True", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "transforms", "=", "_create_transforms", "(", "\n", "normalize", ",", "\n", "(", "0.5071", ",", "0.4865", ",", "0.4409", ")", ",", "\n", "(", "0.2009", ",", "0.1984", ",", "0.2023", ")", ",", "\n", ")", "\n", "", "dset", "=", "CIFAR100", "(", "\n", "args", ".", "e_data_dir", ",", "transform", "=", "transforms", ",", "train", "=", "train", ",", "download", "=", "False", "\n", ")", "\n", "", "if", "subset_pct", "is", "not", "None", "and", "1", ">", "subset_pct", ">", "0", ":", "\n", "        ", "rng", "=", "np", ".", "random", ".", "default_rng", "(", "args", ".", "data_split_seed", ")", "\n", "shuffle", "=", "rng", ".", "permutation", "(", "len", "(", "dset", ")", ")", "\n", "split_index", "=", "int", "(", "subset_pct", "*", "len", "(", "dset", ")", ")", "\n", "if", "validation", ":", "\n", "            ", "rand_indices", "=", "torch", ".", "from_numpy", "(", "shuffle", ")", "[", "split_index", ":", "]", "\n", "", "else", ":", "\n", "            ", "rand_indices", "=", "torch", ".", "from_numpy", "(", "shuffle", ")", "[", ":", "split_index", "]", "\n", "", "dset", "=", "Subset", "(", "dset", ",", "rand_indices", ")", "\n", "", "return", "dset", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.data.create_data_manager": [[328, 427], ["data.create_dataset", "data.create_dataset", "data.corrupt_labels", "logger.info", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "data.DataManager", "data.create_dataset", "torch.get_rng_state", "logger.info", "torch.utils.data.random_split", "torch.utils.data.random_split", "torch.set_rng_state", "logger.warn", "logger.info", "torch.utils.data.DataLoader", "torch.manual_seed", "torch.cuda.device_count", "torch.Generator().manual_seed", "torch.Generator().manual_seed", "torch.Generator", "torch.Generator"], "function", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.data.create_dataset", "home.repos.pwc.inspect_result.magamba_linear-regions.core.data.create_dataset", "home.repos.pwc.inspect_result.magamba_linear-regions.core.data.corrupt_labels", "home.repos.pwc.inspect_result.magamba_linear-regions.core.data.create_dataset"], ["", "def", "create_data_manager", "(", "\n", "args", ",", "\n", "noise", ",", "\n", "seed", "=", "None", ",", "\n", "normalize", "=", "True", ",", "\n", "augment", "=", "False", ",", "\n", "train_validation_split", "=", "(", "None", ",", "None", ")", ",", "\n", "train_subset_pct", "=", "None", ",", "\n", "test_subset_pct", "=", "None", ",", "\n", "gen_paths", "=", "False", ",", "\n", "override_dset_class", "=", "None", "\n", ")", ":", "\n", "    ", "if", "override_dset_class", "is", "None", "and", "gen_paths", ":", "\n", "        ", "override_dset_class", "=", "with_indices", "\n", "", "dset", "=", "create_dataset", "(", "\n", "args", ",", "\n", "train", "=", "True", ",", "\n", "normalize", "=", "normalize", ",", "\n", "augment", "=", "augment", ",", "\n", "subset_pct", "=", "train_subset_pct", ",", "\n", "gen_paths", "=", "gen_paths", ",", "\n", "override_dset_class", "=", "override_dset_class", "\n", ")", "\n", "tset", "=", "create_dataset", "(", "\n", "args", ",", "\n", "train", "=", "False", ",", "\n", "normalize", "=", "normalize", ",", "\n", "augment", "=", "False", ",", "\n", "subset_pct", "=", "train_subset_pct", ",", "\n", "gen_paths", "=", "gen_paths", ",", "\n", "override_dset_class", "=", "override_dset_class", "\n", ")", "\n", "vset", ",", "vloader", "=", "None", ",", "None", "\n", "if", "train_validation_split", "!=", "(", "None", ",", "None", ")", ":", "\n", "        ", "vset", "=", "create_dataset", "(", "\n", "args", ",", "\n", "train", "=", "True", ",", "\n", "normalize", "=", "normalize", ",", "\n", "augment", "=", "False", ",", "\n", "subset_pct", "=", "train_subset_pct", ",", "\n", "gen_paths", "=", "gen_paths", ",", "\n", "validation", "=", "True", ",", "\n", "override_dset_class", "=", "override_dset_class", "\n", ")", "\n", "if", "seed", "is", "not", "None", ":", "\n", "            ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "", "rng_state", "=", "torch", ".", "get_rng_state", "(", ")", "\n", "logger", ".", "info", "(", "\"Splitting training set into train: {}, val: {}.\"", ".", "format", "(", "\n", "train_validation_split", "[", "0", "]", ",", "train_validation_split", "[", "1", "]", "\n", ")", "\n", ")", "\n", "_", ",", "vset", "=", "random_split", "(", "\n", "vset", ",", "train_validation_split", ",", "generator", "=", "torch", ".", "Generator", "(", "\"cpu\"", ")", ".", "manual_seed", "(", "\n", "args", ".", "data_split_seed", "\n", ")", "\n", ")", "\n", "dset", ",", "_", "=", "random_split", "(", "\n", "dset", ",", "train_validation_split", ",", "generator", "=", "torch", ".", "Generator", "(", "\"cpu\"", ")", ".", "manual_seed", "(", "\n", "args", ".", "data_split_seed", "\n", ")", "\n", ")", "\n", "torch", ".", "set_rng_state", "(", "rng_state", ")", "\n", "", "corrupt_labels", "(", "dset", ",", "noise", ",", "args", ".", "label_seed", ")", "\n", "num_workers", "=", "args", ".", "e_workers", "\n", "pin_memory", "=", "True", "\n", "if", "args", ".", "e_device", "!=", "\"cpu\"", "and", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", "and", "gen_paths", ":", "\n", "        ", "logger", ".", "warn", "(", "\"Setting data-loader workers to 0 to avoid conflict with torch.multiprocessing and GPU workers.\"", ")", "\n", "num_workers", "=", "0", "\n", "pin_memory", "=", "False", "\n", "\n", "", "logger", ".", "info", "(", "\"Running with {} cpu workers.\"", ".", "format", "(", "num_workers", ")", ")", "\n", "kwargs_train", "=", "{", "\n", "\"batch_size\"", ":", "args", ".", "batch_size", ",", "\n", "\"num_workers\"", ":", "num_workers", ",", "\n", "\"shuffle\"", ":", "True", ",", "\n", "\"pin_memory\"", ":", "pin_memory", ",", "\n", "}", "\n", "kwargs_no_train", "=", "{", "\n", "\"batch_size\"", ":", "args", ".", "batch_size", ",", "\n", "\"num_workers\"", ":", "num_workers", ",", "\n", "\"shuffle\"", ":", "gen_paths", ",", "\n", "\"pin_memory\"", ":", "pin_memory", ",", "\n", "}", "\n", "\n", "if", "gen_paths", ":", "\n", "        ", "logger", ".", "info", "(", "\"Shuffling test/val splits. Remember to seed torch right before creating any iterator of your dataloader to ensure paths are visited in the same order.\"", ")", "\n", "\n", "", "if", "train_validation_split", "!=", "(", "None", ",", "None", ")", ":", "\n", "        ", "vloader", "=", "DataLoader", "(", "vset", ",", "**", "kwargs_no_train", ")", "\n", "", "dloader", "=", "DataLoader", "(", "dset", ",", "**", "kwargs_train", ")", "\n", "tloader", "=", "DataLoader", "(", "tset", ",", "**", "kwargs_no_train", ")", "\n", "\n", "return", "DataManager", "(", "\n", "dset", ",", "\n", "dloader", ",", "\n", "tloader", ",", "\n", "vloader", ",", "\n", "vset", ",", "\n", "tset", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.random_dataset.RandomDataset.__init__": [[29, 89], ["torchvision.datasets.VisionDataset.__init__", "numpy.asarray", "numpy.asarray", "numpy.random.default_rng", "numpy.random.default_rng.uniform", "numpy.vstack", "random_dataset.RandomDataset.data.reshape().transpose", "list", "NotImplementedError", "tuple", "numpy.random.default_rng.integers", "numpy.random.default_rng.uniform", "numpy.vstack", "random_dataset.RandomDataset.data.reshape().transpose", "list", "random_dataset.RandomDataset.data.reshape", "tuple", "numpy.random.default_rng.integers", "random_dataset.RandomDataset.data[].reshape", "random_dataset.RandomDataset.data.reshape", "numpy.prod", "range", "random_dataset.RandomDataset.data[].reshape", "len", "numpy.prod", "range", "len"], "methods", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.counting.ActivationRegion.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "train_size", ":", "int", ",", "\n", "test_size", ":", "int", ",", "\n", "num_classes", ":", "int", ",", "\n", "data_shape", ":", "Tuple", "[", "int", "]", ",", "\n", "train_mean", ":", "Tuple", "[", "float", "]", ",", "\n", "train_std", ":", "Tuple", "[", "float", "]", ",", "\n", "data_sample_seed", ":", "int", ",", "\n", "download", ":", "bool", "=", "None", ",", "\n", "train", ":", "bool", "=", "True", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", "\n", ")", "->", "None", ":", "\n", "\n", "        ", "super", "(", "RandomDataset", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "data_shape", "=", "data_shape", "\n", "self", ".", "data_sample_seed", "=", "data_sample_seed", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "test_size", "=", "test_size", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "train_size", "=", "train_size", "\n", "self", ".", "train_mean", "=", "np", ".", "asarray", "(", "train_mean", ")", "\n", "self", ".", "train_std", "=", "np", ".", "asarray", "(", "train_std", ")", "\n", "\n", "if", "download", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Random datasets are generated on the fly and cannot be downloaded.\"", ")", "\n", "\n", "", "self", ".", "data", ":", "Any", "=", "[", "]", "\n", "self", ".", "targets", "=", "[", "]", "\n", "\n", "# init PRNG", "\n", "rng", "=", "np", ".", "random", ".", "default_rng", "(", "data_sample_seed", ")", "\n", "\n", "# generate train data", "\n", "self", ".", "data", "=", "rng", ".", "uniform", "(", "\n", "low", "=", "(", "self", ".", "train_mean", "-", "self", ".", "train_std", ")", ",", "\n", "high", "=", "(", "self", ".", "train_mean", "+", "self", ".", "train_std", ")", ",", "\n", "size", "=", "(", "self", ".", "train_size", "*", "np", ".", "prod", "(", "self", ".", "data_shape", "[", "1", ":", "]", ")", ",", "self", ".", "data_shape", "[", "0", "]", ")", "\n", ")", "\n", "self", ".", "data", "=", "np", ".", "vstack", "(", "\n", "tuple", "(", "self", ".", "data", "[", ":", ",", "i", "]", ".", "reshape", "(", "(", "-", "1", ",", ")", "+", "self", ".", "data_shape", "[", "1", ":", "]", ")", "for", "i", "in", "range", "(", "len", "(", "self", ".", "train_mean", ")", ")", ")", "\n", ")", "\n", "self", ".", "data", "=", "self", ".", "data", ".", "reshape", "(", "(", "self", ".", "data_shape", "[", "0", "]", ",", "-", "1", ",", ")", "+", "self", ".", "data_shape", "[", "1", ":", "]", ")", ".", "transpose", "(", "1", ",", "2", ",", "3", ",", "0", ")", "# HWC", "\n", "\n", "# generate train labels", "\n", "self", ".", "targets", "=", "list", "(", "rng", ".", "integers", "(", "low", "=", "0", ",", "high", "=", "self", ".", "num_classes", ",", "size", "=", "self", ".", "train_size", ",", "dtype", "=", "np", ".", "long", ")", ")", "\n", "\n", "# generate test data", "\n", "if", "not", "self", ".", "train", ":", "\n", "            ", "self", ".", "data", "=", "rng", ".", "uniform", "(", "\n", "low", "=", "(", "self", ".", "train_mean", "-", "self", ".", "train_std", ")", ",", "\n", "high", "=", "(", "self", ".", "train_mean", "+", "self", ".", "train_std", ")", ",", "\n", "size", "=", "(", "self", ".", "test_size", "*", "np", ".", "prod", "(", "self", ".", "data_shape", "[", "1", ":", "]", ")", ",", "self", ".", "data_shape", "[", "0", "]", ")", "\n", ")", "\n", "self", ".", "data", "=", "np", ".", "vstack", "(", "\n", "tuple", "(", "self", ".", "data", "[", ":", ",", "i", "]", ".", "reshape", "(", "(", "-", "1", ",", ")", "+", "self", ".", "data_shape", "[", "1", ":", "]", ")", "for", "i", "in", "range", "(", "len", "(", "self", ".", "train_mean", ")", ")", ")", "\n", ")", "\n", "self", ".", "data", "=", "self", ".", "data", ".", "reshape", "(", "(", "self", ".", "data_shape", "[", "0", "]", ",", "-", "1", ",", ")", "+", "self", ".", "data_shape", "[", "1", ":", "]", ")", ".", "transpose", "(", "1", ",", "2", ",", "3", ",", "0", ")", "# HWC", "\n", "self", ".", "targets", "=", "list", "(", "rng", ".", "integers", "(", "low", "=", "0", ",", "high", "=", "self", ".", "num_classes", ",", "size", "=", "self", ".", "test_size", ",", "dtype", "=", "np", ".", "long", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.random_dataset.RandomDataset.__getitem__": [[90, 109], ["PIL.Image.fromarray", "random_dataset.RandomDataset.transform", "random_dataset.RandomDataset.target_transform"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ":", "int", ")", "->", "Tuple", "[", "Any", ",", "Any", "]", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n            \n        Returns:\n            tuple: (image, target) where target is index of the target class\n        \"\"\"", "\n", "img", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "targets", "[", "index", "]", "\n", "\n", "img", "=", "Image", ".", "fromarray", "(", "(", "img", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.random_dataset.RandomDataset.__len__": [[110, 112], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.random_dataset.RandomDataset.extra_repr": [[113, 115], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "\"Split: {}\"", ".", "format", "(", "\"Train\"", "if", "self", ".", "train", "is", "True", "else", "\"Test\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.random_dataset.build_dataset": [[22, 26], ["functools.partialmethod"], "function", ["None"], ["def", "build_dataset", "(", "cls", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "class", "DatasetClass", "(", "cls", ")", ":", "\n", "        ", "__init__", "=", "partialmethod", "(", "cls", ".", "__init__", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "return", "DatasetClass", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.counting.ActivationRegion.__init__": [[26, 36], ["isinstance", "counting.ActivationRegion.act_pattern.append", "counting.ActivationRegion.act_pattern.append", "range", "range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "arch", ")", ":", "\n", "\n", "        ", "self", ".", "arch", "=", "arch", "\n", "# list of list of 0's and 1s", "\n", "self", ".", "act_pattern", "=", "[", "]", "\n", "for", "layer", "in", "arch", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "(", "int", ",", "np", ".", "integer", ")", ")", ":", "\n", "                ", "self", ".", "act_pattern", ".", "append", "(", "[", "3", "for", "_", "in", "range", "(", "layer", ")", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "act_pattern", ".", "append", "(", "[", "[", "3", "for", "_", "in", "range", "(", "dim", ")", "]", "for", "dim", "in", "layer", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.counting.ActivationRegion.__eq__": [[37, 46], ["range", "len", "len", "len", "torch.all", "torch.all", "torch.all", "torch.all", "counting.ActivationRegion.eq"], "methods", ["None"], ["", "", "", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "act_pattern", ")", "!=", "len", "(", "other", ".", "act_pattern", ")", ":", "\n", "            ", "return", "False", "\n", "", "for", "idx", "in", "range", "(", "1", ",", "len", "(", "self", ".", "act_pattern", ")", "-", "1", ")", ":", "\n", "            ", "self_pattern", "=", "self", ".", "act_pattern", "[", "idx", "]", "\n", "other_pattern", "=", "other", ".", "act_pattern", "[", "idx", "]", "\n", "if", "not", "torch", ".", "all", "(", "self_pattern", ".", "eq", "(", "other_pattern", ")", ")", ":", "\n", "                ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.counting.ActivationRegion.__hash__": [[47, 56], ["hash", "list_flatten", "pat.tolist"], "methods", ["None"], ["", "def", "__hash__", "(", "self", ")", ":", "\n", "        ", "str_pattern", "=", "\"\"", ".", "join", "(", "\n", "[", "\n", "\"1\"", "if", "j", "else", "\"0\"", "\n", "for", "pat", "in", "self", ".", "act_pattern", "[", "1", ":", "-", "1", "]", "\n", "for", "j", "in", "list_flatten", "(", "pat", ".", "tolist", "(", ")", ")", "\n", "]", "\n", ")", "\n", "return", "hash", "(", "str_pattern", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.counting.ActivationRegion.squeeze": [[57, 60], ["range", "counting.ActivationRegion.act_pattern[].flatten", "len"], "methods", ["None"], ["", "def", "squeeze", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "1", ",", "len", "(", "self", ".", "act_pattern", ")", "-", "1", ")", ":", "\n", "            ", "self", ".", "act_pattern", "[", "i", "]", "=", "self", ".", "act_pattern", "[", "i", "]", ".", "flatten", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.counting.ActivationRegion.num_individual_regions": [[61, 64], ["len"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "num_individual_regions", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "act_pattern", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.counting.ActivationRegion.not_eq_to_idx": [[65, 83], ["torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "range", "counting.ActivationRegion._not_eq_to_idx", "len"], "methods", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.counting.ActivationRegion._not_eq_to_idx"], ["", "def", "not_eq_to_idx", "(", "self", ",", "other_batch", ",", "diff_indices", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        @param other_batch: Instance of `ActivationRegion` with batch dimension (4D)\n        @return: A list of batch indices where @self.act_pattern does not equal\n                 `other.act_pattern`\n        \"\"\"", "\n", "indices", "=", "torch", ".", "arange", "(", "self", ".", "num_individual_regions", ",", "device", "=", "self", ".", "act_pattern", "[", "1", "]", ".", "device", ")", "\n", "mask", "=", "torch", ".", "full_like", "(", "indices", ",", "fill_value", "=", "False", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "\n", "for", "layer_idx", "in", "range", "(", "1", ",", "len", "(", "self", ".", "act_pattern", ")", "-", "1", ")", ":", "\n", "            ", "self", ".", "_not_eq_to_idx", "(", "\n", "self", ".", "act_pattern", "[", "layer_idx", "]", ",", "\n", "other_batch", ".", "act_pattern", "[", "layer_idx", "]", "[", "diff_indices", "]", ",", "\n", "mask", ",", "\n", "self", ".", "act_pattern", "[", "1", "]", ".", "shape", "[", "0", "]", "\n", ")", "\n", "\n", "", "return", "indices", "[", "mask", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.counting.ActivationRegion._not_eq_to_idx": [[84, 92], ["mask.logical_or", "act_pattern.view().logical_xor().sum", "act_pattern.view().logical_xor", "other.view", "act_pattern.view"], "methods", ["None"], ["", "@", "staticmethod", "\n", "@", "torch", ".", "jit", ".", "script", "\n", "def", "_not_eq_to_idx", "(", "act_pattern", ":", "torch", ".", "Tensor", ",", "other", ":", "torch", ".", "Tensor", ",", "mask", ":", "torch", ".", "Tensor", ",", "nbatches", ":", "int", ")", "->", "None", ":", "\n", "        ", "mask", ".", "logical_or", "(", "\n", "act_pattern", ".", "view", "(", "nbatches", ",", "-", "1", ")", ".", "logical_xor", "(", "\n", "other", ".", "view", "(", "nbatches", ",", "-", "1", ")", "\n", ")", ".", "sum", "(", "dim", "=", "1", ")", ",", "\n", "out", "=", "mask", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.counting.Countable.input_shape": [[96, 100], ["None"], "methods", ["None"], ["    ", "@", "property", "\n", "@", "abc", ".", "abstractmethod", "\n", "def", "input_shape", "(", "self", ")", ":", "\n", "        ", "\"\"\"@return the expected input shape\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.counting.Countable.count": [[101, 106], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "count", "(", "self", ",", "x", ",", "d", ",", "device", "=", "\"cpu\"", ")", ":", "\n", "        ", "\"\"\"\n        Count self on lines between x and d which are 4d tensors (B, C, H, W)\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.counting._norm_of_batches": [[111, 125], ["torch.norm().view", "torch.norm().view", "len", "torch.norm", "torch.norm", "batch_variables.view"], "function", ["None"], ["@", "torch", ".", "jit", ".", "script", "\n", "def", "_norm_of_batches", "(", "batch_variables", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\" Compute the L2 norm of a batch-indexed tensor @batch_variables of shape\n        (N, *), along the non-batch dimension.\n        \n        @param batch_variables: torch.tensor of shape (N, *)\n        @return norm: torch.tensor of shape (N, 1, .., 1) Per sample norm of \n                      each batch-indexed sample, with singleton dimensions \n                      matching the shape of @batch_variables, \n    \"\"\"", "\n", "shape", "=", "(", "batch_variables", ".", "shape", "[", "0", "]", ",", ")", "+", "(", "1", ",", ")", "*", "len", "(", "batch_variables", ".", "shape", "[", "1", ":", "]", ")", "\n", "return", "torch", ".", "norm", "(", "\n", "batch_variables", ".", "view", "(", "shape", "[", "0", "]", ",", "-", "1", ")", ",", "p", "=", "2", ",", "dim", "=", "1", "\n", ")", ".", "view", "(", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.counting._normalized_directions": [[127, 141], ["counting._norm_of_batches"], "function", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.counting._norm_of_batches"], ["", "@", "torch", ".", "jit", ".", "script", "\n", "def", "_normalized_directions", "(", "x0s", ":", "torch", ".", "Tensor", ",", "x1s", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "    ", "\"\"\" Normalized tensor @x1s - @x0s of shape (N, *) along all non-batch dimensions \n        (flattened), and return normalized tensor of directions.\n        \n        @param x0s: torch.Tensor (N, *) start points of x1s - x0s\n        @param x1s: torch Tensor (N, *) endpoints\n        @return torch.Tensor (N, *) unnormalized direction tensor\n        @return torch.Tensor (N, *) normalized direction tensor\n        @return torch.Tensor (N, *) norm tensor\n    \"\"\"", "\n", "directions_unnormalized", "=", "x1s", "-", "x0s", "\n", "norm_of_directions", "=", "_norm_of_batches", "(", "directions_unnormalized", ")", "\n", "return", "directions_unnormalized", ",", "directions_unnormalized", "/", "norm_of_directions", ",", "norm_of_directions", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.counting._normalize_lambdas": [[143, 146], ["norm_of_directions.view"], "function", ["None"], ["", "@", "torch", ".", "jit", ".", "script", "\n", "def", "_normalize_lambdas", "(", "lambdas", ":", "torch", ".", "Tensor", ",", "norm_of_directions", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "return", "lambdas", "/", "norm_of_directions", ".", "view", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.counting._remove_lambdas_below_sensitivity": [[148, 168], ["torch.where", "torch.where", "torch.le", "torch.le"], "function", ["None"], ["", "@", "torch", ".", "jit", ".", "script", "\n", "def", "_remove_lambdas_below_sensitivity", "(", "\n", "lambdas", ":", "torch", ".", "Tensor", ",", "\n", "diff_indices", ":", "torch", ".", "Tensor", ",", "\n", "layer_change_indices_", ":", "torch", ".", "Tensor", ",", "\n", "norm_of_directions", ":", "torch", ".", "Tensor", ",", "\n", "one", ":", "torch", ".", "Tensor", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "    ", "\"\"\" Filter out  numerically unstable lambda values\n    \"\"\"", "\n", "# should compare against norm_of_directions[diff_indices] if directions_normalized", "\n", "# are used for estimating lambdas", "\n", "diff_indices", "=", "diff_indices", "[", "\n", "torch", ".", "where", "(", "\n", "torch", ".", "le", "(", "lambdas", "[", "diff_indices", "]", ",", "one", ")", "\n", ")", "[", "0", "]", "\n", "]", "\n", "layer_change_indices_", "=", "layer_change_indices_", "[", "diff_indices", "]", "\n", "lambdas", "=", "lambdas", "[", "diff_indices", "]", "\n", "return", "lambdas", ",", "diff_indices", ",", "layer_change_indices_", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.counting._index_directions": [[170, 180], ["int", "torch.cat", "torch.cat"], "function", ["None"], ["", "@", "torch", ".", "jit", ".", "script", "\n", "def", "_index_directions", "(", "x", ":", "torch", ".", "Tensor", ",", "indices", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\" For a tensor @x of stacked values and corresponding\n        directions, and a tensor @indices indexing values\n        in @x[:x.shape[0] // 2], extend indices so that they\n        also match the corresponding values in @x[x.shape[0] // 2:]\n    \"\"\"", "\n", "half_batch", "=", "int", "(", "x", ".", "shape", "[", "0", "]", "//", "2", ")", "\n", "full_batch_indices", "=", "torch", ".", "cat", "(", "(", "indices", ",", "indices", "+", "half_batch", ")", ")", "\n", "return", "x", "[", "full_batch_indices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.counting._override_directions": [[182, 191], ["x.detach().clone", "x.detach", "len"], "function", ["None"], ["", "@", "torch", ".", "jit", ".", "script", "\n", "def", "_override_directions", "(", "x", ":", "torch", ".", "Tensor", ",", "new", ":", "torch", ".", "Tensor", ",", "indices", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\" For a tensor @x of stacked values, a tensor @new, \n        and a tensor @indices indexing values in @x[:x.shape[0]], \n        ovverride the values in @x[x.shape[0]:] with @new\n    \"\"\"", "\n", "new_tensor", "=", "x", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "new_tensor", "[", "len", "(", "indices", ")", ":", "]", "=", "new", "[", "indices", "]", "\n", "return", "new_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.counting._cross_region_boundary": [[193, 198], ["None"], "function", ["None"], ["", "@", "torch", ".", "jit", ".", "script", "\n", "def", "_cross_region_boundary", "(", "\n", "input", ":", "torch", ".", "Tensor", ",", "output", ":", "torch", ".", "Tensor", ",", "lambdas", ":", "torch", ".", "Tensor", ",", "directions", ":", "torch", ".", "Tensor", ",", "norm_of_directions", ":", "torch", ".", "Tensor", ",", "epsilon", ":", "torch", ".", "Tensor", ",", "indices", ":", "torch", ".", "Tensor", "\n", ")", "->", "None", ":", "\n", "    ", "output", "[", "indices", "]", "=", "input", "[", "indices", "]", "+", "(", "lambdas", "+", "epsilon", ")", "*", "directions", "[", "indices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.counting._step_along_direction": [[200, 205], ["None"], "function", ["None"], ["", "@", "torch", ".", "jit", ".", "script", "\n", "def", "_step_along_direction", "(", "\n", "input", ":", "torch", ".", "Tensor", ",", "output", ":", "torch", ".", "Tensor", ",", "lambdas", ":", "torch", ".", "Tensor", ",", "directions", ":", "torch", ".", "Tensor", ",", "indices", ":", "torch", ".", "Tensor", "\n", ")", "->", "None", ":", "\n", "    ", "output", "[", "indices", "]", "=", "input", "[", "indices", "]", "+", "lambdas", "*", "directions", "[", "indices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.counting._remove_overshoot_indices": [[207, 219], ["torch.where", "torch.where", "counting._norm_of_batches"], "function", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.counting._norm_of_batches"], ["", "@", "torch", ".", "jit", ".", "script", "\n", "def", "_remove_overshoot_indices", "(", "\n", "x", ":", "torch", ".", "Tensor", ",", "x0s", ":", "torch", ".", "Tensor", ",", "norm_of_directions", ":", "torch", ".", "Tensor", ",", "indices", ":", "torch", ".", "Tensor", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "    ", "\"\"\" For a batch of inputs @x of shape (N, *), a batch of start points @x0s, and a batch of\n        finite directions @norm_of_directions of shape (N, *), return a tensor of indices\n        such that || @x[@indices] - @x0s[@indices] || <= @norm_of_directions\n    \"\"\"", "\n", "idx_within_dist", "=", "torch", ".", "where", "(", "\n", "_norm_of_batches", "(", "x", "[", "indices", "]", "-", "x0s", "[", "indices", "]", ")", "<=", "norm_of_directions", "[", "indices", "]", "\n", ")", "[", "0", "]", "\n", "return", "indices", "[", "idx_within_dist", "]", ",", "idx_within_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.counting.variation_along_direction_normalized": [[221, 242], ["torch.norm", "torch.norm"], "function", ["None"], ["", "@", "torch", ".", "jit", ".", "script", "\n", "def", "variation_along_direction_normalized", "(", "\n", "x_in", ":", "torch", ".", "Tensor", ",", "x_out", ":", "torch", ".", "Tensor", ",", "logits_in", ":", "torch", ".", "Tensor", ",", "logits_out", ":", "torch", ".", "Tensor", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\" Compute the directional derivative of the linear function\n        represented by @logits_in and @logits_out along the direction\n        @x_out - @x_in, normalized by the length of @x_out - @x_in\n        \n        Params:\n            @x_in : 4D Tensor of shape (N,C,H,W) Batch of entry points to their\n                    corresponding linear regions.\n            @x_out: 4D Tensor of shape (N,C,H,W) Batch of exit points to their \n                    corresponding linear region.\n            @logits_in: 2D Tensor of shape (N, K) Logit values at @x_in.\n            @logits_out: 2D Tensor of shape (N, K) Logit values at @x_out.\n        \n        Return: Tensor of shape (N, K) The per-logit norm of directional \n                derivative of the network's output in the direction @x_out - @x_in.\n    \"\"\"", "\n", "norm", "=", "torch", ".", "norm", "(", "(", "x_out", "-", "x_in", ")", ".", "view", "(", "x_out", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "return", "(", "logits_out", "-", "logits_in", ")", "/", "norm", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.counting.variation_along_direction": [[244, 264], ["None"], "function", ["None"], ["", "@", "torch", ".", "jit", ".", "script", "\n", "def", "variation_along_direction", "(", "\n", "x_in", ":", "torch", ".", "Tensor", ",", "x_out", ":", "torch", ".", "Tensor", ",", "logits_in", ":", "torch", ".", "Tensor", ",", "logits_out", ":", "torch", ".", "Tensor", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\" Compute the directional derivative of the linear function\n        represented by @logits_in and @logits_out along the direction\n        @x_out - @x_in.\n        \n        Params:\n            @x_in : 4D Tensor of shape (N,C,H,W) Batch of entry points to their\n                    corresponding linear regions.\n            @x_out: 4D Tensor of shape (N,C,H,W) Batch of exit points to their \n                    corresponding linear region.\n            @logits_in: 2D Tensor of shape (N, K) Logit values at @x_in.\n            @logits_out: 2D Tensor of shape (N, K) Logit values at @x_out.\n        \n        Return: Tensor of shape (N, K) The per-logit norm of directional \n                derivative of the network's output in the direction @x_out - @x_in.\n    \"\"\"", "\n", "return", "logits_out", "-", "logits_in", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.counting.absolute_deviation": [[266, 323], ["torch.zeros_like", "torch.zeros_like", "torch.max", "torch.max", "deviation_x0.abs.eq", "torch.max.square", "linear_deviation.abs.abs", "deviation_x0.abs.abs", "torch.min", "torch.min", "t_start.square", "t_end.square"], "function", ["None"], ["", "@", "torch", ".", "jit", ".", "script", "\n", "def", "absolute_deviation", "(", "\n", "t_start", ":", "torch", ".", "Tensor", ",", "\n", "t_end", ":", "torch", ".", "Tensor", ",", "\n", "norm_of_directions", ":", "torch", ".", "Tensor", ",", "\n", "logits_x0", ":", "torch", ".", "Tensor", ",", "\n", "logits_x_at_x0", ":", "torch", ".", "Tensor", ",", "\n", "variation_interpolated", ":", "torch", ".", "Tensor", ",", "\n", "variation_linear", ":", "torch", ".", "Tensor", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\" Compute the absolute deviation between the network's output and an \n        affine baseline interpolating between the logits at x0 and x1\n        along @directions.\n        \n        Parameters:\n        @param t_start: torch.Tensor of shape (N, *) with singleton dimensions\n                        beyond the batch dimension\n        @param t_end: torch.Tensor of shape (N, *) with singleton dimensions \n                      beyond the batch dimension\n        @param norm_of_directions: torch.Tensor of shape (N, *), batch of \n               L2 norms of flatted @directions, with singleton dimensions\n               beyond the batch dimension\n        @param logits_x0: torch.Tensor of shape (N,K) network output at x0s\n        @param logits_x_at_x0: torch.Tensor (N, K) the output of the affine\n               function that the network computes on the linear region of x,\n               evaluated at x0\n        @param variation_interpolated: torch.Tensor of shape (N,K) batched\n               per-logit variation of the interpolating affine function.\n        @param variation_linear: torch.Tensor of shape (N,K) batched\n               variation of the function computed by the network at x, computed\n               between x1 and x0.\n        \n        Return:\n        @return absolute_deviation: torch.Tensor of shape (N, K) batched per-logit\n                absolute_deviation deviation over the interval [@t_start, @t_end]\n                of the real line R.\n    \"\"\"", "\n", "deviation_x0", "=", "logits_x0", "-", "logits_x_at_x0", "\n", "# if lambdas are computed using directions_normalized, then variation_linear", "\n", "# should be upscaled by norm_of_directions to compensate for the normalization", "\n", "linear_deviation", "=", "variation_linear", "-", "variation_interpolated", "\n", "zeros", "=", "torch", ".", "zeros_like", "(", "deviation_x0", ")", "\n", "\n", "t_at_intersection", "=", "torch", ".", "max", "(", "\n", "t_start", ",", "torch", ".", "min", "(", "deviation_x0", "/", "linear_deviation", ",", "t_end", ")", "\n", ")", "\n", "mask_nans", "=", "deviation_x0", ".", "eq", "(", "zeros", ")", "\n", "t_at_intersection", "[", "mask_nans", "]", "=", "(", "zeros", "+", "t_start", ")", "[", "mask_nans", "]", "\n", "t_int_square", "=", "t_at_intersection", ".", "square", "(", ")", "\n", "linear_deviation", "=", "linear_deviation", ".", "abs", "(", ")", "\n", "deviation_x0", "=", "deviation_x0", ".", "abs", "(", ")", "\n", "\n", "return", "norm_of_directions", "*", "(", "\n", "(", "t_at_intersection", "-", "t_start", ")", "*", "deviation_x0", "+", "(", "t_end", "-", "t_at_intersection", ")", "*", "deviation_x0", "+", "0.5", "*", "(", "(", "t_int_square", "-", "t_start", ".", "square", "(", ")", ")", "*", "linear_deviation", "+", "(", "t_end", ".", "square", "(", ")", "-", "t_int_square", ")", "*", "linear_deviation", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.counting.find_act_patterns_between_points": [[326, 560], ["counting._normalized_directions", "torch.full", "torch.full", "torch.full", "torch.full", "torch.ones", "torch.ones", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "x0s.detach.detach", "get_act_region_fn", "get_act_region_fn", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros_like", "torch.zeros_like", "logits_x.detach().clone", "counting.variation_along_direction", "torch.cat().to", "torch.cat().to", "x1s.to.to", "logits_x1.detach().to.detach().to", "torch.arange", "torch.arange", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "logits_x.detach().clone", "torch.cat.to", "torch.cat.to", "torch.cat.to", "density.to.to", "torch.cat.to", "variation_interpolated.to.to", "act_pattern_x.not_eq_to_idx", "counting._remove_lambdas_below_sensitivity", "lambdas.view.view", "lambdas.view.view", "get_act_region_fn", "counting.absolute_deviation", "counting.variation_along_direction", "lambdas.view.view().clone", "variation_along_direction.detach().clone", "absolute_deviation.clone", "lambdas[].view", "counting._index_directions", "counting._override_directions", "get_act_region_fn", "logits_x.detach().clone", "torch.zeros_like", "torch.zeros_like", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "logits_x.detach", "torch.cat", "torch.cat", "logits_x1.detach().to.detach", "logits_x.detach", "len", "len", "torch.no_grad", "torch.no_grad", "counting._step_along_direction", "counting._index_directions", "t_start[].view", "t_end[].view", "norm_of_directions[].view", "logits_next.detach().clone", "torch.no_grad", "torch.no_grad", "counting._cross_region_boundary", "counting._remove_overshoot_indices", "lambdas[].view().clone", "lambdas.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "logits_next.detach().clone", "lambdas.view.view", "variation_along_direction.detach", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lambdas[].view().clone", "logits_x.detach", "torch.arange", "torch.arange", "logits_next.detach", "lambdas[].view", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "logits_next.detach", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "lambdas[].view"], "function", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.counting._normalized_directions", "home.repos.pwc.inspect_result.magamba_linear-regions.core.counting.variation_along_direction", "home.repos.pwc.inspect_result.magamba_linear-regions.core.counting.ActivationRegion.not_eq_to_idx", "home.repos.pwc.inspect_result.magamba_linear-regions.core.counting._remove_lambdas_below_sensitivity", "home.repos.pwc.inspect_result.magamba_linear-regions.core.counting.absolute_deviation", "home.repos.pwc.inspect_result.magamba_linear-regions.core.counting.variation_along_direction", "home.repos.pwc.inspect_result.magamba_linear-regions.core.counting._index_directions", "home.repos.pwc.inspect_result.magamba_linear-regions.core.counting._override_directions", "home.repos.pwc.inspect_result.magamba_linear-regions.core.counting._step_along_direction", "home.repos.pwc.inspect_result.magamba_linear-regions.core.counting._index_directions", "home.repos.pwc.inspect_result.magamba_linear-regions.core.counting._cross_region_boundary", "home.repos.pwc.inspect_result.magamba_linear-regions.core.counting._remove_overshoot_indices"], ["", "def", "find_act_patterns_between_points", "(", "\n", "get_act_region_fn", ",", "\n", "x0s", ",", "\n", "x1s", ",", "\n", "device", "=", "\"cpu\"", ",", "\n", "var_along_d", "=", "False", ",", "\n", "buff_size", "=", "30000", "\n", ")", ":", "\n", "    ", "\"\"\"\n    @param get_act_region_fn: a function with signature:\n        get_act_region_fn(x, directions): ->\n            (\n                lambdas_to_cross,\n                crossing_layer_indices,\n                act_region,\n                logits,\n                directions\n            )\n        Parameters of @get_act_region: \n           For tensors @x0s, @x1s of shape (N, *), respectively denoting the \n           endpoints of a line segment, direction is the L2 normalized direction\n           @x1s - @x0s (of shape (N)), and @x is taken as the starting endopoint\n           @x0s.\n        \n        Return values of @get_act_region:\n            lambdas_to_cross: tensor of shape (N) scalar coefficient required \n                              from crossing the the linear regions respectively\n                              containing x0s, in the direction @direction.\n            crossing_layer_indices: tensor of shape (N) layer indices at which \n                                    the crossing occurs.\n            act_region: Instance of class ActivationRegion for x0s \n            logits : 2D (B, K) predictions, where K is the number of classes\n\n    @param x0s: batch-indexed tensor of shape (N, *) where * is any tuple of \n                dimensions indexing the image/input data shape, denoting the\n                starting point of a batch of N lines in the input space.\n    @param x1s: Tensors with same shape as @x0, denoting the endpoints of a batch \n                of N lines in the input space.\n    @param buff_size: int size of each preallocated cuda buffer used to store \n                      activation region statistics.\n    @return:\n        pts: List of lists of tensors. The outer list is indexed by batch size N\n             Each inner list containts the entry and exit poit for each activation \n             region visited.\n        absolute_deviation: List of lists of lists of floats. The outer list matches @pts\n                  in length and is batch-indexed. Each inner list abs_deviation[i]\n                  contains a list of K per-logit absolute deviations. The length\n                  of abs_deviation[i] is the number of activation regions crossed for \n                  line @i.\n        logits: List of lists of lists of floats. The outer list matches @pts\n                in length and is batch-indexed. Each inner list logits[i]\n                contains a list of K logit values, evaluated at the corresponding\n                point in @pts (i.e. 2 points per activation region). \n                The length of logits[i] is twice the number of activation\n                regions crossed by line @i.\n    \"\"\"", "\n", "directions", ",", "directions_normalized", ",", "norm_of_directions", "=", "_normalized_directions", "(", "x0s", ",", "x1s", ")", "\n", "batch_size", "=", "x0s", ".", "shape", "[", "0", "]", "\n", "flatten_keep_dim", "=", "(", "-", "1", ",", ")", "+", "(", "1", ",", ")", "*", "len", "(", "x0s", ".", "shape", "[", "1", ":", "]", ")", "\n", "inf", "=", "torch", ".", "full", "(", "(", "1", ",", ")", ",", "fill_value", "=", "np", ".", "inf", ",", "device", "=", "device", ")", "\n", "epsilon", "=", "torch", ".", "full", "(", "(", "1", ",", ")", ",", "fill_value", "=", "EPSILON", ",", "device", "=", "device", ")", "\n", "one", "=", "torch", ".", "ones", "(", "(", "1", ",", ")", ",", "device", "=", "device", ")", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x0s", ",", "directions", ")", ")", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "x1s", "=", "torch", ".", "cat", "(", "(", "x1s", ",", "directions", ")", ")", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "x0s", "=", "x0s", ".", "detach", "(", ")", "\n", "\n", "lambdas", ",", "layer_change_indices_", ",", "act_pattern_x", ",", "logits_x", ",", "variation_linear", "=", "get_act_region_fn", "(", "x", ")", "\n", "_", ",", "_", ",", "act_pattern_x1", ",", "logits_x1", ",", "_", "=", "get_act_region_fn", "(", "x1s", ")", "\n", "density", "=", "torch", ".", "zeros", "(", "batch_size", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "t_start", "=", "torch", ".", "zeros", "(", "batch_size", ",", "device", "=", "device", ")", "\n", "t_end", "=", "torch", ".", "zeros_like", "(", "t_start", ")", "\n", "logits_x0", "=", "logits_x", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "\n", "# variation along d for each segment in x1s - x0s", "\n", "variation_interpolated", "=", "variation_along_direction", "(", "\n", "x0s", ",", "x1s", "[", ":", "batch_size", "]", ",", "logits_x", ",", "logits_x1", "\n", ")", "\n", "\n", "# To optimize computation, we compute each affine function at x0s", "\n", "# whenever we collect logits for x_next", "\n", "x_next", "=", "torch", ".", "cat", "(", "(", "x0s", ",", "x0s", ")", ")", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# free up GPU-memory", "\n", "x1s", "=", "x1s", ".", "to", "(", "\"cpu\"", ",", "non_blocking", "=", "True", ")", "\n", "logits_x1", "=", "logits_x1", ".", "detach", "(", ")", ".", "to", "(", "\"cpu\"", ",", "non_blocking", "=", "True", ")", "\n", "\n", "act_patterns", "=", "None", "\n", "indices_to_batches", "=", "torch", ".", "arange", "(", "batch_size", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "# preallocate results buffers", "\n", "logits", "=", "torch", ".", "full", "(", "\n", "logits_x", ".", "shape", "+", "(", "buff_size", ",", "2", ")", ",", "fill_value", "=", "np", ".", "inf", ",", "dtype", "=", "torch", ".", "float64", ",", "device", "=", "device", "\n", ")", "\n", "pts", "=", "torch", ".", "full", "(", "\n", "(", "batch_size", ",", "buff_size", ",", "2", ")", ",", "fill_value", "=", "np", ".", "inf", ",", "dtype", "=", "torch", ".", "float64", ",", "device", "=", "device", "\n", ")", "\n", "tot_vars", "=", "torch", ".", "full", "(", "\n", "logits_x", ".", "shape", "+", "(", "buff_size", ",", ")", ",", "fill_value", "=", "np", ".", "inf", ",", "dtype", "=", "torch", ".", "float64", ",", "device", "=", "device", "\n", ")", "\n", "abs_deviation", "=", "torch", ".", "full", "(", "\n", "logits_x", ".", "shape", "+", "(", "buff_size", ",", ")", ",", "fill_value", "=", "np", ".", "inf", ",", "dtype", "=", "torch", ".", "float64", ",", "device", "=", "device", "\n", ")", "\n", "logits", "[", "indices_to_batches", ",", ":", ",", "density", ",", "0", "]", "=", "logits_x", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "pts", "[", "indices_to_batches", ",", "density", ",", "0", "]", "=", "0.", "\n", "pts", "[", "indices_to_batches", ",", "density", ",", "1", "]", "=", "1.", "\n", "\n", "while", "True", ":", "\n", "# tensor of batch indices for which counting is not complete", "\n", "        ", "diff_indices", "=", "act_pattern_x", ".", "not_eq_to_idx", "(", "act_pattern_x1", ",", "indices_to_batches", ")", "\n", "if", "len", "(", "diff_indices", ")", "==", "0", ":", "\n", "            ", "break", "\n", "\n", "# filter out lambdas below sensitivity EPSILON", "\n", "", "lambdas", ",", "diff_indices", ",", "layer_change_indices_", "=", "_remove_lambdas_below_sensitivity", "(", "\n", "lambdas", ",", "diff_indices", ",", "layer_change_indices_", ",", "norm_of_directions", ",", "one", "\n", ")", "\n", "if", "len", "(", "diff_indices", ")", "==", "0", ":", "\n", "            ", "break", "\n", "\n", "", "t_end", "[", "indices_to_batches", "[", "diff_indices", "]", "]", "+=", "lambdas", ".", "view", "(", "-", "1", ")", "\n", "lambdas", "=", "lambdas", ".", "view", "(", "flatten_keep_dim", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# move along directions until the linear region boundary", "\n", "            ", "_step_along_direction", "(", "x", ",", "x_next", ",", "lambdas", ",", "directions", ",", "diff_indices", ")", "\n", "", "_", ",", "_", ",", "_", ",", "logits_next", ",", "logits_x_at_x0", "=", "get_act_region_fn", "(", "\n", "_index_directions", "(", "x_next", ",", "diff_indices", ")", ",", "retain_bias", "=", "True", "\n", ")", "\n", "\n", "batch_indices", "=", "indices_to_batches", "[", "diff_indices", "]", "\n", "deviation", "=", "absolute_deviation", "(", "\n", "t_start", "[", "batch_indices", "]", ".", "view", "(", "-", "1", ",", "1", ")", ",", "\n", "t_end", "[", "batch_indices", "]", ".", "view", "(", "-", "1", ",", "1", ")", ",", "\n", "norm_of_directions", "[", "diff_indices", "]", ".", "view", "(", "-", "1", ",", "1", ")", ",", "\n", "logits_x0", "[", "diff_indices", "]", ",", "\n", "logits_x_at_x0", ",", "\n", "variation_interpolated", "[", "batch_indices", "]", ",", "\n", "variation_linear", "[", "diff_indices", "]", "\n", ")", "\n", "\n", "variation", "=", "variation_along_direction", "(", "\n", "x", "[", "diff_indices", "]", ",", "x_next", "[", "diff_indices", "]", ",", "logits_x", "[", "diff_indices", "]", ",", "logits_next", "\n", ")", "\n", "\n", "# done with the current batch of regions, storing stats", "\n", "try", ":", "\n", "            ", "logits", "[", "batch_indices", ",", ":", ",", "density", "[", "batch_indices", "]", ",", "1", "]", "=", "logits_next", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "", "except", "IndexError", ":", "\n", "            ", "logits", "=", "torch", ".", "cat", "(", "\n", "(", "logits", ",", "torch", ".", "full", "(", "\n", "logits", ".", "shape", "[", ":", "2", "]", "+", "(", "10000", ",", "2", ")", ",", "fill_value", "=", "np", ".", "inf", ",", "device", "=", "device", ")", "\n", ")", ",", "dim", "=", "2", "\n", ")", "\n", "pts", "=", "torch", ".", "cat", "(", "\n", "(", "pts", ",", "torch", ".", "full", "(", "\n", "(", "batch_size", ",", "10000", ",", "2", ")", ",", "fill_value", "=", "np", ".", "inf", ",", "device", "=", "device", ")", "\n", ")", ",", "dim", "=", "1", "\n", ")", "\n", "tot_vars", "=", "torch", ".", "cat", "(", "\n", "(", "tot_vars", ",", "torch", ".", "full", "(", "\n", "tot_vars", ".", "shape", "[", ":", "2", "]", "+", "(", "10000", ",", ")", ",", "fill_value", "=", "np", ".", "inf", ",", "device", "=", "device", ")", "\n", ")", ",", "dim", "=", "2", "\n", ")", "\n", "abs_deviation", "=", "torch", ".", "cat", "(", "\n", "(", "abs_deviation", ",", "torch", ".", "full", "(", "\n", "abs_deviation", ".", "shape", "[", ":", "2", "]", "+", "(", "10000", ",", ")", ",", "fill_value", "=", "np", ".", "inf", ",", "device", "=", "device", ")", "\n", ")", ",", "dim", "=", "2", "\n", ")", "\n", "logits", "[", "batch_indices", ",", ":", ",", "density", "[", "batch_indices", "]", ",", "1", "]", "=", "logits_next", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "\n", "", "pts", "[", "batch_indices", ",", "density", "[", "batch_indices", "]", ",", "1", "]", "=", "lambdas", ".", "view", "(", "-", "1", ")", ".", "clone", "(", ")", "\n", "tot_vars", "[", "batch_indices", ",", ":", ",", "density", "[", "batch_indices", "]", "]", "=", "variation", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "abs_deviation", "[", "batch_indices", ",", ":", ",", "density", "[", "batch_indices", "]", "]", "=", "deviation", ".", "clone", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# cross into the next linear region", "\n", "            ", "_cross_region_boundary", "(", "x", ",", "x", ",", "lambdas", ",", "directions", ",", "norm_of_directions", ",", "epsilon", ",", "diff_indices", ")", "\n", "\n", "# check whether we overshot", "\n", "diff_indices", ",", "lambda_indices", "=", "_remove_overshoot_indices", "(", "x", ",", "x0s", ",", "norm_of_directions", ",", "diff_indices", ")", "\n", "if", "len", "(", "diff_indices", ")", "==", "0", ":", "\n", "                ", "break", "\n", "\n", "", "", "batch_indices", "=", "indices_to_batches", "[", "diff_indices", "]", "\n", "density", "[", "batch_indices", "]", "+=", "1", "\n", "t_start", "[", "batch_indices", "]", "+=", "lambdas", "[", "lambda_indices", "]", ".", "view", "(", "-", "1", ")", "\n", "try", ":", "\n", "            ", "pts", "[", "batch_indices", ",", "density", "[", "batch_indices", "]", ",", "0", "]", "=", "lambdas", "[", "lambda_indices", "]", ".", "view", "(", "-", "1", ")", ".", "clone", "(", ")", "\n", "", "except", "IndexError", ":", "\n", "            ", "logits", "=", "torch", ".", "cat", "(", "\n", "(", "logits", ",", "torch", ".", "full", "(", "\n", "logits", ".", "shape", "[", ":", "2", "]", "+", "(", "10000", ",", "2", ")", ",", "fill_value", "=", "np", ".", "inf", ",", "device", "=", "device", ")", "\n", ")", ",", "dim", "=", "2", "\n", ")", "\n", "pts", "=", "torch", ".", "cat", "(", "\n", "(", "pts", ",", "torch", ".", "full", "(", "\n", "(", "batch_size", ",", "10000", ",", "2", ")", ",", "fill_value", "=", "np", ".", "inf", ",", "device", "=", "device", ")", "\n", ")", ",", "dim", "=", "1", "\n", ")", "\n", "tot_vars", "=", "torch", ".", "cat", "(", "\n", "(", "tot_vars", ",", "torch", ".", "full", "(", "\n", "tot_vars", ".", "shape", "[", ":", "2", "]", "+", "(", "10000", ",", ")", ",", "fill_value", "=", "np", ".", "inf", ",", "device", "=", "device", ")", "\n", ")", ",", "dim", "=", "2", "\n", ")", "\n", "abs_deviation", "=", "torch", ".", "cat", "(", "\n", "(", "abs_deviation", ",", "torch", ".", "full", "(", "\n", "abs_deviation", ".", "shape", "[", ":", "2", "]", "+", "(", "10000", ",", ")", ",", "fill_value", "=", "np", ".", "inf", ",", "device", "=", "device", ")", "\n", ")", ",", "dim", "=", "2", "\n", ")", "\n", "pts", "[", "batch_indices", ",", "density", "[", "batch_indices", "]", ",", "0", "]", "=", "lambdas", "[", "lambda_indices", "]", ".", "view", "(", "-", "1", ")", ".", "clone", "(", ")", "\n", "\n", "", "x", "=", "_index_directions", "(", "x", ",", "diff_indices", ")", "\n", "x_next", "=", "_override_directions", "(", "x", ",", "x0s", ",", "diff_indices", ")", "\n", "\n", "lambdas", ",", "layer_change_indices_", ",", "act_pattern_x", ",", "logits_x", ",", "variation_linear", "=", "get_act_region_fn", "(", "x", ")", "\n", "logits", "[", "batch_indices", ",", ":", ",", "density", "[", "batch_indices", "]", ",", "0", "]", "=", "logits_x", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "pts", "[", "batch_indices", ",", "density", "[", "batch_indices", "]", ",", "1", "]", "=", "torch", ".", "zeros_like", "(", "lambdas", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "x0s", "=", "x0s", "[", "diff_indices", "]", "\n", "logits_x0", "=", "logits_x0", "[", "diff_indices", "]", "\n", "norm_of_directions", "=", "norm_of_directions", "[", "diff_indices", "]", "\n", "directions", "=", "directions", "[", "diff_indices", "]", "\n", "indices_to_batches", "=", "indices_to_batches", "[", "diff_indices", "]", "\n", "\n", "", "logits", "=", "logits", ".", "to", "(", "\"cpu\"", ",", "non_blocking", "=", "True", ")", "\n", "pts", "=", "pts", ".", "to", "(", "\"cpu\"", ",", "non_blocking", "=", "True", ")", "\n", "tot_vars", "=", "tot_vars", ".", "to", "(", "\"cpu\"", ",", "non_blocking", "=", "True", ")", "\n", "density", "=", "density", ".", "to", "(", "\"cpu\"", ",", "non_blocking", "=", "True", ")", "\n", "abs_deviation", "=", "abs_deviation", ".", "to", "(", "\"cpu\"", ",", "non_blocking", "=", "True", ")", "\n", "variation_interpolated", "=", "variation_interpolated", ".", "to", "(", "\"cpu\"", ",", "non_blocking", "=", "True", ")", "\n", "logits", "[", "torch", ".", "arange", "(", "batch_size", ")", ",", ":", ",", "density", ",", "1", "]", "=", "logits_x1", "\n", "\n", "return", "pts", ",", "logits", ",", "density", ",", "tot_vars", ",", "abs_deviation", ",", "variation_interpolated", "\n", "", ""]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.strategies.closed_augmented_path": [[8, 20], ["ValueError"], "function", ["None"], ["def", "closed_augmented_path", "(", "dataset_split", ",", "data_manager", ")", ":", "\n", "    ", "\"\"\"Note: closed paths are generated natively as a Dataset in core/data.py\n    \"\"\"", "\n", "if", "dataset_split", "==", "\"train\"", ":", "\n", "        ", "dloader", "=", "data_manager", ".", "dloader", "\n", "", "elif", "dataset_split", "==", "\"test\"", ":", "\n", "        ", "dloader", "=", "data_manager", ".", "tloader", "\n", "", "elif", "dataset_split", "==", "\"val\"", ":", "\n", "        ", "dloader", "=", "data_manager", ".", "vloader", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"No split named {}.\"", ".", "format", "(", "dataset_split", ")", ")", "\n", "", "return", "dataset_split", ",", "dloader", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.utils.use_multiprocessing": [[17, 23], ["torch.cuda.device_count"], "function", ["None"], ["def", "use_multiprocessing", "(", "cmd_args", ")", ":", "\n", "    ", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "        ", "return", "True", "\n", "", "if", "cmd_args", ".", "e_workers", ">", "1", "and", "cmd_args", ".", "e_device", "==", "\"cpu\"", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.utils.init_torch": [[24, 31], ["logger.info", "logger.info", "logger.info", "torch.set_default_dtype"], "function", ["None"], ["", "def", "init_torch", "(", "double_precision", "=", "False", ",", "cmd_args", "=", "None", ")", ":", "\n", "    ", "logger", ".", "info", "(", "\"Initializing torch\"", ")", "\n", "logger", ".", "info", "(", "\"double_precision={}\"", ".", "format", "(", "double_precision", ")", ")", "\n", "if", "cmd_args", "is", "not", "None", ":", "\n", "        ", "logger", ".", "info", "(", "\"e_device={}\"", ".", "format", "(", "cmd_args", ".", "e_device", ")", ")", "\n", "", "if", "double_precision", ":", "\n", "        ", "set_default_dtype", "(", "float64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.utils.init_prngs": [[32, 42], ["torch.manual_seed", "numpy.random.seed", "random.seed", "logger.warn"], "function", ["None"], ["", "", "def", "init_prngs", "(", "cmd_args", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "cmd_args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "cmd_args", ".", "seed", ")", "\n", "random", ".", "seed", "(", "cmd_args", ".", "seed", ")", "\n", "if", "cmd_args", ".", "e_device", "!=", "\"cpu\"", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "", "if", "\"PYTHONHASHSEED\"", "not", "in", "environ", ":", "\n", "        ", "logger", ".", "warn", "(", "\n", "\"PYTHONHASHSEED is not defined, this may cause reproducibility issues\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.utils.init_logging": [[45, 67], ["getattr", "logging.Formatter", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.FileHandler.setFormatter", "logging.StreamHandler.setFormatter", "logging.basicConfig", "logging.getLogger", "utils.use_multiprocessing", "log_level.upper", "isinstance", "ValueError", "install_mp_handler"], "function", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.utils.use_multiprocessing"], ["", "", "def", "init_logging", "(", "logger_name", ",", "logfile", ",", "log_level", ":", "str", ",", "cmd_args", ")", ":", "\n", "    ", "numeric_level", "=", "getattr", "(", "logging", ",", "log_level", ".", "upper", "(", ")", ",", "None", ")", "\n", "if", "not", "isinstance", "(", "numeric_level", ",", "int", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Invalid log level: %s\"", "%", "log_level", ")", "\n", "\n", "", "formatter", "=", "logging", ".", "Formatter", "(", "\"%(asctime)s %(name)s %(levelname)s: %(message)s\"", ")", "\n", "\n", "f_handler", "=", "logging", ".", "FileHandler", "(", "logfile", ")", "\n", "f_handler", ".", "setLevel", "(", "numeric_level", ")", "\n", "c_handler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "c_handler", ".", "setLevel", "(", "numeric_level", ")", "\n", "f_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "c_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "\n", "logging", ".", "basicConfig", "(", "level", "=", "numeric_level", ",", "handlers", "=", "[", "f_handler", ",", "c_handler", "]", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "logger_name", ")", "\n", "\n", "if", "use_multiprocessing", "(", "cmd_args", ")", ":", "\n", "        ", "from", "multiprocessing_logging", "import", "install_mp_handler", "\n", "install_mp_handler", "(", "logger", ")", "\n", "\n", "", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.utils.get_set_start_method": [[69, 77], ["logger.info", "set_method", "utils.get_set_start_method.do_set_start_method"], "function", ["None"], ["", "def", "get_set_start_method", "(", "cmd_opts", ")", ":", "\n", "    ", "def", "do_set_start_method", "(", "set_method", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"Setting start_method to {}\"", ".", "format", "(", "cmd_opts", ".", "start_method", ")", ")", "\n", "set_method", "(", "cmd_opts", ".", "start_method", ")", "\n", "\n", "", "if", "cmd_opts", ".", "e_device", "==", "\"cpu\"", ":", "\n", "        ", "return", "lambda", ":", "do_set_start_method", "(", "set_start_method", ")", "\n", "", "return", "lambda", ":", "do_set_start_method", "(", "torch", ".", "multiprocessing", ".", "set_start_method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.utils.log_dir_base_args": [[79, 83], ["None"], "function", ["None"], ["", "def", "log_dir_base_args", "(", "base", ",", "name", "=", "None", ")", ":", "\n", "    ", "if", "name", ":", "\n", "        ", "base", "=", "\"{}/{}\"", ".", "format", "(", "base", ",", "name", ")", "\n", "", "return", "base", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.utils.log_dir_base": [[85, 87], ["utils.log_dir_base_args"], "function", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.utils.log_dir_base_args"], ["", "def", "log_dir_base", "(", "cmd_args", ")", ":", "\n", "    ", "return", "log_dir_base_args", "(", "cmd_args", ".", "e_save_dir", ",", "cmd_args", ".", "e_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.utils.log_additions": [[89, 103], ["name.strip", "str", "str"], "function", ["None"], ["", "def", "log_additions", "(", "additions", ",", "l1reg", ",", "l2reg", ",", "augmentation", ",", "dropout", "=", "None", ",", "weight_decay", "=", "None", ")", ":", "\n", "    ", "additions_list", "=", "[", "item", "+", "\"_\"", "+", "str", "(", "dropout", ")", "if", "(", "item", "==", "\"dropout\"", "and", "dropout", "is", "not", "None", ")", "else", "item", "for", "item", "in", "additions", "]", "\n", "name", "=", "\"-\"", ".", "join", "(", "additions_list", ")", "\n", "if", "l1reg", ":", "\n", "        ", "name", "=", "\"{}-l1-{:0.5f}\"", ".", "format", "(", "name", ",", "l1reg", ")", "\n", "", "if", "l2reg", ":", "\n", "        ", "name", "=", "\"{}-l2-{:0.5f}\"", ".", "format", "(", "name", ",", "l2reg", ")", "\n", "", "if", "augmentation", ":", "\n", "        ", "name", "=", "\"{}-{}\"", ".", "format", "(", "name", ",", "\"augmentation\"", ")", "\n", "", "if", "weight_decay", "is", "not", "None", ":", "\n", "        ", "name", "=", "\"{}-{}\"", ".", "format", "(", "name", ",", "\"wd_\"", "+", "str", "(", "weight_decay", ")", ")", "\n", "", "if", "name", "==", "\"\"", ":", "\n", "        ", "return", "\"default\"", "\n", "", "return", "name", ".", "strip", "(", "\"-\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.utils.all_log_dir_args": [[105, 137], ["utils.log_dir_base_args", "utils.log_additions", "sub_dir_name.strip"], "function", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.utils.log_dir_base_args", "home.repos.pwc.inspect_result.magamba_linear-regions.core.utils.log_additions"], ["", "def", "all_log_dir_args", "(", "\n", "base", ",", "\n", "model", ",", "\n", "data", ",", "\n", "label_noise", ",", "\n", "seed", ",", "\n", "l1reg", "=", "None", ",", "\n", "l2reg", "=", "None", ",", "\n", "name", "=", "None", ",", "\n", "augmentation", "=", "None", ",", "\n", "model_additions", "=", "(", ")", ",", "\n", "dropout", "=", "0.", ",", "\n", "weight_decay", "=", "0.", "\n", ")", ":", "\n", "    ", "if", "weight_decay", "==", "0.", ":", "\n", "        ", "weight_decay", "=", "None", "\n", "", "if", "dropout", "==", "0.", ":", "\n", "        ", "dropout", "=", "None", "\n", "", "dir_name", "=", "\"{}/{}/{}/{}\"", ".", "format", "(", "\n", "log_dir_base_args", "(", "base", ",", "name", ")", ",", "\n", "model", ",", "\n", "data", ",", "\n", "log_additions", "(", "model_additions", ",", "l1reg", ",", "l2reg", ",", "augmentation", ",", "dropout", ",", "weight_decay", ")", ",", "\n", ")", "\n", "sub_dir_name", "=", "\"\"", "\n", "if", "label_noise", "!=", "0", ":", "\n", "        ", "sub_dir_name", "=", "\"noise-{:.4f}\"", ".", "format", "(", "label_noise", ")", "\n", "", "if", "seed", "is", "not", "None", ":", "\n", "        ", "sub_dir_name", "=", "\"-\"", ".", "join", "(", "[", "sub_dir_name", ",", "\"seed-{}\"", ".", "format", "(", "seed", ")", "]", ")", "\n", "", "else", ":", "\n", "        ", "sub_dir_name", "=", "\"-\"", ".", "join", "(", "[", "sub_dir_name", ",", "\"no_seed\"", "]", ")", "\n", "", "return", "\"{}/{}\"", ".", "format", "(", "dir_name", ",", "sub_dir_name", ".", "strip", "(", "\"-\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.utils.all_log_dir": [[139, 153], ["utils.all_log_dir_args"], "function", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.utils.all_log_dir_args"], ["", "def", "all_log_dir", "(", "cmd_opts", ")", ":", "\n", "    ", "return", "all_log_dir_args", "(", "\n", "cmd_opts", ".", "e_save_dir", ",", "\n", "cmd_opts", ".", "model", ",", "\n", "cmd_opts", ".", "data", ",", "\n", "cmd_opts", ".", "label_noise", ",", "\n", "cmd_opts", ".", "seed", ",", "\n", "cmd_opts", ".", "l1_regularization", ",", "\n", "cmd_opts", ".", "l2_regularization", ",", "\n", "cmd_opts", ".", "e_name", ",", "\n", "cmd_opts", ".", "augmentation", ",", "\n", "cmd_opts", ".", "model_additions", ",", "\n", "cmd_opts", ".", "dropout", ",", "\n", "cmd_opts", ".", "weight_decay", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.utils.prepare_dirs": [[155, 166], ["utils.all_log_dir", "os.path.join", "utils.init_logging", "os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.utils.all_log_dir", "home.repos.pwc.inspect_result.magamba_linear-regions.core.utils.init_logging"], ["", "def", "prepare_dirs", "(", "args", ")", ":", "\n", "    ", "\"\"\"Prepare directories to store results and logs\"\"\"", "\n", "import", "os", "\n", "\n", "logs_path", "=", "all_log_dir", "(", "args", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "logs_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "logs_path", ")", "\n", "", "logfile", "=", "os", ".", "path", ".", "join", "(", "logs_path", ",", "args", ".", "logfile", ")", "\n", "# configure root logger", "\n", "init_logging", "(", "None", ",", "logfile", ",", "args", ".", "log_level", ",", "args", ")", "\n", "return", "logs_path", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.utils.checkpoint_dir_args": [[169, 186], ["utils.all_log_dir_args"], "function", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.utils.all_log_dir_args"], ["", "def", "checkpoint_dir_args", "(", "\n", "base", ",", "\n", "model", ",", "\n", "data", ",", "\n", "label_noise", ",", "\n", "seed", ",", "\n", "l1reg", "=", "None", ",", "\n", "l2reg", "=", "None", ",", "\n", "name", "=", "None", ",", "\n", "augmentation", "=", "None", ",", "\n", "model_additions", "=", "(", ")", ",", "\n", "dropout", "=", "0.", ",", "\n", "weight_decay", "=", "0.", "\n", ")", ":", "\n", "    ", "return", "\"{}/checkpoints\"", ".", "format", "(", "\n", "all_log_dir_args", "(", "\n", "base", ",", "model", ",", "data", ",", "label_noise", ",", "seed", ",", "l1reg", ",", "l2reg", ",", "name", ",", "augmentation", ",", "model_additions", ",", "dropout", ",", "weight_decay", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.utils.checkpoint_dir": [[190, 204], ["utils.checkpoint_dir_args"], "function", ["home.repos.pwc.inspect_result.magamba_linear-regions.core.utils.checkpoint_dir_args"], ["", "def", "checkpoint_dir", "(", "cmd_opts", ")", ":", "\n", "    ", "return", "checkpoint_dir_args", "(", "\n", "cmd_opts", ".", "e_save_dir", ",", "\n", "cmd_opts", ".", "model", ",", "\n", "cmd_opts", ".", "data", ",", "\n", "cmd_opts", ".", "label_noise", ",", "\n", "cmd_opts", ".", "seed", ",", "\n", "cmd_opts", ".", "l1_regularization", ",", "\n", "cmd_opts", ".", "l2_regularization", ",", "\n", "cmd_opts", ".", "e_name", ",", "\n", "cmd_opts", ".", "augmentation", ",", "\n", "cmd_opts", ".", "model_additions", ",", "\n", "cmd_opts", ".", "dropout", ",", "\n", "cmd_opts", ".", "weight_decay", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.utils.global_iteration_from_engine": [[207, 212], ["None"], "function", ["None"], ["", "def", "global_iteration_from_engine", "(", "engine", ")", ":", "\n", "    ", "def", "_wrap_global_step", "(", "engine_", ",", "event_name_", ")", ":", "\n", "        ", "return", "engine", ".", "state", ".", "iteration", "\n", "\n", "", "return", "_wrap_global_step", "\n", "\n"]], "home.repos.pwc.inspect_result.magamba_linear-regions.core.utils.normalize": [[225, 263], ["torch.as_tensor", "torch.as_tensor", "tensor.clone.sub_().div_", "isinstance", "TypeError", "ValueError", "tensor.clone.clone", "ValueError", "mean.view.view", "std.view.view", "tensor.clone.sub_", "type", "tensor.clone.size"], "function", ["None"], ["", "def", "normalize", "(", "tensor", ":", "Tensor", ",", "mean", ":", "List", "[", "float", "]", ",", "std", ":", "List", "[", "float", "]", ",", "inplace", ":", "bool", "=", "False", ")", "->", "Tensor", ":", "\n", "    ", "\"\"\"Normalize a tensor image with mean and standard deviation.\n\n    .. note::\n        This transform acts out of place by default, i.e., it does not mutates the input tensor.\n\n    See :class:`~torchvision.transforms.Normalize` for more details.\n\n    Args:\n        tensor (Tensor): Tensor image of size (C, H, W) or (B, C, H, W) to be normalized.\n        mean (sequence): Sequence of means for each channel.\n        std (sequence): Sequence of standard deviations for each channel.\n        inplace(bool,optional): Bool to make this operation inplace.\n\n    Returns:\n        Tensor: Normalized Tensor image.\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "tensor", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'Input tensor should be a torch tensor. Got {}.'", ".", "format", "(", "type", "(", "tensor", ")", ")", ")", "\n", "\n", "", "if", "tensor", ".", "ndim", "<", "3", ":", "\n", "        ", "raise", "ValueError", "(", "'Expected tensor to be a tensor image of size (..., C, H, W). Got tensor.size() = '", "\n", "'{}.'", ".", "format", "(", "tensor", ".", "size", "(", ")", ")", ")", "\n", "\n", "", "if", "not", "inplace", ":", "\n", "        ", "tensor", "=", "tensor", ".", "clone", "(", ")", "\n", "\n", "", "dtype", "=", "tensor", ".", "dtype", "\n", "mean", "=", "torch", ".", "as_tensor", "(", "mean", ",", "dtype", "=", "dtype", ",", "device", "=", "tensor", ".", "device", ")", "\n", "std", "=", "torch", ".", "as_tensor", "(", "std", ",", "dtype", "=", "dtype", ",", "device", "=", "tensor", ".", "device", ")", "\n", "if", "(", "std", "==", "0", ")", ".", "any", "(", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'std evaluated to zero after conversion to {}, leading to division by zero.'", ".", "format", "(", "dtype", ")", ")", "\n", "", "if", "mean", ".", "ndim", "==", "1", ":", "\n", "        ", "mean", "=", "mean", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "", "if", "std", ".", "ndim", "==", "1", ":", "\n", "        ", "std", "=", "std", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "", "tensor", ".", "sub_", "(", "mean", ")", ".", "div_", "(", "std", ")", "\n", "return", "tensor", "\n", "\n"]]}