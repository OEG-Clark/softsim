{"home.repos.pwc.inspect_result.kunzhan_MTGCN.None.models.GCN.__init__": [[7, 13], ["torch.Module.__init__", "layers.GraphConvolution", "layers.GraphConvolution"], "methods", ["home.repos.pwc.inspect_result.kunzhan_MTGCN.None.layers.GraphConvolution.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nfeat", ",", "nhid", ",", "nclass", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "GCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "gc1", "=", "GraphConvolution", "(", "nfeat", ",", "nhid", ")", "\n", "self", ".", "gc2", "=", "GraphConvolution", "(", "nhid", ",", "nclass", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.kunzhan_MTGCN.None.models.GCN.forward": [[14, 19], ["torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "models.GCN.gc2", "models.GCN.gc1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "adj", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "gc1", "(", "x", ",", "adj", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "gc2", "(", "x", ",", "adj", ")", "\n", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.kunzhan_MTGCN.None.train.twoselftrianmodel": [[34, 118], ["utils.load_data", "numpy.random.randint", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "models.GCN", "models.GCN", "torch.Adam", "torch.Adam", "models.GCN.cuda", "models.GCN.cuda", "range", "print", "print", "features.cuda.cuda", "adj.cuda.cuda", "labels.cuda.cuda", "idx_train.cuda.cuda", "idx_val.cuda.cuda", "idx_test.cuda.cuda", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "models.GCN.parameters", "models.GCN.parameters", "models.GCN.train", "models.GCN.train", "optim.Adam.zero_grad", "optim.Adam.zero_grad", "models.GCN.", "models.GCN.", "model_one_loss.backward", "model_two_loss.backward", "optim.Adam.step", "optim.Adam.step", "utils.accuracy", "utils.accuracy", "utils.accuracy", "utils.accuracy", "utils.accuracy2", "utils.accuracy.item", "utils.accuracy.item", "utils.mutuallearning", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "models.GCN.eval", "models.GCN.", "utils.accuracy", "models.GCN.eval", "models.GCN.", "utils.accuracy", "torch.softmax", "torch.softmax", "print", "labels.cuda.max().item", "labels.cuda.max().item", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.softmax", "torch.softmax", "model_one_loss.item", "model_two_loss.item", "utils.accuracy.item", "utils.accuracy.item", "utils.accuracy.item", "utils.accuracy.item", "labels.cuda.max", "labels.cuda.max"], "function", ["home.repos.pwc.inspect_result.kunzhan_MTGCN.None.utils.load_data", "home.repos.pwc.inspect_result.kunzhan_MTGCN.None.utils.accuracy", "home.repos.pwc.inspect_result.kunzhan_MTGCN.None.utils.accuracy", "home.repos.pwc.inspect_result.kunzhan_MTGCN.None.utils.accuracy", "home.repos.pwc.inspect_result.kunzhan_MTGCN.None.utils.accuracy", "home.repos.pwc.inspect_result.kunzhan_MTGCN.None.utils.accuracy2", "home.repos.pwc.inspect_result.kunzhan_MTGCN.None.utils.mutuallearning", "home.repos.pwc.inspect_result.kunzhan_MTGCN.None.utils.accuracy", "home.repos.pwc.inspect_result.kunzhan_MTGCN.None.utils.accuracy"], ["def", "twoselftrianmodel", "(", ")", ":", "\n", "\t", "adj", ",", "features", ",", "labels", ",", "idx_train", ",", "idx_val", ",", "idx_test", ",", "t", "=", "load_data", "(", "args", ".", "dataset", ",", "args", ".", "numperclass", ",", "timeseta", "=", "args", ".", "timeseta", ")", "\n", "\n", "if", "args", ".", "cuda", ":", "\n", "\t\t", "features", "=", "features", ".", "cuda", "(", ")", "\n", "adj", "=", "adj", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "idx_train", "=", "idx_train", ".", "cuda", "(", ")", "\n", "idx_val", "=", "idx_val", ".", "cuda", "(", ")", "\n", "idx_test", "=", "idx_test", ".", "cuda", "(", ")", "\n", "\n", "\n", "", "seed", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "if", "args", ".", "cuda", ":", "\n", "\t\t", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "\n", "", "model_one", "=", "GCN", "(", "nfeat", "=", "features", ".", "shape", "[", "1", "]", ",", "nhid", "=", "args", ".", "hidden", ",", "nclass", "=", "labels", ".", "max", "(", ")", ".", "item", "(", ")", "+", "1", ",", "dropout", "=", "args", ".", "dropout", ")", "\n", "model_two", "=", "GCN", "(", "nfeat", "=", "features", ".", "shape", "[", "1", "]", ",", "nhid", "=", "args", ".", "hidden", ",", "nclass", "=", "labels", ".", "max", "(", ")", ".", "item", "(", ")", "+", "1", ",", "dropout", "=", "args", ".", "dropout", ")", "\n", "\n", "optim_one", "=", "optim", ".", "Adam", "(", "model_one", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "optim_two", "=", "optim", ".", "Adam", "(", "model_two", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "model_one", ".", "cuda", "(", ")", "\n", "model_two", ".", "cuda", "(", ")", "\n", "\n", "max_train_acc1", "=", "0", "\n", "max_train_acc2", "=", "0", "\n", "\n", "EPOCH", "=", "400", "\n", "for", "epoch", "in", "range", "(", "EPOCH", ")", ":", "\n", "\t\t", "model_one", ".", "train", "(", ")", "\n", "model_two", ".", "train", "(", ")", "\n", "\n", "optim_one", ".", "zero_grad", "(", ")", "\n", "optim_two", ".", "zero_grad", "(", ")", "\n", "\n", "model_one_output", "=", "model_one", "(", "features", ",", "adj", ")", "\n", "model_two_output", "=", "model_two", "(", "features", ",", "adj", ")", "\n", "\n", "if", "epoch", "<", "200", ":", "\n", "\t\t\t", "model_one_loss", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "(", "model_one_output", "[", "idx_train", "]", ",", "labels", "[", "idx_train", "]", ")", "\n", "model_two_loss", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "(", "model_two_output", "[", "idx_train", "]", ",", "labels", "[", "idx_train", "]", ")", "\n", "", "else", ":", "\n", "\t\t\t", "model_one_loss", ",", "model_two_loss", "=", "mutuallearning", "(", "model_one_output", ",", "model_two_output", ",", "idx_train", ",", "idx_test", ",", "labels", ",", "t", "[", "0", "]", ")", "\n", "\n", "", "model_one_loss", ".", "backward", "(", ")", "\n", "model_two_loss", ".", "backward", "(", ")", "\n", "\n", "optim_one", ".", "step", "(", ")", "\n", "optim_two", ".", "step", "(", ")", "\n", "\n", "model_one_val", "=", "accuracy", "(", "F", ".", "softmax", "(", "model_one_output", "[", "idx_val", "]", ",", "1", ")", ",", "labels", "[", "idx_val", "]", ")", "\n", "model_two_val", "=", "accuracy", "(", "F", ".", "softmax", "(", "model_two_output", "[", "idx_val", "]", ",", "1", ")", ",", "labels", "[", "idx_val", "]", ")", "\n", "\n", "train_acc1", "=", "accuracy", "(", "F", ".", "softmax", "(", "model_one_output", "[", "idx_train", "]", ",", "1", ")", ",", "labels", "[", "idx_train", "]", ")", "\n", "train_acc2", "=", "accuracy", "(", "F", ".", "softmax", "(", "model_two_output", "[", "idx_train", "]", ",", "1", ")", ",", "labels", "[", "idx_train", "]", ")", "\n", "\n", "if", "train_acc1", ">=", "max_train_acc1", ":", "\n", "\t\t\t", "max_train_acc1", "=", "train_acc1", "\n", "model_one", ".", "eval", "(", ")", "\n", "model_one_test_output", "=", "model_one", "(", "features", ",", "adj", ")", "\n", "model_one_testacc", "=", "accuracy", "(", "F", ".", "softmax", "(", "model_one_test_output", "[", "idx_test", "]", ",", "1", ")", ",", "labels", "[", "idx_test", "]", ")", "\n", "\n", "", "if", "train_acc2", ">=", "max_train_acc2", ":", "\n", "\t\t\t", "max_train_acc2", "=", "train_acc2", "\n", "model_two", ".", "eval", "(", ")", "\n", "model_two_test_output", "=", "model_two", "(", "features", ",", "adj", ")", "\n", "model_two_testacc", "=", "accuracy", "(", "F", ".", "softmax", "(", "model_two_test_output", "[", "idx_test", "]", ",", "1", ")", ",", "labels", "[", "idx_test", "]", ")", "\n", "", "model_all_val", "=", "accuracy2", "(", "F", ".", "softmax", "(", "model_one_test_output", "[", "idx_test", "]", ",", "1", ")", ",", "F", ".", "softmax", "(", "model_two_test_output", "[", "idx_test", "]", ",", "1", ")", ",", "labels", "[", "idx_test", "]", ")", "\n", "\n", "if", "(", "epoch", "+", "1", ")", "%", "20", "==", "0", ":", "\n", "\t\t\t", "print", "(", "'Epoch: {:04d}'", ".", "format", "(", "epoch", "+", "1", ")", ",", "\n", "'Model_1_loss: {:.4f}'", ".", "format", "(", "model_one_loss", ".", "item", "(", ")", ")", ",", "\n", "'Model_2_loss: {:.4f}'", ".", "format", "(", "model_two_loss", ".", "item", "(", ")", ")", ",", "\n", "'Model_1_trainacc: {:.4f}'", ".", "format", "(", "train_acc1", ".", "item", "(", ")", ")", ",", "\n", "'Model_2_trainacc: {:.4f}'", ".", "format", "(", "train_acc2", ".", "item", "(", ")", ")", ",", "\n", "'Model_1_val:{:.4f}'", ".", "format", "(", "model_one_val", ".", "item", "(", ")", ")", ",", "\n", "'Model_2_val:{:.4f}'", ".", "format", "(", "model_two_val", ".", "item", "(", ")", ")", ")", "\n", "\n", "", "", "print", "(", "'Model_one_test:{:.4f}'", ".", "format", "(", "model_one_testacc", ")", ",", "'Model_two_test:{:.4f}'", ".", "format", "(", "model_two_testacc", ")", ")", "\n", "print", "(", "'added by two output: {:.4f}'", ".", "format", "(", "model_all_val", ")", ")", "\n", "return", "model_one_testacc", ".", "item", "(", ")", ",", "model_two_testacc", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kunzhan_MTGCN.None.train.main": [[119, 144], ["range", "range", "numpy.array", "numpy.array", "numpy.array", "numpy.mean", "numpy.mean", "numpy.mean", "print", "print", "MaxMean.append", "print", "print", "print", "train..", "np.array.append", "np.array.append", "np.array.append", "numpy.max", "numpy.max"], "function", ["None"], ["", "def", "main", "(", ")", ":", "\n", "\t", "MaxMean", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "10", ")", ":", "\n", "\t    ", "model1acc", "=", "[", "]", "\n", "model2acc", "=", "[", "]", "\n", "maxacc", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "args", ".", "niter", ")", ":", "\n", "\t        ", "print", "(", "i", "+", "1", ")", "\n", "acc1", ",", "acc2", "=", "twoselftrianmodel", "(", ")", "\n", "model1acc", ".", "append", "(", "acc1", ")", "\n", "model2acc", ".", "append", "(", "acc2", ")", "\n", "maxacc", ".", "append", "(", "np", ".", "max", "(", "(", "acc1", ",", "acc2", ")", ")", ")", "\n", "\n", "", "model1acc", "=", "np", ".", "array", "(", "model1acc", ")", "\n", "model2acc", "=", "np", ".", "array", "(", "model2acc", ")", "\n", "maxacc", "=", "np", ".", "array", "(", "maxacc", ")", "\n", "\n", "meanmodel1acc", "=", "np", ".", "mean", "(", "model1acc", ")", "\n", "meanmodel2acc", "=", "np", ".", "mean", "(", "model2acc", ")", "\n", "meanmaxacc", "=", "np", ".", "mean", "(", "maxacc", ")", "\n", "print", "(", "'Model1 Acc: %f Model2 Acc: %f'", "%", "(", "meanmodel1acc", ",", "meanmodel2acc", ")", ")", "\n", "print", "(", "\"Maxacc Mean: %f\"", "%", "meanmaxacc", ")", "\n", "MaxMean", ".", "append", "(", "meanmaxacc", ")", "\n", "print", "(", "MaxMean", ")", "\n", "print", "(", "'Maxacc of all experiments:'", ",", "np", ".", "max", "(", "MaxMean", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kunzhan_MTGCN.None.layers.GraphConvolution.__init__": [[8, 18], ["super().__init__", "torch.nn.Parameter", "layers.GraphConvolution.reset_parameters", "torch.FloatTensor", "torch.nn.Parameter", "layers.GraphConvolution.register_parameter", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.kunzhan_MTGCN.None.layers.GraphConvolution.__init__", "home.repos.pwc.inspect_result.kunzhan_MTGCN.None.layers.GraphConvolution.reset_parameters"], ["def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "GraphConvolution", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "weight", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "in_features", ",", "out_features", ")", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "out_features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kunzhan_MTGCN.None.layers.GraphConvolution.reset_parameters": [[19, 25], ["layers.GraphConvolution.weight.data.uniform_", "math.sqrt", "layers.GraphConvolution.bias.data.uniform_", "layers.GraphConvolution.weight.size"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "weight", ".", "size", "(", "1", ")", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "# torch.nn.init.xavier_uniform_(self.weight.data)", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kunzhan_MTGCN.None.layers.GraphConvolution.forward": [[26, 33], ["torch.mm", "torch.spmm"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "adj", ")", ":", "\n", "        ", "support", "=", "torch", ".", "mm", "(", "input", ",", "self", ".", "weight", ")", "\n", "output", "=", "torch", ".", "spmm", "(", "adj", ",", "support", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "return", "output", "+", "self", ".", "bias", "\n", "", "else", ":", "\n", "            ", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.kunzhan_MTGCN.None.layers.GraphConvolution.__repr__": [[34, 38], ["str", "str"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "' ('", "+", "str", "(", "self", ".", "in_features", ")", "+", "' -> '", "+", "str", "(", "self", ".", "out_features", ")", "+", "')'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kunzhan_MTGCN.None.utils.encode_onehot": [[10, 17], ["set", "numpy.array", "list", "numpy.identity", "enumerate", "map", "len"], "function", ["None"], ["def", "encode_onehot", "(", "labels", ")", ":", "\n", "    ", "classes", "=", "set", "(", "labels", ")", "\n", "classes_dict", "=", "{", "c", ":", "np", ".", "identity", "(", "len", "(", "classes", ")", ")", "[", "i", ",", ":", "]", "for", "i", ",", "c", "in", "\n", "enumerate", "(", "classes", ")", "}", "\n", "labels_onehot", "=", "np", ".", "array", "(", "list", "(", "map", "(", "classes_dict", ".", "get", ",", "labels", ")", ")", ",", "\n", "dtype", "=", "np", ".", "int32", ")", "\n", "return", "labels_onehot", "\n", "\n"]], "home.repos.pwc.inspect_result.kunzhan_MTGCN.None.utils.parse_index_file": [[18, 24], ["open", "index.append", "int", "line.strip"], "function", ["None"], ["", "def", "parse_index_file", "(", "filename", ")", ":", "\n", "    ", "\"\"\"Parse index file.\"\"\"", "\n", "index", "=", "[", "]", "\n", "for", "line", "in", "open", "(", "filename", ")", ":", "\n", "        ", "index", ".", "append", "(", "int", "(", "line", ".", "strip", "(", ")", ")", ")", "\n", "", "return", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.kunzhan_MTGCN.None.utils.preprocess_features": [[25, 42], ["numpy.array", "numpy.power().flatten", "scipy.diags", "sp.diags.dot", "sp.csr_matrix.sum", "TfidfTransformer", "TfidfTransformer.fit_transform", "numpy.power", "numpy.isinf", "scipy.csr_matrix", "ValueError", "scipy.eye", "str"], "function", ["None"], ["", "def", "preprocess_features", "(", "features", ",", "feature_type", "=", "'bow'", ")", ":", "\n", "    ", "if", "feature_type", "==", "'bow'", ":", "\n", "# \"\"\"Row-normalize feature matrix and convert to tuple representation\"\"\"", "\n", "        ", "rowsum", "=", "np", ".", "array", "(", "features", ".", "sum", "(", "1", ")", ")", "\n", "r_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "1", ")", ".", "flatten", "(", ")", "\n", "r_inv", "[", "np", ".", "isinf", "(", "r_inv", ")", "]", "=", "0.", "\n", "r_mat_inv", "=", "sp", ".", "diags", "(", "r_inv", ")", "\n", "features", "=", "r_mat_inv", ".", "dot", "(", "features", ")", "\n", "# normalize(features, norm='l1', axis=1, copy=False)", "\n", "", "elif", "feature_type", "==", "'tfidf'", ":", "\n", "        ", "transformer", "=", "TfidfTransformer", "(", "norm", "=", "None", ",", "use_idf", "=", "True", ",", "smooth_idf", "=", "True", ",", "sublinear_tf", "=", "False", ")", "\n", "features", "=", "transformer", ".", "fit_transform", "(", "features", ")", "\n", "", "elif", "feature_type", "==", "'none'", ":", "\n", "        ", "features", "=", "sp", ".", "csr_matrix", "(", "sp", ".", "eye", "(", "features", ".", "shape", "[", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Invalid feature type: '", "+", "str", "(", "feature_type", ")", ")", "\n", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.kunzhan_MTGCN.None.utils.normalize_adj": [[43, 62], ["scipy.coo_matrix", "numpy.array", "numpy.power().flatten", "scipy.diags", "sp.coo_matrix.dot().transpose().dot().tocoo", "sp.coo_matrix.sum", "numpy.array", "numpy.power().flatten", "scipy.diags", "sp.diags.dot", "numpy.power", "numpy.isinf", "sp.coo_matrix.dot().transpose().dot", "sp.coo_matrix.sum", "numpy.power", "numpy.isinf", "sp.coo_matrix.dot().transpose", "sp.coo_matrix.dot"], "function", ["None"], ["", "def", "normalize_adj", "(", "adj", ",", "type", "=", "'sym'", ")", ":", "\n", "    ", "\"\"\"Symmetrically normalize adjacency matrix.\"\"\"", "\n", "if", "type", "==", "'sym'", ":", "\n", "        ", "adj", "=", "sp", ".", "coo_matrix", "(", "adj", ")", "\n", "rowsum", "=", "np", ".", "array", "(", "adj", ".", "sum", "(", "1", ")", ")", "\n", "# d_inv_sqrt = np.power(rowsum, -0.5)", "\n", "# d_inv_sqrt[np.isinf(d_inv_sqrt)] = 0.", "\n", "# return adj*d_inv_sqrt*d_inv_sqrt.flatten()", "\n", "d_inv_sqrt", "=", "np", ".", "power", "(", "rowsum", ",", "-", "0.5", ")", ".", "flatten", "(", ")", "\n", "d_inv_sqrt", "[", "np", ".", "isinf", "(", "d_inv_sqrt", ")", "]", "=", "0.", "\n", "d_mat_inv_sqrt", "=", "sp", ".", "diags", "(", "d_inv_sqrt", ")", "\n", "return", "adj", ".", "dot", "(", "d_mat_inv_sqrt", ")", ".", "transpose", "(", ")", ".", "dot", "(", "d_mat_inv_sqrt", ")", ".", "tocoo", "(", ")", "\n", "", "elif", "type", "==", "'rw'", ":", "\n", "        ", "rowsum", "=", "np", ".", "array", "(", "adj", ".", "sum", "(", "1", ")", ")", "\n", "d_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "1.0", ")", ".", "flatten", "(", ")", "\n", "d_inv", "[", "np", ".", "isinf", "(", "d_inv", ")", "]", "=", "0.", "\n", "d_mat_inv", "=", "sp", ".", "diags", "(", "d_inv", ")", "\n", "adj_normalized", "=", "d_mat_inv", ".", "dot", "(", "adj", ")", "\n", "return", "adj_normalized", "\n", "\n"]], "home.repos.pwc.inspect_result.kunzhan_MTGCN.None.utils.load_data": [[63, 159], ["np.vstack.copy", "numpy.arange", "print", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor", "torch.LongTensor", "utils.normalize_adj", "utils.sparse_mx_to_torch_sparse_tensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "sio.loadmat", "data[].flatten", "numpy.zeros", "features[].copy", "range", "tuple", "networkx.adjacency_matrix", "utils.parse_index_file", "numpy.sort", "scipy.vstack().tolil", "numpy.vstack", "utils.preprocess_features", "len", "numpy.random.shuffle", "range", "numpy.sum", "numpy.float", "numpy.array", "numpy.argmax", "scipy.eye", "len", "networkx.from_dict_of_lists", "range", "scipy.lil_matrix", "numpy.zeros", "range", "range", "len", "preprocess_features.todense", "open", "min", "scipy.vstack", "torch.LongTensor.append", "len", "len", "numpy.float", "labels[].sum", "numpy.max", "numpy.arange", "data[].flatten.astype", "objects.append", "objects.append", "max", "len", "len", "nx.adjacency_matrix.sum", "pickle.load", "pickle.load", "labels[].sum", "min", "min"], "function", ["home.repos.pwc.inspect_result.kunzhan_MTGCN.None.utils.normalize_adj", "home.repos.pwc.inspect_result.kunzhan_MTGCN.None.utils.sparse_mx_to_torch_sparse_tensor", "home.repos.pwc.inspect_result.kunzhan_MTGCN.None.utils.parse_index_file", "home.repos.pwc.inspect_result.kunzhan_MTGCN.None.utils.preprocess_features"], ["", "", "def", "load_data", "(", "dataset_str", ",", "train_size", ",", "validation_size", "=", "500", ",", "timeseta", "=", "3", ",", "validate", "=", "False", ",", "shuffle", "=", "True", ")", ":", "\n", "\t", "\"\"\"Load data.\"\"\"", "\n", "if", "dataset_str", "in", "[", "'USPS-Fea'", ",", "'CIFAR-Fea'", ",", "'Cifar_10000_fea'", ",", "'Cifar_R10000_fea'", ",", "'MNIST-Fea'", ",", "'MNIST-10000'", ",", "'MNIST-5000'", "]", ":", "\n", "\t\t", "data", "=", "sio", ".", "loadmat", "(", "'data/{}.mat'", ".", "format", "(", "dataset_str", ")", ")", "\n", "l", "=", "data", "[", "'labels'", "]", ".", "flatten", "(", ")", "\n", "labels", "=", "np", ".", "zeros", "(", "[", "l", ".", "shape", "[", "0", "]", ",", "np", ".", "max", "(", "data", "[", "'labels'", "]", ")", "+", "1", "]", ")", "\n", "labels", "[", "np", ".", "arange", "(", "l", ".", "shape", "[", "0", "]", ")", ",", "l", ".", "astype", "(", "np", ".", "int8", ")", "]", "=", "1", "\n", "features", "=", "data", "[", "'X'", "]", "\n", "sample", "=", "features", "[", "0", "]", ".", "copy", "(", ")", "\n", "adj", "=", "data", "[", "'G'", "]", "\n", "", "else", ":", "\n", "\t\t", "names", "=", "[", "'x'", ",", "'y'", ",", "'tx'", ",", "'ty'", ",", "'allx'", ",", "'ally'", ",", "'graph'", "]", "\n", "objects", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "names", ")", ")", ":", "\n", "\t\t\t", "with", "open", "(", "\"data/ind.{}.{}\"", ".", "format", "(", "dataset_str", ",", "names", "[", "i", "]", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "\t\t\t\t", "if", "sys", ".", "version_info", ">", "(", "3", ",", "0", ")", ":", "\n", "\t\t\t\t\t", "objects", ".", "append", "(", "pkl", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "objects", ".", "append", "(", "pkl", ".", "load", "(", "f", ")", ")", "\n", "\n", "", "", "", "x", ",", "y", ",", "tx", ",", "ty", ",", "allx", ",", "ally", ",", "graph", "=", "tuple", "(", "objects", ")", "\n", "adj", "=", "nx", ".", "adjacency_matrix", "(", "nx", ".", "from_dict_of_lists", "(", "graph", ")", ")", "\n", "test_idx_reorder", "=", "parse_index_file", "(", "\"data/ind.{}.test.index\"", ".", "format", "(", "dataset_str", ")", ")", "\n", "test_idx_range", "=", "np", ".", "sort", "(", "test_idx_reorder", ")", "\n", "\n", "if", "dataset_str", "==", "'citeseer'", ":", "\n", "\t\t\t", "test_idx_range_full", "=", "range", "(", "min", "(", "test_idx_reorder", ")", ",", "max", "(", "test_idx_reorder", ")", "+", "1", ")", "\n", "tx_extended", "=", "sp", ".", "lil_matrix", "(", "(", "len", "(", "test_idx_range_full", ")", ",", "x", ".", "shape", "[", "1", "]", ")", ")", "\n", "tx_extended", "[", "test_idx_range", "-", "min", "(", "test_idx_range", ")", ",", ":", "]", "=", "tx", "\n", "tx", "=", "tx_extended", "\n", "ty_extended", "=", "np", ".", "zeros", "(", "(", "len", "(", "test_idx_range_full", ")", ",", "y", ".", "shape", "[", "1", "]", ")", ")", "\n", "ty_extended", "[", "test_idx_range", "-", "min", "(", "test_idx_range", ")", ",", ":", "]", "=", "ty", "\n", "ty", "=", "ty_extended", "\n", "\n", "", "features", "=", "sp", ".", "vstack", "(", "(", "allx", ",", "tx", ")", ")", ".", "tolil", "(", ")", "\n", "# features = sp.eye(features.shape[0]).tolil()", "\n", "# features = sp.lil_matrix(allx)", "\n", "\n", "labels", "=", "np", ".", "vstack", "(", "(", "ally", ",", "ty", ")", ")", "\n", "# labels = np.vstack(ally)", "\n", "\n", "features", "[", "test_idx_reorder", ",", ":", "]", "=", "features", "[", "test_idx_range", ",", ":", "]", "\n", "labels", "[", "test_idx_reorder", ",", ":", "]", "=", "labels", "[", "test_idx_range", ",", ":", "]", "\n", "features", "=", "preprocess_features", "(", "features", ")", "\n", "\n", "", "global", "all_labels", "\n", "all_labels", "=", "labels", ".", "copy", "(", ")", "\n", "\n", "# split the data set", "\n", "idx", "=", "np", ".", "arange", "(", "len", "(", "labels", ")", ")", "\n", "no_class", "=", "labels", ".", "shape", "[", "1", "]", "# number of class", "\n", "train_size", "=", "[", "train_size", "for", "i", "in", "range", "(", "labels", ".", "shape", "[", "1", "]", ")", "]", "\n", "if", "shuffle", ":", "\n", "\t\t", "np", ".", "random", ".", "shuffle", "(", "idx", ")", "\n", "", "idx_train", "=", "[", "]", "\n", "count", "=", "[", "0", "for", "i", "in", "range", "(", "no_class", ")", "]", "\n", "label_each_class", "=", "train_size", "\n", "next", "=", "0", "\n", "for", "i", "in", "idx", ":", "\n", "\t\t", "if", "count", "==", "label_each_class", ":", "\n", "\t\t\t", "break", "\n", "", "next", "+=", "1", "\n", "for", "j", "in", "range", "(", "no_class", ")", ":", "\n", "\t\t\t", "if", "labels", "[", "i", ",", "j", "]", "and", "count", "[", "j", "]", "<", "label_each_class", "[", "j", "]", ":", "\n", "\t\t\t\t", "idx_train", ".", "append", "(", "i", ")", "\n", "count", "[", "j", "]", "+=", "1", "\n", "\n", "", "", "", "test_size", "=", "None", "\n", "if", "validate", ":", "\n", "\t\t", "if", "test_size", ":", "\n", "\t\t\t", "assert", "next", "+", "validation_size", "<", "len", "(", "idx", ")", "\n", "", "idx_val", "=", "idx", "[", "next", ":", "next", "+", "validation_size", "]", "\n", "assert", "next", "+", "validation_size", "+", "test_size", "<", "len", "(", "idx", ")", "\n", "idx_test", "=", "idx", "[", "-", "test_size", ":", "]", "if", "test_size", "else", "idx", "[", "next", "+", "validation_size", ":", "]", "\n", "\n", "", "else", ":", "\n", "\t\t", "if", "test_size", ":", "\n", "\t\t\t", "assert", "next", "+", "test_size", "<", "len", "(", "idx", ")", "\n", "", "idx_val", "=", "idx", "[", "-", "test_size", ":", "]", "if", "test_size", "else", "idx", "[", "next", ":", "]", "\n", "idx_test", "=", "idx", "[", "-", "test_size", ":", "]", "if", "test_size", "else", "idx", "[", "next", ":", "]", "\n", "\n", "", "print", "(", "'labels of each class : '", ",", "np", ".", "sum", "(", "labels", "[", "idx_train", "]", ",", "axis", "=", "0", ")", ")", "\n", "\n", "eta", "=", "np", ".", "float", "(", "adj", ".", "shape", "[", "0", "]", ")", "/", "(", "np", ".", "float", "(", "adj", ".", "sum", "(", ")", ")", "/", "adj", ".", "shape", "[", "0", "]", ")", "**", "2", "\n", "t", "=", "(", "labels", "[", "idx_train", "]", ".", "sum", "(", "axis", "=", "0", ")", "*", "timeseta", "*", "eta", "/", "labels", "[", "idx_train", "]", ".", "sum", "(", ")", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "\n", "features", "=", "torch", ".", "FloatTensor", "(", "np", ".", "array", "(", "features", ".", "todense", "(", ")", ")", ")", "\n", "labels", "=", "torch", ".", "LongTensor", "(", "np", ".", "argmax", "(", "labels", ",", "1", ")", ")", "\n", "adj", "=", "adj", "+", "sp", ".", "eye", "(", "adj", ".", "shape", "[", "0", "]", ")", "\n", "adj", "=", "normalize_adj", "(", "adj", ")", "\n", "adj", "=", "sparse_mx_to_torch_sparse_tensor", "(", "adj", ")", "\n", "idx_train", "=", "torch", ".", "LongTensor", "(", "idx_train", ")", "\n", "idx_val", "=", "torch", ".", "LongTensor", "(", "idx_val", ")", "\n", "idx_test", "=", "torch", ".", "LongTensor", "(", "idx_test", ")", "\n", "\n", "return", "adj", ",", "features", ",", "labels", ",", "idx_train", ",", "idx_val", ",", "idx_test", ",", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.kunzhan_MTGCN.None.utils.normalize": [[160, 168], ["numpy.array", "numpy.power().flatten", "scipy.diags", "sp.diags.dot", "r_mat_inv.dot.sum", "numpy.power", "numpy.isinf"], "function", ["None"], ["", "def", "normalize", "(", "mx", ")", ":", "\n", "    ", "\"\"\"Row-normalize sparse matrix\"\"\"", "\n", "rowsum", "=", "np", ".", "array", "(", "mx", ".", "sum", "(", "1", ")", ")", "\n", "r_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "1", ")", ".", "flatten", "(", ")", "\n", "r_inv", "[", "np", ".", "isinf", "(", "r_inv", ")", "]", "=", "0.", "\n", "r_mat_inv", "=", "sp", ".", "diags", "(", "r_inv", ")", "\n", "mx", "=", "r_mat_inv", ".", "dot", "(", "mx", ")", "\n", "return", "mx", "\n", "\n"]], "home.repos.pwc.inspect_result.kunzhan_MTGCN.None.utils.accuracy": [[170, 175], ["[].type_as", "[].type_as.eq().double", "correct.sum.sum", "len", "[].type_as.eq", "output.max"], "function", ["None"], ["", "def", "accuracy", "(", "output", ",", "labels", ")", ":", "\n", "    ", "preds", "=", "output", ".", "max", "(", "1", ")", "[", "1", "]", ".", "type_as", "(", "labels", ")", "\n", "correct", "=", "preds", ".", "eq", "(", "labels", ")", ".", "double", "(", ")", "\n", "correct", "=", "correct", ".", "sum", "(", ")", "\n", "return", "correct", "/", "len", "(", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kunzhan_MTGCN.None.utils.accuracy2": [[176, 190], ["output1.max", "output2.max", "len", "range", "preds.type_as.type_as", "preds.type_as.eq().double", "preds.eq().double.sum", "preds.type_as.eq"], "function", ["None"], ["", "def", "accuracy2", "(", "output1", ",", "output2", ",", "labels", ")", ":", "\n", "\t", "preds1", "=", "output1", ".", "max", "(", "1", ")", "\n", "preds2", "=", "output2", ".", "max", "(", "1", ")", "\n", "L", "=", "len", "(", "labels", ")", "\n", "preds", "=", "preds1", "[", "0", "]", "*", "0", "\n", "for", "k", "in", "range", "(", "L", ")", ":", "\n", "\t\t", "if", "preds1", "[", "0", "]", "[", "k", "]", ">=", "preds2", "[", "0", "]", "[", "k", "]", ":", "\n", "\t\t\t", "preds", "[", "k", "]", "=", "preds1", "[", "1", "]", "[", "k", "]", "\n", "", "else", ":", "\n", "\t\t\t", "preds", "[", "k", "]", "=", "preds2", "[", "1", "]", "[", "k", "]", "\n", "", "", "preds", "=", "preds", ".", "type_as", "(", "labels", ")", "\n", "correct", "=", "preds", ".", "eq", "(", "labels", ")", ".", "double", "(", ")", "\n", "correct", "=", "correct", ".", "sum", "(", ")", "/", "L", "\n", "return", "correct", "\n", "\n"]], "home.repos.pwc.inspect_result.kunzhan_MTGCN.None.utils.sparse_mx_to_torch_sparse_tensor": [[192, 200], ["sparse_mx.tocoo().astype.tocoo().astype", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.Size", "torch.Size", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "numpy.vstack().astype", "sparse_mx.tocoo().astype.tocoo", "numpy.vstack"], "function", ["None"], ["", "def", "sparse_mx_to_torch_sparse_tensor", "(", "sparse_mx", ")", ":", "\n", "    ", "\"\"\"Convert a scipy sparse matrix to a torch sparse tensor.\"\"\"", "\n", "sparse_mx", "=", "sparse_mx", ".", "tocoo", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "indices", "=", "torch", ".", "from_numpy", "(", "\n", "np", ".", "vstack", "(", "(", "sparse_mx", ".", "row", ",", "sparse_mx", ".", "col", ")", ")", ".", "astype", "(", "np", ".", "int64", ")", ")", "\n", "values", "=", "torch", ".", "from_numpy", "(", "sparse_mx", ".", "data", ")", "\n", "shape", "=", "torch", ".", "Size", "(", "sparse_mx", ".", "shape", ")", "\n", "return", "torch", ".", "sparse", ".", "FloatTensor", "(", "indices", ",", "values", ",", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kunzhan_MTGCN.None.utils.selftraining": [[202, 231], ["prediction.detach().cpu().numpy.detach().cpu().numpy", "idx_train.cpu().numpy.cpu().numpy", "labels.cpu().numpy.cpu().numpy", "numpy.argmax", "numpy.max", "numpy.argsort", "numpy.array", "hasattr", "numpy.tile", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "prediction.detach().cpu().numpy.detach().cpu", "idx_train.cpu().numpy.cpu", "labels.cpu().numpy.cpu", "len", "range", "range", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "prediction.detach().cpu().numpy.detach", "index.append"], "function", ["None"], ["", "def", "selftraining", "(", "prediction", ",", "t", ",", "idx_train", ",", "labels", ")", ":", "\n", "\t", "prediction", "=", "prediction", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "idx_train", "=", "idx_train", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "labels", "=", "labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "new_gcn_index", "=", "np", ".", "argmax", "(", "prediction", ",", "1", ")", "\n", "confidence", "=", "np", ".", "max", "(", "prediction", ",", "1", ")", "\n", "sorted_index", "=", "np", ".", "argsort", "(", "-", "confidence", ")", "\n", "\n", "no_class", "=", "prediction", ".", "shape", "[", "1", "]", "# number of class", "\n", "t", "=", "np", ".", "array", "(", "np", ".", "tile", "(", "t", ",", "(", "1", ",", "no_class", ")", ")", ")", "\n", "t", "=", "t", "[", "0", "]", "\n", "\n", "if", "hasattr", "(", "t", ",", "'__getitem__'", ")", ":", "\n", "\t\t", "assert", "len", "(", "t", ")", ">=", "no_class", "\n", "index", "=", "[", "]", "\n", "count", "=", "[", "0", "for", "i", "in", "range", "(", "no_class", ")", "]", "\n", "for", "i", "in", "sorted_index", ":", "\n", "\t\t\t", "for", "j", "in", "range", "(", "no_class", ")", ":", "\n", "\t\t\t\t", "if", "new_gcn_index", "[", "i", "]", "==", "j", "and", "count", "[", "j", "]", "<", "t", "[", "j", "]", "and", "not", "(", "i", "in", "idx_train", ")", ":", "\n", "\t\t\t\t\t", "index", ".", "append", "(", "i", ")", "\n", "count", "[", "j", "]", "+=", "1", "\n", "", "", "", "", "else", ":", "\n", "\t\t", "index", "=", "sorted_index", "[", ":", "t", "]", "\n", "\n", "", "prediction", "=", "new_gcn_index", "\n", "prediction", "[", "idx_train", "]", "=", "labels", "[", "idx_train", "]", "\n", "\n", "return", "torch", ".", "LongTensor", "(", "index", ")", ".", "cuda", "(", ")", ",", "torch", ".", "LongTensor", "(", "prediction", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kunzhan_MTGCN.None.utils.plabelscoefficients": [[232, 239], ["float", "torch.log", "torch.log", "torch.log", "torch.log", "torch.tensor", "torch.tensor", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "plabelscoefficients", "(", "pseudolabels", ")", ":", "\n", "\t", "numclass", "=", "float", "(", "pseudolabels", ".", "shape", "[", "1", "]", ")", "\n", "max_entropy", "=", "torch", ".", "log", "(", "torch", ".", "tensor", "(", "numclass", ")", ")", "\n", "log_pseudolabels", "=", "torch", ".", "log", "(", "pseudolabels", ")", "\n", "pseudolabels_entropy", "=", "-", "torch", ".", "sum", "(", "pseudolabels", "*", "log_pseudolabels", ",", "1", ")", "\n", "coef", "=", "1", "-", "pseudolabels_entropy", "/", "max_entropy", "\n", "return", "coef", "\n", "\n"]], "home.repos.pwc.inspect_result.kunzhan_MTGCN.None.utils.mutuallearning": [[240, 267], ["torch.nn.KLDivLoss", "torch.nn.KLDivLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "utils..", "utils..", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.nn.KLDivLoss.", "torch.nn.KLDivLoss.", "torch.softmax", "torch.softmax", "utils.plabelscoefficients", "utils.plabelscoefficients", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.softmax", "torch.softmax", "torch.log_softmax", "torch.softmax", "torch.log_softmax", "torch.softmax", "torch.autograd.Variable", "torch.autograd.Variable", "plabelscoefficients.detach", "plabelscoefficients.detach", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "F.softmax.max", "F.softmax.max"], "function", ["home.repos.pwc.inspect_result.kunzhan_MTGCN.None.utils.plabelscoefficients", "home.repos.pwc.inspect_result.kunzhan_MTGCN.None.utils.plabelscoefficients"], ["", "def", "mutuallearning", "(", "model_one", ",", "model_two", ",", "idx_train", ",", "idx_test", ",", "labels", ",", "t", ")", ":", "\n", "\n", "\t", "loss_kl", "=", "torch", ".", "nn", ".", "KLDivLoss", "(", "reduction", "=", "'batchmean'", ")", "\n", "loss_ce", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "model_one_index", ",", "model_one_prediction", "=", "selftraining", "(", "F", ".", "softmax", "(", "model_one", ",", "1", ")", ",", "t", ",", "idx_train", ",", "labels", ")", "\n", "model_two_index", ",", "model_two_prediction", "=", "selftraining", "(", "F", ".", "softmax", "(", "model_two", ",", "1", ")", ",", "t", ",", "idx_train", ",", "labels", ")", "\n", "\n", "loss_one_sup", "=", "loss_ce", "(", "model_one", "[", "idx_train", "]", ",", "labels", "[", "idx_train", "]", ")", "\n", "loss_two_sup", "=", "loss_ce", "(", "model_two", "[", "idx_train", "]", ",", "labels", "[", "idx_train", "]", ")", "\n", "\n", "loss_one_kl", "=", "loss_kl", "(", "F", ".", "log_softmax", "(", "model_one", "[", "model_two_index", "]", ",", "dim", "=", "1", ")", ",", "F", ".", "softmax", "(", "Variable", "(", "model_two", "[", "model_two_index", "]", ")", ",", "dim", "=", "1", ")", ")", "\n", "loss_two_kl", "=", "loss_kl", "(", "F", ".", "log_softmax", "(", "model_two", "[", "model_one_index", "]", ",", "dim", "=", "1", ")", ",", "F", ".", "softmax", "(", "Variable", "(", "model_one", "[", "model_one_index", "]", ")", ",", "dim", "=", "1", ")", ")", "\n", "\n", "pred1", "=", "F", ".", "softmax", "(", "model_one", "[", "model_one_index", "]", ",", "1", ")", "\n", "pred2", "=", "F", ".", "softmax", "(", "model_two", "[", "model_two_index", "]", ",", "1", ")", "\n", "coef1", "=", "plabelscoefficients", "(", "pred1", ")", "\n", "coef2", "=", "plabelscoefficients", "(", "pred2", ")", "\n", "\n", "loss_one_reg", "=", "torch", ".", "mean", "(", "coef2", ".", "detach", "(", ")", "*", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'none'", ")", "(", "model_one", "[", "model_two_index", "]", ",", "pred2", ".", "max", "(", "1", ")", "[", "1", "]", ")", ")", "\n", "loss_two_reg", "=", "torch", ".", "mean", "(", "coef1", ".", "detach", "(", ")", "*", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'none'", ")", "(", "model_two", "[", "model_one_index", "]", ",", "pred1", ".", "max", "(", "1", ")", "[", "1", "]", ")", ")", "\n", "\n", "\n", "model_one_loss", "=", "loss_one_sup", "+", "loss_one_kl", "+", "loss_one_reg", "\n", "model_two_loss", "=", "loss_two_sup", "+", "loss_two_kl", "+", "loss_two_reg", "\n", "\n", "return", "model_one_loss", ",", "model_two_loss", "", "", ""]]}