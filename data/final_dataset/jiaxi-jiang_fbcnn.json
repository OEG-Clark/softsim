{"home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.None.main_test_fbcnn_gray.main": [[12, 119], ["os.path.join", "os.path.join", "utils.utils_image.mkdir", "os.path.join", "os.path.exists", "utils.utils_logger.logger_info", "logging.getLogger", "logging.getLogger.info", "torch.device", "net", "model.to.load_state_dict", "model.to.eval", "model.to.named_parameters", "model.to.to", "logging.getLogger.info", "collections.OrderedDict", "utils.utils_image.get_image_paths", "enumerate", "logging.getLogger.info", "str", "print", "os.makedirs", "requests.get", "print", "open().write", "str", "torch.load", "os.path.splitext", "logging.getLogger.info", "utils.utils_image.imread_uint", "cv2.imencode", "utils.utils_image.uint2tensor4", "cv2.cvtColor.to", "model.to.", "utils.utils_image.tensor2single", "utils.utils_image.single2uint", "utils.utils_image.imread_uint().squeeze", "utils.utils_image.calculate_psnr", "utils.utils_image.calculate_ssim", "utils.utils_image.calculate_psnrb", "test_results[].append", "test_results[].append", "test_results[].append", "logging.getLogger.info", "logging.getLogger.info", "utils.utils_image.imsave", "sum", "len", "sum", "len", "sum", "len", "os.path.dirname", "os.path.basename", "os.path.join", "torch.cuda.is_available", "os.path.basename", "cv2.cvtColor", "cv2.imdecode", "cv2.imdecode", "cv2.cvtColor", "utils.utils_image.imshow", "os.path.join", "open", "int", "utils.utils_image.imread_uint", "round", "numpy.concatenate", "str", "float"], "function", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.mkdir", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_logger.logger_info", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.get_image_paths", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_logger.logger_print.write", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_fbcnn.ModelFBCNN.load", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.imread_uint", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.uint2tensor4", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.tensor2single", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.single2uint", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.calculate_psnr", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.calculate_ssim", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.calculate_psnrb", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.imsave", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.imshow", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.imread_uint"], ["def", "main", "(", ")", ":", "\n", "\n", "    ", "quality_factor_list", "=", "[", "10", ",", "20", ",", "30", ",", "40", ",", "50", ",", "60", ",", "70", ",", "80", ",", "90", "]", "\n", "testset_name", "=", "'Classic5'", "# 'LIVE1_gray' 'Classic5' 'BSDS500_gray'", "\n", "n_channels", "=", "1", "# set 1 for grayscale image, set 3 for color image", "\n", "model_name", "=", "'fbcnn_gray.pth'", "\n", "nc", "=", "[", "64", ",", "128", ",", "256", ",", "512", "]", "\n", "nb", "=", "4", "\n", "show_img", "=", "False", "# default: False", "\n", "testsets", "=", "'testsets'", "\n", "results", "=", "'test_results'", "\n", "\n", "for", "quality_factor", "in", "quality_factor_list", ":", "\n", "        ", "result_name", "=", "testset_name", "+", "'_'", "+", "model_name", "[", ":", "-", "4", "]", "\n", "H_path", "=", "os", ".", "path", ".", "join", "(", "testsets", ",", "testset_name", ")", "\n", "E_path", "=", "os", ".", "path", ".", "join", "(", "results", ",", "result_name", ",", "str", "(", "quality_factor", ")", ")", "# E_path, for Estimated images", "\n", "util", ".", "mkdir", "(", "E_path", ")", "\n", "\n", "model_pool", "=", "'model_zoo'", "# fixed", "\n", "model_path", "=", "os", ".", "path", ".", "join", "(", "model_pool", ",", "model_name", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "model_path", ")", ":", "\n", "            ", "print", "(", "f'loading model from {model_path}'", ")", "\n", "", "else", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "model_path", ")", ",", "exist_ok", "=", "True", ")", "\n", "url", "=", "'https://github.com/jiaxi-jiang/FBCNN/releases/download/v1.0/{}'", ".", "format", "(", "os", ".", "path", ".", "basename", "(", "model_path", ")", ")", "\n", "r", "=", "requests", ".", "get", "(", "url", ",", "allow_redirects", "=", "True", ")", "\n", "print", "(", "f'downloading model {model_path}'", ")", "\n", "open", "(", "model_path", ",", "'wb'", ")", ".", "write", "(", "r", ".", "content", ")", "\n", "\n", "", "logger_name", "=", "result_name", "+", "'_qf_'", "+", "str", "(", "quality_factor", ")", "\n", "utils_logger", ".", "logger_info", "(", "logger_name", ",", "log_path", "=", "os", ".", "path", ".", "join", "(", "E_path", ",", "logger_name", "+", "'.log'", ")", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "logger_name", ")", "\n", "logger", ".", "info", "(", "'--------------- quality factor: {:d} ---------------'", ".", "format", "(", "quality_factor", ")", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "border", "=", "0", "\n", "\n", "\n", "# ----------------------------------------", "\n", "# load model", "\n", "# ----------------------------------------", "\n", "\n", "from", "models", ".", "network_fbcnn", "import", "FBCNN", "as", "net", "\n", "model", "=", "net", "(", "in_nc", "=", "n_channels", ",", "out_nc", "=", "n_channels", ",", "nc", "=", "nc", ",", "nb", "=", "nb", ",", "act_mode", "=", "'R'", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ",", "strict", "=", "True", ")", "\n", "model", ".", "eval", "(", ")", "\n", "for", "k", ",", "v", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "         ", "v", ".", "requires_grad", "=", "False", "\n", "", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "logger", ".", "info", "(", "'Model path: {:s}'", ".", "format", "(", "model_path", ")", ")", "\n", "\n", "test_results", "=", "OrderedDict", "(", ")", "\n", "test_results", "[", "'psnr'", "]", "=", "[", "]", "\n", "test_results", "[", "'ssim'", "]", "=", "[", "]", "\n", "test_results", "[", "'psnrb'", "]", "=", "[", "]", "\n", "\n", "H_paths", "=", "util", ".", "get_image_paths", "(", "H_path", ")", "\n", "for", "idx", ",", "img", "in", "enumerate", "(", "H_paths", ")", ":", "\n", "\n", "# ------------------------------------", "\n", "# (1) img_L", "\n", "# ------------------------------------", "\n", "            ", "img_name", ",", "ext", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "img", ")", ")", "\n", "logger", ".", "info", "(", "'{:->4d}--> {:>10s}'", ".", "format", "(", "idx", "+", "1", ",", "img_name", "+", "ext", ")", ")", "\n", "img_L", "=", "util", ".", "imread_uint", "(", "img", ",", "n_channels", "=", "n_channels", ")", "\n", "\n", "if", "n_channels", "==", "3", ":", "\n", "             ", "img_L", "=", "cv2", ".", "cvtColor", "(", "img_L", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "", "_", ",", "encimg", "=", "cv2", ".", "imencode", "(", "'.jpg'", ",", "img_L", ",", "[", "int", "(", "cv2", ".", "IMWRITE_JPEG_QUALITY", ")", ",", "quality_factor", "]", ")", "\n", "img_L", "=", "cv2", ".", "imdecode", "(", "encimg", ",", "0", ")", "if", "n_channels", "==", "1", "else", "cv2", ".", "imdecode", "(", "encimg", ",", "3", ")", "\n", "if", "n_channels", "==", "3", ":", "\n", "             ", "img_L", "=", "cv2", ".", "cvtColor", "(", "img_L", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "", "img_L", "=", "util", ".", "uint2tensor4", "(", "img_L", ")", "\n", "img_L", "=", "img_L", ".", "to", "(", "device", ")", "\n", "\n", "# ------------------------------------", "\n", "# (2) img_E", "\n", "# ------------------------------------", "\n", "\n", "# img_E,QF = model(img_L, torch.tensor([[0.6]]))      ", "\n", "img_E", ",", "QF", "=", "model", "(", "img_L", ")", "\n", "QF", "=", "1", "-", "QF", "\n", "\n", "img_E", "=", "util", ".", "tensor2single", "(", "img_E", ")", "\n", "img_E", "=", "util", ".", "single2uint", "(", "img_E", ")", "\n", "img_H", "=", "util", ".", "imread_uint", "(", "H_paths", "[", "idx", "]", ",", "n_channels", "=", "n_channels", ")", ".", "squeeze", "(", ")", "\n", "# --------------------------------", "\n", "# PSNR and SSIM, PSNRB", "\n", "# --------------------------------", "\n", "\n", "psnr", "=", "util", ".", "calculate_psnr", "(", "img_E", ",", "img_H", ",", "border", "=", "border", ")", "\n", "ssim", "=", "util", ".", "calculate_ssim", "(", "img_E", ",", "img_H", ",", "border", "=", "border", ")", "\n", "psnrb", "=", "util", ".", "calculate_psnrb", "(", "img_H", ",", "img_E", ",", "border", "=", "border", ")", "\n", "test_results", "[", "'psnr'", "]", ".", "append", "(", "psnr", ")", "\n", "test_results", "[", "'ssim'", "]", ".", "append", "(", "ssim", ")", "\n", "test_results", "[", "'psnrb'", "]", ".", "append", "(", "psnrb", ")", "\n", "logger", ".", "info", "(", "'{:s} - PSNR: {:.2f} dB; SSIM: {:.3f}; PSNRB: {:.2f} dB.'", ".", "format", "(", "img_name", "+", "ext", ",", "psnr", ",", "ssim", ",", "psnrb", ")", ")", "\n", "logger", ".", "info", "(", "'predicted quality factor: {:d}'", ".", "format", "(", "round", "(", "float", "(", "QF", "*", "100", ")", ")", ")", ")", "\n", "\n", "util", ".", "imshow", "(", "np", ".", "concatenate", "(", "[", "img_E", ",", "img_H", "]", ",", "axis", "=", "1", ")", ",", "title", "=", "'Recovered / Ground-truth'", ")", "if", "show_img", "else", "None", "\n", "util", ".", "imsave", "(", "img_E", ",", "os", ".", "path", ".", "join", "(", "E_path", ",", "img_name", "+", "'.png'", ")", ")", "\n", "\n", "", "ave_psnr", "=", "sum", "(", "test_results", "[", "'psnr'", "]", ")", "/", "len", "(", "test_results", "[", "'psnr'", "]", ")", "\n", "ave_ssim", "=", "sum", "(", "test_results", "[", "'ssim'", "]", ")", "/", "len", "(", "test_results", "[", "'ssim'", "]", ")", "\n", "ave_psnrb", "=", "sum", "(", "test_results", "[", "'psnrb'", "]", ")", "/", "len", "(", "test_results", "[", "'psnrb'", "]", ")", "\n", "logger", ".", "info", "(", "\n", "'Average PSNR/SSIM/PSNRB - {} -: {:.2f}$\\\\vert${:.4f}$\\\\vert${:.2f}.'", ".", "format", "(", "result_name", "+", "'_'", "+", "str", "(", "quality_factor", ")", ",", "ave_psnr", ",", "ave_ssim", ",", "ave_psnrb", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.None.main_train_fbcnn.main": [[21, 246], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "utils.utils_option.parse", "utils.utils_image.mkdirs", "utils.utils_option.find_last_checkpoint", "utils.utils_option.save", "utils.utils_option.dict_to_nonedict", "utils.utils_logger.logger_info", "logging.getLogger", "logging.getLogger.info", "logging.getLogger.info", "random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "opt[].items", "models.select_model.define_Model", "logging.getLogger.info", "models.select_model.define_Model.init_train", "logging.getLogger.info", "range", "logging.getLogger.info", "models.select_model.define_Model.save", "logging.getLogger.info", "os.path.join", "utils.utils_option.dict2str", "random.randint", "logging.getLogger.info", "models.select_model.define_Model.merge_bnorm_test", "models.select_model.define_Model.info_network", "models.select_model.define_Model.info_params", "enumerate", "argparse.ArgumentParser.parse_args", "data.select_dataset.define_Dataset", "print", "int", "logging.getLogger.info", "torch.utils.data.DataLoader", "models.select_model.define_Model.update_learning_rate", "models.select_model.define_Model.feed_data", "models.select_model.define_Model.optimize_parameters", "opt[].items", "math.ceil", "data.select_dataset.define_Dataset", "print", "torch.utils.data.DataLoader", "NotImplementedError", "torch.utils.data.DataLoader.dataset.update_data", "logging.getLogger.info", "models.select_model.define_Model.merge_bnorm_train", "models.select_model.define_Model.print_network", "models.select_model.define_Model.current_log", "model.current_log.items", "logging.getLogger.info", "logging.getLogger.info", "models.select_model.define_Model.save", "logging.getLogger.info", "len", "models.select_model.define_Model.current_learning_rate", "os.path.basename", "os.path.splitext", "os.path.join", "utils.utils_image.mkdir", "models.select_model.define_Model.feed_data", "models.select_model.define_Model.test", "models.select_model.define_Model.current_visuals", "utils.utils_image.tensor2uint", "utils.utils_image.tensor2uint", "os.path.join", "utils.utils_image.imsave", "utils.utils_image.calculate_psnr", "utils.utils_image.calculate_ssim", "utils.utils_image.calculate_psnrb", "logging.getLogger.info", "logging.getLogger.info", "len", "float"], "function", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_option.parse", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.mkdirs", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_option.find_last_checkpoint", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_fbcnn.ModelFBCNN.save", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_option.dict_to_nonedict", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_logger.logger_info", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.select_model.define_Model", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_fbcnn.ModelFBCNN.init_train", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_fbcnn.ModelFBCNN.save", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_option.dict2str", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_base.ModelBase.merge_bnorm_test", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_fbcnn.ModelFBCNN.info_network", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_fbcnn.ModelFBCNN.info_params", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.data.select_dataset.define_Dataset", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_base.ModelBase.update_learning_rate", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_fbcnn.ModelFBCNN.feed_data", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_fbcnn.ModelFBCNN.optimize_parameters", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.data.select_dataset.define_Dataset", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_base.ModelBase.merge_bnorm_train", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_fbcnn.ModelFBCNN.print_network", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_fbcnn.ModelFBCNN.current_log", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_fbcnn.ModelFBCNN.save", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_base.ModelBase.current_learning_rate", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.mkdir", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_fbcnn.ModelFBCNN.feed_data", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_fbcnn.ModelFBCNN.test", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_fbcnn.ModelFBCNN.current_visuals", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.tensor2uint", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.tensor2uint", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.imsave", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.calculate_psnr", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.calculate_ssim", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.calculate_psnrb"], ["def", "main", "(", "json_path", "=", "'options/train_fbcnn_graydouble.json'", ")", ":", "\n", "    ", "'''\n    # ----------------------------------------\n    # Step--1 (prepare opt)\n    # ----------------------------------------\n    '''", "\n", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-opt'", ",", "type", "=", "str", ",", "default", "=", "json_path", ",", "help", "=", "'Path to option JSON file.'", ")", "\n", "\n", "opt", "=", "option", ".", "parse", "(", "parser", ".", "parse_args", "(", ")", ".", "opt", ",", "is_train", "=", "True", ")", "\n", "util", ".", "mkdirs", "(", "(", "path", "for", "key", ",", "path", "in", "opt", "[", "'path'", "]", ".", "items", "(", ")", "if", "'pretrained'", "not", "in", "key", ")", ")", "\n", "\n", "# ----------------------------------------", "\n", "# update opt", "\n", "# ----------------------------------------", "\n", "# -->-->-->-->-->-->-->-->-->-->-->-->-->-", "\n", "init_iter", ",", "init_path_G", "=", "option", ".", "find_last_checkpoint", "(", "opt", "[", "'path'", "]", "[", "'models'", "]", ",", "net_type", "=", "'G'", ")", "\n", "opt", "[", "'path'", "]", "[", "'pretrained_netG'", "]", "=", "init_path_G", "\n", "current_step", "=", "init_iter", "\n", "\n", "border", "=", "0", "\n", "# --<--<--<--<--<--<--<--<--<--<--<--<--<-", "\n", "\n", "# ----------------------------------------", "\n", "# save opt to  a '../option.json' file", "\n", "# ----------------------------------------", "\n", "option", ".", "save", "(", "opt", ")", "\n", "\n", "# ----------------------------------------", "\n", "# return None for missing key", "\n", "# ----------------------------------------", "\n", "opt", "=", "option", ".", "dict_to_nonedict", "(", "opt", ")", "\n", "\n", "# ----------------------------------------", "\n", "# configure logger", "\n", "# ----------------------------------------", "\n", "logger_name", "=", "'train'", "\n", "utils_logger", ".", "logger_info", "(", "logger_name", ",", "os", ".", "path", ".", "join", "(", "opt", "[", "'path'", "]", "[", "'log'", "]", ",", "logger_name", "+", "'.log'", ")", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "logger_name", ")", "\n", "logger", ".", "info", "(", "option", ".", "dict2str", "(", "opt", ")", ")", "\n", "\n", "# ----------------------------------------", "\n", "# seed", "\n", "# ----------------------------------------", "\n", "seed", "=", "opt", "[", "'train'", "]", "[", "'manual_seed'", "]", "\n", "if", "seed", "is", "None", ":", "\n", "        ", "seed", "=", "random", ".", "randint", "(", "1", ",", "10000", ")", "\n", "", "logger", ".", "info", "(", "'Random seed: {}'", ".", "format", "(", "seed", ")", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n", "'''\n    # ----------------------------------------\n    # Step--2 (creat dataloader)\n    # ----------------------------------------\n    '''", "\n", "\n", "# ----------------------------------------", "\n", "# 1) create_dataset", "\n", "# 2) creat_dataloader for train and test", "\n", "# ----------------------------------------", "\n", "dataset_type", "=", "opt", "[", "'datasets'", "]", "[", "'train'", "]", "[", "'dataset_type'", "]", "\n", "\n", "for", "phase", ",", "dataset_opt", "in", "opt", "[", "'datasets'", "]", ".", "items", "(", ")", ":", "\n", "        ", "if", "phase", "==", "'train'", ":", "\n", "            ", "train_set", "=", "define_Dataset", "(", "dataset_opt", ")", "\n", "print", "(", "'Dataset [{:s} - {:s}] is created.'", ".", "format", "(", "train_set", ".", "__class__", ".", "__name__", ",", "dataset_opt", "[", "'name'", "]", ")", ")", "\n", "train_size", "=", "int", "(", "math", ".", "ceil", "(", "len", "(", "train_set", ")", "/", "dataset_opt", "[", "'dataloader_batch_size'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'Number of train images: {:,d}, iters: {:,d}'", ".", "format", "(", "len", "(", "train_set", ")", ",", "train_size", ")", ")", "\n", "train_loader", "=", "DataLoader", "(", "train_set", ",", "\n", "batch_size", "=", "dataset_opt", "[", "'dataloader_batch_size'", "]", ",", "\n", "shuffle", "=", "dataset_opt", "[", "'dataloader_shuffle'", "]", ",", "\n", "num_workers", "=", "dataset_opt", "[", "'dataloader_num_workers'", "]", ",", "\n", "drop_last", "=", "True", ",", "\n", "pin_memory", "=", "True", ")", "\n", "", "elif", "phase", "==", "'test'", ":", "\n", "            ", "test_set", "=", "define_Dataset", "(", "dataset_opt", ")", "\n", "print", "(", "'Dataset [{:s} - {:s}] is created.'", ".", "format", "(", "test_set", ".", "__class__", ".", "__name__", ",", "dataset_opt", "[", "'name'", "]", ")", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_set", ",", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ",", "num_workers", "=", "1", ",", "\n", "drop_last", "=", "False", ",", "pin_memory", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Phase [%s] is not recognized.\"", "%", "phase", ")", "\n", "\n", "", "", "'''\n    # ----------------------------------------\n    # Step--3 (initialize model)\n    # ----------------------------------------\n    '''", "\n", "model", "=", "define_Model", "(", "opt", ")", "\n", "\n", "if", "opt", "[", "'merge_bn'", "]", "and", "current_step", ">", "opt", "[", "'merge_bn_startpoint'", "]", ":", "\n", "        ", "logger", ".", "info", "(", "'^_^ -----merging bnorm----- ^_^'", ")", "\n", "model", ".", "merge_bnorm_test", "(", ")", "\n", "\n", "", "logger", ".", "info", "(", "model", ".", "info_network", "(", ")", ")", "\n", "model", ".", "init_train", "(", ")", "\n", "logger", ".", "info", "(", "model", ".", "info_params", "(", ")", ")", "\n", "\n", "'''\n    # ----------------------------------------\n    # Step--4 (main training)\n    # ----------------------------------------\n    '''", "\n", "\n", "for", "epoch", "in", "range", "(", "1000000", ")", ":", "# keep running", "\n", "        ", "for", "i", ",", "train_data", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "current_step", "+=", "1", "\n", "\n", "if", "dataset_type", "==", "'dnpatch'", "and", "current_step", "%", "20000", "==", "0", ":", "# for 'train400'", "\n", "                ", "train_loader", ".", "dataset", ".", "update_data", "(", ")", "\n", "\n", "# -------------------------------", "\n", "# 1) update learning rate", "\n", "# -------------------------------", "\n", "", "model", ".", "update_learning_rate", "(", "current_step", ")", "\n", "\n", "# -------------------------------", "\n", "# 2) feed patch pairs", "\n", "# -------------------------------", "\n", "model", ".", "feed_data", "(", "train_data", ")", "\n", "\n", "# -------------------------------", "\n", "# 3) optimize parameters", "\n", "# -------------------------------", "\n", "model", ".", "optimize_parameters", "(", "current_step", ")", "\n", "\n", "# -------------------------------", "\n", "# merge bnorm", "\n", "# -------------------------------", "\n", "if", "opt", "[", "'merge_bn'", "]", "and", "opt", "[", "'merge_bn_startpoint'", "]", "==", "current_step", ":", "\n", "                ", "logger", ".", "info", "(", "'^_^ -----merging bnorm----- ^_^'", ")", "\n", "model", ".", "merge_bnorm_train", "(", ")", "\n", "model", ".", "print_network", "(", ")", "\n", "\n", "# -------------------------------", "\n", "# 4) training information", "\n", "# -------------------------------", "\n", "", "if", "current_step", "%", "opt", "[", "'train'", "]", "[", "'checkpoint_print'", "]", "==", "0", ":", "\n", "                ", "logs", "=", "model", ".", "current_log", "(", ")", "# such as loss", "\n", "message", "=", "'<epoch:{:3d}, iter:{:8,d}, lr:{:.3e}> '", ".", "format", "(", "epoch", ",", "current_step", ",", "model", ".", "current_learning_rate", "(", ")", ")", "\n", "for", "k", ",", "v", "in", "logs", ".", "items", "(", ")", ":", "# merge log information into message", "\n", "                    ", "message", "+=", "'{:s}: {:.3e} '", ".", "format", "(", "k", ",", "v", ")", "\n", "", "logger", ".", "info", "(", "message", ")", "\n", "\n", "# -------------------------------", "\n", "# 5) save model", "\n", "# -------------------------------", "\n", "", "if", "current_step", "%", "opt", "[", "'train'", "]", "[", "'checkpoint_save'", "]", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "'Saving the model.'", ")", "\n", "model", ".", "save", "(", "current_step", ")", "\n", "\n", "\n", "# -------------------------------", "\n", "# 6) testing", "\n", "# -------------------------------", "\n", "", "if", "current_step", "%", "opt", "[", "'train'", "]", "[", "'checkpoint_test'", "]", "==", "0", ":", "\n", "\n", "                ", "avg_psnr", "=", "0.0", "\n", "avg_ssim", "=", "0.0", "\n", "avg_psnrb", "=", "0.0", "\n", "idx", "=", "0", "\n", "\n", "for", "test_data", "in", "test_loader", ":", "\n", "                    ", "idx", "+=", "1", "\n", "image_name_ext", "=", "os", ".", "path", ".", "basename", "(", "test_data", "[", "'H_path'", "]", "[", "0", "]", ")", "\n", "img_name", ",", "ext", "=", "os", ".", "path", ".", "splitext", "(", "image_name_ext", ")", "\n", "\n", "img_dir", "=", "os", ".", "path", ".", "join", "(", "opt", "[", "'path'", "]", "[", "'images'", "]", ",", "img_name", ")", "\n", "util", ".", "mkdir", "(", "img_dir", ")", "\n", "\n", "model", ".", "feed_data", "(", "test_data", ")", "\n", "model", ".", "test", "(", ")", "\n", "\n", "visuals", "=", "model", ".", "current_visuals", "(", ")", "\n", "E_img", "=", "util", ".", "tensor2uint", "(", "visuals", "[", "'E'", "]", ")", "\n", "H_img", "=", "util", ".", "tensor2uint", "(", "visuals", "[", "'H'", "]", ")", "\n", "QF", "=", "1", "-", "visuals", "[", "'QF'", "]", "\n", "# -----------------------", "\n", "# save estimated image E", "\n", "# -----------------------", "\n", "save_img_path", "=", "os", ".", "path", ".", "join", "(", "img_dir", ",", "'{:s}_{:d}.png'", ".", "format", "(", "img_name", ",", "current_step", ")", ")", "\n", "util", ".", "imsave", "(", "E_img", ",", "save_img_path", ")", "\n", "\n", "# -----------------------", "\n", "# calculate PSNR", "\n", "# -----------------------", "\n", "\n", "current_psnr", "=", "util", ".", "calculate_psnr", "(", "E_img", ",", "H_img", ",", "border", "=", "border", ")", "\n", "\n", "avg_psnr", "+=", "current_psnr", "\n", "\n", "# -----------------------", "\n", "# calculate SSIM", "\n", "# -----------------------", "\n", "\n", "current_ssim", "=", "util", ".", "calculate_ssim", "(", "E_img", ",", "H_img", ",", "border", "=", "border", ")", "\n", "\n", "avg_ssim", "+=", "current_ssim", "\n", "\n", "# -----------------------", "\n", "# calculate PSNRB", "\n", "# -----------------------", "\n", "\n", "current_psnrb", "=", "util", ".", "calculate_psnrb", "(", "H_img", ",", "E_img", ",", "border", "=", "border", ")", "\n", "avg_psnrb", "+=", "current_psnrb", "\n", "\n", "\n", "logger", ".", "info", "(", "'{:->4d}--> {:>10s} | PSNR : {:<4.2f}dB | SSIM : {:<4.3f}dB | PSNRB : {:<4.2f}dB'", ".", "format", "(", "idx", ",", "image_name_ext", ",", "current_psnr", ",", "current_ssim", ",", "current_psnrb", ")", ")", "\n", "logger", ".", "info", "(", "'predicted quality factor: {:<4.2f}'", ".", "format", "(", "float", "(", "QF", ")", ")", ")", "\n", "\n", "", "avg_psnr", "=", "avg_psnr", "/", "idx", "\n", "avg_ssim", "=", "avg_ssim", "/", "idx", "\n", "avg_psnrb", "=", "avg_psnrb", "/", "idx", "\n", "\n", "# testing log", "\n", "logger", ".", "info", "(", "'<epoch:{:3d}, iter:{:8,d}, Average PSNR : {:<.2f}dB, Average SSIM : {:<.3f}dB, Average PSNRB : {:<.2f}dB\\n'", ".", "format", "(", "epoch", ",", "current_step", ",", "avg_psnr", ",", "avg_ssim", ",", "avg_psnrb", ")", ")", "\n", "\n", "\n", "", "", "", "logger", ".", "info", "(", "'Saving the final model.'", ")", "\n", "model", ".", "save", "(", "'latest'", ")", "\n", "logger", ".", "info", "(", "'End of training.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.None.main_test_fbcnn_color_real.main": [[12, 102], ["os.path.join", "os.path.join", "utils.utils_image.mkdir", "os.path.join", "os.path.exists", "utils.utils_logger.logger_info", "logging.getLogger", "torch.device", "net", "model.to.load_state_dict", "model.to.eval", "model.to.named_parameters", "model.to.to", "logging.getLogger.info", "collections.OrderedDict", "utils.utils_image.get_image_paths", "enumerate", "print", "os.makedirs", "requests.get", "print", "open().write", "torch.load", "os.path.splitext", "logging.getLogger.info", "utils.utils_image.imread_uint", "utils.utils_image.uint2tensor4", "img_L.to.to", "model.to.", "utils.utils_image.tensor2single", "utils.utils_image.single2uint", "logging.getLogger.info", "utils.utils_image.imsave", "os.path.dirname", "os.path.basename", "os.path.join", "torch.cuda.is_available", "os.path.basename", "os.path.join", "open", "round", "logging.getLogger.info", "model.to.", "utils.utils_image.tensor2single", "utils.utils_image.single2uint", "utils.utils_image.imsave", "float", "torch.tensor().cuda", "torch.tensor", "os.path.join", "torch.device", "torch.tensor", "str"], "function", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.mkdir", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_logger.logger_info", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.get_image_paths", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_logger.logger_print.write", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_fbcnn.ModelFBCNN.load", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.imread_uint", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.uint2tensor4", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.tensor2single", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.single2uint", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.imsave", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.tensor2single", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.single2uint", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.imsave"], ["def", "main", "(", ")", ":", "\n", "\n", "    ", "testset_name", "=", "'Real'", "# folder name of real images", "\n", "n_channels", "=", "3", "# set 1 for grayscale image, set 3 for color image", "\n", "model_name", "=", "'fbcnn_color.pth'", "\n", "nc", "=", "[", "64", ",", "128", ",", "256", ",", "512", "]", "\n", "nb", "=", "4", "\n", "testsets", "=", "'testsets'", "\n", "results", "=", "'test_results'", "\n", "\n", "do_flexible_control", "=", "True", "\n", "QF_control", "=", "[", "5", ",", "10", ",", "30", ",", "50", ",", "70", ",", "90", "]", "# adjust qf as input to provide different results", "\n", "\n", "result_name", "=", "testset_name", "+", "'_'", "+", "model_name", "[", ":", "-", "4", "]", "\n", "L_path", "=", "os", ".", "path", ".", "join", "(", "testsets", ",", "testset_name", ")", "\n", "E_path", "=", "os", ".", "path", ".", "join", "(", "results", ",", "result_name", ")", "# E_path, for Estimated images", "\n", "util", ".", "mkdir", "(", "E_path", ")", "\n", "\n", "model_pool", "=", "'model_zoo'", "# fixed", "\n", "model_path", "=", "os", ".", "path", ".", "join", "(", "model_pool", ",", "model_name", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "model_path", ")", ":", "\n", "        ", "print", "(", "f'loading model from {model_path}'", ")", "\n", "", "else", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "model_path", ")", ",", "exist_ok", "=", "True", ")", "\n", "url", "=", "'https://github.com/jiaxi-jiang/FBCNN/releases/download/v1.0/{}'", ".", "format", "(", "os", ".", "path", ".", "basename", "(", "model_path", ")", ")", "\n", "r", "=", "requests", ".", "get", "(", "url", ",", "allow_redirects", "=", "True", ")", "\n", "print", "(", "f'downloading model {model_path}'", ")", "\n", "open", "(", "model_path", ",", "'wb'", ")", ".", "write", "(", "r", ".", "content", ")", "\n", "\n", "", "logger_name", "=", "result_name", "\n", "utils_logger", ".", "logger_info", "(", "logger_name", ",", "log_path", "=", "os", ".", "path", ".", "join", "(", "E_path", ",", "logger_name", "+", "'.log'", ")", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "logger_name", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "border", "=", "0", "\n", "\n", "\n", "# ----------------------------------------", "\n", "# load model", "\n", "# ----------------------------------------", "\n", "\n", "from", "models", ".", "network_fbcnn", "import", "FBCNN", "as", "net", "\n", "model", "=", "net", "(", "in_nc", "=", "n_channels", ",", "out_nc", "=", "n_channels", ",", "nc", "=", "nc", ",", "nb", "=", "nb", ",", "act_mode", "=", "'R'", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ",", "strict", "=", "True", ")", "\n", "model", ".", "eval", "(", ")", "\n", "for", "k", ",", "v", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "     ", "v", ".", "requires_grad", "=", "False", "\n", "", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "logger", ".", "info", "(", "'Model path: {:s}'", ".", "format", "(", "model_path", ")", ")", "\n", "\n", "test_results", "=", "OrderedDict", "(", ")", "\n", "test_results", "[", "'psnr'", "]", "=", "[", "]", "\n", "test_results", "[", "'ssim'", "]", "=", "[", "]", "\n", "test_results", "[", "'psnrb'", "]", "=", "[", "]", "\n", "\n", "L_paths", "=", "util", ".", "get_image_paths", "(", "L_path", ")", "\n", "for", "idx", ",", "img", "in", "enumerate", "(", "L_paths", ")", ":", "\n", "\n", "# ------------------------------------", "\n", "# (1) img_L", "\n", "# ------------------------------------", "\n", "        ", "img_name", ",", "ext", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "img", ")", ")", "\n", "logger", ".", "info", "(", "'{:->4d}--> {:>10s}'", ".", "format", "(", "idx", "+", "1", ",", "img_name", "+", "ext", ")", ")", "\n", "img_L", "=", "util", ".", "imread_uint", "(", "img", ",", "n_channels", "=", "n_channels", ")", "\n", "\n", "img_L", "=", "util", ".", "uint2tensor4", "(", "img_L", ")", "\n", "img_L", "=", "img_L", ".", "to", "(", "device", ")", "\n", "\n", "# ------------------------------------", "\n", "# (2) img_E", "\n", "# ------------------------------------", "\n", "\n", "#img_E,QF = model(img_L, torch.tensor([[0.6]]))      ", "\n", "img_E", ",", "QF", "=", "model", "(", "img_L", ")", "\n", "QF", "=", "1", "-", "QF", "\n", "img_E", "=", "util", ".", "tensor2single", "(", "img_E", ")", "\n", "img_E", "=", "util", ".", "single2uint", "(", "img_E", ")", "\n", "logger", ".", "info", "(", "'predicted quality factor: {:d}'", ".", "format", "(", "round", "(", "float", "(", "QF", "*", "100", ")", ")", ")", ")", "\n", "util", ".", "imsave", "(", "img_E", ",", "os", ".", "path", ".", "join", "(", "E_path", ",", "img_name", "+", "'.png'", ")", ")", "\n", "\n", "if", "do_flexible_control", ":", "\n", "            ", "for", "QF_set", "in", "QF_control", ":", "\n", "                ", "logger", ".", "info", "(", "'Flexible control by QF = {:d}'", ".", "format", "(", "QF_set", ")", ")", "\n", "#    from IPython import embed; embed()", "\n", "qf_input", "=", "torch", ".", "tensor", "(", "[", "[", "1", "-", "QF_set", "/", "100", "]", "]", ")", ".", "cuda", "(", ")", "if", "device", "==", "torch", ".", "device", "(", "'cuda'", ")", "else", "torch", ".", "tensor", "(", "[", "[", "1", "-", "QF_set", "/", "100", "]", "]", ")", "\n", "img_E", ",", "QF", "=", "model", "(", "img_L", ",", "qf_input", ")", "\n", "QF", "=", "1", "-", "QF", "\n", "img_E", "=", "util", ".", "tensor2single", "(", "img_E", ")", "\n", "img_E", "=", "util", ".", "single2uint", "(", "img_E", ")", "\n", "util", ".", "imsave", "(", "img_E", ",", "os", ".", "path", ".", "join", "(", "E_path", ",", "img_name", "+", "'_qf_'", "+", "str", "(", "QF_set", ")", "+", "'.png'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.None.main_test_fbcnn_color.main": [[12, 119], ["os.path.join", "os.path.join", "utils.utils_image.mkdir", "os.path.join", "os.path.exists", "utils.utils_logger.logger_info", "logging.getLogger", "logging.getLogger.info", "torch.device", "net", "model.to.load_state_dict", "model.to.eval", "model.to.named_parameters", "model.to.to", "logging.getLogger.info", "collections.OrderedDict", "utils.utils_image.get_image_paths", "enumerate", "logging.getLogger.info", "str", "print", "os.makedirs", "requests.get", "print", "open().write", "str", "torch.load", "os.path.splitext", "logging.getLogger.info", "utils.utils_image.imread_uint", "cv2.imencode", "utils.utils_image.uint2tensor4", "cv2.cvtColor.to", "model.to.", "utils.utils_image.tensor2single", "utils.utils_image.single2uint", "utils.utils_image.imread_uint().squeeze", "utils.utils_image.calculate_psnr", "utils.utils_image.calculate_ssim", "utils.utils_image.calculate_psnrb", "test_results[].append", "test_results[].append", "test_results[].append", "logging.getLogger.info", "logging.getLogger.info", "utils.utils_image.imsave", "sum", "len", "sum", "len", "sum", "len", "os.path.dirname", "os.path.basename", "os.path.join", "torch.cuda.is_available", "os.path.basename", "cv2.cvtColor", "cv2.imdecode", "cv2.imdecode", "cv2.cvtColor", "utils.utils_image.imshow", "os.path.join", "open", "int", "utils.utils_image.imread_uint", "round", "numpy.concatenate", "str", "float"], "function", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.mkdir", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_logger.logger_info", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.get_image_paths", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_logger.logger_print.write", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_fbcnn.ModelFBCNN.load", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.imread_uint", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.uint2tensor4", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.tensor2single", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.single2uint", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.calculate_psnr", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.calculate_ssim", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.calculate_psnrb", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.imsave", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.imshow", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.imread_uint"], ["def", "main", "(", ")", ":", "\n", "\n", "    ", "quality_factor_list", "=", "[", "10", ",", "20", ",", "30", ",", "40", ",", "50", ",", "60", ",", "70", ",", "80", ",", "90", "]", "\n", "testset_name", "=", "'LIVE1_color'", "# 'LIVE1_color' 'BSDS500_color' 'ICB'", "\n", "n_channels", "=", "3", "# set 1 for grayscale image, set 3 for color image", "\n", "model_name", "=", "'fbcnn_color.pth'", "\n", "nc", "=", "[", "64", ",", "128", ",", "256", ",", "512", "]", "\n", "nb", "=", "4", "\n", "show_img", "=", "False", "# default: False", "\n", "testsets", "=", "'testsets'", "\n", "results", "=", "'test_results'", "\n", "\n", "for", "quality_factor", "in", "quality_factor_list", ":", "\n", "\n", "        ", "result_name", "=", "testset_name", "+", "'_'", "+", "model_name", "[", ":", "-", "4", "]", "\n", "H_path", "=", "os", ".", "path", ".", "join", "(", "testsets", ",", "testset_name", ")", "\n", "E_path", "=", "os", ".", "path", ".", "join", "(", "results", ",", "result_name", ",", "str", "(", "quality_factor", ")", ")", "# E_path, for Estimated images", "\n", "util", ".", "mkdir", "(", "E_path", ")", "\n", "\n", "model_pool", "=", "'model_zoo'", "# fixed", "\n", "model_path", "=", "os", ".", "path", ".", "join", "(", "model_pool", ",", "model_name", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "model_path", ")", ":", "\n", "            ", "print", "(", "f'loading model from {model_path}'", ")", "\n", "", "else", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "model_path", ")", ",", "exist_ok", "=", "True", ")", "\n", "url", "=", "'https://github.com/jiaxi-jiang/FBCNN/releases/download/v1.0/{}'", ".", "format", "(", "os", ".", "path", ".", "basename", "(", "model_path", ")", ")", "\n", "r", "=", "requests", ".", "get", "(", "url", ",", "allow_redirects", "=", "True", ")", "\n", "print", "(", "f'downloading model {model_path}'", ")", "\n", "open", "(", "model_path", ",", "'wb'", ")", ".", "write", "(", "r", ".", "content", ")", "\n", "\n", "", "logger_name", "=", "result_name", "+", "'_qf_'", "+", "str", "(", "quality_factor", ")", "\n", "utils_logger", ".", "logger_info", "(", "logger_name", ",", "log_path", "=", "os", ".", "path", ".", "join", "(", "E_path", ",", "logger_name", "+", "'.log'", ")", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "logger_name", ")", "\n", "logger", ".", "info", "(", "'--------------- quality factor: {:d} ---------------'", ".", "format", "(", "quality_factor", ")", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "border", "=", "0", "\n", "\n", "\n", "# ----------------------------------------", "\n", "# load model", "\n", "# ----------------------------------------", "\n", "\n", "from", "models", ".", "network_fbcnn", "import", "FBCNN", "as", "net", "\n", "model", "=", "net", "(", "in_nc", "=", "n_channels", ",", "out_nc", "=", "n_channels", ",", "nc", "=", "nc", ",", "nb", "=", "nb", ",", "act_mode", "=", "'R'", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ",", "strict", "=", "True", ")", "\n", "model", ".", "eval", "(", ")", "\n", "for", "k", ",", "v", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "         ", "v", ".", "requires_grad", "=", "False", "\n", "", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "logger", ".", "info", "(", "'Model path: {:s}'", ".", "format", "(", "model_path", ")", ")", "\n", "\n", "test_results", "=", "OrderedDict", "(", ")", "\n", "test_results", "[", "'psnr'", "]", "=", "[", "]", "\n", "test_results", "[", "'ssim'", "]", "=", "[", "]", "\n", "test_results", "[", "'psnrb'", "]", "=", "[", "]", "\n", "\n", "H_paths", "=", "util", ".", "get_image_paths", "(", "H_path", ")", "\n", "for", "idx", ",", "img", "in", "enumerate", "(", "H_paths", ")", ":", "\n", "\n", "# ------------------------------------", "\n", "# (1) img_L", "\n", "# ------------------------------------", "\n", "            ", "img_name", ",", "ext", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "img", ")", ")", "\n", "logger", ".", "info", "(", "'{:->4d}--> {:>10s}'", ".", "format", "(", "idx", "+", "1", ",", "img_name", "+", "ext", ")", ")", "\n", "img_L", "=", "util", ".", "imread_uint", "(", "img", ",", "n_channels", "=", "n_channels", ")", "\n", "\n", "if", "n_channels", "==", "3", ":", "\n", "             ", "img_L", "=", "cv2", ".", "cvtColor", "(", "img_L", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "", "_", ",", "encimg", "=", "cv2", ".", "imencode", "(", "'.jpg'", ",", "img_L", ",", "[", "int", "(", "cv2", ".", "IMWRITE_JPEG_QUALITY", ")", ",", "quality_factor", "]", ")", "\n", "img_L", "=", "cv2", ".", "imdecode", "(", "encimg", ",", "0", ")", "if", "n_channels", "==", "1", "else", "cv2", ".", "imdecode", "(", "encimg", ",", "3", ")", "\n", "if", "n_channels", "==", "3", ":", "\n", "             ", "img_L", "=", "cv2", ".", "cvtColor", "(", "img_L", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "", "img_L", "=", "util", ".", "uint2tensor4", "(", "img_L", ")", "\n", "img_L", "=", "img_L", ".", "to", "(", "device", ")", "\n", "\n", "# ------------------------------------", "\n", "# (2) img_E", "\n", "# ------------------------------------", "\n", "\n", "#img_E,QF = model(img_L, torch.tensor([[0.6]]))      ", "\n", "img_E", ",", "QF", "=", "model", "(", "img_L", ")", "\n", "QF", "=", "1", "-", "QF", "\n", "img_E", "=", "util", ".", "tensor2single", "(", "img_E", ")", "\n", "img_E", "=", "util", ".", "single2uint", "(", "img_E", ")", "\n", "img_H", "=", "util", ".", "imread_uint", "(", "H_paths", "[", "idx", "]", ",", "n_channels", "=", "n_channels", ")", ".", "squeeze", "(", ")", "\n", "# --------------------------------", "\n", "# PSNR and SSIM, PSNRB", "\n", "# --------------------------------", "\n", "\n", "psnr", "=", "util", ".", "calculate_psnr", "(", "img_E", ",", "img_H", ",", "border", "=", "border", ")", "\n", "ssim", "=", "util", ".", "calculate_ssim", "(", "img_E", ",", "img_H", ",", "border", "=", "border", ")", "\n", "psnrb", "=", "util", ".", "calculate_psnrb", "(", "img_H", ",", "img_E", ",", "border", "=", "border", ")", "\n", "test_results", "[", "'psnr'", "]", ".", "append", "(", "psnr", ")", "\n", "test_results", "[", "'ssim'", "]", ".", "append", "(", "ssim", ")", "\n", "test_results", "[", "'psnrb'", "]", ".", "append", "(", "psnrb", ")", "\n", "logger", ".", "info", "(", "'{:s} - PSNR: {:.2f} dB; SSIM: {:.3f}; PSNRB: {:.2f} dB.'", ".", "format", "(", "img_name", "+", "ext", ",", "psnr", ",", "ssim", ",", "psnrb", ")", ")", "\n", "logger", ".", "info", "(", "'predicted quality factor: {:d}'", ".", "format", "(", "round", "(", "float", "(", "QF", "*", "100", ")", ")", ")", ")", "\n", "\n", "util", ".", "imshow", "(", "np", ".", "concatenate", "(", "[", "img_E", ",", "img_H", "]", ",", "axis", "=", "1", ")", ",", "title", "=", "'Recovered / Ground-truth'", ")", "if", "show_img", "else", "None", "\n", "util", ".", "imsave", "(", "img_E", ",", "os", ".", "path", ".", "join", "(", "E_path", ",", "img_name", "+", "'.png'", ")", ")", "\n", "\n", "", "ave_psnr", "=", "sum", "(", "test_results", "[", "'psnr'", "]", ")", "/", "len", "(", "test_results", "[", "'psnr'", "]", ")", "\n", "ave_ssim", "=", "sum", "(", "test_results", "[", "'ssim'", "]", ")", "/", "len", "(", "test_results", "[", "'ssim'", "]", ")", "\n", "ave_psnrb", "=", "sum", "(", "test_results", "[", "'psnrb'", "]", ")", "/", "len", "(", "test_results", "[", "'psnrb'", "]", ")", "\n", "logger", ".", "info", "(", "\n", "'Average PSNR/SSIM/PSNRB - {} -: {:.2f}$\\\\vert${:.4f}$\\\\vert${:.2f}.'", ".", "format", "(", "result_name", "+", "'_'", "+", "str", "(", "quality_factor", ")", ",", "ave_psnr", ",", "ave_ssim", ",", "ave_psnrb", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.None.main_test_fbcnn_gray_doublejpeg.main": [[12, 125], ["os.path.join", "os.path.join", "utils.utils_image.mkdir", "os.path.join", "os.path.exists", "utils.utils_logger.logger_info", "logging.getLogger", "logging.getLogger.info", "torch.device", "net", "model.to.load_state_dict", "model.to.eval", "model.to.named_parameters", "model.to.to", "logging.getLogger.info", "collections.OrderedDict", "utils.utils_image.get_image_paths", "enumerate", "logging.getLogger.info", "print", "os.makedirs", "requests.get", "print", "open().write", "str", "torch.load", "os.path.splitext", "logging.getLogger.info", "utils.utils_image.imread_uint", "cv2.imencode", "cv2.imencode", "utils.utils_image.uint2tensor4", "cv2.cvtColor.to", "model.to.", "utils.utils_image.tensor2single", "utils.utils_image.single2uint", "utils.utils_image.calculate_psnr", "utils.utils_image.calculate_ssim", "utils.utils_image.calculate_psnrb", "test_results[].append", "test_results[].append", "test_results[].append", "logging.getLogger.info", "logging.getLogger.info", "utils.utils_image.imsave", "sum", "len", "sum", "len", "sum", "len", "str", "str", "os.path.dirname", "os.path.basename", "str", "os.path.join", "torch.cuda.is_available", "os.path.basename", "cv2.cvtColor", "cv2.imdecode", "cv2.imdecode", "cv2.imdecode", "cv2.imdecode", "cv2.cvtColor", "utils.utils_image.imread_uint().squeeze", "utils.utils_image.imshow", "os.path.join", "open", "int", "int", "round", "numpy.concatenate", "str", "utils.utils_image.imread_uint", "float", "str"], "function", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.mkdir", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_logger.logger_info", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.get_image_paths", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_logger.logger_print.write", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_fbcnn.ModelFBCNN.load", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.imread_uint", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.uint2tensor4", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.tensor2single", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.single2uint", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.calculate_psnr", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.calculate_ssim", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.calculate_psnrb", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.imsave", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.imshow", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.imread_uint"], ["def", "main", "(", ")", ":", "\n", "\n", "    ", "quality_factor_list", "=", "[", "10", ",", "30", ",", "50", "]", "\n", "testset_name", "=", "'LIVE1_gray'", "# 'LIVE1_gray' 'Classic5' 'BSDS500_gray'", "\n", "n_channels", "=", "1", "# set 1 for grayscale image, set 3 for color image", "\n", "model_name", "=", "'fbcnn_gray_double.pth'", "\n", "nc", "=", "[", "64", ",", "128", ",", "256", ",", "512", "]", "\n", "nb", "=", "4", "\n", "show_img", "=", "False", "# default: False", "\n", "testsets", "=", "'testsets'", "\n", "results", "=", "'test_results'", "\n", "\n", "for", "qf1", "in", "quality_factor_list", ":", "\n", "        ", "for", "qf2", "in", "quality_factor_list", ":", "\n", "            ", "result_name", "=", "testset_name", "+", "'_'", "+", "model_name", "[", ":", "-", "4", "]", "\n", "H_path", "=", "os", ".", "path", ".", "join", "(", "testsets", ",", "testset_name", ")", "\n", "E_path", "=", "os", ".", "path", ".", "join", "(", "results", ",", "result_name", ",", "str", "(", "qf1", ")", "+", "str", "(", "qf2", ")", ")", "# E_path, for Estimated images", "\n", "util", ".", "mkdir", "(", "E_path", ")", "\n", "\n", "model_pool", "=", "'model_zoo'", "# fixed", "\n", "model_path", "=", "os", ".", "path", ".", "join", "(", "model_pool", ",", "model_name", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "model_path", ")", ":", "\n", "                ", "print", "(", "f'loading model from {model_path}'", ")", "\n", "", "else", ":", "\n", "                ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "model_path", ")", ",", "exist_ok", "=", "True", ")", "\n", "url", "=", "'https://github.com/jiaxi-jiang/FBCNN/releases/download/v1.0/{}'", ".", "format", "(", "os", ".", "path", ".", "basename", "(", "model_path", ")", ")", "\n", "r", "=", "requests", ".", "get", "(", "url", ",", "allow_redirects", "=", "True", ")", "\n", "print", "(", "f'downloading model {model_path}'", ")", "\n", "open", "(", "model_path", ",", "'wb'", ")", ".", "write", "(", "r", ".", "content", ")", "\n", "\n", "", "logger_name", "=", "result_name", "+", "'_qf_'", "+", "str", "(", "qf1", ")", "+", "str", "(", "qf2", ")", "\n", "utils_logger", ".", "logger_info", "(", "logger_name", ",", "log_path", "=", "os", ".", "path", ".", "join", "(", "E_path", ",", "logger_name", "+", "'.log'", ")", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "logger_name", ")", "\n", "logger", ".", "info", "(", "'--------------- QF1={:d}, QF2={:d} ---------------'", ".", "format", "(", "qf1", ",", "qf2", ")", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "border", "=", "0", "\n", "\n", "\n", "# ----------------------------------------", "\n", "# load model", "\n", "# ----------------------------------------", "\n", "\n", "from", "models", ".", "network_fbcnn", "import", "FBCNN", "as", "net", "\n", "model", "=", "net", "(", "in_nc", "=", "n_channels", ",", "out_nc", "=", "n_channels", ",", "nc", "=", "nc", ",", "nb", "=", "nb", ",", "act_mode", "=", "'R'", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ",", "strict", "=", "True", ")", "\n", "model", ".", "eval", "(", ")", "\n", "for", "k", ",", "v", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "                ", "v", ".", "requires_grad", "=", "False", "\n", "", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "logger", ".", "info", "(", "'Model path: {:s}'", ".", "format", "(", "model_path", ")", ")", "\n", "\n", "test_results", "=", "OrderedDict", "(", ")", "\n", "test_results", "[", "'psnr'", "]", "=", "[", "]", "\n", "test_results", "[", "'ssim'", "]", "=", "[", "]", "\n", "test_results", "[", "'psnrb'", "]", "=", "[", "]", "\n", "\n", "H_paths", "=", "util", ".", "get_image_paths", "(", "H_path", ")", "\n", "for", "idx", ",", "img", "in", "enumerate", "(", "H_paths", ")", ":", "\n", "\n", "# ------------------------------------", "\n", "# (1) img_L", "\n", "# ------------------------------------", "\n", "                ", "img_name", ",", "ext", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "img", ")", ")", "\n", "logger", ".", "info", "(", "'{:->4d}--> {:>10s}'", ".", "format", "(", "idx", "+", "1", ",", "img_name", "+", "ext", ")", ")", "\n", "img_L", "=", "util", ".", "imread_uint", "(", "img", ",", "n_channels", "=", "n_channels", ")", "\n", "\n", "if", "n_channels", "==", "3", ":", "\n", "                    ", "img_L", "=", "cv2", ".", "cvtColor", "(", "img_L", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "", "_", ",", "encimg", "=", "cv2", ".", "imencode", "(", "'.jpg'", ",", "img_L", ",", "[", "int", "(", "cv2", ".", "IMWRITE_JPEG_QUALITY", ")", ",", "qf1", "]", ")", "\n", "img_L", "=", "cv2", ".", "imdecode", "(", "encimg", ",", "0", ")", "if", "n_channels", "==", "1", "else", "cv2", ".", "imdecode", "(", "encimg", ",", "3", ")", "\n", "\n", "shift_h", ",", "shift_w", "=", "4", ",", "4", "\n", "_", ",", "encimg", "=", "cv2", ".", "imencode", "(", "'.jpg'", ",", "img_L", "[", "shift_h", ":", ",", "shift_w", ":", "]", ",", "[", "int", "(", "cv2", ".", "IMWRITE_JPEG_QUALITY", ")", ",", "qf2", "]", ")", "\n", "img_L", "=", "cv2", ".", "imdecode", "(", "encimg", ",", "0", ")", "if", "n_channels", "==", "1", "else", "cv2", ".", "imdecode", "(", "encimg", ",", "3", ")", "\n", "\n", "if", "n_channels", "==", "3", ":", "\n", "                    ", "img_L", "=", "cv2", ".", "cvtColor", "(", "img_L", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "", "img_L", "=", "util", ".", "uint2tensor4", "(", "img_L", ")", "\n", "img_L", "=", "img_L", ".", "to", "(", "device", ")", "\n", "\n", "# ------------------------------------", "\n", "# (2) img_E", "\n", "# ------------------------------------", "\n", "\n", "# img_E,QF = model(img_L, torch.tensor([[0.6]]))      ", "\n", "img_E", ",", "QF", "=", "model", "(", "img_L", ")", "\n", "QF", "=", "1", "-", "QF", "\n", "\n", "img_E", "=", "util", ".", "tensor2single", "(", "img_E", ")", "\n", "img_E", "=", "util", ".", "single2uint", "(", "img_E", ")", "\n", "img_H", "=", "util", ".", "imread_uint", "(", "H_paths", "[", "idx", "]", ",", "n_channels", "=", "n_channels", ")", ".", "squeeze", "(", ")", "[", "shift_h", ":", ",", "shift_w", ":", "]", "\n", "# --------------------------------", "\n", "# PSNR and SSIM, PSNRB", "\n", "# --------------------------------", "\n", "\n", "psnr", "=", "util", ".", "calculate_psnr", "(", "img_E", ",", "img_H", ",", "border", "=", "border", ")", "\n", "ssim", "=", "util", ".", "calculate_ssim", "(", "img_E", ",", "img_H", ",", "border", "=", "border", ")", "\n", "psnrb", "=", "util", ".", "calculate_psnrb", "(", "img_H", ",", "img_E", ",", "border", "=", "border", ")", "\n", "test_results", "[", "'psnr'", "]", ".", "append", "(", "psnr", ")", "\n", "test_results", "[", "'ssim'", "]", ".", "append", "(", "ssim", ")", "\n", "test_results", "[", "'psnrb'", "]", ".", "append", "(", "psnrb", ")", "\n", "logger", ".", "info", "(", "'{:s} - PSNR: {:.2f} dB; SSIM: {:.3f}; PSNRB: {:.2f} dB.'", ".", "format", "(", "img_name", "+", "ext", ",", "psnr", ",", "ssim", ",", "psnrb", ")", ")", "\n", "logger", ".", "info", "(", "'predicted quality factor: {:d}'", ".", "format", "(", "round", "(", "float", "(", "QF", "*", "100", ")", ")", ")", ")", "\n", "\n", "util", ".", "imshow", "(", "np", ".", "concatenate", "(", "[", "img_E", ",", "img_H", "]", ",", "axis", "=", "1", ")", ",", "title", "=", "'Recovered / Ground-truth'", ")", "if", "show_img", "else", "None", "\n", "util", ".", "imsave", "(", "img_E", ",", "os", ".", "path", ".", "join", "(", "E_path", ",", "img_name", "+", "'.png'", ")", ")", "\n", "\n", "", "ave_psnr", "=", "sum", "(", "test_results", "[", "'psnr'", "]", ")", "/", "len", "(", "test_results", "[", "'psnr'", "]", ")", "\n", "ave_ssim", "=", "sum", "(", "test_results", "[", "'ssim'", "]", ")", "/", "len", "(", "test_results", "[", "'ssim'", "]", ")", "\n", "ave_psnrb", "=", "sum", "(", "test_results", "[", "'psnrb'", "]", ")", "/", "len", "(", "test_results", "[", "'psnrb'", "]", ")", "\n", "logger", ".", "info", "(", "\n", "'Average PSNR/SSIM/PSNRB - {} -: {:.2f}$\\\\vert${:.4f}$\\\\vert${:.2f}.'", ".", "format", "(", "result_name", "+", "'_qf1_'", "+", "str", "(", "qf1", ")", "+", "'_qf2_'", "+", "str", "(", "qf2", ")", ",", "ave_psnr", ",", "ave_ssim", ",", "ave_psnrb", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_regularizers.regularizer_orth": [[16, 42], ["classname.find", "m.weight.data.clone", "torch.mm.size", "torch.mm.permute().contiguous().view", "torch.svd", "torch.svd", "torch.mm", "torch.mm", "torch.mm.view().permute", "torch.mm", "torch.mm", "v.t", "torch.mm.permute().contiguous", "torch.diag", "torch.diag", "torch.mm.view", "torch.mm.permute"], "function", ["None"], ["def", "regularizer_orth", "(", "m", ")", ":", "\n", "    ", "\"\"\"\n    # ----------------------------------------\n    # SVD Orthogonal Regularization\n    # ----------------------------------------\n    # Applies regularization to the training by performing the\n    # orthogonalization technique described in the paper\n    # This function is to be called by the torch.nn.Module.apply() method,\n    # which applies svd_orthogonalization() to every layer of the model.\n    # usage: net.apply(regularizer_orth)\n    # ----------------------------------------\n    \"\"\"", "\n", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "w", "=", "m", ".", "weight", ".", "data", ".", "clone", "(", ")", "\n", "c_out", ",", "c_in", ",", "f1", ",", "f2", "=", "w", ".", "size", "(", ")", "\n", "# dtype = m.weight.data.type()", "\n", "w", "=", "w", ".", "permute", "(", "2", ",", "3", ",", "1", ",", "0", ")", ".", "contiguous", "(", ")", ".", "view", "(", "f1", "*", "f2", "*", "c_in", ",", "c_out", ")", "\n", "# self.netG.apply(svd_orthogonalization)", "\n", "u", ",", "s", ",", "v", "=", "torch", ".", "svd", "(", "w", ")", "\n", "s", "[", "s", ">", "1.5", "]", "=", "s", "[", "s", ">", "1.5", "]", "-", "1e-4", "\n", "s", "[", "s", "<", "0.5", "]", "=", "s", "[", "s", "<", "0.5", "]", "+", "1e-4", "\n", "w", "=", "torch", ".", "mm", "(", "torch", ".", "mm", "(", "u", ",", "torch", ".", "diag", "(", "s", ")", ")", ",", "v", ".", "t", "(", ")", ")", "\n", "m", ".", "weight", ".", "data", "=", "w", ".", "view", "(", "f1", ",", "f2", ",", "c_in", ",", "c_out", ")", ".", "permute", "(", "3", ",", "2", ",", "0", ",", "1", ")", "# .type(dtype)", "\n", "", "else", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_regularizers.regularizer_orth2": [[47, 71], ["classname.find", "m.weight.data.clone", "torch.mm.size", "torch.mm.permute().contiguous().view", "torch.svd", "torch.svd", "s.mean", "torch.mm", "torch.mm", "torch.mm.view().permute", "torch.mm", "torch.mm", "v.t", "torch.mm.permute().contiguous", "torch.diag", "torch.diag", "torch.mm.view", "torch.mm.permute"], "function", ["None"], ["", "", "def", "regularizer_orth2", "(", "m", ")", ":", "\n", "    ", "\"\"\"\n    # ----------------------------------------\n    # Applies regularization to the training by performing the\n    # orthogonalization technique described in the paper\n    # This function is to be called by the torch.nn.Module.apply() method,\n    # which applies svd_orthogonalization() to every layer of the model.\n    # usage: net.apply(regularizer_orth2)\n    # ----------------------------------------\n    \"\"\"", "\n", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "w", "=", "m", ".", "weight", ".", "data", ".", "clone", "(", ")", "\n", "c_out", ",", "c_in", ",", "f1", ",", "f2", "=", "w", ".", "size", "(", ")", "\n", "# dtype = m.weight.data.type()", "\n", "w", "=", "w", ".", "permute", "(", "2", ",", "3", ",", "1", ",", "0", ")", ".", "contiguous", "(", ")", ".", "view", "(", "f1", "*", "f2", "*", "c_in", ",", "c_out", ")", "\n", "u", ",", "s", ",", "v", "=", "torch", ".", "svd", "(", "w", ")", "\n", "s_mean", "=", "s", ".", "mean", "(", ")", "\n", "s", "[", "s", ">", "1.5", "*", "s_mean", "]", "=", "s", "[", "s", ">", "1.5", "*", "s_mean", "]", "-", "1e-4", "\n", "s", "[", "s", "<", "0.5", "*", "s_mean", "]", "=", "s", "[", "s", "<", "0.5", "*", "s_mean", "]", "+", "1e-4", "\n", "w", "=", "torch", ".", "mm", "(", "torch", ".", "mm", "(", "u", ",", "torch", ".", "diag", "(", "s", ")", ")", ",", "v", ".", "t", "(", ")", ")", "\n", "m", ".", "weight", ".", "data", "=", "w", ".", "view", "(", "f1", ",", "f2", ",", "c_in", ",", "c_out", ")", ".", "permute", "(", "3", ",", "2", ",", "0", ",", "1", ")", "# .type(dtype)", "\n", "", "else", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_regularizers.regularizer_clip": [[74, 96], ["m.weight.data.clone", "classname.find", "classname.find", "m.bias.data.clone"], "function", ["None"], ["", "", "def", "regularizer_clip", "(", "m", ")", ":", "\n", "    ", "\"\"\"\n    # ----------------------------------------\n    # usage: net.apply(regularizer_clip)\n    # ----------------------------------------\n    \"\"\"", "\n", "eps", "=", "1e-4", "\n", "c_min", "=", "-", "1.5", "\n", "c_max", "=", "1.5", "\n", "\n", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "w", "=", "m", ".", "weight", ".", "data", ".", "clone", "(", ")", "\n", "w", "[", "w", ">", "c_max", "]", "-=", "eps", "\n", "w", "[", "w", "<", "c_min", "]", "+=", "eps", "\n", "m", ".", "weight", ".", "data", "=", "w", "\n", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "b", "=", "m", ".", "bias", ".", "data", ".", "clone", "(", ")", "\n", "b", "[", "b", ">", "c_max", "]", "-=", "eps", "\n", "b", "[", "b", "<", "c_min", "]", "+=", "eps", "\n", "m", ".", "bias", ".", "data", "=", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_bnorm.deleteLayer": [[20, 27], ["list", "model.named_children", "isinstance", "utils_bnorm.deleteLayer"], "function", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_bnorm.deleteLayer"], ["def", "deleteLayer", "(", "model", ",", "layer_type", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "    ", "''' Kai Zhang, 11/Jan/2019.\n    '''", "\n", "for", "k", ",", "m", "in", "list", "(", "model", ".", "named_children", "(", ")", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "layer_type", ")", ":", "\n", "            ", "del", "model", ".", "_modules", "[", "k", "]", "\n", "", "deleteLayer", "(", "m", ",", "layer_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_bnorm.merge_bn": [[32, 64], ["list", "model.named_children", "utils_bnorm.merge_bn", "m.running_var.clone().add_().pow_", "isinstance", "b.add_().mul_", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "torch.Tensor().zero_().type", "torch.Tensor().zero_().type", "torch.Parameter", "w.mul_", "w.mul_", "isinstance", "b.mul_().add_", "w.type", "m.running_var.clone().add_", "m.running_var.clone().add_().pow_.view().expand_as", "m.running_var.clone().add_().pow_.view().expand_as", "b.add_", "w.mul_", "w.mul_", "torch.Tensor().zero_", "torch.Tensor().zero_", "m.weight.data.view().expand_as", "m.weight.data.view().expand_as", "b.mul_", "m.running_var.clone", "m.running_var.clone().add_().pow_.view", "m.running_var.clone().add_().pow_.view", "torch.Tensor", "torch.Tensor", "w.size", "w.size", "m.weight.data.view", "m.weight.data.view", "w.size", "w.size"], "function", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_bnorm.merge_bn"], ["", "", "def", "merge_bn", "(", "model", ")", ":", "\n", "    ", "''' Kai Zhang, 11/Jan/2019.\n    merge all 'Conv+BN' (or 'TConv+BN') into 'Conv' (or 'TConv')\n    based on https://github.com/pytorch/pytorch/pull/901\n    '''", "\n", "prev_m", "=", "None", "\n", "for", "k", ",", "m", "in", "list", "(", "model", ".", "named_children", "(", ")", ")", ":", "\n", "        ", "if", "(", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm1d", ")", ")", "and", "(", "isinstance", "(", "prev_m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "prev_m", ",", "nn", ".", "Linear", ")", "or", "isinstance", "(", "prev_m", ",", "nn", ".", "ConvTranspose2d", ")", ")", ":", "\n", "\n", "            ", "w", "=", "prev_m", ".", "weight", ".", "data", "\n", "\n", "if", "prev_m", ".", "bias", "is", "None", ":", "\n", "                ", "zeros", "=", "torch", ".", "Tensor", "(", "prev_m", ".", "out_channels", ")", ".", "zero_", "(", ")", ".", "type", "(", "w", ".", "type", "(", ")", ")", "\n", "prev_m", ".", "bias", "=", "nn", ".", "Parameter", "(", "zeros", ")", "\n", "", "b", "=", "prev_m", ".", "bias", ".", "data", "\n", "\n", "invstd", "=", "m", ".", "running_var", ".", "clone", "(", ")", ".", "add_", "(", "m", ".", "eps", ")", ".", "pow_", "(", "-", "0.5", ")", "\n", "if", "isinstance", "(", "prev_m", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "                ", "w", ".", "mul_", "(", "invstd", ".", "view", "(", "1", ",", "w", ".", "size", "(", "1", ")", ",", "1", ",", "1", ")", ".", "expand_as", "(", "w", ")", ")", "\n", "", "else", ":", "\n", "                ", "w", ".", "mul_", "(", "invstd", ".", "view", "(", "w", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ")", ".", "expand_as", "(", "w", ")", ")", "\n", "", "b", ".", "add_", "(", "-", "m", ".", "running_mean", ")", ".", "mul_", "(", "invstd", ")", "\n", "if", "m", ".", "affine", ":", "\n", "                ", "if", "isinstance", "(", "prev_m", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "                    ", "w", ".", "mul_", "(", "m", ".", "weight", ".", "data", ".", "view", "(", "1", ",", "w", ".", "size", "(", "1", ")", ",", "1", ",", "1", ")", ".", "expand_as", "(", "w", ")", ")", "\n", "", "else", ":", "\n", "                    ", "w", ".", "mul_", "(", "m", ".", "weight", ".", "data", ".", "view", "(", "w", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ")", ".", "expand_as", "(", "w", ")", ")", "\n", "", "b", ".", "mul_", "(", "m", ".", "weight", ".", "data", ")", ".", "add_", "(", "m", ".", "bias", ".", "data", ")", "\n", "\n", "", "del", "model", ".", "_modules", "[", "k", "]", "\n", "", "prev_m", "=", "m", "\n", "merge_bn", "(", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_bnorm.add_bn": [[69, 79], ["list", "model.named_children", "utils_bnorm.add_bn", "isinstance", "isinstance", "isinstance", "torch.BatchNorm2d", "nn.BatchNorm2d.weight.data.fill_", "torch.Sequential"], "function", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_bnorm.add_bn"], ["", "", "def", "add_bn", "(", "model", ")", ":", "\n", "    ", "''' Kai Zhang, 11/Jan/2019.\n    '''", "\n", "for", "k", ",", "m", "in", "list", "(", "model", ".", "named_children", "(", ")", ")", ":", "\n", "        ", "if", "(", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "ConvTranspose2d", ")", ")", ":", "\n", "            ", "b", "=", "nn", ".", "BatchNorm2d", "(", "m", ".", "out_channels", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ")", "\n", "b", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "new_m", "=", "nn", ".", "Sequential", "(", "model", ".", "_modules", "[", "k", "]", ",", "b", ")", "\n", "model", ".", "_modules", "[", "k", "]", "=", "new_m", "\n", "", "add_bn", "(", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_bnorm.tidy_sequential": [[84, 92], ["list", "model.named_children", "isinstance", "utils_bnorm.tidy_sequential", "m.__len__", "m.__getitem__"], "function", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_bnorm.tidy_sequential", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.data.dataset_jpeggray.DatasetJPEG.__len__", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.data.dataset_jpeggray.DatasetJPEG.__getitem__"], ["", "", "def", "tidy_sequential", "(", "model", ")", ":", "\n", "    ", "''' Kai Zhang, 11/Jan/2019.\n    '''", "\n", "for", "k", ",", "m", "in", "list", "(", "model", ".", "named_children", "(", ")", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Sequential", ")", ":", "\n", "            ", "if", "m", ".", "__len__", "(", ")", "==", "1", ":", "\n", "                ", "model", ".", "_modules", "[", "k", "]", "=", "m", ".", "__getitem__", "(", "0", ")", "\n", "", "", "tidy_sequential", "(", "m", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.is_image_file": [[28, 30], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.get_timestamp": [[32, 34], ["datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["None"], ["", "def", "get_timestamp", "(", ")", ":", "\n", "    ", "return", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%y%m%d-%H%M%S'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.imshow": [[36, 44], ["matplotlib.figure", "matplotlib.imshow", "matplotlib.show", "numpy.squeeze", "matplotlib.title", "matplotlib.colorbar"], "function", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.imshow"], ["", "def", "imshow", "(", "x", ",", "title", "=", "None", ",", "cbar", "=", "False", ",", "figsize", "=", "None", ")", ":", "\n", "    ", "plt", ".", "figure", "(", "figsize", "=", "figsize", ")", "\n", "plt", ".", "imshow", "(", "np", ".", "squeeze", "(", "x", ")", ",", "interpolation", "=", "'nearest'", ",", "cmap", "=", "'gray'", ")", "\n", "if", "title", ":", "\n", "        ", "plt", ".", "title", "(", "title", ")", "\n", "", "if", "cbar", ":", "\n", "        ", "plt", ".", "colorbar", "(", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.surf": [[46, 57], ["matplotlib.figure", "matplotlib.axes", "numpy.arange", "numpy.arange", "numpy.meshgrid", "plt.axes.plot_surface", "matplotlib.show"], "function", ["None"], ["", "def", "surf", "(", "Z", ",", "cmap", "=", "'rainbow'", ",", "figsize", "=", "None", ")", ":", "\n", "    ", "plt", ".", "figure", "(", "figsize", "=", "figsize", ")", "\n", "ax3", "=", "plt", ".", "axes", "(", "projection", "=", "'3d'", ")", "\n", "\n", "w", ",", "h", "=", "Z", ".", "shape", "[", ":", "2", "]", "\n", "xx", "=", "np", ".", "arange", "(", "0", ",", "w", ",", "1", ")", "\n", "yy", "=", "np", ".", "arange", "(", "0", ",", "h", ",", "1", ")", "\n", "X", ",", "Y", "=", "np", ".", "meshgrid", "(", "xx", ",", "yy", ")", "\n", "ax3", ".", "plot_surface", "(", "X", ",", "Y", ",", "Z", ",", "cmap", "=", "cmap", ")", "\n", "#ax3.contour(X,Y,Z, zdim='z',offset=-2\uff0ccmap=cmap)", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.get_image_paths": [[66, 71], ["sorted", "utils_image._get_paths_from_images"], "function", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image._get_paths_from_images"], ["def", "get_image_paths", "(", "dataroot", ")", ":", "\n", "    ", "paths", "=", "None", "# return None if dataroot is None", "\n", "if", "dataroot", "is", "not", "None", ":", "\n", "        ", "paths", "=", "sorted", "(", "_get_paths_from_images", "(", "dataroot", ")", ")", "\n", "", "return", "paths", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image._get_paths_from_images": [[73, 83], ["os.path.isdir", "sorted", "os.walk", "sorted", "utils_image.is_image_file", "os.path.join", "images.append"], "function", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.is_image_file"], ["", "def", "_get_paths_from_images", "(", "path", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "isdir", "(", "path", ")", ",", "'{:s} is not a valid directory'", ".", "format", "(", "path", ")", "\n", "images", "=", "[", "]", "\n", "for", "dirpath", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "path", ")", ")", ":", "\n", "        ", "for", "fname", "in", "sorted", "(", "fnames", ")", ":", "\n", "            ", "if", "is_image_file", "(", "fname", ")", ":", "\n", "                ", "img_path", "=", "os", ".", "path", ".", "join", "(", "dirpath", ",", "fname", ")", "\n", "images", ".", "append", "(", "img_path", ")", "\n", "", "", "", "assert", "images", ",", "'{:s} has no valid image file'", ".", "format", "(", "path", ")", "\n", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.patches_from_image": [[92, 109], ["list", "list", "list.append", "list.append", "patches.append", "numpy.arange", "numpy.arange", "patches.append"], "function", ["None"], ["def", "patches_from_image", "(", "img", ",", "p_size", "=", "512", ",", "p_overlap", "=", "64", ",", "p_max", "=", "800", ")", ":", "\n", "    ", "w", ",", "h", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "patches", "=", "[", "]", "\n", "if", "w", ">", "p_max", "and", "h", ">", "p_max", ":", "\n", "        ", "w1", "=", "list", "(", "np", ".", "arange", "(", "0", ",", "w", "-", "p_size", ",", "p_size", "-", "p_overlap", ",", "dtype", "=", "np", ".", "int", ")", ")", "\n", "h1", "=", "list", "(", "np", ".", "arange", "(", "0", ",", "h", "-", "p_size", ",", "p_size", "-", "p_overlap", ",", "dtype", "=", "np", ".", "int", ")", ")", "\n", "w1", ".", "append", "(", "w", "-", "p_size", ")", "\n", "h1", ".", "append", "(", "h", "-", "p_size", ")", "\n", "# print(w1)", "\n", "# print(h1)", "\n", "for", "i", "in", "w1", ":", "\n", "            ", "for", "j", "in", "h1", ":", "\n", "                ", "patches", ".", "append", "(", "img", "[", "i", ":", "i", "+", "p_size", ",", "j", ":", "j", "+", "p_size", ",", ":", "]", ")", "\n", "", "", "", "else", ":", "\n", "        ", "patches", ".", "append", "(", "img", ")", "\n", "\n", "", "return", "patches", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.imssave": [[111, 121], ["os.path.splitext", "enumerate", "os.path.basename", "os.path.join", "cv2.imwrite", "os.path.dirname", "str"], "function", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.imwrite"], ["", "def", "imssave", "(", "imgs", ",", "img_path", ")", ":", "\n", "    ", "\"\"\"\n    imgs: list, N images of size WxHxC\n    \"\"\"", "\n", "img_name", ",", "ext", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "img_path", ")", ")", "\n", "for", "i", ",", "img", "in", "enumerate", "(", "imgs", ")", ":", "\n", "        ", "if", "img", ".", "ndim", "==", "3", ":", "\n", "            ", "img", "=", "img", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "", "new_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "img_path", ")", ",", "img_name", "+", "str", "(", "'_{:04d}'", ".", "format", "(", "i", ")", ")", "+", "'.png'", ")", "\n", "cv2", ".", "imwrite", "(", "new_path", ",", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.split_imageset": [[123, 142], ["utils_image.get_image_paths", "utils_image.imread_uint", "utils_image.patches_from_image", "utils_image.imssave", "os.path.join", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.get_image_paths", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.imread_uint", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.patches_from_image", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.imssave"], ["", "", "def", "split_imageset", "(", "original_dataroot", ",", "taget_dataroot", ",", "n_channels", "=", "3", ",", "p_size", "=", "512", ",", "p_overlap", "=", "96", ",", "p_max", "=", "800", ")", ":", "\n", "    ", "\"\"\"\n    split the large images from original_dataroot into small overlapped images with size (p_size)x(p_size), \n    and save them into taget_dataroot; only the images with larger size than (p_max)x(p_max)\n    will be splitted.\n\n    Args:\n        original_dataroot:\n        taget_dataroot:\n        p_size: size of small images\n        p_overlap: patch size in training is a good choice\n        p_max: images with smaller size than (p_max)x(p_max) keep unchanged.\n    \"\"\"", "\n", "paths", "=", "get_image_paths", "(", "original_dataroot", ")", "\n", "for", "img_path", "in", "paths", ":", "\n", "# img_name, ext = os.path.splitext(os.path.basename(img_path))", "\n", "        ", "img", "=", "imread_uint", "(", "img_path", ",", "n_channels", "=", "n_channels", ")", "\n", "patches", "=", "patches_from_image", "(", "img", ",", "p_size", ",", "p_overlap", ",", "p_max", ")", "\n", "imssave", "(", "patches", ",", "os", ".", "path", ".", "join", "(", "taget_dataroot", ",", "os", ".", "path", ".", "basename", "(", "img_path", ")", ")", ")", "\n", "#if original_dataroot == taget_dataroot:", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.mkdir": [[152, 155], ["os.path.exists", "os.makedirs"], "function", ["None"], ["def", "mkdir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.mkdirs": [[157, 163], ["isinstance", "utils_image.mkdir", "utils_image.mkdir"], "function", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.mkdir", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.mkdir"], ["", "", "def", "mkdirs", "(", "paths", ")", ":", "\n", "    ", "if", "isinstance", "(", "paths", ",", "str", ")", ":", "\n", "        ", "mkdir", "(", "paths", ")", "\n", "", "else", ":", "\n", "        ", "for", "path", "in", "paths", ":", "\n", "            ", "mkdir", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.mkdir_and_rename": [[165, 171], ["os.path.exists", "os.makedirs", "print", "os.rename", "utils_image.get_timestamp"], "function", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_option.get_timestamp"], ["", "", "", "def", "mkdir_and_rename", "(", "path", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "new_name", "=", "path", "+", "'_archived_'", "+", "get_timestamp", "(", ")", "\n", "print", "(", "'Path already exists. Rename it to [{:s}]'", ".", "format", "(", "new_name", ")", ")", "\n", "os", ".", "rename", "(", "path", ",", "new_name", ")", "\n", "", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.imread_uint": [[184, 197], ["cv2.imread", "numpy.expand_dims", "cv2.imread", "cv2.cvtColor", "cv2.cvtColor"], "function", ["None"], ["def", "imread_uint", "(", "path", ",", "n_channels", "=", "3", ")", ":", "\n", "#  input: path", "\n", "# output: HxWx3(RGB or GGG), or HxWx1 (G)", "\n", "    ", "if", "n_channels", "==", "1", ":", "\n", "        ", "img", "=", "cv2", ".", "imread", "(", "path", ",", "0", ")", "# cv2.IMREAD_GRAYSCALE", "\n", "img", "=", "np", ".", "expand_dims", "(", "img", ",", "axis", "=", "2", ")", "# HxWx1", "\n", "", "elif", "n_channels", "==", "3", ":", "\n", "        ", "img", "=", "cv2", ".", "imread", "(", "path", ",", "cv2", ".", "IMREAD_UNCHANGED", ")", "# BGR or G", "\n", "if", "img", ".", "ndim", "==", "2", ":", "\n", "            ", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_GRAY2RGB", ")", "# GGG", "\n", "", "else", ":", "\n", "            ", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "# RGB", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.imsave": [[202, 207], ["numpy.squeeze", "cv2.imwrite"], "function", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.imwrite"], ["", "def", "imsave", "(", "img", ",", "img_path", ")", ":", "\n", "    ", "img", "=", "np", ".", "squeeze", "(", "img", ")", "\n", "if", "img", ".", "ndim", "==", "3", ":", "\n", "        ", "img", "=", "img", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "", "cv2", ".", "imwrite", "(", "img_path", ",", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.imwrite": [[208, 213], ["numpy.squeeze", "cv2.imwrite"], "function", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.imwrite"], ["", "def", "imwrite", "(", "img", ",", "img_path", ")", ":", "\n", "    ", "img", "=", "np", ".", "squeeze", "(", "img", ")", "\n", "if", "img", ".", "ndim", "==", "3", ":", "\n", "        ", "img", "=", "img", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "", "cv2", ".", "imwrite", "(", "img_path", ",", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.read_img": [[219, 230], ["cv2.imread", "np.expand_dims.astype", "numpy.expand_dims"], "function", ["None"], ["", "def", "read_img", "(", "path", ")", ":", "\n", "# read image by cv2", "\n", "# return: Numpy float32, HWC, BGR, [0,1]", "\n", "    ", "img", "=", "cv2", ".", "imread", "(", "path", ",", "cv2", ".", "IMREAD_UNCHANGED", ")", "# cv2.IMREAD_GRAYSCALE", "\n", "img", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.", "\n", "if", "img", ".", "ndim", "==", "2", ":", "\n", "        ", "img", "=", "np", ".", "expand_dims", "(", "img", ",", "axis", "=", "2", ")", "\n", "# some images have 4 channels", "\n", "", "if", "img", ".", "shape", "[", "2", "]", ">", "3", ":", "\n", "        ", "img", "=", "img", "[", ":", ",", ":", ",", ":", "3", "]", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.uint2single": [[248, 251], ["numpy.float32"], "function", ["None"], ["def", "uint2single", "(", "img", ")", ":", "\n", "\n", "    ", "return", "np", ".", "float32", "(", "img", "/", "255.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.single2uint": [[253, 256], ["numpy.uint8", "img.clip"], "function", ["None"], ["", "def", "single2uint", "(", "img", ")", ":", "\n", "\n", "    ", "return", "np", ".", "uint8", "(", "(", "img", ".", "clip", "(", "0", ",", "1", ")", "*", "255.", ")", ".", "round", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.uint162single": [[258, 261], ["numpy.float32"], "function", ["None"], ["", "def", "uint162single", "(", "img", ")", ":", "\n", "\n", "    ", "return", "np", ".", "float32", "(", "img", "/", "65535.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.single2uint16": [[263, 266], ["numpy.uint16", "img.clip"], "function", ["None"], ["", "def", "single2uint16", "(", "img", ")", ":", "\n", "\n", "    ", "return", "np", ".", "uint16", "(", "(", "img", ".", "clip", "(", "0", ",", "1", ")", "*", "65535.", ")", ".", "round", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.uint2tensor4": [[274, 278], ["torch.from_numpy().permute().float().div().unsqueeze", "numpy.expand_dims", "torch.from_numpy().permute().float().div", "torch.from_numpy().permute().float", "torch.from_numpy().permute", "torch.from_numpy", "numpy.ascontiguousarray"], "function", ["None"], ["", "def", "uint2tensor4", "(", "img", ")", ":", "\n", "    ", "if", "img", ".", "ndim", "==", "2", ":", "\n", "        ", "img", "=", "np", ".", "expand_dims", "(", "img", ",", "axis", "=", "2", ")", "\n", "", "return", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "img", ")", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "float", "(", ")", ".", "div", "(", "255.", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.uint2tensor3": [[281, 285], ["torch.from_numpy().permute().float().div", "numpy.expand_dims", "torch.from_numpy().permute().float", "torch.from_numpy().permute", "torch.from_numpy", "numpy.ascontiguousarray"], "function", ["None"], ["", "def", "uint2tensor3", "(", "img", ")", ":", "\n", "    ", "if", "img", ".", "ndim", "==", "2", ":", "\n", "        ", "img", "=", "np", ".", "expand_dims", "(", "img", ",", "axis", "=", "2", ")", "\n", "", "return", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "img", ")", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "float", "(", ")", ".", "div", "(", "255.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.tensor2uint": [[288, 293], ["np.transpose.data.squeeze().float().clamp_().cpu().numpy", "numpy.uint8", "numpy.transpose", "np.transpose.data.squeeze().float().clamp_().cpu", "np.transpose.data.squeeze().float().clamp_", "np.transpose.data.squeeze().float", "np.transpose.data.squeeze"], "function", ["None"], ["", "def", "tensor2uint", "(", "img", ")", ":", "\n", "    ", "img", "=", "img", ".", "data", ".", "squeeze", "(", ")", ".", "float", "(", ")", ".", "clamp_", "(", "0", ",", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "img", ".", "ndim", "==", "3", ":", "\n", "        ", "img", "=", "np", ".", "transpose", "(", "img", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "", "return", "np", ".", "uint8", "(", "(", "img", "*", "255.0", ")", ".", "round", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.single2tensor3": [[301, 303], ["torch.from_numpy().permute().float", "torch.from_numpy().permute", "torch.from_numpy", "numpy.ascontiguousarray"], "function", ["None"], ["", "def", "single2tensor3", "(", "img", ")", ":", "\n", "    ", "return", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "img", ")", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.single2tensor4": [[306, 308], ["torch.from_numpy().permute().float().unsqueeze", "torch.from_numpy().permute().float", "torch.from_numpy().permute", "torch.from_numpy", "numpy.ascontiguousarray"], "function", ["None"], ["", "def", "single2tensor4", "(", "img", ")", ":", "\n", "    ", "return", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "img", ")", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.tensor2single": [[311, 317], ["np.transpose.data.squeeze().float().cpu().numpy", "numpy.transpose", "np.transpose.data.squeeze().float().cpu", "np.transpose.data.squeeze().float", "np.transpose.data.squeeze"], "function", ["None"], ["", "def", "tensor2single", "(", "img", ")", ":", "\n", "    ", "img", "=", "img", ".", "data", ".", "squeeze", "(", ")", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "img", ".", "ndim", "==", "3", ":", "\n", "        ", "img", "=", "np", ".", "transpose", "(", "img", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.tensor2single3": [[319, 326], ["np.expand_dims.data.squeeze().float().cpu().numpy", "numpy.transpose", "np.expand_dims.data.squeeze().float().cpu", "numpy.expand_dims", "np.expand_dims.data.squeeze().float", "np.expand_dims.data.squeeze"], "function", ["None"], ["", "def", "tensor2single3", "(", "img", ")", ":", "\n", "    ", "img", "=", "img", ".", "data", ".", "squeeze", "(", ")", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "img", ".", "ndim", "==", "3", ":", "\n", "        ", "img", "=", "np", ".", "transpose", "(", "img", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "", "elif", "img", ".", "ndim", "==", "2", ":", "\n", "        ", "img", "=", "np", ".", "expand_dims", "(", "img", ",", "axis", "=", "2", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.single2tensor5": [[328, 330], ["torch.from_numpy().permute().float().unsqueeze", "torch.from_numpy().permute().float", "torch.from_numpy().permute", "torch.from_numpy", "numpy.ascontiguousarray"], "function", ["None"], ["", "def", "single2tensor5", "(", "img", ")", ":", "\n", "    ", "return", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "img", ")", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.single32tensor5": [[332, 334], ["torch.from_numpy().float().unsqueeze().unsqueeze", "torch.from_numpy().float().unsqueeze", "torch.from_numpy().float", "torch.from_numpy", "numpy.ascontiguousarray"], "function", ["None"], ["", "def", "single32tensor5", "(", "img", ")", ":", "\n", "    ", "return", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "img", ")", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.single42tensor4": [[336, 338], ["torch.from_numpy().permute().float", "torch.from_numpy().permute", "torch.from_numpy", "numpy.ascontiguousarray"], "function", ["None"], ["", "def", "single42tensor4", "(", "img", ")", ":", "\n", "    ", "return", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "img", ")", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.tensor2img": [[341, 366], ["tensor.squeeze().float().cpu().clamp_.squeeze().float().cpu().clamp_", "tensor.squeeze().float().cpu().clamp_.dim", "tensor.numpy.astype", "len", "torchvision.utils.make_grid().numpy", "numpy.transpose", "tensor.squeeze().float().cpu().clamp_.squeeze().float().cpu", "tensor.squeeze().float().cpu().clamp_.numpy", "numpy.transpose", "torchvision.utils.make_grid", "tensor.squeeze().float().cpu().clamp_.numpy", "TypeError", "tensor.squeeze().float().cpu().clamp_.squeeze().float", "int", "tensor.squeeze().float().cpu().clamp_.squeeze", "math.sqrt"], "function", ["None"], ["", "def", "tensor2img", "(", "tensor", ",", "out_type", "=", "np", ".", "uint8", ",", "min_max", "=", "(", "0", ",", "1", ")", ")", ":", "\n", "    ", "'''\n    Converts a torch Tensor into an image Numpy array of BGR channel order\n    Input: 4D(B,(3/1),H,W), 3D(C,H,W), or 2D(H,W), any range, RGB channel order\n    Output: 3D(H,W,C) or 2D(H,W), [0,255], np.uint8 (default)\n    '''", "\n", "tensor", "=", "tensor", ".", "squeeze", "(", ")", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "clamp_", "(", "*", "min_max", ")", "# squeeze first, then clamp", "\n", "tensor", "=", "(", "tensor", "-", "min_max", "[", "0", "]", ")", "/", "(", "min_max", "[", "1", "]", "-", "min_max", "[", "0", "]", ")", "# to range [0,1]", "\n", "n_dim", "=", "tensor", ".", "dim", "(", ")", "\n", "if", "n_dim", "==", "4", ":", "\n", "        ", "n_img", "=", "len", "(", "tensor", ")", "\n", "img_np", "=", "make_grid", "(", "tensor", ",", "nrow", "=", "int", "(", "math", ".", "sqrt", "(", "n_img", ")", ")", ",", "normalize", "=", "False", ")", ".", "numpy", "(", ")", "\n", "img_np", "=", "np", ".", "transpose", "(", "img_np", "[", "[", "2", ",", "1", ",", "0", "]", ",", ":", ",", ":", "]", ",", "(", "1", ",", "2", ",", "0", ")", ")", "# HWC, BGR", "\n", "", "elif", "n_dim", "==", "3", ":", "\n", "        ", "img_np", "=", "tensor", ".", "numpy", "(", ")", "\n", "img_np", "=", "np", ".", "transpose", "(", "img_np", "[", "[", "2", ",", "1", ",", "0", "]", ",", ":", ",", ":", "]", ",", "(", "1", ",", "2", ",", "0", ")", ")", "# HWC, BGR", "\n", "", "elif", "n_dim", "==", "2", ":", "\n", "        ", "img_np", "=", "tensor", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\n", "'Only support 4D, 3D and 2D tensor. But received with dimension: {:d}'", ".", "format", "(", "n_dim", ")", ")", "\n", "", "if", "out_type", "==", "np", ".", "uint8", ":", "\n", "        ", "img_np", "=", "(", "img_np", "*", "255.0", ")", ".", "round", "(", ")", "\n", "# Important. Unlike matlab, numpy.unit8() WILL NOT round by default.", "\n", "", "return", "img_np", ".", "astype", "(", "out_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.augment_img": [[379, 398], ["numpy.flipud", "numpy.rot90", "numpy.flipud", "numpy.rot90", "numpy.flipud", "numpy.rot90", "numpy.rot90", "numpy.rot90", "numpy.flipud", "numpy.rot90"], "function", ["None"], ["def", "augment_img", "(", "img", ",", "mode", "=", "0", ")", ":", "\n", "    ", "'''Kai Zhang (github: https://github.com/cszn)\n    '''", "\n", "if", "mode", "==", "0", ":", "\n", "        ", "return", "img", "\n", "", "elif", "mode", "==", "1", ":", "\n", "        ", "return", "np", ".", "flipud", "(", "np", ".", "rot90", "(", "img", ")", ")", "\n", "", "elif", "mode", "==", "2", ":", "\n", "        ", "return", "np", ".", "flipud", "(", "img", ")", "\n", "", "elif", "mode", "==", "3", ":", "\n", "        ", "return", "np", ".", "rot90", "(", "img", ",", "k", "=", "3", ")", "\n", "", "elif", "mode", "==", "4", ":", "\n", "        ", "return", "np", ".", "flipud", "(", "np", ".", "rot90", "(", "img", ",", "k", "=", "2", ")", ")", "\n", "", "elif", "mode", "==", "5", ":", "\n", "        ", "return", "np", ".", "rot90", "(", "img", ")", "\n", "", "elif", "mode", "==", "6", ":", "\n", "        ", "return", "np", ".", "rot90", "(", "img", ",", "k", "=", "2", ")", "\n", "", "elif", "mode", "==", "7", ":", "\n", "        ", "return", "np", ".", "flipud", "(", "np", ".", "rot90", "(", "img", ",", "k", "=", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.augment_img_tensor4": [[400, 419], ["img.rot90().flip", "img.flip", "img.rot90", "img.rot90", "img.rot90().flip", "img.rot90", "img.rot90", "img.rot90", "img.rot90().flip", "img.rot90"], "function", ["None"], ["", "", "def", "augment_img_tensor4", "(", "img", ",", "mode", "=", "0", ")", ":", "\n", "    ", "'''Kai Zhang (github: https://github.com/cszn)\n    '''", "\n", "if", "mode", "==", "0", ":", "\n", "        ", "return", "img", "\n", "", "elif", "mode", "==", "1", ":", "\n", "        ", "return", "img", ".", "rot90", "(", "1", ",", "[", "2", ",", "3", "]", ")", ".", "flip", "(", "[", "2", "]", ")", "\n", "", "elif", "mode", "==", "2", ":", "\n", "        ", "return", "img", ".", "flip", "(", "[", "2", "]", ")", "\n", "", "elif", "mode", "==", "3", ":", "\n", "        ", "return", "img", ".", "rot90", "(", "3", ",", "[", "2", ",", "3", "]", ")", "\n", "", "elif", "mode", "==", "4", ":", "\n", "        ", "return", "img", ".", "rot90", "(", "2", ",", "[", "2", ",", "3", "]", ")", ".", "flip", "(", "[", "2", "]", ")", "\n", "", "elif", "mode", "==", "5", ":", "\n", "        ", "return", "img", ".", "rot90", "(", "1", ",", "[", "2", ",", "3", "]", ")", "\n", "", "elif", "mode", "==", "6", ":", "\n", "        ", "return", "img", ".", "rot90", "(", "2", ",", "[", "2", ",", "3", "]", ")", "\n", "", "elif", "mode", "==", "7", ":", "\n", "        ", "return", "img", ".", "rot90", "(", "3", ",", "[", "2", ",", "3", "]", ")", ".", "flip", "(", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.augment_img_tensor": [[421, 438], ["img.size", "img.data.cpu().numpy", "utils_image.augment_img", "torch.from_numpy", "img_tensor.permute.type_as", "len", "numpy.transpose", "numpy.ascontiguousarray", "len", "img_tensor.permute.permute", "img.data.cpu", "len", "numpy.transpose", "len", "img_tensor.permute.permute"], "function", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.augment_img"], ["", "", "def", "augment_img_tensor", "(", "img", ",", "mode", "=", "0", ")", ":", "\n", "    ", "'''Kai Zhang (github: https://github.com/cszn)\n    '''", "\n", "img_size", "=", "img", ".", "size", "(", ")", "\n", "img_np", "=", "img", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "len", "(", "img_size", ")", "==", "3", ":", "\n", "        ", "img_np", "=", "np", ".", "transpose", "(", "img_np", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "", "elif", "len", "(", "img_size", ")", "==", "4", ":", "\n", "        ", "img_np", "=", "np", ".", "transpose", "(", "img_np", ",", "(", "2", ",", "3", ",", "1", ",", "0", ")", ")", "\n", "", "img_np", "=", "augment_img", "(", "img_np", ",", "mode", "=", "mode", ")", "\n", "img_tensor", "=", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "img_np", ")", ")", "\n", "if", "len", "(", "img_size", ")", "==", "3", ":", "\n", "        ", "img_tensor", "=", "img_tensor", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "", "elif", "len", "(", "img_size", ")", "==", "4", ":", "\n", "        ", "img_tensor", "=", "img_tensor", ".", "permute", "(", "3", ",", "2", ",", "0", ",", "1", ")", "\n", "\n", "", "return", "img_tensor", ".", "type_as", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.augment_img_np3": [[440, 466], ["img.transpose.transpose", "img.transpose.transpose", "img.transpose.transpose", "img.transpose.transpose"], "function", ["None"], ["", "def", "augment_img_np3", "(", "img", ",", "mode", "=", "0", ")", ":", "\n", "    ", "if", "mode", "==", "0", ":", "\n", "        ", "return", "img", "\n", "", "elif", "mode", "==", "1", ":", "\n", "        ", "return", "img", ".", "transpose", "(", "1", ",", "0", ",", "2", ")", "\n", "", "elif", "mode", "==", "2", ":", "\n", "        ", "return", "img", "[", ":", ":", "-", "1", ",", ":", ",", ":", "]", "\n", "", "elif", "mode", "==", "3", ":", "\n", "        ", "img", "=", "img", "[", ":", ":", "-", "1", ",", ":", ",", ":", "]", "\n", "img", "=", "img", ".", "transpose", "(", "1", ",", "0", ",", "2", ")", "\n", "return", "img", "\n", "", "elif", "mode", "==", "4", ":", "\n", "        ", "return", "img", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "", "elif", "mode", "==", "5", ":", "\n", "        ", "img", "=", "img", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "img", "=", "img", ".", "transpose", "(", "1", ",", "0", ",", "2", ")", "\n", "return", "img", "\n", "", "elif", "mode", "==", "6", ":", "\n", "        ", "img", "=", "img", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "img", "=", "img", "[", ":", ":", "-", "1", ",", ":", ",", ":", "]", "\n", "return", "img", "\n", "", "elif", "mode", "==", "7", ":", "\n", "        ", "img", "=", "img", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "img", "=", "img", "[", ":", ":", "-", "1", ",", ":", ",", ":", "]", "\n", "img", "=", "img", ".", "transpose", "(", "1", ",", "0", ",", "2", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.augment_imgs": [[468, 484], ["utils_image.augment_imgs._augment"], "function", ["None"], ["", "", "def", "augment_imgs", "(", "img_list", ",", "hflip", "=", "True", ",", "rot", "=", "True", ")", ":", "\n", "# horizontal flip OR rotate", "\n", "    ", "hflip", "=", "hflip", "and", "random", ".", "random", "(", ")", "<", "0.5", "\n", "vflip", "=", "rot", "and", "random", ".", "random", "(", ")", "<", "0.5", "\n", "rot90", "=", "rot", "and", "random", ".", "random", "(", ")", "<", "0.5", "\n", "\n", "def", "_augment", "(", "img", ")", ":", "\n", "        ", "if", "hflip", ":", "\n", "            ", "img", "=", "img", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "", "if", "vflip", ":", "\n", "            ", "img", "=", "img", "[", ":", ":", "-", "1", ",", ":", ",", ":", "]", "\n", "", "if", "rot90", ":", "\n", "            ", "img", "=", "img", ".", "transpose", "(", "1", ",", "0", ",", "2", ")", "\n", "", "return", "img", "\n", "\n", "", "return", "[", "_augment", "(", "img", ")", "for", "img", "in", "img_list", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.modcrop": [[493, 507], ["numpy.copy", "ValueError"], "function", ["None"], ["def", "modcrop", "(", "img_in", ",", "scale", ")", ":", "\n", "# img_in: Numpy, HWC or HW", "\n", "    ", "img", "=", "np", ".", "copy", "(", "img_in", ")", "\n", "if", "img", ".", "ndim", "==", "2", ":", "\n", "        ", "H", ",", "W", "=", "img", ".", "shape", "\n", "H_r", ",", "W_r", "=", "H", "%", "scale", ",", "W", "%", "scale", "\n", "img", "=", "img", "[", ":", "H", "-", "H_r", ",", ":", "W", "-", "W_r", "]", "\n", "", "elif", "img", ".", "ndim", "==", "3", ":", "\n", "        ", "H", ",", "W", ",", "C", "=", "img", ".", "shape", "\n", "H_r", ",", "W_r", "=", "H", "%", "scale", ",", "W", "%", "scale", "\n", "img", "=", "img", "[", ":", "H", "-", "H_r", ",", ":", "W", "-", "W_r", ",", ":", "]", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Wrong img ndim: [{:d}].'", ".", "format", "(", "img", ".", "ndim", ")", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.shave": [[509, 515], ["numpy.copy"], "function", ["None"], ["", "def", "shave", "(", "img_in", ",", "border", "=", "0", ")", ":", "\n", "# img_in: Numpy, HWC or HW", "\n", "    ", "img", "=", "np", ".", "copy", "(", "img_in", ")", "\n", "h", ",", "w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "img", "=", "img", "[", "border", ":", "h", "-", "border", ",", "border", ":", "w", "-", "border", "]", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.rgb2ycbcr": [[528, 550], ["img.astype", "rlt.round.astype", "rlt.round.round", "numpy.dot", "numpy.matmul"], "function", ["None"], ["def", "rgb2ycbcr", "(", "img", ",", "only_y", "=", "True", ")", ":", "\n", "    ", "'''same as matlab rgb2ycbcr\n    only_y: only return Y channel\n    Input:\n        uint8, [0, 255]\n        float, [0, 1]\n    '''", "\n", "in_img_type", "=", "img", ".", "dtype", "\n", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "if", "in_img_type", "!=", "np", ".", "uint8", ":", "\n", "        ", "img", "*=", "255.", "\n", "# convert", "\n", "", "if", "only_y", ":", "\n", "        ", "rlt", "=", "np", ".", "dot", "(", "img", ",", "[", "65.481", ",", "128.553", ",", "24.966", "]", ")", "/", "255.0", "+", "16.0", "\n", "", "else", ":", "\n", "        ", "rlt", "=", "np", ".", "matmul", "(", "img", ",", "[", "[", "65.481", ",", "-", "37.797", ",", "112.0", "]", ",", "[", "128.553", ",", "-", "74.203", ",", "-", "93.786", "]", ",", "\n", "[", "24.966", ",", "112.0", ",", "-", "18.214", "]", "]", ")", "/", "255.0", "+", "[", "16", ",", "128", ",", "128", "]", "\n", "", "if", "in_img_type", "==", "np", ".", "uint8", ":", "\n", "        ", "rlt", "=", "rlt", ".", "round", "(", ")", "\n", "", "else", ":", "\n", "        ", "rlt", "/=", "255.", "\n", "", "return", "rlt", ".", "astype", "(", "in_img_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.ycbcr2rgb": [[552, 570], ["img.astype", "rlt.round.astype", "rlt.round.round", "numpy.matmul"], "function", ["None"], ["", "def", "ycbcr2rgb", "(", "img", ")", ":", "\n", "    ", "'''same as matlab ycbcr2rgb\n    Input:\n        uint8, [0, 255]\n        float, [0, 1]\n    '''", "\n", "in_img_type", "=", "img", ".", "dtype", "\n", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "if", "in_img_type", "!=", "np", ".", "uint8", ":", "\n", "        ", "img", "*=", "255.", "\n", "# convert", "\n", "", "rlt", "=", "np", ".", "matmul", "(", "img", ",", "[", "[", "0.00456621", ",", "0.00456621", ",", "0.00456621", "]", ",", "[", "0", ",", "-", "0.00153632", ",", "0.00791071", "]", ",", "\n", "[", "0.00625893", ",", "-", "0.00318811", ",", "0", "]", "]", ")", "*", "255.0", "+", "[", "-", "222.921", ",", "135.576", ",", "-", "276.836", "]", "\n", "if", "in_img_type", "==", "np", ".", "uint8", ":", "\n", "        ", "rlt", "=", "rlt", ".", "round", "(", ")", "\n", "", "else", ":", "\n", "        ", "rlt", "/=", "255.", "\n", "", "return", "rlt", ".", "astype", "(", "in_img_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.bgr2ycbcr": [[572, 594], ["img.astype", "rlt.round.astype", "rlt.round.round", "numpy.dot", "numpy.matmul"], "function", ["None"], ["", "def", "bgr2ycbcr", "(", "img", ",", "only_y", "=", "True", ")", ":", "\n", "    ", "'''bgr version of rgb2ycbcr\n    only_y: only return Y channel\n    Input:\n        uint8, [0, 255]\n        float, [0, 1]\n    '''", "\n", "in_img_type", "=", "img", ".", "dtype", "\n", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "if", "in_img_type", "!=", "np", ".", "uint8", ":", "\n", "        ", "img", "*=", "255.", "\n", "# convert", "\n", "", "if", "only_y", ":", "\n", "        ", "rlt", "=", "np", ".", "dot", "(", "img", ",", "[", "24.966", ",", "128.553", ",", "65.481", "]", ")", "/", "255.0", "+", "16.0", "\n", "", "else", ":", "\n", "        ", "rlt", "=", "np", ".", "matmul", "(", "img", ",", "[", "[", "24.966", ",", "112.0", ",", "-", "18.214", "]", ",", "[", "128.553", ",", "-", "74.203", ",", "-", "93.786", "]", ",", "\n", "[", "65.481", ",", "-", "37.797", ",", "112.0", "]", "]", ")", "/", "255.0", "+", "[", "16", ",", "128", ",", "128", "]", "\n", "", "if", "in_img_type", "==", "np", ".", "uint8", ":", "\n", "        ", "rlt", "=", "rlt", ".", "round", "(", ")", "\n", "", "else", ":", "\n", "        ", "rlt", "/=", "255.", "\n", "", "return", "rlt", ".", "astype", "(", "in_img_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.channel_convert": [[596, 608], ["cv2.cvtColor", "numpy.expand_dims", "utils_image.bgr2ycbcr", "numpy.expand_dims", "cv2.cvtColor"], "function", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.bgr2ycbcr"], ["", "def", "channel_convert", "(", "in_c", ",", "tar_type", ",", "img_list", ")", ":", "\n", "# conversion among BGR, gray and y", "\n", "    ", "if", "in_c", "==", "3", "and", "tar_type", "==", "'gray'", ":", "# BGR to gray", "\n", "        ", "gray_list", "=", "[", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2GRAY", ")", "for", "img", "in", "img_list", "]", "\n", "return", "[", "np", ".", "expand_dims", "(", "img", ",", "axis", "=", "2", ")", "for", "img", "in", "gray_list", "]", "\n", "", "elif", "in_c", "==", "3", "and", "tar_type", "==", "'y'", ":", "# BGR to y", "\n", "        ", "y_list", "=", "[", "bgr2ycbcr", "(", "img", ",", "only_y", "=", "True", ")", "for", "img", "in", "img_list", "]", "\n", "return", "[", "np", ".", "expand_dims", "(", "img", ",", "axis", "=", "2", ")", "for", "img", "in", "y_list", "]", "\n", "", "elif", "in_c", "==", "1", "and", "tar_type", "==", "'RGB'", ":", "# gray/y to BGR", "\n", "        ", "return", "[", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_GRAY2BGR", ")", "for", "img", "in", "img_list", "]", "\n", "", "else", ":", "\n", "        ", "return", "img_list", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.calculate_psnr": [[620, 636], ["img1.astype.astype", "img2.astype.astype", "numpy.mean", "ValueError", "float", "math.log10", "math.sqrt"], "function", ["None"], ["def", "calculate_psnr", "(", "img1", ",", "img2", ",", "border", "=", "0", ")", ":", "\n", "# img1 and img2 have range [0, 255]", "\n", "#img1 = img1.squeeze()", "\n", "#img2 = img2.squeeze()", "\n", "    ", "if", "not", "img1", ".", "shape", "==", "img2", ".", "shape", ":", "\n", "        ", "raise", "ValueError", "(", "'Input images must have the same dimensions.'", ")", "\n", "", "h", ",", "w", "=", "img1", ".", "shape", "[", ":", "2", "]", "\n", "img1", "=", "img1", "[", "border", ":", "h", "-", "border", ",", "border", ":", "w", "-", "border", "]", "\n", "img2", "=", "img2", "[", "border", ":", "h", "-", "border", ",", "border", ":", "w", "-", "border", "]", "\n", "\n", "img1", "=", "img1", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img2", "=", "img2", ".", "astype", "(", "np", ".", "float64", ")", "\n", "mse", "=", "np", ".", "mean", "(", "(", "img1", "-", "img2", ")", "**", "2", ")", "\n", "if", "mse", "==", "0", ":", "\n", "        ", "return", "float", "(", "'inf'", ")", "\n", "", "return", "20", "*", "math", ".", "log10", "(", "255.0", "/", "math", ".", "sqrt", "(", "mse", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.compute_bef": [[641, 683], ["list", "list", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "range", "range", "set", "set", "range", "range", "set", "set", "math.log2", "math.log2", "min"], "function", ["None"], ["", "def", "compute_bef", "(", "img", ")", ":", "\n", "\n", "\t", "block", "=", "8", "\n", "height", ",", "width", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "\n", "H", "=", "[", "i", "for", "i", "in", "range", "(", "width", "-", "1", ")", "]", "\n", "H_B", "=", "[", "i", "for", "i", "in", "range", "(", "block", "-", "1", ",", "width", "-", "1", ",", "block", ")", "]", "\n", "H_BC", "=", "list", "(", "set", "(", "H", ")", "-", "set", "(", "H_B", ")", ")", "\n", "\n", "V", "=", "[", "i", "for", "i", "in", "range", "(", "height", "-", "1", ")", "]", "\n", "V_B", "=", "[", "i", "for", "i", "in", "range", "(", "block", "-", "1", ",", "height", "-", "1", ",", "block", ")", "]", "\n", "V_BC", "=", "list", "(", "set", "(", "V", ")", "-", "set", "(", "V_B", ")", ")", "\n", "\n", "D_B", "=", "0", "\n", "D_BC", "=", "0", "\n", "\n", "for", "i", "in", "H_B", ":", "\n", "\t\t", "diff", "=", "img", "[", ":", ",", "i", "]", "-", "img", "[", ":", ",", "i", "+", "1", "]", "\n", "D_B", "+=", "np", ".", "sum", "(", "diff", "**", "2", ")", "\n", "\n", "", "for", "i", "in", "H_BC", ":", "\n", "\t\t", "diff", "=", "img", "[", ":", ",", "i", "]", "-", "img", "[", ":", ",", "i", "+", "1", "]", "\n", "D_BC", "+=", "np", ".", "sum", "(", "diff", "**", "2", ")", "\n", "\n", "\n", "", "for", "j", "in", "V_B", ":", "\n", "\t\t", "diff", "=", "img", "[", "j", ",", ":", "]", "-", "img", "[", "j", "+", "1", ",", ":", "]", "\n", "D_B", "+=", "np", ".", "sum", "(", "diff", "**", "2", ")", "\n", "\n", "", "for", "j", "in", "V_BC", ":", "\n", "\t\t", "diff", "=", "img", "[", "j", ",", ":", "]", "-", "img", "[", "j", "+", "1", ",", ":", "]", "\n", "D_BC", "+=", "np", ".", "sum", "(", "diff", "**", "2", ")", "\n", "\n", "\n", "", "N_HB", "=", "height", "*", "(", "width", "/", "block", "-", "1", ")", "\n", "N_HBC", "=", "height", "*", "(", "width", "-", "1", ")", "-", "N_HB", "\n", "N_VB", "=", "width", "*", "(", "height", "/", "block", "-", "1", ")", "\n", "N_VBC", "=", "width", "*", "(", "height", "-", "1", ")", "-", "N_VB", "\n", "D_B", "=", "D_B", "/", "(", "N_HB", "+", "N_VB", ")", "\n", "D_BC", "=", "D_BC", "/", "(", "N_HBC", "+", "N_VBC", ")", "\n", "eta", "=", "math", ".", "log2", "(", "block", ")", "/", "math", ".", "log2", "(", "min", "(", "height", ",", "width", ")", ")", "if", "D_B", ">", "D_BC", "else", "0", "\n", "return", "eta", "*", "(", "D_B", "-", "D_BC", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.calculate_psnrb": [[689, 712], ["img1.astype.astype", "numpy.mean", "ValueError", "rgb2ycbcr().astype", "utils_image.compute_bef", "img2.astype.astype", "utils_image.compute_bef", "float", "math.log10", "utils_image.rgb2ycbcr", "math.sqrt"], "function", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.compute_bef", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.compute_bef", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.rgb2ycbcr"], ["", "def", "calculate_psnrb", "(", "img1", ",", "img2", ",", "border", "=", "0", ")", ":", "\n", "# img1: ground truth", "\n", "# img2: compressed image", "\n", "# img1 and img2 have range [0, 255]", "\n", "#img1 = img1.squeeze()", "\n", "#img2 = img2.squeeze()", "\n", "    ", "if", "not", "img1", ".", "shape", "==", "img2", ".", "shape", ":", "\n", "        ", "raise", "ValueError", "(", "'Input images must have the same dimensions.'", ")", "\n", "", "h", ",", "w", "=", "img1", ".", "shape", "[", ":", "2", "]", "\n", "img1", "=", "img1", "[", "border", ":", "h", "-", "border", ",", "border", ":", "w", "-", "border", "]", "\n", "img2", "=", "img2", "[", "border", ":", "h", "-", "border", ",", "border", ":", "w", "-", "border", "]", "\n", "img1", "=", "img1", ".", "astype", "(", "np", ".", "float64", ")", "\n", "if", "img2", ".", "shape", "[", "-", "1", "]", "==", "3", ":", "\n", "        ", "img2_y", "=", "rgb2ycbcr", "(", "img2", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "bef", "=", "compute_bef", "(", "img2_y", ")", "\n", "", "else", ":", "\n", "        ", "img2", "=", "img2", ".", "astype", "(", "np", ".", "float64", ")", "\n", "bef", "=", "compute_bef", "(", "img2", ")", "\n", "", "mse", "=", "np", ".", "mean", "(", "(", "img1", "-", "img2", ")", "**", "2", ")", "\n", "mse_b", "=", "mse", "+", "bef", "\n", "if", "mse_b", "==", "0", ":", "\n", "        ", "return", "float", "(", "'inf'", ")", "\n", "", "return", "20", "*", "math", ".", "log10", "(", "255.0", "/", "math", ".", "sqrt", "(", "mse_b", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.calculate_ssim": [[718, 743], ["ValueError", "utils_image.ssim", "ValueError", "range", "numpy.array().mean", "ssims.append", "utils_image.ssim", "utils_image.ssim", "numpy.array", "numpy.squeeze", "numpy.squeeze"], "function", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.loss_ssim.ssim", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.loss_ssim.ssim", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.loss_ssim.ssim"], ["", "def", "calculate_ssim", "(", "img1", ",", "img2", ",", "border", "=", "0", ")", ":", "\n", "    ", "'''calculate SSIM\n    the same outputs as MATLAB's\n    img1, img2: [0, 255]\n    '''", "\n", "#img1 = img1.squeeze()", "\n", "#img2 = img2.squeeze()", "\n", "if", "not", "img1", ".", "shape", "==", "img2", ".", "shape", ":", "\n", "        ", "raise", "ValueError", "(", "'Input images must have the same dimensions.'", ")", "\n", "", "h", ",", "w", "=", "img1", ".", "shape", "[", ":", "2", "]", "\n", "img1", "=", "img1", "[", "border", ":", "h", "-", "border", ",", "border", ":", "w", "-", "border", "]", "\n", "img2", "=", "img2", "[", "border", ":", "h", "-", "border", ",", "border", ":", "w", "-", "border", "]", "\n", "\n", "if", "img1", ".", "ndim", "==", "2", ":", "\n", "        ", "return", "ssim", "(", "img1", ",", "img2", ")", "\n", "", "elif", "img1", ".", "ndim", "==", "3", ":", "\n", "        ", "if", "img1", ".", "shape", "[", "2", "]", "==", "3", ":", "\n", "            ", "ssims", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "                ", "ssims", ".", "append", "(", "ssim", "(", "img1", "[", ":", ",", ":", ",", "i", "]", ",", "img2", "[", ":", ",", ":", ",", "i", "]", ")", ")", "\n", "", "return", "np", ".", "array", "(", "ssims", ")", ".", "mean", "(", ")", "\n", "", "elif", "img1", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "            ", "return", "ssim", "(", "np", ".", "squeeze", "(", "img1", ")", ",", "np", ".", "squeeze", "(", "img2", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Wrong input image dimensions.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.ssim": [[745, 766], ["img1.astype.astype", "img2.astype.astype", "cv2.getGaussianKernel", "numpy.outer", "ssim_map.mean", "cv2.getGaussianKernel.transpose", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D"], "function", ["None"], ["", "", "def", "ssim", "(", "img1", ",", "img2", ")", ":", "\n", "    ", "C1", "=", "(", "0.01", "*", "255", ")", "**", "2", "\n", "C2", "=", "(", "0.03", "*", "255", ")", "**", "2", "\n", "\n", "img1", "=", "img1", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img2", "=", "img2", ".", "astype", "(", "np", ".", "float64", ")", "\n", "kernel", "=", "cv2", ".", "getGaussianKernel", "(", "11", ",", "1.5", ")", "\n", "window", "=", "np", ".", "outer", "(", "kernel", ",", "kernel", ".", "transpose", "(", ")", ")", "\n", "\n", "mu1", "=", "cv2", ".", "filter2D", "(", "img1", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "# valid", "\n", "mu2", "=", "cv2", ".", "filter2D", "(", "img2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "\n", "mu1_sq", "=", "mu1", "**", "2", "\n", "mu2_sq", "=", "mu2", "**", "2", "\n", "mu1_mu2", "=", "mu1", "*", "mu2", "\n", "sigma1_sq", "=", "cv2", ".", "filter2D", "(", "img1", "**", "2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu1_sq", "\n", "sigma2_sq", "=", "cv2", ".", "filter2D", "(", "img2", "**", "2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu2_sq", "\n", "sigma12", "=", "cv2", ".", "filter2D", "(", "img1", "*", "img2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu1_mu2", "\n", "\n", "ssim_map", "=", "(", "(", "2", "*", "mu1_mu2", "+", "C1", ")", "*", "(", "2", "*", "sigma12", "+", "C2", ")", ")", "/", "(", "(", "mu1_sq", "+", "mu2_sq", "+", "C1", ")", "*", "\n", "(", "sigma1_sq", "+", "sigma2_sq", "+", "C2", ")", ")", "\n", "return", "ssim_map", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.cubic": [[776, 782], ["torch.abs"], "function", ["None"], ["def", "cubic", "(", "x", ")", ":", "\n", "    ", "absx", "=", "torch", ".", "abs", "(", "x", ")", "\n", "absx2", "=", "absx", "**", "2", "\n", "absx3", "=", "absx", "**", "3", "\n", "return", "(", "1.5", "*", "absx3", "-", "2.5", "*", "absx2", "+", "1", ")", "*", "(", "(", "absx", "<=", "1", ")", ".", "type_as", "(", "absx", ")", ")", "+", "(", "-", "0.5", "*", "absx3", "+", "2.5", "*", "absx2", "-", "4", "*", "absx", "+", "2", ")", "*", "(", "(", "(", "absx", ">", "1", ")", "*", "(", "absx", "<=", "2", ")", ")", ".", "type_as", "(", "absx", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.calculate_weights_indices": [[784, 837], ["torch.linspace", "torch.floor", "torch.sum().view", "torch.sum", "weights.narrow.contiguous", "indices.narrow.contiguous", "math.ceil", "torch.floor.view().expand", "torch.linspace().view().expand", "u.view().expand", "utils_image.cubic", "torch.sum().view.expand", "math.isclose", "indices.narrow.narrow", "weights.narrow.narrow", "math.isclose", "indices.narrow.narrow", "weights.narrow.narrow", "indices.narrow.max", "int", "int", "utils_image.cubic", "torch.sum", "indices.narrow.min", "torch.floor.view", "torch.linspace().view", "u.view", "torch.linspace"], "function", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.cubic", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.cubic"], ["", "def", "calculate_weights_indices", "(", "in_length", ",", "out_length", ",", "scale", ",", "kernel", ",", "kernel_width", ",", "antialiasing", ")", ":", "\n", "    ", "if", "(", "scale", "<", "1", ")", "and", "(", "antialiasing", ")", ":", "\n", "# Use a modified kernel to simultaneously interpolate and antialias- larger kernel width", "\n", "        ", "kernel_width", "=", "kernel_width", "/", "scale", "\n", "\n", "# Output-space coordinates", "\n", "", "x", "=", "torch", ".", "linspace", "(", "1", ",", "out_length", ",", "out_length", ")", "\n", "\n", "# Input-space coordinates. Calculate the inverse mapping such that 0.5", "\n", "# in output space maps to 0.5 in input space, and 0.5+scale in output", "\n", "# space maps to 1.5 in input space.", "\n", "u", "=", "x", "/", "scale", "+", "0.5", "*", "(", "1", "-", "1", "/", "scale", ")", "\n", "\n", "# What is the left-most pixel that can be involved in the computation?", "\n", "left", "=", "torch", ".", "floor", "(", "u", "-", "kernel_width", "/", "2", ")", "\n", "\n", "# What is the maximum number of pixels that can be involved in the", "\n", "# computation?  Note: it's OK to use an extra pixel here; if the", "\n", "# corresponding weights are all zero, it will be eliminated at the end", "\n", "# of this function.", "\n", "P", "=", "math", ".", "ceil", "(", "kernel_width", ")", "+", "2", "\n", "\n", "# The indices of the input pixels involved in computing the k-th output", "\n", "# pixel are in row k of the indices matrix.", "\n", "indices", "=", "left", ".", "view", "(", "out_length", ",", "1", ")", ".", "expand", "(", "out_length", ",", "P", ")", "+", "torch", ".", "linspace", "(", "0", ",", "P", "-", "1", ",", "P", ")", ".", "view", "(", "\n", "1", ",", "P", ")", ".", "expand", "(", "out_length", ",", "P", ")", "\n", "\n", "# The weights used to compute the k-th output pixel are in row k of the", "\n", "# weights matrix.", "\n", "distance_to_center", "=", "u", ".", "view", "(", "out_length", ",", "1", ")", ".", "expand", "(", "out_length", ",", "P", ")", "-", "indices", "\n", "# apply cubic kernel", "\n", "if", "(", "scale", "<", "1", ")", "and", "(", "antialiasing", ")", ":", "\n", "        ", "weights", "=", "scale", "*", "cubic", "(", "distance_to_center", "*", "scale", ")", "\n", "", "else", ":", "\n", "        ", "weights", "=", "cubic", "(", "distance_to_center", ")", "\n", "# Normalize the weights matrix so that each row sums to 1.", "\n", "", "weights_sum", "=", "torch", ".", "sum", "(", "weights", ",", "1", ")", ".", "view", "(", "out_length", ",", "1", ")", "\n", "weights", "=", "weights", "/", "weights_sum", ".", "expand", "(", "out_length", ",", "P", ")", "\n", "\n", "# If a column in weights is all zero, get rid of it. only consider the first and last column.", "\n", "weights_zero_tmp", "=", "torch", ".", "sum", "(", "(", "weights", "==", "0", ")", ",", "0", ")", "\n", "if", "not", "math", ".", "isclose", "(", "weights_zero_tmp", "[", "0", "]", ",", "0", ",", "rel_tol", "=", "1e-6", ")", ":", "\n", "        ", "indices", "=", "indices", ".", "narrow", "(", "1", ",", "1", ",", "P", "-", "2", ")", "\n", "weights", "=", "weights", ".", "narrow", "(", "1", ",", "1", ",", "P", "-", "2", ")", "\n", "", "if", "not", "math", ".", "isclose", "(", "weights_zero_tmp", "[", "-", "1", "]", ",", "0", ",", "rel_tol", "=", "1e-6", ")", ":", "\n", "        ", "indices", "=", "indices", ".", "narrow", "(", "1", ",", "0", ",", "P", "-", "2", ")", "\n", "weights", "=", "weights", ".", "narrow", "(", "1", ",", "0", ",", "P", "-", "2", ")", "\n", "", "weights", "=", "weights", ".", "contiguous", "(", ")", "\n", "indices", "=", "indices", ".", "contiguous", "(", ")", "\n", "sym_len_s", "=", "-", "indices", ".", "min", "(", ")", "+", "1", "\n", "sym_len_e", "=", "indices", ".", "max", "(", ")", "-", "in_length", "\n", "indices", "=", "indices", "+", "sym_len_s", "-", "1", "\n", "return", "weights", ",", "indices", ",", "int", "(", "sym_len_s", ")", ",", "int", "(", "sym_len_e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.imresize": [[842, 910], ["img.size", "utils_image.calculate_weights_indices", "utils_image.calculate_weights_indices", "torch.FloatTensor", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.FloatTensor", "weights_H.size", "range", "torch.FloatTensor", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.FloatTensor", "weights_W.size", "range", "img.unsqueeze_", "math.ceil", "math.ceil", "int", "range", "int", "range", "torch.FloatTensor.squeeze_", "img.dim", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "img_aug[].transpose().mv", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "out_1_aug[].mv", "sym_patch.size", "sym_patch.size", "img_aug[].transpose", "sym_patch.size", "sym_patch.size"], "function", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.calculate_weights_indices", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.calculate_weights_indices"], ["", "def", "imresize", "(", "img", ",", "scale", ",", "antialiasing", "=", "True", ")", ":", "\n", "# Now the scale should be the same for H and W", "\n", "# input: img: pytorch tensor, CHW or HW [0,1]", "\n", "# output: CHW or HW [0,1] w/o round", "\n", "    ", "need_squeeze", "=", "True", "if", "img", ".", "dim", "(", ")", "==", "2", "else", "False", "\n", "if", "need_squeeze", ":", "\n", "        ", "img", ".", "unsqueeze_", "(", "0", ")", "\n", "", "in_C", ",", "in_H", ",", "in_W", "=", "img", ".", "size", "(", ")", "\n", "out_C", ",", "out_H", ",", "out_W", "=", "in_C", ",", "math", ".", "ceil", "(", "in_H", "*", "scale", ")", ",", "math", ".", "ceil", "(", "in_W", "*", "scale", ")", "\n", "kernel_width", "=", "4", "\n", "kernel", "=", "'cubic'", "\n", "\n", "# Return the desired dimension order for performing the resize.  The", "\n", "# strategy is to perform the resize first along the dimension with the", "\n", "# smallest scale factor.", "\n", "# Now we do not support this.", "\n", "\n", "# get weights and indices", "\n", "weights_H", ",", "indices_H", ",", "sym_len_Hs", ",", "sym_len_He", "=", "calculate_weights_indices", "(", "\n", "in_H", ",", "out_H", ",", "scale", ",", "kernel", ",", "kernel_width", ",", "antialiasing", ")", "\n", "weights_W", ",", "indices_W", ",", "sym_len_Ws", ",", "sym_len_We", "=", "calculate_weights_indices", "(", "\n", "in_W", ",", "out_W", ",", "scale", ",", "kernel", ",", "kernel_width", ",", "antialiasing", ")", "\n", "# process H dimension", "\n", "# symmetric copying", "\n", "img_aug", "=", "torch", ".", "FloatTensor", "(", "in_C", ",", "in_H", "+", "sym_len_Hs", "+", "sym_len_He", ",", "in_W", ")", "\n", "img_aug", ".", "narrow", "(", "1", ",", "sym_len_Hs", ",", "in_H", ")", ".", "copy_", "(", "img", ")", "\n", "\n", "sym_patch", "=", "img", "[", ":", ",", ":", "sym_len_Hs", ",", ":", "]", "\n", "inv_idx", "=", "torch", ".", "arange", "(", "sym_patch", ".", "size", "(", "1", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ".", "long", "(", ")", "\n", "sym_patch_inv", "=", "sym_patch", ".", "index_select", "(", "1", ",", "inv_idx", ")", "\n", "img_aug", ".", "narrow", "(", "1", ",", "0", ",", "sym_len_Hs", ")", ".", "copy_", "(", "sym_patch_inv", ")", "\n", "\n", "sym_patch", "=", "img", "[", ":", ",", "-", "sym_len_He", ":", ",", ":", "]", "\n", "inv_idx", "=", "torch", ".", "arange", "(", "sym_patch", ".", "size", "(", "1", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ".", "long", "(", ")", "\n", "sym_patch_inv", "=", "sym_patch", ".", "index_select", "(", "1", ",", "inv_idx", ")", "\n", "img_aug", ".", "narrow", "(", "1", ",", "sym_len_Hs", "+", "in_H", ",", "sym_len_He", ")", ".", "copy_", "(", "sym_patch_inv", ")", "\n", "\n", "out_1", "=", "torch", ".", "FloatTensor", "(", "in_C", ",", "out_H", ",", "in_W", ")", "\n", "kernel_width", "=", "weights_H", ".", "size", "(", "1", ")", "\n", "for", "i", "in", "range", "(", "out_H", ")", ":", "\n", "        ", "idx", "=", "int", "(", "indices_H", "[", "i", "]", "[", "0", "]", ")", "\n", "for", "j", "in", "range", "(", "out_C", ")", ":", "\n", "            ", "out_1", "[", "j", ",", "i", ",", ":", "]", "=", "img_aug", "[", "j", ",", "idx", ":", "idx", "+", "kernel_width", ",", ":", "]", ".", "transpose", "(", "0", ",", "1", ")", ".", "mv", "(", "weights_H", "[", "i", "]", ")", "\n", "\n", "# process W dimension", "\n", "# symmetric copying", "\n", "", "", "out_1_aug", "=", "torch", ".", "FloatTensor", "(", "in_C", ",", "out_H", ",", "in_W", "+", "sym_len_Ws", "+", "sym_len_We", ")", "\n", "out_1_aug", ".", "narrow", "(", "2", ",", "sym_len_Ws", ",", "in_W", ")", ".", "copy_", "(", "out_1", ")", "\n", "\n", "sym_patch", "=", "out_1", "[", ":", ",", ":", ",", ":", "sym_len_Ws", "]", "\n", "inv_idx", "=", "torch", ".", "arange", "(", "sym_patch", ".", "size", "(", "2", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ".", "long", "(", ")", "\n", "sym_patch_inv", "=", "sym_patch", ".", "index_select", "(", "2", ",", "inv_idx", ")", "\n", "out_1_aug", ".", "narrow", "(", "2", ",", "0", ",", "sym_len_Ws", ")", ".", "copy_", "(", "sym_patch_inv", ")", "\n", "\n", "sym_patch", "=", "out_1", "[", ":", ",", ":", ",", "-", "sym_len_We", ":", "]", "\n", "inv_idx", "=", "torch", ".", "arange", "(", "sym_patch", ".", "size", "(", "2", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ".", "long", "(", ")", "\n", "sym_patch_inv", "=", "sym_patch", ".", "index_select", "(", "2", ",", "inv_idx", ")", "\n", "out_1_aug", ".", "narrow", "(", "2", ",", "sym_len_Ws", "+", "in_W", ",", "sym_len_We", ")", ".", "copy_", "(", "sym_patch_inv", ")", "\n", "\n", "out_2", "=", "torch", ".", "FloatTensor", "(", "in_C", ",", "out_H", ",", "out_W", ")", "\n", "kernel_width", "=", "weights_W", ".", "size", "(", "1", ")", "\n", "for", "i", "in", "range", "(", "out_W", ")", ":", "\n", "        ", "idx", "=", "int", "(", "indices_W", "[", "i", "]", "[", "0", "]", ")", "\n", "for", "j", "in", "range", "(", "out_C", ")", ":", "\n", "            ", "out_2", "[", "j", ",", ":", ",", "i", "]", "=", "out_1_aug", "[", "j", ",", ":", ",", "idx", ":", "idx", "+", "kernel_width", "]", ".", "mv", "(", "weights_W", "[", "i", "]", ")", "\n", "", "", "if", "need_squeeze", ":", "\n", "        ", "out_2", ".", "squeeze_", "(", ")", "\n", "", "return", "out_2", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.imresize_np": [[915, 986], ["torch.from_numpy", "torch.from_numpy.size", "utils_image.calculate_weights_indices", "utils_image.calculate_weights_indices", "torch.FloatTensor", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.FloatTensor", "weights_H.size", "range", "torch.FloatTensor", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.FloatTensor", "weights_W.size", "range", "torch.FloatTensor.numpy", "torch.from_numpy.unsqueeze_", "math.ceil", "math.ceil", "int", "range", "int", "range", "torch.FloatTensor.squeeze_", "torch.from_numpy.dim", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "img_aug[].transpose().mv", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "out_1_aug[].mv", "sym_patch.size", "sym_patch.size", "img_aug[].transpose", "sym_patch.size", "sym_patch.size"], "function", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.calculate_weights_indices", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.calculate_weights_indices"], ["", "def", "imresize_np", "(", "img", ",", "scale", ",", "antialiasing", "=", "True", ")", ":", "\n", "# Now the scale should be the same for H and W", "\n", "# input: img: Numpy, HWC or HW [0,1]", "\n", "# output: HWC or HW [0,1] w/o round", "\n", "    ", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", "\n", "need_squeeze", "=", "True", "if", "img", ".", "dim", "(", ")", "==", "2", "else", "False", "\n", "if", "need_squeeze", ":", "\n", "        ", "img", ".", "unsqueeze_", "(", "2", ")", "\n", "\n", "", "in_H", ",", "in_W", ",", "in_C", "=", "img", ".", "size", "(", ")", "\n", "out_C", ",", "out_H", ",", "out_W", "=", "in_C", ",", "math", ".", "ceil", "(", "in_H", "*", "scale", ")", ",", "math", ".", "ceil", "(", "in_W", "*", "scale", ")", "\n", "kernel_width", "=", "4", "\n", "kernel", "=", "'cubic'", "\n", "\n", "# Return the desired dimension order for performing the resize.  The", "\n", "# strategy is to perform the resize first along the dimension with the", "\n", "# smallest scale factor.", "\n", "# Now we do not support this.", "\n", "\n", "# get weights and indices", "\n", "weights_H", ",", "indices_H", ",", "sym_len_Hs", ",", "sym_len_He", "=", "calculate_weights_indices", "(", "\n", "in_H", ",", "out_H", ",", "scale", ",", "kernel", ",", "kernel_width", ",", "antialiasing", ")", "\n", "weights_W", ",", "indices_W", ",", "sym_len_Ws", ",", "sym_len_We", "=", "calculate_weights_indices", "(", "\n", "in_W", ",", "out_W", ",", "scale", ",", "kernel", ",", "kernel_width", ",", "antialiasing", ")", "\n", "# process H dimension", "\n", "# symmetric copying", "\n", "img_aug", "=", "torch", ".", "FloatTensor", "(", "in_H", "+", "sym_len_Hs", "+", "sym_len_He", ",", "in_W", ",", "in_C", ")", "\n", "img_aug", ".", "narrow", "(", "0", ",", "sym_len_Hs", ",", "in_H", ")", ".", "copy_", "(", "img", ")", "\n", "\n", "sym_patch", "=", "img", "[", ":", "sym_len_Hs", ",", ":", ",", ":", "]", "\n", "inv_idx", "=", "torch", ".", "arange", "(", "sym_patch", ".", "size", "(", "0", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ".", "long", "(", ")", "\n", "sym_patch_inv", "=", "sym_patch", ".", "index_select", "(", "0", ",", "inv_idx", ")", "\n", "img_aug", ".", "narrow", "(", "0", ",", "0", ",", "sym_len_Hs", ")", ".", "copy_", "(", "sym_patch_inv", ")", "\n", "\n", "sym_patch", "=", "img", "[", "-", "sym_len_He", ":", ",", ":", ",", ":", "]", "\n", "inv_idx", "=", "torch", ".", "arange", "(", "sym_patch", ".", "size", "(", "0", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ".", "long", "(", ")", "\n", "sym_patch_inv", "=", "sym_patch", ".", "index_select", "(", "0", ",", "inv_idx", ")", "\n", "img_aug", ".", "narrow", "(", "0", ",", "sym_len_Hs", "+", "in_H", ",", "sym_len_He", ")", ".", "copy_", "(", "sym_patch_inv", ")", "\n", "\n", "out_1", "=", "torch", ".", "FloatTensor", "(", "out_H", ",", "in_W", ",", "in_C", ")", "\n", "kernel_width", "=", "weights_H", ".", "size", "(", "1", ")", "\n", "for", "i", "in", "range", "(", "out_H", ")", ":", "\n", "        ", "idx", "=", "int", "(", "indices_H", "[", "i", "]", "[", "0", "]", ")", "\n", "for", "j", "in", "range", "(", "out_C", ")", ":", "\n", "            ", "out_1", "[", "i", ",", ":", ",", "j", "]", "=", "img_aug", "[", "idx", ":", "idx", "+", "kernel_width", ",", ":", ",", "j", "]", ".", "transpose", "(", "0", ",", "1", ")", ".", "mv", "(", "weights_H", "[", "i", "]", ")", "\n", "\n", "# process W dimension", "\n", "# symmetric copying", "\n", "", "", "out_1_aug", "=", "torch", ".", "FloatTensor", "(", "out_H", ",", "in_W", "+", "sym_len_Ws", "+", "sym_len_We", ",", "in_C", ")", "\n", "out_1_aug", ".", "narrow", "(", "1", ",", "sym_len_Ws", ",", "in_W", ")", ".", "copy_", "(", "out_1", ")", "\n", "\n", "sym_patch", "=", "out_1", "[", ":", ",", ":", "sym_len_Ws", ",", ":", "]", "\n", "inv_idx", "=", "torch", ".", "arange", "(", "sym_patch", ".", "size", "(", "1", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ".", "long", "(", ")", "\n", "sym_patch_inv", "=", "sym_patch", ".", "index_select", "(", "1", ",", "inv_idx", ")", "\n", "out_1_aug", ".", "narrow", "(", "1", ",", "0", ",", "sym_len_Ws", ")", ".", "copy_", "(", "sym_patch_inv", ")", "\n", "\n", "sym_patch", "=", "out_1", "[", ":", ",", "-", "sym_len_We", ":", ",", ":", "]", "\n", "inv_idx", "=", "torch", ".", "arange", "(", "sym_patch", ".", "size", "(", "1", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ".", "long", "(", ")", "\n", "sym_patch_inv", "=", "sym_patch", ".", "index_select", "(", "1", ",", "inv_idx", ")", "\n", "out_1_aug", ".", "narrow", "(", "1", ",", "sym_len_Ws", "+", "in_W", ",", "sym_len_We", ")", ".", "copy_", "(", "sym_patch_inv", ")", "\n", "\n", "out_2", "=", "torch", ".", "FloatTensor", "(", "out_H", ",", "out_W", ",", "in_C", ")", "\n", "kernel_width", "=", "weights_W", ".", "size", "(", "1", ")", "\n", "for", "i", "in", "range", "(", "out_W", ")", ":", "\n", "        ", "idx", "=", "int", "(", "indices_W", "[", "i", "]", "[", "0", "]", ")", "\n", "for", "j", "in", "range", "(", "out_C", ")", ":", "\n", "            ", "out_2", "[", ":", ",", "i", ",", "j", "]", "=", "out_1_aug", "[", ":", ",", "idx", ":", "idx", "+", "kernel_width", ",", "j", "]", ".", "mv", "(", "weights_W", "[", "i", "]", ")", "\n", "", "", "if", "need_squeeze", ":", "\n", "        ", "out_2", ".", "squeeze_", "(", ")", "\n", "\n", "", "return", "out_2", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_logger.logger_print.__init__": [[57, 60], ["open"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "log_path", "=", "\"default.log\"", ")", ":", "\n", "        ", "self", ".", "terminal", "=", "sys", ".", "stdout", "\n", "self", ".", "log", "=", "open", "(", "log_path", ",", "'a'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_logger.logger_print.write": [[61, 64], ["utils_logger.logger_print.terminal.write", "utils_logger.logger_print.log.write"], "methods", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_logger.logger_print.write", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_logger.logger_print.write"], ["", "def", "write", "(", "self", ",", "message", ")", ":", "\n", "        ", "self", ".", "terminal", ".", "write", "(", "message", ")", "\n", "self", ".", "log", ".", "write", "(", "message", ")", "# write the message", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_logger.logger_print.flush": [[65, 67], ["None"], "methods", ["None"], ["", "def", "flush", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_logger.log": [[16, 18], ["print", "datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["None"], ["def", "log", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "print", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y-%m-%d %H:%M:%S:\"", ")", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_logger.logger_info": [[27, 47], ["logging.getLogger", "logging.getLogger.hasHandlers", "print", "print", "logging.Formatter", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.getLogger.setLevel", "logging.getLogger.addHandler", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler"], "function", ["None"], ["def", "logger_info", "(", "logger_name", ",", "log_path", "=", "'default_logger.log'", ")", ":", "\n", "    ", "''' set up logger\n    modified by Kai Zhang (github: https://github.com/cszn)\n    '''", "\n", "log", "=", "logging", ".", "getLogger", "(", "logger_name", ")", "\n", "if", "log", ".", "hasHandlers", "(", ")", ":", "\n", "        ", "print", "(", "'LogHandlers exist!'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'LogHandlers setup!'", ")", "\n", "level", "=", "logging", ".", "INFO", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s.%(msecs)03d : %(message)s'", ",", "datefmt", "=", "'%y-%m-%d %H:%M:%S'", ")", "\n", "fh", "=", "logging", ".", "FileHandler", "(", "log_path", ",", "mode", "=", "'a'", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "log", ".", "setLevel", "(", "level", ")", "\n", "log", ".", "addHandler", "(", "fh", ")", "\n", "# print(len(log.handlers))", "\n", "\n", "sh", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "sh", ".", "setFormatter", "(", "formatter", ")", "\n", "log", ".", "addHandler", "(", "sh", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_model.find_last_checkpoint": [[20, 47], ["glob.glob", "os.path.join", "max", "os.path.join", "re.findall", "iter_exist.append", "int"], "function", ["None"], ["def", "find_last_checkpoint", "(", "save_dir", ",", "net_type", "=", "'G'", ")", ":", "\n", "    ", "\"\"\"\n    # ---------------------------------------\n    # Kai Zhang (github: https://github.com/cszn)\n    # 03/Mar/2019\n    # ---------------------------------------\n    Args:\n        save_dir: model folder\n        net_type: 'G' or 'D'\n\n    Return:\n        init_iter: iteration number\n        init_path: model path\n    # ---------------------------------------\n    \"\"\"", "\n", "file_list", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'*_{}.pth'", ".", "format", "(", "net_type", ")", ")", ")", "\n", "if", "file_list", ":", "\n", "        ", "iter_exist", "=", "[", "]", "\n", "for", "file_", "in", "file_list", ":", "\n", "            ", "iter_current", "=", "re", ".", "findall", "(", "r\"(\\d+)_{}.pth\"", ".", "format", "(", "net_type", ")", ",", "file_", ")", "\n", "iter_exist", ".", "append", "(", "int", "(", "iter_current", "[", "0", "]", ")", ")", "\n", "", "init_iter", "=", "max", "(", "iter_exist", ")", "\n", "init_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'{}_{}.pth'", ".", "format", "(", "init_iter", ",", "net_type", ")", ")", "\n", "", "else", ":", "\n", "        ", "init_iter", "=", "0", "\n", "init_path", "=", "None", "\n", "", "return", "init_iter", ",", "init_path", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_model.test_mode": [[49, 87], ["utils_model.test", "utils_model.test_pad", "utils_model.test_split", "utils_model.test_x8", "utils_model.test_split_x8"], "function", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_fbcnn.ModelFBCNN.test", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_model.test_pad", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_model.test_split", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_model.test_x8", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_model.test_split_x8"], ["", "def", "test_mode", "(", "model", ",", "L", ",", "mode", "=", "0", ",", "refield", "=", "32", ",", "min_size", "=", "256", ",", "sf", "=", "1", ",", "modulo", "=", "1", ")", ":", "\n", "    ", "'''\n    # ---------------------------------------\n    # Kai Zhang (github: https://github.com/cszn)\n    # 03/Mar/2019\n    # ---------------------------------------\n    Args:\n        model: trained model\n        L: input Low-quality image\n        mode:\n            (0) normal: test(model, L)\n            (1) pad: test_pad(model, L, modulo=16)\n            (2) split: test_split(model, L, refield=32, min_size=256, sf=1, modulo=1)\n            (3) x8: test_x8(model, L, modulo=1) ^_^\n            (4) split and x8: test_split_x8(model, L, refield=32, min_size=256, sf=1, modulo=1)\n        refield: effective receptive filed of the network, 32 is enough\n            useful when split, i.e., mode=2, 4\n        min_size: min_sizeXmin_size image, e.g., 256X256 image\n            useful when split, i.e., mode=2, 4\n        sf: scale factor for super-resolution, otherwise 1\n        modulo: 1 if split\n            useful when pad, i.e., mode=1\n\n    Returns:\n        E: estimated image\n    # ---------------------------------------\n    '''", "\n", "if", "mode", "==", "0", ":", "\n", "        ", "E", "=", "test", "(", "model", ",", "L", ")", "\n", "", "elif", "mode", "==", "1", ":", "\n", "        ", "E", "=", "test_pad", "(", "model", ",", "L", ",", "modulo", ",", "sf", ")", "\n", "", "elif", "mode", "==", "2", ":", "\n", "        ", "E", "=", "test_split", "(", "model", ",", "L", ",", "refield", ",", "min_size", ",", "sf", ",", "modulo", ")", "\n", "", "elif", "mode", "==", "3", ":", "\n", "        ", "E", "=", "test_x8", "(", "model", ",", "L", ",", "modulo", ",", "sf", ")", "\n", "", "elif", "mode", "==", "4", ":", "\n", "        ", "E", "=", "test_split_x8", "(", "model", ",", "L", ",", "refield", ",", "min_size", ",", "sf", ",", "modulo", ")", "\n", "", "return", "E", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_model.test": [[96, 99], ["model"], "function", ["None"], ["def", "test", "(", "model", ",", "L", ")", ":", "\n", "    ", "E", "=", "model", "(", "L", ")", "\n", "return", "E", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_model.test_pad": [[108, 116], ["int", "int", "model", "L.size", "torch.nn.ReplicationPad2d", "numpy.ceil", "numpy.ceil"], "function", ["None"], ["def", "test_pad", "(", "model", ",", "L", ",", "modulo", "=", "16", ",", "sf", "=", "1", ")", ":", "\n", "    ", "h", ",", "w", "=", "L", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "paddingBottom", "=", "int", "(", "np", ".", "ceil", "(", "h", "/", "modulo", ")", "*", "modulo", "-", "h", ")", "\n", "paddingRight", "=", "int", "(", "np", ".", "ceil", "(", "w", "/", "modulo", ")", "*", "modulo", "-", "w", ")", "\n", "L", "=", "torch", ".", "nn", ".", "ReplicationPad2d", "(", "(", "0", ",", "paddingRight", ",", "0", ",", "paddingBottom", ")", ")", "(", "L", ")", "\n", "E", ",", "QF", "=", "model", "(", "L", ")", "\n", "E", "=", "E", "[", "...", ",", ":", "h", "*", "sf", ",", ":", "w", "*", "sf", "]", "\n", "return", "E", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_model.test_pad_deblocking": [[117, 157], ["model", "int", "int", "slice", "slice", "slice", "slice", "slice", "slice", "slice", "slice", "utils_model.test_mode", "torch.stack", "torch.stack.mean", "L.size", "numpy.floor", "numpy.floor"], "function", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_model.test_mode"], ["", "def", "test_pad_deblocking", "(", "model", ",", "L", ",", "modulo", "=", "16", ")", ":", "\n", "#    embed()", "\n", "    ", "h", ",", "w", "=", "L", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "E0", "=", "model", "(", "L", ")", "\n", "paddingH", "=", "int", "(", "h", "-", "np", ".", "floor", "(", "h", "/", "modulo", ")", "*", "modulo", ")", "\n", "paddingW", "=", "int", "(", "w", "-", "np", ".", "floor", "(", "w", "/", "modulo", ")", "*", "modulo", ")", "\n", "#    embed()", "\n", "top", "=", "slice", "(", "0", ",", "h", "-", "paddingH", ")", "\n", "top_c", "=", "slice", "(", "h", "-", "paddingH", ",", "h", ")", "\n", "bottom", "=", "slice", "(", "paddingH", ",", "h", ")", "\n", "bottom_c", "=", "slice", "(", "0", ",", "paddingH", ")", "\n", "left", "=", "slice", "(", "0", ",", "w", "-", "paddingW", ")", "\n", "left_c", "=", "slice", "(", "w", "-", "paddingW", ",", "w", ")", "\n", "right", "=", "slice", "(", "paddingW", ",", "w", ")", "\n", "right_c", "=", "slice", "(", "0", ",", "paddingW", ")", "\n", "L1", "=", "L", "[", "...", ",", "top", ",", "left", "]", "\n", "#    L2 = L[...,top,right]", "\n", "#    embed()", "\n", "#    L3 = L[...,bottom,left]", "\n", "#    L4 = L[...,bottom,right]", "\n", "E1", "=", "test_mode", "(", "model", ",", "L1", ",", "mode", "=", "3", ")", "\n", "#    E2 = test_mode(model, L2, mode=3)", "\n", "E0", "[", "...", ",", "top", ",", "left", "]", "=", "E1", "\n", "#    embed()", "\n", "#    E0[...,top,right] = E2", "\n", "#    E0[...,top,left_c] = E2[...,top,-1*paddingW:]", "\n", "#    L1 = torch.nn.ZeroPad2d((0, paddingW, 0, paddingH))(L)", "\n", "#    L1 = torch.nn.ConstantPad2d((0, paddingW, 0, paddingH),0)(L)", "\n", "#    E1 = model(L1)[..., :h, :w]", "\n", "#    L2 = torch.nn.ZeroPad2d((paddingW,0 , 0, paddingH))(L)", "\n", "#    E2 = model(L2)[..., :h, paddingW:]", "\n", "#    L3 = torch.nn.ZeroPad2d((0, paddingW, paddingH, 0))(L)", "\n", "#    E3 = model(L3)[..., paddingH:, :w]", "\n", "#    L4 = torch.nn.ZeroPad2d((paddingW,0 , paddingH,0))(L)", "\n", "#    E4 = model(L4)[..., paddingH:, paddingW:]", "\n", "#    embed()", "\n", "E_list", "=", "[", "E0", "]", "\n", "output_cat", "=", "torch", ".", "stack", "(", "E_list", ",", "dim", "=", "0", ")", "\n", "E", "=", "output_cat", ".", "mean", "(", "dim", "=", "0", ",", "keepdim", "=", "False", ")", "\n", "return", "E", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_model.test_split_fn": [[167, 205], ["L.size", "model", "slice", "slice", "slice", "slice", "torch.zeros().type_as", "torch.nn.ReplicationPad2d", "Es[].size", "model", "utils_model.test_split_fn", "torch.zeros", "int", "int", "range", "range", "numpy.ceil", "numpy.ceil"], "function", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_model.test_split_fn"], ["def", "test_split_fn", "(", "model", ",", "L", ",", "refield", "=", "32", ",", "min_size", "=", "256", ",", "sf", "=", "1", ",", "modulo", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        model: trained model\n        L: input Low-quality image\n        refield: effective receptive filed of the network, 32 is enough\n        min_size: min_sizeXmin_size image, e.g., 256X256 image\n        sf: scale factor for super-resolution, otherwise 1\n        modulo: 1 if split\n\n    Returns:\n        E: estimated result\n    \"\"\"", "\n", "h", ",", "w", "=", "L", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "if", "h", "*", "w", "<=", "min_size", "**", "2", ":", "\n", "        ", "L", "=", "torch", ".", "nn", ".", "ReplicationPad2d", "(", "(", "0", ",", "int", "(", "np", ".", "ceil", "(", "w", "/", "modulo", ")", "*", "modulo", "-", "w", ")", ",", "0", ",", "int", "(", "np", ".", "ceil", "(", "h", "/", "modulo", ")", "*", "modulo", "-", "h", ")", ")", ")", "(", "L", ")", "\n", "E", "=", "model", "(", "L", ")", "\n", "E", "=", "E", "[", "...", ",", ":", "h", "*", "sf", ",", ":", "w", "*", "sf", "]", "\n", "", "else", ":", "\n", "        ", "top", "=", "slice", "(", "0", ",", "(", "h", "//", "2", "//", "refield", "+", "1", ")", "*", "refield", ")", "\n", "bottom", "=", "slice", "(", "h", "-", "(", "h", "//", "2", "//", "refield", "+", "1", ")", "*", "refield", ",", "h", ")", "\n", "left", "=", "slice", "(", "0", ",", "(", "w", "//", "2", "//", "refield", "+", "1", ")", "*", "refield", ")", "\n", "right", "=", "slice", "(", "w", "-", "(", "w", "//", "2", "//", "refield", "+", "1", ")", "*", "refield", ",", "w", ")", "\n", "Ls", "=", "[", "L", "[", "...", ",", "top", ",", "left", "]", ",", "L", "[", "...", ",", "top", ",", "right", "]", ",", "L", "[", "...", ",", "bottom", ",", "left", "]", ",", "L", "[", "...", ",", "bottom", ",", "right", "]", "]", "\n", "\n", "if", "h", "*", "w", "<=", "4", "*", "(", "min_size", "**", "2", ")", ":", "\n", "            ", "Es", "=", "[", "model", "(", "Ls", "[", "i", "]", ")", "for", "i", "in", "range", "(", "4", ")", "]", "\n", "", "else", ":", "\n", "            ", "Es", "=", "[", "test_split_fn", "(", "model", ",", "Ls", "[", "i", "]", ",", "refield", "=", "refield", ",", "min_size", "=", "min_size", ",", "sf", "=", "sf", ",", "modulo", "=", "modulo", ")", "for", "i", "in", "range", "(", "4", ")", "]", "\n", "\n", "", "b", ",", "c", "=", "Es", "[", "0", "]", ".", "size", "(", ")", "[", ":", "2", "]", "\n", "E", "=", "torch", ".", "zeros", "(", "b", ",", "c", ",", "sf", "*", "h", ",", "sf", "*", "w", ")", ".", "type_as", "(", "L", ")", "\n", "\n", "E", "[", "...", ",", ":", "h", "//", "2", "*", "sf", ",", ":", "w", "//", "2", "*", "sf", "]", "=", "Es", "[", "0", "]", "[", "...", ",", ":", "h", "//", "2", "*", "sf", ",", ":", "w", "//", "2", "*", "sf", "]", "\n", "E", "[", "...", ",", ":", "h", "//", "2", "*", "sf", ",", "w", "//", "2", "*", "sf", ":", "w", "*", "sf", "]", "=", "Es", "[", "1", "]", "[", "...", ",", ":", "h", "//", "2", "*", "sf", ",", "(", "-", "w", "+", "w", "//", "2", ")", "*", "sf", ":", "]", "\n", "E", "[", "...", ",", "h", "//", "2", "*", "sf", ":", "h", "*", "sf", ",", ":", "w", "//", "2", "*", "sf", "]", "=", "Es", "[", "2", "]", "[", "...", ",", "(", "-", "h", "+", "h", "//", "2", ")", "*", "sf", ":", ",", ":", "w", "//", "2", "*", "sf", "]", "\n", "E", "[", "...", ",", "h", "//", "2", "*", "sf", ":", "h", "*", "sf", ",", "w", "//", "2", "*", "sf", ":", "w", "*", "sf", "]", "=", "Es", "[", "3", "]", "[", "...", ",", "(", "-", "h", "+", "h", "//", "2", ")", "*", "sf", ":", ",", "(", "-", "w", "+", "w", "//", "2", ")", "*", "sf", ":", "]", "\n", "", "return", "E", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_model.test_split": [[214, 217], ["utils_model.test_split_fn"], "function", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_model.test_split_fn"], ["def", "test_split", "(", "model", ",", "L", ",", "refield", "=", "32", ",", "min_size", "=", "256", ",", "sf", "=", "1", ",", "modulo", "=", "1", ")", ":", "\n", "    ", "E", "=", "test_split_fn", "(", "model", ",", "L", ",", "refield", "=", "refield", ",", "min_size", "=", "min_size", ",", "sf", "=", "sf", ",", "modulo", "=", "modulo", ")", "\n", "return", "E", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_model.test_x8": [[226, 236], ["range", "torch.stack", "torch.stack.mean", "utils_model.test_pad", "len", "utils.utils_image.augment_img_tensor4", "range", "utils.utils_image.augment_img_tensor4", "utils.utils_image.augment_img_tensor4"], "function", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_model.test_pad", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.augment_img_tensor4", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.augment_img_tensor4", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.augment_img_tensor4"], ["def", "test_x8", "(", "model", ",", "L", ",", "modulo", "=", "1", ",", "sf", "=", "1", ")", ":", "\n", "    ", "E_list", "=", "[", "test_pad", "(", "model", ",", "util", ".", "augment_img_tensor4", "(", "L", ",", "mode", "=", "i", ")", ",", "modulo", "=", "modulo", ",", "sf", "=", "sf", ")", "for", "i", "in", "range", "(", "8", ")", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "E_list", ")", ")", ":", "\n", "        ", "if", "i", "==", "3", "or", "i", "==", "5", ":", "\n", "            ", "E_list", "[", "i", "]", "=", "util", ".", "augment_img_tensor4", "(", "E_list", "[", "i", "]", ",", "mode", "=", "8", "-", "i", ")", "\n", "", "else", ":", "\n", "            ", "E_list", "[", "i", "]", "=", "util", ".", "augment_img_tensor4", "(", "E_list", "[", "i", "]", ",", "mode", "=", "i", ")", "\n", "", "", "output_cat", "=", "torch", ".", "stack", "(", "E_list", ",", "dim", "=", "0", ")", "\n", "E", "=", "output_cat", ".", "mean", "(", "dim", "=", "0", ",", "keepdim", "=", "False", ")", "\n", "return", "E", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_model.test_split_x8": [[245, 255], ["enumerate", "torch.stack", "torch.stack.mean", "utils_model.test_split_fn", "range", "utils.utils_image.augment_img_tensor4", "range", "len", "utils.utils_image.augment_img_tensor4", "utils.utils_image.augment_img_tensor4"], "function", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_model.test_split_fn", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.augment_img_tensor4", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.augment_img_tensor4", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.augment_img_tensor4"], ["def", "test_split_x8", "(", "model", ",", "L", ",", "refield", "=", "32", ",", "min_size", "=", "256", ",", "sf", "=", "1", ",", "modulo", "=", "1", ")", ":", "\n", "    ", "E_list", "=", "[", "test_split_fn", "(", "model", ",", "util", ".", "augment_img_tensor4", "(", "L", ",", "mode", "=", "i", ")", ",", "refield", "=", "refield", ",", "min_size", "=", "min_size", ",", "sf", "=", "sf", ",", "modulo", "=", "modulo", ")", "for", "i", "in", "range", "(", "8", ")", "]", "\n", "for", "k", ",", "i", "in", "enumerate", "(", "range", "(", "len", "(", "E_list", ")", ")", ")", ":", "\n", "        ", "if", "i", "==", "3", "or", "i", "==", "5", ":", "\n", "            ", "E_list", "[", "k", "]", "=", "util", ".", "augment_img_tensor4", "(", "E_list", "[", "k", "]", ",", "mode", "=", "8", "-", "i", ")", "\n", "", "else", ":", "\n", "            ", "E_list", "[", "k", "]", "=", "util", ".", "augment_img_tensor4", "(", "E_list", "[", "k", "]", ",", "mode", "=", "i", ")", "\n", "", "", "output_cat", "=", "torch", ".", "stack", "(", "E_list", ",", "dim", "=", "0", ")", "\n", "E", "=", "output_cat", ".", "mean", "(", "dim", "=", "0", ",", "keepdim", "=", "False", ")", "\n", "return", "E", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_model.print_model": [[274, 277], ["utils_model.describe_model", "print"], "function", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_model.describe_model"], ["def", "print_model", "(", "model", ")", ":", "\n", "    ", "msg", "=", "describe_model", "(", "model", ")", "\n", "print", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_model.print_params": [[282, 285], ["utils_model.describe_params", "print"], "function", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_base.ModelBase.describe_params"], ["", "def", "print_params", "(", "model", ")", ":", "\n", "    ", "msg", "=", "describe_params", "(", "model", ")", "\n", "print", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_model.info_model": [[297, 300], ["utils_model.describe_model"], "function", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_model.describe_model"], ["def", "info_model", "(", "model", ")", ":", "\n", "    ", "msg", "=", "describe_model", "(", "model", ")", "\n", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_model.info_params": [[305, 308], ["utils_model.describe_params"], "function", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_base.ModelBase.describe_params"], ["", "def", "info_params", "(", "model", ")", ":", "\n", "    ", "msg", "=", "describe_params", "(", "model", ")", "\n", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_model.describe_model": [[320, 328], ["isinstance", "sum", "str", "map", "model.parameters", "x.numel"], "function", ["None"], ["def", "describe_model", "(", "model", ")", ":", "\n", "    ", "if", "isinstance", "(", "model", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "        ", "model", "=", "model", ".", "module", "\n", "", "msg", "=", "'\\n'", "\n", "msg", "+=", "'models name: {}'", ".", "format", "(", "model", ".", "__class__", ".", "__name__", ")", "+", "'\\n'", "\n", "msg", "+=", "'Params number: {}'", ".", "format", "(", "sum", "(", "map", "(", "lambda", "x", ":", "x", ".", "numel", "(", ")", ",", "model", ".", "parameters", "(", ")", ")", ")", ")", "+", "'\\n'", "\n", "msg", "+=", "'Net structure:\\n{}'", ".", "format", "(", "str", "(", "model", ")", ")", "+", "'\\n'", "\n", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_model.describe_params": [[333, 343], ["isinstance", "model.state_dict().items", "model.state_dict", "param.data.clone().float", "param.data.clone", "param.data.clone().float.mean", "param.data.clone().float.min", "param.data.clone().float.max", "param.data.clone().float.std"], "function", ["None"], ["", "def", "describe_params", "(", "model", ")", ":", "\n", "    ", "if", "isinstance", "(", "model", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "        ", "model", "=", "model", ".", "module", "\n", "", "msg", "=", "'\\n'", "\n", "msg", "+=", "' | {:^6s} | {:^6s} | {:^6s} | {:^6s} || {:<20s}'", ".", "format", "(", "'mean'", ",", "'min'", ",", "'max'", ",", "'std'", ",", "'param_name'", ")", "+", "'\\n'", "\n", "for", "name", ",", "param", "in", "model", ".", "state_dict", "(", ")", ".", "items", "(", ")", ":", "\n", "        ", "if", "not", "'num_batches_tracked'", "in", "name", ":", "\n", "            ", "v", "=", "param", ".", "data", ".", "clone", "(", ")", ".", "float", "(", ")", "\n", "msg", "+=", "' | {:>6.3f} | {:>6.3f} | {:>6.3f} | {:>6.3f} || {:s}'", ".", "format", "(", "v", ".", "mean", "(", ")", ",", "v", ".", "min", "(", ")", ",", "v", ".", "max", "(", ")", ",", "v", ".", "std", "(", ")", ",", "name", ")", "+", "'\\n'", "\n", "", "", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_option.NoneDict.__missing__": [[180, 182], ["None"], "methods", ["None"], ["    ", "def", "__missing__", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_option.get_timestamp": [[19, 21], ["datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["None"], ["def", "get_timestamp", "(", ")", ":", "\n", "    ", "return", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'_%y%m%d_%H%M%S'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_option.parse": [[23, 97], ["json.loads", "opt[].items", "opt[].items", "os.path.join", "os.path.join", "print", "open", "os.path.join", "os.path.join", "os.path.join", "phase.split", "os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "str", "line.split"], "function", ["None"], ["", "def", "parse", "(", "opt_path", ",", "is_train", "=", "True", ")", ":", "\n", "\n", "# ----------------------------------------", "\n", "# remove comments starting with '//'", "\n", "# ----------------------------------------", "\n", "    ", "json_str", "=", "''", "\n", "with", "open", "(", "opt_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "line", "=", "line", ".", "split", "(", "'//'", ")", "[", "0", "]", "+", "'\\n'", "\n", "json_str", "+=", "line", "\n", "\n", "# ----------------------------------------", "\n", "# initialize opt", "\n", "# ----------------------------------------", "\n", "", "", "opt", "=", "json", ".", "loads", "(", "json_str", ",", "object_pairs_hook", "=", "OrderedDict", ")", "\n", "\n", "opt", "[", "'opt_path'", "]", "=", "opt_path", "\n", "opt", "[", "'is_train'", "]", "=", "is_train", "\n", "\n", "# ----------------------------------------", "\n", "# set default", "\n", "# ----------------------------------------", "\n", "if", "'merge_bn'", "not", "in", "opt", ":", "\n", "        ", "opt", "[", "'merge_bn'", "]", "=", "False", "\n", "opt", "[", "'merge_bn_startpoint'", "]", "=", "-", "1", "\n", "\n", "", "if", "'scale'", "not", "in", "opt", ":", "\n", "        ", "opt", "[", "'scale'", "]", "=", "1", "\n", "\n", "# ----------------------------------------", "\n", "# datasets", "\n", "# ----------------------------------------", "\n", "\n", "", "for", "phase", ",", "dataset", "in", "opt", "[", "'datasets'", "]", ".", "items", "(", ")", ":", "\n", "        ", "phase", "=", "phase", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "dataset", "[", "'phase'", "]", "=", "phase", "\n", "dataset", "[", "'scale'", "]", "=", "opt", "[", "'scale'", "]", "# broadcast", "\n", "dataset", "[", "'n_channels'", "]", "=", "opt", "[", "'n_channels'", "]", "# broadcast", "\n", "if", "'dataroot_H'", "in", "dataset", "and", "dataset", "[", "'dataroot_H'", "]", "is", "not", "None", ":", "\n", "            ", "dataset", "[", "'dataroot_H'", "]", "=", "os", ".", "path", ".", "expanduser", "(", "dataset", "[", "'dataroot_H'", "]", ")", "\n", "", "if", "'dataroot_L'", "in", "dataset", "and", "dataset", "[", "'dataroot_L'", "]", "is", "not", "None", ":", "\n", "            ", "dataset", "[", "'dataroot_L'", "]", "=", "os", ".", "path", ".", "expanduser", "(", "dataset", "[", "'dataroot_L'", "]", ")", "\n", "\n", "# ----------------------------------------", "\n", "# path", "\n", "# ----------------------------------------", "\n", "", "", "for", "key", ",", "path", "in", "opt", "[", "'path'", "]", ".", "items", "(", ")", ":", "\n", "        ", "if", "path", "and", "key", "in", "opt", "[", "'path'", "]", ":", "\n", "            ", "opt", "[", "'path'", "]", "[", "key", "]", "=", "os", ".", "path", ".", "expanduser", "(", "path", ")", "\n", "\n", "", "", "path_task", "=", "os", ".", "path", ".", "join", "(", "opt", "[", "'path'", "]", "[", "'root'", "]", ",", "opt", "[", "'task'", "]", ")", "\n", "opt", "[", "'path'", "]", "[", "'task'", "]", "=", "path_task", "\n", "opt", "[", "'path'", "]", "[", "'log'", "]", "=", "path_task", "\n", "opt", "[", "'path'", "]", "[", "'options'", "]", "=", "os", ".", "path", ".", "join", "(", "path_task", ",", "'options'", ")", "\n", "\n", "if", "is_train", ":", "\n", "        ", "opt", "[", "'path'", "]", "[", "'models'", "]", "=", "os", ".", "path", ".", "join", "(", "path_task", ",", "'models'", ")", "\n", "opt", "[", "'path'", "]", "[", "'images'", "]", "=", "os", ".", "path", ".", "join", "(", "path_task", ",", "'images'", ")", "\n", "", "else", ":", "# test", "\n", "        ", "opt", "[", "'path'", "]", "[", "'images'", "]", "=", "os", ".", "path", ".", "join", "(", "path_task", ",", "'test_images'", ")", "\n", "\n", "# ----------------------------------------", "\n", "# network", "\n", "# ----------------------------------------", "\n", "", "opt", "[", "'netG'", "]", "[", "'scale'", "]", "=", "opt", "[", "'scale'", "]", "if", "'scale'", "in", "opt", "else", "1", "\n", "\n", "# ----------------------------------------", "\n", "# GPU devices", "\n", "# ----------------------------------------", "\n", "gpu_list", "=", "','", ".", "join", "(", "str", "(", "x", ")", "for", "x", "in", "opt", "[", "'gpu_ids'", "]", ")", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "gpu_list", "\n", "print", "(", "'export CUDA_VISIBLE_DEVICES='", "+", "gpu_list", ")", "\n", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_option.find_last_checkpoint": [[99, 121], ["glob.glob", "os.path.join", "max", "os.path.join", "re.findall", "iter_exist.append", "int"], "function", ["None"], ["", "def", "find_last_checkpoint", "(", "save_dir", ",", "net_type", "=", "'G'", ")", ":", "\n", "    ", "\"\"\"\n    Args: \n        save_dir: model folder\n        net_type: 'G' or 'D'\n\n    Return:\n        init_iter: iteration number\n        init_path: model path\n    \"\"\"", "\n", "file_list", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'*_{}.pth'", ".", "format", "(", "net_type", ")", ")", ")", "\n", "if", "file_list", ":", "\n", "        ", "iter_exist", "=", "[", "]", "\n", "for", "file_", "in", "file_list", ":", "\n", "            ", "iter_current", "=", "re", ".", "findall", "(", "r\"(\\d+)_{}.pth\"", ".", "format", "(", "net_type", ")", ",", "file_", ")", "\n", "iter_exist", ".", "append", "(", "int", "(", "iter_current", "[", "0", "]", ")", ")", "\n", "", "init_iter", "=", "max", "(", "iter_exist", ")", "\n", "init_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'{}_{}.pth'", ".", "format", "(", "init_iter", ",", "net_type", ")", ")", "\n", "", "else", ":", "\n", "        ", "init_iter", "=", "0", "\n", "init_path", "=", "None", "\n", "", "return", "init_iter", ",", "init_path", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_option.save": [[130, 138], ["os.path.split", "os.path.splitext", "os.path.join", "open", "json.dump", "utils_option.get_timestamp"], "function", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_option.get_timestamp"], ["def", "save", "(", "opt", ")", ":", "\n", "    ", "opt_path", "=", "opt", "[", "'opt_path'", "]", "\n", "opt_path_copy", "=", "opt", "[", "'path'", "]", "[", "'options'", "]", "\n", "dirname", ",", "filename_ext", "=", "os", ".", "path", ".", "split", "(", "opt_path", ")", "\n", "filename", ",", "ext", "=", "os", ".", "path", ".", "splitext", "(", "filename_ext", ")", "\n", "dump_path", "=", "os", ".", "path", ".", "join", "(", "opt_path_copy", ",", "filename", "+", "get_timestamp", "(", ")", "+", "ext", ")", "\n", "with", "open", "(", "dump_path", ",", "'w'", ")", "as", "dump_file", ":", "\n", "        ", "json", ".", "dump", "(", "opt", ",", "dump_file", ",", "indent", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_option.dict2str": [[147, 157], ["opt.items", "isinstance", "utils_option.dict2str", "str"], "function", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_option.dict2str"], ["def", "dict2str", "(", "opt", ",", "indent_l", "=", "1", ")", ":", "\n", "    ", "msg", "=", "''", "\n", "for", "k", ",", "v", "in", "opt", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "            ", "msg", "+=", "' '", "*", "(", "indent_l", "*", "2", ")", "+", "k", "+", "':[\\n'", "\n", "msg", "+=", "dict2str", "(", "v", ",", "indent_l", "+", "1", ")", "\n", "msg", "+=", "' '", "*", "(", "indent_l", "*", "2", ")", "+", "']\\n'", "\n", "", "else", ":", "\n", "            ", "msg", "+=", "' '", "*", "(", "indent_l", "*", "2", ")", "+", "k", "+", "': '", "+", "str", "(", "v", ")", "+", "'\\n'", "\n", "", "", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_option.dict_to_nonedict": [[167, 177], ["isinstance", "dict", "opt.items", "utils_option.NoneDict", "isinstance", "utils_option.dict_to_nonedict", "utils_option.dict_to_nonedict"], "function", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_option.dict_to_nonedict", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_option.dict_to_nonedict"], ["def", "dict_to_nonedict", "(", "opt", ")", ":", "\n", "    ", "if", "isinstance", "(", "opt", ",", "dict", ")", ":", "\n", "        ", "new_opt", "=", "dict", "(", ")", "\n", "for", "key", ",", "sub_opt", "in", "opt", ".", "items", "(", ")", ":", "\n", "            ", "new_opt", "[", "key", "]", "=", "dict_to_nonedict", "(", "sub_opt", ")", "\n", "", "return", "NoneDict", "(", "**", "new_opt", ")", "\n", "", "elif", "isinstance", "(", "opt", ",", "list", ")", ":", "\n", "        ", "return", "[", "dict_to_nonedict", "(", "sub_opt", ")", "for", "sub_opt", "in", "opt", "]", "\n", "", "else", ":", "\n", "        ", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.select_model.define_Model": [[9, 25], ["M", "print", "NotImplementedError"], "function", ["None"], ["def", "define_Model", "(", "opt", ")", ":", "\n", "    ", "model", "=", "opt", "[", "'model'", "]", "# one input: L", "\n", "\n", "if", "model", "==", "'fbcnn'", ":", "\n", "        ", "from", "models", ".", "model_fbcnn", "import", "ModelFBCNN", "as", "M", "\n", "\n", "", "elif", "model", "==", "'gan'", ":", "# one input: L", "\n", "        ", "from", "models", ".", "model_gan", "import", "ModelGAN", "as", "M", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Model [{:s}] is not defined.'", ".", "format", "(", "model", ")", ")", "\n", "\n", "", "m", "=", "M", "(", "opt", ")", "\n", "\n", "print", "(", "'Training model [{:s}] is created.'", ".", "format", "(", "m", ".", "__class__", ".", "__name__", ")", ")", "\n", "return", "m", "\n", "", ""]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.loss_ssim.SSIMLoss.__init__": [[50, 56], ["super().__init__", "loss_ssim.create_window"], "methods", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.data.dataset_jpeggray.DatasetJPEG.__init__", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.loss_ssim.create_window"], ["    ", "def", "__init__", "(", "self", ",", "window_size", "=", "11", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "SSIMLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "window_size", "=", "window_size", "\n", "self", ".", "size_average", "=", "size_average", "\n", "self", ".", "channel", "=", "1", "\n", "self", ".", "window", "=", "create_window", "(", "window_size", ",", "self", ".", "channel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.loss_ssim.SSIMLoss.forward": [[57, 72], ["img1.size", "loss_ssim._ssim", "loss_ssim.create_window", "window.cuda.cuda.type_as", "loss_ssim.SSIMLoss.window.data.type", "img1.data.type", "window.cuda.cuda.cuda", "img1.get_device"], "methods", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.loss_ssim._ssim", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.loss_ssim.create_window"], ["", "def", "forward", "(", "self", ",", "img1", ",", "img2", ")", ":", "\n", "        ", "(", "_", ",", "channel", ",", "_", ",", "_", ")", "=", "img1", ".", "size", "(", ")", "\n", "if", "channel", "==", "self", ".", "channel", "and", "self", ".", "window", ".", "data", ".", "type", "(", ")", "==", "img1", ".", "data", ".", "type", "(", ")", ":", "\n", "            ", "window", "=", "self", ".", "window", "\n", "", "else", ":", "\n", "            ", "window", "=", "create_window", "(", "self", ".", "window_size", ",", "channel", ")", "\n", "\n", "if", "img1", ".", "is_cuda", ":", "\n", "                ", "window", "=", "window", ".", "cuda", "(", "img1", ".", "get_device", "(", ")", ")", "\n", "", "window", "=", "window", ".", "type_as", "(", "img1", ")", "\n", "\n", "self", ".", "window", "=", "window", "\n", "self", ".", "channel", "=", "channel", "\n", "\n", "", "return", "_ssim", "(", "img1", ",", "img2", ",", "window", ",", "self", ".", "window_size", ",", "channel", ",", "self", ".", "size_average", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.loss_ssim.gaussian": [[15, 18], ["torch.Tensor", "torch.Tensor", "torch.Tensor.sum", "math.exp", "range", "float"], "function", ["None"], ["def", "gaussian", "(", "window_size", ",", "sigma", ")", ":", "\n", "    ", "gauss", "=", "torch", ".", "Tensor", "(", "[", "exp", "(", "-", "(", "x", "-", "window_size", "//", "2", ")", "**", "2", "/", "float", "(", "2", "*", "sigma", "**", "2", ")", ")", "for", "x", "in", "range", "(", "window_size", ")", "]", ")", "\n", "return", "gauss", "/", "gauss", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.loss_ssim.create_window": [[20, 25], ["gaussian().unsqueeze", "gaussian().unsqueeze.mm().float().unsqueeze().unsqueeze", "torch.autograd.Variable", "_1D_window.mm().float().unsqueeze().unsqueeze.expand().contiguous", "loss_ssim.gaussian", "gaussian().unsqueeze.mm().float().unsqueeze", "_1D_window.mm().float().unsqueeze().unsqueeze.expand", "gaussian().unsqueeze.mm().float", "gaussian().unsqueeze.mm", "gaussian().unsqueeze.t"], "function", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.loss_ssim.gaussian"], ["", "def", "create_window", "(", "window_size", ",", "channel", ")", ":", "\n", "    ", "_1D_window", "=", "gaussian", "(", "window_size", ",", "1.5", ")", ".", "unsqueeze", "(", "1", ")", "\n", "_2D_window", "=", "_1D_window", ".", "mm", "(", "_1D_window", ".", "t", "(", ")", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "window", "=", "Variable", "(", "_2D_window", ".", "expand", "(", "channel", ",", "1", ",", "window_size", ",", "window_size", ")", ".", "contiguous", "(", ")", ")", "\n", "return", "window", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.loss_ssim._ssim": [[27, 47], ["torch.conv2d", "torch.conv2d", "F.conv2d.pow", "F.conv2d.pow", "torch.conv2d", "torch.conv2d", "torch.conv2d", "ssim_map.mean", "ssim_map.mean().mean().mean", "ssim_map.mean().mean", "ssim_map.mean"], "function", ["None"], ["", "def", "_ssim", "(", "img1", ",", "img2", ",", "window", ",", "window_size", ",", "channel", ",", "size_average", "=", "True", ")", ":", "\n", "    ", "mu1", "=", "F", ".", "conv2d", "(", "img1", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "\n", "mu2", "=", "F", ".", "conv2d", "(", "img2", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "\n", "\n", "mu1_sq", "=", "mu1", ".", "pow", "(", "2", ")", "\n", "mu2_sq", "=", "mu2", ".", "pow", "(", "2", ")", "\n", "mu1_mu2", "=", "mu1", "*", "mu2", "\n", "\n", "sigma1_sq", "=", "F", ".", "conv2d", "(", "img1", "*", "img1", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "-", "mu1_sq", "\n", "sigma2_sq", "=", "F", ".", "conv2d", "(", "img2", "*", "img2", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "-", "mu2_sq", "\n", "sigma12", "=", "F", ".", "conv2d", "(", "img1", "*", "img2", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "-", "mu1_mu2", "\n", "\n", "C1", "=", "0.01", "**", "2", "\n", "C2", "=", "0.03", "**", "2", "\n", "\n", "ssim_map", "=", "(", "(", "2", "*", "mu1_mu2", "+", "C1", ")", "*", "(", "2", "*", "sigma12", "+", "C2", ")", ")", "/", "(", "(", "mu1_sq", "+", "mu2_sq", "+", "C1", ")", "*", "(", "sigma1_sq", "+", "sigma2_sq", "+", "C2", ")", ")", "\n", "if", "size_average", ":", "\n", "        ", "return", "ssim_map", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "ssim_map", ".", "mean", "(", "1", ")", ".", "mean", "(", "1", ")", ".", "mean", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.loss_ssim.ssim": [[74, 83], ["img1.size", "loss_ssim.create_window", "window.cuda.type_as", "loss_ssim._ssim", "window.cuda.cuda", "img1.get_device"], "function", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.loss_ssim.create_window", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.loss_ssim._ssim"], ["", "", "def", "ssim", "(", "img1", ",", "img2", ",", "window_size", "=", "11", ",", "size_average", "=", "True", ")", ":", "\n", "    ", "(", "_", ",", "channel", ",", "_", ",", "_", ")", "=", "img1", ".", "size", "(", ")", "\n", "window", "=", "create_window", "(", "window_size", ",", "channel", ")", "\n", "\n", "if", "img1", ".", "is_cuda", ":", "\n", "        ", "window", "=", "window", ".", "cuda", "(", "img1", ".", "get_device", "(", ")", ")", "\n", "", "window", "=", "window", ".", "type_as", "(", "img1", ")", "\n", "\n", "return", "_ssim", "(", "img1", ",", "img2", ",", "window", ",", "window_size", ",", "channel", ",", "size_average", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.select_network.define_G": [[15, 51], ["net", "NotImplementedError", "select_network.init_weights"], "function", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.select_network.init_weights"], ["def", "define_G", "(", "opt", ")", ":", "\n", "    ", "opt_net", "=", "opt", "[", "'netG'", "]", "\n", "net_type", "=", "opt_net", "[", "'net_type'", "]", "\n", "# ----------------------------------------", "\n", "# jpeg artifacts removal task", "\n", "# ----------------------------------------", "\n", "\n", "# ----------------------------------------", "\n", "# ResUnet", "\n", "# ----------------------------------------", "\n", "if", "net_type", "==", "'fbcnn'", ":", "\n", "        ", "from", "models", ".", "network_fbcnn", "import", "FBCNN", "as", "net", "\n", "netG", "=", "net", "(", "in_nc", "=", "opt_net", "[", "'in_nc'", "]", ",", "\n", "out_nc", "=", "opt_net", "[", "'out_nc'", "]", ",", "\n", "nc", "=", "opt_net", "[", "'nc'", "]", ",", "\n", "nb", "=", "opt_net", "[", "'nb'", "]", ",", "# total number of conv layers", "\n", "act_mode", "=", "opt_net", "[", "'act_mode'", "]", ")", "\n", "\n", "# ----------------------------------------", "\n", "# others", "\n", "# ----------------------------------------", "\n", "# TODO", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'netG [{:s}] is not found.'", ".", "format", "(", "net_type", ")", ")", "\n", "\n", "# ----------------------------------------", "\n", "# initialize weights", "\n", "# ----------------------------------------", "\n", "", "if", "opt", "[", "'is_train'", "]", ":", "\n", "        ", "init_weights", "(", "netG", ",", "\n", "init_type", "=", "opt_net", "[", "'init_type'", "]", ",", "\n", "init_bn_type", "=", "opt_net", "[", "'init_bn_type'", "]", ",", "\n", "gain", "=", "opt_net", "[", "'init_gain'", "]", ")", "\n", "\n", "", "return", "netG", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.select_network.define_D": [[56, 106], ["select_network.init_weights", "discriminator", "discriminator", "discriminator", "discriminator", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.select_network.init_weights"], ["", "def", "define_D", "(", "opt", ")", ":", "\n", "    ", "opt_net", "=", "opt", "[", "'netD'", "]", "\n", "net_type", "=", "opt_net", "[", "'net_type'", "]", "\n", "\n", "# ----------------------------------------", "\n", "# discriminator_vgg_96", "\n", "# ----------------------------------------", "\n", "if", "net_type", "==", "'discriminator_vgg_96'", ":", "\n", "        ", "from", "models", ".", "network_discriminator", "import", "Discriminator_VGG_96", "as", "discriminator", "\n", "netD", "=", "discriminator", "(", "in_nc", "=", "opt_net", "[", "'in_nc'", "]", ",", "\n", "base_nc", "=", "opt_net", "[", "'base_nc'", "]", ",", "\n", "ac_type", "=", "opt_net", "[", "'act_mode'", "]", ")", "\n", "\n", "# ----------------------------------------", "\n", "# discriminator_vgg_128", "\n", "# ----------------------------------------", "\n", "", "elif", "net_type", "==", "'discriminator_vgg_128'", ":", "\n", "        ", "from", "models", ".", "network_discriminator", "import", "Discriminator_VGG_128", "as", "discriminator", "\n", "netD", "=", "discriminator", "(", "in_nc", "=", "opt_net", "[", "'in_nc'", "]", ",", "\n", "base_nc", "=", "opt_net", "[", "'base_nc'", "]", ",", "\n", "ac_type", "=", "opt_net", "[", "'act_mode'", "]", ")", "\n", "\n", "# ----------------------------------------", "\n", "# discriminator_vgg_192", "\n", "# ----------------------------------------", "\n", "", "elif", "net_type", "==", "'discriminator_vgg_192'", ":", "\n", "        ", "from", "models", ".", "network_discriminator", "import", "Discriminator_VGG_192", "as", "discriminator", "\n", "netD", "=", "discriminator", "(", "in_nc", "=", "opt_net", "[", "'in_nc'", "]", ",", "\n", "base_nc", "=", "opt_net", "[", "'base_nc'", "]", ",", "\n", "ac_type", "=", "opt_net", "[", "'act_mode'", "]", ")", "\n", "\n", "# ----------------------------------------", "\n", "# discriminator_vgg_128_SN", "\n", "# ----------------------------------------", "\n", "", "elif", "net_type", "==", "'discriminator_vgg_128_SN'", ":", "\n", "        ", "from", "models", ".", "network_discriminator", "import", "Discriminator_VGG_128_SN", "as", "discriminator", "\n", "netD", "=", "discriminator", "(", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'netD [{:s}] is not found.'", ".", "format", "(", "net_type", ")", ")", "\n", "\n", "# ----------------------------------------", "\n", "# initialize weights", "\n", "# ----------------------------------------", "\n", "", "init_weights", "(", "netD", ",", "\n", "init_type", "=", "opt_net", "[", "'init_type'", "]", ",", "\n", "init_bn_type", "=", "opt_net", "[", "'init_bn_type'", "]", ",", "\n", "gain", "=", "opt_net", "[", "'init_gain'", "]", ")", "\n", "\n", "return", "netD", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.select_network.define_F": [[111, 125], ["torch.device", "VGGFeatureExtractor", "VGGFeatureExtractor.eval"], "function", ["None"], ["", "def", "define_F", "(", "opt", ",", "use_bn", "=", "False", ")", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "opt", "[", "'gpu_ids'", "]", "else", "'cpu'", ")", "\n", "from", "models", ".", "network_feature", "import", "VGGFeatureExtractor", "\n", "# pytorch pretrained VGG19-54, before ReLU.", "\n", "if", "use_bn", ":", "\n", "        ", "feature_layer", "=", "49", "\n", "", "else", ":", "\n", "        ", "feature_layer", "=", "34", "\n", "", "netF", "=", "VGGFeatureExtractor", "(", "feature_layer", "=", "feature_layer", ",", "\n", "use_bn", "=", "use_bn", ",", "\n", "use_input_norm", "=", "True", ",", "\n", "device", "=", "device", ")", "\n", "netF", ".", "eval", "(", ")", "# No need to train, but need BP to input", "\n", "return", "netF", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.select_network.init_weights": [[134, 201], ["print", "functools.partial", "net.apply", "classname.find", "classname.find", "torch.nn.init.normal_", "m.weight.data.clamp_().mul_", "m.bias.data.zero_", "classname.find", "torch.nn.init.uniform_", "m.weight.data.mul_", "m.weight.data.clamp_", "torch.nn.init.xavier_normal_", "m.weight.data.clamp_", "torch.nn.init.uniform_", "torch.nn.init.constant_", "NotImplementedError", "torch.nn.init.xavier_uniform_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.kaiming_normal_", "m.weight.data.clamp_().mul_", "torch.nn.init.kaiming_uniform_", "m.weight.data.mul_", "m.weight.data.clamp_", "torch.nn.init.orthogonal_", "NotImplementedError"], "function", ["None"], ["def", "init_weights", "(", "net", ",", "init_type", "=", "'xavier_uniform'", ",", "init_bn_type", "=", "'uniform'", ",", "gain", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    # Kai Zhang, https://github.com/cszn/KAIR\n    #\n    # Args:\n    #   init_type:\n    #       normal; normal; xavier_normal; xavier_uniform;\n    #       kaiming_normal; kaiming_uniform; orthogonal\n    #   init_bn_type:\n    #       uniform; constant\n    #   gain:\n    #       0.2\n    \"\"\"", "\n", "print", "(", "'Initialization method [{:s} + {:s}], gain is [{:.2f}]'", ".", "format", "(", "init_type", ",", "init_bn_type", ",", "gain", ")", ")", "\n", "\n", "def", "init_fn", "(", "m", ",", "init_type", "=", "'xavier_uniform'", ",", "init_bn_type", "=", "'uniform'", ",", "gain", "=", "1", ")", ":", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "\n", "            ", "if", "init_type", "==", "'normal'", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0", ",", "0.1", ")", "\n", "m", ".", "weight", ".", "data", ".", "clamp_", "(", "-", "1", ",", "1", ")", ".", "mul_", "(", "gain", ")", "\n", "\n", "", "elif", "init_type", "==", "'uniform'", ":", "\n", "                ", "init", ".", "uniform_", "(", "m", ".", "weight", ".", "data", ",", "-", "0.2", ",", "0.2", ")", "\n", "m", ".", "weight", ".", "data", ".", "mul_", "(", "gain", ")", "\n", "\n", "", "elif", "init_type", "==", "'xavier_normal'", ":", "\n", "                ", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "m", ".", "weight", ".", "data", ".", "clamp_", "(", "-", "1", ",", "1", ")", "\n", "\n", "", "elif", "init_type", "==", "'xavier_uniform'", ":", "\n", "                ", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "\n", "", "elif", "init_type", "==", "'kaiming_normal'", ":", "\n", "                ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "m", ".", "weight", ".", "data", ".", "clamp_", "(", "-", "1", ",", "1", ")", ".", "mul_", "(", "gain", ")", "\n", "\n", "", "elif", "init_type", "==", "'kaiming_uniform'", ":", "\n", "                ", "init", ".", "kaiming_uniform_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "m", ".", "weight", ".", "data", ".", "mul_", "(", "gain", ")", "\n", "\n", "", "elif", "init_type", "==", "'orthogonal'", ":", "\n", "                ", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'Initialization method [{:s}] is not implemented'", ".", "format", "(", "init_type", ")", ")", "\n", "\n", "", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "\n", "            ", "if", "init_bn_type", "==", "'uniform'", ":", "# preferred", "\n", "                ", "if", "m", ".", "affine", ":", "\n", "                    ", "init", ".", "uniform_", "(", "m", ".", "weight", ".", "data", ",", "0.1", ",", "1.0", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "", "", "elif", "init_bn_type", "==", "'constant'", ":", "\n", "                ", "if", "m", ".", "affine", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'Initialization method [{:s}] is not implemented'", ".", "format", "(", "init_bn_type", ")", ")", "\n", "\n", "", "", "", "fn", "=", "functools", ".", "partial", "(", "init_fn", ",", "init_type", "=", "init_type", ",", "init_bn_type", "=", "init_bn_type", ",", "gain", "=", "gain", ")", "\n", "net", ".", "apply", "(", "fn", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.network_fbcnn.ResBlock.__init__": [[84, 92], ["torch.Module.__init__", "network_fbcnn.conv", "mode[].lower"], "methods", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.data.dataset_jpeggray.DatasetJPEG.__init__", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.network_fbcnn.conv"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", "=", "64", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ",", "mode", "=", "'CRC'", ",", "negative_slope", "=", "0.2", ")", ":", "\n", "        ", "super", "(", "ResBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "in_channels", "==", "out_channels", ",", "'Only support in_channels==out_channels.'", "\n", "if", "mode", "[", "0", "]", "in", "[", "'R'", ",", "'L'", "]", ":", "\n", "            ", "mode", "=", "mode", "[", "0", "]", ".", "lower", "(", ")", "+", "mode", "[", "1", ":", "]", "\n", "\n", "", "self", ".", "res", "=", "conv", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", ",", "mode", ",", "negative_slope", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.network_fbcnn.ResBlock.forward": [[93, 96], ["network_fbcnn.ResBlock.res"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "res", "=", "self", ".", "res", "(", "x", ")", "\n", "return", "x", "+", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.network_fbcnn.QFAttention.__init__": [[186, 194], ["torch.Module.__init__", "network_fbcnn.conv", "mode[].lower"], "methods", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.data.dataset_jpeggray.DatasetJPEG.__init__", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.network_fbcnn.conv"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", "=", "64", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ",", "mode", "=", "'CRC'", ",", "negative_slope", "=", "0.2", ")", ":", "\n", "        ", "super", "(", "QFAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "in_channels", "==", "out_channels", ",", "'Only support in_channels==out_channels.'", "\n", "if", "mode", "[", "0", "]", "in", "[", "'R'", ",", "'L'", "]", ":", "\n", "            ", "mode", "=", "mode", "[", "0", "]", ".", "lower", "(", ")", "+", "mode", "[", "1", ":", "]", "\n", "\n", "", "self", ".", "res", "=", "conv", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", ",", "mode", ",", "negative_slope", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.network_fbcnn.QFAttention.forward": [[195, 200], ["gamma.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze().unsqueeze", "beta.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze().unsqueeze", "gamma.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze", "beta.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze", "network_fbcnn.QFAttention.res"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "gamma", ",", "beta", ")", ":", "\n", "        ", "gamma", "=", "gamma", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "beta", "=", "beta", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "res", "=", "(", "gamma", ")", "*", "self", ".", "res", "(", "x", ")", "+", "beta", "\n", "return", "x", "+", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.network_fbcnn.FBCNN.__init__": [[203, 284], ["torch.Module.__init__", "network_fbcnn.conv", "network_fbcnn.sequential", "network_fbcnn.sequential", "network_fbcnn.sequential", "network_fbcnn.sequential", "network_fbcnn.sequential", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "network_fbcnn.conv", "network_fbcnn.sequential", "network_fbcnn.sequential", "network_fbcnn.sequential", "network_fbcnn.sequential", "network_fbcnn.sequential", "network_fbcnn.sequential", "network_fbcnn.sequential", "network_fbcnn.sequential", "downsample_block", "downsample_block", "downsample_block", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Flatten", "torch.nn.Flatten", "torch.nn.Flatten", "torch.nn.Flatten", "torch.nn.Flatten", "torch.nn.Flatten", "torch.nn.Flatten", "torch.nn.Flatten", "torch.nn.Flatten", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "upsample_block", "upsample_block", "upsample_block", "NotImplementedError", "network_fbcnn.ResBlock", "network_fbcnn.ResBlock", "network_fbcnn.ResBlock", "network_fbcnn.ResBlock", "network_fbcnn.ResBlock", "NotImplementedError", "network_fbcnn.ResBlock", "range", "range", "range", "range", "range", "network_fbcnn.QFAttention", "network_fbcnn.QFAttention", "network_fbcnn.QFAttention", "range", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.data.dataset_jpeggray.DatasetJPEG.__init__", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.network_fbcnn.conv", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.network_fbcnn.sequential", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.network_fbcnn.sequential", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.network_fbcnn.sequential", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.network_fbcnn.sequential", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.network_fbcnn.sequential", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.network_fbcnn.conv", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.network_fbcnn.sequential", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.network_fbcnn.sequential", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.network_fbcnn.sequential", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.network_fbcnn.sequential", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.network_fbcnn.sequential", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.network_fbcnn.sequential", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.network_fbcnn.sequential", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.network_fbcnn.sequential"], ["    ", "def", "__init__", "(", "self", ",", "in_nc", "=", "3", ",", "out_nc", "=", "3", ",", "nc", "=", "[", "64", ",", "128", ",", "256", ",", "512", "]", ",", "nb", "=", "4", ",", "act_mode", "=", "'R'", ",", "downsample_mode", "=", "'strideconv'", ",", "\n", "upsample_mode", "=", "'convtranspose'", ")", ":", "\n", "        ", "super", "(", "FBCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "m_head", "=", "conv", "(", "in_nc", ",", "nc", "[", "0", "]", ",", "bias", "=", "True", ",", "mode", "=", "'C'", ")", "\n", "self", ".", "nb", "=", "nb", "\n", "self", ".", "nc", "=", "nc", "\n", "# downsample", "\n", "if", "downsample_mode", "==", "'avgpool'", ":", "\n", "            ", "downsample_block", "=", "downsample_avgpool", "\n", "", "elif", "downsample_mode", "==", "'maxpool'", ":", "\n", "            ", "downsample_block", "=", "downsample_maxpool", "\n", "", "elif", "downsample_mode", "==", "'strideconv'", ":", "\n", "            ", "downsample_block", "=", "downsample_strideconv", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'downsample mode [{:s}] is not found'", ".", "format", "(", "downsample_mode", ")", ")", "\n", "\n", "", "self", ".", "m_down1", "=", "sequential", "(", "\n", "*", "[", "ResBlock", "(", "nc", "[", "0", "]", ",", "nc", "[", "0", "]", ",", "bias", "=", "True", ",", "mode", "=", "'C'", "+", "act_mode", "+", "'C'", ")", "for", "_", "in", "range", "(", "nb", ")", "]", ",", "\n", "downsample_block", "(", "nc", "[", "0", "]", ",", "nc", "[", "1", "]", ",", "bias", "=", "True", ",", "mode", "=", "'2'", ")", ")", "\n", "self", ".", "m_down2", "=", "sequential", "(", "\n", "*", "[", "ResBlock", "(", "nc", "[", "1", "]", ",", "nc", "[", "1", "]", ",", "bias", "=", "True", ",", "mode", "=", "'C'", "+", "act_mode", "+", "'C'", ")", "for", "_", "in", "range", "(", "nb", ")", "]", ",", "\n", "downsample_block", "(", "nc", "[", "1", "]", ",", "nc", "[", "2", "]", ",", "bias", "=", "True", ",", "mode", "=", "'2'", ")", ")", "\n", "self", ".", "m_down3", "=", "sequential", "(", "\n", "*", "[", "ResBlock", "(", "nc", "[", "2", "]", ",", "nc", "[", "2", "]", ",", "bias", "=", "True", ",", "mode", "=", "'C'", "+", "act_mode", "+", "'C'", ")", "for", "_", "in", "range", "(", "nb", ")", "]", ",", "\n", "downsample_block", "(", "nc", "[", "2", "]", ",", "nc", "[", "3", "]", ",", "bias", "=", "True", ",", "mode", "=", "'2'", ")", ")", "\n", "\n", "self", ".", "m_body_encoder", "=", "sequential", "(", "\n", "*", "[", "ResBlock", "(", "nc", "[", "3", "]", ",", "nc", "[", "3", "]", ",", "bias", "=", "True", ",", "mode", "=", "'C'", "+", "act_mode", "+", "'C'", ")", "for", "_", "in", "range", "(", "nb", ")", "]", ")", "\n", "\n", "self", ".", "m_body_decoder", "=", "sequential", "(", "\n", "*", "[", "ResBlock", "(", "nc", "[", "3", "]", ",", "nc", "[", "3", "]", ",", "bias", "=", "True", ",", "mode", "=", "'C'", "+", "act_mode", "+", "'C'", ")", "for", "_", "in", "range", "(", "nb", ")", "]", ")", "\n", "\n", "# upsample", "\n", "if", "upsample_mode", "==", "'upconv'", ":", "\n", "            ", "upsample_block", "=", "upsample_upconv", "\n", "", "elif", "upsample_mode", "==", "'pixelshuffle'", ":", "\n", "            ", "upsample_block", "=", "upsample_pixelshuffle", "\n", "", "elif", "upsample_mode", "==", "'convtranspose'", ":", "\n", "            ", "upsample_block", "=", "upsample_convtranspose", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'upsample mode [{:s}] is not found'", ".", "format", "(", "upsample_mode", ")", ")", "\n", "\n", "", "self", ".", "m_up3", "=", "nn", ".", "ModuleList", "(", "[", "upsample_block", "(", "nc", "[", "3", "]", ",", "nc", "[", "2", "]", ",", "bias", "=", "True", ",", "mode", "=", "'2'", ")", ",", "\n", "*", "[", "QFAttention", "(", "nc", "[", "2", "]", ",", "nc", "[", "2", "]", ",", "bias", "=", "True", ",", "mode", "=", "'C'", "+", "act_mode", "+", "'C'", ")", "for", "_", "in", "range", "(", "nb", ")", "]", "]", ")", "\n", "\n", "self", ".", "m_up2", "=", "nn", ".", "ModuleList", "(", "[", "upsample_block", "(", "nc", "[", "2", "]", ",", "nc", "[", "1", "]", ",", "bias", "=", "True", ",", "mode", "=", "'2'", ")", ",", "\n", "*", "[", "QFAttention", "(", "nc", "[", "1", "]", ",", "nc", "[", "1", "]", ",", "bias", "=", "True", ",", "mode", "=", "'C'", "+", "act_mode", "+", "'C'", ")", "for", "_", "in", "range", "(", "nb", ")", "]", "]", ")", "\n", "\n", "self", ".", "m_up1", "=", "nn", ".", "ModuleList", "(", "[", "upsample_block", "(", "nc", "[", "1", "]", ",", "nc", "[", "0", "]", ",", "bias", "=", "True", ",", "mode", "=", "'2'", ")", ",", "\n", "*", "[", "QFAttention", "(", "nc", "[", "0", "]", ",", "nc", "[", "0", "]", ",", "bias", "=", "True", ",", "mode", "=", "'C'", "+", "act_mode", "+", "'C'", ")", "for", "_", "in", "range", "(", "nb", ")", "]", "]", ")", "\n", "\n", "\n", "self", ".", "m_tail", "=", "conv", "(", "nc", "[", "0", "]", ",", "out_nc", ",", "bias", "=", "True", ",", "mode", "=", "'C'", ")", "\n", "\n", "\n", "self", ".", "qf_pred", "=", "sequential", "(", "*", "[", "ResBlock", "(", "nc", "[", "3", "]", ",", "nc", "[", "3", "]", ",", "bias", "=", "True", ",", "mode", "=", "'C'", "+", "act_mode", "+", "'C'", ")", "for", "_", "in", "range", "(", "nb", ")", "]", ",", "\n", "torch", ".", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", ",", "\n", "torch", ".", "nn", ".", "Flatten", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "512", ",", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "\n", "self", ".", "qf_embed", "=", "sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "1", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "\n", "self", ".", "to_gamma_3", "=", "sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "512", ",", "nc", "[", "2", "]", ")", ",", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "self", ".", "to_beta_3", "=", "sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "512", ",", "nc", "[", "2", "]", ")", ",", "nn", ".", "Tanh", "(", ")", ")", "\n", "self", ".", "to_gamma_2", "=", "sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "512", ",", "nc", "[", "1", "]", ")", ",", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "self", ".", "to_beta_2", "=", "sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "512", ",", "nc", "[", "1", "]", ")", ",", "nn", ".", "Tanh", "(", ")", ")", "\n", "self", ".", "to_gamma_1", "=", "sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "512", ",", "nc", "[", "0", "]", ")", ",", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "self", ".", "to_beta_1", "=", "sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "512", ",", "nc", "[", "0", "]", ")", ",", "nn", ".", "Tanh", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.network_fbcnn.FBCNN.forward": [[286, 332], ["int", "int", "network_fbcnn.FBCNN.m_head", "network_fbcnn.FBCNN.m_down1", "network_fbcnn.FBCNN.m_down2", "network_fbcnn.FBCNN.m_down3", "network_fbcnn.FBCNN.m_body_encoder", "network_fbcnn.FBCNN.qf_pred", "network_fbcnn.FBCNN.m_body_decoder", "network_fbcnn.FBCNN.to_gamma_3", "network_fbcnn.FBCNN.to_beta_3", "network_fbcnn.FBCNN.to_gamma_2", "network_fbcnn.FBCNN.to_beta_2", "network_fbcnn.FBCNN.to_gamma_1", "network_fbcnn.FBCNN.to_beta_1", "range", "range", "range", "network_fbcnn.FBCNN.m_tail", "network_fbcnn.FBCNN.size", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "network_fbcnn.FBCNN.qf_embed", "network_fbcnn.FBCNN.qf_embed", "numpy.ceil", "numpy.ceil"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "qf_input", "=", "None", ")", ":", "\n", "\n", "        ", "h", ",", "w", "=", "x", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "paddingBottom", "=", "int", "(", "np", ".", "ceil", "(", "h", "/", "8", ")", "*", "8", "-", "h", ")", "\n", "paddingRight", "=", "int", "(", "np", ".", "ceil", "(", "w", "/", "8", ")", "*", "8", "-", "w", ")", "\n", "x", "=", "nn", ".", "ReplicationPad2d", "(", "(", "0", ",", "paddingRight", ",", "0", ",", "paddingBottom", ")", ")", "(", "x", ")", "\n", "\n", "x1", "=", "self", ".", "m_head", "(", "x", ")", "\n", "x2", "=", "self", ".", "m_down1", "(", "x1", ")", "\n", "x3", "=", "self", ".", "m_down2", "(", "x2", ")", "\n", "x4", "=", "self", ".", "m_down3", "(", "x3", ")", "\n", "x", "=", "self", ".", "m_body_encoder", "(", "x4", ")", "\n", "qf", "=", "self", ".", "qf_pred", "(", "x", ")", "\n", "x", "=", "self", ".", "m_body_decoder", "(", "x", ")", "\n", "qf_embedding", "=", "self", ".", "qf_embed", "(", "qf_input", ")", "if", "qf_input", "is", "not", "None", "else", "self", ".", "qf_embed", "(", "qf", ")", "\n", "gamma_3", "=", "self", ".", "to_gamma_3", "(", "qf_embedding", ")", "\n", "beta_3", "=", "self", ".", "to_beta_3", "(", "qf_embedding", ")", "\n", "\n", "gamma_2", "=", "self", ".", "to_gamma_2", "(", "qf_embedding", ")", "\n", "beta_2", "=", "self", ".", "to_beta_2", "(", "qf_embedding", ")", "\n", "\n", "gamma_1", "=", "self", ".", "to_gamma_1", "(", "qf_embedding", ")", "\n", "beta_1", "=", "self", ".", "to_beta_1", "(", "qf_embedding", ")", "\n", "\n", "\n", "x", "=", "x", "+", "x4", "\n", "x", "=", "self", ".", "m_up3", "[", "0", "]", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "nb", ")", ":", "\n", "            ", "x", "=", "self", ".", "m_up3", "[", "i", "+", "1", "]", "(", "x", ",", "gamma_3", ",", "beta_3", ")", "\n", "\n", "", "x", "=", "x", "+", "x3", "\n", "\n", "x", "=", "self", ".", "m_up2", "[", "0", "]", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "nb", ")", ":", "\n", "            ", "x", "=", "self", ".", "m_up2", "[", "i", "+", "1", "]", "(", "x", ",", "gamma_2", ",", "beta_2", ")", "\n", "", "x", "=", "x", "+", "x2", "\n", "\n", "x", "=", "self", ".", "m_up1", "[", "0", "]", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "nb", ")", ":", "\n", "            ", "x", "=", "self", ".", "m_up1", "[", "i", "+", "1", "]", "(", "x", ",", "gamma_1", ",", "beta_1", ")", "\n", "\n", "", "x", "=", "x", "+", "x1", "\n", "x", "=", "self", ".", "m_tail", "(", "x", ")", "\n", "x", "=", "x", "[", "...", ",", ":", "h", ",", ":", "w", "]", "\n", "\n", "return", "x", ",", "qf", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.network_fbcnn.sequential": [[16, 37], ["torch.Sequential", "len", "isinstance", "isinstance", "NotImplementedError", "module.children", "isinstance", "modules.append", "modules.append"], "function", ["None"], ["def", "sequential", "(", "*", "args", ")", ":", "\n", "    ", "\"\"\"Advanced nn.Sequential.\n\n    Args:\n        nn.Sequential, nn.Module\n\n    Returns:\n        nn.Sequential\n    \"\"\"", "\n", "if", "len", "(", "args", ")", "==", "1", ":", "\n", "        ", "if", "isinstance", "(", "args", "[", "0", "]", ",", "OrderedDict", ")", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'sequential does not support OrderedDict input.'", ")", "\n", "", "return", "args", "[", "0", "]", "# No sequential is needed.", "\n", "", "modules", "=", "[", "]", "\n", "for", "module", "in", "args", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "nn", ".", "Sequential", ")", ":", "\n", "            ", "for", "submodule", "in", "module", ".", "children", "(", ")", ":", "\n", "                ", "modules", ".", "append", "(", "submodule", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "Module", ")", ":", "\n", "            ", "modules", ".", "append", "(", "module", ")", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.network_fbcnn.conv": [[41, 79], ["network_fbcnn.sequential", "L.append", "torch.Conv2d", "L.append", "torch.ConvTranspose2d", "L.append", "torch.BatchNorm2d", "L.append", "torch.InstanceNorm2d", "L.append", "torch.ReLU", "L.append", "torch.ReLU", "L.append", "torch.LeakyReLU", "L.append", "torch.LeakyReLU", "L.append", "torch.PixelShuffle", "L.append", "torch.PixelShuffle", "L.append", "torch.PixelShuffle", "L.append", "torch.Upsample", "L.append", "torch.Upsample", "L.append", "torch.Upsample", "L.append", "torch.MaxPool2d", "L.append", "NotImplementedError", "torch.AvgPool2d"], "function", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.network_fbcnn.sequential"], ["", "def", "conv", "(", "in_channels", "=", "64", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ",", "mode", "=", "'CBR'", ",", "negative_slope", "=", "0.2", ")", ":", "\n", "    ", "L", "=", "[", "]", "\n", "for", "t", "in", "mode", ":", "\n", "        ", "if", "t", "==", "'C'", ":", "\n", "            ", "L", ".", "append", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", ")", "\n", "", "elif", "t", "==", "'T'", ":", "\n", "            ", "L", ".", "append", "(", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", ")", "\n", "", "elif", "t", "==", "'B'", ":", "\n", "            ", "L", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "out_channels", ",", "momentum", "=", "0.9", ",", "eps", "=", "1e-04", ",", "affine", "=", "True", ")", ")", "\n", "", "elif", "t", "==", "'I'", ":", "\n", "            ", "L", ".", "append", "(", "nn", ".", "InstanceNorm2d", "(", "out_channels", ",", "affine", "=", "True", ")", ")", "\n", "", "elif", "t", "==", "'R'", ":", "\n", "            ", "L", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "elif", "t", "==", "'r'", ":", "\n", "            ", "L", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ")", "\n", "", "elif", "t", "==", "'L'", ":", "\n", "            ", "L", ".", "append", "(", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "negative_slope", ",", "inplace", "=", "True", ")", ")", "\n", "", "elif", "t", "==", "'l'", ":", "\n", "            ", "L", ".", "append", "(", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "negative_slope", ",", "inplace", "=", "False", ")", ")", "\n", "", "elif", "t", "==", "'2'", ":", "\n", "            ", "L", ".", "append", "(", "nn", ".", "PixelShuffle", "(", "upscale_factor", "=", "2", ")", ")", "\n", "", "elif", "t", "==", "'3'", ":", "\n", "            ", "L", ".", "append", "(", "nn", ".", "PixelShuffle", "(", "upscale_factor", "=", "3", ")", ")", "\n", "", "elif", "t", "==", "'4'", ":", "\n", "            ", "L", ".", "append", "(", "nn", ".", "PixelShuffle", "(", "upscale_factor", "=", "4", ")", ")", "\n", "", "elif", "t", "==", "'U'", ":", "\n", "            ", "L", ".", "append", "(", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", ")", "\n", "", "elif", "t", "==", "'u'", ":", "\n", "            ", "L", ".", "append", "(", "nn", ".", "Upsample", "(", "scale_factor", "=", "3", ",", "mode", "=", "'nearest'", ")", ")", "\n", "", "elif", "t", "==", "'v'", ":", "\n", "            ", "L", ".", "append", "(", "nn", ".", "Upsample", "(", "scale_factor", "=", "4", ",", "mode", "=", "'nearest'", ")", ")", "\n", "", "elif", "t", "==", "'M'", ":", "\n", "            ", "L", ".", "append", "(", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "0", ")", ")", "\n", "", "elif", "t", "==", "'A'", ":", "\n", "            ", "L", ".", "append", "(", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "0", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Undefined type: '", ".", "format", "(", "t", ")", ")", "\n", "", "", "return", "sequential", "(", "*", "L", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.network_fbcnn.upsample_pixelshuffle": [[100, 104], ["network_fbcnn.conv", "len", "int"], "function", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.network_fbcnn.conv"], ["", "", "def", "upsample_pixelshuffle", "(", "in_channels", "=", "64", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ",", "mode", "=", "'2R'", ",", "negative_slope", "=", "0.2", ")", ":", "\n", "    ", "assert", "len", "(", "mode", ")", "<", "4", "and", "mode", "[", "0", "]", "in", "[", "'2'", ",", "'3'", ",", "'4'", "]", ",", "'mode examples: 2, 2R, 2BR, 3, ..., 4BR.'", "\n", "up1", "=", "conv", "(", "in_channels", ",", "out_channels", "*", "(", "int", "(", "mode", "[", "0", "]", ")", "**", "2", ")", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", ",", "mode", "=", "'C'", "+", "mode", ",", "negative_slope", "=", "negative_slope", ")", "\n", "return", "up1", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.network_fbcnn.upsample_upconv": [[109, 120], ["mode.replace.replace", "network_fbcnn.conv", "len"], "function", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.network_fbcnn.conv"], ["", "def", "upsample_upconv", "(", "in_channels", "=", "64", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ",", "mode", "=", "'2R'", ",", "negative_slope", "=", "0.2", ")", ":", "\n", "    ", "assert", "len", "(", "mode", ")", "<", "4", "and", "mode", "[", "0", "]", "in", "[", "'2'", ",", "'3'", ",", "'4'", "]", ",", "'mode examples: 2, 2R, 2BR, 3, ..., 4BR'", "\n", "if", "mode", "[", "0", "]", "==", "'2'", ":", "\n", "        ", "uc", "=", "'UC'", "\n", "", "elif", "mode", "[", "0", "]", "==", "'3'", ":", "\n", "        ", "uc", "=", "'uC'", "\n", "", "elif", "mode", "[", "0", "]", "==", "'4'", ":", "\n", "        ", "uc", "=", "'vC'", "\n", "", "mode", "=", "mode", ".", "replace", "(", "mode", "[", "0", "]", ",", "uc", ")", "\n", "up1", "=", "conv", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", ",", "mode", "=", "mode", ",", "negative_slope", "=", "negative_slope", ")", "\n", "return", "up1", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.network_fbcnn.upsample_convtranspose": [[125, 132], ["int", "int", "mode.replace.replace", "network_fbcnn.conv", "len"], "function", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.network_fbcnn.conv"], ["", "def", "upsample_convtranspose", "(", "in_channels", "=", "64", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "bias", "=", "True", ",", "mode", "=", "'2R'", ",", "negative_slope", "=", "0.2", ")", ":", "\n", "    ", "assert", "len", "(", "mode", ")", "<", "4", "and", "mode", "[", "0", "]", "in", "[", "'2'", ",", "'3'", ",", "'4'", "]", ",", "'mode examples: 2, 2R, 2BR, 3, ..., 4BR.'", "\n", "kernel_size", "=", "int", "(", "mode", "[", "0", "]", ")", "\n", "stride", "=", "int", "(", "mode", "[", "0", "]", ")", "\n", "mode", "=", "mode", ".", "replace", "(", "mode", "[", "0", "]", ",", "'T'", ")", "\n", "up1", "=", "conv", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", ",", "mode", ",", "negative_slope", ")", "\n", "return", "up1", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.network_fbcnn.downsample_strideconv": [[149, 156], ["int", "int", "mode.replace.replace", "network_fbcnn.conv", "len"], "function", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.network_fbcnn.conv"], ["def", "downsample_strideconv", "(", "in_channels", "=", "64", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "bias", "=", "True", ",", "mode", "=", "'2R'", ",", "negative_slope", "=", "0.2", ")", ":", "\n", "    ", "assert", "len", "(", "mode", ")", "<", "4", "and", "mode", "[", "0", "]", "in", "[", "'2'", ",", "'3'", ",", "'4'", "]", ",", "'mode examples: 2, 2R, 2BR, 3, ..., 4BR.'", "\n", "kernel_size", "=", "int", "(", "mode", "[", "0", "]", ")", "\n", "stride", "=", "int", "(", "mode", "[", "0", "]", ")", "\n", "mode", "=", "mode", ".", "replace", "(", "mode", "[", "0", "]", ",", "'C'", ")", "\n", "down1", "=", "conv", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", ",", "mode", ",", "negative_slope", ")", "\n", "return", "down1", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.network_fbcnn.downsample_maxpool": [[161, 169], ["int", "int", "mode.replace.replace", "network_fbcnn.conv", "network_fbcnn.conv", "network_fbcnn.sequential", "len"], "function", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.network_fbcnn.conv", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.network_fbcnn.conv", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.network_fbcnn.sequential"], ["", "def", "downsample_maxpool", "(", "in_channels", "=", "64", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ",", "mode", "=", "'2R'", ",", "negative_slope", "=", "0.2", ")", ":", "\n", "    ", "assert", "len", "(", "mode", ")", "<", "4", "and", "mode", "[", "0", "]", "in", "[", "'2'", ",", "'3'", "]", ",", "'mode examples: 2, 2R, 2BR, 3, ..., 3BR.'", "\n", "kernel_size_pool", "=", "int", "(", "mode", "[", "0", "]", ")", "\n", "stride_pool", "=", "int", "(", "mode", "[", "0", "]", ")", "\n", "mode", "=", "mode", ".", "replace", "(", "mode", "[", "0", "]", ",", "'MC'", ")", "\n", "pool", "=", "conv", "(", "kernel_size", "=", "kernel_size_pool", ",", "stride", "=", "stride_pool", ",", "mode", "=", "mode", "[", "0", "]", ",", "negative_slope", "=", "negative_slope", ")", "\n", "pool_tail", "=", "conv", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", ",", "mode", "=", "mode", "[", "1", ":", "]", ",", "negative_slope", "=", "negative_slope", ")", "\n", "return", "sequential", "(", "pool", ",", "pool_tail", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.network_fbcnn.downsample_avgpool": [[174, 182], ["int", "int", "mode.replace.replace", "network_fbcnn.conv", "network_fbcnn.conv", "network_fbcnn.sequential", "len"], "function", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.network_fbcnn.conv", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.network_fbcnn.conv", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.network_fbcnn.sequential"], ["", "def", "downsample_avgpool", "(", "in_channels", "=", "64", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ",", "mode", "=", "'2R'", ",", "negative_slope", "=", "0.2", ")", ":", "\n", "    ", "assert", "len", "(", "mode", ")", "<", "4", "and", "mode", "[", "0", "]", "in", "[", "'2'", ",", "'3'", "]", ",", "'mode examples: 2, 2R, 2BR, 3, ..., 3BR.'", "\n", "kernel_size_pool", "=", "int", "(", "mode", "[", "0", "]", ")", "\n", "stride_pool", "=", "int", "(", "mode", "[", "0", "]", ")", "\n", "mode", "=", "mode", ".", "replace", "(", "mode", "[", "0", "]", ",", "'AC'", ")", "\n", "pool", "=", "conv", "(", "kernel_size", "=", "kernel_size_pool", ",", "stride", "=", "stride_pool", ",", "mode", "=", "mode", "[", "0", "]", ",", "negative_slope", "=", "negative_slope", ")", "\n", "pool_tail", "=", "conv", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", ",", "mode", "=", "mode", "[", "1", ":", "]", ",", "negative_slope", "=", "negative_slope", ")", "\n", "return", "sequential", "(", "pool", ",", "pool_tail", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.loss.GANLoss.__init__": [[9, 27], ["torch.Module.__init__", "gan_type.lower", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.MSELoss", "torch.MSELoss", "NotImplementedError", "input.mean", "input.mean"], "methods", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.data.dataset_jpeggray.DatasetJPEG.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gan_type", ",", "real_label_val", "=", "1.0", ",", "fake_label_val", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "GANLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gan_type", "=", "gan_type", ".", "lower", "(", ")", "\n", "self", ".", "real_label_val", "=", "real_label_val", "\n", "self", ".", "fake_label_val", "=", "fake_label_val", "\n", "\n", "if", "self", ".", "gan_type", "==", "'gan'", "or", "self", ".", "gan_type", "==", "'ragan'", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "", "elif", "self", ".", "gan_type", "==", "'lsgan'", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "", "elif", "self", ".", "gan_type", "==", "'wgan-gp'", ":", "\n", "            ", "def", "wgan_loss", "(", "input", ",", "target", ")", ":", "\n", "# target is boolean", "\n", "                ", "return", "-", "1", "*", "input", ".", "mean", "(", ")", "if", "target", "else", "input", ".", "mean", "(", ")", "\n", "\n", "", "self", ".", "loss", "=", "wgan_loss", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'GAN type [{:s}] is not found'", ".", "format", "(", "self", ".", "gan_type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.loss.GANLoss.get_target_label": [[28, 35], ["torch.empty_like().fill_", "torch.empty_like().fill_", "torch.empty_like().fill_", "torch.empty_like().fill_", "torch.empty_like().fill_", "torch.empty_like().fill_", "torch.empty_like().fill_", "torch.empty_like().fill_", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like"], "methods", ["None"], ["", "", "def", "get_target_label", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "if", "self", ".", "gan_type", "==", "'wgan-gp'", ":", "\n", "            ", "return", "target_is_real", "\n", "", "if", "target_is_real", ":", "\n", "            ", "return", "torch", ".", "empty_like", "(", "input", ")", ".", "fill_", "(", "self", ".", "real_label_val", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "empty_like", "(", "input", ")", ".", "fill_", "(", "self", ".", "fake_label_val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.loss.GANLoss.forward": [[36, 40], ["loss.GANLoss.GANLoss.get_target_label", "loss.GANLoss.GANLoss.loss"], "methods", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.loss.GANLoss.get_target_label"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "target_label", "=", "self", ".", "get_target_label", "(", "input", ",", "target_is_real", ")", "\n", "loss", "=", "self", ".", "loss", "(", "input", ",", "target_label", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.loss.TVLoss.__init__": [[46, 55], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.data.dataset_jpeggray.DatasetJPEG.__init__"], ["    ", "def", "__init__", "(", "self", ",", "tv_loss_weight", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Total variation loss\n        https://github.com/jxgu1016/Total_Variation_Loss.pytorch\n        Args:\n            tv_loss_weight (int):\n        \"\"\"", "\n", "super", "(", "TVLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "tv_loss_weight", "=", "tv_loss_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.loss.TVLoss.forward": [[56, 65], ["loss.TVLoss.tensor_size", "loss.TVLoss.tensor_size", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "x.size", "x.size", "x.size", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.loss.TVLoss.tensor_size", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.loss.TVLoss.tensor_size"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch_size", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "h_x", "=", "x", ".", "size", "(", ")", "[", "2", "]", "\n", "w_x", "=", "x", ".", "size", "(", ")", "[", "3", "]", "\n", "count_h", "=", "self", ".", "tensor_size", "(", "x", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", ")", "\n", "count_w", "=", "self", ".", "tensor_size", "(", "x", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", ")", "\n", "h_tv", "=", "torch", ".", "pow", "(", "(", "x", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "-", "x", "[", ":", ",", ":", ",", ":", "h_x", "-", "1", ",", ":", "]", ")", ",", "2", ")", ".", "sum", "(", ")", "\n", "w_tv", "=", "torch", ".", "pow", "(", "(", "x", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "-", "x", "[", ":", ",", ":", ",", ":", ",", ":", "w_x", "-", "1", "]", ")", ",", "2", ")", ".", "sum", "(", ")", "\n", "return", "self", ".", "tv_loss_weight", "*", "2", "*", "(", "h_tv", "/", "count_h", "+", "w_tv", "/", "count_w", ")", "/", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.loss.TVLoss.tensor_size": [[66, 69], ["t.size", "t.size", "t.size"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "tensor_size", "(", "t", ")", ":", "\n", "        ", "return", "t", ".", "size", "(", ")", "[", "1", "]", "*", "t", ".", "size", "(", ")", "[", "2", "]", "*", "t", ".", "size", "(", ")", "[", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.loss.GradientPenaltyLoss.__init__": [[75, 79], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.Module.__init__", "loss.GradientPenaltyLoss.register_buffer", "loss.GradientPenaltyLoss.grad_outputs.to", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.data.dataset_jpeggray.DatasetJPEG.__init__"], ["    ", "def", "__init__", "(", "self", ",", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", ":", "\n", "        ", "super", "(", "GradientPenaltyLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "'grad_outputs'", ",", "torch", ".", "Tensor", "(", ")", ")", "\n", "self", ".", "grad_outputs", "=", "self", ".", "grad_outputs", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.loss.GradientPenaltyLoss.get_grad_outputs": [[80, 84], ["loss.GradientPenaltyLoss.grad_outputs.size", "input.size", "loss.GradientPenaltyLoss.grad_outputs.resize_().fill_", "loss.GradientPenaltyLoss.grad_outputs.resize_", "input.size"], "methods", ["None"], ["", "def", "get_grad_outputs", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "grad_outputs", ".", "size", "(", ")", "!=", "input", ".", "size", "(", ")", ":", "\n", "            ", "self", ".", "grad_outputs", ".", "resize_", "(", "input", ".", "size", "(", ")", ")", ".", "fill_", "(", "1.0", ")", "\n", "", "return", "self", ".", "grad_outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.loss.GradientPenaltyLoss.forward": [[85, 94], ["loss.GradientPenaltyLoss.get_grad_outputs", "grad_interp.view.view.view", "grad_interp.view.view.norm", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "grad_interp.view.view.size"], "methods", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.loss.GradientPenaltyLoss.get_grad_outputs"], ["", "def", "forward", "(", "self", ",", "interp", ",", "interp_crit", ")", ":", "\n", "        ", "grad_outputs", "=", "self", ".", "get_grad_outputs", "(", "interp_crit", ")", "\n", "grad_interp", "=", "torch", ".", "autograd", ".", "grad", "(", "outputs", "=", "interp_crit", ",", "inputs", "=", "interp", ",", "grad_outputs", "=", "grad_outputs", ",", "create_graph", "=", "True", ",", "retain_graph", "=", "True", ",", "only_inputs", "=", "True", ")", "[", "0", "]", "\n", "grad_interp", "=", "grad_interp", ".", "view", "(", "grad_interp", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "grad_interp_norm", "=", "grad_interp", ".", "norm", "(", "2", ",", "dim", "=", "1", ")", "\n", "\n", "loss", "=", "(", "(", "grad_interp_norm", "-", "1", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_base.ModelBase.__init__": [[8, 14], ["torch.device", "torch.device", "torch.device", "torch.device"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "# opt", "\n", "self", ".", "save_dir", "=", "opt", "[", "'path'", "]", "[", "'models'", "]", "# save models", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "opt", "[", "'gpu_ids'", "]", "is", "not", "None", "else", "'cpu'", ")", "\n", "self", ".", "is_train", "=", "opt", "[", "'is_train'", "]", "# training or not", "\n", "self", ".", "schedulers", "=", "[", "]", "# schedulers", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_base.ModelBase.init_train": [[22, 24], ["None"], "methods", ["None"], ["def", "init_train", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_base.ModelBase.load": [[25, 27], ["None"], "methods", ["None"], ["", "def", "load", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_base.ModelBase.save": [[28, 30], ["None"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "label", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_base.ModelBase.define_loss": [[31, 33], ["None"], "methods", ["None"], ["", "def", "define_loss", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_base.ModelBase.define_optimizer": [[34, 36], ["None"], "methods", ["None"], ["", "def", "define_optimizer", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_base.ModelBase.define_scheduler": [[37, 39], ["None"], "methods", ["None"], ["", "def", "define_scheduler", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_base.ModelBase.feed_data": [[47, 49], ["None"], "methods", ["None"], ["def", "feed_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_base.ModelBase.optimize_parameters": [[50, 52], ["None"], "methods", ["None"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_base.ModelBase.current_visuals": [[53, 55], ["None"], "methods", ["None"], ["", "def", "current_visuals", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_base.ModelBase.current_losses": [[56, 58], ["None"], "methods", ["None"], ["", "def", "current_losses", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_base.ModelBase.update_learning_rate": [[59, 62], ["scheduler.step"], "methods", ["None"], ["", "def", "update_learning_rate", "(", "self", ",", "n", ")", ":", "\n", "        ", "for", "scheduler", "in", "self", ".", "schedulers", ":", "\n", "            ", "scheduler", ".", "step", "(", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_base.ModelBase.current_learning_rate": [[63, 65], ["model_base.ModelBase.schedulers[].get_lr"], "methods", ["None"], ["", "", "def", "current_learning_rate", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "schedulers", "[", "0", "]", ".", "get_lr", "(", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_base.ModelBase.print_network": [[73, 75], ["None"], "methods", ["None"], ["def", "print_network", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_base.ModelBase.info_network": [[76, 78], ["None"], "methods", ["None"], ["", "def", "info_network", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_base.ModelBase.print_params": [[79, 81], ["None"], "methods", ["None"], ["", "def", "print_params", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_base.ModelBase.info_params": [[82, 84], ["None"], "methods", ["None"], ["", "def", "info_params", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_base.ModelBase.describe_network": [[88, 96], ["isinstance", "sum", "str", "map", "network.parameters", "x.numel"], "methods", ["None"], ["", "def", "describe_network", "(", "self", ",", "network", ")", ":", "\n", "        ", "if", "isinstance", "(", "network", ",", "nn", ".", "DataParallel", ")", ":", "\n", "            ", "network", "=", "network", ".", "module", "\n", "", "msg", "=", "'\\n'", "\n", "msg", "+=", "'Networks name: {}'", ".", "format", "(", "network", ".", "__class__", ".", "__name__", ")", "+", "'\\n'", "\n", "msg", "+=", "'Params number: {}'", ".", "format", "(", "sum", "(", "map", "(", "lambda", "x", ":", "x", ".", "numel", "(", ")", ",", "network", ".", "parameters", "(", ")", ")", ")", ")", "+", "'\\n'", "\n", "msg", "+=", "'Net structure:\\n{}'", ".", "format", "(", "str", "(", "network", ")", ")", "+", "'\\n'", "\n", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_base.ModelBase.describe_params": [[100, 110], ["isinstance", "network.state_dict().items", "network.state_dict", "param.data.clone().float", "param.data.clone", "param.data.clone().float.mean", "param.data.clone().float.min", "param.data.clone().float.max", "param.data.clone().float.std"], "methods", ["None"], ["", "def", "describe_params", "(", "self", ",", "network", ")", ":", "\n", "        ", "if", "isinstance", "(", "network", ",", "nn", ".", "DataParallel", ")", ":", "\n", "            ", "network", "=", "network", ".", "module", "\n", "", "msg", "=", "'\\n'", "\n", "msg", "+=", "' | {:^6s} | {:^6s} | {:^6s} | {:^6s} || {:<20s}'", ".", "format", "(", "'mean'", ",", "'min'", ",", "'max'", ",", "'std'", ",", "'param_name'", ")", "+", "'\\n'", "\n", "for", "name", ",", "param", "in", "network", ".", "state_dict", "(", ")", ".", "items", "(", ")", ":", "\n", "            ", "if", "not", "'num_batches_tracked'", "in", "name", ":", "\n", "                ", "v", "=", "param", ".", "data", ".", "clone", "(", ")", ".", "float", "(", ")", "\n", "msg", "+=", "' | {:>6.3f} | {:>6.3f} | {:>6.3f} | {:>6.3f} || {:s}'", ".", "format", "(", "v", ".", "mean", "(", ")", ",", "v", ".", "min", "(", ")", ",", "v", ".", "max", "(", ")", ",", "v", ".", "std", "(", ")", ",", "name", ")", "+", "'\\n'", "\n", "", "", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_base.ModelBase.save_network": [[121, 130], ["os.path.join", "isinstance", "network.state_dict", "network.state_dict.items", "torch.save", "torch.save", "torch.save", "torch.save", "param.cpu"], "methods", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_fbcnn.ModelFBCNN.save", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_fbcnn.ModelFBCNN.save", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_fbcnn.ModelFBCNN.save", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_fbcnn.ModelFBCNN.save"], ["def", "save_network", "(", "self", ",", "save_dir", ",", "network", ",", "network_label", ",", "iter_label", ")", ":", "\n", "        ", "save_filename", "=", "'{}_{}.pth'", ".", "format", "(", "iter_label", ",", "network_label", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "save_filename", ")", "\n", "if", "isinstance", "(", "network", ",", "nn", ".", "DataParallel", ")", ":", "\n", "            ", "network", "=", "network", ".", "module", "\n", "", "state_dict", "=", "network", ".", "state_dict", "(", ")", "\n", "for", "key", ",", "param", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "state_dict", "[", "key", "]", "=", "param", ".", "cpu", "(", ")", "\n", "", "torch", ".", "save", "(", "state_dict", ",", "save_path", ",", "_use_new_zipfile_serialization", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_base.ModelBase.load_network": [[134, 138], ["isinstance", "network.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_fbcnn.ModelFBCNN.load", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_fbcnn.ModelFBCNN.load", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_fbcnn.ModelFBCNN.load", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_fbcnn.ModelFBCNN.load"], ["", "def", "load_network", "(", "self", ",", "load_path", ",", "network", ",", "strict", "=", "False", ")", ":", "\n", "        ", "if", "isinstance", "(", "network", ",", "nn", ".", "DataParallel", ")", ":", "\n", "            ", "network", "=", "network", ".", "module", "\n", "", "network", ".", "load_state_dict", "(", "torch", ".", "load", "(", "load_path", ")", ",", "strict", "=", "strict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_base.ModelBase.merge_bnorm_train": [[149, 154], ["utils.utils_bnorm.merge_bn", "utils.utils_bnorm.tidy_sequential", "model_base.ModelBase.define_optimizer", "model_base.ModelBase.define_scheduler"], "methods", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_bnorm.merge_bn", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_bnorm.tidy_sequential", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_fbcnn.ModelFBCNN.define_optimizer", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_fbcnn.ModelFBCNN.define_scheduler"], ["def", "merge_bnorm_train", "(", "self", ")", ":", "\n", "        ", "merge_bn", "(", "self", ".", "netG", ")", "\n", "tidy_sequential", "(", "self", ".", "netG", ")", "\n", "self", ".", "define_optimizer", "(", ")", "\n", "self", ".", "define_scheduler", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_base.ModelBase.merge_bnorm_test": [[158, 161], ["utils.utils_bnorm.merge_bn", "utils.utils_bnorm.tidy_sequential"], "methods", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_bnorm.merge_bn", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_bnorm.tidy_sequential"], ["", "def", "merge_bnorm_test", "(", "self", ")", ":", "\n", "        ", "merge_bn", "(", "self", ".", "netG", ")", "\n", "tidy_sequential", "(", "self", ".", "netG", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_fbcnn.ModelFBCNN.__init__": [[19, 26], ["models.model_base.ModelBase.__init__", "models.select_network.define_G().to", "torch.nn.parallel.DataParallel", "torch.nn.parallel.DataParallel", "models.select_network.define_G"], "methods", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.data.dataset_jpeggray.DatasetJPEG.__init__", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.select_network.define_G"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "ModelFBCNN", ",", "self", ")", ".", "__init__", "(", "opt", ")", "\n", "# ------------------------------------", "\n", "# define network", "\n", "# ------------------------------------", "\n", "self", ".", "netG", "=", "define_G", "(", "opt", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "netG", "=", "DataParallel", "(", "self", ".", "netG", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_fbcnn.ModelFBCNN.init_train": [[37, 45], ["model_fbcnn.ModelFBCNN.load", "model_fbcnn.ModelFBCNN.netG.train", "model_fbcnn.ModelFBCNN.define_loss", "model_fbcnn.ModelFBCNN.define_optimizer", "model_fbcnn.ModelFBCNN.define_scheduler", "collections.OrderedDict"], "methods", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_fbcnn.ModelFBCNN.load", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_fbcnn.ModelFBCNN.define_loss", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_fbcnn.ModelFBCNN.define_optimizer", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_fbcnn.ModelFBCNN.define_scheduler"], ["def", "init_train", "(", "self", ")", ":", "\n", "        ", "self", ".", "opt_train", "=", "self", ".", "opt", "[", "'train'", "]", "# training option", "\n", "self", ".", "load", "(", ")", "# load model", "\n", "self", ".", "netG", ".", "train", "(", ")", "# set training mode,for BN", "\n", "self", ".", "define_loss", "(", ")", "# define loss", "\n", "self", ".", "define_optimizer", "(", ")", "# define optimizer", "\n", "self", ".", "define_scheduler", "(", ")", "# define scheduler", "\n", "self", ".", "log_dict", "=", "OrderedDict", "(", ")", "# log", "\n", "# ----------------------------------------", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_fbcnn.ModelFBCNN.load": [[48, 53], ["print", "model_fbcnn.ModelFBCNN.load_network"], "methods", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_base.ModelBase.load_network"], ["", "def", "load", "(", "self", ")", ":", "\n", "        ", "load_path_G", "=", "self", ".", "opt", "[", "'path'", "]", "[", "'pretrained_netG'", "]", "\n", "if", "load_path_G", "is", "not", "None", ":", "\n", "            ", "print", "(", "'Loading model for G [{:s}] ...'", ".", "format", "(", "load_path_G", ")", ")", "\n", "self", ".", "load_network", "(", "load_path_G", ",", "self", ".", "netG", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_fbcnn.ModelFBCNN.save": [[57, 59], ["model_fbcnn.ModelFBCNN.save_network"], "methods", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_base.ModelBase.save_network"], ["", "", "def", "save", "(", "self", ",", "iter_label", ")", ":", "\n", "        ", "self", ".", "save_network", "(", "self", ".", "save_dir", ",", "self", ".", "netG", ",", "'G'", ",", "iter_label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_fbcnn.ModelFBCNN.define_loss": [[63, 89], ["torch.L1Loss().to", "torch.L1Loss().to", "torch.L1Loss().to", "torch.L1Loss().to", "torch.MSELoss().to", "torch.MSELoss().to", "torch.MSELoss().to", "torch.MSELoss().to", "torch.L1Loss", "torch.L1Loss", "torch.MSELoss().to", "torch.MSELoss().to", "torch.L1Loss", "torch.L1Loss", "torch.MSELoss().to", "torch.MSELoss().to", "NotImplementedError", "torch.MSELoss", "torch.MSELoss", "models.loss_ssim.SSIMLoss().to", "NotImplementedError", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "models.loss_ssim.SSIMLoss"], "methods", ["None"], ["", "def", "define_loss", "(", "self", ")", ":", "\n", "        ", "G_lossfn_type", "=", "self", ".", "opt_train", "[", "'G_lossfn_type'", "]", "\n", "if", "G_lossfn_type", "==", "'l1'", ":", "\n", "            ", "self", ".", "G_lossfn", "=", "nn", ".", "L1Loss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "elif", "G_lossfn_type", "==", "'l2'", ":", "\n", "            ", "self", ".", "G_lossfn", "=", "nn", ".", "MSELoss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "elif", "G_lossfn_type", "==", "'l2sum'", ":", "\n", "            ", "self", ".", "G_lossfn", "=", "nn", ".", "MSELoss", "(", "reduction", "=", "'sum'", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "elif", "G_lossfn_type", "==", "'ssim'", ":", "\n", "            ", "self", ".", "G_lossfn", "=", "SSIMLoss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Loss type [{:s}] is not found.'", ".", "format", "(", "G_lossfn_type", ")", ")", "\n", "", "self", ".", "G_lossfn_weight", "=", "self", ".", "opt_train", "[", "'G_lossfn_weight'", "]", "\n", "\n", "# define quality factor loss function", "\n", "\n", "QF_lossfn_type", "=", "self", ".", "opt_train", "[", "'QF_lossfn_type'", "]", "\n", "if", "QF_lossfn_type", "==", "'l1'", ":", "\n", "            ", "self", ".", "QF_lossfn", "=", "nn", ".", "L1Loss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "elif", "QF_lossfn_type", "==", "'l2'", ":", "\n", "            ", "self", ".", "QF_lossfn", "=", "nn", ".", "MSELoss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "elif", "QF_lossfn_type", "==", "'l2sum'", ":", "\n", "            ", "self", ".", "QF_lossfn", "=", "nn", ".", "MSELoss", "(", "reduction", "=", "'sum'", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Loss type [{:s}] is not found.'", ".", "format", "(", "QF_lossfn_type", ")", ")", "\n", "", "self", ".", "QF_lossfn_weight", "=", "self", ".", "opt_train", "[", "'QF_lossfn_weight'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_fbcnn.ModelFBCNN.define_optimizer": [[93, 101], ["model_fbcnn.ModelFBCNN.netG.named_parameters", "torch.optim.Adam", "torch.optim.Adam", "G_optim_params.append", "print"], "methods", ["None"], ["", "def", "define_optimizer", "(", "self", ")", ":", "\n", "        ", "G_optim_params", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "self", ".", "netG", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "v", ".", "requires_grad", ":", "\n", "                ", "G_optim_params", ".", "append", "(", "v", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'Params [{:s}] will not optimize.'", ".", "format", "(", "k", ")", ")", "\n", "", "", "self", ".", "G_optimizer", "=", "Adam", "(", "G_optim_params", ",", "lr", "=", "self", ".", "opt_train", "[", "'G_optimizer_lr'", "]", ",", "weight_decay", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_fbcnn.ModelFBCNN.define_scheduler": [[105, 109], ["model_fbcnn.ModelFBCNN.schedulers.append", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR"], "methods", ["None"], ["", "def", "define_scheduler", "(", "self", ")", ":", "\n", "        ", "self", ".", "schedulers", ".", "append", "(", "lr_scheduler", ".", "MultiStepLR", "(", "self", ".", "G_optimizer", ",", "\n", "self", ".", "opt_train", "[", "'G_scheduler_milestones'", "]", ",", "\n", "self", ".", "opt_train", "[", "'G_scheduler_gamma'", "]", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_fbcnn.ModelFBCNN.feed_data": [[120, 124], ["data[].to", "data[].to", "data[].to().squeeze", "data[].to"], "methods", ["None"], ["def", "feed_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "self", ".", "H", "=", "data", "[", "'H'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "L", "=", "data", "[", "'L'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "qf_gt", "=", "data", "[", "'qf'", "]", ".", "to", "(", "self", ".", "device", ")", ".", "squeeze", "(", ")", "\n", "# ----------------------------------------", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_fbcnn.ModelFBCNN.optimize_parameters": [[127, 165], ["model_fbcnn.ModelFBCNN.G_optimizer.zero_grad", "model_fbcnn.ModelFBCNN.netG", "model_fbcnn.ModelFBCNN.qf_est.squeeze", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "loss.backward", "model_fbcnn.ModelFBCNN.G_optimizer.step", "G_loss.item", "QF_loss.item", "model_fbcnn.ModelFBCNN.G_lossfn", "model_fbcnn.ModelFBCNN.QF_lossfn", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "model_fbcnn.ModelFBCNN.netG.apply", "model_fbcnn.ModelFBCNN.netG.apply", "model_fbcnn.ModelFBCNN.parameters"], "methods", ["None"], ["", "def", "optimize_parameters", "(", "self", ",", "current_step", ")", ":", "\n", "        ", "self", ".", "G_optimizer", ".", "zero_grad", "(", ")", "\n", "self", ".", "E", ",", "self", ".", "qf_est", "=", "self", ".", "netG", "(", "self", ".", "L", ")", "\n", "self", ".", "qf_est", "=", "self", ".", "qf_est", ".", "squeeze", "(", ")", "\n", "self", ".", "G_lossfn_weight", "=", "self", ".", "opt_train", "[", "'G_lossfn_weight'", "]", "\n", "G_loss", "=", "self", ".", "G_lossfn_weight", "*", "self", ".", "G_lossfn", "(", "self", ".", "E", ",", "self", ".", "H", ")", "\n", "self", ".", "QF_lossfn_weight", "=", "self", ".", "opt_train", "[", "'QF_lossfn_weight'", "]", "\n", "#        embed()", "\n", "QF_loss", "=", "self", ".", "QF_lossfn_weight", "*", "self", ".", "QF_lossfn", "(", "self", ".", "qf_est", ",", "self", ".", "qf_gt", ")", "\n", "if", "torch", ".", "isnan", "(", "self", ".", "qf_gt", "[", "0", ",", "...", "]", ")", ":", "\n", "            ", "loss", "=", "G_loss", "\n", "", "else", ":", "\n", "            ", "loss", "=", "G_loss", "+", "QF_loss", "\n", "", "loss", ".", "backward", "(", ")", "\n", "\n", "# ------------------------------------", "\n", "# clip_grad", "\n", "# ------------------------------------", "\n", "# `clip_grad_norm` helps prevent the exploding gradient problem.", "\n", "G_optimizer_clipgrad", "=", "self", ".", "opt_train", "[", "'G_optimizer_clipgrad'", "]", "if", "self", ".", "opt_train", "[", "'G_optimizer_clipgrad'", "]", "else", "0", "\n", "if", "G_optimizer_clipgrad", ">", "0", ":", "\n", "            ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "parameters", "(", ")", ",", "max_norm", "=", "self", ".", "opt_train", "[", "'G_optimizer_clipgrad'", "]", ",", "norm_type", "=", "2", ")", "\n", "\n", "", "self", ".", "G_optimizer", ".", "step", "(", ")", "\n", "\n", "# ------------------------------------", "\n", "# regularizer", "\n", "# ------------------------------------", "\n", "G_regularizer_orthstep", "=", "self", ".", "opt_train", "[", "'G_regularizer_orthstep'", "]", "if", "self", ".", "opt_train", "[", "'G_regularizer_orthstep'", "]", "else", "0", "\n", "if", "G_regularizer_orthstep", ">", "0", "and", "current_step", "%", "G_regularizer_orthstep", "==", "0", "and", "current_step", "%", "self", ".", "opt", "[", "'train'", "]", "[", "'checkpoint_save'", "]", "!=", "0", ":", "\n", "            ", "self", ".", "netG", ".", "apply", "(", "regularizer_orth", ")", "\n", "", "G_regularizer_clipstep", "=", "self", ".", "opt_train", "[", "'G_regularizer_clipstep'", "]", "if", "self", ".", "opt_train", "[", "'G_regularizer_clipstep'", "]", "else", "0", "\n", "if", "G_regularizer_clipstep", ">", "0", "and", "current_step", "%", "G_regularizer_clipstep", "==", "0", "and", "current_step", "%", "self", ".", "opt", "[", "'train'", "]", "[", "'checkpoint_save'", "]", "!=", "0", ":", "\n", "            ", "self", ".", "netG", ".", "apply", "(", "regularizer_clip", ")", "\n", "\n", "# self.log_dict['G_loss'] = G_loss.item()/self.E.size()[0]  # if `reduction='sum'`", "\n", "", "self", ".", "log_dict", "[", "'G_loss'", "]", "=", "G_loss", ".", "item", "(", ")", "\n", "self", ".", "log_dict", "[", "'QF_loss'", "]", "=", "QF_loss", ".", "item", "(", ")", "\n", "# ----------------------------------------", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_fbcnn.ModelFBCNN.test": [[168, 175], ["model_fbcnn.ModelFBCNN.netG.eval", "model_fbcnn.ModelFBCNN.netG.train", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model_fbcnn.ModelFBCNN.netG"], "methods", ["None"], ["", "def", "test", "(", "self", ")", ":", "\n", "        ", "self", ".", "netG", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "#            self.E, self.QF = self.netG(self.L, torch.tensor([0.1]).reshape(1,1))", "\n", "            ", "self", ".", "E", ",", "self", ".", "QF", "=", "self", ".", "netG", "(", "self", ".", "L", ")", "\n", "\n", "", "self", ".", "netG", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_fbcnn.ModelFBCNN.testx8": [[179, 184], ["model_fbcnn.ModelFBCNN.netG.eval", "model_fbcnn.ModelFBCNN.netG.train", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.utils_model.test_mode"], "methods", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_model.test_mode"], ["", "def", "testx8", "(", "self", ")", ":", "\n", "        ", "self", ".", "netG", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "E", "=", "test_mode", "(", "self", ".", "netG", ",", "self", ".", "L", ",", "mode", "=", "3", ",", "sf", "=", "self", ".", "opt", "[", "'scale'", "]", ",", "modulo", "=", "1", ")", "\n", "", "self", ".", "netG", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_fbcnn.ModelFBCNN.current_log": [[188, 190], ["None"], "methods", ["None"], ["", "def", "current_log", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "log_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_fbcnn.ModelFBCNN.current_visuals": [[194, 203], ["collections.OrderedDict", "[].float().cpu", "[].float().cpu", "[].float().cpu", "[].float().cpu", "[].float", "[].float", "[].float", "[].float", "model_fbcnn.ModelFBCNN.L.detach", "model_fbcnn.ModelFBCNN.E.detach", "model_fbcnn.ModelFBCNN.QF.detach", "model_fbcnn.ModelFBCNN.H.detach"], "methods", ["None"], ["", "def", "current_visuals", "(", "self", ",", "need_H", "=", "True", ")", ":", "\n", "        ", "out_dict", "=", "OrderedDict", "(", ")", "\n", "out_dict", "[", "'L'", "]", "=", "self", ".", "L", ".", "detach", "(", ")", "[", "0", "]", ".", "float", "(", ")", ".", "cpu", "(", ")", "\n", "out_dict", "[", "'E'", "]", "=", "self", ".", "E", ".", "detach", "(", ")", "[", "0", "]", ".", "float", "(", ")", ".", "cpu", "(", ")", "\n", "#        out_dict['QF'] = self.QF.mean(-1).mean(-1).detach()[0].float().cpu() # qf table", "\n", "out_dict", "[", "'QF'", "]", "=", "self", ".", "QF", ".", "detach", "(", ")", "[", "0", "]", ".", "float", "(", ")", ".", "cpu", "(", ")", "\n", "if", "need_H", ":", "\n", "            ", "out_dict", "[", "'H'", "]", "=", "self", ".", "H", ".", "detach", "(", ")", "[", "0", "]", ".", "float", "(", ")", ".", "cpu", "(", ")", "\n", "", "return", "out_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_fbcnn.ModelFBCNN.current_results": [[207, 214], ["collections.OrderedDict", "model_fbcnn.ModelFBCNN.L.detach().float().cpu", "model_fbcnn.ModelFBCNN.E.detach().float().cpu", "model_fbcnn.ModelFBCNN.H.detach().float().cpu", "model_fbcnn.ModelFBCNN.L.detach().float", "model_fbcnn.ModelFBCNN.E.detach().float", "model_fbcnn.ModelFBCNN.H.detach().float", "model_fbcnn.ModelFBCNN.L.detach", "model_fbcnn.ModelFBCNN.E.detach", "model_fbcnn.ModelFBCNN.H.detach"], "methods", ["None"], ["", "def", "current_results", "(", "self", ",", "need_O", "=", "True", ")", ":", "\n", "        ", "out_dict", "=", "OrderedDict", "(", ")", "\n", "out_dict", "[", "'L'", "]", "=", "self", ".", "L", ".", "detach", "(", ")", ".", "float", "(", ")", ".", "cpu", "(", ")", "\n", "out_dict", "[", "'E'", "]", "=", "self", ".", "E", ".", "detach", "(", ")", ".", "float", "(", ")", ".", "cpu", "(", ")", "\n", "if", "need_O", ":", "\n", "            ", "out_dict", "[", "'H'", "]", "=", "self", ".", "H", ".", "detach", "(", ")", ".", "float", "(", ")", ".", "cpu", "(", ")", "\n", "", "return", "out_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_fbcnn.ModelFBCNN.print_network": [[224, 227], ["model_fbcnn.ModelFBCNN.describe_network", "print"], "methods", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_base.ModelBase.describe_network"], ["def", "print_network", "(", "self", ")", ":", "\n", "        ", "msg", "=", "self", ".", "describe_network", "(", "self", ".", "netG", ")", "\n", "print", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_fbcnn.ModelFBCNN.print_params": [[231, 234], ["model_fbcnn.ModelFBCNN.describe_params", "print"], "methods", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_base.ModelBase.describe_params"], ["", "def", "print_params", "(", "self", ")", ":", "\n", "        ", "msg", "=", "self", ".", "describe_params", "(", "self", ".", "netG", ")", "\n", "print", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_fbcnn.ModelFBCNN.info_network": [[238, 241], ["model_fbcnn.ModelFBCNN.describe_network"], "methods", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_base.ModelBase.describe_network"], ["", "def", "info_network", "(", "self", ")", ":", "\n", "        ", "msg", "=", "self", ".", "describe_network", "(", "self", ".", "netG", ")", "\n", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_fbcnn.ModelFBCNN.info_params": [[245, 248], ["model_fbcnn.ModelFBCNN.describe_params"], "methods", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.models.model_base.ModelBase.describe_params"], ["", "def", "info_params", "(", "self", ")", ":", "\n", "        ", "msg", "=", "self", ".", "describe_params", "(", "self", ".", "netG", ")", "\n", "return", "msg", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.data.dataset_jpeggraydouble.DatasetJPEG.__init__": [[10, 23], ["torch.Dataset.__init__", "utils.get_image_paths"], "methods", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.data.dataset_jpeggray.DatasetJPEG.__init__", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.get_image_paths"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "DatasetJPEG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "n_channels", "=", "opt", "[", "'n_channels'", "]", "if", "opt", "[", "'n_channels'", "]", "else", "3", "\n", "self", ".", "patch_size", "=", "self", ".", "opt", "[", "'H_size'", "]", "if", "opt", "[", "'H_size'", "]", "else", "64", "\n", "\n", "# -------------------------------------", "\n", "# get the path of H, return None if input is None", "\n", "# -------------------------------------", "\n", "self", ".", "paths_H", "=", "util", ".", "get_image_paths", "(", "opt", "[", "'dataroot_H'", "]", ")", "\n", "\n", "self", ".", "count", "=", "0", "\n", "self", ".", "use_double", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.data.dataset_jpeggraydouble.DatasetJPEG.__getitem__": [[24, 163], ["utils.imread_uint", "random.randint", "random.randint", "random.randint", "utils.augment_img", "utils.augment_img.copy", "cv2.imdecode.copy", "cv2.imencode", "cv2.imdecode", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "cv2.imread", "cv2.imdecode.copy.copy", "cv2.imdecode.copy", "cv2.imencode", "cv2.imdecode", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "max", "max", "random.random", "random.randint", "random.choice", "random.random", "utils.rgb2ycbcr", "cv2.cvtColor", "random.choice", "random.randint", "random.randint", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "cv2.imencode", "cv2.imdecode", "random.random", "random.randint", "random.randint", "utils.uint2tensor3", "utils.uint2tensor3", "utils.uint2tensor3", "utils.uint2tensor3", "int", "max", "max", "float", "random.random", "random.randint", "random.choice", "max", "max", "int", "int"], "methods", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.imread_uint", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.augment_img", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.rgb2ycbcr", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.uint2tensor3", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.uint2tensor3", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.uint2tensor3", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.uint2tensor3"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "# -------------------------------------", "\n", "# get H image", "\n", "# -------------------------------------", "\n", "        ", "H_path", "=", "self", ".", "paths_H", "[", "index", "]", "\n", "img_H", "=", "util", ".", "imread_uint", "(", "H_path", ",", "self", ".", "n_channels", ")", "\n", "\n", "L_path", "=", "H_path", "\n", "\n", "if", "self", ".", "opt", "[", "'phase'", "]", "==", "'train'", ":", "\n", "            ", "\"\"\"\n            # --------------------------------\n            # get L/H/M patch pairs\n            # --------------------------------\n            \"\"\"", "\n", "H", ",", "W", "=", "img_H", ".", "shape", "[", ":", "2", "]", "\n", "self", ".", "patch_size_plus16", "=", "self", ".", "patch_size", "+", "16", "\n", "self", ".", "patch_size_plus8", "=", "self", ".", "patch_size", "+", "8", "\n", "# ---------------------------------", "\n", "# randomly crop the patch", "\n", "# ---------------------------------", "\n", "rnd_h", "=", "random", ".", "randint", "(", "0", ",", "max", "(", "0", ",", "H", "-", "self", ".", "patch_size_plus16", ")", ")", "\n", "rnd_w", "=", "random", ".", "randint", "(", "0", ",", "max", "(", "0", ",", "W", "-", "self", ".", "patch_size_plus16", ")", ")", "\n", "patch_H", "=", "img_H", "[", "rnd_h", ":", "rnd_h", "+", "self", ".", "patch_size_plus16", ",", "rnd_w", ":", "rnd_w", "+", "self", ".", "patch_size_plus16", ",", ":", "]", "\n", "\n", "# ---------------------------------", "\n", "# augmentation - flip, rotate", "\n", "# ---------------------------------", "\n", "mode", "=", "random", ".", "randint", "(", "0", ",", "7", ")", "\n", "patch_H", "=", "util", ".", "augment_img", "(", "patch_H", ",", "mode", "=", "mode", ")", "\n", "#            if random.random() > 0.5:", "\n", "#                patch_H = self.jitter(util.uint2tensor4(patch_H))", "\n", "#                patch_H = util.tensor2uint(patch_H)", "\n", "\n", "# ---------------------------------", "\n", "# HWC to CHW, numpy(uint) to tensor", "\n", "# ---------------------------------", "\n", "#            img_H = util.uint2tensor3(patch_H)", "\n", "#            img_L = img_H.clone()", "\n", "img_L", "=", "patch_H", ".", "copy", "(", ")", "\n", "\n", "\n", "# ---------------------------------", "\n", "# single JPEG", "\n", "# ---------------------------------", "\n", "\n", "if", "random", ".", "random", "(", ")", ">", "0.75", ":", "\n", "                ", "quality_factor", "=", "random", ".", "randint", "(", "5", ",", "95", ")", "\n", "", "else", ":", "\n", "                ", "quality_factor", "=", "random", ".", "choice", "(", "[", "10", ",", "20", ",", "30", ",", "40", ",", "50", ",", "60", ",", "70", "]", ")", "\n", "\n", "", "noise_level", "=", "(", "100", "-", "quality_factor", ")", "/", "100.0", "\n", "#img_L = cv2.cvtColor(img_L, cv2.COLOR_RGB2BGR)", "\n", "\n", "if", "random", ".", "random", "(", ")", ">", "0.25", ":", "\n", "              ", "img_L", "=", "util", ".", "rgb2ycbcr", "(", "img_L", ")", "\n", "", "else", ":", "\n", "              ", "img_L", "=", "cv2", ".", "cvtColor", "(", "img_L", ",", "cv2", ".", "COLOR_RGB2GRAY", ")", "\n", "\n", "", "img_H", "=", "img_L", ".", "copy", "(", ")", "\n", "result", ",", "encimg", "=", "cv2", ".", "imencode", "(", "'.jpg'", ",", "img_L", ",", "[", "int", "(", "cv2", ".", "IMWRITE_JPEG_QUALITY", ")", ",", "quality_factor", "]", ")", "\n", "img_L", "=", "cv2", ".", "imdecode", "(", "encimg", ",", "0", ")", "\n", "#img_L = cv2.cvtColor(img_L, cv2.COLOR_BGR2RGB)", "\n", "\n", "noise_level", "=", "torch", ".", "FloatTensor", "(", "[", "noise_level", "]", ")", "\n", "\n", "# ---------------------------------", "\n", "# double JPEG", "\n", "# ---------------------------------", "\n", "\n", "if", "self", ".", "count", "%", "self", ".", "opt", "[", "'dataloader_batch_size'", "]", "==", "0", ":", "\n", "                ", "self", ".", "count", "+=", "1", "\n", "self", ".", "use_double", "=", "random", ".", "choice", "(", "[", "False", ",", "True", "]", ")", "\n", "\n", "", "if", "self", ".", "use_double", ":", "\n", "                ", "H", ",", "W", "=", "img_H", ".", "shape", "[", ":", "2", "]", "\n", "rnd_h", "=", "random", ".", "randint", "(", "0", ",", "max", "(", "0", ",", "H", "-", "self", ".", "patch_size_plus8", ")", ")", "\n", "rnd_w", "=", "random", ".", "randint", "(", "0", ",", "max", "(", "0", ",", "W", "-", "self", ".", "patch_size_plus8", ")", ")", "\n", "img_H", "=", "img_H", "[", "rnd_h", ":", "rnd_h", "+", "self", ".", "patch_size_plus8", ",", "rnd_w", ":", "rnd_w", "+", "self", ".", "patch_size_plus8", "]", "\n", "img_L", "=", "img_L", "[", "rnd_h", ":", "rnd_h", "+", "self", ".", "patch_size_plus8", ",", "rnd_w", ":", "rnd_w", "+", "self", ".", "patch_size_plus8", "]", "\n", "noise_level", "=", "torch", ".", "tensor", "(", "float", "(", "'nan'", ")", ")", "\n", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "                    ", "quality_factor", "=", "random", ".", "randint", "(", "5", ",", "95", ")", "\n", "", "else", ":", "\n", "                    ", "quality_factor", "=", "random", ".", "choice", "(", "[", "10", ",", "20", ",", "30", ",", "40", ",", "50", ",", "60", ",", "70", "]", ")", "\n", "# noise_level2 = (100-quality_factor)/100.0", "\n", "#  noise_level2 = torch.FloatTensor([noise_level2])", "\n", "\n", "#  noise_level = torch.max(noise_level2,noise_level)", "\n", "\n", "", "result", ",", "encimg", "=", "cv2", ".", "imencode", "(", "'.jpg'", ",", "img_L", ",", "[", "int", "(", "cv2", ".", "IMWRITE_JPEG_QUALITY", ")", ",", "quality_factor", "]", ")", "\n", "img_L", "=", "cv2", ".", "imdecode", "(", "encimg", ",", "0", ")", "\n", "\n", "", "H", ",", "W", "=", "img_H", ".", "shape", "[", ":", "2", "]", "\n", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "                ", "rnd_h", "=", "random", ".", "randint", "(", "0", ",", "max", "(", "0", ",", "H", "-", "self", ".", "patch_size", ")", ")", "\n", "rnd_w", "=", "random", ".", "randint", "(", "0", ",", "max", "(", "0", ",", "W", "-", "self", ".", "patch_size", ")", ")", "\n", "", "else", ":", "\n", "                ", "rnd_h", "=", "0", "\n", "rnd_w", "=", "0", "\n", "", "img_H", "=", "img_H", "[", "rnd_h", ":", "rnd_h", "+", "self", ".", "patch_size", ",", "rnd_w", ":", "rnd_w", "+", "self", ".", "patch_size", "]", "\n", "img_L", "=", "img_L", "[", "rnd_h", ":", "rnd_h", "+", "self", ".", "patch_size", ",", "rnd_w", ":", "rnd_w", "+", "self", ".", "patch_size", "]", "\n", "\n", "#  noise_level_map = torch.ones((1, img_L.shape[0], img_L.shape[0])).mul_(noise_level).float() ", "\n", "img_L", ",", "img_H", "=", "util", ".", "uint2tensor3", "(", "img_L", ")", ",", "util", ".", "uint2tensor3", "(", "img_H", ")", "\n", "\n", "# ---------------------------------", "\n", "# add noise", "\n", "# ---------------------------------", "\n", "#            noise = torch.randn(img_L.size()).mul_(noise_level).float()", "\n", "#            img_L.add_(noise)", "\n", "\n", "", "else", ":", "\n", "            ", "\"\"\"\n            # --------------------------------\n            # get L/H/M image pairs\n            # --------------------------------\n            \"\"\"", "\n", "H_path", "=", "self", ".", "paths_H", "[", "index", "]", "\n", "img_H", "=", "cv2", ".", "imread", "(", "H_path", ",", "cv2", ".", "IMREAD_UNCHANGED", ")", "\n", "L_path", "=", "H_path", "\n", "\n", "img_L", "=", "img_H", ".", "copy", "(", ")", "\n", "grayscale", "=", "True", "if", "img_L", ".", "ndim", "==", "2", "else", "False", "\n", "\n", "quality_factor", "=", "10", "\n", "noise_level", "=", "(", "100", "-", "quality_factor", ")", "/", "100.0", "\n", "img_H", "=", "img_L", ".", "copy", "(", ")", "\n", "result", ",", "encimg", "=", "cv2", ".", "imencode", "(", "'.jpg'", ",", "img_L", ",", "[", "int", "(", "cv2", ".", "IMWRITE_JPEG_QUALITY", ")", ",", "quality_factor", "]", ")", "\n", "img_L", "=", "cv2", ".", "imdecode", "(", "encimg", ",", "0", ")", "\n", "#img_L = cv2.cvtColor(img_L, cv2.COLOR_BGR2RGB)", "\n", "\n", "noise_level", "=", "torch", ".", "FloatTensor", "(", "[", "noise_level", "]", ")", "\n", "\n", "#  noise_level_map = torch.ones((1, img_L.shape[0], img_L.shape[0])).mul_(noise_level).float()  # torch.full((1, img_L.size(1), img_L.size(2)), noise_level)", "\n", "\n", "img_L", ",", "img_H", "=", "util", ".", "uint2tensor3", "(", "img_L", "[", "...", ",", "np", ".", "newaxis", "]", ")", ",", "util", ".", "uint2tensor3", "(", "img_H", "[", "...", ",", "np", ".", "newaxis", "]", ")", "\n", "\n", "", "return", "{", "'L'", ":", "img_L", ",", "'H'", ":", "img_H", ",", "'qf'", ":", "noise_level", ",", "'L_path'", ":", "L_path", ",", "'H_path'", ":", "H_path", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.data.dataset_jpeggraydouble.DatasetJPEG.__len__": [[164, 166], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "paths_H", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.data.dataset_jpeg.DatasetJPEG.__init__": [[10, 20], ["torch.Dataset.__init__", "utils.get_image_paths"], "methods", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.data.dataset_jpeggray.DatasetJPEG.__init__", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.get_image_paths"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "DatasetJPEG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "n_channels", "=", "opt", "[", "'n_channels'", "]", "if", "opt", "[", "'n_channels'", "]", "else", "3", "\n", "self", ".", "patch_size", "=", "self", ".", "opt", "[", "'H_size'", "]", "if", "opt", "[", "'H_size'", "]", "else", "64", "\n", "\n", "# -------------------------------------", "\n", "# get the path of H, return None if input is None", "\n", "# -------------------------------------", "\n", "self", ".", "paths_H", "=", "util", ".", "get_image_paths", "(", "opt", "[", "'dataroot_H'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.data.dataset_jpeg.DatasetJPEG.__getitem__": [[21, 125], ["utils.imread_uint", "random.randint", "random.randint", "random.randint", "utils.augment_img", "utils.augment_img.copy", "utils.augment_img.copy", "cv2.cvtColor", "cv2.imencode", "cv2.imdecode", "cv2.cvtColor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "util.augment_img.copy.copy", "cv2.cvtColor", "cv2.imencode", "cv2.imdecode", "cv2.cvtColor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.ones().mul_().float", "torch.ones().mul_().float", "torch.ones().mul_().float", "torch.ones().mul_().float", "max", "max", "random.random", "random.randint", "random.choice", "random.random", "random.randint", "random.randint", "utils.uint2tensor3", "utils.uint2tensor3", "utils.uint2tensor3", "utils.uint2tensor3", "int", "max", "max", "int", "torch.ones().mul_", "torch.ones().mul_", "torch.ones().mul_", "torch.ones().mul_", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.imread_uint", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.augment_img", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.uint2tensor3", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.uint2tensor3", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.uint2tensor3", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.uint2tensor3"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "# -------------------------------------", "\n", "# get H image", "\n", "# -------------------------------------", "\n", "        ", "H_path", "=", "self", ".", "paths_H", "[", "index", "]", "\n", "img_H", "=", "util", ".", "imread_uint", "(", "H_path", ",", "self", ".", "n_channels", ")", "\n", "\n", "L_path", "=", "H_path", "\n", "\n", "if", "self", ".", "opt", "[", "'phase'", "]", "==", "'train'", ":", "\n", "            ", "\"\"\"\n            # --------------------------------\n            # get L/H/M patch pairs\n            # --------------------------------\n            \"\"\"", "\n", "H", ",", "W", "=", "img_H", ".", "shape", "[", ":", "2", "]", "\n", "\n", "# ---------------------------------", "\n", "# randomly crop the patch", "\n", "# ---------------------------------", "\n", "self", ".", "patch_size_plus8", "=", "self", ".", "patch_size", "+", "8", "\n", "# ---------------------------------", "\n", "# randomly crop the patch", "\n", "# ---------------------------------", "\n", "rnd_h", "=", "random", ".", "randint", "(", "0", ",", "max", "(", "0", ",", "H", "-", "self", ".", "patch_size_plus8", ")", ")", "\n", "rnd_w", "=", "random", ".", "randint", "(", "0", ",", "max", "(", "0", ",", "W", "-", "self", ".", "patch_size_plus8", ")", ")", "\n", "patch_H", "=", "img_H", "[", "rnd_h", ":", "rnd_h", "+", "self", ".", "patch_size_plus8", ",", "rnd_w", ":", "rnd_w", "+", "self", ".", "patch_size_plus8", ",", ":", "]", "\n", "\n", "# ---------------------------------", "\n", "# augmentation - flip, rotate", "\n", "# ---------------------------------", "\n", "mode", "=", "random", ".", "randint", "(", "0", ",", "7", ")", "\n", "patch_H", "=", "util", ".", "augment_img", "(", "patch_H", ",", "mode", "=", "mode", ")", "\n", "#            if random.random() > 0.5:", "\n", "#                patch_H = self.jitter(util.uint2tensor4(patch_H))", "\n", "#                patch_H = util.tensor2uint(patch_H)", "\n", "\n", "# ---------------------------------", "\n", "# HWC to CHW, numpy(uint) to tensor", "\n", "# ---------------------------------", "\n", "#            img_H = util.uint2tensor3(patch_H)", "\n", "#            img_L = img_H.clone()", "\n", "img_L", "=", "patch_H", ".", "copy", "(", ")", "\n", "img_H", "=", "patch_H", ".", "copy", "(", ")", "\n", "\n", "# ---------------------------------", "\n", "# get noise level", "\n", "# ---------------------------------", "\n", "\n", "if", "random", ".", "random", "(", ")", ">", "0.75", ":", "\n", "                ", "quality_factor", "=", "random", ".", "randint", "(", "8", ",", "96", ")", "\n", "", "else", ":", "\n", "                ", "quality_factor", "=", "random", ".", "choice", "(", "[", "10", ",", "20", ",", "30", ",", "40", ",", "50", ",", "60", "]", ")", "\n", "\n", "", "noise_level", "=", "(", "100", "-", "quality_factor", ")", "/", "100.0", "\n", "img_L", "=", "cv2", ".", "cvtColor", "(", "img_L", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "result", ",", "encimg", "=", "cv2", ".", "imencode", "(", "'.jpg'", ",", "img_L", ",", "[", "int", "(", "cv2", ".", "IMWRITE_JPEG_QUALITY", ")", ",", "quality_factor", "]", ")", "\n", "img_L", "=", "cv2", ".", "imdecode", "(", "encimg", ",", "1", ")", "\n", "img_L", "=", "cv2", ".", "cvtColor", "(", "img_L", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "\n", "noise_level", "=", "torch", ".", "FloatTensor", "(", "[", "noise_level", "]", ")", "\n", "\n", "H", ",", "W", "=", "img_H", ".", "shape", "[", ":", "2", "]", "\n", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "                ", "rnd_h", "=", "random", ".", "randint", "(", "0", ",", "max", "(", "0", ",", "H", "-", "self", ".", "patch_size", ")", ")", "\n", "rnd_w", "=", "random", ".", "randint", "(", "0", ",", "max", "(", "0", ",", "W", "-", "self", ".", "patch_size", ")", ")", "\n", "", "else", ":", "\n", "                ", "rnd_h", "=", "0", "\n", "rnd_w", "=", "0", "\n", "", "img_H", "=", "img_H", "[", "rnd_h", ":", "rnd_h", "+", "self", ".", "patch_size", ",", "rnd_w", ":", "rnd_w", "+", "self", ".", "patch_size", "]", "\n", "img_L", "=", "img_L", "[", "rnd_h", ":", "rnd_h", "+", "self", ".", "patch_size", ",", "rnd_w", ":", "rnd_w", "+", "self", ".", "patch_size", "]", "\n", "\n", "\n", "img_L", ",", "img_H", "=", "util", ".", "uint2tensor3", "(", "img_L", ")", ",", "util", ".", "uint2tensor3", "(", "img_H", ")", "\n", "\n", "# ---------------------------------", "\n", "# add noise", "\n", "# ---------------------------------", "\n", "#            noise = torch.randn(img_L.size()).mul_(noise_level).float()", "\n", "#            img_L.add_(noise)", "\n", "\n", "", "else", ":", "\n", "            ", "\"\"\"\n            # --------------------------------\n            # get L/H/M image pairs\n            # --------------------------------\n            \"\"\"", "\n", "img_L", "=", "img_H", ".", "copy", "(", ")", "\n", "\n", "\n", "quality_factor", "=", "10", "\n", "noise_level", "=", "(", "100", "-", "quality_factor", ")", "/", "100.0", "\n", "img_L", "=", "cv2", ".", "cvtColor", "(", "img_L", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "result", ",", "encimg", "=", "cv2", ".", "imencode", "(", "'.jpg'", ",", "img_L", ",", "[", "int", "(", "cv2", ".", "IMWRITE_JPEG_QUALITY", ")", ",", "quality_factor", "]", ")", "\n", "img_L", "=", "cv2", ".", "imdecode", "(", "encimg", ",", "1", ")", "\n", "img_L", "=", "cv2", ".", "cvtColor", "(", "img_L", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "\n", "noise_level", "=", "torch", ".", "FloatTensor", "(", "[", "noise_level", "]", ")", "\n", "\n", "noise_level_map", "=", "torch", ".", "ones", "(", "(", "1", ",", "img_L", ".", "shape", "[", "0", "]", ",", "img_L", ".", "shape", "[", "0", "]", ")", ")", ".", "mul_", "(", "noise_level", ")", ".", "float", "(", ")", "\n", "img_L", ",", "img_H", "=", "util", ".", "uint2tensor3", "(", "img_L", ")", ",", "util", ".", "uint2tensor3", "(", "img_H", ")", "\n", "\n", "\n", "", "return", "{", "'L'", ":", "img_L", ",", "'H'", ":", "img_H", ",", "'qf'", ":", "noise_level", ",", "'L_path'", ":", "L_path", ",", "'H_path'", ":", "H_path", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.data.dataset_jpeg.DatasetJPEG.__len__": [[126, 128], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "paths_H", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.data.dataset_jpeggray.DatasetJPEG.__init__": [[11, 21], ["torch.Dataset.__init__", "utils.get_image_paths"], "methods", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.data.dataset_jpeggray.DatasetJPEG.__init__", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.get_image_paths"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "DatasetJPEG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "n_channels", "=", "opt", "[", "'n_channels'", "]", "if", "opt", "[", "'n_channels'", "]", "else", "3", "\n", "self", ".", "patch_size", "=", "self", ".", "opt", "[", "'H_size'", "]", "if", "opt", "[", "'H_size'", "]", "else", "64", "\n", "\n", "# -------------------------------------", "\n", "# get the path of H, return None if input is None", "\n", "# -------------------------------------", "\n", "self", ".", "paths_H", "=", "util", ".", "get_image_paths", "(", "opt", "[", "'dataroot_H'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.data.dataset_jpeggray.DatasetJPEG.__getitem__": [[22, 131], ["utils.imread_uint", "random.randint", "random.randint", "random.randint", "utils.augment_img", "utils.augment_img.copy", "cv2.cvtColor.copy", "cv2.imencode", "cv2.imdecode", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "cv2.imread", "cv2.cvtColor.copy.copy", "cv2.cvtColor.copy", "cv2.imencode", "cv2.imdecode", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "max", "max", "random.random", "random.randint", "random.choice", "random.random", "utils.rgb2ycbcr", "cv2.cvtColor", "random.random", "random.randint", "random.randint", "utils.uint2tensor3", "utils.uint2tensor3", "utils.uint2tensor3", "utils.uint2tensor3", "int", "max", "max", "int"], "methods", ["home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.imread_uint", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.augment_img", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.rgb2ycbcr", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.uint2tensor3", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.uint2tensor3", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.uint2tensor3", "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.utils.utils_image.uint2tensor3"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "# -------------------------------------", "\n", "# get H image", "\n", "# -------------------------------------", "\n", "        ", "H_path", "=", "self", ".", "paths_H", "[", "index", "]", "\n", "img_H", "=", "util", ".", "imread_uint", "(", "H_path", ",", "self", ".", "n_channels", ")", "\n", "L_path", "=", "H_path", "\n", "\n", "if", "self", ".", "opt", "[", "'phase'", "]", "==", "'train'", ":", "\n", "            ", "\"\"\"\n            # --------------------------------\n            # get L/H/M patch pairs\n            # --------------------------------\n            \"\"\"", "\n", "H", ",", "W", "=", "img_H", ".", "shape", "[", ":", "2", "]", "\n", "self", ".", "patch_size_plus8", "=", "self", ".", "patch_size", "+", "8", "\n", "# ---------------------------------", "\n", "# randomly crop the patch", "\n", "# ---------------------------------", "\n", "rnd_h", "=", "random", ".", "randint", "(", "0", ",", "max", "(", "0", ",", "H", "-", "self", ".", "patch_size_plus8", ")", ")", "\n", "rnd_w", "=", "random", ".", "randint", "(", "0", ",", "max", "(", "0", ",", "W", "-", "self", ".", "patch_size_plus8", ")", ")", "\n", "patch_H", "=", "img_H", "[", "rnd_h", ":", "rnd_h", "+", "self", ".", "patch_size_plus8", ",", "rnd_w", ":", "rnd_w", "+", "self", ".", "patch_size_plus8", ",", ":", "]", "\n", "# ---------------------------------", "\n", "# augmentation - flip, rotate", "\n", "# ---------------------------------", "\n", "mode", "=", "random", ".", "randint", "(", "0", ",", "7", ")", "\n", "patch_H", "=", "util", ".", "augment_img", "(", "patch_H", ",", "mode", "=", "mode", ")", "\n", "#            if random.random() > 0.5:", "\n", "#                patch_H = self.jitter(util.uint2tensor4(patch_H))", "\n", "#                patch_H = util.tensor2uint(patch_H)", "\n", "\n", "# ---------------------------------", "\n", "# HWC to CHW, numpy(uint) to tensor", "\n", "# ---------------------------------", "\n", "#            img_H = util.uint2tensor3(patch_H)", "\n", "#            img_L = img_H.clone()", "\n", "img_L", "=", "patch_H", ".", "copy", "(", ")", "\n", "\n", "\n", "# ---------------------------------", "\n", "# get noise level", "\n", "# ---------------------------------", "\n", "\n", "if", "random", ".", "random", "(", ")", ">", "0.75", ":", "\n", "                ", "quality_factor", "=", "random", ".", "randint", "(", "5", ",", "95", ")", "\n", "", "else", ":", "\n", "                ", "quality_factor", "=", "random", ".", "choice", "(", "[", "10", ",", "20", ",", "30", ",", "40", ",", "50", ",", "60", "]", ")", "\n", "\n", "", "noise_level", "=", "(", "100", "-", "quality_factor", ")", "/", "100.0", "\n", "#img_L = cv2.cvtColor(img_L, cv2.COLOR_RGB2BGR)", "\n", "\n", "if", "random", ".", "random", "(", ")", ">", "0.25", ":", "\n", "                ", "img_L", "=", "util", ".", "rgb2ycbcr", "(", "img_L", ")", "\n", "", "else", ":", "\n", "              ", "img_L", "=", "cv2", ".", "cvtColor", "(", "img_L", ",", "cv2", ".", "COLOR_RGB2GRAY", ")", "\n", "\n", "", "img_H", "=", "img_L", ".", "copy", "(", ")", "\n", "result", ",", "encimg", "=", "cv2", ".", "imencode", "(", "'.jpg'", ",", "img_L", ",", "[", "int", "(", "cv2", ".", "IMWRITE_JPEG_QUALITY", ")", ",", "quality_factor", "]", ")", "\n", "img_L", "=", "cv2", ".", "imdecode", "(", "encimg", ",", "0", ")", "\n", "#img_L = cv2.cvtColor(img_L, cv2.COLOR_BGR2RGB)", "\n", "\n", "noise_level", "=", "torch", ".", "FloatTensor", "(", "[", "noise_level", "]", ")", "\n", "\n", "H", ",", "W", "=", "img_H", ".", "shape", "[", ":", "2", "]", "\n", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "                ", "rnd_h", "=", "random", ".", "randint", "(", "0", ",", "max", "(", "0", ",", "H", "-", "self", ".", "patch_size", ")", ")", "\n", "rnd_w", "=", "random", ".", "randint", "(", "0", ",", "max", "(", "0", ",", "W", "-", "self", ".", "patch_size", ")", ")", "\n", "", "else", ":", "\n", "                ", "rnd_h", "=", "0", "\n", "rnd_w", "=", "0", "\n", "", "img_H", "=", "img_H", "[", "rnd_h", ":", "rnd_h", "+", "self", ".", "patch_size", ",", "rnd_w", ":", "rnd_w", "+", "self", ".", "patch_size", "]", "\n", "img_L", "=", "img_L", "[", "rnd_h", ":", "rnd_h", "+", "self", ".", "patch_size", ",", "rnd_w", ":", "rnd_w", "+", "self", ".", "patch_size", "]", "\n", "\n", "#  noise_level_map = torch.ones((1, img_L.shape[0], img_L.shape[0])).mul_(noise_level).float() ", "\n", "img_L", ",", "img_H", "=", "util", ".", "uint2tensor3", "(", "img_L", ")", ",", "util", ".", "uint2tensor3", "(", "img_H", ")", "\n", "\n", "# ---------------------------------", "\n", "# add noise", "\n", "# ---------------------------------", "\n", "#            noise = torch.randn(img_L.size()).mul_(noise_level).float()", "\n", "#            img_L.add_(noise)", "\n", "\n", "", "else", ":", "\n", "            ", "\"\"\"\n            # --------------------------------\n            # get L/H/M image pairs\n            # --------------------------------\n            \"\"\"", "\n", "H_path", "=", "self", ".", "paths_H", "[", "index", "]", "\n", "img_H", "=", "cv2", ".", "imread", "(", "H_path", ",", "cv2", ".", "IMREAD_UNCHANGED", ")", "\n", "L_path", "=", "H_path", "\n", "\n", "img_L", "=", "img_H", ".", "copy", "(", ")", "\n", "grayscale", "=", "True", "if", "img_L", ".", "ndim", "==", "2", "else", "False", "\n", "\n", "quality_factor", "=", "10", "\n", "noise_level", "=", "(", "100", "-", "quality_factor", ")", "/", "100.0", "\n", "img_H", "=", "img_L", ".", "copy", "(", ")", "\n", "result", ",", "encimg", "=", "cv2", ".", "imencode", "(", "'.jpg'", ",", "img_L", ",", "[", "int", "(", "cv2", ".", "IMWRITE_JPEG_QUALITY", ")", ",", "quality_factor", "]", ")", "\n", "img_L", "=", "cv2", ".", "imdecode", "(", "encimg", ",", "0", ")", "\n", "#img_L = cv2.cvtColor(img_L, cv2.COLOR_BGR2RGB)", "\n", "\n", "noise_level", "=", "torch", ".", "FloatTensor", "(", "[", "noise_level", "]", ")", "\n", "\n", "#  noise_level_map = torch.ones((1, img_L.shape[0], img_L.shape[0])).mul_(noise_level).float()  # torch.full((1, img_L.size(1), img_L.size(2)), noise_level)", "\n", "\n", "img_L", ",", "img_H", "=", "util", ".", "uint2tensor3", "(", "img_L", "[", "...", ",", "np", ".", "newaxis", "]", ")", ",", "util", ".", "uint2tensor3", "(", "img_H", "[", "...", ",", "np", ".", "newaxis", "]", ")", "\n", "\n", "", "return", "{", "'L'", ":", "img_L", ",", "'H'", ":", "img_H", ",", "'qf'", ":", "noise_level", ",", "'L_path'", ":", "L_path", ",", "'H_path'", ":", "H_path", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.data.dataset_jpeggray.DatasetJPEG.__len__": [[132, 134], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "paths_H", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaxi-jiang_fbcnn.data.select_dataset.define_Dataset": [[1, 18], ["dataset_opt[].lower", "D", "print", "NotImplementedError"], "function", ["None"], ["def", "define_Dataset", "(", "dataset_opt", ")", ":", "\n", "    ", "dataset_type", "=", "dataset_opt", "[", "'dataset_type'", "]", ".", "lower", "(", ")", "\n", "if", "dataset_type", "in", "[", "'jpeg'", "]", ":", "\n", "        ", "from", "data", ".", "dataset_jpeg", "import", "DatasetJPEG", "as", "D", "\n", "\n", "", "elif", "dataset_type", "in", "[", "'jpeggray'", "]", ":", "\n", "        ", "from", "data", ".", "dataset_jpeggray", "import", "DatasetJPEG", "as", "D", "\n", "\n", "", "elif", "dataset_type", "in", "[", "'jpeggraydouble'", "]", ":", "\n", "        ", "from", "data", ".", "dataset_jpeggraydouble", "import", "DatasetJPEG", "as", "D", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Dataset [{:s}] is not found.'", ".", "format", "(", "dataset_type", ")", ")", "\n", "\n", "", "dataset", "=", "D", "(", "dataset_opt", ")", "\n", "print", "(", "'Dataset [{:s} - {:s}] is created.'", ".", "format", "(", "dataset", ".", "__class__", ".", "__name__", ",", "dataset_opt", "[", "'name'", "]", ")", ")", "\n", "return", "dataset", "\n", "", ""]]}