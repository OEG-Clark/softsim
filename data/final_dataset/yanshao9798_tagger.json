{"home.repos.pwc.inspect_result.yanshao9798_tagger.None.layers.HiddenLayer.__init__": [[11, 48], ["tensorflow.contrib.layers.xavier_initializer", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.constant_initializer", "Exception"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "bias", "=", "True", ",", "activation", "=", "'tanh'", ",", "name", "=", "'hidden_layer'", ")", ":", "\n", "        ", "\"\"\"\n        :param input_dim:\n        :param output_dim:\n        :param bias:\n        :param activation:\n        :param name:\n        :return:\n        \"\"\"", "\n", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "is_bias", "=", "bias", "\n", "self", ".", "name", "=", "name", "\n", "if", "activation", "==", "'linear'", ":", "\n", "            ", "self", ".", "activation", "=", "None", "\n", "", "elif", "activation", "==", "'tanh'", ":", "\n", "            ", "self", ".", "activation", "=", "tf", ".", "tanh", "\n", "", "elif", "activation", "==", "'sigmoid'", ":", "\n", "            ", "self", ".", "activation", "=", "tf", ".", "sigmoid", "\n", "", "elif", "activation", "==", "'softmax'", ":", "\n", "            ", "self", ".", "activation", "=", "tf", ".", "nn", ".", "softmax", "\n", "", "elif", "activation", "==", "'relu'", ":", "\n", "            ", "self", ".", "activation", "=", "tf", ".", "nn", ".", "relu", "\n", "", "elif", "activation", "is", "not", "None", ":", "\n", "            ", "raise", "Exception", "(", "'Unknown activation function: '", "%", "activation", ")", "\n", "\n", "#Initialise weights and bias", "\n", "", "rand_uniform_init", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", "self", ".", "weights", "=", "tf", ".", "get_variable", "(", "name", "+", "'_weights'", ",", "[", "input_dim", ",", "output_dim", "]", ",", "initializer", "=", "rand_uniform_init", ")", "\n", "self", ".", "bias", "=", "tf", ".", "get_variable", "(", "name", "+", "'_bias'", ",", "[", "output_dim", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "\n", "#define parameters", "\n", "if", "self", ".", "is_bias", ":", "\n", "            ", "self", ".", "params", "=", "[", "self", ".", "weights", ",", "self", ".", "bias", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "params", "=", "[", "self", ".", "weights", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yanshao9798_tagger.None.layers.HiddenLayer.__call__": [[49, 65], ["tensorflow.reshape.get_shape().as_list", "tensorflow.reshape", "tensorflow.matmul", "tensorflow.reshape", "layers.HiddenLayer.activation", "tensorflow.reshape.get_shape"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "input_t", ")", ":", "\n", "        ", "\"\"\"\n        :param input_t:\n        :return:\n        \"\"\"", "\n", "input_shape", "=", "input_t", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "input_t", "=", "tf", ".", "reshape", "(", "input_t", ",", "[", "-", "1", ",", "input_shape", "[", "-", "1", "]", "]", ")", "\n", "linear", "=", "tf", ".", "matmul", "(", "input_t", ",", "self", ".", "weights", ")", "\n", "self", ".", "linear", "=", "tf", ".", "reshape", "(", "linear", ",", "[", "-", "1", "]", "+", "input_shape", "[", "1", ":", "-", "1", "]", "+", "[", "self", ".", "output_dim", "]", ")", "\n", "if", "self", ".", "is_bias", ":", "\n", "            ", "self", ".", "linear", "+=", "self", ".", "bias", "\n", "", "if", "self", ".", "activation", "is", "None", ":", "\n", "            ", "self", ".", "output", "=", "self", ".", "linear", "\n", "", "else", ":", "\n", "            ", "self", ".", "output", "=", "self", ".", "activation", "(", "self", ".", "linear", ")", "\n", "", "return", "self", ".", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.yanshao9798_tagger.None.layers.EmbeddingLayer.__init__": [[73, 101], ["tensorflow.contrib.layers.xavier_initializer", "tensorflow.get_variable", "len", "tensorflow.get_variable", "numpy.zeros", "numpy.concatenate"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "weights", "=", "None", ",", "is_variable", "=", "False", ",", "trainable", "=", "True", ",", "name", "=", "'embedding_layer'", ")", ":", "\n", "        ", "\"\"\"\n        :param input_dim:\n        :param output_dim:\n        :param name:\n        \"\"\"", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "trainable", "=", "trainable", "\n", "self", ".", "weights", "=", "weights", "\n", "\n", "# Generate random embeddings or read pre-trained embeddings", "\n", "rand_uniform_init", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", "if", "self", ".", "weights", "is", "None", ":", "\n", "            ", "self", ".", "embeddings", "=", "tf", ".", "get_variable", "(", "self", ".", "name", "+", "'_emb'", ",", "[", "self", ".", "input_dim", ",", "self", ".", "output_dim", "]", ",", "\n", "initializer", "=", "rand_uniform_init", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "", "elif", "is_variable", ":", "\n", "            ", "self", ".", "embeddings", "=", "weights", "\n", "", "else", ":", "\n", "            ", "emb_count", "=", "len", "(", "weights", ")", "\n", "if", "emb_count", "<", "input_dim", ":", "\n", "                ", "padd_weights", "=", "np", ".", "zeros", "(", "[", "self", ".", "input_dim", "-", "emb_count", ",", "self", ".", "output_dim", "]", ",", "dtype", "=", "'float32'", ")", "\n", "self", ".", "weights", "=", "np", ".", "concatenate", "(", "(", "self", ".", "weights", ",", "padd_weights", ")", ",", "axis", "=", "0", ")", "\n", "", "self", ".", "embeddings", "=", "tf", ".", "get_variable", "(", "self", ".", "name", "+", "'_emb'", ",", "initializer", "=", "self", ".", "weights", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "#Define Parameters", "\n", "", "self", ".", "params", "=", "[", "self", ".", "embeddings", "]", "\n", "self", ".", "weight_name", "=", "self", ".", "name", "+", "'_emb'", "\n", "\n"]], "home.repos.pwc.inspect_result.yanshao9798_tagger.None.layers.EmbeddingLayer.__call__": [[102, 110], ["tensorflow.gather"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "input_t", ")", ":", "\n", "        ", "\"\"\"\n        return the embeddings of the given indexes\n        :param input:\n        :return:\n        \"\"\"", "\n", "self", ".", "output", "=", "tf", ".", "gather", "(", "self", ".", "embeddings", ",", "input_t", ")", "\n", "return", "self", ".", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.yanshao9798_tagger.None.layers.Convolution.weight_variable": [[116, 120], ["tensorflow.truncated_normal", "tensorflow.Variable"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "weight_variable", "(", "shape", ",", "name", ")", ":", "\n", "        ", "initial", "=", "tf", ".", "truncated_normal", "(", "shape", ",", "stddev", "=", "0.1", ")", "\n", "return", "tf", ".", "Variable", "(", "initial", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yanshao9798_tagger.None.layers.Convolution.bias_variable": [[121, 125], ["tensorflow.constant", "tensorflow.Variable"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "bias_variable", "(", "shape", ",", "name", ")", ":", "\n", "        ", "initial", "=", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "shape", ",", "name", "=", "name", ")", "\n", "return", "tf", ".", "Variable", "(", "initial", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yanshao9798_tagger.None.layers.Convolution.__init__": [[126, 158], ["layers.Convolution.bias_variable", "layers.Convolution.weight_variable", "layers.Convolution.weight_variable", "Exception"], "methods", ["home.repos.pwc.inspect_result.yanshao9798_tagger.None.layers.Convolution.bias_variable", "home.repos.pwc.inspect_result.yanshao9798_tagger.None.layers.Convolution.weight_variable", "home.repos.pwc.inspect_result.yanshao9798_tagger.None.layers.Convolution.weight_variable"], ["", "def", "__init__", "(", "self", ",", "conv_width", ",", "in_channels", ",", "out_channels", ",", "stride", "=", "1", ",", "dim", "=", "2", ",", "activation", "=", "'relu'", ",", "padding", "=", "'SAME'", ",", "\n", "name", "=", "'convolutional_layer'", ")", ":", "\n", "        ", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "dim", "=", "dim", "\n", "if", "dim", "==", "1", ":", "\n", "            ", "self", ".", "strides", "=", "[", "1", ",", "stride", ",", "1", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "strides", "=", "[", "1", ",", "stride", ",", "stride", ",", "1", "]", "\n", "", "self", ".", "padding", "=", "padding", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "conv_width", "=", "conv_width", "\n", "if", "dim", "==", "1", ":", "\n", "            ", "self", ".", "w_conv", "=", "self", ".", "weight_variable", "(", "[", "self", ".", "conv_width", ",", "self", ".", "in_channels", ",", "self", ".", "out_channels", "]", ",", "\n", "name", "=", "self", ".", "name", "+", "'_w'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "w_conv", "=", "self", ".", "weight_variable", "(", "[", "self", ".", "conv_width", ",", "self", ".", "conv_width", ",", "self", ".", "in_channels", ",", "\n", "self", ".", "out_channels", "]", ",", "name", "=", "self", ".", "name", "+", "'_w'", ")", "\n", "", "self", ".", "b_conv", "=", "self", ".", "bias_variable", "(", "[", "self", ".", "out_channels", "]", ",", "name", "=", "self", ".", "name", "+", "'_b'", ")", "\n", "\n", "if", "activation", "==", "'linear'", ":", "\n", "            ", "self", ".", "activation", "=", "None", "\n", "", "elif", "activation", "==", "'tanh'", ":", "\n", "            ", "self", ".", "activation", "=", "tf", ".", "tanh", "\n", "", "elif", "activation", "==", "'sigmoid'", ":", "\n", "            ", "self", ".", "activation", "=", "tf", ".", "sigmoid", "\n", "", "elif", "activation", "==", "'softmax'", ":", "\n", "            ", "self", ".", "activation", "=", "tf", ".", "nn", ".", "softmax", "\n", "", "elif", "activation", "==", "'relu'", ":", "\n", "            ", "self", ".", "activation", "=", "tf", ".", "nn", ".", "relu", "\n", "", "elif", "activation", "is", "not", "None", ":", "\n", "            ", "raise", "Exception", "(", "'Unknown activation function: '", "%", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yanshao9798_tagger.None.layers.Convolution.conv2d": [[159, 161], ["tensorflow.nn.conv2d"], "methods", ["home.repos.pwc.inspect_result.yanshao9798_tagger.None.layers.Convolution.conv2d"], ["", "", "def", "conv2d", "(", "self", ",", "x", ",", "W", ")", ":", "\n", "        ", "return", "tf", ".", "nn", ".", "conv2d", "(", "x", ",", "W", ",", "strides", "=", "self", ".", "strides", ",", "padding", "=", "self", ".", "padding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yanshao9798_tagger.None.layers.Convolution.conv1d": [[162, 164], ["tensorflow.nn.conv1d"], "methods", ["home.repos.pwc.inspect_result.yanshao9798_tagger.None.layers.Convolution.conv1d"], ["", "def", "conv1d", "(", "self", ",", "x", ",", "W", ")", ":", "\n", "        ", "return", "tf", ".", "nn", ".", "conv1d", "(", "x", ",", "W", ",", "stride", "=", "self", ".", "strides", ",", "padding", "=", "self", ".", "padding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yanshao9798_tagger.None.layers.Convolution.__call__": [[165, 170], ["layers.Convolution.activation", "layers.Convolution.activation", "layers.Convolution.conv1d", "layers.Convolution.conv2d"], "methods", ["home.repos.pwc.inspect_result.yanshao9798_tagger.None.layers.Convolution.conv1d", "home.repos.pwc.inspect_result.yanshao9798_tagger.None.layers.Convolution.conv2d"], ["", "def", "__call__", "(", "self", ",", "input_t", ")", ":", "\n", "        ", "if", "self", ".", "dim", "==", "1", ":", "\n", "            ", "return", "self", ".", "activation", "(", "self", ".", "conv1d", "(", "input_t", ",", "self", ".", "w_conv", ")", "+", "self", ".", "b_conv", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "activation", "(", "self", ".", "conv2d", "(", "input_t", ",", "self", ".", "w_conv", ")", "+", "self", ".", "b_conv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yanshao9798_tagger.None.layers.Maxpooling.__init__": [[177, 181], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "pooling_size", ",", "stride", "=", "1", ",", "padding", "=", "'SAME'", ",", "name", "=", "'pooling_layer'", ")", ":", "\n", "        ", "self", ".", "padding", "=", "padding", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "ksize", "=", "[", "1", ",", "pooling_size", ",", "pooling_size", ",", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yanshao9798_tagger.None.layers.Maxpooling.__call__": [[182, 184], ["tensorflow.nn.max_pool"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "input_v", ")", ":", "\n", "        ", "return", "tf", ".", "nn", ".", "max_pool", "(", "input_v", ",", "ksize", "=", "self", ".", "ksize", ",", "strides", "=", "self", ".", "ksize", ",", "padding", "=", "'SAME'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yanshao9798_tagger.None.layers.DropoutLayer.__init__": [[190, 198], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "p", "=", "0.5", ",", "name", "=", "'dropout_layer'", ")", ":", "\n", "        ", "\"\"\"\n        :param p: dropout rate\n        :param name:\n        \"\"\"", "\n", "#assert 0. <= p < 1", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.yanshao9798_tagger.None.layers.DropoutLayer.__call__": [[199, 202], ["tensorflow.nn.dropout"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "input_t", ")", ":", "\n", "        ", "self", ".", "input", "=", "input_t", "\n", "return", "tf", ".", "nn", ".", "dropout", "(", "self", ".", "input", ",", "keep_prob", "=", "1", "-", "self", ".", "p", ",", "name", "=", "self", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yanshao9798_tagger.None.layers.BiLSTM.__init__": [[208, 231], ["tensorflow.nn.rnn_cell.LSTMCell", "tensorflow.nn.rnn_cell.LSTMCell"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "cell_dim", ",", "nums_layers", "=", "1", ",", "p", "=", "0.5", ",", "fw_cell", "=", "None", ",", "bw_cell", "=", "None", ",", "state", "=", "False", ",", "name", "=", "'biLSTM'", ",", "\n", "scope", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param cell_dim:\n        :param nums_steps:\n        :param nums_layers:\n        :param p:\n        :param name:\n        \"\"\"", "\n", "self", ".", "cell_dim", "=", "cell_dim", "\n", "self", ".", "nums_layers", "=", "nums_layers", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "state", "=", "state", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "scope", "=", "scope", "\n", "if", "fw_cell", "is", "None", ":", "\n", "            ", "self", ".", "lstm_cell_fw", "=", "tf", ".", "nn", ".", "rnn_cell", ".", "LSTMCell", "(", "self", ".", "cell_dim", ",", "state_is_tuple", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "lstm_cell_fw", "=", "fw_cell", "\n", "", "if", "bw_cell", "is", "None", ":", "\n", "            ", "self", ".", "lstm_cell_bw", "=", "tf", ".", "nn", ".", "rnn_cell", ".", "LSTMCell", "(", "self", ".", "cell_dim", ",", "state_is_tuple", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "lstm_cell_bw", "=", "bw_cell", "\n", "#assert 0. <= p < 1", "\n"]], "home.repos.pwc.inspect_result.yanshao9798_tagger.None.layers.BiLSTM.__call__": [[233, 252], ["tensorflow.nn.rnn_cell.DropoutWrapper", "tensorflow.nn.rnn_cell.DropoutWrapper", "tensorflow.reduce_sum", "tensorflow.cast", "tensorflow.nn.bidirectional_dynamic_rnn", "tensorflow.concat", "tensorflow.nn.rnn_cell.MultiRNNCell", "tensorflow.nn.rnn_cell.MultiRNNCell", "tensorflow.sign"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "input_t", ",", "input_ids", ")", ":", "\n", "        ", "self", ".", "input", "=", "input_t", "\n", "self", ".", "input_ids", "=", "input_ids", "\n", "#if self.p > 0.:", "\n", "self", ".", "lstm_cell_fw", "=", "tf", ".", "nn", ".", "rnn_cell", ".", "DropoutWrapper", "(", "self", ".", "lstm_cell_fw", ",", "output_keep_prob", "=", "(", "1", "-", "self", ".", "p", ")", ")", "\n", "self", ".", "lstm_cell_bw", "=", "tf", ".", "nn", ".", "rnn_cell", ".", "DropoutWrapper", "(", "self", ".", "lstm_cell_bw", ",", "output_keep_prob", "=", "(", "1", "-", "self", ".", "p", ")", ")", "\n", "if", "self", ".", "nums_layers", ">", "1", ":", "\n", "            ", "self", ".", "lstm_cell_fw", "=", "tf", ".", "nn", ".", "rnn_cell", ".", "MultiRNNCell", "(", "[", "self", ".", "lstm_cell_fw", "]", "*", "self", ".", "nums_layers", ")", "\n", "self", ".", "lstm_cell_bw", "=", "tf", ".", "nn", ".", "rnn_cell", ".", "MultiRNNCell", "(", "[", "self", ".", "lstm_cell_bw", "]", "*", "self", ".", "nums_layers", ")", "\n", "", "self", ".", "length", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "sign", "(", "self", ".", "input_ids", ")", ",", "axis", "=", "1", ")", "\n", "self", ".", "length", "=", "tf", ".", "cast", "(", "self", ".", "length", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "int_states", ",", "final_states", "=", "tf", ".", "nn", ".", "bidirectional_dynamic_rnn", "(", "self", ".", "lstm_cell_fw", ",", "self", ".", "lstm_cell_bw", ",", "self", ".", "input", ",", "\n", "sequence_length", "=", "self", ".", "length", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "scope", "=", "self", ".", "scope", ")", "\n", "self", ".", "output", "=", "tf", ".", "concat", "(", "values", "=", "int_states", ",", "axis", "=", "2", ")", "\n", "if", "self", ".", "state", ":", "\n", "            ", "return", "self", ".", "output", ",", "final_states", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.yanshao9798_tagger.None.layers.TimeDistributed.__init__": [[259, 262], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "layer", ",", "name", "=", "'Time-distributed Wrapper'", ")", ":", "\n", "        ", "self", ".", "layer", "=", "layer", "\n", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.yanshao9798_tagger.None.layers.TimeDistributed.__call__": [[263, 277], ["tensorflow.unstack", "tensorflow.stack", "tensorflow.reduce_sum", "len", "range", "layers.TimeDistributed.layer", "layers.TimeDistributed.layer", "tensorflow.cond", "layers.TimeDistributed.out.append", "tensorflow.greater", "layers.TimeDistributed.layer"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "input_t", ",", "input_ids", "=", "None", ",", "pad", "=", "None", ")", ":", "\n", "        ", "self", ".", "input", "=", "tf", ".", "unstack", "(", "input_t", ",", "axis", "=", "1", ")", "\n", "if", "input_ids", "is", "None", ":", "\n", "            ", "self", ".", "out", "=", "[", "self", ".", "layer", "(", "splits", ")", "for", "splits", "in", "self", ".", "input", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "out", "=", "[", "]", "\n", "pad", "=", "self", ".", "layer", "(", "self", ".", "input", "[", "0", "]", ")", "*", "0", "\n", "masks", "=", "tf", ".", "reduce_sum", "(", "input_ids", ",", "axis", "=", "0", ")", "\n", "length", "=", "len", "(", "self", ".", "input", ")", "\n", "for", "i", "in", "range", "(", "length", ")", ":", "\n", "                ", "r", "=", "tf", ".", "cond", "(", "tf", ".", "greater", "(", "masks", "[", "i", "]", ",", "0", ")", ",", "lambda", ":", "self", ".", "layer", "(", "input_t", "[", "i", "]", ")", ",", "lambda", ":", "pad", ")", "\n", "self", ".", "out", ".", "append", "(", "r", ")", "\n", "", "", "self", ".", "out", "=", "tf", ".", "stack", "(", "self", ".", "out", ",", "axis", "=", "1", ")", "\n", "return", "self", ".", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yanshao9798_tagger.None.layers.Forward.__init__": [[283, 291], ["observations.get_shape().as_list", "observations.get_shape"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "observations", ",", "transitions", ",", "nums_tags", ",", "length", ",", "batch_size", ",", "viterbi", "=", "True", ")", ":", "\n", "        ", "self", ".", "observations", "=", "observations", "\n", "self", ".", "transitions", "=", "transitions", "\n", "self", ".", "viterbi", "=", "viterbi", "\n", "self", ".", "length", "=", "length", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "nums_tags", "=", "nums_tags", "\n", "self", ".", "nums_steps", "=", "observations", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yanshao9798_tagger.None.layers.Forward.log_sum_exp": [[292, 303], ["tensorflow.reduce_max", "tensorflow.reduce_max", "tensorflow.log", "tensorflow.reduce_sum", "tensorflow.exp"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "log_sum_exp", "(", "x", ",", "axis", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Sum probabilities in the log-space\n        :param x:\n        :param axis:\n        :return:\n        \"\"\"", "\n", "x_max", "=", "tf", ".", "reduce_max", "(", "x", ",", "axis", "=", "axis", ",", "keepdims", "=", "True", ")", "\n", "x_max_", "=", "tf", ".", "reduce_max", "(", "x", ",", "axis", "=", "axis", ")", "\n", "return", "x_max_", "+", "tf", ".", "log", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "exp", "(", "x", "-", "x_max", ")", ",", "axis", "=", "axis", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yanshao9798_tagger.None.layers.Forward.__call__": [[304, 336], ["tensorflow.stack", "tensorflow.concat", "tensorflow.cast", "tensorflow.reshape", "tensorflow.concat", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.transpose", "range", "tensorflow.stack", "tensorflow.reshape", "tensorflow.gather", "tensorflow.reshape", "tensorflow.stack", "tensorflow.stack", "tensorflow.stack", "tensorflow.tile", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape.append", "tensorflow.reduce_sum", "tensorflow.ones", "tensorflow.stack.append", "tensorflow.stack.append", "layers.Forward.log_sum_exp", "layers.Forward.log_sum_exp", "tensorflow.reduce_max", "tensorflow.argmax", "tensorflow.range"], "methods", ["home.repos.pwc.inspect_result.yanshao9798_tagger.None.layers.Forward.log_sum_exp", "home.repos.pwc.inspect_result.yanshao9798_tagger.None.layers.Forward.log_sum_exp"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "small", "=", "-", "1000", "\n", "class_pad", "=", "tf", ".", "stack", "(", "small", "*", "tf", ".", "ones", "(", "[", "self", ".", "batch_size", ",", "self", ".", "nums_steps", ",", "1", "]", ")", ")", "\n", "self", ".", "observations", "=", "tf", ".", "concat", "(", "axis", "=", "2", ",", "values", "=", "[", "self", ".", "observations", ",", "class_pad", "]", ")", "\n", "b_vec", "=", "tf", ".", "cast", "(", "tf", ".", "stack", "(", "(", "[", "small", "]", "*", "self", ".", "nums_tags", "+", "[", "0", "]", ")", "*", "self", ".", "batch_size", ")", ",", "tf", ".", "float32", ")", "\n", "b_vec", "=", "tf", ".", "reshape", "(", "b_vec", ",", "[", "self", ".", "batch_size", ",", "1", ",", "-", "1", "]", ")", "\n", "self", ".", "observations", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "b_vec", ",", "self", ".", "observations", "]", ")", "\n", "self", ".", "transitions", "=", "tf", ".", "reshape", "(", "tf", ".", "tile", "(", "self", ".", "transitions", ",", "[", "self", ".", "batch_size", ",", "1", "]", ")", ",", "\n", "[", "self", ".", "batch_size", ",", "self", ".", "nums_tags", "+", "1", ",", "self", ".", "nums_tags", "+", "1", "]", ")", "\n", "self", ".", "observations", "=", "tf", ".", "reshape", "(", "self", ".", "observations", ",", "[", "-", "1", ",", "self", ".", "nums_steps", "+", "1", ",", "self", ".", "nums_tags", "+", "1", ",", "1", "]", ")", "\n", "self", ".", "observations", "=", "tf", ".", "transpose", "(", "self", ".", "observations", ",", "[", "1", ",", "0", ",", "2", ",", "3", "]", ")", "\n", "previous", "=", "self", ".", "observations", "[", "0", ",", ":", ",", ":", ",", ":", "]", "\n", "max_scores", "=", "[", "]", "\n", "max_scores_pre", "=", "[", "]", "\n", "alphas", "=", "[", "previous", "]", "\n", "for", "t", "in", "range", "(", "1", ",", "self", ".", "nums_steps", "+", "1", ")", ":", "\n", "            ", "previous", "=", "tf", ".", "reshape", "(", "previous", ",", "[", "-", "1", ",", "self", ".", "nums_tags", "+", "1", ",", "1", "]", ")", "\n", "current", "=", "tf", ".", "reshape", "(", "self", ".", "observations", "[", "t", ",", ":", ",", ":", ",", ":", "]", ",", "[", "-", "1", ",", "1", ",", "self", ".", "nums_tags", "+", "1", "]", ")", "\n", "alpha_t", "=", "previous", "+", "current", "+", "self", ".", "transitions", "\n", "if", "self", ".", "viterbi", ":", "\n", "                ", "max_scores", ".", "append", "(", "tf", ".", "reduce_max", "(", "alpha_t", ",", "axis", "=", "1", ")", ")", "\n", "max_scores_pre", ".", "append", "(", "tf", ".", "argmax", "(", "alpha_t", ",", "axis", "=", "1", ")", ")", "\n", "", "alpha_t", "=", "tf", ".", "reshape", "(", "self", ".", "log_sum_exp", "(", "alpha_t", ",", "axis", "=", "1", ")", ",", "[", "-", "1", ",", "self", ".", "nums_tags", "+", "1", ",", "1", "]", ")", "\n", "alphas", ".", "append", "(", "alpha_t", ")", "\n", "previous", "=", "alpha_t", "\n", "", "alphas", "=", "tf", ".", "stack", "(", "alphas", ",", "axis", "=", "1", ")", "\n", "alphas", "=", "tf", ".", "reshape", "(", "alphas", ",", "[", "-", "1", ",", "self", ".", "nums_tags", "+", "1", ",", "1", "]", ")", "\n", "last_alphas", "=", "tf", ".", "gather", "(", "alphas", ",", "tf", ".", "range", "(", "0", ",", "self", ".", "batch_size", ")", "*", "(", "self", ".", "nums_steps", "+", "1", ")", "+", "self", ".", "length", ")", "\n", "last_alphas", "=", "tf", ".", "reshape", "(", "last_alphas", ",", "[", "self", ".", "batch_size", ",", "self", ".", "nums_tags", "+", "1", ",", "1", "]", ")", "\n", "max_scores", "=", "tf", ".", "stack", "(", "max_scores", ",", "axis", "=", "1", ")", "\n", "max_scores_pre", "=", "tf", ".", "stack", "(", "max_scores_pre", ",", "axis", "=", "1", ")", "\n", "return", "tf", ".", "reduce_sum", "(", "self", ".", "log_sum_exp", "(", "last_alphas", ",", "axis", "=", "1", ")", ")", ",", "max_scores", ",", "max_scores_pre", "\n", "\n"]], "home.repos.pwc.inspect_result.yanshao9798_tagger.None.losses.cross_entropy": [[7, 12], ["tensorflow.contrib.layers.one_hot_encoding", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.softmax_cross_entropy_with_logits"], "function", ["None"], ["def", "cross_entropy", "(", "y", ",", "y_", ",", "nums_tags", ")", ":", "\n", "    ", "one_hot_y_", "=", "tf", ".", "contrib", ".", "layers", ".", "one_hot_encoding", "(", "y_", ",", "nums_tags", ")", "\n", "one_hot_y_", "=", "tf", ".", "reshape", "(", "one_hot_y_", ",", "[", "-", "1", ",", "nums_tags", "]", ")", "\n", "y", "=", "tf", ".", "reshape", "(", "y", ",", "[", "-", "1", ",", "nums_tags", "]", ")", "\n", "return", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "logits", "=", "y", ",", "labels", "=", "one_hot_y_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yanshao9798_tagger.None.losses.mean_square": [[14, 16], ["tensorflow.reduce_mean", "tensorflow.square"], "function", ["None"], ["", "def", "mean_square", "(", "y", ",", "y_", ")", ":", "\n", "    ", "return", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "y_", "-", "y", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yanshao9798_tagger.None.losses.sparse_cross_entropy": [[18, 20], ["tensorflow.nn.sparse_softmax_cross_entropy_with_logits"], "function", ["None"], ["", "def", "sparse_cross_entropy", "(", "y", ",", "y_", ")", ":", "\n", "    ", "return", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "logits", "=", "y", ",", "labels", "=", "y_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yanshao9798_tagger.None.losses.sparse_cross_entropy_with_weights": [[22, 31], ["tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.cast", "tensorflow.reduce_sum", "tensorflow.sign"], "function", ["None"], ["", "def", "sparse_cross_entropy_with_weights", "(", "y", ",", "y_", ",", "weights", "=", "None", ",", "average_cross_steps", "=", "True", ")", ":", "\n", "    ", "if", "weights", "is", "None", ":", "\n", "        ", "weights", "=", "tf", ".", "cast", "(", "tf", ".", "sign", "(", "y_", ")", ",", "tf", ".", "float32", ")", "\n", "", "out", "=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "logits", "=", "y", ",", "labels", "=", "y_", ")", "\n", "if", "average_cross_steps", ":", "\n", "        ", "weights_sum", "=", "tf", ".", "reduce_sum", "(", "weights", ",", "axis", "=", "0", ")", "\n", "return", "out", "*", "weights", "/", "(", "weights_sum", "+", "1e-12", ")", "\n", "", "else", ":", "\n", "        ", "return", "out", "*", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.yanshao9798_tagger.None.losses.sequence_loss_by_example": [[33, 67], ["ValueError", "tensorflow.name_scope", "zip", "tensorflow.add_n", "len", "len", "len", "len", "log_perp_list.append", "tensorflow.add_n", "tensorflow.reshape", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "softmax_loss_function", "len", "len", "len"], "function", ["None"], ["", "", "def", "sequence_loss_by_example", "(", "logits", ",", "targets", ",", "weights", "=", "None", ",", "average_across_timesteps", "=", "True", ",", "softmax_loss_function", "=", "None", ",", "\n", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Weighted cross-entropy loss for a sequence of logits (per example).\n    Args:\n    logits: List of 2D Tensors of shape [batch_size x num_decoder_symbols].\n    targets: List of 1D batch-sized int32 Tensors of the same length as logits.\n    weights: List of 1D batch-sized float-Tensors of the same length as logits.\n    average_across_timesteps: If set, divide the returned cost by the total label weight.\n        softmax_loss_function: Function (inputs-batch, labels-batch) -> loss-batch\n        to be used instead of the standard softmax (the default if this is None).\n        name: Optional name for this operation, default: \"sequence_loss_by_example\".\n    Returns:\n        1D batch-sized float Tensor: The log-perplexity for each sequence.\n    Raises:\n        ValueError: If len(logits) is different from len(targets) or len(weights).\n    \"\"\"", "\n", "if", "len", "(", "targets", ")", "!=", "len", "(", "logits", ")", "or", "len", "(", "weights", ")", "!=", "len", "(", "logits", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Lengths of logits, weights, and targets must be the same \"", "\"%d, %d, %d.\"", "\n", "%", "(", "len", "(", "logits", ")", ",", "len", "(", "weights", ")", ",", "len", "(", "targets", ")", ")", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "name", "+", "\"sequence_loss_by_example\"", ")", ":", "\n", "        ", "log_perp_list", "=", "[", "]", "\n", "for", "logit", ",", "target", ",", "weight", "in", "zip", "(", "logits", ",", "targets", ",", "weights", ")", ":", "\n", "            ", "if", "softmax_loss_function", "is", "None", ":", "\n", "                ", "target", "=", "tf", ".", "reshape", "(", "target", ",", "[", "-", "1", "]", ")", "\n", "crossent", "=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "logits", "=", "logit", ",", "labels", "=", "target", ")", "\n", "", "else", ":", "\n", "                ", "crossent", "=", "softmax_loss_function", "(", "logit", ",", "target", ")", "\n", "", "log_perp_list", ".", "append", "(", "crossent", "*", "weight", ")", "\n", "", "log_perps", "=", "tf", ".", "add_n", "(", "log_perp_list", ")", "\n", "if", "average_across_timesteps", ":", "\n", "            ", "total_size", "=", "tf", ".", "add_n", "(", "weights", ")", "\n", "total_size", "+=", "1e-12", "# Just to avoid division by 0 for all-0 weights.", "\n", "log_perps", "/=", "total_size", "\n", "", "", "return", "log_perps", "\n", "\n"]], "home.repos.pwc.inspect_result.yanshao9798_tagger.None.losses.crf_loss": [[69, 95], ["len", "tensorflow.cast", "tensorflow.reduce_sum", "tensorflow.stack", "tensorflow.concat", "tensorflow.stack", "tensorflow.contrib.layers.one_hot_encoding", "tensorflow.reduce_sum", "tensorflow.stack", "tensorflow.cumprod", "tensorflow.reduce_sum", "tensorflow.gather", "tensorflow.unstack", "tensorflow.sign", "tensorflow.sign", "transitions.get_shape", "tensorflow.reshape", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "layers.Forward", "tensorflow.slice", "range"], "function", ["None"], ["", "def", "crf_loss", "(", "y", ",", "y_", ",", "transitions", ",", "nums_tags", ",", "batch_size", ")", ":", "\n", "    ", "tag_scores", "=", "y", "\n", "nums_steps", "=", "len", "(", "tf", ".", "unstack", "(", "tag_scores", ",", "axis", "=", "1", ")", ")", "\n", "masks", "=", "tf", ".", "cast", "(", "tf", ".", "sign", "(", "y_", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "lengths", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "sign", "(", "y_", ")", ",", "axis", "=", "1", ")", "\n", "tag_ids", "=", "y_", "\n", "b_id", "=", "tf", ".", "stack", "(", "[", "[", "nums_tags", "]", "]", "*", "batch_size", ")", "\n", "#e_id = tf.pack([[0]] * batch_size)", "\n", "padded_tag_ids", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "b_id", ",", "tag_ids", "]", ")", "\n", "idx_tag_ids", "=", "tf", ".", "stack", "(", "[", "tf", ".", "slice", "(", "padded_tag_ids", ",", "[", "0", ",", "i", "]", ",", "[", "-", "1", ",", "2", "]", ")", "for", "i", "in", "range", "(", "nums_steps", ")", "]", ",", "axis", "=", "1", ")", "\n", "tag_ids", "=", "tf", ".", "contrib", ".", "layers", ".", "one_hot_encoding", "(", "tag_ids", ",", "nums_tags", ")", "\n", "point_score", "=", "tf", ".", "reduce_sum", "(", "tag_scores", "*", "tag_ids", ",", "axis", "=", "2", ")", "\n", "point_score", "*=", "masks", "\n", "#Save for future", "\n", "#trans_score = tf.gather_nd(transitions, idx_tag_ids)", "\n", "trans_sh", "=", "tf", ".", "stack", "(", "transitions", ".", "get_shape", "(", ")", ")", "\n", "trans_sh", "=", "tf", ".", "cumprod", "(", "trans_sh", ",", "exclusive", "=", "True", ",", "reverse", "=", "True", ")", "\n", "flat_tag_ids", "=", "tf", ".", "reduce_sum", "(", "trans_sh", "*", "idx_tag_ids", ",", "axis", "=", "2", ")", "\n", "trans_score", "=", "tf", ".", "gather", "(", "tf", ".", "reshape", "(", "transitions", ",", "[", "-", "1", "]", ")", ",", "flat_tag_ids", ")", "\n", "##", "\n", "#extend_mask = tf.concat(1, [tf.ones([batch_size, 1]), masks])", "\n", "extend_mask", "=", "masks", "\n", "trans_score", "*=", "extend_mask", "\n", "target_path_score", "=", "tf", ".", "reduce_sum", "(", "point_score", ")", "+", "tf", ".", "reduce_sum", "(", "trans_score", ")", "\n", "total_path_score", ",", "_", ",", "_", "=", "Forward", "(", "tag_scores", ",", "transitions", ",", "nums_tags", ",", "lengths", ",", "batch_size", ")", "(", ")", "\n", "return", "-", "(", "target_path_score", "-", "total_path_score", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yanshao9798_tagger.None.losses.loss_wrapper": [[97, 122], ["tensorflow.stack", "len", "len", "zip", "total_loss.append", "zip", "len", "len", "len", "len", "loss_function", "len", "len", "total_loss.append", "zip", "loss_function", "total_loss.append", "zip", "zip", "loss_function", "len", "len", "total_loss.append", "total_loss.append", "tensorflow.reshape", "tensorflow.reshape", "loss_function", "loss_function"], "function", ["None"], ["", "def", "loss_wrapper", "(", "y", ",", "y_", ",", "loss_function", ",", "transitions", "=", "None", ",", "nums_tags", "=", "None", ",", "batch_size", "=", "None", ",", "weights", "=", "None", ",", "\n", "average_cross_steps", "=", "True", ")", ":", "\n", "    ", "assert", "len", "(", "y", ")", "==", "len", "(", "y_", ")", "\n", "total_loss", "=", "[", "]", "\n", "if", "loss_function", "is", "crf_loss", ":", "\n", "#print len(y), len(transitions), len(nums_tags)", "\n", "        ", "assert", "len", "(", "y", ")", "==", "len", "(", "transitions", ")", "and", "len", "(", "transitions", ")", "==", "len", "(", "nums_tags", ")", "and", "batch_size", "is", "not", "None", "\n", "for", "sy", ",", "sy_", ",", "stranstion", ",", "snums_tags", "in", "zip", "(", "y", ",", "y_", ",", "transitions", ",", "nums_tags", ")", ":", "\n", "            ", "total_loss", ".", "append", "(", "loss_function", "(", "sy", ",", "sy_", ",", "stranstion", ",", "snums_tags", ",", "batch_size", ")", ")", "\n", "", "", "elif", "loss_function", "is", "cross_entropy", ":", "\n", "        ", "assert", "len", "(", "y", ")", "==", "len", "(", "nums_tags", ")", "\n", "for", "sy", ",", "sy_", ",", "snums_tags", "in", "zip", "(", "y", ",", "y_", ",", "nums_tags", ")", ":", "\n", "            ", "total_loss", ".", "append", "(", "loss_function", "(", "sy", ",", "sy_", ",", "snums_tags", ")", ")", "\n", "", "", "elif", "loss_function", "is", "sparse_cross_entropy", ":", "\n", "        ", "for", "sy", ",", "sy_", "in", "zip", "(", "y", ",", "y_", ")", ":", "\n", "            ", "total_loss", ".", "append", "(", "loss_function", "(", "sy", ",", "sy_", ")", ")", "\n", "", "", "elif", "loss_function", "is", "sparse_cross_entropy_with_weights", ":", "\n", "        ", "assert", "len", "(", "y", ")", "==", "len", "(", "nums_tags", ")", "\n", "for", "sy", ",", "sy_", ",", "snums_tags", "in", "zip", "(", "y", ",", "y_", ")", ":", "\n", "            ", "total_loss", ".", "append", "(", "tf", ".", "reshape", "(", "loss_function", "(", "sy", ",", "sy_", ",", "weights", "=", "weights", ",", "\n", "average_cross_steps", "=", "average_cross_steps", ")", ",", "[", "-", "1", "]", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "for", "sy", ",", "sy_", "in", "zip", "(", "y", ",", "y_", ")", ":", "\n", "            ", "total_loss", ".", "append", "(", "tf", ".", "reshape", "(", "loss_function", "(", "sy", ",", "sy_", ")", ",", "[", "-", "1", "]", ")", ")", "\n", "", "", "return", "tf", ".", "stack", "(", "total_loss", ")", "\n", "\n"]]}